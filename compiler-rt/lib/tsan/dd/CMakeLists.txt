# INTEL_CUSTOMIZATION
#
# INTEL CONFIDENTIAL
#
# Modifications, Copyright (C) 2021 Intel Corporation
#
# This software and the related documents are Intel copyrighted materials, and
# your use of them is governed by the express license under which they were
# provided to you ("License"). Unless the License provides otherwise, you may not
# use, modify, copy, publish, distribute, disclose or transmit this software or
# the related documents without Intel's prior written permission.
#
# This software and the related documents are provided as is, with no express
# or implied warranties, other than those that are expressly stated in the
# License.
#
# end INTEL_CUSTOMIZATION
# Build for the experimental deadlock detector runtime library.

include_directories(../..)

set(DD_CFLAGS ${SANITIZER_COMMON_CFLAGS})
append_rtti_flag(OFF DD_CFLAGS)

set(DD_SOURCES
  dd_rtl.cpp
  dd_interceptors.cpp
  )

<<<<<<< HEAD
if (INTEL_CUSTOMIZATION)
  # Workaround for CMPLRLLVM-9960: dd_interceptors.cc redefines
  # realpath(), which is defined in bits/stdlib.h under
  # _FORTIFY_SOURCE=2.
  set_source_files_properties(dd_interceptors.cpp
    PROPERTIES COMPILE_FLAGS " -U_FORTIFY_SOURCE ")
endif(INTEL_CUSTOMIZATION)

set(DD_LINKLIBS ${SANITIZER_CXX_ABI_LIBRARIES} ${SANITIZER_COMMON_LINK_LIBS})
=======
set(DD_LINKLIBS
  ${COMPILER_RT_UNWINDER_LINK_LIBS}
  ${SANITIZER_CXX_ABI_LIBRARIES}
  ${SANITIZER_COMMON_LINK_LIBS})
>>>>>>> 826693e2b0ff1db7665809fa6e97b23071ff6627

append_list_if(COMPILER_RT_HAS_LIBDL dl DD_LINKLIBS)
append_list_if(COMPILER_RT_HAS_LIBRT rt DD_LINKLIBS)
append_list_if(COMPILER_RT_HAS_LIBPTHREAD pthread DD_LINKLIBS)

add_custom_target(dd)
set_target_properties(dd PROPERTIES FOLDER "Compiler-RT Misc")

# Deadlock detector is currently supported on 64-bit Linux only.
if(CAN_TARGET_x86_64 AND UNIX AND NOT APPLE AND NOT ANDROID)
  set(arch "x86_64")
  add_compiler_rt_runtime(clang_rt.dd
    STATIC
    ARCHS ${arch}
    SOURCES ${DD_SOURCES}
            $<TARGET_OBJECTS:RTInterception.${arch}>
            $<TARGET_OBJECTS:RTSanitizerCommon.${arch}>
            $<TARGET_OBJECTS:RTSanitizerCommonLibc.${arch}>
    CFLAGS ${DD_CFLAGS}
    PARENT_TARGET dd)

  add_compiler_rt_object_libraries(RTDD
    ARCHS ${arch}
    SOURCES ${DD_SOURCES} CFLAGS ${DD_CFLAGS})

  add_compiler_rt_runtime(clang_rt.dyndd
    SHARED
    ARCHS ${arch}
    SOURCES $<TARGET_OBJECTS:RTDD.${arch}>
            $<TARGET_OBJECTS:RTInterception.${arch}>
            $<TARGET_OBJECTS:RTSanitizerCommon.${arch}>
            $<TARGET_OBJECTS:RTSanitizerCommonLibc.${arch}>
            $<TARGET_OBJECTS:RTSanitizerCommonSymbolizer.${arch}>
    LINK_FLAGS ${SANITIZER_COMMON_LINK_FLAGS}
    LINK_LIBS ${DD_LINKLIBS}
    PARENT_TARGET dd)
endif()

add_dependencies(compiler-rt dd)
