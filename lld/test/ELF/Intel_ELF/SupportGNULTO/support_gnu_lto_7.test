# UNSUPPORTED: !linux

# Test for checking that LLD links GNU LTO objects.
# This test case checks that no GNU LTO member from the archive
# is used since it won't resolve any symbol.

# RUN: rm -f %t_arch.a

# Compile with clang++ and LTO
# RUN: clang++ -c -flto %S/Inputs/driver2.cpp -o %t_driver.o
# RUN: clang++ -c -flto %S/Inputs/foo.cpp -o %t_foo.o

# Compile with g++ and LTO
# RUN: g++ -c -flto %S/Inputs/bar.cpp -o %t_bar.o
# RUN: g++ -c -flto %S/Inputs/baz.cpp -o  %t_baz.o

# Create archive, call gcc-ar since it passes the LTO plugin to AR
# RUN: gcc-ar rsT %t_arch.a %t_bar.o %t_baz.o

# Link
# RUN: clang++ -fuse-ld=lld %t_driver.o %t_foo.o %t_arch.a -o %t_gnu_lto_test_7 > %t_out.txt 2>&1
# RUN: cat %t_out.txt | FileCheck -check-prefix=CHECKLINK %s -allow-empty

# Check that the GNU LTO objects were partially linked
CHECKLINK: GNU LTO files found in the command line.

# The functions bar and baz shouldn't be added in the executable since they
# aren't needed
# RUN: llvm-readelf -s %t_gnu_lto_test_7 | FileCheck -check-prefix=CHECKELF %s
CHECKELF: _Z3foov
CHECKELF: main
CHECKELF-NOT: _Z3barv
CHECKELF-NOT: _Z3bazv

# Check that the executable runs correctly
# RUN: %t_gnu_lto_test_7 | FileCheck -check-prefix=CHECKRUN7 %s
CHECKRUN7: FOO: 1
CHECKRUN7-NOT: BAR: 2
CHECKRUN7-NOT: BAZ: 3
