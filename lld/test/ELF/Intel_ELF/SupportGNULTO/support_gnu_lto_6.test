# UNSUPPORTED: !linux

# Test for checking that LLD links GNU LTO objects.
# This test case handles when linking with nested archives. The member
# in the inner archive is a GNU LTO object.

# Make sure the archives doesn't exists
# RUN: rm -f %t_arch.a
# RUN: rm -f %t_sub_arch.a

# Compile with clang++ and LTO
# RUN: clang++ -c -flto %S/Inputs/driver.cpp -o %t_driver.o
# RUN: clang++ -c -flto %S/Inputs/foo.cpp -o %t_foo.o

# Compile with g++ and LTO
# RUN: g++ -c -flto %S/Inputs/bar.cpp -o %t_bar.o
# RUN: g++ -c -flto %S/Inputs/baz.cpp -o  %t_baz.o

# Create archive, call gcc-ar since it passes the LTO plugin to AR
# Note: Only thin archives can have nested archives, not full archives
# RUN: gcc-ar rs %t_sub_arch.a %t_bar.o
# RUN: gcc-ar rsT %t_arch.a %t_baz.o %t_sub_arch.a

# Link
# RUN: clang++ -flto -fuse-ld=lld %t_driver.o %t_foo.o %t_arch.a -o %t_gnu_lto_test_6 > %t_out.txt 2>&1
# RUN: cat %t_out.txt | FileCheck -check-prefix=CHECKLINK %s -allow-empty

# Check that the files were linked correctly
CHECKLINK-NOT: error: undefined symbol: bar
CHECKLINK-NOT: error: undefined symbol: baz
CHECKLINK: GNU LTO files found in the command line.

# Check that the executable runs correctly
# RUN: %t_gnu_lto_test_6 | FileCheck -check-prefix=CHECKRUN6 %s
CHECKRUN6: FOO: 1
CHECKRUN6: BAR: 2
CHECKRUN6: BAZ: 3
