# UNSUPPORTED: !linux

# Test for checking that LLD links GNU LTO objects.
# This test case handles when linking with nested archives. The member
# in the inner archive is a GNU LTO object.

# Copy the files into the temporary directory, this is to prevent multiple
# processes accessing the same files when running the test system in parallel.
# RUN: cp %S/Inputs/driver.cpp driver_test_6.cpp
# RUN: cp %S/Inputs/foo.cpp foo_test_6.cpp
# RUN: cp %S/Inputs/bar.cpp bar_test_6.cpp
# RUN: cp %S/Inputs/baz.cpp baz_test_6.cpp

# Compile with clang++ and LTO
# RUN: clang++ -c -flto driver_test_6.cpp
# RUN: clang++ -c -flto foo_test_6.cpp

# Compile with G++ and LTO
# RUN: g++ -c -flto bar_test_6.cpp
# RUN: g++ -c -flto baz_test_6.cpp

# Create archive, call gcc-ar since it passes the LTO plugin to AR
# Note: Only thin archives can have nested archives, not full archives
# RUN: gcc-ar rs sub_arch_test_6.a bar_test_6.o
# RUN: gcc-ar rsT arch_test_6.a baz_test_6.o sub_arch_test_6.a

# Link
# RUN: clang++ -flto -fuse-ld=lld driver_test_6.o foo_test_6.o arch_test_6.a -o gnu_lto_test_6 > %t_out.txt 2>&1
# RUN: cat %t_out.txt | FileCheck -check-prefix=CHECKLINK %s -allow-empty

# Check that the files were linked correctly
CHECKLINK-NOT: error: undefined symbol: bar
CHECKLINK-NOT: error: undefined symbol: baz
CHECKLINK: GNU LTO files found in the command line.

# Check that the executable runs correctly
# RUN: ./gnu_lto_test_6 | FileCheck -check-prefix=CHECKRUN6 %s
CHECKRUN6: FOO: 1
CHECKRUN6: BAR: 2
CHECKRUN6: BAZ: 3

# RUN: rm driver_test_6.o foo_test_6.o bar_test_6.o baz_test_6.o
# RUN: rm gnu_lto_test_6
# RUN: rm sub_arch_test_6.a
# RUN: rm arch_test_6.a
