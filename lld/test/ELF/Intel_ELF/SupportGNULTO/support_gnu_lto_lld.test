# UNSUPPORTED: !linux
# REQUIRES: default_linker_lld

# Test for checking that LLD links GNU LTO objects when the system is using
# LLD as default linker. This is the same test case as support_gnu_lto_1.test,
# the only difference is that it will run only when LLD is set as the default
# linker (requires default_linker_lld).

# Copy the files into the temporary directory, this is to prevent multiple
# processes accessing the same files when running the test system in parallel.
# RUN: cp %S/Inputs/driver.cpp driver_test_lld.cpp
# RUN: cp %S/Inputs/foo.cpp foo_test_lld.cpp
# RUN: cp %S/Inputs/bar.cpp bar_test_lld.cpp
# RUN: cp %S/Inputs/baz.cpp baz_test_lld.cpp

# Compile with G++ and LTO
# RUN: g++ -c -flto driver_test_lld.cpp
# RUN: g++ -c -flto foo_test_lld.cpp
# RUN: g++ -c -flto bar_test_lld.cpp
# RUN: g++ -c -flto baz_test_lld.cpp

# Link
# RUN: clang++ -fuse-ld=lld driver_test_lld.o foo_test_lld.o bar_test_lld.o baz_test_lld.o -o gnu_lto_test_lld > %t_out.txt 2>&1
# RUN: cat %t_out.txt | FileCheck -check-prefix=CHECKLINK %s -allow-empty

# Check that the files were linked correctly
CHECKLINK-NOT: error: undefined symbol: main
CHECKLINK: GNU LTO files found in the command line.

# Check that the executable runs correctly
# RUN: ./gnu_lto_test_lld | FileCheck -check-prefix=CHECKRUN1 %s
CHECKRUN1: FOO: 1
CHECKRUN1: BAR: 2
CHECKRUN1: BAZ: 3

# RUN: rm driver_test_lld.o foo_test_lld.o bar_test_lld.o baz_test_lld.o
# RUN: rm gnu_lto_test_lld
