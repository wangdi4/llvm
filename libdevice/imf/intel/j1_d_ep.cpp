/*******************************************************************************
 * INTEL CONFIDENTIAL
 * Copyright 1996-2022 Intel Corporation.
 *
 * This software and the related documents are Intel copyrighted  materials, and
 * your use of  them is  governed by the  express license  under which  they
 *were provided to you (License).  Unless the License provides otherwise, you
 *may not use, modify, copy, publish, distribute,  disclose or transmit this
 *software or the related documents without Intel's prior written permission.
 *
 * This software and the related documents  are provided as  is,  with no
 *express or implied  warranties,  other  than those  that are  expressly stated
 *in the License.
 *******************************************************************************/
#include "_imf_include_fp64.hpp"
#ifdef __LIBDEVICE_IMF_ENABLED__
namespace __imf_impl_j1_d_ep {
namespace {
struct fp64 { /*/ sign:1 exponent:11 significand:52 (implied leading 1)*/
  unsigned lo_significand : 32;
  unsigned hi_significand : 20;
  unsigned exponent : 11;
  unsigned sign : 1;
};
static const uint32_t __dj1_ep__DP[] = {
    0x00000000, 0x00000000, /* 2^200 x 4/Pi, extended precision, split by 25
                               bits */
    0x60000000, 0x4c745f30, /* 2^150 x 1.43354022697369600000e+015 */
    0x00000000, 0x4aeb9391, /* 2^150 x 5.78319680000000000000e+007 */
    0x20000000, 0x494529fc, /* 2^150 x 6.61375105381011960000e-001 */
    0xc0000000, 0x47ad5f47, /* 2^150 x 1.36774911396742030000e-008 */
    0x00000000, 0x4624d377, /* 2^150 x 5.78038576612384040000e-016 */
    0x80000000, 0x447b6c52, /* 2^150 x 5.67097116406186190000e-024 */
    0x20000000, 0x430993c4, /* 2^150 x 6.30526941320619260000e-031 */
    0xe0000000, 0x4189041f, /* 2^150 x 3.67578719994527880000e-038 */
    0xe0000000, 0x3fe458ea, /* 2^150 x 4.45510746226535320000e-046 */
    0x50000000, 0x3e67aef1, /* 2^150 x 3.09082395413093270000e-053 */
    0x30000000, 0x3cd0db92, /* 2^150 x 6.55660755499121080000e-061 */
    0x80000000, 0x3b3c7484, /* 2^150 x 1.64915633578929980000e-068 */
    0x00000000, 0x39bba5c0, /* 2^150 x 9.55072531106557900000e-076 */
    0xa0000000, 0x382924bb, /* 2^150 x 2.58855104242604980000e-083 */
    0x90000000, 0x36904e8c, /* 2^150 x 5.00323524688082680000e-091 */
    0x00000000, 0x34ccfe1d, /* 2^150 x 1.65691052678466090000e-099 */
    0x20000000, 0x337d6396, /* 2^150 x 8.00878221345175640000e-106 */
    0x60000000, 0x31d4d39f, /* 2^150 x 8.45709247014436530000e-114 */
    0xf0000000, 0x3054411a, /* 2^150 x 4.90229408458623630000e-121 */
    0x40000000, 0x2ec52ebb, /* 2^150 x 1.52795298719984900000e-128 */
    0x60000000, 0x2d2213a6, /* 2^150 x 1.94299866957126560000e-136 */
    0xd0000000, 0x2ba1c09a, /* 2^150 x 1.13733453961144910000e-143 */
    0x00000000, 0x29e7df90, /* 2^150 x 5.69776444062822040000e-152 */
    0x60000000, 0x2883991d, /* 2^150 x 1.11518356990504860000e-158 */
    0x80000000, 0x26dcc1a9, /* 2^150 x 1.21915331962451730000e-166 */
    0x40000000, 0x255cfa4e, /* 2^150 x 7.32263308706998730000e-174 */
    0x80000000, 0x23a17e2e, /* 2^150 x 3.29347500466345590000e-182 */
    0x30000000, 0x224df928, /* 2^150 x 1.34544777683850980000e-188 */
    0x20000000, 0x20b63ff1, /* 2^150 x 2.97651736637168620000e-196 */
    0x10000000, 0x1f2fff78, /* 2^150 x 1.27571825625735480000e-203 */
    0xe0000000, 0x1d8980fe, /* 2^150 x 1.51516338890805680000e-211 */
    0xb0000000, 0x1c02f118, /* 2^150 x 6.70739706967294120000e-219 */
    0x40000000, 0x1a66829b, /* 2^150 x 1.18776977327670780000e-226 */
    0x40000000, 0x18cf6d36, /* 2^150 x 2.47098955256518700000e-234 */
    0xe0000000, 0x175f6793, /* 2^150 x 2.94358617354826070000e-241 */
    0x80000000, 0x15b6136e, /* 2^150 x 3.08334493652883650000e-249 */
    0xc0000000, 0x143e8c7e, /* 2^150 x 2.54318519592794750000e-256 */
    0xa0000000, 0x12aa797f, /* 2^150 x 6.56845574861513910000e-264 */
    0x30000000, 0x11116ba9, /* 2^150 x 1.28808876071917070000e-271 */
    0xb0000000, 0x0f8bac7e, /* 2^150 x 6.09821810754177020000e-279 */
    0x60000000, 0x0dfcbe2f, /* 2^150 x 1.88762133523511850000e-286 */
    0xe0000000, 0x0c5e839c, /* 2^150 x 2.98610443121133630000e-294 */
    0x40000000, 0x0adbc529, /* 2^150 x 1.61980503987574130000e-301 */
    0xf0000000, 0x0942ea6b, 0x30000000, 0x07b6bf62, 0x20000000,
    0x062e3574, 0x00000000, 0x046580cc, 0xc0000000, 0x02e1bf1e,
};
static const uint64_t __dj1_ep__DP3[] = {
    /* Pi/4, split by 24 bits */
    0x3fe921fb40000000, /* .785398125648498535156250000000000000e-00 */
    0x3e64442d00000000, /* .377489470793079817667603492736816406e-07 */
    0x3ce8469880000000, /* .269515126497888238277234052020503440e-14 */
    0x3b68cc51701b839a, /* .164100177143675023722023662896821847e-21 */
};
static const uint64_t __dj1_ep__DP2[] = {
    /* Pi/4, split by 36 bits */
    0x3fe921fb54440000, /* .785398163396166637539863586425781250e-00 */
    0x3d768c234c400000, /* .128167207563315921695079602216083003e-11 */
    0x3b68cc51701b839a, /* .164100177143675023722023662896821847e-21 */
};
/* approximation of (sin(x)/x-1)/(x^2) on |x|=[0..Pi/4], max.err .28e-13 */
static const uint64_t __dj1_ep__SP[] = {
    0xbfc555555555516d, /* -.1666666666666389001574092663227e-0 SP[0] */
    0x3f81111110fd4208, /*  .8333333331081340727248579433954e-2 SP[1] */
    0xbf2a019fd9bd0882, /* -.1984126691870238094119659272295e-3 SP[2] */
    0x3ec71d9aa585bfc4, /*  .2755599137475836194220161698382e-5 SP[3] */
    0xbe5aa2880297fc43, /* -.2480567232697144802048174630580e-7 SP[4] */
};
/* approximation of (cos(x)-1)/(x^2) on |x|=[0..Pi/4], max.err .36e-12 */
static const uint64_t __dj1_ep__CP[] = {
    0xbfdfffffffffe6a2, /* -.4999999999996395247842975513023e-0 CP[0] */
    0x3fa5555555150951, /*  .4166666663742780406412103193419e-1 CP[1] */
    0xbf56c16bae710ff8, /* -.1388888509397110798760860956647e-2 CP[2] */
    0x3efa01299942ab00, /*  .2479986285723167468258822162782e-4 CP[3] */
    0xbe9247507b5ee59e, /* -.2723719448833349736164120625340e-6 CP[4] */
};
/* |x| >= 2^30, use Payne and Hanek algorithm */
static int __dj1_ep_reduce_pi04d(double x, double *y, int n) {
  int bitpos, exp, i, j, k;
  double xl, yl, yh, t;
  struct fp64 *ptx = (struct fp64 *)&x;
  struct fp64 *ptt = (struct fp64 *)&t;
  const double PI04 =
      0.78539816339744830961566084581987572104929; /* 3FE921FB54442D18 Pi/4 */
  const double zero_none[2] = {0.0, -1.0};
  exp = ptx->exponent;
  ptx->exponent -= 200;
  /* divide x into two parts (low and high) */
  xl = x;
  ptx->lo_significand &= 0xf8000000;
  xl -= x;
  bitpos = exp - (0x03FF + 29);
  j = bitpos / 25;
  bitpos = bitpos - j * 25;
  if ((bitpos >= 17)) {
    yl = (xl * ((const double *)__dj1_ep__DP)[j + 0] +
          x * ((const double *)__dj1_ep__DP)[j + 1]);
    j++;
    t = yl;
    ptt->lo_significand &= 0xfff00000;
    yl -= t;
  } else {
    yl = zero_none[0]; /*0.0*/
  }
  yh = (xl * ((const double *)__dj1_ep__DP)[j + 0] +
        x * ((const double *)__dj1_ep__DP)[j + 1]);
  j++;
  yl = yl + yh;
  yh = (xl * ((const double *)__dj1_ep__DP)[j + 0] +
        x * ((const double *)__dj1_ep__DP)[j + 1]);
  j++;
  /* t = (int)yl */
  t = yl + yh;
  i = 0x03FF + 52 - ptt->exponent;
  (*(long long int *)&t) >>= i;
  k = ((int *)&t)[0];
  (*(long long int *)&t) <<= i;
  k += n;
  /* yl -= (int)yl; */
  yl -= t;
  *y = zero_none[k & 1];
  *y += yl;
  *y += yh;
  for (i = 0; i < 5; i++) {
    *y += (xl * ((const double *)__dj1_ep__DP)[j] +
           x * ((const double *)__dj1_ep__DP)[j + 1]);
    j++;
  }
  *y *= PI04;
  return k;
}
static int __dj1_ep_sincos_kernel_fp64(double x, int n, double *psn,
                                       double *pcs) {
  const int iones[2] = {1, -1};
  uint32_t ix;
  int j, k, ssign, csign, carry;
  double y, z, cs, sn, cs1, sn1, cs2, sn2;
  double tv;
  const uint64_t _INV_PI04 =
      0x3ff45f306dc9c883; /* 1.27323954473516276486577680 4/Pi */
  const uint64_t _TWO_52H = 0x4338000000000000; /* 2^52+2^51 */
  const double ones[2] = {1.0, -1.0};
  const double PI04 =
      0.78539816339744830961566084581987572104929; /* 3FE921FB54442D18 Pi/4 */
  ix = (((int *)&x)[1] & ~0x80000000);
  ssign = ((unsigned)((int *)&x)[1] >> 31);
  x = __fabs(x);
  n *= iones[ssign];
  if (ix < 0x41c00000) /* if |x| < 2^30 use Cody algorithm */
  {
    if (ix <= 0x3ff90000) {
      if ((k = n + 1) & 2)
        x -= PI04;
    } else {
      y = x * (*(const double *)&_INV_PI04);
      tv = (y + (*(const double *)&_TWO_52H));
      j = ((int *)&tv)[0];  /* integer part of x/PIO4 */
      j -= ((double)j > y); /* truncation */
      k = j + n;
      carry = (k & 1);
      k += carry;
      j += carry; /* map zeros to origin */
      /* Extended precision modular arithmetic */
      if (ix < 0x41000000) {
        x = x - j * ((const double *)__dj1_ep__DP2)[0] -
            j * ((const double *)__dj1_ep__DP2)[1] -
            j * ((const double *)__dj1_ep__DP2)[2];
      } else {
        x = x - j * ((const double *)__dj1_ep__DP3)[0] -
            j * ((const double *)__dj1_ep__DP3)[1] -
            j * ((const double *)__dj1_ep__DP3)[2] -
            j * ((const double *)__dj1_ep__DP3)[3];
      }
    }
  } else /* if |x| >= 2^30 use Payne and Hanek algorithm */
  {
    k = 1 + __dj1_ep_reduce_pi04d(x, &x, n);
  }
  csign = ((k + 2) >> 2) & 1;
  ssign ^= (k >> 2) & 1;
  y = x * x;
  z = y * y;
  cs1 = (((const double *)__dj1_ep__CP)[3] * z +
         ((const double *)__dj1_ep__CP)[1]) *
            z +
        ones[0];
  sn1 = (((const double *)__dj1_ep__SP)[3] * z +
         ((const double *)__dj1_ep__SP)[1]) *
            z * x +
        x;
  cs2 = ((((const double *)__dj1_ep__CP)[4] * z +
          ((const double *)__dj1_ep__CP)[2]) *
             z +
         ((const double *)__dj1_ep__CP)[0]) *
        y;
  sn2 = ((((const double *)__dj1_ep__SP)[4] * z +
          ((const double *)__dj1_ep__SP)[2]) *
             z +
         ((const double *)__dj1_ep__SP)[0]) *
        y * x;
  cs = (cs1 + cs2);
  sn = (sn1 + sn2);
  if (k & 2) {
    *psn = cs * ones[ssign];
    *pcs = sn * ones[csign];
  } else {
    *psn = sn * ones[ssign];
    *pcs = cs * ones[csign];
  }
  return k;
}

/*
//
//    FUNCTION:     double j1(double x)
//                  The Bessel function of first kind,
//                  order one of the argument.  Double precision.
//
//    DESCRIPTION:
//
//       Returns Bessel function of first kind, order one of the argument.
//
//       1. Polynomial approximation of j1(x) in the interval [0.0,36.91...].
//       2. Hancels asymptotic forms in the interval [36.91...,MaxVal].
//       3. j1(x)=-j1(|x|) for x < 0.0.
//       4. Special cases:
//          j1(+0.0) = +0.0;
//          j1(-0.0) = -0.0;
//          j1(+-INF)= 0.0;
//          j1(Nan)  = Nan.
//
//
//
//  Interval bounds:
//
*/
static const double __dj1_ep_dS[] = {
    0x1.33d152e971b4p+1,  //  2.40482555769577289 [0x40033D152E971B40]
    0x1.6148f5b2c2e45p+2, //  5.52007811028631057 [0x4016148F5B2C2E45]
    0x1.14eb56cccdecap+3, //  8.65372791291101251 [0x40214EB56CCCDECA]
    0x1.79544008272b6p+3, //  11.7915344390142813 [0x40279544008272B6]
    0x1.ddca13ef271d2p+3, //  14.9309177084877867 [0x402DDCA13EF271D2]
    0x1.212313f8a19f6p+4, //  18.0710639679109235 [0x403212313F8A19F6]
    0x1.5362dd173f792p+4, //  21.2116366298792585 [0x4035362DD173F792]
    0x1.85a3b930156ddp+4, //  24.3524715307493018 [0x40385A3B930156DD]
    0x1.b7e54a5fd5f11p+4, //  27.4934791320402532 [0x403B7E54A5FD5F11]
    0x1.ea27591cbbed2p+4, //  30.6346064684319757 [0x403EA27591CBBED2]
    0x1.0e34e13a66fe6p+5, //  33.7758202135735672 [0x4040E34E13A66FE6]
    0x1.275637a9619ecp+5, //  36.9170983536640449 [0x404275637A9619EC]
};
/*
//
//  Interval centers - reduction constants x-Z[i]:
//
*/
static const double __dj1_ep_dZ_MP[] = {
    0x1.ea75575af6f09p+1,
    -0x1.6p-53, // 3.83170597020751247 + -1.52655665885959024e-16
                // [0x400EA75575AF6F09 + 0xBCA6000000000000]
    0x1.c0ff5f3b4725p+2,
    -0x1.b2p-54, // 7.01558666981561885 + -9.41087485717417849e-17
                 // [0x401C0FF5F3B47250 + 0xBC9B200000000000]
    0x1.458d0d0bdfc29p+3,
    0x1.028p-51, // 10.1734681350627216 +  4.48426018540004634e-16
                 // [0x402458D0D0BDFC29 + 0x3CC0280000000000]
    0x1.aa5baf310e5a2p+3,
    0x1.2cp-52, // 13.3236919363142228 +  2.60208521396521064e-16
                // [0x402AA5BAF310E5A2 + 0x3CB2C00000000000]
    0x1.0787b360508c5p+4,
    -0x1.d28p-50, // 16.4706300508776344 + -1.61849700308636102e-15
                  // [0x4030787B360508C5 + 0xBCDD280000000000]
    0x1.39da8e7416ca4p+4,
    -0x1.218p-50, //  19.615858510468243 + -1.00440489259057131e-15
                  //  [0x40339DA8E7416CA4 + 0xBCD2180000000000]
    0x1.6c294e3d4d8acp+4,
    -0x1.1cp-51, // 22.7600843805927724 + -4.92661467177413215e-16
                 // [0x4036C294E3D4D8AC + 0xBCC1C00000000000]
    0x1.9e7570dcea106p+4,
    0x1.1ap-51, // 25.9036720876183821 +  4.89192020225459601e-16
                // [0x4039E7570DCEA106 + 0x3CC1A00000000000]
    0x1.d0bfcf471fcccp+4,
    -0x1.42p-52, // 29.0468285349168553 + -2.79290479632265942e-16
                 // [0x403D0BFCF471FCCC + 0xBCB4200000000000]
    0x1.018476e6b2bfp+5,
    -0x1.bep-50, // 32.1896799109744052 + -1.54737334057131193e-15
                 // [0x404018476E6B2BF0 + 0xBCDBE00000000000]
    0x1.1aa890dc5e97cp+5,
    -0x1.d6p-49, // 35.3323075500838684 + -3.26128013483639734e-15
                 // [0x4041AA890DC5E97C + 0xBCED600000000000]
};
/*
//
//  Coefficients for polynomial minimax-approximation J1(x) = P1(x) on interval
(0,s[0]).
//
*/
static const double __dj1_ep_dP1[] = {
    -0x1.442f0fe360f4dp-61, // -5.49188780431403671e-19 [0xBC2442F0FE360F4D]
    -0x1.deb930b84dcap-57,  // -1.29758237482006856e-17 [0xBC6DEB930B84DCA0]
    0x1.64f9909afcfe5p-51,  //  6.19252674752346552e-16 [0x3CC64F9909AFCFE5]
    -0x1.161028cdf8a9ap-51, // -4.82362626626922211e-16 [0xBCC161028CDF8A9A]
    -0x1.4e58bf2a524f1p-43, // -1.48479747142391555e-13 [0xBD44E58BF2A524F1]
    -0x1.3fd3cb961ebc1p-48, // -4.43849575471100773e-15 [0xBCF3FD3CB961EBC1]
    0x1.27f8f0466f708p-35,  //   3.3648168062842007e-11 [0x3DC27F8F0466F708]
    -0x1.eccd22ab9bad3p-47, //  -1.3677984030887287e-14 [0xBD0ECCD22AB9BAD3]
    -0x1.845c4025d7598p-28, //  -5.6513869468182652e-09 [0xBE3845C4025D7598]
    -0x1.1395f52ff2d85p-46, // -1.52980834950567006e-14 [0xBD11395F52FF2D85]
    0x1.6c16c1cf5627bp-21,  //   6.7816841379648086e-07 [0x3EA6C16C1CF5627B]
    -0x1.b4d5998901168p-48, // -6.06229474968156533e-15 [0xBCFB4D5998901168]
    -0x1.c71c71c6c247ap-15, // -5.42534722197196502e-05 [0xBF0C71C71C6C247A]
    -0x1.b3462f0c51592p-51, // -7.55080295853641947e-16 [0xBCCB3462F0C51592]
    0x1.55555555556c7p-9,   //   0.00260416666666682698 [0x3F655555555556C7]
    -0x1.a20841fbadcfcp-56, // -2.26615740507999183e-17 [0xBC7A20841FBADCFC]
    -0x1p-4,                //                  -0.0625 [0xBFB0000000000000]
    -0x1.a612f6dd351ep-64,  // -8.93776628472555558e-20 [0xBBFA612F6DD351E0]
    0x1p-1,                 //                      0.5 [0x3FE0000000000000]
};
/*
//
//  Coefficients for polynomial minimax-approximation J1(x) = P(x-z[n-1]) on
intervals (s[n-1],s[n])
//                              for n from 1 to 11
//
*/
static const double __dj1_ep_dP[] = {
    0x1.330a7fe596675p-60,  //   1.04029542023723064e-18 [0x3C3330A7FE596675]
    0x1.1bc4221e9deb6p-56,  //   1.53829935781546268e-17 [0x3C71BC4221E9DEB6]
    -0x1.ed01fc415011ep-52, //  -4.27616063528892991e-16 [0xBCBED01FC415011E]
    -0x1.67b613000e036p-48, //  -4.99199608622678656e-15 [0xBCF67B613000E036]
    0x1.17a109bb68425p-43,  //   1.24180245974800855e-13 [0x3D417A109BB68425]
    0x1.5ec82b3941144p-40,  //   1.24622768830046073e-12 [0x3D75EC82B3941144]
    -0x1.ec62236d85a8dp-36, //  -2.79887531795363587e-11 [0xBDBEC62236D85A8D]
    -0x1.03b9e94aa17b5p-32, //  -2.36219617360068843e-10 [0xBDF03B9E94AA17B5]
    0x1.4569b21873d25p-28,  //   4.73538055334838866e-09 [0x3E34569B21873D25]
    0x1.17069233e912ap-25,  //   3.24828629821197232e-08 [0x3E617069233E912A]
    -0x1.33825cd2c3f8ep-21, //  -5.72780573500688148e-07 [0xBEA33825CD2C3F8E]
    -0x1.9799d4c9f2c34p-19, //  -3.03686338030053261e-06 [0xBEC9799D4C9F2C34]
    0x1.83a06e30c3d4p-15,   //   4.62087012974518076e-05 [0x3F083A06E30C3D40]
    0x1.6e4c2d5354236p-13,  //   0.000174664290720121039 [0x3F26E4C2D5354236]
    -0x1.24b340995906p-9,   //   -0.00223312533914747646 [0xBF624B3409959060]
    -0x1.537544c331da7p-8,  //   -0.00517971924563857041 [0xBF7537544C331DA7]
    0x1.b589d1da13905p-5,   //     0.0534104441327248117 [0x3FAB589D1DA13905]
    0x1.ae8a39f51ad04p-5,   //     0.0525561458569772377 [0x3FAAE8A39F51AD04]
    -0x1.9c6cf582cbf7fp-2,  //      -0.40275939570255298 [0xBFD9C6CF582CBF7F]
    -0x1.13375c64c8179p-66, //  -1.45698271493747372e-20 [0xBBD13375C64C8179]
    -0x1.43f6a0d2e3dd1p-60, //  -1.09763066513860518e-18 [0xBC343F6A0D2E3DD1]
    -0x1.076aa6242a7e1p-56, //  -1.42798423701269096e-17 [0xBC7076AA6242A7E1]
    0x1.eecf9138bec23p-52,  //   4.29179963839274561e-16 [0x3CBEECF9138BEC23]
    0x1.4abee40cef878p-48,  //   4.59001818879550477e-15 [0x3CF4ABEE40CEF878]
    -0x1.183cedbe9a804p-43, //  -1.24450673186277286e-13 [0xBD4183CEDBE9A804]
    -0x1.3bb626cc8c1c1p-40, //  -1.12163266950188402e-12 [0xBD73BB626CC8C1C1]
    0x1.ecae89bb3c682p-36,  //   2.80057173037127242e-11 [0x3DBECAE89BB3C682]
    0x1.c62cca0946b8bp-33,  //   2.06534858911390322e-10 [0x3DEC62CCA0946B8B]
    -0x1.44639d71c2713p-28, //  -4.72048299213172519e-09 [0xBE344639D71C2713]
    -0x1.d48dcdac07ecbp-26, //  -2.72734276691685544e-08 [0xBE5D48DCDAC07ECB]
    0x1.3026e0ce80b4cp-21,  //   5.66527001144873979e-07 [0x3EA3026E0CE80B4C]
    0x1.4255b015aac17p-19,  //   2.40158079630382121e-06 [0x3EC4255B015AAC17]
    -0x1.796a751f88d5ep-15, //  -4.49914753029255612e-05 [0xBF0796A751F88D5E]
    -0x1.07358bbdbff48p-13, //  -0.000125507909551453864 [0xBF207358BBDBFF48]
    0x1.13fbc7d698214p-9,   //    0.00210558714324827513 [0x3F613FBC7D698214]
    0x1.9a4b292e3de41p-9,   //    0.00313029172604809046 [0x3F69A4B292E3DE41]
    -0x1.80c83bdeee5bp-5,   //    -0.0469704789497414898 [0xBFA80C83BDEEE5B0]
    -0x1.5e70dc60362bfp-6,  //    -0.0213892128093415811 [0xBF95E70DC60362BF]
    0x1.33518b3874e8ap-2,   //       0.30011575252613254 [0x3FD33518B3874E8A]
    0x1.751cb99a9ad1bp-67,  //   9.87619788840512159e-21 [0x3BC751CB99A9AD1B]
    0x1.4bd139f70a8d4p-60,  //   1.12424071085357982e-18 [0x3C34BD139F70A8D4]
    0x1.d5834c9725244p-57,  //   1.27261723139551593e-17 [0x3C6D5834C9725244]
    -0x1.f015d810f4074p-52, //  -4.30285432422476243e-16 [0xBCBF015D810F4074]
    -0x1.21d70fb51a73dp-48, //  -4.02233917599131254e-15 [0xBCF21D70FB51A73D]
    0x1.1796857b2fc2cp-43,  //   1.24162002573341106e-13 [0x3D41796857B2FC2C]
    0x1.0e24444cae855p-40,  //   9.59735996162589202e-13 [0x3D70E24444CAE855]
    -0x1.e844e4e84c00bp-36, //   -2.7754885982737937e-11 [0xBDBE844E4E84C00B]
    -0x1.78a38914f17f5p-33, //  -1.71275501294268194e-10 [0xBDE78A38914F17F5]
    0x1.3e3bf23ed0443p-28,  //   4.63091659360990003e-09 [0x3E33E3BF23ED0443]
    0x1.7486f6b6c5ff9p-26,  //   2.16839370583332373e-08 [0x3E57486F6B6C5FF9]
    -0x1.25c1238b228b9p-21, //  -5.47160298751119495e-07 [0xBEA25C1238B228B9]
    -0x1.e3725daf620f1p-20, //  -1.80097945787395071e-06 [0xBEBE3725DAF620F1]
    0x1.63c5475439a95p-15,  //   4.24111628108309429e-05 [0x3F063C5475439A95]
    0x1.6b4c9ca0f765bp-14,  //   8.66172945417019289e-05 [0x3F16B4C9CA0F765B]
    -0x1.f51c2489b9e6ap-10, //    -0.0019115826893826523 [0xBF5F51C2489B9E6A]
    -0x1.f91a9ee0d2895p-10, //   -0.00192681879726078653 [0xBF5F91A9EE0D2895]
    0x1.4b0c5d5da6789p-5,   //      0.040411169390792763 [0x3FA4B0C5D5DA6789]
    0x1.9223ff2c0785bp-7,   //     0.0122723575551015231 [0x3F89223FF2C0785B]
    -0x1.ff654544ebcd1p-3,  //     -0.249704877057843194 [0xBFCFF654544EBCD1]
    -0x1.eec5379bb1eb6p-65, //  -5.23858516231554584e-20 [0xBBEEEC5379BB1EB6]
    -0x1.4db9ae73f6ea6p-60, //  -1.13070535936389358e-18 [0xBC34DB9AE73F6EA6]
    -0x1.9b4e82ee09444p-57, //  -1.11484900448323218e-17 [0xBC69B4E82EE09444]
    0x1.ebec3d360f2bbp-52,  //    4.2667502257759031e-16 [0x3CBEBEC3D360F2BB]
    0x1.f2debaab94b75p-49,  //   3.46160625068332408e-15 [0x3CEF2DEBAAB94B75]
    -0x1.1357498205c84p-43, //  -1.22275951760087615e-13 [0xBD41357498205C84]
    -0x1.c6507202cc00ap-41, //  -8.07024206872349542e-13 [0xBD6C6507202CC00A]
    0x1.dc8f5188cbf16p-36,  //   2.70892904760347563e-11 [0x3DBDC8F5188CBF16]
    0x1.33accbaac62d5p-33,  //    1.3991438332282586e-10 [0x3DE33ACCBAAC62D5]
    -0x1.32db1b441b27ap-28, //  -4.46534082288770876e-09 [0xBE332DB1B441B27A]
    -0x1.257f16f30d01ep-26, //  -1.70837414876043656e-08 [0xBE5257F16F30D01E]
    0x1.16abd781518f7p-21,  //   5.19065665263007118e-07 [0x3EA16ABD781518F7]
    0x1.6c43eedfe62e2p-20,  //   1.35699422540972255e-06 [0x3EB6C43EEDFE62E2]
    -0x1.4a6704d05ab74p-15, //   -3.9387037420754884e-05 [0xBF04A6704D05AB74]
    -0x1.0413e306dff8bp-14, //  -6.20073516142111944e-05 [0xBF10413E306DFF8B]
    0x1.c5bce33af2d73p-10,  //    0.00173087250617495465 [0x3F5C5BCE33AF2D73]
    0x1.59eb160bf72d6p-10,  //    0.00131957361281036722 [0x3F559EB160BF72D6]
    -0x1.251858011816bp-5,  //    -0.0357782095750306048 [0xBFA251858011816B]
    -0x1.0c83a2d7add33p-7,  //   -0.00819440318387751852 [0xBF80C83A2D7ADD33]
    0x1.bf3337873a7d8p-3,   //       0.21835940724787295 [0x3FCBF3337873A7D8]
    0x1.59e2e1791b42ap-65,  //   3.66221315309546935e-20 [0x3BE59E2E1791B42A]
    0x1.4b50d5f1ae24cp-60,  //   1.12254147399760359e-18 [0x3C34B50D5F1AE24C]
    0x1.65b3ee45e0e0cp-57,  //   9.69555529901552735e-18 [0x3C665B3EE45E0E0C]
    -0x1.e2fb40575bb2ap-52, //  -4.18919630338713876e-16 [0xBCBE2FB40575BB2A]
    -0x1.aac197f69a705p-49, //  -2.96121616828632583e-15 [0xBCEAAC197F69A705]
    0x1.0c57979347fa2p-43,  //   1.19167856296526901e-13 [0x3D40C57979347FA2]
    0x1.7cd6bf57a0624p-41,  //   6.76505708610721424e-13 [0x3D67CD6BF57A0624]
    -0x1.cc40cc54c83adp-36, //  -2.61623607597345273e-11 [0xBDBCC40CC54C83AD]
    -0x1.f7b8e74de9e81p-34, //  -1.14533186075343948e-10 [0xBDDF7B8E74DE9E81]
    0x1.25108c473d70bp-28,  //   4.26465180464880085e-09 [0x3E325108C473D70B]
    0x1.d3a689e16363cp-27,  //   1.36104220695644499e-08 [0x3E4D3A689E16363C]
    -0x1.06a042fbb07e6p-21, //  -4.89179086092742336e-07 [0xBEA06A042FBB07E6]
    -0x1.19d8ce8c2f4efp-20, //  -1.04996152842868856e-06 [0xBEB19D8CE8C2F4EF]
    0x1.32cb00ee8c0b2p-15,  //   3.65725735388412314e-05 [0x3F032CB00EE8C0B2]
    0x1.877991af9d07ap-15,  //    4.6667442231391459e-05 [0x3F0877991AF9D07A]
    -0x1.9f4be60758faep-10, //    -0.0015842303417565695 [0xBF59F4BE60758FAE]
    -0x1.fda0298c87687p-11, //  -0.000972033756230409533 [0xBF4FDA0298C87687]
    0x1.09463bbd0367fp-5,   //      0.032382122684890817 [0x3FA09463BBD0367F]
    0x1.86dd32e059b0ep-8,   //    0.00596411220644800337 [0x3F786DD32E059B0E]
    -0x1.925c6fca08f55p-3,  //     -0.196465371468657196 [0xBFC925C6FCA08F55]
    -0x1.e4cdf56162187p-64, //  -1.02661351510187924e-19 [0xBBFE4CDF56162187]
    -0x1.45f8a7f33bfep-60,  //  -1.10443376691962906e-18 [0xBC345F8A7F33BFE0]
    -0x1.36bbc9f175c0ep-57, //  -8.42244975365591802e-18 [0xBC636BBC9F175C0E]
    0x1.d6e1d76f23b96p-52,  //   4.08425197754165648e-16 [0x3CBD6E1D76F23B96]
    0x1.6d7f8dc8284dep-49,  //   2.53615362856265139e-15 [0x3CE6D7F8DC8284DE]
    -0x1.03cf9b3701e67p-43, //  -1.15379244887582361e-13 [0xBD403CF9B3701E67]
    -0x1.40d4a7f8863edp-41, //  -5.69909786973322553e-13 [0xBD640D4A7F8863ED]
    0x1.ba135c3f5e254p-36,  //   2.51290899959489212e-11 [0x3DBBA135C3F5E254]
    0x1.a0bc844840bc1p-34,  //   9.47548854734947956e-11 [0x3DDA0BC844840BC1]
    -0x1.16f39370e8baep-28, //  -4.05927812275911963e-09 [0xBE316F39370E8BAE]
    -0x1.7b9bb07a8bf18p-27, //  -1.10480515752344149e-08 [0xBE47B9BB07A8BF18]
    0x1.ef16159108051p-22,  //   4.61085016447222842e-07 [0x3E9EF16159108051]
    0x1.c129f077af20fp-21,  //   8.36632820764748468e-07 [0x3EAC129F077AF20F]
    -0x1.1e5d2836c8c92p-15, //  -3.41372364600851975e-05 [0xBF01E5D2836C8C92]
    -0x1.32ee4ca1fc9dap-15, //  -3.65890093830982733e-05 [0xBF032EE4CA1FC9DA]
    0x1.80503724ad307p-10,  //    0.00146603905265613329 [0x3F580503724AD307]
    0x1.8acdc5b058c0bp-11,  //    0.00075302848385339191 [0x3F48ACDC5B058C0B]
    -0x1.e7dc08e70e99ap-6,  //     -0.029776581472313525 [0xBF9E7DC08E70E99A]
    -0x1.2ccb0e97558dap-8,  //   -0.00458973985890606152 [0xBF72CCB0E97558DA]
    0x1.70c511227d5aap-3,   //      0.180063375344315546 [0x3FC70C511227D5AA]
    0x1.1526b369f38d3p-67,  //   7.33613052226569807e-21 [0x3BC1526B369F38D3]
    0x1.3ed29bf89d85dp-60,  //   1.08021329928529697e-18 [0x3C33ED29BF89D85D]
    0x1.0eb0681f63632p-57,  //    7.3370424532190249e-18 [0x3C60EB0681F63632]
    -0x1.c91e31a16a214p-52, //  -3.96486615068908852e-16 [0xBCBC91E31A16A214]
    -0x1.3ab665fe159f3p-49, //  -2.18375660458950758e-15 [0xBCE3AB665FE159F3]
    0x1.f568bdc13c545p-44,  //   1.11335195602552289e-13 [0x3D3F568BDC13C545]
    0x1.10b5a1d814e0ap-41,  //   4.84429386905743872e-13 [0x3D610B5A1D814E0A]
    -0x1.a7cbcaabf3986p-36, //   -2.4090017022587137e-11 [0xBDBA7CBCAABF3986]
    -0x1.5d856876b5fe8p-34, //  -7.94719028908240026e-11 [0xBDD5D856876B5FE8]
    0x1.09901b0683c34p-28,  //   3.86444898868810486e-09 [0x3E309901B0683C34]
    0x1.3a33cd99e7b0ep-27,  //   9.14449209740889517e-09 [0x3E43A33CD99E7B0E]
    -0x1.d407f7c23b332p-22, //  -4.35887951634808471e-07 [0xBE9D407F7C23B332]
    -0x1.6f46d51e4cbc4p-21, //  -6.84106143988810474e-07 [0xBEA6F46D51E4CBC4]
    0x1.0cf2643413fcp-15,   //   3.20609619001151029e-05 [0x3F00CF2643413FC0]
    0x1.f0de0532650d1p-16,  //   2.96155969379964666e-05 [0x3EFF0DE0532650D1]
    -0x1.66f4ec27a96e7p-10, //   -0.00136931125045108306 [0xBF566F4EC27A96E7]
    -0x1.3d369f958e567p-11, //  -0.000605036492465388441 [0xBF43D369F958E567]
    0x1.c5e1ad9fb2f4p-6,    //     0.0277027316613349672 [0x3F9C5E1AD9FB2F40]
    0x1.e16555e108dc6p-9,   //    0.00367275880172865648 [0x3F6E16555E108DC6]
    -0x1.5664e13b70622p-3,  //     -0.167184600473818057 [0xBFC5664E13B70622]
    0x1.114379074b05cp-66,  //   1.44664527038211918e-20 [0x3BD114379074B05C]
    -0x1.36b62612f3ecep-60, //  -1.05273157292053583e-18 [0xBC336B62612F3ECE]
    -0x1.da049b1422063p-58, //  -6.42414169972539647e-18 [0xBC5DA049B1422063]
    0x1.bac540f48cd1dp-52,  //    3.8404220982920064e-16 [0x3CBBAC540F48CD1D]
    0x1.10fff88269c81p-49,  //   1.89431724267136513e-15 [0x3CE10FFF88269C81]
    -0x1.e3405876d84cdp-44, //   -1.0730335505851826e-13 [0xBD3E3405876D84CD]
    -0x1.d474119513806p-42, //  -4.16070194551074011e-13 [0xBD5D474119513806]
    0x1.96544a2ad129dp-36,  //   2.30971441341401566e-11 [0x3DB96544A2AD129D]
    0x1.293fdf9ecd4f9p-34,  //   6.75867126859196686e-11 [0x3DD293FDF9ECD4F9]
    -0x1.fa8f9d86ad3f4p-29, //  -3.68571634613357629e-09 [0xBE2FA8F9D86AD3F4]
    -0x1.08b946d2afee8p-27, //  -7.70447475728497535e-09 [0xBE408B946D2AFEE8]
    0x1.bc212085d0e6bp-22,  //   4.13627738605538698e-07 [0x3E9BC212085D0E6B]
    0x1.32dfea250f4e4p-21,  //   5.71598609007105435e-07 [0x3EA32DFEA250F4E4]
    -0x1.fc1bbf57e3963p-16, //  -3.02856199990096202e-05 [0xBEFFC1BBF57E3963]
    -0x1.9c5807675c42ap-16, //  -2.45776094777752676e-05 [0xBEF9C5807675C42A]
    0x1.51d30d78ab525p-10,  //    0.00128869790766412387 [0x3F551D30D78AB525]
    0x1.05fa598ef5d1ap-11,  //   0.000499683244806900561 [0x3F405FA598EF5D1A]
    -0x1.aa0ce0421d1a8p-6,  //    -0.0260040464422261197 [0xBF9AA0CE0421D1A8]
    -0x1.8c833077fbeaep-9,  //   -0.00302514998110566587 [0xBF68C833077FBEAE]
    0x1.40f90793605bbp-3,   //      0.156724986252852222 [0x3FC40F90793605BB]
    -0x1.826a9e86c72f5p-65, //   -4.0913436390821632e-20 [0xBBE826A9E86C72F5]
    0x1.2e36c197947e1p-60,  //   1.02394049280992657e-18 [0x3C32E36C197947E1]
    0x1.a1a0fd1b8bb4fp-58,  //   5.65992649497824204e-18 [0x3C5A1A0FD1B8BB4F]
    -0x1.ac863cc598623p-52, //  -3.71685637827587978e-16 [0xBCBAC863CC598623]
    -0x1.dd812c0626084p-50, //   -1.6566768026971049e-15 [0xBCDDD812C0626084]
    0x1.d1cd6c1a15148p-44,  //   1.03428916709857344e-13 [0x3D3D1CD6C1A15148]
    0x1.96910e3d7d44p-42,   //   3.61103701196881739e-13 [0x3D596910E3D7D440]
    -0x1.860e9363c7dbep-36, //   -2.2172169820429718e-11 [0xBDB860E9363C7DBE]
    -0x1.0015aee522d86p-34, //  -5.82269194494241588e-11 [0xBDD0015AEE522D86]
    0x1.e454feda39c6bp-29,  //   3.52397920316206355e-09 [0x3E2E454FEDA39C6B]
    0x1.c509252772667p-28,  //   6.59253743908502392e-09 [0x3E3C509252772667]
    -0x1.a70f232d928b9p-22, //  -3.94004518654147543e-07 [0xBE9A70F232D928B9]
    -0x1.0509768aae72bp-21, //  -4.86219236726252723e-07 [0xBEA0509768AAE72B]
    0x1.e26d3747fe6d7p-16,  //   2.87548675998787125e-05 [0x3EFE26D3747FE6D7]
    0x1.5d17602b01b11p-16,  //   2.08074635956969019e-05 [0x3EF5D17602B01B11]
    -0x1.3fe9d5baa4a3cp-10, //   -0.00122037283896204909 [0xBF53FE9D5BAA4A3C]
    -0x1.ba181c06897c8p-12, //  -0.000421613862643940591 [0xBF3BA181C06897C8]
    0x1.92bb5e1e159fcp-6,   //     0.0245808047405606661 [0x3F992BB5E1E159FC]
    0x1.4df208bbd44f2p-9,   //    0.00254780155766153819 [0x3F64DF208BBD44F2]
    -0x1.2f2072e638cf4p-3,  //     -0.148011109972777555 [0xBFC2F2072E638CF4]
    -0x1.e86165a822864p-64, //   -1.0341858455520363e-19 [0xBBFE86165A822864]
    -0x1.25b29b3e823f8p-60, //  -9.95086450502323007e-19 [0xBC325B29B3E823F8]
    -0x1.7262bcbdd103fp-58, //  -5.01966215536870099e-18 [0xBC57262BCBDD103F]
    0x1.9ec4dbdb090cfp-52,  //   3.59754743122575202e-16 [0x3CB9EC4DBDB090CF]
    0x1.a50207c520cc8p-50,  //   1.46066468316883799e-15 [0x3CDA50207C520CC8]
    -0x1.c15d9ea83dcdbp-44, //  -9.97792298044512945e-14 [0xBD3C15D9EA83DCDB]
    -0x1.645783b5ad729p-42, //  -3.16495144297050312e-13 [0xBD5645783B5AD729]
    0x1.77142bf7e9b46p-36,  //   2.13207611014178461e-11 [0x3DB77142BF7E9B46]
    0x1.be6435c2540e4p-35,  //   5.07488318019900513e-11 [0x3DCBE6435C2540E4]
    -0x1.d04d33b8b7eap-29,  //  -3.37823854685351875e-09 [0xBE2D04D33B8B7EA0]
    -0x1.88db618ea8101p-28, //  -5.71682114031178611e-09 [0xBE388DB618EA8101]
    0x1.946d1dab7260ep-22,  //   3.76651281466621784e-07 [0x3E9946D1DAB7260E]
    0x1.c2c3a1b7f21c9p-22,  //   4.19806862602997617e-07 [0x3E9C2C3A1B7F21C9]
    -0x1.cc11a59e1360bp-16, //  -2.74222453458452765e-05 [0xBEFCC11A59E1360B]
    -0x1.2c5f5edafc37ap-16, //  -1.79035986142580717e-05 [0xBEF2C5F5EDAFC37A]
    0x1.3081def9612c4p-10,  //    0.00116160319734708115 [0x3F53081DEF9612C4]
    0x1.7b7997babd9c5p-12,  //   0.000361895533998260043 [0x3F37B7997BABD9C5]
    -0x1.7ed5fffc1c774p-6,  //    -0.0233664512492803428 [0xBF97ED5FFFC1C774]
    -0x1.1e438b722c3b6p-9,  //   -0.00218401982518697923 [0xBF61E438B722C3B6]
    0x1.1ff5eec6a01cdp-3,   //       0.14060579818398225 [0x3FC1FF5EEC6A01CD]
    0x1.057885a9e498ap-63,  //   1.10737186744755252e-19 [0x3C0057885A9E498A]
    0x1.1d621fa2c7c85p-60,  //   9.66916214606062397e-19 [0x3C31D621FA2C7C85]
    0x1.4aa56422bef54p-58,  //   4.48108969635411809e-18 [0x3C54AA56422BEF54]
    -0x1.91b37e6b9d09dp-52, //  -3.48420205683182793e-16 [0xBCB91B37E6B9D09D]
    -0x1.76135d2f416b1p-50, //  -1.29783559119783954e-15 [0xBCD76135D2F416B1]
    0x1.b20b5c32a5555p-44,  //   9.63772118949980686e-14 [0x3D3B20B5C32A5555]
    0x1.3b25238f33bcfp-42,  //   2.79905053662268336e-13 [0x3D53B25238F33BCF]
    -0x1.695c36797bffdp-36, //  -2.05409495615437107e-11 [0xBDB695C36797BFFD]
    -0x1.8913ef6b419bcp-35, //   -4.4687780245289852e-11 [0xBDC8913EF6B419BC]
    0x1.be3ee32463be6p-29,  //    3.2468644597546356e-09 [0x3E2BE3EE32463BE6]
    0x1.589a7ca0cf0c1p-28,  //   5.01464039807315316e-09 [0x3E3589A7CA0CF0C1]
    -0x1.83dcaf3f87316p-22, //  -3.61224682139843331e-07 [0xBE983DCAF3F87316]
    -0x1.8a1b3a9e84cfp-22,  //  -3.67040152855423661e-07 [0xBE98A1B3A9E84CF0]
    0x1.b86bad42fc10dp-16,  //   2.62511141606034625e-05 [0x3EFB86BAD42FC10D]
    0x1.05f11577b44dcp-16,  //   1.56129439961614174e-05 [0x3EF05F11577B44DC]
    -0x1.2316250b4ae36p-10, //   -0.00111040688609421795 [0xBF52316250B4AE36]
    -0x1.4a538a4829797p-12, //  -0.000315023735775071671 [0xBF34A538A4829797]
    0x1.6d9afe88301fap-6,   //     0.0223147855438145873 [0x3F96D9AFE88301FA]
    0x1.f1e1e7f393e83p-10,  //    0.00189927080363708266 [0x3F5F1E1E7F393E83]
    -0x1.12dd57bf18adap-3,  //     -0.134211240310000701 [0xBFC12DD57BF18ADA]
    0x1.240f66294083p-66,   //   1.54615357398002403e-20 [0x3BD240F662940830]
};
/*
//
//  Coefficients for polynomial pade-approximation P1(x) = PP(1296/x^2) in point
1296/x^2 = 0.5
//
*/
static const double __dj1_ep_dPP[] = {
    0x1.2e041332b59b9p-65,  //  3.19771791362518245e-20 [0x3BE2E041332B59B9]
    -0x1.df44c525bf7dep-61, // -8.11912645865070006e-19 [0xBC2DF44C525BF7DE]
    0x1.7ed733e2b4011p-56,  //  2.07538324341166498e-17 [0x3C77ED733E2B4011]
    -0x1.91bb3fce3335bp-51, // -6.96892964072491198e-16 [0xBCC91BB3FCE3335B]
    0x1.2b908e904c525p-45,  //  3.32583599936692969e-14 [0x3D22B908E904C525]
    -0x1.576b7365d6b96p-39, // -2.44014394170339461e-12 [0xBD8576B7365D6B96]
    0x1.55c0b64b456cdp-32,  //   3.1082234416873872e-10 [0x3DF55C0B64B456CD]
    -0x1.70b96a673e266p-24, // -8.58503114048832652e-08 [0xBE770B96A673E266]
    0x1.7b425ed097b42p-14,  //  9.04224537037036987e-05 [0x3F17B425ED097B42]
    0x1p+0,                 //                        1 [0x3FF0000000000000]
};
/*
//
//  Coefficients for polynomial pade-approximation Q1(x) = QP(1296/x^2)*(36/x))
in point 1296/x^2 = 0.5
//
*/
static const double __dj1_ep_dQP[] = {
    -0x1.23696090354ep-67,  // -7.71360161124522182e-21 [0xBBC23696090354E0]
    0x1.a60b89719da94p-63,  //  1.78743038053950533e-19 [0x3C0A60B89719DA94]
    -0x1.2886d1ecf082ap-58, // -4.01868535071482541e-18 [0xBC52886D1ECF082A]
    0x1.0a86e8652da7bp-53,  //  1.15587653844937511e-16 [0x3CA0A86E8652DA7B]
    -0x1.4a947ed633352p-48, // -4.58771993137511348e-15 [0xBCF4A947ED633352]
    0x1.2e1508fc7bc09p-42,  //  2.68302862922006368e-13 [0x3D52E1508FC7BC09]
    -0x1.bf888d31b489fp-36, // -2.54393287634639123e-11 [0xBDBBF888D31B489F]
    0x1.3b76cfa7f96aep-28,  //  4.59060692928882268e-09 [0x3E33B76CFA7F96AE]
    -0x1.26fabb85cb534p-19, // -2.19776797196502074e-06 [0xBEC26FABB85CB534]
    0x1.5555555555555p-7,   //    0.0104166666666666661 [0x3F85555555555555]
};
inline int __devicelib_imf_internal_dj1(const double *a, double *r) {
  int nRet = 0;
  int i = 0, j = 0;
  uint32_t iaxhi = 0, isxhi = 0, sign = 0;
  uint64_t lsx = 0, lax = 0;
  double sx = *a;
  double ax = __fabs(*a);
  double result = 0;
  double xi = 0, y = 0, z = 0, p = 0, q = 0, rr = 0, r1 = 0;
  double dy = 0, dz = 0;
  const double dtonpi = 0x1.45f306dc9c883p-1; // 6.366197723675813430755e-01
  const double zeros[] = {0x0p+0, -0x0p+0};   // +0, -0
  iaxhi = ((uint32_t *)&ax)[1];
  isxhi = ((uint32_t *)&sx)[1];
  lsx = *(uint64_t *)&sx;
  lax = *(uint64_t *)&ax;
  sign = isxhi >> 31;
  if (iaxhi < 0x7FF00000) /* x is not INF or NaN */
  {
    if (iaxhi < 0x3C600000) /* small input |x| < 2^(-57) */
    {
      result = sx * 0.5; /* return x/2 */
    } else if (ax < __dj1_ep_dS[11]) {
      /* Rational or polynomial approximation of j1(ax) */
      if (ax < __dj1_ep_dS[0]) {
        y = ax * ax;
        p = (((((((((__dj1_ep_dP1[0] * y + __dj1_ep_dP1[2]) * y +
                    __dj1_ep_dP1[4]) *
                       y +
                   __dj1_ep_dP1[6]) *
                      y +
                  __dj1_ep_dP1[8]) *
                     y +
                 __dj1_ep_dP1[10]) *
                    y +
                __dj1_ep_dP1[12]) *
                   y +
               __dj1_ep_dP1[14]) *
                  y +
              __dj1_ep_dP1[16]) *
                 y +
             __dj1_ep_dP1[18]) *
            ax;
        q = ((((((((__dj1_ep_dP1[1] * y + __dj1_ep_dP1[3]) * y +
                   __dj1_ep_dP1[5]) *
                      y +
                  __dj1_ep_dP1[7]) *
                     y +
                 __dj1_ep_dP1[9]) *
                    y +
                __dj1_ep_dP1[11]) *
                   y +
               __dj1_ep_dP1[13]) *
                  y +
              __dj1_ep_dP1[15]) *
                 y +
             __dj1_ep_dP1[17]) *
            y;
      } else {
        // Find interval
        for (i = 1; (i < 11) && (ax >= __dj1_ep_dS[i]); i++)
          ;
        i = i - 1;
        j = i * 20;
        // Reduced argument
        ax = ax - __dj1_ep_dZ_MP[i * 2 + 0];
        ax = ax - __dj1_ep_dZ_MP[i * 2 + 1];
        y = ax * ax;
        p = (((((((((__dj1_ep_dP[j + 0] * y + __dj1_ep_dP[j + 2]) * y +
                    __dj1_ep_dP[j + 4]) *
                       y +
                   __dj1_ep_dP[j + 6]) *
                      y +
                  __dj1_ep_dP[j + 8]) *
                     y +
                 __dj1_ep_dP[j + 10]) *
                    y +
                __dj1_ep_dP[j + 12]) *
                   y +
               __dj1_ep_dP[j + 14]) *
                  y +
              __dj1_ep_dP[j + 16]) *
                 y +
             __dj1_ep_dP[j + 18]) *
            ax;
        q = ((((((((__dj1_ep_dP[j + 1] * y + __dj1_ep_dP[j + 3]) * y +
                   __dj1_ep_dP[j + 5]) *
                      y +
                  __dj1_ep_dP[j + 7]) *
                     y +
                 __dj1_ep_dP[j + 9]) *
                    y +
                __dj1_ep_dP[j + 11]) *
                   y +
               __dj1_ep_dP[j + 13]) *
                  y +
              __dj1_ep_dP[j + 15]) *
                 y +
             __dj1_ep_dP[j + 17]) *
                y +
            __dj1_ep_dP[j + 19];
      }
      result = p + q;
      result = (sign ? -result : result);
    } else /* Hancels asymptotic forms */
    {
      xi = 1.0 / ax;
      y = 36.0 * xi;
      z = y * y;
      p = ((((((((__dj1_ep_dPP[0] * z + __dj1_ep_dPP[1]) * z +
                 __dj1_ep_dPP[2]) *
                    z +
                __dj1_ep_dPP[3]) *
                   z +
               __dj1_ep_dPP[4]) *
                  z +
              __dj1_ep_dPP[5]) *
                 z +
             __dj1_ep_dPP[6]) *
                z +
            __dj1_ep_dPP[7]) *
               z +
           __dj1_ep_dPP[8]) *
              z +
          __dj1_ep_dPP[9];
      q = ((((((((__dj1_ep_dQP[0] * z + __dj1_ep_dQP[1]) * z +
                 __dj1_ep_dQP[2]) *
                    z +
                __dj1_ep_dQP[3]) *
                   z +
               __dj1_ep_dQP[4]) *
                  z +
              __dj1_ep_dQP[5]) *
                 z +
             __dj1_ep_dQP[6]) *
                z +
            __dj1_ep_dQP[7]) *
               z +
           __dj1_ep_dQP[8]) *
              z +
          __dj1_ep_dQP[9];
      q = y * q;
      __dj1_ep_sincos_kernel_fp64(ax, -3, &dy, &dz);
      r1 = p * dz;
      rr = r1 - q * dy;
      result = __sqrt(dtonpi * xi) * rr;
      result = (sign ? -result : result);
    }
  } else /* x is INF or NaN */
  {
    if (lax > 0x7FF0000000000000) /* j1(NaN) = QNaN */
    {
      result = 1.0 * sx;
    } else /* j1(INF) = 0 */
    {
      result = zeros[sign];
    }
  }
  *r = result;
  return nRet;
}
} /* namespace */
} /* namespace __imf_impl_j1_d_ep */
DEVICE_EXTERN_C_INLINE double __devicelib_imf_j1(double x) {
  using namespace __imf_impl_j1_d_ep;
  double r;
  __devicelib_imf_internal_dj1(&x, &r);
  return r;
}
#endif /*__LIBDEVICE_IMF_ENABLED__*/
