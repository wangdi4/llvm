/*******************************************************************************
* INTEL CONFIDENTIAL
* Copyright 1996-2022 Intel Corporation.
*
* This software and the related documents are Intel copyrighted  materials,  and
* your use of  them is  governed by the  express license  under which  they were
* provided to you (License).  Unless the License provides otherwise, you may not
* use, modify, copy, publish, distribute,  disclose or transmit this software or
* the related documents without Intel's prior written permission.
*
* This software and the related documents  are provided as  is,  with no express
* or implied  warranties,  other  than those  that are  expressly stated  in the
* License.
*******************************************************************************/
#include "_imf_include_fp64.hpp"
#ifdef __LIBDEVICE_IMF_ENABLED__
namespace __imf_impl_invcbrt_d_ha {
namespace {
typedef struct {
  VUINT64 _dRcp[32];
  VUINT64 _dCbrtHiLo[96][2];
  VUINT64 _dA8;
  VUINT64 _dA7;
  VUINT64 _dA6;
  VUINT64 _dA5;
  VUINT64 _dA4;
  VUINT64 _dA3;
  VUINT64 _dA2;
  VUINT64 _dA1;
  VUINT64 _dNeg65Div64;
  VUINT64 _dSgnf6Mask;
  VUINT64 _dNegOne;
  VUINT64 _dMantissaMask;
  VUINT64 _lExpHiMask;
  VUINT64 _lExpLoMask;
  VUINT64 _l1556;
  VUINT32 _iRcpIndexMask;
  VUINT32 _iAbsMask;
  VUINT32 _iSignMask;
  VUINT32 _iBias;
  VUINT32 _iSub;
  VUINT32 _iCmp;
  /** UISA specific **/
  VUINT64 etbl_H[8];
  VUINT64 etbl_L[8];
  VUINT64 cbrt_tbl_H[16];
  VUINT64 cbrt_tbl_L[16];
  VUINT64 BiasL;
  VUINT64 SZero;
  VUINT64 OneThird;
  VUINT64 Bias3;
  VUINT64 Three;
  VUINT64 One;
  VUINT64 poly_coeff10;
  VUINT64 poly_coeff9;
  VUINT64 poly_coeff8;
  VUINT64 poly_coeff7;
  VUINT64 poly_coeff6;
  VUINT64 poly_coeff5;
  VUINT64 poly_coeff4;
  VUINT64 poly_coeff3;
  VUINT64 poly_coeff2;
  VUINT64 poly_coeff1;
} __devicelib_imf_internal_dinvcbrt_data_t;
static const __devicelib_imf_internal_dinvcbrt_data_t
    __devicelib_imf_internal_dinvcbrt_data =
        {{
             0xBFEF81F81F81F820uL, /* (1/(1+0/32+1/64)) = -.984615 */
             0xBFEE9131ABF0B767uL, /* (1/(1+1/32+1/64)) = -.955224 */
             0xBFEDAE6076B981DBuL, /* (1/(1+2/32+1/64)) = -.927536 */
             0xBFECD85689039B0BuL, /* (1/(1+3/32+1/64)) = -.901408 */
             0xBFEC0E070381C0E0uL, /* (1/(1+4/32+1/64)) = -.876712 */
             0xBFEB4E81B4E81B4FuL, /* (1/(1+5/32+1/64)) = -.853333 */
             0xBFEA98EF606A63BEuL, /* (1/(1+6/32+1/64)) = -.831169 */
             0xBFE9EC8E951033D9uL, /* (1/(1+7/32+1/64)) = -.810127 */
             0xBFE948B0FCD6E9E0uL, /* (1/(1+8/32+1/64)) = -.790123 */
             0xBFE8ACB90F6BF3AAuL, /* (1/(1+9/32+1/64)) = -.771084 */
             0xBFE8181818181818uL, /* (1/(1+10/32+1/64)) = -.752941 */
             0xBFE78A4C8178A4C8uL, /* (1/(1+11/32+1/64)) = -.735632 */
             0xBFE702E05C0B8170uL, /* (1/(1+12/32+1/64)) = -.719101 */
             0xBFE6816816816817uL, /* (1/(1+13/32+1/64)) = -.703297 */
             0xBFE6058160581606uL, /* (1/(1+14/32+1/64)) = -.688172 */
             0xBFE58ED2308158EDuL, /* (1/(1+15/32+1/64)) = -.673684 */
             0xBFE51D07EAE2F815uL, /* (1/(1+16/32+1/64)) = -.659794 */
             0xBFE4AFD6A052BF5BuL, /* (1/(1+17/32+1/64)) = -.646465 */
             0xBFE446F86562D9FBuL, /* (1/(1+18/32+1/64)) = -.633663 */
             0xBFE3E22CBCE4A902uL, /* (1/(1+19/32+1/64)) = -.621359 */
             0xBFE3813813813814uL, /* (1/(1+20/32+1/64)) = -.609524 */
             0xBFE323E34A2B10BFuL, /* (1/(1+21/32+1/64)) = -.598131 */
             0xBFE2C9FB4D812CA0uL, /* (1/(1+22/32+1/64)) = -.587156 */
             0xBFE27350B8812735uL, /* (1/(1+23/32+1/64)) = -.576577 */
             0xBFE21FB78121FB78uL, /* (1/(1+24/32+1/64)) = -.566372 */
             0xBFE1CF06ADA2811DuL, /* (1/(1+25/32+1/64)) = -.556522 */
             0xBFE1811811811812uL, /* (1/(1+26/32+1/64)) = -.547009 */
             0xBFE135C81135C811uL, /* (1/(1+27/32+1/64)) = -.537815 */
             0xBFE0ECF56BE69C90uL, /* (1/(1+28/32+1/64)) = -.528926 */
             0xBFE0A6810A6810A7uL, /* (1/(1+29/32+1/64)) = -.520325 */
             0xBFE0624DD2F1A9FCuL, /* (1/(1+30/32+1/64)) = -.512    */
             0xBFE0204081020408uL, /* (1/(1+31/32+1/64)) = -.503937 */
         },
         {
             {0x3FEFD5C5BF0441DAuL,  /* HI((2^0*(1+0/32+1/64))^(-1/3)) = .994845
                                      */
              0x3C5333601309B626uL}, /* LO((2^0*(1+0/32+1/64))^(-1/3))
                                        = 4.163485e-18 */
             {0x3FEF83DC11708855uL,  /* HI((2^0*(1+1/32+1/64))^(-1/3)) = .984846
                                      */
              0x3C8CC45FB2E8CF88uL}, /* LO((2^0*(1+1/32+1/64))^(-1/3))
                                        = 4.990294e-17 */
             {0x3FEF3524CFCBC7CFuL,  /* HI((2^0*(1+2/32+1/64))^(-1/3)) = .975237
                                      */
              0x3C9074D462BF441AuL}, /* LO((2^0*(1+2/32+1/64))^(-1/3))
                                        = 5.709449e-17 */
             {0x3FEEE969AA666D09uL,  /* HI((2^0*(1+3/32+1/64))^(-1/3)) = .965993
                                      */
              0x3C9BC2E63A870437uL}, /* LO((2^0*(1+3/32+1/64))^(-1/3))
                                        = 9.631645e-17 */
             {0x3FEEA07953425D18uL,  /* HI((2^0*(1+4/32+1/64))^(-1/3)) = .957089
                                      */
              0x3C9033AF1159B7A4uL}, /* LO((2^0*(1+4/32+1/64))^(-1/3))
                                        = 5.621160e-17 */
             {0x3FEE5A26E89AD8F4uL,  /* HI((2^0*(1+5/32+1/64))^(-1/3)) = .948505
                                      */
              0x3C99F1507F0392C8uL}, /* LO((2^0*(1+5/32+1/64))^(-1/3))
                                        = 9.000659e-17 */
             {0x3FEE16497450B892uL,  /* HI((2^0*(1+6/32+1/64))^(-1/3)) = .940221
                                      */
              0x3C972BDECB10C72EuL}, /* LO((2^0*(1+6/32+1/64))^(-1/3))
                                        = 8.039183e-17 */
             {0x3FEDD4BB7CD9E6B5uL,  /* HI((2^0*(1+7/32+1/64))^(-1/3)) = .932218
                                      */
              0x3C94760DB894AC2BuL}, /* LO((2^0*(1+7/32+1/64))^(-1/3))
                                        = 7.098886e-17 */
             {0x3FED955AA4F1049CuL,  /* HI((2^0*(1+8/32+1/64))^(-1/3)) = .924482
                                      */
              0x3C914AE77557C72FuL}, /* LO((2^0*(1+8/32+1/64))^(-1/3))
                                        = 5.999574e-17 */
             {0x3FED580757C01C3EuL,  /* HI((2^0*(1+9/32+1/64))^(-1/3)) = .916996
                                      */
              0x3C992BA8D8364EB0uL}, /* LO((2^0*(1+9/32+1/64))^(-1/3))
                                        = 8.732787e-17 */
             {0x3FED1CA47FA65EC0uL, /* HI((2^0*(1+10/32+1/64))^(-1/3)) = .909746
                                     */
              0x3C9BDA62A40ED6D1uL}, /* LO((2^0*(1+10/32+1/64))^(-1/3))
                                        = 9.663474e-17 */
             {0x3FECE317460A7E3CuL, /* HI((2^0*(1+11/32+1/64))^(-1/3)) = .902721
                                     */
              0x3C77A96325139D68uL}, /* LO((2^0*(1+11/32+1/64))^(-1/3))
                                        = 2.052323e-17 */
             {0x3FECAB46DAED5E59uL, /* HI((2^0*(1+12/32+1/64))^(-1/3)) = .895908
                                     */
              0x3C9A4E2ED7EB4752uL}, /* LO((2^0*(1+12/32+1/64))^(-1/3))
                                        = 9.126520e-17 */
             {0x3FEC751C4326CD3BuL, /* HI((2^0*(1+13/32+1/64))^(-1/3)) = .889296
                                     */
              0x3C99F6412E7C5E94uL}, /* LO((2^0*(1+13/32+1/64))^(-1/3))
                                        = 9.007355e-17 */
             {0x3FEC40822C622E00uL, /* HI((2^0*(1+14/32+1/64))^(-1/3)) = .882875
                                     */
              0x3C94DE8ECA70F3D8uL}, /* LO((2^0*(1+14/32+1/64))^(-1/3))
                                        = 7.240516e-17 */
             {0x3FEC0D64C6156582uL, /* HI((2^0*(1+15/32+1/64))^(-1/3)) = .876635
                                     */
              0x3C90227ACCE1F9D7uL}, /* LO((2^0*(1+15/32+1/64))^(-1/3))
                                        = 5.597844e-17 */
             {0x3FEBDBB19ECA748CuL, /* HI((2^0*(1+16/32+1/64))^(-1/3)) = .870568
                                     */
              0x3C7421569D22157CuL}, /* LO((2^0*(1+16/32+1/64))^(-1/3))
                                        = 1.746019e-17 */
             {0x3FEBAB57852D2AD4uL, /* HI((2^0*(1+17/32+1/64))^(-1/3)) = .864666
                                     */
              0x3C709E8071E90B8FuL}, /* LO((2^0*(1+17/32+1/64))^(-1/3))
                                        = 1.441481e-17 */
             {0x3FEB7C466C6336C3uL,  /* HI((2^0*(1+18/32+1/64))^(-1/3)) = .85892
                                      */
              0x3C9F1F4514B300AAuL}, /* LO((2^0*(1+18/32+1/64))^(-1/3))
                                        = 1.079766e-16 */
             {0x3FEB4E6F5346496BuL, /* HI((2^0*(1+19/32+1/64))^(-1/3)) = .853325
                                     */
              0x3C96458C8B99542CuL}, /* LO((2^0*(1+19/32+1/64))^(-1/3))
                                        = 7.727040e-17 */
             {0x3FEB21C42E26AF92uL, /* HI((2^0*(1+20/32+1/64))^(-1/3)) = .847872
                                     */
              0x3C984DA73867BA25uL}, /* LO((2^0*(1+20/32+1/64))^(-1/3))
                                        = 8.431912e-17 */
             {0x3FEAF637D2C91DF6uL, /* HI((2^0*(1+21/32+1/64))^(-1/3)) = .842556
                                     */
              0x3C6DBF27C0C23183uL}, /* LO((2^0*(1+21/32+1/64))^(-1/3))
                                        = 1.290057e-17 */
             {0x3FEACBBDE65CE4D8uL, /* HI((2^0*(1+22/32+1/64))^(-1/3)) = .837371
                                     */
              0x3C3152619AAA7F91uL}, /* LO((2^0*(1+22/32+1/64))^(-1/3))
                                        = 9.390168e-19 */
             {0x3FEAA24ACD30A07CuL, /* HI((2^0*(1+23/32+1/64))^(-1/3)) = .832311
                                     */
              0x3C9E7483841B623CuL}, /* LO((2^0*(1+23/32+1/64))^(-1/3))
                                        = 1.056625e-16 */
             {0x3FEA79D39BF30C49uL, /* HI((2^0*(1+24/32+1/64))^(-1/3)) = .827371
                                     */
              0x3C9260F8BAF307AEuL}, /* LO((2^0*(1+24/32+1/64))^(-1/3))
                                        = 6.376426e-17 */
             {0x3FEA524E0A541406uL, /* HI((2^0*(1+25/32+1/64))^(-1/3)) = .822547
                                     */
              0x3C5BB2E22A8C12DBuL}, /* LO((2^0*(1+25/32+1/64))^(-1/3))
                                        = 6.006212e-18 */
             {0x3FEA2BB066DFC7A3uL, /* HI((2^0*(1+26/32+1/64))^(-1/3)) = .817833
                                     */
              0x3C786D5DDE313E02uL}, /* LO((2^0*(1+26/32+1/64))^(-1/3))
                                        = 2.118723e-17 */
             {0x3FEA05F18BF1971EuL, /* HI((2^0*(1+27/32+1/64))^(-1/3)) = .813226
                                     */
              0x3C7932CD25DA69D7uL}, /* LO((2^0*(1+27/32+1/64))^(-1/3))
                                        = 2.185617e-17 */
             {0x3FE9E108D5A254C2uL,  /* HI((2^0*(1+28/32+1/64))^(-1/3)) = .80872
                                      */
              0x3C8AD42FEDB1DF92uL}, /* LO((2^0*(1+28/32+1/64))^(-1/3))
                                        = 4.654065e-17 */
             {0x3FE9BCEE189705C7uL, /* HI((2^0*(1+29/32+1/64))^(-1/3)) = .804313
                                     */
              0x3C83584CEB752EAEuL}, /* LO((2^0*(1+29/32+1/64))^(-1/3))
                                        = 3.355809e-17 */
             {0x3FE9999999999999uL,  /* HI((2^0*(1+30/32+1/64))^(-1/3)) = .8  */
              0x3C93333333333333uL}, /* LO((2^0*(1+30/32+1/64))^(-1/3))
                                        = 6.661338e-17 */
             {0x3FE9770405E748F3uL, /* HI((2^0*(1+31/32+1/64))^(-1/3)) = .795778
                                     */
              0x3C6BACF90855F409uL}, /* LO((2^0*(1+31/32+1/64))^(-1/3))
                                        = 1.200241e-17 */
             {0x3FE9447A8A9335E0uL,  /* HI((2^1*(1+0/32+1/64))^(-1/3)) = .789609
                                      */
              0x3C9CE17FB3AF26C2uL}, /* LO((2^1*(1+0/32+1/64))^(-1/3))
                                        = 1.002006e-16 */
             {0x3FE90376E59626C4uL,  /* HI((2^1*(1+1/32+1/64))^(-1/3)) = .781673
                                      */
              0x3C927550E4A9FC80uL}, /* LO((2^1*(1+1/32+1/64))^(-1/3))
                                        = 6.403997e-17 */
             {0x3FE8C4FCD5812F49uL,  /* HI((2^1*(1+2/32+1/64))^(-1/3)) = .774046
                                      */
              0x3C9309D911C7754CuL}, /* LO((2^1*(1+2/32+1/64))^(-1/3))
                                        = 6.605296e-17 */
             {0x3FE888E13EF77149uL,  /* HI((2^1*(1+3/32+1/64))^(-1/3)) = .766709
                                      */
              0x3C97472B9CA164ADuL}, /* LO((2^1*(1+3/32+1/64))^(-1/3))
                                        = 8.076182e-17 */
             {0x3FE84EFCFFE3E40DuL,  /* HI((2^1*(1+4/32+1/64))^(-1/3)) = .759642
                                      */
              0x3C9BAF722A27B3ADuL}, /* LO((2^1*(1+4/32+1/64))^(-1/3))
                                        = 9.605280e-17 */
             {0x3FE8172C78D71591uL,  /* HI((2^1*(1+5/32+1/64))^(-1/3)) = .752829
                                      */
              0x3C9EAFCB5AC6A6C3uL}, /* LO((2^1*(1+5/32+1/64))^(-1/3))
                                        = 1.064659e-16 */
             {0x3FE7E14F26F9E71BuL,  /* HI((2^1*(1+6/32+1/64))^(-1/3)) = .746254
                                      */
              0x3C7809B060645113uL}, /* LO((2^1*(1+6/32+1/64))^(-1/3))
                                        = 2.084951e-17 */
             {0x3FE7AD474BE6A604uL,  /* HI((2^1*(1+7/32+1/64))^(-1/3)) = .739902
                                      */
              0x3C9065D193B63FFDuL}, /* LO((2^1*(1+7/32+1/64))^(-1/3))
                                        = 5.689105e-17 */
             {0x3FE77AF9A137478AuL,  /* HI((2^1*(1+8/32+1/64))^(-1/3)) = .733762
                                      */
              0x3C918C28C876079CuL}, /* LO((2^1*(1+8/32+1/64))^(-1/3))
                                        = 6.088011e-17 */
             {0x3FE74A4D15FB8FAFuL,  /* HI((2^1*(1+9/32+1/64))^(-1/3)) = .72782
                                      */
              0x3C93F52C551D6E08uL}, /* LO((2^1*(1+9/32+1/64))^(-1/3))
                                        = 6.924221e-17 */
             {0x3FE71B2A949A276FuL, /* HI((2^1*(1+10/32+1/64))^(-1/3)) = .722066
                                     */
              0x3C92C59B22919DC6uL}, /* LO((2^1*(1+10/32+1/64))^(-1/3))
                                        = 6.512811e-17 */
             {0x3FE6ED7CCFE06419uL,  /* HI((2^1*(1+11/32+1/64))^(-1/3)) = .71649
                                      */
              0x3C900A19D30085B0uL}, /* LO((2^1*(1+11/32+1/64))^(-1/3))
                                        = 5.564804e-17 */
             {0x3FE6C1301639073EuL, /* HI((2^1*(1+12/32+1/64))^(-1/3)) = .711082
                                     */
              0x3C9EFC009BF856CBuL}, /* LO((2^1*(1+12/32+1/64))^(-1/3))
                                        = 1.074987e-16 */
             {0x3FE696322A2D12D2uL, /* HI((2^1*(1+13/32+1/64))^(-1/3)) = .705834
                                     */
              0x3C9FA3BFED6B0817uL}, /* LO((2^1*(1+13/32+1/64))^(-1/3))
                                        = 1.097721e-16 */
             {0x3FE66C721F74E59DuL, /* HI((2^1*(1+14/32+1/64))^(-1/3)) = .700738
                                     */
              0x3C7624EFDD685BD9uL}, /* LO((2^1*(1+14/32+1/64))^(-1/3))
                                        = 1.920711e-17 */
             {0x3FE643E03BFCB8E8uL, /* HI((2^1*(1+15/32+1/64))^(-1/3)) = .695786
                                     */
              0x3C978FBAF4A03261uL}, /* LO((2^1*(1+15/32+1/64))^(-1/3))
                                        = 8.174519e-17 */
             {0x3FE61C6DDC577D11uL,  /* HI((2^1*(1+16/32+1/64))^(-1/3)) = .69097
                                      */
              0x3C92396E78EA4B75uL}, /* LO((2^1*(1+16/32+1/64))^(-1/3))
                                        = 6.322839e-17 */
             {0x3FE5F60D5B2EEA52uL, /* HI((2^1*(1+17/32+1/64))^(-1/3)) = .686286
                                     */
              0x3C80556F381F16FAuL}, /* LO((2^1*(1+17/32+1/64))^(-1/3))
                                        = 2.833450e-17 */
             {0x3FE5D0B1FB5026F5uL, /* HI((2^1*(1+18/32+1/64))^(-1/3)) = .681725
                                     */
              0x3C982928E987279BuL}, /* LO((2^1*(1+18/32+1/64))^(-1/3))
                                        = 8.382455e-17 */
             {0x3FE5AC4FD4023DCCuL, /* HI((2^1*(1+19/32+1/64))^(-1/3)) = .677284
                                     */
              0x3C940A11BCB5518EuL}, /* LO((2^1*(1+19/32+1/64))^(-1/3))
                                        = 6.952540e-17 */
             {0x3FE588DBBF5F42FBuL, /* HI((2^1*(1+20/32+1/64))^(-1/3)) = .672956
                                     */
              0x3C78540F5D6CE614uL}, /* LO((2^1*(1+20/32+1/64))^(-1/3))
                                        = 2.110149e-17 */
             {0x3FE5664B4A72D55DuL, /* HI((2^1*(1+21/32+1/64))^(-1/3)) = .668737
                                     */
              0x3C9B0B1776332B14uL}, /* LO((2^1*(1+21/32+1/64))^(-1/3))
                                        = 9.382539e-17 */
             {0x3FE54494A6E8F859uL, /* HI((2^1*(1+22/32+1/64))^(-1/3)) = .664622
                                     */
              0x3C7D216749DEB800uL}, /* LO((2^1*(1+22/32+1/64))^(-1/3))
                                        = 2.526667e-17 */
             {0x3FE523AE9E1F4E5EuL, /* HI((2^1*(1+23/32+1/64))^(-1/3)) = .660606
                                     */
              0x3C9F559CE054FA6BuL}, /* LO((2^1*(1+23/32+1/64))^(-1/3))
                                        = 1.087131e-16 */
             {0x3FE503908570BD1DuL, /* HI((2^1*(1+24/32+1/64))^(-1/3)) = .656685
                                     */
              0x3C99624F15487D2EuL}, /* LO((2^1*(1+24/32+1/64))^(-1/3))
                                        = 8.806851e-17 */
             {0x3FE4E4323398A4F6uL, /* HI((2^1*(1+25/32+1/64))^(-1/3)) = .652856
                                     */
              0x3C40A9A70D9CDC59uL}, /* LO((2^1*(1+25/32+1/64))^(-1/3))
                                        = 1.806574e-18 */
             {0x3FE4C58BF70F39D8uL, /* HI((2^1*(1+26/32+1/64))^(-1/3)) = .649115
                                     */
              0x3C7D813B9608371FuL}, /* LO((2^1*(1+26/32+1/64))^(-1/3))
                                        = 2.559135e-17 */
             {0x3FE4A7968D4451D5uL, /* HI((2^1*(1+27/32+1/64))^(-1/3)) = .645458
                                     */
              0x3C9B4C6C1720563CuL}, /* LO((2^1*(1+27/32+1/64))^(-1/3))
                                        = 9.471078e-17 */
             {0x3FE48A4B1AA13DF8uL, /* HI((2^1*(1+28/32+1/64))^(-1/3)) = .641882
                                     */
              0x3C999067A3E5043FuL}, /* LO((2^1*(1+28/32+1/64))^(-1/3))
                                        = 8.869322e-17 */
             {0x3FE46DA3233D10DBuL, /* HI((2^1*(1+29/32+1/64))^(-1/3)) = .638383
                                     */
              0x3C8DB108EEB86F66uL}, /* LO((2^1*(1+29/32+1/64))^(-1/3))
                                        = 5.150662e-17 */
             {0x3FE45198843124FDuL,  /* HI((2^1*(1+30/32+1/64))^(-1/3)) = .63496
                                      */
              0x3C7AACF0A3DE1B25uL}, /* LO((2^1*(1+30/32+1/64))^(-1/3))
                                        = 2.313735e-17 */
             {0x3FE436256D7DD12FuL,  /* HI((2^1*(1+31/32+1/64))^(-1/3)) = .63161
                                      */
              0x3C88313746DCF6BDuL}, /* LO((2^1*(1+31/32+1/64))^(-1/3))
                                        = 4.196686e-17 */
             {0x3FE40E08F10EA819uL,  /* HI((2^2*(1+0/32+1/64))^(-1/3)) = .626713
                                      */
              0x3C9141B86B161B13uL}, /* LO((2^2*(1+0/32+1/64))^(-1/3))
                                        = 5.987128e-17 */
             {0x3FE3DA6EDF4B9061uL,  /* HI((2^2*(1+1/32+1/64))^(-1/3)) = .620414
                                      */
              0x3C8B30738924FB9CuL}, /* LO((2^2*(1+1/32+1/64))^(-1/3))
                                        = 4.716585e-17 */
             {0x3FE3A8D8604CEFE2uL,  /* HI((2^2*(1+2/32+1/64))^(-1/3)) = .614361
                                      */
              0x3C9F6B2887144B57uL}, /* LO((2^2*(1+2/32+1/64))^(-1/3))
                                        = 1.090051e-16 */
             {0x3FE379233D4CD42AuL,  /* HI((2^2*(1+3/32+1/64))^(-1/3)) = .608537
                                      */
              0x3C7A39D89162B0F0uL}, /* LO((2^2*(1+3/32+1/64))^(-1/3))
                                        = 2.274739e-17 */
             {0x3FE34B3066EFD36AuL,  /* HI((2^2*(1+4/32+1/64))^(-1/3)) = .602928
                                      */
              0x3C96DC9A284327ABuL}, /* LO((2^2*(1+4/32+1/64))^(-1/3))
                                        = 7.931755e-17 */
             {0x3FE31EE3971C2B5AuL,  /* HI((2^2*(1+5/32+1/64))^(-1/3)) = .597521
                                      */
              0x3C8A71C066888AE1uL}, /* LO((2^2*(1+5/32+1/64))^(-1/3))
                                        = 4.587362e-17 */
             {0x3FE2F422FFFA1E91uL,  /* HI((2^2*(1+6/32+1/64))^(-1/3)) = .592302
                                      */
              0x3C9916805A704B21uL}, /* LO((2^2*(1+6/32+1/64))^(-1/3))
                                        = 8.704112e-17 */
             {0x3FE2CAD705FC97A5uL,  /* HI((2^2*(1+7/32+1/64))^(-1/3)) = .587261
                                      */
              0x3C9F645E3D18B8B9uL}, /* LO((2^2*(1+7/32+1/64))^(-1/3))
                                        = 1.089131e-16 */
             {0x3FE2A2EA0334A07BuL,  /* HI((2^2*(1+8/32+1/64))^(-1/3)) = .582387
                                      */
              0x3C63C0477AF7CEB2uL}, /* LO((2^2*(1+8/32+1/64))^(-1/3))
                                        = 8.565670e-18 */
             {0x3FE27C4812819C13uL,  /* HI((2^2*(1+9/32+1/64))^(-1/3)) = .577671
                                      */
              0x3C7CFE7FBBA21E64uL}, /* LO((2^2*(1+9/32+1/64))^(-1/3))
                                        = 2.514840e-17 */
             {0x3FE256DEE16FDFD3uL, /* HI((2^2*(1+10/32+1/64))^(-1/3)) = .573104
                                     */
              0x3C970B09AAA813ECuL}, /* LO((2^2*(1+10/32+1/64))^(-1/3))
                                        = 7.994687e-17 */
             {0x3FE2329D87CAABB6uL, /* HI((2^2*(1+11/32+1/64))^(-1/3)) = .568679
                                     */
              0x3C8E218AF337F03DuL}, /* LO((2^2*(1+11/32+1/64))^(-1/3))
                                        = 5.226900e-17 */
             {0x3FE20F74641030A6uL, /* HI((2^2*(1+12/32+1/64))^(-1/3)) = .564387
                                     */
              0x3C66C8082BA7CED9uL}, /* LO((2^2*(1+12/32+1/64))^(-1/3))
                                        = 9.879846e-18 */
             {0x3FE1ED54FC185286uL, /* HI((2^2*(1+13/32+1/64))^(-1/3)) = .560221
                                     */
              0x3C701ADD2311408CuL}, /* LO((2^2*(1+13/32+1/64))^(-1/3))
                                        = 1.396881e-17 */
             {0x3FE1CC31E15AAE72uL, /* HI((2^2*(1+14/32+1/64))^(-1/3)) = .556176
                                     */
              0x3C83CA85D2EC219BuL}, /* LO((2^2*(1+14/32+1/64))^(-1/3))
                                        = 3.433209e-17 */
             {0x3FE1ABFE98575C8FuL, /* HI((2^2*(1+15/32+1/64))^(-1/3)) = .552245
                                     */
              0x3C93801BC54492F8uL}, /* LO((2^2*(1+15/32+1/64))^(-1/3))
                                        = 6.765569e-17 */
             {0x3FE18CAF82B8DBA4uL, /* HI((2^2*(1+16/32+1/64))^(-1/3)) = .548424
                                     */
              0x3C33D7EA7F0B761AuL}, /* LO((2^2*(1+16/32+1/64))^(-1/3))
                                        = 1.075714e-18 */
             {0x3FE16E39CBD55477uL, /* HI((2^2*(1+17/32+1/64))^(-1/3)) = .544705
                                     */
              0x3C77A16C6C706D95uL}, /* LO((2^2*(1+17/32+1/64))^(-1/3))
                                        = 2.049624e-17 */
             {0x3FE15093574284E8uL, /* HI((2^2*(1+18/32+1/64))^(-1/3)) = .541086
                                     */
              0x3C9D8F2A2A931908uL}, /* LO((2^2*(1+18/32+1/64))^(-1/3))
                                        = 1.025542e-16 */
             {0x3FE133B2B13AA0EBuL, /* HI((2^2*(1+19/32+1/64))^(-1/3)) = .537561
                                     */
              0x3C86D57F1BEB6D1BuL}, /* LO((2^2*(1+19/32+1/64))^(-1/3))
                                        = 3.961063e-17 */
             {0x3FE1178F0099B428uL, /* HI((2^2*(1+20/32+1/64))^(-1/3)) = .534126
                                     */
              0x3C93CDC778439A66uL}, /* LO((2^2*(1+20/32+1/64))^(-1/3))
                                        = 6.870832e-17 */
             {0x3FE0FC1FFA42D901uL, /* HI((2^2*(1+21/32+1/64))^(-1/3)) = .530777
                                     */
              0x3C97DB5729CF789FuL}, /* LO((2^2*(1+21/32+1/64))^(-1/3))
                                        = 8.276990e-17 */
             {0x3FE0E15DD5C330AAuL, /* HI((2^2*(1+22/32+1/64))^(-1/3)) = .527511
                                     */
              0x3C9708A853E830DFuL}, /* LO((2^2*(1+22/32+1/64))^(-1/3))
                                        = 7.991461e-17 */
             {0x3FE0C741430E2058uL, /* HI((2^2*(1+23/32+1/64))^(-1/3)) = .524323
                                     */
              0x3C9BC08B7F9AC6A5uL}, /* LO((2^2*(1+23/32+1/64))^(-1/3))
                                        = 9.628454e-17 */
             {0x3FE0ADC361331B22uL, /* HI((2^2*(1+24/32+1/64))^(-1/3)) = .521211
                                     */
              0x3C9258BBBC345F33uL}, /* LO((2^2*(1+24/32+1/64))^(-1/3))
                                        = 6.365261e-17 */
             {0x3FE094DDB5F15206uL, /* HI((2^2*(1+25/32+1/64))^(-1/3)) = .518172
                                     */
              0x3C722721C1C67149uL}, /* LO((2^2*(1+25/32+1/64))^(-1/3))
                                        = 1.574510e-17 */
             {0x3FE07C8A2611201BuL, /* HI((2^2*(1+26/32+1/64))^(-1/3)) = .515203
                                     */
              0x3C8A631FD5291C7EuL}, /* LO((2^2*(1+26/32+1/64))^(-1/3))
                                        = 4.577450e-17 */
             {0x3FE064C2EE6E07C6uL,  /* HI((2^2*(1+27/32+1/64))^(-1/3)) = .5123
                                      */
              0x3C786990227E1011uL}, /* LO((2^2*(1+27/32+1/64))^(-1/3))
                                        = 2.117434e-17 */
             {0x3FE04D829D9EAA58uL, /* HI((2^2*(1+28/32+1/64))^(-1/3)) = .509462
                                     */
              0x3C910F24B7744C35uL}, /* LO((2^2*(1+28/32+1/64))^(-1/3))
                                        = 5.918583e-17 */
             {0x3FE036C40E2A5E29uL, /* HI((2^2*(1+29/32+1/64))^(-1/3)) = .506685
                                     */
              0x3C91E34D0BC8572DuL}, /* LO((2^2*(1+29/32+1/64))^(-1/3))
                                        = 6.206110e-17 */
             {0x3FE02082613DF53BuL, /* HI((2^2*(1+30/32+1/64))^(-1/3)) = .503968
                                     */
              0x3C9D03962ABE8930uL}, /* LO((2^2*(1+30/32+1/64))^(-1/3))
                                        = 1.006626e-16 */
             {0x3FE00AB8F9D2F374uL, /* HI((2^2*(1+31/32+1/64))^(-1/3)) = .501309
                                     */
              0x3C77DDD2BE3FA879uL}, /* LO((2^2*(1+31/32+1/64))^(-1/3))
                                        = 2.070089e-17 */
         },
         0x3FB791D4F50A7B47uL, /* _dA8 */
         0xBFB9B33CA7A65562uL, /* _dA7 */
         0x3FBC67C9DD3D11BBuL, /* _dA6 */
         0xBFBFF4C33F90EF5FuL, /* _dA5 */
         0x3FC26FABB85D0196uL, /* _dA4 */
         0xBFC61F9ADD3C0CA3uL, /* _dA3 */
         0x3FCC71C71C71C71CuL, /* _dA2 */
         0xBFD5555555555555uL, /* _dA1 */
         0xBFF0400000000000uL, /* _dNeg65Div64 */
         0x000FC00000000000uL, /* _dSgnf6Mask */
         0xBFF0000000000000uL, /* _dNegOne */
         0x000FFFFFFFFFFFFFuL, /* _dMantissaMask */
         0xFFF0000000000000uL, /* _lExpHiMask */
         0x00000000000007FFuL, /* _lExpLoMask */
         0x0000000000001556uL, /* _l1556 */
         0x000F8000u,          /* _iRcpIndexMask */
         0x7FFFFFFFu,          /* _iAbsMask */
         0x00000800u,          /* _iSignMask */
         0x00000554u,          /* _iBias */
         0x80100000u,          /* _iSub */
         0xffdfffffu,          /* _iCmp */
         /** UISA specific **/
         {
             0x3ff0000000000000uL,
             0x3fe965fea53d6e3duL,
             0x3fe428a2f98d728buL,
             0x0000000000000000uL,
             0xbff0000000000000uL,
             0xbfe965fea53d6e3duL,
             0xbfe428a2f98d728buL,
             0x0000000000000000uL,
         },
         {0x0000000000000000uL, 0xbc8f53e999952f09uL, 0xbc6ddc22548ea41euL,
          0x0000000000000000uL, 0x0000000000000000uL, 0x3c8f53e999952f09uL,
          0x3c6ddc22548ea41euL, 0x0000000000000000uL},
         {
             0x3fe965fea53d6e3duL,
             0x3fea6a58d55e307cuL,
             0x3feb5c0fbcfec4d4uL,
             0x3fec3e27449db536uL,
             0x3fed12ed0af1a27fuL,
             0x3feddc2ecf33e1b5uL,
             0x3fee9b5dba58189euL,
             0x3fef51a62037e955uL,
             0x3ff0000000000000uL,
             0x0000000000000000uL,
             0x0000000000000000uL,
             0x0000000000000000uL,
             0x0000000000000000uL,
             0x0000000000000000uL,
             0x0000000000000000uL,
             0x0000000000000000uL,
         },
         {
             0xbc8f53e999952f09uL,
             0xbc71094879ecddc1uL,
             0xbc8340979125336euL,
             0x3c6934740ad72eb7uL,
             0xbc584a8a3d967a4cuL,
             0x3c62e92879eeeb77uL,
             0xbc810d7d64a245e4uL,
             0x3c877c892827a10cuL,
             0x0000000000000000uL,
             0x0000000000000000uL,
             0x0000000000000000uL,
             0x0000000000000000uL,
             0x0000000000000000uL,
             0x0000000000000000uL,
             0x0000000000000000uL,
             0x0000000000000000uL,
         }
         /*== BiasL ==*/
         ,
         0x4338000000000000uL
         /*== Zero ==*/
         ,
         0x8000000000000000uL
         /*== OneThird ==*/
         ,
         0xbfd5555555555556uL
         /*== Bias3 ==*/
         ,
         0x4320000000000000uL
         /*== Three ==*/
         ,
         0x4008000000000000uL
         /*==One ==*/
         ,
         0x3ff0000000000000uL
         /*== poly_coeff10 ==*/
         ,
         0x3fb492cbdc40dcd9uL
         /*== poly_coeff9 ==*/
         ,
         0xbfb6053c464e0b59uL
         /*== poly_coeff8 ==*/
         ,
         0x3fb78eb9cf4988cduL
         /*== poly_coeff7 ==*/
         ,
         0xbfb9b3079eb28ff6uL
         /*== poly_coeff6 ==*/
         ,
         0x3fbc67ca1f92050auL
         /*== poly_coeff5 ==*/
         ,
         0xbfbff4c356f55a30uL
         /*== poly_coeff4 ==*/
         ,
         0x3fc26fabb859141cuL
         /*== poly_coeff3 ==*/
         ,
         0xbfc61f9add39f21euL
         /*== poly_coeff2 ==*/
         ,
         0x3fcc71c71c71c762uL
         /*== poly_coeff1 ==*/
         ,
         0xbfd5555555555563uL};
static const _iml_dp_union_t _vmldInvCbrtHATab[111] = {
    0x00000000, 0x3FF00000, /* RCPR_S[0] = 1.0000000000e+00 */
    0x00000000, 0x3FEFA000, /* RCPR_S[1] = 9.8828125000e-01 */
    0x00000000, 0x3FEF6000, /* RCPR_S[2] = 9.8046875000e-01 */
    0x00000000, 0x3FEF0000, /* RCPR_S[3] = 9.6875000000e-01 */
    0x00000000, 0x3FEEC000, /* RCPR_S[4] = 9.6093750000e-01 */
    0x00000000, 0x3FEE8000, /* RCPR_S[5] = 9.5312500000e-01 */
    0x00000000, 0x3FEE4000, /* RCPR_S[6] = 9.4531250000e-01 */
    0x00000000, 0x3FEE0000, /* RCPR_S[7] = 9.3750000000e-01 */
    0x00000000, 0x3FEDC000, /* RCPR_S[8] = 9.2968750000e-01 */
    0x00000000, 0x3FED8000, /* RCPR_S[9] = 9.2187500000e-01 */
    0x00000000, 0x3FED4000, /* RCPR_S[10] = 9.1406250000e-01 */
    0x00000000, 0x3FED0000, /* RCPR_S[11] = 9.0625000000e-01 */
    0x00000000, 0x3FECC000, /* RCPR_S[12] = 8.9843750000e-01 */
    0x00000000, 0x3FEC8000, /* RCPR_S[13] = 8.9062500000e-01 */
    0x00000000, 0x3FEC6000, /* RCPR_S[14] = 8.8671875000e-01 */
    0x00000000, 0x3FEC2000, /* RCPR_S[15] = 8.7890625000e-01 */
    0x00000000, 0x3FEC0000, /* RCPR_S[16] = 8.7500000000e-01 */
    0x00000000, 0x3FEBC000, /* RCPR_S[17] = 8.6718750000e-01 */
    0x00000000, 0x3FEBA000, /* RCPR_S[18] = 8.6328125000e-01 */
    0x00000000, 0x3FEB6000, /* RCPR_S[19] = 8.5546875000e-01 */
    0x00000000, 0x3FEB4000, /* RCPR_S[20] = 8.5156250000e-01 */
    0x00000000, 0x3FEB0000, /* RCPR_S[21] = 8.4375000000e-01 */
    0x00000000, 0x3FEAE000, /* RCPR_S[22] = 8.3984375000e-01 */
    0x00000000, 0x3FEAC000, /* RCPR_S[23] = 8.3593750000e-01 */
    0x00000000, 0x3FEA8000, /* RCPR_S[24] = 8.2812500000e-01 */
    0x00000000, 0x3FEA6000, /* RCPR_S[25] = 8.2421875000e-01 */
    0x00000000, 0x3FEA4000, /* RCPR_S[26] = 8.2031250000e-01 */
    0x00000000, 0x3FEA2000, /* RCPR_S[27] = 8.1640625000e-01 */
    0x00000000, 0x3FEA0000, /* RCPR_S[28] = 8.1250000000e-01 */
    0x00000000, 0x3FE9C000, /* RCPR_S[29] = 8.0468750000e-01 */
    0x00000000, 0x3FE9A000, /* RCPR_S[30] = 8.0078125000e-01 */
    0x00000000, 0x3FE98000, /* RCPR_S[31] = 7.9687500000e-01 */
    0x00000000, 0x3FE96000, /* RCPR_S[32] = 7.9296875000e-01 */
    0x00000000, 0x3FE92000, /* RCPR_S[33] = 7.8515625000e-01 */
    0x00000000, 0x3FE8E000, /* RCPR_S[34] = 7.7734375000e-01 */
    0x00000000, 0x3FE8A000, /* RCPR_S[35] = 7.6953125000e-01 */
    0x00000000, 0x3FE86000, /* RCPR_S[36] = 7.6171875000e-01 */
    0x00000000, 0x3FE84000, /* RCPR_S[37] = 7.5781250000e-01 */
    0x00000000, 0x3FE80000, /* RCPR_S[38] = 7.5000000000e-01 */
    0x00000000, 0x3FE7C000, /* RCPR_S[39] = 7.4218750000e-01 */
    0x00000000, 0x3FE7A000, /* RCPR_S[40] = 7.3828125000e-01 */
    0x00000000, 0x3FE76000, /* RCPR_S[41] = 7.3046875000e-01 */
    0x00000000, 0x3FE74000, /* RCPR_S[42] = 7.2656250000e-01 */
    0x00000000, 0x3FE70000, /* RCPR_S[43] = 7.1875000000e-01 */
    0x00000000, 0x3FE6E000, /* RCPR_S[44] = 7.1484375000e-01 */
    0x00000000, 0x3FE6A000, /* RCPR_S[45] = 7.0703125000e-01 */
    0x00000000, 0x3FE68000, /* RCPR_S[46] = 7.0312500000e-01 */
    0x00000000, 0x3FE66000, /* RCPR_S[47] = 6.9921875000e-01 */
    0x00000000, 0x3FE64000, /* RCPR_S[48] = 6.9531250000e-01 */
    0x00000000, 0x3FE60000, /* RCPR_S[49] = 6.8750000000e-01 */
    0x00000000, 0x3FE5E000, /* RCPR_S[50] = 6.8359375000e-01 */
    0x00000000, 0x3FE5C000, /* RCPR_S[51] = 6.7968750000e-01 */
    0x00000000, 0x3FE5A000, /* RCPR_S[52] = 6.7578125000e-01 */
    0x00000000, 0x3FE58000, /* RCPR_S[53] = 6.7187500000e-01 */
    0x00000000, 0x3FE56000, /* RCPR_S[54] = 6.6796875000e-01 */
    0x00000000, 0x3FE54000, /* RCPR_S[55] = 6.6406250000e-01 */
    0x00000000, 0x3FE52000, /* RCPR_S[56] = 6.6015625000e-01 */
    0x00000000, 0x3FE50000, /* RCPR_S[57] = 6.5625000000e-01 */
    0x00000000, 0x3FE4E000, /* RCPR_S[58] = 6.5234375000e-01 */
    0x00000000, 0x3FE4C000, /* RCPR_S[59] = 6.4843750000e-01 */
    0x00000000, 0x3FE4A000, /* RCPR_S[60] = 6.4453125000e-01 */
    0x00000000, 0x3FE48000, /* RCPR_S[61] = 6.4062500000e-01 */
    0x00000000, 0x3FE46000, /* RCPR_S[62] = 6.3671875000e-01 */
    0x00000000, 0x3FE44000, /* RCPR_S[63] = 6.3281250000e-01 */
    0x00000000, 0x3FE42000, /* RCPR_S[64] = 6.2890625000e-01 */
    0x00000000, 0x3FE40000, /* RCPR_S[65] = 6.2500000000e-01 */
    0x00000000, 0x3FE3C000, /* RCPR_S[66] = 6.1718750000e-01 */
    0x00000000, 0x3FE3A000, /* RCPR_S[67] = 6.1328125000e-01 */
    0x00000000, 0x3FE36000, /* RCPR_S[68] = 6.0546875000e-01 */
    0x00000000, 0x3FE34000, /* RCPR_S[69] = 6.0156250000e-01 */
    0x00000000, 0x3FE30000, /* RCPR_S[70] = 5.9375000000e-01 */
    0x00000000, 0x3FE2E000, /* RCPR_S[71] = 5.8984375000e-01 */
    0x00000000, 0x3FE2C000, /* RCPR_S[72] = 5.8593750000e-01 */
    0x00000000, 0x3FE28000, /* RCPR_S[73] = 5.7812500000e-01 */
    0x00000000, 0x3FE26000, /* RCPR_S[74] = 5.7421875000e-01 */
    0x00000000, 0x3FE24000, /* RCPR_S[75] = 5.7031250000e-01 */
    0x00000000, 0x3FE22000, /* RCPR_S[76] = 5.6640625000e-01 */
    0x00000000, 0x3FE20000, /* RCPR_S[77] = 5.6250000000e-01 */
    0x00000000, 0x3FE1E000, /* RCPR_S[78] = 5.5859375000e-01 */
    0x00000000, 0x3FE1C000, /* RCPR_S[79] = 5.5468750000e-01 */
    0x00000000, 0x3FE1A000, /* RCPR_S[80] = 5.5078125000e-01 */
    0x00000000, 0x3FE18000, /* RCPR_S[81] = 5.4687500000e-01 */
    0x00000000, 0x3FE16000, /* RCPR_S[82] = 5.4296875000e-01 */
    0x00000000, 0x3FE14000, /* RCPR_S[83] = 5.3906250000e-01 */
    0x00000000, 0x3FE12000, /* RCPR_S[84] = 5.3515625000e-01 */
    0x00000000, 0x3FE10000, /* RCPR_S[85] = 5.3125000000e-01 */
    0x00000000, 0x3FE0E000, /* RCPR_S[86] = 5.2734375000e-01 */
    0x00000000, 0x3FE0E000, /* RCPR_S[87] = 5.2734375000e-01 */
    0x00000000, 0x3FE0C000, /* RCPR_S[88] = 5.2343750000e-01 */
    0x00000000, 0x3FE0A000, /* RCPR_S[89] = 5.1953125000e-01 */
    0x00000000, 0x3FE08000, /* RCPR_S[90] = 5.1562500000e-01 */
    0x00000000, 0x3FE08000, /* RCPR_S[91] = 5.1562500000e-01 */
    0x00000000, 0x3FE06000, /* RCPR_S[92] = 5.1171875000e-01 */
    0x00000000, 0x3FE04000, /* RCPR_S[93] = 5.0781250000e-01 */
    0x00000000, 0x3FE02000, /* RCPR_S[94] = 5.0390625000e-01 */
    0x00000000, 0x3FE02000, /* RCPR_S[95] = 5.0390625000e-01 */
    0x00000000, 0x3FE00000, /* RCPR_S[96] = 5.0000000000e-01 */
    /* Right Shifter to obtain j */
    0x00000020, 0x42E00000, /* RSJ = 2^(47)+1 */
    /* Multiplier to split M into MHi, MLo */
    0x00000000, 0x42400000, /* RSM = 2^(37) */
    /* Scale for processing denormalized arguments */
    0x00000000, 0x45900000,
    /* Double precision constants: 0.0, 1.0 */
    0x00000000, 0x00000000, 0x00000000, 0x3FF00000,
    /* Coefficients for Polynomial approximation */
    0x00000000, 0x3FD55560, /* A0  =  3.3333587646e-01 */
    0x5556EEB1, 0xBEC55555, /* A0L = -2.5431315105e-06 */
    0x1C71C7C6, 0x3FCC71C7, /* A1  =  2.2222222222e-01 */
    0xDD3D926E, 0x3FC61F9A, /* A2  =  1.7283950618e-01 */
    0xB82A92C1, 0x3FC26FAB, /* A3  =  1.4403292172e-01 */
    0xCAD96DC0, 0x3FBFF4C2, /* A4  =  1.2482850506e-01 */
    0x021ABD48, 0x3FBC67D1, /* A5  =  1.1095911313e-01 */
    0xFA1CBB4B, 0x3FB9B8DC, /* A6  =  1.0047703844e-01 */
    0x29541C7A, 0x3FB76E1B, /* A7  =  9.1523835745e-02 */
};
inline int __devicelib_imf_internal_dinvcbrt(const double *a, double *r) {
  double dbScale;
  double dbM1, dbM, dbMHi, dbMLo;
  double dbS0, dbS2, dbS3, dbEHi, dbELo, e, dbDHi, dbDLo;
  double dbP, dbRes, dbResLo, dbResHi, dbR;
  double dbTmp, dbTmp1;
  double x;
  double v1, v2;
  int i;
  int iN1, iN2, iN, iL, iJ1, iJ;
  int nRet = 0;
  dbScale = ((const double *)_vmldInvCbrtHATab)[101];
  /* Filter out Infs and NaNs */
  if (((((_iml_dp_union_t *)&(*a))->bits.exponent) != 0x7FF)) {
    /* Here if argument is finite double precision number */
    x = (*a);
    (((_iml_dp_union_t *)&x)->bits.sign = 0);
    (((_iml_dp_union_t *)&dbScale)->bits.sign =
         (((_iml_dp_union_t *)&(*a))->bits.sign));
    /* Check if x is denormalized number or [+/-]0 */
    /*
    //
    //              Scale=2^(-N) is used in Reconstruction step to construct
    final result
    //
    //
    //              N is used to scale final result. If x is normalized number
    //              then N is 0 initially. If x is denormalized number then
    //              N is set to -DENORM_UNSCALE_EXP initially.
    //
    */
    if ((((_iml_dp_union_t *)&x)->bits.exponent)) {
      iN = 0;
    } else {
      /* Here if argument is denormalized or [+/-]0 */
      /* These arguments are processed in path 4.2) */
      /*
      //
      //                  Scale x and properly adjust N
      //
      */
      x *= ((const double *)_vmldInvCbrtHATab)[99];
      iN = -30;
    }
    /* Check if input argument is greater than 0, i.e. */
    /* in function domain                              */
    if (x > ((const double *)_vmldInvCbrtHATab)[100]) {
      /* Here if argument is greater than 0.0 and is finite. */
      /* Thus path 4) here.                                  */
      /* a) Range Reduction */
      /*
      //
      //                  Get unbiased exponent of x
      //
      */
      iN1 = (((_iml_dp_union_t *)&x)->bits.exponent) - 0x3FF;
      /*
      //
      //                  Calculate N from N1. L variable is used to determine
      //                  integer remainder in decomposition N1=3*integer+L.
      //                  In addition, scale for denormalized arguments is taken
      //                  into account.
      //
      */
      iN2 = iN1 / 3;
      iL = iN1 - 3 * iN2;
      if (iL < 0) {
        iL += 3;
        iN2--;
      }
      iN += iN2;
      /*
      //
      //                  Calculate M. L variable is used to determine
      //                  integer remainder in decomposition N1=3*integer+L.
      //
      */
      dbM1 = x;
      (((_iml_dp_union_t *)&dbM1)->bits.exponent = 0x3FF);
      iJ = iL;
      dbM = dbM1;
      while (iJ--) {
        dbM += dbM;
      }
      /*
      //
      //                  Obtain index j of table value s0 approximating
      1/cbrt(M)
      //
      */
      dbTmp = dbM1 + ((const double *)_vmldInvCbrtHATab)[97];
      iJ1 = (((_iml_dp_union_t *)&dbTmp)->bits.lo_significand) &
            ((1 << (5 + 1)) - 1);
      iJ = iJ1 + iL * (1 << 5);
      /*
      //
      //                  Get s0 from RCPR_S table, and calculate s0^3 into
      dbS3.
      //                  Notice that s0*s0*s0 is calculated exactly.
      //
      */
      dbS0 = ((const double *)_vmldInvCbrtHATab)[iJ];
      dbS2 = dbS0 * dbS0;
      dbS3 = dbS2 * dbS0;
      /*
      //
      //                  Split M into MHi and MLo
      //
      */
      v1 = ((dbM) * (((const double *)_vmldInvCbrtHATab)[98]));
      v2 = (v1 - (dbM));
      v1 = (v1 - v2);
      v2 = ((dbM)-v1);
      dbMHi = v1;
      dbMLo = v2;
      /*
      //
      //                  Calculate EHi, ELo, e
      //
      */
      dbEHi = ((const double *)_vmldInvCbrtHATab)[101] - dbS3 * dbMHi;
      dbELo = dbS3 * dbMLo;
      e = dbEHi - dbELo;
      /* b) Approximation */
      /*
      //
      //                  Polynomial P(e)*e^2
      //
      */
      dbP = ((((((((const double *)_vmldInvCbrtHATab)[110] * e +
                  ((const double *)_vmldInvCbrtHATab)[109]) *
                     e +
                 ((const double *)_vmldInvCbrtHATab)[108]) *
                    e +
                ((const double *)_vmldInvCbrtHATab)[107]) *
                   e +
               ((const double *)_vmldInvCbrtHATab)[106]) *
                  e +
              ((const double *)_vmldInvCbrtHATab)[105]) *
                 e +
             ((const double *)_vmldInvCbrtHATab)[104]) *
            e * e;
      /*
      //
      //                  Split EHi into DHi and DLo
      //
      */
      v1 = ((dbEHi) * (((const double *)_vmldInvCbrtHATab)[98]));
      v2 = (v1 - (dbEHi));
      v1 = (v1 - v2);
      v2 = ((dbEHi)-v1);
      dbDHi = v1;
      dbDLo = v2;
      /*
      //
      //                  Calculate ResLo - low part of Res
      //
      */
      dbResLo = (dbP + ((const double *)_vmldInvCbrtHATab)[103] * e -
                 ((const double *)_vmldInvCbrtHATab)[102] * dbELo +
                 ((const double *)_vmldInvCbrtHATab)[102] * dbDLo) *
                dbS0;
      /*
      //
      //                  Calculate ResHi - high part of Res.
      //                  Notice that s0*DHi*A0 is calculated without roundings.
      //                  IML_ADD_HL() macro is used to calculate sum of s0 and
      //                  s0*DHi*A0. High part of the sum is in ResHi, low part
      is
      //                  in R. R is added to ResLo later.
      //
      */
      dbTmp = dbS0 * dbDHi * ((const double *)_vmldInvCbrtHATab)[102];
      v1 = ((dbS0) + (dbTmp));
      dbTmp1 = ((dbS0)-v1);
      v2 = (dbTmp1 + (dbTmp));
      dbResHi = v1;
      dbR = v2;
      ;
      dbResLo += dbR;
      /* c) Reconstruction */
      (((_iml_dp_union_t *)&dbScale)->bits.exponent = 0x3FF - iN);
      /*
      //
      //                  Calculate Scale=2^(-N)
      //
      //
      //                  Calculate final result
      //
      */
      dbRes = (dbResHi + dbResLo) * dbScale;
      (*r) = dbRes;
    } else {
      /* Here if argument x=0.0. Thus, path 3) here */
      (*r) = ((const double *)_vmldInvCbrtHATab)[101] / (*a);
      nRet = 2;
    }
  } else {
    /* Paths 1),2). Here if argument is NaN or +/-Infinity */
    if ((((((_iml_dp_union_t *)&(*a))->bits.hi_significand) == 0) &&
         ((((_iml_dp_union_t *)&(*a))->bits.lo_significand) == 0))) {
      /* Here if argument is +/-Infinity */
      /* Thus, path 2) here.             */
      (*r) = ((const double *)_vmldInvCbrtHATab)[100] / (*a);
    } else {
      /* Here if argument is [Q,S]NaN. Thus, path 1) here. */
      (*r) = (*a) / (*a);
    }
  }
  return nRet;
}
} /* namespace */
} /* namespace __imf_impl_invcbrt_d_ha */
DEVICE_EXTERN_C_INLINE double __devicelib_imf_rcbrt(double x) {
  using namespace __imf_impl_invcbrt_d_ha;
  double r;
  VUINT32 vm;
  double va1;
  double vr1;
  va1 = x;
  {
    VUINT64 lX;
    VUINT32 iX;
    VUINT32 iRcpIndex;
    VUINT32 iRcpIndex3;
    VUINT32 iRangeMask;
    VUINT32 iRcpIndexMask;
    VUINT32 iAbsMask;
    VUINT32 iSub;
    VUINT32 iCmp;
    double dRcp;
    VUINT64 lExpLoMask;
    VUINT64 lExpHiMask;
    VUINT64 lExp;
    VUINT64 lExpo3;
    VUINT64 l1556;
    VUINT32 iExp;
    VUINT32 iExpo3;
    VUINT32 i2Expo3;
    VUINT32 iCbrtIndex;
    double dCbrt[2];
    VUINT32 iSign;
    VUINT32 iSignMask;
    VUINT32 i2k;
    VUINT32 iBias;
    VUINT64 l2k;
    double dMantissaMask;
    double dR;
    double dNegOne;
    double dSgnf6Mask;
    double dR6;
    double dZ;
    double dNeg65Div64;
    double dA8;
    double dA7;
    double dA6;
    double dA5;
    double dA4;
    double dA3;
    double dA2;
    double dA1;
    double dP;
    double d2k;
    double dCbrtHiZ;
    /* Load constants */
    lExpHiMask = (__devicelib_imf_internal_dinvcbrt_data._lExpHiMask);
    lExpLoMask = (__devicelib_imf_internal_dinvcbrt_data._lExpLoMask);
    l1556 = (__devicelib_imf_internal_dinvcbrt_data._l1556);
    iRcpIndexMask = (__devicelib_imf_internal_dinvcbrt_data._iRcpIndexMask);
    iAbsMask = (__devicelib_imf_internal_dinvcbrt_data._iAbsMask);
    iSignMask = (__devicelib_imf_internal_dinvcbrt_data._iSignMask);
    iBias = (__devicelib_imf_internal_dinvcbrt_data._iBias);
    iSub = (__devicelib_imf_internal_dinvcbrt_data._iSub);
    iCmp = (__devicelib_imf_internal_dinvcbrt_data._iCmp);
    /* Get iX - high part of argument */
    lX = as_ulong(va1);
    iX = ((VUINT32)((VUINT64)lX >> 32));
    iRangeMask = (iX & iAbsMask);
    iRangeMask = (iRangeMask - iSub);
    iRangeMask = ((VUINT32)(-(VSINT32)((VSINT32)iRangeMask > (VSINT32)iCmp)));
    vm = 0;
    vm = iRangeMask;
    /* Calculate Rcp table index */
    iRcpIndex = (iX & iRcpIndexMask);
    iRcpIndex = ((VUINT32)(iRcpIndex) >> (12));
    /* Load 1/(1+iRcpIndex/32+1/64) reciprocal table value */
    dRcp = as_double(((const VUINT64 *)(__devicelib_imf_internal_dinvcbrt_data
                                            ._dRcp))[iRcpIndex >> 3]);
    /* Calculate CbrtIndex */
    lExp = ((VUINT64)(lX) >> (52));
    lExp = (lExp & lExpLoMask);
    lExpo3 = (lExp * l1556);
    iExp = (((VUINT32)lExp & (VUINT32)-1));
    iExpo3 = (((VUINT32)lExpo3 & (VUINT32)-1));
    iExpo3 = ((VUINT32)(iExpo3) >> (14));
    i2Expo3 = (iExpo3 + iExpo3);
    iExp = (iExp - iExpo3);
    iExp = (iExp - i2Expo3);
    iExp = ((VUINT32)(iExp) << (8));
    iCbrtIndex = (iRcpIndex + iExp);
    ///* Load cbrt(2^j*(1+iRcpIndex/32+1/64)) Hi & Lo values */
    iCbrtIndex = ((VUINT32)(iCbrtIndex) << (1));
    dCbrt[0] =
        as_double(((const VUINT64 *)(__devicelib_imf_internal_dinvcbrt_data
                                         ._dCbrtHiLo))[iCbrtIndex >> 3]);
    dCbrt[1] =
        as_double(((const VUINT64 *)(__devicelib_imf_internal_dinvcbrt_data
                                         ._dCbrtHiLo))[(iCbrtIndex >> 3) + 1]);
    /* Compute 2^k */
    iSign = ((VUINT32)(iX) >> (20));
    iSign = (iSign & iSignMask);
    i2k = (iSign | iBias);
    i2k = (i2k - iExpo3);
    i2k = ((VUINT32)(i2k) << (20));
    l2k = (((VUINT64)(VUINT32)i2k << 32));
    // VAND( L, l2k, /*=*/ l2k, lExpHiMask );
    d2k = as_double(l2k);
    /* Argument reduction Z */
    dMantissaMask =
        as_double(__devicelib_imf_internal_dinvcbrt_data._dMantissaMask);
    dR = as_double((as_ulong(va1) & as_ulong(dMantissaMask)));
    dNegOne = as_double(__devicelib_imf_internal_dinvcbrt_data._dNegOne);
    dR = as_double((as_ulong(dR) | as_ulong(dNegOne)));
    dSgnf6Mask = as_double(__devicelib_imf_internal_dinvcbrt_data._dSgnf6Mask);
    dR6 = as_double((as_ulong(va1) & as_ulong(dSgnf6Mask)));
    dNeg65Div64 =
        as_double(__devicelib_imf_internal_dinvcbrt_data._dNeg65Div64);
    dR6 = as_double((as_ulong(dR6) | as_ulong(dNeg65Div64)));
    dR = (dR - dR6);
    dZ = (dR * dRcp);
    /* Polynomial */
    dA8 = as_double(__devicelib_imf_internal_dinvcbrt_data._dA8);
    dA7 = as_double(__devicelib_imf_internal_dinvcbrt_data._dA7);
    dP = __fma(dA8, dZ, dA7);
    dA6 = as_double(__devicelib_imf_internal_dinvcbrt_data._dA6);
    dP = __fma(dP, dZ, dA6);
    dA5 = as_double(__devicelib_imf_internal_dinvcbrt_data._dA5);
    dP = __fma(dP, dZ, dA5);
    dA4 = as_double(__devicelib_imf_internal_dinvcbrt_data._dA4);
    dP = __fma(dP, dZ, dA4);
    dA3 = as_double(__devicelib_imf_internal_dinvcbrt_data._dA3);
    dP = __fma(dP, dZ, dA3);
    dA2 = as_double(__devicelib_imf_internal_dinvcbrt_data._dA2);
    dP = __fma(dP, dZ, dA2);
    dA1 = as_double(__devicelib_imf_internal_dinvcbrt_data._dA1);
    dP = __fma(dP, dZ, dA1);
    /* THi*2^k, TLo*2^k */
    dCbrt[0] = (dCbrt[0] * d2k);
    dCbrt[1] = (dCbrt[1] * d2k);
    /* THi*2^k*Z */
    dCbrtHiZ = (dCbrt[0] * dZ);
    /* Final reconstruction */
    dP = (dP * dCbrtHiZ);
    dP = (dP + dCbrt[1]);
    vr1 = (dP + dCbrt[0]);
  }
  if (__builtin_expect((vm) != 0, 0)) {
    double __cout_a1;
    double __cout_r1;
    ((double *)&__cout_a1)[0] = va1;
    ((double *)&__cout_r1)[0] = vr1;
    __devicelib_imf_internal_dinvcbrt(&__cout_a1, &__cout_r1);
    vr1 = ((const double *)&__cout_r1)[0];
  }
  r = vr1;
  return r;
}
#endif /*__LIBDEVICE_IMF_ENABLED__*/
