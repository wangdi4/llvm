/*******************************************************************************
* INTEL CONFIDENTIAL
* Copyright 1996 Intel Corporation.
*
* This software and the related documents are Intel copyrighted  materials,  and
* your use of  them is  governed by the  express license  under which  they were
* provided to you (License).  Unless the License provides otherwise, you may not
* use, modify, copy, publish, distribute,  disclose or transmit this software or
* the related documents without Intel's prior written permission.
*
* This software and the related documents  are provided as  is,  with no express
* or implied  warranties,  other  than those  that are  expressly stated  in the
* License.
*******************************************************************************/
#include "_imf_include_fp32.hpp"
#ifdef __LIBDEVICE_IMF_ENABLED__
namespace __imf_impl_invcbrt_s_ha {
namespace {
typedef struct {
  VUINT32 _sRcp[32];
  VUINT32 _sCbrtHL[96][2];
  VUINT32 _sP4;
  VUINT32 _sP3;
  VUINT32 _sP2;
  VUINT32 _sP1;
  VUINT32 _sMantissaMask;
  VUINT32 _sMantissaMask1;
  VUINT32 _sExpMask;
  VUINT32 _sExpMask1;
  VUINT32 _iRcpIndexMask;
  VUINT32 _iBExpMask;
  VUINT32 _iSignMask;
  VUINT32 _iBias;
  VUINT32 _iOne;
  VUINT32 _i555;
  VUINT32 _iAbsMask;
  VUINT32 _iSubConst;
  VUINT32 _iCmpConst;
  VUINT32 etbl_H[16];
  VUINT32 etbl_L[16];
  VUINT32 cbrt_tbl_H[32];
  VUINT32 cbrt_tbl_L[32];
  VUINT32 BiasL;
  VUINT32 SZero;
  VUINT32 OneThird;
  VUINT32 Bias3;
  VUINT32 Three;
  VUINT32 One;
  VUINT32 poly_coeff4;
  VUINT32 poly_coeff3;
  VUINT32 poly_coeff2;
  VUINT32 poly_coeff1;
} __devicelib_imf_internal_sinvcbrt_data_t;
static const __devicelib_imf_internal_sinvcbrt_data_t
    __devicelib_imf_internal_sinvcbrt_data = {
        {
            0xBF7C0FC1u, /* (1/(1+0/32+1/64)) = -.984615 */
            0xBF74898Du, /* (1/(1+1/32+1/64)) = -.955224 */
            0xBF6D7304u, /* (1/(1+2/32+1/64)) = -.927536 */
            0xBF66C2B4u, /* (1/(1+3/32+1/64)) = -.901408 */
            0xBF607038u, /* (1/(1+4/32+1/64)) = -.876712 */
            0xBF5A740Eu, /* (1/(1+5/32+1/64)) = -.853333 */
            0xBF54C77Bu, /* (1/(1+6/32+1/64)) = -.831169 */
            0xBF4F6475u, /* (1/(1+7/32+1/64)) = -.810127 */
            0xBF4A4588u, /* (1/(1+8/32+1/64)) = -.790123 */
            0xBF4565C8u, /* (1/(1+9/32+1/64)) = -.771084 */
            0xBF40C0C1u, /* (1/(1+10/32+1/64)) = -.752941 */
            0xBF3C5264u, /* (1/(1+11/32+1/64)) = -.735632 */
            0xBF381703u, /* (1/(1+12/32+1/64)) = -.719101 */
            0xBF340B41u, /* (1/(1+13/32+1/64)) = -.703297 */
            0xBF302C0Bu, /* (1/(1+14/32+1/64)) = -.688172 */
            0xBF2C7692u, /* (1/(1+15/32+1/64)) = -.673684 */
            0xBF28E83Fu, /* (1/(1+16/32+1/64)) = -.659794 */
            0xBF257EB5u, /* (1/(1+17/32+1/64)) = -.646465 */
            0xBF2237C3u, /* (1/(1+18/32+1/64)) = -.633663 */
            0xBF1F1166u, /* (1/(1+19/32+1/64)) = -.621359 */
            0xBF1C09C1u, /* (1/(1+20/32+1/64)) = -.609524 */
            0xBF191F1Au, /* (1/(1+21/32+1/64)) = -.598131 */
            0xBF164FDAu, /* (1/(1+22/32+1/64)) = -.587156 */
            0xBF139A86u, /* (1/(1+23/32+1/64)) = -.576577 */
            0xBF10FDBCu, /* (1/(1+24/32+1/64)) = -.566372 */
            0xBF0E7835u, /* (1/(1+25/32+1/64)) = -.556522 */
            0xBF0C08C1u, /* (1/(1+26/32+1/64)) = -.547009 */
            0xBF09AE41u, /* (1/(1+27/32+1/64)) = -.537815 */
            0xBF0767ABu, /* (1/(1+28/32+1/64)) = -.528926 */
            0xBF053408u, /* (1/(1+29/32+1/64)) = -.520325 */
            0xBF03126Fu, /* (1/(1+30/32+1/64)) = -.512    */
            0xBF010204u, /* (1/(1+31/32+1/64)) = -.503937 */
        },
        {
            {0x3F7EAE2Du,  /* HI((2^0*(1+0/32+1/64))^(-1/3)) = .994845 */
             0x3378220Fu}, /* LO((2^0*(1+0/32+1/64))^(-1/3)) = 5.777298e-08 */
            {0x3F7C1EE0u,  /* HI((2^0*(1+1/32+1/64))^(-1/3)) = .984846 */
             0x330B8443u}, /* LO((2^0*(1+1/32+1/64))^(-1/3)) = 3.248375e-08 */
            {0x3F79A926u,  /* HI((2^0*(1+2/32+1/64))^(-1/3)) = .975237 */
             0x32FCBC7Du}, /* LO((2^0*(1+2/32+1/64))^(-1/3)) = 2.942238e-08 */
            {0x3F774B4Du,  /* HI((2^0*(1+3/32+1/64))^(-1/3)) = .965993 */
             0x32A666D1u}, /* LO((2^0*(1+3/32+1/64))^(-1/3)) = 1.937170e-08 */
            {0x3F7503CAu,  /* HI((2^0*(1+4/32+1/64))^(-1/3)) = .957089 */
             0x331A12E9u}, /* LO((2^0*(1+4/32+1/64))^(-1/3)) = 3.587312e-08 */
            {0x3F72D137u,  /* HI((2^0*(1+5/32+1/64))^(-1/3)) = .948505 */
             0x3289AD8Fu}, /* LO((2^0*(1+5/32+1/64))^(-1/3)) = 1.602782e-08 */
            {0x3F70B24Bu,  /* HI((2^0*(1+6/32+1/64))^(-1/3)) = .940221 */
             0x332285C5u}, /* LO((2^0*(1+6/32+1/64))^(-1/3)) = 3.784023e-08 */
            {0x3F6EA5DBu,  /* HI((2^0*(1+7/32+1/64))^(-1/3)) = .932218 */
             0x3366CF36u}, /* LO((2^0*(1+7/32+1/64))^(-1/3)) = 5.373950e-08 */
            {0x3F6CAAD5u,  /* HI((2^0*(1+8/32+1/64))^(-1/3)) = .924482 */
             0x321E2094u}, /* LO((2^0*(1+8/32+1/64))^(-1/3)) = 9.204217e-09 */
            {0x3F6AC03Au,  /* HI((2^0*(1+9/32+1/64))^(-1/3)) = .916996 */
             0x333E00E2u}, /* LO((2^0*(1+9/32+1/64))^(-1/3)) = 4.423863e-08 */
            {0x3F68E523u,  /* HI((2^0*(1+10/32+1/64))^(-1/3)) = .909746 */
             0x337D32F6u}, /* LO((2^0*(1+10/32+1/64))^(-1/3)) = 5.895250e-08 */
            {0x3F6718BAu,  /* HI((2^0*(1+11/32+1/64))^(-1/3)) = .902721 */
             0x32414FC8u}, /* LO((2^0*(1+11/32+1/64))^(-1/3)) = 1.125222e-08 */
            {0x3F655A36u,  /* HI((2^0*(1+12/32+1/64))^(-1/3)) = .895908 */
             0x33576AF3u}, /* LO((2^0*(1+12/32+1/64))^(-1/3)) = 5.015586e-08 */
            {0x3F63A8E2u,  /* HI((2^0*(1+13/32+1/64))^(-1/3)) = .889296 */
             0x31C9B34Fu}, /* LO((2^0*(1+13/32+1/64))^(-1/3)) = 5.870255e-09 */
            {0x3F620411u,  /* HI((2^0*(1+14/32+1/64))^(-1/3)) = .882875 */
             0x32C622E0u}, /* LO((2^0*(1+14/32+1/64))^(-1/3)) = 2.306609e-08 */
            {0x3F606B26u,  /* HI((2^0*(1+15/32+1/64))^(-1/3)) = .876635 */
             0x3242ACB0u}, /* LO((2^0*(1+15/32+1/64))^(-1/3)) = 1.133155e-08 */
            {0x3F5EDD8Cu,  /* HI((2^0*(1+16/32+1/64))^(-1/3)) = .870568 */
             0x337653A4u}, /* LO((2^0*(1+16/32+1/64))^(-1/3)) = 5.735241e-08 */
            {0x3F5D5ABCu,  /* HI((2^0*(1+17/32+1/64))^(-1/3)) = .864666 */
             0x3225A55Bu}, /* LO((2^0*(1+17/32+1/64))^(-1/3)) = 9.641861e-09 */
            {0x3F5BE233u,  /* HI((2^0*(1+18/32+1/64))^(-1/3)) = .85892  */
             0x32C6336Cu}, /* LO((2^0*(1+18/32+1/64))^(-1/3)) = 2.307362e-08 */
            {0x3F5A737Au,  /* HI((2^0*(1+19/32+1/64))^(-1/3)) = .853325 */
             0x331A324Bu}, /* LO((2^0*(1+19/32+1/64))^(-1/3)) = 3.590166e-08 */
            {0x3F590E21u,  /* HI((2^0*(1+20/32+1/64))^(-1/3)) = .847872 */
             0x32E26AF9u}, /* LO((2^0*(1+20/32+1/64))^(-1/3)) = 2.635851e-08 */
            {0x3F57B1BEu,  /* HI((2^0*(1+21/32+1/64))^(-1/3)) = .842556 */
             0x331648F0u}, /* LO((2^0*(1+21/32+1/64))^(-1/3)) = 3.499093e-08 */
            {0x3F565DEFu,  /* HI((2^0*(1+22/32+1/64))^(-1/3)) = .837371 */
             0x324B9C9Bu}, /* LO((2^0*(1+22/32+1/64))^(-1/3)) = 1.185176e-08 */
            {0x3F551256u,  /* HI((2^0*(1+23/32+1/64))^(-1/3)) = .832311 */
             0x32D30A08u}, /* LO((2^0*(1+23/32+1/64))^(-1/3)) = 2.456819e-08 */
            {0x3F53CE9Cu,  /* HI((2^0*(1+24/32+1/64))^(-1/3)) = .827371 */
             0x335F9862u}, /* LO((2^0*(1+24/32+1/64))^(-1/3)) = 5.205983e-08 */
            {0x3F529270u,  /* HI((2^0*(1+25/32+1/64))^(-1/3)) = .822547 */
             0x32A54140u}, /* LO((2^0*(1+25/32+1/64))^(-1/3)) = 1.923820e-08 */
            {0x3F515D83u,  /* HI((2^0*(1+26/32+1/64))^(-1/3)) = .817833 */
             0x325BF8F4u}, /* LO((2^0*(1+26/32+1/64))^(-1/3)) = 1.280408e-08 */
            {0x3F502F8Cu,  /* HI((2^0*(1+27/32+1/64))^(-1/3)) = .813226 */
             0x32BF1972u}, /* LO((2^0*(1+27/32+1/64))^(-1/3)) = 2.224690e-08 */
            {0x3F4F0846u,  /* HI((2^0*(1+28/32+1/64))^(-1/3)) = .80872  */
             0x332D12A6u}, /* LO((2^0*(1+28/32+1/64))^(-1/3)) = 4.029666e-08 */
            {0x3F4DE770u,  /* HI((2^0*(1+29/32+1/64))^(-1/3)) = .804313 */
             0x3344B82Eu}, /* LO((2^0*(1+29/32+1/64))^(-1/3)) = 4.580232e-08 */
            {0x3F4CCCCCu,  /* HI((2^0*(1+30/32+1/64))^(-1/3)) = .8      */
             0x334CCCCDu}, /* LO((2^0*(1+30/32+1/64))^(-1/3)) = 4.768372e-08 */
            {0x3F4BB820u,  /* HI((2^0*(1+31/32+1/64))^(-1/3)) = .795778 */
             0x323CE91Eu}, /* LO((2^0*(1+31/32+1/64))^(-1/3)) = 1.099605e-08 */
            {0x3F4A23D4u,  /* HI((2^1*(1+0/32+1/64))^(-1/3)) = .789609 */
             0x32A9335Eu}, /* LO((2^1*(1+0/32+1/64))^(-1/3)) = 1.969755e-08 */
            {0x3F481BB7u,  /* HI((2^1*(1+1/32+1/64))^(-1/3)) = .781673 */
             0x3232C4D9u}, /* LO((2^1*(1+1/32+1/64))^(-1/3)) = 1.040572e-08 */
            {0x3F4627E6u,  /* HI((2^1*(1+2/32+1/64))^(-1/3)) = .774046 */
             0x332C097Au}, /* LO((2^1*(1+2/32+1/64))^(-1/3)) = 4.005549e-08 */
            {0x3F444709u,  /* HI((2^1*(1+3/32+1/64))^(-1/3)) = .766709 */
             0x3377BB8Au}, /* LO((2^1*(1+3/32+1/64))^(-1/3)) = 5.767974e-08 */
            {0x3F4277E7u,  /* HI((2^1*(1+4/32+1/64))^(-1/3)) = .759642 */
             0x337F1F20u}, /* LO((2^1*(1+4/32+1/64))^(-1/3)) = 5.940012e-08 */
            {0x3F40B963u,  /* HI((2^1*(1+5/32+1/64))^(-1/3)) = .752829 */
             0x3346B8ADu}, /* LO((2^1*(1+5/32+1/64))^(-1/3)) = 4.626843e-08 */
            {0x3F3F0A79u,  /* HI((2^1*(1+6/32+1/64))^(-1/3)) = .746254 */
             0x325F3CE3u}, /* LO((2^1*(1+6/32+1/64))^(-1/3)) = 1.299415e-08 */
            {0x3F3D6A3Au,  /* HI((2^1*(1+7/32+1/64))^(-1/3)) = .739902 */
             0x32BE6A60u}, /* LO((2^1*(1+7/32+1/64))^(-1/3)) = 2.216729e-08 */
            {0x3F3BD7CDu,  /* HI((2^1*(1+8/32+1/64))^(-1/3)) = .733762 */
             0x311BA3C5u}, /* LO((2^1*(1+8/32+1/64))^(-1/3)) = 2.264856e-09 */
            {0x3F3A5268u,  /* HI((2^1*(1+9/32+1/64))^(-1/3)) = .72782  */
             0x332FDC7Du}, /* LO((2^1*(1+9/32+1/64))^(-1/3)) = 4.094590e-08 */
            {0x3F38D954u,  /* HI((2^1*(1+10/32+1/64))^(-1/3)) = .722066 */
             0x3324D13Bu}, /* LO((2^1*(1+10/32+1/64))^(-1/3)) = 3.837452e-08 */
            {0x3F376BE6u,  /* HI((2^1*(1+11/32+1/64))^(-1/3)) = .71649  */
             0x32FE0642u}, /* LO((2^1*(1+11/32+1/64))^(-1/3)) = 2.957234e-08 */
            {0x3F360980u,  /* HI((2^1*(1+12/32+1/64))^(-1/3)) = .711082 */
             0x3331C83Au}, /* LO((2^1*(1+12/32+1/64))^(-1/3)) = 4.139313e-08 */
            {0x3F34B191u,  /* HI((2^1*(1+13/32+1/64))^(-1/3)) = .705834 */
             0x32A2D12Du}, /* LO((2^1*(1+13/32+1/64))^(-1/3)) = 1.895440e-08 */
            {0x3F336390u,  /* HI((2^1*(1+14/32+1/64))^(-1/3)) = .700738 */
             0x337BA72Du}, /* LO((2^1*(1+14/32+1/64))^(-1/3)) = 5.859254e-08 */
            {0x3F321F01u,  /* HI((2^1*(1+15/32+1/64))^(-1/3)) = .695786 */
             0x335FE5C7u}, /* LO((2^1*(1+15/32+1/64))^(-1/3)) = 5.213022e-08 */
            {0x3F30E36Eu,  /* HI((2^1*(1+16/32+1/64))^(-1/3)) = .69097  */
             0x3362BBE9u}, /* LO((2^1*(1+16/32+1/64))^(-1/3)) = 5.279063e-08 */
            {0x3F2FB06Au,  /* HI((2^1*(1+17/32+1/64))^(-1/3)) = .686286 */
             0x33597753u}, /* LO((2^1*(1+17/32+1/64))^(-1/3)) = 5.063277e-08 */
            {0x3F2E858Fu,  /* HI((2^1*(1+18/32+1/64))^(-1/3)) = .681725 */
             0x335A8138u}, /* LO((2^1*(1+18/32+1/64))^(-1/3)) = 5.087460e-08 */
            {0x3F2D627Eu,  /* HI((2^1*(1+19/32+1/64))^(-1/3)) = .677284 */
             0x332011EEu}, /* LO((2^1*(1+19/32+1/64))^(-1/3)) = 3.726921e-08 */
            {0x3F2C46DDu,  /* HI((2^1*(1+20/32+1/64))^(-1/3)) = .672956 */
             0x337AFA18u}, /* LO((2^1*(1+20/32+1/64))^(-1/3)) = 5.843512e-08 */
            {0x3F2B325Au,  /* HI((2^1*(1+21/32+1/64))^(-1/3)) = .668737 */
             0x32A72D56u}, /* LO((2^1*(1+21/32+1/64))^(-1/3)) = 1.946197e-08 */
            {0x3F2A24A5u,  /* HI((2^1*(1+22/32+1/64))^(-1/3)) = .664622 */
             0x325D1F0Bu}, /* LO((2^1*(1+22/32+1/64))^(-1/3)) = 1.287095e-08 */
            {0x3F291D74u,  /* HI((2^1*(1+23/32+1/64))^(-1/3)) = .660606 */
             0x3370FA73u}, /* LO((2^1*(1+23/32+1/64))^(-1/3)) = 5.610714e-08 */
            {0x3F281C84u,  /* HI((2^1*(1+24/32+1/64))^(-1/3)) = .656685 */
             0x322E17A4u}, /* LO((2^1*(1+24/32+1/64))^(-1/3)) = 1.013351e-08 */
            {0x3F272191u,  /* HI((2^1*(1+25/32+1/64))^(-1/3)) = .652856 */
             0x331CC528u}, /* LO((2^1*(1+25/32+1/64))^(-1/3)) = 3.650089e-08 */
            {0x3F262C5Fu,  /* HI((2^1*(1+26/32+1/64))^(-1/3)) = .649115 */
             0x333879CFu}, /* LO((2^1*(1+26/32+1/64))^(-1/3)) = 4.295162e-08 */
            {0x3F253CB4u,  /* HI((2^1*(1+27/32+1/64))^(-1/3)) = .645458 */
             0x32D4451Du}, /* LO((2^1*(1+27/32+1/64))^(-1/3)) = 2.471148e-08 */
            {0x3F245258u,  /* HI((2^1*(1+28/32+1/64))^(-1/3)) = .641881 */
             0x335509F0u}, /* LO((2^1*(1+28/32+1/64))^(-1/3)) = 4.960196e-08 */
            {0x3F236D19u,  /* HI((2^1*(1+29/32+1/64))^(-1/3)) = .638383 */
             0x31CF4437u}, /* LO((2^1*(1+29/32+1/64))^(-1/3)) = 6.032248e-09 */
            {0x3F228CC4u,  /* HI((2^1*(1+30/32+1/64))^(-1/3)) = .63496  */
             0x320624A0u}, /* LO((2^1*(1+30/32+1/64))^(-1/3)) = 7.808154e-09 */
            {0x3F21B12Bu,  /* HI((2^1*(1+31/32+1/64))^(-1/3)) = .63161  */
             0x32D7DD13u}, /* LO((2^1*(1+31/32+1/64))^(-1/3)) = 2.512983e-08 */
            {0x3F207047u,  /* HI((2^2*(1+0/32+1/64))^(-1/3)) = .626713 */
             0x33087541u}, /* LO((2^2*(1+0/32+1/64))^(-1/3)) = 3.177161e-08 */
            {0x3F1ED376u,  /* HI((2^2*(1+1/32+1/64))^(-1/3)) = .620414 */
             0x337A5C83u}, /* LO((2^2*(1+1/32+1/64))^(-1/3)) = 5.829180e-08 */
            {0x3F1D46C3u,  /* HI((2^2*(1+2/32+1/64))^(-1/3)) = .614361 */
             0x3019DFC6u}, /* LO((2^2*(1+2/32+1/64))^(-1/3)) = 5.597908e-10 */
            {0x3F1BC919u,  /* HI((2^2*(1+3/32+1/64))^(-1/3)) = .608537 */
             0x336A66A1u}, /* LO((2^2*(1+3/32+1/64))^(-1/3)) = 5.457571e-08 */
            {0x3F1A5983u,  /* HI((2^2*(1+4/32+1/64))^(-1/3)) = .602928 */
             0x325DFA6Du}, /* LO((2^2*(1+4/32+1/64))^(-1/3)) = 1.292083e-08 */
            {0x3F18F71Cu,  /* HI((2^2*(1+5/32+1/64))^(-1/3)) = .597521 */
             0x3338E15Bu}, /* LO((2^2*(1+5/32+1/64))^(-1/3)) = 4.304580e-08 */
            {0x3F17A117u,  /* HI((2^2*(1+6/32+1/64))^(-1/3)) = .592302 */
             0x337FD0F5u}, /* LO((2^2*(1+6/32+1/64))^(-1/3)) = 5.956186e-08 */
            {0x3F1656B8u,  /* HI((2^2*(1+7/32+1/64))^(-1/3)) = .587261 */
             0x323F92F5u}, /* LO((2^2*(1+7/32+1/64))^(-1/3)) = 1.115108e-08 */
            {0x3F151750u,  /* HI((2^2*(1+8/32+1/64))^(-1/3)) = .582387 */
             0x31CD281Fu}, /* LO((2^2*(1+8/32+1/64))^(-1/3)) = 5.970846e-09 */
            {0x3F13E240u,  /* HI((2^2*(1+9/32+1/64))^(-1/3)) = .577671 */
             0x33140CE1u}, /* LO((2^2*(1+9/32+1/64))^(-1/3)) = 3.447065e-08 */
            {0x3F12B6F7u,  /* HI((2^2*(1+10/32+1/64))^(-1/3)) = .573104 */
             0x3137EFEAu}, /* LO((2^2*(1+10/32+1/64))^(-1/3)) = 2.676638e-09 */
            {0x3F1194ECu,  /* HI((2^2*(1+11/32+1/64))^(-1/3)) = .568679 */
             0x32795577u}, /* LO((2^2*(1+11/32+1/64))^(-1/3)) = 1.451314e-08 */
            {0x3F107BA3u,  /* HI((2^2*(1+12/32+1/64))^(-1/3)) = .564387 */
             0x32020615u}, /* LO((2^2*(1+12/32+1/64))^(-1/3)) = 7.568379e-09 */
            {0x3F0F6AA7u,  /* HI((2^2*(1+13/32+1/64))^(-1/3)) = .560221 */
             0x3360C294u}, /* LO((2^2*(1+13/32+1/64))^(-1/3)) = 5.233103e-08 */
            {0x3F0E618Fu,  /* HI((2^2*(1+14/32+1/64))^(-1/3)) = .556176 */
             0x312D5739u}, /* LO((2^2*(1+14/32+1/64))^(-1/3)) = 2.522439e-09 */
            {0x3F0D5FF4u,  /* HI((2^2*(1+15/32+1/64))^(-1/3)) = .552245 */
             0x3342BAE4u}, /* LO((2^2*(1+15/32+1/64))^(-1/3)) = 4.533912e-08 */
            {0x3F0C657Cu,  /* HI((2^2*(1+16/32+1/64))^(-1/3)) = .548424 */
             0x31AE36E9u}, /* LO((2^2*(1+16/32+1/64))^(-1/3)) = 5.070309e-09 */
            {0x3F0B71CEu,  /* HI((2^2*(1+17/32+1/64))^(-1/3)) = .544705 */
             0x32BD5547u}, /* LO((2^2*(1+17/32+1/64))^(-1/3)) = 2.204128e-08 */
            {0x3F0A849Au,  /* HI((2^2*(1+18/32+1/64))^(-1/3)) = .541086 */
             0x333A1427u}, /* LO((2^2*(1+18/32+1/64))^(-1/3)) = 4.332483e-08 */
            {0x3F099D95u,  /* HI((2^2*(1+19/32+1/64))^(-1/3)) = .537561 */
             0x3309D507u}, /* LO((2^2*(1+19/32+1/64))^(-1/3)) = 3.209155e-08 */
            {0x3F08BC78u,  /* HI((2^2*(1+20/32+1/64))^(-1/3)) = .534126 */
             0x3099B429u}, /* LO((2^2*(1+20/32+1/64))^(-1/3)) = 1.118342e-09 */
            {0x3F07E0FFu,  /* HI((2^2*(1+21/32+1/64))^(-1/3)) = .530777 */
             0x335216C8u}, /* LO((2^2*(1+21/32+1/64))^(-1/3)) = 4.891515e-08 */
            {0x3F070AEEu,  /* HI((2^2*(1+22/32+1/64))^(-1/3)) = .527511 */
             0x332E1985u}, /* LO((2^2*(1+22/32+1/64))^(-1/3)) = 4.053574e-08 */
            {0x3F063A0Au,  /* HI((2^2*(1+23/32+1/64))^(-1/3)) = .524323 */
             0x31C38816u}, /* LO((2^2*(1+23/32+1/64))^(-1/3)) = 5.690718e-09 */
            {0x3F056E1Bu,  /* HI((2^2*(1+24/32+1/64))^(-1/3)) = .521211 */
             0x31198D91u}, /* LO((2^2*(1+24/32+1/64))^(-1/3)) = 2.234490e-09 */
            {0x3F04A6EDu,  /* HI((2^2*(1+25/32+1/64))^(-1/3)) = .518172 */
             0x332F8A90u}, /* LO((2^2*(1+25/32+1/64))^(-1/3)) = 4.087139e-08 */
            {0x3F03E451u,  /* HI((2^2*(1+26/32+1/64))^(-1/3)) = .515203 */
             0x32422403u}, /* LO((2^2*(1+26/32+1/64))^(-1/3)) = 1.130047e-08 */
            {0x3F032617u,  /* HI((2^2*(1+27/32+1/64))^(-1/3)) = .5123   */
             0x32E6E07Cu}, /* LO((2^2*(1+27/32+1/64))^(-1/3)) = 2.687761e-08 */
            {0x3F026C14u,  /* HI((2^2*(1+28/32+1/64))^(-1/3)) = .509462 */
             0x336CF553u}, /* LO((2^2*(1+28/32+1/64))^(-1/3)) = 5.517115e-08 */
            {0x3F01B620u,  /* HI((2^2*(1+29/32+1/64))^(-1/3)) = .506685 */
             0x32E2A5E3u}, /* LO((2^2*(1+29/32+1/64))^(-1/3)) = 2.638530e-08 */
            {0x3F010413u,  /* HI((2^2*(1+30/32+1/64))^(-1/3)) = .503968 */
             0x311EFA9Eu}, /* LO((2^2*(1+30/32+1/64))^(-1/3)) = 2.313449e-09 */
            {0x3F0055C7u,  /* HI((2^2*(1+31/32+1/64))^(-1/3)) = .501309 */
             0x334E979Cu}, /* LO((2^2*(1+31/32+1/64))^(-1/3)) = 4.810100e-08 */
        },
        0x3E137D5Eu, /* _sP4 */
        0xBE30FCD7u, /* _sP3 */
        0x3E638E39u, /* _sP2 */
        0xBEAAAAABu, /* _sP1 */
        0x007fffffu, /* _sMantissaMask (EXP_MSK3) */
        0x007e0000u, /* _sMantissaMask1 (SIG_MASK) */
        0xBF800000u, /* _sExpMask  (EXP_MASK) */
        0xBF820000u, /* _sExpMask1 (EXP_MASK2) */
        0x0000007cu, /* _iRcpIndexMask */
        0x000000ffu, /* _iBExpMask */
        0x00000100u, /* _iSignMask */
        0x000000A9u, /* _iBias */
        0x00000001u, /* _iOne */
        0x00000555u, /* _i555 */
        0x7fffffffu, /* _iAbsMask */
        0x80800000u, /* _iSubConst */
        0xFEFFFFFFu, /* _iCmpConst */
        {
            0x3f800000u,
            0x3f4b2ff5u,
            0x3f214518u,
            0x00000000u,
            0x00000000u,
            0x00000000u,
            0x00000000u,
            0x00000000u,
            0x00000000u,
            0x00000000u,
            0x00000000u,
            0x00000000u,
            0x00000000u,
            0x00000000u,
            0x00000000u,
            0x00000000u,
        },
        {
            0x00000000u,
            0x3227adc8u,
            0xb24e51afu,
            0x00000000u,
            0x00000000u,
            0x00000000u,
            0x00000000u,
            0x00000000u,
            0x00000000u,
            0x00000000u,
            0x00000000u,
            0x00000000u,
            0x00000000u,
            0x00000000u,
            0x00000000u,
            0x00000000u,
        },
        {
            0x3f4b2ff5u, 0x3f4f55cdu, 0x3f5352c7u, 0x3f572a9bu, 0x3f5ae07eu,
            0x3f5e7738u, 0x3f61f13au, 0x3f6550a8u, 0x3f689768u, 0x3f6bc72cu,
            0x3f6ee176u, 0x3f71e7a4u, 0x3f74daeeu, 0x3f77bc71u, 0x3f7a8d31u,
            0x3f7d4e19u, 0x3f800000u, 0x00000000u, 0x00000000u, 0x00000000u,
            0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,
            0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,
            0x00000000u, 0x00000000u,
        },
        {
            0x3227adc8u, 0xb286e387u, 0xb2aa1cf8u, 0xb1d3af2fu, 0xb1c04ecbu,
            0x32ebe7edu, 0x3213b6a7u, 0x30902099u, 0x32af1a28u, 0x31506098u,
            0x32f33e1bu, 0xb29abd43u, 0xb234fcecu, 0x32c12c62u, 0x2fdfa555u,
            0xb2c7a7aau, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,
            0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,
            0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u,
            0x00000000u, 0x00000000u,
        }
        /*== BiasL ==*/
        ,
        0x4b400000u
        /*== Zero ==*/
        ,
        0x80000000u
        /*== OneThird ==*/
        ,
        0xbeaaaaabu
        /*== Bias3 ==*/
        ,
        0x4a800000u
        /*== Three ==*/
        ,
        0x40400000u
        /*==One ==*/
        ,
        0x3f800000u
        /*== poly_coeff4 ==*/
        ,
        0x3e13a8e2u
        /*== poly_coeff3 ==*/
        ,
        0xbe3128d2u
        /*== poly_coeff2 ==*/
        ,
        0x3e638e35u
        /*== poly_coeff1 ==*/
        ,
        0xbeaaaaa9u};
static const union {
  uint32_t w;
  float f;
} __sinvcbrt_ha___c9 = {0xbde8ab54u};
static const union {
  uint32_t w;
  float f;
} __sinvcbrt_ha___c8 = {0x3df23fc9u};
static const union {
  uint32_t w;
  float f;
} __sinvcbrt_ha___c7 = {0xbdc6824eu};
static const union {
  uint32_t w;
  float f;
} __sinvcbrt_ha___c6 = {0x3dddb759u};
static const union {
  uint32_t w;
  float f;
} __sinvcbrt_ha___c5 = {0xbe000263u};
static const union {
  uint32_t w;
  float f;
} __sinvcbrt_ha___c4 = {0x3e139a3du};
static const union {
  uint32_t w;
  float f;
} __sinvcbrt_ha___c3 = {0xbe30fbd5u};
static const union {
  uint32_t w;
  float f;
} __sinvcbrt_ha___c2 = {0x3e638dd0u};
static const union {
  uint32_t w;
  float f;
} __sinvcbrt_ha___c1 = {0xbeaaaaabu};
static const union {
  uint32_t w;
  float f;
} __sinvcbrt_ha___c0 = {0x317089ffu};
// 2^(1/3) high, low
static const union {
  uint32_t w;
  float f;
} __sinvcbrt_ha___two13h = {0x3FA14518u};
static const union {
  uint32_t w;
  float f;
} __sinvcbrt_ha___two13l = {0xB2CE51AFu};
// 2^(2/3) high, low
static const union {
  uint32_t w;
  float f;
} __sinvcbrt_ha___two23h = {0x3FCB2FF5u};
static const union {
  uint32_t w;
  float f;
} __sinvcbrt_ha___two23l = {0x32A7ADC8u};
inline int __devicelib_imf_internal_sinvcbrt(const float *a, float *r) {
  int nRet = 0;
  float xin = *a;
  int_float x, expon, m, twoj3_h, twoj3_l, expon_res, nan_res, res;
  float sc_x, poly, lR;
  uint32_t sgn_x, sc_expon, iexpon, j;
  int32_t nan_mask;
  x.f = xin;
  sgn_x = x.w & 0x80000000;
  // absolute value
  x.w ^= sgn_x;
  sc_x = (x.f < 1.0f) ? (float)(1 << 26) : 1.0f;
  sc_expon = (x.f < 1.0f) ? (3 * 0x7f + 26) : (3 * 0x7f);
  // initial scaling (useful for denormals)
  x.f = __fma(x.f, sc_x, 0.0f);
  // extract exponent
  expon.w = ((x.w + 0x00555555) >> 23) - 0x7f;
  m.w = x.w - (expon.w << 23);
  lR = m.f - 1;
  expon.w = sc_expon - expon.w;
  // (2^15+1)/3*expon.w;   expon.w = 3*iexpon + j
  iexpon = expon.w * 0x2aab;
  iexpon >>= 15;
  j = expon.w - iexpon - iexpon - iexpon;
  // prepare exponent and sign
  expon_res.w = sgn_x | (iexpon << 23);
  // invcbrt(1+lR) - 1
  poly = __fma(lR, __sinvcbrt_ha___c9.f, __sinvcbrt_ha___c8.f);
  poly = __fma(poly, lR, __sinvcbrt_ha___c7.f);
  poly = __fma(poly, lR, __sinvcbrt_ha___c6.f);
  poly = __fma(poly, lR, __sinvcbrt_ha___c5.f);
  poly = __fma(poly, lR, __sinvcbrt_ha___c4.f);
  poly = __fma(poly, lR, __sinvcbrt_ha___c3.f);
  poly = __fma(poly, lR, __sinvcbrt_ha___c2.f);
  poly = __fma(poly, lR, __sinvcbrt_ha___c1.f);
  poly = __fma(poly, lR, __sinvcbrt_ha___c0.f);
  // 2^j/3
  twoj3_h.w = (!j) ? 0x3f800000 : __sinvcbrt_ha___two13h.w;
  twoj3_l.w = (!j) ? 0 : __sinvcbrt_ha___two13l.w;
  twoj3_h.w = (j == 2) ? __sinvcbrt_ha___two23h.w : twoj3_h.w;
  twoj3_l.w = (j == 2) ? __sinvcbrt_ha___two23l.w : twoj3_l.w;
  poly = __fma(poly, twoj3_h.f, twoj3_l.f);
  res.f = __fma(poly, 1.0f, twoj3_h.f);
  // Incorporate sign and exponent; fixup for NaN here as well
  nan_mask = (0x7f800000 - x.w);
  nan_mask >>= 31;
  nan_res.w = x.w & nan_mask;
  res.f = __fma(res.f, expon_res.f, nan_res.f);
  // Fixup for +/-Inf, +/-0, NaN
  res.w = (x.f == 0.0f) ? (sgn_x | 0x7f800000) : res.w;
  nRet = (x.f == 0.0f) ? 2 : nRet;
  res.w = (x.w == 0x7f800000) ? sgn_x : res.w;
  *r = res.f;
  return nRet;
}
} /* namespace */
} /* namespace __imf_impl_invcbrt_s_ha */

DEVICE_EXTERN_C_INLINE float __devicelib_imf_rcbrtf(float a) {
  using namespace __imf_impl_invcbrt_s_ha;
  float r;
  __devicelib_imf_internal_sinvcbrt(&a, &r);
  return r;
}
#endif /*__LIBDEVICE_IMF_ENABLED__*/
