# Copyright (c) 2010-2013 Intel Corporation
# All rights reserved.
# 
# WARRANTY DISCLAIMER
# 
# THESE MATERIALS ARE PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL INTEL OR ITS
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THESE
# MATERIALS, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# Intel Corporation is the author of the Materials, and requests that all
# problem reports or change requests be submitted to it directly
#
# Intel(R) OpenCL(TM) Configuration File
# =======================================================================
#
# Typical usage
# -------------
# 
# Given a configuration file "cl.cfg":
#   items  = 25
#   length = 8.0  # nanometers
#   name = Uri Levy
# 
# Named values are read in various ways, with or without default values:
#   ConfigFile config( "settings.cfg" );
#   int items = config.read<int>( "atoms" );
#   double length = config.read( "length", 10.0 );
#   string author, title;
#   config.readInto( author, "name" );
#   config.readInto( title, "title", string("Untitled") );
#
# Parameters:
# -----------
# CL_CONFIG_LOG_FILE [string] - set the full path of the log file
# CL_CONFIG_USE_LOGGER [bool] - determine if the logger is active or not
# CL_CONFIG_DEVICES [string1; string2, string3 | string4 ...] - list of available devices. 
#                              First device is a default device.
# CL_CONFIG_USE_ITT_API           [bool] - determine whether GPA/ITT traces collection is active or not
# CL_CONFIG_USE_VECTORIZER        [bool] - determine whether auto-vectorization module is active or not
# CL_CONFIG_USE_VTUNE             [bool] - determine whether VTune AmplifierXE instrumentation is active or not
# CL_CONFIG_USE_TRAPPING          [bool] - determine whether CPU workers trapping is active or not
# CL_CONFIG_USE_FAST_RELAXED_MATH [bool] - determine whether build kernels with -cl-fast-relaxed-math option
#
# CL_CONFIG_CPU_FORCE_GLOBAL_MEM_SIZE [size with units] -
#       examples: 2GB, 512MB, 65536KB, 16777216B
#       force CPU to work with specified global memory size, this will also affect max memory 
#           allocation size unless CL_CONFIG_CPU_FORCE_MAX_MEM_ALLOC_SIZE is used too
#
# CL_CONFIG_CPU_FORCE_MAX_MEM_ALLOC_SIZE [size with units] -
#       examples: 2GB, 512MB, 65536KB, 16777216B
#       force CPU to work with specified max memory allocation size.
#
# CL_CONFIG_CPU_VECTORIZER_MODE [mode]
#       Control vectorization mode of the CPU compiler. Applies only then CL_CONFIG_USE_VECTORIZER = True.
#       0: (default) Automonous vectorization. The compiler makes heuristic decisions whether to vectorize
#          each kernel, and if so to what vector length.
#       1: No compiler vectorization. Explicit kernel vector data types are left intact.
#          The same as if CL_CONFIG_USE_VECTORIZER = False.
#       4: Disable heuristic and force vectorization to length 4
#       8: Disable heuristic and force vectorization to length 8
#       NOTE: Some kernels do not support vectorization from functional aspect. Such kernels cannot be vectorized in any mode.
#
# CL_CONFIG_CPU_RT_LOOP_UNROLL_FACTOR [factor]
#       Control loop unrolling of loops with non-constant trip count. Out of bounds values are clamped to [1, 16].
#       examples: 1, 2, 3, 16
#       1: no RT unrolling (default)
#       [2, 16]: unrolling factor
#
#
# CL_CONFIG_GL_DIRECTX_INTEROP   [bool] - determine whether cl gl sharing and directX extensions are supported.


#CL_CONFIG_LOG_FILE = C:\cl.log

CL_CONFIG_USE_LOGGER = False

#CL_CONFIG_USER_LOGGER = stderr

#CL_CONFIG_DEVICES = cpu_device; mic_device

CL_CONFIG_USE_ITT_API = False
CL_CONFIG_USE_VECTORIZER = True
CL_CONFIG_USE_VTUNE = False
CL_CONFIG_USE_TRAPPING = False
CL_CONFIG_USE_FAST_RELAXED_MATH = False

CL_GPA_CONFIG_ENABLE_API_TRACING = False
CL_GPA_CONFIG_ENABLE_CONTEXT_TRACING = True

CL_GPA_CONFIG_SHOW_QUEUED_MARKER = True
CL_GPA_CONFIG_SHOW_SUBMITTED_MARKER = False
CL_GPA_CONFIG_SHOW_RUNNING_MARKER = False
CL_GPA_CONFIG_SHOW_COMPLETED_MARKER = True

#CL_CONFIG_CPU_FORCE_GLOBAL_MEM_SIZE = 256MB
#CL_CONFIG_CPU_FORCE_MAX_MEM_ALLOC_SIZE = 128MB
#CL_CONFIG_CPU_VECTORIZER_MODE = 0
#CL_CONFIG_CPU_RT_LOOP_UNROLL_FACTOR = 1
#CL_CONFIG_GL_DIRECTX_INTEROP = True
