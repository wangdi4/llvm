#
# Create native MIC server using icc compiler
#
get_filename_component( TARGET_NAME ${MIC_NATIVE_SERVER_EXE} NAME_WE )

get_filename_component( EXE_FILE_EXTENSION ${MIC_NATIVE_SERVER_EXE} EXT )
set( BIN_DIR ${CMAKE_CURRENT_BINARY_DIR}/${INSTALL_SUBDIR} )
set( OBJ_FILE_EXTENSION .o )

set( DEVICE   MIC )

#
# Set Backend dependencies
#
set( BACKEND_LIB            OclDeviceExecutor )
set( BACKEND_LIB_DIR        ${OCL_BINARY_DIR}/lib/${CMAKE_CFG_INTDIR})
set( BACKEND_SVML_DIR       ${CMAKE_CURRENT_SOURCE_DIR}/../../../backend/libraries/ocl_builtins/bin/svml/Linux64 )

if (KNC_CARD)
        set( BACKEND_VTUNE_DIR 		 -L ${CMAKE_CURRENT_SOURCE_DIR}/../../../backend/external/vtune/libknc )
        set( VTUNE_PROFILING_LIB     -ljitprofiling)  
	set( BACKEND_FILES_TO_COPY
								${BACKEND_SVML_DIR}/__ocl_svml_b2.so.3.0
								)
else (KNC_CARD)
        set( BACKEND_VTUNE_DIR   )
        set( VTUNE_PROFILING_LIB )  
	set( BACKEND_FILES_TO_COPY
								${BACKEND_SVML_DIR}/__ocl_svml_b1.so
								)
endif (KNC_CARD)								

if (WIN32)
    # Windows
    message( WARNING "MIC native server creation is not supported on Windows yet!")
else ()
    # Linux
    set( TMP_ICC_INSTALL_DIR $ENV{ICC_MIC_COMPILER_PATH} )

    if (NOT TMP_ICC_INSTALL_DIR)
		if (KNC_CARD)
			set( SUITABLE_ICC_INSTALL_DIR /opt/intel/composerxe/bin )
		else (KNC_CARD)
			set( SUITABLE_ICC_INSTALL_DIR /opt/intel/composerxe_mic/bin )
		endif (KNC_CARD)
        if (EXISTS ${SUITABLE_ICC_INSTALL_DIR})
            set( TMP_ICC_INSTALL_DIR ${SUITABLE_ICC_INSTALL_DIR} )
        endif ()
    endif (NOT TMP_ICC_INSTALL_DIR)
	
	set( MIC_TBB_PATH ${TMP_ICC_INSTALL_DIR}/../tbb )
	set( MIC_TBB_HEADERS_PATH ${MIC_TBB_PATH}/include )
	set( MIC_TBB_LIB_PATH ${MIC_TBB_PATH}/lib/mic )

    if (TMP_ICC_INSTALL_DIR)
        # if environment ICC_INSTALL_DIR is set
        set( DEVICE_INIT_ENV_SCRIPT "${TMP_ICC_INSTALL_DIR}/compilervars.sh" )
        message(STATUS "MIC C COMPILER: ${TMP_ICC_INSTALL_DIR}" )
    else ()
        message( FATAL_ERROR "ICC is not found! Setenv ICC_MIC_COMPILER_PATH to point to the ICC with MIC support" )
    endif (TMP_ICC_INSTALL_DIR)
    unset( TMP_ICC_INSTALL_DIR )

    set( DEVICE_COMPILER_SCRIPT compile.sh )
    set( DEVICE_LINKER_SCRIPT   link.sh )

    set( DEVICE_COMPILER ${BIN_DIR}/${DEVICE_COMPILER_SCRIPT} )
    set( DEVICE_LINKER   ${BIN_DIR}/${DEVICE_LINKER_SCRIPT} )
endif (WIN32)

#
# Check for file/dir existence
#    check_file(FILE)
#
function (check_file FILE )
    if (NOT EXISTS ${FILE})
        message( FATAL_ERROR "Cannot find ${FILE}!")
    endif()
endfunction( check_file )

#
# Usage
#     COMPILE_DEVICE_CXX_FILE( <cxx_file_full_path_name> <obj_file_full_path_name>)
#
function ( COMPILE_DEVICE_CXX_FILE FILE_FULL_PATH_NAME OBJ_FILE )
    get_filename_component( FILE_NAME ${FILE_FULL_PATH_NAME} NAME )

    add_custom_command( OUTPUT ${OBJ_FILE}

                        COMMAND ${CMAKE_COMMAND} -E make_directory ${BIN_DIR}
                        COMMAND ${DEVICE_COMPILER} ${FILE_FULL_PATH_NAME} ${OBJ_FILE}

                        MAIN_DEPENDENCY ${FILE_FULL_PATH_NAME}
                        IMPLICIT_DEPENDS CXX
                        DEPENDS ${BIN_DIR}/${DEVICE_COMPILER_SCRIPT}
                        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
                        COMMENT "Compiling ${FILE_NAME} for ${DEVICE}"
                        VERBATIM
                        )

endfunction ( COMPILE_DEVICE_CXX_FILE )

#
# Usage
#     LINK_DEVICE_EXE( <full_path_to_target_exe> <full_path_to_obj>.... )
#
function ( LINK_DEVICE_EXE TARGET_EXE )
    get_filename_component( FILE_NAME ${TARGET_EXE} NAME )

    if (${ARGC} GREATER  1)
        set( OBJ_FILES ${ARGN})

        add_custom_command( OUTPUT ${TARGET_EXE}

                            COMMAND ${CMAKE_COMMAND} -E make_directory ${BIN_DIR}
                            COMMAND ${DEVICE_LINKER} ${TARGET_EXE} ${OBJ_FILES}

                            DEPENDS  ${OBJ_FILES} ${BIN_DIR}/${DEVICE_LINKER_SCRIPT} ${BACKEND_LIB_DIR}/lib${BACKEND_LIB}.a
                            WORKING_DIRECTORY ${BIN_DIR}
                            COMMENT "Linking ${FILE_NAME} for ${DEVICE}"
                            VERBATIM
                            )
    endif (${ARGC} GREATER 1)

endfunction ( LINK_DEVICE_EXE )


#
# Usage
#     add_device_executable( <target_name> <input_cxx_files>.... )
#
function ( add_device_executable TARGET_NAME )

    set( EXE_FILE ${CMAKE_CURRENT_BINARY_DIR}/${TARGET_NAME}${EXE_FILE_EXTENSION} )
    set( OBJ_LIST )

    if (${ARGC} GREATER  1)
        foreach( FILE ${ARGN} )
            set( SRC_FILE ${CMAKE_CURRENT_SOURCE_DIR}/${FILE} )

            get_filename_component( FILE_NAME ${FILE} NAME_WE )
            set( OBJ_FILE ${CMAKE_CURRENT_BINARY_DIR}/${FILE_NAME}${OBJ_FILE_EXTENSION} )

            COMPILE_DEVICE_CXX_FILE( ${SRC_FILE} ${OBJ_FILE} )
            list( APPEND OBJ_LIST ${OBJ_FILE} )
        endforeach( FILE )

        LINK_DEVICE_EXE( ${EXE_FILE} ${OBJ_LIST} )

        add_custom_target( ${TARGET_NAME} ALL DEPENDS ${EXE_FILE} )
    else ()
        message( FATAL_ERROR "No input files specified for ${TARGET_NAME}" )
    endif (${ARGC} GREATER 1)

endfunction ( add_device_executable )


#################################################################################################

#check_file(${DEVICE_INIT_ENV_SCRIPT})
check_file(${CMAKE_CURRENT_SOURCE_DIR}/${DEVICE_COMPILER_SCRIPT})
check_file(${CMAKE_CURRENT_SOURCE_DIR}/${DEVICE_LINKER_SCRIPT})

# substitute vars in the scripts
if (NOT EXISTS ${BIN_DIR})
        file(MAKE_DIRECTORY "${BIN_DIR}")
endif()

# MIC compilation flags
set( MIC_FLAGS  -Werror
                # -std=c++0x
                # next entry - support converting Linux trap signals into C++ exceptions
                -fnon-call-exceptions
                -fstack-security-check
                -use-msasm
                -mCG_lrb_rex_workaround=F
                -mCG_insert_nops_between_gathers_scatters=F
                -mCG_lrb_vgather_b2b_warns=F
                -mCG_lrb_workaround_vgather_vscatter_pairing=F
                -mCG_lrb_dp_workaround=F
                -sox
                -openmp
            )

set( MIC_DEBUG_FLAGS    -g -O0 -D_DEBUG -DDEBUG )
set( MIC_RELEASE_FLAGS     -O3 -DNDEBUG )

# inlcude path
list( APPEND MIC_FLAGS
                -I ${CMAKE_CURRENT_SOURCE_DIR}
                -I ${CMAKE_CURRENT_SOURCE_DIR}/../
                -I ${OCL_SOURCE_DIR}/utils/cl_sys_utils/export
                -I ${OCL_SOURCE_DIR}/cl_api
                -I ${MIC_TBB_HEADERS_PATH}
                -I ${COI_SDK_PATH}/include
                )

list( APPEND MIC_FLAGS
                -DDEVICE_NATIVE
    )

list( APPEND MIC_FLAGS -DKNC_CARD )

if ( MIC_TESTING_MODE )
    list( APPEND MIC_FLAGS
                -DNDRANGE_UNIT_TEST
                    )
endif ( MIC_TESTING_MODE )

if ( ENABLE_MIC_TRACER )
    list( APPEND MIC_FLAGS
                -DENABLE_MIC_TRACER
                    )
endif ( ENABLE_MIC_TRACER )

option( ENABLE_MIC_TBB_TRACER OFF )
if ( ENABLE_MIC_TBB_TRACER )
    list( APPEND MIC_FLAGS
                -DENABLE_MIC_TBB_TRACER
                    )
endif( ENABLE_MIC_TBB_TRACER )


if (${CMAKE_BUILD_TYPE} STREQUAL Debug)
    set( TBB_LIBS_TO_LINK tbb_debug )
else (${CMAKE_BUILD_TYPE} STREQUAL Debug)
    set( TBB_LIBS_TO_LINK tbb )
endif (${CMAKE_BUILD_TYPE} STREQUAL Debug)

# MIC linking flags
set( MIC_LINK_FLAGS      )

# lib path
list( APPEND MIC_LINK_FLAGS
                -openmp

                # next entry - support converting Linux trap signals into C++ exceptions
                -fnon-call-exceptions

                # library search path at link
                -L ${COI_SDK_PATH}/device-linux-${DEBUG_RELEASE}/lib
                -L ${BACKEND_LIB_DIR}
                -L ${MIC_TBB_LIB_PATH}
                ${BACKEND_VTUNE_DIR}

                # libs to link
                -lcoi_device
                -l${BACKEND_LIB}
                -l${TBB_LIBS_TO_LINK}
                ${VTUNE_PROFILING_LIB}
                -lpthread

                # add unused defined symbols to the dynamic symbol table - they will be used dynamically
                -rdynamic

                # perform static linkage for internally defined symbols if possible
                -Bsymbolic

                # statically link all intel-specific libs
                -static-intel

                # hide all defined symbols from the loader, except specified in the file
                -Wl,--version-script=${CMAKE_CURRENT_SOURCE_DIR}/MicNative_linux_exports.txt

                # look for required shared libs in the same dir as exe resides
                #  \\\$ will result in passing \$ to the linker script
                -Wl,-rpath=\\\$ORIGIN -Wl,--enable-new-dtags
                )

set( MIC_DEBUG_LINK_FLAGS     )
set( MIC_RELEASE_LINK_FLAGS   )

if (${CMAKE_BUILD_TYPE} STREQUAL Debug)
    # Debug

    list( APPEND MIC_FLAGS      ${MIC_DEBUG_FLAGS} )
    list( APPEND MIC_LINK_FLAGS ${MIC_DEBUG_LINK_FLAGS} )

else ()
    # Release

    list( APPEND MIC_FLAGS      ${MIC_RELEASE_FLAGS} )
    list( APPEND MIC_LINK_FLAGS ${MIC_RELEASE_LINK_FLAGS} )

endif (${CMAKE_BUILD_TYPE} STREQUAL Debug)

# replace ; with spaces
foreach (FLAG ${MIC_FLAGS})
    set( FINAL_MIC_FLAGS "${FINAL_MIC_FLAGS} ${FLAG}")
endforeach( FLAG )

foreach (FLAG ${MIC_LINK_FLAGS})
    set( FINAL_MIC_LINK_FLAGS "${FINAL_MIC_LINK_FLAGS} ${FLAG}")
endforeach( FLAG )

# FINAL_MIC_FLAGS and FINAL_MIC_LINK_FLAGS are used now
configure_file(${DEVICE_COMPILER_SCRIPT} ${BIN_DIR}/${DEVICE_COMPILER_SCRIPT} @ONLY)
configure_file(${DEVICE_LINKER_SCRIPT} ${BIN_DIR}/${DEVICE_LINKER_SCRIPT} @ONLY)

set(FILES_TO_COPY ${CMAKE_CURRENT_BINARY_DIR}/${TARGET_NAME}${EXE_FILE_EXTENSION} )

FIND_SOURCES()
list(APPEND SOURCE_FILES ../mic_tracer.cpp)
list(APPEND HEADER_FILES ../mic_tracer_counters.h ../mic_tracer.h)
CALCULATE_TARGET_SOURCES()

add_device_executable(${TARGET_NAME} ${TARGET_SOURCES})
install(PROGRAMS ${FILES_TO_COPY} ${BACKEND_FILES_TO_COPY} DESTINATION bin/${MIC_NATIVE_SUBDIR_NAME} )
add_dependencies( ${TARGET_NAME} ${BACKEND_LIB} )

file( GLOB MIC_TBB_LIBS_TO_COPY ${MIC_TBB_LIB_PATH}/*.so ${MIC_TBB_LIB_PATH}/*.so.2 )
install(FILES ${MIC_TBB_LIBS_TO_COPY} DESTINATION bin/${MIC_NATIVE_SUBDIR_NAME} )


