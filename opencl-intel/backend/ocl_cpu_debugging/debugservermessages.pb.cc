// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "debugservermessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace debugservermessages {

namespace {

const ::google::protobuf::Descriptor* ClientToServerMessage_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientToServerMessage_reflection_ = nullptr;
const ::google::protobuf::Descriptor* ClientToServerMessage_StartSessionMsg_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientToServerMessage_StartSessionMsg_reflection_ = nullptr;
const ::google::protobuf::Descriptor* ClientToServerMessage_RunMsg_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientToServerMessage_RunMsg_reflection_ = nullptr;
const ::google::protobuf::Descriptor* ClientToServerMessage_GetMemoryRangeMsg_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientToServerMessage_GetMemoryRangeMsg_reflection_ = nullptr;
const ::google::protobuf::EnumDescriptor* ClientToServerMessage_Type_descriptor_ = nullptr;
const ::google::protobuf::Descriptor* ServerToClientMessage_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerToClientMessage_reflection_ = nullptr;
const ::google::protobuf::Descriptor* ServerToClientMessage_CmdErrorMsg_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerToClientMessage_CmdErrorMsg_reflection_ = nullptr;
const ::google::protobuf::Descriptor* ServerToClientMessage_StartSessionAckMsg_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerToClientMessage_StartSessionAckMsg_reflection_ = nullptr;
const ::google::protobuf::Descriptor* ServerToClientMessage_VarInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerToClientMessage_VarInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* ServerToClientMessage_StackFrameInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerToClientMessage_StackFrameInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* ServerToClientMessage_BPHitMsg_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerToClientMessage_BPHitMsg_reflection_ = nullptr;
const ::google::protobuf::Descriptor* ServerToClientMessage_StackTraceInfoMsg_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerToClientMessage_StackTraceInfoMsg_reflection_ = nullptr;
const ::google::protobuf::Descriptor* ServerToClientMessage_MemoryRangeInfoMsg_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerToClientMessage_MemoryRangeInfoMsg_reflection_ = nullptr;
const ::google::protobuf::EnumDescriptor* ServerToClientMessage_Type_descriptor_ = nullptr;
const ::google::protobuf::Descriptor* LineInfo_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LineInfo_reflection_ = nullptr;
const ::google::protobuf::Descriptor* VarTypeDescriptor_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VarTypeDescriptor_reflection_ = nullptr;
const ::google::protobuf::EnumDescriptor* VarTypeDescriptor_Tag_descriptor_ = nullptr;
const ::google::protobuf::Descriptor* VarTypeBasic_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VarTypeBasic_reflection_ = nullptr;
const ::google::protobuf::EnumDescriptor* VarTypeBasic_Tag_descriptor_ = nullptr;
const ::google::protobuf::Descriptor* VarTypePointer_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VarTypePointer_reflection_ = nullptr;
const ::google::protobuf::Descriptor* VarTypeArray_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VarTypeArray_reflection_ = nullptr;
const ::google::protobuf::Descriptor* VarTypeEnum_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VarTypeEnum_reflection_ = nullptr;
const ::google::protobuf::Descriptor* VarTypeEnum_EnumEntry_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VarTypeEnum_EnumEntry_reflection_ = nullptr;
const ::google::protobuf::Descriptor* VarTypeStruct_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VarTypeStruct_reflection_ = nullptr;
const ::google::protobuf::Descriptor* VarTypeStruct_StructMember_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VarTypeStruct_StructMember_reflection_ = nullptr;
const ::google::protobuf::Descriptor* VarTypeVector_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VarTypeVector_reflection_ = nullptr;
const ::google::protobuf::Descriptor* VarTypeTypedef_descriptor_ = nullptr;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VarTypeTypedef_reflection_ = nullptr;

}  // namespace


void protobuf_AssignDesc_debugservermessages_2eproto() {
  protobuf_AddDesc_debugservermessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "debugservermessages.proto");
  GOOGLE_CHECK(file != nullptr);
  ClientToServerMessage_descriptor_ = file->message_type(0);
  static const int ClientToServerMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToServerMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToServerMessage, start_session_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToServerMessage, run_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToServerMessage, get_memory_range_msg_),
  };
  ClientToServerMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientToServerMessage_descriptor_,
      ClientToServerMessage::default_instance_,
      ClientToServerMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToServerMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToServerMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientToServerMessage));
  ClientToServerMessage_StartSessionMsg_descriptor_ = ClientToServerMessage_descriptor_->nested_type(0);
  static const int ClientToServerMessage_StartSessionMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToServerMessage_StartSessionMsg, global_id_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToServerMessage_StartSessionMsg, global_id_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToServerMessage_StartSessionMsg, global_id_z_),
  };
  ClientToServerMessage_StartSessionMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientToServerMessage_StartSessionMsg_descriptor_,
      ClientToServerMessage_StartSessionMsg::default_instance_,
      ClientToServerMessage_StartSessionMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToServerMessage_StartSessionMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToServerMessage_StartSessionMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientToServerMessage_StartSessionMsg));
  ClientToServerMessage_RunMsg_descriptor_ = ClientToServerMessage_descriptor_->nested_type(1);
  static const int ClientToServerMessage_RunMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToServerMessage_RunMsg, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToServerMessage_RunMsg, breakpoints_),
  };
  ClientToServerMessage_RunMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientToServerMessage_RunMsg_descriptor_,
      ClientToServerMessage_RunMsg::default_instance_,
      ClientToServerMessage_RunMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToServerMessage_RunMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToServerMessage_RunMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientToServerMessage_RunMsg));
  ClientToServerMessage_GetMemoryRangeMsg_descriptor_ = ClientToServerMessage_descriptor_->nested_type(2);
  static const int ClientToServerMessage_GetMemoryRangeMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToServerMessage_GetMemoryRangeMsg, start_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToServerMessage_GetMemoryRangeMsg, end_addr_),
  };
  ClientToServerMessage_GetMemoryRangeMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientToServerMessage_GetMemoryRangeMsg_descriptor_,
      ClientToServerMessage_GetMemoryRangeMsg::default_instance_,
      ClientToServerMessage_GetMemoryRangeMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToServerMessage_GetMemoryRangeMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToServerMessage_GetMemoryRangeMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientToServerMessage_GetMemoryRangeMsg));
  ClientToServerMessage_Type_descriptor_ = ClientToServerMessage_descriptor_->enum_type(0);
  ServerToClientMessage_descriptor_ = file->message_type(1);
  static const int ServerToClientMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage, cmd_error_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage, start_session_ack_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage, bphit_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage, stack_trace_info_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage, memory_range_info_msg_),
  };
  ServerToClientMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerToClientMessage_descriptor_,
      ServerToClientMessage::default_instance_,
      ServerToClientMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerToClientMessage));
  ServerToClientMessage_CmdErrorMsg_descriptor_ = ServerToClientMessage_descriptor_->nested_type(0);
  static const int ServerToClientMessage_CmdErrorMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage_CmdErrorMsg, description_),
  };
  ServerToClientMessage_CmdErrorMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerToClientMessage_CmdErrorMsg_descriptor_,
      ServerToClientMessage_CmdErrorMsg::default_instance_,
      ServerToClientMessage_CmdErrorMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage_CmdErrorMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage_CmdErrorMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerToClientMessage_CmdErrorMsg));
  ServerToClientMessage_StartSessionAckMsg_descriptor_ = ServerToClientMessage_descriptor_->nested_type(1);
  static const int ServerToClientMessage_StartSessionAckMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage_StartSessionAckMsg, sizeof_size_t_),
  };
  ServerToClientMessage_StartSessionAckMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerToClientMessage_StartSessionAckMsg_descriptor_,
      ServerToClientMessage_StartSessionAckMsg::default_instance_,
      ServerToClientMessage_StartSessionAckMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage_StartSessionAckMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage_StartSessionAckMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerToClientMessage_StartSessionAckMsg));
  ServerToClientMessage_VarInfo_descriptor_ = ServerToClientMessage_descriptor_->nested_type(2);
  static const int ServerToClientMessage_VarInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage_VarInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage_VarInfo, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage_VarInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage_VarInfo, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage_VarInfo, type_descriptor_),
  };
  ServerToClientMessage_VarInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerToClientMessage_VarInfo_descriptor_,
      ServerToClientMessage_VarInfo::default_instance_,
      ServerToClientMessage_VarInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage_VarInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage_VarInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerToClientMessage_VarInfo));
  ServerToClientMessage_StackFrameInfo_descriptor_ = ServerToClientMessage_descriptor_->nested_type(3);
  static const int ServerToClientMessage_StackFrameInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage_StackFrameInfo, func_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage_StackFrameInfo, call_line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage_StackFrameInfo, vars_),
  };
  ServerToClientMessage_StackFrameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerToClientMessage_StackFrameInfo_descriptor_,
      ServerToClientMessage_StackFrameInfo::default_instance_,
      ServerToClientMessage_StackFrameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage_StackFrameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage_StackFrameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerToClientMessage_StackFrameInfo));
  ServerToClientMessage_BPHitMsg_descriptor_ = ServerToClientMessage_descriptor_->nested_type(4);
  static const int ServerToClientMessage_BPHitMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage_BPHitMsg, breakpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage_BPHitMsg, vars_),
  };
  ServerToClientMessage_BPHitMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerToClientMessage_BPHitMsg_descriptor_,
      ServerToClientMessage_BPHitMsg::default_instance_,
      ServerToClientMessage_BPHitMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage_BPHitMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage_BPHitMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerToClientMessage_BPHitMsg));
  ServerToClientMessage_StackTraceInfoMsg_descriptor_ = ServerToClientMessage_descriptor_->nested_type(5);
  static const int ServerToClientMessage_StackTraceInfoMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage_StackTraceInfoMsg, frames_),
  };
  ServerToClientMessage_StackTraceInfoMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerToClientMessage_StackTraceInfoMsg_descriptor_,
      ServerToClientMessage_StackTraceInfoMsg::default_instance_,
      ServerToClientMessage_StackTraceInfoMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage_StackTraceInfoMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage_StackTraceInfoMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerToClientMessage_StackTraceInfoMsg));
  ServerToClientMessage_MemoryRangeInfoMsg_descriptor_ = ServerToClientMessage_descriptor_->nested_type(6);
  static const int ServerToClientMessage_MemoryRangeInfoMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage_MemoryRangeInfoMsg, buf_),
  };
  ServerToClientMessage_MemoryRangeInfoMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerToClientMessage_MemoryRangeInfoMsg_descriptor_,
      ServerToClientMessage_MemoryRangeInfoMsg::default_instance_,
      ServerToClientMessage_MemoryRangeInfoMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage_MemoryRangeInfoMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerToClientMessage_MemoryRangeInfoMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerToClientMessage_MemoryRangeInfoMsg));
  ServerToClientMessage_Type_descriptor_ = ServerToClientMessage_descriptor_->enum_type(0);
  LineInfo_descriptor_ = file->message_type(2);
  static const int LineInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineInfo, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineInfo, lineno_),
  };
  LineInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LineInfo_descriptor_,
      LineInfo::default_instance_,
      LineInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LineInfo));
  VarTypeDescriptor_descriptor_ = file->message_type(3);
  static const int VarTypeDescriptor_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeDescriptor, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeDescriptor, type_basic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeDescriptor, type_pointer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeDescriptor, type_array_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeDescriptor, type_vector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeDescriptor, type_typedef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeDescriptor, type_enum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeDescriptor, type_struct_),
  };
  VarTypeDescriptor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VarTypeDescriptor_descriptor_,
      VarTypeDescriptor::default_instance_,
      VarTypeDescriptor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeDescriptor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeDescriptor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VarTypeDescriptor));
  VarTypeDescriptor_Tag_descriptor_ = VarTypeDescriptor_descriptor_->enum_type(0);
  VarTypeBasic_descriptor_ = file->message_type(4);
  static const int VarTypeBasic_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeBasic, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeBasic, size_nbits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeBasic, name_),
  };
  VarTypeBasic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VarTypeBasic_descriptor_,
      VarTypeBasic::default_instance_,
      VarTypeBasic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeBasic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeBasic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VarTypeBasic));
  VarTypeBasic_Tag_descriptor_ = VarTypeBasic_descriptor_->enum_type(0);
  VarTypePointer_descriptor_ = file->message_type(5);
  static const int VarTypePointer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypePointer, pointee_),
  };
  VarTypePointer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VarTypePointer_descriptor_,
      VarTypePointer::default_instance_,
      VarTypePointer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypePointer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypePointer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VarTypePointer));
  VarTypeArray_descriptor_ = file->message_type(6);
  static const int VarTypeArray_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeArray, element_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeArray, dimensions_),
  };
  VarTypeArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VarTypeArray_descriptor_,
      VarTypeArray::default_instance_,
      VarTypeArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VarTypeArray));
  VarTypeEnum_descriptor_ = file->message_type(7);
  static const int VarTypeEnum_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeEnum, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeEnum, entries_),
  };
  VarTypeEnum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VarTypeEnum_descriptor_,
      VarTypeEnum::default_instance_,
      VarTypeEnum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeEnum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeEnum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VarTypeEnum));
  VarTypeEnum_EnumEntry_descriptor_ = VarTypeEnum_descriptor_->nested_type(0);
  static const int VarTypeEnum_EnumEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeEnum_EnumEntry, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeEnum_EnumEntry, value_),
  };
  VarTypeEnum_EnumEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VarTypeEnum_EnumEntry_descriptor_,
      VarTypeEnum_EnumEntry::default_instance_,
      VarTypeEnum_EnumEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeEnum_EnumEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeEnum_EnumEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VarTypeEnum_EnumEntry));
  VarTypeStruct_descriptor_ = file->message_type(8);
  static const int VarTypeStruct_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeStruct, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeStruct, members_),
  };
  VarTypeStruct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VarTypeStruct_descriptor_,
      VarTypeStruct::default_instance_,
      VarTypeStruct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeStruct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeStruct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VarTypeStruct));
  VarTypeStruct_StructMember_descriptor_ = VarTypeStruct_descriptor_->nested_type(0);
  static const int VarTypeStruct_StructMember_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeStruct_StructMember, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeStruct_StructMember, size_nbits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeStruct_StructMember, align_nbits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeStruct_StructMember, offset_nbits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeStruct_StructMember, type_),
  };
  VarTypeStruct_StructMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VarTypeStruct_StructMember_descriptor_,
      VarTypeStruct_StructMember::default_instance_,
      VarTypeStruct_StructMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeStruct_StructMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeStruct_StructMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VarTypeStruct_StructMember));
  VarTypeVector_descriptor_ = file->message_type(9);
  static const int VarTypeVector_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeVector, name_),
  };
  VarTypeVector_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VarTypeVector_descriptor_,
      VarTypeVector::default_instance_,
      VarTypeVector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeVector, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeVector, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VarTypeVector));
  VarTypeTypedef_descriptor_ = file->message_type(10);
  static const int VarTypeTypedef_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeTypedef, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeTypedef, original_type_),
  };
  VarTypeTypedef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VarTypeTypedef_descriptor_,
      VarTypeTypedef::default_instance_,
      VarTypeTypedef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeTypedef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarTypeTypedef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VarTypeTypedef));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_debugservermessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientToServerMessage_descriptor_, &ClientToServerMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientToServerMessage_StartSessionMsg_descriptor_, &ClientToServerMessage_StartSessionMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientToServerMessage_RunMsg_descriptor_, &ClientToServerMessage_RunMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientToServerMessage_GetMemoryRangeMsg_descriptor_, &ClientToServerMessage_GetMemoryRangeMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerToClientMessage_descriptor_, &ServerToClientMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerToClientMessage_CmdErrorMsg_descriptor_, &ServerToClientMessage_CmdErrorMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerToClientMessage_StartSessionAckMsg_descriptor_, &ServerToClientMessage_StartSessionAckMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerToClientMessage_VarInfo_descriptor_, &ServerToClientMessage_VarInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerToClientMessage_StackFrameInfo_descriptor_, &ServerToClientMessage_StackFrameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerToClientMessage_BPHitMsg_descriptor_, &ServerToClientMessage_BPHitMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerToClientMessage_StackTraceInfoMsg_descriptor_, &ServerToClientMessage_StackTraceInfoMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerToClientMessage_MemoryRangeInfoMsg_descriptor_, &ServerToClientMessage_MemoryRangeInfoMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LineInfo_descriptor_, &LineInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VarTypeDescriptor_descriptor_, &VarTypeDescriptor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VarTypeBasic_descriptor_, &VarTypeBasic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VarTypePointer_descriptor_, &VarTypePointer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VarTypeArray_descriptor_, &VarTypeArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VarTypeEnum_descriptor_, &VarTypeEnum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VarTypeEnum_EnumEntry_descriptor_, &VarTypeEnum_EnumEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VarTypeStruct_descriptor_, &VarTypeStruct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VarTypeStruct_StructMember_descriptor_, &VarTypeStruct_StructMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VarTypeVector_descriptor_, &VarTypeVector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VarTypeTypedef_descriptor_, &VarTypeTypedef::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_debugservermessages_2eproto() {
  delete ClientToServerMessage::default_instance_;
  delete ClientToServerMessage_reflection_;
  delete ClientToServerMessage_StartSessionMsg::default_instance_;
  delete ClientToServerMessage_StartSessionMsg_reflection_;
  delete ClientToServerMessage_RunMsg::default_instance_;
  delete ClientToServerMessage_RunMsg_reflection_;
  delete ClientToServerMessage_GetMemoryRangeMsg::default_instance_;
  delete ClientToServerMessage_GetMemoryRangeMsg_reflection_;
  delete ServerToClientMessage::default_instance_;
  delete ServerToClientMessage_reflection_;
  delete ServerToClientMessage_CmdErrorMsg::default_instance_;
  delete ServerToClientMessage_CmdErrorMsg_reflection_;
  delete ServerToClientMessage_StartSessionAckMsg::default_instance_;
  delete ServerToClientMessage_StartSessionAckMsg_reflection_;
  delete ServerToClientMessage_VarInfo::default_instance_;
  delete ServerToClientMessage_VarInfo_reflection_;
  delete ServerToClientMessage_StackFrameInfo::default_instance_;
  delete ServerToClientMessage_StackFrameInfo_reflection_;
  delete ServerToClientMessage_BPHitMsg::default_instance_;
  delete ServerToClientMessage_BPHitMsg_reflection_;
  delete ServerToClientMessage_StackTraceInfoMsg::default_instance_;
  delete ServerToClientMessage_StackTraceInfoMsg_reflection_;
  delete ServerToClientMessage_MemoryRangeInfoMsg::default_instance_;
  delete ServerToClientMessage_MemoryRangeInfoMsg_reflection_;
  delete LineInfo::default_instance_;
  delete LineInfo_reflection_;
  delete VarTypeDescriptor::default_instance_;
  delete VarTypeDescriptor_reflection_;
  delete VarTypeBasic::default_instance_;
  delete VarTypeBasic_reflection_;
  delete VarTypePointer::default_instance_;
  delete VarTypePointer_reflection_;
  delete VarTypeArray::default_instance_;
  delete VarTypeArray_reflection_;
  delete VarTypeEnum::default_instance_;
  delete VarTypeEnum_reflection_;
  delete VarTypeEnum_EnumEntry::default_instance_;
  delete VarTypeEnum_EnumEntry_reflection_;
  delete VarTypeStruct::default_instance_;
  delete VarTypeStruct_reflection_;
  delete VarTypeStruct_StructMember::default_instance_;
  delete VarTypeStruct_StructMember_reflection_;
  delete VarTypeVector::default_instance_;
  delete VarTypeVector_reflection_;
  delete VarTypeTypedef::default_instance_;
  delete VarTypeTypedef_reflection_;
}

void protobuf_AddDesc_debugservermessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031debugservermessages.proto\022\023debugserver"
    "messages\"\307\005\n\025ClientToServerMessage\022=\n\004ty"
    "pe\030\001 \002(\0162/.debugservermessages.ClientToS"
    "erverMessage.Type\022U\n\021start_session_msg\030\024"
    " \001(\0132:.debugservermessages.ClientToServe"
    "rMessage.StartSessionMsg\022B\n\007run_msg\030\025 \001("
    "\01321.debugservermessages.ClientToServerMe"
    "ssage.RunMsg\022Z\n\024get_memory_range_msg\030\037 \001"
    "(\0132<.debugservermessages.ClientToServerM"
    "essage.GetMemoryRangeMsg\032P\n\017StartSession"
    "Msg\022\023\n\013global_id_x\030\001 \002(\r\022\023\n\013global_id_y\030"
    "\002 \002(\r\022\023\n\013global_id_z\030\003 \002(\r\032J\n\006RunMsg\022\014\n\004"
    "info\030\001 \002(\t\0222\n\013breakpoints\030\002 \003(\0132\035.debugs"
    "ervermessages.LineInfo\0329\n\021GetMemoryRange"
    "Msg\022\022\n\nstart_addr\030\001 \002(\004\022\020\n\010end_addr\030\002 \002("
    "\004\"\236\001\n\004Type\022\021\n\rSTART_SESSION\020\001\022\007\n\003RUN\020\002\022\022"
    "\n\016SINGLE_STEP_IN\020\003\022\024\n\020SINGLE_STEP_OVER\020\004"
    "\022\023\n\017SINGLE_STEP_OUT\020\005\022\023\n\017GET_STACK_TRACE"
    "\020\025\022\024\n\020GET_MEMORY_RANGE\020\026\022\020\n\014BAD_MSG_TEST"
    "\020c\"\344\t\n\025ServerToClientMessage\022=\n\004type\030\001 \002"
    "(\0162/.debugservermessages.ServerToClientM"
    "essage.Type\022M\n\rcmd_error_msg\030\025 \001(\01326.deb"
    "ugservermessages.ServerToClientMessage.C"
    "mdErrorMsg\022\\\n\025start_session_ack_msg\030\026 \001("
    "\0132=.debugservermessages.ServerToClientMe"
    "ssage.StartSessionAckMsg\022F\n\tbphit_msg\030\037 "
    "\001(\01323.debugservermessages.ServerToClient"
    "Message.BPHitMsg\022Z\n\024stack_trace_info_msg"
    "\030) \001(\0132<.debugservermessages.ServerToCli"
    "entMessage.StackTraceInfoMsg\022\\\n\025memory_r"
    "ange_info_msg\0303 \001(\0132=.debugservermessage"
    "s.ServerToClientMessage.MemoryRangeInfoM"
    "sg\032\"\n\013CmdErrorMsg\022\023\n\013description\030\001 \002(\t\032+"
    "\n\022StartSessionAckMsg\022\025\n\rsizeof_size_t\030\001 "
    "\002(\r\032\206\001\n\007VarInfo\022\014\n\004name\030\001 \002(\t\022\r\n\005value\030\002"
    " \002(\t\022\014\n\004type\030\003 \002(\t\022\017\n\007address\030\004 \002(\004\022\?\n\017t"
    "ype_descriptor\030\005 \002(\0132&.debugservermessag"
    "es.VarTypeDescriptor\032\227\001\n\016StackFrameInfo\022"
    "\021\n\tfunc_name\030\001 \002(\t\0220\n\tcall_line\030\002 \002(\0132\035."
    "debugservermessages.LineInfo\022@\n\004vars\030\003 \003"
    "(\01322.debugservermessages.ServerToClientM"
    "essage.VarInfo\032\177\n\010BPHitMsg\0221\n\nbreakpoint"
    "\030\001 \002(\0132\035.debugservermessages.LineInfo\022@\n"
    "\004vars\030\002 \003(\01322.debugservermessages.Server"
    "ToClientMessage.VarInfo\032^\n\021StackTraceInf"
    "oMsg\022I\n\006frames\030\001 \003(\01329.debugservermessag"
    "es.ServerToClientMessage.StackFrameInfo\032"
    "!\n\022MemoryRangeInfoMsg\022\013\n\003buf\030\001 \002(\014\"e\n\004Ty"
    "pe\022\r\n\tCMD_ERROR\020\001\022\025\n\021START_SESSION_ACK\020\002"
    "\022\n\n\006BP_HIT\020\003\022\024\n\020STACK_TRACE_INFO\020\004\022\025\n\021ME"
    "MORY_RANGE_INFO\020\005\"(\n\010LineInfo\022\014\n\004file\030\001 "
    "\002(\t\022\016\n\006lineno\030\002 \002(\r\"\275\004\n\021VarTypeDescripto"
    "r\0227\n\003tag\030\001 \002(\0162*.debugservermessages.Var"
    "TypeDescriptor.Tag\0225\n\ntype_basic\030\013 \001(\0132!"
    ".debugservermessages.VarTypeBasic\0229\n\014typ"
    "e_pointer\030\014 \001(\0132#.debugservermessages.Va"
    "rTypePointer\0225\n\ntype_array\030\r \001(\0132!.debug"
    "servermessages.VarTypeArray\0227\n\013type_vect"
    "or\030\016 \001(\0132\".debugservermessages.VarTypeVe"
    "ctor\0229\n\014type_typedef\030\017 \001(\0132#.debugserver"
    "messages.VarTypeTypedef\0223\n\ttype_enum\030\020 \001"
    "(\0132 .debugservermessages.VarTypeEnum\0227\n\013"
    "type_struct\030\021 \001(\0132\".debugservermessages."
    "VarTypeStruct\"d\n\003Tag\022\t\n\005BASIC\020\000\022\013\n\007POINT"
    "ER\020\001\022\t\n\005ARRAY\020\002\022\n\n\006VECTOR\020\003\022\013\n\007TYPEDEF\020\004"
    "\022\010\n\004ENUM\020\005\022\n\n\006STRUCT\020\006\022\013\n\007UNKNOWN\020c\"\316\001\n\014"
    "VarTypeBasic\0222\n\003tag\030\001 \002(\0162%.debugserverm"
    "essages.VarTypeBasic.Tag\022\022\n\nsize_nbits\030\002"
    " \002(\004\022\014\n\004name\030\024 \002(\t\"h\n\003Tag\022\013\n\007BOOLEAN\020\000\022\t"
    "\n\005FLOAT\020\001\022\n\n\006SIGNED\020\002\022\017\n\013SIGNED_CHAR\020\003\022\014"
    "\n\010UNSIGNED\020\004\022\021\n\rUNSIGNED_CHAR\020\005\022\013\n\007UNKNO"
    "WN\020c\"I\n\016VarTypePointer\0227\n\007pointee\030\001 \002(\0132"
    "&.debugservermessages.VarTypeDescriptor\""
    "[\n\014VarTypeArray\0227\n\007element\030\001 \002(\0132&.debug"
    "servermessages.VarTypeDescriptor\022\022\n\ndime"
    "nsions\030\002 \003(\004\"\202\001\n\013VarTypeEnum\022\014\n\004name\030\001 \002"
    "(\t\022;\n\007entries\030\002 \003(\0132*.debugservermessage"
    "s.VarTypeEnum.EnumEntry\032(\n\tEnumEntry\022\014\n\004"
    "name\030\001 \002(\t\022\r\n\005value\030\002 \002(\004\"\363\001\n\rVarTypeStr"
    "uct\022\014\n\004name\030\001 \002(\t\022@\n\007members\030\002 \003(\0132/.deb"
    "ugservermessages.VarTypeStruct.StructMem"
    "ber\032\221\001\n\014StructMember\022\014\n\004name\030\001 \002(\t\022\022\n\nsi"
    "ze_nbits\030\002 \002(\004\022\023\n\013align_nbits\030\003 \002(\004\022\024\n\014o"
    "ffset_nbits\030\004 \002(\004\0224\n\004type\030\024 \002(\0132&.debugs"
    "ervermessages.VarTypeDescriptor\"\035\n\rVarTy"
    "peVector\022\014\n\004name\030\001 \002(\t\"]\n\016VarTypeTypedef"
    "\022\014\n\004name\030\001 \002(\t\022=\n\roriginal_type\030\002 \002(\0132&."
    "debugservermessages.VarTypeDescriptor", 3517);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "debugservermessages.proto", &protobuf_RegisterTypes);
  ClientToServerMessage::default_instance_ = new ClientToServerMessage();
  ClientToServerMessage_StartSessionMsg::default_instance_ = new ClientToServerMessage_StartSessionMsg();
  ClientToServerMessage_RunMsg::default_instance_ = new ClientToServerMessage_RunMsg();
  ClientToServerMessage_GetMemoryRangeMsg::default_instance_ = new ClientToServerMessage_GetMemoryRangeMsg();
  ServerToClientMessage::default_instance_ = new ServerToClientMessage();
  ServerToClientMessage_CmdErrorMsg::default_instance_ = new ServerToClientMessage_CmdErrorMsg();
  ServerToClientMessage_StartSessionAckMsg::default_instance_ = new ServerToClientMessage_StartSessionAckMsg();
  ServerToClientMessage_VarInfo::default_instance_ = new ServerToClientMessage_VarInfo();
  ServerToClientMessage_StackFrameInfo::default_instance_ = new ServerToClientMessage_StackFrameInfo();
  ServerToClientMessage_BPHitMsg::default_instance_ = new ServerToClientMessage_BPHitMsg();
  ServerToClientMessage_StackTraceInfoMsg::default_instance_ = new ServerToClientMessage_StackTraceInfoMsg();
  ServerToClientMessage_MemoryRangeInfoMsg::default_instance_ = new ServerToClientMessage_MemoryRangeInfoMsg();
  LineInfo::default_instance_ = new LineInfo();
  VarTypeDescriptor::default_instance_ = new VarTypeDescriptor();
  VarTypeBasic::default_instance_ = new VarTypeBasic();
  VarTypePointer::default_instance_ = new VarTypePointer();
  VarTypeArray::default_instance_ = new VarTypeArray();
  VarTypeEnum::default_instance_ = new VarTypeEnum();
  VarTypeEnum_EnumEntry::default_instance_ = new VarTypeEnum_EnumEntry();
  VarTypeStruct::default_instance_ = new VarTypeStruct();
  VarTypeStruct_StructMember::default_instance_ = new VarTypeStruct_StructMember();
  VarTypeVector::default_instance_ = new VarTypeVector();
  VarTypeTypedef::default_instance_ = new VarTypeTypedef();
  ClientToServerMessage::default_instance_->InitAsDefaultInstance();
  ClientToServerMessage_StartSessionMsg::default_instance_->InitAsDefaultInstance();
  ClientToServerMessage_RunMsg::default_instance_->InitAsDefaultInstance();
  ClientToServerMessage_GetMemoryRangeMsg::default_instance_->InitAsDefaultInstance();
  ServerToClientMessage::default_instance_->InitAsDefaultInstance();
  ServerToClientMessage_CmdErrorMsg::default_instance_->InitAsDefaultInstance();
  ServerToClientMessage_StartSessionAckMsg::default_instance_->InitAsDefaultInstance();
  ServerToClientMessage_VarInfo::default_instance_->InitAsDefaultInstance();
  ServerToClientMessage_StackFrameInfo::default_instance_->InitAsDefaultInstance();
  ServerToClientMessage_BPHitMsg::default_instance_->InitAsDefaultInstance();
  ServerToClientMessage_StackTraceInfoMsg::default_instance_->InitAsDefaultInstance();
  ServerToClientMessage_MemoryRangeInfoMsg::default_instance_->InitAsDefaultInstance();
  LineInfo::default_instance_->InitAsDefaultInstance();
  VarTypeDescriptor::default_instance_->InitAsDefaultInstance();
  VarTypeBasic::default_instance_->InitAsDefaultInstance();
  VarTypePointer::default_instance_->InitAsDefaultInstance();
  VarTypeArray::default_instance_->InitAsDefaultInstance();
  VarTypeEnum::default_instance_->InitAsDefaultInstance();
  VarTypeEnum_EnumEntry::default_instance_->InitAsDefaultInstance();
  VarTypeStruct::default_instance_->InitAsDefaultInstance();
  VarTypeStruct_StructMember::default_instance_->InitAsDefaultInstance();
  VarTypeVector::default_instance_->InitAsDefaultInstance();
  VarTypeTypedef::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_debugservermessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_debugservermessages_2eproto {
  StaticDescriptorInitializer_debugservermessages_2eproto() {
    protobuf_AddDesc_debugservermessages_2eproto();
  }
} static_descriptor_initializer_debugservermessages_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* ClientToServerMessage_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientToServerMessage_Type_descriptor_;
}
bool ClientToServerMessage_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 21:
    case 22:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientToServerMessage_Type ClientToServerMessage::START_SESSION;
const ClientToServerMessage_Type ClientToServerMessage::RUN;
const ClientToServerMessage_Type ClientToServerMessage::SINGLE_STEP_IN;
const ClientToServerMessage_Type ClientToServerMessage::SINGLE_STEP_OVER;
const ClientToServerMessage_Type ClientToServerMessage::SINGLE_STEP_OUT;
const ClientToServerMessage_Type ClientToServerMessage::GET_STACK_TRACE;
const ClientToServerMessage_Type ClientToServerMessage::GET_MEMORY_RANGE;
const ClientToServerMessage_Type ClientToServerMessage::BAD_MSG_TEST;
const ClientToServerMessage_Type ClientToServerMessage::Type_MIN;
const ClientToServerMessage_Type ClientToServerMessage::Type_MAX;
const int ClientToServerMessage::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ClientToServerMessage_StartSessionMsg::kGlobalIdXFieldNumber;
const int ClientToServerMessage_StartSessionMsg::kGlobalIdYFieldNumber;
const int ClientToServerMessage_StartSessionMsg::kGlobalIdZFieldNumber;
#endif  // !_MSC_VER

ClientToServerMessage_StartSessionMsg::ClientToServerMessage_StartSessionMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientToServerMessage_StartSessionMsg::InitAsDefaultInstance() {
}

ClientToServerMessage_StartSessionMsg::ClientToServerMessage_StartSessionMsg(const ClientToServerMessage_StartSessionMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientToServerMessage_StartSessionMsg::SharedCtor() {
  _cached_size_ = 0;
  global_id_x_ = 0u;
  global_id_y_ = 0u;
  global_id_z_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientToServerMessage_StartSessionMsg::~ClientToServerMessage_StartSessionMsg() {
  SharedDtor();
}

void ClientToServerMessage_StartSessionMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientToServerMessage_StartSessionMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientToServerMessage_StartSessionMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientToServerMessage_StartSessionMsg_descriptor_;
}

const ClientToServerMessage_StartSessionMsg& ClientToServerMessage_StartSessionMsg::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_debugservermessages_2eproto();  return *default_instance_;
}

ClientToServerMessage_StartSessionMsg* ClientToServerMessage_StartSessionMsg::default_instance_ = nullptr;

ClientToServerMessage_StartSessionMsg* ClientToServerMessage_StartSessionMsg::New() const {
  return new ClientToServerMessage_StartSessionMsg;
}

void ClientToServerMessage_StartSessionMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    global_id_x_ = 0u;
    global_id_y_ = 0u;
    global_id_z_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientToServerMessage_StartSessionMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 global_id_x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &global_id_x_)));
          set_has_global_id_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_global_id_y;
        break;
      }
      
      // required uint32 global_id_y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_global_id_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &global_id_y_)));
          set_has_global_id_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_global_id_z;
        break;
      }
      
      // required uint32 global_id_z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_global_id_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &global_id_z_)));
          set_has_global_id_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientToServerMessage_StartSessionMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 global_id_x = 1;
  if (has_global_id_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->global_id_x(), output);
  }
  
  // required uint32 global_id_y = 2;
  if (has_global_id_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->global_id_y(), output);
  }
  
  // required uint32 global_id_z = 3;
  if (has_global_id_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->global_id_z(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientToServerMessage_StartSessionMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 global_id_x = 1;
  if (has_global_id_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->global_id_x(), target);
  }
  
  // required uint32 global_id_y = 2;
  if (has_global_id_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->global_id_y(), target);
  }
  
  // required uint32 global_id_z = 3;
  if (has_global_id_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->global_id_z(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientToServerMessage_StartSessionMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 global_id_x = 1;
    if (has_global_id_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->global_id_x());
    }
    
    // required uint32 global_id_y = 2;
    if (has_global_id_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->global_id_y());
    }
    
    // required uint32 global_id_z = 3;
    if (has_global_id_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->global_id_z());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientToServerMessage_StartSessionMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientToServerMessage_StartSessionMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientToServerMessage_StartSessionMsg*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientToServerMessage_StartSessionMsg::MergeFrom(const ClientToServerMessage_StartSessionMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_global_id_x()) {
      set_global_id_x(from.global_id_x());
    }
    if (from.has_global_id_y()) {
      set_global_id_y(from.global_id_y());
    }
    if (from.has_global_id_z()) {
      set_global_id_z(from.global_id_z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientToServerMessage_StartSessionMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServerMessage_StartSessionMsg::CopyFrom(const ClientToServerMessage_StartSessionMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServerMessage_StartSessionMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ClientToServerMessage_StartSessionMsg::Swap(ClientToServerMessage_StartSessionMsg* other) {
  if (other != this) {
    std::swap(global_id_x_, other->global_id_x_);
    std::swap(global_id_y_, other->global_id_y_);
    std::swap(global_id_z_, other->global_id_z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientToServerMessage_StartSessionMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientToServerMessage_StartSessionMsg_descriptor_;
  metadata.reflection = ClientToServerMessage_StartSessionMsg_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientToServerMessage_RunMsg::kInfoFieldNumber;
const int ClientToServerMessage_RunMsg::kBreakpointsFieldNumber;
#endif  // !_MSC_VER

ClientToServerMessage_RunMsg::ClientToServerMessage_RunMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientToServerMessage_RunMsg::InitAsDefaultInstance() {
}

ClientToServerMessage_RunMsg::ClientToServerMessage_RunMsg(const ClientToServerMessage_RunMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientToServerMessage_RunMsg::SharedCtor() {
  _cached_size_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientToServerMessage_RunMsg::~ClientToServerMessage_RunMsg() {
  SharedDtor();
}

void ClientToServerMessage_RunMsg::SharedDtor() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void ClientToServerMessage_RunMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientToServerMessage_RunMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientToServerMessage_RunMsg_descriptor_;
}

const ClientToServerMessage_RunMsg& ClientToServerMessage_RunMsg::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_debugservermessages_2eproto();  return *default_instance_;
}

ClientToServerMessage_RunMsg* ClientToServerMessage_RunMsg::default_instance_ = nullptr;

ClientToServerMessage_RunMsg* ClientToServerMessage_RunMsg::New() const {
  return new ClientToServerMessage_RunMsg;
}

void ClientToServerMessage_RunMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
  }
  breakpoints_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientToServerMessage_RunMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_breakpoints;
        break;
      }
      
      // repeated .debugservermessages.LineInfo breakpoints = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_breakpoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_breakpoints()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_breakpoints;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientToServerMessage_RunMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->info(), output);
  }
  
  // repeated .debugservermessages.LineInfo breakpoints = 2;
  for (int i = 0; i < this->breakpoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->breakpoints(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientToServerMessage_RunMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->info(), target);
  }
  
  // repeated .debugservermessages.LineInfo breakpoints = 2;
  for (int i = 0; i < this->breakpoints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->breakpoints(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientToServerMessage_RunMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }
    
  }
  // repeated .debugservermessages.LineInfo breakpoints = 2;
  total_size += 1 * this->breakpoints_size();
  for (int i = 0; i < this->breakpoints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->breakpoints(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientToServerMessage_RunMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientToServerMessage_RunMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientToServerMessage_RunMsg*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientToServerMessage_RunMsg::MergeFrom(const ClientToServerMessage_RunMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  breakpoints_.MergeFrom(from.breakpoints_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      set_info(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientToServerMessage_RunMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServerMessage_RunMsg::CopyFrom(const ClientToServerMessage_RunMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServerMessage_RunMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < breakpoints_size(); i++) {
    if (!this->breakpoints(i).IsInitialized()) return false;
  }
  return true;
}

void ClientToServerMessage_RunMsg::Swap(ClientToServerMessage_RunMsg* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    breakpoints_.Swap(&other->breakpoints_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientToServerMessage_RunMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientToServerMessage_RunMsg_descriptor_;
  metadata.reflection = ClientToServerMessage_RunMsg_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientToServerMessage_GetMemoryRangeMsg::kStartAddrFieldNumber;
const int ClientToServerMessage_GetMemoryRangeMsg::kEndAddrFieldNumber;
#endif  // !_MSC_VER

ClientToServerMessage_GetMemoryRangeMsg::ClientToServerMessage_GetMemoryRangeMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientToServerMessage_GetMemoryRangeMsg::InitAsDefaultInstance() {
}

ClientToServerMessage_GetMemoryRangeMsg::ClientToServerMessage_GetMemoryRangeMsg(const ClientToServerMessage_GetMemoryRangeMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientToServerMessage_GetMemoryRangeMsg::SharedCtor() {
  _cached_size_ = 0;
  start_addr_ = GOOGLE_ULONGLONG(0);
  end_addr_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientToServerMessage_GetMemoryRangeMsg::~ClientToServerMessage_GetMemoryRangeMsg() {
  SharedDtor();
}

void ClientToServerMessage_GetMemoryRangeMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientToServerMessage_GetMemoryRangeMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientToServerMessage_GetMemoryRangeMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientToServerMessage_GetMemoryRangeMsg_descriptor_;
}

const ClientToServerMessage_GetMemoryRangeMsg& ClientToServerMessage_GetMemoryRangeMsg::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_debugservermessages_2eproto();  return *default_instance_;
}

ClientToServerMessage_GetMemoryRangeMsg* ClientToServerMessage_GetMemoryRangeMsg::default_instance_ = nullptr;

ClientToServerMessage_GetMemoryRangeMsg* ClientToServerMessage_GetMemoryRangeMsg::New() const {
  return new ClientToServerMessage_GetMemoryRangeMsg;
}

void ClientToServerMessage_GetMemoryRangeMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_addr_ = GOOGLE_ULONGLONG(0);
    end_addr_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientToServerMessage_GetMemoryRangeMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 start_addr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_addr_)));
          set_has_start_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end_addr;
        break;
      }
      
      // required uint64 end_addr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_addr_)));
          set_has_end_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientToServerMessage_GetMemoryRangeMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 start_addr = 1;
  if (has_start_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_addr(), output);
  }
  
  // required uint64 end_addr = 2;
  if (has_end_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end_addr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientToServerMessage_GetMemoryRangeMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 start_addr = 1;
  if (has_start_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_addr(), target);
  }
  
  // required uint64 end_addr = 2;
  if (has_end_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end_addr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientToServerMessage_GetMemoryRangeMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 start_addr = 1;
    if (has_start_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_addr());
    }
    
    // required uint64 end_addr = 2;
    if (has_end_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_addr());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientToServerMessage_GetMemoryRangeMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientToServerMessage_GetMemoryRangeMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientToServerMessage_GetMemoryRangeMsg*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientToServerMessage_GetMemoryRangeMsg::MergeFrom(const ClientToServerMessage_GetMemoryRangeMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_addr()) {
      set_start_addr(from.start_addr());
    }
    if (from.has_end_addr()) {
      set_end_addr(from.end_addr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientToServerMessage_GetMemoryRangeMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServerMessage_GetMemoryRangeMsg::CopyFrom(const ClientToServerMessage_GetMemoryRangeMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServerMessage_GetMemoryRangeMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ClientToServerMessage_GetMemoryRangeMsg::Swap(ClientToServerMessage_GetMemoryRangeMsg* other) {
  if (other != this) {
    std::swap(start_addr_, other->start_addr_);
    std::swap(end_addr_, other->end_addr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientToServerMessage_GetMemoryRangeMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientToServerMessage_GetMemoryRangeMsg_descriptor_;
  metadata.reflection = ClientToServerMessage_GetMemoryRangeMsg_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientToServerMessage::kTypeFieldNumber;
const int ClientToServerMessage::kStartSessionMsgFieldNumber;
const int ClientToServerMessage::kRunMsgFieldNumber;
const int ClientToServerMessage::kGetMemoryRangeMsgFieldNumber;
#endif  // !_MSC_VER

ClientToServerMessage::ClientToServerMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientToServerMessage::InitAsDefaultInstance() {
  start_session_msg_ = const_cast< ::debugservermessages::ClientToServerMessage_StartSessionMsg*>(&::debugservermessages::ClientToServerMessage_StartSessionMsg::default_instance());
  run_msg_ = const_cast< ::debugservermessages::ClientToServerMessage_RunMsg*>(&::debugservermessages::ClientToServerMessage_RunMsg::default_instance());
  get_memory_range_msg_ = const_cast< ::debugservermessages::ClientToServerMessage_GetMemoryRangeMsg*>(&::debugservermessages::ClientToServerMessage_GetMemoryRangeMsg::default_instance());
}

ClientToServerMessage::ClientToServerMessage(const ClientToServerMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientToServerMessage::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  start_session_msg_ = nullptr;
  run_msg_ = nullptr;
  get_memory_range_msg_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientToServerMessage::~ClientToServerMessage() {
  SharedDtor();
}

void ClientToServerMessage::SharedDtor() {
  if (this != default_instance_) {
    delete start_session_msg_;
    delete run_msg_;
    delete get_memory_range_msg_;
  }
}

void ClientToServerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientToServerMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientToServerMessage_descriptor_;
}

const ClientToServerMessage& ClientToServerMessage::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_debugservermessages_2eproto();  return *default_instance_;
}

ClientToServerMessage* ClientToServerMessage::default_instance_ = nullptr;

ClientToServerMessage* ClientToServerMessage::New() const {
  return new ClientToServerMessage;
}

void ClientToServerMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_start_session_msg()) {
      if (start_session_msg_ != nullptr) start_session_msg_->::debugservermessages::ClientToServerMessage_StartSessionMsg::Clear();
    }
    if (has_run_msg()) {
      if (run_msg_ != nullptr) run_msg_->::debugservermessages::ClientToServerMessage_RunMsg::Clear();
    }
    if (has_get_memory_range_msg()) {
      if (get_memory_range_msg_ != nullptr) get_memory_range_msg_->::debugservermessages::ClientToServerMessage_GetMemoryRangeMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientToServerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .debugservermessages.ClientToServerMessage.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::debugservermessages::ClientToServerMessage_Type_IsValid(value)) {
            set_type(static_cast< ::debugservermessages::ClientToServerMessage_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_start_session_msg;
        break;
      }
      
      // optional .debugservermessages.ClientToServerMessage.StartSessionMsg start_session_msg = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_session_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_session_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_run_msg;
        break;
      }
      
      // optional .debugservermessages.ClientToServerMessage.RunMsg run_msg = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_run_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_run_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_get_memory_range_msg;
        break;
      }
      
      // optional .debugservermessages.ClientToServerMessage.GetMemoryRangeMsg get_memory_range_msg = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_memory_range_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_memory_range_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientToServerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .debugservermessages.ClientToServerMessage.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .debugservermessages.ClientToServerMessage.StartSessionMsg start_session_msg = 20;
  if (has_start_session_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->start_session_msg(), output);
  }
  
  // optional .debugservermessages.ClientToServerMessage.RunMsg run_msg = 21;
  if (has_run_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->run_msg(), output);
  }
  
  // optional .debugservermessages.ClientToServerMessage.GetMemoryRangeMsg get_memory_range_msg = 31;
  if (has_get_memory_range_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->get_memory_range_msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientToServerMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .debugservermessages.ClientToServerMessage.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional .debugservermessages.ClientToServerMessage.StartSessionMsg start_session_msg = 20;
  if (has_start_session_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->start_session_msg(), target);
  }
  
  // optional .debugservermessages.ClientToServerMessage.RunMsg run_msg = 21;
  if (has_run_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->run_msg(), target);
  }
  
  // optional .debugservermessages.ClientToServerMessage.GetMemoryRangeMsg get_memory_range_msg = 31;
  if (has_get_memory_range_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->get_memory_range_msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientToServerMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .debugservermessages.ClientToServerMessage.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .debugservermessages.ClientToServerMessage.StartSessionMsg start_session_msg = 20;
    if (has_start_session_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_session_msg());
    }
    
    // optional .debugservermessages.ClientToServerMessage.RunMsg run_msg = 21;
    if (has_run_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->run_msg());
    }
    
    // optional .debugservermessages.ClientToServerMessage.GetMemoryRangeMsg get_memory_range_msg = 31;
    if (has_get_memory_range_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_memory_range_msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientToServerMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientToServerMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientToServerMessage*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientToServerMessage::MergeFrom(const ClientToServerMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_start_session_msg()) {
      mutable_start_session_msg()->::debugservermessages::ClientToServerMessage_StartSessionMsg::MergeFrom(from.start_session_msg());
    }
    if (from.has_run_msg()) {
      mutable_run_msg()->::debugservermessages::ClientToServerMessage_RunMsg::MergeFrom(from.run_msg());
    }
    if (from.has_get_memory_range_msg()) {
      mutable_get_memory_range_msg()->::debugservermessages::ClientToServerMessage_GetMemoryRangeMsg::MergeFrom(from.get_memory_range_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientToServerMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServerMessage::CopyFrom(const ClientToServerMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_start_session_msg()) {
    if (!this->start_session_msg().IsInitialized()) return false;
  }
  if (has_run_msg()) {
    if (!this->run_msg().IsInitialized()) return false;
  }
  if (has_get_memory_range_msg()) {
    if (!this->get_memory_range_msg().IsInitialized()) return false;
  }
  return true;
}

void ClientToServerMessage::Swap(ClientToServerMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(start_session_msg_, other->start_session_msg_);
    std::swap(run_msg_, other->run_msg_);
    std::swap(get_memory_range_msg_, other->get_memory_range_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientToServerMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientToServerMessage_descriptor_;
  metadata.reflection = ClientToServerMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ServerToClientMessage_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerToClientMessage_Type_descriptor_;
}
bool ServerToClientMessage_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ServerToClientMessage_Type ServerToClientMessage::CMD_ERROR;
const ServerToClientMessage_Type ServerToClientMessage::START_SESSION_ACK;
const ServerToClientMessage_Type ServerToClientMessage::BP_HIT;
const ServerToClientMessage_Type ServerToClientMessage::STACK_TRACE_INFO;
const ServerToClientMessage_Type ServerToClientMessage::MEMORY_RANGE_INFO;
const ServerToClientMessage_Type ServerToClientMessage::Type_MIN;
const ServerToClientMessage_Type ServerToClientMessage::Type_MAX;
const int ServerToClientMessage::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ServerToClientMessage_CmdErrorMsg::kDescriptionFieldNumber;
#endif  // !_MSC_VER

ServerToClientMessage_CmdErrorMsg::ServerToClientMessage_CmdErrorMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerToClientMessage_CmdErrorMsg::InitAsDefaultInstance() {
}

ServerToClientMessage_CmdErrorMsg::ServerToClientMessage_CmdErrorMsg(const ServerToClientMessage_CmdErrorMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerToClientMessage_CmdErrorMsg::SharedCtor() {
  _cached_size_ = 0;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerToClientMessage_CmdErrorMsg::~ServerToClientMessage_CmdErrorMsg() {
  SharedDtor();
}

void ServerToClientMessage_CmdErrorMsg::SharedDtor() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void ServerToClientMessage_CmdErrorMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerToClientMessage_CmdErrorMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerToClientMessage_CmdErrorMsg_descriptor_;
}

const ServerToClientMessage_CmdErrorMsg& ServerToClientMessage_CmdErrorMsg::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_debugservermessages_2eproto();  return *default_instance_;
}

ServerToClientMessage_CmdErrorMsg* ServerToClientMessage_CmdErrorMsg::default_instance_ = nullptr;

ServerToClientMessage_CmdErrorMsg* ServerToClientMessage_CmdErrorMsg::New() const {
  return new ServerToClientMessage_CmdErrorMsg;
}

void ServerToClientMessage_CmdErrorMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerToClientMessage_CmdErrorMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string description = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerToClientMessage_CmdErrorMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string description = 1;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->description(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerToClientMessage_CmdErrorMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string description = 1;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->description(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerToClientMessage_CmdErrorMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string description = 1;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerToClientMessage_CmdErrorMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerToClientMessage_CmdErrorMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerToClientMessage_CmdErrorMsg*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerToClientMessage_CmdErrorMsg::MergeFrom(const ServerToClientMessage_CmdErrorMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerToClientMessage_CmdErrorMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToClientMessage_CmdErrorMsg::CopyFrom(const ServerToClientMessage_CmdErrorMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToClientMessage_CmdErrorMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ServerToClientMessage_CmdErrorMsg::Swap(ServerToClientMessage_CmdErrorMsg* other) {
  if (other != this) {
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerToClientMessage_CmdErrorMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerToClientMessage_CmdErrorMsg_descriptor_;
  metadata.reflection = ServerToClientMessage_CmdErrorMsg_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServerToClientMessage_StartSessionAckMsg::kSizeofSizeTFieldNumber;
#endif  // !_MSC_VER

ServerToClientMessage_StartSessionAckMsg::ServerToClientMessage_StartSessionAckMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerToClientMessage_StartSessionAckMsg::InitAsDefaultInstance() {
}

ServerToClientMessage_StartSessionAckMsg::ServerToClientMessage_StartSessionAckMsg(const ServerToClientMessage_StartSessionAckMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerToClientMessage_StartSessionAckMsg::SharedCtor() {
  _cached_size_ = 0;
  sizeof_size_t_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerToClientMessage_StartSessionAckMsg::~ServerToClientMessage_StartSessionAckMsg() {
  SharedDtor();
}

void ServerToClientMessage_StartSessionAckMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerToClientMessage_StartSessionAckMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerToClientMessage_StartSessionAckMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerToClientMessage_StartSessionAckMsg_descriptor_;
}

const ServerToClientMessage_StartSessionAckMsg& ServerToClientMessage_StartSessionAckMsg::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_debugservermessages_2eproto();  return *default_instance_;
}

ServerToClientMessage_StartSessionAckMsg* ServerToClientMessage_StartSessionAckMsg::default_instance_ = nullptr;

ServerToClientMessage_StartSessionAckMsg* ServerToClientMessage_StartSessionAckMsg::New() const {
  return new ServerToClientMessage_StartSessionAckMsg;
}

void ServerToClientMessage_StartSessionAckMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sizeof_size_t_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerToClientMessage_StartSessionAckMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sizeof_size_t = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sizeof_size_t_)));
          set_has_sizeof_size_t();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerToClientMessage_StartSessionAckMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 sizeof_size_t = 1;
  if (has_sizeof_size_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sizeof_size_t(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerToClientMessage_StartSessionAckMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 sizeof_size_t = 1;
  if (has_sizeof_size_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sizeof_size_t(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerToClientMessage_StartSessionAckMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sizeof_size_t = 1;
    if (has_sizeof_size_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sizeof_size_t());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerToClientMessage_StartSessionAckMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerToClientMessage_StartSessionAckMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerToClientMessage_StartSessionAckMsg*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerToClientMessage_StartSessionAckMsg::MergeFrom(const ServerToClientMessage_StartSessionAckMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sizeof_size_t()) {
      set_sizeof_size_t(from.sizeof_size_t());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerToClientMessage_StartSessionAckMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToClientMessage_StartSessionAckMsg::CopyFrom(const ServerToClientMessage_StartSessionAckMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToClientMessage_StartSessionAckMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ServerToClientMessage_StartSessionAckMsg::Swap(ServerToClientMessage_StartSessionAckMsg* other) {
  if (other != this) {
    std::swap(sizeof_size_t_, other->sizeof_size_t_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerToClientMessage_StartSessionAckMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerToClientMessage_StartSessionAckMsg_descriptor_;
  metadata.reflection = ServerToClientMessage_StartSessionAckMsg_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServerToClientMessage_VarInfo::kNameFieldNumber;
const int ServerToClientMessage_VarInfo::kValueFieldNumber;
const int ServerToClientMessage_VarInfo::kTypeFieldNumber;
const int ServerToClientMessage_VarInfo::kAddressFieldNumber;
const int ServerToClientMessage_VarInfo::kTypeDescriptorFieldNumber;
#endif  // !_MSC_VER

ServerToClientMessage_VarInfo::ServerToClientMessage_VarInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerToClientMessage_VarInfo::InitAsDefaultInstance() {
  type_descriptor_ = const_cast< ::debugservermessages::VarTypeDescriptor*>(&::debugservermessages::VarTypeDescriptor::default_instance());
}

ServerToClientMessage_VarInfo::ServerToClientMessage_VarInfo(const ServerToClientMessage_VarInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerToClientMessage_VarInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address_ = GOOGLE_ULONGLONG(0);
  type_descriptor_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerToClientMessage_VarInfo::~ServerToClientMessage_VarInfo() {
  SharedDtor();
}

void ServerToClientMessage_VarInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
    delete type_descriptor_;
  }
}

void ServerToClientMessage_VarInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerToClientMessage_VarInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerToClientMessage_VarInfo_descriptor_;
}

const ServerToClientMessage_VarInfo& ServerToClientMessage_VarInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_debugservermessages_2eproto();  return *default_instance_;
}

ServerToClientMessage_VarInfo* ServerToClientMessage_VarInfo::default_instance_ = nullptr;

ServerToClientMessage_VarInfo* ServerToClientMessage_VarInfo::New() const {
  return new ServerToClientMessage_VarInfo;
}

void ServerToClientMessage_VarInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    address_ = GOOGLE_ULONGLONG(0);
    if (has_type_descriptor()) {
      if (type_descriptor_ != nullptr) type_descriptor_->::debugservermessages::VarTypeDescriptor::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerToClientMessage_VarInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }
      
      // required string type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_address;
        break;
      }
      
      // required uint64 address = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_address:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &address_)));
          set_has_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_type_descriptor;
        break;
      }
      
      // required .debugservermessages.VarTypeDescriptor type_descriptor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type_descriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_type_descriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerToClientMessage_VarInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->type(), output);
  }
  
  // required uint64 address = 4;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->address(), output);
  }
  
  // required .debugservermessages.VarTypeDescriptor type_descriptor = 5;
  if (has_type_descriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->type_descriptor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerToClientMessage_VarInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }
  
  // required uint64 address = 4;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->address(), target);
  }
  
  // required .debugservermessages.VarTypeDescriptor type_descriptor = 5;
  if (has_type_descriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->type_descriptor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerToClientMessage_VarInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
    // required string type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
    // required uint64 address = 4;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->address());
    }
    
    // required .debugservermessages.VarTypeDescriptor type_descriptor = 5;
    if (has_type_descriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->type_descriptor());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerToClientMessage_VarInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerToClientMessage_VarInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerToClientMessage_VarInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerToClientMessage_VarInfo::MergeFrom(const ServerToClientMessage_VarInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_type_descriptor()) {
      mutable_type_descriptor()->::debugservermessages::VarTypeDescriptor::MergeFrom(from.type_descriptor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerToClientMessage_VarInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToClientMessage_VarInfo::CopyFrom(const ServerToClientMessage_VarInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToClientMessage_VarInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_type_descriptor()) {
    if (!this->type_descriptor().IsInitialized()) return false;
  }
  return true;
}

void ServerToClientMessage_VarInfo::Swap(ServerToClientMessage_VarInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(type_, other->type_);
    std::swap(address_, other->address_);
    std::swap(type_descriptor_, other->type_descriptor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerToClientMessage_VarInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerToClientMessage_VarInfo_descriptor_;
  metadata.reflection = ServerToClientMessage_VarInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServerToClientMessage_StackFrameInfo::kFuncNameFieldNumber;
const int ServerToClientMessage_StackFrameInfo::kCallLineFieldNumber;
const int ServerToClientMessage_StackFrameInfo::kVarsFieldNumber;
#endif  // !_MSC_VER

ServerToClientMessage_StackFrameInfo::ServerToClientMessage_StackFrameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerToClientMessage_StackFrameInfo::InitAsDefaultInstance() {
  call_line_ = const_cast< ::debugservermessages::LineInfo*>(&::debugservermessages::LineInfo::default_instance());
}

ServerToClientMessage_StackFrameInfo::ServerToClientMessage_StackFrameInfo(const ServerToClientMessage_StackFrameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerToClientMessage_StackFrameInfo::SharedCtor() {
  _cached_size_ = 0;
  func_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  call_line_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerToClientMessage_StackFrameInfo::~ServerToClientMessage_StackFrameInfo() {
  SharedDtor();
}

void ServerToClientMessage_StackFrameInfo::SharedDtor() {
  if (func_name_ != &::google::protobuf::internal::kEmptyString) {
    delete func_name_;
  }
  if (this != default_instance_) {
    delete call_line_;
  }
}

void ServerToClientMessage_StackFrameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerToClientMessage_StackFrameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerToClientMessage_StackFrameInfo_descriptor_;
}

const ServerToClientMessage_StackFrameInfo& ServerToClientMessage_StackFrameInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_debugservermessages_2eproto();  return *default_instance_;
}

ServerToClientMessage_StackFrameInfo* ServerToClientMessage_StackFrameInfo::default_instance_ = nullptr;

ServerToClientMessage_StackFrameInfo* ServerToClientMessage_StackFrameInfo::New() const {
  return new ServerToClientMessage_StackFrameInfo;
}

void ServerToClientMessage_StackFrameInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_func_name()) {
      if (func_name_ != &::google::protobuf::internal::kEmptyString) {
        func_name_->clear();
      }
    }
    if (has_call_line()) {
      if (call_line_ != nullptr) call_line_->::debugservermessages::LineInfo::Clear();
    }
  }
  vars_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerToClientMessage_StackFrameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string func_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_func_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->func_name().data(), this->func_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_call_line;
        break;
      }
      
      // required .debugservermessages.LineInfo call_line = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_call_line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_call_line()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vars;
        break;
      }
      
      // repeated .debugservermessages.ServerToClientMessage.VarInfo vars = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vars()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vars;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerToClientMessage_StackFrameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string func_name = 1;
  if (has_func_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->func_name().data(), this->func_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->func_name(), output);
  }
  
  // required .debugservermessages.LineInfo call_line = 2;
  if (has_call_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->call_line(), output);
  }
  
  // repeated .debugservermessages.ServerToClientMessage.VarInfo vars = 3;
  for (int i = 0; i < this->vars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->vars(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerToClientMessage_StackFrameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string func_name = 1;
  if (has_func_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->func_name().data(), this->func_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->func_name(), target);
  }
  
  // required .debugservermessages.LineInfo call_line = 2;
  if (has_call_line()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->call_line(), target);
  }
  
  // repeated .debugservermessages.ServerToClientMessage.VarInfo vars = 3;
  for (int i = 0; i < this->vars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->vars(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerToClientMessage_StackFrameInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string func_name = 1;
    if (has_func_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->func_name());
    }
    
    // required .debugservermessages.LineInfo call_line = 2;
    if (has_call_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->call_line());
    }
    
  }
  // repeated .debugservermessages.ServerToClientMessage.VarInfo vars = 3;
  total_size += 1 * this->vars_size();
  for (int i = 0; i < this->vars_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vars(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerToClientMessage_StackFrameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerToClientMessage_StackFrameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerToClientMessage_StackFrameInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerToClientMessage_StackFrameInfo::MergeFrom(const ServerToClientMessage_StackFrameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  vars_.MergeFrom(from.vars_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_func_name()) {
      set_func_name(from.func_name());
    }
    if (from.has_call_line()) {
      mutable_call_line()->::debugservermessages::LineInfo::MergeFrom(from.call_line());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerToClientMessage_StackFrameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToClientMessage_StackFrameInfo::CopyFrom(const ServerToClientMessage_StackFrameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToClientMessage_StackFrameInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_call_line()) {
    if (!this->call_line().IsInitialized()) return false;
  }
  for (int i = 0; i < vars_size(); i++) {
    if (!this->vars(i).IsInitialized()) return false;
  }
  return true;
}

void ServerToClientMessage_StackFrameInfo::Swap(ServerToClientMessage_StackFrameInfo* other) {
  if (other != this) {
    std::swap(func_name_, other->func_name_);
    std::swap(call_line_, other->call_line_);
    vars_.Swap(&other->vars_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerToClientMessage_StackFrameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerToClientMessage_StackFrameInfo_descriptor_;
  metadata.reflection = ServerToClientMessage_StackFrameInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServerToClientMessage_BPHitMsg::kBreakpointFieldNumber;
const int ServerToClientMessage_BPHitMsg::kVarsFieldNumber;
#endif  // !_MSC_VER

ServerToClientMessage_BPHitMsg::ServerToClientMessage_BPHitMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerToClientMessage_BPHitMsg::InitAsDefaultInstance() {
  breakpoint_ = const_cast< ::debugservermessages::LineInfo*>(&::debugservermessages::LineInfo::default_instance());
}

ServerToClientMessage_BPHitMsg::ServerToClientMessage_BPHitMsg(const ServerToClientMessage_BPHitMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerToClientMessage_BPHitMsg::SharedCtor() {
  _cached_size_ = 0;
  breakpoint_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerToClientMessage_BPHitMsg::~ServerToClientMessage_BPHitMsg() {
  SharedDtor();
}

void ServerToClientMessage_BPHitMsg::SharedDtor() {
  if (this != default_instance_) {
    delete breakpoint_;
  }
}

void ServerToClientMessage_BPHitMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerToClientMessage_BPHitMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerToClientMessage_BPHitMsg_descriptor_;
}

const ServerToClientMessage_BPHitMsg& ServerToClientMessage_BPHitMsg::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_debugservermessages_2eproto();  return *default_instance_;
}

ServerToClientMessage_BPHitMsg* ServerToClientMessage_BPHitMsg::default_instance_ = nullptr;

ServerToClientMessage_BPHitMsg* ServerToClientMessage_BPHitMsg::New() const {
  return new ServerToClientMessage_BPHitMsg;
}

void ServerToClientMessage_BPHitMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_breakpoint()) {
      if (breakpoint_ != nullptr) breakpoint_->::debugservermessages::LineInfo::Clear();
    }
  }
  vars_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerToClientMessage_BPHitMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .debugservermessages.LineInfo breakpoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_breakpoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vars;
        break;
      }
      
      // repeated .debugservermessages.ServerToClientMessage.VarInfo vars = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vars()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vars;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerToClientMessage_BPHitMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .debugservermessages.LineInfo breakpoint = 1;
  if (has_breakpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->breakpoint(), output);
  }
  
  // repeated .debugservermessages.ServerToClientMessage.VarInfo vars = 2;
  for (int i = 0; i < this->vars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vars(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerToClientMessage_BPHitMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .debugservermessages.LineInfo breakpoint = 1;
  if (has_breakpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->breakpoint(), target);
  }
  
  // repeated .debugservermessages.ServerToClientMessage.VarInfo vars = 2;
  for (int i = 0; i < this->vars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vars(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerToClientMessage_BPHitMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .debugservermessages.LineInfo breakpoint = 1;
    if (has_breakpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->breakpoint());
    }
    
  }
  // repeated .debugservermessages.ServerToClientMessage.VarInfo vars = 2;
  total_size += 1 * this->vars_size();
  for (int i = 0; i < this->vars_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vars(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerToClientMessage_BPHitMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerToClientMessage_BPHitMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerToClientMessage_BPHitMsg*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerToClientMessage_BPHitMsg::MergeFrom(const ServerToClientMessage_BPHitMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  vars_.MergeFrom(from.vars_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_breakpoint()) {
      mutable_breakpoint()->::debugservermessages::LineInfo::MergeFrom(from.breakpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerToClientMessage_BPHitMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToClientMessage_BPHitMsg::CopyFrom(const ServerToClientMessage_BPHitMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToClientMessage_BPHitMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_breakpoint()) {
    if (!this->breakpoint().IsInitialized()) return false;
  }
  for (int i = 0; i < vars_size(); i++) {
    if (!this->vars(i).IsInitialized()) return false;
  }
  return true;
}

void ServerToClientMessage_BPHitMsg::Swap(ServerToClientMessage_BPHitMsg* other) {
  if (other != this) {
    std::swap(breakpoint_, other->breakpoint_);
    vars_.Swap(&other->vars_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerToClientMessage_BPHitMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerToClientMessage_BPHitMsg_descriptor_;
  metadata.reflection = ServerToClientMessage_BPHitMsg_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServerToClientMessage_StackTraceInfoMsg::kFramesFieldNumber;
#endif  // !_MSC_VER

ServerToClientMessage_StackTraceInfoMsg::ServerToClientMessage_StackTraceInfoMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerToClientMessage_StackTraceInfoMsg::InitAsDefaultInstance() {
}

ServerToClientMessage_StackTraceInfoMsg::ServerToClientMessage_StackTraceInfoMsg(const ServerToClientMessage_StackTraceInfoMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerToClientMessage_StackTraceInfoMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerToClientMessage_StackTraceInfoMsg::~ServerToClientMessage_StackTraceInfoMsg() {
  SharedDtor();
}

void ServerToClientMessage_StackTraceInfoMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerToClientMessage_StackTraceInfoMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerToClientMessage_StackTraceInfoMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerToClientMessage_StackTraceInfoMsg_descriptor_;
}

const ServerToClientMessage_StackTraceInfoMsg& ServerToClientMessage_StackTraceInfoMsg::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_debugservermessages_2eproto();  return *default_instance_;
}

ServerToClientMessage_StackTraceInfoMsg* ServerToClientMessage_StackTraceInfoMsg::default_instance_ = nullptr;

ServerToClientMessage_StackTraceInfoMsg* ServerToClientMessage_StackTraceInfoMsg::New() const {
  return new ServerToClientMessage_StackTraceInfoMsg;
}

void ServerToClientMessage_StackTraceInfoMsg::Clear() {
  frames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerToClientMessage_StackTraceInfoMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .debugservermessages.ServerToClientMessage.StackFrameInfo frames = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frames()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_frames;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerToClientMessage_StackTraceInfoMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .debugservermessages.ServerToClientMessage.StackFrameInfo frames = 1;
  for (int i = 0; i < this->frames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->frames(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerToClientMessage_StackTraceInfoMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .debugservermessages.ServerToClientMessage.StackFrameInfo frames = 1;
  for (int i = 0; i < this->frames_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->frames(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerToClientMessage_StackTraceInfoMsg::ByteSize() const {
  int total_size = 0;
  
  // repeated .debugservermessages.ServerToClientMessage.StackFrameInfo frames = 1;
  total_size += 1 * this->frames_size();
  for (int i = 0; i < this->frames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frames(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerToClientMessage_StackTraceInfoMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerToClientMessage_StackTraceInfoMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerToClientMessage_StackTraceInfoMsg*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerToClientMessage_StackTraceInfoMsg::MergeFrom(const ServerToClientMessage_StackTraceInfoMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  frames_.MergeFrom(from.frames_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerToClientMessage_StackTraceInfoMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToClientMessage_StackTraceInfoMsg::CopyFrom(const ServerToClientMessage_StackTraceInfoMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToClientMessage_StackTraceInfoMsg::IsInitialized() const {
  
  for (int i = 0; i < frames_size(); i++) {
    if (!this->frames(i).IsInitialized()) return false;
  }
  return true;
}

void ServerToClientMessage_StackTraceInfoMsg::Swap(ServerToClientMessage_StackTraceInfoMsg* other) {
  if (other != this) {
    frames_.Swap(&other->frames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerToClientMessage_StackTraceInfoMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerToClientMessage_StackTraceInfoMsg_descriptor_;
  metadata.reflection = ServerToClientMessage_StackTraceInfoMsg_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServerToClientMessage_MemoryRangeInfoMsg::kBufFieldNumber;
#endif  // !_MSC_VER

ServerToClientMessage_MemoryRangeInfoMsg::ServerToClientMessage_MemoryRangeInfoMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerToClientMessage_MemoryRangeInfoMsg::InitAsDefaultInstance() {
}

ServerToClientMessage_MemoryRangeInfoMsg::ServerToClientMessage_MemoryRangeInfoMsg(const ServerToClientMessage_MemoryRangeInfoMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerToClientMessage_MemoryRangeInfoMsg::SharedCtor() {
  _cached_size_ = 0;
  buf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerToClientMessage_MemoryRangeInfoMsg::~ServerToClientMessage_MemoryRangeInfoMsg() {
  SharedDtor();
}

void ServerToClientMessage_MemoryRangeInfoMsg::SharedDtor() {
  if (buf_ != &::google::protobuf::internal::kEmptyString) {
    delete buf_;
  }
  if (this != default_instance_) {
  }
}

void ServerToClientMessage_MemoryRangeInfoMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerToClientMessage_MemoryRangeInfoMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerToClientMessage_MemoryRangeInfoMsg_descriptor_;
}

const ServerToClientMessage_MemoryRangeInfoMsg& ServerToClientMessage_MemoryRangeInfoMsg::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_debugservermessages_2eproto();  return *default_instance_;
}

ServerToClientMessage_MemoryRangeInfoMsg* ServerToClientMessage_MemoryRangeInfoMsg::default_instance_ = nullptr;

ServerToClientMessage_MemoryRangeInfoMsg* ServerToClientMessage_MemoryRangeInfoMsg::New() const {
  return new ServerToClientMessage_MemoryRangeInfoMsg;
}

void ServerToClientMessage_MemoryRangeInfoMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_buf()) {
      if (buf_ != &::google::protobuf::internal::kEmptyString) {
        buf_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerToClientMessage_MemoryRangeInfoMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes buf = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerToClientMessage_MemoryRangeInfoMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes buf = 1;
  if (has_buf()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->buf(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerToClientMessage_MemoryRangeInfoMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes buf = 1;
  if (has_buf()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->buf(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerToClientMessage_MemoryRangeInfoMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes buf = 1;
    if (has_buf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buf());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerToClientMessage_MemoryRangeInfoMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerToClientMessage_MemoryRangeInfoMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerToClientMessage_MemoryRangeInfoMsg*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerToClientMessage_MemoryRangeInfoMsg::MergeFrom(const ServerToClientMessage_MemoryRangeInfoMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buf()) {
      set_buf(from.buf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerToClientMessage_MemoryRangeInfoMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToClientMessage_MemoryRangeInfoMsg::CopyFrom(const ServerToClientMessage_MemoryRangeInfoMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToClientMessage_MemoryRangeInfoMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ServerToClientMessage_MemoryRangeInfoMsg::Swap(ServerToClientMessage_MemoryRangeInfoMsg* other) {
  if (other != this) {
    std::swap(buf_, other->buf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerToClientMessage_MemoryRangeInfoMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerToClientMessage_MemoryRangeInfoMsg_descriptor_;
  metadata.reflection = ServerToClientMessage_MemoryRangeInfoMsg_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServerToClientMessage::kTypeFieldNumber;
const int ServerToClientMessage::kCmdErrorMsgFieldNumber;
const int ServerToClientMessage::kStartSessionAckMsgFieldNumber;
const int ServerToClientMessage::kBphitMsgFieldNumber;
const int ServerToClientMessage::kStackTraceInfoMsgFieldNumber;
const int ServerToClientMessage::kMemoryRangeInfoMsgFieldNumber;
#endif  // !_MSC_VER

ServerToClientMessage::ServerToClientMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerToClientMessage::InitAsDefaultInstance() {
  cmd_error_msg_ = const_cast< ::debugservermessages::ServerToClientMessage_CmdErrorMsg*>(&::debugservermessages::ServerToClientMessage_CmdErrorMsg::default_instance());
  start_session_ack_msg_ = const_cast< ::debugservermessages::ServerToClientMessage_StartSessionAckMsg*>(&::debugservermessages::ServerToClientMessage_StartSessionAckMsg::default_instance());
  bphit_msg_ = const_cast< ::debugservermessages::ServerToClientMessage_BPHitMsg*>(&::debugservermessages::ServerToClientMessage_BPHitMsg::default_instance());
  stack_trace_info_msg_ = const_cast< ::debugservermessages::ServerToClientMessage_StackTraceInfoMsg*>(&::debugservermessages::ServerToClientMessage_StackTraceInfoMsg::default_instance());
  memory_range_info_msg_ = const_cast< ::debugservermessages::ServerToClientMessage_MemoryRangeInfoMsg*>(&::debugservermessages::ServerToClientMessage_MemoryRangeInfoMsg::default_instance());
}

ServerToClientMessage::ServerToClientMessage(const ServerToClientMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerToClientMessage::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  cmd_error_msg_ = nullptr;
  start_session_ack_msg_ = nullptr;
  bphit_msg_ = nullptr;
  stack_trace_info_msg_ = nullptr;
  memory_range_info_msg_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerToClientMessage::~ServerToClientMessage() {
  SharedDtor();
}

void ServerToClientMessage::SharedDtor() {
  if (this != default_instance_) {
    delete cmd_error_msg_;
    delete start_session_ack_msg_;
    delete bphit_msg_;
    delete stack_trace_info_msg_;
    delete memory_range_info_msg_;
  }
}

void ServerToClientMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerToClientMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerToClientMessage_descriptor_;
}

const ServerToClientMessage& ServerToClientMessage::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_debugservermessages_2eproto();  return *default_instance_;
}

ServerToClientMessage* ServerToClientMessage::default_instance_ = nullptr;

ServerToClientMessage* ServerToClientMessage::New() const {
  return new ServerToClientMessage;
}

void ServerToClientMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_cmd_error_msg()) {
      if (cmd_error_msg_ != nullptr) cmd_error_msg_->::debugservermessages::ServerToClientMessage_CmdErrorMsg::Clear();
    }
    if (has_start_session_ack_msg()) {
      if (start_session_ack_msg_ != nullptr) start_session_ack_msg_->::debugservermessages::ServerToClientMessage_StartSessionAckMsg::Clear();
    }
    if (has_bphit_msg()) {
      if (bphit_msg_ != nullptr) bphit_msg_->::debugservermessages::ServerToClientMessage_BPHitMsg::Clear();
    }
    if (has_stack_trace_info_msg()) {
      if (stack_trace_info_msg_ != nullptr) stack_trace_info_msg_->::debugservermessages::ServerToClientMessage_StackTraceInfoMsg::Clear();
    }
    if (has_memory_range_info_msg()) {
      if (memory_range_info_msg_ != nullptr) memory_range_info_msg_->::debugservermessages::ServerToClientMessage_MemoryRangeInfoMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerToClientMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .debugservermessages.ServerToClientMessage.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::debugservermessages::ServerToClientMessage_Type_IsValid(value)) {
            set_type(static_cast< ::debugservermessages::ServerToClientMessage_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_cmd_error_msg;
        break;
      }
      
      // optional .debugservermessages.ServerToClientMessage.CmdErrorMsg cmd_error_msg = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cmd_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd_error_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_start_session_ack_msg;
        break;
      }
      
      // optional .debugservermessages.ServerToClientMessage.StartSessionAckMsg start_session_ack_msg = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_session_ack_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_session_ack_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_bphit_msg;
        break;
      }
      
      // optional .debugservermessages.ServerToClientMessage.BPHitMsg bphit_msg = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bphit_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bphit_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_stack_trace_info_msg;
        break;
      }
      
      // optional .debugservermessages.ServerToClientMessage.StackTraceInfoMsg stack_trace_info_msg = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stack_trace_info_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stack_trace_info_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_memory_range_info_msg;
        break;
      }
      
      // optional .debugservermessages.ServerToClientMessage.MemoryRangeInfoMsg memory_range_info_msg = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_memory_range_info_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memory_range_info_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerToClientMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .debugservermessages.ServerToClientMessage.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .debugservermessages.ServerToClientMessage.CmdErrorMsg cmd_error_msg = 21;
  if (has_cmd_error_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->cmd_error_msg(), output);
  }
  
  // optional .debugservermessages.ServerToClientMessage.StartSessionAckMsg start_session_ack_msg = 22;
  if (has_start_session_ack_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->start_session_ack_msg(), output);
  }
  
  // optional .debugservermessages.ServerToClientMessage.BPHitMsg bphit_msg = 31;
  if (has_bphit_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->bphit_msg(), output);
  }
  
  // optional .debugservermessages.ServerToClientMessage.StackTraceInfoMsg stack_trace_info_msg = 41;
  if (has_stack_trace_info_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->stack_trace_info_msg(), output);
  }
  
  // optional .debugservermessages.ServerToClientMessage.MemoryRangeInfoMsg memory_range_info_msg = 51;
  if (has_memory_range_info_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->memory_range_info_msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerToClientMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .debugservermessages.ServerToClientMessage.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional .debugservermessages.ServerToClientMessage.CmdErrorMsg cmd_error_msg = 21;
  if (has_cmd_error_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->cmd_error_msg(), target);
  }
  
  // optional .debugservermessages.ServerToClientMessage.StartSessionAckMsg start_session_ack_msg = 22;
  if (has_start_session_ack_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->start_session_ack_msg(), target);
  }
  
  // optional .debugservermessages.ServerToClientMessage.BPHitMsg bphit_msg = 31;
  if (has_bphit_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->bphit_msg(), target);
  }
  
  // optional .debugservermessages.ServerToClientMessage.StackTraceInfoMsg stack_trace_info_msg = 41;
  if (has_stack_trace_info_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->stack_trace_info_msg(), target);
  }
  
  // optional .debugservermessages.ServerToClientMessage.MemoryRangeInfoMsg memory_range_info_msg = 51;
  if (has_memory_range_info_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->memory_range_info_msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerToClientMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .debugservermessages.ServerToClientMessage.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .debugservermessages.ServerToClientMessage.CmdErrorMsg cmd_error_msg = 21;
    if (has_cmd_error_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmd_error_msg());
    }
    
    // optional .debugservermessages.ServerToClientMessage.StartSessionAckMsg start_session_ack_msg = 22;
    if (has_start_session_ack_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_session_ack_msg());
    }
    
    // optional .debugservermessages.ServerToClientMessage.BPHitMsg bphit_msg = 31;
    if (has_bphit_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bphit_msg());
    }
    
    // optional .debugservermessages.ServerToClientMessage.StackTraceInfoMsg stack_trace_info_msg = 41;
    if (has_stack_trace_info_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stack_trace_info_msg());
    }
    
    // optional .debugservermessages.ServerToClientMessage.MemoryRangeInfoMsg memory_range_info_msg = 51;
    if (has_memory_range_info_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memory_range_info_msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerToClientMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerToClientMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerToClientMessage*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerToClientMessage::MergeFrom(const ServerToClientMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cmd_error_msg()) {
      mutable_cmd_error_msg()->::debugservermessages::ServerToClientMessage_CmdErrorMsg::MergeFrom(from.cmd_error_msg());
    }
    if (from.has_start_session_ack_msg()) {
      mutable_start_session_ack_msg()->::debugservermessages::ServerToClientMessage_StartSessionAckMsg::MergeFrom(from.start_session_ack_msg());
    }
    if (from.has_bphit_msg()) {
      mutable_bphit_msg()->::debugservermessages::ServerToClientMessage_BPHitMsg::MergeFrom(from.bphit_msg());
    }
    if (from.has_stack_trace_info_msg()) {
      mutable_stack_trace_info_msg()->::debugservermessages::ServerToClientMessage_StackTraceInfoMsg::MergeFrom(from.stack_trace_info_msg());
    }
    if (from.has_memory_range_info_msg()) {
      mutable_memory_range_info_msg()->::debugservermessages::ServerToClientMessage_MemoryRangeInfoMsg::MergeFrom(from.memory_range_info_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerToClientMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToClientMessage::CopyFrom(const ServerToClientMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToClientMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_cmd_error_msg()) {
    if (!this->cmd_error_msg().IsInitialized()) return false;
  }
  if (has_start_session_ack_msg()) {
    if (!this->start_session_ack_msg().IsInitialized()) return false;
  }
  if (has_bphit_msg()) {
    if (!this->bphit_msg().IsInitialized()) return false;
  }
  if (has_stack_trace_info_msg()) {
    if (!this->stack_trace_info_msg().IsInitialized()) return false;
  }
  if (has_memory_range_info_msg()) {
    if (!this->memory_range_info_msg().IsInitialized()) return false;
  }
  return true;
}

void ServerToClientMessage::Swap(ServerToClientMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(cmd_error_msg_, other->cmd_error_msg_);
    std::swap(start_session_ack_msg_, other->start_session_ack_msg_);
    std::swap(bphit_msg_, other->bphit_msg_);
    std::swap(stack_trace_info_msg_, other->stack_trace_info_msg_);
    std::swap(memory_range_info_msg_, other->memory_range_info_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerToClientMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerToClientMessage_descriptor_;
  metadata.reflection = ServerToClientMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LineInfo::kFileFieldNumber;
const int LineInfo::kLinenoFieldNumber;
#endif  // !_MSC_VER

LineInfo::LineInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LineInfo::InitAsDefaultInstance() {
}

LineInfo::LineInfo(const LineInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LineInfo::SharedCtor() {
  _cached_size_ = 0;
  file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lineno_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LineInfo::~LineInfo() {
  SharedDtor();
}

void LineInfo::SharedDtor() {
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    delete file_;
  }
  if (this != default_instance_) {
  }
}

void LineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineInfo_descriptor_;
}

const LineInfo& LineInfo::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_debugservermessages_2eproto();  return *default_instance_;
}

LineInfo* LineInfo::default_instance_ = nullptr;

LineInfo* LineInfo::New() const {
  return new LineInfo;
}

void LineInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file()) {
      if (file_ != &::google::protobuf::internal::kEmptyString) {
        file_->clear();
      }
    }
    lineno_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lineno;
        break;
      }
      
      // required uint32 lineno = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lineno:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lineno_)));
          set_has_lineno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file = 1;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file(), output);
  }
  
  // required uint32 lineno = 2;
  if (has_lineno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lineno(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LineInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string file = 1;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file(), target);
  }
  
  // required uint32 lineno = 2;
  if (has_lineno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lineno(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LineInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file = 1;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file());
    }
    
    // required uint32 lineno = 2;
    if (has_lineno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lineno());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LineInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LineInfo*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LineInfo::MergeFrom(const LineInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file()) {
      set_file(from.file());
    }
    if (from.has_lineno()) {
      set_lineno(from.lineno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LineInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineInfo::CopyFrom(const LineInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void LineInfo::Swap(LineInfo* other) {
  if (other != this) {
    std::swap(file_, other->file_);
    std::swap(lineno_, other->lineno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LineInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LineInfo_descriptor_;
  metadata.reflection = LineInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* VarTypeDescriptor_Tag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VarTypeDescriptor_Tag_descriptor_;
}
bool VarTypeDescriptor_Tag_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const VarTypeDescriptor_Tag VarTypeDescriptor::BASIC;
const VarTypeDescriptor_Tag VarTypeDescriptor::POINTER;
const VarTypeDescriptor_Tag VarTypeDescriptor::ARRAY;
const VarTypeDescriptor_Tag VarTypeDescriptor::VECTOR;
const VarTypeDescriptor_Tag VarTypeDescriptor::TYPEDEF;
const VarTypeDescriptor_Tag VarTypeDescriptor::ENUM;
const VarTypeDescriptor_Tag VarTypeDescriptor::STRUCT;
const VarTypeDescriptor_Tag VarTypeDescriptor::UNKNOWN;
const VarTypeDescriptor_Tag VarTypeDescriptor::Tag_MIN;
const VarTypeDescriptor_Tag VarTypeDescriptor::Tag_MAX;
const int VarTypeDescriptor::Tag_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int VarTypeDescriptor::kTagFieldNumber;
const int VarTypeDescriptor::kTypeBasicFieldNumber;
const int VarTypeDescriptor::kTypePointerFieldNumber;
const int VarTypeDescriptor::kTypeArrayFieldNumber;
const int VarTypeDescriptor::kTypeVectorFieldNumber;
const int VarTypeDescriptor::kTypeTypedefFieldNumber;
const int VarTypeDescriptor::kTypeEnumFieldNumber;
const int VarTypeDescriptor::kTypeStructFieldNumber;
#endif  // !_MSC_VER

VarTypeDescriptor::VarTypeDescriptor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VarTypeDescriptor::InitAsDefaultInstance() {
  type_basic_ = const_cast< ::debugservermessages::VarTypeBasic*>(&::debugservermessages::VarTypeBasic::default_instance());
  type_pointer_ = const_cast< ::debugservermessages::VarTypePointer*>(&::debugservermessages::VarTypePointer::default_instance());
  type_array_ = const_cast< ::debugservermessages::VarTypeArray*>(&::debugservermessages::VarTypeArray::default_instance());
  type_vector_ = const_cast< ::debugservermessages::VarTypeVector*>(&::debugservermessages::VarTypeVector::default_instance());
  type_typedef_ = const_cast< ::debugservermessages::VarTypeTypedef*>(&::debugservermessages::VarTypeTypedef::default_instance());
  type_enum_ = const_cast< ::debugservermessages::VarTypeEnum*>(&::debugservermessages::VarTypeEnum::default_instance());
  type_struct_ = const_cast< ::debugservermessages::VarTypeStruct*>(&::debugservermessages::VarTypeStruct::default_instance());
}

VarTypeDescriptor::VarTypeDescriptor(const VarTypeDescriptor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VarTypeDescriptor::SharedCtor() {
  _cached_size_ = 0;
  tag_ = 0;
  type_basic_ = nullptr;
  type_pointer_ = nullptr;
  type_array_ = nullptr;
  type_vector_ = nullptr;
  type_typedef_ = nullptr;
  type_enum_ = nullptr;
  type_struct_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VarTypeDescriptor::~VarTypeDescriptor() {
  SharedDtor();
}

void VarTypeDescriptor::SharedDtor() {
  if (this != default_instance_) {
    delete type_basic_;
    delete type_pointer_;
    delete type_array_;
    delete type_vector_;
    delete type_typedef_;
    delete type_enum_;
    delete type_struct_;
  }
}

void VarTypeDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VarTypeDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VarTypeDescriptor_descriptor_;
}

const VarTypeDescriptor& VarTypeDescriptor::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_debugservermessages_2eproto();  return *default_instance_;
}

VarTypeDescriptor* VarTypeDescriptor::default_instance_ = nullptr;

VarTypeDescriptor* VarTypeDescriptor::New() const {
  return new VarTypeDescriptor;
}

void VarTypeDescriptor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tag_ = 0;
    if (has_type_basic()) {
      if (type_basic_ != nullptr) type_basic_->::debugservermessages::VarTypeBasic::Clear();
    }
    if (has_type_pointer()) {
      if (type_pointer_ != nullptr) type_pointer_->::debugservermessages::VarTypePointer::Clear();
    }
    if (has_type_array()) {
      if (type_array_ != nullptr) type_array_->::debugservermessages::VarTypeArray::Clear();
    }
    if (has_type_vector()) {
      if (type_vector_ != nullptr) type_vector_->::debugservermessages::VarTypeVector::Clear();
    }
    if (has_type_typedef()) {
      if (type_typedef_ != nullptr) type_typedef_->::debugservermessages::VarTypeTypedef::Clear();
    }
    if (has_type_enum()) {
      if (type_enum_ != nullptr) type_enum_->::debugservermessages::VarTypeEnum::Clear();
    }
    if (has_type_struct()) {
      if (type_struct_ != nullptr) type_struct_->::debugservermessages::VarTypeStruct::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VarTypeDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .debugservermessages.VarTypeDescriptor.Tag tag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::debugservermessages::VarTypeDescriptor_Tag_IsValid(value)) {
            set_tag(static_cast< ::debugservermessages::VarTypeDescriptor_Tag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_type_basic;
        break;
      }
      
      // optional .debugservermessages.VarTypeBasic type_basic = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type_basic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_type_basic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_type_pointer;
        break;
      }
      
      // optional .debugservermessages.VarTypePointer type_pointer = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type_pointer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_type_pointer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_type_array;
        break;
      }
      
      // optional .debugservermessages.VarTypeArray type_array = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type_array:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_type_array()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_type_vector;
        break;
      }
      
      // optional .debugservermessages.VarTypeVector type_vector = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type_vector:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_type_vector()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_type_typedef;
        break;
      }
      
      // optional .debugservermessages.VarTypeTypedef type_typedef = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type_typedef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_type_typedef()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_type_enum;
        break;
      }
      
      // optional .debugservermessages.VarTypeEnum type_enum = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type_enum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_type_enum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_type_struct;
        break;
      }
      
      // optional .debugservermessages.VarTypeStruct type_struct = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type_struct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_type_struct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VarTypeDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .debugservermessages.VarTypeDescriptor.Tag tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->tag(), output);
  }
  
  // optional .debugservermessages.VarTypeBasic type_basic = 11;
  if (has_type_basic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->type_basic(), output);
  }
  
  // optional .debugservermessages.VarTypePointer type_pointer = 12;
  if (has_type_pointer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->type_pointer(), output);
  }
  
  // optional .debugservermessages.VarTypeArray type_array = 13;
  if (has_type_array()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->type_array(), output);
  }
  
  // optional .debugservermessages.VarTypeVector type_vector = 14;
  if (has_type_vector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->type_vector(), output);
  }
  
  // optional .debugservermessages.VarTypeTypedef type_typedef = 15;
  if (has_type_typedef()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->type_typedef(), output);
  }
  
  // optional .debugservermessages.VarTypeEnum type_enum = 16;
  if (has_type_enum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->type_enum(), output);
  }
  
  // optional .debugservermessages.VarTypeStruct type_struct = 17;
  if (has_type_struct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->type_struct(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VarTypeDescriptor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .debugservermessages.VarTypeDescriptor.Tag tag = 1;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->tag(), target);
  }
  
  // optional .debugservermessages.VarTypeBasic type_basic = 11;
  if (has_type_basic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->type_basic(), target);
  }
  
  // optional .debugservermessages.VarTypePointer type_pointer = 12;
  if (has_type_pointer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->type_pointer(), target);
  }
  
  // optional .debugservermessages.VarTypeArray type_array = 13;
  if (has_type_array()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->type_array(), target);
  }
  
  // optional .debugservermessages.VarTypeVector type_vector = 14;
  if (has_type_vector()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->type_vector(), target);
  }
  
  // optional .debugservermessages.VarTypeTypedef type_typedef = 15;
  if (has_type_typedef()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->type_typedef(), target);
  }
  
  // optional .debugservermessages.VarTypeEnum type_enum = 16;
  if (has_type_enum()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->type_enum(), target);
  }
  
  // optional .debugservermessages.VarTypeStruct type_struct = 17;
  if (has_type_struct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->type_struct(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VarTypeDescriptor::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .debugservermessages.VarTypeDescriptor.Tag tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tag());
    }
    
    // optional .debugservermessages.VarTypeBasic type_basic = 11;
    if (has_type_basic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->type_basic());
    }
    
    // optional .debugservermessages.VarTypePointer type_pointer = 12;
    if (has_type_pointer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->type_pointer());
    }
    
    // optional .debugservermessages.VarTypeArray type_array = 13;
    if (has_type_array()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->type_array());
    }
    
    // optional .debugservermessages.VarTypeVector type_vector = 14;
    if (has_type_vector()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->type_vector());
    }
    
    // optional .debugservermessages.VarTypeTypedef type_typedef = 15;
    if (has_type_typedef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->type_typedef());
    }
    
    // optional .debugservermessages.VarTypeEnum type_enum = 16;
    if (has_type_enum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->type_enum());
    }
    
    // optional .debugservermessages.VarTypeStruct type_struct = 17;
    if (has_type_struct()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->type_struct());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VarTypeDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VarTypeDescriptor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VarTypeDescriptor*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VarTypeDescriptor::MergeFrom(const VarTypeDescriptor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_type_basic()) {
      mutable_type_basic()->::debugservermessages::VarTypeBasic::MergeFrom(from.type_basic());
    }
    if (from.has_type_pointer()) {
      mutable_type_pointer()->::debugservermessages::VarTypePointer::MergeFrom(from.type_pointer());
    }
    if (from.has_type_array()) {
      mutable_type_array()->::debugservermessages::VarTypeArray::MergeFrom(from.type_array());
    }
    if (from.has_type_vector()) {
      mutable_type_vector()->::debugservermessages::VarTypeVector::MergeFrom(from.type_vector());
    }
    if (from.has_type_typedef()) {
      mutable_type_typedef()->::debugservermessages::VarTypeTypedef::MergeFrom(from.type_typedef());
    }
    if (from.has_type_enum()) {
      mutable_type_enum()->::debugservermessages::VarTypeEnum::MergeFrom(from.type_enum());
    }
    if (from.has_type_struct()) {
      mutable_type_struct()->::debugservermessages::VarTypeStruct::MergeFrom(from.type_struct());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VarTypeDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VarTypeDescriptor::CopyFrom(const VarTypeDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VarTypeDescriptor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_type_basic()) {
    if (!this->type_basic().IsInitialized()) return false;
  }
  if (has_type_pointer()) {
    if (!this->type_pointer().IsInitialized()) return false;
  }
  if (has_type_array()) {
    if (!this->type_array().IsInitialized()) return false;
  }
  if (has_type_vector()) {
    if (!this->type_vector().IsInitialized()) return false;
  }
  if (has_type_typedef()) {
    if (!this->type_typedef().IsInitialized()) return false;
  }
  if (has_type_enum()) {
    if (!this->type_enum().IsInitialized()) return false;
  }
  if (has_type_struct()) {
    if (!this->type_struct().IsInitialized()) return false;
  }
  return true;
}

void VarTypeDescriptor::Swap(VarTypeDescriptor* other) {
  if (other != this) {
    std::swap(tag_, other->tag_);
    std::swap(type_basic_, other->type_basic_);
    std::swap(type_pointer_, other->type_pointer_);
    std::swap(type_array_, other->type_array_);
    std::swap(type_vector_, other->type_vector_);
    std::swap(type_typedef_, other->type_typedef_);
    std::swap(type_enum_, other->type_enum_);
    std::swap(type_struct_, other->type_struct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VarTypeDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VarTypeDescriptor_descriptor_;
  metadata.reflection = VarTypeDescriptor_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* VarTypeBasic_Tag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VarTypeBasic_Tag_descriptor_;
}
bool VarTypeBasic_Tag_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const VarTypeBasic_Tag VarTypeBasic::BOOLEAN;
const VarTypeBasic_Tag VarTypeBasic::FLOAT;
const VarTypeBasic_Tag VarTypeBasic::SIGNED;
const VarTypeBasic_Tag VarTypeBasic::SIGNED_CHAR;
const VarTypeBasic_Tag VarTypeBasic::UNSIGNED;
const VarTypeBasic_Tag VarTypeBasic::UNSIGNED_CHAR;
const VarTypeBasic_Tag VarTypeBasic::UNKNOWN;
const VarTypeBasic_Tag VarTypeBasic::Tag_MIN;
const VarTypeBasic_Tag VarTypeBasic::Tag_MAX;
const int VarTypeBasic::Tag_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int VarTypeBasic::kTagFieldNumber;
const int VarTypeBasic::kSizeNbitsFieldNumber;
const int VarTypeBasic::kNameFieldNumber;
#endif  // !_MSC_VER

VarTypeBasic::VarTypeBasic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VarTypeBasic::InitAsDefaultInstance() {
}

VarTypeBasic::VarTypeBasic(const VarTypeBasic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VarTypeBasic::SharedCtor() {
  _cached_size_ = 0;
  tag_ = 0;
  size_nbits_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VarTypeBasic::~VarTypeBasic() {
  SharedDtor();
}

void VarTypeBasic::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void VarTypeBasic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VarTypeBasic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VarTypeBasic_descriptor_;
}

const VarTypeBasic& VarTypeBasic::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_debugservermessages_2eproto();  return *default_instance_;
}

VarTypeBasic* VarTypeBasic::default_instance_ = nullptr;

VarTypeBasic* VarTypeBasic::New() const {
  return new VarTypeBasic;
}

void VarTypeBasic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tag_ = 0;
    size_nbits_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VarTypeBasic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .debugservermessages.VarTypeBasic.Tag tag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::debugservermessages::VarTypeBasic_Tag_IsValid(value)) {
            set_tag(static_cast< ::debugservermessages::VarTypeBasic_Tag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size_nbits;
        break;
      }
      
      // required uint64 size_nbits = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size_nbits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_nbits_)));
          set_has_size_nbits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_name;
        break;
      }
      
      // required string name = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VarTypeBasic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .debugservermessages.VarTypeBasic.Tag tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->tag(), output);
  }
  
  // required uint64 size_nbits = 2;
  if (has_size_nbits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size_nbits(), output);
  }
  
  // required string name = 20;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VarTypeBasic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .debugservermessages.VarTypeBasic.Tag tag = 1;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->tag(), target);
  }
  
  // required uint64 size_nbits = 2;
  if (has_size_nbits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->size_nbits(), target);
  }
  
  // required string name = 20;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VarTypeBasic::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .debugservermessages.VarTypeBasic.Tag tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tag());
    }
    
    // required uint64 size_nbits = 2;
    if (has_size_nbits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size_nbits());
    }
    
    // required string name = 20;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VarTypeBasic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VarTypeBasic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VarTypeBasic*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VarTypeBasic::MergeFrom(const VarTypeBasic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_size_nbits()) {
      set_size_nbits(from.size_nbits());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VarTypeBasic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VarTypeBasic::CopyFrom(const VarTypeBasic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VarTypeBasic::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void VarTypeBasic::Swap(VarTypeBasic* other) {
  if (other != this) {
    std::swap(tag_, other->tag_);
    std::swap(size_nbits_, other->size_nbits_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VarTypeBasic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VarTypeBasic_descriptor_;
  metadata.reflection = VarTypeBasic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VarTypePointer::kPointeeFieldNumber;
#endif  // !_MSC_VER

VarTypePointer::VarTypePointer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VarTypePointer::InitAsDefaultInstance() {
  pointee_ = const_cast< ::debugservermessages::VarTypeDescriptor*>(&::debugservermessages::VarTypeDescriptor::default_instance());
}

VarTypePointer::VarTypePointer(const VarTypePointer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VarTypePointer::SharedCtor() {
  _cached_size_ = 0;
  pointee_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VarTypePointer::~VarTypePointer() {
  SharedDtor();
}

void VarTypePointer::SharedDtor() {
  if (this != default_instance_) {
    delete pointee_;
  }
}

void VarTypePointer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VarTypePointer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VarTypePointer_descriptor_;
}

const VarTypePointer& VarTypePointer::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_debugservermessages_2eproto();  return *default_instance_;
}

VarTypePointer* VarTypePointer::default_instance_ = nullptr;

VarTypePointer* VarTypePointer::New() const {
  return new VarTypePointer;
}

void VarTypePointer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pointee()) {
      if (pointee_ != nullptr) pointee_->::debugservermessages::VarTypeDescriptor::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VarTypePointer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .debugservermessages.VarTypeDescriptor pointee = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pointee()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VarTypePointer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .debugservermessages.VarTypeDescriptor pointee = 1;
  if (has_pointee()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pointee(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VarTypePointer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .debugservermessages.VarTypeDescriptor pointee = 1;
  if (has_pointee()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pointee(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VarTypePointer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .debugservermessages.VarTypeDescriptor pointee = 1;
    if (has_pointee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pointee());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VarTypePointer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VarTypePointer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VarTypePointer*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VarTypePointer::MergeFrom(const VarTypePointer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pointee()) {
      mutable_pointee()->::debugservermessages::VarTypeDescriptor::MergeFrom(from.pointee());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VarTypePointer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VarTypePointer::CopyFrom(const VarTypePointer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VarTypePointer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_pointee()) {
    if (!this->pointee().IsInitialized()) return false;
  }
  return true;
}

void VarTypePointer::Swap(VarTypePointer* other) {
  if (other != this) {
    std::swap(pointee_, other->pointee_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VarTypePointer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VarTypePointer_descriptor_;
  metadata.reflection = VarTypePointer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VarTypeArray::kElementFieldNumber;
const int VarTypeArray::kDimensionsFieldNumber;
#endif  // !_MSC_VER

VarTypeArray::VarTypeArray()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VarTypeArray::InitAsDefaultInstance() {
  element_ = const_cast< ::debugservermessages::VarTypeDescriptor*>(&::debugservermessages::VarTypeDescriptor::default_instance());
}

VarTypeArray::VarTypeArray(const VarTypeArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VarTypeArray::SharedCtor() {
  _cached_size_ = 0;
  element_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VarTypeArray::~VarTypeArray() {
  SharedDtor();
}

void VarTypeArray::SharedDtor() {
  if (this != default_instance_) {
    delete element_;
  }
}

void VarTypeArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VarTypeArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VarTypeArray_descriptor_;
}

const VarTypeArray& VarTypeArray::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_debugservermessages_2eproto();  return *default_instance_;
}

VarTypeArray* VarTypeArray::default_instance_ = nullptr;

VarTypeArray* VarTypeArray::New() const {
  return new VarTypeArray;
}

void VarTypeArray::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_element()) {
      if (element_ != nullptr) element_->::debugservermessages::VarTypeDescriptor::Clear();
    }
  }
  dimensions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VarTypeArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .debugservermessages.VarTypeDescriptor element = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_element()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dimensions;
        break;
      }
      
      // repeated uint64 dimensions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dimensions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_dimensions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_dimensions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dimensions;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VarTypeArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .debugservermessages.VarTypeDescriptor element = 1;
  if (has_element()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->element(), output);
  }
  
  // repeated uint64 dimensions = 2;
  for (int i = 0; i < this->dimensions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->dimensions(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VarTypeArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .debugservermessages.VarTypeDescriptor element = 1;
  if (has_element()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->element(), target);
  }
  
  // repeated uint64 dimensions = 2;
  for (int i = 0; i < this->dimensions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->dimensions(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VarTypeArray::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .debugservermessages.VarTypeDescriptor element = 1;
    if (has_element()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->element());
    }
    
  }
  // repeated uint64 dimensions = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->dimensions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->dimensions(i));
    }
    total_size += 1 * this->dimensions_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VarTypeArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VarTypeArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VarTypeArray*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VarTypeArray::MergeFrom(const VarTypeArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  dimensions_.MergeFrom(from.dimensions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_element()) {
      mutable_element()->::debugservermessages::VarTypeDescriptor::MergeFrom(from.element());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VarTypeArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VarTypeArray::CopyFrom(const VarTypeArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VarTypeArray::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_element()) {
    if (!this->element().IsInitialized()) return false;
  }
  return true;
}

void VarTypeArray::Swap(VarTypeArray* other) {
  if (other != this) {
    std::swap(element_, other->element_);
    dimensions_.Swap(&other->dimensions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VarTypeArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VarTypeArray_descriptor_;
  metadata.reflection = VarTypeArray_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VarTypeEnum_EnumEntry::kNameFieldNumber;
const int VarTypeEnum_EnumEntry::kValueFieldNumber;
#endif  // !_MSC_VER

VarTypeEnum_EnumEntry::VarTypeEnum_EnumEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VarTypeEnum_EnumEntry::InitAsDefaultInstance() {
}

VarTypeEnum_EnumEntry::VarTypeEnum_EnumEntry(const VarTypeEnum_EnumEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VarTypeEnum_EnumEntry::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VarTypeEnum_EnumEntry::~VarTypeEnum_EnumEntry() {
  SharedDtor();
}

void VarTypeEnum_EnumEntry::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void VarTypeEnum_EnumEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VarTypeEnum_EnumEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VarTypeEnum_EnumEntry_descriptor_;
}

const VarTypeEnum_EnumEntry& VarTypeEnum_EnumEntry::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_debugservermessages_2eproto();  return *default_instance_;
}

VarTypeEnum_EnumEntry* VarTypeEnum_EnumEntry::default_instance_ = nullptr;

VarTypeEnum_EnumEntry* VarTypeEnum_EnumEntry::New() const {
  return new VarTypeEnum_EnumEntry;
}

void VarTypeEnum_EnumEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    value_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VarTypeEnum_EnumEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // required uint64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VarTypeEnum_EnumEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required uint64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VarTypeEnum_EnumEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required uint64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VarTypeEnum_EnumEntry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required uint64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VarTypeEnum_EnumEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VarTypeEnum_EnumEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VarTypeEnum_EnumEntry*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VarTypeEnum_EnumEntry::MergeFrom(const VarTypeEnum_EnumEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VarTypeEnum_EnumEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VarTypeEnum_EnumEntry::CopyFrom(const VarTypeEnum_EnumEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VarTypeEnum_EnumEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void VarTypeEnum_EnumEntry::Swap(VarTypeEnum_EnumEntry* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VarTypeEnum_EnumEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VarTypeEnum_EnumEntry_descriptor_;
  metadata.reflection = VarTypeEnum_EnumEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int VarTypeEnum::kNameFieldNumber;
const int VarTypeEnum::kEntriesFieldNumber;
#endif  // !_MSC_VER

VarTypeEnum::VarTypeEnum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VarTypeEnum::InitAsDefaultInstance() {
}

VarTypeEnum::VarTypeEnum(const VarTypeEnum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VarTypeEnum::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VarTypeEnum::~VarTypeEnum() {
  SharedDtor();
}

void VarTypeEnum::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void VarTypeEnum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VarTypeEnum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VarTypeEnum_descriptor_;
}

const VarTypeEnum& VarTypeEnum::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_debugservermessages_2eproto();  return *default_instance_;
}

VarTypeEnum* VarTypeEnum::default_instance_ = nullptr;

VarTypeEnum* VarTypeEnum::New() const {
  return new VarTypeEnum;
}

void VarTypeEnum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VarTypeEnum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entries;
        break;
      }
      
      // repeated .debugservermessages.VarTypeEnum.EnumEntry entries = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entries;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VarTypeEnum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // repeated .debugservermessages.VarTypeEnum.EnumEntry entries = 2;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entries(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VarTypeEnum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // repeated .debugservermessages.VarTypeEnum.EnumEntry entries = 2;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entries(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VarTypeEnum::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  // repeated .debugservermessages.VarTypeEnum.EnumEntry entries = 2;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VarTypeEnum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VarTypeEnum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VarTypeEnum*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VarTypeEnum::MergeFrom(const VarTypeEnum& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VarTypeEnum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VarTypeEnum::CopyFrom(const VarTypeEnum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VarTypeEnum::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < entries_size(); i++) {
    if (!this->entries(i).IsInitialized()) return false;
  }
  return true;
}

void VarTypeEnum::Swap(VarTypeEnum* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VarTypeEnum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VarTypeEnum_descriptor_;
  metadata.reflection = VarTypeEnum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VarTypeStruct_StructMember::kNameFieldNumber;
const int VarTypeStruct_StructMember::kSizeNbitsFieldNumber;
const int VarTypeStruct_StructMember::kAlignNbitsFieldNumber;
const int VarTypeStruct_StructMember::kOffsetNbitsFieldNumber;
const int VarTypeStruct_StructMember::kTypeFieldNumber;
#endif  // !_MSC_VER

VarTypeStruct_StructMember::VarTypeStruct_StructMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VarTypeStruct_StructMember::InitAsDefaultInstance() {
  type_ = const_cast< ::debugservermessages::VarTypeDescriptor*>(&::debugservermessages::VarTypeDescriptor::default_instance());
}

VarTypeStruct_StructMember::VarTypeStruct_StructMember(const VarTypeStruct_StructMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VarTypeStruct_StructMember::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_nbits_ = GOOGLE_ULONGLONG(0);
  align_nbits_ = GOOGLE_ULONGLONG(0);
  offset_nbits_ = GOOGLE_ULONGLONG(0);
  type_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VarTypeStruct_StructMember::~VarTypeStruct_StructMember() {
  SharedDtor();
}

void VarTypeStruct_StructMember::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete type_;
  }
}

void VarTypeStruct_StructMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VarTypeStruct_StructMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VarTypeStruct_StructMember_descriptor_;
}

const VarTypeStruct_StructMember& VarTypeStruct_StructMember::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_debugservermessages_2eproto();  return *default_instance_;
}

VarTypeStruct_StructMember* VarTypeStruct_StructMember::default_instance_ = nullptr;

VarTypeStruct_StructMember* VarTypeStruct_StructMember::New() const {
  return new VarTypeStruct_StructMember;
}

void VarTypeStruct_StructMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    size_nbits_ = GOOGLE_ULONGLONG(0);
    align_nbits_ = GOOGLE_ULONGLONG(0);
    offset_nbits_ = GOOGLE_ULONGLONG(0);
    if (has_type()) {
      if (type_ != nullptr) type_->::debugservermessages::VarTypeDescriptor::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VarTypeStruct_StructMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size_nbits;
        break;
      }
      
      // required uint64 size_nbits = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size_nbits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_nbits_)));
          set_has_size_nbits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_align_nbits;
        break;
      }
      
      // required uint64 align_nbits = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_align_nbits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &align_nbits_)));
          set_has_align_nbits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_offset_nbits;
        break;
      }
      
      // required uint64 offset_nbits = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset_nbits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_nbits_)));
          set_has_offset_nbits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_type;
        break;
      }
      
      // required .debugservermessages.VarTypeDescriptor type = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VarTypeStruct_StructMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required uint64 size_nbits = 2;
  if (has_size_nbits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size_nbits(), output);
  }
  
  // required uint64 align_nbits = 3;
  if (has_align_nbits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->align_nbits(), output);
  }
  
  // required uint64 offset_nbits = 4;
  if (has_offset_nbits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->offset_nbits(), output);
  }
  
  // required .debugservermessages.VarTypeDescriptor type = 20;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VarTypeStruct_StructMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required uint64 size_nbits = 2;
  if (has_size_nbits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->size_nbits(), target);
  }
  
  // required uint64 align_nbits = 3;
  if (has_align_nbits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->align_nbits(), target);
  }
  
  // required uint64 offset_nbits = 4;
  if (has_offset_nbits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->offset_nbits(), target);
  }
  
  // required .debugservermessages.VarTypeDescriptor type = 20;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VarTypeStruct_StructMember::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required uint64 size_nbits = 2;
    if (has_size_nbits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size_nbits());
    }
    
    // required uint64 align_nbits = 3;
    if (has_align_nbits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->align_nbits());
    }
    
    // required uint64 offset_nbits = 4;
    if (has_offset_nbits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offset_nbits());
    }
    
    // required .debugservermessages.VarTypeDescriptor type = 20;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VarTypeStruct_StructMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VarTypeStruct_StructMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VarTypeStruct_StructMember*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VarTypeStruct_StructMember::MergeFrom(const VarTypeStruct_StructMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_size_nbits()) {
      set_size_nbits(from.size_nbits());
    }
    if (from.has_align_nbits()) {
      set_align_nbits(from.align_nbits());
    }
    if (from.has_offset_nbits()) {
      set_offset_nbits(from.offset_nbits());
    }
    if (from.has_type()) {
      mutable_type()->::debugservermessages::VarTypeDescriptor::MergeFrom(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VarTypeStruct_StructMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VarTypeStruct_StructMember::CopyFrom(const VarTypeStruct_StructMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VarTypeStruct_StructMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_type()) {
    if (!this->type().IsInitialized()) return false;
  }
  return true;
}

void VarTypeStruct_StructMember::Swap(VarTypeStruct_StructMember* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(size_nbits_, other->size_nbits_);
    std::swap(align_nbits_, other->align_nbits_);
    std::swap(offset_nbits_, other->offset_nbits_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VarTypeStruct_StructMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VarTypeStruct_StructMember_descriptor_;
  metadata.reflection = VarTypeStruct_StructMember_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int VarTypeStruct::kNameFieldNumber;
const int VarTypeStruct::kMembersFieldNumber;
#endif  // !_MSC_VER

VarTypeStruct::VarTypeStruct()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VarTypeStruct::InitAsDefaultInstance() {
}

VarTypeStruct::VarTypeStruct(const VarTypeStruct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VarTypeStruct::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VarTypeStruct::~VarTypeStruct() {
  SharedDtor();
}

void VarTypeStruct::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void VarTypeStruct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VarTypeStruct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VarTypeStruct_descriptor_;
}

const VarTypeStruct& VarTypeStruct::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_debugservermessages_2eproto();  return *default_instance_;
}

VarTypeStruct* VarTypeStruct::default_instance_ = nullptr;

VarTypeStruct* VarTypeStruct::New() const {
  return new VarTypeStruct;
}

void VarTypeStruct::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VarTypeStruct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_members;
        break;
      }
      
      // repeated .debugservermessages.VarTypeStruct.StructMember members = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_members;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VarTypeStruct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // repeated .debugservermessages.VarTypeStruct.StructMember members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->members(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VarTypeStruct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // repeated .debugservermessages.VarTypeStruct.StructMember members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->members(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VarTypeStruct::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  // repeated .debugservermessages.VarTypeStruct.StructMember members = 2;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VarTypeStruct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VarTypeStruct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VarTypeStruct*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VarTypeStruct::MergeFrom(const VarTypeStruct& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VarTypeStruct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VarTypeStruct::CopyFrom(const VarTypeStruct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VarTypeStruct::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < members_size(); i++) {
    if (!this->members(i).IsInitialized()) return false;
  }
  return true;
}

void VarTypeStruct::Swap(VarTypeStruct* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    members_.Swap(&other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VarTypeStruct::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VarTypeStruct_descriptor_;
  metadata.reflection = VarTypeStruct_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VarTypeVector::kNameFieldNumber;
#endif  // !_MSC_VER

VarTypeVector::VarTypeVector()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VarTypeVector::InitAsDefaultInstance() {
}

VarTypeVector::VarTypeVector(const VarTypeVector& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VarTypeVector::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VarTypeVector::~VarTypeVector() {
  SharedDtor();
}

void VarTypeVector::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void VarTypeVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VarTypeVector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VarTypeVector_descriptor_;
}

const VarTypeVector& VarTypeVector::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_debugservermessages_2eproto();  return *default_instance_;
}

VarTypeVector* VarTypeVector::default_instance_ = nullptr;

VarTypeVector* VarTypeVector::New() const {
  return new VarTypeVector;
}

void VarTypeVector::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VarTypeVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VarTypeVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VarTypeVector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VarTypeVector::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VarTypeVector::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VarTypeVector* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VarTypeVector*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VarTypeVector::MergeFrom(const VarTypeVector& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VarTypeVector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VarTypeVector::CopyFrom(const VarTypeVector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VarTypeVector::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void VarTypeVector::Swap(VarTypeVector* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VarTypeVector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VarTypeVector_descriptor_;
  metadata.reflection = VarTypeVector_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VarTypeTypedef::kNameFieldNumber;
const int VarTypeTypedef::kOriginalTypeFieldNumber;
#endif  // !_MSC_VER

VarTypeTypedef::VarTypeTypedef()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VarTypeTypedef::InitAsDefaultInstance() {
  original_type_ = const_cast< ::debugservermessages::VarTypeDescriptor*>(&::debugservermessages::VarTypeDescriptor::default_instance());
}

VarTypeTypedef::VarTypeTypedef(const VarTypeTypedef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VarTypeTypedef::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  original_type_ = nullptr;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VarTypeTypedef::~VarTypeTypedef() {
  SharedDtor();
}

void VarTypeTypedef::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete original_type_;
  }
}

void VarTypeTypedef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VarTypeTypedef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VarTypeTypedef_descriptor_;
}

const VarTypeTypedef& VarTypeTypedef::default_instance() {
  if (default_instance_ == nullptr) protobuf_AddDesc_debugservermessages_2eproto();  return *default_instance_;
}

VarTypeTypedef* VarTypeTypedef::default_instance_ = nullptr;

VarTypeTypedef* VarTypeTypedef::New() const {
  return new VarTypeTypedef;
}

void VarTypeTypedef::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_original_type()) {
      if (original_type_ != nullptr) original_type_->::debugservermessages::VarTypeDescriptor::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VarTypeTypedef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_original_type;
        break;
      }
      
      // required .debugservermessages.VarTypeDescriptor original_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_original_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_original_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VarTypeTypedef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required .debugservermessages.VarTypeDescriptor original_type = 2;
  if (has_original_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->original_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VarTypeTypedef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required .debugservermessages.VarTypeDescriptor original_type = 2;
  if (has_original_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->original_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VarTypeTypedef::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required .debugservermessages.VarTypeDescriptor original_type = 2;
    if (has_original_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->original_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VarTypeTypedef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VarTypeTypedef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VarTypeTypedef*>(
      &from);
  if (source == nullptr) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VarTypeTypedef::MergeFrom(const VarTypeTypedef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_original_type()) {
      mutable_original_type()->::debugservermessages::VarTypeDescriptor::MergeFrom(from.original_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VarTypeTypedef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VarTypeTypedef::CopyFrom(const VarTypeTypedef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VarTypeTypedef::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_original_type()) {
    if (!this->original_type().IsInitialized()) return false;
  }
  return true;
}

void VarTypeTypedef::Swap(VarTypeTypedef* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(original_type_, other->original_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VarTypeTypedef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VarTypeTypedef_descriptor_;
  metadata.reflection = VarTypeTypedef_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace debugservermessages

// @@protoc_insertion_point(global_scope)
