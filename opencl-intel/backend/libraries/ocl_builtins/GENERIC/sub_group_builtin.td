//
// Sub group functions and their vectorized versions
//
let NeedForwardDecl = 1 in {
  let Types = [ v1i32,  v4i32,  v8i32,  v16i32 ],
  Attrs = [OVERLOADABLE] in {
    def sub_group_all  : OclBuiltin<"sub_group_all",  (outs gentype:$ret), (ins gentype:$predicate), [], [], 1, 0>;
    def sub_group_any  : OclBuiltin<"sub_group_any",  (outs gentype:$ret), (ins gentype:$predicate), [], [], 1, 0>;
  }

  let Types = [ v1i32, v4i32, v8i32, v16i32,
                v1u32, v4u32, v8u32, v16u32,
                v1i64, v4i64, v8i64, v16i64,
                v1u64, v4u64, v8u64, v16u64,
                v1f32, v4f32, v8f32, v16f32,
                v1f64, v4f64, v8f64, v16f64 ],
      Attrs = [OVERLOADABLE] in {
        def sub_group_broadcast           : OclBuiltin<"sub_group_broadcast",           (outs gentype:$ret), (ins gentype:$src, uint:$sub_group_local_id), [], [], 1, 0>;
        def sub_group_reduce_add          : OclBuiltin<"sub_group_reduce_add",          (outs gentype:$ret), (ins gentype:$src), [], [], 1, 0>;
        def sub_group_reduce_min          : OclBuiltin<"sub_group_reduce_min",          (outs gentype:$ret), (ins gentype:$src), [], [], 1, 0>;
        def sub_group_reduce_max          : OclBuiltin<"sub_group_reduce_max",          (outs gentype:$ret), (ins gentype:$src), [], [], 1, 0>;
        def sub_group_scan_exclusive_add  : OclBuiltin<"sub_group_scan_exclusive_add",  (outs gentype:$ret), (ins gentype:$src), [], [], 1, 0>;
        def sub_group_scan_exclusive_min  : OclBuiltin<"sub_group_scan_exclusive_min",  (outs gentype:$ret), (ins gentype:$src), [], [], 1, 0>;
        def sub_group_scan_exclusive_max  : OclBuiltin<"sub_group_scan_exclusive_max",  (outs gentype:$ret), (ins gentype:$src), [], [], 1, 0>;
        def sub_group_scan_inclusive_add  : OclBuiltin<"sub_group_scan_inclusive_add",  (outs gentype:$ret), (ins gentype:$src), [], [], 1, 0>;
        def sub_group_scan_inclusive_min  : OclBuiltin<"sub_group_scan_inclusive_min",  (outs gentype:$ret), (ins gentype:$src), [], [], 1, 0>;
        def sub_group_scan_inclusive_max  : OclBuiltin<"sub_group_scan_inclusive_max",  (outs gentype:$ret), (ins gentype:$src), [], [], 1, 0>;
      }

  let Types = [ v1i32, v4i32, v8i32, v16i32,
                v1u32, v4u32, v8u32, v16u32,
                v1i64, v4i64, v8i64, v16i64,
                v1u64, v4u64, v8u64, v16u64,
                v1f32, v4f32, v8f32, v16f32,
                v1f64, v4f64, v8f64, v16f64 ],
     Attrs = [OVERLOADABLE] in {
        def sub_group_shuffle     : OclBuiltin<"intel_sub_group_shuffle", (outs gentype:$ret), (ins gentype:$data, u32gentype:$sub_group_local_id), [], [], 1, 0>;
        def sub_group_shuffle_xor : OclBuiltin<"intel_sub_group_shuffle_xor", (outs gentype:$ret), (ins gentype:$data, u32gentype:$value), [], [], 1, 0>;
      }

  // Vector types stubs. vec_len = [2, 4, 8, 16]
  // Declare "scalar" (not vectorized) versions of shuffle.
  let Types = [v2i32, v4i32, v8i32, v16i32,
               v2u32, v4u32, v8u32, v16u32,
               v2f32, v4f32, v8f32, v16f32],
      Attrs = [OVERLOADABLE] in {
        def sub_group_shuffle_vec_type :     OclBuiltin<"intel_sub_group_shuffle", (outs gentype:$ret), (ins gentype:$data, v1u32: $sub_group_local_id), [], [], 1, 0>;
        def sub_group_shuffle_xor_vec_type : OclBuiltin<"intel_sub_group_shuffle_xor", (outs gentype:$ret), (ins gentype:$data, v1u32: $value), [], [], 1, 0>;
      }

  // AVX (VF = 4)
  let Types = [v8i32, v16i32, v32i32, v64i32,
               v8u32, v16u32, v32u32, v64u32,
               v8f32, v16f32, v32f32, v64f32 ],
      Attrs = [OVERLOADABLE] in {
        def sub_group_shuffle_avx : OclBuiltin<"intel_sub_group_shuffle", (outs gentype:$ret), (ins gentype:$data, v4u32:$sub_group_local_id), [], [], 1, 0>;
      }

  // AVX2 (VF = 8)
  let Types = [v16i32, v32i32, v64i32, v128i32,
               v16u32, v32u32, v64u32, v128u32,
               v16f32, v32f32, v64f32, v128f32 ],
      Attrs = [OVERLOADABLE] in {
        def sub_group_shuffle_avx2 : OclBuiltin<"intel_sub_group_shuffle", (outs gentype:$ret), (ins gentype:$data, v8u32:$sub_group_local_id), [], [], 1, 0>;
      }

  // AVX512 (VF = 16)
  let Types = [v32i32, v64i32, v128i32, v256i32,
               v32u32, v64u32, v128u32, v256u32,
               v32f32, v64f32, v128f32, v256f32 ],
      Attrs = [OVERLOADABLE] in {
        def sub_group_shuffle_avx512 : OclBuiltin<"intel_sub_group_shuffle", (outs gentype:$ret), (ins gentype:$data, v16u32:$sub_group_local_id), [], [], 1, 0>;
      }

}

//
// Vectorizer table for scalar and vectorized versions of sub group functions
//
foreach func_name = [ "sub_group_all", "sub_group_any" ] in {
  def func_name#_cell1  : MapCell<!cast<OclBuiltin>(func_name), v1i32>;
  def func_name#_cell4  : MapCell<!cast<OclBuiltin>(func_name), v4i32>;
  def func_name#_cell8  : MapCell<!cast<OclBuiltin>(func_name), v8i32>;
  def func_name#_cell16 : MapCell<!cast<OclBuiltin>(func_name), v16i32>;
  def func_name#_vectorized : MapRow<[
    !cast<MapCell>(func_name#"_cell1"),  //scalar
    nullCell,                            //v2
    !cast<MapCell>(func_name#"_cell4"),  //v4
    !cast<MapCell>(func_name#"_cell8"),  //v8
    !cast<MapCell>(func_name#"_cell16"), //16
    nullCell],                           //3
    0,1>;          //not scalarizable, packetizable
}
foreach func_name = [ "sub_group_broadcast", "sub_group_reduce_add", "sub_group_reduce_min", "sub_group_reduce_max",
                      "sub_group_scan_exclusive_add", "sub_group_scan_exclusive_min", "sub_group_scan_exclusive_max",
                      "sub_group_scan_inclusive_add", "sub_group_scan_inclusive_min", "sub_group_scan_inclusive_max"] in {
  foreach base_type = [ "i32", "u32", "i64", "u64", "f32", "f64" ] in {
    def func_name#_#base_type#_cell1  : MapCell<!cast<OclBuiltin>(func_name), !cast<OclType>("v1"#base_type)>;
    def func_name#_#base_type#_cell4  : MapCell<!cast<OclBuiltin>(func_name), !cast<OclType>("v4"#base_type)>;
    def func_name#_#base_type#_cell8  : MapCell<!cast<OclBuiltin>(func_name), !cast<OclType>("v8"#base_type)>;
    def func_name#_#base_type#_cell16 : MapCell<!cast<OclBuiltin>(func_name), !cast<OclType>("v16"#base_type)>;
    def func_name#_#base_type#_vectorized : MapRow<[
    !cast<MapCell>(func_name#_#base_type#"_cell1"),  //scalar
    nullCell,
    !cast<MapCell>(func_name#_#base_type#"_cell4"),  //v4
    !cast<MapCell>(func_name#_#base_type#"_cell8"),  //v8
    !cast<MapCell>(func_name#_#base_type#"_cell16"), //16
    nullCell],
    0,1>;          //not scalarizable, packetizable
  }
}

foreach func_name = [ "sub_group_shuffle" ] in {
  foreach base_type = [ "i32", "u32", "i64", "u64", "f32", "f64" ] in {
    def func_name#_#base_type#_cell1  : MapCell<!cast<OclBuiltin>(func_name), !cast<OclType>("v1"#base_type)>;
    def func_name#_#base_type#_cell4  : MapCell<!cast<OclBuiltin>(func_name), !cast<OclType>("v4"#base_type)>;
    def func_name#_#base_type#_cell8  : MapCell<!cast<OclBuiltin>(func_name), !cast<OclType>("v8"#base_type)>;
    def func_name#_#base_type#_cell16 : MapCell<!cast<OclBuiltin>(func_name), !cast<OclType>("v16"#base_type)>;
    def func_name#_#base_type#_vectorized : MapRow<[
    !cast<MapCell>(func_name#_#base_type#"_cell1"),  //scalar
    nullCell,
    !cast<MapCell>(func_name#_#base_type#"_cell4"),  //v4
    !cast<MapCell>(func_name#_#base_type#"_cell8"),  //v8
    !cast<MapCell>(func_name#_#base_type#"_cell16"), //16
    nullCell],
    0,1>;          //not scalarizable, packetizable
  }
  foreach base_type = [ "i32", "u32", "f32" ] in {
    def func_name#_#base_type#_v2_cell1  : MapCell<!cast<OclBuiltin>(func_name#_#"vec_type"), !cast<OclType>("v2"#base_type)>;
    def func_name#_#base_type#_v2_cell4  : MapCell<!cast<OclBuiltin>(func_name#_#"avx"), !cast<OclType>("v8"#base_type)>;
    def func_name#_#base_type#_v2_cell8  : MapCell<!cast<OclBuiltin>(func_name#_#"avx2"), !cast<OclType>("v16"#base_type)>;
    def func_name#_#base_type#_v2_cell16 : MapCell<!cast<OclBuiltin>(func_name#_#"avx512"), !cast<OclType>("v32"#base_type)>;
    def func_name#_#base_type#_v2_vectorized : MapRow<[
    !cast<MapCell>(func_name#_#base_type#"_v2_cell1"), //scalar
    nullCell,
    !cast<MapCell>(func_name#_#base_type#"_v2_cell4"), //v4
    !cast<MapCell>(func_name#_#base_type#"_v2_cell8"), //v8
    !cast<MapCell>(func_name#_#base_type#"_v2_cell16"),//v16
    nullCell],
    0,1>;          //not scalarizable, packetizable

    def func_name#_#base_type#_v4_cell1  : MapCell<!cast<OclBuiltin>(func_name#_#"vec_type"), !cast<OclType>("v4"#base_type)>;
    def func_name#_#base_type#_v4_cell4  : MapCell<!cast<OclBuiltin>(func_name#_#"avx"), !cast<OclType>("v16"#base_type)>;
    def func_name#_#base_type#_v4_cell8  : MapCell<!cast<OclBuiltin>(func_name#_#"avx2"), !cast<OclType>("v32"#base_type)>;
    def func_name#_#base_type#_v4_cell16 : MapCell<!cast<OclBuiltin>(func_name#_#"avx512"), !cast<OclType>("v64"#base_type)>;
    def func_name#_#base_type#_v4_vectorized : MapRow<[
    !cast<MapCell>(func_name#_#base_type#"_v4_cell1"), //scalar
    nullCell,
    !cast<MapCell>(func_name#_#base_type#"_v4_cell4"), //v4
    !cast<MapCell>(func_name#_#base_type#"_v4_cell8"), //v8
    !cast<MapCell>(func_name#_#base_type#"_v4_cell16"),//v16
    nullCell],
    0,1>;          //not scalarizable, packetizable

    def func_name#_#base_type#_v8_cell1  : MapCell<!cast<OclBuiltin>(func_name#_#"vec_type"), !cast<OclType>("v8"#base_type)>;
    def func_name#_#base_type#_v8_cell4  : MapCell<!cast<OclBuiltin>(func_name#_#"avx"), !cast<OclType>("v32"#base_type)>;
    def func_name#_#base_type#_v8_cell8  : MapCell<!cast<OclBuiltin>(func_name#_#"avx2"), !cast<OclType>("v64"#base_type)>;
    def func_name#_#base_type#_v8_cell16 : MapCell<!cast<OclBuiltin>(func_name#_#"avx512"), !cast<OclType>("v128"#base_type)>;
    def func_name#_#base_type#_v8_vectorized : MapRow<[
    !cast<MapCell>(func_name#_#base_type#"_v8_cell1"), //scalar
    nullCell,
    !cast<MapCell>(func_name#_#base_type#"_v8_cell4"), //v4
    !cast<MapCell>(func_name#_#base_type#"_v8_cell8"), //v8
    !cast<MapCell>(func_name#_#base_type#"_v8_cell16"),//v16
    nullCell],
    0,1>;          //not scalarizable, packetizable

    def func_name#_#base_type#_v16_cell1  : MapCell<!cast<OclBuiltin>(func_name#_#"vec_type"), !cast<OclType>("v16"#base_type)>;
    def func_name#_#base_type#_v16_cell4  : MapCell<!cast<OclBuiltin>(func_name#_#"avx"), !cast<OclType>("v64"#base_type)>;
    def func_name#_#base_type#_v16_cell8  : MapCell<!cast<OclBuiltin>(func_name#_#"avx2"), !cast<OclType>("v128"#base_type)>;
    def func_name#_#base_type#_v16_cell16 : MapCell<!cast<OclBuiltin>(func_name#_#"avx512"), !cast<OclType>("v256"#base_type)>;
    def func_name#_#base_type#_v16_vectorized : MapRow<[
    !cast<MapCell>(func_name#_#base_type#"_v16_cell1"), //scalar
    nullCell,
    !cast<MapCell>(func_name#_#base_type#"_v16_cell4"), //v4
    !cast<MapCell>(func_name#_#base_type#"_v16_cell8"), //v8
    !cast<MapCell>(func_name#_#base_type#"_v16_cell16"),//v16
    nullCell],
    0,1>;          //not scalarizable, packetizable
  }
}
