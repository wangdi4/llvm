// INTEL CONFIDENTIAL
//
// Copyright 2020 Intel Corporation.
//
// This software and the related documents are Intel copyrighted materials, and
// your use of them is governed by the express license under which they were
// provided to you (License). Unless the License provides otherwise, you may not
// use, modify, copy, publish, distribute, disclose or transmit this software or
// the related documents without Intel's prior written permission.
//
// This software and the related documents are provided as is, with no express
// or implied warranties, other than those that are expressly stated in the
// License.

// This file is ported from llvm-objdump.cpp
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

#ifndef OBJECT_DUMP_H
#define OBJECT_DUMP_H

#include "llvm/ADT/APInt.h"
#include "llvm/MC/MCContext.h"
#include "llvm/MC/MCDisassembler/MCDisassembler.h"
#include "llvm/MC/MCInst.h"
#include "llvm/MC/MCInstPrinter.h"
#include "llvm/MC/MCInstrAnalysis.h"
#include "llvm/MC/MCSubtargetInfo.h"
#include "llvm/Object/ObjectFile.h"
#include "llvm/Support/MemoryBuffer.h"
#include "llvm/Support/TargetRegistry.h"
#include "llvm/Support/raw_ostream.h"

namespace Intel {
namespace OpenCL {
namespace DeviceBackend {
namespace Utils {

class PrettyPrinter {
public:
  virtual ~PrettyPrinter() = default;
  virtual void printInst(llvm::MCInstPrinter &IP, const llvm::MCInst *MI,
                         llvm::ArrayRef<uint8_t> Bytes,
                         llvm::object::SectionedAddress Address,
                         llvm::raw_fd_ostream &OS,
                         llvm::MCSubtargetInfo const &STI, bool NoLeadingAddr,
                         bool NoShowRawInsn);
};

/// This class is a utility to dump object buffer to a file.
/// It is ported from llvm-objdump.
class ObjectDump {
public:
  static ObjectDump &getInstance() {
    static ObjectDump instance;
    return instance;
  }
  ~ObjectDump() {}

  ObjectDump(ObjectDump const &) = delete;
  void operator=(ObjectDump const &) = delete;

  /// Disassemble all sections in object buffer and print to output stream.
  /// This resembles the following command:
  ///   llvm-objdump --disassemble-all --x86-asm-syntax=intel --no-show-raw-insn
  /// @param ObjBuffer Object buffer generated by JIT
  /// @param Out Output file stream
  llvm::Error disassembleAll(const llvm::MemoryBuffer *ObjBuffer,
                             llvm::raw_fd_ostream &Out);

private:
  ObjectDump();

  llvm::Error
  disassembleObject(llvm::raw_fd_ostream &Out, const llvm::Target *TheTarget,
                    const llvm::object::ObjectFile *Obj, llvm::MCContext &Ctx,
                    llvm::MCDisassembler *DisAsm,
                    const llvm::MCInstrAnalysis *MIA, llvm::MCInstPrinter *IP,
                    const llvm::MCSubtargetInfo *STI, bool InlineRelocs);

  bool Demangle;
  bool DisassembleZeroes;
  bool InlineRelocs;
  bool NoLeadingAddr;
  bool NoShowRawInsn;
  bool PrintImmHex;
  uint64_t StartAddress;
  uint64_t StopAddress;
  PrettyPrinter PIP;
};

} // namespace Utils
} // namespace DeviceBackend
} // namespace OpenCL
} // namespace Intel

#endif // OBJECT_DUMP_H
