#
# Create native MIC server using icc compiler
#
get_filename_component( TARGET_NAME ${SATEST_NATIVE_NAME} NAME_WE )

get_filename_component( EXE_FILE_EXTENSION ${SATEST_NATIVE_NAME} EXT )
set( BIN_DIR ${CMAKE_CURRENT_BINARY_DIR}/${INSTALL_SUBDIR} )
set( OUTPUT_DIR ${OCL_TOOLS_BINARY_DIR}/${CMAKE_CFG_INTDIR} )
set( OBJ_FILE_EXTENSION .o )

set( DEVICE MIC )

if (WIN32)
    # Windows
    message( WARNING "MIC native server creation is not supported on Windows yet!")
else ()
    # Linux
    set( TMP_ICC_INSTALL_DIR $ENV{ICC_MIC_COMPILER_PATH} )

    if (NOT TMP_ICC_INSTALL_DIR)
        set (SUITABLE_ICC_INSTALL_DIR /opt/intel/composerxe/bin)
        if (EXISTS ${SUITABLE_ICC_INSTALL_DIR})
          set( TMP_ICC_INSTALL_DIR ${SUITABLE_ICC_INSTALL_DIR} )
          message ("ICC MIC Compiler: ${TMP_ICC_INSTALL_DIR}")
          set(MIC_TARGET "ON")
        else()
          message (WARNING "ICC MIC Compiler not found, No MIC target Build. \nIf want to build MIC target set the enviroment variable ICC_MIC_COMPILER_PATH")
          set(MIC_TARGET "OFF")
        endif()
    endif (NOT TMP_ICC_INSTALL_DIR)

    if (TMP_ICC_INSTALL_DIR)
        # if environment ICC_INSTALL_DIR is set
        set( DEVICE_INIT_ENV_SCRIPT "${TMP_ICC_INSTALL_DIR}/compilervars.sh" )
        message("MIC C COMPILER: ${TMP_ICC_INSTALL_DIR}" )
    else ()
        message( FATAL_ERROR "ICC is not found! Set ICC_MIC_COMPILER_PATH environment variable to point to the ICC with MIC support" )
    endif (TMP_ICC_INSTALL_DIR)
    unset( TMP_ICC_INSTALL_DIR )

    set( DEVICE_COMPILER_SCRIPT compile.sh )
    set( DEVICE_LINKER_SCRIPT   link.sh )

    set( DEVICE_COMPILER ${BIN_DIR}/${DEVICE_COMPILER_SCRIPT} )
    set( DEVICE_LINKER   ${BIN_DIR}/${DEVICE_LINKER_SCRIPT} )
endif (WIN32)

#
# Check for file/dir existence
#    check_file(FILE)
#
function (check_file FILE )
    if (NOT EXISTS ${FILE})
        message( FATAL_ERROR "Cannot find ${FILE}!")
    endif()
endfunction( check_file )

#
# Usage
#     COMPILE_DEVICE_CXX_FILE( <cxx_file_full_path_name> <obj_file_full_path_name>)
#
function ( COMPILE_DEVICE_CXX_FILE FILE_FULL_PATH_NAME OBJ_FILE )
    get_filename_component( FILE_NAME ${FILE_FULL_PATH_NAME} NAME )

    add_custom_command( OUTPUT ${OBJ_FILE}

                        COMMAND ${CMAKE_COMMAND} -E make_directory ${BIN_DIR}
                        COMMAND ${DEVICE_COMPILER} ${FILE_FULL_PATH_NAME} ${OBJ_FILE}

                        MAIN_DEPENDENCY ${FILE_FULL_PATH_NAME}
                        IMPLICIT_DEPENDS CXX ${FILE_FULL_PATH_NAME}
                        DEPENDS ${BIN_DIR}/${DEVICE_COMPILER_SCRIPT} ${HEADER_FILES}
                        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
                        COMMENT "Compiling ${FILE_NAME} for ${DEVICE}"
                        VERBATIM
                        )

endfunction ( COMPILE_DEVICE_CXX_FILE )

#
# Usage
#     LINK_DEVICE_EXE( <full_path_to_target_exe> <full_path_to_obj>.... )
#
function ( LINK_DEVICE_EXE TARGET_EXE )
    get_filename_component( FILE_NAME ${TARGET_EXE} NAME )

    if (${ARGC} GREATER  1)
        set( OBJ_FILES ${ARGN})

        add_custom_command( OUTPUT ${TARGET_EXE}

                            COMMAND ${CMAKE_COMMAND} -E make_directory ${BIN_DIR}
                            COMMAND ${DEVICE_LINKER} ${TARGET_EXE} ${OBJ_FILES}

                            DEPENDS  ${OBJ_FILES} ${BIN_DIR}/${DEVICE_LINKER_SCRIPT}

                            WORKING_DIRECTORY ${BIN_DIR}
                            COMMENT "Linking ${FILE_NAME} for ${DEVICE}"
                            VERBATIM
                            )
    endif (${ARGC} GREATER 1)

endfunction ( LINK_DEVICE_EXE )


#
# Usage
#     add_device_executable( <target_name> <input_cxx_files>.... )
#
function ( add_device_executable TARGET_NAME )

    set( EXE_FILE ${OUTPUT_DIR}/${TARGET_NAME}${EXE_FILE_EXTENSION} )
    set( OBJ_LIST )

    if (${ARGC} GREATER  1)
        foreach( FILE ${ARGN} )
            set( SRC_FILE ${CMAKE_CURRENT_SOURCE_DIR}/${FILE} )

            get_filename_component( FILE_NAME ${FILE} NAME_WE )
            set( OBJ_FILE ${CMAKE_CURRENT_BINARY_DIR}/${FILE_NAME}${OBJ_FILE_EXTENSION} )

            COMPILE_DEVICE_CXX_FILE( ${SRC_FILE} ${OBJ_FILE} )
            list( APPEND OBJ_LIST ${OBJ_FILE} )
        endforeach( FILE )

        LINK_DEVICE_EXE( ${EXE_FILE} ${OBJ_LIST} )

        add_custom_target( ${TARGET_NAME} ALL DEPENDS ${EXE_FILE} )
        install( FILES ${EXE_FILE} DESTINATION bin)
        # copy coi libraries to build subdirectory
        file(COPY ${COI_DIR}/host-linux-release/lib/libcoi_host.so DESTINATION ${OUTPUT_DIR})
        file(COPY ${COI_DIR}/host-linux-release/lib/libcoi_host.so.0 DESTINATION ${OUTPUT_DIR})
    else ()
        message( FATAL_ERROR "No input files specified for ${TARGET_NAME}" )
    endif (${ARGC} GREATER 1)

endfunction ( add_device_executable )


#################################################################################################

check_file(${CMAKE_CURRENT_SOURCE_DIR}/${DEVICE_COMPILER_SCRIPT})
check_file(${CMAKE_CURRENT_SOURCE_DIR}/${DEVICE_LINKER_SCRIPT})

# substitute vars in the scripts
if (NOT EXISTS ${BIN_DIR})
        file(MAKE_DIRECTORY "${BIN_DIR}")
endif()

if (NOT EXISTS ${OUTPUT_DIR})
        file(MAKE_DIRECTORY "${OUTPUT_DIR}")
endif()

# MIC compilation flags
set( MIC_FLAGS  -Werror -fPIC -wd279)

set( MIC_DEBUG_FLAGS    -g -O0 -D_DEBUG )
set( MIC_RELEASE_FLAGS     -O3 -DNDEBUG )

# inlcude path
list( APPEND MIC_FLAGS
                -I ${CMAKE_CURRENT_SOURCE_DIR}
                -I ${CMAKE_CURRENT_SOURCE_DIR}/../
                -I ${CMAKE_CURRENT_SOURCE_DIR}/../../Common
                -I ${BACKEND_ROOT_DIR}/ocl_cpu_backend
                -I ${BACKEND_ROOT_DIR}/ocl_cpu_backend/export
                -I ${BACKEND_ROOT_DIR}/../cl_api
                -I ${COI_DIR}/include
                -I ${BACKEND_ROOT_DIR}/external/vtune/include
                )

# MIC linking flags
set( MIC_LINK_FLAGS      )

# lib path
list( APPEND MIC_LINK_FLAGS
                # library search path at link
                -L ${COI_DIR}/device-linux-release/lib
                #-L ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}
                -L ${OCL_BINARY_DIR}/lib/${CMAKE_CFG_INTDIR}
                #-L ${LLVM_LIBRARY_DIR}/external/vtune/libknc

                # libs to link
                -lcoi_device
                -lOclDeviceExecutor

                -lpthread
                -ljitprofiling

                # add unused defined symbols to the dynamic symbol table - they will be used dynamically
                -rdynamic

                # perform static linkage for internally defined symbols if possible
                -Bsymbolic

                # statically link all intel-specific libs
                -static-intel

                # look for required shared libs in the same dir as exe resides
                #  \\\$ will result in passing \$ to the linker script
                -Wl,-rpath=\\\$ORIGIN -Wl,--enable-new-dtags
                )

set( MIC_DEBUG_LINK_FLAGS     )
set( MIC_RELEASE_LINK_FLAGS   )

if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    # Debug

    list( APPEND MIC_FLAGS      ${MIC_DEBUG_FLAGS} )
    list( APPEND MIC_LINK_FLAGS ${MIC_DEBUG_LINK_FLAGS} )

else (CMAKE_BUILD_TYPE STREQUAL "Debug")
    # Release

    list( APPEND MIC_FLAGS      ${MIC_RELEASE_FLAGS} )
    list( APPEND MIC_LINK_FLAGS ${MIC_RELEASE_LINK_FLAGS} )

endif (CMAKE_BUILD_TYPE STREQUAL "Debug")

# replace ; with spaces
foreach (FLAG ${MIC_FLAGS})
    set( FINAL_MIC_FLAGS "${FINAL_MIC_FLAGS} ${FLAG}")
endforeach( FLAG )

foreach (FLAG ${MIC_LINK_FLAGS})
    set( FINAL_MIC_LINK_FLAGS "${FINAL_MIC_LINK_FLAGS} ${FLAG}")
endforeach( FLAG )

# FINAL_MIC_FLAGS and FINAL_MIC_LINK_FLAGS are used now
configure_file(${DEVICE_COMPILER_SCRIPT} ${BIN_DIR}/${DEVICE_COMPILER_SCRIPT} @ONLY)
configure_file(${DEVICE_LINKER_SCRIPT} ${BIN_DIR}/${DEVICE_LINKER_SCRIPT} @ONLY)

set(TARGET_SOURCES
    OpenCLMICNative.cpp
    WGContext.cpp
    ../Performance.cpp
    ../dbg_utils.cpp
)

set (HEADER_FILES
    WGContext.h
    common.h
    )

add_device_executable(${TARGET_NAME} ${TARGET_SOURCES})

add_dependencies(${TARGET_NAME} OclDeviceExecutor)

