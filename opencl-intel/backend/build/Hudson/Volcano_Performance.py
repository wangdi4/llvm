from optparse import OptionParser
import os.path, sys, platform, glob, fnmatch
from Volcano_Common import EnvironmentValue, VolcanoRunConfig, VolcanoTestRunner, VolcanoTestSuite,VolcanoCmdTask, TestTaskResult, PERFORMANCE_TESTS_ROOT,SUPPORTED_CPUS, SUPPORTED_TARGETS, SUPPORTED_BUILDS, SUPPORTED_VECTOR_SIZES, TIMEOUT_HALFHOUR
from Volcano_Tasks import SimpleTest
import Volcano_CmdUtils

# Note that the iteration count is modified to 3 for the stable cases (STD < 0.005).
# 16 remains the iteration count for all the rest. BIMeter need to be analyzed once 
# we have its STD numbers.
# Arik

WOLFPerformance = [
['checkerboard', 3],
['intel_bas', 3],
['intel_bas_1', 3],
['intel_bilateral2D', 3],
['intel_bilateral2D_1', 3],
['intel_bilateral2D_2', 3],
['intel_bilateral2D_3', 3],
['intel_bilateral2D_4', 3],
['intel_bilateral2D_5', 3],
['intel_bilateral2D_6', 3],
['intel_bilateral2D_7', 3],
['intel_bilateral2D_8', 3],
['intel_bilateral2D_9', 3],
['intel_colorbalance', 3],
['intel_colorbalance_1', 3],
['intel_convolution', 3],
['intel_convolution_1', 3],
['intel_crossfade', 3],
['intel_crossfade_1', 3],
['intel_gauss', 3],
['intel_gauss_1', 3],
['intel_god_rays', 3],
['intel_god_rays_1', 3],
['intel_mandelbrot', 3],
['intel_mandelbrot_1', 3],
['intel_matrix_mult', 3],
['intel_matrix_mult_1', 3],
['intel_matrix_mult_2', 3],
['intel_matrix_mult_3', 3],
['intel_matrix_mult_4', 3],
['intel_matrix_mult_5', 3],
['intel_matrix_mult_6', 3],
['intel_matrix_mult_7', 3],
['intel_matrix_mult_8', 3],
['intel_matrix_mult_9', 3],
['intel_median', 3],
['intel_median_1', 3],
['intel_median_bitonic', 3],
['intel_median_bitonic_1', 3],
['intel_median_bitonic_2', 3],
['intel_median_bitonic_3', 3],
['intel_median_bitonic_4', 3],
['intel_median_bitonic_5', 3],
['intel_median_bitonic_6', 3],
['intel_median_bitonic_7', 3],
['intel_median_bitonic_8', 3],
['intel_median_bitonic_9', 3],
['intel_MonteCarlo', 3],
['intel_MonteCarlo_1', 3],
['intel_NBody', 3],
['intel_NBody_1', 3],
['intel_radar', 3],
['intel_radar_1', 3],
['intel_radial_blur', 3],
['intel_radial_blur_1', 3],
['intel_radial_blur_2', 3],
['intel_radial_blur_3', 3],
['intel_radial_blur_4', 3],
['intel_radial_blur_5', 3],
['intel_radial_blur_6', 3],
['intel_radial_blur_7', 3],
['intel_radial_blur_8', 3],
['intel_radial_blur_9', 3],
['intel_RecGaussian', 16],
['intel_RecGaussian_1', 16],
['intel_rgb2yuv', 3],
['intel_rgb2yuv_1', 3],
['intel_sobel', 3],
['intel_sobel_1', 3],
['intel_sobel8u', 3],
['intel_sobel8u_1', 3],
['intel_tcc', 3],
['intel_tone_mapping', 3],
['wl2Landscape', 3],
['wlATIAES', 3],
['wlATINBody', 3],
['wlATIPrefixSum', 3],
['wlATIRadixSort', 3],
['wlATIRecGaussian', 16],
['wlBitonicSort', 16],
['wlConvolution', 3],
['wlDCT', 3],
['wlDCT_1', 3],
['wlFrameworkOverhead', 3],
['wlHistogram', 3],
['wlHistogram_1', 3],
['wlLcs', 16],
['wlMandelbrot', 3],
['wlMatrixMultiplication', 3],
['wlMersenneTwister', 3],
['wlNVMedian', 3],
['wlPrefixSum', 3],
['wlSimpleBoxBlur', 3],
['wlSubdivision', 3],
['wlTCCACE', 3],
['wlTCCACE.2', 3],
]

WOLFBenchPerformance = [
['WOLFbench.intel_NBody', 3],
['WOLFbench.intel_bitonic_sort', 16],
['WOLFbench.intel_convolution', 3],
['WOLFbench.intel_mandelbrot', 3],
['WOLFbench.intel_matrix_mult', 16],
['WOLFbench.intel_median_bitonic', 3],
['WOLFbench.intel_radar', 3],
['WOLFbench.intel_sobel', 3],
['WOLFbench.intel_DCT', 3],
['WOLFbench.intel_MonteCarlo', 3],
['WOLFbench.intel_crossfade', 3],
['WOLFbench.intel_tone_mapping', 3],
['WOLFbench.intel_bilateral2D', 3],
['WOLFbench.ati_NBody', 3],
['WOLFbench.ati_matrix_mult', 16],
['WOLFbench.ati_sobel', 3],
['WOLFbench.ati_mandelbrot', 3],
['WOLFbench.ati_bitonic_sort', 3],
['WOLFbench.ati_DCT', 3],
['WOLFbench.ati_aes', 3],
['WOLFbench.ati_monte_carlo_asian', 3],
['WOLFbench.ati_RecGaussian', 16],
['WOLFbench.intel_RecGaussian', 16],
['WOLFbench.intel_tcc', 3],
['WOLFbench.intel_ace', 3],
['WOLFbench.intel_god_rays', 3],
['WOLFbench.intel_radial_blur', 3],
['WOLFbench.nvidia_median_filter', 3],
['WOLFbench.nvidia_bitonic_sort', 3],
['WOLFbench.ati_BinOption', 3],
['WOLFbench.ati_FFT', 3],
['WOLFbench.ati_SobelFilterImage', 3],
['WOLFbench.ati_MersenneTwister', 3],
['WOLFbench.ati_ScanLargeArrays', 3],
['WOLFbench.ati_HistogramAtomics', 16],
['WOLFbench.ati_BlackScholes', 3],
['WOLFbench.ati_DwtHaar1D', 3],
['WOLFbench.ati_MatrixTranspose', 3],
['WOLFbench.ati_matrix_mult_image', 16],
]

CyberLinkPerformance = [['CyberLink', 3]]
CyberLinkPerformance.extend([['CyberLink.'+str(i), 3] for i in range(2,7)])
CyberLinkPerformance.extend([['CyberLink.'+str(i), 16] for i in range(7,12)])
CyberLinkPerformance.extend([['CyberLink.'+str(i), 3] for i in range(12,19)])
CyberLinkPerformance.extend([['CyberLink.'+str(i), 3] for i in range(48,72)])

VCSDPerformance = [
['AOBenchOpenCLAll', 3],
['CollisionOCL', 3],
['sdsm_histogram', 3],
['Subdivision', 3],
]

SandraPerformance = [['Cryptography', 3]]
SandraPerformance.extend([['Cryptography.'+str(i), 3] for i in range(2,10)])
SandraPerformance.extend([['Processing', 3]])
SandraPerformance.extend([['Processing.'+str(i), 3] for i in range(2,7)])

LuxMarkPerformance = [
['LuxMark', 16],
['LuxMark.3', 16],
['LuxMark.4', 3],
['LuxMark.6', 16],
]

BIMeterPerformanceIterations = 16
BIMeterPerformance = [
['math_fabs', 16],
['math_fabs.2', 16],
['math_fabs.3', 16],
['math_fabs.4', 16],
['math_fabs.5', 16],
['math_fabs.6', 16],
['math_trunc', 16],
['math_trunc.2', 16],
['math_trunc.3', 16],
['math_trunc.4', 16],
['math_trunc.5', 16],
['math_trunc.6', 16],
['math_ilogb', 16],
['math_ilogb.2', 16],
['math_ilogb.3', 16],
['math_ilogb.4', 16],
['math_ilogb.5', 16],
['math_ilogb.6', 16],
['math_round', 16],
['math_round.2', 16],
['math_round.3', 16],
['math_round.4', 16],
['math_round.5', 16],
['math_round.6', 16],
['math_rint', 16],
['math_rint.2', 16],
['math_rint.3', 16],
['math_rint.4', 16],
['math_rint.5', 16],
['math_rint.6', 16],
['math_ceil', 16],
['math_ceil.2', 16],
['math_ceil.3', 16],
['math_ceil.4', 16],
['math_ceil.5', 16],
['math_ceil.6', 16],
['math_floor', 16],
['math_floor.2', 16],
['math_floor.3', 16],
['math_floor.4', 16],
['math_floor.5', 16],
['math_floor.6', 16],
['math_rsqrt', 16],
['math_rsqrt.2', 16],
['math_rsqrt.3', 16],
['math_rsqrt.4', 16],
['math_rsqrt.5', 16],
['math_rsqrt.6', 16],
['common_clamp', 16],
['common_clamp.2', 16],
['common_clamp.3', 16],
['common_clamp.4', 16],
['common_clamp.5', 16],
['common_clamp.6', 16],
['common_clamp.7', 16],
['common_clamp.8', 16],
['common_clamp.9', 16],
['common_clamp.10', 16],
['common_clamp.11', 16],
['common_mix', 16],
['common_mix.2', 16],
['common_mix.3', 16],
['common_mix.4', 16],
['common_mix.5', 16],
['common_mix.6', 16],
['common_mix.7', 16],
['common_mix.8', 16],
['common_mix.9', 16],
['common_mix.10', 16],
['common_mix.11', 16],
['common_smoothstep', 16],
['common_smoothstep.2', 16],
['common_smoothstep.3', 16],
['common_smoothstep.4', 16],
['common_smoothstep.5', 16],
['common_smoothstep.6', 16],
['common_smoothstep.7', 16],
['common_smoothstep.8', 16],
['common_smoothstep.9', 16],
['common_smoothstep.10', 16],
['common_smoothstep.11', 16],
['common_degrees', 16],
['common_degrees.2', 16],
['common_degrees.3', 16],
['common_degrees.4', 16],
['common_degrees.5', 16],
['common_degrees.6', 16],
['math_minmag', 16],
['math_minmag.2', 16],
['math_minmag.3', 16],
['math_minmag.4', 16],
['math_minmag.5', 16],
['math_minmag.6', 16],
['math_maxmag', 16],
['math_maxmag.2', 16],
['math_maxmag.3', 16],
['math_maxmag.4', 16],
['math_maxmag.5', 16],
['math_maxmag.6', 16],
['common_max', 16],
['common_max.2', 16],
['common_max.3', 16],
['common_max.4', 16],
['common_max.5', 16],
['common_max.6', 16],
['common_max.7', 16],
['common_max.8', 16],
['common_max.9', 16],
['common_max.10', 16],
['common_max.11', 16],
['common_min', 16],
['common_min.2', 16],
['common_min.3', 16],
['common_min.4', 16],
['common_min.5', 16],
['common_min.6', 16],
['common_min.7', 16],
['common_min.8', 16],
['common_min.9', 16],
['common_min.10', 16],
['common_min.11', 16],
['common_radians', 16],
['common_radians.2', 16],
['common_radians.3', 16],
['common_radians.4', 16],
['common_radians.5', 16],
['common_radians.6', 16],
['common_sign', 16],
['common_sign.2', 16],
['common_sign.3', 16],
['common_sign.4', 16],
['common_sign.5', 16],
['common_sign.6', 16],
['common_step', 16],
['common_step.2', 16],
['common_step.3', 16],
['common_step.4', 16],
['common_step.5', 16],
['common_step.6', 16],
['common_step.7', 16],
['common_step.8', 16],
['common_step.9', 16],
['common_step.10', 16],
['common_step.11', 16],
['common_max.6', 16],
['math_fmin', 16],
['math_fmin.2', 16],
['math_fmin.3', 16],
['math_fmin.4', 16],
['math_fmin.5', 16],
['math_fmin.6', 16],
['math_fmin.7', 16],
['math_fmin.8', 16],
['math_fmin.9', 16],
['math_fmin.10', 16],
['math_fmin.11', 16],
['math_fmax', 16],
['math_fmax.2', 16],
['math_fmax.3', 16],
['math_fmax.4', 16],
['math_fmax.5', 16],
['math_fmax.6', 16],
['math_fmax.7', 16],
['math_fmax.8', 16],
['math_fmax.9', 16],
['math_fmax.10', 16],
['math_fmax.11', 16],
['math_copysign', 16],
['math_copysign.2', 16],
['math_copysign.3', 16],
['math_copysign.4', 16],
['math_copysign.5', 16],
['math_copysign.6', 16],
['math_fdim', 16],
['math_fdim.2', 16],
['math_fdim.3', 16],
['math_fdim.4', 16],
['math_fdim.5', 16],
['math_fdim.6', 16],
['math_mad', 16],
['math_mad.2', 16],
['math_mad.3', 16],
['math_mad.4', 16],
['math_mad.5', 16],
['math_mad.6', 16],
['math_nan', 16],
['math_nan.2', 16],
['math_nan.3', 16],
['math_nan.4', 16],
['math_nan.5', 16],
['math_nan.6', 16],
['math_fract', 16],
['math_fract.2', 16],
['math_fract.3', 16],
['math_fract.4', 16],
['math_fract.5', 16],
['math_fract.6', 16],
['math_half_half_cos', 16],
['math_half_half_cos.2', 16],
['math_half_half_cos.3', 16],
['math_half_half_cos.4', 16],
['math_half_half_cos.5', 16],
['math_half_half_cos.6', 16],
['math_half_half_sin', 16],
['math_half_half_sin.2', 16],
['math_half_half_sin.3', 16],
['math_half_half_sin.4', 16],
['math_half_half_sin.5', 16],
['math_half_half_sin.6', 16],
['math_half_half_tan', 16],
['math_half_half_tan.2', 16],
['math_half_half_tan.3', 16],
['math_half_half_tan.4', 16],
['math_half_half_tan.5', 16],
['math_half_half_tan.6', 16],
['math_half_half_divide', 16],
['math_half_half_divide.2', 16],
['math_half_half_divide.3', 16],
['math_half_half_divide.4', 16],
['math_half_half_divide.5', 16],
['math_half_half_divide.6', 16],
['math_half_half_powr', 16],
['math_half_half_powr.2', 16],
['math_half_half_powr.3', 16],
['math_half_half_powr.4', 16],
['math_half_half_powr.5', 16],
['math_half_half_powr.6', 16],
['math_half_half_recip', 16],
['math_half_half_recip.2', 16],
['math_half_half_recip.3', 16],
['math_half_half_recip.4', 16],
['math_half_half_recip.5', 16],
['math_half_half_recip.6', 16],
['math_half_half_rsqrt', 16],
['math_half_half_rsqrt.2', 16],
['math_half_half_rsqrt.3', 16],
['math_half_half_rsqrt.4', 16],
['math_half_half_rsqrt.5', 16],
['math_half_half_rsqrt.6', 16],
['math_half_half_sqrt', 16],
['math_half_half_sqrt.2', 16],
['math_half_half_sqrt.3', 16],
['math_half_half_sqrt.4', 16],
['math_half_half_sqrt.5', 16],
['math_half_half_sqrt.6', 16],
['math_half_half_exp', 16],
['math_half_half_exp.2', 16],
['math_half_half_exp.3', 16],
['math_half_half_exp.4', 16],
['math_half_half_exp.5', 16],
['math_half_half_exp.6', 16],
['math_half_half_exp2', 16],
['math_half_half_exp2.2', 16],
['math_half_half_exp2.3', 16],
['math_half_half_exp2.4', 16],
['math_half_half_exp2.5', 16],
['math_half_half_exp2.6', 16],
['math_half_half_exp10', 16],
['math_half_half_exp10.2', 16],
['math_half_half_exp10.3', 16],
['math_half_half_exp10.4', 16],
['math_half_half_exp10.5', 16],
['math_half_half_exp10.6', 16],
['math_half_half_log', 16],
['math_half_half_log.2', 16],
['math_half_half_log.3', 16],
['math_half_half_log.4', 16],
['math_half_half_log.5', 16],
['math_half_half_log.6', 16],
['math_half_half_log2', 16],
['math_half_half_log2.2', 16],
['math_half_half_log2.3', 16],
['math_half_half_log2.4', 16],
['math_half_half_log2.5', 16],
['math_half_half_log2.6', 16],
['math_half_half_log10', 16],
['math_half_half_log10.2', 16],
['math_half_half_log10.3', 16],
['math_half_half_log10.4', 16],
['math_half_half_log10.5', 16],
['math_half_half_log10.6', 16],
['relational_islessgreater', 16],
['relational_islessgreater.2', 16],
['relational_islessgreater.3', 16],
['relational_islessgreater.4', 16],
['relational_islessgreater.5', 16],
['relational_islessgreater.6', 16],
['relational_isequal', 16],
['relational_isequal.2', 16],
['relational_isequal.3', 16],
['relational_isequal.4', 16],
['relational_isequal.5', 16],
['relational_isequal.6', 16],
['relational_isfinite', 16],
['relational_isfinite.2', 16],
['relational_isfinite.3', 16],
['relational_isfinite.4', 16],
['relational_isfinite.5', 16],
['relational_isfinite.6', 16],
['relational_isgreater', 16],
['relational_isgreater.2', 16],
['relational_isgreater.3', 16],
['relational_isgreater.4', 16],
['relational_isgreater.5', 16],
['relational_isgreater.6', 16],
['relational_isgreaterequal', 16],
['relational_isgreaterequal.2', 16],
['relational_isgreaterequal.3', 16],
['relational_isgreaterequal.4', 16],
['relational_isgreaterequal.5', 16],
['relational_isgreaterequal.6', 16],
['relational_isinf', 16],
['relational_isinf.2', 16],
['relational_isinf.3', 16],
['relational_isinf.4', 16],
['relational_isinf.5', 16],
['relational_isinf.6', 16],
['relational_isless', 16],
['relational_isless.2', 16],
['relational_isless.3', 16],
['relational_isless.4', 16],
['relational_isless.5', 16],
['relational_isless.6', 16],
['relational_islessequal', 16],
['relational_islessequal.2', 16],
['relational_islessequal.3', 16],
['relational_islessequal.4', 16],
['relational_islessequal.5', 16],
['relational_islessequal.6', 16],
['relational_isnan', 16],
['relational_isnan.2', 16],
['relational_isnan.3', 16],
['relational_isnan.4', 16],
['relational_isnan.5', 16],
['relational_isnan.6', 16],
['relational_isnormal', 16],
['relational_isnormal.2', 16],
['relational_isnormal.3', 16],
['relational_isnormal.4', 16],
['relational_isnormal.5', 16],
['relational_isnormal.6', 16],
['relational_isnotequal', 16],
['relational_isnotequal.2', 16],
['relational_isnotequal.3', 16],
['relational_isnotequal.4', 16],
['relational_isnotequal.5', 16],
['relational_isnotequal.6', 16],
['relational_signbit', 16],
['relational_signbit.2', 16],
['relational_signbit.3', 16],
['relational_signbit.4', 16],
['relational_signbit.5', 16],
['relational_signbit.6', 16],
['relational_isordered', 16],
['relational_isordered.2', 16],
['relational_isordered.3', 16],
['relational_isordered.4', 16],
['relational_isordered.5', 16],
['relational_isordered.6', 16],
['relational_isunordered', 16],
['relational_isunordered.2', 16],
['relational_isunordered.3', 16],
['relational_isunordered.4', 16],
['relational_isunordered.5', 16],
['relational_isunordered.6', 16],
['relational_bitselect', 16],
['relational_bitselect.2', 16],
['relational_bitselect.3', 16],
['relational_bitselect.4', 16],
['relational_bitselect.5', 16],
['relational_bitselect.6', 16],
['relational_bitselect.7', 16],
['relational_bitselect.8', 16],
['relational_bitselect.9', 16],
['relational_bitselect.10', 16],
['relational_bitselect.11', 16],
['relational_bitselect.12', 16],
['relational_bitselect.13', 16],
['relational_bitselect.14', 16],
['relational_bitselect.15', 16],
['relational_bitselect.16', 16],
['relational_bitselect.17', 16],
['relational_bitselect.18', 16],
['relational_bitselect.19', 16],
['relational_bitselect.20', 16],
['relational_bitselect.21', 16],
['relational_bitselect.22', 16],
['relational_bitselect.23', 16],
['relational_bitselect.24', 16],
['relational_bitselect.25', 16],
['relational_bitselect.26', 16],
['relational_bitselect.27', 16],
['relational_bitselect.28', 16],
['relational_bitselect.29', 16],
['relational_bitselect.30', 16],
['relational_bitselect.31', 16],
['relational_bitselect.32', 16],
['relational_bitselect.33', 16],
['relational_bitselect.34', 16],
['relational_bitselect.35', 16],
['relational_bitselect.36', 16],
['relational_bitselect.37', 16],
['relational_bitselect.38', 16],
['relational_bitselect.39', 16],
['relational_bitselect.40', 16],
['relational_bitselect.41', 16],
['relational_bitselect.42', 16],
['relational_bitselect.43', 16],
['relational_bitselect.44', 16],
['relational_bitselect.45', 16],
['relational_bitselect.46', 16],
['relational_bitselect.47', 16],
['relational_bitselect.48', 16],
['relational_bitselect.49', 16],
['relational_bitselect.50', 16],
['relational_bitselect.51', 16],
['relational_bitselect.52', 16],
['relational_bitselect.53', 16],
['relational_bitselect.54', 16],
['relational_select', 16],
['relational_select.2', 16],
['relational_select.3', 16],
['relational_select.4', 16],
['relational_select.5', 16],
['relational_select.6', 16],
['relational_select.7', 16],
['relational_select.8', 16],
['relational_select.9', 16],
['relational_select.10', 16],
['relational_select.11', 16],
['relational_select.12', 16],
['relational_select.13', 16],
['relational_select.14', 16],
['relational_select.15', 16],
['relational_select.16', 16],
['relational_select.17', 16],
['relational_select.18', 16],
['relational_select.19', 16],
['relational_select.20', 16],
['relational_select.21', 16],
['relational_select.22', 16],
['relational_select.23', 16],
['relational_select.24', 16],
['relational_select.25', 16],
['relational_select.26', 16],
['relational_select.27', 16],
['relational_select.28', 16],
['relational_select.29', 16],
['relational_select.30', 16],
['relational_select.31', 16],
['relational_select.32', 16],
['relational_select.33', 16],
['relational_select.34', 16],
['relational_select.35', 16],
['relational_select.36', 16],
['relational_select.37', 16],
['relational_select.38', 16],
['relational_select.39', 16],
['relational_select.40', 16],
['relational_select.41', 16],
['relational_select.42', 16],
['relational_select.43', 16],
['relational_select.44', 16],
['relational_select.45', 16],
['relational_select.46', 16],
['relational_select.47', 16],
['relational_select.48', 16],
['relational_select.49', 16],
['relational_select.50', 16],
['relational_select.51', 16],
['relational_select.52', 16],
['relational_select.53', 16],
['relational_select.54', 16],
['relational_select.55', 16],
['relational_select.56', 16],
['relational_select.57', 16],
['relational_select.58', 16],
['relational_select.59', 16],
['relational_select.60', 16],
['relational_select.61', 16],
['relational_select.62', 16],
['relational_select.63', 16],
['relational_select.64', 16],
['relational_select.65', 16],
['relational_select.66', 16],
['relational_select.67', 16],
['relational_select.68', 16],
['relational_select.69', 16],
['relational_select.70', 16],
['relational_select.71', 16],
['relational_select.72', 16],
['relational_select.73', 16],
['relational_select.74', 16],
['relational_select.75', 16],
['relational_select.76', 16],
['relational_select.77', 16],
['relational_select.78', 16],
['relational_select.79', 16],
['relational_select.80', 16],
['relational_select.81', 16],
['relational_select.82', 16],
['relational_select.83', 16],
['relational_select.84', 16],
['relational_select.85', 16],
['relational_select.86', 16],
['relational_select.87', 16],
['relational_select.88', 16],
['relational_select.89', 16],
['relational_select.90', 16],
['relational_select.91', 16],
['relational_select.92', 16],
['relational_select.93', 16],
['relational_select.94', 16],
['relational_select.95', 16],
['relational_select.96', 16],
['relational_select.97', 16],
['relational_select.98', 16],
['relational_select.99', 16],
['relational_select.100', 16],
['relational_select.101', 16],
['relational_select.102', 16],
['relational_select.103', 16],
['relational_select.104', 16],
['relational_select.105', 16],
['relational_select.106', 16],
['relational_select.107', 16],
['relational_select.108', 16],
['relational_any', 16],
['relational_any.2', 16],
['relational_any.3', 16],
['relational_any.4', 16],
['relational_any.5', 16],
['relational_any.6', 16],
['relational_any.7', 16],
['relational_any.8', 16],
['relational_any.9', 16],
['relational_any.10', 16],
['relational_any.11', 16],
['relational_any.12', 16],
['relational_any.13', 16],
['relational_any.14', 16],
['relational_any.15', 16],
['relational_any.16', 16],
['relational_any.17', 16],
['relational_any.18', 16],
['relational_any.19', 16],
['relational_any.20', 16],
['relational_any.21', 16],
['relational_any.22', 16],
['relational_any.23', 16],
['relational_any.24', 16],
['relational_all', 16],
['relational_all.2', 16],
['relational_all.3', 16],
['relational_all.4', 16],
['relational_all.5', 16],
['relational_all.6', 16],
['relational_all.7', 16],
['relational_all.8', 16],
['relational_all.9', 16],
['relational_all.10', 16],
['relational_all.11', 16],
['relational_all.12', 16],
['relational_all.13', 16],
['relational_all.14', 16],
['relational_all.15', 16],
['relational_all.16', 16],
['relational_all.17', 16],
['relational_all.18', 16],
['relational_all.19', 16],
['relational_all.20', 16],
['relational_all.21', 16],
['relational_all.22', 16],
['relational_all.23', 16],
['relational_all.24', 16],
['common_double_clamp', 16],
['common_double_clamp.2', 16],
['common_double_clamp.3', 16],
['common_double_clamp.4', 16],
['common_double_clamp.5', 16],
['common_double_clamp.6', 16],
['common_double_clamp.7', 16],
['common_double_clamp.8', 16],
['common_double_clamp.9', 16],
['common_double_clamp.10', 16],
['common_double_clamp.11', 16],
['common_double_smoothstep', 16],
['common_double_smoothstep.2', 16],
['common_double_smoothstep.3', 16],
['common_double_smoothstep.4', 16],
['common_double_smoothstep.5', 16],
['common_double_smoothstep.6', 16],
['common_double_smoothstep.7', 16],
['common_double_smoothstep.8', 16],
['common_double_smoothstep.9', 16],
['common_double_smoothstep.10', 16],
['common_double_smoothstep.11', 16],
['common_double_degrees', 16],
['common_double_degrees.2', 16],
['common_double_degrees.3', 16],
['common_double_degrees.4', 16],
['common_double_degrees.5', 16],
['common_double_degrees.6', 16],
['common_double_max', 16],
['common_double_max.2', 16],
['common_double_max.3', 16],
['common_double_max.4', 16],
['common_double_max.5', 16],
['common_double_max.6', 16],
['common_double_max.7', 16],
['common_double_max.8', 16],
['common_double_max.9', 16],
['common_double_max.10', 16],
['common_double_max.11', 16],
['common_double_min', 16],
['common_double_min.2', 16],
['common_double_min.3', 16],
['common_double_min.4', 16],
['common_double_min.5', 16],
['common_double_min.6', 16],
['common_double_min.7', 16],
['common_double_min.8', 16],
['common_double_min.9', 16],
['common_double_min.10', 16],
['common_double_min.11', 16],
['common_double_radians', 16],
['common_double_radians.2', 16],
['common_double_radians.3', 16],
['common_double_radians.4', 16],
['common_double_radians.5', 16],
['common_double_radians.6', 16],
['common_double_sign', 16],
['common_double_sign.2', 16],
['common_double_sign.3', 16],
['common_double_sign.4', 16],
['common_double_sign.5', 16],
['common_double_sign.6', 16],
['common_double_step', 16],
['common_double_step.2', 16],
['common_double_step.3', 16],
['common_double_step.4', 16],
['common_double_step.5', 16],
['common_double_step.6', 16],
['common_double_step.7', 16],
['common_double_step.8', 16],
['common_double_step.9', 16],
['common_double_step.10', 16],
['common_double_step.11', 16],
['relational_double_islessgreater', 16],
['relational_double_islessgreater.2', 16],
['relational_double_islessgreater.3', 16],
['relational_double_islessgreater.4', 16],
['relational_double_islessgreater.5', 16],
['relational_double_islessgreater.6', 16],
['relational_double_isequal', 16],
['relational_double_isequal.2', 16],
['relational_double_isequal.3', 16],
['relational_double_isequal.4', 16],
['relational_double_isequal.5', 16],
['relational_double_isfinite', 16],
['relational_double_isgreater', 16],
['relational_double_isgreater.2', 16],
['relational_double_isgreater.3', 16],
['relational_double_isgreater.4', 16],
['relational_double_isgreater.5', 16],
['relational_double_isgreater.6', 16],
['relational_double_isgreaterequal', 16],
['relational_double_isgreaterequal.2', 16],
['relational_double_isgreaterequal.3', 16],
['relational_double_isgreaterequal.4', 16],
['relational_double_isgreaterequal.5', 16],
['relational_double_isgreaterequal.6', 16],
['relational_double_isinf', 16],
['relational_double_isinf.2', 16],
['relational_double_isinf.3', 16],
['relational_double_isinf.4', 16],
['relational_double_isinf.5', 16],
['relational_double_isinf.6', 16],
['relational_double_isless', 16],
['relational_double_isless.2', 16],
['relational_double_isless.3', 16],
['relational_double_isless.4', 16],
['relational_double_isless.5', 16],
['relational_double_isless.6', 16],
['relational_double_islessequal', 16],
['relational_double_islessequal.2', 16],
['relational_double_islessequal.3', 16],
['relational_double_islessequal.4', 16],
['relational_double_islessequal.5', 16],
['relational_double_islessequal.6', 16],
['relational_double_isnan', 16],
['relational_double_isnan.2', 16],
['relational_double_isnan.3', 16],
['relational_double_isnan.4', 16],
['relational_double_isnan.5', 16],
['relational_double_isnan.6', 16],
['relational_double_isnormal', 16],
['relational_double_isnormal.2', 16],
['relational_double_isnormal.3', 16],
['relational_double_isnormal.4', 16],
['relational_double_isnormal.5', 16],
['relational_double_isnormal.6', 16],
['relational_double_isnotequal', 16],
['relational_double_isnotequal.2', 16],
['relational_double_isnotequal.3', 16],
['relational_double_isnotequal.4', 16],
['relational_double_isnotequal.5', 16],
['relational_double_isnotequal.6', 16],
['relational_double_signbit', 16],
['relational_double_signbit.2', 16],
['relational_double_signbit.3', 16],
['relational_double_signbit.4', 16],
['relational_double_signbit.5', 16],
['relational_double_signbit.6', 16],
['relational_double_isordered', 16],
['relational_double_isordered.2', 16],
['relational_double_isordered.3', 16],
['relational_double_isordered.4', 16],
['relational_double_isordered.5', 16],
['relational_double_isordered.6', 16],
['relational_double_isunordered', 16],
['relational_double_isunordered.2', 16],
['relational_double_isunordered.3', 16],
['relational_double_isunordered.4', 16],
['relational_double_isunordered.5', 16],
['relational_double_isunordered.6', 16],
['relational_double_bitselect', 16],
['relational_double_bitselect.2', 16],
['relational_double_bitselect.3', 16],
['relational_double_bitselect.4', 16],
['relational_double_bitselect.5', 16],
['relational_double_bitselect.6', 16],
['relational_double_select', 16],
['relational_double_select.2', 16],
['relational_double_select.3', 16],
['relational_double_select.4', 16],
['relational_double_select.5', 16],
['relational_double_select.6', 16],
['relational_double_select.7', 16],
['relational_double_select.8', 16],
['relational_double_select.9', 16],
['relational_double_select.10', 16],
['relational_double_select.11', 16],
['relational_double_select.12', 16],
['math_double_mad', 16],
['math_double_mad.2', 16],
['math_double_mad.3', 16],
['math_double_mad.4', 16],
['math_double_mad.5', 16],
['math_double_mad.6', 16],
]

AVX256_P1= [
#
# list of workloads that we believe have a good potential for AVX256 and transpose width of 8
#
['intel_bas',3],
['intel_colorbalance',3],
['intel_matrix_mult',3],
['intel_matrix_mult_2',3],
['intel_matrix_mult_6',3],
['intel_MonteCarlo',3],
['intel_MonteCarlo_1',3],
['intel_NBody',3],
['intel_radar',3],
['intel_radial_blur',3],
['intel_radial_blur_1',3],
['intel_radial_blur_2',3],
['intel_radial_blur_3',3],
['intel_radial_blur_4',3],
['intel_radial_blur_5',3],
['intel_radial_blur_6',3],
['intel_radial_blur_7',3],
['intel_radial_blur_8',3],
['intel_radial_blur_9',3],
['intel_RecGaussian',16],
['intel_RecGaussian_1',16],
['intel_rgb2yuv',3],
['intel_rgb2yuv_1',3],
['intel_sobel',3],
['intel_sobel_1',3],
['wlATINBody',3],
['wlATIPrefixSum',3],
['wlATIRecGaussian',16],
['wlDCT',3],
['wlDCT_1',3],
['wlSimpleBoxBlur',3]
]

PhoronixPerformance = [
#
# list of Phoronix workloads
#
['juliaGPU',3],
['mandelbulbGPU',3],
['MandelGPU',3],
['MandelGPUfloat4',3],
['smallptGPUcaustic',3],
['smallptGPUcaustic3',3],
['smallptGPUcaustic3dl',3],
['smallptGPUcausticdl',3],
['smallptGPUcomplex',3],
['smallptGPUcomplexdl',3],
['smallptGPUcornell',3],
['smallptGPUcornell_large',3],
['smallptGPUcornell_largedl',3],
['smallptGPUcornelldl',3],
['smallptGPUsimple',3],
['smallptGPUsimpledl',3]
]

GEHCPerformance = [
#
# list of GEHC workloads
#
['GEHC_FFT_col',3],
['GEHC_FFT_col.2',3],
['GEHC_FFT_col.3',3],
['GEHC_FFT_col.4',3],
['GEHC_FFT_col.5',3],
['GEHC_FFT_nocol',3],
['GEHC_FFT_nocol.2',3],
['GEHC_FFT_nocol.3',3],
['GEHC_FFT_nocol.4',3],
['GEHC_FFT_nocol.5',3],
['GEHC_forward',3],
['GEHC_MultiKernel',3]
]

SHOCPerformance = [
#
# list of SHOC workloads
#
['DeviceMemory',3],
['DeviceMemory.2',3],
['DeviceMemory.3',3],
['DeviceMemory.4',3],
['DeviceMemory.5',3],
['DeviceMemory.6',3],
['DeviceMemory.7',3],
['DeviceMemory.8',3],
['DeviceMemory.9',3],
['DeviceMemory.10',3],
['DeviceMemory.11',3],
['DeviceMemory.12',3],
['DeviceMemory.13',3],
['DeviceMemory.14',3],
['DeviceMemory.15',3],
['FFT',3],
['FFT.2',3],
['KernelCompile',3],
['KernelCompile.2',3],
['KernelCompile.3',3],
['KernelCompile.4',3],
['KernelCompile.5',3],
['KernelCompile.6',3],
['KernelCompile.7',3],
['KernelCompile.8',3],
['KernelCompile.9',3],
['KernelCompile.10',3],
['KernelCompile.11',3],
['KernelCompile.12',3],
['KernelCompile.13',3],
['KernelCompile.14',3],
['KernelCompile.15',3],
['KernelCompile.16',3],
['KernelCompile.17',3],
['KernelCompile.18',3],
['KernelCompile.19',3],
['KernelCompile.20',3],
['MaxFlops',3],
['MaxFlops.2',3],
['MaxFlops.3',3],
['MaxFlops.4',3],
['MaxFlops.5',3],
['MaxFlops.6',3],
['MaxFlops.7',3],
['MaxFlops.8',3],
['MaxFlops.9',3],
['MaxFlops.10',3],
['MaxFlops.11',3],
['MaxFlops.12',3],
['MaxFlops.13',3],
['MaxFlops.14',3],
['MaxFlops.15',3],
['MaxFlops.16',3],
['MaxFlops.17',3],
['MaxFlops.18',3],
['MaxFlops.19',3],
['MaxFlops.20',3],
['MaxFlops.21',3],
['MaxFlops.22',3],
['MaxFlops.23',3],
['MaxFlops.24',3],
['MaxFlops.25',3],
['MaxFlops.26',3],
['MaxFlops.27',3],
['MaxFlops.28',3],
['MaxFlops.29',3],
['MaxFlops.30',3],
['MaxFlops.31',3],
['MaxFlops.32',3],
['MaxFlops.33',3],
['MaxFlops.34',3],
['MaxFlops.35',3],
['MaxFlops.36',3],
['MaxFlops.37',3],
['MD',3],
['MD.2',3],
['QueueDelay',3],
['Reduction',3],
['Reduction.2',3],
['S3D',3],
['S3D.2',3],
['S3D.3',3],
['S3D.4',3],
['S3D.5',3],
['S3D.6',3],
['S3D.7',3],
['S3D.8',3],
['S3D.9',3],
['S3D.10',3],
['S3D.11',3],
['S3D.12',3],
['S3D.13',3],
['S3D.14',3],
['S3D.15',3],
['S3D.16',3],
['S3D.17',3],
['S3D.18',3],
['S3D.19',3],
['S3D.20',3],
['S3D.21',3],
['S3D.22',3],
['S3D.23',3],
['S3D.24',3],
['S3D.25',3],
['S3D.26',3],
['S3D.27',3],
['S3D.28',3],
['S3D.29',3],
['S3D.30',3],
['S3D.31',3],
['S3D.32',3],
['S3D.33',3],
['S3D.34',3],
['S3D.35',3],
['S3D.36',3],
['S3D.37',3],
['S3D.38',3],
['S3D.39',3],
['S3D.40',3],
['S3D.41',3],
['S3D.42',3],
['S3D.43',3],
['S3D.44',3],
['S3D.45',3],
['S3D.46',3],
['S3D.47',3],
['S3D.48',3],
['S3D.49',3],
['S3D.50',3],
['S3D.51',3],
['S3D.52',3],
['S3D.53',3],
['S3D.54',3],
['Scan',3],
['Scan.2',3],
['SGEMM',3],
['SGEMM.2',3],
['Sort',3],
['Spmv',3],
['Spmv.2',3],
['Spmv.3',3],
['Spmv.4',3],
['Spmv.5',3],
['Spmv.6',3],
['Stencil2D',3],
['Stencil2D.2',3],
['Triad',3]
]

"""
def FillBIMeterPerformanceTable(Path, Iterations, TargetType):
    #get list of configs
    OutTable = []
    TargetTypePath = os.path.join( Path, "BIMeter", TargetType )
    configs = glob.glob(os.path.join(TargetTypePath, '*.cfg'))
    if len(configs) < 1:
        raise Exception("Error parsing configuration files for BIMeter") 
    for conf in configs:
        [dir, fname] = os.path.split(conf)
        (shortname, extension) = os.path.splitext(fname)   
        OutTable.append([shortname, Iterations])
    return OutTable
"""

class PerformanceRunConfig():
    CFG_NAME = "PerformanceConfig"
    def __init__(self, tests_path):
        if '' == tests_path:
            tests_path = PERFORMANCE_TESTS_ROOT
        self.tests_root_dir = tests_path

class PerformanceTestRunner(VolcanoTestRunner):
    def __init__(self, csv_filename):
        VolcanoTestRunner.__init__(self)
        self.csv_filename = csv_filename

    def OnAfterTaskExecution(self, task, result, stdoutdata):
        VolcanoTestRunner.OnAfterTaskExecution(self, task, result, stdoutdata)
        if( isinstance(task,PerformanceTask)):
            if  TestTaskResult.Passed == result:
                with open(self.csv_filename, 'a') as csv_file:
                    print >> csv_file, stdoutdata.rstrip()
                    
class PerformanceTask(VolcanoCmdTask):
    def __init__(self, suite, kernel, build_iterations, execute_iterations, config):
        VolcanoCmdTask.__init__(self, kernel)
        perf_config  = config.sub_configs[PerformanceRunConfig.CFG_NAME]
        config_file  = os.path.join( perf_config.tests_root_dir, suite, config.target_type, kernel + '.cfg')
        self.workdir = config.bin_dir
        self.command = 'SATest -PERF -OCL -tsize=' + config.transpose_size + ' -cpuarch=' + config.cpu  + ' -config=' + config_file + ' -build-iterations=' + str(build_iterations) + ' -execute-iterations=' + str(execute_iterations)
        if config.cpu_features != '':
            self.command = self.command + ' -cpufeatures=' + run_config.cpu_features

class VolcanoPerformanceSuite(VolcanoTestSuite):
    def __init__(self, name, suite, config, tests):
        VolcanoTestSuite.__init__(self, name)
        #test_filter = config.test_filter
        self.config  = config
        self.suitename = suite
        for test in tests:
            task = PerformanceTask(suite, test[0], 1, test[1], config)
            task.timeout = TIMEOUT_HALFHOUR
            self.addTask(task)
            #test_name = test[0]
            #test_iterations = test[1]

            # check if test name matches filter
            #if fnmatch.fnmatch(test_name, test_filter):
            #    self.addTask(PerformanceTask(suite, test_name , test_iterations, config))
    def startUp(self):
        if platform.system() != 'Windows':
            self.path_env = EnvironmentValue('LD_LIBRARY_PATH')
        else:
            self.path_env = EnvironmentValue("PATH")
        
        self.path_env.appendToFront(self.config.bin_dir, os.pathsep)
        
        self.vectenv = EnvironmentValue("CL_CONFIG_VECTORIZER_HEURISTICS")
        if self.config.transpose_size == '0':
            self.vectenv.setValue('true')
        else:
            self.vectenv.setValue('false')

    def tearDown(self):
        self.vectenv.restoreValue()
        self.path_env.restoreValue()

class VolcanoWOLFPerformanceSuite(VolcanoPerformanceSuite):
    def __init__(self, name, config):
        VolcanoPerformanceSuite.__init__(self, name, 'WOLF', config, WOLFPerformance)
        self.updateTask('wlHistogram', skiplist=[['.*','Win32']])
        self.updateTask('wlHistogram_1', skiplist=[['.*','Win32']])
        self.updateTask('wlPrefixSum', skiplist=[['.*','Win32']])
        self.updateTask('wlSubdivision', skiplist=[[".*",".*",".*",".*","4"],[".*",".*",".*",".*","8"],[".*",".*",".*",".*","0"]])

class VolcanoWOLFBenchPerformanceSuite(VolcanoPerformanceSuite):
    def __init__(self, name, config):
        VolcanoPerformanceSuite.__init__(self, name, 'WOLFbench', config, WOLFBenchPerformance)

class VolcanoCyberLinkPerformanceSuite(VolcanoPerformanceSuite):
    def __init__(self, name, config):
        VolcanoPerformanceSuite.__init__(self, name, 'CyberLink', config, CyberLinkPerformance)

class VolcanoLuxMarkPerformanceSuite(VolcanoPerformanceSuite):
    def __init__(self, name, config):
        VolcanoPerformanceSuite.__init__(self, name, 'LuxMark', config, LuxMarkPerformance)

class VolcanoSandraPerformanceSuite(VolcanoPerformanceSuite):
    def __init__(self, name, config):
        VolcanoPerformanceSuite.__init__(self, name, 'Sandra', config, SandraPerformance)

class VolcanoVCSDPerformanceSuite(VolcanoPerformanceSuite):
    def __init__(self, name, config):
        VolcanoPerformanceSuite.__init__(self, name, 'VCSD', config, VCSDPerformance)
        self.updateTask('Subdivision', skiplist=[[".*",".*",".*",".*","4"],[".*",".*",".*",".*","8"],[".*",".*",".*",".*","0"]])

class VolcanoAVX256_P1_PerformanceSuite(VolcanoPerformanceSuite):
    def __init__(self, name, config):
        VolcanoPerformanceSuite.__init__(self, name, 'AVX256_P1', config, AVX256_P1)
        
class VolcanoPhoronixPerformanceSuite(VolcanoPerformanceSuite):
    def __init__(self, name, config):
        VolcanoPerformanceSuite.__init__(self, name, 'Phoronix', config, PhoronixPerformance)

class VolcanoGEHCPerformanceSuite(VolcanoPerformanceSuite):
    def __init__(self, name, config):
        VolcanoPerformanceSuite.__init__(self, name, 'GEHC', config, GEHCPerformance)

class VolcanoSHOCPerformanceSuite(VolcanoPerformanceSuite):
    def __init__(self, name, config):
        VolcanoPerformanceSuite.__init__(self, name, 'SHOC', config, SHOCPerformance)

class VolcanoBIMeterPerformanceSuite(VolcanoPerformanceSuite):
    def __init__(self, name, config):
#BIMeterPerformance = FillBIMeterPerformanceTable(config.tests_root_dir, BIMeterPerformanceIterations, config.target_type)
        VolcanoPerformanceSuite.__init__(self, name, 'BIMeter', config, BIMeterPerformance)

def main():
    parser = OptionParser()
    
    parser.add_option("-r", "--root",    dest="root_dir", help="project root directory", default=None)
    parser.add_option("-t", "--target",  dest="target_type", help="target type: Win32, Win64, Linux64", default='Win32')
    parser.add_option("-c", "--cpu",     dest="cpu", help="CPU Type: " + str(SUPPORTED_CPUS), default="auto")
    parser.add_option("-f", "--cpu-features", dest="cpu_features", help="CPU features (-avx256, +avx)", default="")
    parser.add_option("-v", "--vector",  dest="vector_size", help="Transpose Size:0(auto),1,4,8,16", default="0")
    parser.add_option("-o", "--output",  dest="output_file", help="output file name")
    parser.add_option("-k", "--kernels", dest="tests_path", help="root path of the performance tests", default='')
    parser.add_option("-d", "--demo",    action="store_true", dest="demo_mode", help="Do not execute the command, just print them", default=False)
    parser.add_option("-s", "--suite",   dest="suite", help="Suite to run: WOLF, WOLFBench, CyberLink, VCSD, Sandra, LuxMark, BIMeter", default=None)
    #parser.add_option("", "--filter",   dest="filter", help="test names filter with wildcards", default="*")
    
    (options, args) = parser.parse_args()

    if (options.output_file == None):
        print "Output file (-o) not specified"
        return 1
    
    # Run the performance suite for the current configuration
    Volcano_CmdUtils.demo_mode = options.demo_mode 
    
    suites = { "WOLF": VolcanoWOLFPerformanceSuite,
               "WOLFbench": VolcanoWOLFBenchPerformanceSuite,
               "CyberLink": VolcanoCyberLinkPerformanceSuite,
               "VCSD": VolcanoVCSDPerformanceSuite,
               "Sandra": VolcanoSandraPerformanceSuite,
               "LuxMark": VolcanoLuxMarkPerformanceSuite,
               "BIMeter": VolcanoBIMeterPerformanceSuite,
               "AVX256_P1": VolcanoAVX256_P1_PerformanceSuite,
               "Phoronix": VolcanoPhoronixPerformanceSuite,
               "GEHC": VolcanoGEHCPerformanceSuite,
               "SHOC": VolcanoSHOCPerformanceSuite
             }

    if (options.suite not in suites):
        print "Unsupported suite '""'. The suite must be one of: " + str(suites.keys())
        return 1
    
    config = VolcanoRunConfig(options.root_dir,
                              options.target_type,
                              'Release',
                              options.cpu,
                              options.cpu_features,
                              options.vector_size)
    
    config.sub_configs[PerformanceRunConfig.CFG_NAME]=PerformanceRunConfig( options.tests_path)
    
    suite  = suites[options.suite](options.suite, config)
    runner = PerformanceTestRunner(options.output_file)
    passed = runner.runTask(suite, config)
    
    if not passed:
        return 1
    
    return 0

if __name__ == "__main__":
    if platform.platform().startswith("CYGWIN"):
        print "Cygwin Python is not supported. Please use ActiveState Python."
        sys.exit(1);
    if sys.version_info < (2, 6):
        print "Python version 2.6 or later required"
        sys, exit(1)
    main_result = main()
    sys.exit(main_result)
