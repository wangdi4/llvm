// INTEL CONFIDENTIAL
//
// Copyright 2020 Intel Corporation.
//
// This software and the related documents are Intel copyrighted materials, and
// your use of them is governed by the express license under which they were
// provided to you (License). Unless the License provides otherwise, you may not
// use, modify, copy, publish, distribute, disclose or transmit this software or
// the related documents without Intel's prior written permission.
//
// This software and the related documents are provided as is, with no express
// or implied warranties, other than those that are expressly stated in the
// License.

#ifndef __LOOP_PEELING_H__
#define __LOOP_PEELING_H__

#include "llvm/ADT/SmallVector.h"
#include "llvm/IR/BasicBlock.h"

using namespace llvm;

namespace intel {

/// Loop dynamic peeling based on intel.preferred_alignment metadata provided by
/// VPlan.
class LoopDynamicPeeling {
public:
  typedef SmallVector<Value *, 4> VVec;

  /// Compute the peeling loop size from vector entry and insert compute code
  /// into EntryBB.
  /// \param EntryBB entry basic block to insert compute code of peel loop size.
  /// \param VectorEntry vector entry basic block generated by VPlan. It may
  ///        contain intel.preferred_alignment metadata.
  /// \param InitGIDs initial global IDs.
  /// \returns Peeling loop size.
  static Value *computePeelCount(BasicBlock &EntryBB, BasicBlock &VectorEntry,
                                 const VVec &InitGIDs);
};

} // namespace intel

#endif // __LOOP_PEELING_H__
