__kernel void program(write_only image2d_t dest, int flipped, int4 dim, float2 st_origin, float4 st_delta, float4 l0, float4 l1, read_only image2d_t t0, sampler_t t_sampler0)
{
	const float4 p0 = (float4)( 0x1p+0, 0x0p+0, 0x0p+0, 0x0p+0 );
	const float4 p1 = (float4)( 0x1p+0, 0x1p+0, 0x0p+0, 0x0p+0 );
	const float4 p2 = (float4)( 0x0p+0, 0x1p+0, 0x0p+0, 0x0p+0 );
	const float4 p3 = (float4)( -0x1p+0, 0x1p+0, 0x0p+0, 0x0p+0 );
	const float4 p4 = (float4)( -0x1p+0, 0x0p+0, 0x0p+0, 0x0p+0 );
	const float4 p5 = (float4)( -0x1p+0, -0x1p+0, 0x0p+0, 0x0p+0 );
	const float4 p6 = (float4)( 0x0p+0, -0x1p+0, 0x0p+0, 0x0p+0 );
	const float4 p7 = (float4)( 0x1p+0, -0x1p+0, 0x0p+0, 0x0p+0 );
	int dest_width = dim.x;
	int dest_height = dim.y;
	float4 o0, r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;
	float4 false_vector = (float4) 0.0f;
	float4 true_vector = (float4) 1.0f;
	float unused_float1;
	float2 unused_float2;
	__float3_SPI unused_float3;
	float4 unused_float4;
	int2 loc = (int2)( get_global_id(0), get_global_id(1) );
	float4 f0 = (float4)( st_origin.x + ((float)loc.x + 0.5f) * st_delta.x + ((float)loc.y + 0.5f) * st_delta.z, st_origin.y + ((float)loc.x + 0.5f) * st_delta.y + ((float)loc.y + 0.5f) * st_delta.w, 0.0f, 0.0f );
	r2 = f0;
	r10 = r2+p0;
	r8.x = dot(r10.xy,l0.xy) + l0.w;
	r8.y = dot(r10.xy,l1.xy) + l1.w;
	r10 = r8;
	r8 = read_imagef(t0, t_sampler0, r10.xy);
	r10 = r2+p1;
	r5.x = dot(r10.xy,l0.xy) + l0.w;
	r5.y = dot(r10.xy,l1.xy) + l1.w;
	r10 = r5;
	r5 = read_imagef(t0, t_sampler0, r10.xy);
	r10 = r2+p2;
	r4.x = dot(r10.xy,l0.xy) + l0.w;
	r4.y = dot(r10.xy,l1.xy) + l1.w;
	r10 = r4;
	r4 = read_imagef(t0, t_sampler0, r10.xy);
	r10 = r2+p3;
	r6.x = dot(r10.xy,l0.xy) + l0.w;
	r6.y = dot(r10.xy,l1.xy) + l1.w;
	r10 = r6;
	r6 = read_imagef(t0, t_sampler0, r10.xy);
	r10 = r2+p4;
	r7.x = dot(r10.xy,l0.xy) + l0.w;
	r7.y = dot(r10.xy,l1.xy) + l1.w;
	r10 = r7;
	r7 = read_imagef(t0, t_sampler0, r10.xy);
	r10 = r2+p5;
	r3.x = dot(r10.xy,l0.xy) + l0.w;
	r3.y = dot(r10.xy,l1.xy) + l1.w;
	r10 = r3;
	r3 = read_imagef(t0, t_sampler0, r10.xy);
	r10 = r2+p6;
	r1.x = dot(r10.xy,l0.xy) + l0.w;
	r1.y = dot(r10.xy,l1.xy) + l1.w;
	r10 = r1;
	r1 = read_imagef(t0, t_sampler0, r10.xy);
	r10 = r2+p7;
	r0.x = dot(r10.xy,l0.xy) + l0.w;
	r0.y = dot(r10.xy,l1.xy) + l1.w;
	r0 = read_imagef(t0, t_sampler0, r0.xy);
	r9.x = dot(r2.xy,l0.xy) + l0.w;
	r9.y = dot(r2.xy,l1.xy) + l1.w;
	r2 = r9;
	r9 = read_imagef(t0, t_sampler0, r2.xy);
	r2 = min(r5, r4);
	r4 = max(r5, r4);
	r5 = min(r7, r3);
	r3 = max(r7, r3);
	r7 = min(r0, r9);
	r9 = max(r0, r9);
	r0 = min(r8, r2);
	r2 = max(r8, r2);
	r8 = min(r6, r5);
	r5 = max(r6, r5);
	r6 = min(r1, r7);
	r7 = max(r1, r7);
	r1 = min(r2, r4);
	r4 = max(r2, r4);
	r2 = min(r5, r3);
	r3 = max(r5, r3);
	r5 = min(r7, r9);
	r7 = max(r7, r9);
	r0 = max(r0, r8);
	r3 = min(r3, r7);
	r0 = max(r0, r6);
	r3 = min(r4, r3);
	r4 = min(r2, r5);
	r2 = max(r2, r5);
	r1 = max(r1, r4);
	r1 = min(r2, r1);
	r2 = min(r1, r3);
	r1 = max(r1, r3);
	r0 = max(r0, r2);
	r0 = min(r0, r1);
	r0.xyz = min(r0.xyz, r0.www);
	o0 = r0;
	write_imagef(dest, (int2)( loc.x + dim.z , flipped ? get_image_height(dest) - (loc.y + dim.w + 1) : loc.y + dim.w ), o0);
}

