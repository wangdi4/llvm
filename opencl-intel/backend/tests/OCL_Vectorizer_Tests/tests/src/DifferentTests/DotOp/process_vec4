/* assuming that the size of the array is multiple of 4, thus we can divide it to float4 vectors */
/* - evrey thread will be responsible for one vector result */

#define VECTOR_SIZE		4

__kernel void process_vec4(__global float *data1, __global float *data2
	, __global float *data3)
{
	int tid = get_global_id(0);
	int indx = tid * VECTOR_SIZE;
	
	float4 tmp1 = *((float4*)(data1 + indx));
	/*tmp1.x = data1[indx +0];
	tmp1.y = data1[indx +1];
	tmp1.z = data1[indx	+2];
	tmp1.w = data1[indx +3];
	*/
	float4 tmp2 = *((float4*)(data2 + indx));
	/*tmp2.x = data2[indx +0];
	tmp2.y = data2[indx +1];
	tmp2.z = data2[indx	+2];
	tmp2.w = data2[indx +3];
	*/
	tmp1 = tmp1 * tmp1;
	tmp2 = tmp2 / tmp2;
	tmp1 = tmp1 * tmp2;
	tmp1 = tmp1 - tmp2;
	tmp2 = tmp1 * tmp2;
	tmp1 = tmp2 / tmp1;
	tmp2 = tmp1 * tmp2;
	tmp1 = tmp2 - tmp1;
	tmp1 = tmp2 * tmp1;
	tmp1 = tmp1 / tmp2;
	
	/*
	tmp1 = sqrt(tmp1);
	*/
	int wait = 50 * (tid % 2);
	int d =0;
	for(int i = 0; i<wait; i++) d++;	
	
	*((float4*)(data3 + indx)) = tmp1;
	/*
	data3[indx +0] = tmp1.x; 
	data3[indx +1] = tmp1.y;
	data3[indx +2] = tmp1.z;
	data3[indx +3] = tmp1.w;
	*/
}
