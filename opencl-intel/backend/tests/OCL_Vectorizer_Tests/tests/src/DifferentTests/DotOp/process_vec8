/* assuming that the size of the array is multiple of 8, thus we can divide it to float4 vectors */
/* - evrey thread will be responsible for one vector result */

#define VECTOR_SIZE		8

__kernel void process_vec8(__global float *data1, __global float *data2
	, __global float *data3)
{
	int tid = get_global_thread_id(0);
	int indx = tid * VECTOR_SIZE;
	
	float8 tmp1;
		tmp1.lo.x = data1[indx + 0];
		tmp1.lo.y = data1[indx + 1];
		tmp1.lo.z = data1[indx + 2];
		tmp1.lo.w = data1[indx + 3];
		tmp1.hi.x = data1[indx + 4];
		tmp1.hi.y = data1[indx + 5];
		tmp1.hi.z = data1[indx + 6];
		tmp1.hi.w = data1[indx + 7];
																
	float8 tmp2;
		tmp2.lo.x = data2[indx + 0];
		tmp2.lo.y = data2[indx + 1];
		tmp2.lo.z = data2[indx + 2];
		tmp2.lo.w = data2[indx + 3];
		tmp2.hi.x = data2[indx + 4];
		tmp2.hi.y = data2[indx + 5];
		tmp2.hi.z = data2[indx + 6];
		tmp2.hi.w = data2[indx + 7];
		
	tmp1 = tmp1 + tmp2;
	
		data3[indx + 0] = tmp1.lo.x;
		data3[indx + 1] = tmp1.lo.y;
		data3[indx + 2] = tmp1.lo.z;
		data3[indx + 3] = tmp1.lo.w;
		data3[indx + 4] = tmp1.hi.x;
		data3[indx + 5] = tmp1.hi.y;
		data3[indx + 6] = tmp1.hi.z;
		data3[indx + 7] = tmp1.hi.w;
}
