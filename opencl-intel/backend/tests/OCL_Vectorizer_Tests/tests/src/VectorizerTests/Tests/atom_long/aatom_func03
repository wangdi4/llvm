__kernel void
aatom_func03
( __global   long *in,
		__global float2 *out)
{
	int gid = get_global_id(0);
	int i;
	float sum1=0;
	double sum2=0;
	float rez=1,tmp=0;
	int count=0;
	in[gid+33]=gid;
	
		
	if (gid>1)
	{
		sum1=atom_xor(&in[gid],gid);
		for (i=1;i<100;)
		{
			i=atom_inc(&in[gid+33]);
			//printf("\n gid=%d  in[gid]=%d i=%d\n",gid,in[gid],i);
			rez=atom_xor(&in[gid],2)+atom_xor(&in[gid],2);
			tmp=atom_or(&in[gid],11) - atom_dec(&in[gid])* atom_dec(&in[gid]) ;
			sum1+=in[gid]+1;
			while (count<101) 
			{
				tmp=atom_and(&in[gid],22)+tmp;
				sum2+=in[gid]+rez+atom_max(&in[gid],gid+100)-in[gid]+tmp;
				count=count+2;
			}
			tmp=atom_max(&in[gid],gid+100);
			sum2-=in[gid];
			while (count<201) 
			{
				tmp=atom_min(&in[gid],2222);
				sum2+=in[gid]+rez;
				count=count+3;
			}
			count=10;
			tmp=atom_inc(&in[gid]);
			sum1+=in[gid]+tmp;
			tmp=atom_dec(&in[gid]);
			sum2+=in[gid];
			
		}
		
		
	
	
	}
	
	else
	
	
	{
		for (i=10000;i>100;i+=2)
		{
			i=atom_dec(&in[gid]+33);
			rez=atom_xor(&in[gid],2);
			tmp=atom_or(&in[gid],11)+in[gid];
			sum1+=in[gid];
			tmp=tmp+in[gid]-sum1;
			tmp=atom_max(&in[gid],gid+100);
			sum2-=in[gid];
			
			count=10;
			tmp=atom_inc(&in[gid]);
			sum1+=in[gid]+tmp;
			tmp=atom_dec(&in[gid]);
			sum2+=in[gid];
			out[gid].x =out[gid].x+sum1;	
		}
		
	
	}
	
	
	
	
	
	
	
	
	
	out[gid].y =out[gid].y+sum2;
}