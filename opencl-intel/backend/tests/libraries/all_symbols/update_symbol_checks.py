#!/usr/bin/env python3

"""A script to generate symbol tests."""

import argparse
import os
import subprocess

TARGET_MAP = {
    'h8': 'sse42',
    'e9': 'avx',
    'l9': 'avx2',
    'z0': 'avx512',
    'z1': 'amx'
}


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--llvm-nm-binary', default='llvm-nm',
                        help='The llvm-nm binary used to generate the test cases')
    parser.add_argument('--lib-dir', help='The rtl directory')
    parser.add_argument('--output-dir', default=os.path.dirname(
        os.path.realpath(__file__)), help='The output directory to generate tests')
    args = parser.parse_args()
    generate_all(args.llvm_nm_binary, args.lib_dir, args.output_dir)


def rtl_name(target):
    return 'clbltfn{}.rtl'.format(target)


def generate_all(llvm_nm_binary, lib_dir, output_dir):
    # shared.rtl
    generate(llvm_nm_binary, os.path.join(lib_dir, os.pardir,
             rtl_name('shared')), os.path.join(output_dir, 'shared.ll'), '%libdir/../{}'.format(rtl_name('shared')))

    for shortname, target in TARGET_MAP.items():
        generate(llvm_nm_binary, os.path.join(lib_dir, rtl_name(shortname)), os.path.join(
            output_dir, target + '_64bit.ll'), '%libdir/{}'.format(rtl_name(shortname)))

# INTEL_CUSTOMIZATION
def record_intel_customizations(test_filename):
    if not os.path.exists(test_filename):
        return {}

    # A map from startline to endline for each INTEL_CUSTOMIZATION region.
    customizations = {}
    with open(test_filename, 'r') as f:
        lines = f.readlines()
        i = 0
        while i < len(lines):
            line = lines[i].strip()
            if line.startswith('; INTEL_CUSTOMIZATION'):
                startline = lines[i+1].strip()
            elif line.startswith('; end INTEL_CUSTOMIZATION'):
                endline = lines[i-1].strip()
                customizations[startline] = endline
            i += 1
    return customizations
# end INTEL_CUSTOMIZATION

def generate(llvm_nm_binary, rtl_filename, output_filename, rtl_shortpath, requires_64bit=True):
    customizations = record_intel_customizations(output_filename) # INTEL
    symbol_prefix = '-' * 16 + ' T'
    p = subprocess.run([llvm_nm_binary, rtl_filename,
                       '--defined-only', '--no-demangle'], capture_output=True)
    if p.returncode:
        raise subprocess.SubprocessError(p.stderr.decode('utf-8'))

    lines = p.stdout.decode('utf-8').splitlines(keepends=True)
    count = 0
    with open(output_filename, 'w') as f:
        f.write(
            """; NOTE: This file is auto-generated by update_symbol_checks.py.\n"""
            """; NOTE: Do NOT modify this test manually!\n\n""")
        if requires_64bit:
            f.write("; REQUIRES: 64bit\n")
        f.write(
            """; RUN: llvm-nm {rtl_shortpath} --defined-only --no-demangle | FileCheck %s\n\n""".format(
                rtl_shortpath=rtl_shortpath)
        )
        check_prefix = '; CHECK:'
        endline = None # INTEL
        for line in lines:
            if not line.startswith(symbol_prefix):
                check_prefix = '; CHECK:'
                continue
            line = line.replace(symbol_prefix, check_prefix)
# INTEL_CUSTOMIZATION
            if line.strip() in customizations:
                endline = customizations[line.strip()]
                f.write('; INTEL_CUSTOMIZATION\n')
# end INTEL_CUSTOMIZATION
            f.write(line)
# INTEL_CUSTOMIZATION
            if line.strip() == endline:
                f.write('; end INTEL_CUSTOMIZATION\n')
                endline = None
# end INTEL_CUSTOMIZATION
            count += 1
            check_prefix = '; CHECK-NEXT:'

    assert(count > 0)
    print("Generated {count} symbol checks in {file}".format(
        count=count, file=output_filename))

if __name__ == '__main__':
    main()
