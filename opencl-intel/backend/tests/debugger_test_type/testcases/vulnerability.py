from testlib.debuggertestcase import DebuggerTestCase

class Vulnerability(DebuggerTestCase):
    CLNAME = 'vulnerability.cl'

    # try to perform step out of the kernel
    # it is expected that the program will go till the end
    # no step to the host
    def test_stepoutkernel(self):
        self.client.execute_debuggee(
            hostprog_name='ndrange_inout',
            cl_name=self.CLNAME)
        self.client.connect_to_server()
        self.client.start_session(0, 0, 0)

        bp = (self.CLNAME, 21)
        file, line = self.client.debug_run([bp])
        self.assertEqual((file, line), bp)

        # step out of the kernel
        try:
            location = self.client.debug_step_out()
        except RuntimeError as e:
            # check that debug session ends
            self.assertEqual(str(e), 'unexpected connection close')

        # done
        self.client.debug_run_finish()

    # Buffer overflow emulation:
    # sending message fake content
    def test_buffer_overflow3(self):
        from testlib.debugservermessages_pb2 import ClientToServerMessage, ServerToClientMessage
        from testlib.common import TestSuiteNotFoundException, logi, logw
        if self.client.get_server_port() == None:
            logw("Test skipped for GDB")
            return
        self.client.execute_debuggee(
            hostprog_name='ndrange_inout',
            cl_name=self.CLNAME)
        self.client.connect_to_server()
        self.client.start_session(0, 0, 0)

        bp = (self.CLNAME, 21)
        file, line = self.client.debug_run([bp])
        self.assertEqual((file, line), bp)

        msg = ClientToServerMessage()
        msg.type = ClientToServerMessage.GET_MEMORY_RANGE
        msg.get_memory_range_msg.start_addr = 0x1
        msg.get_memory_range_msg.end_addr = 0x2
        logi("Sending good message")

        try:
            self.assertEqual(self.client.var_query_value('p'), '10')
        except Exception as k:
            self.assertEqual("no except", str(k))

        logi("Sending wrong message with fake content")
        self.client.send_message_to_server_wrong_size('1'*100000, 100000)

        try:
            reply = self.client.get_message_from_server(10)
        except Exception as k:
            logi("No reply")

        logi("Sending good message")
        try:
            self.assertEqual(self.client.var_query_value('p'), '10')
        except Exception as k:
            self.assertEqual("no except", str(k))

        logi("Finishing execution")
        # done
        self.client.debug_run_finish()

    # Buffer overflow emulation:
    # sending message with proper header, huge extra data buffer and size equal to proper message size
    def test_buffer_overflow2(self):
        from debugservermessages_pb2 import ClientToServerMessage, ServerToClientMessage
        from testlib.debugservermessages_pb2 import ClientToServerMessage, ServerToClientMessage
        from testlib.common import TestSuiteNotFoundException, logi, logw
        if self.client.get_server_port() == None:
            logw("Test skipped for GDB")
            return
        self.client.execute_debuggee(
            hostprog_name='ndrange_inout',
            cl_name=self.CLNAME)
        self.client.connect_to_server()
        self.client.start_session(0, 0, 0)

        bp = (self.CLNAME, 21)
        file, line = self.client.debug_run([bp])
        self.assertEqual((file, line), bp)


        msg = ClientToServerMessage()
        msg.type = ClientToServerMessage.GET_MEMORY_RANGE
        msg.get_memory_range_msg.start_addr = 0x1
        msg.get_memory_range_msg.end_addr = 0x2

        logi("Sending good message")
        try:
            self.assertEqual(self.client.var_query_value('p'), '10')
        except Exception as k:
            self.assertEqual("no except", str(k))

        logi("Sending wrong message with size equal to proper message size but containing huge buffer")
        self.client.send_message_to_server_wrong_size(msg.SerializeToString()+'1'*100000, 9)

        try:
            reply = self.client.get_message_from_server(10)
        except Exception as k:
            logi("No reply")

        logi("Sending good message")
        try:
            self.assertEqual(self.client.var_query_value('p'), '10')
        except Exception as k:
            self.assertEqual("no except", str(k))

        logi("Finishing execution")
        # done
        self.client.debug_run_finish()

    # Buffer overflow emulation:
    # sending message with correct header, huge extra data buffer and real size
    def test_buffer_overflow1(self):
        from debugservermessages_pb2 import ClientToServerMessage, ServerToClientMessage
        from testlib.debugservermessages_pb2 import ClientToServerMessage, ServerToClientMessage
        from testlib.common import TestSuiteNotFoundException, logi, logw
        if self.client.get_server_port() == None:
            logw("Test skipped for GDB")
            return
        self.client.execute_debuggee(
            hostprog_name='ndrange_inout',
            cl_name=self.CLNAME)
        self.client.connect_to_server()
        self.client.start_session(0, 0, 0)

        bp = (self.CLNAME, 21)
        file, line = self.client.debug_run([bp])
        self.assertEqual((file, line), bp)

        msg = ClientToServerMessage()
        msg.type = ClientToServerMessage.GET_MEMORY_RANGE
        msg.get_memory_range_msg.start_addr = 0x1
        msg.get_memory_range_msg.end_addr = 0x2
        logi("Sending good message")
        try:
            self.assertEqual(self.client.var_query_value('p'), '10')
        except Exception as k:
            self.assertEqual("no except", str(k))

        logi("Sending wrong message with size equal to buffer size and big buffer")
        self.client.send_message_to_server_wrong_size(msg.SerializeToString()+'1'*100000, 100009)
        try:
            reply = self.client.get_message_from_server(10)
        except Exception as k:
            logi("No reply")

        logi("Sending good message")
        try:
            self.assertEqual(self.client.var_query_value('p'), '10')
        except Exception as k:
            self.assertEqual("no except", str(k))

        logi("Finishing execution")
        # done
        self.client.debug_run_finish()
    # Create second connection to the same debug server and try to execute step over command
    # check if it succeeds by checking variable value which changes if step happens
    def test_twoclients(self):
        from testlib.clientsimulator import ClientSimulator, SimulatorError
        from testlib.common import TestSuiteNotFoundException, logi, logw
        if self.client.get_server_port() == None:
            logw("Test skipped for GDB")
            return
        from debugservermessages_pb2 import ClientToServerMessage, ServerToClientMessage
        self.client.execute_debuggee(
            hostprog_name='ndrange_inout',
            cl_name=self.CLNAME)
        second_client=ClientSimulator(debuggee_exe_path=self.client.debuggee_exe_path,
                        cl_dir_path=self.client.cl_dir_path,
                        server_port=self.client.get_server_port(),
                        logfile=self.client.logfile)
        logi("Connect first time")
        self.client.connect_to_server()
        logi("Start session first time")
        self.client.start_session(0, 0, 0)

        logi("Connect second time")
        second_client.connect_to_server()
        try:
            second_client.start_session(0, 0, 0, 5)
        except SimulatorError as e:
            logi("Failed to start session second time"+str(e))

        logi("check first client breakpoint")
        bp1 = (self.CLNAME, 19)
        file, line = self.client.debug_run([bp1])
        self.assertEqual((file, line), bp1)
        logi("check variable value at line 19")
        self.assertEqual(self.client.var_query_value('p'), '9')

        logi("perform step over through second connection")
        msg = ClientToServerMessage()
        msg.type = ClientToServerMessage.SINGLE_STEP_OVER
        second_client.send_message_to_server(msg)

        try:
            reply = second_client.get_message_from_server(2)
        except Exception as e:
            #ignoring all failures
            logi("Expected exception was caught")

        logi("if current line is stil 19 p should be still 9")
        self.assertEqual(self.client.var_query_value('p'), '9')

        # done
        self.client.debug_run_finish()    # It is expected thet variable value is not changed

    # Check that second connection is dropped
    def test_second_connection(self):
        from testlib.clientsimulator import ClientSimulator, SimulatorError
        from testlib.common import TestSuiteNotFoundException, logi, logw, loge
        from debugservermessages_pb2 import ClientToServerMessage, ServerToClientMessage
        if self.client.get_server_port() == None:
            logw("Test skipped for GDB")
            return
        self.client.execute_debuggee(
            hostprog_name='ndrange_inout',
            cl_name=self.CLNAME)
        second_client=ClientSimulator(debuggee_exe_path=self.client.debuggee_exe_path,
                        cl_dir_path=self.client.cl_dir_path,
                        server_port=self.client.get_server_port(),
                        logfile=self.client.logfile)
        logi("Connect first time")
        self.client.connect_to_server()
        logi("Start session first time")
        self.client.start_session(0, 0, 0)

        logi("Connect second time")
        try:
            second_client.connect_to_server()
        except SimulatorError as e:
            logi("Second connection is dropped")
        else:
            self.assertEqual('!!!', 'Second connection is accepted')

    # try to read out of buffer
    # read before and after buffer is tryed
    def test_readoutofbuffer(self):
        from testlib.common import TestSuiteNotFoundException, logi, logw
        from testlib.clientsimulator import ClientSimulator, SimulatorError
        import re
        self.client.execute_debuggee(
            hostprog_name='ndrange_inout',
            cl_name=self.CLNAME)
        self.client.connect_to_server()
        self.client.start_session(0, 0, 0)

        bp = (self.CLNAME, 17)
        file, line = self.client.debug_run([bp])
        self.assertEqual((file, line), bp)

        buf_out=self.client.var_query_value('buf_out')
        buf_in=self.client.var_query_value('buf_in')
        logi("buf_in="+buf_in+", buf_out="+buf_out)
        try:
            logi("Checking address after buffer")
            if(buf_in<buf_out):
                logi(self.client.var_query_range(int(buf_in)+0xFFFD,int(buf_out)+0xFFFF))
            else:
                logi(self.client.var_query_range(int(buf_out)+0xFFFD,int(buf_in)+0xFFFF))

            logi("Checking address before buffer")
            if(buf_in<buf_out):
                logi(self.client.var_query_range(int(buf_in)-0xFFFF,int(buf_out)-0xFFFD))
            else:
                logi(self.client.var_query_range(int(buf_out)-0xFFFF,int(buf_in)-0xFFFD))

        except SimulatorError as e:
            # check that error response was recieved
            self.assertEqual(('Invalid GET_MEMORY_RANGE parameters' in str(e)), True )
        else:
            self.assertEqual('request should fail', '!!!')

        # done
        self.client.debug_run_finish()

    # check that socket is worldwide open 0.0.0.0:0
    def test_worldwide_socket(self):
        from testlib.common import TestSuiteNotFoundException, logi, logw
        from testlib.clientsimulator import ClientSimulator, SimulatorError
        if self.client.get_server_port() == None:
            logw("Test skipped for GDB")
            return
        import re, subprocess
        self.client.execute_debuggee(
            hostprog_name='ndrange_inout',
            cl_name=self.CLNAME)
        self.client.connect_to_server()
        output = subprocess.Popen('netstat -ano', stdout=subprocess.PIPE, shell=True).communicate()[0]
        match = re.search("(0\.0\.0\.0:56203|255\.255\.255\.255:56203).*"+str(self.client.subproc.pid),
                          output)
        self.assertIsNone(match)

        # done
        self.client.debug_run_finish()
