; XFAIL: win32
;
; RUN: llc < %s -mtriple=x86_64-pc-linux \
; RUN:       -march=y86-64 -mcpu=knc
;
;
; ModuleID = 'Program'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64"
target triple = "x86_64-unknown-linux-gnu"

%struct.PaddedDimId = type <{ [4 x i64] }>
%struct.WorkDim = type { i32, [3 x i64], [3 x i64], [3 x i64], [3 x i64] }

declare void @__MulMAdd4_original(float addrspace(1)* nocapture, i32) nounwind

declare i64 @get_global_id(i32)

declare i64 @get_global_size(i32)

declare void @dummybarrier.()

declare void @barrier(i64)

declare i8* @get_special_buffer.()

declare i64 @get_iter_count.()

declare i64 @get_new_global_id.(i32, i64)

define void @__MulMAdd4_separated_args(float addrspace(1)* nocapture %data, i32 %nIters, i8 addrspace(3)* %pLocalMem, %struct.WorkDim* %pWorkDim, i64* %pWGId, %struct.PaddedDimId* %pBaseGlbId, %struct.PaddedDimId* %pLocalIds, i64* %contextpointer, i64 %iterCount, i8* %pSpecialBuf, i64* %pCurrWI) nounwind alwaysinline {
FirstBB:
  %0 = icmp sgt i32 %nIters, 0
  br label %SyncBB

SyncBB:                                           ; preds = %thenBB, %FirstBB
  %CurrWI..0 = phi i64 [ 0, %FirstBB ], [ %"CurrWI++", %thenBB ]
  %1 = getelementptr %struct.PaddedDimId* %pLocalIds, i64 %CurrWI..0, i32 0, i64 0
  %2 = load i64* %1, align 8
  %3 = getelementptr %struct.PaddedDimId* %pBaseGlbId, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = add i64 %2, %4
  %sext = shl i64 %5, 32
  %6 = ashr i64 %sext, 32
  %7 = getelementptr inbounds float addrspace(1)* %data, i64 %6
  %8 = load float addrspace(1)* %7, align 4
  %9 = fsub float 1.000000e+01, %8
  br i1 %0, label %bb.nph, label %._crit_edge

bb.nph:                                           ; preds = %SyncBB, %bb.nph
  %j.05 = phi i32 [ %250, %bb.nph ], [ 0, %SyncBB ]
  %s4.04 = phi float [ %249, %bb.nph ], [ %9, %SyncBB ]
  %s3.03 = phi float [ %244, %bb.nph ], [ %8, %SyncBB ]
  %s2.02 = phi float [ %239, %bb.nph ], [ %9, %SyncBB ]
  %s.01 = phi float [ %234, %bb.nph ], [ %8, %SyncBB ]
  %10 = fpext float %s.01 to double
  %11 = fmul double %10, 3.550000e-01
  %12 = fsub double 3.750000e+00, %11
  %13 = fmul double %12, %10
  %14 = fptrunc double %13 to float
  %15 = fpext float %s2.02 to double
  %16 = fmul double %15, 3.550000e-01
  %17 = fsub double 3.750000e+00, %16
  %18 = fmul double %17, %15
  %19 = fptrunc double %18 to float
  %20 = fpext float %s3.03 to double
  %21 = fmul double %20, 3.550000e-01
  %22 = fsub double 3.750000e+00, %21
  %23 = fmul double %22, %20
  %24 = fptrunc double %23 to float
  %25 = fpext float %s4.04 to double
  %26 = fmul double %25, 3.550000e-01
  %27 = fsub double 3.750000e+00, %26
  %28 = fmul double %27, %25
  %29 = fptrunc double %28 to float
  %30 = fpext float %14 to double
  %31 = fmul double %30, 3.550000e-01
  %32 = fsub double 3.750000e+00, %31
  %33 = fmul double %32, %30
  %34 = fptrunc double %33 to float
  %35 = fpext float %19 to double
  %36 = fmul double %35, 3.550000e-01
  %37 = fsub double 3.750000e+00, %36
  %38 = fmul double %37, %35
  %39 = fptrunc double %38 to float
  %40 = fpext float %24 to double
  %41 = fmul double %40, 3.550000e-01
  %42 = fsub double 3.750000e+00, %41
  %43 = fmul double %42, %40
  %44 = fptrunc double %43 to float
  %45 = fpext float %29 to double
  %46 = fmul double %45, 3.550000e-01
  %47 = fsub double 3.750000e+00, %46
  %48 = fmul double %47, %45
  %49 = fptrunc double %48 to float
  %50 = fpext float %34 to double
  %51 = fmul double %50, 3.550000e-01
  %52 = fsub double 3.750000e+00, %51
  %53 = fmul double %52, %50
  %54 = fptrunc double %53 to float
  %55 = fpext float %39 to double
  %56 = fmul double %55, 3.550000e-01
  %57 = fsub double 3.750000e+00, %56
  %58 = fmul double %57, %55
  %59 = fptrunc double %58 to float
  %60 = fpext float %44 to double
  %61 = fmul double %60, 3.550000e-01
  %62 = fsub double 3.750000e+00, %61
  %63 = fmul double %62, %60
  %64 = fptrunc double %63 to float
  %65 = fpext float %49 to double
  %66 = fmul double %65, 3.550000e-01
  %67 = fsub double 3.750000e+00, %66
  %68 = fmul double %67, %65
  %69 = fptrunc double %68 to float
  %70 = fpext float %54 to double
  %71 = fmul double %70, 3.550000e-01
  %72 = fsub double 3.750000e+00, %71
  %73 = fmul double %72, %70
  %74 = fptrunc double %73 to float
  %75 = fpext float %59 to double
  %76 = fmul double %75, 3.550000e-01
  %77 = fsub double 3.750000e+00, %76
  %78 = fmul double %77, %75
  %79 = fptrunc double %78 to float
  %80 = fpext float %64 to double
  %81 = fmul double %80, 3.550000e-01
  %82 = fsub double 3.750000e+00, %81
  %83 = fmul double %82, %80
  %84 = fptrunc double %83 to float
  %85 = fpext float %69 to double
  %86 = fmul double %85, 3.550000e-01
  %87 = fsub double 3.750000e+00, %86
  %88 = fmul double %87, %85
  %89 = fptrunc double %88 to float
  %90 = fpext float %74 to double
  %91 = fmul double %90, 3.550000e-01
  %92 = fsub double 3.750000e+00, %91
  %93 = fmul double %92, %90
  %94 = fptrunc double %93 to float
  %95 = fpext float %79 to double
  %96 = fmul double %95, 3.550000e-01
  %97 = fsub double 3.750000e+00, %96
  %98 = fmul double %97, %95
  %99 = fptrunc double %98 to float
  %100 = fpext float %84 to double
  %101 = fmul double %100, 3.550000e-01
  %102 = fsub double 3.750000e+00, %101
  %103 = fmul double %102, %100
  %104 = fptrunc double %103 to float
  %105 = fpext float %89 to double
  %106 = fmul double %105, 3.550000e-01
  %107 = fsub double 3.750000e+00, %106
  %108 = fmul double %107, %105
  %109 = fptrunc double %108 to float
  %110 = fpext float %94 to double
  %111 = fmul double %110, 3.550000e-01
  %112 = fsub double 3.750000e+00, %111
  %113 = fmul double %112, %110
  %114 = fptrunc double %113 to float
  %115 = fpext float %99 to double
  %116 = fmul double %115, 3.550000e-01
  %117 = fsub double 3.750000e+00, %116
  %118 = fmul double %117, %115
  %119 = fptrunc double %118 to float
  %120 = fpext float %104 to double
  %121 = fmul double %120, 3.550000e-01
  %122 = fsub double 3.750000e+00, %121
  %123 = fmul double %122, %120
  %124 = fptrunc double %123 to float
  %125 = fpext float %109 to double
  %126 = fmul double %125, 3.550000e-01
  %127 = fsub double 3.750000e+00, %126
  %128 = fmul double %127, %125
  %129 = fptrunc double %128 to float
  %130 = fpext float %114 to double
  %131 = fmul double %130, 3.550000e-01
  %132 = fsub double 3.750000e+00, %131
  %133 = fmul double %132, %130
  %134 = fptrunc double %133 to float
  %135 = fpext float %119 to double
  %136 = fmul double %135, 3.550000e-01
  %137 = fsub double 3.750000e+00, %136
  %138 = fmul double %137, %135
  %139 = fptrunc double %138 to float
  %140 = fpext float %124 to double
  %141 = fmul double %140, 3.550000e-01
  %142 = fsub double 3.750000e+00, %141
  %143 = fmul double %142, %140
  %144 = fptrunc double %143 to float
  %145 = fpext float %129 to double
  %146 = fmul double %145, 3.550000e-01
  %147 = fsub double 3.750000e+00, %146
  %148 = fmul double %147, %145
  %149 = fptrunc double %148 to float
  %150 = fpext float %134 to double
  %151 = fmul double %150, 3.550000e-01
  %152 = fsub double 3.750000e+00, %151
  %153 = fmul double %152, %150
  %154 = fptrunc double %153 to float
  %155 = fpext float %139 to double
  %156 = fmul double %155, 3.550000e-01
  %157 = fsub double 3.750000e+00, %156
  %158 = fmul double %157, %155
  %159 = fptrunc double %158 to float
  %160 = fpext float %144 to double
  %161 = fmul double %160, 3.550000e-01
  %162 = fsub double 3.750000e+00, %161
  %163 = fmul double %162, %160
  %164 = fptrunc double %163 to float
  %165 = fpext float %149 to double
  %166 = fmul double %165, 3.550000e-01
  %167 = fsub double 3.750000e+00, %166
  %168 = fmul double %167, %165
  %169 = fptrunc double %168 to float
  %170 = fpext float %154 to double
  %171 = fmul double %170, 3.550000e-01
  %172 = fsub double 3.750000e+00, %171
  %173 = fmul double %172, %170
  %174 = fptrunc double %173 to float
  %175 = fpext float %159 to double
  %176 = fmul double %175, 3.550000e-01
  %177 = fsub double 3.750000e+00, %176
  %178 = fmul double %177, %175
  %179 = fptrunc double %178 to float
  %180 = fpext float %164 to double
  %181 = fmul double %180, 3.550000e-01
  %182 = fsub double 3.750000e+00, %181
  %183 = fmul double %182, %180
  %184 = fptrunc double %183 to float
  %185 = fpext float %169 to double
  %186 = fmul double %185, 3.550000e-01
  %187 = fsub double 3.750000e+00, %186
  %188 = fmul double %187, %185
  %189 = fptrunc double %188 to float
  %190 = fpext float %174 to double
  %191 = fmul double %190, 3.550000e-01
  %192 = fsub double 3.750000e+00, %191
  %193 = fmul double %192, %190
  %194 = fptrunc double %193 to float
  %195 = fpext float %179 to double
  %196 = fmul double %195, 3.550000e-01
  %197 = fsub double 3.750000e+00, %196
  %198 = fmul double %197, %195
  %199 = fptrunc double %198 to float
  %200 = fpext float %184 to double
  %201 = fmul double %200, 3.550000e-01
  %202 = fsub double 3.750000e+00, %201
  %203 = fmul double %202, %200
  %204 = fptrunc double %203 to float
  %205 = fpext float %189 to double
  %206 = fmul double %205, 3.550000e-01
  %207 = fsub double 3.750000e+00, %206
  %208 = fmul double %207, %205
  %209 = fptrunc double %208 to float
  %210 = fpext float %194 to double
  %211 = fmul double %210, 3.550000e-01
  %212 = fsub double 3.750000e+00, %211
  %213 = fmul double %212, %210
  %214 = fptrunc double %213 to float
  %215 = fpext float %199 to double
  %216 = fmul double %215, 3.550000e-01
  %217 = fsub double 3.750000e+00, %216
  %218 = fmul double %217, %215
  %219 = fptrunc double %218 to float
  %220 = fpext float %204 to double
  %221 = fmul double %220, 3.550000e-01
  %222 = fsub double 3.750000e+00, %221
  %223 = fmul double %222, %220
  %224 = fptrunc double %223 to float
  %225 = fpext float %209 to double
  %226 = fmul double %225, 3.550000e-01
  %227 = fsub double 3.750000e+00, %226
  %228 = fmul double %227, %225
  %229 = fptrunc double %228 to float
  %230 = fpext float %214 to double
  %231 = fmul double %230, 3.550000e-01
  %232 = fsub double 3.750000e+00, %231
  %233 = fmul double %232, %230
  %234 = fptrunc double %233 to float
  %235 = fpext float %219 to double
  %236 = fmul double %235, 3.550000e-01
  %237 = fsub double 3.750000e+00, %236
  %238 = fmul double %237, %235
  %239 = fptrunc double %238 to float
  %240 = fpext float %224 to double
  %241 = fmul double %240, 3.550000e-01
  %242 = fsub double 3.750000e+00, %241
  %243 = fmul double %242, %240
  %244 = fptrunc double %243 to float
  %245 = fpext float %229 to double
  %246 = fmul double %245, 3.550000e-01
  %247 = fsub double 3.750000e+00, %246
  %248 = fmul double %247, %245
  %249 = fptrunc double %248 to float
  %250 = add nsw i32 %j.05, 1
  %exitcond = icmp eq i32 %250, %nIters
  br i1 %exitcond, label %._crit_edge, label %bb.nph

._crit_edge:                                      ; preds = %bb.nph, %SyncBB
  %s4.0.lcssa = phi float [ %9, %SyncBB ], [ %249, %bb.nph ]
  %s3.0.lcssa = phi float [ %8, %SyncBB ], [ %244, %bb.nph ]
  %s2.0.lcssa = phi float [ %9, %SyncBB ], [ %239, %bb.nph ]
  %s.0.lcssa = phi float [ %8, %SyncBB ], [ %234, %bb.nph ]
  %251 = fadd float %s.0.lcssa, %s2.0.lcssa
  %252 = fadd float %251, %s3.0.lcssa
  %253 = fadd float %252, %s4.0.lcssa
  store float %253, float addrspace(1)* %7, align 4
  %check.WI.iter = icmp ult i64 %CurrWI..0, %iterCount
  br i1 %check.WI.iter, label %thenBB, label %SyncBB12

thenBB:                                           ; preds = %._crit_edge
  %"CurrWI++" = add nuw i64 %CurrWI..0, 1
  br label %SyncBB

SyncBB12:                                         ; preds = %._crit_edge
  ret void
}

define void @MulMAdd4(i8* %pBuffer) {
entry:
  %0 = bitcast i8* %pBuffer to float addrspace(1)**
  %1 = load float addrspace(1)** %0, align 8
  %2 = getelementptr i8* %pBuffer, i64 8
  %3 = bitcast i8* %2 to i32*
  %4 = load i32* %3, align 4
  %5 = getelementptr i8* %pBuffer, i64 40
  %6 = bitcast i8* %5 to %struct.PaddedDimId**
  %7 = load %struct.PaddedDimId** %6, align 8
  %8 = getelementptr i8* %pBuffer, i64 48
  %9 = bitcast i8* %8 to %struct.PaddedDimId**
  %10 = load %struct.PaddedDimId** %9, align 8
  %11 = getelementptr i8* %pBuffer, i64 64
  %12 = bitcast i8* %11 to i64*
  %13 = load i64* %12, align 8
  %14 = icmp sgt i32 %4, 0
  br label %SyncBB.i

SyncBB.i:                                         ; preds = %thenBB.i, %entry
  %CurrWI..0.i = phi i64 [ 0, %entry ], [ %"CurrWI++.i", %thenBB.i ]
  %15 = getelementptr %struct.PaddedDimId* %10, i64 %CurrWI..0.i, i32 0, i64 0
  %16 = load i64* %15, align 8
  %17 = getelementptr %struct.PaddedDimId* %7, i64 0, i32 0, i64 0
  %18 = load i64* %17, align 8
  %19 = add i64 %16, %18
  %sext.i = shl i64 %19, 32
  %20 = ashr i64 %sext.i, 32
  %21 = getelementptr inbounds float addrspace(1)* %1, i64 %20
  %22 = load float addrspace(1)* %21, align 4
  %23 = fsub float 1.000000e+01, %22
  br i1 %14, label %bb.nph.i, label %._crit_edge.i

bb.nph.i:                                         ; preds = %bb.nph.i, %SyncBB.i
  %j.05.i = phi i32 [ %264, %bb.nph.i ], [ 0, %SyncBB.i ]
  %s4.04.i = phi float [ %263, %bb.nph.i ], [ %23, %SyncBB.i ]
  %s3.03.i = phi float [ %258, %bb.nph.i ], [ %22, %SyncBB.i ]
  %s2.02.i = phi float [ %253, %bb.nph.i ], [ %23, %SyncBB.i ]
  %s.01.i = phi float [ %248, %bb.nph.i ], [ %22, %SyncBB.i ]
  %24 = fpext float %s.01.i to double
  %25 = fmul double %24, 3.550000e-01
  %26 = fsub double 3.750000e+00, %25
  %27 = fmul double %26, %24
  %28 = fptrunc double %27 to float
  %29 = fpext float %s2.02.i to double
  %30 = fmul double %29, 3.550000e-01
  %31 = fsub double 3.750000e+00, %30
  %32 = fmul double %31, %29
  %33 = fptrunc double %32 to float
  %34 = fpext float %s3.03.i to double
  %35 = fmul double %34, 3.550000e-01
  %36 = fsub double 3.750000e+00, %35
  %37 = fmul double %36, %34
  %38 = fptrunc double %37 to float
  %39 = fpext float %s4.04.i to double
  %40 = fmul double %39, 3.550000e-01
  %41 = fsub double 3.750000e+00, %40
  %42 = fmul double %41, %39
  %43 = fptrunc double %42 to float
  %44 = fpext float %28 to double
  %45 = fmul double %44, 3.550000e-01
  %46 = fsub double 3.750000e+00, %45
  %47 = fmul double %46, %44
  %48 = fptrunc double %47 to float
  %49 = fpext float %33 to double
  %50 = fmul double %49, 3.550000e-01
  %51 = fsub double 3.750000e+00, %50
  %52 = fmul double %51, %49
  %53 = fptrunc double %52 to float
  %54 = fpext float %38 to double
  %55 = fmul double %54, 3.550000e-01
  %56 = fsub double 3.750000e+00, %55
  %57 = fmul double %56, %54
  %58 = fptrunc double %57 to float
  %59 = fpext float %43 to double
  %60 = fmul double %59, 3.550000e-01
  %61 = fsub double 3.750000e+00, %60
  %62 = fmul double %61, %59
  %63 = fptrunc double %62 to float
  %64 = fpext float %48 to double
  %65 = fmul double %64, 3.550000e-01
  %66 = fsub double 3.750000e+00, %65
  %67 = fmul double %66, %64
  %68 = fptrunc double %67 to float
  %69 = fpext float %53 to double
  %70 = fmul double %69, 3.550000e-01
  %71 = fsub double 3.750000e+00, %70
  %72 = fmul double %71, %69
  %73 = fptrunc double %72 to float
  %74 = fpext float %58 to double
  %75 = fmul double %74, 3.550000e-01
  %76 = fsub double 3.750000e+00, %75
  %77 = fmul double %76, %74
  %78 = fptrunc double %77 to float
  %79 = fpext float %63 to double
  %80 = fmul double %79, 3.550000e-01
  %81 = fsub double 3.750000e+00, %80
  %82 = fmul double %81, %79
  %83 = fptrunc double %82 to float
  %84 = fpext float %68 to double
  %85 = fmul double %84, 3.550000e-01
  %86 = fsub double 3.750000e+00, %85
  %87 = fmul double %86, %84
  %88 = fptrunc double %87 to float
  %89 = fpext float %73 to double
  %90 = fmul double %89, 3.550000e-01
  %91 = fsub double 3.750000e+00, %90
  %92 = fmul double %91, %89
  %93 = fptrunc double %92 to float
  %94 = fpext float %78 to double
  %95 = fmul double %94, 3.550000e-01
  %96 = fsub double 3.750000e+00, %95
  %97 = fmul double %96, %94
  %98 = fptrunc double %97 to float
  %99 = fpext float %83 to double
  %100 = fmul double %99, 3.550000e-01
  %101 = fsub double 3.750000e+00, %100
  %102 = fmul double %101, %99
  %103 = fptrunc double %102 to float
  %104 = fpext float %88 to double
  %105 = fmul double %104, 3.550000e-01
  %106 = fsub double 3.750000e+00, %105
  %107 = fmul double %106, %104
  %108 = fptrunc double %107 to float
  %109 = fpext float %93 to double
  %110 = fmul double %109, 3.550000e-01
  %111 = fsub double 3.750000e+00, %110
  %112 = fmul double %111, %109
  %113 = fptrunc double %112 to float
  %114 = fpext float %98 to double
  %115 = fmul double %114, 3.550000e-01
  %116 = fsub double 3.750000e+00, %115
  %117 = fmul double %116, %114
  %118 = fptrunc double %117 to float
  %119 = fpext float %103 to double
  %120 = fmul double %119, 3.550000e-01
  %121 = fsub double 3.750000e+00, %120
  %122 = fmul double %121, %119
  %123 = fptrunc double %122 to float
  %124 = fpext float %108 to double
  %125 = fmul double %124, 3.550000e-01
  %126 = fsub double 3.750000e+00, %125
  %127 = fmul double %126, %124
  %128 = fptrunc double %127 to float
  %129 = fpext float %113 to double
  %130 = fmul double %129, 3.550000e-01
  %131 = fsub double 3.750000e+00, %130
  %132 = fmul double %131, %129
  %133 = fptrunc double %132 to float
  %134 = fpext float %118 to double
  %135 = fmul double %134, 3.550000e-01
  %136 = fsub double 3.750000e+00, %135
  %137 = fmul double %136, %134
  %138 = fptrunc double %137 to float
  %139 = fpext float %123 to double
  %140 = fmul double %139, 3.550000e-01
  %141 = fsub double 3.750000e+00, %140
  %142 = fmul double %141, %139
  %143 = fptrunc double %142 to float
  %144 = fpext float %128 to double
  %145 = fmul double %144, 3.550000e-01
  %146 = fsub double 3.750000e+00, %145
  %147 = fmul double %146, %144
  %148 = fptrunc double %147 to float
  %149 = fpext float %133 to double
  %150 = fmul double %149, 3.550000e-01
  %151 = fsub double 3.750000e+00, %150
  %152 = fmul double %151, %149
  %153 = fptrunc double %152 to float
  %154 = fpext float %138 to double
  %155 = fmul double %154, 3.550000e-01
  %156 = fsub double 3.750000e+00, %155
  %157 = fmul double %156, %154
  %158 = fptrunc double %157 to float
  %159 = fpext float %143 to double
  %160 = fmul double %159, 3.550000e-01
  %161 = fsub double 3.750000e+00, %160
  %162 = fmul double %161, %159
  %163 = fptrunc double %162 to float
  %164 = fpext float %148 to double
  %165 = fmul double %164, 3.550000e-01
  %166 = fsub double 3.750000e+00, %165
  %167 = fmul double %166, %164
  %168 = fptrunc double %167 to float
  %169 = fpext float %153 to double
  %170 = fmul double %169, 3.550000e-01
  %171 = fsub double 3.750000e+00, %170
  %172 = fmul double %171, %169
  %173 = fptrunc double %172 to float
  %174 = fpext float %158 to double
  %175 = fmul double %174, 3.550000e-01
  %176 = fsub double 3.750000e+00, %175
  %177 = fmul double %176, %174
  %178 = fptrunc double %177 to float
  %179 = fpext float %163 to double
  %180 = fmul double %179, 3.550000e-01
  %181 = fsub double 3.750000e+00, %180
  %182 = fmul double %181, %179
  %183 = fptrunc double %182 to float
  %184 = fpext float %168 to double
  %185 = fmul double %184, 3.550000e-01
  %186 = fsub double 3.750000e+00, %185
  %187 = fmul double %186, %184
  %188 = fptrunc double %187 to float
  %189 = fpext float %173 to double
  %190 = fmul double %189, 3.550000e-01
  %191 = fsub double 3.750000e+00, %190
  %192 = fmul double %191, %189
  %193 = fptrunc double %192 to float
  %194 = fpext float %178 to double
  %195 = fmul double %194, 3.550000e-01
  %196 = fsub double 3.750000e+00, %195
  %197 = fmul double %196, %194
  %198 = fptrunc double %197 to float
  %199 = fpext float %183 to double
  %200 = fmul double %199, 3.550000e-01
  %201 = fsub double 3.750000e+00, %200
  %202 = fmul double %201, %199
  %203 = fptrunc double %202 to float
  %204 = fpext float %188 to double
  %205 = fmul double %204, 3.550000e-01
  %206 = fsub double 3.750000e+00, %205
  %207 = fmul double %206, %204
  %208 = fptrunc double %207 to float
  %209 = fpext float %193 to double
  %210 = fmul double %209, 3.550000e-01
  %211 = fsub double 3.750000e+00, %210
  %212 = fmul double %211, %209
  %213 = fptrunc double %212 to float
  %214 = fpext float %198 to double
  %215 = fmul double %214, 3.550000e-01
  %216 = fsub double 3.750000e+00, %215
  %217 = fmul double %216, %214
  %218 = fptrunc double %217 to float
  %219 = fpext float %203 to double
  %220 = fmul double %219, 3.550000e-01
  %221 = fsub double 3.750000e+00, %220
  %222 = fmul double %221, %219
  %223 = fptrunc double %222 to float
  %224 = fpext float %208 to double
  %225 = fmul double %224, 3.550000e-01
  %226 = fsub double 3.750000e+00, %225
  %227 = fmul double %226, %224
  %228 = fptrunc double %227 to float
  %229 = fpext float %213 to double
  %230 = fmul double %229, 3.550000e-01
  %231 = fsub double 3.750000e+00, %230
  %232 = fmul double %231, %229
  %233 = fptrunc double %232 to float
  %234 = fpext float %218 to double
  %235 = fmul double %234, 3.550000e-01
  %236 = fsub double 3.750000e+00, %235
  %237 = fmul double %236, %234
  %238 = fptrunc double %237 to float
  %239 = fpext float %223 to double
  %240 = fmul double %239, 3.550000e-01
  %241 = fsub double 3.750000e+00, %240
  %242 = fmul double %241, %239
  %243 = fptrunc double %242 to float
  %244 = fpext float %228 to double
  %245 = fmul double %244, 3.550000e-01
  %246 = fsub double 3.750000e+00, %245
  %247 = fmul double %246, %244
  %248 = fptrunc double %247 to float
  %249 = fpext float %233 to double
  %250 = fmul double %249, 3.550000e-01
  %251 = fsub double 3.750000e+00, %250
  %252 = fmul double %251, %249
  %253 = fptrunc double %252 to float
  %254 = fpext float %238 to double
  %255 = fmul double %254, 3.550000e-01
  %256 = fsub double 3.750000e+00, %255
  %257 = fmul double %256, %254
  %258 = fptrunc double %257 to float
  %259 = fpext float %243 to double
  %260 = fmul double %259, 3.550000e-01
  %261 = fsub double 3.750000e+00, %260
  %262 = fmul double %261, %259
  %263 = fptrunc double %262 to float
  %264 = add nsw i32 %j.05.i, 1
  %exitcond.i = icmp eq i32 %264, %4
  br i1 %exitcond.i, label %._crit_edge.i, label %bb.nph.i

._crit_edge.i:                                    ; preds = %bb.nph.i, %SyncBB.i
  %s4.0.lcssa.i = phi float [ %23, %SyncBB.i ], [ %263, %bb.nph.i ]
  %s3.0.lcssa.i = phi float [ %22, %SyncBB.i ], [ %258, %bb.nph.i ]
  %s2.0.lcssa.i = phi float [ %23, %SyncBB.i ], [ %253, %bb.nph.i ]
  %s.0.lcssa.i = phi float [ %22, %SyncBB.i ], [ %248, %bb.nph.i ]
  %265 = fadd float %s.0.lcssa.i, %s2.0.lcssa.i
  %266 = fadd float %265, %s3.0.lcssa.i
  %267 = fadd float %266, %s4.0.lcssa.i
  store float %267, float addrspace(1)* %21, align 4
  %check.WI.iter.i = icmp ult i64 %CurrWI..0.i, %13
  br i1 %check.WI.iter.i, label %thenBB.i, label %__MulMAdd4_separated_args.exit

thenBB.i:                                         ; preds = %._crit_edge.i
  %"CurrWI++.i" = add nuw i64 %CurrWI..0.i, 1
  br label %SyncBB.i

__MulMAdd4_separated_args.exit:                   ; preds = %._crit_edge.i
  ret void
}

!opencl.kernels = !{!0}

!0 = metadata !{void (float addrspace(1)*, i32, i8 addrspace(3)*, %struct.WorkDim*, i64*, %struct.PaddedDimId*, %struct.PaddedDimId*, i64*, i64, i8*, i64*)* @__MulMAdd4_separated_args, metadata !1, metadata !1, metadata !"", metadata !"float __attribute__((address_space(1))) *, int", metadata !"opencl_MulMAdd4_locals_anchor", void (i8*)* @MulMAdd4}
!1 = metadata !{i32 0, i32 0, i32 0}
