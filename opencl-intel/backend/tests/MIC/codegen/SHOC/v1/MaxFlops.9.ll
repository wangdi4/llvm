; XFAIL: win32
;
; RUN: llc < %s -mtriple=x86_64-pc-linux \
; RUN:       -march=y86-64 -mcpu=knf
;
; RUNc: llc < %s -mtriple=x86_64-pc-linux \
; RUNc:       -march=y86-64 -mcpu=knc
;
; ModuleID = 'Program'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64"
target triple = "x86_64-unknown-linux-gnu"

%struct.PaddedDimId = type <{ [4 x i64] }>
%struct.WorkDim = type { i32, [3 x i64], [3 x i64], [3 x i64], [3 x i64] }

declare void @__Mul8_original(float addrspace(1)* nocapture, i32) nounwind

declare i64 @get_global_id(i32)

declare i64 @get_global_size(i32)

declare void @dummybarrier.()

declare void @barrier(i64)

declare i8* @get_special_buffer.()

declare i64 @get_iter_count.()

declare i64 @get_new_global_id.(i32, i64)

define void @__Mul8_separated_args(float addrspace(1)* nocapture %data, i32 %nIters, i8 addrspace(3)* %pLocalMem, %struct.WorkDim* %pWorkDim, i64* %pWGId, %struct.PaddedDimId* %pBaseGlbId, %struct.PaddedDimId* %pLocalIds, i64* %contextpointer, i64 %iterCount, i8* %pSpecialBuf, i64* %pCurrWI) nounwind alwaysinline {
FirstBB:
  %0 = icmp sgt i32 %nIters, 0
  br label %SyncBB24

SyncBB24:                                         ; preds = %thenBB, %FirstBB
  %CurrWI..0 = phi i64 [ 0, %FirstBB ], [ %"CurrWI++", %thenBB ]
  %1 = getelementptr %struct.PaddedDimId* %pLocalIds, i64 %CurrWI..0, i32 0, i64 0
  %2 = load i64* %1, align 8
  %3 = getelementptr %struct.PaddedDimId* %pBaseGlbId, i64 0, i32 0, i64 0
  %4 = load i64* %3, align 8
  %5 = add i64 %2, %4
  %sext = shl i64 %5, 32
  %6 = ashr i64 %sext, 32
  %7 = getelementptr inbounds float addrspace(1)* %data, i64 %6
  %8 = load float addrspace(1)* %7, align 4
  %9 = fsub float %8, %8
  %10 = fpext float %9 to double
  %11 = fadd double %10, 9.990000e-01
  %12 = fptrunc double %11 to float
  %13 = fsub float 1.000000e+01, %12
  br i1 %0, label %bb.nph, label %._crit_edge

bb.nph:                                           ; preds = %SyncBB24, %bb.nph
  %j.09 = phi i32 [ %238, %bb.nph ], [ 0, %SyncBB24 ]
  %s8.08 = phi float [ %237, %bb.nph ], [ %13, %SyncBB24 ]
  %s7.07 = phi float [ %233, %bb.nph ], [ %12, %SyncBB24 ]
  %s6.06 = phi float [ %229, %bb.nph ], [ %13, %SyncBB24 ]
  %s.05 = phi float [ %209, %bb.nph ], [ %12, %SyncBB24 ]
  %s2.04 = phi float [ %213, %bb.nph ], [ %13, %SyncBB24 ]
  %s3.03 = phi float [ %217, %bb.nph ], [ %12, %SyncBB24 ]
  %s4.02 = phi float [ %221, %bb.nph ], [ %13, %SyncBB24 ]
  %s5.01 = phi float [ %225, %bb.nph ], [ %12, %SyncBB24 ]
  %14 = fmul float %s.05, %s.05
  %15 = fpext float %14 to double
  %16 = fmul double %15, 1.010000e+00
  %17 = fptrunc double %16 to float
  %18 = fmul float %s2.04, %s2.04
  %19 = fpext float %18 to double
  %20 = fmul double %19, 1.010000e+00
  %21 = fptrunc double %20 to float
  %22 = fmul float %s3.03, %s3.03
  %23 = fpext float %22 to double
  %24 = fmul double %23, 1.010000e+00
  %25 = fptrunc double %24 to float
  %26 = fmul float %s4.02, %s4.02
  %27 = fpext float %26 to double
  %28 = fmul double %27, 1.010000e+00
  %29 = fptrunc double %28 to float
  %30 = fmul float %s5.01, %s5.01
  %31 = fpext float %30 to double
  %32 = fmul double %31, 1.010000e+00
  %33 = fptrunc double %32 to float
  %34 = fmul float %s6.06, %s6.06
  %35 = fpext float %34 to double
  %36 = fmul double %35, 1.010000e+00
  %37 = fptrunc double %36 to float
  %38 = fmul float %s7.07, %s7.07
  %39 = fpext float %38 to double
  %40 = fmul double %39, 1.010000e+00
  %41 = fptrunc double %40 to float
  %42 = fmul float %s8.08, %s8.08
  %43 = fpext float %42 to double
  %44 = fmul double %43, 1.010000e+00
  %45 = fptrunc double %44 to float
  %46 = fmul float %17, %17
  %47 = fpext float %46 to double
  %48 = fmul double %47, 1.010000e+00
  %49 = fptrunc double %48 to float
  %50 = fmul float %21, %21
  %51 = fpext float %50 to double
  %52 = fmul double %51, 1.010000e+00
  %53 = fptrunc double %52 to float
  %54 = fmul float %25, %25
  %55 = fpext float %54 to double
  %56 = fmul double %55, 1.010000e+00
  %57 = fptrunc double %56 to float
  %58 = fmul float %29, %29
  %59 = fpext float %58 to double
  %60 = fmul double %59, 1.010000e+00
  %61 = fptrunc double %60 to float
  %62 = fmul float %33, %33
  %63 = fpext float %62 to double
  %64 = fmul double %63, 1.010000e+00
  %65 = fptrunc double %64 to float
  %66 = fmul float %37, %37
  %67 = fpext float %66 to double
  %68 = fmul double %67, 1.010000e+00
  %69 = fptrunc double %68 to float
  %70 = fmul float %41, %41
  %71 = fpext float %70 to double
  %72 = fmul double %71, 1.010000e+00
  %73 = fptrunc double %72 to float
  %74 = fmul float %45, %45
  %75 = fpext float %74 to double
  %76 = fmul double %75, 1.010000e+00
  %77 = fptrunc double %76 to float
  %78 = fmul float %49, %49
  %79 = fpext float %78 to double
  %80 = fmul double %79, 1.010000e+00
  %81 = fptrunc double %80 to float
  %82 = fmul float %53, %53
  %83 = fpext float %82 to double
  %84 = fmul double %83, 1.010000e+00
  %85 = fptrunc double %84 to float
  %86 = fmul float %57, %57
  %87 = fpext float %86 to double
  %88 = fmul double %87, 1.010000e+00
  %89 = fptrunc double %88 to float
  %90 = fmul float %61, %61
  %91 = fpext float %90 to double
  %92 = fmul double %91, 1.010000e+00
  %93 = fptrunc double %92 to float
  %94 = fmul float %65, %65
  %95 = fpext float %94 to double
  %96 = fmul double %95, 1.010000e+00
  %97 = fptrunc double %96 to float
  %98 = fmul float %69, %69
  %99 = fpext float %98 to double
  %100 = fmul double %99, 1.010000e+00
  %101 = fptrunc double %100 to float
  %102 = fmul float %73, %73
  %103 = fpext float %102 to double
  %104 = fmul double %103, 1.010000e+00
  %105 = fptrunc double %104 to float
  %106 = fmul float %77, %77
  %107 = fpext float %106 to double
  %108 = fmul double %107, 1.010000e+00
  %109 = fptrunc double %108 to float
  %110 = fmul float %81, %81
  %111 = fpext float %110 to double
  %112 = fmul double %111, 1.010000e+00
  %113 = fptrunc double %112 to float
  %114 = fmul float %85, %85
  %115 = fpext float %114 to double
  %116 = fmul double %115, 1.010000e+00
  %117 = fptrunc double %116 to float
  %118 = fmul float %89, %89
  %119 = fpext float %118 to double
  %120 = fmul double %119, 1.010000e+00
  %121 = fptrunc double %120 to float
  %122 = fmul float %93, %93
  %123 = fpext float %122 to double
  %124 = fmul double %123, 1.010000e+00
  %125 = fptrunc double %124 to float
  %126 = fmul float %97, %97
  %127 = fpext float %126 to double
  %128 = fmul double %127, 1.010000e+00
  %129 = fptrunc double %128 to float
  %130 = fmul float %101, %101
  %131 = fpext float %130 to double
  %132 = fmul double %131, 1.010000e+00
  %133 = fptrunc double %132 to float
  %134 = fmul float %105, %105
  %135 = fpext float %134 to double
  %136 = fmul double %135, 1.010000e+00
  %137 = fptrunc double %136 to float
  %138 = fmul float %109, %109
  %139 = fpext float %138 to double
  %140 = fmul double %139, 1.010000e+00
  %141 = fptrunc double %140 to float
  %142 = fmul float %113, %113
  %143 = fpext float %142 to double
  %144 = fmul double %143, 1.010000e+00
  %145 = fptrunc double %144 to float
  %146 = fmul float %117, %117
  %147 = fpext float %146 to double
  %148 = fmul double %147, 1.010000e+00
  %149 = fptrunc double %148 to float
  %150 = fmul float %121, %121
  %151 = fpext float %150 to double
  %152 = fmul double %151, 1.010000e+00
  %153 = fptrunc double %152 to float
  %154 = fmul float %125, %125
  %155 = fpext float %154 to double
  %156 = fmul double %155, 1.010000e+00
  %157 = fptrunc double %156 to float
  %158 = fmul float %129, %129
  %159 = fpext float %158 to double
  %160 = fmul double %159, 1.010000e+00
  %161 = fptrunc double %160 to float
  %162 = fmul float %133, %133
  %163 = fpext float %162 to double
  %164 = fmul double %163, 1.010000e+00
  %165 = fptrunc double %164 to float
  %166 = fmul float %137, %137
  %167 = fpext float %166 to double
  %168 = fmul double %167, 1.010000e+00
  %169 = fptrunc double %168 to float
  %170 = fmul float %141, %141
  %171 = fpext float %170 to double
  %172 = fmul double %171, 1.010000e+00
  %173 = fptrunc double %172 to float
  %174 = fmul float %145, %145
  %175 = fpext float %174 to double
  %176 = fmul double %175, 1.010000e+00
  %177 = fptrunc double %176 to float
  %178 = fmul float %149, %149
  %179 = fpext float %178 to double
  %180 = fmul double %179, 1.010000e+00
  %181 = fptrunc double %180 to float
  %182 = fmul float %153, %153
  %183 = fpext float %182 to double
  %184 = fmul double %183, 1.010000e+00
  %185 = fptrunc double %184 to float
  %186 = fmul float %157, %157
  %187 = fpext float %186 to double
  %188 = fmul double %187, 1.010000e+00
  %189 = fptrunc double %188 to float
  %190 = fmul float %161, %161
  %191 = fpext float %190 to double
  %192 = fmul double %191, 1.010000e+00
  %193 = fptrunc double %192 to float
  %194 = fmul float %165, %165
  %195 = fpext float %194 to double
  %196 = fmul double %195, 1.010000e+00
  %197 = fptrunc double %196 to float
  %198 = fmul float %169, %169
  %199 = fpext float %198 to double
  %200 = fmul double %199, 1.010000e+00
  %201 = fptrunc double %200 to float
  %202 = fmul float %173, %173
  %203 = fpext float %202 to double
  %204 = fmul double %203, 1.010000e+00
  %205 = fptrunc double %204 to float
  %206 = fmul float %177, %177
  %207 = fpext float %206 to double
  %208 = fmul double %207, 1.010000e+00
  %209 = fptrunc double %208 to float
  %210 = fmul float %181, %181
  %211 = fpext float %210 to double
  %212 = fmul double %211, 1.010000e+00
  %213 = fptrunc double %212 to float
  %214 = fmul float %185, %185
  %215 = fpext float %214 to double
  %216 = fmul double %215, 1.010000e+00
  %217 = fptrunc double %216 to float
  %218 = fmul float %189, %189
  %219 = fpext float %218 to double
  %220 = fmul double %219, 1.010000e+00
  %221 = fptrunc double %220 to float
  %222 = fmul float %193, %193
  %223 = fpext float %222 to double
  %224 = fmul double %223, 1.010000e+00
  %225 = fptrunc double %224 to float
  %226 = fmul float %197, %197
  %227 = fpext float %226 to double
  %228 = fmul double %227, 1.010000e+00
  %229 = fptrunc double %228 to float
  %230 = fmul float %201, %201
  %231 = fpext float %230 to double
  %232 = fmul double %231, 1.010000e+00
  %233 = fptrunc double %232 to float
  %234 = fmul float %205, %205
  %235 = fpext float %234 to double
  %236 = fmul double %235, 1.010000e+00
  %237 = fptrunc double %236 to float
  %238 = add nsw i32 %j.09, 1
  %exitcond = icmp eq i32 %238, %nIters
  br i1 %exitcond, label %._crit_edge, label %bb.nph

._crit_edge:                                      ; preds = %bb.nph, %SyncBB24
  %s8.0.lcssa = phi float [ %13, %SyncBB24 ], [ %237, %bb.nph ]
  %s7.0.lcssa = phi float [ %12, %SyncBB24 ], [ %233, %bb.nph ]
  %s6.0.lcssa = phi float [ %13, %SyncBB24 ], [ %229, %bb.nph ]
  %s.0.lcssa = phi float [ %12, %SyncBB24 ], [ %209, %bb.nph ]
  %s2.0.lcssa = phi float [ %13, %SyncBB24 ], [ %213, %bb.nph ]
  %s3.0.lcssa = phi float [ %12, %SyncBB24 ], [ %217, %bb.nph ]
  %s4.0.lcssa = phi float [ %13, %SyncBB24 ], [ %221, %bb.nph ]
  %s5.0.lcssa = phi float [ %12, %SyncBB24 ], [ %225, %bb.nph ]
  %239 = fadd float %s.0.lcssa, %s2.0.lcssa
  %240 = fadd float %239, %s3.0.lcssa
  %241 = fadd float %240, %s4.0.lcssa
  %242 = fadd float %241, %s5.0.lcssa
  %243 = fadd float %242, %s6.0.lcssa
  %244 = fadd float %243, %s7.0.lcssa
  %245 = fadd float %244, %s8.0.lcssa
  store float %245, float addrspace(1)* %7, align 4
  %check.WI.iter = icmp ult i64 %CurrWI..0, %iterCount
  br i1 %check.WI.iter, label %thenBB, label %SyncBB

thenBB:                                           ; preds = %._crit_edge
  %"CurrWI++" = add nuw i64 %CurrWI..0, 1
  br label %SyncBB24

SyncBB:                                           ; preds = %._crit_edge
  ret void
}

define void @Mul8(i8* %pBuffer) {
entry:
  %0 = bitcast i8* %pBuffer to float addrspace(1)**
  %1 = load float addrspace(1)** %0, align 8
  %2 = getelementptr i8* %pBuffer, i64 8
  %3 = bitcast i8* %2 to i32*
  %4 = load i32* %3, align 4
  %5 = getelementptr i8* %pBuffer, i64 40
  %6 = bitcast i8* %5 to %struct.PaddedDimId**
  %7 = load %struct.PaddedDimId** %6, align 8
  %8 = getelementptr i8* %pBuffer, i64 48
  %9 = bitcast i8* %8 to %struct.PaddedDimId**
  %10 = load %struct.PaddedDimId** %9, align 8
  %11 = getelementptr i8* %pBuffer, i64 64
  %12 = bitcast i8* %11 to i64*
  %13 = load i64* %12, align 8
  %14 = icmp sgt i32 %4, 0
  br label %SyncBB24.i

SyncBB24.i:                                       ; preds = %thenBB.i, %entry
  %CurrWI..0.i = phi i64 [ 0, %entry ], [ %"CurrWI++.i", %thenBB.i ]
  %15 = getelementptr %struct.PaddedDimId* %10, i64 %CurrWI..0.i, i32 0, i64 0
  %16 = load i64* %15, align 8
  %17 = getelementptr %struct.PaddedDimId* %7, i64 0, i32 0, i64 0
  %18 = load i64* %17, align 8
  %19 = add i64 %16, %18
  %sext.i = shl i64 %19, 32
  %20 = ashr i64 %sext.i, 32
  %21 = getelementptr inbounds float addrspace(1)* %1, i64 %20
  %22 = load float addrspace(1)* %21, align 4
  %23 = fsub float %22, %22
  %24 = fpext float %23 to double
  %25 = fadd double %24, 9.990000e-01
  %26 = fptrunc double %25 to float
  %27 = fsub float 1.000000e+01, %26
  br i1 %14, label %bb.nph.i, label %._crit_edge.i

bb.nph.i:                                         ; preds = %bb.nph.i, %SyncBB24.i
  %j.09.i = phi i32 [ %252, %bb.nph.i ], [ 0, %SyncBB24.i ]
  %s8.08.i = phi float [ %251, %bb.nph.i ], [ %27, %SyncBB24.i ]
  %s7.07.i = phi float [ %247, %bb.nph.i ], [ %26, %SyncBB24.i ]
  %s6.06.i = phi float [ %243, %bb.nph.i ], [ %27, %SyncBB24.i ]
  %s.05.i = phi float [ %223, %bb.nph.i ], [ %26, %SyncBB24.i ]
  %s2.04.i = phi float [ %227, %bb.nph.i ], [ %27, %SyncBB24.i ]
  %s3.03.i = phi float [ %231, %bb.nph.i ], [ %26, %SyncBB24.i ]
  %s4.02.i = phi float [ %235, %bb.nph.i ], [ %27, %SyncBB24.i ]
  %s5.01.i = phi float [ %239, %bb.nph.i ], [ %26, %SyncBB24.i ]
  %28 = fmul float %s.05.i, %s.05.i
  %29 = fpext float %28 to double
  %30 = fmul double %29, 1.010000e+00
  %31 = fptrunc double %30 to float
  %32 = fmul float %s2.04.i, %s2.04.i
  %33 = fpext float %32 to double
  %34 = fmul double %33, 1.010000e+00
  %35 = fptrunc double %34 to float
  %36 = fmul float %s3.03.i, %s3.03.i
  %37 = fpext float %36 to double
  %38 = fmul double %37, 1.010000e+00
  %39 = fptrunc double %38 to float
  %40 = fmul float %s4.02.i, %s4.02.i
  %41 = fpext float %40 to double
  %42 = fmul double %41, 1.010000e+00
  %43 = fptrunc double %42 to float
  %44 = fmul float %s5.01.i, %s5.01.i
  %45 = fpext float %44 to double
  %46 = fmul double %45, 1.010000e+00
  %47 = fptrunc double %46 to float
  %48 = fmul float %s6.06.i, %s6.06.i
  %49 = fpext float %48 to double
  %50 = fmul double %49, 1.010000e+00
  %51 = fptrunc double %50 to float
  %52 = fmul float %s7.07.i, %s7.07.i
  %53 = fpext float %52 to double
  %54 = fmul double %53, 1.010000e+00
  %55 = fptrunc double %54 to float
  %56 = fmul float %s8.08.i, %s8.08.i
  %57 = fpext float %56 to double
  %58 = fmul double %57, 1.010000e+00
  %59 = fptrunc double %58 to float
  %60 = fmul float %31, %31
  %61 = fpext float %60 to double
  %62 = fmul double %61, 1.010000e+00
  %63 = fptrunc double %62 to float
  %64 = fmul float %35, %35
  %65 = fpext float %64 to double
  %66 = fmul double %65, 1.010000e+00
  %67 = fptrunc double %66 to float
  %68 = fmul float %39, %39
  %69 = fpext float %68 to double
  %70 = fmul double %69, 1.010000e+00
  %71 = fptrunc double %70 to float
  %72 = fmul float %43, %43
  %73 = fpext float %72 to double
  %74 = fmul double %73, 1.010000e+00
  %75 = fptrunc double %74 to float
  %76 = fmul float %47, %47
  %77 = fpext float %76 to double
  %78 = fmul double %77, 1.010000e+00
  %79 = fptrunc double %78 to float
  %80 = fmul float %51, %51
  %81 = fpext float %80 to double
  %82 = fmul double %81, 1.010000e+00
  %83 = fptrunc double %82 to float
  %84 = fmul float %55, %55
  %85 = fpext float %84 to double
  %86 = fmul double %85, 1.010000e+00
  %87 = fptrunc double %86 to float
  %88 = fmul float %59, %59
  %89 = fpext float %88 to double
  %90 = fmul double %89, 1.010000e+00
  %91 = fptrunc double %90 to float
  %92 = fmul float %63, %63
  %93 = fpext float %92 to double
  %94 = fmul double %93, 1.010000e+00
  %95 = fptrunc double %94 to float
  %96 = fmul float %67, %67
  %97 = fpext float %96 to double
  %98 = fmul double %97, 1.010000e+00
  %99 = fptrunc double %98 to float
  %100 = fmul float %71, %71
  %101 = fpext float %100 to double
  %102 = fmul double %101, 1.010000e+00
  %103 = fptrunc double %102 to float
  %104 = fmul float %75, %75
  %105 = fpext float %104 to double
  %106 = fmul double %105, 1.010000e+00
  %107 = fptrunc double %106 to float
  %108 = fmul float %79, %79
  %109 = fpext float %108 to double
  %110 = fmul double %109, 1.010000e+00
  %111 = fptrunc double %110 to float
  %112 = fmul float %83, %83
  %113 = fpext float %112 to double
  %114 = fmul double %113, 1.010000e+00
  %115 = fptrunc double %114 to float
  %116 = fmul float %87, %87
  %117 = fpext float %116 to double
  %118 = fmul double %117, 1.010000e+00
  %119 = fptrunc double %118 to float
  %120 = fmul float %91, %91
  %121 = fpext float %120 to double
  %122 = fmul double %121, 1.010000e+00
  %123 = fptrunc double %122 to float
  %124 = fmul float %95, %95
  %125 = fpext float %124 to double
  %126 = fmul double %125, 1.010000e+00
  %127 = fptrunc double %126 to float
  %128 = fmul float %99, %99
  %129 = fpext float %128 to double
  %130 = fmul double %129, 1.010000e+00
  %131 = fptrunc double %130 to float
  %132 = fmul float %103, %103
  %133 = fpext float %132 to double
  %134 = fmul double %133, 1.010000e+00
  %135 = fptrunc double %134 to float
  %136 = fmul float %107, %107
  %137 = fpext float %136 to double
  %138 = fmul double %137, 1.010000e+00
  %139 = fptrunc double %138 to float
  %140 = fmul float %111, %111
  %141 = fpext float %140 to double
  %142 = fmul double %141, 1.010000e+00
  %143 = fptrunc double %142 to float
  %144 = fmul float %115, %115
  %145 = fpext float %144 to double
  %146 = fmul double %145, 1.010000e+00
  %147 = fptrunc double %146 to float
  %148 = fmul float %119, %119
  %149 = fpext float %148 to double
  %150 = fmul double %149, 1.010000e+00
  %151 = fptrunc double %150 to float
  %152 = fmul float %123, %123
  %153 = fpext float %152 to double
  %154 = fmul double %153, 1.010000e+00
  %155 = fptrunc double %154 to float
  %156 = fmul float %127, %127
  %157 = fpext float %156 to double
  %158 = fmul double %157, 1.010000e+00
  %159 = fptrunc double %158 to float
  %160 = fmul float %131, %131
  %161 = fpext float %160 to double
  %162 = fmul double %161, 1.010000e+00
  %163 = fptrunc double %162 to float
  %164 = fmul float %135, %135
  %165 = fpext float %164 to double
  %166 = fmul double %165, 1.010000e+00
  %167 = fptrunc double %166 to float
  %168 = fmul float %139, %139
  %169 = fpext float %168 to double
  %170 = fmul double %169, 1.010000e+00
  %171 = fptrunc double %170 to float
  %172 = fmul float %143, %143
  %173 = fpext float %172 to double
  %174 = fmul double %173, 1.010000e+00
  %175 = fptrunc double %174 to float
  %176 = fmul float %147, %147
  %177 = fpext float %176 to double
  %178 = fmul double %177, 1.010000e+00
  %179 = fptrunc double %178 to float
  %180 = fmul float %151, %151
  %181 = fpext float %180 to double
  %182 = fmul double %181, 1.010000e+00
  %183 = fptrunc double %182 to float
  %184 = fmul float %155, %155
  %185 = fpext float %184 to double
  %186 = fmul double %185, 1.010000e+00
  %187 = fptrunc double %186 to float
  %188 = fmul float %159, %159
  %189 = fpext float %188 to double
  %190 = fmul double %189, 1.010000e+00
  %191 = fptrunc double %190 to float
  %192 = fmul float %163, %163
  %193 = fpext float %192 to double
  %194 = fmul double %193, 1.010000e+00
  %195 = fptrunc double %194 to float
  %196 = fmul float %167, %167
  %197 = fpext float %196 to double
  %198 = fmul double %197, 1.010000e+00
  %199 = fptrunc double %198 to float
  %200 = fmul float %171, %171
  %201 = fpext float %200 to double
  %202 = fmul double %201, 1.010000e+00
  %203 = fptrunc double %202 to float
  %204 = fmul float %175, %175
  %205 = fpext float %204 to double
  %206 = fmul double %205, 1.010000e+00
  %207 = fptrunc double %206 to float
  %208 = fmul float %179, %179
  %209 = fpext float %208 to double
  %210 = fmul double %209, 1.010000e+00
  %211 = fptrunc double %210 to float
  %212 = fmul float %183, %183
  %213 = fpext float %212 to double
  %214 = fmul double %213, 1.010000e+00
  %215 = fptrunc double %214 to float
  %216 = fmul float %187, %187
  %217 = fpext float %216 to double
  %218 = fmul double %217, 1.010000e+00
  %219 = fptrunc double %218 to float
  %220 = fmul float %191, %191
  %221 = fpext float %220 to double
  %222 = fmul double %221, 1.010000e+00
  %223 = fptrunc double %222 to float
  %224 = fmul float %195, %195
  %225 = fpext float %224 to double
  %226 = fmul double %225, 1.010000e+00
  %227 = fptrunc double %226 to float
  %228 = fmul float %199, %199
  %229 = fpext float %228 to double
  %230 = fmul double %229, 1.010000e+00
  %231 = fptrunc double %230 to float
  %232 = fmul float %203, %203
  %233 = fpext float %232 to double
  %234 = fmul double %233, 1.010000e+00
  %235 = fptrunc double %234 to float
  %236 = fmul float %207, %207
  %237 = fpext float %236 to double
  %238 = fmul double %237, 1.010000e+00
  %239 = fptrunc double %238 to float
  %240 = fmul float %211, %211
  %241 = fpext float %240 to double
  %242 = fmul double %241, 1.010000e+00
  %243 = fptrunc double %242 to float
  %244 = fmul float %215, %215
  %245 = fpext float %244 to double
  %246 = fmul double %245, 1.010000e+00
  %247 = fptrunc double %246 to float
  %248 = fmul float %219, %219
  %249 = fpext float %248 to double
  %250 = fmul double %249, 1.010000e+00
  %251 = fptrunc double %250 to float
  %252 = add nsw i32 %j.09.i, 1
  %exitcond.i = icmp eq i32 %252, %4
  br i1 %exitcond.i, label %._crit_edge.i, label %bb.nph.i

._crit_edge.i:                                    ; preds = %bb.nph.i, %SyncBB24.i
  %s8.0.lcssa.i = phi float [ %27, %SyncBB24.i ], [ %251, %bb.nph.i ]
  %s7.0.lcssa.i = phi float [ %26, %SyncBB24.i ], [ %247, %bb.nph.i ]
  %s6.0.lcssa.i = phi float [ %27, %SyncBB24.i ], [ %243, %bb.nph.i ]
  %s.0.lcssa.i = phi float [ %26, %SyncBB24.i ], [ %223, %bb.nph.i ]
  %s2.0.lcssa.i = phi float [ %27, %SyncBB24.i ], [ %227, %bb.nph.i ]
  %s3.0.lcssa.i = phi float [ %26, %SyncBB24.i ], [ %231, %bb.nph.i ]
  %s4.0.lcssa.i = phi float [ %27, %SyncBB24.i ], [ %235, %bb.nph.i ]
  %s5.0.lcssa.i = phi float [ %26, %SyncBB24.i ], [ %239, %bb.nph.i ]
  %253 = fadd float %s.0.lcssa.i, %s2.0.lcssa.i
  %254 = fadd float %253, %s3.0.lcssa.i
  %255 = fadd float %254, %s4.0.lcssa.i
  %256 = fadd float %255, %s5.0.lcssa.i
  %257 = fadd float %256, %s6.0.lcssa.i
  %258 = fadd float %257, %s7.0.lcssa.i
  %259 = fadd float %258, %s8.0.lcssa.i
  store float %259, float addrspace(1)* %21, align 4
  %check.WI.iter.i = icmp ult i64 %CurrWI..0.i, %13
  br i1 %check.WI.iter.i, label %thenBB.i, label %__Mul8_separated_args.exit

thenBB.i:                                         ; preds = %._crit_edge.i
  %"CurrWI++.i" = add nuw i64 %CurrWI..0.i, 1
  br label %SyncBB24.i

__Mul8_separated_args.exit:                       ; preds = %._crit_edge.i
  ret void
}

!opencl.kernels = !{!0}

!0 = metadata !{void (float addrspace(1)*, i32, i8 addrspace(3)*, %struct.WorkDim*, i64*, %struct.PaddedDimId*, %struct.PaddedDimId*, i64*, i64, i8*, i64*)* @__Mul8_separated_args, metadata !1, metadata !1, metadata !"", metadata !"float __attribute__((address_space(1))) *, int", metadata !"opencl_Mul8_locals_anchor", void (i8*)* @Mul8}
!1 = metadata !{i32 0, i32 0, i32 0}
