; Compiled from:
; ------------------------------------------------------------------------------
; __kernel void test1(__global double16* in, __global double16* out) {
;   double16 res = in[get_global_id(0)];
;   ((uchar*)&res)[0] += 1;
;   out[get_global_id(0)] = res;
; }
; ------------------------------------------------------------------------------
; Compile options: -cc1 -emit-llvm -triple spir64-unknown-unknown -disable-llvm-passes -include llvm/lib/clang/6.0.0/include/opencl-c.h -x cl -cl-std=CL2.0
; Generated by SATest using -dump-IR-before=vectorizer
; ------------------------------------------------------------------------------
; RUN: %oclopt -runtimelib %p/../Full/runtime.bc -scalarize %s -enable-debugify -disable-output 2>&1 | FileCheck -check-prefix=DEBUGIFY %s
; RUN: %oclopt -runtimelib %p/../Full/runtime.bc -scalarize -verify %s
; ------------------------------------------------------------------------------
source_filename = "1"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux"

; Function Attrs: nounwind
define void @test1(<16 x double> addrspace(1)* %in, <16 x double> addrspace(1)* %out) local_unnamed_addr #0 !kernel_arg_addr_space !6 !kernel_arg_access_qual !7 !kernel_arg_type !8 !kernel_arg_base_type !9 !kernel_arg_type_qual !10 !kernel_arg_host_accessible !11 !kernel_arg_name !12 !no_barrier_path !13 {
entry:
  %res = alloca <16 x double>, align 128
  %res.0.res.0.res.0..sroa_cast7 = bitcast <16 x double>* %res to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %res.0.res.0.res.0..sroa_cast7)
  %call = tail call i64 @_Z13get_global_idj(i32 0) #3
  %arrayidx = getelementptr inbounds <16 x double>, <16 x double> addrspace(1)* %in, i64 %call
  %0 = load <16 x double>, <16 x double> addrspace(1)* %arrayidx, align 128, !tbaa !14
  store <16 x double> %0, <16 x double>* %res, align 128
  %bc = bitcast <16 x double> %0 to <128 x i8>
  %1 = extractelement <128 x i8> %bc, i32 0
  %add = add i8 %1, 1
  store i8 %add, i8* %res.0.res.0.res.0..sroa_cast7, align 128
  %res.0.res.0.res.0. = load <16 x double>, <16 x double>* %res, align 128
  %arrayidx4 = getelementptr inbounds <16 x double>, <16 x double> addrspace(1)* %out, i64 %call
  store <16 x double> %res.0.res.0.res.0., <16 x double> addrspace(1)* %arrayidx4, align 128, !tbaa !14
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %res.0.res.0.res.0..sroa_cast7)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: nounwind readnone
declare i64 @_Z13get_global_idj(i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

define [7 x i64] @WG.boundaries.test1(<16 x double> addrspace(1)*, <16 x double> addrspace(1)*) {
entry:
  %2 = call i64 @_Z14get_local_sizej(i32 0)
  %3 = call i64 @get_base_global_id.(i32 0)
  %4 = call i64 @_Z14get_local_sizej(i32 1)
  %5 = call i64 @get_base_global_id.(i32 1)
  %6 = call i64 @_Z14get_local_sizej(i32 2)
  %7 = call i64 @get_base_global_id.(i32 2)
  %8 = insertvalue [7 x i64] undef, i64 %2, 2
  %9 = insertvalue [7 x i64] %8, i64 %3, 1
  %10 = insertvalue [7 x i64] %9, i64 %4, 4
  %11 = insertvalue [7 x i64] %10, i64 %5, 3
  %12 = insertvalue [7 x i64] %11, i64 %6, 6
  %13 = insertvalue [7 x i64] %12, i64 %7, 5
  %14 = insertvalue [7 x i64] %13, i64 1, 0
  ret [7 x i64] %14
}

declare i64 @_Z14get_local_sizej(i32)

declare i64 @get_base_global_id.(i32)

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "stackrealign" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "stackrealign" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }

!llvm.linker.options = !{}
!llvm.module.flags = !{!0}
!opencl.enable.FP_CONTRACT = !{}
!opencl.ocl.version = !{!1}
!opencl.spir.version = !{!1}
!opencl.used.extensions = !{!2}
!opencl.used.optional.core.features = !{!3}
!opencl.compiler.options = !{!2}
!llvm.ident = !{!4}
!opencl.kernels = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, i32 2}
!2 = !{}
!3 = !{!"cl_doubles"}
!4 = !{!"clang version "}
!5 = !{void (<16 x double> addrspace(1)*, <16 x double> addrspace(1)*)* @test1}
!6 = !{i32 1, i32 1}
!7 = !{!"none", !"none"}
!8 = !{!"double16*", !"double16*"}
!9 = !{!"double __attribute__((ext_vector_type(16)))*", !"double __attribute__((ext_vector_type(16)))*"}
!10 = !{!"", !""}
!11 = !{i1 false, i1 false}
!12 = !{!"in", !"out"}
!13 = !{i1 true}
!14 = !{!15, !15, i64 0}
!15 = !{!"omnipotent char", !16, i64 0}
!16 = !{!"Simple C/C++ TBAA"}

; extractelement and insertelement are reconstructed, and are hard to fix.
; DEBUGIFY: WARNING: Missing line 9
; DEBUGIFY-NOT: WARNING
