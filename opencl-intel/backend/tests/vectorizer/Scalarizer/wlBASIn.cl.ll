; RUN: llvm-as %s -o %t.bc
; RUN: %oclopt  -runtimelib %p/../Full/runtime.bc -O3 -inline-threshold=4096 -inline -lowerswitch -scalarize -mergereturn -loop-simplify -phicanon -predicate -mem2reg -dce -packetize -packet-size=4 -resolve -scalarize -verify %t.bc -S -o %t1.ll
; RUN: FileCheck %s --input-file=%t1.ll
; ModuleID = '.\cl_files\wlBASIn.cl'
target datalayout = "e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-f80:128:128-v64:64:64-v128:128:128-a0:0:64-f80:32:32-n8:16:32"
target triple = "i686-pc-win32"

%opencl_metadata_type = type <{ i8*, i8*, [4 x i32], [4 x i32], i8*, i8* }>

@opencl_basScalar_locals = appending global [1 x i8*] zeroinitializer, section "llvm.metadata" ; <[1 x i8*]*> [#uses=1]
@opencl_basScalar_parameters = appending global [374 x i8] c"float const __attribute__((address_space(1))) *, float const __attribute__((address_space(1))) *, float const __attribute__((address_space(1))) *, float __attribute__((address_space(1))) *, float __attribute__((address_space(1))) *, float const __attribute__((address_space(1))), float const __attribute__((address_space(1))), size_t const __attribute__((address_space(1)))\00", section "llvm.metadata" ; <[374 x i8]*> [#uses=1]
@opencl_basVectorized_locals = appending global [1 x i8*] zeroinitializer, section "llvm.metadata" ; <[1 x i8*]*> [#uses=1]
@opencl_basVectorized_parameters = appending global [379 x i8] c"float4 const __attribute__((address_space(1))) *, float4 const __attribute__((address_space(1))) *, float4 const __attribute__((address_space(1))) *, float4 __attribute__((address_space(1))) *, float4 __attribute__((address_space(1))) *, float const __attribute__((address_space(1))), float const __attribute__((address_space(1))), size_t const __attribute__((address_space(1)))\00", section "llvm.metadata" ; <[379 x i8]*> [#uses=1]
@opencl_metadata = appending global [2 x %opencl_metadata_type] [%opencl_metadata_type <{ i8* bitcast (void (float addrspace(1)*, float addrspace(1)*, float addrspace(1)*, float addrspace(1)*, float addrspace(1)*, float, float, i32)* @basScalar to i8*), i8* null, [4 x i32] zeroinitializer, [4 x i32] zeroinitializer, i8* bitcast ([1 x i8*]* @opencl_basScalar_locals to i8*), i8* getelementptr inbounds ([374 x i8], [374 x i8]* @opencl_basScalar_parameters, i32 0, i32 0) }>, %opencl_metadata_type <{ i8* bitcast (void (<4 x float> addrspace(1)*, <4 x float> addrspace(1)*, <4 x float> addrspace(1)*, <4 x float> addrspace(1)*, <4 x float> addrspace(1)*, float, float, i32)* @basVectorized to i8*), i8* null, [4 x i32] zeroinitializer, [4 x i32] zeroinitializer, i8* bitcast ([1 x i8*]* @opencl_basVectorized_locals to i8*), i8* getelementptr inbounds ([379 x i8], [379 x i8]* @opencl_basVectorized_parameters, i32 0, i32 0) }>], section "llvm.metadata" ; <[2 x %opencl_metadata_type]*> [#uses=0]

; CHECK: ret
define void @basScalar(float addrspace(1)* %S, float addrspace(1)* %K, float addrspace(1)* %T, float addrspace(1)* %callOutput, float addrspace(1)* %putOutput, float %r, float %v, i32 %cuiNumOfElements) nounwind {
entry:
  %S.addr = alloca float addrspace(1)*, align 4   ; <float addrspace(1)**> [#uses=4]
  %K.addr = alloca float addrspace(1)*, align 4   ; <float addrspace(1)**> [#uses=4]
  %T.addr = alloca float addrspace(1)*, align 4   ; <float addrspace(1)**> [#uses=6]
  %callOutput.addr = alloca float addrspace(1)*, align 4 ; <float addrspace(1)**> [#uses=2]
  %putOutput.addr = alloca float addrspace(1)*, align 4 ; <float addrspace(1)**> [#uses=2]
  %r.addr = alloca float, align 4                 ; <float*> [#uses=4]
  %v.addr = alloca float, align 4                 ; <float*> [#uses=5]
  %cuiNumOfElements.addr = alloca i32, align 4    ; <i32*> [#uses=2]
  %optionsPerItem = alloca i32, align 4           ; <i32*> [#uses=3]
  %itemStartingIndex = alloca i32, align 4        ; <i32*> [#uses=3]
  %totalItemOptions = alloca i32, align 4         ; <i32*> [#uses=2]
  %L = alloca float, align 4                      ; <float*> [#uses=16]
  %Kcnd = alloca float, align 4                   ; <float*> [#uses=64]
  %w = alloca float, align 4                      ; <float*> [#uses=16]
  %a1 = alloca float, align 4                     ; <float*> [#uses=5]
  %a2 = alloca float, align 4                     ; <float*> [#uses=5]
  %a3 = alloca float, align 4                     ; <float*> [#uses=5]
  %a4 = alloca float, align 4                     ; <float*> [#uses=5]
  %a5 = alloca float, align 4                     ; <float*> [#uses=5]
  %d1 = alloca float, align 4                     ; <float*> [#uses=7]
  %d2 = alloca float, align 4                     ; <float*> [#uses=6]
  %cnd1 = alloca float, align 4                   ; <float*> [#uses=5]
  %cnd2 = alloca float, align 4                   ; <float*> [#uses=5]
  %i = alloca i32, align 4                        ; <i32*> [#uses=17]
  store float addrspace(1)* %S, float addrspace(1)** %S.addr
  store float addrspace(1)* %K, float addrspace(1)** %K.addr
  store float addrspace(1)* %T, float addrspace(1)** %T.addr
  store float addrspace(1)* %callOutput, float addrspace(1)** %callOutput.addr
  store float addrspace(1)* %putOutput, float addrspace(1)** %putOutput.addr
  store float %r, float* %r.addr
  store float %v, float* %v.addr
  store i32 %cuiNumOfElements, i32* %cuiNumOfElements.addr
  %tmp = load i32, i32* %cuiNumOfElements.addr         ; <i32> [#uses=1]
  %call = call i32 @get_global_size(i32 0)        ; <i32> [#uses=2]
  %cmp = icmp eq i32 0, %call                     ; <i1> [#uses=1]
  %sel = select i1 %cmp, i32 1, i32 %call         ; <i32> [#uses=1]
  %div = udiv i32 %tmp, %sel                      ; <i32> [#uses=1]
  store i32 %div, i32* %optionsPerItem
  %tmp2 = load i32, i32* %optionsPerItem               ; <i32> [#uses=1]
  %call3 = call i32 @_Z13get_global_idj(i32 0)         ; <i32> [#uses=1]
  %mul = mul i32 %tmp2, %call3                    ; <i32> [#uses=1]
  store i32 %mul, i32* %itemStartingIndex
  %tmp5 = load i32, i32* %itemStartingIndex            ; <i32> [#uses=1]
  %tmp6 = load i32, i32* %optionsPerItem               ; <i32> [#uses=1]
  %add = add i32 %tmp5, %tmp6                     ; <i32> [#uses=1]
  store i32 %add, i32* %totalItemOptions
  store float 0x3FD470BF40000000, float* %a1
  store float 0xBFD6D1F0E0000000, float* %a2
  store float 0x3FFC80EF00000000, float* %a3
  store float 0xBFFD23DD40000000, float* %a4
  store float 0x3FF548CDE0000000, float* %a5
  store float 0.000000e+000, float* %d1
  store float 0.000000e+000, float* %d2
  store float 0.000000e+000, float* %cnd1
  store float 0.000000e+000, float* %cnd2
  %tmp20 = load i32, i32* %itemStartingIndex           ; <i32> [#uses=1]
  store i32 %tmp20, i32* %i
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %tmp21 = load i32, i32* %i                           ; <i32> [#uses=1]
  %tmp22 = load i32, i32* %totalItemOptions            ; <i32> [#uses=1]
  %cmp23 = icmp ult i32 %tmp21, %tmp22            ; <i1> [#uses=1]
  br i1 %cmp23, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %tmp24 = load i32, i32* %i                           ; <i32> [#uses=1]
  %tmp25 = load float addrspace(1)*, float addrspace(1)** %S.addr      ; <float addrspace(1)*> [#uses=1]
  %arrayidx = getelementptr inbounds float, float addrspace(1)* %tmp25, i32 %tmp24 ; <float addrspace(1)*> [#uses=1]
  %tmp26 = load float, float addrspace(1)* %arrayidx     ; <float> [#uses=1]
  %tmp27 = load i32, i32* %i                           ; <i32> [#uses=1]
  %tmp28 = load float addrspace(1)*, float addrspace(1)** %K.addr      ; <float addrspace(1)*> [#uses=1]
  %arrayidx29 = getelementptr inbounds float, float addrspace(1)* %tmp28, i32 %tmp27 ; <float addrspace(1)*> [#uses=1]
  %tmp30 = load float, float addrspace(1)* %arrayidx29   ; <float> [#uses=3]
  %cmp31 = fcmp oeq float 0.000000e+000, %tmp30   ; <i1> [#uses=1]
  %sel32 = select i1 %cmp31, float 1.000000e+000, float %tmp30 ; <float> [#uses=0]
  %div33 = fdiv float %tmp26, %tmp30              ; <float> [#uses=1]
  %call34 = call float @_Z3logf(float %div33)     ; <float> [#uses=1]
  %tmp35 = load float, float* %r.addr                    ; <float> [#uses=1]
  %tmp36 = load float, float* %v.addr                    ; <float> [#uses=1]
  %tmp37 = load float, float* %v.addr                    ; <float> [#uses=1]
  %mul38 = fmul float %tmp36, %tmp37              ; <float> [#uses=1]
  %div39 = fdiv float %mul38, 2.000000e+000       ; <float> [#uses=1]
  %add40 = fadd float %tmp35, %div39              ; <float> [#uses=1]
  %tmp41 = load i32, i32* %i                           ; <i32> [#uses=1]
  %tmp42 = load float addrspace(1)*, float addrspace(1)** %T.addr      ; <float addrspace(1)*> [#uses=1]
  %arrayidx43 = getelementptr inbounds float, float addrspace(1)* %tmp42, i32 %tmp41 ; <float addrspace(1)*> [#uses=1]
  %tmp44 = load float, float addrspace(1)* %arrayidx43   ; <float> [#uses=1]
  %mul45 = fmul float %add40, %tmp44              ; <float> [#uses=1]
  %add46 = fadd float %call34, %mul45             ; <float> [#uses=1]
  %tmp47 = load float, float* %v.addr                    ; <float> [#uses=1]
  %tmp48 = load i32, i32* %i                           ; <i32> [#uses=1]
  %tmp49 = load float addrspace(1)*, float addrspace(1)** %T.addr      ; <float addrspace(1)*> [#uses=1]
  %arrayidx50 = getelementptr inbounds float, float addrspace(1)* %tmp49, i32 %tmp48 ; <float addrspace(1)*> [#uses=1]
  %tmp51 = load float, float addrspace(1)* %arrayidx50   ; <float> [#uses=1]
  %call52 = call float @_Z4sqrtf(float %tmp51)    ; <float> [#uses=1]
  %mul53 = fmul float %tmp47, %call52             ; <float> [#uses=3]
  %cmp54 = fcmp oeq float 0.000000e+000, %mul53   ; <i1> [#uses=1]
  %sel55 = select i1 %cmp54, float 1.000000e+000, float %mul53 ; <float> [#uses=0]
  %div56 = fdiv float %add46, %mul53              ; <float> [#uses=1]
  store float %div56, float* %d1
  %tmp57 = load float, float* %d1                        ; <float> [#uses=1]
  %tmp58 = load float, float* %v.addr                    ; <float> [#uses=1]
  %tmp59 = load i32, i32* %i                           ; <i32> [#uses=1]
  %tmp60 = load float addrspace(1)*, float addrspace(1)** %T.addr      ; <float addrspace(1)*> [#uses=1]
  %arrayidx61 = getelementptr inbounds float, float addrspace(1)* %tmp60, i32 %tmp59 ; <float addrspace(1)*> [#uses=1]
  %tmp62 = load float, float addrspace(1)* %arrayidx61   ; <float> [#uses=1]
  %call63 = call float @_Z4sqrtf(float %tmp62)    ; <float> [#uses=1]
  %mul64 = fmul float %tmp58, %call63             ; <float> [#uses=1]
  %sub = fsub float %tmp57, %mul64                ; <float> [#uses=1]
  store float %sub, float* %d2
  %tmp65 = load float, float* %d1                        ; <float> [#uses=1]
  %call66 = call float @_Z4fabsf(float %tmp65)    ; <float> [#uses=1]
  store float %call66, float* %L
  %tmp67 = load float, float* %L                         ; <float> [#uses=1]
  %conv = fpext float %tmp67 to double            ; <double> [#uses=1]
  %mul68 = fmul double 2.316419e-001, %conv       ; <double> [#uses=1]
  %add69 = fadd double 1.000000e+000, %mul68      ; <double> [#uses=3]
  %cmp70 = fcmp oeq double 0.000000e+000, %add69  ; <i1> [#uses=1]
  %sel71 = select i1 %cmp70, double 1.000000e+000, double %add69 ; <double> [#uses=0]
  %div72 = fdiv double 1.000000e+000, %add69      ; <double> [#uses=1]
  %conv73 = fptrunc double %div72 to float        ; <float> [#uses=1]
  store float %conv73, float* %Kcnd
  %call74 = call float @_Z4sqrtf(float 0x401921FB60000000) ; <float> [#uses=1]
  %conv75 = fpext float %call74 to double         ; <double> [#uses=3]
  %cmp76 = fcmp oeq double 0.000000e+000, %conv75 ; <i1> [#uses=1]
  %sel77 = select i1 %cmp76, double 1.000000e+000, double %conv75 ; <double> [#uses=0]
  %div78 = fdiv double 1.000000e+000, %conv75     ; <double> [#uses=1]
  %tmp79 = load float, float* %L                         ; <float> [#uses=1]
  %neg = fsub float -0.000000e+000, %tmp79        ; <float> [#uses=1]
  %tmp80 = load float, float* %L                         ; <float> [#uses=1]
  %mul81 = fmul float %neg, %tmp80                ; <float> [#uses=1]
  %div82 = fdiv float %mul81, 2.000000e+000       ; <float> [#uses=1]
  %call83 = call float @_Z3expf(float %div82)     ; <float> [#uses=1]
  %conv84 = fpext float %call83 to double         ; <double> [#uses=1]
  %mul85 = fmul double %div78, %conv84            ; <double> [#uses=1]
  %tmp86 = load float, float* %a1                        ; <float> [#uses=1]
  %tmp87 = load float, float* %Kcnd                      ; <float> [#uses=1]
  %mul88 = fmul float %tmp86, %tmp87              ; <float> [#uses=1]
  %tmp89 = load float, float* %a2                        ; <float> [#uses=1]
  %tmp90 = load float, float* %Kcnd                      ; <float> [#uses=1]
  %mul91 = fmul float %tmp89, %tmp90              ; <float> [#uses=1]
  %tmp92 = load float, float* %Kcnd                      ; <float> [#uses=1]
  %mul93 = fmul float %mul91, %tmp92              ; <float> [#uses=1]
  %add94 = fadd float %mul88, %mul93              ; <float> [#uses=1]
  %tmp95 = load float, float* %a3                        ; <float> [#uses=1]
  %tmp96 = load float, float* %Kcnd                      ; <float> [#uses=1]
  %mul97 = fmul float %tmp95, %tmp96              ; <float> [#uses=1]
  %tmp98 = load float, float* %Kcnd                      ; <float> [#uses=1]
  %mul99 = fmul float %mul97, %tmp98              ; <float> [#uses=1]
  %tmp100 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul101 = fmul float %mul99, %tmp100            ; <float> [#uses=1]
  %add102 = fadd float %add94, %mul101            ; <float> [#uses=1]
  %tmp103 = load float, float* %a4                       ; <float> [#uses=1]
  %tmp104 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul105 = fmul float %tmp103, %tmp104           ; <float> [#uses=1]
  %tmp106 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul107 = fmul float %mul105, %tmp106           ; <float> [#uses=1]
  %tmp108 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul109 = fmul float %mul107, %tmp108           ; <float> [#uses=1]
  %tmp110 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul111 = fmul float %mul109, %tmp110           ; <float> [#uses=1]
  %add112 = fadd float %add102, %mul111           ; <float> [#uses=1]
  %tmp113 = load float, float* %a5                       ; <float> [#uses=1]
  %tmp114 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul115 = fmul float %tmp113, %tmp114           ; <float> [#uses=1]
  %tmp116 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul117 = fmul float %mul115, %tmp116           ; <float> [#uses=1]
  %tmp118 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul119 = fmul float %mul117, %tmp118           ; <float> [#uses=1]
  %tmp120 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul121 = fmul float %mul119, %tmp120           ; <float> [#uses=1]
  %tmp122 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul123 = fmul float %mul121, %tmp122           ; <float> [#uses=1]
  %add124 = fadd float %add112, %mul123           ; <float> [#uses=1]
  %conv125 = fpext float %add124 to double        ; <double> [#uses=1]
  %mul126 = fmul double %mul85, %conv125          ; <double> [#uses=1]
  %sub127 = fsub double 1.000000e+000, %mul126    ; <double> [#uses=1]
  %conv128 = fptrunc double %sub127 to float      ; <float> [#uses=1]
  store float %conv128, float* %w
  %tmp129 = load float, float* %d1                       ; <float> [#uses=1]
  %cmp130 = fcmp olt float %tmp129, 0.000000e+000 ; <i1> [#uses=1]
  br i1 %cmp130, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %tmp132 = load float, float* %w                        ; <float> [#uses=1]
  %conv133 = fpext float %tmp132 to double        ; <double> [#uses=1]
  %sub134 = fsub double 1.000000e+000, %conv133   ; <double> [#uses=1]
  %conv135 = fptrunc double %sub134 to float      ; <float> [#uses=1]
  store float %conv135, float* %w
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %tmp136 = load float, float* %w                        ; <float> [#uses=1]
  store float %tmp136, float* %cnd1
  %tmp137 = load float, float* %d2                       ; <float> [#uses=1]
  %call138 = call float @_Z4fabsf(float %tmp137)  ; <float> [#uses=1]
  store float %call138, float* %L
  %tmp139 = load float, float* %L                        ; <float> [#uses=1]
  %conv140 = fpext float %tmp139 to double        ; <double> [#uses=1]
  %mul141 = fmul double 2.316419e-001, %conv140   ; <double> [#uses=1]
  %add142 = fadd double 1.000000e+000, %mul141    ; <double> [#uses=3]
  %cmp143 = fcmp oeq double 0.000000e+000, %add142 ; <i1> [#uses=1]
  %sel144 = select i1 %cmp143, double 1.000000e+000, double %add142 ; <double> [#uses=0]
  %div145 = fdiv double 1.000000e+000, %add142    ; <double> [#uses=1]
  %conv146 = fptrunc double %div145 to float      ; <float> [#uses=1]
  store float %conv146, float* %Kcnd
  %call147 = call float @_Z4sqrtf(float 0x401921FB60000000) ; <float> [#uses=1]
  %conv148 = fpext float %call147 to double       ; <double> [#uses=3]
  %cmp149 = fcmp oeq double 0.000000e+000, %conv148 ; <i1> [#uses=1]
  %sel150 = select i1 %cmp149, double 1.000000e+000, double %conv148 ; <double> [#uses=0]
  %div151 = fdiv double 1.000000e+000, %conv148   ; <double> [#uses=1]
  %tmp152 = load float, float* %L                        ; <float> [#uses=1]
  %neg153 = fsub float -0.000000e+000, %tmp152    ; <float> [#uses=1]
  %tmp154 = load float, float* %L                        ; <float> [#uses=1]
  %mul155 = fmul float %neg153, %tmp154           ; <float> [#uses=1]
  %div156 = fdiv float %mul155, 2.000000e+000     ; <float> [#uses=1]
  %call157 = call float @_Z3expf(float %div156)   ; <float> [#uses=1]
  %conv158 = fpext float %call157 to double       ; <double> [#uses=1]
  %mul159 = fmul double %div151, %conv158         ; <double> [#uses=1]
  %tmp160 = load float, float* %a1                       ; <float> [#uses=1]
  %tmp161 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul162 = fmul float %tmp160, %tmp161           ; <float> [#uses=1]
  %tmp163 = load float, float* %a2                       ; <float> [#uses=1]
  %tmp164 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul165 = fmul float %tmp163, %tmp164           ; <float> [#uses=1]
  %tmp166 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul167 = fmul float %mul165, %tmp166           ; <float> [#uses=1]
  %add168 = fadd float %mul162, %mul167           ; <float> [#uses=1]
  %tmp169 = load float, float* %a3                       ; <float> [#uses=1]
  %tmp170 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul171 = fmul float %tmp169, %tmp170           ; <float> [#uses=1]
  %tmp172 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul173 = fmul float %mul171, %tmp172           ; <float> [#uses=1]
  %tmp174 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul175 = fmul float %mul173, %tmp174           ; <float> [#uses=1]
  %add176 = fadd float %add168, %mul175           ; <float> [#uses=1]
  %tmp177 = load float, float* %a4                       ; <float> [#uses=1]
  %tmp178 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul179 = fmul float %tmp177, %tmp178           ; <float> [#uses=1]
  %tmp180 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul181 = fmul float %mul179, %tmp180           ; <float> [#uses=1]
  %tmp182 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul183 = fmul float %mul181, %tmp182           ; <float> [#uses=1]
  %tmp184 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul185 = fmul float %mul183, %tmp184           ; <float> [#uses=1]
  %add186 = fadd float %add176, %mul185           ; <float> [#uses=1]
  %tmp187 = load float, float* %a5                       ; <float> [#uses=1]
  %tmp188 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul189 = fmul float %tmp187, %tmp188           ; <float> [#uses=1]
  %tmp190 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul191 = fmul float %mul189, %tmp190           ; <float> [#uses=1]
  %tmp192 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul193 = fmul float %mul191, %tmp192           ; <float> [#uses=1]
  %tmp194 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul195 = fmul float %mul193, %tmp194           ; <float> [#uses=1]
  %tmp196 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul197 = fmul float %mul195, %tmp196           ; <float> [#uses=1]
  %add198 = fadd float %add186, %mul197           ; <float> [#uses=1]
  %conv199 = fpext float %add198 to double        ; <double> [#uses=1]
  %mul200 = fmul double %mul159, %conv199         ; <double> [#uses=1]
  %sub201 = fsub double 1.000000e+000, %mul200    ; <double> [#uses=1]
  %conv202 = fptrunc double %sub201 to float      ; <float> [#uses=1]
  store float %conv202, float* %w
  %tmp203 = load float, float* %d2                       ; <float> [#uses=1]
  %cmp204 = fcmp olt float %tmp203, 0.000000e+000 ; <i1> [#uses=1]
  br i1 %cmp204, label %if.then206, label %if.end211

if.then206:                                       ; preds = %if.end
  %tmp207 = load float, float* %w                        ; <float> [#uses=1]
  %conv208 = fpext float %tmp207 to double        ; <double> [#uses=1]
  %sub209 = fsub double 1.000000e+000, %conv208   ; <double> [#uses=1]
  %conv210 = fptrunc double %sub209 to float      ; <float> [#uses=1]
  store float %conv210, float* %w
  br label %if.end211

if.end211:                                        ; preds = %if.then206, %if.end
  %tmp212 = load float, float* %w                        ; <float> [#uses=1]
  store float %tmp212, float* %cnd2
  %tmp213 = load i32, i32* %i                          ; <i32> [#uses=1]
  %tmp214 = load float addrspace(1)*, float addrspace(1)** %S.addr     ; <float addrspace(1)*> [#uses=1]
  %arrayidx215 = getelementptr inbounds float, float addrspace(1)* %tmp214, i32 %tmp213 ; <float addrspace(1)*> [#uses=1]
  %tmp216 = load float, float addrspace(1)* %arrayidx215 ; <float> [#uses=1]
  %tmp217 = load float, float* %cnd1                     ; <float> [#uses=1]
  %mul218 = fmul float %tmp216, %tmp217           ; <float> [#uses=1]
  %tmp219 = load i32, i32* %i                          ; <i32> [#uses=1]
  %tmp220 = load float addrspace(1)*, float addrspace(1)** %K.addr     ; <float addrspace(1)*> [#uses=1]
  %arrayidx221 = getelementptr inbounds float, float addrspace(1)* %tmp220, i32 %tmp219 ; <float addrspace(1)*> [#uses=1]
  %tmp222 = load float, float addrspace(1)* %arrayidx221 ; <float> [#uses=1]
  %tmp223 = load float, float* %r.addr                   ; <float> [#uses=1]
  %neg224 = fsub float -0.000000e+000, %tmp223    ; <float> [#uses=1]
  %tmp225 = load i32, i32* %i                          ; <i32> [#uses=1]
  %tmp226 = load float addrspace(1)*, float addrspace(1)** %T.addr     ; <float addrspace(1)*> [#uses=1]
  %arrayidx227 = getelementptr inbounds float, float addrspace(1)* %tmp226, i32 %tmp225 ; <float addrspace(1)*> [#uses=1]
  %tmp228 = load float, float addrspace(1)* %arrayidx227 ; <float> [#uses=1]
  %mul229 = fmul float %neg224, %tmp228           ; <float> [#uses=1]
  %call230 = call float @_Z3expf(float %mul229)   ; <float> [#uses=1]
  %mul231 = fmul float %tmp222, %call230          ; <float> [#uses=1]
  %tmp232 = load float, float* %cnd2                     ; <float> [#uses=1]
  %mul233 = fmul float %mul231, %tmp232           ; <float> [#uses=1]
  %sub234 = fsub float %mul218, %mul233           ; <float> [#uses=1]
  %tmp235 = load i32, i32* %i                          ; <i32> [#uses=1]
  %tmp236 = load float addrspace(1)*, float addrspace(1)** %callOutput.addr ; <float addrspace(1)*> [#uses=1]
  %arrayidx237 = getelementptr inbounds float, float addrspace(1)* %tmp236, i32 %tmp235 ; <float addrspace(1)*> [#uses=1]
  store float %sub234, float addrspace(1)* %arrayidx237
  %tmp238 = load float, float* %d1                       ; <float> [#uses=1]
  %neg239 = fsub float -0.000000e+000, %tmp238    ; <float> [#uses=1]
  %call240 = call float @_Z4fabsf(float %neg239)  ; <float> [#uses=1]
  store float %call240, float* %L
  %tmp241 = load float, float* %L                        ; <float> [#uses=1]
  %conv242 = fpext float %tmp241 to double        ; <double> [#uses=1]
  %mul243 = fmul double 2.316419e-001, %conv242   ; <double> [#uses=1]
  %add244 = fadd double 1.000000e+000, %mul243    ; <double> [#uses=3]
  %cmp245 = fcmp oeq double 0.000000e+000, %add244 ; <i1> [#uses=1]
  %sel246 = select i1 %cmp245, double 1.000000e+000, double %add244 ; <double> [#uses=0]
  %div247 = fdiv double 1.000000e+000, %add244    ; <double> [#uses=1]
  %conv248 = fptrunc double %div247 to float      ; <float> [#uses=1]
  store float %conv248, float* %Kcnd
  %call249 = call float @_Z4sqrtf(float 0x401921FB60000000) ; <float> [#uses=1]
  %conv250 = fpext float %call249 to double       ; <double> [#uses=3]
  %cmp251 = fcmp oeq double 0.000000e+000, %conv250 ; <i1> [#uses=1]
  %sel252 = select i1 %cmp251, double 1.000000e+000, double %conv250 ; <double> [#uses=0]
  %div253 = fdiv double 1.000000e+000, %conv250   ; <double> [#uses=1]
  %tmp254 = load float, float* %L                        ; <float> [#uses=1]
  %neg255 = fsub float -0.000000e+000, %tmp254    ; <float> [#uses=1]
  %tmp256 = load float, float* %L                        ; <float> [#uses=1]
  %mul257 = fmul float %neg255, %tmp256           ; <float> [#uses=1]
  %div258 = fdiv float %mul257, 2.000000e+000     ; <float> [#uses=1]
  %call259 = call float @_Z3expf(float %div258)   ; <float> [#uses=1]
  %conv260 = fpext float %call259 to double       ; <double> [#uses=1]
  %mul261 = fmul double %div253, %conv260         ; <double> [#uses=1]
  %tmp262 = load float, float* %a1                       ; <float> [#uses=1]
  %tmp263 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul264 = fmul float %tmp262, %tmp263           ; <float> [#uses=1]
  %tmp265 = load float, float* %a2                       ; <float> [#uses=1]
  %tmp266 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul267 = fmul float %tmp265, %tmp266           ; <float> [#uses=1]
  %tmp268 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul269 = fmul float %mul267, %tmp268           ; <float> [#uses=1]
  %add270 = fadd float %mul264, %mul269           ; <float> [#uses=1]
  %tmp271 = load float, float* %a3                       ; <float> [#uses=1]
  %tmp272 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul273 = fmul float %tmp271, %tmp272           ; <float> [#uses=1]
  %tmp274 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul275 = fmul float %mul273, %tmp274           ; <float> [#uses=1]
  %tmp276 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul277 = fmul float %mul275, %tmp276           ; <float> [#uses=1]
  %add278 = fadd float %add270, %mul277           ; <float> [#uses=1]
  %tmp279 = load float, float* %a4                       ; <float> [#uses=1]
  %tmp280 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul281 = fmul float %tmp279, %tmp280           ; <float> [#uses=1]
  %tmp282 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul283 = fmul float %mul281, %tmp282           ; <float> [#uses=1]
  %tmp284 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul285 = fmul float %mul283, %tmp284           ; <float> [#uses=1]
  %tmp286 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul287 = fmul float %mul285, %tmp286           ; <float> [#uses=1]
  %add288 = fadd float %add278, %mul287           ; <float> [#uses=1]
  %tmp289 = load float, float* %a5                       ; <float> [#uses=1]
  %tmp290 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul291 = fmul float %tmp289, %tmp290           ; <float> [#uses=1]
  %tmp292 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul293 = fmul float %mul291, %tmp292           ; <float> [#uses=1]
  %tmp294 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul295 = fmul float %mul293, %tmp294           ; <float> [#uses=1]
  %tmp296 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul297 = fmul float %mul295, %tmp296           ; <float> [#uses=1]
  %tmp298 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul299 = fmul float %mul297, %tmp298           ; <float> [#uses=1]
  %add300 = fadd float %add288, %mul299           ; <float> [#uses=1]
  %conv301 = fpext float %add300 to double        ; <double> [#uses=1]
  %mul302 = fmul double %mul261, %conv301         ; <double> [#uses=1]
  %sub303 = fsub double 1.000000e+000, %mul302    ; <double> [#uses=1]
  %conv304 = fptrunc double %sub303 to float      ; <float> [#uses=1]
  store float %conv304, float* %w
  %tmp305 = load float, float* %d1                       ; <float> [#uses=1]
  %neg306 = fsub float -0.000000e+000, %tmp305    ; <float> [#uses=1]
  %cmp307 = fcmp olt float %neg306, 0.000000e+000 ; <i1> [#uses=1]
  br i1 %cmp307, label %if.then309, label %if.end314

if.then309:                                       ; preds = %if.end211
  %tmp310 = load float, float* %w                        ; <float> [#uses=1]
  %conv311 = fpext float %tmp310 to double        ; <double> [#uses=1]
  %sub312 = fsub double 1.000000e+000, %conv311   ; <double> [#uses=1]
  %conv313 = fptrunc double %sub312 to float      ; <float> [#uses=1]
  store float %conv313, float* %w
  br label %if.end314

if.end314:                                        ; preds = %if.then309, %if.end211
  %tmp315 = load float, float* %w                        ; <float> [#uses=1]
  store float %tmp315, float* %cnd1
  %tmp316 = load float, float* %d2                       ; <float> [#uses=1]
  %neg317 = fsub float -0.000000e+000, %tmp316    ; <float> [#uses=1]
  %call318 = call float @_Z4fabsf(float %neg317)  ; <float> [#uses=1]
  store float %call318, float* %L
  %tmp319 = load float, float* %L                        ; <float> [#uses=1]
  %conv320 = fpext float %tmp319 to double        ; <double> [#uses=1]
  %mul321 = fmul double 2.316419e-001, %conv320   ; <double> [#uses=1]
  %add322 = fadd double 1.000000e+000, %mul321    ; <double> [#uses=3]
  %cmp323 = fcmp oeq double 0.000000e+000, %add322 ; <i1> [#uses=1]
  %sel324 = select i1 %cmp323, double 1.000000e+000, double %add322 ; <double> [#uses=0]
  %div325 = fdiv double 1.000000e+000, %add322    ; <double> [#uses=1]
  %conv326 = fptrunc double %div325 to float      ; <float> [#uses=1]
  store float %conv326, float* %Kcnd
  %call327 = call float @_Z4sqrtf(float 0x401921FB60000000) ; <float> [#uses=1]
  %conv328 = fpext float %call327 to double       ; <double> [#uses=3]
  %cmp329 = fcmp oeq double 0.000000e+000, %conv328 ; <i1> [#uses=1]
  %sel330 = select i1 %cmp329, double 1.000000e+000, double %conv328 ; <double> [#uses=0]
  %div331 = fdiv double 1.000000e+000, %conv328   ; <double> [#uses=1]
  %tmp332 = load float, float* %L                        ; <float> [#uses=1]
  %neg333 = fsub float -0.000000e+000, %tmp332    ; <float> [#uses=1]
  %tmp334 = load float, float* %L                        ; <float> [#uses=1]
  %mul335 = fmul float %neg333, %tmp334           ; <float> [#uses=1]
  %div336 = fdiv float %mul335, 2.000000e+000     ; <float> [#uses=1]
  %call337 = call float @_Z3expf(float %div336)   ; <float> [#uses=1]
  %conv338 = fpext float %call337 to double       ; <double> [#uses=1]
  %mul339 = fmul double %div331, %conv338         ; <double> [#uses=1]
  %tmp340 = load float, float* %a1                       ; <float> [#uses=1]
  %tmp341 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul342 = fmul float %tmp340, %tmp341           ; <float> [#uses=1]
  %tmp343 = load float, float* %a2                       ; <float> [#uses=1]
  %tmp344 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul345 = fmul float %tmp343, %tmp344           ; <float> [#uses=1]
  %tmp346 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul347 = fmul float %mul345, %tmp346           ; <float> [#uses=1]
  %add348 = fadd float %mul342, %mul347           ; <float> [#uses=1]
  %tmp349 = load float, float* %a3                       ; <float> [#uses=1]
  %tmp350 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul351 = fmul float %tmp349, %tmp350           ; <float> [#uses=1]
  %tmp352 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul353 = fmul float %mul351, %tmp352           ; <float> [#uses=1]
  %tmp354 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul355 = fmul float %mul353, %tmp354           ; <float> [#uses=1]
  %add356 = fadd float %add348, %mul355           ; <float> [#uses=1]
  %tmp357 = load float, float* %a4                       ; <float> [#uses=1]
  %tmp358 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul359 = fmul float %tmp357, %tmp358           ; <float> [#uses=1]
  %tmp360 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul361 = fmul float %mul359, %tmp360           ; <float> [#uses=1]
  %tmp362 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul363 = fmul float %mul361, %tmp362           ; <float> [#uses=1]
  %tmp364 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul365 = fmul float %mul363, %tmp364           ; <float> [#uses=1]
  %add366 = fadd float %add356, %mul365           ; <float> [#uses=1]
  %tmp367 = load float, float* %a5                       ; <float> [#uses=1]
  %tmp368 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul369 = fmul float %tmp367, %tmp368           ; <float> [#uses=1]
  %tmp370 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul371 = fmul float %mul369, %tmp370           ; <float> [#uses=1]
  %tmp372 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul373 = fmul float %mul371, %tmp372           ; <float> [#uses=1]
  %tmp374 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul375 = fmul float %mul373, %tmp374           ; <float> [#uses=1]
  %tmp376 = load float, float* %Kcnd                     ; <float> [#uses=1]
  %mul377 = fmul float %mul375, %tmp376           ; <float> [#uses=1]
  %add378 = fadd float %add366, %mul377           ; <float> [#uses=1]
  %conv379 = fpext float %add378 to double        ; <double> [#uses=1]
  %mul380 = fmul double %mul339, %conv379         ; <double> [#uses=1]
  %sub381 = fsub double 1.000000e+000, %mul380    ; <double> [#uses=1]
  %conv382 = fptrunc double %sub381 to float      ; <float> [#uses=1]
  store float %conv382, float* %w
  %tmp383 = load float, float* %d2                       ; <float> [#uses=1]
  %neg384 = fsub float -0.000000e+000, %tmp383    ; <float> [#uses=1]
  %cmp385 = fcmp olt float %neg384, 0.000000e+000 ; <i1> [#uses=1]
  br i1 %cmp385, label %if.then387, label %if.end392

if.then387:                                       ; preds = %if.end314
  %tmp388 = load float, float* %w                        ; <float> [#uses=1]
  %conv389 = fpext float %tmp388 to double        ; <double> [#uses=1]
  %sub390 = fsub double 1.000000e+000, %conv389   ; <double> [#uses=1]
  %conv391 = fptrunc double %sub390 to float      ; <float> [#uses=1]
  store float %conv391, float* %w
  br label %if.end392

if.end392:                                        ; preds = %if.then387, %if.end314
  %tmp393 = load float, float* %w                        ; <float> [#uses=1]
  store float %tmp393, float* %cnd2
  %tmp394 = load i32, i32* %i                          ; <i32> [#uses=1]
  %tmp395 = load float addrspace(1)*, float addrspace(1)** %K.addr     ; <float addrspace(1)*> [#uses=1]
  %arrayidx396 = getelementptr inbounds float, float addrspace(1)* %tmp395, i32 %tmp394 ; <float addrspace(1)*> [#uses=1]
  %tmp397 = load float, float addrspace(1)* %arrayidx396 ; <float> [#uses=1]
  %tmp398 = load float, float* %r.addr                   ; <float> [#uses=1]
  %neg399 = fsub float -0.000000e+000, %tmp398    ; <float> [#uses=1]
  %tmp400 = load i32, i32* %i                          ; <i32> [#uses=1]
  %tmp401 = load float addrspace(1)*, float addrspace(1)** %T.addr     ; <float addrspace(1)*> [#uses=1]
  %arrayidx402 = getelementptr inbounds float, float addrspace(1)* %tmp401, i32 %tmp400 ; <float addrspace(1)*> [#uses=1]
  %tmp403 = load float, float addrspace(1)* %arrayidx402 ; <float> [#uses=1]
  %mul404 = fmul float %neg399, %tmp403           ; <float> [#uses=1]
  %call405 = call float @_Z3expf(float %mul404)   ; <float> [#uses=1]
  %mul406 = fmul float %tmp397, %call405          ; <float> [#uses=1]
  %tmp407 = load float, float* %cnd2                     ; <float> [#uses=1]
  %mul408 = fmul float %mul406, %tmp407           ; <float> [#uses=1]
  %tmp409 = load i32, i32* %i                          ; <i32> [#uses=1]
  %tmp410 = load float addrspace(1)*, float addrspace(1)** %S.addr     ; <float addrspace(1)*> [#uses=1]
  %arrayidx411 = getelementptr inbounds float, float addrspace(1)* %tmp410, i32 %tmp409 ; <float addrspace(1)*> [#uses=1]
  %tmp412 = load float, float addrspace(1)* %arrayidx411 ; <float> [#uses=1]
  %tmp413 = load float, float* %cnd1                     ; <float> [#uses=1]
  %mul414 = fmul float %tmp412, %tmp413           ; <float> [#uses=1]
  %sub415 = fsub float %mul408, %mul414           ; <float> [#uses=1]
  %tmp416 = load i32, i32* %i                          ; <i32> [#uses=1]
  %tmp417 = load float addrspace(1)*, float addrspace(1)** %putOutput.addr ; <float addrspace(1)*> [#uses=1]
  %arrayidx418 = getelementptr inbounds float, float addrspace(1)* %tmp417, i32 %tmp416 ; <float addrspace(1)*> [#uses=1]
  store float %sub415, float addrspace(1)* %arrayidx418
  br label %for.inc

for.inc:                                          ; preds = %if.end392
  %tmp419 = load i32, i32* %i                          ; <i32> [#uses=1]
  %inc = add i32 %tmp419, 1                       ; <i32> [#uses=1]
  store i32 %inc, i32* %i
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @get_global_size(i32)

declare i32 @_Z13get_global_idj(i32)

declare float @_Z3logf(float)

declare float @_Z4sqrtf(float)

declare float @_Z4fabsf(float)

declare float @_Z3expf(float)

; CHECK: ret
define void @basVectorized(<4 x float> addrspace(1)* %S, <4 x float> addrspace(1)* %K, <4 x float> addrspace(1)* %T, <4 x float> addrspace(1)* %callOutput, <4 x float> addrspace(1)* %putOutput, float %r, float %v, i32 %cuiNumOfElements) nounwind {
entry:
  %S.addr = alloca <4 x float> addrspace(1)*, align 4 ; <<4 x float> addrspace(1)**> [#uses=4]
  %K.addr = alloca <4 x float> addrspace(1)*, align 4 ; <<4 x float> addrspace(1)**> [#uses=4]
  %T.addr = alloca <4 x float> addrspace(1)*, align 4 ; <<4 x float> addrspace(1)**> [#uses=6]
  %callOutput.addr = alloca <4 x float> addrspace(1)*, align 4 ; <<4 x float> addrspace(1)**> [#uses=2]
  %putOutput.addr = alloca <4 x float> addrspace(1)*, align 4 ; <<4 x float> addrspace(1)**> [#uses=2]
  %r.addr = alloca float, align 4                 ; <float*> [#uses=4]
  %v.addr = alloca float, align 4                 ; <float*> [#uses=5]
  %cuiNumOfElements.addr = alloca i32, align 4    ; <i32*> [#uses=2]
  %optionsPerItem = alloca i32, align 4           ; <i32*> [#uses=3]
  %itemStartingIndex = alloca i32, align 4        ; <i32*> [#uses=3]
  %totalItemOptions = alloca i32, align 4         ; <i32*> [#uses=2]
  %d1 = alloca <4 x float>, align 16              ; <<4 x float>*> [#uses=7]
  %d2 = alloca <4 x float>, align 16              ; <<4 x float>*> [#uses=6]
  %L = alloca <4 x float>, align 16               ; <<4 x float>*> [#uses=16]
  %Kcnd = alloca <4 x float>, align 16            ; <<4 x float>*> [#uses=64]
  %w = alloca <4 x float>, align 16               ; <<4 x float>*> [#uses=12]
  %cnd1 = alloca <4 x float>, align 16            ; <<4 x float>*> [#uses=4]
  %cnd2 = alloca <4 x float>, align 16            ; <<4 x float>*> [#uses=4]
  %a1 = alloca <4 x float>, align 16              ; <<4 x float>*> [#uses=5]
  %a2 = alloca <4 x float>, align 16              ; <<4 x float>*> [#uses=5]
  %a3 = alloca <4 x float>, align 16              ; <<4 x float>*> [#uses=5]
  %a4 = alloca <4 x float>, align 16              ; <<4 x float>*> [#uses=5]
  %a5 = alloca <4 x float>, align 16              ; <<4 x float>*> [#uses=5]
  %i = alloca i32, align 4                        ; <i32*> [#uses=17]
  %.compoundliteral = alloca <4 x float>, align 16 ; <<4 x float>*> [#uses=2]
  %.compoundliteral201 = alloca <4 x float>, align 16 ; <<4 x float>*> [#uses=2]
  %.compoundliteral300 = alloca <4 x float>, align 16 ; <<4 x float>*> [#uses=2]
  %.compoundliteral373 = alloca <4 x float>, align 16 ; <<4 x float>*> [#uses=2]
  store <4 x float> addrspace(1)* %S, <4 x float> addrspace(1)** %S.addr
  store <4 x float> addrspace(1)* %K, <4 x float> addrspace(1)** %K.addr
  store <4 x float> addrspace(1)* %T, <4 x float> addrspace(1)** %T.addr
  store <4 x float> addrspace(1)* %callOutput, <4 x float> addrspace(1)** %callOutput.addr
  store <4 x float> addrspace(1)* %putOutput, <4 x float> addrspace(1)** %putOutput.addr
  store float %r, float* %r.addr
  store float %v, float* %v.addr
  store i32 %cuiNumOfElements, i32* %cuiNumOfElements.addr
  %tmp = load i32, i32* %cuiNumOfElements.addr         ; <i32> [#uses=1]
  %call = call i32 @get_global_size(i32 0)        ; <i32> [#uses=2]
  %cmp = icmp eq i32 0, %call                     ; <i1> [#uses=1]
  %sel = select i1 %cmp, i32 1, i32 %call         ; <i32> [#uses=1]
  %div = udiv i32 %tmp, %sel                      ; <i32> [#uses=1]
  store i32 %div, i32* %optionsPerItem
  %tmp2 = load i32, i32* %optionsPerItem               ; <i32> [#uses=1]
  %call3 = call i32 @_Z13get_global_idj(i32 0)         ; <i32> [#uses=1]
  %mul = mul i32 %tmp2, %call3                    ; <i32> [#uses=1]
  store i32 %mul, i32* %itemStartingIndex
  %tmp5 = load i32, i32* %itemStartingIndex            ; <i32> [#uses=1]
  %tmp6 = load i32, i32* %optionsPerItem               ; <i32> [#uses=1]
  %add = add i32 %tmp5, %tmp6                     ; <i32> [#uses=1]
  store i32 %add, i32* %totalItemOptions
  store <4 x float> zeroinitializer, <4 x float>* %d1
  store <4 x float> zeroinitializer, <4 x float>* %d2
  store <4 x float> <float 0x3FD470BF40000000, float 0x3FD470BF40000000, float 0x3FD470BF40000000, float 0x3FD470BF40000000>, <4 x float>* %a1
  store <4 x float> <float 0xBFD6D1F0E0000000, float 0xBFD6D1F0E0000000, float 0xBFD6D1F0E0000000, float 0xBFD6D1F0E0000000>, <4 x float>* %a2
  store <4 x float> <float 0x3FFC80EF00000000, float 0x3FFC80EF00000000, float 0x3FFC80EF00000000, float 0x3FFC80EF00000000>, <4 x float>* %a3
  store <4 x float> <float 0xBFFD23DD40000000, float 0xBFFD23DD40000000, float 0xBFFD23DD40000000, float 0xBFFD23DD40000000>, <4 x float>* %a4
  store <4 x float> <float 0x3FF548CDE0000000, float 0x3FF548CDE0000000, float 0x3FF548CDE0000000, float 0x3FF548CDE0000000>, <4 x float>* %a5
  %tmp20 = load i32, i32* %itemStartingIndex           ; <i32> [#uses=1]
  store i32 %tmp20, i32* %i
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %tmp21 = load i32, i32* %i                           ; <i32> [#uses=1]
  %tmp22 = load i32, i32* %totalItemOptions            ; <i32> [#uses=1]
  %cmp23 = icmp ult i32 %tmp21, %tmp22            ; <i1> [#uses=1]
  br i1 %cmp23, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %tmp24 = load i32, i32* %i                           ; <i32> [#uses=1]
  %tmp25 = load <4 x float> addrspace(1)*, <4 x float> addrspace(1)** %S.addr ; <<4 x float> addrspace(1)*> [#uses=1]
  %arrayidx = getelementptr inbounds <4 x float>, <4 x float> addrspace(1)* %tmp25, i32 %tmp24 ; <<4 x float> addrspace(1)*> [#uses=1]
  %tmp26 = load <4 x float>, <4 x float> addrspace(1)* %arrayidx ; <<4 x float>> [#uses=1]
  %tmp27 = load i32, i32* %i                           ; <i32> [#uses=1]
  %tmp28 = load <4 x float> addrspace(1)*, <4 x float> addrspace(1)** %K.addr ; <<4 x float> addrspace(1)*> [#uses=1]
  %arrayidx29 = getelementptr inbounds <4 x float>, <4 x float> addrspace(1)* %tmp28, i32 %tmp27 ; <<4 x float> addrspace(1)*> [#uses=1]
  %tmp30 = load <4 x float>, <4 x float> addrspace(1)* %arrayidx29 ; <<4 x float>> [#uses=3]
  %cmp31 = fcmp oeq <4 x float> zeroinitializer, %tmp30 ; <<4 x i1>> [#uses=1]
  %sel32 = select <4 x i1> %cmp31, <4 x float> <float 1.000000e+000, float 1.000000e+000, float 1.000000e+000, float 1.000000e+000>, <4 x float> %tmp30 ; <<4 x float>> [#uses=0]
  %div33 = fdiv <4 x float> %tmp26, %tmp30        ; <<4 x float>> [#uses=1]
  %call34 = call <4 x float> @_Z3logDv4_f(<4 x float> %div33) ; <<4 x float>> [#uses=1]
  %tmp35 = load float, float* %r.addr                    ; <float> [#uses=1]
  %tmp36 = load float, float* %v.addr                    ; <float> [#uses=1]
  %tmp37 = load float, float* %v.addr                    ; <float> [#uses=1]
  %mul38 = fmul float %tmp36, %tmp37              ; <float> [#uses=1]
  %div39 = fdiv float %mul38, 2.000000e+000       ; <float> [#uses=1]
  %add40 = fadd float %tmp35, %div39              ; <float> [#uses=1]
  %tmp41 = insertelement <4 x float> undef, float %add40, i32 0 ; <<4 x float>> [#uses=2]
  %splat = shufflevector <4 x float> %tmp41, <4 x float> %tmp41, <4 x i32> zeroinitializer ; <<4 x float>> [#uses=1]
  %tmp42 = load i32, i32* %i                           ; <i32> [#uses=1]
  %tmp43 = load <4 x float> addrspace(1)*, <4 x float> addrspace(1)** %T.addr ; <<4 x float> addrspace(1)*> [#uses=1]
  %arrayidx44 = getelementptr inbounds <4 x float>, <4 x float> addrspace(1)* %tmp43, i32 %tmp42 ; <<4 x float> addrspace(1)*> [#uses=1]
  %tmp45 = load <4 x float>, <4 x float> addrspace(1)* %arrayidx44 ; <<4 x float>> [#uses=1]
  %mul46 = fmul <4 x float> %splat, %tmp45        ; <<4 x float>> [#uses=1]
  %add47 = fadd <4 x float> %call34, %mul46       ; <<4 x float>> [#uses=1]
  %tmp48 = load float, float* %v.addr                    ; <float> [#uses=1]
  %tmp49 = insertelement <4 x float> undef, float %tmp48, i32 0 ; <<4 x float>> [#uses=2]
  %splat50 = shufflevector <4 x float> %tmp49, <4 x float> %tmp49, <4 x i32> zeroinitializer ; <<4 x float>> [#uses=1]
  %tmp51 = load i32, i32* %i                           ; <i32> [#uses=1]
  %tmp52 = load <4 x float> addrspace(1)*, <4 x float> addrspace(1)** %T.addr ; <<4 x float> addrspace(1)*> [#uses=1]
  %arrayidx53 = getelementptr inbounds <4 x float>, <4 x float> addrspace(1)* %tmp52, i32 %tmp51 ; <<4 x float> addrspace(1)*> [#uses=1]
  %tmp54 = load <4 x float>, <4 x float> addrspace(1)* %arrayidx53 ; <<4 x float>> [#uses=1]
  %call55 = call <4 x float> @_Z4sqrtDv4_f(<4 x float> %tmp54) ; <<4 x float>> [#uses=1]
  %mul56 = fmul <4 x float> %splat50, %call55     ; <<4 x float>> [#uses=3]
  %cmp57 = fcmp oeq <4 x float> zeroinitializer, %mul56 ; <<4 x i1>> [#uses=1]
  %sel58 = select <4 x i1> %cmp57, <4 x float> <float 1.000000e+000, float 1.000000e+000, float 1.000000e+000, float 1.000000e+000>, <4 x float> %mul56 ; <<4 x float>> [#uses=0]
  %div59 = fdiv <4 x float> %add47, %mul56        ; <<4 x float>> [#uses=1]
  store <4 x float> %div59, <4 x float>* %d1
  %tmp60 = load <4 x float>, <4 x float>* %d1                  ; <<4 x float>> [#uses=1]
  %tmp61 = load float, float* %v.addr                    ; <float> [#uses=1]
  %tmp62 = insertelement <4 x float> undef, float %tmp61, i32 0 ; <<4 x float>> [#uses=2]
  %splat63 = shufflevector <4 x float> %tmp62, <4 x float> %tmp62, <4 x i32> zeroinitializer ; <<4 x float>> [#uses=1]
  %tmp64 = load i32, i32* %i                           ; <i32> [#uses=1]
  %tmp65 = load <4 x float> addrspace(1)*, <4 x float> addrspace(1)** %T.addr ; <<4 x float> addrspace(1)*> [#uses=1]
  %arrayidx66 = getelementptr inbounds <4 x float>, <4 x float> addrspace(1)* %tmp65, i32 %tmp64 ; <<4 x float> addrspace(1)*> [#uses=1]
  %tmp67 = load <4 x float>, <4 x float> addrspace(1)* %arrayidx66 ; <<4 x float>> [#uses=1]
  %call68 = call <4 x float> @_Z4sqrtDv4_f(<4 x float> %tmp67) ; <<4 x float>> [#uses=1]
  %mul69 = fmul <4 x float> %splat63, %call68     ; <<4 x float>> [#uses=1]
  %sub = fsub <4 x float> %tmp60, %mul69          ; <<4 x float>> [#uses=1]
  store <4 x float> %sub, <4 x float>* %d2
  %tmp70 = load <4 x float>, <4 x float>* %d1                  ; <<4 x float>> [#uses=1]
  %call71 = call <4 x float> @_Z4fabsDv4_f(<4 x float> %tmp70) ; <<4 x float>> [#uses=1]
  store <4 x float> %call71, <4 x float>* %L
  %tmp72 = load <4 x float>, <4 x float>* %L                   ; <<4 x float>> [#uses=1]
  %mul73 = fmul <4 x float> <float 0x3FCDA67120000000, float 0x3FCDA67120000000, float 0x3FCDA67120000000, float 0x3FCDA67120000000>, %tmp72 ; <<4 x float>> [#uses=1]
  %add74 = fadd <4 x float> <float 1.000000e+000, float 1.000000e+000, float 1.000000e+000, float 1.000000e+000>, %mul73 ; <<4 x float>> [#uses=3]
  %cmp75 = fcmp oeq <4 x float> zeroinitializer, %add74 ; <<4 x i1>> [#uses=1]
  %sel76 = select <4 x i1> %cmp75, <4 x float> <float 1.000000e+000, float 1.000000e+000, float 1.000000e+000, float 1.000000e+000>, <4 x float> %add74 ; <<4 x float>> [#uses=0]
  %div77 = fdiv <4 x float> <float 1.000000e+000, float 1.000000e+000, float 1.000000e+000, float 1.000000e+000>, %add74 ; <<4 x float>> [#uses=1]
  store <4 x float> %div77, <4 x float>* %Kcnd
  %call78 = call float @_Z4sqrtf(float 0x401921FB60000000) ; <float> [#uses=3]
  %cmp79 = fcmp oeq float 0.000000e+000, %call78  ; <i1> [#uses=1]
  %sel80 = select i1 %cmp79, float 1.000000e+000, float %call78 ; <float> [#uses=0]
  %div81 = fdiv float 1.000000e+000, %call78      ; <float> [#uses=1]
  %tmp82 = insertelement <4 x float> undef, float %div81, i32 0 ; <<4 x float>> [#uses=2]
  %splat83 = shufflevector <4 x float> %tmp82, <4 x float> %tmp82, <4 x i32> zeroinitializer ; <<4 x float>> [#uses=1]
  %tmp84 = load <4 x float>, <4 x float>* %L                   ; <<4 x float>> [#uses=1]
  %neg = fsub <4 x float> <float -0.000000e+000, float -0.000000e+000, float -0.000000e+000, float -0.000000e+000>, %tmp84 ; <<4 x float>> [#uses=1]
  %tmp85 = load <4 x float>, <4 x float>* %L                   ; <<4 x float>> [#uses=1]
  %mul86 = fmul <4 x float> %neg, %tmp85          ; <<4 x float>> [#uses=1]
  %div87 = fdiv <4 x float> %mul86, <float 2.000000e+000, float 2.000000e+000, float 2.000000e+000, float 2.000000e+000> ; <<4 x float>> [#uses=1]
  %call88 = call <4 x float> @_Z3expDv4_f(<4 x float> %div87) ; <<4 x float>> [#uses=1]
  %mul89 = fmul <4 x float> %splat83, %call88     ; <<4 x float>> [#uses=1]
  %tmp90 = load <4 x float>, <4 x float>* %a1                  ; <<4 x float>> [#uses=1]
  %tmp91 = load <4 x float>, <4 x float>* %Kcnd                ; <<4 x float>> [#uses=1]
  %mul92 = fmul <4 x float> %tmp90, %tmp91        ; <<4 x float>> [#uses=1]
  %tmp93 = load <4 x float>, <4 x float>* %a2                  ; <<4 x float>> [#uses=1]
  %tmp94 = load <4 x float>, <4 x float>* %Kcnd                ; <<4 x float>> [#uses=1]
  %mul95 = fmul <4 x float> %tmp93, %tmp94        ; <<4 x float>> [#uses=1]
  %tmp96 = load <4 x float>, <4 x float>* %Kcnd                ; <<4 x float>> [#uses=1]
  %mul97 = fmul <4 x float> %mul95, %tmp96        ; <<4 x float>> [#uses=1]
  %add98 = fadd <4 x float> %mul92, %mul97        ; <<4 x float>> [#uses=1]
  %tmp99 = load <4 x float>, <4 x float>* %a3                  ; <<4 x float>> [#uses=1]
  %tmp100 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul101 = fmul <4 x float> %tmp99, %tmp100      ; <<4 x float>> [#uses=1]
  %tmp102 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul103 = fmul <4 x float> %mul101, %tmp102     ; <<4 x float>> [#uses=1]
  %tmp104 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul105 = fmul <4 x float> %mul103, %tmp104     ; <<4 x float>> [#uses=1]
  %add106 = fadd <4 x float> %add98, %mul105      ; <<4 x float>> [#uses=1]
  %tmp107 = load <4 x float>, <4 x float>* %a4                 ; <<4 x float>> [#uses=1]
  %tmp108 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul109 = fmul <4 x float> %tmp107, %tmp108     ; <<4 x float>> [#uses=1]
  %tmp110 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul111 = fmul <4 x float> %mul109, %tmp110     ; <<4 x float>> [#uses=1]
  %tmp112 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul113 = fmul <4 x float> %mul111, %tmp112     ; <<4 x float>> [#uses=1]
  %tmp114 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul115 = fmul <4 x float> %mul113, %tmp114     ; <<4 x float>> [#uses=1]
  %add116 = fadd <4 x float> %add106, %mul115     ; <<4 x float>> [#uses=1]
  %tmp117 = load <4 x float>, <4 x float>* %a5                 ; <<4 x float>> [#uses=1]
  %tmp118 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul119 = fmul <4 x float> %tmp117, %tmp118     ; <<4 x float>> [#uses=1]
  %tmp120 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul121 = fmul <4 x float> %mul119, %tmp120     ; <<4 x float>> [#uses=1]
  %tmp122 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul123 = fmul <4 x float> %mul121, %tmp122     ; <<4 x float>> [#uses=1]
  %tmp124 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul125 = fmul <4 x float> %mul123, %tmp124     ; <<4 x float>> [#uses=1]
  %tmp126 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul127 = fmul <4 x float> %mul125, %tmp126     ; <<4 x float>> [#uses=1]
  %add128 = fadd <4 x float> %add116, %mul127     ; <<4 x float>> [#uses=1]
  %mul129 = fmul <4 x float> %mul89, %add128      ; <<4 x float>> [#uses=1]
  %sub130 = fsub <4 x float> <float 1.000000e+000, float 1.000000e+000, float 1.000000e+000, float 1.000000e+000>, %mul129 ; <<4 x float>> [#uses=1]
  store <4 x float> %sub130, <4 x float>* %w
  %tmp131 = load <4 x float>, <4 x float>* %w                  ; <<4 x float>> [#uses=1]
  store <4 x float> <float 1.000000e+000, float 1.000000e+000, float 1.000000e+000, float 1.000000e+000>, <4 x float>* %.compoundliteral
  %tmp132 = load <4 x float>, <4 x float>* %.compoundliteral   ; <<4 x float>> [#uses=1]
  %tmp133 = load <4 x float>, <4 x float>* %w                  ; <<4 x float>> [#uses=1]
  %sub134 = fsub <4 x float> %tmp132, %tmp133     ; <<4 x float>> [#uses=1]
  %tmp135 = load <4 x float>, <4 x float>* %d1                 ; <<4 x float>> [#uses=1]
  %cmp136 = fcmp olt <4 x float> %tmp135, zeroinitializer ; <<4 x i1>> [#uses=1]
  %sext = sext <4 x i1> %cmp136 to <4 x i32>      ; <<4 x i32>> [#uses=1]
  %call137 = call <4 x float> @_Z6selectDv4_fS_Dv4_i(<4 x float> %tmp131, <4 x float> %sub134, <4 x i32> %sext) ; <<4 x float>> [#uses=1]
  store <4 x float> %call137, <4 x float>* %cnd1
  %tmp138 = load <4 x float>, <4 x float>* %d2                 ; <<4 x float>> [#uses=1]
  %call139 = call <4 x float> @_Z4fabsDv4_f(<4 x float> %tmp138) ; <<4 x float>> [#uses=1]
  store <4 x float> %call139, <4 x float>* %L
  %tmp140 = load <4 x float>, <4 x float>* %L                  ; <<4 x float>> [#uses=1]
  %mul141 = fmul <4 x float> <float 0x3FCDA67120000000, float 0x3FCDA67120000000, float 0x3FCDA67120000000, float 0x3FCDA67120000000>, %tmp140 ; <<4 x float>> [#uses=1]
  %add142 = fadd <4 x float> <float 1.000000e+000, float 1.000000e+000, float 1.000000e+000, float 1.000000e+000>, %mul141 ; <<4 x float>> [#uses=3]
  %cmp143 = fcmp oeq <4 x float> zeroinitializer, %add142 ; <<4 x i1>> [#uses=1]
  %sel144 = select <4 x i1> %cmp143, <4 x float> <float 1.000000e+000, float 1.000000e+000, float 1.000000e+000, float 1.000000e+000>, <4 x float> %add142 ; <<4 x float>> [#uses=0]
  %div145 = fdiv <4 x float> <float 1.000000e+000, float 1.000000e+000, float 1.000000e+000, float 1.000000e+000>, %add142 ; <<4 x float>> [#uses=1]
  store <4 x float> %div145, <4 x float>* %Kcnd
  %call146 = call float @_Z4sqrtf(float 0x401921FB60000000) ; <float> [#uses=3]
  %cmp147 = fcmp oeq float 0.000000e+000, %call146 ; <i1> [#uses=1]
  %sel148 = select i1 %cmp147, float 1.000000e+000, float %call146 ; <float> [#uses=0]
  %div149 = fdiv float 1.000000e+000, %call146    ; <float> [#uses=1]
  %tmp150 = insertelement <4 x float> undef, float %div149, i32 0 ; <<4 x float>> [#uses=2]
  %splat151 = shufflevector <4 x float> %tmp150, <4 x float> %tmp150, <4 x i32> zeroinitializer ; <<4 x float>> [#uses=1]
  %tmp152 = load <4 x float>, <4 x float>* %L                  ; <<4 x float>> [#uses=1]
  %neg153 = fsub <4 x float> <float -0.000000e+000, float -0.000000e+000, float -0.000000e+000, float -0.000000e+000>, %tmp152 ; <<4 x float>> [#uses=1]
  %tmp154 = load <4 x float>, <4 x float>* %L                  ; <<4 x float>> [#uses=1]
  %mul155 = fmul <4 x float> %neg153, %tmp154     ; <<4 x float>> [#uses=1]
  %div156 = fdiv <4 x float> %mul155, <float 2.000000e+000, float 2.000000e+000, float 2.000000e+000, float 2.000000e+000> ; <<4 x float>> [#uses=1]
  %call157 = call <4 x float> @_Z3expDv4_f(<4 x float> %div156) ; <<4 x float>> [#uses=1]
  %mul158 = fmul <4 x float> %splat151, %call157  ; <<4 x float>> [#uses=1]
  %tmp159 = load <4 x float>, <4 x float>* %a1                 ; <<4 x float>> [#uses=1]
  %tmp160 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul161 = fmul <4 x float> %tmp159, %tmp160     ; <<4 x float>> [#uses=1]
  %tmp162 = load <4 x float>, <4 x float>* %a2                 ; <<4 x float>> [#uses=1]
  %tmp163 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul164 = fmul <4 x float> %tmp162, %tmp163     ; <<4 x float>> [#uses=1]
  %tmp165 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul166 = fmul <4 x float> %mul164, %tmp165     ; <<4 x float>> [#uses=1]
  %add167 = fadd <4 x float> %mul161, %mul166     ; <<4 x float>> [#uses=1]
  %tmp168 = load <4 x float>, <4 x float>* %a3                 ; <<4 x float>> [#uses=1]
  %tmp169 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul170 = fmul <4 x float> %tmp168, %tmp169     ; <<4 x float>> [#uses=1]
  %tmp171 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul172 = fmul <4 x float> %mul170, %tmp171     ; <<4 x float>> [#uses=1]
  %tmp173 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul174 = fmul <4 x float> %mul172, %tmp173     ; <<4 x float>> [#uses=1]
  %add175 = fadd <4 x float> %add167, %mul174     ; <<4 x float>> [#uses=1]
  %tmp176 = load <4 x float>, <4 x float>* %a4                 ; <<4 x float>> [#uses=1]
  %tmp177 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul178 = fmul <4 x float> %tmp176, %tmp177     ; <<4 x float>> [#uses=1]
  %tmp179 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul180 = fmul <4 x float> %mul178, %tmp179     ; <<4 x float>> [#uses=1]
  %tmp181 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul182 = fmul <4 x float> %mul180, %tmp181     ; <<4 x float>> [#uses=1]
  %tmp183 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul184 = fmul <4 x float> %mul182, %tmp183     ; <<4 x float>> [#uses=1]
  %add185 = fadd <4 x float> %add175, %mul184     ; <<4 x float>> [#uses=1]
  %tmp186 = load <4 x float>, <4 x float>* %a5                 ; <<4 x float>> [#uses=1]
  %tmp187 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul188 = fmul <4 x float> %tmp186, %tmp187     ; <<4 x float>> [#uses=1]
  %tmp189 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul190 = fmul <4 x float> %mul188, %tmp189     ; <<4 x float>> [#uses=1]
  %tmp191 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul192 = fmul <4 x float> %mul190, %tmp191     ; <<4 x float>> [#uses=1]
  %tmp193 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul194 = fmul <4 x float> %mul192, %tmp193     ; <<4 x float>> [#uses=1]
  %tmp195 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul196 = fmul <4 x float> %mul194, %tmp195     ; <<4 x float>> [#uses=1]
  %add197 = fadd <4 x float> %add185, %mul196     ; <<4 x float>> [#uses=1]
  %mul198 = fmul <4 x float> %mul158, %add197     ; <<4 x float>> [#uses=1]
  %sub199 = fsub <4 x float> <float 1.000000e+000, float 1.000000e+000, float 1.000000e+000, float 1.000000e+000>, %mul198 ; <<4 x float>> [#uses=1]
  store <4 x float> %sub199, <4 x float>* %w
  %tmp200 = load <4 x float>, <4 x float>* %w                  ; <<4 x float>> [#uses=1]
  store <4 x float> <float 1.000000e+000, float 1.000000e+000, float 1.000000e+000, float 1.000000e+000>, <4 x float>* %.compoundliteral201
  %tmp202 = load <4 x float>, <4 x float>* %.compoundliteral201 ; <<4 x float>> [#uses=1]
  %tmp203 = load <4 x float>, <4 x float>* %w                  ; <<4 x float>> [#uses=1]
  %sub204 = fsub <4 x float> %tmp202, %tmp203     ; <<4 x float>> [#uses=1]
  %tmp205 = load <4 x float>, <4 x float>* %d2                 ; <<4 x float>> [#uses=1]
  %cmp206 = fcmp olt <4 x float> %tmp205, zeroinitializer ; <<4 x i1>> [#uses=1]
  %sext207 = sext <4 x i1> %cmp206 to <4 x i32>   ; <<4 x i32>> [#uses=1]
  %call208 = call <4 x float> @_Z6selectDv4_fS_Dv4_i(<4 x float> %tmp200, <4 x float> %sub204, <4 x i32> %sext207) ; <<4 x float>> [#uses=1]
  store <4 x float> %call208, <4 x float>* %cnd2
  %tmp209 = load i32, i32* %i                          ; <i32> [#uses=1]
  %tmp210 = load <4 x float> addrspace(1)*, <4 x float> addrspace(1)** %S.addr ; <<4 x float> addrspace(1)*> [#uses=1]
  %arrayidx211 = getelementptr inbounds <4 x float>, <4 x float> addrspace(1)* %tmp210, i32 %tmp209 ; <<4 x float> addrspace(1)*> [#uses=1]
  %tmp212 = load <4 x float>, <4 x float> addrspace(1)* %arrayidx211 ; <<4 x float>> [#uses=1]
  %tmp213 = load <4 x float>, <4 x float>* %cnd1               ; <<4 x float>> [#uses=1]
  %mul214 = fmul <4 x float> %tmp212, %tmp213     ; <<4 x float>> [#uses=1]
  %tmp215 = load i32, i32* %i                          ; <i32> [#uses=1]
  %tmp216 = load <4 x float> addrspace(1)*, <4 x float> addrspace(1)** %K.addr ; <<4 x float> addrspace(1)*> [#uses=1]
  %arrayidx217 = getelementptr inbounds <4 x float>, <4 x float> addrspace(1)* %tmp216, i32 %tmp215 ; <<4 x float> addrspace(1)*> [#uses=1]
  %tmp218 = load <4 x float>, <4 x float> addrspace(1)* %arrayidx217 ; <<4 x float>> [#uses=1]
  %tmp219 = load float, float* %r.addr                   ; <float> [#uses=1]
  %neg220 = fsub float -0.000000e+000, %tmp219    ; <float> [#uses=1]
  %tmp221 = insertelement <4 x float> undef, float %neg220, i32 0 ; <<4 x float>> [#uses=2]
  %splat222 = shufflevector <4 x float> %tmp221, <4 x float> %tmp221, <4 x i32> zeroinitializer ; <<4 x float>> [#uses=1]
  %tmp223 = load i32, i32* %i                          ; <i32> [#uses=1]
  %tmp224 = load <4 x float> addrspace(1)*, <4 x float> addrspace(1)** %T.addr ; <<4 x float> addrspace(1)*> [#uses=1]
  %arrayidx225 = getelementptr inbounds <4 x float>, <4 x float> addrspace(1)* %tmp224, i32 %tmp223 ; <<4 x float> addrspace(1)*> [#uses=1]
  %tmp226 = load <4 x float>, <4 x float> addrspace(1)* %arrayidx225 ; <<4 x float>> [#uses=1]
  %mul227 = fmul <4 x float> %splat222, %tmp226   ; <<4 x float>> [#uses=1]
  %call228 = call <4 x float> @_Z3expDv4_f(<4 x float> %mul227) ; <<4 x float>> [#uses=1]
  %mul229 = fmul <4 x float> %tmp218, %call228    ; <<4 x float>> [#uses=1]
  %tmp230 = load <4 x float>, <4 x float>* %cnd2               ; <<4 x float>> [#uses=1]
  %mul231 = fmul <4 x float> %mul229, %tmp230     ; <<4 x float>> [#uses=1]
  %sub232 = fsub <4 x float> %mul214, %mul231     ; <<4 x float>> [#uses=1]
  %tmp233 = load i32, i32* %i                          ; <i32> [#uses=1]
  %tmp234 = load <4 x float> addrspace(1)*, <4 x float> addrspace(1)** %callOutput.addr ; <<4 x float> addrspace(1)*> [#uses=1]
  %arrayidx235 = getelementptr inbounds <4 x float>, <4 x float> addrspace(1)* %tmp234, i32 %tmp233 ; <<4 x float> addrspace(1)*> [#uses=1]
  store <4 x float> %sub232, <4 x float> addrspace(1)* %arrayidx235
  %tmp236 = load <4 x float>, <4 x float>* %d1                 ; <<4 x float>> [#uses=1]
  %neg237 = fsub <4 x float> <float -0.000000e+000, float -0.000000e+000, float -0.000000e+000, float -0.000000e+000>, %tmp236 ; <<4 x float>> [#uses=1]
  %call238 = call <4 x float> @_Z4fabsDv4_f(<4 x float> %neg237) ; <<4 x float>> [#uses=1]
  store <4 x float> %call238, <4 x float>* %L
  %tmp239 = load <4 x float>, <4 x float>* %L                  ; <<4 x float>> [#uses=1]
  %mul240 = fmul <4 x float> <float 0x3FCDA67120000000, float 0x3FCDA67120000000, float 0x3FCDA67120000000, float 0x3FCDA67120000000>, %tmp239 ; <<4 x float>> [#uses=1]
  %add241 = fadd <4 x float> <float 1.000000e+000, float 1.000000e+000, float 1.000000e+000, float 1.000000e+000>, %mul240 ; <<4 x float>> [#uses=3]
  %cmp242 = fcmp oeq <4 x float> zeroinitializer, %add241 ; <<4 x i1>> [#uses=1]
  %sel243 = select <4 x i1> %cmp242, <4 x float> <float 1.000000e+000, float 1.000000e+000, float 1.000000e+000, float 1.000000e+000>, <4 x float> %add241 ; <<4 x float>> [#uses=0]
  %div244 = fdiv <4 x float> <float 1.000000e+000, float 1.000000e+000, float 1.000000e+000, float 1.000000e+000>, %add241 ; <<4 x float>> [#uses=1]
  store <4 x float> %div244, <4 x float>* %Kcnd
  %call245 = call float @_Z4sqrtf(float 0x401921FB60000000) ; <float> [#uses=3]
  %cmp246 = fcmp oeq float 0.000000e+000, %call245 ; <i1> [#uses=1]
  %sel247 = select i1 %cmp246, float 1.000000e+000, float %call245 ; <float> [#uses=0]
  %div248 = fdiv float 1.000000e+000, %call245    ; <float> [#uses=1]
  %tmp249 = insertelement <4 x float> undef, float %div248, i32 0 ; <<4 x float>> [#uses=2]
  %splat250 = shufflevector <4 x float> %tmp249, <4 x float> %tmp249, <4 x i32> zeroinitializer ; <<4 x float>> [#uses=1]
  %tmp251 = load <4 x float>, <4 x float>* %L                  ; <<4 x float>> [#uses=1]
  %neg252 = fsub <4 x float> <float -0.000000e+000, float -0.000000e+000, float -0.000000e+000, float -0.000000e+000>, %tmp251 ; <<4 x float>> [#uses=1]
  %tmp253 = load <4 x float>, <4 x float>* %L                  ; <<4 x float>> [#uses=1]
  %mul254 = fmul <4 x float> %neg252, %tmp253     ; <<4 x float>> [#uses=1]
  %div255 = fdiv <4 x float> %mul254, <float 2.000000e+000, float 2.000000e+000, float 2.000000e+000, float 2.000000e+000> ; <<4 x float>> [#uses=1]
  %call256 = call <4 x float> @_Z3expDv4_f(<4 x float> %div255) ; <<4 x float>> [#uses=1]
  %mul257 = fmul <4 x float> %splat250, %call256  ; <<4 x float>> [#uses=1]
  %tmp258 = load <4 x float>, <4 x float>* %a1                 ; <<4 x float>> [#uses=1]
  %tmp259 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul260 = fmul <4 x float> %tmp258, %tmp259     ; <<4 x float>> [#uses=1]
  %tmp261 = load <4 x float>, <4 x float>* %a2                 ; <<4 x float>> [#uses=1]
  %tmp262 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul263 = fmul <4 x float> %tmp261, %tmp262     ; <<4 x float>> [#uses=1]
  %tmp264 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul265 = fmul <4 x float> %mul263, %tmp264     ; <<4 x float>> [#uses=1]
  %add266 = fadd <4 x float> %mul260, %mul265     ; <<4 x float>> [#uses=1]
  %tmp267 = load <4 x float>, <4 x float>* %a3                 ; <<4 x float>> [#uses=1]
  %tmp268 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul269 = fmul <4 x float> %tmp267, %tmp268     ; <<4 x float>> [#uses=1]
  %tmp270 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul271 = fmul <4 x float> %mul269, %tmp270     ; <<4 x float>> [#uses=1]
  %tmp272 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul273 = fmul <4 x float> %mul271, %tmp272     ; <<4 x float>> [#uses=1]
  %add274 = fadd <4 x float> %add266, %mul273     ; <<4 x float>> [#uses=1]
  %tmp275 = load <4 x float>, <4 x float>* %a4                 ; <<4 x float>> [#uses=1]
  %tmp276 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul277 = fmul <4 x float> %tmp275, %tmp276     ; <<4 x float>> [#uses=1]
  %tmp278 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul279 = fmul <4 x float> %mul277, %tmp278     ; <<4 x float>> [#uses=1]
  %tmp280 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul281 = fmul <4 x float> %mul279, %tmp280     ; <<4 x float>> [#uses=1]
  %tmp282 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul283 = fmul <4 x float> %mul281, %tmp282     ; <<4 x float>> [#uses=1]
  %add284 = fadd <4 x float> %add274, %mul283     ; <<4 x float>> [#uses=1]
  %tmp285 = load <4 x float>, <4 x float>* %a5                 ; <<4 x float>> [#uses=1]
  %tmp286 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul287 = fmul <4 x float> %tmp285, %tmp286     ; <<4 x float>> [#uses=1]
  %tmp288 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul289 = fmul <4 x float> %mul287, %tmp288     ; <<4 x float>> [#uses=1]
  %tmp290 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul291 = fmul <4 x float> %mul289, %tmp290     ; <<4 x float>> [#uses=1]
  %tmp292 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul293 = fmul <4 x float> %mul291, %tmp292     ; <<4 x float>> [#uses=1]
  %tmp294 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul295 = fmul <4 x float> %mul293, %tmp294     ; <<4 x float>> [#uses=1]
  %add296 = fadd <4 x float> %add284, %mul295     ; <<4 x float>> [#uses=1]
  %mul297 = fmul <4 x float> %mul257, %add296     ; <<4 x float>> [#uses=1]
  %sub298 = fsub <4 x float> <float 1.000000e+000, float 1.000000e+000, float 1.000000e+000, float 1.000000e+000>, %mul297 ; <<4 x float>> [#uses=1]
  store <4 x float> %sub298, <4 x float>* %w
  %tmp299 = load <4 x float>, <4 x float>* %w                  ; <<4 x float>> [#uses=1]
  store <4 x float> <float 1.000000e+000, float 1.000000e+000, float 1.000000e+000, float 1.000000e+000>, <4 x float>* %.compoundliteral300
  %tmp301 = load <4 x float>, <4 x float>* %.compoundliteral300 ; <<4 x float>> [#uses=1]
  %tmp302 = load <4 x float>, <4 x float>* %w                  ; <<4 x float>> [#uses=1]
  %sub303 = fsub <4 x float> %tmp301, %tmp302     ; <<4 x float>> [#uses=1]
  %tmp304 = load <4 x float>, <4 x float>* %d1                 ; <<4 x float>> [#uses=1]
  %neg305 = fsub <4 x float> <float -0.000000e+000, float -0.000000e+000, float -0.000000e+000, float -0.000000e+000>, %tmp304 ; <<4 x float>> [#uses=1]
  %cmp306 = fcmp olt <4 x float> %neg305, zeroinitializer ; <<4 x i1>> [#uses=1]
  %sext307 = sext <4 x i1> %cmp306 to <4 x i32>   ; <<4 x i32>> [#uses=1]
  %call308 = call <4 x float> @_Z6selectDv4_fS_Dv4_i(<4 x float> %tmp299, <4 x float> %sub303, <4 x i32> %sext307) ; <<4 x float>> [#uses=1]
  store <4 x float> %call308, <4 x float>* %cnd1
  %tmp309 = load <4 x float>, <4 x float>* %d2                 ; <<4 x float>> [#uses=1]
  %neg310 = fsub <4 x float> <float -0.000000e+000, float -0.000000e+000, float -0.000000e+000, float -0.000000e+000>, %tmp309 ; <<4 x float>> [#uses=1]
  %call311 = call <4 x float> @_Z4fabsDv4_f(<4 x float> %neg310) ; <<4 x float>> [#uses=1]
  store <4 x float> %call311, <4 x float>* %L
  %tmp312 = load <4 x float>, <4 x float>* %L                  ; <<4 x float>> [#uses=1]
  %mul313 = fmul <4 x float> <float 0x3FCDA67120000000, float 0x3FCDA67120000000, float 0x3FCDA67120000000, float 0x3FCDA67120000000>, %tmp312 ; <<4 x float>> [#uses=1]
  %add314 = fadd <4 x float> <float 1.000000e+000, float 1.000000e+000, float 1.000000e+000, float 1.000000e+000>, %mul313 ; <<4 x float>> [#uses=3]
  %cmp315 = fcmp oeq <4 x float> zeroinitializer, %add314 ; <<4 x i1>> [#uses=1]
  %sel316 = select <4 x i1> %cmp315, <4 x float> <float 1.000000e+000, float 1.000000e+000, float 1.000000e+000, float 1.000000e+000>, <4 x float> %add314 ; <<4 x float>> [#uses=0]
  %div317 = fdiv <4 x float> <float 1.000000e+000, float 1.000000e+000, float 1.000000e+000, float 1.000000e+000>, %add314 ; <<4 x float>> [#uses=1]
  store <4 x float> %div317, <4 x float>* %Kcnd
  %call318 = call float @_Z4sqrtf(float 0x401921FB60000000) ; <float> [#uses=3]
  %cmp319 = fcmp oeq float 0.000000e+000, %call318 ; <i1> [#uses=1]
  %sel320 = select i1 %cmp319, float 1.000000e+000, float %call318 ; <float> [#uses=0]
  %div321 = fdiv float 1.000000e+000, %call318    ; <float> [#uses=1]
  %tmp322 = insertelement <4 x float> undef, float %div321, i32 0 ; <<4 x float>> [#uses=2]
  %splat323 = shufflevector <4 x float> %tmp322, <4 x float> %tmp322, <4 x i32> zeroinitializer ; <<4 x float>> [#uses=1]
  %tmp324 = load <4 x float>, <4 x float>* %L                  ; <<4 x float>> [#uses=1]
  %neg325 = fsub <4 x float> <float -0.000000e+000, float -0.000000e+000, float -0.000000e+000, float -0.000000e+000>, %tmp324 ; <<4 x float>> [#uses=1]
  %tmp326 = load <4 x float>, <4 x float>* %L                  ; <<4 x float>> [#uses=1]
  %mul327 = fmul <4 x float> %neg325, %tmp326     ; <<4 x float>> [#uses=1]
  %div328 = fdiv <4 x float> %mul327, <float 2.000000e+000, float 2.000000e+000, float 2.000000e+000, float 2.000000e+000> ; <<4 x float>> [#uses=1]
  %call329 = call <4 x float> @_Z3expDv4_f(<4 x float> %div328) ; <<4 x float>> [#uses=1]
  %mul330 = fmul <4 x float> %splat323, %call329  ; <<4 x float>> [#uses=1]
  %tmp331 = load <4 x float>, <4 x float>* %a1                 ; <<4 x float>> [#uses=1]
  %tmp332 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul333 = fmul <4 x float> %tmp331, %tmp332     ; <<4 x float>> [#uses=1]
  %tmp334 = load <4 x float>, <4 x float>* %a2                 ; <<4 x float>> [#uses=1]
  %tmp335 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul336 = fmul <4 x float> %tmp334, %tmp335     ; <<4 x float>> [#uses=1]
  %tmp337 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul338 = fmul <4 x float> %mul336, %tmp337     ; <<4 x float>> [#uses=1]
  %add339 = fadd <4 x float> %mul333, %mul338     ; <<4 x float>> [#uses=1]
  %tmp340 = load <4 x float>, <4 x float>* %a3                 ; <<4 x float>> [#uses=1]
  %tmp341 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul342 = fmul <4 x float> %tmp340, %tmp341     ; <<4 x float>> [#uses=1]
  %tmp343 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul344 = fmul <4 x float> %mul342, %tmp343     ; <<4 x float>> [#uses=1]
  %tmp345 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul346 = fmul <4 x float> %mul344, %tmp345     ; <<4 x float>> [#uses=1]
  %add347 = fadd <4 x float> %add339, %mul346     ; <<4 x float>> [#uses=1]
  %tmp348 = load <4 x float>, <4 x float>* %a4                 ; <<4 x float>> [#uses=1]
  %tmp349 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul350 = fmul <4 x float> %tmp348, %tmp349     ; <<4 x float>> [#uses=1]
  %tmp351 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul352 = fmul <4 x float> %mul350, %tmp351     ; <<4 x float>> [#uses=1]
  %tmp353 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul354 = fmul <4 x float> %mul352, %tmp353     ; <<4 x float>> [#uses=1]
  %tmp355 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul356 = fmul <4 x float> %mul354, %tmp355     ; <<4 x float>> [#uses=1]
  %add357 = fadd <4 x float> %add347, %mul356     ; <<4 x float>> [#uses=1]
  %tmp358 = load <4 x float>, <4 x float>* %a5                 ; <<4 x float>> [#uses=1]
  %tmp359 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul360 = fmul <4 x float> %tmp358, %tmp359     ; <<4 x float>> [#uses=1]
  %tmp361 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul362 = fmul <4 x float> %mul360, %tmp361     ; <<4 x float>> [#uses=1]
  %tmp363 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul364 = fmul <4 x float> %mul362, %tmp363     ; <<4 x float>> [#uses=1]
  %tmp365 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul366 = fmul <4 x float> %mul364, %tmp365     ; <<4 x float>> [#uses=1]
  %tmp367 = load <4 x float>, <4 x float>* %Kcnd               ; <<4 x float>> [#uses=1]
  %mul368 = fmul <4 x float> %mul366, %tmp367     ; <<4 x float>> [#uses=1]
  %add369 = fadd <4 x float> %add357, %mul368     ; <<4 x float>> [#uses=1]
  %mul370 = fmul <4 x float> %mul330, %add369     ; <<4 x float>> [#uses=1]
  %sub371 = fsub <4 x float> <float 1.000000e+000, float 1.000000e+000, float 1.000000e+000, float 1.000000e+000>, %mul370 ; <<4 x float>> [#uses=1]
  store <4 x float> %sub371, <4 x float>* %w
  %tmp372 = load <4 x float>, <4 x float>* %w                  ; <<4 x float>> [#uses=1]
  store <4 x float> <float 1.000000e+000, float 1.000000e+000, float 1.000000e+000, float 1.000000e+000>, <4 x float>* %.compoundliteral373
  %tmp374 = load <4 x float>, <4 x float>* %.compoundliteral373 ; <<4 x float>> [#uses=1]
  %tmp375 = load <4 x float>, <4 x float>* %w                  ; <<4 x float>> [#uses=1]
  %sub376 = fsub <4 x float> %tmp374, %tmp375     ; <<4 x float>> [#uses=1]
  %tmp377 = load <4 x float>, <4 x float>* %d2                 ; <<4 x float>> [#uses=1]
  %neg378 = fsub <4 x float> <float -0.000000e+000, float -0.000000e+000, float -0.000000e+000, float -0.000000e+000>, %tmp377 ; <<4 x float>> [#uses=1]
  %cmp379 = fcmp olt <4 x float> %neg378, zeroinitializer ; <<4 x i1>> [#uses=1]
  %sext380 = sext <4 x i1> %cmp379 to <4 x i32>   ; <<4 x i32>> [#uses=1]
  %call381 = call <4 x float> @_Z6selectDv4_fS_Dv4_i(<4 x float> %tmp372, <4 x float> %sub376, <4 x i32> %sext380) ; <<4 x float>> [#uses=1]
  store <4 x float> %call381, <4 x float>* %cnd2
  %tmp382 = load i32, i32* %i                          ; <i32> [#uses=1]
  %tmp383 = load <4 x float> addrspace(1)*, <4 x float> addrspace(1)** %K.addr ; <<4 x float> addrspace(1)*> [#uses=1]
  %arrayidx384 = getelementptr inbounds <4 x float>, <4 x float> addrspace(1)* %tmp383, i32 %tmp382 ; <<4 x float> addrspace(1)*> [#uses=1]
  %tmp385 = load <4 x float>, <4 x float> addrspace(1)* %arrayidx384 ; <<4 x float>> [#uses=1]
  %tmp386 = load float, float* %r.addr                   ; <float> [#uses=1]
  %neg387 = fsub float -0.000000e+000, %tmp386    ; <float> [#uses=1]
  %tmp388 = insertelement <4 x float> undef, float %neg387, i32 0 ; <<4 x float>> [#uses=2]
  %splat389 = shufflevector <4 x float> %tmp388, <4 x float> %tmp388, <4 x i32> zeroinitializer ; <<4 x float>> [#uses=1]
  %tmp390 = load i32, i32* %i                          ; <i32> [#uses=1]
  %tmp391 = load <4 x float> addrspace(1)*, <4 x float> addrspace(1)** %T.addr ; <<4 x float> addrspace(1)*> [#uses=1]
  %arrayidx392 = getelementptr inbounds <4 x float>, <4 x float> addrspace(1)* %tmp391, i32 %tmp390 ; <<4 x float> addrspace(1)*> [#uses=1]
  %tmp393 = load <4 x float>, <4 x float> addrspace(1)* %arrayidx392 ; <<4 x float>> [#uses=1]
  %mul394 = fmul <4 x float> %splat389, %tmp393   ; <<4 x float>> [#uses=1]
  %call395 = call <4 x float> @_Z3expDv4_f(<4 x float> %mul394) ; <<4 x float>> [#uses=1]
  %mul396 = fmul <4 x float> %tmp385, %call395    ; <<4 x float>> [#uses=1]
  %tmp397 = load <4 x float>, <4 x float>* %cnd2               ; <<4 x float>> [#uses=1]
  %mul398 = fmul <4 x float> %mul396, %tmp397     ; <<4 x float>> [#uses=1]
  %tmp399 = load i32, i32* %i                          ; <i32> [#uses=1]
  %tmp400 = load <4 x float> addrspace(1)*, <4 x float> addrspace(1)** %S.addr ; <<4 x float> addrspace(1)*> [#uses=1]
  %arrayidx401 = getelementptr inbounds <4 x float>, <4 x float> addrspace(1)* %tmp400, i32 %tmp399 ; <<4 x float> addrspace(1)*> [#uses=1]
  %tmp402 = load <4 x float>, <4 x float> addrspace(1)* %arrayidx401 ; <<4 x float>> [#uses=1]
  %tmp403 = load <4 x float>, <4 x float>* %cnd1               ; <<4 x float>> [#uses=1]
  %mul404 = fmul <4 x float> %tmp402, %tmp403     ; <<4 x float>> [#uses=1]
  %sub405 = fsub <4 x float> %mul398, %mul404     ; <<4 x float>> [#uses=1]
  %tmp406 = load i32, i32* %i                          ; <i32> [#uses=1]
  %tmp407 = load <4 x float> addrspace(1)*, <4 x float> addrspace(1)** %putOutput.addr ; <<4 x float> addrspace(1)*> [#uses=1]
  %arrayidx408 = getelementptr inbounds <4 x float>, <4 x float> addrspace(1)* %tmp407, i32 %tmp406 ; <<4 x float> addrspace(1)*> [#uses=1]
  store <4 x float> %sub405, <4 x float> addrspace(1)* %arrayidx408
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %tmp409 = load i32, i32* %i                          ; <i32> [#uses=1]
  %inc = add i32 %tmp409, 1                       ; <i32> [#uses=1]
  store i32 %inc, i32* %i
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare <4 x float> @_Z3logDv4_f(<4 x float>)

declare <4 x float> @_Z4sqrtDv4_f(<4 x float>)

declare <4 x float> @_Z4fabsDv4_f(<4 x float>)

declare <4 x float> @_Z3expDv4_f(<4 x float>)

declare <4 x float> @_Z6selectDv4_fS_Dv4_i(<4 x float>, <4 x float>, <4 x i32>)
