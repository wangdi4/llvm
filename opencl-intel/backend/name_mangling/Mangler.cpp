/****************************************************************************
  Copyright (c) Intel Corporation (2012,2013).

  INTEL MAKES NO WARRANTY OF ANY KIND REGARDING THE CODE.  THIS CODE IS
  LICENSED ON AN AS IS BASIS AND INTEL WILL NOT PROVIDE ANY SUPPORT,
  ASSISTANCE, INSTALLATION, TRAINING OR OTHER SERVICES.  INTEL DOES NOT
  PROVIDE ANY UPDATES, ENHANCEMENTS OR EXTENSIONS.  INTEL SPECIFICALLY
  DISCLAIMS ANY WARRANTY OF MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR ANY
  PARTICULAR PURPOSE, OR ANY OTHER WARRANTY.  Intel disclaims all liability,
  including liability for infringement of any proprietary rights, relating to
  use of the code. No license, express or implied, by estoppels or otherwise,
  to any intellectual property rights is granted herein.

  File Name: Mangler.cpp

  \****************************************************************************/

#include "FunctionDescriptor.h"
#include "Utils.h"
#include "Type.h"
#include <assert.h>
#include <string>
#include <sstream>
#include <list>
#include <algorithm>

//
//Implementation of an API.
//Mangle the given function descriptor to a mangled name.
//The mangling algorithm is intendent to match the Itanium mangling altorithm.
//More concretly, it is designed to match clang 3.0 itanium mangling.
//
const char* appleFreePrefix[] = {
"convert_char",
"convert_char_rte",
"convert_char_rtn",
"convert_char_rtp",
"convert_char_rtz",
"convert_char_sat",
"convert_char_sat_rte",
"convert_char_sat_rtn",
"convert_char_sat_rtp",
"convert_char_sat_rtz",
"convert_char2",
"convert_char2_rte",
"convert_char2_rtn",
"convert_char2_rtp",
"convert_char2_rtz",
"convert_char2_sat",
"convert_char2_sat_rte",
"convert_char2_sat_rtn",
"convert_char2_sat_rtp",
"convert_char2_sat_rtz",
"convert_char3",
"convert_char3_rte",
"convert_char3_rtn",
"convert_char3_rtp",
"convert_char3_rtz",
"convert_char3_sat",
"convert_char3_sat_rte",
"convert_char3_sat_rtn",
"convert_char3_sat_rtp",
"convert_char3_sat_rtz",
"convert_char4",
"convert_char4_rte",
"convert_char4_rtn",
"convert_char4_rtp",
"convert_char4_rtz",
"convert_char4_sat",
"convert_char4_sat_rte",
"convert_char4_sat_rtn",
"convert_char4_sat_rtp",
"convert_char4_sat_rtz",
"convert_char8",
"convert_char8_rte",
"convert_char8_rtn",
"convert_char8_rtp",
"convert_char8_rtz",
"convert_char8_sat",
"convert_char8_sat_rte",
"convert_char8_sat_rtn",
"convert_char8_sat_rtp",
"convert_char8_sat_rtz",
"convert_char16",
"convert_char16_rte",
"convert_char16_rtn",
"convert_char16_rtp",
"convert_char16_rtz",
"convert_char16_sat",
"convert_char16_sat_rte",
"convert_char16_sat_rtn",
"convert_char16_sat_rtp",
"convert_char16_sat_rtz",
"convert_uchar",
"convert_uchar_rte",
"convert_uchar_rtn",
"convert_uchar_rtp",
"convert_uchar_rtz",
"convert_uchar_sat",
"convert_uchar_sat_rte",
"convert_uchar_sat_rtn",
"convert_uchar_sat_rtp",
"convert_uchar_sat_rtz",
"convert_uchar2",
"convert_uchar2_rte",
"convert_uchar2_rtn",
"convert_uchar2_rtp",
"convert_uchar2_rtz",
"convert_uchar2_sat",
"convert_uchar2_sat_rte",
"convert_uchar2_sat_rtn",
"convert_uchar2_sat_rtp",
"convert_uchar2_sat_rtz",
"convert_uchar3",
"convert_uchar3_rte",
"convert_uchar3_rtn",
"convert_uchar3_rtp",
"convert_uchar3_rtz",
"convert_uchar3_sat",
"convert_uchar3_sat_rte",
"convert_uchar3_sat_rtn",
"convert_uchar3_sat_rtp",
"convert_uchar3_sat_rtz",
"convert_uchar4",
"convert_uchar4_rte",
"convert_uchar4_rtn",
"convert_uchar4_rtp",
"convert_uchar4_rtz",
"convert_uchar4_sat",
"convert_uchar4_sat_rte",
"convert_uchar4_sat_rtn",
"convert_uchar4_sat_rtp",
"convert_uchar4_sat_rtz",
"convert_uchar8",
"convert_uchar8_rte",
"convert_uchar8_rtn",
"convert_uchar8_rtp",
"convert_uchar8_rtz",
"convert_uchar8_sat",
"convert_uchar8_sat_rte",
"convert_uchar8_sat_rtn",
"convert_uchar8_sat_rtp",
"convert_uchar8_sat_rtz",
"convert_uchar16",
"convert_uchar16_rte",
"convert_uchar16_rtn",
"convert_uchar16_rtp",
"convert_uchar16_rtz",
"convert_uchar16_sat",
"convert_uchar16_sat_rte",
"convert_uchar16_sat_rtn",
"convert_uchar16_sat_rtp",
"convert_uchar16_sat_rtz",
"convert_short",
"convert_short_rte",
"convert_short_rtn",
"convert_short_rtp",
"convert_short_rtz",
"convert_short_sat",
"convert_short_sat_rte",
"convert_short_sat_rtn",
"convert_short_sat_rtp",
"convert_short_sat_rtz",
"convert_short2",
"convert_short2_rte",
"convert_short2_rtn",
"convert_short2_rtp",
"convert_short2_rtz",
"convert_short2_sat",
"convert_short2_sat_rte",
"convert_short2_sat_rtn",
"convert_short2_sat_rtp",
"convert_short2_sat_rtz",
"convert_short3",
"convert_short3_rte",
"convert_short3_rtn",
"convert_short3_rtp",
"convert_short3_rtz",
"convert_short3_sat",
"convert_short3_sat_rte",
"convert_short3_sat_rtn",
"convert_short3_sat_rtp",
"convert_short3_sat_rtz",
"convert_short4",
"convert_short4_rte",
"convert_short4_rtn",
"convert_short4_rtp",
"convert_short4_rtz",
"convert_short4_sat",
"convert_short4_sat_rte",
"convert_short4_sat_rtn",
"convert_short4_sat_rtp",
"convert_short4_sat_rtz",
"convert_short8",
"convert_short8_rte",
"convert_short8_rtn",
"convert_short8_rtp",
"convert_short8_rtz",
"convert_short8_sat",
"convert_short8_sat_rte",
"convert_short8_sat_rtn",
"convert_short8_sat_rtp",
"convert_short8_sat_rtz",
"convert_short16",
"convert_short16_rte",
"convert_short16_rtn",
"convert_short16_rtp",
"convert_short16_rtz",
"convert_short16_sat",
"convert_short16_sat_rte",
"convert_short16_sat_rtn",
"convert_short16_sat_rtp",
"convert_short16_sat_rtz",
"convert_ushort",
"convert_ushort_rte",
"convert_ushort_rtn",
"convert_ushort_rtp",
"convert_ushort_rtz",
"convert_ushort_sat",
"convert_ushort_sat_rte",
"convert_ushort_sat_rtn",
"convert_ushort_sat_rtp",
"convert_ushort_sat_rtz",
"convert_ushort2",
"convert_ushort2_rte",
"convert_ushort2_rtn",
"convert_ushort2_rtp",
"convert_ushort2_rtz",
"convert_ushort2_sat",
"convert_ushort2_sat_rte",
"convert_ushort2_sat_rtn",
"convert_ushort2_sat_rtp",
"convert_ushort2_sat_rtz",
"convert_ushort3",
"convert_ushort3_rte",
"convert_ushort3_rtn",
"convert_ushort3_rtp",
"convert_ushort3_rtz",
"convert_ushort3_sat",
"convert_ushort3_sat_rte",
"convert_ushort3_sat_rtn",
"convert_ushort3_sat_rtp",
"convert_ushort3_sat_rtz",
"convert_ushort4",
"convert_ushort4_rte",
"convert_ushort4_rtn",
"convert_ushort4_rtp",
"convert_ushort4_rtz",
"convert_ushort4_sat",
"convert_ushort4_sat_rte",
"convert_ushort4_sat_rtn",
"convert_ushort4_sat_rtp",
"convert_ushort4_sat_rtz",
"convert_ushort8",
"convert_ushort8_rte",
"convert_ushort8_rtn",
"convert_ushort8_rtp",
"convert_ushort8_rtz",
"convert_ushort8_sat",
"convert_ushort8_sat_rte",
"convert_ushort8_sat_rtn",
"convert_ushort8_sat_rtp",
"convert_ushort8_sat_rtz",
"convert_ushort16",
"convert_ushort16_rte",
"convert_ushort16_rtn",
"convert_ushort16_rtp",
"convert_ushort16_rtz",
"convert_ushort16_sat",
"convert_ushort16_sat_rte",
"convert_ushort16_sat_rtn",
"convert_ushort16_sat_rtp",
"convert_ushort16_sat_rtz",
"convert_int",
"convert_int_rte",
"convert_int_rtn",
"convert_int_rtp",
"convert_int_rtz",
"convert_int_sat",
"convert_int_sat_rte",
"convert_int_sat_rtn",
"convert_int_sat_rtp",
"convert_int_sat_rtz",
"convert_int2",
"convert_int2_rte",
"convert_int2_rtn",
"convert_int2_rtp",
"convert_int2_rtz",
"convert_int2_sat",
"convert_int2_sat_rte",
"convert_int2_sat_rtn",
"convert_int2_sat_rtp",
"convert_int2_sat_rtz",
"convert_int3",
"convert_int3_rte",
"convert_int3_rtn",
"convert_int3_rtp",
"convert_int3_rtz",
"convert_int3_sat",
"convert_int3_sat_rte",
"convert_int3_sat_rtn",
"convert_int3_sat_rtp",
"convert_int3_sat_rtz",
"convert_int4",
"convert_int4_rte",
"convert_int4_rtn",
"convert_int4_rtp",
"convert_int4_rtz",
"convert_int4_sat",
"convert_int4_sat_rte",
"convert_int4_sat_rtn",
"convert_int4_sat_rtp",
"convert_int4_sat_rtz",
"convert_int8",
"convert_int8_rte",
"convert_int8_rtn",
"convert_int8_rtp",
"convert_int8_rtz",
"convert_int8_sat",
"convert_int8_sat_rte",
"convert_int8_sat_rtn",
"convert_int8_sat_rtp",
"convert_int8_sat_rtz",
"convert_int16",
"convert_int16_rte",
"convert_int16_rtn",
"convert_int16_rtp",
"convert_int16_rtz",
"convert_int16_sat",
"convert_int16_sat_rte",
"convert_int16_sat_rtn",
"convert_int16_sat_rtp",
"convert_int16_sat_rtz",
"convert_uint",
"convert_uint_rte",
"convert_uint_rtn",
"convert_uint_rtp",
"convert_uint_rtz",
"convert_uint_sat",
"convert_uint_sat_rte",
"convert_uint_sat_rtn",
"convert_uint_sat_rtp",
"convert_uint_sat_rtz",
"convert_uint2",
"convert_uint2_rte",
"convert_uint2_rtn",
"convert_uint2_rtp",
"convert_uint2_rtz",
"convert_uint2_sat",
"convert_uint2_sat_rte",
"convert_uint2_sat_rtn",
"convert_uint2_sat_rtp",
"convert_uint2_sat_rtz",
"convert_uint3",
"convert_uint3_rte",
"convert_uint3_rtn",
"convert_uint3_rtp",
"convert_uint3_rtz",
"convert_uint3_sat",
"convert_uint3_sat_rte",
"convert_uint3_sat_rtn",
"convert_uint3_sat_rtp",
"convert_uint3_sat_rtz",
"convert_uint4",
"convert_uint4_rte",
"convert_uint4_rtn",
"convert_uint4_rtp",
"convert_uint4_rtz",
"convert_uint4_sat",
"convert_uint4_sat_rte",
"convert_uint4_sat_rtn",
"convert_uint4_sat_rtp",
"convert_uint4_sat_rtz",
"convert_uint8",
"convert_uint8_rte",
"convert_uint8_rtn",
"convert_uint8_rtp",
"convert_uint8_rtz",
"convert_uint8_sat",
"convert_uint8_sat_rte",
"convert_uint8_sat_rtn",
"convert_uint8_sat_rtp",
"convert_uint8_sat_rtz",
"convert_uint16",
"convert_uint16_rte",
"convert_uint16_rtn",
"convert_uint16_rtp",
"convert_uint16_rtz",
"convert_uint16_sat",
"convert_uint16_sat_rte",
"convert_uint16_sat_rtn",
"convert_uint16_sat_rtp",
"convert_uint16_sat_rtz",
"convert_long",
"convert_long_rte",
"convert_long_rtn",
"convert_long_rtp",
"convert_long_rtz",
"convert_long_sat",
"convert_long_sat_rte",
"convert_long_sat_rtn",
"convert_long_sat_rtp",
"convert_long_sat_rtz",
"convert_long2",
"convert_long2_rte",
"convert_long2_rtn",
"convert_long2_rtp",
"convert_long2_rtz",
"convert_long2_sat",
"convert_long2_sat_rte",
"convert_long2_sat_rtn",
"convert_long2_sat_rtp",
"convert_long2_sat_rtz",
"convert_long3",
"convert_long3_rte",
"convert_long3_rtn",
"convert_long3_rtp",
"convert_long3_rtz",
"convert_long3_sat",
"convert_long3_sat_rte",
"convert_long3_sat_rtn",
"convert_long3_sat_rtp",
"convert_long3_sat_rtz",
"convert_long4",
"convert_long4_rte",
"convert_long4_rtn",
"convert_long4_rtp",
"convert_long4_rtz",
"convert_long4_sat",
"convert_long4_sat_rte",
"convert_long4_sat_rtn",
"convert_long4_sat_rtp",
"convert_long4_sat_rtz",
"convert_long8",
"convert_long8_rte",
"convert_long8_rtn",
"convert_long8_rtp",
"convert_long8_rtz",
"convert_long8_sat",
"convert_long8_sat_rte",
"convert_long8_sat_rtn",
"convert_long8_sat_rtp",
"convert_long8_sat_rtz",
"convert_long16",
"convert_long16_rte",
"convert_long16_rtn",
"convert_long16_rtp",
"convert_long16_rtz",
"convert_long16_sat",
"convert_long16_sat_rte",
"convert_long16_sat_rtn",
"convert_long16_sat_rtp",
"convert_long16_sat_rtz",
"convert_ulong",
"convert_ulong_rte",
"convert_ulong_rtn",
"convert_ulong_rtp",
"convert_ulong_rtz",
"convert_ulong_sat",
"convert_ulong_sat_rte",
"convert_ulong_sat_rtn",
"convert_ulong_sat_rtp",
"convert_ulong_sat_rtz",
"convert_ulong2",
"convert_ulong2_rte",
"convert_ulong2_rtn",
"convert_ulong2_rtp",
"convert_ulong2_rtz",
"convert_ulong2_sat",
"convert_ulong2_sat_rte",
"convert_ulong2_sat_rtn",
"convert_ulong2_sat_rtp",
"convert_ulong2_sat_rtz",
"convert_ulong3",
"convert_ulong3_rte",
"convert_ulong3_rtn",
"convert_ulong3_rtp",
"convert_ulong3_rtz",
"convert_ulong3_sat",
"convert_ulong3_sat_rte",
"convert_ulong3_sat_rtn",
"convert_ulong3_sat_rtp",
"convert_ulong3_sat_rtz",
"convert_ulong4",
"convert_ulong4_rte",
"convert_ulong4_rtn",
"convert_ulong4_rtp",
"convert_ulong4_rtz",
"convert_ulong4_sat",
"convert_ulong4_sat_rte",
"convert_ulong4_sat_rtn",
"convert_ulong4_sat_rtp",
"convert_ulong4_sat_rtz",
"convert_ulong8",
"convert_ulong8_rte",
"convert_ulong8_rtn",
"convert_ulong8_rtp",
"convert_ulong8_rtz",
"convert_ulong8_sat",
"convert_ulong8_sat_rte",
"convert_ulong8_sat_rtn",
"convert_ulong8_sat_rtp",
"convert_ulong8_sat_rtz",
"convert_ulong16",
"convert_ulong16_rte",
"convert_ulong16_rtn",
"convert_ulong16_rtp",
"convert_ulong16_rtz",
"convert_ulong16_sat",
"convert_ulong16_sat_rte",
"convert_ulong16_sat_rtn",
"convert_ulong16_sat_rtp",
"convert_ulong16_sat_rtz",
"convert_float",
"convert_float_rte",
"convert_float_rtn",
"convert_float_rtp",
"convert_float_rtz",
"convert_float_sat",
"convert_float_sat_rte",
"convert_float_sat_rtn",
"convert_float_sat_rtp",
"convert_float_sat_rtz",
"convert_float2",
"convert_float2_rte",
"convert_float2_rtn",
"convert_float2_rtp",
"convert_float2_rtz",
"convert_float2_sat",
"convert_float2_sat_rte",
"convert_float2_sat_rtn",
"convert_float2_sat_rtp",
"convert_float2_sat_rtz",
"convert_float3",
"convert_float3_rte",
"convert_float3_rtn",
"convert_float3_rtp",
"convert_float3_rtz",
"convert_float3_sat",
"convert_float3_sat_rte",
"convert_float3_sat_rtn",
"convert_float3_sat_rtp",
"convert_float3_sat_rtz",
"convert_float4",
"convert_float4_rte",
"convert_float4_rtn",
"convert_float4_rtp",
"convert_float4_rtz",
"convert_float4_sat",
"convert_float4_sat_rte",
"convert_float4_sat_rtn",
"convert_float4_sat_rtp",
"convert_float4_sat_rtz",
"convert_float8",
"convert_float8_rte",
"convert_float8_rtn",
"convert_float8_rtp",
"convert_float8_rtz",
"convert_float8_sat",
"convert_float8_sat_rte",
"convert_float8_sat_rtn",
"convert_float8_sat_rtp",
"convert_float8_sat_rtz",
"convert_float16",
"convert_float16_rte",
"convert_float16_rtn",
"convert_float16_rtp",
"convert_float16_rtz",
"convert_float16_sat",
"convert_float16_sat_rte",
"convert_float16_sat_rtn",
"convert_float16_sat_rtp",
"convert_float16_sat_rtz",
"convert_double",
"convert_double_rte",
"convert_double_rtn",
"convert_double_rtp",
"convert_double_rtz",
"convert_double_sat",
"convert_double_sat_rte",
"convert_double_sat_rtn",
"convert_double_sat_rtp",
"convert_double_sat_rtz",
"convert_double2",
"convert_double2_rte",
"convert_double2_rtn",
"convert_double2_rtp",
"convert_double2_rtz",
"convert_double2_sat",
"convert_double2_sat_rte",
"convert_double2_sat_rtn",
"convert_double2_sat_rtp",
"convert_double2_sat_rtz",
"convert_double3",
"convert_double3_rte",
"convert_double3_rtn",
"convert_double3_rtp",
"convert_double3_rtz",
"convert_double3_sat",
"convert_double3_sat_rte",
"convert_double3_sat_rtn",
"convert_double3_sat_rtp",
"convert_double3_sat_rtz",
"convert_double4",
"convert_double4_rte",
"convert_double4_rtn",
"convert_double4_rtp",
"convert_double4_rtz",
"convert_double4_sat",
"convert_double4_sat_rte",
"convert_double4_sat_rtn",
"convert_double4_sat_rtp",
"convert_double4_sat_rtz",
"convert_double8",
"convert_double8_rte",
"convert_double8_rtn",
"convert_double8_rtp",
"convert_double8_rtz",
"convert_double8_sat",
"convert_double8_sat_rte",
"convert_double8_sat_rtn",
"convert_double8_sat_rtp",
"convert_double8_sat_rtz",
"convert_double16",
"convert_double16_rte",
"convert_double16_rtn",
"convert_double16_rtp",
"convert_double16_rtz",
"convert_double16_sat",
"convert_double16_sat_rte",
"convert_double16_sat_rtn",
"convert_double16_sat_rtp",
"convert_double16_sat_rtz",
"abs_diff",
"atom_add",
"atom_sub",
"atom_xchg",
"atom_min",
"atom_inc",
"atom_dec",
"atom_and",
"atom_or",
"atom_xor",
"atom_sub",
"atom_cmpxchg",
"atom_min",
"atom_max",
"diff",
"cospi",
"acospi",
"add_sat",
"all",
"any",
"asinpi",
"atan2pi",
"atanpi",
"bitselect",
"clamp",
"clz",
"cross",
"dot",
"degrees",
"distance",
"fast_distance",
"fast_length",
"fast_normalize",
"fract",
"hadd",
"half_cos",
"half_exp",
"half_log",
"half_powr",
"half_divide",
"half_exp",
"half_exp2",
"half_log10",
"half_log2",
"half_recip",
"half_rsqrt",
"half_sin",
"half_sqrt",
"half_tan",
"half_exp10",
"intel_movemask",
"isordered",
"length",
"half_exp10",
"intel_movemask",
"isordered",
"length",
"mad",
"mad24",
"mad_hi",
"mad_sat",
"mask_all",
"mask_any",
"mask_convert_double8",
"mask_fmax",
"mask_fmin",
"mask_mad",
"mask_max",
"mask_min",
"mask_mix",
"mask_native_fdim",
"mask_native_fmax",
"mask_native_fmin",
"mask_native_fmod",
"mask_native_ilogb",
"mask_native_logb",
"mask_popcount",
"mask_vload",
"mask_vloada_half",
"mask_vload_half",
"mask_vstore",
"mask_vstorea_half",
"mask_vstorea_half_rte",
"mask_vstorea_half_rtn",
"mask_vstorea_half_rtp",
"mask_vstorea_half_rtz",
"mask_vstore_half",
"mask_vstore_half_rte",
"mask_vstore_half_rtn",
"mask_vstore_half_rtp",
"mask_vstore_half_rtz",
"max",
"maxmag",
"min",
"minmag",
"mix",
"mul24",
"mul_hi",
"native_acos",
"native_acosh",
"native_acospi",
"native_asin",
"native_asinh",
"native_asinpi",
"native_atan",
"native_atan2",
"native_atan2pi",
"native_atanh",
"native_atanpi",
"native_cbrt",
"native_cos",
"native_cosh",
"native_cospi",
"native_divide",
"native_erf",
"native_erfc",
"native_exp",
"native_exp10",
"native_exp2",
"native_expm1",
"native_fdim",
"native_fmax",
"native_fmin",
"native_fmod",
"native_fract",
"native_hypot",
"native_ilogb",
"native_log",
"native_log10",
"native_log1p",
"native_log2",
"native_logb",
"native_pow",
"native_pown",
"native_powr",
"native_rcbrt",
"native_recip",
"native_rootn",
"native_rsqrt",
"native_sin",
"native_sincos",
"native_sinh",
"native_sinpi",
"native_sqrt",
"native_tan",
"native_tanh",
"native_tanpi",
"normalize",
"popcount",
"radians",
"rhadd",
"rootn",
"rotate",
"rsqrt",
"select",
"shuffle",
"shuffle2",
"sign",
"sincos",
"sinpi",
"smoothstep",
"soa_all1",
"soa_all16",
"soa_all2",
"soa_all3",
"soa_all4",
"soa_all8",
"soa_any1",
"soa_any16",
"soa_any2",
"soa_any3",
"soa_any4",
"soa_any8",
"soa_cross3",
"soa_cross4",
"soa_distance1",
"soa_distance2",
"soa_distance3",
"soa_distance4",
"soa_dot1",
"soa_dot2",
"soa_dot3",
"soa_dot4",
"soa_fast_distance1",
"soa_fast_distance2",
"soa_fast_distance3",
"soa_fast_distance4",
"soa_fast_length1",
"soa_fast_length2",
"soa_fast_length3",
"soa_fast_length4",
"soa_fast_normalize1",
"soa_fast_normalize2",
"soa_fast_normalize3",
"soa_fast_normalize4",
"soa_length1",
"soa_length2",
"soa_length3",
"soa_length4",
"soa_normalize1",
"soa_normalize2",
"soa_normalize3",
"soa_normalize4",
"step",
"sub_sat",
"tanpi",
"upsample",
"vload16",
"vload2",
"vload3",
"vload4",
"vload8",
"vloada_half",
"vloada_half16",
"vloada_half2",
"vloada_half3",
"vloada_half4",
"vloada_half8",
"vload_half",
"vload_half16",
"vload_half2",
"vload_half3",
"vload_half4",
"vload_half8",
"vstore16",
"vstore2",
"vstore3",
"vstore4",
"vstore8",
"vstorea_half",
"vstorea_half16",
"vstorea_half16_rte",
"vstorea_half16_rtn",
"vstorea_half16_rtp",
"vstorea_half16_rtz",
"vstorea_half2",
"vstorea_half2_rte",
"vstorea_half2_rtn",
"vstorea_half2_rtp",
"vstorea_half2_rtz",
"vstorea_half3",
"vstorea_half3_rte",
"vstorea_half3_rtn",
"vstorea_half3_rtp",
"vstorea_half3_rtz",
"vstorea_half4",
"vstorea_half4_rte",
"vstorea_half4_rtn",
"vstorea_half4_rtp",
"vstorea_half4_rtz",
"vstorea_half8",
"vstorea_half8_rte",
"vstorea_half8_rtn",
"vstorea_half8_rtp",
"vstorea_half8_rtz",
"vstore_half",
"vstore_half16",
"vstore_half16_rte",
"vstore_half16_rtn",
"vstore_half16_rtp",
"vstore_half16_rtz",
"vstore_half2",
"vstore_half2_rte",
"vstore_half2_rtn",
"vstore_half2_rtp",
"vstore_half2_rtz",
"vstore_half3",
"vstore_half3_rte",
"vstore_half3_rtn",
"vstore_half3_rtp",
"vstore_half3_rtz",
"vstore_half4",
"vstore_half4_rte",
"vstore_half4_rtn",
"vstore_half4_rtp",
"vstore_half4_rtz",
"vstore_half8",
"vstore_half8_rte",
"vstore_half8_rtn",
"vstore_half8_rtp",
"vstore_half8_rtz",
"vstore_half_rte",
"vstore_half_rtn",
"vstore_half_rtp",
"vstore_half_rtz"
};

static const char* APPLE_PREFIX = "__cl_";

//Array of constants used by clang to duplicate parameters
//S_  is used to duplicate the 1st parameter
//S0_ is used to duplicate the 2nd parameter (within the same string)
//Note!: theoretically, we need "S1_, S2_,....), but those two are enough for
//all the builtin functions in openCL, so that will do until proven otherwise.
const char* DUPLICANT_STR[2] = {"S_", "S0_"};

class MangleVisitor: public reflection::TypeVisitor{
public:

  MangleVisitor(std::stringstream& s): m_stream(s){}

  void operator() (const reflection::Type* t){
    t->accept(this);
  }

  //visit methods
  void visit(const reflection::Type* t){
    //NOTE! we don't use  DUPLICANT_STR here, since primitive strings are
    //shorter or less then the DUPLICANT_STR itself.
    m_stream << mangledString(t);
  }

  void visit(const reflection::Pointer* p){
    int typeIndex = getTypeIndex(p);
    if( -1 != typeIndex ) {
      m_stream << getDuplicateString(typeIndex);
      return;
    }
    m_stream << "P";
    std::vector<std::string>::const_reverse_iterator e = p->rendAttributes(),
    it = p->rbeginAttributes();
    while (it != e ){
      if (*it == "__private")
        m_stream << "U3AS0";
      else if(*it == "__global")
        m_stream << "U3AS1";
      else if(*it == "__constant")
        m_stream << "U3AS2";
      else if(*it == "__local")
        m_stream << "U3AS3";
      else if(*it == "restrict")
        m_stream << "r";
      else if(*it == "volatile")
        m_stream << "V";
      else if(*it == "const")
        m_stream << "K";
      #ifndef NDEBUG
      else
        assert(false && "dont know this attribute!");
      #endif
      ++it;
    }
    p->getPointee()->accept(this);
    addIfNotExist(p);
  }

  void visit(const reflection::Vector* v){
    int typeIndex = getTypeIndex(v);
    if( -1 != typeIndex ) {
      m_stream << getDuplicateString(typeIndex);
      return;
    }
    addIfNotExist(v);
    m_stream << "Dv" << v->getLen() << "_" << mangledString(v);
  }

  void visit(const reflection::UserDefinedTy* pTy){
    int typeIndex = getTypeIndex(pTy);
    if( -1 != typeIndex ) {
      m_stream << getDuplicateString(typeIndex);
      return;
    }
    addIfNotExist(pTy);
    std::string name = pTy->toString();
    m_stream << name.size() << name;
  }

private:

  void addIfNotExist(const reflection::Type* t){
    std::list<const reflection::Type*>::const_iterator it = m_listTys.begin(),
      e = m_listTys.end();
    while (it != e){
      if ((*it)->equals(t))
        return;
      ++it;
    }
    m_listTys.push_back(t);
  }

  int getTypeIndex(const reflection::Type* t)const{
    int ret = 0;
    std::list<const reflection::Type*>::const_iterator it = m_listTys.begin(),
      e = m_listTys.end();
    while (it != e){
      if ((*it)->equals(t))
        return ret;
      ++ret;
      ++it;
    }
    return -1;
  }

  static std::string getDuplicateString(int index){
    assert (index >= 0 && "illegal index");
    if (0 == index)
      return "S_";
    std::stringstream ss;
    ss << "S" << index-1 << "_";
    return ss.str();
  }

  //holds the mangled string representing the prototype of the function
  std::stringstream& m_stream;
  //list of types 'seen' so far
  std::list<const reflection::Type*> m_listTys;
};

static std::string mangleImpl(const reflection::FunctionDescriptor& fd){
  if (fd.isNull())
    return reflection::FunctionDescriptor::nullString();
  std::stringstream ret;
  ret << "_Z" << fd.name.length() << fd.name;
  MangleVisitor visitor(ret);
  std::for_each(fd.parameters.begin(), fd.parameters.end(), visitor);
  return ret.str();
}

struct StringPred{
llvm::StringRef m_s;

StringPred(llvm::StringRef s): m_s(s){
}

bool operator()(const char* s){
  return m_s == s;
}
};

bool isApplePrefixFree(const std::string& s){
  StringPred pred(s);
  const size_t ARR_SIZE = sizeof(appleFreePrefix)/ sizeof(char*);
  return (
    std::find_if(appleFreePrefix, appleFreePrefix + ARR_SIZE, pred) !=
    (appleFreePrefix+ARR_SIZE));
}

std::string mangle(const reflection::FunctionDescriptor& fd){
  if (fd.isNull())
    return reflection::FunctionDescriptor::nullString();
  if (isApplePrefixFree(fd.name))
    return mangleImpl(fd);
  reflection::FunctionDescriptor cpy = fd;
  cpy.name = APPLE_PREFIX + fd.name;
  return mangleImpl(cpy);
}
