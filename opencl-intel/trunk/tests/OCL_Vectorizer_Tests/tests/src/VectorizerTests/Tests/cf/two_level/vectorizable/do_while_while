/*
 * Part of the control flow tests that check vectorization of control flow statements.
 *
 * Tests the while statement inseide the do while when both their conditions
 * depend on a char and they both don't depend on thread id.
 *
 * @param in
 * 		The input array.
 * @param out
 * 		The output array.
 *
 */
__kernel void
do_while_while (	__global const float *in,
		__global float *out)
{
	int gid = get_global_id(0);

	char tmp1 = in[0] + 5;
	char tmp2 = mul_hi(tmp1, (char)in[1]) * 2 - 12;
	char tmp3 = max((char)in[2], (char)(tmp2 - tmp1)) + 19;
	char tmp4 = in[3] - 7;

	int i = 0;

	do {


		tmp4++;
		tmp2 = tmp2 - 7;

		int j = 0;
		while ((max(tmp3, tmp2) >= 0) && (j < 1024)) {
			tmp4 = tmp4 + tmp2;
			tmp4 = tmp4 * tmp4;
			tmp1 = rotate(tmp1, tmp2);
			tmp2 = tmp3 * tmp4;
			tmp2--;
			tmp3 = tmp3 - 212;

			j++;
		}

		i++;

	} while ((mul_hi(tmp4, tmp1) > 0) && (i < 2048));

	out[gid] = tmp4 * tmp2;

}
