/* This is a vector reduction  */

#define VEC_S	4

__kernel void reduce(__global unsigned int* args, __global const float *data1, __global float *data2)
{
	int gid = get_global_id(0);
	
	unsigned int numElmnts = args[0];
	unsigned int GlobalThreads = args[1];

	int startpoint = (gid * numElmnts) / GlobalThreads;
	int	endpoint   = startpoint + numElmnts/GlobalThreads;
	
	float4 accumlator;
	accumlator.x = data1[startpoint];
	accumlator.y = data1[startpoint +1];
	accumlator.z = data1[startpoint +2];
	accumlator.w = data1[startpoint +3];
	
	float4 tmp;
	for(int i=startpoint +4; i< endpoint; i += VEC_S) {
		tmp.x = data1[i +0];
		tmp.y = data1[i +1];
		tmp.z = data1[i +2];
		tmp.w = data1[i +3];
		
		accumlator += tmp;
		}
		
	/* write the result for this block */
	data2[gid * VEC_S  +0] = accumlator.x; 
	data2[gid * VEC_S  +1] = accumlator.y;
	data2[gid * VEC_S  +2] = accumlator.z;
	data2[gid * VEC_S  +3] = accumlator.w; 								 				 			
}
