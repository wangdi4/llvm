/*******************************************************************************
// Calculate scalar products of VectorN vectors of ElementN elements on DEVICE
// Parameters restrictions:
// 1) ElementN must be multiply of vector size
*******************************************************************************/

#define ElementN 4096
#define VectorN  4096
#define VECTOR_SIZE 4

__kernel void scalarProd(__global float *d_C, __global float *d_A
	, __global float *d_B)
{
	int tid		= get_global_id(0);
	int size	= get_global_size(0);
	int offset	= tid * VectorN / 2;
	
	for(int vec = 0; vec < (VectorN / 2); vec++) {
		int vectorBase = mul24(ElementN, offset + vec);
		int vectorEnd  = vectorBase + ElementN;
		
		float4 sum = make_float4(0,0,0,0);
		float4 A_vec, B_vec;
		for(int pos = vectorBase; pos < vectorEnd; pos += VECTOR_SIZE) {
		
			A_vec = *((float4*)(d_A + pos));
			/*A_vec.x = d_A[pos +0];
			A_vec.y = d_A[pos +1];
			A_vec.z = d_A[pos +2];
			A_vec.w = d_A[pos +3];
			*/
			B_vec = *((float4*)(d_B + pos));
			/*B_vec.x = d_B[pos +0];
			B_vec.y = d_B[pos +1];
			B_vec.z = d_B[pos +2];
			B_vec.w = d_B[pos +3];
			*/
			A_vec *= B_vec;
			sum += A_vec;
			}	
			
		d_C[offset + vec] = sum.x + sum.y + sum.z + sum.w;
		}
}
