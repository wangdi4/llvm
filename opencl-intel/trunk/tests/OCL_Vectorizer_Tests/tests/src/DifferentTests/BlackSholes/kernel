/******************************************************************************
	Black Scholes Scalar Kernel 
	This kernel computes Black Scholes Call & Put Results in Scalar mode.
******************************************************************************/

/******************************************************************************
 some constants for the approximation 
******************************************************************************/

#define A1 0.31938153f
#define A2 -0.356563782f
#define A3 1.781477937f
#define A4 -1.821255978f
#define A5 1.330274429f
#define RSQRT2PI 0.3989422804f

/******************************************************************************
 Polynomial approximation of cumulative normal distribution function
******************************************************************************/

float CND(__private float d){
    float
        K = 1.0f / (1.0f + 0.2316419f * fabs(d));

    float
        cnd = RSQRT2PI * exp(- 0.5f * d * d) * 
        (K * (A1 + K * (A2 + K * (A3 + K * (A4 + K * A5)))));

    if(d > 0)
        cnd = 1.0f - cnd;

    return cnd;
}
/******************************************************************************
 Black-Scholes formula for both call and put
******************************************************************************/
void BlackScholesBody(
    __global float* CallResult,
    __global float* PutResult,
    __private float S, /*	Stock price		*/
    __private float X, /*	Option strike	*/
    __private float T, /*	Option years	*/
    __private float R, /*	Riskless rate	*/
    __private float V  /*	Volatility rate	*/
){ 
    float sqrtT, expRT;
    float d1, d2, CNDD1, CNDD2;

    sqrtT = sqrt(T);
    d1 = (log(S / X) + (R + 0.5f * V * V) * T) / (V * sqrtT);
    d2 = d1 - V * sqrtT;

    CNDD1 = CND(d1);
    CNDD2 = CND(d2);

    expRT = exp(- R * T);
    (*CallResult) = S * CNDD1 - X * expRT * CNDD2;
    (*PutResult)  = X * expRT * (1.0f - CNDD2) - S * (1.0f - CNDD1);
	
}


/******************************************************************************
 Process an array of optN options on DEVICE
******************************************************************************/
 __kernel void BlackScholes(
    __global float *d_CallResult,
    __global float *d_PutResult,
    __global float *d_StockPrice,
    __global float *d_OptionStrike,
    __global float *d_OptionYears,
    __global float *args
){
	/* getting some arguments */
	float	Risk = args[0];
	float	Volatility = args[1];
	
	/* how many options */
	const int OPT_N = args[2];
	/* how many threads is executeing the kernel */
	const int Threads = args[3];

	int tid = get_global_id(0);
	
	for(int opt = tid; opt < OPT_N; opt += Threads)	/* { d_CallResult[tid] = 0; d_PutResult[tid] = 0; } */
		BlackScholesBody(
					&(d_CallResult[opt]),
					&(d_PutResult[opt]),
					d_StockPrice[opt],
					d_OptionStrike[opt],
					d_OptionYears[opt],
					Risk,
					Volatility); 
	
}