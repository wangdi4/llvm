Constructor
runOnModule
**********
; ModuleID = 'cl2m'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-f80:128:128"
target triple = "x86_64-apple-cl.1.0"
	type { i8*, i8*, i8*, i8*, i32 }		; type %0
@sgv = internal constant [3 x i8] c"12\00"		; <[3 x i8]*> [#uses=1]
@fgv = internal constant [0 x i8] zeroinitializer		; <[0 x i8]*> [#uses=1]
@lvgv = internal constant [0 x i8*] zeroinitializer		; <[0 x i8*]*> [#uses=1]
@llvm.global.annotations = appending global [1 x %0] [%0 { i8* bitcast (void (float addrspace(1)*, float addrspace(1)*)* @const_char_mul to i8*), i8* getelementptr ([3 x i8]* @sgv, i32 0, i32 0), i8* getelementptr ([0 x i8]* @fgv, i32 0, i32 0), i8* bitcast ([0 x i8*]* @lvgv to i8*), i32 0 }], section "llvm.metadata"		; <[1 x %0]*> [#uses=0]

define void @const_char_mul(float addrspace(1)* %a, float addrspace(1)* %b) nounwind {
entry:
	%tmp = load i64* addrspace(256)* getelementptr (i64* addrspace(256)* inttoptr (i64 96 to i64* addrspace(256)*), i64 31)		; <i64*> [#uses=1]
	%tmp1 = load i64* %tmp		; <i64> [#uses=1]
	%conv = trunc i64 %tmp1 to i32		; <i32> [#uses=1]
	%idxprom = sext i32 %conv to i64		; <i64> [#uses=1]
	%arrayidx6 = getelementptr float addrspace(1)* %b, i64 %idxprom		; <float addrspace(1)*> [#uses=1]
	store float 5.400000e+01, float addrspace(1)* %arrayidx6
	ret void
}
**********
getVectorizerFunctions
getVectorizerWidths
Constructor
runOnModule
**********
; ModuleID = 'cl2m'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-f80:128:128"
target triple = "x86_64-apple-cl.1.0"
	type { i8*, i8*, i8*, i8*, i32 }		; type %0
@sgv = internal constant [3 x i8] c"12\00"		; <[3 x i8]*> [#uses=1]
@fgv = internal constant [0 x i8] zeroinitializer		; <[0 x i8]*> [#uses=1]
@lvgv = internal constant [0 x i8*] zeroinitializer		; <[0 x i8*]*> [#uses=1]
@llvm.global.annotations = appending global [1 x %0] [%0 { i8* bitcast (void (float addrspace(1)*, float addrspace(1)*)* @const_char_mul to i8*), i8* getelementptr ([3 x i8]* @sgv, i32 0, i32 0), i8* getelementptr ([0 x i8]* @fgv, i32 0, i32 0), i8* bitcast ([0 x i8*]* @lvgv to i8*), i32 0 }], section "llvm.metadata"		; <[1 x %0]*> [#uses=0]

define void @const_char_mul(float addrspace(1)* %a, float addrspace(1)* %b) nounwind {
entry:
	%tmp = load i64* addrspace(256)* getelementptr (i64* addrspace(256)* inttoptr (i64 96 to i64* addrspace(256)*), i64 31)		; <i64*> [#uses=1]
	%tmp1 = load i64* %tmp		; <i64> [#uses=1]
	%conv = trunc i64 %tmp1 to i32		; <i32> [#uses=1]
	%idxprom = sext i32 %conv to i64		; <i64> [#uses=1]
	%arrayidx6 = getelementptr float addrspace(1)* %b, i64 %idxprom		; <float addrspace(1)*> [#uses=1]
	store float 5.400000e+01, float addrspace(1)* %arrayidx6
	ret void
}
**********
getVectorizerFunctions
getVectorizerWidths
Constructor
runOnModule
**********
; ModuleID = 'cl2m'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-f80:128:128"
target triple = "x86_64-apple-cl.1.0"
	type { i8*, i8*, i8*, i8*, i32 }		; type %0
@sgv = internal constant [3 x i8] c"12\00"		; <[3 x i8]*> [#uses=1]
@fgv = internal constant [0 x i8] zeroinitializer		; <[0 x i8]*> [#uses=1]
@lvgv = internal constant [0 x i8*] zeroinitializer		; <[0 x i8*]*> [#uses=1]
@llvm.global.annotations = appending global [1 x %0] [%0 { i8* bitcast (void (float addrspace(1)*, float addrspace(1)*)* @const_char_mul to i8*), i8* getelementptr ([3 x i8]* @sgv, i32 0, i32 0), i8* getelementptr ([0 x i8]* @fgv, i32 0, i32 0), i8* bitcast ([0 x i8*]* @lvgv to i8*), i32 0 }], section "llvm.metadata"		; <[1 x %0]*> [#uses=0]

define void @const_char_mul(float addrspace(1)* %in, float addrspace(1)* %out) nounwind {
entry:
	%tmp = load i64* addrspace(256)* getelementptr (i64* addrspace(256)* inttoptr (i64 96 to i64* addrspace(256)*), i64 31)		; <i64*> [#uses=1]
	%tmp1 = load i64* %tmp		; <i64> [#uses=1]
	%conv = trunc i64 %tmp1 to i32		; <i32> [#uses=1]
	%idxprom = sext i32 %conv to i64		; <i64> [#uses=1]
	%arrayidx4 = getelementptr float addrspace(1)* %out, i64 %idxprom		; <float addrspace(1)*> [#uses=1]
	store float 5.400000e+01, float addrspace(1)* %arrayidx4
	ret void
}
**********
getVectorizerFunctions
getVectorizerWidths
Constructor
runOnModule
**********
; ModuleID = 'cl2m'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-f80:128:128"
target triple = "x86_64-apple-cl.1.0"
	type { i8*, i8*, i8*, i8*, i32 }		; type %0
@sgv = internal constant [3 x i8] c"12\00"		; <[3 x i8]*> [#uses=1]
@fgv = internal constant [0 x i8] zeroinitializer		; <[0 x i8]*> [#uses=1]
@lvgv = internal constant [0 x i8*] zeroinitializer		; <[0 x i8*]*> [#uses=1]
@llvm.global.annotations = appending global [1 x %0] [%0 { i8* bitcast (void (float addrspace(1)*, float addrspace(1)*)* @const_fcmp to i8*), i8* getelementptr ([3 x i8]* @sgv, i32 0, i32 0), i8* getelementptr ([0 x i8]* @fgv, i32 0, i32 0), i8* bitcast ([0 x i8*]* @lvgv to i8*), i32 0 }], section "llvm.metadata"		; <[1 x %0]*> [#uses=0]

define void @const_fcmp(float addrspace(1)* %in, float addrspace(1)* %out) nounwind {
entry:
	%tmp = load i64* addrspace(256)* getelementptr (i64* addrspace(256)* inttoptr (i64 96 to i64* addrspace(256)*), i64 31)		; <i64*> [#uses=1]
	%tmp1 = load i64* %tmp		; <i64> [#uses=1]
	%conv = trunc i64 %tmp1 to i32		; <i32> [#uses=1]
	%idxprom = sext i32 %conv to i64		; <i64> [#uses=1]
	%arrayidx8 = getelementptr float addrspace(1)* %out, i64 %idxprom		; <float addrspace(1)*> [#uses=1]
	br i1 true, label %land.lhs.true, label %land.end

land.lhs.true:		; preds = %entry
	br i1 true, label %land.lhs.true14, label %land.end

land.lhs.true14:		; preds = %land.lhs.true
	br i1 true, label %land.rhs, label %land.end

land.rhs:		; preds = %land.lhs.true14
	br label %land.end

land.end:		; preds = %land.rhs, %land.lhs.true14, %land.lhs.true, %entry
	%0 = phi float [ 0.000000e+00, %land.lhs.true14 ], [ 0.000000e+00, %land.lhs.true ], [ 0.000000e+00, %entry ], [ 1.000000e+00, %land.rhs ]		; <float> [#uses=1]
	store float %0, float addrspace(1)* %arrayidx8
	ret void
}
**********
getVectorizerFunctions
getVectorizerWidths
Constructor
runOnModule
**********
; ModuleID = 'cl2m'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-f80:128:128"
target triple = "x86_64-apple-cl.1.0"
	type { i8*, i8*, i8*, i8*, i32 }		; type %0
@sgv = internal constant [3 x i8] c"12\00"		; <[3 x i8]*> [#uses=1]
@fgv = internal constant [0 x i8] zeroinitializer		; <[0 x i8]*> [#uses=1]
@lvgv = internal constant [0 x i8*] zeroinitializer		; <[0 x i8*]*> [#uses=1]
@llvm.global.annotations = appending global [1 x %0] [%0 { i8* bitcast (void (float addrspace(1)*, float addrspace(1)*)* @const_fptosi to i8*), i8* getelementptr ([3 x i8]* @sgv, i32 0, i32 0), i8* getelementptr ([0 x i8]* @fgv, i32 0, i32 0), i8* bitcast ([0 x i8*]* @lvgv to i8*), i32 0 }], section "llvm.metadata"		; <[1 x %0]*> [#uses=0]

define void @const_fptosi(float addrspace(1)* %in, float addrspace(1)* %out) nounwind {
entry:
	%tmp = load i64* addrspace(256)* getelementptr (i64* addrspace(256)* inttoptr (i64 96 to i64* addrspace(256)*), i64 31)		; <i64*> [#uses=1]
	%tmp1 = load i64* %tmp		; <i64> [#uses=1]
	%conv = trunc i64 %tmp1 to i32		; <i32> [#uses=1]
	%idxprom = sext i32 %conv to i64		; <i64> [#uses=1]
	%arrayidx4 = getelementptr float addrspace(1)* %out, i64 %idxprom		; <float addrspace(1)*> [#uses=1]
	store float 0x41F0000000000000, float addrspace(1)* %arrayidx4
	ret void
}
**********
getVectorizerFunctions
getVectorizerWidths
Constructor
runOnModule
**********
; ModuleID = 'cl2m'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-f80:128:128"
target triple = "x86_64-apple-cl.1.0"
	type { i8*, i8*, i8*, i8*, i32 }		; type %0
@sgv = internal constant [3 x i8] c"12\00"		; <[3 x i8]*> [#uses=1]
@fgv = internal constant [0 x i8] zeroinitializer		; <[0 x i8]*> [#uses=1]
@lvgv = internal constant [0 x i8*] zeroinitializer		; <[0 x i8*]*> [#uses=1]
@llvm.global.annotations = appending global [1 x %0] [%0 { i8* bitcast (void (float addrspace(1)*, float addrspace(1)*)* @const_icmp to i8*), i8* getelementptr ([3 x i8]* @sgv, i32 0, i32 0), i8* getelementptr ([0 x i8]* @fgv, i32 0, i32 0), i8* bitcast ([0 x i8*]* @lvgv to i8*), i32 0 }], section "llvm.metadata"		; <[1 x %0]*> [#uses=0]

define void @const_icmp(float addrspace(1)* %in, float addrspace(1)* %out) nounwind {
entry:
	%tmp = load i64* addrspace(256)* getelementptr (i64* addrspace(256)* inttoptr (i64 96 to i64* addrspace(256)*), i64 31)		; <i64*> [#uses=1]
	%tmp1 = load i64* %tmp		; <i64> [#uses=1]
	%conv = trunc i64 %tmp1 to i32		; <i32> [#uses=1]
	%idxprom = sext i32 %conv to i64		; <i64> [#uses=1]
	%arrayidx4 = getelementptr float addrspace(1)* %out, i64 %idxprom		; <float addrspace(1)*> [#uses=1]
	store float 1.000000e+00, float addrspace(1)* %arrayidx4
	ret void
}
**********
getVectorizerFunctions
getVectorizerWidths
Constructor
runOnModule
**********
; ModuleID = 'cl2m'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-f80:128:128"
target triple = "x86_64-apple-cl.1.0"
	type { i8*, i8*, i8*, i8*, i32 }		; type %0
@sgv = internal constant [3 x i8] c"12\00"		; <[3 x i8]*> [#uses=1]
@fgv = internal constant [0 x i8] zeroinitializer		; <[0 x i8]*> [#uses=1]
@lvgv = internal constant [0 x i8*] zeroinitializer		; <[0 x i8*]*> [#uses=1]
@llvm.global.annotations = appending global [1 x %0] [%0 { i8* bitcast (void (float addrspace(1)*, float addrspace(1)*)* @const_inttoptr to i8*), i8* getelementptr ([3 x i8]* @sgv, i32 0, i32 0), i8* getelementptr ([0 x i8]* @fgv, i32 0, i32 0), i8* bitcast ([0 x i8*]* @lvgv to i8*), i32 0 }], section "llvm.metadata"		; <[1 x %0]*> [#uses=0]

define void @const_inttoptr(float addrspace(1)* %in, float addrspace(1)* %out) nounwind {
entry:
	ret void
}
**********
getVectorizerFunctions
getVectorizerWidths
Constructor
runOnModule
**********
; ModuleID = 'cl2m'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-f80:128:128"
target triple = "x86_64-apple-cl.1.0"
	type { i8*, i8*, i8*, i8*, i32 }		; type %0
@sgv = internal constant [3 x i8] c"12\00"		; <[3 x i8]*> [#uses=1]
@fgv = internal constant [0 x i8] zeroinitializer		; <[0 x i8]*> [#uses=1]
@lvgv = internal constant [0 x i8*] zeroinitializer		; <[0 x i8*]*> [#uses=1]
@llvm.global.annotations = appending global [1 x %0] [%0 { i8* bitcast (void (float addrspace(1)*, float addrspace(1)*)* @const_mul to i8*), i8* getelementptr ([3 x i8]* @sgv, i32 0, i32 0), i8* getelementptr ([0 x i8]* @fgv, i32 0, i32 0), i8* bitcast ([0 x i8*]* @lvgv to i8*), i32 0 }], section "llvm.metadata"		; <[1 x %0]*> [#uses=0]

define void @const_mul(float addrspace(1)* %in, float addrspace(1)* %out) nounwind {
entry:
	%tmp = load i64* addrspace(256)* getelementptr (i64* addrspace(256)* inttoptr (i64 96 to i64* addrspace(256)*), i64 31)		; <i64*> [#uses=1]
	%tmp1 = load i64* %tmp		; <i64> [#uses=1]
	%conv = trunc i64 %tmp1 to i32		; <i32> [#uses=1]
	%idxprom = sext i32 %conv to i64		; <i64> [#uses=1]
	%arrayidx4 = getelementptr float addrspace(1)* %out, i64 %idxprom		; <float addrspace(1)*> [#uses=1]
	store float 1.575000e+01, float addrspace(1)* %arrayidx4
	ret void
}
**********
getVectorizerFunctions
getVectorizerWidths
Constructor
runOnModule
**********
; ModuleID = 'cl2m'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-f80:128:128"
target triple = "x86_64-apple-cl.1.0"
	type { i8*, i8*, i8*, i8*, i32 }		; type %0
@sgv = internal constant [3 x i8] c"12\00"		; <[3 x i8]*> [#uses=1]
@fgv = internal constant [0 x i8] zeroinitializer		; <[0 x i8]*> [#uses=1]
@lvgv = internal constant [0 x i8*] zeroinitializer		; <[0 x i8*]*> [#uses=1]
@llvm.global.annotations = appending global [1 x %0] [%0 { i8* bitcast (void (float addrspace(1)*, float addrspace(1)*)* @function_args_mul to i8*), i8* getelementptr ([3 x i8]* @sgv, i32 0, i32 0), i8* getelementptr ([0 x i8]* @fgv, i32 0, i32 0), i8* bitcast ([0 x i8*]* @lvgv to i8*), i32 0 }], section "llvm.metadata"		; <[1 x %0]*> [#uses=0]

define void @function_args_mul(float addrspace(1)* %in, float addrspace(1)* %out) nounwind {
entry:
	%tmp = load i64* addrspace(256)* getelementptr (i64* addrspace(256)* inttoptr (i64 96 to i64* addrspace(256)*), i64 31)		; <i64*> [#uses=1]
	%tmp1 = load i64* %tmp		; <i64> [#uses=1]
	%conv = trunc i64 %tmp1 to i32		; <i32> [#uses=1]
	%idxprom = sext i32 %conv to i64		; <i64> [#uses=1]
	%arrayidx4 = getelementptr float addrspace(1)* %out, i64 %idxprom		; <float addrspace(1)*> [#uses=1]
	%arrayidx6 = getelementptr float addrspace(1)* %in, i64 1		; <float addrspace(1)*> [#uses=1]
	%tmp7 = load float addrspace(1)* %arrayidx6		; <float> [#uses=1]
	%arrayidx9 = getelementptr float addrspace(1)* %in, i64 2		; <float addrspace(1)*> [#uses=1]
	%tmp10 = load float addrspace(1)* %arrayidx9		; <float> [#uses=1]
	%mul = mul float %tmp7, %tmp10		; <float> [#uses=1]
	store float %mul, float addrspace(1)* %arrayidx4
	ret void
}
**********
getVectorizerFunctions
getVectorizerWidths
Constructor
runOnModule
**********
; ModuleID = 'cl2m'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-f80:128:128"
target triple = "x86_64-apple-cl.1.0"
	type { i8*, i8*, i8*, i8*, i32 }		; type %0
@sgv = internal constant [3 x i8] c"12\00"		; <[3 x i8]*> [#uses=1]
@fgv = internal constant [0 x i8] zeroinitializer		; <[0 x i8]*> [#uses=1]
@lvgv = internal constant [0 x i8*] zeroinitializer		; <[0 x i8*]*> [#uses=1]
@llvm.global.annotations = appending global [1 x %0] [%0 { i8* bitcast (void (float addrspace(1)*, float addrspace(1)*)* @global_mul to i8*), i8* getelementptr ([3 x i8]* @sgv, i32 0, i32 0), i8* getelementptr ([0 x i8]* @fgv, i32 0, i32 0), i8* bitcast ([0 x i8*]* @lvgv to i8*), i32 0 }], section "llvm.metadata"		; <[1 x %0]*> [#uses=0]

define void @global_mul(float addrspace(1)* %in, float addrspace(1)* %out) nounwind {
entry:
	%tmp = load i64* addrspace(256)* getelementptr (i64* addrspace(256)* inttoptr (i64 96 to i64* addrspace(256)*), i64 31)		; <i64*> [#uses=1]
	%tmp1 = load i64* %tmp		; <i64> [#uses=1]
	%conv = trunc i64 %tmp1 to i32		; <i32> [#uses=1]
	%idxprom = sext i32 %conv to i64		; <i64> [#uses=1]
	%arrayidx4 = getelementptr float addrspace(1)* %out, i64 %idxprom		; <float addrspace(1)*> [#uses=1]
	store float 0x402A666660000000, float addrspace(1)* %arrayidx4
	ret void
}
**********
getVectorizerFunctions
getVectorizerWidths
Constructor
runOnModule
**********
; ModuleID = 'cl2m'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-f80:128:128"
target triple = "x86_64-apple-cl.1.0"
	type { i8*, i8*, i8*, i8*, i32 }		; type %0
@sgv = internal constant [3 x i8] c"12\00"		; <[3 x i8]*> [#uses=1]
@fgv = internal constant [0 x i8] zeroinitializer		; <[0 x i8]*> [#uses=1]
@lvgv = internal constant [0 x i8*] zeroinitializer		; <[0 x i8*]*> [#uses=1]
@llvm.global.annotations = appending global [1 x %0] [%0 { i8* bitcast (void (<4 x float> addrspace(1)*, <4 x float> addrspace(1)*)* @invert_colors to i8*), i8* getelementptr ([3 x i8]* @sgv, i32 0, i32 0), i8* getelementptr ([0 x i8]* @fgv, i32 0, i32 0), i8* bitcast ([0 x i8*]* @lvgv to i8*), i32 0 }], section "llvm.metadata"		; <[1 x %0]*> [#uses=0]

define void @invert_colors(<4 x float> addrspace(1)* %in, <4 x float> addrspace(1)* %out) nounwind {
entry:
	%tmp = load i64* addrspace(256)* getelementptr (i64* addrspace(256)* inttoptr (i64 96 to i64* addrspace(256)*), i64 31)		; <i64*> [#uses=1]
	%tmp1 = load i64* %tmp		; <i64> [#uses=1]
	%conv = trunc i64 %tmp1 to i32		; <i32> [#uses=1]
	%idxprom = sext i32 %conv to i64		; <i64> [#uses=5]
	%arrayidx4 = getelementptr <4 x float> addrspace(1)* %out, i64 %idxprom		; <<4 x float> addrspace(1)*> [#uses=5]
	%arrayidx853 = getelementptr <4 x float> addrspace(1)* %in, i64 %idxprom, i64 0		; <float addrspace(1)*> [#uses=1]
	%tmp10 = load float addrspace(1)* %arrayidx853		; <float> [#uses=1]
	%sub = sub float 1.000000e+00, %tmp10		; <float> [#uses=1]
	%tmp11 = load <4 x float> addrspace(1)* %arrayidx4		; <<4 x float>> [#uses=1]
	%tmp12 = insertelement <4 x float> %tmp11, float %sub, i32 0		; <<4 x float>> [#uses=2]
	store <4 x float> %tmp12, <4 x float> addrspace(1)* %arrayidx4
	%tmp21.gep = getelementptr <4 x float> addrspace(1)* %in, i64 %idxprom, i64 1		; <float addrspace(1)*> [#uses=1]
	%tmp22 = load float addrspace(1)* %tmp21.gep		; <float> [#uses=1]
	%sub23 = sub float 1.000000e+00, %tmp22		; <float> [#uses=1]
	%tmp25 = insertelement <4 x float> %tmp12, float %sub23, i32 1		; <<4 x float>> [#uses=2]
	store <4 x float> %tmp25, <4 x float> addrspace(1)* %arrayidx4
	%tmp34.gep = getelementptr <4 x float> addrspace(1)* %in, i64 %idxprom, i64 2		; <float addrspace(1)*> [#uses=1]
	%tmp35 = load float addrspace(1)* %tmp34.gep		; <float> [#uses=1]
	%sub36 = sub float 1.000000e+00, %tmp35		; <float> [#uses=1]
	%tmp38 = insertelement <4 x float> %tmp25, float %sub36, i32 2		; <<4 x float>> [#uses=2]
	store <4 x float> %tmp38, <4 x float> addrspace(1)* %arrayidx4
	%arrayidx46 = getelementptr <4 x float> addrspace(1)* %in, i64 %idxprom		; <<4 x float> addrspace(1)*> [#uses=1]
	%tmp47 = load <4 x float> addrspace(1)* %arrayidx46		; <<4 x float>> [#uses=1]
	%tmp50 = shufflevector <4 x float> %tmp38, <4 x float> %tmp47, <4 x i32> <i32 0, i32 1, i32 2, i32 7>		; <<4 x float>> [#uses=1]
	store <4 x float> %tmp50, <4 x float> addrspace(1)* %arrayidx4
	ret void
}
**********
getVectorizerFunctions
getVectorizerWidths
Constructor
runOnModule
**********
; ModuleID = 'cl2m'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-f80:128:128"
target triple = "x86_64-apple-cl.1.0"
	type { i8*, i8*, i8*, i8*, i32 }		; type %0
@sgv = internal constant [3 x i8] c"12\00"		; <[3 x i8]*> [#uses=1]
@fgv = internal constant [0 x i8] zeroinitializer		; <[0 x i8]*> [#uses=1]
@lvgv = internal constant [0 x i8*] zeroinitializer		; <[0 x i8*]*> [#uses=1]
@llvm.global.annotations = appending global [1 x %0] [%0 { i8* bitcast (void (<4 x float> addrspace(1)*, <4 x float> addrspace(1)*)* @mul_vector to i8*), i8* getelementptr ([3 x i8]* @sgv, i32 0, i32 0), i8* getelementptr ([0 x i8]* @fgv, i32 0, i32 0), i8* bitcast ([0 x i8*]* @lvgv to i8*), i32 0 }], section "llvm.metadata"		; <[1 x %0]*> [#uses=0]

define void @mul_vector(<4 x float> addrspace(1)* %in, <4 x float> addrspace(1)* %out) nounwind {
entry:
	%tmp = load i64* addrspace(256)* getelementptr (i64* addrspace(256)* inttoptr (i64 96 to i64* addrspace(256)*), i64 31)		; <i64*> [#uses=1]
	%tmp1 = load i64* %tmp		; <i64> [#uses=1]
	%conv = trunc i64 %tmp1 to i32		; <i32> [#uses=1]
	%idxprom = sext i32 %conv to i64		; <i64> [#uses=2]
	%arrayidx5 = getelementptr <4 x float> addrspace(1)* %in, i64 %idxprom		; <<4 x float> addrspace(1)*> [#uses=1]
	%tmp6 = load <4 x float> addrspace(1)* %arrayidx5		; <<4 x float>> [#uses=1]
	%mul = mul <4 x float> %tmp6, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>		; <<4 x float>> [#uses=1]
	%arrayidx10 = getelementptr <4 x float> addrspace(1)* %out, i64 %idxprom		; <<4 x float> addrspace(1)*> [#uses=1]
	%mul12 = mul <4 x float> %mul, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>		; <<4 x float>> [#uses=1]
	store <4 x float> %mul12, <4 x float> addrspace(1)* %arrayidx10
	ret void
}
**********
getVectorizerFunctions
getVectorizerWidths
