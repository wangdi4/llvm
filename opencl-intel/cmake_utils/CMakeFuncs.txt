set (__MAKEFUNCS_INCLUDED__ 1)
# Usage
#     COPY_FILES_POST_BUILD_EX( target SRC_DIR OUT_DIR <list-of-files> )
#
function (COPY_FILES_POST_BUILD_EX target SRC_DIR OUT_DIR)
    if (ARGN)
        #message( mkdir )
        add_custom_command(
                             TARGET ${target}
                             POST_BUILD
                             COMMAND ${CMAKE_COMMAND} -E make_directory ${OUT_DIR}
                             #COMMENT "mkdir ${OUT_DIR}"
                             VERBATIM)
    endif (ARGN)

    foreach (FILE ${ARGN})
        add_custom_command(
                             TARGET ${target}
                             POST_BUILD
                             COMMAND ${CMAKE_COMMAND} -E copy ${SRC_DIR}/${FILE} ${OUT_DIR}/
                             #COMMENT "copy ${SRC_DIR}/${FILE} ${OUT_DIR}/"
                             VERBATIM)
    endforeach (FILE)
endfunction(COPY_FILES_POST_BUILD_EX)

#
# Usage
#     COPY_GENERATED_FILES_POST_BUILD( target <list-of-files> )
#
function (COPY_GENERATED_FILES_POST_BUILD target)
    get_target_property( OUT_DIR ${target} RUNTIME_OUTPUT_DIRECTORY )
    if ( ${OUT_DIR} STREQUAL OUT_DIR-NOTFOUND )
        set( OUT_DIR ${CMAKE_CURRENT_BINARY_DIR} )
    endif(  ${OUT_DIR} STREQUAL OUT_DIR-NOTFOUND )

    COPY_FILES_POST_BUILD_EX( ${target}
                              ${OUT_DIR}/${CMAKE_CFG_INTDIR}
                              ${OCL_INSTALL_DIR}
                              ${ARGN} )
endfunction(COPY_GENERATED_FILES_POST_BUILD)

#
# Usage
#     COPY_SOURCE_FILES_POST_BUILD( target <list-of-files> )
#
function (COPY_SOURCE_FILES_POST_BUILD target)
    COPY_FILES_POST_BUILD_EX( ${target}
                              ${CMAKE_CURRENT_SOURCE_DIR}
                              ${OCL_INSTALL_DIR}
                              ${ARGN} )
endfunction(COPY_SOURCE_FILES_POST_BUILD)

#
# Usage
#     GEN_RULES_FOR_COPY_SOURCE_FILES_WITH_SUBDIR( <target_dir> ...<files>... )
#
# If <files> contain subdir - creates this subdir in <target-dir>
# Creates variable COPIED_FILES with full paths to copied files to be included as dependencies
#
function (GEN_RULES_FOR_COPY_SOURCE_FILES_WITH_SUBDIR TARGET_DIR )

    if (ARGN)
        foreach( FILE ${ARGN} )
            get_filename_component( TARGET_PATH ${TARGET_DIR}/${FILE} PATH )

            add_custom_command(OUTPUT ${TARGET_DIR}/${FILE}
                               COMMAND ${CMAKE_COMMAND} -E make_directory ${TARGET_PATH}
                               COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/${FILE} ${TARGET_DIR}/${FILE}
                               MAIN_DEPENDENCY ${FILE}
                               )

            list(APPEND CP_FILES ${TARGET_DIR}/${FILE})

        endforeach( FILE )
    endif (ARGN)

    if (DEFINED CP_FILES)
        set (COPIED_FILES ${CP_FILES} PARENT_SCOPE)
        set_source_files_properties( ${CP_FILES} PROPERTIES GENERATED TRUE )
    endif(DEFINED CP_FILES)

endfunction(GEN_RULES_FOR_COPY_SOURCE_FILES_WITH_SUBDIR)

#
# Usage
#     GEN_RULES_FOR_COPY_FILES( <target_dir> <source_dir> ...<files>... )
#
# If <files> contain subdir - it is ignored and files are copied directly to <target_dir>
# Creates variable COPIED_FILES with full paths to copied files to be included as dependencies
#
function (GEN_RULES_FOR_COPY_FILES TARGET_DIR SOURCE_DIR)

    if (ARGN)
        foreach( FILE ${ARGN} )
            get_filename_component( TARGET_NAME ${FILE} NAME )

            add_custom_command(OUTPUT ${TARGET_DIR}/${TARGET_NAME}
                               COMMAND ${CMAKE_COMMAND} -E make_directory ${TARGET_DIR}
                               COMMAND ${CMAKE_COMMAND} -E copy ${SOURCE_DIR}/${FILE} ${TARGET_DIR}/${TARGET_NAME}
                               MAIN_DEPENDENCY ${SOURCE_DIR}/${FILE}
                               )

            list(APPEND CP_FILES ${TARGET_DIR}/${TARGET_NAME})

        endforeach( FILE )
    endif (ARGN)

    if (DEFINED CP_FILES)
        set (COPIED_FILES ${CP_FILES} PARENT_SCOPE)
        set_source_files_properties( ${CP_FILES} PROPERTIES GENERATED TRUE )
    endif(DEFINED CP_FILES)

endfunction(GEN_RULES_FOR_COPY_FILES)

#
# Usage
#     GEN_RULES_FOR_COPY_SOURCE_FILES( <target_dir> ...<files>... )
#
# If <files> contain subdir - it is ignored and files are copied directly to <target_dir>
# Creates variable COPIED_FILES with full paths to copied files to be included as dependencies
#
function (GEN_RULES_FOR_COPY_SOURCE_FILES TARGET_DIR )

    GEN_RULES_FOR_COPY_FILES( ${TARGET_DIR} ${CMAKE_CURRENT_SOURCE_DIR} ${ARGN} )

    if (DEFINED CP_FILES)
        set (COPIED_FILES ${CP_FILES} PARENT_SCOPE)
    endif(DEFINED CP_FILES)

endfunction(GEN_RULES_FOR_COPY_SOURCE_FILES)


#
# Usage
#     GEN_RULES_FOR_COPY_SOURCE_BIN_FILES_INT( SOURCE_GROUP_NAME OUT_SUBDIR )
#
# Create rules copy os-dependent files from os-dependent source bin dir
# to the output/OUT_SUBDIR directory recursively.
#
# THIS IS AN INTERNAL RECURSIVE FUNC - DO NOT USE IT DIRECTLY!!!
# USE GEN_RULES_FOR_COPY_SOURCE_BIN_FILES_RECURSE() INSTREAD!!!!
#
#
function (GEN_RULES_FOR_COPY_SOURCE_BIN_FILES_INT SOURCE_GROUP_NAME OUT_SUBDIR)

    set( EXTRA_FILES ${ARGN} )
    set( SUBDIR bin/${OCL_SYS_DEPENDENT_SUBDIR} )
    set( PATTERN ${SUBDIR}/${OUT_SUBDIR}/[_a-zA-Z0-9]* )

    #message( "enter ${OUT_SUBDIR}" )

    # check whether multi-configuration cmake generator for windows was used
    if (${CMAKE_CFG_INTDIR} STREQUAL $(OutDir))
        # windows case for MSDEV IDE

        # we need to look into 2 directories - Debug and Release.
        # For each file found we need copy it to output in the case that right configuration is used.
        # If wrong configuration is used - touch the output instead of copying

        # The IDE is based on the file named without directories only. So get list of file names and make it unique.

        # find all files from the Release dir
        string(REPLACE $(OutDir) Release R_PATTERN ${PATTERN}  )
        file(GLOB PREBUILT_FILES_PATHS_RELEASE RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${R_PATTERN} )

        unset( PREBUILT_SUBDIRS_RELEASE )
        unset( PREBUILT_FILES_NAMES_RELEASE )

        foreach( FILE ${PREBUILT_FILES_PATHS_RELEASE} )
            #message( "rel- ${FILE}" )
            get_filename_component( TARGET_NAME ${FILE} NAME )
            if (NOT IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/${FILE} )
                list(APPEND PREBUILT_FILES_NAMES_RELEASE ${TARGET_NAME} )
            elseif (NOT GEN_RULES_FOR_COPY_SOURCE_BIN_FILES______STOP_RECURSE)
                list(APPEND PREBUILT_SUBDIRS_RELEASE ${TARGET_NAME} )
            endif (NOT IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/${FILE} )
        endforeach( FILE )

        # find all files from the Debug dir
        string(REPLACE $(OutDir) Debug D_PATTERN ${PATTERN}  )
        file(GLOB PREBUILT_FILES_PATHS_DEBUG RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${D_PATTERN} )

        unset( PREBUILT_SUBDIRS_DEBUG )
        unset( PREBUILT_FILES_NAMES_DEBUG )

        foreach( FILE ${PREBUILT_FILES_PATHS_DEBUG} )
            #message( "deb - ${FILE}" )
            get_filename_component( TARGET_NAME ${FILE} NAME )
            if (NOT IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/${FILE} )
                list(APPEND PREBUILT_FILES_NAMES_DEBUG ${TARGET_NAME} )
            elseif (NOT GEN_RULES_FOR_COPY_SOURCE_BIN_FILES______STOP_RECURSE)
                list(APPEND PREBUILT_SUBDIRS_DEBUG ${TARGET_NAME} )
            endif (NOT IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/${FILE} )
        endforeach( FILE )

        # make union of Rebug and Release file names sets
        unset( PREBUILT_FILES_NAMES_BOTH )
        list(APPEND PREBUILT_FILES_NAMES_BOTH ${PREBUILT_FILES_NAMES_RELEASE} ${PREBUILT_FILES_NAMES_DEBUG})
	list(LENGTH PREBUILT_FILES_NAMES_BOTH LL ) 
 	message( "prebuilt list: ${PREBUILT_FILES_NAMES_BOTH} ${LL}" )	
	if (LL GREATER 0)
            list(REMOVE_DUPLICATES PREBUILT_FILES_NAMES_BOTH)
	endif ()

        # make union of Rebug and Release subdirs sets
        unset( PREBUILT_SUBDIRS_BOTH )
        list(APPEND PREBUILT_SUBDIRS_BOTH ${PREBUILT_SUBDIRS_RELEASE} ${PREBUILT_SUBDIRS_DEBUG})
        if (PREBUILT_SUBDIRS_BOTH)
            list(REMOVE_DUPLICATES PREBUILT_SUBDIRS_BOTH)

            foreach( SDIR ${PREBUILT_SUBDIRS_BOTH} )
                #message( "recurse ${OUT_SUBDIR}/${SDIR}")
                # recursive call
                GEN_RULES_FOR_COPY_SOURCE_BIN_FILES_INT( ${SOURCE_GROUP_NAME} ${OUT_SUBDIR}/${SDIR} )
                list(APPEND ALL_COPIED_FILES ${COPIED_FILES})
            endforeach( SDIR )
        endif (PREBUILT_SUBDIRS_BOTH)

        # now build copy rules for each file
        unset( COPIED_FILES )
        foreach( FILE ${PREBUILT_FILES_NAMES_BOTH} )
            list(FIND PREBUILT_FILES_NAMES_RELEASE ${FILE} FOUND_IN_RELEASE)
            list(FIND PREBUILT_FILES_NAMES_DEBUG   ${FILE} FOUND_IN_DEBUG)

            set( MKDIR_CMD ${CMAKE_COMMAND} -E make_directory ${OCL_INSTALL_DIR}/${OUT_SUBDIR} )
            set( COPY_CMD  ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/bin/${OCL_SYS_DEPENDENT_SUBDIR}/${OUT_SUBDIR}/${FILE} ${OCL_INSTALL_DIR}/${OUT_SUBDIR}/${FILE} )
            set( TOUCH_CMD ${CMAKE_COMMAND} -E touch ${OCL_INSTALL_DIR}/${OUT_SUBDIR}/${FILE} )

            set( OUT_FILE ${OCL_INSTALL_DIR}/${OUT_SUBDIR}/${FILE} )
            set( DEP_FILE ${CMAKE_CURRENT_SOURCE_DIR}/bin/${OCL_SYS_DEPENDENT_SUBDIR}/${OUT_SUBDIR}/${FILE} )

            if ((NOT (${FOUND_IN_RELEASE} EQUAL -1)) AND (NOT (${FOUND_IN_DEBUG} EQUAL -1)))
               # both
                add_custom_command(OUTPUT ${OUT_FILE}
                                   COMMAND ${MKDIR_CMD}
                                   COMMAND ${COPY_CMD}
                                   MAIN_DEPENDENCY ${DEP_FILE}
                                   )
            elseif (NOT (${FOUND_IN_DEBUG} EQUAL -1))
               # debug
                add_custom_command(OUTPUT ${OUT_FILE}
                                   COMMAND ${MKDIR_CMD}
                                   COMMAND if $(OutDir)==Debug ${COPY_CMD}
                                   COMMAND if NOT $(OutDir)==Debug ${TOUCH_CMD}
                                   MAIN_DEPENDENCY ${DEP_FILE}
                                   )
            elseif (NOT (${FOUND_IN_RELEASE} EQUAL -1))
               # release
                add_custom_command(OUTPUT ${OUT_FILE}
                                   COMMAND ${MKDIR_CMD}
                                   COMMAND if $(OutDir)==Release ${COPY_CMD}
                                   COMMAND if NOT $(OutDir)==Release ${TOUCH_CMD}
                                   MAIN_DEPENDENCY ${DEP_FILE}
                                   )
            endif()

            list(APPEND COPIED_FILES ${OUT_FILE})
            set_source_files_properties( ${DEP_FILE} PROPERTIES GENERATED TRUE )
            source_group( ${SOURCE_GROUP_NAME} FILES ${DEP_FILE} )

        endforeach( FILE )
        set_source_files_properties( ${COPIED_FILES} PROPERTIES GENERATED TRUE )

    else (${CMAKE_CFG_INTDIR} STREQUAL $(OutDir)) # Linux or not IDE-Windows

        #copy files supplied as bins. Do not copy files that do not start with letter or number
        #message( ${PATTERN} )
        file(GLOB PREBUILT_FILES_1 RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${PATTERN} )

        unset( ALL_COPIED_FILES )
        unset( PREBUILT_FILES )
        unset( COPIED_FILES )
        foreach( FILE ${PREBUILT_FILES_1} )
            if (NOT IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/${FILE} )
                #message( ${FILE} )
                list(APPEND PREBUILT_FILES ${FILE} )
            elseif(NOT GEN_RULES_FOR_COPY_SOURCE_BIN_FILES______STOP_RECURSE)
                # recursive call
                get_filename_component( TARGET_NAME ${FILE} NAME )
                #message( "recurse ${OUT_SUBDIR}/${TARGET_NAME}")
                GEN_RULES_FOR_COPY_SOURCE_BIN_FILES_INT( ${SOURCE_GROUP_NAME} ${OUT_SUBDIR}/${TARGET_NAME} )
                list(APPEND ALL_COPIED_FILES ${COPIED_FILES})
            endif (NOT IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/${FILE} )
        endforeach( FILE )

        source_group( ${SOURCE_GROUP_NAME} FILES ${PREBUILT_FILES} )

        GEN_RULES_FOR_COPY_FILES( ${OCL_INSTALL_DIR}/${OUT_SUBDIR}
                                  ${CMAKE_CURRENT_SOURCE_DIR}
                                  ${PREBUILT_FILES}
                                  )

        list(APPEND COPIED_FILES ${ALL_COPIED_FILES})

        # GEN_RULES_FOR_COPY_FILES generates COPIED_FILES variable to be used as dependency

    endif (${CMAKE_CFG_INTDIR} STREQUAL $(OutDir))

    list(APPEND ALL_COPIED_FILES ${COPIED_FILES})
    set (COPIED_FILES ${ALL_COPIED_FILES} PARENT_SCOPE)

endfunction(GEN_RULES_FOR_COPY_SOURCE_BIN_FILES_INT)

#
# Usage
#     GEN_RULES_FOR_COPY_SOURCE_BIN_FILES_RECURSE( SOURCE_GROUP_NAME ...EXTRA_FILES...)
#
# Create rules copy os-dependent files from os-dependent source bin tree
# to the output directory recursively. EXTRA_FILES are optional source files list to copy
#
#
function (GEN_RULES_FOR_COPY_SOURCE_BIN_FILES_RECURSE SOURCE_GROUP_NAME)

    set( EXTRA_FILES ${ARGN} )

    GEN_RULES_FOR_COPY_SOURCE_BIN_FILES_INT( ${SOURCE_GROUP_NAME} . )
    list(APPEND ALL_COPIED_FILES ${COPIED_FILES})

    GEN_RULES_FOR_COPY_FILES( ${OCL_INSTALL_DIR}
                              ${CMAKE_CURRENT_SOURCE_DIR}
                              ${EXTRA_FILES}
                              )

    list(APPEND ALL_COPIED_FILES ${COPIED_FILES})
    source_group( ${SOURCE_GROUP_NAME} FILES ${EXTRA_FILES} )

    set (COPIED_FILES ${ALL_COPIED_FILES} PARENT_SCOPE)
endfunction(GEN_RULES_FOR_COPY_SOURCE_BIN_FILES_RECURSE)

#
# Usage
#     GEN_RULES_FOR_COPY_SOURCE_BIN_FILES( SOURCE_GROUP_NAME ...EXTRA_FILES...)
#
# Create rules copy os-dependent files from os-dependent source bin tree
# to the output directory non-recursively. EXTRA_FILES are optional source files list to copy
#
#
function (GEN_RULES_FOR_COPY_SOURCE_BIN_FILES SOURCE_GROUP_NAME)

    set (GEN_RULES_FOR_COPY_SOURCE_BIN_FILES______STOP_RECURSE TRUE)

    GEN_RULES_FOR_COPY_SOURCE_BIN_FILES_RECURSE( ${SOURCE_GROUP_NAME} ${ARGN} )
    set (COPIED_FILES ${COPIED_FILES} PARENT_SCOPE)

endfunction(GEN_RULES_FOR_COPY_SOURCE_BIN_FILES)

#
# Usage
#     FILTER_SOURCES()
#
# Filters HEADER_FILES_1, EXPORT_HEADER_FILES_1 and SOURCE_FILES_1 variables to remove Win or Linux files
# Creates HEADER_FILES, EXPORT_HEADER_FILES and SOURCE_FILES variables
#
macro( FILTER_SOURCES FILER_OUT_REGEXP )
      list(APPEND HEADER_FILES_1 ${EXPORT_HEADER_FILES_1})

      if (WIN32)
            foreach(FILE ${HEADER_FILES_1})
                if ( NOT FILE MATCHES _linux AND NOT FILE MATCHES ${FILER_OUT_REGEXP})
                        list(APPEND HEADER_FILES_2 ${FILE})
                endif ( NOT FILE MATCHES _linux AND NOT FILE MATCHES ${FILER_OUT_REGEXP})
            endforeach(FILE)

            foreach(FILE ${SOURCE_FILES_1})
                if ( NOT FILE MATCHES  ^stdafx[.]c.*$|_linux  AND NOT FILE MATCHES ${FILER_OUT_REGEXP})
                        list(APPEND SOURCE_FILES_2 ${FILE})
                endif ( NOT FILE MATCHES  ^stdafx[.]c.*$|_linux  AND NOT FILE MATCHES ${FILER_OUT_REGEXP})
            endforeach(FILE)

            file(GLOB RECOURCE_FILES_1 RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.rc *.def)
            list(APPEND SOURCE_FILES_2 ${RECOURCE_FILES_1})

        else () # Linux

            foreach(FILE ${HEADER_FILES_1})
                if ( NOT FILE MATCHES ^resource[.]h$|^stdafx[.]h$|_windows|_win32 AND NOT FILE MATCHES ${FILER_OUT_REGEXP})
                        list(APPEND HEADER_FILES_2 ${FILE})
                endif ( NOT FILE MATCHES ^resource[.]h$|^stdafx[.]h$|_windows|_win32 AND NOT FILE MATCHES ${FILER_OUT_REGEXP})
            endforeach(FILE)

            foreach(FILE ${SOURCE_FILES_1})
                if ( NOT FILE MATCHES ^stdafx[.]c.*$|_windows|_win32 AND NOT FILE MATCHES ${FILER_OUT_REGEXP})
                        list(APPEND SOURCE_FILES_2 ${FILE})
                endif ( NOT FILE MATCHES ^stdafx[.]c.*$|_windows|_win32 AND NOT FILE MATCHES ${FILER_OUT_REGEXP})
            endforeach(FILE)

      endif (WIN32)

      if (DEFINED HEADER_FILES_2)
          set (HEADER_FILES ${HEADER_FILES_2} PARENT_SCOPE)
      endif (DEFINED HEADER_FILES_2)

      if (DEFINED SOURCE_FILES_2)
          set (SOURCE_FILES ${SOURCE_FILES_2} PARENT_SCOPE)
      endif (DEFINED SOURCE_FILES_2)

      if (DEFINED EXPORT_HEADER_FILES_1)
          set (EXPORT_HEADER_FILES ${EXPORT_HEADER_FILES_1} PARENT_SCOPE)
          include_directories( BEFORE export )
      endif (DEFINED EXPORT_HEADER_FILES_1)

endmacro( FILTER_SOURCES )

#
# Usage
#     FIND_SOURCES( optional FILER_OUT_REGEXP )
#
# Creates HEADER_FILES, EXPORT_HEADER_FILES and SOURCE_FILES variables
# by globbing CMAKE_CURRENT_SOURCE_DIR
#
function ( FIND_SOURCES )
    file(GLOB HEADER_FILES_1 RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.h *.hpp)
    file(GLOB EXPORT_HEADER_FILES_1 RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} export/*.h export/*.hpp)
    file(GLOB SOURCE_FILES_1 RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.c *.cpp *.cc)

    if (${ARGC} EQUAL 0 )
        set( FILER_OUT_REGEXP "not used regexp" )
    else()
        set( FILER_OUT_REGEXP ${ARGV0} )
    endif (${ARGC} EQUAL  0 )

    FILTER_SOURCES( ${FILER_OUT_REGEXP} )
endfunction ( FIND_SOURCES )

#
# Usage
#     FIND_SOURCES_RECURSE( optional FILER_OUT_REGEXP )
#
# Creates HEADER_FILES and SOURCE_FILES variables
# by globbing CMAKE_CURRENT_SOURCE_DIR recursively
#
function ( FIND_SOURCES_RECURSE )
    file(GLOB_RECURSE HEADER_FILES_1 RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.h *.hpp)
    file(GLOB_RECURSE SOURCE_FILES_1 RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.c *.cpp)

    if (${ARGC} EQUAL  0 )
        set( FILER_OUT_REGEXP "not used regexp" )
    else()
        set( FILER_OUT_REGEXP ${ARGV0} )
    endif(${ARGC} EQUAL  0 )

    FILTER_SOURCES( ${FILER_OUT_REGEXP} )
endfunction ( FIND_SOURCES_RECURSE )


#
# Usage
#     CALCULATE_TARGET_SOURCES()
#
# Uses HEADER_FILES, EXPORT_HEADER_FILES and SOURCE_FILES variables and creates TARGET_SOURCES
#
function ( CALCULATE_TARGET_SOURCES )
    if (WIN32)
        set( TARGET_SOURCES_1 ${HEADER_FILES} ${SOURCE_FILES} )

        source_group( "Header Files" FILES ${HEADER_FILES} )
        source_group( "Source Files" FILES ${SOURCE_FILES} )

        foreach ( FILE ${HEADER_FILES} ${SOURCE_FILES} )
            if ( FILE MATCHES ^.*[.]rc$|^resource[.]h$ )
                source_group( "Resource Files" FILES ${FILE} )
            elseif ( FILE MATCHES ^stdafx[.]|[.]def$ )
                source_group( "Extra Files" FILES ${FILE} )
            elseif ( FILE MATCHES "^(.+)/[^/]+$" )
                source_group( ${CMAKE_MATCH_1} FILES ${FILE} )
            endif ( FILE MATCHES ^.*[.]rc$|^resource[.]h$ )
        endforeach (FILE)

        if (DEFINED EXPORT_HEADER_FILES)
            source_group( "Export Header Files" FILES ${EXPORT_HEADER_FILES} )
        endif (DEFINED EXPORT_HEADER_FILES)

    else ()
        set( TARGET_SOURCES_1 ${SOURCE_FILES} )
    endif (WIN32)

  if (DEFINED TARGET_SOURCES_1)
      set (TARGET_SOURCES ${TARGET_SOURCES_1} PARENT_SCOPE)
  endif (DEFINED TARGET_SOURCES_1)

endfunction ( CALCULATE_TARGET_SOURCES )

#
# Usage
#     SET_LINUX_EXPORTS_FILE( TARGET FILE_NAME )
#
function ( SET_LINUX_EXPORTS_FILE TARGET FILE_NAME )
    if (NOT WIN32)
        get_target_property( SOURCE_FILES ${TARGET_NAME} SOURCES )
        list( GET SOURCE_FILES 0 FIRST_SOURCE )
        set_source_files_properties( ${FIRST_SOURCE} PROPERTIES OBJECT_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/${FILE_NAME} )
        set_property( TARGET ${TARGET_NAME} APPEND PROPERTY
                        LINK_FLAGS "-Wl,-Bsymbolic -Wl,--version-script=${CMAKE_CURRENT_SOURCE_DIR}/${FILE_NAME}" )
    endif (NOT WIN32)
endfunction ( SET_LINUX_EXPORTS_FILE )

#
# Usage
#     CREATE_ASM_RULES( <ADD_TO_SOURCES_LIST_VAR> ...<asm-files-list>...)
#
# Creates ADD_TO_SOURCES_LIST_VAR that should be added to the source files list
#
macro( CREATE_ASM_RULES ADD_TO_SOURCES_LIST_VAR )

    if (${ARGC} GREATER  1)
        foreach( FILE ${ARGN} )
            get_filename_component( FILE_NAME ${FILE} NAME_WE )
            set( BIN_DIR  ${CMAKE_CURRENT_BINARY_DIR}/${INSTALL_SUBDIR} )
            set( OBJ_FILE ${BIN_DIR}/${FILE_NAME}${CMAKE_C_OUTPUT_EXTENSION} )
            set( SRC_FILE ${CMAKE_CURRENT_SOURCE_DIR}/${FILE} )

            if (CMAKE_ASM_OUTPUT_NAME_FLAG)
				set( OBJ_OUTPUT_NAME_FLAG ${CMAKE_ASM_OUTPUT_NAME_FLAG} ${FILE_NAME}${CMAKE_C_OUTPUT_EXTENSION} )
			endif (CMAKE_ASM_OUTPUT_NAME_FLAG)

            add_custom_command(OUTPUT ${OBJ_FILE}
                               COMMAND ${CMAKE_COMMAND} -E make_directory ${BIN_DIR}
                               COMMAND ${CMAKE_COMMAND} -E chdir ${BIN_DIR}
                                       ${CMAKE_ASM_COMPILER} ${CMAKE_ASM_FLAGS}
                                                             ${CMAKE_ASM_INCLUDE_DIR_FLAG} ${CMAKE_CURRENT_SOURCE_DIR}
                                                             ${OBJ_OUTPUT_NAME_FLAG}
                                                             ${SRC_FILE}
                               MAIN_DEPENDENCY ${SRC_FILE}
                               VERBATIM
                               )

            list(APPEND OBJ_FILES ${OBJ_FILE})
            list(APPEND SRC_FILES ${SRC_FILE})
        endforeach( FILE )
    endif (${ARGC} GREATER 1)

    if (DEFINED OBJ_FILES)
        set (${ADD_TO_SOURCES_LIST_VAR} ${SRC_FILES} ${OBJ_FILES})
        set_source_files_properties( ${OBJ_FILES} PROPERTIES GENERATED TRUE EXTERNAL_OBJECT TRUE )
    endif(DEFINED OBJ_FILES)

endmacro( CREATE_ASM_RULES )

#
# Usage: SET_UNICODE_ON()
#        SET_UNICODE_OFF()
#
macro( SET_UNICODE_ON )
    add_definitions( -D_UNICODE -DUNICODE )
endmacro( SET_UNICODE_ON )

macro( SET_UNICODE_OFF )
    remove_definitions( -D_UNICODE -DUNICODE )
endmacro( SET_UNICODE_OFF )

#
# Usage: PRINT_TOOLS()
#
function( PRINT_TOOLS )
    message(CMAKE_C_FLAGS " - " ${CMAKE_C_FLAGS})
    message(CMAKE_C_FLAGS_DEBUG " - "  ${CMAKE_C_FLAGS_DEBUG})
    message(CMAKE_C_FLAGS_RELEASE " - "  ${CMAKE_C_FLAGS_RELEASE})
    message(CMAKE_CXX_FLAGS " - "  ${CMAKE_CXX_FLAGS})
    message(CMAKE_CXX_FLAGS_DEBUG " - "  ${CMAKE_CXX_FLAGS_DEBUG})
    message(CMAKE_CXX_FLAGS_RELEASE " - "  ${CMAKE_CXX_FLAGS_RELEASE})
    message(CMAKE_EXE_LINKER_FLAGS " - "  ${CMAKE_EXE_LINKER_FLAGS})
    message(CMAKE_EXE_LINKER_FLAGS_DEBUG " - "  ${CMAKE_EXE_LINKER_FLAGS_DEBUG})
    message(CMAKE_EXE_LINKER_FLAGS_RELEASE " - "  ${CMAKE_EXE_LINKER_FLAGS_RELEASE})
    message(CMAKE_SHARED_LINKER_FLAGS " - "  ${CMAKE_SHARED_LINKER_FLAGS})
    message(CMAKE_SHARED_LINKER_FLAGS_DEBUG " - "  ${CMAKE_SHARED_LINKER_FLAGS_DEBUG})
    message(CMAKE_SHARED_LINKER_FLAGS_RELEASE " - "  ${CMAKE_SHARED_LINKER_FLAGS_RELEASE})
endfunction( PRINT_TOOLS )

