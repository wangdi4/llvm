# binary output directory suffix
set(BIN_OUTPUT_DIR_SUFFIX lin64)

# note - the search is done only when the CMake cache is built
find_program( IWHICH_FOUND iwhich NO_CMAKE_PATH NO_CMAKE_ENVIRONMENT_PATH NO_CMAKE_SYSTEM_PATH NO_CMAKE_FIND_ROOT_PATH )

# C Compiler
if (DEFINED INTEL_COMPILER)
    set( CMAKE_C_COMPILER "icc" )
    set( CMAKE_CXX_COMPILER "icpc" )
else ()
    set( CMAKE_C_COMPILER "gcc" )	
    set( CMAKE_CXX_COMPILER "g++" )	
endif (DEFINED INTEL_COMPILER)

# set CMAKE SVN client to be first SVN client in the PATH
execute_process(COMMAND which svn OUTPUT_VARIABLE Subversion_SVN_EXECUTABLE OUTPUT_STRIP_TRAILING_WHITESPACE )	

if (NOT ${IWHICH_FOUND} STREQUAL IWHICH_FOUND-NOTFOUND)
	execute_process(COMMAND ${IWHICH_FOUND}  ${CMAKE_C_COMPILER} OUTPUT_VARIABLE INTEL_IT_COMPILER_FOUND OUTPUT_STRIP_TRAILING_WHITESPACE )
	if (NOT ${INTEL_IT_COMPILER_FOUND} STREQUAL "")		
		set( INTEL_IT_BUILD_ENV_FOUND ON )
	endif (NOT ${INTEL_IT_COMPILER_FOUND} STREQUAL "")
endif (NOT ${IWHICH_FOUND} STREQUAL IWHICH_FOUND-NOTFOUND)

if (DEFINED INTEL_IT_BUILD_ENV_FOUND)
    # setup Intel IT tools versions database	
    set( ENV{USER_ITOOLS} ${CMAKE_SOURCE_DIR}/cmake_utils/intel_it_linux_tool_versions.txt )

    # find required compiler setup    	
    execute_process(COMMAND ${IWHICH_FOUND} ${CMAKE_C_COMPILER} OUTPUT_VARIABLE INTEL_IT_COMPILER_PATH OUTPUT_STRIP_TRAILING_WHITESPACE )	
    string( REPLACE /bin/${CMAKE_C_COMPILER} "" INTEL_IT_COMPILER_PATH  ${INTEL_IT_COMPILER_PATH} )


    # prepend all cmake paths intel IT path
    set( CMAKE_PREFIX_PATH  /usr/intel
                            ${INTEL_IT_COMPILER_PATH})

    set( CMAKE_ASM_COMPILER          gas )
else ()
    set( CMAKE_ASM_COMPILER          as )
endif (DEFINED INTEL_IT_BUILD_ENV_FOUND)

# Warning level
set ( WARNING_LEVEL  "-pedantic -Wall -Wextra -Werror -Wno-unknown-pragmas -Wno-strict-aliasing -Wno-variadic-macros -Wno-long-long -Wno-unused-parameter")



# Assembler setup - use private rules
set( CMAKE_ASM_FLAGS               --64 ) # do not quote this!!!!
set( CMAKE_ASM_INCLUDE_DIR_FLAG    -I )
set( CMAKE_ASM_OUTPUT_NAME_FLAG    -o )

# Compiler switches that CANNOT be modified during makefile generation

# get GCC version
if (CMAKE_C_COMPILER MATCHES gcc)
	execute_process( COMMAND gcc --version OUTPUT_VARIABLE GCC_VER_STR ERROR_QUIET )
	if (GCC_VER_STR MATCHES ".*(GCC|gcc) .* (4\\.[0-9])\\.*")
		set(GCC_VER ${CMAKE_MATCH_2})
	else ()
		message(FATAL_ERROR "Need GCC version 4")
	endif (GCC_VER_STR MATCHES ".*(GCC|gcc) .* (4\\.[0-9])\\.*")
endif (CMAKE_C_COMPILER MATCHES gcc)

if (GCC_VER STREQUAL 4.1)
	set(SSE4_VAL)
	set(VIRTUAL_DISTRUCTOR_WARNING "-Wno-non-virtual-dtor")
else()
	set(SSE4_VAL -msse4.1)
	set(VIRTUAL_DISTRUCTOR_WARNING)
endif(GCC_VER STREQUAL 4.1)

set (ADD_COMMON_C_FLAGS  "-msse3 -mssse3 ${SSE4_VAL} -m64 -fPIC -fdiagnostics-show-option -funsigned-bitfields")

set (ADD_C_FLAGS         "${ADD_COMMON_C_FLAGS} -std=gnu99")
set (ADD_CXX_FLAGS       "${ADD_COMMON_C_FLAGS}")

set (ADD_C_FLAGS_DEBUG   "-O0 -ggdb -D _DEBUG")
set (ADD_C_FLAGS_RELEASE "-O2 -g0 ")

# Compiler switches that CAN be modified during makefile generation and configuration-independent
add_definitions( ${WARNING_LEVEL} )
# gcc 4.1 complains about missing virtual dtor for interface classes. this is bad and wrong, we should supress it.
add_definitions(${VIRTUAL_DISTRUCTOR_WARNING})

# Linker switches
set (INIT_LINKER_FLAGS        "-Wl,--enable-new-dtags") # --enable-new-dtags sets RUNPATH to the same value as RPATH
set (ADD_LINKER_FLAGS_DEBUG        )
set (ADD_LINKER_FLAGS_RELEASE      )

# embed RPATH and RUNPATH to the binaries that assumes that everything is installed in the same directory
#
# Description:
#   RPATH is used to locate dynamically load shared libraries/objects (DLLs) for the non-standard OS
#   locations without need of relinking DLLs during installation. The algorithm is the following:
#
#     1. If RPATH is present in the EXE/DLL and RUNPATH is NOT present, search through it.
#     2. If LD_LIBRARY_PATH env variable is present, search through it
#     3. If RUNPATH is present in the EXE/DLL, search through it
#     4. Search through locations, configured by system admin and cached in /etc/ld.so.cache
#     5. Search through /lib and /usr/lib
#
#   RUNPATH influences only the immediate dependencies, while RPATH influences the whole subtree of dependencies
#   RPATH is concidered deprecated in favor of RUNPATH, but RUNPATH does not supported by some Linux systems.
#   If RUNPATH is not supported, system loader may report error - remove "-Wl,--enable-new-dtags" above to
#   disable RUNPATH generation.
#
#   If RPATH or RUNPATH contains string $ORIGIN it is substituted by the full path to the containing EXE/DLL.
#   Security issue 1: if EXE/DLL is marked as set-uid or set-gid, $ORIGIN is ignored.
#   Security issue 2: if RPATH/RUNPATH references relative subdirs, intruder may fool it by using softlinks
#
SET(CMAKE_SKIP_BUILD_RPATH                  TRUE)   # do not add pointers to the build tree
SET(CMAKE_BUILD_WITH_INSTALL_RPATH          TRUE)   # build rpath as if already installed
SET(CMAKE_INSTALL_RPATH                     "$ORIGIN") # the rpath to use - search through installation dir only
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH       FALSE)  # do not use static link paths as rpath

# setup
enable_language( C )
enable_language( CXX )

# C switches
set( CMAKE_C_FLAGS         "${CMAKE_C_FLAGS}         ${ADD_C_FLAGS}")
set( CMAKE_C_FLAGS_DEBUG   "${CMAKE_C_FLAGS_DEBUG}   ${ADD_C_FLAGS_DEBUG}")
set( CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} ${ADD_C_FLAGS_RELEASE}")

# C++ switches
set( CMAKE_CXX_FLAGS         "${CMAKE_CXX_FLAGS}         ${ADD_CXX_FLAGS}")
set( CMAKE_CXX_FLAGS_DEBUG   "${CMAKE_CXX_FLAGS_DEBUG}   ${ADD_C_FLAGS_DEBUG}")
set( CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${ADD_C_FLAGS_RELEASE}")

# Linker switches - EXE
set( CMAKE_EXE_LINKER_FLAGS           ${INIT_LINKER_FLAGS})
set( CMAKE_EXE_LINKER_FLAGS_DEBUG     "${CMAKE_EXE_LINKER_FLAGS_DEBUG}   ${ADD_LINKER_FLAGS_DEBUG}")
set( CMAKE_EXE_LINKER_FLAGS_RELEASE   "${CMAKE_EXE_LINKER_FLAGS_RELEASE} ${ADD_LINKER_FLAGS_RELEASE}")

# Linker switches - DLL
set( CMAKE_SHARED_LINKER_FLAGS          ${INIT_LINKER_FLAGS})
set( CMAKE_SHARED_LINKER_FLAGS_DEBUG   "${CMAKE_SHARED_LINKER_FLAGS_DEBUG}   ${ADD_LINKER_FLAGS_DEBUG}")
set( CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} ${ADD_LINKER_FLAGS_RELEASE}")

