================================================================================
SUMMARY
================================================================================
The Intel(R) FPGA Emulation Platform for OpenCL(TM) software is an OpenCL(TM)
runtime and compiler, which runs on Intel(R) Core(TM) or Intel(R) Xeon(R)
processors. It is capable of compiling and running programs written with
Intel(R) FPGA Emulation Platform for OpenCL(TM) extensions (e.g. with the FPGA
channels extension).

The emulator aims to provide:
    - Rapid compilation time (seconds)
    - Source code portability between the emulator and FPGA
    - Reasonable performance (the average benchmarks run at a 5x-10x slowdown in
      comparison with FPGA hardware)

This is a preview version of the emulator that comes without functional parity
towards an FPGA device. It is provided for evaluation purposes only and does not
come with any warranties.

================================================================================
REQUIREMENTS
================================================================================
Supported operating systems:
  - Ubuntu* 16.04 (64-bit)
  - RedHat* 7.x or CentOS* 7.x (64-bit)
  - Windows* 7, 8.1, 10 (64-bit)

Supported hardware:
  - 5th Generation Intel(R) Core(TM) Processor (formerly Broadwell) or higher
  - 5th Generation Intel(R) Xeon(R) Processor E3 v4 (formerly Broadwell) or
    higher

================================================================================
INSTALLATION
================================================================================

The emulator should be installed as part of the Intel(R) FPGA SDK for OpenCL(TM)
software technology installation when the corresponding component is selected.

If the installation succeeded, the following OpenCL(TM) platform will be
available:

    Profile             : EMBEDDED_PROFILE
    Version             : OpenCL 1.2 LINUX
    Name                : Intel(R) FPGA Emulation Platform for OpenCL(TM) (preview)
    Vendor              : Intel(R) Corporation
    Devices             : 1
    Device [#1]         :
        Type            : accelerator
        Profile         : EMBEDDED_PROFILE
        Version         : OpenCL 1.2 (Build <build number>)
        Name            : Intel(R) FPGA Emulation Device (preview)
        Vendor          : Intel(R) Corporation
        C version       : OpenCL C 1.2
        Driver version  : 1.2.0.0

================================================================================
DETAILS
================================================================================
The emulator provides a separate OpenCL(TM) platform with one OpenCL(TM) CPU
device. It supports Intel(R) FPGA Emulation Platform for OpenCL(TM) extensions,
including channels, autorun kernels, etc.

OpenCL(TM) programs written for the FPGA device can be compiled and executed
using a standard OpenCL(TM) API (including clCreateProgramWithBinary(), see the
Offline Compilation section below for additional information).

The following sets of environment variables affect the emulator execution:
    * OCL_TBB_NUM_WORKERS ([1..]): Indicates a maximum number of threads that
      can be used by the emulator. The default value is 32, and the maximum
      value is 255. Each thread is capable of running a single kernel. If the
      application requires several kernels to be executing simultaneously, the
      OCL_TBB_NUM_WORKERS should be set appropriately (to the number of kernels
      used or a higher value).

    * VOLCANO_CPU_ARCH (core-avx2, skx): This variable can be set to force a
      SIMD instruction set used for OpenCL(TM) kernel compilation, where skx
      corresponds to Intel(R) Advanced Vector Extensions 512 support.

    * VOLCANO_CLANG_OPTIONS: This internal environment variable allows you to
      force specific options to the OpenCL(TM) compiler:

      + -fopenmp, -fintel-openmp, -fopenmp-tbb, and -fintel-compatibility:
        All enable OpenMP* support.
      + -ffast-math: Forces fast math built-ins.

  - The following are OpenCL(TM) related environment variables (see the Intel(R)
    SDK for OpenCL(TM) - CPU only runtime package documentation for more
    details):

    * CL_CONFIG_USE_VECTORIZER (True, False): Enables or disables the NDRange
      kernel vectorizer. It does not have an effect on the OpenMP* pragma
      vectorization of single work-item kernels.

    * CL_CONFIG_CPU_FORCE_LOCAL_MEM_SIZE (e.g 256 KB): Is the amount of
      available OpenCL(TM) local memory.

    * CL_CONFIG_CPU_FORCE_PRIVATE_MEM_SIZE (e.g 256 KB): Is the amount of
      available OpenCL(TM) private memory.

  - The following are OpenMP* environment variables (see the OpenMP*
    documentation for details):

    * KMP_AFFINITY: Is the affinity settings for OpenMP* threads,
      e.g. norespect, physical, 20.

    * OMP_NUM_THREADS ([1..]): Is the number of available OpenMP* threads. The
      optimization guide using OpenMP* is available in the same directory as the
      binaries (Optimization_guide.pdf).

================================================================================
OFFLINE COMPILATION
================================================================================
The emulator supports the OpenCL(TM) kernels compilation into binaries (this is
similar to .aocx files used for an FPGA device), which can be used in
clCreateProgramWithBinary().

Use the Intel(R) SDK for OpenCL(TM) - offline compiler (ioc64 tool) to compile
kernel binaries for the emulator from the OpenCL(TM) C source code. This tool is
distributed as part of the Intel(R) Code Builder for OpenCL(TM) API.

  > ioc64 -bo='-cl-std=CL2.0' -device=fpga_fast_emu -input=source.cl -ir=kernel_binary.aocx

The name for the output file is arbitrary, but it should have an .aocx
extension.  The host program uses the same name for both the FPGA device and the
emulator.

The kernel binaries produced by the ioc64 tool are NOT compatible with the
binaries compiled for FPGA devices and vice versa.

================================================================================
DEBUGGING OPENCL(TM) KERNELS ON LINUX*
================================================================================
The Intel(R) FPGA Emulation Platform for OpenCL(TM) software supports debugging
of OpenCL(TM) kernels using a GNU GDB* or LLDB* debugger on Linux*. It allows
for debugging host code and OpenCL(TM) kernels in a single debug session.

To enable debugging mode, specific options should be passed to the build options
string parameter in the clBuildProgram() function:

-g
    The -g flag enables source-level debug information generation.

    NOTE: Passing a -g flag means that no optimizations (such as inlining,
    unrolling, vectorization, etc.) are performed, the same as if a
    -cl-opt-disable option was passed.


-s /full/path/to/OpenCL/source/file.cl

    This option specifies the full path to the OpenCL(TM) source file. If the
    path includes spaces, the entire path should be enclosed with double or
    single quotes.

    This option is required in cases where the source of an OpenCL(TM) kernel is
    passed to the clCreateProgramWithSource() function as a string.

    Only one file can be specified with the -s option. If the file contains one
    or more #include directives, multiple paths for files with the -s option are
    not needed.

    NOTE: When using an Intel(R) SDK for OpenCL(TM) - offline compiler,
    specifying the -s option is not needed. The path to an OpenCL(TM) source
    file is defined by the -input option.

GDB* debugging session example:
------------------------------

1. Start debugging a program with:

     gdb --args ./host_program

2. Set a breakpoint in a kernel:

     (gdb) break kernel.cl:5
     Make breakpoint pending on future shared library load? (y or [n]) y
     Breakpoint 1 (kernel.cl:5) pending.

3. Run the host program. The execution stops once the debugger hits the
   breakpoint in the kernel:

     (gdb) run
     Thread 19 "host_program" hit Breakpoint 1, foo (c=9 '\t') kernel.cl:5
     5         d = d + 2;

4. When a kernel is compiled with a -g flag, the compiler generates three
   variables that define the current work item. There is a variable for each
   range in the 3D NDRange: __ocl_dbg_gid0, __ocl_dbg_gid1, and
   __ocl_dbg_gid2. These variables can be used to set conditional breakpoints
   that make it possible stop on a specific work item (or work items):

     (gdb) break kernel.cl:3 if (__ocl_dbg_gid0 == 2)
     Make breakpoint pending on future shared library load? (y or [n]) y
     Breakpoint 3 (kernel.cl:3 if (__ocl_dbg_gid0 == 2)) pending.

     (gdb) run

     [Switching to Thread 0x7fffcffff700 (LWP 26115)]

     Thread 20 "host_program" hit Breakpoint 1, main_kernel (buf_in=0x1834280 "", buf_out=0x186c880 "")
     at kernel.cl:3
     3           size_t workdim = get_work_dim();

     (gdb) print __ocl_dbg_gid0
     $0 = 2

================================================================================
KNOWN ISSUES
================================================================================
1. The current release is for preview only and should not be used in full
   production FPGA development. The complete FPGA features are not implemented
   and not all of the features supported on the emulator are supported on FPGA
   hardware.

2. The platform names and OpenCL(TM) properties differ between the OpenCL(TM)
   platform for the FPGA device and the FPGA emulator.
   | -------------- | --------------------------------- | --------------------  |
   | Property       | Device                            | Emulator              |
   | -------------- | --------------------------------- | --------------------  |
   | Version        | OpenCL(TM) 1.0 Intel(R) FPGA SDK..| OpenCL 1.2 (Build #)  |
   | Driver version | 18.0                              | 1.2.0.<build number>  |
   | Name           | Intel(R) FPGA SDK for OpenCL(...  | Intel(R) FPGA Emu..   |
   | C version      | OpenCL(TM) C 1.0                  | OpenCL C 1.2          |
   | -------------- | --------------------------------- | --------------------  |

3. This emulator is not optimized for kernel execution on an NDRange model.

4. Known issues with the AutoRun kernels feature are:
   - The NDRange kernels are not supported.
   - The autorun kernels shut down only after a host program exits, not after a
     clReleaseProgram() call.

5. The max_work_group_size attribute requires three arguments to be specified
   (one for each dimension in the NDRange) instead of only one argument.

6. The unsupported features are:
   - FPGA library feature emulation
   - Compiler diagnostics for channels
   - Depth attribute for pipes

================================================================================
TROUBLESHOOTING
================================================================================
Q: A CL_OUT_OF_RESOURCES error is returned from the clEnqueueNDRangeKernel.
A: The kernel used more __private or __local memory than the emulator supports
   by default. Try setting the CL_CONFIG_CPU_FORCE_PRIVATE_MEM_SIZE or the
   CL_CONFIG_CPU_FORCE_LOCAL_MEM_SIZE environment variables. See the DETAILS
   section for more information.

Q: The kernels wait infinitely on channel calls or the program hangs.
A: By default the emulator only supports up to 32 simultaneously running
   kernels. Use the OCL_TBB_NUM_WORKERS environment variable to increase this
   value.  See the DETAILS section for more information.

Q: A CL_INVALID_VALUE is returned from the clCreateKernel.
A: A call to the clBuildProgram() was missed. This call is required by the
   OpenCL(TM) specification, even if a program is created from a binary. See the
   OpenCL(TM) Specification Version 1.2 [Reference 5] for details.

================================================================================
ISSUE REPORTING
================================================================================
Please report issues on the Intel(R) OpenCL(TM) forum:
https://software.intel.com/en-us/forums/opencl

================================================================================
CHANGELOG
================================================================================
Changes from the Intel(R) SDK for OpenCL(TM) 2017 R2 release:

  - Partial support for the cl_khr_fp16 extension. The supported features are:
    + scalar half type
    + vector halfn types
    + vload_halfn, vstore_halfn built-ins
    + operators: +, -, *

  - GDB* is supported for kernel debugging on Linux*.

  - The supported OpenCL(TM) version changed from 2.0 to 1.2.

  - A list of supported extensions is now aligned with the FPGA OpenCL(TM)
    driver.

  - Channels can now be passed to functions by value.

Changes from the Intel(R) SDK for OpenCL(TM) 2017 R1 release:

  - Windows* OS is supported.

  - There is partial support for autorun kernels. Only single work-item kernels
    are supported (kernels which have __attribute__((max_global_work_dim(0))).

  - The get_compute_id() built-in function is supported for autorun kernels.

  - The cl_intel_fpga_host_pipe extension is supported.

  - The OpenCL(TM) platform name and device name were changed.

  - The emulator now maintains correct ordering for channel operations in a
    loop. See 1.6.4.3.1 Work-Item Serial Execution of Channels: Channel
    Execution in Loop with Multiple Work-Items in the Intel(R) FPGA SDK for
    OpenCL(TM) Programming Guide [Reference 1].

  - Infinite loops in kernels are supported.

  - The emulator now supports up to 255 kernels executing simultaneously on any
    hardware.

  - General stability improvements.

================================================================================
REFERENCES
================================================================================
1. Link to Intel(R) FPGA SDK for OpenCL(TM) Programming Guide:
    https://www.altera.com/products/design-software/embedded-software-developers/opencl/documentation.html
2. OpenMP* documentation:
    https://software.intel.com/en-us/node/695804
3. KMP_AFFINITY interface documentation:
    https://software.intel.com/en-us/node/695817
4. Intel(R) SDK for OpenCL(TM) - CPU only runtime package documentation:
    https://software.intel.com/en-us/iocl_tec_opg
5. The OpenCL(TM) Specification Version 1.2
    https://www.khronos.org/registry/OpenCL/specs/opencl-1.2.pdf

================================================================================
ACKNOWLEDGEMENT
================================================================================
Intel and Xeon are trademarks of Intel Corporation or its subsidiaries in the
U.S. and/or other countries.

OpenCL and the OpenCL logo are trademarks of Apple Inc. used by permission by
Khronos.
