/* Copyright 2000 - 2013 Intel Corporation All Rights Reserved.
 * The source code contained or described herein and all documents related to
 * the source code ("Material") are owned by Intel Corporation or its suppliers
 * or licensors. Title to the Material remains with Intel Corporation or its
 * suppliers and licensors. The Material contains trade secrets and proprietary
 * and confidential information of Intel or its suppliers and licensors. The
 * Material is protected by worldwide copyright and trade secret laws and treaty
 * provisions. No part of the Material may be used, copied, reproduced,
 * modified, published, uploaded, posted, transmitted, distributed, or disclosed
 * in any way without Intel's prior express written permission.
 *
 * No license under any patent, copyright, trade secret or other intellectual
 * property right is granted to or conferred upon you by disclosure or delivery
 * of the Materials, either expressly, by implication, inducement, estoppel or
 * otherwise. Any license under such intellectual property rights must be
 * express and approved by Intel in writing.
 */


#include <stdio.h>
#include <string.h>

int main(int argc, char **argv)
{
    FILE *input;
    FILE *output;

    if (!argv[1] || !strcmp(argv[1], "-h") || !strcmp(argv[1], "--help") || !argv[2] || !argv[3])
    {
        printf("Usage: bif_linker [input file] [output file] [symbol base name]\n");
        return 0;
    }

    input = fopen(argv[1], "rb");
    if (!input)
    {
        printf("Unable to open input file for reading (%s)\n", argv[1]);
        return 1;
    }

    output = fopen(argv[2], "wb");
    if (!output)
    {
        printf("Unable to open output file for writing (%s)\n", argv[2]);
        return 1;
    }

    fprintf(output, "// This file is auto generated by bo_linker, DO NOT EDIT\n\n");
    fprintf(output, "unsigned char __attribute__((visibility(\"default\"))) %s[] =\n{\n    ", argv[3]);

    int count = 0;
    int is_eol;
    unsigned char data;
    while(fread(&data, 1, 1, input))
    {
    	is_eol = count ? !(count % 20) : 0;
        fprintf(output, "%s0x%.2x, ", is_eol? "\n    ":"", data);
        count++;
    }
    fprintf(output, "\n};\n\n");

    fprintf(output, "unsigned int __attribute__((visibility(\"default\"))) %s_size = %d;\n\n", argv[3], count);
    fclose(input);
    fclose(output);

}



