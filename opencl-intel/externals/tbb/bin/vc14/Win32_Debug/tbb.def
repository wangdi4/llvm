; Copyright (c) 2005-2020 Intel Corporation
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.

; This file is organized with a section for each .cpp file.

EXPORTS

; Assertions (assert.cpp)
?assertion_failure@d1@detail@tbb@@YAXPBDH00@Z

; ITT (tbb_profiling.cpp)
?itt_set_sync_name@d1@detail@tbb@@YAXPAXPB_W@Z
?call_itt_notify_impl@d1@detail@tbb@@YAXHPAX@Z
?create_itt_sync_impl@d1@detail@tbb@@YAXPAXPB_W1@Z

; Allocators (tbb_allocator.cpp)
?cache_aligned_allocate@d1@detail@tbb@@YAPAXI@Z
?cache_aligned_deallocate@d1@detail@tbb@@YAXPAX@Z
?cache_line_size@d1@detail@tbb@@YAIXZ
?allocate_memory@d1@detail@tbb@@YAPAXI@Z
?deallocate_memory@d1@detail@tbb@@YAXPAX@Z
?is_tbbmalloc_used@d1@detail@tbb@@YA_NXZ

; Small object pool (small_object_pool.cpp)
?allocate@small_object_pool@d1@detail@tbb@@SAPAXAAPAV1234@IABUexecute_data@234@@Z
?allocate@small_object_pool@d1@detail@tbb@@SAPAXAAPAV1234@I@Z
?deallocate@small_object_pool@d1@detail@tbb@@QAEXPAXIABUexecute_data@234@@Z
?deallocate@small_object_pool@d1@detail@tbb@@QAEXPAXI@Z

; Error handling (exception.cpp)
?throw_exception@d0@detail@tbb@@YAXW4exception_id@123@@Z
?what@bad_last_alloc@d0@detail@tbb@@UBEPBDXZ
?what@user_abort@d0@detail@tbb@@UBEPBDXZ
?what@missing_wait@d0@detail@tbb@@UBEPBDXZ

; RTM Mutex (rtm_mutex.cpp)
?internal_acquire@rtm_mutex@d1@detail@tbb@@AAEXAAVscoped_lock@1234@_N@Z
?internal_try_acquire@rtm_mutex@d1@detail@tbb@@AAE_NAAVscoped_lock@1234@@Z
?internal_release@rtm_mutex@d1@detail@tbb@@AAEXAAVscoped_lock@1234@@Z

; RTM RW Mutex (rtm_rw_mutex.cpp)
?internal_acquire_writer@rtm_rw_mutex@d1@detail@tbb@@AAEXAAVscoped_lock@1234@_N@Z
?internal_acquire_reader@rtm_rw_mutex@d1@detail@tbb@@AAEXAAVscoped_lock@1234@_N@Z
?internal_upgrade@rtm_rw_mutex@d1@detail@tbb@@AAE_NAAVscoped_lock@1234@@Z
?internal_downgrade@rtm_rw_mutex@d1@detail@tbb@@AAE_NAAVscoped_lock@1234@@Z
?internal_try_acquire_writer@rtm_rw_mutex@d1@detail@tbb@@AAE_NAAVscoped_lock@1234@@Z
?internal_try_acquire_reader@rtm_rw_mutex@d1@detail@tbb@@AAE_NAAVscoped_lock@1234@@Z
?internal_release@rtm_rw_mutex@d1@detail@tbb@@AAEXAAVscoped_lock@1234@@Z

; Tasks and partitioners (task.cpp)
?get_initial_auto_partitioner_divisor@d1@detail@tbb@@YAIXZ
?resize@affinity_partitioner_base@d1@detail@tbb@@AAEXI@Z
?current_thread_index_impl@d1@detail@tbb@@YAHPBUexecute_data@123@@Z
?internal_suspend@d1@detail@tbb@@YAXP6AXPAXPAUsuspend_point_type@123@@Z0@Z
?internal_resume@d1@detail@tbb@@YAXPAUsuspend_point_type@123@@Z
?internal_current_suspend_point@d1@detail@tbb@@YAPAUsuspend_point_type@123@XZ

; Task dispatcher (task_dispatcher.cpp) */
?spawn_impl@d1@detail@tbb@@YAXAAVtask@123@AAVtask_group_context@123@@Z
?spawn_with_affinity_impl@d1@detail@tbb@@YAXAAVtask@123@AAVtask_group_context@123@G@Z
?submit_impl@d1@detail@tbb@@YAXAAVtask@123@AAVarena@123@AAVtask_group_context@123@I@Z
?execute_and_wait_impl@d1@detail@tbb@@YAXAAVtask@123@AAVtask_group_context@123@AAVwait_object@123@1@Z
?wait_impl@d1@detail@tbb@@YAXAAVwait_object@123@AAVtask_group_context@123@@Z
?current_execute_data_impl@d1@detail@tbb@@YAPAUexecute_data@123@XZ

; Task group context (task_group_context.cpp)
??1task_group_context@d1@detail@tbb@@QAE@XZ
?reset@task_group_context@d1@detail@tbb@@QAEXXZ
?cancel_group_execution@task_group_context@d1@detail@tbb@@QAE_NXZ
?is_group_execution_cancelled@task_group_context@d1@detail@tbb@@QBE_NXZ
?capture_fp_settings@task_group_context@d1@detail@tbb@@QAEXXZ
?initialize@task_group_context@d1@detail@tbb@@AAEXXZ
?register_pending_exception@task_group_context@d1@detail@tbb@@QAEXXZ

; Task arena (arena.cpp)
?internal_initialize@task_arena_base@d1@detail@tbb@@IAEXXZ
?internal_terminate@task_arena_base@d1@detail@tbb@@IAEXXZ
?internal_enqueue@task_arena_base@d1@detail@tbb@@IBEXAAVtask@234@@Z
?internal_execute@task_arena_base@d1@detail@tbb@@IBEXAAVdelegate_base@234@@Z
?internal_wait@task_arena_base@d1@detail@tbb@@IBEXXZ
?internal_max_concurrency@task_arena_base@d1@detail@tbb@@KAHPBVtask_arena@234@@Z
?internal_attach@task_arena_base@d1@detail@tbb@@IAE_NXZ
?isolate_within_arena@d1@detail@tbb@@YAXAAVdelegate_base@123@H@Z

; NUMA support (governor.cpp)
?nodes_count@numa_topology@d1@detail@tbb@@YAIXZ
?fill@numa_topology@d1@detail@tbb@@YAXPAH@Z
?default_concurrency@numa_topology@d1@detail@tbb@@YAHH@Z

; Observer (observer_proxy.cpp)
?internal_observe@task_scheduler_observer@d1@detail@tbb@@AAEX_N@Z

; Queuing RW Mutex (queuing_rw_mutex.cpp)
?acquire@scoped_lock@queuing_rw_mutex@d1@detail@tbb@@QAEXAAV2345@_N@Z
?try_acquire@scoped_lock@queuing_rw_mutex@d1@detail@tbb@@QAE_NAAV2345@_N@Z
?release@scoped_lock@queuing_rw_mutex@d1@detail@tbb@@QAEXXZ
?upgrade_to_writer@scoped_lock@queuing_rw_mutex@d1@detail@tbb@@QAE_NXZ
?downgrade_to_reader@scoped_lock@queuing_rw_mutex@d1@detail@tbb@@QAE_NXZ
?internal_construct@queuing_rw_mutex@d1@detail@tbb@@QAEXXZ

; Global control (global_control.cpp)
?active_value@global_control@d1@detail@tbb@@CAIH@Z
?internal_create@global_control@d1@detail@tbb@@AAEXXZ
?internal_destroy@global_control@d1@detail@tbb@@AAEXXZ

; Parallel pipeline (parallel_pipeline.cpp)
?parallel_pipeline_impl@d1@detail@tbb@@YAXAAVtask_group_context@123@IABVfilter_node@123@@Z
?set_end_of_input@base_filter@d1@detail@tbb@@IAEXXZ

; Concurrent bounded queue (concurrent_bounded_queue.cpp)
?allocate_bounded_queue_rep@concurrent_bounded_queue_base@d1@detail@tbb@@QAAPAEI@Z
?deallocate_bounded_queue_rep@concurrent_bounded_queue_base@d1@detail@tbb@@QAAXPAEI@Z
?internal_wait_impl@concurrent_bounded_queue_base@d1@detail@tbb@@AAAXPAVconcurrent_monitor@234@IHAAVdelegate_base@234@@Z
?bounded_queue_abort@concurrent_bounded_queue_base@d1@detail@tbb@@QAAXPAVconcurrent_monitor@234@@Z
?notify_concurrent_monitor@concurrent_bounded_queue_base@d1@detail@tbb@@QAAXPAVconcurrent_monitor@234@II@Z

; Versioning (version.cpp)
TBB_runtime_interface_version
TBB_runtime_version
