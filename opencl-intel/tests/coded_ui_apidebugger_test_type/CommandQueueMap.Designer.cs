// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace APIDebugger.CommandQueueMapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public partial class CommandQueueMap
    {
        
        #region Properties
        public UITestAppDebuggingMicrWindow UITestAppDebuggingMicrWindow
        {
            get
            {
                if ((this.mUITestAppDebuggingMicrWindow == null))
                {
                    this.mUITestAppDebuggingMicrWindow = new UITestAppDebuggingMicrWindow();
                }
                return this.mUITestAppDebuggingMicrWindow;
            }
        }
        
        public UISaveCompletedCommandWindow UISaveCompletedCommandWindow
        {
            get
            {
                if ((this.mUISaveCompletedCommandWindow == null))
                {
                    this.mUISaveCompletedCommandWindow = new UISaveCompletedCommandWindow();
                }
                return this.mUISaveCompletedCommandWindow;
            }
        }
        
        public UIConfirmSaveAsWindow UIConfirmSaveAsWindow
        {
            get
            {
                if ((this.mUIConfirmSaveAsWindow == null))
                {
                    this.mUIConfirmSaveAsWindow = new UIConfirmSaveAsWindow();
                }
                return this.mUIConfirmSaveAsWindow;
            }
        }
        
        public UITestAppDebuggingMicrWindow1 UITestAppDebuggingMicrWindow1
        {
            get
            {
                if ((this.mUITestAppDebuggingMicrWindow1 == null))
                {
                    this.mUITestAppDebuggingMicrWindow1 = new UITestAppDebuggingMicrWindow1();
                }
                return this.mUITestAppDebuggingMicrWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UITestAppDebuggingMicrWindow mUITestAppDebuggingMicrWindow;
        
        private UISaveCompletedCommandWindow mUISaveCompletedCommandWindow;
        
        private UIConfirmSaveAsWindow mUIConfirmSaveAsWindow;
        
        private UITestAppDebuggingMicrWindow1 mUITestAppDebuggingMicrWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITestAppDebuggingMicrWindow : WinWindow
    {
        
        public UITestAppDebuggingMicrWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "TestApp (Debugging) - Microsoft Visual Studio (Administrator)";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UIItemTabList UIItemTabList
        {
            get
            {
                if ((this.mUIItemTabList == null))
                {
                    this.mUIItemTabList = new UIItemTabList(this);
                }
                return this.mUIItemTabList;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTabList mUIItemTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemTabList : WpfTabList
    {
        
        public UIItemTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UICommandQueueTabPage UICommandQueueTabPage
        {
            get
            {
                if ((this.mUICommandQueueTabPage == null))
                {
                    this.mUICommandQueueTabPage = new UICommandQueueTabPage(this);
                }
                return this.mUICommandQueueTabPage;
            }
        }
        #endregion
        
        #region Fields
        private UICommandQueueTabPage mUICommandQueueTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICommandQueueTabPage : WpfTabPage
    {
        
        public UICommandQueueTabPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Command Queue";
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UICommandQueuePane UICommandQueuePane
        {
            get
            {
                if ((this.mUICommandQueuePane == null))
                {
                    this.mUICommandQueuePane = new UICommandQueuePane(this);
                }
                return this.mUICommandQueuePane;
            }
        }
        #endregion
        
        #region Fields
        private UICommandQueuePane mUICommandQueuePane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICommandQueuePane : WpfPane
    {
        
        public UICommandQueuePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ViewPresenter";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "ST:0:0:{28ee7980-b05c-4eeb-a18f-dabd2f7c5641}";
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UICommandQueuePane1 UICommandQueuePane1
        {
            get
            {
                if ((this.mUICommandQueuePane1 == null))
                {
                    this.mUICommandQueuePane1 = new UICommandQueuePane1(this);
                }
                return this.mUICommandQueuePane1;
            }
        }
        #endregion
        
        #region Fields
        private UICommandQueuePane1 mUICommandQueuePane1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICommandQueuePane1 : WpfControl
    {
        
        public UICommandQueuePane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "Pane";
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "GenericPane";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "Command Queue";
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UIToolStrip1ToolBar UIToolStrip1ToolBar
        {
            get
            {
                if ((this.mUIToolStrip1ToolBar == null))
                {
                    this.mUIToolStrip1ToolBar = new UIToolStrip1ToolBar(this);
                }
                return this.mUIToolStrip1ToolBar;
            }
        }
        
        public UIComboBoxQueueWindow UIComboBoxQueueWindow
        {
            get
            {
                if ((this.mUIComboBoxQueueWindow == null))
                {
                    this.mUIComboBoxQueueWindow = new UIComboBoxQueueWindow(this);
                }
                return this.mUIComboBoxQueueWindow;
            }
        }
        
        public UIListBoxEnqueuedCommaWindow UIListBoxEnqueuedCommaWindow
        {
            get
            {
                if ((this.mUIListBoxEnqueuedCommaWindow == null))
                {
                    this.mUIListBoxEnqueuedCommaWindow = new UIListBoxEnqueuedCommaWindow(this);
                }
                return this.mUIListBoxEnqueuedCommaWindow;
            }
        }
        
        public UIListBoxRunningCommanWindow UIListBoxRunningCommanWindow
        {
            get
            {
                if ((this.mUIListBoxRunningCommanWindow == null))
                {
                    this.mUIListBoxRunningCommanWindow = new UIListBoxRunningCommanWindow(this);
                }
                return this.mUIListBoxRunningCommanWindow;
            }
        }
        
        public UIListBoxCompletedCommWindow UIListBoxCompletedCommWindow
        {
            get
            {
                if ((this.mUIListBoxCompletedCommWindow == null))
                {
                    this.mUIListBoxCompletedCommWindow = new UIListBoxCompletedCommWindow(this);
                }
                return this.mUIListBoxCompletedCommWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIToolStrip1ToolBar mUIToolStrip1ToolBar;
        
        private UIComboBoxQueueWindow mUIComboBoxQueueWindow;
        
        private UIListBoxEnqueuedCommaWindow mUIListBoxEnqueuedCommaWindow;
        
        private UIListBoxRunningCommanWindow mUIListBoxRunningCommanWindow;
        
        private UIListBoxCompletedCommWindow mUIListBoxCompletedCommWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIToolStrip1ToolBar : WinToolBar
    {
        
        public UIToolStrip1ToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "toolStrip1";
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveAsButton
        {
            get
            {
                if ((this.mUISaveAsButton == null))
                {
                    this.mUISaveAsButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveAsButton.SearchProperties[WinButton.PropertyNames.Name] = "Save As...";
                    this.mUISaveAsButton.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUISaveAsButton;
            }
        }
        
        public WinButton UISeperateQueuesButton
        {
            get
            {
                if ((this.mUISeperateQueuesButton == null))
                {
                    this.mUISeperateQueuesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISeperateQueuesButton.SearchProperties[WinButton.PropertyNames.Name] = "Seperate Queues";
                    this.mUISeperateQueuesButton.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUISeperateQueuesButton;
            }
        }
        
        public WinButton UIUnifyQueuesButton
        {
            get
            {
                if ((this.mUIUnifyQueuesButton == null))
                {
                    this.mUIUnifyQueuesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIUnifyQueuesButton.SearchProperties[WinButton.PropertyNames.Name] = "Unify Queues";
                    this.mUIUnifyQueuesButton.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIUnifyQueuesButton;
            }
        }
        
        public WinButton UISortByTimeAscendingButton
        {
            get
            {
                if ((this.mUISortByTimeAscendingButton == null))
                {
                    this.mUISortByTimeAscendingButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISortByTimeAscendingButton.SearchProperties[WinButton.PropertyNames.Name] = "Sort By Time: Ascending";
                    this.mUISortByTimeAscendingButton.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUISortByTimeAscendingButton;
            }
        }
        
        public WinButton UISortByTimeDescendingButton
        {
            get
            {
                if ((this.mUISortByTimeDescendingButton == null))
                {
                    this.mUISortByTimeDescendingButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISortByTimeDescendingButton.SearchProperties[WinButton.PropertyNames.Name] = "Sort By Time: Descending";
                    this.mUISortByTimeDescendingButton.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUISortByTimeDescendingButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveAsButton;
        
        private WinButton mUISeperateQueuesButton;
        
        private WinButton mUIUnifyQueuesButton;
        
        private WinButton mUISortByTimeAscendingButton;
        
        private WinButton mUISortByTimeDescendingButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIComboBoxQueueWindow : WinWindow
    {
        
        public UIComboBoxQueueWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "comboBoxQueue";
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIComboBoxQueueComboBox
        {
            get
            {
                if ((this.mUIComboBoxQueueComboBox == null))
                {
                    this.mUIComboBoxQueueComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIComboBoxQueueComboBox.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIComboBoxQueueComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIComboBoxQueueComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIListBoxEnqueuedCommaWindow : WinWindow
    {
        
        public UIListBoxEnqueuedCommaWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "listBoxEnqueuedCommands";
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WinList UIListBoxEnqueuedCommaList
        {
            get
            {
                if ((this.mUIListBoxEnqueuedCommaList == null))
                {
                    this.mUIListBoxEnqueuedCommaList = new WinList(this);
                    #region Search Criteria
                    this.mUIListBoxEnqueuedCommaList.SearchProperties[WinList.PropertyNames.ControlName] = "listBoxEnqueuedCommands";
                    this.mUIListBoxEnqueuedCommaList.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIListBoxEnqueuedCommaList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIListBoxEnqueuedCommaList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIListBoxRunningCommanWindow : WinWindow
    {
        
        public UIListBoxRunningCommanWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "listBoxRunningCommands";
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WinList UIListBoxRunningCommanList
        {
            get
            {
                if ((this.mUIListBoxRunningCommanList == null))
                {
                    this.mUIListBoxRunningCommanList = new WinList(this);
                    #region Search Criteria
                    this.mUIListBoxRunningCommanList.SearchProperties[WinList.PropertyNames.ControlName] = "listBoxRunningCommands";
                    this.mUIListBoxRunningCommanList.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIListBoxRunningCommanList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIListBoxRunningCommanList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIListBoxCompletedCommWindow : WinWindow
    {
        
        public UIListBoxCompletedCommWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "listBoxCompletedCommands";
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WinList UIListBoxCompletedCommList
        {
            get
            {
                if ((this.mUIListBoxCompletedCommList == null))
                {
                    this.mUIListBoxCompletedCommList = new WinList(this);
                    #region Search Criteria
                    this.mUIListBoxCompletedCommList.SearchProperties[WinList.PropertyNames.ControlName] = "listBoxCompletedCommands";
                    this.mUIListBoxCompletedCommList.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIListBoxCompletedCommList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIListBoxCompletedCommList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISaveCompletedCommandWindow : WinWindow
    {
        
        public UISaveCompletedCommandWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save Completed Commands";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save Completed Commands");
            #endregion
        }
        
        #region Properties
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save Completed Commands");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save Completed Commands");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Save Completed Commands");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Save Completed Commands");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIConfirmSaveAsWindow : WinWindow
    {
        
        public UIConfirmSaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public UIConfirmSaveAsPane UIConfirmSaveAsPane
        {
            get
            {
                if ((this.mUIConfirmSaveAsPane == null))
                {
                    this.mUIConfirmSaveAsPane = new UIConfirmSaveAsPane(this);
                }
                return this.mUIConfirmSaveAsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIConfirmSaveAsPane mUIConfirmSaveAsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIConfirmSaveAsPane : WinPane
    {
        
        public UIConfirmSaveAsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Confirm Save As";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITestAppDebuggingMicrWindow1 : WpfWindow
    {
        
        public UITestAppDebuggingMicrWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "TestApp (Debugging) - Microsoft Visual Studio (Administrator)";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UIItemTabList1 UIItemTabList
        {
            get
            {
                if ((this.mUIItemTabList == null))
                {
                    this.mUIItemTabList = new UIItemTabList1(this);
                }
                return this.mUIItemTabList;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTabList1 mUIItemTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemTabList1 : WpfTabList
    {
        
        public UIItemTabList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UICommandQueueTabPage1 UICommandQueueTabPage
        {
            get
            {
                if ((this.mUICommandQueueTabPage == null))
                {
                    this.mUICommandQueueTabPage = new UICommandQueueTabPage1(this);
                }
                return this.mUICommandQueueTabPage;
            }
        }
        #endregion
        
        #region Fields
        private UICommandQueueTabPage1 mUICommandQueueTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICommandQueueTabPage1 : WpfTabPage
    {
        
        public UICommandQueueTabPage1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Command Queue";
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UICommandQueuePane2 UICommandQueuePane
        {
            get
            {
                if ((this.mUICommandQueuePane == null))
                {
                    this.mUICommandQueuePane = new UICommandQueuePane2(this);
                }
                return this.mUICommandQueuePane;
            }
        }
        #endregion
        
        #region Fields
        private UICommandQueuePane2 mUICommandQueuePane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICommandQueuePane2 : WpfPane
    {
        
        public UICommandQueuePane2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ViewPresenter";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "ST:0:0:{28ee7980-b05c-4eeb-a18f-dabd2f7c5641}";
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UICommandQueuePane11 UICommandQueuePane1
        {
            get
            {
                if ((this.mUICommandQueuePane1 == null))
                {
                    this.mUICommandQueuePane1 = new UICommandQueuePane11(this);
                }
                return this.mUICommandQueuePane1;
            }
        }
        #endregion
        
        #region Fields
        private UICommandQueuePane11 mUICommandQueuePane1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICommandQueuePane11 : WpfControl
    {
        
        public UICommandQueuePane11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "Pane";
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "GenericPane";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "Command Queue";
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UIToolStrip1ToolBar1 UIToolStrip1ToolBar
        {
            get
            {
                if ((this.mUIToolStrip1ToolBar == null))
                {
                    this.mUIToolStrip1ToolBar = new UIToolStrip1ToolBar1(this);
                }
                return this.mUIToolStrip1ToolBar;
            }
        }
        
        public UIComboBoxQueueWindow1 UIComboBoxQueueWindow
        {
            get
            {
                if ((this.mUIComboBoxQueueWindow == null))
                {
                    this.mUIComboBoxQueueWindow = new UIComboBoxQueueWindow1(this);
                }
                return this.mUIComboBoxQueueWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIToolStrip1ToolBar1 mUIToolStrip1ToolBar;
        
        private UIComboBoxQueueWindow1 mUIComboBoxQueueWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIToolStrip1ToolBar1 : WinToolBar
    {
        
        public UIToolStrip1ToolBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "toolStrip1";
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WinButton UISeperateQueuesButton
        {
            get
            {
                if ((this.mUISeperateQueuesButton == null))
                {
                    this.mUISeperateQueuesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISeperateQueuesButton.SearchProperties[WinButton.PropertyNames.Name] = "Seperate Queues";
                    this.mUISeperateQueuesButton.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUISeperateQueuesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISeperateQueuesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIComboBoxQueueWindow1 : WinWindow
    {
        
        public UIComboBoxQueueWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "comboBoxQueue";
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIComboBoxQueueComboBox
        {
            get
            {
                if ((this.mUIComboBoxQueueComboBox == null))
                {
                    this.mUIComboBoxQueueComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIComboBoxQueueComboBox.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIComboBoxQueueComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIComboBoxQueueComboBox;
        #endregion
    }
}
