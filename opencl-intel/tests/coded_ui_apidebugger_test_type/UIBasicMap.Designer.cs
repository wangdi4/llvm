// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace APIDebugger.UIBasicMapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public partial class UIBasicMap
    {
        
        #region Properties
        public UISecurityWarningforTeWindow UISecurityWarningforTeWindow
        {
            get
            {
                if ((this.mUISecurityWarningforTeWindow == null))
                {
                    this.mUISecurityWarningforTeWindow = new UISecurityWarningforTeWindow();
                }
                return this.mUISecurityWarningforTeWindow;
            }
        }
        
        public UITestAppMicrosoftVisuWindow UITestAppMicrosoftVisuWindow
        {
            get
            {
                if ((this.mUITestAppMicrosoftVisuWindow == null))
                {
                    this.mUITestAppMicrosoftVisuWindow = new UITestAppMicrosoftVisuWindow();
                }
                return this.mUITestAppMicrosoftVisuWindow;
            }
        }
        
        public UITestAppMicrosoftVisuWindow1 UITestAppMicrosoftVisuWindow1
        {
            get
            {
                if ((this.mUITestAppMicrosoftVisuWindow1 == null))
                {
                    this.mUITestAppMicrosoftVisuWindow1 = new UITestAppMicrosoftVisuWindow1();
                }
                return this.mUITestAppMicrosoftVisuWindow1;
            }
        }
        
        public UIMicrosoftVisualStudiWindow UIMicrosoftVisualStudiWindow
        {
            get
            {
                if ((this.mUIMicrosoftVisualStudiWindow == null))
                {
                    this.mUIMicrosoftVisualStudiWindow = new UIMicrosoftVisualStudiWindow();
                }
                return this.mUIMicrosoftVisualStudiWindow;
            }
        }
        
        public UITestAppDebuggingMicrWindow UITestAppDebuggingMicrWindow
        {
            get
            {
                if ((this.mUITestAppDebuggingMicrWindow == null))
                {
                    this.mUITestAppDebuggingMicrWindow = new UITestAppDebuggingMicrWindow();
                }
                return this.mUITestAppDebuggingMicrWindow;
            }
        }
        
        public UIImportandExportSettiWindow UIImportandExportSettiWindow
        {
            get
            {
                if ((this.mUIImportandExportSettiWindow == null))
                {
                    this.mUIImportandExportSettiWindow = new UIImportandExportSettiWindow();
                }
                return this.mUIImportandExportSettiWindow;
            }
        }
        
        public UIChooseaSettingsFileWindow UIChooseaSettingsFileWindow
        {
            get
            {
                if ((this.mUIChooseaSettingsFileWindow == null))
                {
                    this.mUIChooseaSettingsFileWindow = new UIChooseaSettingsFileWindow();
                }
                return this.mUIChooseaSettingsFileWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UITestAppDebuggingMicrWindow1 UITestAppDebuggingMicrWindow1
        {
            get
            {
                if ((this.mUITestAppDebuggingMicrWindow1 == null))
                {
                    this.mUITestAppDebuggingMicrWindow1 = new UITestAppDebuggingMicrWindow1();
                }
                return this.mUITestAppDebuggingMicrWindow1;
            }
        }
        
        public UIItemWindow5 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow5();
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UISecurityWarningforTeWindow mUISecurityWarningforTeWindow;
        
        private UITestAppMicrosoftVisuWindow mUITestAppMicrosoftVisuWindow;
        
        private UITestAppMicrosoftVisuWindow1 mUITestAppMicrosoftVisuWindow1;
        
        private UIMicrosoftVisualStudiWindow mUIMicrosoftVisualStudiWindow;
        
        private UITestAppDebuggingMicrWindow mUITestAppDebuggingMicrWindow;
        
        private UIImportandExportSettiWindow mUIImportandExportSettiWindow;
        
        private UIChooseaSettingsFileWindow mUIChooseaSettingsFileWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UITestAppDebuggingMicrWindow1 mUITestAppDebuggingMicrWindow1;
        
        private UIItemWindow5 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISecurityWarningforTeWindow : WinWindow
    {
        
        public UISecurityWarningforTeWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Security Warning for TestApp";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Security Warning for TestApp");
            #endregion
        }
        
        #region Properties
        public UIAskmeforeveryprojectWindow UIAskmeforeveryprojectWindow
        {
            get
            {
                if ((this.mUIAskmeforeveryprojectWindow == null))
                {
                    this.mUIAskmeforeveryprojectWindow = new UIAskmeforeveryprojectWindow(this);
                }
                return this.mUIAskmeforeveryprojectWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIAskmeforeveryprojectWindow mUIAskmeforeveryprojectWindow;
        
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIAskmeforeveryprojectWindow : WinWindow
    {
        
        public UIAskmeforeveryprojectWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7374";
            this.WindowTitles.Add("Security Warning for TestApp");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIAskmeforeveryprojectCheckBox
        {
            get
            {
                if ((this.mUIAskmeforeveryprojectCheckBox == null))
                {
                    this.mUIAskmeforeveryprojectCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIAskmeforeveryprojectCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Ask me for every project in this solution";
                    this.mUIAskmeforeveryprojectCheckBox.WindowTitles.Add("Security Warning for TestApp");
                    #endregion
                }
                return this.mUIAskmeforeveryprojectCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIAskmeforeveryprojectCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Security Warning for TestApp");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Security Warning for TestApp");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITestAppMicrosoftVisuWindow : WpfWindow
    {
        
        public UITestAppMicrosoftVisuWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "TestApp - Microsoft Visual Studio (Administrator)";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("TestApp - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UISolutionConfiguratioButton UISolutionConfiguratioButton
        {
            get
            {
                if ((this.mUISolutionConfiguratioButton == null))
                {
                    this.mUISolutionConfiguratioButton = new UISolutionConfiguratioButton(this);
                }
                return this.mUISolutionConfiguratioButton;
            }
        }
        
        public UISolutionPlatformsButton UISolutionPlatformsButton
        {
            get
            {
                if ((this.mUISolutionPlatformsButton == null))
                {
                    this.mUISolutionPlatformsButton = new UISolutionPlatformsButton(this);
                }
                return this.mUISolutionPlatformsButton;
            }
        }
        
        public UIItemTabList UIItemTabList
        {
            get
            {
                if ((this.mUIItemTabList == null))
                {
                    this.mUIItemTabList = new UIItemTabList(this);
                }
                return this.mUIItemTabList;
            }
        }
        
        public UIItemPane UIItemPane
        {
            get
            {
                if ((this.mUIItemPane == null))
                {
                    this.mUIItemPane = new UIItemPane(this);
                }
                return this.mUIItemPane;
            }
        }
        
        public UIItemMenu UIItemMenu
        {
            get
            {
                if ((this.mUIItemMenu == null))
                {
                    this.mUIItemMenu = new UIItemMenu(this);
                }
                return this.mUIItemMenu;
            }
        }
        #endregion
        
        #region Fields
        private UISolutionConfiguratioButton mUISolutionConfiguratioButton;
        
        private UISolutionPlatformsButton mUISolutionPlatformsButton;
        
        private UIItemTabList mUIItemTabList;
        
        private UIItemPane mUIItemPane;
        
        private UIItemMenu mUIItemMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISolutionConfiguratioButton : WpfButton
    {
        
        public UISolutionConfiguratioButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.Name] = "Solution Configurations";
            this.WindowTitles.Add("TestApp - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WpfComboBox UISolutionConfiguratioComboBox
        {
            get
            {
                if ((this.mUISolutionConfiguratioComboBox == null))
                {
                    this.mUISolutionConfiguratioComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUISolutionConfiguratioComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "PART_FocusTarget";
                    this.mUISolutionConfiguratioComboBox.WindowTitles.Add("TestApp - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUISolutionConfiguratioComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mUISolutionConfiguratioComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISolutionPlatformsButton : WpfButton
    {
        
        public UISolutionPlatformsButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfButton.PropertyNames.Name] = "Solution Platforms";
            this.WindowTitles.Add("TestApp - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WpfComboBox UISolutionPlatformsComboBox
        {
            get
            {
                if ((this.mUISolutionPlatformsComboBox == null))
                {
                    this.mUISolutionPlatformsComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUISolutionPlatformsComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "PART_FocusTarget";
                    this.mUISolutionPlatformsComboBox.WindowTitles.Add("TestApp - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUISolutionPlatformsComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mUISolutionPlatformsComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemTabList : WpfTabList
    {
        
        public UIItemTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("TestApp - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UIBreakpointsCustom UIBreakpointsCustom
        {
            get
            {
                if ((this.mUIBreakpointsCustom == null))
                {
                    this.mUIBreakpointsCustom = new UIBreakpointsCustom(this);
                }
                return this.mUIBreakpointsCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIBreakpointsCustom mUIBreakpointsCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIBreakpointsCustom : WpfCustom
    {
        
        public UIBreakpointsCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.TabItemTextControl";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "TitleText";
            this.WindowTitles.Add("TestApp - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WpfText UIBreakpointsText
        {
            get
            {
                if ((this.mUIBreakpointsText == null))
                {
                    this.mUIBreakpointsText = new WpfText(this);
                    #region Search Criteria
                    this.mUIBreakpointsText.SearchProperties[WpfText.PropertyNames.Name] = "Breakpoints";
                    this.mUIBreakpointsText.WindowTitles.Add("TestApp - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIBreakpointsText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIBreakpointsText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemPane : WpfPane
    {
        
        public UIItemPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.DockRoot";
            this.WindowTitles.Add("TestApp - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UISplitterGripIndicator UISplitterGripIndicator
        {
            get
            {
                if ((this.mUISplitterGripIndicator == null))
                {
                    this.mUISplitterGripIndicator = new UISplitterGripIndicator(this);
                }
                return this.mUISplitterGripIndicator;
            }
        }
        #endregion
        
        #region Fields
        private UISplitterGripIndicator mUISplitterGripIndicator;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISplitterGripIndicator : WpfControl
    {
        
        public UISplitterGripIndicator(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "Indicator";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SplitterGrip";
            this.WindowTitles.Add("TestApp - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WpfTabList UIItemTabList
        {
            get
            {
                if ((this.mUIItemTabList == null))
                {
                    this.mUIItemTabList = new WpfTabList(this);
                    #region Search Criteria
                    this.mUIItemTabList.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemTabList.WindowTitles.Add("TestApp - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIItemTabList;
            }
        }
        #endregion
        
        #region Fields
        private WpfTabList mUIItemTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemMenu : WpfMenu
    {
        
        public UIItemMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.ClassName] = "Uia.ContextMenu";
            this.WindowTitles.Add("TestApp - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem UIBreakpointsMenuItem
        {
            get
            {
                if ((this.mUIBreakpointsMenuItem == null))
                {
                    this.mUIBreakpointsMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIBreakpointsMenuItem.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Breakpoints";
                    this.mUIBreakpointsMenuItem.WindowTitles.Add("TestApp - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIBreakpointsMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mUIBreakpointsMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITestAppMicrosoftVisuWindow1 : WinWindow
    {
        
        public UITestAppMicrosoftVisuWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "TestApp - Microsoft Visual Studio (Administrator)";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("TestApp - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2(this);
                }
                return this.mUIItemWindow2;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIItemWindow2 mUIItemWindow2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "VsUIHierarchyBaseWin";
            this.WindowTitles.Add("TestApp - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UISolutionExplorerClient UISolutionExplorerClient
        {
            get
            {
                if ((this.mUISolutionExplorerClient == null))
                {
                    this.mUISolutionExplorerClient = new UISolutionExplorerClient(this);
                }
                return this.mUISolutionExplorerClient;
            }
        }
        #endregion
        
        #region Fields
        private UISolutionExplorerClient mUISolutionExplorerClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISolutionExplorerClient : WinClient
    {
        
        public UISolutionExplorerClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("TestApp - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UISolutionExplorerWindow UISolutionExplorerWindow
        {
            get
            {
                if ((this.mUISolutionExplorerWindow == null))
                {
                    this.mUISolutionExplorerWindow = new UISolutionExplorerWindow(this);
                }
                return this.mUISolutionExplorerWindow;
            }
        }
        #endregion
        
        #region Fields
        private UISolutionExplorerWindow mUISolutionExplorerWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISolutionExplorerWindow : WinWindow
    {
        
        public UISolutionExplorerWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Solution Explorer";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "SysTreeView32";
            this.WindowTitles.Add("TestApp - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WpfControl UISolutionTestApp1projTreeItem
        {
            get
            {
                if ((this.mUISolutionTestApp1projTreeItem == null))
                {
                    this.mUISolutionTestApp1projTreeItem = new WpfControl(this);
                    #region Search Criteria
                    this.mUISolutionTestApp1projTreeItem.SearchProperties[WpfControl.PropertyNames.ControlType] = "TreeItem";
                    this.mUISolutionTestApp1projTreeItem.SearchProperties[WpfControl.PropertyNames.Name] = "Solution \'TestApp\' (1 project)";
                    this.mUISolutionTestApp1projTreeItem.WindowTitles.Add("TestApp - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUISolutionTestApp1projTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfControl mUISolutionTestApp1projTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("TestApp - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UIBreakpointsWindowToolBar UIBreakpointsWindowToolBar
        {
            get
            {
                if ((this.mUIBreakpointsWindowToolBar == null))
                {
                    this.mUIBreakpointsWindowToolBar = new UIBreakpointsWindowToolBar(this);
                }
                return this.mUIBreakpointsWindowToolBar;
            }
        }
        #endregion
        
        #region Fields
        private UIBreakpointsWindowToolBar mUIBreakpointsWindowToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIBreakpointsWindowToolBar : WpfToolBar
    {
        
        public UIBreakpointsWindowToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfToolBar.PropertyNames.Name] = "Breakpoints Window";
            this.WindowTitles.Add("TestApp - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton UIDeleteallbreakpointsToggleButton
        {
            get
            {
                if ((this.mUIDeleteallbreakpointsToggleButton == null))
                {
                    this.mUIDeleteallbreakpointsToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mUIDeleteallbreakpointsToggleButton.SearchProperties[WpfToggleButton.PropertyNames.Name] = "Delete all breakpoints matching the current search criteria";
                    this.mUIDeleteallbreakpointsToggleButton.WindowTitles.Add("TestApp - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIDeleteallbreakpointsToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mUIDeleteallbreakpointsToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("TestApp - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UIBreakpointsWindowToolBar1 UIBreakpointsWindowToolBar
        {
            get
            {
                if ((this.mUIBreakpointsWindowToolBar == null))
                {
                    this.mUIBreakpointsWindowToolBar = new UIBreakpointsWindowToolBar1(this);
                }
                return this.mUIBreakpointsWindowToolBar;
            }
        }
        #endregion
        
        #region Fields
        private UIBreakpointsWindowToolBar1 mUIBreakpointsWindowToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIBreakpointsWindowToolBar1 : WpfToolBar
    {
        
        public UIBreakpointsWindowToolBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfToolBar.PropertyNames.Name] = "Breakpoints Window";
            this.WindowTitles.Add("TestApp - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WpfToggleButton UIImportToggleButton
        {
            get
            {
                if ((this.mUIImportToggleButton == null))
                {
                    this.mUIImportToggleButton = new WpfToggleButton(this);
                    #region Search Criteria
                    this.mUIImportToggleButton.SearchProperties[WpfToggleButton.PropertyNames.Name] = "Import...";
                    this.mUIImportToggleButton.WindowTitles.Add("TestApp - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIImportToggleButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfToggleButton mUIImportToggleButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIMicrosoftVisualStudiWindow : WinWindow
    {
        
        public UIMicrosoftVisualStudiWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Microsoft Visual Studio";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Microsoft Visual Studio");
            #endregion
        }
        
        #region Properties
        public UIDonotshowthisdialogaWindow UIDonotshowthisdialogaWindow
        {
            get
            {
                if ((this.mUIDonotshowthisdialogaWindow == null))
                {
                    this.mUIDonotshowthisdialogaWindow = new UIDonotshowthisdialogaWindow(this);
                }
                return this.mUIDonotshowthisdialogaWindow;
            }
        }
        
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDonotshowthisdialogaWindow mUIDonotshowthisdialogaWindow;
        
        private UIYesWindow mUIYesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDonotshowthisdialogaWindow : WinWindow
    {
        
        public UIDonotshowthisdialogaWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1427";
            this.WindowTitles.Add("Microsoft Visual Studio");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIDonotshowthisdialogaCheckBox
        {
            get
            {
                if ((this.mUIDonotshowthisdialogaCheckBox == null))
                {
                    this.mUIDonotshowthisdialogaCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIDonotshowthisdialogaCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "Do not show this dialog again";
                    this.mUIDonotshowthisdialogaCheckBox.WindowTitles.Add("Microsoft Visual Studio");
                    #endregion
                }
                return this.mUIDonotshowthisdialogaCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIDonotshowthisdialogaCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Microsoft Visual Studio");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Microsoft Visual Studio");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITestAppDebuggingMicrWindow : WpfWindow
    {
        
        public UITestAppDebuggingMicrWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "TestApp (Debugging) - Microsoft Visual Studio (Administrator)";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UIMenuBarMenuBar UIMenuBarMenuBar
        {
            get
            {
                if ((this.mUIMenuBarMenuBar == null))
                {
                    this.mUIMenuBarMenuBar = new UIMenuBarMenuBar(this);
                }
                return this.mUIMenuBarMenuBar;
            }
        }
        
        public UIItemTabList1 UIItemTabList
        {
            get
            {
                if ((this.mUIItemTabList == null))
                {
                    this.mUIItemTabList = new UIItemTabList1(this);
                }
                return this.mUIItemTabList;
            }
        }
        
        public UIWpfTextViewHostCustom1 UIWpfTextViewHostCustom
        {
            get
            {
                if ((this.mUIWpfTextViewHostCustom == null))
                {
                    this.mUIWpfTextViewHostCustom = new UIWpfTextViewHostCustom1(this);
                }
                return this.mUIWpfTextViewHostCustom;
            }
        }
        
        public UIItemPane1 UIItemPane
        {
            get
            {
                if ((this.mUIItemPane == null))
                {
                    this.mUIItemPane = new UIItemPane1(this);
                }
                return this.mUIItemPane;
            }
        }
        
        public UIItemMenu1 UIItemMenu
        {
            get
            {
                if ((this.mUIItemMenu == null))
                {
                    this.mUIItemMenu = new UIItemMenu1(this);
                }
                return this.mUIItemMenu;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuBarMenuBar mUIMenuBarMenuBar;
        
        private UIItemTabList1 mUIItemTabList;
        
        private UIWpfTextViewHostCustom1 mUIWpfTextViewHostCustom;
        
        private UIItemPane1 mUIItemPane;
        
        private UIItemMenu1 mUIItemMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIMenuBarMenuBar : WpfControl
    {
        
        public UIMenuBarMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "MenuBar";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "MenuBar";
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UIToolsMenuItem UIToolsMenuItem
        {
            get
            {
                if ((this.mUIToolsMenuItem == null))
                {
                    this.mUIToolsMenuItem = new UIToolsMenuItem(this);
                }
                return this.mUIToolsMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIToolsMenuItem mUIToolsMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIToolsMenuItem : WpfMenuItem
    {
        
        public UIToolsMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Tools";
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem UIImportandExportSettiMenuItem
        {
            get
            {
                if ((this.mUIImportandExportSettiMenuItem == null))
                {
                    this.mUIImportandExportSettiMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIImportandExportSettiMenuItem.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Import and Export Settings...";
                    this.mUIImportandExportSettiMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIImportandExportSettiMenuItem.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIImportandExportSettiMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mUIImportandExportSettiMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemTabList1 : WpfTabList
    {
        
        public UIItemTabList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UIBreakpointsCustom1 UIBreakpointsCustom
        {
            get
            {
                if ((this.mUIBreakpointsCustom == null))
                {
                    this.mUIBreakpointsCustom = new UIBreakpointsCustom1(this);
                }
                return this.mUIBreakpointsCustom;
            }
        }
        
        public UIObjectsTreeCustom UIObjectsTreeCustom
        {
            get
            {
                if ((this.mUIObjectsTreeCustom == null))
                {
                    this.mUIObjectsTreeCustom = new UIObjectsTreeCustom(this);
                }
                return this.mUIObjectsTreeCustom;
            }
        }
        
        public UICommandQueueCustom UICommandQueueCustom
        {
            get
            {
                if ((this.mUICommandQueueCustom == null))
                {
                    this.mUICommandQueueCustom = new UICommandQueueCustom(this);
                }
                return this.mUICommandQueueCustom;
            }
        }
        
        public UIPropertiesViewCustom UIPropertiesViewCustom
        {
            get
            {
                if ((this.mUIPropertiesViewCustom == null))
                {
                    this.mUIPropertiesViewCustom = new UIPropertiesViewCustom(this);
                }
                return this.mUIPropertiesViewCustom;
            }
        }
        
        public UITraceViewCustom UITraceViewCustom
        {
            get
            {
                if ((this.mUITraceViewCustom == null))
                {
                    this.mUITraceViewCustom = new UITraceViewCustom(this);
                }
                return this.mUITraceViewCustom;
            }
        }
        
        public UIProblemsviewCustom UIProblemsviewCustom
        {
            get
            {
                if ((this.mUIProblemsviewCustom == null))
                {
                    this.mUIProblemsviewCustom = new UIProblemsviewCustom(this);
                }
                return this.mUIProblemsviewCustom;
            }
        }
        
        public UIImageViewCustom UIImageViewCustom
        {
            get
            {
                if ((this.mUIImageViewCustom == null))
                {
                    this.mUIImageViewCustom = new UIImageViewCustom(this);
                }
                return this.mUIImageViewCustom;
            }
        }
        
        public UIDataViewCustom UIDataViewCustom
        {
            get
            {
                if ((this.mUIDataViewCustom == null))
                {
                    this.mUIDataViewCustom = new UIDataViewCustom(this);
                }
                return this.mUIDataViewCustom;
            }
        }
        
        public UIWpfTextViewHostCustom UIWpfTextViewHostCustom
        {
            get
            {
                if ((this.mUIWpfTextViewHostCustom == null))
                {
                    this.mUIWpfTextViewHostCustom = new UIWpfTextViewHostCustom(this);
                }
                return this.mUIWpfTextViewHostCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIBreakpointsCustom1 mUIBreakpointsCustom;
        
        private UIObjectsTreeCustom mUIObjectsTreeCustom;
        
        private UICommandQueueCustom mUICommandQueueCustom;
        
        private UIPropertiesViewCustom mUIPropertiesViewCustom;
        
        private UITraceViewCustom mUITraceViewCustom;
        
        private UIProblemsviewCustom mUIProblemsviewCustom;
        
        private UIImageViewCustom mUIImageViewCustom;
        
        private UIDataViewCustom mUIDataViewCustom;
        
        private UIWpfTextViewHostCustom mUIWpfTextViewHostCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIBreakpointsCustom1 : WpfCustom
    {
        
        public UIBreakpointsCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.TabItemTextControl";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "TitleText";
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WpfText UIBreakpointsText
        {
            get
            {
                if ((this.mUIBreakpointsText == null))
                {
                    this.mUIBreakpointsText = new WpfText(this);
                    #region Search Criteria
                    this.mUIBreakpointsText.SearchProperties[WpfText.PropertyNames.Name] = "Breakpoints";
                    this.mUIBreakpointsText.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIBreakpointsText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIBreakpointsText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIObjectsTreeCustom : WpfCustom
    {
        
        public UIObjectsTreeCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.TabItemTextControl";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "TitleText";
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WpfText UIObjectsTreeText
        {
            get
            {
                if ((this.mUIObjectsTreeText == null))
                {
                    this.mUIObjectsTreeText = new WpfText(this);
                    #region Search Criteria
                    this.mUIObjectsTreeText.SearchProperties[WpfText.PropertyNames.Name] = "Objects Tree";
                    this.mUIObjectsTreeText.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIObjectsTreeText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIObjectsTreeText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICommandQueueCustom : WpfCustom
    {
        
        public UICommandQueueCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.TabItemTextControl";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "TitleText";
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WpfText UICommandQueueText
        {
            get
            {
                if ((this.mUICommandQueueText == null))
                {
                    this.mUICommandQueueText = new WpfText(this);
                    #region Search Criteria
                    this.mUICommandQueueText.SearchProperties[WpfText.PropertyNames.Name] = "Command Queue";
                    this.mUICommandQueueText.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUICommandQueueText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUICommandQueueText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIPropertiesViewCustom : WpfCustom
    {
        
        public UIPropertiesViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.TabItemTextControl";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "TitleText";
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WpfText UIPropertiesViewText
        {
            get
            {
                if ((this.mUIPropertiesViewText == null))
                {
                    this.mUIPropertiesViewText = new WpfText(this);
                    #region Search Criteria
                    this.mUIPropertiesViewText.SearchProperties[WpfText.PropertyNames.Name] = "Properties View";
                    this.mUIPropertiesViewText.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIPropertiesViewText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIPropertiesViewText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITraceViewCustom : WpfCustom
    {
        
        public UITraceViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.TabItemTextControl";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "TitleText";
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WpfText UITraceViewText
        {
            get
            {
                if ((this.mUITraceViewText == null))
                {
                    this.mUITraceViewText = new WpfText(this);
                    #region Search Criteria
                    this.mUITraceViewText.SearchProperties[WpfText.PropertyNames.Name] = "Trace View";
                    this.mUITraceViewText.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUITraceViewText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUITraceViewText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIProblemsviewCustom : WpfCustom
    {
        
        public UIProblemsviewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.TabItemTextControl";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "TitleText";
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WpfText UIProblemsviewText
        {
            get
            {
                if ((this.mUIProblemsviewText == null))
                {
                    this.mUIProblemsviewText = new WpfText(this);
                    #region Search Criteria
                    this.mUIProblemsviewText.SearchProperties[WpfText.PropertyNames.Name] = "Problems view";
                    this.mUIProblemsviewText.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIProblemsviewText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIProblemsviewText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIImageViewCustom : WpfCustom
    {
        
        public UIImageViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.TabItemTextControl";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "TitleText";
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WpfText UIImageViewText
        {
            get
            {
                if ((this.mUIImageViewText == null))
                {
                    this.mUIImageViewText = new WpfText(this);
                    #region Search Criteria
                    this.mUIImageViewText.SearchProperties[WpfText.PropertyNames.Name] = "Image View";
                    this.mUIImageViewText.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIImageViewText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIImageViewText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDataViewCustom : WpfCustom
    {
        
        public UIDataViewCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.TabItemTextControl";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "TitleText";
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WpfText UIDataViewText
        {
            get
            {
                if ((this.mUIDataViewText == null))
                {
                    this.mUIDataViewText = new WpfText(this);
                    #region Search Criteria
                    this.mUIDataViewText.SearchProperties[WpfText.PropertyNames.Name] = "Data View";
                    this.mUIDataViewText.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIDataViewText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIDataViewText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIWpfTextViewHostCustom : WpfCustom
    {
        
        public UIWpfTextViewHostCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = null;
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "WpfTextViewHost";
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WpfEdit UITextEditorEdit
        {
            get
            {
                if ((this.mUITextEditorEdit == null))
                {
                    this.mUITextEditorEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITextEditorEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "WpfTextView";
                    this.mUITextEditorEdit.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUITextEditorEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUITextEditorEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIWpfTextViewHostCustom1 : WpfCustom
    {
        
        public UIWpfTextViewHostCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = null;
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "WpfTextViewHost";
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UIGlyphMarginGridPane UIGlyphMarginGridPane
        {
            get
            {
                if ((this.mUIGlyphMarginGridPane == null))
                {
                    this.mUIGlyphMarginGridPane = new UIGlyphMarginGridPane(this);
                }
                return this.mUIGlyphMarginGridPane;
            }
        }
        
        public WpfEdit UITextEditorEdit
        {
            get
            {
                if ((this.mUITextEditorEdit == null))
                {
                    this.mUITextEditorEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITextEditorEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "WpfTextView";
                    this.mUITextEditorEdit.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUITextEditorEdit;
            }
        }
        #endregion
        
        #region Fields
        private UIGlyphMarginGridPane mUIGlyphMarginGridPane;
        
        private WpfEdit mUITextEditorEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIGlyphMarginGridPane : WpfPane
    {
        
        public UIGlyphMarginGridPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.GlyphMarginGrid";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "WpfEditorUIGlyphMarginGrid";
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WpfCustom UICurrentStatement54Custom
        {
            get
            {
                if ((this.mUICurrentStatement54Custom == null))
                {
                    this.mUICurrentStatement54Custom = new WpfCustom(this);
                    #region Search Criteria
                    this.mUICurrentStatement54Custom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.TextMarker";
                    this.mUICurrentStatement54Custom.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LineInformation;194";
                    this.mUICurrentStatement54Custom.SearchProperties[WpfControl.PropertyNames.Instance] = "2";
                    this.mUICurrentStatement54Custom.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUICurrentStatement54Custom;
            }
        }
        
        public WpfCustom UIBreakpointEnabled70Custom
        {
            get
            {
                if ((this.mUIBreakpointEnabled70Custom == null))
                {
                    this.mUIBreakpointEnabled70Custom = new WpfCustom(this);
                    #region Search Criteria
                    this.mUIBreakpointEnabled70Custom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.TextMarker";
                    this.mUIBreakpointEnabled70Custom.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LineInformation;196";
                    this.mUIBreakpointEnabled70Custom.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIBreakpointEnabled70Custom;
            }
        }
        
        public WpfCustom UICurrentStatement54Custom1
        {
            get
            {
                if ((this.mUICurrentStatement54Custom1 == null))
                {
                    this.mUICurrentStatement54Custom1 = new WpfCustom(this);
                    #region Search Criteria
                    this.mUICurrentStatement54Custom1.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.TextMarker";
                    this.mUICurrentStatement54Custom1.SearchProperties[WpfControl.PropertyNames.AutomationId] = "LineInformation;194";
                    this.mUICurrentStatement54Custom1.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUICurrentStatement54Custom1;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mUICurrentStatement54Custom;
        
        private WpfCustom mUIBreakpointEnabled70Custom;
        
        private WpfCustom mUICurrentStatement54Custom1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemPane1 : WpfPane
    {
        
        public UIItemPane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.DockRoot";
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UISplitterGripIndicator1 UISplitterGripIndicator
        {
            get
            {
                if ((this.mUISplitterGripIndicator == null))
                {
                    this.mUISplitterGripIndicator = new UISplitterGripIndicator1(this);
                }
                return this.mUISplitterGripIndicator;
            }
        }
        #endregion
        
        #region Fields
        private UISplitterGripIndicator1 mUISplitterGripIndicator;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISplitterGripIndicator1 : WpfControl
    {
        
        public UISplitterGripIndicator1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "Indicator";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SplitterGrip";
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WpfTabList UIItemTabList
        {
            get
            {
                if ((this.mUIItemTabList == null))
                {
                    this.mUIItemTabList = new WpfTabList(this);
                    #region Search Criteria
                    this.mUIItemTabList.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemTabList.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIItemTabList;
            }
        }
        #endregion
        
        #region Fields
        private WpfTabList mUIItemTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemMenu1 : WpfMenu
    {
        
        public UIItemMenu1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.ClassName] = "Uia.ContextMenu";
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem UICommandQueueMenuItem
        {
            get
            {
                if ((this.mUICommandQueueMenuItem == null))
                {
                    this.mUICommandQueueMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUICommandQueueMenuItem.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Command Queue";
                    this.mUICommandQueueMenuItem.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUICommandQueueMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mUICommandQueueMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIImportandExportSettiWindow : WinWindow
    {
        
        public UIImportandExportSettiWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Import and Export Settings Wizard";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Import and Export Settings Wizard");
            #endregion
        }
        
        #region Properties
        public UINextWindow UINextWindow
        {
            get
            {
                if ((this.mUINextWindow == null))
                {
                    this.mUINextWindow = new UINextWindow(this);
                }
                return this.mUINextWindow;
            }
        }
        
        public UINojustimportnewsettiWindow UINojustimportnewsettiWindow
        {
            get
            {
                if ((this.mUINojustimportnewsettiWindow == null))
                {
                    this.mUINojustimportnewsettiWindow = new UINojustimportnewsettiWindow(this);
                }
                return this.mUINojustimportnewsettiWindow;
            }
        }
        
        public UIBrowseWindow UIBrowseWindow
        {
            get
            {
                if ((this.mUIBrowseWindow == null))
                {
                    this.mUIBrowseWindow = new UIBrowseWindow(this);
                }
                return this.mUIBrowseWindow;
            }
        }
        
        public UIWhichcollectionofsetTree UIWhichcollectionofsetTree
        {
            get
            {
                if ((this.mUIWhichcollectionofsetTree == null))
                {
                    this.mUIWhichcollectionofsetTree = new UIWhichcollectionofsetTree(this);
                }
                return this.mUIWhichcollectionofsetTree;
            }
        }
        
        public UIFinishWindow UIFinishWindow
        {
            get
            {
                if ((this.mUIFinishWindow == null))
                {
                    this.mUIFinishWindow = new UIFinishWindow(this);
                }
                return this.mUIFinishWindow;
            }
        }
        
        public UICloseWindow UICloseWindow
        {
            get
            {
                if ((this.mUICloseWindow == null))
                {
                    this.mUICloseWindow = new UICloseWindow(this);
                }
                return this.mUICloseWindow;
            }
        }
        
        public UIImportselectedenviroWindow UIImportselectedenviroWindow
        {
            get
            {
                if ((this.mUIImportselectedenviroWindow == null))
                {
                    this.mUIImportselectedenviroWindow = new UIImportselectedenviroWindow(this);
                }
                return this.mUIImportselectedenviroWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINextWindow mUINextWindow;
        
        private UINojustimportnewsettiWindow mUINojustimportnewsettiWindow;
        
        private UIBrowseWindow mUIBrowseWindow;
        
        private UIWhichcollectionofsetTree mUIWhichcollectionofsetTree;
        
        private UIFinishWindow mUIFinishWindow;
        
        private UICloseWindow mUICloseWindow;
        
        private UIImportselectedenviroWindow mUIImportselectedenviroWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UINextWindow : WinWindow
    {
        
        public UINextWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnNext";
            this.WindowTitles.Add("Import and Export Settings Wizard");
            #endregion
        }
        
        #region Properties
        public WinButton UINextButton
        {
            get
            {
                if ((this.mUINextButton == null))
                {
                    this.mUINextButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINextButton.SearchProperties[WinButton.PropertyNames.Name] = "Next >";
                    this.mUINextButton.WindowTitles.Add("Import and Export Settings Wizard");
                    #endregion
                }
                return this.mUINextButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINextButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UINojustimportnewsettiWindow : WinWindow
    {
        
        public UINojustimportnewsettiWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "SaveCurrentPage.dontSaveRadio";
            this.WindowTitles.Add("Import and Export Settings Wizard");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UINojustimportnewsettiRadioButton
        {
            get
            {
                if ((this.mUINojustimportnewsettiRadioButton == null))
                {
                    this.mUINojustimportnewsettiRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUINojustimportnewsettiRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "No, just import new settings, overwriting my current settings";
                    this.mUINojustimportnewsettiRadioButton.WindowTitles.Add("Import and Export Settings Wizard");
                    #endregion
                }
                return this.mUINojustimportnewsettiRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUINojustimportnewsettiRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIBrowseWindow : WinWindow
    {
        
        public UIBrowseWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ImportChooseFilePage.browseButton";
            this.WindowTitles.Add("Import and Export Settings Wizard");
            #endregion
        }
        
        #region Properties
        public WinButton UIBrowseButton
        {
            get
            {
                if ((this.mUIBrowseButton == null))
                {
                    this.mUIBrowseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIBrowseButton.SearchProperties[WinButton.PropertyNames.Name] = "Browse...";
                    this.mUIBrowseButton.WindowTitles.Add("Import and Export Settings Wizard");
                    #endregion
                }
                return this.mUIBrowseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIBrowseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIWhichcollectionofsetTree : WinTree
    {
        
        public UIWhichcollectionofsetTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Which collection of settings do you want to import?";
            this.WindowTitles.Add("Import and Export Settings Wizard");
            #endregion
        }
        
        #region Properties
        public UIRecentfilesTreeItem UIRecentfilesTreeItem
        {
            get
            {
                if ((this.mUIRecentfilesTreeItem == null))
                {
                    this.mUIRecentfilesTreeItem = new UIRecentfilesTreeItem(this);
                }
                return this.mUIRecentfilesTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIRecentfilesTreeItem mUIRecentfilesTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIRecentfilesTreeItem : WinTreeItem
    {
        
        public UIRecentfilesTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Recent files";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Import and Export Settings Wizard");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIAppearence10vssettinTreeItem
        {
            get
            {
                if ((this.mUIAppearence10vssettinTreeItem == null))
                {
                    this.mUIAppearence10vssettinTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIAppearence10vssettinTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "appearence10.vssettings";
                    this.mUIAppearence10vssettinTreeItem.SearchProperties["Value"] = "1";
                    this.mUIAppearence10vssettinTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIAppearence10vssettinTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIAppearence10vssettinTreeItem.WindowTitles.Add("Import and Export Settings Wizard");
                    #endregion
                }
                return this.mUIAppearence10vssettinTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIAppearence10vssettinTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIFinishWindow : WinWindow
    {
        
        public UIFinishWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnFinish";
            this.WindowTitles.Add("Import and Export Settings Wizard");
            #endregion
        }
        
        #region Properties
        public WinButton UIFinishButton
        {
            get
            {
                if ((this.mUIFinishButton == null))
                {
                    this.mUIFinishButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIFinishButton.SearchProperties[WinButton.PropertyNames.Name] = "Finish";
                    this.mUIFinishButton.WindowTitles.Add("Import and Export Settings Wizard");
                    #endregion
                }
                return this.mUIFinishButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIFinishButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICloseWindow : WinWindow
    {
        
        public UICloseWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "_btnCancel";
            this.WindowTitles.Add("Import and Export Settings Wizard");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Import and Export Settings Wizard");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIImportselectedenviroWindow : WinWindow
    {
        
        public UIImportselectedenviroWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "MainPage.ImportRadioButton";
            this.WindowTitles.Add("Import and Export Settings Wizard");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UIImportselectedenviroRadioButton
        {
            get
            {
                if ((this.mUIImportselectedenviroRadioButton == null))
                {
                    this.mUIImportselectedenviroRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIImportselectedenviroRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Import selected environment settings";
                    this.mUIImportselectedenviroRadioButton.WindowTitles.Add("Import and Export Settings Wizard");
                    #endregion
                }
                return this.mUIImportselectedenviroRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUIImportselectedenviroRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIChooseaSettingsFileWindow : WinWindow
    {
        
        public UIChooseaSettingsFileWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Choose a Settings File";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Choose a Settings File");
            #endregion
        }
        
        #region Properties
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow3 mUIItemWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Choose a Settings File");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Choose a Settings File");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Choose a Settings File");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Choose a Settings File");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow4 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow4(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow12 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow12(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow4 mUIItemWindow;
        
        private UIItemWindow12 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow12 : WinWindow
    {
        
        public UIItemWindow12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITestAppDebuggingMicrWindow1 : WinWindow
    {
        
        public UITestAppDebuggingMicrWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "TestApp (Debugging) - Microsoft Visual Studio (Administrator)";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UIItemTabList2 UIItemTabList
        {
            get
            {
                if ((this.mUIItemTabList == null))
                {
                    this.mUIItemTabList = new UIItemTabList2(this);
                }
                return this.mUIItemTabList;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTabList2 mUIItemTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemTabList2 : WpfTabList
    {
        
        public UIItemTabList2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UICommandQueueTabPage UICommandQueueTabPage
        {
            get
            {
                if ((this.mUICommandQueueTabPage == null))
                {
                    this.mUICommandQueueTabPage = new UICommandQueueTabPage(this);
                }
                return this.mUICommandQueueTabPage;
            }
        }
        #endregion
        
        #region Fields
        private UICommandQueueTabPage mUICommandQueueTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICommandQueueTabPage : WpfTabPage
    {
        
        public UICommandQueueTabPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Command Queue";
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UICommandQueuePane UICommandQueuePane
        {
            get
            {
                if ((this.mUICommandQueuePane == null))
                {
                    this.mUICommandQueuePane = new UICommandQueuePane(this);
                }
                return this.mUICommandQueuePane;
            }
        }
        #endregion
        
        #region Fields
        private UICommandQueuePane mUICommandQueuePane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICommandQueuePane : WpfPane
    {
        
        public UICommandQueuePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ViewPresenter";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "ST:0:0:{28ee7980-b05c-4eeb-a18f-dabd2f7c5641}";
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UICommandQueuePane1 UICommandQueuePane1
        {
            get
            {
                if ((this.mUICommandQueuePane1 == null))
                {
                    this.mUICommandQueuePane1 = new UICommandQueuePane1(this);
                }
                return this.mUICommandQueuePane1;
            }
        }
        #endregion
        
        #region Fields
        private UICommandQueuePane1 mUICommandQueuePane1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICommandQueuePane1 : WpfControl
    {
        
        public UICommandQueuePane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ControlType] = "Pane";
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "GenericPane";
            this.SearchProperties[WpfControl.PropertyNames.Name] = "Command Queue";
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public UIComboBoxQueueWindow UIComboBoxQueueWindow
        {
            get
            {
                if ((this.mUIComboBoxQueueWindow == null))
                {
                    this.mUIComboBoxQueueWindow = new UIComboBoxQueueWindow(this);
                }
                return this.mUIComboBoxQueueWindow;
            }
        }
        
        public UIToolStrip1ToolBar UIToolStrip1ToolBar
        {
            get
            {
                if ((this.mUIToolStrip1ToolBar == null))
                {
                    this.mUIToolStrip1ToolBar = new UIToolStrip1ToolBar(this);
                }
                return this.mUIToolStrip1ToolBar;
            }
        }
        #endregion
        
        #region Fields
        private UIComboBoxQueueWindow mUIComboBoxQueueWindow;
        
        private UIToolStrip1ToolBar mUIToolStrip1ToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIComboBoxQueueWindow : WinWindow
    {
        
        public UIComboBoxQueueWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "comboBoxQueue";
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIComboBoxQueueComboBox
        {
            get
            {
                if ((this.mUIComboBoxQueueComboBox == null))
                {
                    this.mUIComboBoxQueueComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIComboBoxQueueComboBox.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIComboBoxQueueComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIComboBoxQueueComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIToolStrip1ToolBar : WinToolBar
    {
        
        public UIToolStrip1ToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "toolStrip1";
            this.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
            #endregion
        }
        
        #region Properties
        public WinButton UIUnifyQueuesButton
        {
            get
            {
                if ((this.mUIUnifyQueuesButton == null))
                {
                    this.mUIUnifyQueuesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIUnifyQueuesButton.SearchProperties[WinButton.PropertyNames.Name] = "Unify Queues";
                    this.mUIUnifyQueuesButton.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUIUnifyQueuesButton;
            }
        }
        
        public WinButton UISeperateQueuesButton
        {
            get
            {
                if ((this.mUISeperateQueuesButton == null))
                {
                    this.mUISeperateQueuesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISeperateQueuesButton.SearchProperties[WinButton.PropertyNames.Name] = "Seperate Queues";
                    this.mUISeperateQueuesButton.WindowTitles.Add("TestApp (Debugging) - Microsoft Visual Studio (Administrator)");
                    #endregion
                }
                return this.mUISeperateQueuesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIUnifyQueuesButton;
        
        private WinButton mUISeperateQueuesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow5 : WinWindow
    {
        
        public UIItemWindow5()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Active Files";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ToolWindowSelect";
            #endregion
        }
        
        #region Properties
        public WinControl UIActiveFilesDialog
        {
            get
            {
                if ((this.mUIActiveFilesDialog == null))
                {
                    this.mUIActiveFilesDialog = new WinControl(this);
                    #region Search Criteria
                    this.mUIActiveFilesDialog.SearchProperties[UITestControl.PropertyNames.Name] = "Active Files";
                    this.mUIActiveFilesDialog.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
                    #endregion
                }
                return this.mUIActiveFilesDialog;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIActiveFilesDialog;
        #endregion
    }
}
