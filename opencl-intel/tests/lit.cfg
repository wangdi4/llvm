# -*- Python -*-

import os

import lit.formats
import lit.util

# Configuration file for the 'lit' test runner.

# name: The name of this test suite.
config.name = 'OCLRTUnitTests'

# Subdirectories where lit will search for test executables
unittest_subdirs = [
    'backend_test_type',
    'cpu_device_test_type',
    'framework_test_type',
    'FrontendDriver_test_type',
    'task_executor_test_type',
    'openmp_test_type'
]

test_subdirs = getattr(config, 'test_subdirs', unittest_subdirs)

# testFormat: The test format to use to interpret tests.
cmake_build_type = getattr(config, 'cmake_build_type', "Debug")
config.test_format = lit.formats.GoogleTest(';'.join(test_subdirs), 'test_type')

# test_source_root: The root path where tests are located.
# test_exec_root: The root path where tests should be run.
opencl_tests_binary_dir = getattr(config, 'opencl_tests_binary_dir', None)
if opencl_tests_binary_dir is not None:
    config.test_exec_root = opencl_tests_binary_dir
    config.test_source_root = config.test_exec_root

# Check that the object root is known.
if config.test_exec_root is None:
    # Otherwise, we haven't loaded the site specific configuration (the user is
    # probably trying to run on a test file directly, and either the site
    # configuration hasn't been created by the build system, or we are in an
    # out-of-tree build situation).

    # Check for 'be_site_config' user parameter, and use that if available.
    site_cfg = lit_config.params.get('rt_lit_site_config', None)
    if site_cfg and os.path.exists(site_cfg):
        lit_config.load_config(config, site_cfg)
        raise SystemExit
    else:
        lit_config.fatal('Unable to find lit.site.cfg!')

# path to OpenCL runtime binaries
opencl_binary_dir = getattr(config, 'opencl_binary_dir', None)
if opencl_binary_dir is None:
  lit_config.fatal('opencl_binary_dir is not set!')

# put opencl_binary_dir into PATH
if config.operating_system == 'Windows':
  path_var = 'PATH'
else:
  path_var = 'LD_LIBRARY_PATH'

config.environment[path_var] = os.path.pathsep.join((
    opencl_binary_dir, config.environment[path_var]))

# Propagate 'ForceOCLCPUVersion' through the environment.
if 'ForceOCLCPUVersion' in os.environ:
    config.environment['ForceOCLCPUVersion'] = os.environ['ForceOCLCPUVersion']

build_fpga_emulator = getattr(config, 'build_fpga_emulator', 'OFF')
if build_fpga_emulator == 'ON':
    config.environment['CL_DEVICE_TYPE'] = 'fpga_fast_emu'
