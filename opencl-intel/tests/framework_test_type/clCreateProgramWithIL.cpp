#include <string>
#include <vector>
#include "CL/cl.h"
#include "test_utils.h"
#include "CL/cl_platform.h"

extern cl_device_type gDeviceType;

//Source for SPIRV
/*__kernel void test_hostptr(__global float *srcA, __global float *srcB, __global float *dst)
{
    int  tid = get_global_id(0);

    dst[tid] = srcA[tid] + srcB[tid];
}
*/
// The array was obtained by command : xxd -i <source file>.
unsigned char test_spv[] = {
  0x03, 0x02, 0x23, 0x07, 0x63, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00, 0x0a, 0x00, 0x00, 0x00,
  0x0f, 0x00, 0x03, 0x00, 0x06, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
  0x0b, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x70, 0x65, 0x6e,
  0x43, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x31, 0x32, 0x00, 0x00, 0x00,
  0x0e, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x09, 0x00, 0x04, 0x00, 0x00, 0x00, 0x5f, 0x5f, 0x73, 0x70,
  0x69, 0x72, 0x76, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e,
  0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x00, 0x00,
  0x05, 0x00, 0x06, 0x00, 0x09, 0x00, 0x00, 0x00, 0x74, 0x65, 0x73, 0x74,
  0x5f, 0x68, 0x6f, 0x73, 0x74, 0x70, 0x74, 0x72, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x04, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x73, 0x72, 0x63, 0x41,
  0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00,
  0x73, 0x72, 0x63, 0x42, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x03, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x64, 0x73, 0x74, 0x00, 0x47, 0x00, 0x04, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
  0x47, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00,
  0x15, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x16, 0x00, 0x03, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
  0x21, 0x00, 0x06, 0x00, 0x08, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x15, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x05, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x37, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x0a, 0x00, 0x00, 0x00, 0x37, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x0b, 0x00, 0x00, 0x00, 0x37, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x3d, 0x00, 0x06, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x51, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0x00, 0x04, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
  0x72, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
  0x11, 0x00, 0x00, 0x00, 0x46, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
  0x3d, 0x00, 0x06, 0x00, 0x06, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x72, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
  0x11, 0x00, 0x00, 0x00, 0x46, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00,
  0x16, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
  0x3d, 0x00, 0x06, 0x00, 0x06, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00,
  0x16, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x81, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x14, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x72, 0x00, 0x04, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
  0x46, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x05, 0x00,
  0x1a, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00
};
unsigned int test_spv_size = 696;

void CreateProgramWithIL()
{
    std::cout << "=============================================================" << std::endl;
    std::cout << "CreateProgramWithIL" << std::endl;
    std::cout << "=============================================================" << std::endl;

    cl_int iRet = CL_SUCCESS;
    cl_platform_id platform = 0;
    cl_device_id device = NULL;
    cl_context context = NULL;
    cl_program program = 0;

    iRet = clGetPlatformIDs(1, &platform, NULL);
    CheckException(L"clGetPlatformIDs", CL_SUCCESS, iRet);
    iRet = clGetDeviceIDs(platform, gDeviceType, 1, &device, NULL);
    CheckException(L"clGetDeviceIDs", CL_SUCCESS, iRet);

    size_t il_version_size = 14;
    std::string il_version(il_version_size, ' ');
    iRet  = clGetDeviceInfo(device, CL_DEVICE_IL_VERSION, il_version.size(), &il_version[0], NULL);
    CheckException(L"clGetDeviceInfo with CL_DEVICE_IL_VERSION", CL_SUCCESS, iRet);

    const cl_context_properties prop[3] = { CL_CONTEXT_PLATFORM, (cl_context_properties)platform, 0 };
    //context = clCreateContextFromType(prop, gDeviceType, NULL, NULL, &iRet);
    context = clCreateContext(prop, 1, &device, NULL, NULL, &iRet);
    CheckException(L"clCreateContextFromType", CL_SUCCESS, iRet);

    {//call clCreateProgramWithIL with invalid args
        iRet = CL_SUCCESS;
        program = clCreateProgramWithIL(NULL, test_spv, test_spv_size, &iRet);
        CheckException(L"clCreateProgramWithIL with invalid context", CL_INVALID_CONTEXT, iRet);

        iRet = CL_SUCCESS;
        program = clCreateProgramWithIL(context, NULL, test_spv_size, &iRet);
        CheckException(L"clCreateProgramWithIL with NULL IL buffer", CL_INVALID_VALUE, iRet);

        iRet = CL_SUCCESS;
        program = clCreateProgramWithIL(context, test_spv, 0, &iRet);
        CheckException(L"clCreateProgramWithIL with 0 length", CL_INVALID_VALUE, iRet);

        iRet = CL_SUCCESS;
        program = clCreateProgramWithIL(context, NULL, 0, &iRet);
        CheckException(L"clCreateProgramWithIL with NULL IL buffer and 0 length", CL_INVALID_VALUE, iRet);

        iRet = CL_SUCCESS;
        std::string wrong_IL("trash trash trash");
        program = clCreateProgramWithIL(context, &wrong_IL[0], wrong_IL.size(), &iRet);
        CheckException(L"clCreateProgramWithIL with wrong IL", CL_INVALID_VALUE, iRet);
    }

    program = clCreateProgramWithIL(context, test_spv, test_spv_size, &iRet);
    CheckException(L"clCreateProgramWithIL", CL_SUCCESS, iRet);

    iRet = clBuildProgram(program, 0, NULL, NULL, NULL, NULL);
    CheckException(L"clBuildProgram", CL_SUCCESS, iRet);

    cl_kernel kern = clCreateKernel(program, "test_hostptr", &iRet);
    CheckException(L"clCreateKernel", CL_SUCCESS, iRet);

    cl_command_queue queue = clCreateCommandQueue(context, device, 0, &iRet);
    CheckException(L"clCreateCommandQueue", CL_SUCCESS, iRet);

    size_t arg_size = 4;
    cl_mem arg = clCreateBuffer(context, 0, arg_size, NULL, &iRet);
    CheckException(L"clCreateBuffer", CL_SUCCESS, iRet);

    float pattern = 2;
    iRet = clEnqueueFillBuffer(queue, arg, &pattern, sizeof(pattern), 0, arg_size, 0, NULL, NULL);
    CheckException(L"clEnqueueFillBuffer", CL_SUCCESS, iRet);

    iRet = clFinish(queue);
    CheckException(L"clFinish", CL_SUCCESS, iRet);

    iRet = clSetKernelArg(kern, 0, sizeof(cl_mem), &arg);
    CheckException(L"clSetKernelArg", CL_SUCCESS, iRet);
    iRet = clSetKernelArg(kern, 1, sizeof(cl_mem), &arg);
    CheckException(L"clSetKernelArg", CL_SUCCESS, iRet);
    iRet = clSetKernelArg(kern, 2, sizeof(cl_mem), &arg);
    CheckException(L"clSetKernelArg", CL_SUCCESS, iRet);
    size_t gws = 1;
    iRet = clEnqueueNDRangeKernel(queue, kern, 1, NULL, &gws, NULL, 0, NULL, NULL);
    CheckException(L"clEnqueueNDRangeKernel", CL_SUCCESS, iRet);

    iRet = clFinish(queue);
    CheckException(L"clFinish", CL_SUCCESS, iRet);

    float* out = (float*)clEnqueueMapBuffer(queue, arg, CL_TRUE, CL_MAP_READ, 0, arg_size, 0, NULL, NULL, &iRet);
    CheckException(L"clEnqueueMapBuffer", CL_SUCCESS, iRet);

    iRet = clFinish(queue);
    CheckException(L"clFinish", CL_SUCCESS, iRet);

    assert(4 == *out && "Wrong kernel result.");

}
