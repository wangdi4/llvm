// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace AnalysingSystemTester
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    using System.IO;

    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class UIMap
    {
 

        /// <summary>
        /// OpenAnalyzeSession
        /// </summary>
        public void OpenAnalyzeSession()
        {
            #region Variable Declarations
            WpfMenuItem uINewAnalyzeSessionMenuItem = this.UIStartPageMicrosoftViWindow.UIMenuBarMenuBar.UICodeBuilderMenuItem.UIOpenCLApplicationAnaMenuItem.UINewAnalyzeSessionMenuItem;
            #endregion

            // Click 'Code-Builder' -> 'OpenCL Application Analysis' -> 'New Analyze Session...' menu item
            Mouse.Click(uINewAnalyzeSessionMenuItem, new Point(55, 13));
        }
        
        /// <summary>
        /// StartCallAllApiAnalyze - Use 'StartCallAllApiAnalyzeParams' to pass parameters into this method.
        /// </summary>
        // &&&& this method changed and not autot generated code!
        public void StartCallAllApiAnalyze()
        {
            // &&&& this method changed and not autot generated code!
       
            #region Variable Declarations
            WpfEdit uIText_applicationEdit = this.UIOpenCLAnalyzeSessionWindow.UIAppSettingCustom.UIApplicationSettingGroup.UIText_applicationEdit;
            WpfEdit uIText_working_directoEdit = this.UIOpenCLAnalyzeSessionWindow.UIAppSettingCustom.UIApplicationSettingGroup.UIText_working_directoEdit;
            WpfButton uILaunchButton = this.UIOpenCLAnalyzeSessionWindow.UILaunchButton;
            #endregion

            // Type 'C:\Users\ssirhan\Documents\Visual Studio 2012\Projects\CallAllApi\Debug\CallAllApi.exe' in 'text_application' text box
            //uIText_applicationEdit.Text = this.StartCallAllApiAnalyzeParams.UIText_applicationEditText;
            
            string outDir = Directory.GetCurrentDirectory();
            // get the path until TestResults (drop the rest)
            string workDir = outDir.Split(new string[] { "TestResults" }, StringSplitOptions.None)[0];
            uIText_applicationEdit.Text = workDir + "CallAllApi.exe";

            // Type 'C:\Users\ssirhan\Documents\Visual Studio 2012\Projects\CallAllApi\CallAllApi' in 'text_working_directory' text box
            //uIText_working_directoEdit.Text = this.StartCallAllApiAnalyzeParams.UIText_working_directoEditText;
            uIText_working_directoEdit.Text = workDir;

            // Click 'Launch' button
            Mouse.Click(uILaunchButton, new Point(62, 5));
        }
        
        /// <summary>
        /// WaitUntilCallAllApiFinish - Use 'WaitUntilCallAllApiFinishParams' to pass parameters into this method.
        /// </summary>
        public void WaitUntilCallAllApiFinish()
        {
            #region Variable Declarations
            WinWindow uICUsersssirhanDocumenWindow2 = this.UICUsersssirhanDocumenWindow2;
            #endregion

            // wait
            uICUsersssirhanDocumenWindow2.WaitForControlNotExist();
        }
        
        #region Properties
        
        public virtual StartCallAllApiAnalyzeParams StartCallAllApiAnalyzeParams
        {
            get
            {
                if ((this.mStartCallAllApiAnalyzeParams == null))
                {
                    this.mStartCallAllApiAnalyzeParams = new StartCallAllApiAnalyzeParams();
                }
                return this.mStartCallAllApiAnalyzeParams;
            }
        }
        
        public virtual WaitUntilCallAllApiFinishParams WaitUntilCallAllApiFinishParams
        {
            get
            {
                if ((this.mWaitUntilCallAllApiFinishParams == null))
                {
                    this.mWaitUntilCallAllApiFinishParams = new WaitUntilCallAllApiFinishParams();
                }
                return this.mWaitUntilCallAllApiFinishParams;
            }
        }
        
        public UIOpenCLAnalyzeSessionWindow UIOpenCLAnalyzeSessionWindow
        {
            get
            {
                if ((this.mUIOpenCLAnalyzeSessionWindow == null))
                {
                    this.mUIOpenCLAnalyzeSessionWindow = new UIOpenCLAnalyzeSessionWindow();
                }
                return this.mUIOpenCLAnalyzeSessionWindow;
            }
        }
        
        public UIStartPageMicrosoftViWindow UIStartPageMicrosoftViWindow
        {
            get
            {
                if ((this.mUIStartPageMicrosoftViWindow == null))
                {
                    this.mUIStartPageMicrosoftViWindow = new UIStartPageMicrosoftViWindow();
                }
                return this.mUIStartPageMicrosoftViWindow;
            }
        }
        
        public UIStartWindow UIStartWindow
        {
            get
            {
                if ((this.mUIStartWindow == null))
                {
                    this.mUIStartWindow = new UIStartWindow();
                }
                return this.mUIStartWindow;
            }
        }
        
        public UIStartmenuWindow UIStartmenuWindow
        {
            get
            {
                if ((this.mUIStartmenuWindow == null))
                {
                    this.mUIStartmenuWindow = new UIStartmenuWindow();
                }
                return this.mUIStartmenuWindow;
            }
        }
                
        
        public UICUsersssirhanDocumenWindow1 UICUsersssirhanDocumenWindow1
        {
            get
            {
                if ((this.mUICUsersssirhanDocumenWindow1 == null))
                {
                    this.mUICUsersssirhanDocumenWindow1 = new UICUsersssirhanDocumenWindow1();
                }
                return this.mUICUsersssirhanDocumenWindow1;
            }
        }
        
        public UICUsersssirhanDocumenWindow2 UICUsersssirhanDocumenWindow2
        {
            get
            {
                if ((this.mUICUsersssirhanDocumenWindow2 == null))
                {
                    this.mUICUsersssirhanDocumenWindow2 = new UICUsersssirhanDocumenWindow2();
                }
                return this.mUICUsersssirhanDocumenWindow2;
            }
        }
        #endregion
        
        #region Fields        
      
        private StartCallAllApiAnalyzeParams mStartCallAllApiAnalyzeParams;
        
        private WaitUntilCallAllApiFinishParams mWaitUntilCallAllApiFinishParams;
                
        private UIOpenCLAnalyzeSessionWindow mUIOpenCLAnalyzeSessionWindow;
        
        private UIStartPageMicrosoftViWindow mUIStartPageMicrosoftViWindow;
       
        private UIStartWindow mUIStartWindow;
        
        private UIStartmenuWindow mUIStartmenuWindow;
        
        private UICUsersssirhanDocumenWindow1 mUICUsersssirhanDocumenWindow1;
        
        private UICUsersssirhanDocumenWindow2 mUICUsersssirhanDocumenWindow2;
        #endregion
    }
        
    /// <summary>
    /// Parameters to be passed into 'StartCallAllApiAnalyze'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class StartCallAllApiAnalyzeParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'C:\Users\ssirhan\Documents\Visual Studio 2012\Projects\CallAllApi\Debug\CallAllApi.exe' in 'text_application' text box
        /// </summary>
        public string UIText_applicationEditText = "C:\\Users\\ssirhan\\Documents\\Visual Studio 2012\\Projects\\CallAllApi\\Debug\\CallAllAp" +
            "p.exe";
        
        /// <summary>
        /// Type 'C:\Users\ssirhan\Documents\Visual Studio 2012\Projects\CallAllApi\CallAllApi' in 'text_working_directory' text box
        /// </summary>
        public string UIText_working_directoEditText = "C:\\Users\\ssirhan\\Documents\\Visual Studio 2012\\Projects\\CallAllApi\\CallAllApi";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'WaitUntilCallAllApiFinish'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class WaitUntilCallAllApiFinishParams
    {
        
        #region Fields
        /// <summary>
        /// Restore window 'C:\Users\ssirhan\Documents\Visual Studio 2012\Proj...'
        /// </summary>
        public bool UICUsersssirhanDocumenWindow2Restored = true;
        #endregion
    }
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIOpenCLAnalyzeSessionWindow : WpfWindow
    {
        
        public UIOpenCLAnalyzeSessionWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "OpenCL Analyze Session";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("OpenCL Analyze Session");
            #endregion
        }
        
        #region Properties
        public UIAppSettingCustom UIAppSettingCustom
        {
            get
            {
                if ((this.mUIAppSettingCustom == null))
                {
                    this.mUIAppSettingCustom = new UIAppSettingCustom(this);
                }
                return this.mUIAppSettingCustom;
            }
        }
        
        public WpfButton UILaunchButton
        {
            get
            {
                if ((this.mUILaunchButton == null))
                {
                    this.mUILaunchButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUILaunchButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "launch";
                    this.mUILaunchButton.WindowTitles.Add("OpenCL Analyze Session");
                    #endregion
                }
                return this.mUILaunchButton;
            }
        }
        #endregion
        
        #region Fields
        private UIAppSettingCustom mUIAppSettingCustom;
        
        private WpfButton mUILaunchButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIAppSettingCustom : WpfCustom
    {
        
        public UIAppSettingCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "Uia.AppSetting";
            this.SearchProperties["AutomationId"] = "appSetting";
            this.WindowTitles.Add("OpenCL Analyze Session");
            #endregion
        }
        
        #region Properties
        public UIApplicationSettingGroup UIApplicationSettingGroup
        {
            get
            {
                if ((this.mUIApplicationSettingGroup == null))
                {
                    this.mUIApplicationSettingGroup = new UIApplicationSettingGroup(this);
                }
                return this.mUIApplicationSettingGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIApplicationSettingGroup mUIApplicationSettingGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIApplicationSettingGroup : WpfGroup
    {
        
        public UIApplicationSettingGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfGroup.PropertyNames.Name] = "Application Setting";
            this.WindowTitles.Add("OpenCL Analyze Session");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIText_applicationEdit
        {
            get
            {
                if ((this.mUIText_applicationEdit == null))
                {
                    this.mUIText_applicationEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIText_applicationEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "text_application";
                    this.mUIText_applicationEdit.WindowTitles.Add("OpenCL Analyze Session");
                    #endregion
                }
                return this.mUIText_applicationEdit;
            }
        }
        
        public WpfEdit UIText_working_directoEdit
        {
            get
            {
                if ((this.mUIText_working_directoEdit == null))
                {
                    this.mUIText_working_directoEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIText_working_directoEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "text_working_directory";
                    this.mUIText_working_directoEdit.WindowTitles.Add("OpenCL Analyze Session");
                    #endregion
                }
                return this.mUIText_working_directoEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIText_applicationEdit;
        
        private WpfEdit mUIText_working_directoEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIStartPageMicrosoftViWindow : WpfWindow
    {
        
        public UIStartPageMicrosoftViWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Start Page - Microsoft Visual Studio (Administrator) - Experimental Instance";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Start Page - Microsoft Visual Studio (Administrator) - Experimental Instance");
            #endregion
        }
        
        #region Properties
        public UIMenuBarMenuBar UIMenuBarMenuBar
        {
            get
            {
                if ((this.mUIMenuBarMenuBar == null))
                {
                    this.mUIMenuBarMenuBar = new UIMenuBarMenuBar(this);
                }
                return this.mUIMenuBarMenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuBarMenuBar mUIMenuBarMenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIMenuBarMenuBar : WpfControl
    {
        
        public UIMenuBarMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "MenuBar";
            this.SearchProperties["AutomationId"] = "MenuBar";
            this.WindowTitles.Add("Start Page - Microsoft Visual Studio (Administrator) - Experimental Instance");
            #endregion
        }
        
        #region Properties
        public UICodeBuilderMenuItem UICodeBuilderMenuItem
        {
            get
            {
                if ((this.mUICodeBuilderMenuItem == null))
                {
                    this.mUICodeBuilderMenuItem = new UICodeBuilderMenuItem(this);
                }
                return this.mUICodeBuilderMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UICodeBuilderMenuItem mUICodeBuilderMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICodeBuilderMenuItem : WpfMenuItem
    {
        
        public UICodeBuilderMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Code-Builder";
            this.WindowTitles.Add("Start Page - Microsoft Visual Studio (Administrator) - Experimental Instance");
            #endregion
        }
        
        #region Properties
        public UIOpenCLApplicationAnaMenuItem UIOpenCLApplicationAnaMenuItem
        {
            get
            {
                if ((this.mUIOpenCLApplicationAnaMenuItem == null))
                {
                    this.mUIOpenCLApplicationAnaMenuItem = new UIOpenCLApplicationAnaMenuItem(this);
                }
                return this.mUIOpenCLApplicationAnaMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIOpenCLApplicationAnaMenuItem mUIOpenCLApplicationAnaMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIOpenCLApplicationAnaMenuItem : WpfMenuItem
    {
        
        public UIOpenCLApplicationAnaMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenuItem.PropertyNames.Name] = "OpenCL Application Analysis";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Start Page - Microsoft Visual Studio (Administrator) - Experimental Instance");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem UINewAnalyzeSessionMenuItem
        {
            get
            {
                if ((this.mUINewAnalyzeSessionMenuItem == null))
                {
                    this.mUINewAnalyzeSessionMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUINewAnalyzeSessionMenuItem.SearchProperties[WpfMenuItem.PropertyNames.Name] = "New Analyze Session...";
                    this.mUINewAnalyzeSessionMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewAnalyzeSessionMenuItem.WindowTitles.Add("Start Page - Microsoft Visual Studio (Administrator) - Experimental Instance");
                    #endregion
                }
                return this.mUINewAnalyzeSessionMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mUINewAnalyzeSessionMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIStartWindow : WinWindow
    {
        
        public UIStartWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Start";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("Start");
            #endregion
        }
        
        #region Properties
        public WinButton UIStartButton
        {
            get
            {
                if ((this.mUIStartButton == null))
                {
                    this.mUIStartButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIStartButton.SearchProperties[WinButton.PropertyNames.Name] = "Start";
                    this.mUIStartButton.WindowTitles.Add("Start");
                    #endregion
                }
                return this.mUIStartButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIStartButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIStartmenuWindow : WinWindow
    {
        
        public UIStartmenuWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Start menu";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DV2ControlHost";
            this.WindowTitles.Add("Start menu");
            #endregion
        }
        
        #region Properties
        public UISearchprogramsandfilPane UISearchprogramsandfilPane
        {
            get
            {
                if ((this.mUISearchprogramsandfilPane == null))
                {
                    this.mUISearchprogramsandfilPane = new UISearchprogramsandfilPane(this);
                }
                return this.mUISearchprogramsandfilPane;
            }
        }
        
        public UIProgramsGroup UIProgramsGroup
        {
            get
            {
                if ((this.mUIProgramsGroup == null))
                {
                    this.mUIProgramsGroup = new UIProgramsGroup(this);
                }
                return this.mUIProgramsGroup;
            }
        }
        #endregion
        
        #region Fields
        private UISearchprogramsandfilPane mUISearchprogramsandfilPane;
        
        private UIProgramsGroup mUIProgramsGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISearchprogramsandfilPane : WinPane
    {
        
        public UISearchprogramsandfilPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = " Search programs and files";
            this.WindowTitles.Add("Start menu");
            #endregion
        }
        
        #region Properties
        public WinEdit UISearchBoxEdit
        {
            get
            {
                if ((this.mUISearchBoxEdit == null))
                {
                    this.mUISearchBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUISearchBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Search Box";
                    this.mUISearchBoxEdit.WindowTitles.Add("Start menu");
                    #endregion
                }
                return this.mUISearchBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUISearchBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIProgramsGroup : WinGroup
    {
        
        public UIProgramsGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Programs";
            this.WindowTitles.Add("Start menu");
            #endregion
        }
        
        #region Properties
        public WinListItem UINotepadListItem
        {
            get
            {
                if ((this.mUINotepadListItem == null))
                {
                    this.mUINotepadListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUINotepadListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Notepad++";
                    this.mUINotepadListItem.WindowTitles.Add("Start menu");
                    #endregion
                }
                return this.mUINotepadListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUINotepadListItem;
        #endregion
    }
        
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UINWindow : WinWindow
    {
        
        public UINWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "N";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Scintilla";
            this.WindowTitles.Add("*new  2 - Notepad++");
            #endregion
        }
        
        #region Properties
        public WinClient UINClient
        {
            get
            {
                if ((this.mUINClient == null))
                {
                    this.mUINClient = new WinClient(this);
                    #region Search Criteria
                    this.mUINClient.WindowTitles.Add("*new  2 - Notepad++");
                    #endregion
                }
                return this.mUINClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUINClient;
        #endregion
    }
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICUsersssirhanDocumenWindow1 : WinWindow
    {
        
        public UICUsersssirhanDocumenWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "C:\\Users\\ssirhan\\Documents\\Code Builder Sessions\\" +
                "ft Visual Studio (Administrator) - Experimental Instance";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("C:\\Users\\ssirhan\\Documents\\Code Builder Sessions\\" +
                    "ft Visual Studio (Administrator) - Experimental Instance");
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICUsersssirhanDocumenWindow2 : WinWindow
    {
        
        public UICUsersssirhanDocumenWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "C:\\Users\\ssirhan\\Documents\\Visual Studio 2012\\Projects\\CallAllApi\\Debug\\CallAllAp" +
                "p.exe";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ConsoleWindowClass";
            this.WindowTitles.Add("C:\\Users\\ssirhan\\Documents\\Visual Studio 2012\\Projects\\CallAllApi\\Debug\\CallAllAp" +
                    "p.exe");
            #endregion
        }
    }
}
