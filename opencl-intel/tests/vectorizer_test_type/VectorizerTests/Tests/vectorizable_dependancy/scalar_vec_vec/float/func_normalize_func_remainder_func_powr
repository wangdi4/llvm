/*
 * Part of the tests that check different LLVM instructions on different argument
 * types and different argument sources.
 *
 * Tests the LLVM vectorizable powr function appearing after the vectorizable
 * remainder function when they both receives as input 2 float arguments produced
 * by previous (non vectorizable) normalize function that receives constants and
 * function arguments as input and therfore will have scalar value.
 *
 * @param in
 * 		The input array.
 * @param out
 * 		The output array.
 *
 */
__kernel void
func_normalize_func_remainder_func_powr ( __global const float *in,
		__global float4 *out, __global const float floatArg1)
{
	int gid = get_global_id(0);
	float arg1 = normalize(floatArg1);
	float arg2 = normalize(FLOAT1);
	float arg3 = remainder(arg1, arg2);
	float arg4 = powr(arg1, arg2);
	out[gid].x = arg1;
	out[gid].y = arg2;
	out[gid].z = arg3;
	out[gid].w = arg4;
}
