/*
 * Part of the control flow tests that check vectorization of control flow statements.
 *
 * Tests the LLVM switch instruction after the while statement when both their conditions
 * depend on int and only the switch depends on thread id.
 *
 * @param in
 * 		The input array.
 * @param out
 * 		The output array.
 *
 */
__kernel void
do_while_switch ( __global const float *in,
		__global float *out, __global const int4 int4Arg1)
{
	int gid = get_global_id(0);

	int tmp1 = 0;


	switch(gid / 2) {

	case 0:
		tmp1 = 17;
		// fal through


	default:
		tmp1 = abs(tmp1 + 12);
		out[gid] = in[gid] + tmp1;
		break;

	}

	int tmp2 = in[0];

	tmp1 = tmp1 - 545;
	tmp1 = abs_diff(tmp1, tmp2);


	int i = 0;

	do {

		tmp2 = tmp2 / 3;
		tmp1--;
		i++;

	} while ((tmp2 % 3 == 0 ) && (i < 174));

	out[gid] += tmp2 + tmp1;


}
