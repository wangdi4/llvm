/*
 * Part of the control flow tests that check vectorization of control flow statements.
 *
 * Tests the while statement after the if else statement statement when both their conditions
 * depend on ushort and both of them depend on thread id.
 *
 * @param in
 * 		The input array.
 * @param out
 * 		The output array.
 *
 */
__kernel void
if_else_while ( __global const float *in,
		__global float *out)
{
	int gid = get_global_id(0);

	ushort tmp1 = in[gid];
	tmp1 = (ushort)(in[0]) <= (ushort)(in[gid] * 7 + 1) ? 5 : tmp1;

	tmp1 = rhadd(tmp1, (ushort)(tmp1 + 112)) + 124;

	if (tmp1 <= 1024) {
		out[gid] = 124.4347;
		tmp1 = tmp1 - gid;
		tmp1 = tmp1 * 8;

	} else {

		out[gid] = 4765.755;
		tmp1++;
		tmp1 = mad_hi((ushort)in[gid], tmp1, (ushort)gid);
		tmp1 = tmp1 * 2;

	}

	int i = 0;

	while ((tmp1 % 2 == 0) && (i < 65000)){

		tmp1 / 2;
		i++;
	}

	out[gid] += tmp1 + i;


}
