/*
 * Part of the control flow tests that check vectorization of control flow statements.
 * Tests the LLVM br caused by while statement when its condition depends on float and doesn't
 * depend on thread id.
 *
 * @param in
 *     The input array.
 * @param out
 *     The output array.
 *
 */
__kernel void
test3 ( __global const float *in,
    __global float *out)
{
  int gid = get_global_id(0);
  float array[256];

  for (int i = 0; i < 256; i++) {
    array[i] = i;
  }

  array[17] = in[gid];

  for (int i = 0; i < 256; i++) {
    array[i] = array[i] * 17 + 8 * 90;
  }

  // override the thread dependant instruction - style 3
  for (int i = 0; i < 256; i++) {
    int tmp = i % 4;
    array[i] = i * 12 - in[tmp];
  }

  // while loop should be vectorized
  int j = 0;
  while ((array[j] != 0) && (j < 256)) {

    if ( ((int)array[j]) % 3 == 0) {
      out[gid] += in[gid] + j;
      out[gid] += cos(out[gid]);
    }
    j = min(256, j + (int)abs((int)(array[j])) + 1);
  }

}
