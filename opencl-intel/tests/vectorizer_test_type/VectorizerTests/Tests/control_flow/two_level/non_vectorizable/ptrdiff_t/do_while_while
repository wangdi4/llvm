/*
 * Part of the control flow tests that check vectorization of control flow statements.
 *
 * Tests the while statement inseide the do while when both their conditions
 * depend on a pointer and they both depend on thread id.
 *
 * @param in
 *     The input array.
 * @param out
 *     The output array.
 *
 */
__kernel void
do_while_while (  __global const float *in,
    __global float *out, __global const ptrdiff_t intPtrArg1)
{

  int gid = get_global_id(0);

    ptrdiff_t tmp1 = intPtrArg1 + abs((int)in[gid]) + gid;
    ptrdiff_t tmp2 = intPtrArg1 - gid - in[0];

    int i = 0;

    do {

      int j = 0;
      while ((tmp1 > gid) && (j < 1024)) {

        tmp1 = tmp1--;
        j++;
      }

      out[gid] += i * tmp1;
      tmp1 = tmp1 - gid;

      i++;

    } while ((tmp1 > tmp2) && (i < 2048));

    out[gid] = tmp1 * tmp2;
}
