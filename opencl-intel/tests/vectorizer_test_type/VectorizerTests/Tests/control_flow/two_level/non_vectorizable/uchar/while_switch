/*
 * Part of the control flow tests that check vectorization of control flow statements.
 *
 * Tests the LLVM switch instruction inseide the while statement when both their conditions
 * depend on uchar and only the while statement depends on thread id.
 *
 * @param in
 *     The input array.
 * @param out
 *     The output array.
 *
 */
__kernel void
while_switch (  __global const float *in,
    __global float *out, __global const uchar ucharArg1)
{
  int gid = get_global_id(0);

  int i = 0;

  uchar tmp1 = in[gid];
  float tmp2 = 0;

  while ((tmp1 % 2 == 0) && (i < 2048)) {

    tmp1 = tmp1 / 2;
    i++;

    // i will always be positive here
    switch (ucharArg1 / i) {

    case 0:
      tmp2 += in[gid];
      // fall through

    case 1:
      tmp2 = clamp(tmp2, FLOAT1, FLOAT1 + (float)ucharArg1 + (tmp2 * tmp2));
      // fall through

    case 2:
      tmp2 = mix(tmp2, gid * tmp2, radians(tmp2));
      break;

    case 3:
      tmp2 = smoothstep(FLOAT2, tmp2 * FLOAT1,tmp2);
      // fall through

    case 4:
      tmp2 -= normalize(tmp2);
      // fall through


    default:
      tmp2 = fast_distance(tmp2 * gid, in[gid]);
      break;

    }

  }

    out[gid] = tmp2 + in[gid];

}
