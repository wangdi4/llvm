/*
 * Part of the control flow tests that check vectorization of control flow statements.
 *
 * Tests the if-else and while statements inseide the if-else statement when their conditions
 * depend on double and none of their statements depends on thread id.
 *
 * @param in
 *     The input array.
 * @param out
 *     The output array.
 *
 */
__kernel void
if_else_if_else_while ( __global const float *in,
    __global float *out)
{
  int gid = get_global_id(0);

  char4 tmp1 = (char4)SHORT2_VEC1;

  tmp1 = tmp1 * tmp1 - (char4)3;

  tmp1.x = rotate(tmp1.x * tmp1.y - tmp1.z, tmp1.w * (char)in[2]);
  tmp1 = rotate(tmp1, tmp1 * (char4)(CHAR1));

  if (tmp1.x < tmp1.y) {

    if (tmp1.z >= tmp1.w) {

      out[gid] = 5;

    } else {

      out[gid] = 50;

    }

  } else {


    out[gid] = 500;

    int i = 0;

    while ((tmp1.x + tmp1.y <= tmp1.z + tmp1.w) && ( i < 1000)) {
      tmp1.x++;
      tmp1.x = tmp1.x << 2;
      tmp1.z--;
      tmp1.z = tmp1.z >> 2;
      i++;

    }

  }

  out[gid] = in[gid] * tmp1.x - tmp1.y + sub_sat(tmp1.w, tmp1.z);
}
