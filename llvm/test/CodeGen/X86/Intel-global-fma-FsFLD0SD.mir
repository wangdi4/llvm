# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc %s -mtriple=x86_64-- -fp-contract=fast -enable-unsafe-fp-math -filetype=obj -o %t.o
# RUN: llvm-objdump -d %t.o | FileCheck %s

--- |
  ; ModuleID = 't.ll'
  source_filename = "t.c"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-unknown-unknown"

  @a1 = common dso_local local_unnamed_addr global double 0.000000e+00, align 8
  @b1 = common dso_local local_unnamed_addr global double 0.000000e+00, align 8
  @c1 = common dso_local local_unnamed_addr global double 0.000000e+00, align 8
  @d1 = common dso_local local_unnamed_addr global double 0.000000e+00, align 8

  define dso_local double @foo4() local_unnamed_addr #1 {
  entry:
    %0 = load double, double* @a1, align 8, !tbaa !2
    %1 = load double, double* @b1, align 8, !tbaa !2
    %2 = load double, double* @c1, align 8, !tbaa !2
    %mul = fmul fast double %2, %1
    %3 = load double, double* @d1, align 8, !tbaa !2
    %mul1 = fmul fast double %mul, %3
    %sub = fsub fast double %0, %mul1
    ret double %sub
  }

  attributes #1 = { norecurse nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512f,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="true" "use-soft-float"="false" }

  !llvm.module.flags = !{!0}
  !llvm.ident = !{!1}

  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{!"Intel(R) oneAPI DPC++ Compiler 2021.1 (YYYY.x.0.MMDD)"}
  !2 = !{!3, !3, i64 0}
  !3 = !{!"float", !4, i64 0}
  !4 = !{!"omnipotent char", !5, i64 0}
  !5 = !{!"Simple C/C++ TBAA"}

...
---
name:            foo4
alignment:       16
tracksRegLiveness: true
registers:
  - { id: 0, class: vr128x }
  - { id: 1, class: vr128x }
  - { id: 2, class: vr128x }
  - { id: 3, class: vr128x }
frameInfo:
  maxAlignment:    1
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    ; CHECK: foo4
    ; CHECK: vpxord {{%[x-z]mm[1][6-9]}}, {{%[x-z]mm[1][6-9]}}, {{%[x-z]mm[1][6-9]}}

    liveins: $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $xmm5, $xmm6, $xmm7, $xmm8, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15

    %0:vr128x = COPY $xmm0
    %1:vr128x = COPY $xmm1
    %2:vr128x = COPY $xmm2
    %3:vr128x = COPY $xmm3
    %4:vr128x = COPY $xmm4
    %5:vr128x = COPY $xmm5
    %6:vr128x = COPY $xmm6
    %7:vr128x = COPY $xmm7
    %8:vr128x = COPY $xmm8
    %9:vr128x = COPY $xmm9
    %10:vr128x = COPY $xmm10
    %11:vr128x = COPY $xmm11
    %12:vr128x = COPY $xmm12
    %13:vr128x = COPY $xmm13
    %14:vr128x = COPY $xmm14
    %15:vr128x = COPY $xmm15

    ; load data
    %40:fr64x = VMOVSDZrm_alt $rip, 1, $noreg, @a1, $noreg :: (dereferenceable load 8 from @a1, !tbaa !2)
    %41:fr64x = VMOVSDZrm_alt $rip, 1, $noreg, @b1, $noreg :: (dereferenceable load 8 from @b1, !tbaa !2)
    %42:fr64x = VMOVSDZrm_alt $rip, 1, $noreg, @c1, $noreg :: (dereferenceable load 8 from @c1, !tbaa !2)
    %43:fr64x = VMOVSDZrm_alt $rip, 1, $noreg, @d1, $noreg :: (dereferenceable load 8 from @d1, !tbaa !2)

    ; d = (a1-(b1-c1))*d1
    ; register shoule be allocated from xmm16
    %44:fr64x = nnan ninf nsz arcp contract afn reassoc nofpexcept VMULSDZrr %41:fr64x, %42:fr64x, implicit $mxcsr
    %45:fr64x = nnan ninf nsz arcp contract afn reassoc nofpexcept VSUBSDZrr %40:fr64x, %44:fr64x, implicit $mxcsr
    %46:fr64x = nnan ninf nsz arcp contract afn reassoc nofpexcept VMULSDZrr %45:fr64x, %43:fr64x, implicit $mxcsr

    %20:vr128x = nofpexcept VPADDDZ128rr %1, %0, implicit $mxcsr
    %21:vr128x = nofpexcept VPADDDZ128rr %3, %2, implicit $mxcsr
    %22:vr128x = nofpexcept VPADDDZ128rr %5, %4, implicit $mxcsr
    %23:vr128x = nofpexcept VPADDDZ128rr %7, %6, implicit $mxcsr
    %24:vr128x = nofpexcept VPADDDZ128rr %9, %8, implicit $mxcsr
    %25:vr128x = nofpexcept VPADDDZ128rr %11, %10, implicit $mxcsr
    %26:vr128x = nofpexcept VPADDDZ128rr %13, %12, implicit $mxcsr
    %27:vr128x = nofpexcept VPADDDZ128rr %15, %14, implicit $mxcsr

    %30:vr128x = nofpexcept VPADDDZ128rr %21, %20, implicit $mxcsr
    %31:vr128x = nofpexcept VPADDDZ128rr %23, %22, implicit $mxcsr
    %32:vr128x = nofpexcept VPADDDZ128rr %25, %24, implicit $mxcsr
    %33:vr128x = nofpexcept VPADDDZ128rr %27, %26, implicit $mxcsr

    %50:vr128x = nofpexcept VPADDDZ128rr %31, %30, implicit $mxcsr
    %51:vr128x = nofpexcept VPADDDZ128rr %33, %32, implicit $mxcsr

    %60:vr128x = nofpexcept VPADDDZ128rr %50, %51, implicit $mxcsr

    ; xmm0 ~ xmm15 live here
    ; (i64)d + i64 x[0]
    %47:gr64 = nofpexcept VCVTTSD2SI64Zrr killed %46, implicit $mxcsr
    %61:gr64 = VMOVPQIto64Zrr killed %60
    %70:gr64 = nsw ADD64rr %61, killed %47, implicit-def dead $eflags

    $rax = COPY %70
    RET 0, $rax
...
