; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_avx512_reduction
; RUN: llc < %s -verify-machineinstrs -mtriple=x86_64-unknown-unknown -mattr=+avx512reduction,+avx512vl | FileCheck %s --check-prefixes=ALL,AVX512REDUCTION
; RUN: llc < %s -verify-machineinstrs -mtriple=x86_64-unknown-unknown -mattr=+avx512f,+avx512vl | FileCheck %s --check-prefixes=ALL,AVX512F

define i64 @reduce_smaxq_13xi64(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_smaxq_13xi64:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vmovdqa64 64(%rdi), %zmm0
; AVX512REDUCTION-NEXT:    vpbroadcastq {{.*#+}} zmm1 = [9223372036854775808,9223372036854775808,9223372036854775808,9223372036854775808,9223372036854775808,9223372036854775808,9223372036854775808,9223372036854775808]
; AVX512REDUCTION-NEXT:    movb $32, %al
; AVX512REDUCTION-NEXT:    kmovw %eax, %k1
; AVX512REDUCTION-NEXT:    vmovdqa64 %zmm1, %zmm0 {%k1}
; AVX512REDUCTION-NEXT:    movb $64, %al
; AVX512REDUCTION-NEXT:    kmovw %eax, %k1
; AVX512REDUCTION-NEXT:    vmovdqa64 %zmm1, %zmm0 {%k1}
; AVX512REDUCTION-NEXT:    movb $-128, %al
; AVX512REDUCTION-NEXT:    kmovw %eax, %k1
; AVX512REDUCTION-NEXT:    vmovdqa64 %zmm1, %zmm0 {%k1}
; AVX512REDUCTION-NEXT:    vpmaxsq (%rdi), %zmm0, %zmm0
; AVX512REDUCTION-NEXT:    vphrmaxsq %zmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovq %xmm0, %rax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxq_13xi64:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vmovdqa64 64(%rdi), %zmm0
; AVX512F-NEXT:    vpbroadcastq {{.*#+}} zmm1 = [9223372036854775808,9223372036854775808,9223372036854775808,9223372036854775808,9223372036854775808,9223372036854775808,9223372036854775808,9223372036854775808]
; AVX512F-NEXT:    movb $32, %al
; AVX512F-NEXT:    kmovw %eax, %k1
; AVX512F-NEXT:    vmovdqa64 %zmm1, %zmm0 {%k1}
; AVX512F-NEXT:    movb $64, %al
; AVX512F-NEXT:    kmovw %eax, %k1
; AVX512F-NEXT:    vmovdqa64 %zmm1, %zmm0 {%k1}
; AVX512F-NEXT:    movb $-128, %al
; AVX512F-NEXT:    kmovw %eax, %k1
; AVX512F-NEXT:    vmovdqa64 %zmm1, %zmm0 {%k1}
; AVX512F-NEXT:    vpmaxsq (%rdi), %zmm0, %zmm0
; AVX512F-NEXT:    vextracti64x4 $1, %zmm0, %ymm1
; AVX512F-NEXT:    vpmaxsq %ymm1, %ymm0, %ymm0
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpmaxsq %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpextrq $1, %xmm0, %rax
; AVX512F-NEXT:    vmovq %xmm0, %rcx
; AVX512F-NEXT:    cmpq %rax, %rcx
; AVX512F-NEXT:    cmovgq %rcx, %rax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %vec= load <13 x i64>, ptr %p
  %res = tail call i64 @llvm.vector.reduce.smax.v13i64(<13 x i64> %vec)
  ret i64 %res
}

define i64 @reduce_smaxq_8xi64(<8 x i64> %vec) {
; AVX512REDUCTION-LABEL: reduce_smaxq_8xi64:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vphrmaxsq %zmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovq %xmm0, %rax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxq_8xi64:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vextracti64x4 $1, %zmm0, %ymm1
; AVX512F-NEXT:    vpmaxsq %zmm1, %zmm0, %zmm0
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpmaxsq %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[2,3,2,3]
; AVX512F-NEXT:    vpmaxsq %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vmovq %xmm0, %rax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %res = tail call i64 @llvm.vector.reduce.smax.v8i64(<8 x i64> %vec)
  ret i64 %res
}

define i64 @reduce_smaxq_7xi64(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_smaxq_7xi64:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vmovdqa64 (%rdi), %zmm0
; AVX512REDUCTION-NEXT:    movb $-128, %al
; AVX512REDUCTION-NEXT:    kmovw %eax, %k1
; AVX512REDUCTION-NEXT:    vpbroadcastq {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm0 {%k1}
; AVX512REDUCTION-NEXT:    vphrmaxsq %zmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovq %xmm0, %rax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxq_7xi64:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vmovdqa64 (%rdi), %zmm0
; AVX512F-NEXT:    movb $-128, %al
; AVX512F-NEXT:    kmovw %eax, %k1
; AVX512F-NEXT:    vpbroadcastq {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm0 {%k1}
; AVX512F-NEXT:    vextracti64x4 $1, %zmm0, %ymm1
; AVX512F-NEXT:    vpmaxsq %ymm1, %ymm0, %ymm0
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpmaxsq %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpextrq $1, %xmm0, %rax
; AVX512F-NEXT:    vmovq %xmm0, %rcx
; AVX512F-NEXT:    cmpq %rax, %rcx
; AVX512F-NEXT:    cmovgq %rcx, %rax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %vec= load <7 x i64>, ptr %p
  %res = tail call i64 @llvm.vector.reduce.smax.v7i64(<7 x i64> %vec)
  ret i64 %res
}

define i64 @reduce_smaxq_4xi64(<4 x i64> %vec) {
; AVX512REDUCTION-LABEL: reduce_smaxq_4xi64:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vphrmaxsq %ymm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovq %xmm0, %rax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxq_4xi64:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpmaxsq %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[2,3,2,3]
; AVX512F-NEXT:    vpmaxsq %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vmovq %xmm0, %rax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %res = tail call i64 @llvm.vector.reduce.smax.v4i64(<4 x i64> %vec)
  ret i64 %res
}

define i64 @reduce_smaxq_3xi64(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_smaxq_3xi64:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vpbroadcastq {{.*#+}} ymm0 = [9223372036854775808,9223372036854775808,9223372036854775808,9223372036854775808]
; AVX512REDUCTION-NEXT:    vpblendd {{.*#+}} ymm0 = mem[0,1,2,3,4,5],ymm0[6,7]
; AVX512REDUCTION-NEXT:    vphrmaxsq %ymm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovq %xmm0, %rax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxq_3xi64:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vpbroadcastq {{.*#+}} ymm0 = [9223372036854775808,9223372036854775808,9223372036854775808,9223372036854775808]
; AVX512F-NEXT:    vpblendd {{.*#+}} ymm0 = mem[0,1,2,3,4,5],ymm0[6,7]
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpmaxsq %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpextrq $1, %xmm0, %rax
; AVX512F-NEXT:    vmovq %xmm0, %rcx
; AVX512F-NEXT:    cmpq %rax, %rcx
; AVX512F-NEXT:    cmovgq %rcx, %rax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %vec= load <3 x i64>, ptr %p
  %res = tail call i64 @llvm.vector.reduce.smax.v3i64(<3 x i64> %vec)
  ret i64 %res
}

define i64 @reduce_smaxq_2xi64(<2 x i64> %vec) {
; AVX512REDUCTION-LABEL: reduce_smaxq_2xi64:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vphrmaxsq %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovq %xmm0, %rax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxq_2xi64:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[2,3,2,3]
; AVX512F-NEXT:    vpmaxsq %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vmovq %xmm0, %rax
; AVX512F-NEXT:    retq
  %res = tail call i64 @llvm.vector.reduce.smax.v2i64(<2 x i64> %vec)
  ret i64 %res
}

define i64 @reduce_smaxq_1xi64(<1 x i64> %vec) {
; ALL-LABEL: reduce_smaxq_1xi64:
; ALL:       # %bb.0:
; ALL-NEXT:    movq %rdi, %rax
; ALL-NEXT:    retq
  %res = tail call i64 @llvm.vector.reduce.smax.v1i64(<1 x i64> %vec)
  ret i64 %res
}

declare i64 @llvm.vector.reduce.smax.v13i64(<13 x i64>)
declare i64 @llvm.vector.reduce.smax.v8i64(<8 x i64>)
declare i64 @llvm.vector.reduce.smax.v7i64(<7 x i64>)
declare i64 @llvm.vector.reduce.smax.v4i64(<4 x i64>)
declare i64 @llvm.vector.reduce.smax.v3i64(<3 x i64>)
declare i64 @llvm.vector.reduce.smax.v2i64(<2 x i64>)
declare i64 @llvm.vector.reduce.smax.v1i64(<1 x i64>)

define i32 @reduce_smaxd_17xi32(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_smaxd_17xi32:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vpbroadcastd {{.*#+}} xmm0 = 
; AVX512REDUCTION-NEXT:    vpinsrd $0, 64(%rdi), %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpbroadcastd {{.*#+}} zmm1 = 
; AVX512REDUCTION-NEXT:    vinserti32x4 $0, %xmm0, %zmm1, %zmm0
; AVX512REDUCTION-NEXT:    vpmaxsd (%rdi), %zmm0, %zmm0
; AVX512REDUCTION-NEXT:    vphrmaxsd %zmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxd_17xi32:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vpbroadcastd {{.*#+}} xmm0 = 
; AVX512F-NEXT:    vpinsrd $0, 64(%rdi), %xmm0, %xmm0
; AVX512F-NEXT:    vpbroadcastd {{.*#+}} zmm1 = 
; AVX512F-NEXT:    vinserti32x4 $0, %xmm0, %zmm1, %zmm0
; AVX512F-NEXT:    vpmaxsd (%rdi), %zmm0, %zmm0
; AVX512F-NEXT:    vextracti64x4 $1, %zmm0, %ymm1
; AVX512F-NEXT:    vpmaxsd %ymm1, %ymm0, %ymm0
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpmaxsd %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpextrd $1, %xmm0, %eax
; AVX512F-NEXT:    vmovd %xmm0, %ecx
; AVX512F-NEXT:    cmpl %eax, %ecx
; AVX512F-NEXT:    cmovgl %ecx, %eax
; AVX512F-NEXT:    vpextrd $2, %xmm0, %ecx
; AVX512F-NEXT:    cmpl %ecx, %eax
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrd $3, %xmm0, %ecx
; AVX512F-NEXT:    cmpl %ecx, %eax
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %vec= load <17 x i32>, ptr %p
  %res = tail call i32 @llvm.vector.reduce.smax.v17i32(<17 x i32> %vec)
  ret i32 %res
}

define i32 @reduce_smaxd_16xi32(<16 x i32> %vec) {
; AVX512REDUCTION-LABEL: reduce_smaxd_16xi32:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vphrmaxsd %zmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxd_16xi32:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vextracti64x4 $1, %zmm0, %ymm1
; AVX512F-NEXT:    vpmaxsd %zmm1, %zmm0, %zmm0
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpmaxsd %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[2,3,2,3]
; AVX512F-NEXT:    vpmaxsd %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[1,1,1,1]
; AVX512F-NEXT:    vpmaxsd %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %res = tail call i32 @llvm.vector.reduce.smax.v16i32(<16 x i32> %vec)
  ret i32 %res
}

define i32 @reduce_smaxd_13xi32(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_smaxd_13xi32:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vmovdqa64 (%rdi), %zmm0
; AVX512REDUCTION-NEXT:    vpbroadcastd {{.*#+}} zmm1 = [2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648]
; AVX512REDUCTION-NEXT:    movw $8192, %ax # imm = 0x2000
; AVX512REDUCTION-NEXT:    kmovw %eax, %k1
; AVX512REDUCTION-NEXT:    vmovdqa32 %zmm1, %zmm0 {%k1}
; AVX512REDUCTION-NEXT:    movw $16384, %ax # imm = 0x4000
; AVX512REDUCTION-NEXT:    kmovw %eax, %k1
; AVX512REDUCTION-NEXT:    vmovdqa32 %zmm1, %zmm0 {%k1}
; AVX512REDUCTION-NEXT:    movw $-32768, %ax # imm = 0x8000
; AVX512REDUCTION-NEXT:    kmovw %eax, %k1
; AVX512REDUCTION-NEXT:    vmovdqa32 %zmm1, %zmm0 {%k1}
; AVX512REDUCTION-NEXT:    vphrmaxsd %zmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxd_13xi32:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vmovdqa64 (%rdi), %zmm0
; AVX512F-NEXT:    vpbroadcastd {{.*#+}} zmm1 = [2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648]
; AVX512F-NEXT:    movw $8192, %ax # imm = 0x2000
; AVX512F-NEXT:    kmovw %eax, %k1
; AVX512F-NEXT:    vmovdqa32 %zmm1, %zmm0 {%k1}
; AVX512F-NEXT:    movw $16384, %ax # imm = 0x4000
; AVX512F-NEXT:    kmovw %eax, %k1
; AVX512F-NEXT:    vmovdqa32 %zmm1, %zmm0 {%k1}
; AVX512F-NEXT:    movw $-32768, %ax # imm = 0x8000
; AVX512F-NEXT:    kmovw %eax, %k1
; AVX512F-NEXT:    vmovdqa32 %zmm1, %zmm0 {%k1}
; AVX512F-NEXT:    vextracti64x4 $1, %zmm0, %ymm1
; AVX512F-NEXT:    vpmaxsd %ymm1, %ymm0, %ymm0
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpmaxsd %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpextrd $1, %xmm0, %eax
; AVX512F-NEXT:    vmovd %xmm0, %ecx
; AVX512F-NEXT:    cmpl %eax, %ecx
; AVX512F-NEXT:    cmovgl %ecx, %eax
; AVX512F-NEXT:    vpextrd $2, %xmm0, %ecx
; AVX512F-NEXT:    cmpl %ecx, %eax
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrd $3, %xmm0, %ecx
; AVX512F-NEXT:    cmpl %ecx, %eax
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %vec= load <13 x i32>, ptr %p
  %res = tail call i32 @llvm.vector.reduce.smax.v13i32(<13 x i32> %vec)
  ret i32 %res
}

define i32 @reduce_smaxd_8xi32(<8 x i32> %vec) {
; AVX512REDUCTION-LABEL: reduce_smaxd_8xi32:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vphrmaxsd %ymm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxd_8xi32:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpmaxsd %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[2,3,2,3]
; AVX512F-NEXT:    vpmaxsd %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[1,1,1,1]
; AVX512F-NEXT:    vpmaxsd %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %res = tail call i32 @llvm.vector.reduce.smax.v8i32(<8 x i32> %vec)
  ret i32 %res
}

define i32 @reduce_smaxd_7xi32(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_smaxd_7xi32:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vpbroadcastd {{.*#+}} ymm0 = [2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648]
; AVX512REDUCTION-NEXT:    vpblendd {{.*#+}} ymm0 = mem[0,1,2,3,4,5,6],ymm0[7]
; AVX512REDUCTION-NEXT:    vphrmaxsd %ymm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxd_7xi32:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vpbroadcastd {{.*#+}} ymm0 = [2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648]
; AVX512F-NEXT:    vpblendd {{.*#+}} ymm0 = mem[0,1,2,3,4,5,6],ymm0[7]
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpmaxsd %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpextrd $1, %xmm0, %eax
; AVX512F-NEXT:    vmovd %xmm0, %ecx
; AVX512F-NEXT:    cmpl %eax, %ecx
; AVX512F-NEXT:    cmovgl %ecx, %eax
; AVX512F-NEXT:    vpextrd $2, %xmm0, %ecx
; AVX512F-NEXT:    cmpl %ecx, %eax
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrd $3, %xmm0, %ecx
; AVX512F-NEXT:    cmpl %ecx, %eax
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %vec= load <7 x i32>, ptr %p
  %res = tail call i32 @llvm.vector.reduce.smax.v7i32(<7 x i32> %vec)
  ret i32 %res
}

define i32 @reduce_smaxd_4xi32(<4 x i32> %vec) {
; AVX512REDUCTION-LABEL: reduce_smaxd_4xi32:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vphrmaxsd %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxd_4xi32:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[2,3,2,3]
; AVX512F-NEXT:    vpmaxsd %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[1,1,1,1]
; AVX512F-NEXT:    vpmaxsd %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    retq
  %res = tail call i32 @llvm.vector.reduce.smax.v4i32(<4 x i32> %vec)
  ret i32 %res
}

define i32 @reduce_smaxd_3xi32(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_smaxd_3xi32:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vmovdqa (%rdi), %xmm0
; AVX512REDUCTION-NEXT:    movl $-2147483648, %eax # imm = 0x80000000
; AVX512REDUCTION-NEXT:    vpinsrd $3, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vphrmaxsd %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxd_3xi32:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    movl (%rdi), %eax
; AVX512F-NEXT:    movl 4(%rdi), %ecx
; AVX512F-NEXT:    cmpl %ecx, %eax
; AVX512F-NEXT:    cmovgl %eax, %ecx
; AVX512F-NEXT:    movl 8(%rdi), %eax
; AVX512F-NEXT:    cmpl %eax, %ecx
; AVX512F-NEXT:    cmovlel %eax, %ecx
; AVX512F-NEXT:    cmpl $-2147483647, %ecx # imm = 0x80000001
; AVX512F-NEXT:    movl $-2147483648, %eax # imm = 0x80000000
; AVX512F-NEXT:    cmovgel %ecx, %eax
; AVX512F-NEXT:    retq
  %vec= load <3 x i32>, ptr %p
  %res = tail call i32 @llvm.vector.reduce.smax.v3i32(<3 x i32> %vec)
  ret i32 %res
}

define i32 @reduce_smaxd_2xi32(<2 x i32> %vec) {
; AVX512REDUCTION-LABEL: reduce_smaxd_2xi32:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    movl $-2147483648, %eax # imm = 0x80000000
; AVX512REDUCTION-NEXT:    vpinsrd $2, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrd $3, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vphrmaxsd %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxd_2xi32:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[1,1,1,1]
; AVX512F-NEXT:    vpmaxsd %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    retq
  %res = tail call i32 @llvm.vector.reduce.smax.v2i32(<2 x i32> %vec)
  ret i32 %res
}

define i32 @reduce_smaxd_1xi32(<1 x i32> %vec) {
; ALL-LABEL: reduce_smaxd_1xi32:
; ALL:       # %bb.0:
; ALL-NEXT:    movl %edi, %eax
; ALL-NEXT:    retq
  %res = tail call i32 @llvm.vector.reduce.smax.v1i32(<1 x i32> %vec)
  ret i32 %res
}

declare i32 @llvm.vector.reduce.smax.v17i32(<17 x i32>)
declare i32 @llvm.vector.reduce.smax.v16i32(<16 x i32>)
declare i32 @llvm.vector.reduce.smax.v13i32(<13 x i32>)
declare i32 @llvm.vector.reduce.smax.v8i32(<8 x i32>)
declare i32 @llvm.vector.reduce.smax.v7i32(<7 x i32>)
declare i32 @llvm.vector.reduce.smax.v4i32(<4 x i32>)
declare i32 @llvm.vector.reduce.smax.v3i32(<3 x i32>)
declare i32 @llvm.vector.reduce.smax.v2i32(<2 x i32>)
declare i32 @llvm.vector.reduce.smax.v1i32(<1 x i32>)

define i16 @reduce_smaxw_33xi16(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_smaxw_33xi16:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vpbroadcastd {{.*#+}} xmm0 = 
; AVX512REDUCTION-NEXT:    vpinsrw $0, 64(%rdi), %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpblendd {{.*#+}} ymm0 = ymm0[0,1,2,3],mem[4,5,6,7]
; AVX512REDUCTION-NEXT:    vpmaxsw (%rdi), %ymm0, %ymm0
; AVX512REDUCTION-NEXT:    vmovdqa 32(%rdi), %ymm1
; AVX512REDUCTION-NEXT:    vpmaxsw {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %ymm1, %ymm1
; AVX512REDUCTION-NEXT:    vinserti64x4 $1, %ymm1, %zmm0, %zmm0
; AVX512REDUCTION-NEXT:    vphrmaxsw %zmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxw_33xi16:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vpbroadcastd {{.*#+}} xmm0 = 
; AVX512F-NEXT:    vpinsrw $0, 64(%rdi), %xmm0, %xmm0
; AVX512F-NEXT:    vpblendd {{.*#+}} ymm0 = ymm0[0,1,2,3],mem[4,5,6,7]
; AVX512F-NEXT:    vpmaxsw (%rdi), %ymm0, %ymm0
; AVX512F-NEXT:    vmovdqa 32(%rdi), %ymm1
; AVX512F-NEXT:    vpmaxsw {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %ymm1, %ymm1
; AVX512F-NEXT:    vpmaxsw %ymm1, %ymm0, %ymm0
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpmaxsw %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpextrw $1, %xmm0, %eax
; AVX512F-NEXT:    vmovd %xmm0, %ecx
; AVX512F-NEXT:    cmpw %ax, %cx
; AVX512F-NEXT:    cmovgl %ecx, %eax
; AVX512F-NEXT:    vpextrw $2, %xmm0, %ecx
; AVX512F-NEXT:    cmpw %cx, %ax
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrw $3, %xmm0, %ecx
; AVX512F-NEXT:    cmpw %cx, %ax
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrw $4, %xmm0, %ecx
; AVX512F-NEXT:    cmpw %cx, %ax
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrw $5, %xmm0, %ecx
; AVX512F-NEXT:    cmpw %cx, %ax
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrw $6, %xmm0, %ecx
; AVX512F-NEXT:    cmpw %cx, %ax
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrw $7, %xmm0, %ecx
; AVX512F-NEXT:    cmpw %cx, %ax
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %vec= load <33 x i16>, ptr %p
  %res = tail call i16 @llvm.vector.reduce.smax.v33i16(<33 x i16> %vec)
  ret i16 %res
}

define i16 @reduce_smaxw_32xi16(<32 x i16> %vec) {
; AVX512REDUCTION-LABEL: reduce_smaxw_32xi16:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vphrmaxsw %zmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxw_32xi16:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vextracti64x4 $1, %zmm0, %ymm1
; AVX512F-NEXT:    vpmaxsw %ymm1, %ymm0, %ymm0
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpmaxsw %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpxord {{\.?LCPI[0-9]+_[0-9]+}}(%rip){1to4}, %xmm0, %xmm0
; AVX512F-NEXT:    vphminposuw %xmm0, %xmm0
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    xorl $32767, %eax # imm = 0x7FFF
; AVX512F-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %res = tail call i16 @llvm.vector.reduce.smax.v32i16(<32 x i16> %vec)
  ret i16 %res
}

define i16 @reduce_smaxw_17xi16(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_smaxw_17xi16:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vmovdqa64 (%rdi), %zmm0
; AVX512REDUCTION-NEXT:    vmovdqa64 {{.*#+}} zmm1 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32768,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
; AVX512REDUCTION-NEXT:    vpternlogq $248, {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm0, %zmm1
; AVX512REDUCTION-NEXT:    vmovdqa64 {{.*#+}} zmm0 = [0,1,2,3,4,5,6,7,8,25,26,27,28,29,30,31]
; AVX512REDUCTION-NEXT:    vpermi2d {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm1, %zmm0
; AVX512REDUCTION-NEXT:    vphrmaxsw %zmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxw_17xi16:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vmovdqa64 (%rdi), %zmm0
; AVX512F-NEXT:    vmovdqa64 {{.*#+}} zmm1 = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32768,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
; AVX512F-NEXT:    vpternlogq $248, {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm0, %zmm1
; AVX512F-NEXT:    vmovdqa64 {{.*#+}} zmm0 = [0,1,2,3,4,5,6,7,8,25,26,27,28,29,30,31]
; AVX512F-NEXT:    vpermi2d {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm1, %zmm0
; AVX512F-NEXT:    vextracti64x4 $1, %zmm0, %ymm1
; AVX512F-NEXT:    vpmaxsw %ymm1, %ymm0, %ymm0
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpmaxsw %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpextrw $1, %xmm0, %eax
; AVX512F-NEXT:    vmovd %xmm0, %ecx
; AVX512F-NEXT:    cmpw %ax, %cx
; AVX512F-NEXT:    cmovgl %ecx, %eax
; AVX512F-NEXT:    vpextrw $2, %xmm0, %ecx
; AVX512F-NEXT:    cmpw %cx, %ax
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrw $3, %xmm0, %ecx
; AVX512F-NEXT:    cmpw %cx, %ax
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrw $4, %xmm0, %ecx
; AVX512F-NEXT:    cmpw %cx, %ax
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrw $5, %xmm0, %ecx
; AVX512F-NEXT:    cmpw %cx, %ax
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrw $6, %xmm0, %ecx
; AVX512F-NEXT:    cmpw %cx, %ax
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrw $7, %xmm0, %ecx
; AVX512F-NEXT:    cmpw %cx, %ax
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %vec= load <17 x i16>, ptr %p
  %res = tail call i16 @llvm.vector.reduce.smax.v17i16(<17 x i16> %vec)
  ret i16 %res
}

define i16 @reduce_smaxw_16xi16(<16 x i16> %vec) {
; AVX512REDUCTION-LABEL: reduce_smaxw_16xi16:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vphrmaxsw %ymm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxw_16xi16:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpmaxsw %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpxord {{\.?LCPI[0-9]+_[0-9]+}}(%rip){1to4}, %xmm0, %xmm0
; AVX512F-NEXT:    vphminposuw %xmm0, %xmm0
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    xorl $32767, %eax # imm = 0x7FFF
; AVX512F-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %res = tail call i16 @llvm.vector.reduce.smax.v16i16(<16 x i16> %vec)
  ret i16 %res
}

define i16 @reduce_smaxw_13xi16(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_smaxw_13xi16:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vmovdqa (%rdi), %ymm0
; AVX512REDUCTION-NEXT:    vpblendw {{.*#+}} ymm1 = ymm0[0,1,2,3,4],mem[5,6,7],ymm0[8,9,10,11,12],mem[13,14,15]
; AVX512REDUCTION-NEXT:    vpblendd {{.*#+}} ymm0 = ymm0[0,1,2,3],ymm1[4,5,6,7]
; AVX512REDUCTION-NEXT:    vphrmaxsw %ymm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxw_13xi16:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vmovdqa (%rdi), %ymm0
; AVX512F-NEXT:    vpblendw {{.*#+}} ymm0 = ymm0[0,1,2,3,4],mem[5,6,7],ymm0[8,9,10,11,12],mem[13,14,15]
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm0
; AVX512F-NEXT:    vpmaxsw (%rdi), %xmm0, %xmm0
; AVX512F-NEXT:    vpextrw $1, %xmm0, %eax
; AVX512F-NEXT:    vmovd %xmm0, %ecx
; AVX512F-NEXT:    cmpw %ax, %cx
; AVX512F-NEXT:    cmovgl %ecx, %eax
; AVX512F-NEXT:    vpextrw $2, %xmm0, %ecx
; AVX512F-NEXT:    cmpw %cx, %ax
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrw $3, %xmm0, %ecx
; AVX512F-NEXT:    cmpw %cx, %ax
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrw $4, %xmm0, %ecx
; AVX512F-NEXT:    cmpw %cx, %ax
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrw $5, %xmm0, %ecx
; AVX512F-NEXT:    cmpw %cx, %ax
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrw $6, %xmm0, %ecx
; AVX512F-NEXT:    cmpw %cx, %ax
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrw $7, %xmm0, %ecx
; AVX512F-NEXT:    cmpw %cx, %ax
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %vec= load <13 x i16>, ptr %p
  %res = tail call i16 @llvm.vector.reduce.smax.v13i16(<13 x i16> %vec)
  ret i16 %res
}

define i16 @reduce_smaxw_8xi16(<8 x i16> %vec) {
; AVX512REDUCTION-LABEL: reduce_smaxw_8xi16:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vphrmaxsw %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxw_8xi16:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vpxord {{\.?LCPI[0-9]+_[0-9]+}}(%rip){1to4}, %xmm0, %xmm0
; AVX512F-NEXT:    vphminposuw %xmm0, %xmm0
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    xorl $32767, %eax # imm = 0x7FFF
; AVX512F-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512F-NEXT:    retq
  %res = tail call i16 @llvm.vector.reduce.smax.v8i16(<8 x i16> %vec)
  ret i16 %res
}

define i16 @reduce_smaxw_7xi16(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_smaxw_7xi16:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vmovdqa (%rdi), %xmm0
; AVX512REDUCTION-NEXT:    movl $32768, %eax # imm = 0x8000
; AVX512REDUCTION-NEXT:    vpinsrw $7, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vphrmaxsw %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxw_7xi16:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vmovdqa (%rdi), %xmm0
; AVX512F-NEXT:    vpextrw $1, %xmm0, %ecx
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    cmpw %cx, %ax
; AVX512F-NEXT:    cmovgl %eax, %ecx
; AVX512F-NEXT:    vpextrw $2, %xmm0, %eax
; AVX512F-NEXT:    cmpw %ax, %cx
; AVX512F-NEXT:    cmovlel %eax, %ecx
; AVX512F-NEXT:    vpextrw $3, %xmm0, %eax
; AVX512F-NEXT:    cmpw %ax, %cx
; AVX512F-NEXT:    cmovlel %eax, %ecx
; AVX512F-NEXT:    vpextrw $4, %xmm0, %eax
; AVX512F-NEXT:    cmpw %ax, %cx
; AVX512F-NEXT:    cmovlel %eax, %ecx
; AVX512F-NEXT:    vpextrw $5, %xmm0, %eax
; AVX512F-NEXT:    cmpw %ax, %cx
; AVX512F-NEXT:    cmovlel %eax, %ecx
; AVX512F-NEXT:    vpextrw $6, %xmm0, %eax
; AVX512F-NEXT:    cmpw %ax, %cx
; AVX512F-NEXT:    cmovlel %eax, %ecx
; AVX512F-NEXT:    movswl %cx, %eax
; AVX512F-NEXT:    cmpl $-32767, %eax # imm = 0x8001
; AVX512F-NEXT:    movl $32768, %eax # imm = 0x8000
; AVX512F-NEXT:    cmovgel %ecx, %eax
; AVX512F-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512F-NEXT:    retq
  %vec= load <7 x i16>, ptr %p
  %res = tail call i16 @llvm.vector.reduce.smax.v7i16(<7 x i16> %vec)
  ret i16 %res
}

define i16 @reduce_smaxw_4xi16(<4 x i16> %vec) {
; AVX512REDUCTION-LABEL: reduce_smaxw_4xi16:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    movl $32768, %eax # imm = 0x8000
; AVX512REDUCTION-NEXT:    vpinsrw $4, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrw $5, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrw $6, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrw $7, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vphrmaxsw %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxw_4xi16:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[1,1,1,1]
; AVX512F-NEXT:    vpmaxsw %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpsrld $16, %xmm0, %xmm1
; AVX512F-NEXT:    vpmaxsw %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512F-NEXT:    retq
  %res = tail call i16 @llvm.vector.reduce.smax.v4i16(<4 x i16> %vec)
  ret i16 %res
}

define i16 @reduce_smaxw_3xi16(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_smaxw_3xi16:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vmovq {{.*#+}} xmm0 = mem[0],zero
; AVX512REDUCTION-NEXT:    movl $32768, %eax # imm = 0x8000
; AVX512REDUCTION-NEXT:    vpinsrw $3, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrw $4, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrw $5, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrw $6, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrw $7, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vphrmaxsw %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxw_3xi16:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    movq (%rdi), %rcx
; AVX512F-NEXT:    movq %rcx, %rax
; AVX512F-NEXT:    shrq $16, %rax
; AVX512F-NEXT:    movzwl %ax, %edx
; AVX512F-NEXT:    cmpw %ax, %cx
; AVX512F-NEXT:    cmovgl %ecx, %edx
; AVX512F-NEXT:    shrq $32, %rcx
; AVX512F-NEXT:    movzwl %cx, %eax
; AVX512F-NEXT:    cmpw %cx, %dx
; AVX512F-NEXT:    cmovgl %edx, %eax
; AVX512F-NEXT:    movswl %ax, %ecx
; AVX512F-NEXT:    cmpl $-32767, %ecx # imm = 0x8001
; AVX512F-NEXT:    movl $32768, %ecx # imm = 0x8000
; AVX512F-NEXT:    cmovll %ecx, %eax
; AVX512F-NEXT:    movswl %ax, %edx
; AVX512F-NEXT:    cmpl $-32767, %edx # imm = 0x8001
; AVX512F-NEXT:    cmovll %ecx, %eax
; AVX512F-NEXT:    movswl %ax, %edx
; AVX512F-NEXT:    cmpl $-32767, %edx # imm = 0x8001
; AVX512F-NEXT:    cmovll %ecx, %eax
; AVX512F-NEXT:    movswl %ax, %edx
; AVX512F-NEXT:    cmpl $-32767, %edx # imm = 0x8001
; AVX512F-NEXT:    cmovll %ecx, %eax
; AVX512F-NEXT:    movswl %ax, %edx
; AVX512F-NEXT:    cmpl $-32767, %edx # imm = 0x8001
; AVX512F-NEXT:    cmovll %ecx, %eax
; AVX512F-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512F-NEXT:    retq
  %vec= load <3 x i16>, ptr %p
  %res = tail call i16 @llvm.vector.reduce.smax.v3i16(<3 x i16> %vec)
  ret i16 %res
}

define i16 @reduce_smaxw_2xi16(<2 x i16> %vec) {
; AVX512REDUCTION-LABEL: reduce_smaxw_2xi16:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    movl $32768, %eax # imm = 0x8000
; AVX512REDUCTION-NEXT:    vpinsrw $2, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrw $3, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrw $4, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrw $5, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrw $6, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrw $7, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vphrmaxsw %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxw_2xi16:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vpsrld $16, %xmm0, %xmm1
; AVX512F-NEXT:    vpmaxsw %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512F-NEXT:    retq
  %res = tail call i16 @llvm.vector.reduce.smax.v2i16(<2 x i16> %vec)
  ret i16 %res
}

define i16 @reduce_smaxw_1xi16(<1 x i16> %vec) {
; ALL-LABEL: reduce_smaxw_1xi16:
; ALL:       # %bb.0:
; ALL-NEXT:    movl %edi, %eax
; ALL-NEXT:    # kill: def $ax killed $ax killed $eax
; ALL-NEXT:    retq
  %res = tail call i16 @llvm.vector.reduce.smax.v1i16(<1 x i16> %vec)
  ret i16 %res
}

declare i16 @llvm.vector.reduce.smax.v33i16(<33 x i16>)
declare i16 @llvm.vector.reduce.smax.v32i16(<32 x i16>)
declare i16 @llvm.vector.reduce.smax.v17i16(<17 x i16>)
declare i16 @llvm.vector.reduce.smax.v16i16(<16 x i16>)
declare i16 @llvm.vector.reduce.smax.v13i16(<13 x i16>)
declare i16 @llvm.vector.reduce.smax.v8i16(<8 x i16>)
declare i16 @llvm.vector.reduce.smax.v7i16(<7 x i16>)
declare i16 @llvm.vector.reduce.smax.v4i16(<4 x i16>)
declare i16 @llvm.vector.reduce.smax.v3i16(<3 x i16>)
declare i16 @llvm.vector.reduce.smax.v2i16(<2 x i16>)
declare i16 @llvm.vector.reduce.smax.v1i16(<1 x i16>)

define i8 @reduce_smaxb_65xi8(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_smaxb_65xi8:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vpbroadcastd {{.*#+}} xmm0 = 
; AVX512REDUCTION-NEXT:    vpinsrb $0, 64(%rdi), %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpblendd {{.*#+}} ymm0 = ymm0[0,1,2,3],mem[4,5,6,7]
; AVX512REDUCTION-NEXT:    vpmaxsb (%rdi), %ymm0, %ymm0
; AVX512REDUCTION-NEXT:    vmovdqa 32(%rdi), %ymm1
; AVX512REDUCTION-NEXT:    vpmaxsb {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %ymm1, %ymm1
; AVX512REDUCTION-NEXT:    vinserti64x4 $1, %ymm1, %zmm0, %zmm0
; AVX512REDUCTION-NEXT:    vphrmaxsb %zmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $al killed $al killed $eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxb_65xi8:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vpbroadcastd {{.*#+}} xmm0 = 
; AVX512F-NEXT:    vpinsrb $0, 64(%rdi), %xmm0, %xmm0
; AVX512F-NEXT:    vpblendd {{.*#+}} ymm0 = ymm0[0,1,2,3],mem[4,5,6,7]
; AVX512F-NEXT:    vpmaxsb (%rdi), %ymm0, %ymm0
; AVX512F-NEXT:    vmovdqa 32(%rdi), %ymm1
; AVX512F-NEXT:    vpmaxsb {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %ymm1, %ymm1
; AVX512F-NEXT:    vpmaxsb %ymm1, %ymm0, %ymm0
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpmaxsb %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpextrb $1, %xmm0, %eax
; AVX512F-NEXT:    vmovd %xmm0, %ecx
; AVX512F-NEXT:    cmpb %al, %cl
; AVX512F-NEXT:    cmovgl %ecx, %eax
; AVX512F-NEXT:    vpextrb $2, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $3, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $4, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $5, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $6, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $7, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $8, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $9, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $10, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $11, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $12, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $13, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $14, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $15, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    # kill: def $al killed $al killed $eax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %vec= load <65 x i8>, ptr %p
  %res = tail call i8 @llvm.vector.reduce.smax.v65i8(<65 x i8> %vec)
  ret i8 %res
}

define i8 @reduce_smaxb_64xi8(<64 x i8> %vec) {
; AVX512REDUCTION-LABEL: reduce_smaxb_64xi8:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vphrmaxsb %zmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $al killed $al killed $eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxb_64xi8:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vextracti64x4 $1, %zmm0, %ymm1
; AVX512F-NEXT:    vpmaxsb %ymm1, %ymm0, %ymm0
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpmaxsb %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpxord {{\.?LCPI[0-9]+_[0-9]+}}(%rip){1to4}, %xmm0, %xmm0
; AVX512F-NEXT:    vpsrlw $8, %xmm0, %xmm1
; AVX512F-NEXT:    vpminub %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vphminposuw %xmm0, %xmm0
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    xorb $127, %al
; AVX512F-NEXT:    # kill: def $al killed $al killed $eax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %res = tail call i8 @llvm.vector.reduce.smax.v64i8(<64 x i8> %vec)
  ret i8 %res
}

define i8 @reduce_smaxb_33xi8(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_smaxb_33xi8:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vmovdqa64 (%rdi), %zmm0
; AVX512REDUCTION-NEXT:    vmovdqa 48(%rdi), %xmm1
; AVX512REDUCTION-NEXT:    movl $128, %eax
; AVX512REDUCTION-NEXT:    vpinsrb $0, %eax, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vpinsrb $1, %eax, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vpinsrb $2, %eax, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vpinsrb $3, %eax, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vpinsrb $4, %eax, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vpinsrb $5, %eax, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vpinsrb $6, %eax, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vpinsrb $7, %eax, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vpinsrb $8, %eax, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vpinsrb $9, %eax, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vpinsrb $10, %eax, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vpinsrb $11, %eax, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vpinsrb $12, %eax, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vpinsrb $13, %eax, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vpinsrb $14, %eax, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vpinsrb $15, %eax, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vmovdqa 32(%rdi), %xmm2
; AVX512REDUCTION-NEXT:    vpinsrb $1, %eax, %xmm2, %xmm2
; AVX512REDUCTION-NEXT:    vpinsrb $2, %eax, %xmm2, %xmm2
; AVX512REDUCTION-NEXT:    vpinsrb $3, %eax, %xmm2, %xmm2
; AVX512REDUCTION-NEXT:    vpinsrb $4, %eax, %xmm2, %xmm2
; AVX512REDUCTION-NEXT:    vpinsrb $5, %eax, %xmm2, %xmm2
; AVX512REDUCTION-NEXT:    vpinsrb $6, %eax, %xmm2, %xmm2
; AVX512REDUCTION-NEXT:    vpinsrb $7, %eax, %xmm2, %xmm2
; AVX512REDUCTION-NEXT:    vpinsrb $8, %eax, %xmm2, %xmm2
; AVX512REDUCTION-NEXT:    vpinsrb $9, %eax, %xmm2, %xmm2
; AVX512REDUCTION-NEXT:    vpinsrb $10, %eax, %xmm2, %xmm2
; AVX512REDUCTION-NEXT:    vpinsrb $11, %eax, %xmm2, %xmm2
; AVX512REDUCTION-NEXT:    vpinsrb $12, %eax, %xmm2, %xmm2
; AVX512REDUCTION-NEXT:    vpinsrb $13, %eax, %xmm2, %xmm2
; AVX512REDUCTION-NEXT:    vpinsrb $14, %eax, %xmm2, %xmm2
; AVX512REDUCTION-NEXT:    vpinsrb $15, %eax, %xmm2, %xmm2
; AVX512REDUCTION-NEXT:    vinserti32x4 $2, %xmm2, %zmm0, %zmm0
; AVX512REDUCTION-NEXT:    vinserti32x4 $3, %xmm1, %zmm0, %zmm0
; AVX512REDUCTION-NEXT:    vphrmaxsb %zmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $al killed $al killed $eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxb_33xi8:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vmovdqa64 (%rdi), %zmm0
; AVX512F-NEXT:    vmovdqa 48(%rdi), %xmm1
; AVX512F-NEXT:    movl $128, %eax
; AVX512F-NEXT:    vpinsrb $0, %eax, %xmm1, %xmm1
; AVX512F-NEXT:    vpinsrb $1, %eax, %xmm1, %xmm1
; AVX512F-NEXT:    vpinsrb $2, %eax, %xmm1, %xmm1
; AVX512F-NEXT:    vpinsrb $3, %eax, %xmm1, %xmm1
; AVX512F-NEXT:    vpinsrb $4, %eax, %xmm1, %xmm1
; AVX512F-NEXT:    vpinsrb $5, %eax, %xmm1, %xmm1
; AVX512F-NEXT:    vpinsrb $6, %eax, %xmm1, %xmm1
; AVX512F-NEXT:    vpinsrb $7, %eax, %xmm1, %xmm1
; AVX512F-NEXT:    vpinsrb $8, %eax, %xmm1, %xmm1
; AVX512F-NEXT:    vpinsrb $9, %eax, %xmm1, %xmm1
; AVX512F-NEXT:    vpinsrb $10, %eax, %xmm1, %xmm1
; AVX512F-NEXT:    vpinsrb $11, %eax, %xmm1, %xmm1
; AVX512F-NEXT:    vpinsrb $12, %eax, %xmm1, %xmm1
; AVX512F-NEXT:    vpinsrb $13, %eax, %xmm1, %xmm1
; AVX512F-NEXT:    vpinsrb $14, %eax, %xmm1, %xmm1
; AVX512F-NEXT:    vpinsrb $15, %eax, %xmm1, %xmm1
; AVX512F-NEXT:    vmovdqa 32(%rdi), %xmm2
; AVX512F-NEXT:    vpinsrb $1, %eax, %xmm2, %xmm2
; AVX512F-NEXT:    vpinsrb $2, %eax, %xmm2, %xmm2
; AVX512F-NEXT:    vpinsrb $3, %eax, %xmm2, %xmm2
; AVX512F-NEXT:    vpinsrb $4, %eax, %xmm2, %xmm2
; AVX512F-NEXT:    vpinsrb $5, %eax, %xmm2, %xmm2
; AVX512F-NEXT:    vpinsrb $6, %eax, %xmm2, %xmm2
; AVX512F-NEXT:    vpinsrb $7, %eax, %xmm2, %xmm2
; AVX512F-NEXT:    vpinsrb $8, %eax, %xmm2, %xmm2
; AVX512F-NEXT:    vpinsrb $9, %eax, %xmm2, %xmm2
; AVX512F-NEXT:    vpinsrb $10, %eax, %xmm2, %xmm2
; AVX512F-NEXT:    vpinsrb $11, %eax, %xmm2, %xmm2
; AVX512F-NEXT:    vpinsrb $12, %eax, %xmm2, %xmm2
; AVX512F-NEXT:    vpinsrb $13, %eax, %xmm2, %xmm2
; AVX512F-NEXT:    vpinsrb $14, %eax, %xmm2, %xmm2
; AVX512F-NEXT:    vpinsrb $15, %eax, %xmm2, %xmm2
; AVX512F-NEXT:    vinserti32x4 $2, %xmm2, %zmm0, %zmm0
; AVX512F-NEXT:    vinserti32x4 $3, %xmm1, %zmm0, %zmm0
; AVX512F-NEXT:    vextracti64x4 $1, %zmm0, %ymm1
; AVX512F-NEXT:    vpmaxsb %ymm1, %ymm0, %ymm0
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpmaxsb %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpextrb $1, %xmm0, %eax
; AVX512F-NEXT:    vmovd %xmm0, %ecx
; AVX512F-NEXT:    cmpb %al, %cl
; AVX512F-NEXT:    cmovgl %ecx, %eax
; AVX512F-NEXT:    vpextrb $2, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $3, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $4, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $5, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $6, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $7, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $8, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $9, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $10, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $11, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $12, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $13, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $14, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $15, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    # kill: def $al killed $al killed $eax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %vec= load <33 x i8>, ptr %p
  %res = tail call i8 @llvm.vector.reduce.smax.v33i8(<33 x i8> %vec)
  ret i8 %res
}

define i8 @reduce_smaxb_32xi8(<32 x i8> %vec) {
; AVX512REDUCTION-LABEL: reduce_smaxb_32xi8:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vphrmaxsb %ymm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $al killed $al killed $eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxb_32xi8:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpmaxsb %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpxord {{\.?LCPI[0-9]+_[0-9]+}}(%rip){1to4}, %xmm0, %xmm0
; AVX512F-NEXT:    vpsrlw $8, %xmm0, %xmm1
; AVX512F-NEXT:    vpminub %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vphminposuw %xmm0, %xmm0
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    xorb $127, %al
; AVX512F-NEXT:    # kill: def $al killed $al killed $eax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %res = tail call i8 @llvm.vector.reduce.smax.v32i8(<32 x i8> %vec)
  ret i8 %res
}

define i8 @reduce_smaxb_17xi8(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_smaxb_17xi8:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vmovdqa (%rdi), %ymm0
; AVX512REDUCTION-NEXT:    vmovdqa 16(%rdi), %xmm1
; AVX512REDUCTION-NEXT:    movl $128, %eax
; AVX512REDUCTION-NEXT:    vpinsrb $1, %eax, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vpinsrb $2, %eax, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vpinsrb $3, %eax, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vpinsrb $4, %eax, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vpinsrb $5, %eax, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vpinsrb $6, %eax, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vpinsrb $7, %eax, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vpinsrb $8, %eax, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vpinsrb $9, %eax, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vpinsrb $10, %eax, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vpinsrb $11, %eax, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vpinsrb $12, %eax, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vpinsrb $13, %eax, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vpinsrb $14, %eax, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vpinsrb $15, %eax, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vinserti128 $1, %xmm1, %ymm0, %ymm0
; AVX512REDUCTION-NEXT:    vphrmaxsb %ymm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $al killed $al killed $eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxb_17xi8:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vmovdqa 16(%rdi), %xmm0
; AVX512F-NEXT:    movl $128, %eax
; AVX512F-NEXT:    vpinsrb $1, %eax, %xmm0, %xmm0
; AVX512F-NEXT:    vpinsrb $2, %eax, %xmm0, %xmm0
; AVX512F-NEXT:    vpinsrb $3, %eax, %xmm0, %xmm0
; AVX512F-NEXT:    vpinsrb $4, %eax, %xmm0, %xmm0
; AVX512F-NEXT:    vpinsrb $5, %eax, %xmm0, %xmm0
; AVX512F-NEXT:    vpinsrb $6, %eax, %xmm0, %xmm0
; AVX512F-NEXT:    vpinsrb $7, %eax, %xmm0, %xmm0
; AVX512F-NEXT:    vpinsrb $8, %eax, %xmm0, %xmm0
; AVX512F-NEXT:    vpinsrb $9, %eax, %xmm0, %xmm0
; AVX512F-NEXT:    vpinsrb $10, %eax, %xmm0, %xmm0
; AVX512F-NEXT:    vpinsrb $11, %eax, %xmm0, %xmm0
; AVX512F-NEXT:    vpinsrb $12, %eax, %xmm0, %xmm0
; AVX512F-NEXT:    vpinsrb $13, %eax, %xmm0, %xmm0
; AVX512F-NEXT:    vpinsrb $14, %eax, %xmm0, %xmm0
; AVX512F-NEXT:    vpinsrb $15, %eax, %xmm0, %xmm0
; AVX512F-NEXT:    vpmaxsb (%rdi), %xmm0, %xmm0
; AVX512F-NEXT:    vpextrb $1, %xmm0, %eax
; AVX512F-NEXT:    vmovd %xmm0, %ecx
; AVX512F-NEXT:    cmpb %al, %cl
; AVX512F-NEXT:    cmovgl %ecx, %eax
; AVX512F-NEXT:    vpextrb $2, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $3, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $4, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $5, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $6, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $7, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $8, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $9, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $10, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $11, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $12, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $13, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $14, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $15, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    # kill: def $al killed $al killed $eax
; AVX512F-NEXT:    retq
  %vec= load <17 x i8>, ptr %p
  %res = tail call i8 @llvm.vector.reduce.smax.v17i8(<17 x i8> %vec)
  ret i8 %res
}

define i8 @reduce_smaxb_16xi8(<16 x i8> %vec) {
; AVX512REDUCTION-LABEL: reduce_smaxb_16xi8:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vphrmaxsb %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $al killed $al killed $eax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxb_16xi8:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vpxord {{\.?LCPI[0-9]+_[0-9]+}}(%rip){1to4}, %xmm0, %xmm0
; AVX512F-NEXT:    vpsrlw $8, %xmm0, %xmm1
; AVX512F-NEXT:    vpminub %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vphminposuw %xmm0, %xmm0
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    xorb $127, %al
; AVX512F-NEXT:    # kill: def $al killed $al killed $eax
; AVX512F-NEXT:    retq
  %res = tail call i8 @llvm.vector.reduce.smax.v16i8(<16 x i8> %vec)
  ret i8 %res
}

define i8 @reduce_smaxb_13xi8(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_smaxb_13xi8:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vmovdqa (%rdi), %xmm0
; AVX512REDUCTION-NEXT:    movl $128, %eax
; AVX512REDUCTION-NEXT:    vpinsrb $13, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $14, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $15, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vphrmaxsb %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $al killed $al killed $eax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxb_13xi8:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vmovdqa (%rdi), %xmm0
; AVX512F-NEXT:    vpextrb $1, %xmm0, %eax
; AVX512F-NEXT:    vmovd %xmm0, %ecx
; AVX512F-NEXT:    cmpb %al, %cl
; AVX512F-NEXT:    cmovgl %ecx, %eax
; AVX512F-NEXT:    vpextrb $2, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $3, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $4, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $5, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $6, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $7, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $8, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $9, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $10, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $11, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    vpextrb $12, %xmm0, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    cmpb $-127, %al
; AVX512F-NEXT:    movl $128, %ecx
; AVX512F-NEXT:    cmovll %ecx, %eax
; AVX512F-NEXT:    cmpb $-127, %al
; AVX512F-NEXT:    cmovll %ecx, %eax
; AVX512F-NEXT:    cmpb $-127, %al
; AVX512F-NEXT:    cmovll %ecx, %eax
; AVX512F-NEXT:    # kill: def $al killed $al killed $eax
; AVX512F-NEXT:    retq
  %vec= load <13 x i8>, ptr %p
  %res = tail call i8 @llvm.vector.reduce.smax.v13i8(<13 x i8> %vec)
  ret i8 %res
}

define i8 @reduce_smaxb_8xi8(<8 x i8> %vec) {
; AVX512REDUCTION-LABEL: reduce_smaxb_8xi8:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    movl $128, %eax
; AVX512REDUCTION-NEXT:    vpinsrb $8, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $9, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $10, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $11, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $12, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $13, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $14, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $15, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vphrmaxsb %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $al killed $al killed $eax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxb_8xi8:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[1,1,1,1]
; AVX512F-NEXT:    vpmaxsb %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpsrld $16, %xmm0, %xmm1
; AVX512F-NEXT:    vpmaxsb %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpsrlw $8, %xmm0, %xmm1
; AVX512F-NEXT:    vpmaxsb %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    # kill: def $al killed $al killed $eax
; AVX512F-NEXT:    retq
  %res = tail call i8 @llvm.vector.reduce.smax.v8i8(<8 x i8> %vec)
  ret i8 %res
}

define i8 @reduce_smaxb_7xi8(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_smaxb_7xi8:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vmovq {{.*#+}} xmm0 = mem[0],zero
; AVX512REDUCTION-NEXT:    movl $128, %eax
; AVX512REDUCTION-NEXT:    vpinsrb $7, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $8, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $9, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $10, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $11, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $12, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $13, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $14, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $15, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vphrmaxsb %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $al killed $al killed $eax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxb_7xi8:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    movq (%rdi), %rcx
; AVX512F-NEXT:    movq %rcx, %rax
; AVX512F-NEXT:    shrq $8, %rax
; AVX512F-NEXT:    movzbl %al, %edx
; AVX512F-NEXT:    cmpb %al, %cl
; AVX512F-NEXT:    cmovgl %ecx, %edx
; AVX512F-NEXT:    movq %rcx, %rax
; AVX512F-NEXT:    shrq $16, %rax
; AVX512F-NEXT:    movzbl %al, %esi
; AVX512F-NEXT:    cmpb %al, %dl
; AVX512F-NEXT:    cmovgl %edx, %esi
; AVX512F-NEXT:    movq %rcx, %rax
; AVX512F-NEXT:    shrq $24, %rax
; AVX512F-NEXT:    movzbl %al, %edx
; AVX512F-NEXT:    cmpb %al, %sil
; AVX512F-NEXT:    cmovgl %esi, %edx
; AVX512F-NEXT:    movq %rcx, %rax
; AVX512F-NEXT:    shrq $32, %rax
; AVX512F-NEXT:    movzbl %al, %esi
; AVX512F-NEXT:    cmpb %al, %dl
; AVX512F-NEXT:    cmovgl %edx, %esi
; AVX512F-NEXT:    movq %rcx, %rax
; AVX512F-NEXT:    shrq $40, %rax
; AVX512F-NEXT:    movzbl %al, %edx
; AVX512F-NEXT:    cmpb %al, %sil
; AVX512F-NEXT:    cmovgl %esi, %edx
; AVX512F-NEXT:    shrq $48, %rcx
; AVX512F-NEXT:    movzbl %cl, %eax
; AVX512F-NEXT:    cmpb %cl, %dl
; AVX512F-NEXT:    cmovgl %edx, %eax
; AVX512F-NEXT:    cmpb $-127, %al
; AVX512F-NEXT:    movl $128, %ecx
; AVX512F-NEXT:    cmovll %ecx, %eax
; AVX512F-NEXT:    cmpb $-127, %al
; AVX512F-NEXT:    cmovll %ecx, %eax
; AVX512F-NEXT:    cmpb $-127, %al
; AVX512F-NEXT:    cmovll %ecx, %eax
; AVX512F-NEXT:    cmpb $-127, %al
; AVX512F-NEXT:    cmovll %ecx, %eax
; AVX512F-NEXT:    cmpb $-127, %al
; AVX512F-NEXT:    cmovll %ecx, %eax
; AVX512F-NEXT:    cmpb $-127, %al
; AVX512F-NEXT:    cmovll %ecx, %eax
; AVX512F-NEXT:    cmpb $-127, %al
; AVX512F-NEXT:    cmovll %ecx, %eax
; AVX512F-NEXT:    cmpb $-127, %al
; AVX512F-NEXT:    cmovll %ecx, %eax
; AVX512F-NEXT:    cmpb $-127, %al
; AVX512F-NEXT:    cmovll %ecx, %eax
; AVX512F-NEXT:    # kill: def $al killed $al killed $eax
; AVX512F-NEXT:    retq
  %vec= load <7 x i8>, ptr %p
  %res = tail call i8 @llvm.vector.reduce.smax.v7i8(<7 x i8> %vec)
  ret i8 %res
}

define i8 @reduce_smaxb_4xi8(<4 x i8> %vec) {
; AVX512REDUCTION-LABEL: reduce_smaxb_4xi8:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    movl $128, %eax
; AVX512REDUCTION-NEXT:    vpinsrb $4, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $5, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $6, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $7, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $8, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $9, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $10, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $11, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $12, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $13, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $14, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $15, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vphrmaxsb %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $al killed $al killed $eax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxb_4xi8:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vpsrld $16, %xmm0, %xmm1
; AVX512F-NEXT:    vpmaxsb %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpsrlw $8, %xmm0, %xmm1
; AVX512F-NEXT:    vpmaxsb %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    # kill: def $al killed $al killed $eax
; AVX512F-NEXT:    retq
  %res = tail call i8 @llvm.vector.reduce.smax.v4i8(<4 x i8> %vec)
  ret i8 %res
}

define i8 @reduce_smaxb_3xi8(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_smaxb_3xi8:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vmovd {{.*#+}} xmm0 = mem[0],zero,zero,zero
; AVX512REDUCTION-NEXT:    movl $128, %eax
; AVX512REDUCTION-NEXT:    vpinsrb $3, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $4, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $5, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $6, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $7, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $8, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $9, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $10, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $11, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $12, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $13, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $14, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $15, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vphrmaxsb %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $al killed $al killed $eax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxb_3xi8:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    movl (%rdi), %ecx
; AVX512F-NEXT:    movl %ecx, %eax
; AVX512F-NEXT:    shrl $8, %eax
; AVX512F-NEXT:    movzbl %al, %eax
; AVX512F-NEXT:    cmpb %al, %cl
; AVX512F-NEXT:    cmovgl %ecx, %eax
; AVX512F-NEXT:    shrl $16, %ecx
; AVX512F-NEXT:    movzbl %cl, %ecx
; AVX512F-NEXT:    cmpb %cl, %al
; AVX512F-NEXT:    cmovlel %ecx, %eax
; AVX512F-NEXT:    cmpb $-127, %al
; AVX512F-NEXT:    movl $128, %ecx
; AVX512F-NEXT:    cmovll %ecx, %eax
; AVX512F-NEXT:    cmpb $-127, %al
; AVX512F-NEXT:    cmovll %ecx, %eax
; AVX512F-NEXT:    cmpb $-127, %al
; AVX512F-NEXT:    cmovll %ecx, %eax
; AVX512F-NEXT:    cmpb $-127, %al
; AVX512F-NEXT:    cmovll %ecx, %eax
; AVX512F-NEXT:    cmpb $-127, %al
; AVX512F-NEXT:    cmovll %ecx, %eax
; AVX512F-NEXT:    cmpb $-127, %al
; AVX512F-NEXT:    cmovll %ecx, %eax
; AVX512F-NEXT:    cmpb $-127, %al
; AVX512F-NEXT:    cmovll %ecx, %eax
; AVX512F-NEXT:    cmpb $-127, %al
; AVX512F-NEXT:    cmovll %ecx, %eax
; AVX512F-NEXT:    cmpb $-127, %al
; AVX512F-NEXT:    cmovll %ecx, %eax
; AVX512F-NEXT:    cmpb $-127, %al
; AVX512F-NEXT:    cmovll %ecx, %eax
; AVX512F-NEXT:    cmpb $-127, %al
; AVX512F-NEXT:    cmovll %ecx, %eax
; AVX512F-NEXT:    cmpb $-127, %al
; AVX512F-NEXT:    cmovll %ecx, %eax
; AVX512F-NEXT:    cmpb $-127, %al
; AVX512F-NEXT:    cmovll %ecx, %eax
; AVX512F-NEXT:    # kill: def $al killed $al killed $eax
; AVX512F-NEXT:    retq
  %vec= load <3 x i8>, ptr %p
  %res = tail call i8 @llvm.vector.reduce.smax.v3i8(<3 x i8> %vec)
  ret i8 %res
}

define i8 @reduce_smaxb_2xi8(<2 x i8> %vec) {
; AVX512REDUCTION-LABEL: reduce_smaxb_2xi8:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    movl $128, %eax
; AVX512REDUCTION-NEXT:    vpinsrb $2, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $3, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $4, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $5, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $6, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $7, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $8, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $9, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $10, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $11, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $12, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $13, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $14, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpinsrb $15, %eax, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vphrmaxsb %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $al killed $al killed $eax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_smaxb_2xi8:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vpsrlw $8, %xmm0, %xmm1
; AVX512F-NEXT:    vpmaxsb %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    # kill: def $al killed $al killed $eax
; AVX512F-NEXT:    retq
  %res = tail call i8 @llvm.vector.reduce.smax.v2i8(<2 x i8> %vec)
  ret i8 %res
}

define i8 @reduce_smaxb_1xi8(<1 x i8> %vec) {
; ALL-LABEL: reduce_smaxb_1xi8:
; ALL:       # %bb.0:
; ALL-NEXT:    movl %edi, %eax
; ALL-NEXT:    # kill: def $al killed $al killed $eax
; ALL-NEXT:    retq
  %res = tail call i8 @llvm.vector.reduce.smax.v1i8(<1 x i8> %vec)
  ret i8 %res
}

declare i8 @llvm.vector.reduce.smax.v65i8(<65 x i8>)
declare i8 @llvm.vector.reduce.smax.v64i8(<64 x i8>)
declare i8 @llvm.vector.reduce.smax.v33i8(<33 x i8>)
declare i8 @llvm.vector.reduce.smax.v32i8(<32 x i8>)
declare i8 @llvm.vector.reduce.smax.v17i8(<17 x i8>)
declare i8 @llvm.vector.reduce.smax.v16i8(<16 x i8>)
declare i8 @llvm.vector.reduce.smax.v13i8(<13 x i8>)
declare i8 @llvm.vector.reduce.smax.v8i8(<8 x i8>)
declare i8 @llvm.vector.reduce.smax.v7i8(<7 x i8>)
declare i8 @llvm.vector.reduce.smax.v4i8(<4 x i8>)
declare i8 @llvm.vector.reduce.smax.v3i8(<3 x i8>)
declare i8 @llvm.vector.reduce.smax.v2i8(<2 x i8>)
declare i8 @llvm.vector.reduce.smax.v1i8(<1 x i8>)
