; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_avx512_reduction
; RUN: llc < %s -verify-machineinstrs -mtriple=x86_64-unknown-unknown -mattr=+avx512reduction,+avx512vl | FileCheck %s --check-prefixes=ALL,AVX512REDUCTION
; RUN: llc < %s -verify-machineinstrs -mtriple=x86_64-unknown-unknown -mattr=+avx512f,+avx512vl | FileCheck %s --check-prefixes=ALL,AVX512F

define i64 @reduce_xorq_13xi64(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_xorq_13xi64:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vmovdqa64 64(%rdi), %zmm0
; AVX512REDUCTION-NEXT:    vpandq {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm0, %zmm0
; AVX512REDUCTION-NEXT:    movb $127, %al
; AVX512REDUCTION-NEXT:    kmovw %eax, %k1
; AVX512REDUCTION-NEXT:    vpexpandq %zmm0, %zmm0 {%k1} {z}
; AVX512REDUCTION-NEXT:    vpxorq (%rdi), %zmm0, %zmm0
; AVX512REDUCTION-NEXT:    vphrxorq %zmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovq %xmm0, %rax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xorq_13xi64:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vmovdqa64 64(%rdi), %zmm0
; AVX512F-NEXT:    vpandq {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm0, %zmm0
; AVX512F-NEXT:    movb $127, %al
; AVX512F-NEXT:    kmovw %eax, %k1
; AVX512F-NEXT:    vpexpandq %zmm0, %zmm0 {%k1} {z}
; AVX512F-NEXT:    vpxorq (%rdi), %zmm0, %zmm0
; AVX512F-NEXT:    vextracti64x4 $1, %zmm0, %ymm1
; AVX512F-NEXT:    vpxor %ymm1, %ymm0, %ymm0
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpextrq $1, %xmm0, %rcx
; AVX512F-NEXT:    vmovq %xmm0, %rax
; AVX512F-NEXT:    xorq %rcx, %rax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %vec= load <13 x i64>, ptr %p
  %res = tail call i64 @llvm.vector.reduce.xor.v13i64(<13 x i64> %vec)
  ret i64 %res
}

define i64 @reduce_xorq_8xi64(<8 x i64> %vec) {
; AVX512REDUCTION-LABEL: reduce_xorq_8xi64:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vphrxorq %zmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovq %xmm0, %rax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xorq_8xi64:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vextracti64x4 $1, %zmm0, %ymm1
; AVX512F-NEXT:    vpxorq %zmm1, %zmm0, %zmm0
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[2,3,2,3]
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vmovq %xmm0, %rax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %res = tail call i64 @llvm.vector.reduce.xor.v8i64(<8 x i64> %vec)
  ret i64 %res
}

define i64 @reduce_xorq_7xi64(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_xorq_7xi64:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    movb $127, %al
; AVX512REDUCTION-NEXT:    kmovw %eax, %k1
; AVX512REDUCTION-NEXT:    vpexpandq (%rdi), %zmm0 {%k1} {z}
; AVX512REDUCTION-NEXT:    vphrxorq %zmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovq %xmm0, %rax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xorq_7xi64:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    movb $127, %al
; AVX512F-NEXT:    kmovw %eax, %k1
; AVX512F-NEXT:    vpexpandq (%rdi), %zmm0 {%k1} {z}
; AVX512F-NEXT:    vextracti64x4 $1, %zmm0, %ymm0
; AVX512F-NEXT:    vpxor (%rdi), %ymm0, %ymm0
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpextrq $1, %xmm0, %rcx
; AVX512F-NEXT:    vmovq %xmm0, %rax
; AVX512F-NEXT:    xorq %rcx, %rax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %vec= load <7 x i64>, ptr %p
  %res = tail call i64 @llvm.vector.reduce.xor.v7i64(<7 x i64> %vec)
  ret i64 %res
}

define i64 @reduce_xorq_4xi64(<4 x i64> %vec) {
; AVX512REDUCTION-LABEL: reduce_xorq_4xi64:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vphrxorq %ymm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovq %xmm0, %rax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xorq_4xi64:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[2,3,2,3]
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vmovq %xmm0, %rax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %res = tail call i64 @llvm.vector.reduce.xor.v4i64(<4 x i64> %vec)
  ret i64 %res
}

define i64 @reduce_xorq_3xi64(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_xorq_3xi64:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vblendps {{.*#+}} ymm0 = mem[0,1,2,3,4,5],ymm0[6,7]
; AVX512REDUCTION-NEXT:    vphrxorq %ymm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovq %xmm0, %rax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xorq_3xi64:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vmovdqa (%rdi), %xmm0
; AVX512F-NEXT:    vpxor 16(%rdi), %xmm0, %xmm0
; AVX512F-NEXT:    vmovq %xmm0, %rax
; AVX512F-NEXT:    xorq 8(%rdi), %rax
; AVX512F-NEXT:    retq
  %vec= load <3 x i64>, ptr %p
  %res = tail call i64 @llvm.vector.reduce.xor.v3i64(<3 x i64> %vec)
  ret i64 %res
}

define i64 @reduce_xorq_2xi64(<2 x i64> %vec) {
; AVX512REDUCTION-LABEL: reduce_xorq_2xi64:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vphrxorq %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovq %xmm0, %rax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xorq_2xi64:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[2,3,2,3]
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vmovq %xmm0, %rax
; AVX512F-NEXT:    retq
  %res = tail call i64 @llvm.vector.reduce.xor.v2i64(<2 x i64> %vec)
  ret i64 %res
}

define i64 @reduce_xorq_1xi64(<1 x i64> %vec) {
; ALL-LABEL: reduce_xorq_1xi64:
; ALL:       # %bb.0:
; ALL-NEXT:    movq %rdi, %rax
; ALL-NEXT:    retq
  %res = tail call i64 @llvm.vector.reduce.xor.v1i64(<1 x i64> %vec)
  ret i64 %res
}

declare i64 @llvm.vector.reduce.xor.v13i64(<13 x i64>)
declare i64 @llvm.vector.reduce.xor.v8i64(<8 x i64>)
declare i64 @llvm.vector.reduce.xor.v7i64(<7 x i64>)
declare i64 @llvm.vector.reduce.xor.v4i64(<4 x i64>)
declare i64 @llvm.vector.reduce.xor.v3i64(<3 x i64>)
declare i64 @llvm.vector.reduce.xor.v2i64(<2 x i64>)
declare i64 @llvm.vector.reduce.xor.v1i64(<1 x i64>)

define i32 @reduce_xord_17xi32(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_xord_17xi32:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vmovd {{.*#+}} xmm0 = mem[0],zero,zero,zero
; AVX512REDUCTION-NEXT:    vpxord (%rdi), %zmm0, %zmm0
; AVX512REDUCTION-NEXT:    vphrxord %zmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xord_17xi32:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vmovdqa (%rdi), %ymm0
; AVX512F-NEXT:    vmovd {{.*#+}} xmm1 = mem[0],zero,zero,zero
; AVX512F-NEXT:    vpternlogd $150, 32(%rdi), %ymm0, %ymm1
; AVX512F-NEXT:    vextracti128 $1, %ymm1, %xmm0
; AVX512F-NEXT:    vpxor %xmm0, %xmm1, %xmm0
; AVX512F-NEXT:    vpextrd $1, %xmm0, %eax
; AVX512F-NEXT:    vmovd %xmm0, %ecx
; AVX512F-NEXT:    xorl %eax, %ecx
; AVX512F-NEXT:    vpextrd $2, %xmm0, %edx
; AVX512F-NEXT:    vpextrd $3, %xmm0, %eax
; AVX512F-NEXT:    xorl %edx, %eax
; AVX512F-NEXT:    xorl %ecx, %eax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %vec= load <17 x i32>, ptr %p
  %res = tail call i32 @llvm.vector.reduce.xor.v17i32(<17 x i32> %vec)
  ret i32 %res
}

define i32 @reduce_xord_16xi32(<16 x i32> %vec) {
; AVX512REDUCTION-LABEL: reduce_xord_16xi32:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vphrxord %zmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xord_16xi32:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vextracti64x4 $1, %zmm0, %ymm1
; AVX512F-NEXT:    vpxord %zmm1, %zmm0, %zmm0
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[2,3,2,3]
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[1,1,1,1]
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %res = tail call i32 @llvm.vector.reduce.xor.v16i32(<16 x i32> %vec)
  ret i32 %res
}

define i32 @reduce_xord_13xi32(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_xord_13xi32:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vmovdqa64 (%rdi), %zmm0
; AVX512REDUCTION-NEXT:    vpandd {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm0, %zmm0
; AVX512REDUCTION-NEXT:    movw $32767, %ax # imm = 0x7FFF
; AVX512REDUCTION-NEXT:    kmovw %eax, %k1
; AVX512REDUCTION-NEXT:    vpexpandd %zmm0, %zmm0 {%k1} {z}
; AVX512REDUCTION-NEXT:    vphrxord %zmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xord_13xi32:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vmovdqa64 (%rdi), %zmm0
; AVX512F-NEXT:    vpandd {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm0, %zmm0
; AVX512F-NEXT:    movw $32767, %ax # imm = 0x7FFF
; AVX512F-NEXT:    kmovw %eax, %k1
; AVX512F-NEXT:    vpexpandd %zmm0, %zmm0 {%k1} {z}
; AVX512F-NEXT:    vextracti64x4 $1, %zmm0, %ymm0
; AVX512F-NEXT:    vpxor (%rdi), %ymm0, %ymm0
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpextrd $1, %xmm0, %eax
; AVX512F-NEXT:    vmovd %xmm0, %ecx
; AVX512F-NEXT:    xorl %eax, %ecx
; AVX512F-NEXT:    vpextrd $2, %xmm0, %edx
; AVX512F-NEXT:    vpextrd $3, %xmm0, %eax
; AVX512F-NEXT:    xorl %edx, %eax
; AVX512F-NEXT:    xorl %ecx, %eax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %vec= load <13 x i32>, ptr %p
  %res = tail call i32 @llvm.vector.reduce.xor.v13i32(<13 x i32> %vec)
  ret i32 %res
}

define i32 @reduce_xord_8xi32(<8 x i32> %vec) {
; AVX512REDUCTION-LABEL: reduce_xord_8xi32:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vphrxord %ymm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xord_8xi32:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[2,3,2,3]
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[1,1,1,1]
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %res = tail call i32 @llvm.vector.reduce.xor.v8i32(<8 x i32> %vec)
  ret i32 %res
}

define i32 @reduce_xord_7xi32(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_xord_7xi32:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vblendps {{.*#+}} ymm0 = mem[0,1,2,3,4,5,6],ymm0[7]
; AVX512REDUCTION-NEXT:    vphrxord %ymm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xord_7xi32:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vmovdqa (%rdi), %xmm0
; AVX512F-NEXT:    vpxor 16(%rdi), %xmm0, %xmm0
; AVX512F-NEXT:    vpextrd $1, %xmm0, %eax
; AVX512F-NEXT:    vmovd %xmm0, %ecx
; AVX512F-NEXT:    xorl %eax, %ecx
; AVX512F-NEXT:    vpextrd $2, %xmm0, %eax
; AVX512F-NEXT:    xorl %ecx, %eax
; AVX512F-NEXT:    xorl 12(%rdi), %eax
; AVX512F-NEXT:    retq
  %vec= load <7 x i32>, ptr %p
  %res = tail call i32 @llvm.vector.reduce.xor.v7i32(<7 x i32> %vec)
  ret i32 %res
}

define i32 @reduce_xord_4xi32(<4 x i32> %vec) {
; AVX512REDUCTION-LABEL: reduce_xord_4xi32:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vphrxord %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xord_4xi32:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[2,3,2,3]
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[1,1,1,1]
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    retq
  %res = tail call i32 @llvm.vector.reduce.xor.v4i32(<4 x i32> %vec)
  ret i32 %res
}

define i32 @reduce_xord_3xi32(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_xord_3xi32:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vblendps {{.*#+}} xmm0 = mem[0,1,2],xmm0[3]
; AVX512REDUCTION-NEXT:    vphrxord %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xord_3xi32:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    movl (%rdi), %eax
; AVX512F-NEXT:    xorl 4(%rdi), %eax
; AVX512F-NEXT:    xorl 8(%rdi), %eax
; AVX512F-NEXT:    retq
  %vec= load <3 x i32>, ptr %p
  %res = tail call i32 @llvm.vector.reduce.xor.v3i32(<3 x i32> %vec)
  ret i32 %res
}

define i32 @reduce_xord_2xi32(<2 x i32> %vec) {
; AVX512REDUCTION-LABEL: reduce_xord_2xi32:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vmovq {{.*#+}} xmm0 = xmm0[0],zero
; AVX512REDUCTION-NEXT:    vphrxord %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xord_2xi32:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[1,1,1,1]
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    retq
  %res = tail call i32 @llvm.vector.reduce.xor.v2i32(<2 x i32> %vec)
  ret i32 %res
}

define i32 @reduce_xord_1xi32(<1 x i32> %vec) {
; ALL-LABEL: reduce_xord_1xi32:
; ALL:       # %bb.0:
; ALL-NEXT:    movl %edi, %eax
; ALL-NEXT:    retq
  %res = tail call i32 @llvm.vector.reduce.xor.v1i32(<1 x i32> %vec)
  ret i32 %res
}

declare i32 @llvm.vector.reduce.xor.v17i32(<17 x i32>)
declare i32 @llvm.vector.reduce.xor.v16i32(<16 x i32>)
declare i32 @llvm.vector.reduce.xor.v13i32(<13 x i32>)
declare i32 @llvm.vector.reduce.xor.v8i32(<8 x i32>)
declare i32 @llvm.vector.reduce.xor.v7i32(<7 x i32>)
declare i32 @llvm.vector.reduce.xor.v4i32(<4 x i32>)
declare i32 @llvm.vector.reduce.xor.v3i32(<3 x i32>)
declare i32 @llvm.vector.reduce.xor.v2i32(<2 x i32>)
declare i32 @llvm.vector.reduce.xor.v1i32(<1 x i32>)

define i16 @reduce_xorw_33xi16(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_xorw_33xi16:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    movzwl 64(%rdi), %eax
; AVX512REDUCTION-NEXT:    vmovd %eax, %xmm0
; AVX512REDUCTION-NEXT:    vpxorq (%rdi), %zmm0, %zmm0
; AVX512REDUCTION-NEXT:    vphrxorw %zmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xorw_33xi16:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    movzwl 64(%rdi), %eax
; AVX512F-NEXT:    vmovdqa (%rdi), %ymm0
; AVX512F-NEXT:    vmovd %eax, %xmm1
; AVX512F-NEXT:    vpternlogq $150, 32(%rdi), %ymm0, %ymm1
; AVX512F-NEXT:    vextracti128 $1, %ymm1, %xmm0
; AVX512F-NEXT:    vpxor %xmm0, %xmm1, %xmm0
; AVX512F-NEXT:    vpextrw $1, %xmm0, %eax
; AVX512F-NEXT:    vmovd %xmm0, %ecx
; AVX512F-NEXT:    xorl %eax, %ecx
; AVX512F-NEXT:    vpextrw $2, %xmm0, %eax
; AVX512F-NEXT:    vpextrw $3, %xmm0, %edx
; AVX512F-NEXT:    xorl %eax, %edx
; AVX512F-NEXT:    xorl %ecx, %edx
; AVX512F-NEXT:    vpextrw $4, %xmm0, %eax
; AVX512F-NEXT:    vpextrw $5, %xmm0, %ecx
; AVX512F-NEXT:    xorl %eax, %ecx
; AVX512F-NEXT:    vpextrw $6, %xmm0, %esi
; AVX512F-NEXT:    xorl %ecx, %esi
; AVX512F-NEXT:    xorl %edx, %esi
; AVX512F-NEXT:    vpextrw $7, %xmm0, %eax
; AVX512F-NEXT:    xorl %esi, %eax
; AVX512F-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %vec= load <33 x i16>, ptr %p
  %res = tail call i16 @llvm.vector.reduce.xor.v33i16(<33 x i16> %vec)
  ret i16 %res
}

define i16 @reduce_xorw_32xi16(<32 x i16> %vec) {
; AVX512REDUCTION-LABEL: reduce_xorw_32xi16:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vphrxorw %zmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xorw_32xi16:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vextracti64x4 $1, %zmm0, %ymm1
; AVX512F-NEXT:    vpxorq %zmm1, %zmm0, %zmm0
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[2,3,2,3]
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[1,1,1,1]
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpsrld $16, %xmm0, %xmm1
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %res = tail call i16 @llvm.vector.reduce.xor.v32i16(<32 x i16> %vec)
  ret i16 %res
}

define i16 @reduce_xorw_17xi16(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_xorw_17xi16:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vmovdqa64 (%rdi), %zmm0
; AVX512REDUCTION-NEXT:    vpandq {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm0, %zmm0
; AVX512REDUCTION-NEXT:    vphrxorw %zmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xorw_17xi16:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vmovdqa (%rdi), %xmm0
; AVX512F-NEXT:    vmovdqa 32(%rdi), %xmm1
; AVX512F-NEXT:    vpand {{\.?LCPI[0-9]+_[0-9]+}}+32(%rip), %xmm1, %xmm1
; AVX512F-NEXT:    vpternlogq $150, 16(%rdi), %xmm0, %xmm1
; AVX512F-NEXT:    vpextrw $1, %xmm1, %eax
; AVX512F-NEXT:    vmovd %xmm1, %ecx
; AVX512F-NEXT:    xorl %eax, %ecx
; AVX512F-NEXT:    vpextrw $2, %xmm1, %eax
; AVX512F-NEXT:    vpextrw $3, %xmm1, %edx
; AVX512F-NEXT:    xorl %eax, %edx
; AVX512F-NEXT:    xorl %ecx, %edx
; AVX512F-NEXT:    vpextrw $4, %xmm1, %eax
; AVX512F-NEXT:    vpextrw $5, %xmm1, %ecx
; AVX512F-NEXT:    xorl %eax, %ecx
; AVX512F-NEXT:    vpextrw $6, %xmm1, %esi
; AVX512F-NEXT:    xorl %ecx, %esi
; AVX512F-NEXT:    xorl %edx, %esi
; AVX512F-NEXT:    vpextrw $7, %xmm1, %eax
; AVX512F-NEXT:    xorl %esi, %eax
; AVX512F-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512F-NEXT:    retq
  %vec= load <17 x i16>, ptr %p
  %res = tail call i16 @llvm.vector.reduce.xor.v17i16(<17 x i16> %vec)
  ret i16 %res
}

define i16 @reduce_xorw_16xi16(<16 x i16> %vec) {
; AVX512REDUCTION-LABEL: reduce_xorw_16xi16:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vphrxorw %ymm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xorw_16xi16:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[2,3,2,3]
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[1,1,1,1]
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpsrld $16, %xmm0, %xmm1
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %res = tail call i16 @llvm.vector.reduce.xor.v16i16(<16 x i16> %vec)
  ret i16 %res
}

define i16 @reduce_xorw_13xi16(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_xorw_13xi16:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vmovaps (%rdi), %ymm0
; AVX512REDUCTION-NEXT:    vandps {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %ymm0, %ymm0
; AVX512REDUCTION-NEXT:    vphrxorw %ymm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xorw_13xi16:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vmovdqa (%rdi), %xmm0
; AVX512F-NEXT:    vmovdqa 16(%rdi), %xmm1
; AVX512F-NEXT:    vpternlogq $108, {{\.?LCPI[0-9]+_[0-9]+}}+16(%rip), %xmm0, %xmm1
; AVX512F-NEXT:    vpextrw $1, %xmm1, %eax
; AVX512F-NEXT:    vmovd %xmm1, %ecx
; AVX512F-NEXT:    xorl %eax, %ecx
; AVX512F-NEXT:    vpextrw $2, %xmm1, %eax
; AVX512F-NEXT:    vpextrw $3, %xmm1, %edx
; AVX512F-NEXT:    xorl %eax, %edx
; AVX512F-NEXT:    xorl %ecx, %edx
; AVX512F-NEXT:    vpextrw $4, %xmm1, %eax
; AVX512F-NEXT:    vpextrw $5, %xmm0, %ecx
; AVX512F-NEXT:    xorl %eax, %ecx
; AVX512F-NEXT:    vpextrw $6, %xmm0, %esi
; AVX512F-NEXT:    xorl %ecx, %esi
; AVX512F-NEXT:    xorl %edx, %esi
; AVX512F-NEXT:    vpextrw $7, %xmm0, %eax
; AVX512F-NEXT:    xorl %esi, %eax
; AVX512F-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512F-NEXT:    retq
  %vec= load <13 x i16>, ptr %p
  %res = tail call i16 @llvm.vector.reduce.xor.v13i16(<13 x i16> %vec)
  ret i16 %res
}

define i16 @reduce_xorw_8xi16(<8 x i16> %vec) {
; AVX512REDUCTION-LABEL: reduce_xorw_8xi16:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vphrxorw %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xorw_8xi16:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[2,3,2,3]
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[1,1,1,1]
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpsrld $16, %xmm0, %xmm1
; AVX512F-NEXT:    vpxor %xmm0, %xmm1, %xmm0
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512F-NEXT:    retq
  %res = tail call i16 @llvm.vector.reduce.xor.v8i16(<8 x i16> %vec)
  ret i16 %res
}

define i16 @reduce_xorw_7xi16(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_xorw_7xi16:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vpxor %xmm0, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vpblendw {{.*#+}} xmm0 = mem[0,1,2,3,4,5,6],xmm0[7]
; AVX512REDUCTION-NEXT:    vphrxorw %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xorw_7xi16:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vmovdqa (%rdi), %xmm0
; AVX512F-NEXT:    vpextrw $1, %xmm0, %eax
; AVX512F-NEXT:    vmovd %xmm0, %ecx
; AVX512F-NEXT:    xorl %eax, %ecx
; AVX512F-NEXT:    vpextrw $2, %xmm0, %eax
; AVX512F-NEXT:    vpextrw $3, %xmm0, %edx
; AVX512F-NEXT:    xorl %eax, %edx
; AVX512F-NEXT:    xorl %ecx, %edx
; AVX512F-NEXT:    vpextrw $4, %xmm0, %eax
; AVX512F-NEXT:    vpextrw $5, %xmm0, %ecx
; AVX512F-NEXT:    xorl %eax, %ecx
; AVX512F-NEXT:    vpextrw $6, %xmm0, %eax
; AVX512F-NEXT:    xorl %ecx, %eax
; AVX512F-NEXT:    xorl %edx, %eax
; AVX512F-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512F-NEXT:    retq
  %vec= load <7 x i16>, ptr %p
  %res = tail call i16 @llvm.vector.reduce.xor.v7i16(<7 x i16> %vec)
  ret i16 %res
}

define i16 @reduce_xorw_4xi16(<4 x i16> %vec) {
; AVX512REDUCTION-LABEL: reduce_xorw_4xi16:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vmovq {{.*#+}} xmm0 = xmm0[0],zero
; AVX512REDUCTION-NEXT:    vphrxorw %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xorw_4xi16:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[1,1,1,1]
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpsrld $16, %xmm0, %xmm1
; AVX512F-NEXT:    vpxor %xmm0, %xmm1, %xmm0
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512F-NEXT:    retq
  %res = tail call i16 @llvm.vector.reduce.xor.v4i16(<4 x i16> %vec)
  ret i16 %res
}

define i16 @reduce_xorw_3xi16(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_xorw_3xi16:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vmovq {{.*#+}} xmm0 = mem[0],zero
; AVX512REDUCTION-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vpblendw {{.*#+}} xmm0 = xmm0[0,1,2],xmm1[3,4,5,6,7]
; AVX512REDUCTION-NEXT:    vphrxorw %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xorw_3xi16:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    movq (%rdi), %rax
; AVX512F-NEXT:    movq %rax, %rcx
; AVX512F-NEXT:    shrq $16, %rcx
; AVX512F-NEXT:    xorl %eax, %ecx
; AVX512F-NEXT:    shrq $32, %rax
; AVX512F-NEXT:    xorl %ecx, %eax
; AVX512F-NEXT:    # kill: def $ax killed $ax killed $rax
; AVX512F-NEXT:    retq
  %vec= load <3 x i16>, ptr %p
  %res = tail call i16 @llvm.vector.reduce.xor.v3i16(<3 x i16> %vec)
  ret i16 %res
}

define i16 @reduce_xorw_2xi16(<2 x i16> %vec) {
; AVX512REDUCTION-LABEL: reduce_xorw_2xi16:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vblendps {{.*#+}} xmm0 = xmm0[0],xmm1[1,2,3]
; AVX512REDUCTION-NEXT:    vphrxorw %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xorw_2xi16:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vpsrld $16, %xmm0, %xmm1
; AVX512F-NEXT:    vpxor %xmm0, %xmm1, %xmm0
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX512F-NEXT:    retq
  %res = tail call i16 @llvm.vector.reduce.xor.v2i16(<2 x i16> %vec)
  ret i16 %res
}

define i16 @reduce_xorw_1xi16(<1 x i16> %vec) {
; ALL-LABEL: reduce_xorw_1xi16:
; ALL:       # %bb.0:
; ALL-NEXT:    movl %edi, %eax
; ALL-NEXT:    # kill: def $ax killed $ax killed $eax
; ALL-NEXT:    retq
  %res = tail call i16 @llvm.vector.reduce.xor.v1i16(<1 x i16> %vec)
  ret i16 %res
}

declare i16 @llvm.vector.reduce.xor.v33i16(<33 x i16>)
declare i16 @llvm.vector.reduce.xor.v32i16(<32 x i16>)
declare i16 @llvm.vector.reduce.xor.v17i16(<17 x i16>)
declare i16 @llvm.vector.reduce.xor.v16i16(<16 x i16>)
declare i16 @llvm.vector.reduce.xor.v13i16(<13 x i16>)
declare i16 @llvm.vector.reduce.xor.v8i16(<8 x i16>)
declare i16 @llvm.vector.reduce.xor.v7i16(<7 x i16>)
declare i16 @llvm.vector.reduce.xor.v4i16(<4 x i16>)
declare i16 @llvm.vector.reduce.xor.v3i16(<3 x i16>)
declare i16 @llvm.vector.reduce.xor.v2i16(<2 x i16>)
declare i16 @llvm.vector.reduce.xor.v1i16(<1 x i16>)

define i8 @reduce_xorb_65xi8(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_xorb_65xi8:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    movzbl 64(%rdi), %eax
; AVX512REDUCTION-NEXT:    vmovd %eax, %xmm0
; AVX512REDUCTION-NEXT:    vpxorq (%rdi), %zmm0, %zmm0
; AVX512REDUCTION-NEXT:    vphrxorb %zmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $al killed $al killed $eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xorb_65xi8:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    movzbl 64(%rdi), %eax
; AVX512F-NEXT:    vmovdqa (%rdi), %ymm0
; AVX512F-NEXT:    vmovd %eax, %xmm1
; AVX512F-NEXT:    vpternlogq $150, 32(%rdi), %ymm0, %ymm1
; AVX512F-NEXT:    vextracti128 $1, %ymm1, %xmm0
; AVX512F-NEXT:    vpxor %xmm0, %xmm1, %xmm0
; AVX512F-NEXT:    vpextrb $1, %xmm0, %eax
; AVX512F-NEXT:    vmovd %xmm0, %ecx
; AVX512F-NEXT:    xorl %eax, %ecx
; AVX512F-NEXT:    vpextrb $2, %xmm0, %eax
; AVX512F-NEXT:    vpextrb $3, %xmm0, %edx
; AVX512F-NEXT:    xorl %eax, %edx
; AVX512F-NEXT:    xorl %ecx, %edx
; AVX512F-NEXT:    vpextrb $4, %xmm0, %eax
; AVX512F-NEXT:    vpextrb $5, %xmm0, %ecx
; AVX512F-NEXT:    xorl %eax, %ecx
; AVX512F-NEXT:    vpextrb $6, %xmm0, %eax
; AVX512F-NEXT:    xorl %ecx, %eax
; AVX512F-NEXT:    xorl %edx, %eax
; AVX512F-NEXT:    vpextrb $7, %xmm0, %ecx
; AVX512F-NEXT:    vpextrb $8, %xmm0, %edx
; AVX512F-NEXT:    xorl %ecx, %edx
; AVX512F-NEXT:    vpextrb $9, %xmm0, %ecx
; AVX512F-NEXT:    xorl %edx, %ecx
; AVX512F-NEXT:    vpextrb $10, %xmm0, %edx
; AVX512F-NEXT:    xorl %ecx, %edx
; AVX512F-NEXT:    xorl %eax, %edx
; AVX512F-NEXT:    vpextrb $11, %xmm0, %eax
; AVX512F-NEXT:    vpextrb $12, %xmm0, %ecx
; AVX512F-NEXT:    xorl %eax, %ecx
; AVX512F-NEXT:    vpextrb $13, %xmm0, %eax
; AVX512F-NEXT:    xorl %ecx, %eax
; AVX512F-NEXT:    vpextrb $14, %xmm0, %ecx
; AVX512F-NEXT:    xorl %eax, %ecx
; AVX512F-NEXT:    vpextrb $15, %xmm0, %eax
; AVX512F-NEXT:    xorl %ecx, %eax
; AVX512F-NEXT:    xorl %edx, %eax
; AVX512F-NEXT:    # kill: def $al killed $al killed $eax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %vec= load <65 x i8>, ptr %p
  %res = tail call i8 @llvm.vector.reduce.xor.v65i8(<65 x i8> %vec)
  ret i8 %res
}

define i8 @reduce_xorb_64xi8(<64 x i8> %vec) {
; AVX512REDUCTION-LABEL: reduce_xorb_64xi8:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vphrxorb %zmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $al killed $al killed $eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xorb_64xi8:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vextracti64x4 $1, %zmm0, %ymm1
; AVX512F-NEXT:    vpxorq %zmm1, %zmm0, %zmm0
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[2,3,2,3]
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[1,1,1,1]
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpsrld $16, %xmm0, %xmm1
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpsrlw $8, %xmm0, %xmm1
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    # kill: def $al killed $al killed $eax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %res = tail call i8 @llvm.vector.reduce.xor.v64i8(<64 x i8> %vec)
  ret i8 %res
}

define i8 @reduce_xorb_33xi8(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_xorb_33xi8:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vmovdqa64 (%rdi), %zmm0
; AVX512REDUCTION-NEXT:    vpandq {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm0, %zmm0
; AVX512REDUCTION-NEXT:    vphrxorb %zmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $al killed $al killed $eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xorb_33xi8:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vmovdqa (%rdi), %xmm1
; AVX512F-NEXT:    vmovdqa 32(%rdi), %xmm0
; AVX512F-NEXT:    vpand {{\.?LCPI[0-9]+_[0-9]+}}+32(%rip), %xmm0, %xmm0
; AVX512F-NEXT:    vpternlogq $150, 16(%rdi), %xmm1, %xmm0
; AVX512F-NEXT:    vpextrb $1, %xmm0, %eax
; AVX512F-NEXT:    vmovd %xmm0, %ecx
; AVX512F-NEXT:    xorl %eax, %ecx
; AVX512F-NEXT:    vpextrb $2, %xmm0, %eax
; AVX512F-NEXT:    vpextrb $3, %xmm0, %edx
; AVX512F-NEXT:    xorl %eax, %edx
; AVX512F-NEXT:    xorl %ecx, %edx
; AVX512F-NEXT:    vpextrb $4, %xmm0, %eax
; AVX512F-NEXT:    vpextrb $5, %xmm0, %ecx
; AVX512F-NEXT:    xorl %eax, %ecx
; AVX512F-NEXT:    vpextrb $6, %xmm0, %eax
; AVX512F-NEXT:    xorl %ecx, %eax
; AVX512F-NEXT:    xorl %edx, %eax
; AVX512F-NEXT:    vpextrb $7, %xmm0, %ecx
; AVX512F-NEXT:    vpextrb $8, %xmm0, %edx
; AVX512F-NEXT:    xorl %ecx, %edx
; AVX512F-NEXT:    vpextrb $9, %xmm0, %ecx
; AVX512F-NEXT:    xorl %edx, %ecx
; AVX512F-NEXT:    vpextrb $10, %xmm0, %edx
; AVX512F-NEXT:    xorl %ecx, %edx
; AVX512F-NEXT:    xorl %eax, %edx
; AVX512F-NEXT:    vpextrb $11, %xmm0, %eax
; AVX512F-NEXT:    vpextrb $12, %xmm0, %ecx
; AVX512F-NEXT:    xorl %eax, %ecx
; AVX512F-NEXT:    vpextrb $13, %xmm0, %eax
; AVX512F-NEXT:    xorl %ecx, %eax
; AVX512F-NEXT:    vpextrb $14, %xmm0, %ecx
; AVX512F-NEXT:    xorl %eax, %ecx
; AVX512F-NEXT:    vpextrb $15, %xmm0, %eax
; AVX512F-NEXT:    xorl %ecx, %eax
; AVX512F-NEXT:    xorl %edx, %eax
; AVX512F-NEXT:    # kill: def $al killed $al killed $eax
; AVX512F-NEXT:    retq
  %vec= load <33 x i8>, ptr %p
  %res = tail call i8 @llvm.vector.reduce.xor.v33i8(<33 x i8> %vec)
  ret i8 %res
}

define i8 @reduce_xorb_32xi8(<32 x i8> %vec) {
; AVX512REDUCTION-LABEL: reduce_xorb_32xi8:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vphrxorb %ymm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $al killed $al killed $eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xorb_32xi8:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[2,3,2,3]
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[1,1,1,1]
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpsrld $16, %xmm0, %xmm1
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpsrlw $8, %xmm0, %xmm1
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    # kill: def $al killed $al killed $eax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %res = tail call i8 @llvm.vector.reduce.xor.v32i8(<32 x i8> %vec)
  ret i8 %res
}

define i8 @reduce_xorb_17xi8(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_xorb_17xi8:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vmovaps (%rdi), %ymm0
; AVX512REDUCTION-NEXT:    vandps {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %ymm0, %ymm0
; AVX512REDUCTION-NEXT:    vphrxorb %ymm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $al killed $al killed $eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xorb_17xi8:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vmovdqa (%rdi), %xmm0
; AVX512F-NEXT:    vmovdqa 16(%rdi), %xmm1
; AVX512F-NEXT:    vpextrb $1, %xmm0, %eax
; AVX512F-NEXT:    vpternlogq $108, {{\.?LCPI[0-9]+_[0-9]+}}+16(%rip), %xmm0, %xmm1
; AVX512F-NEXT:    vmovd %xmm1, %ecx
; AVX512F-NEXT:    vpextrb $2, %xmm0, %edx
; AVX512F-NEXT:    xorl %eax, %edx
; AVX512F-NEXT:    vpextrb $3, %xmm0, %eax
; AVX512F-NEXT:    xorl %edx, %eax
; AVX512F-NEXT:    vpextrb $4, %xmm0, %edx
; AVX512F-NEXT:    xorl %eax, %edx
; AVX512F-NEXT:    vpextrb $5, %xmm0, %eax
; AVX512F-NEXT:    xorl %edx, %eax
; AVX512F-NEXT:    xorl %ecx, %eax
; AVX512F-NEXT:    vpextrb $6, %xmm0, %ecx
; AVX512F-NEXT:    vpextrb $7, %xmm0, %edx
; AVX512F-NEXT:    xorl %ecx, %edx
; AVX512F-NEXT:    vpextrb $8, %xmm0, %ecx
; AVX512F-NEXT:    xorl %edx, %ecx
; AVX512F-NEXT:    vpextrb $9, %xmm0, %edx
; AVX512F-NEXT:    xorl %ecx, %edx
; AVX512F-NEXT:    vpextrb $10, %xmm0, %ecx
; AVX512F-NEXT:    xorl %edx, %ecx
; AVX512F-NEXT:    vpextrb $11, %xmm0, %edx
; AVX512F-NEXT:    xorl %ecx, %edx
; AVX512F-NEXT:    xorl %eax, %edx
; AVX512F-NEXT:    vpextrb $12, %xmm0, %eax
; AVX512F-NEXT:    vpextrb $13, %xmm0, %ecx
; AVX512F-NEXT:    xorl %eax, %ecx
; AVX512F-NEXT:    vpextrb $14, %xmm0, %esi
; AVX512F-NEXT:    xorl %ecx, %esi
; AVX512F-NEXT:    vpextrb $15, %xmm0, %eax
; AVX512F-NEXT:    xorl %esi, %eax
; AVX512F-NEXT:    xorl %edx, %eax
; AVX512F-NEXT:    # kill: def $al killed $al killed $eax
; AVX512F-NEXT:    retq
  %vec= load <17 x i8>, ptr %p
  %res = tail call i8 @llvm.vector.reduce.xor.v17i8(<17 x i8> %vec)
  ret i8 %res
}

define i8 @reduce_xorb_16xi8(<16 x i8> %vec) {
; AVX512REDUCTION-LABEL: reduce_xorb_16xi8:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vphrxorb %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $al killed $al killed $eax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xorb_16xi8:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[2,3,2,3]
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[1,1,1,1]
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpsrld $16, %xmm0, %xmm1
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpsrlw $8, %xmm0, %xmm1
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    # kill: def $al killed $al killed $eax
; AVX512F-NEXT:    retq
  %res = tail call i8 @llvm.vector.reduce.xor.v16i8(<16 x i8> %vec)
  ret i8 %res
}

define i8 @reduce_xorb_13xi8(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_xorb_13xi8:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vmovaps (%rdi), %xmm0
; AVX512REDUCTION-NEXT:    vandps {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vphrxorb %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $al killed $al killed $eax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xorb_13xi8:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vmovdqa (%rdi), %xmm0
; AVX512F-NEXT:    vpextrb $1, %xmm0, %eax
; AVX512F-NEXT:    vmovd %xmm0, %ecx
; AVX512F-NEXT:    xorl %eax, %ecx
; AVX512F-NEXT:    vpextrb $2, %xmm0, %eax
; AVX512F-NEXT:    vpextrb $3, %xmm0, %edx
; AVX512F-NEXT:    xorl %eax, %edx
; AVX512F-NEXT:    xorl %ecx, %edx
; AVX512F-NEXT:    vpextrb $4, %xmm0, %eax
; AVX512F-NEXT:    vpextrb $5, %xmm0, %ecx
; AVX512F-NEXT:    xorl %eax, %ecx
; AVX512F-NEXT:    vpextrb $6, %xmm0, %eax
; AVX512F-NEXT:    xorl %ecx, %eax
; AVX512F-NEXT:    xorl %edx, %eax
; AVX512F-NEXT:    vpextrb $7, %xmm0, %ecx
; AVX512F-NEXT:    vpextrb $8, %xmm0, %edx
; AVX512F-NEXT:    xorl %ecx, %edx
; AVX512F-NEXT:    vpextrb $9, %xmm0, %ecx
; AVX512F-NEXT:    xorl %edx, %ecx
; AVX512F-NEXT:    vpextrb $10, %xmm0, %edx
; AVX512F-NEXT:    xorl %ecx, %edx
; AVX512F-NEXT:    xorl %eax, %edx
; AVX512F-NEXT:    vpextrb $11, %xmm0, %ecx
; AVX512F-NEXT:    vpextrb $12, %xmm0, %eax
; AVX512F-NEXT:    xorl %ecx, %eax
; AVX512F-NEXT:    xorl %edx, %eax
; AVX512F-NEXT:    # kill: def $al killed $al killed $eax
; AVX512F-NEXT:    retq
  %vec= load <13 x i8>, ptr %p
  %res = tail call i8 @llvm.vector.reduce.xor.v13i8(<13 x i8> %vec)
  ret i8 %res
}

define i8 @reduce_xorb_8xi8(<8 x i8> %vec) {
; AVX512REDUCTION-LABEL: reduce_xorb_8xi8:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vmovq {{.*#+}} xmm0 = xmm0[0],zero
; AVX512REDUCTION-NEXT:    vphrxorb %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $al killed $al killed $eax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xorb_8xi8:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[1,1,1,1]
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpsrld $16, %xmm0, %xmm1
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpsrlw $8, %xmm0, %xmm1
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    # kill: def $al killed $al killed $eax
; AVX512F-NEXT:    retq
  %res = tail call i8 @llvm.vector.reduce.xor.v8i8(<8 x i8> %vec)
  ret i8 %res
}

define i8 @reduce_xorb_7xi8(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_xorb_7xi8:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; AVX512REDUCTION-NEXT:    vandps {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vphrxorb %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $al killed $al killed $eax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xorb_7xi8:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    movq (%rdi), %rax
; AVX512F-NEXT:    movq %rax, %rcx
; AVX512F-NEXT:    shrq $8, %rcx
; AVX512F-NEXT:    xorl %eax, %ecx
; AVX512F-NEXT:    movq %rax, %rdx
; AVX512F-NEXT:    shrq $16, %rdx
; AVX512F-NEXT:    movl %eax, %esi
; AVX512F-NEXT:    shrl $24, %esi
; AVX512F-NEXT:    xorl %edx, %esi
; AVX512F-NEXT:    xorl %ecx, %esi
; AVX512F-NEXT:    movq %rax, %rcx
; AVX512F-NEXT:    shrq $32, %rcx
; AVX512F-NEXT:    movq %rax, %rdx
; AVX512F-NEXT:    shrq $40, %rdx
; AVX512F-NEXT:    xorl %ecx, %edx
; AVX512F-NEXT:    shrq $48, %rax
; AVX512F-NEXT:    xorl %edx, %eax
; AVX512F-NEXT:    xorl %esi, %eax
; AVX512F-NEXT:    # kill: def $al killed $al killed $rax
; AVX512F-NEXT:    retq
  %vec= load <7 x i8>, ptr %p
  %res = tail call i8 @llvm.vector.reduce.xor.v7i8(<7 x i8> %vec)
  ret i8 %res
}

define i8 @reduce_xorb_4xi8(<4 x i8> %vec) {
; AVX512REDUCTION-LABEL: reduce_xorb_4xi8:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vblendps {{.*#+}} xmm0 = xmm0[0],xmm1[1,2,3]
; AVX512REDUCTION-NEXT:    vphrxorb %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $al killed $al killed $eax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xorb_4xi8:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vpsrld $16, %xmm0, %xmm1
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpsrlw $8, %xmm0, %xmm1
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    # kill: def $al killed $al killed $eax
; AVX512F-NEXT:    retq
  %res = tail call i8 @llvm.vector.reduce.xor.v4i8(<4 x i8> %vec)
  ret i8 %res
}

define i8 @reduce_xorb_3xi8(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_xorb_3xi8:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; AVX512REDUCTION-NEXT:    vandps {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vphrxorb %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $al killed $al killed $eax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xorb_3xi8:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    movl (%rdi), %eax
; AVX512F-NEXT:    movl %eax, %ecx
; AVX512F-NEXT:    shrl $8, %ecx
; AVX512F-NEXT:    xorl %eax, %ecx
; AVX512F-NEXT:    shrl $16, %eax
; AVX512F-NEXT:    xorl %ecx, %eax
; AVX512F-NEXT:    # kill: def $al killed $al killed $eax
; AVX512F-NEXT:    retq
  %vec= load <3 x i8>, ptr %p
  %res = tail call i8 @llvm.vector.reduce.xor.v3i8(<3 x i8> %vec)
  ret i8 %res
}

define i8 @reduce_xorb_2xi8(<2 x i8> %vec) {
; AVX512REDUCTION-LABEL: reduce_xorb_2xi8:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; AVX512REDUCTION-NEXT:    vpblendw {{.*#+}} xmm0 = xmm0[0],xmm1[1,2,3,4,5,6,7]
; AVX512REDUCTION-NEXT:    vphrxorb %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    # kill: def $al killed $al killed $eax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_xorb_2xi8:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vpsrlw $8, %xmm0, %xmm1
; AVX512F-NEXT:    vpxor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    # kill: def $al killed $al killed $eax
; AVX512F-NEXT:    retq
  %res = tail call i8 @llvm.vector.reduce.xor.v2i8(<2 x i8> %vec)
  ret i8 %res
}

define i8 @reduce_xorb_1xi8(<1 x i8> %vec) {
; ALL-LABEL: reduce_xorb_1xi8:
; ALL:       # %bb.0:
; ALL-NEXT:    movl %edi, %eax
; ALL-NEXT:    # kill: def $al killed $al killed $eax
; ALL-NEXT:    retq
  %res = tail call i8 @llvm.vector.reduce.xor.v1i8(<1 x i8> %vec)
  ret i8 %res
}

declare i8 @llvm.vector.reduce.xor.v65i8(<65 x i8>)
declare i8 @llvm.vector.reduce.xor.v64i8(<64 x i8>)
declare i8 @llvm.vector.reduce.xor.v33i8(<33 x i8>)
declare i8 @llvm.vector.reduce.xor.v32i8(<32 x i8>)
declare i8 @llvm.vector.reduce.xor.v17i8(<17 x i8>)
declare i8 @llvm.vector.reduce.xor.v16i8(<16 x i8>)
declare i8 @llvm.vector.reduce.xor.v13i8(<13 x i8>)
declare i8 @llvm.vector.reduce.xor.v8i8(<8 x i8>)
declare i8 @llvm.vector.reduce.xor.v7i8(<7 x i8>)
declare i8 @llvm.vector.reduce.xor.v4i8(<4 x i8>)
declare i8 @llvm.vector.reduce.xor.v3i8(<3 x i8>)
declare i8 @llvm.vector.reduce.xor.v2i8(<2 x i8>)
declare i8 @llvm.vector.reduce.xor.v1i8(<1 x i8>)
