; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_avx512_reduction
; RUN: llc < %s -verify-machineinstrs -mtriple=x86_64-unknown-unknown -mattr=+avx512reduction,+avx512vl | FileCheck %s --check-prefixes=ALL,AVX512REDUCTION
; RUN: llc < %s -verify-machineinstrs -mtriple=x86_64-unknown-unknown -mattr=+avx512f,+avx512vl | FileCheck %s --check-prefixes=ALL,AVX512F

define i64 @reduce_orq_13xi64(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_orq_13xi64:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vmovdqa64 64(%rdi), %zmm0
; AVX512REDUCTION-NEXT:    vpandq {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm0, %zmm0
; AVX512REDUCTION-NEXT:    movb $127, %al
; AVX512REDUCTION-NEXT:    kmovw %eax, %k1
; AVX512REDUCTION-NEXT:    vpexpandq %zmm0, %zmm0 {%k1} {z}
; AVX512REDUCTION-NEXT:    vporq (%rdi), %zmm0, %zmm0
; AVX512REDUCTION-NEXT:    vphrorq %zmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovq %xmm0, %rax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_orq_13xi64:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vmovdqa64 64(%rdi), %zmm0
; AVX512F-NEXT:    vpandq {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm0, %zmm0
; AVX512F-NEXT:    movb $127, %al
; AVX512F-NEXT:    kmovw %eax, %k1
; AVX512F-NEXT:    vpexpandq %zmm0, %zmm0 {%k1} {z}
; AVX512F-NEXT:    vporq (%rdi), %zmm0, %zmm0
; AVX512F-NEXT:    vextracti64x4 $1, %zmm0, %ymm1
; AVX512F-NEXT:    vpor %ymm1, %ymm0, %ymm0
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpextrq $1, %xmm0, %rcx
; AVX512F-NEXT:    vmovq %xmm0, %rax
; AVX512F-NEXT:    orq %rcx, %rax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %vec= load <13 x i64>, ptr %p
  %res = tail call i64 @llvm.vector.reduce.or.v13i64(<13 x i64> %vec)
  ret i64 %res
}

define i64 @reduce_orq_8xi64(<8 x i64> %vec) {
; AVX512REDUCTION-LABEL: reduce_orq_8xi64:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vphrorq %zmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovq %xmm0, %rax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_orq_8xi64:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vextracti64x4 $1, %zmm0, %ymm1
; AVX512F-NEXT:    vporq %zmm1, %zmm0, %zmm0
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[2,3,2,3]
; AVX512F-NEXT:    vpor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vmovq %xmm0, %rax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %res = tail call i64 @llvm.vector.reduce.or.v8i64(<8 x i64> %vec)
  ret i64 %res
}

define i64 @reduce_orq_7xi64(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_orq_7xi64:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    movb $127, %al
; AVX512REDUCTION-NEXT:    kmovw %eax, %k1
; AVX512REDUCTION-NEXT:    vpexpandq (%rdi), %zmm0 {%k1} {z}
; AVX512REDUCTION-NEXT:    vphrorq %zmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovq %xmm0, %rax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_orq_7xi64:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    movb $127, %al
; AVX512F-NEXT:    kmovw %eax, %k1
; AVX512F-NEXT:    vpexpandq (%rdi), %zmm0 {%k1} {z}
; AVX512F-NEXT:    vextracti64x4 $1, %zmm0, %ymm0
; AVX512F-NEXT:    vpor (%rdi), %ymm0, %ymm0
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpextrq $1, %xmm0, %rcx
; AVX512F-NEXT:    vmovq %xmm0, %rax
; AVX512F-NEXT:    orq %rcx, %rax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %vec= load <7 x i64>, ptr %p
  %res = tail call i64 @llvm.vector.reduce.or.v7i64(<7 x i64> %vec)
  ret i64 %res
}

define i64 @reduce_orq_4xi64(<4 x i64> %vec) {
; AVX512REDUCTION-LABEL: reduce_orq_4xi64:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vphrorq %ymm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovq %xmm0, %rax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_orq_4xi64:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[2,3,2,3]
; AVX512F-NEXT:    vpor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vmovq %xmm0, %rax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %res = tail call i64 @llvm.vector.reduce.or.v4i64(<4 x i64> %vec)
  ret i64 %res
}

define i64 @reduce_orq_3xi64(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_orq_3xi64:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vblendps {{.*#+}} ymm0 = mem[0,1,2,3,4,5],ymm0[6,7]
; AVX512REDUCTION-NEXT:    vphrorq %ymm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovq %xmm0, %rax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_orq_3xi64:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vmovdqa (%rdi), %xmm0
; AVX512F-NEXT:    vpor 16(%rdi), %xmm0, %xmm0
; AVX512F-NEXT:    vmovq %xmm0, %rax
; AVX512F-NEXT:    orq 8(%rdi), %rax
; AVX512F-NEXT:    retq
  %vec= load <3 x i64>, ptr %p
  %res = tail call i64 @llvm.vector.reduce.or.v3i64(<3 x i64> %vec)
  ret i64 %res
}

define i64 @reduce_orq_2xi64(<2 x i64> %vec) {
; AVX512REDUCTION-LABEL: reduce_orq_2xi64:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vphrorq %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovq %xmm0, %rax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_orq_2xi64:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[2,3,2,3]
; AVX512F-NEXT:    vpor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vmovq %xmm0, %rax
; AVX512F-NEXT:    retq
  %res = tail call i64 @llvm.vector.reduce.or.v2i64(<2 x i64> %vec)
  ret i64 %res
}

define i64 @reduce_orq_1xi64(<1 x i64> %vec) {
; ALL-LABEL: reduce_orq_1xi64:
; ALL:       # %bb.0:
; ALL-NEXT:    movq %rdi, %rax
; ALL-NEXT:    retq
  %res = tail call i64 @llvm.vector.reduce.or.v1i64(<1 x i64> %vec)
  ret i64 %res
}

declare i64 @llvm.vector.reduce.or.v13i64(<13 x i64>)
declare i64 @llvm.vector.reduce.or.v8i64(<8 x i64>)
declare i64 @llvm.vector.reduce.or.v7i64(<7 x i64>)
declare i64 @llvm.vector.reduce.or.v4i64(<4 x i64>)
declare i64 @llvm.vector.reduce.or.v3i64(<3 x i64>)
declare i64 @llvm.vector.reduce.or.v2i64(<2 x i64>)
declare i64 @llvm.vector.reduce.or.v1i64(<1 x i64>)

define i32 @reduce_orw_17xi32(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_orw_17xi32:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vmovd {{.*#+}} xmm0 = mem[0],zero,zero,zero
; AVX512REDUCTION-NEXT:    vpord (%rdi), %zmm0, %zmm0
; AVX512REDUCTION-NEXT:    vphrord %zmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_orw_17xi32:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vmovdqa (%rdi), %ymm0
; AVX512F-NEXT:    vmovd {{.*#+}} xmm1 = mem[0],zero,zero,zero
; AVX512F-NEXT:    vpternlogd $254, 32(%rdi), %ymm0, %ymm1
; AVX512F-NEXT:    vextracti128 $1, %ymm1, %xmm0
; AVX512F-NEXT:    vpor %xmm0, %xmm1, %xmm0
; AVX512F-NEXT:    vpextrd $1, %xmm0, %eax
; AVX512F-NEXT:    vmovd %xmm0, %ecx
; AVX512F-NEXT:    vpextrd $2, %xmm0, %edx
; AVX512F-NEXT:    orl %eax, %edx
; AVX512F-NEXT:    vpextrd $3, %xmm0, %eax
; AVX512F-NEXT:    orl %edx, %eax
; AVX512F-NEXT:    orl %ecx, %eax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %vec= load <17 x i32>, ptr %p
  %res = tail call i32 @llvm.vector.reduce.or.v17i32(<17 x i32> %vec)
  ret i32 %res
}

define i32 @reduce_orw_16xi32(<16 x i32> %vec) {
; AVX512REDUCTION-LABEL: reduce_orw_16xi32:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vphrord %zmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_orw_16xi32:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vextracti64x4 $1, %zmm0, %ymm1
; AVX512F-NEXT:    vpord %zmm1, %zmm0, %zmm0
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[2,3,2,3]
; AVX512F-NEXT:    vpor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[1,1,1,1]
; AVX512F-NEXT:    vpor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %res = tail call i32 @llvm.vector.reduce.or.v16i32(<16 x i32> %vec)
  ret i32 %res
}

define i32 @reduce_orw_13xi32(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_orw_13xi32:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vmovdqa64 (%rdi), %zmm0
; AVX512REDUCTION-NEXT:    vpandd {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm0, %zmm0
; AVX512REDUCTION-NEXT:    movw $32767, %ax # imm = 0x7FFF
; AVX512REDUCTION-NEXT:    kmovw %eax, %k1
; AVX512REDUCTION-NEXT:    vpexpandd %zmm0, %zmm0 {%k1} {z}
; AVX512REDUCTION-NEXT:    vphrord %zmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_orw_13xi32:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vmovdqa64 (%rdi), %zmm0
; AVX512F-NEXT:    vpandd {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm0, %zmm0
; AVX512F-NEXT:    movw $32767, %ax # imm = 0x7FFF
; AVX512F-NEXT:    kmovw %eax, %k1
; AVX512F-NEXT:    vpexpandd %zmm0, %zmm0 {%k1} {z}
; AVX512F-NEXT:    vextracti64x4 $1, %zmm0, %ymm0
; AVX512F-NEXT:    vpor (%rdi), %ymm0, %ymm0
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpextrd $1, %xmm0, %eax
; AVX512F-NEXT:    vmovd %xmm0, %ecx
; AVX512F-NEXT:    vpextrd $2, %xmm0, %edx
; AVX512F-NEXT:    orl %eax, %edx
; AVX512F-NEXT:    vpextrd $3, %xmm0, %eax
; AVX512F-NEXT:    orl %edx, %eax
; AVX512F-NEXT:    orl %ecx, %eax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %vec= load <13 x i32>, ptr %p
  %res = tail call i32 @llvm.vector.reduce.or.v13i32(<13 x i32> %vec)
  ret i32 %res
}

define i32 @reduce_orw_8xi32(<8 x i32> %vec) {
; AVX512REDUCTION-LABEL: reduce_orw_8xi32:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vphrord %ymm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_orw_8xi32:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX512F-NEXT:    vpor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[2,3,2,3]
; AVX512F-NEXT:    vpor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[1,1,1,1]
; AVX512F-NEXT:    vpor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
  %res = tail call i32 @llvm.vector.reduce.or.v8i32(<8 x i32> %vec)
  ret i32 %res
}

define i32 @reduce_orw_7xi32(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_orw_7xi32:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vblendps {{.*#+}} ymm0 = mem[0,1,2,3,4,5,6],ymm0[7]
; AVX512REDUCTION-NEXT:    vphrord %ymm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    vzeroupper
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_orw_7xi32:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vmovdqa (%rdi), %xmm0
; AVX512F-NEXT:    vpor 16(%rdi), %xmm0, %xmm0
; AVX512F-NEXT:    vpextrd $1, %xmm0, %ecx
; AVX512F-NEXT:    vmovd %xmm0, %edx
; AVX512F-NEXT:    vpextrd $2, %xmm0, %eax
; AVX512F-NEXT:    orl %ecx, %eax
; AVX512F-NEXT:    orl %edx, %eax
; AVX512F-NEXT:    orl 12(%rdi), %eax
; AVX512F-NEXT:    retq
  %vec= load <7 x i32>, ptr %p
  %res = tail call i32 @llvm.vector.reduce.or.v7i32(<7 x i32> %vec)
  ret i32 %res
}

define i32 @reduce_orw_4xi32(<4 x i32> %vec) {
; AVX512REDUCTION-LABEL: reduce_orw_4xi32:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vphrord %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_orw_4xi32:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[2,3,2,3]
; AVX512F-NEXT:    vpor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[1,1,1,1]
; AVX512F-NEXT:    vpor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    retq
  %res = tail call i32 @llvm.vector.reduce.or.v4i32(<4 x i32> %vec)
  ret i32 %res
}

define i32 @reduce_orw_3xi32(ptr %p) {
; AVX512REDUCTION-LABEL: reduce_orw_3xi32:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vblendps {{.*#+}} xmm0 = mem[0,1,2],xmm0[3]
; AVX512REDUCTION-NEXT:    vphrord %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_orw_3xi32:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    movl (%rdi), %eax
; AVX512F-NEXT:    orl 4(%rdi), %eax
; AVX512F-NEXT:    orl 8(%rdi), %eax
; AVX512F-NEXT:    retq
  %vec= load <3 x i32>, ptr %p
  %res = tail call i32 @llvm.vector.reduce.or.v3i32(<3 x i32> %vec)
  ret i32 %res
}

define i32 @reduce_orw_2xi32(<2 x i32> %vec) {
; AVX512REDUCTION-LABEL: reduce_orw_2xi32:
; AVX512REDUCTION:       # %bb.0:
; AVX512REDUCTION-NEXT:    vmovq {{.*#+}} xmm0 = xmm0[0],zero
; AVX512REDUCTION-NEXT:    vphrord %xmm0, %xmm0
; AVX512REDUCTION-NEXT:    vmovd %xmm0, %eax
; AVX512REDUCTION-NEXT:    retq
;
; AVX512F-LABEL: reduce_orw_2xi32:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vpshufd {{.*#+}} xmm1 = xmm0[1,1,1,1]
; AVX512F-NEXT:    vpor %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vmovd %xmm0, %eax
; AVX512F-NEXT:    retq
  %res = tail call i32 @llvm.vector.reduce.or.v2i32(<2 x i32> %vec)
  ret i32 %res
}

define i32 @reduce_orw_1xi32(<1 x i32> %vec) {
; ALL-LABEL: reduce_orw_1xi32:
; ALL:       # %bb.0:
; ALL-NEXT:    movl %edi, %eax
; ALL-NEXT:    retq
  %res = tail call i32 @llvm.vector.reduce.or.v1i32(<1 x i32> %vec)
  ret i32 %res
}

declare i32 @llvm.vector.reduce.or.v17i32(<17 x i32>)
declare i32 @llvm.vector.reduce.or.v16i32(<16 x i32>)
declare i32 @llvm.vector.reduce.or.v13i32(<13 x i32>)
declare i32 @llvm.vector.reduce.or.v8i32(<8 x i32>)
declare i32 @llvm.vector.reduce.or.v7i32(<7 x i32>)
declare i32 @llvm.vector.reduce.or.v4i32(<4 x i32>)
declare i32 @llvm.vector.reduce.or.v3i32(<3 x i32>)
declare i32 @llvm.vector.reduce.or.v2i32(<2 x i32>)
declare i32 @llvm.vector.reduce.or.v1i32(<1 x i32>)
