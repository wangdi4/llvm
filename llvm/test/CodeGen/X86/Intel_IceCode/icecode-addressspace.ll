; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_icecode
; RUN: llc < %s -mtriple=x86_icecode-unknown-unknown | FileCheck %s

define dso_local void @f1(i32 addrspace(259)* %a, i32 addrspace(260)* %b, i32 addrspace(258)* %c) {
; CHECK-LABEL: f1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    .byte 46
; CHECK-NEXT:    movl (%rsi), %eax
; CHECK-NEXT:    .byte 38
; CHECK-NEXT:    addl (%rdi), %eax
; CHECK-NEXT:    movl %eax, %ss:(%rdx)
; CHECK-NEXT:    retq
entry:
  %0 = load i32, i32 addrspace(259)* %a, align 4
  %1 = load i32, i32 addrspace(260)* %b, align 4
  %add = add nsw i32 %1, %0
  store i32 %add, i32 addrspace(258)* %c, align 4
  ret void
}

define dso_local void @f2(i32 addrspace(261)* %a, i32 addrspace(257)* %b, i32 addrspace(256)* %c) {
; CHECK-LABEL: f2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movl %fs:(%rsi), %eax
; CHECK-NEXT:    .byte 62
; CHECK-NEXT:    addl (%rdi), %eax
; CHECK-NEXT:    movl %eax, %gs:(%rdx)
; CHECK-NEXT:    retq
entry:
  %0 = load i32, i32 addrspace(261)* %a, align 4
  %1 = load i32, i32 addrspace(257)* %b, align 4
  %add = add nsw i32 %1, %0
  store i32 %add, i32 addrspace(256)* %c, align 4
  ret void
}

define dso_local void @f3(i32 addrspace(262)* %a, i32 addrspace(266)* %b, i32 addrspace(267)* %c) {
; CHECK-LABEL: f3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    .short 61990
; CHECK-NEXT:    movl (%rsi), %eax
; CHECK-NEXT:    .byte 242
; CHECK-NEXT:    addl (%rdi), %eax
; CHECK-NEXT:    .short 61998
; CHECK-NEXT:    movl %eax, (%rdx)
; CHECK-NEXT:    retq
entry:
  %0 = load i32, i32 addrspace(262)* %a, align 4
  %1 = load i32, i32 addrspace(266)* %b, align 4
  %add = add nsw i32 %1, %0
  store i32 %add, i32 addrspace(267)* %c, align 4
  ret void
}

define dso_local void @f4(i32 addrspace(265)* %a, i32 addrspace(268)* %b, i32 addrspace(264)* %c) {
; CHECK-LABEL: f4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    .short 62014
; CHECK-NEXT:    movl (%rsi), %eax
; CHECK-NEXT:    .short 62006
; CHECK-NEXT:    addl (%rdi), %eax
; CHECK-NEXT:    .short 62052
; CHECK-NEXT:    movl %eax, (%rdx)
; CHECK-NEXT:    retq
entry:
  %0 = load i32, i32 addrspace(265)* %a, align 4
  %1 = load i32, i32 addrspace(268)* %b, align 4
  %add = add nsw i32 %1, %0
  store i32 %add, i32 addrspace(264)* %c, align 4
  ret void
}
