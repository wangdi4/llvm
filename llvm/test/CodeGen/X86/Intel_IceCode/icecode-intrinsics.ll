; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_icecode
; RUN: llc < %s -mtriple=x86_icecode-unknown-unknown | FileCheck %s

declare i16 @llvm.x86.icecode.loadpphys.16(i8*)
declare i32 @llvm.x86.icecode.loadpphys.32(i8*)
declare i64 @llvm.x86.icecode.loadpphys.64(i8*)
declare void @llvm.x86.icecode.storepphys.16(i16, i8*)
declare void @llvm.x86.icecode.storepphys.32(i32, i8*)
declare void @llvm.x86.icecode.storepphys.64(i64, i8*)
declare void @llvm.x86.icecode.loadseg(i8*, i32)
declare void @llvm.x86.icecode.storeseg(i8*, i32)

define i16 @loadpphys16(i8* %addr) {
; CHECK-LABEL: loadpphys16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    gmovpphysw (%rdi), %ax
; CHECK-NEXT:    retq
  %res = call i16 @llvm.x86.icecode.loadpphys.16(i8* %addr)
  ret i16 %res
}

define i32 @loadpphys32(i8* %addr) {
; CHECK-LABEL: loadpphys32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    gmovpphysl (%rdi), %eax
; CHECK-NEXT:    retq
  %res = call i32 @llvm.x86.icecode.loadpphys.32(i8* %addr)
  ret i32 %res
}

define i64 @loadpphys64(i8* %addr) {
; CHECK-LABEL: loadpphys64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    gmovpphysq (%rdi), %rax
; CHECK-NEXT:    retq
  %res = call i64 @llvm.x86.icecode.loadpphys.64(i8* %addr)
  ret i64 %res
}

define void @storepphys16(i16 %val, i8* %addr) {
; CHECK-LABEL: storepphys16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    gmovpphysw %di, (%rsi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.storepphys.16(i16 %val, i8* %addr)
  ret void
}

define void @storepphys32(i32 %val, i8* %addr) {
; CHECK-LABEL: storepphys32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    gmovpphysl %edi, (%rsi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.storepphys.32(i32 %val, i8* %addr)
  ret void
}

define void @storepphys64(i64 %val, i8* %addr) {
; CHECK-LABEL: storepphys64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    gmovpphysq %rdi, (%rsi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.storepphys.64(i64 %val, i8* %addr)
  ret void
}

define void @loadseg(i8* %addr) {
; CHECK-LABEL: loadseg:
; CHECK:       # %bb.0:
; CHECK-NEXT:    loadseg (%rdi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.loadseg(i8* %addr, i32 0)
  ret void
}

define void @loadseg_cs(i8* %addr) {
; CHECK-LABEL: loadseg_cs:
; CHECK:       # %bb.0:
; CHECK-NEXT:    loadseg %cs:(%rdi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.loadseg(i8* %addr, i32 1)
  ret void
}

define void @loadseg_ds(i8* %addr) {
; CHECK-LABEL: loadseg_ds:
; CHECK:       # %bb.0:
; CHECK-NEXT:    loadseg %ds:(%rdi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.loadseg(i8* %addr, i32 2)
  ret void
}

define void @loadseg_ss(i8* %addr) {
; CHECK-LABEL: loadseg_ss:
; CHECK:       # %bb.0:
; CHECK-NEXT:    loadseg %ss:(%rdi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.loadseg(i8* %addr, i32 3)
  ret void
}

define void @loadseg_es(i8* %addr) {
; CHECK-LABEL: loadseg_es:
; CHECK:       # %bb.0:
; CHECK-NEXT:    loadseg %es:(%rdi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.loadseg(i8* %addr, i32 4)
  ret void
}

define void @loadseg_fs(i8* %addr) {
; CHECK-LABEL: loadseg_fs:
; CHECK:       # %bb.0:
; CHECK-NEXT:    loadseg %fs:(%rdi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.loadseg(i8* %addr, i32 5)
  ret void
}

define void @loadseg_gs(i8* %addr) {
; CHECK-LABEL: loadseg_gs:
; CHECK:       # %bb.0:
; CHECK-NEXT:    loadseg %gs:(%rdi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.loadseg(i8* %addr, i32 6)
  ret void
}

define void @storeseg(i8* %addr) {
; CHECK-LABEL: storeseg:
; CHECK:       # %bb.0:
; CHECK-NEXT:    storeseg (%rdi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.storeseg(i8* %addr, i32 0)
  ret void
}

define void @storeseg_cs(i8* %addr) {
; CHECK-LABEL: storeseg_cs:
; CHECK:       # %bb.0:
; CHECK-NEXT:    storeseg %cs:(%rdi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.storeseg(i8* %addr, i32 1)
  ret void
}

define void @storeseg_ds(i8* %addr) {
; CHECK-LABEL: storeseg_ds:
; CHECK:       # %bb.0:
; CHECK-NEXT:    storeseg %ds:(%rdi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.storeseg(i8* %addr, i32 2)
  ret void
}

define void @storeseg_ss(i8* %addr) {
; CHECK-LABEL: storeseg_ss:
; CHECK:       # %bb.0:
; CHECK-NEXT:    storeseg %ss:(%rdi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.storeseg(i8* %addr, i32 3)
  ret void
}

define void @storeseg_es(i8* %addr) {
; CHECK-LABEL: storeseg_es:
; CHECK:       # %bb.0:
; CHECK-NEXT:    storeseg %es:(%rdi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.storeseg(i8* %addr, i32 4)
  ret void
}

define void @storeseg_fs(i8* %addr) {
; CHECK-LABEL: storeseg_fs:
; CHECK:       # %bb.0:
; CHECK-NEXT:    storeseg %fs:(%rdi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.storeseg(i8* %addr, i32 5)
  ret void
}

define void @storeseg_gs(i8* %addr) {
; CHECK-LABEL: storeseg_gs:
; CHECK:       # %bb.0:
; CHECK-NEXT:    storeseg %gs:(%rdi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.storeseg(i8* %addr, i32 6)
  ret void
}

declare i32 @llvm.x86.icecode.creg.xchg.32(i32, i32)
declare i64 @llvm.x86.icecode.creg.xchg.64(i32, i64)
declare i32 @llvm.x86.icecode.fscp.xchg.32(i32, i32)
declare i64 @llvm.x86.icecode.fscp.xchg.64(i32, i64)

define i32 @creg_xchg32(i32 %reg, i32 %v) {
; CHECK-LABEL: creg_xchg32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    # kill: def $esi killed $esi def $rsi
; CHECK-NEXT:    movl %esi, %eax
; CHECK-NEXT:    creg_xchgl %edi, %eax
; CHECK-NEXT:    creg_xchgl $4660, %esi # imm = 0x1234
; CHECK-NEXT:    addl %esi, %eax
; CHECK-NEXT:    retq
  %res1 = call i32 @llvm.x86.icecode.creg.xchg.32(i32 %reg, i32 %v)
  %res2 = call i32 @llvm.x86.icecode.creg.xchg.32(i32 4660, i32 %v)
  %res = add i32 %res1, %res2
  ret i32 %res
}

define i64 @creg_xchg64(i32 %reg, i64 %v) {
; CHECK-LABEL: creg_xchg64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movq %rsi, %rax
; CHECK-NEXT:    creg_xchgq %edi, %rax
; CHECK-NEXT:    creg_xchgq $4660, %rsi # imm = 0x1234
; CHECK-NEXT:    addq %rsi, %rax
; CHECK-NEXT:    retq
  %res1 = call i64 @llvm.x86.icecode.creg.xchg.64(i32 %reg, i64 %v)
  %res2 = call i64 @llvm.x86.icecode.creg.xchg.64(i32 4660, i64 %v)
  %res = add i64 %res1, %res2
  ret i64 %res
}

define i32 @fscp_xchg32(i32 %reg, i32 %v) {
; CHECK-LABEL: fscp_xchg32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    # kill: def $esi killed $esi def $rsi
; CHECK-NEXT:    movl %esi, %eax
; CHECK-NEXT:    fscp_xchgl %edi, %eax
; CHECK-NEXT:    fscp_xchgl $4660, %esi # imm = 0x1234
; CHECK-NEXT:    addl %esi, %eax
; CHECK-NEXT:    retq
  %res1 = call i32 @llvm.x86.icecode.fscp.xchg.32(i32 %reg, i32 %v)
  %res2 = call i32 @llvm.x86.icecode.fscp.xchg.32(i32 4660, i32 %v)
  %res = add i32 %res1, %res2
  ret i32 %res
}

define i64 @fscp_xchg64(i32 %reg, i64 %v) {
; CHECK-LABEL: fscp_xchg64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movq %rsi, %rax
; CHECK-NEXT:    fscp_xchgq %edi, %rax
; CHECK-NEXT:    fscp_xchgq $4660, %rsi # imm = 0x1234
; CHECK-NEXT:    addq %rsi, %rax
; CHECK-NEXT:    retq
  %res1 = call i64 @llvm.x86.icecode.fscp.xchg.64(i32 %reg, i64 %v)
  %res2 = call i64 @llvm.x86.icecode.fscp.xchg.64(i32 4660, i64 %v)
  %res = add i64 %res1, %res2
  ret i64 %res
}

declare i32 @llvm.x86.icecode.creg.read.32(i32)
declare i64 @llvm.x86.icecode.creg.read.64(i32)
declare i32 @llvm.x86.icecode.fscp.read.32(i32)
declare i64 @llvm.x86.icecode.fscp.read.64(i32)

define i32 @creg_read32(i32 %reg) {
; CHECK-LABEL: creg_read32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    creg_readl %edi, %ecx
; CHECK-NEXT:    creg_readl $4660, %eax # imm = 0x1234
; CHECK-NEXT:    addl %ecx, %eax
; CHECK-NEXT:    retq
  %res1 = call i32 @llvm.x86.icecode.creg.read.32(i32 %reg)
  %res2 = call i32 @llvm.x86.icecode.creg.read.32(i32 4660)
  %res = add i32 %res1, %res2
  ret i32 %res
}

define i64 @creg_read64(i32 %reg) {
; CHECK-LABEL: creg_read64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    creg_readq %edi, %rcx
; CHECK-NEXT:    creg_readq $4660, %rax # imm = 0x1234
; CHECK-NEXT:    addq %rcx, %rax
; CHECK-NEXT:    retq
  %res1 = call i64 @llvm.x86.icecode.creg.read.64(i32 %reg)
  %res2 = call i64 @llvm.x86.icecode.creg.read.64(i32 4660)
  %res = add i64 %res1, %res2
  ret i64 %res
}

define i32 @fscp_read32(i32 %reg) {
; CHECK-LABEL: fscp_read32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fscp_readl %edi, %ecx
; CHECK-NEXT:    fscp_readl $4660, %eax # imm = 0x1234
; CHECK-NEXT:    addl %ecx, %eax
; CHECK-NEXT:    retq
  %res1 = call i32 @llvm.x86.icecode.fscp.read.32(i32 %reg)
  %res2 = call i32 @llvm.x86.icecode.fscp.read.32(i32 4660)
  %res = add i32 %res1, %res2
  ret i32 %res
}

define i64 @fscp_read64(i32 %reg) {
; CHECK-LABEL: fscp_read64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fscp_readq %edi, %rcx
; CHECK-NEXT:    fscp_readq $4660, %rax # imm = 0x1234
; CHECK-NEXT:    addq %rcx, %rax
; CHECK-NEXT:    retq
  %res1 = call i64 @llvm.x86.icecode.fscp.read.64(i32 %reg)
  %res2 = call i64 @llvm.x86.icecode.fscp.read.64(i32 4660)
  %res = add i64 %res1, %res2
  ret i64 %res
}

declare i8 @llvm.x86.icecode.portin.8(i8*)
declare i16 @llvm.x86.icecode.portin.16(i8*)
declare i32 @llvm.x86.icecode.portin.32(i8*)
declare i64 @llvm.x86.icecode.portin.64(i8*)

define i8 @portin8(i8* %port) {
; CHECK-LABEL: portin8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    portinb (%rdi), %al
; CHECK-NEXT:    retq
  %res = call i8 @llvm.x86.icecode.portin.8(i8* %port)
  ret i8 %res
}

define i16 @portin16(i8* %port) {
; CHECK-LABEL: portin16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    portinw (%rdi), %ax
; CHECK-NEXT:    retq
  %res = call i16 @llvm.x86.icecode.portin.16(i8* %port)
  ret i16 %res
}

define i32 @portin32(i8* %port) {
; CHECK-LABEL: portin32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    portinl (%rdi), %eax
; CHECK-NEXT:    retq
  %res = call i32 @llvm.x86.icecode.portin.32(i8* %port)
  ret i32 %res
}

define i64 @portin64(i8* %port) {
; CHECK-LABEL: portin64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    portinq (%rdi), %rax
; CHECK-NEXT:    retq
  %res = call i64 @llvm.x86.icecode.portin.64(i8* %port)
  ret i64 %res
}

declare void @llvm.x86.icecode.portout.8(i8, i8*)
declare void @llvm.x86.icecode.portout.16(i16, i8*)
declare void @llvm.x86.icecode.portout.32(i32, i8*)
declare void @llvm.x86.icecode.portout.64(i64, i8*)

define void @portout8(i8 %v, i8* %port) {
; CHECK-LABEL: portout8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    portoutb %dil, (%rsi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.portout.8(i8 %v, i8* %port)
  ret void
}

define void @portout16(i16 %v, i8* %port) {
; CHECK-LABEL: portout16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    portoutw %di, (%rsi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.portout.16(i16 %v, i8* %port)
  ret void
}

define void @portout32(i32 %v, i8* %port) {
; CHECK-LABEL: portout32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    portoutl %edi, (%rsi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.portout.32(i32 %v, i8* %port)
  ret void
}

define void @portout64(i64 %v, i8* %port) {
; CHECK-LABEL: portout64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    portoutq %rdi, (%rsi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.portout.64(i64 %v, i8* %port)
  ret void
}

declare void @llvm.x86.icecode.sta.special(i8*)
declare i32  @llvm.x86.icecode.nr.read(i32)
declare void @llvm.x86.icecode.ucodecall(i32)
declare i64  @llvm.x86.icecode.cmodemov(i64, i64, i32)

define void @sta_special(i8* %addr) {
; CHECK-LABEL: sta_special:
; CHECK:       # %bb.0:
; CHECK-NEXT:    sta_special (%rdi)
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.sta.special(i8* %addr)
  ret void
}

define i32 @nr_read() {
; CHECK-LABEL: nr_read:
; CHECK:       # %bb.0:
; CHECK-NEXT:    nr_read $0, %ecx
; CHECK-NEXT:    nr_read $32, %eax
; CHECK-NEXT:    nr_read $255, %edx
; CHECK-NEXT:    addl %ecx, %eax
; CHECK-NEXT:    addl %edx, %eax
; CHECK-NEXT:    retq
  %a = call i32 @llvm.x86.icecode.nr.read(i32 0)
  %b = call i32 @llvm.x86.icecode.nr.read(i32 32)
  %c = call i32 @llvm.x86.icecode.nr.read(i32 255)
  %d = add i32 %a, %b
  %e = add i32 %c, %d
  ret i32 %e
}

define i64 @ucodecall(i64 %s1, i64 %s2) {
; CHECK-LABEL: ucodecall:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movq %rdi, %rax
; CHECK-NEXT:    cmodemov $0, %rsi, %rax
; CHECK-NEXT:    movq %rdi, %rcx
; CHECK-NEXT:    cmodemov $8, %rsi, %rcx
; CHECK-NEXT:    cmodemov $15, %rsi, %rdi
; CHECK-NEXT:    addq %rax, %rcx
; CHECK-NEXT:    leaq (%rcx,%rdi), %rax
; CHECK-NEXT:    retq
  %a = call i64  @llvm.x86.icecode.cmodemov(i64 %s1, i64 %s2, i32 0)
  %b = call i64  @llvm.x86.icecode.cmodemov(i64 %s1, i64 %s2, i32 8)
  %c = call i64  @llvm.x86.icecode.cmodemov(i64 %s1, i64 %s2, i32 15)
  %d = add i64 %a, %b
  %e = add i64 %c, %d
  ret i64 %e
}

declare void @llvm.x86.icecode.set.tracker(i32)

define void @set_tracker() {
; CHECK-LABEL: set_tracker:
; CHECK:       # %bb.0:
; CHECK-NEXT:    settracker $0
; CHECK-NEXT:    settracker $255
; CHECK-NEXT:    retq
  call void @llvm.x86.icecode.set.tracker(i32 0)
  call void @llvm.x86.icecode.set.tracker(i32 255)
  ret void
}
