; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_icecode
; RUN: llc < %s -mtriple=x86_icecode-unknown-unknown -mattr=+avx512f | FileCheck %s

declare <16 x float> @llvm.sqrt.v16f32(<16 x float>)

define dso_local <16 x float> @test_mm512_sqrt_ps(<16 x float> %__A) nounwind {
; CHECK-LABEL: test_mm512_sqrt_ps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pushq %rbp
; CHECK-NEXT:    movq %rsp, %rbp
; CHECK-NEXT:    andq $-64, %rsp
; CHECK-NEXT:    subq $192, %rsp
; CHECK-NEXT:    vmovaps %zmm16, (%rsp)
; CHECK-NEXT:    vmovaps %zmm16, {{[0-9]+}}(%rsp)
; CHECK-NEXT:    vsqrtps %zmm16, %zmm16
; CHECK-NEXT:    movq %rbp, %rsp
; CHECK-NEXT:    popq %rbp
; CHECK-NEXT:    retq
entry:
  %__A.addr.i = alloca <16 x float>, align 64
  %__A.addr = alloca <16 x float>, align 64
  store <16 x float> %__A, <16 x float>* %__A.addr, align 64
  %0 = load <16 x float>, <16 x float>* %__A.addr, align 64
  store <16 x float> %0, <16 x float>* %__A.addr.i, align 64
  %1 = load <16 x float>, <16 x float>* %__A.addr.i, align 64
  %2 = call <16 x float> @llvm.sqrt.v16f32(<16 x float> %1)
  ret <16 x float> %2
}
