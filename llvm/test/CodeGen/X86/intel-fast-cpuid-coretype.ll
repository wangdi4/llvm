; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --check-globals
; RUN: opt --mtriple=x86_64-- -S --x86-pre-isel-intrinsic-lowering -intel-libirc-allowed -mattr=+fast-core-type -opaque-pointers --verify < %s | FileCheck %s --check-prefix=FASTCORETYPE
; RUN: opt --mtriple=x86_64-- -S --x86-pre-isel-intrinsic-lowering -intel-libirc-allowed -opaque-pointers --verify < %s | FileCheck %s --check-prefix=NO-FASTCORETYPE

;.
; FASTCORETYPE: @[[__CPU_CORE_TYPE:[a-zA-Z0-9_$"\\.-]+]] = external local_unnamed_addr global [1025 x i8]
;.
; NO-FASTCORETYPE: @[[LLVM_GLOBAL_CTORS:[a-zA-Z0-9_$"\\.-]+]] = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 65535, ptr @__init_cpu_core_type, ptr null }]
; NO-FASTCORETYPE: @[[__CPU_CORE_TYPE:[a-zA-Z0-9_$"\\.-]+]] = external local_unnamed_addr global [1025 x i8]
;.
define void @get_cpuid_coretype() nounwind {
; FASTCORETYPE-LABEL: @get_cpuid_coretype(
; FASTCORETYPE-NEXT:  entry:
; FASTCORETYPE-NEXT:    call void @do_something_before()
; FASTCORETYPE-NEXT:    [[TMP0:%.*]] = call i32 asm sideeffect "rdpid ${0:q}", "=r"()
; FASTCORETYPE-NEXT:    [[TMP1:%.*]] = and i32 [[TMP0]], 1023
; FASTCORETYPE-NEXT:    [[TMP2:%.*]] = getelementptr [1025 x i8], ptr @__cpu_core_type, i64 0, i32 [[TMP1]]
; FASTCORETYPE-NEXT:    [[TMP3:%.*]] = load i8, ptr [[TMP2]], align 1
; FASTCORETYPE-NEXT:    [[TMP4:%.*]] = icmp ne i8 [[TMP3]], 0
; FASTCORETYPE-NEXT:    br i1 [[TMP4]], label [[TMP5:%.*]], label [[TMP7:%.*]], !prof [[PROF0:![0-9]+]]
; FASTCORETYPE:       5:
; FASTCORETYPE-NEXT:    [[TMP6:%.*]] = phi i8 [ [[TMP3]], [[ENTRY:%.*]] ], [ [[TMP8:%.*]], [[TMP7]] ]
; FASTCORETYPE-NEXT:    call void @do_something_after(i8 [[TMP6]])
; FASTCORETYPE-NEXT:    ret void
; FASTCORETYPE:       7:
; FASTCORETYPE-NEXT:    [[TMP8]] = call i8 @__detect_cpu_core_type()
; FASTCORETYPE-NEXT:    br label [[TMP5]]
;
; NO-FASTCORETYPE-LABEL: @get_cpuid_coretype(
; NO-FASTCORETYPE-NEXT:  entry:
; NO-FASTCORETYPE-NEXT:    call void @do_something_before()
; NO-FASTCORETYPE-NEXT:    [[TMP0:%.*]] = load i8, ptr getelementptr inbounds ([1025 x i8], ptr @__cpu_core_type, i64 0, i64 1024), align 1
; NO-FASTCORETYPE-NEXT:    [[TMP1:%.*]] = icmp eq i8 [[TMP0]], -1
; NO-FASTCORETYPE-NEXT:    br i1 [[TMP1]], label [[TMP2:%.*]], label [[TMP8:%.*]]
; NO-FASTCORETYPE:       2:
; NO-FASTCORETYPE-NEXT:    [[TMP3:%.*]] = call i32 asm sideeffect "rdpid ${0:q}", "=r"()
; NO-FASTCORETYPE-NEXT:    [[TMP4:%.*]] = and i32 [[TMP3]], 1023
; NO-FASTCORETYPE-NEXT:    [[TMP5:%.*]] = getelementptr [1025 x i8], ptr @__cpu_core_type, i64 0, i32 [[TMP4]]
; NO-FASTCORETYPE-NEXT:    [[TMP6:%.*]] = load i8, ptr [[TMP5]], align 1
; NO-FASTCORETYPE-NEXT:    [[TMP7:%.*]] = icmp ne i8 [[TMP6]], 0
; NO-FASTCORETYPE-NEXT:    br i1 [[TMP7]], label [[TMP8]], label [[TMP10:%.*]], !prof [[PROF0:![0-9]+]]
; NO-FASTCORETYPE:       8:
; NO-FASTCORETYPE-NEXT:    [[TMP9:%.*]] = phi i8 [ 0, [[ENTRY:%.*]] ], [ [[TMP6]], [[TMP2]] ], [ [[TMP11:%.*]], [[TMP10]] ]
; NO-FASTCORETYPE-NEXT:    call void @do_something_after(i8 [[TMP9]])
; NO-FASTCORETYPE-NEXT:    ret void
; NO-FASTCORETYPE:       10:
; NO-FASTCORETYPE-NEXT:    [[TMP11]] = call i8 @__detect_cpu_core_type()
; NO-FASTCORETYPE-NEXT:    br label [[TMP8]]
;
entry:
  call void @do_something_before()
  %0 = call i8 @llvm.x86.intel.fast.cpuid.coretype()
  call void @do_something_after(i8 %0)
  ret void
}

declare i8 @llvm.x86.intel.fast.cpuid.coretype() nounwind
declare void @do_something_before() nounwind
declare void @do_something_after(i8) nounwind
;.
; FASTCORETYPE: attributes #[[ATTR0:[0-9]+]] = { nounwind "target-features"="+fast-core-type" }
;.
; NO-FASTCORETYPE: attributes #[[ATTR0:[0-9]+]] = { nounwind }
;.
; FASTCORETYPE: [[PROF0]] = !{!"branch_weights", i32 2000, i32 1}
;.
; NO-FASTCORETYPE: [[PROF0]] = !{!"branch_weights", i32 2000, i32 1}
;.
