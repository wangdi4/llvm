; INTEL_FEATURE_ISA_BF16_BASE
; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_bf16_base
; TODO: Add SSE2 tests when vector emulation bfloat on SSE2 is supported.
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx512fp16,+avx512vl | FileCheck %s --check-prefix=AVX512FP16-X64
; RUN: llc < %s -mtriple=i686-unknown-unknown -mattr=+avx512fp16,+avx512vl | FileCheck %s --check-prefix=AVX512FP16-X86

define void @test_mscatter_v16bf16(bfloat* %base, <16 x i32> %index, <16 x bfloat> %val)
; AVX512FP16-X64-LABEL: test_mscatter_v16bf16:
; AVX512FP16-X64:       # %bb.0:
; AVX512FP16-X64-NEXT:    vpbroadcastq %rdi, %zmm3
; AVX512FP16-X64-NEXT:    vextracti64x4 $1, %zmm0, %ymm2
; AVX512FP16-X64-NEXT:    vpmovsxdq %ymm2, %zmm2
; AVX512FP16-X64-NEXT:    vpaddq %zmm2, %zmm3, %zmm4
; AVX512FP16-X64-NEXT:    vpaddq %zmm2, %zmm4, %zmm2
; AVX512FP16-X64-NEXT:    vpmovsxdq %ymm0, %zmm0
; AVX512FP16-X64-NEXT:    vpaddq %zmm0, %zmm3, %zmm3
; AVX512FP16-X64-NEXT:    vpaddq %zmm0, %zmm3, %zmm0
; AVX512FP16-X64-NEXT:    vmovq %xmm0, %rax
; AVX512FP16-X64-NEXT:    vmovsh %xmm1, (%rax)
; AVX512FP16-X64-NEXT:    vpsrld $16, %xmm1, %xmm3
; AVX512FP16-X64-NEXT:    vpextrq $1, %xmm0, %rax
; AVX512FP16-X64-NEXT:    vmovsh %xmm3, (%rax)
; AVX512FP16-X64-NEXT:    vpermilps {{.*#+}} xmm3 = xmm1[1,1,3,3]
; AVX512FP16-X64-NEXT:    vextracti128 $1, %ymm0, %xmm4
; AVX512FP16-X64-NEXT:    vmovq %xmm4, %rax
; AVX512FP16-X64-NEXT:    vmovsh %xmm3, (%rax)
; AVX512FP16-X64-NEXT:    vpsrlq $48, %xmm1, %xmm3
; AVX512FP16-X64-NEXT:    vpextrq $1, %xmm4, %rax
; AVX512FP16-X64-NEXT:    vmovsh %xmm3, (%rax)
; AVX512FP16-X64-NEXT:    vpermilps {{.*#+}} xmm3 = xmm1[2,3,0,1]
; AVX512FP16-X64-NEXT:    vextracti32x4 $2, %zmm0, %xmm4
; AVX512FP16-X64-NEXT:    vmovq %xmm4, %rax
; AVX512FP16-X64-NEXT:    vmovsh %xmm3, (%rax)
; AVX512FP16-X64-NEXT:    vpsrldq {{.*#+}} xmm3 = xmm1[10,11,12,13,14,15],zero,zero,zero,zero,zero,zero,zero,zero,zero,zero
; AVX512FP16-X64-NEXT:    vpextrq $1, %xmm4, %rax
; AVX512FP16-X64-NEXT:    vmovsh %xmm3, (%rax)
; AVX512FP16-X64-NEXT:    vpermilps {{.*#+}} xmm3 = xmm1[3,3,3,3]
; AVX512FP16-X64-NEXT:    vextracti32x4 $3, %zmm0, %xmm0
; AVX512FP16-X64-NEXT:    vmovq %xmm0, %rax
; AVX512FP16-X64-NEXT:    vmovsh %xmm3, (%rax)
; AVX512FP16-X64-NEXT:    vpsrldq {{.*#+}} xmm3 = xmm1[14,15],zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero
; AVX512FP16-X64-NEXT:    vpextrq $1, %xmm0, %rax
; AVX512FP16-X64-NEXT:    vmovsh %xmm3, (%rax)
; AVX512FP16-X64-NEXT:    vextractf128 $1, %ymm1, %xmm0
; AVX512FP16-X64-NEXT:    vmovq %xmm2, %rax
; AVX512FP16-X64-NEXT:    vmovsh %xmm0, (%rax)
; AVX512FP16-X64-NEXT:    vpsrld $16, %xmm0, %xmm1
; AVX512FP16-X64-NEXT:    vpextrq $1, %xmm2, %rax
; AVX512FP16-X64-NEXT:    vmovsh %xmm1, (%rax)
; AVX512FP16-X64-NEXT:    vpermilps {{.*#+}} xmm1 = xmm0[1,1,3,3]
; AVX512FP16-X64-NEXT:    vextracti128 $1, %ymm2, %xmm3
; AVX512FP16-X64-NEXT:    vmovq %xmm3, %rax
; AVX512FP16-X64-NEXT:    vmovsh %xmm1, (%rax)
; AVX512FP16-X64-NEXT:    vpsrlq $48, %xmm0, %xmm1
; AVX512FP16-X64-NEXT:    vpextrq $1, %xmm3, %rax
; AVX512FP16-X64-NEXT:    vmovsh %xmm1, (%rax)
; AVX512FP16-X64-NEXT:    vpermilps {{.*#+}} xmm1 = xmm0[2,3,0,1]
; AVX512FP16-X64-NEXT:    vextracti32x4 $2, %zmm2, %xmm3
; AVX512FP16-X64-NEXT:    vmovq %xmm3, %rax
; AVX512FP16-X64-NEXT:    vmovsh %xmm1, (%rax)
; AVX512FP16-X64-NEXT:    vpsrldq {{.*#+}} xmm1 = xmm0[10,11,12,13,14,15],zero,zero,zero,zero,zero,zero,zero,zero,zero,zero
; AVX512FP16-X64-NEXT:    vpextrq $1, %xmm3, %rax
; AVX512FP16-X64-NEXT:    vmovsh %xmm1, (%rax)
; AVX512FP16-X64-NEXT:    vpermilps {{.*#+}} xmm1 = xmm0[3,3,3,3]
; AVX512FP16-X64-NEXT:    vextracti32x4 $3, %zmm2, %xmm2
; AVX512FP16-X64-NEXT:    vmovq %xmm2, %rax
; AVX512FP16-X64-NEXT:    vmovsh %xmm1, (%rax)
; AVX512FP16-X64-NEXT:    vpsrldq {{.*#+}} xmm0 = xmm0[14,15],zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero
; AVX512FP16-X64-NEXT:    vpextrq $1, %xmm2, %rax
; AVX512FP16-X64-NEXT:    vmovsh %xmm0, (%rax)
; AVX512FP16-X64-NEXT:    vzeroupper
; AVX512FP16-X64-NEXT:    retq
;
; AVX512FP16-X86-LABEL: test_mscatter_v16bf16:
; AVX512FP16-X86:       # %bb.0:
; AVX512FP16-X86-NEXT:    vpaddd %zmm0, %zmm0, %zmm0
; AVX512FP16-X86-NEXT:    vpaddd {{[0-9]+}}(%esp){1to16}, %zmm0, %zmm0
; AVX512FP16-X86-NEXT:    vmovd %xmm0, %eax
; AVX512FP16-X86-NEXT:    vmovsh %xmm1, (%eax)
; AVX512FP16-X86-NEXT:    vpsrld $16, %xmm1, %xmm2
; AVX512FP16-X86-NEXT:    vpextrd $1, %xmm0, %eax
; AVX512FP16-X86-NEXT:    vmovsh %xmm2, (%eax)
; AVX512FP16-X86-NEXT:    vpermilps {{.*#+}} xmm2 = xmm1[1,1,3,3]
; AVX512FP16-X86-NEXT:    vpextrd $2, %xmm0, %eax
; AVX512FP16-X86-NEXT:    vmovsh %xmm2, (%eax)
; AVX512FP16-X86-NEXT:    vpsrlq $48, %xmm1, %xmm2
; AVX512FP16-X86-NEXT:    vpextrd $3, %xmm0, %eax
; AVX512FP16-X86-NEXT:    vmovsh %xmm2, (%eax)
; AVX512FP16-X86-NEXT:    vpermilps {{.*#+}} xmm2 = xmm1[2,3,0,1]
; AVX512FP16-X86-NEXT:    vextracti128 $1, %ymm0, %xmm3
; AVX512FP16-X86-NEXT:    vmovd %xmm3, %eax
; AVX512FP16-X86-NEXT:    vmovsh %xmm2, (%eax)
; AVX512FP16-X86-NEXT:    vpsrldq {{.*#+}} xmm2 = xmm1[10,11,12,13,14,15],zero,zero,zero,zero,zero,zero,zero,zero,zero,zero
; AVX512FP16-X86-NEXT:    vpextrd $1, %xmm3, %eax
; AVX512FP16-X86-NEXT:    vmovsh %xmm2, (%eax)
; AVX512FP16-X86-NEXT:    vpermilps {{.*#+}} xmm2 = xmm1[3,3,3,3]
; AVX512FP16-X86-NEXT:    vpextrd $2, %xmm3, %eax
; AVX512FP16-X86-NEXT:    vmovsh %xmm2, (%eax)
; AVX512FP16-X86-NEXT:    vpsrldq {{.*#+}} xmm2 = xmm1[14,15],zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero
; AVX512FP16-X86-NEXT:    vpextrd $3, %xmm3, %eax
; AVX512FP16-X86-NEXT:    vmovsh %xmm2, (%eax)
; AVX512FP16-X86-NEXT:    vextractf128 $1, %ymm1, %xmm1
; AVX512FP16-X86-NEXT:    vextracti32x4 $2, %zmm0, %xmm2
; AVX512FP16-X86-NEXT:    vmovd %xmm2, %eax
; AVX512FP16-X86-NEXT:    vmovsh %xmm1, (%eax)
; AVX512FP16-X86-NEXT:    vpsrld $16, %xmm1, %xmm3
; AVX512FP16-X86-NEXT:    vpextrd $1, %xmm2, %eax
; AVX512FP16-X86-NEXT:    vmovsh %xmm3, (%eax)
; AVX512FP16-X86-NEXT:    vpermilps {{.*#+}} xmm3 = xmm1[1,1,3,3]
; AVX512FP16-X86-NEXT:    vpextrd $2, %xmm2, %eax
; AVX512FP16-X86-NEXT:    vmovsh %xmm3, (%eax)
; AVX512FP16-X86-NEXT:    vpsrlq $48, %xmm1, %xmm3
; AVX512FP16-X86-NEXT:    vpextrd $3, %xmm2, %eax
; AVX512FP16-X86-NEXT:    vmovsh %xmm3, (%eax)
; AVX512FP16-X86-NEXT:    vpermilps {{.*#+}} xmm2 = xmm1[2,3,0,1]
; AVX512FP16-X86-NEXT:    vextracti32x4 $3, %zmm0, %xmm0
; AVX512FP16-X86-NEXT:    vmovd %xmm0, %eax
; AVX512FP16-X86-NEXT:    vmovsh %xmm2, (%eax)
; AVX512FP16-X86-NEXT:    vpsrldq {{.*#+}} xmm2 = xmm1[10,11,12,13,14,15],zero,zero,zero,zero,zero,zero,zero,zero,zero,zero
; AVX512FP16-X86-NEXT:    vpextrd $1, %xmm0, %eax
; AVX512FP16-X86-NEXT:    vmovsh %xmm2, (%eax)
; AVX512FP16-X86-NEXT:    vpermilps {{.*#+}} xmm2 = xmm1[3,3,3,3]
; AVX512FP16-X86-NEXT:    vpextrd $2, %xmm0, %eax
; AVX512FP16-X86-NEXT:    vmovsh %xmm2, (%eax)
; AVX512FP16-X86-NEXT:    vpsrldq {{.*#+}} xmm1 = xmm1[14,15],zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero
; AVX512FP16-X86-NEXT:    vpextrd $3, %xmm0, %eax
; AVX512FP16-X86-NEXT:    vmovsh %xmm1, (%eax)
; AVX512FP16-X86-NEXT:    vzeroupper
; AVX512FP16-X86-NEXT:    retl
{
  %gep = getelementptr bfloat, bfloat* %base, <16 x i32> %index
  call void @llvm.masked.scatter.v16bf16.v16p0bf16(<16 x bfloat> %val, <16 x bfloat*> %gep, i32 4, <16 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>)
  ret void
}
declare void @llvm.masked.scatter.v16bf16.v16p0bf16(<16 x bfloat> , <16 x bfloat*> , i32 , <16 x i1>)
; end INTEL_FEATURE_ISA_BF16_BASE
