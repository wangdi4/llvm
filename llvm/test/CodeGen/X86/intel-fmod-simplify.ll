; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc -mtriple=x86_64-unknown-linux-gnu -mcpu=skylake -O3 < %s | FileCheck %s

define float @fmod_f32(float %a, float %b) {
; CHECK-LABEL: fmod_f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcvtss2sd %xmm0, %xmm0, %xmm0
; CHECK-NEXT:    vcvtss2sd %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vdivsd %xmm1, %xmm0, %xmm2
; CHECK-NEXT:    vroundsd $11, %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vmulsd %xmm1, %xmm2, %xmm1
; CHECK-NEXT:    vsubsd %xmm1, %xmm0, %xmm0
; CHECK-NEXT:    vcvtsd2ss %xmm0, %xmm0, %xmm0
; CHECK-NEXT:    retq
entry:
  %fmod = frem fast float %a, %b
  ret float %fmod
}

define double @fmod_f64(double %a, double %b) {
; CHECK-LABEL: fmod_f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vdivsd %xmm1, %xmm0, %xmm2
; CHECK-NEXT:    vroundsd $11, %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vmulsd %xmm1, %xmm2, %xmm1
; CHECK-NEXT:    vsubsd %xmm1, %xmm0, %xmm0
; CHECK-NEXT:    retq
entry:
  %fmod = frem fast double %a, %b
  ret double %fmod
}

define <8 x float> @fmod_f32x8(<8 x float> %a, <8 x float> %b) {
; CHECK-LABEL: fmod_f32x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vextractf128 $1, %ymm0, %xmm2
; CHECK-NEXT:    vcvtps2pd %xmm2, %ymm2
; CHECK-NEXT:    vcvtps2pd %xmm0, %ymm0
; CHECK-NEXT:    vextractf128 $1, %ymm1, %xmm3
; CHECK-NEXT:    vcvtps2pd %xmm3, %ymm3
; CHECK-NEXT:    vcvtps2pd %xmm1, %ymm1
; CHECK-NEXT:    vdivpd %ymm3, %ymm2, %ymm4
; CHECK-NEXT:    vroundpd $11, %ymm4, %ymm4
; CHECK-NEXT:    vdivpd %ymm1, %ymm0, %ymm5
; CHECK-NEXT:    vroundpd $11, %ymm5, %ymm5
; CHECK-NEXT:    vmulpd %ymm1, %ymm5, %ymm1
; CHECK-NEXT:    vmulpd %ymm3, %ymm4, %ymm3
; CHECK-NEXT:    vsubpd %ymm3, %ymm2, %ymm2
; CHECK-NEXT:    vsubpd %ymm1, %ymm0, %ymm0
; CHECK-NEXT:    vcvtpd2ps %ymm0, %xmm0
; CHECK-NEXT:    vcvtpd2ps %ymm2, %xmm1
; CHECK-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm0
; CHECK-NEXT:    retq
entry:
  %fmod = frem fast <8 x float> %a, %b
  ret <8 x float> %fmod
}

define <8 x double> @fmod_f64x8(<8 x double> %a, <8 x double> %b) {
; CHECK-LABEL: fmod_f64x8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vdivpd %ymm3, %ymm1, %ymm4
; CHECK-NEXT:    vdivpd %ymm2, %ymm0, %ymm5
; CHECK-NEXT:    vroundpd $11, %ymm5, %ymm5
; CHECK-NEXT:    vroundpd $11, %ymm4, %ymm4
; CHECK-NEXT:    vmulpd %ymm3, %ymm4, %ymm3
; CHECK-NEXT:    vmulpd %ymm2, %ymm5, %ymm2
; CHECK-NEXT:    vsubpd %ymm2, %ymm0, %ymm0
; CHECK-NEXT:    vsubpd %ymm3, %ymm1, %ymm1
; CHECK-NEXT:    retq
entry:
  %fmod = frem fast <8 x double> %a, %b
  ret <8 x double> %fmod
}

define <16 x float> @fmod_f32x16(<16 x float> %a, <16 x float> %b) {
; CHECK-LABEL: fmod_f32x16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vextractf128 $1, %ymm1, %xmm4
; CHECK-NEXT:    vcvtps2pd %xmm4, %ymm4
; CHECK-NEXT:    vcvtps2pd %xmm1, %ymm1
; CHECK-NEXT:    vextractf128 $1, %ymm0, %xmm5
; CHECK-NEXT:    vcvtps2pd %xmm5, %ymm5
; CHECK-NEXT:    vcvtps2pd %xmm0, %ymm0
; CHECK-NEXT:    vextractf128 $1, %ymm3, %xmm6
; CHECK-NEXT:    vcvtps2pd %xmm6, %ymm6
; CHECK-NEXT:    vcvtps2pd %xmm3, %ymm3
; CHECK-NEXT:    vextractf128 $1, %ymm2, %xmm7
; CHECK-NEXT:    vcvtps2pd %xmm7, %ymm7
; CHECK-NEXT:    vcvtps2pd %xmm2, %ymm2
; CHECK-NEXT:    vdivpd %ymm2, %ymm0, %ymm8
; CHECK-NEXT:    vdivpd %ymm7, %ymm5, %ymm9
; CHECK-NEXT:    vdivpd %ymm3, %ymm1, %ymm10
; CHECK-NEXT:    vdivpd %ymm6, %ymm4, %ymm11
; CHECK-NEXT:    vroundpd $11, %ymm11, %ymm11
; CHECK-NEXT:    vroundpd $11, %ymm10, %ymm10
; CHECK-NEXT:    vroundpd $11, %ymm9, %ymm9
; CHECK-NEXT:    vroundpd $11, %ymm8, %ymm8
; CHECK-NEXT:    vmulpd %ymm2, %ymm8, %ymm2
; CHECK-NEXT:    vmulpd %ymm7, %ymm9, %ymm7
; CHECK-NEXT:    vmulpd %ymm3, %ymm10, %ymm3
; CHECK-NEXT:    vmulpd %ymm6, %ymm11, %ymm6
; CHECK-NEXT:    vsubpd %ymm6, %ymm4, %ymm4
; CHECK-NEXT:    vsubpd %ymm3, %ymm1, %ymm1
; CHECK-NEXT:    vsubpd %ymm7, %ymm5, %ymm3
; CHECK-NEXT:    vsubpd %ymm2, %ymm0, %ymm0
; CHECK-NEXT:    vcvtpd2ps %ymm0, %xmm0
; CHECK-NEXT:    vcvtpd2ps %ymm3, %xmm2
; CHECK-NEXT:    vinsertf128 $1, %xmm2, %ymm0, %ymm0
; CHECK-NEXT:    vcvtpd2ps %ymm1, %xmm1
; CHECK-NEXT:    vcvtpd2ps %ymm4, %xmm2
; CHECK-NEXT:    vinsertf128 $1, %xmm2, %ymm1, %ymm1
; CHECK-NEXT:    retq
entry:
  %fmod = frem fast <16 x float> %a, %b
  ret <16 x float> %fmod
}

define <16 x double> @fmod_f64x16(<16 x double> %a, <16 x double> %b) {
; CHECK-LABEL: fmod_f64x16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vdivpd %ymm7, %ymm3, %ymm8
; CHECK-NEXT:    vdivpd %ymm6, %ymm2, %ymm9
; CHECK-NEXT:    vdivpd %ymm5, %ymm1, %ymm10
; CHECK-NEXT:    vdivpd %ymm4, %ymm0, %ymm11
; CHECK-NEXT:    vroundpd $11, %ymm11, %ymm11
; CHECK-NEXT:    vroundpd $11, %ymm10, %ymm10
; CHECK-NEXT:    vroundpd $11, %ymm9, %ymm9
; CHECK-NEXT:    vroundpd $11, %ymm8, %ymm8
; CHECK-NEXT:    vmulpd %ymm7, %ymm8, %ymm7
; CHECK-NEXT:    vmulpd %ymm6, %ymm9, %ymm6
; CHECK-NEXT:    vmulpd %ymm5, %ymm10, %ymm5
; CHECK-NEXT:    vmulpd %ymm4, %ymm11, %ymm4
; CHECK-NEXT:    vsubpd %ymm4, %ymm0, %ymm0
; CHECK-NEXT:    vsubpd %ymm5, %ymm1, %ymm1
; CHECK-NEXT:    vsubpd %ymm6, %ymm2, %ymm2
; CHECK-NEXT:    vsubpd %ymm7, %ymm3, %ymm3
; CHECK-NEXT:    retq
entry:
  %fmod = frem fast <16 x double> %a, %b
  ret <16 x double> %fmod
}

