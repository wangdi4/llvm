; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc < %s -intel-libirc-allowed -mtriple=x86_64-pc-linux-gnu | FileCheck %s --check-prefix=OPT
; RUN: llc < %s -intel-libirc-allowed -mtriple=x86_64-pc-linux-gnu -mattr=-sse2 | FileCheck %s -check-prefix=NOOPT
; RUN: llc < %s -intel-libirc-allowed -mtriple=x86_64-pc-linux-gnu -O0 | FileCheck %s -check-prefix=NOOPT
; RUN: llc < %s -intel-libirc-allowed -mtriple=x86_64-pc-linux-gnu -O1 | FileCheck %s -check-prefix=NOOPT
; RUN: llc < %s -intel-libirc-allowed -mtriple=i386-pc-linux-gnu | FileCheck %s -check-prefix=NOOPT
; RUN: llc < %s -mtriple=x86_64-pc-linux-gnu | FileCheck %s --check-prefix=NOOPT

define void @test_double(double %x, ptr %t1, ptr %t2) #0 {
; OPT-LABEL: test_double:
; OPT:       callq __libm_sse2_sincos@PLT
; NOOPT-NOT: callq __libm_sse2_sincos@PLT
  tail call void @sincos(double %x, ptr %t1, ptr %t2)
  ret void
}

define void @test_float(float %x, ptr %t1, ptr %t2) #0 {
; OPT-LABEL: test_float:
; OPT:         callq __libm_sse2_sincosf@PLT
; NOOPT-NOT:   callq __libm_sse2_sincosf@PLT
  tail call void @sincosf(float %x, ptr %t1, ptr %t2)
  ret void
}

declare void @sincosf(float, ptr, ptr)
declare void @sincos(double, ptr, ptr)

attributes #0 = { "approx-func-fp-math"="true" }
