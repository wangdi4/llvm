; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-unknown -O3 --enable-intel-advanced-opts -mcpu=sapphirerapids | FileCheck %s --check-prefixes=CHECK

declare void @g()

define <8 x double> @test(<2 x double> %x0, <4 x double> %x1, <4 x double> %x2, double %x3) {
; CHECK-LABEL: test:
; CHECK:       # %bb.0:
; CHECK-NEXT:    subq $120, %rsp
; CHECK-NEXT:    .cfi_def_cfa_offset 128
; CHECK-NEXT:    vmovaps %xmm3, (%rsp) # 16-byte Spill
; CHECK-NEXT:    vmovups %ymm2, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; CHECK-NEXT:    vmovups %ymm1, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; CHECK-NEXT:    # kill: def $xmm0 killed $xmm0 def $ymm0
; CHECK-NEXT:    vmovups %ymm0, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    callq g@PLT
; CHECK-NEXT:    vmovapd {{.*#+}} ymm0 = [4,0,1,2]
; CHECK-NEXT:    vmovupd {{[-0-9]+}}(%r{{[sb]}}p), %ymm2 # 32-byte Reload
; CHECK-NEXT:    vpermi2pd {{[-0-9]+}}(%r{{[sb]}}p), %ymm2, %ymm0 # 32-byte Folded Reload
; CHECK-NEXT:    vbroadcasti128 {{.*#+}} ymm1 = [3,5,3,5]
; CHECK-NEXT:    # ymm1 = mem[0,1,0,1]
; CHECK-NEXT:    vpermi2pd {{[-0-9]+}}(%r{{[sb]}}p), %ymm2, %ymm1 # 32-byte Folded Reload
; CHECK-NEXT:    vbroadcastsd (%rsp), %ymm2 # 16-byte Folded Reload
; CHECK-NEXT:    vblendpd {{.*#+}} ymm1 = ymm1[0,1,2],ymm2[3]
; CHECK-NEXT:    addq $120, %rsp
; CHECK-NEXT:    .cfi_def_cfa_offset 8
; CHECK-NEXT:    retq
  call void @g()

  %t0 = shufflevector <2 x double> %x0, <2 x double> poison, <8 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %t1 = shufflevector <4 x double> %x1, <4 x double> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %d2 = shufflevector <8 x double> %t0, <8 x double> %t1, <8 x i32> <i32 0, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef>

  %t2 = shufflevector <4 x double> %x2, <4 x double> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %d3 = shufflevector <8 x double> %d2, <8 x double> %t2, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 undef, i32 undef>
  %d4 = shufflevector <8 x double> %d3, <8 x double> %t1, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 11, i32 undef>
  %d5 = insertelement <8 x double> %d4, double %x3, i64 7

  ret <8 x double> %d5
}
