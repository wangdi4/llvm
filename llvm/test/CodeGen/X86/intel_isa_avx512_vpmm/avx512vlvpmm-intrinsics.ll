; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_avx512_vpmm
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx512vpmm -mattr=+avx512vl --show-mc-encoding | FileCheck %s

define <4 x float> @test_mm_vpmm_ps(<4 x float> %__W1, <8 x half> %__A, <8 x half> %__B) {
; CHECK-LABEL: test_mm_vpmm_ps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vmmf16ps %xmm2, %xmm1, %xmm0 # encoding: [0x62,0xf6,0x76,0x08,0x6f,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
entry:
  %r = tail call <4 x float> @llvm.x86.vpmm.vmmf16ps.128(<4 x float> %__W1, <8 x half> %__A, <8 x half> %__B)
  ret <4 x float> %r
}

define <8 x float> @test_mm256_vpmm_ps(<8 x float> %__W1, <16 x half> %__A, <16 x half> %__B) {
; CHECK-LABEL: test_mm256_vpmm_ps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vmmf16ps %ymm2, %ymm1, %ymm0 # encoding: [0x62,0xf6,0x76,0x28,0x6f,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
entry:
  %r = tail call <8 x float> @llvm.x86.vpmm.vmmf16ps.256(<8 x float> %__W1, <16 x half> %__A, <16 x half> %__B)
  ret <8 x float> %r
}

declare {<4 x float>, <4 x float>} @llvm.x86.vpmm.vmmxf16ps.128(<4 x float>, <4 x float>, <8 x half>, <8 x half>)
declare {<8 x float>, <8 x float>} @llvm.x86.vpmm.vmmxf16ps.256(<8 x float>, <8 x float>, <16 x half>, <16 x half>)
declare <4 x float> @llvm.x86.vpmm.vmmf16ps.128(<4 x float>, <8 x half>, <8 x half>)
declare <8 x float> @llvm.x86.vpmm.vmmf16ps.256(<8 x float>, <16 x half>, <16 x half>)

define <8 x float> @test_int_x86_vpmm_vmmbf16ps_256(<8 x float> %A, <16 x bfloat> %B, <16 x bfloat> %C) nounwind {
; CHECK-LABEL: test_int_x86_vpmm_vmmbf16ps_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vmmbf16ps %ymm2, %ymm1, %ymm0 # encoding: [0x62,0xf6,0x77,0x28,0x6f,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %ret = call <8 x float> @llvm.x86.vpmm.vmmbf16ps.256(<8 x float> %A, <16 x bfloat> %B, <16 x bfloat> %C)
  ret <8 x float> %ret
}

declare <8 x float> @llvm.x86.vpmm.vmmbf16ps.256(<8 x float> %A, <16 x bfloat> %B, <16 x bfloat> %C)

define <8 x float> @test_int_x86_vpmm_vmmbf8ps_256(<8 x float> %A, <32 x i8> %B, <32 x i8> %C) nounwind {
; CHECK-LABEL: test_int_x86_vpmm_vmmbf8ps_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vmmbf8ps %ymm2, %ymm1, %ymm0 # encoding: [0x62,0xf6,0x74,0x28,0x6d,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %ret = call <8 x float> @llvm.x86.vpmm.vmmbf8ps.256(<8 x float> %A, <32 x i8> %B, <32 x i8> %C)
  ret <8 x float> %ret
}

declare <8 x float> @llvm.x86.vpmm.vmmbf8ps.256(<8 x float> %A, <32 x i8> %B, <32 x i8> %C)

define <8 x float> @test_int_x86_vpmm_vmmbhf8ps_256(<8 x float> %A, <32 x i8> %B, <32 x i8> %C) nounwind {
; CHECK-LABEL: test_int_x86_vpmm_vmmbhf8ps_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vmmbhf8ps %ymm2, %ymm1, %ymm0 # encoding: [0x62,0xf6,0x77,0x28,0x6d,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %ret = call <8 x float> @llvm.x86.vpmm.vmmbhf8ps.256(<8 x float> %A, <32 x i8> %B, <32 x i8> %C)
  ret <8 x float> %ret
}

declare <8 x float> @llvm.x86.vpmm.vmmbhf8ps.256(<8 x float> %A, <32 x i8> %B, <32 x i8> %C)

define <8 x float> @test_int_x86_vpmm_vmmhbf8ps_256(<8 x float> %A, <32 x i8> %B, <32 x i8> %C) nounwind {
; CHECK-LABEL: test_int_x86_vpmm_vmmhbf8ps_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vmmhbf8ps %ymm2, %ymm1, %ymm0 # encoding: [0x62,0xf6,0x76,0x28,0x6d,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %ret = call <8 x float> @llvm.x86.vpmm.vmmhbf8ps.256(<8 x float> %A, <32 x i8> %B, <32 x i8> %C)
  ret <8 x float> %ret
}

declare <8 x float> @llvm.x86.vpmm.vmmhbf8ps.256(<8 x float> %A, <32 x i8> %B, <32 x i8> %C)

define <8 x float> @test_int_x86_vpmm_vmmhf8ps_256(<8 x float> %A, <32 x i8> %B, <32 x i8> %C) nounwind {
; CHECK-LABEL: test_int_x86_vpmm_vmmhf8ps_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vmmhf8ps %ymm2, %ymm1, %ymm0 # encoding: [0x62,0xf6,0x75,0x28,0x6d,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %ret = call <8 x float> @llvm.x86.vpmm.vmmhf8ps.256(<8 x float> %A, <32 x i8> %B, <32 x i8> %C)
  ret <8 x float> %ret
}

declare <8 x float> @llvm.x86.vpmm.vmmhf8ps.256(<8 x float> %A, <32 x i8> %B, <32 x i8> %C)

define <8 x float> @test_int_x86_vpmm_vmmtf32ps_256(<8 x float> %A, <8 x i32> %B, <8 x i32> %C) nounwind {
; CHECK-LABEL: test_int_x86_vpmm_vmmtf32ps_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vmmtf32ps %ymm2, %ymm1, %ymm0 # encoding: [0x62,0xf6,0x75,0x28,0x6f,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %ret = call <8 x float> @llvm.x86.vpmm.vmmtf32ps.256(<8 x float> %A, <8 x i32> %B, <8 x i32> %C)
  ret <8 x float> %ret
}

declare <8 x float> @llvm.x86.vpmm.vmmtf32ps.256(<8 x float> %A, <8 x i32> %B, <8 x i32> %C)

define <8 x i32> @test_int_x86_vpmm_vpmmssbd_256(<8 x i32> %A, <32 x i8> %B, <32 x i8> %C) nounwind {
; CHECK-LABEL: test_int_x86_vpmm_vpmmssbd_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpmmssbd %ymm2, %ymm1, %ymm0 # encoding: [0x62,0xf6,0x77,0x28,0x6c,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %ret = call <8 x i32> @llvm.x86.vpmm.vpmmssbd.256(<8 x i32> %A, <32 x i8> %B, <32 x i8> %C)
  ret <8 x i32> %ret
}

declare <8 x i32> @llvm.x86.vpmm.vpmmssbd.256(<8 x i32> %A, <32 x i8> %B, <32 x i8> %C)

define <8 x i32> @test_int_x86_vpmm_vpmmsubd_256(<8 x i32> %A, <32 x i8> %B, <32 x i8> %C) nounwind {
; CHECK-LABEL: test_int_x86_vpmm_vpmmsubd_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpmmsubd %ymm2, %ymm1, %ymm0 # encoding: [0x62,0xf6,0x76,0x28,0x6c,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %ret = call <8 x i32> @llvm.x86.vpmm.vpmmsubd.256(<8 x i32> %A, <32 x i8> %B, <32 x i8> %C)
  ret <8 x i32> %ret
}

declare <8 x i32> @llvm.x86.vpmm.vpmmsubd.256(<8 x i32> %A, <32 x i8> %B, <32 x i8> %C)

define <8 x i32> @test_int_x86_vpmm_vpmmusbd_256(<8 x i32> %A, <32 x i8> %B, <32 x i8> %C) nounwind {
; CHECK-LABEL: test_int_x86_vpmm_vpmmusbd_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpmmusbd %ymm2, %ymm1, %ymm0 # encoding: [0x62,0xf6,0x75,0x28,0x6c,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %ret = call <8 x i32> @llvm.x86.vpmm.vpmmusbd.256(<8 x i32> %A, <32 x i8> %B, <32 x i8> %C)
  ret <8 x i32> %ret
}

declare <8 x i32> @llvm.x86.vpmm.vpmmusbd.256(<8 x i32> %A, <32 x i8> %B, <32 x i8> %C)

define <8 x i32> @test_int_x86_vpmm_vpmmuubd_256(<8 x i32> %A, <32 x i8> %B, <32 x i8> %C) nounwind {
; CHECK-LABEL: test_int_x86_vpmm_vpmmuubd_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpmmuubd %ymm2, %ymm1, %ymm0 # encoding: [0x62,0xf6,0x74,0x28,0x6c,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %ret = call <8 x i32> @llvm.x86.vpmm.vpmmuubd.256(<8 x i32> %A, <32 x i8> %B, <32 x i8> %C)
  ret <8 x i32> %ret
}

declare <8 x i32> @llvm.x86.vpmm.vpmmuubd.256(<8 x i32> %A, <32 x i8> %B, <32 x i8> %C)

define <4 x float> @test_int_x86_vpmm_vmmbf16ps_128(<4 x float> %A, <8 x bfloat> %B, <8 x bfloat> %C) nounwind {
; CHECK-LABEL: test_int_x86_vpmm_vmmbf16ps_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vmmbf16ps %xmm2, %xmm1, %xmm0 # encoding: [0x62,0xf6,0x77,0x08,0x6f,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %ret = call <4 x float> @llvm.x86.vpmm.vmmbf16ps.128(<4 x float> %A, <8 x bfloat> %B, <8 x bfloat> %C)
  ret <4 x float> %ret
}
declare <4 x float> @llvm.x86.vpmm.vmmbf16ps.128(<4 x float> %A, <8 x bfloat> %B, <8 x bfloat> %C)

define <4 x float> @test_int_x86_vpmm_vmmbf8ps_128(<4 x float> %A, <16 x i8> %B, <16 x i8> %C) nounwind {
; CHECK-LABEL: test_int_x86_vpmm_vmmbf8ps_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vmmbf8ps %xmm2, %xmm1, %xmm0 # encoding: [0x62,0xf6,0x74,0x08,0x6d,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %ret = call <4 x float> @llvm.x86.vpmm.vmmbf8ps.128(<4 x float> %A, <16 x i8> %B, <16 x i8> %C)
  ret <4 x float> %ret
}
declare <4 x float> @llvm.x86.vpmm.vmmbf8ps.128(<4 x float> %A, <16 x i8> %B, <16 x i8> %C)

define <4 x float> @test_int_x86_vpmm_vmmbhf8ps_128(<4 x float> %A, <16 x i8> %B, <16 x i8> %C) nounwind {
; CHECK-LABEL: test_int_x86_vpmm_vmmbhf8ps_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vmmbhf8ps %xmm2, %xmm1, %xmm0 # encoding: [0x62,0xf6,0x77,0x08,0x6d,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %ret = call <4 x float> @llvm.x86.vpmm.vmmbhf8ps.128(<4 x float> %A, <16 x i8> %B, <16 x i8> %C)
  ret <4 x float> %ret
}
declare <4 x float> @llvm.x86.vpmm.vmmbhf8ps.128(<4 x float> %A, <16 x i8> %B, <16 x i8> %C)

define <4 x float> @test_int_x86_vpmm_vmmhbf8ps_128(<4 x float> %A, <16 x i8> %B, <16 x i8> %C) nounwind {
; CHECK-LABEL: test_int_x86_vpmm_vmmhbf8ps_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vmmhbf8ps %xmm2, %xmm1, %xmm0 # encoding: [0x62,0xf6,0x76,0x08,0x6d,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %ret = call <4 x float> @llvm.x86.vpmm.vmmhbf8ps.128(<4 x float> %A, <16 x i8> %B, <16 x i8> %C)
  ret <4 x float> %ret
}
declare <4 x float> @llvm.x86.vpmm.vmmhbf8ps.128(<4 x float> %A, <16 x i8> %B, <16 x i8> %C)

define <4 x float> @test_int_x86_vpmm_vmmhf8ps_128(<4 x float> %A, <16 x i8> %B, <16 x i8> %C) nounwind {
; CHECK-LABEL: test_int_x86_vpmm_vmmhf8ps_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vmmhf8ps %xmm2, %xmm1, %xmm0 # encoding: [0x62,0xf6,0x75,0x08,0x6d,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %ret = call <4 x float> @llvm.x86.vpmm.vmmhf8ps.128(<4 x float> %A, <16 x i8> %B, <16 x i8> %C)
  ret <4 x float> %ret
}
declare <4 x float> @llvm.x86.vpmm.vmmhf8ps.128(<4 x float> %A, <16 x i8> %B, <16 x i8> %C)

define <4 x float> @test_int_x86_vpmm_vmmtf32ps_128(<4 x float> %A, <4 x i32> %B, <4 x i32> %C) nounwind {
; CHECK-LABEL: test_int_x86_vpmm_vmmtf32ps_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vmmtf32ps %xmm2, %xmm1, %xmm0 # encoding: [0x62,0xf6,0x75,0x08,0x6f,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %ret = call <4 x float> @llvm.x86.vpmm.vmmtf32ps.128(<4 x float> %A, <4 x i32> %B, <4 x i32> %C)
  ret <4 x float> %ret
}
declare <4 x float> @llvm.x86.vpmm.vmmtf32ps.128(<4 x float> %A, <4 x i32> %B, <4 x i32> %C)


define <4 x i32> @test_int_x86_vpmm_vpmmssbd_128(<4 x i32> %A, <16 x i8> %B, <16 x i8> %C) nounwind {
; CHECK-LABEL: test_int_x86_vpmm_vpmmssbd_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpmmssbd %xmm2, %xmm1, %xmm0 # encoding: [0x62,0xf6,0x77,0x08,0x6c,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.vpmm.vpmmssbd.128(<4 x i32> %A, <16 x i8> %B, <16 x i8> %C)
  ret <4 x i32> %ret
}

declare <4 x i32> @llvm.x86.vpmm.vpmmssbd.128(<4 x i32> %A, <16 x i8> %B, <16 x i8> %C)

define <4 x i32> @test_int_x86_vpmm_vpmmsubd_128(<4 x i32> %A, <16 x i8> %B, <16 x i8> %C) nounwind {
; CHECK-LABEL: test_int_x86_vpmm_vpmmsubd_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpmmsubd %xmm2, %xmm1, %xmm0 # encoding: [0x62,0xf6,0x76,0x08,0x6c,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.vpmm.vpmmsubd.128(<4 x i32> %A, <16 x i8> %B, <16 x i8> %C)
  ret <4 x i32> %ret
}

declare <4 x i32> @llvm.x86.vpmm.vpmmsubd.128(<4 x i32> %A, <16 x i8> %B, <16 x i8> %C)

define <4 x i32> @test_int_x86_vpmm_vpmmusbd_128(<4 x i32> %A, <16 x i8> %B, <16 x i8> %C) nounwind {
; CHECK-LABEL: test_int_x86_vpmm_vpmmusbd_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpmmusbd %xmm2, %xmm1, %xmm0 # encoding: [0x62,0xf6,0x75,0x08,0x6c,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.vpmm.vpmmusbd.128(<4 x i32> %A, <16 x i8> %B, <16 x i8> %C)
  ret <4 x i32> %ret
}

declare <4 x i32> @llvm.x86.vpmm.vpmmusbd.128(<4 x i32> %A, <16 x i8> %B, <16 x i8> %C)

define <4 x i32> @test_int_x86_vpmm_vpmmuubd_128(<4 x i32> %A, <16 x i8> %B, <16 x i8> %C) nounwind {
; CHECK-LABEL: test_int_x86_vpmm_vpmmuubd_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpmmuubd %xmm2, %xmm1, %xmm0 # encoding: [0x62,0xf6,0x74,0x08,0x6c,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.vpmm.vpmmuubd.128(<4 x i32> %A, <16 x i8> %B, <16 x i8> %C)
  ret <4 x i32> %ret
}

declare <4 x i32> @llvm.x86.vpmm.vpmmuubd.128(<4 x i32> %A, <16 x i8> %B, <16 x i8> %C)
