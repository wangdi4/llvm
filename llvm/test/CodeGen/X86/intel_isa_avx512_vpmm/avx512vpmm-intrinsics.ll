; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_avx512_vpmm
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx512vpmm --show-mc-encoding | FileCheck %s

define <16 x float> @test_mm512_vpmm_ps(<16 x float> %__W1, <32 x half> %__A, <32 x half> %__B) {
; CHECK-LABEL: test_mm512_vpmm_ps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vmmf16ps %zmm2, %zmm1, %zmm0 # encoding: [0x62,0xf6,0x76,0x48,0x6f,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
entry:
  %r = tail call <16 x float> @llvm.x86.vpmm.vmmf16ps.512(<16 x float> %__W1, <32 x half> %__A, <32 x half> %__B)
  ret <16 x float> %r
}

declare <16 x float> @llvm.x86.vpmm.vmmf16ps.512(<16 x float>, <32 x half>, <32 x half>)

define <16 x float> @test_int_x86_vpmm_vmmbf16ps_512(<16 x float> %A, <32 x bfloat> %B, <32 x bfloat> %C) nounwind {
; CHECK-LABEL: test_int_x86_vpmm_vmmbf16ps_512:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vmmbf16ps %zmm2, %zmm1, %zmm0 # encoding: [0x62,0xf6,0x77,0x48,0x6f,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %ret = call <16 x float> @llvm.x86.vpmm.vmmbf16ps.512(<16 x float> %A, <32 x bfloat> %B, <32 x bfloat> %C)
  ret <16 x float> %ret
}

declare <16 x float> @llvm.x86.vpmm.vmmbf16ps.512(<16 x float> %A, <32 x bfloat> %B, <32 x bfloat> %C)

define <16 x float> @test_int_x86_vpmm_vmmbf8ps_512(<16 x float> %A, <64 x i8> %B, <64 x i8> %C) nounwind {
; CHECK-LABEL: test_int_x86_vpmm_vmmbf8ps_512:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vmmbf8ps %zmm2, %zmm1, %zmm0 # encoding: [0x62,0xf6,0x74,0x48,0x6d,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %ret = call <16 x float> @llvm.x86.vpmm.vmmbf8ps.512(<16 x float> %A, <64 x i8> %B, <64 x i8> %C)
  ret <16 x float> %ret
}

declare <16 x float> @llvm.x86.vpmm.vmmbf8ps.512(<16 x float> %A, <64 x i8> %B, <64 x i8> %C)

define <16 x float> @test_int_x86_vpmm_vmmbhf8ps_512(<16 x float> %A, <64 x i8> %B, <64 x i8> %C) nounwind {
; CHECK-LABEL: test_int_x86_vpmm_vmmbhf8ps_512:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vmmbhf8ps %zmm2, %zmm1, %zmm0 # encoding: [0x62,0xf6,0x77,0x48,0x6d,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %ret = call <16 x float> @llvm.x86.vpmm.vmmbhf8ps.512(<16 x float> %A, <64 x i8> %B, <64 x i8> %C)
  ret <16 x float> %ret
}

declare <16 x float> @llvm.x86.vpmm.vmmbhf8ps.512(<16 x float> %A, <64 x i8> %B, <64 x i8> %C)

define <16 x float> @test_int_x86_vpmm_vmmhbf8ps_512(<16 x float> %A, <64 x i8> %B, <64 x i8> %C) nounwind {
; CHECK-LABEL: test_int_x86_vpmm_vmmhbf8ps_512:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vmmhbf8ps %zmm2, %zmm1, %zmm0 # encoding: [0x62,0xf6,0x76,0x48,0x6d,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %ret = call <16 x float> @llvm.x86.vpmm.vmmhbf8ps.512(<16 x float> %A, <64 x i8> %B, <64 x i8> %C)
  ret <16 x float> %ret
}

declare <16 x float> @llvm.x86.vpmm.vmmhbf8ps.512(<16 x float> %A, <64 x i8> %B, <64 x i8> %C)

define <16 x float> @test_int_x86_vpmm_vmmhf8ps_512(<16 x float> %A, <64 x i8> %B, <64 x i8> %C) nounwind {
; CHECK-LABEL: test_int_x86_vpmm_vmmhf8ps_512:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vmmhf8ps %zmm2, %zmm1, %zmm0 # encoding: [0x62,0xf6,0x75,0x48,0x6d,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %ret = call <16 x float> @llvm.x86.vpmm.vmmhf8ps.512(<16 x float> %A, <64 x i8> %B, <64 x i8> %C)
  ret <16 x float> %ret
}

declare <16 x float> @llvm.x86.vpmm.vmmhf8ps.512(<16 x float> %A, <64 x i8> %B, <64 x i8> %C)

define <16 x float> @test_int_x86_vpmm_vmmtf32ps_512(<16 x float> %A, <16 x i32> %B, <16 x i32> %C) nounwind {
; CHECK-LABEL: test_int_x86_vpmm_vmmtf32ps_512:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vmmtf32ps %zmm2, %zmm1, %zmm0 # encoding: [0x62,0xf6,0x75,0x48,0x6f,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %ret = call <16 x float> @llvm.x86.vpmm.vmmtf32ps.512(<16 x float> %A, <16 x i32> %B, <16 x i32> %C)
  ret <16 x float> %ret
}

declare <16 x float> @llvm.x86.vpmm.vmmtf32ps.512(<16 x float> %A, <16 x i32> %B, <16 x i32> %C)

define <16 x i32> @test_int_x86_vpmm_vpmmssbd_512(<16 x i32> %A, <64 x i8> %B, <64 x i8> %C) nounwind {
; CHECK-LABEL: test_int_x86_vpmm_vpmmssbd_512:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpmmssbd %zmm2, %zmm1, %zmm0 # encoding: [0x62,0xf6,0x77,0x48,0x6c,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %ret = call <16 x i32> @llvm.x86.vpmm.vpmmssbd.512(<16 x i32> %A, <64 x i8> %B, <64 x i8> %C)
  ret <16 x i32> %ret
}

declare <16 x i32> @llvm.x86.vpmm.vpmmssbd.512(<16 x i32> %A, <64 x i8> %B, <64 x i8> %C)

define <16 x i32> @test_int_x86_vpmm_vpmmsubd_512(<16 x i32> %A, <64 x i8> %B, <64 x i8> %C) nounwind {
; CHECK-LABEL: test_int_x86_vpmm_vpmmsubd_512:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpmmsubd %zmm2, %zmm1, %zmm0 # encoding: [0x62,0xf6,0x76,0x48,0x6c,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %ret = call <16 x i32> @llvm.x86.vpmm.vpmmsubd.512(<16 x i32> %A, <64 x i8> %B, <64 x i8> %C)
  ret <16 x i32> %ret
}

declare <16 x i32> @llvm.x86.vpmm.vpmmsubd.512(<16 x i32> %A, <64 x i8> %B, <64 x i8> %C)

define <16 x i32> @test_int_x86_vpmm_vpmmusbd_512(<16 x i32> %A, <64 x i8> %B, <64 x i8> %C) nounwind {
; CHECK-LABEL: test_int_x86_vpmm_vpmmusbd_512:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpmmusbd %zmm2, %zmm1, %zmm0 # encoding: [0x62,0xf6,0x75,0x48,0x6c,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %ret = call <16 x i32> @llvm.x86.vpmm.vpmmusbd.512(<16 x i32> %A, <64 x i8> %B, <64 x i8> %C)
  ret <16 x i32> %ret
}

declare <16 x i32> @llvm.x86.vpmm.vpmmusbd.512(<16 x i32> %A, <64 x i8> %B, <64 x i8> %C)

define <16 x i32> @test_int_x86_vpmm_vpmmuubd_512(<16 x i32> %A, <64 x i8> %B, <64 x i8> %C) nounwind {
; CHECK-LABEL: test_int_x86_vpmm_vpmmuubd_512:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpmmuubd %zmm2, %zmm1, %zmm0 # encoding: [0x62,0xf6,0x74,0x48,0x6c,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %ret = call <16 x i32> @llvm.x86.vpmm.vpmmuubd.512(<16 x i32> %A, <64 x i8> %B, <64 x i8> %C)
  ret <16 x i32> %ret
}

declare <16 x i32> @llvm.x86.vpmm.vpmmuubd.512(<16 x i32> %A, <64 x i8> %B, <64 x i8> %C)
