; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -disable-peephole -O3 -enable-intel-advanced-opts=true -mcpu=skylake -mtriple=x86_64-unknown-linux-gnu -mattr=avx2 < %s | FileCheck %s

@int_base = external dso_local global [0 x i32], align 4

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z10s1p32i32v4Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s1p32i32v4Dv2_x:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpcmpeqd %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vpgatherdd %xmm2, int_base(,%xmm0), %xmm1
; CHECK-NEXT:    vmovdqa %xmm1, %xmm0
; CHECK-NEXT:    retq
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = tail call <4 x i32> @llvm.x86.avx2.gather.d.d(<4 x i32> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, i8 1)
  %c = bitcast <4 x i32> %b to <2 x i64>
  ret <2 x i64> %c
}

; Function Attrs: nofree nounwind readonly
declare <4 x i32> @llvm.x86.avx2.gather.d.d(<4 x i32>, i8*, <4 x i32>, <4 x i32>, i8 immarg)

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z12s1p32i32v4m0Dv2_xS_S_(<2 x i64> noundef %index, <2 x i64> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s1p32i32v4m0Dv2_xS_S_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpgatherdd %xmm2, int_base(,%xmm0), %xmm1
; CHECK-NEXT:    vmovdqa %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %src to <4 x i32>
  %b = bitcast <2 x i64> %index to <4 x i32>
  %c = bitcast <2 x i64> %mask to <4 x i32>
  %d = tail call <4 x i32> @llvm.x86.avx2.gather.d.d(<4 x i32> %a, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %b, <4 x i32> %c, i8 1)
  %e = bitcast <4 x i32> %d to <2 x i64>
  ret <2 x i64> %e
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x i64> @_Z10s1p32i32v8Dv4_x(<4 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s1p32i32v8Dv4_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %ymm2, %ymm2, %ymm2
; CHECK-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vpgatherdd %ymm2, int_base(,%ymm0), %ymm1
; CHECK-NEXT:    vmovdqa %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <4 x i64> %index to <8 x i32>
  %b = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <8 x i32> %a, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 1)
  %c = bitcast <8 x i32> %b to <4 x i64>
  ret <4 x i64> %c
}

; Function Attrs: nofree nounwind readonly
declare <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32>, i8*, <8 x i32>, <8 x i32>, i8 immarg)

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x i64> @_Z12s1p32i32v8m0Dv4_xS_S_(<4 x i64> noundef %index, <4 x i64> noundef %src, <4 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s1p32i32v8m0Dv4_xS_S_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpgatherdd %ymm2, int_base(,%ymm0), %ymm1
; CHECK-NEXT:    vmovdqa %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <4 x i64> %src to <8 x i32>
  %b = bitcast <4 x i64> %index to <8 x i32>
  %c = bitcast <4 x i64> %mask to <8 x i32>
  %d = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> %a, i8* bitcast ([0 x i32]* @int_base to i8*), <8 x i32> %b, <8 x i32> %c, i8 1)
  %e = bitcast <8 x i32> %d to <4 x i64>
  ret <4 x i64> %e
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z10s1p32i64v2Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s1p32i64v2Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vpgatherdq %xmm2, int_base(,%xmm0), %xmm1
; CHECK-NEXT:    vmovdqa %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = tail call <2 x i64> @llvm.x86.avx2.gather.d.q(<2 x i64> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <2 x i64> <i64 -1, i64 -1>, i8 1)
  ret <2 x i64> %b
}

; Function Attrs: nofree nounwind readonly
declare <2 x i64> @llvm.x86.avx2.gather.d.q(<2 x i64>, i8*, <4 x i32>, <2 x i64>, i8 immarg)

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z12s1p32i64v2m0Dv2_xS_S_(<2 x i64> noundef %index, <2 x i64> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s1p32i64v2m0Dv2_xS_S_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpgatherdq %xmm2, int_base(,%xmm0), %xmm1
; CHECK-NEXT:    vmovdqa %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = tail call <2 x i64> @llvm.x86.avx2.gather.d.q(<2 x i64> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <2 x i64> %mask, i8 1)
  ret <2 x i64> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x i64> @_Z10s1p32i64v4Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s1p32i64v4Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %ymm2, %ymm2, %ymm2
; CHECK-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vpgatherdq %ymm2, int_base(,%xmm0), %ymm1
; CHECK-NEXT:    vmovdqa %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = tail call <4 x i64> @llvm.x86.avx2.gather.d.q.256(<4 x i64> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <4 x i64> <i64 -1, i64 -1, i64 -1, i64 -1>, i8 1)
  ret <4 x i64> %b
}

; Function Attrs: nofree nounwind readonly
declare <4 x i64> @llvm.x86.avx2.gather.d.q.256(<4 x i64>, i8*, <4 x i32>, <4 x i64>, i8 immarg)

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x i64> @_Z12s1p32i64v4m0Dv2_xDv4_xS0_(<2 x i64> noundef %index, <4 x i64> noundef %src, <4 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s1p32i64v4m0Dv2_xDv4_xS0_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpgatherdq %ymm2, int_base(,%xmm0), %ymm1
; CHECK-NEXT:    vmovdqa %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = tail call <4 x i64> @llvm.x86.avx2.gather.d.q.256(<4 x i64> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <4 x i64> %mask, i8 1)
  ret <4 x i64> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z10s1p64i32v2Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s1p64i32v2Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vmovdqa {{.*#+}} xmm1 = [4294967295,4294967295,0,0]
; CHECK-NEXT:    vpxor %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vpgatherqd %xmm1, int_base(,%xmm0), %xmm2
; CHECK-NEXT:    vmovq {{.*#+}} xmm0 = xmm2[0],zero
; CHECK-NEXT:    retq
entry:
  %a = tail call <4 x i32> @llvm.x86.avx2.gather.q.d(<4 x i32> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <2 x i64> %index, <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, i8 1)
  %b = bitcast <4 x i32> %a to <2 x i64>
  ret <2 x i64> %b
}

; Function Attrs: nofree nounwind readonly
declare <4 x i32> @llvm.x86.avx2.gather.q.d(<4 x i32>, i8*, <2 x i64>, <4 x i32>, i8 immarg)

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z12s1p64i32v2m0Dv2_xS_S_(<2 x i64> noundef %index, <2 x i64> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s1p64i32v2m0Dv2_xS_S_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpgatherqd %xmm2, int_base(,%xmm0), %xmm1
; CHECK-NEXT:    vmovq {{.*#+}} xmm0 = xmm1[0],zero
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %src to <4 x i32>
  %b = bitcast <2 x i64> %mask to <4 x i32>
  %c = tail call <4 x i32> @llvm.x86.avx2.gather.q.d(<4 x i32> %a, i8* bitcast ([0 x i32]* @int_base to i8*), <2 x i64> %index, <4 x i32> %b, i8 1)
  %d = bitcast <4 x i32> %c to <2 x i64>
  ret <2 x i64> %d
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z10s1p64i32v4Dv4_x(<4 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s1p64i32v4Dv4_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vpgatherqd %xmm2, int_base(,%ymm0), %xmm1
; CHECK-NEXT:    vmovdqa %xmm1, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
entry:
  %a = tail call <4 x i32> @llvm.x86.avx2.gather.q.d.256(<4 x i32> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i64> %index, <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, i8 1)
  %b = bitcast <4 x i32> %a to <2 x i64>
  ret <2 x i64> %b
}

; Function Attrs: nofree nounwind readonly
declare <4 x i32> @llvm.x86.avx2.gather.q.d.256(<4 x i32>, i8*, <4 x i64>, <4 x i32>, i8 immarg)

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z12s1p64i32v4m0Dv4_xDv2_xS0_(<4 x i64> noundef %index, <2 x i64> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s1p64i32v4m0Dv4_xDv2_xS0_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpgatherqd %xmm2, int_base(,%ymm0), %xmm1
; CHECK-NEXT:    vmovdqa %xmm1, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %src to <4 x i32>
  %b = bitcast <2 x i64> %mask to <4 x i32>
  %c = tail call <4 x i32> @llvm.x86.avx2.gather.q.d.256(<4 x i32> %a, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i64> %index, <4 x i32> %b, i8 1)
  %d = bitcast <4 x i32> %c to <2 x i64>
  ret <2 x i64> %d
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z10s1p64i64v2Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s1p64i64v2Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vpgatherqq %xmm2, int_base(,%xmm0), %xmm1
; CHECK-NEXT:    vmovdqa %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = tail call <2 x i64> @llvm.x86.avx2.gather.q.q(<2 x i64> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <2 x i64> %index, <2 x i64> <i64 -1, i64 -1>, i8 1)
  ret <2 x i64> %a
}

; Function Attrs: nofree nounwind readonly
declare <2 x i64> @llvm.x86.avx2.gather.q.q(<2 x i64>, i8*, <2 x i64>, <2 x i64>, i8 immarg)

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z12s1p64i64v2m0Dv2_xS_S_(<2 x i64> noundef %index, <2 x i64> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s1p64i64v2m0Dv2_xS_S_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpgatherqq %xmm2, int_base(,%xmm0), %xmm1
; CHECK-NEXT:    vmovdqa %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = tail call <2 x i64> @llvm.x86.avx2.gather.q.q(<2 x i64> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <2 x i64> %index, <2 x i64> %mask, i8 1)
  ret <2 x i64> %a
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x i64> @_Z10s1p64i64v4Dv4_x(<4 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s1p64i64v4Dv4_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %ymm2, %ymm2, %ymm2
; CHECK-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vpgatherqq %ymm2, int_base(,%ymm0), %ymm1
; CHECK-NEXT:    vmovdqa %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = tail call <4 x i64> @llvm.x86.avx2.gather.q.q.256(<4 x i64> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i64> %index, <4 x i64> <i64 -1, i64 -1, i64 -1, i64 -1>, i8 1)
  ret <4 x i64> %a
}

; Function Attrs: nofree nounwind readonly
declare <4 x i64> @llvm.x86.avx2.gather.q.q.256(<4 x i64>, i8*, <4 x i64>, <4 x i64>, i8 immarg)

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x i64> @_Z12s1p64i64v4m0Dv4_xS_S_(<4 x i64> noundef %index, <4 x i64> noundef %src, <4 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s1p64i64v4m0Dv4_xS_S_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpgatherqq %ymm2, int_base(,%ymm0), %ymm1
; CHECK-NEXT:    vmovdqa %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = tail call <4 x i64> @llvm.x86.avx2.gather.q.q.256(<4 x i64> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i64> %index, <4 x i64> %mask, i8 1)
  ret <4 x i64> %a
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x float> @_Z10s1p32f32v4Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s1p32f32v4Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vgatherdps %xmm2, int_base(,%xmm0), %xmm1
; CHECK-NEXT:    vmovaps %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = tail call fast <4 x float> @llvm.x86.avx2.gather.d.ps(<4 x float> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <4 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1)
  ret <4 x float> %b
}

; Function Attrs: nofree nounwind readonly
declare <4 x float> @llvm.x86.avx2.gather.d.ps(<4 x float>, i8*, <4 x i32>, <4 x float>, i8 immarg)

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x float> @_Z12s1p32f32v4m0Dv2_xDv4_fS_(<2 x i64> noundef %index, <4 x float> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s1p32f32v4m0Dv2_xDv4_fS_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vgatherdps %xmm2, int_base(,%xmm0), %xmm1
; CHECK-NEXT:    vmovaps %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = bitcast <2 x i64> %mask to <4 x float>
  %c = tail call fast <4 x float> @llvm.x86.avx2.gather.d.ps(<4 x float> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <4 x float> %b, i8 1)
  ret <4 x float> %c
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <8 x float> @_Z10s1p32f32v8Dv4_x(<4 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s1p32f32v8Dv4_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %ymm2, %ymm2, %ymm2
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vgatherdps %ymm2, int_base(,%ymm0), %ymm1
; CHECK-NEXT:    vmovaps %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <4 x i64> %index to <8 x i32>
  %b = tail call fast <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <8 x i32> %a, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1)
  ret <8 x float> %b
}

; Function Attrs: nofree nounwind readonly
declare <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float>, i8*, <8 x i32>, <8 x float>, i8 immarg)

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <8 x float> @_Z12s1p32f32v8m0Dv4_xDv8_fS_(<4 x i64> noundef %index, <8 x float> noundef %src, <4 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s1p32f32v8m0Dv4_xDv8_fS_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vgatherdps %ymm2, int_base(,%ymm0), %ymm1
; CHECK-NEXT:    vmovaps %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <4 x i64> %index to <8 x i32>
  %b = bitcast <4 x i64> %mask to <8 x float>
  %c = tail call fast <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <8 x i32> %a, <8 x float> %b, i8 1)
  ret <8 x float> %c
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x double> @_Z10s1p32f64v2Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s1p32f64v2Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vxorpd %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vgatherdpd %xmm2, int_base(,%xmm0), %xmm1
; CHECK-NEXT:    vmovapd %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = tail call fast <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 1)
  ret <2 x double> %b
}

; Function Attrs: nofree nounwind readonly
declare <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double>, i8*, <4 x i32>, <2 x double>, i8 immarg)

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x double> @_Z12s1p32f64v2m0Dv2_xDv2_dS_(<2 x i64> noundef %index, <2 x double> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s1p32f64v2m0Dv2_xDv2_dS_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vgatherdpd %xmm2, int_base(,%xmm0), %xmm1
; CHECK-NEXT:    vmovapd %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = bitcast <2 x i64> %mask to <2 x double>
  %c = tail call fast <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <2 x double> %b, i8 1)
  ret <2 x double> %c
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x double> @_Z10s1p32f64v4Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s1p32f64v4Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %ymm2, %ymm2, %ymm2
; CHECK-NEXT:    vxorpd %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vgatherdpd %ymm2, int_base(,%xmm0), %ymm1
; CHECK-NEXT:    vmovapd %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = tail call fast <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 1)
  ret <4 x double> %b
}

; Function Attrs: nofree nounwind readonly
declare <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double>, i8*, <4 x i32>, <4 x double>, i8 immarg)

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x double> @_Z12s1p32f64v4m0Dv2_xDv4_dDv4_x(<2 x i64> noundef %index, <4 x double> noundef %src, <4 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s1p32f64v4m0Dv2_xDv4_dDv4_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vgatherdpd %ymm2, int_base(,%xmm0), %ymm1
; CHECK-NEXT:    vmovapd %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = bitcast <4 x i64> %mask to <4 x double>
  %c = tail call fast <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <4 x double> %b, i8 1)
  ret <4 x double> %c
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x float> @_Z10s1p64f32v2Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s1p64f32v2Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vmovaps {{.*#+}} xmm1 = [4294967295,4294967295,0,0]
; CHECK-NEXT:    vxorps %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vgatherqps %xmm1, int_base(,%xmm0), %xmm2
; CHECK-NEXT:    vmovq {{.*#+}} xmm0 = xmm2[0],zero
; CHECK-NEXT:    retq
entry:
  %a = tail call fast <4 x float> @llvm.x86.avx2.gather.q.ps(<4 x float> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <2 x i64> %index, <4 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1)
  ret <4 x float> %a
}

; Function Attrs: nofree nounwind readonly
declare <4 x float> @llvm.x86.avx2.gather.q.ps(<4 x float>, i8*, <2 x i64>, <4 x float>, i8 immarg)

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x float> @_Z12s1p64f32v2m0Dv2_xDv4_fS_(<2 x i64> noundef %index, <4 x float> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s1p64f32v2m0Dv2_xDv4_fS_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vgatherqps %xmm2, int_base(,%xmm0), %xmm1
; CHECK-NEXT:    vmovq {{.*#+}} xmm0 = xmm1[0],zero
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %mask to <4 x float>
  %b = tail call fast <4 x float> @llvm.x86.avx2.gather.q.ps(<4 x float> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <2 x i64> %index, <4 x float> %a, i8 1)
  ret <4 x float> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x float> @_Z10s1p64f32v4Dv4_x(<4 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s1p64f32v4Dv4_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vgatherqps %xmm2, int_base(,%ymm0), %xmm1
; CHECK-NEXT:    vmovaps %xmm1, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
entry:
  %a = tail call fast <4 x float> @llvm.x86.avx2.gather.q.ps.256(<4 x float> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i64> %index, <4 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 1)
  ret <4 x float> %a
}

; Function Attrs: nofree nounwind readonly
declare <4 x float> @llvm.x86.avx2.gather.q.ps.256(<4 x float>, i8*, <4 x i64>, <4 x float>, i8 immarg)

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x float> @_Z12s1p64f32v4m0Dv4_xDv4_fDv2_x(<4 x i64> noundef %index, <4 x float> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s1p64f32v4m0Dv4_xDv4_fDv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vgatherqps %xmm2, int_base(,%ymm0), %xmm1
; CHECK-NEXT:    vmovaps %xmm1, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %mask to <4 x float>
  %b = tail call fast <4 x float> @llvm.x86.avx2.gather.q.ps.256(<4 x float> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i64> %index, <4 x float> %a, i8 1)
  ret <4 x float> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x double> @_Z10s1p64f64v2Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s1p64f64v2Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vxorpd %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vgatherqpd %xmm2, int_base(,%xmm0), %xmm1
; CHECK-NEXT:    vmovapd %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = tail call fast <2 x double> @llvm.x86.avx2.gather.q.pd(<2 x double> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <2 x i64> %index, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 1)
  ret <2 x double> %a
}

; Function Attrs: nofree nounwind readonly
declare <2 x double> @llvm.x86.avx2.gather.q.pd(<2 x double>, i8*, <2 x i64>, <2 x double>, i8 immarg)

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x double> @_Z12s1p64f64v2m0Dv2_xDv2_dS_(<2 x i64> noundef %index, <2 x double> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s1p64f64v2m0Dv2_xDv2_dS_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vgatherqpd %xmm2, int_base(,%xmm0), %xmm1
; CHECK-NEXT:    vmovapd %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %mask to <2 x double>
  %b = tail call fast <2 x double> @llvm.x86.avx2.gather.q.pd(<2 x double> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <2 x i64> %index, <2 x double> %a, i8 1)
  ret <2 x double> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x double> @_Z10s1p64f64v4Dv4_x(<4 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s1p64f64v4Dv4_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %ymm2, %ymm2, %ymm2
; CHECK-NEXT:    vxorpd %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vgatherqpd %ymm2, int_base(,%ymm0), %ymm1
; CHECK-NEXT:    vmovapd %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = tail call fast <4 x double> @llvm.x86.avx2.gather.q.pd.256(<4 x double> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i64> %index, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 1)
  ret <4 x double> %a
}

; Function Attrs: nofree nounwind readonly
declare <4 x double> @llvm.x86.avx2.gather.q.pd.256(<4 x double>, i8*, <4 x i64>, <4 x double>, i8 immarg)

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x double> @_Z12s1p64f64v4m0Dv4_xDv4_dS_(<4 x i64> noundef %index, <4 x double> noundef %src, <4 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s1p64f64v4m0Dv4_xDv4_dS_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vgatherqpd %ymm2, int_base(,%ymm0), %ymm1
; CHECK-NEXT:    vmovapd %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <4 x i64> %mask to <4 x double>
  %b = tail call fast <4 x double> @llvm.x86.avx2.gather.q.pd.256(<4 x double> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i64> %index, <4 x double> %a, i8 1)
  ret <4 x double> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z10s2p32i32v4Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s2p32i32v4Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vpgatherdd %xmm2, int_base(,%xmm0,2), %xmm1
; CHECK-NEXT:    vmovdqa %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = tail call <4 x i32> @llvm.x86.avx2.gather.d.d(<4 x i32> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, i8 2)
  %c = bitcast <4 x i32> %b to <2 x i64>
  ret <2 x i64> %c
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z12s2p32i32v4m0Dv2_xS_S_(<2 x i64> noundef %index, <2 x i64> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s2p32i32v4m0Dv2_xS_S_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpgatherdd %xmm2, int_base(,%xmm0,2), %xmm1
; CHECK-NEXT:    vmovdqa %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %src to <4 x i32>
  %b = bitcast <2 x i64> %index to <4 x i32>
  %c = bitcast <2 x i64> %mask to <4 x i32>
  %d = tail call <4 x i32> @llvm.x86.avx2.gather.d.d(<4 x i32> %a, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %b, <4 x i32> %c, i8 2)
  %e = bitcast <4 x i32> %d to <2 x i64>
  ret <2 x i64> %e
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x i64> @_Z10s2p32i32v8Dv4_x(<4 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s2p32i32v8Dv4_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %ymm2, %ymm2, %ymm2
; CHECK-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vpgatherdd %ymm2, int_base(,%ymm0,2), %ymm1
; CHECK-NEXT:    vmovdqa %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <4 x i64> %index to <8 x i32>
  %b = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <8 x i32> %a, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 2)
  %c = bitcast <8 x i32> %b to <4 x i64>
  ret <4 x i64> %c
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x i64> @_Z12s2p32i32v8m0Dv4_xS_S_(<4 x i64> noundef %index, <4 x i64> noundef %src, <4 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s2p32i32v8m0Dv4_xS_S_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpgatherdd %ymm2, int_base(,%ymm0,2), %ymm1
; CHECK-NEXT:    vmovdqa %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <4 x i64> %src to <8 x i32>
  %b = bitcast <4 x i64> %index to <8 x i32>
  %c = bitcast <4 x i64> %mask to <8 x i32>
  %d = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> %a, i8* bitcast ([0 x i32]* @int_base to i8*), <8 x i32> %b, <8 x i32> %c, i8 2)
  %e = bitcast <8 x i32> %d to <4 x i64>
  ret <4 x i64> %e
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z10s2p32i64v2Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s2p32i64v2Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vpgatherdq %xmm2, int_base(,%xmm0,2), %xmm1
; CHECK-NEXT:    vmovdqa %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = tail call <2 x i64> @llvm.x86.avx2.gather.d.q(<2 x i64> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <2 x i64> <i64 -1, i64 -1>, i8 2)
  ret <2 x i64> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z12s2p32i64v2m0Dv2_xS_S_(<2 x i64> noundef %index, <2 x i64> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s2p32i64v2m0Dv2_xS_S_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpgatherdq %xmm2, int_base(,%xmm0,2), %xmm1
; CHECK-NEXT:    vmovdqa %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = tail call <2 x i64> @llvm.x86.avx2.gather.d.q(<2 x i64> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <2 x i64> %mask, i8 2)
  ret <2 x i64> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x i64> @_Z10s2p32i64v4Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s2p32i64v4Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %ymm2, %ymm2, %ymm2
; CHECK-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vpgatherdq %ymm2, int_base(,%xmm0,2), %ymm1
; CHECK-NEXT:    vmovdqa %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = tail call <4 x i64> @llvm.x86.avx2.gather.d.q.256(<4 x i64> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <4 x i64> <i64 -1, i64 -1, i64 -1, i64 -1>, i8 2)
  ret <4 x i64> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x i64> @_Z12s2p32i64v4m0Dv2_xDv4_xS0_(<2 x i64> noundef %index, <4 x i64> noundef %src, <4 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s2p32i64v4m0Dv2_xDv4_xS0_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpgatherdq %ymm2, int_base(,%xmm0,2), %ymm1
; CHECK-NEXT:    vmovdqa %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = tail call <4 x i64> @llvm.x86.avx2.gather.d.q.256(<4 x i64> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <4 x i64> %mask, i8 2)
  ret <4 x i64> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z10s2p64i32v2Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s2p64i32v2Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vmovdqa {{.*#+}} xmm1 = [4294967295,4294967295,0,0]
; CHECK-NEXT:    vpxor %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vpgatherqd %xmm1, int_base(,%xmm0,2), %xmm2
; CHECK-NEXT:    vmovq {{.*#+}} xmm0 = xmm2[0],zero
; CHECK-NEXT:    retq
entry:
  %a = tail call <4 x i32> @llvm.x86.avx2.gather.q.d(<4 x i32> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <2 x i64> %index, <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, i8 2)
  %b = bitcast <4 x i32> %a to <2 x i64>
  ret <2 x i64> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z12s2p64i32v2m0Dv2_xS_S_(<2 x i64> noundef %index, <2 x i64> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s2p64i32v2m0Dv2_xS_S_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpgatherqd %xmm2, int_base(,%xmm0,2), %xmm1
; CHECK-NEXT:    vmovq {{.*#+}} xmm0 = xmm1[0],zero
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %src to <4 x i32>
  %b = bitcast <2 x i64> %mask to <4 x i32>
  %c = tail call <4 x i32> @llvm.x86.avx2.gather.q.d(<4 x i32> %a, i8* bitcast ([0 x i32]* @int_base to i8*), <2 x i64> %index, <4 x i32> %b, i8 2)
  %d = bitcast <4 x i32> %c to <2 x i64>
  ret <2 x i64> %d
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z10s2p64i32v4Dv4_x(<4 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s2p64i32v4Dv4_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vpgatherqd %xmm2, int_base(,%ymm0,2), %xmm1
; CHECK-NEXT:    vmovdqa %xmm1, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
entry:
  %a = tail call <4 x i32> @llvm.x86.avx2.gather.q.d.256(<4 x i32> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i64> %index, <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, i8 2)
  %b = bitcast <4 x i32> %a to <2 x i64>
  ret <2 x i64> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z12s2p64i32v4m0Dv4_xDv2_xS0_(<4 x i64> noundef %index, <2 x i64> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s2p64i32v4m0Dv4_xDv2_xS0_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpgatherqd %xmm2, int_base(,%ymm0,2), %xmm1
; CHECK-NEXT:    vmovdqa %xmm1, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %src to <4 x i32>
  %b = bitcast <2 x i64> %mask to <4 x i32>
  %c = tail call <4 x i32> @llvm.x86.avx2.gather.q.d.256(<4 x i32> %a, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i64> %index, <4 x i32> %b, i8 2)
  %d = bitcast <4 x i32> %c to <2 x i64>
  ret <2 x i64> %d
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z10s2p64i64v2Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s2p64i64v2Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vpgatherqq %xmm2, int_base(,%xmm0,2), %xmm1
; CHECK-NEXT:    vmovdqa %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = tail call <2 x i64> @llvm.x86.avx2.gather.q.q(<2 x i64> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <2 x i64> %index, <2 x i64> <i64 -1, i64 -1>, i8 2)
  ret <2 x i64> %a
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z12s2p64i64v2m0Dv2_xS_S_(<2 x i64> noundef %index, <2 x i64> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s2p64i64v2m0Dv2_xS_S_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpgatherqq %xmm2, int_base(,%xmm0,2), %xmm1
; CHECK-NEXT:    vmovdqa %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = tail call <2 x i64> @llvm.x86.avx2.gather.q.q(<2 x i64> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <2 x i64> %index, <2 x i64> %mask, i8 2)
  ret <2 x i64> %a
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x i64> @_Z10s2p64i64v4Dv4_x(<4 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s2p64i64v4Dv4_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %ymm2, %ymm2, %ymm2
; CHECK-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vpgatherqq %ymm2, int_base(,%ymm0,2), %ymm1
; CHECK-NEXT:    vmovdqa %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = tail call <4 x i64> @llvm.x86.avx2.gather.q.q.256(<4 x i64> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i64> %index, <4 x i64> <i64 -1, i64 -1, i64 -1, i64 -1>, i8 2)
  ret <4 x i64> %a
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x i64> @_Z12s2p64i64v4m0Dv4_xS_S_(<4 x i64> noundef %index, <4 x i64> noundef %src, <4 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s2p64i64v4m0Dv4_xS_S_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpgatherqq %ymm2, int_base(,%ymm0,2), %ymm1
; CHECK-NEXT:    vmovdqa %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = tail call <4 x i64> @llvm.x86.avx2.gather.q.q.256(<4 x i64> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i64> %index, <4 x i64> %mask, i8 2)
  ret <4 x i64> %a
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x float> @_Z10s2p32f32v4Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s2p32f32v4Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vgatherdps %xmm2, int_base(,%xmm0,2), %xmm1
; CHECK-NEXT:    vmovaps %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = tail call fast <4 x float> @llvm.x86.avx2.gather.d.ps(<4 x float> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <4 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 2)
  ret <4 x float> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x float> @_Z12s2p32f32v4m0Dv2_xDv4_fS_(<2 x i64> noundef %index, <4 x float> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s2p32f32v4m0Dv2_xDv4_fS_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vgatherdps %xmm2, int_base(,%xmm0,2), %xmm1
; CHECK-NEXT:    vmovaps %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = bitcast <2 x i64> %mask to <4 x float>
  %c = tail call fast <4 x float> @llvm.x86.avx2.gather.d.ps(<4 x float> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <4 x float> %b, i8 2)
  ret <4 x float> %c
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <8 x float> @_Z10s2p32f32v8Dv4_x(<4 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s2p32f32v8Dv4_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %ymm2, %ymm2, %ymm2
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vgatherdps %ymm2, int_base(,%ymm0,2), %ymm1
; CHECK-NEXT:    vmovaps %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <4 x i64> %index to <8 x i32>
  %b = tail call fast <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <8 x i32> %a, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 2)
  ret <8 x float> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <8 x float> @_Z12s2p32f32v8m0Dv4_xDv8_fS_(<4 x i64> noundef %index, <8 x float> noundef %src, <4 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s2p32f32v8m0Dv4_xDv8_fS_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vgatherdps %ymm2, int_base(,%ymm0,2), %ymm1
; CHECK-NEXT:    vmovaps %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <4 x i64> %index to <8 x i32>
  %b = bitcast <4 x i64> %mask to <8 x float>
  %c = tail call fast <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <8 x i32> %a, <8 x float> %b, i8 2)
  ret <8 x float> %c
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x double> @_Z10s2p32f64v2Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s2p32f64v2Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vxorpd %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vgatherdpd %xmm2, int_base(,%xmm0,2), %xmm1
; CHECK-NEXT:    vmovapd %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = tail call fast <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 2)
  ret <2 x double> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x double> @_Z12s2p32f64v2m0Dv2_xDv2_dS_(<2 x i64> noundef %index, <2 x double> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s2p32f64v2m0Dv2_xDv2_dS_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vgatherdpd %xmm2, int_base(,%xmm0,2), %xmm1
; CHECK-NEXT:    vmovapd %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = bitcast <2 x i64> %mask to <2 x double>
  %c = tail call fast <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <2 x double> %b, i8 2)
  ret <2 x double> %c
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x double> @_Z10s2p32f64v4Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s2p32f64v4Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %ymm2, %ymm2, %ymm2
; CHECK-NEXT:    vxorpd %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vgatherdpd %ymm2, int_base(,%xmm0,2), %ymm1
; CHECK-NEXT:    vmovapd %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = tail call fast <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 2)
  ret <4 x double> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x double> @_Z12s2p32f64v4m0Dv2_xDv4_dDv4_x(<2 x i64> noundef %index, <4 x double> noundef %src, <4 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s2p32f64v4m0Dv2_xDv4_dDv4_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vgatherdpd %ymm2, int_base(,%xmm0,2), %ymm1
; CHECK-NEXT:    vmovapd %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = bitcast <4 x i64> %mask to <4 x double>
  %c = tail call fast <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <4 x double> %b, i8 2)
  ret <4 x double> %c
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x float> @_Z10s2p64f32v2Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s2p64f32v2Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vmovaps {{.*#+}} xmm1 = [4294967295,4294967295,0,0]
; CHECK-NEXT:    vxorps %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vgatherqps %xmm1, int_base(,%xmm0,2), %xmm2
; CHECK-NEXT:    vmovq {{.*#+}} xmm0 = xmm2[0],zero
; CHECK-NEXT:    retq
entry:
  %a = tail call fast <4 x float> @llvm.x86.avx2.gather.q.ps(<4 x float> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <2 x i64> %index, <4 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 2)
  ret <4 x float> %a
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x float> @_Z12s2p64f32v2m0Dv2_xDv4_fS_(<2 x i64> noundef %index, <4 x float> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s2p64f32v2m0Dv2_xDv4_fS_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vgatherqps %xmm2, int_base(,%xmm0,2), %xmm1
; CHECK-NEXT:    vmovq {{.*#+}} xmm0 = xmm1[0],zero
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %mask to <4 x float>
  %b = tail call fast <4 x float> @llvm.x86.avx2.gather.q.ps(<4 x float> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <2 x i64> %index, <4 x float> %a, i8 2)
  ret <4 x float> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x float> @_Z10s2p64f32v4Dv4_x(<4 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s2p64f32v4Dv4_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vgatherqps %xmm2, int_base(,%ymm0,2), %xmm1
; CHECK-NEXT:    vmovaps %xmm1, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
entry:
  %a = tail call fast <4 x float> @llvm.x86.avx2.gather.q.ps.256(<4 x float> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i64> %index, <4 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 2)
  ret <4 x float> %a
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x float> @_Z12s2p64f32v4m0Dv4_xDv4_fDv2_x(<4 x i64> noundef %index, <4 x float> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s2p64f32v4m0Dv4_xDv4_fDv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vgatherqps %xmm2, int_base(,%ymm0,2), %xmm1
; CHECK-NEXT:    vmovaps %xmm1, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %mask to <4 x float>
  %b = tail call fast <4 x float> @llvm.x86.avx2.gather.q.ps.256(<4 x float> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i64> %index, <4 x float> %a, i8 2)
  ret <4 x float> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x double> @_Z10s2p64f64v2Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s2p64f64v2Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vxorpd %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vgatherqpd %xmm2, int_base(,%xmm0,2), %xmm1
; CHECK-NEXT:    vmovapd %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = tail call fast <2 x double> @llvm.x86.avx2.gather.q.pd(<2 x double> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <2 x i64> %index, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 2)
  ret <2 x double> %a
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x double> @_Z12s2p64f64v2m0Dv2_xDv2_dS_(<2 x i64> noundef %index, <2 x double> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s2p64f64v2m0Dv2_xDv2_dS_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vgatherqpd %xmm2, int_base(,%xmm0,2), %xmm1
; CHECK-NEXT:    vmovapd %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %mask to <2 x double>
  %b = tail call fast <2 x double> @llvm.x86.avx2.gather.q.pd(<2 x double> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <2 x i64> %index, <2 x double> %a, i8 2)
  ret <2 x double> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x double> @_Z10s2p64f64v4Dv4_x(<4 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s2p64f64v4Dv4_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %ymm2, %ymm2, %ymm2
; CHECK-NEXT:    vxorpd %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vgatherqpd %ymm2, int_base(,%ymm0,2), %ymm1
; CHECK-NEXT:    vmovapd %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = tail call fast <4 x double> @llvm.x86.avx2.gather.q.pd.256(<4 x double> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i64> %index, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 2)
  ret <4 x double> %a
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x double> @_Z12s2p64f64v4m0Dv4_xDv4_dS_(<4 x i64> noundef %index, <4 x double> noundef %src, <4 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s2p64f64v4m0Dv4_xDv4_dS_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vgatherqpd %ymm2, int_base(,%ymm0,2), %ymm1
; CHECK-NEXT:    vmovapd %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <4 x i64> %mask to <4 x double>
  %b = tail call fast <4 x double> @llvm.x86.avx2.gather.q.pd.256(<4 x double> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i64> %index, <4 x double> %a, i8 2)
  ret <4 x double> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z10s4p32i32v4Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s4p32i32v4Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vpgatherdd %xmm2, int_base(,%xmm0,4), %xmm1
; CHECK-NEXT:    vmovdqa %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = tail call <4 x i32> @llvm.x86.avx2.gather.d.d(<4 x i32> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, i8 4)
  %c = bitcast <4 x i32> %b to <2 x i64>
  ret <2 x i64> %c
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z12s4p32i32v4m0Dv2_xS_S_(<2 x i64> noundef %index, <2 x i64> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s4p32i32v4m0Dv2_xS_S_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpgatherdd %xmm2, int_base(,%xmm0,4), %xmm1
; CHECK-NEXT:    vmovdqa %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %src to <4 x i32>
  %b = bitcast <2 x i64> %index to <4 x i32>
  %c = bitcast <2 x i64> %mask to <4 x i32>
  %d = tail call <4 x i32> @llvm.x86.avx2.gather.d.d(<4 x i32> %a, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %b, <4 x i32> %c, i8 4)
  %e = bitcast <4 x i32> %d to <2 x i64>
  ret <2 x i64> %e
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x i64> @_Z10s4p32i32v8Dv4_x(<4 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s4p32i32v8Dv4_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %ymm2, %ymm2, %ymm2
; CHECK-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vpgatherdd %ymm2, int_base(,%ymm0,4), %ymm1
; CHECK-NEXT:    vmovdqa %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <4 x i64> %index to <8 x i32>
  %b = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <8 x i32> %a, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4)
  %c = bitcast <8 x i32> %b to <4 x i64>
  ret <4 x i64> %c
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x i64> @_Z12s4p32i32v8m0Dv4_xS_S_(<4 x i64> noundef %index, <4 x i64> noundef %src, <4 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s4p32i32v8m0Dv4_xS_S_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpgatherdd %ymm2, int_base(,%ymm0,4), %ymm1
; CHECK-NEXT:    vmovdqa %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <4 x i64> %src to <8 x i32>
  %b = bitcast <4 x i64> %index to <8 x i32>
  %c = bitcast <4 x i64> %mask to <8 x i32>
  %d = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> %a, i8* bitcast ([0 x i32]* @int_base to i8*), <8 x i32> %b, <8 x i32> %c, i8 4)
  %e = bitcast <8 x i32> %d to <4 x i64>
  ret <4 x i64> %e
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z10s4p32i64v2Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s4p32i64v2Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vpgatherdq %xmm2, int_base(,%xmm0,4), %xmm1
; CHECK-NEXT:    vmovdqa %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = tail call <2 x i64> @llvm.x86.avx2.gather.d.q(<2 x i64> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <2 x i64> <i64 -1, i64 -1>, i8 4)
  ret <2 x i64> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z12s4p32i64v2m0Dv2_xS_S_(<2 x i64> noundef %index, <2 x i64> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s4p32i64v2m0Dv2_xS_S_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpgatherdq %xmm2, int_base(,%xmm0,4), %xmm1
; CHECK-NEXT:    vmovdqa %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = tail call <2 x i64> @llvm.x86.avx2.gather.d.q(<2 x i64> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <2 x i64> %mask, i8 4)
  ret <2 x i64> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x i64> @_Z10s4p32i64v4Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s4p32i64v4Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %ymm2, %ymm2, %ymm2
; CHECK-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vpgatherdq %ymm2, int_base(,%xmm0,4), %ymm1
; CHECK-NEXT:    vmovdqa %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = tail call <4 x i64> @llvm.x86.avx2.gather.d.q.256(<4 x i64> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <4 x i64> <i64 -1, i64 -1, i64 -1, i64 -1>, i8 4)
  ret <4 x i64> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x i64> @_Z12s4p32i64v4m0Dv2_xDv4_xS0_(<2 x i64> noundef %index, <4 x i64> noundef %src, <4 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s4p32i64v4m0Dv2_xDv4_xS0_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpgatherdq %ymm2, int_base(,%xmm0,4), %ymm1
; CHECK-NEXT:    vmovdqa %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = tail call <4 x i64> @llvm.x86.avx2.gather.d.q.256(<4 x i64> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <4 x i64> %mask, i8 4)
  ret <4 x i64> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z10s4p64i32v2Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s4p64i32v2Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vmovdqa {{.*#+}} xmm1 = [4294967295,4294967295,0,0]
; CHECK-NEXT:    vpxor %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vpgatherqd %xmm1, int_base(,%xmm0,4), %xmm2
; CHECK-NEXT:    vmovq {{.*#+}} xmm0 = xmm2[0],zero
; CHECK-NEXT:    retq
entry:
  %a = tail call <4 x i32> @llvm.x86.avx2.gather.q.d(<4 x i32> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <2 x i64> %index, <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, i8 4)
  %b = bitcast <4 x i32> %a to <2 x i64>
  ret <2 x i64> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z12s4p64i32v2m0Dv2_xS_S_(<2 x i64> noundef %index, <2 x i64> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s4p64i32v2m0Dv2_xS_S_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpgatherqd %xmm2, int_base(,%xmm0,4), %xmm1
; CHECK-NEXT:    vmovq {{.*#+}} xmm0 = xmm1[0],zero
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %src to <4 x i32>
  %b = bitcast <2 x i64> %mask to <4 x i32>
  %c = tail call <4 x i32> @llvm.x86.avx2.gather.q.d(<4 x i32> %a, i8* bitcast ([0 x i32]* @int_base to i8*), <2 x i64> %index, <4 x i32> %b, i8 4)
  %d = bitcast <4 x i32> %c to <2 x i64>
  ret <2 x i64> %d
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z10s4p64i32v4Dv4_x(<4 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s4p64i32v4Dv4_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vpgatherqd %xmm2, int_base(,%ymm0,4), %xmm1
; CHECK-NEXT:    vmovdqa %xmm1, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
entry:
  %a = tail call <4 x i32> @llvm.x86.avx2.gather.q.d.256(<4 x i32> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i64> %index, <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, i8 4)
  %b = bitcast <4 x i32> %a to <2 x i64>
  ret <2 x i64> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z12s4p64i32v4m0Dv4_xDv2_xS0_(<4 x i64> noundef %index, <2 x i64> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s4p64i32v4m0Dv4_xDv2_xS0_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpgatherqd %xmm2, int_base(,%ymm0,4), %xmm1
; CHECK-NEXT:    vmovdqa %xmm1, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %src to <4 x i32>
  %b = bitcast <2 x i64> %mask to <4 x i32>
  %c = tail call <4 x i32> @llvm.x86.avx2.gather.q.d.256(<4 x i32> %a, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i64> %index, <4 x i32> %b, i8 4)
  %d = bitcast <4 x i32> %c to <2 x i64>
  ret <2 x i64> %d
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z10s4p64i64v2Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s4p64i64v2Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vpgatherqq %xmm2, int_base(,%xmm0,4), %xmm1
; CHECK-NEXT:    vmovdqa %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = tail call <2 x i64> @llvm.x86.avx2.gather.q.q(<2 x i64> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <2 x i64> %index, <2 x i64> <i64 -1, i64 -1>, i8 4)
  ret <2 x i64> %a
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z12s4p64i64v2m0Dv2_xS_S_(<2 x i64> noundef %index, <2 x i64> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s4p64i64v2m0Dv2_xS_S_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpgatherqq %xmm2, int_base(,%xmm0,4), %xmm1
; CHECK-NEXT:    vmovdqa %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = tail call <2 x i64> @llvm.x86.avx2.gather.q.q(<2 x i64> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <2 x i64> %index, <2 x i64> %mask, i8 4)
  ret <2 x i64> %a
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x i64> @_Z10s4p64i64v4Dv4_x(<4 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s4p64i64v4Dv4_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %ymm2, %ymm2, %ymm2
; CHECK-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vpgatherqq %ymm2, int_base(,%ymm0,4), %ymm1
; CHECK-NEXT:    vmovdqa %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = tail call <4 x i64> @llvm.x86.avx2.gather.q.q.256(<4 x i64> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i64> %index, <4 x i64> <i64 -1, i64 -1, i64 -1, i64 -1>, i8 4)
  ret <4 x i64> %a
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x i64> @_Z12s4p64i64v4m0Dv4_xS_S_(<4 x i64> noundef %index, <4 x i64> noundef %src, <4 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s4p64i64v4m0Dv4_xS_S_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpgatherqq %ymm2, int_base(,%ymm0,4), %ymm1
; CHECK-NEXT:    vmovdqa %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = tail call <4 x i64> @llvm.x86.avx2.gather.q.q.256(<4 x i64> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i64> %index, <4 x i64> %mask, i8 4)
  ret <4 x i64> %a
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x float> @_Z10s4p32f32v4Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s4p32f32v4Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vgatherdps %xmm2, int_base(,%xmm0,4), %xmm1
; CHECK-NEXT:    vmovaps %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = tail call fast <4 x float> @llvm.x86.avx2.gather.d.ps(<4 x float> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <4 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4)
  ret <4 x float> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x float> @_Z12s4p32f32v4m0Dv2_xDv4_fS_(<2 x i64> noundef %index, <4 x float> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s4p32f32v4m0Dv2_xDv4_fS_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vgatherdps %xmm2, int_base(,%xmm0,4), %xmm1
; CHECK-NEXT:    vmovaps %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = bitcast <2 x i64> %mask to <4 x float>
  %c = tail call fast <4 x float> @llvm.x86.avx2.gather.d.ps(<4 x float> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <4 x float> %b, i8 4)
  ret <4 x float> %c
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <8 x float> @_Z10s4p32f32v8Dv4_x(<4 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s4p32f32v8Dv4_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %ymm2, %ymm2, %ymm2
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vgatherdps %ymm2, int_base(,%ymm0,4), %ymm1
; CHECK-NEXT:    vmovaps %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <4 x i64> %index to <8 x i32>
  %b = tail call fast <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <8 x i32> %a, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4)
  ret <8 x float> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <8 x float> @_Z12s4p32f32v8m0Dv4_xDv8_fS_(<4 x i64> noundef %index, <8 x float> noundef %src, <4 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s4p32f32v8m0Dv4_xDv8_fS_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vgatherdps %ymm2, int_base(,%ymm0,4), %ymm1
; CHECK-NEXT:    vmovaps %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <4 x i64> %index to <8 x i32>
  %b = bitcast <4 x i64> %mask to <8 x float>
  %c = tail call fast <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <8 x i32> %a, <8 x float> %b, i8 4)
  ret <8 x float> %c
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x double> @_Z10s4p32f64v2Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s4p32f64v2Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vxorpd %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vgatherdpd %xmm2, int_base(,%xmm0,4), %xmm1
; CHECK-NEXT:    vmovapd %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = tail call fast <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 4)
  ret <2 x double> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x double> @_Z12s4p32f64v2m0Dv2_xDv2_dS_(<2 x i64> noundef %index, <2 x double> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s4p32f64v2m0Dv2_xDv2_dS_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vgatherdpd %xmm2, int_base(,%xmm0,4), %xmm1
; CHECK-NEXT:    vmovapd %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = bitcast <2 x i64> %mask to <2 x double>
  %c = tail call fast <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <2 x double> %b, i8 4)
  ret <2 x double> %c
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x double> @_Z10s4p32f64v4Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s4p32f64v4Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %ymm2, %ymm2, %ymm2
; CHECK-NEXT:    vxorpd %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vgatherdpd %ymm2, int_base(,%xmm0,4), %ymm1
; CHECK-NEXT:    vmovapd %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = tail call fast <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 4)
  ret <4 x double> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x double> @_Z12s4p32f64v4m0Dv2_xDv4_dDv4_x(<2 x i64> noundef %index, <4 x double> noundef %src, <4 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s4p32f64v4m0Dv2_xDv4_dDv4_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vgatherdpd %ymm2, int_base(,%xmm0,4), %ymm1
; CHECK-NEXT:    vmovapd %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = bitcast <4 x i64> %mask to <4 x double>
  %c = tail call fast <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <4 x double> %b, i8 4)
  ret <4 x double> %c
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x float> @_Z10s4p64f32v2Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s4p64f32v2Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vmovaps {{.*#+}} xmm1 = [4294967295,4294967295,0,0]
; CHECK-NEXT:    vxorps %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vgatherqps %xmm1, int_base(,%xmm0,4), %xmm2
; CHECK-NEXT:    vmovq {{.*#+}} xmm0 = xmm2[0],zero
; CHECK-NEXT:    retq
entry:
  %a = tail call fast <4 x float> @llvm.x86.avx2.gather.q.ps(<4 x float> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <2 x i64> %index, <4 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4)
  ret <4 x float> %a
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x float> @_Z12s4p64f32v2m0Dv2_xDv4_fS_(<2 x i64> noundef %index, <4 x float> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s4p64f32v2m0Dv2_xDv4_fS_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vgatherqps %xmm2, int_base(,%xmm0,4), %xmm1
; CHECK-NEXT:    vmovq {{.*#+}} xmm0 = xmm1[0],zero
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %mask to <4 x float>
  %b = tail call fast <4 x float> @llvm.x86.avx2.gather.q.ps(<4 x float> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <2 x i64> %index, <4 x float> %a, i8 4)
  ret <4 x float> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x float> @_Z10s4p64f32v4Dv4_x(<4 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s4p64f32v4Dv4_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vgatherqps %xmm2, int_base(,%ymm0,4), %xmm1
; CHECK-NEXT:    vmovaps %xmm1, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
entry:
  %a = tail call fast <4 x float> @llvm.x86.avx2.gather.q.ps.256(<4 x float> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i64> %index, <4 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4)
  ret <4 x float> %a
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x float> @_Z12s4p64f32v4m0Dv4_xDv4_fDv2_x(<4 x i64> noundef %index, <4 x float> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s4p64f32v4m0Dv4_xDv4_fDv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vgatherqps %xmm2, int_base(,%ymm0,4), %xmm1
; CHECK-NEXT:    vmovaps %xmm1, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %mask to <4 x float>
  %b = tail call fast <4 x float> @llvm.x86.avx2.gather.q.ps.256(<4 x float> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i64> %index, <4 x float> %a, i8 4)
  ret <4 x float> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x double> @_Z10s4p64f64v2Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s4p64f64v2Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vxorpd %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vgatherqpd %xmm2, int_base(,%xmm0,4), %xmm1
; CHECK-NEXT:    vmovapd %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = tail call fast <2 x double> @llvm.x86.avx2.gather.q.pd(<2 x double> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <2 x i64> %index, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 4)
  ret <2 x double> %a
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x double> @_Z12s4p64f64v2m0Dv2_xDv2_dS_(<2 x i64> noundef %index, <2 x double> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s4p64f64v2m0Dv2_xDv2_dS_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vgatherqpd %xmm2, int_base(,%xmm0,4), %xmm1
; CHECK-NEXT:    vmovapd %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %mask to <2 x double>
  %b = tail call fast <2 x double> @llvm.x86.avx2.gather.q.pd(<2 x double> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <2 x i64> %index, <2 x double> %a, i8 4)
  ret <2 x double> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x double> @_Z10s4p64f64v4Dv4_x(<4 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s4p64f64v4Dv4_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %ymm2, %ymm2, %ymm2
; CHECK-NEXT:    vxorpd %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vgatherqpd %ymm2, int_base(,%ymm0,4), %ymm1
; CHECK-NEXT:    vmovapd %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = tail call fast <4 x double> @llvm.x86.avx2.gather.q.pd.256(<4 x double> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i64> %index, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 4)
  ret <4 x double> %a
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x double> @_Z12s4p64f64v4m0Dv4_xDv4_dS_(<4 x i64> noundef %index, <4 x double> noundef %src, <4 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s4p64f64v4m0Dv4_xDv4_dS_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vgatherqpd %ymm2, int_base(,%ymm0,4), %ymm1
; CHECK-NEXT:    vmovapd %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <4 x i64> %mask to <4 x double>
  %b = tail call fast <4 x double> @llvm.x86.avx2.gather.q.pd.256(<4 x double> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i64> %index, <4 x double> %a, i8 4)
  ret <4 x double> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z10s8p32i32v4Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s8p32i32v4Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vpgatherdd %xmm2, int_base(,%xmm0,8), %xmm1
; CHECK-NEXT:    vmovdqa %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = tail call <4 x i32> @llvm.x86.avx2.gather.d.d(<4 x i32> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, i8 8)
  %c = bitcast <4 x i32> %b to <2 x i64>
  ret <2 x i64> %c
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z12s8p32i32v4m0Dv2_xS_S_(<2 x i64> noundef %index, <2 x i64> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s8p32i32v4m0Dv2_xS_S_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpgatherdd %xmm2, int_base(,%xmm0,8), %xmm1
; CHECK-NEXT:    vmovdqa %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %src to <4 x i32>
  %b = bitcast <2 x i64> %index to <4 x i32>
  %c = bitcast <2 x i64> %mask to <4 x i32>
  %d = tail call <4 x i32> @llvm.x86.avx2.gather.d.d(<4 x i32> %a, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %b, <4 x i32> %c, i8 8)
  %e = bitcast <4 x i32> %d to <2 x i64>
  ret <2 x i64> %e
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x i64> @_Z10s8p32i32v8Dv4_x(<4 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s8p32i32v8Dv4_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %ymm2, %ymm2, %ymm2
; CHECK-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vpgatherdd %ymm2, int_base(,%ymm0,8), %ymm1
; CHECK-NEXT:    vmovdqa %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <4 x i64> %index to <8 x i32>
  %b = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <8 x i32> %a, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 8)
  %c = bitcast <8 x i32> %b to <4 x i64>
  ret <4 x i64> %c
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x i64> @_Z12s8p32i32v8m0Dv4_xS_S_(<4 x i64> noundef %index, <4 x i64> noundef %src, <4 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s8p32i32v8m0Dv4_xS_S_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpgatherdd %ymm2, int_base(,%ymm0,8), %ymm1
; CHECK-NEXT:    vmovdqa %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <4 x i64> %src to <8 x i32>
  %b = bitcast <4 x i64> %index to <8 x i32>
  %c = bitcast <4 x i64> %mask to <8 x i32>
  %d = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> %a, i8* bitcast ([0 x i32]* @int_base to i8*), <8 x i32> %b, <8 x i32> %c, i8 8)
  %e = bitcast <8 x i32> %d to <4 x i64>
  ret <4 x i64> %e
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z10s8p32i64v2Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s8p32i64v2Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vpgatherdq %xmm2, int_base(,%xmm0,8), %xmm1
; CHECK-NEXT:    vmovdqa %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = tail call <2 x i64> @llvm.x86.avx2.gather.d.q(<2 x i64> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <2 x i64> <i64 -1, i64 -1>, i8 8)
  ret <2 x i64> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z12s8p32i64v2m0Dv2_xS_S_(<2 x i64> noundef %index, <2 x i64> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s8p32i64v2m0Dv2_xS_S_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpgatherdq %xmm2, int_base(,%xmm0,8), %xmm1
; CHECK-NEXT:    vmovdqa %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = tail call <2 x i64> @llvm.x86.avx2.gather.d.q(<2 x i64> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <2 x i64> %mask, i8 8)
  ret <2 x i64> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x i64> @_Z10s8p32i64v4Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s8p32i64v4Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %ymm2, %ymm2, %ymm2
; CHECK-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vpgatherdq %ymm2, int_base(,%xmm0,8), %ymm1
; CHECK-NEXT:    vmovdqa %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = tail call <4 x i64> @llvm.x86.avx2.gather.d.q.256(<4 x i64> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <4 x i64> <i64 -1, i64 -1, i64 -1, i64 -1>, i8 8)
  ret <4 x i64> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x i64> @_Z12s8p32i64v4m0Dv2_xDv4_xS0_(<2 x i64> noundef %index, <4 x i64> noundef %src, <4 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s8p32i64v4m0Dv2_xDv4_xS0_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpgatherdq %ymm2, int_base(,%xmm0,8), %ymm1
; CHECK-NEXT:    vmovdqa %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = tail call <4 x i64> @llvm.x86.avx2.gather.d.q.256(<4 x i64> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <4 x i64> %mask, i8 8)
  ret <4 x i64> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z10s8p64i32v2Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s8p64i32v2Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vmovdqa {{.*#+}} xmm1 = [4294967295,4294967295,0,0]
; CHECK-NEXT:    vpxor %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vpgatherqd %xmm1, int_base(,%xmm0,8), %xmm2
; CHECK-NEXT:    vmovq {{.*#+}} xmm0 = xmm2[0],zero
; CHECK-NEXT:    retq
entry:
  %a = tail call <4 x i32> @llvm.x86.avx2.gather.q.d(<4 x i32> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <2 x i64> %index, <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, i8 8)
  %b = bitcast <4 x i32> %a to <2 x i64>
  ret <2 x i64> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z12s8p64i32v2m0Dv2_xS_S_(<2 x i64> noundef %index, <2 x i64> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s8p64i32v2m0Dv2_xS_S_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpgatherqd %xmm2, int_base(,%xmm0,8), %xmm1
; CHECK-NEXT:    vmovq {{.*#+}} xmm0 = xmm1[0],zero
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %src to <4 x i32>
  %b = bitcast <2 x i64> %mask to <4 x i32>
  %c = tail call <4 x i32> @llvm.x86.avx2.gather.q.d(<4 x i32> %a, i8* bitcast ([0 x i32]* @int_base to i8*), <2 x i64> %index, <4 x i32> %b, i8 8)
  %d = bitcast <4 x i32> %c to <2 x i64>
  ret <2 x i64> %d
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z10s8p64i32v4Dv4_x(<4 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s8p64i32v4Dv4_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vpgatherqd %xmm2, int_base(,%ymm0,8), %xmm1
; CHECK-NEXT:    vmovdqa %xmm1, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
entry:
  %a = tail call <4 x i32> @llvm.x86.avx2.gather.q.d.256(<4 x i32> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i64> %index, <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, i8 8)
  %b = bitcast <4 x i32> %a to <2 x i64>
  ret <2 x i64> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z12s8p64i32v4m0Dv4_xDv2_xS0_(<4 x i64> noundef %index, <2 x i64> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s8p64i32v4m0Dv4_xDv2_xS0_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpgatherqd %xmm2, int_base(,%ymm0,8), %xmm1
; CHECK-NEXT:    vmovdqa %xmm1, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %src to <4 x i32>
  %b = bitcast <2 x i64> %mask to <4 x i32>
  %c = tail call <4 x i32> @llvm.x86.avx2.gather.q.d.256(<4 x i32> %a, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i64> %index, <4 x i32> %b, i8 8)
  %d = bitcast <4 x i32> %c to <2 x i64>
  ret <2 x i64> %d
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z10s8p64i64v2Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s8p64i64v2Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vpgatherqq %xmm2, int_base(,%xmm0,8), %xmm1
; CHECK-NEXT:    vmovdqa %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = tail call <2 x i64> @llvm.x86.avx2.gather.q.q(<2 x i64> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <2 x i64> %index, <2 x i64> <i64 -1, i64 -1>, i8 8)
  ret <2 x i64> %a
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x i64> @_Z12s8p64i64v2m0Dv2_xS_S_(<2 x i64> noundef %index, <2 x i64> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s8p64i64v2m0Dv2_xS_S_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpgatherqq %xmm2, int_base(,%xmm0,8), %xmm1
; CHECK-NEXT:    vmovdqa %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = tail call <2 x i64> @llvm.x86.avx2.gather.q.q(<2 x i64> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <2 x i64> %index, <2 x i64> %mask, i8 8)
  ret <2 x i64> %a
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x i64> @_Z10s8p64i64v4Dv4_x(<4 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s8p64i64v4Dv4_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %ymm2, %ymm2, %ymm2
; CHECK-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vpgatherqq %ymm2, int_base(,%ymm0,8), %ymm1
; CHECK-NEXT:    vmovdqa %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = tail call <4 x i64> @llvm.x86.avx2.gather.q.q.256(<4 x i64> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i64> %index, <4 x i64> <i64 -1, i64 -1, i64 -1, i64 -1>, i8 8)
  ret <4 x i64> %a
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x i64> @_Z12s8p64i64v4m0Dv4_xS_S_(<4 x i64> noundef %index, <4 x i64> noundef %src, <4 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s8p64i64v4m0Dv4_xS_S_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpgatherqq %ymm2, int_base(,%ymm0,8), %ymm1
; CHECK-NEXT:    vmovdqa %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = tail call <4 x i64> @llvm.x86.avx2.gather.q.q.256(<4 x i64> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i64> %index, <4 x i64> %mask, i8 8)
  ret <4 x i64> %a
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x float> @_Z10s8p32f32v4Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s8p32f32v4Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vgatherdps %xmm2, int_base(,%xmm0,8), %xmm1
; CHECK-NEXT:    vmovaps %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = tail call fast <4 x float> @llvm.x86.avx2.gather.d.ps(<4 x float> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <4 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 8)
  ret <4 x float> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x float> @_Z12s8p32f32v4m0Dv2_xDv4_fS_(<2 x i64> noundef %index, <4 x float> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s8p32f32v4m0Dv2_xDv4_fS_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vgatherdps %xmm2, int_base(,%xmm0,8), %xmm1
; CHECK-NEXT:    vmovaps %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = bitcast <2 x i64> %mask to <4 x float>
  %c = tail call fast <4 x float> @llvm.x86.avx2.gather.d.ps(<4 x float> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <4 x float> %b, i8 8)
  ret <4 x float> %c
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <8 x float> @_Z10s8p32f32v8Dv4_x(<4 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s8p32f32v8Dv4_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %ymm2, %ymm2, %ymm2
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vgatherdps %ymm2, int_base(,%ymm0,8), %ymm1
; CHECK-NEXT:    vmovaps %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <4 x i64> %index to <8 x i32>
  %b = tail call fast <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <8 x i32> %a, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 8)
  ret <8 x float> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <8 x float> @_Z12s8p32f32v8m0Dv4_xDv8_fS_(<4 x i64> noundef %index, <8 x float> noundef %src, <4 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s8p32f32v8m0Dv4_xDv8_fS_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vgatherdps %ymm2, int_base(,%ymm0,8), %ymm1
; CHECK-NEXT:    vmovaps %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <4 x i64> %index to <8 x i32>
  %b = bitcast <4 x i64> %mask to <8 x float>
  %c = tail call fast <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <8 x i32> %a, <8 x float> %b, i8 8)
  ret <8 x float> %c
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x double> @_Z10s8p32f64v2Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s8p32f64v2Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vxorpd %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vgatherdpd %xmm2, int_base(,%xmm0,8), %xmm1
; CHECK-NEXT:    vmovapd %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = tail call fast <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8)
  ret <2 x double> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x double> @_Z12s8p32f64v2m0Dv2_xDv2_dS_(<2 x i64> noundef %index, <2 x double> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s8p32f64v2m0Dv2_xDv2_dS_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vgatherdpd %xmm2, int_base(,%xmm0,8), %xmm1
; CHECK-NEXT:    vmovapd %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = bitcast <2 x i64> %mask to <2 x double>
  %c = tail call fast <2 x double> @llvm.x86.avx2.gather.d.pd(<2 x double> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <2 x double> %b, i8 8)
  ret <2 x double> %c
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x double> @_Z10s8p32f64v4Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s8p32f64v4Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %ymm2, %ymm2, %ymm2
; CHECK-NEXT:    vxorpd %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vgatherdpd %ymm2, int_base(,%xmm0,8), %ymm1
; CHECK-NEXT:    vmovapd %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = tail call fast <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8)
  ret <4 x double> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x double> @_Z12s8p32f64v4m0Dv2_xDv4_dDv4_x(<2 x i64> noundef %index, <4 x double> noundef %src, <4 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s8p32f64v4m0Dv2_xDv4_dDv4_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vgatherdpd %ymm2, int_base(,%xmm0,8), %ymm1
; CHECK-NEXT:    vmovapd %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %index to <4 x i32>
  %b = bitcast <4 x i64> %mask to <4 x double>
  %c = tail call fast <4 x double> @llvm.x86.avx2.gather.d.pd.256(<4 x double> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i32> %a, <4 x double> %b, i8 8)
  ret <4 x double> %c
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x float> @_Z10s8p64f32v2Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s8p64f32v2Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vmovaps {{.*#+}} xmm1 = [4294967295,4294967295,0,0]
; CHECK-NEXT:    vxorps %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vgatherqps %xmm1, int_base(,%xmm0,8), %xmm2
; CHECK-NEXT:    vmovq {{.*#+}} xmm0 = xmm2[0],zero
; CHECK-NEXT:    retq
entry:
  %a = tail call fast <4 x float> @llvm.x86.avx2.gather.q.ps(<4 x float> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <2 x i64> %index, <4 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 8)
  ret <4 x float> %a
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x float> @_Z10s8p64f32v4Dv4_x(<4 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s8p64f32v4Dv4_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vgatherqps %xmm2, int_base(,%ymm0,8), %xmm1
; CHECK-NEXT:    vmovaps %xmm1, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
entry:
  %a = tail call fast <4 x float> @llvm.x86.avx2.gather.q.ps.256(<4 x float> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i64> %index, <4 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 8)
  ret <4 x float> %a
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x float> @_Z12s8p64f32v4m0Dv4_xDv4_fDv2_x(<4 x i64> noundef %index, <4 x float> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s8p64f32v4m0Dv4_xDv4_fDv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vgatherqps %xmm2, int_base(,%ymm0,8), %xmm1
; CHECK-NEXT:    vmovaps %xmm1, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %mask to <4 x float>
  %b = tail call fast <4 x float> @llvm.x86.avx2.gather.q.ps.256(<4 x float> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i64> %index, <4 x float> %a, i8 8)
  ret <4 x float> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x double> @_Z10s8p64f64v2Dv2_x(<2 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s8p64f64v2Dv2_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vxorpd %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vgatherqpd %xmm2, int_base(,%xmm0,8), %xmm1
; CHECK-NEXT:    vmovapd %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = tail call fast <2 x double> @llvm.x86.avx2.gather.q.pd(<2 x double> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <2 x i64> %index, <2 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8)
  ret <2 x double> %a
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <2 x double> @_Z12s8p64f64v2m0Dv2_xDv2_dS_(<2 x i64> noundef %index, <2 x double> noundef %src, <2 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s8p64f64v2m0Dv2_xDv2_dS_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vgatherqpd %xmm2, int_base(,%xmm0,8), %xmm1
; CHECK-NEXT:    vmovapd %xmm1, %xmm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <2 x i64> %mask to <2 x double>
  %b = tail call fast <2 x double> @llvm.x86.avx2.gather.q.pd(<2 x double> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <2 x i64> %index, <2 x double> %a, i8 8)
  ret <2 x double> %b
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x double> @_Z10s8p64f64v4Dv4_x(<4 x i64> noundef %index) local_unnamed_addr {
; CHECK-LABEL: _Z10s8p64f64v4Dv4_x:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpcmpeqd %ymm2, %ymm2, %ymm2
; CHECK-NEXT:    vxorpd %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vgatherqpd %ymm2, int_base(,%ymm0,8), %ymm1
; CHECK-NEXT:    vmovapd %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = tail call fast <4 x double> @llvm.x86.avx2.gather.q.pd.256(<4 x double> zeroinitializer, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i64> %index, <4 x double> <double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF>, i8 8)
  ret <4 x double> %a
}

; Function Attrs: mustprogress nofree nounwind readonly willreturn uwtable
define dso_local noundef <4 x double> @_Z12s8p64f64v4m0Dv4_xDv4_dS_(<4 x i64> noundef %index, <4 x double> noundef %src, <4 x i64> noundef %mask) local_unnamed_addr {
; CHECK-LABEL: _Z12s8p64f64v4m0Dv4_xDv4_dS_:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vgatherqpd %ymm2, int_base(,%ymm0,8), %ymm1
; CHECK-NEXT:    vmovapd %ymm1, %ymm0
; CHECK-NEXT:    retq
entry:
  %a = bitcast <4 x i64> %mask to <4 x double>
  %b = tail call fast <4 x double> @llvm.x86.avx2.gather.q.pd.256(<4 x double> %src, i8* bitcast ([0 x i32]* @int_base to i8*), <4 x i64> %index, <4 x double> %a, i8 8)
  ret <4 x double> %b
}
