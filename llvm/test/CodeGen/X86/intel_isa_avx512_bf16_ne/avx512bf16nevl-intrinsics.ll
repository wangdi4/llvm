; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_avx512_bf16_ne
; RUN: llc < %s -verify-machineinstrs -mtriple=x86_64-unknown-unknown --show-mc-encoding -mattr=+avx512bf16ne -mattr=+avx512vl | FileCheck %s --check-prefixes=CHECK,X64
; RUN: llc < %s -verify-machineinstrs -mtriple=i686-unknown-unknown --show-mc-encoding -mattr=+avx512bf16ne -mattr=+avx512vl | FileCheck %s --check-prefixes=CHECK,X86

declare <16 x bfloat> @llvm.x86.avx512bf16ne.vaddnepbf16256(<16 x bfloat>, <16 x bfloat>)

define <16 x bfloat> @test_int_x86_avx512bf16ne_add_nepbf16_256(<16 x bfloat> %x1, <16 x bfloat> %x2) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_add_nepbf16_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vaddnepbf16 %ymm1, %ymm0, %ymm0 # encoding: [0x62,0xf5,0x7d,0x28,0x58,0xc1]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <16 x bfloat> @llvm.x86.avx512bf16ne.vaddnepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2)
  ret <16 x bfloat> %res
}

define <16 x bfloat> @test_int_x86_avx512bf16ne_mask_add_nepbf16_256(<16 x bfloat> %src, <16 x bfloat> %x1, <16 x bfloat> %x2, i16 %msk, <16 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_mask_add_nepbf16_256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vaddnepbf16 %ymm2, %ymm1, %ymm0 {%k1} # encoding: [0x62,0xf5,0x75,0x29,0x58,0xc2]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_mask_add_nepbf16_256:
; X86:       # %bb.0:
; X86-NEXT:    kmovw {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf8,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vaddnepbf16 %ymm2, %ymm1, %ymm0 {%k1} # encoding: [0x62,0xf5,0x75,0x29,0x58,0xc2]
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %msk to <16 x i1>
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vaddnepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2)
  %res = select <16 x i1> %mask, <16 x bfloat> %res0, <16 x bfloat> %src
  ret <16 x bfloat> %res
}
define <16 x bfloat> @test_int_x86_avx512bf16ne_maskz_add_nepbf16_256(<16 x bfloat> %src, <16 x bfloat> %x1, <16 x bfloat> %x2, i16 %msk, <16 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_add_nepbf16_256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vaddnepbf16 %ymm2, %ymm1, %ymm0 {%k1} {z} # encoding: [0x62,0xf5,0x75,0xa9,0x58,0xc2]
; X64-NEXT:    vaddnepbf16 (%rsi), %ymm1, %ymm1 {%k1} {z} # encoding: [0x62,0xf5,0x75,0xa9,0x58,0x0e]
; X64-NEXT:    vaddnepbf16 %ymm1, %ymm0, %ymm0 # encoding: [0x62,0xf5,0x7d,0x28,0x58,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_add_nepbf16_256:
; X86:       # %bb.0:
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x08]
; X86-NEXT:    kmovw {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf8,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vaddnepbf16 %ymm2, %ymm1, %ymm0 {%k1} {z} # encoding: [0x62,0xf5,0x75,0xa9,0x58,0xc2]
; X86-NEXT:    vaddnepbf16 (%eax), %ymm1, %ymm1 {%k1} {z} # encoding: [0x62,0xf5,0x75,0xa9,0x58,0x08]
; X86-NEXT:    vaddnepbf16 %ymm1, %ymm0, %ymm0 # encoding: [0x62,0xf5,0x7d,0x28,0x58,0xc1]
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %msk to <16 x i1>
  %val = load <16 x bfloat>, <16 x bfloat>* %ptr
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vaddnepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2)
  %res1 = select <16 x i1> %mask, <16 x bfloat> %res0, <16 x bfloat> zeroinitializer
  %t2 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vaddnepbf16256(<16 x bfloat> %x1, <16 x bfloat> %val)
  %res2 = select <16 x i1> %mask, <16 x bfloat> %t2, <16 x bfloat> zeroinitializer
  %res3  = call <16 x bfloat> @llvm.x86.avx512bf16ne.vaddnepbf16256(<16 x bfloat> %res1, <16 x bfloat> %res2)
  ret <16 x bfloat> %res3
}

declare <8 x bfloat> @llvm.x86.avx512bf16ne.vaddnepbf16128(<8 x bfloat>, <8 x bfloat>)

define <8 x bfloat> @test_int_x86_avx512bf16ne_add_nepbf16_128(<8 x bfloat> %x1, <8 x bfloat> %x2) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_add_nepbf16_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vaddnepbf16 %xmm1, %xmm0, %xmm0 # encoding: [0x62,0xf5,0x7d,0x08,0x58,0xc1]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <8 x bfloat> @llvm.x86.avx512bf16ne.vaddnepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2)
  ret <8 x bfloat> %res
}

define <8 x bfloat> @test_int_x86_avx512bf16ne_mask_add_nepbf16_128(<8 x bfloat> %src, <8 x bfloat> %x1, <8 x bfloat> %x2, i8 %msk, <8 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_mask_add_nepbf16_128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vaddnepbf16 %xmm2, %xmm1, %xmm0 {%k1} # encoding: [0x62,0xf5,0x75,0x09,0x58,0xc2]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_mask_add_nepbf16_128:
; X86:       # %bb.0:
; X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf9,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vaddnepbf16 %xmm2, %xmm1, %xmm0 {%k1} # encoding: [0x62,0xf5,0x75,0x09,0x58,0xc2]
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %msk to <8 x i1>
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vaddnepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2)
  %res = select <8 x i1> %mask, <8 x bfloat> %res0, <8 x bfloat> %src
  ret <8 x bfloat> %res
}

define <8 x bfloat> @test_int_x86_avx512bf16ne_maskz_add_nepbf16_128(<8 x bfloat> %src, <8 x bfloat> %x1, <8 x bfloat> %x2, i8 %msk, <8 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_add_nepbf16_128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vaddnepbf16 %xmm2, %xmm1, %xmm0 {%k1} {z} # encoding: [0x62,0xf5,0x75,0x89,0x58,0xc2]
; X64-NEXT:    vaddnepbf16 (%rsi), %xmm1, %xmm1 {%k1} {z} # encoding: [0x62,0xf5,0x75,0x89,0x58,0x0e]
; X64-NEXT:    vaddnepbf16 %xmm1, %xmm0, %xmm0 # encoding: [0x62,0xf5,0x7d,0x08,0x58,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_add_nepbf16_128:
; X86:       # %bb.0:
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x08]
; X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf9,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vaddnepbf16 %xmm2, %xmm1, %xmm0 {%k1} {z} # encoding: [0x62,0xf5,0x75,0x89,0x58,0xc2]
; X86-NEXT:    vaddnepbf16 (%eax), %xmm1, %xmm1 {%k1} {z} # encoding: [0x62,0xf5,0x75,0x89,0x58,0x08]
; X86-NEXT:    vaddnepbf16 %xmm1, %xmm0, %xmm0 # encoding: [0x62,0xf5,0x7d,0x08,0x58,0xc1]
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %msk to <8 x i1>
  %val = load <8 x bfloat>, <8 x bfloat>* %ptr
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vaddnepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2)
  %res1 = select <8 x i1> %mask, <8 x bfloat> %res0, <8 x bfloat> zeroinitializer
  %t2 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vaddnepbf16128(<8 x bfloat> %x1, <8 x bfloat> %val)
  %res2 = select <8 x i1> %mask, <8 x bfloat> %t2, <8 x bfloat> zeroinitializer
  %res3  =  call <8 x bfloat> @llvm.x86.avx512bf16ne.vaddnepbf16128(<8 x bfloat> %res1, <8 x bfloat> %res2)
  ret <8 x bfloat> %res3
}

declare <16 x bfloat> @llvm.x86.avx512bf16ne.vsubnepbf16256(<16 x bfloat>, <16 x bfloat>)

define <16 x bfloat> @test_int_x86_avx512bf16ne_sub_nepbf16_256(<16 x bfloat> %x1, <16 x bfloat> %x2) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_sub_nepbf16_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsubnepbf16 %ymm1, %ymm0, %ymm0 # encoding: [0x62,0xf5,0x7d,0x28,0x5c,0xc1]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <16 x bfloat> @llvm.x86.avx512bf16ne.vsubnepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2)
  ret <16 x bfloat> %res
}

define <16 x bfloat> @test_int_x86_avx512bf16ne_mask_sub_nepbf16_256(<16 x bfloat> %src, <16 x bfloat> %x1, <16 x bfloat> %x2, i16 %msk, <16 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_mask_sub_nepbf16_256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vsubnepbf16 %ymm2, %ymm1, %ymm0 {%k1} # encoding: [0x62,0xf5,0x75,0x29,0x5c,0xc2]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_mask_sub_nepbf16_256:
; X86:       # %bb.0:
; X86-NEXT:    kmovw {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf8,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vsubnepbf16 %ymm2, %ymm1, %ymm0 {%k1} # encoding: [0x62,0xf5,0x75,0x29,0x5c,0xc2]
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %msk to <16 x i1>
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vsubnepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2)
  %res = select <16 x i1> %mask, <16 x bfloat> %res0, <16 x bfloat> %src
  ret <16 x bfloat> %res
}

define <16 x bfloat> @test_int_x86_avx512bf16ne_maskz_sub_nepbf16_256(<16 x bfloat> %src, <16 x bfloat> %x1, <16 x bfloat> %x2, i16 %msk, <16 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_sub_nepbf16_256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vsubnepbf16 %ymm2, %ymm1, %ymm0 {%k1} {z} # encoding: [0x62,0xf5,0x75,0xa9,0x5c,0xc2]
; X64-NEXT:    vsubnepbf16 (%rsi), %ymm1, %ymm1 {%k1} {z} # encoding: [0x62,0xf5,0x75,0xa9,0x5c,0x0e]
; X64-NEXT:    vsubnepbf16 %ymm1, %ymm0, %ymm0 # encoding: [0x62,0xf5,0x7d,0x28,0x5c,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_sub_nepbf16_256:
; X86:       # %bb.0:
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x08]
; X86-NEXT:    kmovw {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf8,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vsubnepbf16 %ymm2, %ymm1, %ymm0 {%k1} {z} # encoding: [0x62,0xf5,0x75,0xa9,0x5c,0xc2]
; X86-NEXT:    vsubnepbf16 (%eax), %ymm1, %ymm1 {%k1} {z} # encoding: [0x62,0xf5,0x75,0xa9,0x5c,0x08]
; X86-NEXT:    vsubnepbf16 %ymm1, %ymm0, %ymm0 # encoding: [0x62,0xf5,0x7d,0x28,0x5c,0xc1]
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %msk to <16 x i1>
  %val = load <16 x bfloat>, <16 x bfloat>* %ptr
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vsubnepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2)
  %res1 = select <16 x i1> %mask, <16 x bfloat> %res0, <16 x bfloat> zeroinitializer
  %t2 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vsubnepbf16256(<16 x bfloat> %x1, <16 x bfloat> %val)
  %res2 = select <16 x i1> %mask, <16 x bfloat> %t2, <16 x bfloat> zeroinitializer
  %res3  =  call <16 x bfloat> @llvm.x86.avx512bf16ne.vsubnepbf16256(<16 x bfloat> %res1, <16 x bfloat> %res2)
  ret <16 x bfloat> %res3
}

declare <8 x bfloat> @llvm.x86.avx512bf16ne.vsubnepbf16128(<8 x bfloat>, <8 x bfloat>)

define <8 x bfloat> @test_int_x86_avx512bf16ne_sub_nepbf16_128(<8 x bfloat> %x1, <8 x bfloat> %x2) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_sub_nepbf16_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsubnepbf16 %xmm1, %xmm0, %xmm0 # encoding: [0x62,0xf5,0x7d,0x08,0x5c,0xc1]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <8 x bfloat> @llvm.x86.avx512bf16ne.vsubnepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2)
  ret <8 x bfloat> %res
}

define <8 x bfloat> @test_int_x86_avx512bf16ne_mask_sub_nepbf16_128(<8 x bfloat> %src, <8 x bfloat> %x1, <8 x bfloat> %x2, i8 %msk, <8 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_mask_sub_nepbf16_128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vsubnepbf16 %xmm2, %xmm1, %xmm0 {%k1} # encoding: [0x62,0xf5,0x75,0x09,0x5c,0xc2]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_mask_sub_nepbf16_128:
; X86:       # %bb.0:
; X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf9,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vsubnepbf16 %xmm2, %xmm1, %xmm0 {%k1} # encoding: [0x62,0xf5,0x75,0x09,0x5c,0xc2]
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %msk to <8 x i1>
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vsubnepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2)
  %res = select <8 x i1> %mask, <8 x bfloat> %res0, <8 x bfloat> %src
  ret <8 x bfloat> %res
}

define <8 x bfloat> @test_int_x86_avx512bf16ne_maskz_sub_nepbf16_128(<8 x bfloat> %src, <8 x bfloat> %x1, <8 x bfloat> %x2, i8 %msk, <8 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_sub_nepbf16_128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vsubnepbf16 %xmm2, %xmm1, %xmm0 {%k1} {z} # encoding: [0x62,0xf5,0x75,0x89,0x5c,0xc2]
; X64-NEXT:    vsubnepbf16 (%rsi), %xmm1, %xmm1 {%k1} {z} # encoding: [0x62,0xf5,0x75,0x89,0x5c,0x0e]
; X64-NEXT:    vsubnepbf16 %xmm1, %xmm0, %xmm0 # encoding: [0x62,0xf5,0x7d,0x08,0x5c,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_sub_nepbf16_128:
; X86:       # %bb.0:
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x08]
; X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf9,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vsubnepbf16 %xmm2, %xmm1, %xmm0 {%k1} {z} # encoding: [0x62,0xf5,0x75,0x89,0x5c,0xc2]
; X86-NEXT:    vsubnepbf16 (%eax), %xmm1, %xmm1 {%k1} {z} # encoding: [0x62,0xf5,0x75,0x89,0x5c,0x08]
; X86-NEXT:    vsubnepbf16 %xmm1, %xmm0, %xmm0 # encoding: [0x62,0xf5,0x7d,0x08,0x5c,0xc1]
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %msk to <8 x i1>
  %val = load <8 x bfloat>, <8 x bfloat>* %ptr
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vsubnepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2)
  %res1 = select <8 x i1> %mask, <8 x bfloat> %res0, <8 x bfloat> zeroinitializer
  %t2 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vsubnepbf16128(<8 x bfloat> %x1, <8 x bfloat> %val)
  %res2 = select <8 x i1> %mask, <8 x bfloat> %t2, <8 x bfloat> zeroinitializer
  %res3  =  call <8 x bfloat> @llvm.x86.avx512bf16ne.vsubnepbf16128(<8 x bfloat> %res1, <8 x bfloat> %res2)
  ret <8 x bfloat> %res3
}

declare <16 x bfloat> @llvm.x86.avx512bf16ne.vmulnepbf16256(<16 x bfloat>, <16 x bfloat>)

define <16 x bfloat> @test_int_x86_avx512bf16ne_mul_nepbf16_256(<16 x bfloat> %x1, <16 x bfloat> %x2) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_mul_nepbf16_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vmulnepbf16 %ymm1, %ymm0, %ymm0 # encoding: [0x62,0xf5,0x7d,0x28,0x59,0xc1]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <16 x bfloat> @llvm.x86.avx512bf16ne.vmulnepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2)
  ret <16 x bfloat> %res
}

define <16 x bfloat> @test_int_x86_avx512bf16ne_mask_mul_nepbf16_256(<16 x bfloat> %src, <16 x bfloat> %x1, <16 x bfloat> %x2, i16 %msk, <16 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_mask_mul_nepbf16_256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vmulnepbf16 %ymm2, %ymm1, %ymm0 {%k1} # encoding: [0x62,0xf5,0x75,0x29,0x59,0xc2]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_mask_mul_nepbf16_256:
; X86:       # %bb.0:
; X86-NEXT:    kmovw {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf8,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vmulnepbf16 %ymm2, %ymm1, %ymm0 {%k1} # encoding: [0x62,0xf5,0x75,0x29,0x59,0xc2]
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %msk to <16 x i1>
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vmulnepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2)
  %res = select <16 x i1> %mask, <16 x bfloat> %res0, <16 x bfloat> %src
  ret <16 x bfloat> %res
}

define <16 x bfloat> @test_int_x86_avx512bf16ne_maskz_mul_nepbf16_256(<16 x bfloat> %src, <16 x bfloat> %x1, <16 x bfloat> %x2, i16 %msk, <16 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_mul_nepbf16_256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vmulnepbf16 %ymm2, %ymm1, %ymm0 {%k1} {z} # encoding: [0x62,0xf5,0x75,0xa9,0x59,0xc2]
; X64-NEXT:    vmulnepbf16 (%rsi), %ymm1, %ymm1 {%k1} {z} # encoding: [0x62,0xf5,0x75,0xa9,0x59,0x0e]
; X64-NEXT:    vmulnepbf16 %ymm1, %ymm0, %ymm0 # encoding: [0x62,0xf5,0x7d,0x28,0x59,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_mul_nepbf16_256:
; X86:       # %bb.0:
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x08]
; X86-NEXT:    kmovw {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf8,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vmulnepbf16 %ymm2, %ymm1, %ymm0 {%k1} {z} # encoding: [0x62,0xf5,0x75,0xa9,0x59,0xc2]
; X86-NEXT:    vmulnepbf16 (%eax), %ymm1, %ymm1 {%k1} {z} # encoding: [0x62,0xf5,0x75,0xa9,0x59,0x08]
; X86-NEXT:    vmulnepbf16 %ymm1, %ymm0, %ymm0 # encoding: [0x62,0xf5,0x7d,0x28,0x59,0xc1]
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %msk to <16 x i1>
  %val = load <16 x bfloat>, <16 x bfloat>* %ptr
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vmulnepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2)
  %res1 = select <16 x i1> %mask, <16 x bfloat> %res0, <16 x bfloat> zeroinitializer
  %t2 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vmulnepbf16256(<16 x bfloat> %x1, <16 x bfloat> %val)
  %res2 = select <16 x i1> %mask, <16 x bfloat> %t2, <16 x bfloat> zeroinitializer
  %res3  =  call <16 x bfloat> @llvm.x86.avx512bf16ne.vmulnepbf16256(<16 x bfloat> %res1, <16 x bfloat> %res2)
  ret <16 x bfloat> %res3
}

declare <8 x bfloat> @llvm.x86.avx512bf16ne.vmulnepbf16128(<8 x bfloat>, <8 x bfloat>)

define <8 x bfloat> @test_int_x86_avx512bf16ne_mul_nepbf16_128(<8 x bfloat> %x1, <8 x bfloat> %x2) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_mul_nepbf16_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vmulnepbf16 %xmm1, %xmm0, %xmm0 # encoding: [0x62,0xf5,0x7d,0x08,0x59,0xc1]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <8 x bfloat> @llvm.x86.avx512bf16ne.vmulnepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2)
  ret <8 x bfloat> %res
}

define <8 x bfloat> @test_int_x86_avx512bf16ne_mask_mul_nepbf16_128(<8 x bfloat> %src, <8 x bfloat> %x1, <8 x bfloat> %x2, i8 %msk, <8 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_mask_mul_nepbf16_128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vmulnepbf16 %xmm2, %xmm1, %xmm0 {%k1} # encoding: [0x62,0xf5,0x75,0x09,0x59,0xc2]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_mask_mul_nepbf16_128:
; X86:       # %bb.0:
; X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf9,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vmulnepbf16 %xmm2, %xmm1, %xmm0 {%k1} # encoding: [0x62,0xf5,0x75,0x09,0x59,0xc2]
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %msk to <8 x i1>
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vmulnepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2)
  %res = select <8 x i1> %mask, <8 x bfloat> %res0, <8 x bfloat> %src
  ret <8 x bfloat> %res
}

define <8 x bfloat> @test_int_x86_avx512bf16ne_maskz_mul_nepbf16_128(<8 x bfloat> %src, <8 x bfloat> %x1, <8 x bfloat> %x2, i8 %msk, <8 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_mul_nepbf16_128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vmulnepbf16 %xmm2, %xmm1, %xmm0 {%k1} {z} # encoding: [0x62,0xf5,0x75,0x89,0x59,0xc2]
; X64-NEXT:    vmulnepbf16 (%rsi), %xmm1, %xmm1 {%k1} {z} # encoding: [0x62,0xf5,0x75,0x89,0x59,0x0e]
; X64-NEXT:    vmulnepbf16 %xmm1, %xmm0, %xmm0 # encoding: [0x62,0xf5,0x7d,0x08,0x59,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_mul_nepbf16_128:
; X86:       # %bb.0:
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x08]
; X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf9,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vmulnepbf16 %xmm2, %xmm1, %xmm0 {%k1} {z} # encoding: [0x62,0xf5,0x75,0x89,0x59,0xc2]
; X86-NEXT:    vmulnepbf16 (%eax), %xmm1, %xmm1 {%k1} {z} # encoding: [0x62,0xf5,0x75,0x89,0x59,0x08]
; X86-NEXT:    vmulnepbf16 %xmm1, %xmm0, %xmm0 # encoding: [0x62,0xf5,0x7d,0x08,0x59,0xc1]
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %msk to <8 x i1>
  %val = load <8 x bfloat>, <8 x bfloat>* %ptr
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vmulnepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2)
  %res1 = select <8 x i1> %mask, <8 x bfloat> %res0, <8 x bfloat> zeroinitializer
  %t2 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vmulnepbf16128(<8 x bfloat> %x1, <8 x bfloat> %val)
  %res2 = select <8 x i1> %mask, <8 x bfloat> %t2, <8 x bfloat> zeroinitializer
  %res3  =  call <8 x bfloat> @llvm.x86.avx512bf16ne.vmulnepbf16128(<8 x bfloat> %res1, <8 x bfloat> %res2)
  ret <8 x bfloat> %res3
}

declare <16 x bfloat> @llvm.x86.avx512bf16ne.vdivnepbf16256(<16 x bfloat>, <16 x bfloat>)

define <16 x bfloat> @test_int_x86_avx512bf16ne_div_nepbf16_256(<16 x bfloat> %x1, <16 x bfloat> %x2) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_div_nepbf16_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vdivnepbf16 %ymm1, %ymm0, %ymm0 # encoding: [0x62,0xf5,0x7d,0x28,0x5e,0xc1]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <16 x bfloat> @llvm.x86.avx512bf16ne.vdivnepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2)
  ret <16 x bfloat> %res
}

define <16 x bfloat> @test_int_x86_avx512bf16ne_mask_div_nepbf16_256(<16 x bfloat> %src, <16 x bfloat> %x1, <16 x bfloat> %x2, i16 %msk, <16 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_mask_div_nepbf16_256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vdivnepbf16 %ymm2, %ymm1, %ymm0 {%k1} # encoding: [0x62,0xf5,0x75,0x29,0x5e,0xc2]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_mask_div_nepbf16_256:
; X86:       # %bb.0:
; X86-NEXT:    kmovw {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf8,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vdivnepbf16 %ymm2, %ymm1, %ymm0 {%k1} # encoding: [0x62,0xf5,0x75,0x29,0x5e,0xc2]
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %msk to <16 x i1>
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vdivnepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2)
  %res = select <16 x i1> %mask, <16 x bfloat> %res0, <16 x bfloat> %src
  ret <16 x bfloat> %res
}

; FIXME: assembly order is different from fp16 ones
define <16 x bfloat> @test_int_x86_avx512bf16ne_maskz_div_nepbf16_256(<16 x bfloat> %src, <16 x bfloat> %x1, <16 x bfloat> %x2, i16 %msk, <16 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_div_nepbf16_256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vdivnepbf16 %ymm2, %ymm1, %ymm0 {%k1} {z} # encoding: [0x62,0xf5,0x75,0xa9,0x5e,0xc2]
; X64-NEXT:    vdivnepbf16 (%rsi), %ymm1, %ymm1 {%k1} {z} # encoding: [0x62,0xf5,0x75,0xa9,0x5e,0x0e]
; X64-NEXT:    vdivnepbf16 %ymm1, %ymm0, %ymm0 # encoding: [0x62,0xf5,0x7d,0x28,0x5e,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_div_nepbf16_256:
; X86:       # %bb.0:
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x08]
; X86-NEXT:    kmovw {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf8,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vdivnepbf16 %ymm2, %ymm1, %ymm0 {%k1} {z} # encoding: [0x62,0xf5,0x75,0xa9,0x5e,0xc2]
; X86-NEXT:    vdivnepbf16 (%eax), %ymm1, %ymm1 {%k1} {z} # encoding: [0x62,0xf5,0x75,0xa9,0x5e,0x08]
; X86-NEXT:    vdivnepbf16 %ymm1, %ymm0, %ymm0 # encoding: [0x62,0xf5,0x7d,0x28,0x5e,0xc1]
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %msk to <16 x i1>
  %val = load <16 x bfloat>, <16 x bfloat>* %ptr
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vdivnepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2)
  %res1 = select <16 x i1> %mask, <16 x bfloat> %res0, <16 x bfloat> zeroinitializer
  %t2 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vdivnepbf16256(<16 x bfloat> %x1, <16 x bfloat> %val)
  %res2 = select <16 x i1> %mask, <16 x bfloat> %t2, <16 x bfloat> zeroinitializer
  %res3  =  call <16 x bfloat> @llvm.x86.avx512bf16ne.vdivnepbf16256(<16 x bfloat> %res1, <16 x bfloat> %res2)
  ret <16 x bfloat> %res3
}

declare <8 x bfloat> @llvm.x86.avx512bf16ne.vdivnepbf16128(<8 x bfloat>, <8 x bfloat>)

define <8 x bfloat> @test_int_x86_avx512bf16ne_div_nepbf16_128(<8 x bfloat> %x1, <8 x bfloat> %x2) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_div_nepbf16_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vdivnepbf16 %xmm1, %xmm0, %xmm0 # encoding: [0x62,0xf5,0x7d,0x08,0x5e,0xc1]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <8 x bfloat> @llvm.x86.avx512bf16ne.vdivnepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2)
  ret <8 x bfloat> %res
}

define <8 x bfloat> @test_int_x86_avx512bf16ne_mask_div_nepbf16_128(<8 x bfloat> %src, <8 x bfloat> %x1, <8 x bfloat> %x2, i8 %msk, <8 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_mask_div_nepbf16_128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vdivnepbf16 %xmm2, %xmm1, %xmm0 {%k1} # encoding: [0x62,0xf5,0x75,0x09,0x5e,0xc2]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_mask_div_nepbf16_128:
; X86:       # %bb.0:
; X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf9,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vdivnepbf16 %xmm2, %xmm1, %xmm0 {%k1} # encoding: [0x62,0xf5,0x75,0x09,0x5e,0xc2]
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %msk to <8 x i1>
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vdivnepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2)
  %res = select <8 x i1> %mask, <8 x bfloat> %res0, <8 x bfloat> %src
  ret <8 x bfloat> %res
}

; FIXME: assembly order is different from fp16 ones
define <8 x bfloat> @test_int_x86_avx512bf16ne_maskz_div_nepbf16_128(<8 x bfloat> %src, <8 x bfloat> %x1, <8 x bfloat> %x2, i8 %msk, <8 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_div_nepbf16_128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vdivnepbf16 %xmm2, %xmm1, %xmm0 {%k1} {z} # encoding: [0x62,0xf5,0x75,0x89,0x5e,0xc2]
; X64-NEXT:    vdivnepbf16 (%rsi), %xmm1, %xmm1 {%k1} {z} # encoding: [0x62,0xf5,0x75,0x89,0x5e,0x0e]
; X64-NEXT:    vdivnepbf16 %xmm1, %xmm0, %xmm0 # encoding: [0x62,0xf5,0x7d,0x08,0x5e,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_div_nepbf16_128:
; X86:       # %bb.0:
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x08]
; X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf9,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vdivnepbf16 %xmm2, %xmm1, %xmm0 {%k1} {z} # encoding: [0x62,0xf5,0x75,0x89,0x5e,0xc2]
; X86-NEXT:    vdivnepbf16 (%eax), %xmm1, %xmm1 {%k1} {z} # encoding: [0x62,0xf5,0x75,0x89,0x5e,0x08]
; X86-NEXT:    vdivnepbf16 %xmm1, %xmm0, %xmm0 # encoding: [0x62,0xf5,0x7d,0x08,0x5e,0xc1]
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %msk to <8 x i1>
  %val = load <8 x bfloat>, <8 x bfloat>* %ptr
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vdivnepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2)
  %res1 = select <8 x i1> %mask, <8 x bfloat> %res0, <8 x bfloat> zeroinitializer
  %t2 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vdivnepbf16128(<8 x bfloat> %x1, <8 x bfloat> %val)
  %res2 = select <8 x i1> %mask, <8 x bfloat> %t2, <8 x bfloat> zeroinitializer
  %res3  =  call <8 x bfloat> @llvm.x86.avx512bf16ne.vdivnepbf16128(<8 x bfloat> %res1, <8 x bfloat> %res2)
  ret <8 x bfloat> %res3
}

declare <16 x bfloat> @llvm.x86.avx512bf16ne.vminnepbf16256(<16 x bfloat>, <16 x bfloat>)

define <16 x bfloat> @test_int_x86_avx512bf16ne_min_nepbf16_256(<16 x bfloat> %x1, <16 x bfloat> %x2) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_min_nepbf16_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vminnepbf16 %ymm1, %ymm0, %ymm0 # encoding: [0x62,0xf5,0x7d,0x28,0x5d,0xc1]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vminnepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2)
  ret <16 x bfloat> %res0
}

define <16 x bfloat> @test_int_x86_avx512bf16ne_maskz_min_nepbf16_256(<16 x bfloat> %x1, <16 x bfloat> %x2, i16 %msk) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_min_nepbf16_256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vminnepbf16 %ymm1, %ymm0, %ymm0 {%k1} {z} # encoding: [0x62,0xf5,0x7d,0xa9,0x5d,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_min_nepbf16_256:
; X86:       # %bb.0:
; X86-NEXT:    kmovw {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf8,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vminnepbf16 %ymm1, %ymm0, %ymm0 {%k1} {z} # encoding: [0x62,0xf5,0x7d,0xa9,0x5d,0xc1]
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %msk to <16 x i1>
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vminnepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2)
  %res1 = select <16 x i1> %mask, <16 x bfloat> %res0, <16 x bfloat> zeroinitializer
  ret <16 x bfloat> %res1
}

declare <8 x bfloat> @llvm.x86.avx512bf16ne.vminnepbf16128(<8 x bfloat>, <8 x bfloat>)

define <8 x bfloat> @test_int_x86_avx512bf16ne_min_nepbf16_128(<8 x bfloat> %x1, <8 x bfloat> %x2) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_min_nepbf16_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vminnepbf16 %xmm1, %xmm0, %xmm0 # encoding: [0x62,0xf5,0x7d,0x08,0x5d,0xc1]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vminnepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2)
  ret <8 x bfloat> %res0
}

define <8 x bfloat> @test_int_x86_avx512bf16ne_maskz_min_nepbf16_128(<8 x bfloat> %x1, <8 x bfloat> %x2, i8 %msk) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_min_nepbf16_128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vminnepbf16 %xmm1, %xmm0, %xmm0 {%k1} {z} # encoding: [0x62,0xf5,0x7d,0x89,0x5d,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_min_nepbf16_128:
; X86:       # %bb.0:
; X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf9,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vminnepbf16 %xmm1, %xmm0, %xmm0 {%k1} {z} # encoding: [0x62,0xf5,0x7d,0x89,0x5d,0xc1]
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %msk to <8 x i1>
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vminnepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2)
  %res1 = select <8 x i1> %mask, <8 x bfloat> %res0, <8 x bfloat> zeroinitializer
  ret <8 x bfloat> %res1
}

declare <16 x bfloat> @llvm.x86.avx512bf16ne.vmaxnepbf16256(<16 x bfloat>, <16 x bfloat>)

define <16 x bfloat> @test_int_x86_avx512bf16ne_max_nepbf16_256(<16 x bfloat> %x1, <16 x bfloat> %x2) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_max_nepbf16_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vmaxnepbf16 %ymm1, %ymm0, %ymm0 # encoding: [0x62,0xf5,0x7d,0x28,0x5f,0xc1]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vmaxnepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2)
  ret <16 x bfloat> %res0
}

define <16 x bfloat> @test_int_x86_avx512bf16ne_maskz_max_nepbf16_256(<16 x bfloat> %x1, <16 x bfloat> %x2, i16 %msk) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_max_nepbf16_256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vmaxnepbf16 %ymm1, %ymm0, %ymm0 {%k1} {z} # encoding: [0x62,0xf5,0x7d,0xa9,0x5f,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_max_nepbf16_256:
; X86:       # %bb.0:
; X86-NEXT:    kmovw {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf8,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vmaxnepbf16 %ymm1, %ymm0, %ymm0 {%k1} {z} # encoding: [0x62,0xf5,0x7d,0xa9,0x5f,0xc1]
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %msk to <16 x i1>
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vmaxnepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2)
  %res1 = select <16 x i1> %mask, <16 x bfloat> %res0, <16 x bfloat> zeroinitializer
  ret <16 x bfloat> %res1
}

declare <8 x bfloat> @llvm.x86.avx512bf16ne.vmaxnepbf16128(<8 x bfloat>, <8 x bfloat>)

define <8 x bfloat> @test_int_x86_avx512bf16ne_max_nepbf16_128(<8 x bfloat> %x1, <8 x bfloat> %x2) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_max_nepbf16_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vmaxnepbf16 %xmm1, %xmm0, %xmm0 # encoding: [0x62,0xf5,0x7d,0x08,0x5f,0xc1]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vmaxnepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2)
  ret <8 x bfloat> %res0
}

define <8 x bfloat> @test_int_x86_avx512bf16ne_maskz_max_nepbf16_128(<8 x bfloat> %x1, <8 x bfloat> %x2, i8 %msk) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_max_nepbf16_128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vmaxnepbf16 %xmm1, %xmm0, %xmm0 {%k1} {z} # encoding: [0x62,0xf5,0x7d,0x89,0x5f,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_max_nepbf16_128:
; X86:       # %bb.0:
; X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf9,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vmaxnepbf16 %xmm1, %xmm0, %xmm0 {%k1} {z} # encoding: [0x62,0xf5,0x7d,0x89,0x5f,0xc1]
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %msk to <8 x i1>
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vmaxnepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2)
  %res1 = select <8 x i1> %mask, <8 x bfloat> %res0, <8 x bfloat> zeroinitializer
  ret <8 x bfloat> %res1
}

declare i16 @llvm.x86.avx512bf16ne.vcmpnepbf16256.mask(<16 x bfloat>, <16 x bfloat>, i32, i16)
define i16 @test_int_x86_avx512bf16ne_vcmpnepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_vcmpnepbf16256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vcmpunordnepbf16 %ymm1, %ymm0, %k0 # encoding: [0x62,0xf3,0x7f,0x28,0xc2,0xc1,0x03]
; CHECK-NEXT:    kmovd %k0, %eax # encoding: [0xc5,0xfb,0x93,0xc0]
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    vzeroupper # encoding: [0xc5,0xf8,0x77]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call i16 @llvm.x86.avx512bf16ne.vcmpnepbf16256.mask(<16 x bfloat> %x1, <16 x bfloat> %x2, i32 3, i16 -1)
  ret i16 %res
}

define i16 @test_int_x86_avx512bf16ne_vcmpnepbf16256_mask2(<16 x bfloat> %x1, <16 x bfloat> %x2) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_vcmpnepbf16256_mask2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movw $3, %ax # encoding: [0x66,0xb8,0x03,0x00]
; CHECK-NEXT:    kmovd %eax, %k1 # encoding: [0xc5,0xfb,0x92,0xc8]
; CHECK-NEXT:    vcmpeqnepbf16 %ymm1, %ymm0, %k0 {%k1} # encoding: [0x62,0xf3,0x7f,0x29,0xc2,0xc1,0x00]
; CHECK-NEXT:    kmovd %k0, %eax # encoding: [0xc5,0xfb,0x93,0xc0]
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    vzeroupper # encoding: [0xc5,0xf8,0x77]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %1 = call i16 @llvm.x86.avx512bf16ne.vcmpnepbf16256.mask(<16 x bfloat> %x1, <16 x bfloat> %x2, i32 0, i16 3)
  ret i16 %1
}

declare i8 @llvm.x86.avx512bf16ne.vcmpnepbf16128.mask(<8 x bfloat>, <8 x bfloat>, i32, i8)
define i8 @test_int_x86_avx512bf16ne_vcmpnepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_vcmpnepbf16128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vcmpunordnepbf16 %xmm1, %xmm0, %k0 # encoding: [0x62,0xf3,0x7f,0x08,0xc2,0xc1,0x03]
; CHECK-NEXT:    kmovd %k0, %eax # encoding: [0xc5,0xfb,0x93,0xc0]
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call i8 @llvm.x86.avx512bf16ne.vcmpnepbf16128.mask(<8 x bfloat> %x1, <8 x bfloat> %x2, i32 3, i8 -1)
  ret i8 %res
}

define i8 @test_int_x86_avx512bf16ne_vcmpnepbf16128_mask2(<8 x bfloat> %x1, <8 x bfloat> %x2) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_vcmpnepbf16128_mask2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movb $3, %al # encoding: [0xb0,0x03]
; CHECK-NEXT:    kmovd %eax, %k1 # encoding: [0xc5,0xfb,0x92,0xc8]
; CHECK-NEXT:    vcmpeqnepbf16 %xmm1, %xmm0, %k0 {%k1} # encoding: [0x62,0xf3,0x7f,0x09,0xc2,0xc1,0x00]
; CHECK-NEXT:    kmovd %k0, %eax # encoding: [0xc5,0xfb,0x93,0xc0]
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %1 = call i8 @llvm.x86.avx512bf16ne.vcmpnepbf16128.mask(<8 x bfloat> %x1, <8 x bfloat> %x2, i32 0, i8 3)
  ret i8 %1
}

declare <16 x bfloat> @llvm.x86.avx512bf16ne.mask.sqrt.nepbf16.256(<16 x bfloat>, <16 x bfloat>, i16)
declare <8 x bfloat> @llvm.x86.avx512bf16ne.mask.sqrt.nepbf16.128(<8 x bfloat>, <8 x bfloat>, i8)

define <16 x bfloat> @test_sqrt_nepbf16_256(<16 x bfloat> %a0) {
; CHECK-LABEL: test_sqrt_nepbf16_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsqrtnepbf16 %ymm0, %ymm0 # encoding: [0x62,0xf5,0x7d,0x28,0x51,0xc0]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <16 x bfloat> @llvm.x86.avx512bf16ne.mask.sqrt.nepbf16.256(<16 x bfloat> %a0, <16 x bfloat> zeroinitializer, i16 -1)
  ret <16 x bfloat> %res
}

define <8 x bfloat> @test_sqrt_nepbf16_128(<8 x bfloat> %a0) {
; CHECK-LABEL: test_sqrt_nepbf16_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsqrtnepbf16 %xmm0, %xmm0 # encoding: [0x62,0xf5,0x7d,0x08,0x51,0xc0]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <8 x bfloat> @llvm.x86.avx512bf16ne.mask.sqrt.nepbf16.128(<8 x bfloat> %a0, <8 x bfloat> zeroinitializer, i8 -1)
  ret <8 x bfloat> %res
}

declare <8 x bfloat> @llvm.x86.avx512bf16ne.mask.rsqrt.nepbf16.128(<8 x bfloat>, <8 x bfloat>, i8)
declare <16 x bfloat> @llvm.x86.avx512bf16ne.mask.rsqrt.nepbf16.256(<16 x bfloat>, <16 x bfloat>, i16)

define <8 x bfloat> @test_rsqrt_nepbf16_128(<8 x bfloat> %a0) {
; CHECK-LABEL: test_rsqrt_nepbf16_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vrsqrtnepbf16 %xmm0, %xmm0 # encoding: [0x62,0xf6,0x7c,0x08,0x4e,0xc0]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <8 x bfloat> @llvm.x86.avx512bf16ne.mask.rsqrt.nepbf16.128(<8 x bfloat> %a0, <8 x bfloat> zeroinitializer, i8 -1)
  ret <8 x bfloat> %res
}

define <16 x bfloat> @test_rsqrt_nepbf16_256(<16 x bfloat> %a0) {
; CHECK-LABEL: test_rsqrt_nepbf16_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vrsqrtnepbf16 %ymm0, %ymm0 # encoding: [0x62,0xf6,0x7c,0x28,0x4e,0xc0]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <16 x bfloat> @llvm.x86.avx512bf16ne.mask.rsqrt.nepbf16.256(<16 x bfloat> %a0, <16 x bfloat> zeroinitializer, i16 -1)
  ret <16 x bfloat> %res
}

declare <8 x bfloat> @llvm.x86.avx512bf16ne.mask.rcp.nepbf16.128(<8 x bfloat>, <8 x bfloat>, i8)
declare <16 x bfloat> @llvm.x86.avx512bf16ne.mask.rcp.nepbf16.256(<16 x bfloat>, <16 x bfloat>, i16)

define <8 x bfloat> @test_rcp_nepbf16_128(<8 x bfloat> %a0, <8 x bfloat> %a1, i8 %mask) {
; X64-LABEL: test_rcp_nepbf16_128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vrcpnepbf16 %xmm0, %xmm1 {%k1} # encoding: [0x62,0xf6,0x7c,0x09,0x4c,0xc8]
; X64-NEXT:    vmovaps %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_rcp_nepbf16_128:
; X86:       # %bb.0:
; X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf9,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vrcpnepbf16 %xmm0, %xmm1 {%k1} # encoding: [0x62,0xf6,0x7c,0x09,0x4c,0xc8]
; X86-NEXT:    vmovaps %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0xc1]
; X86-NEXT:    retl # encoding: [0xc3]
  %res = call <8 x bfloat> @llvm.x86.avx512bf16ne.mask.rcp.nepbf16.128(<8 x bfloat> %a0, <8 x bfloat> %a1, i8 %mask)
  ret <8 x bfloat> %res
}

define <16 x bfloat> @test_rcp_nepbf16_256(<16 x bfloat> %a0, <16 x bfloat> %a1, i16 %mask) {
; X64-LABEL: test_rcp_nepbf16_256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vrcpnepbf16 %ymm0, %ymm1 {%k1} # encoding: [0x62,0xf6,0x7c,0x29,0x4c,0xc8]
; X64-NEXT:    vmovaps %ymm1, %ymm0 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_rcp_nepbf16_256:
; X86:       # %bb.0:
; X86-NEXT:    kmovw {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf8,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vrcpnepbf16 %ymm0, %ymm1 {%k1} # encoding: [0x62,0xf6,0x7c,0x29,0x4c,0xc8]
; X86-NEXT:    vmovaps %ymm1, %ymm0 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0xc1]
; X86-NEXT:    retl # encoding: [0xc3]
  %res = call <16 x bfloat> @llvm.x86.avx512bf16ne.mask.rcp.nepbf16.256(<16 x bfloat> %a0, <16 x bfloat> %a1, i16 %mask)
  ret <16 x bfloat> %res
}

declare <8 x bfloat> @llvm.x86.avx512bf16ne.mask.reduce.nepbf16.128(<8 x bfloat>, i32, <8 x bfloat>, i8)
declare <16 x bfloat> @llvm.x86.avx512bf16ne.mask.reduce.nepbf16.256(<16 x bfloat>, i32, <16 x bfloat>, i16)

define <8 x bfloat>@test_int_x86_avx512_mask_reduce_nepbf16_128(<8 x bfloat> %x0, <8 x bfloat> %x2, i8 %x3) {
; X64-LABEL: test_int_x86_avx512_mask_reduce_nepbf16_128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vreducenepbf16 $8, %xmm0, %xmm1 {%k1} # encoding: [0x62,0xf3,0x7f,0x09,0x56,0xc8,0x08]
; X64-NEXT:    vreducenepbf16 $4, %xmm0, %xmm0 # encoding: [0x62,0xf3,0x7f,0x08,0x56,0xc0,0x04]
; X64-NEXT:    vaddnepbf16 %xmm0, %xmm1, %xmm0 # encoding: [0x62,0xf5,0x75,0x08,0x58,0xc0]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512_mask_reduce_nepbf16_128:
; X86:       # %bb.0:
; X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf9,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vreducenepbf16 $8, %xmm0, %xmm1 {%k1} # encoding: [0x62,0xf3,0x7f,0x09,0x56,0xc8,0x08]
; X86-NEXT:    vreducenepbf16 $4, %xmm0, %xmm0 # encoding: [0x62,0xf3,0x7f,0x08,0x56,0xc0,0x04]
; X86-NEXT:    vaddnepbf16 %xmm0, %xmm1, %xmm0 # encoding: [0x62,0xf5,0x75,0x08,0x58,0xc0]
; X86-NEXT:    retl # encoding: [0xc3]
  %res = call <8 x bfloat> @llvm.x86.avx512bf16ne.mask.reduce.nepbf16.128(<8 x bfloat> %x0, i32 8, <8 x bfloat> %x2, i8 %x3)
  %res1 = call <8 x bfloat> @llvm.x86.avx512bf16ne.mask.reduce.nepbf16.128(<8 x bfloat> %x0, i32 4, <8 x bfloat> %x2, i8 -1)
  %res2 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vaddnepbf16128(<8 x bfloat> %res, <8 x bfloat> %res1)
  ret <8 x bfloat> %res2
}

define <16 x bfloat>@test_int_x86_avx512_mask_reduce_nepbf16_256(<16 x bfloat> %x0, <16 x bfloat> %x2, i16 %x3) {
; X64-LABEL: test_int_x86_avx512_mask_reduce_nepbf16_256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vreducenepbf16 $8, %ymm0, %ymm1 {%k1} # encoding: [0x62,0xf3,0x7f,0x29,0x56,0xc8,0x08]
; X64-NEXT:    vreducenepbf16 $4, %ymm0, %ymm0 # encoding: [0x62,0xf3,0x7f,0x28,0x56,0xc0,0x04]
; X64-NEXT:    vaddnepbf16 %ymm0, %ymm1, %ymm0 # encoding: [0x62,0xf5,0x75,0x28,0x58,0xc0]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512_mask_reduce_nepbf16_256:
; X86:       # %bb.0:
; X86-NEXT:    kmovw {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf8,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vreducenepbf16 $8, %ymm0, %ymm1 {%k1} # encoding: [0x62,0xf3,0x7f,0x29,0x56,0xc8,0x08]
; X86-NEXT:    vreducenepbf16 $4, %ymm0, %ymm0 # encoding: [0x62,0xf3,0x7f,0x28,0x56,0xc0,0x04]
; X86-NEXT:    vaddnepbf16 %ymm0, %ymm1, %ymm0 # encoding: [0x62,0xf5,0x75,0x28,0x58,0xc0]
; X86-NEXT:    retl # encoding: [0xc3]
  %res = call <16 x bfloat> @llvm.x86.avx512bf16ne.mask.reduce.nepbf16.256(<16 x bfloat> %x0, i32 8, <16 x bfloat> %x2, i16 %x3)
  %res1 = call <16 x bfloat> @llvm.x86.avx512bf16ne.mask.reduce.nepbf16.256(<16 x bfloat> %x0, i32 4, <16 x bfloat> %x2, i16 -1)
  %res2 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vaddnepbf16256(<16 x bfloat> %res, <16 x bfloat> %res1)
  ret <16 x bfloat> %res2
}

declare <8 x i1> @llvm.x86.avx512bf16ne.fpclass.nepbf16.128(<8 x bfloat>, i32)
declare <16 x i1> @llvm.x86.avx512bf16ne.fpclass.nepbf16.256(<16 x bfloat>, i32)

define i8 @test_int_x86_avx512_fpclass_nepbf16_128(<8 x bfloat> %x0) {
; CHECK-LABEL: test_int_x86_avx512_fpclass_nepbf16_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vfpclassnepbf16 $2, %xmm0, %k1 # encoding: [0x62,0xf3,0x7f,0x08,0x66,0xc8,0x02]
; CHECK-NEXT:    vfpclassnepbf16 $4, %xmm0, %k0 {%k1} # encoding: [0x62,0xf3,0x7f,0x09,0x66,0xc0,0x04]
; CHECK-NEXT:    kmovd %k0, %eax # encoding: [0xc5,0xfb,0x93,0xc0]
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <8 x i1> @llvm.x86.avx512bf16ne.fpclass.nepbf16.128(<8 x bfloat> %x0, i32 4)
  %res1 = call <8 x i1> @llvm.x86.avx512bf16ne.fpclass.nepbf16.128(<8 x bfloat> %x0, i32 2)
  %1 = and <8 x i1> %res1, %res
  %2 = bitcast <8 x i1> %1 to i8
  ret i8 %2
}

define i16 @test_int_x86_avx512_fpclass_nepbf16_256(<16 x bfloat> %x0) {
; CHECK-LABEL: test_int_x86_avx512_fpclass_nepbf16_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vfpclassnepbf16 $2, %ymm0, %k1 # encoding: [0x62,0xf3,0x7f,0x28,0x66,0xc8,0x02]
; CHECK-NEXT:    vfpclassnepbf16 $4, %ymm0, %k0 {%k1} # encoding: [0x62,0xf3,0x7f,0x29,0x66,0xc0,0x04]
; CHECK-NEXT:    kmovd %k0, %eax # encoding: [0xc5,0xfb,0x93,0xc0]
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    vzeroupper # encoding: [0xc5,0xf8,0x77]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <16 x i1> @llvm.x86.avx512bf16ne.fpclass.nepbf16.256(<16 x bfloat> %x0, i32 4)
  %res1 = call <16 x i1> @llvm.x86.avx512bf16ne.fpclass.nepbf16.256(<16 x bfloat> %x0, i32 2)
  %1 = and <16 x i1> %res1, %res
  %2 = bitcast <16 x i1> %1 to i16
  ret i16 %2
}

declare <8 x bfloat> @llvm.x86.avx512bf16ne.mask.getexp.nepbf16.128(<8 x bfloat>, <8 x bfloat>, i8)
declare <16 x bfloat> @llvm.x86.avx512bf16ne.mask.getexp.nepbf16.256(<16 x bfloat>, <16 x bfloat>, i16)

define <8 x bfloat>@test_int_x86_avx512_getexp_nepbf16_128(<8 x bfloat> %x0) {
; CHECK-LABEL: test_int_x86_avx512_getexp_nepbf16_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vgetexpnepbf16 %xmm0, %xmm0 # encoding: [0x62,0xf5,0x7d,0x08,0x42,0xc0]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <8 x bfloat> @llvm.x86.avx512bf16ne.mask.getexp.nepbf16.128(<8 x bfloat> %x0, <8 x bfloat> zeroinitializer, i8 -1)
  ret <8 x bfloat> %res
}

define <8 x bfloat>@test_int_x86_avx512_mask_getexp_nepbf16_128(<8 x bfloat> %x0, <8 x bfloat> %x1, i8 %x2) {
; X64-LABEL: test_int_x86_avx512_mask_getexp_nepbf16_128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vgetexpnepbf16 %xmm0, %xmm1 {%k1} # encoding: [0x62,0xf5,0x7d,0x09,0x42,0xc8]
; X64-NEXT:    vmovaps %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512_mask_getexp_nepbf16_128:
; X86:       # %bb.0:
; X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf9,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vgetexpnepbf16 %xmm0, %xmm1 {%k1} # encoding: [0x62,0xf5,0x7d,0x09,0x42,0xc8]
; X86-NEXT:    vmovaps %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0xc1]
; X86-NEXT:    retl # encoding: [0xc3]
  %res = call <8 x bfloat> @llvm.x86.avx512bf16ne.mask.getexp.nepbf16.128(<8 x bfloat> %x0, <8 x bfloat> %x1, i8 %x2)
  ret <8 x bfloat> %res
}

define <8 x bfloat>@test_int_x86_avx512_maskz_getexp_nepbf16_128(<8 x bfloat> %x0, i8 %x2) {
; X64-LABEL: test_int_x86_avx512_maskz_getexp_nepbf16_128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vgetexpnepbf16 %xmm0, %xmm0 {%k1} {z} # encoding: [0x62,0xf5,0x7d,0x89,0x42,0xc0]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512_maskz_getexp_nepbf16_128:
; X86:       # %bb.0:
; X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf9,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vgetexpnepbf16 %xmm0, %xmm0 {%k1} {z} # encoding: [0x62,0xf5,0x7d,0x89,0x42,0xc0]
; X86-NEXT:    retl # encoding: [0xc3]
  %res = call <8 x bfloat> @llvm.x86.avx512bf16ne.mask.getexp.nepbf16.128(<8 x bfloat> %x0, <8 x bfloat> zeroinitializer, i8 %x2)
  ret <8 x bfloat> %res
}

define <16 x bfloat>@test_int_x86_avx512_getexp_nepbf16_256(<16 x bfloat> %x0) {
; CHECK-LABEL: test_int_x86_avx512_getexp_nepbf16_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vgetexpnepbf16 %ymm0, %ymm0 # encoding: [0x62,0xf5,0x7d,0x28,0x42,0xc0]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <16 x bfloat> @llvm.x86.avx512bf16ne.mask.getexp.nepbf16.256(<16 x bfloat> %x0, <16 x bfloat> zeroinitializer, i16 -1)
  ret <16 x bfloat> %res
}

define <16 x bfloat>@test_int_x86_avx512_mask_getexp_nepbf16_256(<16 x bfloat> %x0, <16 x bfloat> %x1, i16 %x2) {
; X64-LABEL: test_int_x86_avx512_mask_getexp_nepbf16_256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vgetexpnepbf16 %ymm0, %ymm1 {%k1} # encoding: [0x62,0xf5,0x7d,0x29,0x42,0xc8]
; X64-NEXT:    vmovaps %ymm1, %ymm0 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512_mask_getexp_nepbf16_256:
; X86:       # %bb.0:
; X86-NEXT:    kmovw {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf8,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vgetexpnepbf16 %ymm0, %ymm1 {%k1} # encoding: [0x62,0xf5,0x7d,0x29,0x42,0xc8]
; X86-NEXT:    vmovaps %ymm1, %ymm0 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0xc1]
; X86-NEXT:    retl # encoding: [0xc3]
  %res = call <16 x bfloat> @llvm.x86.avx512bf16ne.mask.getexp.nepbf16.256(<16 x bfloat> %x0, <16 x bfloat> %x1, i16 %x2)
  ret <16 x bfloat> %res
}

define <16 x bfloat>@test_int_x86_avx512_maskz_getexp_nepbf16_256(<16 x bfloat> %x0, i16 %x2) {
; X64-LABEL: test_int_x86_avx512_maskz_getexp_nepbf16_256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vgetexpnepbf16 %ymm0, %ymm0 {%k1} {z} # encoding: [0x62,0xf5,0x7d,0xa9,0x42,0xc0]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512_maskz_getexp_nepbf16_256:
; X86:       # %bb.0:
; X86-NEXT:    kmovw {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf8,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vgetexpnepbf16 %ymm0, %ymm0 {%k1} {z} # encoding: [0x62,0xf5,0x7d,0xa9,0x42,0xc0]
; X86-NEXT:    retl # encoding: [0xc3]
  %res = call <16 x bfloat> @llvm.x86.avx512bf16ne.mask.getexp.nepbf16.256(<16 x bfloat> %x0, <16 x bfloat> zeroinitializer, i16 %x2)
  ret <16 x bfloat> %res
}

declare <8 x bfloat> @llvm.x86.avx512bf16ne.mask.getmant.nepbf16.128(<8 x bfloat>, i32, <8 x bfloat>, i8)
declare <16 x bfloat> @llvm.x86.avx512bf16ne.mask.getmant.nepbf16.256(<16 x bfloat>, i32, <16 x bfloat>, i16)

define <8 x bfloat>@test_int_x86_avx512_mask_getmant_nepbf16_128(<8 x bfloat> %x0, <8 x bfloat> %x2, i8 %x3) {
; X64-LABEL: test_int_x86_avx512_mask_getmant_nepbf16_128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vgetmantnepbf16 $8, %xmm0, %xmm1 {%k1} # encoding: [0x62,0xf3,0x7f,0x09,0x26,0xc8,0x08]
; X64-NEXT:    vgetmantnepbf16 $4, %xmm0, %xmm0 # encoding: [0x62,0xf3,0x7f,0x08,0x26,0xc0,0x04]
; X64-NEXT:    vaddnepbf16 %xmm0, %xmm1, %xmm0 # encoding: [0x62,0xf5,0x75,0x08,0x58,0xc0]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512_mask_getmant_nepbf16_128:
; X86:       # %bb.0:
; X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf9,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vgetmantnepbf16 $8, %xmm0, %xmm1 {%k1} # encoding: [0x62,0xf3,0x7f,0x09,0x26,0xc8,0x08]
; X86-NEXT:    vgetmantnepbf16 $4, %xmm0, %xmm0 # encoding: [0x62,0xf3,0x7f,0x08,0x26,0xc0,0x04]
; X86-NEXT:    vaddnepbf16 %xmm0, %xmm1, %xmm0 # encoding: [0x62,0xf5,0x75,0x08,0x58,0xc0]
; X86-NEXT:    retl # encoding: [0xc3]
  %res = call <8 x bfloat> @llvm.x86.avx512bf16ne.mask.getmant.nepbf16.128(<8 x bfloat> %x0, i32 8, <8 x bfloat> %x2, i8 %x3)
  %res1 = call <8 x bfloat> @llvm.x86.avx512bf16ne.mask.getmant.nepbf16.128(<8 x bfloat> %x0, i32 4, <8 x bfloat> %x2, i8 -1)
  %res2 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vaddnepbf16128(<8 x bfloat> %res, <8 x bfloat> %res1)
  ret <8 x bfloat> %res2
}

define <16 x bfloat>@test_int_x86_avx512_mask_getmant_nepbf16_256(<16 x bfloat> %x0, <16 x bfloat> %x2, i16 %x3) {
; X64-LABEL: test_int_x86_avx512_mask_getmant_nepbf16_256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vgetmantnepbf16 $8, %ymm0, %ymm1 {%k1} # encoding: [0x62,0xf3,0x7f,0x29,0x26,0xc8,0x08]
; X64-NEXT:    vgetmantnepbf16 $4, %ymm0, %ymm0 # encoding: [0x62,0xf3,0x7f,0x28,0x26,0xc0,0x04]
; X64-NEXT:    vaddnepbf16 %ymm0, %ymm1, %ymm0 # encoding: [0x62,0xf5,0x75,0x28,0x58,0xc0]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512_mask_getmant_nepbf16_256:
; X86:       # %bb.0:
; X86-NEXT:    kmovw {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf8,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vgetmantnepbf16 $8, %ymm0, %ymm1 {%k1} # encoding: [0x62,0xf3,0x7f,0x29,0x26,0xc8,0x08]
; X86-NEXT:    vgetmantnepbf16 $4, %ymm0, %ymm0 # encoding: [0x62,0xf3,0x7f,0x28,0x26,0xc0,0x04]
; X86-NEXT:    vaddnepbf16 %ymm0, %ymm1, %ymm0 # encoding: [0x62,0xf5,0x75,0x28,0x58,0xc0]
; X86-NEXT:    retl # encoding: [0xc3]
  %res = call <16 x bfloat> @llvm.x86.avx512bf16ne.mask.getmant.nepbf16.256(<16 x bfloat> %x0, i32 8, <16 x bfloat> %x2, i16 %x3)
  %res1 = call <16 x bfloat> @llvm.x86.avx512bf16ne.mask.getmant.nepbf16.256(<16 x bfloat> %x0, i32 4, <16 x bfloat> %x2, i16 -1)
  %res2 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vaddnepbf16256(<16 x bfloat> %res, <16 x bfloat> %res1)
  ret <16 x bfloat> %res2
}

declare <8 x bfloat> @llvm.x86.avx512bf16ne.mask.rndscale.nepbf16.128(<8 x bfloat>, i32, <8 x bfloat>, i8)
declare <16 x bfloat> @llvm.x86.avx512bf16ne.mask.rndscale.nepbf16.256(<16 x bfloat>, i32, <16 x bfloat>, i16)

define <8 x bfloat>@test_int_x86_avx512_mask_rndscale_nepbf16_128(<8 x bfloat> %x0, <8 x bfloat> %x2, i8 %x3) {
; X64-LABEL: test_int_x86_avx512_mask_rndscale_nepbf16_128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vrndscalenepbf16 $8, %xmm0, %xmm1 {%k1} # encoding: [0x62,0xf3,0x7f,0x09,0x08,0xc8,0x08]
; X64-NEXT:    vrndscalenepbf16 $4, %xmm0, %xmm0 # encoding: [0x62,0xf3,0x7f,0x08,0x08,0xc0,0x04]
; X64-NEXT:    vaddnepbf16 %xmm0, %xmm1, %xmm0 # encoding: [0x62,0xf5,0x75,0x08,0x58,0xc0]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512_mask_rndscale_nepbf16_128:
; X86:       # %bb.0:
; X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf9,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vrndscalenepbf16 $8, %xmm0, %xmm1 {%k1} # encoding: [0x62,0xf3,0x7f,0x09,0x08,0xc8,0x08]
; X86-NEXT:    vrndscalenepbf16 $4, %xmm0, %xmm0 # encoding: [0x62,0xf3,0x7f,0x08,0x08,0xc0,0x04]
; X86-NEXT:    vaddnepbf16 %xmm0, %xmm1, %xmm0 # encoding: [0x62,0xf5,0x75,0x08,0x58,0xc0]
; X86-NEXT:    retl # encoding: [0xc3]
  %res = call <8 x bfloat> @llvm.x86.avx512bf16ne.mask.rndscale.nepbf16.128(<8 x bfloat> %x0, i32 8, <8 x bfloat> %x2, i8 %x3)
  %res1 = call <8 x bfloat> @llvm.x86.avx512bf16ne.mask.rndscale.nepbf16.128(<8 x bfloat> %x0, i32 4, <8 x bfloat> %x2, i8 -1)
  %res2 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vaddnepbf16128(<8 x bfloat> %res, <8 x bfloat> %res1)
  ret <8 x bfloat> %res2
}

define <16 x bfloat>@test_int_x86_avx512_mask_rndscale_nepbf16_256(<16 x bfloat> %x0, <16 x bfloat> %x2, i16 %x3) {
; X64-LABEL: test_int_x86_avx512_mask_rndscale_nepbf16_256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vrndscalenepbf16 $8, %ymm0, %ymm1 {%k1} # encoding: [0x62,0xf3,0x7f,0x29,0x08,0xc8,0x08]
; X64-NEXT:    vrndscalenepbf16 $4, %ymm0, %ymm0 # encoding: [0x62,0xf3,0x7f,0x28,0x08,0xc0,0x04]
; X64-NEXT:    vaddnepbf16 %ymm0, %ymm1, %ymm0 # encoding: [0x62,0xf5,0x75,0x28,0x58,0xc0]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512_mask_rndscale_nepbf16_256:
; X86:       # %bb.0:
; X86-NEXT:    kmovw {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf8,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vrndscalenepbf16 $8, %ymm0, %ymm1 {%k1} # encoding: [0x62,0xf3,0x7f,0x29,0x08,0xc8,0x08]
; X86-NEXT:    vrndscalenepbf16 $4, %ymm0, %ymm0 # encoding: [0x62,0xf3,0x7f,0x28,0x08,0xc0,0x04]
; X86-NEXT:    vaddnepbf16 %ymm0, %ymm1, %ymm0 # encoding: [0x62,0xf5,0x75,0x28,0x58,0xc0]
; X86-NEXT:    retl # encoding: [0xc3]
  %res = call <16 x bfloat> @llvm.x86.avx512bf16ne.mask.rndscale.nepbf16.256(<16 x bfloat> %x0, i32 8, <16 x bfloat> %x2, i16 %x3)
  %res1 = call <16 x bfloat> @llvm.x86.avx512bf16ne.mask.rndscale.nepbf16.256(<16 x bfloat> %x0, i32 4, <16 x bfloat> %x2, i16 -1)
  %res2 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vaddnepbf16256(<16 x bfloat> %res, <16 x bfloat> %res1)
  ret <16 x bfloat> %res2
}

declare <8 x bfloat> @llvm.x86.avx512bf16ne.mask.scalef.nepbf16.128(<8 x bfloat>, <8 x bfloat>, <8 x bfloat>, i8)
declare <16 x bfloat> @llvm.x86.avx512bf16ne.mask.scalef.nepbf16.256(<16 x bfloat>, <16 x bfloat>, <16 x bfloat>, i16)

define <8 x bfloat>@test_int_x86_avx512_scalef_nepbf16_128(<8 x bfloat> %x0, <8 x bfloat> %x1) {
; CHECK-LABEL: test_int_x86_avx512_scalef_nepbf16_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vscalefnepbf16 %xmm1, %xmm0, %xmm0 # encoding: [0x62,0xf6,0x7c,0x08,0x2c,0xc1]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <8 x bfloat> @llvm.x86.avx512bf16ne.mask.scalef.nepbf16.128(<8 x bfloat> %x0, <8 x bfloat> %x1, <8 x bfloat> zeroinitializer, i8 -1)
  ret <8 x bfloat> %res
}

define <8 x bfloat>@test_int_x86_avx512_mask_scalef_nepbf16_128(<8 x bfloat> %x0, <8 x bfloat> %x1, <8 x bfloat> %x2, i8 %x3) {
; X64-LABEL: test_int_x86_avx512_mask_scalef_nepbf16_128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vscalefnepbf16 %xmm1, %xmm0, %xmm2 {%k1} # encoding: [0x62,0xf6,0x7c,0x09,0x2c,0xd1]
; X64-NEXT:    vmovaps %xmm2, %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0xc2]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512_mask_scalef_nepbf16_128:
; X86:       # %bb.0:
; X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf9,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vscalefnepbf16 %xmm1, %xmm0, %xmm2 {%k1} # encoding: [0x62,0xf6,0x7c,0x09,0x2c,0xd1]
; X86-NEXT:    vmovaps %xmm2, %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0xc2]
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %x3 to <8 x i1>
  %res = call <8 x bfloat> @llvm.x86.avx512bf16ne.mask.scalef.nepbf16.128(<8 x bfloat> %x0, <8 x bfloat> %x1, <8 x bfloat> %x2, i8 %x3)
  ret <8 x bfloat> %res
}

define <8 x bfloat>@test_int_x86_avx512_maskz_scalef_nepbf16_128(<8 x bfloat> %x0, <8 x bfloat> %x1, i8 %x3) {
; X64-LABEL: test_int_x86_avx512_maskz_scalef_nepbf16_128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vscalefnepbf16 %xmm1, %xmm0, %xmm0 {%k1} {z} # encoding: [0x62,0xf6,0x7c,0x89,0x2c,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512_maskz_scalef_nepbf16_128:
; X86:       # %bb.0:
; X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf9,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vscalefnepbf16 %xmm1, %xmm0, %xmm0 {%k1} {z} # encoding: [0x62,0xf6,0x7c,0x89,0x2c,0xc1]
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %x3 to <8 x i1>
  %res = call <8 x bfloat> @llvm.x86.avx512bf16ne.mask.scalef.nepbf16.128(<8 x bfloat> %x0, <8 x bfloat> %x1, <8 x bfloat> zeroinitializer, i8 %x3)
  ret <8 x bfloat> %res
}

define <16 x bfloat>@test_int_x86_avx512_scalef_nepbf16_256(<16 x bfloat> %x0, <16 x bfloat> %x1) {
; CHECK-LABEL: test_int_x86_avx512_scalef_nepbf16_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vscalefnepbf16 %ymm1, %ymm0, %ymm0 # encoding: [0x62,0xf6,0x7c,0x28,0x2c,0xc1]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <16 x bfloat> @llvm.x86.avx512bf16ne.mask.scalef.nepbf16.256(<16 x bfloat> %x0, <16 x bfloat> %x1, <16 x bfloat> zeroinitializer, i16 -1)
  ret <16 x bfloat> %res
}

define <16 x bfloat>@test_int_x86_avx512_mask_scalef_nepbf16_256(<16 x bfloat> %x0, <16 x bfloat> %x1, <16 x bfloat> %x2, i16 %x3) {
; X64-LABEL: test_int_x86_avx512_mask_scalef_nepbf16_256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vscalefnepbf16 %ymm1, %ymm0, %ymm2 {%k1} # encoding: [0x62,0xf6,0x7c,0x29,0x2c,0xd1]
; X64-NEXT:    vmovaps %ymm2, %ymm0 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0xc2]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512_mask_scalef_nepbf16_256:
; X86:       # %bb.0:
; X86-NEXT:    kmovw {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf8,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vscalefnepbf16 %ymm1, %ymm0, %ymm2 {%k1} # encoding: [0x62,0xf6,0x7c,0x29,0x2c,0xd1]
; X86-NEXT:    vmovaps %ymm2, %ymm0 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0xc2]
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %x3 to <16 x i1>
  %res = call <16 x bfloat> @llvm.x86.avx512bf16ne.mask.scalef.nepbf16.256(<16 x bfloat> %x0, <16 x bfloat> %x1, <16 x bfloat> %x2, i16 %x3)
  ret <16 x bfloat> %res
}

define <16 x bfloat>@test_int_x86_avx512_maskz_scalef_nepbf16_256(<16 x bfloat> %x0, <16 x bfloat> %x1, i16 %x3) {
; X64-LABEL: test_int_x86_avx512_maskz_scalef_nepbf16_256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vscalefnepbf16 %ymm1, %ymm0, %ymm0 {%k1} {z} # encoding: [0x62,0xf6,0x7c,0xa9,0x2c,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512_maskz_scalef_nepbf16_256:
; X86:       # %bb.0:
; X86-NEXT:    kmovw {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf8,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vscalefnepbf16 %ymm1, %ymm0, %ymm0 {%k1} {z} # encoding: [0x62,0xf6,0x7c,0xa9,0x2c,0xc1]
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %x3 to <16 x i1>
  %res = call <16 x bfloat> @llvm.x86.avx512bf16ne.mask.scalef.nepbf16.256(<16 x bfloat> %x0, <16 x bfloat> %x1, <16 x bfloat> zeroinitializer, i16 %x3)
  ret <16 x bfloat> %res
}

declare <16 x bfloat> @llvm.x86.avx512bf16ne.vfmadd213nepbf16256(<16 x bfloat>, <16 x bfloat>, <16 x bfloat>)
define <16 x bfloat> @test_int_x86_avx512bf16ne_vfmadd213nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_vfmadd213nepbf16256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vfmadd213nepbf16 %ymm2, %ymm1, %ymm0 # encoding: [0x62,0xf6,0x74,0x28,0xa8,0xc2]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfmadd213nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  ret <16 x bfloat> %res
}

define <16 x bfloat> @test_int_x86_avx512bf16ne_mask_vfmadd213nepbf16256(<16 x bfloat> %src, <16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3, i16 %msk, <16 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_mask_vfmadd213nepbf16256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vfmadd213nepbf16 %ymm3, %ymm2, %ymm1 # encoding: [0x62,0xf6,0x6c,0x28,0xa8,0xcb]
; X64-NEXT:    vmovdqu16 %ymm1, %ymm0 {%k1} # encoding: [0x62,0xf1,0xff,0x29,0x6f,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_mask_vfmadd213nepbf16256:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-32, %esp # encoding: [0x83,0xe4,0xe0]
; X86-NEXT:    subl $32, %esp # encoding: [0x83,0xec,0x20]
; X86-NEXT:    kmovw 40(%ebp), %k1 # encoding: [0xc5,0xf8,0x90,0x4d,0x28]
; X86-NEXT:    vfmadd213nepbf16 8(%ebp), %ymm2, %ymm1 # encoding: [0x62,0xf6,0x6c,0x28,0xa8,0x8d,0x08,0x00,0x00,0x00]
; X86-NEXT:    vmovdqu16 %ymm1, %ymm0 {%k1} # encoding: [0x62,0xf1,0xff,0x29,0x6f,0xc1]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %msk to <16 x i1>
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfmadd213nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  %res = select <16 x i1> %mask, <16 x bfloat> %res0, <16 x bfloat> %src
  ret <16 x bfloat> %res
}

define <16 x bfloat> @test_int_x86_avx512bf16ne_maskz_vfmadd213nepbf16256(<16 x bfloat> %src, <16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3, i16 %msk, <16 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_vfmadd213nepbf16256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vmovaps (%rsi), %ymm0 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x06]
; X64-NEXT:    vfmadd213nepbf16 %ymm3, %ymm1, %ymm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0xa8,0xd3]
; X64-NEXT:    vfmadd213nepbf16 %ymm3, %ymm1, %ymm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0xa8,0xc3]
; X64-NEXT:    vfmadd213nepbf16 %ymm3, %ymm2, %ymm0 # encoding: [0x62,0xf6,0x6c,0x28,0xa8,0xc3]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_vfmadd213nepbf16256:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-32, %esp # encoding: [0x83,0xe4,0xe0]
; X86-NEXT:    subl $32, %esp # encoding: [0x83,0xec,0x20]
; X86-NEXT:    vmovaps 8(%ebp), %ymm3 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x5d,0x08]
; X86-NEXT:    movl 44(%ebp), %eax # encoding: [0x8b,0x45,0x2c]
; X86-NEXT:    kmovw 40(%ebp), %k1 # encoding: [0xc5,0xf8,0x90,0x4d,0x28]
; X86-NEXT:    vmovaps (%eax), %ymm0 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x00]
; X86-NEXT:    vfmadd213nepbf16 %ymm3, %ymm1, %ymm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0xa8,0xd3]
; X86-NEXT:    vfmadd213nepbf16 %ymm3, %ymm1, %ymm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0xa8,0xc3]
; X86-NEXT:    vfmadd213nepbf16 %ymm3, %ymm2, %ymm0 # encoding: [0x62,0xf6,0x6c,0x28,0xa8,0xc3]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %msk to <16 x i1>
  %val = load <16 x bfloat>, <16 x bfloat>* %ptr
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfmadd213nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  %res1 = select <16 x i1> %mask, <16 x bfloat> %res0, <16 x bfloat> zeroinitializer
  %t2 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfmadd213nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %val, <16 x bfloat> %x3)
  %res2 = select <16 x i1> %mask, <16 x bfloat> %t2, <16 x bfloat> zeroinitializer
  %res3  =  call <16 x bfloat> @llvm.x86.avx512bf16ne.vfmadd213nepbf16256(<16 x bfloat> %res1, <16 x bfloat> %res2, <16 x bfloat> %x3)
  ret <16 x bfloat> %res3
}

declare <16 x bfloat> @llvm.x86.avx512bf16ne.vfmsub213nepbf16256(<16 x bfloat>, <16 x bfloat>, <16 x bfloat>)
define <16 x bfloat> @test_int_x86_avx512bf16ne_vfmsub213nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_vfmsub213nepbf16256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vfmsub213nepbf16 %ymm2, %ymm1, %ymm0 # encoding: [0x62,0xf6,0x74,0x28,0xaa,0xc2]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfmsub213nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  ret <16 x bfloat> %res
}

define <16 x bfloat> @test_int_x86_avx512bf16ne_mask_vfmsub213nepbf16256(<16 x bfloat> %src, <16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3, i16 %msk, <16 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_mask_vfmsub213nepbf16256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vfmsub213nepbf16 %ymm3, %ymm2, %ymm1 # encoding: [0x62,0xf6,0x6c,0x28,0xaa,0xcb]
; X64-NEXT:    vmovdqu16 %ymm1, %ymm0 {%k1} # encoding: [0x62,0xf1,0xff,0x29,0x6f,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_mask_vfmsub213nepbf16256:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-32, %esp # encoding: [0x83,0xe4,0xe0]
; X86-NEXT:    subl $32, %esp # encoding: [0x83,0xec,0x20]
; X86-NEXT:    kmovw 40(%ebp), %k1 # encoding: [0xc5,0xf8,0x90,0x4d,0x28]
; X86-NEXT:    vfmsub213nepbf16 8(%ebp), %ymm2, %ymm1 # encoding: [0x62,0xf6,0x6c,0x28,0xaa,0x8d,0x08,0x00,0x00,0x00]
; X86-NEXT:    vmovdqu16 %ymm1, %ymm0 {%k1} # encoding: [0x62,0xf1,0xff,0x29,0x6f,0xc1]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %msk to <16 x i1>
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfmsub213nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  %res = select <16 x i1> %mask, <16 x bfloat> %res0, <16 x bfloat> %src
  ret <16 x bfloat> %res
}

define <16 x bfloat> @test_int_x86_avx512bf16ne_maskz_vfmsub213nepbf16256(<16 x bfloat> %src, <16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3, i16 %msk, <16 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_vfmsub213nepbf16256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vmovaps (%rsi), %ymm0 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x06]
; X64-NEXT:    vfmsub213nepbf16 %ymm3, %ymm1, %ymm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0xaa,0xd3]
; X64-NEXT:    vfmsub213nepbf16 %ymm3, %ymm1, %ymm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0xaa,0xc3]
; X64-NEXT:    vfmsub213nepbf16 %ymm3, %ymm2, %ymm0 # encoding: [0x62,0xf6,0x6c,0x28,0xaa,0xc3]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_vfmsub213nepbf16256:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-32, %esp # encoding: [0x83,0xe4,0xe0]
; X86-NEXT:    subl $32, %esp # encoding: [0x83,0xec,0x20]
; X86-NEXT:    vmovaps 8(%ebp), %ymm3 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x5d,0x08]
; X86-NEXT:    movl 44(%ebp), %eax # encoding: [0x8b,0x45,0x2c]
; X86-NEXT:    kmovw 40(%ebp), %k1 # encoding: [0xc5,0xf8,0x90,0x4d,0x28]
; X86-NEXT:    vmovaps (%eax), %ymm0 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x00]
; X86-NEXT:    vfmsub213nepbf16 %ymm3, %ymm1, %ymm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0xaa,0xd3]
; X86-NEXT:    vfmsub213nepbf16 %ymm3, %ymm1, %ymm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0xaa,0xc3]
; X86-NEXT:    vfmsub213nepbf16 %ymm3, %ymm2, %ymm0 # encoding: [0x62,0xf6,0x6c,0x28,0xaa,0xc3]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %msk to <16 x i1>
  %val = load <16 x bfloat>, <16 x bfloat>* %ptr
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfmsub213nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  %res1 = select <16 x i1> %mask, <16 x bfloat> %res0, <16 x bfloat> zeroinitializer
  %t2 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfmsub213nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %val, <16 x bfloat> %x3)
  %res2 = select <16 x i1> %mask, <16 x bfloat> %t2, <16 x bfloat> zeroinitializer
  %res3  =  call <16 x bfloat> @llvm.x86.avx512bf16ne.vfmsub213nepbf16256(<16 x bfloat> %res1, <16 x bfloat> %res2, <16 x bfloat> %x3)
  ret <16 x bfloat> %res3
}

declare <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd213nepbf16256(<16 x bfloat>, <16 x bfloat>, <16 x bfloat>)
define <16 x bfloat> @test_int_x86_avx512bf16ne_vfnmadd213nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_vfnmadd213nepbf16256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vfnmadd213nepbf16 %ymm2, %ymm1, %ymm0 # encoding: [0x62,0xf6,0x74,0x28,0xac,0xc2]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd213nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  ret <16 x bfloat> %res
}

define <16 x bfloat> @test_int_x86_avx512bf16ne_mask_vfnmadd213nepbf16256(<16 x bfloat> %src, <16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3, i16 %msk, <16 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_mask_vfnmadd213nepbf16256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vfnmadd213nepbf16 %ymm3, %ymm2, %ymm1 # encoding: [0x62,0xf6,0x6c,0x28,0xac,0xcb]
; X64-NEXT:    vmovdqu16 %ymm1, %ymm0 {%k1} # encoding: [0x62,0xf1,0xff,0x29,0x6f,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_mask_vfnmadd213nepbf16256:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-32, %esp # encoding: [0x83,0xe4,0xe0]
; X86-NEXT:    subl $32, %esp # encoding: [0x83,0xec,0x20]
; X86-NEXT:    kmovw 40(%ebp), %k1 # encoding: [0xc5,0xf8,0x90,0x4d,0x28]
; X86-NEXT:    vfnmadd213nepbf16 8(%ebp), %ymm2, %ymm1 # encoding: [0x62,0xf6,0x6c,0x28,0xac,0x8d,0x08,0x00,0x00,0x00]
; X86-NEXT:    vmovdqu16 %ymm1, %ymm0 {%k1} # encoding: [0x62,0xf1,0xff,0x29,0x6f,0xc1]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %msk to <16 x i1>
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd213nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  %res = select <16 x i1> %mask, <16 x bfloat> %res0, <16 x bfloat> %src
  ret <16 x bfloat> %res
}

define <16 x bfloat> @test_int_x86_avx512bf16ne_maskz_vfnmadd213nepbf16256(<16 x bfloat> %src, <16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3, i16 %msk, <16 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_vfnmadd213nepbf16256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vmovaps (%rsi), %ymm0 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x06]
; X64-NEXT:    vfnmadd213nepbf16 %ymm3, %ymm1, %ymm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0xac,0xd3]
; X64-NEXT:    vfnmadd213nepbf16 %ymm3, %ymm1, %ymm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0xac,0xc3]
; X64-NEXT:    vfnmadd213nepbf16 %ymm3, %ymm2, %ymm0 # encoding: [0x62,0xf6,0x6c,0x28,0xac,0xc3]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_vfnmadd213nepbf16256:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-32, %esp # encoding: [0x83,0xe4,0xe0]
; X86-NEXT:    subl $32, %esp # encoding: [0x83,0xec,0x20]
; X86-NEXT:    vmovaps 8(%ebp), %ymm3 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x5d,0x08]
; X86-NEXT:    movl 44(%ebp), %eax # encoding: [0x8b,0x45,0x2c]
; X86-NEXT:    kmovw 40(%ebp), %k1 # encoding: [0xc5,0xf8,0x90,0x4d,0x28]
; X86-NEXT:    vmovaps (%eax), %ymm0 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x00]
; X86-NEXT:    vfnmadd213nepbf16 %ymm3, %ymm1, %ymm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0xac,0xd3]
; X86-NEXT:    vfnmadd213nepbf16 %ymm3, %ymm1, %ymm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0xac,0xc3]
; X86-NEXT:    vfnmadd213nepbf16 %ymm3, %ymm2, %ymm0 # encoding: [0x62,0xf6,0x6c,0x28,0xac,0xc3]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %msk to <16 x i1>
  %val = load <16 x bfloat>, <16 x bfloat>* %ptr
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd213nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  %res1 = select <16 x i1> %mask, <16 x bfloat> %res0, <16 x bfloat> zeroinitializer
  %t2 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd213nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %val, <16 x bfloat> %x3)
  %res2 = select <16 x i1> %mask, <16 x bfloat> %t2, <16 x bfloat> zeroinitializer
  %res3  =  call <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd213nepbf16256(<16 x bfloat> %res1, <16 x bfloat> %res2, <16 x bfloat> %x3)
  ret <16 x bfloat> %res3
}

declare <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub213nepbf16256(<16 x bfloat>, <16 x bfloat>, <16 x bfloat>)
define <16 x bfloat> @test_int_x86_avx512bf16ne_vfnmsub213nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_vfnmsub213nepbf16256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vfnmsub213nepbf16 %ymm2, %ymm1, %ymm0 # encoding: [0x62,0xf6,0x74,0x28,0xae,0xc2]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub213nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  ret <16 x bfloat> %res
}

define <16 x bfloat> @test_int_x86_avx512bf16ne_mask_vfnmsub213nepbf16256(<16 x bfloat> %src, <16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3, i16 %msk, <16 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_mask_vfnmsub213nepbf16256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vfnmsub213nepbf16 %ymm3, %ymm2, %ymm1 # encoding: [0x62,0xf6,0x6c,0x28,0xae,0xcb]
; X64-NEXT:    vmovdqu16 %ymm1, %ymm0 {%k1} # encoding: [0x62,0xf1,0xff,0x29,0x6f,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_mask_vfnmsub213nepbf16256:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-32, %esp # encoding: [0x83,0xe4,0xe0]
; X86-NEXT:    subl $32, %esp # encoding: [0x83,0xec,0x20]
; X86-NEXT:    kmovw 40(%ebp), %k1 # encoding: [0xc5,0xf8,0x90,0x4d,0x28]
; X86-NEXT:    vfnmsub213nepbf16 8(%ebp), %ymm2, %ymm1 # encoding: [0x62,0xf6,0x6c,0x28,0xae,0x8d,0x08,0x00,0x00,0x00]
; X86-NEXT:    vmovdqu16 %ymm1, %ymm0 {%k1} # encoding: [0x62,0xf1,0xff,0x29,0x6f,0xc1]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %msk to <16 x i1>
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub213nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  %res = select <16 x i1> %mask, <16 x bfloat> %res0, <16 x bfloat> %src
  ret <16 x bfloat> %res
}

define <16 x bfloat> @test_int_x86_avx512bf16ne_maskz_vfnmsub213nepbf16256(<16 x bfloat> %src, <16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3, i16 %msk, <16 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_vfnmsub213nepbf16256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vmovaps (%rsi), %ymm0 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x06]
; X64-NEXT:    vfnmsub213nepbf16 %ymm3, %ymm1, %ymm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0xae,0xd3]
; X64-NEXT:    vfnmsub213nepbf16 %ymm3, %ymm1, %ymm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0xae,0xc3]
; X64-NEXT:    vfnmsub213nepbf16 %ymm3, %ymm2, %ymm0 # encoding: [0x62,0xf6,0x6c,0x28,0xae,0xc3]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_vfnmsub213nepbf16256:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-32, %esp # encoding: [0x83,0xe4,0xe0]
; X86-NEXT:    subl $32, %esp # encoding: [0x83,0xec,0x20]
; X86-NEXT:    vmovaps 8(%ebp), %ymm3 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x5d,0x08]
; X86-NEXT:    movl 44(%ebp), %eax # encoding: [0x8b,0x45,0x2c]
; X86-NEXT:    kmovw 40(%ebp), %k1 # encoding: [0xc5,0xf8,0x90,0x4d,0x28]
; X86-NEXT:    vmovaps (%eax), %ymm0 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x00]
; X86-NEXT:    vfnmsub213nepbf16 %ymm3, %ymm1, %ymm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0xae,0xd3]
; X86-NEXT:    vfnmsub213nepbf16 %ymm3, %ymm1, %ymm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0xae,0xc3]
; X86-NEXT:    vfnmsub213nepbf16 %ymm3, %ymm2, %ymm0 # encoding: [0x62,0xf6,0x6c,0x28,0xae,0xc3]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %msk to <16 x i1>
  %val = load <16 x bfloat>, <16 x bfloat>* %ptr
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub213nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  %res1 = select <16 x i1> %mask, <16 x bfloat> %res0, <16 x bfloat> zeroinitializer
  %t2 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub213nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %val, <16 x bfloat> %x3)
  %res2 = select <16 x i1> %mask, <16 x bfloat> %t2, <16 x bfloat> zeroinitializer
  %res3  =  call <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub213nepbf16256(<16 x bfloat> %res1, <16 x bfloat> %res2, <16 x bfloat> %x3)
  ret <16 x bfloat> %res3
}

declare <16 x bfloat> @llvm.x86.avx512bf16ne.vfmadd132nepbf16256(<16 x bfloat>, <16 x bfloat>, <16 x bfloat>)
define <16 x bfloat> @test_int_x86_avx512bf16ne_vfmadd132nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_vfmadd132nepbf16256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vfmadd132nepbf16 %ymm2, %ymm1, %ymm0 # encoding: [0x62,0xf6,0x74,0x28,0x98,0xc2]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfmadd132nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  ret <16 x bfloat> %res
}

define <16 x bfloat> @test_int_x86_avx512bf16ne_mask_vfmadd132nepbf16256(<16 x bfloat> %src, <16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3, i16 %msk, <16 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_mask_vfmadd132nepbf16256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vfmadd132nepbf16 %ymm3, %ymm2, %ymm1 # encoding: [0x62,0xf6,0x6c,0x28,0x98,0xcb]
; X64-NEXT:    vmovdqu16 %ymm1, %ymm0 {%k1} # encoding: [0x62,0xf1,0xff,0x29,0x6f,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_mask_vfmadd132nepbf16256:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-32, %esp # encoding: [0x83,0xe4,0xe0]
; X86-NEXT:    subl $32, %esp # encoding: [0x83,0xec,0x20]
; X86-NEXT:    kmovw 40(%ebp), %k1 # encoding: [0xc5,0xf8,0x90,0x4d,0x28]
; X86-NEXT:    vfmadd132nepbf16 8(%ebp), %ymm2, %ymm1 # encoding: [0x62,0xf6,0x6c,0x28,0x98,0x8d,0x08,0x00,0x00,0x00]
; X86-NEXT:    vmovdqu16 %ymm1, %ymm0 {%k1} # encoding: [0x62,0xf1,0xff,0x29,0x6f,0xc1]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %msk to <16 x i1>
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfmadd132nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  %res = select <16 x i1> %mask, <16 x bfloat> %res0, <16 x bfloat> %src
  ret <16 x bfloat> %res
}

define <16 x bfloat> @test_int_x86_avx512bf16ne_maskz_vfmadd132nepbf16256(<16 x bfloat> %src, <16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3, i16 %msk, <16 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_vfmadd132nepbf16256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vmovaps (%rsi), %ymm0 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x06]
; X64-NEXT:    vfmadd132nepbf16 %ymm3, %ymm1, %ymm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0x98,0xd3]
; X64-NEXT:    vfmadd132nepbf16 %ymm3, %ymm1, %ymm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0x98,0xc3]
; X64-NEXT:    vfmadd132nepbf16 %ymm3, %ymm2, %ymm0 # encoding: [0x62,0xf6,0x6c,0x28,0x98,0xc3]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_vfmadd132nepbf16256:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-32, %esp # encoding: [0x83,0xe4,0xe0]
; X86-NEXT:    subl $32, %esp # encoding: [0x83,0xec,0x20]
; X86-NEXT:    vmovaps 8(%ebp), %ymm3 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x5d,0x08]
; X86-NEXT:    movl 44(%ebp), %eax # encoding: [0x8b,0x45,0x2c]
; X86-NEXT:    kmovw 40(%ebp), %k1 # encoding: [0xc5,0xf8,0x90,0x4d,0x28]
; X86-NEXT:    vmovaps (%eax), %ymm0 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x00]
; X86-NEXT:    vfmadd132nepbf16 %ymm3, %ymm1, %ymm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0x98,0xd3]
; X86-NEXT:    vfmadd132nepbf16 %ymm3, %ymm1, %ymm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0x98,0xc3]
; X86-NEXT:    vfmadd132nepbf16 %ymm3, %ymm2, %ymm0 # encoding: [0x62,0xf6,0x6c,0x28,0x98,0xc3]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %msk to <16 x i1>
  %val = load <16 x bfloat>, <16 x bfloat>* %ptr
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfmadd132nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  %res1 = select <16 x i1> %mask, <16 x bfloat> %res0, <16 x bfloat> zeroinitializer
  %t2 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfmadd132nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %val, <16 x bfloat> %x3)
  %res2 = select <16 x i1> %mask, <16 x bfloat> %t2, <16 x bfloat> zeroinitializer
  %res3  =  call <16 x bfloat> @llvm.x86.avx512bf16ne.vfmadd132nepbf16256(<16 x bfloat> %res1, <16 x bfloat> %res2, <16 x bfloat> %x3)
  ret <16 x bfloat> %res3
}

declare <16 x bfloat> @llvm.x86.avx512bf16ne.vfmsub132nepbf16256(<16 x bfloat>, <16 x bfloat>, <16 x bfloat>)
define <16 x bfloat> @test_int_x86_avx512bf16ne_vfmsub132nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_vfmsub132nepbf16256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vfmsub132nepbf16 %ymm2, %ymm1, %ymm0 # encoding: [0x62,0xf6,0x74,0x28,0x9a,0xc2]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfmsub132nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  ret <16 x bfloat> %res
}

define <16 x bfloat> @test_int_x86_avx512bf16ne_mask_vfmsub132nepbf16256(<16 x bfloat> %src, <16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3, i16 %msk, <16 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_mask_vfmsub132nepbf16256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vfmsub132nepbf16 %ymm3, %ymm2, %ymm1 # encoding: [0x62,0xf6,0x6c,0x28,0x9a,0xcb]
; X64-NEXT:    vmovdqu16 %ymm1, %ymm0 {%k1} # encoding: [0x62,0xf1,0xff,0x29,0x6f,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_mask_vfmsub132nepbf16256:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-32, %esp # encoding: [0x83,0xe4,0xe0]
; X86-NEXT:    subl $32, %esp # encoding: [0x83,0xec,0x20]
; X86-NEXT:    kmovw 40(%ebp), %k1 # encoding: [0xc5,0xf8,0x90,0x4d,0x28]
; X86-NEXT:    vfmsub132nepbf16 8(%ebp), %ymm2, %ymm1 # encoding: [0x62,0xf6,0x6c,0x28,0x9a,0x8d,0x08,0x00,0x00,0x00]
; X86-NEXT:    vmovdqu16 %ymm1, %ymm0 {%k1} # encoding: [0x62,0xf1,0xff,0x29,0x6f,0xc1]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %msk to <16 x i1>
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfmsub132nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  %res = select <16 x i1> %mask, <16 x bfloat> %res0, <16 x bfloat> %src
  ret <16 x bfloat> %res
}

define <16 x bfloat> @test_int_x86_avx512bf16ne_maskz_vfmsub132nepbf16256(<16 x bfloat> %src, <16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3, i16 %msk, <16 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_vfmsub132nepbf16256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vmovaps (%rsi), %ymm0 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x06]
; X64-NEXT:    vfmsub132nepbf16 %ymm3, %ymm1, %ymm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0x9a,0xd3]
; X64-NEXT:    vfmsub132nepbf16 %ymm3, %ymm1, %ymm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0x9a,0xc3]
; X64-NEXT:    vfmsub132nepbf16 %ymm3, %ymm2, %ymm0 # encoding: [0x62,0xf6,0x6c,0x28,0x9a,0xc3]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_vfmsub132nepbf16256:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-32, %esp # encoding: [0x83,0xe4,0xe0]
; X86-NEXT:    subl $32, %esp # encoding: [0x83,0xec,0x20]
; X86-NEXT:    vmovaps 8(%ebp), %ymm3 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x5d,0x08]
; X86-NEXT:    movl 44(%ebp), %eax # encoding: [0x8b,0x45,0x2c]
; X86-NEXT:    kmovw 40(%ebp), %k1 # encoding: [0xc5,0xf8,0x90,0x4d,0x28]
; X86-NEXT:    vmovaps (%eax), %ymm0 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x00]
; X86-NEXT:    vfmsub132nepbf16 %ymm3, %ymm1, %ymm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0x9a,0xd3]
; X86-NEXT:    vfmsub132nepbf16 %ymm3, %ymm1, %ymm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0x9a,0xc3]
; X86-NEXT:    vfmsub132nepbf16 %ymm3, %ymm2, %ymm0 # encoding: [0x62,0xf6,0x6c,0x28,0x9a,0xc3]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %msk to <16 x i1>
  %val = load <16 x bfloat>, <16 x bfloat>* %ptr
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfmsub132nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  %res1 = select <16 x i1> %mask, <16 x bfloat> %res0, <16 x bfloat> zeroinitializer
  %t2 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfmsub132nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %val, <16 x bfloat> %x3)
  %res2 = select <16 x i1> %mask, <16 x bfloat> %t2, <16 x bfloat> zeroinitializer
  %res3  =  call <16 x bfloat> @llvm.x86.avx512bf16ne.vfmsub132nepbf16256(<16 x bfloat> %res1, <16 x bfloat> %res2, <16 x bfloat> %x3)
  ret <16 x bfloat> %res3
}

declare <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd132nepbf16256(<16 x bfloat>, <16 x bfloat>, <16 x bfloat>)
define <16 x bfloat> @test_int_x86_avx512bf16ne_vfnmadd132nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_vfnmadd132nepbf16256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vfnmadd132nepbf16 %ymm2, %ymm1, %ymm0 # encoding: [0x62,0xf6,0x74,0x28,0x9c,0xc2]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd132nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  ret <16 x bfloat> %res
}

define <16 x bfloat> @test_int_x86_avx512bf16ne_mask_vfnmadd132nepbf16256(<16 x bfloat> %src, <16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3, i16 %msk, <16 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_mask_vfnmadd132nepbf16256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vfnmadd132nepbf16 %ymm3, %ymm2, %ymm1 # encoding: [0x62,0xf6,0x6c,0x28,0x9c,0xcb]
; X64-NEXT:    vmovdqu16 %ymm1, %ymm0 {%k1} # encoding: [0x62,0xf1,0xff,0x29,0x6f,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_mask_vfnmadd132nepbf16256:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-32, %esp # encoding: [0x83,0xe4,0xe0]
; X86-NEXT:    subl $32, %esp # encoding: [0x83,0xec,0x20]
; X86-NEXT:    kmovw 40(%ebp), %k1 # encoding: [0xc5,0xf8,0x90,0x4d,0x28]
; X86-NEXT:    vfnmadd132nepbf16 8(%ebp), %ymm2, %ymm1 # encoding: [0x62,0xf6,0x6c,0x28,0x9c,0x8d,0x08,0x00,0x00,0x00]
; X86-NEXT:    vmovdqu16 %ymm1, %ymm0 {%k1} # encoding: [0x62,0xf1,0xff,0x29,0x6f,0xc1]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %msk to <16 x i1>
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd132nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  %res = select <16 x i1> %mask, <16 x bfloat> %res0, <16 x bfloat> %src
  ret <16 x bfloat> %res
}

define <16 x bfloat> @test_int_x86_avx512bf16ne_maskz_vfnmadd132nepbf16256(<16 x bfloat> %src, <16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3, i16 %msk, <16 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_vfnmadd132nepbf16256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vmovaps (%rsi), %ymm0 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x06]
; X64-NEXT:    vfnmadd132nepbf16 %ymm3, %ymm1, %ymm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0x9c,0xd3]
; X64-NEXT:    vfnmadd132nepbf16 %ymm3, %ymm1, %ymm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0x9c,0xc3]
; X64-NEXT:    vfnmadd132nepbf16 %ymm3, %ymm2, %ymm0 # encoding: [0x62,0xf6,0x6c,0x28,0x9c,0xc3]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_vfnmadd132nepbf16256:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-32, %esp # encoding: [0x83,0xe4,0xe0]
; X86-NEXT:    subl $32, %esp # encoding: [0x83,0xec,0x20]
; X86-NEXT:    vmovaps 8(%ebp), %ymm3 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x5d,0x08]
; X86-NEXT:    movl 44(%ebp), %eax # encoding: [0x8b,0x45,0x2c]
; X86-NEXT:    kmovw 40(%ebp), %k1 # encoding: [0xc5,0xf8,0x90,0x4d,0x28]
; X86-NEXT:    vmovaps (%eax), %ymm0 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x00]
; X86-NEXT:    vfnmadd132nepbf16 %ymm3, %ymm1, %ymm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0x9c,0xd3]
; X86-NEXT:    vfnmadd132nepbf16 %ymm3, %ymm1, %ymm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0x9c,0xc3]
; X86-NEXT:    vfnmadd132nepbf16 %ymm3, %ymm2, %ymm0 # encoding: [0x62,0xf6,0x6c,0x28,0x9c,0xc3]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %msk to <16 x i1>
  %val = load <16 x bfloat>, <16 x bfloat>* %ptr
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd132nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  %res1 = select <16 x i1> %mask, <16 x bfloat> %res0, <16 x bfloat> zeroinitializer
  %t2 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd132nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %val, <16 x bfloat> %x3)
  %res2 = select <16 x i1> %mask, <16 x bfloat> %t2, <16 x bfloat> zeroinitializer
  %res3  =  call <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd132nepbf16256(<16 x bfloat> %res1, <16 x bfloat> %res2, <16 x bfloat> %x3)
  ret <16 x bfloat> %res3
}

declare <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub132nepbf16256(<16 x bfloat>, <16 x bfloat>, <16 x bfloat>)
define <16 x bfloat> @test_int_x86_avx512bf16ne_vfnmsub132nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_vfnmsub132nepbf16256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vfnmsub132nepbf16 %ymm2, %ymm1, %ymm0 # encoding: [0x62,0xf6,0x74,0x28,0x9e,0xc2]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub132nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  ret <16 x bfloat> %res
}

define <16 x bfloat> @test_int_x86_avx512bf16ne_mask_vfnmsub132nepbf16256(<16 x bfloat> %src, <16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3, i16 %msk, <16 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_mask_vfnmsub132nepbf16256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vfnmsub132nepbf16 %ymm3, %ymm2, %ymm1 # encoding: [0x62,0xf6,0x6c,0x28,0x9e,0xcb]
; X64-NEXT:    vmovdqu16 %ymm1, %ymm0 {%k1} # encoding: [0x62,0xf1,0xff,0x29,0x6f,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_mask_vfnmsub132nepbf16256:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-32, %esp # encoding: [0x83,0xe4,0xe0]
; X86-NEXT:    subl $32, %esp # encoding: [0x83,0xec,0x20]
; X86-NEXT:    kmovw 40(%ebp), %k1 # encoding: [0xc5,0xf8,0x90,0x4d,0x28]
; X86-NEXT:    vfnmsub132nepbf16 8(%ebp), %ymm2, %ymm1 # encoding: [0x62,0xf6,0x6c,0x28,0x9e,0x8d,0x08,0x00,0x00,0x00]
; X86-NEXT:    vmovdqu16 %ymm1, %ymm0 {%k1} # encoding: [0x62,0xf1,0xff,0x29,0x6f,0xc1]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %msk to <16 x i1>
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub132nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  %res = select <16 x i1> %mask, <16 x bfloat> %res0, <16 x bfloat> %src
  ret <16 x bfloat> %res
}

define <16 x bfloat> @test_int_x86_avx512bf16ne_maskz_vfnmsub132nepbf16256(<16 x bfloat> %src, <16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3, i16 %msk, <16 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_vfnmsub132nepbf16256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vmovaps (%rsi), %ymm0 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x06]
; X64-NEXT:    vfnmsub132nepbf16 %ymm3, %ymm1, %ymm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0x9e,0xd3]
; X64-NEXT:    vfnmsub132nepbf16 %ymm3, %ymm1, %ymm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0x9e,0xc3]
; X64-NEXT:    vfnmsub132nepbf16 %ymm3, %ymm2, %ymm0 # encoding: [0x62,0xf6,0x6c,0x28,0x9e,0xc3]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_vfnmsub132nepbf16256:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-32, %esp # encoding: [0x83,0xe4,0xe0]
; X86-NEXT:    subl $32, %esp # encoding: [0x83,0xec,0x20]
; X86-NEXT:    vmovaps 8(%ebp), %ymm3 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x5d,0x08]
; X86-NEXT:    movl 44(%ebp), %eax # encoding: [0x8b,0x45,0x2c]
; X86-NEXT:    kmovw 40(%ebp), %k1 # encoding: [0xc5,0xf8,0x90,0x4d,0x28]
; X86-NEXT:    vmovaps (%eax), %ymm0 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x00]
; X86-NEXT:    vfnmsub132nepbf16 %ymm3, %ymm1, %ymm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0x9e,0xd3]
; X86-NEXT:    vfnmsub132nepbf16 %ymm3, %ymm1, %ymm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0x9e,0xc3]
; X86-NEXT:    vfnmsub132nepbf16 %ymm3, %ymm2, %ymm0 # encoding: [0x62,0xf6,0x6c,0x28,0x9e,0xc3]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %msk to <16 x i1>
  %val = load <16 x bfloat>, <16 x bfloat>* %ptr
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub132nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  %res1 = select <16 x i1> %mask, <16 x bfloat> %res0, <16 x bfloat> zeroinitializer
  %t2 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub132nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %val, <16 x bfloat> %x3)
  %res2 = select <16 x i1> %mask, <16 x bfloat> %t2, <16 x bfloat> zeroinitializer
  %res3  =  call <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub132nepbf16256(<16 x bfloat> %res1, <16 x bfloat> %res2, <16 x bfloat> %x3)
  ret <16 x bfloat> %res3
}

declare <16 x bfloat> @llvm.x86.avx512bf16ne.vfmadd231nepbf16256(<16 x bfloat>, <16 x bfloat>, <16 x bfloat>)
define <16 x bfloat> @test_int_x86_avx512bf16ne_vfmadd231nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_vfmadd231nepbf16256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vfmadd231nepbf16 %ymm2, %ymm1, %ymm0 # encoding: [0x62,0xf6,0x74,0x28,0xb8,0xc2]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfmadd231nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  ret <16 x bfloat> %res
}

define <16 x bfloat> @test_int_x86_avx512bf16ne_mask_vfmadd231nepbf16256(<16 x bfloat> %src, <16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3, i16 %msk, <16 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_mask_vfmadd231nepbf16256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vfmadd231nepbf16 %ymm3, %ymm2, %ymm1 # encoding: [0x62,0xf6,0x6c,0x28,0xb8,0xcb]
; X64-NEXT:    vmovdqu16 %ymm1, %ymm0 {%k1} # encoding: [0x62,0xf1,0xff,0x29,0x6f,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_mask_vfmadd231nepbf16256:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-32, %esp # encoding: [0x83,0xe4,0xe0]
; X86-NEXT:    subl $32, %esp # encoding: [0x83,0xec,0x20]
; X86-NEXT:    kmovw 40(%ebp), %k1 # encoding: [0xc5,0xf8,0x90,0x4d,0x28]
; X86-NEXT:    vfmadd231nepbf16 8(%ebp), %ymm2, %ymm1 # encoding: [0x62,0xf6,0x6c,0x28,0xb8,0x8d,0x08,0x00,0x00,0x00]
; X86-NEXT:    vmovdqu16 %ymm1, %ymm0 {%k1} # encoding: [0x62,0xf1,0xff,0x29,0x6f,0xc1]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %msk to <16 x i1>
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfmadd231nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  %res = select <16 x i1> %mask, <16 x bfloat> %res0, <16 x bfloat> %src
  ret <16 x bfloat> %res
}

define <16 x bfloat> @test_int_x86_avx512bf16ne_maskz_vfmadd231nepbf16256(<16 x bfloat> %src, <16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3, i16 %msk, <16 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_vfmadd231nepbf16256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vmovaps (%rsi), %ymm0 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x06]
; X64-NEXT:    vfmadd231nepbf16 %ymm3, %ymm1, %ymm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0xb8,0xd3]
; X64-NEXT:    vfmadd231nepbf16 %ymm3, %ymm1, %ymm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0xb8,0xc3]
; X64-NEXT:    vfmadd231nepbf16 %ymm3, %ymm2, %ymm0 # encoding: [0x62,0xf6,0x6c,0x28,0xb8,0xc3]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_vfmadd231nepbf16256:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-32, %esp # encoding: [0x83,0xe4,0xe0]
; X86-NEXT:    subl $32, %esp # encoding: [0x83,0xec,0x20]
; X86-NEXT:    vmovaps 8(%ebp), %ymm3 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x5d,0x08]
; X86-NEXT:    movl 44(%ebp), %eax # encoding: [0x8b,0x45,0x2c]
; X86-NEXT:    kmovw 40(%ebp), %k1 # encoding: [0xc5,0xf8,0x90,0x4d,0x28]
; X86-NEXT:    vmovaps (%eax), %ymm0 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x00]
; X86-NEXT:    vfmadd231nepbf16 %ymm3, %ymm1, %ymm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0xb8,0xd3]
; X86-NEXT:    vfmadd231nepbf16 %ymm3, %ymm1, %ymm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0xb8,0xc3]
; X86-NEXT:    vfmadd231nepbf16 %ymm3, %ymm2, %ymm0 # encoding: [0x62,0xf6,0x6c,0x28,0xb8,0xc3]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %msk to <16 x i1>
  %val = load <16 x bfloat>, <16 x bfloat>* %ptr
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfmadd231nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  %res1 = select <16 x i1> %mask, <16 x bfloat> %res0, <16 x bfloat> zeroinitializer
  %t2 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfmadd231nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %val, <16 x bfloat> %x3)
  %res2 = select <16 x i1> %mask, <16 x bfloat> %t2, <16 x bfloat> zeroinitializer
  %res3  =  call <16 x bfloat> @llvm.x86.avx512bf16ne.vfmadd231nepbf16256(<16 x bfloat> %res1, <16 x bfloat> %res2, <16 x bfloat> %x3)
  ret <16 x bfloat> %res3
}

declare <16 x bfloat> @llvm.x86.avx512bf16ne.vfmsub231nepbf16256(<16 x bfloat>, <16 x bfloat>, <16 x bfloat>)
define <16 x bfloat> @test_int_x86_avx512bf16ne_vfmsub231nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_vfmsub231nepbf16256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vfmsub231nepbf16 %ymm2, %ymm1, %ymm0 # encoding: [0x62,0xf6,0x74,0x28,0xba,0xc2]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfmsub231nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  ret <16 x bfloat> %res
}

define <16 x bfloat> @test_int_x86_avx512bf16ne_mask_vfmsub231nepbf16256(<16 x bfloat> %src, <16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3, i16 %msk, <16 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_mask_vfmsub231nepbf16256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vfmsub231nepbf16 %ymm3, %ymm2, %ymm1 # encoding: [0x62,0xf6,0x6c,0x28,0xba,0xcb]
; X64-NEXT:    vmovdqu16 %ymm1, %ymm0 {%k1} # encoding: [0x62,0xf1,0xff,0x29,0x6f,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_mask_vfmsub231nepbf16256:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-32, %esp # encoding: [0x83,0xe4,0xe0]
; X86-NEXT:    subl $32, %esp # encoding: [0x83,0xec,0x20]
; X86-NEXT:    kmovw 40(%ebp), %k1 # encoding: [0xc5,0xf8,0x90,0x4d,0x28]
; X86-NEXT:    vfmsub231nepbf16 8(%ebp), %ymm2, %ymm1 # encoding: [0x62,0xf6,0x6c,0x28,0xba,0x8d,0x08,0x00,0x00,0x00]
; X86-NEXT:    vmovdqu16 %ymm1, %ymm0 {%k1} # encoding: [0x62,0xf1,0xff,0x29,0x6f,0xc1]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %msk to <16 x i1>
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfmsub231nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  %res = select <16 x i1> %mask, <16 x bfloat> %res0, <16 x bfloat> %src
  ret <16 x bfloat> %res
}

define <16 x bfloat> @test_int_x86_avx512bf16ne_maskz_vfmsub231nepbf16256(<16 x bfloat> %src, <16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3, i16 %msk, <16 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_vfmsub231nepbf16256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vmovaps (%rsi), %ymm0 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x06]
; X64-NEXT:    vfmsub231nepbf16 %ymm3, %ymm1, %ymm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0xba,0xd3]
; X64-NEXT:    vfmsub231nepbf16 %ymm3, %ymm1, %ymm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0xba,0xc3]
; X64-NEXT:    vfmsub231nepbf16 %ymm3, %ymm2, %ymm0 # encoding: [0x62,0xf6,0x6c,0x28,0xba,0xc3]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_vfmsub231nepbf16256:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-32, %esp # encoding: [0x83,0xe4,0xe0]
; X86-NEXT:    subl $32, %esp # encoding: [0x83,0xec,0x20]
; X86-NEXT:    vmovaps 8(%ebp), %ymm3 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x5d,0x08]
; X86-NEXT:    movl 44(%ebp), %eax # encoding: [0x8b,0x45,0x2c]
; X86-NEXT:    kmovw 40(%ebp), %k1 # encoding: [0xc5,0xf8,0x90,0x4d,0x28]
; X86-NEXT:    vmovaps (%eax), %ymm0 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x00]
; X86-NEXT:    vfmsub231nepbf16 %ymm3, %ymm1, %ymm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0xba,0xd3]
; X86-NEXT:    vfmsub231nepbf16 %ymm3, %ymm1, %ymm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0xba,0xc3]
; X86-NEXT:    vfmsub231nepbf16 %ymm3, %ymm2, %ymm0 # encoding: [0x62,0xf6,0x6c,0x28,0xba,0xc3]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %msk to <16 x i1>
  %val = load <16 x bfloat>, <16 x bfloat>* %ptr
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfmsub231nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  %res1 = select <16 x i1> %mask, <16 x bfloat> %res0, <16 x bfloat> zeroinitializer
  %t2 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfmsub231nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %val, <16 x bfloat> %x3)
  %res2 = select <16 x i1> %mask, <16 x bfloat> %t2, <16 x bfloat> zeroinitializer
  %res3  =  call <16 x bfloat> @llvm.x86.avx512bf16ne.vfmsub231nepbf16256(<16 x bfloat> %res1, <16 x bfloat> %res2, <16 x bfloat> %x3)
  ret <16 x bfloat> %res3
}

declare <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd231nepbf16256(<16 x bfloat>, <16 x bfloat>, <16 x bfloat>)
define <16 x bfloat> @test_int_x86_avx512bf16ne_vfnmadd231nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_vfnmadd231nepbf16256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vfnmadd231nepbf16 %ymm2, %ymm1, %ymm0 # encoding: [0x62,0xf6,0x74,0x28,0xbc,0xc2]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd231nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  ret <16 x bfloat> %res
}

define <16 x bfloat> @test_int_x86_avx512bf16ne_mask_vfnmadd231nepbf16256(<16 x bfloat> %src, <16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3, i16 %msk, <16 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_mask_vfnmadd231nepbf16256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vfnmadd231nepbf16 %ymm3, %ymm2, %ymm1 # encoding: [0x62,0xf6,0x6c,0x28,0xbc,0xcb]
; X64-NEXT:    vmovdqu16 %ymm1, %ymm0 {%k1} # encoding: [0x62,0xf1,0xff,0x29,0x6f,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_mask_vfnmadd231nepbf16256:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-32, %esp # encoding: [0x83,0xe4,0xe0]
; X86-NEXT:    subl $32, %esp # encoding: [0x83,0xec,0x20]
; X86-NEXT:    kmovw 40(%ebp), %k1 # encoding: [0xc5,0xf8,0x90,0x4d,0x28]
; X86-NEXT:    vfnmadd231nepbf16 8(%ebp), %ymm2, %ymm1 # encoding: [0x62,0xf6,0x6c,0x28,0xbc,0x8d,0x08,0x00,0x00,0x00]
; X86-NEXT:    vmovdqu16 %ymm1, %ymm0 {%k1} # encoding: [0x62,0xf1,0xff,0x29,0x6f,0xc1]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %msk to <16 x i1>
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd231nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  %res = select <16 x i1> %mask, <16 x bfloat> %res0, <16 x bfloat> %src
  ret <16 x bfloat> %res
}

define <16 x bfloat> @test_int_x86_avx512bf16ne_maskz_vfnmadd231nepbf16256(<16 x bfloat> %src, <16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3, i16 %msk, <16 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_vfnmadd231nepbf16256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vmovaps (%rsi), %ymm0 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x06]
; X64-NEXT:    vfnmadd231nepbf16 %ymm3, %ymm1, %ymm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0xbc,0xd3]
; X64-NEXT:    vfnmadd231nepbf16 %ymm3, %ymm1, %ymm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0xbc,0xc3]
; X64-NEXT:    vfnmadd231nepbf16 %ymm3, %ymm2, %ymm0 # encoding: [0x62,0xf6,0x6c,0x28,0xbc,0xc3]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_vfnmadd231nepbf16256:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-32, %esp # encoding: [0x83,0xe4,0xe0]
; X86-NEXT:    subl $32, %esp # encoding: [0x83,0xec,0x20]
; X86-NEXT:    vmovaps 8(%ebp), %ymm3 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x5d,0x08]
; X86-NEXT:    movl 44(%ebp), %eax # encoding: [0x8b,0x45,0x2c]
; X86-NEXT:    kmovw 40(%ebp), %k1 # encoding: [0xc5,0xf8,0x90,0x4d,0x28]
; X86-NEXT:    vmovaps (%eax), %ymm0 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x00]
; X86-NEXT:    vfnmadd231nepbf16 %ymm3, %ymm1, %ymm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0xbc,0xd3]
; X86-NEXT:    vfnmadd231nepbf16 %ymm3, %ymm1, %ymm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0xbc,0xc3]
; X86-NEXT:    vfnmadd231nepbf16 %ymm3, %ymm2, %ymm0 # encoding: [0x62,0xf6,0x6c,0x28,0xbc,0xc3]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %msk to <16 x i1>
  %val = load <16 x bfloat>, <16 x bfloat>* %ptr
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd231nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  %res1 = select <16 x i1> %mask, <16 x bfloat> %res0, <16 x bfloat> zeroinitializer
  %t2 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd231nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %val, <16 x bfloat> %x3)
  %res2 = select <16 x i1> %mask, <16 x bfloat> %t2, <16 x bfloat> zeroinitializer
  %res3  =  call <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd231nepbf16256(<16 x bfloat> %res1, <16 x bfloat> %res2, <16 x bfloat> %x3)
  ret <16 x bfloat> %res3
}

declare <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub231nepbf16256(<16 x bfloat>, <16 x bfloat>, <16 x bfloat>)
define <16 x bfloat> @test_int_x86_avx512bf16ne_vfnmsub231nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_vfnmsub231nepbf16256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vfnmsub231nepbf16 %ymm2, %ymm1, %ymm0 # encoding: [0x62,0xf6,0x74,0x28,0xbe,0xc2]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub231nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  ret <16 x bfloat> %res
}

define <16 x bfloat> @test_int_x86_avx512bf16ne_mask_vfnmsub231nepbf16256(<16 x bfloat> %src, <16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3, i16 %msk, <16 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_mask_vfnmsub231nepbf16256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vfnmsub231nepbf16 %ymm3, %ymm2, %ymm1 # encoding: [0x62,0xf6,0x6c,0x28,0xbe,0xcb]
; X64-NEXT:    vmovdqu16 %ymm1, %ymm0 {%k1} # encoding: [0x62,0xf1,0xff,0x29,0x6f,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_mask_vfnmsub231nepbf16256:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-32, %esp # encoding: [0x83,0xe4,0xe0]
; X86-NEXT:    subl $32, %esp # encoding: [0x83,0xec,0x20]
; X86-NEXT:    kmovw 40(%ebp), %k1 # encoding: [0xc5,0xf8,0x90,0x4d,0x28]
; X86-NEXT:    vfnmsub231nepbf16 8(%ebp), %ymm2, %ymm1 # encoding: [0x62,0xf6,0x6c,0x28,0xbe,0x8d,0x08,0x00,0x00,0x00]
; X86-NEXT:    vmovdqu16 %ymm1, %ymm0 {%k1} # encoding: [0x62,0xf1,0xff,0x29,0x6f,0xc1]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %msk to <16 x i1>
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub231nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  %res = select <16 x i1> %mask, <16 x bfloat> %res0, <16 x bfloat> %src
  ret <16 x bfloat> %res
}

define <16 x bfloat> @test_int_x86_avx512bf16ne_maskz_vfnmsub231nepbf16256(<16 x bfloat> %src, <16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3, i16 %msk, <16 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_vfnmsub231nepbf16256:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vmovaps (%rsi), %ymm0 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x06]
; X64-NEXT:    vfnmsub231nepbf16 %ymm3, %ymm1, %ymm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0xbe,0xd3]
; X64-NEXT:    vfnmsub231nepbf16 %ymm3, %ymm1, %ymm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0xbe,0xc3]
; X64-NEXT:    vfnmsub231nepbf16 %ymm3, %ymm2, %ymm0 # encoding: [0x62,0xf6,0x6c,0x28,0xbe,0xc3]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_vfnmsub231nepbf16256:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-32, %esp # encoding: [0x83,0xe4,0xe0]
; X86-NEXT:    subl $32, %esp # encoding: [0x83,0xec,0x20]
; X86-NEXT:    vmovaps 8(%ebp), %ymm3 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x5d,0x08]
; X86-NEXT:    movl 44(%ebp), %eax # encoding: [0x8b,0x45,0x2c]
; X86-NEXT:    kmovw 40(%ebp), %k1 # encoding: [0xc5,0xf8,0x90,0x4d,0x28]
; X86-NEXT:    vmovaps (%eax), %ymm0 # EVEX TO VEX Compression encoding: [0xc5,0xfc,0x28,0x00]
; X86-NEXT:    vfnmsub231nepbf16 %ymm3, %ymm1, %ymm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0xbe,0xd3]
; X86-NEXT:    vfnmsub231nepbf16 %ymm3, %ymm1, %ymm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0xa9,0xbe,0xc3]
; X86-NEXT:    vfnmsub231nepbf16 %ymm3, %ymm2, %ymm0 # encoding: [0x62,0xf6,0x6c,0x28,0xbe,0xc3]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i16 %msk to <16 x i1>
  %val = load <16 x bfloat>, <16 x bfloat>* %ptr
  %res0 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub231nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %x2, <16 x bfloat> %x3)
  %res1 = select <16 x i1> %mask, <16 x bfloat> %res0, <16 x bfloat> zeroinitializer
  %t2 = call <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub231nepbf16256(<16 x bfloat> %x1, <16 x bfloat> %val, <16 x bfloat> %x3)
  %res2 = select <16 x i1> %mask, <16 x bfloat> %t2, <16 x bfloat> zeroinitializer
  %res3  =  call <16 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub231nepbf16256(<16 x bfloat> %res1, <16 x bfloat> %res2, <16 x bfloat> %x3)
  ret <16 x bfloat> %res3
}

declare <8 x bfloat> @llvm.x86.avx512bf16ne.vfmadd213nepbf16128(<8 x bfloat>, <8 x bfloat>, <8 x bfloat>)
define <8 x bfloat> @test_int_x86_avx512bf16ne_vfmadd213nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_vfmadd213nepbf16128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vfmadd213nepbf16 %xmm2, %xmm1, %xmm0 # encoding: [0x62,0xf6,0x74,0x08,0xa8,0xc2]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfmadd213nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  ret <8 x bfloat> %res
}

define <8 x bfloat> @test_int_x86_avx512bf16ne_mask_vfmadd213nepbf16128(<8 x bfloat> %src, <8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3, i8 %msk, <8 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_mask_vfmadd213nepbf16128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vfmadd213nepbf16 %xmm3, %xmm2, %xmm1 # encoding: [0x62,0xf6,0x6c,0x08,0xa8,0xcb]
; X64-NEXT:    vmovdqu16 %xmm1, %xmm0 {%k1} # encoding: [0x62,0xf1,0xff,0x09,0x6f,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_mask_vfmadd213nepbf16128:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-16, %esp # encoding: [0x83,0xe4,0xf0]
; X86-NEXT:    subl $16, %esp # encoding: [0x83,0xec,0x10]
; X86-NEXT:    kmovb 24(%ebp), %k1 # encoding: [0xc5,0xf9,0x90,0x4d,0x18]
; X86-NEXT:    vfmadd213nepbf16 8(%ebp), %xmm2, %xmm1 # encoding: [0x62,0xf6,0x6c,0x08,0xa8,0x8d,0x08,0x00,0x00,0x00]
; X86-NEXT:    vmovdqu16 %xmm1, %xmm0 {%k1} # encoding: [0x62,0xf1,0xff,0x09,0x6f,0xc1]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %msk to <8 x i1>
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfmadd213nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  %res = select <8 x i1> %mask, <8 x bfloat> %res0, <8 x bfloat> %src
  ret <8 x bfloat> %res
}

define <8 x bfloat> @test_int_x86_avx512bf16ne_maskz_vfmadd213nepbf16128(<8 x bfloat> %src, <8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3, i8 %msk, <8 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_vfmadd213nepbf16128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vmovaps (%rsi), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x06]
; X64-NEXT:    vfmadd213nepbf16 %xmm3, %xmm1, %xmm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0xa8,0xd3]
; X64-NEXT:    vfmadd213nepbf16 %xmm3, %xmm1, %xmm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0xa8,0xc3]
; X64-NEXT:    vfmadd213nepbf16 %xmm3, %xmm2, %xmm0 # encoding: [0x62,0xf6,0x6c,0x08,0xa8,0xc3]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_vfmadd213nepbf16128:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-16, %esp # encoding: [0x83,0xe4,0xf0]
; X86-NEXT:    subl $16, %esp # encoding: [0x83,0xec,0x10]
; X86-NEXT:    vmovaps 8(%ebp), %xmm3 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x5d,0x08]
; X86-NEXT:    movl 28(%ebp), %eax # encoding: [0x8b,0x45,0x1c]
; X86-NEXT:    kmovb 24(%ebp), %k1 # encoding: [0xc5,0xf9,0x90,0x4d,0x18]
; X86-NEXT:    vmovaps (%eax), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x00]
; X86-NEXT:    vfmadd213nepbf16 %xmm3, %xmm1, %xmm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0xa8,0xd3]
; X86-NEXT:    vfmadd213nepbf16 %xmm3, %xmm1, %xmm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0xa8,0xc3]
; X86-NEXT:    vfmadd213nepbf16 %xmm3, %xmm2, %xmm0 # encoding: [0x62,0xf6,0x6c,0x08,0xa8,0xc3]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %msk to <8 x i1>
  %val = load <8 x bfloat>, <8 x bfloat>* %ptr
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfmadd213nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  %res1 = select <8 x i1> %mask, <8 x bfloat> %res0, <8 x bfloat> zeroinitializer
  %t2 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfmadd213nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %val, <8 x bfloat> %x3)
  %res2 = select <8 x i1> %mask, <8 x bfloat> %t2, <8 x bfloat> zeroinitializer
  %res3  =  call <8 x bfloat> @llvm.x86.avx512bf16ne.vfmadd213nepbf16128(<8 x bfloat> %res1, <8 x bfloat> %res2, <8 x bfloat> %x3)
  ret <8 x bfloat> %res3
}

declare <8 x bfloat> @llvm.x86.avx512bf16ne.vfmsub213nepbf16128(<8 x bfloat>, <8 x bfloat>, <8 x bfloat>)
define <8 x bfloat> @test_int_x86_avx512bf16ne_vfmsub213nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_vfmsub213nepbf16128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vfmsub213nepbf16 %xmm2, %xmm1, %xmm0 # encoding: [0x62,0xf6,0x74,0x08,0xaa,0xc2]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfmsub213nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  ret <8 x bfloat> %res
}

define <8 x bfloat> @test_int_x86_avx512bf16ne_mask_vfmsub213nepbf16128(<8 x bfloat> %src, <8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3, i8 %msk, <8 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_mask_vfmsub213nepbf16128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vfmsub213nepbf16 %xmm3, %xmm2, %xmm1 # encoding: [0x62,0xf6,0x6c,0x08,0xaa,0xcb]
; X64-NEXT:    vmovdqu16 %xmm1, %xmm0 {%k1} # encoding: [0x62,0xf1,0xff,0x09,0x6f,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_mask_vfmsub213nepbf16128:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-16, %esp # encoding: [0x83,0xe4,0xf0]
; X86-NEXT:    subl $16, %esp # encoding: [0x83,0xec,0x10]
; X86-NEXT:    kmovb 24(%ebp), %k1 # encoding: [0xc5,0xf9,0x90,0x4d,0x18]
; X86-NEXT:    vfmsub213nepbf16 8(%ebp), %xmm2, %xmm1 # encoding: [0x62,0xf6,0x6c,0x08,0xaa,0x8d,0x08,0x00,0x00,0x00]
; X86-NEXT:    vmovdqu16 %xmm1, %xmm0 {%k1} # encoding: [0x62,0xf1,0xff,0x09,0x6f,0xc1]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %msk to <8 x i1>
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfmsub213nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  %res = select <8 x i1> %mask, <8 x bfloat> %res0, <8 x bfloat> %src
  ret <8 x bfloat> %res
}

define <8 x bfloat> @test_int_x86_avx512bf16ne_maskz_vfmsub213nepbf16128(<8 x bfloat> %src, <8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3, i8 %msk, <8 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_vfmsub213nepbf16128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vmovaps (%rsi), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x06]
; X64-NEXT:    vfmsub213nepbf16 %xmm3, %xmm1, %xmm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0xaa,0xd3]
; X64-NEXT:    vfmsub213nepbf16 %xmm3, %xmm1, %xmm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0xaa,0xc3]
; X64-NEXT:    vfmsub213nepbf16 %xmm3, %xmm2, %xmm0 # encoding: [0x62,0xf6,0x6c,0x08,0xaa,0xc3]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_vfmsub213nepbf16128:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-16, %esp # encoding: [0x83,0xe4,0xf0]
; X86-NEXT:    subl $16, %esp # encoding: [0x83,0xec,0x10]
; X86-NEXT:    vmovaps 8(%ebp), %xmm3 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x5d,0x08]
; X86-NEXT:    movl 28(%ebp), %eax # encoding: [0x8b,0x45,0x1c]
; X86-NEXT:    kmovb 24(%ebp), %k1 # encoding: [0xc5,0xf9,0x90,0x4d,0x18]
; X86-NEXT:    vmovaps (%eax), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x00]
; X86-NEXT:    vfmsub213nepbf16 %xmm3, %xmm1, %xmm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0xaa,0xd3]
; X86-NEXT:    vfmsub213nepbf16 %xmm3, %xmm1, %xmm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0xaa,0xc3]
; X86-NEXT:    vfmsub213nepbf16 %xmm3, %xmm2, %xmm0 # encoding: [0x62,0xf6,0x6c,0x08,0xaa,0xc3]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %msk to <8 x i1>
  %val = load <8 x bfloat>, <8 x bfloat>* %ptr
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfmsub213nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  %res1 = select <8 x i1> %mask, <8 x bfloat> %res0, <8 x bfloat> zeroinitializer
  %t2 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfmsub213nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %val, <8 x bfloat> %x3)
  %res2 = select <8 x i1> %mask, <8 x bfloat> %t2, <8 x bfloat> zeroinitializer
  %res3  =  call <8 x bfloat> @llvm.x86.avx512bf16ne.vfmsub213nepbf16128(<8 x bfloat> %res1, <8 x bfloat> %res2, <8 x bfloat> %x3)
  ret <8 x bfloat> %res3
}

declare <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd213nepbf16128(<8 x bfloat>, <8 x bfloat>, <8 x bfloat>)
define <8 x bfloat> @test_int_x86_avx512bf16ne_vfnmadd213nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_vfnmadd213nepbf16128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vfnmadd213nepbf16 %xmm2, %xmm1, %xmm0 # encoding: [0x62,0xf6,0x74,0x08,0xac,0xc2]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd213nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  ret <8 x bfloat> %res
}

define <8 x bfloat> @test_int_x86_avx512bf16ne_mask_vfnmadd213nepbf16128(<8 x bfloat> %src, <8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3, i8 %msk, <8 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_mask_vfnmadd213nepbf16128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vfnmadd213nepbf16 %xmm3, %xmm2, %xmm1 # encoding: [0x62,0xf6,0x6c,0x08,0xac,0xcb]
; X64-NEXT:    vmovdqu16 %xmm1, %xmm0 {%k1} # encoding: [0x62,0xf1,0xff,0x09,0x6f,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_mask_vfnmadd213nepbf16128:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-16, %esp # encoding: [0x83,0xe4,0xf0]
; X86-NEXT:    subl $16, %esp # encoding: [0x83,0xec,0x10]
; X86-NEXT:    kmovb 24(%ebp), %k1 # encoding: [0xc5,0xf9,0x90,0x4d,0x18]
; X86-NEXT:    vfnmadd213nepbf16 8(%ebp), %xmm2, %xmm1 # encoding: [0x62,0xf6,0x6c,0x08,0xac,0x8d,0x08,0x00,0x00,0x00]
; X86-NEXT:    vmovdqu16 %xmm1, %xmm0 {%k1} # encoding: [0x62,0xf1,0xff,0x09,0x6f,0xc1]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %msk to <8 x i1>
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd213nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  %res = select <8 x i1> %mask, <8 x bfloat> %res0, <8 x bfloat> %src
  ret <8 x bfloat> %res
}

define <8 x bfloat> @test_int_x86_avx512bf16ne_maskz_vfnmadd213nepbf16128(<8 x bfloat> %src, <8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3, i8 %msk, <8 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_vfnmadd213nepbf16128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vmovaps (%rsi), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x06]
; X64-NEXT:    vfnmadd213nepbf16 %xmm3, %xmm1, %xmm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0xac,0xd3]
; X64-NEXT:    vfnmadd213nepbf16 %xmm3, %xmm1, %xmm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0xac,0xc3]
; X64-NEXT:    vfnmadd213nepbf16 %xmm3, %xmm2, %xmm0 # encoding: [0x62,0xf6,0x6c,0x08,0xac,0xc3]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_vfnmadd213nepbf16128:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-16, %esp # encoding: [0x83,0xe4,0xf0]
; X86-NEXT:    subl $16, %esp # encoding: [0x83,0xec,0x10]
; X86-NEXT:    vmovaps 8(%ebp), %xmm3 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x5d,0x08]
; X86-NEXT:    movl 28(%ebp), %eax # encoding: [0x8b,0x45,0x1c]
; X86-NEXT:    kmovb 24(%ebp), %k1 # encoding: [0xc5,0xf9,0x90,0x4d,0x18]
; X86-NEXT:    vmovaps (%eax), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x00]
; X86-NEXT:    vfnmadd213nepbf16 %xmm3, %xmm1, %xmm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0xac,0xd3]
; X86-NEXT:    vfnmadd213nepbf16 %xmm3, %xmm1, %xmm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0xac,0xc3]
; X86-NEXT:    vfnmadd213nepbf16 %xmm3, %xmm2, %xmm0 # encoding: [0x62,0xf6,0x6c,0x08,0xac,0xc3]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %msk to <8 x i1>
  %val = load <8 x bfloat>, <8 x bfloat>* %ptr
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd213nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  %res1 = select <8 x i1> %mask, <8 x bfloat> %res0, <8 x bfloat> zeroinitializer
  %t2 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd213nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %val, <8 x bfloat> %x3)
  %res2 = select <8 x i1> %mask, <8 x bfloat> %t2, <8 x bfloat> zeroinitializer
  %res3  =  call <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd213nepbf16128(<8 x bfloat> %res1, <8 x bfloat> %res2, <8 x bfloat> %x3)
  ret <8 x bfloat> %res3
}

declare <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub213nepbf16128(<8 x bfloat>, <8 x bfloat>, <8 x bfloat>)
define <8 x bfloat> @test_int_x86_avx512bf16ne_vfnmsub213nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_vfnmsub213nepbf16128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vfnmsub213nepbf16 %xmm2, %xmm1, %xmm0 # encoding: [0x62,0xf6,0x74,0x08,0xae,0xc2]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub213nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  ret <8 x bfloat> %res
}

define <8 x bfloat> @test_int_x86_avx512bf16ne_mask_vfnmsub213nepbf16128(<8 x bfloat> %src, <8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3, i8 %msk, <8 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_mask_vfnmsub213nepbf16128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vfnmsub213nepbf16 %xmm3, %xmm2, %xmm1 # encoding: [0x62,0xf6,0x6c,0x08,0xae,0xcb]
; X64-NEXT:    vmovdqu16 %xmm1, %xmm0 {%k1} # encoding: [0x62,0xf1,0xff,0x09,0x6f,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_mask_vfnmsub213nepbf16128:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-16, %esp # encoding: [0x83,0xe4,0xf0]
; X86-NEXT:    subl $16, %esp # encoding: [0x83,0xec,0x10]
; X86-NEXT:    kmovb 24(%ebp), %k1 # encoding: [0xc5,0xf9,0x90,0x4d,0x18]
; X86-NEXT:    vfnmsub213nepbf16 8(%ebp), %xmm2, %xmm1 # encoding: [0x62,0xf6,0x6c,0x08,0xae,0x8d,0x08,0x00,0x00,0x00]
; X86-NEXT:    vmovdqu16 %xmm1, %xmm0 {%k1} # encoding: [0x62,0xf1,0xff,0x09,0x6f,0xc1]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %msk to <8 x i1>
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub213nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  %res = select <8 x i1> %mask, <8 x bfloat> %res0, <8 x bfloat> %src
  ret <8 x bfloat> %res
}

define <8 x bfloat> @test_int_x86_avx512bf16ne_maskz_vfnmsub213nepbf16128(<8 x bfloat> %src, <8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3, i8 %msk, <8 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_vfnmsub213nepbf16128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vmovaps (%rsi), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x06]
; X64-NEXT:    vfnmsub213nepbf16 %xmm3, %xmm1, %xmm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0xae,0xd3]
; X64-NEXT:    vfnmsub213nepbf16 %xmm3, %xmm1, %xmm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0xae,0xc3]
; X64-NEXT:    vfnmsub213nepbf16 %xmm3, %xmm2, %xmm0 # encoding: [0x62,0xf6,0x6c,0x08,0xae,0xc3]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_vfnmsub213nepbf16128:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-16, %esp # encoding: [0x83,0xe4,0xf0]
; X86-NEXT:    subl $16, %esp # encoding: [0x83,0xec,0x10]
; X86-NEXT:    vmovaps 8(%ebp), %xmm3 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x5d,0x08]
; X86-NEXT:    movl 28(%ebp), %eax # encoding: [0x8b,0x45,0x1c]
; X86-NEXT:    kmovb 24(%ebp), %k1 # encoding: [0xc5,0xf9,0x90,0x4d,0x18]
; X86-NEXT:    vmovaps (%eax), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x00]
; X86-NEXT:    vfnmsub213nepbf16 %xmm3, %xmm1, %xmm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0xae,0xd3]
; X86-NEXT:    vfnmsub213nepbf16 %xmm3, %xmm1, %xmm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0xae,0xc3]
; X86-NEXT:    vfnmsub213nepbf16 %xmm3, %xmm2, %xmm0 # encoding: [0x62,0xf6,0x6c,0x08,0xae,0xc3]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %msk to <8 x i1>
  %val = load <8 x bfloat>, <8 x bfloat>* %ptr
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub213nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  %res1 = select <8 x i1> %mask, <8 x bfloat> %res0, <8 x bfloat> zeroinitializer
  %t2 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub213nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %val, <8 x bfloat> %x3)
  %res2 = select <8 x i1> %mask, <8 x bfloat> %t2, <8 x bfloat> zeroinitializer
  %res3  =  call <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub213nepbf16128(<8 x bfloat> %res1, <8 x bfloat> %res2, <8 x bfloat> %x3)
  ret <8 x bfloat> %res3
}

declare <8 x bfloat> @llvm.x86.avx512bf16ne.vfmadd132nepbf16128(<8 x bfloat>, <8 x bfloat>, <8 x bfloat>)
define <8 x bfloat> @test_int_x86_avx512bf16ne_vfmadd132nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_vfmadd132nepbf16128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vfmadd132nepbf16 %xmm2, %xmm1, %xmm0 # encoding: [0x62,0xf6,0x74,0x08,0x98,0xc2]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfmadd132nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  ret <8 x bfloat> %res
}

define <8 x bfloat> @test_int_x86_avx512bf16ne_mask_vfmadd132nepbf16128(<8 x bfloat> %src, <8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3, i8 %msk, <8 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_mask_vfmadd132nepbf16128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vfmadd132nepbf16 %xmm3, %xmm2, %xmm1 # encoding: [0x62,0xf6,0x6c,0x08,0x98,0xcb]
; X64-NEXT:    vmovdqu16 %xmm1, %xmm0 {%k1} # encoding: [0x62,0xf1,0xff,0x09,0x6f,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_mask_vfmadd132nepbf16128:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-16, %esp # encoding: [0x83,0xe4,0xf0]
; X86-NEXT:    subl $16, %esp # encoding: [0x83,0xec,0x10]
; X86-NEXT:    kmovb 24(%ebp), %k1 # encoding: [0xc5,0xf9,0x90,0x4d,0x18]
; X86-NEXT:    vfmadd132nepbf16 8(%ebp), %xmm2, %xmm1 # encoding: [0x62,0xf6,0x6c,0x08,0x98,0x8d,0x08,0x00,0x00,0x00]
; X86-NEXT:    vmovdqu16 %xmm1, %xmm0 {%k1} # encoding: [0x62,0xf1,0xff,0x09,0x6f,0xc1]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %msk to <8 x i1>
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfmadd132nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  %res = select <8 x i1> %mask, <8 x bfloat> %res0, <8 x bfloat> %src
  ret <8 x bfloat> %res
}

define <8 x bfloat> @test_int_x86_avx512bf16ne_maskz_vfmadd132nepbf16128(<8 x bfloat> %src, <8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3, i8 %msk, <8 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_vfmadd132nepbf16128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vmovaps (%rsi), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x06]
; X64-NEXT:    vfmadd132nepbf16 %xmm3, %xmm1, %xmm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0x98,0xd3]
; X64-NEXT:    vfmadd132nepbf16 %xmm3, %xmm1, %xmm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0x98,0xc3]
; X64-NEXT:    vfmadd132nepbf16 %xmm3, %xmm2, %xmm0 # encoding: [0x62,0xf6,0x6c,0x08,0x98,0xc3]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_vfmadd132nepbf16128:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-16, %esp # encoding: [0x83,0xe4,0xf0]
; X86-NEXT:    subl $16, %esp # encoding: [0x83,0xec,0x10]
; X86-NEXT:    vmovaps 8(%ebp), %xmm3 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x5d,0x08]
; X86-NEXT:    movl 28(%ebp), %eax # encoding: [0x8b,0x45,0x1c]
; X86-NEXT:    kmovb 24(%ebp), %k1 # encoding: [0xc5,0xf9,0x90,0x4d,0x18]
; X86-NEXT:    vmovaps (%eax), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x00]
; X86-NEXT:    vfmadd132nepbf16 %xmm3, %xmm1, %xmm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0x98,0xd3]
; X86-NEXT:    vfmadd132nepbf16 %xmm3, %xmm1, %xmm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0x98,0xc3]
; X86-NEXT:    vfmadd132nepbf16 %xmm3, %xmm2, %xmm0 # encoding: [0x62,0xf6,0x6c,0x08,0x98,0xc3]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %msk to <8 x i1>
  %val = load <8 x bfloat>, <8 x bfloat>* %ptr
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfmadd132nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  %res1 = select <8 x i1> %mask, <8 x bfloat> %res0, <8 x bfloat> zeroinitializer
  %t2 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfmadd132nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %val, <8 x bfloat> %x3)
  %res2 = select <8 x i1> %mask, <8 x bfloat> %t2, <8 x bfloat> zeroinitializer
  %res3  =  call <8 x bfloat> @llvm.x86.avx512bf16ne.vfmadd132nepbf16128(<8 x bfloat> %res1, <8 x bfloat> %res2, <8 x bfloat> %x3)
  ret <8 x bfloat> %res3
}

declare <8 x bfloat> @llvm.x86.avx512bf16ne.vfmsub132nepbf16128(<8 x bfloat>, <8 x bfloat>, <8 x bfloat>)
define <8 x bfloat> @test_int_x86_avx512bf16ne_vfmsub132nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_vfmsub132nepbf16128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vfmsub132nepbf16 %xmm2, %xmm1, %xmm0 # encoding: [0x62,0xf6,0x74,0x08,0x9a,0xc2]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfmsub132nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  ret <8 x bfloat> %res
}

define <8 x bfloat> @test_int_x86_avx512bf16ne_mask_vfmsub132nepbf16128(<8 x bfloat> %src, <8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3, i8 %msk, <8 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_mask_vfmsub132nepbf16128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vfmsub132nepbf16 %xmm3, %xmm2, %xmm1 # encoding: [0x62,0xf6,0x6c,0x08,0x9a,0xcb]
; X64-NEXT:    vmovdqu16 %xmm1, %xmm0 {%k1} # encoding: [0x62,0xf1,0xff,0x09,0x6f,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_mask_vfmsub132nepbf16128:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-16, %esp # encoding: [0x83,0xe4,0xf0]
; X86-NEXT:    subl $16, %esp # encoding: [0x83,0xec,0x10]
; X86-NEXT:    kmovb 24(%ebp), %k1 # encoding: [0xc5,0xf9,0x90,0x4d,0x18]
; X86-NEXT:    vfmsub132nepbf16 8(%ebp), %xmm2, %xmm1 # encoding: [0x62,0xf6,0x6c,0x08,0x9a,0x8d,0x08,0x00,0x00,0x00]
; X86-NEXT:    vmovdqu16 %xmm1, %xmm0 {%k1} # encoding: [0x62,0xf1,0xff,0x09,0x6f,0xc1]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %msk to <8 x i1>
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfmsub132nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  %res = select <8 x i1> %mask, <8 x bfloat> %res0, <8 x bfloat> %src
  ret <8 x bfloat> %res
}

define <8 x bfloat> @test_int_x86_avx512bf16ne_maskz_vfmsub132nepbf16128(<8 x bfloat> %src, <8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3, i8 %msk, <8 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_vfmsub132nepbf16128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vmovaps (%rsi), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x06]
; X64-NEXT:    vfmsub132nepbf16 %xmm3, %xmm1, %xmm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0x9a,0xd3]
; X64-NEXT:    vfmsub132nepbf16 %xmm3, %xmm1, %xmm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0x9a,0xc3]
; X64-NEXT:    vfmsub132nepbf16 %xmm3, %xmm2, %xmm0 # encoding: [0x62,0xf6,0x6c,0x08,0x9a,0xc3]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_vfmsub132nepbf16128:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-16, %esp # encoding: [0x83,0xe4,0xf0]
; X86-NEXT:    subl $16, %esp # encoding: [0x83,0xec,0x10]
; X86-NEXT:    vmovaps 8(%ebp), %xmm3 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x5d,0x08]
; X86-NEXT:    movl 28(%ebp), %eax # encoding: [0x8b,0x45,0x1c]
; X86-NEXT:    kmovb 24(%ebp), %k1 # encoding: [0xc5,0xf9,0x90,0x4d,0x18]
; X86-NEXT:    vmovaps (%eax), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x00]
; X86-NEXT:    vfmsub132nepbf16 %xmm3, %xmm1, %xmm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0x9a,0xd3]
; X86-NEXT:    vfmsub132nepbf16 %xmm3, %xmm1, %xmm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0x9a,0xc3]
; X86-NEXT:    vfmsub132nepbf16 %xmm3, %xmm2, %xmm0 # encoding: [0x62,0xf6,0x6c,0x08,0x9a,0xc3]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %msk to <8 x i1>
  %val = load <8 x bfloat>, <8 x bfloat>* %ptr
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfmsub132nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  %res1 = select <8 x i1> %mask, <8 x bfloat> %res0, <8 x bfloat> zeroinitializer
  %t2 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfmsub132nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %val, <8 x bfloat> %x3)
  %res2 = select <8 x i1> %mask, <8 x bfloat> %t2, <8 x bfloat> zeroinitializer
  %res3  =  call <8 x bfloat> @llvm.x86.avx512bf16ne.vfmsub132nepbf16128(<8 x bfloat> %res1, <8 x bfloat> %res2, <8 x bfloat> %x3)
  ret <8 x bfloat> %res3
}

declare <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd132nepbf16128(<8 x bfloat>, <8 x bfloat>, <8 x bfloat>)
define <8 x bfloat> @test_int_x86_avx512bf16ne_vfnmadd132nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_vfnmadd132nepbf16128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vfnmadd132nepbf16 %xmm2, %xmm1, %xmm0 # encoding: [0x62,0xf6,0x74,0x08,0x9c,0xc2]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd132nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  ret <8 x bfloat> %res
}

define <8 x bfloat> @test_int_x86_avx512bf16ne_mask_vfnmadd132nepbf16128(<8 x bfloat> %src, <8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3, i8 %msk, <8 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_mask_vfnmadd132nepbf16128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vfnmadd132nepbf16 %xmm3, %xmm2, %xmm1 # encoding: [0x62,0xf6,0x6c,0x08,0x9c,0xcb]
; X64-NEXT:    vmovdqu16 %xmm1, %xmm0 {%k1} # encoding: [0x62,0xf1,0xff,0x09,0x6f,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_mask_vfnmadd132nepbf16128:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-16, %esp # encoding: [0x83,0xe4,0xf0]
; X86-NEXT:    subl $16, %esp # encoding: [0x83,0xec,0x10]
; X86-NEXT:    kmovb 24(%ebp), %k1 # encoding: [0xc5,0xf9,0x90,0x4d,0x18]
; X86-NEXT:    vfnmadd132nepbf16 8(%ebp), %xmm2, %xmm1 # encoding: [0x62,0xf6,0x6c,0x08,0x9c,0x8d,0x08,0x00,0x00,0x00]
; X86-NEXT:    vmovdqu16 %xmm1, %xmm0 {%k1} # encoding: [0x62,0xf1,0xff,0x09,0x6f,0xc1]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %msk to <8 x i1>
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd132nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  %res = select <8 x i1> %mask, <8 x bfloat> %res0, <8 x bfloat> %src
  ret <8 x bfloat> %res
}

define <8 x bfloat> @test_int_x86_avx512bf16ne_maskz_vfnmadd132nepbf16128(<8 x bfloat> %src, <8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3, i8 %msk, <8 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_vfnmadd132nepbf16128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vmovaps (%rsi), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x06]
; X64-NEXT:    vfnmadd132nepbf16 %xmm3, %xmm1, %xmm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0x9c,0xd3]
; X64-NEXT:    vfnmadd132nepbf16 %xmm3, %xmm1, %xmm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0x9c,0xc3]
; X64-NEXT:    vfnmadd132nepbf16 %xmm3, %xmm2, %xmm0 # encoding: [0x62,0xf6,0x6c,0x08,0x9c,0xc3]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_vfnmadd132nepbf16128:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-16, %esp # encoding: [0x83,0xe4,0xf0]
; X86-NEXT:    subl $16, %esp # encoding: [0x83,0xec,0x10]
; X86-NEXT:    vmovaps 8(%ebp), %xmm3 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x5d,0x08]
; X86-NEXT:    movl 28(%ebp), %eax # encoding: [0x8b,0x45,0x1c]
; X86-NEXT:    kmovb 24(%ebp), %k1 # encoding: [0xc5,0xf9,0x90,0x4d,0x18]
; X86-NEXT:    vmovaps (%eax), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x00]
; X86-NEXT:    vfnmadd132nepbf16 %xmm3, %xmm1, %xmm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0x9c,0xd3]
; X86-NEXT:    vfnmadd132nepbf16 %xmm3, %xmm1, %xmm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0x9c,0xc3]
; X86-NEXT:    vfnmadd132nepbf16 %xmm3, %xmm2, %xmm0 # encoding: [0x62,0xf6,0x6c,0x08,0x9c,0xc3]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %msk to <8 x i1>
  %val = load <8 x bfloat>, <8 x bfloat>* %ptr
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd132nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  %res1 = select <8 x i1> %mask, <8 x bfloat> %res0, <8 x bfloat> zeroinitializer
  %t2 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd132nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %val, <8 x bfloat> %x3)
  %res2 = select <8 x i1> %mask, <8 x bfloat> %t2, <8 x bfloat> zeroinitializer
  %res3  =  call <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd132nepbf16128(<8 x bfloat> %res1, <8 x bfloat> %res2, <8 x bfloat> %x3)
  ret <8 x bfloat> %res3
}

declare <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub132nepbf16128(<8 x bfloat>, <8 x bfloat>, <8 x bfloat>)
define <8 x bfloat> @test_int_x86_avx512bf16ne_vfnmsub132nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_vfnmsub132nepbf16128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vfnmsub132nepbf16 %xmm2, %xmm1, %xmm0 # encoding: [0x62,0xf6,0x74,0x08,0x9e,0xc2]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub132nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  ret <8 x bfloat> %res
}

define <8 x bfloat> @test_int_x86_avx512bf16ne_mask_vfnmsub132nepbf16128(<8 x bfloat> %src, <8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3, i8 %msk, <8 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_mask_vfnmsub132nepbf16128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vfnmsub132nepbf16 %xmm3, %xmm2, %xmm1 # encoding: [0x62,0xf6,0x6c,0x08,0x9e,0xcb]
; X64-NEXT:    vmovdqu16 %xmm1, %xmm0 {%k1} # encoding: [0x62,0xf1,0xff,0x09,0x6f,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_mask_vfnmsub132nepbf16128:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-16, %esp # encoding: [0x83,0xe4,0xf0]
; X86-NEXT:    subl $16, %esp # encoding: [0x83,0xec,0x10]
; X86-NEXT:    kmovb 24(%ebp), %k1 # encoding: [0xc5,0xf9,0x90,0x4d,0x18]
; X86-NEXT:    vfnmsub132nepbf16 8(%ebp), %xmm2, %xmm1 # encoding: [0x62,0xf6,0x6c,0x08,0x9e,0x8d,0x08,0x00,0x00,0x00]
; X86-NEXT:    vmovdqu16 %xmm1, %xmm0 {%k1} # encoding: [0x62,0xf1,0xff,0x09,0x6f,0xc1]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %msk to <8 x i1>
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub132nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  %res = select <8 x i1> %mask, <8 x bfloat> %res0, <8 x bfloat> %src
  ret <8 x bfloat> %res
}

define <8 x bfloat> @test_int_x86_avx512bf16ne_maskz_vfnmsub132nepbf16128(<8 x bfloat> %src, <8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3, i8 %msk, <8 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_vfnmsub132nepbf16128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vmovaps (%rsi), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x06]
; X64-NEXT:    vfnmsub132nepbf16 %xmm3, %xmm1, %xmm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0x9e,0xd3]
; X64-NEXT:    vfnmsub132nepbf16 %xmm3, %xmm1, %xmm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0x9e,0xc3]
; X64-NEXT:    vfnmsub132nepbf16 %xmm3, %xmm2, %xmm0 # encoding: [0x62,0xf6,0x6c,0x08,0x9e,0xc3]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_vfnmsub132nepbf16128:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-16, %esp # encoding: [0x83,0xe4,0xf0]
; X86-NEXT:    subl $16, %esp # encoding: [0x83,0xec,0x10]
; X86-NEXT:    vmovaps 8(%ebp), %xmm3 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x5d,0x08]
; X86-NEXT:    movl 28(%ebp), %eax # encoding: [0x8b,0x45,0x1c]
; X86-NEXT:    kmovb 24(%ebp), %k1 # encoding: [0xc5,0xf9,0x90,0x4d,0x18]
; X86-NEXT:    vmovaps (%eax), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x00]
; X86-NEXT:    vfnmsub132nepbf16 %xmm3, %xmm1, %xmm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0x9e,0xd3]
; X86-NEXT:    vfnmsub132nepbf16 %xmm3, %xmm1, %xmm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0x9e,0xc3]
; X86-NEXT:    vfnmsub132nepbf16 %xmm3, %xmm2, %xmm0 # encoding: [0x62,0xf6,0x6c,0x08,0x9e,0xc3]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %msk to <8 x i1>
  %val = load <8 x bfloat>, <8 x bfloat>* %ptr
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub132nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  %res1 = select <8 x i1> %mask, <8 x bfloat> %res0, <8 x bfloat> zeroinitializer
  %t2 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub132nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %val, <8 x bfloat> %x3)
  %res2 = select <8 x i1> %mask, <8 x bfloat> %t2, <8 x bfloat> zeroinitializer
  %res3  =  call <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub132nepbf16128(<8 x bfloat> %res1, <8 x bfloat> %res2, <8 x bfloat> %x3)
  ret <8 x bfloat> %res3
}

declare <8 x bfloat> @llvm.x86.avx512bf16ne.vfmadd231nepbf16128(<8 x bfloat>, <8 x bfloat>, <8 x bfloat>)
define <8 x bfloat> @test_int_x86_avx512bf16ne_vfmadd231nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_vfmadd231nepbf16128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vfmadd231nepbf16 %xmm2, %xmm1, %xmm0 # encoding: [0x62,0xf6,0x74,0x08,0xb8,0xc2]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfmadd231nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  ret <8 x bfloat> %res
}

define <8 x bfloat> @test_int_x86_avx512bf16ne_mask_vfmadd231nepbf16128(<8 x bfloat> %src, <8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3, i8 %msk, <8 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_mask_vfmadd231nepbf16128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vfmadd231nepbf16 %xmm3, %xmm2, %xmm1 # encoding: [0x62,0xf6,0x6c,0x08,0xb8,0xcb]
; X64-NEXT:    vmovdqu16 %xmm1, %xmm0 {%k1} # encoding: [0x62,0xf1,0xff,0x09,0x6f,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_mask_vfmadd231nepbf16128:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-16, %esp # encoding: [0x83,0xe4,0xf0]
; X86-NEXT:    subl $16, %esp # encoding: [0x83,0xec,0x10]
; X86-NEXT:    kmovb 24(%ebp), %k1 # encoding: [0xc5,0xf9,0x90,0x4d,0x18]
; X86-NEXT:    vfmadd231nepbf16 8(%ebp), %xmm2, %xmm1 # encoding: [0x62,0xf6,0x6c,0x08,0xb8,0x8d,0x08,0x00,0x00,0x00]
; X86-NEXT:    vmovdqu16 %xmm1, %xmm0 {%k1} # encoding: [0x62,0xf1,0xff,0x09,0x6f,0xc1]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %msk to <8 x i1>
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfmadd231nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  %res = select <8 x i1> %mask, <8 x bfloat> %res0, <8 x bfloat> %src
  ret <8 x bfloat> %res
}

define <8 x bfloat> @test_int_x86_avx512bf16ne_maskz_vfmadd231nepbf16128(<8 x bfloat> %src, <8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3, i8 %msk, <8 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_vfmadd231nepbf16128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vmovaps (%rsi), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x06]
; X64-NEXT:    vfmadd231nepbf16 %xmm3, %xmm1, %xmm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0xb8,0xd3]
; X64-NEXT:    vfmadd231nepbf16 %xmm3, %xmm1, %xmm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0xb8,0xc3]
; X64-NEXT:    vfmadd231nepbf16 %xmm3, %xmm2, %xmm0 # encoding: [0x62,0xf6,0x6c,0x08,0xb8,0xc3]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_vfmadd231nepbf16128:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-16, %esp # encoding: [0x83,0xe4,0xf0]
; X86-NEXT:    subl $16, %esp # encoding: [0x83,0xec,0x10]
; X86-NEXT:    vmovaps 8(%ebp), %xmm3 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x5d,0x08]
; X86-NEXT:    movl 28(%ebp), %eax # encoding: [0x8b,0x45,0x1c]
; X86-NEXT:    kmovb 24(%ebp), %k1 # encoding: [0xc5,0xf9,0x90,0x4d,0x18]
; X86-NEXT:    vmovaps (%eax), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x00]
; X86-NEXT:    vfmadd231nepbf16 %xmm3, %xmm1, %xmm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0xb8,0xd3]
; X86-NEXT:    vfmadd231nepbf16 %xmm3, %xmm1, %xmm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0xb8,0xc3]
; X86-NEXT:    vfmadd231nepbf16 %xmm3, %xmm2, %xmm0 # encoding: [0x62,0xf6,0x6c,0x08,0xb8,0xc3]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %msk to <8 x i1>
  %val = load <8 x bfloat>, <8 x bfloat>* %ptr
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfmadd231nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  %res1 = select <8 x i1> %mask, <8 x bfloat> %res0, <8 x bfloat> zeroinitializer
  %t2 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfmadd231nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %val, <8 x bfloat> %x3)
  %res2 = select <8 x i1> %mask, <8 x bfloat> %t2, <8 x bfloat> zeroinitializer
  %res3  =  call <8 x bfloat> @llvm.x86.avx512bf16ne.vfmadd231nepbf16128(<8 x bfloat> %res1, <8 x bfloat> %res2, <8 x bfloat> %x3)
  ret <8 x bfloat> %res3
}

declare <8 x bfloat> @llvm.x86.avx512bf16ne.vfmsub231nepbf16128(<8 x bfloat>, <8 x bfloat>, <8 x bfloat>)
define <8 x bfloat> @test_int_x86_avx512bf16ne_vfmsub231nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_vfmsub231nepbf16128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vfmsub231nepbf16 %xmm2, %xmm1, %xmm0 # encoding: [0x62,0xf6,0x74,0x08,0xba,0xc2]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfmsub231nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  ret <8 x bfloat> %res
}

define <8 x bfloat> @test_int_x86_avx512bf16ne_mask_vfmsub231nepbf16128(<8 x bfloat> %src, <8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3, i8 %msk, <8 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_mask_vfmsub231nepbf16128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vfmsub231nepbf16 %xmm3, %xmm2, %xmm1 # encoding: [0x62,0xf6,0x6c,0x08,0xba,0xcb]
; X64-NEXT:    vmovdqu16 %xmm1, %xmm0 {%k1} # encoding: [0x62,0xf1,0xff,0x09,0x6f,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_mask_vfmsub231nepbf16128:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-16, %esp # encoding: [0x83,0xe4,0xf0]
; X86-NEXT:    subl $16, %esp # encoding: [0x83,0xec,0x10]
; X86-NEXT:    kmovb 24(%ebp), %k1 # encoding: [0xc5,0xf9,0x90,0x4d,0x18]
; X86-NEXT:    vfmsub231nepbf16 8(%ebp), %xmm2, %xmm1 # encoding: [0x62,0xf6,0x6c,0x08,0xba,0x8d,0x08,0x00,0x00,0x00]
; X86-NEXT:    vmovdqu16 %xmm1, %xmm0 {%k1} # encoding: [0x62,0xf1,0xff,0x09,0x6f,0xc1]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %msk to <8 x i1>
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfmsub231nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  %res = select <8 x i1> %mask, <8 x bfloat> %res0, <8 x bfloat> %src
  ret <8 x bfloat> %res
}

define <8 x bfloat> @test_int_x86_avx512bf16ne_maskz_vfmsub231nepbf16128(<8 x bfloat> %src, <8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3, i8 %msk, <8 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_vfmsub231nepbf16128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vmovaps (%rsi), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x06]
; X64-NEXT:    vfmsub231nepbf16 %xmm3, %xmm1, %xmm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0xba,0xd3]
; X64-NEXT:    vfmsub231nepbf16 %xmm3, %xmm1, %xmm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0xba,0xc3]
; X64-NEXT:    vfmsub231nepbf16 %xmm3, %xmm2, %xmm0 # encoding: [0x62,0xf6,0x6c,0x08,0xba,0xc3]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_vfmsub231nepbf16128:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-16, %esp # encoding: [0x83,0xe4,0xf0]
; X86-NEXT:    subl $16, %esp # encoding: [0x83,0xec,0x10]
; X86-NEXT:    vmovaps 8(%ebp), %xmm3 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x5d,0x08]
; X86-NEXT:    movl 28(%ebp), %eax # encoding: [0x8b,0x45,0x1c]
; X86-NEXT:    kmovb 24(%ebp), %k1 # encoding: [0xc5,0xf9,0x90,0x4d,0x18]
; X86-NEXT:    vmovaps (%eax), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x00]
; X86-NEXT:    vfmsub231nepbf16 %xmm3, %xmm1, %xmm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0xba,0xd3]
; X86-NEXT:    vfmsub231nepbf16 %xmm3, %xmm1, %xmm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0xba,0xc3]
; X86-NEXT:    vfmsub231nepbf16 %xmm3, %xmm2, %xmm0 # encoding: [0x62,0xf6,0x6c,0x08,0xba,0xc3]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %msk to <8 x i1>
  %val = load <8 x bfloat>, <8 x bfloat>* %ptr
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfmsub231nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  %res1 = select <8 x i1> %mask, <8 x bfloat> %res0, <8 x bfloat> zeroinitializer
  %t2 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfmsub231nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %val, <8 x bfloat> %x3)
  %res2 = select <8 x i1> %mask, <8 x bfloat> %t2, <8 x bfloat> zeroinitializer
  %res3  =  call <8 x bfloat> @llvm.x86.avx512bf16ne.vfmsub231nepbf16128(<8 x bfloat> %res1, <8 x bfloat> %res2, <8 x bfloat> %x3)
  ret <8 x bfloat> %res3
}

declare <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd231nepbf16128(<8 x bfloat>, <8 x bfloat>, <8 x bfloat>)
define <8 x bfloat> @test_int_x86_avx512bf16ne_vfnmadd231nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_vfnmadd231nepbf16128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vfnmadd231nepbf16 %xmm2, %xmm1, %xmm0 # encoding: [0x62,0xf6,0x74,0x08,0xbc,0xc2]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd231nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  ret <8 x bfloat> %res
}

define <8 x bfloat> @test_int_x86_avx512bf16ne_mask_vfnmadd231nepbf16128(<8 x bfloat> %src, <8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3, i8 %msk, <8 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_mask_vfnmadd231nepbf16128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vfnmadd231nepbf16 %xmm3, %xmm2, %xmm1 # encoding: [0x62,0xf6,0x6c,0x08,0xbc,0xcb]
; X64-NEXT:    vmovdqu16 %xmm1, %xmm0 {%k1} # encoding: [0x62,0xf1,0xff,0x09,0x6f,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_mask_vfnmadd231nepbf16128:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-16, %esp # encoding: [0x83,0xe4,0xf0]
; X86-NEXT:    subl $16, %esp # encoding: [0x83,0xec,0x10]
; X86-NEXT:    kmovb 24(%ebp), %k1 # encoding: [0xc5,0xf9,0x90,0x4d,0x18]
; X86-NEXT:    vfnmadd231nepbf16 8(%ebp), %xmm2, %xmm1 # encoding: [0x62,0xf6,0x6c,0x08,0xbc,0x8d,0x08,0x00,0x00,0x00]
; X86-NEXT:    vmovdqu16 %xmm1, %xmm0 {%k1} # encoding: [0x62,0xf1,0xff,0x09,0x6f,0xc1]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %msk to <8 x i1>
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd231nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  %res = select <8 x i1> %mask, <8 x bfloat> %res0, <8 x bfloat> %src
  ret <8 x bfloat> %res
}

define <8 x bfloat> @test_int_x86_avx512bf16ne_maskz_vfnmadd231nepbf16128(<8 x bfloat> %src, <8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3, i8 %msk, <8 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_vfnmadd231nepbf16128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vmovaps (%rsi), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x06]
; X64-NEXT:    vfnmadd231nepbf16 %xmm3, %xmm1, %xmm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0xbc,0xd3]
; X64-NEXT:    vfnmadd231nepbf16 %xmm3, %xmm1, %xmm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0xbc,0xc3]
; X64-NEXT:    vfnmadd231nepbf16 %xmm3, %xmm2, %xmm0 # encoding: [0x62,0xf6,0x6c,0x08,0xbc,0xc3]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_vfnmadd231nepbf16128:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-16, %esp # encoding: [0x83,0xe4,0xf0]
; X86-NEXT:    subl $16, %esp # encoding: [0x83,0xec,0x10]
; X86-NEXT:    vmovaps 8(%ebp), %xmm3 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x5d,0x08]
; X86-NEXT:    movl 28(%ebp), %eax # encoding: [0x8b,0x45,0x1c]
; X86-NEXT:    kmovb 24(%ebp), %k1 # encoding: [0xc5,0xf9,0x90,0x4d,0x18]
; X86-NEXT:    vmovaps (%eax), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x00]
; X86-NEXT:    vfnmadd231nepbf16 %xmm3, %xmm1, %xmm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0xbc,0xd3]
; X86-NEXT:    vfnmadd231nepbf16 %xmm3, %xmm1, %xmm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0xbc,0xc3]
; X86-NEXT:    vfnmadd231nepbf16 %xmm3, %xmm2, %xmm0 # encoding: [0x62,0xf6,0x6c,0x08,0xbc,0xc3]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %msk to <8 x i1>
  %val = load <8 x bfloat>, <8 x bfloat>* %ptr
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd231nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  %res1 = select <8 x i1> %mask, <8 x bfloat> %res0, <8 x bfloat> zeroinitializer
  %t2 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd231nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %val, <8 x bfloat> %x3)
  %res2 = select <8 x i1> %mask, <8 x bfloat> %t2, <8 x bfloat> zeroinitializer
  %res3  =  call <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmadd231nepbf16128(<8 x bfloat> %res1, <8 x bfloat> %res2, <8 x bfloat> %x3)
  ret <8 x bfloat> %res3
}

declare <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub231nepbf16128(<8 x bfloat>, <8 x bfloat>, <8 x bfloat>)
define <8 x bfloat> @test_int_x86_avx512bf16ne_vfnmsub231nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3) {
; CHECK-LABEL: test_int_x86_avx512bf16ne_vfnmsub231nepbf16128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vfnmsub231nepbf16 %xmm2, %xmm1, %xmm0 # encoding: [0x62,0xf6,0x74,0x08,0xbe,0xc2]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub231nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  ret <8 x bfloat> %res
}

define <8 x bfloat> @test_int_x86_avx512bf16ne_mask_vfnmsub231nepbf16128(<8 x bfloat> %src, <8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3, i8 %msk, <8 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_mask_vfnmsub231nepbf16128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vfnmsub231nepbf16 %xmm3, %xmm2, %xmm1 # encoding: [0x62,0xf6,0x6c,0x08,0xbe,0xcb]
; X64-NEXT:    vmovdqu16 %xmm1, %xmm0 {%k1} # encoding: [0x62,0xf1,0xff,0x09,0x6f,0xc1]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_mask_vfnmsub231nepbf16128:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-16, %esp # encoding: [0x83,0xe4,0xf0]
; X86-NEXT:    subl $16, %esp # encoding: [0x83,0xec,0x10]
; X86-NEXT:    kmovb 24(%ebp), %k1 # encoding: [0xc5,0xf9,0x90,0x4d,0x18]
; X86-NEXT:    vfnmsub231nepbf16 8(%ebp), %xmm2, %xmm1 # encoding: [0x62,0xf6,0x6c,0x08,0xbe,0x8d,0x08,0x00,0x00,0x00]
; X86-NEXT:    vmovdqu16 %xmm1, %xmm0 {%k1} # encoding: [0x62,0xf1,0xff,0x09,0x6f,0xc1]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %msk to <8 x i1>
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub231nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  %res = select <8 x i1> %mask, <8 x bfloat> %res0, <8 x bfloat> %src
  ret <8 x bfloat> %res
}

define <8 x bfloat> @test_int_x86_avx512bf16ne_maskz_vfnmsub231nepbf16128(<8 x bfloat> %src, <8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3, i8 %msk, <8 x bfloat>* %ptr) {
; X64-LABEL: test_int_x86_avx512bf16ne_maskz_vfnmsub231nepbf16128:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vmovaps (%rsi), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x06]
; X64-NEXT:    vfnmsub231nepbf16 %xmm3, %xmm1, %xmm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0xbe,0xd3]
; X64-NEXT:    vfnmsub231nepbf16 %xmm3, %xmm1, %xmm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0xbe,0xc3]
; X64-NEXT:    vfnmsub231nepbf16 %xmm3, %xmm2, %xmm0 # encoding: [0x62,0xf6,0x6c,0x08,0xbe,0xc3]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_avx512bf16ne_maskz_vfnmsub231nepbf16128:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp # encoding: [0x55]
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    .cfi_offset %ebp, -8
; X86-NEXT:    movl %esp, %ebp # encoding: [0x89,0xe5]
; X86-NEXT:    .cfi_def_cfa_register %ebp
; X86-NEXT:    andl $-16, %esp # encoding: [0x83,0xe4,0xf0]
; X86-NEXT:    subl $16, %esp # encoding: [0x83,0xec,0x10]
; X86-NEXT:    vmovaps 8(%ebp), %xmm3 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x5d,0x08]
; X86-NEXT:    movl 28(%ebp), %eax # encoding: [0x8b,0x45,0x1c]
; X86-NEXT:    kmovb 24(%ebp), %k1 # encoding: [0xc5,0xf9,0x90,0x4d,0x18]
; X86-NEXT:    vmovaps (%eax), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x00]
; X86-NEXT:    vfnmsub231nepbf16 %xmm3, %xmm1, %xmm2 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0xbe,0xd3]
; X86-NEXT:    vfnmsub231nepbf16 %xmm3, %xmm1, %xmm0 {%k1} {z} # encoding: [0x62,0xf6,0x74,0x89,0xbe,0xc3]
; X86-NEXT:    vfnmsub231nepbf16 %xmm3, %xmm2, %xmm0 # encoding: [0x62,0xf6,0x6c,0x08,0xbe,0xc3]
; X86-NEXT:    movl %ebp, %esp # encoding: [0x89,0xec]
; X86-NEXT:    popl %ebp # encoding: [0x5d]
; X86-NEXT:    .cfi_def_cfa %esp, 4
; X86-NEXT:    retl # encoding: [0xc3]
  %mask = bitcast i8 %msk to <8 x i1>
  %val = load <8 x bfloat>, <8 x bfloat>* %ptr
  %res0 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub231nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %x2, <8 x bfloat> %x3)
  %res1 = select <8 x i1> %mask, <8 x bfloat> %res0, <8 x bfloat> zeroinitializer
  %t2 = call <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub231nepbf16128(<8 x bfloat> %x1, <8 x bfloat> %val, <8 x bfloat> %x3)
  %res2 = select <8 x i1> %mask, <8 x bfloat> %t2, <8 x bfloat> zeroinitializer
  %res3  =  call <8 x bfloat> @llvm.x86.avx512bf16ne.vfnmsub231nepbf16128(<8 x bfloat> %res1, <8 x bfloat> %res2, <8 x bfloat> %x3)
  ret <8 x bfloat> %res3
}
