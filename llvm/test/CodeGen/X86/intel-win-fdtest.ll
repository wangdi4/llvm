; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc < %s -O3 -link-msvc-cpp-runtime-lib -mtriple=x86_64-pc-windows-msvc19.35.32216 | FileCheck %s

define i1 @isfinite(ptr %X) {
; CHECK-LABEL: isfinite:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movl (%rcx), %eax
; CHECK-NEXT:    notl %eax
; CHECK-NEXT:    testl $2139095040, %eax # imm = 0x7F800000
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
entry:
  %fpclass = call i16 @_fdtest(ptr %X)
  %isfin = icmp slt i16 %fpclass, 1
  ret i1 %isfin
}

define i1 @notfinite(ptr %X) {
; CHECK-LABEL: notfinite:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movl (%rcx), %eax
; CHECK-NEXT:    notl %eax
; CHECK-NEXT:    testl $2139095040, %eax # imm = 0x7F800000
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
entry:
  %fpclass = call i16 @_fdtest(ptr %X)
  %notfin = icmp sge i16 %fpclass, 1
  ret i1 %notfin
}

define i1 @isinf(ptr %X) {
; CHECK-LABEL: isinf:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movl $2147483647, %eax # imm = 0x7FFFFFFF
; CHECK-NEXT:    andl (%rcx), %eax
; CHECK-NEXT:    cmpl $2139095040, %eax # imm = 0x7F800000
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
entry:
  %fpclass = call i16 @_fdtest(ptr %X)
  %isinf = icmp eq i16 %fpclass, 1
  ret i1 %isinf
}

define i1 @notinf(ptr %X) {
; CHECK-LABEL: notinf:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movl $2147483647, %eax # imm = 0x7FFFFFFF
; CHECK-NEXT:    andl (%rcx), %eax
; CHECK-NEXT:    cmpl $2139095040, %eax # imm = 0x7F800000
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
entry:
  %fpclass = call i16 @_fdtest(ptr %X)
  %isinf = icmp ne i16 %fpclass, 1
  ret i1 %isinf
}

define i1 @isnan(ptr %X) {
; CHECK-LABEL: isnan:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movl (%rcx), %eax
; CHECK-NEXT:    movl %eax, %ecx
; CHECK-NEXT:    notl %ecx
; CHECK-NEXT:    testl $2139095040, %ecx # imm = 0x7F800000
; CHECK-NEXT:    sete %cl
; CHECK-NEXT:    testl $8388607, %eax # imm = 0x7FFFFF
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    andb %cl, %al
; CHECK-NEXT:    retq
entry:
  %fpclass = call i16 @_fdtest(ptr %X)
  %isnan = icmp eq i16 %fpclass, 2
  ret i1 %isnan
}

define i1 @notnan(ptr %X) {
; CHECK-LABEL: notnan:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movl (%rcx), %eax
; CHECK-NEXT:    movl %eax, %ecx
; CHECK-NEXT:    notl %ecx
; CHECK-NEXT:    testl $2139095040, %ecx # imm = 0x7F800000
; CHECK-NEXT:    setne %cl
; CHECK-NEXT:    testl $8388607, %eax # imm = 0x7FFFFF
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    orb %cl, %al
; CHECK-NEXT:    retq
entry:
  %fpclass = call i16 @_fdtest(ptr %X)
  %notnan = icmp ne i16 %fpclass, 2
  ret i1 %notnan
}

define i1 @isnormal(ptr %X) {
; CHECK-LABEL: isnormal:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movl $2139095040, %eax # imm = 0x7F800000
; CHECK-NEXT:    andl (%rcx), %eax
; CHECK-NEXT:    cmpl $2139095040, %eax # imm = 0x7F800000
; CHECK-NEXT:    setne %cl
; CHECK-NEXT:    testl %eax, %eax
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    andb %cl, %al
; CHECK-NEXT:    retq
entry:
  %fpclass = call i16 @_fdtest(ptr %X)
  %isnor = icmp eq i16 %fpclass, -1
  ret i1 %isnor
}

define i1 @notnormal(ptr %X) {
; CHECK-LABEL: notnormal:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movl $2139095040, %eax # imm = 0x7F800000
; CHECK-NEXT:    andl (%rcx), %eax
; CHECK-NEXT:    cmpl $2139095040, %eax # imm = 0x7F800000
; CHECK-NEXT:    sete %cl
; CHECK-NEXT:    testl %eax, %eax
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    orb %cl, %al
; CHECK-NEXT:    retq
entry:
  %fpclass = call i16 @_fdtest(ptr %X)
  %notnor = icmp ne i16 %fpclass, -1
  ret i1 %notnor
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare dllimport i16 @_fdtest(ptr noundef)

