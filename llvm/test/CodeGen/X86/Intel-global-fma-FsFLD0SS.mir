# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -o - %s -mtriple=x86_64-- -fp-contract=fast -enable-unsafe-fp-math -run-pass=global-fma | FileCheck %s
--- |
  ; ModuleID = 't.ll'
  source_filename = "t.c"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-unknown-unknown"

  @a = common dso_local local_unnamed_addr global float 0.000000e+00, align 4
  @b = common dso_local local_unnamed_addr global float 0.000000e+00, align 4
  @c = common dso_local local_unnamed_addr global float 0.000000e+00, align 4
  @d = common dso_local local_unnamed_addr global float 0.000000e+00, align 4

  @a1 = common dso_local local_unnamed_addr global double 0.000000e+00, align 8
  @b1 = common dso_local local_unnamed_addr global double 0.000000e+00, align 8
  @c1 = common dso_local local_unnamed_addr global double 0.000000e+00, align 8
  @d1 = common dso_local local_unnamed_addr global double 0.000000e+00, align 8

  ; Function Attrs: norecurse nounwind readonly uwtable
  define dso_local float @foo1() local_unnamed_addr #0 {
  entry:
    %0 = load float, float* @a, align 4, !tbaa !2
    %1 = load float, float* @b, align 4, !tbaa !2
    %2 = load float, float* @c, align 4, !tbaa !2
    %mul = fmul fast float %2, %1
    %3 = load float, float* @d, align 4, !tbaa !2
    %mul1 = fmul fast float %mul, %3
    %sub = fsub fast float %0, %mul1
    ret float %sub
  }

  define dso_local float @foo2() local_unnamed_addr #1 {
  entry:
    %0 = load float, float* @a, align 4, !tbaa !2
    %1 = load float, float* @b, align 4, !tbaa !2
    %2 = load float, float* @c, align 4, !tbaa !2
    %mul = fmul fast float %2, %1
    %3 = load float, float* @d, align 4, !tbaa !2
    %mul1 = fmul fast float %mul, %3
    %sub = fsub fast float %0, %mul1
    ret float %sub
  }

  define dso_local double @foo3() local_unnamed_addr #0 {
  entry:
    %0 = load double, double* @a1, align 8, !tbaa !2
    %1 = load double, double* @b1, align 8, !tbaa !2
    %2 = load double, double* @c1, align 8, !tbaa !2
    %mul = fmul fast double %2, %1
    %3 = load double, double* @d1, align 8, !tbaa !2
    %mul1 = fmul fast double %mul, %3
    %sub = fsub fast double %0, %mul1
    ret double %sub
  }

  define dso_local double @foo4() local_unnamed_addr #1 {
  entry:
    %0 = load double, double* @a1, align 8, !tbaa !2
    %1 = load double, double* @b1, align 8, !tbaa !2
    %2 = load double, double* @c1, align 8, !tbaa !2
    %mul = fmul fast double %2, %1
    %3 = load double, double* @d1, align 8, !tbaa !2
    %mul1 = fmul fast double %mul, %3
    %sub = fsub fast double %0, %mul1
    ret double %sub
  }

  attributes #0 = { norecurse nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="true" "use-soft-float"="false" }

  attributes #1 = { norecurse nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512f,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="true" "use-soft-float"="false" }

  !llvm.module.flags = !{!0}
  !llvm.ident = !{!1}

  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{!"Intel(R) oneAPI DPC++ Compiler 2021.1 (YYYY.x.0.MMDD)"}
  !2 = !{!3, !3, i64 0}
  !3 = !{!"float", !4, i64 0}
  !4 = !{!"omnipotent char", !5, i64 0}
  !5 = !{!"Simple C/C++ TBAA"}

...
---
name:            foo1
alignment:       16
tracksRegLiveness: true
registers:
  - { id: 0, class: fr32 }
  - { id: 1, class: fr32 }
  - { id: 2, class: fr32 }
  - { id: 3, class: fr32 }
frameInfo:
  maxAlignment:    1
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: foo1
    ; CHECK: [[VMOVSSZrm_alt:%[0-9]+]]:fr32 = VMOVSSZrm_alt $rip, 1, $noreg, @a, $noreg :: (dereferenceable load 8 from @a, !tbaa !2)
    ; CHECK: [[VMOVSSZrm_alt1:%[0-9]+]]:fr32 = VMOVSSZrm_alt $rip, 1, $noreg, @b, $noreg :: (dereferenceable load 8 from @b, !tbaa !2)
    ; CHECK: [[VMOVSSZrm_alt2:%[0-9]+]]:fr32 = VMOVSSZrm_alt $rip, 1, $noreg, @c, $noreg :: (dereferenceable load 8 from @c, !tbaa !2)
    ; CHECK: [[VMOVSSZrm_alt3:%[0-9]+]]:fr32 = VMOVSSZrm_alt $rip, 1, $noreg, @d, $noreg :: (dereferenceable load 8 from @d, !tbaa !2)
    ; CHECK: %7:fr32 = nofpexcept VFMSUB213SSr [[VMOVSSZrm_alt1]], [[VMOVSSZrm_alt2]], [[VMOVSSZrm_alt]], implicit $mxcsr
    ; CHECK: [[FsFLD0SS:%[0-9]+]]:fr32 = FsFLD0SS
    ; CHECK: %6:fr32 = nofpexcept VFNMADD213SSr killed %7, [[VMOVSSZrm_alt3]], killed [[FsFLD0SS]], implicit $mxcsr
    ; CHECK: $xmm0 = COPY %6
    ; CHECK: RET 0, $xmm0
    %0:fr32 = VMOVSSZrm_alt $rip, 1, $noreg, @a, $noreg :: (dereferenceable load 8 from @a, !tbaa !2)
    %1:fr32 = VMOVSSZrm_alt $rip, 1, $noreg, @b, $noreg :: (dereferenceable load 8 from @b, !tbaa !2)
    %2:fr32 = VMOVSSZrm_alt $rip, 1, $noreg, @c, $noreg :: (dereferenceable load 8 from @c, !tbaa !2)
    %3:fr32 = VMOVSSZrm_alt $rip, 1, $noreg, @d, $noreg :: (dereferenceable load 8 from @d, !tbaa !2)

    %4:fr32 = nnan ninf nsz arcp contract afn reassoc nofpexcept VMULSSrr %1:fr32, %2:fr32, implicit $mxcsr
    %5:fr32 = nnan ninf nsz arcp contract afn reassoc nofpexcept VSUBSSrr %0:fr32, %4:fr32, implicit $mxcsr
    %6:fr32 = nnan ninf nsz arcp contract afn reassoc nofpexcept VMULSSrr %5:fr32, %3:fr32, implicit $mxcsr
    $xmm0 = COPY %6
    RET 0, $xmm0

...

...
---
name:            foo2
alignment:       16
tracksRegLiveness: true
registers:
  - { id: 0, class: fr32x }
  - { id: 1, class: fr32x }
  - { id: 2, class: fr32x }
  - { id: 3, class: fr32x }
frameInfo:
  maxAlignment:    1
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: foo2
    ; CHECK: [[VMOVSSZrm_alt:%[0-9]+]]:fr32x = VMOVSSZrm_alt $rip, 1, $noreg, @a, $noreg :: (dereferenceable load 8 from @a, !tbaa !2)
    ; CHECK: [[VMOVSSZrm_alt1:%[0-9]+]]:fr32x = VMOVSSZrm_alt $rip, 1, $noreg, @b, $noreg :: (dereferenceable load 8 from @b, !tbaa !2)
    ; CHECK: [[VMOVSSZrm_alt2:%[0-9]+]]:fr32x = VMOVSSZrm_alt $rip, 1, $noreg, @c, $noreg :: (dereferenceable load 8 from @c, !tbaa !2)
    ; CHECK: [[VMOVSSZrm_alt3:%[0-9]+]]:fr32x = VMOVSSZrm_alt $rip, 1, $noreg, @d, $noreg :: (dereferenceable load 8 from @d, !tbaa !2)
    ; CHECK: %7:fr32x = nofpexcept VFMSUB213SSZr [[VMOVSSZrm_alt1]], [[VMOVSSZrm_alt2]], [[VMOVSSZrm_alt]], implicit $mxcsr
    ; CHECK: [[AVX512_FsFLD0SS:%[0-9]+]]:fr32x = AVX512_FsFLD0SS
    ; CHECK: %6:fr32x = nofpexcept VFNMADD213SSZr killed %7, [[VMOVSSZrm_alt3]], killed [[AVX512_FsFLD0SS]], implicit $mxcsr
    ; CHECK: $xmm0 = COPY %6
    ; CHECK: RET 0, $xmm0
    %0:fr32x = VMOVSSZrm_alt $rip, 1, $noreg, @a, $noreg :: (dereferenceable load 8 from @a, !tbaa !2)
    %1:fr32x = VMOVSSZrm_alt $rip, 1, $noreg, @b, $noreg :: (dereferenceable load 8 from @b, !tbaa !2)
    %2:fr32x = VMOVSSZrm_alt $rip, 1, $noreg, @c, $noreg :: (dereferenceable load 8 from @c, !tbaa !2)
    %3:fr32x = VMOVSSZrm_alt $rip, 1, $noreg, @d, $noreg :: (dereferenceable load 8 from @d, !tbaa !2)

    %4:fr32x = nnan ninf nsz arcp contract afn reassoc nofpexcept VMULSSZrr %1:fr32x, %2:fr32x, implicit $mxcsr
    %5:fr32x = nnan ninf nsz arcp contract afn reassoc nofpexcept VSUBSSZrr %0:fr32x, %4:fr32x, implicit $mxcsr
    %6:fr32x = nnan ninf nsz arcp contract afn reassoc nofpexcept VMULSSZrr %5:fr32x, %3:fr32x, implicit $mxcsr
    $xmm0 = COPY %6
    RET 0, $xmm0

...
---
name:            foo3
alignment:       16
tracksRegLiveness: true
registers:
  - { id: 0, class: fr64 }
  - { id: 1, class: fr64 }
  - { id: 2, class: fr64 }
  - { id: 3, class: fr64 }
frameInfo:
  maxAlignment:    1
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: foo3
    ; CHECK: [[VMOVSDZrm_alt:%[0-9]+]]:fr64 = VMOVSDZrm_alt $rip, 1, $noreg, @a1, $noreg :: (dereferenceable load 8 from @a1, !tbaa !2)
    ; CHECK: [[VMOVSDZrm_alt1:%[0-9]+]]:fr64 = VMOVSDZrm_alt $rip, 1, $noreg, @b1, $noreg :: (dereferenceable load 8 from @b1, !tbaa !2)
    ; CHECK: [[VMOVSDZrm_alt2:%[0-9]+]]:fr64 = VMOVSDZrm_alt $rip, 1, $noreg, @c1, $noreg :: (dereferenceable load 8 from @c1, !tbaa !2)
    ; CHECK: [[VMOVSDZrm_alt3:%[0-9]+]]:fr64 = VMOVSDZrm_alt $rip, 1, $noreg, @d1, $noreg :: (dereferenceable load 8 from @d1, !tbaa !2)
    ; CHECK: %7:fr64 = nofpexcept VFMSUB213SDr [[VMOVSDZrm_alt1]], [[VMOVSDZrm_alt2]], [[VMOVSDZrm_alt]], implicit $mxcsr
    ; CHECK: [[FsFLD0SD:%[0-9]+]]:fr64 = FsFLD0SD
    ; CHECK: %6:fr64 = nofpexcept VFNMADD213SDr killed %7, [[VMOVSDZrm_alt3]], killed [[FsFLD0SD]], implicit $mxcsr
    ; CHECK: $xmm0 = COPY %6
    ; CHECK: RET 0, $xmm0
    %0:fr64 = VMOVSDZrm_alt $rip, 1, $noreg, @a1, $noreg :: (dereferenceable load 8 from @a1, !tbaa !2)
    %1:fr64 = VMOVSDZrm_alt $rip, 1, $noreg, @b1, $noreg :: (dereferenceable load 8 from @b1, !tbaa !2)
    %2:fr64 = VMOVSDZrm_alt $rip, 1, $noreg, @c1, $noreg :: (dereferenceable load 8 from @c1, !tbaa !2)
    %3:fr64 = VMOVSDZrm_alt $rip, 1, $noreg, @d1, $noreg :: (dereferenceable load 8 from @d1, !tbaa !2)

    %4:fr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept VMULSDrr %1:fr64, %2:fr64, implicit $mxcsr
    %5:fr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept VSUBSDrr %0:fr64, %4:fr64, implicit $mxcsr
    %6:fr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept VMULSDrr %5:fr64, %3:fr64, implicit $mxcsr
    $xmm0 = COPY %6
    RET 0, $xmm0

...
---
name:            foo4
alignment:       16
tracksRegLiveness: true
registers:
  - { id: 0, class: fr64x }
  - { id: 1, class: fr64x }
  - { id: 2, class: fr64x }
  - { id: 3, class: fr64x }
frameInfo:
  maxAlignment:    1
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: foo4
    ; CHECK: [[VMOVSDZrm_alt:%[0-9]+]]:fr64x = VMOVSDZrm_alt $rip, 1, $noreg, @a1, $noreg :: (dereferenceable load 8 from @a1, !tbaa !2)
    ; CHECK: [[VMOVSDZrm_alt1:%[0-9]+]]:fr64x = VMOVSDZrm_alt $rip, 1, $noreg, @b1, $noreg :: (dereferenceable load 8 from @b1, !tbaa !2)
    ; CHECK: [[VMOVSDZrm_alt2:%[0-9]+]]:fr64x = VMOVSDZrm_alt $rip, 1, $noreg, @c1, $noreg :: (dereferenceable load 8 from @c1, !tbaa !2)
    ; CHECK: [[VMOVSDZrm_alt3:%[0-9]+]]:fr64x = VMOVSDZrm_alt $rip, 1, $noreg, @d1, $noreg :: (dereferenceable load 8 from @d1, !tbaa !2)
    ; CHECK: %7:fr64x = nofpexcept VFMSUB213SDZr [[VMOVSDZrm_alt1]], [[VMOVSDZrm_alt2]], [[VMOVSDZrm_alt]], implicit $mxcsr
    ; CHECK: [[AVX512_FsFLD0SD:%[0-9]+]]:fr64x = AVX512_FsFLD0SD
    ; CHECK: %6:fr64x = nofpexcept VFNMADD213SDZr killed %7, [[VMOVSDZrm_alt3]], killed [[AVX512_FsFLD0SD]], implicit $mxcsr
    ; CHECK: $xmm0 = COPY %6
    ; CHECK: RET 0, $xmm0
    %0:fr64x = VMOVSDZrm_alt $rip, 1, $noreg, @a1, $noreg :: (dereferenceable load 8 from @a1, !tbaa !2)
    %1:fr64x = VMOVSDZrm_alt $rip, 1, $noreg, @b1, $noreg :: (dereferenceable load 8 from @b1, !tbaa !2)
    %2:fr64x = VMOVSDZrm_alt $rip, 1, $noreg, @c1, $noreg :: (dereferenceable load 8 from @c1, !tbaa !2)
    %3:fr64x = VMOVSDZrm_alt $rip, 1, $noreg, @d1, $noreg :: (dereferenceable load 8 from @d1, !tbaa !2)

    %4:fr64x = nnan ninf nsz arcp contract afn reassoc nofpexcept VMULSDZrr %1:fr64x, %2:fr64x, implicit $mxcsr
    %5:fr64x = nnan ninf nsz arcp contract afn reassoc nofpexcept VSUBSDZrr %0:fr64x, %4:fr64x, implicit $mxcsr
    %6:fr64x = nnan ninf nsz arcp contract afn reassoc nofpexcept VMULSDZrr %5:fr64x, %3:fr64x, implicit $mxcsr
    $xmm0 = COPY %6
    RET 0, $xmm0

...
