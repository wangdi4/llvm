# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -o - %s -mtriple=x86_64-- -fp-contract=fast -enable-unsafe-fp-math -run-pass=global-fma | FileCheck %s
--- |
  ; ModuleID = '<stdin>'
  source_filename = "case.c"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-unknown-linux-gnu"

  ; Function Attrs: norecurse nounwind readonly uwtable
  define dso_local float @foo(float %TS, float %TA, float %VS, float %DS, float* nocapture readonly %G, float* nocapture readnone %S) local_unnamed_addr #0 {
  entry:
    %cmp = fcmp fast ogt float %VS, 1.000000e+00
    br i1 %cmp, label %return, label %if.end

  if.end:                                           ; preds = %entry
    %0 = load float, float* %G, align 4, !tbaa !2
    %sub = fsub fast float %TS, %TA
    %mul = fmul fast float %sub, %TS
    %mul1 = fmul fast float %mul, %VS
    %mul2 = fmul fast float %mul1, %0
    br label %return

  return:                                           ; preds = %if.end, %entry
    %retval.0 = phi float [ %mul2, %if.end ], [ 1.000000e+00, %entry ]
    ret float %retval.0
  }

  attributes #0 = { norecurse nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="skylake-avx512" "target-features"="+adx,+aes,+avx,+avx2,+avx512bw,+avx512cd,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+clflushopt,+clwb,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+pku,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves" "unsafe-fp-math"="true" "use-soft-float"="false" }

  !llvm.module.flags = !{!0}
  !llvm.ident = !{!1}

  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{!"Intel(R) oneAPI DPC++ Compiler 2021.1 (YYYY.x.0.MMDD)"}
  !2 = !{!3, !3, i64 0}
  !3 = !{!"float", !4, i64 0}
  !4 = !{!"omnipotent char", !5, i64 0}
  !5 = !{!"Simple C/C++ TBAA"}

...
---
name:            foo
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:
  - { id: 0, class: fr32x, preferred-register: '' }
  - { id: 1, class: fr32x, preferred-register: '' }
  - { id: 2, class: fr32x, preferred-register: '' }
  - { id: 3, class: fr32x, preferred-register: '' }
  - { id: 4, class: fr32x, preferred-register: '' }
  - { id: 5, class: fr32x, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: fr32x, preferred-register: '' }
  - { id: 9, class: fr32x, preferred-register: '' }
  - { id: 10, class: fr32x, preferred-register: '' }
  - { id: 11, class: fr32x, preferred-register: '' }
liveins:
  - { reg: '$xmm0', virtual-reg: '%2' }
  - { reg: '$xmm1', virtual-reg: '%3' }
  - { reg: '$xmm2', virtual-reg: '%4' }
  - { reg: '$rdi', virtual-reg: '%6' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
constants:
  - id:              0
    value:           'float 1.000000e+00'
    alignment:       4
    isTargetSpecific: false
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: foo
  ; CHECK: bb.0.entry:
  ; CHECK:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK:   liveins: $xmm0, $xmm1, $xmm2, $rdi
  ; CHECK:   [[COPY:%[0-9]+]]:gr64 = COPY $rdi
  ; CHECK:   [[COPY1:%[0-9]+]]:fr32x = COPY $xmm2
  ; CHECK:   [[COPY2:%[0-9]+]]:fr32x = COPY $xmm1
  ; CHECK:   [[COPY3:%[0-9]+]]:fr32x = COPY $xmm0
  ; CHECK:   [[VMOVSSZrm_alt:%[0-9]+]]:fr32x = VMOVSSZrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 4 from constant-pool)
  ; CHECK:   nofpexcept VUCOMISSZrr [[COPY1]], [[VMOVSSZrm_alt]], implicit-def $eflags, implicit $mxcsr
  ; CHECK:   JCC_1 %bb.2, 7, implicit $eflags
  ; CHECK:   JMP_1 %bb.1
  ; CHECK: bb.1.if.end:
  ; CHECK:   successors: %bb.2(0x80000000)
  ; CHECK:   %12:fr32x = nofpexcept VSUBSSZrr [[COPY3]], [[COPY2]], implicit $mxcsr
  ; CHECK:   %13:fr32x = nofpexcept VMULSSZrr [[COPY1]], [[COPY3]], implicit $mxcsr
  ; CHECK:   [[VMOVSSZrm_alt1:%[0-9]+]]:fr32x = VMOVSSZrm_alt [[COPY]], 1, $noreg, 0, $noreg :: (load 4 from %ir.G, !tbaa !2)
  ; CHECK:   %15:fr32x = nofpexcept VMULSSZrr killed %12, killed [[VMOVSSZrm_alt1]], implicit $mxcsr
  ; CHECK:   %0:fr32x = nofpexcept VMULSSZrr killed %15, killed %13, implicit $mxcsr
  ; CHECK: bb.2.return:
  ; CHECK:   [[PHI:%[0-9]+]]:fr32x = PHI [[VMOVSSZrm_alt]], %bb.0, %0, %bb.1
  ; CHECK:   $xmm0 = COPY [[PHI]]
  ; CHECK:   RET 0, $xmm0
  bb.0.entry:
    successors: %bb.2(0x40000000), %bb.1(0x40000000)
    liveins: $xmm0, $xmm1, $xmm2, $rdi

    %6:gr64 = COPY $rdi
    %4:fr32x = COPY $xmm2
    %3:fr32x = COPY $xmm1
    %2:fr32x = COPY $xmm0
    %8:fr32x = VMOVSSZrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load 4 from constant-pool)
    nofpexcept VUCOMISSZrr %4, %8, implicit-def $eflags, implicit $mxcsr
    JCC_1 %bb.2, 7, implicit $eflags
    JMP_1 %bb.1

  bb.1.if.end:
    successors: %bb.2(0x80000000)

    %9:fr32x = nnan ninf nsz arcp contract afn reassoc nofpexcept VSUBSSZrr %2, %3, implicit $mxcsr
    %10:fr32x = nnan ninf nsz arcp contract afn reassoc nofpexcept VMULSSZrr killed %9, %2, implicit $mxcsr
    %11:fr32x = nnan ninf nsz arcp contract afn reassoc nofpexcept VMULSSZrr killed %10, %4, implicit $mxcsr
    %0:fr32x = nnan ninf nsz arcp contract afn reassoc nofpexcept VMULSSZrm killed %11, %6, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load 4 from %ir.G, !tbaa !2)

  bb.2.return:
    %1:fr32x = PHI %8, %bb.0, %0, %bb.1
    $xmm0 = COPY %1
    RET 0, $xmm0

...
