; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc < %s -intel-libirc-allowed -intel-libm-allowed -mattr=+sse2 -mtriple=x86_64-pc-windows-msvc19.35.32216 | FileCheck %s --check-prefixes=WIN_WITH_LIBM
; RUN: llc < %s -intel-libirc-allowed -intel-sincos-allowed -mattr=+sse2 -mtriple=x86_64-pc-windows-msvc19.35.32216 | FileCheck %s --check-prefixes=WIN_WITH_SINCOS
; RUN: llc < %s -intel-libirc-allowed -mattr=+sse2 -mtriple=x86_64-pc-windows-msvc19.35.32216 | FileCheck %s --check-prefixes=WIN_WITHOUT_LIBM
; RUN: llc < %s -intel-libirc-allowed -mattr=+sse2 -mtriple=x86_64-pc-linux-gnu | FileCheck %s --check-prefixes=LINUX
; RUN: llc < %s -intel-libirc-allowed -mattr=+sse2 -mtriple=i386-pc-linux-gnu | FileCheck %s --check-prefixes=LINUX32
; RUN: llc < %s -intel-libirc-allowed -intel-libm-allowed -mattr=+sse2 -mtriple=i386-pc-windows-msvc19.35.32216 | FileCheck %s --check-prefixes=WIN_WITH_LIBM_32
; RUN: llc < %s -mattr=+sse2 -mtriple=x86_64-pc-linux-gnu | FileCheck %s --check-prefixes=LINUX_WITHOUT_LIBM_LIBIRC

; LINUX32-NOT: __libm_sse2_
; WIN_WITH_LIBM_32-NOT: __libm_sse2_
define dso_local float @test1(float noundef nofpclass(nan inf) %a) {
; WIN_WITH_LIBM-LABEL: test1:
; WIN_WITH_LIBM:    callq __libm_sse2_sincosf
;
; WIN_WITH_SINCOS-LABEL: test1:
; WIN_WITH_SINCOS:    callq __libm_sse2_sincosf
;
; WIN_WITHOUT_LIBM-LABEL: test1:
; WIN_WITHOUT_LIBM:    callq sinf
; WIN_WITHOUT_LIBM:    callq cosf
;
; LINUX-LABEL: test1:
; LINUX:    callq __libm_sse2_sincosf
;
; LINUX_WITHOUT_LIBM_LIBIRC-LABLE: test1:
; LINUX_WITHOUT_LIBM_LIBIRC: callq sincosf
;
entry:
  %0 = tail call fast float @llvm.sin.f32(float %a)
  %1 = tail call fast float @llvm.cos.f32(float %a)
  %add = fadd fast float %0, %1
  ret float %add
}

define dso_local double @test2(double noundef nofpclass(nan inf) %a) {
; WIN_WITH_LIBM-LABEL: test2:
; WIN_WITH_LIBM:    callq __libm_sse2_sincos
;
; WIN_WITH_SINCOS-LABEL: test2:
; WIN_WITH_SINCOS:    callq __libm_sse2_sincos
;
; WIN_WITHOUT_LIBM-LABEL: test2:
; WIN_WITHOUT_LIBM:    callq sin
; WIN_WITHOUT_LIBM:    callq cos
;
; LINUX-LABEL: test2:
; LINUX:    callq __libm_sse2_sincos
;
; LINUX_WITHOUT_LIBM_LIBIRC-LABLE: test2:
; LINUX_WITHOUT_LIBM_LIBIRC: callq sincos
;
entry:
  %0 = tail call fast double @llvm.sin.f64(double %a)
  %1 = tail call fast double @llvm.cos.f64(double %a)
  %add = fadd fast double %0, %1
  ret double %add
}

declare float @llvm.sin.f32(float)
declare float @llvm.cos.f32(float)
declare double @llvm.sin.f64(double)
declare double @llvm.cos.f64(double)
