; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc < %s -intel-libm-allowed -mattr=+sse2 -mtriple=x86_64-pc-windows-msvc19.35.32216 | FileCheck %s --check-prefixes=WIN_WITH_LIBM
; RUN: llc < %s -mattr=+sse2 -mtriple=x86_64-pc-windows-msvc19.35.32216 | FileCheck %s --check-prefixes=WIN_WITHOUT_LIBM
; RUN: llc < %s -mattr=+sse2 -mtriple=x86_64-pc-linux-gnu | FileCheck %s --check-prefixes=LINUX
; RUN: llc < %s -mattr=+sse2 -mtriple=i386-pc-linux-gnu | FileCheck %s --check-prefixes=LINUX32
; RUN: llc < %s -intel-libm-allowed -mattr=+sse2 -mtriple=i386-pc-windows-msvc19.35.32216 | FileCheck %s --check-prefixes=WIN_WITH_LIBM_32

; LINUX32-NOT: __libm_sse2_
; WIN_WITH_LIBM_32-NOT: __libm_sse2_
define dso_local float @sincos_test(float noundef nofpclass(nan inf) %a) {
; WIN_WITH_LIBM-LABEL: sincos_test:
; WIN_WITH_LIBM:       # %bb.0: # %entry
; WIN_WITH_LIBM-NEXT:    subq $40, %rsp
; WIN_WITH_LIBM-NEXT:    .seh_stackalloc 40
; WIN_WITH_LIBM-NEXT:    .seh_endprologue
; WIN_WITH_LIBM-NEXT:    callq __libm_sse2_sincosf
; WIN_WITH_LIBM-NEXT:    addss %xmm1, %xmm0
; WIN_WITH_LIBM-NEXT:    addq $40, %rsp
; WIN_WITH_LIBM-NEXT:    retq
; WIN_WITH_LIBM-NEXT:    .seh_endproc
;
; WIN_WITHOUT_LIBM-LABEL: sincos_test:
; WIN_WITHOUT_LIBM:       # %bb.0: # %entry
; WIN_WITHOUT_LIBM-NEXT:    subq $72, %rsp
; WIN_WITHOUT_LIBM-NEXT:    .seh_stackalloc 72
; WIN_WITHOUT_LIBM-NEXT:    movaps %xmm7, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; WIN_WITHOUT_LIBM-NEXT:    .seh_savexmm %xmm7, 48
; WIN_WITHOUT_LIBM-NEXT:    movaps %xmm6, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; WIN_WITHOUT_LIBM-NEXT:    .seh_savexmm %xmm6, 32
; WIN_WITHOUT_LIBM-NEXT:    .seh_endprologue
; WIN_WITHOUT_LIBM-NEXT:    movaps %xmm0, %xmm6
; WIN_WITHOUT_LIBM-NEXT:    callq sinf
; WIN_WITHOUT_LIBM-NEXT:    movaps %xmm0, %xmm7
; WIN_WITHOUT_LIBM-NEXT:    movaps %xmm6, %xmm0
; WIN_WITHOUT_LIBM-NEXT:    callq cosf
; WIN_WITHOUT_LIBM-NEXT:    addss %xmm7, %xmm0
; WIN_WITHOUT_LIBM-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm6 # 16-byte Reload
; WIN_WITHOUT_LIBM-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm7 # 16-byte Reload
; WIN_WITHOUT_LIBM-NEXT:    addq $72, %rsp
; WIN_WITHOUT_LIBM-NEXT:    retq
; WIN_WITHOUT_LIBM-NEXT:    .seh_endproc
;
; LINUX-LABEL: sincos_test:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    pushq %rax
; LINUX-NEXT:    .cfi_def_cfa_offset 16
; LINUX-NEXT:    callq __libm_sse2_sincosf@PLT
; LINUX-NEXT:    addss %xmm1, %xmm0
; LINUX-NEXT:    popq %rax
; LINUX-NEXT:    .cfi_def_cfa_offset 8
; LINUX-NEXT:    retq
entry:
  %0 = tail call fast float @llvm.sin.f32(float %a)
  %1 = tail call fast float @llvm.cos.f32(float %a)
  %add = fadd fast float %0, %1
  ret float %add
}

declare float @llvm.sin.f32(float)
declare float @llvm.cos.f32(float)
