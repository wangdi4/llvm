; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_avx_convert
; RUN: llc < %s -mtriple=i686-unknown-unknown -mattr=+avxconvert,+avx512fp16 --show-mc-encoding | FileCheck %s --check-prefixes=CHECK,X86
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avxconvert,+avx512fp16 --show-mc-encoding | FileCheck %s --check-prefixes=CHECK,X64

declare <8 x half> @llvm.x86.avx2.vcvt2ps2ph.128(<4 x float>, <4 x float>)

define <8 x half>@test_int_x86_avx2_mask_vcvt2ps2ph_128(<4 x float> %x0, <4 x float> %x1) {
; CHECK-LABEL: test_int_x86_avx2_mask_vcvt2ps2ph_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vcvt2ps2ph %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe2,0x79,0x67,0xc1]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res =  call <8 x half> @llvm.x86.avx2.vcvt2ps2ph.128(<4 x float> %x0, <4 x float> %x1)
  ret <8 x half> %res
}

declare <16 x half> @llvm.x86.avx2.vcvt2ps2ph.256(<8 x float>, <8 x float>)

define <16 x half>@test_int_x86_avx2_mask_vcvt2ps2ph_256(<8 x float> %x0, <8 x float> %x1) {
; CHECK-LABEL: test_int_x86_avx2_mask_vcvt2ps2ph_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vcvt2ps2ph %ymm1, %ymm0, %ymm0 # encoding: [0xc4,0xe2,0x7d,0x67,0xc1]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res =  call <16 x half> @llvm.x86.avx2.vcvt2ps2ph.256(<8 x float> %x0, <8 x float> %x1)
  ret <16 x half> %res
}

declare <8 x half> @llvm.x86.avx2.vcvtbf162ph.128(<8 x i16>)

define <8 x half>@test_int_x86_avx2_mask_vcvtbf162ph_128(<8 x i16> %x0) {
; CHECK-LABEL: test_int_x86_avx2_mask_vcvtbf162ph_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vcvtbf162ph %xmm0, %xmm0 # encoding: [0xc4,0xe2,0x7a,0x67,0xc0]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res =  call <8 x half> @llvm.x86.avx2.vcvtbf162ph.128(<8 x i16> %x0)
  ret <8 x half> %res
}

declare <16 x half> @llvm.x86.avx2.vcvtbf162ph.256(<16 x i16>)

define <16 x half>@test_int_x86_avx2_mask_vcvtbf162ph_256(<16 x i16> %x0) {
; CHECK-LABEL: test_int_x86_avx2_mask_vcvtbf162ph_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vcvtbf162ph %ymm0, %ymm0 # encoding: [0xc4,0xe2,0x7e,0x67,0xc0]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res =  call <16 x half> @llvm.x86.avx2.vcvtbf162ph.256(<16 x i16> %x0)
  ret <16 x half> %res
}

declare <8 x i16> @llvm.x86.avx2.vcvtneph2bf16.128(<8 x half>)

define <8 x i16>@test_int_x86_avx2_mask_vcvtneph2bf16_128(<8 x half> %x0) {
; CHECK-LABEL: test_int_x86_avx2_mask_vcvtneph2bf16_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vcvtneph2bf16 %xmm0, %xmm0 # encoding: [0xc4,0xe2,0x7b,0x67,0xc0]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res =  call <8 x i16> @llvm.x86.avx2.vcvtneph2bf16.128(<8 x half> %x0)
  ret <8 x i16> %res
}

declare <16 x i16> @llvm.x86.avx2.vcvtneph2bf16.256(<16 x half>)

define <16 x i16>@test_int_x86_avx2_mask_vcvtneph2bf16_256(<16 x half> %x0) {
; CHECK-LABEL: test_int_x86_avx2_mask_vcvtneph2bf16_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vcvtneph2bf16 %ymm0, %ymm0 # encoding: [0xc4,0xe2,0x7f,0x67,0xc0]
; CHECK-NEXT:    ret{{[l|q]}} # encoding: [0xc3]
  %res =  call <16 x i16> @llvm.x86.avx2.vcvtneph2bf16.256(<16 x half> %x0)
  ret <16 x i16> %res
}
