# INTEL_CUSTOMIZATION:
# This test checks that Global FMA optimizes a test compiled with debug info
# generated by debugify.
# IR for this test was generated from this simple test:
#   double a, b, x;
#   extern void ev_tallyx(double);
#
#   void computex() {
#     double r = a*x*x - b*x;
#     double fpair = r*x;
#     ev_tallyx(fpair);
#   }
#
# Global FMA is supposed to optimize the expression:
#   t1 = x*x; t2 = x*b; t3 = fms(t1,a,t2); t4 = t3 * x; // x*x*x*a - x*x*b
# to the more efficient form:
#   t1 = x*x; t2 = fms(x,a,b), t3 = t1*t2; // x*x*x*a - x*x*b
#
# The debug information may cause some troubles for FMA, which must
# be gracefully handled in the optimization and checked in this test.
# RUN: llc -o - %s -mtriple=x86_64-- -mcpu=core-avx2 -fp-contract=fast -enable-unsafe-fp-math -run-pass=mir-debugify,global-fma,mir-check-debugify 2>&1 | FileCheck %s

--- |
  ; ModuleID = 't2.ll'
  source_filename = "test1.i"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-pc-linux"

  @a = dso_local local_unnamed_addr global double 0.000000e+00, align 8
  @x = dso_local local_unnamed_addr global double 0.000000e+00, align 8
  @b = dso_local local_unnamed_addr global double 0.000000e+00, align 8

  ; Function Attrs: uwtable
  define dso_local void @_Z8computexv() local_unnamed_addr #0 {
  entry:
    %0 = load double, double* @a, align 8
    %1 = load double, double* @x, align 8
    %2 = fmul fast double %1, %1
    %mul1 = fmul fast double %2, %0
    %3 = load double, double* @b, align 8
    %mul2 = fmul fast double %3, %1
    %sub = fsub fast double %mul1, %mul2
    %mul3 = fmul fast double %sub, %1
    tail call void @_Z9ev_tallyxd(double %mul3)
    ret void
  }

  declare dso_local void @_Z9ev_tallyxd(double) local_unnamed_addr #1

  ; Function Attrs: nounwind readnone speculatable willreturn
  declare void @llvm.dbg.value(metadata, metadata, metadata) #2

  ; Function Attrs: nounwind
  declare void @llvm.stackprotector(i8*, i8**) #3

  attributes #0 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="core-avx2" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+rdrnd,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt,+avx2" "unsafe-fp-math"="true" "use-soft-float"="false" }
  attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="core-avx2" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+rdrnd,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt,+avx2" "unsafe-fp-math"="true" "use-soft-float"="false" }
  attributes #2 = { nounwind readnone speculatable willreturn "target-features"="+avx2" }
  attributes #3 = { nounwind }

...
---
name:            _Z8computexv
alignment:       16
tracksRegLiveness: true
registers:
  - { id: 0, class: fr64 }
  - { id: 1, class: fr64 }
  - { id: 2, class: fr64 }
  - { id: 3, class: fr64 }
  - { id: 4, class: fr64 }
  - { id: 5, class: fr64 }
frameInfo:
  maxAlignment:    1
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    %0:fr64 = VMOVSDrm_alt $rip, 1, $noreg, @x, $noreg
    %1:fr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept VMULSDrr %0, %0, implicit $mxcsr
    %2:fr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept VMULSDrm killed %1, $rip, 1, $noreg, @a, $noreg, implicit $mxcsr
    %3:fr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept VMULSDrm %0, $rip, 1, $noreg, @b, $noreg, implicit $mxcsr
    %4:fr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept VSUBSDrr killed %2, killed %3, implicit $mxcsr
    %5:fr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept VMULSDrr killed %4, %0, implicit $mxcsr
    $xmm0 = COPY %5
    TCRETURNdi64 @_Z9ev_tallyxd, 0, csr_64, implicit $rsp, implicit $ssp, implicit $xmm0

    ; CHECK: WARNING: Instruction with empty DebugLoc in function _Z8computexv --%7:fr64 = VMOVSDrm_alt $rip, 1, $noreg, @a, $noreg
    ; CHECK: WARNING: Instruction with empty DebugLoc in function _Z8computexv --%8:fr64 = VMOVSDrm_alt $rip, 1, $noreg, @b, $noreg
    ; CHECK: WARNING: Missing line 2
    ; CHECK: WARNING: Missing line 3
    ; CHECK: WARNING: Missing line 4
    ; CHECK: WARNING: Missing line 5
    ; CHECK-NOT: WARNING: Missing variable

    ; CHECK: [[VMOVSDrm_alt:%[0-9]+]]:fr64 = VMOVSDrm_alt $rip, 1, $noreg, @x, $noreg, debug-location !19
    ; CHECK: DBG_VALUE [[VMOVSDrm_alt:%[0-9]+]], $noreg, !10, !DIExpression(), debug-location !19
    ; CHECK: DBG_VALUE $noreg, $noreg, !12, !DIExpression(), debug-location !20
    ; CHECK: [[VMOVSDrm_alt1:%[0-9]+]]:fr64 = VMOVSDrm_alt $rip, 1, $noreg, @a, $noreg
    ; CHECK: DBG_VALUE $noreg, $noreg, !13, !DIExpression(), debug-location !21
    ; CHECK: [[VMOVSDrm_alt2:%[0-9]+]]:fr64 = VMOVSDrm_alt $rip, 1, $noreg, @b, $noreg
    ; CHECK: DBG_VALUE $noreg, $noreg, !14, !DIExpression(), debug-location !22
    ; CHECK: DBG_VALUE $noreg, $noreg, !15, !DIExpression(), debug-location !23
    ; CHECK: [[VMULSDrr3:%[0-9]+]]:fr64 = nofpexcept VMULSDrr [[VMOVSDrm_alt:%[0-9]+]], [[VMOVSDrm_alt:%[0-9]+]], implicit $mxcsr, debug-location !24
    ; CHECK: [[VFMSUB213SDr4:%[0-9]+]]:fr64 = nofpexcept VFMSUB213SDr [[VMOVSDrm_alt:%[0-9]+]], killed [[VMOVSDrm_alt1:%[0-9]+]], killed [[VMOVSDrm_alt2:%[0-9]+]], implicit $mxcsr, debug-location !24
    ; CHECK: %5:fr64 = nofpexcept VMULSDrr killed [[VFMSUB213SDr4:%[0-9]+]], killed [[VMULSDrr3:%[0-9]+]], implicit $mxcsr, debug-location !24
    ; CHECK: DBG_VALUE %5, $noreg, !16, !DIExpression(), debug-location !24
    ; CHECK: $xmm0 = COPY %5, debug-location !25
    ; CHECK: DBG_VALUE $xmm0, $noreg, !17, !DIExpression(), debug-location !25
    ; CHECK: TCRETURNdi64 @_Z9ev_tallyxd, 0, csr_64, implicit $rsp, implicit $ssp, implicit $xmm0, debug-location !26
...
