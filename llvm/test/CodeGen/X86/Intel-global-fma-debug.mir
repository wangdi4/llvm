# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# INTEL_CUSTOMIZATION:
# This test checks that Global FMA optimizes a test compiled with debug info.
# IR for this test was generated from this simple test:
#   double a, b, x;
#   extern void ev_tallyx(double);
#
#   void computex() {
#     double r = a*x*x - b*x;
#     double fpair = r*x;
#     ev_tallyx(fpair);
#   }
#
# Global FMA is supposed to optimize the expression:
#   t1 = x*x; t2 = x*b; t3 = fms(t1,a,t2); t4 = t3 * x; // x*x*x*a - x*x*b
# to the more efficient form:
#   t1 = x*x; t2 = fms(x,a,b), t3 = t1*t2; // x*x*x*a - x*x*b
#
# The debug information may cause some troubles for FMA, which must
# be gracefully handled in the optimization and checked in this test.
# RUN: llc -o - %s -mtriple=x86_64-- -mcpu=core-avx2 -fp-contract=fast -enable-unsafe-fp-math -run-pass=global-fma | FileCheck %s

--- |
  ; ModuleID = 't2.ll'
  source_filename = "test1.i"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-pc-linux"

  @a = dso_local local_unnamed_addr global double 0.000000e+00, align 8, !dbg !0
  @x = dso_local local_unnamed_addr global double 0.000000e+00, align 8, !dbg !9
  @b = dso_local local_unnamed_addr global double 0.000000e+00, align 8, !dbg !6

  ; Function Attrs: uwtable
  define dso_local void @_Z8computexv() local_unnamed_addr #0 !dbg !16 {
  entry:
    %0 = load double, double* @a, align 8, !dbg !22, !tbaa !23
    %1 = load double, double* @x, align 8, !dbg !27, !tbaa !23
    %2 = fmul fast double %1, %1, !dbg !28
    %mul1 = fmul fast double %2, %0, !dbg !28
    %3 = load double, double* @b, align 8, !dbg !29, !tbaa !23
    %mul2 = fmul fast double %3, %1, !dbg !30
    %sub = fsub fast double %mul1, %mul2, !dbg !31
    call void @llvm.dbg.value(metadata double %sub, metadata !20, metadata !DIExpression()), !dbg !32
    %mul3 = fmul fast double %sub, %1, !dbg !33
    call void @llvm.dbg.value(metadata double %mul3, metadata !21, metadata !DIExpression()), !dbg !34
    tail call void @_Z9ev_tallyxd(double %mul3), !dbg !35
    ret void, !dbg !36
  }

  declare dso_local void @_Z9ev_tallyxd(double) local_unnamed_addr #1

  ; Function Attrs: nounwind readnone speculatable willreturn
  declare void @llvm.dbg.value(metadata, metadata, metadata) #2

  ; Function Attrs: nounwind
  declare void @llvm.stackprotector(i8*, i8**) #3

  attributes #0 = { uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="core-avx2" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+rdrnd,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt,+avx2" "unsafe-fp-math"="true" "use-soft-float"="false" }
  attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="core-avx2" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+rdrnd,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt,+avx2" "unsafe-fp-math"="true" "use-soft-float"="false" }
  attributes #2 = { nounwind readnone speculatable willreturn "target-features"="+avx2" }
  attributes #3 = { nounwind }

  !llvm.dbg.cu = !{!2}
  !llvm.module.flags = !{!11, !12, !13}
  !llvm.dbg.intel.emit_class_debug_always = !{!14}
  !llvm.ident = !{!15}

  !0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
  !1 = distinct !DIGlobalVariable(name: "a", scope: !2, file: !3, line: 2, type: !8, isLocal: false, isDefinition: true)
  !2 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !3, producer: "clang version 8.0.0 (ssh://git-amr-2.devtools.intel.com:29418/dpd_icl-clang 5e80024f5f859103db06520ea4fe0997918c9b5b) (ssh://git-amr-2.devtools.intel.com:29418/dpd_icl-llvm 4d14d999ee8a418ae15cab118cb6185b99e8b5d4)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !5, nameTableKind: None)
  !3 = !DIFile(filename: "test1.i", directory: "/export/iusers/vklochko/ws/xmain_fma_bug/TMP.lammps")
  !4 = !{}
  !5 = !{!0, !6, !9}
  !6 = !DIGlobalVariableExpression(var: !7, expr: !DIExpression())
  !7 = distinct !DIGlobalVariable(name: "b", scope: !2, file: !3, line: 2, type: !8, isLocal: false, isDefinition: true)
  !8 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
  !9 = !DIGlobalVariableExpression(var: !10, expr: !DIExpression())
  !10 = distinct !DIGlobalVariable(name: "x", scope: !2, file: !3, line: 2, type: !8, isLocal: false, isDefinition: true)
  !11 = !{i32 2, !"Dwarf Version", i32 4}
  !12 = !{i32 2, !"Debug Info Version", i32 3}
  !13 = !{i32 1, !"wchar_size", i32 4}
  !14 = !{!"true"}
  !15 = !{!"clang version 8.0.0 (ssh://git-amr-2.devtools.intel.com:29418/dpd_icl-clang 5e80024f5f859103db06520ea4fe0997918c9b5b) (ssh://git-amr-2.devtools.intel.com:29418/dpd_icl-llvm 4d14d999ee8a418ae15cab118cb6185b99e8b5d4)"}
  !16 = distinct !DISubprogram(name: "computex", linkageName: "_Z8computexv", scope: !3, file: !3, line: 5, type: !17, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !19)
  !17 = !DISubroutineType(types: !18)
  !18 = !{null}
  !19 = !{!20, !21}
  !20 = !DILocalVariable(name: "r", scope: !16, file: !3, line: 6, type: !8)
  !21 = !DILocalVariable(name: "fpair", scope: !16, file: !3, line: 7, type: !8)
  !22 = !DILocation(line: 6, column: 14, scope: !16)
  !23 = !{!24, !24, i64 0}
  !24 = !{!"double", !25, i64 0}
  !25 = !{!"omnipotent char", !26, i64 0}
  !26 = !{!"Simple C++ TBAA"}
  !27 = !DILocation(line: 6, column: 16, scope: !16)
  !28 = !DILocation(line: 6, column: 17, scope: !16)
  !29 = !DILocation(line: 6, column: 22, scope: !16)
  !30 = !DILocation(line: 6, column: 23, scope: !16)
  !31 = !DILocation(line: 6, column: 20, scope: !16)
  !32 = !DILocation(line: 6, column: 10, scope: !16)
  !33 = !DILocation(line: 7, column: 19, scope: !16)
  !34 = !DILocation(line: 7, column: 10, scope: !16)
  !35 = !DILocation(line: 8, column: 3, scope: !16)
  !36 = !DILocation(line: 9, column: 1, scope: !16)

...
---
name:            _Z8computexv
alignment:       16
tracksRegLiveness: true
registers:
  - { id: 0, class: fr64 }
  - { id: 1, class: fr64 }
  - { id: 2, class: fr64 }
  - { id: 3, class: fr64 }
  - { id: 4, class: fr64 }
  - { id: 5, class: fr64 }
frameInfo:
  maxAlignment:    1
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: _Z8computexv
    ; CHECK: [[VMOVSDrm_alt:%[0-9]+]]:fr64 = VMOVSDrm_alt $rip, 1, $noreg, @x, $noreg, debug-location !27 :: (dereferenceable load 8 from @x, !tbaa !23)
    ; CHECK: [[VMOVSDrm_alt1:%[0-9]+]]:fr64 = VMOVSDrm_alt $rip, 1, $noreg, @a, $noreg :: (dereferenceable load 8 from @a, !tbaa !23)
    ; CHECK: [[VMOVSDrm_alt2:%[0-9]+]]:fr64 = VMOVSDrm_alt $rip, 1, $noreg, @b, $noreg :: (dereferenceable load 8 from @b, !tbaa !23)
    ; CHECK: %6:fr64 = nofpexcept VMULSDrr [[VMOVSDrm_alt]], [[VMOVSDrm_alt]], implicit $mxcsr, debug-location !33
    ; CHECK: %9:fr64 = nofpexcept VFMSUB213SDr [[VMOVSDrm_alt]], killed [[VMOVSDrm_alt1]], killed [[VMOVSDrm_alt2]], implicit $mxcsr, debug-location !33
    ; CHECK: %5:fr64 = nofpexcept VMULSDrr killed %9, killed %6, implicit $mxcsr, debug-location !33
    ; CHECK: DBG_VALUE %5, $noreg, !21, !DIExpression(), debug-location !34
    ; CHECK: $xmm0 = COPY %5, debug-location !35
    ; CHECK: TCRETURNdi64 @_Z9ev_tallyxd, 0, csr_64, implicit $rsp, implicit $ssp, implicit $xmm0, debug-location !35
    %0:fr64 = VMOVSDrm_alt $rip, 1, $noreg, @x, $noreg, debug-location !27 :: (dereferenceable load 8 from @x, !tbaa !23)
    %1:fr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept VMULSDrr %0, %0, implicit $mxcsr, debug-location !28
    %2:fr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept VMULSDrm killed %1, $rip, 1, $noreg, @a, $noreg, implicit $mxcsr, debug-location !28 :: (dereferenceable load 8 from @a, !tbaa !23)
    %3:fr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept VMULSDrm %0, $rip, 1, $noreg, @b, $noreg, implicit $mxcsr, debug-location !30 :: (dereferenceable load 8 from @b, !tbaa !23)
    %4:fr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept VSUBSDrr killed %2, killed %3, implicit $mxcsr, debug-location !31
    DBG_VALUE %4, $noreg, !20, !DIExpression(), debug-location !32
    %5:fr64 = nnan ninf nsz arcp contract afn reassoc nofpexcept VMULSDrr killed %4, %0, implicit $mxcsr, debug-location !33
    DBG_VALUE %5, $noreg, !21, !DIExpression(), debug-location !34
    $xmm0 = COPY %5, debug-location !35
    TCRETURNdi64 @_Z9ev_tallyxd, 0, csr_64, implicit $rsp, implicit $ssp, implicit $xmm0, debug-location !35

...
