; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_rao_int
; RUN: llc < %s -O0 -verify-machineinstrs -mtriple=i686-unknown-unknown --show-mc-encoding -mattr=+raoint | FileCheck %s --check-prefixes=X86-RAOINT
; RUN: llc < %s -O0 -verify-machineinstrs -mtriple=x86_64-unknown-unknown --show-mc-encoding -mattr=+raoint | FileCheck %s --check-prefixes=X64-RAO-INT
; RUN: llc < %s -O0 -verify-machineinstrs -mtriple=i686-unknown-unknown --show-mc-encoding -mattr=+raoint,+sse2 | FileCheck %s --check-prefixes=X86-RAO-INT-SSE2
; RUN: llc < %s -O0 -verify-machineinstrs -mtriple=i686-unknown-unknown --show-mc-encoding | FileCheck %s --check-prefixes=X86-NO-RAOINT
; RUN: llc < %s -O0 -verify-machineinstrs -mtriple=x86_64-unknown-unknown --show-mc-encoding | FileCheck %s --check-prefixes=X64-NO-RAOINT

define i32 @atomic_add32(i32* nocapture %p, i32 %val) nounwind ssp {
; X86-RAOINT-LABEL: atomic_add32:
; X86-RAOINT:       # %bb.0:
; X86-RAOINT-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x08]
; X86-RAOINT-NEXT:    movl {{[0-9]+}}(%esp), %ecx # encoding: [0x8b,0x4c,0x24,0x04]
; X86-RAOINT-NEXT:    lock addl %eax, (%ecx) # encoding: [0xf0,0x01,0x01]
; X86-RAOINT-NEXT:    lock addl %eax, (%ecx) # encoding: [0xf0,0x01,0x01]
; X86-RAOINT-NEXT:    lock addl %eax, (%ecx) # encoding: [0xf0,0x01,0x01]
; X86-RAOINT-NEXT:    lock addl %eax, (%ecx) # encoding: [0xf0,0x01,0x01]
; X86-RAOINT-NEXT:    lock addl %eax, (%ecx) # encoding: [0xf0,0x01,0x01]
; X86-RAOINT-NEXT:    lock xaddl %eax, (%ecx) # encoding: [0xf0,0x0f,0xc1,0x01]
; X86-RAOINT-NEXT:    retl # encoding: [0xc3]
;
; X64-RAO-INT-LABEL: atomic_add32:
; X64-RAO-INT:       # %bb.0:
; X64-RAO-INT-NEXT:    movl %esi, %eax # encoding: [0x89,0xf0]
; X64-RAO-INT-NEXT:    aaddl %eax, (%rdi) # encoding: [0x0f,0x38,0xfc,0x07]
; X64-RAO-INT-NEXT:    aaddl %eax, (%rdi) # encoding: [0x0f,0x38,0xfc,0x07]
; X64-RAO-INT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X64-RAO-INT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X64-RAO-INT-NEXT:    aaddl %eax, (%rdi) # encoding: [0x0f,0x38,0xfc,0x07]
; X64-RAO-INT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X64-RAO-INT-NEXT:    aaddl %eax, (%rdi) # encoding: [0x0f,0x38,0xfc,0x07]
; X64-RAO-INT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X64-RAO-INT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X64-RAO-INT-NEXT:    aaddl %eax, (%rdi) # encoding: [0x0f,0x38,0xfc,0x07]
; X64-RAO-INT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X64-RAO-INT-NEXT:    lock xaddl %eax, (%rdi) # encoding: [0xf0,0x0f,0xc1,0x07]
; X64-RAO-INT-NEXT:    retq # encoding: [0xc3]
;
; X86-RAO-INT-SSE2-LABEL: atomic_add32:
; X86-RAO-INT-SSE2:       # %bb.0:
; X86-RAO-INT-SSE2-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x08]
; X86-RAO-INT-SSE2-NEXT:    movl {{[0-9]+}}(%esp), %ecx # encoding: [0x8b,0x4c,0x24,0x04]
; X86-RAO-INT-SSE2-NEXT:    aaddl %eax, (%ecx) # encoding: [0x0f,0x38,0xfc,0x01]
; X86-RAO-INT-SSE2-NEXT:    aaddl %eax, (%ecx) # encoding: [0x0f,0x38,0xfc,0x01]
; X86-RAO-INT-SSE2-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X86-RAO-INT-SSE2-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X86-RAO-INT-SSE2-NEXT:    aaddl %eax, (%ecx) # encoding: [0x0f,0x38,0xfc,0x01]
; X86-RAO-INT-SSE2-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X86-RAO-INT-SSE2-NEXT:    aaddl %eax, (%ecx) # encoding: [0x0f,0x38,0xfc,0x01]
; X86-RAO-INT-SSE2-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X86-RAO-INT-SSE2-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X86-RAO-INT-SSE2-NEXT:    aaddl %eax, (%ecx) # encoding: [0x0f,0x38,0xfc,0x01]
; X86-RAO-INT-SSE2-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X86-RAO-INT-SSE2-NEXT:    lock xaddl %eax, (%ecx) # encoding: [0xf0,0x0f,0xc1,0x01]
; X86-RAO-INT-SSE2-NEXT:    retl # encoding: [0xc3]
;
; X86-NO-RAOINT-LABEL: atomic_add32:
; X86-NO-RAOINT:       # %bb.0:
; X86-NO-RAOINT-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x08]
; X86-NO-RAOINT-NEXT:    movl {{[0-9]+}}(%esp), %ecx # encoding: [0x8b,0x4c,0x24,0x04]
; X86-NO-RAOINT-NEXT:    lock addl %eax, (%ecx) # encoding: [0xf0,0x01,0x01]
; X86-NO-RAOINT-NEXT:    lock addl %eax, (%ecx) # encoding: [0xf0,0x01,0x01]
; X86-NO-RAOINT-NEXT:    lock addl %eax, (%ecx) # encoding: [0xf0,0x01,0x01]
; X86-NO-RAOINT-NEXT:    lock addl %eax, (%ecx) # encoding: [0xf0,0x01,0x01]
; X86-NO-RAOINT-NEXT:    lock addl %eax, (%ecx) # encoding: [0xf0,0x01,0x01]
; X86-NO-RAOINT-NEXT:    lock xaddl %eax, (%ecx) # encoding: [0xf0,0x0f,0xc1,0x01]
; X86-NO-RAOINT-NEXT:    retl # encoding: [0xc3]
;
; X64-NO-RAOINT-LABEL: atomic_add32:
; X64-NO-RAOINT:       # %bb.0:
; X64-NO-RAOINT-NEXT:    movl %esi, %eax # encoding: [0x89,0xf0]
; X64-NO-RAOINT-NEXT:    lock addl %eax, (%rdi) # encoding: [0xf0,0x01,0x07]
; X64-NO-RAOINT-NEXT:    lock addl %eax, (%rdi) # encoding: [0xf0,0x01,0x07]
; X64-NO-RAOINT-NEXT:    lock addl %eax, (%rdi) # encoding: [0xf0,0x01,0x07]
; X64-NO-RAOINT-NEXT:    lock addl %eax, (%rdi) # encoding: [0xf0,0x01,0x07]
; X64-NO-RAOINT-NEXT:    lock addl %eax, (%rdi) # encoding: [0xf0,0x01,0x07]
; X64-NO-RAOINT-NEXT:    lock xaddl %eax, (%rdi) # encoding: [0xf0,0x0f,0xc1,0x07]
; X64-NO-RAOINT-NEXT:    retq # encoding: [0xc3]
  %1 = atomicrmw add i32* %p, i32 %val monotonic
  %2 = atomicrmw add i32* %p, i32 %val acquire
  %3 = atomicrmw add i32* %p, i32 %val release
  %4 = atomicrmw add i32* %p, i32 %val acq_rel
  %5 = atomicrmw add i32* %p, i32 %val seq_cst

  %6 = atomicrmw add i32* %p, i32 %val seq_cst
  ret i32 %6
}

define i32 @atomic_or32(i32* nocapture %p, i32 %val) nounwind ssp {
; X86-RAOINT-LABEL: atomic_or32:
; X86-RAOINT:       # %bb.0:
; X86-RAOINT-NEXT:    pushl %esi # encoding: [0x56]
; X86-RAOINT-NEXT:    subl $16, %esp # encoding: [0x83,0xec,0x10]
; X86-RAOINT-NEXT:    movl {{[0-9]+}}(%esp), %ecx # encoding: [0x8b,0x4c,0x24,0x1c]
; X86-RAOINT-NEXT:    movl %ecx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-RAOINT-NEXT:    # encoding: [0x89,0x4c,0x24,0x04]
; X86-RAOINT-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x18]
; X86-RAOINT-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-RAOINT-NEXT:    # encoding: [0x89,0x44,0x24,0x08]
; X86-RAOINT-NEXT:    lock orl %ecx, (%eax) # encoding: [0xf0,0x09,0x08]
; X86-RAOINT-NEXT:    lock orl %ecx, (%eax) # encoding: [0xf0,0x09,0x08]
; X86-RAOINT-NEXT:    lock orl %ecx, (%eax) # encoding: [0xf0,0x09,0x08]
; X86-RAOINT-NEXT:    lock orl %ecx, (%eax) # encoding: [0xf0,0x09,0x08]
; X86-RAOINT-NEXT:    lock orl %ecx, (%eax) # encoding: [0xf0,0x09,0x08]
; X86-RAOINT-NEXT:    movl (%eax), %eax # encoding: [0x8b,0x00]
; X86-RAOINT-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-RAOINT-NEXT:    # encoding: [0x89,0x44,0x24,0x0c]
; X86-RAOINT-NEXT:  .LBB1_1: # %atomicrmw.start
; X86-RAOINT-NEXT:    # =>This Inner Loop Header: Depth=1
; X86-RAOINT-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Reload
; X86-RAOINT-NEXT:    # encoding: [0x8b,0x44,0x24,0x0c]
; X86-RAOINT-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-RAOINT-NEXT:    # encoding: [0x8b,0x4c,0x24,0x08]
; X86-RAOINT-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %esi # 4-byte Reload
; X86-RAOINT-NEXT:    # encoding: [0x8b,0x74,0x24,0x04]
; X86-RAOINT-NEXT:    movl %eax, %edx # encoding: [0x89,0xc2]
; X86-RAOINT-NEXT:    orl %esi, %edx # encoding: [0x09,0xf2]
; X86-RAOINT-NEXT:    lock cmpxchgl %edx, (%ecx) # encoding: [0xf0,0x0f,0xb1,0x11]
; X86-RAOINT-NEXT:    sete %cl # encoding: [0x0f,0x94,0xc1]
; X86-RAOINT-NEXT:    movl %eax, (%esp) # 4-byte Spill
; X86-RAOINT-NEXT:    # encoding: [0x89,0x04,0x24]
; X86-RAOINT-NEXT:    testb $1, %cl # encoding: [0xf6,0xc1,0x01]
; X86-RAOINT-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-RAOINT-NEXT:    # encoding: [0x89,0x44,0x24,0x0c]
; X86-RAOINT-NEXT:    jne .LBB1_2 # encoding: [0x75,A]
; X86-RAOINT-NEXT:    # fixup A - offset: 1, value: .LBB1_2-1, kind: FK_PCRel_1
; X86-RAOINT-NEXT:    jmp .LBB1_1 # encoding: [0xeb,A]
; X86-RAOINT-NEXT:    # fixup A - offset: 1, value: .LBB1_1-1, kind: FK_PCRel_1
; X86-RAOINT-NEXT:  .LBB1_2: # %atomicrmw.end
; X86-RAOINT-NEXT:    movl (%esp), %eax # 4-byte Reload
; X86-RAOINT-NEXT:    # encoding: [0x8b,0x04,0x24]
; X86-RAOINT-NEXT:    addl $16, %esp # encoding: [0x83,0xc4,0x10]
; X86-RAOINT-NEXT:    popl %esi # encoding: [0x5e]
; X86-RAOINT-NEXT:    retl # encoding: [0xc3]
;
; X64-RAO-INT-LABEL: atomic_or32:
; X64-RAO-INT:       # %bb.0:
; X64-RAO-INT-NEXT:    movq %rdi, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; X64-RAO-INT-NEXT:    # encoding: [0x48,0x89,0x7c,0x24,0xf0]
; X64-RAO-INT-NEXT:    movl %esi, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; X64-RAO-INT-NEXT:    # encoding: [0x89,0x74,0x24,0xf8]
; X64-RAO-INT-NEXT:    aorl %esi, (%rdi) # encoding: [0xf2,0x0f,0x38,0xfc,0x37]
; X64-RAO-INT-NEXT:    aorl %esi, (%rdi) # encoding: [0xf2,0x0f,0x38,0xfc,0x37]
; X64-RAO-INT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X64-RAO-INT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X64-RAO-INT-NEXT:    aorl %esi, (%rdi) # encoding: [0xf2,0x0f,0x38,0xfc,0x37]
; X64-RAO-INT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X64-RAO-INT-NEXT:    aorl %esi, (%rdi) # encoding: [0xf2,0x0f,0x38,0xfc,0x37]
; X64-RAO-INT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X64-RAO-INT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X64-RAO-INT-NEXT:    aorl %esi, (%rdi) # encoding: [0xf2,0x0f,0x38,0xfc,0x37]
; X64-RAO-INT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X64-RAO-INT-NEXT:    movl (%rdi), %eax # encoding: [0x8b,0x07]
; X64-RAO-INT-NEXT:    movl %eax, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; X64-RAO-INT-NEXT:    # encoding: [0x89,0x44,0x24,0xfc]
; X64-RAO-INT-NEXT:  .LBB1_1: # %atomicrmw.start
; X64-RAO-INT-NEXT:    # =>This Inner Loop Header: Depth=1
; X64-RAO-INT-NEXT:    movl {{[-0-9]+}}(%r{{[sb]}}p), %eax # 4-byte Reload
; X64-RAO-INT-NEXT:    # encoding: [0x8b,0x44,0x24,0xfc]
; X64-RAO-INT-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rcx # 8-byte Reload
; X64-RAO-INT-NEXT:    # encoding: [0x48,0x8b,0x4c,0x24,0xf0]
; X64-RAO-INT-NEXT:    movl {{[-0-9]+}}(%r{{[sb]}}p), %esi # 4-byte Reload
; X64-RAO-INT-NEXT:    # encoding: [0x8b,0x74,0x24,0xf8]
; X64-RAO-INT-NEXT:    movl %eax, %edx # encoding: [0x89,0xc2]
; X64-RAO-INT-NEXT:    orl %esi, %edx # encoding: [0x09,0xf2]
; X64-RAO-INT-NEXT:    lock cmpxchgl %edx, (%rcx) # encoding: [0xf0,0x0f,0xb1,0x11]
; X64-RAO-INT-NEXT:    sete %cl # encoding: [0x0f,0x94,0xc1]
; X64-RAO-INT-NEXT:    movl %eax, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; X64-RAO-INT-NEXT:    # encoding: [0x89,0x44,0x24,0xec]
; X64-RAO-INT-NEXT:    testb $1, %cl # encoding: [0xf6,0xc1,0x01]
; X64-RAO-INT-NEXT:    movl %eax, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; X64-RAO-INT-NEXT:    # encoding: [0x89,0x44,0x24,0xfc]
; X64-RAO-INT-NEXT:    jne .LBB1_2 # encoding: [0x75,A]
; X64-RAO-INT-NEXT:    # fixup A - offset: 1, value: .LBB1_2-1, kind: FK_PCRel_1
; X64-RAO-INT-NEXT:    jmp .LBB1_1 # encoding: [0xeb,A]
; X64-RAO-INT-NEXT:    # fixup A - offset: 1, value: .LBB1_1-1, kind: FK_PCRel_1
; X64-RAO-INT-NEXT:  .LBB1_2: # %atomicrmw.end
; X64-RAO-INT-NEXT:    movl {{[-0-9]+}}(%r{{[sb]}}p), %eax # 4-byte Reload
; X64-RAO-INT-NEXT:    # encoding: [0x8b,0x44,0x24,0xec]
; X64-RAO-INT-NEXT:    retq # encoding: [0xc3]
;
; X86-RAO-INT-SSE2-LABEL: atomic_or32:
; X86-RAO-INT-SSE2:       # %bb.0:
; X86-RAO-INT-SSE2-NEXT:    pushl %esi # encoding: [0x56]
; X86-RAO-INT-SSE2-NEXT:    subl $16, %esp # encoding: [0x83,0xec,0x10]
; X86-RAO-INT-SSE2-NEXT:    movl {{[0-9]+}}(%esp), %ecx # encoding: [0x8b,0x4c,0x24,0x1c]
; X86-RAO-INT-SSE2-NEXT:    movl %ecx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-RAO-INT-SSE2-NEXT:    # encoding: [0x89,0x4c,0x24,0x04]
; X86-RAO-INT-SSE2-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x18]
; X86-RAO-INT-SSE2-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-RAO-INT-SSE2-NEXT:    # encoding: [0x89,0x44,0x24,0x08]
; X86-RAO-INT-SSE2-NEXT:    aorl %ecx, (%eax) # encoding: [0xf2,0x0f,0x38,0xfc,0x08]
; X86-RAO-INT-SSE2-NEXT:    aorl %ecx, (%eax) # encoding: [0xf2,0x0f,0x38,0xfc,0x08]
; X86-RAO-INT-SSE2-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X86-RAO-INT-SSE2-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X86-RAO-INT-SSE2-NEXT:    aorl %ecx, (%eax) # encoding: [0xf2,0x0f,0x38,0xfc,0x08]
; X86-RAO-INT-SSE2-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X86-RAO-INT-SSE2-NEXT:    aorl %ecx, (%eax) # encoding: [0xf2,0x0f,0x38,0xfc,0x08]
; X86-RAO-INT-SSE2-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X86-RAO-INT-SSE2-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X86-RAO-INT-SSE2-NEXT:    aorl %ecx, (%eax) # encoding: [0xf2,0x0f,0x38,0xfc,0x08]
; X86-RAO-INT-SSE2-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X86-RAO-INT-SSE2-NEXT:    movl (%eax), %eax # encoding: [0x8b,0x00]
; X86-RAO-INT-SSE2-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-RAO-INT-SSE2-NEXT:    # encoding: [0x89,0x44,0x24,0x0c]
; X86-RAO-INT-SSE2-NEXT:  .LBB1_1: # %atomicrmw.start
; X86-RAO-INT-SSE2-NEXT:    # =>This Inner Loop Header: Depth=1
; X86-RAO-INT-SSE2-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Reload
; X86-RAO-INT-SSE2-NEXT:    # encoding: [0x8b,0x44,0x24,0x0c]
; X86-RAO-INT-SSE2-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-RAO-INT-SSE2-NEXT:    # encoding: [0x8b,0x4c,0x24,0x08]
; X86-RAO-INT-SSE2-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %esi # 4-byte Reload
; X86-RAO-INT-SSE2-NEXT:    # encoding: [0x8b,0x74,0x24,0x04]
; X86-RAO-INT-SSE2-NEXT:    movl %eax, %edx # encoding: [0x89,0xc2]
; X86-RAO-INT-SSE2-NEXT:    orl %esi, %edx # encoding: [0x09,0xf2]
; X86-RAO-INT-SSE2-NEXT:    lock cmpxchgl %edx, (%ecx) # encoding: [0xf0,0x0f,0xb1,0x11]
; X86-RAO-INT-SSE2-NEXT:    sete %cl # encoding: [0x0f,0x94,0xc1]
; X86-RAO-INT-SSE2-NEXT:    movl %eax, (%esp) # 4-byte Spill
; X86-RAO-INT-SSE2-NEXT:    # encoding: [0x89,0x04,0x24]
; X86-RAO-INT-SSE2-NEXT:    testb $1, %cl # encoding: [0xf6,0xc1,0x01]
; X86-RAO-INT-SSE2-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-RAO-INT-SSE2-NEXT:    # encoding: [0x89,0x44,0x24,0x0c]
; X86-RAO-INT-SSE2-NEXT:    jne .LBB1_2 # encoding: [0x75,A]
; X86-RAO-INT-SSE2-NEXT:    # fixup A - offset: 1, value: .LBB1_2-1, kind: FK_PCRel_1
; X86-RAO-INT-SSE2-NEXT:    jmp .LBB1_1 # encoding: [0xeb,A]
; X86-RAO-INT-SSE2-NEXT:    # fixup A - offset: 1, value: .LBB1_1-1, kind: FK_PCRel_1
; X86-RAO-INT-SSE2-NEXT:  .LBB1_2: # %atomicrmw.end
; X86-RAO-INT-SSE2-NEXT:    movl (%esp), %eax # 4-byte Reload
; X86-RAO-INT-SSE2-NEXT:    # encoding: [0x8b,0x04,0x24]
; X86-RAO-INT-SSE2-NEXT:    addl $16, %esp # encoding: [0x83,0xc4,0x10]
; X86-RAO-INT-SSE2-NEXT:    popl %esi # encoding: [0x5e]
; X86-RAO-INT-SSE2-NEXT:    retl # encoding: [0xc3]
;
; X86-NO-RAOINT-LABEL: atomic_or32:
; X86-NO-RAOINT:       # %bb.0:
; X86-NO-RAOINT-NEXT:    pushl %esi # encoding: [0x56]
; X86-NO-RAOINT-NEXT:    subl $16, %esp # encoding: [0x83,0xec,0x10]
; X86-NO-RAOINT-NEXT:    movl {{[0-9]+}}(%esp), %ecx # encoding: [0x8b,0x4c,0x24,0x1c]
; X86-NO-RAOINT-NEXT:    movl %ecx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NO-RAOINT-NEXT:    # encoding: [0x89,0x4c,0x24,0x04]
; X86-NO-RAOINT-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x18]
; X86-NO-RAOINT-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NO-RAOINT-NEXT:    # encoding: [0x89,0x44,0x24,0x08]
; X86-NO-RAOINT-NEXT:    lock orl %ecx, (%eax) # encoding: [0xf0,0x09,0x08]
; X86-NO-RAOINT-NEXT:    lock orl %ecx, (%eax) # encoding: [0xf0,0x09,0x08]
; X86-NO-RAOINT-NEXT:    lock orl %ecx, (%eax) # encoding: [0xf0,0x09,0x08]
; X86-NO-RAOINT-NEXT:    lock orl %ecx, (%eax) # encoding: [0xf0,0x09,0x08]
; X86-NO-RAOINT-NEXT:    lock orl %ecx, (%eax) # encoding: [0xf0,0x09,0x08]
; X86-NO-RAOINT-NEXT:    movl (%eax), %eax # encoding: [0x8b,0x00]
; X86-NO-RAOINT-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NO-RAOINT-NEXT:    # encoding: [0x89,0x44,0x24,0x0c]
; X86-NO-RAOINT-NEXT:  .LBB1_1: # %atomicrmw.start
; X86-NO-RAOINT-NEXT:    # =>This Inner Loop Header: Depth=1
; X86-NO-RAOINT-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Reload
; X86-NO-RAOINT-NEXT:    # encoding: [0x8b,0x44,0x24,0x0c]
; X86-NO-RAOINT-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-NO-RAOINT-NEXT:    # encoding: [0x8b,0x4c,0x24,0x08]
; X86-NO-RAOINT-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %esi # 4-byte Reload
; X86-NO-RAOINT-NEXT:    # encoding: [0x8b,0x74,0x24,0x04]
; X86-NO-RAOINT-NEXT:    movl %eax, %edx # encoding: [0x89,0xc2]
; X86-NO-RAOINT-NEXT:    orl %esi, %edx # encoding: [0x09,0xf2]
; X86-NO-RAOINT-NEXT:    lock cmpxchgl %edx, (%ecx) # encoding: [0xf0,0x0f,0xb1,0x11]
; X86-NO-RAOINT-NEXT:    sete %cl # encoding: [0x0f,0x94,0xc1]
; X86-NO-RAOINT-NEXT:    movl %eax, (%esp) # 4-byte Spill
; X86-NO-RAOINT-NEXT:    # encoding: [0x89,0x04,0x24]
; X86-NO-RAOINT-NEXT:    testb $1, %cl # encoding: [0xf6,0xc1,0x01]
; X86-NO-RAOINT-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NO-RAOINT-NEXT:    # encoding: [0x89,0x44,0x24,0x0c]
; X86-NO-RAOINT-NEXT:    jne .LBB1_2 # encoding: [0x75,A]
; X86-NO-RAOINT-NEXT:    # fixup A - offset: 1, value: .LBB1_2-1, kind: FK_PCRel_1
; X86-NO-RAOINT-NEXT:    jmp .LBB1_1 # encoding: [0xeb,A]
; X86-NO-RAOINT-NEXT:    # fixup A - offset: 1, value: .LBB1_1-1, kind: FK_PCRel_1
; X86-NO-RAOINT-NEXT:  .LBB1_2: # %atomicrmw.end
; X86-NO-RAOINT-NEXT:    movl (%esp), %eax # 4-byte Reload
; X86-NO-RAOINT-NEXT:    # encoding: [0x8b,0x04,0x24]
; X86-NO-RAOINT-NEXT:    addl $16, %esp # encoding: [0x83,0xc4,0x10]
; X86-NO-RAOINT-NEXT:    popl %esi # encoding: [0x5e]
; X86-NO-RAOINT-NEXT:    retl # encoding: [0xc3]
;
; X64-NO-RAOINT-LABEL: atomic_or32:
; X64-NO-RAOINT:       # %bb.0:
; X64-NO-RAOINT-NEXT:    movq %rdi, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; X64-NO-RAOINT-NEXT:    # encoding: [0x48,0x89,0x7c,0x24,0xf0]
; X64-NO-RAOINT-NEXT:    movl %esi, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; X64-NO-RAOINT-NEXT:    # encoding: [0x89,0x74,0x24,0xf8]
; X64-NO-RAOINT-NEXT:    lock orl %esi, (%rdi) # encoding: [0xf0,0x09,0x37]
; X64-NO-RAOINT-NEXT:    lock orl %esi, (%rdi) # encoding: [0xf0,0x09,0x37]
; X64-NO-RAOINT-NEXT:    lock orl %esi, (%rdi) # encoding: [0xf0,0x09,0x37]
; X64-NO-RAOINT-NEXT:    lock orl %esi, (%rdi) # encoding: [0xf0,0x09,0x37]
; X64-NO-RAOINT-NEXT:    lock orl %esi, (%rdi) # encoding: [0xf0,0x09,0x37]
; X64-NO-RAOINT-NEXT:    movl (%rdi), %eax # encoding: [0x8b,0x07]
; X64-NO-RAOINT-NEXT:    movl %eax, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; X64-NO-RAOINT-NEXT:    # encoding: [0x89,0x44,0x24,0xfc]
; X64-NO-RAOINT-NEXT:  .LBB1_1: # %atomicrmw.start
; X64-NO-RAOINT-NEXT:    # =>This Inner Loop Header: Depth=1
; X64-NO-RAOINT-NEXT:    movl {{[-0-9]+}}(%r{{[sb]}}p), %eax # 4-byte Reload
; X64-NO-RAOINT-NEXT:    # encoding: [0x8b,0x44,0x24,0xfc]
; X64-NO-RAOINT-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rcx # 8-byte Reload
; X64-NO-RAOINT-NEXT:    # encoding: [0x48,0x8b,0x4c,0x24,0xf0]
; X64-NO-RAOINT-NEXT:    movl {{[-0-9]+}}(%r{{[sb]}}p), %esi # 4-byte Reload
; X64-NO-RAOINT-NEXT:    # encoding: [0x8b,0x74,0x24,0xf8]
; X64-NO-RAOINT-NEXT:    movl %eax, %edx # encoding: [0x89,0xc2]
; X64-NO-RAOINT-NEXT:    orl %esi, %edx # encoding: [0x09,0xf2]
; X64-NO-RAOINT-NEXT:    lock cmpxchgl %edx, (%rcx) # encoding: [0xf0,0x0f,0xb1,0x11]
; X64-NO-RAOINT-NEXT:    sete %cl # encoding: [0x0f,0x94,0xc1]
; X64-NO-RAOINT-NEXT:    movl %eax, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; X64-NO-RAOINT-NEXT:    # encoding: [0x89,0x44,0x24,0xec]
; X64-NO-RAOINT-NEXT:    testb $1, %cl # encoding: [0xf6,0xc1,0x01]
; X64-NO-RAOINT-NEXT:    movl %eax, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; X64-NO-RAOINT-NEXT:    # encoding: [0x89,0x44,0x24,0xfc]
; X64-NO-RAOINT-NEXT:    jne .LBB1_2 # encoding: [0x75,A]
; X64-NO-RAOINT-NEXT:    # fixup A - offset: 1, value: .LBB1_2-1, kind: FK_PCRel_1
; X64-NO-RAOINT-NEXT:    jmp .LBB1_1 # encoding: [0xeb,A]
; X64-NO-RAOINT-NEXT:    # fixup A - offset: 1, value: .LBB1_1-1, kind: FK_PCRel_1
; X64-NO-RAOINT-NEXT:  .LBB1_2: # %atomicrmw.end
; X64-NO-RAOINT-NEXT:    movl {{[-0-9]+}}(%r{{[sb]}}p), %eax # 4-byte Reload
; X64-NO-RAOINT-NEXT:    # encoding: [0x8b,0x44,0x24,0xec]
; X64-NO-RAOINT-NEXT:    retq # encoding: [0xc3]
  %1 = atomicrmw or i32* %p, i32 %val monotonic
  %2 = atomicrmw or i32* %p, i32 %val acquire
  %3 = atomicrmw or i32* %p, i32 %val release
  %4 = atomicrmw or i32* %p, i32 %val acq_rel
  %5 = atomicrmw or i32* %p, i32 %val seq_cst

  %6 = atomicrmw or i32* %p, i32 %val seq_cst
  ret i32 %6
}

define i32 @atomic_xor32(i32* nocapture %p, i32 %val) nounwind ssp {
; X86-RAOINT-LABEL: atomic_xor32:
; X86-RAOINT:       # %bb.0:
; X86-RAOINT-NEXT:    pushl %esi # encoding: [0x56]
; X86-RAOINT-NEXT:    subl $16, %esp # encoding: [0x83,0xec,0x10]
; X86-RAOINT-NEXT:    movl {{[0-9]+}}(%esp), %ecx # encoding: [0x8b,0x4c,0x24,0x1c]
; X86-RAOINT-NEXT:    movl %ecx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-RAOINT-NEXT:    # encoding: [0x89,0x4c,0x24,0x04]
; X86-RAOINT-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x18]
; X86-RAOINT-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-RAOINT-NEXT:    # encoding: [0x89,0x44,0x24,0x08]
; X86-RAOINT-NEXT:    lock xorl %ecx, (%eax) # encoding: [0xf0,0x31,0x08]
; X86-RAOINT-NEXT:    lock xorl %ecx, (%eax) # encoding: [0xf0,0x31,0x08]
; X86-RAOINT-NEXT:    lock xorl %ecx, (%eax) # encoding: [0xf0,0x31,0x08]
; X86-RAOINT-NEXT:    lock xorl %ecx, (%eax) # encoding: [0xf0,0x31,0x08]
; X86-RAOINT-NEXT:    lock xorl %ecx, (%eax) # encoding: [0xf0,0x31,0x08]
; X86-RAOINT-NEXT:    movl (%eax), %eax # encoding: [0x8b,0x00]
; X86-RAOINT-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-RAOINT-NEXT:    # encoding: [0x89,0x44,0x24,0x0c]
; X86-RAOINT-NEXT:  .LBB2_1: # %atomicrmw.start
; X86-RAOINT-NEXT:    # =>This Inner Loop Header: Depth=1
; X86-RAOINT-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Reload
; X86-RAOINT-NEXT:    # encoding: [0x8b,0x44,0x24,0x0c]
; X86-RAOINT-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-RAOINT-NEXT:    # encoding: [0x8b,0x4c,0x24,0x08]
; X86-RAOINT-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %esi # 4-byte Reload
; X86-RAOINT-NEXT:    # encoding: [0x8b,0x74,0x24,0x04]
; X86-RAOINT-NEXT:    movl %eax, %edx # encoding: [0x89,0xc2]
; X86-RAOINT-NEXT:    xorl %esi, %edx # encoding: [0x31,0xf2]
; X86-RAOINT-NEXT:    lock cmpxchgl %edx, (%ecx) # encoding: [0xf0,0x0f,0xb1,0x11]
; X86-RAOINT-NEXT:    sete %cl # encoding: [0x0f,0x94,0xc1]
; X86-RAOINT-NEXT:    movl %eax, (%esp) # 4-byte Spill
; X86-RAOINT-NEXT:    # encoding: [0x89,0x04,0x24]
; X86-RAOINT-NEXT:    testb $1, %cl # encoding: [0xf6,0xc1,0x01]
; X86-RAOINT-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-RAOINT-NEXT:    # encoding: [0x89,0x44,0x24,0x0c]
; X86-RAOINT-NEXT:    jne .LBB2_2 # encoding: [0x75,A]
; X86-RAOINT-NEXT:    # fixup A - offset: 1, value: .LBB2_2-1, kind: FK_PCRel_1
; X86-RAOINT-NEXT:    jmp .LBB2_1 # encoding: [0xeb,A]
; X86-RAOINT-NEXT:    # fixup A - offset: 1, value: .LBB2_1-1, kind: FK_PCRel_1
; X86-RAOINT-NEXT:  .LBB2_2: # %atomicrmw.end
; X86-RAOINT-NEXT:    movl (%esp), %eax # 4-byte Reload
; X86-RAOINT-NEXT:    # encoding: [0x8b,0x04,0x24]
; X86-RAOINT-NEXT:    addl $16, %esp # encoding: [0x83,0xc4,0x10]
; X86-RAOINT-NEXT:    popl %esi # encoding: [0x5e]
; X86-RAOINT-NEXT:    retl # encoding: [0xc3]
;
; X64-RAO-INT-LABEL: atomic_xor32:
; X64-RAO-INT:       # %bb.0:
; X64-RAO-INT-NEXT:    movq %rdi, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; X64-RAO-INT-NEXT:    # encoding: [0x48,0x89,0x7c,0x24,0xf0]
; X64-RAO-INT-NEXT:    movl %esi, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; X64-RAO-INT-NEXT:    # encoding: [0x89,0x74,0x24,0xf8]
; X64-RAO-INT-NEXT:    axorl %esi, (%rdi) # encoding: [0xf3,0x0f,0x38,0xfc,0x37]
; X64-RAO-INT-NEXT:    axorl %esi, (%rdi) # encoding: [0xf3,0x0f,0x38,0xfc,0x37]
; X64-RAO-INT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X64-RAO-INT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X64-RAO-INT-NEXT:    axorl %esi, (%rdi) # encoding: [0xf3,0x0f,0x38,0xfc,0x37]
; X64-RAO-INT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X64-RAO-INT-NEXT:    axorl %esi, (%rdi) # encoding: [0xf3,0x0f,0x38,0xfc,0x37]
; X64-RAO-INT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X64-RAO-INT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X64-RAO-INT-NEXT:    axorl %esi, (%rdi) # encoding: [0xf3,0x0f,0x38,0xfc,0x37]
; X64-RAO-INT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X64-RAO-INT-NEXT:    movl (%rdi), %eax # encoding: [0x8b,0x07]
; X64-RAO-INT-NEXT:    movl %eax, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; X64-RAO-INT-NEXT:    # encoding: [0x89,0x44,0x24,0xfc]
; X64-RAO-INT-NEXT:  .LBB2_1: # %atomicrmw.start
; X64-RAO-INT-NEXT:    # =>This Inner Loop Header: Depth=1
; X64-RAO-INT-NEXT:    movl {{[-0-9]+}}(%r{{[sb]}}p), %eax # 4-byte Reload
; X64-RAO-INT-NEXT:    # encoding: [0x8b,0x44,0x24,0xfc]
; X64-RAO-INT-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rcx # 8-byte Reload
; X64-RAO-INT-NEXT:    # encoding: [0x48,0x8b,0x4c,0x24,0xf0]
; X64-RAO-INT-NEXT:    movl {{[-0-9]+}}(%r{{[sb]}}p), %esi # 4-byte Reload
; X64-RAO-INT-NEXT:    # encoding: [0x8b,0x74,0x24,0xf8]
; X64-RAO-INT-NEXT:    movl %eax, %edx # encoding: [0x89,0xc2]
; X64-RAO-INT-NEXT:    xorl %esi, %edx # encoding: [0x31,0xf2]
; X64-RAO-INT-NEXT:    lock cmpxchgl %edx, (%rcx) # encoding: [0xf0,0x0f,0xb1,0x11]
; X64-RAO-INT-NEXT:    sete %cl # encoding: [0x0f,0x94,0xc1]
; X64-RAO-INT-NEXT:    movl %eax, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; X64-RAO-INT-NEXT:    # encoding: [0x89,0x44,0x24,0xec]
; X64-RAO-INT-NEXT:    testb $1, %cl # encoding: [0xf6,0xc1,0x01]
; X64-RAO-INT-NEXT:    movl %eax, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; X64-RAO-INT-NEXT:    # encoding: [0x89,0x44,0x24,0xfc]
; X64-RAO-INT-NEXT:    jne .LBB2_2 # encoding: [0x75,A]
; X64-RAO-INT-NEXT:    # fixup A - offset: 1, value: .LBB2_2-1, kind: FK_PCRel_1
; X64-RAO-INT-NEXT:    jmp .LBB2_1 # encoding: [0xeb,A]
; X64-RAO-INT-NEXT:    # fixup A - offset: 1, value: .LBB2_1-1, kind: FK_PCRel_1
; X64-RAO-INT-NEXT:  .LBB2_2: # %atomicrmw.end
; X64-RAO-INT-NEXT:    movl {{[-0-9]+}}(%r{{[sb]}}p), %eax # 4-byte Reload
; X64-RAO-INT-NEXT:    # encoding: [0x8b,0x44,0x24,0xec]
; X64-RAO-INT-NEXT:    retq # encoding: [0xc3]
;
; X86-RAO-INT-SSE2-LABEL: atomic_xor32:
; X86-RAO-INT-SSE2:       # %bb.0:
; X86-RAO-INT-SSE2-NEXT:    pushl %esi # encoding: [0x56]
; X86-RAO-INT-SSE2-NEXT:    subl $16, %esp # encoding: [0x83,0xec,0x10]
; X86-RAO-INT-SSE2-NEXT:    movl {{[0-9]+}}(%esp), %ecx # encoding: [0x8b,0x4c,0x24,0x1c]
; X86-RAO-INT-SSE2-NEXT:    movl %ecx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-RAO-INT-SSE2-NEXT:    # encoding: [0x89,0x4c,0x24,0x04]
; X86-RAO-INT-SSE2-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x18]
; X86-RAO-INT-SSE2-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-RAO-INT-SSE2-NEXT:    # encoding: [0x89,0x44,0x24,0x08]
; X86-RAO-INT-SSE2-NEXT:    axorl %ecx, (%eax) # encoding: [0xf3,0x0f,0x38,0xfc,0x08]
; X86-RAO-INT-SSE2-NEXT:    axorl %ecx, (%eax) # encoding: [0xf3,0x0f,0x38,0xfc,0x08]
; X86-RAO-INT-SSE2-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X86-RAO-INT-SSE2-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X86-RAO-INT-SSE2-NEXT:    axorl %ecx, (%eax) # encoding: [0xf3,0x0f,0x38,0xfc,0x08]
; X86-RAO-INT-SSE2-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X86-RAO-INT-SSE2-NEXT:    axorl %ecx, (%eax) # encoding: [0xf3,0x0f,0x38,0xfc,0x08]
; X86-RAO-INT-SSE2-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X86-RAO-INT-SSE2-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X86-RAO-INT-SSE2-NEXT:    axorl %ecx, (%eax) # encoding: [0xf3,0x0f,0x38,0xfc,0x08]
; X86-RAO-INT-SSE2-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X86-RAO-INT-SSE2-NEXT:    movl (%eax), %eax # encoding: [0x8b,0x00]
; X86-RAO-INT-SSE2-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-RAO-INT-SSE2-NEXT:    # encoding: [0x89,0x44,0x24,0x0c]
; X86-RAO-INT-SSE2-NEXT:  .LBB2_1: # %atomicrmw.start
; X86-RAO-INT-SSE2-NEXT:    # =>This Inner Loop Header: Depth=1
; X86-RAO-INT-SSE2-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Reload
; X86-RAO-INT-SSE2-NEXT:    # encoding: [0x8b,0x44,0x24,0x0c]
; X86-RAO-INT-SSE2-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-RAO-INT-SSE2-NEXT:    # encoding: [0x8b,0x4c,0x24,0x08]
; X86-RAO-INT-SSE2-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %esi # 4-byte Reload
; X86-RAO-INT-SSE2-NEXT:    # encoding: [0x8b,0x74,0x24,0x04]
; X86-RAO-INT-SSE2-NEXT:    movl %eax, %edx # encoding: [0x89,0xc2]
; X86-RAO-INT-SSE2-NEXT:    xorl %esi, %edx # encoding: [0x31,0xf2]
; X86-RAO-INT-SSE2-NEXT:    lock cmpxchgl %edx, (%ecx) # encoding: [0xf0,0x0f,0xb1,0x11]
; X86-RAO-INT-SSE2-NEXT:    sete %cl # encoding: [0x0f,0x94,0xc1]
; X86-RAO-INT-SSE2-NEXT:    movl %eax, (%esp) # 4-byte Spill
; X86-RAO-INT-SSE2-NEXT:    # encoding: [0x89,0x04,0x24]
; X86-RAO-INT-SSE2-NEXT:    testb $1, %cl # encoding: [0xf6,0xc1,0x01]
; X86-RAO-INT-SSE2-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-RAO-INT-SSE2-NEXT:    # encoding: [0x89,0x44,0x24,0x0c]
; X86-RAO-INT-SSE2-NEXT:    jne .LBB2_2 # encoding: [0x75,A]
; X86-RAO-INT-SSE2-NEXT:    # fixup A - offset: 1, value: .LBB2_2-1, kind: FK_PCRel_1
; X86-RAO-INT-SSE2-NEXT:    jmp .LBB2_1 # encoding: [0xeb,A]
; X86-RAO-INT-SSE2-NEXT:    # fixup A - offset: 1, value: .LBB2_1-1, kind: FK_PCRel_1
; X86-RAO-INT-SSE2-NEXT:  .LBB2_2: # %atomicrmw.end
; X86-RAO-INT-SSE2-NEXT:    movl (%esp), %eax # 4-byte Reload
; X86-RAO-INT-SSE2-NEXT:    # encoding: [0x8b,0x04,0x24]
; X86-RAO-INT-SSE2-NEXT:    addl $16, %esp # encoding: [0x83,0xc4,0x10]
; X86-RAO-INT-SSE2-NEXT:    popl %esi # encoding: [0x5e]
; X86-RAO-INT-SSE2-NEXT:    retl # encoding: [0xc3]
;
; X86-NO-RAOINT-LABEL: atomic_xor32:
; X86-NO-RAOINT:       # %bb.0:
; X86-NO-RAOINT-NEXT:    pushl %esi # encoding: [0x56]
; X86-NO-RAOINT-NEXT:    subl $16, %esp # encoding: [0x83,0xec,0x10]
; X86-NO-RAOINT-NEXT:    movl {{[0-9]+}}(%esp), %ecx # encoding: [0x8b,0x4c,0x24,0x1c]
; X86-NO-RAOINT-NEXT:    movl %ecx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NO-RAOINT-NEXT:    # encoding: [0x89,0x4c,0x24,0x04]
; X86-NO-RAOINT-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x18]
; X86-NO-RAOINT-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NO-RAOINT-NEXT:    # encoding: [0x89,0x44,0x24,0x08]
; X86-NO-RAOINT-NEXT:    lock xorl %ecx, (%eax) # encoding: [0xf0,0x31,0x08]
; X86-NO-RAOINT-NEXT:    lock xorl %ecx, (%eax) # encoding: [0xf0,0x31,0x08]
; X86-NO-RAOINT-NEXT:    lock xorl %ecx, (%eax) # encoding: [0xf0,0x31,0x08]
; X86-NO-RAOINT-NEXT:    lock xorl %ecx, (%eax) # encoding: [0xf0,0x31,0x08]
; X86-NO-RAOINT-NEXT:    lock xorl %ecx, (%eax) # encoding: [0xf0,0x31,0x08]
; X86-NO-RAOINT-NEXT:    movl (%eax), %eax # encoding: [0x8b,0x00]
; X86-NO-RAOINT-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NO-RAOINT-NEXT:    # encoding: [0x89,0x44,0x24,0x0c]
; X86-NO-RAOINT-NEXT:  .LBB2_1: # %atomicrmw.start
; X86-NO-RAOINT-NEXT:    # =>This Inner Loop Header: Depth=1
; X86-NO-RAOINT-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Reload
; X86-NO-RAOINT-NEXT:    # encoding: [0x8b,0x44,0x24,0x0c]
; X86-NO-RAOINT-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-NO-RAOINT-NEXT:    # encoding: [0x8b,0x4c,0x24,0x08]
; X86-NO-RAOINT-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %esi # 4-byte Reload
; X86-NO-RAOINT-NEXT:    # encoding: [0x8b,0x74,0x24,0x04]
; X86-NO-RAOINT-NEXT:    movl %eax, %edx # encoding: [0x89,0xc2]
; X86-NO-RAOINT-NEXT:    xorl %esi, %edx # encoding: [0x31,0xf2]
; X86-NO-RAOINT-NEXT:    lock cmpxchgl %edx, (%ecx) # encoding: [0xf0,0x0f,0xb1,0x11]
; X86-NO-RAOINT-NEXT:    sete %cl # encoding: [0x0f,0x94,0xc1]
; X86-NO-RAOINT-NEXT:    movl %eax, (%esp) # 4-byte Spill
; X86-NO-RAOINT-NEXT:    # encoding: [0x89,0x04,0x24]
; X86-NO-RAOINT-NEXT:    testb $1, %cl # encoding: [0xf6,0xc1,0x01]
; X86-NO-RAOINT-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NO-RAOINT-NEXT:    # encoding: [0x89,0x44,0x24,0x0c]
; X86-NO-RAOINT-NEXT:    jne .LBB2_2 # encoding: [0x75,A]
; X86-NO-RAOINT-NEXT:    # fixup A - offset: 1, value: .LBB2_2-1, kind: FK_PCRel_1
; X86-NO-RAOINT-NEXT:    jmp .LBB2_1 # encoding: [0xeb,A]
; X86-NO-RAOINT-NEXT:    # fixup A - offset: 1, value: .LBB2_1-1, kind: FK_PCRel_1
; X86-NO-RAOINT-NEXT:  .LBB2_2: # %atomicrmw.end
; X86-NO-RAOINT-NEXT:    movl (%esp), %eax # 4-byte Reload
; X86-NO-RAOINT-NEXT:    # encoding: [0x8b,0x04,0x24]
; X86-NO-RAOINT-NEXT:    addl $16, %esp # encoding: [0x83,0xc4,0x10]
; X86-NO-RAOINT-NEXT:    popl %esi # encoding: [0x5e]
; X86-NO-RAOINT-NEXT:    retl # encoding: [0xc3]
;
; X64-NO-RAOINT-LABEL: atomic_xor32:
; X64-NO-RAOINT:       # %bb.0:
; X64-NO-RAOINT-NEXT:    movq %rdi, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; X64-NO-RAOINT-NEXT:    # encoding: [0x48,0x89,0x7c,0x24,0xf0]
; X64-NO-RAOINT-NEXT:    movl %esi, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; X64-NO-RAOINT-NEXT:    # encoding: [0x89,0x74,0x24,0xf8]
; X64-NO-RAOINT-NEXT:    lock xorl %esi, (%rdi) # encoding: [0xf0,0x31,0x37]
; X64-NO-RAOINT-NEXT:    lock xorl %esi, (%rdi) # encoding: [0xf0,0x31,0x37]
; X64-NO-RAOINT-NEXT:    lock xorl %esi, (%rdi) # encoding: [0xf0,0x31,0x37]
; X64-NO-RAOINT-NEXT:    lock xorl %esi, (%rdi) # encoding: [0xf0,0x31,0x37]
; X64-NO-RAOINT-NEXT:    lock xorl %esi, (%rdi) # encoding: [0xf0,0x31,0x37]
; X64-NO-RAOINT-NEXT:    movl (%rdi), %eax # encoding: [0x8b,0x07]
; X64-NO-RAOINT-NEXT:    movl %eax, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; X64-NO-RAOINT-NEXT:    # encoding: [0x89,0x44,0x24,0xfc]
; X64-NO-RAOINT-NEXT:  .LBB2_1: # %atomicrmw.start
; X64-NO-RAOINT-NEXT:    # =>This Inner Loop Header: Depth=1
; X64-NO-RAOINT-NEXT:    movl {{[-0-9]+}}(%r{{[sb]}}p), %eax # 4-byte Reload
; X64-NO-RAOINT-NEXT:    # encoding: [0x8b,0x44,0x24,0xfc]
; X64-NO-RAOINT-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rcx # 8-byte Reload
; X64-NO-RAOINT-NEXT:    # encoding: [0x48,0x8b,0x4c,0x24,0xf0]
; X64-NO-RAOINT-NEXT:    movl {{[-0-9]+}}(%r{{[sb]}}p), %esi # 4-byte Reload
; X64-NO-RAOINT-NEXT:    # encoding: [0x8b,0x74,0x24,0xf8]
; X64-NO-RAOINT-NEXT:    movl %eax, %edx # encoding: [0x89,0xc2]
; X64-NO-RAOINT-NEXT:    xorl %esi, %edx # encoding: [0x31,0xf2]
; X64-NO-RAOINT-NEXT:    lock cmpxchgl %edx, (%rcx) # encoding: [0xf0,0x0f,0xb1,0x11]
; X64-NO-RAOINT-NEXT:    sete %cl # encoding: [0x0f,0x94,0xc1]
; X64-NO-RAOINT-NEXT:    movl %eax, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; X64-NO-RAOINT-NEXT:    # encoding: [0x89,0x44,0x24,0xec]
; X64-NO-RAOINT-NEXT:    testb $1, %cl # encoding: [0xf6,0xc1,0x01]
; X64-NO-RAOINT-NEXT:    movl %eax, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; X64-NO-RAOINT-NEXT:    # encoding: [0x89,0x44,0x24,0xfc]
; X64-NO-RAOINT-NEXT:    jne .LBB2_2 # encoding: [0x75,A]
; X64-NO-RAOINT-NEXT:    # fixup A - offset: 1, value: .LBB2_2-1, kind: FK_PCRel_1
; X64-NO-RAOINT-NEXT:    jmp .LBB2_1 # encoding: [0xeb,A]
; X64-NO-RAOINT-NEXT:    # fixup A - offset: 1, value: .LBB2_1-1, kind: FK_PCRel_1
; X64-NO-RAOINT-NEXT:  .LBB2_2: # %atomicrmw.end
; X64-NO-RAOINT-NEXT:    movl {{[-0-9]+}}(%r{{[sb]}}p), %eax # 4-byte Reload
; X64-NO-RAOINT-NEXT:    # encoding: [0x8b,0x44,0x24,0xec]
; X64-NO-RAOINT-NEXT:    retq # encoding: [0xc3]
  %1 = atomicrmw xor i32* %p, i32 %val monotonic
  %2 = atomicrmw xor i32* %p, i32 %val acquire
  %3 = atomicrmw xor i32* %p, i32 %val release
  %4 = atomicrmw xor i32* %p, i32 %val acq_rel
  %5 = atomicrmw xor i32* %p, i32 %val seq_cst

  %6 = atomicrmw xor i32* %p, i32 %val seq_cst
  ret i32 %6
}

define i32 @atomic_and32(i32* nocapture %p, i32 %val) nounwind ssp {
; X86-RAOINT-LABEL: atomic_and32:
; X86-RAOINT:       # %bb.0:
; X86-RAOINT-NEXT:    pushl %esi # encoding: [0x56]
; X86-RAOINT-NEXT:    subl $16, %esp # encoding: [0x83,0xec,0x10]
; X86-RAOINT-NEXT:    movl {{[0-9]+}}(%esp), %ecx # encoding: [0x8b,0x4c,0x24,0x1c]
; X86-RAOINT-NEXT:    movl %ecx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-RAOINT-NEXT:    # encoding: [0x89,0x4c,0x24,0x04]
; X86-RAOINT-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x18]
; X86-RAOINT-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-RAOINT-NEXT:    # encoding: [0x89,0x44,0x24,0x08]
; X86-RAOINT-NEXT:    lock andl %ecx, (%eax) # encoding: [0xf0,0x21,0x08]
; X86-RAOINT-NEXT:    lock andl %ecx, (%eax) # encoding: [0xf0,0x21,0x08]
; X86-RAOINT-NEXT:    lock andl %ecx, (%eax) # encoding: [0xf0,0x21,0x08]
; X86-RAOINT-NEXT:    lock andl %ecx, (%eax) # encoding: [0xf0,0x21,0x08]
; X86-RAOINT-NEXT:    lock andl %ecx, (%eax) # encoding: [0xf0,0x21,0x08]
; X86-RAOINT-NEXT:    movl (%eax), %eax # encoding: [0x8b,0x00]
; X86-RAOINT-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-RAOINT-NEXT:    # encoding: [0x89,0x44,0x24,0x0c]
; X86-RAOINT-NEXT:  .LBB3_1: # %atomicrmw.start
; X86-RAOINT-NEXT:    # =>This Inner Loop Header: Depth=1
; X86-RAOINT-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Reload
; X86-RAOINT-NEXT:    # encoding: [0x8b,0x44,0x24,0x0c]
; X86-RAOINT-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-RAOINT-NEXT:    # encoding: [0x8b,0x4c,0x24,0x08]
; X86-RAOINT-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %esi # 4-byte Reload
; X86-RAOINT-NEXT:    # encoding: [0x8b,0x74,0x24,0x04]
; X86-RAOINT-NEXT:    movl %eax, %edx # encoding: [0x89,0xc2]
; X86-RAOINT-NEXT:    andl %esi, %edx # encoding: [0x21,0xf2]
; X86-RAOINT-NEXT:    lock cmpxchgl %edx, (%ecx) # encoding: [0xf0,0x0f,0xb1,0x11]
; X86-RAOINT-NEXT:    sete %cl # encoding: [0x0f,0x94,0xc1]
; X86-RAOINT-NEXT:    movl %eax, (%esp) # 4-byte Spill
; X86-RAOINT-NEXT:    # encoding: [0x89,0x04,0x24]
; X86-RAOINT-NEXT:    testb $1, %cl # encoding: [0xf6,0xc1,0x01]
; X86-RAOINT-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-RAOINT-NEXT:    # encoding: [0x89,0x44,0x24,0x0c]
; X86-RAOINT-NEXT:    jne .LBB3_2 # encoding: [0x75,A]
; X86-RAOINT-NEXT:    # fixup A - offset: 1, value: .LBB3_2-1, kind: FK_PCRel_1
; X86-RAOINT-NEXT:    jmp .LBB3_1 # encoding: [0xeb,A]
; X86-RAOINT-NEXT:    # fixup A - offset: 1, value: .LBB3_1-1, kind: FK_PCRel_1
; X86-RAOINT-NEXT:  .LBB3_2: # %atomicrmw.end
; X86-RAOINT-NEXT:    movl (%esp), %eax # 4-byte Reload
; X86-RAOINT-NEXT:    # encoding: [0x8b,0x04,0x24]
; X86-RAOINT-NEXT:    addl $16, %esp # encoding: [0x83,0xc4,0x10]
; X86-RAOINT-NEXT:    popl %esi # encoding: [0x5e]
; X86-RAOINT-NEXT:    retl # encoding: [0xc3]
;
; X64-RAO-INT-LABEL: atomic_and32:
; X64-RAO-INT:       # %bb.0:
; X64-RAO-INT-NEXT:    movq %rdi, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; X64-RAO-INT-NEXT:    # encoding: [0x48,0x89,0x7c,0x24,0xf0]
; X64-RAO-INT-NEXT:    movl %esi, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; X64-RAO-INT-NEXT:    # encoding: [0x89,0x74,0x24,0xf8]
; X64-RAO-INT-NEXT:    aandl %esi, (%rdi) # encoding: [0x66,0x0f,0x38,0xfc,0x37]
; X64-RAO-INT-NEXT:    aandl %esi, (%rdi) # encoding: [0x66,0x0f,0x38,0xfc,0x37]
; X64-RAO-INT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X64-RAO-INT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X64-RAO-INT-NEXT:    aandl %esi, (%rdi) # encoding: [0x66,0x0f,0x38,0xfc,0x37]
; X64-RAO-INT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X64-RAO-INT-NEXT:    aandl %esi, (%rdi) # encoding: [0x66,0x0f,0x38,0xfc,0x37]
; X64-RAO-INT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X64-RAO-INT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X64-RAO-INT-NEXT:    aandl %esi, (%rdi) # encoding: [0x66,0x0f,0x38,0xfc,0x37]
; X64-RAO-INT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X64-RAO-INT-NEXT:    movl (%rdi), %eax # encoding: [0x8b,0x07]
; X64-RAO-INT-NEXT:    movl %eax, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; X64-RAO-INT-NEXT:    # encoding: [0x89,0x44,0x24,0xfc]
; X64-RAO-INT-NEXT:  .LBB3_1: # %atomicrmw.start
; X64-RAO-INT-NEXT:    # =>This Inner Loop Header: Depth=1
; X64-RAO-INT-NEXT:    movl {{[-0-9]+}}(%r{{[sb]}}p), %eax # 4-byte Reload
; X64-RAO-INT-NEXT:    # encoding: [0x8b,0x44,0x24,0xfc]
; X64-RAO-INT-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rcx # 8-byte Reload
; X64-RAO-INT-NEXT:    # encoding: [0x48,0x8b,0x4c,0x24,0xf0]
; X64-RAO-INT-NEXT:    movl {{[-0-9]+}}(%r{{[sb]}}p), %esi # 4-byte Reload
; X64-RAO-INT-NEXT:    # encoding: [0x8b,0x74,0x24,0xf8]
; X64-RAO-INT-NEXT:    movl %eax, %edx # encoding: [0x89,0xc2]
; X64-RAO-INT-NEXT:    andl %esi, %edx # encoding: [0x21,0xf2]
; X64-RAO-INT-NEXT:    lock cmpxchgl %edx, (%rcx) # encoding: [0xf0,0x0f,0xb1,0x11]
; X64-RAO-INT-NEXT:    sete %cl # encoding: [0x0f,0x94,0xc1]
; X64-RAO-INT-NEXT:    movl %eax, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; X64-RAO-INT-NEXT:    # encoding: [0x89,0x44,0x24,0xec]
; X64-RAO-INT-NEXT:    testb $1, %cl # encoding: [0xf6,0xc1,0x01]
; X64-RAO-INT-NEXT:    movl %eax, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; X64-RAO-INT-NEXT:    # encoding: [0x89,0x44,0x24,0xfc]
; X64-RAO-INT-NEXT:    jne .LBB3_2 # encoding: [0x75,A]
; X64-RAO-INT-NEXT:    # fixup A - offset: 1, value: .LBB3_2-1, kind: FK_PCRel_1
; X64-RAO-INT-NEXT:    jmp .LBB3_1 # encoding: [0xeb,A]
; X64-RAO-INT-NEXT:    # fixup A - offset: 1, value: .LBB3_1-1, kind: FK_PCRel_1
; X64-RAO-INT-NEXT:  .LBB3_2: # %atomicrmw.end
; X64-RAO-INT-NEXT:    movl {{[-0-9]+}}(%r{{[sb]}}p), %eax # 4-byte Reload
; X64-RAO-INT-NEXT:    # encoding: [0x8b,0x44,0x24,0xec]
; X64-RAO-INT-NEXT:    retq # encoding: [0xc3]
;
; X86-RAO-INT-SSE2-LABEL: atomic_and32:
; X86-RAO-INT-SSE2:       # %bb.0:
; X86-RAO-INT-SSE2-NEXT:    pushl %esi # encoding: [0x56]
; X86-RAO-INT-SSE2-NEXT:    subl $16, %esp # encoding: [0x83,0xec,0x10]
; X86-RAO-INT-SSE2-NEXT:    movl {{[0-9]+}}(%esp), %ecx # encoding: [0x8b,0x4c,0x24,0x1c]
; X86-RAO-INT-SSE2-NEXT:    movl %ecx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-RAO-INT-SSE2-NEXT:    # encoding: [0x89,0x4c,0x24,0x04]
; X86-RAO-INT-SSE2-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x18]
; X86-RAO-INT-SSE2-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-RAO-INT-SSE2-NEXT:    # encoding: [0x89,0x44,0x24,0x08]
; X86-RAO-INT-SSE2-NEXT:    aandl %ecx, (%eax) # encoding: [0x66,0x0f,0x38,0xfc,0x08]
; X86-RAO-INT-SSE2-NEXT:    aandl %ecx, (%eax) # encoding: [0x66,0x0f,0x38,0xfc,0x08]
; X86-RAO-INT-SSE2-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X86-RAO-INT-SSE2-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X86-RAO-INT-SSE2-NEXT:    aandl %ecx, (%eax) # encoding: [0x66,0x0f,0x38,0xfc,0x08]
; X86-RAO-INT-SSE2-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X86-RAO-INT-SSE2-NEXT:    aandl %ecx, (%eax) # encoding: [0x66,0x0f,0x38,0xfc,0x08]
; X86-RAO-INT-SSE2-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X86-RAO-INT-SSE2-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X86-RAO-INT-SSE2-NEXT:    aandl %ecx, (%eax) # encoding: [0x66,0x0f,0x38,0xfc,0x08]
; X86-RAO-INT-SSE2-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X86-RAO-INT-SSE2-NEXT:    movl (%eax), %eax # encoding: [0x8b,0x00]
; X86-RAO-INT-SSE2-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-RAO-INT-SSE2-NEXT:    # encoding: [0x89,0x44,0x24,0x0c]
; X86-RAO-INT-SSE2-NEXT:  .LBB3_1: # %atomicrmw.start
; X86-RAO-INT-SSE2-NEXT:    # =>This Inner Loop Header: Depth=1
; X86-RAO-INT-SSE2-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Reload
; X86-RAO-INT-SSE2-NEXT:    # encoding: [0x8b,0x44,0x24,0x0c]
; X86-RAO-INT-SSE2-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-RAO-INT-SSE2-NEXT:    # encoding: [0x8b,0x4c,0x24,0x08]
; X86-RAO-INT-SSE2-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %esi # 4-byte Reload
; X86-RAO-INT-SSE2-NEXT:    # encoding: [0x8b,0x74,0x24,0x04]
; X86-RAO-INT-SSE2-NEXT:    movl %eax, %edx # encoding: [0x89,0xc2]
; X86-RAO-INT-SSE2-NEXT:    andl %esi, %edx # encoding: [0x21,0xf2]
; X86-RAO-INT-SSE2-NEXT:    lock cmpxchgl %edx, (%ecx) # encoding: [0xf0,0x0f,0xb1,0x11]
; X86-RAO-INT-SSE2-NEXT:    sete %cl # encoding: [0x0f,0x94,0xc1]
; X86-RAO-INT-SSE2-NEXT:    movl %eax, (%esp) # 4-byte Spill
; X86-RAO-INT-SSE2-NEXT:    # encoding: [0x89,0x04,0x24]
; X86-RAO-INT-SSE2-NEXT:    testb $1, %cl # encoding: [0xf6,0xc1,0x01]
; X86-RAO-INT-SSE2-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-RAO-INT-SSE2-NEXT:    # encoding: [0x89,0x44,0x24,0x0c]
; X86-RAO-INT-SSE2-NEXT:    jne .LBB3_2 # encoding: [0x75,A]
; X86-RAO-INT-SSE2-NEXT:    # fixup A - offset: 1, value: .LBB3_2-1, kind: FK_PCRel_1
; X86-RAO-INT-SSE2-NEXT:    jmp .LBB3_1 # encoding: [0xeb,A]
; X86-RAO-INT-SSE2-NEXT:    # fixup A - offset: 1, value: .LBB3_1-1, kind: FK_PCRel_1
; X86-RAO-INT-SSE2-NEXT:  .LBB3_2: # %atomicrmw.end
; X86-RAO-INT-SSE2-NEXT:    movl (%esp), %eax # 4-byte Reload
; X86-RAO-INT-SSE2-NEXT:    # encoding: [0x8b,0x04,0x24]
; X86-RAO-INT-SSE2-NEXT:    addl $16, %esp # encoding: [0x83,0xc4,0x10]
; X86-RAO-INT-SSE2-NEXT:    popl %esi # encoding: [0x5e]
; X86-RAO-INT-SSE2-NEXT:    retl # encoding: [0xc3]
;
; X86-NO-RAOINT-LABEL: atomic_and32:
; X86-NO-RAOINT:       # %bb.0:
; X86-NO-RAOINT-NEXT:    pushl %esi # encoding: [0x56]
; X86-NO-RAOINT-NEXT:    subl $16, %esp # encoding: [0x83,0xec,0x10]
; X86-NO-RAOINT-NEXT:    movl {{[0-9]+}}(%esp), %ecx # encoding: [0x8b,0x4c,0x24,0x1c]
; X86-NO-RAOINT-NEXT:    movl %ecx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NO-RAOINT-NEXT:    # encoding: [0x89,0x4c,0x24,0x04]
; X86-NO-RAOINT-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x18]
; X86-NO-RAOINT-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NO-RAOINT-NEXT:    # encoding: [0x89,0x44,0x24,0x08]
; X86-NO-RAOINT-NEXT:    lock andl %ecx, (%eax) # encoding: [0xf0,0x21,0x08]
; X86-NO-RAOINT-NEXT:    lock andl %ecx, (%eax) # encoding: [0xf0,0x21,0x08]
; X86-NO-RAOINT-NEXT:    lock andl %ecx, (%eax) # encoding: [0xf0,0x21,0x08]
; X86-NO-RAOINT-NEXT:    lock andl %ecx, (%eax) # encoding: [0xf0,0x21,0x08]
; X86-NO-RAOINT-NEXT:    lock andl %ecx, (%eax) # encoding: [0xf0,0x21,0x08]
; X86-NO-RAOINT-NEXT:    movl (%eax), %eax # encoding: [0x8b,0x00]
; X86-NO-RAOINT-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NO-RAOINT-NEXT:    # encoding: [0x89,0x44,0x24,0x0c]
; X86-NO-RAOINT-NEXT:  .LBB3_1: # %atomicrmw.start
; X86-NO-RAOINT-NEXT:    # =>This Inner Loop Header: Depth=1
; X86-NO-RAOINT-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Reload
; X86-NO-RAOINT-NEXT:    # encoding: [0x8b,0x44,0x24,0x0c]
; X86-NO-RAOINT-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-NO-RAOINT-NEXT:    # encoding: [0x8b,0x4c,0x24,0x08]
; X86-NO-RAOINT-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %esi # 4-byte Reload
; X86-NO-RAOINT-NEXT:    # encoding: [0x8b,0x74,0x24,0x04]
; X86-NO-RAOINT-NEXT:    movl %eax, %edx # encoding: [0x89,0xc2]
; X86-NO-RAOINT-NEXT:    andl %esi, %edx # encoding: [0x21,0xf2]
; X86-NO-RAOINT-NEXT:    lock cmpxchgl %edx, (%ecx) # encoding: [0xf0,0x0f,0xb1,0x11]
; X86-NO-RAOINT-NEXT:    sete %cl # encoding: [0x0f,0x94,0xc1]
; X86-NO-RAOINT-NEXT:    movl %eax, (%esp) # 4-byte Spill
; X86-NO-RAOINT-NEXT:    # encoding: [0x89,0x04,0x24]
; X86-NO-RAOINT-NEXT:    testb $1, %cl # encoding: [0xf6,0xc1,0x01]
; X86-NO-RAOINT-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NO-RAOINT-NEXT:    # encoding: [0x89,0x44,0x24,0x0c]
; X86-NO-RAOINT-NEXT:    jne .LBB3_2 # encoding: [0x75,A]
; X86-NO-RAOINT-NEXT:    # fixup A - offset: 1, value: .LBB3_2-1, kind: FK_PCRel_1
; X86-NO-RAOINT-NEXT:    jmp .LBB3_1 # encoding: [0xeb,A]
; X86-NO-RAOINT-NEXT:    # fixup A - offset: 1, value: .LBB3_1-1, kind: FK_PCRel_1
; X86-NO-RAOINT-NEXT:  .LBB3_2: # %atomicrmw.end
; X86-NO-RAOINT-NEXT:    movl (%esp), %eax # 4-byte Reload
; X86-NO-RAOINT-NEXT:    # encoding: [0x8b,0x04,0x24]
; X86-NO-RAOINT-NEXT:    addl $16, %esp # encoding: [0x83,0xc4,0x10]
; X86-NO-RAOINT-NEXT:    popl %esi # encoding: [0x5e]
; X86-NO-RAOINT-NEXT:    retl # encoding: [0xc3]
;
; X64-NO-RAOINT-LABEL: atomic_and32:
; X64-NO-RAOINT:       # %bb.0:
; X64-NO-RAOINT-NEXT:    movq %rdi, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; X64-NO-RAOINT-NEXT:    # encoding: [0x48,0x89,0x7c,0x24,0xf0]
; X64-NO-RAOINT-NEXT:    movl %esi, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; X64-NO-RAOINT-NEXT:    # encoding: [0x89,0x74,0x24,0xf8]
; X64-NO-RAOINT-NEXT:    lock andl %esi, (%rdi) # encoding: [0xf0,0x21,0x37]
; X64-NO-RAOINT-NEXT:    lock andl %esi, (%rdi) # encoding: [0xf0,0x21,0x37]
; X64-NO-RAOINT-NEXT:    lock andl %esi, (%rdi) # encoding: [0xf0,0x21,0x37]
; X64-NO-RAOINT-NEXT:    lock andl %esi, (%rdi) # encoding: [0xf0,0x21,0x37]
; X64-NO-RAOINT-NEXT:    lock andl %esi, (%rdi) # encoding: [0xf0,0x21,0x37]
; X64-NO-RAOINT-NEXT:    movl (%rdi), %eax # encoding: [0x8b,0x07]
; X64-NO-RAOINT-NEXT:    movl %eax, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; X64-NO-RAOINT-NEXT:    # encoding: [0x89,0x44,0x24,0xfc]
; X64-NO-RAOINT-NEXT:  .LBB3_1: # %atomicrmw.start
; X64-NO-RAOINT-NEXT:    # =>This Inner Loop Header: Depth=1
; X64-NO-RAOINT-NEXT:    movl {{[-0-9]+}}(%r{{[sb]}}p), %eax # 4-byte Reload
; X64-NO-RAOINT-NEXT:    # encoding: [0x8b,0x44,0x24,0xfc]
; X64-NO-RAOINT-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rcx # 8-byte Reload
; X64-NO-RAOINT-NEXT:    # encoding: [0x48,0x8b,0x4c,0x24,0xf0]
; X64-NO-RAOINT-NEXT:    movl {{[-0-9]+}}(%r{{[sb]}}p), %esi # 4-byte Reload
; X64-NO-RAOINT-NEXT:    # encoding: [0x8b,0x74,0x24,0xf8]
; X64-NO-RAOINT-NEXT:    movl %eax, %edx # encoding: [0x89,0xc2]
; X64-NO-RAOINT-NEXT:    andl %esi, %edx # encoding: [0x21,0xf2]
; X64-NO-RAOINT-NEXT:    lock cmpxchgl %edx, (%rcx) # encoding: [0xf0,0x0f,0xb1,0x11]
; X64-NO-RAOINT-NEXT:    sete %cl # encoding: [0x0f,0x94,0xc1]
; X64-NO-RAOINT-NEXT:    movl %eax, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; X64-NO-RAOINT-NEXT:    # encoding: [0x89,0x44,0x24,0xec]
; X64-NO-RAOINT-NEXT:    testb $1, %cl # encoding: [0xf6,0xc1,0x01]
; X64-NO-RAOINT-NEXT:    movl %eax, {{[-0-9]+}}(%r{{[sb]}}p) # 4-byte Spill
; X64-NO-RAOINT-NEXT:    # encoding: [0x89,0x44,0x24,0xfc]
; X64-NO-RAOINT-NEXT:    jne .LBB3_2 # encoding: [0x75,A]
; X64-NO-RAOINT-NEXT:    # fixup A - offset: 1, value: .LBB3_2-1, kind: FK_PCRel_1
; X64-NO-RAOINT-NEXT:    jmp .LBB3_1 # encoding: [0xeb,A]
; X64-NO-RAOINT-NEXT:    # fixup A - offset: 1, value: .LBB3_1-1, kind: FK_PCRel_1
; X64-NO-RAOINT-NEXT:  .LBB3_2: # %atomicrmw.end
; X64-NO-RAOINT-NEXT:    movl {{[-0-9]+}}(%r{{[sb]}}p), %eax # 4-byte Reload
; X64-NO-RAOINT-NEXT:    # encoding: [0x8b,0x44,0x24,0xec]
; X64-NO-RAOINT-NEXT:    retq # encoding: [0xc3]
  %1 = atomicrmw and i32* %p, i32 %val monotonic
  %2 = atomicrmw and i32* %p, i32 %val acquire
  %3 = atomicrmw and i32* %p, i32 %val release
  %4 = atomicrmw and i32* %p, i32 %val acq_rel
  %5 = atomicrmw and i32* %p, i32 %val seq_cst

  %6 = atomicrmw and i32* %p, i32 %val seq_cst
  ret i32 %6
}

define i32 @atomic_sub32(i32* nocapture %p, i32 %val) nounwind ssp {
; X86-RAOINT-LABEL: atomic_sub32:
; X86-RAOINT:       # %bb.0:
; X86-RAOINT-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x08]
; X86-RAOINT-NEXT:    movl {{[0-9]+}}(%esp), %ecx # encoding: [0x8b,0x4c,0x24,0x04]
; X86-RAOINT-NEXT:    lock subl %eax, (%ecx) # encoding: [0xf0,0x29,0x01]
; X86-RAOINT-NEXT:    lock subl %eax, (%ecx) # encoding: [0xf0,0x29,0x01]
; X86-RAOINT-NEXT:    lock subl %eax, (%ecx) # encoding: [0xf0,0x29,0x01]
; X86-RAOINT-NEXT:    lock subl %eax, (%ecx) # encoding: [0xf0,0x29,0x01]
; X86-RAOINT-NEXT:    lock subl %eax, (%ecx) # encoding: [0xf0,0x29,0x01]
; X86-RAOINT-NEXT:    negl %eax # encoding: [0xf7,0xd8]
; X86-RAOINT-NEXT:    lock xaddl %eax, (%ecx) # encoding: [0xf0,0x0f,0xc1,0x01]
; X86-RAOINT-NEXT:    retl # encoding: [0xc3]
;
; X64-RAO-INT-LABEL: atomic_sub32:
; X64-RAO-INT:       # %bb.0:
; X64-RAO-INT-NEXT:    movl %esi, %eax # encoding: [0x89,0xf0]
; X64-RAO-INT-NEXT:    negl %eax # encoding: [0xf7,0xd8]
; X64-RAO-INT-NEXT:    aaddl %eax, (%rdi) # encoding: [0x0f,0x38,0xfc,0x07]
; X64-RAO-INT-NEXT:    aaddl %eax, (%rdi) # encoding: [0x0f,0x38,0xfc,0x07]
; X64-RAO-INT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X64-RAO-INT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X64-RAO-INT-NEXT:    aaddl %eax, (%rdi) # encoding: [0x0f,0x38,0xfc,0x07]
; X64-RAO-INT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X64-RAO-INT-NEXT:    aaddl %eax, (%rdi) # encoding: [0x0f,0x38,0xfc,0x07]
; X64-RAO-INT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X64-RAO-INT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X64-RAO-INT-NEXT:    aaddl %eax, (%rdi) # encoding: [0x0f,0x38,0xfc,0x07]
; X64-RAO-INT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X64-RAO-INT-NEXT:    lock xaddl %eax, (%rdi) # encoding: [0xf0,0x0f,0xc1,0x07]
; X64-RAO-INT-NEXT:    retq # encoding: [0xc3]
;
; X86-RAO-INT-SSE2-LABEL: atomic_sub32:
; X86-RAO-INT-SSE2:       # %bb.0:
; X86-RAO-INT-SSE2-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x08]
; X86-RAO-INT-SSE2-NEXT:    movl {{[0-9]+}}(%esp), %ecx # encoding: [0x8b,0x4c,0x24,0x04]
; X86-RAO-INT-SSE2-NEXT:    negl %eax # encoding: [0xf7,0xd8]
; X86-RAO-INT-SSE2-NEXT:    aaddl %eax, (%ecx) # encoding: [0x0f,0x38,0xfc,0x01]
; X86-RAO-INT-SSE2-NEXT:    aaddl %eax, (%ecx) # encoding: [0x0f,0x38,0xfc,0x01]
; X86-RAO-INT-SSE2-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X86-RAO-INT-SSE2-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X86-RAO-INT-SSE2-NEXT:    aaddl %eax, (%ecx) # encoding: [0x0f,0x38,0xfc,0x01]
; X86-RAO-INT-SSE2-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X86-RAO-INT-SSE2-NEXT:    aaddl %eax, (%ecx) # encoding: [0x0f,0x38,0xfc,0x01]
; X86-RAO-INT-SSE2-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X86-RAO-INT-SSE2-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X86-RAO-INT-SSE2-NEXT:    aaddl %eax, (%ecx) # encoding: [0x0f,0x38,0xfc,0x01]
; X86-RAO-INT-SSE2-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; X86-RAO-INT-SSE2-NEXT:    lock xaddl %eax, (%ecx) # encoding: [0xf0,0x0f,0xc1,0x01]
; X86-RAO-INT-SSE2-NEXT:    retl # encoding: [0xc3]
;
; X86-NO-RAOINT-LABEL: atomic_sub32:
; X86-NO-RAOINT:       # %bb.0:
; X86-NO-RAOINT-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x08]
; X86-NO-RAOINT-NEXT:    movl {{[0-9]+}}(%esp), %ecx # encoding: [0x8b,0x4c,0x24,0x04]
; X86-NO-RAOINT-NEXT:    lock subl %eax, (%ecx) # encoding: [0xf0,0x29,0x01]
; X86-NO-RAOINT-NEXT:    lock subl %eax, (%ecx) # encoding: [0xf0,0x29,0x01]
; X86-NO-RAOINT-NEXT:    lock subl %eax, (%ecx) # encoding: [0xf0,0x29,0x01]
; X86-NO-RAOINT-NEXT:    lock subl %eax, (%ecx) # encoding: [0xf0,0x29,0x01]
; X86-NO-RAOINT-NEXT:    lock subl %eax, (%ecx) # encoding: [0xf0,0x29,0x01]
; X86-NO-RAOINT-NEXT:    negl %eax # encoding: [0xf7,0xd8]
; X86-NO-RAOINT-NEXT:    lock xaddl %eax, (%ecx) # encoding: [0xf0,0x0f,0xc1,0x01]
; X86-NO-RAOINT-NEXT:    retl # encoding: [0xc3]
;
; X64-NO-RAOINT-LABEL: atomic_sub32:
; X64-NO-RAOINT:       # %bb.0:
; X64-NO-RAOINT-NEXT:    movl %esi, %eax # encoding: [0x89,0xf0]
; X64-NO-RAOINT-NEXT:    lock subl %eax, (%rdi) # encoding: [0xf0,0x29,0x07]
; X64-NO-RAOINT-NEXT:    lock subl %eax, (%rdi) # encoding: [0xf0,0x29,0x07]
; X64-NO-RAOINT-NEXT:    lock subl %eax, (%rdi) # encoding: [0xf0,0x29,0x07]
; X64-NO-RAOINT-NEXT:    lock subl %eax, (%rdi) # encoding: [0xf0,0x29,0x07]
; X64-NO-RAOINT-NEXT:    lock subl %eax, (%rdi) # encoding: [0xf0,0x29,0x07]
; X64-NO-RAOINT-NEXT:    negl %eax # encoding: [0xf7,0xd8]
; X64-NO-RAOINT-NEXT:    lock xaddl %eax, (%rdi) # encoding: [0xf0,0x0f,0xc1,0x07]
; X64-NO-RAOINT-NEXT:    retq # encoding: [0xc3]
  %1 = atomicrmw sub i32* %p, i32 %val monotonic
  %2 = atomicrmw sub i32* %p, i32 %val acquire
  %3 = atomicrmw sub i32* %p, i32 %val release
  %4 = atomicrmw sub i32* %p, i32 %val acq_rel
  %5 = atomicrmw sub i32* %p, i32 %val seq_cst

  %6 = atomicrmw sub i32* %p, i32 %val seq_cst
  ret i32 %6
}

