; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_rao_int
; RUN: llc < %s -O0 -verify-machineinstrs -mtriple=x86_64-unknown-unknown --show-mc-encoding -mattr=+raoint | FileCheck %s --check-prefixes=RAOINT
; RUN: llc < %s -O0 -verify-machineinstrs -mtriple=x86_64-unknown-unknown --show-mc-encoding | FileCheck %s --check-prefixes=NO-RAOINT

define i64 @atomic_add64(i64* nocapture %p, i64 %val) nounwind ssp {
; RAOINT-LABEL: atomic_add64:
; RAOINT:       # %bb.0:
; RAOINT-NEXT:    movq %rsi, %rax # encoding: [0x48,0x89,0xf0]
; RAOINT-NEXT:    aaddq %rax, (%rdi) # encoding: [0x48,0x0f,0x38,0xfc,0x07]
; RAOINT-NEXT:    aaddq %rax, (%rdi) # encoding: [0x48,0x0f,0x38,0xfc,0x07]
; RAOINT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; RAOINT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; RAOINT-NEXT:    aaddq %rax, (%rdi) # encoding: [0x48,0x0f,0x38,0xfc,0x07]
; RAOINT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; RAOINT-NEXT:    aaddq %rax, (%rdi) # encoding: [0x48,0x0f,0x38,0xfc,0x07]
; RAOINT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; RAOINT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; RAOINT-NEXT:    aaddq %rax, (%rdi) # encoding: [0x48,0x0f,0x38,0xfc,0x07]
; RAOINT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; RAOINT-NEXT:    lock xaddq %rax, (%rdi) # encoding: [0xf0,0x48,0x0f,0xc1,0x07]
; RAOINT-NEXT:    retq # encoding: [0xc3]
;
; NO-RAOINT-LABEL: atomic_add64:
; NO-RAOINT:       # %bb.0:
; NO-RAOINT-NEXT:    movq %rsi, %rax # encoding: [0x48,0x89,0xf0]
; NO-RAOINT-NEXT:    lock addq %rax, (%rdi) # encoding: [0xf0,0x48,0x01,0x07]
; NO-RAOINT-NEXT:    lock addq %rax, (%rdi) # encoding: [0xf0,0x48,0x01,0x07]
; NO-RAOINT-NEXT:    lock addq %rax, (%rdi) # encoding: [0xf0,0x48,0x01,0x07]
; NO-RAOINT-NEXT:    lock addq %rax, (%rdi) # encoding: [0xf0,0x48,0x01,0x07]
; NO-RAOINT-NEXT:    lock addq %rax, (%rdi) # encoding: [0xf0,0x48,0x01,0x07]
; NO-RAOINT-NEXT:    lock xaddq %rax, (%rdi) # encoding: [0xf0,0x48,0x0f,0xc1,0x07]
; NO-RAOINT-NEXT:    retq # encoding: [0xc3]
  %1 = atomicrmw add i64* %p, i64 %val monotonic
  %2 = atomicrmw add i64* %p, i64 %val acquire
  %3 = atomicrmw add i64* %p, i64 %val release
  %4 = atomicrmw add i64* %p, i64 %val acq_rel
  %5 = atomicrmw add i64* %p, i64 %val seq_cst

  %6 = atomicrmw add i64* %p, i64 %val seq_cst
  ret i64 %6
}

define i64 @atomic_and64(i64* nocapture %p, i64 %val) nounwind ssp {
; RAOINT-LABEL: atomic_and64:
; RAOINT:       # %bb.0:
; RAOINT-NEXT:    movq %rdi, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; RAOINT-NEXT:    # encoding: [0x48,0x89,0x7c,0x24,0xe8]
; RAOINT-NEXT:    movq %rsi, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; RAOINT-NEXT:    # encoding: [0x48,0x89,0x74,0x24,0xf0]
; RAOINT-NEXT:    aandq %rsi, (%rdi) # encoding: [0x66,0x48,0x0f,0x38,0xfc,0x37]
; RAOINT-NEXT:    aandq %rsi, (%rdi) # encoding: [0x66,0x48,0x0f,0x38,0xfc,0x37]
; RAOINT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; RAOINT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; RAOINT-NEXT:    aandq %rsi, (%rdi) # encoding: [0x66,0x48,0x0f,0x38,0xfc,0x37]
; RAOINT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; RAOINT-NEXT:    aandq %rsi, (%rdi) # encoding: [0x66,0x48,0x0f,0x38,0xfc,0x37]
; RAOINT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; RAOINT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; RAOINT-NEXT:    aandq %rsi, (%rdi) # encoding: [0x66,0x48,0x0f,0x38,0xfc,0x37]
; RAOINT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; RAOINT-NEXT:    movq (%rdi), %rax # encoding: [0x48,0x8b,0x07]
; RAOINT-NEXT:    movq %rax, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; RAOINT-NEXT:    # encoding: [0x48,0x89,0x44,0x24,0xf8]
; RAOINT-NEXT:  .LBB1_1: # %atomicrmw.start
; RAOINT-NEXT:    # =>This Inner Loop Header: Depth=1
; RAOINT-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rax # 8-byte Reload
; RAOINT-NEXT:    # encoding: [0x48,0x8b,0x44,0x24,0xf8]
; RAOINT-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rcx # 8-byte Reload
; RAOINT-NEXT:    # encoding: [0x48,0x8b,0x4c,0x24,0xe8]
; RAOINT-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rsi # 8-byte Reload
; RAOINT-NEXT:    # encoding: [0x48,0x8b,0x74,0x24,0xf0]
; RAOINT-NEXT:    movq %rax, %rdx # encoding: [0x48,0x89,0xc2]
; RAOINT-NEXT:    andq %rsi, %rdx # encoding: [0x48,0x21,0xf2]
; RAOINT-NEXT:    lock cmpxchgq %rdx, (%rcx) # encoding: [0xf0,0x48,0x0f,0xb1,0x11]
; RAOINT-NEXT:    sete %cl # encoding: [0x0f,0x94,0xc1]
; RAOINT-NEXT:    movq %rax, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; RAOINT-NEXT:    # encoding: [0x48,0x89,0x44,0x24,0xe0]
; RAOINT-NEXT:    testb $1, %cl # encoding: [0xf6,0xc1,0x01]
; RAOINT-NEXT:    movq %rax, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; RAOINT-NEXT:    # encoding: [0x48,0x89,0x44,0x24,0xf8]
; RAOINT-NEXT:    jne .LBB1_2 # encoding: [0x75,A]
; RAOINT-NEXT:    # fixup A - offset: 1, value: .LBB1_2-1, kind: FK_PCRel_1
; RAOINT-NEXT:    jmp .LBB1_1 # encoding: [0xeb,A]
; RAOINT-NEXT:    # fixup A - offset: 1, value: .LBB1_1-1, kind: FK_PCRel_1
; RAOINT-NEXT:  .LBB1_2: # %atomicrmw.end
; RAOINT-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rax # 8-byte Reload
; RAOINT-NEXT:    # encoding: [0x48,0x8b,0x44,0x24,0xe0]
; RAOINT-NEXT:    retq # encoding: [0xc3]
;
; NO-RAOINT-LABEL: atomic_and64:
; NO-RAOINT:       # %bb.0:
; NO-RAOINT-NEXT:    movq %rdi, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; NO-RAOINT-NEXT:    # encoding: [0x48,0x89,0x7c,0x24,0xe8]
; NO-RAOINT-NEXT:    movq %rsi, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; NO-RAOINT-NEXT:    # encoding: [0x48,0x89,0x74,0x24,0xf0]
; NO-RAOINT-NEXT:    lock andq %rsi, (%rdi) # encoding: [0xf0,0x48,0x21,0x37]
; NO-RAOINT-NEXT:    lock andq %rsi, (%rdi) # encoding: [0xf0,0x48,0x21,0x37]
; NO-RAOINT-NEXT:    lock andq %rsi, (%rdi) # encoding: [0xf0,0x48,0x21,0x37]
; NO-RAOINT-NEXT:    lock andq %rsi, (%rdi) # encoding: [0xf0,0x48,0x21,0x37]
; NO-RAOINT-NEXT:    lock andq %rsi, (%rdi) # encoding: [0xf0,0x48,0x21,0x37]
; NO-RAOINT-NEXT:    movq (%rdi), %rax # encoding: [0x48,0x8b,0x07]
; NO-RAOINT-NEXT:    movq %rax, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; NO-RAOINT-NEXT:    # encoding: [0x48,0x89,0x44,0x24,0xf8]
; NO-RAOINT-NEXT:  .LBB1_1: # %atomicrmw.start
; NO-RAOINT-NEXT:    # =>This Inner Loop Header: Depth=1
; NO-RAOINT-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rax # 8-byte Reload
; NO-RAOINT-NEXT:    # encoding: [0x48,0x8b,0x44,0x24,0xf8]
; NO-RAOINT-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rcx # 8-byte Reload
; NO-RAOINT-NEXT:    # encoding: [0x48,0x8b,0x4c,0x24,0xe8]
; NO-RAOINT-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rsi # 8-byte Reload
; NO-RAOINT-NEXT:    # encoding: [0x48,0x8b,0x74,0x24,0xf0]
; NO-RAOINT-NEXT:    movq %rax, %rdx # encoding: [0x48,0x89,0xc2]
; NO-RAOINT-NEXT:    andq %rsi, %rdx # encoding: [0x48,0x21,0xf2]
; NO-RAOINT-NEXT:    lock cmpxchgq %rdx, (%rcx) # encoding: [0xf0,0x48,0x0f,0xb1,0x11]
; NO-RAOINT-NEXT:    sete %cl # encoding: [0x0f,0x94,0xc1]
; NO-RAOINT-NEXT:    movq %rax, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; NO-RAOINT-NEXT:    # encoding: [0x48,0x89,0x44,0x24,0xe0]
; NO-RAOINT-NEXT:    testb $1, %cl # encoding: [0xf6,0xc1,0x01]
; NO-RAOINT-NEXT:    movq %rax, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; NO-RAOINT-NEXT:    # encoding: [0x48,0x89,0x44,0x24,0xf8]
; NO-RAOINT-NEXT:    jne .LBB1_2 # encoding: [0x75,A]
; NO-RAOINT-NEXT:    # fixup A - offset: 1, value: .LBB1_2-1, kind: FK_PCRel_1
; NO-RAOINT-NEXT:    jmp .LBB1_1 # encoding: [0xeb,A]
; NO-RAOINT-NEXT:    # fixup A - offset: 1, value: .LBB1_1-1, kind: FK_PCRel_1
; NO-RAOINT-NEXT:  .LBB1_2: # %atomicrmw.end
; NO-RAOINT-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rax # 8-byte Reload
; NO-RAOINT-NEXT:    # encoding: [0x48,0x8b,0x44,0x24,0xe0]
; NO-RAOINT-NEXT:    retq # encoding: [0xc3]
  %1 = atomicrmw and i64* %p, i64 %val monotonic
  %2 = atomicrmw and i64* %p, i64 %val acquire
  %3 = atomicrmw and i64* %p, i64 %val release
  %4 = atomicrmw and i64* %p, i64 %val acq_rel
  %5 = atomicrmw and i64* %p, i64 %val seq_cst

  %6 = atomicrmw and i64* %p, i64 %val seq_cst
  ret i64 %6
}

define i64 @atomic_or64(i64* nocapture %p, i64 %val) nounwind ssp {
; RAOINT-LABEL: atomic_or64:
; RAOINT:       # %bb.0:
; RAOINT-NEXT:    movq %rdi, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; RAOINT-NEXT:    # encoding: [0x48,0x89,0x7c,0x24,0xe8]
; RAOINT-NEXT:    movq %rsi, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; RAOINT-NEXT:    # encoding: [0x48,0x89,0x74,0x24,0xf0]
; RAOINT-NEXT:    aorq %rsi, (%rdi) # encoding: [0xf2,0x48,0x0f,0x38,0xfc,0x37]
; RAOINT-NEXT:    aorq %rsi, (%rdi) # encoding: [0xf2,0x48,0x0f,0x38,0xfc,0x37]
; RAOINT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; RAOINT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; RAOINT-NEXT:    aorq %rsi, (%rdi) # encoding: [0xf2,0x48,0x0f,0x38,0xfc,0x37]
; RAOINT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; RAOINT-NEXT:    aorq %rsi, (%rdi) # encoding: [0xf2,0x48,0x0f,0x38,0xfc,0x37]
; RAOINT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; RAOINT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; RAOINT-NEXT:    aorq %rsi, (%rdi) # encoding: [0xf2,0x48,0x0f,0x38,0xfc,0x37]
; RAOINT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; RAOINT-NEXT:    movq (%rdi), %rax # encoding: [0x48,0x8b,0x07]
; RAOINT-NEXT:    movq %rax, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; RAOINT-NEXT:    # encoding: [0x48,0x89,0x44,0x24,0xf8]
; RAOINT-NEXT:  .LBB2_1: # %atomicrmw.start
; RAOINT-NEXT:    # =>This Inner Loop Header: Depth=1
; RAOINT-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rax # 8-byte Reload
; RAOINT-NEXT:    # encoding: [0x48,0x8b,0x44,0x24,0xf8]
; RAOINT-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rcx # 8-byte Reload
; RAOINT-NEXT:    # encoding: [0x48,0x8b,0x4c,0x24,0xe8]
; RAOINT-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rsi # 8-byte Reload
; RAOINT-NEXT:    # encoding: [0x48,0x8b,0x74,0x24,0xf0]
; RAOINT-NEXT:    movq %rax, %rdx # encoding: [0x48,0x89,0xc2]
; RAOINT-NEXT:    orq %rsi, %rdx # encoding: [0x48,0x09,0xf2]
; RAOINT-NEXT:    lock cmpxchgq %rdx, (%rcx) # encoding: [0xf0,0x48,0x0f,0xb1,0x11]
; RAOINT-NEXT:    sete %cl # encoding: [0x0f,0x94,0xc1]
; RAOINT-NEXT:    movq %rax, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; RAOINT-NEXT:    # encoding: [0x48,0x89,0x44,0x24,0xe0]
; RAOINT-NEXT:    testb $1, %cl # encoding: [0xf6,0xc1,0x01]
; RAOINT-NEXT:    movq %rax, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; RAOINT-NEXT:    # encoding: [0x48,0x89,0x44,0x24,0xf8]
; RAOINT-NEXT:    jne .LBB2_2 # encoding: [0x75,A]
; RAOINT-NEXT:    # fixup A - offset: 1, value: .LBB2_2-1, kind: FK_PCRel_1
; RAOINT-NEXT:    jmp .LBB2_1 # encoding: [0xeb,A]
; RAOINT-NEXT:    # fixup A - offset: 1, value: .LBB2_1-1, kind: FK_PCRel_1
; RAOINT-NEXT:  .LBB2_2: # %atomicrmw.end
; RAOINT-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rax # 8-byte Reload
; RAOINT-NEXT:    # encoding: [0x48,0x8b,0x44,0x24,0xe0]
; RAOINT-NEXT:    retq # encoding: [0xc3]
;
; NO-RAOINT-LABEL: atomic_or64:
; NO-RAOINT:       # %bb.0:
; NO-RAOINT-NEXT:    movq %rdi, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; NO-RAOINT-NEXT:    # encoding: [0x48,0x89,0x7c,0x24,0xe8]
; NO-RAOINT-NEXT:    movq %rsi, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; NO-RAOINT-NEXT:    # encoding: [0x48,0x89,0x74,0x24,0xf0]
; NO-RAOINT-NEXT:    lock orq %rsi, (%rdi) # encoding: [0xf0,0x48,0x09,0x37]
; NO-RAOINT-NEXT:    lock orq %rsi, (%rdi) # encoding: [0xf0,0x48,0x09,0x37]
; NO-RAOINT-NEXT:    lock orq %rsi, (%rdi) # encoding: [0xf0,0x48,0x09,0x37]
; NO-RAOINT-NEXT:    lock orq %rsi, (%rdi) # encoding: [0xf0,0x48,0x09,0x37]
; NO-RAOINT-NEXT:    lock orq %rsi, (%rdi) # encoding: [0xf0,0x48,0x09,0x37]
; NO-RAOINT-NEXT:    movq (%rdi), %rax # encoding: [0x48,0x8b,0x07]
; NO-RAOINT-NEXT:    movq %rax, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; NO-RAOINT-NEXT:    # encoding: [0x48,0x89,0x44,0x24,0xf8]
; NO-RAOINT-NEXT:  .LBB2_1: # %atomicrmw.start
; NO-RAOINT-NEXT:    # =>This Inner Loop Header: Depth=1
; NO-RAOINT-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rax # 8-byte Reload
; NO-RAOINT-NEXT:    # encoding: [0x48,0x8b,0x44,0x24,0xf8]
; NO-RAOINT-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rcx # 8-byte Reload
; NO-RAOINT-NEXT:    # encoding: [0x48,0x8b,0x4c,0x24,0xe8]
; NO-RAOINT-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rsi # 8-byte Reload
; NO-RAOINT-NEXT:    # encoding: [0x48,0x8b,0x74,0x24,0xf0]
; NO-RAOINT-NEXT:    movq %rax, %rdx # encoding: [0x48,0x89,0xc2]
; NO-RAOINT-NEXT:    orq %rsi, %rdx # encoding: [0x48,0x09,0xf2]
; NO-RAOINT-NEXT:    lock cmpxchgq %rdx, (%rcx) # encoding: [0xf0,0x48,0x0f,0xb1,0x11]
; NO-RAOINT-NEXT:    sete %cl # encoding: [0x0f,0x94,0xc1]
; NO-RAOINT-NEXT:    movq %rax, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; NO-RAOINT-NEXT:    # encoding: [0x48,0x89,0x44,0x24,0xe0]
; NO-RAOINT-NEXT:    testb $1, %cl # encoding: [0xf6,0xc1,0x01]
; NO-RAOINT-NEXT:    movq %rax, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; NO-RAOINT-NEXT:    # encoding: [0x48,0x89,0x44,0x24,0xf8]
; NO-RAOINT-NEXT:    jne .LBB2_2 # encoding: [0x75,A]
; NO-RAOINT-NEXT:    # fixup A - offset: 1, value: .LBB2_2-1, kind: FK_PCRel_1
; NO-RAOINT-NEXT:    jmp .LBB2_1 # encoding: [0xeb,A]
; NO-RAOINT-NEXT:    # fixup A - offset: 1, value: .LBB2_1-1, kind: FK_PCRel_1
; NO-RAOINT-NEXT:  .LBB2_2: # %atomicrmw.end
; NO-RAOINT-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rax # 8-byte Reload
; NO-RAOINT-NEXT:    # encoding: [0x48,0x8b,0x44,0x24,0xe0]
; NO-RAOINT-NEXT:    retq # encoding: [0xc3]
  %1 = atomicrmw or i64* %p, i64 %val monotonic
  %2 = atomicrmw or i64* %p, i64 %val acquire
  %3 = atomicrmw or i64* %p, i64 %val release
  %4 = atomicrmw or i64* %p, i64 %val acq_rel
  %5 = atomicrmw or i64* %p, i64 %val seq_cst

  %6 = atomicrmw or i64* %p, i64 %val seq_cst
  ret i64 %6
}

define i64 @atomic_xor64(i64* nocapture %p, i64 %val) nounwind ssp {
; RAOINT-LABEL: atomic_xor64:
; RAOINT:       # %bb.0:
; RAOINT-NEXT:    movq %rdi, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; RAOINT-NEXT:    # encoding: [0x48,0x89,0x7c,0x24,0xe8]
; RAOINT-NEXT:    movq %rsi, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; RAOINT-NEXT:    # encoding: [0x48,0x89,0x74,0x24,0xf0]
; RAOINT-NEXT:    axorq %rsi, (%rdi) # encoding: [0xf3,0x48,0x0f,0x38,0xfc,0x37]
; RAOINT-NEXT:    axorq %rsi, (%rdi) # encoding: [0xf3,0x48,0x0f,0x38,0xfc,0x37]
; RAOINT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; RAOINT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; RAOINT-NEXT:    axorq %rsi, (%rdi) # encoding: [0xf3,0x48,0x0f,0x38,0xfc,0x37]
; RAOINT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; RAOINT-NEXT:    axorq %rsi, (%rdi) # encoding: [0xf3,0x48,0x0f,0x38,0xfc,0x37]
; RAOINT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; RAOINT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; RAOINT-NEXT:    axorq %rsi, (%rdi) # encoding: [0xf3,0x48,0x0f,0x38,0xfc,0x37]
; RAOINT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; RAOINT-NEXT:    movq (%rdi), %rax # encoding: [0x48,0x8b,0x07]
; RAOINT-NEXT:    movq %rax, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; RAOINT-NEXT:    # encoding: [0x48,0x89,0x44,0x24,0xf8]
; RAOINT-NEXT:  .LBB3_1: # %atomicrmw.start
; RAOINT-NEXT:    # =>This Inner Loop Header: Depth=1
; RAOINT-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rax # 8-byte Reload
; RAOINT-NEXT:    # encoding: [0x48,0x8b,0x44,0x24,0xf8]
; RAOINT-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rcx # 8-byte Reload
; RAOINT-NEXT:    # encoding: [0x48,0x8b,0x4c,0x24,0xe8]
; RAOINT-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rsi # 8-byte Reload
; RAOINT-NEXT:    # encoding: [0x48,0x8b,0x74,0x24,0xf0]
; RAOINT-NEXT:    movq %rax, %rdx # encoding: [0x48,0x89,0xc2]
; RAOINT-NEXT:    xorq %rsi, %rdx # encoding: [0x48,0x31,0xf2]
; RAOINT-NEXT:    lock cmpxchgq %rdx, (%rcx) # encoding: [0xf0,0x48,0x0f,0xb1,0x11]
; RAOINT-NEXT:    sete %cl # encoding: [0x0f,0x94,0xc1]
; RAOINT-NEXT:    movq %rax, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; RAOINT-NEXT:    # encoding: [0x48,0x89,0x44,0x24,0xe0]
; RAOINT-NEXT:    testb $1, %cl # encoding: [0xf6,0xc1,0x01]
; RAOINT-NEXT:    movq %rax, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; RAOINT-NEXT:    # encoding: [0x48,0x89,0x44,0x24,0xf8]
; RAOINT-NEXT:    jne .LBB3_2 # encoding: [0x75,A]
; RAOINT-NEXT:    # fixup A - offset: 1, value: .LBB3_2-1, kind: FK_PCRel_1
; RAOINT-NEXT:    jmp .LBB3_1 # encoding: [0xeb,A]
; RAOINT-NEXT:    # fixup A - offset: 1, value: .LBB3_1-1, kind: FK_PCRel_1
; RAOINT-NEXT:  .LBB3_2: # %atomicrmw.end
; RAOINT-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rax # 8-byte Reload
; RAOINT-NEXT:    # encoding: [0x48,0x8b,0x44,0x24,0xe0]
; RAOINT-NEXT:    retq # encoding: [0xc3]
;
; NO-RAOINT-LABEL: atomic_xor64:
; NO-RAOINT:       # %bb.0:
; NO-RAOINT-NEXT:    movq %rdi, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; NO-RAOINT-NEXT:    # encoding: [0x48,0x89,0x7c,0x24,0xe8]
; NO-RAOINT-NEXT:    movq %rsi, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; NO-RAOINT-NEXT:    # encoding: [0x48,0x89,0x74,0x24,0xf0]
; NO-RAOINT-NEXT:    lock xorq %rsi, (%rdi) # encoding: [0xf0,0x48,0x31,0x37]
; NO-RAOINT-NEXT:    lock xorq %rsi, (%rdi) # encoding: [0xf0,0x48,0x31,0x37]
; NO-RAOINT-NEXT:    lock xorq %rsi, (%rdi) # encoding: [0xf0,0x48,0x31,0x37]
; NO-RAOINT-NEXT:    lock xorq %rsi, (%rdi) # encoding: [0xf0,0x48,0x31,0x37]
; NO-RAOINT-NEXT:    lock xorq %rsi, (%rdi) # encoding: [0xf0,0x48,0x31,0x37]
; NO-RAOINT-NEXT:    movq (%rdi), %rax # encoding: [0x48,0x8b,0x07]
; NO-RAOINT-NEXT:    movq %rax, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; NO-RAOINT-NEXT:    # encoding: [0x48,0x89,0x44,0x24,0xf8]
; NO-RAOINT-NEXT:  .LBB3_1: # %atomicrmw.start
; NO-RAOINT-NEXT:    # =>This Inner Loop Header: Depth=1
; NO-RAOINT-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rax # 8-byte Reload
; NO-RAOINT-NEXT:    # encoding: [0x48,0x8b,0x44,0x24,0xf8]
; NO-RAOINT-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rcx # 8-byte Reload
; NO-RAOINT-NEXT:    # encoding: [0x48,0x8b,0x4c,0x24,0xe8]
; NO-RAOINT-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rsi # 8-byte Reload
; NO-RAOINT-NEXT:    # encoding: [0x48,0x8b,0x74,0x24,0xf0]
; NO-RAOINT-NEXT:    movq %rax, %rdx # encoding: [0x48,0x89,0xc2]
; NO-RAOINT-NEXT:    xorq %rsi, %rdx # encoding: [0x48,0x31,0xf2]
; NO-RAOINT-NEXT:    lock cmpxchgq %rdx, (%rcx) # encoding: [0xf0,0x48,0x0f,0xb1,0x11]
; NO-RAOINT-NEXT:    sete %cl # encoding: [0x0f,0x94,0xc1]
; NO-RAOINT-NEXT:    movq %rax, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; NO-RAOINT-NEXT:    # encoding: [0x48,0x89,0x44,0x24,0xe0]
; NO-RAOINT-NEXT:    testb $1, %cl # encoding: [0xf6,0xc1,0x01]
; NO-RAOINT-NEXT:    movq %rax, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; NO-RAOINT-NEXT:    # encoding: [0x48,0x89,0x44,0x24,0xf8]
; NO-RAOINT-NEXT:    jne .LBB3_2 # encoding: [0x75,A]
; NO-RAOINT-NEXT:    # fixup A - offset: 1, value: .LBB3_2-1, kind: FK_PCRel_1
; NO-RAOINT-NEXT:    jmp .LBB3_1 # encoding: [0xeb,A]
; NO-RAOINT-NEXT:    # fixup A - offset: 1, value: .LBB3_1-1, kind: FK_PCRel_1
; NO-RAOINT-NEXT:  .LBB3_2: # %atomicrmw.end
; NO-RAOINT-NEXT:    movq {{[-0-9]+}}(%r{{[sb]}}p), %rax # 8-byte Reload
; NO-RAOINT-NEXT:    # encoding: [0x48,0x8b,0x44,0x24,0xe0]
; NO-RAOINT-NEXT:    retq # encoding: [0xc3]
  %1 = atomicrmw xor i64* %p, i64 %val monotonic
  %2 = atomicrmw xor i64* %p, i64 %val acquire
  %3 = atomicrmw xor i64* %p, i64 %val release
  %4 = atomicrmw xor i64* %p, i64 %val acq_rel
  %5 = atomicrmw xor i64* %p, i64 %val seq_cst

  %6 = atomicrmw xor i64* %p, i64 %val seq_cst
  ret i64 %6
}

define i64 @atomic_sub64(i64* nocapture %p, i64 %val) nounwind ssp {
; RAOINT-LABEL: atomic_sub64:
; RAOINT:       # %bb.0:
; RAOINT-NEXT:    movq %rsi, %rax # encoding: [0x48,0x89,0xf0]
; RAOINT-NEXT:    negq %rax # encoding: [0x48,0xf7,0xd8]
; RAOINT-NEXT:    aaddq %rax, (%rdi) # encoding: [0x48,0x0f,0x38,0xfc,0x07]
; RAOINT-NEXT:    aaddq %rax, (%rdi) # encoding: [0x48,0x0f,0x38,0xfc,0x07]
; RAOINT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; RAOINT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; RAOINT-NEXT:    aaddq %rax, (%rdi) # encoding: [0x48,0x0f,0x38,0xfc,0x07]
; RAOINT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; RAOINT-NEXT:    aaddq %rax, (%rdi) # encoding: [0x48,0x0f,0x38,0xfc,0x07]
; RAOINT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; RAOINT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; RAOINT-NEXT:    aaddq %rax, (%rdi) # encoding: [0x48,0x0f,0x38,0xfc,0x07]
; RAOINT-NEXT:    mfence # encoding: [0x0f,0xae,0xf0]
; RAOINT-NEXT:    lock xaddq %rax, (%rdi) # encoding: [0xf0,0x48,0x0f,0xc1,0x07]
; RAOINT-NEXT:    retq # encoding: [0xc3]
;
; NO-RAOINT-LABEL: atomic_sub64:
; NO-RAOINT:       # %bb.0:
; NO-RAOINT-NEXT:    movq %rsi, %rax # encoding: [0x48,0x89,0xf0]
; NO-RAOINT-NEXT:    lock subq %rax, (%rdi) # encoding: [0xf0,0x48,0x29,0x07]
; NO-RAOINT-NEXT:    lock subq %rax, (%rdi) # encoding: [0xf0,0x48,0x29,0x07]
; NO-RAOINT-NEXT:    lock subq %rax, (%rdi) # encoding: [0xf0,0x48,0x29,0x07]
; NO-RAOINT-NEXT:    lock subq %rax, (%rdi) # encoding: [0xf0,0x48,0x29,0x07]
; NO-RAOINT-NEXT:    lock subq %rax, (%rdi) # encoding: [0xf0,0x48,0x29,0x07]
; NO-RAOINT-NEXT:    negq %rax # encoding: [0x48,0xf7,0xd8]
; NO-RAOINT-NEXT:    lock xaddq %rax, (%rdi) # encoding: [0xf0,0x48,0x0f,0xc1,0x07]
; NO-RAOINT-NEXT:    retq # encoding: [0xc3]
  %1 = atomicrmw sub i64* %p, i64 %val monotonic
  %2 = atomicrmw sub i64* %p, i64 %val acquire
  %3 = atomicrmw sub i64* %p, i64 %val release
  %4 = atomicrmw sub i64* %p, i64 %val acq_rel
  %5 = atomicrmw sub i64* %p, i64 %val seq_cst

  %6 = atomicrmw sub i64* %p, i64 %val seq_cst
  ret i64 %6
}

