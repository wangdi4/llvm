; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;RUN: llc < %s -mtriple=x86_64-unknown-linux-gnu  | FileCheck %s -check-prefix=X86
;RUN: llc < %s -mtriple=x86_64-windows  | FileCheck %s -check-prefix=X86Win

@.str = private unnamed_addr constant [14 x i8] c"sync_acquired\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"sync_releasing\00", align 1

define dso_local void @func_bb_last(i32* noundef %xyz, i32 noundef %abc) {
; X86-LABEL: func_bb_last:
; X86:       # %bb.0: # %entry
; X86-NEXT:    testl %esi, %esi
; X86-NEXT:    je .LBB0_2
; X86-NEXT:  # %bb.1: # %if.then
; X86-NEXT:    #MEMBARRIER
; X86-NEXT:  .Lnotify_nzc0:
; X86-NEXT:    #__notify_intrinsic(sync_acquired, dwarf::DW_OP_reg5)
; X86-NEXT:    nop
; X86-NEXT:    nop
; X86-NEXT:    nop
; X86-NEXT:    nop
; X86-NEXT:    movl $2, (%rdi)
; X86-NEXT:    #MEMBARRIER
; X86-NEXT:  .Lnotify_nzc_probe0:
; X86-NEXT:  .Lnotify_nzc1:
; X86-NEXT:    #__notify_intrinsic(sync_releasing, dwarf::DW_OP_reg5)
; X86-NEXT:    nop
; X86-NEXT:    nop
; X86-NEXT:    nop
; X86-NEXT:    nop
; X86-NEXT:    nop
; X86-NEXT:    movl $1, (%rdi)
; X86-NEXT:  .Lnotify_nzc_probe1:
; X86-NEXT:  .LBB0_2: # %if.end
; X86-NEXT:    retq
;
; X86Win-LABEL: func_bb_last:
; X86Win:       # %bb.0: # %entry
; X86Win-NEXT:    testl %edx, %edx
; X86Win-NEXT:    je .LBB0_2
; X86Win-NEXT:  # %bb.1: # %if.then
; X86Win-NEXT:    #MEMBARRIER
; X86Win-NEXT:  .Lnotify_nzc0:
; X86Win-NEXT:    #__notify_intrinsic(sync_acquired, dwarf::DW_OP_reg2)
; X86Win-NEXT:    nop
; X86Win-NEXT:    nop
; X86Win-NEXT:    nop
; X86Win-NEXT:    nop
; X86Win-NEXT:    movl $2, (%rcx)
; X86Win-NEXT:    #MEMBARRIER
; X86Win-NEXT:  .Lnotify_nzc_probe0:
; X86Win-NEXT:  .Lnotify_nzc1:
; X86Win-NEXT:    #__notify_intrinsic(sync_releasing, dwarf::DW_OP_reg2)
; X86Win-NEXT:    nop
; X86Win-NEXT:    nop
; X86Win-NEXT:    nop
; X86Win-NEXT:    nop
; X86Win-NEXT:    nop
; X86Win-NEXT:    movl $1, (%rcx)
; X86Win-NEXT:  .Lnotify_nzc_probe1:
; X86Win-NEXT:  .LBB0_2: # %if.end
; X86Win-NEXT:    retq
entry:
  %tobool.not = icmp eq i32 %abc, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  fence syncscope("singlethread") seq_cst
  %0 = bitcast i32* %xyz to i8*
  tail call void @llvm.notify.nzc(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i8* %0)
  store i32 2, i32* %xyz, align 4
  fence syncscope("singlethread") seq_cst
  tail call void @llvm.notify.nzc(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i8* nonnull %0)
  store i32 1, i32* %xyz, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare void @llvm.notify.nzc(i8*, i8*)
