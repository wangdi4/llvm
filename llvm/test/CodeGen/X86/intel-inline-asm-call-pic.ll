; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=x86_64-unknown-linux-gnu -relocation-model=pic %s  -o - | FileCheck %s

; void func();
; static void sfunc() {}
; long long GV;
; void foo () {
;   __asm {
;   call func
;   jmp func
;   call sfunc
;   jmp sfunc
;   mov rax, func
;   mov rax, sfunc
;   mov rax, GV
;   lea rax, func
;   lea rax, sfunc
;   lea rax, GV
;   add rax, func
;   add rax, sfunc
;   add rax, GV
;   };
; }

@GV = global i64 0, align 8

define void @foo() nounwind {
; CHECK-LABEL: foo:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    movq GV@GOTPCREL(%rip), %rcx
; CHECK-NEXT:    movq func@GOTPCREL(%rip), %rdx
; CHECK-NEXT:    #APP
; CHECK-EMPTY:

;   call func
; CHECK-NEXT:    callq *func@PLT
;   jmp func
; CHECK-NEXT:    jmpq *func@PLT
;   call sfunc
; CHECK-NEXT:    callq *sfunc
;   jmp sfunc
; CHECK-NEXT:    jmpq *sfunc
;   mov rax, func
; CHECK-NEXT:    movq (%rdx), %rax
;   mov rax, sfunc
; CHECK-NEXT:    movq sfunc(%rip), %rax
;   mov rax, GV
; CHECK-NEXT:    movq (%rcx), %rax
;   lea rax, func
; CHECK-NEXT:    leaq (%rdx), %rax
;   lea rax, sfunc
; CHECK-NEXT:    leaq sfunc(%rip), %rax
;   lea rax, GV
; CHECK-NEXT:    leaq (%rcx), %rax
;   add rax, func
; CHECK-NEXT:    addq (%rdx), %rax
;   add rax, sfunc
; CHECK-NEXT:    addq sfunc(%rip), %rax
;   add rax, GV
; CHECK-NEXT:    addq (%rcx), %rax
; CHECK-EMPTY:
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    popq %rax
; CHECK-NEXT:    retq

entry:
  tail call void asm sideeffect inteldialect "call qword ptr ${0:P}\0A\09jmp qword ptr ${1:P}\0A\09call qword ptr ${2:P}\0A\09jmp qword ptr ${3:P}\0A\09mov rax, qword ptr $4\0A\09mov rax, qword ptr $5\0A\09mov rax, $6\0A\09lea rax, qword ptr $7\0A\09lea rax, qword ptr $8\0A\09lea rax, $9\0A\09add rax, qword ptr $10\0A\09add rax, qword ptr $11\0A\09add rax, $12", "*m,*m,*m,*m,*m,*m,*m,*m,*m,*m,*m,*m,*m,~{flags},~{rax},~{dirflag},~{fpsr},~{flags}"(void (...)* nonnull elementtype(void (...)) @func, void (...)* nonnull elementtype(void (...)) @func, void (...)* elementtype(void (...)) bitcast (void ()* @sfunc to void (...)*), void (...)* elementtype(void (...)) bitcast (void ()* @sfunc to void (...)*), void (...)* nonnull elementtype(void (...)) @func, void (...)* elementtype(void (...)) bitcast (void ()* @sfunc to void (...)*), i64* nonnull elementtype(i64) @GV, void (...)* nonnull elementtype(void (...)) @func, void (...)* elementtype(void (...)) bitcast (void ()* @sfunc to void (...)*), i64* nonnull elementtype(i64) @GV, void (...)* nonnull elementtype(void (...)) @func, void (...)* elementtype(void (...)) bitcast (void ()* @sfunc to void (...)*), i64* nonnull elementtype(i64) @GV)
  ret void
}

declare void @func(...)

define internal void @sfunc() {
entry:
  ret void
}
