; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; Test -no-reciprocal-for-short-vector flag disables reciprocal optimization for 128-bit VDIVPS instructions
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx2,+fma | FileCheck --check-prefixes=BOTH,RECIP %s
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx2,+fma -no-reciprocal-for-short-vector | FileCheck --check-prefixes=BOTH,NO-RECIP %s

define float @f32_one_step_2(float %x) #0 {
; BOTH-LABEL: f32_one_step_2:
; BOTH:       # %bb.0:
; BOTH-NEXT:    vmovss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; BOTH-NEXT:    vdivss %xmm0, %xmm1, %xmm0
; BOTH-NEXT:    retq
  %div = fdiv fast float 3456.0, %x
  ret float %div
}

define void @v2f32_one_step2(<2 x float> %x, float* %ret1, float* %ret2) #0 {
; RECIP-LABEL: v2f32_one_step2:
; RECIP:       # %bb.0:
; RECIP-NEXT:    vrcpps %xmm0, %xmm1
; RECIP-NEXT:    vmovddup {{.*#+}} xmm2 = [4611686019492741120,4611686019492741120]
; RECIP-NEXT:    # xmm2 = mem[0,0]
; RECIP-NEXT:    vmulps %xmm2, %xmm1, %xmm3
; RECIP-NEXT:    vfmsub213ps {{.*#+}} xmm0 = (xmm3 * xmm0) - xmm2
; RECIP-NEXT:    vfnmadd213ps {{.*#+}} xmm0 = -(xmm1 * xmm0) + xmm3
; RECIP-NEXT:    vmovss %xmm0, (%rdi)
; RECIP-NEXT:    vextractps $1, %xmm0, (%rsi)
; RECIP-NEXT:    retq
;
; NO-RECIP-LABEL: v2f32_one_step2:
; NO-RECIP:       # %bb.0:
; NO-RECIP-NEXT:    vmovaps {{.*#+}} xmm1 = <1.0E+0,2.0E+0,u,u>
; NO-RECIP-NEXT:    vdivps %xmm0, %xmm1, %xmm0
; NO-RECIP-NEXT:    vmovss %xmm0, (%rdi)
; NO-RECIP-NEXT:    vextractps $1, %xmm0, (%rsi)
; NO-RECIP-NEXT:    retq
  %div = fdiv fast <2 x float> <float 1.0, float 2.0>, %x
  %value1 = extractelement <2 x float> %div, i32 0
  %value2 = extractelement <2 x float> %div, i32 1
  store float %value1, float* %ret1
  store float %value2, float* %ret2
  ret void
}

define <4 x float> @v4f32_one_step2(<4 x float> %x) #0 {
; RECIP-LABEL: v4f32_one_step2:
; RECIP:       # %bb.0:
; RECIP-NEXT:    vrcpps %xmm0, %xmm1
; RECIP-NEXT:    vfmsub213ps {{.*#+}} xmm0 = (xmm1 * xmm0) - mem
; RECIP-NEXT:    vmulps {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm1, %xmm1
; RECIP-NEXT:    vfnmadd213ps {{.*#+}} xmm0 = -(xmm1 * xmm0) + xmm1
; RECIP-NEXT:    retq
;
; NO-RECIP-LABEL: v4f32_one_step2:
; NO-RECIP:       # %bb.0:
; NO-RECIP-NEXT:    vmovaps {{.*#+}} xmm1 = [1.0E+0,2.0E+0,3.0E+0,4.0E+0]
; NO-RECIP-NEXT:    vdivps %xmm0, %xmm1, %xmm0
; NO-RECIP-NEXT:    retq
  %div = fdiv fast <4 x float> <float 1.0, float 2.0, float 3.0, float 4.0>, %x
  ret <4 x float> %div
}

define <8 x float> @v8f32_one_step2(<8 x float> %x) #0 {
; BOTH-LABEL: v8f32_one_step2:
; BOTH:       # %bb.0:
; BOTH-NEXT:    vrcpps %ymm0, %ymm1
; BOTH-NEXT:    vfmsub213ps {{.*#+}} ymm0 = (ymm1 * ymm0) - mem
; BOTH-NEXT:    vmulps {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %ymm1, %ymm1
; BOTH-NEXT:    vfnmadd213ps {{.*#+}} ymm0 = -(ymm1 * ymm0) + ymm1
; BOTH-NEXT:    retq
  %div = fdiv fast <8 x float> <float 1.0, float 2.0, float 3.0, float 4.0, float 5.0, float 6.0, float 7.0, float 8.0>, %x
  ret <8 x float> %div
}

attributes #0 = { "unsafe-fp-math"="true" }
