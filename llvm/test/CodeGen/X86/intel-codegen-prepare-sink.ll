; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: llc < %s -mtriple=x86_64-linux | FileCheck -check-prefixes=ASM %s
; RUN: opt -codegenprepare < %s -mtriple=x86_64-linux -S | FileCheck -check-prefixes=IR %s

define dso_local noundef float @sqrt(float noundef %a) {
; ASM-LABEL: sqrt:
; ASM:         rsqrtss
;
; IR-LABEL: define {{[^@]+}}@sqrt(
; IR-NEXT:  entry:
; IR-NEXT:    [[CMP_I:%.*]] = fcmp fast ogt float [[A:%.*]], 0.000000e+00
; IR-NEXT:    [[DOTFROZEN:%.*]] = freeze i1 [[CMP_I]]
; IR-NEXT:    br i1 [[DOTFROZEN]], label [[SELECT_TRUE_SINK:%.*]], label [[SELECT_END:%.*]]
; IR:       select.true.sink:
; IR-NEXT:    [[TMP0:%.*]] = tail call fast float @llvm.sqrt.f32(float [[A]])
; IR-NEXT:    [[DIV_I:%.*]] = fdiv fast float 1.000000e+00, [[TMP0]]
; IR-NEXT:    br label [[SELECT_END]]
; IR:       select.end:
; IR-NEXT:    [[TMP1:%.*]] = phi float [ [[DIV_I]], [[SELECT_TRUE_SINK]] ], [ 0.000000e+00, [[ENTRY:%.*]] ]
; IR-NEXT:    ret float [[TMP1]]
;
entry:
  %cmp.i = fcmp fast ogt float %a, 0.000000e+00
  %0 = tail call fast float @llvm.sqrt.f32(float %a)
  %div.i = fdiv fast float 1.000000e+00, %0
  %1 = select fast i1 %cmp.i, float %div.i, float 0.000000e+00
  ret float %1
}

declare float @llvm.sqrt.f32(float)
