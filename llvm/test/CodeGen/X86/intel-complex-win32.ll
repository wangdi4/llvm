; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=i386-windows-msvc | FileCheck %s

; Check that we handle the ABI of the complex functions correctly for 32-bit
; windows API. Compiler-rt only includes mulsc3/muldc3, so we only test those.

declare <2 x float> @llvm.intel.complex.fmul.v2f32(<2 x float>, <2 x float>)
declare <2 x double> @llvm.intel.complex.fmul.v2f64(<2 x double>, <2 x double>)

define <2 x float> @intrinsic_f32(<2 x float> %z, <2 x float> %w) {
; CHECK-LABEL: intrinsic_f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    subl $24, %esp
; CHECK-NEXT:    flds {{[0-9]+}}(%esp)
; CHECK-NEXT:    flds {{[0-9]+}}(%esp)
; CHECK-NEXT:    flds {{[0-9]+}}(%esp)
; CHECK-NEXT:    flds {{[0-9]+}}(%esp)
; CHECK-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-NEXT:    fstps (%esp)
; CHECK-NEXT:    calll ___mulsc3
; CHECK-NEXT:    movl %edx, {{[0-9]+}}(%esp)
; CHECK-NEXT:    movl %eax, {{[0-9]+}}(%esp)
; CHECK-NEXT:    flds {{[0-9]+}}(%esp)
; CHECK-NEXT:    flds {{[0-9]+}}(%esp)
; CHECK-NEXT:    addl $24, %esp
; CHECK-NEXT:    retl
  %mul = call <2 x float> @llvm.intel.complex.fmul.v2f32(<2 x float> %z, <2 x float> %w)
  ret <2 x float> %mul
}

define <2 x double> @intrinsic_f64(<2 x double> %z, <2 x double> %w) {
; CHECK-LABEL: intrinsic_f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    pushl %ebp
; CHECK-NEXT:    movl %esp, %ebp
; CHECK-NEXT:    andl $-8, %esp
; CHECK-NEXT:    subl $56, %esp
; CHECK-NEXT:    fldl 8(%ebp)
; CHECK-NEXT:    fldl 16(%ebp)
; CHECK-NEXT:    fldl 24(%ebp)
; CHECK-NEXT:    fldl 32(%ebp)
; CHECK-NEXT:    fstpl {{[0-9]+}}(%esp)
; CHECK-NEXT:    fstpl {{[0-9]+}}(%esp)
; CHECK-NEXT:    fstpl {{[0-9]+}}(%esp)
; CHECK-NEXT:    fstpl {{[0-9]+}}(%esp)
; CHECK-NEXT:    leal {{[0-9]+}}(%esp), %eax
; CHECK-NEXT:    movl %eax, (%esp)
; CHECK-NEXT:    calll ___muldc3
; CHECK-NEXT:    fldl {{[0-9]+}}(%esp)
; CHECK-NEXT:    fldl {{[0-9]+}}(%esp)
; CHECK-NEXT:    fxch %st(1)
; CHECK-NEXT:    movl %ebp, %esp
; CHECK-NEXT:    popl %ebp
; CHECK-NEXT:    retl
  %mul = call <2 x double> @llvm.intel.complex.fmul.v2f64(<2 x double> %z, <2 x double> %w)
  ret <2 x double> %mul
}
