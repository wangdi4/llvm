; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-unknown-unknown  | FileCheck %s --check-prefixes=CHECK

define x86_fp80 @test_atanl_x86_fp80(x86_fp80 %conv)
; CHECK-LABEL: test_atanl_x86_fp80:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    subq $24, %rsp
; CHECK-NEXT:    .cfi_def_cfa_offset 32
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fstpt (%rsp)
; CHECK-NEXT:    callq atanl
; CHECK-NEXT:    addq $24, %rsp
; CHECK-NEXT:    .cfi_def_cfa_offset 8
; CHECK-NEXT:    retq
{
entry:
  %0 = call fast x86_fp80 @atanl(x86_fp80 %conv) #0
  ret x86_fp80 %0
}
declare x86_fp80 @atanl(x86_fp80) #0

define x86_fp80 @test_tanl_x86_fp80(x86_fp80 %conv)
; CHECK-LABEL: test_tanl_x86_fp80:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    subq $24, %rsp
; CHECK-NEXT:    .cfi_def_cfa_offset 32
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fstpt (%rsp)
; CHECK-NEXT:    callq tanl
; CHECK-NEXT:    addq $24, %rsp
; CHECK-NEXT:    .cfi_def_cfa_offset 8
; CHECK-NEXT:    retq
{
entry:
  %0 = call fast x86_fp80 @tanl(x86_fp80 %conv) #0
  ret x86_fp80 %0
}
declare x86_fp80 @tanl(x86_fp80) #0

define x86_fp80 @test_atan2l_x86_fp80(x86_fp80 %conv1, x86_fp80 %conv2)
; CHECK-LABEL: test_atan2l_x86_fp80:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    subq $40, %rsp
; CHECK-NEXT:    .cfi_def_cfa_offset 48
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fstpt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fstpt (%rsp)
; CHECK-NEXT:    callq atan2l
; CHECK-NEXT:    addq $40, %rsp
; CHECK-NEXT:    .cfi_def_cfa_offset 8
; CHECK-NEXT:    retq
{
entry:
  %0 = call fast x86_fp80 @atan2l(x86_fp80 %conv1, x86_fp80 %conv2) #0
  ret x86_fp80 %0
}
declare x86_fp80 @atan2l(x86_fp80, x86_fp80) #0
attributes #0 = { nounwind readnone }
