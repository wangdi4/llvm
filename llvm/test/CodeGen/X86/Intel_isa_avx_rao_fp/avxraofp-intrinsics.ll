; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_avx_rao_fp
; RUN: llc < %s -O0 -verify-machineinstrs -mtriple=x86_64-unknown-unknown --show-mc-encoding -mattr=+avx2,+avxraofp,+avx512fp16 | FileCheck %s --check-prefixes=X64
; RUN: llc < %s -O0 -verify-machineinstrs -mtriple=i686-unknown-unknown --show-mc-encoding -mattr=+avx2,+avxraofp,+avx512fp16 | FileCheck %s --check-prefixes=X86

define void @test_int_x86_vaaddpbf16128(i8* %A, <8 x i16> %B) {
; X64-LABEL: test_int_x86_vaaddpbf16128:
; X64:       # %bb.0:
; X64-NEXT:    vaaddpbf16 %xmm0, (%rdi) # encoding: [0xc4,0xe2,0x79,0x94,0x07]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_vaaddpbf16128:
; X86:       # %bb.0:
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x04]
; X86-NEXT:    vaaddpbf16 %xmm0, (%eax) # encoding: [0xc4,0xe2,0x79,0x94,0x00]
; X86-NEXT:    retl # encoding: [0xc3]
  call void @llvm.x86.vaaddpbf16128(i8* %A, <8 x i16> %B)
  ret  void
}
declare void @llvm.x86.vaaddpbf16128(i8* %A, <8 x i16> %B)

define void @test_int_x86_vaaddpbf16256(i8* %A, <16 x i16> %B) {
; X64-LABEL: test_int_x86_vaaddpbf16256:
; X64:       # %bb.0:
; X64-NEXT:    vaaddpbf16 %ymm0, (%rdi) # encoding: [0xc4,0xe2,0x7d,0x94,0x07]
; X64-NEXT:    vzeroupper # encoding: [0xc5,0xf8,0x77]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_vaaddpbf16256:
; X86:       # %bb.0:
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x04]
; X86-NEXT:    vaaddpbf16 %ymm0, (%eax) # encoding: [0xc4,0xe2,0x7d,0x94,0x00]
; X86-NEXT:    vzeroupper # encoding: [0xc5,0xf8,0x77]
; X86-NEXT:    retl # encoding: [0xc3]
  call void @llvm.x86.vaaddpbf16256(i8* %A, <16 x i16> %B)
  ret  void
}
declare void @llvm.x86.vaaddpbf16256(i8* %A, <16 x i16> %B)

define void @test_int_x86_vaaddpd128(i8* %A, <2 x double> %B) {
; X64-LABEL: test_int_x86_vaaddpd128:
; X64:       # %bb.0:
; X64-NEXT:    vaaddpd %xmm0, (%rdi) # encoding: [0xc4,0xe2,0xf9,0x84,0x07]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_vaaddpd128:
; X86:       # %bb.0:
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x04]
; X86-NEXT:    vaaddpd %xmm0, (%eax) # encoding: [0xc4,0xe2,0xf9,0x84,0x00]
; X86-NEXT:    retl # encoding: [0xc3]
  call void @llvm.x86.vaaddpd128(i8* %A, <2 x double> %B)
  ret  void
}
declare void @llvm.x86.vaaddpd128(i8* %A, <2 x double> %B)

define void @test_int_x86_vaaddpd256(i8* %A, <4 x double> %B) {
; X64-LABEL: test_int_x86_vaaddpd256:
; X64:       # %bb.0:
; X64-NEXT:    vaaddpd %ymm0, (%rdi) # encoding: [0xc4,0xe2,0xfd,0x84,0x07]
; X64-NEXT:    vzeroupper # encoding: [0xc5,0xf8,0x77]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_vaaddpd256:
; X86:       # %bb.0:
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x04]
; X86-NEXT:    vaaddpd %ymm0, (%eax) # encoding: [0xc4,0xe2,0xfd,0x84,0x00]
; X86-NEXT:    vzeroupper # encoding: [0xc5,0xf8,0x77]
; X86-NEXT:    retl # encoding: [0xc3]
  call void @llvm.x86.vaaddpd256(i8* %A, <4 x double> %B)
  ret  void
}
declare void @llvm.x86.vaaddpd256(i8* %A, <4 x double> %B)

define void @test_int_x86_vaaddph128(i8* %A, <8 x half> %B) {
; X64-LABEL: test_int_x86_vaaddph128:
; X64:       # %bb.0:
; X64-NEXT:    vaaddph %xmm0, (%rdi) # encoding: [0xc4,0xe2,0x78,0x94,0x07]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_vaaddph128:
; X86:       # %bb.0:
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x04]
; X86-NEXT:    vaaddph %xmm0, (%eax) # encoding: [0xc4,0xe2,0x78,0x94,0x00]
; X86-NEXT:    retl # encoding: [0xc3]
  call void @llvm.x86.vaaddph128(i8* %A, <8 x half> %B)
  ret  void
}
declare void @llvm.x86.vaaddph128(i8* %A, <8 x half> %B)

define void @test_int_x86_vaaddph256(i8* %A, <16 x half> %B) {
; X64-LABEL: test_int_x86_vaaddph256:
; X64:       # %bb.0:
; X64-NEXT:    vaaddph %ymm0, (%rdi) # encoding: [0xc4,0xe2,0x7c,0x94,0x07]
; X64-NEXT:    vzeroupper # encoding: [0xc5,0xf8,0x77]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_vaaddph256:
; X86:       # %bb.0:
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x04]
; X86-NEXT:    vaaddph %ymm0, (%eax) # encoding: [0xc4,0xe2,0x7c,0x94,0x00]
; X86-NEXT:    vzeroupper # encoding: [0xc5,0xf8,0x77]
; X86-NEXT:    retl # encoding: [0xc3]
  call void @llvm.x86.vaaddph256(i8* %A, <16 x half> %B)
  ret  void
}
declare void @llvm.x86.vaaddph256(i8* %A, <16 x half> %B)

define void @test_int_x86_vaaddps128(i8* %A, <4 x float> %B) {
; X64-LABEL: test_int_x86_vaaddps128:
; X64:       # %bb.0:
; X64-NEXT:    vaaddps %xmm0, (%rdi) # encoding: [0xc4,0xe2,0x78,0x84,0x07]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_vaaddps128:
; X86:       # %bb.0:
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x04]
; X86-NEXT:    vaaddps %xmm0, (%eax) # encoding: [0xc4,0xe2,0x78,0x84,0x00]
; X86-NEXT:    retl # encoding: [0xc3]
  call void @llvm.x86.vaaddps128(i8* %A, <4 x float> %B)
  ret  void
}
declare void @llvm.x86.vaaddps128(i8* %A, <4 x float> %B)

define void @test_int_x86_vaaddps256(i8* %A, <8 x float> %B) {
; X64-LABEL: test_int_x86_vaaddps256:
; X64:       # %bb.0:
; X64-NEXT:    vaaddps %ymm0, (%rdi) # encoding: [0xc4,0xe2,0x7c,0x84,0x07]
; X64-NEXT:    vzeroupper # encoding: [0xc5,0xf8,0x77]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_vaaddps256:
; X86:       # %bb.0:
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x04]
; X86-NEXT:    vaaddps %ymm0, (%eax) # encoding: [0xc4,0xe2,0x7c,0x84,0x00]
; X86-NEXT:    vzeroupper # encoding: [0xc5,0xf8,0x77]
; X86-NEXT:    retl # encoding: [0xc3]
  call void @llvm.x86.vaaddps256(i8* %A, <8 x float> %B)
  ret  void
}
declare void @llvm.x86.vaaddps256(i8* %A, <8 x float> %B)

define void @test_int_x86_vaaddsbf16128(i8* %A, <8 x i16> %B) {
; X64-LABEL: test_int_x86_vaaddsbf16128:
; X64:       # %bb.0:
; X64-NEXT:    vaaddsbf16 %xmm0, (%rdi) # encoding: [0xc4,0xe2,0x7b,0x94,0x07]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_vaaddsbf16128:
; X86:       # %bb.0:
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x04]
; X86-NEXT:    vaaddsbf16 %xmm0, (%eax) # encoding: [0xc4,0xe2,0x7b,0x94,0x00]
; X86-NEXT:    retl # encoding: [0xc3]
  call void @llvm.x86.vaaddsbf16128(i8* %A, <8 x i16> %B)
  ret  void
}
declare void @llvm.x86.vaaddsbf16128(i8* %A, <8 x i16> %B)

define void @test_int_x86_vaaddsd128(i8* %A, <2 x double> %B) {
; X64-LABEL: test_int_x86_vaaddsd128:
; X64:       # %bb.0:
; X64-NEXT:    vaaddsd %xmm0, (%rdi) # encoding: [0xc4,0xe2,0xfb,0x84,0x07]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_vaaddsd128:
; X86:       # %bb.0:
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x04]
; X86-NEXT:    vaaddsd %xmm0, (%eax) # encoding: [0xc4,0xe2,0xfb,0x84,0x00]
; X86-NEXT:    retl # encoding: [0xc3]
  call void @llvm.x86.vaaddsd128(i8* %A, <2 x double> %B)
  ret  void
}
declare void @llvm.x86.vaaddsd128(i8* %A, <2 x double> %B)

define void @test_int_x86_vaaddsh128(i8* %A, <8 x half> %B) {
; X64-LABEL: test_int_x86_vaaddsh128:
; X64:       # %bb.0:
; X64-NEXT:    vaaddsh %xmm0, (%rdi) # encoding: [0xc4,0xe2,0x7a,0x94,0x07]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_vaaddsh128:
; X86:       # %bb.0:
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x04]
; X86-NEXT:    vaaddsh %xmm0, (%eax) # encoding: [0xc4,0xe2,0x7a,0x94,0x00]
; X86-NEXT:    retl # encoding: [0xc3]
  call void @llvm.x86.vaaddsh128(i8* %A, <8 x half> %B)
  ret  void
}
declare void @llvm.x86.vaaddsh128(i8* %A, <8 x half> %B)

define void @test_int_x86_vaaddss128(i8* %A, <4 x float> %B) {
; X64-LABEL: test_int_x86_vaaddss128:
; X64:       # %bb.0:
; X64-NEXT:    vaaddss %xmm0, (%rdi) # encoding: [0xc4,0xe2,0x7a,0x84,0x07]
; X64-NEXT:    retq # encoding: [0xc3]
;
; X86-LABEL: test_int_x86_vaaddss128:
; X86:       # %bb.0:
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x04]
; X86-NEXT:    vaaddss %xmm0, (%eax) # encoding: [0xc4,0xe2,0x7a,0x84,0x00]
; X86-NEXT:    retl # encoding: [0xc3]
  call void @llvm.x86.vaaddss128(i8* %A, <4 x float> %B)
  ret  void
}
declare void @llvm.x86.vaaddss128(i8* %A, <4 x float> %B)

