; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=i686-linux  -enable-intel-advanced-opts=true -O3 -mattr=+avx512f,+avx512vl,+avx512dq | FileCheck %s --check-prefix=X86

source_filename = "ld-temp.o"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.pov::Object_Struct.99" = type { %"struct.pov::Method_Struct.74"*, i32, %"struct.pov::Object_Struct.99"*, %"struct.pov::Texture_Struct"*, %"struct.pov::Texture_Struct"*, %"struct.pov::Interior_Struct"*, %"struct.pov::Object_Struct.99"*, %"struct.pov::Object_Struct.99"*, %"struct.pov::Light_Source_Struct.98"*, %"struct.pov::Bounding_Box_Struct", %"struct.pov::Transform_Struct"*, %"struct.pov::Transform_Struct"*, float, i32 }
%"struct.pov::Method_Struct.74" = type { {}*, i32 (double*, %"struct.pov::Object_Struct.99"*)*, void (double*, %"struct.pov::Object_Struct.99"*, %"struct.pov::istk_entry.72"*)*, void (double*, %"struct.pov::Object_Struct.99"*, %"struct.pov::istk_entry.72"*)*, i8* (%"struct.pov::Object_Struct.99"*)*, void (%"struct.pov::Object_Struct.99"*, double*, %"struct.pov::Transform_Struct"*)*, void (%"struct.pov::Object_Struct.99"*, double*, %"struct.pov::Transform_Struct"*)*, void (%"struct.pov::Object_Struct.99"*, double*, %"struct.pov::Transform_Struct"*)*, void (%"struct.pov::Object_Struct.99"*, %"struct.pov::Transform_Struct"*)*, void (%"struct.pov::Object_Struct.99"*)*, void (%"struct.pov::Object_Struct.99"*)* }
%"struct.pov::istk_entry.72" = type { double, [3 x double], [3 x double], [3 x double], [2 x double], %"struct.pov::Object_Struct.99"*, i32, i32, double, double, double, double, double, double, double, double, double, i8*, i8* }
%"struct.pov::Texture_Struct" = type { i16, i16, i16, i32, float, float, float, %"struct.pov::Warps_Struct"*, %"struct.pov::Pattern_Struct"*, %"struct.pov::Blend_Map_Struct"*, %union.anon.17, %"struct.pov::Texture_Struct"*, %"struct.pov::Pigment_Struct"*, %"struct.pov::Tnormal_Struct"*, %"struct.pov::Finish_Struct"*, %"struct.pov::Texture_Struct"*, i32 }
%"struct.pov::Warps_Struct" = type { i16, %"struct.pov::Warps_Struct"*, %"struct.pov::Warps_Struct"* }
%"struct.pov::Pattern_Struct" = type { i16, i16, i16, i32, float, float, float, %"struct.pov::Warps_Struct"*, %"struct.pov::Pattern_Struct"*, %"struct.pov::Blend_Map_Struct"*, %union.anon.17 }
%"struct.pov::Blend_Map_Struct" = type { i32, i16, i8, i8, %"struct.pov::Blend_Map_Entry"* }
%"struct.pov::Blend_Map_Entry" = type { float, i8, %union.anon }
%union.anon = type { [2 x double], [8 x i8] }
%union.anon.17 = type { %struct.anon.21 }
%struct.anon.21 = type { [3 x double], [3 x double], double, double, i16, [3 x double]*, i32, [3 x double] }
%"struct.pov::Pigment_Struct" = type { i16, i16, i16, i32, float, float, float, %"struct.pov::Warps_Struct"*, %"struct.pov::Pattern_Struct"*, %"struct.pov::Blend_Map_Struct"*, %union.anon.17, [5 x float] }
%"struct.pov::Tnormal_Struct" = type { i16, i16, i16, i32, float, float, float, %"struct.pov::Warps_Struct"*, %"struct.pov::Pattern_Struct"*, %"struct.pov::Blend_Map_Struct"*, %union.anon.17, float, float }
%"struct.pov::Finish_Struct" = type { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, [3 x float], [3 x float], [3 x float], float, i32, float, i32 }
%"struct.pov::Interior_Struct" = type { i32, i32, i32, float, float, float, float, float, float, [5 x float], %"struct.pov::Media_Struct"* }
%"struct.pov::Media_Struct" = type { i32, i32, i32, i32, i32, double, i32, double, double, i32, i32, i32, i32, [5 x float], [5 x float], [5 x float], [5 x float], double, double, double, double*, double, i32, i32, %"struct.pov::Pigment_Struct"*, %"struct.pov::Media_Struct"* }
%"struct.pov::Light_Source_Struct.98" = type { %"struct.pov::Method_Struct.74"*, i32, %"struct.pov::Object_Struct.99"*, %"struct.pov::Texture_Struct"*, %"struct.pov::Texture_Struct"*, %"struct.pov::Interior_Struct"*, %"struct.pov::Object_Struct.99"*, %"struct.pov::Object_Struct.99"*, %"struct.pov::Light_Source_Struct.98"*, %"struct.pov::Bounding_Box_Struct", %"struct.pov::Transform_Struct"*, %"struct.pov::Transform_Struct"*, float, i32, %"struct.pov::Object_Struct.99"*, [5 x float], [3 x double], [3 x double], [3 x double], [3 x double], [3 x double], double, double, double, double, double, %"struct.pov::Light_Source_Struct.98"*, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i32, i32, i32, [5 x float]**, %"struct.pov::Object_Struct.99"*, %"struct.pov::Object_Struct.99"*, %"struct.pov::Blend_Map_Struct"*, [6 x %"struct.pov::Project_Tree_Node_Struct"*] }
%"struct.pov::Project_Tree_Node_Struct" = type { i16, %"struct.pov::BBox_Tree_Struct"*, %"struct.pov::Project_Struct", i16, %"struct.pov::Project_Tree_Node_Struct"** }
%"struct.pov::BBox_Tree_Struct" = type { i16, i16, %"struct.pov::Bounding_Box_Struct", %"struct.pov::BBox_Tree_Struct"** }
%"struct.pov::Project_Struct" = type { i32, i32, i32, i32 }
%"struct.pov::Bounding_Box_Struct" = type { [3 x float], [3 x float] }
%"struct.pov::Transform_Struct" = type { [4 x [4 x double]], [4 x [4 x double]] }
%"struct.pov::Ray_Struct" = type { [3 x double], [3 x double], i32, i32, [100 x %"struct.pov::Interior_Struct"*] }
%"__DTRT_struct.pov::istack_struct.101" = type { %"__DTRT_struct.pov::istack_struct.101"*, %"struct.pov::istk_entry.72"*, i32, i32 }
%"struct.pov::Object_Struct" = type { %"struct.pov::Method_Struct"*, i32, %"struct.pov::Object_Struct"*, %"struct.pov::Texture_Struct"*, %"struct.pov::Texture_Struct"*, %"struct.pov::Interior_Struct"*, %"struct.pov::Object_Struct"*, %"struct.pov::Object_Struct"*, %"struct.pov::Light_Source_Struct"*, %"struct.pov::Bounding_Box_Struct", %"struct.pov::Transform_Struct"*, %"struct.pov::Transform_Struct"*, float, i32 }
%"struct.pov::Method_Struct" = type { i32 (%"struct.pov::Object_Struct"*, %"struct.pov::Ray_Struct"*, %"struct.pov::istack_struct"*)*, i32 (double*, %"struct.pov::Object_Struct"*)*, void (double*, %"struct.pov::Object_Struct"*, %"struct.pov::istk_entry"*)*, void (double*, %"struct.pov::Object_Struct"*, %"struct.pov::istk_entry"*)*, i8* (%"struct.pov::Object_Struct"*)*, void (%"struct.pov::Object_Struct"*, double*, %"struct.pov::Transform_Struct"*)*, void (%"struct.pov::Object_Struct"*, double*, %"struct.pov::Transform_Struct"*)*, void (%"struct.pov::Object_Struct"*, double*, %"struct.pov::Transform_Struct"*)*, void (%"struct.pov::Object_Struct"*, %"struct.pov::Transform_Struct"*)*, void (%"struct.pov::Object_Struct"*)*, void (%"struct.pov::Object_Struct"*)* }
%"struct.pov::istack_struct" = type { %"struct.pov::istack_struct"*, %"struct.pov::istk_entry"*, i32, i32 }
%"struct.pov::istk_entry" = type { double, [3 x double], [3 x double], [3 x double], [2 x double], %"struct.pov::Object_Struct"*, i32, i32, double, double, double, double, double, double, double, double, double, i8*, i8* }
%"struct.pov::Light_Source_Struct" = type { %"struct.pov::Method_Struct"*, i32, %"struct.pov::Object_Struct"*, %"struct.pov::Texture_Struct"*, %"struct.pov::Texture_Struct"*, %"struct.pov::Interior_Struct"*, %"struct.pov::Object_Struct"*, %"struct.pov::Object_Struct"*, %"struct.pov::Light_Source_Struct"*, %"struct.pov::Bounding_Box_Struct", %"struct.pov::Transform_Struct"*, %"struct.pov::Transform_Struct"*, float, i32, %"struct.pov::Object_Struct"*, [5 x float], [3 x double], [3 x double], [3 x double], [3 x double], [3 x double], double, double, double, double, double, %"struct.pov::Light_Source_Struct"*, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i32, i32, i32, [5 x float]**, %"struct.pov::Object_Struct"*, %"struct.pov::Object_Struct"*, %"struct.pov::Blend_Map_Struct"*, [6 x %"struct.pov::Project_Tree_Node_Struct"*] }

@_ZN3pov5statsE = external hidden global [123 x i64], align 32

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture)

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture)

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double)

; Function Attrs: uwtable
define hidden i32 @_ZN3povL23All_Plane_IntersectionsEPNS_13Object_StructEPNS_10Ray_StructEPNS_13istack_structE.2582(%"struct.pov::Object_Struct.99"* %0, %"struct.pov::Ray_Struct"* nocapture readonly %1, %"__DTRT_struct.pov::istack_struct.101"* nocapture %2) {
; X86-LABEL: _ZN3povL23All_Plane_IntersectionsEPNS_13Object_StructEPNS_10Ray_StructEPNS_13istack_structE.2582:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebx
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    pushl %edi
; X86-NEXT:    .cfi_def_cfa_offset 12
; X86-NEXT:    pushl %esi
; X86-NEXT:    .cfi_def_cfa_offset 16
; X86-NEXT:    subl $64, %esp
; X86-NEXT:    .cfi_def_cfa_offset 80
; X86-NEXT:    .cfi_offset %esi, -16
; X86-NEXT:    .cfi_offset %edi, -12
; X86-NEXT:    .cfi_offset %ebx, -8
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    movl {{[0-9]+}}(%esp), %edi
; X86-NEXT:    addl $1, _ZN3pov5statsE+432
; X86-NEXT:    adcl $0, _ZN3pov5statsE+436
; X86-NEXT:    movl 60(%edi), %ecx
; X86-NEXT:    testl %ecx, %ecx
; X86-NEXT:    je .LBB0_1
; X86-NEXT:  # %bb.3:
; X86-NEXT:    movb $7, %dl
; X86-NEXT:    kmovb %edx, %k1
; X86-NEXT:    vmovupd 24(%eax), %ymm0 {%k1} {z}
; X86-NEXT:    vmovupd 128(%ecx), %xmm1
; X86-NEXT:    vmulpd 24(%eax){1to2}, %xmm1, %xmm1
; X86-NEXT:    vmovupd 160(%ecx), %xmm2
; X86-NEXT:    vfmadd132pd {{.*#+}} xmm2 = (xmm2 * mem) + xmm1
; X86-NEXT:    vextractf128 $1, %ymm0, %xmm1
; X86-NEXT:    vmovddup {{.*#+}} xmm1 = xmm1[0,0]
; X86-NEXT:    vfmadd132pd {{.*#+}} xmm1 = (xmm1 * mem) + xmm2
; X86-NEXT:    vmovsd {{.*#+}} xmm2 = mem[0],zero
; X86-NEXT:    vmovhpd {{.*#+}} xmm2 = xmm2[0],mem[0]
; X86-NEXT:    vmovsd {{.*#+}} xmm3 = mem[0],zero
; X86-NEXT:    vinsertf128 $1, %xmm3, %ymm2, %ymm2
; X86-NEXT:    vmulpd %ymm0, %ymm2, %ymm2
; X86-NEXT:    vpermilpd {{.*#+}} xmm3 = xmm2[1,0]
; X86-NEXT:    vaddsd %xmm3, %xmm2, %xmm3
; X86-NEXT:    vextractf128 $1, %ymm2, %xmm2
; X86-NEXT:    vaddsd %xmm2, %xmm3, %xmm2
; X86-NEXT:    vmovupd 76(%edi), %xmm4
; X86-NEXT:    vmulpd %xmm4, %xmm1, %xmm1
; X86-NEXT:    vpermilpd {{.*#+}} xmm3 = xmm1[1,0]
; X86-NEXT:    vaddsd %xmm1, %xmm3, %xmm1
; X86-NEXT:    vmovsd {{.*#+}} xmm3 = mem[0],zero
; X86-NEXT:    vfmadd231sd {{.*#+}} xmm1 = (xmm3 * xmm2) + xmm1
; X86-NEXT:    vandpd {{\.LCPI.*}}, %xmm1, %xmm2
; X86-NEXT:    xorl %esi, %esi
; X86-NEXT:    vucomisd {{\.LCPI.*}}, %xmm2
; X86-NEXT:    jb .LBB0_11
; X86-NEXT:  # %bb.4:
; X86-NEXT:    vmovupd (%eax), %ymm2 {%k1} {z}
; X86-NEXT:    vextractf128 $1, %ymm2, %xmm5
; X86-NEXT:    vmovddup {{.*#+}} xmm6 = xmm2[0,0]
; X86-NEXT:    vmovupd 224(%ecx), %xmm7
; X86-NEXT:    vfmadd231pd {{.*#+}} xmm7 = (xmm6 * mem) + xmm7
; X86-NEXT:    vpermilpd {{.*#+}} xmm6 = xmm2[1,1]
; X86-NEXT:    vfmadd231pd {{.*#+}} xmm7 = (xmm6 * mem) + xmm7
; X86-NEXT:    vmovddup {{.*#+}} xmm6 = xmm5[0,0]
; X86-NEXT:    vfmadd231pd {{.*#+}} xmm7 = (xmm6 * mem) + xmm7
; X86-NEXT:    vpermilpd {{.*#+}} xmm6 = xmm2[1,0]
; X86-NEXT:    vmulpd %xmm4, %xmm7, %xmm4
; X86-NEXT:    vpermilpd {{.*#+}} xmm7 = xmm4[1,0]
; X86-NEXT:    vaddsd %xmm4, %xmm7, %xmm7
; X86-NEXT:    vmovsd {{.*#+}} xmm4 = mem[0],zero
; X86-NEXT:    vfmadd231sd {{.*#+}} xmm4 = (xmm2 * mem) + xmm4
; X86-NEXT:    vfmadd231sd {{.*#+}} xmm4 = (xmm6 * mem) + xmm4
; X86-NEXT:    vfmadd231sd {{.*#+}} xmm4 = (xmm5 * mem) + xmm4
; X86-NEXT:    vfmadd213sd {{.*#+}} xmm4 = (xmm3 * xmm4) + xmm7
; X86-NEXT:    jmp .LBB0_5
; X86-NEXT:  .LBB0_1:
; X86-NEXT:    movb $7, %cl
; X86-NEXT:    kmovb %ecx, %k1
; X86-NEXT:    vmovupd 24(%eax), %ymm0 {%k1} {z}
; X86-NEXT:    vmovupd 76(%edi), %ymm3 {%k1} {z}
; X86-NEXT:    vmulpd %ymm3, %ymm0, %ymm1
; X86-NEXT:    vpermilpd {{.*#+}} xmm2 = xmm1[1,0]
; X86-NEXT:    vaddsd %xmm2, %xmm1, %xmm2
; X86-NEXT:    vextractf128 $1, %ymm1, %xmm1
; X86-NEXT:    vaddsd %xmm1, %xmm2, %xmm1
; X86-NEXT:    vandpd {{\.LCPI.*}}, %xmm1, %xmm2
; X86-NEXT:    xorl %esi, %esi
; X86-NEXT:    vucomisd {{\.LCPI.*}}, %xmm2
; X86-NEXT:    jb .LBB0_11
; X86-NEXT:  # %bb.2:
; X86-NEXT:    movb $7, %cl
; X86-NEXT:    kmovb %ecx, %k1
; X86-NEXT:    vmovupd (%eax), %ymm2 {%k1} {z}
; X86-NEXT:    vmulpd %ymm3, %ymm2, %ymm3
; X86-NEXT:    vpermilpd {{.*#+}} xmm4 = xmm3[1,0]
; X86-NEXT:    vaddsd %xmm3, %xmm4, %xmm4
; X86-NEXT:    vextractf128 $1, %ymm3, %xmm3
; X86-NEXT:    vaddsd %xmm3, %xmm4, %xmm4
; X86-NEXT:  .LBB0_5:
; X86-NEXT:    vaddsd 88(%edi), %xmm4, %xmm3
; X86-NEXT:    vxorpd {{\.LCPI.*}}, %xmm3, %xmm3
; X86-NEXT:    vdivsd %xmm1, %xmm3, %xmm3
; X86-NEXT:    xorl %esi, %esi
; X86-NEXT:    vucomisd {{\.LCPI.*}}, %xmm3
; X86-NEXT:    jb .LBB0_11
; X86-NEXT:  # %bb.6:
; X86-NEXT:    vmovsd {{.*#+}} xmm1 = mem[0],zero
; X86-NEXT:    vucomisd %xmm3, %xmm1
; X86-NEXT:    jb .LBB0_11
; X86-NEXT:  # %bb.7:
; X86-NEXT:    addl $1, _ZN3pov5statsE+440
; X86-NEXT:    adcl $0, _ZN3pov5statsE+444
; X86-NEXT:    vbroadcastsd %xmm3, %ymm1
; X86-NEXT:    vfmadd213pd {{.*#+}} ymm1 = (ymm0 * ymm1) + ymm2
; X86-NEXT:    movb $7, %al
; X86-NEXT:    kmovb %eax, %k1
; X86-NEXT:    vmovupd %ymm1, {{[0-9]+}}(%esp) {%k1}
; X86-NEXT:    movl 28(%edi), %ecx
; X86-NEXT:    testl %ecx, %ecx
; X86-NEXT:    je .LBB0_9
; X86-NEXT:  # %bb.8:
; X86-NEXT:    leal {{[0-9]+}}(%esp), %eax
; X86-NEXT:    movl %eax, (%esp)
; X86-NEXT:    leal {{[0-9]+}}(%esp), %edx
; X86-NEXT:    vmovapd %xmm3, {{[-0-9]+}}(%e{{[sb]}}p) # 16-byte Spill
; X86-NEXT:    vzeroupper
; X86-NEXT:    calll _ZN3pov13Point_In_ClipEPdPNS_13Object_StructE.2744.extracted
; X86-NEXT:    vmovapd {{[-0-9]+}}(%e{{[sb]}}p), %xmm3 # 16-byte Reload
; X86-NEXT:    cmpb $1, {{[0-9]+}}(%esp)
; X86-NEXT:    jne .LBB0_11
; X86-NEXT:  .LBB0_9:
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    movl 4(%eax), %edx
; X86-NEXT:    movl 12(%eax), %ecx
; X86-NEXT:    imull $188, %ecx, %esi
; X86-NEXT:    vmovsd %xmm3, (%edx,%esi)
; X86-NEXT:    movl %edi, 96(%edx,%esi)
; X86-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    vmovsd %xmm0, 8(%edx,%esi)
; X86-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    vmovsd %xmm0, 16(%edx,%esi)
; X86-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    vmovsd %xmm0, 24(%edx,%esi)
; X86-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    vmovsd %xmm0, 80(%edx,%esi)
; X86-NEXT:    movl {{[0-9]+}}(%esp), %edi
; X86-NEXT:    movl {{[0-9]+}}(%esp), %ebx
; X86-NEXT:    movl %edi, 88(%edx,%esi)
; X86-NEXT:    movl %ebx, 92(%edx,%esi)
; X86-NEXT:    movl $0, 184(%edx,%esi)
; X86-NEXT:    leal 1(%ecx), %edx
; X86-NEXT:    movl %edx, 12(%eax)
; X86-NEXT:    movl $1, %esi
; X86-NEXT:    cmpl 8(%eax), %edx
; X86-NEXT:    jb .LBB0_11
; X86-NEXT:  # %bb.10:
; X86-NEXT:    movl %ecx, 20(%eax)
; X86-NEXT:    addl $1, _ZN3pov5statsE+56
; X86-NEXT:    adcl $0, _ZN3pov5statsE+60
; X86-NEXT:  .LBB0_11:
; X86-NEXT:    movl %esi, %eax
; X86-NEXT:    addl $64, %esp
; X86-NEXT:    .cfi_def_cfa_offset 16
; X86-NEXT:    popl %esi
; X86-NEXT:    .cfi_def_cfa_offset 12
; X86-NEXT:    popl %edi
; X86-NEXT:    .cfi_def_cfa_offset 8
; X86-NEXT:    popl %ebx
; X86-NEXT:    .cfi_def_cfa_offset 4
; X86-NEXT:    vzeroupper
; X86-NEXT:    retl
  %4 = alloca i1, align 1
  %5 = alloca [3 x double], align 16
  %6 = bitcast [3 x double]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6)
  %7 = load i64, i64* getelementptr inbounds ([123 x i64], [123 x i64]* @_ZN3pov5statsE, i64 0, i64 54), align 16
  %8 = add nsw i64 %7, 1
  store i64 %8, i64* getelementptr inbounds ([123 x i64], [123 x i64]* @_ZN3pov5statsE, i64 0, i64 54), align 16
  %9 = getelementptr inbounds %"struct.pov::Object_Struct.99", %"struct.pov::Object_Struct.99"* %0, i64 0, i32 10
  %10 = load %"struct.pov::Transform_Struct"*, %"struct.pov::Transform_Struct"** %9, align 8
  %11 = icmp eq %"struct.pov::Transform_Struct"* %10, null
  br i1 %11, label %12, label %39

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"struct.pov::Object_Struct.99", %"struct.pov::Object_Struct.99"* %0, i64 1
  %14 = getelementptr inbounds %"struct.pov::Ray_Struct", %"struct.pov::Ray_Struct"* %1, i64 0, i32 1, i64 0
  %15 = bitcast double* %14 to <3 x double>*
  %16 = load <3 x double>, <3 x double>* %15, align 8
  %17 = bitcast %"struct.pov::Object_Struct.99"* %13 to <3 x double>*
  %18 = load <3 x double>, <3 x double>* %17, align 8
  %19 = fmul fast <3 x double> %16, %18
  %20 = shufflevector <3 x double> %19, <3 x double> undef, <2 x i32> <i32 0, i32 undef>
  %21 = shufflevector <3 x double> %19, <3 x double> undef, <2 x i32> <i32 1, i32 undef>
  %22 = fadd fast <2 x double> %20, %21
  %23 = extractelement <2 x double> %22, i32 0
  %24 = extractelement <3 x double> %19, i32 2
  %25 = fadd fast double %23, %24
  %26 = tail call fast double @llvm.fabs.f64(double %25)
  %27 = fcmp fast olt double %26, 0x3E7AD7F29ABCAF48
  br i1 %27, label %209, label %28

28:                                               ; preds = %12
  %29 = bitcast %"struct.pov::Ray_Struct"* %1 to <3 x double>*
  %30 = load <3 x double>, <3 x double>* %29, align 8
  %31 = fmul fast <3 x double> %30, %18
  %32 = fmul fast <3 x double> %30, %18
  %33 = shufflevector <3 x double> %32, <3 x double> undef, <3 x i32> <i32 1, i32 undef, i32 undef>
  %34 = fadd fast <3 x double> %33, %31
  %35 = fmul fast <3 x double> %30, %18
  %36 = shufflevector <3 x double> %35, <3 x double> undef, <3 x i32> <i32 2, i32 undef, i32 undef>
  %37 = fadd fast <3 x double> %34, %36
  %38 = extractelement <3 x double> %37, i64 0
  br label %137

39:                                               ; preds = %3
  %40 = bitcast %"struct.pov::Ray_Struct"* %1 to <3 x double>*
  %41 = load <3 x double>, <3 x double>* %40, align 8
  %42 = getelementptr inbounds %"struct.pov::Ray_Struct", %"struct.pov::Ray_Struct"* %1, i64 0, i32 1, i64 0
  %43 = bitcast double* %42 to <3 x double>*
  %44 = load <3 x double>, <3 x double>* %43, align 8
  %45 = getelementptr inbounds %"struct.pov::Transform_Struct", %"struct.pov::Transform_Struct"* %10, i64 0, i32 1, i64 0, i64 0
  %46 = bitcast double* %45 to <2 x double>*
  %47 = load <2 x double>, <2 x double>* %46, align 8
  %48 = shufflevector <3 x double> %44, <3 x double> undef, <2 x i32> zeroinitializer
  %49 = fmul fast <2 x double> %47, %48
  %50 = getelementptr inbounds %"struct.pov::Transform_Struct", %"struct.pov::Transform_Struct"* %10, i64 0, i32 1, i64 1, i64 0
  %51 = bitcast double* %50 to <2 x double>*
  %52 = load <2 x double>, <2 x double>* %51, align 8
  %53 = shufflevector <3 x double> %44, <3 x double> undef, <2 x i32> <i32 1, i32 1>
  %54 = fmul fast <2 x double> %52, %53
  %55 = fadd fast <2 x double> %54, %49
  %56 = getelementptr inbounds %"struct.pov::Transform_Struct", %"struct.pov::Transform_Struct"* %10, i64 0, i32 1, i64 2, i64 0
  %57 = bitcast double* %56 to <2 x double>*
  %58 = load <2 x double>, <2 x double>* %57, align 8
  %59 = shufflevector <3 x double> %44, <3 x double> undef, <2 x i32> <i32 2, i32 2>
  %60 = fmul fast <2 x double> %58, %59
  %61 = fadd fast <2 x double> %55, %60
  %62 = getelementptr inbounds %"struct.pov::Transform_Struct", %"struct.pov::Transform_Struct"* %10, i64 0, i32 1, i64 0, i64 2
  %63 = load double, double* %62, align 8
  %64 = getelementptr inbounds %"struct.pov::Transform_Struct", %"struct.pov::Transform_Struct"* %10, i64 0, i32 1, i64 1, i64 2
  %65 = load double, double* %64, align 8
  %66 = getelementptr inbounds %"struct.pov::Transform_Struct", %"struct.pov::Transform_Struct"* %10, i64 0, i32 1, i64 2, i64 2
  %67 = load double, double* %66, align 8
  %68 = insertelement <3 x double> undef, double %63, i32 0
  %69 = insertelement <3 x double> %68, double %65, i32 1
  %70 = insertelement <3 x double> %69, double %67, i32 2
  %71 = fmul fast <3 x double> %70, %44
  %72 = shufflevector <3 x double> %71, <3 x double> undef, <2 x i32> <i32 0, i32 undef>
  %73 = shufflevector <3 x double> %71, <3 x double> undef, <2 x i32> <i32 1, i32 undef>
  %74 = fadd fast <2 x double> %72, %73
  %75 = extractelement <2 x double> %74, i32 0
  %76 = extractelement <3 x double> %71, i32 2
  %77 = fadd fast double %75, %76
  %78 = getelementptr inbounds %"struct.pov::Object_Struct.99", %"struct.pov::Object_Struct.99"* %0, i64 1
  %79 = bitcast %"struct.pov::Object_Struct.99"* %78 to <2 x double>*
  %80 = load <2 x double>, <2 x double>* %79, align 8
  %81 = fmul fast <2 x double> %61, %80
  %82 = shufflevector <2 x double> %81, <2 x double> undef, <2 x i32> <i32 1, i32 undef>
  %83 = fadd fast <2 x double> %82, %81
  %84 = extractelement <2 x double> %83, i64 0
  %85 = getelementptr inbounds %"struct.pov::Object_Struct.99", %"struct.pov::Object_Struct.99"* %0, i64 1, i32 2
  %86 = bitcast %"struct.pov::Object_Struct.99"** %85 to double*
  %87 = load double, double* %86, align 8
  %88 = fmul fast double %77, %87
  %89 = fadd fast double %84, %88
  %90 = tail call fast double @llvm.fabs.f64(double %89)
  %91 = fcmp fast olt double %90, 0x3E7AD7F29ABCAF48
  br i1 %91, label %209, label %92

92:                                               ; preds = %39
  %93 = getelementptr inbounds %"struct.pov::Transform_Struct", %"struct.pov::Transform_Struct"* %10, i64 0, i32 1, i64 1, i64 2
  %94 = load double, double* %93, align 8
  %95 = extractelement <3 x double> %41, i32 1
  %96 = fmul fast double %94, %95
  %97 = getelementptr inbounds %"struct.pov::Transform_Struct", %"struct.pov::Transform_Struct"* %10, i64 0, i32 1, i64 0, i64 2
  %98 = load double, double* %97, align 8
  %99 = extractelement <3 x double> %41, i32 0
  %100 = fmul fast double %98, %99
  %101 = fadd fast double %96, %100
  %102 = getelementptr inbounds %"struct.pov::Transform_Struct", %"struct.pov::Transform_Struct"* %10, i64 0, i32 1, i64 2, i64 2
  %103 = load double, double* %102, align 8
  %104 = extractelement <3 x double> %41, i32 2
  %105 = fmul fast double %103, %104
  %106 = fadd fast double %101, %105
  %107 = getelementptr inbounds %"struct.pov::Transform_Struct", %"struct.pov::Transform_Struct"* %10, i64 0, i32 1, i64 3, i64 2
  %108 = load double, double* %107, align 8
  %109 = fadd fast double %106, %108
  %110 = getelementptr inbounds %"struct.pov::Transform_Struct", %"struct.pov::Transform_Struct"* %10, i64 0, i32 1, i64 1, i64 0
  %111 = bitcast double* %110 to <2 x double>*
  %112 = load <2 x double>, <2 x double>* %111, align 8
  %113 = shufflevector <3 x double> %41, <3 x double> undef, <2 x i32> <i32 1, i32 1>
  %114 = fmul fast <2 x double> %112, %113
  %115 = getelementptr inbounds %"struct.pov::Transform_Struct", %"struct.pov::Transform_Struct"* %10, i64 0, i32 1, i64 0, i64 0
  %116 = bitcast double* %115 to <2 x double>*
  %117 = load <2 x double>, <2 x double>* %116, align 8
  %118 = shufflevector <3 x double> %41, <3 x double> undef, <2 x i32> zeroinitializer
  %119 = fmul fast <2 x double> %117, %118
  %120 = fadd fast <2 x double> %114, %119
  %121 = getelementptr inbounds %"struct.pov::Transform_Struct", %"struct.pov::Transform_Struct"* %10, i64 0, i32 1, i64 2, i64 0
  %122 = bitcast double* %121 to <2 x double>*
  %123 = load <2 x double>, <2 x double>* %122, align 8
  %124 = shufflevector <3 x double> %41, <3 x double> undef, <2 x i32> <i32 2, i32 2>
  %125 = fmul fast <2 x double> %123, %124
  %126 = fadd fast <2 x double> %120, %125
  %127 = getelementptr inbounds %"struct.pov::Transform_Struct", %"struct.pov::Transform_Struct"* %10, i64 0, i32 1, i64 3, i64 0
  %128 = bitcast double* %127 to <2 x double>*
  %129 = load <2 x double>, <2 x double>* %128, align 8
  %130 = fadd fast <2 x double> %126, %129
  %131 = fmul fast <2 x double> %130, %80
  %132 = shufflevector <2 x double> %131, <2 x double> undef, <2 x i32> <i32 1, i32 undef>
  %133 = fadd fast <2 x double> %132, %131
  %134 = extractelement <2 x double> %133, i64 0
  %135 = fmul fast double %109, %87
  %136 = fadd fast double %134, %135
  br label %137

137:                                              ; preds = %92, %28
  %138 = phi double [ %38, %28 ], [ %136, %92 ]
  %139 = phi double [ %25, %28 ], [ %89, %92 ]
  %140 = phi <3 x double> [ %16, %28 ], [ %44, %92 ]
  %141 = phi <3 x double> [ %30, %28 ], [ %41, %92 ]
  %142 = getelementptr inbounds %"struct.pov::Object_Struct.99", %"struct.pov::Object_Struct.99"* %0, i64 1, i32 3
  %143 = bitcast %"struct.pov::Texture_Struct"** %142 to double*
  %144 = load double, double* %143, align 8
  %145 = fadd fast double %144, %138
  %146 = fneg fast double %145
  %147 = fdiv fast double %146, %139
  %148 = fcmp fast ult double %147, 0x3EB0C6F7A0B5ED8D
  %149 = fcmp fast ugt double %147, 1.000000e+07
  %150 = or i1 %148, %149
  br i1 %150, label %209, label %151

151:                                              ; preds = %137
  %152 = load i64, i64* getelementptr inbounds ([123 x i64], [123 x i64]* @_ZN3pov5statsE, i64 0, i64 55), align 8
  %153 = add nsw i64 %152, 1
  store i64 %153, i64* getelementptr inbounds ([123 x i64], [123 x i64]* @_ZN3pov5statsE, i64 0, i64 55), align 8
  %154 = insertelement <3 x double> undef, double %147, i32 0
  %155 = shufflevector <3 x double> %154, <3 x double> undef, <3 x i32> zeroinitializer
  %156 = fmul fast <3 x double> %140, %155
  %157 = fadd fast <3 x double> %156, %141
  %158 = bitcast [3 x double]* %5 to <3 x double>*
  store <3 x double> %157, <3 x double>* %158, align 16
  %159 = getelementptr inbounds %"struct.pov::Object_Struct.99", %"struct.pov::Object_Struct.99"* %0, i64 0, i32 7
  %160 = bitcast %"struct.pov::Object_Struct.99"** %159 to %"struct.pov::Object_Struct"**
  %161 = load %"struct.pov::Object_Struct"*, %"struct.pov::Object_Struct"** %160, align 8
  %162 = icmp eq %"struct.pov::Object_Struct"* %161, null
  br i1 %162, label %168, label %163

163:                                              ; preds = %151
  %164 = bitcast [3 x double]* %5 to double*
  %165 = bitcast i1* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 -1, i8* nonnull %165)
  %166 = call fastcc i1 @_ZN3pov13Point_In_ClipEPdPNS_13Object_StructE.2744.extracted(%"struct.pov::Object_Struct"* nonnull %161, double* nonnull %164, i1* nonnull %4)
  %167 = load i1, i1* %4, align 1
  call void @llvm.lifetime.end.p0i8(i64 -1, i8* nonnull %165)
  br i1 %167, label %168, label %209

168:                                              ; preds = %163, %151
  %169 = getelementptr inbounds %"__DTRT_struct.pov::istack_struct.101", %"__DTRT_struct.pov::istack_struct.101"* %2, i64 0, i32 1
  %170 = load %"struct.pov::istk_entry.72"*, %"struct.pov::istk_entry.72"** %169, align 8
  %171 = getelementptr inbounds %"__DTRT_struct.pov::istack_struct.101", %"__DTRT_struct.pov::istack_struct.101"* %2, i64 0, i32 3
  %172 = load i32, i32* %171, align 4
  %173 = zext i32 %172 to i64
  %174 = getelementptr inbounds %"struct.pov::istk_entry.72", %"struct.pov::istk_entry.72"* %170, i64 %173, i32 0
  store double %147, double* %174, align 8
  %175 = getelementptr inbounds %"struct.pov::istk_entry.72", %"struct.pov::istk_entry.72"* %170, i64 %173, i32 5
  store %"struct.pov::Object_Struct.99"* %0, %"struct.pov::Object_Struct.99"** %175, align 8
  %176 = getelementptr inbounds %"struct.pov::istk_entry.72", %"struct.pov::istk_entry.72"* %170, i64 %173, i32 1
  %177 = bitcast [3 x double]* %5 to i64*
  %178 = load i64, i64* %177, align 16
  %179 = bitcast [3 x double]* %176 to i64*
  store i64 %178, i64* %179, align 8
  %180 = bitcast [3 x double]* %5 to i8*
  %181 = getelementptr inbounds i8, i8* %180, i64 8
  %182 = bitcast i8* %181 to i64*
  %183 = load i64, i64* %182, align 8
  %184 = getelementptr inbounds %"struct.pov::istk_entry.72", %"struct.pov::istk_entry.72"* %170, i64 %173, i32 1, i64 1
  %185 = bitcast double* %184 to i64*
  store i64 %183, i64* %185, align 8
  %186 = bitcast [3 x double]* %5 to i8*
  %187 = getelementptr inbounds i8, i8* %186, i64 16
  %188 = bitcast i8* %187 to i64*
  %189 = load i64, i64* %188, align 16
  %190 = getelementptr inbounds %"struct.pov::istk_entry.72", %"struct.pov::istk_entry.72"* %170, i64 %173, i32 1, i64 2
  %191 = bitcast double* %190 to i64*
  store i64 %189, i64* %191, align 8
  %192 = getelementptr inbounds %"struct.pov::istk_entry.72", %"struct.pov::istk_entry.72"* %170, i64 %173, i32 4
  %193 = load i64, i64* %177, align 16
  %194 = bitcast [2 x double]* %192 to i64*
  store i64 %193, i64* %194, align 8
  %195 = load i64, i64* %182, align 8
  %196 = getelementptr inbounds %"struct.pov::istk_entry.72", %"struct.pov::istk_entry.72"* %170, i64 %173, i32 4, i64 1
  %197 = bitcast double* %196 to i64*
  store i64 %195, i64* %197, align 8
  %198 = getelementptr inbounds %"struct.pov::istk_entry.72", %"struct.pov::istk_entry.72"* %170, i64 %173, i32 18
  store i8* null, i8** %198, align 8
  %199 = add i32 %172, 1
  store i32 %199, i32* %171, align 4
  %200 = getelementptr inbounds %"__DTRT_struct.pov::istack_struct.101", %"__DTRT_struct.pov::istack_struct.101"* %2, i64 0, i32 2
  %201 = load i32, i32* %200, align 8
  %202 = icmp ult i32 %199, %201
  br i1 %202, label %209, label %203

203:                                              ; preds = %168
  %204 = bitcast %"__DTRT_struct.pov::istack_struct.101"* %2 to i8*
  %205 = getelementptr inbounds i8, i8* %204, i64 20
  %206 = bitcast i8* %205 to i32*
  store i32 %172, i32* %206, align 4
  %207 = load i64, i64* getelementptr inbounds ([123 x i64], [123 x i64]* @_ZN3pov5statsE, i64 0, i64 7), align 8
  %208 = add nsw i64 %207, 1
  store i64 %208, i64* getelementptr inbounds ([123 x i64], [123 x i64]* @_ZN3pov5statsE, i64 0, i64 7), align 8
  br label %209

209:                                              ; preds = %203, %168, %163, %137, %39, %12
  %210 = phi i32 [ 0, %163 ], [ 1, %168 ], [ 1, %203 ], [ 0, %137 ], [ 0, %39 ], [ 0, %12 ]
  %211 = bitcast [3 x double]* %5 to i8*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %211)
  ret i32 %210
}

; Function Attrs: uwtable
declare hidden fastcc i1 @_ZN3pov13Point_In_ClipEPdPNS_13Object_StructE.2744.extracted(%"struct.pov::Object_Struct"*, double*, i1* noalias nocapture) unnamed_addr

