; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx512vl | FileCheck %s --check-prefixes=AVX512VL
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx | FileCheck %s --check-prefixes=AVX

declare float @llvm.sqrt.f32(float)
declare <2 x float> @llvm.sqrt.v2f32(<2 x float>)
declare <4 x float> @llvm.sqrt.v4f32(<4 x float>)
declare <8 x float> @llvm.sqrt.v8f32(<8 x float>)
declare <16 x float> @llvm.sqrt.v16f32(<16 x float>)

define float @test_native_rsqrt14_ss(float %data) #0 {
; AVX512VL-LABEL: test_native_rsqrt14_ss:
; AVX512VL:       # %bb.0:
; AVX512VL-NEXT:    vrsqrt14ss %xmm0, %xmm0, %xmm0
; AVX512VL-NEXT:    retq
;
; AVX-LABEL: test_native_rsqrt14_ss:
; AVX:       # %bb.0:
; AVX-NEXT:    vrsqrtss %xmm0, %xmm0, %xmm0
; AVX-NEXT:    retq
      %sqrt = tail call float @llvm.sqrt.f32(float %data)
      %div = fdiv fast float 1.0, %sqrt
      ret float %div
  }

define <2 x float> @test_native_rsqrt14_ps_128(<2 x float> %data) #0 {
; AVX512VL-LABEL: test_native_rsqrt14_ps_128:
; AVX512VL:       # %bb.0:
; AVX512VL-NEXT:    vrsqrt14ps %xmm0, %xmm0
; AVX512VL-NEXT:    retq
;
; AVX-LABEL: test_native_rsqrt14_ps_128:
; AVX:       # %bb.0:
; AVX-NEXT:    vrsqrtps %xmm0, %xmm0
; AVX-NEXT:    retq
    %sqrt = tail call <2 x float> @llvm.sqrt.v2f32(<2 x float> %data)
    %div = fdiv fast <2 x float> <float 1.0, float 1.0>, %sqrt
    ret <2 x float> %div
}

define <4 x float> @test_native_rsqrt14_ps_256(<4 x float> %data) #0 {
; AVX512VL-LABEL: test_native_rsqrt14_ps_256:
; AVX512VL:       # %bb.0:
; AVX512VL-NEXT:    vrsqrt14ps %xmm0, %xmm0
; AVX512VL-NEXT:    retq
;
; AVX-LABEL: test_native_rsqrt14_ps_256:
; AVX:       # %bb.0:
; AVX-NEXT:    vrsqrtps %xmm0, %xmm0
; AVX-NEXT:    retq
    %sqrt = tail call <4 x float> @llvm.sqrt.v4f32(<4 x float> %data)
    %div = fdiv fast <4 x float> <float 1.0, float 1.0, float 1.0, float 1.0>, %sqrt
    ret <4 x float> %div
}

define <8 x float> @test_native_rsqrt14_ps_512(<8 x float> %data) #0 {
; AVX512VL-LABEL: test_native_rsqrt14_ps_512:
; AVX512VL:       # %bb.0:
; AVX512VL-NEXT:    vrsqrt14ps %ymm0, %ymm0
; AVX512VL-NEXT:    retq
;
; AVX-LABEL: test_native_rsqrt14_ps_512:
; AVX:       # %bb.0:
; AVX-NEXT:    vrsqrtps %ymm0, %ymm0
; AVX-NEXT:    retq
    %sqrt = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %data)
    %div = fdiv fast <8 x float> <float 1.0, float 1.0, float 1.0, float 1.0, float 1.0, float 1.0, float 1.0, float 1.0>, %sqrt
    ret <8 x float> %div
}

define float @test_native_rsqrt14_ss_acc_bit14(float %data) #1 {
; AVX512VL-LABEL: test_native_rsqrt14_ss_acc_bit14:
; AVX512VL:       # %bb.0:
; AVX512VL-NEXT:    vrsqrt14ss %xmm0, %xmm0, %xmm0
; AVX512VL-NEXT:    retq
;
; AVX-LABEL: test_native_rsqrt14_ss_acc_bit14:
; AVX:       # %bb.0:
; AVX-NEXT:    vrsqrtss %xmm0, %xmm0, %xmm0
; AVX-NEXT:    retq
      %sqrt = tail call float @llvm.sqrt.f32(float %data)
      %div = fdiv fast float 1.0, %sqrt
      ret float %div
  }

define <2 x float> @test_native_rsqrt14_ps_128_acc_bit14(<2 x float> %data) #1 {
; AVX512VL-LABEL: test_native_rsqrt14_ps_128_acc_bit14:
; AVX512VL:       # %bb.0:
; AVX512VL-NEXT:    vrsqrt14ps %xmm0, %xmm0
; AVX512VL-NEXT:    retq
;
; AVX-LABEL: test_native_rsqrt14_ps_128_acc_bit14:
; AVX:       # %bb.0:
; AVX-NEXT:    vrsqrtps %xmm0, %xmm0
; AVX-NEXT:    retq
    %sqrt = tail call <2 x float> @llvm.sqrt.v2f32(<2 x float> %data)
    %div = fdiv fast <2 x float> <float 1.0, float 1.0>, %sqrt
    ret <2 x float> %div
}

define <4 x float> @test_native_rsqrt14_ps_256_acc_bit14(<4 x float> %data) #1 {
; AVX512VL-LABEL: test_native_rsqrt14_ps_256_acc_bit14:
; AVX512VL:       # %bb.0:
; AVX512VL-NEXT:    vrsqrt14ps %xmm0, %xmm0
; AVX512VL-NEXT:    retq
;
; AVX-LABEL: test_native_rsqrt14_ps_256_acc_bit14:
; AVX:       # %bb.0:
; AVX-NEXT:    vrsqrtps %xmm0, %xmm0
; AVX-NEXT:    retq
    %sqrt = tail call <4 x float> @llvm.sqrt.v4f32(<4 x float> %data)
    %div = fdiv fast <4 x float> <float 1.0, float 1.0, float 1.0, float 1.0>, %sqrt
    ret <4 x float> %div
}

define <8 x float> @test_native_rsqrt14_ps_512_acc_bit14(<8 x float> %data) #1 {
; AVX512VL-LABEL: test_native_rsqrt14_ps_512_acc_bit14:
; AVX512VL:       # %bb.0:
; AVX512VL-NEXT:    vrsqrt14ps %ymm0, %ymm0
; AVX512VL-NEXT:    retq
;
; AVX-LABEL: test_native_rsqrt14_ps_512_acc_bit14:
; AVX:       # %bb.0:
; AVX-NEXT:    vrsqrtps %ymm0, %ymm0
; AVX-NEXT:    retq
    %sqrt = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %data)
    %div = fdiv fast <8 x float> <float 1.0, float 1.0, float 1.0, float 1.0, float 1.0, float 1.0, float 1.0, float 1.0>, %sqrt
    ret <8 x float> %div
}



attributes #0 = { "reciprocal-estimates"="sqrtf:0,vec-sqrtf:0" }
attributes #1 = { "imf-accuracy-bits-sqrt"="11" }
