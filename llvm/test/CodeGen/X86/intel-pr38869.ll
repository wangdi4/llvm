; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
; RUN: llc -mtriple=x86_64-unknown-unknown -stop-after=finalize-isel -mattr=+avx2,+avx512vl,+avx512dq,+avx512bw -enable-intel-advanced-opts < %s -o - | FileCheck %s --check-prefixes=X64

; check-NOT:  VPUNPCKHBWZ128rr
; check-NOT:  VPSLLDZri
; check:  VPSUBDZ256rr
; check-NOT:  VPADDDZrr
define hidden <16 x i32> @fun16x16_sub_512(<16 x i8> %input0, <16 x i8> %input1, <16 x i8> %input2, <16 x i8> %input3) "prefer-vector-width"="512" {
  ; X64-LABEL: name: fun16x16_sub_512
  ; X64: bb.0.entry:
  ; X64-NEXT:   liveins: $xmm0, $xmm1, $xmm2, $xmm3
  ; X64-NEXT: {{  $}}
  ; X64-NEXT:   [[COPY:%[0-9]+]]:vr128x = COPY $xmm3
  ; X64-NEXT:   [[COPY1:%[0-9]+]]:vr128x = COPY $xmm2
  ; X64-NEXT:   [[COPY2:%[0-9]+]]:vr128x = COPY $xmm1
  ; X64-NEXT:   [[COPY3:%[0-9]+]]:vr128x = COPY $xmm0
  ; X64-NEXT:   [[VMOVDQA64Z128rm:%[0-9]+]]:vr128x = VMOVDQA64Z128rm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  ; X64-NEXT:   [[VPSHUFBZ128rr:%[0-9]+]]:vr128x = VPSHUFBZ128rr [[COPY1]], [[VMOVDQA64Z128rm]]
  ; X64-NEXT:   [[VPMOVZXBWZ256rr:%[0-9]+]]:vr256x = VPMOVZXBWZ256rr killed [[VPSHUFBZ128rr]]
  ; X64-NEXT:   [[DEF:%[0-9]+]]:vr512 = IMPLICIT_DEF
  ; X64-NEXT:   [[INSERT_SUBREG:%[0-9]+]]:vr512 = INSERT_SUBREG [[DEF]], killed [[VPMOVZXBWZ256rr]], %subreg.sub_ymm
  ; X64-NEXT:   [[VPSHUFBZ128rr1:%[0-9]+]]:vr128x = VPSHUFBZ128rr [[COPY]], [[VMOVDQA64Z128rm]]
  ; X64-NEXT:   [[VPMOVZXBWZ256rr1:%[0-9]+]]:vr256x = VPMOVZXBWZ256rr killed [[VPSHUFBZ128rr1]]
  ; X64-NEXT:   [[VINSERTI64x4Zrr:%[0-9]+]]:vr512 = VINSERTI64x4Zrr killed [[INSERT_SUBREG]], killed [[VPMOVZXBWZ256rr1]], 1
  ; X64-NEXT:   [[VPSHUFBZ128rr2:%[0-9]+]]:vr128x = VPSHUFBZ128rr [[COPY3]], [[VMOVDQA64Z128rm]]
  ; X64-NEXT:   [[VPMOVZXBWZ256rr2:%[0-9]+]]:vr256x = VPMOVZXBWZ256rr killed [[VPSHUFBZ128rr2]]
  ; X64-NEXT:   [[DEF1:%[0-9]+]]:vr512 = IMPLICIT_DEF
  ; X64-NEXT:   [[INSERT_SUBREG1:%[0-9]+]]:vr512 = INSERT_SUBREG [[DEF1]], killed [[VPMOVZXBWZ256rr2]], %subreg.sub_ymm
  ; X64-NEXT:   [[VPSHUFBZ128rr3:%[0-9]+]]:vr128x = VPSHUFBZ128rr [[COPY2]], [[VMOVDQA64Z128rm]]
  ; X64-NEXT:   [[VPMOVZXBWZ256rr3:%[0-9]+]]:vr256x = VPMOVZXBWZ256rr killed [[VPSHUFBZ128rr3]]
  ; X64-NEXT:   [[VINSERTI64x4Zrr1:%[0-9]+]]:vr512 = VINSERTI64x4Zrr killed [[INSERT_SUBREG1]], killed [[VPMOVZXBWZ256rr3]], 1
  ; X64-NEXT:   [[VPSUBDZrr:%[0-9]+]]:vr512 = VPSUBDZrr killed [[VINSERTI64x4Zrr1]], killed [[VINSERTI64x4Zrr]]
  ; X64-NEXT:   $zmm0 = COPY [[VPSUBDZrr]]
  ; X64-NEXT:   RET 0, $zmm0
entry:
  %shf11 = shufflevector <16 x i8> %input0, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %shf12 = shufflevector <16 x i8> %input0, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %shf23 = shufflevector <16 x i8> %input0, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %shf24 = shufflevector <16 x i8> %input0, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %shf17 = shufflevector <16 x i8> %input1, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %shf18 = shufflevector <16 x i8> %input1, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %shf21 = shufflevector <16 x i8> %input1, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %shf22 = shufflevector <16 x i8> %input1, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %shf37 = shufflevector <16 x i8> %input2, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %shf38 = shufflevector <16 x i8> %input2, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %shf19 = shufflevector <16 x i8> %input2, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %shf20 = shufflevector <16 x i8> %input2, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %shf29 = shufflevector <16 x i8> %input3, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %shf30 = shufflevector <16 x i8> %input3, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %shf31 = shufflevector <16 x i8> %input3, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %shf32 = shufflevector <16 x i8> %input3, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>

  %shf25 = shufflevector <4 x i8> %shf18, <4 x i8> %shf17, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %shf26 = shufflevector <4 x i8> %shf12, <4 x i8> %shf11, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %shf33 = shufflevector <4 x i8> %shf29, <4 x i8> %shf31, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %shf34 = shufflevector <4 x i8> %shf20, <4 x i8> %shf19, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %shf35 = shufflevector <4 x i8> %shf22, <4 x i8> %shf21, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %shf36 = shufflevector <4 x i8> %shf24, <4 x i8> %shf23, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %shf42 = shufflevector <4 x i8> %shf37, <4 x i8> %shf38, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %shf43 = shufflevector <4 x i8> %shf30, <4 x i8> %shf32, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>

  %shf39 = shufflevector <8 x i8> %shf26, <8 x i8> %shf25, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %shf40 = shufflevector <8 x i8> %shf34, <8 x i8> %shf33, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %shf41 = shufflevector <8 x i8> %shf36, <8 x i8> %shf35, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %shf44 = shufflevector <8 x i8> %shf42, <8 x i8> %shf43, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>

  %zxt6 = zext <16 x i8> %shf39 to <16 x i32>
  %zxt7 = zext <16 x i8> %shf41 to <16 x i32>
  %zxt8 = zext <16 x i8> %shf44 to <16 x i32>
  %zxt9 = zext <16 x i8> %shf40 to <16 x i32>
  %shl10 = shl nuw nsw <16 x i32> %zxt8, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %shl11 = shl nuw nsw <16 x i32> %zxt7, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %or12 = or <16 x i32> %shl10, %zxt9
  %sub13 = sub nsw <16 x i32> %shl11, %or12
  %add14 = add nsw <16 x i32> %sub13, %zxt6
  ret <16 x i32> %add14
}

; check-NOT:  VPUNPCKHBWZ128rr
; check-NOT:  VPSLLDZri
; check-NOT:  VPADDDZrr
; check:      VPADDDZ256rr
; check-NOT:  VPSUBDZrr
; check:      VPSUBDZ256rr
define hidden <8 x i1> @fun16x16_512(<16 x i8> %input0, <16 x i8> %input1, <16 x i8> %input2, <16 x i8> %input3) "prefer-vector-width"="512" {
  ; X64-LABEL: name: fun16x16_512
  ; X64: bb.0.entry:
  ; X64-NEXT:   liveins: $xmm0, $xmm1, $xmm2, $xmm3
  ; X64-NEXT: {{  $}}
  ; X64-NEXT:   [[COPY:%[0-9]+]]:vr128x = COPY $xmm3
  ; X64-NEXT:   [[COPY1:%[0-9]+]]:vr128x = COPY $xmm2
  ; X64-NEXT:   [[COPY2:%[0-9]+]]:vr128x = COPY $xmm1
  ; X64-NEXT:   [[COPY3:%[0-9]+]]:vr128x = COPY $xmm0
  ; X64-NEXT:   [[VMOVDQA64Z128rm:%[0-9]+]]:vr128x = VMOVDQA64Z128rm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  ; X64-NEXT:   [[VPSHUFBZ128rr:%[0-9]+]]:vr128x = VPSHUFBZ128rr [[COPY1]], [[VMOVDQA64Z128rm]]
  ; X64-NEXT:   [[VPMOVZXBWZ256rr:%[0-9]+]]:vr256x = VPMOVZXBWZ256rr killed [[VPSHUFBZ128rr]]
  ; X64-NEXT:   [[VPSHUFBZ128rr1:%[0-9]+]]:vr128x = VPSHUFBZ128rr [[COPY3]], [[VMOVDQA64Z128rm]]
  ; X64-NEXT:   [[VPMOVZXBWZ256rr1:%[0-9]+]]:vr256x = VPMOVZXBWZ256rr killed [[VPSHUFBZ128rr1]]
  ; X64-NEXT:   [[VPSUBDZ256rr:%[0-9]+]]:vr256x = VPSUBDZ256rr killed [[VPMOVZXBWZ256rr1]], killed [[VPMOVZXBWZ256rr]]
  ; X64-NEXT:   [[VPSHUFBZ128rr2:%[0-9]+]]:vr128x = VPSHUFBZ128rr [[COPY]], [[VMOVDQA64Z128rm]]
  ; X64-NEXT:   [[VPMOVZXBWZ256rr2:%[0-9]+]]:vr256x = VPMOVZXBWZ256rr killed [[VPSHUFBZ128rr2]]
  ; X64-NEXT:   [[VPSHUFBZ128rr3:%[0-9]+]]:vr128x = VPSHUFBZ128rr [[COPY2]], [[VMOVDQA64Z128rm]]
  ; X64-NEXT:   [[VPMOVZXBWZ256rr3:%[0-9]+]]:vr256x = VPMOVZXBWZ256rr killed [[VPSHUFBZ128rr3]]
  ; X64-NEXT:   [[VPSUBDZ256rr1:%[0-9]+]]:vr256x = VPSUBDZ256rr killed [[VPMOVZXBWZ256rr3]], killed [[VPMOVZXBWZ256rr2]]
  ; X64-NEXT:   [[VMOVDQA64Z256rm:%[0-9]+]]:vr256x = VMOVDQA64Z256rm $rip, 1, $noreg, %const.1, $noreg :: (load (s256) from constant-pool)
  ; X64-NEXT:   [[VPERMDZ256rr:%[0-9]+]]:vr256x = VPERMDZ256rr [[VMOVDQA64Z256rm]], [[VPSUBDZ256rr1]]
  ; X64-NEXT:   [[VPADDDZ256rr:%[0-9]+]]:vr256 = VPADDDZ256rr [[VPSUBDZ256rr1]], [[VPERMDZ256rr]]
  ; X64-NEXT:   [[VPERMDZ256rr1:%[0-9]+]]:vr256x = VPERMDZ256rr [[VMOVDQA64Z256rm]], [[VPSUBDZ256rr]]
  ; X64-NEXT:   [[VPADDDZ256rr1:%[0-9]+]]:vr256 = VPADDDZ256rr [[VPSUBDZ256rr]], [[VPERMDZ256rr1]]
  ; X64-NEXT:   [[VPSUBDZ256rr2:%[0-9]+]]:vr256 = VPSUBDZ256rr [[VPSUBDZ256rr1]], [[VPERMDZ256rr]]
  ; X64-NEXT:   [[VPSUBDZ256rr3:%[0-9]+]]:vr256 = VPSUBDZ256rr [[VPSUBDZ256rr]], [[VPERMDZ256rr1]]
  ; X64-NEXT:   [[VPBLENDDYrri:%[0-9]+]]:vr256 = VPBLENDDYrri killed [[VPSUBDZ256rr3]], killed [[VPADDDZ256rr1]], 25
  ; X64-NEXT:   [[VPBLENDDYrri1:%[0-9]+]]:vr256 = VPBLENDDYrri killed [[VPSUBDZ256rr2]], killed [[VPADDDZ256rr]], 25
  ; X64-NEXT:   [[VMOVDQA64Z256rm1:%[0-9]+]]:vr256x = VMOVDQA64Z256rm $rip, 1, $noreg, %const.2, $noreg :: (load (s256) from constant-pool)
  ; X64-NEXT:   [[VPERMDZ256rr2:%[0-9]+]]:vr256x = VPERMDZ256rr [[VMOVDQA64Z256rm1]], [[VPSUBDZ256rr1]]
  ; X64-NEXT:   [[VPADDDZ256rr2:%[0-9]+]]:vr256 = VPADDDZ256rr [[VPBLENDDYrri1]], [[VPERMDZ256rr2]]
  ; X64-NEXT:   [[VPERMDZ256rr3:%[0-9]+]]:vr256x = VPERMDZ256rr [[VMOVDQA64Z256rm1]], [[VPSUBDZ256rr]]
  ; X64-NEXT:   [[VPADDDZ256rr3:%[0-9]+]]:vr256 = VPADDDZ256rr [[VPBLENDDYrri]], [[VPERMDZ256rr3]]
  ; X64-NEXT:   [[VPSUBDZ256rr4:%[0-9]+]]:vr256 = VPSUBDZ256rr [[VPBLENDDYrri1]], [[VPERMDZ256rr2]]
  ; X64-NEXT:   [[VPSUBDZ256rr5:%[0-9]+]]:vr256 = VPSUBDZ256rr [[VPBLENDDYrri]], [[VPERMDZ256rr3]]
  ; X64-NEXT:   [[VPBLENDDYrri2:%[0-9]+]]:vr256 = VPBLENDDYrri killed [[VPADDDZ256rr3]], killed [[VPSUBDZ256rr5]], 76
  ; X64-NEXT:   [[VPBLENDDYrri3:%[0-9]+]]:vr256 = VPBLENDDYrri killed [[VPADDDZ256rr2]], killed [[VPSUBDZ256rr4]], 76
  ; X64-NEXT:   [[VMOVDQA64Z256rm2:%[0-9]+]]:vr256x = VMOVDQA64Z256rm $rip, 1, $noreg, %const.3, $noreg :: (load (s256) from constant-pool)
  ; X64-NEXT:   [[VPERMDZ256rr4:%[0-9]+]]:vr256x = VPERMDZ256rr [[VMOVDQA64Z256rm2]], [[VPSUBDZ256rr]]
  ; X64-NEXT:   [[VPERMDZ256rr5:%[0-9]+]]:vr256x = VPERMDZ256rr [[VMOVDQA64Z256rm2]], [[VPSUBDZ256rr1]]
  ; X64-NEXT:   [[VPADDDZ256rr4:%[0-9]+]]:vr256 = VPADDDZ256rr [[VPBLENDDYrri3]], [[VPERMDZ256rr5]]
  ; X64-NEXT:   [[VPADDDZ256rr5:%[0-9]+]]:vr256 = VPADDDZ256rr [[VPBLENDDYrri2]], [[VPERMDZ256rr4]]
  ; X64-NEXT:   [[VPSUBDZ256rr6:%[0-9]+]]:vr256 = VPSUBDZ256rr [[VPBLENDDYrri3]], [[VPERMDZ256rr5]]
  ; X64-NEXT:   [[VPSUBDZ256rr7:%[0-9]+]]:vr256 = VPSUBDZ256rr [[VPBLENDDYrri2]], [[VPERMDZ256rr4]]
  ; X64-NEXT:   [[VPBLENDDYrri4:%[0-9]+]]:vr256 = VPBLENDDYrri killed [[VPADDDZ256rr5]], killed [[VPSUBDZ256rr7]], -86
  ; X64-NEXT:   [[VPBLENDDYrri5:%[0-9]+]]:vr256 = VPBLENDDYrri killed [[VPADDDZ256rr4]], killed [[VPSUBDZ256rr6]], -86
  ; X64-NEXT:   [[VPCMPDZ256rri:%[0-9]+]]:vk8 = VPCMPDZ256rri killed [[VPBLENDDYrri4]], killed [[VPBLENDDYrri5]], 0
  ; X64-NEXT:   [[VPMOVM2WZ128rr:%[0-9]+]]:vr128x = VPMOVM2WZ128rr killed [[VPCMPDZ256rri]]
  ; X64-NEXT:   $xmm0 = COPY [[VPMOVM2WZ128rr]]
  ; X64-NEXT:   RET 0, $xmm0
entry:
  %shf11 = shufflevector <16 x i8> %input0, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %shf12 = shufflevector <16 x i8> %input0, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %shf23 = shufflevector <16 x i8> %input0, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %shf24 = shufflevector <16 x i8> %input0, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %shf17 = shufflevector <16 x i8> %input1, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %shf18 = shufflevector <16 x i8> %input1, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %shf21 = shufflevector <16 x i8> %input1, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %shf22 = shufflevector <16 x i8> %input1, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %shf37 = shufflevector <16 x i8> %input2, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %shf38 = shufflevector <16 x i8> %input2, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %shf19 = shufflevector <16 x i8> %input2, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %shf20 = shufflevector <16 x i8> %input2, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %shf29 = shufflevector <16 x i8> %input3, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %shf30 = shufflevector <16 x i8> %input3, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %shf31 = shufflevector <16 x i8> %input3, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %shf32 = shufflevector <16 x i8> %input3, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>

  %shf25 = shufflevector <4 x i8> %shf18, <4 x i8> %shf17, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %shf26 = shufflevector <4 x i8> %shf12, <4 x i8> %shf11, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %shf33 = shufflevector <4 x i8> %shf29, <4 x i8> %shf31, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %shf34 = shufflevector <4 x i8> %shf20, <4 x i8> %shf19, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %shf35 = shufflevector <4 x i8> %shf22, <4 x i8> %shf21, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %shf36 = shufflevector <4 x i8> %shf24, <4 x i8> %shf23, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %shf42 = shufflevector <4 x i8> %shf37, <4 x i8> %shf38, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>
  %shf43 = shufflevector <4 x i8> %shf30, <4 x i8> %shf32, <8 x i32> <i32 0, i32 2, i32 1, i32 3, i32 4, i32 6, i32 5, i32 7>

  %shf39 = shufflevector <8 x i8> %shf26, <8 x i8> %shf25, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %shf40 = shufflevector <8 x i8> %shf34, <8 x i8> %shf33, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %shf41 = shufflevector <8 x i8> %shf36, <8 x i8> %shf35, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %shf44 = shufflevector <8 x i8> %shf42, <8 x i8> %shf43, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>

  %zxt6 = zext <16 x i8> %shf39 to <16 x i32>
  %zxt7 = zext <16 x i8> %shf41 to <16 x i32>
  %zxt8 = zext <16 x i8> %shf44 to <16 x i32>
  %zxt9 = zext <16 x i8> %shf40 to <16 x i32>
  %shl10 = shl nuw nsw <16 x i32> %zxt8, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %shl11 = shl nuw nsw <16 x i32> %zxt7, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %or12 = or <16 x i32> %shl10, %zxt9
  %sub13 = sub nsw <16 x i32> %shl11, %or12
  %add14 = add nsw <16 x i32> %sub13, %zxt6
  %shf62 = shufflevector <16 x i32> %add14, <16 x i32> poison, <16 x i32> <i32 3, i32 2, i32 1, i32 0, i32 5, i32 6, i32 11, i32 10, i32 9, i32 8, i32 13, i32 14, i32 undef, i32 undef, i32 undef, i32 undef>
  %shuffle = shufflevector <16 x i32> %shf62, <16 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11>
  %add63 = add <16 x i32> %add14, %shuffle
  %sub64 = sub <16 x i32> %add14, %shuffle
  %shf65 = shufflevector <16 x i32> %add63, <16 x i32> %sub64, <16 x i32> <i32 0, i32 17, i32 18, i32 3, i32 4, i32 21, i32 22, i32 23, i32 8, i32 25, i32 26, i32 11, i32 12, i32 29, i32 30, i32 31>
  %shf66 = shufflevector <16 x i32> %add14, <16 x i32> poison, <16 x i32> <i32 2, i32 3, i32 0, i32 1, i32 7, i32 4, i32 10, i32 11, i32 8, i32 9, i32 15, i32 12, i32 undef, i32 undef, i32 undef, i32 undef>
  %shuffle7630 = shufflevector <16 x i32> %shf66, <16 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11>
  %add67 = add <16 x i32> %shf65, %shuffle7630
  %sub68 = sub <16 x i32> %shf65, %shuffle7630
  %shf69 = shufflevector <16 x i32> %add67, <16 x i32> %sub68, <16 x i32> <i32 0, i32 1, i32 18, i32 19, i32 4, i32 5, i32 22, i32 7, i32 8, i32 9, i32 26, i32 27, i32 12, i32 13, i32 30, i32 15>
  %shf70 = shufflevector <16 x i32> %add14, <16 x i32> poison, <16 x i32> <i32 1, i32 0, i32 3, i32 2, i32 6, i32 7, i32 4, i32 5, i32 9, i32 8, i32 11, i32 10, i32 14, i32 15, i32 12, i32 13>
  %add71 = add <16 x i32> %shf69, %shf70
  %sub72 = sub <16 x i32> %shf69, %shf70
  %shf73 = shufflevector <16 x i32> %add71, <16 x i32> %sub72, <16 x i32> <i32 0, i32 17, i32 2, i32 19, i32 4, i32 21, i32 6, i32 23, i32 8, i32 25, i32 10, i32 27, i32 12, i32 29, i32 14, i32 31>
  %shf_80 = shufflevector <16 x i32> %shf73, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %shf_81 = shufflevector <16 x i32> %shf73, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %cmp = icmp eq <8 x i32> %shf_80, %shf_81
  ret <8 x i1> %cmp
}

; check-NOT:  PSLLDri
; check-NOT:  PADDDrr
; check:  VPSUBDZ256rr
define hidden <16 x i32> @fun8x4_sub(<8 x i8> %input0, <8 x i8> %input1, <8 x i8> %input2, <8 x i8> %input3, <8 x i8> %input4, <8 x i8> %input5, <8 x i8> %input6, <8 x i8> %input7) "prefer-vector-width"="512" {
  ; X64-LABEL: name: fun8x4_sub
  ; X64: bb.0.entry:
  ; X64-NEXT:   liveins: $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $xmm5, $xmm6, $xmm7
  ; X64-NEXT: {{  $}}
  ; X64-NEXT:   [[COPY:%[0-9]+]]:vr128x = COPY $xmm7
  ; X64-NEXT:   [[COPY1:%[0-9]+]]:vr128x = COPY $xmm6
  ; X64-NEXT:   [[COPY2:%[0-9]+]]:vr128x = COPY $xmm5
  ; X64-NEXT:   [[COPY3:%[0-9]+]]:vr128x = COPY $xmm4
  ; X64-NEXT:   [[COPY4:%[0-9]+]]:vr128x = COPY $xmm3
  ; X64-NEXT:   [[COPY5:%[0-9]+]]:vr128x = COPY $xmm2
  ; X64-NEXT:   [[COPY6:%[0-9]+]]:vr128x = COPY $xmm1
  ; X64-NEXT:   [[COPY7:%[0-9]+]]:vr128x = COPY $xmm0
  ; X64-NEXT:   [[VPUNPCKLBWZ128rr:%[0-9]+]]:vr128x = VPUNPCKLBWZ128rr [[COPY5]], [[COPY6]]
  ; X64-NEXT:   [[VMOVDQA64Z128rm:%[0-9]+]]:vr128x = VMOVDQA64Z128rm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  ; X64-NEXT:   [[VPSHUFBZ128rr:%[0-9]+]]:vr128x = VPSHUFBZ128rr killed [[VPUNPCKLBWZ128rr]], [[VMOVDQA64Z128rm]]
  ; X64-NEXT:   [[VPMOVZXBWZ256rr:%[0-9]+]]:vr256x = VPMOVZXBWZ256rr killed [[VPSHUFBZ128rr]]
  ; X64-NEXT:   [[DEF:%[0-9]+]]:vr512 = IMPLICIT_DEF
  ; X64-NEXT:   [[INSERT_SUBREG:%[0-9]+]]:vr512 = INSERT_SUBREG [[DEF]], killed [[VPMOVZXBWZ256rr]], %subreg.sub_ymm
  ; X64-NEXT:   [[VPUNPCKLBWZ128rr1:%[0-9]+]]:vr128x = VPUNPCKLBWZ128rr [[COPY7]], [[COPY]]
  ; X64-NEXT:   [[VPSHUFBZ128rr1:%[0-9]+]]:vr128x = VPSHUFBZ128rr killed [[VPUNPCKLBWZ128rr1]], [[VMOVDQA64Z128rm]]
  ; X64-NEXT:   [[VPMOVZXBWZ256rr1:%[0-9]+]]:vr256x = VPMOVZXBWZ256rr killed [[VPSHUFBZ128rr1]]
  ; X64-NEXT:   [[VINSERTI64x4Zrr:%[0-9]+]]:vr512 = VINSERTI64x4Zrr killed [[INSERT_SUBREG]], killed [[VPMOVZXBWZ256rr1]], 1
  ; X64-NEXT:   [[VPUNPCKLBWZ128rr2:%[0-9]+]]:vr128x = VPUNPCKLBWZ128rr [[COPY1]], [[COPY2]]
  ; X64-NEXT:   [[VPSHUFBZ128rr2:%[0-9]+]]:vr128x = VPSHUFBZ128rr killed [[VPUNPCKLBWZ128rr2]], [[VMOVDQA64Z128rm]]
  ; X64-NEXT:   [[VPMOVZXBWZ256rr2:%[0-9]+]]:vr256x = VPMOVZXBWZ256rr killed [[VPSHUFBZ128rr2]]
  ; X64-NEXT:   [[DEF1:%[0-9]+]]:vr512 = IMPLICIT_DEF
  ; X64-NEXT:   [[INSERT_SUBREG1:%[0-9]+]]:vr512 = INSERT_SUBREG [[DEF1]], killed [[VPMOVZXBWZ256rr2]], %subreg.sub_ymm
  ; X64-NEXT:   [[VPUNPCKLBWZ128rr3:%[0-9]+]]:vr128x = VPUNPCKLBWZ128rr [[COPY3]], [[COPY4]]
  ; X64-NEXT:   [[VPSHUFBZ128rr3:%[0-9]+]]:vr128x = VPSHUFBZ128rr killed [[VPUNPCKLBWZ128rr3]], [[VMOVDQA64Z128rm]]
  ; X64-NEXT:   [[VPMOVZXBWZ256rr3:%[0-9]+]]:vr256x = VPMOVZXBWZ256rr killed [[VPSHUFBZ128rr3]]
  ; X64-NEXT:   [[VINSERTI64x4Zrr1:%[0-9]+]]:vr512 = VINSERTI64x4Zrr killed [[INSERT_SUBREG1]], killed [[VPMOVZXBWZ256rr3]], 1
  ; X64-NEXT:   [[VPSUBDZrr:%[0-9]+]]:vr512 = VPSUBDZrr killed [[VINSERTI64x4Zrr1]], killed [[VINSERTI64x4Zrr]]
  ; X64-NEXT:   $zmm0 = COPY [[VPSUBDZrr]]
  ; X64-NEXT:   RET 0, $zmm0
entry:
  %shf_149 = shufflevector <8 x i8> %input0, <8 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %shf_146 = shufflevector <8 x i8> %input1, <8 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %shf_143 = shufflevector <8 x i8> %input2, <8 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %shf_140 = shufflevector <8 x i8> %input3, <8 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %shf_137 = shufflevector <8 x i8> %input4, <8 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %shf_134 = shufflevector <8 x i8> %input5, <8 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %shf_ = shufflevector <8 x i8> %input6, <8 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %shf_152 = shufflevector <8 x i8> %input7, <8 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %shf_150 = shufflevector <8 x i8> %input0, <8 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %shf_147 = shufflevector <8 x i8> %input1, <8 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %shf_144 = shufflevector <8 x i8> %input2, <8 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %shf_141 = shufflevector <8 x i8> %input3, <8 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %shf_138 = shufflevector <8 x i8> %input4, <8 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %shf_135 = shufflevector <8 x i8> %input5, <8 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %shf_132 = shufflevector <8 x i8> %input6, <8 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %shf_153 = shufflevector <8 x i8> %input7, <8 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %shf130 = shufflevector <4 x i8> %shf_149, <4 x i8> %shf_152, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %shf129 = shufflevector <4 x i8> %shf_143, <4 x i8> %shf_146, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %shf127 = shufflevector <4 x i8> %shf_137, <4 x i8> %shf_140, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %shf126 = shufflevector <4 x i8> %shf_, <4 x i8> %shf_134, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %shf121 = shufflevector <4 x i8> %shf_138, <4 x i8> %shf_141, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %shf = shufflevector <4 x i8> %shf_132, <4 x i8> %shf_135, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %shf131 = shufflevector <8 x i8> %shf129, <8 x i8> %shf130, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %shf128 = shufflevector <8 x i8> %shf126, <8 x i8> %shf127, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %shf122 = shufflevector <8 x i8> %shf, <8 x i8> %shf121, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %zxt8 = zext <16 x i8> %shf131 to <16 x i32>
  %zxt9 = zext <16 x i8> %shf128 to <16 x i32>
  %zxt11 = zext <16 x i8> %shf122 to <16 x i32>
  %sub10 = sub nsw <16 x i32> %zxt9, %zxt8
  %shf123 = shufflevector <4 x i8> %shf_144, <4 x i8> %shf_147, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %shf124 = shufflevector <4 x i8> %shf_150, <4 x i8> %shf_153, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %shf125 = shufflevector <8 x i8> %shf123, <8 x i8> %shf124, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %zxt12 = zext <16 x i8> %shf125 to <16 x i32>
  %sub13 = sub nsw <16 x i32> %zxt11, %zxt12
  %shl14 = shl nsw <16 x i32> %sub13, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %add15 = add nsw <16 x i32> %shl14, %sub10
  ret <16 x i32> %add15
}

; check-NOT:  PSLLDri
; check-NOT:  VPADDDZrr
; check:      VPADDDZ256rr
; check-NOT:  VPSUBDZrr
; check:      VPSUBDZ256rr
define hidden <4 x i1> @fun8x4(<8 x i8> %input0, <8 x i8> %input1, <8 x i8> %input2, <8 x i8> %input3, <8 x i8> %input4, <8 x i8> %input5, <8 x i8> %input6, <8 x i8> %input7) "prefer-vector-width"="512" {
  ; X64-LABEL: name: fun8x4
  ; X64: bb.0.entry:
  ; X64-NEXT:   liveins: $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $xmm5, $xmm6, $xmm7
  ; X64-NEXT: {{  $}}
  ; X64-NEXT:   [[COPY:%[0-9]+]]:vr128x = COPY $xmm7
  ; X64-NEXT:   [[COPY1:%[0-9]+]]:vr128x = COPY $xmm6
  ; X64-NEXT:   [[COPY2:%[0-9]+]]:vr128x = COPY $xmm5
  ; X64-NEXT:   [[COPY3:%[0-9]+]]:vr128x = COPY $xmm4
  ; X64-NEXT:   [[COPY4:%[0-9]+]]:vr128x = COPY $xmm3
  ; X64-NEXT:   [[COPY5:%[0-9]+]]:vr128x = COPY $xmm2
  ; X64-NEXT:   [[COPY6:%[0-9]+]]:vr128x = COPY $xmm1
  ; X64-NEXT:   [[COPY7:%[0-9]+]]:vr128x = COPY $xmm0
  ; X64-NEXT:   [[VPUNPCKLBWZ128rr:%[0-9]+]]:vr128x = VPUNPCKLBWZ128rr [[COPY7]], [[COPY]]
  ; X64-NEXT:   [[VMOVDQA64Z128rm:%[0-9]+]]:vr128x = VMOVDQA64Z128rm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  ; X64-NEXT:   [[VPSHUFBZ128rr:%[0-9]+]]:vr128x = VPSHUFBZ128rr killed [[VPUNPCKLBWZ128rr]], [[VMOVDQA64Z128rm]]
  ; X64-NEXT:   [[VPMOVZXBWZ256rr:%[0-9]+]]:vr256x = VPMOVZXBWZ256rr killed [[VPSHUFBZ128rr]]
  ; X64-NEXT:   [[VPUNPCKLBWZ128rr1:%[0-9]+]]:vr128x = VPUNPCKLBWZ128rr [[COPY3]], [[COPY4]]
  ; X64-NEXT:   [[VPSHUFBZ128rr1:%[0-9]+]]:vr128x = VPSHUFBZ128rr killed [[VPUNPCKLBWZ128rr1]], [[VMOVDQA64Z128rm]]
  ; X64-NEXT:   [[VPMOVZXBWZ256rr1:%[0-9]+]]:vr256x = VPMOVZXBWZ256rr killed [[VPSHUFBZ128rr1]]
  ; X64-NEXT:   [[VPSUBDZ256rr:%[0-9]+]]:vr256x = VPSUBDZ256rr killed [[VPMOVZXBWZ256rr1]], killed [[VPMOVZXBWZ256rr]]
  ; X64-NEXT:   [[VPUNPCKLBWZ128rr2:%[0-9]+]]:vr128x = VPUNPCKLBWZ128rr [[COPY5]], [[COPY6]]
  ; X64-NEXT:   [[VPSHUFBZ128rr2:%[0-9]+]]:vr128x = VPSHUFBZ128rr killed [[VPUNPCKLBWZ128rr2]], [[VMOVDQA64Z128rm]]
  ; X64-NEXT:   [[VPMOVZXBWZ256rr2:%[0-9]+]]:vr256x = VPMOVZXBWZ256rr killed [[VPSHUFBZ128rr2]]
  ; X64-NEXT:   [[VPUNPCKLBWZ128rr3:%[0-9]+]]:vr128x = VPUNPCKLBWZ128rr [[COPY1]], [[COPY2]]
  ; X64-NEXT:   [[VPSHUFBZ128rr3:%[0-9]+]]:vr128x = VPSHUFBZ128rr killed [[VPUNPCKLBWZ128rr3]], [[VMOVDQA64Z128rm]]
  ; X64-NEXT:   [[VPMOVZXBWZ256rr3:%[0-9]+]]:vr256x = VPMOVZXBWZ256rr killed [[VPSHUFBZ128rr3]]
  ; X64-NEXT:   [[VPSUBDZ256rr1:%[0-9]+]]:vr256x = VPSUBDZ256rr killed [[VPMOVZXBWZ256rr3]], killed [[VPMOVZXBWZ256rr2]]
  ; X64-NEXT:   [[VPSHUFDZ256ri:%[0-9]+]]:vr256x = VPSHUFDZ256ri [[VPSUBDZ256rr1]], -79
  ; X64-NEXT:   [[VPSHUFDZ256ri1:%[0-9]+]]:vr256x = VPSHUFDZ256ri [[VPSUBDZ256rr]], -79
  ; X64-NEXT:   [[VPADDDZ256rr:%[0-9]+]]:vr256 = nsw VPADDDZ256rr [[VPSHUFDZ256ri1]], [[VPSUBDZ256rr]]
  ; X64-NEXT:   [[VPADDDZ256rr1:%[0-9]+]]:vr256 = nsw VPADDDZ256rr [[VPSHUFDZ256ri]], [[VPSUBDZ256rr1]]
  ; X64-NEXT:   [[VPSUBDZ256rr2:%[0-9]+]]:vr256 = nsw VPSUBDZ256rr [[VPSHUFDZ256ri1]], [[VPSUBDZ256rr]]
  ; X64-NEXT:   [[VPSUBDZ256rr3:%[0-9]+]]:vr256 = nsw VPSUBDZ256rr [[VPSHUFDZ256ri]], [[VPSUBDZ256rr1]]
  ; X64-NEXT:   [[VPBLENDDYrri:%[0-9]+]]:vr256 = VPBLENDDYrri killed [[VPADDDZ256rr1]], killed [[VPSUBDZ256rr3]], -86
  ; X64-NEXT:   [[VPBLENDDYrri1:%[0-9]+]]:vr256 = VPBLENDDYrri killed [[VPADDDZ256rr]], killed [[VPSUBDZ256rr2]], -86
  ; X64-NEXT:   [[VPSHUFDZ256ri2:%[0-9]+]]:vr256x = VPSHUFDZ256ri [[VPBLENDDYrri1]], 78
  ; X64-NEXT:   [[VPSHUFDZ256ri3:%[0-9]+]]:vr256x = VPSHUFDZ256ri [[VPBLENDDYrri]], 78
  ; X64-NEXT:   [[VPADDDZ256rr2:%[0-9]+]]:vr256 = nsw VPADDDZ256rr [[VPSHUFDZ256ri3]], [[VPBLENDDYrri]]
  ; X64-NEXT:   [[VPADDDZ256rr3:%[0-9]+]]:vr256 = nsw VPADDDZ256rr [[VPSHUFDZ256ri2]], [[VPBLENDDYrri1]]
  ; X64-NEXT:   [[VPSUBDZ256rr4:%[0-9]+]]:vr256 = nsw VPSUBDZ256rr [[VPSHUFDZ256ri3]], [[VPBLENDDYrri]]
  ; X64-NEXT:   [[VPSUBDZ256rr5:%[0-9]+]]:vr256 = nsw VPSUBDZ256rr [[VPSHUFDZ256ri2]], [[VPBLENDDYrri1]]
  ; X64-NEXT:   [[VPBLENDDYrri2:%[0-9]+]]:vr256 = VPBLENDDYrri killed [[VPADDDZ256rr3]], killed [[VPSUBDZ256rr5]], -52
  ; X64-NEXT:   [[VPBLENDDYrri3:%[0-9]+]]:vr256 = VPBLENDDYrri killed [[VPADDDZ256rr2]], killed [[VPSUBDZ256rr4]], -52
  ; X64-NEXT:   [[COPY8:%[0-9]+]]:vr128x = COPY [[VPBLENDDYrri3]].sub_xmm
  ; X64-NEXT:   [[VEXTRACTI32x4Z256rr:%[0-9]+]]:vr128x = VEXTRACTI32x4Z256rr [[VPBLENDDYrri3]], 1
  ; X64-NEXT:   [[COPY9:%[0-9]+]]:vr128x = COPY [[VPBLENDDYrri2]].sub_xmm
  ; X64-NEXT:   [[VEXTRACTI32x4Z256rr1:%[0-9]+]]:vr128x = VEXTRACTI32x4Z256rr [[VPBLENDDYrri2]], 1
  ; X64-NEXT:   [[VPADDDZ128rr:%[0-9]+]]:vr128 = VPADDDZ128rr killed [[COPY8]], killed [[VEXTRACTI32x4Z256rr]]
  ; X64-NEXT:   [[VPADDDZ128rr1:%[0-9]+]]:vr128 = VPADDDZ128rr killed [[COPY9]], killed [[VEXTRACTI32x4Z256rr1]]
  ; X64-NEXT:   [[VPCMPEQDrr:%[0-9]+]]:vr128 = VPCMPEQDrr killed [[VPADDDZ128rr]], killed [[VPADDDZ128rr1]]
  ; X64-NEXT:   $xmm0 = COPY [[VPCMPEQDrr]]
  ; X64-NEXT:   RET 0, $xmm0
entry:
  %shf_149 = shufflevector <8 x i8> %input0, <8 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %shf_146 = shufflevector <8 x i8> %input1, <8 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %shf_143 = shufflevector <8 x i8> %input2, <8 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %shf_140 = shufflevector <8 x i8> %input3, <8 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %shf_137 = shufflevector <8 x i8> %input4, <8 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %shf_134 = shufflevector <8 x i8> %input5, <8 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %shf_ = shufflevector <8 x i8> %input6, <8 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %shf_152 = shufflevector <8 x i8> %input7, <8 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %shf_150 = shufflevector <8 x i8> %input0, <8 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %shf_147 = shufflevector <8 x i8> %input1, <8 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %shf_144 = shufflevector <8 x i8> %input2, <8 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %shf_141 = shufflevector <8 x i8> %input3, <8 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %shf_138 = shufflevector <8 x i8> %input4, <8 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %shf_135 = shufflevector <8 x i8> %input5, <8 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %shf_132 = shufflevector <8 x i8> %input6, <8 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %shf_153 = shufflevector <8 x i8> %input7, <8 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %shf130 = shufflevector <4 x i8> %shf_149, <4 x i8> %shf_152, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %shf129 = shufflevector <4 x i8> %shf_143, <4 x i8> %shf_146, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %shf127 = shufflevector <4 x i8> %shf_137, <4 x i8> %shf_140, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %shf126 = shufflevector <4 x i8> %shf_, <4 x i8> %shf_134, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %shf121 = shufflevector <4 x i8> %shf_138, <4 x i8> %shf_141, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %shf = shufflevector <4 x i8> %shf_132, <4 x i8> %shf_135, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %shf131 = shufflevector <8 x i8> %shf129, <8 x i8> %shf130, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %shf128 = shufflevector <8 x i8> %shf126, <8 x i8> %shf127, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %shf122 = shufflevector <8 x i8> %shf, <8 x i8> %shf121, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %zxt8 = zext <16 x i8> %shf131 to <16 x i32>
  %zxt9 = zext <16 x i8> %shf128 to <16 x i32>
  %zxt11 = zext <16 x i8> %shf122 to <16 x i32>
  %sub10 = sub nsw <16 x i32> %zxt9, %zxt8
  %shf123 = shufflevector <4 x i8> %shf_144, <4 x i8> %shf_147, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %shf124 = shufflevector <4 x i8> %shf_150, <4 x i8> %shf_153, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %shf125 = shufflevector <8 x i8> %shf123, <8 x i8> %shf124, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %zxt12 = zext <16 x i8> %shf125 to <16 x i32>
  %sub13 = sub nsw <16 x i32> %zxt11, %zxt12
  %shl14 = shl nsw <16 x i32> %sub13, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %add15 = add nsw <16 x i32> %shl14, %sub10
  %shf16 = shufflevector <16 x i32> %add15, <16 x i32> poison, <16 x i32> <i32 1, i32 0, i32 3, i32 2, i32 5, i32 4, i32 7, i32 6, i32 9, i32 8, i32 11, i32 10, i32 13, i32 12, i32 15, i32 14>
  %add17 = add nsw <16 x i32> %shf16, %add15
  %sub18 = sub nsw <16 x i32> %shf16, %add15
  %shf19 = shufflevector <16 x i32> %add17, <16 x i32> %sub18, <16 x i32> <i32 0, i32 17, i32 2, i32 19, i32 4, i32 21, i32 6, i32 23, i32 8, i32 25, i32 10, i32 27, i32 12, i32 29, i32 14, i32 31>
  %shf20 = shufflevector <16 x i32> %shf19, <16 x i32> poison, <16 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5, i32 10, i32 11, i32 8, i32 9, i32 14, i32 15, i32 12, i32 13>
  %add21 = add nsw <16 x i32> %shf20, %shf19
  %sub22 = sub nsw <16 x i32> %shf20, %shf19
  %shf23 = shufflevector <16 x i32> %add21, <16 x i32> %sub22, <16 x i32> <i32 0, i32 1, i32 18, i32 19, i32 4, i32 5, i32 22, i32 23, i32 8, i32 9, i32 26, i32 27, i32 12, i32 13, i32 30, i32 31>
  %shf_155 = shufflevector <16 x i32> %shf23, <16 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %shf_156 = shufflevector <16 x i32> %shf23, <16 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %shf_157 = shufflevector <16 x i32> %shf23, <16 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %shf_158 = shufflevector <16 x i32> %shf23, <16 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %add1 = add <4 x i32> %shf_155, %shf_156
  %add2 = add <4 x i32> %shf_157, %shf_158
  %cmp = icmp eq <4 x i32> %add1, %add2
  ret <4 x i1> %cmp
}

; check-NOT:  PSLLDri
; check-NOT:  VPADDDZrr
; check:      VPADDDZ256rr
; check-NOT:  VPSUBDZrr
; check:      VPSUBDZ256rr
define hidden <4 x i1> @fun8x4_1(<16 x i8> %input0, <16 x i8> %input1, <16 x i8> %input2, <16 x i8> %input3) "prefer-vector-width"="512" {
  ; X64-LABEL: name: fun8x4_1
  ; X64: bb.0.entry:
  ; X64-NEXT:   liveins: $xmm0, $xmm1, $xmm2, $xmm3
  ; X64-NEXT: {{  $}}
  ; X64-NEXT:   [[COPY:%[0-9]+]]:vr128x = COPY $xmm3
  ; X64-NEXT:   [[COPY1:%[0-9]+]]:vr128x = COPY $xmm2
  ; X64-NEXT:   [[COPY2:%[0-9]+]]:vr128x = COPY $xmm1
  ; X64-NEXT:   [[COPY3:%[0-9]+]]:vr128x = COPY $xmm0
  ; X64-NEXT:   [[VPUNPCKHBWZ128rr:%[0-9]+]]:vr128x = VPUNPCKHBWZ128rr [[COPY]], [[COPY1]]
  ; X64-NEXT:   [[VPMOVZXBWZ256rr:%[0-9]+]]:vr256x = VPMOVZXBWZ256rr killed [[VPUNPCKHBWZ128rr]]
  ; X64-NEXT:   [[VPUNPCKHBWZ128rr1:%[0-9]+]]:vr128x = VPUNPCKHBWZ128rr [[COPY3]], [[COPY2]]
  ; X64-NEXT:   [[VPMOVZXBWZ256rr1:%[0-9]+]]:vr256x = VPMOVZXBWZ256rr killed [[VPUNPCKHBWZ128rr1]]
  ; X64-NEXT:   [[VPSUBDZ256rr:%[0-9]+]]:vr256x = VPSUBDZ256rr killed [[VPMOVZXBWZ256rr1]], killed [[VPMOVZXBWZ256rr]]
  ; X64-NEXT:   [[VPUNPCKLBWZ128rr:%[0-9]+]]:vr128x = VPUNPCKLBWZ128rr [[COPY]], [[COPY1]]
  ; X64-NEXT:   [[VPMOVZXBWZ256rr2:%[0-9]+]]:vr256x = VPMOVZXBWZ256rr killed [[VPUNPCKLBWZ128rr]]
  ; X64-NEXT:   [[VPUNPCKLBWZ128rr1:%[0-9]+]]:vr128x = VPUNPCKLBWZ128rr [[COPY3]], [[COPY2]]
  ; X64-NEXT:   [[VPMOVZXBWZ256rr3:%[0-9]+]]:vr256x = VPMOVZXBWZ256rr killed [[VPUNPCKLBWZ128rr1]]
  ; X64-NEXT:   [[VPSUBDZ256rr1:%[0-9]+]]:vr256x = VPSUBDZ256rr killed [[VPMOVZXBWZ256rr3]], killed [[VPMOVZXBWZ256rr2]]
  ; X64-NEXT:   [[VPSHUFDZ256ri:%[0-9]+]]:vr256x = VPSHUFDZ256ri [[VPSUBDZ256rr1]], -79
  ; X64-NEXT:   [[VPSHUFDZ256ri1:%[0-9]+]]:vr256x = VPSHUFDZ256ri [[VPSUBDZ256rr]], -79
  ; X64-NEXT:   [[VPADDDZ256rr:%[0-9]+]]:vr256 = nsw VPADDDZ256rr [[VPSHUFDZ256ri1]], [[VPSUBDZ256rr]]
  ; X64-NEXT:   [[VPADDDZ256rr1:%[0-9]+]]:vr256 = nsw VPADDDZ256rr [[VPSHUFDZ256ri]], [[VPSUBDZ256rr1]]
  ; X64-NEXT:   [[VPSUBDZ256rr2:%[0-9]+]]:vr256 = nsw VPSUBDZ256rr [[VPSHUFDZ256ri1]], [[VPSUBDZ256rr]]
  ; X64-NEXT:   [[VPSUBDZ256rr3:%[0-9]+]]:vr256 = nsw VPSUBDZ256rr [[VPSHUFDZ256ri]], [[VPSUBDZ256rr1]]
  ; X64-NEXT:   [[VPBLENDDYrri:%[0-9]+]]:vr256 = VPBLENDDYrri killed [[VPADDDZ256rr1]], killed [[VPSUBDZ256rr3]], -86
  ; X64-NEXT:   [[VPBLENDDYrri1:%[0-9]+]]:vr256 = VPBLENDDYrri killed [[VPADDDZ256rr]], killed [[VPSUBDZ256rr2]], -86
  ; X64-NEXT:   [[VPSHUFDZ256ri2:%[0-9]+]]:vr256x = VPSHUFDZ256ri [[VPBLENDDYrri1]], 78
  ; X64-NEXT:   [[VPSHUFDZ256ri3:%[0-9]+]]:vr256x = VPSHUFDZ256ri [[VPBLENDDYrri]], 78
  ; X64-NEXT:   [[VPADDDZ256rr2:%[0-9]+]]:vr256 = nsw VPADDDZ256rr [[VPSHUFDZ256ri3]], [[VPBLENDDYrri]]
  ; X64-NEXT:   [[VPADDDZ256rr3:%[0-9]+]]:vr256 = nsw VPADDDZ256rr [[VPSHUFDZ256ri2]], [[VPBLENDDYrri1]]
  ; X64-NEXT:   [[VPSUBDZ256rr4:%[0-9]+]]:vr256 = nsw VPSUBDZ256rr [[VPSHUFDZ256ri3]], [[VPBLENDDYrri]]
  ; X64-NEXT:   [[VPSUBDZ256rr5:%[0-9]+]]:vr256 = nsw VPSUBDZ256rr [[VPSHUFDZ256ri2]], [[VPBLENDDYrri1]]
  ; X64-NEXT:   [[VPBLENDDYrri2:%[0-9]+]]:vr256 = VPBLENDDYrri killed [[VPADDDZ256rr3]], killed [[VPSUBDZ256rr5]], -52
  ; X64-NEXT:   [[VPBLENDDYrri3:%[0-9]+]]:vr256 = VPBLENDDYrri killed [[VPADDDZ256rr2]], killed [[VPSUBDZ256rr4]], -52
  ; X64-NEXT:   [[COPY4:%[0-9]+]]:vr128x = COPY [[VPBLENDDYrri3]].sub_xmm
  ; X64-NEXT:   [[VEXTRACTI32x4Z256rr:%[0-9]+]]:vr128x = VEXTRACTI32x4Z256rr [[VPBLENDDYrri3]], 1
  ; X64-NEXT:   [[COPY5:%[0-9]+]]:vr128x = COPY [[VPBLENDDYrri2]].sub_xmm
  ; X64-NEXT:   [[VEXTRACTI32x4Z256rr1:%[0-9]+]]:vr128x = VEXTRACTI32x4Z256rr [[VPBLENDDYrri2]], 1
  ; X64-NEXT:   [[VPADDDZ128rr:%[0-9]+]]:vr128 = VPADDDZ128rr killed [[COPY4]], killed [[VEXTRACTI32x4Z256rr]]
  ; X64-NEXT:   [[VPADDDZ128rr1:%[0-9]+]]:vr128 = VPADDDZ128rr killed [[COPY5]], killed [[VEXTRACTI32x4Z256rr1]]
  ; X64-NEXT:   [[VPCMPEQDrr:%[0-9]+]]:vr128 = VPCMPEQDrr killed [[VPADDDZ128rr]], killed [[VPADDDZ128rr1]]
  ; X64-NEXT:   $xmm0 = COPY [[VPCMPEQDrr]]
  ; X64-NEXT:   RET 0, $xmm0
entry:
  %zxt6 = zext <16 x i8> %input0 to <16 x i32>
  %zxt7 = zext <16 x i8> %input1 to <16 x i32>
  %zxt8 = zext <16 x i8> %input2 to <16 x i32>
  %zxt9 = zext <16 x i8> %input3 to <16 x i32>
  %shl10 = shl nuw nsw <16 x i32> %zxt8, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %shl11 = shl nuw nsw <16 x i32> %zxt7, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %or12 = or <16 x i32> %shl10, %zxt9
  %sub13 = sub nsw <16 x i32> %shl11, %or12
  %add15 = add nsw <16 x i32> %sub13, %zxt6
  %shf16 = shufflevector <16 x i32> %add15, <16 x i32> poison, <16 x i32> <i32 1, i32 0, i32 3, i32 2, i32 5, i32 4, i32 7, i32 6, i32 9, i32 8, i32 11, i32 10, i32 13, i32 12, i32 15, i32 14>
  %add17 = add nsw <16 x i32> %shf16, %add15
  %sub18 = sub nsw <16 x i32> %shf16, %add15
  %shf19 = shufflevector <16 x i32> %add17, <16 x i32> %sub18, <16 x i32> <i32 0, i32 17, i32 2, i32 19, i32 4, i32 21, i32 6, i32 23, i32 8, i32 25, i32 10, i32 27, i32 12, i32 29, i32 14, i32 31>
  %shf20 = shufflevector <16 x i32> %shf19, <16 x i32> poison, <16 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5, i32 10, i32 11, i32 8, i32 9, i32 14, i32 15, i32 12, i32 13>
  %add21 = add nsw <16 x i32> %shf20, %shf19
  %sub22 = sub nsw <16 x i32> %shf20, %shf19
  %shf23 = shufflevector <16 x i32> %add21, <16 x i32> %sub22, <16 x i32> <i32 0, i32 1, i32 18, i32 19, i32 4, i32 5, i32 22, i32 23, i32 8, i32 9, i32 26, i32 27, i32 12, i32 13, i32 30, i32 31>
  %shf_155 = shufflevector <16 x i32> %shf23, <16 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %shf_156 = shufflevector <16 x i32> %shf23, <16 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %shf_157 = shufflevector <16 x i32> %shf23, <16 x i32> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %shf_158 = shufflevector <16 x i32> %shf23, <16 x i32> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %add1 = add <4 x i32> %shf_155, %shf_156
  %add2 = add <4 x i32> %shf_157, %shf_158
  %cmp = icmp eq <4 x i32> %add1, %add2
  ret <4 x i1> %cmp
}
