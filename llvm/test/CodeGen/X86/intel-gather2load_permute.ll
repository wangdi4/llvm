; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=i686-linux  -enable-intel-advanced-opts=true -O3 -mattr=+avx512f,+avx512vl,+avx512dq | FileCheck %s --check-prefix=X86-AVX512-VL-DQ

%struct.2 = type {[2 x float], %struct.2*, %struct.2* }
%struct.6 = type {[6 x float], %struct.6*, %struct.6* }
%struct.8 = type {[8 x float], %struct.8*, %struct.8* }
%struct.17 = type {[17 x float], %struct.17*, %struct.17* }

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local <6 x float> @Array2x_Gather6x_AllOneMask(i32* nocapture readonly %index_ptr, %struct.2* nocapture readonly %node) {
; X86-AVX512-VL-DQ-LABEL: Array2x_Gather6x_AllOneMask:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-DQ-NEXT:    movb $63, %dl
; X86-AVX512-VL-DQ-NEXT:    kmovb %edx, %k1
; X86-AVX512-VL-DQ-NEXT:    vmovdqu32 (%ecx), %ymm1 {%k1} {z}
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    vgatherdps (%eax,%ymm1,4), %ymm0 {%k1}
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %bc = bitcast i32* %index_ptr to <6 x i32>*
  %index = load <6 x i32>, <6 x i32>* %bc, align 4
  %index_i64 = sext <6 x i32> %index to <6 x i64>
  %gep = getelementptr inbounds %struct.2, %struct.2* %node, i64 0, i32 0, <6 x i64> %index_i64
  %res = call <6 x float> @llvm.masked.gather.v6f32.v6p0f32(<6 x float*> %gep, i32 4, <6 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <6 x float> undef)
  ret <6 x float> %res
}

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local <2 x float> @Array2x_Gather2x_AllOneMask(i32* nocapture readonly %index_ptr, %struct.2* nocapture readonly %node) {
; X86-AVX512-VL-DQ-LABEL: Array2x_Gather2x_AllOneMask:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-DQ-NEXT:    vmovsd {{.*#+}} xmm1 = mem[0],zero
; X86-AVX512-VL-DQ-NEXT:    movb $3, %cl
; X86-AVX512-VL-DQ-NEXT:    kmovb %ecx, %k1
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    vgatherdps (%eax,%xmm1,4), %xmm0 {%k1}
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %bc = bitcast i32* %index_ptr to <2 x i32>*
  %index = load <2 x i32>, <2 x i32>* %bc, align 4
  %gep = getelementptr inbounds %struct.2, %struct.2* %node, i64 0, i32 0, <2 x i32> %index
  %res = call <2 x float> @llvm.masked.gather.v2f32.v2p0f32(<2 x float*> %gep, i32 4, <2 x i1> <i1 true, i1 true>, <2 x float> undef)
  ret <2 x float> %res
}

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local <8 x float> @Array2x_Gather8x_AllOneMask(i32* nocapture readonly %index_ptr, %struct.2* nocapture readonly %node) {
; X86-AVX512-VL-DQ-LABEL: Array2x_Gather8x_AllOneMask:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-DQ-NEXT:    vmovups (%ecx), %ymm1
; X86-AVX512-VL-DQ-NEXT:    kxnorw %k0, %k0, %k1
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    vgatherdps (%eax,%ymm1,4), %ymm0 {%k1}
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %bc = bitcast i32* %index_ptr to <8 x i32>*
  %index = load <8 x i32>, <8 x i32>* %bc, align 4
  %gep = getelementptr inbounds %struct.2, %struct.2* %node, i64 0, i32 0, <8 x i32> %index
  %res = call <8 x float> @llvm.masked.gather.v8f32.v8p0f32(<8 x float*> %gep, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <8 x float> undef)
  ret <8 x float> %res
}

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local <17 x float> @Array2x_Gather17x_AllOneMask(i32* nocapture readonly %index_ptr, %struct.2* nocapture readonly %node) {
; X86-AVX512-VL-DQ-LABEL: Array2x_Gather17x_AllOneMask:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %edx
; X86-AVX512-VL-DQ-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; X86-AVX512-VL-DQ-NEXT:    vmovups (%edx), %zmm1
; X86-AVX512-VL-DQ-NEXT:    kxnorw %k0, %k0, %k1
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm2, %xmm2, %xmm2
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm3, %xmm3, %xmm3
; X86-AVX512-VL-DQ-NEXT:    vgatherdps (%ecx,%zmm1,4), %zmm3 {%k1}
; X86-AVX512-VL-DQ-NEXT:    movw $1, %dx
; X86-AVX512-VL-DQ-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-DQ-NEXT:    vgatherdps (%ecx,%zmm0,4), %zmm2 {%k1}
; X86-AVX512-VL-DQ-NEXT:    vmovaps %zmm3, (%eax)
; X86-AVX512-VL-DQ-NEXT:    vmovss %xmm2, 64(%eax)
; X86-AVX512-VL-DQ-NEXT:    vzeroupper
; X86-AVX512-VL-DQ-NEXT:    retl $4
entry:
  %bc = bitcast i32* %index_ptr to <17 x i32>*
  %index = load <17 x i32>, <17 x i32>* %bc, align 4
  %gep = getelementptr inbounds %struct.2, %struct.2* %node, i64 0, i32 0, <17 x i32> %index
  %res = call <17 x float> @llvm.masked.gather.v17f32.v17p0f32(<17 x float*> %gep, i32 4, <17 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <17 x float> undef)
  ret <17 x float> %res
}

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local <6 x float> @Array6x_Gather6x_AllOneMask(i32* nocapture readonly %index_ptr, %struct.6* nocapture readonly %node) {
; X86-AVX512-VL-DQ-LABEL: Array6x_Gather6x_AllOneMask:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-DQ-NEXT:    movb $63, %dl
; X86-AVX512-VL-DQ-NEXT:    kmovb %edx, %k1
; X86-AVX512-VL-DQ-NEXT:    vmovdqu32 (%ecx), %ymm1 {%k1} {z}
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    vgatherdps (%eax,%ymm1,4), %ymm0 {%k1}
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %bc = bitcast i32* %index_ptr to <6 x i32>*
  %index = load <6 x i32>, <6 x i32>* %bc, align 4
  %index_i64 = sext <6 x i32> %index to <6 x i64>
  %gep = getelementptr inbounds %struct.6, %struct.6* %node, i64 0, i32 0, <6 x i64> %index_i64
  %res = call <6 x float> @llvm.masked.gather.v6f32.v6p0f32(<6 x float*> %gep, i32 4, <6 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <6 x float> undef)
  ret <6 x float> %res
}

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local <2 x float> @Array6x_Gather2x_AllOneMask(i32* nocapture readonly %index_ptr, %struct.6* nocapture readonly %node) {
; X86-AVX512-VL-DQ-LABEL: Array6x_Gather2x_AllOneMask:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-DQ-NEXT:    vmovsd {{.*#+}} xmm1 = mem[0],zero
; X86-AVX512-VL-DQ-NEXT:    movb $3, %cl
; X86-AVX512-VL-DQ-NEXT:    kmovb %ecx, %k1
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    vgatherdps (%eax,%xmm1,4), %xmm0 {%k1}
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %bc = bitcast i32* %index_ptr to <2 x i32>*
  %index = load <2 x i32>, <2 x i32>* %bc, align 4
  %gep = getelementptr inbounds %struct.6, %struct.6* %node, i64 0, i32 0, <2 x i32> %index
  %res = call <2 x float> @llvm.masked.gather.v2f32.v2p0f32(<2 x float*> %gep, i32 4, <2 x i1> <i1 true, i1 true>, <2 x float> undef)
  ret <2 x float> %res
}

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local <8 x float> @Array6x_Gather8x_AllOneMask(i32* nocapture readonly %index_ptr, %struct.6* nocapture readonly %node) {
; X86-AVX512-VL-DQ-LABEL: Array6x_Gather8x_AllOneMask:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-DQ-NEXT:    vmovups (%ecx), %ymm1
; X86-AVX512-VL-DQ-NEXT:    kxnorw %k0, %k0, %k1
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    vgatherdps (%eax,%ymm1,4), %ymm0 {%k1}
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %bc = bitcast i32* %index_ptr to <8 x i32>*
  %index = load <8 x i32>, <8 x i32>* %bc, align 4
  %gep = getelementptr inbounds %struct.6, %struct.6* %node, i64 0, i32 0, <8 x i32> %index
  %res = call <8 x float> @llvm.masked.gather.v8f32.v8p0f32(<8 x float*> %gep, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <8 x float> undef)
  ret <8 x float> %res
}

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local <17 x float> @Array6x_Gather17x_AllOneMask(i32* nocapture readonly %index_ptr, %struct.6* nocapture readonly %node) {
; X86-AVX512-VL-DQ-LABEL: Array6x_Gather17x_AllOneMask:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %edx
; X86-AVX512-VL-DQ-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; X86-AVX512-VL-DQ-NEXT:    vmovups (%edx), %zmm1
; X86-AVX512-VL-DQ-NEXT:    kxnorw %k0, %k0, %k1
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm2, %xmm2, %xmm2
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm3, %xmm3, %xmm3
; X86-AVX512-VL-DQ-NEXT:    vgatherdps (%ecx,%zmm1,4), %zmm3 {%k1}
; X86-AVX512-VL-DQ-NEXT:    movw $1, %dx
; X86-AVX512-VL-DQ-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-DQ-NEXT:    vgatherdps (%ecx,%zmm0,4), %zmm2 {%k1}
; X86-AVX512-VL-DQ-NEXT:    vmovaps %zmm3, (%eax)
; X86-AVX512-VL-DQ-NEXT:    vmovss %xmm2, 64(%eax)
; X86-AVX512-VL-DQ-NEXT:    vzeroupper
; X86-AVX512-VL-DQ-NEXT:    retl $4
entry:
  %bc = bitcast i32* %index_ptr to <17 x i32>*
  %index = load <17 x i32>, <17 x i32>* %bc, align 4
  %gep = getelementptr inbounds %struct.6, %struct.6* %node, i64 0, i32 0, <17 x i32> %index
  %res = call <17 x float> @llvm.masked.gather.v17f32.v17p0f32(<17 x float*> %gep, i32 4, <17 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <17 x float> undef)
  ret <17 x float> %res
}


; Function Attrs: norecurse nounwind readonly uwtable
define dso_local <6 x float> @Array8x_Gather6x_AllOneMask(i32* nocapture readonly %index_ptr, %struct.8* nocapture readonly %node) {
; X86-AVX512-VL-DQ-LABEL: Array8x_Gather6x_AllOneMask:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-DQ-NEXT:    movb $63, %dl
; X86-AVX512-VL-DQ-NEXT:    kmovb %edx, %k1
; X86-AVX512-VL-DQ-NEXT:    vmovdqu32 (%ecx), %ymm1 {%k1} {z}
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    vgatherdps (%eax,%ymm1,4), %ymm0 {%k1}
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %bc = bitcast i32* %index_ptr to <6 x i32>*
  %index = load <6 x i32>, <6 x i32>* %bc, align 4
  %index_i64 = sext <6 x i32> %index to <6 x i64>
  %gep = getelementptr inbounds %struct.8, %struct.8* %node, i64 0, i32 0, <6 x i64> %index_i64
  %res = call <6 x float> @llvm.masked.gather.v6f32.v6p0f32(<6 x float*> %gep, i32 4, <6 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <6 x float> undef)
  ret <6 x float> %res
}

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local <2 x float> @Array8x_Gather2x_AllOneMask(i32* nocapture readonly %index_ptr, %struct.8* nocapture readonly %node) {
; X86-AVX512-VL-DQ-LABEL: Array8x_Gather2x_AllOneMask:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-DQ-NEXT:    vmovsd {{.*#+}} xmm1 = mem[0],zero
; X86-AVX512-VL-DQ-NEXT:    movb $3, %cl
; X86-AVX512-VL-DQ-NEXT:    kmovb %ecx, %k1
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    vgatherdps (%eax,%xmm1,4), %xmm0 {%k1}
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %bc = bitcast i32* %index_ptr to <2 x i32>*
  %index = load <2 x i32>, <2 x i32>* %bc, align 4
  %gep = getelementptr inbounds %struct.8, %struct.8* %node, i64 0, i32 0, <2 x i32> %index
  %res = call <2 x float> @llvm.masked.gather.v2f32.v2p0f32(<2 x float*> %gep, i32 4, <2 x i1> <i1 true, i1 true>, <2 x float> undef)
  ret <2 x float> %res
}

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local <8 x float> @Array8x_Gather8x_AllOneMask(i32* nocapture readonly %index_ptr, %struct.8* nocapture readonly %node) {
; X86-AVX512-VL-DQ-LABEL: Array8x_Gather8x_AllOneMask:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-DQ-NEXT:    vmovups (%ecx), %ymm1
; X86-AVX512-VL-DQ-NEXT:    kxnorw %k0, %k0, %k1
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    vgatherdps (%eax,%ymm1,4), %ymm0 {%k1}
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %bc = bitcast i32* %index_ptr to <8 x i32>*
  %index = load <8 x i32>, <8 x i32>* %bc, align 4
  %gep = getelementptr inbounds %struct.8, %struct.8* %node, i64 0, i32 0, <8 x i32> %index
  %res = call <8 x float> @llvm.masked.gather.v8f32.v8p0f32(<8 x float*> %gep, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <8 x float> undef)
  ret <8 x float> %res
}

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local <17 x float> @Array8x_Gather17x_AllOneMask(i32* nocapture readonly %index_ptr, %struct.8* nocapture readonly %node) {
; X86-AVX512-VL-DQ-LABEL: Array8x_Gather17x_AllOneMask:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %edx
; X86-AVX512-VL-DQ-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; X86-AVX512-VL-DQ-NEXT:    vmovups (%edx), %zmm1
; X86-AVX512-VL-DQ-NEXT:    kxnorw %k0, %k0, %k1
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm2, %xmm2, %xmm2
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm3, %xmm3, %xmm3
; X86-AVX512-VL-DQ-NEXT:    vgatherdps (%ecx,%zmm1,4), %zmm3 {%k1}
; X86-AVX512-VL-DQ-NEXT:    movw $1, %dx
; X86-AVX512-VL-DQ-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-DQ-NEXT:    vgatherdps (%ecx,%zmm0,4), %zmm2 {%k1}
; X86-AVX512-VL-DQ-NEXT:    vmovaps %zmm3, (%eax)
; X86-AVX512-VL-DQ-NEXT:    vmovss %xmm2, 64(%eax)
; X86-AVX512-VL-DQ-NEXT:    vzeroupper
; X86-AVX512-VL-DQ-NEXT:    retl $4
entry:
  %bc = bitcast i32* %index_ptr to <17 x i32>*
  %index = load <17 x i32>, <17 x i32>* %bc, align 4
  %gep = getelementptr inbounds %struct.8, %struct.8* %node, i64 0, i32 0, <17 x i32> %index
  %res = call <17 x float> @llvm.masked.gather.v17f32.v17p0f32(<17 x float*> %gep, i32 4, <17 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <17 x float> undef)
  ret <17 x float> %res
}

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local <6 x float> @Array2x_Gather6x(i32* nocapture readonly %index_ptr, %struct.2* nocapture readonly %node) {
; X86-AVX512-VL-DQ-LABEL: Array2x_Gather6x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-DQ-NEXT:    movb $63, %dl
; X86-AVX512-VL-DQ-NEXT:    kmovb %edx, %k1
; X86-AVX512-VL-DQ-NEXT:    vmovdqu32 (%ecx), %ymm1 {%k1} {z}
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    movb $62, %cl
; X86-AVX512-VL-DQ-NEXT:    kmovb %ecx, %k1
; X86-AVX512-VL-DQ-NEXT:    vgatherdps (%eax,%ymm1,4), %ymm0 {%k1}
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %bc = bitcast i32* %index_ptr to <6 x i32>*
  %index = load <6 x i32>, <6 x i32>* %bc, align 4
  %index_i64 = sext <6 x i32> %index to <6 x i64>
  %gep = getelementptr inbounds %struct.2, %struct.2* %node, i64 0, i32 0, <6 x i64> %index_i64
  %res = call <6 x float> @llvm.masked.gather.v6f32.v6p0f32(<6 x float*> %gep, i32 4, <6 x i1> <i1 false, i1 true, i1 true, i1 true, i1 true, i1 true>, <6 x float> undef)
  ret <6 x float> %res
}

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local <2 x float> @Array2x_Gather2x(i32* nocapture readonly %index_ptr, %struct.2* nocapture readonly %node) {
; X86-AVX512-VL-DQ-LABEL: Array2x_Gather2x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-DQ-NEXT:    vmovsd {{.*#+}} xmm1 = mem[0],zero
; X86-AVX512-VL-DQ-NEXT:    movb $2, %cl
; X86-AVX512-VL-DQ-NEXT:    kmovb %ecx, %k1
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    vgatherdps (%eax,%xmm1,4), %xmm0 {%k1}
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %bc = bitcast i32* %index_ptr to <2 x i32>*
  %index = load <2 x i32>, <2 x i32>* %bc, align 4
  %gep = getelementptr inbounds %struct.2, %struct.2* %node, i64 0, i32 0, <2 x i32> %index
  %res = call <2 x float> @llvm.masked.gather.v2f32.v2p0f32(<2 x float*> %gep, i32 4, <2 x i1> <i1 false, i1 true>, <2 x float> undef)
  ret <2 x float> %res
}

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local <8 x float> @Array2x_Gather8x(i32* nocapture readonly %index_ptr, %struct.2* nocapture readonly %node) {
; X86-AVX512-VL-DQ-LABEL: Array2x_Gather8x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-DQ-NEXT:    vmovups (%ecx), %ymm1
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    movb $-2, %cl
; X86-AVX512-VL-DQ-NEXT:    kmovb %ecx, %k1
; X86-AVX512-VL-DQ-NEXT:    vgatherdps (%eax,%ymm1,4), %ymm0 {%k1}
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %bc = bitcast i32* %index_ptr to <8 x i32>*
  %index = load <8 x i32>, <8 x i32>* %bc, align 4
  %gep = getelementptr inbounds %struct.2, %struct.2* %node, i64 0, i32 0, <8 x i32> %index
  %res = call <8 x float> @llvm.masked.gather.v8f32.v8p0f32(<8 x float*> %gep, i32 4, <8 x i1> <i1 false, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <8 x float> undef)
  ret <8 x float> %res
}

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local <17 x float> @Array2x_Gather17x(i32* nocapture readonly %index_ptr, %struct.2* nocapture readonly %node) {
; X86-AVX512-VL-DQ-LABEL: Array2x_Gather17x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %edx
; X86-AVX512-VL-DQ-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; X86-AVX512-VL-DQ-NEXT:    vmovups (%edx), %zmm1
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm2, %xmm2, %xmm2
; X86-AVX512-VL-DQ-NEXT:    movw $-2, %dx
; X86-AVX512-VL-DQ-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm3, %xmm3, %xmm3
; X86-AVX512-VL-DQ-NEXT:    vgatherdps (%ecx,%zmm1,4), %zmm3 {%k1}
; X86-AVX512-VL-DQ-NEXT:    movw $1, %dx
; X86-AVX512-VL-DQ-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-DQ-NEXT:    vgatherdps (%ecx,%zmm0,4), %zmm2 {%k1}
; X86-AVX512-VL-DQ-NEXT:    vmovaps %zmm3, (%eax)
; X86-AVX512-VL-DQ-NEXT:    vmovss %xmm2, 64(%eax)
; X86-AVX512-VL-DQ-NEXT:    vzeroupper
; X86-AVX512-VL-DQ-NEXT:    retl $4
entry:
  %bc = bitcast i32* %index_ptr to <17 x i32>*
  %index = load <17 x i32>, <17 x i32>* %bc, align 4
  %gep = getelementptr inbounds %struct.2, %struct.2* %node, i64 0, i32 0, <17 x i32> %index
  %res = call <17 x float> @llvm.masked.gather.v17f32.v17p0f32(<17 x float*> %gep, i32 4, <17 x i1> <i1 false, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <17 x float> undef)
  ret <17 x float> %res
}

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local <6 x float> @Array6x_Gather6x(i32* nocapture readonly %index_ptr, %struct.6* nocapture readonly %node) {
; X86-AVX512-VL-DQ-LABEL: Array6x_Gather6x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-DQ-NEXT:    movb $63, %dl
; X86-AVX512-VL-DQ-NEXT:    kmovb %edx, %k1
; X86-AVX512-VL-DQ-NEXT:    vmovdqu32 (%ecx), %ymm1 {%k1} {z}
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    movb $62, %cl
; X86-AVX512-VL-DQ-NEXT:    kmovb %ecx, %k1
; X86-AVX512-VL-DQ-NEXT:    vgatherdps (%eax,%ymm1,4), %ymm0 {%k1}
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %bc = bitcast i32* %index_ptr to <6 x i32>*
  %index = load <6 x i32>, <6 x i32>* %bc, align 4
  %index_i64 = sext <6 x i32> %index to <6 x i64>
  %gep = getelementptr inbounds %struct.6, %struct.6* %node, i64 0, i32 0, <6 x i64> %index_i64
  %res = call <6 x float> @llvm.masked.gather.v6f32.v6p0f32(<6 x float*> %gep, i32 4, <6 x i1> <i1 false, i1 true, i1 true, i1 true, i1 true, i1 true>, <6 x float> undef)
  ret <6 x float> %res
}

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local <2 x float> @Array6x_Gather2x(i32* nocapture readonly %index_ptr, %struct.6* nocapture readonly %node) {
; X86-AVX512-VL-DQ-LABEL: Array6x_Gather2x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-DQ-NEXT:    vmovsd {{.*#+}} xmm1 = mem[0],zero
; X86-AVX512-VL-DQ-NEXT:    movb $2, %cl
; X86-AVX512-VL-DQ-NEXT:    kmovb %ecx, %k1
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    vgatherdps (%eax,%xmm1,4), %xmm0 {%k1}
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %bc = bitcast i32* %index_ptr to <2 x i32>*
  %index = load <2 x i32>, <2 x i32>* %bc, align 4
  %gep = getelementptr inbounds %struct.6, %struct.6* %node, i64 0, i32 0, <2 x i32> %index
  %res = call <2 x float> @llvm.masked.gather.v2f32.v2p0f32(<2 x float*> %gep, i32 4, <2 x i1> <i1 false, i1 true>, <2 x float> undef)
  ret <2 x float> %res
}

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local <8 x float> @Array6x_Gather8x(i32* nocapture readonly %index_ptr, %struct.6* nocapture readonly %node) {
; X86-AVX512-VL-DQ-LABEL: Array6x_Gather8x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-DQ-NEXT:    vmovups (%ecx), %ymm1
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    movb $-2, %cl
; X86-AVX512-VL-DQ-NEXT:    kmovb %ecx, %k1
; X86-AVX512-VL-DQ-NEXT:    vgatherdps (%eax,%ymm1,4), %ymm0 {%k1}
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %bc = bitcast i32* %index_ptr to <8 x i32>*
  %index = load <8 x i32>, <8 x i32>* %bc, align 4
  %gep = getelementptr inbounds %struct.6, %struct.6* %node, i64 0, i32 0, <8 x i32> %index
  %res = call <8 x float> @llvm.masked.gather.v8f32.v8p0f32(<8 x float*> %gep, i32 4, <8 x i1> <i1 false, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <8 x float> undef)
  ret <8 x float> %res
}

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local <17 x float> @Array6x_Gather17x(i32* nocapture readonly %index_ptr, %struct.6* nocapture readonly %node) {
; X86-AVX512-VL-DQ-LABEL: Array6x_Gather17x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %edx
; X86-AVX512-VL-DQ-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; X86-AVX512-VL-DQ-NEXT:    vmovups (%edx), %zmm1
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm2, %xmm2, %xmm2
; X86-AVX512-VL-DQ-NEXT:    movw $-2, %dx
; X86-AVX512-VL-DQ-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm3, %xmm3, %xmm3
; X86-AVX512-VL-DQ-NEXT:    vgatherdps (%ecx,%zmm1,4), %zmm3 {%k1}
; X86-AVX512-VL-DQ-NEXT:    movw $1, %dx
; X86-AVX512-VL-DQ-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-DQ-NEXT:    vgatherdps (%ecx,%zmm0,4), %zmm2 {%k1}
; X86-AVX512-VL-DQ-NEXT:    vmovaps %zmm3, (%eax)
; X86-AVX512-VL-DQ-NEXT:    vmovss %xmm2, 64(%eax)
; X86-AVX512-VL-DQ-NEXT:    vzeroupper
; X86-AVX512-VL-DQ-NEXT:    retl $4
entry:
  %bc = bitcast i32* %index_ptr to <17 x i32>*
  %index = load <17 x i32>, <17 x i32>* %bc, align 4
  %gep = getelementptr inbounds %struct.6, %struct.6* %node, i64 0, i32 0, <17 x i32> %index
  %res = call <17 x float> @llvm.masked.gather.v17f32.v17p0f32(<17 x float*> %gep, i32 4, <17 x i1> <i1 false, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <17 x float> undef)
  ret <17 x float> %res
}

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local <6 x float> @Array8x_Gather6x(i32* nocapture readonly %index_ptr, %struct.8* nocapture readonly %node) {
; X86-AVX512-VL-DQ-LABEL: Array8x_Gather6x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-DQ-NEXT:    movb $63, %dl
; X86-AVX512-VL-DQ-NEXT:    kmovb %edx, %k1
; X86-AVX512-VL-DQ-NEXT:    vmovdqu32 (%ecx), %ymm1 {%k1} {z}
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    movb $62, %cl
; X86-AVX512-VL-DQ-NEXT:    kmovb %ecx, %k1
; X86-AVX512-VL-DQ-NEXT:    vgatherdps (%eax,%ymm1,4), %ymm0 {%k1}
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %bc = bitcast i32* %index_ptr to <6 x i32>*
  %index = load <6 x i32>, <6 x i32>* %bc, align 4
  %index_i64 = sext <6 x i32> %index to <6 x i64>
  %gep = getelementptr inbounds %struct.8, %struct.8* %node, i64 0, i32 0, <6 x i64> %index_i64
  %res = call <6 x float> @llvm.masked.gather.v6f32.v6p0f32(<6 x float*> %gep, i32 4, <6 x i1> <i1 false, i1 true, i1 true, i1 true, i1 true, i1 true>, <6 x float> undef)
  ret <6 x float> %res
}

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local <2 x float> @Array8x_Gather2x(i32* nocapture readonly %index_ptr, %struct.8* nocapture readonly %node) {
; X86-AVX512-VL-DQ-LABEL: Array8x_Gather2x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-DQ-NEXT:    vmovsd {{.*#+}} xmm1 = mem[0],zero
; X86-AVX512-VL-DQ-NEXT:    movb $2, %cl
; X86-AVX512-VL-DQ-NEXT:    kmovb %ecx, %k1
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    vgatherdps (%eax,%xmm1,4), %xmm0 {%k1}
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %bc = bitcast i32* %index_ptr to <2 x i32>*
  %index = load <2 x i32>, <2 x i32>* %bc, align 4
  %gep = getelementptr inbounds %struct.8, %struct.8* %node, i64 0, i32 0, <2 x i32> %index
  %res = call <2 x float> @llvm.masked.gather.v2f32.v2p0f32(<2 x float*> %gep, i32 4, <2 x i1> <i1 false, i1 true>, <2 x float> undef)
  ret <2 x float> %res
}

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local <8 x float> @Array8x_Gather8x(i32* nocapture readonly %index_ptr, %struct.8* nocapture readonly %node) {
; X86-AVX512-VL-DQ-LABEL: Array8x_Gather8x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-DQ-NEXT:    vmovups (%ecx), %ymm1
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    movb $-2, %cl
; X86-AVX512-VL-DQ-NEXT:    kmovb %ecx, %k1
; X86-AVX512-VL-DQ-NEXT:    vgatherdps (%eax,%ymm1,4), %ymm0 {%k1}
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %bc = bitcast i32* %index_ptr to <8 x i32>*
  %index = load <8 x i32>, <8 x i32>* %bc, align 4
  %gep = getelementptr inbounds %struct.8, %struct.8* %node, i64 0, i32 0, <8 x i32> %index
  %res = call <8 x float> @llvm.masked.gather.v8f32.v8p0f32(<8 x float*> %gep, i32 4, <8 x i1> <i1 false, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <8 x float> undef)
  ret <8 x float> %res
}

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local <17 x float> @Array8x_Gather17x(i32* nocapture readonly %index_ptr, %struct.8* nocapture readonly %node) {
; X86-AVX512-VL-DQ-LABEL: Array8x_Gather17x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %edx
; X86-AVX512-VL-DQ-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; X86-AVX512-VL-DQ-NEXT:    vmovups (%edx), %zmm1
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm2, %xmm2, %xmm2
; X86-AVX512-VL-DQ-NEXT:    movw $-2, %dx
; X86-AVX512-VL-DQ-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm3, %xmm3, %xmm3
; X86-AVX512-VL-DQ-NEXT:    vgatherdps (%ecx,%zmm1,4), %zmm3 {%k1}
; X86-AVX512-VL-DQ-NEXT:    movw $1, %dx
; X86-AVX512-VL-DQ-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-DQ-NEXT:    vgatherdps (%ecx,%zmm0,4), %zmm2 {%k1}
; X86-AVX512-VL-DQ-NEXT:    vmovaps %zmm3, (%eax)
; X86-AVX512-VL-DQ-NEXT:    vmovss %xmm2, 64(%eax)
; X86-AVX512-VL-DQ-NEXT:    vzeroupper
; X86-AVX512-VL-DQ-NEXT:    retl $4
entry:
  %bc = bitcast i32* %index_ptr to <17 x i32>*
  %index = load <17 x i32>, <17 x i32>* %bc, align 4
  %gep = getelementptr inbounds %struct.8, %struct.8* %node, i64 0, i32 0, <17 x i32> %index
  %res = call <17 x float> @llvm.masked.gather.v17f32.v17p0f32(<17 x float*> %gep, i32 4, <17 x i1> <i1 false, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <17 x float> undef)
  ret <17 x float> %res
}

; Function Attrs: nounwind readonly willreturn
declare <2 x float> @llvm.masked.gather.v2f32.v2p0f32(<2 x float*>, i32 immarg, <2 x i1>, <2 x float>) #1

; Function Attrs: nounwind readonly willreturn
declare <6 x float> @llvm.masked.gather.v6f32.v6p0f32(<6 x float*>, i32 immarg, <6 x i1>, <6 x float>) #1

; Function Attrs: nounwind readonly willreturn
declare <8 x float> @llvm.masked.gather.v8f32.v8p0f32(<8 x float*>, i32 immarg, <8 x i1>, <8 x float>) #1

; Function Attrs: nounwind readonly willreturn
declare <17 x float> @llvm.masked.gather.v17f32.v17p0f32(<17 x float*>, i32 immarg, <17 x i1>, <17 x float>) #1

attributes #1 = { nounwind readonly willreturn }
