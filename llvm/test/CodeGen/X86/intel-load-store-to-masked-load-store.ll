; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=i686-linux  -enable-intel-advanced-opts=true -O3 -mattr=+avx512f,+avx512vl | FileCheck %s --check-prefix=X86-AVX512-VL
; RUN: llc < %s -mtriple=i686-linux  -enable-intel-advanced-opts=true -O3 -mattr=+avx512f,+avx512vl,+avx512bw | FileCheck %s --check-prefix=X86-AVX512-VL-BW
; RUN: llc < %s -mtriple=x86_64-apple-darwin  -enable-intel-advanced-opts=true -O3 -mattr=+avx512f,+avx512vl | FileCheck %s --check-prefix=X86_64-AVX512-VL
; RUN: llc < %s -mtriple=x86_64-apple-darwin  -enable-intel-advanced-opts=true -O3 -mattr=+avx512f,+avx512vl,+avx512bw | FileCheck %s --check-prefix=X86_64-AVX512-VL-BW

define void @float_1x(<1 x float>* %in, <1 x float>* %out) {
; X86-AVX512-VL-LABEL: float_1x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; X86-AVX512-VL-NEXT:    vmovss %xmm0, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: float_1x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; X86-AVX512-VL-BW-NEXT:    vmovss %xmm0, (%eax)
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: float_1x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; X86_64-AVX512-VL-NEXT:    vmovss %xmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: float_1x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; X86_64-AVX512-VL-BW-NEXT:    vmovss %xmm0, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <1 x float>, <1 x float>* %in
  store <1 x float> %val, <1 x float>* %out
  ret void
}

define void @float_2x(<2 x float>* %in, <2 x float>* %out) {
; X86-AVX512-VL-LABEL: float_2x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; X86-AVX512-VL-NEXT:    vmovsd %xmm0, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: float_2x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; X86-AVX512-VL-BW-NEXT:    vmovsd %xmm0, (%eax)
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: float_2x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; X86_64-AVX512-VL-NEXT:    vmovsd %xmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: float_2x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; X86_64-AVX512-VL-BW-NEXT:    vmovsd %xmm0, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <2 x float>, <2 x float>* %in
  store <2 x float> %val, <2 x float>* %out
  ret void
}

define void @float_3x(<3 x float>* %in, <3 x float>* %out) {
; X86-AVX512-VL-LABEL: float_3x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $7, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %xmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps %xmm0, (%eax) {%k1}
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: float_3x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $7, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %xmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps %xmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: float_3x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $7, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %xmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps %xmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: float_3x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $7, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %xmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %xmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <3 x float>, <3 x float>* %in
  store <3 x float> %val, <3 x float>* %out
  ret void
}

define void @float_4x(<4 x float>* %in, <4 x float>* %out) {
; X86-AVX512-VL-LABEL: float_4x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %xmm0
; X86-AVX512-VL-NEXT:    vmovaps %xmm0, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: float_4x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %xmm0
; X86-AVX512-VL-BW-NEXT:    vmovaps %xmm0, (%eax)
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: float_4x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %xmm0
; X86_64-AVX512-VL-NEXT:    vmovaps %xmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: float_4x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %xmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %xmm0, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <4 x float>, <4 x float>* %in
  store <4 x float> %val, <4 x float>* %out
  ret void
}

define void @float_5x(<5 x float>* %in, <5 x float>* %out) {
; X86-AVX512-VL-LABEL: float_5x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $31, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %ymm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps %ymm0, (%eax) {%k1}
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: float_5x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $31, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %ymm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps %ymm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: float_5x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $31, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %ymm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps %ymm0, (%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: float_5x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $31, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %ymm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %ymm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <5 x float>, <5 x float>* %in
  store <5 x float> %val, <5 x float>* %out
  ret void
}

define void @float_6x(<6 x float>* %in, <6 x float>* %out) {
; X86-AVX512-VL-LABEL: float_6x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $63, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %ymm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps %ymm0, (%eax) {%k1}
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: float_6x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $63, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %ymm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps %ymm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: float_6x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $63, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %ymm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps %ymm0, (%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: float_6x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $63, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %ymm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %ymm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <6 x float>, <6 x float>* %in
  store <6 x float> %val, <6 x float>* %out
  ret void
}

define void @float_7x(<7 x float>* %in, <7 x float>* %out) {
; X86-AVX512-VL-LABEL: float_7x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $127, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %ymm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps %ymm0, (%eax) {%k1}
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: float_7x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $127, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %ymm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps %ymm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: float_7x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $127, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %ymm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps %ymm0, (%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: float_7x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $127, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %ymm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %ymm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <7 x float>, <7 x float>* %in
  store <7 x float> %val, <7 x float>* %out
  ret void
}

define void @float_8x(<8 x float>* %in, <8 x float>* %out) {
; X86-AVX512-VL-LABEL: float_8x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %ymm0
; X86-AVX512-VL-NEXT:    vmovaps %ymm0, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: float_8x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %ymm0
; X86-AVX512-VL-BW-NEXT:    vmovaps %ymm0, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: float_8x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %ymm0
; X86_64-AVX512-VL-NEXT:    vmovaps %ymm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: float_8x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %ymm0
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %ymm0, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <8 x float>, <8 x float>* %in
  store <8 x float> %val, <8 x float>* %out
  ret void
}

define void @float_9x(<9 x float>* %in, <9 x float>* %out) {
; X86-AVX512-VL-LABEL: float_9x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movw $511, %dx # imm = 0x1FF
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, (%eax) {%k1}
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: float_9x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $511, %dx # imm = 0x1FF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: float_9x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movw $511, %ax ## imm = 0x1FF
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: float_9x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $511, %ax ## imm = 0x1FF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <9 x float>, <9 x float>* %in
  store <9 x float> %val, <9 x float>* %out
  ret void
}

define void @float_10x(<10 x float>* %in, <10 x float>* %out) {
; X86-AVX512-VL-LABEL: float_10x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movw $1023, %dx # imm = 0x3FF
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, (%eax) {%k1}
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: float_10x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $1023, %dx # imm = 0x3FF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: float_10x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movw $1023, %ax ## imm = 0x3FF
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: float_10x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $1023, %ax ## imm = 0x3FF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <10 x float>, <10 x float>* %in
  store <10 x float> %val, <10 x float>* %out
  ret void
}

define void @float_11x(<11 x float>* %in, <11 x float>* %out) {
; X86-AVX512-VL-LABEL: float_11x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movw $2047, %dx # imm = 0x7FF
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, (%eax) {%k1}
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: float_11x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $2047, %dx # imm = 0x7FF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: float_11x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movw $2047, %ax ## imm = 0x7FF
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: float_11x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $2047, %ax ## imm = 0x7FF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <11 x float>, <11 x float>* %in
  store <11 x float> %val, <11 x float>* %out
  ret void
}

define void @float_12x(<12 x float>* %in, <12 x float>* %out) {
; X86-AVX512-VL-LABEL: float_12x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movw $4095, %dx # imm = 0xFFF
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, (%eax) {%k1}
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: float_12x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $4095, %dx # imm = 0xFFF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: float_12x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movw $4095, %ax ## imm = 0xFFF
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: float_12x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $4095, %ax ## imm = 0xFFF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <12 x float>, <12 x float>* %in
  store <12 x float> %val, <12 x float>* %out
  ret void
}

define void @float_13x(<13 x float>* %in, <13 x float>* %out) {
; X86-AVX512-VL-LABEL: float_13x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movw $8191, %dx # imm = 0x1FFF
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, (%eax) {%k1}
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: float_13x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $8191, %dx # imm = 0x1FFF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: float_13x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movw $8191, %ax ## imm = 0x1FFF
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: float_13x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $8191, %ax ## imm = 0x1FFF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <13 x float>, <13 x float>* %in
  store <13 x float> %val, <13 x float>* %out
  ret void
}

define void @float_14x(<14 x float>* %in, <14 x float>* %out) {
; X86-AVX512-VL-LABEL: float_14x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movw $16383, %dx # imm = 0x3FFF
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, (%eax) {%k1}
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: float_14x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $16383, %dx # imm = 0x3FFF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: float_14x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movw $16383, %ax ## imm = 0x3FFF
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: float_14x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $16383, %ax ## imm = 0x3FFF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <14 x float>, <14 x float>* %in
  store <14 x float> %val, <14 x float>* %out
  ret void
}

define void @float_15x(<15 x float>* %in, <15 x float>* %out) {
; X86-AVX512-VL-LABEL: float_15x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movw $32767, %dx # imm = 0x7FFF
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, (%eax) {%k1}
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: float_15x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $32767, %dx # imm = 0x7FFF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: float_15x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movw $32767, %ax ## imm = 0x7FFF
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: float_15x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $32767, %ax ## imm = 0x7FFF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <15 x float>, <15 x float>* %in
  store <15 x float> %val, <15 x float>* %out
  ret void
}

define void @float_16x(<16 x float>* %in, <16 x float>* %out) {
; X86-AVX512-VL-LABEL: float_16x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: float_16x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: float_16x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: float_16x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <16 x float>, <16 x float>* %in
  store <16 x float> %val, <16 x float>* %out
  ret void
}

define void @float_17x(<17 x float>* %in, <17 x float>* %out) {
; X86-AVX512-VL-LABEL: float_17x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movw $1, %dx
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: float_17x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $1, %dx
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovaps 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: float_17x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movw $1, %ax
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: float_17x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $1, %ax
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <17 x float>, <17 x float>* %in
  store <17 x float> %val, <17 x float>* %out
  ret void
}

define void @float_18x(<18 x float>* %in, <18 x float>* %out) {
; X86-AVX512-VL-LABEL: float_18x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movw $3, %dx
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: float_18x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $3, %dx
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovaps 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: float_18x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movw $3, %ax
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: float_18x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $3, %ax
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <18 x float>, <18 x float>* %in
  store <18 x float> %val, <18 x float>* %out
  ret void
}

define void @float_30x(<30 x float>* %in, <30 x float>* %out) {
; X86-AVX512-VL-LABEL: float_30x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movw $16383, %dx # imm = 0x3FFF
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: float_30x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $16383, %dx # imm = 0x3FFF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovaps 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: float_30x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movw $16383, %ax ## imm = 0x3FFF
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: float_30x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $16383, %ax ## imm = 0x3FFF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <30 x float>, <30 x float>* %in
  store <30 x float> %val, <30 x float>* %out
  ret void
}

define void @float_31x(<31 x float>* %in, <31 x float>* %out) {
; X86-AVX512-VL-LABEL: float_31x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movw $32767, %dx # imm = 0x7FFF
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: float_31x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $32767, %dx # imm = 0x7FFF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovaps 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: float_31x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movw $32767, %ax ## imm = 0x7FFF
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: float_31x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $32767, %ax ## imm = 0x7FFF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <31 x float>, <31 x float>* %in
  store <31 x float> %val, <31 x float>* %out
  ret void
}

define void @float_32x(<32 x float>* %in, <32 x float>* %out) {
; X86-AVX512-VL-LABEL: float_32x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, (%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, 64(%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: float_32x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovaps 64(%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, 64(%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: float_32x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, 64(%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: float_32x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 64(%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, 64(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <32 x float>, <32 x float>* %in
  store <32 x float> %val, <32 x float>* %out
  ret void
}

define void @float_33x(<33 x float>* %in, <33 x float>* %out) {
; X86-AVX512-VL-LABEL: float_33x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movw $1, %dx
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovaps 128(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm2
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 128(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm2, 64(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: float_33x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $1, %dx
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovaps 128(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovaps 64(%ecx), %zmm2
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 128(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 64(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: float_33x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movw $1, %ax
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovaps 128(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 128(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: float_33x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $1, %ax
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 128(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 128(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <33 x float>, <33 x float>* %in
  store <33 x float> %val, <33 x float>* %out
  ret void
}

define void @float_34x(<34 x float>* %in, <34 x float>* %out) {
; X86-AVX512-VL-LABEL: float_34x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movw $3, %dx
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovaps 128(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm2
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 128(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm2, 64(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: float_34x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $3, %dx
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovaps 128(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovaps 64(%ecx), %zmm2
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 128(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 64(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: float_34x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movw $3, %ax
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovaps 128(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 128(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: float_34x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $3, %ax
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 128(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 128(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <34 x float>, <34 x float>* %in
  store <34 x float> %val, <34 x float>* %out
  ret void
}

define void @float_48x(<48 x float>* %in, <48 x float>* %out) {
; X86-AVX512-VL-LABEL: float_48x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps 128(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm2
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm2, 64(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 128(%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: float_48x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    vmovaps 128(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovaps 64(%ecx), %zmm2
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 64(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 128(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: float_48x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps 128(%rdi), %zmm2
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, 64(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm2, 128(%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: float_48x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 64(%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 128(%rdi), %zmm2
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, 64(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 128(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <48 x float>, <48 x float>* %in
  store <48 x float> %val, <48 x float>* %out
  ret void
}

define void @float_49x(<49 x float>* %in, <49 x float>* %out) {
; X86-AVX512-VL-LABEL: float_49x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movw $1, %dx
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovaps 192(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps 128(%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm2
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm3
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 192(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm2, (%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm3, 64(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, 128(%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: float_49x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $1, %dx
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovaps 192(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps 128(%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm2
; X86-AVX512-VL-BW-NEXT:    vmovaps 64(%ecx), %zmm3
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 192(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm3, 64(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, 128(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm2, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: float_49x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movw $1, %ax
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovaps 192(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-NEXT:    vmovaps 128(%rdi), %zmm3
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 192(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm3, 128(%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: float_49x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $1, %ax
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 192(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 128(%rdi), %zmm3
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 192(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm3, 128(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <49 x float>, <49 x float>* %in
  store <49 x float> %val, <49 x float>* %out
  ret void
}

define void @double_1x(<1 x double>* %in, <1 x double>* %out) {
; X86-AVX512-VL-LABEL: double_1x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; X86-AVX512-VL-NEXT:    vmovsd %xmm0, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: double_1x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; X86-AVX512-VL-BW-NEXT:    vmovsd %xmm0, (%eax)
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: double_1x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; X86_64-AVX512-VL-NEXT:    vmovsd %xmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: double_1x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; X86_64-AVX512-VL-BW-NEXT:    vmovsd %xmm0, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <1 x double>, <1 x double>* %in
  store <1 x double> %val, <1 x double>* %out
  ret void
}

define void @double_2x(<2 x double>* %in, <2 x double>* %out) {
; X86-AVX512-VL-LABEL: double_2x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %xmm0
; X86-AVX512-VL-NEXT:    vmovaps %xmm0, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: double_2x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %xmm0
; X86-AVX512-VL-BW-NEXT:    vmovaps %xmm0, (%eax)
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: double_2x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %xmm0
; X86_64-AVX512-VL-NEXT:    vmovaps %xmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: double_2x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %xmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %xmm0, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <2 x double>, <2 x double>* %in
  store <2 x double> %val, <2 x double>* %out
  ret void
}

define void @double_3x(<3 x double>* %in, <3 x double>* %out) {
; X86-AVX512-VL-LABEL: double_3x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $7, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovapd (%ecx), %ymm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovapd %ymm0, (%eax) {%k1}
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: double_3x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $7, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovapd (%ecx), %ymm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovapd %ymm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: double_3x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $7, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovapd (%rdi), %ymm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovapd %ymm0, (%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: double_3x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $7, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovapd (%rdi), %ymm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovapd %ymm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <3 x double>, <3 x double>* %in
  store <3 x double> %val, <3 x double>* %out
  ret void
}

define void @double_4x(<4 x double>* %in, <4 x double>* %out) {
; X86-AVX512-VL-LABEL: double_4x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %ymm0
; X86-AVX512-VL-NEXT:    vmovaps %ymm0, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: double_4x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %ymm0
; X86-AVX512-VL-BW-NEXT:    vmovaps %ymm0, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: double_4x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %ymm0
; X86_64-AVX512-VL-NEXT:    vmovaps %ymm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: double_4x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %ymm0
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %ymm0, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <4 x double>, <4 x double>* %in
  store <4 x double> %val, <4 x double>* %out
  ret void
}

define void @double_5x(<5 x double>* %in, <5 x double>* %out) {
; X86-AVX512-VL-LABEL: double_5x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $31, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovapd (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovapd %zmm0, (%eax) {%k1}
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: double_5x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $31, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovapd (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovapd %zmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: double_5x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $31, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovapd (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovapd %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: double_5x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $31, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovapd (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovapd %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <5 x double>, <5 x double>* %in
  store <5 x double> %val, <5 x double>* %out
  ret void
}

define void @double_6x(<6 x double>* %in, <6 x double>* %out) {
; X86-AVX512-VL-LABEL: double_6x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $63, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovapd (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovapd %zmm0, (%eax) {%k1}
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: double_6x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $63, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovapd (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovapd %zmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: double_6x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $63, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovapd (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovapd %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: double_6x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $63, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovapd (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovapd %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <6 x double>, <6 x double>* %in
  store <6 x double> %val, <6 x double>* %out
  ret void
}

define void @double_7x(<7 x double>* %in, <7 x double>* %out) {
; X86-AVX512-VL-LABEL: double_7x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $127, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovapd (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovapd %zmm0, (%eax) {%k1}
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: double_7x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $127, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovapd (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovapd %zmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: double_7x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $127, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovapd (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovapd %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: double_7x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $127, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovapd (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovapd %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <7 x double>, <7 x double>* %in
  store <7 x double> %val, <7 x double>* %out
  ret void
}

define void @double_8x(<8 x double>* %in, <8 x double>* %out) {
; X86-AVX512-VL-LABEL: double_8x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: double_8x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: double_8x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: double_8x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <8 x double>, <8 x double>* %in
  store <8 x double> %val, <8 x double>* %out
  ret void
}

define void @double_9x(<9 x double>* %in, <9 x double>* %out) {
; X86-AVX512-VL-LABEL: double_9x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $1, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovapd 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovapd %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: double_9x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $1, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovapd 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovapd %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: double_9x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $1, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovapd 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovapd %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: double_9x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $1, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovapd 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovapd %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <9 x double>, <9 x double>* %in
  store <9 x double> %val, <9 x double>* %out
  ret void
}

define void @double_10x(<10 x double>* %in, <10 x double>* %out) {
; X86-AVX512-VL-LABEL: double_10x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $3, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovapd 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovapd %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: double_10x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $3, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovapd 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovapd %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: double_10x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $3, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovapd 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovapd %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: double_10x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $3, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovapd 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovapd %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <10 x double>, <10 x double>* %in
  store <10 x double> %val, <10 x double>* %out
  ret void
}

define void @double_11x(<11 x double>* %in, <11 x double>* %out) {
; X86-AVX512-VL-LABEL: double_11x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $7, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovapd 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovapd %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: double_11x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $7, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovapd 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovapd %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: double_11x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $7, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovapd 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovapd %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: double_11x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $7, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovapd 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovapd %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <11 x double>, <11 x double>* %in
  store <11 x double> %val, <11 x double>* %out
  ret void
}

define void @double_12x(<12 x double>* %in, <12 x double>* %out) {
; X86-AVX512-VL-LABEL: double_12x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $15, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovapd 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovapd %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: double_12x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $15, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovapd 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovapd %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: double_12x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $15, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovapd 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovapd %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: double_12x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $15, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovapd 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovapd %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <12 x double>, <12 x double>* %in
  store <12 x double> %val, <12 x double>* %out
  ret void
}

define void @double_13x(<13 x double>* %in, <13 x double>* %out) {
; X86-AVX512-VL-LABEL: double_13x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $31, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovapd 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovapd %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: double_13x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $31, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovapd 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovapd %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: double_13x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $31, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovapd 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovapd %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: double_13x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $31, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovapd 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovapd %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <13 x double>, <13 x double>* %in
  store <13 x double> %val, <13 x double>* %out
  ret void
}

define void @double_14x(<14 x double>* %in, <14 x double>* %out) {
; X86-AVX512-VL-LABEL: double_14x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $63, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovapd 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovapd %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: double_14x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $63, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovapd 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovapd %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: double_14x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $63, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovapd 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovapd %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: double_14x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $63, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovapd 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovapd %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <14 x double>, <14 x double>* %in
  store <14 x double> %val, <14 x double>* %out
  ret void
}

define void @double_15x(<15 x double>* %in, <15 x double>* %out) {
; X86-AVX512-VL-LABEL: double_15x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $127, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovapd 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovapd %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: double_15x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $127, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovapd 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovapd %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: double_15x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $127, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovapd 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovapd %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: double_15x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $127, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovapd 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovapd %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <15 x double>, <15 x double>* %in
  store <15 x double> %val, <15 x double>* %out
  ret void
}

define void @double_16x(<16 x double>* %in, <16 x double>* %out) {
; X86-AVX512-VL-LABEL: double_16x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, (%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, 64(%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: double_16x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovaps 64(%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, 64(%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: double_16x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, 64(%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: double_16x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 64(%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, 64(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <16 x double>, <16 x double>* %in
  store <16 x double> %val, <16 x double>* %out
  ret void
}

define void @double_17x(<17 x double>* %in, <17 x double>* %out) {
; X86-AVX512-VL-LABEL: double_17x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $1, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovapd 128(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm2
; X86-AVX512-VL-NEXT:    vmovapd %zmm0, 128(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm2, 64(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: double_17x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $1, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovapd 128(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovaps 64(%ecx), %zmm2
; X86-AVX512-VL-BW-NEXT:    vmovapd %zmm0, 128(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 64(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: double_17x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $1, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovapd 128(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-NEXT:    vmovapd %zmm0, 128(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: double_17x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $1, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovapd 128(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-BW-NEXT:    vmovapd %zmm0, 128(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <17 x double>, <17 x double>* %in
  store <17 x double> %val, <17 x double>* %out
  ret void
}

define void @double_18x(<18 x double>* %in, <18 x double>* %out) {
; X86-AVX512-VL-LABEL: double_18x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $3, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovapd 128(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm2
; X86-AVX512-VL-NEXT:    vmovapd %zmm0, 128(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm2, 64(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: double_18x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $3, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovapd 128(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovaps 64(%ecx), %zmm2
; X86-AVX512-VL-BW-NEXT:    vmovapd %zmm0, 128(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 64(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: double_18x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $3, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovapd 128(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-NEXT:    vmovapd %zmm0, 128(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: double_18x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $3, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovapd 128(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-BW-NEXT:    vmovapd %zmm0, 128(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <18 x double>, <18 x double>* %in
  store <18 x double> %val, <18 x double>* %out
  ret void
}

define void @double_31x(<31 x double>* %in, <31 x double>* %out) {
; X86-AVX512-VL-LABEL: double_31x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $127, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovapd 192(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps 128(%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm2
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm3
; X86-AVX512-VL-NEXT:    vmovapd %zmm0, 192(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm2, (%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm3, 64(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, 128(%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: double_31x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $127, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovapd 192(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps 128(%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm2
; X86-AVX512-VL-BW-NEXT:    vmovaps 64(%ecx), %zmm3
; X86-AVX512-VL-BW-NEXT:    vmovapd %zmm0, 192(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm3, 64(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, 128(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm2, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: double_31x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $127, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovapd 192(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-NEXT:    vmovaps 128(%rdi), %zmm3
; X86_64-AVX512-VL-NEXT:    vmovapd %zmm0, 192(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm3, 128(%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: double_31x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $127, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovapd 192(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 128(%rdi), %zmm3
; X86_64-AVX512-VL-BW-NEXT:    vmovapd %zmm0, 192(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm3, 128(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <31 x double>, <31 x double>* %in
  store <31 x double> %val, <31 x double>* %out
  ret void
}

define void @double_32x(<32 x double>* %in, <32 x double>* %out) {
; X86-AVX512-VL-LABEL: double_32x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps 192(%ecx), %zmm2
; X86-AVX512-VL-NEXT:    vmovaps 128(%ecx), %zmm3
; X86-AVX512-VL-NEXT:    vmovaps %zmm3, 128(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm2, 192(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, (%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, 64(%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: double_32x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovaps 64(%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovaps 192(%ecx), %zmm2
; X86-AVX512-VL-BW-NEXT:    vmovaps 128(%ecx), %zmm3
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm3, 128(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 192(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, 64(%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: double_32x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps 128(%rdi), %zmm2
; X86_64-AVX512-VL-NEXT:    vmovaps 192(%rdi), %zmm3
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm2, 128(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm3, 192(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, 64(%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: double_32x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 64(%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 128(%rdi), %zmm2
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 192(%rdi), %zmm3
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 128(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm3, 192(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, 64(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <32 x double>, <32 x double>* %in
  store <32 x double> %val, <32 x double>* %out
  ret void
}

define void @double_33x(<33 x double>* %in, <33 x double>* %out) {
; X86-AVX512-VL-LABEL: double_33x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $1, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovapd 256(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps 128(%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps 192(%ecx), %zmm2
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm3
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm4
; X86-AVX512-VL-NEXT:    vmovapd %zmm0, 256(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm3, (%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm4, 64(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm2, 192(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, 128(%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: double_33x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $1, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovapd 256(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovaps 64(%ecx), %zmm2
; X86-AVX512-VL-BW-NEXT:    vmovaps 128(%ecx), %zmm3
; X86-AVX512-VL-BW-NEXT:    vmovaps 192(%ecx), %zmm4
; X86-AVX512-VL-BW-NEXT:    vmovapd %zmm0, 256(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm4, 192(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm3, 128(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 64(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: double_33x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $1, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovapd 256(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-NEXT:    vmovaps 128(%rdi), %zmm3
; X86_64-AVX512-VL-NEXT:    vmovaps 192(%rdi), %zmm4
; X86_64-AVX512-VL-NEXT:    vmovapd %zmm0, 256(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm4, 192(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm3, 128(%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: double_33x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $1, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovapd 256(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 128(%rdi), %zmm3
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 192(%rdi), %zmm4
; X86_64-AVX512-VL-BW-NEXT:    vmovapd %zmm0, 256(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm4, 192(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm3, 128(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <33 x double>, <33 x double>* %in
  store <33 x double> %val, <33 x double>* %out
  ret void
}

define void @double_34x(<34 x double>* %in, <34 x double>* %out) {
; X86-AVX512-VL-LABEL: double_34x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $3, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovapd 256(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps 128(%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps 192(%ecx), %zmm2
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm3
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm4
; X86-AVX512-VL-NEXT:    vmovapd %zmm0, 256(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm3, (%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm4, 64(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm2, 192(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, 128(%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: double_34x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $3, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovapd 256(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovaps 64(%ecx), %zmm2
; X86-AVX512-VL-BW-NEXT:    vmovaps 128(%ecx), %zmm3
; X86-AVX512-VL-BW-NEXT:    vmovaps 192(%ecx), %zmm4
; X86-AVX512-VL-BW-NEXT:    vmovapd %zmm0, 256(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm4, 192(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm3, 128(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 64(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: double_34x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $3, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovapd 256(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-NEXT:    vmovaps 128(%rdi), %zmm3
; X86_64-AVX512-VL-NEXT:    vmovaps 192(%rdi), %zmm4
; X86_64-AVX512-VL-NEXT:    vmovapd %zmm0, 256(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm4, 192(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm3, 128(%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: double_34x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $3, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovapd 256(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 128(%rdi), %zmm3
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 192(%rdi), %zmm4
; X86_64-AVX512-VL-BW-NEXT:    vmovapd %zmm0, 256(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm4, 192(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm3, 128(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <34 x double>, <34 x double>* %in
  store <34 x double> %val, <34 x double>* %out
  ret void
}

define void @double_48x(<48 x double>* %in, <48 x double>* %out) {
; X86-AVX512-VL-LABEL: double_48x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps 256(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovaps 192(%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm2
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm3
; X86-AVX512-VL-NEXT:    vmovaps 320(%ecx), %zmm4
; X86-AVX512-VL-NEXT:    vmovaps 128(%ecx), %zmm5
; X86-AVX512-VL-NEXT:    vmovaps %zmm5, 128(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm4, 320(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm2, (%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, 192(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm3, 64(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 256(%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: double_48x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    vmovaps 256(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovaps 128(%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm2
; X86-AVX512-VL-BW-NEXT:    vmovaps 64(%ecx), %zmm3
; X86-AVX512-VL-BW-NEXT:    vmovaps 192(%ecx), %zmm4
; X86-AVX512-VL-BW-NEXT:    vmovaps 320(%ecx), %zmm5
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm5, 320(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm4, 192(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm3, 64(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, 128(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 256(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm2, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: double_48x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps 256(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovaps 320(%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm2
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm3
; X86_64-AVX512-VL-NEXT:    vmovaps 128(%rdi), %zmm4
; X86_64-AVX512-VL-NEXT:    vmovaps 192(%rdi), %zmm5
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm4, 128(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, 320(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm2, (%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm5, 192(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm3, 64(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 256(%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: double_48x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 256(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 128(%rdi), %zmm3
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 192(%rdi), %zmm4
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 320(%rdi), %zmm5
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm5, 320(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm4, 192(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm3, 128(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 256(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <48 x double>, <48 x double>* %in
  store <48 x double> %val, <48 x double>* %out
  ret void
}

define void @double_49x(<49 x double>* %in, <49 x double>* %out) {
; X86-AVX512-VL-LABEL: double_49x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $1, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovapd 384(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps 256(%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps 192(%ecx), %zmm2
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm3
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm4
; X86-AVX512-VL-NEXT:    vmovaps 320(%ecx), %zmm5
; X86-AVX512-VL-NEXT:    vmovaps 128(%ecx), %zmm6
; X86-AVX512-VL-NEXT:    vmovapd %zmm0, 384(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm6, 128(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm5, 320(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm3, (%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm2, 192(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm4, 64(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, 256(%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: double_49x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $1, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovapd 384(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps 256(%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovaps 128(%ecx), %zmm2
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm3
; X86-AVX512-VL-BW-NEXT:    vmovaps 64(%ecx), %zmm4
; X86-AVX512-VL-BW-NEXT:    vmovaps 192(%ecx), %zmm5
; X86-AVX512-VL-BW-NEXT:    vmovaps 320(%ecx), %zmm6
; X86-AVX512-VL-BW-NEXT:    vmovapd %zmm0, 384(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm6, 320(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm5, 192(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm4, 64(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 128(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, 256(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm3, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: double_49x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $1, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovapd 384(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps 256(%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps 320(%rdi), %zmm2
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm3
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm4
; X86_64-AVX512-VL-NEXT:    vmovaps 128(%rdi), %zmm5
; X86_64-AVX512-VL-NEXT:    vmovaps 192(%rdi), %zmm6
; X86_64-AVX512-VL-NEXT:    vmovapd %zmm0, 384(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm5, 128(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm2, 320(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm3, (%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm6, 192(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm4, 64(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, 256(%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: double_49x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $1, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovapd 384(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 256(%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm2
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 64(%rdi), %zmm3
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 128(%rdi), %zmm4
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 192(%rdi), %zmm5
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 320(%rdi), %zmm6
; X86_64-AVX512-VL-BW-NEXT:    vmovapd %zmm0, 384(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm6, 320(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm5, 192(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm3, 64(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm4, 128(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, 256(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm2, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <49 x double>, <49 x double>* %in
  store <49 x double> %val, <49 x double>* %out
  ret void
}


define void @i8_1x(<1 x i8>* %in, <1 x i8>* %out) {
; X86-AVX512-VL-LABEL: i8_1x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb (%ecx), %cl
; X86-AVX512-VL-NEXT:    movb %cl, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i8_1x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb (%ecx), %cl
; X86-AVX512-VL-BW-NEXT:    movb %cl, (%eax)
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i8_1x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb (%rdi), %al
; X86_64-AVX512-VL-NEXT:    movb %al, (%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i8_1x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb (%rdi), %al
; X86_64-AVX512-VL-BW-NEXT:    movb %al, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <1 x i8>, <1 x i8>* %in
  store <1 x i8> %val, <1 x i8>* %out
  ret void
}

define void @i8_2x(<2 x i8>* %in, <2 x i8>* %out) {
; X86-AVX512-VL-LABEL: i8_2x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movzwl (%ecx), %ecx
; X86-AVX512-VL-NEXT:    movw %cx, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i8_2x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movzwl (%ecx), %ecx
; X86-AVX512-VL-BW-NEXT:    movw %cx, (%eax)
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i8_2x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movzwl (%rdi), %eax
; X86_64-AVX512-VL-NEXT:    movw %ax, (%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i8_2x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movzwl (%rdi), %eax
; X86_64-AVX512-VL-BW-NEXT:    movw %ax, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <2 x i8>, <2 x i8>* %in
  store <2 x i8> %val, <2 x i8>* %out
  ret void
}

define void @i8_3x(<3 x i8>* %in, <3 x i8>* %out) {
; X86-AVX512-VL-LABEL: i8_3x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movl (%ecx), %ecx
; X86-AVX512-VL-NEXT:    movw %cx, (%eax)
; X86-AVX512-VL-NEXT:    shrl $16, %ecx
; X86-AVX512-VL-NEXT:    movb %cl, 2(%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i8_3x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $7, %dx
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 (%ecx), %xmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 %xmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i8_3x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movl (%rdi), %eax
; X86_64-AVX512-VL-NEXT:    movw %ax, (%rsi)
; X86_64-AVX512-VL-NEXT:    shrl $16, %eax
; X86_64-AVX512-VL-NEXT:    movb %al, 2(%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i8_3x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $7, %ax
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 (%rdi), %xmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 %xmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <3 x i8>, <3 x i8>* %in
  store <3 x i8> %val, <3 x i8>* %out
  ret void
}

define void @i8_4x(<4 x i8>* %in, <4 x i8>* %out) {
; X86-AVX512-VL-LABEL: i8_4x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movl (%ecx), %ecx
; X86-AVX512-VL-NEXT:    movl %ecx, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i8_4x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movl (%ecx), %ecx
; X86-AVX512-VL-BW-NEXT:    movl %ecx, (%eax)
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i8_4x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movl (%rdi), %eax
; X86_64-AVX512-VL-NEXT:    movl %eax, (%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i8_4x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movl (%rdi), %eax
; X86_64-AVX512-VL-BW-NEXT:    movl %eax, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <4 x i8>, <4 x i8>* %in
  store <4 x i8> %val, <4 x i8>* %out
  ret void
}

define void @i8_5x(<5 x i8>* %in, <5 x i8>* %out) {
; X86-AVX512-VL-LABEL: i8_5x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movl (%ecx), %edx
; X86-AVX512-VL-NEXT:    movb 4(%ecx), %cl
; X86-AVX512-VL-NEXT:    movb %cl, 4(%eax)
; X86-AVX512-VL-NEXT:    movl %edx, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i8_5x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $31, %dx
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 (%ecx), %xmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 %xmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i8_5x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movq (%rdi), %rax
; X86_64-AVX512-VL-NEXT:    movl %eax, (%rsi)
; X86_64-AVX512-VL-NEXT:    shrq $32, %rax
; X86_64-AVX512-VL-NEXT:    movb %al, 4(%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i8_5x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $31, %ax
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 (%rdi), %xmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 %xmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <5 x i8>, <5 x i8>* %in
  store <5 x i8> %val, <5 x i8>* %out
  ret void
}

define void @i8_6x(<6 x i8>* %in, <6 x i8>* %out) {
; X86-AVX512-VL-LABEL: i8_6x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vpbroadcastd 4(%ecx), %xmm0
; X86-AVX512-VL-NEXT:    movl (%ecx), %ecx
; X86-AVX512-VL-NEXT:    movl %ecx, (%eax)
; X86-AVX512-VL-NEXT:    vpextrw $2, %xmm0, 4(%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i8_6x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $63, %dx
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 (%ecx), %xmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 %xmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i8_6x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movq (%rdi), %rax
; X86_64-AVX512-VL-NEXT:    movl %eax, (%rsi)
; X86_64-AVX512-VL-NEXT:    shrq $32, %rax
; X86_64-AVX512-VL-NEXT:    movw %ax, 4(%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i8_6x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $63, %ax
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 (%rdi), %xmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 %xmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <6 x i8>, <6 x i8>* %in
  store <6 x i8> %val, <6 x i8>* %out
  ret void
}

define void @i8_7x(<7 x i8>* %in, <7 x i8>* %out) {
; X86-AVX512-VL-LABEL: i8_7x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movl (%ecx), %edx
; X86-AVX512-VL-NEXT:    vmovd %edx, %xmm0
; X86-AVX512-VL-NEXT:    vpinsrd $1, 4(%ecx), %xmm0, %xmm0
; X86-AVX512-VL-NEXT:    movl %edx, (%eax)
; X86-AVX512-VL-NEXT:    vpextrb $6, %xmm0, 6(%eax)
; X86-AVX512-VL-NEXT:    vpextrw $2, %xmm0, 4(%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i8_7x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $127, %dx
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 (%ecx), %xmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 %xmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i8_7x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movq (%rdi), %rax
; X86_64-AVX512-VL-NEXT:    movl %eax, (%rsi)
; X86_64-AVX512-VL-NEXT:    movq %rax, %rcx
; X86_64-AVX512-VL-NEXT:    shrq $48, %rcx
; X86_64-AVX512-VL-NEXT:    movb %cl, 6(%rsi)
; X86_64-AVX512-VL-NEXT:    shrq $32, %rax
; X86_64-AVX512-VL-NEXT:    movw %ax, 4(%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i8_7x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $127, %ax
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 (%rdi), %xmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 %xmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <7 x i8>, <7 x i8>* %in
  store <7 x i8> %val, <7 x i8>* %out
  ret void
}

define void @i8_8x(<8 x i8>* %in, <8 x i8>* %out) {
; X86-AVX512-VL-LABEL: i8_8x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; X86-AVX512-VL-NEXT:    vmovsd %xmm0, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i8_8x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; X86-AVX512-VL-BW-NEXT:    vmovsd %xmm0, (%eax)
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i8_8x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movq (%rdi), %rax
; X86_64-AVX512-VL-NEXT:    movq %rax, (%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i8_8x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movq (%rdi), %rax
; X86_64-AVX512-VL-BW-NEXT:    movq %rax, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <8 x i8>, <8 x i8>* %in
  store <8 x i8> %val, <8 x i8>* %out
  ret void
}

define void @i8_9x(<9 x i8>* %in, <9 x i8>* %out) {
; X86-AVX512-VL-LABEL: i8_9x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovdqa (%ecx), %xmm0
; X86-AVX512-VL-NEXT:    vpextrb $8, %xmm0, 8(%eax)
; X86-AVX512-VL-NEXT:    vpextrd $1, %xmm0, 4(%eax)
; X86-AVX512-VL-NEXT:    vmovd %xmm0, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i8_9x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $511, %dx # imm = 0x1FF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 (%ecx), %xmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 %xmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i8_9x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovdqa (%rdi), %xmm0
; X86_64-AVX512-VL-NEXT:    vpextrb $8, %xmm0, 8(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovq %xmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i8_9x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $511, %ax ## imm = 0x1FF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 (%rdi), %xmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 %xmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <9 x i8>, <9 x i8>* %in
  store <9 x i8> %val, <9 x i8>* %out
  ret void
}

define void @i8_10x(<10 x i8>* %in, <10 x i8>* %out) {
; X86-AVX512-VL-LABEL: i8_10x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovdqa (%ecx), %xmm0
; X86-AVX512-VL-NEXT:    vpextrw $4, %xmm0, 8(%eax)
; X86-AVX512-VL-NEXT:    vpextrd $1, %xmm0, 4(%eax)
; X86-AVX512-VL-NEXT:    vmovd %xmm0, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i8_10x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $1023, %dx # imm = 0x3FF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 (%ecx), %xmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 %xmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i8_10x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovdqa (%rdi), %xmm0
; X86_64-AVX512-VL-NEXT:    vpextrw $4, %xmm0, 8(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovq %xmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i8_10x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $1023, %ax ## imm = 0x3FF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 (%rdi), %xmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 %xmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <10 x i8>, <10 x i8>* %in
  store <10 x i8> %val, <10 x i8>* %out
  ret void
}

define void @i8_11x(<11 x i8>* %in, <11 x i8>* %out) {
; X86-AVX512-VL-LABEL: i8_11x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovdqa (%ecx), %xmm0
; X86-AVX512-VL-NEXT:    vpextrb $10, %xmm0, 10(%eax)
; X86-AVX512-VL-NEXT:    vpextrw $4, %xmm0, 8(%eax)
; X86-AVX512-VL-NEXT:    vpextrd $1, %xmm0, 4(%eax)
; X86-AVX512-VL-NEXT:    vmovd %xmm0, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i8_11x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $2047, %dx # imm = 0x7FF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 (%ecx), %xmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 %xmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i8_11x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovdqa (%rdi), %xmm0
; X86_64-AVX512-VL-NEXT:    vpextrb $10, %xmm0, 10(%rsi)
; X86_64-AVX512-VL-NEXT:    vpextrw $4, %xmm0, 8(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovq %xmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i8_11x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $2047, %ax ## imm = 0x7FF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 (%rdi), %xmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 %xmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <11 x i8>, <11 x i8>* %in
  store <11 x i8> %val, <11 x i8>* %out
  ret void
}

define void @i8_12x(<12 x i8>* %in, <12 x i8>* %out) {
; X86-AVX512-VL-LABEL: i8_12x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %xmm0
; X86-AVX512-VL-NEXT:    vextractps $2, %xmm0, 8(%eax)
; X86-AVX512-VL-NEXT:    vextractps $1, %xmm0, 4(%eax)
; X86-AVX512-VL-NEXT:    vmovss %xmm0, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i8_12x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $4095, %dx # imm = 0xFFF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 (%ecx), %xmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 %xmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i8_12x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %xmm0
; X86_64-AVX512-VL-NEXT:    vextractps $2, %xmm0, 8(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovlps %xmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i8_12x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $4095, %ax ## imm = 0xFFF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 (%rdi), %xmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 %xmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <12 x i8>, <12 x i8>* %in
  store <12 x i8> %val, <12 x i8>* %out
  ret void
}

define void @i8_13x(<13 x i8>* %in, <13 x i8>* %out) {
; X86-AVX512-VL-LABEL: i8_13x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovdqa (%ecx), %xmm0
; X86-AVX512-VL-NEXT:    vpextrb $12, %xmm0, 12(%eax)
; X86-AVX512-VL-NEXT:    vpextrd $2, %xmm0, 8(%eax)
; X86-AVX512-VL-NEXT:    vpextrd $1, %xmm0, 4(%eax)
; X86-AVX512-VL-NEXT:    vmovd %xmm0, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i8_13x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $8191, %dx # imm = 0x1FFF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 (%ecx), %xmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 %xmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i8_13x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovdqa (%rdi), %xmm0
; X86_64-AVX512-VL-NEXT:    vpextrb $12, %xmm0, 12(%rsi)
; X86_64-AVX512-VL-NEXT:    vpextrd $2, %xmm0, 8(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovq %xmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i8_13x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $8191, %ax ## imm = 0x1FFF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 (%rdi), %xmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 %xmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <13 x i8>, <13 x i8>* %in
  store <13 x i8> %val, <13 x i8>* %out
  ret void
}

define void @i8_14x(<14 x i8>* %in, <14 x i8>* %out) {
; X86-AVX512-VL-LABEL: i8_14x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovdqa (%ecx), %xmm0
; X86-AVX512-VL-NEXT:    vpextrw $6, %xmm0, 12(%eax)
; X86-AVX512-VL-NEXT:    vpextrd $2, %xmm0, 8(%eax)
; X86-AVX512-VL-NEXT:    vpextrd $1, %xmm0, 4(%eax)
; X86-AVX512-VL-NEXT:    vmovd %xmm0, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i8_14x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $16383, %dx # imm = 0x3FFF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 (%ecx), %xmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 %xmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i8_14x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovdqa (%rdi), %xmm0
; X86_64-AVX512-VL-NEXT:    vpextrw $6, %xmm0, 12(%rsi)
; X86_64-AVX512-VL-NEXT:    vpextrd $2, %xmm0, 8(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovq %xmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i8_14x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $16383, %ax ## imm = 0x3FFF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 (%rdi), %xmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 %xmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <14 x i8>, <14 x i8>* %in
  store <14 x i8> %val, <14 x i8>* %out
  ret void
}

define void @i8_15x(<15 x i8>* %in, <15 x i8>* %out) {
; X86-AVX512-VL-LABEL: i8_15x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovdqa (%ecx), %xmm0
; X86-AVX512-VL-NEXT:    vpextrb $14, %xmm0, 14(%eax)
; X86-AVX512-VL-NEXT:    vpextrw $6, %xmm0, 12(%eax)
; X86-AVX512-VL-NEXT:    vpextrd $2, %xmm0, 8(%eax)
; X86-AVX512-VL-NEXT:    vpextrd $1, %xmm0, 4(%eax)
; X86-AVX512-VL-NEXT:    vmovd %xmm0, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i8_15x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $32767, %dx # imm = 0x7FFF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 (%ecx), %xmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 %xmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i8_15x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovdqa (%rdi), %xmm0
; X86_64-AVX512-VL-NEXT:    vpextrb $14, %xmm0, 14(%rsi)
; X86_64-AVX512-VL-NEXT:    vpextrw $6, %xmm0, 12(%rsi)
; X86_64-AVX512-VL-NEXT:    vpextrd $2, %xmm0, 8(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovq %xmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i8_15x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $32767, %ax ## imm = 0x7FFF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 (%rdi), %xmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 %xmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <15 x i8>, <15 x i8>* %in
  store <15 x i8> %val, <15 x i8>* %out
  ret void
}

define void @i8_16x(<16 x i8>* %in, <16 x i8>* %out) {
; X86-AVX512-VL-LABEL: i8_16x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %xmm0
; X86-AVX512-VL-NEXT:    vmovaps %xmm0, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i8_16x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %xmm0
; X86-AVX512-VL-BW-NEXT:    vmovaps %xmm0, (%eax)
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i8_16x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %xmm0
; X86_64-AVX512-VL-NEXT:    vmovaps %xmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i8_16x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %xmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %xmm0, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <16 x i8>, <16 x i8>* %in
  store <16 x i8> %val, <16 x i8>* %out
  ret void
}

define void @i8_17x(<17 x i8>* %in, <17 x i8>* %out) {
; X86-AVX512-VL-LABEL: i8_17x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %xmm0
; X86-AVX512-VL-NEXT:    vmovdqa 16(%ecx), %xmm1
; X86-AVX512-VL-NEXT:    vmovaps %xmm0, (%eax)
; X86-AVX512-VL-NEXT:    vpextrb $0, %xmm1, 16(%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i8_17x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movl $131071, %edx # imm = 0x1FFFF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 (%ecx), %ymm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 %ymm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i8_17x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %xmm0
; X86_64-AVX512-VL-NEXT:    vmovdqa 16(%rdi), %xmm1
; X86_64-AVX512-VL-NEXT:    vmovaps %xmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vpextrb $0, %xmm1, 16(%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i8_17x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movl $131071, %eax ## imm = 0x1FFFF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 (%rdi), %ymm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 %ymm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <17 x i8>, <17 x i8>* %in
  store <17 x i8> %val, <17 x i8>* %out
  ret void
}

define void @i8_18x(<18 x i8>* %in, <18 x i8>* %out) {
; X86-AVX512-VL-LABEL: i8_18x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %xmm0
; X86-AVX512-VL-NEXT:    vmovdqa 16(%ecx), %xmm1
; X86-AVX512-VL-NEXT:    vpextrw $0, %xmm1, 16(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %xmm0, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i8_18x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movl $262143, %edx # imm = 0x3FFFF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 (%ecx), %ymm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 %ymm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i8_18x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %xmm0
; X86_64-AVX512-VL-NEXT:    vmovdqa 16(%rdi), %xmm1
; X86_64-AVX512-VL-NEXT:    vpextrw $0, %xmm1, 16(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %xmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i8_18x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movl $262143, %eax ## imm = 0x3FFFF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 (%rdi), %ymm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 %ymm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <18 x i8>, <18 x i8>* %in
  store <18 x i8> %val, <18 x i8>* %out
  ret void
}

define void @i8_30x(<30 x i8>* %in, <30 x i8>* %out) {
; X86-AVX512-VL-LABEL: i8_30x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %xmm0
; X86-AVX512-VL-NEXT:    vmovaps 16(%ecx), %xmm1
; X86-AVX512-VL-NEXT:    vmovdqa 16(%ecx), %xmm2
; X86-AVX512-VL-NEXT:    vpextrw $6, %xmm2, 28(%eax)
; X86-AVX512-VL-NEXT:    vextractps $2, %xmm1, 24(%eax)
; X86-AVX512-VL-NEXT:    vextractps $1, %xmm1, 20(%eax)
; X86-AVX512-VL-NEXT:    vmovss %xmm1, 16(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %xmm0, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i8_30x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movl $1073741823, %edx # imm = 0x3FFFFFFF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 (%ecx), %ymm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 %ymm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i8_30x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movq 16(%rdi), %rax
; X86_64-AVX512-VL-NEXT:    movl 24(%rdi), %ecx
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %xmm0
; X86_64-AVX512-VL-NEXT:    vmovdqa 16(%rdi), %xmm1
; X86_64-AVX512-VL-NEXT:    vpextrw $6, %xmm1, 28(%rsi)
; X86_64-AVX512-VL-NEXT:    movl %ecx, 24(%rsi)
; X86_64-AVX512-VL-NEXT:    movq %rax, 16(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %xmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i8_30x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movl $1073741823, %eax ## imm = 0x3FFFFFFF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 (%rdi), %ymm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 %ymm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <30 x i8>, <30 x i8>* %in
  store <30 x i8> %val, <30 x i8>* %out
  ret void
}

define void @i8_31x(<31 x i8>* %in, <31 x i8>* %out) {
; X86-AVX512-VL-LABEL: i8_31x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %xmm0
; X86-AVX512-VL-NEXT:    vmovdqa 16(%ecx), %xmm1
; X86-AVX512-VL-NEXT:    vmovaps %xmm0, (%eax)
; X86-AVX512-VL-NEXT:    vpextrb $14, %xmm1, 30(%eax)
; X86-AVX512-VL-NEXT:    vpextrw $6, %xmm1, 28(%eax)
; X86-AVX512-VL-NEXT:    vpextrd $2, %xmm1, 24(%eax)
; X86-AVX512-VL-NEXT:    vpextrd $1, %xmm1, 20(%eax)
; X86-AVX512-VL-NEXT:    vmovd %xmm1, 16(%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i8_31x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movl $2147483647, %edx # imm = 0x7FFFFFFF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 (%ecx), %ymm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 %ymm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i8_31x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %xmm0
; X86_64-AVX512-VL-NEXT:    vmovdqa 16(%rdi), %xmm1
; X86_64-AVX512-VL-NEXT:    vmovaps %xmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vpextrb $14, %xmm1, 30(%rsi)
; X86_64-AVX512-VL-NEXT:    vpextrw $6, %xmm1, 28(%rsi)
; X86_64-AVX512-VL-NEXT:    vpextrd $2, %xmm1, 24(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovq %xmm1, 16(%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i8_31x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movl $2147483647, %eax ## imm = 0x7FFFFFFF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 (%rdi), %ymm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 %ymm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <31 x i8>, <31 x i8>* %in
  store <31 x i8> %val, <31 x i8>* %out
  ret void
}

define void @i8_32x(<32 x i8>* %in, <32 x i8>* %out) {
; X86-AVX512-VL-LABEL: i8_32x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %ymm0
; X86-AVX512-VL-NEXT:    vmovaps %ymm0, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i8_32x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %ymm0
; X86-AVX512-VL-BW-NEXT:    vmovaps %ymm0, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i8_32x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %ymm0
; X86_64-AVX512-VL-NEXT:    vmovaps %ymm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i8_32x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %ymm0
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %ymm0, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <32 x i8>, <32 x i8>* %in
  store <32 x i8> %val, <32 x i8>* %out
  ret void
}

define void @i8_33x(<33 x i8>* %in, <33 x i8>* %out) {
; X86-AVX512-VL-LABEL: i8_33x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %ymm0
; X86-AVX512-VL-NEXT:    vmovdqa 32(%ecx), %xmm1
; X86-AVX512-VL-NEXT:    vpextrb $0, %xmm1, 32(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %ymm0, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i8_33x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movl $1, %edx
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k0
; X86-AVX512-VL-BW-NEXT:    kxnord %k0, %k0, %k1
; X86-AVX512-VL-BW-NEXT:    kunpckdq %k1, %k0, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 %zmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i8_33x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %ymm0
; X86_64-AVX512-VL-NEXT:    vmovdqa 32(%rdi), %xmm1
; X86_64-AVX512-VL-NEXT:    vpextrb $0, %xmm1, 32(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %ymm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i8_33x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movabsq $8589934591, %rax ## imm = 0x1FFFFFFFF
; X86_64-AVX512-VL-BW-NEXT:    kmovq %rax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <33 x i8>, <33 x i8>* %in
  store <33 x i8> %val, <33 x i8>* %out
  ret void
}

define void @i8_34x(<34 x i8>* %in, <34 x i8>* %out) {
; X86-AVX512-VL-LABEL: i8_34x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %ymm0
; X86-AVX512-VL-NEXT:    vmovdqa 32(%ecx), %xmm1
; X86-AVX512-VL-NEXT:    vpextrw $0, %xmm1, 32(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %ymm0, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i8_34x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movl $3, %edx
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k0
; X86-AVX512-VL-BW-NEXT:    kxnord %k0, %k0, %k1
; X86-AVX512-VL-BW-NEXT:    kunpckdq %k1, %k0, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 %zmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i8_34x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %ymm0
; X86_64-AVX512-VL-NEXT:    vmovdqa 32(%rdi), %xmm1
; X86_64-AVX512-VL-NEXT:    vpextrw $0, %xmm1, 32(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %ymm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i8_34x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movabsq $17179869183, %rax ## imm = 0x3FFFFFFFF
; X86_64-AVX512-VL-BW-NEXT:    kmovq %rax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <34 x i8>, <34 x i8>* %in
  store <34 x i8> %val, <34 x i8>* %out
  ret void
}

define void @i8_48x(<48 x i8>* %in, <48 x i8>* %out) {
; X86-AVX512-VL-LABEL: i8_48x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vextractf32x4 $2, %zmm0, 32(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %ymm0, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i8_48x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movl $65535, %edx # imm = 0xFFFF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k0
; X86-AVX512-VL-BW-NEXT:    kxnord %k0, %k0, %k1
; X86-AVX512-VL-BW-NEXT:    kunpckdq %k1, %k0, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 %zmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i8_48x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vextractf32x4 $2, %zmm0, 32(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %ymm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i8_48x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movabsq $281474976710655, %rax ## imm = 0xFFFFFFFFFFFF
; X86_64-AVX512-VL-BW-NEXT:    kmovq %rax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <48 x i8>, <48 x i8>* %in
  store <48 x i8> %val, <48 x i8>* %out
  ret void
}

define void @i8_49x(<49 x i8>* %in, <49 x i8>* %out) {
; X86-AVX512-VL-LABEL: i8_49x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %ymm0
; X86-AVX512-VL-NEXT:    vmovaps 32(%ecx), %xmm1
; X86-AVX512-VL-NEXT:    vmovaps %xmm1, 32(%eax)
; X86-AVX512-VL-NEXT:    vmovdqa 48(%ecx), %xmm1
; X86-AVX512-VL-NEXT:    vmovaps %ymm0, (%eax)
; X86-AVX512-VL-NEXT:    vpextrb $0, %xmm1, 48(%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i8_49x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movl $131071, %edx # imm = 0x1FFFF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k0
; X86-AVX512-VL-BW-NEXT:    kxnord %k0, %k0, %k1
; X86-AVX512-VL-BW-NEXT:    kunpckdq %k1, %k0, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqu8 %zmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i8_49x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %ymm0
; X86_64-AVX512-VL-NEXT:    vmovaps 32(%rdi), %xmm1
; X86_64-AVX512-VL-NEXT:    vmovaps %xmm1, 32(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovdqa 48(%rdi), %xmm1
; X86_64-AVX512-VL-NEXT:    vmovaps %ymm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vpextrb $0, %xmm1, 48(%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i8_49x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movabsq $562949953421311, %rax ## imm = 0x1FFFFFFFFFFFF
; X86_64-AVX512-VL-BW-NEXT:    kmovq %rax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu8 %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <49 x i8>, <49 x i8>* %in
  store <49 x i8> %val, <49 x i8>* %out
  ret void
}


define void @i16_1x(<1 x i16>* %in, <1 x i16>* %out) {
; X86-AVX512-VL-LABEL: i16_1x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movzwl (%ecx), %ecx
; X86-AVX512-VL-NEXT:    movw %cx, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i16_1x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movzwl (%ecx), %ecx
; X86-AVX512-VL-BW-NEXT:    movw %cx, (%eax)
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i16_1x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movzwl (%rdi), %eax
; X86_64-AVX512-VL-NEXT:    movw %ax, (%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i16_1x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movzwl (%rdi), %eax
; X86_64-AVX512-VL-BW-NEXT:    movw %ax, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <1 x i16>, <1 x i16>* %in
  store <1 x i16> %val, <1 x i16>* %out
  ret void
}

define void @i16_2x(<2 x i16>* %in, <2 x i16>* %out) {
; X86-AVX512-VL-LABEL: i16_2x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movl (%ecx), %ecx
; X86-AVX512-VL-NEXT:    movl %ecx, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i16_2x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movl (%ecx), %ecx
; X86-AVX512-VL-BW-NEXT:    movl %ecx, (%eax)
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i16_2x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movl (%rdi), %eax
; X86_64-AVX512-VL-NEXT:    movl %eax, (%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i16_2x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movl (%rdi), %eax
; X86_64-AVX512-VL-BW-NEXT:    movl %eax, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <2 x i16>, <2 x i16>* %in
  store <2 x i16> %val, <2 x i16>* %out
  ret void
}

define void @i16_3x(<3 x i16>* %in, <3 x i16>* %out) {
; X86-AVX512-VL-LABEL: i16_3x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movl (%ecx), %edx
; X86-AVX512-VL-NEXT:    movzwl 4(%ecx), %ecx
; X86-AVX512-VL-NEXT:    movw %cx, 4(%eax)
; X86-AVX512-VL-NEXT:    movl %edx, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i16_3x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $7, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 (%ecx), %xmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 %xmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i16_3x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movq (%rdi), %rax
; X86_64-AVX512-VL-NEXT:    movl %eax, (%rsi)
; X86_64-AVX512-VL-NEXT:    shrq $32, %rax
; X86_64-AVX512-VL-NEXT:    movw %ax, 4(%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i16_3x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $7, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 (%rdi), %xmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 %xmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <3 x i16>, <3 x i16>* %in
  store <3 x i16> %val, <3 x i16>* %out
  ret void
}

define void @i16_4x(<4 x i16>* %in, <4 x i16>* %out) {
; X86-AVX512-VL-LABEL: i16_4x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; X86-AVX512-VL-NEXT:    vmovsd %xmm0, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i16_4x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; X86-AVX512-VL-BW-NEXT:    vmovsd %xmm0, (%eax)
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i16_4x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movq (%rdi), %rax
; X86_64-AVX512-VL-NEXT:    movq %rax, (%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i16_4x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movq (%rdi), %rax
; X86_64-AVX512-VL-BW-NEXT:    movq %rax, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <4 x i16>, <4 x i16>* %in
  store <4 x i16> %val, <4 x i16>* %out
  ret void
}

define void @i16_5x(<5 x i16>* %in, <5 x i16>* %out) {
; X86-AVX512-VL-LABEL: i16_5x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovdqa (%ecx), %xmm0
; X86-AVX512-VL-NEXT:    vpextrw $4, %xmm0, 8(%eax)
; X86-AVX512-VL-NEXT:    vpextrd $1, %xmm0, 4(%eax)
; X86-AVX512-VL-NEXT:    vmovd %xmm0, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i16_5x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $31, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 (%ecx), %xmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 %xmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i16_5x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovdqa (%rdi), %xmm0
; X86_64-AVX512-VL-NEXT:    vpextrw $4, %xmm0, 8(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovq %xmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i16_5x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $31, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 (%rdi), %xmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 %xmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <5 x i16>, <5 x i16>* %in
  store <5 x i16> %val, <5 x i16>* %out
  ret void
}

define void @i16_6x(<6 x i16>* %in, <6 x i16>* %out) {
; X86-AVX512-VL-LABEL: i16_6x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %xmm0
; X86-AVX512-VL-NEXT:    vextractps $2, %xmm0, 8(%eax)
; X86-AVX512-VL-NEXT:    vextractps $1, %xmm0, 4(%eax)
; X86-AVX512-VL-NEXT:    vmovss %xmm0, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i16_6x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $63, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 (%ecx), %xmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 %xmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i16_6x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %xmm0
; X86_64-AVX512-VL-NEXT:    vextractps $2, %xmm0, 8(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovlps %xmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i16_6x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $63, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 (%rdi), %xmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 %xmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <6 x i16>, <6 x i16>* %in
  store <6 x i16> %val, <6 x i16>* %out
  ret void
}

define void @i16_7x(<7 x i16>* %in, <7 x i16>* %out) {
; X86-AVX512-VL-LABEL: i16_7x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovdqa (%ecx), %xmm0
; X86-AVX512-VL-NEXT:    vpextrw $6, %xmm0, 12(%eax)
; X86-AVX512-VL-NEXT:    vpextrd $2, %xmm0, 8(%eax)
; X86-AVX512-VL-NEXT:    vpextrd $1, %xmm0, 4(%eax)
; X86-AVX512-VL-NEXT:    vmovd %xmm0, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i16_7x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $127, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 (%ecx), %xmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 %xmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i16_7x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovdqa (%rdi), %xmm0
; X86_64-AVX512-VL-NEXT:    vpextrw $6, %xmm0, 12(%rsi)
; X86_64-AVX512-VL-NEXT:    vpextrd $2, %xmm0, 8(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovq %xmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i16_7x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $127, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 (%rdi), %xmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 %xmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <7 x i16>, <7 x i16>* %in
  store <7 x i16> %val, <7 x i16>* %out
  ret void
}

define void @i16_8x(<8 x i16>* %in, <8 x i16>* %out) {
; X86-AVX512-VL-LABEL: i16_8x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %xmm0
; X86-AVX512-VL-NEXT:    vmovaps %xmm0, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i16_8x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %xmm0
; X86-AVX512-VL-BW-NEXT:    vmovaps %xmm0, (%eax)
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i16_8x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %xmm0
; X86_64-AVX512-VL-NEXT:    vmovaps %xmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i16_8x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %xmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %xmm0, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <8 x i16>, <8 x i16>* %in
  store <8 x i16> %val, <8 x i16>* %out
  ret void
}

define void @i16_9x(<9 x i16>* %in, <9 x i16>* %out) {
; X86-AVX512-VL-LABEL: i16_9x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %xmm0
; X86-AVX512-VL-NEXT:    vmovdqa 16(%ecx), %xmm1
; X86-AVX512-VL-NEXT:    vmovaps %xmm0, (%eax)
; X86-AVX512-VL-NEXT:    vpextrw $0, %xmm1, 16(%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i16_9x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $511, %dx # imm = 0x1FF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 (%ecx), %ymm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 %ymm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i16_9x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %xmm0
; X86_64-AVX512-VL-NEXT:    vmovdqa 16(%rdi), %xmm1
; X86_64-AVX512-VL-NEXT:    vmovaps %xmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vpextrw $0, %xmm1, 16(%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i16_9x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $511, %ax ## imm = 0x1FF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 (%rdi), %ymm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 %ymm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <9 x i16>, <9 x i16>* %in
  store <9 x i16> %val, <9 x i16>* %out
  ret void
}

define void @i16_10x(<10 x i16>* %in, <10 x i16>* %out) {
; X86-AVX512-VL-LABEL: i16_10x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %xmm0
; X86-AVX512-VL-NEXT:    movl 16(%ecx), %ecx
; X86-AVX512-VL-NEXT:    movl %ecx, 16(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %xmm0, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i16_10x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $1023, %dx # imm = 0x3FF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 (%ecx), %ymm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 %ymm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i16_10x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %xmm0
; X86_64-AVX512-VL-NEXT:    movl 16(%rdi), %eax
; X86_64-AVX512-VL-NEXT:    movl %eax, 16(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %xmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i16_10x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $1023, %ax ## imm = 0x3FF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 (%rdi), %ymm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 %ymm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <10 x i16>, <10 x i16>* %in
  store <10 x i16> %val, <10 x i16>* %out
  ret void
}

define void @i16_11x(<11 x i16>* %in, <11 x i16>* %out) {
; X86-AVX512-VL-LABEL: i16_11x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %xmm0
; X86-AVX512-VL-NEXT:    vmovdqa 16(%ecx), %xmm1
; X86-AVX512-VL-NEXT:    vmovaps %xmm0, (%eax)
; X86-AVX512-VL-NEXT:    vpextrw $2, %xmm1, 20(%eax)
; X86-AVX512-VL-NEXT:    vmovd %xmm1, 16(%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i16_11x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $2047, %dx # imm = 0x7FF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 (%ecx), %ymm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 %ymm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i16_11x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %xmm0
; X86_64-AVX512-VL-NEXT:    vmovdqa 16(%rdi), %xmm1
; X86_64-AVX512-VL-NEXT:    vmovaps %xmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vpextrw $2, %xmm1, 20(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovd %xmm1, 16(%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i16_11x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $2047, %ax ## imm = 0x7FF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 (%rdi), %ymm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 %ymm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <11 x i16>, <11 x i16>* %in
  store <11 x i16> %val, <11 x i16>* %out
  ret void
}

define void @i16_12x(<12 x i16>* %in, <12 x i16>* %out) {
; X86-AVX512-VL-LABEL: i16_12x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %xmm0
; X86-AVX512-VL-NEXT:    vmovaps 16(%ecx), %xmm1
; X86-AVX512-VL-NEXT:    vextractps $1, %xmm1, 20(%eax)
; X86-AVX512-VL-NEXT:    vmovss %xmm1, 16(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %xmm0, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i16_12x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $4095, %dx # imm = 0xFFF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 (%ecx), %ymm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 %ymm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i16_12x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %xmm0
; X86_64-AVX512-VL-NEXT:    movq 16(%rdi), %rax
; X86_64-AVX512-VL-NEXT:    movq %rax, 16(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %xmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i16_12x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $4095, %ax ## imm = 0xFFF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 (%rdi), %ymm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 %ymm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <12 x i16>, <12 x i16>* %in
  store <12 x i16> %val, <12 x i16>* %out
  ret void
}

define void @i16_13x(<13 x i16>* %in, <13 x i16>* %out) {
; X86-AVX512-VL-LABEL: i16_13x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %xmm0
; X86-AVX512-VL-NEXT:    vmovdqa 16(%ecx), %xmm1
; X86-AVX512-VL-NEXT:    vmovaps %xmm0, (%eax)
; X86-AVX512-VL-NEXT:    vpextrw $4, %xmm1, 24(%eax)
; X86-AVX512-VL-NEXT:    vpextrd $1, %xmm1, 20(%eax)
; X86-AVX512-VL-NEXT:    vmovd %xmm1, 16(%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i16_13x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $8191, %dx # imm = 0x1FFF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 (%ecx), %ymm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 %ymm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i16_13x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %xmm0
; X86_64-AVX512-VL-NEXT:    vmovdqa 16(%rdi), %xmm1
; X86_64-AVX512-VL-NEXT:    vmovaps %xmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vpextrw $4, %xmm1, 24(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovq %xmm1, 16(%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i16_13x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $8191, %ax ## imm = 0x1FFF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 (%rdi), %ymm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 %ymm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <13 x i16>, <13 x i16>* %in
  store <13 x i16> %val, <13 x i16>* %out
  ret void
}

define void @i16_14x(<14 x i16>* %in, <14 x i16>* %out) {
; X86-AVX512-VL-LABEL: i16_14x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %xmm0
; X86-AVX512-VL-NEXT:    vmovaps 16(%ecx), %xmm1
; X86-AVX512-VL-NEXT:    vextractps $2, %xmm1, 24(%eax)
; X86-AVX512-VL-NEXT:    vextractps $1, %xmm1, 20(%eax)
; X86-AVX512-VL-NEXT:    vmovss %xmm1, 16(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %xmm0, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i16_14x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $16383, %dx # imm = 0x3FFF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 (%ecx), %ymm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 %ymm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i16_14x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %xmm0
; X86_64-AVX512-VL-NEXT:    movq 16(%rdi), %rax
; X86_64-AVX512-VL-NEXT:    movl 24(%rdi), %ecx
; X86_64-AVX512-VL-NEXT:    movl %ecx, 24(%rsi)
; X86_64-AVX512-VL-NEXT:    movq %rax, 16(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %xmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i16_14x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $16383, %ax ## imm = 0x3FFF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 (%rdi), %ymm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 %ymm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <14 x i16>, <14 x i16>* %in
  store <14 x i16> %val, <14 x i16>* %out
  ret void
}

define void @i16_15x(<15 x i16>* %in, <15 x i16>* %out) {
; X86-AVX512-VL-LABEL: i16_15x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %xmm0
; X86-AVX512-VL-NEXT:    vmovdqa 16(%ecx), %xmm1
; X86-AVX512-VL-NEXT:    vmovaps %xmm0, (%eax)
; X86-AVX512-VL-NEXT:    vpextrw $6, %xmm1, 28(%eax)
; X86-AVX512-VL-NEXT:    vpextrd $2, %xmm1, 24(%eax)
; X86-AVX512-VL-NEXT:    vpextrd $1, %xmm1, 20(%eax)
; X86-AVX512-VL-NEXT:    vmovd %xmm1, 16(%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i16_15x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $32767, %dx # imm = 0x7FFF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 (%ecx), %ymm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 %ymm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i16_15x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %xmm0
; X86_64-AVX512-VL-NEXT:    vmovdqa 16(%rdi), %xmm1
; X86_64-AVX512-VL-NEXT:    vmovaps %xmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vpextrw $6, %xmm1, 28(%rsi)
; X86_64-AVX512-VL-NEXT:    vpextrd $2, %xmm1, 24(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovq %xmm1, 16(%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i16_15x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $32767, %ax ## imm = 0x7FFF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 (%rdi), %ymm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 %ymm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <15 x i16>, <15 x i16>* %in
  store <15 x i16> %val, <15 x i16>* %out
  ret void
}

define void @i16_16x(<16 x i16>* %in, <16 x i16>* %out) {
; X86-AVX512-VL-LABEL: i16_16x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %ymm0
; X86-AVX512-VL-NEXT:    vmovaps %ymm0, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i16_16x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %ymm0
; X86-AVX512-VL-BW-NEXT:    vmovaps %ymm0, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i16_16x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %ymm0
; X86_64-AVX512-VL-NEXT:    vmovaps %ymm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i16_16x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %ymm0
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %ymm0, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <16 x i16>, <16 x i16>* %in
  store <16 x i16> %val, <16 x i16>* %out
  ret void
}

define void @i16_17x(<17 x i16>* %in, <17 x i16>* %out) {
; X86-AVX512-VL-LABEL: i16_17x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %ymm0
; X86-AVX512-VL-NEXT:    vmovdqa 32(%ecx), %xmm1
; X86-AVX512-VL-NEXT:    vpextrw $0, %xmm1, 32(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %ymm0, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i16_17x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movl $131071, %edx # imm = 0x1FFFF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 %zmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i16_17x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %ymm0
; X86_64-AVX512-VL-NEXT:    vmovdqa 32(%rdi), %xmm1
; X86_64-AVX512-VL-NEXT:    vpextrw $0, %xmm1, 32(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %ymm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i16_17x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movl $131071, %eax ## imm = 0x1FFFF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <17 x i16>, <17 x i16>* %in
  store <17 x i16> %val, <17 x i16>* %out
  ret void
}

define void @i16_18x(<18 x i16>* %in, <18 x i16>* %out) {
; X86-AVX512-VL-LABEL: i16_18x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %ymm0
; X86-AVX512-VL-NEXT:    movl 32(%ecx), %ecx
; X86-AVX512-VL-NEXT:    movl %ecx, 32(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %ymm0, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i16_18x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movl $262143, %edx # imm = 0x3FFFF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 %zmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i16_18x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %ymm0
; X86_64-AVX512-VL-NEXT:    movl 32(%rdi), %eax
; X86_64-AVX512-VL-NEXT:    movl %eax, 32(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %ymm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i16_18x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movl $262143, %eax ## imm = 0x3FFFF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <18 x i16>, <18 x i16>* %in
  store <18 x i16> %val, <18 x i16>* %out
  ret void
}

define void @i16_30x(<30 x i16>* %in, <30 x i16>* %out) {
; X86-AVX512-VL-LABEL: i16_30x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps 32(%ecx), %xmm0
; X86-AVX512-VL-NEXT:    vmovaps 48(%ecx), %xmm1
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %ymm2
; X86-AVX512-VL-NEXT:    vmovaps %ymm2, (%eax)
; X86-AVX512-VL-NEXT:    vextractps $2, %xmm1, 56(%eax)
; X86-AVX512-VL-NEXT:    vextractps $1, %xmm1, 52(%eax)
; X86-AVX512-VL-NEXT:    vmovss %xmm1, 48(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %xmm0, 32(%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i16_30x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movl $1073741823, %edx # imm = 0x3FFFFFFF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 %zmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i16_30x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps 32(%rdi), %xmm0
; X86_64-AVX512-VL-NEXT:    movq 48(%rdi), %rax
; X86_64-AVX512-VL-NEXT:    movl 56(%rdi), %ecx
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %ymm1
; X86_64-AVX512-VL-NEXT:    vmovaps %ymm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    movl %ecx, 56(%rsi)
; X86_64-AVX512-VL-NEXT:    movq %rax, 48(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %xmm0, 32(%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i16_30x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movl $1073741823, %eax ## imm = 0x3FFFFFFF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <30 x i16>, <30 x i16>* %in
  store <30 x i16> %val, <30 x i16>* %out
  ret void
}

define void @i16_31x(<31 x i16>* %in, <31 x i16>* %out) {
; X86-AVX512-VL-LABEL: i16_31x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %ymm0
; X86-AVX512-VL-NEXT:    vmovaps 32(%ecx), %xmm1
; X86-AVX512-VL-NEXT:    vmovaps %xmm1, 32(%eax)
; X86-AVX512-VL-NEXT:    vmovdqa 48(%ecx), %xmm1
; X86-AVX512-VL-NEXT:    vmovaps %ymm0, (%eax)
; X86-AVX512-VL-NEXT:    vpextrd $2, %xmm1, 56(%eax)
; X86-AVX512-VL-NEXT:    vpextrd $1, %xmm1, 52(%eax)
; X86-AVX512-VL-NEXT:    vmovd %xmm1, 48(%eax)
; X86-AVX512-VL-NEXT:    vpextrw $6, %xmm1, 60(%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i16_31x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movl $2147483647, %edx # imm = 0x7FFFFFFF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 %zmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i16_31x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %ymm0
; X86_64-AVX512-VL-NEXT:    vmovaps 32(%rdi), %xmm1
; X86_64-AVX512-VL-NEXT:    vmovaps %xmm1, 32(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovdqa 48(%rdi), %xmm1
; X86_64-AVX512-VL-NEXT:    vmovaps %ymm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vpextrd $2, %xmm1, 56(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovq %xmm1, 48(%rsi)
; X86_64-AVX512-VL-NEXT:    vpextrw $6, %xmm1, 60(%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i16_31x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movl $2147483647, %eax ## imm = 0x7FFFFFFF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <31 x i16>, <31 x i16>* %in
  store <31 x i16> %val, <31 x i16>* %out
  ret void
}

define void @i16_32x(<32 x i16>* %in, <32 x i16>* %out) {
; X86-AVX512-VL-LABEL: i16_32x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i16_32x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i16_32x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i16_32x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <32 x i16>, <32 x i16>* %in
  store <32 x i16> %val, <32 x i16>* %out
  ret void
}

define void @i16_33x(<33 x i16>* %in, <33 x i16>* %out) {
; X86-AVX512-VL-LABEL: i16_33x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm0
; X86-AVX512-VL-NEXT:    movzwl 64(%ecx), %ecx
; X86-AVX512-VL-NEXT:    movw %cx, 64(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i16_33x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movl $1, %edx
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i16_33x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    movzwl 64(%rdi), %eax
; X86_64-AVX512-VL-NEXT:    movw %ax, 64(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i16_33x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movl $1, %eax
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <33 x i16>, <33 x i16>* %in
  store <33 x i16> %val, <33 x i16>* %out
  ret void
}

define void @i16_34x(<34 x i16>* %in, <34 x i16>* %out) {
; X86-AVX512-VL-LABEL: i16_34x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm0
; X86-AVX512-VL-NEXT:    movl 64(%ecx), %ecx
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, (%eax)
; X86-AVX512-VL-NEXT:    movl %ecx, 64(%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i16_34x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movl $3, %edx
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i16_34x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    movl 64(%rdi), %eax
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    movl %eax, 64(%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i16_34x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movl $3, %eax
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <34 x i16>, <34 x i16>* %in
  store <34 x i16> %val, <34 x i16>* %out
  ret void
}

define void @i16_48x(<48 x i16>* %in, <48 x i16>* %out) {
; X86-AVX512-VL-LABEL: i16_48x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, (%eax)
; X86-AVX512-VL-NEXT:    vmovaps %ymm1, 64(%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i16_48x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movl $65535, %edx # imm = 0xFFFF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i16_48x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %ymm1, 64(%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i16_48x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movl $65535, %eax ## imm = 0xFFFF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <48 x i16>, <48 x i16>* %in
  store <48 x i16> %val, <48 x i16>* %out
  ret void
}

define void @i16_49x(<49 x i16>* %in, <49 x i16>* %out) {
; X86-AVX512-VL-LABEL: i16_49x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %ymm1
; X86-AVX512-VL-NEXT:    vmovdqa 96(%ecx), %xmm2
; X86-AVX512-VL-NEXT:    vpextrw $0, %xmm2, 96(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, (%eax)
; X86-AVX512-VL-NEXT:    vmovaps %ymm1, 64(%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i16_49x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movl $131071, %edx # imm = 0x1FFFF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovdqu16 %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i16_49x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %ymm1
; X86_64-AVX512-VL-NEXT:    vmovdqa 96(%rdi), %xmm2
; X86_64-AVX512-VL-NEXT:    vpextrw $0, %xmm2, 96(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %ymm1, 64(%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i16_49x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movl $131071, %eax ## imm = 0x1FFFF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqu16 %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <49 x i16>, <49 x i16>* %in
  store <49 x i16> %val, <49 x i16>* %out
  ret void
}


define void @i32_1x(<1 x i32>* %in, <1 x i32>* %out) {
; X86-AVX512-VL-LABEL: i32_1x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movl (%ecx), %ecx
; X86-AVX512-VL-NEXT:    movl %ecx, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i32_1x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movl (%ecx), %ecx
; X86-AVX512-VL-BW-NEXT:    movl %ecx, (%eax)
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i32_1x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movl (%rdi), %eax
; X86_64-AVX512-VL-NEXT:    movl %eax, (%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i32_1x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movl (%rdi), %eax
; X86_64-AVX512-VL-BW-NEXT:    movl %eax, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <1 x i32>, <1 x i32>* %in
  store <1 x i32> %val, <1 x i32>* %out
  ret void
}

define void @i32_2x(<2 x i32>* %in, <2 x i32>* %out) {
; X86-AVX512-VL-LABEL: i32_2x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; X86-AVX512-VL-NEXT:    vmovsd %xmm0, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i32_2x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; X86-AVX512-VL-BW-NEXT:    vmovsd %xmm0, (%eax)
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i32_2x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movq (%rdi), %rax
; X86_64-AVX512-VL-NEXT:    movq %rax, (%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i32_2x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movq (%rdi), %rax
; X86_64-AVX512-VL-BW-NEXT:    movq %rax, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <2 x i32>, <2 x i32>* %in
  store <2 x i32> %val, <2 x i32>* %out
  ret void
}

define void @i32_3x(<3 x i32>* %in, <3 x i32>* %out) {
; X86-AVX512-VL-LABEL: i32_3x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $7, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa32 (%ecx), %xmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovdqa32 %xmm0, (%eax) {%k1}
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i32_3x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $7, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 (%ecx), %xmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 %xmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i32_3x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $7, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa32 (%rdi), %xmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovdqa32 %xmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i32_3x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $7, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 (%rdi), %xmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 %xmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <3 x i32>, <3 x i32>* %in
  store <3 x i32> %val, <3 x i32>* %out
  ret void
}

define void @i32_4x(<4 x i32>* %in, <4 x i32>* %out) {
; X86-AVX512-VL-LABEL: i32_4x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %xmm0
; X86-AVX512-VL-NEXT:    vmovaps %xmm0, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i32_4x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %xmm0
; X86-AVX512-VL-BW-NEXT:    vmovaps %xmm0, (%eax)
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i32_4x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %xmm0
; X86_64-AVX512-VL-NEXT:    vmovaps %xmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i32_4x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %xmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %xmm0, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <4 x i32>, <4 x i32>* %in
  store <4 x i32> %val, <4 x i32>* %out
  ret void
}

define void @i32_5x(<5 x i32>* %in, <5 x i32>* %out) {
; X86-AVX512-VL-LABEL: i32_5x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $31, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa32 (%ecx), %ymm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovdqa32 %ymm0, (%eax) {%k1}
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i32_5x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $31, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 (%ecx), %ymm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 %ymm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i32_5x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $31, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa32 (%rdi), %ymm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovdqa32 %ymm0, (%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i32_5x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $31, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 (%rdi), %ymm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 %ymm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <5 x i32>, <5 x i32>* %in
  store <5 x i32> %val, <5 x i32>* %out
  ret void
}

define void @i32_6x(<6 x i32>* %in, <6 x i32>* %out) {
; X86-AVX512-VL-LABEL: i32_6x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $63, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa32 (%ecx), %ymm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovdqa32 %ymm0, (%eax) {%k1}
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i32_6x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $63, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 (%ecx), %ymm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 %ymm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i32_6x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $63, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa32 (%rdi), %ymm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovdqa32 %ymm0, (%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i32_6x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $63, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 (%rdi), %ymm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 %ymm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <6 x i32>, <6 x i32>* %in
  store <6 x i32> %val, <6 x i32>* %out
  ret void
}

define void @i32_7x(<7 x i32>* %in, <7 x i32>* %out) {
; X86-AVX512-VL-LABEL: i32_7x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $127, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa32 (%ecx), %ymm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovdqa32 %ymm0, (%eax) {%k1}
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i32_7x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $127, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 (%ecx), %ymm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 %ymm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i32_7x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $127, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa32 (%rdi), %ymm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovdqa32 %ymm0, (%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i32_7x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $127, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 (%rdi), %ymm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 %ymm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <7 x i32>, <7 x i32>* %in
  store <7 x i32> %val, <7 x i32>* %out
  ret void
}

define void @i32_8x(<8 x i32>* %in, <8 x i32>* %out) {
; X86-AVX512-VL-LABEL: i32_8x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %ymm0
; X86-AVX512-VL-NEXT:    vmovaps %ymm0, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i32_8x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %ymm0
; X86-AVX512-VL-BW-NEXT:    vmovaps %ymm0, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i32_8x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %ymm0
; X86_64-AVX512-VL-NEXT:    vmovaps %ymm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i32_8x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %ymm0
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %ymm0, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <8 x i32>, <8 x i32>* %in
  store <8 x i32> %val, <8 x i32>* %out
  ret void
}

define void @i32_9x(<9 x i32>* %in, <9 x i32>* %out) {
; X86-AVX512-VL-LABEL: i32_9x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movw $511, %dx # imm = 0x1FF
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa32 (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovdqa32 %zmm0, (%eax) {%k1}
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i32_9x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $511, %dx # imm = 0x1FF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 %zmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i32_9x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movw $511, %ax ## imm = 0x1FF
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa32 (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovdqa32 %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i32_9x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $511, %ax ## imm = 0x1FF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <9 x i32>, <9 x i32>* %in
  store <9 x i32> %val, <9 x i32>* %out
  ret void
}

define void @i32_10x(<10 x i32>* %in, <10 x i32>* %out) {
; X86-AVX512-VL-LABEL: i32_10x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movw $1023, %dx # imm = 0x3FF
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa32 (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovdqa32 %zmm0, (%eax) {%k1}
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i32_10x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $1023, %dx # imm = 0x3FF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 %zmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i32_10x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movw $1023, %ax ## imm = 0x3FF
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa32 (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovdqa32 %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i32_10x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $1023, %ax ## imm = 0x3FF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <10 x i32>, <10 x i32>* %in
  store <10 x i32> %val, <10 x i32>* %out
  ret void
}

define void @i32_11x(<11 x i32>* %in, <11 x i32>* %out) {
; X86-AVX512-VL-LABEL: i32_11x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movw $2047, %dx # imm = 0x7FF
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa32 (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovdqa32 %zmm0, (%eax) {%k1}
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i32_11x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $2047, %dx # imm = 0x7FF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 %zmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i32_11x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movw $2047, %ax ## imm = 0x7FF
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa32 (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovdqa32 %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i32_11x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $2047, %ax ## imm = 0x7FF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <11 x i32>, <11 x i32>* %in
  store <11 x i32> %val, <11 x i32>* %out
  ret void
}

define void @i32_12x(<12 x i32>* %in, <12 x i32>* %out) {
; X86-AVX512-VL-LABEL: i32_12x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movw $4095, %dx # imm = 0xFFF
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa32 (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovdqa32 %zmm0, (%eax) {%k1}
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i32_12x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $4095, %dx # imm = 0xFFF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 %zmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i32_12x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movw $4095, %ax ## imm = 0xFFF
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa32 (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovdqa32 %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i32_12x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $4095, %ax ## imm = 0xFFF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <12 x i32>, <12 x i32>* %in
  store <12 x i32> %val, <12 x i32>* %out
  ret void
}

define void @i32_13x(<13 x i32>* %in, <13 x i32>* %out) {
; X86-AVX512-VL-LABEL: i32_13x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movw $8191, %dx # imm = 0x1FFF
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa32 (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovdqa32 %zmm0, (%eax) {%k1}
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i32_13x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $8191, %dx # imm = 0x1FFF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 %zmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i32_13x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movw $8191, %ax ## imm = 0x1FFF
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa32 (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovdqa32 %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i32_13x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $8191, %ax ## imm = 0x1FFF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <13 x i32>, <13 x i32>* %in
  store <13 x i32> %val, <13 x i32>* %out
  ret void
}

define void @i32_14x(<14 x i32>* %in, <14 x i32>* %out) {
; X86-AVX512-VL-LABEL: i32_14x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movw $16383, %dx # imm = 0x3FFF
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa32 (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovdqa32 %zmm0, (%eax) {%k1}
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i32_14x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $16383, %dx # imm = 0x3FFF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 %zmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i32_14x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movw $16383, %ax ## imm = 0x3FFF
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa32 (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovdqa32 %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i32_14x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $16383, %ax ## imm = 0x3FFF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <14 x i32>, <14 x i32>* %in
  store <14 x i32> %val, <14 x i32>* %out
  ret void
}

define void @i32_15x(<15 x i32>* %in, <15 x i32>* %out) {
; X86-AVX512-VL-LABEL: i32_15x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movw $32767, %dx # imm = 0x7FFF
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa32 (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovdqa32 %zmm0, (%eax) {%k1}
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i32_15x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $32767, %dx # imm = 0x7FFF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 %zmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i32_15x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movw $32767, %ax ## imm = 0x7FFF
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa32 (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovdqa32 %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i32_15x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $32767, %ax ## imm = 0x7FFF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <15 x i32>, <15 x i32>* %in
  store <15 x i32> %val, <15 x i32>* %out
  ret void
}

define void @i32_16x(<16 x i32>* %in, <16 x i32>* %out) {
; X86-AVX512-VL-LABEL: i32_16x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i32_16x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i32_16x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i32_16x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <16 x i32>, <16 x i32>* %in
  store <16 x i32> %val, <16 x i32>* %out
  ret void
}

define void @i32_17x(<17 x i32>* %in, <17 x i32>* %out) {
; X86-AVX512-VL-LABEL: i32_17x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movw $1, %dx
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa32 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovdqa32 %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i32_17x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $1, %dx
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i32_17x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movw $1, %ax
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa32 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovdqa32 %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i32_17x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $1, %ax
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <17 x i32>, <17 x i32>* %in
  store <17 x i32> %val, <17 x i32>* %out
  ret void
}

define void @i32_18x(<18 x i32>* %in, <18 x i32>* %out) {
; X86-AVX512-VL-LABEL: i32_18x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movw $3, %dx
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa32 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovdqa32 %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i32_18x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $3, %dx
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i32_18x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movw $3, %ax
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa32 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovdqa32 %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i32_18x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $3, %ax
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <18 x i32>, <18 x i32>* %in
  store <18 x i32> %val, <18 x i32>* %out
  ret void
}

define void @i32_30x(<30 x i32>* %in, <30 x i32>* %out) {
; X86-AVX512-VL-LABEL: i32_30x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movw $16383, %dx # imm = 0x3FFF
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa32 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovdqa32 %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i32_30x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $16383, %dx # imm = 0x3FFF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i32_30x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movw $16383, %ax ## imm = 0x3FFF
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa32 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovdqa32 %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i32_30x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $16383, %ax ## imm = 0x3FFF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <30 x i32>, <30 x i32>* %in
  store <30 x i32> %val, <30 x i32>* %out
  ret void
}

define void @i32_31x(<31 x i32>* %in, <31 x i32>* %out) {
; X86-AVX512-VL-LABEL: i32_31x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movw $32767, %dx # imm = 0x7FFF
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa32 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovdqa32 %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i32_31x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $32767, %dx # imm = 0x7FFF
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i32_31x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movw $32767, %ax ## imm = 0x7FFF
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa32 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovdqa32 %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i32_31x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $32767, %ax ## imm = 0x7FFF
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <31 x i32>, <31 x i32>* %in
  store <31 x i32> %val, <31 x i32>* %out
  ret void
}

define void @i32_32x(<32 x i32>* %in, <32 x i32>* %out) {
; X86-AVX512-VL-LABEL: i32_32x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, (%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, 64(%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i32_32x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovaps 64(%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, 64(%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i32_32x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, 64(%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i32_32x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 64(%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, 64(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <32 x i32>, <32 x i32>* %in
  store <32 x i32> %val, <32 x i32>* %out
  ret void
}

define void @i32_33x(<33 x i32>* %in, <33 x i32>* %out) {
; X86-AVX512-VL-LABEL: i32_33x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movw $1, %dx
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa32 128(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm2
; X86-AVX512-VL-NEXT:    vmovdqa32 %zmm0, 128(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm2, 64(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i32_33x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $1, %dx
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 128(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovaps 64(%ecx), %zmm2
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 %zmm0, 128(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 64(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i32_33x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movw $1, %ax
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa32 128(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-NEXT:    vmovdqa32 %zmm0, 128(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i32_33x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $1, %ax
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 128(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 %zmm0, 128(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <33 x i32>, <33 x i32>* %in
  store <33 x i32> %val, <33 x i32>* %out
  ret void
}

define void @i32_34x(<34 x i32>* %in, <34 x i32>* %out) {
; X86-AVX512-VL-LABEL: i32_34x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movw $3, %dx
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa32 128(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm2
; X86-AVX512-VL-NEXT:    vmovdqa32 %zmm0, 128(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm2, 64(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i32_34x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $3, %dx
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 128(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovaps 64(%ecx), %zmm2
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 %zmm0, 128(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 64(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i32_34x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movw $3, %ax
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa32 128(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-NEXT:    vmovdqa32 %zmm0, 128(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i32_34x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $3, %ax
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 128(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 %zmm0, 128(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <34 x i32>, <34 x i32>* %in
  store <34 x i32> %val, <34 x i32>* %out
  ret void
}

define void @i32_48x(<48 x i32>* %in, <48 x i32>* %out) {
; X86-AVX512-VL-LABEL: i32_48x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps 128(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm2
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm2, 64(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 128(%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i32_48x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    vmovaps 128(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovaps 64(%ecx), %zmm2
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 64(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 128(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i32_48x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps 128(%rdi), %zmm2
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, 64(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm2, 128(%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i32_48x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 64(%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 128(%rdi), %zmm2
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, 64(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 128(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <48 x i32>, <48 x i32>* %in
  store <48 x i32> %val, <48 x i32>* %out
  ret void
}

define void @i32_49x(<49 x i32>* %in, <49 x i32>* %out) {
; X86-AVX512-VL-LABEL: i32_49x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movw $1, %dx
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa32 192(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps 128(%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm2
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm3
; X86-AVX512-VL-NEXT:    vmovdqa32 %zmm0, 192(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm2, (%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm3, 64(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, 128(%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i32_49x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $1, %dx
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 192(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps 128(%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm2
; X86-AVX512-VL-BW-NEXT:    vmovaps 64(%ecx), %zmm3
; X86-AVX512-VL-BW-NEXT:    vmovdqa32 %zmm0, 192(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm3, 64(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, 128(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm2, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i32_49x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movw $1, %ax
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa32 192(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-NEXT:    vmovaps 128(%rdi), %zmm3
; X86_64-AVX512-VL-NEXT:    vmovdqa32 %zmm0, 192(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm3, 128(%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i32_49x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movw $1, %ax
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 192(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 128(%rdi), %zmm3
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa32 %zmm0, 192(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm3, 128(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <49 x i32>, <49 x i32>* %in
  store <49 x i32> %val, <49 x i32>* %out
  ret void
}


define void @i64_1x(<1 x i64>* %in, <1 x i64>* %out) {
; X86-AVX512-VL-LABEL: i64_1x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movl (%ecx), %edx
; X86-AVX512-VL-NEXT:    movl 4(%ecx), %ecx
; X86-AVX512-VL-NEXT:    movl %edx, (%eax)
; X86-AVX512-VL-NEXT:    movl %ecx, 4(%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i64_1x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movl (%ecx), %edx
; X86-AVX512-VL-BW-NEXT:    movl 4(%ecx), %ecx
; X86-AVX512-VL-BW-NEXT:    movl %edx, (%eax)
; X86-AVX512-VL-BW-NEXT:    movl %ecx, 4(%eax)
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i64_1x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movq (%rdi), %rax
; X86_64-AVX512-VL-NEXT:    movq %rax, (%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i64_1x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movq (%rdi), %rax
; X86_64-AVX512-VL-BW-NEXT:    movq %rax, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <1 x i64>, <1 x i64>* %in
  store <1 x i64> %val, <1 x i64>* %out
  ret void
}

define void @i64_2x(<2 x i64>* %in, <2 x i64>* %out) {
; X86-AVX512-VL-LABEL: i64_2x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %xmm0
; X86-AVX512-VL-NEXT:    vmovaps %xmm0, (%eax)
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i64_2x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %xmm0
; X86-AVX512-VL-BW-NEXT:    vmovaps %xmm0, (%eax)
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i64_2x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %xmm0
; X86_64-AVX512-VL-NEXT:    vmovaps %xmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i64_2x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %xmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %xmm0, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <2 x i64>, <2 x i64>* %in
  store <2 x i64> %val, <2 x i64>* %out
  ret void
}

define void @i64_3x(<3 x i64>* %in, <3 x i64>* %out) {
; X86-AVX512-VL-LABEL: i64_3x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $7, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa64 (%ecx), %ymm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovdqa64 %ymm0, (%eax) {%k1}
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i64_3x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $7, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 (%ecx), %ymm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 %ymm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i64_3x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $7, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa64 (%rdi), %ymm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovdqa64 %ymm0, (%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i64_3x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $7, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 (%rdi), %ymm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 %ymm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <3 x i64>, <3 x i64>* %in
  store <3 x i64> %val, <3 x i64>* %out
  ret void
}

define void @i64_4x(<4 x i64>* %in, <4 x i64>* %out) {
; X86-AVX512-VL-LABEL: i64_4x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %ymm0
; X86-AVX512-VL-NEXT:    vmovaps %ymm0, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i64_4x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %ymm0
; X86-AVX512-VL-BW-NEXT:    vmovaps %ymm0, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i64_4x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %ymm0
; X86_64-AVX512-VL-NEXT:    vmovaps %ymm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i64_4x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %ymm0
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %ymm0, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <4 x i64>, <4 x i64>* %in
  store <4 x i64> %val, <4 x i64>* %out
  ret void
}

define void @i64_5x(<5 x i64>* %in, <5 x i64>* %out) {
; X86-AVX512-VL-LABEL: i64_5x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $31, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa64 (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovdqa64 %zmm0, (%eax) {%k1}
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i64_5x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $31, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 %zmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i64_5x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $31, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa64 (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovdqa64 %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i64_5x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $31, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <5 x i64>, <5 x i64>* %in
  store <5 x i64> %val, <5 x i64>* %out
  ret void
}

define void @i64_6x(<6 x i64>* %in, <6 x i64>* %out) {
; X86-AVX512-VL-LABEL: i64_6x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $63, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa64 (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovdqa64 %zmm0, (%eax) {%k1}
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i64_6x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $63, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 %zmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i64_6x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $63, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa64 (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovdqa64 %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i64_6x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $63, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <6 x i64>, <6 x i64>* %in
  store <6 x i64> %val, <6 x i64>* %out
  ret void
}

define void @i64_7x(<7 x i64>* %in, <7 x i64>* %out) {
; X86-AVX512-VL-LABEL: i64_7x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $127, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa64 (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovdqa64 %zmm0, (%eax) {%k1}
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i64_7x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $127, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 (%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 %zmm0, (%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i64_7x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $127, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa64 (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovdqa64 %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i64_7x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $127, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 (%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 %zmm0, (%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <7 x i64>, <7 x i64>* %in
  store <7 x i64> %val, <7 x i64>* %out
  ret void
}

define void @i64_8x(<8 x i64>* %in, <8 x i64>* %out) {
; X86-AVX512-VL-LABEL: i64_8x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i64_8x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i64_8x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i64_8x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <8 x i64>, <8 x i64>* %in
  store <8 x i64> %val, <8 x i64>* %out
  ret void
}

define void @i64_9x(<9 x i64>* %in, <9 x i64>* %out) {
; X86-AVX512-VL-LABEL: i64_9x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $1, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa64 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovdqa64 %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i64_9x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $1, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i64_9x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $1, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa64 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovdqa64 %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i64_9x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $1, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <9 x i64>, <9 x i64>* %in
  store <9 x i64> %val, <9 x i64>* %out
  ret void
}

define void @i64_10x(<10 x i64>* %in, <10 x i64>* %out) {
; X86-AVX512-VL-LABEL: i64_10x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $3, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa64 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovdqa64 %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i64_10x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $3, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i64_10x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $3, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa64 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovdqa64 %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i64_10x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $3, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <10 x i64>, <10 x i64>* %in
  store <10 x i64> %val, <10 x i64>* %out
  ret void
}

define void @i64_11x(<11 x i64>* %in, <11 x i64>* %out) {
; X86-AVX512-VL-LABEL: i64_11x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $7, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa64 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovdqa64 %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i64_11x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $7, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i64_11x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $7, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa64 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovdqa64 %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i64_11x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $7, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <11 x i64>, <11 x i64>* %in
  store <11 x i64> %val, <11 x i64>* %out
  ret void
}

define void @i64_12x(<12 x i64>* %in, <12 x i64>* %out) {
; X86-AVX512-VL-LABEL: i64_12x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $15, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa64 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovdqa64 %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i64_12x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $15, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i64_12x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $15, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa64 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovdqa64 %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i64_12x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $15, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <12 x i64>, <12 x i64>* %in
  store <12 x i64> %val, <12 x i64>* %out
  ret void
}

define void @i64_13x(<13 x i64>* %in, <13 x i64>* %out) {
; X86-AVX512-VL-LABEL: i64_13x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $31, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa64 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovdqa64 %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i64_13x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $31, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i64_13x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $31, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa64 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovdqa64 %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i64_13x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $31, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <13 x i64>, <13 x i64>* %in
  store <13 x i64> %val, <13 x i64>* %out
  ret void
}

define void @i64_14x(<14 x i64>* %in, <14 x i64>* %out) {
; X86-AVX512-VL-LABEL: i64_14x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $63, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa64 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovdqa64 %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i64_14x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $63, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i64_14x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $63, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa64 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovdqa64 %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i64_14x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $63, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <14 x i64>, <14 x i64>* %in
  store <14 x i64> %val, <14 x i64>* %out
  ret void
}

define void @i64_15x(<15 x i64>* %in, <15 x i64>* %out) {
; X86-AVX512-VL-LABEL: i64_15x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $127, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa64 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovdqa64 %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i64_15x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $127, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 64(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 %zmm0, 64(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i64_15x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $127, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa64 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovdqa64 %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i64_15x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $127, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 64(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 %zmm0, 64(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <15 x i64>, <15 x i64>* %in
  store <15 x i64> %val, <15 x i64>* %out
  ret void
}

define void @i64_16x(<16 x i64>* %in, <16 x i64>* %out) {
; X86-AVX512-VL-LABEL: i64_16x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, (%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, 64(%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i64_16x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovaps 64(%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, 64(%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i64_16x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, 64(%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i64_16x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 64(%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, 64(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <16 x i64>, <16 x i64>* %in
  store <16 x i64> %val, <16 x i64>* %out
  ret void
}

define void @i64_17x(<17 x i64>* %in, <17 x i64>* %out) {
; X86-AVX512-VL-LABEL: i64_17x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $1, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa64 128(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm2
; X86-AVX512-VL-NEXT:    vmovdqa64 %zmm0, 128(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm2, 64(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i64_17x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $1, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 128(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovaps 64(%ecx), %zmm2
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 %zmm0, 128(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 64(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i64_17x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $1, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa64 128(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-NEXT:    vmovdqa64 %zmm0, 128(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i64_17x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $1, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 128(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 %zmm0, 128(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <17 x i64>, <17 x i64>* %in
  store <17 x i64> %val, <17 x i64>* %out
  ret void
}

define void @i64_18x(<18 x i64>* %in, <18 x i64>* %out) {
; X86-AVX512-VL-LABEL: i64_18x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $3, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa64 128(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm2
; X86-AVX512-VL-NEXT:    vmovdqa64 %zmm0, 128(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm2, 64(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i64_18x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $3, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 128(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovaps 64(%ecx), %zmm2
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 %zmm0, 128(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 64(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i64_18x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $3, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa64 128(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-NEXT:    vmovdqa64 %zmm0, 128(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i64_18x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $3, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 128(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 %zmm0, 128(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <18 x i64>, <18 x i64>* %in
  store <18 x i64> %val, <18 x i64>* %out
  ret void
}

define void @i64_30x(<30 x i64>* %in, <30 x i64>* %out) {
; X86-AVX512-VL-LABEL: i64_30x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $63, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa64 192(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps 128(%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm2
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm3
; X86-AVX512-VL-NEXT:    vmovdqa64 %zmm0, 192(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm3, 64(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, 128(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm2, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i64_30x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $63, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 192(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps 128(%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm2
; X86-AVX512-VL-BW-NEXT:    vmovaps 64(%ecx), %zmm3
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 %zmm0, 192(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm3, 64(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, 128(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm2, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i64_30x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $63, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa64 192(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-NEXT:    vmovaps 128(%rdi), %zmm3
; X86_64-AVX512-VL-NEXT:    vmovdqa64 %zmm0, 192(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm3, 128(%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i64_30x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $63, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 192(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 128(%rdi), %zmm3
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 %zmm0, 192(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm3, 128(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <30 x i64>, <30 x i64>* %in
  store <30 x i64> %val, <30 x i64>* %out
  ret void
}

define void @i64_31x(<31 x i64>* %in, <31 x i64>* %out) {
; X86-AVX512-VL-LABEL: i64_31x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $127, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa64 192(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps 128(%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm2
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm3
; X86-AVX512-VL-NEXT:    vmovdqa64 %zmm0, 192(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm3, 64(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, 128(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm2, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i64_31x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $127, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 192(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps 128(%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm2
; X86-AVX512-VL-BW-NEXT:    vmovaps 64(%ecx), %zmm3
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 %zmm0, 192(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm3, 64(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, 128(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm2, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i64_31x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $127, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa64 192(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-NEXT:    vmovaps 128(%rdi), %zmm3
; X86_64-AVX512-VL-NEXT:    vmovdqa64 %zmm0, 192(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm3, 128(%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i64_31x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $127, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 192(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 128(%rdi), %zmm3
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 %zmm0, 192(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm3, 128(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <31 x i64>, <31 x i64>* %in
  store <31 x i64> %val, <31 x i64>* %out
  ret void
}

define void @i64_32x(<32 x i64>* %in, <32 x i64>* %out) {
; X86-AVX512-VL-LABEL: i64_32x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps 192(%ecx), %zmm2
; X86-AVX512-VL-NEXT:    vmovaps 128(%ecx), %zmm3
; X86-AVX512-VL-NEXT:    vmovaps %zmm3, 128(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm2, 192(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, (%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, 64(%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i64_32x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovaps 64(%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovaps 192(%ecx), %zmm2
; X86-AVX512-VL-BW-NEXT:    vmovaps 128(%ecx), %zmm3
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm3, 128(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 192(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, 64(%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i64_32x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps 128(%rdi), %zmm2
; X86_64-AVX512-VL-NEXT:    vmovaps 192(%rdi), %zmm3
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm2, 128(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm3, 192(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, 64(%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i64_32x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 64(%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 128(%rdi), %zmm2
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 192(%rdi), %zmm3
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 128(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm3, 192(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, 64(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <32 x i64>, <32 x i64>* %in
  store <32 x i64> %val, <32 x i64>* %out
  ret void
}

define void @i64_33x(<33 x i64>* %in, <33 x i64>* %out) {
; X86-AVX512-VL-LABEL: i64_33x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $1, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa64 256(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm2
; X86-AVX512-VL-NEXT:    vmovaps 192(%ecx), %zmm3
; X86-AVX512-VL-NEXT:    vmovaps 128(%ecx), %zmm4
; X86-AVX512-VL-NEXT:    vmovdqa64 %zmm0, 256(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm4, 128(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm3, 192(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm2, 64(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i64_33x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $1, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 256(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovaps 64(%ecx), %zmm2
; X86-AVX512-VL-BW-NEXT:    vmovaps 128(%ecx), %zmm3
; X86-AVX512-VL-BW-NEXT:    vmovaps 192(%ecx), %zmm4
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 %zmm0, 256(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm4, 192(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm3, 128(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 64(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i64_33x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $1, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa64 256(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-NEXT:    vmovaps 128(%rdi), %zmm3
; X86_64-AVX512-VL-NEXT:    vmovaps 192(%rdi), %zmm4
; X86_64-AVX512-VL-NEXT:    vmovdqa64 %zmm0, 256(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm4, 192(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm3, 128(%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i64_33x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $1, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 256(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 128(%rdi), %zmm3
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 192(%rdi), %zmm4
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 %zmm0, 256(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm4, 192(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm3, 128(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <33 x i64>, <33 x i64>* %in
  store <33 x i64> %val, <33 x i64>* %out
  ret void
}

define void @i64_34x(<34 x i64>* %in, <34 x i64>* %out) {
; X86-AVX512-VL-LABEL: i64_34x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $3, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa64 256(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm2
; X86-AVX512-VL-NEXT:    vmovaps 192(%ecx), %zmm3
; X86-AVX512-VL-NEXT:    vmovaps 128(%ecx), %zmm4
; X86-AVX512-VL-NEXT:    vmovdqa64 %zmm0, 256(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm4, 128(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm3, 192(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm2, 64(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i64_34x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $3, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 256(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovaps 64(%ecx), %zmm2
; X86-AVX512-VL-BW-NEXT:    vmovaps 128(%ecx), %zmm3
; X86-AVX512-VL-BW-NEXT:    vmovaps 192(%ecx), %zmm4
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 %zmm0, 256(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm4, 192(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm3, 128(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 64(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i64_34x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $3, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa64 256(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-NEXT:    vmovaps 128(%rdi), %zmm3
; X86_64-AVX512-VL-NEXT:    vmovaps 192(%rdi), %zmm4
; X86_64-AVX512-VL-NEXT:    vmovdqa64 %zmm0, 256(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm4, 192(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm3, 128(%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i64_34x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $3, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 256(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 128(%rdi), %zmm3
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 192(%rdi), %zmm4
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 %zmm0, 256(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm4, 192(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm3, 128(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <34 x i64>, <34 x i64>* %in
  store <34 x i64> %val, <34 x i64>* %out
  ret void
}

define void @i64_48x(<48 x i64>* %in, <48 x i64>* %out) {
; X86-AVX512-VL-LABEL: i64_48x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps 256(%ecx), %zmm2
; X86-AVX512-VL-NEXT:    vmovaps 192(%ecx), %zmm3
; X86-AVX512-VL-NEXT:    vmovaps 320(%ecx), %zmm4
; X86-AVX512-VL-NEXT:    vmovaps 128(%ecx), %zmm5
; X86-AVX512-VL-NEXT:    vmovaps %zmm5, 128(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm4, 320(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm3, 192(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm2, 256(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, 64(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i64_48x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    vmovaps 256(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovaps 128(%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm2
; X86-AVX512-VL-BW-NEXT:    vmovaps 64(%ecx), %zmm3
; X86-AVX512-VL-BW-NEXT:    vmovaps 192(%ecx), %zmm4
; X86-AVX512-VL-BW-NEXT:    vmovaps 320(%ecx), %zmm5
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm5, 320(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm4, 192(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm3, 64(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, 128(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 256(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm2, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i64_48x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    vmovaps 256(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovaps 320(%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm2
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm3
; X86_64-AVX512-VL-NEXT:    vmovaps 128(%rdi), %zmm4
; X86_64-AVX512-VL-NEXT:    vmovaps 192(%rdi), %zmm5
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm4, 128(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, 320(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm2, (%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm5, 192(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm3, 64(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 256(%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i64_48x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 256(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 64(%rdi), %zmm2
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 128(%rdi), %zmm3
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 192(%rdi), %zmm4
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 320(%rdi), %zmm5
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm5, 320(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm4, 192(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 64(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm3, 128(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 256(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <48 x i64>, <48 x i64>* %in
  store <48 x i64> %val, <48 x i64>* %out
  ret void
}

define void @i64_49x(<49 x i64>* %in, <49 x i64>* %out) {
; X86-AVX512-VL-LABEL: i64_49x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movb $1, %dl
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovdqa64 384(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm2
; X86-AVX512-VL-NEXT:    vmovaps 192(%ecx), %zmm3
; X86-AVX512-VL-NEXT:    vmovaps 320(%ecx), %zmm4
; X86-AVX512-VL-NEXT:    vmovaps 128(%ecx), %zmm5
; X86-AVX512-VL-NEXT:    vmovaps 256(%ecx), %zmm6
; X86-AVX512-VL-NEXT:    vmovdqa64 %zmm0, 384(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm6, 256(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm5, 128(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm4, 320(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm3, 192(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm2, 64(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, (%eax)
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: i64_49x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movb $1, %dl
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 384(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovaps 256(%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovaps 128(%ecx), %zmm2
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm3
; X86-AVX512-VL-BW-NEXT:    vmovaps 64(%ecx), %zmm4
; X86-AVX512-VL-BW-NEXT:    vmovaps 192(%ecx), %zmm5
; X86-AVX512-VL-BW-NEXT:    vmovaps 320(%ecx), %zmm6
; X86-AVX512-VL-BW-NEXT:    vmovdqa64 %zmm0, 384(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm6, 320(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm5, 192(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm4, 64(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 128(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, 256(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm3, (%eax)
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: i64_49x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    movb $1, %al
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovdqa64 384(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovaps 256(%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps 320(%rdi), %zmm2
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm3
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm4
; X86_64-AVX512-VL-NEXT:    vmovaps 128(%rdi), %zmm5
; X86_64-AVX512-VL-NEXT:    vmovaps 192(%rdi), %zmm6
; X86_64-AVX512-VL-NEXT:    vmovdqa64 %zmm0, 384(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm5, 128(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm2, 320(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm3, (%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm6, 192(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm4, 64(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, 256(%rsi)
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: i64_49x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    movb $1, %al
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 384(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 256(%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm2
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 64(%rdi), %zmm3
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 128(%rdi), %zmm4
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 192(%rdi), %zmm5
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 320(%rdi), %zmm6
; X86_64-AVX512-VL-BW-NEXT:    vmovdqa64 %zmm0, 384(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm6, 320(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm5, 192(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm3, 64(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm4, 128(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, 256(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm2, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <49 x i64>, <49 x i64>* %in
  store <49 x i64> %val, <49 x i64>* %out
  ret void
}

define void @float_1025x(<1025 x float>* %in, <1025 x float>* %out) {
; X86-AVX512-VL-LABEL: float_1025x:
; X86-AVX512-VL:       # %bb.0: # %entry
; X86-AVX512-VL-NEXT:    subl $3772, %esp # imm = 0xEBC
; X86-AVX512-VL-NEXT:    .cfi_def_cfa_offset 3776
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-NEXT:    movw $1, %dx
; X86-AVX512-VL-NEXT:    kmovw %edx, %k1
; X86-AVX512-VL-NEXT:    vmovaps 4096(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps (%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 64(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 128(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 192(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 256(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 320(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 384(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 448(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 512(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 576(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 640(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 704(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 768(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 832(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 896(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 960(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 1024(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 1088(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 1152(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 1216(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 1280(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 1344(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 1408(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 1472(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 1536(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 1600(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 1664(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 1728(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 1792(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 1856(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 1920(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 1984(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 2048(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 2112(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 2176(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 2240(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 2304(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 2368(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 2432(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 2496(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 2560(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 2624(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 2688(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 2752(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 2816(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 2880(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 2944(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 3008(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 3072(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 3136(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 3200(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 3264(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 3328(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 3392(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 3456(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 3520(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 3584(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups %zmm0, (%esp) # 64-byte Spill
; X86-AVX512-VL-NEXT:    vmovaps 3648(%ecx), %zmm6
; X86-AVX512-VL-NEXT:    vmovaps 3712(%ecx), %zmm5
; X86-AVX512-VL-NEXT:    vmovaps 3776(%ecx), %zmm4
; X86-AVX512-VL-NEXT:    vmovaps 3840(%ecx), %zmm3
; X86-AVX512-VL-NEXT:    vmovaps 3904(%ecx), %zmm2
; X86-AVX512-VL-NEXT:    vmovaps 3968(%ecx), %zmm1
; X86-AVX512-VL-NEXT:    vmovaps 4032(%ecx), %zmm0
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm7 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm7, 4096(%eax) {%k1}
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 4032(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm1, 3968(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm2, 3904(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm3, 3840(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm4, 3776(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm5, 3712(%eax)
; X86-AVX512-VL-NEXT:    vmovaps %zmm6, 3648(%eax)
; X86-AVX512-VL-NEXT:    vmovups (%esp), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 3584(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 3520(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 3456(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 3392(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 3328(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 3264(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 3200(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 3136(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 3072(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 3008(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 2944(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 2880(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 2816(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 2752(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 2688(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 2624(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 2560(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 2496(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 2432(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 2368(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 2304(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 2240(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 2176(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 2112(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 2048(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 1984(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 1920(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 1856(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 1792(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 1728(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 1664(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 1600(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 1536(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 1472(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 1408(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 1344(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 1280(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 1216(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 1152(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 1088(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 1024(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 960(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 896(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 832(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 768(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 704(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 640(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 576(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 512(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 448(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 384(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 320(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 256(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 192(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 128(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, 64(%eax)
; X86-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-NEXT:    vmovaps %zmm0, (%eax)
; X86-AVX512-VL-NEXT:    addl $3772, %esp # imm = 0xEBC
; X86-AVX512-VL-NEXT:    .cfi_def_cfa_offset 4
; X86-AVX512-VL-NEXT:    vzeroupper
; X86-AVX512-VL-NEXT:    retl
;
; X86-AVX512-VL-BW-LABEL: float_1025x:
; X86-AVX512-VL-BW:       # %bb.0: # %entry
; X86-AVX512-VL-BW-NEXT:    subl $3772, %esp # imm = 0xEBC
; X86-AVX512-VL-BW-NEXT:    .cfi_def_cfa_offset 3776
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-BW-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-AVX512-VL-BW-NEXT:    movw $1, %dx
; X86-AVX512-VL-BW-NEXT:    kmovd %edx, %k1
; X86-AVX512-VL-BW-NEXT:    vmovaps 4096(%ecx), %zmm0 {%k1} {z}
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps (%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 64(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 256(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 320(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 512(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 576(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 768(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 832(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 1024(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 1088(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 1280(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 1344(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 1536(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 1600(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 1792(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 1856(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 2048(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 2112(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 2304(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 2368(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 2560(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 2624(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 2816(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 2880(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 3072(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 3136(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 3328(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 3392(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 3584(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 3648(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 3840(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 3904(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 192(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 448(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 704(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 960(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 1216(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 1472(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 1728(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 1984(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 2240(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 2496(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 2752(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 3008(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 3264(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 3520(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 3776(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 4032(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 128(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 384(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 640(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 896(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 1152(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 1408(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 1664(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 1920(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 2176(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups %zmm0, (%esp) # 64-byte Spill
; X86-AVX512-VL-BW-NEXT:    vmovaps 2432(%ecx), %zmm6
; X86-AVX512-VL-BW-NEXT:    vmovaps 2688(%ecx), %zmm5
; X86-AVX512-VL-BW-NEXT:    vmovaps 2944(%ecx), %zmm4
; X86-AVX512-VL-BW-NEXT:    vmovaps 3200(%ecx), %zmm3
; X86-AVX512-VL-BW-NEXT:    vmovaps 3456(%ecx), %zmm2
; X86-AVX512-VL-BW-NEXT:    vmovaps 3712(%ecx), %zmm1
; X86-AVX512-VL-BW-NEXT:    vmovaps 3968(%ecx), %zmm0
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm7 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm7, 4096(%eax) {%k1}
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 3968(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm1, 3712(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 3456(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm3, 3200(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm4, 2944(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm5, 2688(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm6, 2432(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups (%esp), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 2176(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 1920(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 1664(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 1408(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 1152(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 896(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 640(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 384(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 128(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 4032(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 3776(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 3520(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 3264(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 3008(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 2752(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 2496(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 2240(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 1984(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 1728(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 1472(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 1216(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 960(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 704(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 448(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 192(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 3904(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 3840(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 3648(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 3584(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 3392(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 3328(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 3136(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 3072(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 2880(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 2816(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 2624(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 2560(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 2368(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 2304(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 2112(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 2048(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 1856(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 1792(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 1600(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 1536(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 1344(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 1280(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 1088(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 1024(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 832(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 768(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 576(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 512(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 320(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 256(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 64(%eax)
; X86-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%e{{[sb]}}p), %zmm0 # 64-byte Reload
; X86-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%eax)
; X86-AVX512-VL-BW-NEXT:    addl $3772, %esp # imm = 0xEBC
; X86-AVX512-VL-BW-NEXT:    .cfi_def_cfa_offset 4
; X86-AVX512-VL-BW-NEXT:    vzeroupper
; X86-AVX512-VL-BW-NEXT:    retl
;
; X86_64-AVX512-VL-LABEL: float_1025x:
; X86_64-AVX512-VL:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-NEXT:    subq $2104, %rsp ## imm = 0x838
; X86_64-AVX512-VL-NEXT:    .cfi_def_cfa_offset 2112
; X86_64-AVX512-VL-NEXT:    movw $1, %ax
; X86_64-AVX512-VL-NEXT:    kmovw %eax, %k1
; X86_64-AVX512-VL-NEXT:    vmovaps 4096(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-NEXT:    vmovaps (%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-NEXT:    vmovaps 64(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-NEXT:    vmovaps 128(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-NEXT:    vmovaps 192(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-NEXT:    vmovaps 256(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-NEXT:    vmovaps 320(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-NEXT:    vmovaps 384(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-NEXT:    vmovaps 448(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-NEXT:    vmovaps 512(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-NEXT:    vmovaps 576(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-NEXT:    vmovaps 640(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-NEXT:    vmovaps 704(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-NEXT:    vmovaps 768(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-NEXT:    vmovaps 832(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-NEXT:    vmovaps 896(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-NEXT:    vmovaps 960(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-NEXT:    vmovaps 1024(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-NEXT:    vmovaps 1088(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-NEXT:    vmovaps 1152(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-NEXT:    vmovaps 1216(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-NEXT:    vmovaps 1280(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-NEXT:    vmovaps 1344(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-NEXT:    vmovaps 1408(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-NEXT:    vmovaps 1472(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-NEXT:    vmovaps 1536(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-NEXT:    vmovaps 1600(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-NEXT:    vmovaps 1664(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-NEXT:    vmovaps 1728(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-NEXT:    vmovaps 1792(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-NEXT:    vmovaps 1856(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-NEXT:    vmovaps 1920(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-NEXT:    vmovaps 1984(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovups %zmm0, (%rsp) ## 64-byte Spill
; X86_64-AVX512-VL-NEXT:    vmovaps 2048(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-NEXT:    vmovaps 2112(%rdi), %zmm30
; X86_64-AVX512-VL-NEXT:    vmovaps 2176(%rdi), %zmm29
; X86_64-AVX512-VL-NEXT:    vmovaps 2240(%rdi), %zmm28
; X86_64-AVX512-VL-NEXT:    vmovaps 2304(%rdi), %zmm27
; X86_64-AVX512-VL-NEXT:    vmovaps 2368(%rdi), %zmm26
; X86_64-AVX512-VL-NEXT:    vmovaps 2432(%rdi), %zmm25
; X86_64-AVX512-VL-NEXT:    vmovaps 2496(%rdi), %zmm24
; X86_64-AVX512-VL-NEXT:    vmovaps 2560(%rdi), %zmm23
; X86_64-AVX512-VL-NEXT:    vmovaps 2624(%rdi), %zmm22
; X86_64-AVX512-VL-NEXT:    vmovaps 2688(%rdi), %zmm21
; X86_64-AVX512-VL-NEXT:    vmovaps 2752(%rdi), %zmm20
; X86_64-AVX512-VL-NEXT:    vmovaps 2816(%rdi), %zmm19
; X86_64-AVX512-VL-NEXT:    vmovaps 2880(%rdi), %zmm18
; X86_64-AVX512-VL-NEXT:    vmovaps 2944(%rdi), %zmm17
; X86_64-AVX512-VL-NEXT:    vmovaps 3008(%rdi), %zmm16
; X86_64-AVX512-VL-NEXT:    vmovaps 3072(%rdi), %zmm15
; X86_64-AVX512-VL-NEXT:    vmovaps 3136(%rdi), %zmm14
; X86_64-AVX512-VL-NEXT:    vmovaps 3200(%rdi), %zmm13
; X86_64-AVX512-VL-NEXT:    vmovaps 3264(%rdi), %zmm12
; X86_64-AVX512-VL-NEXT:    vmovaps 3328(%rdi), %zmm11
; X86_64-AVX512-VL-NEXT:    vmovaps 3392(%rdi), %zmm10
; X86_64-AVX512-VL-NEXT:    vmovaps 3456(%rdi), %zmm9
; X86_64-AVX512-VL-NEXT:    vmovaps 3520(%rdi), %zmm8
; X86_64-AVX512-VL-NEXT:    vmovaps 3584(%rdi), %zmm7
; X86_64-AVX512-VL-NEXT:    vmovaps 3648(%rdi), %zmm6
; X86_64-AVX512-VL-NEXT:    vmovaps 3712(%rdi), %zmm5
; X86_64-AVX512-VL-NEXT:    vmovaps 3776(%rdi), %zmm4
; X86_64-AVX512-VL-NEXT:    vmovaps 3840(%rdi), %zmm3
; X86_64-AVX512-VL-NEXT:    vmovaps 3904(%rdi), %zmm2
; X86_64-AVX512-VL-NEXT:    vmovaps 3968(%rdi), %zmm1
; X86_64-AVX512-VL-NEXT:    vmovaps 4032(%rdi), %zmm0
; X86_64-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm31 ## 64-byte Reload
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm31, 4096(%rsi) {%k1}
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 4032(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm1, 3968(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm2, 3904(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm3, 3840(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm4, 3776(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm5, 3712(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm6, 3648(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm7, 3584(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm8, 3520(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm9, 3456(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm10, 3392(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm11, 3328(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm12, 3264(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm13, 3200(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm14, 3136(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm15, 3072(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm16, 3008(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm17, 2944(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm18, 2880(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm19, 2816(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm20, 2752(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm21, 2688(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm22, 2624(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm23, 2560(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm24, 2496(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm25, 2432(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm26, 2368(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm27, 2304(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm28, 2240(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm29, 2176(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm30, 2112(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 2048(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovups (%rsp), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 1984(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 1920(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 1856(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 1792(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 1728(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 1664(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 1600(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 1536(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 1472(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 1408(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 1344(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 1280(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 1216(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 1152(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 1088(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 1024(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 960(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 896(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 832(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 768(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 704(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 640(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 576(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 512(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 448(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 384(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 320(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 256(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 192(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 128(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, 64(%rsi)
; X86_64-AVX512-VL-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-NEXT:    vmovaps %zmm0, (%rsi)
; X86_64-AVX512-VL-NEXT:    addq $2104, %rsp ## imm = 0x838
; X86_64-AVX512-VL-NEXT:    vzeroupper
; X86_64-AVX512-VL-NEXT:    retq
;
; X86_64-AVX512-VL-BW-LABEL: float_1025x:
; X86_64-AVX512-VL-BW:       ## %bb.0: ## %entry
; X86_64-AVX512-VL-BW-NEXT:    subq $2104, %rsp ## imm = 0x838
; X86_64-AVX512-VL-BW-NEXT:    .cfi_def_cfa_offset 2112
; X86_64-AVX512-VL-BW-NEXT:    movw $1, %ax
; X86_64-AVX512-VL-BW-NEXT:    kmovd %eax, %k1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 4096(%rdi), %zmm0 {%k1} {z}
; X86_64-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 256(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 320(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 512(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 576(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 768(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 832(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 1024(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 1088(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 1280(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 1344(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 1536(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 1600(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 1792(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 1856(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 2048(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 2112(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 2304(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 2368(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 2560(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 2624(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 2816(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 2880(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 3072(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 3136(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 3328(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 3392(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 3584(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 3648(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 3840(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 3904(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovups %zmm0, (%rsp) ## 64-byte Spill
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 448(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 704(%rdi), %zmm30
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 960(%rdi), %zmm29
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 1216(%rdi), %zmm28
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 1472(%rdi), %zmm27
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 1728(%rdi), %zmm26
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 1984(%rdi), %zmm25
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 2240(%rdi), %zmm24
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 2496(%rdi), %zmm23
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 2752(%rdi), %zmm21
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 3008(%rdi), %zmm20
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 3264(%rdi), %zmm19
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 3520(%rdi), %zmm18
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 3776(%rdi), %zmm17
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 4032(%rdi), %zmm16
; X86_64-AVX512-VL-BW-NEXT:    vmovaps (%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 64(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovups %zmm0, {{[-0-9]+}}(%r{{[sb]}}p) ## 64-byte Spill
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 128(%rdi), %zmm15
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 192(%rdi), %zmm22
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 384(%rdi), %zmm14
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 640(%rdi), %zmm13
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 896(%rdi), %zmm12
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 1152(%rdi), %zmm11
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 1408(%rdi), %zmm10
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 1664(%rdi), %zmm9
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 1920(%rdi), %zmm8
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 2176(%rdi), %zmm7
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 2432(%rdi), %zmm6
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 2688(%rdi), %zmm5
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 2944(%rdi), %zmm4
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 3200(%rdi), %zmm3
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 3456(%rdi), %zmm2
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 3712(%rdi), %zmm1
; X86_64-AVX512-VL-BW-NEXT:    vmovaps 3968(%rdi), %zmm0
; X86_64-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm31 ## 64-byte Reload
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm31, 4096(%rsi) {%k1}
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 3968(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm1, 3712(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm2, 3456(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm3, 3200(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm4, 2944(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm5, 2688(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm6, 2432(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm7, 2176(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm8, 1920(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm9, 1664(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm10, 1408(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm11, 1152(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm12, 896(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm13, 640(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm14, 384(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm15, 128(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm16, 4032(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm17, 3776(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm18, 3520(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm19, 3264(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm20, 3008(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm21, 2752(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm23, 2496(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm24, 2240(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm25, 1984(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm26, 1728(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm27, 1472(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm28, 1216(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm29, 960(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm30, 704(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 448(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm22, 192(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovups (%rsp), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 3904(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 3840(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 3648(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 3584(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 3392(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 3328(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 3136(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 3072(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 2880(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 2816(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 2624(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 2560(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 2368(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 2304(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 2112(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 2048(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 1856(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 1792(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 1600(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 1536(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 1344(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 1280(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 1088(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 1024(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 832(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 768(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 576(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 512(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 320(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 256(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, 64(%rsi)
; X86_64-AVX512-VL-BW-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %zmm0 ## 64-byte Reload
; X86_64-AVX512-VL-BW-NEXT:    vmovaps %zmm0, (%rsi)
; X86_64-AVX512-VL-BW-NEXT:    addq $2104, %rsp ## imm = 0x838
; X86_64-AVX512-VL-BW-NEXT:    vzeroupper
; X86_64-AVX512-VL-BW-NEXT:    retq
entry:
  %val = load <1025 x float>, <1025 x float>* %in
  store <1025 x float> %val, <1025 x float>* %out
  ret void
}

