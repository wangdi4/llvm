; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_avx512_vpmm
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx512vpmm -mattr=+avx512vl --show-mc-encoding | FileCheck %s

define <8 x float> @test_mm256_dpph_ps(<8 x float> %__W1, <8 x float> %__W2, <16 x half> %__A, <16 x half> %__B) {
; CHECK-LABEL: test_mm256_dpph_ps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    # kill: def $ymm1 killed $ymm1 killed $ymm0_ymm1 def $ymm0_ymm1
; CHECK-NEXT:    # kill: def $ymm0 killed $ymm0 killed $ymm0_ymm1 def $ymm0_ymm1
; CHECK-NEXT:    vmmxf16ps %ymm3, %ymm2, %ymm0 # encoding: [0x62,0xf6,0x6e,0x28,0x7f,0xc3]
; CHECK-NEXT:    # kill: def $ymm0 killed $ymm0 killed $ymm0_ymm1
; CHECK-NEXT:    retq # encoding: [0xc3]
entry:
  %r = tail call {<8 x float>, <8 x float>} @llvm.x86.vpmm.vmmxf16ps.256(<8 x float> %__W1, <8 x float> %__W2, <16 x half> %__A, <16 x half> %__B)
  %r0 = extractvalue {<8 x float>, <8 x float>} %r, 0
  ret <8 x float> %r0
}

define <4 x float> @test_mm_dpph_ps(<4 x float> %__W1, <4 x float> %__W2, <8 x half> %__A, <8 x half> %__B) {
; CHECK-LABEL: test_mm_dpph_ps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    # kill: def $xmm1 killed $xmm1 killed $xmm0_xmm1 def $xmm0_xmm1
; CHECK-NEXT:    # kill: def $xmm0 killed $xmm0 killed $xmm0_xmm1 def $xmm0_xmm1
; CHECK-NEXT:    vmmxf16ps %xmm3, %xmm2, %xmm0 # encoding: [0x62,0xf6,0x6e,0x08,0x7f,0xc3]
; CHECK-NEXT:    # kill: def $xmm0 killed $xmm0 killed $xmm0_xmm1
; CHECK-NEXT:    retq # encoding: [0xc3]
entry:
  %r = tail call {<4 x float>, <4 x float>} @llvm.x86.vpmm.vmmxf16ps.128(<4 x float> %__W1, <4 x float> %__W2, <8 x half> %__A, <8 x half> %__B)
  %r0 = extractvalue {<4 x float>, <4 x float>} %r, 0
  ret <4 x float> %r0
}

define <4 x float> @test_mm_vpmmi_ps(<4 x float> %__W1, <8 x half> %__A, <8 x half> %__B) {
; CHECK-LABEL: test_mm_vpmmi_ps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vmmif16ps $0, %xmm2, %xmm1, %xmm0 # encoding: [0x62,0xf3,0x76,0x08,0x6f,0xc2,0x00]
; CHECK-NEXT:    retq # encoding: [0xc3]
entry:
  %r = tail call <4 x float> @llvm.x86.vpmm.vmmif16ps.128(<4 x float> %__W1, <8 x half> %__A, <8 x half> %__B, i32 0)
  ret <4 x float> %r
}

define <8 x float> @test_mm256_vpmmi_ps(<8 x float> %__W1, <16 x half> %__A, <16 x half> %__B) {
; CHECK-LABEL: test_mm256_vpmmi_ps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vmmif16ps $0, %ymm2, %ymm1, %ymm0 # encoding: [0x62,0xf3,0x76,0x28,0x6f,0xc2,0x00]
; CHECK-NEXT:    retq # encoding: [0xc3]
entry:
  %r = tail call <8 x float> @llvm.x86.vpmm.vmmif16ps.256(<8 x float> %__W1, <16 x half> %__A, <16 x half> %__B, i32 0)
  ret <8 x float> %r
}

declare {<4 x float>, <4 x float>} @llvm.x86.vpmm.vmmxf16ps.128(<4 x float>, <4 x float>, <8 x half>, <8 x half>)
declare {<8 x float>, <8 x float>} @llvm.x86.vpmm.vmmxf16ps.256(<8 x float>, <8 x float>, <16 x half>, <16 x half>)
declare <4 x float> @llvm.x86.vpmm.vmmif16ps.128(<4 x float>, <8 x half>, <8 x half>, i32)
declare <8 x float> @llvm.x86.vpmm.vmmif16ps.256(<8 x float>, <16 x half>, <16 x half>, i32)
