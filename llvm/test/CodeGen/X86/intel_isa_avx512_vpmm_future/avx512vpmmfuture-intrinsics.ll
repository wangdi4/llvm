; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_avx512_vpmm
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx512vpmm --show-mc-encoding | FileCheck %s

define <16 x float> @test_mm512_dpph_ps(<16 x float> %__W1, <16 x float> %__W2, <32 x half> %__A, <32 x half> %__B) {
; CHECK-LABEL: test_mm512_dpph_ps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    # kill: def $zmm1 killed $zmm1 killed $zmm0_zmm1 def $zmm0_zmm1
; CHECK-NEXT:    # kill: def $zmm0 killed $zmm0 killed $zmm0_zmm1 def $zmm0_zmm1
; CHECK-NEXT:    vmmxf16ps %zmm3, %zmm2, %zmm0 # encoding: [0x62,0xf6,0x6e,0x48,0x7f,0xc3]
; CHECK-NEXT:    # kill: def $zmm0 killed $zmm0 killed $zmm0_zmm1
; CHECK-NEXT:    retq # encoding: [0xc3]
entry:
  %r = tail call {<16 x float>, <16 x float>} @llvm.x86.vpmm.vmmxf16ps.512(<16 x float> %__W1, <16 x float> %__W2, <32 x half> %__A, <32 x half> %__B)
  %r0 = extractvalue {<16 x float>, <16 x float>} %r, 0
  ret <16 x float> %r0
}

define <16 x float> @test_mm512_vpmmi_ps(<16 x float> %__W1, <32 x half> %__A, <32 x half> %__B) {
; CHECK-LABEL: test_mm512_vpmmi_ps:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vmmif16ps $0, %zmm2, %zmm1, %zmm0 # encoding: [0x62,0xf3,0x76,0x48,0x6f,0xc2,0x00]
; CHECK-NEXT:    retq # encoding: [0xc3]
entry:
  %r = tail call <16 x float> @llvm.x86.vpmm.vmmif16ps.512(<16 x float> %__W1, <32 x half> %__A, <32 x half> %__B, i32 0)
  ret <16 x float> %r
}

declare {<16 x float>, <16 x float>} @llvm.x86.vpmm.vmmxf16ps.512(<16 x float>, <16 x float>, <32 x half>, <32 x half>)
declare <16 x float> @llvm.x86.vpmm.vmmif16ps.512(<16 x float>, <32 x half>, <32 x half>, i32)
