; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_avx256p
; RUN: llc < %s -mtriple=i686-unknown-unknown -mattr=+avx256p -O3 | FileCheck %s --check-prefixes=AVX256P-X86
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx256p -O3 | FileCheck %s --check-prefixes=AVX256P-X64

declare i1  @llvm.experimental.constrained.fptosi.i1.f16(half, metadata)
declare i8  @llvm.experimental.constrained.fptosi.i8.f16(half, metadata)
declare i16 @llvm.experimental.constrained.fptosi.i16.f16(half, metadata)
declare i32 @llvm.experimental.constrained.fptosi.i32.f16(half, metadata)
declare i64 @llvm.experimental.constrained.fptosi.i64.f16(half, metadata)
declare i1  @llvm.experimental.constrained.fptoui.i1.f16(half, metadata)
declare i8  @llvm.experimental.constrained.fptoui.i8.f16(half, metadata)
declare i16 @llvm.experimental.constrained.fptoui.i16.f16(half, metadata)
declare i32 @llvm.experimental.constrained.fptoui.i32.f16(half, metadata)
declare i64 @llvm.experimental.constrained.fptoui.i64.f16(half, metadata)

define i1 @fptosi_f16toi1(half %x) #0 {
; AVX256P-X86-LABEL: fptosi_f16toi1:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vcvttsh2si {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    # kill: def $al killed $al killed $eax
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fptosi_f16toi1:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvttsh2si %xmm0, %eax
; AVX256P-X64-NEXT:    # kill: def $al killed $al killed $eax
; AVX256P-X64-NEXT:    retq
  %result = call i1 @llvm.experimental.constrained.fptosi.i1.f16(half %x,
                                               metadata !"fpexcept.strict") #0
  ret i1 %result
}

define i8 @fptosi_f16toi8(half %x) #0 {
; AVX256P-X86-LABEL: fptosi_f16toi8:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vcvttsh2si {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    # kill: def $al killed $al killed $eax
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fptosi_f16toi8:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvttsh2si %xmm0, %eax
; AVX256P-X64-NEXT:    # kill: def $al killed $al killed $eax
; AVX256P-X64-NEXT:    retq
  %result = call i8 @llvm.experimental.constrained.fptosi.i8.f16(half %x,
                                               metadata !"fpexcept.strict") #0
  ret i8 %result
}

define i16 @fptosi_f16toi16(half %x) #0 {
; AVX256P-X86-LABEL: fptosi_f16toi16:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vcvttsh2si {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fptosi_f16toi16:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvttsh2si %xmm0, %eax
; AVX256P-X64-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX256P-X64-NEXT:    retq
  %result = call i16 @llvm.experimental.constrained.fptosi.i16.f16(half %x,
                                               metadata !"fpexcept.strict") #0
  ret i16 %result
}

define i32 @fptosi_f16toi32(half %x) #0 {
; AVX256P-X86-LABEL: fptosi_f16toi32:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vcvttsh2si {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fptosi_f16toi32:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvttsh2si %xmm0, %eax
; AVX256P-X64-NEXT:    retq
  %result = call i32 @llvm.experimental.constrained.fptosi.i32.f16(half %x,
                                               metadata !"fpexcept.strict") #0
  ret i32 %result
}

define i64 @fptosi_f16toi64(half %x) #0 {
; AVX256P-X86-LABEL: fptosi_f16toi64:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %eax
; AVX256P-X86-NEXT:    vmovsh {{[0-9]+}}(%esp), %xmm0
; AVX256P-X86-NEXT:    vmovsh %xmm0, (%esp)
; AVX256P-X86-NEXT:    calll __fixhfdi
; AVX256P-X86-NEXT:    popl %ecx
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fptosi_f16toi64:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvttsh2si %xmm0, %rax
; AVX256P-X64-NEXT:    retq
  %result = call i64 @llvm.experimental.constrained.fptosi.i64.f16(half %x,
                                               metadata !"fpexcept.strict") #0
  ret i64 %result
}

define i1 @fptoui_f16toi1(half %x) #0 {
; AVX256P-X86-LABEL: fptoui_f16toi1:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vcvttsh2si {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    # kill: def $al killed $al killed $eax
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fptoui_f16toi1:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvttsh2si %xmm0, %eax
; AVX256P-X64-NEXT:    # kill: def $al killed $al killed $eax
; AVX256P-X64-NEXT:    retq
  %result = call i1 @llvm.experimental.constrained.fptoui.i1.f16(half %x,
                                               metadata !"fpexcept.strict") #0
  ret i1 %result
}

define i8 @fptoui_f16toi8(half %x) #0 {
; AVX256P-X86-LABEL: fptoui_f16toi8:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vcvttsh2si {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    # kill: def $al killed $al killed $eax
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fptoui_f16toi8:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvttsh2si %xmm0, %eax
; AVX256P-X64-NEXT:    # kill: def $al killed $al killed $eax
; AVX256P-X64-NEXT:    retq
  %result = call i8 @llvm.experimental.constrained.fptoui.i8.f16(half %x,
                                               metadata !"fpexcept.strict") #0
  ret i8 %result
}

define i16 @fptoui_f16toi16(half %x) #0 {
; AVX256P-X86-LABEL: fptoui_f16toi16:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vcvttsh2si {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fptoui_f16toi16:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvttsh2si %xmm0, %eax
; AVX256P-X64-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX256P-X64-NEXT:    retq
  %result = call i16 @llvm.experimental.constrained.fptoui.i16.f16(half %x,
                                               metadata !"fpexcept.strict") #0
  ret i16 %result
}

define i32 @fptoui_f16toi32(half %x) #0 {
; AVX256P-X86-LABEL: fptoui_f16toi32:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vcvttsh2usi {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fptoui_f16toi32:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvttsh2usi %xmm0, %eax
; AVX256P-X64-NEXT:    retq
  %result = call i32 @llvm.experimental.constrained.fptoui.i32.f16(half %x,
                                               metadata !"fpexcept.strict") #0
  ret i32 %result
}

define i64 @fptoui_f16toi64(half %x) #0 {
; AVX256P-X86-LABEL: fptoui_f16toi64:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %eax
; AVX256P-X86-NEXT:    vmovsh {{[0-9]+}}(%esp), %xmm0
; AVX256P-X86-NEXT:    vmovsh %xmm0, (%esp)
; AVX256P-X86-NEXT:    calll __fixunshfdi
; AVX256P-X86-NEXT:    popl %ecx
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fptoui_f16toi64:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvttsh2usi %xmm0, %rax
; AVX256P-X64-NEXT:    retq
  %result = call i64 @llvm.experimental.constrained.fptoui.i64.f16(half %x,
                                               metadata !"fpexcept.strict") #0
  ret i64 %result
}

attributes #0 = { strictfp nounwind }
