; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_avx256p
; RUN: llc < %s -mtriple=i686-unknown-unknown -mattr=+avx256p -O3 | FileCheck %s --check-prefixes=AVX256P-X86
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx256p -O3 | FileCheck %s --check-prefixes=AVX256P-X64

declare i1  @llvm.experimental.constrained.fptosi.i1.f32(float, metadata)
declare i8  @llvm.experimental.constrained.fptosi.i8.f32(float, metadata)
declare i16 @llvm.experimental.constrained.fptosi.i16.f32(float, metadata)
declare i32 @llvm.experimental.constrained.fptosi.i32.f32(float, metadata)
declare i64 @llvm.experimental.constrained.fptosi.i64.f32(float, metadata)
declare i1  @llvm.experimental.constrained.fptoui.i1.f32(float, metadata)
declare i8  @llvm.experimental.constrained.fptoui.i8.f32(float, metadata)
declare i16 @llvm.experimental.constrained.fptoui.i16.f32(float, metadata)
declare i32 @llvm.experimental.constrained.fptoui.i32.f32(float, metadata)
declare i64 @llvm.experimental.constrained.fptoui.i64.f32(float, metadata)

declare i1  @llvm.experimental.constrained.fptosi.i1.f64(double, metadata)
declare i8  @llvm.experimental.constrained.fptosi.i8.f64(double, metadata)
declare i16 @llvm.experimental.constrained.fptosi.i16.f64(double, metadata)
declare i32 @llvm.experimental.constrained.fptosi.i32.f64(double, metadata)
declare i64 @llvm.experimental.constrained.fptosi.i64.f64(double, metadata)
declare i1  @llvm.experimental.constrained.fptoui.i1.f64(double, metadata)
declare i8  @llvm.experimental.constrained.fptoui.i8.f64(double, metadata)
declare i16 @llvm.experimental.constrained.fptoui.i16.f64(double, metadata)
declare i32 @llvm.experimental.constrained.fptoui.i32.f64(double, metadata)
declare i64 @llvm.experimental.constrained.fptoui.i64.f64(double, metadata)

define i1 @fptosi_f32toi1(float %x) #0 {
; AVX256P-X86-LABEL: fptosi_f32toi1:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vcvttss2si {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    # kill: def $al killed $al killed $eax
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fptosi_f32toi1:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvttss2si %xmm0, %eax
; AVX256P-X64-NEXT:    # kill: def $al killed $al killed $eax
; AVX256P-X64-NEXT:    retq
  %result = call i1 @llvm.experimental.constrained.fptosi.i1.f32(float %x,
                                               metadata !"fpexcept.strict") #0
  ret i1 %result
}

define i8 @fptosi_f32toi8(float %x) #0 {
; AVX256P-X86-LABEL: fptosi_f32toi8:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vcvttss2si {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    # kill: def $al killed $al killed $eax
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fptosi_f32toi8:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvttss2si %xmm0, %eax
; AVX256P-X64-NEXT:    # kill: def $al killed $al killed $eax
; AVX256P-X64-NEXT:    retq
  %result = call i8 @llvm.experimental.constrained.fptosi.i8.f32(float %x,
                                               metadata !"fpexcept.strict") #0
  ret i8 %result
}

define i16 @fptosi_f32toi16(float %x) #0 {
; AVX256P-X86-LABEL: fptosi_f32toi16:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vcvttss2si {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fptosi_f32toi16:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvttss2si %xmm0, %eax
; AVX256P-X64-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX256P-X64-NEXT:    retq
  %result = call i16 @llvm.experimental.constrained.fptosi.i16.f32(float %x,
                                               metadata !"fpexcept.strict") #0
  ret i16 %result
}

define i32 @fptosi_f32toi32(float %x) #0 {
; AVX256P-X86-LABEL: fptosi_f32toi32:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vcvttss2si {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fptosi_f32toi32:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvttss2si %xmm0, %eax
; AVX256P-X64-NEXT:    retq
  %result = call i32 @llvm.experimental.constrained.fptosi.i32.f32(float %x,
                                               metadata !"fpexcept.strict") #0
  ret i32 %result
}

define i64 @fptosi_f32toi64(float %x) #0 {
; AVX256P-X86-LABEL: fptosi_f32toi64:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa_offset 8
; AVX256P-X86-NEXT:    .cfi_offset %ebp, -8
; AVX256P-X86-NEXT:    movl %esp, %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa_register %ebp
; AVX256P-X86-NEXT:    andl $-8, %esp
; AVX256P-X86-NEXT:    subl $8, %esp
; AVX256P-X86-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; AVX256P-X86-NEXT:    vmovss %xmm0, (%esp)
; AVX256P-X86-NEXT:    flds (%esp)
; AVX256P-X86-NEXT:    fisttpll (%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    movl (%esp), %eax
; AVX256P-X86-NEXT:    movl {{[0-9]+}}(%esp), %edx
; AVX256P-X86-NEXT:    movl %ebp, %esp
; AVX256P-X86-NEXT:    popl %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa %esp, 4
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fptosi_f32toi64:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvttss2si %xmm0, %rax
; AVX256P-X64-NEXT:    retq
  %result = call i64 @llvm.experimental.constrained.fptosi.i64.f32(float %x,
                                               metadata !"fpexcept.strict") #0
  ret i64 %result
}

define i1 @fptoui_f32toi1(float %x) #0 {
; AVX256P-X86-LABEL: fptoui_f32toi1:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vcvttss2si {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    # kill: def $al killed $al killed $eax
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fptoui_f32toi1:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvttss2si %xmm0, %eax
; AVX256P-X64-NEXT:    # kill: def $al killed $al killed $eax
; AVX256P-X64-NEXT:    retq
  %result = call i1 @llvm.experimental.constrained.fptoui.i1.f32(float %x,
                                               metadata !"fpexcept.strict") #0
  ret i1 %result
}

define i8 @fptoui_f32toi8(float %x) #0 {
; AVX256P-X86-LABEL: fptoui_f32toi8:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vcvttss2si {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    # kill: def $al killed $al killed $eax
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fptoui_f32toi8:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvttss2si %xmm0, %eax
; AVX256P-X64-NEXT:    # kill: def $al killed $al killed $eax
; AVX256P-X64-NEXT:    retq
  %result = call i8 @llvm.experimental.constrained.fptoui.i8.f32(float %x,
                                               metadata !"fpexcept.strict") #0
  ret i8 %result
}

define i16 @fptoui_f32toi16(float %x) #0 {
; AVX256P-X86-LABEL: fptoui_f32toi16:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vcvttss2si {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fptoui_f32toi16:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvttss2si %xmm0, %eax
; AVX256P-X64-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX256P-X64-NEXT:    retq
  %result = call i16 @llvm.experimental.constrained.fptoui.i16.f32(float %x,
                                               metadata !"fpexcept.strict") #0
  ret i16 %result
}

define i32 @fptoui_f32toi32(float %x) #0 {
; AVX256P-X86-LABEL: fptoui_f32toi32:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vcvttss2usi {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fptoui_f32toi32:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvttss2usi %xmm0, %eax
; AVX256P-X64-NEXT:    retq
  %result = call i32 @llvm.experimental.constrained.fptoui.i32.f32(float %x,
                                               metadata !"fpexcept.strict") #0
  ret i32 %result
}

define i64 @fptoui_f32toi64(float %x) #0 {
; AVX256P-X86-LABEL: fptoui_f32toi64:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa_offset 8
; AVX256P-X86-NEXT:    .cfi_offset %ebp, -8
; AVX256P-X86-NEXT:    movl %esp, %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa_register %ebp
; AVX256P-X86-NEXT:    andl $-8, %esp
; AVX256P-X86-NEXT:    subl $8, %esp
; AVX256P-X86-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; AVX256P-X86-NEXT:    vmovss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; AVX256P-X86-NEXT:    xorl %edx, %edx
; AVX256P-X86-NEXT:    vcomiss %xmm0, %xmm1
; AVX256P-X86-NEXT:    setbe %dl
; AVX256P-X86-NEXT:    kmovd %edx, %k1
; AVX256P-X86-NEXT:    vmovss %xmm1, %xmm1, %xmm1 {%k1} {z}
; AVX256P-X86-NEXT:    vsubss %xmm1, %xmm0, %xmm0
; AVX256P-X86-NEXT:    vmovss %xmm0, (%esp)
; AVX256P-X86-NEXT:    flds (%esp)
; AVX256P-X86-NEXT:    fisttpll (%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    shll $31, %edx
; AVX256P-X86-NEXT:    xorl {{[0-9]+}}(%esp), %edx
; AVX256P-X86-NEXT:    movl (%esp), %eax
; AVX256P-X86-NEXT:    movl %ebp, %esp
; AVX256P-X86-NEXT:    popl %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa %esp, 4
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fptoui_f32toi64:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvttss2usi %xmm0, %rax
; AVX256P-X64-NEXT:    retq
  %result = call i64 @llvm.experimental.constrained.fptoui.i64.f32(float %x,
                                               metadata !"fpexcept.strict") #0
  ret i64 %result
}

define i8 @fptosi_f64toi8(double %x) #0 {
; AVX256P-X86-LABEL: fptosi_f64toi8:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vcvttsd2si {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    # kill: def $al killed $al killed $eax
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fptosi_f64toi8:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvttsd2si %xmm0, %eax
; AVX256P-X64-NEXT:    # kill: def $al killed $al killed $eax
; AVX256P-X64-NEXT:    retq
  %result = call i8 @llvm.experimental.constrained.fptosi.i8.f64(double %x,
                                               metadata !"fpexcept.strict") #0
  ret i8 %result
}

define i16 @fptosi_f64toi16(double %x) #0 {
; AVX256P-X86-LABEL: fptosi_f64toi16:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vcvttsd2si {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fptosi_f64toi16:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvttsd2si %xmm0, %eax
; AVX256P-X64-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX256P-X64-NEXT:    retq
  %result = call i16 @llvm.experimental.constrained.fptosi.i16.f64(double %x,
                                               metadata !"fpexcept.strict") #0
  ret i16 %result
}

define i32 @fptosi_f64toi32(double %x) #0 {
; AVX256P-X86-LABEL: fptosi_f64toi32:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vcvttsd2si {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fptosi_f64toi32:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvttsd2si %xmm0, %eax
; AVX256P-X64-NEXT:    retq
  %result = call i32 @llvm.experimental.constrained.fptosi.i32.f64(double %x,
                                               metadata !"fpexcept.strict") #0
  ret i32 %result
}

define i64 @fptosi_f64toi64(double %x) #0 {
; AVX256P-X86-LABEL: fptosi_f64toi64:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa_offset 8
; AVX256P-X86-NEXT:    .cfi_offset %ebp, -8
; AVX256P-X86-NEXT:    movl %esp, %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa_register %ebp
; AVX256P-X86-NEXT:    andl $-8, %esp
; AVX256P-X86-NEXT:    subl $8, %esp
; AVX256P-X86-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; AVX256P-X86-NEXT:    vmovsd %xmm0, (%esp)
; AVX256P-X86-NEXT:    fldl (%esp)
; AVX256P-X86-NEXT:    fisttpll (%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    movl (%esp), %eax
; AVX256P-X86-NEXT:    movl {{[0-9]+}}(%esp), %edx
; AVX256P-X86-NEXT:    movl %ebp, %esp
; AVX256P-X86-NEXT:    popl %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa %esp, 4
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fptosi_f64toi64:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvttsd2si %xmm0, %rax
; AVX256P-X64-NEXT:    retq
  %result = call i64 @llvm.experimental.constrained.fptosi.i64.f64(double %x,
                                               metadata !"fpexcept.strict") #0
  ret i64 %result
}

define i1 @fptoui_f64toi1(double %x) #0 {
; AVX256P-X86-LABEL: fptoui_f64toi1:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vcvttsd2si {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    # kill: def $al killed $al killed $eax
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fptoui_f64toi1:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvttsd2si %xmm0, %eax
; AVX256P-X64-NEXT:    # kill: def $al killed $al killed $eax
; AVX256P-X64-NEXT:    retq
  %result = call i1 @llvm.experimental.constrained.fptoui.i1.f64(double %x,
                                               metadata !"fpexcept.strict") #0
  ret i1 %result
}

define i8 @fptoui_f64toi8(double %x) #0 {
; AVX256P-X86-LABEL: fptoui_f64toi8:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vcvttsd2si {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    # kill: def $al killed $al killed $eax
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fptoui_f64toi8:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvttsd2si %xmm0, %eax
; AVX256P-X64-NEXT:    # kill: def $al killed $al killed $eax
; AVX256P-X64-NEXT:    retq
  %result = call i8 @llvm.experimental.constrained.fptoui.i8.f64(double %x,
                                               metadata !"fpexcept.strict") #0
  ret i8 %result
}

define i16 @fptoui_f64toi16(double %x) #0 {
; AVX256P-X86-LABEL: fptoui_f64toi16:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vcvttsd2si {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fptoui_f64toi16:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvttsd2si %xmm0, %eax
; AVX256P-X64-NEXT:    # kill: def $ax killed $ax killed $eax
; AVX256P-X64-NEXT:    retq
  %result = call i16 @llvm.experimental.constrained.fptoui.i16.f64(double %x,
                                               metadata !"fpexcept.strict") #0
  ret i16 %result
}

define i32 @fptoui_f64toi32(double %x) #0 {
; AVX256P-X86-LABEL: fptoui_f64toi32:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vcvttsd2usi {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fptoui_f64toi32:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvttsd2usi %xmm0, %eax
; AVX256P-X64-NEXT:    retq
  %result = call i32 @llvm.experimental.constrained.fptoui.i32.f64(double %x,
                                               metadata !"fpexcept.strict") #0
  ret i32 %result
}

define i64 @fptoui_f64toi64(double %x) #0 {
; AVX256P-X86-LABEL: fptoui_f64toi64:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa_offset 8
; AVX256P-X86-NEXT:    .cfi_offset %ebp, -8
; AVX256P-X86-NEXT:    movl %esp, %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa_register %ebp
; AVX256P-X86-NEXT:    andl $-8, %esp
; AVX256P-X86-NEXT:    subl $8, %esp
; AVX256P-X86-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; AVX256P-X86-NEXT:    vmovsd {{.*#+}} xmm1 = mem[0],zero
; AVX256P-X86-NEXT:    xorl %edx, %edx
; AVX256P-X86-NEXT:    vcomisd %xmm0, %xmm1
; AVX256P-X86-NEXT:    setbe %dl
; AVX256P-X86-NEXT:    kmovd %edx, %k1
; AVX256P-X86-NEXT:    vmovsd %xmm1, %xmm1, %xmm1 {%k1} {z}
; AVX256P-X86-NEXT:    vsubsd %xmm1, %xmm0, %xmm0
; AVX256P-X86-NEXT:    vmovsd %xmm0, (%esp)
; AVX256P-X86-NEXT:    fldl (%esp)
; AVX256P-X86-NEXT:    fisttpll (%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    shll $31, %edx
; AVX256P-X86-NEXT:    xorl {{[0-9]+}}(%esp), %edx
; AVX256P-X86-NEXT:    movl (%esp), %eax
; AVX256P-X86-NEXT:    movl %ebp, %esp
; AVX256P-X86-NEXT:    popl %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa %esp, 4
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fptoui_f64toi64:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvttsd2usi %xmm0, %rax
; AVX256P-X64-NEXT:    retq
  %result = call i64 @llvm.experimental.constrained.fptoui.i64.f64(double %x,
                                               metadata !"fpexcept.strict") #0
  ret i64 %result
}

attributes #0 = { strictfp }
