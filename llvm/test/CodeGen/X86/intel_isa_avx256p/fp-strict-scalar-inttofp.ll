; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_avx256p
; RUN: llc < %s -mtriple=i686-unknown-unknown -mattr=+avx256p -O3 | FileCheck %s --check-prefixes=AVX256P-X86
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx256p -O3 | FileCheck %s --check-prefixes=AVX256P-X64

declare float @llvm.experimental.constrained.sitofp.f32.i1(i1, metadata, metadata)
declare float @llvm.experimental.constrained.sitofp.f32.i8(i8, metadata, metadata)
declare float @llvm.experimental.constrained.sitofp.f32.i16(i16, metadata, metadata)
declare float @llvm.experimental.constrained.sitofp.f32.i32(i32, metadata, metadata)
declare float @llvm.experimental.constrained.sitofp.f32.i64(i64, metadata, metadata)
declare float @llvm.experimental.constrained.uitofp.f32.i1(i1, metadata, metadata)
declare float @llvm.experimental.constrained.uitofp.f32.i8(i8, metadata, metadata)
declare float @llvm.experimental.constrained.uitofp.f32.i16(i16, metadata, metadata)
declare float @llvm.experimental.constrained.uitofp.f32.i32(i32, metadata, metadata)
declare float @llvm.experimental.constrained.uitofp.f32.i64(i64, metadata, metadata)

declare double @llvm.experimental.constrained.sitofp.f64.i1(i1, metadata, metadata)
declare double @llvm.experimental.constrained.sitofp.f64.i8(i8, metadata, metadata)
declare double @llvm.experimental.constrained.sitofp.f64.i16(i16, metadata, metadata)
declare double @llvm.experimental.constrained.sitofp.f64.i32(i32, metadata, metadata)
declare double @llvm.experimental.constrained.sitofp.f64.i64(i64, metadata, metadata)
declare double @llvm.experimental.constrained.uitofp.f64.i1(i1, metadata, metadata)
declare double @llvm.experimental.constrained.uitofp.f64.i8(i8, metadata, metadata)
declare double @llvm.experimental.constrained.uitofp.f64.i16(i16, metadata, metadata)
declare double @llvm.experimental.constrained.uitofp.f64.i32(i32, metadata, metadata)
declare double @llvm.experimental.constrained.uitofp.f64.i64(i64, metadata, metadata)

define float @sitofp_i1tof32(i1 %x) #0 {
; AVX256P-X86-LABEL: sitofp_i1tof32:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %eax
; AVX256P-X86-NEXT:    .cfi_def_cfa_offset 8
; AVX256P-X86-NEXT:    movzbl {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    andb $1, %al
; AVX256P-X86-NEXT:    negb %al
; AVX256P-X86-NEXT:    movsbl %al, %eax
; AVX256P-X86-NEXT:    vcvtsi2ss %eax, %xmm0, %xmm0
; AVX256P-X86-NEXT:    vmovss %xmm0, (%esp)
; AVX256P-X86-NEXT:    flds (%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    popl %eax
; AVX256P-X86-NEXT:    .cfi_def_cfa_offset 4
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: sitofp_i1tof32:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    andb $1, %dil
; AVX256P-X64-NEXT:    negb %dil
; AVX256P-X64-NEXT:    movsbl %dil, %eax
; AVX256P-X64-NEXT:    vcvtsi2ss %eax, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
  %result = call float @llvm.experimental.constrained.sitofp.f32.i1(i1 %x,
                                               metadata !"round.dynamic",
                                               metadata !"fpexcept.strict") #0
  ret float %result
}

define float @sitofp_i8tof32(i8 %x) #0 {
; AVX256P-X86-LABEL: sitofp_i8tof32:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %eax
; AVX256P-X86-NEXT:    .cfi_def_cfa_offset 8
; AVX256P-X86-NEXT:    movsbl {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    vcvtsi2ss %eax, %xmm0, %xmm0
; AVX256P-X86-NEXT:    vmovss %xmm0, (%esp)
; AVX256P-X86-NEXT:    flds (%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    popl %eax
; AVX256P-X86-NEXT:    .cfi_def_cfa_offset 4
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: sitofp_i8tof32:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    movsbl %dil, %eax
; AVX256P-X64-NEXT:    vcvtsi2ss %eax, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
  %result = call float @llvm.experimental.constrained.sitofp.f32.i8(i8 %x,
                                               metadata !"round.dynamic",
                                               metadata !"fpexcept.strict") #0
  ret float %result
}

define float @sitofp_i16tof32(i16 %x) #0 {
; AVX256P-X86-LABEL: sitofp_i16tof32:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %eax
; AVX256P-X86-NEXT:    .cfi_def_cfa_offset 8
; AVX256P-X86-NEXT:    movswl {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    vcvtsi2ss %eax, %xmm0, %xmm0
; AVX256P-X86-NEXT:    vmovss %xmm0, (%esp)
; AVX256P-X86-NEXT:    flds (%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    popl %eax
; AVX256P-X86-NEXT:    .cfi_def_cfa_offset 4
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: sitofp_i16tof32:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    movswl %di, %eax
; AVX256P-X64-NEXT:    vcvtsi2ss %eax, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
  %result = call float @llvm.experimental.constrained.sitofp.f32.i16(i16 %x,
                                               metadata !"round.dynamic",
                                               metadata !"fpexcept.strict") #0
  ret float %result
}

define float @sitofp_i32tof32(i32 %x) #0 {
; AVX256P-X86-LABEL: sitofp_i32tof32:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %eax
; AVX256P-X86-NEXT:    .cfi_def_cfa_offset 8
; AVX256P-X86-NEXT:    vcvtsi2ssl {{[0-9]+}}(%esp), %xmm0, %xmm0
; AVX256P-X86-NEXT:    vmovss %xmm0, (%esp)
; AVX256P-X86-NEXT:    flds (%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    popl %eax
; AVX256P-X86-NEXT:    .cfi_def_cfa_offset 4
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: sitofp_i32tof32:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvtsi2ss %edi, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
  %result = call float @llvm.experimental.constrained.sitofp.f32.i32(i32 %x,
                                               metadata !"round.dynamic",
                                               metadata !"fpexcept.strict") #0
  ret float %result
}

define float @sitofp_i64tof32(i64 %x) #0 {
; AVX256P-X86-LABEL: sitofp_i64tof32:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %eax
; AVX256P-X86-NEXT:    .cfi_def_cfa_offset 8
; AVX256P-X86-NEXT:    fildll {{[0-9]+}}(%esp)
; AVX256P-X86-NEXT:    fstps (%esp)
; AVX256P-X86-NEXT:    flds (%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    popl %eax
; AVX256P-X86-NEXT:    .cfi_def_cfa_offset 4
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: sitofp_i64tof32:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvtsi2ss %rdi, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
  %result = call float @llvm.experimental.constrained.sitofp.f32.i64(i64 %x,
                                               metadata !"round.dynamic",
                                               metadata !"fpexcept.strict") #0
  ret float %result
}

define float @uitofp_i1tof32(i1 %x) #0 {
; AVX256P-X86-LABEL: uitofp_i1tof32:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %eax
; AVX256P-X86-NEXT:    .cfi_def_cfa_offset 8
; AVX256P-X86-NEXT:    movzbl {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    andb $1, %al
; AVX256P-X86-NEXT:    movzbl %al, %eax
; AVX256P-X86-NEXT:    vcvtsi2ss %eax, %xmm0, %xmm0
; AVX256P-X86-NEXT:    vmovss %xmm0, (%esp)
; AVX256P-X86-NEXT:    flds (%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    popl %eax
; AVX256P-X86-NEXT:    .cfi_def_cfa_offset 4
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: uitofp_i1tof32:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    andl $1, %edi
; AVX256P-X64-NEXT:    vcvtsi2ss %edi, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
  %result = call float @llvm.experimental.constrained.uitofp.f32.i1(i1 %x,
                                               metadata !"round.dynamic",
                                               metadata !"fpexcept.strict") #0
  ret float %result
}

define float @uitofp_i8tof32(i8 %x) #0 {
; AVX256P-X86-LABEL: uitofp_i8tof32:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %eax
; AVX256P-X86-NEXT:    .cfi_def_cfa_offset 8
; AVX256P-X86-NEXT:    movzbl {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    vcvtsi2ss %eax, %xmm0, %xmm0
; AVX256P-X86-NEXT:    vmovss %xmm0, (%esp)
; AVX256P-X86-NEXT:    flds (%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    popl %eax
; AVX256P-X86-NEXT:    .cfi_def_cfa_offset 4
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: uitofp_i8tof32:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    movzbl %dil, %eax
; AVX256P-X64-NEXT:    vcvtsi2ss %eax, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
  %result = call float @llvm.experimental.constrained.uitofp.f32.i8(i8 %x,
                                               metadata !"round.dynamic",
                                               metadata !"fpexcept.strict") #0
  ret float %result
}

define float @uitofp_i16tof32(i16 %x) #0 {
; AVX256P-X86-LABEL: uitofp_i16tof32:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %eax
; AVX256P-X86-NEXT:    .cfi_def_cfa_offset 8
; AVX256P-X86-NEXT:    movzwl {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    vcvtsi2ss %eax, %xmm0, %xmm0
; AVX256P-X86-NEXT:    vmovss %xmm0, (%esp)
; AVX256P-X86-NEXT:    flds (%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    popl %eax
; AVX256P-X86-NEXT:    .cfi_def_cfa_offset 4
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: uitofp_i16tof32:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    movzwl %di, %eax
; AVX256P-X64-NEXT:    vcvtsi2ss %eax, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
  %result = call float @llvm.experimental.constrained.uitofp.f32.i16(i16 %x,
                                               metadata !"round.dynamic",
                                               metadata !"fpexcept.strict") #0
  ret float %result
}

define float @uitofp_i32tof32(i32 %x) #0 {
; AVX256P-X86-LABEL: uitofp_i32tof32:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %eax
; AVX256P-X86-NEXT:    .cfi_def_cfa_offset 8
; AVX256P-X86-NEXT:    vcvtusi2ssl {{[0-9]+}}(%esp), %xmm0, %xmm0
; AVX256P-X86-NEXT:    vmovss %xmm0, (%esp)
; AVX256P-X86-NEXT:    flds (%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    popl %eax
; AVX256P-X86-NEXT:    .cfi_def_cfa_offset 4
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: uitofp_i32tof32:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvtusi2ss %edi, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
  %result = call float @llvm.experimental.constrained.uitofp.f32.i32(i32 %x,
                                               metadata !"round.dynamic",
                                               metadata !"fpexcept.strict") #0
  ret float %result
}

define float @uitofp_i64tof32(i64 %x) #0 {
; AVX256P-X86-LABEL: uitofp_i64tof32:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa_offset 8
; AVX256P-X86-NEXT:    .cfi_offset %ebp, -8
; AVX256P-X86-NEXT:    movl %esp, %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa_register %ebp
; AVX256P-X86-NEXT:    andl $-8, %esp
; AVX256P-X86-NEXT:    subl $16, %esp
; AVX256P-X86-NEXT:    movl 12(%ebp), %eax
; AVX256P-X86-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; AVX256P-X86-NEXT:    vmovlps %xmm0, {{[0-9]+}}(%esp)
; AVX256P-X86-NEXT:    shrl $31, %eax
; AVX256P-X86-NEXT:    fildll {{[0-9]+}}(%esp)
; AVX256P-X86-NEXT:    fadds {{\.?LCPI[0-9]+_[0-9]+}}(,%eax,4)
; AVX256P-X86-NEXT:    fstps {{[0-9]+}}(%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; AVX256P-X86-NEXT:    vmovss %xmm0, (%esp)
; AVX256P-X86-NEXT:    flds (%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    movl %ebp, %esp
; AVX256P-X86-NEXT:    popl %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa %esp, 4
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: uitofp_i64tof32:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvtusi2ss %rdi, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
  %result = call float @llvm.experimental.constrained.uitofp.f32.i64(i64 %x,
                                               metadata !"round.dynamic",
                                               metadata !"fpexcept.strict") #0
  ret float %result
}

define double @sitofp_i8tof64(i8 %x) #0 {
; AVX256P-X86-LABEL: sitofp_i8tof64:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa_offset 8
; AVX256P-X86-NEXT:    .cfi_offset %ebp, -8
; AVX256P-X86-NEXT:    movl %esp, %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa_register %ebp
; AVX256P-X86-NEXT:    andl $-8, %esp
; AVX256P-X86-NEXT:    subl $8, %esp
; AVX256P-X86-NEXT:    movsbl 8(%ebp), %eax
; AVX256P-X86-NEXT:    vcvtsi2sd %eax, %xmm0, %xmm0
; AVX256P-X86-NEXT:    vmovsd %xmm0, (%esp)
; AVX256P-X86-NEXT:    fldl (%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    movl %ebp, %esp
; AVX256P-X86-NEXT:    popl %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa %esp, 4
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: sitofp_i8tof64:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    movsbl %dil, %eax
; AVX256P-X64-NEXT:    vcvtsi2sd %eax, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
  %result = call double @llvm.experimental.constrained.sitofp.f64.i8(i8 %x,
                                               metadata !"round.dynamic",
                                               metadata !"fpexcept.strict") #0
  ret double %result
}

define double @sitofp_i16tof64(i16 %x) #0 {
; AVX256P-X86-LABEL: sitofp_i16tof64:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa_offset 8
; AVX256P-X86-NEXT:    .cfi_offset %ebp, -8
; AVX256P-X86-NEXT:    movl %esp, %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa_register %ebp
; AVX256P-X86-NEXT:    andl $-8, %esp
; AVX256P-X86-NEXT:    subl $8, %esp
; AVX256P-X86-NEXT:    movswl 8(%ebp), %eax
; AVX256P-X86-NEXT:    vcvtsi2sd %eax, %xmm0, %xmm0
; AVX256P-X86-NEXT:    vmovsd %xmm0, (%esp)
; AVX256P-X86-NEXT:    fldl (%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    movl %ebp, %esp
; AVX256P-X86-NEXT:    popl %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa %esp, 4
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: sitofp_i16tof64:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    movswl %di, %eax
; AVX256P-X64-NEXT:    vcvtsi2sd %eax, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
  %result = call double @llvm.experimental.constrained.sitofp.f64.i16(i16 %x,
                                               metadata !"round.dynamic",
                                               metadata !"fpexcept.strict") #0
  ret double %result
}

define double @sitofp_i32tof64(i32 %x) #0 {
; AVX256P-X86-LABEL: sitofp_i32tof64:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa_offset 8
; AVX256P-X86-NEXT:    .cfi_offset %ebp, -8
; AVX256P-X86-NEXT:    movl %esp, %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa_register %ebp
; AVX256P-X86-NEXT:    andl $-8, %esp
; AVX256P-X86-NEXT:    subl $8, %esp
; AVX256P-X86-NEXT:    vcvtsi2sdl 8(%ebp), %xmm0, %xmm0
; AVX256P-X86-NEXT:    vmovsd %xmm0, (%esp)
; AVX256P-X86-NEXT:    fldl (%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    movl %ebp, %esp
; AVX256P-X86-NEXT:    popl %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa %esp, 4
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: sitofp_i32tof64:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvtsi2sd %edi, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
  %result = call double @llvm.experimental.constrained.sitofp.f64.i32(i32 %x,
                                               metadata !"round.dynamic",
                                               metadata !"fpexcept.strict") #0
  ret double %result
}

define double @sitofp_i64tof64(i64 %x) #0 {
; AVX256P-X86-LABEL: sitofp_i64tof64:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa_offset 8
; AVX256P-X86-NEXT:    .cfi_offset %ebp, -8
; AVX256P-X86-NEXT:    movl %esp, %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa_register %ebp
; AVX256P-X86-NEXT:    andl $-8, %esp
; AVX256P-X86-NEXT:    subl $8, %esp
; AVX256P-X86-NEXT:    fildll 8(%ebp)
; AVX256P-X86-NEXT:    fstpl (%esp)
; AVX256P-X86-NEXT:    fldl (%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    movl %ebp, %esp
; AVX256P-X86-NEXT:    popl %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa %esp, 4
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: sitofp_i64tof64:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvtsi2sd %rdi, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
  %result = call double @llvm.experimental.constrained.sitofp.f64.i64(i64 %x,
                                               metadata !"round.dynamic",
                                               metadata !"fpexcept.strict") #0
  ret double %result
}

define double @uitofp_i1tof64(i1 %x) #0 {
; AVX256P-X86-LABEL: uitofp_i1tof64:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa_offset 8
; AVX256P-X86-NEXT:    .cfi_offset %ebp, -8
; AVX256P-X86-NEXT:    movl %esp, %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa_register %ebp
; AVX256P-X86-NEXT:    andl $-8, %esp
; AVX256P-X86-NEXT:    subl $8, %esp
; AVX256P-X86-NEXT:    movzbl 8(%ebp), %eax
; AVX256P-X86-NEXT:    andb $1, %al
; AVX256P-X86-NEXT:    movzbl %al, %eax
; AVX256P-X86-NEXT:    vcvtsi2sd %eax, %xmm0, %xmm0
; AVX256P-X86-NEXT:    vmovsd %xmm0, (%esp)
; AVX256P-X86-NEXT:    fldl (%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    movl %ebp, %esp
; AVX256P-X86-NEXT:    popl %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa %esp, 4
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: uitofp_i1tof64:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    andl $1, %edi
; AVX256P-X64-NEXT:    vcvtsi2sd %edi, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
  %result = call double @llvm.experimental.constrained.uitofp.f64.i1(i1 %x,
                                               metadata !"round.dynamic",
                                               metadata !"fpexcept.strict") #0
  ret double %result
}

define double @uitofp_i8tof64(i8 %x) #0 {
; AVX256P-X86-LABEL: uitofp_i8tof64:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa_offset 8
; AVX256P-X86-NEXT:    .cfi_offset %ebp, -8
; AVX256P-X86-NEXT:    movl %esp, %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa_register %ebp
; AVX256P-X86-NEXT:    andl $-8, %esp
; AVX256P-X86-NEXT:    subl $8, %esp
; AVX256P-X86-NEXT:    movzbl 8(%ebp), %eax
; AVX256P-X86-NEXT:    vcvtsi2sd %eax, %xmm0, %xmm0
; AVX256P-X86-NEXT:    vmovsd %xmm0, (%esp)
; AVX256P-X86-NEXT:    fldl (%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    movl %ebp, %esp
; AVX256P-X86-NEXT:    popl %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa %esp, 4
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: uitofp_i8tof64:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    movzbl %dil, %eax
; AVX256P-X64-NEXT:    vcvtsi2sd %eax, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
  %result = call double @llvm.experimental.constrained.uitofp.f64.i8(i8 %x,
                                               metadata !"round.dynamic",
                                               metadata !"fpexcept.strict") #0
  ret double %result
}

define double @uitofp_i16tof64(i16 %x) #0 {
; AVX256P-X86-LABEL: uitofp_i16tof64:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa_offset 8
; AVX256P-X86-NEXT:    .cfi_offset %ebp, -8
; AVX256P-X86-NEXT:    movl %esp, %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa_register %ebp
; AVX256P-X86-NEXT:    andl $-8, %esp
; AVX256P-X86-NEXT:    subl $8, %esp
; AVX256P-X86-NEXT:    movzwl 8(%ebp), %eax
; AVX256P-X86-NEXT:    vcvtsi2sd %eax, %xmm0, %xmm0
; AVX256P-X86-NEXT:    vmovsd %xmm0, (%esp)
; AVX256P-X86-NEXT:    fldl (%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    movl %ebp, %esp
; AVX256P-X86-NEXT:    popl %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa %esp, 4
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: uitofp_i16tof64:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    movzwl %di, %eax
; AVX256P-X64-NEXT:    vcvtsi2sd %eax, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
  %result = call double @llvm.experimental.constrained.uitofp.f64.i16(i16 %x,
                                               metadata !"round.dynamic",
                                               metadata !"fpexcept.strict") #0
  ret double %result
}

define double @uitofp_i32tof64(i32 %x) #0 {
; AVX256P-X86-LABEL: uitofp_i32tof64:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa_offset 8
; AVX256P-X86-NEXT:    .cfi_offset %ebp, -8
; AVX256P-X86-NEXT:    movl %esp, %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa_register %ebp
; AVX256P-X86-NEXT:    andl $-8, %esp
; AVX256P-X86-NEXT:    subl $8, %esp
; AVX256P-X86-NEXT:    vcvtusi2sdl 8(%ebp), %xmm0, %xmm0
; AVX256P-X86-NEXT:    vmovsd %xmm0, (%esp)
; AVX256P-X86-NEXT:    fldl (%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    movl %ebp, %esp
; AVX256P-X86-NEXT:    popl %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa %esp, 4
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: uitofp_i32tof64:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvtusi2sd %edi, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
  %result = call double @llvm.experimental.constrained.uitofp.f64.i32(i32 %x,
                                               metadata !"round.dynamic",
                                               metadata !"fpexcept.strict") #0
  ret double %result
}

define double @uitofp_i64tof64(i64 %x) #0 {
; AVX256P-X86-LABEL: uitofp_i64tof64:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa_offset 8
; AVX256P-X86-NEXT:    .cfi_offset %ebp, -8
; AVX256P-X86-NEXT:    movl %esp, %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa_register %ebp
; AVX256P-X86-NEXT:    andl $-8, %esp
; AVX256P-X86-NEXT:    subl $24, %esp
; AVX256P-X86-NEXT:    movl 12(%ebp), %eax
; AVX256P-X86-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; AVX256P-X86-NEXT:    vmovlps %xmm0, {{[0-9]+}}(%esp)
; AVX256P-X86-NEXT:    shrl $31, %eax
; AVX256P-X86-NEXT:    fildll {{[0-9]+}}(%esp)
; AVX256P-X86-NEXT:    fadds {{\.?LCPI[0-9]+_[0-9]+}}(,%eax,4)
; AVX256P-X86-NEXT:    fstpl {{[0-9]+}}(%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; AVX256P-X86-NEXT:    vmovsd %xmm0, (%esp)
; AVX256P-X86-NEXT:    fldl (%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    movl %ebp, %esp
; AVX256P-X86-NEXT:    popl %ebp
; AVX256P-X86-NEXT:    .cfi_def_cfa %esp, 4
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: uitofp_i64tof64:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvtusi2sd %rdi, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
  %result = call double @llvm.experimental.constrained.uitofp.f64.i64(i64 %x,
                                               metadata !"round.dynamic",
                                               metadata !"fpexcept.strict") #0
  ret double %result
}

attributes #0 = { strictfp }
; AVX512-X86: {{.*}}
