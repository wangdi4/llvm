; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_avx256p
; RUN: llc < %s -mtriple=i686-unknown-unknown -mattr=+avx256p -O3 | FileCheck %s --check-prefixes=AVX256P-X86
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx256p -O3 | FileCheck %s --check-prefixes=AVX256P-X64

declare double @llvm.experimental.constrained.fadd.f64(double, double, metadata, metadata)
declare float @llvm.experimental.constrained.fadd.f32(float, float, metadata, metadata)
declare double @llvm.experimental.constrained.fsub.f64(double, double, metadata, metadata)
declare float @llvm.experimental.constrained.fsub.f32(float, float, metadata, metadata)
declare double @llvm.experimental.constrained.fmul.f64(double, double, metadata, metadata)
declare float @llvm.experimental.constrained.fmul.f32(float, float, metadata, metadata)
declare double @llvm.experimental.constrained.fdiv.f64(double, double, metadata, metadata)
declare float @llvm.experimental.constrained.fdiv.f32(float, float, metadata, metadata)
declare double @llvm.experimental.constrained.fpext.f64.f32(float, metadata)
declare float @llvm.experimental.constrained.fptrunc.f32.f64(double, metadata, metadata)
declare float @llvm.experimental.constrained.sqrt.f32(float, metadata, metadata)
declare double @llvm.experimental.constrained.sqrt.f64(double, metadata, metadata)
declare float @llvm.experimental.constrained.fma.f32(float, float, float, metadata, metadata)
declare double @llvm.experimental.constrained.fma.f64(double, double, double, metadata, metadata)

define double @fadd_f64(double %a, double %b) nounwind strictfp {
; AVX256P-X86-LABEL: fadd_f64:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %ebp
; AVX256P-X86-NEXT:    movl %esp, %ebp
; AVX256P-X86-NEXT:    andl $-8, %esp
; AVX256P-X86-NEXT:    subl $8, %esp
; AVX256P-X86-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; AVX256P-X86-NEXT:    vaddsd 16(%ebp), %xmm0, %xmm0
; AVX256P-X86-NEXT:    vmovsd %xmm0, (%esp)
; AVX256P-X86-NEXT:    fldl (%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    movl %ebp, %esp
; AVX256P-X86-NEXT:    popl %ebp
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fadd_f64:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vaddsd %xmm1, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
  %ret = call double @llvm.experimental.constrained.fadd.f64(double %a, double %b,
                                                             metadata !"round.dynamic",
                                                             metadata !"fpexcept.strict") #0
  ret double %ret
}

define float @fadd_f32(float %a, float %b) nounwind strictfp {
; AVX256P-X86-LABEL: fadd_f32:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %eax
; AVX256P-X86-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; AVX256P-X86-NEXT:    vaddss {{[0-9]+}}(%esp), %xmm0, %xmm0
; AVX256P-X86-NEXT:    vmovss %xmm0, (%esp)
; AVX256P-X86-NEXT:    flds (%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    popl %eax
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fadd_f32:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vaddss %xmm1, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
  %ret = call float @llvm.experimental.constrained.fadd.f32(float %a, float %b,
                                                            metadata !"round.dynamic",
                                                            metadata !"fpexcept.strict") #0
  ret float %ret
}

define double @fsub_f64(double %a, double %b) nounwind strictfp {
; AVX256P-X86-LABEL: fsub_f64:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %ebp
; AVX256P-X86-NEXT:    movl %esp, %ebp
; AVX256P-X86-NEXT:    andl $-8, %esp
; AVX256P-X86-NEXT:    subl $8, %esp
; AVX256P-X86-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; AVX256P-X86-NEXT:    vsubsd 16(%ebp), %xmm0, %xmm0
; AVX256P-X86-NEXT:    vmovsd %xmm0, (%esp)
; AVX256P-X86-NEXT:    fldl (%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    movl %ebp, %esp
; AVX256P-X86-NEXT:    popl %ebp
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fsub_f64:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vsubsd %xmm1, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
  %ret = call double @llvm.experimental.constrained.fsub.f64(double %a, double %b,
                                                             metadata !"round.dynamic",
                                                             metadata !"fpexcept.strict") #0
  ret double %ret
}

define float @fsub_f32(float %a, float %b) nounwind strictfp {
; AVX256P-X86-LABEL: fsub_f32:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %eax
; AVX256P-X86-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; AVX256P-X86-NEXT:    vsubss {{[0-9]+}}(%esp), %xmm0, %xmm0
; AVX256P-X86-NEXT:    vmovss %xmm0, (%esp)
; AVX256P-X86-NEXT:    flds (%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    popl %eax
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fsub_f32:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vsubss %xmm1, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
  %ret = call float @llvm.experimental.constrained.fsub.f32(float %a, float %b,
                                                            metadata !"round.dynamic",
                                                            metadata !"fpexcept.strict") #0
  ret float %ret
}

define double @fmul_f64(double %a, double %b) nounwind strictfp {
; AVX256P-X86-LABEL: fmul_f64:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %ebp
; AVX256P-X86-NEXT:    movl %esp, %ebp
; AVX256P-X86-NEXT:    andl $-8, %esp
; AVX256P-X86-NEXT:    subl $8, %esp
; AVX256P-X86-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; AVX256P-X86-NEXT:    vmulsd 16(%ebp), %xmm0, %xmm0
; AVX256P-X86-NEXT:    vmovsd %xmm0, (%esp)
; AVX256P-X86-NEXT:    fldl (%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    movl %ebp, %esp
; AVX256P-X86-NEXT:    popl %ebp
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fmul_f64:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vmulsd %xmm1, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
  %ret = call double @llvm.experimental.constrained.fmul.f64(double %a, double %b,
                                                             metadata !"round.dynamic",
                                                             metadata !"fpexcept.strict") #0
  ret double %ret
}

define float @fmul_f32(float %a, float %b) nounwind strictfp {
; AVX256P-X86-LABEL: fmul_f32:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %eax
; AVX256P-X86-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; AVX256P-X86-NEXT:    vmulss {{[0-9]+}}(%esp), %xmm0, %xmm0
; AVX256P-X86-NEXT:    vmovss %xmm0, (%esp)
; AVX256P-X86-NEXT:    flds (%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    popl %eax
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fmul_f32:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vmulss %xmm1, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
  %ret = call float @llvm.experimental.constrained.fmul.f32(float %a, float %b,
                                                            metadata !"round.dynamic",
                                                            metadata !"fpexcept.strict") #0
  ret float %ret
}

define double @fdiv_f64(double %a, double %b) nounwind strictfp {
; AVX256P-X86-LABEL: fdiv_f64:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %ebp
; AVX256P-X86-NEXT:    movl %esp, %ebp
; AVX256P-X86-NEXT:    andl $-8, %esp
; AVX256P-X86-NEXT:    subl $8, %esp
; AVX256P-X86-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; AVX256P-X86-NEXT:    vdivsd 16(%ebp), %xmm0, %xmm0
; AVX256P-X86-NEXT:    vmovsd %xmm0, (%esp)
; AVX256P-X86-NEXT:    fldl (%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    movl %ebp, %esp
; AVX256P-X86-NEXT:    popl %ebp
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fdiv_f64:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vdivsd %xmm1, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
  %ret = call double @llvm.experimental.constrained.fdiv.f64(double %a, double %b,
                                                             metadata !"round.dynamic",
                                                             metadata !"fpexcept.strict") #0
  ret double %ret
}

define float @fdiv_f32(float %a, float %b) nounwind strictfp {
; AVX256P-X86-LABEL: fdiv_f32:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %eax
; AVX256P-X86-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; AVX256P-X86-NEXT:    vdivss {{[0-9]+}}(%esp), %xmm0, %xmm0
; AVX256P-X86-NEXT:    vmovss %xmm0, (%esp)
; AVX256P-X86-NEXT:    flds (%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    popl %eax
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fdiv_f32:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vdivss %xmm1, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
  %ret = call float @llvm.experimental.constrained.fdiv.f32(float %a, float %b,
                                                            metadata !"round.dynamic",
                                                            metadata !"fpexcept.strict") #0
  ret float %ret
}

define void @fpext_f32_to_f64(ptr %val, ptr %ret) nounwind strictfp {
; AVX256P-X86-LABEL: fpext_f32_to_f64:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; AVX256P-X86-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; AVX256P-X86-NEXT:    vcvtss2sd %xmm0, %xmm0, %xmm0
; AVX256P-X86-NEXT:    vmovsd %xmm0, (%eax)
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fpext_f32_to_f64:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; AVX256P-X64-NEXT:    vcvtss2sd %xmm0, %xmm0, %xmm0
; AVX256P-X64-NEXT:    vmovsd %xmm0, (%rsi)
; AVX256P-X64-NEXT:    retq
  %1 = load float, ptr %val, align 4
  %res = call double @llvm.experimental.constrained.fpext.f64.f32(float %1,
                                                                  metadata !"fpexcept.strict") #0
  store double %res, ptr %ret, align 8
  ret void
}

define void @fptrunc_double_to_f32(ptr %val, ptr%ret) nounwind strictfp {
; AVX256P-X86-LABEL: fptrunc_double_to_f32:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; AVX256P-X86-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; AVX256P-X86-NEXT:    vcvtsd2ss %xmm0, %xmm0, %xmm0
; AVX256P-X86-NEXT:    vmovss %xmm0, (%eax)
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fptrunc_double_to_f32:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; AVX256P-X64-NEXT:    vcvtsd2ss %xmm0, %xmm0, %xmm0
; AVX256P-X64-NEXT:    vmovss %xmm0, (%rsi)
; AVX256P-X64-NEXT:    retq
  %1 = load double, ptr %val, align 8
  %res = call float @llvm.experimental.constrained.fptrunc.f32.f64(double %1,
                                                                   metadata !"round.dynamic",
                                                                   metadata !"fpexcept.strict") #0
  store float %res, ptr %ret, align 4
  ret void
}

define void @fsqrt_f64(ptr %a) nounwind strictfp {
; AVX256P-X86-LABEL: fsqrt_f64:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; AVX256P-X86-NEXT:    vsqrtsd %xmm0, %xmm0, %xmm0
; AVX256P-X86-NEXT:    vmovsd %xmm0, (%eax)
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fsqrt_f64:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; AVX256P-X64-NEXT:    vsqrtsd %xmm0, %xmm0, %xmm0
; AVX256P-X64-NEXT:    vmovsd %xmm0, (%rdi)
; AVX256P-X64-NEXT:    retq
  %1 = load double, ptr %a, align 8
  %res = call double @llvm.experimental.constrained.sqrt.f64(double %1,
                                                             metadata !"round.dynamic",
                                                             metadata !"fpexcept.strict") #0
  store double %res, ptr %a, align 8
  ret void
}

define void @fsqrt_f32(ptr %a) nounwind strictfp {
; AVX256P-X86-LABEL: fsqrt_f32:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; AVX256P-X86-NEXT:    vsqrtss %xmm0, %xmm0, %xmm0
; AVX256P-X86-NEXT:    vmovss %xmm0, (%eax)
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fsqrt_f32:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; AVX256P-X64-NEXT:    vsqrtss %xmm0, %xmm0, %xmm0
; AVX256P-X64-NEXT:    vmovss %xmm0, (%rdi)
; AVX256P-X64-NEXT:    retq
  %1 = load float, ptr %a, align 4
  %res = call float @llvm.experimental.constrained.sqrt.f32(float %1,
                                                            metadata !"round.dynamic",
                                                            metadata !"fpexcept.strict") #0
  store float %res, ptr %a, align 4
  ret void
}

define double @fma_f64(double %a, double %b, double %c) nounwind strictfp {
; AVX256P-X86-LABEL: fma_f64:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %ebp
; AVX256P-X86-NEXT:    movl %esp, %ebp
; AVX256P-X86-NEXT:    andl $-8, %esp
; AVX256P-X86-NEXT:    subl $8, %esp
; AVX256P-X86-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; AVX256P-X86-NEXT:    vmovsd {{.*#+}} xmm1 = mem[0],zero
; AVX256P-X86-NEXT:    vfmadd213sd {{.*#+}} xmm1 = (xmm0 * xmm1) + mem
; AVX256P-X86-NEXT:    vmovsd %xmm1, (%esp)
; AVX256P-X86-NEXT:    fldl (%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    movl %ebp, %esp
; AVX256P-X86-NEXT:    popl %ebp
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fma_f64:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vfmadd213sd {{.*#+}} xmm0 = (xmm1 * xmm0) + xmm2
; AVX256P-X64-NEXT:    retq
  %res = call double @llvm.experimental.constrained.fma.f64(double %a, double %b, double %c,
                                                            metadata !"round.dynamic",
                                                            metadata !"fpexcept.strict") #0
  ret double %res
}

define float @fma_f32(float %a, float %b, float %c) nounwind strictfp {
; AVX256P-X86-LABEL: fma_f32:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    pushl %eax
; AVX256P-X86-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; AVX256P-X86-NEXT:    vmovss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; AVX256P-X86-NEXT:    vfmadd213ss {{.*#+}} xmm1 = (xmm0 * xmm1) + mem
; AVX256P-X86-NEXT:    vmovss %xmm1, (%esp)
; AVX256P-X86-NEXT:    flds (%esp)
; AVX256P-X86-NEXT:    wait
; AVX256P-X86-NEXT:    popl %eax
; AVX256P-X86-NEXT:    retl
;
; AVX256P-X64-LABEL: fma_f32:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vfmadd213ss {{.*#+}} xmm0 = (xmm1 * xmm0) + xmm2
; AVX256P-X64-NEXT:    retq
  %res = call float @llvm.experimental.constrained.fma.f32(float %a, float %b, float %c,
                                                           metadata !"round.dynamic",
                                                           metadata !"fpexcept.strict") #0
  ret float %res
}

attributes #0 = { strictfp }
