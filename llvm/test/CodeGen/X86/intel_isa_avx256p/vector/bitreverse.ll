; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_avx256p
; RUN: llc < %s -mtriple=x86_64-unknown -mattr=+avx256p --show-mc-encoding | FileCheck %s --check-prefixes=CHECK,GFNI

define <2 x i16> @test_bitreverse_v2i16(<2 x i16> %a) nounwind {
; X86-LABEL: test_bitreverse_v2i16:
; X86:       # %bb.0:
; X86-NEXT:    movzwl {{[0-9]+}}(%esp), %ecx
; X86-NEXT:    movzwl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    rolw $8, %ax
; X86-NEXT:    movl %eax, %edx
; X86-NEXT:    andl $3855, %edx # imm = 0xF0F
; X86-NEXT:    shll $4, %edx
; X86-NEXT:    shrl $4, %eax
; X86-NEXT:    andl $3855, %eax # imm = 0xF0F
; X86-NEXT:    orl %edx, %eax
; X86-NEXT:    movl %eax, %edx
; X86-NEXT:    andl $13107, %edx # imm = 0x3333
; X86-NEXT:    shrl $2, %eax
; X86-NEXT:    andl $13107, %eax # imm = 0x3333
; X86-NEXT:    leal (%eax,%edx,4), %eax
; X86-NEXT:    movl %eax, %edx
; X86-NEXT:    andl $21845, %edx # imm = 0x5555
; X86-NEXT:    shrl %eax
; X86-NEXT:    andl $21845, %eax # imm = 0x5555
; X86-NEXT:    leal (%eax,%edx,2), %eax
; X86-NEXT:    rolw $8, %cx
; X86-NEXT:    movl %ecx, %edx
; X86-NEXT:    andl $3855, %edx # imm = 0xF0F
; X86-NEXT:    shll $4, %edx
; X86-NEXT:    shrl $4, %ecx
; X86-NEXT:    andl $3855, %ecx # imm = 0xF0F
; X86-NEXT:    orl %edx, %ecx
; X86-NEXT:    movl %ecx, %edx
; X86-NEXT:    andl $13107, %edx # imm = 0x3333
; X86-NEXT:    shrl $2, %ecx
; X86-NEXT:    andl $13107, %ecx # imm = 0x3333
; X86-NEXT:    leal (%ecx,%edx,4), %ecx
; X86-NEXT:    movl %ecx, %edx
; X86-NEXT:    andl $21845, %edx # imm = 0x5555
; X86-NEXT:    shrl %ecx
; X86-NEXT:    andl $21845, %ecx # imm = 0x5555
; X86-NEXT:    leal (%ecx,%edx,2), %edx
; X86-NEXT:    # kill: def $ax killed $ax killed $eax
; X86-NEXT:    # kill: def $dx killed $dx killed $edx
; X86-NEXT:    retl
;
; X64-LABEL: test_bitreverse_v2i16:
; X64:       # %bb.0:
; X64-NEXT:    movdqa %xmm0, %xmm1
; X64-NEXT:    psrlw $8, %xmm1
; X64-NEXT:    psllw $8, %xmm0
; X64-NEXT:    por %xmm1, %xmm0
; X64-NEXT:    movdqa %xmm0, %xmm1
; X64-NEXT:    psrlw $4, %xmm1
; X64-NEXT:    movdqa {{.*#+}} xmm2 = [15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15]
; X64-NEXT:    pand %xmm2, %xmm1
; X64-NEXT:    pand %xmm2, %xmm0
; X64-NEXT:    psllw $4, %xmm0
; X64-NEXT:    por %xmm1, %xmm0
; X64-NEXT:    movdqa %xmm0, %xmm1
; X64-NEXT:    psrlw $2, %xmm1
; X64-NEXT:    movdqa {{.*#+}} xmm2 = [51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51]
; X64-NEXT:    pand %xmm2, %xmm1
; X64-NEXT:    pand %xmm2, %xmm0
; X64-NEXT:    psllw $2, %xmm0
; X64-NEXT:    por %xmm1, %xmm0
; X64-NEXT:    movdqa %xmm0, %xmm1
; X64-NEXT:    psrlw $1, %xmm1
; X64-NEXT:    movdqa {{.*#+}} xmm2 = [85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85]
; X64-NEXT:    pand %xmm2, %xmm1
; X64-NEXT:    pand %xmm2, %xmm0
; X64-NEXT:    paddb %xmm0, %xmm0
; X64-NEXT:    por %xmm1, %xmm0
; X64-NEXT:    retq
;
; X86XOP-LABEL: test_bitreverse_v2i16:
; X86XOP:       # %bb.0:
; X86XOP-NEXT:    vpperm {{\.?LCPI[0-9]+_[0-9]+}}, %xmm0, %xmm0, %xmm0
; X86XOP-NEXT:    retl
;
; CHECK-LABEL: test_bitreverse_v2i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpshufb {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0, %xmm0 # EVEX TO VEX Compression xmm0 = xmm0[1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14]
; CHECK-NEXT:    # encoding: [0xc4,0xe2,0x79,0x00,0x05,A,A,A,A]
; CHECK-NEXT:    # fixup A - offset: 5, value: {{\.?LCPI[0-9]+_[0-9]+}}-4, kind: reloc_riprel_4byte
; CHECK-NEXT:    vgf2p8affineqb $0, {{\.?LCPI[0-9]+_[0-9]+}}(%rip){1to2}, %xmm0, %xmm0 # encoding: [0x62,0xf3,0xfd,0x18,0xce,0x05,A,A,A,A,0x00]
; CHECK-NEXT:    # fixup A - offset: 6, value: {{\.?LCPI[0-9]+_[0-9]+}}-5, kind: reloc_riprel_4byte
; CHECK-NEXT:    retq # encoding: [0xc3]
  %b = call <2 x i16> @llvm.bitreverse.v2i16(<2 x i16> %a)
  ret <2 x i16> %b
}

define i64 @test_bitreverse_i64(i64 %a) nounwind {
; X86-LABEL: test_bitreverse_i64:
; X86:       # %bb.0:
; X86-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    bswapl %eax
; X86-NEXT:    movl %eax, %edx
; X86-NEXT:    andl $252645135, %edx # imm = 0xF0F0F0F
; X86-NEXT:    shll $4, %edx
; X86-NEXT:    shrl $4, %eax
; X86-NEXT:    andl $252645135, %eax # imm = 0xF0F0F0F
; X86-NEXT:    orl %edx, %eax
; X86-NEXT:    movl %eax, %edx
; X86-NEXT:    andl $858993459, %edx # imm = 0x33333333
; X86-NEXT:    shrl $2, %eax
; X86-NEXT:    andl $858993459, %eax # imm = 0x33333333
; X86-NEXT:    leal (%eax,%edx,4), %eax
; X86-NEXT:    movl %eax, %edx
; X86-NEXT:    andl $1431655765, %edx # imm = 0x55555555
; X86-NEXT:    shrl %eax
; X86-NEXT:    andl $1431655765, %eax # imm = 0x55555555
; X86-NEXT:    leal (%eax,%edx,2), %eax
; X86-NEXT:    bswapl %ecx
; X86-NEXT:    movl %ecx, %edx
; X86-NEXT:    andl $252645135, %edx # imm = 0xF0F0F0F
; X86-NEXT:    shll $4, %edx
; X86-NEXT:    shrl $4, %ecx
; X86-NEXT:    andl $252645135, %ecx # imm = 0xF0F0F0F
; X86-NEXT:    orl %edx, %ecx
; X86-NEXT:    movl %ecx, %edx
; X86-NEXT:    andl $858993459, %edx # imm = 0x33333333
; X86-NEXT:    shrl $2, %ecx
; X86-NEXT:    andl $858993459, %ecx # imm = 0x33333333
; X86-NEXT:    leal (%ecx,%edx,4), %ecx
; X86-NEXT:    movl %ecx, %edx
; X86-NEXT:    andl $1431655765, %edx # imm = 0x55555555
; X86-NEXT:    shrl %ecx
; X86-NEXT:    andl $1431655765, %ecx # imm = 0x55555555
; X86-NEXT:    leal (%ecx,%edx,2), %edx
; X86-NEXT:    retl
;
; X64-LABEL: test_bitreverse_i64:
; X64:       # %bb.0:
; X64-NEXT:    bswapq %rdi
; X64-NEXT:    movq %rdi, %rax
; X64-NEXT:    shrq $4, %rax
; X64-NEXT:    movabsq $1085102592571150095, %rcx # imm = 0xF0F0F0F0F0F0F0F
; X64-NEXT:    andq %rcx, %rax
; X64-NEXT:    andq %rcx, %rdi
; X64-NEXT:    shlq $4, %rdi
; X64-NEXT:    orq %rax, %rdi
; X64-NEXT:    movabsq $3689348814741910323, %rax # imm = 0x3333333333333333
; X64-NEXT:    movq %rdi, %rcx
; X64-NEXT:    andq %rax, %rcx
; X64-NEXT:    shrq $2, %rdi
; X64-NEXT:    andq %rax, %rdi
; X64-NEXT:    leaq (%rdi,%rcx,4), %rax
; X64-NEXT:    movabsq $6148914691236517205, %rcx # imm = 0x5555555555555555
; X64-NEXT:    movq %rax, %rdx
; X64-NEXT:    andq %rcx, %rdx
; X64-NEXT:    shrq %rax
; X64-NEXT:    andq %rcx, %rax
; X64-NEXT:    leaq (%rax,%rdx,2), %rax
; X64-NEXT:    retq
;
; X86XOP-LABEL: test_bitreverse_i64:
; X86XOP:       # %bb.0:
; X86XOP-NEXT:    vmovq {{.*#+}} xmm0 = mem[0],zero
; X86XOP-NEXT:    vpperm {{\.?LCPI[0-9]+_[0-9]+}}, %xmm0, %xmm0, %xmm0
; X86XOP-NEXT:    vmovd %xmm0, %eax
; X86XOP-NEXT:    vpextrd $1, %xmm0, %edx
; X86XOP-NEXT:    retl
;
; CHECK-LABEL: test_bitreverse_i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    bswapq %rdi # encoding: [0x48,0x0f,0xcf]
; CHECK-NEXT:    movq %rdi, %rax # encoding: [0x48,0x89,0xf8]
; CHECK-NEXT:    shrq $4, %rax # encoding: [0x48,0xc1,0xe8,0x04]
; CHECK-NEXT:    movabsq $1085102592571150095, %rcx # encoding: [0x48,0xb9,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f]
; CHECK-NEXT:    # imm = 0xF0F0F0F0F0F0F0F
; CHECK-NEXT:    andq %rcx, %rax # encoding: [0x48,0x21,0xc8]
; CHECK-NEXT:    andq %rcx, %rdi # encoding: [0x48,0x21,0xcf]
; CHECK-NEXT:    shlq $4, %rdi # encoding: [0x48,0xc1,0xe7,0x04]
; CHECK-NEXT:    orq %rax, %rdi # encoding: [0x48,0x09,0xc7]
; CHECK-NEXT:    movabsq $3689348814741910323, %rax # encoding: [0x48,0xb8,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33]
; CHECK-NEXT:    # imm = 0x3333333333333333
; CHECK-NEXT:    movq %rdi, %rcx # encoding: [0x48,0x89,0xf9]
; CHECK-NEXT:    andq %rax, %rcx # encoding: [0x48,0x21,0xc1]
; CHECK-NEXT:    shrq $2, %rdi # encoding: [0x48,0xc1,0xef,0x02]
; CHECK-NEXT:    andq %rax, %rdi # encoding: [0x48,0x21,0xc7]
; CHECK-NEXT:    leaq (%rdi,%rcx,4), %rax # encoding: [0x48,0x8d,0x04,0x8f]
; CHECK-NEXT:    movabsq $6148914691236517205, %rcx # encoding: [0x48,0xb9,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55]
; CHECK-NEXT:    # imm = 0x5555555555555555
; CHECK-NEXT:    movq %rax, %rdx # encoding: [0x48,0x89,0xc2]
; CHECK-NEXT:    andq %rcx, %rdx # encoding: [0x48,0x21,0xca]
; CHECK-NEXT:    shrq %rax # encoding: [0x48,0xd1,0xe8]
; CHECK-NEXT:    andq %rcx, %rax # encoding: [0x48,0x21,0xc8]
; CHECK-NEXT:    leaq (%rax,%rdx,2), %rax # encoding: [0x48,0x8d,0x04,0x50]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %b = call i64 @llvm.bitreverse.i64(i64 %a)
  ret i64 %b
}

define i32 @test_bitreverse_i32(i32 %a) nounwind {
; X86-LABEL: test_bitreverse_i32:
; X86:       # %bb.0:
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    bswapl %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $252645135, %ecx # imm = 0xF0F0F0F
; X86-NEXT:    shll $4, %ecx
; X86-NEXT:    shrl $4, %eax
; X86-NEXT:    andl $252645135, %eax # imm = 0xF0F0F0F
; X86-NEXT:    orl %ecx, %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $858993459, %ecx # imm = 0x33333333
; X86-NEXT:    shrl $2, %eax
; X86-NEXT:    andl $858993459, %eax # imm = 0x33333333
; X86-NEXT:    leal (%eax,%ecx,4), %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $1431655765, %ecx # imm = 0x55555555
; X86-NEXT:    shrl %eax
; X86-NEXT:    andl $1431655765, %eax # imm = 0x55555555
; X86-NEXT:    leal (%eax,%ecx,2), %eax
; X86-NEXT:    retl
;
; X64-LABEL: test_bitreverse_i32:
; X64:       # %bb.0:
; X64-NEXT:    # kill: def $edi killed $edi def $rdi
; X64-NEXT:    bswapl %edi
; X64-NEXT:    movl %edi, %eax
; X64-NEXT:    andl $252645135, %eax # imm = 0xF0F0F0F
; X64-NEXT:    shll $4, %eax
; X64-NEXT:    shrl $4, %edi
; X64-NEXT:    andl $252645135, %edi # imm = 0xF0F0F0F
; X64-NEXT:    orl %eax, %edi
; X64-NEXT:    movl %edi, %eax
; X64-NEXT:    andl $858993459, %eax # imm = 0x33333333
; X64-NEXT:    shrl $2, %edi
; X64-NEXT:    andl $858993459, %edi # imm = 0x33333333
; X64-NEXT:    leal (%rdi,%rax,4), %eax
; X64-NEXT:    movl %eax, %ecx
; X64-NEXT:    andl $1431655765, %ecx # imm = 0x55555555
; X64-NEXT:    shrl %eax
; X64-NEXT:    andl $1431655765, %eax # imm = 0x55555555
; X64-NEXT:    leal (%rax,%rcx,2), %eax
; X64-NEXT:    retq
;
; X86XOP-LABEL: test_bitreverse_i32:
; X86XOP:       # %bb.0:
; X86XOP-NEXT:    vmovd {{.*#+}} xmm0 = mem[0],zero,zero,zero
; X86XOP-NEXT:    vpperm {{\.?LCPI[0-9]+_[0-9]+}}, %xmm0, %xmm0, %xmm0
; X86XOP-NEXT:    vmovd %xmm0, %eax
; X86XOP-NEXT:    retl
;
; CHECK-LABEL: test_bitreverse_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    # kill: def $edi killed $edi def $rdi
; CHECK-NEXT:    bswapl %edi # encoding: [0x0f,0xcf]
; CHECK-NEXT:    movl %edi, %eax # encoding: [0x89,0xf8]
; CHECK-NEXT:    andl $252645135, %eax # encoding: [0x25,0x0f,0x0f,0x0f,0x0f]
; CHECK-NEXT:    # imm = 0xF0F0F0F
; CHECK-NEXT:    shll $4, %eax # encoding: [0xc1,0xe0,0x04]
; CHECK-NEXT:    shrl $4, %edi # encoding: [0xc1,0xef,0x04]
; CHECK-NEXT:    andl $252645135, %edi # encoding: [0x81,0xe7,0x0f,0x0f,0x0f,0x0f]
; CHECK-NEXT:    # imm = 0xF0F0F0F
; CHECK-NEXT:    orl %eax, %edi # encoding: [0x09,0xc7]
; CHECK-NEXT:    movl %edi, %eax # encoding: [0x89,0xf8]
; CHECK-NEXT:    andl $858993459, %eax # encoding: [0x25,0x33,0x33,0x33,0x33]
; CHECK-NEXT:    # imm = 0x33333333
; CHECK-NEXT:    shrl $2, %edi # encoding: [0xc1,0xef,0x02]
; CHECK-NEXT:    andl $858993459, %edi # encoding: [0x81,0xe7,0x33,0x33,0x33,0x33]
; CHECK-NEXT:    # imm = 0x33333333
; CHECK-NEXT:    leal (%rdi,%rax,4), %eax # encoding: [0x8d,0x04,0x87]
; CHECK-NEXT:    movl %eax, %ecx # encoding: [0x89,0xc1]
; CHECK-NEXT:    andl $1431655765, %ecx # encoding: [0x81,0xe1,0x55,0x55,0x55,0x55]
; CHECK-NEXT:    # imm = 0x55555555
; CHECK-NEXT:    shrl %eax # encoding: [0xd1,0xe8]
; CHECK-NEXT:    andl $1431655765, %eax # encoding: [0x25,0x55,0x55,0x55,0x55]
; CHECK-NEXT:    # imm = 0x55555555
; CHECK-NEXT:    leal (%rax,%rcx,2), %eax # encoding: [0x8d,0x04,0x48]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %b = call i32 @llvm.bitreverse.i32(i32 %a)
  ret i32 %b
}

define i24 @test_bitreverse_i24(i24 %a) nounwind {
; X86-LABEL: test_bitreverse_i24:
; X86:       # %bb.0:
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    bswapl %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $252645135, %ecx # imm = 0xF0F0F0F
; X86-NEXT:    shll $4, %ecx
; X86-NEXT:    shrl $4, %eax
; X86-NEXT:    andl $252645135, %eax # imm = 0xF0F0F0F
; X86-NEXT:    orl %ecx, %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $858993459, %ecx # imm = 0x33333333
; X86-NEXT:    shrl $2, %eax
; X86-NEXT:    andl $858993459, %eax # imm = 0x33333333
; X86-NEXT:    leal (%eax,%ecx,4), %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $1431655680, %ecx # imm = 0x55555500
; X86-NEXT:    shrl %eax
; X86-NEXT:    andl $1431655680, %eax # imm = 0x55555500
; X86-NEXT:    leal (%eax,%ecx,2), %eax
; X86-NEXT:    shrl $8, %eax
; X86-NEXT:    retl
;
; X64-LABEL: test_bitreverse_i24:
; X64:       # %bb.0:
; X64-NEXT:    # kill: def $edi killed $edi def $rdi
; X64-NEXT:    bswapl %edi
; X64-NEXT:    movl %edi, %eax
; X64-NEXT:    andl $252645135, %eax # imm = 0xF0F0F0F
; X64-NEXT:    shll $4, %eax
; X64-NEXT:    shrl $4, %edi
; X64-NEXT:    andl $252645135, %edi # imm = 0xF0F0F0F
; X64-NEXT:    orl %eax, %edi
; X64-NEXT:    movl %edi, %eax
; X64-NEXT:    andl $858993459, %eax # imm = 0x33333333
; X64-NEXT:    shrl $2, %edi
; X64-NEXT:    andl $858993459, %edi # imm = 0x33333333
; X64-NEXT:    leal (%rdi,%rax,4), %eax
; X64-NEXT:    movl %eax, %ecx
; X64-NEXT:    andl $1431655680, %ecx # imm = 0x55555500
; X64-NEXT:    shrl %eax
; X64-NEXT:    andl $1431655680, %eax # imm = 0x55555500
; X64-NEXT:    leal (%rax,%rcx,2), %eax
; X64-NEXT:    shrl $8, %eax
; X64-NEXT:    retq
;
; X86XOP-LABEL: test_bitreverse_i24:
; X86XOP:       # %bb.0:
; X86XOP-NEXT:    vmovd {{.*#+}} xmm0 = mem[0],zero,zero,zero
; X86XOP-NEXT:    vpperm {{\.?LCPI[0-9]+_[0-9]+}}, %xmm0, %xmm0, %xmm0
; X86XOP-NEXT:    vmovd %xmm0, %eax
; X86XOP-NEXT:    shrl $8, %eax
; X86XOP-NEXT:    retl
;
; CHECK-LABEL: test_bitreverse_i24:
; CHECK:       # %bb.0:
; CHECK-NEXT:    # kill: def $edi killed $edi def $rdi
; CHECK-NEXT:    bswapl %edi # encoding: [0x0f,0xcf]
; CHECK-NEXT:    movl %edi, %eax # encoding: [0x89,0xf8]
; CHECK-NEXT:    andl $252645135, %eax # encoding: [0x25,0x0f,0x0f,0x0f,0x0f]
; CHECK-NEXT:    # imm = 0xF0F0F0F
; CHECK-NEXT:    shll $4, %eax # encoding: [0xc1,0xe0,0x04]
; CHECK-NEXT:    shrl $4, %edi # encoding: [0xc1,0xef,0x04]
; CHECK-NEXT:    andl $252645135, %edi # encoding: [0x81,0xe7,0x0f,0x0f,0x0f,0x0f]
; CHECK-NEXT:    # imm = 0xF0F0F0F
; CHECK-NEXT:    orl %eax, %edi # encoding: [0x09,0xc7]
; CHECK-NEXT:    movl %edi, %eax # encoding: [0x89,0xf8]
; CHECK-NEXT:    andl $858993459, %eax # encoding: [0x25,0x33,0x33,0x33,0x33]
; CHECK-NEXT:    # imm = 0x33333333
; CHECK-NEXT:    shrl $2, %edi # encoding: [0xc1,0xef,0x02]
; CHECK-NEXT:    andl $858993459, %edi # encoding: [0x81,0xe7,0x33,0x33,0x33,0x33]
; CHECK-NEXT:    # imm = 0x33333333
; CHECK-NEXT:    leal (%rdi,%rax,4), %eax # encoding: [0x8d,0x04,0x87]
; CHECK-NEXT:    movl %eax, %ecx # encoding: [0x89,0xc1]
; CHECK-NEXT:    andl $1431655680, %ecx # encoding: [0x81,0xe1,0x00,0x55,0x55,0x55]
; CHECK-NEXT:    # imm = 0x55555500
; CHECK-NEXT:    shrl %eax # encoding: [0xd1,0xe8]
; CHECK-NEXT:    andl $1431655680, %eax # encoding: [0x25,0x00,0x55,0x55,0x55]
; CHECK-NEXT:    # imm = 0x55555500
; CHECK-NEXT:    leal (%rax,%rcx,2), %eax # encoding: [0x8d,0x04,0x48]
; CHECK-NEXT:    shrl $8, %eax # encoding: [0xc1,0xe8,0x08]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %b = call i24 @llvm.bitreverse.i24(i24 %a)
  ret i24 %b
}

define i16 @test_bitreverse_i16(i16 %a) nounwind {
; X86-LABEL: test_bitreverse_i16:
; X86:       # %bb.0:
; X86-NEXT:    movzwl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    rolw $8, %ax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $3855, %ecx # imm = 0xF0F
; X86-NEXT:    shll $4, %ecx
; X86-NEXT:    shrl $4, %eax
; X86-NEXT:    andl $3855, %eax # imm = 0xF0F
; X86-NEXT:    orl %ecx, %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $13107, %ecx # imm = 0x3333
; X86-NEXT:    shrl $2, %eax
; X86-NEXT:    andl $13107, %eax # imm = 0x3333
; X86-NEXT:    leal (%eax,%ecx,4), %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $21845, %ecx # imm = 0x5555
; X86-NEXT:    shrl %eax
; X86-NEXT:    andl $21845, %eax # imm = 0x5555
; X86-NEXT:    leal (%eax,%ecx,2), %eax
; X86-NEXT:    # kill: def $ax killed $ax killed $eax
; X86-NEXT:    retl
;
; X64-LABEL: test_bitreverse_i16:
; X64:       # %bb.0:
; X64-NEXT:    # kill: def $edi killed $edi def $rdi
; X64-NEXT:    rolw $8, %di
; X64-NEXT:    movl %edi, %eax
; X64-NEXT:    andl $3855, %eax # imm = 0xF0F
; X64-NEXT:    shll $4, %eax
; X64-NEXT:    shrl $4, %edi
; X64-NEXT:    andl $3855, %edi # imm = 0xF0F
; X64-NEXT:    orl %eax, %edi
; X64-NEXT:    movl %edi, %eax
; X64-NEXT:    andl $13107, %eax # imm = 0x3333
; X64-NEXT:    shrl $2, %edi
; X64-NEXT:    andl $13107, %edi # imm = 0x3333
; X64-NEXT:    leal (%rdi,%rax,4), %eax
; X64-NEXT:    movl %eax, %ecx
; X64-NEXT:    andl $21845, %ecx # imm = 0x5555
; X64-NEXT:    shrl %eax
; X64-NEXT:    andl $21845, %eax # imm = 0x5555
; X64-NEXT:    leal (%rax,%rcx,2), %eax
; X64-NEXT:    # kill: def $ax killed $ax killed $eax
; X64-NEXT:    retq
;
; X86XOP-LABEL: test_bitreverse_i16:
; X86XOP:       # %bb.0:
; X86XOP-NEXT:    vmovd {{.*#+}} xmm0 = mem[0],zero,zero,zero
; X86XOP-NEXT:    vpperm {{\.?LCPI[0-9]+_[0-9]+}}, %xmm0, %xmm0, %xmm0
; X86XOP-NEXT:    vmovd %xmm0, %eax
; X86XOP-NEXT:    # kill: def $ax killed $ax killed $eax
; X86XOP-NEXT:    retl
;
; CHECK-LABEL: test_bitreverse_i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    # kill: def $edi killed $edi def $rdi
; CHECK-NEXT:    rolw $8, %di # encoding: [0x66,0xc1,0xc7,0x08]
; CHECK-NEXT:    movl %edi, %eax # encoding: [0x89,0xf8]
; CHECK-NEXT:    andl $3855, %eax # encoding: [0x25,0x0f,0x0f,0x00,0x00]
; CHECK-NEXT:    # imm = 0xF0F
; CHECK-NEXT:    shll $4, %eax # encoding: [0xc1,0xe0,0x04]
; CHECK-NEXT:    shrl $4, %edi # encoding: [0xc1,0xef,0x04]
; CHECK-NEXT:    andl $3855, %edi # encoding: [0x81,0xe7,0x0f,0x0f,0x00,0x00]
; CHECK-NEXT:    # imm = 0xF0F
; CHECK-NEXT:    orl %eax, %edi # encoding: [0x09,0xc7]
; CHECK-NEXT:    movl %edi, %eax # encoding: [0x89,0xf8]
; CHECK-NEXT:    andl $13107, %eax # encoding: [0x25,0x33,0x33,0x00,0x00]
; CHECK-NEXT:    # imm = 0x3333
; CHECK-NEXT:    shrl $2, %edi # encoding: [0xc1,0xef,0x02]
; CHECK-NEXT:    andl $13107, %edi # encoding: [0x81,0xe7,0x33,0x33,0x00,0x00]
; CHECK-NEXT:    # imm = 0x3333
; CHECK-NEXT:    leal (%rdi,%rax,4), %eax # encoding: [0x8d,0x04,0x87]
; CHECK-NEXT:    movl %eax, %ecx # encoding: [0x89,0xc1]
; CHECK-NEXT:    andl $21845, %ecx # encoding: [0x81,0xe1,0x55,0x55,0x00,0x00]
; CHECK-NEXT:    # imm = 0x5555
; CHECK-NEXT:    shrl %eax # encoding: [0xd1,0xe8]
; CHECK-NEXT:    andl $21845, %eax # encoding: [0x25,0x55,0x55,0x00,0x00]
; CHECK-NEXT:    # imm = 0x5555
; CHECK-NEXT:    leal (%rax,%rcx,2), %eax # encoding: [0x8d,0x04,0x48]
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq # encoding: [0xc3]
  %b = call i16 @llvm.bitreverse.i16(i16 %a)
  ret i16 %b
}

define i8 @test_bitreverse_i8(i8 %a) {
; X86-LABEL: test_bitreverse_i8:
; X86:       # %bb.0:
; X86-NEXT:    movzbl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    rolb $4, %al
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andb $51, %cl
; X86-NEXT:    shlb $2, %cl
; X86-NEXT:    shrb $2, %al
; X86-NEXT:    andb $51, %al
; X86-NEXT:    orb %cl, %al
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andb $85, %cl
; X86-NEXT:    addb %cl, %cl
; X86-NEXT:    shrb %al
; X86-NEXT:    andb $85, %al
; X86-NEXT:    orb %cl, %al
; X86-NEXT:    retl
;
; X64-LABEL: test_bitreverse_i8:
; X64:       # %bb.0:
; X64-NEXT:    rolb $4, %dil
; X64-NEXT:    movl %edi, %eax
; X64-NEXT:    andb $51, %al
; X64-NEXT:    shlb $2, %al
; X64-NEXT:    shrb $2, %dil
; X64-NEXT:    andb $51, %dil
; X64-NEXT:    orb %dil, %al
; X64-NEXT:    movl %eax, %ecx
; X64-NEXT:    andb $85, %cl
; X64-NEXT:    addb %cl, %cl
; X64-NEXT:    shrb %al
; X64-NEXT:    andb $85, %al
; X64-NEXT:    orb %cl, %al
; X64-NEXT:    retq
;
; X86XOP-LABEL: test_bitreverse_i8:
; X86XOP:       # %bb.0:
; X86XOP-NEXT:    vmovd {{.*#+}} xmm0 = mem[0],zero,zero,zero
; X86XOP-NEXT:    vpperm {{\.?LCPI[0-9]+_[0-9]+}}, %xmm0, %xmm0, %xmm0
; X86XOP-NEXT:    vmovd %xmm0, %eax
; X86XOP-NEXT:    # kill: def $al killed $al killed $eax
; X86XOP-NEXT:    retl
;
; CHECK-LABEL: test_bitreverse_i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    rolb $4, %dil # encoding: [0x40,0xc0,0xc7,0x04]
; CHECK-NEXT:    movl %edi, %eax # encoding: [0x89,0xf8]
; CHECK-NEXT:    andb $51, %al # encoding: [0x24,0x33]
; CHECK-NEXT:    shlb $2, %al # encoding: [0xc0,0xe0,0x02]
; CHECK-NEXT:    shrb $2, %dil # encoding: [0x40,0xc0,0xef,0x02]
; CHECK-NEXT:    andb $51, %dil # encoding: [0x40,0x80,0xe7,0x33]
; CHECK-NEXT:    orb %dil, %al # encoding: [0x40,0x08,0xf8]
; CHECK-NEXT:    movl %eax, %ecx # encoding: [0x89,0xc1]
; CHECK-NEXT:    andb $85, %cl # encoding: [0x80,0xe1,0x55]
; CHECK-NEXT:    addb %cl, %cl # encoding: [0x00,0xc9]
; CHECK-NEXT:    shrb %al # encoding: [0xd0,0xe8]
; CHECK-NEXT:    andb $85, %al # encoding: [0x24,0x55]
; CHECK-NEXT:    orb %cl, %al # encoding: [0x08,0xc8]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %b = call i8 @llvm.bitreverse.i8(i8 %a)
  ret i8 %b
}

define i4 @test_bitreverse_i4(i4 %a) {
; X86-LABEL: test_bitreverse_i4:
; X86:       # %bb.0:
; X86-NEXT:    movzbl {{[0-9]+}}(%esp), %ecx
; X86-NEXT:    movl %ecx, %eax
; X86-NEXT:    andb $8, %al
; X86-NEXT:    movl %ecx, %edx
; X86-NEXT:    addb %cl, %dl
; X86-NEXT:    andb $4, %dl
; X86-NEXT:    movb %cl, %ah
; X86-NEXT:    shlb $3, %ah
; X86-NEXT:    andb $8, %ah
; X86-NEXT:    orb %dl, %ah
; X86-NEXT:    shrb %cl
; X86-NEXT:    andb $2, %cl
; X86-NEXT:    orb %ah, %cl
; X86-NEXT:    shrb $3, %al
; X86-NEXT:    orb %cl, %al
; X86-NEXT:    retl
;
; X64-LABEL: test_bitreverse_i4:
; X64:       # %bb.0:
; X64-NEXT:    # kill: def $edi killed $edi def $rdi
; X64-NEXT:    movl %edi, %eax
; X64-NEXT:    andb $8, %al
; X64-NEXT:    leal (%rdi,%rdi), %ecx
; X64-NEXT:    andb $4, %cl
; X64-NEXT:    leal (,%rdi,8), %edx
; X64-NEXT:    andb $8, %dl
; X64-NEXT:    orb %cl, %dl
; X64-NEXT:    shrb %dil
; X64-NEXT:    andb $2, %dil
; X64-NEXT:    orb %dil, %dl
; X64-NEXT:    shrb $3, %al
; X64-NEXT:    orb %dl, %al
; X64-NEXT:    retq
;
; X86XOP-LABEL: test_bitreverse_i4:
; X86XOP:       # %bb.0:
; X86XOP-NEXT:    vmovd {{.*#+}} xmm0 = mem[0],zero,zero,zero
; X86XOP-NEXT:    vpperm {{\.?LCPI[0-9]+_[0-9]+}}, %xmm0, %xmm0, %xmm0
; X86XOP-NEXT:    vmovd %xmm0, %eax
; X86XOP-NEXT:    shrb $4, %al
; X86XOP-NEXT:    # kill: def $al killed $al killed $eax
; X86XOP-NEXT:    retl
;
; CHECK-LABEL: test_bitreverse_i4:
; CHECK:       # %bb.0:
; CHECK-NEXT:    # kill: def $edi killed $edi def $rdi
; CHECK-NEXT:    movl %edi, %eax # encoding: [0x89,0xf8]
; CHECK-NEXT:    andb $8, %al # encoding: [0x24,0x08]
; CHECK-NEXT:    leal (%rdi,%rdi), %ecx # encoding: [0x8d,0x0c,0x3f]
; CHECK-NEXT:    andb $4, %cl # encoding: [0x80,0xe1,0x04]
; CHECK-NEXT:    leal (,%rdi,8), %edx # encoding: [0x8d,0x14,0xfd,0x00,0x00,0x00,0x00]
; CHECK-NEXT:    andb $8, %dl # encoding: [0x80,0xe2,0x08]
; CHECK-NEXT:    orb %cl, %dl # encoding: [0x08,0xca]
; CHECK-NEXT:    shrb %dil # encoding: [0x40,0xd0,0xef]
; CHECK-NEXT:    andb $2, %dil # encoding: [0x40,0x80,0xe7,0x02]
; CHECK-NEXT:    orb %dil, %dl # encoding: [0x40,0x08,0xfa]
; CHECK-NEXT:    shrb $3, %al # encoding: [0xc0,0xe8,0x03]
; CHECK-NEXT:    orb %dl, %al # encoding: [0x08,0xd0]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %b = call i4 @llvm.bitreverse.i4(i4 %a)
  ret i4 %b
}

define <2 x i16> @fold_v2i16() {
; X86-LABEL: fold_v2i16:
; X86:       # %bb.0:
; X86-NEXT:    movw $-4096, %ax # imm = 0xF000
; X86-NEXT:    movw $240, %dx
; X86-NEXT:    retl
;
; X64-LABEL: fold_v2i16:
; X64:       # %bb.0:
; X64-NEXT:    movaps {{.*#+}} xmm0 = <61440,240,u,u,u,u,u,u>
; X64-NEXT:    retq
;
; X86XOP-LABEL: fold_v2i16:
; X86XOP:       # %bb.0:
; X86XOP-NEXT:    vmovaps {{.*#+}} xmm0 = <61440,240,u,u,u,u,u,u>
; X86XOP-NEXT:    retl
;
; CHECK-LABEL: fold_v2i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vbroadcastss {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0 # EVEX TO VEX Compression xmm0 = [61440,240,61440,240,61440,240,61440,240] 
; CHECK-NEXT:    # encoding: [0xc4,0xe2,0x79,0x18,0x05,A,A,A,A]
; CHECK-NEXT:    # fixup A - offset: 5, value: {{\.?LCPI[0-9]+_[0-9]+}}-4, kind: reloc_riprel_4byte
; CHECK-NEXT:    retq # encoding: [0xc3]
  %b = call <2 x i16> @llvm.bitreverse.v2i16(<2 x i16> <i16 15, i16 3840>)
  ret <2 x i16> %b
}

define i528 @large_promotion(i528 %A) nounwind {
; X86-LABEL: large_promotion:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp
; X86-NEXT:    pushl %ebx
; X86-NEXT:    pushl %edi
; X86-NEXT:    pushl %esi
; X86-NEXT:    subl $56, %esp
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-NEXT:    movl {{[0-9]+}}(%esp), %edx
; X86-NEXT:    movl {{[0-9]+}}(%esp), %esi
; X86-NEXT:    movl {{[0-9]+}}(%esp), %edi
; X86-NEXT:    movl {{[0-9]+}}(%esp), %ebx
; X86-NEXT:    bswapl %ebx
; X86-NEXT:    movl %ebx, %ebp
; X86-NEXT:    andl $252645135, %ebp # imm = 0xF0F0F0F
; X86-NEXT:    shll $4, %ebp
; X86-NEXT:    shrl $4, %ebx
; X86-NEXT:    andl $252645135, %ebx # imm = 0xF0F0F0F
; X86-NEXT:    orl %ebp, %ebx
; X86-NEXT:    movl %ebx, %ebp
; X86-NEXT:    andl $858993459, %ebp # imm = 0x33333333
; X86-NEXT:    shrl $2, %ebx
; X86-NEXT:    andl $858993459, %ebx # imm = 0x33333333
; X86-NEXT:    leal (%ebx,%ebp,4), %ebx
; X86-NEXT:    movl %ebx, %ebp
; X86-NEXT:    andl $1431633920, %ebp # imm = 0x55550000
; X86-NEXT:    shrl %ebx
; X86-NEXT:    andl $1431633920, %ebx # imm = 0x55550000
; X86-NEXT:    leal (%ebx,%ebp,2), %ebx
; X86-NEXT:    movl %ebx, (%esp) # 4-byte Spill
; X86-NEXT:    bswapl %edi
; X86-NEXT:    movl %edi, %ebx
; X86-NEXT:    andl $252645135, %ebx # imm = 0xF0F0F0F
; X86-NEXT:    shll $4, %ebx
; X86-NEXT:    shrl $4, %edi
; X86-NEXT:    andl $252645135, %edi # imm = 0xF0F0F0F
; X86-NEXT:    orl %ebx, %edi
; X86-NEXT:    movl %edi, %ebx
; X86-NEXT:    andl $858993459, %ebx # imm = 0x33333333
; X86-NEXT:    shrl $2, %edi
; X86-NEXT:    andl $858993459, %edi # imm = 0x33333333
; X86-NEXT:    leal (%edi,%ebx,4), %edi
; X86-NEXT:    movl %edi, %ebx
; X86-NEXT:    andl $1431655765, %ebx # imm = 0x55555555
; X86-NEXT:    shrl %edi
; X86-NEXT:    andl $1431655765, %edi # imm = 0x55555555
; X86-NEXT:    leal (%edi,%ebx,2), %ebx
; X86-NEXT:    bswapl %esi
; X86-NEXT:    movl %esi, %edi
; X86-NEXT:    andl $252645135, %edi # imm = 0xF0F0F0F
; X86-NEXT:    shll $4, %edi
; X86-NEXT:    shrl $4, %esi
; X86-NEXT:    andl $252645135, %esi # imm = 0xF0F0F0F
; X86-NEXT:    orl %edi, %esi
; X86-NEXT:    movl %esi, %edi
; X86-NEXT:    andl $858993459, %edi # imm = 0x33333333
; X86-NEXT:    shrl $2, %esi
; X86-NEXT:    andl $858993459, %esi # imm = 0x33333333
; X86-NEXT:    leal (%esi,%edi,4), %esi
; X86-NEXT:    movl %esi, %edi
; X86-NEXT:    andl $1431655765, %edi # imm = 0x55555555
; X86-NEXT:    shrl %esi
; X86-NEXT:    andl $1431655765, %esi # imm = 0x55555555
; X86-NEXT:    leal (%esi,%edi,2), %esi
; X86-NEXT:    movl %esi, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    bswapl %edx
; X86-NEXT:    movl %edx, %esi
; X86-NEXT:    andl $252645135, %esi # imm = 0xF0F0F0F
; X86-NEXT:    shll $4, %esi
; X86-NEXT:    shrl $4, %edx
; X86-NEXT:    andl $252645135, %edx # imm = 0xF0F0F0F
; X86-NEXT:    orl %esi, %edx
; X86-NEXT:    movl %edx, %esi
; X86-NEXT:    andl $858993459, %esi # imm = 0x33333333
; X86-NEXT:    shrl $2, %edx
; X86-NEXT:    andl $858993459, %edx # imm = 0x33333333
; X86-NEXT:    leal (%edx,%esi,4), %edx
; X86-NEXT:    movl %edx, %esi
; X86-NEXT:    andl $1431655765, %esi # imm = 0x55555555
; X86-NEXT:    shrl %edx
; X86-NEXT:    andl $1431655765, %edx # imm = 0x55555555
; X86-NEXT:    leal (%edx,%esi,2), %edx
; X86-NEXT:    movl %edx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    bswapl %ecx
; X86-NEXT:    movl %ecx, %edx
; X86-NEXT:    andl $252645135, %edx # imm = 0xF0F0F0F
; X86-NEXT:    shll $4, %edx
; X86-NEXT:    shrl $4, %ecx
; X86-NEXT:    andl $252645135, %ecx # imm = 0xF0F0F0F
; X86-NEXT:    orl %edx, %ecx
; X86-NEXT:    movl %ecx, %edx
; X86-NEXT:    andl $858993459, %edx # imm = 0x33333333
; X86-NEXT:    shrl $2, %ecx
; X86-NEXT:    andl $858993459, %ecx # imm = 0x33333333
; X86-NEXT:    leal (%ecx,%edx,4), %ecx
; X86-NEXT:    movl %ecx, %edx
; X86-NEXT:    andl $1431655765, %edx # imm = 0x55555555
; X86-NEXT:    shrl %ecx
; X86-NEXT:    andl $1431655765, %ecx # imm = 0x55555555
; X86-NEXT:    leal (%ecx,%edx,2), %ecx
; X86-NEXT:    movl %ecx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    bswapl %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $252645135, %ecx # imm = 0xF0F0F0F
; X86-NEXT:    shll $4, %ecx
; X86-NEXT:    shrl $4, %eax
; X86-NEXT:    andl $252645135, %eax # imm = 0xF0F0F0F
; X86-NEXT:    orl %ecx, %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $858993459, %ecx # imm = 0x33333333
; X86-NEXT:    shrl $2, %eax
; X86-NEXT:    andl $858993459, %eax # imm = 0x33333333
; X86-NEXT:    leal (%eax,%ecx,4), %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $1431655765, %ecx # imm = 0x55555555
; X86-NEXT:    shrl %eax
; X86-NEXT:    andl $1431655765, %eax # imm = 0x55555555
; X86-NEXT:    leal (%eax,%ecx,2), %eax
; X86-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    bswapl %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $252645135, %ecx # imm = 0xF0F0F0F
; X86-NEXT:    shll $4, %ecx
; X86-NEXT:    shrl $4, %eax
; X86-NEXT:    andl $252645135, %eax # imm = 0xF0F0F0F
; X86-NEXT:    orl %ecx, %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $858993459, %ecx # imm = 0x33333333
; X86-NEXT:    shrl $2, %eax
; X86-NEXT:    andl $858993459, %eax # imm = 0x33333333
; X86-NEXT:    leal (%eax,%ecx,4), %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $1431655765, %ecx # imm = 0x55555555
; X86-NEXT:    shrl %eax
; X86-NEXT:    andl $1431655765, %eax # imm = 0x55555555
; X86-NEXT:    leal (%eax,%ecx,2), %eax
; X86-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    bswapl %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $252645135, %ecx # imm = 0xF0F0F0F
; X86-NEXT:    shll $4, %ecx
; X86-NEXT:    shrl $4, %eax
; X86-NEXT:    andl $252645135, %eax # imm = 0xF0F0F0F
; X86-NEXT:    orl %ecx, %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $858993459, %ecx # imm = 0x33333333
; X86-NEXT:    shrl $2, %eax
; X86-NEXT:    andl $858993459, %eax # imm = 0x33333333
; X86-NEXT:    leal (%eax,%ecx,4), %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $1431655765, %ecx # imm = 0x55555555
; X86-NEXT:    shrl %eax
; X86-NEXT:    andl $1431655765, %eax # imm = 0x55555555
; X86-NEXT:    leal (%eax,%ecx,2), %eax
; X86-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    bswapl %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $252645135, %ecx # imm = 0xF0F0F0F
; X86-NEXT:    shll $4, %ecx
; X86-NEXT:    shrl $4, %eax
; X86-NEXT:    andl $252645135, %eax # imm = 0xF0F0F0F
; X86-NEXT:    orl %ecx, %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $858993459, %ecx # imm = 0x33333333
; X86-NEXT:    shrl $2, %eax
; X86-NEXT:    andl $858993459, %eax # imm = 0x33333333
; X86-NEXT:    leal (%eax,%ecx,4), %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $1431655765, %ecx # imm = 0x55555555
; X86-NEXT:    shrl %eax
; X86-NEXT:    andl $1431655765, %eax # imm = 0x55555555
; X86-NEXT:    leal (%eax,%ecx,2), %eax
; X86-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    bswapl %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $252645135, %ecx # imm = 0xF0F0F0F
; X86-NEXT:    shll $4, %ecx
; X86-NEXT:    shrl $4, %eax
; X86-NEXT:    andl $252645135, %eax # imm = 0xF0F0F0F
; X86-NEXT:    orl %ecx, %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $858993459, %ecx # imm = 0x33333333
; X86-NEXT:    shrl $2, %eax
; X86-NEXT:    andl $858993459, %eax # imm = 0x33333333
; X86-NEXT:    leal (%eax,%ecx,4), %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $1431655765, %ecx # imm = 0x55555555
; X86-NEXT:    shrl %eax
; X86-NEXT:    andl $1431655765, %eax # imm = 0x55555555
; X86-NEXT:    leal (%eax,%ecx,2), %eax
; X86-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    bswapl %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $252645135, %ecx # imm = 0xF0F0F0F
; X86-NEXT:    shll $4, %ecx
; X86-NEXT:    shrl $4, %eax
; X86-NEXT:    andl $252645135, %eax # imm = 0xF0F0F0F
; X86-NEXT:    orl %ecx, %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $858993459, %ecx # imm = 0x33333333
; X86-NEXT:    shrl $2, %eax
; X86-NEXT:    andl $858993459, %eax # imm = 0x33333333
; X86-NEXT:    leal (%eax,%ecx,4), %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $1431655765, %ecx # imm = 0x55555555
; X86-NEXT:    shrl %eax
; X86-NEXT:    andl $1431655765, %eax # imm = 0x55555555
; X86-NEXT:    leal (%eax,%ecx,2), %eax
; X86-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    bswapl %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $252645135, %ecx # imm = 0xF0F0F0F
; X86-NEXT:    shll $4, %ecx
; X86-NEXT:    shrl $4, %eax
; X86-NEXT:    andl $252645135, %eax # imm = 0xF0F0F0F
; X86-NEXT:    orl %ecx, %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $858993459, %ecx # imm = 0x33333333
; X86-NEXT:    shrl $2, %eax
; X86-NEXT:    andl $858993459, %eax # imm = 0x33333333
; X86-NEXT:    leal (%eax,%ecx,4), %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $1431655765, %ecx # imm = 0x55555555
; X86-NEXT:    shrl %eax
; X86-NEXT:    andl $1431655765, %eax # imm = 0x55555555
; X86-NEXT:    leal (%eax,%ecx,2), %eax
; X86-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    bswapl %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $252645135, %ecx # imm = 0xF0F0F0F
; X86-NEXT:    shll $4, %ecx
; X86-NEXT:    shrl $4, %eax
; X86-NEXT:    andl $252645135, %eax # imm = 0xF0F0F0F
; X86-NEXT:    orl %ecx, %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $858993459, %ecx # imm = 0x33333333
; X86-NEXT:    shrl $2, %eax
; X86-NEXT:    andl $858993459, %eax # imm = 0x33333333
; X86-NEXT:    leal (%eax,%ecx,4), %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $1431655765, %ecx # imm = 0x55555555
; X86-NEXT:    shrl %eax
; X86-NEXT:    andl $1431655765, %eax # imm = 0x55555555
; X86-NEXT:    leal (%eax,%ecx,2), %eax
; X86-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    bswapl %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $252645135, %ecx # imm = 0xF0F0F0F
; X86-NEXT:    shll $4, %ecx
; X86-NEXT:    shrl $4, %eax
; X86-NEXT:    andl $252645135, %eax # imm = 0xF0F0F0F
; X86-NEXT:    orl %ecx, %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $858993459, %ecx # imm = 0x33333333
; X86-NEXT:    shrl $2, %eax
; X86-NEXT:    andl $858993459, %eax # imm = 0x33333333
; X86-NEXT:    leal (%eax,%ecx,4), %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $1431655765, %ecx # imm = 0x55555555
; X86-NEXT:    shrl %eax
; X86-NEXT:    andl $1431655765, %eax # imm = 0x55555555
; X86-NEXT:    leal (%eax,%ecx,2), %eax
; X86-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    bswapl %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $252645135, %ecx # imm = 0xF0F0F0F
; X86-NEXT:    shll $4, %ecx
; X86-NEXT:    shrl $4, %eax
; X86-NEXT:    andl $252645135, %eax # imm = 0xF0F0F0F
; X86-NEXT:    orl %ecx, %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $858993459, %ecx # imm = 0x33333333
; X86-NEXT:    shrl $2, %eax
; X86-NEXT:    andl $858993459, %eax # imm = 0x33333333
; X86-NEXT:    leal (%eax,%ecx,4), %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $1431655765, %ecx # imm = 0x55555555
; X86-NEXT:    shrl %eax
; X86-NEXT:    andl $1431655765, %eax # imm = 0x55555555
; X86-NEXT:    leal (%eax,%ecx,2), %eax
; X86-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    bswapl %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $252645135, %ecx # imm = 0xF0F0F0F
; X86-NEXT:    shll $4, %ecx
; X86-NEXT:    shrl $4, %eax
; X86-NEXT:    andl $252645135, %eax # imm = 0xF0F0F0F
; X86-NEXT:    orl %ecx, %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $858993459, %ecx # imm = 0x33333333
; X86-NEXT:    shrl $2, %eax
; X86-NEXT:    andl $858993459, %eax # imm = 0x33333333
; X86-NEXT:    leal (%eax,%ecx,4), %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $1431655765, %ecx # imm = 0x55555555
; X86-NEXT:    shrl %eax
; X86-NEXT:    andl $1431655765, %eax # imm = 0x55555555
; X86-NEXT:    leal (%eax,%ecx,2), %edi
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    bswapl %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $252645135, %ecx # imm = 0xF0F0F0F
; X86-NEXT:    shll $4, %ecx
; X86-NEXT:    shrl $4, %eax
; X86-NEXT:    andl $252645135, %eax # imm = 0xF0F0F0F
; X86-NEXT:    orl %ecx, %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $858993459, %ecx # imm = 0x33333333
; X86-NEXT:    shrl $2, %eax
; X86-NEXT:    andl $858993459, %eax # imm = 0x33333333
; X86-NEXT:    leal (%eax,%ecx,4), %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    andl $1431655765, %ecx # imm = 0x55555555
; X86-NEXT:    shrl %eax
; X86-NEXT:    andl $1431655765, %eax # imm = 0x55555555
; X86-NEXT:    leal (%eax,%ecx,2), %edx
; X86-NEXT:    movl (%esp), %esi # 4-byte Reload
; X86-NEXT:    shrdl $16, %ebx, %esi
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Reload
; X86-NEXT:    shrdl $16, %eax, %ebx
; X86-NEXT:    movl %ebx, (%esp) # 4-byte Spill
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-NEXT:    shrdl $16, %ecx, %eax
; X86-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Reload
; X86-NEXT:    shrdl $16, %eax, %ecx
; X86-NEXT:    movl %ecx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-NEXT:    shrdl $16, %ecx, %eax
; X86-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Reload
; X86-NEXT:    shrdl $16, %eax, %ecx
; X86-NEXT:    movl %ecx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-NEXT:    shrdl $16, %ecx, %eax
; X86-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Reload
; X86-NEXT:    shrdl $16, %eax, %ecx
; X86-NEXT:    movl %ecx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-NEXT:    shrdl $16, %ecx, %eax
; X86-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Reload
; X86-NEXT:    shrdl $16, %eax, %ecx
; X86-NEXT:    movl %ecx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-NEXT:    shrdl $16, %ecx, %eax
; X86-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ebp # 4-byte Reload
; X86-NEXT:    shrdl $16, %ebp, %ecx
; X86-NEXT:    movl %ecx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ebx # 4-byte Reload
; X86-NEXT:    shrdl $16, %ebx, %ebp
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Reload
; X86-NEXT:    shrdl $16, %eax, %ebx
; X86-NEXT:    shrdl $16, %edi, %eax
; X86-NEXT:    movl %eax, %ecx
; X86-NEXT:    shrdl $16, %edx, %edi
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    movl %edi, 60(%eax)
; X86-NEXT:    movl %ecx, 56(%eax)
; X86-NEXT:    movl %ebx, 52(%eax)
; X86-NEXT:    movl %ebp, 48(%eax)
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-NEXT:    movl %ecx, 44(%eax)
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-NEXT:    movl %ecx, 40(%eax)
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-NEXT:    movl %ecx, 36(%eax)
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-NEXT:    movl %ecx, 32(%eax)
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-NEXT:    movl %ecx, 28(%eax)
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-NEXT:    movl %ecx, 24(%eax)
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-NEXT:    movl %ecx, 20(%eax)
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-NEXT:    movl %ecx, 16(%eax)
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-NEXT:    movl %ecx, 12(%eax)
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86-NEXT:    movl %ecx, 8(%eax)
; X86-NEXT:    movl (%esp), %ecx # 4-byte Reload
; X86-NEXT:    movl %ecx, 4(%eax)
; X86-NEXT:    movl %esi, (%eax)
; X86-NEXT:    shrl $16, %edx
; X86-NEXT:    movw %dx, 64(%eax)
; X86-NEXT:    addl $56, %esp
; X86-NEXT:    popl %esi
; X86-NEXT:    popl %edi
; X86-NEXT:    popl %ebx
; X86-NEXT:    popl %ebp
; X86-NEXT:    retl $4
;
; X64-LABEL: large_promotion:
; X64:       # %bb.0:
; X64-NEXT:    pushq %r15
; X64-NEXT:    pushq %r14
; X64-NEXT:    pushq %r13
; X64-NEXT:    pushq %r12
; X64-NEXT:    pushq %rbx
; X64-NEXT:    movq %rdi, %rax
; X64-NEXT:    movq {{[0-9]+}}(%rsp), %r12
; X64-NEXT:    movq {{[0-9]+}}(%rsp), %r15
; X64-NEXT:    movq {{[0-9]+}}(%rsp), %rbx
; X64-NEXT:    movq {{[0-9]+}}(%rsp), %rdi
; X64-NEXT:    bswapq %rdi
; X64-NEXT:    movq %rdi, %r10
; X64-NEXT:    shrq $4, %r10
; X64-NEXT:    movabsq $1085102592571150095, %r11 # imm = 0xF0F0F0F0F0F0F0F
; X64-NEXT:    andq %r11, %r10
; X64-NEXT:    andq %r11, %rdi
; X64-NEXT:    shlq $4, %rdi
; X64-NEXT:    orq %r10, %rdi
; X64-NEXT:    movabsq $3689348814741910323, %r10 # imm = 0x3333333333333333
; X64-NEXT:    movq %rdi, %r14
; X64-NEXT:    andq %r10, %r14
; X64-NEXT:    shrq $2, %rdi
; X64-NEXT:    andq %r10, %rdi
; X64-NEXT:    leaq (%rdi,%r14,4), %rdi
; X64-NEXT:    movabsq $6148820866244280320, %r14 # imm = 0x5555000000000000
; X64-NEXT:    movq %rdi, %r13
; X64-NEXT:    andq %r14, %r13
; X64-NEXT:    shrq %rdi
; X64-NEXT:    andq %r14, %rdi
; X64-NEXT:    leaq (%rdi,%r13,2), %rdi
; X64-NEXT:    bswapq %rbx
; X64-NEXT:    movq %rbx, %r14
; X64-NEXT:    shrq $4, %r14
; X64-NEXT:    andq %r11, %r14
; X64-NEXT:    andq %r11, %rbx
; X64-NEXT:    shlq $4, %rbx
; X64-NEXT:    orq %r14, %rbx
; X64-NEXT:    movq %rbx, %r14
; X64-NEXT:    andq %r10, %r14
; X64-NEXT:    shrq $2, %rbx
; X64-NEXT:    andq %r10, %rbx
; X64-NEXT:    leaq (%rbx,%r14,4), %rbx
; X64-NEXT:    movabsq $6148914691236517205, %r14 # imm = 0x5555555555555555
; X64-NEXT:    movq %rbx, %r13
; X64-NEXT:    andq %r14, %r13
; X64-NEXT:    shrq %rbx
; X64-NEXT:    andq %r14, %rbx
; X64-NEXT:    leaq (%rbx,%r13,2), %rbx
; X64-NEXT:    shrdq $48, %rbx, %rdi
; X64-NEXT:    bswapq %r15
; X64-NEXT:    movq %r15, %r13
; X64-NEXT:    shrq $4, %r13
; X64-NEXT:    andq %r11, %r13
; X64-NEXT:    andq %r11, %r15
; X64-NEXT:    shlq $4, %r15
; X64-NEXT:    orq %r13, %r15
; X64-NEXT:    movq %r15, %r13
; X64-NEXT:    andq %r10, %r13
; X64-NEXT:    shrq $2, %r15
; X64-NEXT:    andq %r10, %r15
; X64-NEXT:    leaq (%r15,%r13,4), %r15
; X64-NEXT:    movq %r15, %r13
; X64-NEXT:    andq %r14, %r13
; X64-NEXT:    shrq %r15
; X64-NEXT:    andq %r14, %r15
; X64-NEXT:    leaq (%r15,%r13,2), %r15
; X64-NEXT:    shrdq $48, %r15, %rbx
; X64-NEXT:    bswapq %r12
; X64-NEXT:    movq %r12, %r13
; X64-NEXT:    shrq $4, %r13
; X64-NEXT:    andq %r11, %r13
; X64-NEXT:    andq %r11, %r12
; X64-NEXT:    shlq $4, %r12
; X64-NEXT:    orq %r13, %r12
; X64-NEXT:    movq %r12, %r13
; X64-NEXT:    andq %r10, %r13
; X64-NEXT:    shrq $2, %r12
; X64-NEXT:    andq %r10, %r12
; X64-NEXT:    leaq (%r12,%r13,4), %r12
; X64-NEXT:    movq %r12, %r13
; X64-NEXT:    andq %r14, %r13
; X64-NEXT:    shrq %r12
; X64-NEXT:    andq %r14, %r12
; X64-NEXT:    leaq (%r12,%r13,2), %r12
; X64-NEXT:    shrdq $48, %r12, %r15
; X64-NEXT:    bswapq %r9
; X64-NEXT:    movq %r9, %r13
; X64-NEXT:    shrq $4, %r13
; X64-NEXT:    andq %r11, %r13
; X64-NEXT:    andq %r11, %r9
; X64-NEXT:    shlq $4, %r9
; X64-NEXT:    orq %r13, %r9
; X64-NEXT:    movq %r9, %r13
; X64-NEXT:    andq %r10, %r13
; X64-NEXT:    shrq $2, %r9
; X64-NEXT:    andq %r10, %r9
; X64-NEXT:    leaq (%r9,%r13,4), %r9
; X64-NEXT:    movq %r9, %r13
; X64-NEXT:    andq %r14, %r13
; X64-NEXT:    shrq %r9
; X64-NEXT:    andq %r14, %r9
; X64-NEXT:    leaq (%r9,%r13,2), %r9
; X64-NEXT:    shrdq $48, %r9, %r12
; X64-NEXT:    bswapq %r8
; X64-NEXT:    movq %r8, %r13
; X64-NEXT:    shrq $4, %r13
; X64-NEXT:    andq %r11, %r13
; X64-NEXT:    andq %r11, %r8
; X64-NEXT:    shlq $4, %r8
; X64-NEXT:    orq %r13, %r8
; X64-NEXT:    movq %r8, %r13
; X64-NEXT:    andq %r10, %r13
; X64-NEXT:    shrq $2, %r8
; X64-NEXT:    andq %r10, %r8
; X64-NEXT:    leaq (%r8,%r13,4), %r8
; X64-NEXT:    movq %r8, %r13
; X64-NEXT:    andq %r14, %r13
; X64-NEXT:    shrq %r8
; X64-NEXT:    andq %r14, %r8
; X64-NEXT:    leaq (%r8,%r13,2), %r8
; X64-NEXT:    shrdq $48, %r8, %r9
; X64-NEXT:    bswapq %rcx
; X64-NEXT:    movq %rcx, %r13
; X64-NEXT:    shrq $4, %r13
; X64-NEXT:    andq %r11, %r13
; X64-NEXT:    andq %r11, %rcx
; X64-NEXT:    shlq $4, %rcx
; X64-NEXT:    orq %r13, %rcx
; X64-NEXT:    movq %rcx, %r13
; X64-NEXT:    andq %r10, %r13
; X64-NEXT:    shrq $2, %rcx
; X64-NEXT:    andq %r10, %rcx
; X64-NEXT:    leaq (%rcx,%r13,4), %rcx
; X64-NEXT:    movq %rcx, %r13
; X64-NEXT:    andq %r14, %r13
; X64-NEXT:    shrq %rcx
; X64-NEXT:    andq %r14, %rcx
; X64-NEXT:    leaq (%rcx,%r13,2), %rcx
; X64-NEXT:    shrdq $48, %rcx, %r8
; X64-NEXT:    bswapq %rdx
; X64-NEXT:    movq %rdx, %r13
; X64-NEXT:    shrq $4, %r13
; X64-NEXT:    andq %r11, %r13
; X64-NEXT:    andq %r11, %rdx
; X64-NEXT:    shlq $4, %rdx
; X64-NEXT:    orq %r13, %rdx
; X64-NEXT:    movq %rdx, %r13
; X64-NEXT:    andq %r10, %r13
; X64-NEXT:    shrq $2, %rdx
; X64-NEXT:    andq %r10, %rdx
; X64-NEXT:    leaq (%rdx,%r13,4), %rdx
; X64-NEXT:    movq %rdx, %r13
; X64-NEXT:    andq %r14, %r13
; X64-NEXT:    shrq %rdx
; X64-NEXT:    andq %r14, %rdx
; X64-NEXT:    leaq (%rdx,%r13,2), %rdx
; X64-NEXT:    shrdq $48, %rdx, %rcx
; X64-NEXT:    bswapq %rsi
; X64-NEXT:    movq %rsi, %r13
; X64-NEXT:    shrq $4, %r13
; X64-NEXT:    andq %r11, %r13
; X64-NEXT:    andq %r11, %rsi
; X64-NEXT:    shlq $4, %rsi
; X64-NEXT:    orq %r13, %rsi
; X64-NEXT:    movq %rsi, %r11
; X64-NEXT:    andq %r10, %r11
; X64-NEXT:    shrq $2, %rsi
; X64-NEXT:    andq %r10, %rsi
; X64-NEXT:    leaq (%rsi,%r11,4), %rsi
; X64-NEXT:    movq %rsi, %r10
; X64-NEXT:    andq %r14, %r10
; X64-NEXT:    shrq %rsi
; X64-NEXT:    andq %r14, %rsi
; X64-NEXT:    leaq (%rsi,%r10,2), %rsi
; X64-NEXT:    shrdq $48, %rsi, %rdx
; X64-NEXT:    shrq $48, %rsi
; X64-NEXT:    movq %rdx, 56(%rax)
; X64-NEXT:    movq %rcx, 48(%rax)
; X64-NEXT:    movq %r8, 40(%rax)
; X64-NEXT:    movq %r9, 32(%rax)
; X64-NEXT:    movq %r12, 24(%rax)
; X64-NEXT:    movq %r15, 16(%rax)
; X64-NEXT:    movq %rbx, 8(%rax)
; X64-NEXT:    movq %rdi, (%rax)
; X64-NEXT:    movw %si, 64(%rax)
; X64-NEXT:    popq %rbx
; X64-NEXT:    popq %r12
; X64-NEXT:    popq %r13
; X64-NEXT:    popq %r14
; X64-NEXT:    popq %r15
; X64-NEXT:    retq
;
; X86XOP-LABEL: large_promotion:
; X86XOP:       # %bb.0:
; X86XOP-NEXT:    pushl %ebp
; X86XOP-NEXT:    pushl %ebx
; X86XOP-NEXT:    pushl %edi
; X86XOP-NEXT:    pushl %esi
; X86XOP-NEXT:    subl $44, %esp
; X86XOP-NEXT:    vmovdqa {{.*#+}} xmm0 = [87,86,85,84,83,82,81,80,95,94,93,92,91,90,89,88]
; X86XOP-NEXT:    vmovd {{.*#+}} xmm1 = mem[0],zero,zero,zero
; X86XOP-NEXT:    vpperm %xmm0, %xmm1, %xmm0, %xmm1
; X86XOP-NEXT:    vpextrd $1, %xmm1, %eax
; X86XOP-NEXT:    vmovq {{.*#+}} xmm1 = mem[0],zero
; X86XOP-NEXT:    vpperm %xmm0, %xmm1, %xmm0, %xmm1
; X86XOP-NEXT:    vmovd %xmm1, %ecx
; X86XOP-NEXT:    shrdl $16, %ecx, %eax
; X86XOP-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86XOP-NEXT:    vpextrd $1, %xmm1, %eax
; X86XOP-NEXT:    shrdl $16, %eax, %ecx
; X86XOP-NEXT:    movl %ecx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86XOP-NEXT:    vmovq {{.*#+}} xmm1 = mem[0],zero
; X86XOP-NEXT:    vpperm %xmm0, %xmm1, %xmm0, %xmm1
; X86XOP-NEXT:    vmovd %xmm1, %ecx
; X86XOP-NEXT:    shrdl $16, %ecx, %eax
; X86XOP-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86XOP-NEXT:    vpextrd $1, %xmm1, %eax
; X86XOP-NEXT:    shrdl $16, %eax, %ecx
; X86XOP-NEXT:    movl %ecx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86XOP-NEXT:    vmovq {{.*#+}} xmm1 = mem[0],zero
; X86XOP-NEXT:    vpperm %xmm0, %xmm1, %xmm0, %xmm1
; X86XOP-NEXT:    vmovd %xmm1, %ecx
; X86XOP-NEXT:    shrdl $16, %ecx, %eax
; X86XOP-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86XOP-NEXT:    vpextrd $1, %xmm1, %eax
; X86XOP-NEXT:    shrdl $16, %eax, %ecx
; X86XOP-NEXT:    movl %ecx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86XOP-NEXT:    vmovq {{.*#+}} xmm1 = mem[0],zero
; X86XOP-NEXT:    vpperm %xmm0, %xmm1, %xmm0, %xmm1
; X86XOP-NEXT:    vmovd %xmm1, %ecx
; X86XOP-NEXT:    shrdl $16, %ecx, %eax
; X86XOP-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86XOP-NEXT:    vpextrd $1, %xmm1, %eax
; X86XOP-NEXT:    shrdl $16, %eax, %ecx
; X86XOP-NEXT:    movl %ecx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86XOP-NEXT:    vmovq {{.*#+}} xmm1 = mem[0],zero
; X86XOP-NEXT:    vpperm %xmm0, %xmm1, %xmm0, %xmm1
; X86XOP-NEXT:    vmovd %xmm1, %ecx
; X86XOP-NEXT:    shrdl $16, %ecx, %eax
; X86XOP-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86XOP-NEXT:    vpextrd $1, %xmm1, %eax
; X86XOP-NEXT:    shrdl $16, %eax, %ecx
; X86XOP-NEXT:    movl %ecx, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86XOP-NEXT:    vmovq {{.*#+}} xmm1 = mem[0],zero
; X86XOP-NEXT:    vpperm %xmm0, %xmm1, %xmm0, %xmm1
; X86XOP-NEXT:    vmovd %xmm1, %ebp
; X86XOP-NEXT:    shrdl $16, %ebp, %eax
; X86XOP-NEXT:    movl %eax, (%esp) # 4-byte Spill
; X86XOP-NEXT:    vpextrd $1, %xmm1, %ebx
; X86XOP-NEXT:    shrdl $16, %ebx, %ebp
; X86XOP-NEXT:    vmovq {{.*#+}} xmm1 = mem[0],zero
; X86XOP-NEXT:    vpperm %xmm0, %xmm1, %xmm0, %xmm1
; X86XOP-NEXT:    vmovd %xmm1, %esi
; X86XOP-NEXT:    shrdl $16, %esi, %ebx
; X86XOP-NEXT:    vpextrd $1, %xmm1, %edx
; X86XOP-NEXT:    shrdl $16, %edx, %esi
; X86XOP-NEXT:    vmovq {{.*#+}} xmm1 = mem[0],zero
; X86XOP-NEXT:    vpperm %xmm0, %xmm1, %xmm0, %xmm0
; X86XOP-NEXT:    vmovd %xmm0, %ecx
; X86XOP-NEXT:    shrdl $16, %ecx, %edx
; X86XOP-NEXT:    vpextrd $1, %xmm0, %edi
; X86XOP-NEXT:    shrdl $16, %edi, %ecx
; X86XOP-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86XOP-NEXT:    movl %ecx, 60(%eax)
; X86XOP-NEXT:    movl %edx, 56(%eax)
; X86XOP-NEXT:    movl %esi, 52(%eax)
; X86XOP-NEXT:    movl %ebx, 48(%eax)
; X86XOP-NEXT:    movl %ebp, 44(%eax)
; X86XOP-NEXT:    movl (%esp), %ecx # 4-byte Reload
; X86XOP-NEXT:    movl %ecx, 40(%eax)
; X86XOP-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86XOP-NEXT:    movl %ecx, 36(%eax)
; X86XOP-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86XOP-NEXT:    movl %ecx, 32(%eax)
; X86XOP-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86XOP-NEXT:    movl %ecx, 28(%eax)
; X86XOP-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86XOP-NEXT:    movl %ecx, 24(%eax)
; X86XOP-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86XOP-NEXT:    movl %ecx, 20(%eax)
; X86XOP-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86XOP-NEXT:    movl %ecx, 16(%eax)
; X86XOP-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86XOP-NEXT:    movl %ecx, 12(%eax)
; X86XOP-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86XOP-NEXT:    movl %ecx, 8(%eax)
; X86XOP-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86XOP-NEXT:    movl %ecx, 4(%eax)
; X86XOP-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %ecx # 4-byte Reload
; X86XOP-NEXT:    movl %ecx, (%eax)
; X86XOP-NEXT:    shrl $16, %edi
; X86XOP-NEXT:    movw %di, 64(%eax)
; X86XOP-NEXT:    addl $44, %esp
; X86XOP-NEXT:    popl %esi
; X86XOP-NEXT:    popl %edi
; X86XOP-NEXT:    popl %ebx
; X86XOP-NEXT:    popl %ebp
; X86XOP-NEXT:    retl $4
;
; CHECK-LABEL: large_promotion:
; CHECK:       # %bb.0:
; CHECK-NEXT:    pushq %r15 # encoding: [0x41,0x57]
; CHECK-NEXT:    pushq %r14 # encoding: [0x41,0x56]
; CHECK-NEXT:    pushq %r13 # encoding: [0x41,0x55]
; CHECK-NEXT:    pushq %r12 # encoding: [0x41,0x54]
; CHECK-NEXT:    pushq %rbx # encoding: [0x53]
; CHECK-NEXT:    movq %rdi, %rax # encoding: [0x48,0x89,0xf8]
; CHECK-NEXT:    movq {{[0-9]+}}(%rsp), %r12 # encoding: [0x4c,0x8b,0x64,0x24,0x30]
; CHECK-NEXT:    movq {{[0-9]+}}(%rsp), %r15 # encoding: [0x4c,0x8b,0x7c,0x24,0x38]
; CHECK-NEXT:    movq {{[0-9]+}}(%rsp), %rbx # encoding: [0x48,0x8b,0x5c,0x24,0x40]
; CHECK-NEXT:    movq {{[0-9]+}}(%rsp), %rdi # encoding: [0x48,0x8b,0x7c,0x24,0x48]
; CHECK-NEXT:    bswapq %rdi # encoding: [0x48,0x0f,0xcf]
; CHECK-NEXT:    movq %rdi, %r10 # encoding: [0x49,0x89,0xfa]
; CHECK-NEXT:    shrq $4, %r10 # encoding: [0x49,0xc1,0xea,0x04]
; CHECK-NEXT:    movabsq $1085102592571150095, %r11 # encoding: [0x49,0xbb,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f]
; CHECK-NEXT:    # imm = 0xF0F0F0F0F0F0F0F
; CHECK-NEXT:    andq %r11, %r10 # encoding: [0x4d,0x21,0xda]
; CHECK-NEXT:    andq %r11, %rdi # encoding: [0x4c,0x21,0xdf]
; CHECK-NEXT:    shlq $4, %rdi # encoding: [0x48,0xc1,0xe7,0x04]
; CHECK-NEXT:    orq %r10, %rdi # encoding: [0x4c,0x09,0xd7]
; CHECK-NEXT:    movabsq $3689348814741910323, %r10 # encoding: [0x49,0xba,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33]
; CHECK-NEXT:    # imm = 0x3333333333333333
; CHECK-NEXT:    movq %rdi, %r14 # encoding: [0x49,0x89,0xfe]
; CHECK-NEXT:    andq %r10, %r14 # encoding: [0x4d,0x21,0xd6]
; CHECK-NEXT:    shrq $2, %rdi # encoding: [0x48,0xc1,0xef,0x02]
; CHECK-NEXT:    andq %r10, %rdi # encoding: [0x4c,0x21,0xd7]
; CHECK-NEXT:    leaq (%rdi,%r14,4), %rdi # encoding: [0x4a,0x8d,0x3c,0xb7]
; CHECK-NEXT:    movabsq $6148820866244280320, %r14 # encoding: [0x49,0xbe,0x00,0x00,0x00,0x00,0x00,0x00,0x55,0x55]
; CHECK-NEXT:    # imm = 0x5555000000000000
; CHECK-NEXT:    movq %rdi, %r13 # encoding: [0x49,0x89,0xfd]
; CHECK-NEXT:    andq %r14, %r13 # encoding: [0x4d,0x21,0xf5]
; CHECK-NEXT:    shrq %rdi # encoding: [0x48,0xd1,0xef]
; CHECK-NEXT:    andq %r14, %rdi # encoding: [0x4c,0x21,0xf7]
; CHECK-NEXT:    leaq (%rdi,%r13,2), %rdi # encoding: [0x4a,0x8d,0x3c,0x6f]
; CHECK-NEXT:    bswapq %rbx # encoding: [0x48,0x0f,0xcb]
; CHECK-NEXT:    movq %rbx, %r14 # encoding: [0x49,0x89,0xde]
; CHECK-NEXT:    shrq $4, %r14 # encoding: [0x49,0xc1,0xee,0x04]
; CHECK-NEXT:    andq %r11, %r14 # encoding: [0x4d,0x21,0xde]
; CHECK-NEXT:    andq %r11, %rbx # encoding: [0x4c,0x21,0xdb]
; CHECK-NEXT:    shlq $4, %rbx # encoding: [0x48,0xc1,0xe3,0x04]
; CHECK-NEXT:    orq %r14, %rbx # encoding: [0x4c,0x09,0xf3]
; CHECK-NEXT:    movq %rbx, %r14 # encoding: [0x49,0x89,0xde]
; CHECK-NEXT:    andq %r10, %r14 # encoding: [0x4d,0x21,0xd6]
; CHECK-NEXT:    shrq $2, %rbx # encoding: [0x48,0xc1,0xeb,0x02]
; CHECK-NEXT:    andq %r10, %rbx # encoding: [0x4c,0x21,0xd3]
; CHECK-NEXT:    leaq (%rbx,%r14,4), %rbx # encoding: [0x4a,0x8d,0x1c,0xb3]
; CHECK-NEXT:    movabsq $6148914691236517205, %r14 # encoding: [0x49,0xbe,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55]
; CHECK-NEXT:    # imm = 0x5555555555555555
; CHECK-NEXT:    movq %rbx, %r13 # encoding: [0x49,0x89,0xdd]
; CHECK-NEXT:    andq %r14, %r13 # encoding: [0x4d,0x21,0xf5]
; CHECK-NEXT:    shrq %rbx # encoding: [0x48,0xd1,0xeb]
; CHECK-NEXT:    andq %r14, %rbx # encoding: [0x4c,0x21,0xf3]
; CHECK-NEXT:    leaq (%rbx,%r13,2), %rbx # encoding: [0x4a,0x8d,0x1c,0x6b]
; CHECK-NEXT:    shrdq $48, %rbx, %rdi # encoding: [0x48,0x0f,0xac,0xdf,0x30]
; CHECK-NEXT:    bswapq %r15 # encoding: [0x49,0x0f,0xcf]
; CHECK-NEXT:    movq %r15, %r13 # encoding: [0x4d,0x89,0xfd]
; CHECK-NEXT:    shrq $4, %r13 # encoding: [0x49,0xc1,0xed,0x04]
; CHECK-NEXT:    andq %r11, %r13 # encoding: [0x4d,0x21,0xdd]
; CHECK-NEXT:    andq %r11, %r15 # encoding: [0x4d,0x21,0xdf]
; CHECK-NEXT:    shlq $4, %r15 # encoding: [0x49,0xc1,0xe7,0x04]
; CHECK-NEXT:    orq %r13, %r15 # encoding: [0x4d,0x09,0xef]
; CHECK-NEXT:    movq %r15, %r13 # encoding: [0x4d,0x89,0xfd]
; CHECK-NEXT:    andq %r10, %r13 # encoding: [0x4d,0x21,0xd5]
; CHECK-NEXT:    shrq $2, %r15 # encoding: [0x49,0xc1,0xef,0x02]
; CHECK-NEXT:    andq %r10, %r15 # encoding: [0x4d,0x21,0xd7]
; CHECK-NEXT:    leaq (%r15,%r13,4), %r15 # encoding: [0x4f,0x8d,0x3c,0xaf]
; CHECK-NEXT:    movq %r15, %r13 # encoding: [0x4d,0x89,0xfd]
; CHECK-NEXT:    andq %r14, %r13 # encoding: [0x4d,0x21,0xf5]
; CHECK-NEXT:    shrq %r15 # encoding: [0x49,0xd1,0xef]
; CHECK-NEXT:    andq %r14, %r15 # encoding: [0x4d,0x21,0xf7]
; CHECK-NEXT:    leaq (%r15,%r13,2), %r15 # encoding: [0x4f,0x8d,0x3c,0x6f]
; CHECK-NEXT:    shrdq $48, %r15, %rbx # encoding: [0x4c,0x0f,0xac,0xfb,0x30]
; CHECK-NEXT:    bswapq %r12 # encoding: [0x49,0x0f,0xcc]
; CHECK-NEXT:    movq %r12, %r13 # encoding: [0x4d,0x89,0xe5]
; CHECK-NEXT:    shrq $4, %r13 # encoding: [0x49,0xc1,0xed,0x04]
; CHECK-NEXT:    andq %r11, %r13 # encoding: [0x4d,0x21,0xdd]
; CHECK-NEXT:    andq %r11, %r12 # encoding: [0x4d,0x21,0xdc]
; CHECK-NEXT:    shlq $4, %r12 # encoding: [0x49,0xc1,0xe4,0x04]
; CHECK-NEXT:    orq %r13, %r12 # encoding: [0x4d,0x09,0xec]
; CHECK-NEXT:    movq %r12, %r13 # encoding: [0x4d,0x89,0xe5]
; CHECK-NEXT:    andq %r10, %r13 # encoding: [0x4d,0x21,0xd5]
; CHECK-NEXT:    shrq $2, %r12 # encoding: [0x49,0xc1,0xec,0x02]
; CHECK-NEXT:    andq %r10, %r12 # encoding: [0x4d,0x21,0xd4]
; CHECK-NEXT:    leaq (%r12,%r13,4), %r12 # encoding: [0x4f,0x8d,0x24,0xac]
; CHECK-NEXT:    movq %r12, %r13 # encoding: [0x4d,0x89,0xe5]
; CHECK-NEXT:    andq %r14, %r13 # encoding: [0x4d,0x21,0xf5]
; CHECK-NEXT:    shrq %r12 # encoding: [0x49,0xd1,0xec]
; CHECK-NEXT:    andq %r14, %r12 # encoding: [0x4d,0x21,0xf4]
; CHECK-NEXT:    leaq (%r12,%r13,2), %r12 # encoding: [0x4f,0x8d,0x24,0x6c]
; CHECK-NEXT:    shrdq $48, %r12, %r15 # encoding: [0x4d,0x0f,0xac,0xe7,0x30]
; CHECK-NEXT:    bswapq %r9 # encoding: [0x49,0x0f,0xc9]
; CHECK-NEXT:    movq %r9, %r13 # encoding: [0x4d,0x89,0xcd]
; CHECK-NEXT:    shrq $4, %r13 # encoding: [0x49,0xc1,0xed,0x04]
; CHECK-NEXT:    andq %r11, %r13 # encoding: [0x4d,0x21,0xdd]
; CHECK-NEXT:    andq %r11, %r9 # encoding: [0x4d,0x21,0xd9]
; CHECK-NEXT:    shlq $4, %r9 # encoding: [0x49,0xc1,0xe1,0x04]
; CHECK-NEXT:    orq %r13, %r9 # encoding: [0x4d,0x09,0xe9]
; CHECK-NEXT:    movq %r9, %r13 # encoding: [0x4d,0x89,0xcd]
; CHECK-NEXT:    andq %r10, %r13 # encoding: [0x4d,0x21,0xd5]
; CHECK-NEXT:    shrq $2, %r9 # encoding: [0x49,0xc1,0xe9,0x02]
; CHECK-NEXT:    andq %r10, %r9 # encoding: [0x4d,0x21,0xd1]
; CHECK-NEXT:    leaq (%r9,%r13,4), %r9 # encoding: [0x4f,0x8d,0x0c,0xa9]
; CHECK-NEXT:    movq %r9, %r13 # encoding: [0x4d,0x89,0xcd]
; CHECK-NEXT:    andq %r14, %r13 # encoding: [0x4d,0x21,0xf5]
; CHECK-NEXT:    shrq %r9 # encoding: [0x49,0xd1,0xe9]
; CHECK-NEXT:    andq %r14, %r9 # encoding: [0x4d,0x21,0xf1]
; CHECK-NEXT:    leaq (%r9,%r13,2), %r9 # encoding: [0x4f,0x8d,0x0c,0x69]
; CHECK-NEXT:    shrdq $48, %r9, %r12 # encoding: [0x4d,0x0f,0xac,0xcc,0x30]
; CHECK-NEXT:    bswapq %r8 # encoding: [0x49,0x0f,0xc8]
; CHECK-NEXT:    movq %r8, %r13 # encoding: [0x4d,0x89,0xc5]
; CHECK-NEXT:    shrq $4, %r13 # encoding: [0x49,0xc1,0xed,0x04]
; CHECK-NEXT:    andq %r11, %r13 # encoding: [0x4d,0x21,0xdd]
; CHECK-NEXT:    andq %r11, %r8 # encoding: [0x4d,0x21,0xd8]
; CHECK-NEXT:    shlq $4, %r8 # encoding: [0x49,0xc1,0xe0,0x04]
; CHECK-NEXT:    orq %r13, %r8 # encoding: [0x4d,0x09,0xe8]
; CHECK-NEXT:    movq %r8, %r13 # encoding: [0x4d,0x89,0xc5]
; CHECK-NEXT:    andq %r10, %r13 # encoding: [0x4d,0x21,0xd5]
; CHECK-NEXT:    shrq $2, %r8 # encoding: [0x49,0xc1,0xe8,0x02]
; CHECK-NEXT:    andq %r10, %r8 # encoding: [0x4d,0x21,0xd0]
; CHECK-NEXT:    leaq (%r8,%r13,4), %r8 # encoding: [0x4f,0x8d,0x04,0xa8]
; CHECK-NEXT:    movq %r8, %r13 # encoding: [0x4d,0x89,0xc5]
; CHECK-NEXT:    andq %r14, %r13 # encoding: [0x4d,0x21,0xf5]
; CHECK-NEXT:    shrq %r8 # encoding: [0x49,0xd1,0xe8]
; CHECK-NEXT:    andq %r14, %r8 # encoding: [0x4d,0x21,0xf0]
; CHECK-NEXT:    leaq (%r8,%r13,2), %r8 # encoding: [0x4f,0x8d,0x04,0x68]
; CHECK-NEXT:    shrdq $48, %r8, %r9 # encoding: [0x4d,0x0f,0xac,0xc1,0x30]
; CHECK-NEXT:    bswapq %rcx # encoding: [0x48,0x0f,0xc9]
; CHECK-NEXT:    movq %rcx, %r13 # encoding: [0x49,0x89,0xcd]
; CHECK-NEXT:    shrq $4, %r13 # encoding: [0x49,0xc1,0xed,0x04]
; CHECK-NEXT:    andq %r11, %r13 # encoding: [0x4d,0x21,0xdd]
; CHECK-NEXT:    andq %r11, %rcx # encoding: [0x4c,0x21,0xd9]
; CHECK-NEXT:    shlq $4, %rcx # encoding: [0x48,0xc1,0xe1,0x04]
; CHECK-NEXT:    orq %r13, %rcx # encoding: [0x4c,0x09,0xe9]
; CHECK-NEXT:    movq %rcx, %r13 # encoding: [0x49,0x89,0xcd]
; CHECK-NEXT:    andq %r10, %r13 # encoding: [0x4d,0x21,0xd5]
; CHECK-NEXT:    shrq $2, %rcx # encoding: [0x48,0xc1,0xe9,0x02]
; CHECK-NEXT:    andq %r10, %rcx # encoding: [0x4c,0x21,0xd1]
; CHECK-NEXT:    leaq (%rcx,%r13,4), %rcx # encoding: [0x4a,0x8d,0x0c,0xa9]
; CHECK-NEXT:    movq %rcx, %r13 # encoding: [0x49,0x89,0xcd]
; CHECK-NEXT:    andq %r14, %r13 # encoding: [0x4d,0x21,0xf5]
; CHECK-NEXT:    shrq %rcx # encoding: [0x48,0xd1,0xe9]
; CHECK-NEXT:    andq %r14, %rcx # encoding: [0x4c,0x21,0xf1]
; CHECK-NEXT:    leaq (%rcx,%r13,2), %rcx # encoding: [0x4a,0x8d,0x0c,0x69]
; CHECK-NEXT:    shrdq $48, %rcx, %r8 # encoding: [0x49,0x0f,0xac,0xc8,0x30]
; CHECK-NEXT:    bswapq %rdx # encoding: [0x48,0x0f,0xca]
; CHECK-NEXT:    movq %rdx, %r13 # encoding: [0x49,0x89,0xd5]
; CHECK-NEXT:    shrq $4, %r13 # encoding: [0x49,0xc1,0xed,0x04]
; CHECK-NEXT:    andq %r11, %r13 # encoding: [0x4d,0x21,0xdd]
; CHECK-NEXT:    andq %r11, %rdx # encoding: [0x4c,0x21,0xda]
; CHECK-NEXT:    shlq $4, %rdx # encoding: [0x48,0xc1,0xe2,0x04]
; CHECK-NEXT:    orq %r13, %rdx # encoding: [0x4c,0x09,0xea]
; CHECK-NEXT:    movq %rdx, %r13 # encoding: [0x49,0x89,0xd5]
; CHECK-NEXT:    andq %r10, %r13 # encoding: [0x4d,0x21,0xd5]
; CHECK-NEXT:    shrq $2, %rdx # encoding: [0x48,0xc1,0xea,0x02]
; CHECK-NEXT:    andq %r10, %rdx # encoding: [0x4c,0x21,0xd2]
; CHECK-NEXT:    leaq (%rdx,%r13,4), %rdx # encoding: [0x4a,0x8d,0x14,0xaa]
; CHECK-NEXT:    movq %rdx, %r13 # encoding: [0x49,0x89,0xd5]
; CHECK-NEXT:    andq %r14, %r13 # encoding: [0x4d,0x21,0xf5]
; CHECK-NEXT:    shrq %rdx # encoding: [0x48,0xd1,0xea]
; CHECK-NEXT:    andq %r14, %rdx # encoding: [0x4c,0x21,0xf2]
; CHECK-NEXT:    leaq (%rdx,%r13,2), %rdx # encoding: [0x4a,0x8d,0x14,0x6a]
; CHECK-NEXT:    shrdq $48, %rdx, %rcx # encoding: [0x48,0x0f,0xac,0xd1,0x30]
; CHECK-NEXT:    bswapq %rsi # encoding: [0x48,0x0f,0xce]
; CHECK-NEXT:    movq %rsi, %r13 # encoding: [0x49,0x89,0xf5]
; CHECK-NEXT:    shrq $4, %r13 # encoding: [0x49,0xc1,0xed,0x04]
; CHECK-NEXT:    andq %r11, %r13 # encoding: [0x4d,0x21,0xdd]
; CHECK-NEXT:    andq %r11, %rsi # encoding: [0x4c,0x21,0xde]
; CHECK-NEXT:    shlq $4, %rsi # encoding: [0x48,0xc1,0xe6,0x04]
; CHECK-NEXT:    orq %r13, %rsi # encoding: [0x4c,0x09,0xee]
; CHECK-NEXT:    movq %rsi, %r11 # encoding: [0x49,0x89,0xf3]
; CHECK-NEXT:    andq %r10, %r11 # encoding: [0x4d,0x21,0xd3]
; CHECK-NEXT:    shrq $2, %rsi # encoding: [0x48,0xc1,0xee,0x02]
; CHECK-NEXT:    andq %r10, %rsi # encoding: [0x4c,0x21,0xd6]
; CHECK-NEXT:    leaq (%rsi,%r11,4), %rsi # encoding: [0x4a,0x8d,0x34,0x9e]
; CHECK-NEXT:    movq %rsi, %r10 # encoding: [0x49,0x89,0xf2]
; CHECK-NEXT:    andq %r14, %r10 # encoding: [0x4d,0x21,0xf2]
; CHECK-NEXT:    shrq %rsi # encoding: [0x48,0xd1,0xee]
; CHECK-NEXT:    andq %r14, %rsi # encoding: [0x4c,0x21,0xf6]
; CHECK-NEXT:    leaq (%rsi,%r10,2), %rsi # encoding: [0x4a,0x8d,0x34,0x56]
; CHECK-NEXT:    shrdq $48, %rsi, %rdx # encoding: [0x48,0x0f,0xac,0xf2,0x30]
; CHECK-NEXT:    shrq $48, %rsi # encoding: [0x48,0xc1,0xee,0x30]
; CHECK-NEXT:    movq %rdx, 56(%rax) # encoding: [0x48,0x89,0x50,0x38]
; CHECK-NEXT:    movq %rcx, 48(%rax) # encoding: [0x48,0x89,0x48,0x30]
; CHECK-NEXT:    movq %r8, 40(%rax) # encoding: [0x4c,0x89,0x40,0x28]
; CHECK-NEXT:    movq %r9, 32(%rax) # encoding: [0x4c,0x89,0x48,0x20]
; CHECK-NEXT:    movq %r12, 24(%rax) # encoding: [0x4c,0x89,0x60,0x18]
; CHECK-NEXT:    movq %r15, 16(%rax) # encoding: [0x4c,0x89,0x78,0x10]
; CHECK-NEXT:    movq %rbx, 8(%rax) # encoding: [0x48,0x89,0x58,0x08]
; CHECK-NEXT:    movq %rdi, (%rax) # encoding: [0x48,0x89,0x38]
; CHECK-NEXT:    movw %si, 64(%rax) # encoding: [0x66,0x89,0x70,0x40]
; CHECK-NEXT:    popq %rbx # encoding: [0x5b]
; CHECK-NEXT:    popq %r12 # encoding: [0x41,0x5c]
; CHECK-NEXT:    popq %r13 # encoding: [0x41,0x5d]
; CHECK-NEXT:    popq %r14 # encoding: [0x41,0x5e]
; CHECK-NEXT:    popq %r15 # encoding: [0x41,0x5f]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %Z = call i528 @llvm.bitreverse.i528(i528 %A)
  ret i528 %Z
}
declare <2 x i16> @llvm.bitreverse.v2i16(<2 x i16>) readnone
declare i64 @llvm.bitreverse.i64(i64) readnone
declare i32 @llvm.bitreverse.i32(i32) readnone
declare i24 @llvm.bitreverse.i24(i24) readnone
declare i16 @llvm.bitreverse.i16(i16) readnone
declare i8 @llvm.bitreverse.i8(i8) readnone
declare i4 @llvm.bitreverse.i4(i4) readnone
declare i528 @llvm.bitreverse.i528(i528)
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; GFNI: {{.*}}
