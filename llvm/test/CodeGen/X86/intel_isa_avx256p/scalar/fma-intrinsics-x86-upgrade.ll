; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_avx256p
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx256p -show-mc-encoding | FileCheck %s --check-prefix=AVX256P
; RUN: llc < %s -mtriple=x86_64-pc-windows -mattr=+avx256p -show-mc-encoding | FileCheck %s --check-prefix=AVX256P-WIN

define <4 x float> @test_x86_fma_vfmadd_ss(<4 x float> %a0, <4 x float> %a1, <4 x float> %a2) #0 {
; AVX256P-LABEL: test_x86_fma_vfmadd_ss:
; AVX256P:       # %bb.0:
; AVX256P-NEXT:    vfmadd213ss %xmm2, %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc4,0xe2,0x71,0xa9,0xc2]
; AVX256P-NEXT:    # xmm0 = (xmm1 * xmm0) + xmm2
; AVX256P-NEXT:    retq # encoding: [0xc3]
;
; AVX256P-WIN-LABEL: test_x86_fma_vfmadd_ss:
; AVX256P-WIN:       # %bb.0:
; AVX256P-WIN-NEXT:    vmovaps (%rcx), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x01]
; AVX256P-WIN-NEXT:    vmovss (%r8), %xmm1 # EVEX TO VEX Compression encoding: [0xc4,0xc1,0x7a,0x10,0x08]
; AVX256P-WIN-NEXT:    # xmm1 = mem[0],zero,zero,zero
; AVX256P-WIN-NEXT:    vfmadd132ss (%rdx), %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc4,0xe2,0x71,0x99,0x02]
; AVX256P-WIN-NEXT:    # xmm0 = (xmm0 * mem) + xmm1
; AVX256P-WIN-NEXT:    retq # encoding: [0xc3]
  %res = call <4 x float> @llvm.x86.fma.vfmadd.ss(<4 x float> %a0, <4 x float> %a1, <4 x float> %a2)
  ret <4 x float> %res
}

define <4 x float> @test_x86_fma_vfmadd_bac_ss(<4 x float> %a0, <4 x float> %a1, <4 x float> %a2) #0 {
; AVX256P-LABEL: test_x86_fma_vfmadd_bac_ss:
; AVX256P:       # %bb.0:
; AVX256P-NEXT:    vfmadd213ss %xmm2, %xmm0, %xmm1 # EVEX TO VEX Compression encoding: [0xc4,0xe2,0x79,0xa9,0xca]
; AVX256P-NEXT:    # xmm1 = (xmm0 * xmm1) + xmm2
; AVX256P-NEXT:    vmovaps %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0xc1]
; AVX256P-NEXT:    retq # encoding: [0xc3]
;
; AVX256P-WIN-LABEL: test_x86_fma_vfmadd_bac_ss:
; AVX256P-WIN:       # %bb.0:
; AVX256P-WIN-NEXT:    vmovaps (%rdx), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x02]
; AVX256P-WIN-NEXT:    vmovss (%r8), %xmm1 # EVEX TO VEX Compression encoding: [0xc4,0xc1,0x7a,0x10,0x08]
; AVX256P-WIN-NEXT:    # xmm1 = mem[0],zero,zero,zero
; AVX256P-WIN-NEXT:    vfmadd132ss (%rcx), %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc4,0xe2,0x71,0x99,0x01]
; AVX256P-WIN-NEXT:    # xmm0 = (xmm0 * mem) + xmm1
; AVX256P-WIN-NEXT:    retq # encoding: [0xc3]
  %res = call <4 x float> @llvm.x86.fma.vfmadd.ss(<4 x float> %a1, <4 x float> %a0, <4 x float> %a2)
  ret <4 x float> %res
}

define <2 x double> @test_x86_fma_vfmadd_sd(<2 x double> %a0, <2 x double> %a1, <2 x double> %a2) #0 {
; AVX256P-LABEL: test_x86_fma_vfmadd_sd:
; AVX256P:       # %bb.0:
; AVX256P-NEXT:    vfmadd213sd %xmm2, %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc4,0xe2,0xf1,0xa9,0xc2]
; AVX256P-NEXT:    # xmm0 = (xmm1 * xmm0) + xmm2
; AVX256P-NEXT:    retq # encoding: [0xc3]
;
; AVX256P-WIN-LABEL: test_x86_fma_vfmadd_sd:
; AVX256P-WIN:       # %bb.0:
; AVX256P-WIN-NEXT:    vmovapd (%rcx), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf9,0x28,0x01]
; AVX256P-WIN-NEXT:    vmovsd (%r8), %xmm1 # EVEX TO VEX Compression encoding: [0xc4,0xc1,0x7b,0x10,0x08]
; AVX256P-WIN-NEXT:    # xmm1 = mem[0],zero
; AVX256P-WIN-NEXT:    vfmadd132sd (%rdx), %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc4,0xe2,0xf1,0x99,0x02]
; AVX256P-WIN-NEXT:    # xmm0 = (xmm0 * mem) + xmm1
; AVX256P-WIN-NEXT:    retq # encoding: [0xc3]
  %res = call <2 x double> @llvm.x86.fma.vfmadd.sd(<2 x double> %a0, <2 x double> %a1, <2 x double> %a2)
  ret <2 x double> %res
}

define <2 x double> @test_x86_fma_vfmadd_bac_sd(<2 x double> %a0, <2 x double> %a1, <2 x double> %a2) #0 {
; AVX256P-LABEL: test_x86_fma_vfmadd_bac_sd:
; AVX256P:       # %bb.0:
; AVX256P-NEXT:    vfmadd213sd %xmm2, %xmm0, %xmm1 # EVEX TO VEX Compression encoding: [0xc4,0xe2,0xf9,0xa9,0xca]
; AVX256P-NEXT:    # xmm1 = (xmm0 * xmm1) + xmm2
; AVX256P-NEXT:    vmovapd %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf9,0x28,0xc1]
; AVX256P-NEXT:    retq # encoding: [0xc3]
;
; AVX256P-WIN-LABEL: test_x86_fma_vfmadd_bac_sd:
; AVX256P-WIN:       # %bb.0:
; AVX256P-WIN-NEXT:    vmovapd (%rdx), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf9,0x28,0x02]
; AVX256P-WIN-NEXT:    vmovsd (%r8), %xmm1 # EVEX TO VEX Compression encoding: [0xc4,0xc1,0x7b,0x10,0x08]
; AVX256P-WIN-NEXT:    # xmm1 = mem[0],zero
; AVX256P-WIN-NEXT:    vfmadd132sd (%rcx), %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc4,0xe2,0xf1,0x99,0x01]
; AVX256P-WIN-NEXT:    # xmm0 = (xmm0 * mem) + xmm1
; AVX256P-WIN-NEXT:    retq # encoding: [0xc3]
  %res = call <2 x double> @llvm.x86.fma.vfmadd.sd(<2 x double> %a1, <2 x double> %a0, <2 x double> %a2)
  ret <2 x double> %res
}

define <4 x float> @test_x86_fma_vfmsub_ss(<4 x float> %a0, <4 x float> %a1, <4 x float> %a2) #0 {
; AVX256P-LABEL: test_x86_fma_vfmsub_ss:
; AVX256P:       # %bb.0:
; AVX256P-NEXT:    vfmsub213ss %xmm2, %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc4,0xe2,0x71,0xab,0xc2]
; AVX256P-NEXT:    # xmm0 = (xmm1 * xmm0) - xmm2
; AVX256P-NEXT:    retq # encoding: [0xc3]
;
; AVX256P-WIN-LABEL: test_x86_fma_vfmsub_ss:
; AVX256P-WIN:       # %bb.0:
; AVX256P-WIN-NEXT:    vmovaps (%rcx), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x01]
; AVX256P-WIN-NEXT:    vmovss (%r8), %xmm1 # EVEX TO VEX Compression encoding: [0xc4,0xc1,0x7a,0x10,0x08]
; AVX256P-WIN-NEXT:    # xmm1 = mem[0],zero,zero,zero
; AVX256P-WIN-NEXT:    vfmsub132ss (%rdx), %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc4,0xe2,0x71,0x9b,0x02]
; AVX256P-WIN-NEXT:    # xmm0 = (xmm0 * mem) - xmm1
; AVX256P-WIN-NEXT:    retq # encoding: [0xc3]
  %res = call <4 x float> @llvm.x86.fma.vfmsub.ss(<4 x float> %a0, <4 x float> %a1, <4 x float> %a2)
  ret <4 x float> %res
}

define <4 x float> @test_x86_fma_vfmsub_bac_ss(<4 x float> %a0, <4 x float> %a1, <4 x float> %a2) #0 {
; AVX256P-LABEL: test_x86_fma_vfmsub_bac_ss:
; AVX256P:       # %bb.0:
; AVX256P-NEXT:    vfmsub213ss %xmm2, %xmm0, %xmm1 # EVEX TO VEX Compression encoding: [0xc4,0xe2,0x79,0xab,0xca]
; AVX256P-NEXT:    # xmm1 = (xmm0 * xmm1) - xmm2
; AVX256P-NEXT:    vmovaps %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0xc1]
; AVX256P-NEXT:    retq # encoding: [0xc3]
;
; AVX256P-WIN-LABEL: test_x86_fma_vfmsub_bac_ss:
; AVX256P-WIN:       # %bb.0:
; AVX256P-WIN-NEXT:    vmovaps (%rdx), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x02]
; AVX256P-WIN-NEXT:    vmovss (%r8), %xmm1 # EVEX TO VEX Compression encoding: [0xc4,0xc1,0x7a,0x10,0x08]
; AVX256P-WIN-NEXT:    # xmm1 = mem[0],zero,zero,zero
; AVX256P-WIN-NEXT:    vfmsub132ss (%rcx), %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc4,0xe2,0x71,0x9b,0x01]
; AVX256P-WIN-NEXT:    # xmm0 = (xmm0 * mem) - xmm1
; AVX256P-WIN-NEXT:    retq # encoding: [0xc3]
  %res = call <4 x float> @llvm.x86.fma.vfmsub.ss(<4 x float> %a1, <4 x float> %a0, <4 x float> %a2)
  ret <4 x float> %res
}

define <2 x double> @test_x86_fma_vfmsub_sd(<2 x double> %a0, <2 x double> %a1, <2 x double> %a2) #0 {
; AVX256P-LABEL: test_x86_fma_vfmsub_sd:
; AVX256P:       # %bb.0:
; AVX256P-NEXT:    vfmsub213sd %xmm2, %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc4,0xe2,0xf1,0xab,0xc2]
; AVX256P-NEXT:    # xmm0 = (xmm1 * xmm0) - xmm2
; AVX256P-NEXT:    retq # encoding: [0xc3]
;
; AVX256P-WIN-LABEL: test_x86_fma_vfmsub_sd:
; AVX256P-WIN:       # %bb.0:
; AVX256P-WIN-NEXT:    vmovapd (%rcx), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf9,0x28,0x01]
; AVX256P-WIN-NEXT:    vmovsd (%r8), %xmm1 # EVEX TO VEX Compression encoding: [0xc4,0xc1,0x7b,0x10,0x08]
; AVX256P-WIN-NEXT:    # xmm1 = mem[0],zero
; AVX256P-WIN-NEXT:    vfmsub132sd (%rdx), %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc4,0xe2,0xf1,0x9b,0x02]
; AVX256P-WIN-NEXT:    # xmm0 = (xmm0 * mem) - xmm1
; AVX256P-WIN-NEXT:    retq # encoding: [0xc3]
  %res = call <2 x double> @llvm.x86.fma.vfmsub.sd(<2 x double> %a0, <2 x double> %a1, <2 x double> %a2)
  ret <2 x double> %res
}

define <2 x double> @test_x86_fma_vfmsub_bac_sd(<2 x double> %a0, <2 x double> %a1, <2 x double> %a2) #0 {
; AVX256P-LABEL: test_x86_fma_vfmsub_bac_sd:
; AVX256P:       # %bb.0:
; AVX256P-NEXT:    vfmsub213sd %xmm2, %xmm0, %xmm1 # EVEX TO VEX Compression encoding: [0xc4,0xe2,0xf9,0xab,0xca]
; AVX256P-NEXT:    # xmm1 = (xmm0 * xmm1) - xmm2
; AVX256P-NEXT:    vmovapd %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf9,0x28,0xc1]
; AVX256P-NEXT:    retq # encoding: [0xc3]
;
; AVX256P-WIN-LABEL: test_x86_fma_vfmsub_bac_sd:
; AVX256P-WIN:       # %bb.0:
; AVX256P-WIN-NEXT:    vmovapd (%rdx), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf9,0x28,0x02]
; AVX256P-WIN-NEXT:    vmovsd (%r8), %xmm1 # EVEX TO VEX Compression encoding: [0xc4,0xc1,0x7b,0x10,0x08]
; AVX256P-WIN-NEXT:    # xmm1 = mem[0],zero
; AVX256P-WIN-NEXT:    vfmsub132sd (%rcx), %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc4,0xe2,0xf1,0x9b,0x01]
; AVX256P-WIN-NEXT:    # xmm0 = (xmm0 * mem) - xmm1
; AVX256P-WIN-NEXT:    retq # encoding: [0xc3]
  %res = call <2 x double> @llvm.x86.fma.vfmsub.sd(<2 x double> %a1, <2 x double> %a0, <2 x double> %a2)
  ret <2 x double> %res
}

define <4 x float> @test_x86_fma_vfnmadd_ss(<4 x float> %a0, <4 x float> %a1, <4 x float> %a2) #0 {
; AVX256P-LABEL: test_x86_fma_vfnmadd_ss:
; AVX256P:       # %bb.0:
; AVX256P-NEXT:    vfnmadd213ss %xmm2, %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc4,0xe2,0x71,0xad,0xc2]
; AVX256P-NEXT:    # xmm0 = -(xmm1 * xmm0) + xmm2
; AVX256P-NEXT:    retq # encoding: [0xc3]
;
; AVX256P-WIN-LABEL: test_x86_fma_vfnmadd_ss:
; AVX256P-WIN:       # %bb.0:
; AVX256P-WIN-NEXT:    vmovaps (%rcx), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x01]
; AVX256P-WIN-NEXT:    vmovss (%r8), %xmm1 # EVEX TO VEX Compression encoding: [0xc4,0xc1,0x7a,0x10,0x08]
; AVX256P-WIN-NEXT:    # xmm1 = mem[0],zero,zero,zero
; AVX256P-WIN-NEXT:    vfnmadd132ss (%rdx), %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc4,0xe2,0x71,0x9d,0x02]
; AVX256P-WIN-NEXT:    # xmm0 = -(xmm0 * mem) + xmm1
; AVX256P-WIN-NEXT:    retq # encoding: [0xc3]
  %res = call <4 x float> @llvm.x86.fma.vfnmadd.ss(<4 x float> %a0, <4 x float> %a1, <4 x float> %a2)
  ret <4 x float> %res
}

define <4 x float> @test_x86_fma_vfnmadd_bac_ss(<4 x float> %a0, <4 x float> %a1, <4 x float> %a2) #0 {
; AVX256P-LABEL: test_x86_fma_vfnmadd_bac_ss:
; AVX256P:       # %bb.0:
; AVX256P-NEXT:    vfnmadd213ss %xmm2, %xmm0, %xmm1 # EVEX TO VEX Compression encoding: [0xc4,0xe2,0x79,0xad,0xca]
; AVX256P-NEXT:    # xmm1 = -(xmm0 * xmm1) + xmm2
; AVX256P-NEXT:    vmovaps %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0xc1]
; AVX256P-NEXT:    retq # encoding: [0xc3]
;
; AVX256P-WIN-LABEL: test_x86_fma_vfnmadd_bac_ss:
; AVX256P-WIN:       # %bb.0:
; AVX256P-WIN-NEXT:    vmovaps (%rdx), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x02]
; AVX256P-WIN-NEXT:    vmovss (%r8), %xmm1 # EVEX TO VEX Compression encoding: [0xc4,0xc1,0x7a,0x10,0x08]
; AVX256P-WIN-NEXT:    # xmm1 = mem[0],zero,zero,zero
; AVX256P-WIN-NEXT:    vfnmadd132ss (%rcx), %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc4,0xe2,0x71,0x9d,0x01]
; AVX256P-WIN-NEXT:    # xmm0 = -(xmm0 * mem) + xmm1
; AVX256P-WIN-NEXT:    retq # encoding: [0xc3]
  %res = call <4 x float> @llvm.x86.fma.vfnmadd.ss(<4 x float> %a1, <4 x float> %a0, <4 x float> %a2)
  ret <4 x float> %res
}

define <2 x double> @test_x86_fma_vfnmadd_sd(<2 x double> %a0, <2 x double> %a1, <2 x double> %a2) #0 {
; AVX256P-LABEL: test_x86_fma_vfnmadd_sd:
; AVX256P:       # %bb.0:
; AVX256P-NEXT:    vfnmadd213sd %xmm2, %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc4,0xe2,0xf1,0xad,0xc2]
; AVX256P-NEXT:    # xmm0 = -(xmm1 * xmm0) + xmm2
; AVX256P-NEXT:    retq # encoding: [0xc3]
;
; AVX256P-WIN-LABEL: test_x86_fma_vfnmadd_sd:
; AVX256P-WIN:       # %bb.0:
; AVX256P-WIN-NEXT:    vmovapd (%rcx), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf9,0x28,0x01]
; AVX256P-WIN-NEXT:    vmovsd (%r8), %xmm1 # EVEX TO VEX Compression encoding: [0xc4,0xc1,0x7b,0x10,0x08]
; AVX256P-WIN-NEXT:    # xmm1 = mem[0],zero
; AVX256P-WIN-NEXT:    vfnmadd132sd (%rdx), %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc4,0xe2,0xf1,0x9d,0x02]
; AVX256P-WIN-NEXT:    # xmm0 = -(xmm0 * mem) + xmm1
; AVX256P-WIN-NEXT:    retq # encoding: [0xc3]
  %res = call <2 x double> @llvm.x86.fma.vfnmadd.sd(<2 x double> %a0, <2 x double> %a1, <2 x double> %a2)
  ret <2 x double> %res
}

define <2 x double> @test_x86_fma_vfnmadd_bac_sd(<2 x double> %a0, <2 x double> %a1, <2 x double> %a2) #0 {
; AVX256P-LABEL: test_x86_fma_vfnmadd_bac_sd:
; AVX256P:       # %bb.0:
; AVX256P-NEXT:    vfnmadd213sd %xmm2, %xmm0, %xmm1 # EVEX TO VEX Compression encoding: [0xc4,0xe2,0xf9,0xad,0xca]
; AVX256P-NEXT:    # xmm1 = -(xmm0 * xmm1) + xmm2
; AVX256P-NEXT:    vmovapd %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf9,0x28,0xc1]
; AVX256P-NEXT:    retq # encoding: [0xc3]
;
; AVX256P-WIN-LABEL: test_x86_fma_vfnmadd_bac_sd:
; AVX256P-WIN:       # %bb.0:
; AVX256P-WIN-NEXT:    vmovapd (%rdx), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf9,0x28,0x02]
; AVX256P-WIN-NEXT:    vmovsd (%r8), %xmm1 # EVEX TO VEX Compression encoding: [0xc4,0xc1,0x7b,0x10,0x08]
; AVX256P-WIN-NEXT:    # xmm1 = mem[0],zero
; AVX256P-WIN-NEXT:    vfnmadd132sd (%rcx), %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc4,0xe2,0xf1,0x9d,0x01]
; AVX256P-WIN-NEXT:    # xmm0 = -(xmm0 * mem) + xmm1
; AVX256P-WIN-NEXT:    retq # encoding: [0xc3]
  %res = call <2 x double> @llvm.x86.fma.vfnmadd.sd(<2 x double> %a1, <2 x double> %a0, <2 x double> %a2)
  ret <2 x double> %res
}

define <4 x float> @test_x86_fma_vfnmsub_ss(<4 x float> %a0, <4 x float> %a1, <4 x float> %a2) #0 {
; AVX256P-LABEL: test_x86_fma_vfnmsub_ss:
; AVX256P:       # %bb.0:
; AVX256P-NEXT:    vfnmsub213ss %xmm2, %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc4,0xe2,0x71,0xaf,0xc2]
; AVX256P-NEXT:    # xmm0 = -(xmm1 * xmm0) - xmm2
; AVX256P-NEXT:    retq # encoding: [0xc3]
;
; AVX256P-WIN-LABEL: test_x86_fma_vfnmsub_ss:
; AVX256P-WIN:       # %bb.0:
; AVX256P-WIN-NEXT:    vmovaps (%rcx), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x01]
; AVX256P-WIN-NEXT:    vmovss (%r8), %xmm1 # EVEX TO VEX Compression encoding: [0xc4,0xc1,0x7a,0x10,0x08]
; AVX256P-WIN-NEXT:    # xmm1 = mem[0],zero,zero,zero
; AVX256P-WIN-NEXT:    vfnmsub132ss (%rdx), %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc4,0xe2,0x71,0x9f,0x02]
; AVX256P-WIN-NEXT:    # xmm0 = -(xmm0 * mem) - xmm1
; AVX256P-WIN-NEXT:    retq # encoding: [0xc3]
  %res = call <4 x float> @llvm.x86.fma.vfnmsub.ss(<4 x float> %a0, <4 x float> %a1, <4 x float> %a2)
  ret <4 x float> %res
}

define <4 x float> @test_x86_fma_vfnmsub_bac_ss(<4 x float> %a0, <4 x float> %a1, <4 x float> %a2) #0 {
; AVX256P-LABEL: test_x86_fma_vfnmsub_bac_ss:
; AVX256P:       # %bb.0:
; AVX256P-NEXT:    vfnmsub213ss %xmm2, %xmm0, %xmm1 # EVEX TO VEX Compression encoding: [0xc4,0xe2,0x79,0xaf,0xca]
; AVX256P-NEXT:    # xmm1 = -(xmm0 * xmm1) - xmm2
; AVX256P-NEXT:    vmovaps %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0xc1]
; AVX256P-NEXT:    retq # encoding: [0xc3]
;
; AVX256P-WIN-LABEL: test_x86_fma_vfnmsub_bac_ss:
; AVX256P-WIN:       # %bb.0:
; AVX256P-WIN-NEXT:    vmovaps (%rdx), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf8,0x28,0x02]
; AVX256P-WIN-NEXT:    vmovss (%r8), %xmm1 # EVEX TO VEX Compression encoding: [0xc4,0xc1,0x7a,0x10,0x08]
; AVX256P-WIN-NEXT:    # xmm1 = mem[0],zero,zero,zero
; AVX256P-WIN-NEXT:    vfnmsub132ss (%rcx), %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc4,0xe2,0x71,0x9f,0x01]
; AVX256P-WIN-NEXT:    # xmm0 = -(xmm0 * mem) - xmm1
; AVX256P-WIN-NEXT:    retq # encoding: [0xc3]
  %res = call <4 x float> @llvm.x86.fma.vfnmsub.ss(<4 x float> %a1, <4 x float> %a0, <4 x float> %a2)
  ret <4 x float> %res
}

define <2 x double> @test_x86_fma_vfnmsub_sd(<2 x double> %a0, <2 x double> %a1, <2 x double> %a2) #0 {
; AVX256P-LABEL: test_x86_fma_vfnmsub_sd:
; AVX256P:       # %bb.0:
; AVX256P-NEXT:    vfnmsub213sd %xmm2, %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc4,0xe2,0xf1,0xaf,0xc2]
; AVX256P-NEXT:    # xmm0 = -(xmm1 * xmm0) - xmm2
; AVX256P-NEXT:    retq # encoding: [0xc3]
;
; AVX256P-WIN-LABEL: test_x86_fma_vfnmsub_sd:
; AVX256P-WIN:       # %bb.0:
; AVX256P-WIN-NEXT:    vmovapd (%rcx), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf9,0x28,0x01]
; AVX256P-WIN-NEXT:    vmovsd (%r8), %xmm1 # EVEX TO VEX Compression encoding: [0xc4,0xc1,0x7b,0x10,0x08]
; AVX256P-WIN-NEXT:    # xmm1 = mem[0],zero
; AVX256P-WIN-NEXT:    vfnmsub132sd (%rdx), %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc4,0xe2,0xf1,0x9f,0x02]
; AVX256P-WIN-NEXT:    # xmm0 = -(xmm0 * mem) - xmm1
; AVX256P-WIN-NEXT:    retq # encoding: [0xc3]
  %res = call <2 x double> @llvm.x86.fma.vfnmsub.sd(<2 x double> %a0, <2 x double> %a1, <2 x double> %a2)
  ret <2 x double> %res
}

define <2 x double> @test_x86_fma_vfnmsub_bac_sd(<2 x double> %a0, <2 x double> %a1, <2 x double> %a2) #0 {
; AVX256P-LABEL: test_x86_fma_vfnmsub_bac_sd:
; AVX256P:       # %bb.0:
; AVX256P-NEXT:    vfnmsub213sd %xmm2, %xmm0, %xmm1 # EVEX TO VEX Compression encoding: [0xc4,0xe2,0xf9,0xaf,0xca]
; AVX256P-NEXT:    # xmm1 = -(xmm0 * xmm1) - xmm2
; AVX256P-NEXT:    vmovapd %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf9,0x28,0xc1]
; AVX256P-NEXT:    retq # encoding: [0xc3]
;
; AVX256P-WIN-LABEL: test_x86_fma_vfnmsub_bac_sd:
; AVX256P-WIN:       # %bb.0:
; AVX256P-WIN-NEXT:    vmovapd (%rdx), %xmm0 # EVEX TO VEX Compression encoding: [0xc5,0xf9,0x28,0x02]
; AVX256P-WIN-NEXT:    vmovsd (%r8), %xmm1 # EVEX TO VEX Compression encoding: [0xc4,0xc1,0x7b,0x10,0x08]
; AVX256P-WIN-NEXT:    # xmm1 = mem[0],zero
; AVX256P-WIN-NEXT:    vfnmsub132sd (%rcx), %xmm1, %xmm0 # EVEX TO VEX Compression encoding: [0xc4,0xe2,0xf1,0x9f,0x01]
; AVX256P-WIN-NEXT:    # xmm0 = -(xmm0 * mem) - xmm1
; AVX256P-WIN-NEXT:    retq # encoding: [0xc3]
  %res = call <2 x double> @llvm.x86.fma.vfnmsub.sd(<2 x double> %a1, <2 x double> %a0, <2 x double> %a2)
  ret <2 x double> %res
}
declare <4 x float> @llvm.x86.fma.vfmadd.ss(<4 x float>, <4 x float>, <4 x float>)
declare <2 x double> @llvm.x86.fma.vfmadd.sd(<2 x double>, <2 x double>, <2 x double>)
declare <4 x float> @llvm.x86.fma.vfmsub.ss(<4 x float>, <4 x float>, <4 x float>)
declare <2 x double> @llvm.x86.fma.vfmsub.sd(<2 x double>, <2 x double>, <2 x double>)
declare <4 x float> @llvm.x86.fma.vfnmadd.ss(<4 x float>, <4 x float>, <4 x float>)
declare <2 x double> @llvm.x86.fma.vfnmadd.sd(<2 x double>, <2 x double>, <2 x double>)
declare <4 x float> @llvm.x86.fma.vfnmsub.ss(<4 x float>, <4 x float>, <4 x float>)
declare <2 x double> @llvm.x86.fma.vfnmsub.sd(<2 x double>, <2 x double>, <2 x double>)
