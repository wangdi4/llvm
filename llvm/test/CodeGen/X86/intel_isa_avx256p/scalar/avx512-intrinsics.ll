; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_avx256p
; RUN: llc < %s -disable-peephole -mtriple=x86_64-unknown-unknown -mattr=+avx256p | FileCheck %s --check-prefixes=AVX256P-X64
; RUN: llc < %s -disable-peephole -mtriple=i686-unknown-unknown -mattr=+avx256p | FileCheck %s --check-prefixes=AVX256P-X86

define <2 x double> @test_rndscale_sd_mask(<2 x double> %a, <2 x double> %b, <2 x double> %c, i8 %mask) {
; AVX256P-X64-LABEL: test_rndscale_sd_mask:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vrndscalesd $11, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X64-NEXT:    vmovapd %xmm2, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_rndscale_sd_mask:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vrndscalesd $11, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X86-NEXT:    vmovapd %xmm2, %xmm0
; AVX256P-X86-NEXT:    retl
  %res = call <2 x double> @llvm.x86.avx512.mask.rndscale.sd(<2 x double> %a, <2 x double> %b, <2 x double> %c, i8 %mask, i32 11, i32 4)
  ret <2 x double>%res
}

define <2 x double> @test_rndscale_sd_mask_load(<2 x double> %a, ptr %bptr, <2 x double> %c, i8 %mask) {
; AVX256P-X64-LABEL: test_rndscale_sd_mask_load:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %esi, %k1
; AVX256P-X64-NEXT:    vrndscalesd $11, (%rdi), %xmm0, %xmm1 {%k1}
; AVX256P-X64-NEXT:    vmovapd %xmm1, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_rndscale_sd_mask_load:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vrndscalesd $11, (%eax), %xmm0, %xmm1 {%k1}
; AVX256P-X86-NEXT:    vmovapd %xmm1, %xmm0
; AVX256P-X86-NEXT:    retl
  %b = load <2 x double>, ptr %bptr
  %res = call <2 x double> @llvm.x86.avx512.mask.rndscale.sd(<2 x double> %a, <2 x double> %b, <2 x double> %c, i8 %mask, i32 11, i32 4)
  ret <2 x double>%res
}

define <2 x double> @test_rndscale_sd_maskz(<2 x double> %a, <2 x double> %b, i8 %mask) {
; AVX256P-X64-LABEL: test_rndscale_sd_maskz:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vrndscalesd $11, %xmm1, %xmm0, %xmm0 {%k1} {z}
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_rndscale_sd_maskz:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vrndscalesd $11, %xmm1, %xmm0, %xmm0 {%k1} {z}
; AVX256P-X86-NEXT:    retl
  %res = call <2 x double> @llvm.x86.avx512.mask.rndscale.sd(<2 x double> %a, <2 x double> %b, <2 x double> zeroinitializer, i8 %mask, i32 11, i32 4)
  ret <2 x double>%res
}

define <4 x float> @test_rndscale_ss_mask(<4 x float> %a, <4 x float> %b, <4 x float> %c, i8 %mask) {
; AVX256P-X64-LABEL: test_rndscale_ss_mask:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vrndscaless $11, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X64-NEXT:    vmovaps %xmm2, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_rndscale_ss_mask:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vrndscaless $11, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X86-NEXT:    vmovaps %xmm2, %xmm0
; AVX256P-X86-NEXT:    retl
  %res = call <4 x float> @llvm.x86.avx512.mask.rndscale.ss(<4 x float> %a, <4 x float> %b, <4 x float> %c, i8 %mask, i32 11, i32 4)
  ret <4 x float>%res
}

define <4 x float> @test_rndscale_ss_maskz(<4 x float> %a, <4 x float> %b, i8 %mask) {
; AVX256P-X64-LABEL: test_rndscale_ss_maskz:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vrndscaless $11, %xmm1, %xmm0, %xmm0 {%k1} {z}
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_rndscale_ss_maskz:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vrndscaless $11, %xmm1, %xmm0, %xmm0 {%k1} {z}
; AVX256P-X86-NEXT:    retl
  %res = call <4 x float> @llvm.x86.avx512.mask.rndscale.ss(<4 x float> %a, <4 x float> %b, <4 x float> zeroinitializer, i8 %mask, i32 11, i32 4)
  ret <4 x float>%res
}

define <4 x float> @test_sqrt_ss(<4 x float> %a0, <4 x float> %a1, <4 x float> %a2, i8 %mask) {
; AVX256P-X64-LABEL: test_sqrt_ss:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vmovaps %xmm2, %xmm3
; AVX256P-X64-NEXT:    vsqrtss %xmm1, %xmm0, %xmm3 {%k1}
; AVX256P-X64-NEXT:    vsqrtss {rd-sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X64-NEXT:    vaddps %xmm2, %xmm3, %xmm2
; AVX256P-X64-NEXT:    vsqrtss {ru-sae}, %xmm1, %xmm0, %xmm3 {%k1} {z}
; AVX256P-X64-NEXT:    vsqrtss {rz-sae}, %xmm1, %xmm0, %xmm0
; AVX256P-X64-NEXT:    vaddps %xmm0, %xmm3, %xmm0
; AVX256P-X64-NEXT:    vaddps %xmm0, %xmm2, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_sqrt_ss:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vmovaps %xmm2, %xmm3
; AVX256P-X86-NEXT:    vsqrtss %xmm1, %xmm0, %xmm3 {%k1}
; AVX256P-X86-NEXT:    vsqrtss {rd-sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X86-NEXT:    vaddps %xmm2, %xmm3, %xmm2
; AVX256P-X86-NEXT:    vsqrtss {ru-sae}, %xmm1, %xmm0, %xmm3 {%k1} {z}
; AVX256P-X86-NEXT:    vsqrtss {rz-sae}, %xmm1, %xmm0, %xmm0
; AVX256P-X86-NEXT:    vaddps %xmm0, %xmm3, %xmm0
; AVX256P-X86-NEXT:    vaddps %xmm0, %xmm2, %xmm0
; AVX256P-X86-NEXT:    retl
  %res0 = call <4 x float> @llvm.x86.avx512.mask.sqrt.ss(<4 x float>%a0, <4 x float> %a1, <4 x float> %a2, i8 %mask, i32 4)
  %res1 = call <4 x float> @llvm.x86.avx512.mask.sqrt.ss(<4 x float>%a0, <4 x float> %a1, <4 x float> %a2, i8 %mask, i32 9)
  %res2 = call <4 x float> @llvm.x86.avx512.mask.sqrt.ss(<4 x float>%a0, <4 x float> %a1, <4 x float> zeroinitializer, i8 %mask, i32 10)
  %res3 = call <4 x float> @llvm.x86.avx512.mask.sqrt.ss(<4 x float>%a0, <4 x float> %a1, <4 x float> zeroinitializer, i8 -1, i32 11)

  %res.1 = fadd <4 x float> %res0, %res1
  %res.2 = fadd <4 x float> %res2, %res3
  %res   = fadd <4 x float> %res.1, %res.2
  ret <4 x float> %res
}

define <2 x double> @test_sqrt_sd(<2 x double> %a0, <2 x double> %a1, <2 x double> %a2, i8 %mask) {
; AVX256P-X64-LABEL: test_sqrt_sd:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vmovapd %xmm2, %xmm3
; AVX256P-X64-NEXT:    vsqrtsd %xmm1, %xmm0, %xmm3 {%k1}
; AVX256P-X64-NEXT:    vsqrtsd {rd-sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X64-NEXT:    vaddpd %xmm2, %xmm3, %xmm2
; AVX256P-X64-NEXT:    vsqrtsd {ru-sae}, %xmm1, %xmm0, %xmm3 {%k1} {z}
; AVX256P-X64-NEXT:    vsqrtsd {rz-sae}, %xmm1, %xmm0, %xmm0
; AVX256P-X64-NEXT:    vaddpd %xmm0, %xmm3, %xmm0
; AVX256P-X64-NEXT:    vaddpd %xmm0, %xmm2, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_sqrt_sd:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vmovapd %xmm2, %xmm3
; AVX256P-X86-NEXT:    vsqrtsd %xmm1, %xmm0, %xmm3 {%k1}
; AVX256P-X86-NEXT:    vsqrtsd {rd-sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X86-NEXT:    vaddpd %xmm2, %xmm3, %xmm2
; AVX256P-X86-NEXT:    vsqrtsd {ru-sae}, %xmm1, %xmm0, %xmm3 {%k1} {z}
; AVX256P-X86-NEXT:    vsqrtsd {rz-sae}, %xmm1, %xmm0, %xmm0
; AVX256P-X86-NEXT:    vaddpd %xmm0, %xmm3, %xmm0
; AVX256P-X86-NEXT:    vaddpd %xmm0, %xmm2, %xmm0
; AVX256P-X86-NEXT:    retl
  %res0 = call <2 x double> @llvm.x86.avx512.mask.sqrt.sd(<2 x double>%a0, <2 x double> %a1, <2 x double> %a2, i8 %mask, i32 4)
  %res1 = call <2 x double> @llvm.x86.avx512.mask.sqrt.sd(<2 x double>%a0, <2 x double> %a1, <2 x double> %a2, i8 %mask, i32 9)
  %res2 = call <2 x double> @llvm.x86.avx512.mask.sqrt.sd(<2 x double>%a0, <2 x double> %a1, <2 x double> zeroinitializer, i8 %mask, i32 10)
  %res3 = call <2 x double> @llvm.x86.avx512.mask.sqrt.sd(<2 x double>%a0, <2 x double> %a1, <2 x double> zeroinitializer, i8 -1, i32 11)

  %res.1 = fadd <2 x double> %res0, %res1
  %res.2 = fadd <2 x double> %res2, %res3
  %res   = fadd <2 x double> %res.1, %res.2
  ret <2 x double> %res
}

define i32 @test_x86_avx512_cvttsd2usi(<2 x double> %a0) {
; AVX256P-X64-LABEL: test_x86_avx512_cvttsd2usi:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvttsd2usi %xmm0, %ecx
; AVX256P-X64-NEXT:    vcvttsd2usi {sae}, %xmm0, %eax
; AVX256P-X64-NEXT:    addl %ecx, %eax
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_x86_avx512_cvttsd2usi:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vcvttsd2usi %xmm0, %ecx
; AVX256P-X86-NEXT:    vcvttsd2usi {sae}, %xmm0, %eax
; AVX256P-X86-NEXT:    addl %ecx, %eax
; AVX256P-X86-NEXT:    retl
  %res0 = call i32 @llvm.x86.avx512.cvttsd2usi(<2 x double> %a0, i32 4)   %res1 = call i32 @llvm.x86.avx512.cvttsd2usi(<2 x double> %a0, i32 8)   %res2 = add i32 %res0, %res1
  ret i32 %res2
}

define i32 @test_x86_avx512_cvttsd2si(<2 x double> %a0) {
; AVX256P-X64-LABEL: test_x86_avx512_cvttsd2si:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvttsd2si %xmm0, %ecx
; AVX256P-X64-NEXT:    vcvttsd2si {sae}, %xmm0, %eax
; AVX256P-X64-NEXT:    addl %ecx, %eax
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_x86_avx512_cvttsd2si:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vcvttsd2si %xmm0, %ecx
; AVX256P-X86-NEXT:    vcvttsd2si {sae}, %xmm0, %eax
; AVX256P-X86-NEXT:    addl %ecx, %eax
; AVX256P-X86-NEXT:    retl
  %res0 = call i32 @llvm.x86.avx512.cvttsd2si(<2 x double> %a0, i32 4)   %res1 = call i32 @llvm.x86.avx512.cvttsd2si(<2 x double> %a0, i32 8)   %res2 = add i32 %res0, %res1
  ret i32 %res2
}

define i32 @test_x86_avx512_cvttss2si(<4 x float> %a0) {
; AVX256P-X64-LABEL: test_x86_avx512_cvttss2si:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvttss2si {sae}, %xmm0, %ecx
; AVX256P-X64-NEXT:    vcvttss2si %xmm0, %eax
; AVX256P-X64-NEXT:    addl %ecx, %eax
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_x86_avx512_cvttss2si:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vcvttss2si {sae}, %xmm0, %ecx
; AVX256P-X86-NEXT:    vcvttss2si %xmm0, %eax
; AVX256P-X86-NEXT:    addl %ecx, %eax
; AVX256P-X86-NEXT:    retl
  %res0 = call i32 @llvm.x86.avx512.cvttss2si(<4 x float> %a0, i32 8)   %res1 = call i32 @llvm.x86.avx512.cvttss2si(<4 x float> %a0, i32 4)   %res2 = add i32 %res0, %res1
  ret i32 %res2
}

define i32 @test_x86_avx512_cvttss2si_load(ptr %a0) {
; AVX256P-X64-LABEL: test_x86_avx512_cvttss2si_load:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvttss2si (%rdi), %eax
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_x86_avx512_cvttss2si_load:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    vcvttss2si (%eax), %eax
; AVX256P-X86-NEXT:    retl
  %a1 = load <4 x float>, ptr %a0
  %res = call i32 @llvm.x86.avx512.cvttss2si(<4 x float> %a1, i32 4)   ret i32 %res
}

define i32 @test_x86_avx512_cvttss2usi(<4 x float> %a0) {
; AVX256P-X64-LABEL: test_x86_avx512_cvttss2usi:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvttss2usi {sae}, %xmm0, %ecx
; AVX256P-X64-NEXT:    vcvttss2usi %xmm0, %eax
; AVX256P-X64-NEXT:    addl %ecx, %eax
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_x86_avx512_cvttss2usi:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vcvttss2usi {sae}, %xmm0, %ecx
; AVX256P-X86-NEXT:    vcvttss2usi %xmm0, %eax
; AVX256P-X86-NEXT:    addl %ecx, %eax
; AVX256P-X86-NEXT:    retl
  %res0 = call i32 @llvm.x86.avx512.cvttss2usi(<4 x float> %a0, i32 8)   %res1 = call i32 @llvm.x86.avx512.cvttss2usi(<4 x float> %a0, i32 4)   %res2 = add i32 %res0, %res1
  ret i32 %res2
}

define i32 @test_x86_avx512_cvtsd2usi32(<2 x double> %a0) {
; AVX256P-X64-LABEL: test_x86_avx512_cvtsd2usi32:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvtsd2usi %xmm0, %eax
; AVX256P-X64-NEXT:    vcvtsd2usi {rz-sae}, %xmm0, %ecx
; AVX256P-X64-NEXT:    addl %eax, %ecx
; AVX256P-X64-NEXT:    vcvtsd2usi {rd-sae}, %xmm0, %eax
; AVX256P-X64-NEXT:    addl %ecx, %eax
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_x86_avx512_cvtsd2usi32:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vcvtsd2usi %xmm0, %eax
; AVX256P-X86-NEXT:    vcvtsd2usi {rz-sae}, %xmm0, %ecx
; AVX256P-X86-NEXT:    addl %eax, %ecx
; AVX256P-X86-NEXT:    vcvtsd2usi {rd-sae}, %xmm0, %eax
; AVX256P-X86-NEXT:    addl %ecx, %eax
; AVX256P-X86-NEXT:    retl
  %res = call i32 @llvm.x86.avx512.vcvtsd2usi32(<2 x double> %a0, i32 4)
  %res1 = call i32 @llvm.x86.avx512.vcvtsd2usi32(<2 x double> %a0, i32 11)
  %res2 = call i32 @llvm.x86.avx512.vcvtsd2usi32(<2 x double> %a0, i32 9)
  %res3 = add i32 %res, %res1
  %res4 = add i32 %res3, %res2
  ret i32 %res4
}

define i32 @test_x86_avx512_cvtsd2si32(<2 x double> %a0) {
; AVX256P-X64-LABEL: test_x86_avx512_cvtsd2si32:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvtsd2si %xmm0, %eax
; AVX256P-X64-NEXT:    vcvtsd2si {rz-sae}, %xmm0, %ecx
; AVX256P-X64-NEXT:    addl %eax, %ecx
; AVX256P-X64-NEXT:    vcvtsd2si {rd-sae}, %xmm0, %eax
; AVX256P-X64-NEXT:    addl %ecx, %eax
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_x86_avx512_cvtsd2si32:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vcvtsd2si %xmm0, %eax
; AVX256P-X86-NEXT:    vcvtsd2si {rz-sae}, %xmm0, %ecx
; AVX256P-X86-NEXT:    addl %eax, %ecx
; AVX256P-X86-NEXT:    vcvtsd2si {rd-sae}, %xmm0, %eax
; AVX256P-X86-NEXT:    addl %ecx, %eax
; AVX256P-X86-NEXT:    retl
  %res = call i32 @llvm.x86.avx512.vcvtsd2si32(<2 x double> %a0, i32 4)
  %res1 = call i32 @llvm.x86.avx512.vcvtsd2si32(<2 x double> %a0, i32 11)
  %res2 = call i32 @llvm.x86.avx512.vcvtsd2si32(<2 x double> %a0, i32 9)
  %res3 = add i32 %res, %res1
  %res4 = add i32 %res3, %res2
  ret i32 %res4
}

define i32 @test_x86_avx512_cvtss2usi32(<4 x float> %a0) {
; AVX256P-X64-LABEL: test_x86_avx512_cvtss2usi32:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvtss2usi %xmm0, %eax
; AVX256P-X64-NEXT:    vcvtss2usi {rz-sae}, %xmm0, %ecx
; AVX256P-X64-NEXT:    addl %eax, %ecx
; AVX256P-X64-NEXT:    vcvtss2usi {rd-sae}, %xmm0, %eax
; AVX256P-X64-NEXT:    addl %ecx, %eax
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_x86_avx512_cvtss2usi32:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vcvtss2usi %xmm0, %eax
; AVX256P-X86-NEXT:    vcvtss2usi {rz-sae}, %xmm0, %ecx
; AVX256P-X86-NEXT:    addl %eax, %ecx
; AVX256P-X86-NEXT:    vcvtss2usi {rd-sae}, %xmm0, %eax
; AVX256P-X86-NEXT:    addl %ecx, %eax
; AVX256P-X86-NEXT:    retl
  %res = call i32 @llvm.x86.avx512.vcvtss2usi32(<4 x float> %a0, i32 4)
  %res1 = call i32 @llvm.x86.avx512.vcvtss2usi32(<4 x float> %a0, i32 11)
  %res2 = call i32 @llvm.x86.avx512.vcvtss2usi32(<4 x float> %a0, i32 9)
  %res3 = add i32 %res, %res1
  %res4 = add i32 %res3, %res2
  ret i32 %res4
}

define i32 @test_x86_avx512_cvtss2si32(<4 x float> %a0) {
; AVX256P-X64-LABEL: test_x86_avx512_cvtss2si32:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvtss2si %xmm0, %eax
; AVX256P-X64-NEXT:    vcvtss2si {rz-sae}, %xmm0, %ecx
; AVX256P-X64-NEXT:    addl %eax, %ecx
; AVX256P-X64-NEXT:    vcvtss2si {rd-sae}, %xmm0, %eax
; AVX256P-X64-NEXT:    addl %ecx, %eax
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_x86_avx512_cvtss2si32:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vcvtss2si %xmm0, %eax
; AVX256P-X86-NEXT:    vcvtss2si {rz-sae}, %xmm0, %ecx
; AVX256P-X86-NEXT:    addl %eax, %ecx
; AVX256P-X86-NEXT:    vcvtss2si {rd-sae}, %xmm0, %eax
; AVX256P-X86-NEXT:    addl %ecx, %eax
; AVX256P-X86-NEXT:    retl
  %res = call i32 @llvm.x86.avx512.vcvtss2si32(<4 x float> %a0, i32 4)
  %res1 = call i32 @llvm.x86.avx512.vcvtss2si32(<4 x float> %a0, i32 11)
  %res2 = call i32 @llvm.x86.avx512.vcvtss2si32(<4 x float> %a0, i32 9)
  %res3 = add i32 %res, %res1
  %res4 = add i32 %res3, %res2
  ret i32 %res4
}

define void @test_mask_store_ss(ptr %ptr, <4 x float> %data, i8 %mask) {
; AVX256P-X64-LABEL: test_mask_store_ss:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %esi, %k1
; AVX256P-X64-NEXT:    vmovss %xmm0, (%rdi) {%k1}
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_mask_store_ss:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vmovss %xmm0, (%eax) {%k1}
; AVX256P-X86-NEXT:    retl
  %1 = and i8 %mask, 1
  %2 = bitcast i8 %1 to <8 x i1>
  %extract = shufflevector <8 x i1> %2, <8 x i1> %2, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  call void @llvm.masked.store.v4f32.p0(<4 x float> %data, ptr %ptr, i32 1, <4 x i1> %extract)
  ret void
}

define <4 x float> @test_mask_add_ss_rn(<4 x float> %a0, <4 x float> %a1, <4 x float> %a2, i8 %mask) {
; AVX256P-X64-LABEL: test_mask_add_ss_rn:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vaddss {rn-sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X64-NEXT:    vmovaps %xmm2, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_mask_add_ss_rn:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vaddss {rn-sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X86-NEXT:    vmovaps %xmm2, %xmm0
; AVX256P-X86-NEXT:    retl
  %res = call <4 x float> @llvm.x86.avx512.mask.add.ss.round(<4 x float>%a0, <4 x float> %a1, <4 x float> %a2, i8 %mask, i32 8)
  ret <4 x float> %res
}

define <4 x float> @test_mask_add_ss_rd(<4 x float> %a0, <4 x float> %a1, <4 x float> %a2, i8 %mask) {
; AVX256P-X64-LABEL: test_mask_add_ss_rd:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vaddss {rd-sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X64-NEXT:    vmovaps %xmm2, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_mask_add_ss_rd:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vaddss {rd-sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X86-NEXT:    vmovaps %xmm2, %xmm0
; AVX256P-X86-NEXT:    retl
  %res = call <4 x float> @llvm.x86.avx512.mask.add.ss.round(<4 x float>%a0, <4 x float> %a1, <4 x float> %a2, i8 %mask, i32 9)
  ret <4 x float> %res
}

define <4 x float> @test_mask_add_ss_ru(<4 x float> %a0, <4 x float> %a1, <4 x float> %a2, i8 %mask) {
; AVX256P-X64-LABEL: test_mask_add_ss_ru:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vaddss {ru-sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X64-NEXT:    vmovaps %xmm2, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_mask_add_ss_ru:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vaddss {ru-sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X86-NEXT:    vmovaps %xmm2, %xmm0
; AVX256P-X86-NEXT:    retl
  %res = call <4 x float> @llvm.x86.avx512.mask.add.ss.round(<4 x float>%a0, <4 x float> %a1, <4 x float> %a2, i8 %mask, i32 10)
  ret <4 x float> %res
}

define <4 x float> @test_mask_add_ss_rz(<4 x float> %a0, <4 x float> %a1, <4 x float> %a2, i8 %mask) {
; AVX256P-X64-LABEL: test_mask_add_ss_rz:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vaddss {rz-sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X64-NEXT:    vmovaps %xmm2, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_mask_add_ss_rz:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vaddss {rz-sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X86-NEXT:    vmovaps %xmm2, %xmm0
; AVX256P-X86-NEXT:    retl
  %res = call <4 x float> @llvm.x86.avx512.mask.add.ss.round(<4 x float>%a0, <4 x float> %a1, <4 x float> %a2, i8 %mask, i32 11)
  ret <4 x float> %res
}

define <4 x float> @test_mask_add_ss_current(<4 x float> %a0, <4 x float> %a1, <4 x float> %a2, i8 %mask) {
; AVX256P-X64-LABEL: test_mask_add_ss_current:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vaddss %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X64-NEXT:    vmovaps %xmm2, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_mask_add_ss_current:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vaddss %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X86-NEXT:    vmovaps %xmm2, %xmm0
; AVX256P-X86-NEXT:    retl
  %res = call <4 x float> @llvm.x86.avx512.mask.add.ss.round(<4 x float>%a0, <4 x float> %a1, <4 x float> %a2, i8 %mask, i32 4)
  ret <4 x float> %res
}

define <4 x float> @test_maskz_add_ss_rn(<4 x float> %a0, <4 x float> %a1, i8 %mask) {
; AVX256P-X64-LABEL: test_maskz_add_ss_rn:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vaddss {rn-sae}, %xmm1, %xmm0, %xmm0 {%k1} {z}
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_maskz_add_ss_rn:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vaddss {rn-sae}, %xmm1, %xmm0, %xmm0 {%k1} {z}
; AVX256P-X86-NEXT:    retl
  %res = call <4 x float> @llvm.x86.avx512.mask.add.ss.round(<4 x float>%a0, <4 x float> %a1, <4 x float> zeroinitializer, i8 %mask, i32 8)
  ret <4 x float> %res
}

define <4 x float> @test_add_ss_rn(<4 x float> %a0, <4 x float> %a1) {
; AVX256P-X64-LABEL: test_add_ss_rn:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vaddss {rn-sae}, %xmm1, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_add_ss_rn:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vaddss {rn-sae}, %xmm1, %xmm0, %xmm0
; AVX256P-X86-NEXT:    retl
  %res = call <4 x float> @llvm.x86.avx512.mask.add.ss.round(<4 x float>%a0, <4 x float> %a1, <4 x float> zeroinitializer, i8 -1, i32 8)
  ret <4 x float> %res
}

define <4 x float> @test_mask_add_ss_current_memfold(<4 x float> %a0, ptr %a1, <4 x float> %a2, i8 %mask) {
; AVX256P-X64-LABEL: test_mask_add_ss_current_memfold:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %esi, %k1
; AVX256P-X64-NEXT:    vaddss (%rdi), %xmm0, %xmm1 {%k1}
; AVX256P-X64-NEXT:    vmovaps %xmm1, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_mask_add_ss_current_memfold:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vaddss (%eax), %xmm0, %xmm1 {%k1}
; AVX256P-X86-NEXT:    vmovaps %xmm1, %xmm0
; AVX256P-X86-NEXT:    retl
  %a1.val = load float, ptr %a1
  %a1v0 = insertelement <4 x float> undef, float %a1.val, i32 0
  %a1v1 = insertelement <4 x float> %a1v0, float 0.000000e+00, i32 1
  %a1v2 = insertelement <4 x float> %a1v1, float 0.000000e+00, i32 2
  %a1v  = insertelement <4 x float> %a1v2, float 0.000000e+00, i32 3
  %res = call <4 x float> @llvm.x86.avx512.mask.add.ss.round(<4 x float>%a0, <4 x float> %a1v, <4 x float> %a2, i8 %mask, i32 4)
  ret <4 x float> %res
}

define <4 x float> @test_maskz_add_ss_current_memfold(<4 x float> %a0, ptr %a1, i8 %mask) {
; AVX256P-X64-LABEL: test_maskz_add_ss_current_memfold:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %esi, %k1
; AVX256P-X64-NEXT:    vaddss (%rdi), %xmm0, %xmm0 {%k1} {z}
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_maskz_add_ss_current_memfold:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vaddss (%eax), %xmm0, %xmm0 {%k1} {z}
; AVX256P-X86-NEXT:    retl
  %a1.val = load float, ptr %a1
  %a1v0 = insertelement <4 x float> undef, float %a1.val, i32 0
  %a1v1 = insertelement <4 x float> %a1v0, float 0.000000e+00, i32 1
  %a1v2 = insertelement <4 x float> %a1v1, float 0.000000e+00, i32 2
  %a1v  = insertelement <4 x float> %a1v2, float 0.000000e+00, i32 3
  %res = call <4 x float> @llvm.x86.avx512.mask.add.ss.round(<4 x float>%a0, <4 x float> %a1v, <4 x float> zeroinitializer, i8 %mask, i32 4)
  ret <4 x float> %res
}

define <2 x double> @test_mask_add_sd_rn(<2 x double> %a0, <2 x double> %a1, <2 x double> %a2, i8 %mask) {
; AVX256P-X64-LABEL: test_mask_add_sd_rn:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vaddsd {rn-sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X64-NEXT:    vmovapd %xmm2, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_mask_add_sd_rn:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vaddsd {rn-sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X86-NEXT:    vmovapd %xmm2, %xmm0
; AVX256P-X86-NEXT:    retl
  %res = call <2 x double> @llvm.x86.avx512.mask.add.sd.round(<2 x double>%a0, <2 x double> %a1, <2 x double> %a2, i8 %mask, i32 8)
  ret <2 x double> %res
}

define <2 x double> @test_mask_add_sd_rd(<2 x double> %a0, <2 x double> %a1, <2 x double> %a2, i8 %mask) {
; AVX256P-X64-LABEL: test_mask_add_sd_rd:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vaddsd {rd-sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X64-NEXT:    vmovapd %xmm2, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_mask_add_sd_rd:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vaddsd {rd-sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X86-NEXT:    vmovapd %xmm2, %xmm0
; AVX256P-X86-NEXT:    retl
  %res = call <2 x double> @llvm.x86.avx512.mask.add.sd.round(<2 x double>%a0, <2 x double> %a1, <2 x double> %a2, i8 %mask, i32 9)
  ret <2 x double> %res
}

define <2 x double> @test_mask_add_sd_ru(<2 x double> %a0, <2 x double> %a1, <2 x double> %a2, i8 %mask) {
; AVX256P-X64-LABEL: test_mask_add_sd_ru:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vaddsd {ru-sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X64-NEXT:    vmovapd %xmm2, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_mask_add_sd_ru:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vaddsd {ru-sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X86-NEXT:    vmovapd %xmm2, %xmm0
; AVX256P-X86-NEXT:    retl
  %res = call <2 x double> @llvm.x86.avx512.mask.add.sd.round(<2 x double>%a0, <2 x double> %a1, <2 x double> %a2, i8 %mask, i32 10)
  ret <2 x double> %res
}

define <2 x double> @test_mask_add_sd_rz(<2 x double> %a0, <2 x double> %a1, <2 x double> %a2, i8 %mask) {
; AVX256P-X64-LABEL: test_mask_add_sd_rz:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vaddsd {rz-sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X64-NEXT:    vmovapd %xmm2, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_mask_add_sd_rz:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vaddsd {rz-sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X86-NEXT:    vmovapd %xmm2, %xmm0
; AVX256P-X86-NEXT:    retl
  %res = call <2 x double> @llvm.x86.avx512.mask.add.sd.round(<2 x double>%a0, <2 x double> %a1, <2 x double> %a2, i8 %mask, i32 11)
  ret <2 x double> %res
}

define <2 x double> @test_mask_add_sd_current(<2 x double> %a0, <2 x double> %a1, <2 x double> %a2, i8 %mask) {
; AVX256P-X64-LABEL: test_mask_add_sd_current:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vaddsd %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X64-NEXT:    vmovapd %xmm2, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_mask_add_sd_current:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vaddsd %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X86-NEXT:    vmovapd %xmm2, %xmm0
; AVX256P-X86-NEXT:    retl
  %res = call <2 x double> @llvm.x86.avx512.mask.add.sd.round(<2 x double>%a0, <2 x double> %a1, <2 x double> %a2, i8 %mask, i32 4)
  ret <2 x double> %res
}

define <2 x double> @test_maskz_add_sd_rn(<2 x double> %a0, <2 x double> %a1, i8 %mask) {
; AVX256P-X64-LABEL: test_maskz_add_sd_rn:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vaddsd {rn-sae}, %xmm1, %xmm0, %xmm0 {%k1} {z}
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_maskz_add_sd_rn:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vaddsd {rn-sae}, %xmm1, %xmm0, %xmm0 {%k1} {z}
; AVX256P-X86-NEXT:    retl
  %res = call <2 x double> @llvm.x86.avx512.mask.add.sd.round(<2 x double>%a0, <2 x double> %a1, <2 x double> zeroinitializer, i8 %mask, i32 8)
  ret <2 x double> %res
}

define <2 x double> @test_add_sd_rn(<2 x double> %a0, <2 x double> %a1) {
; AVX256P-X64-LABEL: test_add_sd_rn:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vaddsd {rn-sae}, %xmm1, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_add_sd_rn:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vaddsd {rn-sae}, %xmm1, %xmm0, %xmm0
; AVX256P-X86-NEXT:    retl
  %res = call <2 x double> @llvm.x86.avx512.mask.add.sd.round(<2 x double>%a0, <2 x double> %a1, <2 x double> zeroinitializer, i8 -1, i32 8)
  ret <2 x double> %res
}

define <2 x double> @test_mask_add_sd_current_memfold(<2 x double> %a0, ptr %a1, <2 x double> %a2, i8 %mask) {
; AVX256P-X64-LABEL: test_mask_add_sd_current_memfold:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %esi, %k1
; AVX256P-X64-NEXT:    vaddsd (%rdi), %xmm0, %xmm1 {%k1}
; AVX256P-X64-NEXT:    vmovapd %xmm1, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_mask_add_sd_current_memfold:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vaddsd (%eax), %xmm0, %xmm1 {%k1}
; AVX256P-X86-NEXT:    vmovapd %xmm1, %xmm0
; AVX256P-X86-NEXT:    retl
  %a1.val = load double, ptr %a1
  %a1v0 = insertelement <2 x double> undef, double %a1.val, i32 0
  %a1v = insertelement <2 x double> %a1v0, double 0.000000e+00, i32 1
  %res = call <2 x double> @llvm.x86.avx512.mask.add.sd.round(<2 x double>%a0, <2 x double> %a1v, <2 x double> %a2, i8 %mask, i32 4)
  ret <2 x double> %res
}

define <2 x double> @test_maskz_add_sd_current_memfold(<2 x double> %a0, ptr %a1, i8 %mask) {
; AVX256P-X64-LABEL: test_maskz_add_sd_current_memfold:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %esi, %k1
; AVX256P-X64-NEXT:    vaddsd (%rdi), %xmm0, %xmm0 {%k1} {z}
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_maskz_add_sd_current_memfold:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vaddsd (%eax), %xmm0, %xmm0 {%k1} {z}
; AVX256P-X86-NEXT:    retl
  %a1.val = load double, ptr %a1
  %a1v0 = insertelement <2 x double> undef, double %a1.val, i32 0
  %a1v = insertelement <2 x double> %a1v0, double 0.000000e+00, i32 1
  %res = call <2 x double> @llvm.x86.avx512.mask.add.sd.round(<2 x double>%a0, <2 x double> %a1v, <2 x double> zeroinitializer, i8 %mask, i32 4)
  ret <2 x double> %res
}

define <4 x float> @test_mask_max_ss_sae(<4 x float> %a0, <4 x float> %a1, <4 x float> %a2, i8 %mask) {
; AVX256P-X64-LABEL: test_mask_max_ss_sae:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vmaxss {sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X64-NEXT:    vmovaps %xmm2, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_mask_max_ss_sae:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vmaxss {sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X86-NEXT:    vmovaps %xmm2, %xmm0
; AVX256P-X86-NEXT:    retl
  %res = call <4 x float> @llvm.x86.avx512.mask.max.ss.round(<4 x float>%a0, <4 x float> %a1, <4 x float> %a2, i8 %mask, i32 8)
  ret <4 x float> %res
}

define <4 x float> @test_maskz_max_ss_sae(<4 x float> %a0, <4 x float> %a1, i8 %mask) {
; AVX256P-X64-LABEL: test_maskz_max_ss_sae:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vmaxss {sae}, %xmm1, %xmm0, %xmm0 {%k1} {z}
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_maskz_max_ss_sae:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vmaxss {sae}, %xmm1, %xmm0, %xmm0 {%k1} {z}
; AVX256P-X86-NEXT:    retl
  %res = call <4 x float> @llvm.x86.avx512.mask.max.ss.round(<4 x float>%a0, <4 x float> %a1, <4 x float> zeroinitializer, i8 %mask, i32 8)
  ret <4 x float> %res
}

define <4 x float> @test_max_ss_sae(<4 x float> %a0, <4 x float> %a1) {
; AVX256P-X64-LABEL: test_max_ss_sae:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vmaxss {sae}, %xmm1, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_max_ss_sae:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vmaxss {sae}, %xmm1, %xmm0, %xmm0
; AVX256P-X86-NEXT:    retl
  %res = call <4 x float> @llvm.x86.avx512.mask.max.ss.round(<4 x float>%a0, <4 x float> %a1, <4 x float> zeroinitializer, i8 -1, i32 8)
  ret <4 x float> %res
}

define <4 x float> @test_mask_max_ss(<4 x float> %a0, <4 x float> %a1, <4 x float> %a2, i8 %mask) {
; AVX256P-X64-LABEL: test_mask_max_ss:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vmaxss %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X64-NEXT:    vmovaps %xmm2, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_mask_max_ss:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vmaxss %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X86-NEXT:    vmovaps %xmm2, %xmm0
; AVX256P-X86-NEXT:    retl
  %res = call <4 x float> @llvm.x86.avx512.mask.max.ss.round(<4 x float>%a0, <4 x float> %a1, <4 x float> %a2, i8 %mask, i32 4)
  ret <4 x float> %res
}

define <4 x float> @test_maskz_max_ss(<4 x float> %a0, <4 x float> %a1, i8 %mask) {
; AVX256P-X64-LABEL: test_maskz_max_ss:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vmaxss %xmm1, %xmm0, %xmm0 {%k1} {z}
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_maskz_max_ss:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vmaxss %xmm1, %xmm0, %xmm0 {%k1} {z}
; AVX256P-X86-NEXT:    retl
  %res = call <4 x float> @llvm.x86.avx512.mask.max.ss.round(<4 x float>%a0, <4 x float> %a1, <4 x float> zeroinitializer, i8 %mask, i32 4)
  ret <4 x float> %res
}

define <4 x float> @test_max_ss(<4 x float> %a0, <4 x float> %a1) {
; AVX256P-X64-LABEL: test_max_ss:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vmaxss %xmm1, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_max_ss:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vmaxss %xmm1, %xmm0, %xmm0
; AVX256P-X86-NEXT:    retl
  %res = call <4 x float> @llvm.x86.avx512.mask.max.ss.round(<4 x float>%a0, <4 x float> %a1, <4 x float> zeroinitializer, i8 -1, i32 4)
  ret <4 x float> %res
}

define <4 x float> @test_mask_max_ss_memfold(<4 x float> %a0, ptr %a1, <4 x float> %a2, i8 %mask) {
; AVX256P-X64-LABEL: test_mask_max_ss_memfold:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %esi, %k1
; AVX256P-X64-NEXT:    vmaxss (%rdi), %xmm0, %xmm1 {%k1}
; AVX256P-X64-NEXT:    vmovaps %xmm1, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_mask_max_ss_memfold:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vmaxss (%eax), %xmm0, %xmm1 {%k1}
; AVX256P-X86-NEXT:    vmovaps %xmm1, %xmm0
; AVX256P-X86-NEXT:    retl
  %a1.val = load float, ptr %a1
  %a1v0 = insertelement <4 x float> undef, float %a1.val, i32 0
  %a1v1 = insertelement <4 x float> %a1v0, float 0.000000e+00, i32 1
  %a1v2 = insertelement <4 x float> %a1v1, float 0.000000e+00, i32 2
  %a1v  = insertelement <4 x float> %a1v2, float 0.000000e+00, i32 3
  %res = call <4 x float> @llvm.x86.avx512.mask.max.ss.round(<4 x float>%a0, <4 x float> %a1v, <4 x float> %a2, i8 %mask, i32 4)
  ret <4 x float> %res
}

define <4 x float> @test_maskz_max_ss_memfold(<4 x float> %a0, ptr %a1, i8 %mask) {
; AVX256P-X64-LABEL: test_maskz_max_ss_memfold:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %esi, %k1
; AVX256P-X64-NEXT:    vmaxss (%rdi), %xmm0, %xmm0 {%k1} {z}
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_maskz_max_ss_memfold:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vmaxss (%eax), %xmm0, %xmm0 {%k1} {z}
; AVX256P-X86-NEXT:    retl
  %a1.val = load float, ptr %a1
  %a1v0 = insertelement <4 x float> undef, float %a1.val, i32 0
  %a1v1 = insertelement <4 x float> %a1v0, float 0.000000e+00, i32 1
  %a1v2 = insertelement <4 x float> %a1v1, float 0.000000e+00, i32 2
  %a1v  = insertelement <4 x float> %a1v2, float 0.000000e+00, i32 3
  %res = call <4 x float> @llvm.x86.avx512.mask.max.ss.round(<4 x float>%a0, <4 x float> %a1v, <4 x float> zeroinitializer, i8 %mask, i32 4)
  ret <4 x float> %res
}

define <2 x double> @test_mask_max_sd_sae(<2 x double> %a0, <2 x double> %a1, <2 x double> %a2, i8 %mask) {
; AVX256P-X64-LABEL: test_mask_max_sd_sae:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vmaxsd {sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X64-NEXT:    vmovapd %xmm2, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_mask_max_sd_sae:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vmaxsd {sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X86-NEXT:    vmovapd %xmm2, %xmm0
; AVX256P-X86-NEXT:    retl
  %res = call <2 x double> @llvm.x86.avx512.mask.max.sd.round(<2 x double>%a0, <2 x double> %a1, <2 x double> %a2, i8 %mask, i32 8)
  ret <2 x double> %res
}

define <2 x double> @test_maskz_max_sd_sae(<2 x double> %a0, <2 x double> %a1, i8 %mask) {
; AVX256P-X64-LABEL: test_maskz_max_sd_sae:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vmaxsd {sae}, %xmm1, %xmm0, %xmm0 {%k1} {z}
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_maskz_max_sd_sae:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vmaxsd {sae}, %xmm1, %xmm0, %xmm0 {%k1} {z}
; AVX256P-X86-NEXT:    retl
  %res = call <2 x double> @llvm.x86.avx512.mask.max.sd.round(<2 x double>%a0, <2 x double> %a1, <2 x double> zeroinitializer, i8 %mask, i32 8)
  ret <2 x double> %res
}

define <2 x double> @test_max_sd_sae(<2 x double> %a0, <2 x double> %a1) {
; AVX256P-X64-LABEL: test_max_sd_sae:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vmaxsd {sae}, %xmm1, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_max_sd_sae:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vmaxsd {sae}, %xmm1, %xmm0, %xmm0
; AVX256P-X86-NEXT:    retl
  %res = call <2 x double> @llvm.x86.avx512.mask.max.sd.round(<2 x double>%a0, <2 x double> %a1, <2 x double> zeroinitializer, i8 -1, i32 8)
  ret <2 x double> %res
}

define <2 x double> @test_mask_max_sd(<2 x double> %a0, <2 x double> %a1, <2 x double> %a2, i8 %mask) {
; AVX256P-X64-LABEL: test_mask_max_sd:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vmaxsd %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X64-NEXT:    vmovapd %xmm2, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_mask_max_sd:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vmaxsd %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X86-NEXT:    vmovapd %xmm2, %xmm0
; AVX256P-X86-NEXT:    retl
  %res = call <2 x double> @llvm.x86.avx512.mask.max.sd.round(<2 x double>%a0, <2 x double> %a1, <2 x double> %a2, i8 %mask, i32 4)
  ret <2 x double> %res
}

define <2 x double> @test_maskz_max_sd(<2 x double> %a0, <2 x double> %a1, i8 %mask) {
; AVX256P-X64-LABEL: test_maskz_max_sd:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vmaxsd %xmm1, %xmm0, %xmm0 {%k1} {z}
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_maskz_max_sd:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vmaxsd %xmm1, %xmm0, %xmm0 {%k1} {z}
; AVX256P-X86-NEXT:    retl
  %res = call <2 x double> @llvm.x86.avx512.mask.max.sd.round(<2 x double>%a0, <2 x double> %a1, <2 x double> zeroinitializer, i8 %mask, i32 4)
  ret <2 x double> %res
}

define <2 x double> @test_max_sd(<2 x double> %a0, <2 x double> %a1) {
; AVX256P-X64-LABEL: test_max_sd:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vmaxsd %xmm1, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_max_sd:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vmaxsd %xmm1, %xmm0, %xmm0
; AVX256P-X86-NEXT:    retl
  %res = call <2 x double> @llvm.x86.avx512.mask.max.sd.round(<2 x double>%a0, <2 x double> %a1, <2 x double> zeroinitializer, i8 -1, i32 4)
  ret <2 x double> %res
}

define <2 x double> @test_mask_max_sd_memfold(<2 x double> %a0, ptr %a1, <2 x double> %a2, i8 %mask) {
; AVX256P-X64-LABEL: test_mask_max_sd_memfold:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %esi, %k1
; AVX256P-X64-NEXT:    vmaxsd (%rdi), %xmm0, %xmm1 {%k1}
; AVX256P-X64-NEXT:    vmovapd %xmm1, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_mask_max_sd_memfold:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vmaxsd (%eax), %xmm0, %xmm1 {%k1}
; AVX256P-X86-NEXT:    vmovapd %xmm1, %xmm0
; AVX256P-X86-NEXT:    retl
  %a1.val = load double, ptr %a1
  %a1v0 = insertelement <2 x double> undef, double %a1.val, i32 0
  %a1v = insertelement <2 x double> %a1v0, double 0.000000e+00, i32 1
  %res = call <2 x double> @llvm.x86.avx512.mask.max.sd.round(<2 x double>%a0, <2 x double> %a1v, <2 x double> %a2, i8 %mask, i32 4)
  ret <2 x double> %res
}

define <2 x double> @test_maskz_max_sd_memfold(<2 x double> %a0, ptr %a1, i8 %mask) {
; AVX256P-X64-LABEL: test_maskz_max_sd_memfold:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %esi, %k1
; AVX256P-X64-NEXT:    vmaxsd (%rdi), %xmm0, %xmm0 {%k1} {z}
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_maskz_max_sd_memfold:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vmaxsd (%eax), %xmm0, %xmm0 {%k1} {z}
; AVX256P-X86-NEXT:    retl
  %a1.val = load double, ptr %a1
  %a1v0 = insertelement <2 x double> undef, double %a1.val, i32 0
  %a1v = insertelement <2 x double> %a1v0, double 0.000000e+00, i32 1
  %res = call <2 x double> @llvm.x86.avx512.mask.max.sd.round(<2 x double>%a0, <2 x double> %a1v, <2 x double> zeroinitializer, i8 %mask, i32 4)
  ret <2 x double> %res
}

define <4 x float> @test_x86_avx512_cvtsi2ss32(<4 x float> %a, i32 %b) {
; AVX256P-X64-LABEL: test_x86_avx512_cvtsi2ss32:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvtsi2ss %edi, {rz-sae}, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_x86_avx512_cvtsi2ss32:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    vcvtsi2ss %eax, {rz-sae}, %xmm0, %xmm0
; AVX256P-X86-NEXT:    retl
  %res = call <4 x float> @llvm.x86.avx512.cvtsi2ss32(<4 x float> %a, i32 %b, i32 11)   ret <4 x float> %res
}

define <4 x float> @test_x86_avx512__mm_cvt_roundu32_ss (<4 x float> %a, i32 %b) {
; AVX256P-X64-LABEL: test_x86_avx512__mm_cvt_roundu32_ss:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvtusi2ss %edi, {rd-sae}, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_x86_avx512__mm_cvt_roundu32_ss:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    vcvtusi2ss %eax, {rd-sae}, %xmm0, %xmm0
; AVX256P-X86-NEXT:    retl
  %res = call <4 x float> @llvm.x86.avx512.cvtusi2ss(<4 x float> %a, i32 %b, i32 9)   ret <4 x float> %res
}

define <4 x float> @test_x86_avx512__mm_cvt_roundu32_ss_mem(<4 x float> %a, ptr %ptr) {
; AVX256P-X64-LABEL: test_x86_avx512__mm_cvt_roundu32_ss_mem:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    movl (%rdi), %eax
; AVX256P-X64-NEXT:    vcvtusi2ss %eax, {rd-sae}, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_x86_avx512__mm_cvt_roundu32_ss_mem:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    movl (%eax), %eax
; AVX256P-X86-NEXT:    vcvtusi2ss %eax, {rd-sae}, %xmm0, %xmm0
; AVX256P-X86-NEXT:    retl
  %b = load i32, ptr %ptr
  %res = call <4 x float> @llvm.x86.avx512.cvtusi2ss(<4 x float> %a, i32 %b, i32 9)   ret <4 x float> %res
}

define <4 x float> @test_x86_avx512__mm_cvtu32_ss(<4 x float> %a, i32 %b) {
; AVX256P-X64-LABEL: test_x86_avx512__mm_cvtu32_ss:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vcvtusi2ss %edi, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_x86_avx512__mm_cvtu32_ss:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vcvtusi2ssl {{[0-9]+}}(%esp), %xmm0, %xmm0
; AVX256P-X86-NEXT:    retl
  %res = call <4 x float> @llvm.x86.avx512.cvtusi2ss(<4 x float> %a, i32 %b, i32 4)   ret <4 x float> %res
}

define <4 x float> @test_getexp_ss(<4 x float> %a0, <4 x float> %a1) {
; AVX256P-X64-LABEL: test_getexp_ss:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vgetexpss {sae}, %xmm1, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_getexp_ss:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vgetexpss {sae}, %xmm1, %xmm0, %xmm0
; AVX256P-X86-NEXT:    retl
  %res = call <4 x float> @llvm.x86.avx512.mask.getexp.ss(<4 x float>%a0, <4 x float> %a1, <4 x float> zeroinitializer, i8 -1, i32 8)
  ret <4 x float> %res
}

define <4 x float> @test_mask_getexp_ss(<4 x float> %a0, <4 x float> %a1, <4 x float> %a2, i8 %mask) {
; AVX256P-X64-LABEL: test_mask_getexp_ss:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vmovaps %xmm2, %xmm3
; AVX256P-X64-NEXT:    vgetexpss %xmm1, %xmm0, %xmm3 {%k1}
; AVX256P-X64-NEXT:    vgetexpss {sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X64-NEXT:    vaddps %xmm2, %xmm3, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_mask_getexp_ss:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vmovaps %xmm2, %xmm3
; AVX256P-X86-NEXT:    vgetexpss %xmm1, %xmm0, %xmm3 {%k1}
; AVX256P-X86-NEXT:    vgetexpss {sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X86-NEXT:    vaddps %xmm2, %xmm3, %xmm0
; AVX256P-X86-NEXT:    retl
  %res0 = call <4 x float> @llvm.x86.avx512.mask.getexp.ss(<4 x float>%a0, <4 x float> %a1, <4 x float> %a2, i8 %mask, i32 4)
  %res1 = call <4 x float> @llvm.x86.avx512.mask.getexp.ss(<4 x float>%a0, <4 x float> %a1, <4 x float> %a2, i8 %mask, i32 8)
  %res.1 = fadd <4 x float> %res0, %res1
  ret <4 x float> %res.1
}

define <4 x float> @test_maskz_getexp_ss(<4 x float> %a0, <4 x float> %a1, i8 %mask) {
; AVX256P-X64-LABEL: test_maskz_getexp_ss:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vgetexpss {sae}, %xmm1, %xmm0, %xmm0 {%k1} {z}
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_maskz_getexp_ss:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vgetexpss {sae}, %xmm1, %xmm0, %xmm0 {%k1} {z}
; AVX256P-X86-NEXT:    retl
  %res = call <4 x float> @llvm.x86.avx512.mask.getexp.ss(<4 x float>%a0, <4 x float> %a1, <4 x float> zeroinitializer, i8 %mask, i32 8)
  ret <4 x float> %res
}

define <2 x double> @test_getexp_sd(<2 x double> %a0, <2 x double> %a1) {
; AVX256P-X64-LABEL: test_getexp_sd:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vgetexpsd %xmm1, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_getexp_sd:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vgetexpsd %xmm1, %xmm0, %xmm0
; AVX256P-X86-NEXT:    retl
  %res = call <2 x double> @llvm.x86.avx512.mask.getexp.sd(<2 x double>%a0, <2 x double> %a1, <2 x double> zeroinitializer, i8 -1, i32 4)
  ret <2 x double> %res
}

define <2 x double> @test_mask_getexp_sd(<2 x double> %a0, <2 x double> %a1, <2 x double> %a2, i8 %mask) {
; AVX256P-X64-LABEL: test_mask_getexp_sd:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vmovapd %xmm2, %xmm3
; AVX256P-X64-NEXT:    vgetexpsd %xmm1, %xmm0, %xmm3 {%k1}
; AVX256P-X64-NEXT:    vgetexpsd {sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X64-NEXT:    vaddpd %xmm2, %xmm3, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_mask_getexp_sd:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vmovapd %xmm2, %xmm3
; AVX256P-X86-NEXT:    vgetexpsd %xmm1, %xmm0, %xmm3 {%k1}
; AVX256P-X86-NEXT:    vgetexpsd {sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X86-NEXT:    vaddpd %xmm2, %xmm3, %xmm0
; AVX256P-X86-NEXT:    retl
  %res0 = call <2 x double> @llvm.x86.avx512.mask.getexp.sd(<2 x double>%a0, <2 x double> %a1, <2 x double> %a2, i8 %mask, i32 4)
  %res1 = call <2 x double> @llvm.x86.avx512.mask.getexp.sd(<2 x double>%a0, <2 x double> %a1, <2 x double> %a2, i8 %mask, i32 8)
  %res.1 = fadd <2 x double> %res0, %res1
  ret <2 x double> %res.1
}

define <2 x double> @test_maskz_getexp_sd(<2 x double> %a0, <2 x double> %a1, i8 %mask) {
; AVX256P-X64-LABEL: test_maskz_getexp_sd:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vgetexpsd {sae}, %xmm1, %xmm0, %xmm0 {%k1} {z}
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_maskz_getexp_sd:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vgetexpsd {sae}, %xmm1, %xmm0, %xmm0 {%k1} {z}
; AVX256P-X86-NEXT:    retl
  %res = call <2 x double> @llvm.x86.avx512.mask.getexp.sd(<2 x double>%a0, <2 x double> %a1, <2 x double> zeroinitializer, i8 %mask, i32 8)
  ret <2 x double> %res
}

define <2 x double>@test_int_x86_avx512_mask_getmant_sd(<2 x double> %x0, <2 x double> %x1, <2 x double> %x2, i8 %x3) {
; AVX256P-X64-LABEL: test_int_x86_avx512_mask_getmant_sd:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vmovapd %xmm2, %xmm3
; AVX256P-X64-NEXT:    vgetmantsd $11, %xmm1, %xmm0, %xmm3 {%k1}
; AVX256P-X64-NEXT:    vgetmantsd $12, %xmm1, %xmm0, %xmm4 {%k1} {z}
; AVX256P-X64-NEXT:    vaddpd %xmm4, %xmm3, %xmm3
; AVX256P-X64-NEXT:    vgetmantsd $13, {sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X64-NEXT:    vgetmantsd $14, %xmm1, %xmm0, %xmm0
; AVX256P-X64-NEXT:    vaddpd %xmm0, %xmm2, %xmm0
; AVX256P-X64-NEXT:    vaddpd %xmm0, %xmm3, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_int_x86_avx512_mask_getmant_sd:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vmovapd %xmm2, %xmm3
; AVX256P-X86-NEXT:    vgetmantsd $11, %xmm1, %xmm0, %xmm3 {%k1}
; AVX256P-X86-NEXT:    vgetmantsd $12, %xmm1, %xmm0, %xmm4 {%k1} {z}
; AVX256P-X86-NEXT:    vaddpd %xmm4, %xmm3, %xmm3
; AVX256P-X86-NEXT:    vgetmantsd $13, {sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X86-NEXT:    vgetmantsd $14, %xmm1, %xmm0, %xmm0
; AVX256P-X86-NEXT:    vaddpd %xmm0, %xmm2, %xmm0
; AVX256P-X86-NEXT:    vaddpd %xmm0, %xmm3, %xmm0
; AVX256P-X86-NEXT:    retl
  %res  = call <2 x double> @llvm.x86.avx512.mask.getmant.sd(<2 x double> %x0, <2 x double> %x1, i32 11, <2 x double> %x2, i8 %x3, i32 4)
  %res1 = call <2 x double> @llvm.x86.avx512.mask.getmant.sd(<2 x double> %x0, <2 x double> %x1, i32 12, <2 x double> zeroinitializer, i8 %x3, i32 4)
  %res2 = call <2 x double> @llvm.x86.avx512.mask.getmant.sd(<2 x double> %x0, <2 x double> %x1, i32 13, <2 x double> %x2, i8 %x3, i32 8)
  %res3 = call <2 x double> @llvm.x86.avx512.mask.getmant.sd(<2 x double> %x0, <2 x double> %x1, i32 14, <2 x double> %x2, i8 -1, i32 4)
  %res11 = fadd <2 x double> %res, %res1
  %res12 = fadd <2 x double> %res2, %res3
  %res13 = fadd <2 x double> %res11, %res12
  ret <2 x double> %res13
}

define <4 x float>@test_int_x86_avx512_mask_getmant_ss(<4 x float> %x0, <4 x float> %x1, <4 x float> %x2, i8 %x3) {
; AVX256P-X64-LABEL: test_int_x86_avx512_mask_getmant_ss:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vgetmantss $11, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X64-NEXT:    vgetmantss $12, %xmm1, %xmm0, %xmm3 {%k1} {z}
; AVX256P-X64-NEXT:    vaddps %xmm3, %xmm2, %xmm2
; AVX256P-X64-NEXT:    vgetmantss $13, {sae}, %xmm1, %xmm0, %xmm3
; AVX256P-X64-NEXT:    vgetmantss $14, %xmm1, %xmm0, %xmm0
; AVX256P-X64-NEXT:    vaddps %xmm0, %xmm3, %xmm0
; AVX256P-X64-NEXT:    vaddps %xmm0, %xmm2, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_int_x86_avx512_mask_getmant_ss:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vgetmantss $11, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X86-NEXT:    vgetmantss $12, %xmm1, %xmm0, %xmm3 {%k1} {z}
; AVX256P-X86-NEXT:    vaddps %xmm3, %xmm2, %xmm2
; AVX256P-X86-NEXT:    vgetmantss $13, {sae}, %xmm1, %xmm0, %xmm3
; AVX256P-X86-NEXT:    vgetmantss $14, %xmm1, %xmm0, %xmm0
; AVX256P-X86-NEXT:    vaddps %xmm0, %xmm3, %xmm0
; AVX256P-X86-NEXT:    vaddps %xmm0, %xmm2, %xmm0
; AVX256P-X86-NEXT:    retl
  %res  = call <4 x float> @llvm.x86.avx512.mask.getmant.ss(<4 x float> %x0, <4 x float> %x1, i32 11, <4 x float> %x2, i8 %x3, i32 4)
  %res1 = call <4 x float> @llvm.x86.avx512.mask.getmant.ss(<4 x float> %x0, <4 x float> %x1, i32 12, <4 x float> zeroinitializer, i8 %x3, i32 4)
  %res2 = call <4 x float> @llvm.x86.avx512.mask.getmant.ss(<4 x float> %x0, <4 x float> %x1, i32 13, <4 x float> %x2, i8 -1, i32 8)
  %res3 = call <4 x float> @llvm.x86.avx512.mask.getmant.ss(<4 x float> %x0, <4 x float> %x1, i32 14, <4 x float> %x2, i8 -1, i32 4)
  %res11 = fadd <4 x float> %res, %res1
  %res12 = fadd <4 x float> %res2, %res3
  %res13 = fadd <4 x float> %res11, %res12
  ret <4 x float> %res13
}

define <4 x float> @test_int_x86_avx512_mask_getmant_ss_load(<4 x float> %x0, ptr %x1p) {
; AVX256P-X64-LABEL: test_int_x86_avx512_mask_getmant_ss_load:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vgetmantss $11, (%rdi), %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_int_x86_avx512_mask_getmant_ss_load:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    vgetmantss $11, (%eax), %xmm0, %xmm0
; AVX256P-X86-NEXT:    retl
  %x1 = load <4 x float>, ptr %x1p
  %res = call <4 x float> @llvm.x86.avx512.mask.getmant.ss(<4 x float> %x0, <4 x float> %x1, i32 11, <4 x float> undef, i8 -1, i32 4)
  ret <4 x float> %res
}

define <2 x double>@test_int_x86_avx512_mask_cvt_ss2sd_round(<2 x double> %x0,<4 x float> %x1, <2 x double> %x2, i8 %x3) {
; AVX256P-X64-LABEL: test_int_x86_avx512_mask_cvt_ss2sd_round:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vcvtss2sd %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X64-NEXT:    vcvtss2sd {sae}, %xmm1, %xmm0, %xmm0
; AVX256P-X64-NEXT:    vaddpd %xmm0, %xmm2, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_int_x86_avx512_mask_cvt_ss2sd_round:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vcvtss2sd %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X86-NEXT:    vcvtss2sd {sae}, %xmm1, %xmm0, %xmm0
; AVX256P-X86-NEXT:    vaddpd %xmm0, %xmm2, %xmm0
; AVX256P-X86-NEXT:    retl
  %res = call <2 x double> @llvm.x86.avx512.mask.cvtss2sd.round(<2 x double> %x0, <4 x float> %x1, <2 x double> %x2, i8 %x3, i32 4)
  %res1 = call <2 x double> @llvm.x86.avx512.mask.cvtss2sd.round(<2 x double> %x0, <4 x float> %x1, <2 x double> %x2, i8 -1, i32 8)
  %res2 = fadd <2 x double> %res, %res1
  ret <2 x double> %res2
}

define <4 x float>@test_int_x86_avx512_mask_cvt_sd2ss_round(<4 x float> %x0,<2 x double> %x1, <4 x float> %x2, i8 %x3) {
; AVX256P-X64-LABEL: test_int_x86_avx512_mask_cvt_sd2ss_round:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vcvtsd2ss {rz-sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X64-NEXT:    vcvtsd2ss {rn-sae}, %xmm1, %xmm0, %xmm0
; AVX256P-X64-NEXT:    vaddps %xmm0, %xmm2, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_int_x86_avx512_mask_cvt_sd2ss_round:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vcvtsd2ss {rz-sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X86-NEXT:    vcvtsd2ss {rn-sae}, %xmm1, %xmm0, %xmm0
; AVX256P-X86-NEXT:    vaddps %xmm0, %xmm2, %xmm0
; AVX256P-X86-NEXT:    retl
  %res = call <4 x float> @llvm.x86.avx512.mask.cvtsd2ss.round(<4 x float> %x0, <2 x double> %x1, <4 x float> %x2, i8 %x3, i32 11)
  %res1 = call <4 x float> @llvm.x86.avx512.mask.cvtsd2ss.round(<4 x float> %x0, <2 x double> %x1, <4 x float> %x2, i8 -1, i32 8)
  %res2 = fadd <4 x float> %res, %res1
  ret <4 x float> %res2
}

define <4 x float>@test_int_x86_avx512_mask_fixupimm_ss(<4 x float> %x0, <4 x float> %x1, <4 x i32> %x2, i8 %x4) {
; AVX256P-X64-LABEL: test_int_x86_avx512_mask_fixupimm_ss:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vmovaps %xmm0, %xmm3
; AVX256P-X64-NEXT:    vfixupimmss $5, %xmm2, %xmm1, %xmm3 {%k1}
; AVX256P-X64-NEXT:    vxorps %xmm4, %xmm4, %xmm4
; AVX256P-X64-NEXT:    vmovaps %xmm0, %xmm5
; AVX256P-X64-NEXT:    vfixupimmss $5, %xmm4, %xmm1, %xmm5 {%k1}
; AVX256P-X64-NEXT:    vaddps %xmm5, %xmm3, %xmm3
; AVX256P-X64-NEXT:    vfixupimmss $5, {sae}, %xmm2, %xmm1, %xmm0
; AVX256P-X64-NEXT:    vaddps %xmm0, %xmm3, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_int_x86_avx512_mask_fixupimm_ss:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vmovaps %xmm0, %xmm3
; AVX256P-X86-NEXT:    vfixupimmss $5, %xmm2, %xmm1, %xmm3 {%k1}
; AVX256P-X86-NEXT:    vxorps %xmm4, %xmm4, %xmm4
; AVX256P-X86-NEXT:    vmovaps %xmm0, %xmm5
; AVX256P-X86-NEXT:    vfixupimmss $5, %xmm4, %xmm1, %xmm5 {%k1}
; AVX256P-X86-NEXT:    vaddps %xmm5, %xmm3, %xmm3
; AVX256P-X86-NEXT:    vfixupimmss $5, {sae}, %xmm2, %xmm1, %xmm0
; AVX256P-X86-NEXT:    vaddps %xmm0, %xmm3, %xmm0
; AVX256P-X86-NEXT:    retl
  %res = call <4 x float> @llvm.x86.avx512.mask.fixupimm.ss(<4 x float> %x0, <4 x float> %x1, <4 x i32> %x2, i32 5, i8 %x4, i32 4)
  %res1 = call <4 x float> @llvm.x86.avx512.mask.fixupimm.ss(<4 x float> %x0, <4 x float> %x1, <4 x i32> zeroinitializer, i32 5, i8 %x4, i32 4)
  %res2 = call <4 x float> @llvm.x86.avx512.mask.fixupimm.ss(<4 x float> %x0, <4 x float> %x1, <4 x i32> %x2, i32 5, i8 -1, i32 8)
  %res3 = fadd <4 x float> %res, %res1
  %res4 = fadd <4 x float> %res3, %res2
  ret <4 x float> %res4
}

define <4 x float>@test_int_x86_avx512_maskz_fixupimm_ss(<4 x float> %x0, <4 x float> %x1, <4 x i32> %x2, i8 %x4) {
; AVX256P-X64-LABEL: test_int_x86_avx512_maskz_fixupimm_ss:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vmovaps %xmm0, %xmm3
; AVX256P-X64-NEXT:    vfixupimmss $5, %xmm2, %xmm1, %xmm3 {%k1} {z}
; AVX256P-X64-NEXT:    vxorps %xmm4, %xmm4, %xmm4
; AVX256P-X64-NEXT:    vmovaps %xmm0, %xmm5
; AVX256P-X64-NEXT:    vfixupimmss $5, {sae}, %xmm4, %xmm1, %xmm5 {%k1} {z}
; AVX256P-X64-NEXT:    vaddps %xmm5, %xmm3, %xmm3
; AVX256P-X64-NEXT:    vfixupimmss $6, %xmm2, %xmm1, %xmm0
; AVX256P-X64-NEXT:    vaddps %xmm0, %xmm3, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_int_x86_avx512_maskz_fixupimm_ss:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vmovaps %xmm0, %xmm3
; AVX256P-X86-NEXT:    vfixupimmss $5, %xmm2, %xmm1, %xmm3 {%k1} {z}
; AVX256P-X86-NEXT:    vxorps %xmm4, %xmm4, %xmm4
; AVX256P-X86-NEXT:    vmovaps %xmm0, %xmm5
; AVX256P-X86-NEXT:    vfixupimmss $5, {sae}, %xmm4, %xmm1, %xmm5 {%k1} {z}
; AVX256P-X86-NEXT:    vaddps %xmm5, %xmm3, %xmm3
; AVX256P-X86-NEXT:    vfixupimmss $6, %xmm2, %xmm1, %xmm0
; AVX256P-X86-NEXT:    vaddps %xmm0, %xmm3, %xmm0
; AVX256P-X86-NEXT:    retl
  %res = call <4 x float> @llvm.x86.avx512.maskz.fixupimm.ss(<4 x float> %x0, <4 x float> %x1, <4 x i32> %x2, i32 5, i8 %x4, i32 4)
  %res1 = call <4 x float> @llvm.x86.avx512.maskz.fixupimm.ss(<4 x float> %x0, <4 x float> %x1, <4 x i32> zeroinitializer, i32 5, i8 %x4, i32 8)
  %res2 = call <4 x float> @llvm.x86.avx512.maskz.fixupimm.ss(<4 x float> %x0, <4 x float> %x1, <4 x i32> %x2, i32 6, i8 -1, i32 4)
  %res3 = fadd <4 x float> %res, %res1
  %res4 = fadd <4 x float> %res3, %res2
  ret <4 x float> %res4
}

define <2 x double>@test_int_x86_avx512_mask_fixupimm_sd(<2 x double> %x0, <2 x double> %x1, <2 x i64> %x2, i8 %x4) {
; AVX256P-X64-LABEL: test_int_x86_avx512_mask_fixupimm_sd:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vmovapd %xmm0, %xmm3
; AVX256P-X64-NEXT:    vfixupimmsd $5, %xmm2, %xmm1, %xmm3 {%k1}
; AVX256P-X64-NEXT:    vxorpd %xmm4, %xmm4, %xmm4
; AVX256P-X64-NEXT:    vmovapd %xmm0, %xmm5
; AVX256P-X64-NEXT:    vfixupimmsd $5, {sae}, %xmm4, %xmm1, %xmm5 {%k1}
; AVX256P-X64-NEXT:    vaddpd %xmm5, %xmm3, %xmm3
; AVX256P-X64-NEXT:    vfixupimmsd $6, %xmm2, %xmm1, %xmm0
; AVX256P-X64-NEXT:    vaddpd %xmm0, %xmm3, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_int_x86_avx512_mask_fixupimm_sd:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vmovapd %xmm0, %xmm3
; AVX256P-X86-NEXT:    vfixupimmsd $5, %xmm2, %xmm1, %xmm3 {%k1}
; AVX256P-X86-NEXT:    vxorpd %xmm4, %xmm4, %xmm4
; AVX256P-X86-NEXT:    vmovapd %xmm0, %xmm5
; AVX256P-X86-NEXT:    vfixupimmsd $5, {sae}, %xmm4, %xmm1, %xmm5 {%k1}
; AVX256P-X86-NEXT:    vaddpd %xmm5, %xmm3, %xmm3
; AVX256P-X86-NEXT:    vfixupimmsd $6, %xmm2, %xmm1, %xmm0
; AVX256P-X86-NEXT:    vaddpd %xmm0, %xmm3, %xmm0
; AVX256P-X86-NEXT:    retl
  %res = call <2 x double> @llvm.x86.avx512.mask.fixupimm.sd(<2 x double> %x0, <2 x double> %x1, <2 x i64> %x2, i32 5, i8 %x4, i32 4)
  %res1 = call <2 x double> @llvm.x86.avx512.mask.fixupimm.sd(<2 x double> %x0, <2 x double> %x1, <2 x i64> zeroinitializer, i32 5, i8 %x4, i32 8)
  %res2 = call <2 x double> @llvm.x86.avx512.mask.fixupimm.sd(<2 x double> %x0, <2 x double> %x1, <2 x i64> %x2, i32 6, i8 -1, i32 4)
  %res3 = fadd <2 x double> %res, %res1
  %res4 = fadd <2 x double> %res3, %res2
  ret <2 x double> %res4
}

define <2 x double>@test_int_x86_avx512_maskz_fixupimm_sd(<2 x double> %x0, <2 x double> %x1, <2 x i64> %x2, i8 %x4) {
; AVX256P-X64-LABEL: test_int_x86_avx512_maskz_fixupimm_sd:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vmovapd %xmm0, %xmm3
; AVX256P-X64-NEXT:    vfixupimmsd $5, %xmm2, %xmm1, %xmm3 {%k1} {z}
; AVX256P-X64-NEXT:    vxorpd %xmm4, %xmm4, %xmm4
; AVX256P-X64-NEXT:    vmovapd %xmm0, %xmm5
; AVX256P-X64-NEXT:    vfixupimmsd $5, {sae}, %xmm4, %xmm1, %xmm5 {%k1} {z}
; AVX256P-X64-NEXT:    vaddpd %xmm5, %xmm3, %xmm3
; AVX256P-X64-NEXT:    vfixupimmsd $5, {sae}, %xmm2, %xmm1, %xmm0 {%k1} {z}
; AVX256P-X64-NEXT:    vaddpd %xmm0, %xmm3, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_int_x86_avx512_maskz_fixupimm_sd:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vmovapd %xmm0, %xmm3
; AVX256P-X86-NEXT:    vfixupimmsd $5, %xmm2, %xmm1, %xmm3 {%k1} {z}
; AVX256P-X86-NEXT:    vxorpd %xmm4, %xmm4, %xmm4
; AVX256P-X86-NEXT:    vmovapd %xmm0, %xmm5
; AVX256P-X86-NEXT:    vfixupimmsd $5, {sae}, %xmm4, %xmm1, %xmm5 {%k1} {z}
; AVX256P-X86-NEXT:    vaddpd %xmm5, %xmm3, %xmm3
; AVX256P-X86-NEXT:    vfixupimmsd $5, {sae}, %xmm2, %xmm1, %xmm0 {%k1} {z}
; AVX256P-X86-NEXT:    vaddpd %xmm0, %xmm3, %xmm0
; AVX256P-X86-NEXT:    retl
  %res = call <2 x double> @llvm.x86.avx512.maskz.fixupimm.sd(<2 x double> %x0, <2 x double> %x1, <2 x i64> %x2, i32 5, i8 %x4, i32 4)
  %res1 = call <2 x double> @llvm.x86.avx512.maskz.fixupimm.sd(<2 x double> %x0, <2 x double> %x1, <2 x i64> zeroinitializer, i32 5, i8 %x4, i32 8)
  %res2 = call <2 x double> @llvm.x86.avx512.maskz.fixupimm.sd(<2 x double> %x0, <2 x double> %x1, <2 x i64> %x2, i32 5, i8 %x4, i32 8)
  %res3 = fadd <2 x double> %res, %res1
  %res4 = fadd <2 x double> %res3, %res2
  ret <2 x double> %res4
}

define <2 x double> @test_int_x86_avx512_mask_vfmadd_sd(<2 x double> %x0, <2 x double> %x1, <2 x double> %x2, i8 %x3, i32 %x4) {
; AVX256P-X64-LABEL: test_int_x86_avx512_mask_vfmadd_sd:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vmovapd %xmm0, %xmm3
; AVX256P-X64-NEXT:    vfmadd213sd {{.*#+}} xmm3 {%k1} = (xmm1 * xmm3) + xmm2
; AVX256P-X64-NEXT:    vmovapd %xmm0, %xmm4
; AVX256P-X64-NEXT:    vfmadd213sd {rz-sae}, %xmm2, %xmm1, %xmm4
; AVX256P-X64-NEXT:    vaddpd %xmm4, %xmm3, %xmm3
; AVX256P-X64-NEXT:    vfmadd213sd {ru-sae}, %xmm2, %xmm1, %xmm0 {%k1}
; AVX256P-X64-NEXT:    vaddpd %xmm3, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_int_x86_avx512_mask_vfmadd_sd:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vmovapd %xmm0, %xmm3
; AVX256P-X86-NEXT:    vfmadd213sd {{.*#+}} xmm3 {%k1} = (xmm1 * xmm3) + xmm2
; AVX256P-X86-NEXT:    vmovapd %xmm0, %xmm4
; AVX256P-X86-NEXT:    vfmadd213sd {rz-sae}, %xmm2, %xmm1, %xmm4
; AVX256P-X86-NEXT:    vaddpd %xmm4, %xmm3, %xmm3
; AVX256P-X86-NEXT:    vfmadd213sd {ru-sae}, %xmm2, %xmm1, %xmm0 {%k1}
; AVX256P-X86-NEXT:    vaddpd %xmm3, %xmm0, %xmm0
; AVX256P-X86-NEXT:    retl
  %1 = extractelement <2 x double> %x0, i64 0
  %2 = extractelement <2 x double> %x1, i64 0
  %3 = extractelement <2 x double> %x2, i64 0
  %4 = call double @llvm.fma.f64(double %1, double %2, double %3)
  %5 = bitcast i8 %x3 to <8 x i1>
  %6 = extractelement <8 x i1> %5, i64 0
  %7 = select i1 %6, double %4, double %1
  %8 = insertelement <2 x double> %x0, double %7, i64 0
  %9 = extractelement <2 x double> %x0, i64 0
  %10 = extractelement <2 x double> %x1, i64 0
  %11 = extractelement <2 x double> %x2, i64 0
  %12 = call double @llvm.x86.avx512.vfmadd.f64(double %9, double %10, double %11, i32 11)
  %13 = insertelement <2 x double> %x0, double %12, i64 0
  %14 = extractelement <2 x double> %x0, i64 0
  %15 = extractelement <2 x double> %x1, i64 0
  %16 = extractelement <2 x double> %x2, i64 0
  %17 = call double @llvm.x86.avx512.vfmadd.f64(double %14, double %15, double %16, i32 10)
  %18 = bitcast i8 %x3 to <8 x i1>
  %19 = extractelement <8 x i1> %18, i64 0
  %20 = select i1 %19, double %17, double %14
  %21 = insertelement <2 x double> %x0, double %20, i64 0
  %res3 = fadd <2 x double> %8, %13
  %res4 = fadd <2 x double> %21, %res3
  ret <2 x double> %res4
}

define <4 x float> @test_int_x86_avx512_mask_vfmadd_ss(<4 x float> %x0, <4 x float> %x1, <4 x float> %x2, i8 %x3, i32 %x4) {
; AVX256P-X64-LABEL: test_int_x86_avx512_mask_vfmadd_ss:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vmovaps %xmm0, %xmm3
; AVX256P-X64-NEXT:    vfmadd213ss {{.*#+}} xmm3 {%k1} = (xmm1 * xmm3) + xmm2
; AVX256P-X64-NEXT:    vmovaps %xmm0, %xmm4
; AVX256P-X64-NEXT:    vfmadd213ss {rz-sae}, %xmm2, %xmm1, %xmm4
; AVX256P-X64-NEXT:    vaddps %xmm4, %xmm3, %xmm3
; AVX256P-X64-NEXT:    vfmadd213ss {ru-sae}, %xmm2, %xmm1, %xmm0 {%k1}
; AVX256P-X64-NEXT:    vaddps %xmm3, %xmm0, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_int_x86_avx512_mask_vfmadd_ss:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vmovaps %xmm0, %xmm3
; AVX256P-X86-NEXT:    vfmadd213ss {{.*#+}} xmm3 {%k1} = (xmm1 * xmm3) + xmm2
; AVX256P-X86-NEXT:    vmovaps %xmm0, %xmm4
; AVX256P-X86-NEXT:    vfmadd213ss {rz-sae}, %xmm2, %xmm1, %xmm4
; AVX256P-X86-NEXT:    vaddps %xmm4, %xmm3, %xmm3
; AVX256P-X86-NEXT:    vfmadd213ss {ru-sae}, %xmm2, %xmm1, %xmm0 {%k1}
; AVX256P-X86-NEXT:    vaddps %xmm3, %xmm0, %xmm0
; AVX256P-X86-NEXT:    retl
  %1 = extractelement <4 x float> %x0, i64 0
  %2 = extractelement <4 x float> %x1, i64 0
  %3 = extractelement <4 x float> %x2, i64 0
  %4 = call float @llvm.fma.f32(float %1, float %2, float %3)
  %5 = bitcast i8 %x3 to <8 x i1>
  %6 = extractelement <8 x i1> %5, i64 0
  %7 = select i1 %6, float %4, float %1
  %8 = insertelement <4 x float> %x0, float %7, i64 0
  %9 = extractelement <4 x float> %x0, i64 0
  %10 = extractelement <4 x float> %x1, i64 0
  %11 = extractelement <4 x float> %x2, i64 0
  %12 = call float @llvm.x86.avx512.vfmadd.f32(float %9, float %10, float %11, i32 11)
  %13 = insertelement <4 x float> %x0, float %12, i64 0
  %14 = extractelement <4 x float> %x0, i64 0
  %15 = extractelement <4 x float> %x1, i64 0
  %16 = extractelement <4 x float> %x2, i64 0
  %17 = call float @llvm.x86.avx512.vfmadd.f32(float %14, float %15, float %16, i32 10)
  %18 = bitcast i8 %x3 to <8 x i1>
  %19 = extractelement <8 x i1> %18, i64 0
  %20 = select i1 %19, float %17, float %14
  %21 = insertelement <4 x float> %x0, float %20, i64 0
  %res3 = fadd <4 x float> %8, %13
  %res4 = fadd <4 x float> %21, %res3
  ret <4 x float> %res4
}

define <2 x double>@test_int_x86_avx512_maskz_vfmadd_sd(<2 x double> %x0, <2 x double> %x1, <2 x double> %x2, i8 %x3,i32 %x4 ){
; AVX256P-X64-LABEL: test_int_x86_avx512_maskz_vfmadd_sd:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vmovapd %xmm0, %xmm3
; AVX256P-X64-NEXT:    vfmadd213sd {{.*#+}} xmm3 {%k1} {z} = (xmm1 * xmm3) + xmm2
; AVX256P-X64-NEXT:    vfmadd213sd {rz-sae}, %xmm2, %xmm1, %xmm0 {%k1} {z}
; AVX256P-X64-NEXT:    vaddpd %xmm0, %xmm3, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_int_x86_avx512_maskz_vfmadd_sd:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vmovapd %xmm0, %xmm3
; AVX256P-X86-NEXT:    vfmadd213sd {{.*#+}} xmm3 {%k1} {z} = (xmm1 * xmm3) + xmm2
; AVX256P-X86-NEXT:    vfmadd213sd {rz-sae}, %xmm2, %xmm1, %xmm0 {%k1} {z}
; AVX256P-X86-NEXT:    vaddpd %xmm0, %xmm3, %xmm0
; AVX256P-X86-NEXT:    retl
  %1 = extractelement <2 x double> %x0, i64 0
  %2 = extractelement <2 x double> %x1, i64 0
  %3 = extractelement <2 x double> %x2, i64 0
  %4 = call double @llvm.fma.f64(double %1, double %2, double %3)
  %5 = bitcast i8 %x3 to <8 x i1>
  %6 = extractelement <8 x i1> %5, i64 0
  %7 = select i1 %6, double %4, double 0.000000e+00
  %8 = insertelement <2 x double> %x0, double %7, i64 0
  %9 = extractelement <2 x double> %x0, i64 0
  %10 = extractelement <2 x double> %x1, i64 0
  %11 = extractelement <2 x double> %x2, i64 0
  %12 = call double @llvm.x86.avx512.vfmadd.f64(double %9, double %10, double %11, i32 11)
  %13 = bitcast i8 %x3 to <8 x i1>
  %14 = extractelement <8 x i1> %13, i64 0
  %15 = select i1 %14, double %12, double 0.000000e+00
  %16 = insertelement <2 x double> %x0, double %15, i64 0
  %res2 = fadd <2 x double> %8, %16
  ret <2 x double> %res2
}

define <4 x float>@test_int_x86_avx512_maskz_vfmadd_ss(<4 x float> %x0, <4 x float> %x1, <4 x float> %x2, i8 %x3,i32 %x4 ){
; AVX256P-X64-LABEL: test_int_x86_avx512_maskz_vfmadd_ss:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vmovaps %xmm0, %xmm3
; AVX256P-X64-NEXT:    vfmadd213ss {{.*#+}} xmm3 {%k1} {z} = (xmm1 * xmm3) + xmm2
; AVX256P-X64-NEXT:    vfmadd213ss {rz-sae}, %xmm2, %xmm1, %xmm0 {%k1} {z}
; AVX256P-X64-NEXT:    vaddps %xmm0, %xmm3, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_int_x86_avx512_maskz_vfmadd_ss:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vmovaps %xmm0, %xmm3
; AVX256P-X86-NEXT:    vfmadd213ss {{.*#+}} xmm3 {%k1} {z} = (xmm1 * xmm3) + xmm2
; AVX256P-X86-NEXT:    vfmadd213ss {rz-sae}, %xmm2, %xmm1, %xmm0 {%k1} {z}
; AVX256P-X86-NEXT:    vaddps %xmm0, %xmm3, %xmm0
; AVX256P-X86-NEXT:    retl
  %1 = extractelement <4 x float> %x0, i64 0
  %2 = extractelement <4 x float> %x1, i64 0
  %3 = extractelement <4 x float> %x2, i64 0
  %4 = call float @llvm.fma.f32(float %1, float %2, float %3)
  %5 = bitcast i8 %x3 to <8 x i1>
  %6 = extractelement <8 x i1> %5, i64 0
  %7 = select i1 %6, float %4, float 0.000000e+00
  %8 = insertelement <4 x float> %x0, float %7, i64 0
  %9 = extractelement <4 x float> %x0, i64 0
  %10 = extractelement <4 x float> %x1, i64 0
  %11 = extractelement <4 x float> %x2, i64 0
  %12 = call float @llvm.x86.avx512.vfmadd.f32(float %9, float %10, float %11, i32 11)
  %13 = bitcast i8 %x3 to <8 x i1>
  %14 = extractelement <8 x i1> %13, i64 0
  %15 = select i1 %14, float %12, float 0.000000e+00
  %16 = insertelement <4 x float> %x0, float %15, i64 0
  %res2 = fadd <4 x float> %8, %16
  ret <4 x float> %res2
}

define <4 x float> @test_int_x86_avx512_maskz_vfmadd_ss_load0(i8 zeroext %0, ptr nocapture readonly %1, float %2, float %3) {
; AVX256P-X64-LABEL: test_int_x86_avx512_maskz_vfmadd_ss_load0:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vmovaps (%rsi), %xmm2
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vfmadd213ss {{.*#+}} xmm2 {%k1} {z} = (xmm0 * xmm2) + xmm1
; AVX256P-X64-NEXT:    vmovaps %xmm2, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_int_x86_avx512_maskz_vfmadd_ss_load0:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    vmovss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    vmovaps (%eax), %xmm0
; AVX256P-X86-NEXT:    vfmadd132ss {{.*#+}} xmm0 {%k1} {z} = (xmm0 * mem) + xmm1
; AVX256P-X86-NEXT:    retl
  %5 = load <4 x float>, ptr %1, align 16
  %6 = extractelement <4 x float> %5, i64 0
  %7 = tail call float @llvm.fma.f32(float %6, float %2, float %3) #2
  %8 = bitcast i8 %0 to <8 x i1>
  %9 = extractelement <8 x i1> %8, i64 0
  %10 = select i1 %9, float %7, float 0.000000e+00
  %11 = insertelement <4 x float> %5, float %10, i64 0
  ret <4 x float> %11
}

define <2 x double> @test_int_x86_avx512_mask3_vfmadd_sd(<2 x double> %x0, <2 x double> %x1, <2 x double> %x2, i8 %x3, i32 %x4) {
; AVX256P-X64-LABEL: test_int_x86_avx512_mask3_vfmadd_sd:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vmovapd %xmm2, %xmm3
; AVX256P-X64-NEXT:    vfmadd231sd {{.*#+}} xmm3 {%k1} = (xmm0 * xmm1) + xmm3
; AVX256P-X64-NEXT:    vmovapd %xmm2, %xmm4
; AVX256P-X64-NEXT:    vfmadd231sd {rz-sae}, %xmm1, %xmm0, %xmm4
; AVX256P-X64-NEXT:    vaddpd %xmm4, %xmm3, %xmm3
; AVX256P-X64-NEXT:    vfmadd231sd {ru-sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X64-NEXT:    vaddpd %xmm3, %xmm2, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_int_x86_avx512_mask3_vfmadd_sd:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vmovapd %xmm2, %xmm3
; AVX256P-X86-NEXT:    vfmadd231sd {{.*#+}} xmm3 {%k1} = (xmm0 * xmm1) + xmm3
; AVX256P-X86-NEXT:    vmovapd %xmm2, %xmm4
; AVX256P-X86-NEXT:    vfmadd231sd {rz-sae}, %xmm1, %xmm0, %xmm4
; AVX256P-X86-NEXT:    vaddpd %xmm4, %xmm3, %xmm3
; AVX256P-X86-NEXT:    vfmadd231sd {ru-sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X86-NEXT:    vaddpd %xmm3, %xmm2, %xmm0
; AVX256P-X86-NEXT:    retl
  %1 = extractelement <2 x double> %x0, i64 0
  %2 = extractelement <2 x double> %x1, i64 0
  %3 = extractelement <2 x double> %x2, i64 0
  %4 = call double @llvm.fma.f64(double %1, double %2, double %3)
  %5 = bitcast i8 %x3 to <8 x i1>
  %6 = extractelement <8 x i1> %5, i64 0
  %7 = select i1 %6, double %4, double %3
  %8 = insertelement <2 x double> %x2, double %7, i64 0
  %9 = extractelement <2 x double> %x0, i64 0
  %10 = extractelement <2 x double> %x1, i64 0
  %11 = extractelement <2 x double> %x2, i64 0
  %12 = call double @llvm.x86.avx512.vfmadd.f64(double %9, double %10, double %11, i32 11)
  %13 = insertelement <2 x double> %x2, double %12, i64 0
  %14 = extractelement <2 x double> %x0, i64 0
  %15 = extractelement <2 x double> %x1, i64 0
  %16 = extractelement <2 x double> %x2, i64 0
  %17 = call double @llvm.x86.avx512.vfmadd.f64(double %14, double %15, double %16, i32 10)
  %18 = bitcast i8 %x3 to <8 x i1>
  %19 = extractelement <8 x i1> %18, i64 0
  %20 = select i1 %19, double %17, double %16
  %21 = insertelement <2 x double> %x2, double %20, i64 0
  %res3 = fadd <2 x double> %8, %13
  %res4 = fadd <2 x double> %21, %res3
  ret <2 x double> %res4
}

define <4 x float> @test_int_x86_avx512_mask3_vfmadd_ss(<4 x float> %x0, <4 x float> %x1, <4 x float> %x2, i8 %x3, i32 %x4) {
; AVX256P-X64-LABEL: test_int_x86_avx512_mask3_vfmadd_ss:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vmovaps %xmm2, %xmm3
; AVX256P-X64-NEXT:    vfmadd231ss {{.*#+}} xmm3 {%k1} = (xmm0 * xmm1) + xmm3
; AVX256P-X64-NEXT:    vmovaps %xmm2, %xmm4
; AVX256P-X64-NEXT:    vfmadd231ss {rz-sae}, %xmm1, %xmm0, %xmm4
; AVX256P-X64-NEXT:    vaddps %xmm4, %xmm3, %xmm3
; AVX256P-X64-NEXT:    vfmadd231ss {ru-sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X64-NEXT:    vaddps %xmm3, %xmm2, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_int_x86_avx512_mask3_vfmadd_ss:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vmovaps %xmm2, %xmm3
; AVX256P-X86-NEXT:    vfmadd231ss {{.*#+}} xmm3 {%k1} = (xmm0 * xmm1) + xmm3
; AVX256P-X86-NEXT:    vmovaps %xmm2, %xmm4
; AVX256P-X86-NEXT:    vfmadd231ss {rz-sae}, %xmm1, %xmm0, %xmm4
; AVX256P-X86-NEXT:    vaddps %xmm4, %xmm3, %xmm3
; AVX256P-X86-NEXT:    vfmadd231ss {ru-sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X86-NEXT:    vaddps %xmm3, %xmm2, %xmm0
; AVX256P-X86-NEXT:    retl
  %1 = extractelement <4 x float> %x0, i64 0
  %2 = extractelement <4 x float> %x1, i64 0
  %3 = extractelement <4 x float> %x2, i64 0
  %4 = call float @llvm.fma.f32(float %1, float %2, float %3)
  %5 = bitcast i8 %x3 to <8 x i1>
  %6 = extractelement <8 x i1> %5, i64 0
  %7 = select i1 %6, float %4, float %3
  %8 = insertelement <4 x float> %x2, float %7, i64 0
  %9 = extractelement <4 x float> %x0, i64 0
  %10 = extractelement <4 x float> %x1, i64 0
  %11 = extractelement <4 x float> %x2, i64 0
  %12 = call float @llvm.x86.avx512.vfmadd.f32(float %9, float %10, float %11, i32 11)
  %13 = insertelement <4 x float> %x2, float %12, i64 0
  %14 = extractelement <4 x float> %x0, i64 0
  %15 = extractelement <4 x float> %x1, i64 0
  %16 = extractelement <4 x float> %x2, i64 0
  %17 = call float @llvm.x86.avx512.vfmadd.f32(float %14, float %15, float %16, i32 10)
  %18 = bitcast i8 %x3 to <8 x i1>
  %19 = extractelement <8 x i1> %18, i64 0
  %20 = select i1 %19, float %17, float %16
  %21 = insertelement <4 x float> %x2, float %20, i64 0
  %res3 = fadd <4 x float> %8, %13
  %res4 = fadd <4 x float> %21, %res3
  ret <4 x float> %res4
}

define void @fmadd_ss_mask_memfold(ptr %a, ptr %b, i8 %c) {
; AVX256P-X64-LABEL: fmadd_ss_mask_memfold:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; AVX256P-X64-NEXT:    vmovss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; AVX256P-X64-NEXT:    vfmadd213ss {{.*#+}} xmm1 = (xmm0 * xmm1) + xmm0
; AVX256P-X64-NEXT:    kmovd %edx, %k1
; AVX256P-X64-NEXT:    vmovss %xmm1, %xmm0, %xmm0 {%k1}
; AVX256P-X64-NEXT:    vmovss %xmm0, (%rdi)
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: fmadd_ss_mask_memfold:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; AVX256P-X86-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; AVX256P-X86-NEXT:    vmovss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; AVX256P-X86-NEXT:    vfmadd213ss {{.*#+}} xmm1 = (xmm0 * xmm1) + xmm0
; AVX256P-X86-NEXT:    vmovss %xmm1, %xmm0, %xmm0 {%k1}
; AVX256P-X86-NEXT:    vmovss %xmm0, (%ecx)
; AVX256P-X86-NEXT:    retl
  %a.val = load float, ptr %a
  %av0 = insertelement <4 x float> undef, float %a.val, i32 0
  %av1 = insertelement <4 x float> %av0, float 0.000000e+00, i32 1
  %av2 = insertelement <4 x float> %av1, float 0.000000e+00, i32 2
  %av  = insertelement <4 x float> %av2, float 0.000000e+00, i32 3

  %b.val = load float, ptr %b
  %bv0 = insertelement <4 x float> undef, float %b.val, i32 0
  %bv1 = insertelement <4 x float> %bv0, float 0.000000e+00, i32 1
  %bv2 = insertelement <4 x float> %bv1, float 0.000000e+00, i32 2
  %bv =  insertelement <4 x float> %bv2, float 0.000000e+00, i32 3
  %1 = extractelement <4 x float> %av, i64 0
  %2 = extractelement <4 x float> %bv, i64 0
  %3 = extractelement <4 x float> %av, i64 0
  %4 = call float @llvm.fma.f32(float %1, float %2, float %3)
  %5 = bitcast i8 %c to <8 x i1>
  %6 = extractelement <8 x i1> %5, i64 0
  %7 = select i1 %6, float %4, float %1
  %8 = insertelement <4 x float> %av, float %7, i64 0
  %sr = extractelement <4 x float> %8, i32 0
  store float %sr, ptr %a
  ret void
}

define void @fmadd_ss_maskz_memfold(ptr %a, ptr %b, i8 %c) {
; AVX256P-X64-LABEL: fmadd_ss_maskz_memfold:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; AVX256P-X64-NEXT:    vfmadd231ss {{.*#+}} xmm0 = (xmm0 * mem) + xmm0
; AVX256P-X64-NEXT:    kmovd %edx, %k1
; AVX256P-X64-NEXT:    vmovss %xmm0, %xmm0, %xmm0 {%k1} {z}
; AVX256P-X64-NEXT:    vmovss %xmm0, (%rdi)
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: fmadd_ss_maskz_memfold:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; AVX256P-X86-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; AVX256P-X86-NEXT:    vfmadd231ss {{.*#+}} xmm0 = (xmm0 * mem) + xmm0
; AVX256P-X86-NEXT:    vmovss %xmm0, %xmm0, %xmm0 {%k1} {z}
; AVX256P-X86-NEXT:    vmovss %xmm0, (%ecx)
; AVX256P-X86-NEXT:    retl
  %a.val = load float, ptr %a
  %av0 = insertelement <4 x float> undef, float %a.val, i32 0
  %av1 = insertelement <4 x float> %av0, float 0.000000e+00, i32 1
  %av2 = insertelement <4 x float> %av1, float 0.000000e+00, i32 2
  %av  = insertelement <4 x float> %av2, float 0.000000e+00, i32 3

  %b.val = load float, ptr %b
  %bv0 = insertelement <4 x float> undef, float %b.val, i32 0
  %bv1 = insertelement <4 x float> %bv0, float 0.000000e+00, i32 1
  %bv2 = insertelement <4 x float> %bv1, float 0.000000e+00, i32 2
  %bv  = insertelement <4 x float> %bv2, float 0.000000e+00, i32 3
  %1 = extractelement <4 x float> %av, i64 0
  %2 = extractelement <4 x float> %bv, i64 0
  %3 = extractelement <4 x float> %av, i64 0
  %4 = call float @llvm.fma.f32(float %1, float %2, float %3)
  %5 = bitcast i8 %c to <8 x i1>
  %6 = extractelement <8 x i1> %5, i64 0
  %7 = select i1 %6, float %4, float 0.000000e+00
  %8 = insertelement <4 x float> %av, float %7, i64 0
  %sr = extractelement <4 x float> %8, i32 0
  store float %sr, ptr %a
  ret void
}

define void @fmadd_sd_mask_memfold(ptr %a, ptr %b, i8 %c) {
; AVX256P-X64-LABEL: fmadd_sd_mask_memfold:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; AVX256P-X64-NEXT:    vmovsd {{.*#+}} xmm1 = mem[0],zero
; AVX256P-X64-NEXT:    vfmadd213sd {{.*#+}} xmm1 = (xmm0 * xmm1) + xmm0
; AVX256P-X64-NEXT:    kmovd %edx, %k1
; AVX256P-X64-NEXT:    vmovsd %xmm1, %xmm0, %xmm0 {%k1}
; AVX256P-X64-NEXT:    vmovsd %xmm0, (%rdi)
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: fmadd_sd_mask_memfold:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; AVX256P-X86-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; AVX256P-X86-NEXT:    vmovsd {{.*#+}} xmm1 = mem[0],zero
; AVX256P-X86-NEXT:    vfmadd213sd {{.*#+}} xmm1 = (xmm0 * xmm1) + xmm0
; AVX256P-X86-NEXT:    vmovsd %xmm1, %xmm0, %xmm0 {%k1}
; AVX256P-X86-NEXT:    vmovsd %xmm0, (%ecx)
; AVX256P-X86-NEXT:    retl
  %a.val = load double, ptr %a
  %av0 = insertelement <2 x double> undef, double %a.val, i32 0
  %av = insertelement <2 x double> %av0, double 0.000000e+00, i32 1

  %b.val = load double, ptr %b
  %bv0 = insertelement <2 x double> undef, double %b.val, i32 0
  %bv = insertelement <2 x double> %bv0, double 0.000000e+00, i32 1
  %1 = extractelement <2 x double> %av, i64 0
  %2 = extractelement <2 x double> %bv, i64 0
  %3 = extractelement <2 x double> %av, i64 0
  %4 = call double @llvm.fma.f64(double %1, double %2, double %3)
  %5 = bitcast i8 %c to <8 x i1>
  %6 = extractelement <8 x i1> %5, i64 0
  %7 = select i1 %6, double %4, double %1
  %8 = insertelement <2 x double> %av, double %7, i64 0
  %sr = extractelement <2 x double> %8, i32 0
  store double %sr, ptr %a
  ret void
}

define void @fmadd_sd_maskz_memfold(ptr %a, ptr %b, i8 %c) {
; AVX256P-X64-LABEL: fmadd_sd_maskz_memfold:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; AVX256P-X64-NEXT:    vfmadd231sd {{.*#+}} xmm0 = (xmm0 * mem) + xmm0
; AVX256P-X64-NEXT:    kmovd %edx, %k1
; AVX256P-X64-NEXT:    vmovsd %xmm0, %xmm0, %xmm0 {%k1} {z}
; AVX256P-X64-NEXT:    vmovsd %xmm0, (%rdi)
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: fmadd_sd_maskz_memfold:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; AVX256P-X86-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; AVX256P-X86-NEXT:    vfmadd231sd {{.*#+}} xmm0 = (xmm0 * mem) + xmm0
; AVX256P-X86-NEXT:    vmovsd %xmm0, %xmm0, %xmm0 {%k1} {z}
; AVX256P-X86-NEXT:    vmovsd %xmm0, (%ecx)
; AVX256P-X86-NEXT:    retl
  %a.val = load double, ptr %a
  %av0 = insertelement <2 x double> undef, double %a.val, i32 0
  %av = insertelement <2 x double> %av0, double 0.000000e+00, i32 1

  %b.val = load double, ptr %b
  %bv0 = insertelement <2 x double> undef, double %b.val, i32 0
  %bv = insertelement <2 x double> %bv0, double 0.000000e+00, i32 1
  %1 = extractelement <2 x double> %av, i64 0
  %2 = extractelement <2 x double> %bv, i64 0
  %3 = extractelement <2 x double> %av, i64 0
  %4 = call double @llvm.fma.f64(double %1, double %2, double %3)
  %5 = bitcast i8 %c to <8 x i1>
  %6 = extractelement <8 x i1> %5, i64 0
  %7 = select i1 %6, double %4, double 0.000000e+00
  %8 = insertelement <2 x double> %av, double %7, i64 0
  %sr = extractelement <2 x double> %8, i32 0
  store double %sr, ptr %a
  ret void
}

define <2 x double> @test_int_x86_avx512_mask3_vfmsub_sd(<2 x double> %x0, <2 x double> %x1, <2 x double> %x2, i8 %x3, i32 %x4) {
; AVX256P-X64-LABEL: test_int_x86_avx512_mask3_vfmsub_sd:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vmovapd %xmm2, %xmm3
; AVX256P-X64-NEXT:    vfmsub231sd {{.*#+}} xmm3 {%k1} = (xmm0 * xmm1) - xmm3
; AVX256P-X64-NEXT:    vmovapd %xmm2, %xmm4
; AVX256P-X64-NEXT:    vfmsub231sd {rz-sae}, %xmm1, %xmm0, %xmm4
; AVX256P-X64-NEXT:    vaddpd %xmm4, %xmm3, %xmm3
; AVX256P-X64-NEXT:    vfmsub231sd {ru-sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X64-NEXT:    vaddpd %xmm3, %xmm2, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_int_x86_avx512_mask3_vfmsub_sd:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vmovapd %xmm2, %xmm3
; AVX256P-X86-NEXT:    vfmsub231sd {{.*#+}} xmm3 {%k1} = (xmm0 * xmm1) - xmm3
; AVX256P-X86-NEXT:    vmovapd %xmm2, %xmm4
; AVX256P-X86-NEXT:    vfmsub231sd {rz-sae}, %xmm1, %xmm0, %xmm4
; AVX256P-X86-NEXT:    vaddpd %xmm4, %xmm3, %xmm3
; AVX256P-X86-NEXT:    vfmsub231sd {ru-sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X86-NEXT:    vaddpd %xmm3, %xmm2, %xmm0
; AVX256P-X86-NEXT:    retl
  %1 = fneg <2 x double> %x2
  %2 = extractelement <2 x double> %x0, i64 0
  %3 = extractelement <2 x double> %x1, i64 0
  %4 = extractelement <2 x double> %1, i64 0
  %5 = call double @llvm.fma.f64(double %2, double %3, double %4)
  %6 = extractelement <2 x double> %x2, i64 0
  %7 = bitcast i8 %x3 to <8 x i1>
  %8 = extractelement <8 x i1> %7, i64 0
  %9 = select i1 %8, double %5, double %6
  %10 = insertelement <2 x double> %x2, double %9, i64 0
  %11 = fneg <2 x double> %x2
  %12 = extractelement <2 x double> %x0, i64 0
  %13 = extractelement <2 x double> %x1, i64 0
  %14 = extractelement <2 x double> %11, i64 0
  %15 = call double @llvm.x86.avx512.vfmadd.f64(double %12, double %13, double %14, i32 11)
  %16 = extractelement <2 x double> %x2, i64 0
  %17 = insertelement <2 x double> %x2, double %15, i64 0
  %18 = fneg <2 x double> %x2
  %19 = extractelement <2 x double> %x0, i64 0
  %20 = extractelement <2 x double> %x1, i64 0
  %21 = extractelement <2 x double> %18, i64 0
  %22 = call double @llvm.x86.avx512.vfmadd.f64(double %19, double %20, double %21, i32 10)
  %23 = extractelement <2 x double> %x2, i64 0
  %24 = bitcast i8 %x3 to <8 x i1>
  %25 = extractelement <8 x i1> %24, i64 0
  %26 = select i1 %25, double %22, double %23
  %27 = insertelement <2 x double> %x2, double %26, i64 0
  %res3 = fadd <2 x double> %10, %17
  %res4 = fadd <2 x double> %27, %res3
  ret <2 x double> %res4
}

define <4 x float> @test_int_x86_avx512_mask3_vfmsub_ss(<4 x float> %x0, <4 x float> %x1, <4 x float> %x2, i8 %x3, i32 %x4) {
; AVX256P-X64-LABEL: test_int_x86_avx512_mask3_vfmsub_ss:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vmovaps %xmm2, %xmm3
; AVX256P-X64-NEXT:    vfmsub231ss {{.*#+}} xmm3 {%k1} = (xmm0 * xmm1) - xmm3
; AVX256P-X64-NEXT:    vmovaps %xmm2, %xmm4
; AVX256P-X64-NEXT:    vfmsub231ss {rz-sae}, %xmm1, %xmm0, %xmm4
; AVX256P-X64-NEXT:    vaddps %xmm4, %xmm3, %xmm3
; AVX256P-X64-NEXT:    vfmsub231ss {ru-sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X64-NEXT:    vaddps %xmm3, %xmm2, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_int_x86_avx512_mask3_vfmsub_ss:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vmovaps %xmm2, %xmm3
; AVX256P-X86-NEXT:    vfmsub231ss {{.*#+}} xmm3 {%k1} = (xmm0 * xmm1) - xmm3
; AVX256P-X86-NEXT:    vmovaps %xmm2, %xmm4
; AVX256P-X86-NEXT:    vfmsub231ss {rz-sae}, %xmm1, %xmm0, %xmm4
; AVX256P-X86-NEXT:    vaddps %xmm4, %xmm3, %xmm3
; AVX256P-X86-NEXT:    vfmsub231ss {ru-sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X86-NEXT:    vaddps %xmm3, %xmm2, %xmm0
; AVX256P-X86-NEXT:    retl
  %1 = fneg <4 x float> %x2
  %2 = extractelement <4 x float> %x0, i64 0
  %3 = extractelement <4 x float> %x1, i64 0
  %4 = extractelement <4 x float> %1, i64 0
  %5 = call float @llvm.fma.f32(float %2, float %3, float %4)
  %6 = extractelement <4 x float> %x2, i64 0
  %7 = bitcast i8 %x3 to <8 x i1>
  %8 = extractelement <8 x i1> %7, i64 0
  %9 = select i1 %8, float %5, float %6
  %10 = insertelement <4 x float> %x2, float %9, i64 0
  %11 = fneg <4 x float> %x2
  %12 = extractelement <4 x float> %x0, i64 0
  %13 = extractelement <4 x float> %x1, i64 0
  %14 = extractelement <4 x float> %11, i64 0
  %15 = call float @llvm.x86.avx512.vfmadd.f32(float %12, float %13, float %14, i32 11)
  %16 = extractelement <4 x float> %x2, i64 0
  %17 = insertelement <4 x float> %x2, float %15, i64 0
  %18 = fneg <4 x float> %x2
  %19 = extractelement <4 x float> %x0, i64 0
  %20 = extractelement <4 x float> %x1, i64 0
  %21 = extractelement <4 x float> %18, i64 0
  %22 = call float @llvm.x86.avx512.vfmadd.f32(float %19, float %20, float %21, i32 10)
  %23 = extractelement <4 x float> %x2, i64 0
  %24 = bitcast i8 %x3 to <8 x i1>
  %25 = extractelement <8 x i1> %24, i64 0
  %26 = select i1 %25, float %22, float %23
  %27 = insertelement <4 x float> %x2, float %26, i64 0
  %res3 = fadd <4 x float> %10, %17
  %res4 = fadd <4 x float> %27, %res3
  ret <4 x float> %res4
}

define <2 x double> @test_int_x86_avx512_mask3_vfnmsub_sd(<2 x double> %x0, <2 x double> %x1, <2 x double> %x2, i8 %x3, i32 %x4) {
; AVX256P-X64-LABEL: test_int_x86_avx512_mask3_vfnmsub_sd:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vmovapd %xmm2, %xmm3
; AVX256P-X64-NEXT:    vfnmsub231sd {{.*#+}} xmm3 {%k1} = -(xmm0 * xmm1) - xmm3
; AVX256P-X64-NEXT:    vmovapd %xmm2, %xmm4
; AVX256P-X64-NEXT:    vfnmsub231sd {rz-sae}, %xmm1, %xmm0, %xmm4
; AVX256P-X64-NEXT:    vaddpd %xmm4, %xmm3, %xmm3
; AVX256P-X64-NEXT:    vfnmsub231sd {ru-sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X64-NEXT:    vaddpd %xmm3, %xmm2, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_int_x86_avx512_mask3_vfnmsub_sd:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vmovapd %xmm2, %xmm3
; AVX256P-X86-NEXT:    vfnmsub231sd {{.*#+}} xmm3 {%k1} = -(xmm0 * xmm1) - xmm3
; AVX256P-X86-NEXT:    vmovapd %xmm2, %xmm4
; AVX256P-X86-NEXT:    vfnmsub231sd {rz-sae}, %xmm1, %xmm0, %xmm4
; AVX256P-X86-NEXT:    vaddpd %xmm4, %xmm3, %xmm3
; AVX256P-X86-NEXT:    vfnmsub231sd {ru-sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X86-NEXT:    vaddpd %xmm3, %xmm2, %xmm0
; AVX256P-X86-NEXT:    retl
  %1 = fneg <2 x double> %x0
  %2 = fneg <2 x double> %x2
  %3 = extractelement <2 x double> %1, i64 0
  %4 = extractelement <2 x double> %x1, i64 0
  %5 = extractelement <2 x double> %2, i64 0
  %6 = call double @llvm.fma.f64(double %3, double %4, double %5)
  %7 = extractelement <2 x double> %x2, i64 0
  %8 = bitcast i8 %x3 to <8 x i1>
  %9 = extractelement <8 x i1> %8, i64 0
  %10 = select i1 %9, double %6, double %7
  %11 = insertelement <2 x double> %x2, double %10, i64 0
  %12 = fneg <2 x double> %x0
  %13 = fneg <2 x double> %x2
  %14 = extractelement <2 x double> %12, i64 0
  %15 = extractelement <2 x double> %x1, i64 0
  %16 = extractelement <2 x double> %13, i64 0
  %17 = call double @llvm.x86.avx512.vfmadd.f64(double %14, double %15, double %16, i32 11)
  %18 = extractelement <2 x double> %x2, i64 0
  %19 = insertelement <2 x double> %x2, double %17, i64 0
  %20 = fneg <2 x double> %x0
  %21 = fneg <2 x double> %x2
  %22 = extractelement <2 x double> %20, i64 0
  %23 = extractelement <2 x double> %x1, i64 0
  %24 = extractelement <2 x double> %21, i64 0
  %25 = call double @llvm.x86.avx512.vfmadd.f64(double %22, double %23, double %24, i32 10)
  %26 = extractelement <2 x double> %x2, i64 0
  %27 = bitcast i8 %x3 to <8 x i1>
  %28 = extractelement <8 x i1> %27, i64 0
  %29 = select i1 %28, double %25, double %26
  %30 = insertelement <2 x double> %x2, double %29, i64 0
  %res3 = fadd <2 x double> %11, %19
  %res4 = fadd <2 x double> %30, %res3
  ret <2 x double> %res4
}

define <4 x float> @test_int_x86_avx512_mask3_vfnmsub_ss(<4 x float> %x0, <4 x float> %x1, <4 x float> %x2, i8 %x3, i32 %x4) {
; AVX256P-X64-LABEL: test_int_x86_avx512_mask3_vfnmsub_ss:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %edi, %k1
; AVX256P-X64-NEXT:    vmovaps %xmm2, %xmm3
; AVX256P-X64-NEXT:    vfnmsub231ss {{.*#+}} xmm3 {%k1} = -(xmm0 * xmm1) - xmm3
; AVX256P-X64-NEXT:    vmovaps %xmm2, %xmm4
; AVX256P-X64-NEXT:    vfnmsub231ss {rz-sae}, %xmm1, %xmm0, %xmm4
; AVX256P-X64-NEXT:    vaddps %xmm4, %xmm3, %xmm3
; AVX256P-X64-NEXT:    vfnmsub231ss {ru-sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X64-NEXT:    vaddps %xmm3, %xmm2, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_int_x86_avx512_mask3_vfnmsub_ss:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vmovaps %xmm2, %xmm3
; AVX256P-X86-NEXT:    vfnmsub231ss {{.*#+}} xmm3 {%k1} = -(xmm0 * xmm1) - xmm3
; AVX256P-X86-NEXT:    vmovaps %xmm2, %xmm4
; AVX256P-X86-NEXT:    vfnmsub231ss {rz-sae}, %xmm1, %xmm0, %xmm4
; AVX256P-X86-NEXT:    vaddps %xmm4, %xmm3, %xmm3
; AVX256P-X86-NEXT:    vfnmsub231ss {ru-sae}, %xmm1, %xmm0, %xmm2 {%k1}
; AVX256P-X86-NEXT:    vaddps %xmm3, %xmm2, %xmm0
; AVX256P-X86-NEXT:    retl
  %1 = fneg <4 x float> %x0
  %2 = fneg <4 x float> %x2
  %3 = extractelement <4 x float> %1, i64 0
  %4 = extractelement <4 x float> %x1, i64 0
  %5 = extractelement <4 x float> %2, i64 0
  %6 = call float @llvm.fma.f32(float %3, float %4, float %5)
  %7 = extractelement <4 x float> %x2, i64 0
  %8 = bitcast i8 %x3 to <8 x i1>
  %9 = extractelement <8 x i1> %8, i64 0
  %10 = select i1 %9, float %6, float %7
  %11 = insertelement <4 x float> %x2, float %10, i64 0
  %12 = fneg <4 x float> %x0
  %13 = fneg <4 x float> %x2
  %14 = extractelement <4 x float> %12, i64 0
  %15 = extractelement <4 x float> %x1, i64 0
  %16 = extractelement <4 x float> %13, i64 0
  %17 = call float @llvm.x86.avx512.vfmadd.f32(float %14, float %15, float %16, i32 11)
  %18 = extractelement <4 x float> %x2, i64 0
  %19 = insertelement <4 x float> %x2, float %17, i64 0
  %20 = fneg <4 x float> %x0
  %21 = fneg <4 x float> %x2
  %22 = extractelement <4 x float> %20, i64 0
  %23 = extractelement <4 x float> %x1, i64 0
  %24 = extractelement <4 x float> %21, i64 0
  %25 = call float @llvm.x86.avx512.vfmadd.f32(float %22, float %23, float %24, i32 10)
  %26 = extractelement <4 x float> %x2, i64 0
  %27 = bitcast i8 %x3 to <8 x i1>
  %28 = extractelement <8 x i1> %27, i64 0
  %29 = select i1 %28, float %25, float %26
  %30 = insertelement <4 x float> %x2, float %29, i64 0
  %res3 = fadd <4 x float> %11, %19
  %res4 = fadd <4 x float> %30, %res3
  ret <4 x float> %res4
}

define <4 x float>@test_int_x86_avx512_mask3_vfmadd_ss_rm(<4 x float> %x0, <4 x float> %x1, ptr%ptr_b ,i8 %x3,i32 %x4) {
; AVX256P-X64-LABEL: test_int_x86_avx512_mask3_vfmadd_ss_rm:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %esi, %k1
; AVX256P-X64-NEXT:    vfmadd231ss {{.*#+}} xmm1 {%k1} = (xmm0 * mem) + xmm1
; AVX256P-X64-NEXT:    vmovaps %xmm1, %xmm0
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_int_x86_avx512_mask3_vfmadd_ss_rm:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vfmadd231ss {{.*#+}} xmm1 {%k1} = (xmm0 * mem) + xmm1
; AVX256P-X86-NEXT:    vmovaps %xmm1, %xmm0
; AVX256P-X86-NEXT:    retl
  %q = load float, ptr %ptr_b
  %vecinit.i = insertelement <4 x float> undef, float %q, i32 0
  %1 = extractelement <4 x float> %x0, i64 0
  %2 = extractelement <4 x float> %vecinit.i, i64 0
  %3 = extractelement <4 x float> %x1, i64 0
  %4 = call float @llvm.fma.f32(float %1, float %2, float %3)
  %5 = bitcast i8 %x3 to <8 x i1>
  %6 = extractelement <8 x i1> %5, i64 0
  %7 = select i1 %6, float %4, float %3
  %8 = insertelement <4 x float> %x1, float %7, i64 0
  ret <4 x float> %8
}

define <4 x float>@test_int_x86_avx512_mask_vfmadd_ss_rm(<4 x float> %x0, <4 x float> %x1,ptr%ptr_b ,i8 %x3,i32 %x4) {
; AVX256P-X64-LABEL: test_int_x86_avx512_mask_vfmadd_ss_rm:
; AVX256P-X64:       # %bb.0:
; AVX256P-X64-NEXT:    kmovd %esi, %k1
; AVX256P-X64-NEXT:    vfmadd132ss {{.*#+}} xmm0 {%k1} = (xmm0 * mem) + xmm1
; AVX256P-X64-NEXT:    retq
;
; AVX256P-X86-LABEL: test_int_x86_avx512_mask_vfmadd_ss_rm:
; AVX256P-X86:       # %bb.0:
; AVX256P-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; AVX256P-X86-NEXT:    kmovb {{[0-9]+}}(%esp), %k1
; AVX256P-X86-NEXT:    vfmadd132ss {{.*#+}} xmm0 {%k1} = (xmm0 * mem) + xmm1
; AVX256P-X86-NEXT:    retl
  %q = load float, ptr %ptr_b
  %vecinit.i = insertelement <4 x float> undef, float %q, i32 0
  %1 = extractelement <4 x float> %x0, i64 0
  %2 = extractelement <4 x float> %vecinit.i, i64 0
  %3 = extractelement <4 x float> %x1, i64 0
  %4 = call float @llvm.fma.f32(float %1, float %2, float %3)
  %5 = bitcast i8 %x3 to <8 x i1>
  %6 = extractelement <8 x i1> %5, i64 0
  %7 = select i1 %6, float %4, float %1
  %8 = insertelement <4 x float> %x0, float %7, i64 0
  ret <4 x float> %8
}
declare <2 x double> @llvm.x86.avx512.mask.rndscale.sd(<2 x double>, <2 x double>, <2 x double>, i8, i32, i32)
declare <4 x float> @llvm.x86.avx512.mask.rndscale.ss(<4 x float>, <4 x float>, <4 x float>, i8, i32, i32)
declare <4 x float> @llvm.x86.avx512.mask.sqrt.ss(<4 x float>, <4 x float>, <4 x float>, i8, i32) nounwind readnone
declare <2 x double> @llvm.x86.avx512.mask.sqrt.sd(<2 x double>, <2 x double>, <2 x double>, i8, i32) nounwind readnone
declare i32 @llvm.x86.avx512.cvttsd2usi(<2 x double>, i32) nounwind readnone
declare i32 @llvm.x86.avx512.cvttsd2si(<2 x double>, i32) nounwind readnone
declare i32 @llvm.x86.avx512.cvttss2si(<4 x float>, i32) nounwind readnone
declare i32 @llvm.x86.avx512.cvttss2usi(<4 x float>, i32) nounwind readnone
declare i32 @llvm.x86.avx512.vcvtsd2usi32(<2 x double>, i32) nounwind readnone
declare i32 @llvm.x86.avx512.vcvtsd2si32(<2 x double>, i32) nounwind readnone
declare i32 @llvm.x86.avx512.vcvtss2usi32(<4 x float>, i32) nounwind readnone
declare i32 @llvm.x86.avx512.vcvtss2si32(<4 x float>, i32) nounwind readnone
declare void @llvm.masked.store.v4f32.p0(<4 x float>, ptr, i32, <4 x i1>) #1
declare <4 x float> @llvm.x86.avx512.mask.add.ss.round(<4 x float>, <4 x float>, <4 x float>, i8, i32) nounwind readnone
declare <2 x double> @llvm.x86.avx512.mask.add.sd.round(<2 x double>, <2 x double>, <2 x double>, i8, i32) nounwind readnone
declare <4 x float> @llvm.x86.avx512.mask.max.ss.round(<4 x float>, <4 x float>, <4 x float>, i8, i32) nounwind readnone
declare <2 x double> @llvm.x86.avx512.mask.max.sd.round(<2 x double>, <2 x double>, <2 x double>, i8, i32) nounwind readnone
declare <4 x float> @llvm.x86.avx512.cvtsi2ss32(<4 x float>, i32, i32) nounwind readnone
declare <4 x float> @llvm.x86.avx512.cvtusi2ss(<4 x float>, i32, i32) nounwind readnone
declare <4 x float> @llvm.x86.avx512.mask.getexp.ss(<4 x float>, <4 x float>, <4 x float>, i8, i32) nounwind readnone
declare <2 x double> @llvm.x86.avx512.mask.getexp.sd(<2 x double>, <2 x double>, <2 x double>, i8, i32) nounwind readnone
declare <2 x double> @llvm.x86.avx512.mask.getmant.sd(<2 x double>, <2 x double>, i32, <2 x double>, i8, i32)
declare <4 x float> @llvm.x86.avx512.mask.getmant.ss(<4 x float>, <4 x float>, i32, <4 x float>, i8, i32)
declare <2 x double> @llvm.x86.avx512.mask.cvtss2sd.round(<2 x double>, <4 x float>, <2 x double>, i8, i32)
declare <4 x float> @llvm.x86.avx512.mask.cvtsd2ss.round(<4 x float>, <2 x double>, <4 x float>, i8, i32)
declare <4 x float> @llvm.x86.avx512.mask.fixupimm.ss(<4 x float>, <4 x float>, <4 x i32>, i32, i8, i32)
declare <4 x float> @llvm.x86.avx512.maskz.fixupimm.ss(<4 x float>, <4 x float>, <4 x i32>, i32, i8, i32)
declare <2 x double> @llvm.x86.avx512.mask.fixupimm.sd(<2 x double>, <2 x double>, <2 x i64>, i32, i8, i32)
declare <2 x double> @llvm.x86.avx512.maskz.fixupimm.sd(<2 x double>, <2 x double>, <2 x i64>, i32, i8, i32)
declare double @llvm.fma.f64(double, double, double) #1
declare double @llvm.x86.avx512.vfmadd.f64(double, double, double, i32) #0
declare float @llvm.fma.f32(float, float, float) #1
declare float @llvm.x86.avx512.vfmadd.f32(float, float, float, i32) #0
