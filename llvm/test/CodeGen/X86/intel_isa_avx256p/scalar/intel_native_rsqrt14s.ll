; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_avx256p
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx256p | FileCheck %s

define float @test_native_rsqrt14_ss(float %data) #0 {
; CHECK-LABEL: test_native_rsqrt14_ss:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vrsqrt14ss %xmm0, %xmm0, %xmm0
; CHECK-NEXT:    retq
      %sqrt = tail call float @llvm.sqrt.f32(float %data)
      %div = fdiv fast float 1.0, %sqrt
      ret float %div
  }

define float @test_native_rsqrt14_ss_acc_bit14(float %data) #1 {
; CHECK-LABEL: test_native_rsqrt14_ss_acc_bit14:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vrsqrt14ss %xmm0, %xmm0, %xmm0
; CHECK-NEXT:    retq
      %sqrt = tail call float @llvm.sqrt.f32(float %data)
      %div = fdiv fast float 1.0, %sqrt
      ret float %div
  }

define float @test_native_div_sqrt14_ss(float %a, float %b) #0 {
; CHECK-LABEL: test_native_div_sqrt14_ss:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vdivss %xmm0, %xmm1, %xmm0
; CHECK-NEXT:    vrsqrt14ss %xmm0, %xmm0, %xmm0
; CHECK-NEXT:    retq
    %div = fdiv fast float %a, %b
    %sqrt = tail call fast float @llvm.sqrt.f32(float %div)
    ret float %sqrt
  }

define float @test_native_div_sqrt14_ss_acc_bit14(float %a, float %b) #1 {
; CHECK-LABEL: test_native_div_sqrt14_ss_acc_bit14:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vdivss %xmm0, %xmm1, %xmm0
; CHECK-NEXT:    vrsqrt14ss %xmm0, %xmm0, %xmm0
; CHECK-NEXT:    retq
    %div = fdiv fast float %a, %b
    %sqrt = tail call fast float @llvm.sqrt.f32(float %div)
    ret float %sqrt
  }
declare float @llvm.sqrt.f32(float)

attributes #0 = { "reciprocal-estimates"="sqrtf:0,vec-sqrtf:0" }
attributes #1 = { "imf-accuracy-bits-sqrt"="11" }
