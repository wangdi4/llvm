# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc %s -run-pass x86-fixup-bw-insts -mtriple=x86_64-unknown-unknown -o - | FileCheck %s

# Make sure we can convert 16-bit arithmetic instructions with 16-bit immediates
# into 32 instructions with 32-bit immediates. The test has been manually
# altered from what would be generated by the IR below.

--- |
  ; ModuleID = 'intel-fixup-bw-inst-arith.ll'
  source_filename = "intel-fixup-bw-inst-arith.ll"
  target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"

  define void @add(i16* %x, i16* %y, i16 %z) {
    %a = load i16, i16* %x
    %b = add i16 %a, 2
    store i16 %z, i16* %y
    store i16 %b, i16* %x
    ret void
  }

  define void @sub(i16* %x, i16* %y, i16 %z) {
    %a = load i16, i16* %x
    %b = add i16 %a, 128
    store i16 %z, i16* %y
    store i16 %b, i16* %x
    ret void
  }

  define void @and(i16* %x, i16* %y, i16 %z) {
    %a = load i16, i16* %x
    %b = and i16 %a, -2
    store i16 %z, i16* %y
    store i16 %b, i16* %x
    ret void
  }

  define void @or(i16* %x, i16* %y, i16 %z) {
    %a = load i16, i16* %x
    %b = or i16 %a, 1
    store i16 %z, i16* %y
    store i16 %b, i16* %x
    ret void
  }

  define void @xor(i16* %x, i16* %y, i16 %z) {
    %a = load i16, i16* %x
    %b = xor i16 %a, 1
    store i16 %z, i16* %y
    store i16 %b, i16* %x
    ret void
  }

...
---
name:            add
alignment:       4
tracksRegLiveness: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$edx' }
frameInfo:
  maxCallFrameSize: 0
body:             |
  bb.0 (%ir-block.0):
    liveins: $edx, $rdi, $rsi

    ; CHECK-LABEL: name: add
    ; CHECK: liveins: $edx, $rdi, $rsi
    ; CHECK: $eax = MOVZX32rm16 renamable $rdi, 1, $noreg, 0, $noreg :: (load (s16) from %ir.x)
    ; CHECK: $eax = ADD32ri undef $eax, 2, implicit-def $eflags, implicit $ax, implicit-def dead $eflags
    ; CHECK: MOV16mr killed renamable $rsi, 1, $noreg, 0, $noreg, renamable $dx, implicit killed $edx :: (store (s16) into %ir.y)
    ; CHECK: MOV16mr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $ax :: (store (s16) into %ir.x)
    ; CHECK: RETQ
    renamable $ax = MOV16rm renamable $rdi, 1, $noreg, 0, $noreg :: (load 2 from %ir.x)
    renamable $ax = ADD16ri killed renamable $ax, 2, implicit-def dead $eflags
    MOV16mr killed renamable $rsi, 1, $noreg, 0, $noreg, renamable $dx, implicit killed $edx :: (store 2 into %ir.y)
    MOV16mr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $ax :: (store 2 into %ir.x)
    RETQ

...
---
name:            sub
alignment:       4
tracksRegLiveness: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$edx' }
frameInfo:
  maxCallFrameSize: 0
body:             |
  bb.0 (%ir-block.0):
    liveins: $edx, $rdi, $rsi

    ; CHECK-LABEL: name: sub
    ; CHECK: liveins: $edx, $rdi, $rsi
    ; CHECK: $eax = MOVZX32rm16 renamable $rdi, 1, $noreg, 0, $noreg :: (load (s16) from %ir.x)
    ; CHECK: $eax = SUB32ri undef $eax, 2, implicit-def $eflags, implicit $ax, implicit-def dead $eflags
    ; CHECK: MOV16mr killed renamable $rsi, 1, $noreg, 0, $noreg, renamable $dx, implicit killed $edx :: (store (s16) into %ir.y)
    ; CHECK: MOV16mr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $ax :: (store (s16) into %ir.x)
    ; CHECK: RETQ
    renamable $ax = MOV16rm renamable $rdi, 1, $noreg, 0, $noreg :: (load 2 from %ir.x)
    renamable $ax = SUB16ri killed renamable $ax, 2, implicit-def dead $eflags
    MOV16mr killed renamable $rsi, 1, $noreg, 0, $noreg, renamable $dx, implicit killed $edx :: (store 2 into %ir.y)
    MOV16mr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $ax :: (store 2 into %ir.x)
    RETQ

...
---
name:            and
alignment:       4
tracksRegLiveness: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$edx' }
frameInfo:
  maxCallFrameSize: 0
body:             |
  bb.0 (%ir-block.0):
    liveins: $edx, $rdi, $rsi

    ; CHECK-LABEL: name: and
    ; CHECK: liveins: $edx, $rdi, $rsi
    ; CHECK: $eax = MOVZX32rm16 renamable $rdi, 1, $noreg, 0, $noreg :: (load (s16) from %ir.x)
    ; CHECK: $eax = AND32ri undef $eax, -2, implicit-def $eflags, implicit $ax, implicit-def dead $eflags
    ; CHECK: MOV16mr killed renamable $rsi, 1, $noreg, 0, $noreg, renamable $dx, implicit killed $edx :: (store (s16) into %ir.y)
    ; CHECK: MOV16mr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $ax :: (store (s16) into %ir.x)
    ; CHECK: RETQ
    renamable $ax = MOV16rm renamable $rdi, 1, $noreg, 0, $noreg :: (load 2 from %ir.x)
    renamable $ax = AND16ri killed renamable $ax, -2, implicit-def dead $eflags
    MOV16mr killed renamable $rsi, 1, $noreg, 0, $noreg, renamable $dx, implicit killed $edx :: (store 2 into %ir.y)
    MOV16mr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $ax :: (store 2 into %ir.x)
    RETQ

...
---
name:            or
alignment:       4
tracksRegLiveness: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$edx' }
frameInfo:
  maxCallFrameSize: 0
body:             |
  bb.0 (%ir-block.0):
    liveins: $edx, $rdi, $rsi

    ; CHECK-LABEL: name: or
    ; CHECK: liveins: $edx, $rdi, $rsi
    ; CHECK: $eax = MOVZX32rm16 renamable $rdi, 1, $noreg, 0, $noreg :: (load (s16) from %ir.x)
    ; CHECK: $eax = OR32ri undef $eax, 1, implicit-def $eflags, implicit $ax, implicit-def dead $eflags
    ; CHECK: MOV16mr killed renamable $rsi, 1, $noreg, 0, $noreg, renamable $dx, implicit killed $edx :: (store (s16) into %ir.y)
    ; CHECK: MOV16mr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $ax :: (store (s16) into %ir.x)
    ; CHECK: RETQ
    renamable $ax = MOV16rm renamable $rdi, 1, $noreg, 0, $noreg :: (load 2 from %ir.x)
    renamable $ax = OR16ri killed renamable $ax, 1, implicit-def dead $eflags
    MOV16mr killed renamable $rsi, 1, $noreg, 0, $noreg, renamable $dx, implicit killed $edx :: (store 2 into %ir.y)
    MOV16mr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $ax :: (store 2 into %ir.x)
    RETQ

...
---
name:            xor
alignment:       4
tracksRegLiveness: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$edx' }
frameInfo:
  maxCallFrameSize: 0
body:             |
  bb.0 (%ir-block.0):
    liveins: $edx, $rdi, $rsi

    ; CHECK-LABEL: name: xor
    ; CHECK: liveins: $edx, $rdi, $rsi
    ; CHECK: $eax = MOVZX32rm16 renamable $rdi, 1, $noreg, 0, $noreg :: (load (s16) from %ir.x)
    ; CHECK: $eax = XOR32ri undef $eax, 1, implicit-def $eflags, implicit $ax, implicit-def dead $eflags
    ; CHECK: MOV16mr killed renamable $rsi, 1, $noreg, 0, $noreg, renamable $dx, implicit killed $edx :: (store (s16) into %ir.y)
    ; CHECK: MOV16mr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $ax :: (store (s16) into %ir.x)
    ; CHECK: RETQ
    renamable $ax = MOV16rm renamable $rdi, 1, $noreg, 0, $noreg :: (load 2 from %ir.x)
    renamable $ax = XOR16ri killed renamable $ax, 1, implicit-def dead $eflags
    MOV16mr killed renamable $rsi, 1, $noreg, 0, $noreg, renamable $dx, implicit killed $edx :: (store 2 into %ir.y)
    MOV16mr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $ax :: (store 2 into %ir.x)
    RETQ

...
