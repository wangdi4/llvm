; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-- -mcpu=skylake | FileCheck %s
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; source code
; void foo(float* in, float* __restrict out, int n)
; {
;     int i;
;     for (i = 0; i < n; i++) {
;         out[i] = i + 2*in[i];
;     }
; }

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @foo(float* nocapture readonly %in, float* noalias nocapture %out, i32 %n) local_unnamed_addr #0 {
; CHECK-LABEL: foo:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    testl %edx, %edx
; CHECK-NEXT:    jle .LBB0_7
; CHECK-NEXT:  # %bb.1: # %for.body.preheader
; CHECK-NEXT:    movl %edx, %eax
; CHECK-NEXT:    movl $4294967280, %ecx # imm = 0xFFFFFFF0
; CHECK-NEXT:    andq %rax, %rcx
; CHECK-NEXT:    je .LBB0_4
; CHECK-NEXT:  # %bb.2: # %loop.20.preheader
; CHECK-NEXT:    xorl %edx, %edx
; CHECK-NEXT:    vmovdqa64 {{.*#+}} zmm0 = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
; CHECK-NEXT:    vbroadcastss {{.*#+}} zmm1 = [2.0E+0,2.0E+0,2.0E+0,2.0E+0,2.0E+0,2.0E+0,2.0E+0,2.0E+0,2.0E+0,2.0E+0,2.0E+0,2.0E+0,2.0E+0,2.0E+0,2.0E+0,2.0E+0]
; CHECK-NEXT:    .p2align 4, 0x90
; CHECK-NEXT:  .LBB0_3: # %loop.20
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    vpbroadcastd %edx, %zmm2
; CHECK-NEXT:    vpord %zmm0, %zmm2, %zmm2
; CHECK-NEXT:    vcvtdq2ps %zmm2, %zmm2
; CHECK-NEXT:    vfmadd231ps {{.*#+}} zmm2 = (zmm1 * mem) + zmm2
; CHECK-NEXT:    vmovups %zmm2, (%rsi,%rdx,4)
; CHECK-NEXT:    addq $16, %rdx
; CHECK-NEXT:    cmpq %rcx, %rdx
; CHECK-NEXT:    jb .LBB0_3
; CHECK-NEXT:  .LBB0_4: # %ifmerge.21
; CHECK-NEXT:    cmpq %rax, %rcx
; CHECK-NEXT:    jae .LBB0_7
; CHECK-NEXT:  # %bb.5: # %then.22
; CHECK-NEXT:    vmovss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; CHECK-NEXT:    .p2align 4, 0x90
; CHECK-NEXT:  .LBB0_6: # %loop.16
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    vcvtsi2ss %ecx, %xmm3, %xmm1
; CHECK-NEXT:    vfmadd231ss {{.*#+}} xmm1 = (xmm0 * mem) + xmm1
; CHECK-NEXT:    vmovss %xmm1, (%rsi,%rcx,4)
; CHECK-NEXT:    incq %rcx
; CHECK-NEXT:    cmpq %rcx, %rax
; CHECK-NEXT:    jne .LBB0_6
; CHECK-NEXT:  .LBB0_7: # %for.end
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
entry:
  %cmp8 = icmp sgt i32 %n, 0
  br i1 %cmp8, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  %wide.trip.count10 = zext i32 %n to i64
  %0 = and i64 %wide.trip.count10, 4294967280
  %hir.cmp.21.not = icmp eq i64 %0, 0
  br i1 %hir.cmp.21.not, label %ifmerge.21, label %loop.20

for.end:                                          ; preds = %loop.16, %ifmerge.21, %entry
  ret void

loop.20:                                          ; preds = %for.body.preheader, %loop.20
  %i1.i64.0 = phi i64 [ %nextivloop.20, %loop.20 ], [ 0, %for.body.preheader ]
  %1 = trunc i64 %i1.i64.0 to i32
  %2 = insertelement <16 x i32> undef, i32 %1, i32 0
  %3 = shufflevector <16 x i32> %2, <16 x i32> undef, <16 x i32> zeroinitializer
  %4 = or <16 x i32> %3, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5 = sitofp <16 x i32> %4 to <16 x float>
  %6 = getelementptr inbounds float, float* %in, i64 %i1.i64.0
  %7 = bitcast float* %6 to <16 x float>*
  %gepload = load <16 x float>, <16 x float>* %7, align 4, !tbaa !2
  %8 = fmul fast <16 x float> %gepload, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %9 = fadd fast <16 x float> %8, %5
  %10 = getelementptr inbounds float, float* %out, i64 %i1.i64.0
  %11 = bitcast float* %10 to <16 x float>*
  store <16 x float> %9, <16 x float>* %11, align 4, !tbaa !2
  %nextivloop.20 = add nuw nsw i64 %i1.i64.0, 16
  %condloop.20.not.not = icmp ult i64 %nextivloop.20, %0
  br i1 %condloop.20.not.not, label %loop.20, label %ifmerge.21, !llvm.loop !6

ifmerge.21:                                       ; preds = %loop.20, %for.body.preheader
  %hir.cmp.22 = icmp ult i64 %0, %wide.trip.count10
  br i1 %hir.cmp.22, label %then.22, label %for.end

then.22:                                          ; preds = %ifmerge.21
  %12 = add nsw i64 %wide.trip.count10, -1
  br label %loop.16

loop.16:                                          ; preds = %loop.16, %then.22
  %i1.i64.1 = phi i64 [ %0, %then.22 ], [ %nextivloop.16, %loop.16 ]
  %13 = trunc i64 %i1.i64.1 to i32
  %14 = sitofp i32 %13 to float
  %15 = getelementptr inbounds float, float* %in, i64 %i1.i64.1
  %gepload17 = load float, float* %15, align 4, !tbaa !2
  %16 = fmul fast float %gepload17, 2.000000e+00
  %17 = fadd fast float %16, %14
  %18 = getelementptr inbounds float, float* %out, i64 %i1.i64.1
  store float %17, float* %18, align 4, !tbaa !2
  %nextivloop.16 = add nuw nsw i64 %i1.i64.1, 1
  %condloop.16.not = icmp eq i64 %i1.i64.1, %12
  br i1 %condloop.16.not, label %for.end, label %loop.16, !llvm.loop !11
}

attributes #0 = { nofree norecurse nounwind uwtable "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "prefer-vector-width"="256" "stack-protector-buffer-size"="8" "target-cpu"="skylake-avx512" "target-features"="+adx,+aes,+avx,+avx2,+avx512bw,+avx512cd,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+clflushopt,+clwb,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+pku,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves" "unsafe-fp-math"="true" "use-soft-float"="false" }

!llvm.module.flags = !{!0}

!0 = !{i32 1, !"wchar_size", i32 4}
!2 = !{!3, !3, i64 0}
!3 = !{!"float", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = distinct !{!6, !7, !8, !9, !10}
!7 = !{!"llvm.loop.mustprogress"}
!8 = !{!"llvm.loop.vectorize.width", i32 1}
!9 = !{!"llvm.loop.interleave.count", i32 1}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !7, !12, !10, !8, !9}
!12 = !{!"llvm.loop.intel.loopcount_maximum", i32 15}
