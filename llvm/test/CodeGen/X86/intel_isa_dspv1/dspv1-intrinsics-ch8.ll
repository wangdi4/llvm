; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_dspv1
; RUN: llc < %s -verify-machineinstrs -mtriple=i686-unknown-unknown --show-mc-encoding -mattr=+dspv1 | FileCheck %s

define <4 x i32> @test_int_x86_dvpdpbuud(<4 x i32> %A, <16 x i8> %B, <16 x i8> %C) nounwind {
; CHECK-LABEL: test_int_x86_dvpdpbuud:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpdpbuud %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe8,0x70,0xc1,0xc2]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpdpbuud(<4 x i32> %A, <16 x i8> %B, <16 x i8> %C)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpdpbuud(<4 x i32> %A, <16 x i8> %B, <16 x i8> %C)

define <4 x i32> @test_int_x86_dvpdpbuuds(<4 x i32> %A, <16 x i8> %B, <16 x i8> %C) nounwind {
; CHECK-LABEL: test_int_x86_dvpdpbuuds:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpdpbuuds %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe8,0x70,0xc2,0xc2]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpdpbuuds(<4 x i32> %A, <16 x i8> %B, <16 x i8> %C)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpdpbuuds(<4 x i32> %A, <16 x i8> %B, <16 x i8> %C)

define <4 x i32> @test_int_x86_dvpdpbssd(<4 x i32> %A, <16 x i8> %B, <16 x i8> %C) nounwind {
; CHECK-LABEL: test_int_x86_dvpdpbssd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpdpbssd %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe8,0x73,0xc1,0xc2]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpdpbssd(<4 x i32> %A, <16 x i8> %B, <16 x i8> %C)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpdpbssd(<4 x i32> %A, <16 x i8> %B, <16 x i8> %C)

define <4 x i32> @test_int_x86_dvpdpbssds(<4 x i32> %A, <16 x i8> %B, <16 x i8> %C) nounwind {
; CHECK-LABEL: test_int_x86_dvpdpbssds:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpdpbssds %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe8,0x73,0xc2,0xc2]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpdpbssds(<4 x i32> %A, <16 x i8> %B, <16 x i8> %C)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpdpbssds(<4 x i32> %A, <16 x i8> %B, <16 x i8> %C)

define <4 x i32> @test_int_x86_dvpdpbusd(<4 x i32> %A, <4 x i32> %B, <4 x i32> %C) nounwind {
; CHECK-LABEL: test_int_x86_dvpdpbusd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpdpbusd %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe8,0x71,0xc1,0xc2]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.avx512.vpdpbusd.128(<4 x i32> %A, <4 x i32> %B, <4 x i32> %C)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.avx512.vpdpbusd.128(<4 x i32>, <4 x i32>, <4 x i32>)

define <4 x i32> @test_int_x86_dvpdpbusds(<4 x i32> %A, <4 x i32> %B, <4 x i32> %C) nounwind {
; CHECK-LABEL: test_int_x86_dvpdpbusds:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpdpbusds %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe8,0x71,0xc2,0xc2]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.avx512.vpdpbusds.128(<4 x i32> %A, <4 x i32> %B, <4 x i32> %C)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.avx512.vpdpbusds.128(<4 x i32>, <4 x i32>, <4 x i32>)

define <4 x i32> @test_int_x86_dvpdpbsud(<4 x i32> %A, <16 x i8> %B, <16 x i8> %C) nounwind {
; CHECK-LABEL: test_int_x86_dvpdpbsud:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpdpbsud %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe8,0x72,0xc1,0xc2]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpdpbsud(<4 x i32> %A, <16 x i8> %B, <16 x i8> %C)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpdpbsud(<4 x i32> %A, <16 x i8> %B, <16 x i8> %C)

define <4 x i32> @test_int_x86_dvpdpbsuds(<4 x i32> %A, <16 x i8> %B, <16 x i8> %C) nounwind {
; CHECK-LABEL: test_int_x86_dvpdpbsuds:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpdpbsuds %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe8,0x72,0xc2,0xc2]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpdpbsuds(<4 x i32> %A, <16 x i8> %B, <16 x i8> %C)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpdpbsuds(<4 x i32> %A, <16 x i8> %B, <16 x i8> %C)

define <4 x i32> @test_int_x86_dvpndpbssd(<4 x i32> %A, <16 x i8> %B, <16 x i8> %C) nounwind {
; CHECK-LABEL: test_int_x86_dvpndpbssd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpndpbssd %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe8,0xf2,0xde,0xc2]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpndpbssd(<4 x i32> %A, <16 x i8> %B, <16 x i8> %C)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpndpbssd(<4 x i32> %A, <16 x i8> %B, <16 x i8> %C)
