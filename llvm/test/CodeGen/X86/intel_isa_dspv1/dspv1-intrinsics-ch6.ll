; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_dspv1
; RUN: llc < %s -verify-machineinstrs -mtriple=i686-unknown-unknown --show-mc-encoding -mattr=+dspv1 | FileCheck %s --check-prefixes=X86

define <2 x i64> @test_int_x86_dvpmuluwdq(<8 x i16> %A, <4 x i32> %B) nounwind {
; X86-LABEL: test_int_x86_dvpmuluwdq:
; X86:       # %bb.0:
; X86-NEXT:    dvpmuluwdq $127, %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe3,0xfb,0xa4,0xc1,0x7f]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <2 x i64> @llvm.x86.dvpmuluwdq(<8 x i16> %A, <4 x i32> %B, i32 127)
  ret <2 x i64> %ret
}
declare <2 x i64> @llvm.x86.dvpmuluwdq(<8 x i16> %A, <4 x i32> %B, i32 %C)

define <2 x i64> @test_int_x86_dvpmulwdq(<8 x i16> %A, <4 x i32> %B) nounwind {
; X86-LABEL: test_int_x86_dvpmulwdq:
; X86:       # %bb.0:
; X86-NEXT:    dvpmulwdq $127, %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe3,0xfa,0xa4,0xc1,0x7f]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <2 x i64> @llvm.x86.dvpmulwdq(<8 x i16> %A, <4 x i32> %B, i32 127)
  ret <2 x i64> %ret
}
declare <2 x i64> @llvm.x86.dvpmulwdq(<8 x i16> %A, <4 x i32> %B, i32 %C)

define <2 x i64> @test_int_x86_dvpdpwduuq(<2 x i64> %A, <8 x i16> %B, <4 x i32> %C) nounwind {
; X86-LABEL: test_int_x86_dvpdpwduuq:
; X86:       # %bb.0:
; X86-NEXT:    dvpdpwduuq $127, %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe3,0xf2,0xa6,0xc2,0x7f]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <2 x i64> @llvm.x86.dvpdpwduuq(<2 x i64> %A, <8 x i16> %B, <4 x i32> %C, i32 127)
  ret <2 x i64> %ret
}
declare <2 x i64> @llvm.x86.dvpdpwduuq(<2 x i64> %A, <8 x i16> %B, <4 x i32> %C, i32 %D)

define <2 x i64> @test_int_x86_dvpdpwdssq(<2 x i64> %A, <8 x i16> %B, <4 x i32> %C) nounwind {
; X86-LABEL: test_int_x86_dvpdpwdssq:
; X86:       # %bb.0:
; X86-NEXT:    dvpdpwdssq $127, %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe3,0xf3,0xa6,0xc2,0x7f]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <2 x i64> @llvm.x86.dvpdpwdssq(<2 x i64> %A, <8 x i16> %B, <4 x i32> %C, i32 127)
  ret <2 x i64> %ret
}
declare <2 x i64> @llvm.x86.dvpdpwdssq(<2 x i64> %A, <8 x i16> %B, <4 x i32> %C, i32 %D)

define <4 x i32> @test_int_x86_dvpcr2bfrsdre(<4 x i32> %A, <4 x i32> %B, <8 x i16> %C) nounwind {
; X86-LABEL: test_int_x86_dvpcr2bfrsdre:
; X86:       # %bb.0:
; X86-NEXT:    dvpcr2bfrsdre $127, %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe3,0x73,0xa5,0xc2,0x7f]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpcr2bfrsdre(<4 x i32> %A, <4 x i32> %B, <8 x i16> %C, i32 127)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpcr2bfrsdre(<4 x i32> %A, <4 x i32> %B, <8 x i16> %C, i32 %D)

define <4 x i32> @test_int_x86_dvpcr2bfrsdimm(<4 x i32> %A, <4 x i32> %B, <8 x i16> %C) nounwind {
; X86-LABEL: test_int_x86_dvpcr2bfrsdimm:
; X86:       # %bb.0:
; X86-NEXT:    dvpcr2bfrsdimm $127, %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe3,0x72,0xa5,0xc2,0x7f]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpcr2bfrsdimm(<4 x i32> %A, <4 x i32> %B, <8 x i16> %C, i32 127)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpcr2bfrsdimm(<4 x i32> %A, <4 x i32> %B, <8 x i16> %C, i32 %D)

