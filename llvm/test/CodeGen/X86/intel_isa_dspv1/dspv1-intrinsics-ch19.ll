; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_dspv1
; RUN: llc < %s -verify-machineinstrs -mtriple=i686-unknown-unknown --show-mc-encoding -mattr=+dspv1 | FileCheck %s

define <16 x i8> @test_int_x86_dvpalignr(<16 x i8> %A, <16 x i8> %B) nounwind {
; CHECK-LABEL: test_int_x86_dvpalignr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpalignr $2, %xmm0, %xmm1, %xmm0 # encoding: [0xc4,0xe3,0x70,0xa7,0xc0,0x02]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = shufflevector <16 x i8> %A, <16 x i8> %B, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  ret <16 x i8> %ret
}

define <16 x i8> @test_int_x86_dvpmaxsb(<16 x i8> %A, <16 x i8> %B) nounwind {
; CHECK-LABEL: test_int_x86_dvpmaxsb:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpmaxsb %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe8,0x78,0xd1,0xc1]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <16 x i8> @llvm.smax.v16i8(<16 x i8> %A, <16 x i8> %B)
  ret <16 x i8> %ret
}
declare <16 x i8> @llvm.smax.v16i8(<16 x i8> %A, <16 x i8> %B)

define <16 x i8> @test_int_x86_dvpmaxub(<16 x i8> %A, <16 x i8> %B) nounwind {
; CHECK-LABEL: test_int_x86_dvpmaxub:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpmaxub %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe8,0x79,0xd1,0xc1]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <16 x i8> @llvm.umax.v16i8(<16 x i8> %A, <16 x i8> %B)
  ret <16 x i8> %ret
}
declare <16 x i8> @llvm.umax.v16i8(<16 x i8> %A, <16 x i8> %B)

define <8 x i16> @test_int_x86_dvpmaxsw(<8 x i16> %A, <8 x i16> %B) nounwind {
; CHECK-LABEL: test_int_x86_dvpmaxsw:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpmaxsw %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe8,0xf8,0xd1,0xc1]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <8 x i16> @llvm.smax.v8i16(<8 x i16> %A, <8 x i16> %B)
  ret <8 x i16> %ret
}
declare <8 x i16> @llvm.smax.v8i16(<8 x i16> %A, <8 x i16> %B)

define <4 x i32> @test_int_x86_dvpmaxsd(<4 x i32> %A, <4 x i32> %B) nounwind {
; CHECK-LABEL: test_int_x86_dvpmaxsd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpmaxsd %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe8,0x7a,0xd1,0xc1]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.smax.v4i32(<4 x i32> %A, <4 x i32> %B)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.smax.v4i32(<4 x i32> %A, <4 x i32> %B)

define <8 x i16> @test_int_x86_dvpmaxuw(<8 x i16> %A, <8 x i16> %B) nounwind {
; CHECK-LABEL: test_int_x86_dvpmaxuw:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpmaxuw %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe8,0xf9,0xd1,0xc1]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <8 x i16> @llvm.umax.v8i16(<8 x i16> %A, <8 x i16> %B)
  ret <8 x i16> %ret
}
declare <8 x i16> @llvm.umax.v8i16(<8 x i16> %A, <8 x i16> %B)

define <4 x i32> @test_int_x86_dvpmaxud(<4 x i32> %A, <4 x i32> %B) nounwind {
; CHECK-LABEL: test_int_x86_dvpmaxud:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpmaxud %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe8,0x7b,0xd1,0xc1]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.umax.v4i32(<4 x i32> %A, <4 x i32> %B)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.umax.v4i32(<4 x i32> %A, <4 x i32> %B)

define <16 x i8> @test_int_x86_dvpminsb(<16 x i8> %A, <16 x i8> %B) nounwind {
; CHECK-LABEL: test_int_x86_dvpminsb:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpminsb %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe8,0x78,0xd2,0xc1]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <16 x i8> @llvm.smin.v16i8(<16 x i8> %A, <16 x i8> %B)
  ret <16 x i8> %ret
}
declare <16 x i8> @llvm.smin.v16i8(<16 x i8> %A, <16 x i8> %B)

define <16 x i8> @test_int_x86_dvpminub(<16 x i8> %A, <16 x i8> %B) nounwind {
; CHECK-LABEL: test_int_x86_dvpminub:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpminub %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe8,0x79,0xd2,0xc1]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <16 x i8> @llvm.umin.v16i8(<16 x i8> %A, <16 x i8> %B)
  ret <16 x i8> %ret
}
declare <16 x i8> @llvm.umin.v16i8(<16 x i8> %A, <16 x i8> %B)

define <8 x i16> @test_int_x86_dvpminsw(<8 x i16> %A, <8 x i16> %B) nounwind {
; CHECK-LABEL: test_int_x86_dvpminsw:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpminsw %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe8,0xf8,0xd2,0xc1]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <8 x i16> @llvm.smin.v8i16(<8 x i16> %A, <8 x i16> %B)
  ret <8 x i16> %ret
}
declare <8 x i16> @llvm.smin.v8i16(<8 x i16> %A, <8 x i16> %B)

define <4 x i32> @test_int_x86_dvpminsd(<4 x i32> %A, <4 x i32> %B) nounwind {
; CHECK-LABEL: test_int_x86_dvpminsd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpminsd %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe8,0x7a,0xd2,0xc1]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.smin.v4i32(<4 x i32> %A, <4 x i32> %B)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.smin.v4i32(<4 x i32> %A, <4 x i32> %B)

define <8 x i16> @test_int_x86_dvpminuw(<8 x i16> %A, <8 x i16> %B) nounwind {
; CHECK-LABEL: test_int_x86_dvpminuw:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpminuw %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe8,0xf9,0xd2,0xc1]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <8 x i16> @llvm.umin.v8i16(<8 x i16> %A, <8 x i16> %B)
  ret <8 x i16> %ret
}
declare <8 x i16> @llvm.umin.v8i16(<8 x i16> %A, <8 x i16> %B)

define <4 x i32> @test_int_x86_dvpminud(<4 x i32> %A, <4 x i32> %B) nounwind {
; CHECK-LABEL: test_int_x86_dvpminud:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpminud %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe8,0x7b,0xd2,0xc1]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.umin.v4i32(<4 x i32> %A, <4 x i32> %B)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.umin.v4i32(<4 x i32> %A, <4 x i32> %B)
