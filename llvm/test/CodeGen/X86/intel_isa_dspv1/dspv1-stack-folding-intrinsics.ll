; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_dspv1
; RUN: llc < %s -O3 -disable-peephole -verify-machineinstrs -mtriple=i686-unknown-unknown --show-mc-encoding -mattr=+dspv1 | FileCheck %s

define <8 x i16> @test_int_x86_dvplutsincosw128(<8 x i16> %A) {
; CHECK-LABEL: test_int_x86_dvplutsincosw128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    subl $16, %esp # encoding: [0x83,0xec,0x10]
; CHECK-NEXT:    .cfi_def_cfa_offset 20
; CHECK-NEXT:    movups %xmm0, (%esp) # 16-byte Spill
; CHECK-NEXT:    # encoding: [0x0f,0x11,0x04,0x24]
; CHECK-NEXT:    #APP
; CHECK-NEXT:    nop # encoding: [0x90]
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    dvplutsincosw $127, (%esp), %xmm0 # 16-byte Folded Reload
; CHECK-NEXT:    # encoding: [0xc4,0xe3,0x78,0xa3,0x04,0x24,0x7f]
; CHECK-NEXT:    addl $16, %esp # encoding: [0x83,0xc4,0x10]
; CHECK-NEXT:    .cfi_def_cfa_offset 4
; CHECK-NEXT:    retl # encoding: [0xc3]
  %1 = tail call <2 x i64> asm sideeffect "nop", "=x,~{xmm1},~{xmm2},~{xmm3},~{xmm4},~{xmm5},~{xmm6},~{xmm7},~{flags}"()
  %ret = call <8 x i16> @llvm.x86.dvplutsincosw128(<8 x i16> %A, i32 127)
  ret <8 x i16> %ret
}
declare <8 x i16> @llvm.x86.dvplutsincosw128(<8 x i16> %A, i32 %C)
