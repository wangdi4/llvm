; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_dspv1
; RUN: llc < %s -verify-machineinstrs -mtriple=i686-unknown-unknown --show-mc-encoding -mattr=+dspv1 | FileCheck %s

define <8 x i16> @test_int_x86_dvphaddlswuq(<8 x i16> %A) nounwind {
; CHECK-LABEL: test_int_x86_dvphaddlswuq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvphaddlswuq %xmm0, %xmm0 # encoding: [0xc4,0xe8,0xf9,0xd0,0xc0]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <8 x i16> @llvm.x86.dvphaddlswuq(<8 x i16> %A)
  ret <8 x i16> %ret
}
declare <8 x i16> @llvm.x86.dvphaddlswuq(<8 x i16> %A)

define <8 x i16> @test_int_x86_dvphaddlswq(<8 x i16> %A) nounwind {
; CHECK-LABEL: test_int_x86_dvphaddlswq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvphaddlswq %xmm0, %xmm0 # encoding: [0xc4,0xe8,0xf8,0xd0,0xc0]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <8 x i16> @llvm.x86.dvphaddlswq(<8 x i16> %A)
  ret <8 x i16> %ret
}
declare <8 x i16> @llvm.x86.dvphaddlswq(<8 x i16> %A)

define <4 x i32> @test_int_x86_dvphaddlsduq(<4 x i32> %A) nounwind {
; CHECK-LABEL: test_int_x86_dvphaddlsduq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvphaddlsduq %xmm0, %xmm0 # encoding: [0xc4,0xe8,0x79,0xd0,0xc0]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvphaddlsduq(<4 x i32> %A)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvphaddlsduq(<4 x i32> %A)

define <4 x i32> @test_int_x86_dvphaddlsdq(<4 x i32> %A) nounwind {
; CHECK-LABEL: test_int_x86_dvphaddlsdq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvphaddlsdq %xmm0, %xmm0 # encoding: [0xc4,0xe8,0x78,0xd0,0xc0]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvphaddlsdq(<4 x i32> %A)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvphaddlsdq(<4 x i32> %A)

