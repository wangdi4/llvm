; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_dspv1
; RUN: llc < %s -O0 -verify-machineinstrs -mtriple=i686-unknown-unknown --show-mc-encoding -mattr=+dspv1 | FileCheck %s

define <2 x i64> @test_int_x86_dvpmuludhhq(<4 x i32> %A, <4 x i32> %B) {
; CHECK-LABEL: test_int_x86_dvpmuludhhq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpmuludhhq %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe8,0xfa,0xcb,0xc1]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <2 x i64> @llvm.x86.dvpmuludhhq(<4 x i32> %A, <4 x i32> %B)
  ret <2 x i64> %ret
}
declare <2 x i64> @llvm.x86.dvpmuludhhq(<4 x i32> %A, <4 x i32> %B)

define <2 x i64> @test_int_x86_dvpmuldhhq(<4 x i32> %A, <4 x i32> %B) {
; CHECK-LABEL: test_int_x86_dvpmuldhhq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpmuldhhq %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe8,0xfa,0xcc,0xc1]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <2 x i64> @llvm.x86.dvpmuldhhq(<4 x i32> %A, <4 x i32> %B)
  ret <2 x i64> %ret
}
declare <2 x i64> @llvm.x86.dvpmuldhhq(<4 x i32> %A, <4 x i32> %B)

define <2 x i64> @test_int_x86_dvpnmacdhhq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C) {
; CHECK-LABEL: test_int_x86_dvpnmacdhhq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpnmacdhhq %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe8,0xf2,0xec,0xc2]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <2 x i64> @llvm.x86.dvpnmacdhhq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C)
  ret <2 x i64> %ret
}
declare <2 x i64> @llvm.x86.dvpnmacdhhq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C)

define <2 x i64> @test_int_x86_dvpmsubadddllq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C) {
; CHECK-LABEL: test_int_x86_dvpmsubadddllq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpmsubadddllq %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe8,0xf0,0xe7,0xc2]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <2 x i64> @llvm.x86.dvpmsubadddllq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C)
  ret <2 x i64> %ret
}
declare <2 x i64> @llvm.x86.dvpmsubadddllq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C)

define <2 x i64> @test_int_x86_dvpmuludllq(<4 x i32> %A, <4 x i32> %B) nounwind {
; CHECK-LABEL: test_int_x86_dvpmuludllq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpmuludllq %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe8,0xfb,0xcb,0xc1]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <2 x i64> @llvm.x86.dvpmuludllq(<4 x i32> %A, <4 x i32> %B)
  ret <2 x i64> %ret
}
declare <2 x i64> @llvm.x86.dvpmuludllq(<4 x i32> %A, <4 x i32> %B)

define <2 x i64> @test_int_x86_dvpmuldllq(<4 x i32> %A, <4 x i32> %B) nounwind {
; CHECK-LABEL: test_int_x86_dvpmuldllq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpmuldllq %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe8,0xfb,0xcc,0xc1]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <2 x i64> @llvm.x86.dvpmuldllq(<4 x i32> %A, <4 x i32> %B)
  ret <2 x i64> %ret
}
declare <2 x i64> @llvm.x86.dvpmuldllq(<4 x i32> %A, <4 x i32> %B)

define <4 x i32> @test_int_x86_dvpmuldfrs(<4 x i32> %A, <4 x i32> %B) {
; CHECK-LABEL: test_int_x86_dvpmuldfrs:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpmuldfrs %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe8,0x7b,0xca,0xc1]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpmuldfrs(<4 x i32> %A, <4 x i32> %B)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpmuldfrs(<4 x i32> %A, <4 x i32> %B)

define <4 x i32> @test_int_x86_dvpmulds(<4 x i32> %A, <4 x i32> %B) {
; CHECK-LABEL: test_int_x86_dvpmulds:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpmulds %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe8,0x7b,0xcd,0xc1]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpmulds(<4 x i32> %A, <4 x i32> %B)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpmulds(<4 x i32> %A, <4 x i32> %B)

define <2 x i64> @test_int_x86_dvpmacudllsq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C) {
; CHECK-LABEL: test_int_x86_dvpmacudllsq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpmacudllsq %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe8,0xf0,0xeb,0xc2]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <2 x i64> @llvm.x86.dvpmacudllsq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C)
  ret <2 x i64> %ret
}
declare <2 x i64> @llvm.x86.dvpmacudllsq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C)

define <2 x i64> @test_int_x86_dvpmacudhhsq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C) {
; CHECK-LABEL: test_int_x86_dvpmacudhhsq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpmacudhhsq %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe8,0xf2,0xeb,0xc2]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <2 x i64> @llvm.x86.dvpmacudhhsq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C)
  ret <2 x i64> %ret
}
declare <2 x i64> @llvm.x86.dvpmacudhhsq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C)

define <2 x i64> @test_int_x86_dvpmacudllq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C) {
; CHECK-LABEL: test_int_x86_dvpmacudllq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpmacudllq %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe8,0xf0,0xea,0xc2]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <2 x i64> @llvm.x86.dvpmacudllq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C)
  ret <2 x i64> %ret
}
declare <2 x i64> @llvm.x86.dvpmacudllq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C)

define <2 x i64> @test_int_x86_dvpmacudhhq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C) {
; CHECK-LABEL: test_int_x86_dvpmacudhhq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpmacudhhq %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe8,0xf2,0xea,0xc2]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <2 x i64> @llvm.x86.dvpmacudhhq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C)
  ret <2 x i64> %ret
}
declare <2 x i64> @llvm.x86.dvpmacudhhq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C)

define <2 x i64> @test_int_x86_dvpmacdllsq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C) {
; CHECK-LABEL: test_int_x86_dvpmacdllsq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpmacdllsq %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe8,0xf0,0xe9,0xc2]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <2 x i64> @llvm.x86.dvpmacdllsq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C)
  ret <2 x i64> %ret
}
declare <2 x i64> @llvm.x86.dvpmacdllsq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C)

define <2 x i64> @test_int_x86_dvpmacdhhsq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C) {
; CHECK-LABEL: test_int_x86_dvpmacdhhsq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpmacdhhsq %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe8,0xf2,0xe9,0xc2]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <2 x i64> @llvm.x86.dvpmacdhhsq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C)
  ret <2 x i64> %ret
}
declare <2 x i64> @llvm.x86.dvpmacdhhsq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C)

define <2 x i64> @test_int_x86_dvpmacdllq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C) {
; CHECK-LABEL: test_int_x86_dvpmacdllq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpmacdllq %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe8,0xf0,0xe8,0xc2]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <2 x i64> @llvm.x86.dvpmacdllq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C)
  ret <2 x i64> %ret
}
declare <2 x i64> @llvm.x86.dvpmacdllq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C)

define <2 x i64> @test_int_x86_dvpmacdhhq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C) {
; CHECK-LABEL: test_int_x86_dvpmacdhhq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpmacdhhq %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe8,0xf2,0xe8,0xc2]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <2 x i64> @llvm.x86.dvpmacdhhq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C)
  ret <2 x i64> %ret
}
declare <2 x i64> @llvm.x86.dvpmacdhhq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C)

define <2 x i64> @test_int_x86_dvpnmacdllsq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C) {
; CHECK-LABEL: test_int_x86_dvpnmacdllsq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpnmacdllsq %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe8,0xf0,0xed,0xc2]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <2 x i64> @llvm.x86.dvpnmacdllsq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C)
  ret <2 x i64> %ret
}
declare <2 x i64> @llvm.x86.dvpnmacdllsq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C)

define <2 x i64> @test_int_x86_dvpnmacdhhsq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C) {
; CHECK-LABEL: test_int_x86_dvpnmacdhhsq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpnmacdhhsq %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe8,0xf2,0xed,0xc2]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <2 x i64> @llvm.x86.dvpnmacdhhsq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C)
  ret <2 x i64> %ret
}
declare <2 x i64> @llvm.x86.dvpnmacdhhsq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C)

define <2 x i64> @test_int_x86_dvpnmacdllq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C) {
; CHECK-LABEL: test_int_x86_dvpnmacdllq:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpnmacdllq %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe8,0xf0,0xec,0xc2]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <2 x i64> @llvm.x86.dvpnmacdllq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C)
  ret <2 x i64> %ret
}
declare <2 x i64> @llvm.x86.dvpnmacdllq(<2 x i64> %A, <4 x i32> %B, <4 x i32> %C)

