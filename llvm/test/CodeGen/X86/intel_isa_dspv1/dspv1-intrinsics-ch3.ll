; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_dspv1
; RUN: llc < %s -verify-machineinstrs -mtriple=i686-unknown-unknown --show-mc-encoding -mattr=+dspv1 | FileCheck %s --check-prefixes=X86

define <2 x i64> @test_int_x86_dvpdpwuuq(<2 x i64> %A, <8 x i16> %B, <8 x i16> %C) nounwind {
; X86-LABEL: test_int_x86_dvpdpwuuq:
; X86:       # %bb.0:
; X86-NEXT:    dvpdpwuuq %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe8,0xf0,0xc0,0xc2]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <2 x i64> @llvm.x86.dvpdpwuuq(<2 x i64> %A, <8 x i16> %B, <8 x i16> %C)
  ret <2 x i64> %ret
}
declare <2 x i64> @llvm.x86.dvpdpwuuq(<2 x i64> %A, <8 x i16> %B, <8 x i16> %C)

define <2 x i64> @test_int_x86_dvpdpwssq(<2 x i64> %A, <8 x i16> %B, <8 x i16> %C) nounwind {
; X86-LABEL: test_int_x86_dvpdpwssq:
; X86:       # %bb.0:
; X86-NEXT:    dvpdpwssq %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe8,0xf3,0xc0,0xc2]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <2 x i64> @llvm.x86.dvpdpwssq(<2 x i64> %A, <8 x i16> %B, <8 x i16> %C)
  ret <2 x i64> %ret
}
declare <2 x i64> @llvm.x86.dvpdpwssq(<2 x i64> %A, <8 x i16> %B, <8 x i16> %C)

define <2 x i64> @test_int_x86_dvpdpwsuq(<2 x i64> %A, <8 x i16> %B, <8 x i16> %C) nounwind {
; X86-LABEL: test_int_x86_dvpdpwsuq:
; X86:       # %bb.0:
; X86-NEXT:    dvpdpwsuq %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe8,0xf2,0xc0,0xc2]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <2 x i64> @llvm.x86.dvpdpwsuq(<2 x i64> %A, <8 x i16> %B, <8 x i16> %C)
  ret <2 x i64> %ret
}
declare <2 x i64> @llvm.x86.dvpdpwsuq(<2 x i64> %A, <8 x i16> %B, <8 x i16> %C)

define <2 x i64> @test_int_x86_dvpdpwusq(<2 x i64> %A, <8 x i16> %B, <8 x i16> %C) nounwind {
; X86-LABEL: test_int_x86_dvpdpwusq:
; X86:       # %bb.0:
; X86-NEXT:    dvpdpwusq %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe8,0xf1,0xc0,0xc2]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <2 x i64> @llvm.x86.dvpdpwusq(<2 x i64> %A, <8 x i16> %B, <8 x i16> %C)
  ret <2 x i64> %ret
}
declare <2 x i64> @llvm.x86.dvpdpwusq(<2 x i64> %A, <8 x i16> %B, <8 x i16> %C)

define <2 x i64> @test_int_x86_dvpndpwssq(<2 x i64> %A, <8 x i16> %B, <8 x i16> %C) nounwind {
; X86-LABEL: test_int_x86_dvpndpwssq:
; X86:       # %bb.0:
; X86-NEXT:    dvpndpwssq %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe8,0xf0,0xdd,0xc2]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <2 x i64> @llvm.x86.dvpndpwssq(<2 x i64> %A, <8 x i16> %B, <8 x i16> %C)
  ret <2 x i64> %ret
}
declare <2 x i64> @llvm.x86.dvpndpwssq(<2 x i64> %A, <8 x i16> %B, <8 x i16> %C)

define <8 x i16> @test_int_x86_dvpcmulwrs(<8 x i16> %A, <8 x i16> %B) nounwind {
; X86-LABEL: test_int_x86_dvpcmulwrs:
; X86:       # %bb.0:
; X86-NEXT:    dvpcmulwrs $127, %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe3,0xf8,0xa5,0xc1,0x7f]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <8 x i16> @llvm.x86.dvpcmulwrs(<8 x i16> %A, <8 x i16> %B, i32 127)
  ret <8 x i16> %ret
}
declare <8 x i16> @llvm.x86.dvpcmulwrs(<8 x i16> %A, <8 x i16> %B, i32 %C)

define <8 x i16> @test_int_x86_dvpccmulwrs(<8 x i16> %A, <8 x i16> %B) nounwind {
; X86-LABEL: test_int_x86_dvpccmulwrs:
; X86:       # %bb.0:
; X86-NEXT:    dvpccmulwrs $127, %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe3,0xf9,0xa5,0xc1,0x7f]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <8 x i16> @llvm.x86.dvpccmulwrs(<8 x i16> %A, <8 x i16> %B, i32 127)
  ret <8 x i16> %ret
}
declare <8 x i16> @llvm.x86.dvpccmulwrs(<8 x i16> %A, <8 x i16> %B, i32 %C)

define <2 x i64> @test_int_x86_dvpcdpwqre(<2 x i64> %A, <8 x i16> %B, <8 x i16> %C) nounwind {
; X86-LABEL: test_int_x86_dvpcdpwqre:
; X86:       # %bb.0:
; X86-NEXT:    dvpcdpwqre %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe8,0xf3,0xd6,0xc2]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <2 x i64> @llvm.x86.dvpcdpwqre(<2 x i64> %A, <8 x i16> %B, <8 x i16> %C)
  ret <2 x i64> %ret
}
declare <2 x i64> @llvm.x86.dvpcdpwqre(<2 x i64> %A, <8 x i16> %B, <8 x i16> %C)

define <2 x i64> @test_int_x86_dvpcdpwqimm(<2 x i64> %A, <8 x i16> %B, <8 x i16> %C) nounwind {
; X86-LABEL: test_int_x86_dvpcdpwqimm:
; X86:       # %bb.0:
; X86-NEXT:    dvpcdpwqimm %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe8,0xf2,0xd6,0xc2]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <2 x i64> @llvm.x86.dvpcdpwqimm(<2 x i64> %A, <8 x i16> %B, <8 x i16> %C)
  ret <2 x i64> %ret
}
declare <2 x i64> @llvm.x86.dvpcdpwqimm(<2 x i64> %A, <8 x i16> %B, <8 x i16> %C)

define <2 x i64> @test_int_x86_dvpncdpwqre(<2 x i64> %A, <8 x i16> %B, <8 x i16> %C) nounwind {
; X86-LABEL: test_int_x86_dvpncdpwqre:
; X86:       # %bb.0:
; X86-NEXT:    dvpncdpwqre %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe8,0xf3,0xd4,0xc2]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <2 x i64> @llvm.x86.dvpncdpwqre(<2 x i64> %A, <8 x i16> %B, <8 x i16> %C)
  ret <2 x i64> %ret
}
declare <2 x i64> @llvm.x86.dvpncdpwqre(<2 x i64> %A, <8 x i16> %B, <8 x i16> %C)

define <2 x i64> @test_int_x86_dvpncdpwqimm(<2 x i64> %A, <8 x i16> %B, <8 x i16> %C) nounwind {
; X86-LABEL: test_int_x86_dvpncdpwqimm:
; X86:       # %bb.0:
; X86-NEXT:    dvpncdpwqimm %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe8,0xf2,0xd4,0xc2]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <2 x i64> @llvm.x86.dvpncdpwqimm(<2 x i64> %A, <8 x i16> %B, <8 x i16> %C)
  ret <2 x i64> %ret
}
declare <2 x i64> @llvm.x86.dvpncdpwqimm(<2 x i64> %A, <8 x i16> %B, <8 x i16> %C)

define <2 x i64> @test_int_x86_dvpccdpwqimm(<2 x i64> %A, <8 x i16> %B, <8 x i16> %C) nounwind {
; X86-LABEL: test_int_x86_dvpccdpwqimm:
; X86:       # %bb.0:
; X86-NEXT:    dvpccdpwqimm %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe8,0xf2,0xd7,0xc2]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <2 x i64> @llvm.x86.dvpccdpwqimm(<2 x i64> %A, <8 x i16> %B, <8 x i16> %C)
  ret <2 x i64> %ret
}
declare <2 x i64> @llvm.x86.dvpccdpwqimm(<2 x i64> %A, <8 x i16> %B, <8 x i16> %C)

define <2 x i64> @test_int_x86_dvpnccdpwqimm(<2 x i64> %A, <8 x i16> %B, <8 x i16> %C) nounwind {
; X86-LABEL: test_int_x86_dvpnccdpwqimm:
; X86:       # %bb.0:
; X86-NEXT:    dvpnccdpwqimm %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe8,0xf2,0xd5,0xc2]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <2 x i64> @llvm.x86.dvpnccdpwqimm(<2 x i64> %A, <8 x i16> %B, <8 x i16> %C)
  ret <2 x i64> %ret
}
declare <2 x i64> @llvm.x86.dvpnccdpwqimm(<2 x i64> %A, <8 x i16> %B, <8 x i16> %C)

