; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_dspv1
; RUN: llc < %s -verify-machineinstrs -mtriple=i686-unknown-unknown --show-mc-encoding -mattr=+dspv1 | FileCheck %s --check-prefixes=X86

define <4 x i32> @test_int_x86_dvpsrard(<4 x i32> %A) nounwind {
; X86-LABEL: test_int_x86_dvpsrard:
; X86:       # %bb.0:
; X86-NEXT:    dvpsrard $127, %xmm0, %xmm0 # encoding: [0xc4,0xe3,0x7b,0xa2,0xc0,0x7f]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpsrard(<4 x i32> %A, i32 127)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpsrard(<4 x i32> %A, i32 %B)

define <4 x i32> @test_int_x86_dvpsravrd(<4 x i32> %A, <4 x i32> %B) nounwind {
; X86-LABEL: test_int_x86_dvpsravrd:
; X86:       # %bb.0:
; X86-NEXT:    dvpsravrd %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe8,0x7b,0xe2,0xc1]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpsravrd(<4 x i32> %A, <4 x i32> %B)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpsravrd(<4 x i32> %A, <4 x i32> %B)

define <4 x i32> @test_int_x86_dvpslvsd(<4 x i32> %A, <4 x i32> %B) nounwind {
; X86-LABEL: test_int_x86_dvpslvsd:
; X86:       # %bb.0:
; X86-NEXT:    dvpslvsd %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe8,0x7a,0xe2,0xc1]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpslvsd(<4 x i32> %A, <4 x i32> %B)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpslvsd(<4 x i32> %A, <4 x i32> %B)

define <4 x i32> @test_int_x86_dvpslsd(<4 x i32> %A) nounwind {
; X86-LABEL: test_int_x86_dvpslsd:
; X86:       # %bb.0:
; X86-NEXT:    dvpslsd $127, %xmm0, %xmm0 # encoding: [0xc4,0xe3,0x7a,0xa2,0xc0,0x7f]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpslsd(<4 x i32> %A, i32 127)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpslsd(<4 x i32> %A, i32 %B)

define <4 x i32> @test_int_x86_dvpsrrud(<4 x i32> %A) nounwind {
; X86-LABEL: test_int_x86_dvpsrrud:
; X86:       # %bb.0:
; X86-NEXT:    dvpsrrud $127, %xmm0, %xmm0 # encoding: [0xc4,0xe3,0x78,0xa2,0xc0,0x7f]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpsrrud(<4 x i32> %A, i32 127)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpsrrud(<4 x i32> %A, i32 %B)

define <4 x i32> @test_int_x86_dvpsrvrud(<4 x i32> %A, <4 x i32> %B) nounwind {
; X86-LABEL: test_int_x86_dvpsrvrud:
; X86:       # %bb.0:
; X86-NEXT:    dvpsrvrud %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe8,0x78,0xe2,0xc1]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpsrvrud(<4 x i32> %A, <4 x i32> %B)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpsrvrud(<4 x i32> %A, <4 x i32> %B)

define <4 x i32> @test_int_x86_dvpslsud(<4 x i32> %A) nounwind {
; X86-LABEL: test_int_x86_dvpslsud:
; X86:       # %bb.0:
; X86-NEXT:    dvpslsud $127, %xmm0, %xmm0 # encoding: [0xc4,0xe3,0x79,0xa2,0xc0,0x7f]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpslsud(<4 x i32> %A, i32 127)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpslsud(<4 x i32> %A, i32 %B)

define <4 x i32> @test_int_x86_dvpslvsud(<4 x i32> %A, <4 x i32> %B) nounwind {
; X86-LABEL: test_int_x86_dvpslvsud:
; X86:       # %bb.0:
; X86-NEXT:    dvpslvsud %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe8,0x79,0xe2,0xc1]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpslvsud(<4 x i32> %A, <4 x i32> %B)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpslvsud(<4 x i32> %A, <4 x i32> %B)

