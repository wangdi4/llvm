; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_dspv1
; RUN: llc < %s -verify-machineinstrs -mtriple=i686-unknown-unknown --show-mc-encoding -mattr=+dspv1 | FileCheck %s

define <4 x i32> @test_int_x86_dvpdpbwuud(<4 x i32> %A, <16 x i8> %B, <8 x i16> %C) nounwind {
; CHECK-LABEL: test_int_x86_dvpdpbwuud:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpdpbwuud $127, %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe3,0x70,0xa8,0xc2,0x7f]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpdpbwuud(<4 x i32> %A, <16 x i8> %B, <8 x i16> %C, i32 127)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpdpbwuud(<4 x i32> %A, <16 x i8> %B, <8 x i16> %C, i32 %D)

define <4 x i32> @test_int_x86_dvpdpbwuuds(<4 x i32> %A, <16 x i8> %B, <8 x i16> %C) nounwind {
; CHECK-LABEL: test_int_x86_dvpdpbwuuds:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpdpbwuuds $127, %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe3,0x70,0xa9,0xc2,0x7f]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpdpbwuuds(<4 x i32> %A, <16 x i8> %B, <8 x i16> %C, i32 127)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpdpbwuuds(<4 x i32> %A, <16 x i8> %B, <8 x i16> %C, i32 %D)

define <4 x i32> @test_int_x86_dvpdpbwssd(<4 x i32> %A, <16 x i8> %B, <8 x i16> %C) nounwind {
; CHECK-LABEL: test_int_x86_dvpdpbwssd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpdpbwssd $127, %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe3,0x73,0xa8,0xc2,0x7f]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpdpbwssd(<4 x i32> %A, <16 x i8> %B, <8 x i16> %C, i32 127)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpdpbwssd(<4 x i32> %A, <16 x i8> %B, <8 x i16> %C, i32 %D)

define <4 x i32> @test_int_x86_dvpdpbwssds(<4 x i32> %A, <16 x i8> %B, <8 x i16> %C) nounwind {
; CHECK-LABEL: test_int_x86_dvpdpbwssds:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpdpbwssds $127, %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe3,0x73,0xa9,0xc2,0x7f]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpdpbwssds(<4 x i32> %A, <16 x i8> %B, <8 x i16> %C, i32 127)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpdpbwssds(<4 x i32> %A, <16 x i8> %B, <8 x i16> %C, i32 %D)

define <4 x i32> @test_int_x86_dvpdpbwsud(<4 x i32> %A, <16 x i8> %B, <8 x i16> %C) nounwind {
; CHECK-LABEL: test_int_x86_dvpdpbwsud:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpdpbwsud $127, %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe3,0x72,0xa8,0xc2,0x7f]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpdpbwsud(<4 x i32> %A, <16 x i8> %B, <8 x i16> %C, i32 127)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpdpbwsud(<4 x i32> %A, <16 x i8> %B, <8 x i16> %C, i32 %D)

define <4 x i32> @test_int_x86_dvpdpbwsuds(<4 x i32> %A, <16 x i8> %B, <8 x i16> %C) nounwind {
; CHECK-LABEL: test_int_x86_dvpdpbwsuds:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpdpbwsuds $127, %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe3,0x72,0xa9,0xc2,0x7f]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpdpbwsuds(<4 x i32> %A, <16 x i8> %B, <8 x i16> %C, i32 127)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpdpbwsuds(<4 x i32> %A, <16 x i8> %B, <8 x i16> %C, i32 %D)

define <4 x i32> @test_int_x86_dvpdpbwusd(<4 x i32> %A, <16 x i8> %B, <8 x i16> %C) nounwind {
; CHECK-LABEL: test_int_x86_dvpdpbwusd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpdpbwusd $127, %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe3,0x71,0xa8,0xc2,0x7f]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpdpbwusd(<4 x i32> %A, <16 x i8> %B, <8 x i16> %C, i32 127)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpdpbwusd(<4 x i32> %A, <16 x i8> %B, <8 x i16> %C, i32 %D)

define <4 x i32> @test_int_x86_dvpdpbwusds(<4 x i32> %A, <16 x i8> %B, <8 x i16> %C) nounwind {
; CHECK-LABEL: test_int_x86_dvpdpbwusds:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dvpdpbwusds $127, %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe3,0x71,0xa9,0xc2,0x7f]
; CHECK-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpdpbwusds(<4 x i32> %A, <16 x i8> %B, <8 x i16> %C, i32 127)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpdpbwusds(<4 x i32> %A, <16 x i8> %B, <8 x i16> %C, i32 %D)

