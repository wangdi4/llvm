; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_dspv1
; RUN: llc < %s -verify-machineinstrs -mtriple=i686-unknown-unknown --show-mc-encoding -mattr=+dspv1 | FileCheck %s --check-prefixes=X86

define <8 x i16> @test_int_x86_dvpsadaccubws(<8 x i16> %A, <16 x i8> %B, <16 x i8> %C) nounwind {
; X86-LABEL: test_int_x86_dvpsadaccubws:
; X86:       # %bb.0:
; X86-NEXT:    dvpsadaccubws %xmm2, %xmm1, %xmm0 # encoding: [0xc4,0xe8,0xf3,0xdf,0xc2]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <8 x i16> @llvm.x86.dvpsadaccubws(<8 x i16> %A, <16 x i8> %B, <16 x i8> %C)
  ret <8 x i16> %ret
}
declare <8 x i16> @llvm.x86.dvpsadaccubws(<8 x i16> %A, <16 x i8> %B, <16 x i8> %C)

define <8 x i16> @test_int_x86_dvpsrrsuqw(<2 x i64> %A) nounwind {
; X86-LABEL: test_int_x86_dvpsrrsuqw:
; X86:       # %bb.0:
; X86-NEXT:    dvpsrrsuqw $127, %xmm0, %xmm0 # encoding: [0xc4,0xe3,0xf8,0xa0,0xc0,0x7f]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <8 x i16> @llvm.x86.dvpsrrsuqw(<2 x i64> %A, i32 127)
  ret <8 x i16> %ret
}
declare <8 x i16> @llvm.x86.dvpsrrsuqw(<2 x i64> %A, i32 %B)

define <8 x i16> @test_int_x86_dvpsrvrsuqw(<2 x i64> %A, <2 x i64> %B) nounwind {
; X86-LABEL: test_int_x86_dvpsrvrsuqw:
; X86:       # %bb.0:
; X86-NEXT:    dvpsrvrsuqw %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe8,0xf8,0xe0,0xc1]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <8 x i16> @llvm.x86.dvpsrvrsuqw(<2 x i64> %A, <2 x i64> %B)
  ret <8 x i16> %ret
}
declare <8 x i16> @llvm.x86.dvpsrvrsuqw(<2 x i64> %A, <2 x i64> %B)

define <8 x i16> @test_int_x86_dvpslrsuqw(<2 x i64> %A) nounwind {
; X86-LABEL: test_int_x86_dvpslrsuqw:
; X86:       # %bb.0:
; X86-NEXT:    dvpslrsuqw $127, %xmm0, %xmm0 # encoding: [0xc4,0xe3,0xf9,0xa0,0xc0,0x7f]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <8 x i16> @llvm.x86.dvpslrsuqw(<2 x i64> %A, i32 127)
  ret <8 x i16> %ret
}
declare <8 x i16> @llvm.x86.dvpslrsuqw(<2 x i64> %A, i32 %B)

define <8 x i16> @test_int_x86_dvpslvrsuqw(<2 x i64> %A, <2 x i64> %B) nounwind {
; X86-LABEL: test_int_x86_dvpslvrsuqw:
; X86:       # %bb.0:
; X86-NEXT:    dvpslvrsuqw %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe8,0xf9,0xe0,0xc1]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <8 x i16> @llvm.x86.dvpslvrsuqw(<2 x i64> %A, <2 x i64> %B)
  ret <8 x i16> %ret
}
declare <8 x i16> @llvm.x86.dvpslvrsuqw(<2 x i64> %A, <2 x i64> %B)

define <8 x i16> @test_int_x86_dvpsrarsqw(<2 x i64> %A) nounwind {
; X86-LABEL: test_int_x86_dvpsrarsqw:
; X86:       # %bb.0:
; X86-NEXT:    dvpsrarsqw $127, %xmm0, %xmm0 # encoding: [0xc4,0xe3,0xfb,0xa0,0xc0,0x7f]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <8 x i16> @llvm.x86.dvpsrarsqw(<2 x i64> %A, i32 127)
  ret <8 x i16> %ret
}
declare <8 x i16> @llvm.x86.dvpsrarsqw(<2 x i64> %A, i32 %B)

define <8 x i16> @test_int_x86_dvpsravrsqw(<2 x i64> %A, <2 x i64> %B) nounwind {
; X86-LABEL: test_int_x86_dvpsravrsqw:
; X86:       # %bb.0:
; X86-NEXT:    dvpsravrsqw %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe8,0xfb,0xe0,0xc1]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <8 x i16> @llvm.x86.dvpsravrsqw(<2 x i64> %A, <2 x i64> %B)
  ret <8 x i16> %ret
}
declare <8 x i16> @llvm.x86.dvpsravrsqw(<2 x i64> %A, <2 x i64> %B)

define <8 x i16> @test_int_x86_dvpslrsqw(<2 x i64> %A) nounwind {
; X86-LABEL: test_int_x86_dvpslrsqw:
; X86:       # %bb.0:
; X86-NEXT:    dvpslrsqw $127, %xmm0, %xmm0 # encoding: [0xc4,0xe3,0xfa,0xa0,0xc0,0x7f]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <8 x i16> @llvm.x86.dvpslrsqw(<2 x i64> %A, i32 127)
  ret <8 x i16> %ret
}
declare <8 x i16> @llvm.x86.dvpslrsqw(<2 x i64> %A, i32 %B)

define <8 x i16> @test_int_x86_dvpslvrsqw(<2 x i64> %A, <2 x i64> %B) nounwind {
; X86-LABEL: test_int_x86_dvpslvrsqw:
; X86:       # %bb.0:
; X86-NEXT:    dvpslvrsqw %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe8,0xfa,0xe0,0xc1]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <8 x i16> @llvm.x86.dvpslvrsqw(<2 x i64> %A, <2 x i64> %B)
  ret <8 x i16> %ret
}
declare <8 x i16> @llvm.x86.dvpslvrsqw(<2 x i64> %A, <2 x i64> %B)

define <4 x i32> @test_int_x86_dvpsrrsuqd(<2 x i64> %A) nounwind {
; X86-LABEL: test_int_x86_dvpsrrsuqd:
; X86:       # %bb.0:
; X86-NEXT:    dvpsrrsuqd $127, %xmm0, %xmm0 # encoding: [0xc4,0xe3,0xf8,0xa1,0xc0,0x7f]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpsrrsuqd(<2 x i64> %A, i32 127)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpsrrsuqd(<2 x i64> %A, i32 %B)

define <4 x i32> @test_int_x86_dvpsrvrsuqd(<2 x i64> %A, <2 x i64> %B) nounwind {
; X86-LABEL: test_int_x86_dvpsrvrsuqd:
; X86:       # %bb.0:
; X86-NEXT:    dvpsrvrsuqd %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe8,0xf8,0xe1,0xc1]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpsrvrsuqd(<2 x i64> %A, <2 x i64> %B)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpsrvrsuqd(<2 x i64> %A, <2 x i64> %B)

define <4 x i32> @test_int_x86_dvpslrsuqd(<2 x i64> %A) nounwind {
; X86-LABEL: test_int_x86_dvpslrsuqd:
; X86:       # %bb.0:
; X86-NEXT:    dvpslrsuqd $127, %xmm0, %xmm0 # encoding: [0xc4,0xe3,0xf9,0xa1,0xc0,0x7f]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpslrsuqd(<2 x i64> %A, i32 127)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpslrsuqd(<2 x i64> %A, i32 %B)

define <4 x i32> @test_int_x86_dvpslvrsuqd(<2 x i64> %A, <2 x i64> %B) nounwind {
; X86-LABEL: test_int_x86_dvpslvrsuqd:
; X86:       # %bb.0:
; X86-NEXT:    dvpslvrsuqd %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe8,0xf9,0xe1,0xc1]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpslvrsuqd(<2 x i64> %A, <2 x i64> %B)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpslvrsuqd(<2 x i64> %A, <2 x i64> %B)

define <4 x i32> @test_int_x86_dvpsrarsqd(<2 x i64> %A) nounwind {
; X86-LABEL: test_int_x86_dvpsrarsqd:
; X86:       # %bb.0:
; X86-NEXT:    dvpsrarsqd $127, %xmm0, %xmm0 # encoding: [0xc4,0xe3,0xfb,0xa1,0xc0,0x7f]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpsrarsqd(<2 x i64> %A, i32 127)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpsrarsqd(<2 x i64> %A, i32 %B)

define <4 x i32> @test_int_x86_dvpsravrsqd(<2 x i64> %A, <2 x i64> %B) nounwind {
; X86-LABEL: test_int_x86_dvpsravrsqd:
; X86:       # %bb.0:
; X86-NEXT:    dvpsravrsqd %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe8,0xfb,0xe1,0xc1]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpsravrsqd(<2 x i64> %A, <2 x i64> %B)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpsravrsqd(<2 x i64> %A, <2 x i64> %B)

define <4 x i32> @test_int_x86_dvpslrsqd(<2 x i64> %A) nounwind {
; X86-LABEL: test_int_x86_dvpslrsqd:
; X86:       # %bb.0:
; X86-NEXT:    dvpslrsqd $127, %xmm0, %xmm0 # encoding: [0xc4,0xe3,0xfa,0xa1,0xc0,0x7f]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpslrsqd(<2 x i64> %A, i32 127)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpslrsqd(<2 x i64> %A, i32 %B)

define <4 x i32> @test_int_x86_dvpslvrsqd(<2 x i64> %A, <2 x i64> %B) nounwind {
; X86-LABEL: test_int_x86_dvpslvrsqd:
; X86:       # %bb.0:
; X86-NEXT:    dvpslvrsqd %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe8,0xfa,0xe1,0xc1]
; X86-NEXT:    retl # encoding: [0xc3]
  %ret = call <4 x i32> @llvm.x86.dvpslvrsqd(<2 x i64> %A, <2 x i64> %B)
  ret <4 x i32> %ret
}
declare <4 x i32> @llvm.x86.dvpslvrsqd(<2 x i64> %A, <2 x i64> %B)

