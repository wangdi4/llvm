; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; Ignore the zeroext/signext attribute and always do sign/zero extension in the callee.
; RUN: llc < %s -mtriple=x86_64-unknown-linux -intel-abi-compatible=true | FileCheck %s

define i64 @calleeu8(i8 noundef zeroext %a) nounwind {
; CHECK-LABEL: calleeu8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movzbl %dil, %eax
; CHECK-NEXT:    retq
entry:
  %conv = zext i8 %a to i64
  ret i64 %conv
}

define i64 @calleeu16(i16 noundef zeroext %a) nounwind {
; CHECK-LABEL: calleeu16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movzwl %di, %eax
; CHECK-NEXT:    retq
entry:
  %conv = zext i16 %a to i64
  ret i64 %conv
}

define i64 @callees8(i8 noundef signext %a) nounwind {
; CHECK-LABEL: callees8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    # kill: def $edi killed $edi def $rdi
; CHECK-NEXT:    movsbq %dil, %rax
; CHECK-NEXT:    retq
entry:
  %conv = sext i8 %a to i64
  ret i64 %conv
}

define i64 @callees16(i16 noundef signext %a) nounwind {
; CHECK-LABEL: callees16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    # kill: def $edi killed $edi def $rdi
; CHECK-NEXT:    movswq %di, %rax
; CHECK-NEXT:    retq
entry:
  %conv = sext i16 %a to i64
  ret i64 %conv
}
