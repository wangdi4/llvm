; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=avx512vl | FileCheck %s

define <8 x i1> @test__fsub__ult_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub__ult_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubps %ymm1, %ymm0, %ymm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vcmpnleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ult <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub__oge_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub__oge_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubps %ymm1, %ymm0, %ymm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp oge <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub__olt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub__olt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp olt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub__uge_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub__uge_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp uge <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub__ule_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub__ule_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ule <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub__ogt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub__ogt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ogt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub__ole_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub__ole_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubps %ymm1, %ymm0, %ymm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ole <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub__ugt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub__ugt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubps %ymm1, %ymm0, %ymm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vcmpnleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ugt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub__one_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub__one_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneq_oqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp one <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub__ueq_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub__ueq_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeq_uqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ueq <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub__une_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub__une_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubps %ymm1, %ymm0, %ymm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vcmpneqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp une <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub__oeq_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub__oeq_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubps %ymm1, %ymm0, %ymm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vcmpeqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp oeq <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninf_ult_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninf_ult_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubps %ymm1, %ymm0, %ymm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vcmpnleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf ult <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninf_oge_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninf_oge_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubps %ymm1, %ymm0, %ymm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf oge <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninf_olt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninf_olt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf olt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninf_uge_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninf_uge_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf uge <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninf_ule_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninf_ule_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf ule <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninf_ogt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninf_ogt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf ogt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninf_ole_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninf_ole_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubps %ymm1, %ymm0, %ymm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf ole <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninf_ugt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninf_ugt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubps %ymm1, %ymm0, %ymm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vcmpnleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf ugt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninf_one_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninf_one_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneq_oqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf one <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninf_ueq_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninf_ueq_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeq_uqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf ueq <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninf_une_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninf_une_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubps %ymm1, %ymm0, %ymm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vcmpneqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf une <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninf_oeq_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninf_oeq_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubps %ymm1, %ymm0, %ymm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vcmpeqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf oeq <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_nnan_ult_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_nnan_ult_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp nnan ult <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_nnan_oge_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_nnan_oge_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp nnan oge <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_nnan_olt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_nnan_olt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp nnan olt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_nnan_uge_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_nnan_uge_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp nnan uge <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_nnan_ule_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_nnan_ule_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp nnan ule <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_nnan_ogt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_nnan_ogt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp nnan ogt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_nnan_ole_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_nnan_ole_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp nnan ole <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_nnan_ugt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_nnan_ugt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp nnan ugt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_nnan_one_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_nnan_one_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp nnan one <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_nnan_ueq_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_nnan_ueq_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp nnan ueq <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_nnan_une_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_nnan_une_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp nnan une <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_nnan_oeq_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_nnan_oeq_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp nnan oeq <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninfnnan_ult_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninfnnan_ult_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf nnan ult <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninfnnan_oge_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninfnnan_oge_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf nnan oge <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninfnnan_olt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninfnnan_olt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf nnan olt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninfnnan_uge_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninfnnan_uge_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf nnan uge <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninfnnan_ule_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninfnnan_ule_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf nnan ule <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninfnnan_ogt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninfnnan_ogt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf nnan ogt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninfnnan_ole_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninfnnan_ole_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf nnan ole <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninfnnan_ugt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninfnnan_ugt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf nnan ugt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninfnnan_one_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninfnnan_one_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf nnan one <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninfnnan_ueq_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninfnnan_ueq_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf nnan ueq <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninfnnan_une_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninfnnan_une_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf nnan une <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninfnnan_oeq_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninfnnan_oeq_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf nnan oeq <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub__ult_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub__ult_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ult <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub__oge_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub__oge_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp oge <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub__olt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub__olt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp olt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub__uge_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub__uge_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp uge <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub__ule_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub__ule_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ule <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub__ogt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub__ogt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ogt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub__ole_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub__ole_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ole <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub__ugt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub__ugt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ugt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub__one_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub__one_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneq_oqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp one <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub__ueq_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub__ueq_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeq_uqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ueq <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub__une_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub__une_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp une <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub__oeq_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub__oeq_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp oeq <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninf_ult_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_ult_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf ult <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninf_oge_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_oge_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf oge <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninf_olt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_olt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf olt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninf_uge_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_uge_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf uge <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninf_ule_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_ule_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf ule <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninf_ogt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_ogt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf ogt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninf_ole_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_ole_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf ole <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninf_ugt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_ugt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf ugt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninf_one_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_one_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneq_oqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf one <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninf_ueq_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_ueq_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeq_uqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf ueq <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninf_une_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_une_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf une <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninf_oeq_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_oeq_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf oeq <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_nnan_ult_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_ult_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp nnan ult <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_nnan_oge_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_oge_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp nnan oge <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_nnan_olt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_olt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp nnan olt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_nnan_uge_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_uge_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp nnan uge <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_nnan_ule_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_ule_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp nnan ule <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_nnan_ogt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_ogt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp nnan ogt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_nnan_ole_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_ole_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp nnan ole <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_nnan_ugt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_ugt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp nnan ugt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_nnan_one_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_one_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp nnan one <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_nnan_ueq_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_ueq_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp nnan ueq <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_nnan_une_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_une_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp nnan une <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_nnan_oeq_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_oeq_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp nnan oeq <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninfnnan_ult_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_ult_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf nnan ult <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninfnnan_oge_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_oge_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf nnan oge <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninfnnan_olt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_olt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf nnan olt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninfnnan_uge_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_uge_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf nnan uge <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninfnnan_ule_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_ule_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf nnan ule <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninfnnan_ogt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_ogt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf nnan ogt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninfnnan_ole_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_ole_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf nnan ole <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninfnnan_ugt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_ugt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf nnan ugt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninfnnan_one_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_one_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf nnan one <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninfnnan_ueq_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_ueq_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf nnan ueq <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninfnnan_une_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_une_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf nnan une <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninfnnan_oeq_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_oeq_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf nnan oeq <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub__ult_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub__ult_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ult <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub__oge_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub__oge_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp oge <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub__olt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub__olt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp olt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub__uge_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub__uge_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp uge <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub__ule_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub__ule_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ule <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub__ogt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub__ogt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ogt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub__ole_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub__ole_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ole <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub__ugt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub__ugt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ugt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub__one_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub__one_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneq_oqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp one <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub__ueq_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub__ueq_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeq_uqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ueq <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub__une_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub__une_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp une <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub__oeq_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub__oeq_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp oeq <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninf_ult_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_ult_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf ult <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninf_oge_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_oge_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf oge <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninf_olt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_olt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf olt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninf_uge_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_uge_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf uge <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninf_ule_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_ule_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf ule <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninf_ogt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_ogt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf ogt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninf_ole_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_ole_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf ole <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninf_ugt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_ugt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf ugt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninf_one_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_one_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneq_oqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf one <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninf_ueq_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_ueq_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeq_uqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf ueq <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninf_une_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_une_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf une <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninf_oeq_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_oeq_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf oeq <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_nnan_ult_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_ult_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp nnan ult <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_nnan_oge_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_oge_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp nnan oge <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_nnan_olt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_olt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp nnan olt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_nnan_uge_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_uge_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp nnan uge <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_nnan_ule_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_ule_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp nnan ule <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_nnan_ogt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_ogt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp nnan ogt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_nnan_ole_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_ole_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp nnan ole <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_nnan_ugt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_ugt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp nnan ugt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_nnan_one_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_one_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp nnan one <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_nnan_ueq_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_ueq_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp nnan ueq <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_nnan_une_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_une_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp nnan une <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_nnan_oeq_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_oeq_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp nnan oeq <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninfnnan_ult_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_ult_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan ult <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninfnnan_oge_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_oge_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan oge <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninfnnan_olt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_olt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan olt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninfnnan_uge_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_uge_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan uge <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninfnnan_ule_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_ule_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan ule <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninfnnan_ogt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_ogt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan ogt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninfnnan_ole_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_ole_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan ole <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninfnnan_ugt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_ugt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan ugt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninfnnan_one_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_one_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan one <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninfnnan_ueq_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_ueq_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan ueq <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninfnnan_une_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_une_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan une <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninfnnan_oeq_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_oeq_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan oeq <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub__ult_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub__ult_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ult <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub__oge_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub__oge_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp oge <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub__olt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub__olt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp olt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub__uge_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub__uge_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp uge <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub__ule_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub__ule_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ule <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub__ogt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub__ogt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ogt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub__ole_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub__ole_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ole <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub__ugt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub__ugt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ugt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub__one_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub__one_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneq_oqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp one <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub__ueq_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub__ueq_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeq_uqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ueq <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub__une_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub__une_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp une <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub__oeq_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub__oeq_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp oeq <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninf_ult_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_ult_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf ult <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninf_oge_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_oge_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf oge <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninf_olt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_olt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf olt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninf_uge_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_uge_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf uge <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninf_ule_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_ule_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf ule <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninf_ogt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_ogt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf ogt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninf_ole_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_ole_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf ole <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninf_ugt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_ugt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf ugt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninf_one_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_one_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneq_oqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf one <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninf_ueq_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_ueq_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeq_uqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf ueq <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninf_une_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_une_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf une <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninf_oeq_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_oeq_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf oeq <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_nnan_ult_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_ult_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp nnan ult <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_nnan_oge_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_oge_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp nnan oge <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_nnan_olt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_olt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp nnan olt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_nnan_uge_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_uge_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp nnan uge <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_nnan_ule_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_ule_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp nnan ule <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_nnan_ogt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_ogt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp nnan ogt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_nnan_ole_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_ole_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp nnan ole <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_nnan_ugt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_ugt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp nnan ugt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_nnan_one_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_one_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp nnan one <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_nnan_ueq_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_ueq_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp nnan ueq <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_nnan_une_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_une_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp nnan une <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_nnan_oeq_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_oeq_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp nnan oeq <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninfnnan_ult_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_ult_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan ult <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninfnnan_oge_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_oge_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan oge <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninfnnan_olt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_olt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan olt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninfnnan_uge_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_uge_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan uge <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninfnnan_ule_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_ule_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan ule <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninfnnan_ogt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_ogt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan ogt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninfnnan_ole_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_ole_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan ole <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninfnnan_ugt_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_ugt_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan ugt <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninfnnan_one_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_one_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan one <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninfnnan_ueq_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_ueq_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan ueq <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninfnnan_une_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_une_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan une <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninfnnan_oeq_fcmp_v8f32(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_oeq_fcmp_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan oeq <8 x float> %0, zeroinitializer
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub__ult_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub__ult_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubps %ymm1, %ymm0, %ymm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vcmpnleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ult <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub__oge_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub__oge_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubps %ymm1, %ymm0, %ymm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp oge <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub__olt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub__olt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp olt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub__uge_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub__uge_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp uge <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub__ule_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub__ule_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ule <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub__ogt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub__ogt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ogt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub__ole_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub__ole_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubps %ymm1, %ymm0, %ymm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ole <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub__ugt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub__ugt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubps %ymm1, %ymm0, %ymm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vcmpnleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ugt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub__one_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub__one_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneq_oqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp one <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub__ueq_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub__ueq_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeq_uqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ueq <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub__une_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub__une_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubps %ymm1, %ymm0, %ymm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vcmpneqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp une <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub__oeq_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub__oeq_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubps %ymm1, %ymm0, %ymm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vcmpeqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp oeq <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninf_ult_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninf_ult_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubps %ymm1, %ymm0, %ymm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vcmpnleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf ult <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninf_oge_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninf_oge_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubps %ymm1, %ymm0, %ymm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf oge <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninf_olt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninf_olt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf olt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninf_uge_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninf_uge_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf uge <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninf_ule_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninf_ule_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf ule <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninf_ogt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninf_ogt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf ogt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninf_ole_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninf_ole_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubps %ymm1, %ymm0, %ymm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf ole <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninf_ugt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninf_ugt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubps %ymm1, %ymm0, %ymm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vcmpnleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf ugt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninf_one_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninf_one_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneq_oqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf one <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninf_ueq_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninf_ueq_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeq_uqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf ueq <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninf_une_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninf_une_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubps %ymm1, %ymm0, %ymm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vcmpneqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf une <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninf_oeq_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninf_oeq_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubps %ymm1, %ymm0, %ymm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vcmpeqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf oeq <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_nnan_ult_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_nnan_ult_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp nnan ult <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_nnan_oge_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_nnan_oge_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp nnan oge <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_nnan_olt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_nnan_olt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp nnan olt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_nnan_uge_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_nnan_uge_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp nnan uge <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_nnan_ule_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_nnan_ule_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp nnan ule <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_nnan_ogt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_nnan_ogt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp nnan ogt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_nnan_ole_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_nnan_ole_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp nnan ole <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_nnan_ugt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_nnan_ugt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp nnan ugt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_nnan_one_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_nnan_one_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp nnan one <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_nnan_ueq_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_nnan_ueq_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp nnan ueq <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_nnan_une_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_nnan_une_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp nnan une <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_nnan_oeq_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_nnan_oeq_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp nnan oeq <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninfnnan_ult_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninfnnan_ult_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf nnan ult <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninfnnan_oge_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninfnnan_oge_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf nnan oge <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninfnnan_olt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninfnnan_olt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf nnan olt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninfnnan_uge_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninfnnan_uge_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf nnan uge <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninfnnan_ule_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninfnnan_ule_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf nnan ule <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninfnnan_ogt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninfnnan_ogt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf nnan ogt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninfnnan_ole_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninfnnan_ole_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf nnan ole <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninfnnan_ugt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninfnnan_ugt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf nnan ugt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninfnnan_one_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninfnnan_one_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf nnan one <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninfnnan_ueq_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninfnnan_ueq_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf nnan ueq <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninfnnan_une_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninfnnan_une_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf nnan une <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test__fsub_ninfnnan_oeq_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test__fsub_ninfnnan_oeq_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub <8 x float> %x, %y
 %1 = fcmp ninf nnan oeq <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub__ult_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub__ult_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ult <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub__oge_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub__oge_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp oge <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub__olt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub__olt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp olt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub__uge_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub__uge_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp uge <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub__ule_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub__ule_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ule <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub__ogt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub__ogt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ogt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub__ole_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub__ole_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ole <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub__ugt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub__ugt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ugt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub__one_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub__one_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneq_oqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp one <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub__ueq_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub__ueq_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeq_uqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ueq <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub__une_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub__une_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp une <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub__oeq_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub__oeq_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp oeq <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninf_ult_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_ult_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf ult <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninf_oge_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_oge_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf oge <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninf_olt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_olt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf olt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninf_uge_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_uge_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf uge <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninf_ule_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_ule_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf ule <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninf_ogt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_ogt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf ogt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninf_ole_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_ole_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf ole <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninf_ugt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_ugt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf ugt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninf_one_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_one_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneq_oqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf one <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninf_ueq_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_ueq_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeq_uqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf ueq <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninf_une_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_une_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf une <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninf_oeq_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_oeq_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf oeq <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_nnan_ult_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_ult_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp nnan ult <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_nnan_oge_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_oge_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp nnan oge <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_nnan_olt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_olt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp nnan olt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_nnan_uge_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_uge_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp nnan uge <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_nnan_ule_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_ule_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp nnan ule <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_nnan_ogt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_ogt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp nnan ogt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_nnan_ole_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_ole_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp nnan ole <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_nnan_ugt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_ugt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp nnan ugt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_nnan_one_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_one_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp nnan one <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_nnan_ueq_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_ueq_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp nnan ueq <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_nnan_une_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_une_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp nnan une <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_nnan_oeq_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_oeq_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp nnan oeq <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninfnnan_ult_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_ult_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf nnan ult <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninfnnan_oge_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_oge_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf nnan oge <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninfnnan_olt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_olt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf nnan olt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninfnnan_uge_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_uge_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf nnan uge <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninfnnan_ule_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_ule_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf nnan ule <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninfnnan_ogt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_ogt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf nnan ogt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninfnnan_ole_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_ole_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf nnan ole <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninfnnan_ugt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_ugt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf nnan ugt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninfnnan_one_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_one_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf nnan one <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninfnnan_ueq_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_ueq_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf nnan ueq <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninfnnan_une_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_une_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf nnan une <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninf_fsub_ninfnnan_oeq_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_oeq_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf <8 x float> %x, %y
 %1 = fcmp ninf nnan oeq <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub__ult_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub__ult_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ult <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub__oge_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub__oge_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp oge <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub__olt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub__olt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp olt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub__uge_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub__uge_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp uge <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub__ule_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub__ule_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ule <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub__ogt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub__ogt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ogt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub__ole_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub__ole_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ole <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub__ugt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub__ugt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ugt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub__one_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub__one_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneq_oqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp one <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub__ueq_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub__ueq_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeq_uqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ueq <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub__une_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub__une_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp une <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub__oeq_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub__oeq_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp oeq <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninf_ult_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_ult_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf ult <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninf_oge_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_oge_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf oge <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninf_olt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_olt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf olt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninf_uge_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_uge_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf uge <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninf_ule_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_ule_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf ule <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninf_ogt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_ogt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf ogt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninf_ole_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_ole_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf ole <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninf_ugt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_ugt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf ugt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninf_one_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_one_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneq_oqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf one <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninf_ueq_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_ueq_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeq_uqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf ueq <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninf_une_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_une_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf une <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninf_oeq_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_oeq_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf oeq <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_nnan_ult_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_ult_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp nnan ult <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_nnan_oge_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_oge_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp nnan oge <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_nnan_olt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_olt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp nnan olt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_nnan_uge_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_uge_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp nnan uge <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_nnan_ule_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_ule_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp nnan ule <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_nnan_ogt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_ogt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp nnan ogt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_nnan_ole_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_ole_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp nnan ole <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_nnan_ugt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_ugt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp nnan ugt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_nnan_one_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_one_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp nnan one <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_nnan_ueq_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_ueq_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp nnan ueq <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_nnan_une_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_une_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp nnan une <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_nnan_oeq_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_oeq_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp nnan oeq <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninfnnan_ult_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_ult_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan ult <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninfnnan_oge_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_oge_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan oge <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninfnnan_olt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_olt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan olt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninfnnan_uge_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_uge_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan uge <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninfnnan_ule_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_ule_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan ule <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninfnnan_ogt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_ogt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan ogt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninfnnan_ole_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_ole_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan ole <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninfnnan_ugt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_ugt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan ugt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninfnnan_one_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_one_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan one <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninfnnan_ueq_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_ueq_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan ueq <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninfnnan_une_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_une_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan une <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_nnan_fsub_ninfnnan_oeq_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_oeq_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan oeq <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub__ult_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub__ult_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ult <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub__oge_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub__oge_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp oge <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub__olt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub__olt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp olt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub__uge_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub__uge_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp uge <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub__ule_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub__ule_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ule <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub__ogt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub__ogt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ogt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub__ole_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub__ole_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ole <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub__ugt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub__ugt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ugt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub__one_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub__one_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneq_oqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp one <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub__ueq_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub__ueq_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeq_uqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ueq <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub__une_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub__une_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp une <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub__oeq_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub__oeq_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp oeq <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninf_ult_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_ult_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf ult <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninf_oge_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_oge_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf oge <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninf_olt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_olt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf olt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninf_uge_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_uge_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf uge <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninf_ule_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_ule_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf ule <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninf_ogt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_ogt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf ogt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninf_ole_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_ole_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf ole <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninf_ugt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_ugt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpnleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf ugt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninf_one_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_one_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneq_oqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf one <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninf_ueq_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_ueq_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeq_uqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf ueq <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninf_une_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_une_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf une <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninf_oeq_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_oeq_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf oeq <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_nnan_ult_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_ult_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp nnan ult <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_nnan_oge_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_oge_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp nnan oge <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_nnan_olt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_olt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp nnan olt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_nnan_uge_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_uge_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp nnan uge <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_nnan_ule_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_ule_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp nnan ule <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_nnan_ogt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_ogt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp nnan ogt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_nnan_ole_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_ole_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp nnan ole <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_nnan_ugt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_ugt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp nnan ugt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_nnan_one_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_one_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp nnan one <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_nnan_ueq_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_ueq_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp nnan ueq <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_nnan_une_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_une_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp nnan une <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_nnan_oeq_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_oeq_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp nnan oeq <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninfnnan_ult_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_ult_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan ult <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninfnnan_oge_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_oge_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan oge <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninfnnan_olt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_olt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan olt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninfnnan_uge_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_uge_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan uge <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninfnnan_ule_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_ule_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan ule <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninfnnan_ogt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_ogt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan ogt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninfnnan_ole_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_ole_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpleps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan ole <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninfnnan_ugt_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_ugt_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpltps %ymm1, %ymm0, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan ugt <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninfnnan_one_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_one_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan one <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninfnnan_ueq_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_ueq_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan ueq <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninfnnan_une_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_une_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan une <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define <8 x i1> @test_ninfnnan_fsub_ninfnnan_oeq_fcmp_v8f32_reverse(<8 x float> %x, <8 x float> %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_oeq_fcmp_v8f32_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqps %ymm0, %ymm1, %k1
; CHECK-NEXT:    vpcmpeqd %ymm0, %ymm0, %ymm0
; CHECK-NEXT:    vmovdqa32 %ymm0, %ymm0 {%k1} {z}
; CHECK-NEXT:    vpmovdw %ymm0, %xmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan <8 x float> %x, %y
 %1 = fcmp ninf nnan oeq <8 x float> zeroinitializer, %0
 ret <8 x i1> %1
 }

define i1 @test__fsub__ult_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub__ult_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubss %xmm1, %xmm0, %xmm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ult float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub__oge_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub__oge_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubss %xmm1, %xmm0, %xmm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp oge float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub__olt_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub__olt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp olt float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub__uge_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub__uge_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp uge float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub__ule_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub__ule_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ule float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub__ogt_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub__ogt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ogt float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub__ole_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub__ole_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubss %xmm1, %xmm0, %xmm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ole float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub__ugt_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub__ugt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubss %xmm1, %xmm0, %xmm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ugt float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub__one_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub__one_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp one float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub__ueq_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub__ueq_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ueq float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub__une_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub__une_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubss %xmm1, %xmm0, %xmm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vcmpneqss %xmm1, %xmm0, %k0
; CHECK-NEXT:    kmovw %k0, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp une float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub__oeq_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub__oeq_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubss %xmm1, %xmm0, %xmm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vcmpeqss %xmm1, %xmm0, %k0
; CHECK-NEXT:    kmovw %k0, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp oeq float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_ninf_ult_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninf_ult_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubss %xmm1, %xmm0, %xmm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf ult float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_ninf_oge_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninf_oge_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubss %xmm1, %xmm0, %xmm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf oge float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_ninf_olt_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninf_olt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf olt float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_ninf_uge_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninf_uge_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf uge float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_ninf_ule_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninf_ule_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf ule float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_ninf_ogt_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninf_ogt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf ogt float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_ninf_ole_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninf_ole_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubss %xmm1, %xmm0, %xmm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf ole float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_ninf_ugt_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninf_ugt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubss %xmm1, %xmm0, %xmm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf ugt float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_ninf_one_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninf_one_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf one float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_ninf_ueq_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninf_ueq_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf ueq float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_ninf_une_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninf_une_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubss %xmm1, %xmm0, %xmm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vcmpneqss %xmm1, %xmm0, %k0
; CHECK-NEXT:    kmovw %k0, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf une float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_ninf_oeq_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninf_oeq_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubss %xmm1, %xmm0, %xmm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vcmpeqss %xmm1, %xmm0, %k0
; CHECK-NEXT:    kmovw %k0, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf oeq float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_nnan_ult_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_nnan_ult_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp nnan ult float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_nnan_oge_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_nnan_oge_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp nnan oge float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_nnan_olt_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_nnan_olt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp nnan olt float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_nnan_uge_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_nnan_uge_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp nnan uge float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_nnan_ule_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_nnan_ule_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp nnan ule float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_nnan_ogt_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_nnan_ogt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp nnan ogt float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_nnan_ole_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_nnan_ole_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp nnan ole float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_nnan_ugt_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_nnan_ugt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp nnan ugt float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_nnan_one_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_nnan_one_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp nnan one float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_nnan_ueq_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_nnan_ueq_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp nnan ueq float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_nnan_une_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_nnan_une_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp nnan une float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_nnan_oeq_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_nnan_oeq_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp nnan oeq float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_ninfnnan_ult_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninfnnan_ult_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf nnan ult float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_ninfnnan_oge_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninfnnan_oge_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf nnan oge float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_ninfnnan_olt_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninfnnan_olt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf nnan olt float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_ninfnnan_uge_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninfnnan_uge_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf nnan uge float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_ninfnnan_ule_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninfnnan_ule_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf nnan ule float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_ninfnnan_ogt_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninfnnan_ogt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf nnan ogt float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_ninfnnan_ole_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninfnnan_ole_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf nnan ole float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_ninfnnan_ugt_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninfnnan_ugt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf nnan ugt float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_ninfnnan_one_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninfnnan_one_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf nnan one float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_ninfnnan_ueq_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninfnnan_ueq_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf nnan ueq float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_ninfnnan_une_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninfnnan_une_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf nnan une float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub_ninfnnan_oeq_fcmp(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninfnnan_oeq_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf nnan oeq float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub__ult_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub__ult_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ult float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub__oge_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub__oge_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp oge float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub__olt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub__olt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp olt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub__uge_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub__uge_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp uge float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub__ule_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub__ule_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ule float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub__ogt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub__ogt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ogt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub__ole_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub__ole_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ole float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub__ugt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub__ugt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ugt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub__one_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub__one_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp one float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub__ueq_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub__ueq_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ueq float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub__une_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub__une_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqss %xmm1, %xmm0, %k0
; CHECK-NEXT:    kmovw %k0, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp une float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub__oeq_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub__oeq_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqss %xmm1, %xmm0, %k0
; CHECK-NEXT:    kmovw %k0, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp oeq float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninf_ult_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_ult_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf ult float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninf_oge_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_oge_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf oge float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninf_olt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_olt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf olt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninf_uge_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_uge_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf uge float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninf_ule_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_ule_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf ule float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninf_ogt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_ogt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf ogt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninf_ole_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_ole_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf ole float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninf_ugt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_ugt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf ugt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninf_one_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_one_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf one float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninf_ueq_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_ueq_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf ueq float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninf_une_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_une_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqss %xmm1, %xmm0, %k0
; CHECK-NEXT:    kmovw %k0, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf une float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninf_oeq_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_oeq_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqss %xmm1, %xmm0, %k0
; CHECK-NEXT:    kmovw %k0, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf oeq float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_nnan_ult_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_ult_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp nnan ult float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_nnan_oge_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_oge_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp nnan oge float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_nnan_olt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_olt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp nnan olt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_nnan_uge_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_uge_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp nnan uge float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_nnan_ule_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_ule_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp nnan ule float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_nnan_ogt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_ogt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp nnan ogt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_nnan_ole_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_ole_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp nnan ole float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_nnan_ugt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_ugt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp nnan ugt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_nnan_one_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_one_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp nnan one float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_nnan_ueq_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_ueq_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp nnan ueq float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_nnan_une_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_une_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp nnan une float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_nnan_oeq_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_oeq_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp nnan oeq float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninfnnan_ult_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_ult_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf nnan ult float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninfnnan_oge_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_oge_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf nnan oge float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninfnnan_olt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_olt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf nnan olt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninfnnan_uge_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_uge_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf nnan uge float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninfnnan_ule_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_ule_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf nnan ule float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninfnnan_ogt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_ogt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf nnan ogt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninfnnan_ole_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_ole_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf nnan ole float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninfnnan_ugt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_ugt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf nnan ugt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninfnnan_one_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_one_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf nnan one float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninfnnan_ueq_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_ueq_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf nnan ueq float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninfnnan_une_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_une_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf nnan une float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninfnnan_oeq_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_oeq_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf nnan oeq float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub__ult_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub__ult_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ult float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub__oge_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub__oge_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp oge float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub__olt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub__olt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp olt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub__uge_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub__uge_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp uge float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub__ule_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub__ule_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ule float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub__ogt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub__ogt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ogt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub__ole_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub__ole_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ole float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub__ugt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub__ugt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ugt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub__one_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub__one_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp one float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub__ueq_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub__ueq_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ueq float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub__une_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub__une_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqss %xmm1, %xmm0, %k0
; CHECK-NEXT:    kmovw %k0, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp une float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub__oeq_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub__oeq_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqss %xmm1, %xmm0, %k0
; CHECK-NEXT:    kmovw %k0, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp oeq float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninf_ult_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_ult_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf ult float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninf_oge_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_oge_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf oge float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninf_olt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_olt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf olt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninf_uge_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_uge_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf uge float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninf_ule_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_ule_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf ule float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninf_ogt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_ogt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf ogt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninf_ole_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_ole_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf ole float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninf_ugt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_ugt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf ugt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninf_one_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_one_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf one float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninf_ueq_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_ueq_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf ueq float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninf_une_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_une_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqss %xmm1, %xmm0, %k0
; CHECK-NEXT:    kmovw %k0, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf une float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninf_oeq_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_oeq_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqss %xmm1, %xmm0, %k0
; CHECK-NEXT:    kmovw %k0, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf oeq float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_nnan_ult_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_ult_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp nnan ult float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_nnan_oge_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_oge_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp nnan oge float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_nnan_olt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_olt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp nnan olt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_nnan_uge_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_uge_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp nnan uge float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_nnan_ule_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_ule_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp nnan ule float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_nnan_ogt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_ogt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp nnan ogt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_nnan_ole_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_ole_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp nnan ole float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_nnan_ugt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_ugt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp nnan ugt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_nnan_one_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_one_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp nnan one float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_nnan_ueq_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_ueq_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp nnan ueq float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_nnan_une_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_une_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp nnan une float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_nnan_oeq_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_oeq_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp nnan oeq float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninfnnan_ult_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_ult_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf nnan ult float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninfnnan_oge_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_oge_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf nnan oge float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninfnnan_olt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_olt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf nnan olt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninfnnan_uge_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_uge_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf nnan uge float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninfnnan_ule_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_ule_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf nnan ule float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninfnnan_ogt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_ogt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf nnan ogt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninfnnan_ole_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_ole_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf nnan ole float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninfnnan_ugt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_ugt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf nnan ugt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninfnnan_one_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_one_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf nnan one float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninfnnan_ueq_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_ueq_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf nnan ueq float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninfnnan_une_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_une_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf nnan une float %0, 0x0000
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninfnnan_oeq_fcmp(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_oeq_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf nnan oeq float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub__ult_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub__ult_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ult float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub__oge_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub__oge_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp oge float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub__olt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub__olt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp olt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub__uge_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub__uge_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp uge float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub__ule_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub__ule_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ule float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub__ogt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub__ogt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ogt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub__ole_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub__ole_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ole float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub__ugt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub__ugt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ugt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub__one_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub__one_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp one float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub__ueq_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub__ueq_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ueq float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub__une_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub__une_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqss %xmm1, %xmm0, %k0
; CHECK-NEXT:    kmovw %k0, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp une float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub__oeq_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub__oeq_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqss %xmm1, %xmm0, %k0
; CHECK-NEXT:    kmovw %k0, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp oeq float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninf_ult_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_ult_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf ult float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninf_oge_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_oge_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf oge float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninf_olt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_olt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf olt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninf_uge_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_uge_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf uge float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninf_ule_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_ule_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf ule float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninf_ogt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_ogt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf ogt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninf_ole_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_ole_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf ole float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninf_ugt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_ugt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf ugt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninf_one_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_one_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf one float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninf_ueq_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_ueq_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf ueq float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninf_une_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_une_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqss %xmm1, %xmm0, %k0
; CHECK-NEXT:    kmovw %k0, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf une float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninf_oeq_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_oeq_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqss %xmm1, %xmm0, %k0
; CHECK-NEXT:    kmovw %k0, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf oeq float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_nnan_ult_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_ult_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp nnan ult float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_nnan_oge_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_oge_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp nnan oge float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_nnan_olt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_olt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp nnan olt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_nnan_uge_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_uge_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp nnan uge float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_nnan_ule_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_ule_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp nnan ule float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_nnan_ogt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_ogt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp nnan ogt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_nnan_ole_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_ole_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp nnan ole float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_nnan_ugt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_ugt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp nnan ugt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_nnan_one_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_one_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp nnan one float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_nnan_ueq_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_ueq_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp nnan ueq float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_nnan_une_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_une_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp nnan une float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_nnan_oeq_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_oeq_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp nnan oeq float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninfnnan_ult_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_ult_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf nnan ult float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninfnnan_oge_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_oge_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf nnan oge float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninfnnan_olt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_olt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf nnan olt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninfnnan_uge_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_uge_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf nnan uge float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninfnnan_ule_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_ule_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf nnan ule float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninfnnan_ogt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_ogt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf nnan ogt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninfnnan_ole_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_ole_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf nnan ole float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninfnnan_ugt_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_ugt_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf nnan ugt float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninfnnan_one_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_one_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf nnan one float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninfnnan_ueq_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_ueq_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf nnan ueq float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninfnnan_une_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_une_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf nnan une float %0, 0x0000
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninfnnan_oeq_fcmp(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_oeq_fcmp:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf nnan oeq float %0, 0x0000
 ret i1 %1
 }

define i1 @test__fsub__ult_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub__ult_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubss %xmm1, %xmm0, %xmm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ult float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub__oge_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub__oge_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubss %xmm1, %xmm0, %xmm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp oge float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub__olt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub__olt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp olt float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub__uge_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub__uge_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp uge float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub__ule_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub__ule_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ule float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub__ogt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub__ogt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ogt float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub__ole_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub__ole_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubss %xmm1, %xmm0, %xmm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ole float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub__ugt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub__ugt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubss %xmm1, %xmm0, %xmm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ugt float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub__one_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub__one_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp one float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub__ueq_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub__ueq_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ueq float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub__une_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub__une_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubss %xmm1, %xmm0, %xmm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vcmpneqss %xmm1, %xmm0, %k0
; CHECK-NEXT:    kmovw %k0, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp une float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub__oeq_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub__oeq_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubss %xmm1, %xmm0, %xmm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vcmpeqss %xmm1, %xmm0, %k0
; CHECK-NEXT:    kmovw %k0, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp oeq float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_ninf_ult_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninf_ult_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubss %xmm1, %xmm0, %xmm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf ult float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_ninf_oge_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninf_oge_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubss %xmm1, %xmm0, %xmm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf oge float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_ninf_olt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninf_olt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf olt float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_ninf_uge_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninf_uge_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf uge float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_ninf_ule_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninf_ule_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf ule float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_ninf_ogt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninf_ogt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf ogt float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_ninf_ole_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninf_ole_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubss %xmm1, %xmm0, %xmm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf ole float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_ninf_ugt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninf_ugt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubss %xmm1, %xmm0, %xmm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf ugt float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_ninf_one_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninf_one_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf one float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_ninf_ueq_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninf_ueq_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf ueq float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_ninf_une_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninf_une_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubss %xmm1, %xmm0, %xmm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vcmpneqss %xmm1, %xmm0, %k0
; CHECK-NEXT:    kmovw %k0, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf une float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_ninf_oeq_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninf_oeq_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsubss %xmm1, %xmm0, %xmm0
; CHECK-NEXT:    vxorps %xmm1, %xmm1, %xmm1
; CHECK-NEXT:    vcmpeqss %xmm1, %xmm0, %k0
; CHECK-NEXT:    kmovw %k0, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf oeq float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_nnan_ult_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_nnan_ult_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp nnan ult float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_nnan_oge_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_nnan_oge_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp nnan oge float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_nnan_olt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_nnan_olt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp nnan olt float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_nnan_uge_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_nnan_uge_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp nnan uge float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_nnan_ule_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_nnan_ule_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp nnan ule float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_nnan_ogt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_nnan_ogt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp nnan ogt float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_nnan_ole_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_nnan_ole_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp nnan ole float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_nnan_ugt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_nnan_ugt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp nnan ugt float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_nnan_one_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_nnan_one_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp nnan one float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_nnan_ueq_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_nnan_ueq_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp nnan ueq float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_nnan_une_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_nnan_une_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp nnan une float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_nnan_oeq_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_nnan_oeq_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp nnan oeq float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_ninfnnan_ult_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninfnnan_ult_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf nnan ult float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_ninfnnan_oge_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninfnnan_oge_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf nnan oge float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_ninfnnan_olt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninfnnan_olt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf nnan olt float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_ninfnnan_uge_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninfnnan_uge_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf nnan uge float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_ninfnnan_ule_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninfnnan_ule_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf nnan ule float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_ninfnnan_ogt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninfnnan_ogt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf nnan ogt float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_ninfnnan_ole_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninfnnan_ole_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf nnan ole float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_ninfnnan_ugt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninfnnan_ugt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf nnan ugt float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_ninfnnan_one_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninfnnan_one_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf nnan one float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_ninfnnan_ueq_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninfnnan_ueq_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf nnan ueq float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_ninfnnan_une_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninfnnan_une_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf nnan une float 0x0000, %0
 ret i1 %1
 }

define i1 @test__fsub_ninfnnan_oeq_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test__fsub_ninfnnan_oeq_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub float %x, %y
 %1 = fcmp ninf nnan oeq float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub__ult_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub__ult_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ult float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub__oge_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub__oge_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp oge float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub__olt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub__olt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp olt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub__uge_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub__uge_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp uge float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub__ule_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub__ule_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ule float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub__ogt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub__ogt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ogt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub__ole_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub__ole_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ole float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub__ugt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub__ugt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ugt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub__one_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub__one_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp one float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub__ueq_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub__ueq_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ueq float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub__une_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub__une_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqss %xmm0, %xmm1, %k0
; CHECK-NEXT:    kmovw %k0, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp une float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub__oeq_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub__oeq_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqss %xmm0, %xmm1, %k0
; CHECK-NEXT:    kmovw %k0, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp oeq float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninf_ult_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_ult_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf ult float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninf_oge_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_oge_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf oge float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninf_olt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_olt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf olt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninf_uge_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_uge_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf uge float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninf_ule_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_ule_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf ule float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninf_ogt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_ogt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf ogt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninf_ole_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_ole_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf ole float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninf_ugt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_ugt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf ugt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninf_one_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_one_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf one float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninf_ueq_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_ueq_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf ueq float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninf_une_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_une_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqss %xmm0, %xmm1, %k0
; CHECK-NEXT:    kmovw %k0, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf une float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninf_oeq_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninf_oeq_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqss %xmm0, %xmm1, %k0
; CHECK-NEXT:    kmovw %k0, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf oeq float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_nnan_ult_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_ult_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp nnan ult float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_nnan_oge_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_oge_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp nnan oge float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_nnan_olt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_olt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp nnan olt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_nnan_uge_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_uge_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp nnan uge float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_nnan_ule_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_ule_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp nnan ule float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_nnan_ogt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_ogt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp nnan ogt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_nnan_ole_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_ole_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp nnan ole float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_nnan_ugt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_ugt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp nnan ugt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_nnan_one_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_one_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp nnan one float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_nnan_ueq_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_ueq_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp nnan ueq float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_nnan_une_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_une_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp nnan une float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_nnan_oeq_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_nnan_oeq_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp nnan oeq float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninfnnan_ult_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_ult_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf nnan ult float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninfnnan_oge_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_oge_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf nnan oge float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninfnnan_olt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_olt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf nnan olt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninfnnan_uge_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_uge_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf nnan uge float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninfnnan_ule_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_ule_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf nnan ule float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninfnnan_ogt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_ogt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf nnan ogt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninfnnan_ole_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_ole_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf nnan ole float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninfnnan_ugt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_ugt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf nnan ugt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninfnnan_one_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_one_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf nnan one float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninfnnan_ueq_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_ueq_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf nnan ueq float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninfnnan_une_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_une_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf nnan une float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninf_fsub_ninfnnan_oeq_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninf_fsub_ninfnnan_oeq_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf float %x, %y
 %1 = fcmp ninf nnan oeq float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub__ult_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub__ult_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ult float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub__oge_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub__oge_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp oge float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub__olt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub__olt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp olt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub__uge_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub__uge_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp uge float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub__ule_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub__ule_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ule float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub__ogt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub__ogt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ogt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub__ole_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub__ole_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ole float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub__ugt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub__ugt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ugt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub__one_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub__one_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp one float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub__ueq_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub__ueq_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ueq float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub__une_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub__une_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqss %xmm0, %xmm1, %k0
; CHECK-NEXT:    kmovw %k0, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp une float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub__oeq_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub__oeq_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqss %xmm0, %xmm1, %k0
; CHECK-NEXT:    kmovw %k0, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp oeq float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninf_ult_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_ult_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf ult float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninf_oge_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_oge_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf oge float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninf_olt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_olt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf olt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninf_uge_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_uge_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf uge float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninf_ule_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_ule_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf ule float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninf_ogt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_ogt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf ogt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninf_ole_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_ole_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf ole float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninf_ugt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_ugt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf ugt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninf_one_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_one_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf one float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninf_ueq_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_ueq_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf ueq float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninf_une_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_une_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqss %xmm0, %xmm1, %k0
; CHECK-NEXT:    kmovw %k0, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf une float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninf_oeq_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninf_oeq_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqss %xmm0, %xmm1, %k0
; CHECK-NEXT:    kmovw %k0, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf oeq float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_nnan_ult_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_ult_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp nnan ult float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_nnan_oge_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_oge_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp nnan oge float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_nnan_olt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_olt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp nnan olt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_nnan_uge_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_uge_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp nnan uge float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_nnan_ule_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_ule_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp nnan ule float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_nnan_ogt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_ogt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp nnan ogt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_nnan_ole_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_ole_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp nnan ole float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_nnan_ugt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_ugt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp nnan ugt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_nnan_one_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_one_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp nnan one float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_nnan_ueq_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_ueq_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp nnan ueq float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_nnan_une_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_une_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp nnan une float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_nnan_oeq_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_nnan_oeq_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp nnan oeq float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninfnnan_ult_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_ult_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf nnan ult float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninfnnan_oge_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_oge_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf nnan oge float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninfnnan_olt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_olt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf nnan olt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninfnnan_uge_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_uge_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf nnan uge float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninfnnan_ule_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_ule_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf nnan ule float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninfnnan_ogt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_ogt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf nnan ogt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninfnnan_ole_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_ole_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf nnan ole float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninfnnan_ugt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_ugt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf nnan ugt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninfnnan_one_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_one_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf nnan one float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninfnnan_ueq_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_ueq_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf nnan ueq float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninfnnan_une_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_une_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf nnan une float 0x0000, %0
 ret i1 %1
 }

define i1 @test_nnan_fsub_ninfnnan_oeq_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_nnan_fsub_ninfnnan_oeq_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub nnan float %x, %y
 %1 = fcmp ninf nnan oeq float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub__ult_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub__ult_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ult float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub__oge_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub__oge_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp oge float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub__olt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub__olt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp olt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub__uge_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub__uge_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp uge float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub__ule_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub__ule_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ule float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub__ogt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub__ogt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ogt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub__ole_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub__ole_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ole float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub__ugt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub__ugt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ugt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub__one_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub__one_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp one float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub__ueq_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub__ueq_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ueq float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub__une_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub__une_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqss %xmm0, %xmm1, %k0
; CHECK-NEXT:    kmovw %k0, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp une float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub__oeq_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub__oeq_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqss %xmm0, %xmm1, %k0
; CHECK-NEXT:    kmovw %k0, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp oeq float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninf_ult_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_ult_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf ult float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninf_oge_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_oge_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf oge float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninf_olt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_olt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf olt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninf_uge_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_uge_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf uge float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninf_ule_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_ule_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf ule float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninf_ogt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_ogt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm0, %xmm1
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf ogt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninf_ole_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_ole_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf ole float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninf_ugt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_ugt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf ugt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninf_one_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_one_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf one float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninf_ueq_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_ueq_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf ueq float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninf_une_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_une_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpneqss %xmm0, %xmm1, %k0
; CHECK-NEXT:    kmovw %k0, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf une float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninf_oeq_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninf_oeq_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vcmpeqss %xmm0, %xmm1, %k0
; CHECK-NEXT:    kmovw %k0, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf oeq float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_nnan_ult_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_ult_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp nnan ult float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_nnan_oge_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_oge_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp nnan oge float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_nnan_olt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_olt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp nnan olt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_nnan_uge_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_uge_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp nnan uge float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_nnan_ule_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_ule_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp nnan ule float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_nnan_ogt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_ogt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp nnan ogt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_nnan_ole_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_ole_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp nnan ole float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_nnan_ugt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_ugt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp nnan ugt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_nnan_one_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_one_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp nnan one float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_nnan_ueq_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_ueq_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp nnan ueq float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_nnan_une_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_une_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp nnan une float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_nnan_oeq_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_nnan_oeq_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp nnan oeq float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninfnnan_ult_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_ult_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf nnan ult float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninfnnan_oge_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_oge_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf nnan oge float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninfnnan_olt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_olt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf nnan olt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninfnnan_uge_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_uge_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf nnan uge float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninfnnan_ule_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_ule_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf nnan ule float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninfnnan_ogt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_ogt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf nnan ogt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninfnnan_ole_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_ole_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf nnan ole float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninfnnan_ugt_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_ugt_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf nnan ugt float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninfnnan_one_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_one_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf nnan one float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninfnnan_ueq_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_ueq_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf nnan ueq float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninfnnan_une_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_une_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf nnan une float 0x0000, %0
 ret i1 %1
 }

define i1 @test_ninfnnan_fsub_ninfnnan_oeq_fcmp_reverse(float %x, float %y) {
; CHECK-LABEL: test_ninfnnan_fsub_ninfnnan_oeq_fcmp_reverse:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    retq
 entry:
 %0 = fsub ninf nnan float %x, %y
 %1 = fcmp ninf nnan oeq float 0x0000, %0
 ret i1 %1
 }

