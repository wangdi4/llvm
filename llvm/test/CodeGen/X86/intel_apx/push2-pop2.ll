; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_apx_f
; RUN: llc < %s -mtriple=x86_64-unknown -mattr=+push2pop2 | FileCheck %s --check-prefix=CHECK
; RUN: llc < %s -mtriple=x86_64-unknown -mattr=+push2pop2 -frame-pointer=all | FileCheck %s --check-prefix=FRAME

define void @csr1() nounwind {
; CHECK-LABEL: csr1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pushq %rbp
; CHECK-NEXT:    #APP
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    popq %rbp
; CHECK-NEXT:    retq
;
; FRAME-LABEL: csr1:
; FRAME:       # %bb.0: # %entry
; FRAME-NEXT:    pushq %rbp
; FRAME-NEXT:    movq %rsp, %rbp
; FRAME-NEXT:    #APP
; FRAME-NEXT:    #NO_APP
; FRAME-NEXT:    popq %rbp
; FRAME-NEXT:    retq
entry:
  tail call void asm sideeffect "", "~{rbp},~{dirflag},~{fpsr},~{flags}"()
  ret void
}

define void @csr2() nounwind {
; CHECK-LABEL: csr2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    push2 $1, %rbp, %r15, $0
; CHECK-NEXT:    #APP
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    pop2 $0, %r15, %rbp, $1
; CHECK-NEXT:    retq
;
; FRAME-LABEL: csr2:
; FRAME:       # %bb.0: # %entry
; FRAME-NEXT:    pushq %rbp
; FRAME-NEXT:    movq %rsp, %rbp
; FRAME-NEXT:    pushq %r15
; FRAME-NEXT:    #APP
; FRAME-NEXT:    #NO_APP
; FRAME-NEXT:    popq %r15
; FRAME-NEXT:    popq %rbp
; FRAME-NEXT:    retq
entry:
  tail call void asm sideeffect "", "~{rbp},~{r15},~{dirflag},~{fpsr},~{flags}"()
  ret void
}

define void @csr3() nounwind {
; CHECK-LABEL: csr3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pushq %rbp
; CHECK-NEXT:    push2 $0, %r15, %r14, $0
; CHECK-NEXT:    #APP
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    pop2 $0, %r14, %r15, $0
; CHECK-NEXT:    popq %rbp
; CHECK-NEXT:    retq
;
; FRAME-LABEL: csr3:
; FRAME:       # %bb.0: # %entry
; FRAME-NEXT:    pushq %rbp
; FRAME-NEXT:    movq %rsp, %rbp
; FRAME-NEXT:    push2 $0, %r15, %r14, $0
; FRAME-NEXT:    #APP
; FRAME-NEXT:    #NO_APP
; FRAME-NEXT:    pop2 $0, %r14, %r15, $0
; FRAME-NEXT:    popq %rbp
; FRAME-NEXT:    retq
entry:
  tail call void asm sideeffect "", "~{rbp},~{r15},~{r14},~{dirflag},~{fpsr},~{flags}"()
  ret void
}

define void @csr4() nounwind {
; CHECK-LABEL: csr4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    push2 $1, %rbp, %r15, $0
; CHECK-NEXT:    push2 $0, %r14, %r13, $0
; CHECK-NEXT:    #APP
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    pop2 $0, %r13, %r14, $0
; CHECK-NEXT:    pop2 $0, %r15, %rbp, $1
; CHECK-NEXT:    retq
;
; FRAME-LABEL: csr4:
; FRAME:       # %bb.0: # %entry
; FRAME-NEXT:    pushq %rbp
; FRAME-NEXT:    movq %rsp, %rbp
; FRAME-NEXT:    push2 $0, %r15, %r14, $0
; FRAME-NEXT:    pushq %r13
; FRAME-NEXT:    #APP
; FRAME-NEXT:    #NO_APP
; FRAME-NEXT:    popq %r13
; FRAME-NEXT:    pop2 $0, %r14, %r15, $0
; FRAME-NEXT:    popq %rbp
; FRAME-NEXT:    retq
entry:
  tail call void asm sideeffect "", "~{rbp},~{r15},~{r14},~{r13},~{dirflag},~{fpsr},~{flags}"()
  ret void
}

define void @csr5() nounwind {
; CHECK-LABEL: csr5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pushq %rbp
; CHECK-NEXT:    push2 $0, %r15, %r14, $0
; CHECK-NEXT:    push2 $0, %r13, %r12, $0
; CHECK-NEXT:    #APP
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    pop2 $0, %r12, %r13, $0
; CHECK-NEXT:    pop2 $0, %r14, %r15, $0
; CHECK-NEXT:    popq %rbp
; CHECK-NEXT:    retq
;
; FRAME-LABEL: csr5:
; FRAME:       # %bb.0: # %entry
; FRAME-NEXT:    pushq %rbp
; FRAME-NEXT:    movq %rsp, %rbp
; FRAME-NEXT:    push2 $0, %r15, %r14, $0
; FRAME-NEXT:    push2 $0, %r13, %r12, $0
; FRAME-NEXT:    #APP
; FRAME-NEXT:    #NO_APP
; FRAME-NEXT:    pop2 $0, %r12, %r13, $0
; FRAME-NEXT:    pop2 $0, %r14, %r15, $0
; FRAME-NEXT:    popq %rbp
; FRAME-NEXT:    retq
entry:
  tail call void asm sideeffect "", "~{rbp},~{r15},~{r14},~{r13},~{r12},~{dirflag},~{fpsr},~{flags}"()
  ret void
}

define void @csr6() nounwind {
; CHECK-LABEL: csr6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    push2 $1, %rbp, %r15, $0
; CHECK-NEXT:    push2 $0, %r14, %r13, $0
; CHECK-NEXT:    push2 $0, %r12, %rbx, $0
; CHECK-NEXT:    #APP
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    pop2 $0, %rbx, %r12, $0
; CHECK-NEXT:    pop2 $0, %r13, %r14, $0
; CHECK-NEXT:    pop2 $0, %r15, %rbp, $1
; CHECK-NEXT:    retq
;
; FRAME-LABEL: csr6:
; FRAME:       # %bb.0: # %entry
; FRAME-NEXT:    pushq %rbp
; FRAME-NEXT:    movq %rsp, %rbp
; FRAME-NEXT:    push2 $0, %r15, %r14, $0
; FRAME-NEXT:    push2 $0, %r13, %r12, $0
; FRAME-NEXT:    pushq %rbx
; FRAME-NEXT:    #APP
; FRAME-NEXT:    #NO_APP
; FRAME-NEXT:    popq %rbx
; FRAME-NEXT:    pop2 $0, %r12, %r13, $0
; FRAME-NEXT:    pop2 $0, %r14, %r15, $0
; FRAME-NEXT:    popq %rbp
; FRAME-NEXT:    retq
entry:
  tail call void asm sideeffect "", "~{rbp},~{r15},~{r14},~{r13},~{r12},~{rbx},~{dirflag},~{fpsr},~{flags}"()
  ret void
}

define i32 @csr6_alloc8(ptr %argv) nounwind {
; CHECK-LABEL: csr6_alloc8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    push2 $1, %rbp, %r15, $0
; CHECK-NEXT:    push2 $0, %r14, %r13, $0
; CHECK-NEXT:    push2 $0, %r12, %rbx, $1
; CHECK-NEXT:    #APP
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    xorl %ecx, %ecx
; CHECK-NEXT:    xorl %eax, %eax
; CHECK-NEXT:    callq *%rcx
; CHECK-NEXT:    pop2 $1, %rbx, %r12, $0
; CHECK-NEXT:    pop2 $0, %r13, %r14, $0
; CHECK-NEXT:    pop2 $0, %r15, %rbp, $1
; CHECK-NEXT:    retq
;
; FRAME-LABEL: csr6_alloc8:
; FRAME:       # %bb.0: # %entry
; FRAME-NEXT:    pushq %rbp
; FRAME-NEXT:    movq %rsp, %rbp
; FRAME-NEXT:    push2 $0, %r15, %r14, $0
; FRAME-NEXT:    push2 $0, %r13, %r12, $0
; FRAME-NEXT:    pushq %rbx
; FRAME-NEXT:    pushq %rax
; FRAME-NEXT:    #APP
; FRAME-NEXT:    #NO_APP
; FRAME-NEXT:    xorl %ecx, %ecx
; FRAME-NEXT:    xorl %eax, %eax
; FRAME-NEXT:    callq *%rcx
; FRAME-NEXT:    addq $8, %rsp
; FRAME-NEXT:    popq %rbx
; FRAME-NEXT:    pop2 $0, %r12, %r13, $0
; FRAME-NEXT:    pop2 $0, %r14, %r15, $0
; FRAME-NEXT:    popq %rbp
; FRAME-NEXT:    retq
entry:
  tail call void asm sideeffect "", "~{rbp},~{r15},~{r14},~{r13},~{r12},~{rbx},~{dirflag},~{fpsr},~{flags}"()
  %a = alloca [1 x ptr], align 8
  %b = call ptr (...) null()
  ret i32 undef
}

define i32 @csr6_alloc16(ptr %argv) nounwind {
; CHECK-LABEL: csr6_alloc16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    push2 $1, %rbp, %r15, $0
; CHECK-NEXT:    push2 $0, %r14, %r13, $0
; CHECK-NEXT:    push2 $0, %r12, %rbx, $1
; CHECK-NEXT:    #APP
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    xorl %ecx, %ecx
; CHECK-NEXT:    xorl %eax, %eax
; CHECK-NEXT:    callq *%rcx
; CHECK-NEXT:    pop2 $1, %rbx, %r12, $0
; CHECK-NEXT:    pop2 $0, %r13, %r14, $0
; CHECK-NEXT:    pop2 $0, %r15, %rbp, $1
; CHECK-NEXT:    retq
;
; FRAME-LABEL: csr6_alloc16:
; FRAME:       # %bb.0: # %entry
; FRAME-NEXT:    pushq %rbp
; FRAME-NEXT:    movq %rsp, %rbp
; FRAME-NEXT:    push2 $0, %r15, %r14, $0
; FRAME-NEXT:    push2 $0, %r13, %r12, $0
; FRAME-NEXT:    pushq %rbx
; FRAME-NEXT:    subq $24, %rsp
; FRAME-NEXT:    #APP
; FRAME-NEXT:    #NO_APP
; FRAME-NEXT:    xorl %ecx, %ecx
; FRAME-NEXT:    xorl %eax, %eax
; FRAME-NEXT:    callq *%rcx
; FRAME-NEXT:    addq $24, %rsp
; FRAME-NEXT:    popq %rbx
; FRAME-NEXT:    pop2 $0, %r12, %r13, $0
; FRAME-NEXT:    pop2 $0, %r14, %r15, $0
; FRAME-NEXT:    popq %rbp
; FRAME-NEXT:    retq
entry:
  tail call void asm sideeffect "", "~{rbp},~{r15},~{r14},~{r13},~{r12},~{rbx},~{dirflag},~{fpsr},~{flags}"()
  %a = alloca [2 x ptr], align 8
  %b = call ptr (...) null()
  ret i32 undef
}

define i32 @csr6_alloc24(ptr %argv) nounwind {
; CHECK-LABEL: csr6_alloc24:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    push2 $1, %rbp, %r15, $0
; CHECK-NEXT:    push2 $0, %r14, %r13, $0
; CHECK-NEXT:    push2 $0, %r12, %rbx, $2
; CHECK-NEXT:    #APP
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    xorl %ecx, %ecx
; CHECK-NEXT:    xorl %eax, %eax
; CHECK-NEXT:    callq *%rcx
; CHECK-NEXT:    pop2 $2, %rbx, %r12, $0
; CHECK-NEXT:    pop2 $0, %r13, %r14, $0
; CHECK-NEXT:    pop2 $0, %r15, %rbp, $1
; CHECK-NEXT:    retq
;
; FRAME-LABEL: csr6_alloc24:
; FRAME:       # %bb.0: # %entry
; FRAME-NEXT:    pushq %rbp
; FRAME-NEXT:    movq %rsp, %rbp
; FRAME-NEXT:    push2 $0, %r15, %r14, $0
; FRAME-NEXT:    push2 $0, %r13, %r12, $0
; FRAME-NEXT:    pushq %rbx
; FRAME-NEXT:    subq $24, %rsp
; FRAME-NEXT:    #APP
; FRAME-NEXT:    #NO_APP
; FRAME-NEXT:    xorl %ecx, %ecx
; FRAME-NEXT:    xorl %eax, %eax
; FRAME-NEXT:    callq *%rcx
; FRAME-NEXT:    addq $24, %rsp
; FRAME-NEXT:    popq %rbx
; FRAME-NEXT:    pop2 $0, %r12, %r13, $0
; FRAME-NEXT:    pop2 $0, %r14, %r15, $0
; FRAME-NEXT:    popq %rbp
; FRAME-NEXT:    retq
entry:
  tail call void asm sideeffect "", "~{rbp},~{r15},~{r14},~{r13},~{r12},~{rbx},~{dirflag},~{fpsr},~{flags}"()
  %a = alloca [3 x ptr], align 8
  %b = call ptr (...) null()
  ret i32 undef
}

define i32 @csr6_alloc32(ptr %argv) nounwind {
; CHECK-LABEL: csr6_alloc32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    push2 $1, %rbp, %r15, $0
; CHECK-NEXT:    push2 $0, %r14, %r13, $0
; CHECK-NEXT:    push2 $0, %r12, %rbx, $2
; CHECK-NEXT:    #APP
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    xorl %ecx, %ecx
; CHECK-NEXT:    xorl %eax, %eax
; CHECK-NEXT:    callq *%rcx
; CHECK-NEXT:    pop2 $2, %rbx, %r12, $0
; CHECK-NEXT:    pop2 $0, %r13, %r14, $0
; CHECK-NEXT:    pop2 $0, %r15, %rbp, $1
; CHECK-NEXT:    retq
;
; FRAME-LABEL: csr6_alloc32:
; FRAME:       # %bb.0: # %entry
; FRAME-NEXT:    pushq %rbp
; FRAME-NEXT:    movq %rsp, %rbp
; FRAME-NEXT:    push2 $0, %r15, %r14, $0
; FRAME-NEXT:    push2 $0, %r13, %r12, $0
; FRAME-NEXT:    pushq %rbx
; FRAME-NEXT:    subq $40, %rsp
; FRAME-NEXT:    #APP
; FRAME-NEXT:    #NO_APP
; FRAME-NEXT:    xorl %ecx, %ecx
; FRAME-NEXT:    xorl %eax, %eax
; FRAME-NEXT:    callq *%rcx
; FRAME-NEXT:    addq $40, %rsp
; FRAME-NEXT:    popq %rbx
; FRAME-NEXT:    pop2 $0, %r12, %r13, $0
; FRAME-NEXT:    pop2 $0, %r14, %r15, $0
; FRAME-NEXT:    popq %rbp
; FRAME-NEXT:    retq
entry:
  tail call void asm sideeffect "", "~{rbp},~{r15},~{r14},~{r13},~{r12},~{rbx},~{dirflag},~{fpsr},~{flags}"()
  %a = alloca [4 x ptr], align 8
  %b = call ptr (...) null()
  ret i32 undef
}

define i32 @csr6_alloc40(ptr %argv) nounwind {
; CHECK-LABEL: csr6_alloc40:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    push2 $1, %rbp, %r15, $0
; CHECK-NEXT:    push2 $0, %r14, %r13, $0
; CHECK-NEXT:    push2 $0, %r12, %rbx, $3
; CHECK-NEXT:    #APP
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    xorl %ecx, %ecx
; CHECK-NEXT:    xorl %eax, %eax
; CHECK-NEXT:    callq *%rcx
; CHECK-NEXT:    pop2 $3, %rbx, %r12, $0
; CHECK-NEXT:    pop2 $0, %r13, %r14, $0
; CHECK-NEXT:    pop2 $0, %r15, %rbp, $1
; CHECK-NEXT:    retq
;
; FRAME-LABEL: csr6_alloc40:
; FRAME:       # %bb.0: # %entry
; FRAME-NEXT:    pushq %rbp
; FRAME-NEXT:    movq %rsp, %rbp
; FRAME-NEXT:    push2 $0, %r15, %r14, $0
; FRAME-NEXT:    push2 $0, %r13, %r12, $0
; FRAME-NEXT:    pushq %rbx
; FRAME-NEXT:    subq $40, %rsp
; FRAME-NEXT:    #APP
; FRAME-NEXT:    #NO_APP
; FRAME-NEXT:    xorl %ecx, %ecx
; FRAME-NEXT:    xorl %eax, %eax
; FRAME-NEXT:    callq *%rcx
; FRAME-NEXT:    addq $40, %rsp
; FRAME-NEXT:    popq %rbx
; FRAME-NEXT:    pop2 $0, %r12, %r13, $0
; FRAME-NEXT:    pop2 $0, %r14, %r15, $0
; FRAME-NEXT:    popq %rbp
; FRAME-NEXT:    retq
entry:
  tail call void asm sideeffect "", "~{rbp},~{r15},~{r14},~{r13},~{r12},~{rbx},~{dirflag},~{fpsr},~{flags}"()
  %a = alloca [5 x ptr], align 8
  %b = call ptr (...) null()
  ret i32 undef
}

define i32 @csr6_alloc48(ptr %argv) nounwind {
; CHECK-LABEL: csr6_alloc48:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    push2 $1, %rbp, %r15, $0
; CHECK-NEXT:    push2 $0, %r14, %r13, $0
; CHECK-NEXT:    push2 $0, %r12, %rbx, $3
; CHECK-NEXT:    #APP
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    xorl %ecx, %ecx
; CHECK-NEXT:    xorl %eax, %eax
; CHECK-NEXT:    callq *%rcx
; CHECK-NEXT:    pop2 $3, %rbx, %r12, $0
; CHECK-NEXT:    pop2 $0, %r13, %r14, $0
; CHECK-NEXT:    pop2 $0, %r15, %rbp, $1
; CHECK-NEXT:    retq
;
; FRAME-LABEL: csr6_alloc48:
; FRAME:       # %bb.0: # %entry
; FRAME-NEXT:    pushq %rbp
; FRAME-NEXT:    movq %rsp, %rbp
; FRAME-NEXT:    push2 $0, %r15, %r14, $0
; FRAME-NEXT:    push2 $0, %r13, %r12, $0
; FRAME-NEXT:    pushq %rbx
; FRAME-NEXT:    subq $56, %rsp
; FRAME-NEXT:    #APP
; FRAME-NEXT:    #NO_APP
; FRAME-NEXT:    xorl %ecx, %ecx
; FRAME-NEXT:    xorl %eax, %eax
; FRAME-NEXT:    callq *%rcx
; FRAME-NEXT:    addq $56, %rsp
; FRAME-NEXT:    popq %rbx
; FRAME-NEXT:    pop2 $0, %r12, %r13, $0
; FRAME-NEXT:    pop2 $0, %r14, %r15, $0
; FRAME-NEXT:    popq %rbp
; FRAME-NEXT:    retq
entry:
  tail call void asm sideeffect "", "~{rbp},~{r15},~{r14},~{r13},~{r12},~{rbx},~{dirflag},~{fpsr},~{flags}"()
  %a = alloca [6 x ptr], align 8
  %b = call ptr (...) null()
  ret i32 undef
}

define i32 @csr6_alloc56(ptr %argv) nounwind {
; CHECK-LABEL: csr6_alloc56:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    push2 $1, %rbp, %r15, $0
; CHECK-NEXT:    push2 $0, %r14, %r13, $0
; CHECK-NEXT:    push2 $0, %r12, %rbx, $3
; CHECK-NEXT:    subq $16, %rsp
; CHECK-NEXT:    #APP
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    xorl %ecx, %ecx
; CHECK-NEXT:    xorl %eax, %eax
; CHECK-NEXT:    callq *%rcx
; CHECK-NEXT:    addq $16, %rsp
; CHECK-NEXT:    pop2 $3, %rbx, %r12, $0
; CHECK-NEXT:    pop2 $0, %r13, %r14, $0
; CHECK-NEXT:    pop2 $0, %r15, %rbp, $1
; CHECK-NEXT:    retq
;
; FRAME-LABEL: csr6_alloc56:
; FRAME:       # %bb.0: # %entry
; FRAME-NEXT:    pushq %rbp
; FRAME-NEXT:    movq %rsp, %rbp
; FRAME-NEXT:    push2 $0, %r15, %r14, $0
; FRAME-NEXT:    push2 $0, %r13, %r12, $0
; FRAME-NEXT:    pushq %rbx
; FRAME-NEXT:    subq $56, %rsp
; FRAME-NEXT:    #APP
; FRAME-NEXT:    #NO_APP
; FRAME-NEXT:    xorl %ecx, %ecx
; FRAME-NEXT:    xorl %eax, %eax
; FRAME-NEXT:    callq *%rcx
; FRAME-NEXT:    addq $56, %rsp
; FRAME-NEXT:    popq %rbx
; FRAME-NEXT:    pop2 $0, %r12, %r13, $0
; FRAME-NEXT:    pop2 $0, %r14, %r15, $0
; FRAME-NEXT:    popq %rbp
; FRAME-NEXT:    retq
entry:
  tail call void asm sideeffect "", "~{rbp},~{r15},~{r14},~{r13},~{r12},~{rbx},~{dirflag},~{fpsr},~{flags}"()
  %a = alloca [7 x ptr], align 8
  %b = call ptr (...) null()
  ret i32 undef
}

define i32 @csr6_alloc64(ptr %argv) nounwind {
; CHECK-LABEL: csr6_alloc64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    push2 $1, %rbp, %r15, $0
; CHECK-NEXT:    push2 $0, %r14, %r13, $0
; CHECK-NEXT:    push2 $0, %r12, %rbx, $3
; CHECK-NEXT:    subq $16, %rsp
; CHECK-NEXT:    #APP
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    xorl %ecx, %ecx
; CHECK-NEXT:    xorl %eax, %eax
; CHECK-NEXT:    callq *%rcx
; CHECK-NEXT:    addq $16, %rsp
; CHECK-NEXT:    pop2 $3, %rbx, %r12, $0
; CHECK-NEXT:    pop2 $0, %r13, %r14, $0
; CHECK-NEXT:    pop2 $0, %r15, %rbp, $1
; CHECK-NEXT:    retq
;
; FRAME-LABEL: csr6_alloc64:
; FRAME:       # %bb.0: # %entry
; FRAME-NEXT:    pushq %rbp
; FRAME-NEXT:    movq %rsp, %rbp
; FRAME-NEXT:    push2 $0, %r15, %r14, $0
; FRAME-NEXT:    push2 $0, %r13, %r12, $0
; FRAME-NEXT:    pushq %rbx
; FRAME-NEXT:    subq $72, %rsp
; FRAME-NEXT:    #APP
; FRAME-NEXT:    #NO_APP
; FRAME-NEXT:    xorl %ecx, %ecx
; FRAME-NEXT:    xorl %eax, %eax
; FRAME-NEXT:    callq *%rcx
; FRAME-NEXT:    addq $72, %rsp
; FRAME-NEXT:    popq %rbx
; FRAME-NEXT:    pop2 $0, %r12, %r13, $0
; FRAME-NEXT:    pop2 $0, %r14, %r15, $0
; FRAME-NEXT:    popq %rbp
; FRAME-NEXT:    retq
entry:
  tail call void asm sideeffect "", "~{rbp},~{r15},~{r14},~{r13},~{r12},~{rbx},~{dirflag},~{fpsr},~{flags}"()
  %a = alloca [8 x ptr], align 8
  %b = call ptr (...) null()
  ret i32 undef
}
