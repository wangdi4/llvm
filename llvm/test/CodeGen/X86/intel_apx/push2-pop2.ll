; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_apx_f
; RUN: llc < %s -mtriple=x86_64-unknown -mattr=+push2pop2 | FileCheck %s --check-prefix=CHECK
; RUN: llc < %s -mtriple=x86_64-unknown -mattr=+push2pop2 -frame-pointer=all | FileCheck %s --check-prefix=FRAME

define void @csr1() nounwind {
; CHECK-LABEL: csr1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pushq %rbp
; CHECK-NEXT:    #APP
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    popq %rbp
; CHECK-NEXT:    retq
;
; FRAME-LABEL: csr1:
; FRAME:       # %bb.0: # %entry
; FRAME-NEXT:    pushq %rbp
; FRAME-NEXT:    movq %rsp, %rbp
; FRAME-NEXT:    #APP
; FRAME-NEXT:    #NO_APP
; FRAME-NEXT:    popq %rbp
; FRAME-NEXT:    retq
entry:
  tail call void asm sideeffect "", "~{rbp},~{dirflag},~{fpsr},~{flags}"()
  ret void
}

define void @csr2() nounwind {
; CHECK-LABEL: csr2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    push2 %rbp, %r15
; CHECK-NEXT:    #APP
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    pop2 %r15, %rbp
; CHECK-NEXT:    popq %rax
; CHECK-NEXT:    retq
;
; FRAME-LABEL: csr2:
; FRAME:       # %bb.0: # %entry
; FRAME-NEXT:    pushq %rbp
; FRAME-NEXT:    movq %rsp, %rbp
; FRAME-NEXT:    pushq %r15
; FRAME-NEXT:    #APP
; FRAME-NEXT:    #NO_APP
; FRAME-NEXT:    popq %r15
; FRAME-NEXT:    popq %rbp
; FRAME-NEXT:    retq
entry:
  tail call void asm sideeffect "", "~{rbp},~{r15},~{dirflag},~{fpsr},~{flags}"()
  ret void
}

define void @csr3() nounwind {
; CHECK-LABEL: csr3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pushq %rbp
; CHECK-NEXT:    push2 %r15, %r14
; CHECK-NEXT:    #APP
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    pop2 %r14, %r15
; CHECK-NEXT:    popq %rbp
; CHECK-NEXT:    retq
;
; FRAME-LABEL: csr3:
; FRAME:       # %bb.0: # %entry
; FRAME-NEXT:    pushq %rbp
; FRAME-NEXT:    movq %rsp, %rbp
; FRAME-NEXT:    push2 %r15, %r14
; FRAME-NEXT:    #APP
; FRAME-NEXT:    #NO_APP
; FRAME-NEXT:    pop2 %r14, %r15
; FRAME-NEXT:    popq %rbp
; FRAME-NEXT:    retq
entry:
  tail call void asm sideeffect "", "~{rbp},~{r15},~{r14},~{dirflag},~{fpsr},~{flags}"()
  ret void
}

define void @csr4() nounwind {
; CHECK-LABEL: csr4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    push2 %rbp, %r15
; CHECK-NEXT:    push2 %r14, %r13
; CHECK-NEXT:    #APP
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    pop2 %r13, %r14
; CHECK-NEXT:    pop2 %r15, %rbp
; CHECK-NEXT:    popq %rax
; CHECK-NEXT:    retq
;
; FRAME-LABEL: csr4:
; FRAME:       # %bb.0: # %entry
; FRAME-NEXT:    pushq %rbp
; FRAME-NEXT:    movq %rsp, %rbp
; FRAME-NEXT:    push2 %r15, %r14
; FRAME-NEXT:    pushq %r13
; FRAME-NEXT:    #APP
; FRAME-NEXT:    #NO_APP
; FRAME-NEXT:    popq %r13
; FRAME-NEXT:    pop2 %r14, %r15
; FRAME-NEXT:    popq %rbp
; FRAME-NEXT:    retq
entry:
  tail call void asm sideeffect "", "~{rbp},~{r15},~{r14},~{r13},~{dirflag},~{fpsr},~{flags}"()
  ret void
}

define void @csr5() nounwind {
; CHECK-LABEL: csr5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pushq %rbp
; CHECK-NEXT:    push2 %r15, %r14
; CHECK-NEXT:    push2 %r13, %r12
; CHECK-NEXT:    #APP
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    pop2 %r12, %r13
; CHECK-NEXT:    pop2 %r14, %r15
; CHECK-NEXT:    popq %rbp
; CHECK-NEXT:    retq
;
; FRAME-LABEL: csr5:
; FRAME:       # %bb.0: # %entry
; FRAME-NEXT:    pushq %rbp
; FRAME-NEXT:    movq %rsp, %rbp
; FRAME-NEXT:    push2 %r15, %r14
; FRAME-NEXT:    push2 %r13, %r12
; FRAME-NEXT:    #APP
; FRAME-NEXT:    #NO_APP
; FRAME-NEXT:    pop2 %r12, %r13
; FRAME-NEXT:    pop2 %r14, %r15
; FRAME-NEXT:    popq %rbp
; FRAME-NEXT:    retq
entry:
  tail call void asm sideeffect "", "~{rbp},~{r15},~{r14},~{r13},~{r12},~{dirflag},~{fpsr},~{flags}"()
  ret void
}

define void @csr6() nounwind {
; CHECK-LABEL: csr6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    push2 %rbp, %r15
; CHECK-NEXT:    push2 %r14, %r13
; CHECK-NEXT:    push2 %r12, %rbx
; CHECK-NEXT:    #APP
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    pop2 %rbx, %r12
; CHECK-NEXT:    pop2 %r13, %r14
; CHECK-NEXT:    pop2 %r15, %rbp
; CHECK-NEXT:    popq %rax
; CHECK-NEXT:    retq
;
; FRAME-LABEL: csr6:
; FRAME:       # %bb.0: # %entry
; FRAME-NEXT:    pushq %rbp
; FRAME-NEXT:    movq %rsp, %rbp
; FRAME-NEXT:    push2 %r15, %r14
; FRAME-NEXT:    push2 %r13, %r12
; FRAME-NEXT:    pushq %rbx
; FRAME-NEXT:    #APP
; FRAME-NEXT:    #NO_APP
; FRAME-NEXT:    popq %rbx
; FRAME-NEXT:    pop2 %r12, %r13
; FRAME-NEXT:    pop2 %r14, %r15
; FRAME-NEXT:    popq %rbp
; FRAME-NEXT:    retq
entry:
  tail call void asm sideeffect "", "~{rbp},~{r15},~{r14},~{r13},~{r12},~{rbx},~{dirflag},~{fpsr},~{flags}"()
  ret void
}
