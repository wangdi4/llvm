; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-pc-linux-gnu -mattr=+ndd -show-mc-encoding | FileCheck %s --check-prefix=X64

; PR8365

define i64 @bra(i32 %zed) nounwind {
; X64-LABEL: bra:
; X64:       # %bb.0:
; X64-NEXT:    andl $-64, %edi, %eax # encoding: [0x62,0xf4,0x7c,0x18,0x83,0xe7,0xc0]
; X64-NEXT:    retq # encoding: [0xc3]
 %t1 = zext i32 %zed to i64
 %t2 = and i64  %t1, 4294967232
 ret i64 %t2
}

define void @foo(i64 %zed, ptr %x) nounwind {
; X64-LABEL: foo:
; X64:       # %bb.0:
; X64-NEXT:    andq $-4, %rdi, %rax # encoding: [0x62,0xf4,0xfc,0x18,0x83,0xe7,0xfc]
; X64-NEXT:    orq $2, %rax # encoding: [0x48,0x83,0xc8,0x02]
; X64-NEXT:    movq %rax, (%rsi) # encoding: [0x48,0x89,0x06]
; X64-NEXT:    retq # encoding: [0xc3]
  %t1 = and i64 %zed, -4
  %t2 = or i64 %t1, 2
  store i64 %t2, ptr %x, align 8
  ret void
}

define i64 @bar(i64 %zed) nounwind {
; X64-LABEL: bar:
; X64:       # %bb.0:
; X64-NEXT:    andl $42, %edi, %eax # encoding: [0x62,0xf4,0x7c,0x18,0x83,0xe7,0x2a]
; X64-NEXT:    retq # encoding: [0xc3]
  %t1 = and i64 %zed, 42
  ret i64 %t1
}

define i64 @baz(i64 %zed) nounwind {
; X64-LABEL: baz:
; X64:       # %bb.0:
; X64-NEXT:    andl $2147483647, %edi, %eax # encoding: [0x62,0xf4,0x7c,0x18,0x81,0xe7,0xff,0xff,0xff,0x7f]
; X64-NEXT:    # imm = 0x7FFFFFFF
; X64-NEXT:    retq # encoding: [0xc3]
  %t1 = and i64 %zed, 2147483647
  ret i64 %t1
}
