; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
; REQUIRES: intel_feature_isa_apx_f
; RUN: llc < %s -mtriple=x86_64-unknown -stop-after=x86-isel -mattr=+avx512f,+avx512bw,+egpr | FileCheck %s

define void @bitcast_16i8_store(ptr %p, <16 x i8> %a0) {
  ; CHECK-LABEL: name: bitcast_16i8_store
  ; CHECK: bb.0 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $rdi, $xmm0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:vr128 = COPY $xmm0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gr64 = COPY $rdi
  ; CHECK-NEXT:   [[DEF:%[0-9]+]]:vr512 = IMPLICIT_DEF
  ; CHECK-NEXT:   [[INSERT_SUBREG:%[0-9]+]]:vr512 = INSERT_SUBREG [[DEF]], [[COPY]], %subreg.sub_xmm
  ; CHECK-NEXT:   [[VPMOVB2MZrr:%[0-9]+]]:vk64 = VPMOVB2MZrr killed [[INSERT_SUBREG]]
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:vk16 = COPY [[VPMOVB2MZrr]]
  ; CHECK-NEXT:   KMOVWmk_EVEX [[COPY1]], 1, $noreg, 0, $noreg, killed [[COPY2]] :: (store (s16) into %ir.p)
  ; CHECK-NEXT:   RET 0
  %a1 = icmp slt <16 x i8> %a0, zeroinitializer
  %a2 = bitcast <16 x i1> %a1 to i16
  store i16 %a2, ptr %p
  ret void
}

define void @bitcast_32i8_store(ptr %p, <32 x i8> %a0) {
  ; CHECK-LABEL: name: bitcast_32i8_store
  ; CHECK: bb.0 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $rdi, $ymm0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:vr256 = COPY $ymm0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gr64 = COPY $rdi
  ; CHECK-NEXT:   [[DEF:%[0-9]+]]:vr512 = IMPLICIT_DEF
  ; CHECK-NEXT:   [[INSERT_SUBREG:%[0-9]+]]:vr512 = INSERT_SUBREG [[DEF]], [[COPY]], %subreg.sub_ymm
  ; CHECK-NEXT:   [[VPMOVB2MZrr:%[0-9]+]]:vk64 = VPMOVB2MZrr killed [[INSERT_SUBREG]]
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:vk32 = COPY [[VPMOVB2MZrr]]
  ; CHECK-NEXT:   KMOVDmk_EVEX [[COPY1]], 1, $noreg, 0, $noreg, killed [[COPY2]] :: (store (s32) into %ir.p)
  ; CHECK-NEXT:   RET 0
  %a1 = icmp slt <32 x i8> %a0, zeroinitializer
  %a2 = bitcast <32 x i1> %a1 to i32
  store i32 %a2, ptr %p
  ret void
}

define void @bitcast_64i8_store(ptr %p, <64 x i8> %a0) {
  ; CHECK-LABEL: name: bitcast_64i8_store
  ; CHECK: bb.0 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $rdi, $zmm0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:vr512 = COPY $zmm0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gr64 = COPY $rdi
  ; CHECK-NEXT:   [[VPMOVB2MZrr:%[0-9]+]]:vk64 = VPMOVB2MZrr [[COPY]]
  ; CHECK-NEXT:   KMOVQmk_EVEX [[COPY1]], 1, $noreg, 0, $noreg, killed [[VPMOVB2MZrr]] :: (store (s64) into %ir.p)
  ; CHECK-NEXT:   RET 0
  %a1 = icmp slt <64 x i8> %a0, zeroinitializer
  %a2 = bitcast <64 x i1> %a1 to i64
  store i64 %a2, ptr %p
  ret void
}

define <16 x i1> @bitcast_16i8_load(ptr %p, <16 x i1> %a, <16 x i1> %b) {
  ; CHECK-LABEL: name: bitcast_16i8_load
  ; CHECK: bb.0 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $rdi, $xmm0, $xmm1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:vr128 = COPY $xmm1
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:vr128 = COPY $xmm0
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:gr64 = COPY $rdi
  ; CHECK-NEXT:   [[VPSLLWri:%[0-9]+]]:vr128 = VPSLLWri [[COPY]], 7
  ; CHECK-NEXT:   [[DEF:%[0-9]+]]:vr512 = IMPLICIT_DEF
  ; CHECK-NEXT:   [[INSERT_SUBREG:%[0-9]+]]:vr512 = INSERT_SUBREG [[DEF]], killed [[VPSLLWri]], %subreg.sub_xmm
  ; CHECK-NEXT:   [[VPMOVB2MZrr:%[0-9]+]]:vk64 = VPMOVB2MZrr killed [[INSERT_SUBREG]]
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:vk16 = COPY [[VPMOVB2MZrr]]
  ; CHECK-NEXT:   [[VPSLLWri1:%[0-9]+]]:vr128 = VPSLLWri [[COPY1]], 7
  ; CHECK-NEXT:   [[AVX512_128_SET0_:%[0-9]+]]:vr128 = AVX512_128_SET0
  ; CHECK-NEXT:   [[KMOVWkm_EVEX:%[0-9]+]]:vk16 = KMOVWkm_EVEX [[COPY2]], 1, $noreg, 0, $noreg :: (load (s16) from %ir.p)
  ; CHECK-NEXT:   [[DEF1:%[0-9]+]]:vr512 = IMPLICIT_DEF
  ; CHECK-NEXT:   [[INSERT_SUBREG1:%[0-9]+]]:vr512 = INSERT_SUBREG [[DEF1]], killed [[AVX512_128_SET0_]], %subreg.sub_xmm
  ; CHECK-NEXT:   [[DEF2:%[0-9]+]]:vr512 = IMPLICIT_DEF
  ; CHECK-NEXT:   [[INSERT_SUBREG2:%[0-9]+]]:vr512 = INSERT_SUBREG [[DEF2]], killed [[VPSLLWri1]], %subreg.sub_xmm
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:vk64wm = COPY [[KMOVWkm_EVEX]]
  ; CHECK-NEXT:   [[VPCMPBZrrik:%[0-9]+]]:vk64 = VPCMPBZrrik killed [[COPY4]], killed [[INSERT_SUBREG1]], killed [[INSERT_SUBREG2]], 6
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:vk16 = COPY [[VPCMPBZrrik]]
  ; CHECK-NEXT:   [[KANDNWrr:%[0-9]+]]:vk16 = KANDNWrr [[KMOVWkm_EVEX]], killed [[COPY3]]
  ; CHECK-NEXT:   [[KORWrr:%[0-9]+]]:vk16 = KORWrr killed [[COPY5]], killed [[KANDNWrr]]
  ; CHECK-NEXT:   [[COPY6:%[0-9]+]]:vk64 = COPY [[KORWrr]]
  ; CHECK-NEXT:   [[VPMOVM2BZrr:%[0-9]+]]:vr512 = VPMOVM2BZrr killed [[COPY6]]
  ; CHECK-NEXT:   [[COPY7:%[0-9]+]]:vr128 = COPY [[VPMOVM2BZrr]].sub_xmm
  ; CHECK-NEXT:   $xmm0 = COPY [[COPY7]]
  ; CHECK-NEXT:   RET 0, $xmm0
  %mask = load i16, ptr %p
  %vmask = bitcast i16 %mask to <16 x i1>
  %res = select <16 x i1> %vmask, <16 x i1> %a, <16 x i1> %b
  ret <16 x i1> %res
}

define <32 x i1> @bitcast_32i8_load(ptr %p, <32 x i1> %a, <32 x i1> %b) {
  ; CHECK-LABEL: name: bitcast_32i8_load
  ; CHECK: bb.0 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $rdi, $ymm0, $ymm1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:vr256 = COPY $ymm1
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:vr256 = COPY $ymm0
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:gr64 = COPY $rdi
  ; CHECK-NEXT:   [[VPSLLWYri:%[0-9]+]]:vr256 = VPSLLWYri [[COPY]], 7
  ; CHECK-NEXT:   [[DEF:%[0-9]+]]:vr512 = IMPLICIT_DEF
  ; CHECK-NEXT:   [[INSERT_SUBREG:%[0-9]+]]:vr512 = INSERT_SUBREG [[DEF]], killed [[VPSLLWYri]], %subreg.sub_ymm
  ; CHECK-NEXT:   [[VPMOVB2MZrr:%[0-9]+]]:vk64 = VPMOVB2MZrr killed [[INSERT_SUBREG]]
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:vk32 = COPY [[VPMOVB2MZrr]]
  ; CHECK-NEXT:   [[VPSLLWYri1:%[0-9]+]]:vr256 = VPSLLWYri [[COPY1]], 7
  ; CHECK-NEXT:   [[AVX512_256_SET0_:%[0-9]+]]:vr256 = AVX512_256_SET0
  ; CHECK-NEXT:   [[KMOVDkm_EVEX:%[0-9]+]]:vk32 = KMOVDkm_EVEX [[COPY2]], 1, $noreg, 0, $noreg :: (load (s32) from %ir.p)
  ; CHECK-NEXT:   [[DEF1:%[0-9]+]]:vr512 = IMPLICIT_DEF
  ; CHECK-NEXT:   [[INSERT_SUBREG1:%[0-9]+]]:vr512 = INSERT_SUBREG [[DEF1]], killed [[AVX512_256_SET0_]], %subreg.sub_ymm
  ; CHECK-NEXT:   [[DEF2:%[0-9]+]]:vr512 = IMPLICIT_DEF
  ; CHECK-NEXT:   [[INSERT_SUBREG2:%[0-9]+]]:vr512 = INSERT_SUBREG [[DEF2]], killed [[VPSLLWYri1]], %subreg.sub_ymm
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:vk64wm = COPY [[KMOVDkm_EVEX]]
  ; CHECK-NEXT:   [[VPCMPBZrrik:%[0-9]+]]:vk64 = VPCMPBZrrik killed [[COPY4]], killed [[INSERT_SUBREG1]], killed [[INSERT_SUBREG2]], 6
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:vk32 = COPY [[VPCMPBZrrik]]
  ; CHECK-NEXT:   [[KANDNDrr:%[0-9]+]]:vk32 = KANDNDrr [[KMOVDkm_EVEX]], killed [[COPY3]]
  ; CHECK-NEXT:   [[KORDrr:%[0-9]+]]:vk32 = KORDrr killed [[COPY5]], killed [[KANDNDrr]]
  ; CHECK-NEXT:   [[COPY6:%[0-9]+]]:vk64 = COPY [[KORDrr]]
  ; CHECK-NEXT:   [[VPMOVM2BZrr:%[0-9]+]]:vr512 = VPMOVM2BZrr killed [[COPY6]]
  ; CHECK-NEXT:   [[COPY7:%[0-9]+]]:vr256 = COPY [[VPMOVM2BZrr]].sub_ymm
  ; CHECK-NEXT:   $ymm0 = COPY [[COPY7]]
  ; CHECK-NEXT:   RET 0, $ymm0
  %mask = load i32, ptr %p
  %vmask = bitcast i32 %mask to <32 x i1>
  %res = select <32 x i1> %vmask, <32 x i1> %a, <32 x i1> %b
  ret <32 x i1> %res
}

define <64 x i1> @bitcast_64i8_load(ptr %p, <64 x i1> %a, <64 x i1> %b) {
  ; CHECK-LABEL: name: bitcast_64i8_load
  ; CHECK: bb.0 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $rdi, $zmm0, $zmm1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:vr512 = COPY $zmm1
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:vr512 = COPY $zmm0
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:gr64 = COPY $rdi
  ; CHECK-NEXT:   [[VPSLLWZri:%[0-9]+]]:vr512 = VPSLLWZri [[COPY]], 7
  ; CHECK-NEXT:   [[VPMOVB2MZrr:%[0-9]+]]:vk64 = VPMOVB2MZrr killed [[VPSLLWZri]]
  ; CHECK-NEXT:   [[VPSLLWZri1:%[0-9]+]]:vr512 = VPSLLWZri [[COPY1]], 7
  ; CHECK-NEXT:   [[AVX512_512_SET0_:%[0-9]+]]:vr512 = AVX512_512_SET0
  ; CHECK-NEXT:   [[KMOVQkm_EVEX:%[0-9]+]]:vk64wm = KMOVQkm_EVEX [[COPY2]], 1, $noreg, 0, $noreg :: (load (s64) from %ir.p)
  ; CHECK-NEXT:   [[VPCMPBZrrik:%[0-9]+]]:vk64 = VPCMPBZrrik [[KMOVQkm_EVEX]], killed [[AVX512_512_SET0_]], killed [[VPSLLWZri1]], 6
  ; CHECK-NEXT:   [[KANDNQrr:%[0-9]+]]:vk64 = KANDNQrr [[KMOVQkm_EVEX]], killed [[VPMOVB2MZrr]]
  ; CHECK-NEXT:   [[KORQrr:%[0-9]+]]:vk64 = KORQrr killed [[VPCMPBZrrik]], killed [[KANDNQrr]]
  ; CHECK-NEXT:   [[VPMOVM2BZrr:%[0-9]+]]:vr512 = VPMOVM2BZrr killed [[KORQrr]]
  ; CHECK-NEXT:   $zmm0 = COPY [[VPMOVM2BZrr]]
  ; CHECK-NEXT:   RET 0, $zmm0
  %mask = load i64, ptr %p
  %vmask = bitcast i64 %mask to <64 x i1>
  %res = select <64 x i1> %vmask, <64 x i1> %a, <64 x i1> %b
  ret <64 x i1> %res
}
