; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_apx_f
; RUN: llc < %s -mtriple=x86_64-unknown -mattr=+push2pop2 | FileCheck %s

%struct.widget = type { ptr, i32, i32, i8 }

define fastcc i8 @quux(i64 %arg2, ptr %arg3, ptr %arg4, ptr %arg6) {
; CHECK-LABEL: quux:
; CHECK:       # %bb.0: # %bb
; CHECK-NEXT:    pushq %rbp
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    .cfi_offset %rbp, -16
; CHECK-NEXT:    movq %rsp, %rbp
; CHECK-NEXT:    .cfi_def_cfa_register %rbp
; CHECK-NEXT:    push2 $0, %r15, %r14, $0
; CHECK-NEXT:    push2 $0, %r12, %rbx, $2
; CHECK-NEXT:    .cfi_offset %rbx, -48
; CHECK-NEXT:    .cfi_offset %r12, -40
; CHECK-NEXT:    .cfi_offset %r14, -32
; CHECK-NEXT:    .cfi_offset %r15, -24
; CHECK-NEXT:    movq %rcx, %rbx
; CHECK-NEXT:    movq %rdx, %r14
; CHECK-NEXT:    movq %rsi, %r15
; CHECK-NEXT:    movq %rsp, %rax
; CHECK-NEXT:    addq $15, %rdi
; CHECK-NEXT:    andq $-16, %rdi
; CHECK-NEXT:    subq %rdi, %rax
; CHECK-NEXT:    movq %rax, %rsp
; CHECK-NEXT:    xorl %r12d, %r12d
; CHECK-NEXT:    xorl %eax, %eax
; CHECK-NEXT:    callq *%r12
; CHECK-NEXT:    movq %r15, 0
; CHECK-NEXT:    movq $0, (%r14)
; CHECK-NEXT:    movq %rbx, %rdi
; CHECK-NEXT:    xorl %esi, %esi
; CHECK-NEXT:    callq *%r12
; CHECK-NEXT:    xorl %eax, %eax
; CHECK-NEXT:    leaq -32(%rbp), %rsp
; CHECK-NEXT:    pop2 $0, %rbx, %r12, $0
; CHECK-NEXT:    pop2 $0, %r14, %r15, $0
; CHECK-NEXT:    popq %rbp
; CHECK-NEXT:    .cfi_def_cfa %rsp, 8
; CHECK-NEXT:    retq
bb:
  %inst = alloca %struct.widget, align 8
  %inst10 = alloca i8, i64 %arg2, align 16
  %inst11 = call ptr (...) null()
  store ptr %arg3, ptr null, align 8
  store ptr null, ptr %arg4, align 8
  call fastcc void null(ptr %arg6, ptr null)
  ret i8 0
}
