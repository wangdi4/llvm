; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_apx_f
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+cmov,+ndd | FileCheck %s --check-prefix=X64

;
; PR48768 - 'or' clears the overflow flag, so we don't need a separate 'test'.
;

define i8 @or_i8_ri(i8 zeroext %0, i8 zeroext %1) {
; X64-LABEL: or_i8_ri:
; X64:       # %bb.0:
; X64-NEXT:    orb $-17, %dil, %al
; X64-NEXT:    movzbl %al, %eax
; X64-NEXT:    cmovel %edi, %eax, %eax
; X64-NEXT:    # kill: def $al killed $al killed $eax
; X64-NEXT:    retq
  %3 = or i8 %0, -17
  %4 = icmp eq i8 %3, 0
  %5 = select i1 %4, i8 %0, i8 %3
  ret i8 %5
}

define i8 @or_i8_rr(i8 zeroext %0, i8 zeroext %1) {
; X64-LABEL: or_i8_rr:
; X64:       # %bb.0:
; X64-NEXT:    orl %edi, %esi, %eax
; X64-NEXT:    cmovel %edi, %eax, %eax
; X64-NEXT:    # kill: def $al killed $al killed $eax
; X64-NEXT:    retq
  %3 = or i8 %1, %0
  %4 = icmp eq i8 %3, 0
  %5 = select i1 %4, i8 %0, i8 %3
  ret i8 %5
}

define i16 @or_i16_ri(i16 zeroext %0, i16 zeroext %1) {
; X64-LABEL: or_i16_ri:
; X64:       # %bb.0:
; X64-NEXT:    orl $65519, %edi, %eax # imm = 0xFFEF
; X64-NEXT:    cmovel %edi, %eax, %eax
; X64-NEXT:    # kill: def $ax killed $ax killed $eax
; X64-NEXT:    retq
  %3 = or i16 %0, -17
  %4 = icmp eq i16 %3, 0
  %5 = select i1 %4, i16 %0, i16 %3
  ret i16 %5
}

define i16 @or_i16_rr(i16 zeroext %0, i16 zeroext %1) {
; X64-LABEL: or_i16_rr:
; X64:       # %bb.0:
; X64-NEXT:    orl %edi, %esi, %eax
; X64-NEXT:    cmovel %edi, %eax, %eax
; X64-NEXT:    # kill: def $ax killed $ax killed $eax
; X64-NEXT:    retq
  %3 = or i16 %1, %0
  %4 = icmp eq i16 %3, 0
  %5 = select i1 %4, i16 %0, i16 %3
  ret i16 %5
}

define i32 @or_i32_ri(i32 %0, i32 %1) {
; X64-LABEL: or_i32_ri:
; X64:       # %bb.0:
; X64-NEXT:    orl $-17, %edi, %eax
; X64-NEXT:    cmovlel %edi, %eax, %eax
; X64-NEXT:    retq
  %3 = or i32 %0, -17
  %4 = icmp slt i32 %3, 1
  %5 = select i1 %4, i32 %0, i32 %3
  ret i32 %5
}

define i32 @or_i32_rr(i32 %0, i32 %1) {
; X64-LABEL: or_i32_rr:
; X64:       # %bb.0:
; X64-NEXT:    orl %edi, %esi, %eax
; X64-NEXT:    cmovlel %edi, %eax, %eax
; X64-NEXT:    retq
  %3 = or i32 %1, %0
  %4 = icmp slt i32 %3, 1
  %5 = select i1 %4, i32 %0, i32 %3
  ret i32 %5
}

define i64 @or_i64_ri(i64 %0, i64 %1) nounwind {
; X64-LABEL: or_i64_ri:
; X64:       # %bb.0:
; X64-NEXT:    orq $17, %rdi, %rax
; X64-NEXT:    cmovleq %rdi, %rax, %rax
; X64-NEXT:    retq
  %3 = or i64 %0, 17
  %4 = icmp slt i64 %3, 1
  %5 = select i1 %4, i64 %0, i64 %3
  ret i64 %5
}

define i64 @or_i64_rr(i64 %0, i64 %1) nounwind {
; X64-LABEL: or_i64_rr:
; X64:       # %bb.0:
; X64-NEXT:    orq %rdi, %rsi, %rax
; X64-NEXT:    cmovleq %rdi, %rax, %rax
; X64-NEXT:    retq
  %3 = or i64 %1, %0
  %4 = icmp slt i64 %3, 1
  %5 = select i1 %4, i64 %0, i64 %3
  ret i64 %5
}
