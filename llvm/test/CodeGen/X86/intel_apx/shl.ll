; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_apx_f
; RUN: llc < %s -mtriple=x86_64-unknown -mattr=+ndd -verify-machineinstrs | FileCheck %s

define i8 @shl8ri(i8 noundef %a) {
; CHECK-LABEL: shl8ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    shlb $4, %dil, %al
; CHECK-NEXT:    retq
entry:
  %shl = shl i8 %a, 4
  ret i8 %shl
}

define i16 @shl16ri(i16 noundef %a) {
; CHECK-LABEL: shl16ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    shll $4, %edi, %eax
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
  %shl = shl i16 %a, 4
  ret i16 %shl
}

define i32 @shl32ri(i32 noundef %a) {
; CHECK-LABEL: shl32ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    shll $4, %edi, %eax
; CHECK-NEXT:    retq
entry:
  %shl = shl i32 %a, 4
  ret i32 %shl
}

define i64 @shl64ri(i64 noundef %a) {
; CHECK-LABEL: shl64ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    shlq $4, %rdi, %rax
; CHECK-NEXT:    retq
entry:
  %shl = shl i64 %a, 4
  ret i64 %shl
}

define i8 @shl8m1(ptr %ptr) {
; CHECK-LABEL: shl8m1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movzbl (%rdi), %eax
; CHECK-NEXT:    addb %al, %al
; CHECK-NEXT:    retq
entry:
  %a = load i8, ptr %ptr
  %shl = shl i8 %a, 1
  ret i8 %shl
}

define i16 @shl16m1(ptr %ptr) {
; CHECK-LABEL: shl16m1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movzwl (%rdi), %eax
; CHECK-NEXT:    addl %eax, %eax
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
  %a = load i16, ptr %ptr
  %shl = shl i16 %a, 1
  ret i16 %shl
}

define i32 @shl32m1(ptr %ptr) {
; CHECK-LABEL: shl32m1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movl (%rdi), %eax
; CHECK-NEXT:    addl %eax, %eax
; CHECK-NEXT:    retq
entry:
  %a = load i32, ptr %ptr
  %shl = shl i32 %a, 1
  ret i32 %shl
}

define i64 @shl64m1(ptr %ptr) {
; CHECK-LABEL: shl64m1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movq (%rdi), %rax
; CHECK-NEXT:    addq %rax, %rax
; CHECK-NEXT:    retq
entry:
  %a = load i64, ptr %ptr
  %shl = shl i64 %a, 1
  ret i64 %shl
}

define i8 @shl8mcl(ptr %ptr, i8 %cl) {
; CHECK-LABEL: shl8mcl:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movl %esi, %ecx
; CHECK-NEXT:    # kill: def $cl killed $cl killed $ecx
; CHECK-NEXT:    shlb %cl, (%rdi), %al
; CHECK-NEXT:    retq
entry:
  %a = load i8, ptr %ptr
  %shl = shl i8 %a, %cl
  ret i8 %shl
}

define i16 @shl16mcl(ptr %ptr, i16 %cl) {
; CHECK-LABEL: shl16mcl:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movl %esi, %ecx
; CHECK-NEXT:    movzwl (%rdi), %eax
; CHECK-NEXT:    # kill: def $cl killed $cl killed $ecx
; CHECK-NEXT:    shll %cl, %eax
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
  %a = load i16, ptr %ptr
  %shl = shl i16 %a, %cl
  ret i16 %shl
}

define i32 @shl32mcl(ptr %ptr, i32 %cl) {
; CHECK-LABEL: shl32mcl:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movl %esi, %ecx
; CHECK-NEXT:    # kill: def $cl killed $cl killed $ecx
; CHECK-NEXT:    shll %cl, (%rdi), %eax
; CHECK-NEXT:    retq
entry:
  %a = load i32, ptr %ptr
  %shl = shl i32 %a, %cl
  ret i32 %shl
}

define i64 @shl64mcl(ptr %ptr, i64 %cl) {
; CHECK-LABEL: shl64mcl:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movq %rsi, %rcx
; CHECK-NEXT:    # kill: def $cl killed $cl killed $rcx
; CHECK-NEXT:    shlq %cl, (%rdi), %rax
; CHECK-NEXT:    retq
entry:
  %a = load i64, ptr %ptr
  %shl = shl i64 %a, %cl
  ret i64 %shl
}

define i8 @shl8mi(ptr %ptr) {
; CHECK-LABEL: shl8mi:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    shlb $4, (%rdi), %al
; CHECK-NEXT:    retq
entry:
  %a = load i8, ptr %ptr
  %shl = shl i8 %a, 4
  ret i8 %shl
}

define i16 @shl16mi(ptr %ptr) {
; CHECK-LABEL: shl16mi:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movzwl (%rdi), %eax
; CHECK-NEXT:    shll $4, %eax
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
  %a = load i16, ptr %ptr
  %shl = shl i16 %a, 4
  ret i16 %shl
}

define i32 @shl32mi(ptr %ptr) {
; CHECK-LABEL: shl32mi:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    shll $4, (%rdi), %eax
; CHECK-NEXT:    retq
entry:
  %a = load i32, ptr %ptr
  %shl = shl i32 %a, 4
  ret i32 %shl
}

define i64 @shl64mi(ptr %ptr) {
; CHECK-LABEL: shl64mi:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    shlq $4, (%rdi), %rax
; CHECK-NEXT:    retq
entry:
  %a = load i64, ptr %ptr
  %shl = shl i64 %a, 4
  ret i64 %shl
}

define i8 @shl8r1(i8 noundef %a) {
; CHECK-LABEL: shl8r1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addb %dil, %dil, %al
; CHECK-NEXT:    retq
entry:
  %shl = shl i8 %a, 1
  ret i8 %shl
}

define i16 @shl16r1(i16 noundef %a) {
; CHECK-LABEL: shl16r1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addl %edi, %edi, %eax
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
  %shl = shl i16 %a, 1
  ret i16 %shl
}

define i32 @shl32r1(i32 noundef %a) {
; CHECK-LABEL: shl32r1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addl %edi, %edi, %eax
; CHECK-NEXT:    retq
entry:
  %shl = shl i32 %a, 1
  ret i32 %shl
}

define i64 @shl64r1(i64 noundef %a) {
; CHECK-LABEL: shl64r1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addq %rdi, %rdi, %rax
; CHECK-NEXT:    retq
entry:
  %shl = shl i64 %a, 1
  ret i64 %shl
}

define i8 @shl8rcl(i8 noundef %a, i8 %cl) {
; CHECK-LABEL: shl8rcl:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movl %esi, %ecx
; CHECK-NEXT:    # kill: def $cl killed $cl killed $ecx
; CHECK-NEXT:    shlb %cl, %dil, %al
; CHECK-NEXT:    retq
entry:
  %shl = shl i8 %a, %cl
  ret i8 %shl
}

define i16 @shl16rcl(i16 noundef %a, i16 %cl) {
; CHECK-LABEL: shl16rcl:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movl %esi, %ecx
; CHECK-NEXT:    # kill: def $cl killed $cl killed $ecx
; CHECK-NEXT:    shll %cl, %edi, %eax
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
  %shl = shl i16 %a, %cl
  ret i16 %shl
}

define i32 @shl32rcl(i32 noundef %a, i32 %cl) {
; CHECK-LABEL: shl32rcl:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movl %esi, %ecx
; CHECK-NEXT:    # kill: def $cl killed $cl killed $ecx
; CHECK-NEXT:    shll %cl, %edi, %eax
; CHECK-NEXT:    retq
entry:
  %shl = shl i32 %a, %cl
  ret i32 %shl
}

define i64 @shl64rcl(i64 noundef %a, i64 %cl) {
; CHECK-LABEL: shl64rcl:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movq %rsi, %rcx
; CHECK-NEXT:    # kill: def $cl killed $cl killed $rcx
; CHECK-NEXT:    shlq %cl, %rdi, %rax
; CHECK-NEXT:    retq
entry:
  %shl = shl i64 %a, %cl
  ret i64 %shl
}

define void @shl8m1_legacy(ptr %ptr) {
; CHECK-LABEL: shl8m1_legacy:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    shlb (%rdi)
; CHECK-NEXT:    retq
entry:
  %a = load i8, ptr %ptr
  %shl = shl i8 %a, 1
  store i8 %shl, ptr %ptr
  ret void
}

define void @shl16m1_legacy(ptr %ptr) {
; CHECK-LABEL: shl16m1_legacy:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    shlw (%rdi)
; CHECK-NEXT:    retq
entry:
  %a = load i16, ptr %ptr
  %shl = shl i16 %a, 1
  store i16 %shl, ptr %ptr
  ret void
}

define void @shl32m1_legacy(ptr %ptr) {
; CHECK-LABEL: shl32m1_legacy:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    shll (%rdi)
; CHECK-NEXT:    retq
entry:
  %a = load i32, ptr %ptr
  %shl = shl i32 %a, 1
  store i32 %shl, ptr %ptr
  ret void
}

define void @shl64m1_legacy(ptr %ptr) {
; CHECK-LABEL: shl64m1_legacy:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    shlq (%rdi)
; CHECK-NEXT:    retq
entry:
  %a = load i64, ptr %ptr
  %shl = shl i64 %a, 1
  store i64 %shl, ptr %ptr
  ret void
}

define void @shl8mi_legacy(ptr %ptr) {
; CHECK-LABEL: shl8mi_legacy:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    shlb $4, (%rdi)
; CHECK-NEXT:    retq
entry:
  %a = load i8, ptr %ptr
  %shl = shl i8 %a, 4
  store i8 %shl, ptr %ptr
  ret void
}

define void @shl16mi_legacy(ptr %ptr) {
; CHECK-LABEL: shl16mi_legacy:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    shlw $4, (%rdi)
; CHECK-NEXT:    retq
entry:
  %a = load i16, ptr %ptr
  %shl = shl i16 %a, 4
  store i16 %shl, ptr %ptr
  ret void
}

define void @shl32mi_legacy(ptr %ptr) {
; CHECK-LABEL: shl32mi_legacy:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    shll $4, (%rdi)
; CHECK-NEXT:    retq
entry:
  %a = load i32, ptr %ptr
  %shl = shl i32 %a, 4
  store i32 %shl, ptr %ptr
  ret void
}

define void @shl64mi_legacy(ptr %ptr) {
; CHECK-LABEL: shl64mi_legacy:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    shlq $4, (%rdi)
; CHECK-NEXT:    retq
entry:
  %a = load i64, ptr %ptr
  %shl = shl i64 %a, 4
  store i64 %shl, ptr %ptr
  ret void
}

define void @shl8mcl_legacy(ptr %ptr, i8 %cl) {
; CHECK-LABEL: shl8mcl_legacy:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movl %esi, %ecx
; CHECK-NEXT:    # kill: def $cl killed $cl killed $ecx
; CHECK-NEXT:    shlb %cl, (%rdi)
; CHECK-NEXT:    retq
entry:
  %a = load i8, ptr %ptr
  %shl = shl i8 %a, %cl
  store i8 %shl, ptr %ptr
  ret void
}

define void @shl16mcl_legacy(ptr %ptr, i16 %cl) {
; CHECK-LABEL: shl16mcl_legacy:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movl %esi, %ecx
; CHECK-NEXT:    # kill: def $cl killed $cl killed $ecx
; CHECK-NEXT:    shlw %cl, (%rdi)
; CHECK-NEXT:    retq
entry:
  %a = load i16, ptr %ptr
  %shl = shl i16 %a, %cl
  store i16 %shl, ptr %ptr
  ret void
}

define void @shl32mcl_legacy(ptr %ptr, i32 %cl) {
; CHECK-LABEL: shl32mcl_legacy:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movl %esi, %ecx
; CHECK-NEXT:    # kill: def $cl killed $cl killed $ecx
; CHECK-NEXT:    shll %cl, (%rdi)
; CHECK-NEXT:    retq
entry:
  %a = load i32, ptr %ptr
  %shl = shl i32 %a, %cl
  store i32 %shl, ptr %ptr
  ret void
}

define void @shl64mcl_legacy(ptr %ptr, i64 %cl) {
; CHECK-LABEL: shl64mcl_legacy:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movq %rsi, %rcx
; CHECK-NEXT:    # kill: def $cl killed $cl killed $rcx
; CHECK-NEXT:    shlq %cl, (%rdi)
; CHECK-NEXT:    retq
entry:
  %a = load i64, ptr %ptr
  %shl = shl i64 %a, %cl
  store i64 %shl, ptr %ptr
  ret void
}
