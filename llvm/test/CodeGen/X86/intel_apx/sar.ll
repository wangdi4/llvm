; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_apx_f
; RUN: llc < %s -mtriple=x86_64-unknown -mattr=+ndd -verify-machineinstrs | FileCheck %s

define i8 @sar8m1(ptr %ptr) {
; CHECK-LABEL: sar8m1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sarb (%rdi), %al
; CHECK-NEXT:    retq
entry:
  %a = load i8, ptr %ptr
  %sar = ashr i8 %a, 1
  ret i8 %sar
}

define i16 @sar16m1(ptr %ptr) {
; CHECK-LABEL: sar16m1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movswl (%rdi), %eax
; CHECK-NEXT:    shrl %eax
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
  %a = load i16, ptr %ptr
  %sar = ashr i16 %a, 1
  ret i16 %sar
}

define i32 @sar32m1(ptr %ptr) {
; CHECK-LABEL: sar32m1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sarl (%rdi), %eax
; CHECK-NEXT:    retq
entry:
  %a = load i32, ptr %ptr
  %sar = ashr i32 %a, 1
  ret i32 %sar
}

define i64 @sar64m1(ptr %ptr) {
; CHECK-LABEL: sar64m1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sarq (%rdi), %rax
; CHECK-NEXT:    retq
entry:
  %a = load i64, ptr %ptr
  %sar = ashr i64 %a, 1
  ret i64 %sar
}

define i8 @sar8mcl(ptr %ptr, i8 %cl) {
; CHECK-LABEL: sar8mcl:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movl %esi, %ecx
; CHECK-NEXT:    # kill: def $cl killed $cl killed $ecx
; CHECK-NEXT:    sarb %cl, (%rdi), %al
; CHECK-NEXT:    retq
entry:
  %a = load i8, ptr %ptr
  %sar = ashr i8 %a, %cl
  ret i8 %sar
}

define i16 @sar16mcl(ptr %ptr, i16 %cl) {
; CHECK-LABEL: sar16mcl:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movl %esi, %ecx
; CHECK-NEXT:    movswl (%rdi), %eax
; CHECK-NEXT:    # kill: def $cl killed $cl killed $ecx
; CHECK-NEXT:    sarl %cl, %eax
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
  %a = load i16, ptr %ptr
  %sar = ashr i16 %a, %cl
  ret i16 %sar
}

define i32 @sar32mcl(ptr %ptr, i32 %cl) {
; CHECK-LABEL: sar32mcl:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movl %esi, %ecx
; CHECK-NEXT:    # kill: def $cl killed $cl killed $ecx
; CHECK-NEXT:    sarl %cl, (%rdi), %eax
; CHECK-NEXT:    retq
entry:
  %a = load i32, ptr %ptr
  %sar = ashr i32 %a, %cl
  ret i32 %sar
}

define i64 @sar64mcl(ptr %ptr, i64 %cl) {
; CHECK-LABEL: sar64mcl:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movq %rsi, %rcx
; CHECK-NEXT:    # kill: def $cl killed $cl killed $rcx
; CHECK-NEXT:    sarq %cl, (%rdi), %rax
; CHECK-NEXT:    retq
entry:
  %a = load i64, ptr %ptr
  %sar = ashr i64 %a, %cl
  ret i64 %sar
}

define i8 @sar8mi(ptr %ptr) {
; CHECK-LABEL: sar8mi:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sarb $4, (%rdi), %al
; CHECK-NEXT:    retq
entry:
  %a = load i8, ptr %ptr
  %sar = ashr i8 %a, 4
  ret i8 %sar
}

define i16 @sar16mi(ptr %ptr) {
; CHECK-LABEL: sar16mi:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movswl (%rdi), %eax
; CHECK-NEXT:    shrl $4, %eax
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
  %a = load i16, ptr %ptr
  %sar = ashr i16 %a, 4
  ret i16 %sar
}

define i32 @sar32mi(ptr %ptr) {
; CHECK-LABEL: sar32mi:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sarl $4, (%rdi), %eax
; CHECK-NEXT:    retq
entry:
  %a = load i32, ptr %ptr
  %sar = ashr i32 %a, 4
  ret i32 %sar
}

define i64 @sar64mi(ptr %ptr) {
; CHECK-LABEL: sar64mi:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sarq $4, (%rdi), %rax
; CHECK-NEXT:    retq
entry:
  %a = load i64, ptr %ptr
  %sar = ashr i64 %a, 4
  ret i64 %sar
}

define i8 @sar8r1(i8 noundef %a) {
; CHECK-LABEL: sar8r1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sarb %dil, %al
; CHECK-NEXT:    retq
entry:
  %sar = ashr i8 %a, 1
  ret i8 %sar
}

define i16 @sar16r1(i16 noundef %a) {
; CHECK-LABEL: sar16r1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movswl %di, %eax
; CHECK-NEXT:    shrl %eax
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
  %sar = ashr i16 %a, 1
  ret i16 %sar
}

define i32 @sar32r1(i32 noundef %a) {
; CHECK-LABEL: sar32r1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sarl %edi, %eax
; CHECK-NEXT:    retq
entry:
  %sar = ashr i32 %a, 1
  ret i32 %sar
}

define i64 @sar64r1(i64 noundef %a) {
; CHECK-LABEL: sar64r1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sarq %rdi, %rax
; CHECK-NEXT:    retq
entry:
  %sar = ashr i64 %a, 1
  ret i64 %sar
}

define i8 @sar8rcl(i8 noundef %a, i8 %cl) {
; CHECK-LABEL: sar8rcl:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movl %esi, %ecx
; CHECK-NEXT:    # kill: def $cl killed $cl killed $ecx
; CHECK-NEXT:    sarb %cl, %dil, %al
; CHECK-NEXT:    retq
entry:
  %sar = ashr i8 %a, %cl
  ret i8 %sar
}

define i16 @sar16rcl(i16 noundef %a, i16 %cl) {
; CHECK-LABEL: sar16rcl:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movl %esi, %ecx
; CHECK-NEXT:    movswl %di, %eax
; CHECK-NEXT:    # kill: def $cl killed $cl killed $ecx
; CHECK-NEXT:    sarl %cl, %eax
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
  %sar = ashr i16 %a, %cl
  ret i16 %sar
}

define i32 @sar32rcl(i32 noundef %a, i32 %cl) {
; CHECK-LABEL: sar32rcl:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movl %esi, %ecx
; CHECK-NEXT:    # kill: def $cl killed $cl killed $ecx
; CHECK-NEXT:    sarl %cl, %edi, %eax
; CHECK-NEXT:    retq
entry:
  %sar = ashr i32 %a, %cl
  ret i32 %sar
}

define i64 @sar64rcl(i64 noundef %a, i64 %cl) {
; CHECK-LABEL: sar64rcl:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movq %rsi, %rcx
; CHECK-NEXT:    # kill: def $cl killed $cl killed $rcx
; CHECK-NEXT:    sarq %cl, %rdi, %rax
; CHECK-NEXT:    retq
entry:
  %sar = ashr i64 %a, %cl
  ret i64 %sar
}

define i8 @sar8ri(i8 noundef %a) {
; CHECK-LABEL: sar8ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sarb $4, %dil, %al
; CHECK-NEXT:    retq
entry:
  %sar = ashr i8 %a, 4
  ret i8 %sar
}

define i16 @sar16ri(i16 noundef %a) {
; CHECK-LABEL: sar16ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movswl %di, %eax
; CHECK-NEXT:    shrl $4, %eax
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
  %sar = ashr i16 %a, 4
  ret i16 %sar
}

define i32 @sar32ri(i32 noundef %a) {
; CHECK-LABEL: sar32ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sarl $4, %edi, %eax
; CHECK-NEXT:    retq
entry:
  %sar = ashr i32 %a, 4
  ret i32 %sar
}

define i64 @sar64ri(i64 noundef %a) {
; CHECK-LABEL: sar64ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sarq $4, %rdi, %rax
; CHECK-NEXT:    retq
entry:
  %sar = ashr i64 %a, 4
  ret i64 %sar
}
