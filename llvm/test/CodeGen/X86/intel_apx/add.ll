; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_apx_f
; RUN: llc < %s -mtriple=x86_64-unknown -mattr=+ndd -verify-machineinstrs | FileCheck %s

define i8 @add8rr(i8 noundef %a, i8 noundef %b) {
; CHECK-LABEL: add8rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addb %sil, %dil, %al
; CHECK-NEXT:    retq
entry:
    %add = add i8 %a, %b
    ret i8 %add
}

define i16 @add16rr(i16 noundef %a, i16 noundef %b) {
; CHECK-LABEL: add16rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addl %esi, %edi, %eax
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
    %add = add i16 %a, %b
    ret i16 %add
}

define i32 @add32rr(i32 noundef %a, i32 noundef %b) {
; CHECK-LABEL: add32rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addl %esi, %edi, %eax
; CHECK-NEXT:    retq
entry:
    %add = add i32 %a, %b
    ret i32 %add
}

define i64 @add64rr(i64 noundef %a, i64 noundef %b) {
; CHECK-LABEL: add64rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addq %rsi, %rdi, %rax
; CHECK-NEXT:    retq
entry:
    %add = add i64 %a, %b
    ret i64 %add
}

define i8 @add8rm(i8 noundef %a, ptr %ptr) {
; CHECK-LABEL: add8rm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addb (%rsi), %dil, %al
; CHECK-NEXT:    retq
entry:
    %b = load i8, ptr %ptr
    %add = add i8 %a, %b
    ret i8 %add
}

define i16 @add16rm(i16 noundef %a, ptr %ptr) {
; CHECK-LABEL: add16rm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addw (%rsi), %di, %ax
; CHECK-NEXT:    retq
entry:
    %b = load i16, ptr %ptr
    %add = add i16 %a, %b
    ret i16 %add
}

define i32 @add32rm(i32 noundef %a, ptr %ptr) {
; CHECK-LABEL: add32rm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addl (%rsi), %edi, %eax
; CHECK-NEXT:    retq
entry:
    %b = load i32, ptr %ptr
    %add = add i32 %a, %b
    ret i32 %add
}

define i64 @add64rm(i64 noundef %a, ptr %ptr) {
; CHECK-LABEL: add64rm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addq (%rsi), %rdi, %rax
; CHECK-NEXT:    retq
entry:
    %b = load i64, ptr %ptr
    %add = add i64 %a, %b
    ret i64 %add
}

define i16 @add16ri8(i16 noundef %a) {
; CHECK-LABEL: add16ri8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addl $123, %edi, %eax
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
    %add = add i16 %a, 123
    ret i16 %add
}

define i32 @add32ri8(i32 noundef %a) {
; CHECK-LABEL: add32ri8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addl $123, %edi, %eax
; CHECK-NEXT:    retq
entry:
    %add = add i32 %a, 123
    ret i32 %add
}

define i64 @add64ri8(i64 noundef %a) {
; CHECK-LABEL: add64ri8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addq $123, %rdi, %rax
; CHECK-NEXT:    retq
entry:
    %add = add i64 %a, 123
    ret i64 %add
}

define i8 @add8ri(i8 noundef %a) {
; CHECK-LABEL: add8ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addb $123, %dil, %al
; CHECK-NEXT:    retq
entry:
    %add = add i8 %a, 123
    ret i8 %add
}

define i16 @add16ri(i16 noundef %a) {
; CHECK-LABEL: add16ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addl $1234, %edi, %eax # imm = 0x4D2
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
    %add = add i16 %a, 1234
    ret i16 %add
}

define i32 @add32ri(i32 noundef %a) {
; CHECK-LABEL: add32ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addl $123456, %edi, %eax # imm = 0x1E240
; CHECK-NEXT:    retq
entry:
    %add = add i32 %a, 123456
    ret i32 %add
}

define i64 @add64ri(i64 noundef %a) {
; CHECK-LABEL: add64ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addq $123456, %rdi, %rax # imm = 0x1E240
; CHECK-NEXT:    retq
entry:
    %add = add i64 %a, 123456
    ret i64 %add
}

define i8 @add8mr(ptr %a, i8 noundef %b) {
; CHECK-LABEL: add8mr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addb %sil, (%rdi), %al
; CHECK-NEXT:    retq
entry:
  %t= load i8, ptr %a
  %add = add nsw i8 %t, %b
  ret i8 %add
}

define i16 @add16mr(ptr %a, i16 noundef %b) {
; CHECK-LABEL: add16mr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addw %si, (%rdi), %ax
; CHECK-NEXT:    retq
entry:
  %t= load i16, ptr %a
  %add = add nsw i16 %t, %b
  ret i16 %add
}

define i32 @add32mr(ptr %a, i32 noundef %b) {
; CHECK-LABEL: add32mr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addl %esi, (%rdi), %eax
; CHECK-NEXT:    retq
entry:
  %t= load i32, ptr %a
  %add = add nsw i32 %t, %b
  ret i32 %add
}

define i64 @add64mr(ptr %a, i64 noundef %b) {
; CHECK-LABEL: add64mr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addq %rsi, (%rdi), %rax
; CHECK-NEXT:    retq
entry:
  %t= load i64, ptr %a
  %add = add nsw i64 %t, %b
  ret i64 %add
}

define i16 @add16mi8(ptr %a) {
; CHECK-LABEL: add16mi8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movzwl (%rdi), %eax
; CHECK-NEXT:    addl $123, %eax, %eax
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
  %t= load i16, ptr %a
  %add = add nsw i16 %t, 123
  ret i16 %add
}

define i32 @add32mi8(ptr %a) {
; CHECK-LABEL: add32mi8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addl $123, (%rdi), %eax
; CHECK-NEXT:    retq
entry:
  %t= load i32, ptr %a
  %add = add nsw i32 %t, 123
  ret i32 %add
}

define i64 @add64mi8(ptr %a) {
; CHECK-LABEL: add64mi8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addq $123, (%rdi), %rax
; CHECK-NEXT:    retq
entry:
  %t= load i64, ptr %a
  %add = add nsw i64 %t, 123
  ret i64 %add
}

define i8 @add8mi(ptr %a) {
; CHECK-LABEL: add8mi:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addb $123, (%rdi), %al
; CHECK-NEXT:    retq
entry:
  %t= load i8, ptr %a
  %add = add nsw i8 %t, 123
  ret i8 %add
}

define i16 @add16mi(ptr %a) {
; CHECK-LABEL: add16mi:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movzwl (%rdi), %eax
; CHECK-NEXT:    addl $1234, %eax, %eax # imm = 0x4D2
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
  %t= load i16, ptr %a
  %add = add nsw i16 %t, 1234
  ret i16 %add
}

define i32 @add32mi(ptr %a) {
; CHECK-LABEL: add32mi:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addl $123456, (%rdi), %eax # imm = 0x1E240
; CHECK-NEXT:    retq
entry:
  %t= load i32, ptr %a
  %add = add nsw i32 %t, 123456
  ret i32 %add
}

define i64 @add64mi(ptr %a) {
; CHECK-LABEL: add64mi:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addq $123456, (%rdi), %rax # imm = 0x1E240
; CHECK-NEXT:    retq
entry:
  %t= load i64, ptr %a
  %add = add nsw i64 %t, 123456
  ret i64 %add
}

declare i8 @llvm.uadd.sat.i8(i8, i8)
declare i16 @llvm.uadd.sat.i16(i16, i16)
declare i32 @llvm.uadd.sat.i32(i32, i32)
declare i64 @llvm.uadd.sat.i64(i64, i64)

define i8 @addflag8rr(i8 noundef %a, i8 noundef %b) {
; CHECK-LABEL: addflag8rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addb %sil, %dil, %al
; CHECK-NEXT:    movzbl %al, %eax
; CHECK-NEXT:    movl $255, %ecx
; CHECK-NEXT:    cmovbl %ecx, %eax, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
entry:
    %add = call i8 @llvm.uadd.sat.i8(i8 %a, i8 %b)
    ret i8 %add
}

define i16 @addflag16rr(i16 noundef %a, i16 noundef %b) {
; CHECK-LABEL: addflag16rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addw %si, %di, %ax
; CHECK-NEXT:    movl $65535, %ecx # imm = 0xFFFF
; CHECK-NEXT:    cmovbl %ecx, %eax, %eax
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
    %add = call i16 @llvm.uadd.sat.i16(i16 %a, i16 %b)
    ret i16 %add
}

define i32 @addflag32rr(i32 noundef %a, i32 noundef %b) {
; CHECK-LABEL: addflag32rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addl %esi, %edi, %eax
; CHECK-NEXT:    movl $-1, %ecx
; CHECK-NEXT:    cmovbl %ecx, %eax, %eax
; CHECK-NEXT:    retq
entry:
    %add = call i32 @llvm.uadd.sat.i32(i32 %a, i32 %b)
    ret i32 %add
}

define i64 @addflag64rr(i64 noundef %a, i64 noundef %b) {
; CHECK-LABEL: addflag64rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addq %rsi, %rdi, %rax
; CHECK-NEXT:    movq $-1, %rcx
; CHECK-NEXT:    cmovbq %rcx, %rax, %rax
; CHECK-NEXT:    retq
entry:
    %add = call i64 @llvm.uadd.sat.i64(i64 %a, i64 %b)
    ret i64 %add
}

define i8 @addflag8rm(i8 noundef %a, ptr %b) {
; CHECK-LABEL: addflag8rm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addb (%rsi), %dil, %al
; CHECK-NEXT:    movzbl %al, %eax
; CHECK-NEXT:    movl $255, %ecx
; CHECK-NEXT:    cmovbl %ecx, %eax, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
entry:
    %t = load i8, ptr %b
    %add = call i8 @llvm.uadd.sat.i8(i8 %a, i8 %t)
    ret i8 %add
}

define i16 @addflag16rm(i16 noundef %a, ptr %b) {
; CHECK-LABEL: addflag16rm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addw (%rsi), %di, %ax
; CHECK-NEXT:    movl $65535, %ecx # imm = 0xFFFF
; CHECK-NEXT:    cmovbl %ecx, %eax, %eax
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
    %t = load i16, ptr %b
    %add = call i16 @llvm.uadd.sat.i16(i16 %a, i16 %t)
    ret i16 %add
}

define i32 @addflag32rm(i32 noundef %a, ptr %b) {
; CHECK-LABEL: addflag32rm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addl (%rsi), %edi, %eax
; CHECK-NEXT:    movl $-1, %ecx
; CHECK-NEXT:    cmovbl %ecx, %eax, %eax
; CHECK-NEXT:    retq
entry:
    %t = load i32, ptr %b
    %add = call i32 @llvm.uadd.sat.i32(i32 %a, i32 %t)
    ret i32 %add
}

define i64 @addflag64rm(i64 noundef %a, ptr %b) {
; CHECK-LABEL: addflag64rm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addq (%rsi), %rdi, %rax
; CHECK-NEXT:    movq $-1, %rcx
; CHECK-NEXT:    cmovbq %rcx, %rax, %rax
; CHECK-NEXT:    retq
entry:
    %t = load i64, ptr %b
    %add = call i64 @llvm.uadd.sat.i64(i64 %a, i64 %t)
    ret i64 %add
}

define i16 @addflag16ri8(i16 noundef %a) {
; CHECK-LABEL: addflag16ri8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addw $123, %di, %ax
; CHECK-NEXT:    movl $65535, %ecx # imm = 0xFFFF
; CHECK-NEXT:    cmovbl %ecx, %eax, %eax
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
    %add = call i16 @llvm.uadd.sat.i16(i16 %a, i16 123)
    ret i16 %add
}

define i32 @addflag32ri8(i32 noundef %a) {
; CHECK-LABEL: addflag32ri8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addl $123, %edi, %eax
; CHECK-NEXT:    movl $-1, %ecx
; CHECK-NEXT:    cmovbl %ecx, %eax, %eax
; CHECK-NEXT:    retq
entry:
    %add = call i32 @llvm.uadd.sat.i32(i32 %a, i32 123)
    ret i32 %add
}

define i64 @addflag64ri8(i64 noundef %a) {
; CHECK-LABEL: addflag64ri8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addq $123, %rdi, %rax
; CHECK-NEXT:    movq $-1, %rcx
; CHECK-NEXT:    cmovbq %rcx, %rax, %rax
; CHECK-NEXT:    retq
entry:
    %add = call i64 @llvm.uadd.sat.i64(i64 %a, i64 123)
    ret i64 %add
}

define i8 @addflag8ri(i8 noundef %a) {
; CHECK-LABEL: addflag8ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addb $123, %dil, %al
; CHECK-NEXT:    movzbl %al, %eax
; CHECK-NEXT:    movl $255, %ecx
; CHECK-NEXT:    cmovbl %ecx, %eax, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
entry:
    %add = call i8 @llvm.uadd.sat.i8(i8 %a, i8 123)
    ret i8 %add
}

define i16 @addflag16ri(i16 noundef %a) {
; CHECK-LABEL: addflag16ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addw $1234, %di, %ax # imm = 0x4D2
; CHECK-NEXT:    movl $65535, %ecx # imm = 0xFFFF
; CHECK-NEXT:    cmovbl %ecx, %eax, %eax
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
    %add = call i16 @llvm.uadd.sat.i16(i16 %a, i16 1234)
    ret i16 %add
}

define i32 @addflag32ri(i32 noundef %a) {
; CHECK-LABEL: addflag32ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addl $123456, %edi, %eax # imm = 0x1E240
; CHECK-NEXT:    movl $-1, %ecx
; CHECK-NEXT:    cmovbl %ecx, %eax, %eax
; CHECK-NEXT:    retq
entry:
    %add = call i32 @llvm.uadd.sat.i32(i32 %a, i32 123456)
    ret i32 %add
}

define i64 @addflag64ri(i64 noundef %a) {
; CHECK-LABEL: addflag64ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addq $123456, %rdi, %rax # imm = 0x1E240
; CHECK-NEXT:    movq $-1, %rcx
; CHECK-NEXT:    cmovbq %rcx, %rax, %rax
; CHECK-NEXT:    retq
entry:
    %add = call i64 @llvm.uadd.sat.i64(i64 %a, i64 123456)
    ret i64 %add
}

@val = external dso_local global i16, align 4

define i1 @add64ri_reloc(i16 %k) {
; CHECK-LABEL: add64ri_reloc:
; CHECK:       # %bb.0:
; CHECK-NEXT:    # kill: def $edi killed $edi def $rdi
; CHECK-NEXT:    movswq %di, %rax
; CHECK-NEXT:    addq %rax, %rax, %rax
; CHECK-NEXT:    addq $val, %rax, %rax
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
  %g = getelementptr inbounds i16, ptr @val, i16 %k
  %cmp = icmp ne ptr %g, null
  ret i1 %cmp
}
