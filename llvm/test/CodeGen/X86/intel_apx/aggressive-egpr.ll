; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-unknown -mattr=+egpr | FileCheck %s
; RUN: llc < %s -mtriple=x86_64-unknown -mattr=+egpr -x86-aggressive-egpr | FileCheck %s --check-prefix=AGG

define void @test_128(ptr %a, ptr %b, ptr %out) nounwind {
; CHECK-LABEL: test_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movq %rdx, %rcx
; CHECK-NEXT:    movq (%rdi), %rax
; CHECK-NEXT:    movq (%rsi), %r8
; CHECK-NEXT:    movq 8(%rsi), %rsi
; CHECK-NEXT:    imulq %rax, %rsi
; CHECK-NEXT:    mulq %r8
; CHECK-NEXT:    addq %rsi, %rdx
; CHECK-NEXT:    imulq 8(%rdi), %r8
; CHECK-NEXT:    addq %rdx, %r8
; CHECK-NEXT:    movq %rax, (%rcx)
; CHECK-NEXT:    movq %r8, 8(%rcx)
; CHECK-NEXT:    retq
;
; AGG-LABEL: test_128:
; AGG:       # %bb.0:
; AGG-NEXT:    movq %rdx, %r16
; AGG-NEXT:    movq (%rdi), %rax
; AGG-NEXT:    movq (%rsi), %r17
; AGG-NEXT:    movq 8(%rsi), %r18
; AGG-NEXT:    imulq %rax, %r18
; AGG-NEXT:    mulq %r17
; AGG-NEXT:    addq %r18, %rdx
; AGG-NEXT:    imulq 8(%rdi), %r17
; AGG-NEXT:    addq %rdx, %r17
; AGG-NEXT:    movq %rax, (%r16)
; AGG-NEXT:    movq %r17, 8(%r16)
; AGG-NEXT:    retq
  %av = load i128, ptr %a
  %bv = load i128, ptr %b
  %r = mul i128 %av, %bv
  store i128 %r, ptr %out
  ret void
}
