; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=skylake -mtriple=x86_64-pc-linux-gnu < %s | FileCheck %s --check-prefixes=SKL
; RUN: llc -mcpu=skylake -mtriple=x86_64-pc-linux-gnu -max-struct-size-with-dword-gather-index=1024 < %s | FileCheck %s --check-prefixes=SKL-DWORD-IDX
; RUN: llc -mcpu=skylake -mtriple=i686-pc-linux-gnu < %s | FileCheck %s --check-prefixes=SKL-32
; RUN: llc -mcpu=skx -mtriple=x86_64-pc-linux-gnu < %s | FileCheck %s --check-prefixes=SKX
; RUN: llc -mcpu=skx -mtriple=i686-pc-linux-gnu < %s | FileCheck %s --check-prefixes=SKX-32

%F0 = type { i16, float }
%F1 = type { float, i16, i16, i16 }
%F2 = type { %F20, i16, i16, i16 }
%F20 = type { i16, float, i16, i16 }

define <8 x float> @test_f32v8_1(ptr %base, <8 x i64> %i, <8 x i1> %mask) {
; SKL-LABEL: test_f32v8_1:
; SKL:       # %bb.0:
; SKL-NEXT:    vpmovzxwd {{.*#+}} ymm2 = xmm2[0],zero,xmm2[1],zero,xmm2[2],zero,xmm2[3],zero,xmm2[4],zero,xmm2[5],zero,xmm2[6],zero,xmm2[7],zero
; SKL-NEXT:    vpslld $31, %ymm2, %ymm2
; SKL-NEXT:    vmovaps {{.*#+}} ymm3 = [0,2,4,6,4,6,6,7]
; SKL-NEXT:    vpermps %ymm0, %ymm3, %ymm0
; SKL-NEXT:    vpermps %ymm1, %ymm3, %ymm1
; SKL-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm0
; SKL-NEXT:    vbroadcastss {{.*#+}} ymm1 = [268435455,268435455,268435455,268435455,268435455,268435455,268435455,268435455]
; SKL-NEXT:    vandps %ymm1, %ymm0, %ymm1
; SKL-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; SKL-NEXT:    vgatherdps %ymm2, (%rdi,%ymm1,4), %ymm0
; SKL-NEXT:    retq
;
; SKL-DWORD-IDX-LABEL: test_f32v8_1:
; SKL-DWORD-IDX:       # %bb.0:
; SKL-DWORD-IDX-NEXT:    vpmovzxwd {{.*#+}} ymm2 = xmm2[0],zero,xmm2[1],zero,xmm2[2],zero,xmm2[3],zero,xmm2[4],zero,xmm2[5],zero,xmm2[6],zero,xmm2[7],zero
; SKL-DWORD-IDX-NEXT:    vpslld $31, %ymm2, %ymm2
; SKL-DWORD-IDX-NEXT:    vmovaps {{.*#+}} ymm3 = [0,2,4,6,4,6,6,7]
; SKL-DWORD-IDX-NEXT:    vpermps %ymm0, %ymm3, %ymm0
; SKL-DWORD-IDX-NEXT:    vpermps %ymm1, %ymm3, %ymm1
; SKL-DWORD-IDX-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm0
; SKL-DWORD-IDX-NEXT:    vbroadcastss {{.*#+}} ymm1 = [268435455,268435455,268435455,268435455,268435455,268435455,268435455,268435455]
; SKL-DWORD-IDX-NEXT:    vandps %ymm1, %ymm0, %ymm1
; SKL-DWORD-IDX-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; SKL-DWORD-IDX-NEXT:    vgatherdps %ymm2, (%rdi,%ymm1,4), %ymm0
; SKL-DWORD-IDX-NEXT:    retq
;
; SKL-32-LABEL: test_f32v8_1:
; SKL-32:       # %bb.0:
; SKL-32-NEXT:    vpmovzxwd {{.*#+}} ymm2 = xmm2[0],zero,xmm2[1],zero,xmm2[2],zero,xmm2[3],zero,xmm2[4],zero,xmm2[5],zero,xmm2[6],zero,xmm2[7],zero
; SKL-32-NEXT:    vpslld $31, %ymm2, %ymm2
; SKL-32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; SKL-32-NEXT:    vmovaps {{.*#+}} ymm3 = [0,2,4,6,4,6,6,7]
; SKL-32-NEXT:    vpermps %ymm0, %ymm3, %ymm0
; SKL-32-NEXT:    vpermps %ymm1, %ymm3, %ymm1
; SKL-32-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm0
; SKL-32-NEXT:    vbroadcastss {{.*#+}} ymm1 = [268435455,268435455,268435455,268435455,268435455,268435455,268435455,268435455]
; SKL-32-NEXT:    vandps %ymm1, %ymm0, %ymm1
; SKL-32-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; SKL-32-NEXT:    vgatherdps %ymm2, (%eax,%ymm1,4), %ymm0
; SKL-32-NEXT:    retl
;
; SKX-LABEL: test_f32v8_1:
; SKX:       # %bb.0:
; SKX-NEXT:    vpsllw $15, %xmm1, %xmm1
; SKX-NEXT:    vpmovw2m %xmm1, %k1
; SKX-NEXT:    vpmovqd %zmm0, %ymm0
; SKX-NEXT:    vpandd {{\.?LCPI[0-9]+_[0-9]+}}(%rip){1to8}, %ymm0, %ymm1
; SKX-NEXT:    vpxor %xmm0, %xmm0, %xmm0
; SKX-NEXT:    vgatherdps (%rdi,%ymm1,4), %ymm0 {%k1}
; SKX-NEXT:    retq
;
; SKX-32-LABEL: test_f32v8_1:
; SKX-32:       # %bb.0:
; SKX-32-NEXT:    vpsllw $15, %xmm1, %xmm1
; SKX-32-NEXT:    vpmovw2m %xmm1, %k1
; SKX-32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; SKX-32-NEXT:    vpmovqd %zmm0, %ymm0
; SKX-32-NEXT:    vpandd {{\.?LCPI[0-9]+_[0-9]+}}{1to8}, %ymm0, %ymm1
; SKX-32-NEXT:    vpxor %xmm0, %xmm0, %xmm0
; SKX-32-NEXT:    vgatherdps (%eax,%ymm1,4), %ymm0 {%k1}
; SKX-32-NEXT:    retl
  %idx = and <8 x i64> %i, <i64 268435455, i64 268435455, i64 268435455, i64 268435455, i64 268435455, i64 268435455, i64 268435455, i64 268435455>
  %gep = getelementptr float, ptr %base, <8 x i64> %idx
  %res = call <8 x float> @llvm.masked.gather.v8f32.v8p0(<8 x ptr> %gep, i32 0, <8 x i1> %mask, <8 x float> undef)
  ret <8 x float> %res
}

define <8 x float> @test_f32v8_2(ptr %base, <8 x i64> %i, <8 x i1> %mask) {
; SKL-LABEL: test_f32v8_2:
; SKL:       # %bb.0:
; SKL-NEXT:    vpmovzxwd {{.*#+}} ymm2 = xmm2[0],zero,xmm2[1],zero,xmm2[2],zero,xmm2[3],zero,xmm2[4],zero,xmm2[5],zero,xmm2[6],zero,xmm2[7],zero
; SKL-NEXT:    vpslld $31, %ymm2, %ymm2
; SKL-NEXT:    vmovaps {{.*#+}} ymm3 = [0,2,4,6,4,6,6,7]
; SKL-NEXT:    vpermps %ymm0, %ymm3, %ymm0
; SKL-NEXT:    vpermps %ymm1, %ymm3, %ymm1
; SKL-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm0
; SKL-NEXT:    vandps {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %ymm0, %ymm1
; SKL-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; SKL-NEXT:    vgatherdps %ymm2, 4(%rdi,%ymm1,8), %ymm0
; SKL-NEXT:    retq
;
; SKL-DWORD-IDX-LABEL: test_f32v8_2:
; SKL-DWORD-IDX:       # %bb.0:
; SKL-DWORD-IDX-NEXT:    vpmovzxwd {{.*#+}} ymm2 = xmm2[0],zero,xmm2[1],zero,xmm2[2],zero,xmm2[3],zero,xmm2[4],zero,xmm2[5],zero,xmm2[6],zero,xmm2[7],zero
; SKL-DWORD-IDX-NEXT:    vpslld $31, %ymm2, %ymm2
; SKL-DWORD-IDX-NEXT:    vmovaps {{.*#+}} ymm3 = [0,2,4,6,4,6,6,7]
; SKL-DWORD-IDX-NEXT:    vpermps %ymm0, %ymm3, %ymm0
; SKL-DWORD-IDX-NEXT:    vpermps %ymm1, %ymm3, %ymm1
; SKL-DWORD-IDX-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm0
; SKL-DWORD-IDX-NEXT:    vandps {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %ymm0, %ymm1
; SKL-DWORD-IDX-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; SKL-DWORD-IDX-NEXT:    vgatherdps %ymm2, 4(%rdi,%ymm1,8), %ymm0
; SKL-DWORD-IDX-NEXT:    retq
;
; SKL-32-LABEL: test_f32v8_2:
; SKL-32:       # %bb.0:
; SKL-32-NEXT:    vpmovzxwd {{.*#+}} ymm2 = xmm2[0],zero,xmm2[1],zero,xmm2[2],zero,xmm2[3],zero,xmm2[4],zero,xmm2[5],zero,xmm2[6],zero,xmm2[7],zero
; SKL-32-NEXT:    vpslld $31, %ymm2, %ymm2
; SKL-32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; SKL-32-NEXT:    vmovaps {{.*#+}} ymm3 = [0,2,4,6,4,6,6,7]
; SKL-32-NEXT:    vpermps %ymm0, %ymm3, %ymm0
; SKL-32-NEXT:    vpermps %ymm1, %ymm3, %ymm1
; SKL-32-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm0
; SKL-32-NEXT:    vandps {{\.?LCPI[0-9]+_[0-9]+}}, %ymm0, %ymm1
; SKL-32-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; SKL-32-NEXT:    vgatherdps %ymm2, 4(%eax,%ymm1,8), %ymm0
; SKL-32-NEXT:    retl
;
; SKX-LABEL: test_f32v8_2:
; SKX:       # %bb.0:
; SKX-NEXT:    vpsllw $15, %xmm1, %xmm1
; SKX-NEXT:    vpmovw2m %xmm1, %k1
; SKX-NEXT:    vpmovqd %zmm0, %ymm0
; SKX-NEXT:    vpandd {{\.?LCPI[0-9]+_[0-9]+}}(%rip){1to8}, %ymm0, %ymm1
; SKX-NEXT:    vpxor %xmm0, %xmm0, %xmm0
; SKX-NEXT:    vgatherdps 4(%rdi,%ymm1,8), %ymm0 {%k1}
; SKX-NEXT:    retq
;
; SKX-32-LABEL: test_f32v8_2:
; SKX-32:       # %bb.0:
; SKX-32-NEXT:    vpsllw $15, %xmm1, %xmm1
; SKX-32-NEXT:    vpmovw2m %xmm1, %k1
; SKX-32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; SKX-32-NEXT:    vpmovqd %zmm0, %ymm0
; SKX-32-NEXT:    vpandd {{\.?LCPI[0-9]+_[0-9]+}}{1to8}, %ymm0, %ymm1
; SKX-32-NEXT:    vpxor %xmm0, %xmm0, %xmm0
; SKX-32-NEXT:    vgatherdps 4(%eax,%ymm1,8), %ymm0 {%k1}
; SKX-32-NEXT:    retl
  %idx = and <8 x i64> %i, <i64 16777215, i64 16777215, i64 16777215, i64 16777215, i64 16777215, i64 16777215, i64 16777215, i64 16777215>
  %gep = getelementptr %F0, ptr %base, <8 x i64> %idx, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %res = call <8 x float> @llvm.masked.gather.v8f32.v8p0(<8 x ptr> %gep, i32 0, <8 x i1> %mask, <8 x float> undef)
  ret <8 x float> %res
}

define <8 x float> @test_f32v8_3(ptr %base, <8 x i64> %i, <8 x i1> %mask) {
; SKL-LABEL: test_f32v8_3:
; SKL:       # %bb.0:
; SKL-NEXT:    vpmovzxwd {{.*#+}} ymm2 = xmm2[0],zero,xmm2[1],zero,xmm2[2],zero,xmm2[3],zero,xmm2[4],zero,xmm2[5],zero,xmm2[6],zero,xmm2[7],zero
; SKL-NEXT:    vpslld $31, %ymm2, %ymm2
; SKL-NEXT:    vmovdqa {{.*#+}} ymm3 = [0,2,4,6,4,6,6,7]
; SKL-NEXT:    vpermd %ymm0, %ymm3, %ymm0
; SKL-NEXT:    vpermd %ymm1, %ymm3, %ymm1
; SKL-NEXT:    vinserti128 $1, %xmm1, %ymm0, %ymm0
; SKL-NEXT:    vpand {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %ymm0, %ymm0
; SKL-NEXT:    vpbroadcastd {{.*#+}} ymm1 = [12,12,12,12,12,12,12,12]
; SKL-NEXT:    vpmulld %ymm1, %ymm0, %ymm1
; SKL-NEXT:    vpxor %xmm0, %xmm0, %xmm0
; SKL-NEXT:    vgatherdps %ymm2, (%rdi,%ymm1), %ymm0
; SKL-NEXT:    retq
;
; SKL-DWORD-IDX-LABEL: test_f32v8_3:
; SKL-DWORD-IDX:       # %bb.0:
; SKL-DWORD-IDX-NEXT:    vpmovzxwd {{.*#+}} ymm2 = xmm2[0],zero,xmm2[1],zero,xmm2[2],zero,xmm2[3],zero,xmm2[4],zero,xmm2[5],zero,xmm2[6],zero,xmm2[7],zero
; SKL-DWORD-IDX-NEXT:    vpslld $31, %ymm2, %ymm2
; SKL-DWORD-IDX-NEXT:    vmovdqa {{.*#+}} ymm3 = [0,2,4,6,4,6,6,7]
; SKL-DWORD-IDX-NEXT:    vpermd %ymm0, %ymm3, %ymm0
; SKL-DWORD-IDX-NEXT:    vpermd %ymm1, %ymm3, %ymm1
; SKL-DWORD-IDX-NEXT:    vinserti128 $1, %xmm1, %ymm0, %ymm0
; SKL-DWORD-IDX-NEXT:    vpand {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %ymm0, %ymm0
; SKL-DWORD-IDX-NEXT:    vpaddd %ymm0, %ymm0, %ymm1
; SKL-DWORD-IDX-NEXT:    vpaddd %ymm1, %ymm0, %ymm1
; SKL-DWORD-IDX-NEXT:    vpxor %xmm0, %xmm0, %xmm0
; SKL-DWORD-IDX-NEXT:    vgatherdps %ymm2, (%rdi,%ymm1,4), %ymm0
; SKL-DWORD-IDX-NEXT:    retq
;
; SKL-32-LABEL: test_f32v8_3:
; SKL-32:       # %bb.0:
; SKL-32-NEXT:    vpmovzxwd {{.*#+}} ymm2 = xmm2[0],zero,xmm2[1],zero,xmm2[2],zero,xmm2[3],zero,xmm2[4],zero,xmm2[5],zero,xmm2[6],zero,xmm2[7],zero
; SKL-32-NEXT:    vpslld $31, %ymm2, %ymm2
; SKL-32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; SKL-32-NEXT:    vmovdqa {{.*#+}} ymm3 = [0,2,4,6,4,6,6,7]
; SKL-32-NEXT:    vpermd %ymm0, %ymm3, %ymm0
; SKL-32-NEXT:    vpermd %ymm1, %ymm3, %ymm1
; SKL-32-NEXT:    vinserti128 $1, %xmm1, %ymm0, %ymm0
; SKL-32-NEXT:    vpand {{\.?LCPI[0-9]+_[0-9]+}}, %ymm0, %ymm0
; SKL-32-NEXT:    vpbroadcastd {{.*#+}} ymm1 = [12,12,12,12,12,12,12,12]
; SKL-32-NEXT:    vpmulld %ymm1, %ymm0, %ymm1
; SKL-32-NEXT:    vpxor %xmm0, %xmm0, %xmm0
; SKL-32-NEXT:    vgatherdps %ymm2, (%eax,%ymm1), %ymm0
; SKL-32-NEXT:    retl
;
; SKX-LABEL: test_f32v8_3:
; SKX:       # %bb.0:
; SKX-NEXT:    vpsllw $15, %xmm1, %xmm1
; SKX-NEXT:    vpmovw2m %xmm1, %k1
; SKX-NEXT:    vpmovqd %zmm0, %ymm0
; SKX-NEXT:    vpandd {{\.?LCPI[0-9]+_[0-9]+}}(%rip){1to8}, %ymm0, %ymm0
; SKX-NEXT:    vpslld $2, %ymm0, %ymm1
; SKX-NEXT:    vpslld $3, %ymm0, %ymm0
; SKX-NEXT:    vpaddd %ymm1, %ymm0, %ymm1
; SKX-NEXT:    vpxor %xmm0, %xmm0, %xmm0
; SKX-NEXT:    vgatherdps (%rdi,%ymm1), %ymm0 {%k1}
; SKX-NEXT:    retq
;
; SKX-32-LABEL: test_f32v8_3:
; SKX-32:       # %bb.0:
; SKX-32-NEXT:    vpsllw $15, %xmm1, %xmm1
; SKX-32-NEXT:    vpmovw2m %xmm1, %k1
; SKX-32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; SKX-32-NEXT:    vpmovqd %zmm0, %ymm0
; SKX-32-NEXT:    vpandd {{\.?LCPI[0-9]+_[0-9]+}}{1to8}, %ymm0, %ymm0
; SKX-32-NEXT:    vpslld $2, %ymm0, %ymm1
; SKX-32-NEXT:    vpslld $3, %ymm0, %ymm0
; SKX-32-NEXT:    vpaddd %ymm1, %ymm0, %ymm1
; SKX-32-NEXT:    vpxor %xmm0, %xmm0, %xmm0
; SKX-32-NEXT:    vgatherdps (%eax,%ymm1), %ymm0 {%k1}
; SKX-32-NEXT:    retl
  %idx = and <8 x i64> %i, <i64 16777215, i64 16777215, i64 16777215, i64 16777215, i64 16777215, i64 16777215, i64 16777215, i64 16777215>
  %gep = getelementptr %F1, ptr %base, <8 x i64> %idx, <8 x i32> zeroinitializer
  %res = call <8 x float> @llvm.masked.gather.v8f32.v8p0(<8 x ptr> %gep, i32 0, <8 x i1> %mask, <8 x float> undef)
  ret <8 x float> %res
}

define <8 x float> @test_f32v8_4(ptr %base, <8 x i64> %i, <8 x i1> %mask) {
; SKL-LABEL: test_f32v8_4:
; SKL:       # %bb.0:
; SKL-NEXT:    vpmovzxwd {{.*#+}} ymm2 = xmm2[0],zero,xmm2[1],zero,xmm2[2],zero,xmm2[3],zero,xmm2[4],zero,xmm2[5],zero,xmm2[6],zero,xmm2[7],zero
; SKL-NEXT:    vpslld $31, %ymm2, %ymm2
; SKL-NEXT:    vmovdqa {{.*#+}} ymm3 = [0,2,4,6,4,6,6,7]
; SKL-NEXT:    vpermd %ymm0, %ymm3, %ymm0
; SKL-NEXT:    vpermd %ymm1, %ymm3, %ymm1
; SKL-NEXT:    vinserti128 $1, %xmm1, %ymm0, %ymm0
; SKL-NEXT:    vpand {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %ymm0, %ymm0
; SKL-NEXT:    vpbroadcastd {{.*#+}} ymm1 = [20,20,20,20,20,20,20,20]
; SKL-NEXT:    vpmulld %ymm1, %ymm0, %ymm1
; SKL-NEXT:    vpxor %xmm0, %xmm0, %xmm0
; SKL-NEXT:    vgatherdps %ymm2, 4(%rdi,%ymm1), %ymm0
; SKL-NEXT:    retq
;
; SKL-DWORD-IDX-LABEL: test_f32v8_4:
; SKL-DWORD-IDX:       # %bb.0:
; SKL-DWORD-IDX-NEXT:    vpmovzxwd {{.*#+}} ymm2 = xmm2[0],zero,xmm2[1],zero,xmm2[2],zero,xmm2[3],zero,xmm2[4],zero,xmm2[5],zero,xmm2[6],zero,xmm2[7],zero
; SKL-DWORD-IDX-NEXT:    vpslld $31, %ymm2, %ymm2
; SKL-DWORD-IDX-NEXT:    vmovdqa {{.*#+}} ymm3 = [0,2,4,6,4,6,6,7]
; SKL-DWORD-IDX-NEXT:    vpermd %ymm0, %ymm3, %ymm0
; SKL-DWORD-IDX-NEXT:    vpermd %ymm1, %ymm3, %ymm1
; SKL-DWORD-IDX-NEXT:    vinserti128 $1, %xmm1, %ymm0, %ymm0
; SKL-DWORD-IDX-NEXT:    vpand {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %ymm0, %ymm0
; SKL-DWORD-IDX-NEXT:    vpslld $2, %ymm0, %ymm1
; SKL-DWORD-IDX-NEXT:    vpaddd %ymm1, %ymm0, %ymm1
; SKL-DWORD-IDX-NEXT:    vpxor %xmm0, %xmm0, %xmm0
; SKL-DWORD-IDX-NEXT:    vgatherdps %ymm2, 4(%rdi,%ymm1,4), %ymm0
; SKL-DWORD-IDX-NEXT:    retq
;
; SKL-32-LABEL: test_f32v8_4:
; SKL-32:       # %bb.0:
; SKL-32-NEXT:    vpmovzxwd {{.*#+}} ymm2 = xmm2[0],zero,xmm2[1],zero,xmm2[2],zero,xmm2[3],zero,xmm2[4],zero,xmm2[5],zero,xmm2[6],zero,xmm2[7],zero
; SKL-32-NEXT:    vpslld $31, %ymm2, %ymm2
; SKL-32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; SKL-32-NEXT:    vmovdqa {{.*#+}} ymm3 = [0,2,4,6,4,6,6,7]
; SKL-32-NEXT:    vpermd %ymm0, %ymm3, %ymm0
; SKL-32-NEXT:    vpermd %ymm1, %ymm3, %ymm1
; SKL-32-NEXT:    vinserti128 $1, %xmm1, %ymm0, %ymm0
; SKL-32-NEXT:    vpand {{\.?LCPI[0-9]+_[0-9]+}}, %ymm0, %ymm0
; SKL-32-NEXT:    vpbroadcastd {{.*#+}} ymm1 = [20,20,20,20,20,20,20,20]
; SKL-32-NEXT:    vpmulld %ymm1, %ymm0, %ymm1
; SKL-32-NEXT:    vpxor %xmm0, %xmm0, %xmm0
; SKL-32-NEXT:    vgatherdps %ymm2, 4(%eax,%ymm1), %ymm0
; SKL-32-NEXT:    retl
;
; SKX-LABEL: test_f32v8_4:
; SKX:       # %bb.0:
; SKX-NEXT:    vpsllw $15, %xmm1, %xmm1
; SKX-NEXT:    vpmovw2m %xmm1, %k1
; SKX-NEXT:    vpmovqd %zmm0, %ymm0
; SKX-NEXT:    vpandd {{\.?LCPI[0-9]+_[0-9]+}}(%rip){1to8}, %ymm0, %ymm0
; SKX-NEXT:    vpslld $2, %ymm0, %ymm1
; SKX-NEXT:    vpslld $4, %ymm0, %ymm0
; SKX-NEXT:    vpaddd %ymm1, %ymm0, %ymm1
; SKX-NEXT:    vpxor %xmm0, %xmm0, %xmm0
; SKX-NEXT:    vgatherdps 4(%rdi,%ymm1), %ymm0 {%k1}
; SKX-NEXT:    retq
;
; SKX-32-LABEL: test_f32v8_4:
; SKX-32:       # %bb.0:
; SKX-32-NEXT:    vpsllw $15, %xmm1, %xmm1
; SKX-32-NEXT:    vpmovw2m %xmm1, %k1
; SKX-32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; SKX-32-NEXT:    vpmovqd %zmm0, %ymm0
; SKX-32-NEXT:    vpandd {{\.?LCPI[0-9]+_[0-9]+}}{1to8}, %ymm0, %ymm0
; SKX-32-NEXT:    vpslld $2, %ymm0, %ymm1
; SKX-32-NEXT:    vpslld $4, %ymm0, %ymm0
; SKX-32-NEXT:    vpaddd %ymm1, %ymm0, %ymm1
; SKX-32-NEXT:    vpxor %xmm0, %xmm0, %xmm0
; SKX-32-NEXT:    vgatherdps 4(%eax,%ymm1), %ymm0 {%k1}
; SKX-32-NEXT:    retl
  %idx = and <8 x i64> %i, <i64 16777215, i64 16777215, i64 16777215, i64 16777215, i64 16777215, i64 16777215, i64 16777215, i64 16777215>
  %gep = getelementptr %F2, ptr %base, <8 x i64> %idx, i32 0, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %res = call <8 x float> @llvm.masked.gather.v8f32.v8p0(<8 x ptr> %gep, i32 0, <8 x i1> %mask, <8 x float> undef)
  ret <8 x float> %res
}

define <8 x float> @test_f32v8_5(ptr %base, <8 x i64> %i, <8 x i1> %mask) {
; SKL-LABEL: test_f32v8_5:
; SKL:       # %bb.0:
; SKL-NEXT:    vpmovzxwd {{.*#+}} ymm2 = xmm2[0],zero,xmm2[1],zero,xmm2[2],zero,xmm2[3],zero,xmm2[4],zero,xmm2[5],zero,xmm2[6],zero,xmm2[7],zero
; SKL-NEXT:    vpslld $31, %ymm2, %ymm2
; SKL-NEXT:    vpand {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %ymm0, %ymm0
; SKL-NEXT:    vpbroadcastq {{.*#+}} ymm3 = [20,20,20,20]
; SKL-NEXT:    vpmuldq %ymm3, %ymm0, %ymm0
; SKL-NEXT:    vpand {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %ymm1, %ymm1
; SKL-NEXT:    vpmuldq %ymm3, %ymm1, %ymm1
; SKL-NEXT:    vextracti128 $1, %ymm2, %xmm3
; SKL-NEXT:    vxorps %xmm4, %xmm4, %xmm4
; SKL-NEXT:    vxorps %xmm5, %xmm5, %xmm5
; SKL-NEXT:    vgatherqps %xmm3, 4(%rdi,%ymm1), %xmm5
; SKL-NEXT:    vgatherqps %xmm2, 4(%rdi,%ymm0), %xmm4
; SKL-NEXT:    vinsertf128 $1, %xmm5, %ymm4, %ymm0
; SKL-NEXT:    retq
;
; SKL-DWORD-IDX-LABEL: test_f32v8_5:
; SKL-DWORD-IDX:       # %bb.0:
; SKL-DWORD-IDX-NEXT:    vpmovzxwd {{.*#+}} ymm2 = xmm2[0],zero,xmm2[1],zero,xmm2[2],zero,xmm2[3],zero,xmm2[4],zero,xmm2[5],zero,xmm2[6],zero,xmm2[7],zero
; SKL-DWORD-IDX-NEXT:    vpslld $31, %ymm2, %ymm2
; SKL-DWORD-IDX-NEXT:    vmovdqa {{.*#+}} ymm3 = [0,2,4,6,4,6,6,7]
; SKL-DWORD-IDX-NEXT:    vpermd %ymm0, %ymm3, %ymm0
; SKL-DWORD-IDX-NEXT:    vpermd %ymm1, %ymm3, %ymm1
; SKL-DWORD-IDX-NEXT:    vinserti128 $1, %xmm1, %ymm0, %ymm0
; SKL-DWORD-IDX-NEXT:    vpand {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %ymm0, %ymm0
; SKL-DWORD-IDX-NEXT:    vpslld $2, %ymm0, %ymm1
; SKL-DWORD-IDX-NEXT:    vpaddd %ymm1, %ymm0, %ymm1
; SKL-DWORD-IDX-NEXT:    vpxor %xmm0, %xmm0, %xmm0
; SKL-DWORD-IDX-NEXT:    vgatherdps %ymm2, 4(%rdi,%ymm1,4), %ymm0
; SKL-DWORD-IDX-NEXT:    retq
;
; SKL-32-LABEL: test_f32v8_5:
; SKL-32:       # %bb.0:
; SKL-32-NEXT:    vpmovzxwd {{.*#+}} ymm2 = xmm2[0],zero,xmm2[1],zero,xmm2[2],zero,xmm2[3],zero,xmm2[4],zero,xmm2[5],zero,xmm2[6],zero,xmm2[7],zero
; SKL-32-NEXT:    vpslld $31, %ymm2, %ymm2
; SKL-32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; SKL-32-NEXT:    vmovdqa {{.*#+}} ymm3 = [0,2,4,6,4,6,6,7]
; SKL-32-NEXT:    vpermd %ymm0, %ymm3, %ymm0
; SKL-32-NEXT:    vpermd %ymm1, %ymm3, %ymm1
; SKL-32-NEXT:    vinserti128 $1, %xmm1, %ymm0, %ymm0
; SKL-32-NEXT:    vpand {{\.?LCPI[0-9]+_[0-9]+}}, %ymm0, %ymm0
; SKL-32-NEXT:    vpbroadcastd {{.*#+}} ymm1 = [20,20,20,20,20,20,20,20]
; SKL-32-NEXT:    vpmulld %ymm1, %ymm0, %ymm1
; SKL-32-NEXT:    vpxor %xmm0, %xmm0, %xmm0
; SKL-32-NEXT:    vgatherdps %ymm2, 4(%eax,%ymm1), %ymm0
; SKL-32-NEXT:    retl
;
; SKX-LABEL: test_f32v8_5:
; SKX:       # %bb.0:
; SKX-NEXT:    vpsllw $15, %xmm1, %xmm1
; SKX-NEXT:    vpmovw2m %xmm1, %k1
; SKX-NEXT:    vpandq {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %zmm0, %zmm0
; SKX-NEXT:    vpmuldq {{\.?LCPI[0-9]+_[0-9]+}}(%rip){1to8}, %zmm0, %zmm1
; SKX-NEXT:    vpxor %xmm0, %xmm0, %xmm0
; SKX-NEXT:    vgatherqps 4(%rdi,%zmm1), %ymm0 {%k1}
; SKX-NEXT:    retq
;
; SKX-32-LABEL: test_f32v8_5:
; SKX-32:       # %bb.0:
; SKX-32-NEXT:    vpsllw $15, %xmm1, %xmm1
; SKX-32-NEXT:    vpmovw2m %xmm1, %k1
; SKX-32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; SKX-32-NEXT:    vpmovqd %zmm0, %ymm0
; SKX-32-NEXT:    vpand {{\.?LCPI[0-9]+_[0-9]+}}, %ymm0, %ymm0
; SKX-32-NEXT:    vpslld $2, %ymm0, %ymm1
; SKX-32-NEXT:    vpslld $4, %ymm0, %ymm0
; SKX-32-NEXT:    vpaddd %ymm1, %ymm0, %ymm1
; SKX-32-NEXT:    vpxor %xmm0, %xmm0, %xmm0
; SKX-32-NEXT:    vgatherdps 4(%eax,%ymm1), %ymm0 {%k1}
; SKX-32-NEXT:    retl
  %idx = and <8 x i64> %i, <i64 2147483647, i64 16777215, i64 16777215, i64 16777215, i64 16777215, i64 16777215, i64 16777215, i64 16777215>
  %gep = getelementptr %F2, ptr %base, <8 x i64> %idx, i32 0, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %res = call <8 x float> @llvm.masked.gather.v8f32.v8p0(<8 x ptr> %gep, i32 0, <8 x i1> %mask, <8 x float> undef)
  ret <8 x float> %res
}

define <8 x float> @test_f32v8_6(ptr %base, <8 x i64> %i, <8 x i1> %mask) {
; SKL-LABEL: test_f32v8_6:
; SKL:       # %bb.0:
; SKL-NEXT:    vpmovzxwd {{.*#+}} ymm2 = xmm2[0],zero,xmm2[1],zero,xmm2[2],zero,xmm2[3],zero,xmm2[4],zero,xmm2[5],zero,xmm2[6],zero,xmm2[7],zero
; SKL-NEXT:    vpslld $31, %ymm2, %ymm2
; SKL-NEXT:    vmovaps {{.*#+}} ymm3 = [0,2,4,6,4,6,6,7]
; SKL-NEXT:    vpermps %ymm0, %ymm3, %ymm0
; SKL-NEXT:    vpermps %ymm1, %ymm3, %ymm1
; SKL-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm0
; SKL-NEXT:    vbroadcastss {{.*#+}} ymm1 = [268435455,268435455,268435455,268435455,268435455,268435455,268435455,268435455]
; SKL-NEXT:    vandps %ymm1, %ymm0, %ymm1
; SKL-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; SKL-NEXT:    vgatherdps %ymm2, 4(%rdi,%ymm1,8), %ymm0
; SKL-NEXT:    retq
;
; SKL-DWORD-IDX-LABEL: test_f32v8_6:
; SKL-DWORD-IDX:       # %bb.0:
; SKL-DWORD-IDX-NEXT:    vpmovzxwd {{.*#+}} ymm2 = xmm2[0],zero,xmm2[1],zero,xmm2[2],zero,xmm2[3],zero,xmm2[4],zero,xmm2[5],zero,xmm2[6],zero,xmm2[7],zero
; SKL-DWORD-IDX-NEXT:    vpslld $31, %ymm2, %ymm2
; SKL-DWORD-IDX-NEXT:    vmovaps {{.*#+}} ymm3 = [0,2,4,6,4,6,6,7]
; SKL-DWORD-IDX-NEXT:    vpermps %ymm0, %ymm3, %ymm0
; SKL-DWORD-IDX-NEXT:    vpermps %ymm1, %ymm3, %ymm1
; SKL-DWORD-IDX-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm0
; SKL-DWORD-IDX-NEXT:    vbroadcastss {{.*#+}} ymm1 = [268435455,268435455,268435455,268435455,268435455,268435455,268435455,268435455]
; SKL-DWORD-IDX-NEXT:    vandps %ymm1, %ymm0, %ymm1
; SKL-DWORD-IDX-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; SKL-DWORD-IDX-NEXT:    vgatherdps %ymm2, 4(%rdi,%ymm1,8), %ymm0
; SKL-DWORD-IDX-NEXT:    retq
;
; SKL-32-LABEL: test_f32v8_6:
; SKL-32:       # %bb.0:
; SKL-32-NEXT:    vpmovzxwd {{.*#+}} ymm2 = xmm2[0],zero,xmm2[1],zero,xmm2[2],zero,xmm2[3],zero,xmm2[4],zero,xmm2[5],zero,xmm2[6],zero,xmm2[7],zero
; SKL-32-NEXT:    vpslld $31, %ymm2, %ymm2
; SKL-32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; SKL-32-NEXT:    vmovaps {{.*#+}} ymm3 = [0,2,4,6,4,6,6,7]
; SKL-32-NEXT:    vpermps %ymm0, %ymm3, %ymm0
; SKL-32-NEXT:    vpermps %ymm1, %ymm3, %ymm1
; SKL-32-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm0
; SKL-32-NEXT:    vbroadcastss {{.*#+}} ymm1 = [268435455,268435455,268435455,268435455,268435455,268435455,268435455,268435455]
; SKL-32-NEXT:    vandps %ymm1, %ymm0, %ymm1
; SKL-32-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; SKL-32-NEXT:    vgatherdps %ymm2, 4(%eax,%ymm1,8), %ymm0
; SKL-32-NEXT:    retl
;
; SKX-LABEL: test_f32v8_6:
; SKX:       # %bb.0:
; SKX-NEXT:    vpsllw $15, %xmm1, %xmm1
; SKX-NEXT:    vpmovw2m %xmm1, %k1
; SKX-NEXT:    vpmovqd %zmm0, %ymm0
; SKX-NEXT:    vpandd {{\.?LCPI[0-9]+_[0-9]+}}(%rip){1to8}, %ymm0, %ymm1
; SKX-NEXT:    vpxor %xmm0, %xmm0, %xmm0
; SKX-NEXT:    vgatherdps 4(%rdi,%ymm1,8), %ymm0 {%k1}
; SKX-NEXT:    retq
;
; SKX-32-LABEL: test_f32v8_6:
; SKX-32:       # %bb.0:
; SKX-32-NEXT:    vpsllw $15, %xmm1, %xmm1
; SKX-32-NEXT:    vpmovw2m %xmm1, %k1
; SKX-32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; SKX-32-NEXT:    vpmovqd %zmm0, %ymm0
; SKX-32-NEXT:    vpandd {{\.?LCPI[0-9]+_[0-9]+}}{1to8}, %ymm0, %ymm1
; SKX-32-NEXT:    vpxor %xmm0, %xmm0, %xmm0
; SKX-32-NEXT:    vgatherdps 4(%eax,%ymm1,8), %ymm0 {%k1}
; SKX-32-NEXT:    retl
  %idx = and <8 x i64> %i, <i64 268435455, i64 268435455, i64 268435455, i64 268435455, i64 268435455, i64 268435455, i64 268435455, i64 268435455>
  %vec_base = insertelement <8 x ptr> poison, ptr %base, i64 0
  %splat_base = shufflevector <8 x ptr> %vec_base, <8 x ptr> poison, <8 x i32> zeroinitializer
  %gep = getelementptr %F0, <8 x ptr> %splat_base, <8 x i64> %idx, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %res = call <8 x float> @llvm.masked.gather.v8f32.v8p0(<8 x ptr> %gep, i32 0, <8 x i1> %mask, <8 x float> undef)
  ret <8 x float> %res
}

define <8 x float> @test_f32v8_7(ptr %base, <8 x float> %init, <8 x i1> %mask) {
; SKL-LABEL: test_f32v8_7:
; SKL:       # %bb.0: # %entry
; SKL-NEXT:    xorl %eax, %eax
; SKL-NEXT:    vpbroadcastd {{.*#+}} ymm2 = [16000,16000,16000,16000,16000,16000,16000,16000]
; SKL-NEXT:    vpmovzxwd {{.*#+}} ymm1 = xmm1[0],zero,xmm1[1],zero,xmm1[2],zero,xmm1[3],zero,xmm1[4],zero,xmm1[5],zero,xmm1[6],zero,xmm1[7],zero
; SKL-NEXT:    vpslld $31, %ymm1, %ymm1
; SKL-NEXT:    .p2align 4, 0x90
; SKL-NEXT:  .LBB6_1: # %header
; SKL-NEXT:    # =>This Inner Loop Header: Depth=1
; SKL-NEXT:    vmovd %eax, %xmm3
; SKL-NEXT:    vpbroadcastd %xmm3, %ymm3
; SKL-NEXT:    vpmulld %ymm2, %ymm3, %ymm3
; SKL-NEXT:    vmovdqa %ymm1, %ymm4
; SKL-NEXT:    vxorps %xmm5, %xmm5, %xmm5
; SKL-NEXT:    vgatherdps %ymm4, 4(%rdi,%ymm3), %ymm5
; SKL-NEXT:    vaddps %ymm0, %ymm5, %ymm0
; SKL-NEXT:    incq %rax
; SKL-NEXT:    cmpq $16, %rax
; SKL-NEXT:    jne .LBB6_1
; SKL-NEXT:  # %bb.2: # %exit
; SKL-NEXT:    retq
;
; SKL-DWORD-IDX-LABEL: test_f32v8_7:
; SKL-DWORD-IDX:       # %bb.0: # %entry
; SKL-DWORD-IDX-NEXT:    xorl %eax, %eax
; SKL-DWORD-IDX-NEXT:    vpbroadcastd {{.*#+}} ymm2 = [16000,16000,16000,16000,16000,16000,16000,16000]
; SKL-DWORD-IDX-NEXT:    vpmovzxwd {{.*#+}} ymm1 = xmm1[0],zero,xmm1[1],zero,xmm1[2],zero,xmm1[3],zero,xmm1[4],zero,xmm1[5],zero,xmm1[6],zero,xmm1[7],zero
; SKL-DWORD-IDX-NEXT:    vpslld $31, %ymm1, %ymm1
; SKL-DWORD-IDX-NEXT:    .p2align 4, 0x90
; SKL-DWORD-IDX-NEXT:  .LBB6_1: # %header
; SKL-DWORD-IDX-NEXT:    # =>This Inner Loop Header: Depth=1
; SKL-DWORD-IDX-NEXT:    vmovd %eax, %xmm3
; SKL-DWORD-IDX-NEXT:    vpbroadcastd %xmm3, %ymm3
; SKL-DWORD-IDX-NEXT:    vpmulld %ymm2, %ymm3, %ymm3
; SKL-DWORD-IDX-NEXT:    vmovdqa %ymm1, %ymm4
; SKL-DWORD-IDX-NEXT:    vxorps %xmm5, %xmm5, %xmm5
; SKL-DWORD-IDX-NEXT:    vgatherdps %ymm4, 4(%rdi,%ymm3), %ymm5
; SKL-DWORD-IDX-NEXT:    vaddps %ymm0, %ymm5, %ymm0
; SKL-DWORD-IDX-NEXT:    incq %rax
; SKL-DWORD-IDX-NEXT:    cmpq $16, %rax
; SKL-DWORD-IDX-NEXT:    jne .LBB6_1
; SKL-DWORD-IDX-NEXT:  # %bb.2: # %exit
; SKL-DWORD-IDX-NEXT:    retq
;
; SKL-32-LABEL: test_f32v8_7:
; SKL-32:       # %bb.0: # %entry
; SKL-32-NEXT:    pushl %esi
; SKL-32-NEXT:    .cfi_def_cfa_offset 8
; SKL-32-NEXT:    .cfi_offset %esi, -8
; SKL-32-NEXT:    xorl %eax, %eax
; SKL-32-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; SKL-32-NEXT:    vpbroadcastd {{.*#+}} ymm2 = [16000,16000,16000,16000,16000,16000,16000,16000]
; SKL-32-NEXT:    vpmovzxwd {{.*#+}} ymm1 = xmm1[0],zero,xmm1[1],zero,xmm1[2],zero,xmm1[3],zero,xmm1[4],zero,xmm1[5],zero,xmm1[6],zero,xmm1[7],zero
; SKL-32-NEXT:    vpslld $31, %ymm1, %ymm1
; SKL-32-NEXT:    xorl %edx, %edx
; SKL-32-NEXT:    .p2align 4, 0x90
; SKL-32-NEXT:  .LBB6_1: # %header
; SKL-32-NEXT:    # =>This Inner Loop Header: Depth=1
; SKL-32-NEXT:    vmovd %eax, %xmm3
; SKL-32-NEXT:    vpbroadcastd %xmm3, %ymm3
; SKL-32-NEXT:    vpmulld %ymm2, %ymm3, %ymm3
; SKL-32-NEXT:    vmovdqa %ymm1, %ymm4
; SKL-32-NEXT:    vxorps %xmm5, %xmm5, %xmm5
; SKL-32-NEXT:    vgatherdps %ymm4, 4(%ecx,%ymm3), %ymm5
; SKL-32-NEXT:    vaddps %ymm0, %ymm5, %ymm0
; SKL-32-NEXT:    addl $1, %eax
; SKL-32-NEXT:    adcl $0, %edx
; SKL-32-NEXT:    movl %eax, %esi
; SKL-32-NEXT:    xorl $16, %esi
; SKL-32-NEXT:    orl %edx, %esi
; SKL-32-NEXT:    jne .LBB6_1
; SKL-32-NEXT:  # %bb.2: # %exit
; SKL-32-NEXT:    popl %esi
; SKL-32-NEXT:    .cfi_def_cfa_offset 4
; SKL-32-NEXT:    retl
;
; SKX-LABEL: test_f32v8_7:
; SKX:       # %bb.0: # %entry
; SKX-NEXT:    vpsllw $15, %xmm1, %xmm1
; SKX-NEXT:    vpmovw2m %xmm1, %k1
; SKX-NEXT:    xorl %eax, %eax
; SKX-NEXT:    vpbroadcastd {{.*#+}} ymm1 = [16000,16000,16000,16000,16000,16000,16000,16000]
; SKX-NEXT:    .p2align 4, 0x90
; SKX-NEXT:  .LBB6_1: # %header
; SKX-NEXT:    # =>This Inner Loop Header: Depth=1
; SKX-NEXT:    vpbroadcastd %eax, %ymm2
; SKX-NEXT:    vpmulld %ymm1, %ymm2, %ymm2
; SKX-NEXT:    vxorps %xmm3, %xmm3, %xmm3
; SKX-NEXT:    kmovq %k1, %k2
; SKX-NEXT:    vgatherdps 4(%rdi,%ymm2), %ymm3 {%k2}
; SKX-NEXT:    vaddps %ymm0, %ymm3, %ymm0
; SKX-NEXT:    incq %rax
; SKX-NEXT:    cmpq $16, %rax
; SKX-NEXT:    jne .LBB6_1
; SKX-NEXT:  # %bb.2: # %exit
; SKX-NEXT:    retq
;
; SKX-32-LABEL: test_f32v8_7:
; SKX-32:       # %bb.0: # %entry
; SKX-32-NEXT:    pushl %esi
; SKX-32-NEXT:    .cfi_def_cfa_offset 8
; SKX-32-NEXT:    .cfi_offset %esi, -8
; SKX-32-NEXT:    vpsllw $15, %xmm1, %xmm1
; SKX-32-NEXT:    vpmovw2m %xmm1, %k1
; SKX-32-NEXT:    xorl %eax, %eax
; SKX-32-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; SKX-32-NEXT:    vpbroadcastd {{.*#+}} ymm1 = [16000,16000,16000,16000,16000,16000,16000,16000]
; SKX-32-NEXT:    xorl %edx, %edx
; SKX-32-NEXT:    .p2align 4, 0x90
; SKX-32-NEXT:  .LBB6_1: # %header
; SKX-32-NEXT:    # =>This Inner Loop Header: Depth=1
; SKX-32-NEXT:    vpbroadcastd %eax, %ymm2
; SKX-32-NEXT:    vpmulld %ymm1, %ymm2, %ymm2
; SKX-32-NEXT:    kmovq %k1, %k2
; SKX-32-NEXT:    vxorps %xmm3, %xmm3, %xmm3
; SKX-32-NEXT:    vgatherdps 4(%ecx,%ymm2), %ymm3 {%k2}
; SKX-32-NEXT:    vaddps %ymm0, %ymm3, %ymm0
; SKX-32-NEXT:    addl $1, %eax
; SKX-32-NEXT:    adcl $0, %edx
; SKX-32-NEXT:    movl %eax, %esi
; SKX-32-NEXT:    xorl $16, %esi
; SKX-32-NEXT:    orl %edx, %esi
; SKX-32-NEXT:    jne .LBB6_1
; SKX-32-NEXT:  # %bb.2: # %exit
; SKX-32-NEXT:    popl %esi
; SKX-32-NEXT:    .cfi_def_cfa_offset 4
; SKX-32-NEXT:    retl
entry:
  br label %header

header:                                           ; preds = %header, %entry
  %iv = phi i64 [ 0, %entry ], [ %iv.next, %header ]
  %sum.prev = phi <8 x float> [ %init, %entry ], [ %sum, %header ]
  %vec_iv = insertelement <8 x i64> poison, i64 %iv, i64 0
  %splat_iv = shufflevector <8 x i64> %vec_iv, <8 x i64> poison, <8 x i32> zeroinitializer
  %gep = getelementptr [4000 x float], ptr %base, <8 x i64> %splat_iv, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %gather = call <8 x float> @llvm.masked.gather.v8f32.v8p0(<8 x ptr> %gep, i32 0, <8 x i1> %mask, <8 x float> undef)
  %sum = fadd <8 x float> %gather, %sum.prev
  %iv.next = add i64 %iv, 1
  %exitcond = icmp eq i64 %iv.next, 16
  br i1 %exitcond, label %exit, label %header

exit:                                             ; preds = %header
  ret <8 x float> %sum
}

define <8 x float> @test_f32v8_8(ptr %base, <8 x i32> %i1, i32 %i2, <8 x i1> %mask) {
; SKL-LABEL: test_f32v8_8:
; SKL:       # %bb.0:
; SKL-NEXT:    vpmovzxwd {{.*#+}} ymm1 = xmm1[0],zero,xmm1[1],zero,xmm1[2],zero,xmm1[3],zero,xmm1[4],zero,xmm1[5],zero,xmm1[6],zero,xmm1[7],zero
; SKL-NEXT:    vpslld $31, %ymm1, %ymm2
; SKL-NEXT:    movslq %esi, %rax
; SKL-NEXT:    leaq (%rdi,%rax,4), %rax
; SKL-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; SKL-NEXT:    vgatherdps %ymm2, (%rax,%ymm0,4), %ymm1
; SKL-NEXT:    vmovaps %ymm1, %ymm0
; SKL-NEXT:    retq
;
; SKL-DWORD-IDX-LABEL: test_f32v8_8:
; SKL-DWORD-IDX:       # %bb.0:
; SKL-DWORD-IDX-NEXT:    vpmovzxwd {{.*#+}} ymm1 = xmm1[0],zero,xmm1[1],zero,xmm1[2],zero,xmm1[3],zero,xmm1[4],zero,xmm1[5],zero,xmm1[6],zero,xmm1[7],zero
; SKL-DWORD-IDX-NEXT:    vpslld $31, %ymm1, %ymm2
; SKL-DWORD-IDX-NEXT:    movslq %esi, %rax
; SKL-DWORD-IDX-NEXT:    leaq (%rdi,%rax,4), %rax
; SKL-DWORD-IDX-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; SKL-DWORD-IDX-NEXT:    vgatherdps %ymm2, (%rax,%ymm0,4), %ymm1
; SKL-DWORD-IDX-NEXT:    vmovaps %ymm1, %ymm0
; SKL-DWORD-IDX-NEXT:    retq
;
; SKL-32-LABEL: test_f32v8_8:
; SKL-32:       # %bb.0:
; SKL-32-NEXT:    vpmovzxwd {{.*#+}} ymm1 = xmm1[0],zero,xmm1[1],zero,xmm1[2],zero,xmm1[3],zero,xmm1[4],zero,xmm1[5],zero,xmm1[6],zero,xmm1[7],zero
; SKL-32-NEXT:    vpslld $31, %ymm1, %ymm2
; SKL-32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; SKL-32-NEXT:    shll $2, %eax
; SKL-32-NEXT:    addl {{[0-9]+}}(%esp), %eax
; SKL-32-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; SKL-32-NEXT:    vgatherdps %ymm2, (%eax,%ymm0,4), %ymm1
; SKL-32-NEXT:    vmovaps %ymm1, %ymm0
; SKL-32-NEXT:    retl
;
; SKX-LABEL: test_f32v8_8:
; SKX:       # %bb.0:
; SKX-NEXT:    vpsllw $15, %xmm1, %xmm1
; SKX-NEXT:    vpmovw2m %xmm1, %k1
; SKX-NEXT:    movslq %esi, %rax
; SKX-NEXT:    leaq (%rdi,%rax,4), %rax
; SKX-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; SKX-NEXT:    vgatherdps (%rax,%ymm0,4), %ymm1 {%k1}
; SKX-NEXT:    vmovaps %ymm1, %ymm0
; SKX-NEXT:    retq
;
; SKX-32-LABEL: test_f32v8_8:
; SKX-32:       # %bb.0:
; SKX-32-NEXT:    vpsllw $15, %xmm1, %xmm1
; SKX-32-NEXT:    vpmovw2m %xmm1, %k1
; SKX-32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; SKX-32-NEXT:    shll $2, %eax
; SKX-32-NEXT:    addl {{[0-9]+}}(%esp), %eax
; SKX-32-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; SKX-32-NEXT:    vgatherdps (%eax,%ymm0,4), %ymm1 {%k1}
; SKX-32-NEXT:    vmovaps %ymm1, %ymm0
; SKX-32-NEXT:    retl
  %i1_ext = sext <8 x i32> %i1 to <8 x i64>
  %i2_vec = insertelement <8 x i32> poison, i32 %i2, i64 0
  %i2_splat = shufflevector <8 x i32> %i2_vec, <8 x i32> poison, <8 x i32> zeroinitializer
  %gep0 = getelementptr inbounds float, ptr %base, <8 x i32> %i2_splat
  %gep = getelementptr inbounds float, <8 x ptr> %gep0, <8 x i64> %i1_ext
  %res = call <8 x float> @llvm.masked.gather.v8f32.v8p0(<8 x ptr> %gep, i32 0, <8 x i1> %mask, <8 x float> undef)
  ret <8 x float> %res
}

define <8 x i32> @test_i32v8_zext_9(<8 x i32> %index, ptr %base, <8 x i1> %mask) {
; SKL-LABEL: test_i32v8_zext_9:
; SKL:       # %bb.0:
; SKL-NEXT:    vpmovzxwd {{.*#+}} ymm1 = xmm1[0],zero,xmm1[1],zero,xmm1[2],zero,xmm1[3],zero,xmm1[4],zero,xmm1[5],zero,xmm1[6],zero,xmm1[7],zero
; SKL-NEXT:    vpslld $31, %ymm1, %ymm1
; SKL-NEXT:    vpbroadcastd {{.*#+}} ymm2 = [2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648,2147483648]
; SKL-NEXT:    vpsubd %ymm2, %ymm0, %ymm2
; SKL-NEXT:    movabsq $8589934592, %rax # imm = 0x200000000
; SKL-NEXT:    addq %rdi, %rax
; SKL-NEXT:    vpxor %xmm0, %xmm0, %xmm0
; SKL-NEXT:    vpgatherdd %ymm1, (%rax,%ymm2,4), %ymm0
; SKL-NEXT:    retq
;
; SKL-DWORD-IDX-LABEL: test_i32v8_zext_9:
; SKL-DWORD-IDX:       # %bb.0:
; SKL-DWORD-IDX-NEXT:    vpmovzxwd {{.*#+}} ymm1 = xmm1[0],zero,xmm1[1],zero,xmm1[2],zero,xmm1[3],zero,xmm1[4],zero,xmm1[5],zero,xmm1[6],zero,xmm1[7],zero
; SKL-DWORD-IDX-NEXT:    vpslld $31, %ymm1, %ymm2
; SKL-DWORD-IDX-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; SKL-DWORD-IDX-NEXT:    vpgatherdd %ymm2, (%rdi,%ymm0,4), %ymm1
; SKL-DWORD-IDX-NEXT:    vmovdqa %ymm1, %ymm0
; SKL-DWORD-IDX-NEXT:    retq
;
; SKL-32-LABEL: test_i32v8_zext_9:
; SKL-32:       # %bb.0:
; SKL-32-NEXT:    vpmovzxwd {{.*#+}} ymm1 = xmm1[0],zero,xmm1[1],zero,xmm1[2],zero,xmm1[3],zero,xmm1[4],zero,xmm1[5],zero,xmm1[6],zero,xmm1[7],zero
; SKL-32-NEXT:    vpslld $31, %ymm1, %ymm2
; SKL-32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; SKL-32-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; SKL-32-NEXT:    vpgatherdd %ymm2, (%eax,%ymm0,4), %ymm1
; SKL-32-NEXT:    vmovdqa %ymm1, %ymm0
; SKL-32-NEXT:    retl
;
; SKX-LABEL: test_i32v8_zext_9:
; SKX:       # %bb.0:
; SKX-NEXT:    vpsllw $15, %xmm1, %xmm1
; SKX-NEXT:    vpmovw2m %xmm1, %k1
; SKX-NEXT:    movabsq $8589934592, %rax # imm = 0x200000000
; SKX-NEXT:    addq %rdi, %rax
; SKX-NEXT:    vpsubd {{\.?LCPI[0-9]+_[0-9]+}}(%rip){1to8}, %ymm0, %ymm1
; SKX-NEXT:    vpxor %xmm0, %xmm0, %xmm0
; SKX-NEXT:    vpgatherdd (%rax,%ymm1,4), %ymm0 {%k1}
; SKX-NEXT:    retq
;
; SKX-32-LABEL: test_i32v8_zext_9:
; SKX-32:       # %bb.0:
; SKX-32-NEXT:    vpsllw $15, %xmm1, %xmm1
; SKX-32-NEXT:    vpmovw2m %xmm1, %k1
; SKX-32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; SKX-32-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; SKX-32-NEXT:    vpgatherdd (%eax,%ymm0,4), %ymm1 {%k1}
; SKX-32-NEXT:    vmovdqa %ymm1, %ymm0
; SKX-32-NEXT:    retl
  %index_i64 = zext <8 x i32> %index to <8 x i64>
  %gather_ptr = getelementptr inbounds i32, ptr %base, <8 x i64> %index_i64
  %res = tail call <8 x i32> @llvm.masked.gather.v8i32.v8p0(<8 x ptr> %gather_ptr, i32 4, <8 x i1> %mask, <8 x i32> poison)
  ret <8 x i32> %res
}

define <8 x float> @test_f32v8_dword_index_10(ptr %base, <8 x i64> %idx, <8 x i1> %mask) {
; SKL-LABEL: test_f32v8_dword_index_10:
; SKL:       # %bb.0:
; SKL-NEXT:    vpmovzxwd {{.*#+}} ymm2 = xmm2[0],zero,xmm2[1],zero,xmm2[2],zero,xmm2[3],zero,xmm2[4],zero,xmm2[5],zero,xmm2[6],zero,xmm2[7],zero
; SKL-NEXT:    vpslld $31, %ymm2, %ymm2
; SKL-NEXT:    vextracti128 $1, %ymm2, %xmm3
; SKL-NEXT:    vxorps %xmm4, %xmm4, %xmm4
; SKL-NEXT:    vxorps %xmm5, %xmm5, %xmm5
; SKL-NEXT:    vgatherqps %xmm3, (%rdi,%ymm1,4), %xmm5
; SKL-NEXT:    vgatherqps %xmm2, (%rdi,%ymm0,4), %xmm4
; SKL-NEXT:    vinsertf128 $1, %xmm5, %ymm4, %ymm0
; SKL-NEXT:    retq
;
; SKL-DWORD-IDX-LABEL: test_f32v8_dword_index_10:
; SKL-DWORD-IDX:       # %bb.0:
; SKL-DWORD-IDX-NEXT:    vpmovzxwd {{.*#+}} ymm2 = xmm2[0],zero,xmm2[1],zero,xmm2[2],zero,xmm2[3],zero,xmm2[4],zero,xmm2[5],zero,xmm2[6],zero,xmm2[7],zero
; SKL-DWORD-IDX-NEXT:    vpslld $31, %ymm2, %ymm2
; SKL-DWORD-IDX-NEXT:    vmovaps {{.*#+}} ymm3 = [0,2,4,6,4,6,6,7]
; SKL-DWORD-IDX-NEXT:    vpermps %ymm0, %ymm3, %ymm0
; SKL-DWORD-IDX-NEXT:    vpermps %ymm1, %ymm3, %ymm1
; SKL-DWORD-IDX-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm1
; SKL-DWORD-IDX-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; SKL-DWORD-IDX-NEXT:    vgatherdps %ymm2, (%rdi,%ymm1,4), %ymm0
; SKL-DWORD-IDX-NEXT:    retq
;
; SKL-32-LABEL: test_f32v8_dword_index_10:
; SKL-32:       # %bb.0:
; SKL-32-NEXT:    vpmovzxwd {{.*#+}} ymm2 = xmm2[0],zero,xmm2[1],zero,xmm2[2],zero,xmm2[3],zero,xmm2[4],zero,xmm2[5],zero,xmm2[6],zero,xmm2[7],zero
; SKL-32-NEXT:    vpslld $31, %ymm2, %ymm2
; SKL-32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; SKL-32-NEXT:    vmovaps {{.*#+}} ymm3 = [0,2,4,6,4,6,6,7]
; SKL-32-NEXT:    vpermps %ymm0, %ymm3, %ymm0
; SKL-32-NEXT:    vpermps %ymm1, %ymm3, %ymm1
; SKL-32-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm1
; SKL-32-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; SKL-32-NEXT:    vgatherdps %ymm2, (%eax,%ymm1,4), %ymm0
; SKL-32-NEXT:    retl
;
; SKX-LABEL: test_f32v8_dword_index_10:
; SKX:       # %bb.0:
; SKX-NEXT:    vpsllw $15, %xmm1, %xmm1
; SKX-NEXT:    vpmovw2m %xmm1, %k1
; SKX-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; SKX-NEXT:    vgatherqps (%rdi,%zmm0,4), %ymm1 {%k1}
; SKX-NEXT:    vmovaps %ymm1, %ymm0
; SKX-NEXT:    retq
;
; SKX-32-LABEL: test_f32v8_dword_index_10:
; SKX-32:       # %bb.0:
; SKX-32-NEXT:    vpsllw $15, %xmm1, %xmm1
; SKX-32-NEXT:    vpmovw2m %xmm1, %k1
; SKX-32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; SKX-32-NEXT:    vpmovqd %zmm0, %ymm1
; SKX-32-NEXT:    vpxor %xmm0, %xmm0, %xmm0
; SKX-32-NEXT:    vgatherdps (%eax,%ymm1,4), %ymm0 {%k1}
; SKX-32-NEXT:    retl
  %gep = getelementptr float, ptr %base, <8 x i64> %idx
  %res = call <8 x float> @llvm.masked.gather.v8f32.v8p0(<8 x ptr> %gep, i32 0, <8 x i1> %mask, <8 x float> undef)
  ret <8 x float> %res
}

define <8 x float> @test_f32v8_dword_index_11(ptr %base, <8 x i64> %idx, <8 x i1> %mask) {
; SKL-LABEL: test_f32v8_dword_index_11:
; SKL:       # %bb.0:
; SKL-NEXT:    vpmovzxwd {{.*#+}} ymm2 = xmm2[0],zero,xmm2[1],zero,xmm2[2],zero,xmm2[3],zero,xmm2[4],zero,xmm2[5],zero,xmm2[6],zero,xmm2[7],zero
; SKL-NEXT:    vpslld $31, %ymm2, %ymm2
; SKL-NEXT:    vpbroadcastq {{.*#+}} ymm3 = [20,20,20,20]
; SKL-NEXT:    vpmuludq %ymm3, %ymm0, %ymm4
; SKL-NEXT:    vpsrlq $32, %ymm0, %ymm0
; SKL-NEXT:    vpmuludq %ymm3, %ymm0, %ymm0
; SKL-NEXT:    vpsllq $32, %ymm0, %ymm0
; SKL-NEXT:    vpaddq %ymm0, %ymm4, %ymm0
; SKL-NEXT:    vpmuludq %ymm3, %ymm1, %ymm4
; SKL-NEXT:    vpsrlq $32, %ymm1, %ymm1
; SKL-NEXT:    vpmuludq %ymm3, %ymm1, %ymm1
; SKL-NEXT:    vpsllq $32, %ymm1, %ymm1
; SKL-NEXT:    vpaddq %ymm1, %ymm4, %ymm1
; SKL-NEXT:    vextracti128 $1, %ymm2, %xmm3
; SKL-NEXT:    vpxor %xmm4, %xmm4, %xmm4
; SKL-NEXT:    vxorps %xmm5, %xmm5, %xmm5
; SKL-NEXT:    vgatherqps %xmm3, 4(%rdi,%ymm1), %xmm5
; SKL-NEXT:    vgatherqps %xmm2, 4(%rdi,%ymm0), %xmm4
; SKL-NEXT:    vinsertf128 $1, %xmm5, %ymm4, %ymm0
; SKL-NEXT:    retq
;
; SKL-DWORD-IDX-LABEL: test_f32v8_dword_index_11:
; SKL-DWORD-IDX:       # %bb.0:
; SKL-DWORD-IDX-NEXT:    vpmovzxwd {{.*#+}} ymm2 = xmm2[0],zero,xmm2[1],zero,xmm2[2],zero,xmm2[3],zero,xmm2[4],zero,xmm2[5],zero,xmm2[6],zero,xmm2[7],zero
; SKL-DWORD-IDX-NEXT:    vpslld $31, %ymm2, %ymm2
; SKL-DWORD-IDX-NEXT:    vmovdqa {{.*#+}} ymm3 = [0,2,4,6,4,6,6,7]
; SKL-DWORD-IDX-NEXT:    vpermd %ymm0, %ymm3, %ymm0
; SKL-DWORD-IDX-NEXT:    vpermd %ymm1, %ymm3, %ymm1
; SKL-DWORD-IDX-NEXT:    vinserti128 $1, %xmm1, %ymm0, %ymm0
; SKL-DWORD-IDX-NEXT:    vpslld $2, %ymm0, %ymm1
; SKL-DWORD-IDX-NEXT:    vpaddd %ymm1, %ymm0, %ymm1
; SKL-DWORD-IDX-NEXT:    vpxor %xmm0, %xmm0, %xmm0
; SKL-DWORD-IDX-NEXT:    vgatherdps %ymm2, 4(%rdi,%ymm1,4), %ymm0
; SKL-DWORD-IDX-NEXT:    retq
;
; SKL-32-LABEL: test_f32v8_dword_index_11:
; SKL-32:       # %bb.0:
; SKL-32-NEXT:    vpmovzxwd {{.*#+}} ymm2 = xmm2[0],zero,xmm2[1],zero,xmm2[2],zero,xmm2[3],zero,xmm2[4],zero,xmm2[5],zero,xmm2[6],zero,xmm2[7],zero
; SKL-32-NEXT:    vpslld $31, %ymm2, %ymm2
; SKL-32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; SKL-32-NEXT:    vmovdqa {{.*#+}} ymm3 = [0,2,4,6,4,6,6,7]
; SKL-32-NEXT:    vpermd %ymm0, %ymm3, %ymm0
; SKL-32-NEXT:    vpermd %ymm1, %ymm3, %ymm1
; SKL-32-NEXT:    vinserti128 $1, %xmm1, %ymm0, %ymm0
; SKL-32-NEXT:    vpbroadcastd {{.*#+}} ymm1 = [20,20,20,20,20,20,20,20]
; SKL-32-NEXT:    vpmulld %ymm1, %ymm0, %ymm1
; SKL-32-NEXT:    vpxor %xmm0, %xmm0, %xmm0
; SKL-32-NEXT:    vgatherdps %ymm2, 4(%eax,%ymm1), %ymm0
; SKL-32-NEXT:    retl
;
; SKX-LABEL: test_f32v8_dword_index_11:
; SKX:       # %bb.0:
; SKX-NEXT:    vpsllw $15, %xmm1, %xmm1
; SKX-NEXT:    vpmovw2m %xmm1, %k1
; SKX-NEXT:    vpsllq $2, %zmm0, %zmm1
; SKX-NEXT:    vpsllq $4, %zmm0, %zmm0
; SKX-NEXT:    vpaddq %zmm1, %zmm0, %zmm1
; SKX-NEXT:    vpxor %xmm0, %xmm0, %xmm0
; SKX-NEXT:    vgatherqps 4(%rdi,%zmm1), %ymm0 {%k1}
; SKX-NEXT:    retq
;
; SKX-32-LABEL: test_f32v8_dword_index_11:
; SKX-32:       # %bb.0:
; SKX-32-NEXT:    vpsllw $15, %xmm1, %xmm1
; SKX-32-NEXT:    vpmovw2m %xmm1, %k1
; SKX-32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; SKX-32-NEXT:    vpmovqd %zmm0, %ymm0
; SKX-32-NEXT:    vpslld $2, %ymm0, %ymm1
; SKX-32-NEXT:    vpslld $4, %ymm0, %ymm0
; SKX-32-NEXT:    vpaddd %ymm1, %ymm0, %ymm1
; SKX-32-NEXT:    vpxor %xmm0, %xmm0, %xmm0
; SKX-32-NEXT:    vgatherdps 4(%eax,%ymm1), %ymm0 {%k1}
; SKX-32-NEXT:    retl
  %gep = getelementptr %F2, ptr %base, <8 x i64> %idx, i32 0, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %res = call <8 x float> @llvm.masked.gather.v8f32.v8p0(<8 x ptr> %gep, i32 0, <8 x i1> %mask, <8 x float> undef)
  ret <8 x float> %res
}

define <4 x i64> @test_i64v4_32bits_ptr_12(ptr %base, <4 x i32> %idx)
; SKL-LABEL: test_i64v4_32bits_ptr_12:
; SKL:       # %bb.0:
; SKL-NEXT:    vpbroadcastd {{.*#+}} xmm1 = [12,12,12,12]
; SKL-NEXT:    vpmulld %xmm1, %xmm0, %xmm1
; SKL-NEXT:    vpcmpeqd %ymm2, %ymm2, %ymm2
; SKL-NEXT:    vpxor %xmm0, %xmm0, %xmm0
; SKL-NEXT:    vpgatherdq %ymm2, 4(%rdi,%xmm1), %ymm0
; SKL-NEXT:    retq
;
; SKL-DWORD-IDX-LABEL: test_i64v4_32bits_ptr_12:
; SKL-DWORD-IDX:       # %bb.0:
; SKL-DWORD-IDX-NEXT:    vpaddd %xmm0, %xmm0, %xmm1
; SKL-DWORD-IDX-NEXT:    vpaddd %xmm1, %xmm0, %xmm1
; SKL-DWORD-IDX-NEXT:    vpcmpeqd %ymm2, %ymm2, %ymm2
; SKL-DWORD-IDX-NEXT:    vpxor %xmm0, %xmm0, %xmm0
; SKL-DWORD-IDX-NEXT:    vpgatherdq %ymm2, 4(%rdi,%xmm1,4), %ymm0
; SKL-DWORD-IDX-NEXT:    retq
;
; SKL-32-LABEL: test_i64v4_32bits_ptr_12:
; SKL-32:       # %bb.0:
; SKL-32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; SKL-32-NEXT:    vpbroadcastd {{.*#+}} xmm1 = [12,12,12,12]
; SKL-32-NEXT:    vpmulld %xmm1, %xmm0, %xmm1
; SKL-32-NEXT:    vpcmpeqd %ymm2, %ymm2, %ymm2
; SKL-32-NEXT:    vpxor %xmm0, %xmm0, %xmm0
; SKL-32-NEXT:    vpgatherdq %ymm2, 4(%eax,%xmm1), %ymm0
; SKL-32-NEXT:    retl
;
; SKX-LABEL: test_i64v4_32bits_ptr_12:
; SKX:       # %bb.0:
; SKX-NEXT:    vpslld $2, %xmm0, %xmm1
; SKX-NEXT:    vpslld $3, %xmm0, %xmm0
; SKX-NEXT:    vpaddd %xmm1, %xmm0, %xmm1
; SKX-NEXT:    kxnorw %k0, %k0, %k1
; SKX-NEXT:    vpxor %xmm0, %xmm0, %xmm0
; SKX-NEXT:    vpgatherdq 4(%rdi,%xmm1), %ymm0 {%k1}
; SKX-NEXT:    retq
;
; SKX-32-LABEL: test_i64v4_32bits_ptr_12:
; SKX-32:       # %bb.0:
; SKX-32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; SKX-32-NEXT:    vpslld $2, %xmm0, %xmm1
; SKX-32-NEXT:    vpslld $3, %xmm0, %xmm0
; SKX-32-NEXT:    vpaddd %xmm1, %xmm0, %xmm1
; SKX-32-NEXT:    kxnorw %k0, %k0, %k1
; SKX-32-NEXT:    vpxor %xmm0, %xmm0, %xmm0
; SKX-32-NEXT:    vpgatherdq 4(%eax,%xmm1), %ymm0 {%k1}
; SKX-32-NEXT:    retl
{
  %gep = getelementptr inbounds %F20, ptr %base, <4 x i32> %idx, i32 1
  %res = call <4 x i64> @llvm.masked.gather.v4i64.v4p0(<4 x ptr> %gep, i32 4, <4 x i1> <i1 true, i1 true, i1 true, i1 true>, <4 x i64> poison)
  ret <4 x i64> %res
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(read)
declare <8 x i32> @llvm.masked.gather.v8i32.v8p0(<8 x ptr>, i32 immarg, <8 x i1>, <8 x i32>) #0

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(read)
declare <8 x float> @llvm.masked.gather.v8f32.v8p0(<8 x ptr>, i32 immarg, <8 x i1>, <8 x float>) #0

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(read)
declare <4 x i64> @llvm.masked.gather.v4i64.v4p0(<4 x ptr>, i32 immarg, <4 x i1>, <4 x i64>) #0

attributes #0 = { nocallback nofree nosync nounwind willreturn memory(read) }
