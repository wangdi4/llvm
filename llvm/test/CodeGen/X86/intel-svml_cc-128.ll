; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-unknown-linux-gnu -mattr=sse2 | FileCheck %s --check-prefix=SSE
; RUN: llc < %s -mtriple=x86_64-unknown-linux-gnu -mattr=avx2 | FileCheck %s
; RUN: llc < %s -mtriple=x86_64-unknown-linux-gnu -mattr=avx512f | FileCheck %s

define <2 x double> @svml_cc_v2i1(<2 x double> %x, <2 x i64> %mask) {
; SSE-LABEL: svml_cc_v2i1:
; SSE:       # %bb.0:
; SSE-NEXT:    pushq %rax
; SSE-NEXT:    .cfi_def_cfa_offset 16
; SSE-NEXT:    pxor %xmm2, %xmm2
; SSE-NEXT:    pcmpeqd %xmm1, %xmm2
; SSE-NEXT:    pshufd {{.*#+}} xmm1 = xmm2[1,0,3,2]
; SSE-NEXT:    pand %xmm2, %xmm1
; SSE-NEXT:    callq *mysvml_v2f64_v2i1@GOTPCREL(%rip)
; SSE-NEXT:    popq %rax
; SSE-NEXT:    .cfi_def_cfa_offset 8
; SSE-NEXT:    retq
;
; CHECK-LABEL: svml_cc_v2i1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    vpxor %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vpcmpeqq %xmm2, %xmm1, %xmm1
; CHECK-NEXT:    callq *mysvml_v2f64_v2i1@GOTPCREL(%rip)
; CHECK-NEXT:    popq %rax
; CHECK-NEXT:    .cfi_def_cfa_offset 8
; CHECK-NEXT:    retq
  %m = icmp eq <2 x i64> %mask, zeroinitializer
  %res = call svml_cc <2 x double> @mysvml_v2f64_v2i1(<2 x double> %x, <2 x i1> %m)
  ret <2 x double> %res
}

define <4 x float> @svml_cc_v4i1(<4 x float> %x, <4 x i32> %mask) {
; SSE-LABEL: svml_cc_v4i1:
; SSE:       # %bb.0:
; SSE-NEXT:    pushq %rax
; SSE-NEXT:    .cfi_def_cfa_offset 16
; SSE-NEXT:    pxor %xmm2, %xmm2
; SSE-NEXT:    pcmpeqd %xmm2, %xmm1
; SSE-NEXT:    callq *mysvml_v4f32_v4i1@GOTPCREL(%rip)
; SSE-NEXT:    popq %rax
; SSE-NEXT:    .cfi_def_cfa_offset 8
; SSE-NEXT:    retq
;
; CHECK-LABEL: svml_cc_v4i1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    vpxor %xmm2, %xmm2, %xmm2
; CHECK-NEXT:    vpcmpeqd %xmm2, %xmm1, %xmm1
; CHECK-NEXT:    callq *mysvml_v4f32_v4i1@GOTPCREL(%rip)
; CHECK-NEXT:    popq %rax
; CHECK-NEXT:    .cfi_def_cfa_offset 8
; CHECK-NEXT:    retq
  %m = icmp eq <4 x i32> %mask, zeroinitializer
  %res = call svml_cc <4 x float> @mysvml_v4f32_v4i1(<4 x float> %x, <4 x i1> %m)
  ret <4 x float> %res
}

declare <2 x double> @mysvml_v2f64_v2i1(<2 x double>, <2 x i1>)
declare <4 x float> @mysvml_v4f32_v4i1(<4 x float>, <4 x i1>)
