# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
#RUN: llc %s -o - -run-pass=global-fma -verify-machineinstrs -mtriple=x86_64-unknown-unknown -mcpu=skx -fp-contract=fast -enable-unsafe-fp-math -enable-misched=0 -code-model=kernel | FileCheck %s

--- |
  ; ModuleID = 'test/CodeGen/X86/Intel-global-fma-fp1.ll'
  source_filename = "test/CodeGen/X86/Intel-global-fma-fp1.ll"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

  ; Function Attrs: nounwind
  define float @test_ss(float %a32, float %b32, float %c32, float %d32) #0 {
  entry:
    %mul = fmul fast float %a32, %d32
    %mul1 = fmul fast float %mul, %c32
    %add = fadd fast float %mul1, %d32
    %add2 = fadd fast float %add, %b32
    ret float %add2
  }

  ; Function Attrs: nounwind
  define double @test_sd(double %a64, double %b64, double %c64, double %d64) #0 {
  entry:
    %mul = fmul fast double %a64, %d64
    %mul1 = fmul fast double %mul, %c64
    %add = fadd fast double %mul1, %d64
    %add2 = fadd fast double %add, %b64
    ret double %add2
  }

  ; Function Attrs: nounwind
  define <4 x float> @test_ps(<4 x float> %a32, <4 x float> %b32, <4 x float> %c32, <4 x float> %d32) #0 {
  entry:
    %mul = fmul fast <4 x float> %a32, %d32
    %mul1 = fmul fast <4 x float> %mul, %c32
    %add = fadd fast <4 x float> %mul1, %d32
    %add2 = fadd fast <4 x float> %add, %b32
    ret <4 x float> %add2
  }

  ; Function Attrs: nounwind
  define <2 x double> @test_pd(<2 x double> %a32, <2 x double> %b32, <2 x double> %c32, <2 x double> %d32) #0 {
  entry:
    %mul = fmul fast <2 x double> %a32, %d32
    %mul1 = fmul fast <2 x double> %mul, %c32
    %add = fadd fast <2 x double> %mul1, %d32
    %add2 = fadd fast <2 x double> %add, %b32
    ret <2 x double> %add2
  }

  ; Function Attrs: nounwind
  define <8 x float> @test_ps256(<8 x float> %a32, <8 x float> %b32, <8 x float> %c32, <8 x float> %d32) #0 {
  entry:
    %mul = fmul fast <8 x float> %a32, %d32
    %mul1 = fmul fast <8 x float> %mul, %c32
    %add = fadd fast <8 x float> %mul1, %d32
    %add2 = fadd fast <8 x float> %add, %b32
    ret <8 x float> %add2
  }

  ; Function Attrs: nounwind
  define <4 x double> @test_pd256(<4 x double> %a32, <4 x double> %b32, <4 x double> %c32, <4 x double> %d32) #0 {
  entry:
    %mul = fmul fast <4 x double> %a32, %d32
    %mul1 = fmul fast <4 x double> %mul, %c32
    %add = fadd fast <4 x double> %mul1, %d32
    %add2 = fadd fast <4 x double> %add, %b32
    ret <4 x double> %add2
  }

  ; Function Attrs: nounwind
  define <16 x float> @test_ps512(<16 x float> %a32, <16 x float> %b32, <16 x float> %c32, <16 x float> %d32) #1 {
  entry:
    %mul = fmul fast <16 x float> %a32, %d32
    %mul1 = fmul fast <16 x float> %mul, %c32
    %add = fadd fast <16 x float> %mul1, %d32
    %add2 = fadd fast <16 x float> %add, %b32
    ret <16 x float> %add2
  }

  ; Function Attrs: nounwind
  define <8 x double> @test_pd512(<8 x double> %a32, <8 x double> %b32, <8 x double> %c32, <8 x double> %d32) #1 {
  entry:
    %mul = fmul fast <8 x double> %a32, %d32
    %mul1 = fmul fast <8 x double> %mul, %c32
    %add = fadd fast <8 x double> %mul1, %d32
    %add2 = fadd fast <8 x double> %add, %b32
    ret <8 x double> %add2
  }

  attributes #0 = { nounwind "target-cpu"="skx" }
  attributes #1 = { nounwind "target-cpu"="skx" "target-features"="+avx512f,+fma" }

...
---
name:            test_ss
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:
  - { id: 0, class: fr32x, preferred-register: '' }
  - { id: 1, class: fr32x, preferred-register: '' }
  - { id: 2, class: fr32x, preferred-register: '' }
  - { id: 3, class: fr32x, preferred-register: '' }
  - { id: 4, class: fr32x, preferred-register: '' }
  - { id: 5, class: fr32x, preferred-register: '' }
  - { id: 6, class: fr32x, preferred-register: '' }
liveins:
  - { reg: '$xmm0', virtual-reg: '%0' }
  - { reg: '$xmm1', virtual-reg: '%1' }
  - { reg: '$xmm2', virtual-reg: '%2' }
  - { reg: '$xmm3', virtual-reg: '%3' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $xmm0, $xmm1, $xmm2, $xmm3

    ; CHECK-LABEL: name: test_ss
    ; CHECK: liveins: $xmm0, $xmm1, $xmm2, $xmm3
    ; CHECK: [[COPY:%[0-9]+]]:fr32x = COPY $xmm3
    ; CHECK: [[COPY1:%[0-9]+]]:fr32x = COPY $xmm2
    ; CHECK: [[COPY2:%[0-9]+]]:fr32x = COPY $xmm1
    ; CHECK: [[COPY3:%[0-9]+]]:fr32x = COPY $xmm0
    ; CHECK: [[MOV32ri:%[0-9]+]]:gr32 = MOV32ri 1065353216
    ; CHECK: [[VMOVDI2SSZrr:%[0-9]+]]:fr32x = VMOVDI2SSZrr killed [[MOV32ri]]
    ; CHECK: %9:fr32x = nofpexcept VFMADD213SSZr [[COPY1]], [[COPY3]], killed [[VMOVDI2SSZrr]], implicit $mxcsr
    ; CHECK: %6:fr32x = nofpexcept VFMADD213SSZr killed %9, [[COPY]], [[COPY2]], implicit $mxcsr
    ; CHECK: $xmm0 = COPY %6
    ; CHECK: RET 0, $xmm0
    %3:fr32x = COPY $xmm3
    %2:fr32x = COPY $xmm2
    %1:fr32x = COPY $xmm1
    %0:fr32x = COPY $xmm0
    %4:fr32x = nnan ninf nsz arcp contract afn reassoc nofpexcept VMULSSZrr %0, %3, implicit $mxcsr
    %5:fr32x = nnan ninf nsz arcp contract afn reassoc nofpexcept VFMADD213SSZr %2, killed %4, %3, implicit $mxcsr
    %6:fr32x = nnan ninf nsz arcp contract afn reassoc nofpexcept VADDSSZrr killed %5, %1, implicit $mxcsr
    $xmm0 = COPY %6
    RET 0, $xmm0

...
---
name:            test_sd
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:
  - { id: 0, class: fr64x, preferred-register: '' }
  - { id: 1, class: fr64x, preferred-register: '' }
  - { id: 2, class: fr64x, preferred-register: '' }
  - { id: 3, class: fr64x, preferred-register: '' }
  - { id: 4, class: fr64x, preferred-register: '' }
  - { id: 5, class: fr64x, preferred-register: '' }
  - { id: 6, class: fr64x, preferred-register: '' }
liveins:
  - { reg: '$xmm0', virtual-reg: '%0' }
  - { reg: '$xmm1', virtual-reg: '%1' }
  - { reg: '$xmm2', virtual-reg: '%2' }
  - { reg: '$xmm3', virtual-reg: '%3' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $xmm0, $xmm1, $xmm2, $xmm3

    ; CHECK-LABEL: name: test_sd
    ; CHECK: liveins: $xmm0, $xmm1, $xmm2, $xmm3
    ; CHECK: [[COPY:%[0-9]+]]:fr64x = COPY $xmm3
    ; CHECK: [[COPY1:%[0-9]+]]:fr64x = COPY $xmm2
    ; CHECK: [[COPY2:%[0-9]+]]:fr64x = COPY $xmm1
    ; CHECK: [[COPY3:%[0-9]+]]:fr64x = COPY $xmm0
    ; CHECK: [[MOV64ri:%[0-9]+]]:gr64 = MOV64ri 4607182418800017408
    ; CHECK: [[VMOV64toSDZrr:%[0-9]+]]:fr64x = VMOV64toSDZrr killed [[MOV64ri]]
    ; CHECK: %9:fr64x = nofpexcept VFMADD213SDZr [[COPY1]], [[COPY3]], killed [[VMOV64toSDZrr]], implicit $mxcsr
    ; CHECK: %6:fr64x = nofpexcept VFMADD213SDZr killed %9, [[COPY]], [[COPY2]], implicit $mxcsr
    ; CHECK: $xmm0 = COPY %6
    ; CHECK: RET 0, $xmm0
    %3:fr64x = COPY $xmm3
    %2:fr64x = COPY $xmm2
    %1:fr64x = COPY $xmm1
    %0:fr64x = COPY $xmm0
    %4:fr64x = nnan ninf nsz arcp contract afn reassoc nofpexcept VMULSDZrr %0, %3, implicit $mxcsr
    %5:fr64x = nnan ninf nsz arcp contract afn reassoc nofpexcept VFMADD213SDZr %2, killed %4, %3, implicit $mxcsr
    %6:fr64x = nnan ninf nsz arcp contract afn reassoc nofpexcept VADDSDZrr killed %5, %1, implicit $mxcsr
    $xmm0 = COPY %6
    RET 0, $xmm0

...
---
name:            test_ps
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:
  - { id: 0, class: vr128x, preferred-register: '' }
  - { id: 1, class: vr128x, preferred-register: '' }
  - { id: 2, class: vr128x, preferred-register: '' }
  - { id: 3, class: vr128x, preferred-register: '' }
  - { id: 4, class: vr128x, preferred-register: '' }
  - { id: 5, class: vr128x, preferred-register: '' }
  - { id: 6, class: vr128x, preferred-register: '' }
liveins:
  - { reg: '$xmm0', virtual-reg: '%0' }
  - { reg: '$xmm1', virtual-reg: '%1' }
  - { reg: '$xmm2', virtual-reg: '%2' }
  - { reg: '$xmm3', virtual-reg: '%3' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $xmm0, $xmm1, $xmm2, $xmm3

    ; CHECK-LABEL: name: test_ps
    ; CHECK: liveins: $xmm0, $xmm1, $xmm2, $xmm3
    ; CHECK: [[COPY:%[0-9]+]]:vr128x = COPY $xmm3
    ; CHECK: [[COPY1:%[0-9]+]]:vr128x = COPY $xmm2
    ; CHECK: [[COPY2:%[0-9]+]]:vr128x = COPY $xmm1
    ; CHECK: [[COPY3:%[0-9]+]]:vr128x = COPY $xmm0
    ; CHECK: [[MOV32ri:%[0-9]+]]:gr32 = MOV32ri 1065353216
    ; CHECK: [[VPBROADCASTDrZ128rr:%[0-9]+]]:vr128x = VPBROADCASTDrZ128rr killed [[MOV32ri]]
    ; CHECK: %9:vr128x = nofpexcept VFMADD213PSZ128r [[COPY1]], [[COPY3]], killed [[VPBROADCASTDrZ128rr]], implicit $mxcsr
    ; CHECK: %6:vr128x = nofpexcept VFMADD213PSZ128r killed %9, [[COPY]], [[COPY2]], implicit $mxcsr
    ; CHECK: $xmm0 = COPY %6
    ; CHECK: RET 0, $xmm0
    %3:vr128x = COPY $xmm3
    %2:vr128x = COPY $xmm2
    %1:vr128x = COPY $xmm1
    %0:vr128x = COPY $xmm0
    %4:vr128x = nnan ninf nsz arcp contract afn reassoc nofpexcept VMULPSZ128rr %0, %3, implicit $mxcsr
    %5:vr128x = nnan ninf nsz arcp contract afn reassoc nofpexcept VFMADD213PSZ128r %2, killed %4, %3, implicit $mxcsr
    %6:vr128x = nnan ninf nsz arcp contract afn reassoc nofpexcept VADDPSZ128rr killed %5, %1, implicit $mxcsr
    $xmm0 = COPY %6
    RET 0, $xmm0

...
---
name:            test_pd
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:
  - { id: 0, class: vr128x, preferred-register: '' }
  - { id: 1, class: vr128x, preferred-register: '' }
  - { id: 2, class: vr128x, preferred-register: '' }
  - { id: 3, class: vr128x, preferred-register: '' }
  - { id: 4, class: vr128x, preferred-register: '' }
  - { id: 5, class: vr128x, preferred-register: '' }
  - { id: 6, class: vr128x, preferred-register: '' }
liveins:
  - { reg: '$xmm0', virtual-reg: '%0' }
  - { reg: '$xmm1', virtual-reg: '%1' }
  - { reg: '$xmm2', virtual-reg: '%2' }
  - { reg: '$xmm3', virtual-reg: '%3' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $xmm0, $xmm1, $xmm2, $xmm3

    ; CHECK-LABEL: name: test_pd
    ; CHECK: liveins: $xmm0, $xmm1, $xmm2, $xmm3
    ; CHECK: [[COPY:%[0-9]+]]:vr128x = COPY $xmm3
    ; CHECK: [[COPY1:%[0-9]+]]:vr128x = COPY $xmm2
    ; CHECK: [[COPY2:%[0-9]+]]:vr128x = COPY $xmm1
    ; CHECK: [[COPY3:%[0-9]+]]:vr128x = COPY $xmm0
    ; CHECK: [[MOV64ri:%[0-9]+]]:gr64 = MOV64ri 4607182418800017408
    ; CHECK: [[VPBROADCASTQrZ128rr:%[0-9]+]]:vr128x = VPBROADCASTQrZ128rr killed [[MOV64ri]]
    ; CHECK: %9:vr128x = nofpexcept VFMADD213PDZ128r [[COPY1]], [[COPY3]], killed [[VPBROADCASTQrZ128rr]], implicit $mxcsr
    ; CHECK: %6:vr128x = nofpexcept VFMADD213PDZ128r killed %9, [[COPY]], [[COPY2]], implicit $mxcsr
    ; CHECK: $xmm0 = COPY %6
    ; CHECK: RET 0, $xmm0
    %3:vr128x = COPY $xmm3
    %2:vr128x = COPY $xmm2
    %1:vr128x = COPY $xmm1
    %0:vr128x = COPY $xmm0
    %4:vr128x = nnan ninf nsz arcp contract afn reassoc nofpexcept VMULPDZ128rr %0, %3, implicit $mxcsr
    %5:vr128x = nnan ninf nsz arcp contract afn reassoc nofpexcept VFMADD213PDZ128r %2, killed %4, %3, implicit $mxcsr
    %6:vr128x = nnan ninf nsz arcp contract afn reassoc nofpexcept VADDPDZ128rr killed %5, %1, implicit $mxcsr
    $xmm0 = COPY %6
    RET 0, $xmm0

...
---
name:            test_ps256
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:
  - { id: 0, class: vr256x, preferred-register: '' }
  - { id: 1, class: vr256x, preferred-register: '' }
  - { id: 2, class: vr256x, preferred-register: '' }
  - { id: 3, class: vr256x, preferred-register: '' }
  - { id: 4, class: vr256x, preferred-register: '' }
  - { id: 5, class: vr256x, preferred-register: '' }
  - { id: 6, class: vr256x, preferred-register: '' }
liveins:
  - { reg: '$ymm0', virtual-reg: '%0' }
  - { reg: '$ymm1', virtual-reg: '%1' }
  - { reg: '$ymm2', virtual-reg: '%2' }
  - { reg: '$ymm3', virtual-reg: '%3' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $ymm0, $ymm1, $ymm2, $ymm3

    ; CHECK-LABEL: name: test_ps256
    ; CHECK: liveins: $ymm0, $ymm1, $ymm2, $ymm3
    ; CHECK: [[COPY:%[0-9]+]]:vr256x = COPY $ymm3
    ; CHECK: [[COPY1:%[0-9]+]]:vr256x = COPY $ymm2
    ; CHECK: [[COPY2:%[0-9]+]]:vr256x = COPY $ymm1
    ; CHECK: [[COPY3:%[0-9]+]]:vr256x = COPY $ymm0
    ; CHECK: [[MOV32ri:%[0-9]+]]:gr32 = MOV32ri 1065353216
    ; CHECK: [[VPBROADCASTDrZ256rr:%[0-9]+]]:vr256x = VPBROADCASTDrZ256rr killed [[MOV32ri]]
    ; CHECK: %9:vr256x = nofpexcept VFMADD213PSZ256r [[COPY1]], [[COPY3]], killed [[VPBROADCASTDrZ256rr]], implicit $mxcsr
    ; CHECK: %6:vr256x = nofpexcept VFMADD213PSZ256r killed %9, [[COPY]], [[COPY2]], implicit $mxcsr
    ; CHECK: $ymm0 = COPY %6
    ; CHECK: RET 0, $ymm0
    %3:vr256x = COPY $ymm3
    %2:vr256x = COPY $ymm2
    %1:vr256x = COPY $ymm1
    %0:vr256x = COPY $ymm0
    %4:vr256x = nnan ninf nsz arcp contract afn reassoc nofpexcept VMULPSZ256rr %0, %3, implicit $mxcsr
    %5:vr256x = nnan ninf nsz arcp contract afn reassoc nofpexcept VFMADD213PSZ256r %2, killed %4, %3, implicit $mxcsr
    %6:vr256x = nnan ninf nsz arcp contract afn reassoc nofpexcept VADDPSZ256rr killed %5, %1, implicit $mxcsr
    $ymm0 = COPY %6
    RET 0, $ymm0

...
---
name:            test_pd256
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:
  - { id: 0, class: vr256x, preferred-register: '' }
  - { id: 1, class: vr256x, preferred-register: '' }
  - { id: 2, class: vr256x, preferred-register: '' }
  - { id: 3, class: vr256x, preferred-register: '' }
  - { id: 4, class: vr256x, preferred-register: '' }
  - { id: 5, class: vr256x, preferred-register: '' }
  - { id: 6, class: vr256x, preferred-register: '' }
liveins:
  - { reg: '$ymm0', virtual-reg: '%0' }
  - { reg: '$ymm1', virtual-reg: '%1' }
  - { reg: '$ymm2', virtual-reg: '%2' }
  - { reg: '$ymm3', virtual-reg: '%3' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $ymm0, $ymm1, $ymm2, $ymm3

    ; CHECK-LABEL: name: test_pd256
    ; CHECK: liveins: $ymm0, $ymm1, $ymm2, $ymm3
    ; CHECK: [[COPY:%[0-9]+]]:vr256x = COPY $ymm3
    ; CHECK: [[COPY1:%[0-9]+]]:vr256x = COPY $ymm2
    ; CHECK: [[COPY2:%[0-9]+]]:vr256x = COPY $ymm1
    ; CHECK: [[COPY3:%[0-9]+]]:vr256x = COPY $ymm0
    ; CHECK: [[MOV64ri:%[0-9]+]]:gr64 = MOV64ri 4607182418800017408
    ; CHECK: [[VPBROADCASTQrZ256rr:%[0-9]+]]:vr256x = VPBROADCASTQrZ256rr killed [[MOV64ri]]
    ; CHECK: %9:vr256x = nofpexcept VFMADD213PDZ256r [[COPY1]], [[COPY3]], killed [[VPBROADCASTQrZ256rr]], implicit $mxcsr
    ; CHECK: %6:vr256x = nofpexcept VFMADD213PDZ256r killed %9, [[COPY]], [[COPY2]], implicit $mxcsr
    ; CHECK: $ymm0 = COPY %6
    ; CHECK: RET 0, $ymm0
    %3:vr256x = COPY $ymm3
    %2:vr256x = COPY $ymm2
    %1:vr256x = COPY $ymm1
    %0:vr256x = COPY $ymm0
    %4:vr256x = nnan ninf nsz arcp contract afn reassoc nofpexcept VMULPDZ256rr %0, %3, implicit $mxcsr
    %5:vr256x = nnan ninf nsz arcp contract afn reassoc nofpexcept VFMADD213PDZ256r %2, killed %4, %3, implicit $mxcsr
    %6:vr256x = nnan ninf nsz arcp contract afn reassoc nofpexcept VADDPDZ256rr killed %5, %1, implicit $mxcsr
    $ymm0 = COPY %6
    RET 0, $ymm0

...
---
name:            test_ps512
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:
  - { id: 0, class: vr512, preferred-register: '' }
  - { id: 1, class: vr512, preferred-register: '' }
  - { id: 2, class: vr512, preferred-register: '' }
  - { id: 3, class: vr512, preferred-register: '' }
  - { id: 4, class: vr512, preferred-register: '' }
  - { id: 5, class: vr512, preferred-register: '' }
  - { id: 6, class: vr512, preferred-register: '' }
liveins:
  - { reg: '$zmm0', virtual-reg: '%0' }
  - { reg: '$zmm1', virtual-reg: '%1' }
  - { reg: '$zmm2', virtual-reg: '%2' }
  - { reg: '$zmm3', virtual-reg: '%3' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $zmm0, $zmm1, $zmm2, $zmm3

    ; CHECK-LABEL: name: test_ps512
    ; CHECK: liveins: $zmm0, $zmm1, $zmm2, $zmm3
    ; CHECK: [[COPY:%[0-9]+]]:vr512 = COPY $zmm3
    ; CHECK: [[COPY1:%[0-9]+]]:vr512 = COPY $zmm2
    ; CHECK: [[COPY2:%[0-9]+]]:vr512 = COPY $zmm1
    ; CHECK: [[COPY3:%[0-9]+]]:vr512 = COPY $zmm0
    ; CHECK: [[MOV32ri:%[0-9]+]]:gr32 = MOV32ri 1065353216
    ; CHECK: [[VPBROADCASTDrZrr:%[0-9]+]]:vr512 = VPBROADCASTDrZrr killed [[MOV32ri]]
    ; CHECK: %9:vr512 = nofpexcept VFMADD213PSZr [[COPY1]], [[COPY3]], killed [[VPBROADCASTDrZrr]], implicit $mxcsr
    ; CHECK: %6:vr512 = nofpexcept VFMADD213PSZr killed %9, [[COPY]], [[COPY2]], implicit $mxcsr
    ; CHECK: $zmm0 = COPY %6
    ; CHECK: RET 0, $zmm0
    %3:vr512 = COPY $zmm3
    %2:vr512 = COPY $zmm2
    %1:vr512 = COPY $zmm1
    %0:vr512 = COPY $zmm0
    %4:vr512 = nnan ninf nsz arcp contract afn reassoc nofpexcept VMULPSZrr %0, %3, implicit $mxcsr
    %5:vr512 = nnan ninf nsz arcp contract afn reassoc nofpexcept VFMADD213PSZr %2, killed %4, %3, implicit $mxcsr
    %6:vr512 = nnan ninf nsz arcp contract afn reassoc nofpexcept VADDPSZrr killed %5, %1, implicit $mxcsr
    $zmm0 = COPY %6
    RET 0, $zmm0

...
---
name:            test_pd512
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:
  - { id: 0, class: vr512, preferred-register: '' }
  - { id: 1, class: vr512, preferred-register: '' }
  - { id: 2, class: vr512, preferred-register: '' }
  - { id: 3, class: vr512, preferred-register: '' }
  - { id: 4, class: vr512, preferred-register: '' }
  - { id: 5, class: vr512, preferred-register: '' }
  - { id: 6, class: vr512, preferred-register: '' }
liveins:
  - { reg: '$zmm0', virtual-reg: '%0' }
  - { reg: '$zmm1', virtual-reg: '%1' }
  - { reg: '$zmm2', virtual-reg: '%2' }
  - { reg: '$zmm3', virtual-reg: '%3' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $zmm0, $zmm1, $zmm2, $zmm3

    ; CHECK-LABEL: name: test_pd512
    ; CHECK: liveins: $zmm0, $zmm1, $zmm2, $zmm3
    ; CHECK: [[COPY:%[0-9]+]]:vr512 = COPY $zmm3
    ; CHECK: [[COPY1:%[0-9]+]]:vr512 = COPY $zmm2
    ; CHECK: [[COPY2:%[0-9]+]]:vr512 = COPY $zmm1
    ; CHECK: [[COPY3:%[0-9]+]]:vr512 = COPY $zmm0
    ; CHECK: [[MOV64ri:%[0-9]+]]:gr64 = MOV64ri 4607182418800017408
    ; CHECK: [[VPBROADCASTQrZrr:%[0-9]+]]:vr512 = VPBROADCASTQrZrr killed [[MOV64ri]]
    ; CHECK: %9:vr512 = nofpexcept VFMADD213PDZr [[COPY1]], [[COPY3]], killed [[VPBROADCASTQrZrr]], implicit $mxcsr
    ; CHECK: %6:vr512 = nofpexcept VFMADD213PDZr killed %9, [[COPY]], [[COPY2]], implicit $mxcsr
    ; CHECK: $zmm0 = COPY %6
    ; CHECK: RET 0, $zmm0
    %3:vr512 = COPY $zmm3
    %2:vr512 = COPY $zmm2
    %1:vr512 = COPY $zmm1
    %0:vr512 = COPY $zmm0
    %4:vr512 = nnan ninf nsz arcp contract afn reassoc nofpexcept VMULPDZrr %0, %3, implicit $mxcsr
    %5:vr512 = nnan ninf nsz arcp contract afn reassoc nofpexcept VFMADD213PDZr %2, killed %4, %3, implicit $mxcsr
    %6:vr512 = nnan ninf nsz arcp contract afn reassoc nofpexcept VADDPDZrr killed %5, %1, implicit $mxcsr
    $zmm0 = COPY %6
    RET 0, $zmm0

...
