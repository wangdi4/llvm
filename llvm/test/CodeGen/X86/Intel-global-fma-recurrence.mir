# INTEL_FEATURE_CPU_RYL
# REQUIRES: intel_feature_cpu_ryl
# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 2
#
# This test checks the experimental feature to unfuse/crack fmadd
# instructions in any cyclic dependency in a single-block loop.
#
# The test case is generated from:
#
# f.c:
# double f(const double *x, const double *y, unsigned n) {
#   double a = 0.;
# #pragma novector
# #pragma nounroll
#   for (unsigned i = 0; i != n; ++i) {
#     a += x[i] * x[i];
#     a += y[i] * y[i];
#   }
#   return a;
# }
#
# clang -xroyal -O2 -S -ffast-math -emit-llvm f.c
# llc < f.ll -stop-before=global-fma 
#
# After global-fma, we expect the loop to have two adds and two multiplies
# rather than two fmadds.
#
# RUN: llc -o - %s -mtriple=x86_64-- -x86-crack-cyclic-fmas=true -run-pass=global-fma | FileCheck --check-prefix=CHECK_ENABLED %s
# RUN: llc -o - %s -mtriple=x86_64-- -x86-crack-cyclic-fmas=false -run-pass=global-fma | FileCheck --check-prefix=CHECK_NOT_ENABLED %s
--- |
  ; ModuleID = 'f.ll'
  source_filename = "f.c"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-unknown-linux-gnu"

  ; Function Attrs: nofree norecurse nosync nounwind memory(argmem: read) uwtable
  define dso_local nofpclass(nan inf) double @f(ptr nocapture noundef readonly %x, ptr nocapture noundef readonly %y, i32 noundef %n) local_unnamed_addr #0 {
  entry:
    %cmp.not18 = icmp eq i32 %n, 0
    br i1 %cmp.not18, label %for.cond.cleanup, label %for.body.preheader

  for.body.preheader:                               ; preds = %entry
    %0 = zext i32 %n to i64
    br label %for.body

  for.cond.cleanup:                                 ; preds = %for.body, %entry
    %a.0.lcssa = phi double [ 0.000000e+00, %entry ], [ %add8, %for.body ]
    ret double %a.0.lcssa

  for.body:                                         ; preds = %for.body, %for.body.preheader
    %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
    %a.019 = phi double [ 0.000000e+00, %for.body.preheader ], [ %add8, %for.body ]
    %1 = shl nuw nsw i64 %indvars.iv, 3
    %scevgep1 = getelementptr i8, ptr %x, i64 %1
    %2 = load double, ptr %scevgep1, align 8, !tbaa !3
    %mul = fmul fast double %2, %2
    %add = fadd fast double %mul, %a.019
    %3 = shl nuw nsw i64 %indvars.iv, 3
    %scevgep = getelementptr i8, ptr %y, i64 %3
    %4 = load double, ptr %scevgep, align 8, !tbaa !3
    %mul7 = fmul fast double %4, %4
    %add8 = fadd fast double %add, %mul7
    %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
    %cmp.not = icmp eq i64 %0, %indvars.iv.next
    br i1 %cmp.not, label %for.cond.cleanup, label %for.body, !llvm.loop !7
  }

  attributes #0 = { nofree norecurse nosync nounwind memory(argmem: read) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="royal" "target-features"="+adx,+aes,+avx,+avx2,+avx256p,+avxvnni,+bmi,+bmi2,+cldemote,+clflushopt,+clwb,+crc32,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+gfni,+hreset,+invpcid,+kl,+lzcnt,+mmx,+movbe,+movdir64b,+movdiri,+pclmul,+pconfig,+pku,+popcnt,+prfchw,+ptwrite,+rdpid,+rdrnd,+rdseed,+sahf,+serialize,+sgx,+sha,+shstk,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+vaes,+vpclmulqdq,+waitpkg,+widekl,+x87,+xsave,+xsavec,+xsaveopt,+xsaves" "unsafe-fp-math"="true" }

  !llvm.module.flags = !{!0, !1}
  !llvm.ident = !{!2}

  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 7, !"uwtable", i32 2}
  !2 = !{!"Intel(R) oneAPI DPC++/C++ Compiler 2024.0.0 (2024.x.0.YYYYMMDD)"}
  !3 = !{!4, !4, i64 0}
  !4 = !{!"double", !5, i64 0}
  !5 = !{!"omnipotent char", !6, i64 0}
  !6 = !{!"Simple C/C++ TBAA"}
  !7 = distinct !{!7, !8, !9}
  !8 = !{!"llvm.loop.mustprogress"}
  !9 = !{!"llvm.loop.unroll.disable"}

...
---
name:            f
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   true
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: fr64x, preferred-register: '' }
  - { id: 2, class: gr64_nosp, preferred-register: '' }
  - { id: 3, class: fr64x, preferred-register: '' }
  - { id: 4, class: fr64x, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: fr64x, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: fr64x, preferred-register: '' }
  - { id: 12, class: gr32, preferred-register: '' }
  - { id: 13, class: gr32, preferred-register: '' }
  - { id: 14, class: fr64x, preferred-register: '' }
  - { id: 15, class: fr64x, preferred-register: '' }
  - { id: 16, class: fr64x, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%6' }
  - { reg: '$rsi', virtual-reg: '%7' }
  - { reg: '$edx', virtual-reg: '%8' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK_ENABLED-LABEL: name: f
  ; CHECK_ENABLED: bb.0.entry:
  ; CHECK_ENABLED-NEXT:   successors: %bb.1(0x30000000), %bb.2(0x50000000)
  ; CHECK_ENABLED-NEXT:   liveins: $rdi, $rsi, $edx
  ; CHECK_ENABLED-NEXT: {{  $}}
  ; CHECK_ENABLED-NEXT:   [[COPY:%[0-9]+]]:gr32 = COPY $edx
  ; CHECK_ENABLED-NEXT:   [[COPY1:%[0-9]+]]:gr64 = COPY $rsi
  ; CHECK_ENABLED-NEXT:   [[COPY2:%[0-9]+]]:gr64 = COPY $rdi
  ; CHECK_ENABLED-NEXT:   TEST32rr [[COPY]], [[COPY]], implicit-def $eflags
  ; CHECK_ENABLED-NEXT:   JCC_1 %bb.2, 5, implicit $eflags
  ; CHECK_ENABLED-NEXT: {{  $}}
  ; CHECK_ENABLED-NEXT: bb.1.entry:
  ; CHECK_ENABLED-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK_ENABLED-NEXT: {{  $}}
  ; CHECK_ENABLED-NEXT:   [[AVX512_FsFLD0SD:%[0-9]+]]:fr64x = AVX512_FsFLD0SD
  ; CHECK_ENABLED-NEXT:   JMP_1 %bb.3
  ; CHECK_ENABLED-NEXT: {{  $}}
  ; CHECK_ENABLED-NEXT: bb.2.for.body.preheader:
  ; CHECK_ENABLED-NEXT:   successors: %bb.4(0x80000000)
  ; CHECK_ENABLED-NEXT: {{  $}}
  ; CHECK_ENABLED-NEXT:   [[MOV32rr:%[0-9]+]]:gr32 = MOV32rr [[COPY]]
  ; CHECK_ENABLED-NEXT:   [[SUBREG_TO_REG:%[0-9]+]]:gr64 = SUBREG_TO_REG 0, killed [[MOV32rr]], %subreg.sub_32bit
  ; CHECK_ENABLED-NEXT:   [[AVX512_FsFLD0SD1:%[0-9]+]]:fr64x = AVX512_FsFLD0SD
  ; CHECK_ENABLED-NEXT:   [[MOV32r0_:%[0-9]+]]:gr32 = MOV32r0 implicit-def dead $eflags
  ; CHECK_ENABLED-NEXT:   [[SUBREG_TO_REG1:%[0-9]+]]:gr64 = SUBREG_TO_REG 0, killed [[MOV32r0_]], %subreg.sub_32bit
  ; CHECK_ENABLED-NEXT:   JMP_1 %bb.4
  ; CHECK_ENABLED-NEXT: {{  $}}
  ; CHECK_ENABLED-NEXT: bb.3.for.cond.cleanup:
  ; CHECK_ENABLED-NEXT:   [[PHI:%[0-9]+]]:fr64x = PHI [[AVX512_FsFLD0SD]], %bb.1, %4, %bb.4
  ; CHECK_ENABLED-NEXT:   $xmm0 = COPY [[PHI]]
  ; CHECK_ENABLED-NEXT:   RET 0, $xmm0
  ; CHECK_ENABLED-NEXT: {{  $}}
  ; CHECK_ENABLED-NEXT: bb.4.for.body:
  ; CHECK_ENABLED-NEXT:   successors: %bb.3(0x04000000), %bb.4(0x7c000000)
  ; CHECK_ENABLED-NEXT: {{  $}}
  ; CHECK_ENABLED-NEXT:   [[PHI1:%[0-9]+]]:gr64_nosp = PHI [[SUBREG_TO_REG1]], %bb.2, %5, %bb.4
  ; CHECK_ENABLED-NEXT:   [[PHI2:%[0-9]+]]:fr64x = PHI [[AVX512_FsFLD0SD1]], %bb.2, %4, %bb.4
  ; CHECK_ENABLED-NEXT:   [[VMOVSDZrm_alt:%[0-9]+]]:fr64x = VMOVSDZrm_alt [[COPY2]], 8, [[PHI1]], 0, $noreg :: (load (s64) from %ir.scevgep1, !tbaa !3)
  ; CHECK_ENABLED-NEXT:   [[VMULSDZrr:%[0-9]+]]:fr64x = VMULSDZrr [[VMOVSDZrm_alt]], [[VMOVSDZrm_alt]], implicit $mxcsr
  ; CHECK_ENABLED-NEXT:   [[VADDSDZrr:%[0-9]+]]:fr64x = VADDSDZrr [[PHI2]], [[VMULSDZrr]], implicit $mxcsr
  ; CHECK_ENABLED-NEXT:   [[VMOVSDZrm_alt1:%[0-9]+]]:fr64x = VMOVSDZrm_alt [[COPY1]], 8, [[PHI1]], 0, $noreg :: (load (s64) from %ir.scevgep, !tbaa !3)
  ; CHECK_ENABLED-NEXT:   [[VMULSDZrr1:%[0-9]+]]:fr64x = VMULSDZrr [[VMOVSDZrm_alt1]], [[VMOVSDZrm_alt1]], implicit $mxcsr
  ; CHECK_ENABLED-NEXT:   [[VADDSDZrr1:%[0-9]+]]:fr64x = VADDSDZrr killed [[VADDSDZrr]], [[VMULSDZrr1]], implicit $mxcsr
  ; CHECK_ENABLED-NEXT:   [[INC64r:%[0-9]+]]:gr64 = nuw nsw INC64r [[PHI1]], implicit-def dead $eflags
  ; CHECK_ENABLED-NEXT:   [[SUB64rr:%[0-9]+]]:gr64 = SUB64rr [[SUBREG_TO_REG]], [[INC64r]], implicit-def $eflags
  ; CHECK_ENABLED-NEXT:   JCC_1 %bb.3, 4, implicit $eflags
  ; CHECK_ENABLED-NEXT:   JMP_1 %bb.4
  ; CHECK_NOT_ENABLED-LABEL: name: f
  ; CHECK_NOT_ENABLED: bb.0.entry:
  ; CHECK_NOT_ENABLED-NEXT:   successors: %bb.1(0x30000000), %bb.2(0x50000000)
  ; CHECK_NOT_ENABLED-NEXT:   liveins: $rdi, $rsi, $edx
  ; CHECK_NOT_ENABLED-NEXT: {{  $}}
  ; CHECK_NOT_ENABLED-NEXT:   [[COPY:%[0-9]+]]:gr32 = COPY $edx
  ; CHECK_NOT_ENABLED-NEXT:   [[COPY1:%[0-9]+]]:gr64 = COPY $rsi
  ; CHECK_NOT_ENABLED-NEXT:   [[COPY2:%[0-9]+]]:gr64 = COPY $rdi
  ; CHECK_NOT_ENABLED-NEXT:   TEST32rr [[COPY]], [[COPY]], implicit-def $eflags
  ; CHECK_NOT_ENABLED-NEXT:   JCC_1 %bb.2, 5, implicit $eflags
  ; CHECK_NOT_ENABLED-NEXT: {{  $}}
  ; CHECK_NOT_ENABLED-NEXT: bb.1.entry:
  ; CHECK_NOT_ENABLED-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK_NOT_ENABLED-NEXT: {{  $}}
  ; CHECK_NOT_ENABLED-NEXT:   [[AVX512_FsFLD0SD:%[0-9]+]]:fr64x = AVX512_FsFLD0SD
  ; CHECK_NOT_ENABLED-NEXT:   JMP_1 %bb.3
  ; CHECK_NOT_ENABLED-NEXT: {{  $}}
  ; CHECK_NOT_ENABLED-NEXT: bb.2.for.body.preheader:
  ; CHECK_NOT_ENABLED-NEXT:   successors: %bb.4(0x80000000)
  ; CHECK_NOT_ENABLED-NEXT: {{  $}}
  ; CHECK_NOT_ENABLED-NEXT:   [[MOV32rr:%[0-9]+]]:gr32 = MOV32rr [[COPY]]
  ; CHECK_NOT_ENABLED-NEXT:   [[SUBREG_TO_REG:%[0-9]+]]:gr64 = SUBREG_TO_REG 0, killed [[MOV32rr]], %subreg.sub_32bit
  ; CHECK_NOT_ENABLED-NEXT:   [[AVX512_FsFLD0SD1:%[0-9]+]]:fr64x = AVX512_FsFLD0SD
  ; CHECK_NOT_ENABLED-NEXT:   [[MOV32r0_:%[0-9]+]]:gr32 = MOV32r0 implicit-def dead $eflags
  ; CHECK_NOT_ENABLED-NEXT:   [[SUBREG_TO_REG1:%[0-9]+]]:gr64 = SUBREG_TO_REG 0, killed [[MOV32r0_]], %subreg.sub_32bit
  ; CHECK_NOT_ENABLED-NEXT:   JMP_1 %bb.4
  ; CHECK_NOT_ENABLED-NEXT: {{  $}}
  ; CHECK_NOT_ENABLED-NEXT: bb.3.for.cond.cleanup:
  ; CHECK_NOT_ENABLED-NEXT:   [[PHI:%[0-9]+]]:fr64x = PHI [[AVX512_FsFLD0SD]], %bb.1, %4, %bb.4
  ; CHECK_NOT_ENABLED-NEXT:   $xmm0 = COPY [[PHI]]
  ; CHECK_NOT_ENABLED-NEXT:   RET 0, $xmm0
  ; CHECK_NOT_ENABLED-NEXT: {{  $}}
  ; CHECK_NOT_ENABLED-NEXT: bb.4.for.body:
  ; CHECK_NOT_ENABLED-NEXT:   successors: %bb.3(0x04000000), %bb.4(0x7c000000)
  ; CHECK_NOT_ENABLED-NEXT: {{  $}}
  ; CHECK_NOT_ENABLED-NEXT:   [[PHI1:%[0-9]+]]:gr64_nosp = PHI [[SUBREG_TO_REG1]], %bb.2, %5, %bb.4
  ; CHECK_NOT_ENABLED-NEXT:   [[PHI2:%[0-9]+]]:fr64x = PHI [[AVX512_FsFLD0SD1]], %bb.2, %4, %bb.4
  ; CHECK_NOT_ENABLED-NEXT:   [[VMOVSDZrm_alt:%[0-9]+]]:fr64x = VMOVSDZrm_alt [[COPY2]], 8, [[PHI1]], 0, $noreg :: (load (s64) from %ir.scevgep1, !tbaa !3)
  ; CHECK_NOT_ENABLED-NEXT:   [[VFMADD213SDZr:%[0-9]+]]:fr64x = nnan ninf nsz arcp contract afn reassoc nofpexcept VFMADD213SDZr [[VMOVSDZrm_alt]], [[VMOVSDZrm_alt]], [[PHI2]], implicit $mxcsr
  ; CHECK_NOT_ENABLED-NEXT:   [[VMOVSDZrm_alt1:%[0-9]+]]:fr64x = VMOVSDZrm_alt [[COPY1]], 8, [[PHI1]], 0, $noreg :: (load (s64) from %ir.scevgep, !tbaa !3)
  ; CHECK_NOT_ENABLED-NEXT:   [[VFMADD213SDZr1:%[0-9]+]]:fr64x = nnan ninf nsz arcp contract afn reassoc nofpexcept VFMADD213SDZr [[VMOVSDZrm_alt1]], [[VMOVSDZrm_alt1]], killed [[VFMADD213SDZr]], implicit $mxcsr
  ; CHECK_NOT_ENABLED-NEXT:   [[INC64r:%[0-9]+]]:gr64 = nuw nsw INC64r [[PHI1]], implicit-def dead $eflags
  ; CHECK_NOT_ENABLED-NEXT:   [[SUB64rr:%[0-9]+]]:gr64 = SUB64rr [[SUBREG_TO_REG]], [[INC64r]], implicit-def $eflags
  ; CHECK_NOT_ENABLED-NEXT:   JCC_1 %bb.3, 4, implicit $eflags
  ; CHECK_NOT_ENABLED-NEXT:   JMP_1 %bb.4
  bb.0.entry:
    successors: %bb.4(0x30000000), %bb.1(0x50000000)
    liveins: $rdi, $rsi, $edx

    %8:gr32 = COPY $edx
    %7:gr64 = COPY $rsi
    %6:gr64 = COPY $rdi
    TEST32rr %8, %8, implicit-def $eflags
    JCC_1 %bb.1, 5, implicit $eflags

  bb.4.entry:
    successors: %bb.2(0x80000000)

    %9:fr64x = AVX512_FsFLD0SD
    JMP_1 %bb.2

  bb.1.for.body.preheader:
    successors: %bb.3(0x80000000)

    %12:gr32 = MOV32rr %8
    %0:gr64 = SUBREG_TO_REG 0, killed %12, %subreg.sub_32bit
    %11:fr64x = AVX512_FsFLD0SD
    %13:gr32 = MOV32r0 implicit-def dead $eflags
    %10:gr64 = SUBREG_TO_REG 0, killed %13, %subreg.sub_32bit
    JMP_1 %bb.3

  bb.2.for.cond.cleanup:
    %1:fr64x = PHI %9, %bb.4, %4, %bb.3
    $xmm0 = COPY %1
    RET 0, $xmm0

  bb.3.for.body:
    successors: %bb.2(0x04000000), %bb.3(0x7c000000)

    %2:gr64_nosp = PHI %10, %bb.1, %5, %bb.3
    %3:fr64x = PHI %11, %bb.1, %4, %bb.3
    %14:fr64x = VMOVSDZrm_alt %6, 8, %2, 0, $noreg :: (load (s64) from %ir.scevgep1, !tbaa !3)
    %15:fr64x = nnan ninf nsz arcp contract afn reassoc nofpexcept VFMADD213SDZr %14, %14, %3, implicit $mxcsr
    %16:fr64x = VMOVSDZrm_alt %7, 8, %2, 0, $noreg :: (load (s64) from %ir.scevgep, !tbaa !3)
    %4:fr64x = nnan ninf nsz arcp contract afn reassoc nofpexcept VFMADD213SDZr %16, %16, killed %15, implicit $mxcsr
    %5:gr64 = nuw nsw INC64r %2, implicit-def dead $eflags
    %17:gr64 = SUB64rr %0, %5, implicit-def $eflags
    JCC_1 %bb.2, 4, implicit $eflags
    JMP_1 %bb.3

...
# end INTEL_FEATURE_CPU_RYL
