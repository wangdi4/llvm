; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_avx_compress
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avxcompress -verify-machineinstrs --show-mc-encoding | FileCheck %s --check-prefixes=CHECK

declare <4 x i64> @llvm.fshl.v4i64(<4 x i64>, <4 x i64>, <4 x i64>)
declare <8 x i32> @llvm.fshl.v8i32(<8 x i32>, <8 x i32>, <8 x i32>)
declare <16 x i16> @llvm.fshl.v16i16(<16 x i16>, <16 x i16>, <16 x i16>)


define <4 x i64> @var_funnnel_v4i64(<4 x i64> %x, <4 x i64> %y, <4 x i64> %amt) nounwind {
; CHECK-LABEL: var_funnnel_v4i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpshldvq %ymm2, %ymm1, %ymm0 # encoding: [0xc4,0xe2,0xf5,0x71,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %res = call <4 x i64> @llvm.fshl.v4i64(<4 x i64> %x, <4 x i64> %y, <4 x i64> %amt)
  ret <4 x i64> %res
}

define <8 x i32> @var_funnnel_v8i32(<8 x i32> %x, <8 x i32> %y, <8 x i32> %amt) nounwind {
; CHECK-LABEL: var_funnnel_v8i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpshldvd %ymm2, %ymm1, %ymm0 # encoding: [0xc4,0xe2,0x75,0x71,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %res = call <8 x i32> @llvm.fshl.v8i32(<8 x i32> %x, <8 x i32> %y, <8 x i32> %amt)
  ret <8 x i32> %res
}

define <16 x i16> @var_funnnel_v16i16(<16 x i16> %x, <16 x i16> %y, <16 x i16> %amt) nounwind {
; CHECK-LABEL: var_funnnel_v16i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpshldvw %ymm2, %ymm1, %ymm0 # encoding: [0xc4,0xe2,0xf5,0x70,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %res = call <16 x i16> @llvm.fshl.v16i16(<16 x i16> %x, <16 x i16> %y, <16 x i16> %amt)
  ret <16 x i16> %res
}

define <4 x i64> @splatvar_funnnel_v4i64(<4 x i64> %x, <4 x i64> %y, <4 x i64> %amt) nounwind {
; CHECK-LABEL: splatvar_funnnel_v4i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpbroadcastq %xmm2, %ymm2 # encoding: [0xc4,0xe2,0x7d,0x59,0xd2]
; CHECK-NEXT:    vpshldvq %ymm2, %ymm1, %ymm0 # encoding: [0xc4,0xe2,0xf5,0x71,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %splat = shufflevector <4 x i64> %amt, <4 x i64> undef, <4 x i32> zeroinitializer
  %res = call <4 x i64> @llvm.fshl.v4i64(<4 x i64> %x, <4 x i64> %y, <4 x i64> %splat)
  ret <4 x i64> %res
}

define <8 x i32> @splatvar_funnnel_v8i32(<8 x i32> %x, <8 x i32> %y, <8 x i32> %amt) nounwind {
; CHECK-LABEL: splatvar_funnnel_v8i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpbroadcastd %xmm2, %ymm2 # encoding: [0xc4,0xe2,0x7d,0x58,0xd2]
; CHECK-NEXT:    vpshldvd %ymm2, %ymm1, %ymm0 # encoding: [0xc4,0xe2,0x75,0x71,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %splat = shufflevector <8 x i32> %amt, <8 x i32> undef, <8 x i32> zeroinitializer
  %res = call <8 x i32> @llvm.fshl.v8i32(<8 x i32> %x, <8 x i32> %y, <8 x i32> %splat)
  ret <8 x i32> %res
}

define <16 x i16> @splatvar_funnnel_v16i16(<16 x i16> %x, <16 x i16> %y, <16 x i16> %amt) nounwind {
; CHECK-LABEL: splatvar_funnnel_v16i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpbroadcastw %xmm2, %ymm2 # encoding: [0xc4,0xe2,0x7d,0x79,0xd2]
; CHECK-NEXT:    vpshldvw %ymm2, %ymm1, %ymm0 # encoding: [0xc4,0xe2,0xf5,0x70,0xc2]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %splat = shufflevector <16 x i16> %amt, <16 x i16> undef, <16 x i32> zeroinitializer
  %res = call <16 x i16> @llvm.fshl.v16i16(<16 x i16> %x, <16 x i16> %y, <16 x i16> %splat)
  ret <16 x i16> %res
}

define <4 x i64> @constant_funnnel_v4i64(<4 x i64> %x, <4 x i64> %y) nounwind {
; CHECK-LABEL: constant_funnnel_v4i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpshldvq {{.*}}(%rip), %ymm1, %ymm0 # encoding: [0xc4,0xe2,0xf5,0x71,0x05,A,A,A,A]
; CHECK-NEXT:    # fixup A - offset: 5, value: {{\.LCPI.*}}-4, kind: reloc_riprel_4byte
; CHECK-NEXT:    retq # encoding: [0xc3]
  %res = call <4 x i64> @llvm.fshl.v4i64(<4 x i64> %x, <4 x i64> %y, <4 x i64> <i64 4, i64 14, i64 50, i64 60>)
  ret <4 x i64> %res
}

define <8 x i32> @constant_funnnel_v8i32(<8 x i32> %x, <8 x i32> %y) nounwind {
; CHECK-LABEL: constant_funnnel_v8i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpshldvd {{.*}}(%rip), %ymm1, %ymm0 # encoding: [0xc4,0xe2,0x75,0x71,0x05,A,A,A,A]
; CHECK-NEXT:    # fixup A - offset: 5, value: {{\.LCPI.*}}-4, kind: reloc_riprel_4byte
; CHECK-NEXT:    retq # encoding: [0xc3]
  %res = call <8 x i32> @llvm.fshl.v8i32(<8 x i32> %x, <8 x i32> %y, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>)
  ret <8 x i32> %res
}

define <16 x i16> @constant_funnnel_v16i16(<16 x i16> %x, <16 x i16> %y) nounwind {
; CHECK-LABEL: constant_funnnel_v16i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpshldvw {{.*}}(%rip), %ymm1, %ymm0 # encoding: [0xc4,0xe2,0xf5,0x70,0x05,A,A,A,A]
; CHECK-NEXT:    # fixup A - offset: 5, value: {{\.LCPI.*}}-4, kind: reloc_riprel_4byte
; CHECK-NEXT:    retq # encoding: [0xc3]
  %res = call <16 x i16> @llvm.fshl.v16i16(<16 x i16> %x, <16 x i16> %y, <16 x i16> <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15>)
  ret <16 x i16> %res
}

define <4 x i64> @splatconstant_funnnel_v4i64(<4 x i64> %x, <4 x i64> %y) nounwind {
; CHECK-LABEL: splatconstant_funnnel_v4i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpshldq $14, %ymm1, %ymm0, %ymm0 # encoding: [0xc4,0xe3,0xfd,0x71,0xc1,0x0e]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %res = call <4 x i64> @llvm.fshl.v4i64(<4 x i64> %x, <4 x i64> %y, <4 x i64> <i64 14, i64 14, i64 14, i64 14>)
  ret <4 x i64> %res
}

define <8 x i32> @splatconstant_funnnel_v8i32(<8 x i32> %x, <8 x i32> %y) nounwind {
; CHECK-LABEL: splatconstant_funnnel_v8i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpshldd $4, %ymm1, %ymm0, %ymm0 # encoding: [0xc4,0xe3,0x7d,0x71,0xc1,0x04]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %res = call <8 x i32> @llvm.fshl.v8i32(<8 x i32> %x, <8 x i32> %y, <8 x i32> <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>)
  ret <8 x i32> %res
}

define <16 x i16> @splatconstant_funnnel_v16i16(<16 x i16> %x, <16 x i16> %y) nounwind {
; CHECK-LABEL: splatconstant_funnnel_v16i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpshldw $7, %ymm1, %ymm0, %ymm0 # encoding: [0xc4,0xe3,0xfd,0x70,0xc1,0x07]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %res = call <16 x i16> @llvm.fshl.v16i16(<16 x i16> %x, <16 x i16> %y, <16 x i16> <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>)
  ret <16 x i16> %res
}

