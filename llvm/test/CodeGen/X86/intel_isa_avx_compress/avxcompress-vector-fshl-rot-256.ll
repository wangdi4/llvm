; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_avx_compress
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avxcompress -verify-machineinstrs --show-mc-encoding | FileCheck %s --check-prefixes=CHECK

declare <4 x i64> @llvm.fshl.v4i64(<4 x i64>, <4 x i64>, <4 x i64>)
declare <8 x i32> @llvm.fshl.v8i32(<8 x i32>, <8 x i32>, <8 x i32>)

define <4 x i64> @var_funnnel_v4i64(<4 x i64> %x, <4 x i64> %amt) nounwind {
; CHECK-LABEL: var_funnnel_v4i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    {vex} vprolvq %ymm1, %ymm0, %ymm0 # encoding: [0xc4,0xe2,0xfd,0x15,0xc1]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %res = call <4 x i64> @llvm.fshl.v4i64(<4 x i64> %x, <4 x i64> %x, <4 x i64> %amt)
  ret <4 x i64> %res
}

define <8 x i32> @var_funnnel_v8i32(<8 x i32> %x, <8 x i32> %amt) nounwind {
; CHECK-LABEL: var_funnnel_v8i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    {vex} vprolvd %ymm1, %ymm0, %ymm0 # encoding: [0xc4,0xe2,0x7d,0x15,0xc1]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %res = call <8 x i32> @llvm.fshl.v8i32(<8 x i32> %x, <8 x i32> %x, <8 x i32> %amt)
  ret <8 x i32> %res
}

define <4 x i64> @splatvar_funnnel_v4i64(<4 x i64> %x, <4 x i64> %amt) nounwind {
; CHECK-LABEL: splatvar_funnnel_v4i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpbroadcastq %xmm1, %ymm1 # encoding: [0xc4,0xe2,0x7d,0x59,0xc9]
; CHECK-NEXT:    {vex} vprolvq %ymm1, %ymm0, %ymm0 # encoding: [0xc4,0xe2,0xfd,0x15,0xc1]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %splat = shufflevector <4 x i64> %amt, <4 x i64> undef, <4 x i32> zeroinitializer
  %res = call <4 x i64> @llvm.fshl.v4i64(<4 x i64> %x, <4 x i64> %x, <4 x i64> %splat)
  ret <4 x i64> %res
}

define <8 x i32> @splatvar_funnnel_v8i32(<8 x i32> %x, <8 x i32> %amt) nounwind {
; CHECK-LABEL: splatvar_funnnel_v8i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpbroadcastd %xmm1, %ymm1 # encoding: [0xc4,0xe2,0x7d,0x58,0xc9]
; CHECK-NEXT:    {vex} vprolvd %ymm1, %ymm0, %ymm0 # encoding: [0xc4,0xe2,0x7d,0x15,0xc1]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %splat = shufflevector <8 x i32> %amt, <8 x i32> undef, <8 x i32> zeroinitializer
  %res = call <8 x i32> @llvm.fshl.v8i32(<8 x i32> %x, <8 x i32> %x, <8 x i32> %splat)
  ret <8 x i32> %res
}

define <4 x i64> @constant_funnnel_v4i64(<4 x i64> %x) nounwind {
; CHECK-LABEL: constant_funnnel_v4i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    {vex} vprolvq {{.*}}(%rip), %ymm0, %ymm0 # encoding: [0xc4,0xe2,0xfd,0x15,0x05,A,A,A,A]
; CHECK-NEXT:    # fixup A - offset: 5, value: {{\.LCPI.*}}-4, kind: reloc_riprel_4byte
; CHECK-NEXT:    retq # encoding: [0xc3]
  %res = call <4 x i64> @llvm.fshl.v4i64(<4 x i64> %x, <4 x i64> %x, <4 x i64> <i64 4, i64 14, i64 50, i64 60>)
  ret <4 x i64> %res
}

define <8 x i32> @constant_funnnel_v8i32(<8 x i32> %x) nounwind {
; CHECK-LABEL: constant_funnnel_v8i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    {vex} vprolvd {{.*}}(%rip), %ymm0, %ymm0 # encoding: [0xc4,0xe2,0x7d,0x15,0x05,A,A,A,A]
; CHECK-NEXT:    # fixup A - offset: 5, value: {{\.LCPI.*}}-4, kind: reloc_riprel_4byte
; CHECK-NEXT:    retq # encoding: [0xc3]
  %res = call <8 x i32> @llvm.fshl.v8i32(<8 x i32> %x, <8 x i32> %x, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>)
  ret <8 x i32> %res
}

define <4 x i64> @splatconstant_funnnel_v4i64(<4 x i64> %x) nounwind {
; CHECK-LABEL: splatconstant_funnnel_v4i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    {vex} vprolq $14, %ymm0, %ymm0 # encoding: [0xc4,0xe1,0xfd,0x72,0xc8,0x0e]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %res = call <4 x i64> @llvm.fshl.v4i64(<4 x i64> %x, <4 x i64> %x, <4 x i64> <i64 14, i64 14, i64 14, i64 14>)
  ret <4 x i64> %res
}

define <8 x i32> @splatconstant_funnnel_v8i32(<8 x i32> %x) nounwind {
; CHECK-LABEL: splatconstant_funnnel_v8i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    {vex} vprold $4, %ymm0, %ymm0 # encoding: [0xc5,0xfd,0x72,0xc8,0x04]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %res = call <8 x i32> @llvm.fshl.v8i32(<8 x i32> %x, <8 x i32> %x, <8 x i32> <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>)
  ret <8 x i32> %res
}
