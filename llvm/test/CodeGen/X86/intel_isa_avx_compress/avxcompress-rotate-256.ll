; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_avx_compress
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avxcompress -verify-machineinstrs --show-mc-encoding | FileCheck %s --check-prefixes=CHECK

define <4 x i64> @var_rotate_v4i64(<4 x i64> %a, <4 x i64> %b) nounwind {
; CHECK-LABEL: var_rotate_v4i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vprolvq %ymm1, %ymm0, %ymm0 # encoding: [0xc4,0xe2,0xfd,0x15,0xc1]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %b64 = sub <4 x i64> <i64 64, i64 64, i64 64, i64 64>, %b
  %shl = shl <4 x i64> %a, %b
  %lshr = lshr <4 x i64> %a, %b64
  %or = or <4 x i64> %shl, %lshr
  ret <4 x i64> %or
}

define <8 x i32> @var_rotate_v8i32(<8 x i32> %a, <8 x i32> %b) nounwind {
; CHECK-LABEL: var_rotate_v8i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vprolvd %ymm1, %ymm0, %ymm0 # encoding: [0xc4,0xe2,0x7d,0x15,0xc1]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %b32 = sub <8 x i32> <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>, %b
  %shl = shl <8 x i32> %a, %b
  %lshr = lshr <8 x i32> %a, %b32
  %or = or <8 x i32> %shl, %lshr
  ret <8 x i32> %or
}

define <4 x i64> @splatvar_rotate_v4i64(<4 x i64> %a, <4 x i64> %b) nounwind {
; CHECK-LABEL: splatvar_rotate_v4i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpbroadcastq %xmm1, %ymm1 # encoding: [0xc4,0xe2,0x7d,0x59,0xc9]
; CHECK-NEXT:    vprolvq %ymm1, %ymm0, %ymm0 # encoding: [0xc4,0xe2,0xfd,0x15,0xc1]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %splat = shufflevector <4 x i64> %b, <4 x i64> undef, <4 x i32> zeroinitializer
  %splat64 = sub <4 x i64> <i64 64, i64 64, i64 64, i64 64>, %splat
  %shl = shl <4 x i64> %a, %splat
  %lshr = lshr <4 x i64> %a, %splat64
  %or = or <4 x i64> %shl, %lshr
  ret <4 x i64> %or
}

define <8 x i32> @splatvar_rotate_v8i32(<8 x i32> %a, <8 x i32> %b) nounwind {
; CHECK-LABEL: splatvar_rotate_v8i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpbroadcastd %xmm1, %ymm1 # encoding: [0xc4,0xe2,0x7d,0x58,0xc9]
; CHECK-NEXT:    vprolvd %ymm1, %ymm0, %ymm0 # encoding: [0xc4,0xe2,0x7d,0x15,0xc1]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %splat = shufflevector <8 x i32> %b, <8 x i32> undef, <8 x i32> zeroinitializer
  %splat32 = sub <8 x i32> <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>, %splat
  %shl = shl <8 x i32> %a, %splat
  %lshr = lshr <8 x i32> %a, %splat32
  %or = or <8 x i32> %shl, %lshr
  ret <8 x i32> %or
}

define <4 x i64> @constant_rotate_v4i64(<4 x i64> %a) nounwind {
; CHECK-LABEL: constant_rotate_v4i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vprolvq {{.*}}(%rip), %ymm0, %ymm0 # encoding: [0xc4,0xe2,0xfd,0x15,0x05,A,A,A,A]
; CHECK-NEXT:    # fixup A - offset: 5, value: {{\.LCPI.*}}-4, kind: reloc_riprel_4byte
; CHECK-NEXT:    retq # encoding: [0xc3]
  %shl = shl <4 x i64> %a, <i64 4, i64 14, i64 50, i64 60>
  %lshr = lshr <4 x i64> %a, <i64 60, i64 50, i64 14, i64 4>
  %or = or <4 x i64> %shl, %lshr
  ret <4 x i64> %or
}

define <8 x i32> @constant_rotate_v8i32(<8 x i32> %a) nounwind {
; CHECK-LABEL: constant_rotate_v8i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vprolvd {{.*}}(%rip), %ymm0, %ymm0 # encoding: [0xc4,0xe2,0x7d,0x15,0x05,A,A,A,A]
; CHECK-NEXT:    # fixup A - offset: 5, value: {{\.LCPI.*}}-4, kind: reloc_riprel_4byte
; CHECK-NEXT:    retq # encoding: [0xc3]
  %shl = shl <8 x i32> %a, <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  %lshr = lshr <8 x i32> %a, <i32 28, i32 27, i32 26, i32 25, i32 24, i32 23, i32 22, i32 21>
  %or = or <8 x i32> %shl, %lshr
  ret <8 x i32> %or
}

define <4 x i64> @splatconstant_rotate_v4i64(<4 x i64> %a) nounwind {
; CHECK-LABEL: splatconstant_rotate_v4i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vprolq $14, %ymm0, %ymm0 # encoding: [0xc4,0xe1,0xfd,0x72,0xc8,0x0e]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %shl = shl <4 x i64> %a, <i64 14, i64 14, i64 14, i64 14>
  %lshr = lshr <4 x i64> %a, <i64 50, i64 50, i64 50, i64 50>
  %or = or <4 x i64> %shl, %lshr
  ret <4 x i64> %or
}

define <8 x i32> @splatconstant_rotate_v8i32(<8 x i32> %a) nounwind {
; CHECK-LABEL: splatconstant_rotate_v8i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vprold $4, %ymm0, %ymm0 # encoding: [0xc5,0xfd,0x72,0xc8,0x04]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %shl = shl <8 x i32> %a, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %lshr = lshr <8 x i32> %a, <i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28, i32 28>
  %or = or <8 x i32> %shl, %lshr
  ret <8 x i32> %or
}
