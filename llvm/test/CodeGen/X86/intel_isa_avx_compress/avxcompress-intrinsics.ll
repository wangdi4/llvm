; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_avx_compress
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avxcompress -verify-machineinstrs --show-mc-encoding | FileCheck %s --check-prefixes=CHECK

declare <16 x i8> @llvm.x86.avx2.vpcompressb.128(<16 x i8>, <16 x i8>)

define <16 x i8>@test_int_x86_avx2_vpcompressb_128(<16 x i8> %x0, <16 x i8> %x1) {
; CHECK-LABEL: test_int_x86_avx2_vpcompressb_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpcompressb %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe2,0x71,0x63,0xc0]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %1 =  call <16 x i8> @llvm.x86.avx2.vpcompressb.128(<16 x i8> %x0, <16 x i8> %x1)
  ret <16 x i8> %1
}

declare <32 x i8> @llvm.x86.avx2.vpcompressb.256(<32 x i8>, <32 x i8>)

define <32 x i8>@test_int_x86_avx2_vpcompressb_256(<32 x i8> %x0, <32 x i8> %x1) {
; CHECK-LABEL: test_int_x86_avx2_vpcompressb_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpcompressb %ymm1, %ymm0, %ymm0 # encoding: [0xc4,0xe2,0x75,0x63,0xc0]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %1 =  call <32 x i8> @llvm.x86.avx2.vpcompressb.256(<32 x i8> %x0, <32 x i8> %x1)
  ret <32 x i8> %1
}

declare <8 x i16> @llvm.x86.avx2.vpcompressw.128(<8 x i16>, <8 x i16>)

define <8 x i16>@test_int_x86_avx2_vpcompressw_128(<8 x i16> %x0, <8 x i16> %x1) {
; CHECK-LABEL: test_int_x86_avx2_vpcompressw_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpcompressw %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe2,0xf1,0x63,0xc0]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %1 =  call <8 x i16> @llvm.x86.avx2.vpcompressw.128(<8 x i16> %x0, <8 x i16> %x1)
  ret <8 x i16> %1
}

declare <16 x i16> @llvm.x86.avx2.vpcompressw.256(<16 x i16>, <16 x i16>)

define <16 x i16>@test_int_x86_avx2_vpcompressw_256(<16 x i16> %x0, <16 x i16> %x1) {
; CHECK-LABEL: test_int_x86_avx2_vpcompressw_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpcompressw %ymm1, %ymm0, %ymm0 # encoding: [0xc4,0xe2,0xf5,0x63,0xc0]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %1 =  call <16 x i16> @llvm.x86.avx2.vpcompressw.256(<16 x i16> %x0, <16 x i16> %x1)
  ret <16 x i16> %1
}

declare <4 x i32> @llvm.x86.avx2.vpcompressd.128(<4 x i32>, <4 x i32>)

define <4 x i32>@test_int_x86_avx2_vpcompressd_128(<4 x i32> %x0, <4 x i32> %x1) {
; CHECK-LABEL: test_int_x86_avx2_vpcompressd_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpcompressd %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe2,0x71,0x8b,0xc0]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %1 =  call <4 x i32> @llvm.x86.avx2.vpcompressd.128(<4 x i32> %x0, <4 x i32> %x1)
  ret <4 x i32> %1
}

declare <8 x i32> @llvm.x86.avx2.vpcompressd.256(<8 x i32>, <8 x i32>)

define <8 x i32>@test_int_x86_avx2_vpcompressd_256(<8 x i32> %x0, <8 x i32> %x1) {
; CHECK-LABEL: test_int_x86_avx2_vpcompressd_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpcompressd %ymm1, %ymm0, %ymm0 # encoding: [0xc4,0xe2,0x75,0x8b,0xc0]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %1 =  call <8 x i32> @llvm.x86.avx2.vpcompressd.256(<8 x i32> %x0, <8 x i32> %x1)
  ret <8 x i32> %1
}

declare <2 x i64> @llvm.x86.avx2.vpcompressq.128(<2 x i64>, <2 x i64>)

define <2 x i64>@test_int_x86_avx2_vpcompressq_128(<2 x i64> %x0, <2 x i64> %x1, <2 x i64> %x2) {
; CHECK-LABEL: test_int_x86_avx2_vpcompressq_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpcompressq %xmm1, %xmm0, %xmm0 # encoding: [0xc4,0xe2,0xf1,0x8b,0xc0]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %1 =  call <2 x i64> @llvm.x86.avx2.vpcompressq.128(<2 x i64> %x0, <2 x i64> %x1)
  ret <2 x i64> %1
}

declare <4 x i64> @llvm.x86.avx2.vpcompressq.256(<4 x i64>, <4 x i64>)

define <4 x i64>@test_int_x86_avx2_vpcompressq_256(<4 x i64> %x0, <4 x i64> %x1) {
; CHECK-LABEL: test_int_x86_avx2_vpcompressq_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpcompressq %ymm1, %ymm0, %ymm0 # encoding: [0xc4,0xe2,0xf5,0x8b,0xc0]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %1 =  call <4 x i64> @llvm.x86.avx2.vpcompressq.256(<4 x i64> %x0, <4 x i64> %x1)
  ret <4 x i64> %1
}

declare void @llvm.x86.avx2.vpcompressb.store.128(i8*, <16 x i8>, <16 x i8>)

define void @test_x86_avx2_vpcompressb_store_128(i8* %a0, <16 x i8> %a1, <16 x i8> %a2) {
; CHECK-LABEL: test_x86_avx2_vpcompressb_store_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpcompressb %xmm1, %xmm0, (%rdi) # encoding: [0xc4,0xe2,0x71,0x63,0x07]
; CHECK-NEXT:    retq # encoding: [0xc3]
  call void @llvm.x86.avx2.vpcompressb.store.128(i8* %a0,  <16 x i8> %a1, <16 x i8> %a2)
  ret void
}

declare void @llvm.x86.avx2.vpcompressb.store.256(i8*, <32 x i8>, <32 x i8>)

define void @test_x86_avx2_vpcompressb_store_256(i8* %a0, <32 x i8> %a1, <32 x i8> %a2) {
; CHECK-LABEL: test_x86_avx2_vpcompressb_store_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpcompressb %ymm1, %ymm0, (%rdi) # encoding: [0xc4,0xe2,0x75,0x63,0x07]
; CHECK-NEXT:    vzeroupper # encoding: [0xc5,0xf8,0x77]
; CHECK-NEXT:    retq # encoding: [0xc3]
  call void @llvm.x86.avx2.vpcompressb.store.256(i8* %a0,  <32 x i8> %a1, <32 x i8> %a2)
  ret void
}

declare void @llvm.x86.avx2.vpcompressw.store.128(i8*, <8 x i16>, <8 x i16>)

define void @test_x86_avx2_vpcompressw_store_128(i8* %a0, <8 x i16> %a1, <8 x i16> %a2) {
; CHECK-LABEL: test_x86_avx2_vpcompressw_store_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpcompressw %xmm1, %xmm0, (%rdi) # encoding: [0xc4,0xe2,0xf1,0x63,0x07]
; CHECK-NEXT:    retq # encoding: [0xc3]
  call void @llvm.x86.avx2.vpcompressw.store.128(i8* %a0,  <8 x i16> %a1, <8 x i16> %a2)
  ret void
}

declare void @llvm.x86.avx2.vpcompressw.store.256(i8*, <16 x i16>, <16 x i16>)

define void @test_x86_avx2_vpcompressw_store_256(i8* %a0, <16 x i16> %a1, <16 x i16> %a2) {
; CHECK-LABEL: test_x86_avx2_vpcompressw_store_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpcompressw %ymm1, %ymm0, (%rdi) # encoding: [0xc4,0xe2,0xf5,0x63,0x07]
; CHECK-NEXT:    vzeroupper # encoding: [0xc5,0xf8,0x77]
; CHECK-NEXT:    retq # encoding: [0xc3]
  call void @llvm.x86.avx2.vpcompressw.store.256(i8* %a0,  <16 x i16> %a1, <16 x i16> %a2)
  ret void
}

declare void @llvm.x86.avx2.vpcompressd.store.128(i8*, <4 x i32>, <4 x i32>)

define void @test_x86_avx2_vpcompressd_store_128(i8* %a0, <4 x i32> %a1, <4 x i32> %a2) {
; CHECK-LABEL: test_x86_avx2_vpcompressd_store_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpcompressd %xmm1, %xmm0, (%rdi) # encoding: [0xc4,0xe2,0x71,0x8b,0x07]
; CHECK-NEXT:    retq # encoding: [0xc3]
  call void @llvm.x86.avx2.vpcompressd.store.128(i8* %a0,  <4 x i32> %a1, <4 x i32> %a2)
  ret void
}

declare void @llvm.x86.avx2.vpcompressd.store.256(i8*, <8 x i32>, <8 x i32>)

define void @test_x86_avx2_vpcompressd_store_256(i8* %a0, <8 x i32> %a1, <8 x i32> %a2) {
; CHECK-LABEL: test_x86_avx2_vpcompressd_store_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpcompressd %ymm1, %ymm0, (%rdi) # encoding: [0xc4,0xe2,0x75,0x8b,0x07]
; CHECK-NEXT:    vzeroupper # encoding: [0xc5,0xf8,0x77]
; CHECK-NEXT:    retq # encoding: [0xc3]
  call void @llvm.x86.avx2.vpcompressd.store.256(i8* %a0,  <8 x i32> %a1, <8 x i32> %a2)
  ret void
}

declare void @llvm.x86.avx2.vpcompressq.store.128(i8*, <2 x i64>, <2 x i64>)

define void @test_x86_avx2_vpcompressq_store_128(i8* %a0, <2 x i64> %a1, <2 x i64> %a2) {
; CHECK-LABEL: test_x86_avx2_vpcompressq_store_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpcompressq %xmm1, %xmm0, (%rdi) # encoding: [0xc4,0xe2,0xf1,0x8b,0x07]
; CHECK-NEXT:    retq # encoding: [0xc3]
  call void @llvm.x86.avx2.vpcompressq.store.128(i8* %a0,  <2 x i64> %a1, <2 x i64> %a2)
  ret void
}

declare void @llvm.x86.avx2.vpcompressq.store.256(i8*, <4 x i64>, <4 x i64>)

define void @test_x86_avx2_vpcompressq_store_256(i8* %a0, <4 x i64> %a1, <4 x i64> %a2) {
; CHECK-LABEL: test_x86_avx2_vpcompressq_store_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpcompressq %ymm1, %ymm0, (%rdi) # encoding: [0xc4,0xe2,0xf5,0x8b,0x07]
; CHECK-NEXT:    vzeroupper # encoding: [0xc5,0xf8,0x77]
; CHECK-NEXT:    retq # encoding: [0xc3]
  call void @llvm.x86.avx2.vpcompressq.store.256(i8* %a0,  <4 x i64> %a1, <4 x i64> %a2)
  ret void
}
