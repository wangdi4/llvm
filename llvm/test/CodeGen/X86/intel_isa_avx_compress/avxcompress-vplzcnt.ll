; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_avx_compress
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avxcompress -verify-machineinstrs --show-mc-encoding | FileCheck %s --check-prefixes=CHECK

define <4 x i32> @testv4i32(<4 x i32> %in) nounwind  {
; CHECK-LABEL: testv4i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vplzcntd %xmm0, %xmm0 # encoding: [0xc4,0xe2,0x79,0x44,0xc0]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %out = call <4 x i32> @llvm.ctlz.v4i32(<4 x i32> %in, i1 0)
  ret <4 x i32> %out
}

define <4 x i32> @testv4i32u(<4 x i32> %in) nounwind {
; CHECK-LABEL: testv4i32u:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vplzcntd %xmm0, %xmm0 # encoding: [0xc4,0xe2,0x79,0x44,0xc0]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %out = call <4 x i32> @llvm.ctlz.v4i32(<4 x i32> %in, i1 -1)
  ret <4 x i32> %out
}

define <2 x i64> @testv2i64(<2 x i64> %in) nounwind {
; CHECK-LABEL: testv2i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vplzcntq %xmm0, %xmm0 # encoding: [0xc4,0xe2,0xf9,0x44,0xc0]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %out = call <2 x i64> @llvm.ctlz.v2i64(<2 x i64> %in, i1 0)
  ret <2 x i64> %out
}

define <2 x i64> @testv2i64u(<2 x i64> %in) nounwind {
; CHECK-LABEL: testv2i64u:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vplzcntq %xmm0, %xmm0 # encoding: [0xc4,0xe2,0xf9,0x44,0xc0]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %out = call <2 x i64> @llvm.ctlz.v2i64(<2 x i64> %in, i1 -1)
  ret <2 x i64> %out
}

define <8 x i32> @testv8i32(<8 x i32> %in) nounwind  {
; CHECK-LABEL: testv8i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vplzcntd %ymm0, %ymm0 # encoding: [0xc4,0xe2,0x7d,0x44,0xc0]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %out = call <8 x i32> @llvm.ctlz.v8i32(<8 x i32> %in, i1 0)
  ret <8 x i32> %out
}

define <8 x i32> @testv8i32u(<8 x i32> %in) nounwind {
; CHECK-LABEL: testv8i32u:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vplzcntd %ymm0, %ymm0 # encoding: [0xc4,0xe2,0x7d,0x44,0xc0]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %out = call <8 x i32> @llvm.ctlz.v8i32(<8 x i32> %in, i1 -1)
  ret <8 x i32> %out
}


define <4 x i64> @testv4i64(<4 x i64> %in) nounwind {
; CHECK-LABEL: testv4i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vplzcntq %ymm0, %ymm0 # encoding: [0xc4,0xe2,0xfd,0x44,0xc0]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %out = call <4 x i64> @llvm.ctlz.v4i64(<4 x i64> %in, i1 0)
  ret <4 x i64> %out
}

define <4 x i64> @testv4i64u(<4 x i64> %in) nounwind {
; CHECK-LABEL: testv4i64u:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vplzcntq %ymm0, %ymm0 # encoding: [0xc4,0xe2,0xfd,0x44,0xc0]
; CHECK-NEXT:    retq # encoding: [0xc3]
  %out = call <4 x i64> @llvm.ctlz.v4i64(<4 x i64> %in, i1 -1)
  ret <4 x i64> %out
}

declare <2 x i64> @llvm.ctlz.v2i64(<2 x i64>, i1)
declare <4 x i32> @llvm.ctlz.v4i32(<4 x i32>, i1)
declare <4 x i64> @llvm.ctlz.v4i64(<4 x i64>, i1)
declare <8 x i32> @llvm.ctlz.v8i32(<8 x i32>, i1)

