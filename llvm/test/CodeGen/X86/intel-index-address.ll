; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-linux | FileCheck %s -check-prefix=ENABLED
; RUN: llc < %s -mtriple=x86_64-linux -x86-disable-index-addressing | FileCheck %s -check-prefix=DISABLED
; RUN: llc < %s -mtriple=x86_64-linux -x86-fixup-mem | FileCheck %s -check-prefix=FIXUP

%struct.anon1 = type { i32, i32, i32 }
%struct.anon2 = type { i32, [32 x i32], i32 }

@arr1 = external dso_local global [65 x %struct.anon1], align 16
@arr2 = external dso_local global [65 x %struct.anon2], align 16

define void @test1(i64 %x) nounwind {
; ENABLED-LABEL: test1:
; ENABLED:       # %bb.0: # %entry
; ENABLED-NEXT:    shlq $2, %rdi
; ENABLED-NEXT:    movl arr1(%rdi,%rdi,2), %ecx
; ENABLED-NEXT:    leaq arr1+4(%rdi,%rdi,2), %rax
; ENABLED-NEXT:    subl arr1+4(%rdi,%rdi,2), %ecx
; ENABLED-NEXT:    addl arr1+8(%rdi,%rdi,2), %ecx
; ENABLED-NEXT:    cmpl $2, %ecx
; ENABLED-NEXT:    je .LBB0_3
; ENABLED-NEXT:  # %bb.1: # %entry
; ENABLED-NEXT:    cmpl $1, %ecx
; ENABLED-NEXT:    jne .LBB0_4
; ENABLED-NEXT:  # %bb.2: # %sw.bb.1
; ENABLED-NEXT:    movl $111, (%rax)
; ENABLED-NEXT:    movl $222, 4(%rax)
; ENABLED-NEXT:    retq
; ENABLED-NEXT:  .LBB0_3: # %sw.bb.2
; ENABLED-NEXT:    movl $333, (%rax) # imm = 0x14D
; ENABLED-NEXT:    movl $444, 4(%rax) # imm = 0x1BC
; ENABLED-NEXT:  .LBB0_4: # %sw.epilog
; ENABLED-NEXT:    retq
;
; DISABLED-LABEL: test1:
; DISABLED:       # %bb.0: # %entry
; DISABLED-NEXT:    shlq $2, %rdi
; DISABLED-NEXT:    leaq (%rdi,%rdi,2), %rdx
; DISABLED-NEXT:    movl arr1(%rdx), %ecx
; DISABLED-NEXT:    leaq arr1+4(%rdi,%rdi,2), %rax
; DISABLED-NEXT:    subl arr1+4(%rdx), %ecx
; DISABLED-NEXT:    addl arr1+8(%rdx), %ecx
; DISABLED-NEXT:    cmpl $2, %ecx
; DISABLED-NEXT:    je .LBB0_3
; DISABLED-NEXT:  # %bb.1: # %entry
; DISABLED-NEXT:    cmpl $1, %ecx
; DISABLED-NEXT:    jne .LBB0_4
; DISABLED-NEXT:  # %bb.2: # %sw.bb.1
; DISABLED-NEXT:    movl $111, (%rax)
; DISABLED-NEXT:    movl $222, 4(%rax)
; DISABLED-NEXT:    retq
; DISABLED-NEXT:  .LBB0_3: # %sw.bb.2
; DISABLED-NEXT:    movl $333, (%rax) # imm = 0x14D
; DISABLED-NEXT:    movl $444, 4(%rax) # imm = 0x1BC
; DISABLED-NEXT:  .LBB0_4: # %sw.epilog
; DISABLED-NEXT:    retq
;
; FIXUP-LABEL: test1:
; FIXUP:       # %bb.0: # %entry
; FIXUP-NEXT:    shlq $2, %rdi
; FIXUP-NEXT:    leaq arr1(%rdi,%rdi,2), %r10
; FIXUP-NEXT:    movl (%r10), %ecx
; FIXUP-NEXT:    leaq arr1+4(%rdi,%rdi,2), %rax
; FIXUP-NEXT:    leaq arr1+4(%rdi,%rdi,2), %r10
; FIXUP-NEXT:    subl (%r10), %ecx
; FIXUP-NEXT:    leaq arr1+8(%rdi,%rdi,2), %r10
; FIXUP-NEXT:    addl (%r10), %ecx
; FIXUP-NEXT:    cmpl $2, %ecx
; FIXUP-NEXT:    je .LBB0_3
; FIXUP-NEXT:  # %bb.1: # %entry
; FIXUP-NEXT:    cmpl $1, %ecx
; FIXUP-NEXT:    jne .LBB0_4
; FIXUP-NEXT:  # %bb.2: # %sw.bb.1
; FIXUP-NEXT:    nop
; FIXUP-NEXT:    movl $111, (%rax)
; FIXUP-NEXT:    nop
; FIXUP-NEXT:    movl $222, 4(%rax)
; FIXUP-NEXT:    retq
; FIXUP-NEXT:  .LBB0_3: # %sw.bb.2
; FIXUP-NEXT:    nop
; FIXUP-NEXT:    movl $333, (%rax) # imm = 0x14D
; FIXUP-NEXT:    nop
; FIXUP-NEXT:    movl $444, 4(%rax) # imm = 0x1BC
; FIXUP-NEXT:  .LBB0_4: # %sw.epilog
; FIXUP-NEXT:    retq
entry:
  %a = getelementptr inbounds [65 x %struct.anon1], ptr @arr1, i64 0, i64 %x, i32 0
  %tmp = load i32, ptr %a, align 4
  %b = getelementptr inbounds [65 x %struct.anon1], ptr @arr1, i64 0, i64 %x, i32 1
  %tmp1 = load i32, ptr %b, align 4
  %sub = sub i32 %tmp, %tmp1
  %c = getelementptr inbounds [65 x %struct.anon1], ptr @arr1, i64 0, i64 %x, i32 2
  %tmp2 = load i32, ptr %c, align 4
  %add = add nsw i32 %sub, %tmp2
  switch i32 %add, label %sw.epilog [
    i32 1, label %sw.bb.1
    i32 2, label %sw.bb.2
  ]

sw.bb.1:                                          ; preds = %entry
  store i32 111, ptr %b, align 4
  store i32 222, ptr %c, align 4
  br label %sw.epilog

sw.bb.2:                                          ; preds = %entry
  store i32 333, ptr %b, align 4
  store i32 444, ptr %c, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb.2, %sw.bb.1, %entry
  ret void
}
