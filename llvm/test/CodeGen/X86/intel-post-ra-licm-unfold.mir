# RUN: llc -mtriple=x86_64-pc-linux -start-after=early-machinelicm -o - %s | FileCheck %s
--- |
  ; ModuleID = 'avx512-broadcast-unfold.ll'
  source_filename = "avx512-broadcast-unfold.ll"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-pc-linux"

  define void @bcast_unfold_add_v16i32(i32* %arg) #0 {
  bb:
    br label %bb2

  bb2:                                              ; preds = %bb2, %bb
    %lsr.iv = phi i64 [ %lsr.iv.next, %bb2 ], [ -4096, %bb ]
    %0 = bitcast i32* %arg to i8*
    %uglygep3 = getelementptr i8, i8* %0, i64 %lsr.iv
    %uglygep34 = bitcast i8* %uglygep3 to <16 x i32>*
    %scevgep5 = getelementptr <16 x i32>, <16 x i32>* %uglygep34, i64 64
    %tmp5 = load <16 x i32>, <16 x i32>* %scevgep5, align 4
    %tmp6 = add nsw <16 x i32> %tmp5, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
    %uglygep = getelementptr i8, i8* %0, i64 %lsr.iv
    %uglygep2 = bitcast i8* %uglygep to <16 x i32>*
    %scevgep = getelementptr <16 x i32>, <16 x i32>* %uglygep2, i64 64
    store <16 x i32> %tmp6, <16 x i32>* %scevgep, align 4
    %lsr.iv.next = add nsw i64 %lsr.iv, 64
    %tmp9 = icmp eq i64 %lsr.iv.next, 0
    br i1 %tmp9, label %bb10, label %bb2

  bb10:                                             ; preds = %bb2
    ret void
  }

  ; Function Attrs: nounwind readnone speculatable willreturn
  declare <16 x float> @llvm.fabs.v16f32(<16 x float>) #1

  define void @bcast_unfold_fabs_v16f32(float* %arg) #0 {
  bb:
    br label %bb1

  bb1:                                              ; preds = %bb1, %bb
    %lsr.iv = phi i64 [ %lsr.iv.next, %bb1 ], [ -4096, %bb ]
    %0 = bitcast float* %arg to i8*
    %uglygep3 = getelementptr i8, i8* %0, i64 %lsr.iv
    %uglygep34 = bitcast i8* %uglygep3 to <16 x float>*
    %scevgep5 = getelementptr <16 x float>, <16 x float>* %uglygep34, i64 64
    %tmp4 = load <16 x float>, <16 x float>* %scevgep5, align 4
    %tmp5 = call <16 x float> @llvm.fabs.v16f32(<16 x float> %tmp4)
    %uglygep = getelementptr i8, i8* %0, i64 %lsr.iv
    %uglygep2 = bitcast i8* %uglygep to <16 x float>*
    %scevgep = getelementptr <16 x float>, <16 x float>* %uglygep2, i64 64
    store <16 x float> %tmp5, <16 x float>* %scevgep, align 4
    %lsr.iv.next = add nsw i64 %lsr.iv, 64
    %tmp8 = icmp eq i64 %lsr.iv.next, 0
    br i1 %tmp8, label %bb9, label %bb1

  bb9:                                              ; preds = %bb1
    ret void
  }

  ; Function Attrs: nounwind
  declare void @llvm.stackprotector(i8*, i8**) #2

  attributes #0 = { "target-features"="+avx512vl" }
  attributes #1 = { nounwind readnone speculatable willreturn "target-features"="+avx512vl" }
  attributes #2 = { nounwind }

...
---
name:            bcast_unfold_add_v16i32
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:
  - { id: 0, class: gr64_nosp, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: vr512, preferred-register: '' }
  - { id: 5, class: vr512, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
constants:
  - id:              0
    value:           i32 2
    alignment:       4
    isTargetSpecific: false
machineFunctionInfo: {}
body:             |
  ; CHECK: vpbroadcastd	.LCPI0_0(%rip), %zmm1 # zmm1 = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
  bb.0.bb:
    successors: %bb.1(0x80000000)
    liveins: $rdi

    %2:gr64 = COPY $rdi
    %3:gr64 = MOV64ri32 -4096

  bb.1.bb2:
    successors: %bb.2(0x04000000), %bb.1(0x7c000000)

    %0:gr64_nosp = PHI %3, %bb.0, %1, %bb.1
    %4:vr512 = VMOVDQU64Zrm %2, 1, %0, 4096, $noreg :: (load 64 from %ir.scevgep5, align 4)
    %5:vr512 = nsw VPADDDZrmb killed %4, $rip, 1, $noreg, %const.0, $noreg :: (load 4 from constant-pool)
    VMOVDQU64Zmr %2, 1, %0, 4096, $noreg, killed %5 :: (store 64 into %ir.scevgep, align 4)
    %1:gr64 = ADD64ri8 %0, 64, implicit-def $eflags
    JCC_1 %bb.1, 5, implicit $eflags
    JMP_1 %bb.2

  bb.2.bb10:
    RET 0

...
---
name:            bcast_unfold_fabs_v16f32
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:
  - { id: 0, class: gr64_nosp, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: vr512, preferred-register: '' }
  - { id: 5, class: vr512, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
constants:
  - id:              0
    value:           float 0x7FFFFFFFE0000000
    alignment:       4
    isTargetSpecific: false
machineFunctionInfo: {}
body:             |
  ; CHECK: vpbroadcastd	.LCPI1_0(%rip), %zmm1 # zmm1 = [NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN]
  bb.0.bb:
    successors: %bb.1(0x80000000)
    liveins: $rdi

    %2:gr64 = COPY $rdi
    %3:gr64 = MOV64ri32 -4096

  bb.1.bb1:
    successors: %bb.2(0x04000000), %bb.1(0x7c000000)

    %0:gr64_nosp = PHI %3, %bb.0, %1, %bb.1
    %4:vr512 = VMOVDQU64Zrm %2, 1, %0, 4096, $noreg :: (load 64 from %ir.scevgep5, align 4)
    %5:vr512 = VPANDDZrmb killed %4, $rip, 1, $noreg, %const.0, $noreg :: (load 4 from constant-pool)
    VMOVDQU64Zmr %2, 1, %0, 4096, $noreg, killed %5 :: (store 64 into %ir.scevgep, align 4)
    %1:gr64 = ADD64ri8 %0, 64, implicit-def $eflags
    JCC_1 %bb.1, 5, implicit $eflags
    JMP_1 %bb.2

  bb.2.bb9:
    RET 0

...
