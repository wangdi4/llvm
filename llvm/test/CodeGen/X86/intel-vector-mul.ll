; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -enable-intel-advanced-opts -mtriple=x86_64-unknown-unknown -mattr=+avx2 | FileCheck %s --check-prefix=X64-AVX
; RUN: llc < %s -enable-intel-advanced-opts -mtriple=x86_64-unknown-unknown -mattr=+avx512dq,+avx512vl | FileCheck %s --check-prefix=X64-AVX

define <2 x i64> @mul_v2i64_3(<2 x i64> %a0) nounwind {
; X64-AVX-LABEL: mul_v2i64_3:
; X64-AVX:       # %bb.0:
; X64-AVX-NEXT:    vpaddq %xmm0, %xmm0, %xmm1
; X64-AVX-NEXT:    vpaddq %xmm1, %xmm0, %xmm0
; X64-AVX-NEXT:    retq
  %1 = mul <2 x i64> %a0, <i64 3, i64 3>
  ret <2 x i64> %1
}

define <2 x i64> @mul_v2i64_7(<2 x i64> %a0) nounwind {
; X64-AVX-LABEL: mul_v2i64_7:
; X64-AVX:       # %bb.0:
; X64-AVX-NEXT:    vpsllq $3, %xmm0, %xmm1
; X64-AVX-NEXT:    vpsubq %xmm0, %xmm1, %xmm0
; X64-AVX-NEXT:    retq
  %1 = mul <2 x i64> %a0, <i64 7, i64 7>
  ret <2 x i64> %1
}

define <2 x i64> @mul_v2i64_9(<2 x i64> %a0) nounwind {
; X64-AVX-LABEL: mul_v2i64_9:
; X64-AVX:       # %bb.0:
; X64-AVX-NEXT:    vpsllq $3, %xmm0, %xmm1
; X64-AVX-NEXT:    vpaddq %xmm0, %xmm1, %xmm0
; X64-AVX-NEXT:    retq
  %1 = mul <2 x i64> %a0, <i64 9, i64 9>
  ret <2 x i64> %1
}

define <2 x i64> @mul_v2i64_0x8000000000000001(<2 x i64> %a0) nounwind {
; X64-AVX-LABEL: mul_v2i64_0x8000000000000001:
; X64-AVX:       # %bb.0:
; X64-AVX-NEXT:    vpsllq $63, %xmm0, %xmm1
; X64-AVX-NEXT:    vpsubq %xmm1, %xmm0, %xmm0
; X64-AVX-NEXT:    retq
  %1 = mul <2 x i64> %a0, <i64 -9223372036854775807, i64 -9223372036854775807>
  ret <2 x i64> %1
}

define <2 x i64> @mul_v2i64_0x7fffffffffffffff(<2 x i64> %a0) nounwind {
; X64-AVX-LABEL: mul_v2i64_0x7fffffffffffffff:
; X64-AVX:       # %bb.0:
; X64-AVX-NEXT:    vpsllq $63, %xmm0, %xmm1
; X64-AVX-NEXT:    vpsubq %xmm0, %xmm1, %xmm0
; X64-AVX-NEXT:    retq
  %1 = mul <2 x i64> %a0, <i64 9223372036854775807, i64 9223372036854775807>
  ret <2 x i64> %1
}

define <4 x i32> @mul_v4i32_3(<4 x i32> %a0) nounwind {
; X64-AVX-LABEL: mul_v4i32_3:
; X64-AVX:       # %bb.0:
; X64-AVX-NEXT:    vpaddd %xmm0, %xmm0, %xmm1
; X64-AVX-NEXT:    vpaddd %xmm1, %xmm0, %xmm0
; X64-AVX-NEXT:    retq
  %1 = mul <4 x i32> %a0, <i32 3, i32 3, i32 3, i32 3>
  ret <4 x i32> %1
}

define <4 x i32> @mul_v4i32_15(<4 x i32> %a0) nounwind {
; X64-AVX-LABEL: mul_v4i32_15:
; X64-AVX:       # %bb.0:
; X64-AVX-NEXT:    vpslld $4, %xmm0, %xmm1
; X64-AVX-NEXT:    vpsubd %xmm0, %xmm1, %xmm0
; X64-AVX-NEXT:    retq
  %1 = mul <4 x i32> %a0, <i32 15, i32 15, i32 15, i32 15>
  ret <4 x i32> %1
}

define <4 x i32> @mul_v4i32_33(<4 x i32> %a0) nounwind {
; X64-AVX-LABEL: mul_v4i32_33:
; X64-AVX:       # %bb.0:
; X64-AVX-NEXT:    vpslld $5, %xmm0, %xmm1
; X64-AVX-NEXT:    vpaddd %xmm0, %xmm1, %xmm0
; X64-AVX-NEXT:    retq
  %1 = mul <4 x i32> %a0, <i32 33, i32 33, i32 33, i32 33>
  ret <4 x i32> %1
}

define <4 x i32> @mul_v4i32_0x80000001(<4 x i32> %a0) nounwind {
; X64-AVX-LABEL: mul_v4i32_0x80000001:
; X64-AVX:       # %bb.0:
; X64-AVX-NEXT:    vpslld $31, %xmm0, %xmm1
; X64-AVX-NEXT:    vpaddd %xmm0, %xmm1, %xmm0
; X64-AVX-NEXT:    retq
  %1 = mul <4 x i32> %a0, <i32 2147483649, i32 2147483649, i32 2147483649, i32 2147483649>
  ret <4 x i32> %1
}

define <4 x i32> @mul_v4i32_0x7fffffff(<4 x i32> %a0) nounwind {
; X64-AVX-LABEL: mul_v4i32_0x7fffffff:
; X64-AVX:       # %bb.0:
; X64-AVX-NEXT:    vpslld $31, %xmm0, %xmm1
; X64-AVX-NEXT:    vpsubd %xmm0, %xmm1, %xmm0
; X64-AVX-NEXT:    retq
  %1 = mul <4 x i32> %a0, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  ret <4 x i32> %1
}
