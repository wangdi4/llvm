# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc %s -mtriple=x86_64-- -fp-contract=fast --verify-machineinstrs -enable-unsafe-fp-math -filetype=obj -o %t.o
# RUN: llvm-objdump -d %t.o | FileCheck %s

--- |
  ; ModuleID = 't.ll'
  source_filename = "t.c"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-unknown-unknown"

  @a1 = common dso_local local_unnamed_addr global <4 x double> <double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00>, align 8
  @b1 = common dso_local local_unnamed_addr global <4 x double> <double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00>, align 8
  @c1 = common dso_local local_unnamed_addr global <4 x double> <double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00>, align 8
  @d1 = common dso_local local_unnamed_addr global <4 x double> <double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00>, align 8

  define dso_local <4 x double> @foo4() local_unnamed_addr #1 {
  entry:
    %0 = load <4 x double>, <4 x double>* @a1, align 8, !tbaa !2
    %1 = load <4 x double>, <4 x double>* @b1, align 8, !tbaa !2
    %2 = load <4 x double>, <4 x double>* @c1, align 8, !tbaa !2
    %mul = fmul fast <4 x double> %2, %1
    %3 = load <4 x double>, <4 x double>* @d1, align 8, !tbaa !2
    %mul1 = fmul fast <4 x double> %mul, %3
    %sub = fsub fast <4 x double> %0, %mul1
    ret <4 x double> %sub
  }

  attributes #1 = { norecurse nounwind readonly uwtable "frame-pointer"="none" "no-infs-fp-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="skylake-avx512" }

  !llvm.module.flags = !{!0}
  !llvm.ident = !{!1}

  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{!"Intel(R) oneAPI DPC++ Compiler 2021.1 (YYYY.x.0.MMDD)"}
  !2 = !{!3, !3, i64 0}
  !3 = !{!"float", !4, i64 0}
  !4 = !{!"omnipotent char", !5, i64 0}
  !5 = !{!"Simple C/C++ TBAA"}

...
---
name:            foo4
alignment:       16
tracksRegLiveness: true
registers:
  - { id: 0, class: vr256x }
  - { id: 1, class: vr256x }
  - { id: 2, class: vr256x }
  - { id: 3, class: vr256x }
frameInfo:
  maxAlignment:    1
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    ; CHECK: foo4
    ; CHECK: vxorpd {{%[x-z]mm[1][6-9]}}, {{%[x-z]mm[1][6-9]}}, {{%[x-z]mm[1][6-9]}}

    liveins: $ymm0, $ymm1, $ymm2, $ymm3, $ymm4, $ymm5, $ymm6, $ymm7, $ymm8, $ymm9, $ymm10, $ymm11, $ymm12, $ymm13, $ymm14, $ymm15

    %0:vr256x = COPY $ymm0
    %1:vr256x = COPY $ymm1
    %2:vr256x = COPY $ymm2
    %3:vr256x = COPY $ymm3
    %4:vr256x = COPY $ymm4
    %5:vr256x = COPY $ymm5
    %6:vr256x = COPY $ymm6
    %7:vr256x = COPY $ymm7
    %8:vr256x = COPY $ymm8
    %9:vr256x = COPY $ymm9
    %10:vr256x = COPY $ymm10
    %11:vr256x = COPY $ymm11
    %12:vr256x = COPY $ymm12
    %13:vr256x = COPY $ymm13
    %14:vr256x = COPY $ymm14
    %15:vr256x = COPY $ymm15

    ; load data
    %40:vr256x = VMOVDQU32Z256rm $rip, 1, $noreg, @a1, $noreg :: (dereferenceable load 8 from @a1, !tbaa !2)
    %41:vr256x = VMOVDQU32Z256rm $rip, 1, $noreg, @b1, $noreg :: (dereferenceable load 8 from @b1, !tbaa !2)
    %42:vr256x = VMOVDQU32Z256rm $rip, 1, $noreg, @c1, $noreg :: (dereferenceable load 8 from @c1, !tbaa !2)
    %43:vr256x = VMOVDQU32Z256rm $rip, 1, $noreg, @d1, $noreg :: (dereferenceable load 8 from @d1, !tbaa !2)

    ; d = (a1-(b1-c1))*d1
    ; register shoule be allocated from ymm16
    %44:vr256x = nnan ninf nsz arcp contract afn reassoc nofpexcept VMULPDZ256rr %41:vr256x, %42:vr256x, implicit $mxcsr
    %45:vr256x = nnan ninf nsz arcp contract afn reassoc nofpexcept VSUBPDZ256rr %40:vr256x, %44:vr256x, implicit $mxcsr
    %46:vr256x = nnan ninf nsz arcp contract afn reassoc nofpexcept VMULPDZ256rr %45:vr256x, %43:vr256x, implicit $mxcsr

    %20:vr256x = nofpexcept VPADDDZ256rr %1, %0, implicit $mxcsr
    %21:vr256x = nofpexcept VPADDDZ256rr %3, %2, implicit $mxcsr
    %22:vr256x = nofpexcept VPADDDZ256rr %5, %4, implicit $mxcsr
    %23:vr256x = nofpexcept VPADDDZ256rr %7, %6, implicit $mxcsr
    %24:vr256x = nofpexcept VPADDDZ256rr %9, %8, implicit $mxcsr
    %25:vr256x = nofpexcept VPADDDZ256rr %11, %10, implicit $mxcsr
    %26:vr256x = nofpexcept VPADDDZ256rr %13, %12, implicit $mxcsr
    %27:vr256x = nofpexcept VPADDDZ256rr %15, %14, implicit $mxcsr

    %30:vr256x = nofpexcept VPADDDZ256rr %21, %20, implicit $mxcsr
    %31:vr256x = nofpexcept VPADDDZ256rr %23, %22, implicit $mxcsr
    %32:vr256x = nofpexcept VPADDDZ256rr %25, %24, implicit $mxcsr
    %33:vr256x = nofpexcept VPADDDZ256rr %27, %26, implicit $mxcsr

    %50:vr256x = nofpexcept VPADDDZ256rr %31, %30, implicit $mxcsr
    %51:vr256x = nofpexcept VPADDDZ256rr %33, %32, implicit $mxcsr

    %60:vr256x = nofpexcept VPADDDZ256rr %50, %51, implicit $mxcsr

    %61:vr256x = nofpexcept VPADDDZ256rr %60, %46, implicit $mxcsr

    $ymm0 = COPY %61
    RET 0, $ymm0
...

