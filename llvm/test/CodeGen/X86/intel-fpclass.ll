; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=i686-linux  -enable-intel-advanced-opts=true -O3 -mattr=+avx512f,+avx512vl,+avx512dq | FileCheck %s --check-prefix=X86-AVX512-VL-DQ

define i8 @float_ole_8x(<8 x float>* %in) {
; X86-AVX512-VL-DQ-LABEL: float_ole_8x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    vfpclasspsy $86, (%eax), %k0
; X86-AVX512-VL-DQ-NEXT:    kmovw %k0, %eax
; X86-AVX512-VL-DQ-NEXT:    # kill: def $al killed $al killed $eax
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %val = load <8 x float>, <8 x float>* %in
  %cmp = fcmp ole <8 x float> %val, zeroinitializer
  %ret = bitcast <8 x i1> %cmp to i8
  ret i8 %ret
}

define i8 @float_oeq_8x(<8 x float>* %in) {
; X86-AVX512-VL-DQ-LABEL: float_oeq_8x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    vfpclasspsy $6, (%eax), %k0
; X86-AVX512-VL-DQ-NEXT:    kmovw %k0, %eax
; X86-AVX512-VL-DQ-NEXT:    # kill: def $al killed $al killed $eax
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %val = load <8 x float>, <8 x float>* %in
  %cmp = fcmp oeq <8 x float> %val, zeroinitializer
  %ret = bitcast <8 x i1> %cmp to i8
  ret i8 %ret
}

define i8 @float_olt_8x(<8 x float>* %in) {
; X86-AVX512-VL-DQ-LABEL: float_olt_8x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    vfpclasspsy $80, (%eax), %k0
; X86-AVX512-VL-DQ-NEXT:    kmovw %k0, %eax
; X86-AVX512-VL-DQ-NEXT:    # kill: def $al killed $al killed $eax
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %val = load <8 x float>, <8 x float>* %in
  %cmp = fcmp olt <8 x float> %val, zeroinitializer
  %ret = bitcast <8 x i1> %cmp to i8
  ret i8 %ret
}

define i8 @float_oge_8x(<8 x float>* %in) {
; X86-AVX512-VL-DQ-LABEL: float_oge_8x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    vcmpleps (%eax), %ymm0, %k0
; X86-AVX512-VL-DQ-NEXT:    kmovw %k0, %eax
; X86-AVX512-VL-DQ-NEXT:    # kill: def $al killed $al killed $eax
; X86-AVX512-VL-DQ-NEXT:    vzeroupper
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %val = load <8 x float>, <8 x float>* %in
  %cmp = fcmp oge <8 x float> %val, zeroinitializer
  %ret = bitcast <8 x i1> %cmp to i8
  ret i8 %ret
}

define i8 @float_one_8x(<8 x float>* %in) {
; X86-AVX512-VL-DQ-LABEL: float_one_8x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    vcmpneq_oqps (%eax), %ymm0, %k0
; X86-AVX512-VL-DQ-NEXT:    kmovw %k0, %eax
; X86-AVX512-VL-DQ-NEXT:    # kill: def $al killed $al killed $eax
; X86-AVX512-VL-DQ-NEXT:    vzeroupper
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %val = load <8 x float>, <8 x float>* %in
  %cmp = fcmp one <8 x float> %val, zeroinitializer
  %ret = bitcast <8 x i1> %cmp to i8
  ret i8 %ret
}

define i8 @float_ogt_8x(<8 x float>* %in) {
; X86-AVX512-VL-DQ-LABEL: float_ogt_8x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    vcmpltps (%eax), %ymm0, %k0
; X86-AVX512-VL-DQ-NEXT:    kmovw %k0, %eax
; X86-AVX512-VL-DQ-NEXT:    # kill: def $al killed $al killed $eax
; X86-AVX512-VL-DQ-NEXT:    vzeroupper
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %val = load <8 x float>, <8 x float>* %in
  %cmp = fcmp ogt <8 x float> %val, zeroinitializer
  %ret = bitcast <8 x i1> %cmp to i8
  ret i8 %ret
}

define i8 @float_ule_8x(<8 x float>* %in) {
; X86-AVX512-VL-DQ-LABEL: float_ule_8x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    vcmpnltps (%eax), %ymm0, %k0
; X86-AVX512-VL-DQ-NEXT:    kmovw %k0, %eax
; X86-AVX512-VL-DQ-NEXT:    # kill: def $al killed $al killed $eax
; X86-AVX512-VL-DQ-NEXT:    vzeroupper
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %val = load <8 x float>, <8 x float>* %in
  %cmp = fcmp ule <8 x float> %val, zeroinitializer
  %ret = bitcast <8 x i1> %cmp to i8
  ret i8 %ret
}

define i8 @float_ueq_8x(<8 x float>* %in) {
; X86-AVX512-VL-DQ-LABEL: float_ueq_8x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    vcmpeq_uqps (%eax), %ymm0, %k0
; X86-AVX512-VL-DQ-NEXT:    kmovw %k0, %eax
; X86-AVX512-VL-DQ-NEXT:    # kill: def $al killed $al killed $eax
; X86-AVX512-VL-DQ-NEXT:    vzeroupper
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %val = load <8 x float>, <8 x float>* %in
  %cmp = fcmp ueq <8 x float> %val, zeroinitializer
  %ret = bitcast <8 x i1> %cmp to i8
  ret i8 %ret
}

define i8 @float_ult_8x(<8 x float>* %in) {
; X86-AVX512-VL-DQ-LABEL: float_ult_8x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    vcmpnleps (%eax), %ymm0, %k0
; X86-AVX512-VL-DQ-NEXT:    kmovw %k0, %eax
; X86-AVX512-VL-DQ-NEXT:    # kill: def $al killed $al killed $eax
; X86-AVX512-VL-DQ-NEXT:    vzeroupper
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %val = load <8 x float>, <8 x float>* %in
  %cmp = fcmp ult <8 x float> %val, zeroinitializer
  %ret = bitcast <8 x i1> %cmp to i8
  ret i8 %ret
}

define i8 @float_uge_8x(<8 x float>* %in) {
; X86-AVX512-VL-DQ-LABEL: float_uge_8x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    vcmpngtps (%eax), %ymm0, %k0
; X86-AVX512-VL-DQ-NEXT:    kmovw %k0, %eax
; X86-AVX512-VL-DQ-NEXT:    # kill: def $al killed $al killed $eax
; X86-AVX512-VL-DQ-NEXT:    vzeroupper
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %val = load <8 x float>, <8 x float>* %in
  %cmp = fcmp uge <8 x float> %val, zeroinitializer
  %ret = bitcast <8 x i1> %cmp to i8
  ret i8 %ret
}

define i8 @float_une_8x(<8 x float>* %in) {
; X86-AVX512-VL-DQ-LABEL: float_une_8x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    vcmpneqps (%eax), %ymm0, %k0
; X86-AVX512-VL-DQ-NEXT:    kmovw %k0, %eax
; X86-AVX512-VL-DQ-NEXT:    # kill: def $al killed $al killed $eax
; X86-AVX512-VL-DQ-NEXT:    vzeroupper
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %val = load <8 x float>, <8 x float>* %in
  %cmp = fcmp une <8 x float> %val, zeroinitializer
  %ret = bitcast <8 x i1> %cmp to i8
  ret i8 %ret
}

define i8 @float_ugt_8x(<8 x float>* %in) {
; X86-AVX512-VL-DQ-LABEL: float_ugt_8x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    vxorps %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    vcmpngeps (%eax), %ymm0, %k0
; X86-AVX512-VL-DQ-NEXT:    kmovw %k0, %eax
; X86-AVX512-VL-DQ-NEXT:    # kill: def $al killed $al killed $eax
; X86-AVX512-VL-DQ-NEXT:    vzeroupper
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %val = load <8 x float>, <8 x float>* %in
  %cmp = fcmp ugt <8 x float> %val, zeroinitializer
  %ret = bitcast <8 x i1> %cmp to i8
  ret i8 %ret
}

define i8 @double_ole_8x(<8 x double>* %in) {
; X86-AVX512-VL-DQ-LABEL: double_ole_8x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    vfpclasspdz $86, (%eax), %k0
; X86-AVX512-VL-DQ-NEXT:    kmovw %k0, %eax
; X86-AVX512-VL-DQ-NEXT:    # kill: def $al killed $al killed $eax
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %val = load <8 x double>, <8 x double>* %in
  %cmp = fcmp ole <8 x double> %val, zeroinitializer
  %ret = bitcast <8 x i1> %cmp to i8
  ret i8 %ret
}

define i8 @double_oeq_8x(<8 x double>* %in) {
; X86-AVX512-VL-DQ-LABEL: double_oeq_8x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    vfpclasspdz $6, (%eax), %k0
; X86-AVX512-VL-DQ-NEXT:    kmovw %k0, %eax
; X86-AVX512-VL-DQ-NEXT:    # kill: def $al killed $al killed $eax
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %val = load <8 x double>, <8 x double>* %in
  %cmp = fcmp oeq <8 x double> %val, zeroinitializer
  %ret = bitcast <8 x i1> %cmp to i8
  ret i8 %ret
}

define i8 @double_olt_8x(<8 x double>* %in) {
; X86-AVX512-VL-DQ-LABEL: double_olt_8x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    vfpclasspdz $80, (%eax), %k0
; X86-AVX512-VL-DQ-NEXT:    kmovw %k0, %eax
; X86-AVX512-VL-DQ-NEXT:    # kill: def $al killed $al killed $eax
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %val = load <8 x double>, <8 x double>* %in
  %cmp = fcmp olt <8 x double> %val, zeroinitializer
  %ret = bitcast <8 x i1> %cmp to i8
  ret i8 %ret
}

define i8 @double_oge_8x(<8 x double>* %in) {
; X86-AVX512-VL-DQ-LABEL: double_oge_8x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    vxorpd %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    vcmplepd (%eax), %zmm0, %k0
; X86-AVX512-VL-DQ-NEXT:    kmovw %k0, %eax
; X86-AVX512-VL-DQ-NEXT:    # kill: def $al killed $al killed $eax
; X86-AVX512-VL-DQ-NEXT:    vzeroupper
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %val = load <8 x double>, <8 x double>* %in
  %cmp = fcmp oge <8 x double> %val, zeroinitializer
  %ret = bitcast <8 x i1> %cmp to i8
  ret i8 %ret
}

define i8 @double_one_8x(<8 x double>* %in) {
; X86-AVX512-VL-DQ-LABEL: double_one_8x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    vxorpd %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    vcmpneq_oqpd (%eax), %zmm0, %k0
; X86-AVX512-VL-DQ-NEXT:    kmovw %k0, %eax
; X86-AVX512-VL-DQ-NEXT:    # kill: def $al killed $al killed $eax
; X86-AVX512-VL-DQ-NEXT:    vzeroupper
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %val = load <8 x double>, <8 x double>* %in
  %cmp = fcmp one <8 x double> %val, zeroinitializer
  %ret = bitcast <8 x i1> %cmp to i8
  ret i8 %ret
}

define i8 @double_ogt_8x(<8 x double>* %in) {
; X86-AVX512-VL-DQ-LABEL: double_ogt_8x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    vxorpd %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    vcmpltpd (%eax), %zmm0, %k0
; X86-AVX512-VL-DQ-NEXT:    kmovw %k0, %eax
; X86-AVX512-VL-DQ-NEXT:    # kill: def $al killed $al killed $eax
; X86-AVX512-VL-DQ-NEXT:    vzeroupper
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %val = load <8 x double>, <8 x double>* %in
  %cmp = fcmp ogt <8 x double> %val, zeroinitializer
  %ret = bitcast <8 x i1> %cmp to i8
  ret i8 %ret
}

define i8 @double_ule_8x(<8 x double>* %in) {
; X86-AVX512-VL-DQ-LABEL: double_ule_8x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    vxorpd %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    vcmpnltpd (%eax), %zmm0, %k0
; X86-AVX512-VL-DQ-NEXT:    kmovw %k0, %eax
; X86-AVX512-VL-DQ-NEXT:    # kill: def $al killed $al killed $eax
; X86-AVX512-VL-DQ-NEXT:    vzeroupper
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %val = load <8 x double>, <8 x double>* %in
  %cmp = fcmp ule <8 x double> %val, zeroinitializer
  %ret = bitcast <8 x i1> %cmp to i8
  ret i8 %ret
}

define i8 @double_ueq_8x(<8 x double>* %in) {
; X86-AVX512-VL-DQ-LABEL: double_ueq_8x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    vxorpd %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    vcmpeq_uqpd (%eax), %zmm0, %k0
; X86-AVX512-VL-DQ-NEXT:    kmovw %k0, %eax
; X86-AVX512-VL-DQ-NEXT:    # kill: def $al killed $al killed $eax
; X86-AVX512-VL-DQ-NEXT:    vzeroupper
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %val = load <8 x double>, <8 x double>* %in
  %cmp = fcmp ueq <8 x double> %val, zeroinitializer
  %ret = bitcast <8 x i1> %cmp to i8
  ret i8 %ret
}

define i8 @double_ult_8x(<8 x double>* %in) {
; X86-AVX512-VL-DQ-LABEL: double_ult_8x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    vxorpd %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    vcmpnlepd (%eax), %zmm0, %k0
; X86-AVX512-VL-DQ-NEXT:    kmovw %k0, %eax
; X86-AVX512-VL-DQ-NEXT:    # kill: def $al killed $al killed $eax
; X86-AVX512-VL-DQ-NEXT:    vzeroupper
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %val = load <8 x double>, <8 x double>* %in
  %cmp = fcmp ult <8 x double> %val, zeroinitializer
  %ret = bitcast <8 x i1> %cmp to i8
  ret i8 %ret
}

define i8 @double_uge_8x(<8 x double>* %in) {
; X86-AVX512-VL-DQ-LABEL: double_uge_8x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    vxorpd %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    vcmpngtpd (%eax), %zmm0, %k0
; X86-AVX512-VL-DQ-NEXT:    kmovw %k0, %eax
; X86-AVX512-VL-DQ-NEXT:    # kill: def $al killed $al killed $eax
; X86-AVX512-VL-DQ-NEXT:    vzeroupper
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %val = load <8 x double>, <8 x double>* %in
  %cmp = fcmp uge <8 x double> %val, zeroinitializer
  %ret = bitcast <8 x i1> %cmp to i8
  ret i8 %ret
}

define i8 @double_une_8x(<8 x double>* %in) {
; X86-AVX512-VL-DQ-LABEL: double_une_8x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    vxorpd %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    vcmpneqpd (%eax), %zmm0, %k0
; X86-AVX512-VL-DQ-NEXT:    kmovw %k0, %eax
; X86-AVX512-VL-DQ-NEXT:    # kill: def $al killed $al killed $eax
; X86-AVX512-VL-DQ-NEXT:    vzeroupper
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %val = load <8 x double>, <8 x double>* %in
  %cmp = fcmp une <8 x double> %val, zeroinitializer
  %ret = bitcast <8 x i1> %cmp to i8
  ret i8 %ret
}

define i8 @double_ugt_8x(<8 x double>* %in) {
; X86-AVX512-VL-DQ-LABEL: double_ugt_8x:
; X86-AVX512-VL-DQ:       # %bb.0: # %entry
; X86-AVX512-VL-DQ-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-AVX512-VL-DQ-NEXT:    vxorpd %xmm0, %xmm0, %xmm0
; X86-AVX512-VL-DQ-NEXT:    vcmpngepd (%eax), %zmm0, %k0
; X86-AVX512-VL-DQ-NEXT:    kmovw %k0, %eax
; X86-AVX512-VL-DQ-NEXT:    # kill: def $al killed $al killed $eax
; X86-AVX512-VL-DQ-NEXT:    vzeroupper
; X86-AVX512-VL-DQ-NEXT:    retl
entry:
  %val = load <8 x double>, <8 x double>* %in
  %cmp = fcmp ugt <8 x double> %val, zeroinitializer
  %ret = bitcast <8 x i1> %cmp to i8
  ret i8 %ret
}

