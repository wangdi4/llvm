; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-pc-linux -mattr=avx512vl | FileCheck %s

; Test that we can unfold constant pool loads when we're using avx512's
; ability to fold a broadcast load into an operation.

define void @bcast_unfold_mask_cmppd_v4f64(double* %arg) {
; CHECK-LABEL: bcast_unfold_mask_cmppd_v4f64:
; CHECK:       # %bb.0: # %bb
; CHECK-NEXT:    movq $-8192, %rax # imm = 0xE000
; CHECK-NEXT:    vbroadcastsd {{.*#+}} ymm0 = [1.0E+0,1.0E+0,1.0E+0,1.0E+0]
; CHECK-NEXT:    vbroadcastsd {{.*#+}} ymm1 = [2.0E+0,2.0E+0,2.0E+0,2.0E+0]
; CHECK-NEXT:    vbroadcastsd {{.*#+}} ymm2 = [3.0E+0,3.0E+0,3.0E+0,3.0E+0]
; CHECK-NEXT:    .p2align 4, 0x90
; CHECK-NEXT:  .LBB0_1: # %bb1
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    vmovupd 8192(%rdi,%rax), %ymm3
; CHECK-NEXT:    vcmpnlepd %ymm0, %ymm3, %k1
; CHECK-NEXT:    vcmpngepd %ymm1, %ymm3, %k1 {%k1}
; CHECK-NEXT:    vmovapd %ymm2, %ymm3 {%k1}
; CHECK-NEXT:    vmovupd %ymm3, 8192(%rdi,%rax)
; CHECK-NEXT:    addq $32, %rax
; CHECK-NEXT:    jne .LBB0_1
; CHECK-NEXT:  # %bb.2: # %bb10
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
bb:
  br label %bb1

bb1:                                              ; preds = %bb1, %bb
  %tmp = phi i64 [ 0, %bb ], [ %tmp8, %bb1 ]
  %tmp2 = getelementptr inbounds double, double* %arg, i64 %tmp
  %tmp3 = bitcast double* %tmp2 to <4 x double>*
  %tmp4 = load <4 x double>, <4 x double>* %tmp3, align 8
  %tmp5a = fcmp ugt <4 x double> %tmp4, <double 1.0, double 1.0, double 1.0, double 1.0>
  %tmp5b = fcmp ult <4 x double> %tmp4, <double 2.0, double 2.0, double 2.0, double 2.0>
  %tmp5 = and <4 x i1> %tmp5a, %tmp5b
  %tmp6 = select <4 x i1> %tmp5, <4 x double> <double 3.0, double 3.0, double 3.0, double 3.0>, <4 x double> %tmp4
  %tmp7 = bitcast double* %tmp2 to <4 x double>*
  store <4 x double> %tmp6, <4 x double>* %tmp7, align 4
  %tmp8 = add i64 %tmp, 4
  %tmp9 = icmp eq i64 %tmp8, 1024
  br i1 %tmp9, label %bb10, label %bb1

bb10:                                             ; preds = %bb1
  ret void
}

define void @bcast_unfold_mask_cmppd_v8f64(double* %arg) {
; CHECK-LABEL: bcast_unfold_mask_cmppd_v8f64:
; CHECK:       # %bb.0: # %bb
; CHECK-NEXT:    movq $-8192, %rax # imm = 0xE000
; CHECK-NEXT:    vbroadcastsd {{.*#+}} zmm0 = [1.0E+0,1.0E+0,1.0E+0,1.0E+0,1.0E+0,1.0E+0,1.0E+0,1.0E+0]
; CHECK-NEXT:    vbroadcastsd {{.*#+}} zmm1 = [2.0E+0,2.0E+0,2.0E+0,2.0E+0,2.0E+0,2.0E+0,2.0E+0,2.0E+0]
; CHECK-NEXT:    vbroadcastsd {{.*#+}} zmm2 = [3.0E+0,3.0E+0,3.0E+0,3.0E+0,3.0E+0,3.0E+0,3.0E+0,3.0E+0]
; CHECK-NEXT:    .p2align 4, 0x90
; CHECK-NEXT:  .LBB1_1: # %bb1
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    vmovupd 8192(%rdi,%rax), %zmm3
; CHECK-NEXT:    vcmpnlepd %zmm0, %zmm3, %k1
; CHECK-NEXT:    vcmpngepd %zmm1, %zmm3, %k1 {%k1}
; CHECK-NEXT:    vmovapd %zmm2, %zmm3 {%k1}
; CHECK-NEXT:    vmovupd %zmm3, 8192(%rdi,%rax)
; CHECK-NEXT:    addq $64, %rax
; CHECK-NEXT:    jne .LBB1_1
; CHECK-NEXT:  # %bb.2: # %bb10
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
bb:
  br label %bb1

bb1:                                              ; preds = %bb1, %bb
  %tmp = phi i64 [ 0, %bb ], [ %tmp8, %bb1 ]
  %tmp2 = getelementptr inbounds double, double* %arg, i64 %tmp
  %tmp3 = bitcast double* %tmp2 to <8 x double>*
  %tmp4 = load <8 x double>, <8 x double>* %tmp3, align 8
  %tmp5a = fcmp ugt <8 x double> %tmp4, <double 1.0, double 1.0, double 1.0, double 1.0, double 1.0, double 1.0, double 1.0, double 1.0>
  %tmp5b = fcmp ult <8 x double> %tmp4, <double 2.0, double 2.0, double 2.0, double 2.0, double 2.0, double 2.0, double 2.0, double 2.0>
  %tmp5 = and <8 x i1> %tmp5a, %tmp5b
  %tmp6 = select <8 x i1> %tmp5, <8 x double> <double 3.0, double 3.0, double 3.0, double 3.0, double 3.0, double 3.0, double 3.0, double 3.0>, <8 x double> %tmp4
  %tmp7 = bitcast double* %tmp2 to <8 x double>*
  store <8 x double> %tmp6, <8 x double>* %tmp7, align 4
  %tmp8 = add i64 %tmp, 8
  %tmp9 = icmp eq i64 %tmp8, 1024
  br i1 %tmp9, label %bb10, label %bb1

bb10:                                             ; preds = %bb1
  ret void
}
