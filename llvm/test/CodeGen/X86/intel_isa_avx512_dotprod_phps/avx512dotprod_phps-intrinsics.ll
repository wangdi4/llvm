; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_avx512_dotprod_phps
; RUN: llc < %s -mtriple=i686-unknown-unknown -mattr=+avx512dotprodphps,+avx512fp16 --show-mc-encoding | FileCheck %s --check-prefixes=X86
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx512dotprodphps,+avx512fp16 --show-mc-encoding | FileCheck %s --check-prefixes=X64

declare <16 x float> @llvm.x86.avx512.mask.vdpphps.512(<16 x float>, <16 x float>, <16 x float>, i16, i32)
declare <16 x float> @llvm.x86.avx512.maskz.vdpphps.512(<16 x float>, <16 x float>, <16 x float>, i16, i32)

define <16 x float>@test_int_x86_avx512_mask_vdpphps_512(<16 x float> %x0, <16 x float> %x1, <16 x float> %x2, i16 %x3) {
; X86-LABEL: test_int_x86_avx512_mask_vdpphps_512:
; X86:       # %bb.0:
; X86-NEXT:    kmovw {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf8,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vmovaps %zmm2, %zmm3 # encoding: [0x62,0xf1,0x7c,0x48,0x28,0xda]
; X86-NEXT:    vdpphps {ru-sae}, %zmm1, %zmm0, %zmm3 {%k1} # encoding: [0x62,0xf2,0x7c,0x59,0x52,0xd9]
; X86-NEXT:    vdpphps {rn-sae}, %zmm1, %zmm0, %zmm2 # encoding: [0x62,0xf2,0x7c,0x18,0x52,0xd1]
; X86-NEXT:    vaddps %zmm2, %zmm3, %zmm0 # encoding: [0x62,0xf1,0x64,0x48,0x58,0xc2]
; X86-NEXT:    retl # encoding: [0xc3]
;
; X64-LABEL: test_int_x86_avx512_mask_vdpphps_512:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vmovaps %zmm2, %zmm3 # encoding: [0x62,0xf1,0x7c,0x48,0x28,0xda]
; X64-NEXT:    vdpphps {ru-sae}, %zmm1, %zmm0, %zmm3 {%k1} # encoding: [0x62,0xf2,0x7c,0x59,0x52,0xd9]
; X64-NEXT:    vdpphps {rn-sae}, %zmm1, %zmm0, %zmm2 # encoding: [0x62,0xf2,0x7c,0x18,0x52,0xd1]
; X64-NEXT:    vaddps %zmm2, %zmm3, %zmm0 # encoding: [0x62,0xf1,0x64,0x48,0x58,0xc2]
; X64-NEXT:    retq # encoding: [0xc3]
  %res =  call <16 x float> @llvm.x86.avx512.mask.vdpphps.512(<16 x float> %x0, <16 x float> %x1, <16 x float> %x2, i16 %x3, i32 10)
  %res1 = call <16 x float> @llvm.x86.avx512.mask.vdpphps.512(<16 x float> %x0, <16 x float> %x1, <16 x float> %x2, i16 -1, i32 8)
  %res2 = fadd <16 x float> %res, %res1
  ret <16 x float> %res2
}

define <16 x float>@test_int_x86_avx512_maskz_vdpphps_512(<16 x float> %x0, <16 x float> %x1, <16 x float> %x2, i16 %x3) {
; X86-LABEL: test_int_x86_avx512_maskz_vdpphps_512:
; X86:       # %bb.0:
; X86-NEXT:    kmovw {{[0-9]+}}(%esp), %k1 # encoding: [0xc5,0xf8,0x90,0x4c,0x24,0x04]
; X86-NEXT:    vmovaps %zmm2, %zmm3 # encoding: [0x62,0xf1,0x7c,0x48,0x28,0xda]
; X86-NEXT:    vdpphps {ru-sae}, %zmm1, %zmm0, %zmm3 {%k1} {z} # encoding: [0x62,0xf2,0x7c,0xd9,0x52,0xd9]
; X86-NEXT:    vdpphps {rn-sae}, %zmm1, %zmm0, %zmm2 # encoding: [0x62,0xf2,0x7c,0x18,0x52,0xd1]
; X86-NEXT:    vaddps %zmm2, %zmm3, %zmm0 # encoding: [0x62,0xf1,0x64,0x48,0x58,0xc2]
; X86-NEXT:    retl # encoding: [0xc3]
;
; X64-LABEL: test_int_x86_avx512_maskz_vdpphps_512:
; X64:       # %bb.0:
; X64-NEXT:    kmovd %edi, %k1 # encoding: [0xc5,0xfb,0x92,0xcf]
; X64-NEXT:    vmovaps %zmm2, %zmm3 # encoding: [0x62,0xf1,0x7c,0x48,0x28,0xda]
; X64-NEXT:    vdpphps {ru-sae}, %zmm1, %zmm0, %zmm3 {%k1} {z} # encoding: [0x62,0xf2,0x7c,0xd9,0x52,0xd9]
; X64-NEXT:    vdpphps {rn-sae}, %zmm1, %zmm0, %zmm2 # encoding: [0x62,0xf2,0x7c,0x18,0x52,0xd1]
; X64-NEXT:    vaddps %zmm2, %zmm3, %zmm0 # encoding: [0x62,0xf1,0x64,0x48,0x58,0xc2]
; X64-NEXT:    retq # encoding: [0xc3]
  %res =  call <16 x float> @llvm.x86.avx512.maskz.vdpphps.512(<16 x float> %x0, <16 x float> %x1, <16 x float> %x2, i16 %x3, i32 10)
  %res1 = call <16 x float> @llvm.x86.avx512.maskz.vdpphps.512(<16 x float> %x0, <16 x float> %x1, <16 x float> %x2, i16 -1, i32 8)
  %res2 = fadd <16 x float> %res, %res1
  ret <16 x float> %res2
}

