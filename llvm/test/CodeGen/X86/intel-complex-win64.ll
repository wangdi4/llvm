; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-windows-msvc | FileCheck %s

; Check that we handle the ABI of the complex functions correctly for 64-bit
; windows API. Compiler-rt only includes mulsc3/muldc3, so we only test those.

declare <2 x float> @llvm.intel.complex.fmul.v2f32(<2 x float>, <2 x float>)
declare <2 x double> @llvm.intel.complex.fmul.v2f64(<2 x double>, <2 x double>)

define <2 x float> @intrinsic_f32(<2 x float> %z, <2 x float> %w) nounwind {
; CHECK-LABEL: intrinsic_f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    subq $40, %rsp
; CHECK-NEXT:    movaps (%rdx), %xmm2
; CHECK-NEXT:    movaps (%rcx), %xmm0
; CHECK-NEXT:    movaps %xmm0, %xmm1
; CHECK-NEXT:    shufps {{.*#+}} xmm1 = xmm1[1,1],xmm0[1,1]
; CHECK-NEXT:    movaps %xmm2, %xmm3
; CHECK-NEXT:    shufps {{.*#+}} xmm3 = xmm3[1,1],xmm2[1,1]
; CHECK-NEXT:    callq __mulsc3
; CHECK-NEXT:    movq %rax, %xmm0
; CHECK-NEXT:    addq $40, %rsp
; CHECK-NEXT:    retq
  %mul = call <2 x float> @llvm.intel.complex.fmul.v2f32(<2 x float> %z, <2 x float> %w)
  ret <2 x float> %mul
}

define <2 x double> @intrinsic_f64(<2 x double> %z, <2 x double> %w) nounwind {
; CHECK-LABEL: intrinsic_f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    subq $56, %rsp
; CHECK-NEXT:    movaps (%rdx), %xmm3
; CHECK-NEXT:    movaps (%rcx), %xmm1
; CHECK-NEXT:    movaps %xmm1, %xmm2
; CHECK-NEXT:    unpckhpd {{.*#+}} xmm2 = xmm2[1],xmm1[1]
; CHECK-NEXT:    movhps %xmm3, {{[0-9]+}}(%rsp)
; CHECK-NEXT:    leaq {{[0-9]+}}(%rsp), %rcx
; CHECK-NEXT:    callq __muldc3
; CHECK-NEXT:    movups {{[0-9]+}}(%rsp), %xmm0
; CHECK-NEXT:    addq $56, %rsp
; CHECK-NEXT:    retq
  %mul = call <2 x double> @llvm.intel.complex.fmul.v2f64(<2 x double> %z, <2 x double> %w)
  ret <2 x double> %mul
}
