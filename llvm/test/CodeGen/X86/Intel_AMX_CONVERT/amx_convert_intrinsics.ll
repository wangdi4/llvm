; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_amx_convert
; RUN: llc < %s -O0 -mtriple=x86_64-unknown-unknown -mattr=+amx-convert | FileCheck %s

define void @test_amx(i64 %stride, i8* %addr) {
; amx-convert
; CHECK-LABEL: test_amx:
; CHECK:       # %bb.0:
; CHECK-NEXT:    tcvt2ps2bf16 %tmm7, %tmm1, (%rsi,%rdi)
; CHECK-NEXT:    tcvt2ps2ph %tmm7, %tmm1, (%rsi,%rdi)
; CHECK-NEXT:    tcvtd2ps %tmm1, (%rsi,%rdi)
; CHECK-NEXT:    tcvtps2bf16 %tmm1, (%rsi,%rdi)
; CHECK-NEXT:    tcvtps2ph %tmm1, (%rsi,%rdi)
; CHECK-NEXT:    tilerelease
; CHECK-NEXT:    retq
  call void @llvm.x86.tcvt2ps2bf16(i8* %addr, i64 %stride, i8 1, i8 7)
  call void @llvm.x86.tcvt2ps2ph(i8* %addr, i64 %stride, i8 1, i8 7)
  call void @llvm.x86.amxconvert.tcvtd2ps(i8* %addr, i64 %stride, i8 1)
  call void @llvm.x86.amxconvert.tcvtps2bf16(i8* %addr, i64 %stride, i8 1)
  call void @llvm.x86.tcvtps2ph(i8* %addr, i64 %stride, i8 1)
  ret void
}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; amx-convert
declare void @llvm.x86.tcvt2ps2bf16(i8* %addr, i64 %stride, i8 %tile1, i8 %tile2)
declare void @llvm.x86.tcvt2ps2ph(i8* %addr, i64 %stride, i8 %tile1, i8 %tile2)
declare void @llvm.x86.amxconvert.tcvtd2ps(i8* %addr, i64 %stride, i8 %tile1)
declare void @llvm.x86.amxconvert.tcvtps2bf16(i8* %addr, i64 %stride, i8 %tile1)
declare void @llvm.x86.tcvtps2ph(i8* %addr, i64 %stride, i8 %tile1)
