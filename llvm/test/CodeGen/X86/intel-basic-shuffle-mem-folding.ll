; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx2 -x86-force-emit-mem-form-basic-shuffle | FileCheck %s --check-prefix=AVX
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx512f -x86-force-emit-mem-form-basic-shuffle | FileCheck %s --check-prefix=AVX512
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx2 | FileCheck %s --check-prefix=AVX-NO-FORCE
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx512f | FileCheck %s --check-prefix=AVX512X-NO-FORCE

define <8 x float> @test256(float* %x_ptr, <8 x float> %x2, <8 x float> %x3) {
; AVX-LABEL: test256:
; AVX:       # %bb.0: # %entry
; AVX-NEXT:    vmovshdup {{.*#+}} ymm0 = mem[1,1,3,3,5,5,7,7]
; AVX-NEXT:    vmovsldup {{.*#+}} ymm1 = mem[0,0,2,2,4,4,6,6]
; AVX-NEXT:    vaddps %ymm1, %ymm0, %ymm0
; AVX-NEXT:    retq
;
; AVX512-LABEL: test256:
; AVX512:       # %bb.0: # %entry
; AVX512-NEXT:    vmovshdup {{.*#+}} ymm0 = mem[1,1,3,3,5,5,7,7]
; AVX512-NEXT:    vmovsldup {{.*#+}} ymm1 = mem[0,0,2,2,4,4,6,6]
; AVX512-NEXT:    vaddps %ymm1, %ymm0, %ymm0
; AVX512-NEXT:    retq
;
; AVX-NO-FORCE-LABEL: test256:
; AVX-NO-FORCE:       # %bb.0: # %entry
; AVX-NO-FORCE-NEXT:    vmovups (%rdi), %ymm0
; AVX-NO-FORCE-NEXT:    vmovshdup {{.*#+}} ymm1 = ymm0[1,1,3,3,5,5,7,7]
; AVX-NO-FORCE-NEXT:    vmovsldup {{.*#+}} ymm0 = ymm0[0,0,2,2,4,4,6,6]
; AVX-NO-FORCE-NEXT:    vaddps %ymm0, %ymm1, %ymm0
; AVX-NO-FORCE-NEXT:    retq
;
; AVX512X-NO-FORCE-LABEL: test256:
; AVX512X-NO-FORCE:       # %bb.0: # %entry
; AVX512X-NO-FORCE-NEXT:    vmovups (%rdi), %ymm0
; AVX512X-NO-FORCE-NEXT:    vmovshdup {{.*#+}} ymm1 = ymm0[1,1,3,3,5,5,7,7]
; AVX512X-NO-FORCE-NEXT:    vmovsldup {{.*#+}} ymm0 = ymm0[0,0,2,2,4,4,6,6]
; AVX512X-NO-FORCE-NEXT:    vaddps %ymm0, %ymm1, %ymm0
; AVX512X-NO-FORCE-NEXT:    retq
entry:
  %0 = bitcast float* %x_ptr to <8 x float>*
  %1 = load <8 x float>, <8 x float>* %0, align 1
  %shuffle.i13 = shufflevector <8 x float> %1, <8 x float> poison, <8 x i32> <i32 1, i32 1, i32 3, i32 3, i32 5, i32 5, i32 7, i32 7>
  %shuffle.i = shufflevector <8 x float> %1, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 2, i32 2, i32 4, i32 4, i32 6, i32 6>
  %add.i = fadd <8 x float> %shuffle.i13, %shuffle.i
  ret <8 x float> %add.i
}

define <8 x double> @test512(double* %x_ptr, <8 x double> %x2, <8 x double> %x3) {
; AVX-LABEL: test512:
; AVX:       # %bb.0: # %entry
; AVX-NEXT:    vmovupd (%rdi), %ymm0
; AVX-NEXT:    vmovupd 32(%rdi), %ymm1
; AVX-NEXT:    vhaddpd %ymm0, %ymm0, %ymm0
; AVX-NEXT:    vhaddpd %ymm1, %ymm1, %ymm1
; AVX-NEXT:    retq
;
; AVX512-LABEL: test512:
; AVX512:       # %bb.0: # %entry
; AVX512-NEXT:    vpermilpd {{.*#+}} zmm0 = mem[1,1,3,3,5,5,7,7]
; AVX512-NEXT:    vmovddup {{.*#+}} zmm1 = mem[0,0,2,2,4,4,6,6]
; AVX512-NEXT:    vaddpd %zmm1, %zmm0, %zmm0
; AVX512-NEXT:    retq
;
; AVX-NO-FORCE-LABEL: test512:
; AVX-NO-FORCE:       # %bb.0: # %entry
; AVX-NO-FORCE-NEXT:    vmovupd (%rdi), %ymm0
; AVX-NO-FORCE-NEXT:    vmovupd 32(%rdi), %ymm1
; AVX-NO-FORCE-NEXT:    vhaddpd %ymm0, %ymm0, %ymm0
; AVX-NO-FORCE-NEXT:    vhaddpd %ymm1, %ymm1, %ymm1
; AVX-NO-FORCE-NEXT:    retq
;
; AVX512X-NO-FORCE-LABEL: test512:
; AVX512X-NO-FORCE:       # %bb.0: # %entry
; AVX512X-NO-FORCE-NEXT:    vmovupd (%rdi), %zmm0
; AVX512X-NO-FORCE-NEXT:    vpermilpd {{.*#+}} zmm1 = zmm0[1,1,3,3,5,5,7,7]
; AVX512X-NO-FORCE-NEXT:    vmovddup {{.*#+}} zmm0 = zmm0[0,0,2,2,4,4,6,6]
; AVX512X-NO-FORCE-NEXT:    vaddpd %zmm0, %zmm1, %zmm0
; AVX512X-NO-FORCE-NEXT:    retq
entry:
  %__v.i = bitcast double* %x_ptr to <8 x double>*
  %0 = load <8 x double>, <8 x double>* %__v.i, align 1
  %shufp = shufflevector <8 x double> %0, <8 x double> poison, <8 x i32> <i32 1, i32 1, i32 3, i32 3, i32 5, i32 5, i32 7, i32 7>
  %shuffle.i = shufflevector <8 x double> %0, <8 x double> poison, <8 x i32> <i32 0, i32 0, i32 2, i32 2, i32 4, i32 4, i32 6, i32 6>
  %add.i = fadd <8 x double> %shufp, %shuffle.i
  ret <8 x double> %add.i
}
