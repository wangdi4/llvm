; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_fp16
; This test checks that FWS module of Global FMA can optimize/fuse
; expressions having two or more users.
;
; IR for this test was generated from this simple test:
;    half dst1, dst2;
;    half gl_a, gl_b, gl_c;
;    void func() {
;      half a = gl_a;
;      half b = gl_b;
;      half c = gl_c;
;
;      half t = a*b;
;      dst1 = t+c;
;      dst2 = t-c;
;    }
;
; Global FMA is supposed to optimize replace 1 MUL, 1 ADD, 1SUB into
; 1 FMA and 1 FMS.
; The tricky part here is that the MUL has 2 independent users and the
; fusing/FWS'ing that MUL into ADD and SUB does not give improvement
; to those ADD and SUB. But it still efficient because we can eliminate
; the initial MUL by doing aggressive FWS:
;   dst1 = a*b+c;
;   dst2 = a*b-c;
;

; RUN: llc < %s -mtriple=x86_64-unknown-linux-gnu -verify-machineinstrs -mattr=+avx512fp16 -fp-contract=fast -enable-unsafe-fp-math | FileCheck %s

; Function Attrs: nounwind uwtable
define dso_local void @_Z4funcv() {
; CHECK-LABEL: _Z4funcv:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vmovsh gl_a(%rip), %xmm0
; CHECK-NEXT:    vmovsh gl_c(%rip), %xmm1
; CHECK-NEXT:    vmovsh gl_b(%rip), %xmm2
; CHECK-NEXT:    vmovaps %xmm0, %xmm3
; CHECK-NEXT:    vfmadd213sh %xmm1, %xmm2, %xmm3
; CHECK-NEXT:    vmovsh %xmm3, dst1(%rip)
; CHECK-NEXT:    vfmsub213sh %xmm1, %xmm2, %xmm0
; CHECK-NEXT:    vmovsh %xmm0, dst2(%rip)
; CHECK-NEXT:    retq
entry:
  %0 = load half, half* @gl_a, align 2
  %1 = load half, half* @gl_b, align 2
  %2 = load half, half* @gl_c, align 2
  %mul = fmul fast half %0, %1
  %add = fadd fast half %mul, %2
  store half %add, half* @dst1, align 2
  %sub = fsub fast half %mul, %2
  store half %sub, half* @dst2, align 2
  ret void
}

@dst1 = dso_local global half 0.000000e+00, align 2
@dst2 = dso_local global half 0.000000e+00, align 2
@gl_a = dso_local global half 0.000000e+00, align 2
@gl_b = dso_local global half 0.000000e+00, align 2
@gl_c = dso_local global half 0.000000e+00, align 2
