# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -o - %s -mtriple=x86_64-- -mcpu=sapphirerapids -fp-contract=fast -enable-unsafe-fp-math -run-pass=mir-debugify,x86-cfma,mir-check-debugify 2>&1 | FileCheck %s
--- |
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-unknown-linux-gnu"

  ; Function Attrs: nofree nosync nounwind readonly uwtable
  define dso_local <16 x float> @test_fmaconj_sum(<16 x float>* nocapture readonly %x0, <16 x float>* nocapture readonly %x1) local_unnamed_addr #0 !dbg !23 {
  entry:
    call void @llvm.dbg.value(metadata <16 x float>* %x0, metadata !29, metadata !DIExpression()), !dbg !35
    call void @llvm.dbg.value(metadata <16 x float>* %x1, metadata !30, metadata !DIExpression()), !dbg !35
    call void @llvm.dbg.value(metadata <32 x half> zeroinitializer, metadata !31, metadata !DIExpression()), !dbg !35
    call void @llvm.dbg.value(metadata i32 0, metadata !32, metadata !DIExpression()), !dbg !36
    call void @llvm.dbg.value(metadata <32 x half> undef, metadata !31, metadata !DIExpression()), !dbg !35
    call void @llvm.dbg.value(metadata i64 0, metadata !32, metadata !DIExpression()), !dbg !36
    %0 = load <16 x float>, <16 x float>* %x0, align 64, !dbg !37, !tbaa !40
    %1 = load <16 x float>, <16 x float>* %x1, align 64, !dbg !43, !tbaa !40
    %2 = tail call fast <16 x float> @llvm.x86.avx512fp16.mask.vfcmaddc.ph.512(<16 x float> zeroinitializer, <16 x float> %0, <16 x float> %1, i16 -1, i32 4) #3, !dbg !44
    call void @llvm.dbg.value(metadata <16 x float> %2, metadata !31, metadata !DIExpression()), !dbg !35
    call void @llvm.dbg.value(metadata i64 1, metadata !32, metadata !DIExpression()), !dbg !36
    call void @llvm.dbg.value(metadata <32 x half> undef, metadata !31, metadata !DIExpression()), !dbg !35
    call void @llvm.dbg.value(metadata i64 1, metadata !32, metadata !DIExpression()), !dbg !36
    %arrayidx.1 = getelementptr inbounds <16 x float>, <16 x float>* %x0, i64 1, !dbg !37
    %3 = load <16 x float>, <16 x float>* %arrayidx.1, align 64, !dbg !37, !tbaa !40
    %arrayidx2.1 = getelementptr inbounds <16 x float>, <16 x float>* %x1, i64 1, !dbg !43
    %4 = load <16 x float>, <16 x float>* %arrayidx2.1, align 64, !dbg !43, !tbaa !40
    %5 = tail call fast <16 x float> @llvm.x86.avx512fp16.mask.vfcmaddc.ph.512(<16 x float> %2, <16 x float> %3, <16 x float> %4, i16 -1, i32 4) #3, !dbg !44
    call void @llvm.dbg.value(metadata <16 x float> %5, metadata !31, metadata !DIExpression()), !dbg !35
    call void @llvm.dbg.value(metadata i64 2, metadata !32, metadata !DIExpression()), !dbg !36
    call void @llvm.dbg.value(metadata <32 x half> undef, metadata !31, metadata !DIExpression()), !dbg !35
    call void @llvm.dbg.value(metadata i64 2, metadata !32, metadata !DIExpression()), !dbg !36
    %arrayidx.2 = getelementptr inbounds <16 x float>, <16 x float>* %x0, i64 2, !dbg !37
    %6 = load <16 x float>, <16 x float>* %arrayidx.2, align 64, !dbg !37, !tbaa !40
    %arrayidx2.2 = getelementptr inbounds <16 x float>, <16 x float>* %x1, i64 2, !dbg !43
    %7 = load <16 x float>, <16 x float>* %arrayidx2.2, align 64, !dbg !43, !tbaa !40
    %8 = tail call fast <16 x float> @llvm.x86.avx512fp16.mask.vfcmaddc.ph.512(<16 x float> %5, <16 x float> %6, <16 x float> %7, i16 -1, i32 4) #3, !dbg !44
    call void @llvm.dbg.value(metadata <16 x float> %8, metadata !31, metadata !DIExpression()), !dbg !35
    call void @llvm.dbg.value(metadata i64 3, metadata !32, metadata !DIExpression()), !dbg !36
    call void @llvm.dbg.value(metadata <32 x half> undef, metadata !31, metadata !DIExpression()), !dbg !35
    ret <16 x float> %8, !dbg !45
  }

  ; Function Attrs: nounwind readnone
  declare <16 x float> @llvm.x86.avx512fp16.mask.vfcmaddc.ph.512(<16 x float>, <16 x float>, <16 x float>, i16, i32 immarg) #1

  ; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
  declare void @llvm.dbg.value(metadata, metadata, metadata) #2

  attributes #0 = { nofree nosync nounwind readonly uwtable "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "frame-pointer"="none" "min-legal-vector-width"="512" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="sapphirerapids" "target-features"="+adx,+aes,+amx-bf16,+amx-int8,+amx-tile,+avx,+avx2,+avx512bf16,+avx512bitalg,+avx512bw,+avx512cd,+avx512dq,+avx512f,+avx512fp16,+avx512ifma,+avx512vbmi,+avx512vbmi2,+avx512vl,+avx512vnni,+avx512vp2intersect,+avx512vpopcntdq,+avxvnni,+bmi,+bmi2,+cldemote,+clflushopt,+clwb,+cx16,+cx8,+enqcmd,+f16c,+fma,+fsgsbase,+fxsr,+gfni,+invpcid,+lzcnt,+mmx,+movbe,+movdir64b,+movdiri,+pclmul,+pconfig,+pku,+popcnt,+prfchw,+ptwrite,+rdpid,+rdrnd,+rdseed,+sahf,+serialize,+sgx,+sha,+shstk,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+tsxldtrk,+uintr,+vaes,+vpclmulqdq,+waitpkg,+wbnoinvd,+x87,+xsave,+xsavec,+xsaveopt,+xsaves" "unsafe-fp-math"="true" }
  attributes #1 = { nounwind readnone }
  attributes #2 = { nofree nosync nounwind readnone speculatable willreturn }
  attributes #3 = { nounwind }

  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!18, !19, !20, !21}
  !llvm.ident = !{!22}

  !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang based Intel(R) oneAPI DPC++/C++ Compiler 2021.4.0 (2021.x.0.YYYYMMDD)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, splitDebugInlining: false, nameTableKind: None)
  !1 = !DIFile(filename: "t.c", directory: "/export/users2/yluo29/workspace/xmain_ws3/llvm/llvm")
  !2 = !{}
  !3 = !{!4, !10, !16}
  !4 = !DIDerivedType(tag: DW_TAG_typedef, name: "__m512h", file: !5, line: 21, baseType: !6, align: 512)
  !5 = !DIFile(filename: "deploy/linux_prod/lib/clang/13.0.0/include/avx512fp16intrin.h", directory: "/export/users2/yluo29/workspace/xmain_ws3")
  !6 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 512, flags: DIFlagVector, elements: !8)
  !7 = !DIBasicType(name: "_Float16", size: 16, encoding: DW_ATE_float)
  !8 = !{!9}
  !9 = !DISubrange(count: 32)
  !10 = !DIDerivedType(tag: DW_TAG_typedef, name: "__v16sf", file: !11, line: 19, baseType: !12)
  !11 = !DIFile(filename: "deploy/linux_prod/lib/clang/13.0.0/include/avx512fintrin.h", directory: "/export/users2/yluo29/workspace/xmain_ws3")
  !12 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 512, flags: DIFlagVector, elements: !14)
  !13 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
  !14 = !{!15}
  !15 = !DISubrange(count: 16)
  !16 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mmask16", file: !11, line: 38, baseType: !17)
  !17 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
  !18 = !{i32 7, !"Dwarf Version", i32 4}
  !19 = !{i32 2, !"Debug Info Version", i32 3}
  !20 = !{i32 1, !"wchar_size", i32 4}
  !21 = !{i32 7, !"uwtable", i32 1}
  !22 = !{!"Intel(R) oneAPI DPC++/C++ Compiler 2021.4.0 (2021.x.0.YYYYMMDD)"}
  !23 = distinct !DISubprogram(name: "test_fmaconj_sum", scope: !1, file: !1, line: 4, type: !24, scopeLine: 4, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !28)
  !24 = !DISubroutineType(types: !25)
  !25 = !{!26, !27, !27}
  !26 = !DIDerivedType(tag: DW_TAG_typedef, name: "__m512", file: !11, line: 29, baseType: !12, align: 512)
  !27 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !26, size: 64)
  !28 = !{!29, !30, !31, !32}
  !29 = !DILocalVariable(name: "x0", arg: 1, scope: !23, file: !1, line: 4, type: !27)
  !30 = !DILocalVariable(name: "x1", arg: 2, scope: !23, file: !1, line: 4, type: !27)
  !31 = !DILocalVariable(name: "sum", scope: !23, file: !1, line: 6, type: !4)
  !32 = !DILocalVariable(name: "i", scope: !33, file: !1, line: 7, type: !34)
  !33 = distinct !DILexicalBlock(scope: !23, file: !1, line: 7, column: 3)
  !34 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
  !35 = !DILocation(line: 0, scope: !23)
  !36 = !DILocation(line: 0, scope: !33)
  !37 = !DILocation(line: 8, column: 29, scope: !38)
  !38 = distinct !DILexicalBlock(scope: !39, file: !1, line: 7, column: 31)
  !39 = distinct !DILexicalBlock(scope: !33, file: !1, line: 7, column: 3)
  !40 = !{!41, !41, i64 0}
  !41 = !{!"omnipotent char", !42, i64 0}
  !42 = !{!"Simple C/C++ TBAA"}
  !43 = !DILocation(line: 8, column: 36, scope: !38)
  !44 = !DILocation(line: 8, column: 11, scope: !38)
  !45 = !DILocation(line: 11, column: 3, scope: !23)

...
---
name:            test_fmaconj_sum
alignment:       16
tracksRegLiveness: true
registers:
  - { id: 0, class: gr64 }
  - { id: 1, class: gr64 }
  - { id: 2, class: vr512 }
  - { id: 3, class: vr512 }
  - { id: 4, class: vr512 }
  - { id: 5, class: vr512 }
  - { id: 6, class: vr512 }
  - { id: 7, class: vr512 }
  - { id: 8, class: vr512 }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $rdi, $rsi

    ; CHECK-LABEL: name: test_fmaconj_sum
    ; CHECK: liveins: $rdi, $rsi
    ; CHECK: DBG_VALUE $rdi, $noreg, !29, !DIExpression(), debug-location !35
    ; CHECK: DBG_VALUE $rsi, $noreg, !30, !DIExpression(), debug-location !35
    ; CHECK: [[COPY:%[0-9]+]]:gr64 = COPY $rsi
    ; CHECK: DBG_VALUE [[COPY]], $noreg, !30, !DIExpression(), debug-location !35
    ; CHECK: [[COPY1:%[0-9]+]]:gr64 = COPY $rdi
    ; CHECK: DBG_VALUE [[COPY1]], $noreg, !29, !DIExpression(), debug-location !35
    ; CHECK: DBG_VALUE 0, $noreg, !32, !DIExpression(), debug-location !36
    ; CHECK: DBG_VALUE $noreg, $noreg, !31, !DIExpression(), debug-location !35
    ; CHECK: DBG_VALUE $noreg, $noreg, !31, !DIExpression(), debug-location !35
    ; CHECK: DBG_VALUE 0, $noreg, !32, !DIExpression(), debug-location !36
    ; CHECK: [[AVX512_512_SET0_:%[0-9]+]]:vr512 = AVX512_512_SET0 debug-location !44
    ; CHECK: [[VMOVAPSZrm:%[0-9]+]]:vr512 = VMOVAPSZrm [[COPY1]], 1, $noreg, 0, $noreg, debug-location !37 :: (load (s512) from %ir.x0, !tbaa !40)
    ; CHECK: DBG_VALUE 1, $noreg, !32, !DIExpression(), debug-location !36
    ; CHECK: DBG_VALUE $noreg, $noreg, !31, !DIExpression(), debug-location !35
    ; CHECK: DBG_VALUE 1, $noreg, !32, !DIExpression(), debug-location !36
    ; CHECK: [[VMOVAPSZrm1:%[0-9]+]]:vr512 = VMOVAPSZrm [[COPY1]], 1, $noreg, 64, $noreg, debug-location !37 :: (load (s512) from %ir.arrayidx.1, !tbaa !40)
    ; CHECK: DBG_VALUE 2, $noreg, !32, !DIExpression(), debug-location !36
    ; CHECK: DBG_VALUE $noreg, $noreg, !31, !DIExpression(), debug-location !35
    ; CHECK: DBG_VALUE 2, $noreg, !32, !DIExpression(), debug-location !36
    ; CHECK: [[VMOVAPSZrm2:%[0-9]+]]:vr512 = VMOVAPSZrm [[COPY1]], 1, $noreg, 128, $noreg, debug-location !37 :: (load (s512) from %ir.arrayidx.2, !tbaa !40)
    ; CHECK: early-clobber %6:vr512 = nnan ninf nsz arcp contract afn reassoc VFCMADDCPHZm [[AVX512_512_SET0_]], killed [[VMOVAPSZrm]], [[COPY]], 1, $noreg, 0, $noreg, implicit $mxcsr, debug-location !44 :: (load (s512) from %ir.x1, !tbaa !40)
    ; CHECK: DBG_VALUE %6, $noreg, !31, !DIExpression(), debug-location !35
    ; CHECK: [[AVX512_512_SET0_1:%[0-9]+]]:vr512 = AVX512_512_SET0 debug-location !44
    ; CHECK: early-clobber %7:vr512 = nnan ninf nsz arcp contract afn reassoc VFCMADDCPHZm [[AVX512_512_SET0_1]], killed [[VMOVAPSZrm1]], [[COPY]], 1, $noreg, 64, $noreg, implicit $mxcsr, debug-location !44 :: (load (s512) from %ir.arrayidx2.1, !tbaa !40)
    ; CHECK: DBG_VALUE %7, $noreg, !31, !DIExpression(), debug-location !35
    ; CHECK: early-clobber %8:vr512 = nnan ninf nsz arcp contract afn reassoc VFCMADDCPHZm %6, killed [[VMOVAPSZrm2]], [[COPY]], 1, $noreg, 128, $noreg, implicit $mxcsr, debug-location !44 :: (load (s512) from %ir.arrayidx2.2, !tbaa !40)
    ; CHECK: [[VADDPHZrr:%[0-9]+]]:vr512 = nnan ninf nsz arcp contract afn reassoc VADDPHZrr killed %7, killed %8, implicit $mxcsr, debug-location !44
    ; CHECK: DBG_VALUE [[VADDPHZrr]], $noreg, !31, !DIExpression(), debug-location !35
    ; CHECK: DBG_VALUE 3, $noreg, !32, !DIExpression(), debug-location !36
    ; CHECK: DBG_VALUE $noreg, $noreg, !31, !DIExpression(), debug-location !35
    ; CHECK: $zmm0 = COPY [[VADDPHZrr]], debug-location !45
    ; CHECK: RET 0, $zmm0, debug-location !45
    DBG_VALUE $rdi, $noreg, !29, !DIExpression(), debug-location !35
    DBG_VALUE $rsi, $noreg, !30, !DIExpression(), debug-location !35
    %1:gr64 = COPY $rsi
    DBG_VALUE %1, $noreg, !30, !DIExpression(), debug-location !35
    %0:gr64 = COPY $rdi
    DBG_VALUE %0, $noreg, !29, !DIExpression(), debug-location !35
    DBG_VALUE 0, $noreg, !32, !DIExpression(), debug-location !36
    DBG_VALUE $noreg, $noreg, !31, !DIExpression(), debug-location !35
    DBG_VALUE $noreg, $noreg, !31, !DIExpression(), debug-location !35
    DBG_VALUE 0, $noreg, !32, !DIExpression(), debug-location !36
    %2:vr512 = AVX512_512_SET0 debug-location !44
    %3:vr512 = VMOVAPSZrm %0, 1, $noreg, 0, $noreg, debug-location !37 :: (load 64 from %ir.x0, !tbaa !40)
    DBG_VALUE 1, $noreg, !32, !DIExpression(), debug-location !36
    DBG_VALUE $noreg, $noreg, !31, !DIExpression(), debug-location !35
    DBG_VALUE 1, $noreg, !32, !DIExpression(), debug-location !36
    %4:vr512 = VMOVAPSZrm %0, 1, $noreg, 64, $noreg, debug-location !37 :: (load 64 from %ir.arrayidx.1, !tbaa !40)
    DBG_VALUE 2, $noreg, !32, !DIExpression(), debug-location !36
    DBG_VALUE $noreg, $noreg, !31, !DIExpression(), debug-location !35
    DBG_VALUE 2, $noreg, !32, !DIExpression(), debug-location !36
    %5:vr512 = VMOVAPSZrm %0, 1, $noreg, 128, $noreg, debug-location !37 :: (load 64 from %ir.arrayidx.2, !tbaa !40)
    early-clobber %6:vr512 = nnan ninf nsz arcp contract afn reassoc VFCMADDCPHZm %2, killed %3, %1, 1, $noreg, 0, $noreg, implicit $mxcsr, debug-location !44 :: (load 64 from %ir.x1, !tbaa !40)
    DBG_VALUE %6, $noreg, !31, !DIExpression(), debug-location !35
    early-clobber %7:vr512 = nnan ninf nsz arcp contract afn reassoc VFCMADDCPHZm %6, killed %4, %1, 1, $noreg, 64, $noreg, implicit $mxcsr, debug-location !44 :: (load 64 from %ir.arrayidx2.1, !tbaa !40)
    DBG_VALUE %7, $noreg, !31, !DIExpression(), debug-location !35
    early-clobber %8:vr512 = nnan ninf nsz arcp contract afn reassoc VFCMADDCPHZm %7, killed %5, %1, 1, $noreg, 128, $noreg, implicit $mxcsr, debug-location !44 :: (load 64 from %ir.arrayidx2.2, !tbaa !40)
    DBG_VALUE %8, $noreg, !31, !DIExpression(), debug-location !35
    DBG_VALUE 3, $noreg, !32, !DIExpression(), debug-location !36
    DBG_VALUE $noreg, $noreg, !31, !DIExpression(), debug-location !35
    $zmm0 = COPY %8, debug-location !45
    RET 0, $zmm0, debug-location !45

...
