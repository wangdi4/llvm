; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; REQUIRES: intel_feature_isa_avx_dotprod_phps
; RUN: llc < %s -mtriple=i686-unknown-unknown -mattr=+avxdotprodphps --show-mc-encoding | FileCheck %s --check-prefixes=X86
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avxdotprodphps --show-mc-encoding | FileCheck %s --check-prefixes=X64

declare <4 x float> @llvm.x86.avx2.vdpphps.128(<4 x float>, <4 x float>, <4 x float>)

define <4 x float>@test_int_x86_avx2_vdpphps_128(<4 x float> %x0, <4 x float> %x1, <4 x float> %x2, <4 x float>* %x3p) {
; X86-LABEL: test_int_x86_avx2_vdpphps_128:
; X86:       # %bb.0:
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x04]
; X86-NEXT:    vmovaps %xmm0, %xmm3 # encoding: [0xc5,0xf8,0x28,0xd8]
; X86-NEXT:    vdpphps %xmm2, %xmm1, %xmm3 # encoding: [0xc4,0xe2,0x70,0x52,0xda]
; X86-NEXT:    vdpphps (%eax), %xmm1, %xmm0 # encoding: [0xc4,0xe2,0x70,0x52,0x00]
; X86-NEXT:    vaddps %xmm0, %xmm3, %xmm0 # encoding: [0xc5,0xe0,0x58,0xc0]
; X86-NEXT:    retl # encoding: [0xc3]
;
; X64-LABEL: test_int_x86_avx2_vdpphps_128:
; X64:       # %bb.0:
; X64-NEXT:    vmovaps %xmm0, %xmm3 # encoding: [0xc5,0xf8,0x28,0xd8]
; X64-NEXT:    vdpphps %xmm2, %xmm1, %xmm3 # encoding: [0xc4,0xe2,0x70,0x52,0xda]
; X64-NEXT:    vdpphps (%rdi), %xmm1, %xmm0 # encoding: [0xc4,0xe2,0x70,0x52,0x07]
; X64-NEXT:    vaddps %xmm0, %xmm3, %xmm0 # encoding: [0xc5,0xe0,0x58,0xc0]
; X64-NEXT:    retq # encoding: [0xc3]
  %1 =  call <4 x float> @llvm.x86.avx2.vdpphps.128(<4 x float> %x0, <4 x float> %x1, <4 x float> %x2)
  %res1 = load <4 x float>, <4 x float>* %x3p
  %2 = call <4 x float> @llvm.x86.avx2.vdpphps.128(<4 x float> %x0, <4 x float> %x1, <4 x float> %res1)
  %res2 = fadd <4 x float> %1, %2
  ret <4 x float> %res2
}

declare <8 x float> @llvm.x86.avx2.vdpphps.256(<8 x float>, <8 x float>, <8 x float>)

define <8 x float>@test_int_x86_avx2_vdpphps_256(<8 x float> %x0, <8 x float> %x1, <8 x float> %x2, <8 x float>* %x3p) {
; X86-LABEL: test_int_x86_avx2_vdpphps_256:
; X86:       # %bb.0:
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax # encoding: [0x8b,0x44,0x24,0x04]
; X86-NEXT:    vmovaps %ymm0, %ymm3 # encoding: [0xc5,0xfc,0x28,0xd8]
; X86-NEXT:    vdpphps %ymm2, %ymm1, %ymm3 # encoding: [0xc4,0xe2,0x74,0x52,0xda]
; X86-NEXT:    vdpphps (%eax), %ymm1, %ymm0 # encoding: [0xc4,0xe2,0x74,0x52,0x00]
; X86-NEXT:    vaddps %ymm0, %ymm3, %ymm0 # encoding: [0xc5,0xe4,0x58,0xc0]
; X86-NEXT:    retl # encoding: [0xc3]
;
; X64-LABEL: test_int_x86_avx2_vdpphps_256:
; X64:       # %bb.0:
; X64-NEXT:    vmovaps %ymm0, %ymm3 # encoding: [0xc5,0xfc,0x28,0xd8]
; X64-NEXT:    vdpphps %ymm2, %ymm1, %ymm3 # encoding: [0xc4,0xe2,0x74,0x52,0xda]
; X64-NEXT:    vdpphps (%rdi), %ymm1, %ymm0 # encoding: [0xc4,0xe2,0x74,0x52,0x07]
; X64-NEXT:    vaddps %ymm0, %ymm3, %ymm0 # encoding: [0xc5,0xe4,0x58,0xc0]
; X64-NEXT:    retq # encoding: [0xc3]
  %1 =  call <8 x float> @llvm.x86.avx2.vdpphps.256(<8 x float> %x0, <8 x float> %x1, <8 x float> %x2)
  %res1 = load <8 x float>, <8 x float>* %x3p
  %2 = call <8 x float> @llvm.x86.avx2.vdpphps.256(<8 x float> %x0, <8 x float> %x1, <8 x float> %res1)
  %res2 = fadd <8 x float> %1, %2
  ret <8 x float> %res2
}
