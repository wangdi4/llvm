# RUN: llc -run-pass=intel-mir-optreport-emitter -intel-opt-report-file=stdout -x mir < %s | FileCheck %s

# UNSUPPORTED: system-windows

# In a trickier IPO case with a mix of relative and absolute paths, check that
# the IPO opt-report uses absolute paths

# CHECK: LOOP BEGIN at /home/dwoodwor/opt-report-abs-filename/example/build/../src/iota.c (2, 3)

--- |
  ; ModuleID = 'iota.0.5.precodegen.ll'
  source_filename = "ld-temp.o"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-unknown-linux-gnu"
  
  @.str = constant [12 x i8] c"A[100] = %d\00"
  
  define i32 @main() !dbg !7 {
  entry:
    %A = alloca [2048 x i32], align 16
    br label %loop.14
  
  loop.14:                                          ; preds = %loop.14, %entry
    %i1.i64.0 = phi i64 [ 0, %entry ], [ %nextivloop.14, %loop.14 ]
    %0 = shl nuw nsw i64 %i1.i64.0, 2, !dbg !11
    %scevgep = getelementptr i8, ptr %A, i64 %0, !dbg !11
    %tmp = trunc i64 %i1.i64.0 to i32
    %1 = insertelement <4 x i32> undef, i32 %tmp, i64 0, !dbg !11
    %2 = shufflevector <4 x i32> %1, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !11
    %3 = or <4 x i32> %2, <i32 0, i32 1, i32 2, i32 3>, !dbg !11
    store <4 x i32> %3, ptr %scevgep, align 16, !dbg !11, !tbaa !14
    %nextivloop.14 = add nuw nsw i64 %i1.i64.0, 4, !dbg !18
    %4 = add nsw i64 %nextivloop.14, -4, !dbg !18
    %condloop.14 = icmp ult i64 %4, 2044, !dbg !18
    br i1 %condloop.14, label %loop.14, label %afterloop.14, !dbg !19, !llvm.loop !20
  
  afterloop.14:                                     ; preds = %loop.14
    %arrayidx = getelementptr inbounds [2048 x i32], ptr %A, i64 0, i64 100, !dbg !30, !intel-tbaa !31
    %5 = load i32, ptr %arrayidx, align 16, !dbg !30, !tbaa !31
    %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %5), !dbg !33
    ret i32 0, !dbg !34
  }
  
  declare i32 @printf(ptr, ...)
  
  !llvm.dbg.cu = !{!0, !2}
  !llvm.module.flags = !{!4, !5, !6}
  
  !0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "clang based Intel(R) oneAPI DPC++/C++ Compiler 2024.0.0 (2024.x.0.YYYYMMDD)", isOptimized: true, flags: " --intel -flto=full -O3 -x CORE-AVX512 -qopt-report=2 -mllvm -intel-opt-report-emitter=mir ../src/iota.c /home/dwoodwor/opt-report-abs-filename/example/src/main.c -Wl,-plugin-opt=save-temps -Wl,-plugin-opt=-unroll-partial-threshold=0 -o iota -fveclib=SVML -fheinous-gnu-extensions -dumpdir iota-", runtimeVersion: 0, emissionKind: LineTablesOnly, splitDebugInlining: false, nameTableKind: None)
  !1 = !DIFile(filename: "../src/iota.c", directory: "/home/dwoodwor/opt-report-abs-filename/example/build")
  !2 = distinct !DICompileUnit(language: DW_LANG_C11, file: !3, producer: "clang based Intel(R) oneAPI DPC++/C++ Compiler 2024.0.0 (2024.x.0.YYYYMMDD)", isOptimized: true, flags: " --intel -flto=full -O3 -x CORE-AVX512 -qopt-report=2 -mllvm -intel-opt-report-emitter=mir ../src/iota.c /home/dwoodwor/opt-report-abs-filename/example/src/main.c -Wl,-plugin-opt=save-temps -Wl,-plugin-opt=-unroll-partial-threshold=0 -o iota -fveclib=SVML -fheinous-gnu-extensions -dumpdir iota-", runtimeVersion: 0, emissionKind: LineTablesOnly, splitDebugInlining: false, nameTableKind: None)
  !3 = !DIFile(filename: "/home/dwoodwor/opt-report-abs-filename/example/src/main.c", directory: "/home/dwoodwor/opt-report-abs-filename/example/build")
  !4 = !{i32 2, !"Debug Info Version", i32 3}
  !5 = !{i32 1, !"ThinLTO", i32 0}
  !6 = !{i32 1, !"EnableSplitLTOUnit", i32 1}
  !7 = distinct !DISubprogram(name: "main", scope: !8, file: !8, line: 5, type: !9, scopeLine: 5, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
  !8 = !DIFile(filename: "src/main.c", directory: "/home/dwoodwor/opt-report-abs-filename/example")
  !9 = !DISubroutineType(types: !10)
  !10 = !{}
  !11 = !DILocation(line: 3, column: 10, scope: !12, inlinedAt: !13)
  !12 = distinct !DISubprogram(name: "iota", scope: !1, file: !1, line: 1, type: !9, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
  !13 = distinct !DILocation(line: 7, column: 3, scope: !7)
  !14 = !{!15, !15, i64 0}
  !15 = !{!"int", !16, i64 0}
  !16 = !{!"omnipotent char", !17, i64 0}
  !17 = !{!"Simple C/C++ TBAA"}
  !18 = !DILocation(line: 2, column: 21, scope: !12, inlinedAt: !13)
  !19 = !DILocation(line: 2, column: 3, scope: !12, inlinedAt: !13)
  !20 = distinct !{!20, !19, !21, !22, !23, !24, !25}
  !21 = !DILocation(line: 3, column: 12, scope: !12, inlinedAt: !13)
  !22 = !{!"llvm.loop.mustprogress"}
  !23 = !{!"llvm.loop.vectorize.width", i32 1}
  !24 = !{!"llvm.loop.interleave.count", i32 1}
  !25 = distinct !{!"intel.optreport.rootnode", !26}
  !26 = distinct !{!"intel.optreport", !27}
  !27 = !{!"intel.optreport.remarks", !28, !29}
  !28 = !{!"intel.optreport.remark", i32 15300, !"LOOP WAS VECTORIZED"}
  !29 = !{!"intel.optreport.remark", i32 15305, !"vectorization support: vector length %s", !"4"}
  !30 = !DILocation(line: 8, column: 25, scope: !7)
  !31 = !{!32, !15, i64 0}
  !32 = !{!"array@_ZTSA2048_i", !15, i64 0}
  !33 = !DILocation(line: 8, column: 3, scope: !7)
  !34 = !DILocation(line: 9, column: 1, scope: !7)

...
---
name:            main
tracksRegLiveness: true
debugInstrRef:   true
tracksDebugUserValues: true
stack:
  - { id: 0, name: A, offset: -8208, size: 8192, alignment: 16 }
constants:
  - id:              0
    value:           '<4 x i32> <i32 0, i32 1, i32 2, i32 3>'
    alignment:       16
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    $rsp = frame-setup SUB64ri32 $rsp, 8200, implicit-def dead $eflags
    frame-setup CFI_INSTRUCTION def_cfa_offset 8208
    renamable $eax = XOR32rr undef $eax, undef $eax, implicit-def dead $eflags, implicit-def $rax
    renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg
  
  bb.1.loop.14 (align 16):
    successors: %bb.1, %bb.2
    liveins: $rax, $xmm0
  
    renamable $xmm1 = MOVDI2PDIrr renamable $eax, debug-location !11
    renamable $xmm1 = PSHUFDri killed renamable $xmm1, 0, debug-location !11
    renamable $xmm1 = PORrr killed renamable $xmm1, renamable $xmm0, debug-location !11
    MOVDQAmr $rsp, 4, renamable $rax, 0, $noreg, killed renamable $xmm1, debug-location !11
    CMP64ri32 renamable $rax, 2044, implicit-def $eflags, debug-location !18
    renamable $rax = LEA64r killed renamable $rax, 1, $noreg, 4, $noreg, debug-location !18
    JCC_1 %bb.1, 2, implicit killed $eflags, debug-location !19
  
  bb.2.afterloop.14:
    renamable $esi = MOV32rm $rsp, 1, $noreg, 400, $noreg, debug-location !30
    renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @.str, $noreg, debug-location !33
    dead $eax = XOR32rr undef $eax, undef $eax, implicit-def dead $eflags, implicit-def $al, debug-location !33
    CALL64pcrel32 target-flags(x86-plt) @printf, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax, debug-location !33
    $eax = XOR32rr undef $eax, undef $eax, implicit-def dead $eflags, debug-location !34
    $rsp = frame-destroy ADD64ri32 $rsp, 8200, implicit-def dead $eflags, debug-location !34
    frame-destroy CFI_INSTRUCTION def_cfa_offset 8, debug-location !34
    RET64 $eax, debug-location !34

...
