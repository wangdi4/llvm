; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py
; RUN: opt < %s -mtriple=x86_64-apple-darwin -cost-model -analyze -mattr=+sse4.2 | FileCheck %s --check-prefixes=X86_64-SSE
; RUN: opt < %s -mtriple=x86_64-apple-darwin -cost-model -analyze -mattr=+avx2 | FileCheck %s --check-prefixes=X86_64-AVX2
; RUN: opt < %s -mtriple=x86_64-apple-darwin -cost-model -analyze -mattr=+avx512f,+avx512dq,,+avx512bw,+avx512vl | FileCheck %s --check-prefixes=X86_64-AVX512-VL-BW

define i32 @inttoptr() {
; X86_64-SSE-LABEL: 'inttoptr'
; X86_64-SSE-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %V3i8 = inttoptr <3 x i64> undef to <3 x i8*>
; X86_64-SSE-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %V7i8 = inttoptr <7 x i64> undef to <7 x i8*>
; X86_64-SSE-NEXT:  Cost Model: Found an estimated cost of 8 for instruction: %V9i8 = inttoptr <9 x i64> undef to <9 x i8*>
; X86_64-SSE-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: ret i32 undef
;
; X86_64-AVX2-LABEL: 'inttoptr'
; X86_64-AVX2-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %V3i8 = inttoptr <3 x i64> undef to <3 x i8*>
; X86_64-AVX2-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %V7i8 = inttoptr <7 x i64> undef to <7 x i8*>
; X86_64-AVX2-NEXT:  Cost Model: Found an estimated cost of 4 for instruction: %V9i8 = inttoptr <9 x i64> undef to <9 x i8*>
; X86_64-AVX2-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: ret i32 undef
;
; X86_64-AVX512-VL-BW-LABEL: 'inttoptr'
; X86_64-AVX512-VL-BW-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %V3i8 = inttoptr <3 x i64> undef to <3 x i8*>
; X86_64-AVX512-VL-BW-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %V7i8 = inttoptr <7 x i64> undef to <7 x i8*>
; X86_64-AVX512-VL-BW-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %V9i8 = inttoptr <9 x i64> undef to <9 x i8*>
; X86_64-AVX512-VL-BW-NEXT:  Cost Model: Found an estimated cost of 0 for instruction: ret i32 undef
;
  %V3i8 = inttoptr <3 x i64> undef to <3 x i8*>
  %V7i8 = inttoptr <7 x i64> undef to <7 x i8*>
  %V9i8 = inttoptr <9 x i64> undef to <9 x i8*>

  ret i32 undef
}
