; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S -passes=indvars < %s | FileCheck %s

; This test makes sure that the customized code for loop header recursions in
; SCEV adds to both ValueExprMap and ExprValueMap. The indvars optimization pass
; is used, since it will cause the offending PHI to be deleted, and will attempt
; to delete from both maps, while it is not present in the second.
declare dso_local i32 @d(i32) local_unnamed_addr

; Function Attrs: nounwind uwtable
define dso_local i32 @a() local_unnamed_addr {
; CHECK-LABEL: @a(
; CHECK-NEXT:  for.body.thread:
; CHECK-NEXT:    br label [[SW_BB:%.*]]
; CHECK:       sw.bb:
; CHECK-NEXT:    br i1 false, label [[SW_BB]], label [[FOR_END:%.*]]
; CHECK:       for.end:
; CHECK-NEXT:    [[CALL:%.*]] = tail call i32 @d(i32 noundef undef)
; CHECK-NEXT:    ret i32 undef
;
for.body.thread:
  br label %sw.bb

sw.bb:                                            ; preds = %sw.bb, %for.body.thread
  %c.010 = phi i32 [ undef, %for.body.thread ], [ %inc, %sw.bb ]
  %cmp = phi i1 [ true, %for.body.thread ], [ false, %sw.bb ]
  %inc = add i32 %c.010, 1
  br i1 %cmp, label %sw.bb, label %for.end

for.end:                                          ; preds = %sw.bb
  %inc.lcssa = phi i32 [ %inc, %sw.bb ]
  %call = tail call i32 @d(i32 noundef %inc.lcssa)
  ret i32 undef
}
