; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py UTC_ARGS: --version 2
; RUN: opt < %s -disable-output -passes="print<scalar-evolution>" 2>&1 | FileCheck %s

; Caused a crash in SCEV complexity sorting.
; The private global cannot be compared with the externals, and was considered
; "equal", causing the externals to be compared inconsistently with each
; other.

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@global = external constant [6 x i8]
@global.1 = external constant [4 x i8]
@global.2 = private constant [4 x i8] c"foo\00"

define i32 @widget() {
; CHECK-LABEL: 'widget'
; CHECK-NEXT:  Classifying expressions for: @widget
; CHECK-NEXT:    %call = call i32 null(ptr @global, ptr null, ptr @baz)
; CHECK-NEXT:    --> %call U: full-set S: full-set
; CHECK-NEXT:    %call1 = call i32 null(ptr @global.1, ptr @snork, ptr null)
; CHECK-NEXT:    --> %call1 U: full-set S: full-set
; CHECK-NEXT:    %call2 = call i32 null(ptr null, ptr null, ptr null)
; CHECK-NEXT:    --> %call2 U: full-set S: full-set
; CHECK-NEXT:    %call3 = call i32 null(ptr null, ptr null, ptr null)
; CHECK-NEXT:    --> %call3 U: full-set S: full-set
; CHECK-NEXT:    %call4 = call i32 null(ptr @global.2, ptr null, ptr null)
; CHECK-NEXT:    --> %call4 U: full-set S: full-set
; CHECK-NEXT:    %add = add i32 %call, %call1
; CHECK-NEXT:    --> (%call + %call1) U: full-set S: full-set
; CHECK-NEXT:    %add5 = add i32 %add, %call2
; CHECK-NEXT:    --> (%call + %call1 + %call2) U: full-set S: full-set
; CHECK-NEXT:    %add6 = add i32 %add5, %call3
; CHECK-NEXT:    --> (%call + %call1 + %call3 + %call2) U: full-set S: full-set
; CHECK-NEXT:    %add7 = add i32 %add6, %call4
; CHECK-NEXT:    --> (%call + %call1 + %call4 + %call3 + %call2) U: full-set S: full-set
; CHECK-NEXT:  Determining loop execution counts for: @widget
;
bb:
  %call = call i32 null(ptr @global, ptr null, ptr @baz)
  %call1 = call i32 null(ptr @global.1, ptr @snork, ptr null)
  %call2 = call i32 null(ptr null, ptr null, ptr null)
  %call3 = call i32 null(ptr null, ptr null, ptr null)
  %call4 = call i32 null(ptr @global.2, ptr null, ptr null)
  %add = add i32 %call, %call1
  %add5 = add i32 %add, %call2
  %add6 = add i32 %add5, %call3
  %add7 = add i32 %add6, %call4
  ret i32 0
}

declare double @baz()

declare void @snork()
