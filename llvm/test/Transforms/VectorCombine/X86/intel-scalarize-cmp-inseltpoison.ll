; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --force-update
; RUN: opt -passes="vector-combine" < %s -S -mtriple=x86_64-- -mcpu=skylake-avx512 | FileCheck %s

define void @undo_canonicalization_0(<16 x i1> %msk, i32* %in_ptr, <16 x i1>* %dst) {
; CHECK-LABEL: @undo_canonicalization_0(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[IN:%.*]] = load i32, i32* [[IN_PTR:%.*]], align 4
; CHECK-NEXT:    [[DOTSCALAR:%.*]] = icmp eq i32 [[IN]], 0
; CHECK-NEXT:    [[TMP0:%.*]] = insertelement <16 x i1> undef, i1 [[DOTSCALAR]], i64 0
; CHECK-NEXT:    [[CMP1:%.*]] = shufflevector <16 x i1> [[TMP0]], <16 x i1> poison, <16 x i32> zeroinitializer
; CHECK-NEXT:    [[AND:%.*]] = and <16 x i1> [[CMP1]], [[MSK:%.*]]
; CHECK-NEXT:    [[BC:%.*]] = bitcast <16 x i1> [[AND]] to i16
; CHECK-NEXT:    [[CMP_NOT:%.*]] = icmp eq i16 [[BC]], 0
; CHECK-NEXT:    br i1 [[CMP_NOT]], label [[B2:%.*]], label [[B1:%.*]]
; CHECK:       b1:
; CHECK-NEXT:    store <16 x i1> [[AND]], <16 x i1>* [[DST:%.*]], align 8
; CHECK-NEXT:    ret void
; CHECK:       b2:
; CHECK-NEXT:    store <16 x i1> [[CMP1]], <16 x i1>* [[DST]], align 8
; CHECK-NEXT:    ret void
;
entry:
  %in = load i32, i32* %in_ptr
  %insrt = insertelement <16 x i32> undef, i32 %in, i32 0
  %0 = icmp eq <16 x i32> %insrt, zeroinitializer
  %cmp1 = shufflevector <16 x i1> %0, <16 x i1> poison, <16 x i32> zeroinitializer
  %and = and <16 x i1> %cmp1, %msk
  %bc = bitcast <16 x i1> %and to i16
  %cmp.not = icmp eq i16 %bc, 0
  br i1 %cmp.not, label %b2, label %b1
b1:
  store <16 x i1> %and, <16 x i1>* %dst, align 8
  ret void
b2:
  store <16 x i1> %cmp1, <16 x i1>* %dst, align 8
  ret void
}

define void @undo_canonicalization_1(<16 x i1> %msk, i32* %in_ptr, <16 x i1>* %dst) {
; CHECK-LABEL: @undo_canonicalization_1(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[IN:%.*]] = load i32, i32* [[IN_PTR:%.*]], align 4
; CHECK-NEXT:    [[MUL_SCALAR:%.*]] = mul i32 [[IN]], 789
; CHECK-NEXT:    [[DOTSCALAR:%.*]] = icmp eq i32 [[MUL_SCALAR]], 0
; CHECK-NEXT:    [[TMP0:%.*]] = insertelement <16 x i1> undef, i1 [[DOTSCALAR]], i64 0
; CHECK-NEXT:    [[CMP1:%.*]] = shufflevector <16 x i1> [[TMP0]], <16 x i1> poison, <16 x i32> zeroinitializer
; CHECK-NEXT:    [[AND:%.*]] = and <16 x i1> [[CMP1]], [[MSK:%.*]]
; CHECK-NEXT:    [[BC:%.*]] = bitcast <16 x i1> [[AND]] to i16
; CHECK-NEXT:    [[CMP_NOT:%.*]] = icmp eq i16 [[BC]], 0
; CHECK-NEXT:    br i1 [[CMP_NOT]], label [[B2:%.*]], label [[B1:%.*]]
; CHECK:       b1:
; CHECK-NEXT:    store <16 x i1> [[AND]], <16 x i1>* [[DST:%.*]], align 8
; CHECK-NEXT:    ret void
; CHECK:       b2:
; CHECK-NEXT:    store <16 x i1> [[CMP1]], <16 x i1>* [[DST]], align 8
; CHECK-NEXT:    ret void
;
entry:
  %in = load i32, i32* %in_ptr
  %insrt = insertelement <16 x i32> undef, i32 %in, i32 0
  %mul = mul <16 x i32> %insrt, <i32 789, i32 789, i32 789, i32 789, i32 789, i32 789, i32 789, i32 789, i32 789, i32 789, i32 789, i32 789, i32 789, i32 789, i32 789, i32 789>
  %0 = icmp eq <16 x i32> %mul, zeroinitializer
  %cmp1 = shufflevector <16 x i1> %0, <16 x i1> poison, <16 x i32> zeroinitializer
  %and = and <16 x i1> %cmp1, %msk
  %bc = bitcast <16 x i1> %and to i16
  %cmp.not = icmp eq i16 %bc, 0
  br i1 %cmp.not, label %b2, label %b1
b1:
  store <16 x i1> %and, <16 x i1>* %dst, align 8
  ret void
b2:
  store <16 x i1> %cmp1, <16 x i1>* %dst, align 8
  ret void
}

