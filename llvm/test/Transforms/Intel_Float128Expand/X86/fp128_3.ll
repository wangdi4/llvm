; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt %s -enable-new-pm=0 -S -mtriple=x86_64-unknown-unknown -float128-expand -intel-libirc-allowed | FileCheck %s

define <2 x fp128> @test_fadd(<2 x fp128> %x, <2 x fp128> %y) {
; CHECK-LABEL: @test_fadd(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP5:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP6:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP7:%.*]] = extractelement <2 x fp128> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <2 x fp128> [[Y:%.*]], i64 0
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast fp128* [[TMP6]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP9]])
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast fp128* [[TMP5]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP10]])
; CHECK-NEXT:    store fp128 [[TMP7]], fp128* [[TMP5]], align 16
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    store fp128 [[TMP8]], fp128* [[TMP4]], align 16
; CHECK-NEXT:    call void @__addq(fp128* [[TMP6]], fp128* [[TMP5]], fp128* [[TMP4]])
; CHECK-NEXT:    [[TMP12:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP12]])
; CHECK-NEXT:    [[TMP13:%.*]] = bitcast fp128* [[TMP5]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP13]])
; CHECK-NEXT:    [[TMP14:%.*]] = load fp128, fp128* [[TMP6]], align 16
; CHECK-NEXT:    [[TMP15:%.*]] = bitcast fp128* [[TMP6]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP15]])
; CHECK-NEXT:    [[TMP16:%.*]] = insertelement <2 x fp128> undef, fp128 [[TMP14]], i64 0
; CHECK-NEXT:    [[TMP17:%.*]] = extractelement <2 x fp128> [[X]], i64 1
; CHECK-NEXT:    [[TMP18:%.*]] = extractelement <2 x fp128> [[Y]], i64 1
; CHECK-NEXT:    [[TMP19:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP19]])
; CHECK-NEXT:    [[TMP20:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP20]])
; CHECK-NEXT:    store fp128 [[TMP17]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP21:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP21]])
; CHECK-NEXT:    store fp128 [[TMP18]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    call void @__addq(fp128* [[TMP3]], fp128* [[TMP2]], fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP22:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP22]])
; CHECK-NEXT:    [[TMP23:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP23]])
; CHECK-NEXT:    [[TMP24:%.*]] = load fp128, fp128* [[TMP3]], align 16
; CHECK-NEXT:    [[TMP25:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP25]])
; CHECK-NEXT:    [[TMP26:%.*]] = insertelement <2 x fp128> [[TMP16]], fp128 [[TMP24]], i64 1
; CHECK-NEXT:    [[A:%.*]] = fadd <2 x fp128> [[X]], [[Y]]
; CHECK-NEXT:    ret <2 x fp128> [[TMP26]]
;
  %a = fadd <2 x fp128> %x, %y
  ret <2 x fp128> %a
}

define <2 x fp128> @test_fsub(<2 x fp128> %x, <2 x fp128> %y) {
; CHECK-LABEL: @test_fsub(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP5:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP6:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP7:%.*]] = extractelement <2 x fp128> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <2 x fp128> [[Y:%.*]], i64 0
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast fp128* [[TMP6]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP9]])
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast fp128* [[TMP5]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP10]])
; CHECK-NEXT:    store fp128 [[TMP7]], fp128* [[TMP5]], align 16
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    store fp128 [[TMP8]], fp128* [[TMP4]], align 16
; CHECK-NEXT:    call void @__subq(fp128* [[TMP6]], fp128* [[TMP5]], fp128* [[TMP4]])
; CHECK-NEXT:    [[TMP12:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP12]])
; CHECK-NEXT:    [[TMP13:%.*]] = bitcast fp128* [[TMP5]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP13]])
; CHECK-NEXT:    [[TMP14:%.*]] = load fp128, fp128* [[TMP6]], align 16
; CHECK-NEXT:    [[TMP15:%.*]] = bitcast fp128* [[TMP6]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP15]])
; CHECK-NEXT:    [[TMP16:%.*]] = insertelement <2 x fp128> undef, fp128 [[TMP14]], i64 0
; CHECK-NEXT:    [[TMP17:%.*]] = extractelement <2 x fp128> [[X]], i64 1
; CHECK-NEXT:    [[TMP18:%.*]] = extractelement <2 x fp128> [[Y]], i64 1
; CHECK-NEXT:    [[TMP19:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP19]])
; CHECK-NEXT:    [[TMP20:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP20]])
; CHECK-NEXT:    store fp128 [[TMP17]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP21:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP21]])
; CHECK-NEXT:    store fp128 [[TMP18]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    call void @__subq(fp128* [[TMP3]], fp128* [[TMP2]], fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP22:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP22]])
; CHECK-NEXT:    [[TMP23:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP23]])
; CHECK-NEXT:    [[TMP24:%.*]] = load fp128, fp128* [[TMP3]], align 16
; CHECK-NEXT:    [[TMP25:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP25]])
; CHECK-NEXT:    [[TMP26:%.*]] = insertelement <2 x fp128> [[TMP16]], fp128 [[TMP24]], i64 1
; CHECK-NEXT:    [[A:%.*]] = fsub <2 x fp128> [[X]], [[Y]]
; CHECK-NEXT:    ret <2 x fp128> [[TMP26]]
;
  %a = fsub <2 x fp128> %x, %y
  ret <2 x fp128> %a
}

define <2 x fp128> @test_fmul(<2 x fp128> %x, <2 x fp128> %y) {
; CHECK-LABEL: @test_fmul(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP5:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP6:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP7:%.*]] = extractelement <2 x fp128> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <2 x fp128> [[Y:%.*]], i64 0
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast fp128* [[TMP6]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP9]])
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast fp128* [[TMP5]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP10]])
; CHECK-NEXT:    store fp128 [[TMP7]], fp128* [[TMP5]], align 16
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    store fp128 [[TMP8]], fp128* [[TMP4]], align 16
; CHECK-NEXT:    call void @__mulq(fp128* [[TMP6]], fp128* [[TMP5]], fp128* [[TMP4]])
; CHECK-NEXT:    [[TMP12:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP12]])
; CHECK-NEXT:    [[TMP13:%.*]] = bitcast fp128* [[TMP5]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP13]])
; CHECK-NEXT:    [[TMP14:%.*]] = load fp128, fp128* [[TMP6]], align 16
; CHECK-NEXT:    [[TMP15:%.*]] = bitcast fp128* [[TMP6]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP15]])
; CHECK-NEXT:    [[TMP16:%.*]] = insertelement <2 x fp128> undef, fp128 [[TMP14]], i64 0
; CHECK-NEXT:    [[TMP17:%.*]] = extractelement <2 x fp128> [[X]], i64 1
; CHECK-NEXT:    [[TMP18:%.*]] = extractelement <2 x fp128> [[Y]], i64 1
; CHECK-NEXT:    [[TMP19:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP19]])
; CHECK-NEXT:    [[TMP20:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP20]])
; CHECK-NEXT:    store fp128 [[TMP17]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP21:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP21]])
; CHECK-NEXT:    store fp128 [[TMP18]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    call void @__mulq(fp128* [[TMP3]], fp128* [[TMP2]], fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP22:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP22]])
; CHECK-NEXT:    [[TMP23:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP23]])
; CHECK-NEXT:    [[TMP24:%.*]] = load fp128, fp128* [[TMP3]], align 16
; CHECK-NEXT:    [[TMP25:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP25]])
; CHECK-NEXT:    [[TMP26:%.*]] = insertelement <2 x fp128> [[TMP16]], fp128 [[TMP24]], i64 1
; CHECK-NEXT:    [[A:%.*]] = fmul <2 x fp128> [[X]], [[Y]]
; CHECK-NEXT:    ret <2 x fp128> [[TMP26]]
;
  %a = fmul <2 x fp128> %x, %y
  ret <2 x fp128> %a
}

define <2 x fp128> @test_fneg(<2 x fp128> %x) {
; CHECK-LABEL: @test_fneg(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP5:%.*]] = extractelement <2 x fp128> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    store fp128 [[TMP5]], fp128* [[TMP3]], align 16
; CHECK-NEXT:    call void @__negq(fp128* [[TMP4]], fp128* [[TMP3]])
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP8]])
; CHECK-NEXT:    [[TMP9:%.*]] = load fp128, fp128* [[TMP4]], align 16
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP10]])
; CHECK-NEXT:    [[TMP11:%.*]] = insertelement <2 x fp128> undef, fp128 [[TMP9]], i64 0
; CHECK-NEXT:    [[TMP12:%.*]] = extractelement <2 x fp128> [[X]], i64 1
; CHECK-NEXT:    [[TMP13:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP13]])
; CHECK-NEXT:    [[TMP14:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP14]])
; CHECK-NEXT:    store fp128 [[TMP12]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    call void @__negq(fp128* [[TMP2]], fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP15:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP15]])
; CHECK-NEXT:    [[TMP16:%.*]] = load fp128, fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP17:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP17]])
; CHECK-NEXT:    [[TMP18:%.*]] = insertelement <2 x fp128> [[TMP11]], fp128 [[TMP16]], i64 1
; CHECK-NEXT:    [[A:%.*]] = fneg <2 x fp128> [[X]]
; CHECK-NEXT:    ret <2 x fp128> [[TMP18]]
;
  %a = fneg <2 x fp128> %x
  ret <2 x fp128> %a
}

define <2 x fp128> @test_fneg_idiom(<2 x fp128> %x) {
; CHECK-LABEL: @test_fneg_idiom(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP5:%.*]] = extractelement <2 x fp128> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    store fp128 [[TMP5]], fp128* [[TMP3]], align 16
; CHECK-NEXT:    call void @__negq(fp128* [[TMP4]], fp128* [[TMP3]])
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP8]])
; CHECK-NEXT:    [[TMP9:%.*]] = load fp128, fp128* [[TMP4]], align 16
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP10]])
; CHECK-NEXT:    [[TMP11:%.*]] = insertelement <2 x fp128> undef, fp128 [[TMP9]], i64 0
; CHECK-NEXT:    [[TMP12:%.*]] = extractelement <2 x fp128> [[X]], i64 1
; CHECK-NEXT:    [[TMP13:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP13]])
; CHECK-NEXT:    [[TMP14:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP14]])
; CHECK-NEXT:    store fp128 [[TMP12]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    call void @__negq(fp128* [[TMP2]], fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP15:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP15]])
; CHECK-NEXT:    [[TMP16:%.*]] = load fp128, fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP17:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP17]])
; CHECK-NEXT:    [[TMP18:%.*]] = insertelement <2 x fp128> [[TMP11]], fp128 [[TMP16]], i64 1
; CHECK-NEXT:    [[A:%.*]] = fsub <2 x fp128> <fp128 0xL00000000000000008000000000000000, fp128 0xL00000000000000008000000000000000>, [[X]]
; CHECK-NEXT:    ret <2 x fp128> [[TMP18]]
;
  %a = fsub <2 x fp128> <fp128 0xL00000000000000008000000000000000, fp128 0xL00000000000000008000000000000000>, %x
  ret <2 x fp128> %a
}

define <2 x float> @test_fptrunc_float(<2 x fp128> %x) {
; CHECK-LABEL: @test_fptrunc_float(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = extractelement <2 x fp128> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    store fp128 [[TMP3]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP5:%.*]] = call float @__qtof(fp128* [[TMP2]])
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = insertelement <2 x float> undef, float [[TMP5]], i64 0
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <2 x fp128> [[X]], i64 1
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP9]])
; CHECK-NEXT:    store fp128 [[TMP8]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP10:%.*]] = call float @__qtof(fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = insertelement <2 x float> [[TMP7]], float [[TMP10]], i64 1
; CHECK-NEXT:    [[A:%.*]] = fptrunc <2 x fp128> [[X]] to <2 x float>
; CHECK-NEXT:    ret <2 x float> [[TMP12]]
;
  %a = fptrunc <2 x fp128> %x to <2 x float>
  ret <2 x float> %a
}

define <2 x double> @test_fptrunc_double(<2 x fp128> %x) {
; CHECK-LABEL: @test_fptrunc_double(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = extractelement <2 x fp128> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    store fp128 [[TMP3]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP5:%.*]] = call double @__qtod(fp128* [[TMP2]])
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = insertelement <2 x double> undef, double [[TMP5]], i64 0
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <2 x fp128> [[X]], i64 1
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP9]])
; CHECK-NEXT:    store fp128 [[TMP8]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP10:%.*]] = call double @__qtod(fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = insertelement <2 x double> [[TMP7]], double [[TMP10]], i64 1
; CHECK-NEXT:    [[A:%.*]] = fptrunc <2 x fp128> [[X]] to <2 x double>
; CHECK-NEXT:    ret <2 x double> [[TMP12]]
;
  %a = fptrunc <2 x fp128> %x to <2 x double>
  ret <2 x double> %a
}

define <2 x x86_fp80> @test_fptrunc_fp80(<2 x fp128> %x) {
; CHECK-LABEL: @test_fptrunc_fp80(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = extractelement <2 x fp128> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    store fp128 [[TMP3]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP5:%.*]] = call x86_fp80 @__qtol(fp128* [[TMP2]])
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = insertelement <2 x x86_fp80> undef, x86_fp80 [[TMP5]], i64 0
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <2 x fp128> [[X]], i64 1
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP9]])
; CHECK-NEXT:    store fp128 [[TMP8]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP10:%.*]] = call x86_fp80 @__qtol(fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = insertelement <2 x x86_fp80> [[TMP7]], x86_fp80 [[TMP10]], i64 1
; CHECK-NEXT:    [[A:%.*]] = fptrunc <2 x fp128> [[X]] to <2 x x86_fp80>
; CHECK-NEXT:    ret <2 x x86_fp80> [[TMP12]]
;
  %a = fptrunc <2 x fp128> %x to <2 x x86_fp80>
  ret <2 x x86_fp80> %a
}

define <2 x fp128> @test_fpext_float(<2 x float> %x) {
; CHECK-LABEL: @test_fpext_float(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = extractelement <2 x float> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    call void @__ftoq(fp128* [[TMP2]], float [[TMP3]])
; CHECK-NEXT:    [[TMP5:%.*]] = load fp128, fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = insertelement <2 x fp128> undef, fp128 [[TMP5]], i64 0
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <2 x float> [[X]], i64 1
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP9]])
; CHECK-NEXT:    call void @__ftoq(fp128* [[TMP1]], float [[TMP8]])
; CHECK-NEXT:    [[TMP10:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = insertelement <2 x fp128> [[TMP7]], fp128 [[TMP10]], i64 1
; CHECK-NEXT:    [[A:%.*]] = fpext <2 x float> [[X]] to <2 x fp128>
; CHECK-NEXT:    ret <2 x fp128> [[TMP12]]
;
  %a = fpext <2 x float> %x to <2 x fp128>
  ret <2 x fp128> %a
}

define <2 x fp128> @test_fpext_double(<2 x double> %x) {
; CHECK-LABEL: @test_fpext_double(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = extractelement <2 x double> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    call void @__dtoq(fp128* [[TMP2]], double [[TMP3]])
; CHECK-NEXT:    [[TMP5:%.*]] = load fp128, fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = insertelement <2 x fp128> undef, fp128 [[TMP5]], i64 0
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <2 x double> [[X]], i64 1
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP9]])
; CHECK-NEXT:    call void @__dtoq(fp128* [[TMP1]], double [[TMP8]])
; CHECK-NEXT:    [[TMP10:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = insertelement <2 x fp128> [[TMP7]], fp128 [[TMP10]], i64 1
; CHECK-NEXT:    [[A:%.*]] = fpext <2 x double> [[X]] to <2 x fp128>
; CHECK-NEXT:    ret <2 x fp128> [[TMP12]]
;
  %a = fpext <2 x double> %x to <2 x fp128>
  ret <2 x fp128> %a
}

define <2 x fp128> @test_fpext_fp80(<2 x x86_fp80> %x) {
; CHECK-LABEL: @test_fpext_fp80(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = extractelement <2 x x86_fp80> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    call void @__ltoq(fp128* [[TMP2]], x86_fp80 [[TMP3]])
; CHECK-NEXT:    [[TMP5:%.*]] = load fp128, fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = insertelement <2 x fp128> undef, fp128 [[TMP5]], i64 0
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <2 x x86_fp80> [[X]], i64 1
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP9]])
; CHECK-NEXT:    call void @__ltoq(fp128* [[TMP1]], x86_fp80 [[TMP8]])
; CHECK-NEXT:    [[TMP10:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = insertelement <2 x fp128> [[TMP7]], fp128 [[TMP10]], i64 1
; CHECK-NEXT:    [[A:%.*]] = fpext <2 x x86_fp80> [[X]] to <2 x fp128>
; CHECK-NEXT:    ret <2 x fp128> [[TMP12]]
;
  %a = fpext <2 x x86_fp80> %x to <2 x fp128>
  ret <2 x fp128> %a
}

define <2 x fp128> @test_sitofp_i8(<2 x i8> %x) {
; CHECK-LABEL: @test_sitofp_i8(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = extractelement <2 x i8> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = sext i8 [[TMP3]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP5]])
; CHECK-NEXT:    call void @__itoq(fp128* [[TMP2]], i32 [[TMP4]])
; CHECK-NEXT:    [[TMP6:%.*]] = load fp128, fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    [[TMP8:%.*]] = insertelement <2 x fp128> undef, fp128 [[TMP6]], i64 0
; CHECK-NEXT:    [[TMP9:%.*]] = extractelement <2 x i8> [[X]], i64 1
; CHECK-NEXT:    [[TMP10:%.*]] = sext i8 [[TMP9]] to i32
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    call void @__itoq(fp128* [[TMP1]], i32 [[TMP10]])
; CHECK-NEXT:    [[TMP12:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP13:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP13]])
; CHECK-NEXT:    [[TMP14:%.*]] = insertelement <2 x fp128> [[TMP8]], fp128 [[TMP12]], i64 1
; CHECK-NEXT:    [[A:%.*]] = sitofp <2 x i8> [[X]] to <2 x fp128>
; CHECK-NEXT:    ret <2 x fp128> [[TMP14]]
;
  %a = sitofp <2 x i8> %x to <2 x fp128>
  ret <2 x fp128> %a
}

define <2 x fp128> @test_sitofp_i16(<2 x i16> %x) {
; CHECK-LABEL: @test_sitofp_i16(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = extractelement <2 x i16> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = sext i16 [[TMP3]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP5]])
; CHECK-NEXT:    call void @__itoq(fp128* [[TMP2]], i32 [[TMP4]])
; CHECK-NEXT:    [[TMP6:%.*]] = load fp128, fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    [[TMP8:%.*]] = insertelement <2 x fp128> undef, fp128 [[TMP6]], i64 0
; CHECK-NEXT:    [[TMP9:%.*]] = extractelement <2 x i16> [[X]], i64 1
; CHECK-NEXT:    [[TMP10:%.*]] = sext i16 [[TMP9]] to i32
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    call void @__itoq(fp128* [[TMP1]], i32 [[TMP10]])
; CHECK-NEXT:    [[TMP12:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP13:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP13]])
; CHECK-NEXT:    [[TMP14:%.*]] = insertelement <2 x fp128> [[TMP8]], fp128 [[TMP12]], i64 1
; CHECK-NEXT:    [[A:%.*]] = sitofp <2 x i16> [[X]] to <2 x fp128>
; CHECK-NEXT:    ret <2 x fp128> [[TMP14]]
;
  %a = sitofp <2 x i16> %x to <2 x fp128>
  ret <2 x fp128> %a
}

define <2 x fp128> @test_sitofp_i32(<2 x i32> %x) {
; CHECK-LABEL: @test_sitofp_i32(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = extractelement <2 x i32> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    call void @__itoq(fp128* [[TMP2]], i32 [[TMP3]])
; CHECK-NEXT:    [[TMP5:%.*]] = load fp128, fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = insertelement <2 x fp128> undef, fp128 [[TMP5]], i64 0
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <2 x i32> [[X]], i64 1
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP9]])
; CHECK-NEXT:    call void @__itoq(fp128* [[TMP1]], i32 [[TMP8]])
; CHECK-NEXT:    [[TMP10:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = insertelement <2 x fp128> [[TMP7]], fp128 [[TMP10]], i64 1
; CHECK-NEXT:    [[A:%.*]] = sitofp <2 x i32> [[X]] to <2 x fp128>
; CHECK-NEXT:    ret <2 x fp128> [[TMP12]]
;
  %a = sitofp <2 x i32> %x to <2 x fp128>
  ret <2 x fp128> %a
}

define <2 x fp128> @test_sitofp_i64(<2 x i64> %x) {
; CHECK-LABEL: @test_sitofp_i64(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = extractelement <2 x i64> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    call void @__jtoq(fp128* [[TMP2]], i64 [[TMP3]])
; CHECK-NEXT:    [[TMP5:%.*]] = load fp128, fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = insertelement <2 x fp128> undef, fp128 [[TMP5]], i64 0
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <2 x i64> [[X]], i64 1
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP9]])
; CHECK-NEXT:    call void @__jtoq(fp128* [[TMP1]], i64 [[TMP8]])
; CHECK-NEXT:    [[TMP10:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = insertelement <2 x fp128> [[TMP7]], fp128 [[TMP10]], i64 1
; CHECK-NEXT:    [[A:%.*]] = sitofp <2 x i64> [[X]] to <2 x fp128>
; CHECK-NEXT:    ret <2 x fp128> [[TMP12]]
;
  %a = sitofp <2 x i64> %x to <2 x fp128>
  ret <2 x fp128> %a
}

define <2 x fp128> @test_sitofp_i128(<2 x i128> %x) {
; CHECK-LABEL: @test_sitofp_i128(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = extractelement <2 x i128> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    call void @__mtoq(fp128* [[TMP2]], i128 [[TMP3]])
; CHECK-NEXT:    [[TMP5:%.*]] = load fp128, fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = insertelement <2 x fp128> undef, fp128 [[TMP5]], i64 0
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <2 x i128> [[X]], i64 1
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP9]])
; CHECK-NEXT:    call void @__mtoq(fp128* [[TMP1]], i128 [[TMP8]])
; CHECK-NEXT:    [[TMP10:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = insertelement <2 x fp128> [[TMP7]], fp128 [[TMP10]], i64 1
; CHECK-NEXT:    [[A:%.*]] = sitofp <2 x i128> [[X]] to <2 x fp128>
; CHECK-NEXT:    ret <2 x fp128> [[TMP12]]
;
  %a = sitofp <2 x i128> %x to <2 x fp128>
  ret <2 x fp128> %a
}

define <2 x fp128> @test_uitofp_i8(<2 x i8> %x) {
; CHECK-LABEL: @test_uitofp_i8(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = extractelement <2 x i8> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = zext i8 [[TMP3]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP5]])
; CHECK-NEXT:    call void @__utoq(fp128* [[TMP2]], i32 [[TMP4]])
; CHECK-NEXT:    [[TMP6:%.*]] = load fp128, fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    [[TMP8:%.*]] = insertelement <2 x fp128> undef, fp128 [[TMP6]], i64 0
; CHECK-NEXT:    [[TMP9:%.*]] = extractelement <2 x i8> [[X]], i64 1
; CHECK-NEXT:    [[TMP10:%.*]] = zext i8 [[TMP9]] to i32
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    call void @__utoq(fp128* [[TMP1]], i32 [[TMP10]])
; CHECK-NEXT:    [[TMP12:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP13:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP13]])
; CHECK-NEXT:    [[TMP14:%.*]] = insertelement <2 x fp128> [[TMP8]], fp128 [[TMP12]], i64 1
; CHECK-NEXT:    [[A:%.*]] = uitofp <2 x i8> [[X]] to <2 x fp128>
; CHECK-NEXT:    ret <2 x fp128> [[TMP14]]
;
  %a = uitofp <2 x i8> %x to <2 x fp128>
  ret <2 x fp128> %a
}

define <2 x fp128> @test_uitofp_i16(<2 x i16> %x) {
; CHECK-LABEL: @test_uitofp_i16(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = extractelement <2 x i16> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = zext i16 [[TMP3]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP5]])
; CHECK-NEXT:    call void @__utoq(fp128* [[TMP2]], i32 [[TMP4]])
; CHECK-NEXT:    [[TMP6:%.*]] = load fp128, fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    [[TMP8:%.*]] = insertelement <2 x fp128> undef, fp128 [[TMP6]], i64 0
; CHECK-NEXT:    [[TMP9:%.*]] = extractelement <2 x i16> [[X]], i64 1
; CHECK-NEXT:    [[TMP10:%.*]] = zext i16 [[TMP9]] to i32
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    call void @__utoq(fp128* [[TMP1]], i32 [[TMP10]])
; CHECK-NEXT:    [[TMP12:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP13:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP13]])
; CHECK-NEXT:    [[TMP14:%.*]] = insertelement <2 x fp128> [[TMP8]], fp128 [[TMP12]], i64 1
; CHECK-NEXT:    [[A:%.*]] = uitofp <2 x i16> [[X]] to <2 x fp128>
; CHECK-NEXT:    ret <2 x fp128> [[TMP14]]
;
  %a = uitofp <2 x i16> %x to <2 x fp128>
  ret <2 x fp128> %a
}

define <2 x fp128> @test_uitofp_i32(<2 x i32> %x) {
; CHECK-LABEL: @test_uitofp_i32(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = extractelement <2 x i32> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    call void @__utoq(fp128* [[TMP2]], i32 [[TMP3]])
; CHECK-NEXT:    [[TMP5:%.*]] = load fp128, fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = insertelement <2 x fp128> undef, fp128 [[TMP5]], i64 0
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <2 x i32> [[X]], i64 1
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP9]])
; CHECK-NEXT:    call void @__utoq(fp128* [[TMP1]], i32 [[TMP8]])
; CHECK-NEXT:    [[TMP10:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = insertelement <2 x fp128> [[TMP7]], fp128 [[TMP10]], i64 1
; CHECK-NEXT:    [[A:%.*]] = uitofp <2 x i32> [[X]] to <2 x fp128>
; CHECK-NEXT:    ret <2 x fp128> [[TMP12]]
;
  %a = uitofp <2 x i32> %x to <2 x fp128>
  ret <2 x fp128> %a
}

define <2 x fp128> @test_uitofp_i64(<2 x i64> %x) {
; CHECK-LABEL: @test_uitofp_i64(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = extractelement <2 x i64> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    call void @__ktoq(fp128* [[TMP2]], i64 [[TMP3]])
; CHECK-NEXT:    [[TMP5:%.*]] = load fp128, fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = insertelement <2 x fp128> undef, fp128 [[TMP5]], i64 0
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <2 x i64> [[X]], i64 1
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP9]])
; CHECK-NEXT:    call void @__ktoq(fp128* [[TMP1]], i64 [[TMP8]])
; CHECK-NEXT:    [[TMP10:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = insertelement <2 x fp128> [[TMP7]], fp128 [[TMP10]], i64 1
; CHECK-NEXT:    [[A:%.*]] = uitofp <2 x i64> [[X]] to <2 x fp128>
; CHECK-NEXT:    ret <2 x fp128> [[TMP12]]
;
  %a = uitofp <2 x i64> %x to <2 x fp128>
  ret <2 x fp128> %a
}

define <2 x fp128> @test_uitofp_i128(<2 x i128> %x) {
; CHECK-LABEL: @test_uitofp_i128(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = extractelement <2 x i128> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    call void @__ntoq(fp128* [[TMP2]], i128 [[TMP3]])
; CHECK-NEXT:    [[TMP5:%.*]] = load fp128, fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = insertelement <2 x fp128> undef, fp128 [[TMP5]], i64 0
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <2 x i128> [[X]], i64 1
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP9]])
; CHECK-NEXT:    call void @__ntoq(fp128* [[TMP1]], i128 [[TMP8]])
; CHECK-NEXT:    [[TMP10:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = insertelement <2 x fp128> [[TMP7]], fp128 [[TMP10]], i64 1
; CHECK-NEXT:    [[A:%.*]] = uitofp <2 x i128> [[X]] to <2 x fp128>
; CHECK-NEXT:    ret <2 x fp128> [[TMP12]]
;
  %a = uitofp <2 x i128> %x to <2 x fp128>
  ret <2 x fp128> %a
}

define <2 x i8> @test_fptosi_i8(<2 x fp128> %x) {
; CHECK-LABEL: @test_fptosi_i8(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = extractelement <2 x fp128> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    store fp128 [[TMP3]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @__qtoi(fp128* [[TMP2]], i32 0)
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = trunc i32 [[TMP5]] to i8
; CHECK-NEXT:    [[TMP8:%.*]] = insertelement <2 x i8> undef, i8 [[TMP7]], i64 0
; CHECK-NEXT:    [[TMP9:%.*]] = extractelement <2 x fp128> [[X]], i64 1
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP10]])
; CHECK-NEXT:    store fp128 [[TMP9]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP11:%.*]] = call i32 @__qtoi(fp128* [[TMP1]], i32 0)
; CHECK-NEXT:    [[TMP12:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP12]])
; CHECK-NEXT:    [[TMP13:%.*]] = trunc i32 [[TMP11]] to i8
; CHECK-NEXT:    [[TMP14:%.*]] = insertelement <2 x i8> [[TMP8]], i8 [[TMP13]], i64 1
; CHECK-NEXT:    [[A:%.*]] = fptosi <2 x fp128> [[X]] to <2 x i8>
; CHECK-NEXT:    ret <2 x i8> [[TMP14]]
;
  %a = fptosi <2 x fp128> %x to <2 x i8>
  ret <2 x i8> %a
}

define <2 x i16> @test_fptosi_i16(<2 x fp128> %x) {
; CHECK-LABEL: @test_fptosi_i16(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = extractelement <2 x fp128> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    store fp128 [[TMP3]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @__qtoi(fp128* [[TMP2]], i32 0)
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = trunc i32 [[TMP5]] to i16
; CHECK-NEXT:    [[TMP8:%.*]] = insertelement <2 x i16> undef, i16 [[TMP7]], i64 0
; CHECK-NEXT:    [[TMP9:%.*]] = extractelement <2 x fp128> [[X]], i64 1
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP10]])
; CHECK-NEXT:    store fp128 [[TMP9]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP11:%.*]] = call i32 @__qtoi(fp128* [[TMP1]], i32 0)
; CHECK-NEXT:    [[TMP12:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP12]])
; CHECK-NEXT:    [[TMP13:%.*]] = trunc i32 [[TMP11]] to i16
; CHECK-NEXT:    [[TMP14:%.*]] = insertelement <2 x i16> [[TMP8]], i16 [[TMP13]], i64 1
; CHECK-NEXT:    [[A:%.*]] = fptosi <2 x fp128> [[X]] to <2 x i16>
; CHECK-NEXT:    ret <2 x i16> [[TMP14]]
;
  %a = fptosi <2 x fp128> %x to <2 x i16>
  ret <2 x i16> %a
}

define <2 x i32> @test_fptosi_i32(<2 x fp128> %x) {
; CHECK-LABEL: @test_fptosi_i32(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = extractelement <2 x fp128> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    store fp128 [[TMP3]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @__qtoi(fp128* [[TMP2]], i32 0)
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = insertelement <2 x i32> undef, i32 [[TMP5]], i64 0
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <2 x fp128> [[X]], i64 1
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP9]])
; CHECK-NEXT:    store fp128 [[TMP8]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP10:%.*]] = call i32 @__qtoi(fp128* [[TMP1]], i32 0)
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = insertelement <2 x i32> [[TMP7]], i32 [[TMP10]], i64 1
; CHECK-NEXT:    [[A:%.*]] = fptosi <2 x fp128> [[X]] to <2 x i32>
; CHECK-NEXT:    ret <2 x i32> [[TMP12]]
;
  %a = fptosi <2 x fp128> %x to <2 x i32>
  ret <2 x i32> %a
}

define <2 x i32> @test_fptosi_i32_const() {
; CHECK-LABEL: @test_fptosi_i32_const(
; CHECK-NEXT:    [[A:%.*]] = fptosi <2 x fp128> <fp128 0xL00000000000000003FFEE66666000000, fp128 0xL00000000000000003FFEE66666000000> to <2 x i32>
; CHECK-NEXT:    ret <2 x i32> zeroinitializer
;
  %a = fptosi <2 x fp128> <fp128 0xL00000000000000003FFEE66666000000, fp128 0xL00000000000000003FFEE66666000000> to <2 x i32>
  ret <2 x i32> %a
}

define <2 x i64> @test_fptosi_i64(<2 x fp128> %x) {
; CHECK-LABEL: @test_fptosi_i64(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = extractelement <2 x fp128> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    store fp128 [[TMP3]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP5:%.*]] = call i64 @__qtoj(fp128* [[TMP2]], i32 0)
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = insertelement <2 x i64> undef, i64 [[TMP5]], i64 0
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <2 x fp128> [[X]], i64 1
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP9]])
; CHECK-NEXT:    store fp128 [[TMP8]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP10:%.*]] = call i64 @__qtoj(fp128* [[TMP1]], i32 0)
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = insertelement <2 x i64> [[TMP7]], i64 [[TMP10]], i64 1
; CHECK-NEXT:    [[A:%.*]] = fptosi <2 x fp128> [[X]] to <2 x i64>
; CHECK-NEXT:    ret <2 x i64> [[TMP12]]
;
  %a = fptosi <2 x fp128> %x to <2 x i64>
  ret <2 x i64> %a
}

define <2 x i128> @test_fptosi_i128(<2 x fp128> %x) {
; CHECK-LABEL: @test_fptosi_i128(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = extractelement <2 x fp128> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    store fp128 [[TMP3]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP5:%.*]] = call i128 @__qtom(fp128* [[TMP2]], i32 0)
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = insertelement <2 x i128> undef, i128 [[TMP5]], i64 0
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <2 x fp128> [[X]], i64 1
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP9]])
; CHECK-NEXT:    store fp128 [[TMP8]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP10:%.*]] = call i128 @__qtom(fp128* [[TMP1]], i32 0)
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = insertelement <2 x i128> [[TMP7]], i128 [[TMP10]], i64 1
; CHECK-NEXT:    [[A:%.*]] = fptosi <2 x fp128> [[X]] to <2 x i128>
; CHECK-NEXT:    ret <2 x i128> [[TMP12]]
;
  %a = fptosi <2 x fp128> %x to <2 x i128>
  ret <2 x i128> %a
}

define <2 x i8> @test_fptoui_i8(<2 x fp128> %x) {
; CHECK-LABEL: @test_fptoui_i8(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = extractelement <2 x fp128> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    store fp128 [[TMP3]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @__qtou(fp128* [[TMP2]], i32 0)
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = trunc i32 [[TMP5]] to i8
; CHECK-NEXT:    [[TMP8:%.*]] = insertelement <2 x i8> undef, i8 [[TMP7]], i64 0
; CHECK-NEXT:    [[TMP9:%.*]] = extractelement <2 x fp128> [[X]], i64 1
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP10]])
; CHECK-NEXT:    store fp128 [[TMP9]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP11:%.*]] = call i32 @__qtou(fp128* [[TMP1]], i32 0)
; CHECK-NEXT:    [[TMP12:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP12]])
; CHECK-NEXT:    [[TMP13:%.*]] = trunc i32 [[TMP11]] to i8
; CHECK-NEXT:    [[TMP14:%.*]] = insertelement <2 x i8> [[TMP8]], i8 [[TMP13]], i64 1
; CHECK-NEXT:    [[A:%.*]] = fptoui <2 x fp128> [[X]] to <2 x i8>
; CHECK-NEXT:    ret <2 x i8> [[TMP14]]
;
  %a = fptoui <2 x fp128> %x to <2 x i8>
  ret <2 x i8> %a
}

define <2 x i16> @test_fptoui_i16(<2 x fp128> %x) {
; CHECK-LABEL: @test_fptoui_i16(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = extractelement <2 x fp128> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    store fp128 [[TMP3]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @__qtou(fp128* [[TMP2]], i32 0)
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = trunc i32 [[TMP5]] to i16
; CHECK-NEXT:    [[TMP8:%.*]] = insertelement <2 x i16> undef, i16 [[TMP7]], i64 0
; CHECK-NEXT:    [[TMP9:%.*]] = extractelement <2 x fp128> [[X]], i64 1
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP10]])
; CHECK-NEXT:    store fp128 [[TMP9]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP11:%.*]] = call i32 @__qtou(fp128* [[TMP1]], i32 0)
; CHECK-NEXT:    [[TMP12:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP12]])
; CHECK-NEXT:    [[TMP13:%.*]] = trunc i32 [[TMP11]] to i16
; CHECK-NEXT:    [[TMP14:%.*]] = insertelement <2 x i16> [[TMP8]], i16 [[TMP13]], i64 1
; CHECK-NEXT:    [[A:%.*]] = fptoui <2 x fp128> [[X]] to <2 x i16>
; CHECK-NEXT:    ret <2 x i16> [[TMP14]]
;
  %a = fptoui <2 x fp128> %x to <2 x i16>
  ret <2 x i16> %a
}

define <2 x i32> @test_fptoui_i32(<2 x fp128> %x) {
; CHECK-LABEL: @test_fptoui_i32(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = extractelement <2 x fp128> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    store fp128 [[TMP3]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @__qtou(fp128* [[TMP2]], i32 0)
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = insertelement <2 x i32> undef, i32 [[TMP5]], i64 0
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <2 x fp128> [[X]], i64 1
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP9]])
; CHECK-NEXT:    store fp128 [[TMP8]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP10:%.*]] = call i32 @__qtou(fp128* [[TMP1]], i32 0)
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = insertelement <2 x i32> [[TMP7]], i32 [[TMP10]], i64 1
; CHECK-NEXT:    [[A:%.*]] = fptoui <2 x fp128> [[X]] to <2 x i32>
; CHECK-NEXT:    ret <2 x i32> [[TMP12]]
;
  %a = fptoui <2 x fp128> %x to <2 x i32>
  ret <2 x i32> %a
}

define <2 x i64> @test_fptoui_i64(<2 x fp128> %x) {
; CHECK-LABEL: @test_fptoui_i64(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = extractelement <2 x fp128> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    store fp128 [[TMP3]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP5:%.*]] = call i64 @__qtok(fp128* [[TMP2]], i32 0)
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = insertelement <2 x i64> undef, i64 [[TMP5]], i64 0
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <2 x fp128> [[X]], i64 1
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP9]])
; CHECK-NEXT:    store fp128 [[TMP8]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP10:%.*]] = call i64 @__qtok(fp128* [[TMP1]], i32 0)
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = insertelement <2 x i64> [[TMP7]], i64 [[TMP10]], i64 1
; CHECK-NEXT:    [[A:%.*]] = fptoui <2 x fp128> [[X]] to <2 x i64>
; CHECK-NEXT:    ret <2 x i64> [[TMP12]]
;
  %a = fptoui <2 x fp128> %x to <2 x i64>
  ret <2 x i64> %a
}

define <2 x i128> @test_fptoui_i128(<2 x fp128> %x) {
; CHECK-LABEL: @test_fptoui_i128(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = extractelement <2 x fp128> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    store fp128 [[TMP3]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP5:%.*]] = call i128 @__qton(fp128* [[TMP2]], i32 0)
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = insertelement <2 x i128> undef, i128 [[TMP5]], i64 0
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <2 x fp128> [[X]], i64 1
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP9]])
; CHECK-NEXT:    store fp128 [[TMP8]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP10:%.*]] = call i128 @__qton(fp128* [[TMP1]], i32 0)
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = insertelement <2 x i128> [[TMP7]], i128 [[TMP10]], i64 1
; CHECK-NEXT:    [[A:%.*]] = fptoui <2 x fp128> [[X]] to <2 x i128>
; CHECK-NEXT:    ret <2 x i128> [[TMP12]]
;
  %a = fptoui <2 x fp128> %x to <2 x i128>
  ret <2 x i128> %a
}

define <2 x i1> @test_fcmp_oeq(<2 x fp128> %x, <2 x fp128> %y) {
; CHECK-LABEL: @test_fcmp_oeq(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP5:%.*]] = extractelement <2 x fp128> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP6:%.*]] = extractelement <2 x fp128> [[Y:%.*]], i64 0
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    store fp128 [[TMP5]], fp128* [[TMP4]], align 16
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP8]])
; CHECK-NEXT:    store fp128 [[TMP6]], fp128* [[TMP3]], align 16
; CHECK-NEXT:    [[TMP9:%.*]] = call i32 @__eqq(fp128* [[TMP4]], fp128* [[TMP3]])
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP10]])
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = trunc i32 [[TMP9]] to i1
; CHECK-NEXT:    [[TMP13:%.*]] = insertelement <2 x i1> undef, i1 [[TMP12]], i64 0
; CHECK-NEXT:    [[TMP14:%.*]] = extractelement <2 x fp128> [[X]], i64 1
; CHECK-NEXT:    [[TMP15:%.*]] = extractelement <2 x fp128> [[Y]], i64 1
; CHECK-NEXT:    [[TMP16:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP16]])
; CHECK-NEXT:    store fp128 [[TMP14]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP17:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP17]])
; CHECK-NEXT:    store fp128 [[TMP15]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP18:%.*]] = call i32 @__eqq(fp128* [[TMP2]], fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP19:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP19]])
; CHECK-NEXT:    [[TMP20:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP20]])
; CHECK-NEXT:    [[TMP21:%.*]] = trunc i32 [[TMP18]] to i1
; CHECK-NEXT:    [[TMP22:%.*]] = insertelement <2 x i1> [[TMP13]], i1 [[TMP21]], i64 1
; CHECK-NEXT:    [[A:%.*]] = fcmp oeq <2 x fp128> [[X]], [[Y]]
; CHECK-NEXT:    ret <2 x i1> [[TMP22]]
;
  %a = fcmp oeq <2 x fp128> %x, %y
  ret <2 x i1> %a
}

define <2 x i1> @test_fcmp_une(<2 x fp128> %x, <2 x fp128> %y) {
; CHECK-LABEL: @test_fcmp_une(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP5:%.*]] = extractelement <2 x fp128> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP6:%.*]] = extractelement <2 x fp128> [[Y:%.*]], i64 0
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    store fp128 [[TMP5]], fp128* [[TMP4]], align 16
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP8]])
; CHECK-NEXT:    store fp128 [[TMP6]], fp128* [[TMP3]], align 16
; CHECK-NEXT:    [[TMP9:%.*]] = call i32 @__neq(fp128* [[TMP4]], fp128* [[TMP3]])
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP10]])
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = trunc i32 [[TMP9]] to i1
; CHECK-NEXT:    [[TMP13:%.*]] = insertelement <2 x i1> undef, i1 [[TMP12]], i64 0
; CHECK-NEXT:    [[TMP14:%.*]] = extractelement <2 x fp128> [[X]], i64 1
; CHECK-NEXT:    [[TMP15:%.*]] = extractelement <2 x fp128> [[Y]], i64 1
; CHECK-NEXT:    [[TMP16:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP16]])
; CHECK-NEXT:    store fp128 [[TMP14]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP17:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP17]])
; CHECK-NEXT:    store fp128 [[TMP15]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP18:%.*]] = call i32 @__neq(fp128* [[TMP2]], fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP19:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP19]])
; CHECK-NEXT:    [[TMP20:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP20]])
; CHECK-NEXT:    [[TMP21:%.*]] = trunc i32 [[TMP18]] to i1
; CHECK-NEXT:    [[TMP22:%.*]] = insertelement <2 x i1> [[TMP13]], i1 [[TMP21]], i64 1
; CHECK-NEXT:    [[A:%.*]] = fcmp une <2 x fp128> [[X]], [[Y]]
; CHECK-NEXT:    ret <2 x i1> [[TMP22]]
;
  %a = fcmp une <2 x fp128> %x, %y
  ret <2 x i1> %a
}

define <2 x i1> @test_fcmp_olt(<2 x fp128> %x, <2 x fp128> %y) {
; CHECK-LABEL: @test_fcmp_olt(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP5:%.*]] = extractelement <2 x fp128> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP6:%.*]] = extractelement <2 x fp128> [[Y:%.*]], i64 0
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    store fp128 [[TMP5]], fp128* [[TMP4]], align 16
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP8]])
; CHECK-NEXT:    store fp128 [[TMP6]], fp128* [[TMP3]], align 16
; CHECK-NEXT:    [[TMP9:%.*]] = call i32 @__ltq(fp128* [[TMP4]], fp128* [[TMP3]])
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP10]])
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = trunc i32 [[TMP9]] to i1
; CHECK-NEXT:    [[TMP13:%.*]] = insertelement <2 x i1> undef, i1 [[TMP12]], i64 0
; CHECK-NEXT:    [[TMP14:%.*]] = extractelement <2 x fp128> [[X]], i64 1
; CHECK-NEXT:    [[TMP15:%.*]] = extractelement <2 x fp128> [[Y]], i64 1
; CHECK-NEXT:    [[TMP16:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP16]])
; CHECK-NEXT:    store fp128 [[TMP14]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP17:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP17]])
; CHECK-NEXT:    store fp128 [[TMP15]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP18:%.*]] = call i32 @__ltq(fp128* [[TMP2]], fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP19:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP19]])
; CHECK-NEXT:    [[TMP20:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP20]])
; CHECK-NEXT:    [[TMP21:%.*]] = trunc i32 [[TMP18]] to i1
; CHECK-NEXT:    [[TMP22:%.*]] = insertelement <2 x i1> [[TMP13]], i1 [[TMP21]], i64 1
; CHECK-NEXT:    [[A:%.*]] = fcmp olt <2 x fp128> [[X]], [[Y]]
; CHECK-NEXT:    ret <2 x i1> [[TMP22]]
;
  %a = fcmp olt <2 x fp128> %x, %y
  ret <2 x i1> %a
}

define <2 x i1> @test_fcmp_ogt(<2 x fp128> %x, <2 x fp128> %y) {
; CHECK-LABEL: @test_fcmp_ogt(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP5:%.*]] = extractelement <2 x fp128> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP6:%.*]] = extractelement <2 x fp128> [[Y:%.*]], i64 0
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    store fp128 [[TMP5]], fp128* [[TMP4]], align 16
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP8]])
; CHECK-NEXT:    store fp128 [[TMP6]], fp128* [[TMP3]], align 16
; CHECK-NEXT:    [[TMP9:%.*]] = call i32 @__gtq(fp128* [[TMP4]], fp128* [[TMP3]])
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP10]])
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = trunc i32 [[TMP9]] to i1
; CHECK-NEXT:    [[TMP13:%.*]] = insertelement <2 x i1> undef, i1 [[TMP12]], i64 0
; CHECK-NEXT:    [[TMP14:%.*]] = extractelement <2 x fp128> [[X]], i64 1
; CHECK-NEXT:    [[TMP15:%.*]] = extractelement <2 x fp128> [[Y]], i64 1
; CHECK-NEXT:    [[TMP16:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP16]])
; CHECK-NEXT:    store fp128 [[TMP14]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP17:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP17]])
; CHECK-NEXT:    store fp128 [[TMP15]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP18:%.*]] = call i32 @__gtq(fp128* [[TMP2]], fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP19:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP19]])
; CHECK-NEXT:    [[TMP20:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP20]])
; CHECK-NEXT:    [[TMP21:%.*]] = trunc i32 [[TMP18]] to i1
; CHECK-NEXT:    [[TMP22:%.*]] = insertelement <2 x i1> [[TMP13]], i1 [[TMP21]], i64 1
; CHECK-NEXT:    [[A:%.*]] = fcmp ogt <2 x fp128> [[X]], [[Y]]
; CHECK-NEXT:    ret <2 x i1> [[TMP22]]
;
  %a = fcmp ogt <2 x fp128> %x, %y
  ret <2 x i1> %a
}

define <2 x i1> @test_fcmp_ole(<2 x fp128> %x, <2 x fp128> %y) {
; CHECK-LABEL: @test_fcmp_ole(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP5:%.*]] = extractelement <2 x fp128> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP6:%.*]] = extractelement <2 x fp128> [[Y:%.*]], i64 0
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    store fp128 [[TMP5]], fp128* [[TMP4]], align 16
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP8]])
; CHECK-NEXT:    store fp128 [[TMP6]], fp128* [[TMP3]], align 16
; CHECK-NEXT:    [[TMP9:%.*]] = call i32 @__leq(fp128* [[TMP4]], fp128* [[TMP3]])
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP10]])
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = trunc i32 [[TMP9]] to i1
; CHECK-NEXT:    [[TMP13:%.*]] = insertelement <2 x i1> undef, i1 [[TMP12]], i64 0
; CHECK-NEXT:    [[TMP14:%.*]] = extractelement <2 x fp128> [[X]], i64 1
; CHECK-NEXT:    [[TMP15:%.*]] = extractelement <2 x fp128> [[Y]], i64 1
; CHECK-NEXT:    [[TMP16:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP16]])
; CHECK-NEXT:    store fp128 [[TMP14]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP17:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP17]])
; CHECK-NEXT:    store fp128 [[TMP15]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP18:%.*]] = call i32 @__leq(fp128* [[TMP2]], fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP19:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP19]])
; CHECK-NEXT:    [[TMP20:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP20]])
; CHECK-NEXT:    [[TMP21:%.*]] = trunc i32 [[TMP18]] to i1
; CHECK-NEXT:    [[TMP22:%.*]] = insertelement <2 x i1> [[TMP13]], i1 [[TMP21]], i64 1
; CHECK-NEXT:    [[A:%.*]] = fcmp ole <2 x fp128> [[X]], [[Y]]
; CHECK-NEXT:    ret <2 x i1> [[TMP22]]
;
  %a = fcmp ole <2 x fp128> %x, %y
  ret <2 x i1> %a
}

define <2 x i1> @test_fcmp_oge(<2 x fp128> %x, <2 x fp128> %y) {
; CHECK-LABEL: @test_fcmp_oge(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP5:%.*]] = extractelement <2 x fp128> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP6:%.*]] = extractelement <2 x fp128> [[Y:%.*]], i64 0
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    store fp128 [[TMP5]], fp128* [[TMP4]], align 16
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP8]])
; CHECK-NEXT:    store fp128 [[TMP6]], fp128* [[TMP3]], align 16
; CHECK-NEXT:    [[TMP9:%.*]] = call i32 @__geq(fp128* [[TMP4]], fp128* [[TMP3]])
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP10]])
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = trunc i32 [[TMP9]] to i1
; CHECK-NEXT:    [[TMP13:%.*]] = insertelement <2 x i1> undef, i1 [[TMP12]], i64 0
; CHECK-NEXT:    [[TMP14:%.*]] = extractelement <2 x fp128> [[X]], i64 1
; CHECK-NEXT:    [[TMP15:%.*]] = extractelement <2 x fp128> [[Y]], i64 1
; CHECK-NEXT:    [[TMP16:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP16]])
; CHECK-NEXT:    store fp128 [[TMP14]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP17:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP17]])
; CHECK-NEXT:    store fp128 [[TMP15]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP18:%.*]] = call i32 @__geq(fp128* [[TMP2]], fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP19:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP19]])
; CHECK-NEXT:    [[TMP20:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP20]])
; CHECK-NEXT:    [[TMP21:%.*]] = trunc i32 [[TMP18]] to i1
; CHECK-NEXT:    [[TMP22:%.*]] = insertelement <2 x i1> [[TMP13]], i1 [[TMP21]], i64 1
; CHECK-NEXT:    [[A:%.*]] = fcmp oge <2 x fp128> [[X]], [[Y]]
; CHECK-NEXT:    ret <2 x i1> [[TMP22]]
;
  %a = fcmp oge <2 x fp128> %x, %y
  ret <2 x i1> %a
}

define <2 x i1> @test_fcmp_ult(<2 x fp128> %x, <2 x fp128> %y) {
; CHECK-LABEL: @test_fcmp_ult(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP5:%.*]] = extractelement <2 x fp128> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP6:%.*]] = extractelement <2 x fp128> [[Y:%.*]], i64 0
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    store fp128 [[TMP5]], fp128* [[TMP4]], align 16
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP8]])
; CHECK-NEXT:    store fp128 [[TMP6]], fp128* [[TMP3]], align 16
; CHECK-NEXT:    [[TMP9:%.*]] = call i32 @__geq(fp128* [[TMP4]], fp128* [[TMP3]])
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP10]])
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = trunc i32 [[TMP9]] to i1
; CHECK-NEXT:    [[TMP13:%.*]] = xor i1 [[TMP12]], true
; CHECK-NEXT:    [[TMP14:%.*]] = insertelement <2 x i1> undef, i1 [[TMP13]], i64 0
; CHECK-NEXT:    [[TMP15:%.*]] = extractelement <2 x fp128> [[X]], i64 1
; CHECK-NEXT:    [[TMP16:%.*]] = extractelement <2 x fp128> [[Y]], i64 1
; CHECK-NEXT:    [[TMP17:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP17]])
; CHECK-NEXT:    store fp128 [[TMP15]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP18:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP18]])
; CHECK-NEXT:    store fp128 [[TMP16]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP19:%.*]] = call i32 @__geq(fp128* [[TMP2]], fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP20:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP20]])
; CHECK-NEXT:    [[TMP21:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP21]])
; CHECK-NEXT:    [[TMP22:%.*]] = trunc i32 [[TMP19]] to i1
; CHECK-NEXT:    [[TMP23:%.*]] = xor i1 [[TMP22]], true
; CHECK-NEXT:    [[TMP24:%.*]] = insertelement <2 x i1> [[TMP14]], i1 [[TMP23]], i64 1
; CHECK-NEXT:    [[A:%.*]] = fcmp ult <2 x fp128> [[X]], [[Y]]
; CHECK-NEXT:    ret <2 x i1> [[TMP24]]
;
  %a = fcmp ult <2 x fp128> %x, %y
  ret <2 x i1> %a
}

define <2 x i1> @test_fcmp_ugt(<2 x fp128> %x, <2 x fp128> %y) {
; CHECK-LABEL: @test_fcmp_ugt(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP5:%.*]] = extractelement <2 x fp128> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP6:%.*]] = extractelement <2 x fp128> [[Y:%.*]], i64 0
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    store fp128 [[TMP5]], fp128* [[TMP4]], align 16
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP8]])
; CHECK-NEXT:    store fp128 [[TMP6]], fp128* [[TMP3]], align 16
; CHECK-NEXT:    [[TMP9:%.*]] = call i32 @__leq(fp128* [[TMP4]], fp128* [[TMP3]])
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP10]])
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = trunc i32 [[TMP9]] to i1
; CHECK-NEXT:    [[TMP13:%.*]] = xor i1 [[TMP12]], true
; CHECK-NEXT:    [[TMP14:%.*]] = insertelement <2 x i1> undef, i1 [[TMP13]], i64 0
; CHECK-NEXT:    [[TMP15:%.*]] = extractelement <2 x fp128> [[X]], i64 1
; CHECK-NEXT:    [[TMP16:%.*]] = extractelement <2 x fp128> [[Y]], i64 1
; CHECK-NEXT:    [[TMP17:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP17]])
; CHECK-NEXT:    store fp128 [[TMP15]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP18:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP18]])
; CHECK-NEXT:    store fp128 [[TMP16]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP19:%.*]] = call i32 @__leq(fp128* [[TMP2]], fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP20:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP20]])
; CHECK-NEXT:    [[TMP21:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP21]])
; CHECK-NEXT:    [[TMP22:%.*]] = trunc i32 [[TMP19]] to i1
; CHECK-NEXT:    [[TMP23:%.*]] = xor i1 [[TMP22]], true
; CHECK-NEXT:    [[TMP24:%.*]] = insertelement <2 x i1> [[TMP14]], i1 [[TMP23]], i64 1
; CHECK-NEXT:    [[A:%.*]] = fcmp ugt <2 x fp128> [[X]], [[Y]]
; CHECK-NEXT:    ret <2 x i1> [[TMP24]]
;
  %a = fcmp ugt <2 x fp128> %x, %y
  ret <2 x i1> %a
}

define <2 x i1> @test_fcmp_ule(<2 x fp128> %x, <2 x fp128> %y) {
; CHECK-LABEL: @test_fcmp_ule(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP5:%.*]] = extractelement <2 x fp128> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP6:%.*]] = extractelement <2 x fp128> [[Y:%.*]], i64 0
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    store fp128 [[TMP5]], fp128* [[TMP4]], align 16
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP8]])
; CHECK-NEXT:    store fp128 [[TMP6]], fp128* [[TMP3]], align 16
; CHECK-NEXT:    [[TMP9:%.*]] = call i32 @__gtq(fp128* [[TMP4]], fp128* [[TMP3]])
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP10]])
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = trunc i32 [[TMP9]] to i1
; CHECK-NEXT:    [[TMP13:%.*]] = xor i1 [[TMP12]], true
; CHECK-NEXT:    [[TMP14:%.*]] = insertelement <2 x i1> undef, i1 [[TMP13]], i64 0
; CHECK-NEXT:    [[TMP15:%.*]] = extractelement <2 x fp128> [[X]], i64 1
; CHECK-NEXT:    [[TMP16:%.*]] = extractelement <2 x fp128> [[Y]], i64 1
; CHECK-NEXT:    [[TMP17:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP17]])
; CHECK-NEXT:    store fp128 [[TMP15]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP18:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP18]])
; CHECK-NEXT:    store fp128 [[TMP16]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP19:%.*]] = call i32 @__gtq(fp128* [[TMP2]], fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP20:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP20]])
; CHECK-NEXT:    [[TMP21:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP21]])
; CHECK-NEXT:    [[TMP22:%.*]] = trunc i32 [[TMP19]] to i1
; CHECK-NEXT:    [[TMP23:%.*]] = xor i1 [[TMP22]], true
; CHECK-NEXT:    [[TMP24:%.*]] = insertelement <2 x i1> [[TMP14]], i1 [[TMP23]], i64 1
; CHECK-NEXT:    [[A:%.*]] = fcmp ule <2 x fp128> [[X]], [[Y]]
; CHECK-NEXT:    ret <2 x i1> [[TMP24]]
;
  %a = fcmp ule <2 x fp128> %x, %y
  ret <2 x i1> %a
}

define <2 x i1> @test_fcmp_uge(<2 x fp128> %x, <2 x fp128> %y) {
; CHECK-LABEL: @test_fcmp_uge(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP5:%.*]] = extractelement <2 x fp128> [[X:%.*]], i64 0
; CHECK-NEXT:    [[TMP6:%.*]] = extractelement <2 x fp128> [[Y:%.*]], i64 0
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    store fp128 [[TMP5]], fp128* [[TMP4]], align 16
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP8]])
; CHECK-NEXT:    store fp128 [[TMP6]], fp128* [[TMP3]], align 16
; CHECK-NEXT:    [[TMP9:%.*]] = call i32 @__ltq(fp128* [[TMP4]], fp128* [[TMP3]])
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP10]])
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = trunc i32 [[TMP9]] to i1
; CHECK-NEXT:    [[TMP13:%.*]] = xor i1 [[TMP12]], true
; CHECK-NEXT:    [[TMP14:%.*]] = insertelement <2 x i1> undef, i1 [[TMP13]], i64 0
; CHECK-NEXT:    [[TMP15:%.*]] = extractelement <2 x fp128> [[X]], i64 1
; CHECK-NEXT:    [[TMP16:%.*]] = extractelement <2 x fp128> [[Y]], i64 1
; CHECK-NEXT:    [[TMP17:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP17]])
; CHECK-NEXT:    store fp128 [[TMP15]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP18:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP18]])
; CHECK-NEXT:    store fp128 [[TMP16]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP19:%.*]] = call i32 @__ltq(fp128* [[TMP2]], fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP20:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP20]])
; CHECK-NEXT:    [[TMP21:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP21]])
; CHECK-NEXT:    [[TMP22:%.*]] = trunc i32 [[TMP19]] to i1
; CHECK-NEXT:    [[TMP23:%.*]] = xor i1 [[TMP22]], true
; CHECK-NEXT:    [[TMP24:%.*]] = insertelement <2 x i1> [[TMP14]], i1 [[TMP23]], i64 1
; CHECK-NEXT:    [[A:%.*]] = fcmp uge <2 x fp128> [[X]], [[Y]]
; CHECK-NEXT:    ret <2 x i1> [[TMP24]]
;
  %a = fcmp uge <2 x fp128> %x, %y
  ret <2 x i1> %a
}
