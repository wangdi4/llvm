; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt %s -S -mtriple=x86_64-unknown-unknown -float128-expand -intel-libirc-allowed | FileCheck %s

; Function Attrs: nofree noreturn nounwind uwtable
define dso_local i32 @main2(fp128 %x) local_unnamed_addr #0 {
; CHECK-LABEL: @main2(
; CHECK-NEXT:  bb1:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP3]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    call void @__addq(fp128* [[TMP1]], fp128* [[TMP2]], fp128* [[TMP2]])
; CHECK-NEXT:    [[TMP5:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    br i1 undef, label [[BB2:%.*]], label [[BB3:%.*]]
; CHECK:       bb2:
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP0]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    call void @__addq(fp128* [[TMP0]], fp128* [[TMP2]], fp128* [[TMP2]])
; CHECK-NEXT:    [[TMP8:%.*]] = load fp128, fp128* [[TMP0]], align 16
; CHECK-NEXT:    br label [[BB4:%.*]]
; CHECK:       bb3:
; CHECK-NEXT:    [[TMP9:%.*]] = call i32 @__eqq(fp128* [[TMP2]], fp128* [[TMP2]])
; CHECK-NEXT:    [[TMP10:%.*]] = trunc i32 [[TMP9]] to i1
; CHECK-NEXT:    br label [[BB4]]
; CHECK:       bb4:
; CHECK-NEXT:    [[TMP11:%.*]] = phi fp128 [ [[X]], [[BB3]] ], [ [[TMP8]], [[BB2]] ]
; CHECK-NEXT:    ret i32 1
;
; To make the whole thing as simple as possible, we won't create LifetimeMarkers
; for fp128ptr whose value is related to PHI. Thus, although we could have created
; LifetimeEnd for TMP0 and TMP2, but we won't do that.
;
bb1:
  %0 = fadd fp128 %x, %x
  br i1 undef, label %bb2, label %bb3
bb2:
  %1 = fadd fp128 %x, %x
  br label %bb4
bb3:
  %2 = fcmp oeq fp128 %x, %x
  br label %bb4
bb4:
  %3 = phi fp128 [%x, %bb3], [%1, %bb2]
  ret i32 1
}
