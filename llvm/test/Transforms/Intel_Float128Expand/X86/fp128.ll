; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt %s -S -mtriple=x86_64-unknown-unknown -float128-expand -intel-libirc-allowed | FileCheck %s

define fp128 @test_fadd(fp128 %x, fp128 %y) {
; CHECK-LABEL: @test_fadd(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    store fp128 [[Y:%.*]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP5]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP3]], align 16
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    call void @__addq(fp128* [[TMP1]], fp128* [[TMP3]], fp128* [[TMP2]])
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP8]])
; CHECK-NEXT:    [[TMP9:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP10]])
; CHECK-NEXT:    ret fp128 [[TMP9]]
;
  %a = fadd fp128 %x, %y
  ret fp128 %a
}

define fp128 @test_fsub(fp128 %x, fp128 %y) {
; CHECK-LABEL: @test_fsub(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    store fp128 [[Y:%.*]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP5]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP3]], align 16
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    call void @__subq(fp128* [[TMP1]], fp128* [[TMP3]], fp128* [[TMP2]])
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP8]])
; CHECK-NEXT:    [[TMP9:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP10]])
; CHECK-NEXT:    ret fp128 [[TMP9]]
;
  %a = fsub fp128 %x, %y
  ret fp128 %a
}

define fp128 @test_fmul(fp128 %x, fp128 %y) {
; CHECK-LABEL: @test_fmul(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    store fp128 [[Y:%.*]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP5]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP3]], align 16
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    call void @__mulq(fp128* [[TMP1]], fp128* [[TMP3]], fp128* [[TMP2]])
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP8]])
; CHECK-NEXT:    [[TMP9:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP10]])
; CHECK-NEXT:    ret fp128 [[TMP9]]
;
  %a = fmul fp128 %x, %y
  ret fp128 %a
}

define fp128 @test_fneg(fp128 %x) {
; CHECK-LABEL: @test_fneg(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP3]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    call void @__negq(fp128* [[TMP1]], fp128* [[TMP2]])
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP5]])
; CHECK-NEXT:    [[TMP6:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    ret fp128 [[TMP6]]
;
  %a = fneg fp128 %x
  ret fp128 %a
}

define fp128 @test_fneg_idiom(fp128 %x) {
; CHECK-LABEL: @test_fneg_idiom(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP3]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    call void @__negq(fp128* [[TMP1]], fp128* [[TMP2]])
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP5]])
; CHECK-NEXT:    [[TMP6:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    ret fp128 [[TMP6]]
;
  %a = fsub fp128 0xL00000000000000008000000000000000, %x
  ret fp128 %a
}

define float @test_fptrunc_float(fp128 %x) {
; CHECK-LABEL: @test_fptrunc_float(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP2]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP3:%.*]] = call float @__qtof(fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    ret float [[TMP3]]
;
  %a = fptrunc fp128 %x to float
  ret float %a
}

define double @test_fptrunc_double(fp128 %x) {
; CHECK-LABEL: @test_fptrunc_double(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP2]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP3:%.*]] = call double @__qtod(fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    ret double [[TMP3]]
;
  %a = fptrunc fp128 %x to double
  ret double %a
}

define x86_fp80 @test_fptrunc_fp80(fp128 %x) {
; CHECK-LABEL: @test_fptrunc_fp80(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP2]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP3:%.*]] = call x86_fp80 @__qtol(fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    ret x86_fp80 [[TMP3]]
;
  %a = fptrunc fp128 %x to x86_fp80
  ret x86_fp80 %a
}

define fp128 @test_fpext_float(float %x) {
; CHECK-LABEL: @test_fpext_float(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP2]])
; CHECK-NEXT:    call void @__ftoq(fp128* [[TMP1]], float [[X:%.*]])
; CHECK-NEXT:    [[TMP3:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    ret fp128 [[TMP3]]
;
  %a = fpext float %x to fp128
  ret fp128 %a
}

define fp128 @test_fpext_double(double %x) {
; CHECK-LABEL: @test_fpext_double(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP2]])
; CHECK-NEXT:    call void @__dtoq(fp128* [[TMP1]], double [[X:%.*]])
; CHECK-NEXT:    [[TMP3:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    ret fp128 [[TMP3]]
;
  %a = fpext double %x to fp128
  ret fp128 %a
}

define fp128 @test_fpext_fp80(x86_fp80 %x) {
; CHECK-LABEL: @test_fpext_fp80(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP2]])
; CHECK-NEXT:    call void @__ltoq(fp128* [[TMP1]], x86_fp80 [[X:%.*]])
; CHECK-NEXT:    [[TMP3:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    ret fp128 [[TMP3]]
;
  %a = fpext x86_fp80 %x to fp128
  ret fp128 %a
}

define fp128 @test_sitofp_i8(i8 %x) {
; CHECK-LABEL: @test_sitofp_i8(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = sext i8 [[X:%.*]] to i32
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP3]])
; CHECK-NEXT:    call void @__itoq(fp128* [[TMP1]], i32 [[TMP2]])
; CHECK-NEXT:    [[TMP4:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP5]])
; CHECK-NEXT:    ret fp128 [[TMP4]]
;
  %a = sitofp i8 %x to fp128
  ret fp128 %a
}

define fp128 @test_sitofp_i16(i16 %x) {
; CHECK-LABEL: @test_sitofp_i16(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = sext i16 [[X:%.*]] to i32
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP3]])
; CHECK-NEXT:    call void @__itoq(fp128* [[TMP1]], i32 [[TMP2]])
; CHECK-NEXT:    [[TMP4:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP5]])
; CHECK-NEXT:    ret fp128 [[TMP4]]
;
  %a = sitofp i16 %x to fp128
  ret fp128 %a
}

define fp128 @test_sitofp_i32(i32 %x) {
; CHECK-LABEL: @test_sitofp_i32(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP2]])
; CHECK-NEXT:    call void @__itoq(fp128* [[TMP1]], i32 [[X:%.*]])
; CHECK-NEXT:    [[TMP3:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    ret fp128 [[TMP3]]
;
  %a = sitofp i32 %x to fp128
  ret fp128 %a
}

define fp128 @test_sitofp_i64(i64 %x) {
; CHECK-LABEL: @test_sitofp_i64(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP2]])
; CHECK-NEXT:    call void @__jtoq(fp128* [[TMP1]], i64 [[X:%.*]])
; CHECK-NEXT:    [[TMP3:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    ret fp128 [[TMP3]]
;
  %a = sitofp i64 %x to fp128
  ret fp128 %a
}

define fp128 @test_sitofp_i128(i128 %x) {
; CHECK-LABEL: @test_sitofp_i128(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP2]])
; CHECK-NEXT:    call void @__mtoq(fp128* [[TMP1]], i128 [[X:%.*]])
; CHECK-NEXT:    [[TMP3:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    ret fp128 [[TMP3]]
;
  %a = sitofp i128 %x to fp128
  ret fp128 %a
}

define fp128 @test_uitofp_i8(i8 %x) {
; CHECK-LABEL: @test_uitofp_i8(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = zext i8 [[X:%.*]] to i32
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP3]])
; CHECK-NEXT:    call void @__utoq(fp128* [[TMP1]], i32 [[TMP2]])
; CHECK-NEXT:    [[TMP4:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP5]])
; CHECK-NEXT:    ret fp128 [[TMP4]]
;
  %a = uitofp i8 %x to fp128
  ret fp128 %a
}

define fp128 @test_uitofp_i16(i16 %x) {
; CHECK-LABEL: @test_uitofp_i16(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = zext i16 [[X:%.*]] to i32
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP3]])
; CHECK-NEXT:    call void @__utoq(fp128* [[TMP1]], i32 [[TMP2]])
; CHECK-NEXT:    [[TMP4:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP5]])
; CHECK-NEXT:    ret fp128 [[TMP4]]
;
  %a = uitofp i16 %x to fp128
  ret fp128 %a
}

define fp128 @test_uitofp_i32(i32 %x) {
; CHECK-LABEL: @test_uitofp_i32(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP2]])
; CHECK-NEXT:    call void @__utoq(fp128* [[TMP1]], i32 [[X:%.*]])
; CHECK-NEXT:    [[TMP3:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    ret fp128 [[TMP3]]
;
  %a = uitofp i32 %x to fp128
  ret fp128 %a
}

define fp128 @test_uitofp_i64(i64 %x) {
; CHECK-LABEL: @test_uitofp_i64(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP2]])
; CHECK-NEXT:    call void @__ktoq(fp128* [[TMP1]], i64 [[X:%.*]])
; CHECK-NEXT:    [[TMP3:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    ret fp128 [[TMP3]]
;
  %a = uitofp i64 %x to fp128
  ret fp128 %a
}

define fp128 @test_uitofp_i128(i128 %x) {
; CHECK-LABEL: @test_uitofp_i128(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP2]])
; CHECK-NEXT:    call void @__ntoq(fp128* [[TMP1]], i128 [[X:%.*]])
; CHECK-NEXT:    [[TMP3:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    ret fp128 [[TMP3]]
;
  %a = uitofp i128 %x to fp128
  ret fp128 %a
}

define i8 @test_fptosi_i8(fp128 %x) {
; CHECK-LABEL: @test_fptosi_i8(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP2]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 @__qtoi(fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    [[TMP5:%.*]] = trunc i32 [[TMP3]] to i8
; CHECK-NEXT:    ret i8 [[TMP5]]
;
  %a = fptosi fp128 %x to i8
  ret i8 %a
}

define i16 @test_fptosi_i16(fp128 %x) {
; CHECK-LABEL: @test_fptosi_i16(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP2]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 @__qtoi(fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    [[TMP5:%.*]] = trunc i32 [[TMP3]] to i16
; CHECK-NEXT:    ret i16 [[TMP5]]
;
  %a = fptosi fp128 %x to i16
  ret i16 %a
}

define i32 @test_fptosi_i32(fp128 %x) {
; CHECK-LABEL: @test_fptosi_i32(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP2]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 @__qtoi(fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    ret i32 [[TMP3]]
;
  %a = fptosi fp128 %x to i32
  ret i32 %a
}

define i64 @test_fptosi_i64(fp128 %x) {
; CHECK-LABEL: @test_fptosi_i64(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP2]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP3:%.*]] = call i64 @__qtoj(fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    ret i64 [[TMP3]]
;
  %a = fptosi fp128 %x to i64
  ret i64 %a
}

define i128 @test_fptosi_i128(fp128 %x) {
; CHECK-LABEL: @test_fptosi_i128(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP2]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP3:%.*]] = call i128 @__qtom(fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    ret i128 [[TMP3]]
;
  %a = fptosi fp128 %x to i128
  ret i128 %a
}

define i8 @test_fptoui_i8(fp128 %x) {
; CHECK-LABEL: @test_fptoui_i8(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP2]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 @__qtou(fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    [[TMP5:%.*]] = trunc i32 [[TMP3]] to i8
; CHECK-NEXT:    ret i8 [[TMP5]]
;
  %a = fptoui fp128 %x to i8
  ret i8 %a
}

define i16 @test_fptoui_i16(fp128 %x) {
; CHECK-LABEL: @test_fptoui_i16(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP2]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 @__qtou(fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    [[TMP5:%.*]] = trunc i32 [[TMP3]] to i16
; CHECK-NEXT:    ret i16 [[TMP5]]
;
  %a = fptoui fp128 %x to i16
  ret i16 %a
}

define i32 @test_fptoui_i32(fp128 %x) {
; CHECK-LABEL: @test_fptoui_i32(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP2]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 @__qtou(fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    ret i32 [[TMP3]]
;
  %a = fptoui fp128 %x to i32
  ret i32 %a
}

define i64 @test_fptoui_i64(fp128 %x) {
; CHECK-LABEL: @test_fptoui_i64(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP2]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP3:%.*]] = call i64 @__qtok(fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    ret i64 [[TMP3]]
;
  %a = fptoui fp128 %x to i64
  ret i64 %a
}

define i128 @test_fptoui_i128(fp128 %x) {
; CHECK-LABEL: @test_fptoui_i128(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP2]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP3:%.*]] = call i128 @__qton(fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    ret i128 [[TMP3]]
;
  %a = fptoui fp128 %x to i128
  ret i128 %a
}

define i1 @test_fcmp_oeq(fp128 %x, fp128 %y) {
; CHECK-LABEL: @test_fcmp_oeq(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP3]])
; CHECK-NEXT:    store fp128 [[Y:%.*]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @__eqq(fp128* [[TMP2]], fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    [[TMP8:%.*]] = trunc i32 [[TMP5]] to i1
; CHECK-NEXT:    ret i1 [[TMP8]]
;
  %a = fcmp oeq fp128 %x, %y
  ret i1 %a
}

define i1 @test_fcmp_une(fp128 %x, fp128 %y) {
; CHECK-LABEL: @test_fcmp_une(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP3]])
; CHECK-NEXT:    store fp128 [[Y:%.*]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @__neq(fp128* [[TMP2]], fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    [[TMP8:%.*]] = trunc i32 [[TMP5]] to i1
; CHECK-NEXT:    ret i1 [[TMP8]]
;
  %a = fcmp une fp128 %x, %y
  ret i1 %a
}

define i1 @test_fcmp_olt(fp128 %x, fp128 %y) {
; CHECK-LABEL: @test_fcmp_olt(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP3]])
; CHECK-NEXT:    store fp128 [[Y:%.*]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @__ltq(fp128* [[TMP2]], fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    [[TMP8:%.*]] = trunc i32 [[TMP5]] to i1
; CHECK-NEXT:    ret i1 [[TMP8]]
;
  %a = fcmp olt fp128 %x, %y
  ret i1 %a
}

define i1 @test_fcmp_ogt(fp128 %x, fp128 %y) {
; CHECK-LABEL: @test_fcmp_ogt(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP3]])
; CHECK-NEXT:    store fp128 [[Y:%.*]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @__gtq(fp128* [[TMP2]], fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    [[TMP8:%.*]] = trunc i32 [[TMP5]] to i1
; CHECK-NEXT:    ret i1 [[TMP8]]
;
  %a = fcmp ogt fp128 %x, %y
  ret i1 %a
}

define i1 @test_fcmp_ole(fp128 %x, fp128 %y) {
; CHECK-LABEL: @test_fcmp_ole(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP3]])
; CHECK-NEXT:    store fp128 [[Y:%.*]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @__leq(fp128* [[TMP2]], fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    [[TMP8:%.*]] = trunc i32 [[TMP5]] to i1
; CHECK-NEXT:    ret i1 [[TMP8]]
;
  %a = fcmp ole fp128 %x, %y
  ret i1 %a
}

define i1 @test_fcmp_oge(fp128 %x, fp128 %y) {
; CHECK-LABEL: @test_fcmp_oge(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP3]])
; CHECK-NEXT:    store fp128 [[Y:%.*]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @__geq(fp128* [[TMP2]], fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    [[TMP8:%.*]] = trunc i32 [[TMP5]] to i1
; CHECK-NEXT:    ret i1 [[TMP8]]
;
  %a = fcmp oge fp128 %x, %y
  ret i1 %a
}

define i1 @test_fcmp_ult(fp128 %x, fp128 %y) {
; CHECK-LABEL: @test_fcmp_ult(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP3]])
; CHECK-NEXT:    store fp128 [[Y:%.*]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @__geq(fp128* [[TMP2]], fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    [[TMP8:%.*]] = trunc i32 [[TMP5]] to i1
; CHECK-NEXT:    [[TMP9:%.*]] = xor i1 [[TMP8]], true
; CHECK-NEXT:    ret i1 [[TMP9]]
;
  %a = fcmp ult fp128 %x, %y
  ret i1 %a
}

define i1 @test_fcmp_ugt(fp128 %x, fp128 %y) {
; CHECK-LABEL: @test_fcmp_ugt(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP3]])
; CHECK-NEXT:    store fp128 [[Y:%.*]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @__leq(fp128* [[TMP2]], fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    [[TMP8:%.*]] = trunc i32 [[TMP5]] to i1
; CHECK-NEXT:    [[TMP9:%.*]] = xor i1 [[TMP8]], true
; CHECK-NEXT:    ret i1 [[TMP9]]
;
  %a = fcmp ugt fp128 %x, %y
  ret i1 %a
}

define i1 @test_fcmp_ule(fp128 %x, fp128 %y) {
; CHECK-LABEL: @test_fcmp_ule(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP3]])
; CHECK-NEXT:    store fp128 [[Y:%.*]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @__gtq(fp128* [[TMP2]], fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    [[TMP8:%.*]] = trunc i32 [[TMP5]] to i1
; CHECK-NEXT:    [[TMP9:%.*]] = xor i1 [[TMP8]], true
; CHECK-NEXT:    ret i1 [[TMP9]]
;
  %a = fcmp ule fp128 %x, %y
  ret i1 %a
}

define i1 @test_fcmp_uge(fp128 %x, fp128 %y) {
; CHECK-LABEL: @test_fcmp_uge(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP3]])
; CHECK-NEXT:    store fp128 [[Y:%.*]], fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @__ltq(fp128* [[TMP2]], fp128* [[TMP1]])
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    [[TMP8:%.*]] = trunc i32 [[TMP5]] to i1
; CHECK-NEXT:    [[TMP9:%.*]] = xor i1 [[TMP8]], true
; CHECK-NEXT:    ret i1 [[TMP9]]
;
  %a = fcmp uge fp128 %x, %y
  ret i1 %a
}
