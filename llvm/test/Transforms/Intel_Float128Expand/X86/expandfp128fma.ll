; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt %s -enable-new-pm=0 -S -mtriple=x86_64-unknown-unknown -float128-expand -intel-libirc-allowed | FileCheck %s

define fp128 @test_expand_fp128fma(fp128 %a, fp128 %b, fp128 %c) {
; CHECK-LABEL: @test_expand_fp128fma(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP5:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    store fp128 [[C:%.*]], fp128* [[TMP3]], align 16
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    store fp128 [[B:%.*]], fp128* [[TMP4]], align 16
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast fp128* [[TMP5]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP8]])
; CHECK-NEXT:    store fp128 [[A:%.*]], fp128* [[TMP5]], align 16
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP9]])
; CHECK-NEXT:    call void @__mulq(fp128* [[TMP2]], fp128* [[TMP5]], fp128* [[TMP4]])
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP10]])
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP5]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = load fp128, fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP13:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP13]])
; CHECK-NEXT:    call void @__addq(fp128* [[TMP1]], fp128* [[TMP2]], fp128* [[TMP3]])
; CHECK-NEXT:    [[TMP14:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP14]])
; CHECK-NEXT:    [[TMP15:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP15]])
; CHECK-NEXT:    [[TMP16:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP17:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP17]])
; CHECK-NEXT:    [[D:%.*]] = call fp128 @llvm.fmuladd.f128(fp128 [[A]], fp128 [[B]], fp128 [[C]])
; CHECK-NEXT:    ret fp128 [[TMP16]]
;
  %d = call fp128 @llvm.fmuladd.f128(fp128 %a, fp128 %b, fp128 %c)
  ret fp128 %d
}

declare fp128 @llvm.fmuladd.f128(fp128, fp128, fp128)
