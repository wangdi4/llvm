; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt %s -S -mtriple=x86_64-unknown-unknown -float128-expand -intel-libirc-allowed | FileCheck %s

define fp128 @test_fadd_fadd(fp128 %x, fp128 %y) {
; CHECK-LABEL: @test_fadd_fadd(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP5]])
; CHECK-NEXT:    store fp128 [[Y:%.*]], fp128* [[TMP3]], align 16
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP4]], align 16
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    call void @__addq(fp128* [[TMP2]], fp128* [[TMP4]], fp128* [[TMP3]])
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP8]])
; CHECK-NEXT:    [[TMP9:%.*]] = load fp128, fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP10]])
; CHECK-NEXT:    call void @__addq(fp128* [[TMP1]], fp128* [[TMP4]], fp128* [[TMP2]])
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP12]])
; CHECK-NEXT:    [[TMP13:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP14:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP14]])
; CHECK-NEXT:    ret fp128 [[TMP13]]
;
  %a = fadd fp128 %x, %y
  %b = fadd fp128 %x, %a
  ret fp128 %b
}

define fp128 @test_fneg_fsub(fp128 %x, fp128 %y) {
; CHECK-LABEL: @test_fneg_fsub(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP5]])
; CHECK-NEXT:    store fp128 [[Y:%.*]], fp128* [[TMP3]], align 16
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP4]], align 16
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    call void @__negq(fp128* [[TMP2]], fp128* [[TMP4]])
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP8]])
; CHECK-NEXT:    [[TMP9:%.*]] = load fp128, fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP10]])
; CHECK-NEXT:    call void @__subq(fp128* [[TMP1]], fp128* [[TMP2]], fp128* [[TMP3]])
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP12]])
; CHECK-NEXT:    [[TMP13:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP14:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP14]])
; CHECK-NEXT:    ret fp128 [[TMP13]]
;
  %a = fneg fp128 %x
  %b = fsub fp128 %a, %y
  ret fp128 %b
}

define fp128 @test_fpext_fsub(float %x, fp128 %y) {
; CHECK-LABEL: @test_fpext_fsub(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    store fp128 [[Y:%.*]], fp128* [[TMP3]], align 16
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP5]])
; CHECK-NEXT:    call void @__ftoq(fp128* [[TMP2]], float [[X:%.*]])
; CHECK-NEXT:    [[TMP6:%.*]] = load fp128, fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    call void @__subq(fp128* [[TMP1]], fp128* [[TMP2]], fp128* [[TMP3]])
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP8]])
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP9]])
; CHECK-NEXT:    [[TMP10:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    ret fp128 [[TMP10]]
;
  %a = fpext float %x to fp128
  %b = fsub fp128 %a, %y
  ret fp128 %b
}

define fp128 @test_sitofp_fsub(i8 %x, fp128 %y) {
; CHECK-LABEL: @test_sitofp_fsub(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    store fp128 [[Y:%.*]], fp128* [[TMP3]], align 16
; CHECK-NEXT:    [[TMP5:%.*]] = sext i8 [[X:%.*]] to i32
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    call void @__itoq(fp128* [[TMP2]], i32 [[TMP5]])
; CHECK-NEXT:    [[TMP7:%.*]] = load fp128, fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP8]])
; CHECK-NEXT:    call void @__subq(fp128* [[TMP1]], fp128* [[TMP2]], fp128* [[TMP3]])
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP9]])
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP10]])
; CHECK-NEXT:    [[TMP11:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP12:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP12]])
; CHECK-NEXT:    ret fp128 [[TMP11]]
;
  %a = sitofp i8 %x to fp128
  %b = fsub fp128 %a, %y
  ret fp128 %b
}

define i1 @test_fsub_fcmp(fp128 %x, fp128 %y) {
; CHECK-LABEL: @test_fsub_fcmp(
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP4]])
; CHECK-NEXT:    store fp128 [[Y:%.*]], fp128* [[TMP2]], align 16
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP5]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP3]], align 16
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP6]])
; CHECK-NEXT:    call void @__subq(fp128* [[TMP1]], fp128* [[TMP3]], fp128* [[TMP2]])
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    [[TMP8:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP9:%.*]] = call i32 @__eqq(fp128* [[TMP1]], fp128* [[TMP2]])
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP10]])
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = trunc i32 [[TMP9]] to i1
; CHECK-NEXT:    ret i1 [[TMP12]]
;
  %a = fsub fp128 %x, %y
  %b = fcmp oeq fp128 %a, %y
  ret i1 %b
}



