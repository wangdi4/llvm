; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt %s -opaque-pointers -enable-new-pm=0 -S -mtriple=x86_64-unknown-unknown -float128-expand -intel-libirc-allowed | FileCheck %s

; Function Attrs: nofree noreturn nounwind uwtable
define dso_local i32 @main2(fp128 %x) local_unnamed_addr #0 {
; CHECK-LABEL: @main2(
; CHECK-NEXT:  bb1:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP5:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP5]])
; CHECK-NEXT:    store fp128 [[X:%.*]], ptr [[TMP5]], align 16
; CHECK-NEXT:    [[TMP6:%.*]] = icmp eq i32 0, 1
; CHECK-NEXT:    br i1 undef, label [[BB2:%.*]], label [[BB3:%.*]]
; CHECK:       bb2:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP1]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP1]], ptr [[TMP5]], ptr [[TMP5]])
; CHECK-NEXT:    [[TMP7:%.*]] = load fp128, ptr [[TMP1]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP1]])
; CHECK-NEXT:    br i1 undef, label [[BB4:%.*]], label [[BB5:%.*]]
; CHECK:       bb3:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP4]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP4]], ptr [[TMP5]], ptr [[TMP5]])
; CHECK-NEXT:    [[TMP8:%.*]] = load fp128, ptr [[TMP4]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP4]])
; CHECK-NEXT:    br i1 undef, label [[BB6:%.*]], label [[BB7:%.*]]
; CHECK:       bb4:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP0]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP0]], ptr [[TMP5]], ptr [[TMP5]])
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP5]])
; CHECK-NEXT:    [[TMP9:%.*]] = load fp128, ptr [[TMP0]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP0]])
; CHECK-NEXT:    ret i32 0
; CHECK:       bb5:
; CHECK-NEXT:    ret i32 1
; CHECK:       bb6:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP2]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP2]], ptr [[TMP5]], ptr [[TMP5]])
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP5]])
; CHECK-NEXT:    [[TMP10:%.*]] = load fp128, ptr [[TMP2]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP2]])
; CHECK-NEXT:    ret i32 2
; CHECK:       bb7:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP3]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP3]], ptr [[TMP5]], ptr [[TMP5]])
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP5]])
; CHECK-NEXT:    [[TMP11:%.*]] = load fp128, ptr [[TMP3]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP3]])
; CHECK-NEXT:    ret i32 3
;
bb1:
  %0 = icmp eq i32 0, 1
  br i1 undef, label %bb2, label %bb3
bb2:
  %1 = fadd fp128 %x, %x
  br i1 undef, label %bb4, label %bb5
bb3:
  %2 = fadd fp128 %x, %x
  br i1 undef, label %bb6, label %bb7
bb4:
  %3 = fadd fp128 %x, %x
  ret i32 0
bb5:
  ret i32 1
bb6:
  %4 = fadd fp128 %x, %x
  ret i32 2
bb7:
  %5 = fadd fp128 %x, %x
  ret i32 3
}
