; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt %s -opaque-pointers -bugpoint-enable-legacy-pm -S -mtriple=x86_64-unknown-unknown -float128-expand -intel-libirc-allowed | FileCheck %s

; Function Attrs: nofree noreturn nounwind uwtable
define dso_local i32 @main1(fp128 %x) local_unnamed_addr #0 {
; CHECK-LABEL: @main1(
; CHECK-NEXT:  bb1:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP3]])
; CHECK-NEXT:    store fp128 [[X:%.*]], ptr [[TMP3]], align 16
; CHECK-NEXT:    br i1 undef, label [[BB2:%.*]], label [[BB3:%.*]]
; CHECK:       bb2:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP0]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP0]], ptr [[TMP3]], ptr [[TMP3]])
; CHECK-NEXT:    [[TMP4:%.*]] = load fp128, ptr [[TMP0]], align 16
; CHECK-NEXT:    br label [[BB4:%.*]]
; CHECK:       bb3:
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @__eqq(ptr [[TMP3]], ptr [[TMP3]])
; CHECK-NEXT:    [[TMP6:%.*]] = trunc i32 [[TMP5]] to i1
; CHECK-NEXT:    br label [[BB4]]
; CHECK:       bb4:
; CHECK-NEXT:    [[TMP7:%.*]] = phi fp128 [ [[X]], [[BB3]] ], [ [[TMP4]], [[BB2]] ]
; CHECK-NEXT:    [[TMP8:%.*]] = phi ptr [ [[TMP3]], [[BB3]] ], [ [[TMP0]], [[BB2]] ]
; CHECK-NEXT:    br i1 undef, label [[BB5:%.*]], label [[BB6:%.*]]
; CHECK:       bb5:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP1]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP1]], ptr [[TMP8]], ptr [[TMP8]])
; CHECK-NEXT:    [[TMP9:%.*]] = load fp128, ptr [[TMP1]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP1]])
; CHECK-NEXT:    ret i32 0
; CHECK:       bb6:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP2]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP2]], ptr [[TMP8]], ptr [[TMP8]])
; CHECK-NEXT:    [[TMP10:%.*]] = load fp128, ptr [[TMP2]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP2]])
; CHECK-NEXT:    ret i32 1
;
bb1:
  br i1 undef, label %bb2, label %bb3
bb2:
  %0 = fadd fp128 %x, %x
  br label %bb4
bb3:
  %1 = fcmp oeq fp128 %x, %x
  br label %bb4
bb4:
  %2 = phi fp128 [%x, %bb3], [%0, %bb2]
  br i1 undef, label %bb5, label %bb6
bb5:
  %3 = fadd fp128 %2, %2
  ret i32 0
bb6:
  %4 = fadd fp128 %2, %2
  ret i32 1
}

define fp128 @f1(fp128 %x) {
; CHECK-LABEL: @f1(
; CHECK-NEXT:    ret fp128 [[X:%.*]]
;
  ret fp128 %x
}

; Function Attrs: nofree noreturn nounwind uwtable
define dso_local i32 @main2(fp128 %x) local_unnamed_addr #0 {
; CHECK-LABEL: @main2(
; CHECK-NEXT:  bb1:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP3]])
; CHECK-NEXT:    store fp128 [[X:%.*]], ptr [[TMP3]], align 16
; CHECK-NEXT:    [[Y:%.*]] = call fp128 @f1(fp128 [[X]])
; CHECK-NEXT:    br i1 undef, label [[BB2:%.*]], label [[BB3:%.*]]
; CHECK:       bb2:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP1]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP1]], ptr [[TMP3]], ptr [[TMP3]])
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP3]])
; CHECK-NEXT:    [[TMP4:%.*]] = load fp128, ptr [[TMP1]], align 16
; CHECK-NEXT:    br label [[BB4:%.*]]
; CHECK:       bb3:
; CHECK-NEXT:    br label [[BB4]]
; CHECK:       bb4:
; CHECK-NEXT:    [[TMP5:%.*]] = phi fp128 [ [[TMP4]], [[BB2]] ], [ [[Y]], [[BB3]] ]
; CHECK-NEXT:    store fp128 [[TMP5]], ptr [[TMP0]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP2]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP2]], ptr [[TMP0]], ptr [[TMP0]])
; CHECK-NEXT:    [[TMP6:%.*]] = load fp128, ptr [[TMP2]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP2]])
; CHECK-NEXT:    ret i32 0
;
bb1:
  %y = call fp128 @f1(fp128 %x)
  br i1 undef, label %bb2, label %bb3
bb2:
  %xx1 = fadd fp128 %x, %x
  br label %bb4
bb3:
  br label %bb4
bb4:
  %0 = phi fp128 [%xx1, %bb2], [%y, %bb3]
  %1 = fadd fp128 %0, %0
  ret i32 0
}

; Function Attrs: nofree noreturn nounwind uwtable
define dso_local i32 @main3(fp128 %x) local_unnamed_addr #0 {
; CHECK-LABEL: @main3(
; CHECK-NEXT:  bb1:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP5:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP5]])
; CHECK-NEXT:    store fp128 [[X:%.*]], ptr [[TMP5]], align 16
; CHECK-NEXT:    [[Y:%.*]] = call fp128 @f1(fp128 [[X]])
; CHECK-NEXT:    br i1 undef, label [[BB2:%.*]], label [[BB3:%.*]]
; CHECK:       bb2:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP1]])
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP0]])
; CHECK-NEXT:    store fp128 [[Y]], ptr [[TMP0]], align 16
; CHECK-NEXT:    call void @__addq(ptr [[TMP1]], ptr [[TMP5]], ptr [[TMP0]])
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP5]])
; CHECK-NEXT:    [[TMP6:%.*]] = load fp128, ptr [[TMP1]], align 16
; CHECK-NEXT:    br label [[BB4:%.*]]
; CHECK:       bb3:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP4]])
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP3]])
; CHECK-NEXT:    store fp128 [[Y]], ptr [[TMP3]], align 16
; CHECK-NEXT:    call void @__addq(ptr [[TMP4]], ptr [[TMP5]], ptr [[TMP3]])
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP5]])
; CHECK-NEXT:    [[TMP7:%.*]] = load fp128, ptr [[TMP4]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP4]])
; CHECK-NEXT:    br label [[BB4]]
; CHECK:       bb4:
; CHECK-NEXT:    [[TMP8:%.*]] = phi fp128 [ [[TMP6]], [[BB2]] ], [ [[Y]], [[BB3]] ]
; CHECK-NEXT:    [[TMP9:%.*]] = phi ptr [ [[TMP1]], [[BB2]] ], [ [[TMP3]], [[BB3]] ]
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP2]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP2]], ptr [[TMP9]], ptr [[TMP9]])
; CHECK-NEXT:    [[TMP10:%.*]] = load fp128, ptr [[TMP2]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP2]])
; CHECK-NEXT:    ret i32 0
;
bb1:
  %y = call fp128 @f1(fp128 %x)
  br i1 undef, label %bb2, label %bb3
bb2:
  %yy1 = fadd fp128 %x, %y
  br label %bb4
bb3:
  %yy2 = fadd fp128 %x, %y
  br label %bb4
bb4:
  %0 = phi fp128 [%yy1, %bb2], [%y, %bb3]
  %1 = fadd fp128 %0, %0
  ret i32 0
}

; Function Attrs: nofree noreturn nounwind uwtable
define dso_local i32 @main4(fp128 %x) local_unnamed_addr #0 {
; CHECK-LABEL: @main4(
; CHECK-NEXT:  bb1:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP5:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP5]])
; CHECK-NEXT:    store fp128 [[X:%.*]], ptr [[TMP5]], align 16
; CHECK-NEXT:    [[Y:%.*]] = call fp128 @f1(fp128 [[X]])
; CHECK-NEXT:    br i1 undef, label [[BB2:%.*]], label [[BB3:%.*]]
; CHECK:       bb2:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP1]])
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP0]])
; CHECK-NEXT:    store fp128 [[Y]], ptr [[TMP0]], align 16
; CHECK-NEXT:    call void @__addq(ptr [[TMP1]], ptr [[TMP5]], ptr [[TMP0]])
; CHECK-NEXT:    [[TMP6:%.*]] = load fp128, ptr [[TMP1]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP1]])
; CHECK-NEXT:    br label [[BB4:%.*]]
; CHECK:       bb3:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP4]])
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP3]])
; CHECK-NEXT:    store fp128 [[Y]], ptr [[TMP3]], align 16
; CHECK-NEXT:    call void @__addq(ptr [[TMP4]], ptr [[TMP5]], ptr [[TMP3]])
; CHECK-NEXT:    [[TMP7:%.*]] = load fp128, ptr [[TMP4]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP4]])
; CHECK-NEXT:    br label [[BB4]]
; CHECK:       bb4:
; CHECK-NEXT:    [[TMP8:%.*]] = phi fp128 [ [[X]], [[BB2]] ], [ [[Y]], [[BB3]] ]
; CHECK-NEXT:    [[TMP9:%.*]] = phi fp128 [ [[X]], [[BB2]] ], [ [[Y]], [[BB3]] ]
; CHECK-NEXT:    [[TMP10:%.*]] = phi ptr [ [[TMP5]], [[BB2]] ], [ [[TMP3]], [[BB3]] ]
; CHECK-NEXT:    [[TMP11:%.*]] = phi ptr [ [[TMP5]], [[BB2]] ], [ [[TMP3]], [[BB3]] ]
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP2]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP2]], ptr [[TMP10]], ptr [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = load fp128, ptr [[TMP2]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP2]])
; CHECK-NEXT:    ret i32 0
;
bb1:
  %y = call fp128 @f1(fp128 %x)
  br i1 undef, label %bb2, label %bb3
bb2:
  %yy1 = fadd fp128 %x, %y
  br label %bb4
bb3:
  %yy2 = fadd fp128 %x, %y
  br label %bb4
bb4:
  %0 = phi fp128 [%x, %bb2], [%y, %bb3]
  %1 = phi fp128 [%x, %bb2], [%y, %bb3]
  %2 = fadd fp128 %0, %1
  ret i32 0
}

; Function Attrs: nofree noreturn nounwind uwtable
define dso_local i32 @main5(fp128 %x) local_unnamed_addr #0 {
; CHECK-LABEL: @main5(
; CHECK-NEXT:  bb1:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP5:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[Y:%.*]] = call fp128 @f1(fp128 [[X:%.*]])
; CHECK-NEXT:    br i1 undef, label [[BB2:%.*]], label [[BB3:%.*]]
; CHECK:       bb2:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP2]])
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP1]])
; CHECK-NEXT:    store fp128 [[Y]], ptr [[TMP1]], align 16
; CHECK-NEXT:    call void @__addq(ptr [[TMP2]], ptr [[TMP1]], ptr [[TMP1]])
; CHECK-NEXT:    [[TMP6:%.*]] = load fp128, ptr [[TMP2]], align 16
; CHECK-NEXT:    br label [[BB4:%.*]]
; CHECK:       bb3:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP5]])
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP4]])
; CHECK-NEXT:    store fp128 [[Y]], ptr [[TMP4]], align 16
; CHECK-NEXT:    call void @__addq(ptr [[TMP5]], ptr [[TMP4]], ptr [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = load fp128, ptr [[TMP5]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP5]])
; CHECK-NEXT:    br label [[BB4]]
; CHECK:       bb4:
; CHECK-NEXT:    [[TMP8:%.*]] = phi fp128 [ [[X]], [[BB2]] ], [ [[Y]], [[BB3]] ]
; CHECK-NEXT:    [[TMP9:%.*]] = phi fp128 [ [[TMP6]], [[BB2]] ], [ [[Y]], [[BB3]] ]
; CHECK-NEXT:    [[TMP10:%.*]] = phi ptr [ [[TMP2]], [[BB2]] ], [ [[TMP4]], [[BB3]] ]
; CHECK-NEXT:    store fp128 [[TMP8]], ptr [[TMP0]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP3]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP3]], ptr [[TMP0]], ptr [[TMP10]])
; CHECK-NEXT:    [[TMP11:%.*]] = load fp128, ptr [[TMP3]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP3]])
; CHECK-NEXT:    ret i32 0
;
bb1:
  %y = call fp128 @f1(fp128 %x)
  br i1 undef, label %bb2, label %bb3
bb2:
  %yy1 = fadd fp128 %y, %y
  br label %bb4
bb3:
  %yy2 = fadd fp128 %y, %y
  br label %bb4
bb4:
  %0 = phi fp128 [%x, %bb2], [%y, %bb3]
  %1 = phi fp128 [%yy1, %bb2], [%y, %bb3]
  %2 = fadd fp128 %0, %1
  ret i32 0
}

; Function Attrs: nofree noreturn nounwind uwtable
define dso_local i32 @main6(fp128 %x) local_unnamed_addr #0 {
; CHECK-LABEL: @main6(
; CHECK-NEXT:  bb1:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP5:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP6:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP6]])
; CHECK-NEXT:    store fp128 [[X:%.*]], ptr [[TMP6]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP5]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP5]], ptr [[TMP6]], ptr [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = load fp128, ptr [[TMP5]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP4]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP4]], ptr [[TMP6]], ptr [[TMP6]])
; CHECK-NEXT:    [[TMP8:%.*]] = load fp128, ptr [[TMP4]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP3]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP3]], ptr [[TMP6]], ptr [[TMP6]])
; CHECK-NEXT:    [[TMP9:%.*]] = load fp128, ptr [[TMP3]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP2]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP2]], ptr [[TMP6]], ptr [[TMP6]])
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP6]])
; CHECK-NEXT:    [[TMP10:%.*]] = load fp128, ptr [[TMP2]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP2]])
; CHECK-NEXT:    br i1 undef, label [[BB2:%.*]], label [[BB3:%.*]]
; CHECK:       bb2:
; CHECK-NEXT:    br label [[BB4:%.*]]
; CHECK:       bb3:
; CHECK-NEXT:    br label [[BB4]]
; CHECK:       bb4:
; CHECK-NEXT:    [[X3:%.*]] = phi fp128 [ [[TMP7]], [[BB2]] ], [ [[TMP8]], [[BB3]] ]
; CHECK-NEXT:    br i1 undef, label [[BB5:%.*]], label [[BB6:%.*]]
; CHECK:       bb5:
; CHECK-NEXT:    br label [[BB7:%.*]]
; CHECK:       bb6:
; CHECK-NEXT:    br label [[BB7]]
; CHECK:       bb7:
; CHECK-NEXT:    [[X5:%.*]] = phi fp128 [ [[X3]], [[BB5]] ], [ [[TMP9]], [[BB6]] ]
; CHECK-NEXT:    store fp128 [[X5]], ptr [[TMP0]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP1]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP1]], ptr [[TMP0]], ptr [[TMP0]])
; CHECK-NEXT:    [[TMP11:%.*]] = load fp128, ptr [[TMP1]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP1]])
; CHECK-NEXT:    ret i32 0
;
bb1:
  %x1 = fadd fp128 %x, %x
  %x2 = fadd fp128 %x, %x
  %x4 = fadd fp128 %x, %x
  %x6 = fadd fp128 %x, %x
  br i1 undef, label %bb2, label %bb3
bb2:
  br label %bb4
bb3:
  br label %bb4
bb4:
  %x3 = phi fp128 [%x1, %bb2], [%x2, %bb3]
  br i1 undef, label %bb5, label %bb6
bb5:
  br label %bb7
bb6:
  br label %bb7
bb7:
  %x5 = phi fp128 [%x3, %bb5], [%x4, %bb6]
  %z2 = fadd fp128 %x5, %x5
  ret i32 0
}

; Function Attrs: nofree noreturn nounwind uwtable
define dso_local i32 @main7(fp128 %x) local_unnamed_addr #0 {
; CHECK-LABEL: @main7(
; CHECK-NEXT:  bb1:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP4]])
; CHECK-NEXT:    store fp128 [[X:%.*]], ptr [[TMP4]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP3]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP3]], ptr [[TMP4]], ptr [[TMP4]])
; CHECK-NEXT:    [[TMP5:%.*]] = load fp128, ptr [[TMP3]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP2]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP2]], ptr [[TMP4]], ptr [[TMP4]])
; CHECK-NEXT:    [[TMP6:%.*]] = load fp128, ptr [[TMP2]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP1]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP1]], ptr [[TMP4]], ptr [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = load fp128, ptr [[TMP1]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP0]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP0]], ptr [[TMP4]], ptr [[TMP4]])
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP4]])
; CHECK-NEXT:    [[TMP8:%.*]] = load fp128, ptr [[TMP0]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP0]])
; CHECK-NEXT:    br i1 undef, label [[BB2:%.*]], label [[BB3:%.*]]
; CHECK:       bb2:
; CHECK-NEXT:    br label [[BB4:%.*]]
; CHECK:       bb3:
; CHECK-NEXT:    br label [[BB4]]
; CHECK:       bb4:
; CHECK-NEXT:    [[X3:%.*]] = phi fp128 [ [[TMP5]], [[BB2]] ], [ [[TMP6]], [[BB3]] ]
; CHECK-NEXT:    br i1 undef, label [[BB5:%.*]], label [[BB6:%.*]]
; CHECK:       bb5:
; CHECK-NEXT:    br label [[BB7:%.*]]
; CHECK:       bb6:
; CHECK-NEXT:    br label [[BB7]]
; CHECK:       bb7:
; CHECK-NEXT:    [[X5:%.*]] = phi fp128 [ [[X3]], [[BB5]] ], [ [[TMP7]], [[BB6]] ]
; CHECK-NEXT:    [[Z2:%.*]] = call fp128 @f1(fp128 [[X5]])
; CHECK-NEXT:    ret i32 0
;
bb1:
  %x1 = fadd fp128 %x, %x
  %x2 = fadd fp128 %x, %x
  %x4 = fadd fp128 %x, %x
  %x6 = fadd fp128 %x, %x
  br i1 undef, label %bb2, label %bb3
bb2:
  br label %bb4
bb3:
  br label %bb4
bb4:
  %x3 = phi fp128 [%x1, %bb2], [%x2, %bb3]
  br i1 undef, label %bb5, label %bb6
bb5:
  br label %bb7
bb6:
  br label %bb7
bb7:
  %x5 = phi fp128 [%x3, %bb5], [%x4, %bb6]
  %z2 = call fp128 @f1(fp128 %x5)
  ret i32 0
}

; Function Attrs: nofree noreturn nounwind uwtable
define dso_local i32 @main8(fp128 %x) local_unnamed_addr #0 {
; CHECK-LABEL: @main8(
; CHECK-NEXT:  bb1:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP5:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP5]])
; CHECK-NEXT:    store fp128 [[X:%.*]], ptr [[TMP5]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP4]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP4]], ptr [[TMP5]], ptr [[TMP5]])
; CHECK-NEXT:    [[TMP6:%.*]] = load fp128, ptr [[TMP4]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP3]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP3]], ptr [[TMP5]], ptr [[TMP5]])
; CHECK-NEXT:    [[TMP7:%.*]] = load fp128, ptr [[TMP3]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP2]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP2]], ptr [[TMP5]], ptr [[TMP5]])
; CHECK-NEXT:    [[TMP8:%.*]] = load fp128, ptr [[TMP2]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP1]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP1]], ptr [[TMP5]], ptr [[TMP5]])
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP5]])
; CHECK-NEXT:    [[TMP9:%.*]] = load fp128, ptr [[TMP1]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP1]])
; CHECK-NEXT:    br i1 undef, label [[BB2:%.*]], label [[BB3:%.*]]
; CHECK:       bb2:
; CHECK-NEXT:    br label [[BB4:%.*]]
; CHECK:       bb3:
; CHECK-NEXT:    br label [[BB4]]
; CHECK:       bb4:
; CHECK-NEXT:    [[X3:%.*]] = phi fp128 [ [[TMP6]], [[BB2]] ], [ [[TMP7]], [[BB3]] ]
; CHECK-NEXT:    [[TMP10:%.*]] = phi ptr [ [[TMP4]], [[BB2]] ], [ [[TMP3]], [[BB3]] ]
; CHECK-NEXT:    br i1 undef, label [[BB5:%.*]], label [[BB6:%.*]]
; CHECK:       bb5:
; CHECK-NEXT:    br label [[BB7:%.*]]
; CHECK:       bb6:
; CHECK-NEXT:    br label [[BB7]]
; CHECK:       bb7:
; CHECK-NEXT:    [[X5:%.*]] = phi fp128 [ [[X3]], [[BB5]] ], [ [[TMP8]], [[BB6]] ]
; CHECK-NEXT:    [[Z1:%.*]] = call fp128 @f1(fp128 [[X5]])
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP0]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP0]], ptr [[TMP10]], ptr [[TMP10]])
; CHECK-NEXT:    [[TMP11:%.*]] = load fp128, ptr [[TMP0]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP0]])
; CHECK-NEXT:    ret i32 0
;
bb1:
  %x1 = fadd fp128 %x, %x
  %x2 = fadd fp128 %x, %x
  %x4 = fadd fp128 %x, %x
  %x6 = fadd fp128 %x, %x
  br i1 undef, label %bb2, label %bb3
bb2:
  br label %bb4
bb3:
  br label %bb4
bb4:
  %x3 = phi fp128 [%x1, %bb2], [%x2, %bb3]
  br i1 undef, label %bb5, label %bb6
bb5:
  br label %bb7
bb6:
  br label %bb7
bb7:
  %x5 = phi fp128 [%x3, %bb5], [%x4, %bb6]
  %z1 = call fp128 @f1(fp128 %x5)
  %z2 = fadd fp128 %x3, %x3
  ret i32 0
}

; Function Attrs: nofree noreturn nounwind uwtable
define dso_local i32 @main9(fp128 %x) local_unnamed_addr #0 {
; CHECK-LABEL: @main9(
; CHECK-NEXT:  bb1:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP5:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP6:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP6]])
; CHECK-NEXT:    store fp128 [[X:%.*]], ptr [[TMP6]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP5]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP5]], ptr [[TMP6]], ptr [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = load fp128, ptr [[TMP5]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP4]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP4]], ptr [[TMP6]], ptr [[TMP6]])
; CHECK-NEXT:    [[TMP8:%.*]] = load fp128, ptr [[TMP4]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP3]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP3]], ptr [[TMP6]], ptr [[TMP6]])
; CHECK-NEXT:    [[TMP9:%.*]] = load fp128, ptr [[TMP3]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP2]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP2]], ptr [[TMP6]], ptr [[TMP6]])
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP6]])
; CHECK-NEXT:    [[TMP10:%.*]] = load fp128, ptr [[TMP2]], align 16
; CHECK-NEXT:    br i1 undef, label [[BB2:%.*]], label [[BB3:%.*]]
; CHECK:       bb2:
; CHECK-NEXT:    br label [[BB4:%.*]]
; CHECK:       bb3:
; CHECK-NEXT:    br label [[BB4]]
; CHECK:       bb4:
; CHECK-NEXT:    [[X3:%.*]] = phi fp128 [ [[TMP7]], [[BB2]] ], [ [[TMP8]], [[BB3]] ]
; CHECK-NEXT:    br i1 undef, label [[BB5:%.*]], label [[BB6:%.*]]
; CHECK:       bb5:
; CHECK-NEXT:    br label [[BB7:%.*]]
; CHECK:       bb6:
; CHECK-NEXT:    br label [[BB7]]
; CHECK:       bb7:
; CHECK-NEXT:    [[X5:%.*]] = phi fp128 [ [[X3]], [[BB5]] ], [ [[TMP9]], [[BB6]] ]
; CHECK-NEXT:    [[X7:%.*]] = phi fp128 [ [[X3]], [[BB5]] ], [ [[TMP10]], [[BB6]] ]
; CHECK-NEXT:    store fp128 [[X7]], ptr [[TMP0]], align 16
; CHECK-NEXT:    [[Z1:%.*]] = call fp128 @f1(fp128 [[X5]])
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP1]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP1]], ptr [[TMP0]], ptr [[TMP0]])
; CHECK-NEXT:    [[TMP11:%.*]] = load fp128, ptr [[TMP1]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP1]])
; CHECK-NEXT:    ret i32 0
;
bb1:
  %x1 = fadd fp128 %x, %x
  %x2 = fadd fp128 %x, %x
  %x4 = fadd fp128 %x, %x
  %x6 = fadd fp128 %x, %x
  br i1 undef, label %bb2, label %bb3
bb2:
  br label %bb4
bb3:
  br label %bb4
bb4:
  %x3 = phi fp128 [%x1, %bb2], [%x2, %bb3]
  br i1 undef, label %bb5, label %bb6
bb5:
  br label %bb7
bb6:
  br label %bb7
bb7:
  %x5 = phi fp128 [%x3, %bb5], [%x4, %bb6]
  %x7 = phi fp128 [%x3, %bb5], [%x6, %bb6]
  %z1 = call fp128 @f1(fp128 %x5)
  %z2 = fadd fp128 %x7, %x7
  ret i32 0
}

; Function Attrs: nofree noreturn nounwind uwtable
define dso_local i32 @main10(fp128 %x) local_unnamed_addr #0 {
; CHECK-LABEL: @main10(
; CHECK-NEXT:  bb1:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP5:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP6:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP6]])
; CHECK-NEXT:    store fp128 [[X:%.*]], ptr [[TMP6]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP5]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP5]], ptr [[TMP6]], ptr [[TMP6]])
; CHECK-NEXT:    [[TMP7:%.*]] = load fp128, ptr [[TMP5]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP4]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP4]], ptr [[TMP6]], ptr [[TMP6]])
; CHECK-NEXT:    [[TMP8:%.*]] = load fp128, ptr [[TMP4]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP3]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP3]], ptr [[TMP6]], ptr [[TMP6]])
; CHECK-NEXT:    [[TMP9:%.*]] = load fp128, ptr [[TMP3]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP2]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP2]], ptr [[TMP6]], ptr [[TMP6]])
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP6]])
; CHECK-NEXT:    [[TMP10:%.*]] = load fp128, ptr [[TMP2]], align 16
; CHECK-NEXT:    br i1 undef, label [[BB2:%.*]], label [[BB3:%.*]]
; CHECK:       bb2:
; CHECK-NEXT:    br label [[BB4:%.*]]
; CHECK:       bb3:
; CHECK-NEXT:    br label [[BB4]]
; CHECK:       bb4:
; CHECK-NEXT:    [[X3:%.*]] = phi fp128 [ [[TMP7]], [[BB2]] ], [ [[TMP8]], [[BB3]] ]
; CHECK-NEXT:    [[TMP11:%.*]] = phi ptr [ [[TMP5]], [[BB2]] ], [ [[TMP4]], [[BB3]] ]
; CHECK-NEXT:    br i1 undef, label [[BB5:%.*]], label [[BB6:%.*]]
; CHECK:       bb5:
; CHECK-NEXT:    br label [[BB7:%.*]]
; CHECK:       bb6:
; CHECK-NEXT:    br label [[BB7]]
; CHECK:       bb7:
; CHECK-NEXT:    [[X5:%.*]] = phi fp128 [ [[X3]], [[BB5]] ], [ [[TMP9]], [[BB6]] ]
; CHECK-NEXT:    [[X7:%.*]] = phi fp128 [ [[X3]], [[BB5]] ], [ [[TMP10]], [[BB6]] ]
; CHECK-NEXT:    [[TMP12:%.*]] = phi ptr [ [[TMP11]], [[BB5]] ], [ [[TMP2]], [[BB6]] ]
; CHECK-NEXT:    [[Z1:%.*]] = call fp128 @f1(fp128 [[X5]])
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP1]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP1]], ptr [[TMP12]], ptr [[TMP12]])
; CHECK-NEXT:    [[TMP13:%.*]] = load fp128, ptr [[TMP1]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP1]])
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP0]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP0]], ptr [[TMP11]], ptr [[TMP11]])
; CHECK-NEXT:    [[TMP14:%.*]] = load fp128, ptr [[TMP0]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP0]])
; CHECK-NEXT:    ret i32 0
;
bb1:
  %x1 = fadd fp128 %x, %x
  %x2 = fadd fp128 %x, %x
  %x4 = fadd fp128 %x, %x
  %x6 = fadd fp128 %x, %x
  br i1 undef, label %bb2, label %bb3
bb2:
  br label %bb4
bb3:
  br label %bb4
bb4:
  %x3 = phi fp128 [%x1, %bb2], [%x2, %bb3]
  br i1 undef, label %bb5, label %bb6
bb5:
  br label %bb7
bb6:
  br label %bb7
bb7:
  %x5 = phi fp128 [%x3, %bb5], [%x4, %bb6]
  %x7 = phi fp128 [%x3, %bb5], [%x6, %bb6]
  %z1 = call fp128 @f1(fp128 %x5)
  %z2 = fadd fp128 %x7, %x7
  %z3 = fadd fp128 %x3, %x3
  ret i32 0
}

; Function Attrs: nofree noreturn nounwind uwtable
define dso_local i32 @main11(fp128 %x) local_unnamed_addr #0 {
; CHECK-LABEL: @main11(
; CHECK-NEXT:  bb1:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP5:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP5]])
; CHECK-NEXT:    store fp128 [[X:%.*]], ptr [[TMP5]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP4]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP4]], ptr [[TMP5]], ptr [[TMP5]])
; CHECK-NEXT:    [[TMP6:%.*]] = load fp128, ptr [[TMP4]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP3]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP3]], ptr [[TMP5]], ptr [[TMP5]])
; CHECK-NEXT:    [[TMP7:%.*]] = load fp128, ptr [[TMP3]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP2]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP2]], ptr [[TMP5]], ptr [[TMP5]])
; CHECK-NEXT:    [[TMP8:%.*]] = load fp128, ptr [[TMP2]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP2]])
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP1]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP1]], ptr [[TMP5]], ptr [[TMP5]])
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP5]])
; CHECK-NEXT:    [[TMP9:%.*]] = load fp128, ptr [[TMP1]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP1]])
; CHECK-NEXT:    br i1 undef, label [[BB2:%.*]], label [[BB3:%.*]]
; CHECK:       bb2:
; CHECK-NEXT:    br label [[BB4:%.*]]
; CHECK:       bb3:
; CHECK-NEXT:    br label [[BB4]]
; CHECK:       bb4:
; CHECK-NEXT:    [[X3:%.*]] = phi fp128 [ [[TMP6]], [[BB2]] ], [ [[TMP7]], [[BB3]] ]
; CHECK-NEXT:    [[TMP10:%.*]] = phi ptr [ [[TMP4]], [[BB2]] ], [ [[TMP3]], [[BB3]] ]
; CHECK-NEXT:    [[Z1:%.*]] = call fp128 @f1(fp128 [[X3]])
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP0]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP0]], ptr [[TMP10]], ptr [[TMP10]])
; CHECK-NEXT:    [[TMP11:%.*]] = load fp128, ptr [[TMP0]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP0]])
; CHECK-NEXT:    ret i32 0
;
bb1:
  %x1 = fadd fp128 %x, %x
  %x2 = fadd fp128 %x, %x
  %x4 = fadd fp128 %x, %x
  %x6 = fadd fp128 %x, %x
  br i1 undef, label %bb2, label %bb3
bb2:
  br label %bb4
bb3:
  br label %bb4
bb4:
  %x3 = phi fp128 [%x1, %bb2], [%x2, %bb3]
  %z1 = call fp128 @f1(fp128 %x3)
  %z3 = fadd fp128 %x3, %x3
  ret i32 0
}

; Function Attrs: nofree noreturn nounwind uwtable
define dso_local i32 @main12(fp128 %x) local_unnamed_addr #0 {
; CHECK-LABEL: @main12(
; CHECK-NEXT:  bb1:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP5:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP6:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP7:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP7]])
; CHECK-NEXT:    store fp128 [[X:%.*]], ptr [[TMP7]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP6]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP6]], ptr [[TMP7]], ptr [[TMP7]])
; CHECK-NEXT:    [[TMP8:%.*]] = load fp128, ptr [[TMP6]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP5]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP5]], ptr [[TMP7]], ptr [[TMP7]])
; CHECK-NEXT:    [[TMP9:%.*]] = load fp128, ptr [[TMP5]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP4]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP4]], ptr [[TMP7]], ptr [[TMP7]])
; CHECK-NEXT:    [[TMP10:%.*]] = load fp128, ptr [[TMP4]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP3]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP3]], ptr [[TMP7]], ptr [[TMP7]])
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP7]])
; CHECK-NEXT:    [[TMP11:%.*]] = load fp128, ptr [[TMP3]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP3]])
; CHECK-NEXT:    br i1 undef, label [[BB2:%.*]], label [[BB3:%.*]]
; CHECK:       bb2:
; CHECK-NEXT:    br label [[BB4:%.*]]
; CHECK:       bb3:
; CHECK-NEXT:    br label [[BB4]]
; CHECK:       bb4:
; CHECK-NEXT:    [[X3:%.*]] = phi fp128 [ [[TMP8]], [[BB2]] ], [ [[TMP9]], [[BB3]] ]
; CHECK-NEXT:    br i1 undef, label [[BB5:%.*]], label [[BB6:%.*]]
; CHECK:       bb5:
; CHECK-NEXT:    br label [[BB7:%.*]]
; CHECK:       bb6:
; CHECK-NEXT:    br label [[BB7]]
; CHECK:       bb7:
; CHECK-NEXT:    [[X5:%.*]] = phi fp128 [ [[X3]], [[BB5]] ], [ [[TMP10]], [[BB6]] ]
; CHECK-NEXT:    store fp128 [[X5]], ptr [[TMP0]], align 16
; CHECK-NEXT:    br i1 undef, label [[BB8:%.*]], label [[BB9:%.*]]
; CHECK:       bb8:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP1]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP1]], ptr [[TMP0]], ptr [[TMP0]])
; CHECK-NEXT:    [[TMP12:%.*]] = load fp128, ptr [[TMP1]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP1]])
; CHECK-NEXT:    ret i32 0
; CHECK:       bb9:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP2]])
; CHECK-NEXT:    call void @__subq(ptr [[TMP2]], ptr [[TMP0]], ptr [[TMP0]])
; CHECK-NEXT:    [[TMP13:%.*]] = load fp128, ptr [[TMP2]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP2]])
; CHECK-NEXT:    ret i32 1
;
bb1:
  %x1 = fadd fp128 %x, %x
  %x2 = fadd fp128 %x, %x
  %x4 = fadd fp128 %x, %x
  %x6 = fadd fp128 %x, %x
  br i1 undef, label %bb2, label %bb3
bb2:
  br label %bb4
bb3:
  br label %bb4
bb4:
  %x3 = phi fp128 [%x1, %bb2], [%x2, %bb3]
  br i1 undef, label %bb5, label %bb6
bb5:
  br label %bb7
bb6:
  br label %bb7
bb7:
  %x5 = phi fp128 [%x3, %bb5], [%x4, %bb6]
  br i1 undef, label %bb8, label %bb9
bb8:
  %z1 = fadd fp128 %x5, %x5
  ret i32 0
bb9:
  %z2 = fsub fp128 %x5, %x5
  ret i32 1
}

@c = dso_local local_unnamed_addr global { fp128, fp128 } zeroinitializer, align 16
@d = dso_local local_unnamed_addr global { fp128, fp128 } zeroinitializer, align 16
@b = dso_local local_unnamed_addr global { fp128, fp128 } zeroinitializer, align 16
@e = dso_local local_unnamed_addr global i32 0, align 4

; Function Attrs: noreturn nounwind uwtable
define dso_local i32 @f() local_unnamed_addr #0 {
; CHECK-LABEL: @f(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP5:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP6:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP7:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP8:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP9:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP:%.*]] = alloca { fp128, fp128 }, align 16
; CHECK-NEXT:    [[TMP_REALP:%.*]] = getelementptr inbounds { fp128, fp128 }, ptr [[TMP]], i64 0, i32 0
; CHECK-NEXT:    [[TMP_IMAGP:%.*]] = getelementptr inbounds { fp128, fp128 }, ptr [[TMP]], i64 0, i32 1
; CHECK-NEXT:    [[C_REAL_PRE:%.*]] = load fp128, ptr @c, align 16
; CHECK-NEXT:    [[C_IMAG_PRE:%.*]] = load fp128, ptr getelementptr inbounds ({ fp128, fp128 }, ptr @c, i64 0, i32 1), align 16
; CHECK-NEXT:    br label [[FOR_COND:%.*]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[C_IMAG:%.*]] = phi fp128 [ [[IMAG_MUL_PHI:%.*]], [[COMPLEX_MUL_CONT:%.*]] ], [ [[C_IMAG_PRE]], [[ENTRY:%.*]] ]
; CHECK-NEXT:    [[C_REAL:%.*]] = phi fp128 [ [[REAL_MUL_PHI:%.*]], [[COMPLEX_MUL_CONT]] ], [ [[C_REAL_PRE]], [[ENTRY]] ]
; CHECK-NEXT:    store fp128 [[C_REAL]], ptr [[TMP0]], align 16
; CHECK-NEXT:    store fp128 [[C_IMAG]], ptr [[TMP1]], align 16
; CHECK-NEXT:    store fp128 [[C_REAL]], ptr @d, align 16
; CHECK-NEXT:    store fp128 [[C_IMAG]], ptr getelementptr inbounds ({ fp128, fp128 }, ptr @d, i64 0, i32 1), align 16
; CHECK-NEXT:    [[B_REAL:%.*]] = load fp128, ptr @b, align 16
; CHECK-NEXT:    [[B_IMAG:%.*]] = load fp128, ptr getelementptr inbounds ({ fp128, fp128 }, ptr @b, i64 0, i32 1), align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP9]])
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP8]])
; CHECK-NEXT:    store fp128 [[B_REAL]], ptr [[TMP8]], align 16
; CHECK-NEXT:    call void @__mulq(ptr [[TMP9]], ptr [[TMP0]], ptr [[TMP8]])
; CHECK-NEXT:    [[TMP10:%.*]] = load fp128, ptr [[TMP9]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP7]])
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP6]])
; CHECK-NEXT:    store fp128 [[B_IMAG]], ptr [[TMP6]], align 16
; CHECK-NEXT:    call void @__mulq(ptr [[TMP7]], ptr [[TMP1]], ptr [[TMP6]])
; CHECK-NEXT:    [[TMP11:%.*]] = load fp128, ptr [[TMP7]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP5]])
; CHECK-NEXT:    call void @__mulq(ptr [[TMP5]], ptr [[TMP0]], ptr [[TMP6]])
; CHECK-NEXT:    [[TMP12:%.*]] = load fp128, ptr [[TMP5]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP4]])
; CHECK-NEXT:    call void @__mulq(ptr [[TMP4]], ptr [[TMP1]], ptr [[TMP8]])
; CHECK-NEXT:    [[TMP13:%.*]] = load fp128, ptr [[TMP4]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP3]])
; CHECK-NEXT:    call void @__subq(ptr [[TMP3]], ptr [[TMP9]], ptr [[TMP7]])
; CHECK-NEXT:    [[TMP14:%.*]] = load fp128, ptr [[TMP3]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP2]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP2]], ptr [[TMP4]], ptr [[TMP5]])
; CHECK-NEXT:    [[TMP15:%.*]] = load fp128, ptr [[TMP2]], align 16
; CHECK-NEXT:    [[ISNAN_CMP:%.*]] = fcmp uno fp128 [[TMP14]], 0xL00000000000000000000000000000000
; CHECK-NEXT:    [[ISNAN_CMP3:%.*]] = fcmp uno fp128 [[TMP15]], 0xL00000000000000000000000000000000
; CHECK-NEXT:    [[OR_COND:%.*]] = and i1 [[ISNAN_CMP]], [[ISNAN_CMP3]]
; CHECK-NEXT:    br i1 [[OR_COND]], label [[COMPLEX_MUL_LIBCALL:%.*]], label [[COMPLEX_MUL_CONT]]
; CHECK:       complex_mul_libcall:
; CHECK-NEXT:    call void @__multc3(ptr nonnull sret({ fp128, fp128 }) align 16 [[TMP]], fp128 [[C_REAL]], fp128 [[C_IMAG]], fp128 [[B_REAL]], fp128 [[B_IMAG]])
; CHECK-NEXT:    [[TMP_REAL:%.*]] = load fp128, ptr [[TMP_REALP]], align 16
; CHECK-NEXT:    [[TMP_IMAG:%.*]] = load fp128, ptr [[TMP_IMAGP]], align 16
; CHECK-NEXT:    [[D_REAL_PRE:%.*]] = load fp128, ptr @d, align 16
; CHECK-NEXT:    br label [[COMPLEX_MUL_CONT]]
; CHECK:       complex_mul_cont:
; CHECK-NEXT:    [[D_REAL:%.*]] = phi fp128 [ [[C_REAL]], [[FOR_COND]] ], [ [[C_IMAG]], [[COMPLEX_MUL_LIBCALL]] ]
; CHECK-NEXT:    [[REAL_MUL_PHI]] = phi fp128 [ [[TMP14]], [[FOR_COND]] ], [ [[TMP_REAL]], [[COMPLEX_MUL_LIBCALL]] ]
; CHECK-NEXT:    [[IMAG_MUL_PHI]] = phi fp128 [ [[TMP15]], [[FOR_COND]] ], [ [[TMP_IMAG]], [[COMPLEX_MUL_LIBCALL]] ]
; CHECK-NEXT:    [[TMP16:%.*]] = phi ptr [ [[TMP0]], [[FOR_COND]] ], [ [[TMP1]], [[COMPLEX_MUL_LIBCALL]] ]
; CHECK-NEXT:    store fp128 [[REAL_MUL_PHI]], ptr @c, align 16
; CHECK-NEXT:    store fp128 [[IMAG_MUL_PHI]], ptr getelementptr inbounds ({ fp128, fp128 }, ptr @c, i64 0, i32 1), align 16
; CHECK-NEXT:    [[TMP17:%.*]] = call i32 @__qtoi(ptr [[TMP16]], i32 0)
; CHECK-NEXT:    store i32 [[TMP17]], ptr @e, align 4
; CHECK-NEXT:    br label [[FOR_COND]]
;
entry:
  %tmp = alloca { fp128, fp128 }, align 16
  %tmp.realp = getelementptr inbounds { fp128, fp128 }, ptr %tmp, i64 0, i32 0
  %tmp.imagp = getelementptr inbounds { fp128, fp128 }, ptr %tmp, i64 0, i32 1
  %c.real.pre = load fp128, ptr @c, align 16
  %c.imag.pre = load fp128, ptr getelementptr inbounds ({ fp128, fp128 }, ptr @c, i64 0, i32 1), align 16
  br label %for.cond

for.cond:                                         ; preds = %complex_mul_cont, %entry
  %c.imag = phi fp128 [ %imag_mul_phi, %complex_mul_cont ], [ %c.imag.pre, %entry ]
  %c.real = phi fp128 [ %real_mul_phi, %complex_mul_cont ], [ %c.real.pre, %entry ]
  store fp128 %c.real, ptr @d, align 16
  store fp128 %c.imag, ptr getelementptr inbounds ({ fp128, fp128 }, ptr @d, i64 0, i32 1), align 16
  %b.real = load fp128, ptr @b, align 16
  %b.imag = load fp128, ptr getelementptr inbounds ({ fp128, fp128 }, ptr @b, i64 0, i32 1), align 16
  %mul_ac = fmul fp128 %c.real, %b.real
  %mul_bd = fmul fp128 %c.imag, %b.imag
  %mul_ad = fmul fp128 %c.real, %b.imag
  %mul_bc = fmul fp128 %c.imag, %b.real
  %mul_r = fsub fp128 %mul_ac, %mul_bd
  %mul_i = fadd fp128 %mul_bc, %mul_ad
  %isnan_cmp = fcmp uno fp128 %mul_r, 0xL00000000000000000000000000000000
  %isnan_cmp3 = fcmp uno fp128 %mul_i, 0xL00000000000000000000000000000000
  %or.cond = and i1 %isnan_cmp, %isnan_cmp3
  br i1 %or.cond, label %complex_mul_libcall, label %complex_mul_cont

complex_mul_libcall:                              ; preds = %for.cond
  call void @__multc3(ptr nonnull sret({fp128, fp128}) align 16 %tmp, fp128 %c.real, fp128 %c.imag, fp128 %b.real, fp128 %b.imag) #1
  %tmp.real = load fp128, ptr %tmp.realp, align 16
  %tmp.imag = load fp128, ptr %tmp.imagp, align 16
  %d.real.pre = load fp128, ptr @d, align 16
  br label %complex_mul_cont

complex_mul_cont:                                 ; preds = %complex_mul_libcall, %for.cond
  %d.real = phi fp128 [ %c.real, %for.cond ], [ %c.imag, %complex_mul_libcall ]
  %real_mul_phi = phi fp128 [ %mul_r, %for.cond ], [ %tmp.real, %complex_mul_libcall ]
  %imag_mul_phi = phi fp128 [ %mul_i, %for.cond ], [ %tmp.imag, %complex_mul_libcall ]
  store fp128 %real_mul_phi, ptr @c, align 16
  store fp128 %imag_mul_phi, ptr getelementptr inbounds ({ fp128, fp128 }, ptr @c, i64 0, i32 1), align 16
  %conv = fptosi fp128 %d.real to i32
  store i32 %conv, ptr @e, align 4
  br label %for.cond
}

declare dso_local void @__multc3(ptr, fp128, fp128, fp128, fp128) local_unnamed_addr
