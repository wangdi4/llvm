; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt %s -S -mtriple=x86_64-unknown-unknown -float128-expand -intel-libirc-allowed | FileCheck %s

define dso_local i32 @main1(fp128 %x) local_unnamed_addr #0 {
; CHECK-LABEL: @main1(
; CHECK-NEXT:  bb1:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP5]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP4]], align 16
; CHECK-NEXT:    br i1 undef, label [[BB2:%.*]], label [[BB3:%.*]]
; CHECK:       bb2:
; CHECK-NEXT:    [[TMP6:%.*]] = phi fp128 [ [[X]], [[BB2]] ], [ 0xL00000000000000003FFE000000000000, [[BB1:%.*]] ]
; CHECK-NEXT:    store fp128 [[TMP6]], fp128* [[TMP0]], align 16
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    call void @__addq(fp128* [[TMP1]], fp128* [[TMP4]], fp128* [[TMP0]])
; CHECK-NEXT:    [[TMP8:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    br i1 undef, label [[BB2]], label [[BB4:%.*]]
; CHECK:       bb3:
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP9]])
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP10]])
; CHECK-NEXT:    store fp128 0xL00000000000000003FFE000000000000, fp128* [[TMP2]], align 16
; CHECK-NEXT:    call void @__subq(fp128* [[TMP3]], fp128* [[TMP4]], fp128* [[TMP2]])
; CHECK-NEXT:    [[TMP11:%.*]] = load fp128, fp128* [[TMP3]], align 16
; CHECK-NEXT:    [[TMP12:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP12]])
; CHECK-NEXT:    ret i32 1
; CHECK:       bb4:
; CHECK-NEXT:    ret i32 0
;
bb1:
  br i1 undef, label %bb2, label %bb3
bb2:
  %0 = phi fp128 [%x, %bb2],[0xL00000000000000003FFE000000000000, %bb1]
  %1 = fadd fp128 %x, %0
  br i1 undef, label %bb2, label %bb4
bb3:
  %2 = fsub fp128 %x, 0xL00000000000000003FFE000000000000
  ret i32 1
bb4:
  ret i32 0
}

define dso_local i32 @main2(fp128 %x) local_unnamed_addr #0 {
; CHECK-LABEL: @main2(
; CHECK-NEXT:  bb1:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP5:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP6:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP6]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP6]], align 16
; CHECK-NEXT:    br i1 undef, label [[BB2:%.*]], label [[BB5:%.*]]
; CHECK:       bb2:
; CHECK-NEXT:    [[TMP8:%.*]] = phi fp128 [ [[X]], [[BB3:%.*]] ], [ 0xL00000000000000003FFE000000000000, [[BB1:%.*]] ]
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP9]])
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP10]])
; CHECK-NEXT:    store fp128 0xL00000000000000003FFE000000000000, fp128* [[TMP2]], align 16
; CHECK-NEXT:    call void @__addq(fp128* [[TMP3]], fp128* [[TMP6]], fp128* [[TMP2]])
; CHECK-NEXT:    [[TMP11:%.*]] = load fp128, fp128* [[TMP3]], align 16
; CHECK-NEXT:    br i1 undef, label [[BB3]], label [[BB4:%.*]]
; CHECK:       bb3:
; CHECK-NEXT:    [[TMP12:%.*]] = bitcast fp128* [[TMP0]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP12]])
; CHECK-NEXT:    call void @__subq(fp128* [[TMP0]], fp128* [[TMP6]], fp128* [[TMP2]])
; CHECK-NEXT:    [[TMP13:%.*]] = load fp128, fp128* [[TMP0]], align 16
; CHECK-NEXT:    br label [[BB2]]
; CHECK:       bb4:
; CHECK-NEXT:    [[TMP14:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP14]])
; CHECK-NEXT:    call void @__subq(fp128* [[TMP1]], fp128* [[TMP6]], fp128* [[TMP2]])
; CHECK-NEXT:    [[TMP15:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    [[TMP16:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP16]])
; CHECK-NEXT:    ret i32 0
; CHECK:       bb5:
; CHECK-NEXT:    [[TMP17:%.*]] = bitcast fp128* [[TMP5]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP17]])
; CHECK-NEXT:    [[TMP18:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP18]])
; CHECK-NEXT:    store fp128 0xL00000000000000003FFE000000000000, fp128* [[TMP4]], align 16
; CHECK-NEXT:    call void @__subq(fp128* [[TMP5]], fp128* [[TMP6]], fp128* [[TMP4]])
; CHECK-NEXT:    [[TMP19:%.*]] = load fp128, fp128* [[TMP5]], align 16
; CHECK-NEXT:    [[TMP20:%.*]] = bitcast fp128* [[TMP5]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP20]])
; CHECK-NEXT:    ret i32 0
;
bb1:
  br i1 undef, label %bb2, label %bb5
bb2:
  %0 = phi fp128 [%x, %bb3],[0xL00000000000000003FFE000000000000, %bb1]
  %1 = fadd fp128 %x, 0xL00000000000000003FFE000000000000
  br i1 undef, label %bb3, label %bb4
bb3:
  %2 = fsub fp128 %x, 0xL00000000000000003FFE000000000000
  br label %bb2
bb4:
  %3 = fsub fp128 %x, 0xL00000000000000003FFE000000000000
  ret i32 0
bb5:
  %4 = fsub fp128 %x, 0xL00000000000000003FFE000000000000
  ret i32 0
}

define dso_local i32 @main3(fp128 %x) local_unnamed_addr #0 {
; CHECK-LABEL: @main3(
; CHECK-NEXT:  bb1:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP5:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP6:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast fp128* [[TMP6]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP7]])
; CHECK-NEXT:    store fp128 [[X:%.*]], fp128* [[TMP6]], align 16
; CHECK-NEXT:    br i1 undef, label [[BB2:%.*]], label [[BB5:%.*]]
; CHECK:       bb2:
; CHECK-NEXT:    [[TMP8:%.*]] = phi fp128 [ [[X]], [[BB3:%.*]] ], [ 0xL00000000000000003FFE000000000000, [[BB1:%.*]] ]
; CHECK-NEXT:    br i1 undef, label [[BB3]], label [[BB4:%.*]]
; CHECK:       bb3:
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast fp128* [[TMP1]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP9]])
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast fp128* [[TMP0]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP10]])
; CHECK-NEXT:    store fp128 0xL00000000000000003FFE000000000000, fp128* [[TMP0]], align 16
; CHECK-NEXT:    call void @__subq(fp128* [[TMP1]], fp128* [[TMP6]], fp128* [[TMP0]])
; CHECK-NEXT:    [[TMP11:%.*]] = load fp128, fp128* [[TMP1]], align 16
; CHECK-NEXT:    br label [[BB2]]
; CHECK:       bb4:
; CHECK-NEXT:    [[TMP12:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP12]])
; CHECK-NEXT:    [[TMP13:%.*]] = bitcast fp128* [[TMP2]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP13]])
; CHECK-NEXT:    store fp128 0xL00000000000000003FFE000000000000, fp128* [[TMP2]], align 16
; CHECK-NEXT:    call void @__subq(fp128* [[TMP3]], fp128* [[TMP6]], fp128* [[TMP2]])
; CHECK-NEXT:    [[TMP14:%.*]] = load fp128, fp128* [[TMP3]], align 16
; CHECK-NEXT:    [[TMP15:%.*]] = bitcast fp128* [[TMP3]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP15]])
; CHECK-NEXT:    ret i32 0
; CHECK:       bb5:
; CHECK-NEXT:    [[TMP16:%.*]] = bitcast fp128* [[TMP5]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP16]])
; CHECK-NEXT:    [[TMP17:%.*]] = bitcast fp128* [[TMP4]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[TMP17]])
; CHECK-NEXT:    store fp128 0xL00000000000000003FFE000000000000, fp128* [[TMP4]], align 16
; CHECK-NEXT:    call void @__subq(fp128* [[TMP5]], fp128* [[TMP6]], fp128* [[TMP4]])
; CHECK-NEXT:    [[TMP18:%.*]] = load fp128, fp128* [[TMP5]], align 16
; CHECK-NEXT:    [[TMP19:%.*]] = bitcast fp128* [[TMP5]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[TMP19]])
; CHECK-NEXT:    ret i32 0
;
bb1:
  br i1 undef, label %bb2, label %bb5
bb2:
  %0 = phi fp128 [%x, %bb3],[0xL00000000000000003FFE000000000000, %bb1]
  br i1 undef, label %bb3, label %bb4
bb3:
  %1 = fsub fp128 %x, 0xL00000000000000003FFE000000000000
  br label %bb2
bb4:
  %2 = fsub fp128 %x, 0xL00000000000000003FFE000000000000
  ret i32 0
bb5:
  %3 = fsub fp128 %x, 0xL00000000000000003FFE000000000000
  ret i32 0
}
