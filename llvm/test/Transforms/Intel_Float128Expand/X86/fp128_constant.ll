; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt %s -opaque-pointers -bugpoint-enable-legacy-pm -S -mtriple=x86_64-unknown-unknown -float128-expand -intel-libirc-allowed | FileCheck %s

define dso_local i32 @main1(fp128 %x) local_unnamed_addr #0 {
; CHECK-LABEL: @main1(
; CHECK-NEXT:  bb1:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP4]])
; CHECK-NEXT:    store fp128 [[X:%.*]], ptr [[TMP4]], align 16
; CHECK-NEXT:    br i1 undef, label [[BB2:%.*]], label [[BB3:%.*]]
; CHECK:       bb2:
; CHECK-NEXT:    [[TMP5:%.*]] = phi fp128 [ [[X]], [[BB2]] ], [ 0xL00000000000000003FFE000000000000, [[BB1:%.*]] ]
; CHECK-NEXT:    store fp128 [[TMP5]], ptr [[TMP0]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP1]])
; CHECK-NEXT:    call void @__addq(ptr [[TMP1]], ptr [[TMP4]], ptr [[TMP0]])
; CHECK-NEXT:    [[TMP6:%.*]] = load fp128, ptr [[TMP1]], align 16
; CHECK-NEXT:    br i1 undef, label [[BB2]], label [[BB4:%.*]]
; CHECK:       bb3:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP3]])
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP2]])
; CHECK-NEXT:    store fp128 0xL00000000000000003FFE000000000000, ptr [[TMP2]], align 16
; CHECK-NEXT:    call void @__subq(ptr [[TMP3]], ptr [[TMP4]], ptr [[TMP2]])
; CHECK-NEXT:    [[TMP7:%.*]] = load fp128, ptr [[TMP3]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP3]])
; CHECK-NEXT:    ret i32 1
; CHECK:       bb4:
; CHECK-NEXT:    ret i32 0
;
bb1:
  br i1 undef, label %bb2, label %bb3
bb2:
  %0 = phi fp128 [%x, %bb2],[0xL00000000000000003FFE000000000000, %bb1]
  %1 = fadd fp128 %x, %0
  br i1 undef, label %bb2, label %bb4
bb3:
  %2 = fsub fp128 %x, 0xL00000000000000003FFE000000000000
  ret i32 1
bb4:
  ret i32 0
}

define dso_local i32 @main2(fp128 %x) local_unnamed_addr #0 {
; CHECK-LABEL: @main2(
; CHECK-NEXT:  bb1:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP5:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP6:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP6]])
; CHECK-NEXT:    store fp128 [[X:%.*]], ptr [[TMP6]], align 16
; CHECK-NEXT:    br i1 undef, label [[BB2:%.*]], label [[BB5:%.*]]
; CHECK:       bb2:
; CHECK-NEXT:    [[TMP7:%.*]] = phi fp128 [ [[X]], [[BB3:%.*]] ], [ 0xL00000000000000003FFE000000000000, [[BB1:%.*]] ]
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP3]])
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP2]])
; CHECK-NEXT:    store fp128 0xL00000000000000003FFE000000000000, ptr [[TMP2]], align 16
; CHECK-NEXT:    call void @__addq(ptr [[TMP3]], ptr [[TMP6]], ptr [[TMP2]])
; CHECK-NEXT:    [[TMP8:%.*]] = load fp128, ptr [[TMP3]], align 16
; CHECK-NEXT:    br i1 undef, label [[BB3]], label [[BB4:%.*]]
; CHECK:       bb3:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP0]])
; CHECK-NEXT:    call void @__subq(ptr [[TMP0]], ptr [[TMP6]], ptr [[TMP2]])
; CHECK-NEXT:    [[TMP9:%.*]] = load fp128, ptr [[TMP0]], align 16
; CHECK-NEXT:    br label [[BB2]]
; CHECK:       bb4:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP1]])
; CHECK-NEXT:    call void @__subq(ptr [[TMP1]], ptr [[TMP6]], ptr [[TMP2]])
; CHECK-NEXT:    [[TMP10:%.*]] = load fp128, ptr [[TMP1]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP1]])
; CHECK-NEXT:    ret i32 0
; CHECK:       bb5:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP5]])
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP4]])
; CHECK-NEXT:    store fp128 0xL00000000000000003FFE000000000000, ptr [[TMP4]], align 16
; CHECK-NEXT:    call void @__subq(ptr [[TMP5]], ptr [[TMP6]], ptr [[TMP4]])
; CHECK-NEXT:    [[TMP11:%.*]] = load fp128, ptr [[TMP5]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP5]])
; CHECK-NEXT:    ret i32 0
;
bb1:
  br i1 undef, label %bb2, label %bb5
bb2:
  %0 = phi fp128 [%x, %bb3],[0xL00000000000000003FFE000000000000, %bb1]
  %1 = fadd fp128 %x, 0xL00000000000000003FFE000000000000
  br i1 undef, label %bb3, label %bb4
bb3:
  %2 = fsub fp128 %x, 0xL00000000000000003FFE000000000000
  br label %bb2
bb4:
  %3 = fsub fp128 %x, 0xL00000000000000003FFE000000000000
  ret i32 0
bb5:
  %4 = fsub fp128 %x, 0xL00000000000000003FFE000000000000
  ret i32 0
}

define dso_local i32 @main3(fp128 %x) local_unnamed_addr #0 {
; CHECK-LABEL: @main3(
; CHECK-NEXT:  bb1:
; CHECK-NEXT:    [[TMP0:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP1:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP2:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP3:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP4:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP5:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    [[TMP6:%.*]] = alloca fp128, align 16
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP6]])
; CHECK-NEXT:    store fp128 [[X:%.*]], ptr [[TMP6]], align 16
; CHECK-NEXT:    br i1 undef, label [[BB2:%.*]], label [[BB5:%.*]]
; CHECK:       bb2:
; CHECK-NEXT:    [[TMP7:%.*]] = phi fp128 [ [[X]], [[BB3:%.*]] ], [ 0xL00000000000000003FFE000000000000, [[BB1:%.*]] ]
; CHECK-NEXT:    br i1 undef, label [[BB3]], label [[BB4:%.*]]
; CHECK:       bb3:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP1]])
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP0]])
; CHECK-NEXT:    store fp128 0xL00000000000000003FFE000000000000, ptr [[TMP0]], align 16
; CHECK-NEXT:    call void @__subq(ptr [[TMP1]], ptr [[TMP6]], ptr [[TMP0]])
; CHECK-NEXT:    [[TMP8:%.*]] = load fp128, ptr [[TMP1]], align 16
; CHECK-NEXT:    br label [[BB2]]
; CHECK:       bb4:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP3]])
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP2]])
; CHECK-NEXT:    store fp128 0xL00000000000000003FFE000000000000, ptr [[TMP2]], align 16
; CHECK-NEXT:    call void @__subq(ptr [[TMP3]], ptr [[TMP6]], ptr [[TMP2]])
; CHECK-NEXT:    [[TMP9:%.*]] = load fp128, ptr [[TMP3]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP3]])
; CHECK-NEXT:    ret i32 0
; CHECK:       bb5:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP5]])
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[TMP4]])
; CHECK-NEXT:    store fp128 0xL00000000000000003FFE000000000000, ptr [[TMP4]], align 16
; CHECK-NEXT:    call void @__subq(ptr [[TMP5]], ptr [[TMP6]], ptr [[TMP4]])
; CHECK-NEXT:    [[TMP10:%.*]] = load fp128, ptr [[TMP5]], align 16
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 16, ptr [[TMP5]])
; CHECK-NEXT:    ret i32 0
;
bb1:
  br i1 undef, label %bb2, label %bb5
bb2:
  %0 = phi fp128 [%x, %bb3],[0xL00000000000000003FFE000000000000, %bb1]
  br i1 undef, label %bb3, label %bb4
bb3:
  %1 = fsub fp128 %x, 0xL00000000000000003FFE000000000000
  br label %bb2
bb4:
  %2 = fsub fp128 %x, 0xL00000000000000003FFE000000000000
  ret i32 0
bb5:
  %3 = fsub fp128 %x, 0xL00000000000000003FFE000000000000
  ret i32 0
}
