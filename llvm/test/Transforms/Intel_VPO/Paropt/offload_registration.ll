; RUN: opt < %s -vpo-cfg-restructuring -vpo-paropt-prepare -vpo-restore-operands -vpo-cfg-restructuring -vpo-paropt -S | FileCheck %s
; RUN: opt < %s -passes='function(vpo-cfg-restructuring,vpo-paropt-prepare,vpo-restore-operands,vpo-cfg-restructuring),vpo-paropt' -S | FileCheck %s
;
; This tests checks offload registration code generated by the paropt.

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"
target device_triples = "x86_64-pc-linux-gnu"

; Comdat key for the offload registration code. Should have sorted offload
; target triples encoded into the name.
; CHECK: $[[REGFN:.+\.x86_64-pc-linux-gnu]] = comdat any

; CHECK: [[ENTBEGIN:@.+]] = external constant [[ENTTY:{.+}]]
; CHECK: [[ENTEND:@.+]] = external constant [[ENTTY]]

; CHECK: [[IMGBEGIN:@.+]] = extern_weak constant i8
; CHECK: [[IMGEND:@.+]] = extern_weak constant i8

; CHECK: [[IMAGES:@.+]] = internal unnamed_addr constant [1 x {{.+}}] [{{.+}} { i8* [[IMGBEGIN]], i8* [[IMGEND]], [[ENTTY]]* [[ENTBEGIN]], [[ENTTY]]* [[ENTEND]] }], comdat($[[REGFN]])

; CHECK: [[DESC:@.+]] = internal constant {{.+}} { i32 1, {{.+}}* getelementptr inbounds ([1 x {{.+}}], [1 x {{.+}}]* [[IMAGES]], i32 0, i32 0), [[ENTTY]]* [[ENTBEGIN]], [[ENTTY]]* [[ENTEND]] }, comdat($[[REGFN]])

; CHECK: [[DSO_HANDLE:@.+]] = external hidden global i8

; Check target registration is registered as a Ctor.
; CHECK: appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 0, void ()* @[[REGFN]], i8* bitcast (void ()* @[[REGFN]] to i8*) }]

; CHECK: void @foo()
define dso_local void @foo() {
entry:
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.TARGET"(), "QUAL.OMP.OFFLOAD.ENTRY.IDX"(i32 0) ]
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.TARGET"() ]
  ret void
}

; CHECK: void @bar()
define dso_local void @bar() {
entry:
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.TARGET"(), "QUAL.OMP.OFFLOAD.ENTRY.IDX"(i32 1) ]
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.TARGET"() ]
  ret void
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)

!omp_offload.info = !{!0, !1}

!0 = !{i32 0, i32 54, i32 -698850821, !"foo", i32 32, i32 0, i32 0}
!1 = !{i32 0, i32 54, i32 -698850821, !"bar", i32 40, i32 1, i32 0}

; Check presence of outlined target regions from foo and bar.
; CHECK: define internal void [[OUTLINEDTARGET1:@.+]]()
; CHECK: define internal void [[OUTLINEDTARGET2:@.+]]()

; Check presence of unregistration code.
; CHECK:     define internal void @[[UNREGFN:.+]](i8*)
; CHECK-SAME: comdat($[[REGFN]]) {
; CHECK:     call i32 @__tgt_unregister_lib({{.+}}* [[DESC]])
; CHECK:     ret void
; CHECK:     declare i32 @__tgt_unregister_lib({{.+}}*)

; Check presence of registration code.
; CHECK:     define linkonce hidden void @[[REGFN]]()
; CHECK-SAME: comdat {
; CHECK:     call i32 @__tgt_register_lib({{.+}}* [[DESC]])
; CHECK:     call i32 @__cxa_atexit(void (i8*)* @[[UNREGFN]], i8* bitcast ({{.+}}* [[DESC]] to i8*), i8* [[DSO_HANDLE]])
; CHECK:     ret void
; CHECK:     declare i32 @__tgt_register_lib({{.+}}*)
