; RUN: opt -opaque-pointers=1 -bugpoint-enable-legacy-pm -vpo-cfg-restructuring -vpo-paropt-prepare -vpo-restore-operands -vpo-cfg-restructuring -vpo-paropt -S %s | FileCheck %s
; RUN: opt -opaque-pointers=1 -passes='function(vpo-cfg-restructuring,vpo-paropt-prepare,vpo-restore-operands,vpo-cfg-restructuring),vpo-paropt' -S %s | FileCheck %s
;
; Check that we generate kmpc_barrier for loops that are optimized away before Paropt
; IR was hand modified to add "DIR.OMP.LOOP" with null clauses for zero-trip loop construct. This Construct will be eventually generated by FE.
;
; Test src:
;
; #include <stdio.h>
; int main() {
;   int x = 0;
; #pragma omp parallel
;  {
;    x = 0;
; #pragma omp for
;    for (int i = 0; i < 0; i++);
; #pragma omp master
;    x = 100;
;  }
;   printf("%d\n", x);
; }

; CHECK: call void @__kmpc_barrier(ptr @{{.*}}, i32 %{{.*}})

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

define dso_local i32 @main() {
entry:
  %x = alloca i32, align 4
  %tmp = alloca i32, align 4
  store i32 0, ptr %x, align 4
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.PARALLEL"(),
    "QUAL.OMP.SHARED:TYPED"(ptr %x, i32 0, i32 1),
    "QUAL.OMP.PRIVATE:TYPED"(ptr %tmp, i32 0, i32 1) ]

  %dummy = call token @llvm.directive.region.entry() [ "DIR.OMP.LOOP"(),
    "QUAL.OMP.NORMALIZED.IV:TYPED"(ptr %tmp, i32 0, i32 1),
    "QUAL.OMP.NORMALIZED.UB:TYPED"(ptr %tmp, i32 0, i32 1) ]

  call void @llvm.directive.region.exit(token %dummy) [ "DIR.OMP.END.LOOP"() ]
  store i32 0, ptr %x, align 4
  %1 = call token @llvm.directive.region.entry() [ "DIR.OMP.MASTER"() ]

  fence acquire
  store i32 100, ptr %x, align 4
  fence release
  call void @llvm.directive.region.exit(token %1) [ "DIR.OMP.END.MASTER"() ]
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.PARALLEL"() ]
  %2 = load i32, ptr %x, align 4
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %2)
  ret i32 0
}

declare token @llvm.directive.region.entry()

declare void @llvm.directive.region.exit(token)

declare dso_local i32 @printf(ptr noundef, ...)
