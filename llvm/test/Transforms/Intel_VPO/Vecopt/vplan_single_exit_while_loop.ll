; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; Tests single exit while loop canonicalization.

; RUN: opt < %s -vplan-func-vec -disable-output -print-after-vplan-func-vec-loop-exit-canon | FileCheck %s
; RUN: opt < %s -passes="vplan-func-vec" -disable-output -print-after-vplan-func-vec-loop-exit-canon | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: norecurse nounwind uwtable
define void @main() {
; CHECK-LABEL:  VPlan IR for: main
; CHECK-NEXT:    [[BB0:BB[0-9]+]]:
; CHECK-NEXT:     i32 [[VP_LANE:%.*]] = induction-init{add} i32 0 i32 1
; CHECK-NEXT:    SUCCESSORS(1):[[BB1:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]:
; CHECK-NEXT:     i32 [[VP_IV:%.*]] = phi  [ i32 0, [[BB0]] ],  [ i32 [[VP_IV_NEXT:%.*]], [[NEW_LOOP_LATCH0:new.loop.latch[0-9]+]] ]
; CHECK-NEXT:     i32 [[VP_IV_NEXT]] = add i32 [[VP_IV]] i32 1
; CHECK-NEXT:    SUCCESSORS(1):[[BB2:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB0]] [[NEW_LOOP_LATCH0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]:
; CHECK-NEXT:     i32 [[VP_INC:%.*]] = add i32 [[VP_IV]] i32 1
; CHECK-NEXT:     i1 [[VP_CMP1:%.*]] = icmp i32 [[VP_INC]] i32 16
; CHECK-NEXT:    SUCCESSORS(2):[[BB3:BB[0-9]+]](i1 [[VP_CMP1]]), [[NEW_LOOP_LATCH0]](!i1 [[VP_CMP1]])
; CHECK-NEXT:    PREDECESSORS(1): [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB3]]:
; CHECK-NEXT:       <Empty Block>
; CHECK-NEXT:      SUCCESSORS(1):[[NEW_LOOP_LATCH0]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[NEW_LOOP_LATCH0]]:
; CHECK-NEXT:     i1 [[VP_TAKEBACKEDGECOND:%.*]] = phi  [ i1 true, [[BB3]] ],  [ i1 false, [[BB2]] ]
; CHECK-NEXT:    SUCCESSORS(2):[[BB1]](i1 [[VP_TAKEBACKEDGECOND]]), [[BB4:BB[0-9]+]](!i1 [[VP_TAKEBACKEDGECOND]])
; CHECK-NEXT:    PREDECESSORS(2): [[BB3]] [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]:
; CHECK-NEXT:     i32 [[VP_LIVE_OUT:%.*]] = phi  [ i32 [[VP_INC]], [[NEW_LOOP_LATCH0]] ]
; CHECK-NEXT:    SUCCESSORS(1):[[BB5:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[NEW_LOOP_LATCH0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]:
; CHECK-NEXT:     void [[VP0:%.*]] = ret
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB4]]
;
entry:
  %lane = call i32 @llvm.vplan.laneid()
  br label %header

header:
  %iv = phi i32 [ 0, %entry ], [ %iv.next, %latch ]
  %iv.next = add nsw i32 %iv, 1
  br label %bb1

bb1:
  %inc = add nsw i32 %iv, 1
  %cmp1 = icmp eq i32 %inc, 16
  br i1 %cmp1, label %latch, label %exit_bb1

latch:
  br label %header

exit_bb1:
  %live_out = phi i32 [ %inc, %bb1 ]
  br label %end

end:
  ret void
}

declare i32 @llvm.vplan.laneid()
