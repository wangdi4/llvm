; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -hir-ssa-deconstruction -hir-vec-dir-insert -hir-vplan-vec -disable-output -vplan-print-after-plain-cfg -print-after=hir-vplan-vec -hir-details -vplan-force-vf=4 < %s 2>&1 | FileCheck %s
; RUN: opt -passes="hir-ssa-deconstruction,hir-vec-dir-insert,hir-vplan-vec,print<hir>" -disable-output -vplan-print-after-plain-cfg  -hir-details -vplan-force-vf=4 < %s 2>&1 | FileCheck %s
;
; Incoming HIR looks like the following:
;
;     + DO i2 = 0, 95, 1   <DO_LOOP>
;     |   (@larr)[0][i1][i2] = i1 + i2;
;     |   <LVAL-REG> {al:8}(LINEAR [100 x [100 x i64]]* @larr)[i64 0][LINEAR i64 i1][LINEAR i64 i2] inbounds  {sb:13}
;     |      <BLOB> LINEAR [100 x [100 x i64]]* @larr {sb:8}
;     |   <RVAL-REG> LINEAR zext.i3.i64(i1 + i2) {sb:2}
;     + END LOOP
;
; LIT test to show a problem with incorrectly formed external def for an IV.
; When creating the external def its type needs to be set to the corresponding
; loop's IV type and not to the current canon expression's type. For the above
; case the external def for i1 was being created with the type i3.
;
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@larr = dso_local local_unnamed_addr global [100 x [100 x i64]] zeroinitializer, align 16

; Function Attrs: nofree norecurse nosync nounwind uwtable writeonly
define dso_local void @init() local_unnamed_addr #0 {
; CHECK-LABEL:  VPlan after importing plain CFG:
; CHECK-NEXT:  VPlan IR for: init:HIR.#1
; CHECK-NEXT:  External Defs Start:
; CHECK-DAG:     [[VP0:%.*]] = {%i1}
; CHECK-DAG:     [[VP1:%.*]] = {@larr}
; CHECK-NEXT:  External Defs End:
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], [[BB2]]
; CHECK-NEXT:     i64 [[VP2:%.*]] = phi  [ i64 0, [[BB1]] ],  [ i64 [[VP3:%.*]], [[BB2]] ]
; CHECK-NEXT:     i3 [[VP4:%.*]] = trunc i64 [[I10:%.*]] to i3
; CHECK-NEXT:     i3 [[VP5:%.*]] = trunc i64 [[VP2]] to i3
; CHECK-NEXT:     i3 [[VP6:%.*]] = add i3 [[VP4]] i3 [[VP5]]
; CHECK-NEXT:     i64 [[VP7:%.*]] = zext i3 [[VP6]] to i64
; CHECK-NEXT:     i64* [[VP_SUBSCRIPT:%.*]] = subscript inbounds [100 x [100 x i64]]* @larr i64 0 i64 [[I10]] i64 [[VP2]]
; CHECK-NEXT:     store i64 [[VP7]] i64* [[VP_SUBSCRIPT]]
; CHECK-NEXT:     i64 [[VP3]] = add i64 [[VP2]] i64 1
; CHECK-NEXT:     i1 [[VP8:%.*]] = icmp sle i64 [[VP3]] i64 95
; CHECK-NEXT:     br i1 [[VP8]], [[BB2]], [[BB3:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: [[BB2]]
; CHECK-NEXT:     br [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: [[BB3]]
; CHECK-NEXT:     br <External Block>
; CHECK:       Function: init
; CHECK:              + DO i64 i2 = 0, 95, 4   <DO_LOOP> <auto-vectorized> <novectorize>
; TODO -- Check to see if we can create a linear canon expression for i1 + i2 + <i3 0, i3 1, i3 2, i3 3>
; CHECK-NEXT:         |   %.vec = i1  +  i2 + <i3 0, i3 1, i3 2, i3 3>;
; CHECK-NEXT:         |   <LVAL-REG> NON-LINEAR <4 x i3> %.vec {sb:16}
; CHECK-NEXT:         |   <RVAL-REG> LINEAR trunc.<4 x i64>.<4 x i3>(i1) {sb:2}
; CHECK-NEXT:         |   <RVAL-REG> LINEAR <4 x i3> i2 + <i3 0, i3 1, i3 2, i3 3> {sb:2}
; CHECK-NEXT:         |
; CHECK-NEXT:         |   (<4 x i64>*)(@larr)[0][i1][i2] = %.vec;
; CHECK-NEXT:         |   <LVAL-REG> {al:8}(<4 x i64>*)(LINEAR [100 x [100 x i64]]* @larr)[i64 0][LINEAR i64 i1][LINEAR i64 i2] inbounds  {sb:13}
; CHECK-NEXT:         |      <BLOB> LINEAR [100 x [100 x i64]]* @larr {sb:8}
; CHECK-NEXT:         |   <RVAL-REG> NON-LINEAR zext.<4 x i3>.<4 x i64>(%.vec) {sb:2}
; CHECK-NEXT:         |      <BLOB> NON-LINEAR <4 x i3> %.vec {sb:16}
; CHECK-NEXT:         |
; CHECK-NEXT:         + END LOOP
;
entry:
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %entry, %for.inc5
  %i.018 = phi i64 [ 0, %entry ], [ %inc6, %for.inc5 ]
  br label %for.body3

for.body3:                                        ; preds = %for.cond1.preheader, %for.body3
  %j.017 = phi i64 [ 0, %for.cond1.preheader ], [ %inc, %for.body3 ]
  %add = add nuw nsw i64 %j.017, %i.018
  %and = and i64 %add, 7
  %arrayidx4 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @larr, i64 0, i64 %i.018, i64 %j.017
  store i64 %and, i64* %arrayidx4, align 8
  %inc = add nuw nsw i64 %j.017, 1
  %exitcond.not = icmp eq i64 %inc, 96
  br i1 %exitcond.not, label %for.inc5, label %for.body3

for.inc5:                                         ; preds = %for.body3
  %inc6 = add nuw nsw i64 %i.018, 1
  %exitcond19.not = icmp eq i64 %inc6, 96
  br i1 %exitcond19.not, label %for.end7, label %for.cond1.preheader

for.end7:                                         ; preds = %for.inc5
  ret void
}
