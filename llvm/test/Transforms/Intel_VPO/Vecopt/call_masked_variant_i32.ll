; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py UTC_ARGS: --version 2
; RUN: opt -mtriple=x86_64 -passes=vplan-vec -vplan-force-vf=32 -vplan-cm-prohibit-zmm-low-pumping=0 -S < %s | FileCheck %s
; RUN: opt -mtriple=x86_64 -passes='hir-ssa-deconstruction,hir-vplan-vec,print<hir>' -vplan-force-vf=32 -disable-output -vplan-cm-prohibit-zmm-low-pumping=0 < %s 2>&1 | FileCheck %s -check-prefix=HIR

; Test case to test mask argument lowering at a call site for avx512
; according to VecABI specification.
; Test checks that mask parameter is split into two i32 arguments and each
; argument provides effective 16 bits of mask, so we need to generate
; required set of instruction to pack logical type (which is the
; characteristic type) into the variant argument. Since characteristic
; data type is i32 we can skip one bitcast instruction.

@ARRAY_SIZE = external dso_local  constant i32, align 4

declare token @llvm.directive.region.entry() #0
declare void @llvm.directive.region.exit(token) #0
declare i32 @vfunc(i32 noundef ) #1

define void @test(ptr nocapture noundef readonly %src, ptr nocapture noundef writeonly %dst) #2 {
; CHECK:  define void @test(ptr nocapture noundef readonly [[SRC0:%.*]], ptr nocapture noundef writeonly [[DST0:%.*]]) #2 {
; CHECK:       vector.body:
; CHECK-NEXT:    [[UNI_PHI0:%.*]] = phi i64 [ 0, [[VPLANNEDBB20:%.*]] ], [ [[TMP8:%.*]], [[VECTOR_BODY0:%.*]] ]
; CHECK-NEXT:    [[VEC_PHI0:%.*]] = phi <32 x i64> [ <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15, i64 16, i64 17, i64 18, i64 19, i64 20, i64 21, i64 22, i64 23, i64 24, i64 25, i64 26, i64 27, i64 28, i64 29, i64 30, i64 31>, [[VPLANNEDBB20]] ], [ [[TMP7:%.*]], [[VECTOR_BODY0]] ]
; CHECK-NEXT:    [[SCALAR_GEP0:%.*]] = getelementptr inbounds i32, ptr [[SRC0]], i64 [[UNI_PHI0]]
; CHECK-NEXT:    [[WIDE_LOAD0:%.*]] = load <32 x i32>, ptr [[SCALAR_GEP0]], align 8
; CHECK-NEXT:    [[WIDE_LOAD_PART_0_OF_2_0:%.*]] = shufflevector <32 x i32> [[WIDE_LOAD0]], <32 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; CHECK-NEXT:    [[WIDE_LOAD_PART_1_OF_2_0:%.*]] = shufflevector <32 x i32> [[WIDE_LOAD0]], <32 x i32> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
; CHECK-NEXT:    [[ZEXT0:%.*]] = zext i16 bitcast (<16 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true> to i16) to i32
; CHECK-NEXT:    [[ZEXT1:%.*]] = zext i16 bitcast (<16 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true> to i16) to i32
; CHECK-NEXT:    [[TMP4:%.*]] = call x86_regcallcc { <16 x i32>, <16 x i32> } @_ZGVZM32v_vfunc(<16 x i32> noundef [[WIDE_LOAD_PART_0_OF_2_0]], <16 x i32> noundef [[WIDE_LOAD_PART_1_OF_2_0]], i32 [[ZEXT0]], i32 [[ZEXT1]]) #0
;
; HIR-LABEL:  Function: test
; HIR:             + DO i1 = 0, [[LOOP_UB0:%.*]], 32   <DO_LOOP>  <MAX_TC_EST = 67108863>  <LEGAL_MAX_TC = 67108863> <simd-vectorized> <nounroll> <novectorize>
; HIR-NEXT:        |   [[DOTVEC200:%.*]] = undef
; HIR-NEXT:        |   [[DOTVEC40:%.*]] = (<32 x i32>*)([[SRC0:%.*]])[i1]
; HIR-NEXT:        |   [[SEXT0:%.*]] = sext.<32 x i1>.<32 x i32>(1)
; HIR-NEXT:        |   [[DOTEXTRACTED_SUBVEC0:%.*]] = shufflevector [[DOTVEC40]],  undef,  <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; HIR-NEXT:        |   [[DOTEXTRACTED_SUBVEC50:%.*]] = shufflevector [[DOTVEC40]],  undef,  <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
; HIR-NEXT:        |   [[DOTEXTRACTED_SUBVEC60:%.*]] = shufflevector [[SEXT0]],  undef,  <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; HIR-NEXT:        |   [[TRUNC0:%.*]] = trunc.<16 x i32>.<16 x i1>([[DOTEXTRACTED_SUBVEC60]])
; HIR-NEXT:        |   [[TMP1:%.*]] = bitcast.<16 x i1>.i16([[TRUNC0]])
; HIR-NEXT:        |   [[ZEXT0:%.*]] = zext.i16.i32([[TMP1]])
; HIR-NEXT:        |   [[DOTEXTRACTED_SUBVEC70:%.*]] = shufflevector [[SEXT0]],  undef,  <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
; HIR-NEXT:        |   [[TRUNC80:%.*]] = trunc.<16 x i32>.<16 x i1>([[DOTEXTRACTED_SUBVEC70]])
; HIR-NEXT:        |   [[TMP2:%.*]] = bitcast.<16 x i1>.i16([[TRUNC80]])
; HIR-NEXT:        |   [[ZEXT90:%.*]] = zext.i16.i32([[TMP2]])
; HIR-NEXT:        |   [[_ZGVZM32V_VFUNC0:%.*]] = @_ZGVZM32v_vfunc([[DOTEXTRACTED_SUBVEC0]],  [[DOTEXTRACTED_SUBVEC50]],  [[ZEXT0]],  [[ZEXT90]])
; HIR-NEXT:        |   [[EXTRACT_RESULT0:%.*]] = extractvalue [[_ZGVZM32V_VFUNC0]], 0
; HIR-NEXT:        |   [[EXTRACT_RESULT100:%.*]] = extractvalue [[_ZGVZM32V_VFUNC0]], 1
; HIR-NEXT:        |   [[COMB_SHUF0:%.*]] = shufflevector [[EXTRACT_RESULT0]],  [[EXTRACT_RESULT100]],  <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
; HIR-NEXT:        |   (<32 x i32>*)([[DST0:%.*]])[i1] = [[COMB_SHUF0]]
; HIR-NEXT:        + END LOOP
;
entry:
  %i.linear.iv = alloca i32, align 4
  %0 = load i32, ptr @ARRAY_SIZE, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %DIR.OMP.SIMD.1, label %omp.precond.end

DIR.OMP.SIMD.1:                                   ; preds = %entry
  %1 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.NORMALIZED.IV:TYPED"(ptr null, i32 0), "QUAL.OMP.NORMALIZED.UB:TYPED"(ptr null, i32 0), "QUAL.OMP.LINEAR:IV.TYPED"(ptr %i.linear.iv, i32 0, i32 1, i32 1) ]
  br label %DIR.OMP.SIMD.117

DIR.OMP.SIMD.117:                                 ; preds = %DIR.OMP.SIMD.1
  %wide.trip.count = zext i32 %0 to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.inner.for.body, %DIR.OMP.SIMD.117
  %indvars.iv = phi i64 [ 0, %DIR.OMP.SIMD.117 ], [ %indvars.iv.next, %omp.inner.for.body ]
  %arrayidx = getelementptr inbounds i32, ptr %src, i64 %indvars.iv
  %2 = load i32, ptr %arrayidx, align 8
  %callret = call i32 @vfunc(i32 noundef %2) #0
  %arrayidx6 = getelementptr inbounds i32, ptr %dst, i64 %indvars.iv
  store i32 %callret, ptr %arrayidx6, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %omp.inner.for.cond.DIR.OMP.END.SIMD.3.loopexit_crit_edge, label %omp.inner.for.body

omp.inner.for.cond.DIR.OMP.END.SIMD.3.loopexit_crit_edge: ; preds = %omp.inner.for.body
  call void @llvm.directive.region.exit(token %1) [ "DIR.OMP.END.SIMD"() ]
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %omp.inner.for.cond.DIR.OMP.END.SIMD.3.loopexit_crit_edge, %entry
  ret void
}

attributes #0 = { nounwind }
attributes #1 = { "vector-variants"="_ZGVZM32v_vfunc" }
attributes #2 = { "target-cpu"="skylake-avx512" }
