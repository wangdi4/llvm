; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py UTC_ARGS: --version 2
; RUN: opt -mtriple=x86_64 -mcpu=skylake-avx512 -passes="vplan-vec" -vec-clone-legalize-enabled -S < %s | FileCheck %s
; RUN: opt -mtriple=x86_64 -mcpu=skylake-avx512 -passes="hir-ssa-deconstruction,hir-vec-dir-insert,hir-vplan-vec,print<hir>" -vec-clone-legalize-enabled -disable-output < %s 2>&1 | FileCheck %s --check-prefix=HIR

; Check that VPlan correctly legalizes arguments and return value for
; both vector variants _ZGVxN32v_foo, _ZGVxN32v_bar of "foo" and "bar" respectively.
; This test specifically checks for i1 type of argument and return value.

declare i1 @foo(i8) #0
declare i8 @bar(i1) #1

define i32 @main(i8 %key) {
; CHECK:       vector.body:
; CHECK-NEXT:    [[UNI_PHI0:%.*]] = phi i64 [ 0, [[VPLANNEDBB10:%.*]] ], [ [[TMP10:%.*]], [[VECTOR_BODY0:%.*]] ]
; CHECK-NEXT:    [[VEC_PHI0:%.*]] = phi <32 x i64> [ <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15, i64 16, i64 17, i64 18, i64 19, i64 20, i64 21, i64 22, i64 23, i64 24, i64 25, i64 26, i64 27, i64 28, i64 29, i64 30, i64 31>, [[VPLANNEDBB10]] ], [ [[TMP9:%.*]], [[VECTOR_BODY0]] ]
; CHECK-NEXT:    [[TMP0:%.*]] = trunc <32 x i64> [[VEC_PHI0]] to <32 x i8>
; CHECK-NEXT:    [[DOTPART_0_OF_2_0:%.*]] = shufflevector <32 x i8> [[TMP0]], <32 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; CHECK-NEXT:    [[DOTPART_1_OF_2_0:%.*]] = shufflevector <32 x i8> [[TMP0]], <32 x i8> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
; CHECK-NEXT:    [[TMP1:%.*]] = call x86_regcallcc { <16 x i8>, <16 x i8> } @_ZGVxN32v_foo(<16 x i8> [[DOTPART_0_OF_2_0]], <16 x i8> [[DOTPART_1_OF_2_0]])
; CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { <16 x i8>, <16 x i8> } [[TMP1]], 0
; CHECK-NEXT:    [[TMP3:%.*]] = extractvalue { <16 x i8>, <16 x i8> } [[TMP1]], 1
; CHECK-NEXT:    [[COMBINED0:%.*]] = shufflevector <16 x i8> [[TMP2]], <16 x i8> [[TMP3]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
; CHECK-NEXT:    [[DOTTRUNC0:%.*]] = trunc <32 x i8> [[COMBINED0]] to <32 x i1>
; CHECK-NEXT:    [[TMP4:%.*]] = zext <32 x i1> [[DOTTRUNC0]] to <32 x i8>
; CHECK-NEXT:    [[DOTPART_0_OF_2_30:%.*]] = shufflevector <32 x i8> [[TMP4]], <32 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; CHECK-NEXT:    [[DOTPART_1_OF_2_40:%.*]] = shufflevector <32 x i8> [[TMP4]], <32 x i8> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
; CHECK-NEXT:    [[TMP5:%.*]] = call x86_regcallcc { <16 x i8>, <16 x i8> } @_ZGVxN32v_bar(<16 x i8> [[DOTPART_0_OF_2_30]], <16 x i8> [[DOTPART_1_OF_2_40]])
; CHECK-NEXT:    [[TMP6:%.*]] = extractvalue { <16 x i8>, <16 x i8> } [[TMP5]], 0
; CHECK-NEXT:    [[TMP7:%.*]] = extractvalue { <16 x i8>, <16 x i8> } [[TMP5]], 1
; CHECK-NEXT:    [[COMBINED50:%.*]] = shufflevector <16 x i8> [[TMP6]], <16 x i8> [[TMP7]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
; CHECK-NEXT:    [[TMP8:%.*]] = icmp ne <32 x i8> [[BROADCAST_SPLAT0:%.*]], [[COMBINED50]]
; CHECK-NEXT:    [[TMP9]] = add nuw nsw <32 x i64> [[VEC_PHI0]], <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
; CHECK-NEXT:    [[TMP10]] = add nuw nsw i64 [[UNI_PHI0]], 32
; CHECK-NEXT:    [[TMP11:%.*]] = icmp uge i64 [[TMP10]], 128
; CHECK-NEXT:    br i1 [[TMP11]], label [[VPLANNEDBB60:%.*]], label [[VECTOR_BODY0]], !llvm.loop !0
;
; HIR-LABEL:  Function: main
; HIR-EMPTY:
; HIR-NEXT:  BEGIN REGION { modified }
; HIR-NEXT:        + DO i1 = 0, 127, 32   <DO_LOOP> <simd-vectorized> <novectorize>
; HIR-NEXT:        |   [[DOTEXTRACTED_SUBVEC0:%.*]] = shufflevector i1 + <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15, i64 16, i64 17, i64 18, i64 19, i64 20, i64 21, i64 22, i64 23, i64 24, i64 25, i64 26, i64 27, i64 28, i64 29, i64 30, i64 31>,  undef,  <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; HIR-NEXT:        |   [[DOTEXTRACTED_SUBVEC20:%.*]] = shufflevector i1 + <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15, i64 16, i64 17, i64 18, i64 19, i64 20, i64 21, i64 22, i64 23, i64 24, i64 25, i64 26, i64 27, i64 28, i64 29, i64 30, i64 31>,  undef,  <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
; HIR-NEXT:        |   [[_ZGVXN32V_FOO0:%.*]] = @_ZGVxN32v_foo([[DOTEXTRACTED_SUBVEC0]],  [[DOTEXTRACTED_SUBVEC20]])
; HIR-NEXT:        |   [[EXTRACT_RESULT0:%.*]] = extractvalue [[_ZGVXN32V_FOO0]], 0
; HIR-NEXT:        |   [[EXTRACT_RESULT30:%.*]] = extractvalue [[_ZGVXN32V_FOO0]], 1
; HIR-NEXT:        |   [[COMB_SHUF0:%.*]] = shufflevector [[EXTRACT_RESULT0]],  [[EXTRACT_RESULT30]],  <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
; HIR-NEXT:        |   [[DOTEXTRACTED_SUBVEC40:%.*]] = shufflevector [[COMB_SHUF0]],  undef,  <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; HIR-NEXT:        |   [[DOTEXTRACTED_SUBVEC50:%.*]] = shufflevector [[COMB_SHUF0]],  undef,  <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
; HIR-NEXT:        |   [[_ZGVXN32V_BAR0:%.*]] = @_ZGVxN32v_bar([[DOTEXTRACTED_SUBVEC40]],  [[DOTEXTRACTED_SUBVEC50]])
; HIR-NEXT:        |   [[EXTRACT_RESULT60:%.*]] = extractvalue [[_ZGVXN32V_BAR0]], 0
; HIR-NEXT:        |   [[EXTRACT_RESULT70:%.*]] = extractvalue [[_ZGVXN32V_BAR0]], 1
; HIR-NEXT:        |   [[COMB_SHUF80:%.*]] = shufflevector [[EXTRACT_RESULT60]],  [[EXTRACT_RESULT70]],  <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
; HIR-NEXT:        + END LOOP
; HIR-NEXT:  END REGION
;
entry:
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %entry
  %entry.region = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.SIMDLEN"(i32 32) ]
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.inner.for.body, %DIR.OMP.SIMD.1
  %indvars.iv = phi i64 [ 0, %DIR.OMP.SIMD.1 ], [ %indvars.iv.next, %omp.inner.for.body ]
  %trunc = trunc i64 %indvars.iv to i8
  %foo = tail call i1 @foo(i8 %trunc)
  %bar = tail call i8 @bar(i1 %foo)
  %cmp = icmp ne i8 %key, %bar
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 128
  br i1 %exitcond, label %omp.loop.exit, label %omp.inner.for.body

omp.loop.exit:                                    ; preds = %omp.inner.for.body
  call void @llvm.directive.region.exit(token %entry.region) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.QUAL.LIST.END.2

DIR.QUAL.LIST.END.2:                              ; preds = %omp.loop.exit
  ret i32 0
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #2

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #2

attributes #0 = { "vector-variants"="_ZGVxN32v_foo" }
attributes #1 = { "vector-variants"="_ZGVxN32v_bar" }
attributes #2 = { nounwind }
