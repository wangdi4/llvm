; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; Test if the exit block's phi node is properly updated.

; REQUIRES: asserts
; RUN: opt -S < %s -VPlanDriver -disable-output -vplan-print-after-loop-massaging -disable-vplan-predicator -disable-vplan-codegen 2>&1 | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind uwtable
define dso_local i32 @main() #0 {
; CHECK-LABEL:  Print after loop massaging:
; CHECK-NEXT:    REGION: [[REGION0:region[0-9]+]] (BP: NULL)
; CHECK-NEXT:    [[BB0:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB1:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB2:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_INDEX:%.*]] = phi  [ i32 0, [[BB1]] ],  [ i32 [[VP_INDVAR:%.*]], [[BB3:BB[0-9]+]] ]
; CHECK-NEXT:    SUCCESSORS(1):[[BB4:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB3]] [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB5:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB6:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[NEW_LOOP_LATCH0:new.loop.latch[0-9]+]] [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB7:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB7]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i32 [[VP__08152025_I_BE_I_I:%.*]] = phi  [ i32 1, [[BB6]] ],  [ i32 [[VP__08152025_I_BE_I_I_BE:%.*]], [[NEW_LOOP_LATCH1:new.loop.latch[0-9]+]] ]
; CHECK-NEXT:     [DA: Uniform]   i32 [[VP0:%.*]] = phi  [ i32 [[VP_EXIT_ID_PHI:%.*]], [[NEW_LOOP_LATCH1]] ],  [ i32 0, [[BB6]] ]
; CHECK-NEXT:    SUCCESSORS(1):[[BB8:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[NEW_LOOP_LATCH1]] [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB8]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB9:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB7]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB9]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i32 [[VP__0815_I_I_I:%.*]] = phi  [ i32 [[VP1:%.*]], [[NEW_LOOP_LATCH2:new.loop.latch[0-9]+]] ],  [ i32 [[VP__08152025_I_BE_I_I]], [[BB8]] ]
; CHECK-NEXT:     [DA: Uniform]   i32 [[VP2:%.*]] = phi  [ i32 0, [[BB8]] ],  [ i32 [[VP_EXIT_ID_PHI_1:%.*]], [[NEW_LOOP_LATCH2]] ]
; CHECK-NEXT:    SUCCESSORS(1):[[BB10:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB8]] [[NEW_LOOP_LATCH2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB10]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_PIVOT6:%.*]] = icmp i32 [[VP__0815_I_I_I]] i32 2
; CHECK-NEXT:    SUCCESSORS(2):[[BB11:BB[0-9]+]](i1 [[VP_PIVOT6]]), [[BB12:BB[0-9]+]](!i1 [[VP_PIVOT6]])
; CHECK-NEXT:    PREDECESSORS(1): [[BB9]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB12]] (BP: NULL) :
; CHECK-NEXT:       [DA: Uniform]   i1 [[VP_PIVOT4:%.*]] = icmp i32 [[VP__0815_I_I_I]] i32 3
; CHECK-NEXT:      SUCCESSORS(2):[[INTERMEDIATE_BB0:intermediate.bb[0-9]+]](i1 [[VP_PIVOT4]]), [[BB13:BB[0-9]+]](!i1 [[VP_PIVOT4]])
; CHECK-NEXT:      PREDECESSORS(1): [[BB10]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB13]] (BP: NULL) :
; CHECK-NEXT:         [DA: Uniform]   i1 [[VP_SWITCHLEAF2:%.*]] = icmp i32 [[VP__0815_I_I_I]] i32 3
; CHECK-NEXT:        SUCCESSORS(2):[[INTERMEDIATE_BB1:intermediate.bb[0-9]+]](i1 [[VP_SWITCHLEAF2]]), [[BB14:BB[0-9]+]](!i1 [[VP_SWITCHLEAF2]])
; CHECK-NEXT:        PREDECESSORS(1): [[BB12]]
; CHECK-EMPTY:
; CHECK-NEXT:          [[INTERMEDIATE_BB1]] (BP: NULL) :
; CHECK-NEXT:           <Empty Block>
; CHECK-NEXT:          SUCCESSORS(1):[[NEW_LOOP_LATCH2]]
; CHECK-NEXT:          PREDECESSORS(1): [[BB13]]
; CHECK-EMPTY:
; CHECK-NEXT:          [[INTERMEDIATE_BB0]] (BP: NULL) :
; CHECK-NEXT:           <Empty Block>
; CHECK-NEXT:          SUCCESSORS(1):[[NEW_LOOP_LATCH2]]
; CHECK-NEXT:          PREDECESSORS(1): [[BB12]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB11]] (BP: NULL) :
; CHECK-NEXT:         [DA: Uniform]   i1 [[VP_PIVOT:%.*]] = icmp i32 [[VP__0815_I_I_I]] i32 1
; CHECK-NEXT:        SUCCESSORS(2):[[BB15:BB[0-9]+]](i1 [[VP_PIVOT]]), [[INTERMEDIATE_BB2:intermediate.bb[0-9]+]](!i1 [[VP_PIVOT]])
; CHECK-NEXT:        PREDECESSORS(1): [[BB10]]
; CHECK-EMPTY:
; CHECK-NEXT:          [[INTERMEDIATE_BB2]] (BP: NULL) :
; CHECK-NEXT:           <Empty Block>
; CHECK-NEXT:          SUCCESSORS(1):[[NEW_LOOP_LATCH2]]
; CHECK-NEXT:          PREDECESSORS(1): [[BB11]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB15]] (BP: NULL) :
; CHECK-NEXT:         [DA: Uniform]   i1 [[VP_SWITCHLEAF:%.*]] = icmp i32 [[VP__0815_I_I_I]] i32 0
; CHECK-NEXT:        SUCCESSORS(2):[[INTERMEDIATE_BB3:intermediate.bb[0-9]+]](i1 [[VP_SWITCHLEAF]]), [[BB14]](!i1 [[VP_SWITCHLEAF]])
; CHECK-NEXT:        PREDECESSORS(1): [[BB11]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB14]] (BP: NULL) :
; CHECK-NEXT:         <Empty Block>
; CHECK-NEXT:        SUCCESSORS(1):[[BB16:BB[0-9]+]]
; CHECK-NEXT:        PREDECESSORS(2): [[BB15]] [[BB13]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB16]] (BP: NULL) :
; CHECK-NEXT:         [DA: Uniform]   i32 [[VP1]] = add i32 [[VP__0815_I_I_I]] i32 1
; CHECK-NEXT:        SUCCESSORS(1):[[NEW_LOOP_LATCH2]]
; CHECK-NEXT:        PREDECESSORS(1): [[BB14]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[INTERMEDIATE_BB3]] (BP: NULL) :
; CHECK-NEXT:       <Empty Block>
; CHECK-NEXT:      SUCCESSORS(1):[[NEW_LOOP_LATCH2]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB15]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[NEW_LOOP_LATCH2]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i32 [[VP_EXIT_ID_PHI_1]] = phi  [ i32 [[VP2]], [[BB16]] ],  [ i32 1, [[INTERMEDIATE_BB0]] ],  [ i32 2, [[INTERMEDIATE_BB1]] ],  [ i32 3, [[INTERMEDIATE_BB2]] ],  [ i32 4, [[INTERMEDIATE_BB3]] ]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_TAKE_BACKEDGE_COND:%.*]] = phi  [ i1 true, [[BB16]] ],  [ i1 false, [[INTERMEDIATE_BB0]] ],  [ i1 false, [[INTERMEDIATE_BB1]] ],  [ i1 false, [[INTERMEDIATE_BB2]] ],  [ i1 false, [[INTERMEDIATE_BB3]] ]
; CHECK-NEXT:    SUCCESSORS(2):[[BB9]](i1 [[VP_TAKE_BACKEDGE_COND]]), [[CASCADED_IF_BLOCK0:cascaded.if.block[0-9]+]](!i1 [[VP_TAKE_BACKEDGE_COND]])
; CHECK-NEXT:    PREDECESSORS(5): [[BB16]] [[INTERMEDIATE_BB0]] [[INTERMEDIATE_BB1]] [[INTERMEDIATE_BB2]] [[INTERMEDIATE_BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[CASCADED_IF_BLOCK0]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP3:%.*]] = icmp i32 [[VP_EXIT_ID_PHI_1]] i32 2
; CHECK-NEXT:    SUCCESSORS(2):[[INTERMEDIATE_BB4:intermediate.bb[0-9]+]](i1 [[VP3]]), [[CASCADED_IF_BLOCK1:cascaded.if.block[0-9]+]](!i1 [[VP3]])
; CHECK-NEXT:    PREDECESSORS(1): [[NEW_LOOP_LATCH2]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[CASCADED_IF_BLOCK1]] (BP: NULL) :
; CHECK-NEXT:       [DA: Uniform]   i1 [[VP4:%.*]] = icmp i32 [[VP_EXIT_ID_PHI_1]] i32 3
; CHECK-NEXT:      SUCCESSORS(2):[[BB17:BB[0-9]+]](i1 [[VP4]]), [[CASCADED_IF_BLOCK2:cascaded.if.block[0-9]+]](!i1 [[VP4]])
; CHECK-NEXT:      PREDECESSORS(1): [[CASCADED_IF_BLOCK0]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[CASCADED_IF_BLOCK2]] (BP: NULL) :
; CHECK-NEXT:         [DA: Uniform]   i1 [[VP5:%.*]] = icmp i32 [[VP_EXIT_ID_PHI_1]] i32 4
; CHECK-NEXT:        SUCCESSORS(2):[[INTERMEDIATE_BB5:intermediate.bb[0-9]+]](i1 [[VP5]]), [[BB18:BB[0-9]+]](!i1 [[VP5]])
; CHECK-NEXT:        PREDECESSORS(1): [[CASCADED_IF_BLOCK1]]
; CHECK-EMPTY:
; CHECK-NEXT:          [[BB18]] (BP: NULL) :
; CHECK-NEXT:           <Empty Block>
; CHECK-NEXT:          SUCCESSORS(1):[[BB19:BB[0-9]+]]
; CHECK-NEXT:          PREDECESSORS(1): [[CASCADED_IF_BLOCK2]]
; CHECK-EMPTY:
; CHECK-NEXT:          [[INTERMEDIATE_BB5]] (BP: NULL) :
; CHECK-NEXT:           <Empty Block>
; CHECK-NEXT:          SUCCESSORS(1):[[NEW_LOOP_LATCH1]]
; CHECK-NEXT:          PREDECESSORS(1): [[CASCADED_IF_BLOCK2]]
; CHECK-EMPTY:
; CHECK-NEXT:          [[BB17]] (BP: NULL) :
; CHECK-NEXT:           <Empty Block>
; CHECK-NEXT:          SUCCESSORS(1):[[BB19]]
; CHECK-NEXT:          PREDECESSORS(1): [[CASCADED_IF_BLOCK1]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB19]] (BP: NULL) :
; CHECK-NEXT:         [DA: Uniform]   i32 [[VP__08152025_I_BE_I_I_BE]] = phi  [ i32 3, [[BB18]] ],  [ i32 2, [[BB17]] ]
; CHECK-NEXT:        SUCCESSORS(1):[[NEW_LOOP_LATCH1]]
; CHECK-NEXT:        PREDECESSORS(2): [[BB18]] [[BB17]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[INTERMEDIATE_BB4]] (BP: NULL) :
; CHECK-NEXT:       <Empty Block>
; CHECK-NEXT:      SUCCESSORS(1):[[NEW_LOOP_LATCH1]]
; CHECK-NEXT:      PREDECESSORS(1): [[CASCADED_IF_BLOCK0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[NEW_LOOP_LATCH1]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i32 [[VP_EXIT_ID_PHI]] = phi  [ i32 [[VP0]], [[BB19]] ],  [ i32 1, [[INTERMEDIATE_BB5]] ],  [ i32 2, [[INTERMEDIATE_BB4]] ]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_TAKE_BACKEDGE_COND_1:%.*]] = phi  [ i1 true, [[BB19]] ],  [ i1 false, [[INTERMEDIATE_BB5]] ],  [ i1 false, [[INTERMEDIATE_BB4]] ]
; CHECK-NEXT:    SUCCESSORS(2):[[BB7]](i1 [[VP_TAKE_BACKEDGE_COND_1]]), [[CASCADED_IF_BLOCK3:cascaded.if.block[0-9]+]](!i1 [[VP_TAKE_BACKEDGE_COND_1]])
; CHECK-NEXT:    PREDECESSORS(3): [[BB19]] [[INTERMEDIATE_BB5]] [[INTERMEDIATE_BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[CASCADED_IF_BLOCK3]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP6:%.*]] = icmp i32 [[VP_EXIT_ID_PHI]] i32 2
; CHECK-NEXT:    SUCCESSORS(2):[[NEW_LOOP_LATCH0]](i1 [[VP6]]), [[BB20:BB[0-9]+]](!i1 [[VP6]])
; CHECK-NEXT:    PREDECESSORS(1): [[NEW_LOOP_LATCH1]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB20]] (BP: NULL) :
; CHECK-NEXT:       <Empty Block>
; CHECK-NEXT:      SUCCESSORS(1):[[NEW_LOOP_LATCH0]]
; CHECK-NEXT:      PREDECESSORS(1): [[CASCADED_IF_BLOCK3]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[NEW_LOOP_LATCH0]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_TAKEBACKEDGECOND:%.*]] = phi  [ i1 true, [[BB20]] ],  [ i1 false, [[CASCADED_IF_BLOCK3]] ]
; CHECK-NEXT:    SUCCESSORS(2):[[BB5]](i1 [[VP_TAKEBACKEDGECOND]]), [[BB21:BB[0-9]+]](!i1 [[VP_TAKEBACKEDGECOND]])
; CHECK-NEXT:    PREDECESSORS(2): [[BB20]] [[CASCADED_IF_BLOCK3]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB21]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB3]]
; CHECK-NEXT:    PREDECESSORS(1): [[NEW_LOOP_LATCH0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_INDVAR]] = add i32 [[VP_INDEX]] i32 1
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_VL_COND:%.*]] = icmp i32 [[VP_INDVAR]] i32 16
; CHECK-NEXT:    SUCCESSORS(2):[[BB2]](i1 [[VP_VL_COND]]), [[BB22:BB[0-9]+]](!i1 [[VP_VL_COND]])
; CHECK-NEXT:    PREDECESSORS(1): [[BB21]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB22]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB23:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB23]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB22]]
; CHECK-EMPTY:
; CHECK-NEXT:    END Region([[REGION0]])
;
; FIXME: The false incoming block of the phi node is not updated correctly.
entry:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.SIMDLEN"(i32 16) ]
  br label %simd.loop.preheader

simd.loop.preheader:                              ; preds = %entry
  br label %simd.loop

simd.loop:                                        ; preds = %simd.loop.exit, %simd.loop.preheader
  %index = phi i32 [ 0, %simd.loop.preheader ], [ %indvar, %simd.loop.exit ]
  br label %label_a

preheader.i.i:                                    ; preds = %preheader.i.i.preheader, %thread137.i.i.i
  %.0815.i.i.i = phi i32 [ %0, %thread137.i.i.i ], [ %.08152025.i.be.i.i, %preheader.i.i.preheader ]
  br label %NodeBlock5

NodeBlock5:                                       ; preds = %preheader.i.i
  %Pivot6 = icmp slt i32 %.0815.i.i.i, 2
  br i1 %Pivot6, label %NodeBlock, label %NodeBlock3

NodeBlock3:                                       ; preds = %NodeBlock5
  %Pivot4 = icmp slt i32 %.0815.i.i.i, 3
  br i1 %Pivot4, label %label_l, label %LeafBlock1

LeafBlock1:                                       ; preds = %NodeBlock3
  %SwitchLeaf2 = icmp eq i32 %.0815.i.i.i, 3
  br i1 %SwitchLeaf2, label %label_p, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock5
  %Pivot = icmp slt i32 %.0815.i.i.i, 1
  br i1 %Pivot, label %LeafBlock, label %label_k.loopexit

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %.0815.i.i.i, 0
  br i1 %SwitchLeaf, label %label_a.loopexit, label %NewDefault

label_a.loopexit:                                 ; preds = %LeafBlock
  br label %label_a

label_a:                                          ; preds = %label_a.loopexit, %simd.loop
  br label %preheader.i.i.preheader

label_k.loopexit:                                 ; preds = %NodeBlock
  br label %label_k

label_k:                                          ; preds = %label_k.loopexit, %label_l
  %.08152025.i.be.i.i.be = phi i32 [ 3, %label_l ], [ 2, %label_k.loopexit ]
  br label %preheader.i.i.preheader

label_l:                                          ; preds = %NodeBlock3
  br label %label_k

NewDefault:                                       ; preds = %LeafBlock1, %LeafBlock
  br label %thread137.i.i.i

thread137.i.i.i:                                  ; preds = %NewDefault
  %0 = add nuw nsw i32 %.0815.i.i.i, 1
  br label %preheader.i.i

preheader.i.i.preheader:                          ; preds = %label_k, %label_a
  %.08152025.i.be.i.i = phi i32 [ 1, %label_a ], [ %.08152025.i.be.i.i.be, %label_k ]
  br label %preheader.i.i

label_p:                                          ; preds = %LeafBlock1
  br label %simd.loop.exit

simd.loop.exit:                                   ; preds = %label_p
  %indvar = add nuw i32 %index, 1
  %vl.cond = icmp ult i32 %indvar, 16
  br i1 %vl.cond, label %simd.loop, label %simd.end.region

simd.end.region:                                  ; preds = %simd.loop.exit
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"() ]
  br label %return

return:                                           ; preds = %simd.end.region
  ret i32 0
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 4.0.0 (branches/vpo 21280)"}
