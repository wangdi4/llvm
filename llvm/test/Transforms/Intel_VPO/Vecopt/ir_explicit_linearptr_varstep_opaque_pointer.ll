; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -opaque-pointers -passes="vplan-vec" -vplan-force-vf=2 -vplan-entities-dump -vplan-print-after-vpentity-instrs -vplan-dump-induction-init-details -vplan-dump-plan-da -S < %s 2>&1 | FileCheck %s
; REQUIRES: asserts

; CHECK-LABEL: VPlan after insertion of VPEntities instructions:
; CHECK-NEXT: VPlan IR for: foo:omp.inner.for.body.#1
; CHECK:         i64 [[VP_MUL0:%.*]] = mul i64 %step i64 8
; CHECK-NEXT:    ptr [[VP_IND_INIT0:%.*]] = induction-init{getelementptr, StartVal: ?, EndVal: ?} ptr [[VP_PTR0:%.*]] i64 [[VP_MUL0]]
; CHECK:         i64 [[VP_IND_STEP0:%.*]] = induction-init-step{getelementptr} i64 [[VP_MUL0]]
; CHECK:         i64 [[VP_MUL1:%.*]] = mul i64 %step i64 4
; CHECK-NEXT:    ptr [[VP_IND_INIT1:%.*]] = induction-init{getelementptr, StartVal: ?, EndVal: ?} ptr [[VP_PTR1:%.*]] i64 [[VP_MUL1]]
; CHECK:         i64 [[VP_IND_STEP1:%.*]] = induction-init-step{getelementptr} i64 [[VP_MUL1]]
; CHECK:         i64 [[VP_MUL2:%.*]] = mul i64 %step i64 8
; CHECK-NEXT:    ptr [[VP_IND_INIT2:%.*]] = induction-init{getelementptr, StartVal: ?, EndVal: ?} ptr [[VP_PTR2:%.*]] i64 [[VP_MUL2]]
; CHECK:         i64 [[VP_IND_STEP2:%.*]] = induction-init-step{getelementptr} i64 [[VP_MUL2]]
; CHECK:      [[BB0:BB[0-9]+]]: # preds: BB2
; CHECK:         ptr [[VP_IND_FINAL0:%.*]] = induction-final{getelementptr} ptr [[VP_PTR0]] i64 [[VP_MUL0]]
; CHECK:         ptr [[VP_IND_FINAL1:%.*]] = induction-final{getelementptr} ptr [[VP_PTR1]] i64 [[VP_MUL1]]
; CHECK:         ptr [[VP_IND_FINAL2:%.*]] = induction-final{getelementptr} ptr [[VP_PTR2]] i64 [[VP_MUL2]]
;
; CHECK:      Printing Divergence info for foo:omp.inner.for.body.#1
; CHECK:         Uniform: [Shape: Uniform] i64 [[VP_MUL0:%.*]] = mul i64 %step i64 8
; CHECK-NEXT:    Divergent: [Shape: Random] ptr [[VP_IND_INIT0:%.*]] = induction-init{getelementptr, StartVal: ?, EndVal: ?} ptr [[VP_PTR0:%.*]] i64 [[VP_MUL0]]
; CHECK:         Uniform: [Shape: Uniform] i64 [[VP_IND_STEP0:%.*]] = induction-init-step{getelementptr} i64 [[VP_MUL0:%.*]]
; CHECK:         Uniform: [Shape: Uniform] i64 [[VP_MUL1:%.*]] = mul i64 %step i64 4
; CHECK-NEXT:    Divergent: [Shape: Random] ptr [[VP_IND_INIT1:%.*]] = induction-init{getelementptr, StartVal: ?, EndVal: ?} ptr [[VP_PTR1:%.*]] i64 [[VP_MUL1]]
; CHECK:         Uniform: [Shape: Uniform] i64 [[VP_IND_STEP1:%.*]] = induction-init-step{getelementptr} i64 [[VP_MUL1:%.*]]
; CHECK:         Uniform: [Shape: Uniform] i64 [[VP_MUL2:%.*]] = mul i64 %step i64 8
; CHECK-NEXT:    Divergent: [Shape: Random] ptr [[VP_IND_INIT2:%.*]] = induction-init{getelementptr, StartVal: ?, EndVal: ?} ptr [[VP_PTR2:%.*]] i64 [[VP_MUL2]]
; CHECK:         Uniform: [Shape: Uniform] i64 [[VP_IND_STEP2:%.*]] = induction-init-step{getelementptr} i64 [[VP_MUL2:%.*]]
; CHECK:       Basic Block: [[BB0:BB[0-9]+]]
; CHECK:         Uniform: [Shape: Uniform] ptr [[VP_IND_FINAL0:%.*]] = induction-final{getelementptr} ptr [[VP_PTR0]] i64 [[VP_MUL0]]
; CHECK:         Uniform: [Shape: Uniform] ptr [[VP_IND_FINAL1:%.*]] = induction-final{getelementptr} ptr [[VP_PTR1]] i64 [[VP_MUL1]]
; CHECK:         Uniform: [Shape: Uniform] ptr [[VP_IND_FINAL2:%.*]] = induction-final{getelementptr} ptr [[VP_PTR2]] i64 [[VP_MUL2]]
;
; CHECK: define dso_local void @foo(ptr %x, ptr %y, ptr %z, i64 noundef %step) #0 {
; CHECK:       VPlannedBB1:                                      ; preds = %VPlannedBB
; CHECK:         [[VP_MUL0:%.*]] = mul i64 %step, 8
; CHECK:         [[VP_BCAST_SPLATINSERT0:%.*]] = insertelement <2 x i64> poison, i64 [[VP_MUL0]], i64 0
; CHECK-NEXT:    [[VP_BCAST_SPLAT0:%.*]] = shufflevector <2 x i64> [[VP_BCAST_SPLATINSERT0]], <2 x i64> poison, <2 x i32> zeroinitializer
; CHECK:         [[VP_BCAST_SPLAT0_MUL:%.*]] = mul <2 x i64> [[VP_BCAST_SPLAT0]], <i64 0, i64 1>
; CHECK-NEXT:    [[VP_VECTOR_GEP0:%.*]] = getelementptr inbounds i8, <2 x ptr> %ind.start.bcast.splat, <2 x i64> [[VP_BCAST_SPLAT0_MUL]]
; CHECK:         [[VP_MUL02:%.*]] = mul i64 [[VP_MUL0]], 2
; CHECK-NEXT:    [[VP_IND_STEP_INIT_SPLATINSERT0:%.*]] = insertelement <2 x i64> poison, i64 [[VP_MUL02]], i64 0
; CHECK-NEXT:    [[VP_IND_STEP_INIT_SPLAT0:%.*]] = shufflevector <2 x i64> [[VP_IND_STEP_INIT_SPLATINSERT0]], <2 x i64> poison, <2 x i32> zeroinitializer
; CHECK:         [[VP_MUL1:%.*]] = mul i64 %step, 4
; CHECK:         [[VP_BCAST_SPLATINSERT1:%.*]] = insertelement <2 x i64> poison, i64 [[VP_MUL1]], i64 0
; CHECK-NEXT:    [[VP_BCAST_SPLAT1:%.*]] = shufflevector <2 x i64> [[VP_BCAST_SPLATINSERT1]], <2 x i64> poison, <2 x i32> zeroinitializer
; CHECK:         [[VP_BCAST_SPLAT1_MUL:%.*]] = mul <2 x i64> [[VP_BCAST_SPLAT1]], <i64 0, i64 1>
; CHECK-NEXT:    [[VP_VECTOR_GEP1:%.*]] = getelementptr inbounds i8, <2 x ptr> %ind.start.bcast.splat3, <2 x i64> [[VP_BCAST_SPLAT1_MUL]]
; CHECK:         [[VP_MUL12:%.*]] = mul i64 [[VP_MUL1]], 2
; CHECK-NEXT:    [[VP_IND_STEP_INIT_SPLATINSERT1:%.*]] = insertelement <2 x i64> poison, i64 [[VP_MUL12]], i64 0
; CHECK-NEXT:    [[VP_IND_STEP_INIT_SPLAT1:%.*]] = shufflevector <2 x i64> [[VP_IND_STEP_INIT_SPLATINSERT1]], <2 x i64> poison, <2 x i32> zeroinitializer
; CHECK:         [[VP_MUL2:%.*]] = mul i64 %step, 8
; CHECK:         [[VP_BCAST_SPLATINSERT2:%.*]] = insertelement <2 x i64> poison, i64 [[VP_MUL2]], i64 0
; CHECK-NEXT:    [[VP_BCAST_SPLAT2:%.*]] = shufflevector <2 x i64> [[VP_BCAST_SPLATINSERT2]], <2 x i64> poison, <2 x i32> zeroinitializer
; CHECK:         [[VP_BCAST_SPLAT2_MUL:%.*]] = mul <2 x i64> [[VP_BCAST_SPLAT2]], <i64 0, i64 1>
; CHECK-NEXT:    [[VP_VECTOR_GEP2:%.*]] = getelementptr inbounds i8, <2 x ptr> %ind.start.bcast.splat10, <2 x i64> [[VP_BCAST_SPLAT2_MUL]]
; CHECK:         [[VP_MUL22:%.*]] = mul i64 [[VP_MUL2]], 2
; CHECK-NEXT:    [[VP_IND_STEP_INIT_SPLATINSERT2:%.*]] = insertelement <2 x i64> poison, i64 [[VP_MUL22]], i64 0
; CHECK-NEXT:    [[VP_IND_STEP_INIT_SPLAT2:%.*]] = shufflevector <2 x i64> [[VP_IND_STEP_INIT_SPLATINSERT2]], <2 x i64> poison, <2 x i32> zeroinitializer
; CHECK:       vector.body:                                      ; preds = %vector.body, %VPlannedBB1
; CHECK:         [[VP_VEC_PHI0:%.*]] = phi <2 x ptr> [ [[VP_VECTOR_GEP0]], %VPlannedBB1 ], [ [[VP_MM_VECTOR_GEP0:%.*]], %vector.body ]
; CHECK:         [[VP_VEC_PHI1:%.*]] = phi <2 x ptr> [ [[VP_VECTOR_GEP1]], %VPlannedBB1 ], [ [[VP_MM_VECTOR_GEP1:%.*]], %vector.body ]
; CHECK:         [[VP_VEC_PHI2:%.*]] = phi <2 x ptr> [ [[VP_VECTOR_GEP2]], %VPlannedBB1 ], [ [[VP_MM_VECTOR_GEP2:%.*]], %vector.body ]
; CHECK:         [[VP_MM_VECTOR_GEP0]] = getelementptr inbounds i8, <2 x ptr> [[VP_VEC_PHI0:%.*]], <2 x i64> [[VP_IND_STEP_INIT_SPLAT0]]
; CHECK-NEXT:    [[VP_MM_VECTOR_GEP0_EXTRACT0:%.*]] = extractelement <2 x ptr> [[VP_MM_VECTOR_GEP0]], i32 0
; CHECK-NEXT:    [[VP_MM_VECTOR_GEP1]] = getelementptr inbounds i8, <2 x ptr> [[VP_VEC_PHI1:%.*]], <2 x i64> [[VP_IND_STEP_INIT_SPLAT1]]
; CHECK-NEXT:    [[VP_MM_VECTOR_GEP1_EXTRACT0:%.*]] = extractelement <2 x ptr> [[VP_MM_VECTOR_GEP1]], i32 0
; CHECK-NEXT:    [[VP_MM_VECTOR_GEP2]] = getelementptr inbounds i8, <2 x ptr> [[VP_VEC_PHI2:%.*]], <2 x i64> [[VP_IND_STEP_INIT_SPLAT2]]
; CHECK-NEXT:    [[VP_MM_VECTOR_GEP2_EXTRACT0:%.*]] = extractelement <2 x ptr> [[VP_MM_VECTOR_GEP2]], i32 0
; CHECK:         br i1 %22, label %vector.body, label %VPlannedBB33, !llvm.loop !0
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB33:                                     ; preds = %vector.body
; CHECK:        [[VP_MUL010:%.*]] = mul i64 [[VP_MUL0]], 10
; CHECK-NEXT:   [[VP_FINAL_GEP0:%.*]] = getelementptr inbounds i8, ptr [[VP_PTR0:%.*]], i64 [[VP_MUL010]]
; CHECK:        [[VP_MUL110:%.*]] = mul i64 [[VP_MUL1]], 10
; CHECK-NEXT:   [[VP_FINAL_GEP1:%.*]] = getelementptr inbounds i8, ptr [[VP_PTR1:%.*]], i64 [[VP_MUL110]]
; CHECK:        [[VP_MUL210:%.*]] = mul i64 [[VP_MUL2]], 10
; CHECK-NEXT:   [[VP_FINAL_GEP2:%.*]] = getelementptr inbounds i8, ptr [[VP_PTR2:%.*]], i64 [[VP_MUL210]]

; Test verifies that VPlan can consume OMP linear clauses with opaque pointres.

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@arr = dso_local global [10 x i32] zeroinitializer, align 16

; Function Attrs: noinline nounwind uwtable
define dso_local void @foo(i64* %x, i32* %y, i16** %z, i64 noundef %step) #0 {
entry:
  %x.linear.ptr = alloca ptr, align 4
  %y.linear.ptr = alloca ptr, align 4
  %z.linear.ptr = alloca ptr, align 4
  %i.linear.iv.ptr = alloca i32, align 4
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %entry
  store ptr %x, ptr %x.linear.ptr, align 4
  store ptr %y, ptr %y.linear.ptr, align 4
  store ptr %z, ptr %z.linear.ptr, align 4
  br label %omp.region.entry

omp.region.entry:                                 ; preds = %DIR.OMP.SIMD.1
%i3 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.LINEAR:TYPED.PTR_TO_PTR"(ptr %x.linear.ptr, i64 0, i32 1, i64 %step), "QUAL.OMP.LINEAR:TYPED.PTR_TO_PTR"(ptr %y.linear.ptr, i32 0, i32 1, i64 %step), "QUAL.OMP.LINEAR:TYPED.PTR_TO_PTR"(ptr %z.linear.ptr, ptr null, i32 1, i64 %step), "QUAL.OMP.LINEAR:IV.TYPED"(ptr %i.linear.iv.ptr, i32 0, i32 1, i32 1) ]
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.inner.for.body, %omp.region.entry
  %iv = phi i32 [ 0, %omp.region.entry ], [ %iv.next, %omp.inner.for.body ]
  store i32 %iv, ptr %i.linear.iv.ptr, align 4
  %yload1 = load ptr, ptr %y.linear.ptr, align 4
  %yload2 = load i32, ptr %yload1, align 4
  %i = load i32, ptr %i.linear.iv.ptr, align 4
  %arr.ptr = getelementptr inbounds [10 x i32], ptr @arr, i64 0, i32 %i
  store i32 %yload2, ptr %arr.ptr, align 4
  %xload = load ptr, ptr %x.linear.ptr, align 4
  %zload = load ptr, ptr %z.linear.ptr, align 4
  call void @_Z3bazPcPc(ptr nonnull %xload, ptr nonnull %zload)
  %iv.next = add nsw i32 %iv, 1
  %cond.exit = icmp sgt i32 10, %iv.next
  br i1 %cond.exit, label %omp.inner.for.body, label %omp.region.exit

omp.region.exit:                                  ; preds = %omp.inner.for.body
  call void @llvm.directive.region.exit(token %i3) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.OMP.END.SIMD.1

DIR.OMP.END.SIMD.1:                               ; preds = %omp.region.exit
  %y.last = load ptr, ptr %y.linear.ptr, align 4
  store ptr %y.last, ptr %y, align 4
  %xlast = load ptr, ptr %x.linear.ptr, align 4
  %zlast = load ptr, ptr %z.linear.ptr, align 4
  call void @_Z3bazPcPc(ptr nonnull %xlast, ptr nonnull %zlast)
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %DIR.OMP.END.SIMD.1
  br label %DIR.OMP.END.SIMD.3

DIR.OMP.END.SIMD.3:                               ; preds = %omp.loop.exit
  ret void
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

declare dso_local void @_Z3bazPcPc(ptr, ptr)

attributes #0 = { noinline nounwind uwtable "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "frame-pointer"="all" "may-have-openmp-directive"="true" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #1 = { nounwind }
