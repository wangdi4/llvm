; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -opaque-pointers=0 -S < %s -passes=hir-ssa-deconstruction,hir-vec-dir-insert,hir-vplan-vec \
; RUN: -disable-output -vplan-print-after-unroll -vplan-force-uf=9 -vplan-enable-partial-sums=true | FileCheck %s

; float foo(float *lp, float init) {
;   long l1;
;   float sum = init;
;   for (l1 = 0; l1 < 1024; l1++)
;     sum += lp[l1];
;   return sum;
; }

; Test using a higher forced UF to check that the post-loop reduction
; is tree-like.
define float @foo(float* %lp, float %init) {
; CHECK-LABEL:  VPlan after VPlan loop unrolling:
; CHECK-NEXT:  VPlan IR for: Initial VPlan for VF=4
; CHECK-NEXT:  External Defs Start:
; CHECK-DAG:     [[VP0:%.*]] = {%sum.07}
; CHECK-DAG:     [[VP1:%.*]] = {%lp}
; CHECK-NEXT:  External Defs End:
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i64 1024, UF = 9
; CHECK-NEXT:     [DA: Div] float [[VP_RED_INIT:%.*]] = reduction-init float 0.000000e+00
; CHECK-NEXT:     [DA: Div] i64 [[VP__IND_INIT:%.*]] = induction-init{add} i64 live-in1 i64 1
; CHECK-NEXT:     [DA: Uni] i64 [[VP__IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:     [DA: Uni] br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], cloned.[[BB3:BB[0-9]+]]
; CHECK-NEXT:     [DA: Div] float [[VP2:%.*]] = phi  [ float [[VP_RED_INIT]], [[BB1]] ],  [ float [[VP3:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] float [[VP4:%.*]] = phi  [ float [[VP_RED_INIT]], [[BB1]] ],  [ float [[VP5:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] float [[VP6:%.*]] = phi  [ float [[VP_RED_INIT]], [[BB1]] ],  [ float [[VP7:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] float [[VP8:%.*]] = phi  [ float [[VP_RED_INIT]], [[BB1]] ],  [ float [[VP9:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] float [[VP10:%.*]] = phi  [ float [[VP_RED_INIT]], [[BB1]] ],  [ float [[VP11:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] float [[VP12:%.*]] = phi  [ float [[VP_RED_INIT]], [[BB1]] ],  [ float [[VP13:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] float [[VP14:%.*]] = phi  [ float [[VP_RED_INIT]], [[BB1]] ],  [ float [[VP15:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] float [[VP16:%.*]] = phi  [ float [[VP_RED_INIT]], [[BB1]] ],  [ float [[VP17:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] float [[VP18:%.*]] = phi  [ float [[VP_RED_INIT]], [[BB1]] ],  [ float [[VP19:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] i64 [[VP20:%.*]] = phi  [ i64 [[VP__IND_INIT]], [[BB1]] ],  [ i64 [[VP21:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] float* [[VP_SUBSCRIPT:%.*]] = subscript inbounds float* [[LP0:%.*]] i64 [[VP20]]
; CHECK-NEXT:     [DA: Div] float [[VP_LOAD:%.*]] = load float* [[VP_SUBSCRIPT]]
; CHECK-NEXT:     [DA: Div] float [[VP19]] = fadd float [[VP_LOAD]] float [[VP18]]
; CHECK-NEXT:     [DA: Div] i64 [[VP22:%.*]] = add i64 [[VP20]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP23:%.*]] = icmp slt i64 [[VP22]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br cloned.[[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB4]]: # preds: [[BB2]]
; CHECK-NEXT:     [DA: Div] float* [[VP24:%.*]] = subscript inbounds float* [[LP0]] i64 [[VP22]]
; CHECK-NEXT:     [DA: Div] float [[VP25:%.*]] = load float* [[VP24]]
; CHECK-NEXT:     [DA: Div] float [[VP3]] = fadd float [[VP25]] float [[VP2]]
; CHECK-NEXT:     [DA: Div] i64 [[VP26:%.*]] = add i64 [[VP22]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP27:%.*]] = icmp slt i64 [[VP26]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br cloned.[[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB5]]: # preds: cloned.[[BB4]]
; CHECK-NEXT:     [DA: Div] float* [[VP28:%.*]] = subscript inbounds float* [[LP0]] i64 [[VP26]]
; CHECK-NEXT:     [DA: Div] float [[VP29:%.*]] = load float* [[VP28]]
; CHECK-NEXT:     [DA: Div] float [[VP5]] = fadd float [[VP29]] float [[VP4]]
; CHECK-NEXT:     [DA: Div] i64 [[VP30:%.*]] = add i64 [[VP26]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP31:%.*]] = icmp slt i64 [[VP30]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br cloned.[[BB6:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB6]]: # preds: cloned.[[BB5]]
; CHECK-NEXT:     [DA: Div] float* [[VP32:%.*]] = subscript inbounds float* [[LP0]] i64 [[VP30]]
; CHECK-NEXT:     [DA: Div] float [[VP33:%.*]] = load float* [[VP32]]
; CHECK-NEXT:     [DA: Div] float [[VP7]] = fadd float [[VP33]] float [[VP6]]
; CHECK-NEXT:     [DA: Div] i64 [[VP34:%.*]] = add i64 [[VP30]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP35:%.*]] = icmp slt i64 [[VP34]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br cloned.[[BB7:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB7]]: # preds: cloned.[[BB6]]
; CHECK-NEXT:     [DA: Div] float* [[VP36:%.*]] = subscript inbounds float* [[LP0]] i64 [[VP34]]
; CHECK-NEXT:     [DA: Div] float [[VP37:%.*]] = load float* [[VP36]]
; CHECK-NEXT:     [DA: Div] float [[VP9]] = fadd float [[VP37]] float [[VP8]]
; CHECK-NEXT:     [DA: Div] i64 [[VP38:%.*]] = add i64 [[VP34]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP39:%.*]] = icmp slt i64 [[VP38]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br cloned.[[BB8:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB8]]: # preds: cloned.[[BB7]]
; CHECK-NEXT:     [DA: Div] float* [[VP40:%.*]] = subscript inbounds float* [[LP0]] i64 [[VP38]]
; CHECK-NEXT:     [DA: Div] float [[VP41:%.*]] = load float* [[VP40]]
; CHECK-NEXT:     [DA: Div] float [[VP11]] = fadd float [[VP41]] float [[VP10]]
; CHECK-NEXT:     [DA: Div] i64 [[VP42:%.*]] = add i64 [[VP38]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP43:%.*]] = icmp slt i64 [[VP42]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br cloned.[[BB9:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB9]]: # preds: cloned.[[BB8]]
; CHECK-NEXT:     [DA: Div] float* [[VP44:%.*]] = subscript inbounds float* [[LP0]] i64 [[VP42]]
; CHECK-NEXT:     [DA: Div] float [[VP45:%.*]] = load float* [[VP44]]
; CHECK-NEXT:     [DA: Div] float [[VP13]] = fadd float [[VP45]] float [[VP12]]
; CHECK-NEXT:     [DA: Div] i64 [[VP46:%.*]] = add i64 [[VP42]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP47:%.*]] = icmp slt i64 [[VP46]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br cloned.[[BB10:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB10]]: # preds: cloned.[[BB9]]
; CHECK-NEXT:     [DA: Div] float* [[VP48:%.*]] = subscript inbounds float* [[LP0]] i64 [[VP46]]
; CHECK-NEXT:     [DA: Div] float [[VP49:%.*]] = load float* [[VP48]]
; CHECK-NEXT:     [DA: Div] float [[VP15]] = fadd float [[VP49]] float [[VP14]]
; CHECK-NEXT:     [DA: Div] i64 [[VP50:%.*]] = add i64 [[VP46]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP51:%.*]] = icmp slt i64 [[VP50]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br cloned.[[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB3]]: # preds: cloned.[[BB10]]
; CHECK-NEXT:     [DA: Div] float* [[VP52:%.*]] = subscript inbounds float* [[LP0]] i64 [[VP50]]
; CHECK-NEXT:     [DA: Div] float [[VP53:%.*]] = load float* [[VP52]]
; CHECK-NEXT:     [DA: Div] float [[VP17]] = fadd float [[VP53]] float [[VP16]]
; CHECK-NEXT:     [DA: Div] i64 [[VP21]] = add i64 [[VP50]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP54:%.*]] = icmp slt i64 [[VP21]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP54]], [[BB2]], [[BB11:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB11]]: # preds: cloned.[[BB3]]
; CHECK-NEXT:     [DA: Div] float [[VP55:%.*]] = fadd float [[VP19]] float [[VP3]]
; CHECK-NEXT:     [DA: Div] float [[VP56:%.*]] = fadd float [[VP5]] float [[VP7]]
; CHECK-NEXT:     [DA: Div] float [[VP57:%.*]] = fadd float [[VP9]] float [[VP11]]
; CHECK-NEXT:     [DA: Div] float [[VP58:%.*]] = fadd float [[VP13]] float [[VP15]]
; CHECK-NEXT:     [DA: Div] float [[VP59:%.*]] = fadd float [[VP55]] float [[VP56]]
; CHECK-NEXT:     [DA: Div] float [[VP60:%.*]] = fadd float [[VP57]] float [[VP58]]
; CHECK-NEXT:     [DA: Div] float [[VP61:%.*]] = fadd float [[VP59]] float [[VP60]]
; CHECK-NEXT:     [DA: Div] float [[VP62:%.*]] = fadd float [[VP61]] float [[VP17]]
; CHECK-NEXT:     [DA: Uni] float [[VP_RED_FINAL:%.*]] = reduction-final{fadd} float [[VP62]] float live-in0
; CHECK-NEXT:     [DA: Uni] i64 [[VP__IND_FINAL:%.*]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Uni] br [[BB12:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB12]]: # preds: [[BB11]]
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   float [[VP_RED_FINAL]] -> [[VP63:%.*]] = {%sum.07}
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 1   no underlying for i64 [[VP__IND_FINAL]]
;
entry:
  br label %for.body

for.body:                                         ; preds = %entry, %for.body
  %sum.07 = phi float [ %init, %entry ], [ %add, %for.body ]
  %l1.06 = phi i64 [ 0, %entry ], [ %inc, %for.body ]
  %arrayidx = getelementptr inbounds float, float* %lp, i64 %l1.06
  %0 = load float, float* %arrayidx, align 4
  %add = fadd fast float %0, %sum.07
  %inc = add nuw nsw i64 %l1.06, 1
  %exitcond.not = icmp eq i64 %inc, 1024
  br i1 %exitcond.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  %add.lcssa = phi float [ %add, %for.body ]
  ret float %add.lcssa
}

