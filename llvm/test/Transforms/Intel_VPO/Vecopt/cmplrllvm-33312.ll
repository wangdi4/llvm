; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -enable-new-pm=0 -hir-ssa-deconstruction -hir-framework  -hir-vec-dir-insert -hir-vplan-vec -print-after=hir-vplan-vec -hir-details -disable-output < %s 2>&1 | FileCheck %s
; RUN: opt -passes='hir-ssa-deconstruction,hir-vec-dir-insert,hir-vplan-vec,print<hir>' -hir-details -disable-output < %s 2>&1 | FileCheck %s

; Used to crash with
;
;   Assertion `Consistent && "def@level is inconsistent"' failed.
;
; The commit that fixed the issue manifsted itself in
;
;   %phi.temp27 = %i32.last;
;   <LVAL-REG> NON-LINEAR <16 x i32> %phi.temp27 {sb:54}
;   <RVAL-REG> NON-LINEAR <16 x i32> %i32.last {sb:3} << Using NON-LINEAR here

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define float @foo(float **%a, i1 %c) {
;               *** IR Dump After VPlan HIR Vectorizer (hir-vplan-vec) ***
; CHECK:       Function: foo
; CHECK-EMPTY:
; CHECK-NEXT:  BEGIN REGION { modified }
; CHECK-NEXT:        + Ztt: No
; CHECK-NEXT:        + NumExits: 1
; CHECK-NEXT:        + Innermost: No
; CHECK-NEXT:        + HasSignedIV: Yes
; CHECK-NEXT:        + LiveIn symbases: 3, 4, 9, 21
; CHECK-NEXT:        + LiveOut symbases: 6, 7
; CHECK-NEXT:        + Loop metadata: No
; CHECK-NEXT:        + DO i64 i1 = 0, 11, 1   <DO_LOOP>
; CHECK-NEXT:        |   [[P0:%.*]] = ([[A0:%.*]])[i1]
; CHECK-NEXT:        |   <LVAL-REG> NON-LINEAR float* [[P0]] {sb:10}
; CHECK-NEXT:        |   <RVAL-REG> {al:8}(LINEAR float** [[A0]])[LINEAR i64 i1] {sb:22}
; CHECK-NEXT:        |      <BLOB> LINEAR float** [[A0]] {sb:9}
; CHECK-NEXT:        |
; CHECK-NEXT:        |   [[PHI_TEMP0:%.*]] = [[FLT_LAST0:%.*]];
; CHECK-NEXT:        |   <LVAL-REG> NON-LINEAR <16 x float> [[PHI_TEMP0]] {sb:24}
; CHECK-NEXT:        |   <RVAL-REG> NON-LINEAR <16 x float> [[FLT_LAST0]] {sb:4}
; CHECK-NEXT:        |
; CHECK-NEXT:        |   [[PHI_TEMP20:%.*]] = [[I32_LAST0:%.*]];
; CHECK-NEXT:        |   <LVAL-REG> NON-LINEAR <16 x i32> [[PHI_TEMP20]] {sb:25}
; CHECK-NEXT:        |   <RVAL-REG> NON-LINEAR <16 x i32> [[I32_LAST0]] {sb:3}
; CHECK-NEXT:        |
; CHECK-NEXT:        |   [[PHI_TEMP40:%.*]] = -1
; CHECK-NEXT:        |   <LVAL-REG> NON-LINEAR <16 x i64> [[PHI_TEMP40]] {sb:26}
; CHECK-NEXT:        |
; CHECK-NEXT:        |   [[PHI_TEMP60:%.*]] = -1
; CHECK-NEXT:        |   <LVAL-REG> NON-LINEAR <16 x i64> [[PHI_TEMP60]] {sb:27}
; CHECK-NEXT:        |
; CHECK-NEXT:        |
; CHECK-NEXT:        |   + Ztt: No
; CHECK-NEXT:        |   + NumExits: 1
; CHECK-NEXT:        |   + Innermost: Yes
; CHECK-NEXT:        |   + HasSignedIV: Yes
; CHECK-NEXT:        |   + LiveIn symbases: 10, 21, 24, 25, 26, 27
; CHECK-NEXT:        |   + LiveOut symbases: 3, 4, 36, 37, 38, 39
; CHECK-NEXT:        |   + Loop metadata: !llvm.loop
; CHECK-NEXT:        |   + DO i64 i2 = 0, 127, 16   <DO_LOOP> <auto-vectorized> <novectorize>
; CHECK-NEXT:        |   |   [[DOTVEC0:%.*]] = (<16 x float>*)([[P0]])[i2]
; CHECK-NEXT:        |   |   <LVAL-REG> NON-LINEAR <16 x float> [[DOTVEC0]] {sb:30}
; CHECK-NEXT:        |   |   <RVAL-REG> {al:4}(<16 x float>*)(LINEAR float* %p{def@1})[LINEAR i64 i2] {sb:22}
; CHECK-NEXT:        |   |      <BLOB> LINEAR float* %p{def@1} {sb:10}
; CHECK-NEXT:        |   |
; CHECK-NEXT:        |   |   [[DOTVEC80:%.*]] = [[DOTVEC0]]  /  2.000000e+00
; CHECK-NEXT:        |   |   <LVAL-REG> NON-LINEAR <16 x float> [[DOTVEC80]] {sb:31}
; CHECK-NEXT:        |   |   <RVAL-REG> NON-LINEAR <16 x float> [[DOTVEC0]] {sb:30}
; CHECK-NEXT:        |   |
; CHECK-NEXT:        |   |   [[DOTVEC90:%.*]] = ([[DOTVEC0]] >= 4.200000e+01) ? -1 : [[C0:%.*]];
; CHECK-NEXT:        |   |   <LVAL-REG> NON-LINEAR <16 x i1> [[DOTVEC90]] {sb:32}
; CHECK-NEXT:        |   |   <RVAL-REG> NON-LINEAR <16 x float> [[DOTVEC0]] {sb:30}
; CHECK-NEXT:        |   |   <RVAL-REG> LINEAR <16 x i1> [[C0]] {sb:21}
; CHECK-NEXT:        |   |
; CHECK-NEXT:        |   |   [[DOTVEC100:%.*]] = [[DOTVEC90]] == 0
; CHECK-NEXT:        |   |   <LVAL-REG> NON-LINEAR <16 x i1> [[DOTVEC100]] {sb:33}
; CHECK-NEXT:        |   |   <RVAL-REG> NON-LINEAR <16 x i1> [[DOTVEC90]] {sb:32}
; CHECK-NEXT:        |   |
; CHECK-NEXT:        |   |   [[DOTCOPY110:%.*]] = 2
; CHECK-NEXT:        |   |   <LVAL-REG> NON-LINEAR <16 x i32> [[DOTCOPY110]] {sb:34}
; CHECK-NEXT:        |   |
; CHECK-NEXT:        |   |   [[DOTCOPY120:%.*]] = [[DOTVEC80]]
; CHECK-NEXT:        |   |   <LVAL-REG> NON-LINEAR <16 x float> [[DOTCOPY120]] {sb:35}
; CHECK-NEXT:        |   |   <RVAL-REG> NON-LINEAR <16 x float> [[DOTVEC80]] {sb:31}
; CHECK-NEXT:        |   |
; CHECK-NEXT:        |   |   [[SELECT0:%.*]] = ([[DOTVEC100]] == <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>) ? i2 + <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15> : [[PHI_TEMP40]]
; CHECK-NEXT:        |   |   <LVAL-REG> NON-LINEAR <16 x i64> [[SELECT0]] {sb:36}
; CHECK-NEXT:        |   |   <RVAL-REG> NON-LINEAR <16 x i1> [[DOTVEC100]] {sb:33}
; CHECK-NEXT:        |   |   <RVAL-REG> LINEAR <16 x i64> i2 + <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15> {sb:2}
; CHECK-NEXT:        |   |   <RVAL-REG> NON-LINEAR <16 x i64> [[PHI_TEMP40]] {sb:26}
; CHECK-NEXT:        |   |
; CHECK-NEXT:        |   |   [[SELECT130:%.*]] = ([[DOTVEC100]] == <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>) ? [[DOTCOPY120]] : [[PHI_TEMP0]]
; CHECK-NEXT:        |   |   <LVAL-REG> NON-LINEAR <16 x float> [[SELECT130]] {sb:37}
; CHECK-NEXT:        |   |   <RVAL-REG> NON-LINEAR <16 x i1> [[DOTVEC100]] {sb:33}
; CHECK-NEXT:        |   |   <RVAL-REG> NON-LINEAR <16 x float> [[DOTCOPY120]] {sb:35}
; CHECK-NEXT:        |   |   <RVAL-REG> NON-LINEAR <16 x float> [[PHI_TEMP0]] {sb:24}
; CHECK-NEXT:        |   |
; CHECK-NEXT:        |   |   [[SELECT140:%.*]] = ([[DOTVEC100]] == <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>) ? i2 + <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15> : [[PHI_TEMP60]]
; CHECK-NEXT:        |   |   <LVAL-REG> NON-LINEAR <16 x i64> [[SELECT140]] {sb:38}
; CHECK-NEXT:        |   |   <RVAL-REG> NON-LINEAR <16 x i1> [[DOTVEC100]] {sb:33}
; CHECK-NEXT:        |   |   <RVAL-REG> LINEAR <16 x i64> i2 + <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15> {sb:2}
; CHECK-NEXT:        |   |   <RVAL-REG> NON-LINEAR <16 x i64> [[PHI_TEMP60]] {sb:27}
; CHECK-NEXT:        |   |
; CHECK-NEXT:        |   |   [[SELECT150:%.*]] = ([[DOTVEC100]] == <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>) ? [[DOTCOPY110]] : [[PHI_TEMP20]]
; CHECK-NEXT:        |   |   <LVAL-REG> NON-LINEAR <16 x i32> [[SELECT150]] {sb:39}
; CHECK-NEXT:        |   |   <RVAL-REG> NON-LINEAR <16 x i1> [[DOTVEC100]] {sb:33}
; CHECK-NEXT:        |   |   <RVAL-REG> NON-LINEAR <16 x i32> [[DOTCOPY110]] {sb:34}
; CHECK-NEXT:        |   |   <RVAL-REG> NON-LINEAR <16 x i32> [[PHI_TEMP20]] {sb:25}
; CHECK-NEXT:        |   |
; CHECK-NEXT:        |   |   [[PHI_TEMP0]] = [[SELECT130]]
; CHECK-NEXT:        |   |   <LVAL-REG> NON-LINEAR <16 x float> [[PHI_TEMP0]] {sb:24}
; CHECK-NEXT:        |   |   <RVAL-REG> NON-LINEAR <16 x float> [[SELECT130]] {sb:37}
; CHECK-NEXT:        |   |
; CHECK-NEXT:        |   |   [[PHI_TEMP20]] = [[SELECT150]]
; CHECK-NEXT:        |   |   <LVAL-REG> NON-LINEAR <16 x i32> [[PHI_TEMP20]] {sb:25}
; CHECK-NEXT:        |   |   <RVAL-REG> NON-LINEAR <16 x i32> [[SELECT150]] {sb:39}
; CHECK-NEXT:        |   |
; CHECK-NEXT:        |   |   [[PHI_TEMP40]] = [[SELECT0]]
; CHECK-NEXT:        |   |   <LVAL-REG> NON-LINEAR <16 x i64> [[PHI_TEMP40]] {sb:26}
; CHECK-NEXT:        |   |   <RVAL-REG> NON-LINEAR <16 x i64> [[SELECT0]] {sb:36}
; CHECK-NEXT:        |   |
; CHECK-NEXT:        |   |   [[PHI_TEMP60]] = [[SELECT140]]
; CHECK-NEXT:        |   |   <LVAL-REG> NON-LINEAR <16 x i64> [[PHI_TEMP60]] {sb:27}
; CHECK-NEXT:        |   |   <RVAL-REG> NON-LINEAR <16 x i64> [[SELECT140]] {sb:38}
; CHECK-NEXT:        |   |
; CHECK-NEXT:        |   + END LOOP
; CHECK-NEXT:        |
; CHECK-NEXT:        |   [[DOTVEC200:%.*]] = [[SELECT0]] != -1
; CHECK-NEXT:        |   <LVAL-REG> NON-LINEAR <16 x i1> [[DOTVEC200]] {sb:40}
; CHECK-NEXT:        |   <RVAL-REG> NON-LINEAR <16 x i64> [[SELECT0]] {sb:36}
; CHECK-NEXT:        |
; CHECK-NEXT:        |   [[TMP0:%.*]] = bitcast.<16 x i1>.i16([[DOTVEC200]])
; CHECK-NEXT:        |   <LVAL-REG> NON-LINEAR i16 [[TMP0]] {sb:41}
; CHECK-NEXT:        |   <RVAL-REG> NON-LINEAR <16 x i1> [[DOTVEC200]] {sb:40}
; CHECK-NEXT:        |
; CHECK-NEXT:        |   [[CMP0:%.*]] = [[TMP0]] == 0
; CHECK-NEXT:        |   <LVAL-REG> NON-LINEAR i1 [[CMP0]] {sb:42}
; CHECK-NEXT:        |   <RVAL-REG> NON-LINEAR i16 [[TMP0]] {sb:41}
; CHECK-NEXT:        |
; CHECK-NEXT:        |   [[ALL_ZERO_CHECK0:%.*]] = [[CMP0]]
; CHECK-NEXT:        |   <LVAL-REG> NON-LINEAR <16 x i1> [[ALL_ZERO_CHECK0]] {sb:43}
; CHECK-NEXT:        |   <RVAL-REG> NON-LINEAR <16 x i1> [[CMP0]] {sb:42}
; CHECK-NEXT:        |
; CHECK-NEXT:        |   [[PHI_TEMP210:%.*]] = [[FLT_LAST0]]
; CHECK-NEXT:        |   <LVAL-REG> NON-LINEAR <16 x float> [[PHI_TEMP210]] {sb:44}
; CHECK-NEXT:        |   <RVAL-REG> NON-LINEAR <16 x float> [[FLT_LAST0]] {sb:4}
; CHECK-NEXT:        |
; CHECK-NEXT:        |   [[UNIFCOND0:%.*]] = extractelement [[ALL_ZERO_CHECK0]],  0
; CHECK-NEXT:        |   <LVAL-REG> NON-LINEAR i1 [[UNIFCOND0]] {sb:45}
; CHECK-NEXT:        |   <RVAL-REG> NON-LINEAR <16 x i1> [[ALL_ZERO_CHECK0]] {sb:43}
; CHECK-NEXT:        |
; CHECK-NEXT:        |   if ([[UNIFCOND0]] == 1)
; CHECK-NEXT:        |   <RVAL-REG> NON-LINEAR i1 [[UNIFCOND0]] {sb:45}
; CHECK-NEXT:        |
; CHECK-NEXT:        |   {
; CHECK-NEXT:        |      goto [[BB0:BB[0-9]+]].74
; CHECK-NEXT:        |   }
; CHECK-NEXT:        |   [[PRIV_IDX_MAX0:%.*]] = @llvm.vector.reduce.smax.v16i64([[SELECT0]])
; CHECK-NEXT:        |   <LVAL-REG> NON-LINEAR i64 [[PRIV_IDX_MAX0]] {sb:46}
; CHECK-NEXT:        |   <RVAL-REG> NON-LINEAR <16 x i64> [[SELECT0]] {sb:36}
; CHECK-NEXT:        |
; CHECK-NEXT:        |   [[PRIV_IDX_CMP0:%.*]] = [[SELECT0]] == [[PRIV_IDX_MAX0]]
; CHECK-NEXT:        |   <LVAL-REG> NON-LINEAR <16 x i1> [[PRIV_IDX_CMP0]] {sb:47}
; CHECK-NEXT:        |   <RVAL-REG> NON-LINEAR <16 x i64> [[SELECT0]] {sb:36}
; CHECK-NEXT:        |   <RVAL-REG> NON-LINEAR <16 x i64> [[PRIV_IDX_MAX0]] {sb:46}
; CHECK-NEXT:        |
; CHECK-NEXT:        |   [[BSFINTMASK0:%.*]] = bitcast.<16 x i1>.i16([[PRIV_IDX_CMP0]])
; CHECK-NEXT:        |   <LVAL-REG> NON-LINEAR i16 [[BSFINTMASK0]] {sb:48}
; CHECK-NEXT:        |   <RVAL-REG> NON-LINEAR <16 x i1> [[PRIV_IDX_CMP0]] {sb:47}
; CHECK-NEXT:        |
; CHECK-NEXT:        |   [[BSF0:%.*]] = @llvm.cttz.i16([[BSFINTMASK0]],  1)
; CHECK-NEXT:        |   <LVAL-REG> NON-LINEAR i16 [[BSF0]] {sb:49}
; CHECK-NEXT:        |   <RVAL-REG> NON-LINEAR i16 [[BSFINTMASK0]] {sb:48}
; CHECK-NEXT:        |
; CHECK-NEXT:        |   [[FLT_LAST0]] = extractelement [[SELECT130]],  [[BSF0]]
; CHECK-NEXT:        |   <LVAL-REG> NON-LINEAR float [[FLT_LAST0]] {sb:4}
; CHECK-NEXT:        |   <RVAL-REG> NON-LINEAR <16 x float> [[SELECT130]] {sb:37}
; CHECK-NEXT:        |   <RVAL-REG> NON-LINEAR i16 [[BSF0]] {sb:49}
; CHECK-NEXT:        |
; CHECK-NEXT:        |   [[PHI_TEMP210]] = [[FLT_LAST0]]
; CHECK-NEXT:        |   <LVAL-REG> NON-LINEAR <16 x float> [[PHI_TEMP210]] {sb:44}
; CHECK-NEXT:        |   <RVAL-REG> NON-LINEAR <16 x float> [[FLT_LAST0]] {sb:4}
; CHECK-NEXT:        |
; CHECK-NEXT:        |   [[BB0]].74:
; CHECK-NEXT:        |   [[DOTVEC240:%.*]] = [[SELECT140]] != -1
; CHECK-NEXT:        |   <LVAL-REG> NON-LINEAR <16 x i1> [[DOTVEC240]] {sb:50}
; CHECK-NEXT:        |   <RVAL-REG> NON-LINEAR <16 x i64> [[SELECT140]] {sb:38}
; CHECK-NEXT:        |
; CHECK-NEXT:        |   [[TMP1:%.*]] = bitcast.<16 x i1>.i16([[DOTVEC240]])
; CHECK-NEXT:        |   <LVAL-REG> NON-LINEAR i16 [[TMP1]] {sb:51}
; CHECK-NEXT:        |   <RVAL-REG> NON-LINEAR <16 x i1> [[DOTVEC240]] {sb:50}
; CHECK-NEXT:        |
; CHECK-NEXT:        |   [[CMP250:%.*]] = [[TMP1]] == 0
; CHECK-NEXT:        |   <LVAL-REG> NON-LINEAR i1 [[CMP250]] {sb:52}
; CHECK-NEXT:        |   <RVAL-REG> NON-LINEAR i16 [[TMP1]] {sb:51}
; CHECK-NEXT:        |
; CHECK-NEXT:        |   [[ALL_ZERO_CHECK260:%.*]] = [[CMP250]]
; CHECK-NEXT:        |   <LVAL-REG> NON-LINEAR <16 x i1> [[ALL_ZERO_CHECK260]] {sb:53}
; CHECK-NEXT:        |   <RVAL-REG> NON-LINEAR <16 x i1> [[CMP250]] {sb:52}
; CHECK-NEXT:        |
; CHECK-NEXT:        |   [[PHI_TEMP270:%.*]] = [[I32_LAST0]]
; CHECK-NEXT:        |   <LVAL-REG> NON-LINEAR <16 x i32> [[PHI_TEMP270]] {sb:54}
; CHECK-NEXT:        |   <RVAL-REG> NON-LINEAR <16 x i32> [[I32_LAST0]] {sb:3}
; CHECK-NEXT:        |
; CHECK-NEXT:        |   [[UNIFCOND290:%.*]] = extractelement [[ALL_ZERO_CHECK260]],  0
; CHECK-NEXT:        |   <LVAL-REG> NON-LINEAR i1 [[UNIFCOND290]] {sb:55}
; CHECK-NEXT:        |   <RVAL-REG> NON-LINEAR <16 x i1> [[ALL_ZERO_CHECK260]] {sb:53}
; CHECK-NEXT:        |
; CHECK-NEXT:        |   if ([[UNIFCOND290]] == 1)
; CHECK-NEXT:        |   <RVAL-REG> NON-LINEAR i1 [[UNIFCOND290]] {sb:55}
; CHECK-NEXT:        |
; CHECK-NEXT:        |   {
; CHECK-NEXT:        |      goto [[BB1:BB[0-9]+]].91
; CHECK-NEXT:        |   }
; CHECK-NEXT:        |   [[PRIV_IDX_MAX300:%.*]] = @llvm.vector.reduce.smax.v16i64([[SELECT140]])
; CHECK-NEXT:        |   <LVAL-REG> NON-LINEAR i64 [[PRIV_IDX_MAX300]] {sb:56}
; CHECK-NEXT:        |   <RVAL-REG> NON-LINEAR <16 x i64> [[SELECT140]] {sb:38}
; CHECK-NEXT:        |
; CHECK-NEXT:        |   [[PRIV_IDX_CMP310:%.*]] = [[SELECT140]] == [[PRIV_IDX_MAX300]]
; CHECK-NEXT:        |   <LVAL-REG> NON-LINEAR <16 x i1> [[PRIV_IDX_CMP310]] {sb:57}
; CHECK-NEXT:        |   <RVAL-REG> NON-LINEAR <16 x i64> [[SELECT140]] {sb:38}
; CHECK-NEXT:        |   <RVAL-REG> NON-LINEAR <16 x i64> [[PRIV_IDX_MAX300]] {sb:56}
; CHECK-NEXT:        |
; CHECK-NEXT:        |   [[BSFINTMASK320:%.*]] = bitcast.<16 x i1>.i16([[PRIV_IDX_CMP310]])
; CHECK-NEXT:        |   <LVAL-REG> NON-LINEAR i16 [[BSFINTMASK320]] {sb:58}
; CHECK-NEXT:        |   <RVAL-REG> NON-LINEAR <16 x i1> [[PRIV_IDX_CMP310]] {sb:57}
; CHECK-NEXT:        |
; CHECK-NEXT:        |   [[BSF330:%.*]] = @llvm.cttz.i16([[BSFINTMASK320]],  1)
; CHECK-NEXT:        |   <LVAL-REG> NON-LINEAR i16 [[BSF330]] {sb:59}
; CHECK-NEXT:        |   <RVAL-REG> NON-LINEAR i16 [[BSFINTMASK320]] {sb:58}
; CHECK-NEXT:        |
; CHECK-NEXT:        |   [[I32_LAST0]] = extractelement [[SELECT150]],  [[BSF330]]
; CHECK-NEXT:        |   <LVAL-REG> NON-LINEAR i32 [[I32_LAST0]] {sb:3}
; CHECK-NEXT:        |   <RVAL-REG> NON-LINEAR <16 x i32> [[SELECT150]] {sb:39}
; CHECK-NEXT:        |   <RVAL-REG> NON-LINEAR i16 [[BSF330]] {sb:59}
; CHECK-NEXT:        |
; CHECK-NEXT:        |   [[PHI_TEMP270]] = [[I32_LAST0]]
; CHECK-NEXT:        |   <LVAL-REG> NON-LINEAR <16 x i32> [[PHI_TEMP270]] {sb:54}
; CHECK-NEXT:        |   <RVAL-REG> NON-LINEAR <16 x i32> [[I32_LAST0]] {sb:3}
; CHECK-NEXT:        |
; CHECK-NEXT:        |   [[BB1]].91:
; CHECK-NEXT:        |   [[FLT_LAST_OUT0:%.*]] = [[FLT_LAST0]]
; CHECK-NEXT:        |   <LVAL-REG> NON-LINEAR float [[FLT_LAST_OUT0]] {sb:6}
; CHECK-NEXT:        |   <RVAL-REG> NON-LINEAR float [[FLT_LAST0]] {sb:4}
; CHECK-NEXT:        |
; CHECK-NEXT:        |   [[I32_LAST_OUT0:%.*]] = [[I32_LAST0]]
; CHECK-NEXT:        |   <LVAL-REG> NON-LINEAR i32 [[I32_LAST_OUT0]] {sb:7}
; CHECK-NEXT:        |   <RVAL-REG> NON-LINEAR i32 [[I32_LAST0]] {sb:3}
; CHECK-NEXT:        |
; CHECK-NEXT:        + END LOOP
; CHECK-NEXT:  END REGION
;
entry:
  br label %outer.header

outer.header:
  %outer.iv = phi i64 [ 0, %entry ], [ %outer.iv.next, %outer.latch ]
  %i32.last = phi i32 [ 0, %entry ], [ %i32.lcssa.inner, %outer.latch ]
  %flt.last = phi float [ 0.000000e+00, %entry ], [ %flt.lcssa.inner, %outer.latch ]
  %a.gep = getelementptr float *, float **%a, i64 %outer.iv
  %p = load float *, float **%a.gep
  br label %inner.header

inner.header:
  %inner.iv = phi i64 [ 0, %outer.header ], [ %inner.iv.next, %inner.latch ]
  %i32.last.inner = phi i32 [ %i32.last, %outer.header ], [ %i32.last.inner.next, %inner.latch ]
  %flt.last.inner = phi float [ %flt.last, %outer.header ], [ %flt.last.inner.next, %inner.latch ]
  %p.gep = getelementptr float, float* %p, i64 %inner.iv
  %ld = load float, float* %p.gep, align 4
  %fdiv = fdiv fast float %ld, 2.000000e+00
  %cond = fcmp oge float %ld, 42.000000e+00
  %tmp46 = select i1 %cond, i1 true, i1 %c
  br i1 %tmp46, label %inner.latch, label %bb

bb:
  br label %inner.latch

inner.latch:
  %flt.last.inner.next = phi float [ %flt.last.inner, %inner.header ], [ %fdiv, %bb ]
  %i32.last.inner.next = phi i32 [ %i32.last.inner, %inner.header ], [ 2, %bb ]

  %inner.iv.next = add nuw nsw i64 %inner.iv, 1
  %inner.exitcond = icmp eq i64 %inner.iv.next, 128
  br i1 %inner.exitcond, label %outer.latch, label %inner.header

outer.latch:
  %flt.lcssa.inner = phi float [ %flt.last.inner.next, %inner.latch ]
  %i32.lcssa.inner = phi i32 [ %i32.last.inner.next, %inner.latch ]

  %outer.iv.next = add nuw nsw i64 %outer.iv, 1
  %outer.exitcond = icmp eq i64 %outer.iv.next, 12
  br i1 %outer.exitcond, label %outer.exit, label %outer.header

outer.exit:
  %i32.lcssa.outer = phi i32 [ %i32.lcssa.inner, %outer.latch ]
  %flt.lcssa.outer = phi float [ %flt.lcssa.inner, %outer.latch ]
  %cast = sitofp i32 %i32.lcssa.outer to float
  %ret = fadd float %cast, %flt.lcssa.outer
  ret float %ret

}
