; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; REQUIRES: asserts
; RUN: opt -S < %s -VPlanDriver -vplan-print-after-loop-cfu -disable-output | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)

;; Test for non-LCSSA form when the LCSSA phi is merged into the loop body by
;; merge loop exits transformation. That is happens because Loop Merge Exit
;; transformation wasn't preserving LCSSA form and the test would become useless
;; once this is fixed. In fact, we should fix this and add an assert in the
;; LoopCFU transformation for any non-LCSSA uses.
define dso_local void @foo_non_lcssa(i64 %N, i64 *%a, i64 %mask_out_inner_loop) local_unnamed_addr #0 {
; CHECK-LABEL:  After inner loop control flow transformation
; CHECK-NEXT:    [[BB0:BB[0-9]+]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB1:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]:
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_OUTER_IV_IND_INIT:%.*]] = induction-init{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP_OUTER_IV_IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:    SUCCESSORS(1):[[BB2:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]:
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_OUTER_IV:%.*]] = phi  [ i64 [[VP_OUTER_IV_NEXT:%.*]], [[BB3:BB[0-9]+]] ],  [ i64 [[VP_OUTER_IV_IND_INIT]], [[BB1]] ]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_SKIP_LOOP:%.*]] = icmp i64 [[VP_OUTER_IV]] i64 [[MASK_OUT_INNER_LOOP0:%.*]]
; CHECK-NEXT:    SUCCESSORS(2):[[BB3]](i1 [[VP_SKIP_LOOP]]), [[BB4:BB[0-9]+]](!i1 [[VP_SKIP_LOOP]])
; CHECK-NEXT:    PREDECESSORS(2): [[BB3]] [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB4]]:
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_CMP216:%.*]] = icmp i64 [[VP_OUTER_IV]] i64 0
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_CMP216_NOT:%.*]] = not i1 [[VP_CMP216]]
; CHECK-NEXT:      SUCCESSORS(2):[[BB3]](i1 [[VP_CMP216]]), [[BB5:BB[0-9]+]](!i1 [[VP_CMP216]])
; CHECK-NEXT:      PREDECESSORS(1): [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB5]]:
; CHECK-NEXT:       <Empty Block>
; CHECK-NEXT:      SUCCESSORS(1):[[BB6:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB6]]:
; CHECK-NEXT:       [DA: Divergent] i64 [[VP_PHI_USE_LIVE_OUT_PREV:%.*]] = phi  [ i64 [[VP_PHI_USE_LIVE_OUT_BLEND:%.*]], [[BB7:BB[0-9]+]] ],  [ i64 undef, [[BB5]] ]
; CHECK-NEXT:       [DA: Divergent] i64 [[VP_PHI_UPDATE_USE_LIVE_OUT_PREV:%.*]] = phi  [ i64 [[VP_PHI_UPDATE_USE_LIVE_OUT_BLEND:%.*]], [[BB7]] ],  [ i64 undef, [[BB5]] ]
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_NO_PHI_INST_USE_LIVE_OUT_PREV:%.*]] = phi  [ i1 [[VP_NO_PHI_INST_USE_LIVE_OUT_BLEND:%.*]], [[BB7]] ],  [ i1 undef, [[BB5]] ]
; CHECK-NEXT:       [DA: Uniform]   i64 [[VP_INNER_IV:%.*]] = phi  [ i64 [[VP_INNER_IV_NEXT:%.*]], [[BB7]] ],  [ i64 0, [[BB5]] ]
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_LOOP_MASK:%.*]] = phi  [ i1 [[VP_CMP216_NOT]], [[BB5]] ],  [ i1 [[VP_LOOP_MASK_NEXT:%.*]], [[BB7]] ]
; CHECK-NEXT:      SUCCESSORS(1):[[BB8:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(2): [[BB7]] [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB8]]:
; CHECK-NEXT:       <Empty Block>
; CHECK-NEXT:       Condition([[BB6]]): [DA: Divergent] i1 [[VP_LOOP_MASK]] = phi  [ i1 [[VP_CMP216_NOT]], [[BB5]] ],  [ i1 [[VP_LOOP_MASK_NEXT]], [[BB7]] ]
; CHECK-NEXT:      SUCCESSORS(2):[[BB9:BB[0-9]+]](i1 [[VP_LOOP_MASK]]), [[BB10:BB[0-9]+]](!i1 [[VP_LOOP_MASK]])
; CHECK-NEXT:      PREDECESSORS(1): [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB9]]:
; CHECK-NEXT:         [DA: Uniform]   i64* [[VP_ARRAYIDX:%.*]] = getelementptr inbounds i64* [[A0:%.*]] i64 [[VP_INNER_IV]]
; CHECK-NEXT:         [DA: Uniform]   i64 [[VP_LD:%.*]] = load i64* [[VP_ARRAYIDX]]
; CHECK-NEXT:         [DA: Uniform]   i1 [[VP_SOME_CMP:%.*]] = icmp i64 [[VP_LD]] i64 42
; CHECK-NEXT:         [DA: Uniform]   i64 [[VP_INNER_IV_NEXT]] = add i64 [[VP_INNER_IV]] i64 1
; CHECK-NEXT:        SUCCESSORS(2):[[INTERMEDIATE_BB0:intermediate.bb[0-9]+]](i1 [[VP_SOME_CMP]]), [[BB11:BB[0-9]+]](!i1 [[VP_SOME_CMP]])
; CHECK-NEXT:        PREDECESSORS(1): [[BB8]]
; CHECK-EMPTY:
; CHECK-NEXT:          [[BB11]]:
; CHECK-NEXT:           [DA: Divergent] i1 [[VP_EXITCOND:%.*]] = icmp i64 [[VP_INNER_IV_NEXT]] i64 [[VP_OUTER_IV]]
; CHECK-NEXT:          SUCCESSORS(1):[[NEW_LOOP_LATCH0:new.loop.latch[0-9]+]]
; CHECK-NEXT:          PREDECESSORS(1): [[BB9]]
; CHECK-EMPTY:
; CHECK-NEXT:          [[INTERMEDIATE_BB0]]:
; CHECK-NEXT:           <Empty Block>
; CHECK-NEXT:          SUCCESSORS(1):[[NEW_LOOP_LATCH0]]
; CHECK-NEXT:          PREDECESSORS(1): [[BB9]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[NEW_LOOP_LATCH0]]:
; CHECK-NEXT:         [DA: Uniform]   i32 [[VP_EXIT_ID_PHI:%.*]] = phi  [ i32 0, [[BB11]] ],  [ i32 1, [[INTERMEDIATE_BB0]] ]
; CHECK-NEXT:         [DA: Uniform]   i1 [[VP_NO_PHI_INST_USE:%.*]] = phi  [ i1 [[VP_SOME_CMP]], [[INTERMEDIATE_BB0]] ],  [ i1 false, [[BB11]] ]
; CHECK-NEXT:         [DA: Uniform]   i64 [[VP_PHI_UPDATE_USE:%.*]] = phi  [ i64 [[VP_INNER_IV_NEXT]], [[INTERMEDIATE_BB0]] ],  [ i64 100, [[BB11]] ]
; CHECK-NEXT:         [DA: Uniform]   i64 [[VP_PHI_USE:%.*]] = phi  [ i64 [[VP_INNER_IV]], [[INTERMEDIATE_BB0]] ],  [ i64 100, [[BB11]] ]
; CHECK-NEXT:         [DA: Divergent] i1 [[VP_TAKE_BACKEDGE_COND:%.*]] = phi  [ i1 [[VP_EXITCOND]], [[BB11]] ],  [ i1 true, [[INTERMEDIATE_BB0]] ]
; CHECK-NEXT:        SUCCESSORS(1):[[BB10]]
; CHECK-NEXT:        PREDECESSORS(2): [[BB11]] [[INTERMEDIATE_BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB10]]:
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_TAKE_BACKEDGE_COND_NOT:%.*]] = not i1 [[VP_TAKE_BACKEDGE_COND]]
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_LOOP_MASK_NEXT]] = and i1 [[VP_TAKE_BACKEDGE_COND_NOT]] i1 [[VP_LOOP_MASK]]
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_NO_PHI_INST_USE_LIVE_OUT_BLEND]] = select i1 [[VP_LOOP_MASK]] i1 [[VP_NO_PHI_INST_USE]] i1 [[VP_NO_PHI_INST_USE_LIVE_OUT_PREV]]
; CHECK-NEXT:       [DA: Divergent] i64 [[VP_PHI_UPDATE_USE_LIVE_OUT_BLEND]] = select i1 [[VP_LOOP_MASK]] i64 [[VP_PHI_UPDATE_USE]] i64 [[VP_PHI_UPDATE_USE_LIVE_OUT_PREV]]
; CHECK-NEXT:       [DA: Divergent] i64 [[VP_PHI_USE_LIVE_OUT_BLEND]] = select i1 [[VP_LOOP_MASK]] i64 [[VP_PHI_USE]] i64 [[VP_PHI_USE_LIVE_OUT_PREV]]
; CHECK-NEXT:       [DA: Uniform]   i1 [[VP0:%.*]] = all-zero-check i1 [[VP_LOOP_MASK_NEXT]]
; CHECK-NEXT:      SUCCESSORS(1):[[BB7]]
; CHECK-NEXT:      PREDECESSORS(2): [[NEW_LOOP_LATCH0]] [[BB8]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB7]]:
; CHECK-NEXT:       <Empty Block>
; CHECK-NEXT:       Condition([[BB10]]): [DA: Uniform]   i1 [[VP0]] = all-zero-check i1 [[VP_LOOP_MASK_NEXT]]
; CHECK-NEXT:      SUCCESSORS(2):[[BB12:BB[0-9]+]](i1 [[VP0]]), [[BB6]](!i1 [[VP0]])
; CHECK-NEXT:      PREDECESSORS(1): [[BB10]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB12]]:
; CHECK-NEXT:       [DA: Divergent] i64 [[VP_PHI_USE_LIVE_OUT_LCSSA:%.*]] = phi  [ i64 [[VP_PHI_USE_LIVE_OUT_BLEND]], [[BB7]] ]
; CHECK-NEXT:       [DA: Divergent] i64 [[VP_PHI_UPDATE_USE_LIVE_OUT_LCSSA:%.*]] = phi  [ i64 [[VP_PHI_UPDATE_USE_LIVE_OUT_BLEND]], [[BB7]] ]
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_NO_PHI_INST_USE_LIVE_OUT_LCSSA:%.*]] = phi  [ i1 [[VP_NO_PHI_INST_USE_LIVE_OUT_BLEND]], [[BB7]] ]
; CHECK-NEXT:       [DA: Divergent] i64 [[VP_USE_A:%.*]] = add i64 [[VP_PHI_USE_LIVE_OUT_LCSSA]] i64 1
; CHECK-NEXT:       [DA: Divergent] i64 [[VP_USE_B:%.*]] = add i64 [[VP_PHI_UPDATE_USE_LIVE_OUT_LCSSA]] i64 1
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_USE_C:%.*]] = xor i1 [[VP_NO_PHI_INST_USE_LIVE_OUT_LCSSA]] i1 true
; CHECK-NEXT:      SUCCESSORS(1):[[BB3]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB7]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]:
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_OUTER_IV_NEXT]] = add i64 [[VP_OUTER_IV]] i64 [[VP_OUTER_IV_IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_OUTER_EXIT_COND:%.*]] = icmp i64 [[VP_OUTER_IV_NEXT]] i64 [[N0:%.*]]
; CHECK-NEXT:    SUCCESSORS(2):[[BB13:BB[0-9]+]](i1 [[VP_OUTER_EXIT_COND]]), [[BB2]](!i1 [[VP_OUTER_EXIT_COND]])
; CHECK-NEXT:    PREDECESSORS(3): [[BB12]] [[BB4]] [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB13]]:
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP_OUTER_IV_IND_FINAL:%.*]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:    SUCCESSORS(1):[[BB14:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB14]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB13]]
;
entry:
  %cmp18 = icmp sgt i64 %N, 0
  br i1 %cmp18, label %for.cond1.preheader.preheader, label %for.end7

for.cond1.preheader.preheader:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %for.cond1.preheader

for.cond1.preheader:
  %outer.iv = phi i64 [ %outer.iv.next, %for.inc5 ], [ 0, %for.cond1.preheader.preheader ]
  %skip_loop = icmp eq i64 %outer.iv, %mask_out_inner_loop
  br i1 %skip_loop, label %for.inc5, label %top_test

top_test:
  %cmp216 = icmp eq i64 %outer.iv, 0
  br i1 %cmp216, label %for.inc5, label %for.body3.preheader

for.body3.preheader:
  br label %for.body3

for.body3:
  %inner.iv = phi i64 [ %inner.iv.next, %no_early_exit ], [ 0, %for.body3.preheader ]
  %arrayidx = getelementptr inbounds i64, i64* %a, i64 %inner.iv
  %ld = load i64, i64* %arrayidx
  %some_cmp = icmp eq i64 %ld, 42
  %inner.iv.next = add nuw nsw i64 %inner.iv, 1
  br i1 %some_cmp, label %for.inc5.loopexit, label %no_early_exit

no_early_exit:
  %exitcond = icmp eq i64 %inner.iv.next, %outer.iv
  br i1 %exitcond, label %for.inc5.loopexit, label %for.body3

for.inc5.loopexit:
  %phi_use = phi i64 [ %inner.iv, %for.body3 ], [ 100, %no_early_exit ]
  %phi_update_use = phi i64 [ %inner.iv.next, %for.body3 ], [ 100, %no_early_exit ]
  %no_phi_inst_use = phi i1 [%some_cmp, %for.body3 ], [ 100, %no_early_exit ]
  %use_a = add i64 %phi_use, 1
  %use_b = add i64 %phi_update_use, 1
  %use_c = xor i1 %no_phi_inst_use, -1
  br label %for.inc5

for.inc5:
  %outer.iv.next = add nuw nsw i64 %outer.iv, 1
  %outer_exit_cond = icmp eq i64 %outer.iv.next, %N
  br i1 %outer_exit_cond, label %for.end7.loopexit, label %for.cond1.preheader

for.end7.loopexit:
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"()]
  br label %for.end7

for.end7:
  ret void
}

attributes #0 = { norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"clang version 4.0.0 (branches/vpo 20869)"}
!1 = !{!2, !2, i64 0}
!2 = !{!"long", !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
