; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; Test for basic functionality of CFGMerger along HIR path.

; RUN: opt -hir-ssa-deconstruction -hir-framework -hir-vplan-vec -vplan-print-after-create-in-merge -vplan-print-after-cfg-merge -vplan-enable-new-cfg-merge-hir -vplan-vec-scenario="n0;v4;v2s1" -disable-vplan-codegen -disable-output < %s 2>&1 | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define i32 @foo(i32* nocapture readonly %A, i64 %N, i32 %init) {
; CHECK-LABEL:  Single loop scenario:
; CHECK-NEXT:   MainLoop: unmasked, VF=4
; CHECK-NEXT:   PeelLoop: none
; CHECK-NEXT:   Remainders: scalar,unmasked, VF=2,
; CHECK-NEXT:  VPlan after adding existing one during merge:
; CHECK-NEXT:  VPlan IR for: Initial VPlan for VF=4
; CHECK-NEXT:  External Defs Start:
; CHECK-DAG:     [[VP0:%.*]] = {%sum.07}
; CHECK-DAG:     [[VP1:%.*]] = {%N + -1}
; CHECK-DAG:     [[VP2:%.*]] = {%A}
; CHECK-NEXT:  External Defs End:
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] br [[BB1:BB[0-9]+]] (SVAOpBits 0->F )
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] i64 [[VP3:%.*]] = add i64 [[VP1]] i64 1 (SVAOpBits 0->F 1->F )
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] i64 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i64 [[VP3]], UF = 1 (SVAOpBits 0->F )
; CHECK-NEXT:     [DA: Div, SVA: ( V )] i32 [[VP_RED_INIT:%.*]] = reduction-init i32 0 i32 live-in0 (SVAOpBits 0->F 1->F )
; CHECK-NEXT:     [DA: Div, SVA: (F  )] i64 [[VP__IND_INIT:%.*]] = induction-init{add} i64 live-in1 i64 1 (SVAOpBits 0->F 1->F )
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] i64 [[VP__IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1 (SVAOpBits 0->F )
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] br [[BB2:BB[0-9]+]] (SVAOpBits 0->F )
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], [[BB2]]
; CHECK-NEXT:     [DA: Div, SVA: ( V )] i32 [[VP4:%.*]] = phi  [ i32 [[VP_RED_INIT]], [[BB1]] ],  [ i32 [[VP5:%.*]], [[BB2]] ] (SVAOpBits 0->V 1->V )
; CHECK-NEXT:     [DA: Div, SVA: (F  )] i64 [[VP6:%.*]] = phi  [ i64 [[VP__IND_INIT]], [[BB1]] ],  [ i64 [[VP7:%.*]], [[BB2]] ] (SVAOpBits 0->F 1->F )
; CHECK-NEXT:     [DA: Div, SVA: (F  )] i32* [[VP_SUBSCRIPT:%.*]] = subscript inbounds i32* [[A0:%.*]] i64 [[VP6]] (SVAOpBits 0->F 1->F 2->F 3->F )
; CHECK-NEXT:     [DA: Div, SVA: ( V )] i32 [[VP_LOAD:%.*]] = load i32* [[VP_SUBSCRIPT]] (SVAOpBits 0->F )
; CHECK-NEXT:     [DA: Div, SVA: ( V )] i32 [[VP5]] = add i32 [[VP_LOAD]] i32 [[VP4]] (SVAOpBits 0->V 1->V )
; CHECK-NEXT:     [DA: Div, SVA: (F  )] i64 [[VP7]] = add i64 [[VP6]] i64 [[VP__IND_INIT_STEP]] (SVAOpBits 0->F 1->F )
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] i1 [[VP8:%.*]] = icmp slt i64 [[VP7]] i64 [[VP_VECTOR_TRIP_COUNT]] (SVAOpBits 0->F 1->F )
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] br i1 [[VP8]], [[BB2]], [[BB3:BB[0-9]+]] (SVAOpBits 0->F 1->F 2->F )
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: [[BB2]]
; CHECK-NEXT:     [DA: Uni, SVA: RetVal:(F  ), Inst:( V )] i32 [[VP_RED_FINAL:%.*]] = reduction-final{u_add} i32 [[VP5]] (SVAOpBits 0->V )
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] i64 [[VP__IND_FINAL:%.*]] = induction-final{add} i64 0 i64 1 (SVAOpBits 0->F 1->F )
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] br [[BB4:BB[0-9]+]] (SVAOpBits 0->F )
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: [[BB3]]
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] br <External Block> (SVAOpBits )
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   i32 [[VP_RED_FINAL]] -> [[VP9:%.*]] = {%sum.07}
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 1   no underlying for i64 [[VP__IND_FINAL]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlan after creation during merge:
; CHECK-NEXT:  VPlan IR for: Initial VPlan for VF=4.ScalarRemainder
; CHECK-NEXT:  External Defs Start:
; CHECK-DAG:     [[VP0]] = {%sum.07}
; CHECK-DAG:     [[VP1]] = {%N + -1}
; CHECK-DAG:     [[VP2]] = {%A}
; CHECK-NEXT:  External Defs End:
; CHECK-NEXT:    [[REMBLK0:RemBlk[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] token [[VP_ORIG_LOOP:%.*]] = scalar-remainder-hir <HLLoop>, NeedsCloning: 0, TempInitMap:
; CHECK-NEXT:         { Initialize temp [[LB_TMP0:%.*]] with -> i64 live-in1 }
; CHECK-NEXT:         { Initialize temp [[SUM_070:%.*]] with -> i32 live-in0 }
; CHECK-NEXT:     [DA: Uni] i64 [[VP_ORIG_LIVEOUT:%.*]] = orig-live-out-hir token [[VP_ORIG_LOOP]], liveout: [[N0:%.*]] + -1
; CHECK-NEXT:     [DA: Uni] i32 [[VP_ORIG_LIVEOUT_1:%.*]] = orig-live-out-hir token [[VP_ORIG_LOOP]], liveout: [[SUM_070]]
; CHECK-NEXT:     [DA: Uni] br [[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]: # preds: [[REMBLK0]]
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   i32 [[VP_ORIG_LIVEOUT_1]] -> [[VP9]] = {%sum.07}
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 1   no underlying for i64 [[VP_ORIG_LIVEOUT]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlan after creation during merge:
; CHECK-NEXT:  VPlan IR for: Initial VPlan for VF=4.cloned
; CHECK-NEXT:  External Defs Start:
; CHECK-DAG:     [[VP0]] = {%sum.07}
; CHECK-DAG:     [[VP1]] = {%N + -1}
; CHECK-DAG:     [[VP2]] = {%A}
; CHECK-NEXT:  External Defs End:
; CHECK-NEXT:    [[BB6:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] br [[BB7:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB7]]: # preds: [[BB6]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP10:%.*]] = add i64 [[VP1]] i64 1
; CHECK-NEXT:     [DA: Uni] i64 [[VP11:%.*]] = vector-trip-count i64 [[VP10]], UF = 1
; CHECK-NEXT:     [DA: Div] i32 [[VP12:%.*]] = reduction-init i32 0 i32 live-in0
; CHECK-NEXT:     [DA: Div] i64 [[VP13:%.*]] = induction-init{add} i64 live-in1 i64 1
; CHECK-NEXT:     [DA: Uni] i64 [[VP14:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:     [DA: Uni] br [[BB8:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB8]]: # preds: [[BB7]], [[BB8]]
; CHECK-NEXT:     [DA: Div] i32 [[VP15:%.*]] = phi  [ i32 [[VP12]], [[BB7]] ],  [ i32 [[VP16:%.*]], [[BB8]] ]
; CHECK-NEXT:     [DA: Div] i64 [[VP17:%.*]] = phi  [ i64 [[VP13]], [[BB7]] ],  [ i64 [[VP18:%.*]], [[BB8]] ]
; CHECK-NEXT:     [DA: Div] i32* [[VP19:%.*]] = subscript inbounds i32* [[A0]] i64 [[VP17]]
; CHECK-NEXT:     [DA: Div] i32 [[VP20:%.*]] = load i32* [[VP19]]
; CHECK-NEXT:     [DA: Div] i32 [[VP16]] = add i32 [[VP20]] i32 [[VP15]]
; CHECK-NEXT:     [DA: Div] i64 [[VP18]] = add i64 [[VP17]] i64 [[VP14]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP21:%.*]] = icmp slt i64 [[VP18]] i64 [[VP11]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP21]], [[BB8]], [[BB9:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB9]]: # preds: [[BB8]]
; CHECK-NEXT:     [DA: Uni] i32 [[VP22:%.*]] = reduction-final{u_add} i32 [[VP16]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP23:%.*]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Uni] br [[BB10:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB10]]: # preds: [[BB9]]
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   i32 [[VP22]] -> [[VP9]] = {%sum.07}
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 1   no underlying for i64 [[VP23]]
; CHECK-EMPTY:
; CHECK-NEXT:  List of VPlans added for merging:
; CHECK-NEXT:  VPlan: Initial VPlan for VF=4.ScalarRemainder
; CHECK-NEXT:    Kind: remainder VF:1
; CHECK-NEXT:  VPlan: Initial VPlan for VF=4.cloned
; CHECK-NEXT:    Kind: remainder VF:2
; CHECK-NEXT:  VPlan: Initial VPlan for VF=4
; CHECK-NEXT:    Kind: main VF:4
; CHECK-NEXT:  VPlan after CFG merge before CG:
; CHECK-NEXT:  VPlan IR for: Initial VPlan for VF=4
; CHECK-NEXT:  External Defs Start:
; CHECK-DAG:     [[VP0]] = {%sum.07}
; CHECK-DAG:     [[VP1]] = {%N + -1}
; CHECK-DAG:     [[VP2]] = {%A}
; CHECK-NEXT:  External Defs End:
; CHECK-NEXT:    [[BB11:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] i64 [[VP3]] = add i64 [[VP1]] i64 1
; CHECK-NEXT:     [DA: Uni] pushvf VF=4 UF=1
; CHECK-NEXT:     [DA: Uni] pushvf VF=2 UF=1
; CHECK-NEXT:     [DA: Div] i64 [[VP24:%.*]] = vector-trip-count i64 [[VP3]], UF = 1
; CHECK-NEXT:     [DA: Uni] popvf
; CHECK-NEXT:     [DA: Uni] i1 [[VP_VEC_TC_CHECK:%.*]] = icmp eq i64 0 i64 [[VP24]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP_VEC_TC_CHECK]], [[MERGE_BLK0:merge.blk[0-9]+]], [[BB12:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB12]]: # preds: [[BB11]]
; CHECK-NEXT:       [DA: Div] i64 [[VP25:%.*]] = vector-trip-count i64 [[VP3]], UF = 1
; CHECK-NEXT:       [DA: Uni] i1 [[VP_VEC_TC_CHECK_1:%.*]] = icmp eq i64 0 i64 [[VP25]]
; CHECK-NEXT:       [DA: Uni] br i1 [[VP_VEC_TC_CHECK_1]], [[MERGE_BLK1:merge.blk[0-9]+]], [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB0]]: # preds: [[BB12]]
; CHECK-NEXT:         [DA: Uni] pushvf VF=4 UF=1
; CHECK-NEXT:         [DA: Uni] br [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:         [DA: Uni] i64 [[VP_VECTOR_TRIP_COUNT]] = vector-trip-count i64 [[VP3]], UF = 1
; CHECK-NEXT:         [DA: Div] i32 [[VP_RED_INIT]] = reduction-init i32 0 i32 [[SUM_070]]
; CHECK-NEXT:         [DA: Div] i64 [[VP__IND_INIT]] = induction-init{add} i64 0 i64 1
; CHECK-NEXT:         [DA: Uni] i64 [[VP__IND_INIT_STEP]] = induction-init-step{add} i64 1
; CHECK-NEXT:         [DA: Uni] br [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB2]]: # preds: [[BB1]], [[BB2]]
; CHECK-NEXT:         [DA: Div] i32 [[VP4]] = phi  [ i32 [[VP_RED_INIT]], [[BB1]] ],  [ i32 [[VP5]], [[BB2]] ]
; CHECK-NEXT:         [DA: Div] i64 [[VP6]] = phi  [ i64 [[VP__IND_INIT]], [[BB1]] ],  [ i64 [[VP7]], [[BB2]] ]
; CHECK-NEXT:         [DA: Div] i32* [[VP_SUBSCRIPT]] = subscript inbounds i32* [[A0]] i64 [[VP6]]
; CHECK-NEXT:         [DA: Div] i32 [[VP_LOAD]] = load i32* [[VP_SUBSCRIPT]]
; CHECK-NEXT:         [DA: Div] i32 [[VP5]] = add i32 [[VP_LOAD]] i32 [[VP4]]
; CHECK-NEXT:         [DA: Div] i64 [[VP7]] = add i64 [[VP6]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:         [DA: Uni] i1 [[VP8]] = icmp slt i64 [[VP7]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:         [DA: Uni] br i1 [[VP8]], [[BB2]], [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB3]]: # preds: [[BB2]]
; CHECK-NEXT:         [DA: Uni] i32 [[VP_RED_FINAL]] = reduction-final{u_add} i32 [[VP5]]
; CHECK-NEXT:         [DA: Uni] i64 [[VP__IND_FINAL]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:         [DA: Uni] br [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB4]]: # preds: [[BB3]]
; CHECK-NEXT:         [DA: Uni] popvf
; CHECK-NEXT:         [DA: Uni] br [[BB13:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB13]]: # preds: [[BB4]]
; CHECK-NEXT:         [DA: Uni] pushvf VF=2 UF=1
; CHECK-NEXT:         [DA: Div] i64 [[VP26:%.*]] = vector-trip-count i64 [[VP3]], UF = 1
; CHECK-NEXT:         [DA: Uni] popvf
; CHECK-NEXT:         [DA: Uni] i1 [[VP_REMTC_CHECK:%.*]] = icmp eq i64 [[VP26]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:         [DA: Uni] br i1 [[VP_REMTC_CHECK]], [[MERGE_BLK2:merge.blk[0-9]+]], [[MERGE_BLK1]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[MERGE_BLK1]]: # preds: [[BB13]], [[BB12]]
; CHECK-NEXT:         [DA: Uni] i32 [[VP27:%.*]] = phi-merge  [ i32 live-out0, [[BB13]] ],  [ i32 [[SUM_070]], [[BB12]] ]
; CHECK-NEXT:         [DA: Uni] i64 [[VP28:%.*]] = phi-merge  [ i64 live-out1, [[BB13]] ],  [ i64 0, [[BB12]] ]
; CHECK-NEXT:         [DA: Uni] br [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB6]]: # preds: [[MERGE_BLK1]]
; CHECK-NEXT:         [DA: Uni] pushvf VF=2 UF=1
; CHECK-NEXT:         [DA: Uni] br [[BB7]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB7]]: # preds: [[BB6]]
; CHECK-NEXT:         [DA: Uni] i64 [[VP10]] = add i64 [[VP1]] i64 1
; CHECK-NEXT:         [DA: Uni] i64 [[VP11]] = vector-trip-count i64 [[VP10]], UF = 1
; CHECK-NEXT:         [DA: Div] i32 [[VP12]] = reduction-init i32 0 i32 [[VP27]]
; CHECK-NEXT:         [DA: Div] i64 [[VP13]] = induction-init{add} i64 [[VP28]] i64 1
; CHECK-NEXT:         [DA: Uni] i64 [[VP14]] = induction-init-step{add} i64 1
; CHECK-NEXT:         [DA: Uni] br [[BB8]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB8]]: # preds: [[BB7]], [[BB8]]
; CHECK-NEXT:         [DA: Div] i32 [[VP15]] = phi  [ i32 [[VP12]], [[BB7]] ],  [ i32 [[VP16]], [[BB8]] ]
; CHECK-NEXT:         [DA: Div] i64 [[VP17]] = phi  [ i64 [[VP13]], [[BB7]] ],  [ i64 [[VP18]], [[BB8]] ]
; CHECK-NEXT:         [DA: Div] i32* [[VP19]] = subscript inbounds i32* [[A0]] i64 [[VP17]]
; CHECK-NEXT:         [DA: Div] i32 [[VP20]] = load i32* [[VP19]]
; CHECK-NEXT:         [DA: Div] i32 [[VP16]] = add i32 [[VP20]] i32 [[VP15]]
; CHECK-NEXT:         [DA: Div] i64 [[VP18]] = add i64 [[VP17]] i64 [[VP14]]
; CHECK-NEXT:         [DA: Uni] i1 [[VP21]] = icmp slt i64 [[VP18]] i64 [[VP11]]
; CHECK-NEXT:         [DA: Uni] br i1 [[VP21]], [[BB8]], [[BB9]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB9]]: # preds: [[BB8]]
; CHECK-NEXT:         [DA: Uni] i32 [[VP22]] = reduction-final{u_add} i32 [[VP16]]
; CHECK-NEXT:         [DA: Uni] i64 [[VP23]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:         [DA: Uni] br [[BB10]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB10]]: # preds: [[BB9]]
; CHECK-NEXT:         [DA: Uni] popvf
; CHECK-NEXT:         [DA: Uni] br [[MERGE_BLK2]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[MERGE_BLK2]]: # preds: [[BB13]], [[BB10]]
; CHECK-NEXT:       [DA: Uni] i32 [[VP29:%.*]] = phi-merge  [ i32 [[VP22]], [[BB10]] ],  [ i32 live-out0, [[BB13]] ]
; CHECK-NEXT:       [DA: Uni] i64 [[VP30:%.*]] = phi-merge  [ i64 [[VP23]], [[BB10]] ],  [ i64 live-out1, [[BB13]] ]
; CHECK-NEXT:       [DA: Uni] br [[BB14:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB14]]: # preds: [[MERGE_BLK2]]
; CHECK-NEXT:       [DA: Uni] pushvf VF=2 UF=1
; CHECK-NEXT:       [DA: Div] i64 [[VP31:%.*]] = vector-trip-count i64 [[VP3]], UF = 1
; CHECK-NEXT:       [DA: Uni] popvf
; CHECK-NEXT:       [DA: Uni] i1 [[VP_REMTC_CHECK_1:%.*]] = icmp eq i64 [[VP3]] i64 [[VP31]]
; CHECK-NEXT:       [DA: Uni] br i1 [[VP_REMTC_CHECK_1]], final.merge, [[MERGE_BLK0]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[MERGE_BLK0]]: # preds: [[BB14]], [[BB11]]
; CHECK-NEXT:       [DA: Uni] i32 [[VP32:%.*]] = phi-merge  [ i32 [[VP29]], [[BB14]] ],  [ i32 [[SUM_070]], [[BB11]] ]
; CHECK-NEXT:       [DA: Uni] i64 [[VP33:%.*]] = phi-merge  [ i64 [[VP30]], [[BB14]] ],  [ i64 0, [[BB11]] ]
; CHECK-NEXT:       [DA: Uni] br [[REMBLK0]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[REMBLK0]]: # preds: [[MERGE_BLK0]]
; CHECK-NEXT:       [DA: Uni] pushvf VF=1 UF=1
; CHECK-NEXT:       [DA: Uni] token [[VP_ORIG_LOOP]] = scalar-remainder-hir <HLLoop>, NeedsCloning: 0, TempInitMap:
; CHECK-NEXT:         { Initialize temp [[LB_TMP0]] with -> i64 [[VP33]] }
; CHECK-NEXT:         { Initialize temp [[SUM_070]] with -> i32 [[VP32]] }
; CHECK-NEXT:       [DA: Uni] i64 [[VP_ORIG_LIVEOUT]] = orig-live-out-hir token [[VP_ORIG_LOOP]], liveout: [[N0]] + -1
; CHECK-NEXT:       [DA: Uni] i32 [[VP_ORIG_LIVEOUT_1]] = orig-live-out-hir token [[VP_ORIG_LOOP]], liveout: [[SUM_070]]
; CHECK-NEXT:       [DA: Uni] br [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB5]]: # preds: [[REMBLK0]]
; CHECK-NEXT:       [DA: Uni] popvf
; CHECK-NEXT:       [DA: Uni] br final.merge
; CHECK-EMPTY:
; CHECK-NEXT:    final.merge: # preds: [[BB14]], [[BB5]]
; CHECK-NEXT:     [DA: Uni] i32 [[VP34:%.*]] = phi-merge  [ i32 [[VP_ORIG_LIVEOUT_1]], [[BB5]] ],  [ i32 [[VP29]], [[BB14]] ]
; CHECK-NEXT:     [DA: Uni] i64 [[VP35:%.*]] = phi-merge  [ i64 [[VP_ORIG_LIVEOUT]], [[BB5]] ],  [ i64 [[VP30]], [[BB14]] ]
; CHECK-NEXT:     [DA: Uni] popvf
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   i32 [[VP34]] -> [[VP9]] = {%sum.07}
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 1   no underlying for i64 [[VP__IND_FINAL]]
;
entry:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %for.body

for.body:                                           ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %entry ]
  %sum.07 = phi i32 [ %add, %for.body ], [ %init, %entry ]
  %arrayidx = getelementptr inbounds i32, i32* %A, i64 %indvars.iv
  %A.i = load i32, i32* %arrayidx, align 4
  %add = add nsw i32 %A.i, %sum.07
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %N
  br i1 %exitcond, label %for.cond.cleanup.loopexit, label %for.body

for.cond.cleanup.loopexit:                             ; preds = %for.body
  %add.lcssa = phi i32 [ %add, %for.body ]
  br label %end.simd

end.simd:
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.QUAL.LIST.END.3

DIR.QUAL.LIST.END.3:
  ret i32 %add.lcssa

}
declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
