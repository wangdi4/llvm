; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -disable-output -disable-vplan-codegen -passes=vplan-vec -vplan-force-vf=4  -vplan-print-after-cfg-merge %s  | FileCheck %s
;
; test for basic functionality of cfg merge, non-liveout inductions.
;
define void @fp_iv_loop(float %init, ptr noalias nocapture %A, i64 %N) {
; CHECK-LABEL:  VPlan after CFG merge before CG:
; CHECK-NEXT:  VPlan IR for: fp_iv_loop:for.body
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] pushvf VF=4 UF=1
; CHECK-NEXT:     [DA: Div] i64 [[VP0:%.*]] = vector-trip-count i64 [[N0:%.*]], UF = 1
; CHECK-NEXT:     [DA: Uni] i1 [[VP_VEC_TC_CHECK:%.*]] = icmp eq i64 0 i64 [[VP0]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP_VEC_TC_CHECK]], [[MERGE_BLK0:merge.blk[0-9]+]], [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:       [DA: Uni] pushvf VF=4 UF=1
; CHECK-NEXT:       [DA: Uni] br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB2]]: # preds: [[BB1]]
; CHECK-NEXT:       [DA: Div] i64 [[VP_INDVARS_IV_IND_INIT:%.*]] = induction-init{add} i64 0 i64 1
; CHECK-NEXT:       [DA: Uni] i64 [[VP_INDVARS_IV_IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:       [DA: Div] float [[VP_X_07_IND_INIT:%.*]] = induction-init{fsub} float [[INIT0:%.*]] float 5.000000e-01
; CHECK-NEXT:       [DA: Uni] float [[VP_X_07_IND_INIT_STEP:%.*]] = induction-init-step{fsub} float 5.000000e-01
; CHECK-NEXT:       [DA: Uni] i64 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i64 [[N0]], UF = 1
; CHECK-NEXT:       [DA: Uni] br [[BB3:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB3]]: # preds: [[BB2]], [[BB3]]
; CHECK-NEXT:       [DA: Div] i64 [[VP_INDVARS_IV:%.*]] = phi  [ i64 [[VP_INDVARS_IV_IND_INIT]], [[BB2]] ],  [ i64 [[VP_INDVARS_IV_NEXT:%.*]], [[BB3]] ]
; CHECK-NEXT:       [DA: Div] float [[VP_X_07:%.*]] = phi  [ float [[VP_X_07_IND_INIT]], [[BB2]] ],  [ float [[VP_SUB:%.*]], [[BB3]] ]
; CHECK-NEXT:       [DA: Div] ptr [[VP_ARRAYIDX:%.*]] = getelementptr inbounds float, ptr [[A0:%.*]] i64 [[VP_INDVARS_IV]]
; CHECK-NEXT:       [DA: Div] store float [[VP_X_07]] ptr [[VP_ARRAYIDX]]
; CHECK-NEXT:       [DA: Div] float [[VP_SUB]] = fsub float [[VP_X_07]] float [[VP_X_07_IND_INIT_STEP]]
; CHECK-NEXT:       [DA: Div] i64 [[VP_INDVARS_IV_NEXT]] = add i64 [[VP_INDVARS_IV]] i64 [[VP_INDVARS_IV_IND_INIT_STEP]]
; CHECK-NEXT:       [DA: Uni] i1 [[VP_VECTOR_LOOP_EXITCOND:%.*]] = icmp uge i64 [[VP_INDVARS_IV_NEXT]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:       [DA: Uni] br i1 [[VP_VECTOR_LOOP_EXITCOND]], [[BB4:BB[0-9]+]], [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB4]]: # preds: [[BB3]]
; CHECK-NEXT:       [DA: Uni] i64 [[VP_INDVARS_IV_IND_FINAL:%.*]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:       [DA: Uni] float [[VP_X_07_IND_FINAL:%.*]] = induction-final{fsub} float [[INIT0]] float 5.000000e-01
; CHECK-NEXT:       [DA: Uni] br [[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB5]]: # preds: [[BB4]]
; CHECK-NEXT:       [DA: Uni] popvf
; CHECK-NEXT:       [DA: Uni] br [[BB6:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB6]]: # preds: [[BB5]]
; CHECK-NEXT:       [DA: Uni] i1 [[VP_REMTC_CHECK:%.*]] = icmp eq i64 [[N0]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:       [DA: Uni] br i1 [[VP_REMTC_CHECK]], final.merge, [[MERGE_BLK0]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[MERGE_BLK0]]: # preds: [[BB6]], [[BB0]]
; CHECK-NEXT:       [DA: Uni] i64 [[VP1:%.*]] = phi-merge  [ i64 live-out0, [[BB6]] ],  [ i64 0, [[BB0]] ]
; CHECK-NEXT:       [DA: Uni] float [[VP2:%.*]] = phi-merge  [ float live-out1, [[BB6]] ],  [ float [[INIT0]], [[BB0]] ]
; CHECK-NEXT:       [DA: Uni] br [[REMBLK0:RemBlk[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[REMBLK0]]: # preds: [[MERGE_BLK0]]
; CHECK-NEXT:       [DA: Uni] pushvf VF=1 UF=1
; CHECK-NEXT:       [DA: Uni] token [[VP_ORIG_LOOP:%.*]] = scalar-remainder for.body, NeedsCloning: 0, LiveInMap:
; CHECK-NEXT:         {i64 0 in {  [[INDVARS_IV0:%.*]] = phi i64 [ 0, [[ENTRY0:%.*]] ], [ [[INDVARS_IV_NEXT0:%.*]], [[FOR_BODY0:%.*]] ]} -> i64 [[VP1]] }
; CHECK-NEXT:         {float [[INIT0]] in {  [[X_070:%.*]] = phi float [ [[INIT0]], [[ENTRY0]] ], [ [[SUB0:%.*]], [[FOR_BODY0]] ]} -> float [[VP2]] }
; CHECK-NEXT:         {label [[FOR_COND_CLEANUP_LOOPEXIT0:%.*]] in {  br i1 [[EXITCOND0:%.*]], label [[FOR_COND_CLEANUP_LOOPEXIT0]], label [[FOR_BODY0]], !llvm.loop !0} -> label [[BB7:BB[0-9]+]] }
; CHECK-NEXT:       [DA: Uni] i64 [[VP_ORIG_LIVEOUT:%.*]] = orig-live-out token [[VP_ORIG_LOOP]], liveout:   [[INDVARS_IV_NEXT0]] = add nuw nsw i64 [[INDVARS_IV0]], 1
; CHECK-NEXT:       [DA: Uni] float [[VP_ORIG_LIVEOUT_1:%.*]] = orig-live-out token [[VP_ORIG_LOOP]], liveout:   [[SUB0]] = fsub fast float [[X_070]], 5.000000e-01
; CHECK-NEXT:       [DA: Uni] br [[BB7]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB7]]: # preds: [[REMBLK0]]
; CHECK-NEXT:       [DA: Uni] popvf
; CHECK-NEXT:       [DA: Uni] br final.merge
; CHECK-EMPTY:
; CHECK-NEXT:    final.merge: # preds: [[BB6]], [[BB7]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP3:%.*]] = phi-merge  [ i64 [[VP_ORIG_LIVEOUT]], [[BB7]] ],  [ i64 live-out0, [[BB6]] ]
; CHECK-NEXT:     [DA: Uni] float [[VP4:%.*]] = phi-merge  [ float [[VP_ORIG_LIVEOUT_1]], [[BB7]] ],  [ float live-out1, [[BB6]] ]
; CHECK-NEXT:     [DA: Uni] popvf
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   no underlying for i64 [[VP_INDVARS_IV_IND_FINAL]]
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 1   no underlying for float [[VP_X_07_IND_FINAL]]
;
entry:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %x.07 = phi float [ %init, %entry ], [ %sub, %for.body ]
  %arrayidx = getelementptr inbounds float, ptr %A, i64 %indvars.iv
  store float %x.07, ptr %arrayidx, align 4
  %sub = fsub fast float %x.07, 5.000000e-01
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %N
  br i1 %exitcond, label %for.cond.cleanup.loopexit, label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %DIR.QUAL.LIST.END.2
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.QUAL.LIST.END.3

DIR.QUAL.LIST.END.3:
  ret void
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
