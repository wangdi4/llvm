; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; REQUIRES: asserts
; RUN: opt -S -passes=vplan-vec -disable-output -vplan-dump-da %s 2>&1 | FileCheck %s

; This test checks to see that iv range information can be used to retain
; unit-strideness of the geps.

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@a = dso_local local_unnamed_addr global [1024 x i64] zeroinitializer, align 64
@b = dso_local local_unnamed_addr global [1024 x i64] zeroinitializer, align 64

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @foo(i32 %arg0) local_unnamed_addr #0 {
; CHECK:       Printing Divergence info for Loop at depth 1 containing: [[BB0:BB[0-9]+]]<header><latch><exiting>
; CHECK-EMPTY:
; CHECK-NEXT:  Basic Block: [[BB0]]
; CHECK-NEXT:  Uniform: [Shape: Uniform] i64 [[VP_VECTOR_LOOP_IV:%.*]] = phi  [ i64 0, [[BB1:BB[0-9]+]] ],  [ i64 [[VP_VECTOR_LOOP_IV_NEXT:%.*]], [[BB0]] ]
; CHECK-NEXT:  Divergent: [Shape: Unit Stride, Stride: i64 1] i64 [[VP_INDVARS_IV:%.*]] = phi  [ i64 [[VP_INDVARS_IV_IND_INIT:%.*]], [[BB1]] ],  [ i64 [[VP_INDVARS_IV_NEXT:%.*]], [[BB0]] ]
; CHECK-NEXT:  Divergent: [Shape: Unit Stride, Stride: i64 1] i32 [[VP_INDVARS_IV_TRUNC:%.*]] = trunc i64 [[VP_INDVARS_IV]] to i32
; CHECK-NEXT:  Divergent: [Shape: Strided, Stride: i64 8] i64* [[VP_ARRAYIDX:%.*]] = getelementptr inbounds [1024 x i64]* @a i64 0 i32 [[VP_INDVARS_IV_TRUNC]]
; CHECK-NEXT:  Divergent: [Shape: Random] i64 [[VP_VAL:%.*]] = load i64* [[VP_ARRAYIDX]]
; CHECK-NEXT:  Divergent: [Shape: Strided, Stride: i64 8] i64* [[VP_ARRAYIDX2:%.*]] = getelementptr inbounds [1024 x i64]* @b i64 0 i32 [[VP_INDVARS_IV_TRUNC]]
; CHECK-NEXT:  Divergent: [Shape: Strided, Stride: i64 8] store i64 [[VP_VAL]] i64* [[VP_ARRAYIDX2]]
;
entry:
  %entry.region = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.SIMDLEN"(i32 4) ]
  br label %for.body

for.body:                                         ; preds = %entry, %for.body
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %indvars.iv.trunc = trunc i64 %indvars.iv to i32
  %arrayidx = getelementptr inbounds [1024 x i64], [1024 x i64]* @a, i64 0, i32 %indvars.iv.trunc
  %val = load i64, i64* %arrayidx, align 16
  %arrayidx2 = getelementptr inbounds [1024 x i64], [1024 x i64]* @b, i64 0, i32 %indvars.iv.trunc
  store i64 %val, i64* %arrayidx2, align 16
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %cmp = icmp ult i64 %indvars.iv, 1022
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body
  call void @llvm.directive.region.exit(token %entry.region) [ "DIR.OMP.END.SIMD"() ]
  ret void
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)

