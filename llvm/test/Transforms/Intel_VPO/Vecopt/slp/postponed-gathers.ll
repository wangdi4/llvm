; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; RUN: opt %s -S -passes=slp-vectorizer -mattr=+avx2 -mtriple=x86_64 | FileCheck %s
; RUN: opt %s -S -passes=slp-vectorizer -mattr=+avx2 -mtriple=x86_64 -enable-intel-advanced-opts -slp-threshold=-2 | FileCheck %s

define i32 @g(i32 %e) {
; CHECK-LABEL: define i32 @g
; CHECK-SAME: (i32 [[E:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = insertelement <2 x i32> <i32 poison, i32 3>, i32 [[E]], i32 0
; CHECK-NEXT:    [[TMP1:%.*]] = or <2 x i32> [[TMP0]], <i32 1, i32 2>
; CHECK-NEXT:    [[TMP2:%.*]] = shufflevector <2 x i32> [[TMP0]], <2 x i32> poison, <2 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP3:%.*]] = or <2 x i32> [[TMP2]], <i32 4, i32 5>
; CHECK-NEXT:    [[TMP4:%.*]] = or <2 x i32> [[TMP2]], <i32 6, i32 7>
; CHECK-NEXT:    [[TMP5:%.*]] = shufflevector <2 x i32> [[TMP2]], <2 x i32> <i32 8, i32 poison>, <2 x i32> <i32 2, i32 0>
; CHECK-NEXT:    [[TMP6:%.*]] = or <2 x i32> [[TMP5]], [[TMP4]]
; CHECK-NEXT:    [[TMP7:%.*]] = add <2 x i32> [[TMP3]], <i32 9, i32 11>
; CHECK-NEXT:    [[TMP8:%.*]] = add <2 x i32> [[TMP7]], [[TMP6]]
; CHECK-NEXT:    [[TMP9:%.*]] = or <2 x i32> [[TMP8]], [[TMP1]]
; CHECK-NEXT:    [[TMP10:%.*]] = or <2 x i32> [[TMP9]], <i32 10, i32 12>
; CHECK-NEXT:    store <2 x i32> [[TMP10]], ptr getelementptr inbounds ([0 x i32], ptr null, i64 0, i64 3), align 4
; CHECK-NEXT:    ret i32 13
;
entry:
  %0 = or i32 %e, 1
  %1 = or i32 2, 3
  %2 = or i32 %e, 4
  %3 = or i32 %e, 5
  %4 = or i32 %e, 6
  %5 = or i32 %e, 7
  %6 = or i32 8, %4
  %7 = add i32 %2, 9
  %8 = add i32 %7, %6
  %9 = or i32 %8, %0
  %10 = or i32 %9, 10
  store i32 %10, ptr getelementptr inbounds ([0 x i32], ptr null, i64 0, i64 3), align 4
  %11 = or i32 %e, %5
  %12 = add i32 %3, 11
  %13 = add i32 %12, %11
  %14 = or i32 %13, %1
  %15 = or i32 %14, 12
  store i32 %15, ptr getelementptr inbounds ([0 x i32], ptr null, i64 0, i64 4), align 4
  ret i32 13
}
