; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -slp-vectorizer -enable-intel-advanced-opts -slp-multinode=false -slp-multinode-legacy -mtriple=x86_64-unknown-linux-gnu -mcpu=skylake-avx512 -enable-path-steering=true -S | FileCheck %s -check-prefix=8WIDE_PATH_STEERING
; RUN: opt < %s -slp-vectorizer -enable-intel-advanced-opts -slp-multinode -mtriple=x86_64-unknown-linux-gnu -mcpu=skylake-avx512 -enable-path-steering=true -S | FileCheck %s -check-prefix=8WIDE_PATH_STEERING

; Check that we vectorize Multi-Node with vector length 8

define dso_local i32 @x264_pixel_satd_16x16(i8* nocapture readonly %pix1, i32 %i_pix1, i8* nocapture readonly %pix2, i32 %i_pix2) {
; 8WIDE_PATH_STEERING-LABEL: @x264_pixel_satd_16x16(
; 8WIDE_PATH_STEERING-NEXT:  entry:
; 8WIDE_PATH_STEERING-NEXT:    [[IDX_EXT_I:%.*]] = sext i32 [[I_PIX1:%.*]] to i64
; 8WIDE_PATH_STEERING-NEXT:    [[IDX_EXT63_I:%.*]] = sext i32 [[I_PIX2:%.*]] to i64
; 8WIDE_PATH_STEERING-NEXT:    [[ALLOCA:%.*]] = alloca [16 x [8 x i32]], align 4
; 8WIDE_PATH_STEERING-NEXT:    br label [[LOOP_1247:%.*]]
; 8WIDE_PATH_STEERING:       loop.1247:
; 8WIDE_PATH_STEERING-NEXT:    [[I1_I64_0:%.*]] = phi i64 [ 0, [[ENTRY:%.*]] ], [ [[NEXTIVLOOP_1247:%.*]], [[LOOP_1247]] ]
; 8WIDE_PATH_STEERING-NEXT:    [[I:%.*]] = mul i64 [[I1_I64_0]], [[IDX_EXT_I]]
; 8WIDE_PATH_STEERING-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, i8* [[PIX1:%.*]], i64 [[I]]
; 8WIDE_PATH_STEERING-NEXT:    [[I1:%.*]] = mul i64 [[I1_I64_0]], [[IDX_EXT63_I]]
; 8WIDE_PATH_STEERING-NEXT:    [[ARRAYIDX1013:%.*]] = getelementptr inbounds i8, i8* [[PIX2:%.*]], i64 [[I1]]
; 8WIDE_PATH_STEERING-NEXT:    [[I2:%.*]] = add i64 [[I]], 4
; 8WIDE_PATH_STEERING-NEXT:    [[ARRAYIDX1015:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I2]]
; 8WIDE_PATH_STEERING-NEXT:    [[I3:%.*]] = add i64 [[I1]], 4
; 8WIDE_PATH_STEERING-NEXT:    [[ARRAYIDX1017:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I3]]
; 8WIDE_PATH_STEERING-NEXT:    [[ARRAYIDX1043:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I1_I64_0]], i64 0
; 8WIDE_PATH_STEERING-NEXT:    [[I64:%.*]] = add i64 [[I]], 8
; 8WIDE_PATH_STEERING-NEXT:    [[ARRAYIDX1098:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I64]]
; 8WIDE_PATH_STEERING-NEXT:    [[I65:%.*]] = add i64 [[I1]], 8
; 8WIDE_PATH_STEERING-NEXT:    [[ARRAYIDX1100:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I65]]
; 8WIDE_PATH_STEERING-NEXT:    [[I66:%.*]] = add i64 [[I]], 12
; 8WIDE_PATH_STEERING-NEXT:    [[ARRAYIDX1102:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I66]]
; 8WIDE_PATH_STEERING-NEXT:    [[I67:%.*]] = add i64 [[I1]], 12
; 8WIDE_PATH_STEERING-NEXT:    [[ARRAYIDX1104:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I67]]
; 8WIDE_PATH_STEERING-NEXT:    [[TMP0:%.*]] = bitcast i8* [[ARRAYIDX]] to <4 x i8>*
; 8WIDE_PATH_STEERING-NEXT:    [[TMP1:%.*]] = load <4 x i8>, <4 x i8>* [[TMP0]], align 1
; 8WIDE_PATH_STEERING-NEXT:    [[TMP2:%.*]] = bitcast i8* [[ARRAYIDX1098]] to <4 x i8>*
; 8WIDE_PATH_STEERING-NEXT:    [[TMP3:%.*]] = load <4 x i8>, <4 x i8>* [[TMP2]], align 1
; 8WIDE_PATH_STEERING-NEXT:    [[SPLITLOADSHUFFLE7:%.*]] = shufflevector <4 x i8> [[TMP1]], <4 x i8> [[TMP3]], <8 x i32> <i32 1, i32 2, i32 0, i32 3, i32 5, i32 6, i32 4, i32 7>
; 8WIDE_PATH_STEERING-NEXT:    [[TMP4:%.*]] = bitcast i8* [[ARRAYIDX1013]] to <4 x i8>*
; 8WIDE_PATH_STEERING-NEXT:    [[TMP5:%.*]] = load <4 x i8>, <4 x i8>* [[TMP4]], align 1
; 8WIDE_PATH_STEERING-NEXT:    [[TMP6:%.*]] = bitcast i8* [[ARRAYIDX1100]] to <4 x i8>*
; 8WIDE_PATH_STEERING-NEXT:    [[TMP7:%.*]] = load <4 x i8>, <4 x i8>* [[TMP6]], align 1
; 8WIDE_PATH_STEERING-NEXT:    [[SPLITLOADSHUFFLE5:%.*]] = shufflevector <4 x i8> [[TMP5]], <4 x i8> [[TMP7]], <8 x i32> <i32 1, i32 2, i32 0, i32 3, i32 5, i32 6, i32 4, i32 7>
; 8WIDE_PATH_STEERING-NEXT:    [[TMP8:%.*]] = bitcast i8* [[ARRAYIDX1015]] to <4 x i8>*
; 8WIDE_PATH_STEERING-NEXT:    [[TMP9:%.*]] = load <4 x i8>, <4 x i8>* [[TMP8]], align 1
; 8WIDE_PATH_STEERING-NEXT:    [[TMP10:%.*]] = bitcast i8* [[ARRAYIDX1102]] to <4 x i8>*
; 8WIDE_PATH_STEERING-NEXT:    [[TMP11:%.*]] = load <4 x i8>, <4 x i8>* [[TMP10]], align 1
; 8WIDE_PATH_STEERING-NEXT:    [[SPLITLOADSHUFFLE:%.*]] = shufflevector <4 x i8> [[TMP9]], <4 x i8> [[TMP11]], <8 x i32> <i32 1, i32 2, i32 0, i32 3, i32 5, i32 6, i32 4, i32 7>
; 8WIDE_PATH_STEERING-NEXT:    [[TMP12:%.*]] = bitcast i8* [[ARRAYIDX1017]] to <4 x i8>*
; 8WIDE_PATH_STEERING-NEXT:    [[TMP13:%.*]] = load <4 x i8>, <4 x i8>* [[TMP12]], align 1
; 8WIDE_PATH_STEERING-NEXT:    [[TMP14:%.*]] = bitcast i8* [[ARRAYIDX1104]] to <4 x i8>*
; 8WIDE_PATH_STEERING-NEXT:    [[TMP15:%.*]] = load <4 x i8>, <4 x i8>* [[TMP14]], align 1
; 8WIDE_PATH_STEERING-NEXT:    [[SPLITLOADSHUFFLE6:%.*]] = shufflevector <4 x i8> [[TMP13]], <4 x i8> [[TMP15]], <8 x i32> <i32 1, i32 2, i32 0, i32 3, i32 5, i32 6, i32 4, i32 7>
; 8WIDE_PATH_STEERING-NEXT:    [[TMP16:%.*]] = zext <8 x i8> [[SPLITLOADSHUFFLE7]] to <8 x i32>
; 8WIDE_PATH_STEERING-NEXT:    [[TMP17:%.*]] = zext <8 x i8> [[SPLITLOADSHUFFLE6]] to <8 x i32>
; 8WIDE_PATH_STEERING-NEXT:    [[TMP18:%.*]] = zext <8 x i8> [[SPLITLOADSHUFFLE5]] to <8 x i32>
; 8WIDE_PATH_STEERING-NEXT:    [[TMP19:%.*]] = zext <8 x i8> [[SPLITLOADSHUFFLE]] to <8 x i32>
; 8WIDE_PATH_STEERING-NEXT:    [[TMP20:%.*]] = shl <8 x i32> [[TMP17]], <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
; 8WIDE_PATH_STEERING-NEXT:    [[TMP21:%.*]] = shl <8 x i32> [[TMP19]], <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
; 8WIDE_PATH_STEERING-NEXT:    [[TMP22:%.*]] = sub <8 x i32> [[TMP21]], [[TMP18]]
; 8WIDE_PATH_STEERING-NEXT:    [[TMP23:%.*]] = sub <8 x i32> [[TMP22]], [[TMP20]]
; 8WIDE_PATH_STEERING-NEXT:    [[TMP24:%.*]] = add <8 x i32> [[TMP23]], [[TMP16]]
; 8WIDE_PATH_STEERING-NEXT:    [[TMP25:%.*]] = shufflevector <8 x i32> [[TMP24]], <8 x i32> poison, <8 x i32> <i32 2, i32 0, i32 3, i32 6, i32 4, i32 7, i32 undef, i32 undef>
; 8WIDE_PATH_STEERING-NEXT:    [[SHUFFLE:%.*]] = shufflevector <8 x i32> [[TMP25]], <8 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 1, i32 3, i32 4, i32 5, i32 4>
; 8WIDE_PATH_STEERING-NEXT:    [[TMP26:%.*]] = add <8 x i32> [[TMP24]], [[SHUFFLE]]
; 8WIDE_PATH_STEERING-NEXT:    [[TMP27:%.*]] = sub <8 x i32> [[TMP24]], [[SHUFFLE]]
; 8WIDE_PATH_STEERING-NEXT:    [[TMP28:%.*]] = shufflevector <8 x i32> [[TMP26]], <8 x i32> [[TMP27]], <8 x i32> <i32 0, i32 9, i32 10, i32 11, i32 4, i32 13, i32 14, i32 15>
; 8WIDE_PATH_STEERING-NEXT:    [[TMP29:%.*]] = shufflevector <8 x i32> [[TMP24]], <8 x i32> poison, <8 x i32> <i32 3, i32 2, i32 1, i32 7, i32 6, i32 5, i32 undef, i32 undef>
; 8WIDE_PATH_STEERING-NEXT:    [[SHUFFLE8:%.*]] = shufflevector <8 x i32> [[TMP29]], <8 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 2, i32 3, i32 4, i32 5, i32 5>
; 8WIDE_PATH_STEERING-NEXT:    [[TMP30:%.*]] = add <8 x i32> [[TMP28]], [[SHUFFLE8]]
; 8WIDE_PATH_STEERING-NEXT:    [[TMP31:%.*]] = sub <8 x i32> [[TMP28]], [[SHUFFLE8]]
; 8WIDE_PATH_STEERING-NEXT:    [[TMP32:%.*]] = shufflevector <8 x i32> [[TMP30]], <8 x i32> [[TMP31]], <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 4, i32 5, i32 14, i32 15>
; 8WIDE_PATH_STEERING-NEXT:    [[TMP33:%.*]] = shufflevector <8 x i32> [[TMP24]], <8 x i32> poison, <8 x i32> <i32 1, i32 3, i32 0, i32 2, i32 5, i32 7, i32 4, i32 6>
; 8WIDE_PATH_STEERING-NEXT:    [[TMP34:%.*]] = add <8 x i32> [[TMP32]], [[TMP33]]
; 8WIDE_PATH_STEERING-NEXT:    [[TMP35:%.*]] = sub <8 x i32> [[TMP32]], [[TMP33]]
; 8WIDE_PATH_STEERING-NEXT:    [[TMP36:%.*]] = shufflevector <8 x i32> [[TMP34]], <8 x i32> [[TMP35]], <8 x i32> <i32 0, i32 9, i32 2, i32 3, i32 4, i32 13, i32 6, i32 7>
; 8WIDE_PATH_STEERING-NEXT:    [[TMP37:%.*]] = bitcast i32* [[ARRAYIDX1043]] to <8 x i32>*
; 8WIDE_PATH_STEERING-NEXT:    store <8 x i32> [[TMP36]], <8 x i32>* [[TMP37]], align 4
; 8WIDE_PATH_STEERING-NEXT:    [[NEXTIVLOOP_1247]] = add nuw nsw i64 [[I1_I64_0]], 1
; 8WIDE_PATH_STEERING-NEXT:    [[CONDLOOP_1247:%.*]] = icmp ult i64 [[NEXTIVLOOP_1247]], 16
; 8WIDE_PATH_STEERING-NEXT:    br i1 [[CONDLOOP_1247]], label [[LOOP_1247]], label [[AFTERLOOP_1247:%.*]]
; 8WIDE_PATH_STEERING:       afterloop.1247:
; 8WIDE_PATH_STEERING-NEXT:    ret i32 0
;
entry:
  %idx.ext.i = sext i32 %i_pix1 to i64
  %idx.ext63.i = sext i32 %i_pix2 to i64
  %alloca = alloca [16 x [8 x i32]], align 4
  br label %loop.1247

loop.1247:                                        ; preds = %loop.1247, %entry
  %i1.i64.0 = phi i64 [ 0, %entry ], [ %nextivloop.1247, %loop.1247 ]
  %i = mul i64 %i1.i64.0, %idx.ext.i
  %arrayIdx = getelementptr inbounds i8, i8* %pix1, i64 %i
  %gepload = load i8, i8* %arrayIdx, align 1
  %i1 = mul i64 %i1.i64.0, %idx.ext63.i
  %arrayIdx1013 = getelementptr inbounds i8, i8* %pix2, i64 %i1
  %gepload1014 = load i8, i8* %arrayIdx1013, align 1
  %i2 = add i64 %i, 4
  %arrayIdx1015 = getelementptr inbounds i8, i8* %pix1, i64 %i2
  %gepload1016 = load i8, i8* %arrayIdx1015, align 1
  %i3 = add i64 %i1, 4
  %arrayIdx1017 = getelementptr inbounds i8, i8* %pix2, i64 %i3
  %gepload1018 = load i8, i8* %arrayIdx1017, align 1
  %i4 = add i64 %i, 1
  %arrayIdx1019 = getelementptr inbounds i8, i8* %pix1, i64 %i4
  %gepload1020 = load i8, i8* %arrayIdx1019, align 1
  %i5 = add i64 %i1, 1
  %arrayIdx1021 = getelementptr inbounds i8, i8* %pix2, i64 %i5
  %gepload1022 = load i8, i8* %arrayIdx1021, align 1
  %i6 = add i64 %i, 5
  %arrayIdx1023 = getelementptr inbounds i8, i8* %pix1, i64 %i6
  %gepload1024 = load i8, i8* %arrayIdx1023, align 1
  %i7 = add i64 %i1, 5
  %arrayIdx1025 = getelementptr inbounds i8, i8* %pix2, i64 %i7
  %gepload1026 = load i8, i8* %arrayIdx1025, align 1
  %i8 = add i64 %i, 2
  %arrayIdx1027 = getelementptr inbounds i8, i8* %pix1, i64 %i8
  %gepload1028 = load i8, i8* %arrayIdx1027, align 1
  %i9 = add i64 %i1, 2
  %arrayIdx1029 = getelementptr inbounds i8, i8* %pix2, i64 %i9
  %gepload1030 = load i8, i8* %arrayIdx1029, align 1
  %i10 = add i64 %i, 6
  %arrayIdx1031 = getelementptr inbounds i8, i8* %pix1, i64 %i10
  %gepload1032 = load i8, i8* %arrayIdx1031, align 1
  %i11 = add i64 %i1, 6
  %arrayIdx1033 = getelementptr inbounds i8, i8* %pix2, i64 %i11
  %gepload1034 = load i8, i8* %arrayIdx1033, align 1
  %i12 = add i64 %i, 3
  %arrayIdx1035 = getelementptr inbounds i8, i8* %pix1, i64 %i12
  %gepload1036 = load i8, i8* %arrayIdx1035, align 1
  %i13 = add i64 %i1, 3
  %arrayIdx1037 = getelementptr inbounds i8, i8* %pix2, i64 %i13
  %gepload1038 = load i8, i8* %arrayIdx1037, align 1
  %i14 = add i64 %i, 7
  %arrayIdx1039 = getelementptr inbounds i8, i8* %pix1, i64 %i14
  %gepload1040 = load i8, i8* %arrayIdx1039, align 1
  %i15 = add i64 %i1, 7
  %arrayIdx1041 = getelementptr inbounds i8, i8* %pix2, i64 %i15
  %gepload1042 = load i8, i8* %arrayIdx1041, align 1
  %i16 = zext i8 %gepload1036 to i32
  %i17 = zext i8 %gepload1028 to i32
  %i18 = zext i8 %gepload1020 to i32
  %i19 = zext i8 %gepload to i32
  %i20 = zext i8 %gepload1042 to i32
  %i21 = zext i8 %gepload1034 to i32
  %i22 = zext i8 %gepload1026 to i32
  %i23 = zext i8 %gepload1018 to i32
  %i24 = zext i8 %gepload1038 to i32
  %i25 = zext i8 %gepload1030 to i32
  %i26 = zext i8 %gepload1022 to i32
  %i27 = zext i8 %gepload1014 to i32
  %i28 = zext i8 %gepload1040 to i32
  %i29 = zext i8 %gepload1032 to i32
  %i30 = zext i8 %gepload1024 to i32
  %i31 = zext i8 %gepload1016 to i32
  %i32 = shl i32 %i20, 16
  %i33 = shl i32 %i21, 16
  %i34 = shl i32 %i22, 16
  %i35 = shl i32 %i23, 16
  %i36 = shl i32 %i28, 16
  %i37 = shl i32 %i29, 16
  %i38 = shl i32 %i30, 16
  %i39 = shl i32 %i31, 16
  %Node1 = sub i32 %i36, %i24
  %Node2 = sub i32 %Node1, %i32
  %Node3 = add i32 %Node2, %i16
  %Node4 = sub i32 %i37, %i25
  %Node5 = sub i32 %Node4, %i33
  %Node6 = add i32 %Node5, %i17
  %Node7 = sub i32 %i38, %i26
  %Node8 = sub i32 %Node7, %i34
  %Node9 = add i32 %Node8, %i18
  %Node10 = sub i32 %i39, %i27
  %Node11 = sub i32 %Node10, %i35
  %Node12 = add i32 %Node11, %i19

  %arrayIdx1043 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1.i64.0, i64 0
  %Bridge_T24_151 = add i32 %Node12, %Node9
  %Bridge_T24_159 = add i32 %Bridge_T24_151, %Node6
  %Bridge_T24_167 = add i32 %Bridge_T24_159, %Node3
  store i32 %Bridge_T24_167, i32* %arrayIdx1043, align 4

  %arrayIdx1045 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1.i64.0, i64 2
  %Bridge_T23_156 = add i32 %Node12, %Node9
  %Bridge_T23_164 = sub i32 %Bridge_T23_156, %Node6
  %Bridge_T23_172 = sub i32 %Bridge_T23_164, %Node3
  store i32 %Bridge_T23_172, i32* %arrayIdx1045, align 4

  %arrayIdx1063 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1.i64.0, i64 1
  %Bridge_T22_157 = sub i32 %Node12, %Node9
  %Bridge_T22_165 = add i32 %Bridge_T22_157, %Node6
  %Bridge_T22_173 = sub i32 %Bridge_T22_165, %Node3
  store i32 %Bridge_T22_173, i32* %arrayIdx1063, align 4

  %arrayIdx1081 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1.i64.0, i64 3
  %Bridge_T21_158 = sub i32 %Node12, %Node9
  %Bridge_T21_166 = sub i32 %Bridge_T21_158, %Node6
  %Bridge_T21_174 = add i32 %Bridge_T21_166, %Node3
  store i32 %Bridge_T21_174, i32* %arrayIdx1081, align 4

  %i64 = add i64 %i, 8
  %arrayIdx1098 = getelementptr inbounds i8, i8* %pix1, i64 %i64
  %gepload1099 = load i8, i8* %arrayIdx1098, align 1
  %i65 = add i64 %i1, 8
  %arrayIdx1100 = getelementptr inbounds i8, i8* %pix2, i64 %i65
  %gepload1101 = load i8, i8* %arrayIdx1100, align 1
  %i66 = add i64 %i, 12
  %arrayIdx1102 = getelementptr inbounds i8, i8* %pix1, i64 %i66
  %gepload1103 = load i8, i8* %arrayIdx1102, align 1
  %i67 = add i64 %i1, 12
  %arrayIdx1104 = getelementptr inbounds i8, i8* %pix2, i64 %i67
  %gepload1105 = load i8, i8* %arrayIdx1104, align 1
  %i68 = add i64 %i, 9
  %arrayIdx1106 = getelementptr inbounds i8, i8* %pix1, i64 %i68
  %gepload1107 = load i8, i8* %arrayIdx1106, align 1
  %i69 = add i64 %i1, 9
  %arrayIdx1108 = getelementptr inbounds i8, i8* %pix2, i64 %i69
  %gepload1109 = load i8, i8* %arrayIdx1108, align 1
  %i70 = add i64 %i, 13
  %arrayIdx1110 = getelementptr inbounds i8, i8* %pix1, i64 %i70
  %gepload1111 = load i8, i8* %arrayIdx1110, align 1
  %i71 = add i64 %i1, 13
  %arrayIdx1112 = getelementptr inbounds i8, i8* %pix2, i64 %i71
  %gepload1113 = load i8, i8* %arrayIdx1112, align 1
  %i72 = add i64 %i, 10
  %arrayIdx1114 = getelementptr inbounds i8, i8* %pix1, i64 %i72
  %gepload1115 = load i8, i8* %arrayIdx1114, align 1
  %i73 = add i64 %i1, 10
  %arrayIdx1116 = getelementptr inbounds i8, i8* %pix2, i64 %i73
  %gepload1117 = load i8, i8* %arrayIdx1116, align 1
  %i74 = add i64 %i, 14
  %arrayIdx1118 = getelementptr inbounds i8, i8* %pix1, i64 %i74
  %gepload1119 = load i8, i8* %arrayIdx1118, align 1
  %i75 = add i64 %i1, 14
  %arrayIdx1120 = getelementptr inbounds i8, i8* %pix2, i64 %i75
  %gepload1121 = load i8, i8* %arrayIdx1120, align 1
  %i76 = add i64 %i, 11
  %arrayIdx1122 = getelementptr inbounds i8, i8* %pix1, i64 %i76
  %gepload1123 = load i8, i8* %arrayIdx1122, align 1
  %i77 = add i64 %i1, 11
  %arrayIdx1124 = getelementptr inbounds i8, i8* %pix2, i64 %i77
  %gepload1125 = load i8, i8* %arrayIdx1124, align 1
  %i78 = add i64 %i, 15
  %arrayIdx1126 = getelementptr inbounds i8, i8* %pix1, i64 %i78
  %gepload1127 = load i8, i8* %arrayIdx1126, align 1
  %i79 = add i64 %i1, 15
  %arrayIdx1128 = getelementptr inbounds i8, i8* %pix2, i64 %i79
  %gepload1129 = load i8, i8* %arrayIdx1128, align 1
  %i80 = zext i8 %gepload1123 to i32
  %i81 = zext i8 %gepload1115 to i32
  %i82 = zext i8 %gepload1107 to i32
  %i83 = zext i8 %gepload1099 to i32
  %i84 = zext i8 %gepload1129 to i32
  %i85 = zext i8 %gepload1121 to i32
  %i86 = zext i8 %gepload1113 to i32
  %i87 = zext i8 %gepload1105 to i32
  %i88 = zext i8 %gepload1125 to i32
  %i89 = zext i8 %gepload1117 to i32
  %i90 = zext i8 %gepload1109 to i32
  %i91 = zext i8 %gepload1101 to i32
  %i92 = zext i8 %gepload1127 to i32
  %i93 = zext i8 %gepload1119 to i32
  %i94 = zext i8 %gepload1111 to i32
  %i95 = zext i8 %gepload1103 to i32
  %i96 = shl i32 %i84, 16
  %i97 = shl i32 %i85, 16
  %i98 = shl i32 %i86, 16
  %i99 = shl i32 %i87, 16
  %i100 = shl i32 %i92, 16
  %i101 = shl i32 %i93, 16
  %i102 = shl i32 %i94, 16
  %i103 = shl i32 %i95, 16
  %Node20 = sub i32 %i100, %i88
  %Node21 = sub i32 %Node20, %i96
  %Node22 = add i32 %Node21, %i80
  %Node23 = sub i32 %i101, %i89
  %Node24 = sub i32 %Node23, %i97
  %Node25 = add i32 %Node24, %i81
  %Node26 = sub i32 %i102, %i90
  %Node27 = sub i32 %Node26, %i98
  %Node28 = add i32 %Node27, %i82
  %Node29 = sub i32 %i103, %i91
  %Node30 = sub i32 %Node29, %i99
  %Node31 = add i32 %Node30, %i83

  %arrayIdx1131 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1.i64.0, i64 4
  %Bridge_T4_64 = add i32 %Node31, %Node28
  %Bridge_T4_72 = add i32 %Bridge_T4_64, %Node25
  %Bridge_T4_80 = add i32 %Bridge_T4_72, %Node22
  store i32 %Bridge_T4_80, i32* %arrayIdx1131, align 4

  %arrayIdx1133 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1.i64.0, i64 6
  %Bridge_T3_69 = add i32 %Node31, %Node28
  %Bridge_T3_77 = sub i32 %Bridge_T3_69, %Node25
  %Bridge_T3_85 = sub i32 %Bridge_T3_77, %Node22
  store i32 %Bridge_T3_85, i32* %arrayIdx1133, align 4

  %arrayIdx1151 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1.i64.0, i64 5
  %Bridge_T2_70 = sub i32 %Node31, %Node28
  %Bridge_T2_78 = add i32 %Bridge_T2_70, %Node25
  %Bridge_T2_86 = sub i32 %Bridge_T2_78, %Node22
  store i32 %Bridge_T2_86, i32* %arrayIdx1151, align 4

  %arrayIdx1169 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1.i64.0, i64 7
  %Bridge_T1_71 = sub i32 %Node31, %Node28
  %Bridge_T1_79 = sub i32 %Bridge_T1_71, %Node25
  %Bridge_T1_87 = add i32 %Bridge_T1_79, %Node22
  store i32 %Bridge_T1_87, i32* %arrayIdx1169, align 4

  %nextivloop.1247 = add nuw nsw i64 %i1.i64.0, 1
  %condloop.1247 = icmp ult i64 %nextivloop.1247, 16
  br i1 %condloop.1247, label %loop.1247, label %afterloop.1247

afterloop.1247:                                   ; preds = %loop.1247
  ret i32 0
}
