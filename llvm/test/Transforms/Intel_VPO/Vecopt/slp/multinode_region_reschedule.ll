; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; RUN: opt -passes=slp-vectorizer -enable-intel-advanced-opts -slp-multinode -mattr=+avx2 -mtriple=x86_64 -slp-threshold=-200 -S < %s | FileCheck %s

; Crash test. Region from %sub0 to the end of block has been set for
; rescheduling after adding the branch instruction to the scheduling region.
; It means that all dependencies have to be recalculated (not just updated).
define void @foo(ptr %p) {
; CHECK-LABEL: define void @foo
; CHECK-SAME: (ptr [[P:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:    [[IDX2:%.*]] = getelementptr inbounds i32, ptr [[P]], i32 2
; CHECK-NEXT:    [[SUB0:%.*]] = sub i32 1, poison
; CHECK-NEXT:    [[GEP:%.*]] = getelementptr inbounds i32, ptr poison, i32 [[SUB0]]
; CHECK-NEXT:    [[LD0:%.*]] = load i32, ptr [[GEP]], align 4
; CHECK-NEXT:    call void @mark()
; CHECK-NEXT:    [[LD2:%.*]] = load i32, ptr poison, align 4
; CHECK-NEXT:    [[SUB1:%.*]] = sub i32 1, [[LD2]]
; CHECK-NEXT:    [[LD1:%.*]] = load i32, ptr poison, align 4
; CHECK-NEXT:    br label [[BB2:%.*]]
; CHECK:       bb2:
; CHECK-NEXT:    [[TMP1:%.*]] = insertelement <2 x i32> poison, i32 [[SUB0]], i32 0
; CHECK-NEXT:    [[TMP2:%.*]] = insertelement <2 x i32> [[TMP1]], i32 [[SUB1]], i32 1
; CHECK-NEXT:    [[TMP3:%.*]] = and <2 x i32> [[TMP2]], <i32 1, i32 1>
; CHECK-NEXT:    [[TMP4:%.*]] = insertelement <2 x i32> poison, i32 [[LD0]], i32 0
; CHECK-NEXT:    [[TMP5:%.*]] = insertelement <2 x i32> [[TMP4]], i32 [[LD1]], i32 1
; CHECK-NEXT:    [[TMP6:%.*]] = add <2 x i32> [[TMP3]], [[TMP5]]
; CHECK-NEXT:    store <2 x i32> [[TMP6]], ptr [[IDX2]], align 4
; CHECK-NEXT:    ret void
;
  %idx2 = getelementptr inbounds i32, ptr %p, i32 2
  %idx3 = getelementptr inbounds i32, ptr %p, i32 3
  %sub0 = sub i32 1, poison
  %gep = getelementptr inbounds i32, ptr poison, i32 %sub0
  %ld0 = load i32, ptr %gep, align 4
  call void @mark()
  %ld2 = load i32, ptr poison, align 4
  %sub1 = sub i32 1, %ld2
  %ld1 = load i32, ptr poison, align 4
  br label %bb2
bb2:
  %rem1 = and i32 %sub1, 1
  %add1 = add i32 %ld1, %rem1
  %rem0 = and i32 %sub0, 1
  %add0 = add i32 %ld0, %rem0
  store i32 %add0, ptr %idx2, align 4
  store i32 %add1, ptr %idx3, align 4
  ret void
}

declare void @mark()
