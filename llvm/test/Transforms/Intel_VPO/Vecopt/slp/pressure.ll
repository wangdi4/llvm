; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes=slp-vectorizer -mtriple=x86_64-unknown-linux-gnu -mcpu=core-avx2 -S < %s | FileCheck %s

; Test reduced from critical loop of 508.namd_r.  We must vectorize eight
; of the loads, fmuls, and fsubs at the expense of FMA contraction because
; of register pressure issues in this loop.  See CMPLRLLVM-38484.

%structA = type { %classA, float, i16, i8, i8 }
%classA = type { double, double, double }

define void @pressure(double %0, double %1, double %2, double %3, ptr %4, double %5) #0 {
; CHECK-LABEL: @pressure(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[X7:%.*]] = fadd fast double [[TMP5:%.*]], [[TMP0:%.*]]
; CHECK-NEXT:    br i1 undef, label [[LABELD:%.*]], label [[LABELC:%.*]]
; CHECK:       labelC:
; CHECK-NEXT:    [[X12:%.*]] = phi double [ undef, [[ENTRY:%.*]] ], [ [[X51:%.*]], [[LABELC]] ]
; CHECK-NEXT:    [[X13:%.*]] = phi double [ undef, [[ENTRY]] ], [ [[X52:%.*]], [[LABELC]] ]
; CHECK-NEXT:    [[X19:%.*]] = phi double [ undef, [[ENTRY]] ], [ [[X68:%.*]], [[LABELC]] ]
; CHECK-NEXT:    [[X22:%.*]] = phi double [ undef, [[ENTRY]] ], [ [[X63:%.*]], [[LABELC]] ]
; CHECK-NEXT:    [[TMP6:%.*]] = phi <2 x double> [ undef, [[ENTRY]] ], [ [[TMP25:%.*]], [[LABELC]] ]
; CHECK-NEXT:    [[TMP7:%.*]] = phi <2 x double> [ undef, [[ENTRY]] ], [ [[TMP33:%.*]], [[LABELC]] ]
; CHECK-NEXT:    [[TMP8:%.*]] = phi <2 x double> [ undef, [[ENTRY]] ], [ [[TMP29:%.*]], [[LABELC]] ]
; CHECK-NEXT:    [[TMP9:%.*]] = phi <2 x double> [ undef, [[ENTRY]] ], [ [[TMP21:%.*]], [[LABELC]] ]
; CHECK-NEXT:    [[TMP10:%.*]] = insertelement <2 x double> poison, double [[TMP1:%.*]], i32 0
; CHECK-NEXT:    [[TMP11:%.*]] = insertelement <2 x double> [[TMP10]], double [[TMP2:%.*]], i32 1
; CHECK-NEXT:    [[TMP12:%.*]] = fsub fast <2 x double> [[TMP11]], [[TMP9]]
; CHECK-NEXT:    [[TMP13:%.*]] = fsub fast <2 x double> [[TMP11]], [[TMP6]]
; CHECK-NEXT:    [[TMP14:%.*]] = insertelement <2 x double> poison, double [[TMP2]], i32 0
; CHECK-NEXT:    [[TMP15:%.*]] = insertelement <2 x double> [[TMP14]], double [[TMP3:%.*]], i32 1
; CHECK-NEXT:    [[TMP16:%.*]] = fsub fast <2 x double> [[TMP15]], [[TMP8]]
; CHECK-NEXT:    [[TMP17:%.*]] = fsub fast <2 x double> [[TMP15]], [[TMP7]]
; CHECK-NEXT:    [[X49:%.*]] = getelementptr inbounds [[STRUCTA:%.*]], ptr [[TMP4:%.*]], i64 undef, i32 0, i32 0
; CHECK-NEXT:    [[X51]] = load double, ptr undef, align 8
; CHECK-NEXT:    [[X52]] = load double, ptr undef, align 8
; CHECK-NEXT:    [[X53:%.*]] = getelementptr inbounds [[STRUCTA]], ptr [[TMP4]], i64 undef, i32 0, i32 0
; CHECK-NEXT:    [[TMP18:%.*]] = fmul fast <2 x double> [[TMP12]], [[TMP12]]
; CHECK-NEXT:    [[TMP19:%.*]] = extractelement <2 x double> [[TMP18]], i32 1
; CHECK-NEXT:    [[X37:%.*]] = fadd fast double undef, [[TMP19]]
; CHECK-NEXT:    [[TMP20:%.*]] = extractelement <2 x double> [[TMP18]], i32 0
; CHECK-NEXT:    [[X38:%.*]] = fadd fast double [[X37]], [[TMP20]]
; CHECK-NEXT:    [[TMP21]] = load <2 x double>, ptr [[X49]], align 8
; CHECK-NEXT:    [[X57:%.*]] = getelementptr inbounds [[STRUCTA]], ptr [[TMP4]], i64 undef, i32 0, i32 1
; CHECK-NEXT:    [[X59:%.*]] = getelementptr inbounds [[STRUCTA]], ptr [[TMP4]], i64 undef, i32 0, i32 1
; CHECK-NEXT:    [[TMP22:%.*]] = fmul fast <2 x double> [[TMP13]], [[TMP13]]
; CHECK-NEXT:    [[TMP23:%.*]] = extractelement <2 x double> [[TMP22]], i32 1
; CHECK-NEXT:    [[X47:%.*]] = fadd fast double undef, [[TMP23]]
; CHECK-NEXT:    [[TMP24:%.*]] = extractelement <2 x double> [[TMP22]], i32 0
; CHECK-NEXT:    [[X48:%.*]] = fadd fast double [[X47]], [[TMP24]]
; CHECK-NEXT:    [[TMP25]] = load <2 x double>, ptr [[X53]], align 8
; CHECK-NEXT:    [[X63]] = load double, ptr undef, align 8
; CHECK-NEXT:    [[TMP26:%.*]] = fmul fast <2 x double> [[TMP16]], [[TMP16]]
; CHECK-NEXT:    [[TMP27:%.*]] = extractelement <2 x double> [[TMP26]], i32 1
; CHECK-NEXT:    [[X40:%.*]] = fadd fast double [[TMP27]], [[TMP5]]
; CHECK-NEXT:    [[TMP28:%.*]] = extractelement <2 x double> [[TMP26]], i32 0
; CHECK-NEXT:    [[X41:%.*]] = fadd fast double [[X40]], [[TMP28]]
; CHECK-NEXT:    [[X42:%.*]] = fadd fast double [[X41]], undef
; CHECK-NEXT:    [[TMP29]] = load <2 x double>, ptr [[X57]], align 8
; CHECK-NEXT:    [[TMP30:%.*]] = fmul fast <2 x double> [[TMP17]], [[TMP17]]
; CHECK-NEXT:    [[TMP31:%.*]] = extractelement <2 x double> [[TMP30]], i32 1
; CHECK-NEXT:    [[X44:%.*]] = fadd fast double [[TMP31]], [[TMP5]]
; CHECK-NEXT:    [[TMP32:%.*]] = extractelement <2 x double> [[TMP30]], i32 0
; CHECK-NEXT:    [[X45:%.*]] = fadd fast double [[X44]], [[TMP32]]
; CHECK-NEXT:    [[X46:%.*]] = fadd fast double [[X45]], undef
; CHECK-NEXT:    [[TMP33]] = load <2 x double>, ptr [[X59]], align 8
; CHECK-NEXT:    [[X68]] = load double, ptr undef, align 8
; CHECK-NEXT:    [[X69:%.*]] = fcmp fast olt double [[X38]], [[X7]]
; CHECK-NEXT:    [[X70:%.*]] = fcmp fast olt double [[X42]], [[X7]]
; CHECK-NEXT:    [[X71:%.*]] = fcmp fast olt double [[X46]], [[X7]]
; CHECK-NEXT:    [[X72:%.*]] = fcmp fast olt double [[X48]], [[X7]]
; CHECK-NEXT:    store double [[X38]], ptr undef, align 8
; CHECK-NEXT:    [[X73:%.*]] = zext i1 [[X70]] to i32
; CHECK-NEXT:    [[X74:%.*]] = zext i1 [[X72]] to i32
; CHECK-NEXT:    br i1 undef, label [[LABELC]], label [[LABELD]]
; CHECK:       labelD:
; CHECK-NEXT:    ret void
;
entry:
  %x7 = fadd fast double %5, %0
  br i1 undef, label %labelD, label %labelC

labelC:
  %x11 = phi double [ undef, %entry ], [ %x50, %labelC ]
  %x12 = phi double [ undef, %entry ], [ %x51, %labelC ]
  %x13 = phi double [ undef, %entry ], [ %x52, %labelC ]
  %x14 = phi double [ undef, %entry ], [ %x54, %labelC ]
  %x15 = phi double [ undef, %entry ], [ %x56, %labelC ]
  %x16 = phi double [ undef, %entry ], [ %x58, %labelC ]
  %x17 = phi double [ undef, %entry ], [ %x60, %labelC ]
  %x18 = phi double [ undef, %entry ], [ %x62, %labelC ]
  %x19 = phi double [ undef, %entry ], [ %x68, %labelC ]
  %x20 = phi double [ undef, %entry ], [ %x67, %labelC ]
  %x21 = phi double [ undef, %entry ], [ %x65, %labelC ]
  %x22 = phi double [ undef, %entry ], [ %x63, %labelC ]
  %x23 = fsub fast double %1, %x11
  %x24 = fsub fast double %1, %x14
  %x25 = fmul fast double %x23, %x23
  %x26 = fmul fast double %x24, %x24
  %x27 = fsub fast double %2, %x15
  %x28 = fsub fast double %2, %x16
  %x29 = fsub fast double %2, %x17
  %x30 = fsub fast double %2, %x18
  %x31 = fmul fast double %x27, %x27
  %x32 = fmul fast double %x28, %x28
  %x33 = fmul fast double %x29, %x29
  %x34 = fmul fast double %x30, %x30
  %x35 = fsub fast double %3, %x21
  %x36 = fsub fast double %3, %x20
  %x37 = fadd fast double undef, %x31
  %x38 = fadd fast double %x37, %x25
  %x39 = fmul fast double %x35, %x35
  %x40 = fadd fast double %x39, %5
  %x41 = fadd fast double %x40, %x32
  %x42 = fadd fast double %x41, undef
  %x43 = fmul fast double %x36, %x36
  %x44 = fadd fast double %x43, %5
  %x45 = fadd fast double %x44, %x33
  %x46 = fadd fast double %x45, undef
  %x47 = fadd fast double undef, %x34
  %x48 = fadd fast double %x47, %x26
  %x49 = getelementptr inbounds %structA, ptr %4, i64 undef, i32 0, i32 0
  %x50 = load double, ptr %x49, align 8
  %x51 = load double, ptr undef, align 8
  %x52 = load double, ptr undef, align 8
  %x53 = getelementptr inbounds %structA, ptr %4, i64 undef, i32 0, i32 0
  %x54 = load double, ptr %x53, align 8
  %x55 = getelementptr inbounds %structA, ptr %4, i64 undef, i32 0, i32 1
  %x56 = load double, ptr %x55, align 8
  %x57 = getelementptr inbounds %structA, ptr %4, i64 undef, i32 0, i32 1
  %x58 = load double, ptr %x57, align 8
  %x59 = getelementptr inbounds %structA, ptr %4, i64 undef, i32 0, i32 1
  %x60 = load double, ptr %x59, align 8
  %x61 = getelementptr inbounds %structA, ptr %4, i64 undef, i32 0, i32 1
  %x62 = load double, ptr %x61, align 8
  %x63 = load double, ptr undef, align 8
  %x64 = getelementptr inbounds %structA, ptr %4, i64 undef, i32 0, i32 2
  %x65 = load double, ptr %x64, align 8
  %x66 = getelementptr inbounds %structA, ptr %4, i64 undef, i32 0, i32 2
  %x67 = load double, ptr %x66, align 8
  %x68 = load double, ptr undef, align 8
  %x69 = fcmp fast olt double %x38, %x7
  %x70 = fcmp fast olt double %x42, %x7
  %x71 = fcmp fast olt double %x46, %x7
  %x72 = fcmp fast olt double %x48, %x7
  store double %x38, ptr undef, align 8
  %x73 = zext i1 %x70 to i32
  %x74 = zext i1 %x72 to i32
  br i1 undef, label %labelC, label %labelD

labelD:
  ret void
}
