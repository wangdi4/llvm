; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes=slp-vectorizer -mcpu=skylake-avx512 -max-split-load=0 -slp-compatibility-mode -S < %s | FileCheck %s

; The fail caused by not quite correct merge of the patch https://reviews.llvm.org/D127219
; Vectorization tree rooted with the set of 8 loads with an attempt to produce
; gather load at the end. But their operands (bitcasts) are not of uniform shape
; and thus supposed to end up with issueing gathering node for these scalars.
; But we mess up with multi-node support code and that fired an assertion
; that gather load operands beeing vectorized is a suported case.

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.complex = type { float, float }
%struct.su3_matrix = type { [3 x [3 x %struct.complex]] }
%struct.site = type {[4 x %struct.su3_matrix]}

@lattice = external hidden unnamed_addr global %struct.site*, align 8

define void @test(i64 %arg) {
; CHECK-LABEL: @test(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[I1296:%.*]] = load %struct.site*, %struct.site** @lattice, align 8
; CHECK-NEXT:    br label [[BB219:%.*]]
; CHECK:       bb219:
; CHECK-NEXT:    [[I:%.*]] = phi i32 [ undef, [[ENTRY:%.*]] ], [ [[OP_RDX9:%.*]], [[BB220:%.*]] ]
; CHECK-NEXT:    br label [[BB220]]
; CHECK:       bb220:
; CHECK-NEXT:    [[I221:%.*]] = getelementptr inbounds [[STRUCT_SITE:%.*]], %struct.site* [[I1296]], i64 [[ARG:%.*]], i32 0, i64 2, i32 0, i64 1, i64 2
; CHECK-NEXT:    [[I222:%.*]] = bitcast %struct.complex* [[I221]] to i32*
; CHECK-NEXT:    [[I223:%.*]] = load i32, i32* [[I222]], align 4
; CHECK-NEXT:    [[I224:%.*]] = getelementptr inbounds [[STRUCT_SITE]], %struct.site* [[I1296]], i64 [[ARG]], i32 0, i64 2, i32 0, i64 1, i64 2, i32 1
; CHECK-NEXT:    [[I225:%.*]] = bitcast float* [[I224]] to i32*
; CHECK-NEXT:    [[I226:%.*]] = load i32, i32* [[I225]], align 4
; CHECK-NEXT:    [[I229:%.*]] = getelementptr inbounds [[STRUCT_SITE]], %struct.site* [[I1296]], i64 [[ARG]], i32 0, i64 3, i32 0, i64 0, i64 0, i32 1
; CHECK-NEXT:    [[I230:%.*]] = bitcast float* [[I229]] to i32*
; CHECK-NEXT:    [[I231:%.*]] = load i32, i32* [[I230]], align 4
; CHECK-NEXT:    [[I234:%.*]] = getelementptr inbounds [[STRUCT_SITE]], %struct.site* [[I1296]], i64 [[ARG]], i32 0, i64 3, i32 0, i64 0, i64 1
; CHECK-NEXT:    [[I235:%.*]] = bitcast %struct.complex* [[I234]] to i32*
; CHECK-NEXT:    [[I236:%.*]] = load i32, i32* [[I235]], align 4
; CHECK-NEXT:    [[I237:%.*]] = getelementptr inbounds [[STRUCT_SITE]], %struct.site* [[I1296]], i64 [[ARG]], i32 0, i64 3, i32 0, i64 0, i64 1, i32 1
; CHECK-NEXT:    [[I238:%.*]] = bitcast float* [[I237]] to i32*
; CHECK-NEXT:    [[I239:%.*]] = load i32, i32* [[I238]], align 4
; CHECK-NEXT:    [[I242:%.*]] = getelementptr inbounds [[STRUCT_SITE]], %struct.site* [[I1296]], i64 [[ARG]], i32 0, i64 3, i32 0, i64 0, i64 2, i32 1
; CHECK-NEXT:    [[I243:%.*]] = bitcast float* [[I242]] to i32*
; CHECK-NEXT:    [[I244:%.*]] = load i32, i32* [[I243]], align 4
; CHECK-NEXT:    [[I247:%.*]] = getelementptr inbounds [[STRUCT_SITE]], %struct.site* [[I1296]], i64 [[ARG]], i32 0, i64 3, i32 0, i64 1, i64 0, i32 1
; CHECK-NEXT:    [[I248:%.*]] = bitcast float* [[I247]] to i32*
; CHECK-NEXT:    [[I249:%.*]] = load i32, i32* [[I248]], align 4
; CHECK-NEXT:    [[I254:%.*]] = getelementptr inbounds [[STRUCT_SITE]], %struct.site* [[I1296]], i64 [[ARG]], i32 0, i64 3, i32 0, i64 1, i64 2, i32 1
; CHECK-NEXT:    [[I255:%.*]] = bitcast float* [[I254]] to i32*
; CHECK-NEXT:    [[I256:%.*]] = load i32, i32* [[I255]], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> undef)
; CHECK-NEXT:    [[OP_RDX:%.*]] = add i32 [[TMP0]], [[I223]]
; CHECK-NEXT:    [[OP_RDX1:%.*]] = add i32 [[I226]], [[I231]]
; CHECK-NEXT:    [[OP_RDX2:%.*]] = add i32 [[I236]], [[I239]]
; CHECK-NEXT:    [[OP_RDX3:%.*]] = add i32 [[I244]], [[I249]]
; CHECK-NEXT:    [[OP_RDX4:%.*]] = add i32 [[I256]], undef
; CHECK-NEXT:    [[OP_RDX5:%.*]] = add i32 [[OP_RDX]], [[OP_RDX1]]
; CHECK-NEXT:    [[OP_RDX6:%.*]] = add i32 [[OP_RDX2]], [[OP_RDX3]]
; CHECK-NEXT:    [[OP_RDX7:%.*]] = add i32 [[OP_RDX4]], undef
; CHECK-NEXT:    [[OP_RDX8:%.*]] = add i32 [[OP_RDX5]], [[OP_RDX6]]
; CHECK-NEXT:    [[OP_RDX9]] = add i32 [[OP_RDX8]], [[OP_RDX7]]
; CHECK-NEXT:    br i1 undef, label [[BB219]], label [[BB220]]
; CHECK:       bb259:
; CHECK-NEXT:    ret void
;
entry:
  %i1296 = load %struct.site*, %struct.site** @lattice, align 8
  br label %bb219

bb219:
  %i = phi i32 [ undef, %entry ], [ %i258, %bb220 ]
  br label %bb220

bb220:
  %i221 = getelementptr inbounds %struct.site, %struct.site* %i1296, i64 %arg, i32 0, i64 2, i32 0, i64 1, i64 2
  %i222 = bitcast %struct.complex* %i221 to i32*
  %i223 = load i32, i32* %i222, align 4
  %i224 = getelementptr inbounds %struct.site, %struct.site* %i1296, i64 %arg, i32 0, i64 2, i32 0, i64 1, i64 2, i32 1
  %i225 = bitcast float* %i224 to i32*
  %i226 = load i32, i32* %i225, align 4
  %i227 = add i32 %i223, undef
  %i228 = add i32 %i226, %i227
  %i229 = getelementptr inbounds %struct.site, %struct.site* %i1296, i64 %arg, i32 0, i64 3, i32 0, i64 0, i64 0, i32 1
  %i230 = bitcast float* %i229 to i32*
  %i231 = load i32, i32* %i230, align 4
  %i232 = add i32 %i228, undef
  %i233 = add i32 %i231, %i232
  %i234 = getelementptr inbounds %struct.site, %struct.site* %i1296, i64 %arg, i32 0, i64 3, i32 0, i64 0, i64 1
  %i235 = bitcast %struct.complex* %i234 to i32*
  %i236 = load i32, i32* %i235, align 4
  %i237 = getelementptr inbounds %struct.site, %struct.site* %i1296, i64 %arg, i32 0, i64 3, i32 0, i64 0, i64 1, i32 1
  %i238 = bitcast float* %i237 to i32*
  %i239 = load i32, i32* %i238, align 4
  %i240 = add i32 %i236, %i233
  %i241 = add i32 %i239, %i240
  %i242 = getelementptr inbounds %struct.site, %struct.site* %i1296, i64 %arg, i32 0, i64 3, i32 0, i64 0, i64 2, i32 1
  %i243 = bitcast float* %i242 to i32*
  %i244 = load i32, i32* %i243, align 4
  %i245 = add i32 undef, %i241
  %i246 = add i32 %i244, %i245
  %i247 = getelementptr inbounds %struct.site, %struct.site* %i1296, i64 %arg, i32 0, i64 3, i32 0, i64 1, i64 0, i32 1
  %i248 = bitcast float* %i247 to i32*
  %i249 = load i32, i32* %i248, align 4
  %i250 = add i32 undef, %i246
  %i251 = add i32 %i249, %i250
  %i252 = add i32 %i251, undef
  %i253 = add i32 undef, %i252
  %i254 = getelementptr inbounds %struct.site, %struct.site* %i1296, i64 %arg, i32 0, i64 3, i32 0, i64 1, i64 2, i32 1
  %i255 = bitcast float* %i254 to i32*
  %i256 = load i32, i32* %i255, align 4
  %i257 = add i32 undef, %i253
  %i258 = add i32 %i256, %i257
  br i1 undef, label %bb219, label %bb220

bb259:
  ret void
}

