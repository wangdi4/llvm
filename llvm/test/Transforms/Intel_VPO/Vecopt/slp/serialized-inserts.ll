; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; FIXME: It is not supposed to be vectorized by default. Behavior changed after https://reviews.llvm.org/D135282.
;        Threshold 7 added to unblock pulldown process.
;        Increased threshold to 8 (presumably after https://reviews.llvm.org/D141512).
; RUN: opt -opaque-pointers=0 < %s -passes=slp-vectorizer -S -mtriple=x86_64-unknown-linux-gnu -mcpu=skylake -slp-threshold=8 | FileCheck %s
; RUN: opt -opaque-pointers=0 < %s -passes=slp-vectorizer -slp-threshold=-3 -S -mtriple=x86_64-unknown-linux-gnu -mcpu=skylake | FileCheck %s -check-prefix=FORCE-VECT

@input_buf = external constant [512 x i8], align 16

define void @foo() {
; CHECK-LABEL: @foo(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label [[LOOP:%.*]]
; CHECK:       loop:
; CHECK-NEXT:    [[D27:%.*]] = phi i8 [ [[D65:%.*]], [[LOOP]] ], [ 0, [[ENTRY:%.*]] ]
; CHECK-NEXT:    [[D28:%.*]] = phi i8 [ [[D54:%.*]], [[LOOP]] ], [ 0, [[ENTRY]] ]
; CHECK-NEXT:    [[D29:%.*]] = phi i8 [ [[D42:%.*]], [[LOOP]] ], [ 0, [[ENTRY]] ]
; CHECK-NEXT:    [[D30:%.*]] = getelementptr inbounds [512 x i8], [512 x i8]* @input_buf, i64 0, i64 undef
; CHECK-NEXT:    [[D31:%.*]] = load i8, i8* [[D30]], align 4
; CHECK-NEXT:    [[D32:%.*]] = xor i8 [[D31]], [[D27]]
; CHECK-NEXT:    [[D33:%.*]] = xor i8 [[D32]], [[D28]]
; CHECK-NEXT:    [[D34:%.*]] = xor i8 [[D33]], [[D29]]
; CHECK-NEXT:    [[D35:%.*]] = getelementptr inbounds i8, i8* undef, i64 undef
; CHECK-NEXT:    store i8 [[D34]], i8* [[D35]], align 1
; CHECK-NEXT:    [[D36:%.*]] = xor i8 [[D31]], [[D28]]
; CHECK-NEXT:    [[D37:%.*]] = xor i8 [[D36]], [[D29]]
; CHECK-NEXT:    [[D38:%.*]] = add nuw nsw i64 undef, 1
; CHECK-NEXT:    [[D39:%.*]] = getelementptr inbounds i8, i8* undef, i64 [[D38]]
; CHECK-NEXT:    store i8 [[D37]], i8* [[D39]], align 1
; CHECK-NEXT:    [[D40:%.*]] = add nuw nsw i64 undef, 1
; CHECK-NEXT:    [[D41:%.*]] = getelementptr inbounds [512 x i8], [512 x i8]* @input_buf, i64 0, i64 [[D40]]
; CHECK-NEXT:    [[D42]] = load i8, i8* [[D41]], align 1
; CHECK-NEXT:    [[D43:%.*]] = xor i8 [[D42]], [[D31]]
; CHECK-NEXT:    [[D44:%.*]] = xor i8 [[D43]], [[D27]]
; CHECK-NEXT:    [[D45:%.*]] = xor i8 [[D44]], [[D28]]
; CHECK-NEXT:    [[D46:%.*]] = add nuw nsw i64 undef, 2
; CHECK-NEXT:    [[D47:%.*]] = getelementptr inbounds i8, i8* undef, i64 [[D46]]
; CHECK-NEXT:    store i8 [[D45]], i8* [[D47]], align 1
; CHECK-NEXT:    [[D48:%.*]] = xor i8 [[D42]], [[D27]]
; CHECK-NEXT:    [[D49:%.*]] = xor i8 [[D48]], [[D28]]
; CHECK-NEXT:    [[D50:%.*]] = add nuw nsw i64 undef, 3
; CHECK-NEXT:    [[D51:%.*]] = getelementptr inbounds i8, i8* undef, i64 [[D50]]
; CHECK-NEXT:    store i8 [[D49]], i8* [[D51]], align 1
; CHECK-NEXT:    [[D52:%.*]] = add nuw nsw i64 undef, 2
; CHECK-NEXT:    [[D53:%.*]] = getelementptr inbounds [512 x i8], [512 x i8]* @input_buf, i64 0, i64 [[D52]]
; CHECK-NEXT:    [[D54]] = load i8, i8* [[D53]], align 2
; CHECK-NEXT:    [[D55:%.*]] = xor i8 undef, [[D31]]
; CHECK-NEXT:    [[D56:%.*]] = xor i8 [[D55]], [[D27]]
; CHECK-NEXT:    [[D57:%.*]] = add nuw nsw i64 undef, 4
; CHECK-NEXT:    [[D58:%.*]] = getelementptr inbounds i8, i8* undef, i64 [[D57]]
; CHECK-NEXT:    store i8 [[D56]], i8* [[D58]], align 1
; CHECK-NEXT:    [[D59:%.*]] = xor i8 [[D54]], [[D31]]
; CHECK-NEXT:    [[D60:%.*]] = xor i8 [[D59]], [[D27]]
; CHECK-NEXT:    [[D61:%.*]] = add nuw nsw i64 undef, 5
; CHECK-NEXT:    [[D62:%.*]] = getelementptr inbounds i8, i8* undef, i64 [[D61]]
; CHECK-NEXT:    store i8 [[D60]], i8* [[D62]], align 1
; CHECK-NEXT:    [[D63:%.*]] = add nuw nsw i64 undef, 3
; CHECK-NEXT:    [[D64:%.*]] = getelementptr inbounds [512 x i8], [512 x i8]* @input_buf, i64 0, i64 [[D63]]
; CHECK-NEXT:    [[D65]] = load i8, i8* [[D64]], align 1
; CHECK-NEXT:    [[D66:%.*]] = xor i8 [[D65]], [[D54]]
; CHECK-NEXT:    [[D67:%.*]] = xor i8 [[D66]], [[D42]]
; CHECK-NEXT:    [[D68:%.*]] = xor i8 [[D67]], [[D31]]
; CHECK-NEXT:    [[D69:%.*]] = add nuw nsw i64 undef, 6
; CHECK-NEXT:    [[D70:%.*]] = getelementptr inbounds i8, i8* undef, i64 [[D69]]
; CHECK-NEXT:    store i8 [[D68]], i8* [[D70]], align 1
; CHECK-NEXT:    [[D71:%.*]] = xor i8 [[D65]], [[D42]]
; CHECK-NEXT:    [[D72:%.*]] = xor i8 [[D71]], [[D31]]
; CHECK-NEXT:    [[D73:%.*]] = add nuw nsw i64 undef, 7
; CHECK-NEXT:    [[D74:%.*]] = getelementptr inbounds i8, i8* undef, i64 [[D73]]
; CHECK-NEXT:    store i8 [[D72]], i8* [[D74]], align 1
; CHECK-NEXT:    br i1 undef, label [[EXIT:%.*]], label [[LOOP]]
; CHECK:       exit:
; CHECK-NEXT:    ret void
;
; FORCE-VECT-LABEL: @foo(
; FORCE-VECT-NEXT:  entry:
; FORCE-VECT-NEXT:    br label [[LOOP:%.*]]
; FORCE-VECT:       loop:
; FORCE-VECT-NEXT:    [[D27:%.*]] = phi i8 [ [[D65:%.*]], [[LOOP]] ], [ 0, [[ENTRY:%.*]] ]
; FORCE-VECT-NEXT:    [[TMP0:%.*]] = phi <2 x i8> [ [[TMP2:%.*]], [[LOOP]] ], [ zeroinitializer, [[ENTRY]] ]
; FORCE-VECT-NEXT:    [[D30:%.*]] = getelementptr inbounds [512 x i8], [512 x i8]* @input_buf, i64 0, i64 undef
; FORCE-VECT-NEXT:    [[D31:%.*]] = load i8, i8* [[D30]], align 4
; FORCE-VECT-NEXT:    [[D32:%.*]] = xor i8 [[D31]], [[D27]]
; FORCE-VECT-NEXT:    [[D35:%.*]] = getelementptr inbounds i8, i8* undef, i64 undef
; FORCE-VECT-NEXT:    [[D40:%.*]] = add nuw nsw i64 undef, 1
; FORCE-VECT-NEXT:    [[D41:%.*]] = getelementptr inbounds [512 x i8], [512 x i8]* @input_buf, i64 0, i64 [[D40]]
; FORCE-VECT-NEXT:    [[TMP1:%.*]] = bitcast i8* [[D41]] to <2 x i8>*
; FORCE-VECT-NEXT:    [[TMP2]] = load <2 x i8>, <2 x i8>* [[TMP1]], align 1
; FORCE-VECT-NEXT:    [[TMP3:%.*]] = extractelement <2 x i8> [[TMP2]], i32 0
; FORCE-VECT-NEXT:    [[D43:%.*]] = xor i8 [[TMP3]], [[D31]]
; FORCE-VECT-NEXT:    [[D63:%.*]] = add nuw nsw i64 undef, 3
; FORCE-VECT-NEXT:    [[D64:%.*]] = getelementptr inbounds [512 x i8], [512 x i8]* @input_buf, i64 0, i64 [[D63]]
; FORCE-VECT-NEXT:    [[D65]] = load i8, i8* [[D64]], align 1
; FORCE-VECT-NEXT:    [[TMP4:%.*]] = extractelement <2 x i8> [[TMP2]], i32 1
; FORCE-VECT-NEXT:    [[D66:%.*]] = xor i8 [[D65]], [[TMP4]]
; FORCE-VECT-NEXT:    [[TMP5:%.*]] = insertelement <8 x i8> <i8 poison, i8 poison, i8 poison, i8 poison, i8 undef, i8 poison, i8 poison, i8 poison>, i8 [[D32]], i32 0
; FORCE-VECT-NEXT:    [[TMP6:%.*]] = insertelement <8 x i8> [[TMP5]], i8 [[D31]], i32 1
; FORCE-VECT-NEXT:    [[TMP7:%.*]] = insertelement <8 x i8> [[TMP6]], i8 [[D43]], i32 2
; FORCE-VECT-NEXT:    [[TMP8:%.*]] = insertelement <8 x i8> [[TMP7]], i8 [[D27]], i32 3
<<<<<<< HEAD
; FORCE-VECT-NEXT:    [[TMP9:%.*]] = insertelement <8 x i8> [[TMP8]], i8 [[D66]], i32 6
; FORCE-VECT-NEXT:    [[TMP10:%.*]] = shufflevector <2 x i8> [[TMP2]], <2 x i8> poison, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
; FORCE-VECT-NEXT:    [[TMP11:%.*]] = shufflevector <8 x i8> [[TMP9]], <8 x i8> [[TMP10]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 undef, i32 6, i32 8>
; FORCE-VECT-NEXT:    [[TMP12:%.*]] = shufflevector <8 x i8> [[TMP11]], <8 x i8> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 1, i32 6, i32 7>
; FORCE-VECT-NEXT:    [[TMP13:%.*]] = shufflevector <2 x i8> [[TMP0]], <2 x i8> [[TMP2]], <8 x i32> <i32 1, i32 undef, i32 undef, i32 2, i32 undef, i32 3, i32 undef, i32 undef>
; FORCE-VECT-NEXT:    [[TMP14:%.*]] = insertelement <8 x i8> [[TMP13]], i8 [[D27]], i32 2
; FORCE-VECT-NEXT:    [[TMP15:%.*]] = insertelement <8 x i8> [[TMP14]], i8 [[D31]], i32 4
; FORCE-VECT-NEXT:    [[TMP16:%.*]] = insertelement <8 x i8> [[TMP15]], i8 [[D65]], i32 7
; FORCE-VECT-NEXT:    [[TMP17:%.*]] = shufflevector <8 x i8> [[TMP16]], <8 x i8> poison, <8 x i32> <i32 0, i32 0, i32 2, i32 3, i32 4, i32 5, i32 3, i32 7>
; FORCE-VECT-NEXT:    [[TMP18:%.*]] = xor <8 x i8> [[TMP12]], [[TMP17]]
; FORCE-VECT-NEXT:    [[TMP19:%.*]] = shufflevector <2 x i8> [[TMP0]], <2 x i8> poison, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
; FORCE-VECT-NEXT:    [[TMP20:%.*]] = insertelement <8 x i8> [[TMP19]], i8 [[D27]], i32 2
; FORCE-VECT-NEXT:    [[TMP21:%.*]] = insertelement <8 x i8> [[TMP20]], i8 [[D31]], i32 3
; FORCE-VECT-NEXT:    [[TMP22:%.*]] = shufflevector <8 x i8> [[TMP21]], <8 x i8> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
; FORCE-VECT-NEXT:    [[TMP23:%.*]] = xor <8 x i8> [[TMP18]], [[TMP22]]
; FORCE-VECT-NEXT:    [[TMP24:%.*]] = bitcast i8* [[D35]] to <8 x i8>*
; FORCE-VECT-NEXT:    store <8 x i8> [[TMP23]], <8 x i8>* [[TMP24]], align 1
=======
; FORCE-VECT-NEXT:    [[TMP9:%.*]] = insertelement <8 x i8> [[TMP8]], i8 [[D31]], i32 5
; FORCE-VECT-NEXT:    [[TMP10:%.*]] = insertelement <8 x i8> [[TMP9]], i8 [[D66]], i32 6
; FORCE-VECT-NEXT:    [[TMP11:%.*]] = shufflevector <2 x i8> [[TMP2]], <2 x i8> poison, <8 x i32> <i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
; FORCE-VECT-NEXT:    [[TMP12:%.*]] = shufflevector <8 x i8> [[TMP10]], <8 x i8> [[TMP11]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>
; FORCE-VECT-NEXT:    [[TMP13:%.*]] = shufflevector <2 x i8> [[TMP0]], <2 x i8> [[TMP2]], <8 x i32> <i32 1, i32 1, i32 undef, i32 2, i32 undef, i32 3, i32 2, i32 undef>
; FORCE-VECT-NEXT:    [[TMP14:%.*]] = insertelement <8 x i8> [[TMP13]], i8 [[D27]], i32 2
; FORCE-VECT-NEXT:    [[TMP15:%.*]] = insertelement <8 x i8> [[TMP14]], i8 [[D31]], i32 4
; FORCE-VECT-NEXT:    [[TMP16:%.*]] = insertelement <8 x i8> [[TMP15]], i8 [[D65]], i32 7
; FORCE-VECT-NEXT:    [[TMP17:%.*]] = xor <8 x i8> [[TMP12]], [[TMP16]]
; FORCE-VECT-NEXT:    [[TMP18:%.*]] = shufflevector <2 x i8> [[TMP0]], <2 x i8> poison, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
; FORCE-VECT-NEXT:    [[TMP19:%.*]] = insertelement <8 x i8> [[TMP18]], i8 [[D27]], i32 2
; FORCE-VECT-NEXT:    [[TMP20:%.*]] = insertelement <8 x i8> [[TMP19]], i8 [[D31]], i32 3
; FORCE-VECT-NEXT:    [[SHUFFLE:%.*]] = shufflevector <8 x i8> [[TMP20]], <8 x i8> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
; FORCE-VECT-NEXT:    [[TMP21:%.*]] = xor <8 x i8> [[TMP17]], [[SHUFFLE]]
; FORCE-VECT-NEXT:    [[TMP22:%.*]] = bitcast i8* [[D35]] to <8 x i8>*
; FORCE-VECT-NEXT:    store <8 x i8> [[TMP21]], <8 x i8>* [[TMP22]], align 1
>>>>>>> 2786950f2a4191d1b6a229c3abc1cc066b2c3e01
; FORCE-VECT-NEXT:    br i1 undef, label [[EXIT:%.*]], label [[LOOP]]
; FORCE-VECT:       exit:
; FORCE-VECT-NEXT:    ret void
;
entry:
  br label %loop

loop:
  %d27 = phi i8 [ %d65, %loop ], [ 0, %entry ]
  %d28 = phi i8 [ %d54, %loop ], [ 0, %entry ]
  %d29 = phi i8 [ %d42, %loop ], [ 0, %entry ]
  %d30 = getelementptr inbounds [512 x i8], [512 x i8]* @input_buf, i64 0, i64 undef
  %d31 = load i8, i8* %d30, align 4
  %d32 = xor i8 %d31, %d27
  %d33 = xor i8 %d32, %d28
  %d34 = xor i8 %d33, %d29
  %d35 = getelementptr inbounds i8, i8* undef, i64 undef
  store i8 %d34, i8* %d35, align 1
  %d36 = xor i8 %d31, %d28
  %d37 = xor i8 %d36, %d29
  %d38 = add nuw nsw i64 undef, 1
  %d39 = getelementptr inbounds i8, i8* undef, i64 %d38
  store i8 %d37, i8* %d39, align 1
  %d40 = add nuw nsw i64 undef, 1
  %d41 = getelementptr inbounds [512 x i8], [512 x i8]* @input_buf, i64 0, i64 %d40
  %d42 = load i8, i8* %d41, align 1
  %d43 = xor i8 %d42, %d31
  %d44 = xor i8 %d43, %d27
  %d45 = xor i8 %d44, %d28
  %d46 = add nuw nsw i64 undef, 2
  %d47 = getelementptr inbounds i8, i8* undef, i64 %d46
  store i8 %d45, i8* %d47, align 1
  %d48 = xor i8 %d42, %d27
  %d49 = xor i8 %d48, %d28
  %d50 = add nuw nsw i64 undef, 3
  %d51 = getelementptr inbounds i8, i8* undef, i64 %d50
  store i8 %d49, i8* %d51, align 1
  %d52 = add nuw nsw i64 undef, 2
  %d53 = getelementptr inbounds [512 x i8], [512 x i8]* @input_buf, i64 0, i64 %d52
  %d54 = load i8, i8* %d53, align 2
  %d55 = xor i8 undef, %d31
  %d56 = xor i8 %d55, %d27
  %d57 = add nuw nsw i64 undef, 4
  %d58 = getelementptr inbounds i8, i8* undef, i64 %d57
  store i8 %d56, i8* %d58, align 1
  %d59 = xor i8 %d54, %d31
  %d60 = xor i8 %d59, %d27
  %d61 = add nuw nsw i64 undef, 5
  %d62 = getelementptr inbounds i8, i8* undef, i64 %d61
  store i8 %d60, i8* %d62, align 1
  %d63 = add nuw nsw i64 undef, 3
  %d64 = getelementptr inbounds [512 x i8], [512 x i8]* @input_buf, i64 0, i64 %d63
  %d65 = load i8, i8* %d64, align 1
  %d66 = xor i8 %d65, %d54
  %d67 = xor i8 %d66, %d42
  %d68 = xor i8 %d67, %d31
  %d69 = add nuw nsw i64 undef, 6
  %d70 = getelementptr inbounds i8, i8* undef, i64 %d69
  store i8 %d68, i8* %d70, align 1
  %d71 = xor i8 %d65, %d42
  %d72 = xor i8 %d71, %d31
  %d73 = add nuw nsw i64 undef, 7
  %d74 = getelementptr inbounds i8, i8* undef, i64 %d73
  store i8 %d72, i8* %d74, align 1
  br i1 undef, label %exit, label %loop

exit:
  ret void
}
