; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt %s -passes=slp-vectorizer -enable-intel-advanced-opts -slp-multinode -mcpu=broadwell -S | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; CMPLRLLVM-21660
; The following Multi-node was built:
;         op0 op1       op0,op1 are MN leaves that not yet put into vectorizable tree
;        +--\-/-+
;        |  TE3 | (TE2)  TE2 is a TreeEntry but not a MN leaf because VL is different.
;        |     \ / --+
;        |     TE1   |   TE1 and TE3 are MN trunk elements with TE1 root.
;        +-----------+
;               |
;              TE0
; Note that tree entry TE2 is not a part of the MN while 1 and 3 are.
; Crash was caused due to assumtion that MN trunk elements are adjucent in vectorizable tree.
;
; Function Attrs: nofree norecurse nounwind uwtable
define dso_local <4 x i64> @test(i32 %i8, i64 %val, i32 %i, i32 %i5, i32 %i26, i32 %i49, i32 %i33, i32 %i34) {
; CHECK-LABEL: @test(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = insertelement <4 x i32> poison, i32 [[I8:%.*]], i32 0
; CHECK-NEXT:    [[TMP1:%.*]] = insertelement <4 x i32> [[TMP0]], i32 [[I34:%.*]], i32 1
; CHECK-NEXT:    [[SHUFFLE1:%.*]] = shufflevector <4 x i32> [[TMP1]], <4 x i32> poison, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
; CHECK-NEXT:    [[TMP2:%.*]] = shl <4 x i32> [[SHUFFLE1]], <i32 1, i32 3, i32 2, i32 7>
; CHECK-NEXT:    [[TMP3:%.*]] = mul <4 x i32> [[SHUFFLE1]], <i32 1, i32 3, i32 2, i32 7>
; CHECK-NEXT:    [[TMP4:%.*]] = shufflevector <4 x i32> [[TMP2]], <4 x i32> [[TMP3]], <4 x i32> <i32 0, i32 5, i32 2, i32 7>
; CHECK-NEXT:    [[I2:%.*]] = trunc i64 [[VAL:%.*]] to i32
; CHECK-NEXT:    [[I23:%.*]] = add i32 [[I5:%.*]], [[I33:%.*]]
; CHECK-NEXT:    [[I30:%.*]] = srem i32 [[I26:%.*]], [[I:%.*]]
; CHECK-NEXT:    [[TMP5:%.*]] = insertelement <4 x i32> poison, i32 [[I49:%.*]], i32 1
; CHECK-NEXT:    [[TMP6:%.*]] = insertelement <4 x i32> [[TMP5]], i32 [[I2]], i32 0
; CHECK-NEXT:    [[SHUFFLE2:%.*]] = shufflevector <4 x i32> [[TMP6]], <4 x i32> poison, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
; CHECK-NEXT:    [[TMP7:%.*]] = add <4 x i32> [[TMP4]], [[SHUFFLE2]]
; CHECK-NEXT:    [[TMP8:%.*]] = insertelement <4 x i32> poison, i32 [[I23]], i32 0
; CHECK-NEXT:    [[TMP9:%.*]] = insertelement <4 x i32> [[TMP8]], i32 [[I30]], i32 1
; CHECK-NEXT:    [[SHUFFLE:%.*]] = shufflevector <4 x i32> [[TMP9]], <4 x i32> poison, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
; CHECK-NEXT:    [[TMP10:%.*]] = add <4 x i32> [[SHUFFLE]], [[TMP7]]
; CHECK-NEXT:    [[TMP11:%.*]] = sext <4 x i32> [[TMP10]] to <4 x i64>
; CHECK-NEXT:    ret <4 x i64> [[TMP11]]
;
entry:
  %mul283 = shl i32 %i8, 1
  %mul289 = mul i32 %i8, 3
  %mul295 = shl i32 %i8, 2

  %i2 = trunc i64 %val to i32
  %i35 = mul i32 %i34, 7

  %i38 = add i32 %mul283, %i2
  %i42 = add i32 %mul289, %i2
  %i46 = add i32 %mul295, %i2
  %i50 = add i32 %i49, %i35

  %i23 = add i32 %i5, %i33
  %i30 = srem i32 %i26, %i

  %i90 = add i32 %i23, %i38
  %i88 = add i32 %i23, %i42
  %i86 = add i32 %i23, %i46
  %i51 = add i32 %i50, %i30

  %i39 = sext i32 %i90 to i64
  %i43 = sext i32 %i88 to i64
  %i47 = sext i32 %i86 to i64
  %i52 = sext i32 %i51 to i64

  %ra = insertelement <4 x i64> undef, i64 %i39, i32 0
  %rb = insertelement <4 x i64> %ra, i64 %i43, i32 1
  %rc = insertelement <4 x i64> %rb, i64 %i47, i32 2
  %rd = insertelement <4 x i64> %rc, i64 %i52, i32 3
  ret <4 x i64> %rd
}

