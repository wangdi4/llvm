; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -passes="instcombine,slp-vectorizer"  -enable-intel-advanced-opts -slp-multinode -mtriple=x86_64 -mcpu=skylake-avx512 -S | FileCheck %s
; RUN: opt < %s -passes=slp-vectorizer -enable-intel-advanced-opts -slp-multinode -mtriple=x86_64 -mcpu=skylake-avx512 -S | FileCheck %s --check-prefixes=CHECKWOIC

; The test case is basically a shrink of slp_x264_16x16_nary.ll to show case x264 test pattern
; sensitive to instcombine add/sub expressions reassociating transforms.
; The code expected to be vectorized.
define i32 @x264_pixel_satd_16x16(ptr noalias nocapture readonly %pix1, i32 %i_pix1, ptr noalias nocapture readonly %pix2, i32 %i_pix2, ptr noalias nocapture %R) {
; CHECK-LABEL: define {{[^@]+}}@x264_pixel_satd_16x16(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[IDX_EXT_I:%.*]] = sext i32 [[I_PIX1:%.*]] to i64
; CHECK-NEXT:    [[IDX_EXT63_I:%.*]] = sext i32 [[I_PIX2:%.*]] to i64
; CHECK-NEXT:    br label [[LOOP_1247:%.*]]
; CHECK:       loop.1247:
; CHECK-NEXT:    [[I1_I64_0:%.*]] = phi i64 [ 0, [[ENTRY:%.*]] ], [ [[NEXTIVLOOP_1247:%.*]], [[LOOP_1247]] ]
; CHECK-NEXT:    [[I:%.*]] = mul i64 [[I1_I64_0]], [[IDX_EXT_I]]
; CHECK-NEXT:    [[GEP:%.*]] = getelementptr inbounds i8, ptr [[PIX1:%.*]], i64 [[I]]
; CHECK-NEXT:    [[I1:%.*]] = mul i64 [[I1_I64_0]], [[IDX_EXT63_I]]
; CHECK-NEXT:    [[GEP013:%.*]] = getelementptr inbounds i8, ptr [[PIX2:%.*]], i64 [[I1]]
; CHECK-NEXT:    [[I2:%.*]] = add i64 [[I]], 4
; CHECK-NEXT:    [[GEP015:%.*]] = getelementptr inbounds i8, ptr [[PIX1]], i64 [[I2]]
; CHECK-NEXT:    [[I3:%.*]] = add i64 [[I1]], 4
; CHECK-NEXT:    [[GEP017:%.*]] = getelementptr inbounds i8, ptr [[PIX2]], i64 [[I3]]
; CHECK-NEXT:    [[GEP043:%.*]] = getelementptr inbounds [16 x [8 x i32]], ptr [[R:%.*]], i64 0, i64 [[I1_I64_0]], i64 0
; CHECK-NEXT:    [[TMP0:%.*]] = load <4 x i8>, ptr [[GEP]], align 1
; CHECK-NEXT:    [[TMP1:%.*]] = load <4 x i8>, ptr [[GEP013]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load <4 x i8>, ptr [[GEP015]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = load <4 x i8>, ptr [[GEP017]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = zext <4 x i8> [[TMP0]] to <4 x i32>
; CHECK-NEXT:    [[TMP5:%.*]] = zext <4 x i8> [[TMP3]] to <4 x i32>
; CHECK-NEXT:    [[TMP6:%.*]] = zext <4 x i8> [[TMP1]] to <4 x i32>
; CHECK-NEXT:    [[TMP7:%.*]] = zext <4 x i8> [[TMP2]] to <4 x i32>
; CHECK-NEXT:    [[TMP8:%.*]] = shl nuw nsw <4 x i32> [[TMP5]], <i32 16, i32 16, i32 16, i32 16>
; CHECK-NEXT:    [[TMP9:%.*]] = shl nuw nsw <4 x i32> [[TMP7]], <i32 16, i32 16, i32 16, i32 16>
; CHECK-NEXT:    [[TMP10:%.*]] = or <4 x i32> [[TMP8]], [[TMP6]]
; CHECK-NEXT:    [[TMP11:%.*]] = sub nsw <4 x i32> [[TMP9]], [[TMP10]]
; CHECK-NEXT:    [[TMP12:%.*]] = add nsw <4 x i32> [[TMP11]], [[TMP4]]
; CHECK-NEXT:    [[TMP13:%.*]] = shufflevector <4 x i32> [[TMP12]], <4 x i32> poison, <4 x i32> <i32 1, i32 0, i32 undef, i32 undef>
; CHECK-NEXT:    [[SHUFFLE:%.*]] = shufflevector <4 x i32> [[TMP13]], <4 x i32> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 0>
; CHECK-NEXT:    [[TMP14:%.*]] = add <4 x i32> [[SHUFFLE]], [[TMP12]]
; CHECK-NEXT:    [[TMP15:%.*]] = sub <4 x i32> [[SHUFFLE]], [[TMP12]]
; CHECK-NEXT:    [[TMP16:%.*]] = shufflevector <4 x i32> [[TMP14]], <4 x i32> [[TMP15]], <4 x i32> <i32 3, i32 2, i32 4, i32 1>
; CHECK-NEXT:    [[TMP17:%.*]] = shufflevector <4 x i32> [[TMP12]], <4 x i32> poison, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
; CHECK-NEXT:    [[SHUFFLE1:%.*]] = shufflevector <4 x i32> [[TMP17]], <4 x i32> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 0>
; CHECK-NEXT:    [[TMP18:%.*]] = add <4 x i32> [[TMP16]], [[SHUFFLE1]]
; CHECK-NEXT:    [[TMP19:%.*]] = sub <4 x i32> [[TMP16]], [[SHUFFLE1]]
; CHECK-NEXT:    [[TMP20:%.*]] = shufflevector <4 x i32> [[TMP18]], <4 x i32> [[TMP19]], <4 x i32> <i32 0, i32 5, i32 6, i32 7>
; CHECK-NEXT:    [[TMP21:%.*]] = add <4 x i32> [[TMP20]], [[TMP12]]
; CHECK-NEXT:    [[TMP22:%.*]] = sub <4 x i32> [[TMP20]], [[TMP12]]
; CHECK-NEXT:    [[TMP23:%.*]] = shufflevector <4 x i32> [[TMP21]], <4 x i32> [[TMP22]], <4 x i32> <i32 0, i32 5, i32 6, i32 3>
; CHECK-NEXT:    store <4 x i32> [[TMP23]], ptr [[GEP043]], align 4
; CHECK-NEXT:    [[NEXTIVLOOP_1247]] = add nuw nsw i64 [[I1_I64_0]], 1
; CHECK-NEXT:    [[CONDLOOP_1247:%.*]] = icmp ult i64 [[I1_I64_0]], 15
; CHECK-NEXT:    br i1 [[CONDLOOP_1247]], label [[LOOP_1247]], label [[AFTERLOOP_1247:%.*]]
; CHECK:       afterloop.1247:
; CHECK-NEXT:    ret i32 0
;
; CHECKWOIC-LABEL: define {{[^@]+}}@x264_pixel_satd_16x16(
; CHECKWOIC-NEXT:  entry:
; CHECKWOIC-NEXT:    [[IDX_EXT_I:%.*]] = sext i32 [[I_PIX1:%.*]] to i64
; CHECKWOIC-NEXT:    [[IDX_EXT63_I:%.*]] = sext i32 [[I_PIX2:%.*]] to i64
; CHECKWOIC-NEXT:    br label [[LOOP_1247:%.*]]
; CHECKWOIC:       loop.1247:
; CHECKWOIC-NEXT:    [[I1_I64_0:%.*]] = phi i64 [ 0, [[ENTRY:%.*]] ], [ [[NEXTIVLOOP_1247:%.*]], [[LOOP_1247]] ]
; CHECKWOIC-NEXT:    [[I:%.*]] = mul i64 [[I1_I64_0]], [[IDX_EXT_I]]
; CHECKWOIC-NEXT:    [[GEP:%.*]] = getelementptr inbounds i8, ptr [[PIX1:%.*]], i64 [[I]]
; CHECKWOIC-NEXT:    [[I1:%.*]] = mul i64 [[I1_I64_0]], [[IDX_EXT63_I]]
; CHECKWOIC-NEXT:    [[GEP013:%.*]] = getelementptr inbounds i8, ptr [[PIX2:%.*]], i64 [[I1]]
; CHECKWOIC-NEXT:    [[I2:%.*]] = add i64 [[I]], 4
; CHECKWOIC-NEXT:    [[GEP015:%.*]] = getelementptr inbounds i8, ptr [[PIX1]], i64 [[I2]]
; CHECKWOIC-NEXT:    [[I3:%.*]] = add i64 [[I1]], 4
; CHECKWOIC-NEXT:    [[GEP017:%.*]] = getelementptr inbounds i8, ptr [[PIX2]], i64 [[I3]]
; CHECKWOIC-NEXT:    [[GEP043:%.*]] = getelementptr inbounds [16 x [8 x i32]], ptr [[R:%.*]], i64 0, i64 [[I1_I64_0]], i64 0
; CHECKWOIC-NEXT:    [[TMP0:%.*]] = load <4 x i8>, ptr [[GEP]], align 1
; CHECKWOIC-NEXT:    [[TMP1:%.*]] = load <4 x i8>, ptr [[GEP013]], align 1
; CHECKWOIC-NEXT:    [[TMP2:%.*]] = load <4 x i8>, ptr [[GEP015]], align 1
; CHECKWOIC-NEXT:    [[TMP3:%.*]] = load <4 x i8>, ptr [[GEP017]], align 1
; CHECKWOIC-NEXT:    [[TMP4:%.*]] = zext <4 x i8> [[TMP0]] to <4 x i32>
; CHECKWOIC-NEXT:    [[TMP5:%.*]] = zext <4 x i8> [[TMP3]] to <4 x i32>
; CHECKWOIC-NEXT:    [[TMP6:%.*]] = zext <4 x i8> [[TMP1]] to <4 x i32>
; CHECKWOIC-NEXT:    [[TMP7:%.*]] = zext <4 x i8> [[TMP2]] to <4 x i32>
; CHECKWOIC-NEXT:    [[TMP8:%.*]] = shl <4 x i32> [[TMP5]], <i32 16, i32 16, i32 16, i32 16>
; CHECKWOIC-NEXT:    [[TMP9:%.*]] = shl <4 x i32> [[TMP7]], <i32 16, i32 16, i32 16, i32 16>
; CHECKWOIC-NEXT:    [[TMP10:%.*]] = sub <4 x i32> [[TMP9]], [[TMP6]]
; CHECKWOIC-NEXT:    [[TMP11:%.*]] = sub <4 x i32> [[TMP10]], [[TMP8]]
; CHECKWOIC-NEXT:    [[TMP12:%.*]] = add <4 x i32> [[TMP11]], [[TMP4]]
; CHECKWOIC-NEXT:    [[TMP13:%.*]] = shufflevector <4 x i32> [[TMP12]], <4 x i32> poison, <4 x i32> <i32 1, i32 0, i32 undef, i32 undef>
; CHECKWOIC-NEXT:    [[SHUFFLE:%.*]] = shufflevector <4 x i32> [[TMP13]], <4 x i32> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 0>
; CHECKWOIC-NEXT:    [[TMP14:%.*]] = add <4 x i32> [[SHUFFLE]], [[TMP12]]
; CHECKWOIC-NEXT:    [[TMP15:%.*]] = sub <4 x i32> [[SHUFFLE]], [[TMP12]]
; CHECKWOIC-NEXT:    [[TMP16:%.*]] = shufflevector <4 x i32> [[TMP14]], <4 x i32> [[TMP15]], <4 x i32> <i32 3, i32 2, i32 4, i32 1>
; CHECKWOIC-NEXT:    [[TMP17:%.*]] = shufflevector <4 x i32> [[TMP12]], <4 x i32> poison, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
; CHECKWOIC-NEXT:    [[SHUFFLE1:%.*]] = shufflevector <4 x i32> [[TMP17]], <4 x i32> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 0>
; CHECKWOIC-NEXT:    [[TMP18:%.*]] = add <4 x i32> [[TMP16]], [[SHUFFLE1]]
; CHECKWOIC-NEXT:    [[TMP19:%.*]] = sub <4 x i32> [[TMP16]], [[SHUFFLE1]]
; CHECKWOIC-NEXT:    [[TMP20:%.*]] = shufflevector <4 x i32> [[TMP18]], <4 x i32> [[TMP19]], <4 x i32> <i32 0, i32 5, i32 6, i32 7>
; CHECKWOIC-NEXT:    [[TMP21:%.*]] = add <4 x i32> [[TMP20]], [[TMP12]]
; CHECKWOIC-NEXT:    [[TMP22:%.*]] = sub <4 x i32> [[TMP20]], [[TMP12]]
; CHECKWOIC-NEXT:    [[TMP23:%.*]] = shufflevector <4 x i32> [[TMP21]], <4 x i32> [[TMP22]], <4 x i32> <i32 0, i32 5, i32 6, i32 3>
; CHECKWOIC-NEXT:    store <4 x i32> [[TMP23]], ptr [[GEP043]], align 4
; CHECKWOIC-NEXT:    [[NEXTIVLOOP_1247]] = add nuw nsw i64 [[I1_I64_0]], 1
; CHECKWOIC-NEXT:    [[CONDLOOP_1247:%.*]] = icmp ult i64 [[NEXTIVLOOP_1247]], 16
; CHECKWOIC-NEXT:    br i1 [[CONDLOOP_1247]], label [[LOOP_1247]], label [[AFTERLOOP_1247:%.*]]
; CHECKWOIC:       afterloop.1247:
; CHECKWOIC-NEXT:    ret i32 0
;
entry:
  %idx.ext.i = sext i32 %i_pix1 to i64
  %idx.ext63.i = sext i32 %i_pix2 to i64
  br label %loop.1247

loop.1247:                                        ; preds = %loop.1247, %entry
  %i1.i64.0 = phi i64 [ 0, %entry ], [ %nextivloop.1247, %loop.1247 ]
  %i = mul i64 %i1.i64.0, %idx.ext.i
  %gep = getelementptr inbounds i8, ptr %pix1, i64 %i
  %load00 = load i8, ptr %gep, align 1
  %i1 = mul i64 %i1.i64.0, %idx.ext63.i
  %gep013 = getelementptr inbounds i8, ptr %pix2, i64 %i1
  %load014 = load i8, ptr %gep013, align 1
  %i2 = add i64 %i, 4
  %gep015 = getelementptr inbounds i8, ptr %pix1, i64 %i2
  %load016 = load i8, ptr %gep015, align 1
  %i3 = add i64 %i1, 4
  %gep017 = getelementptr inbounds i8, ptr %pix2, i64 %i3
  %load018 = load i8, ptr %gep017, align 1
  %i4 = add i64 %i, 1
  %gep019 = getelementptr inbounds i8, ptr %pix1, i64 %i4
  %load020 = load i8, ptr %gep019, align 1
  %i5 = add i64 %i1, 1
  %gep021 = getelementptr inbounds i8, ptr %pix2, i64 %i5
  %load022 = load i8, ptr %gep021, align 1
  %i6 = add i64 %i, 5
  %gep023 = getelementptr inbounds i8, ptr %pix1, i64 %i6
  %load024 = load i8, ptr %gep023, align 1
  %i7 = add i64 %i1, 5
  %gep025 = getelementptr inbounds i8, ptr %pix2, i64 %i7
  %load026 = load i8, ptr %gep025, align 1
  %i8 = add i64 %i, 2
  %gep027 = getelementptr inbounds i8, ptr %pix1, i64 %i8
  %load028 = load i8, ptr %gep027, align 1
  %i9 = add i64 %i1, 2
  %gep029 = getelementptr inbounds i8, ptr %pix2, i64 %i9
  %load030 = load i8, ptr %gep029, align 1
  %i10 = add i64 %i, 6
  %gep031 = getelementptr inbounds i8, ptr %pix1, i64 %i10
  %load032 = load i8, ptr %gep031, align 1
  %i11 = add i64 %i1, 6
  %gep033 = getelementptr inbounds i8, ptr %pix2, i64 %i11
  %load034 = load i8, ptr %gep033, align 1
  %i12 = add i64 %i, 3
  %gep035 = getelementptr inbounds i8, ptr %pix1, i64 %i12
  %load036 = load i8, ptr %gep035, align 1
  %i13 = add i64 %i1, 3
  %gep037 = getelementptr inbounds i8, ptr %pix2, i64 %i13
  %load038 = load i8, ptr %gep037, align 1
  %i14 = add i64 %i, 7
  %gep039 = getelementptr inbounds i8, ptr %pix1, i64 %i14
  %load040 = load i8, ptr %gep039, align 1
  %i15 = add i64 %i1, 7
  %gep041 = getelementptr inbounds i8, ptr %pix2, i64 %i15
  %load042 = load i8, ptr %gep041, align 1
  %i16 = zext i8 %load036 to i32
  %i17 = zext i8 %load028 to i32
  %i18 = zext i8 %load020 to i32
  %i19 = zext i8 %load00 to i32
  %i20 = zext i8 %load042 to i32
  %i21 = zext i8 %load034 to i32
  %i22 = zext i8 %load026 to i32
  %i23 = zext i8 %load018 to i32
  %i24 = zext i8 %load038 to i32
  %i25 = zext i8 %load030 to i32
  %i26 = zext i8 %load022 to i32
  %i27 = zext i8 %load014 to i32
  %i28 = zext i8 %load040 to i32
  %i29 = zext i8 %load032 to i32
  %i30 = zext i8 %load024 to i32
  %i31 = zext i8 %load016 to i32
  %i32 = shl i32 %i20, 16
  %i33 = shl i32 %i21, 16
  %i34 = shl i32 %i22, 16
  %i35 = shl i32 %i23, 16
  %i36 = shl i32 %i28, 16
  %i37 = shl i32 %i29, 16
  %i38 = shl i32 %i30, 16
  %i39 = shl i32 %i31, 16
  %N1 = sub i32 %i36, %i24
  %N2 = sub i32 %N1, %i32
  %N3 = add i32 %N2, %i16
  %N4 = sub i32 %i37, %i25
  %N5 = sub i32 %N4, %i33
  %N6 = add i32 %N5, %i17
  %N7 = sub i32 %i38, %i26
  %N8 = sub i32 %N7, %i34
  %N9 = add i32 %N8, %i18
  %N10 = sub i32 %i39, %i27
  %N11 = sub i32 %N10, %i35
  %N12 = add i32 %N11, %i19

  %gep043 = getelementptr inbounds [16 x [8 x i32]], ptr %R, i64 0, i64 %i1.i64.0, i64 0
  %N151 = add i32 %N12, %N9
  %N159 = add i32 %N151, %N6
  %N167 = add i32 %N159, %N3
  store i32 %N167, ptr %gep043, align 4

  %gep045 = getelementptr inbounds [16 x [8 x i32]], ptr %R, i64 0, i64 %i1.i64.0, i64 2
  %N156 = add i32 %N12, %N9
  %N164 = sub i32 %N156, %N6
  %N172 = sub i32 %N164, %N3
  store i32 %N172, ptr %gep045, align 4

  %gep063 = getelementptr inbounds [16 x [8 x i32]], ptr %R, i64 0, i64 %i1.i64.0, i64 1
  %N157 = sub i32 %N12, %N9
  %N165 = add i32 %N157, %N6
  %N173 = sub i32 %N165, %N3
  store i32 %N173, ptr %gep063, align 4

  %gep081 = getelementptr inbounds [16 x [8 x i32]], ptr %R, i64 0, i64 %i1.i64.0, i64 3
  %N158 = sub i32 %N12, %N9
  %N166 = sub i32 %N158, %N6
  %N174 = add i32 %N166, %N3
  store i32 %N174, ptr %gep081, align 4

  %nextivloop.1247 = add nuw nsw i64 %i1.i64.0, 1
  %condloop.1247 = icmp ult i64 %nextivloop.1247, 16
  br i1 %condloop.1247, label %loop.1247, label %afterloop.1247

afterloop.1247:                                   ; preds = %loop.1247
  ret i32 0
}

