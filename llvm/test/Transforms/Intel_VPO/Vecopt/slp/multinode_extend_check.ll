; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -passes=slp-vectorizer -enable-intel-advanced-opts -mattr=+avx2 -mtriple=x86_64 -slp-threshold=-100 -S | FileCheck %s

define void @test() {
; CHECK-LABEL: @test(
; CHECK-NEXT:  bb:
; CHECK-NEXT:    br label [[BB2:%.*]]
; CHECK:       bb1:
; CHECK-NEXT:    ret void
; CHECK:       bb2:
; CHECK-NEXT:    [[TMP0:%.*]] = phi <2 x i64> [ poison, [[BB:%.*]] ], [ [[TMP9:%.*]], [[BB2]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = phi <2 x i64> [ poison, [[BB]] ], [ [[TMP2:%.*]], [[BB2]] ]
; CHECK-NEXT:    [[TMP2]] = phi <2 x i64> [ poison, [[BB]] ], [ [[TMP3:%.*]], [[BB2]] ]
; CHECK-NEXT:    [[TMP3]] = phi <2 x i64> [ poison, [[BB]] ], [ [[TMP0]], [[BB2]] ]
; CHECK-NEXT:    [[TMP4:%.*]] = shufflevector <2 x i64> <i64 poison, i64 8>, <2 x i64> [[TMP3]], <2 x i32> <i32 3, i32 1>
; CHECK-NEXT:    [[TMP5:%.*]] = add <2 x i64> <i64 4, i64 5>, [[TMP4]]
; CHECK-NEXT:    [[TMP6:%.*]] = extractelement <2 x i64> [[TMP1]], i32 1
; CHECK-NEXT:    [[ROOT_LN1:%.*]] = lshr i64 [[TMP6]], 7
; CHECK-NEXT:    [[I12:%.*]] = xor i64 3, [[ROOT_LN1]]
; CHECK-NEXT:    [[TMP7:%.*]] = insertelement <2 x i64> <i64 poison, i64 6>, i64 [[I12]], i32 0
; CHECK-NEXT:    [[TMP8:%.*]] = add <2 x i64> [[TMP5]], [[TMP7]]
; CHECK-NEXT:    [[TMP9]] = add <2 x i64> [[TMP8]], [[TMP1]]
; CHECK-NEXT:    br i1 poison, label [[BB1:%.*]], label [[BB2]]
;
bb:
  br label %bb2

bb1:
  ret void

bb2:                                              ; preds = %bb2, %bb
  %i = phi i64 [ poison, %bb ], [ %i6, %bb2 ]
  %i4 = phi i64 [ poison, %bb ], [ %i, %bb2 ]
  %i5 = phi i64 [ poison, %bb ], [ %i4, %bb2 ]
  %i6 = phi i64 [ poison, %bb ], [ %MN0.ln0, %bb2 ]
  %i7 = phi i64 [ poison, %bb ], [ %i8, %bb2 ]
  %i8 = phi i64 [ poison, %bb ], [ %i9, %bb2 ]
  %i9 = phi i64 [ poison, %bb ], [ %i10, %bb2 ]
  %i10 = phi i64 [ poison, %bb ], [ %MN0.ln1, %bb2 ]

; Root of the vectorization tree
  %root.ln0 = add i64 %i9, %i5
  %root.ln1 = lshr i64 %i7, 7

  %i16 = add i64 5, %i7
  %i12 = xor i64 3, %root.ln1

; During multinode build MN0 and MN1 were already part of the MN.
; We were trying to see if we could extend it towards { %root.ln0, %i16 }.
; We cannot extend the MultiNode towards the pair as %root.ln0
; is already in vectorization tree.
; { %i12, 6 } and {4, 8 } are already the MN operands.
  %MN1.ln0 = add i64 %root.ln0, %i12
  %MN0.ln0 = add i64 %MN1.ln0, 4
  %MN1.ln1 = add i64 %i16, 6
  %MN0.ln1 = add i64 %MN1.ln1, 8

  br i1 poison, label %bb1, label %bb2
}
