; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes=slp-vectorizer -enable-intel-advanced-opts -mattr=+avx2 -mtriple=x86_64 -S < %s  | FileCheck %s

define void @foo(i64* nocapture %ptr, i32 %sw) {
; CHECK-LABEL: @foo(
; CHECK-NEXT:  bb:
; CHECK-NEXT:    br label [[BB1:%.*]]
; CHECK:       bb4:
; CHECK-NEXT:    [[TMP0:%.*]] = phi <4 x i64> [ [[TMP5:%.*]], [[BB99:%.*]] ], [ [[TMP5]], [[BB100:%.*]] ], [ [[TMP5]], [[BB101:%.*]] ], [ [[TMP5]], [[BB102:%.*]] ], [ [[TMP5]], [[BB103:%.*]] ], [ [[TMP5]], [[BB104:%.*]] ], [ [[TMP5]], [[BB105:%.*]] ], [ [[TMP5]], [[BB106:%.*]] ], [ [[TMP5]], [[BB107:%.*]] ], [ [[TMP5]], [[BB108:%.*]] ], [ [[TMP5]], [[BB109:%.*]] ], [ [[TMP5]], [[BB110:%.*]] ], [ [[TMP5]], [[BB111:%.*]] ], [ [[TMP5]], [[BB112:%.*]] ]
; CHECK-NEXT:    br label [[BB9:%.*]]
; CHECK:       bb9:
; CHECK-NEXT:    [[GEP1:%.*]] = getelementptr inbounds i64, i64* [[PTR:%.*]], i64 6
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast i64* [[GEP1]] to <4 x i64>*
; CHECK-NEXT:    [[TMP2:%.*]] = load <4 x i64>, <4 x i64>* [[TMP1]], align 4
; CHECK-NEXT:    [[TMP3:%.*]] = add <4 x i64> [[TMP0]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast i64* [[GEP1]] to <4 x i64>*
; CHECK-NEXT:    store <4 x i64> [[TMP3]], <4 x i64>* [[TMP4]], align 4
; CHECK-NEXT:    br i1 poison, label [[BB1]], label [[EXIT:%.*]]
; CHECK:       bb1:
; CHECK-NEXT:    [[TMP5]] = phi <4 x i64> [ zeroinitializer, [[BB:%.*]] ], [ [[TMP0]], [[BB9]] ]
; CHECK-NEXT:    switch i32 [[SW:%.*]], label [[BB99]] [
; CHECK-NEXT:    i32 0, label [[BB100]]
; CHECK-NEXT:    i32 1, label [[BB101]]
; CHECK-NEXT:    i32 2, label [[BB102]]
; CHECK-NEXT:    i32 3, label [[BB103]]
; CHECK-NEXT:    i32 4, label [[BB104]]
; CHECK-NEXT:    i32 5, label [[BB105]]
; CHECK-NEXT:    i32 6, label [[BB106]]
; CHECK-NEXT:    i32 7, label [[BB107]]
; CHECK-NEXT:    i32 8, label [[BB108]]
; CHECK-NEXT:    i32 9, label [[BB109]]
; CHECK-NEXT:    i32 10, label [[BB110]]
; CHECK-NEXT:    i32 11, label [[BB111]]
; CHECK-NEXT:    i32 12, label [[BB112]]
; CHECK-NEXT:    ]
; CHECK:       exit:
; CHECK-NEXT:    ret void
; CHECK:       bb99:
; CHECK-NEXT:    br label [[BB4:%.*]]
; CHECK:       bb100:
; CHECK-NEXT:    br label [[BB4]]
; CHECK:       bb101:
; CHECK-NEXT:    br label [[BB4]]
; CHECK:       bb102:
; CHECK-NEXT:    br label [[BB4]]
; CHECK:       bb103:
; CHECK-NEXT:    br label [[BB4]]
; CHECK:       bb104:
; CHECK-NEXT:    br label [[BB4]]
; CHECK:       bb105:
; CHECK-NEXT:    br label [[BB4]]
; CHECK:       bb106:
; CHECK-NEXT:    br label [[BB4]]
; CHECK:       bb107:
; CHECK-NEXT:    br label [[BB4]]
; CHECK:       bb108:
; CHECK-NEXT:    br label [[BB4]]
; CHECK:       bb109:
; CHECK-NEXT:    br label [[BB4]]
; CHECK:       bb110:
; CHECK-NEXT:    br label [[BB4]]
; CHECK:       bb111:
; CHECK-NEXT:    br label [[BB4]]
; CHECK:       bb112:
; CHECK-NEXT:    br label [[BB4]]
;
bb:
  br label %bb1

; Compile time issue.
; When estimating score of pair of instructions Lookahead scoring routine
; loops over each pair of instruction's operand, i.e. the algorithm
; complexity at one level of the recursion is N1 * N2 (where N1,N2 are
; number of operands of each instruction of the pair.
; Adds below formed a multi-node with these PHIs as its operands.
; Problem was amplified by the fact that the routine is recursive and for
; these PHIs it looped over same pairs again and again until recursion
; depth limit reached.

bb4:                                              ; preds = %bb112, %bb111, %bb110, %bb109, %bb108, %bb107, %bb106, %bb105, %bb104, %bb103, %bb102, %bb101, %bb100, %bb99
  %phi1 = phi i64 [ %i3, %bb99 ], [ %i3, %bb100 ], [ %i3, %bb101 ], [ %i3, %bb102 ], [ %i3, %bb103 ], [ %i3, %bb104 ], [ %i3, %bb105 ], [ %i3, %bb106 ], [ %i3, %bb107 ], [ %i3, %bb108 ], [ %i3, %bb109 ], [ %i3, %bb110 ], [ %i3, %bb111 ], [ %i3, %bb112 ]
  %phi2 = phi i64 [ %i4, %bb99 ], [ %i4, %bb100 ], [ %i4, %bb101 ], [ %i4, %bb102 ], [ %i4, %bb103 ], [ %i4, %bb104 ], [ %i4, %bb105 ], [ %i4, %bb106 ], [ %i4, %bb107 ], [ %i4, %bb108 ], [ %i4, %bb109 ], [ %i4, %bb110 ], [ %i4, %bb111 ], [ %i4, %bb112 ]
  %phi3 = phi i64 [ %i5, %bb99 ], [ %i5, %bb100 ], [ %i5, %bb101 ], [ %i5, %bb102 ], [ %i5, %bb103 ], [ %i5, %bb104 ], [ %i5, %bb105 ], [ %i5, %bb106 ], [ %i5, %bb107 ], [ %i5, %bb108 ], [ %i5, %bb109 ], [ %i5, %bb110 ], [ %i5, %bb111 ], [ %i5, %bb112 ]
  %phi4 = phi i64 [ %i6, %bb99 ], [ %i6, %bb100 ], [ %i6, %bb101 ], [ %i6, %bb102 ], [ %i6, %bb103 ], [ %i6, %bb104 ], [ %i6, %bb105 ], [ %i6, %bb106 ], [ %i6, %bb107 ], [ %i6, %bb108 ], [ %i6, %bb109 ], [ %i6, %bb110 ], [ %i6, %bb111 ], [ %i6, %bb112 ]
  br label %bb9

bb9:                                              ; preds = %bb4
  %gep1 = getelementptr inbounds i64, i64* %ptr, i64 6
  %gep2 = getelementptr inbounds i64, i64* %ptr, i64 7
  %gep3 = getelementptr inbounds i64, i64* %ptr, i64 8
  %gep4 = getelementptr inbounds i64, i64* %ptr, i64 9
  %ld1 = load i64, i64* %gep1, align 4
  %ld2 = load i64, i64* %gep2, align 4
  %ld3 = load i64, i64* %gep3, align 4
  %ld4 = load i64, i64* %gep4, align 4
  %add1 = add i64 %ld1, %phi1
  %add2 = add i64 %ld2, %phi2
  %add3 = add i64 %ld3, %phi3
  %add4 = add i64 %ld4, %phi4
  store i64 %add1, i64* %gep1, align 4
  store i64 %add2, i64* %gep2, align 4
  store i64 %add3, i64* %gep3, align 4
  store i64 %add4, i64* %gep4, align 4
  br i1 poison, label %bb1, label %exit

bb1:                                              ; preds = %bb9, %bb
  %i3 = phi i64 [ 0, %bb ], [ %phi1, %bb9 ]
  %i4 = phi i64 [ 0, %bb ], [ %phi2, %bb9 ]
  %i5 = phi i64 [ 0, %bb ], [ %phi3, %bb9 ]
  %i6 = phi i64 [ 0, %bb ], [ %phi4, %bb9 ]
  switch i32 %sw, label %bb99 [
  i32 0, label %bb100
  i32 1, label %bb101
  i32 2, label %bb102
  i32 3, label %bb103
  i32 4, label %bb104
  i32 5, label %bb105
  i32 6, label %bb106
  i32 7, label %bb107
  i32 8, label %bb108
  i32 9, label %bb109
  i32 10, label %bb110
  i32 11, label %bb111
  i32 12, label %bb112
  ]

exit:                                             ; preds = %bb9
  ret void

bb99:                                             ; preds = %bb1
  br label %bb4

bb100:                                            ; preds = %bb1
  br label %bb4

bb101:                                            ; preds = %bb1
  br label %bb4

bb102:                                            ; preds = %bb1
  br label %bb4

bb103:                                            ; preds = %bb1
  br label %bb4

bb104:                                            ; preds = %bb1
  br label %bb4

bb105:                                            ; preds = %bb1
  br label %bb4

bb106:                                            ; preds = %bb1
  br label %bb4

bb107:                                            ; preds = %bb1
  br label %bb4

bb108:                                            ; preds = %bb1
  br label %bb4

bb109:                                            ; preds = %bb1
  br label %bb4

bb110:                                            ; preds = %bb1
  br label %bb4

bb111:                                            ; preds = %bb1
  br label %bb4

bb112:                                            ; preds = %bb1
  br label %bb4
}
