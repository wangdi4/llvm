; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes=slp-vectorizer -enable-intel-advanced-opts -mattr=+avx2 -mtriple=x86_64 -S < %s  | FileCheck %s

; Pair {%i03,%i07} formed multi-node root and next vectorization tree entry
; was pair {%i02,%i06}, also the multi-node trunk.
; For the pair {%i03,%i07} scheduling was skipped because users are in another
; block, but scheduling region for {%i02,%i06} contains instruction %i03 so it
; was scheduled as a single instruction (not as a part of bundle). In such cases
; scheduling data do not have reference back to vectorization tree entry and the
; scheduler assumed it means operand remain original. But multinode reordering
; actually replaced original operands of {%i03,%i07} with the sext instructions.
; Operands reordering is not written back into LLVM IR and is kept in
; vectorization tree entries. Hence walking over %i3 operands taken from IR
; was wrong path and eventually caused a failure on assertion that %i03 turned
; out unscheduled when it had to be.


define <2 x i64> @test(i32 %a, i32 %b, i32 %c, i64 %d, i64 %e) {
; CHECK-LABEL: @test(
; CHECK-NEXT:    [[I04:%.*]] = add i32 [[A:%.*]], [[B:%.*]]
; CHECK-NEXT:    [[TMP1:%.*]] = insertelement <2 x i32> poison, i32 [[C:%.*]], i32 1
; CHECK-NEXT:    [[TMP2:%.*]] = insertelement <2 x i32> [[TMP1]], i32 [[I04]], i32 0
; CHECK-NEXT:    [[TMP3:%.*]] = sext <2 x i32> [[TMP2]] to <2 x i64>
; CHECK-NEXT:    [[TMP4:%.*]] = insertelement <2 x i64> poison, i64 [[D:%.*]], i32 0
; CHECK-NEXT:    [[TMP5:%.*]] = insertelement <2 x i64> [[TMP4]], i64 [[E:%.*]], i32 1
; CHECK-NEXT:    [[TMP6:%.*]] = add <2 x i64> <i64 -2, i64 -1>, [[TMP5]]
; CHECK-NEXT:    [[TMP7:%.*]] = add <2 x i64> [[TMP6]], [[TMP3]]
; CHECK-NEXT:    br label [[BB1:%.*]]
; CHECK:       bb1:
; CHECK-NEXT:    ret <2 x i64> [[TMP7]]
;
  %i01 = sext i32 %c to i64
  %i02 = add i64 %e, %i01
  %i03 = add i64 %i02, -1

  %i04 = add i32 %a, %b
  %i05 = sext i32 %i04 to i64
  %i06 = add nsw i64 %i05, %d
  %i07 = add nsw i64 %i06, -2

  br label %bb1
bb1:

  %tmp = insertelement <2 x i64> poison, i64 %i07, i64 0
  %res = insertelement <2 x i64> %tmp, i64 %i03, i64 1
  ret <2 x i64> %res
}
