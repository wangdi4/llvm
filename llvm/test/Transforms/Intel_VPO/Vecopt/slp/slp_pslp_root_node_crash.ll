; NOTE: Assertions have been autogenerated by utils/update_test_checks.py

; SLP tries to vectorize OR reduction that starts with instruction %i27.
; Then combination of two factors lead to crash. First Multi-Node started from
; the vectorizable tree root and its scalars got reordered as a result
; of Multi-Node ordering. That in turn lead to PSLP capability so it kicked in.
; PSLP then added padding and updates vectorization tree entries
; that are users of current tree entry. But because it is the tree root it does
; not have any users down the tree. It crashed due to failure to check that fact.
; RUN: opt < %s -passes=slp-vectorizer -enable-intel-advanced-opts -mtriple=x86_64 -mcpu=skylake-avx512 -S | FileCheck %s -check-prefix=INTADV

; This run line is not strictly necessary to reproduce the original issue.
; But it actually demonstrates difference in behavior with disabled intel-advanced-opts.
; RUN: opt < %s -passes=slp-vectorizer -mtriple=x86_64 -mcpu=skylake-avx512 -S | FileCheck %s

@c = dso_local local_unnamed_addr global i32 0, align 4
@e = dso_local local_unnamed_addr global i32 0, align 4

; Function Attrs: nofree norecurse nounwind uwtable
define i32 @foo(i32 %t1, i32 %t4) {
; INTADV-LABEL: @foo(
; INTADV-NEXT:  entry:
; INTADV-NEXT:    [[GEPLOAD:%.*]] = load i32, ptr @e, align 4
; INTADV-NEXT:    [[C_PROMOTED:%.*]] = load i32, ptr @c, align 4
; INTADV-NEXT:    [[I1:%.*]] = add i32 [[C_PROMOTED]], [[T1:%.*]]
; INTADV-NEXT:    [[DOTNEG300:%.*]] = xor i32 [[I1]], -1
; INTADV-NEXT:    [[I2:%.*]] = add i32 [[I1]], 1
; INTADV-NEXT:    [[I10:%.*]] = sub i32 50, undef
; INTADV-NEXT:    [[DOTNEG301:%.*]] = shl i32 [[DOTNEG300]], 3
; INTADV-NEXT:    [[I12:%.*]] = mul i32 [[DOTNEG301]], [[T4:%.*]]
; INTADV-NEXT:    [[I13:%.*]] = add i32 [[GEPLOAD]], [[I12]]
; INTADV-NEXT:    [[I14:%.*]] = sub i32 50, [[I13]]
; INTADV-NEXT:    [[DOTNEG305_NEG:%.*]] = shl i32 [[I1]], 1
; INTADV-NEXT:    [[DOTNEG306_NEG:%.*]] = add i32 [[DOTNEG305_NEG]], 2
; INTADV-NEXT:    [[DOTNEG309:%.*]] = mul i32 [[I2]], 3
; INTADV-NEXT:    [[DOTNEG312_NEG:%.*]] = shl i32 [[I1]], 2
; INTADV-NEXT:    [[DOTNEG313_NEG:%.*]] = add i32 [[DOTNEG312_NEG]], 4
; INTADV-NEXT:    [[TMP0:%.*]] = insertelement <4 x i32> <i32 undef, i32 poison, i32 poison, i32 poison>, i32 [[DOTNEG306_NEG]], i32 1
; INTADV-NEXT:    [[TMP1:%.*]] = insertelement <4 x i32> [[TMP0]], i32 [[DOTNEG309]], i32 2
; INTADV-NEXT:    [[TMP2:%.*]] = insertelement <4 x i32> [[TMP1]], i32 [[DOTNEG313_NEG]], i32 3
; INTADV-NEXT:    [[TMP3:%.*]] = insertelement <4 x i32> poison, i32 [[GEPLOAD]], i32 0
; INTADV-NEXT:    [[SHUFFLE:%.*]] = shufflevector <4 x i32> [[TMP3]], <4 x i32> poison, <4 x i32> zeroinitializer
; INTADV-NEXT:    [[TMP4:%.*]] = sub <4 x i32> [[TMP2]], [[SHUFFLE]]
; INTADV-NEXT:    [[TMP5:%.*]] = insertelement <4 x i32> poison, i32 [[I12]], i32 0
; INTADV-NEXT:    [[SHUFFLE1:%.*]] = shufflevector <4 x i32> [[TMP5]], <4 x i32> poison, <4 x i32> zeroinitializer
; INTADV-NEXT:    [[TMP6:%.*]] = sub <4 x i32> [[TMP4]], [[SHUFFLE1]]
; INTADV-NEXT:    [[TMP7:%.*]] = add <4 x i32> [[TMP6]], <i32 50, i32 50, i32 50, i32 50>
; INTADV-NEXT:    [[DOTNEG316:%.*]] = mul i32 [[I2]], 5
; INTADV-NEXT:    [[DOTNEG317:%.*]] = sub i32 [[DOTNEG316]], [[GEPLOAD]]
; INTADV-NEXT:    [[DOTNEG318:%.*]] = sub i32 [[DOTNEG317]], [[I12]]
; INTADV-NEXT:    [[I24:%.*]] = add i32 [[DOTNEG318]], 50
; INTADV-NEXT:    [[DOTNEG319:%.*]] = mul i32 [[I2]], 6
; INTADV-NEXT:    [[DOTNEG320:%.*]] = sub i32 [[DOTNEG319]], [[GEPLOAD]]
; INTADV-NEXT:    [[DOTNEG321:%.*]] = sub i32 [[DOTNEG320]], [[I12]]
; INTADV-NEXT:    [[I26:%.*]] = add i32 [[DOTNEG321]], 50
; INTADV-NEXT:    [[TMP8:%.*]] = call i32 @llvm.vector.reduce.or.v4i32(<4 x i32> [[TMP7]])
; INTADV-NEXT:    [[OP_RDX:%.*]] = or i32 [[TMP8]], [[I24]]
; INTADV-NEXT:    [[OP_RDX2:%.*]] = or i32 [[I26]], [[I10]]
; INTADV-NEXT:    [[OP_RDX3:%.*]] = or i32 [[I14]], undef
; INTADV-NEXT:    [[OP_RDX4:%.*]] = or i32 [[OP_RDX]], [[OP_RDX2]]
; INTADV-NEXT:    [[OP_RDX5:%.*]] = or i32 [[OP_RDX4]], [[OP_RDX3]]
; INTADV-NEXT:    ret i32 [[OP_RDX5]]
;
; CHECK-LABEL: @foo(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[GEPLOAD:%.*]] = load i32, ptr @e, align 4
; CHECK-NEXT:    [[C_PROMOTED:%.*]] = load i32, ptr @c, align 4
; CHECK-NEXT:    [[I1:%.*]] = add i32 [[C_PROMOTED]], [[T1:%.*]]
; CHECK-NEXT:    [[DOTNEG300:%.*]] = xor i32 [[I1]], -1
; CHECK-NEXT:    [[I2:%.*]] = add i32 [[I1]], 1
; CHECK-NEXT:    [[I10:%.*]] = sub i32 50, undef
; CHECK-NEXT:    [[DOTNEG301:%.*]] = shl i32 [[DOTNEG300]], 3
; CHECK-NEXT:    [[I12:%.*]] = mul i32 [[DOTNEG301]], [[T4:%.*]]
; CHECK-NEXT:    [[I13:%.*]] = add i32 [[GEPLOAD]], [[I12]]
; CHECK-NEXT:    [[I14:%.*]] = sub i32 50, [[I13]]
; CHECK-NEXT:    [[DOTNEG305_NEG:%.*]] = shl i32 [[I1]], 1
; CHECK-NEXT:    [[DOTNEG306_NEG:%.*]] = add i32 [[DOTNEG305_NEG]], 2
; CHECK-NEXT:    [[DOTNEG309:%.*]] = mul i32 [[I2]], 3
; CHECK-NEXT:    [[DOTNEG312_NEG:%.*]] = shl i32 [[I1]], 2
; CHECK-NEXT:    [[DOTNEG313_NEG:%.*]] = add i32 [[DOTNEG312_NEG]], 4
; CHECK-NEXT:    [[TMP0:%.*]] = insertelement <4 x i32> <i32 undef, i32 poison, i32 poison, i32 poison>, i32 [[DOTNEG306_NEG]], i32 1
; CHECK-NEXT:    [[TMP1:%.*]] = insertelement <4 x i32> [[TMP0]], i32 [[DOTNEG309]], i32 2
; CHECK-NEXT:    [[TMP2:%.*]] = insertelement <4 x i32> [[TMP1]], i32 [[DOTNEG313_NEG]], i32 3
; CHECK-NEXT:    [[TMP3:%.*]] = insertelement <4 x i32> poison, i32 [[GEPLOAD]], i32 0
; CHECK-NEXT:    [[SHUFFLE:%.*]] = shufflevector <4 x i32> [[TMP3]], <4 x i32> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP4:%.*]] = sub <4 x i32> [[TMP2]], [[SHUFFLE]]
; CHECK-NEXT:    [[TMP5:%.*]] = insertelement <4 x i32> poison, i32 [[I12]], i32 0
; CHECK-NEXT:    [[SHUFFLE1:%.*]] = shufflevector <4 x i32> [[TMP5]], <4 x i32> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP6:%.*]] = sub <4 x i32> [[TMP4]], [[SHUFFLE1]]
; CHECK-NEXT:    [[TMP7:%.*]] = add <4 x i32> [[TMP6]], <i32 50, i32 50, i32 50, i32 50>
; CHECK-NEXT:    [[DOTNEG316:%.*]] = mul i32 [[I2]], 5
; CHECK-NEXT:    [[DOTNEG317:%.*]] = sub i32 [[DOTNEG316]], [[GEPLOAD]]
; CHECK-NEXT:    [[DOTNEG318:%.*]] = sub i32 [[DOTNEG317]], [[I12]]
; CHECK-NEXT:    [[I24:%.*]] = add i32 [[DOTNEG318]], 50
; CHECK-NEXT:    [[DOTNEG319:%.*]] = mul i32 [[I2]], 6
; CHECK-NEXT:    [[DOTNEG320:%.*]] = sub i32 [[DOTNEG319]], [[GEPLOAD]]
; CHECK-NEXT:    [[DOTNEG321:%.*]] = sub i32 [[DOTNEG320]], [[I12]]
; CHECK-NEXT:    [[I26:%.*]] = add i32 [[DOTNEG321]], 50
; CHECK-NEXT:    [[TMP8:%.*]] = call i32 @llvm.vector.reduce.or.v4i32(<4 x i32> [[TMP7]])
; CHECK-NEXT:    [[OP_RDX:%.*]] = or i32 [[TMP8]], [[I24]]
; CHECK-NEXT:    [[OP_RDX2:%.*]] = or i32 [[I26]], [[I10]]
; CHECK-NEXT:    [[OP_RDX3:%.*]] = or i32 [[I14]], undef
; CHECK-NEXT:    [[OP_RDX4:%.*]] = or i32 [[OP_RDX]], [[OP_RDX2]]
; CHECK-NEXT:    [[OP_RDX5:%.*]] = or i32 [[OP_RDX4]], [[OP_RDX3]]
; CHECK-NEXT:    ret i32 [[OP_RDX5]]
;
entry:
  %gepload = load i32, ptr @e, align 4
  %c.promoted = load i32, ptr @c, align 4
  %i1 = add i32 %c.promoted, %t1
  %.neg300 = xor i32 %i1, -1
  %i2 = add i32 %i1, 1
  %i10 = sub i32 50, undef
  %i11 = or i32 %i10, undef
  %.neg301 = shl i32 %.neg300, 3
  %i12 = mul i32 %.neg301, %t4
  %i13 = add i32 %gepload, %i12
  %i14 = sub i32 50, %i13
  %i15 = or i32 %i14, %i11
  %.neg303 = sub i32 undef, %gepload
  %.neg304 = sub i32 %.neg303, %i12
  %i16 = add i32 %.neg304, 50
  %i17 = or i32 %i16, %i15
  %.neg305.neg = shl i32 %i1, 1
  %.neg306.neg = add i32 %.neg305.neg, 2
  %.neg307 = sub i32 %.neg306.neg, %gepload
  %.neg308 = sub i32 %.neg307, %i12
  %i18 = add i32 %.neg308, 50
  %i19 = or i32 %i18, %i17
  %.neg309 = mul i32 %i2, 3
  %.neg310 = sub i32 %.neg309, %gepload
  %.neg311 = sub i32 %.neg310, %i12
  %i20 = add i32 %.neg311, 50
  %i21 = or i32 %i20, %i19
  %.neg312.neg = shl i32 %i1, 2
  %.neg313.neg = add i32 %.neg312.neg, 4
  %.neg314 = sub i32 %.neg313.neg, %gepload
  %.neg315 = sub i32 %.neg314, %i12
  %i22 = add i32 %.neg315, 50
  %i23 = or i32 %i22, %i21
  %.neg316 = mul i32 %i2, 5
  %.neg317 = sub i32 %.neg316, %gepload
  %.neg318 = sub i32 %.neg317, %i12
  %i24 = add i32 %.neg318, 50
  %i25 = or i32 %i24, %i23
  %.neg319 = mul i32 %i2, 6
  %.neg320 = sub i32 %.neg319, %gepload
  %.neg321 = sub i32 %.neg320, %i12
  %i26 = add i32 %.neg321, 50
  %i27 = or i32 %i26, %i25
  ret i32 %i27
}
