; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; This test checks if we correctly widen the insertelement/extractelement
; instruction that have a non-const index

; Run the following command and intercept the function and print module
; before VPlanDriver is invoked on a function
;
; icx -Xclang -fopenmp-late-outline -c -fopenmp -mllvm --vplan-vec
; -mllvm -vplan-force-vf=2 -mllvm --loopopt=0 tt2.cpp
;
; =====================tt2.cpp============================================
;typedef float float4 __attribute__ ((vector_size (16)));
;void setElement(float4* vec, float val, int i) {
;  int v_i = val, retVal=0;
;  #pragma omp simd
;  for (int i = 1; i < 4; i++) {
;    float4 t = vec[i];
;    t[v_i%i] = val;
;    vec[i] = t;
;  }
;}
;
;void setElement2(float4* vec, float val, int i) {
;  int v_i = val, retVal=0;
;  #pragma omp simd
;  for (int i = 1; i < 1024; i++) {
;    float4 t = vec[i];
;    t[v_i%4] = i;
;    vec[i] = t;
;  }
;}
;
;float getElement(float4* vec, float val, int i) {
;  int v_i = val;
;  float retVal = 0;
;  #pragma omp simd
;  for (int i = 1; i < 4; i++) {
;    float4 t = vec[i];
;    retVal += t[v_i%i];
;  }
;  return retVal;
;}
; =======================================================================

; RUN: opt %s -S -passes=mem2reg,loop-simplify,lcssa,vpo-cfg-restructuring,vplan-vec \
; RUN: -vplan-enable-all-zero-bypass-non-loops=false -vplan-force-vf=2 | FileCheck %s --check-prefixes=CHECK,CHECK-VF2

source_filename = "tt2.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind uwtable
define dso_local void @_Z10setElementPU8__vectorffi(ptr nocapture %vec, float %val, i32 %i) local_unnamed_addr #0 {
; Check the correct sequence for 'insertelement' with non-const index
; CHECK-LABEL:@_Z10setElementPU8__vectorffi
; CHECK-VF2:       [[VARIDX1:%.*]] = extractelement <2 x i32> [[VARIDXVEC:%.*]], i64 0
; CHECK-VF2-NEXT:  [[OFF1:%.*]] = add i32 0, [[VARIDX1]]
; CHECK-VF2-NEXT:  [[RES1:%.*]] = insertelement <8 x float> [[VEC:%.*]], float [[E1:%.*]], i32 [[OFF1]]
; CHECK-VF2-NEXT:  [[VARIDX2:%.*]] = extractelement <2 x i32> [[VARIDXVEC]], i64 1
; CHECK-VF2-NEXT:  [[OFF2:%.*]] = add i32 4, [[VARIDX2]]
; CHECK-VF2-NEXT:  [[RES2:%.*]] = insertelement <8 x float> [[RES1]], float [[E2:%.*]], i32 [[OFF2]]
entry:
  %.omp.iv = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %t = alloca <4 x float>, align 16
  %conv = fptosi float %val to i32
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %.omp.iv) #2
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %.omp.ub) #2
  store i32 2, ptr %.omp.ub, align 4, !tbaa !2
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %entry
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.NORMALIZED.IV:TYPED"(ptr %.omp.iv, i32 0, i32 1), "QUAL.OMP.NORMALIZED.UB:TYPED"(ptr %.omp.ub, i32 0), "QUAL.OMP.PRIVATE:TYPED"(ptr %t, <4 x float> zeroinitializer, i32 1) ]
  br label %DIR.OMP.SIMD.2

DIR.OMP.SIMD.2:                                   ; preds = %DIR.OMP.SIMD.1
  store i32 0, ptr %.omp.iv, align 4, !tbaa !2
  %1 = load i32, ptr %.omp.ub, align 4, !tbaa !2
  %cmp11 = icmp slt i32 %1, 0
  br i1 %cmp11, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %DIR.OMP.SIMD.2
  %2 = sext i32 %1 to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.inner.for.body, %omp.inner.for.body.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %omp.inner.for.body ], [ 0, %omp.inner.for.body.lr.ph ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %t) #2
  %arrayidx = getelementptr inbounds <4 x float>, ptr %vec, i64 %indvars.iv.next
  %3 = load <4 x float>, ptr %arrayidx, align 16, !tbaa !6
  %4 = trunc i64 %indvars.iv.next to i32
  %rem = srem i32 %conv, %4
  %vecins = insertelement <4 x float> %3, float %val, i32 %rem
  store <4 x float> %vecins, ptr %arrayidx, align 16, !tbaa !6
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %t) #2
  %cmp = icmp slt i64 %indvars.iv, %2
  br i1 %cmp, label %omp.inner.for.body, label %omp.inner.for.cond.omp.loop.exit_crit_edge

omp.inner.for.cond.omp.loop.exit_crit_edge:       ; preds = %omp.inner.for.body
  %indvars.iv.next.lcssa = phi i64 [ %indvars.iv.next, %omp.inner.for.body ]
  %5 = trunc i64 %indvars.iv.next.lcssa to i32
  store i32 %5, ptr %.omp.iv, align 4, !tbaa !2
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.inner.for.cond.omp.loop.exit_crit_edge, %DIR.OMP.SIMD.2
  br label %DIR.OMP.END.SIMD.3

DIR.OMP.END.SIMD.3:                               ; preds = %omp.loop.exit
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.OMP.END.SIMD.4

DIR.OMP.END.SIMD.4:                               ; preds = %DIR.OMP.END.SIMD.3
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %.omp.ub) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %.omp.iv) #2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0(i64, ptr nocapture) #1

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #2

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0(i64, ptr nocapture) #1

; Function Attrs: nounwind uwtable
define dso_local void @setElement2(ptr nocapture %vec, float %val, i32 %i) local_unnamed_addr #0 {
; Check the correct sequence for 'insertelement' with non-const index and loop variant scalar value to be inserted
; CHECK-LABEL:@setElement2
; CHECK-VF2:       [[INSERTVAL:%.*]] = sitofp <2 x i32> [[IV:%.*]] to <2 x float>
; CHECK-VF2-NEXT:  [[E1:%.*]] = extractelement <2 x float> [[INSERTVAL]], i32 1
; CHECK-VF2-NEXT:  [[E2:%.*]] = extractelement <2 x float> [[INSERTVAL]], i32 0
; CHECK-VF2:       [[VARIDX1:%.*]] = extractelement <2 x i32> [[VARIDXVEC:%.*]], i64 0
; CHECK-VF2-NEXT:  [[OFF1:%.*]] = add i32 0, [[VARIDX1]]
; CHECK-VF2-NEXT:  [[RES1:%.*]] = insertelement <8 x float> [[VEC:%.*]], float [[E2]], i32 [[OFF1]]
; CHECK-VF2-NEXT:  [[VARIDX2:%.*]] = extractelement <2 x i32> [[VARIDXVEC]], i64 1
; CHECK-VF2-NEXT:  [[OFF2:%.*]] = add i32 4, [[VARIDX2]]
; CHECK-VF2-NEXT:  [[RES2:%.*]] = insertelement <8 x float> [[RES1]], float [[E1]], i32 [[OFF2]]
omp.inner.for.body.lr.ph:
  %conv = fptosi float %val to i32
  %t.priv = alloca <4 x float>, align 16
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %omp.inner.for.body.lr.ph
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.PRIVATE:TYPED"(ptr %t.priv, <4 x float> zeroinitializer, i32 1) ]
  br label %DIR.OMP.SIMD.2

DIR.OMP.SIMD.2:                                   ; preds = %DIR.OMP.SIMD.1
  %rem = srem i32 %conv, 4
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.inner.for.body, %DIR.OMP.SIMD.2
  %indvars.iv = phi i64 [ %indvars.iv.next, %omp.inner.for.body ], [ 0, %DIR.OMP.SIMD.2 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %t.priv) #2
  %arrayidx = getelementptr inbounds <4 x float>, ptr %vec, i64 %indvars.iv.next
  %1 = load <4 x float>, ptr %arrayidx, align 16, !tbaa !2
  %2 = trunc i64 %indvars.iv.next to i32
  %conv3 = sitofp i32 %2 to float
  %vecins = insertelement <4 x float> %1, float %conv3, i32 %rem
  store <4 x float> %vecins, ptr %arrayidx, align 16, !tbaa !2
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %t.priv) #2
  %exitcond = icmp eq i64 %indvars.iv.next, 1023
  br i1 %exitcond, label %DIR.OMP.END.SIMD.2, label %omp.inner.for.body

DIR.OMP.END.SIMD.2:                               ; preds = %omp.inner.for.body
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.OMP.END.SIMD.3

DIR.OMP.END.SIMD.3:                               ; preds = %DIR.OMP.END.SIMD.2
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local float @_Z10getElementPDv4_ffi(ptr nocapture readonly %vec, float %val, i32 %i) local_unnamed_addr #0 {
; Check the correct sequence for 'extractelement' with non-const index
; CHECK-LABEL:@_Z10getElementPDv4_ffi
; CHECK-VF2:       [[VARIDX1:%.*]] = extractelement <2 x i32> [[VARIDXVEC:%.*]], i64 0
; CHECK-VF2-NEXT:  [[OFF1:%.*]] = add i32 0, [[VARIDX1]]
; CHECK-VF2-NEXT:  [[RES1:%.*]] = extractelement <8 x float> [[VEC:%.*]], i32 [[OFF1]]
; CHECK-VF2-NEXT:  [[WIDE_EXTRACT1:%.*]] = insertelement <2 x float> {{.*}}, float [[RES1]], i64 0
; CHECK-VF2-NEXT:  [[VARIDX2:%.*]] = extractelement <2 x i32> [[VARIDXVEC]], i64 1
; CHECK-VF2-NEXT:  [[OFF2:%.*]] = add i32 4, [[VARIDX2]]
; CHECK-VF2-NEXT:  [[RES2:%.*]] = extractelement <8 x float> [[VEC]], i32 [[OFF2]]
; CHECK-VF2-NEXT:  [[WIDE_EXTRACT2:%.*]] = insertelement <2 x float> [[WIDE_EXTRACT1]], float [[RES2]], i64 1
entry:
  %.omp.iv = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %t = alloca <4 x float>, align 16
  %conv = fptosi float %val to i32
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %.omp.iv) #2
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %.omp.ub) #2
  store i32 2, ptr %.omp.ub, align 4, !tbaa !2
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.NORMALIZED.IV:TYPED"(ptr %.omp.iv, i32 0), "QUAL.OMP.NORMALIZED.UB:TYPED"(ptr %.omp.ub, i32 0), "QUAL.OMP.PRIVATE:TYPED"(ptr %t, <4 x float> zeroinitializer, i32 1) ]
  store i32 0, ptr %.omp.iv, align 4, !tbaa !2
  %1 = load i32, ptr %.omp.ub, align 4, !tbaa !2
  %cmp9 = icmp slt i32 %1, 0
  br i1 %cmp9, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %entry
  %2 = sext i32 %1 to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.inner.for.body, %omp.inner.for.body.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %omp.inner.for.body ], [ 0, %omp.inner.for.body.lr.ph ]
  %retVal.011 = phi float [ %add2, %omp.inner.for.body ], [ 0.000000e+00, %omp.inner.for.body.lr.ph ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %t) #2
  %arrayidx = getelementptr inbounds <4 x float>, ptr %vec, i64 %indvars.iv.next
  %3 = load <4 x float>, ptr %arrayidx, align 16, !tbaa !6
  %4 = trunc i64 %indvars.iv.next to i32
  %rem = srem i32 %conv, %4
  %vecext = extractelement <4 x float> %3, i32 %rem
  %add2 = fadd float %retVal.011, %vecext
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %t) #2
  %cmp = icmp slt i64 %indvars.iv, %2
  br i1 %cmp, label %omp.inner.for.body, label %omp.inner.for.cond.omp.loop.exit_crit_edge

omp.inner.for.cond.omp.loop.exit_crit_edge:       ; preds = %omp.inner.for.body
  %5 = trunc i64 %indvars.iv.next to i32
  store i32 %5, ptr %.omp.iv, align 4, !tbaa !2
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.inner.for.cond.omp.loop.exit_crit_edge, %entry
  %retVal.0.lcssa = phi float [ %add2, %omp.inner.for.cond.omp.loop.exit_crit_edge ], [ 0.000000e+00, %entry ]
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %.omp.ub) #2
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %.omp.iv) #2
  ret float %retVal.0.lcssa
}

;; Source
;void maskedSetElement(float4* vec, float val, int* arr) {
;  int v_i = val, retVal=0;
;  #pragma omp simd
;  for (int i = 1; i < 1024; i++) {
;    if (i %0 == 0) {
;      float4 t = vec[i];
;      t[arr[i]%t] = val;
;      vec[i] = t;
;    }
;  }
;}

; Function Attrs: nounwind uwtable
define dso_local void @maskedSetElement(ptr %vec, float %val, ptr %arr) {
; CHECK-LABEL: @maskedSetElement(
; CHECK:       vector.body:
; CHECK:         [[WIDE_MASKED_LOAD:%.*]] = call <8 x float> @llvm.masked.load.v8f32.p0(ptr [[POINTER:%.*]], i32 16, <8 x i1> [[LOADMASK:%.*]], <8 x float> poison)
; CHECK-NEXT:    [[EXTRACTSUBVEC_6:%.*]] = shufflevector <8 x float> [[WIDE_MASKED_LOAD]], <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
; CHECK-NEXT:    [[EXTRACTSUBVEC_:%.*]] = shufflevector <8 x float> [[WIDE_MASKED_LOAD]], <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK:         [[TMP7:%.*]] = srem <2 x i32> [[WIDE_MASKED_LOAD6:%.*]], <i32 4, i32 4>
; CHECK-NEXT:    [[DOTEXTRACT_1_:%.*]] = extractelement <2 x i32> [[TMP7]], i32 1
; CHECK-NEXT:    [[DOTEXTRACT_0_7:%.*]] = extractelement <2 x i32> [[TMP7]], i32 0
; CHECK-NEXT:    [[PREDICATE:%.*]] = extractelement <2 x i1> [[TMP2:%.*]], i64 0
; CHECK-NEXT:    [[TMP8:%.*]] = icmp eq i1 [[PREDICATE]], true
; CHECK-NEXT:    br i1 [[TMP8]], label [[PRED_INSERTELEMENT_IF:%.*]], label [[TMP10:%.*]]
; CHECK:       pred.insertelement.if:
; CHECK-NEXT:    [[TMP9:%.*]] = insertelement <4 x float> [[EXTRACTSUBVEC_]], float [[VAL:%.*]], i32 [[DOTEXTRACT_0_7]]
; CHECK-NEXT:    br label [[TMP10]]
; CHECK:       8:
; CHECK-NEXT:    [[TMP11:%.*]] = phi <4 x float> [ undef, [[VPLANNEDBB4:%.*]] ], [ [[TMP9]], [[PRED_INSERTELEMENT_IF]] ]
; CHECK-NEXT:    br label [[PRED_INSERTELEMENT_CONTINUE:%.*]]
; CHECK:       pred.insertelement.continue:
; CHECK-NEXT:    [[PREDICATE8:%.*]] = extractelement <2 x i1> [[TMP2]], i64 1
; CHECK-NEXT:    [[TMP12:%.*]] = icmp eq i1 [[PREDICATE8]], true
; CHECK-NEXT:    br i1 [[TMP12]], label [[PRED_INSERTELEMENT_IF18:%.*]], label [[TMP14:%.*]]
; CHECK:       pred.insertelement.if18:
; CHECK-NEXT:    [[TMP13:%.*]] = insertelement <4 x float> [[EXTRACTSUBVEC_9:%.*]], float [[VAL]], i32 [[DOTEXTRACT_1_]]
; CHECK-NEXT:    br label [[TMP14]]
; CHECK:       12:
; CHECK-NEXT:    [[TMP15:%.*]] = phi <4 x float> [ undef, [[PRED_INSERTELEMENT_CONTINUE]] ], [ [[TMP13]], [[PRED_INSERTELEMENT_IF18]] ]
; CHECK-NEXT:    br label [[PRED_INSERTELEMENT_CONTINUE19:%.*]]
; CHECK:       pred.insertelement.continue19:
; CHECK-NEXT:    [[TMP16:%.*]] = shufflevector <4 x float> [[TMP11]], <4 x float> [[TMP15]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; CHECK-NEXT:    [[REPLICATEDMASKELTS_10:%.*]] = shufflevector <2 x i1> [[TMP2]], <2 x i1> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>
; CHECK-NEXT:    call void @llvm.masked.store.v8f32.p0(<8 x float> [[TMP16]], ptr [[SCALAR_GEP:%.*]], i32 16, <8 x i1> [[REPLICATEDMASKELTS_10]])
;
omp.inner.for.body.lr.ph:
  %t.priv = alloca <4 x float>, align 16
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.PRIVATE:TYPED"(ptr %t.priv, <4 x float> zeroinitializer, i32 1) ]
  br label %DIR.OMP.SIMD.2

DIR.OMP.SIMD.2:
  br label %omp.inner.for.body

omp.inner.for.body:
  %indvars.iv = phi i64 [ %indvars.iv.next, %omp.body.continue ], [ 0, %DIR.OMP.SIMD.2 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %and = and i64 %indvars.iv.next, 1
  %cmp2 = icmp eq i64 %and, 0
  br i1 %cmp2, label %if.then, label %omp.body.continue

if.then:
  %arrayidx = getelementptr inbounds <4 x float>, ptr %vec, i64 %indvars.iv.next
  %load = load <4 x float>, ptr %arrayidx, align 16
  %arrayidx5 = getelementptr inbounds i32, ptr %arr, i64 %indvars.iv.next
  %load1 = load i32, ptr %arrayidx5, align 4
  %rem6 = srem i32 %load1, 4
  %vecins = insertelement <4 x float> %load, float %val, i32 %rem6
  store <4 x float> %vecins, ptr %arrayidx, align 16
  br label %omp.body.continue

omp.body.continue:
  %exitcond = icmp eq i64 %indvars.iv.next, 1023
  br i1 %exitcond, label %DIR.OMP.END.SIMD.4, label %omp.inner.for.body

DIR.OMP.END.SIMD.4:
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.OMP.END.SIMD.3

DIR.OMP.END.SIMD.3:
  ret void
}


;; Source
;float maskedGetElement(float4* vec, float val, int i) {
;  int v_i = val;
;  float retVal = 0;
;  #pragma omp simd
;  for (int i = 1; i < 1024; i++) {
;    if (i % 2 == 0) {
;      float4 t = vec[i];
;      retVal += t[v_i % i];
;    }
;  }
;  return retVal;
;}
;
; Function Attrs: nounwind uwtable
define dso_local float @maskedGetElement(ptr %vec, float %val, i32 %i) {
; CHECK-LABEL: @maskedGetElement(
; CHECK:       vector.body:
; CHECK:         [[WIDE_MASKED_LOAD:%.*]] = call <8 x float> @llvm.masked.load.v8f32.p0(ptr [[POINTER:%.*]], i32 16, <8 x i1> [[LOADMASK:%.*]], <8 x float> poison)
; CHECK-NEXT:    [[EXTRACTSUBVEC_7:%.*]] = shufflevector <8 x float> [[WIDE_MASKED_LOAD]], <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
; CHECK-NEXT:    [[EXTRACTSUBVEC_:%.*]] = shufflevector <8 x float> [[WIDE_MASKED_LOAD]], <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK:         [[TMP7:%.*]] = select <2 x i1> [[TMP5:%.*]], <2 x i32> [[TMP3:%.*]], <2 x i32> <i32 1, i32 1>
; CHECK-NEXT:    [[TMP8:%.*]] = srem <2 x i32> [[BROADCAST_SPLAT:%.*]], [[TMP7]]
; CHECK-NEXT:    [[DOTEXTRACT_1_:%.*]] = extractelement <2 x i32> [[TMP8]], i32 1
; CHECK-NEXT:    [[DOTEXTRACT_0_6:%.*]] = extractelement <2 x i32> [[TMP8]], i32 0
; CHECK-NEXT:    [[PREDICATE:%.*]] = extractelement <2 x i1> [[TMP5]], i64 0
; CHECK-NEXT:    [[TMP9:%.*]] = icmp eq i1 [[PREDICATE]], true
; CHECK-NEXT:    br i1 [[TMP9]], label [[PRED_EXTRACTELEMENT_IF:%.*]], label [[TMP12:%.*]]
; CHECK:       pred.extractelement.if:
; CHECK-NEXT:    [[TMP10:%.*]] = extractelement <4 x float> [[EXTRACTSUBVEC_]], i32 [[DOTEXTRACT_0_6]]
; CHECK-NEXT:    [[TMP11:%.*]] = insertelement <2 x float> undef, float [[TMP10]], i32 0
; CHECK-NEXT:    br label [[TMP12]]
; CHECK:       11:
; CHECK-NEXT:    [[TMP13:%.*]] = phi <2 x float> [ undef, [[VPLANNEDBB5:%.*]] ], [ [[TMP11]], [[PRED_EXTRACTELEMENT_IF]] ]
; CHECK-NEXT:    br label [[PRED_EXTRACTELEMENT_CONTINUE:%.*]]
; CHECK:       pred.extractelement.continue:
; CHECK-NEXT:    [[PREDICATE7:%.*]] = extractelement <2 x i1> [[TMP5]], i64 1
; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i1 [[PREDICATE7]], true
; CHECK-NEXT:    br i1 [[TMP14]], label [[PRED_EXTRACTELEMENT_IF18:%.*]], label [[TMP17:%.*]]
; CHECK:       pred.extractelement.if18:
; CHECK-NEXT:    [[TMP15:%.*]] = extractelement <4 x float> [[EXTRACTSUBVEC_8:%.*]], i32 [[DOTEXTRACT_1_]]
; CHECK-NEXT:    [[TMP16:%.*]] = insertelement <2 x float> [[TMP13]], float [[TMP15]], i32 1
; CHECK-NEXT:    br label [[TMP17]]
; CHECK:       16:
; CHECK-NEXT:    [[TMP18:%.*]] = phi <2 x float> [ [[TMP13]], [[PRED_EXTRACTELEMENT_CONTINUE]] ], [ [[TMP16]], [[PRED_EXTRACTELEMENT_IF18]] ]
; CHECK-NEXT:    br label [[PRED_EXTRACTELEMENT_CONTINUE19:%.*]]
; CHECK:       pred.extractelement.continue19:
; CHECK-NEXT:    [[TMP19:%.*]] = fadd <2 x float> [[VEC_PHI4:%.*]], [[TMP18]]
;
omp.inner.for.body.lr.ph:
  %conv = fptosi float %val to i32
  %t.priv = alloca <4 x float>, align 16
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.PRIVATE:TYPED"(ptr %t.priv, <4 x float> zeroinitializer, i32 1) ]
  br label %DIR.OMP.SIMD.2

DIR.OMP.SIMD.2:
  br label %omp.inner.for.body

omp.inner.for.body:
  %indvars.iv = phi i64 [ %indvars.iv.next, %omp.body.continue ], [ 0, %DIR.OMP.SIMD.2 ]
  %retVal.020 = phi float [ %retVal.1, %omp.body.continue ], [ 0.000000e+00, %DIR.OMP.SIMD.2 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %trunc = trunc i64 %indvars.iv.next to i32
  %and = and i32 %trunc, 1
  %cmp3 = icmp eq i32 %and, 0
  br i1 %cmp3, label %if.then, label %omp.body.continue

if.then:
  %arrayidx = getelementptr inbounds <4 x float>, ptr %vec, i64 %indvars.iv.next
  %load = load <4 x float>, ptr %arrayidx, align 16
  %rem5 = srem i32 %conv, %trunc
  %vecext = extractelement <4 x float> %load, i32 %rem5
  %add6 = fadd float %retVal.020, %vecext
  br label %omp.body.continue

omp.body.continue:
  %retVal.1 = phi float [ %add6, %if.then ], [ %retVal.020, %omp.inner.for.body ]
  %exitcond = icmp eq i64 %indvars.iv.next, 1023
  br i1 %exitcond, label %DIR.OMP.END.SIMD.4, label %omp.inner.for.body

DIR.OMP.END.SIMD.4:
  %retVal.1.lcssa = phi float [ %retVal.1, %omp.body.continue ]
  br label %DIR.OMP.END.SIMD.3

DIR.OMP.END.SIMD.3:
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.OMP.END.SIMD.41

DIR.OMP.END.SIMD.41:
  ret float %retVal.1.lcssa
}


attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "may-have-openmp-directive"="true" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 8.0.0"}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C++ TBAA"}
!6 = !{!4, !4, i64 0}
