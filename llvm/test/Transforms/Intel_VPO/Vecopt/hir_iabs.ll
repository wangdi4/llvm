; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -hir-ssa-deconstruction -hir-vec-dir-insert -VPlanDriverHIR -vplan-print-after-linearization -vplan-force-vf=4 -print-after=VPlanDriverHIR -disable-output < %s 2>&1  | FileCheck %s
;
; LIT test to check VPlan/DA information and vector code generated for an HLInst
; which is in abs() form (i.e. an HLInst like t1 = val < 0 ? -val : val). Checks
; ensure that the generated vector HLInst retains a form so that isAbs() remains
; true for the same.
;
define dso_local void @foo(i64* noalias nocapture %larr) local_unnamed_addr #0 {
; CHECK-LABEL:  VPlan after predication and linearization:
; CHECK-NEXT:  External Defs Start:
; CHECK-DAG:     [[VP0:%.*]] = {%larr}
; CHECK-NEXT:  External Defs End:
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     [DA: Div] i64 [[VP__IND_INIT:%.*]] = induction-init{add} i64 live-in0 i64 1
; CHECK-NEXT:     [DA: Uni] i64 [[VP__IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:     [DA: Uni] br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], [[BB2]]
; CHECK-NEXT:     [DA: Div] i64 [[VP1:%.*]] = phi  [ i64 [[VP__IND_INIT]], [[BB1]] ],  [ i64 [[VP2:%.*]], [[BB2]] ]
; CHECK-NEXT:     [DA: Div] i64* [[VP_SUBSCRIPT:%.*]] = subscript inbounds i64* [[LARR0:%.*]] i64 [[VP1]]
; CHECK-NEXT:     [DA: Div] i64 [[VP_LOAD:%.*]] = load i64* [[VP_SUBSCRIPT]]
; CHECK-NEXT:     [DA: Div] i64 [[VP3:%.*]] = abs i64 [[VP_LOAD]]
; CHECK-NEXT:     [DA: Div] i64* [[VP_SUBSCRIPT_1:%.*]] = subscript inbounds i64* [[LARR0]] i64 [[VP1]]
; CHECK-NEXT:     [DA: Div] store i64 [[VP3]] i64* [[VP_SUBSCRIPT_1]]
; CHECK-NEXT:     [DA: Div] i64 [[VP2]] = add i64 [[VP1]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP4:%.*]] = icmp sle i64 [[VP2]] i64 99
; CHECK-NEXT:     [DA: Uni] br i1 [[VP4]], [[BB2]], [[BB3:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: [[BB2]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP__IND_FINAL:%.*]] = induction-final{add} i64 live-in0 i64 1
; CHECK-NEXT:     [DA: Uni] br [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: [[BB3]]
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-LABEL:  *** IR Dump After VPlan Vectorization Driver HIR ***
; CHECK-NEXT:  Function: foo
; CHECK-EMPTY:
; CHECK-NEXT:  BEGIN REGION { modified }
; CHECK-NEXT:          + DO i1 = 0, 99, 4   <DO_LOOP> <novectorize>
; CHECK-NEXT:          |   %.vec = (<4 x i64>*)(%larr)[i1];
; CHECK-NEXT:          |   %.vec1 = (%.vec < 0) ? -1 * %.vec : %.vec;
; CHECK-NEXT:          |   (<4 x i64>*)(%larr)[i1] = %.vec1;
; CHECK-NEXT:          + END LOOP
; CHECK-NEXT:  END REGION
;
entry:
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %l1.08 = phi i64 [ 0, %entry ], [ %inc, %for.body ]
  %arrayidx = getelementptr inbounds i64, i64* %larr, i64 %l1.08
  %0 = load i64, i64* %arrayidx, align 8
  %1 = icmp slt i64 %0, 0
  %neg = sub nsw i64 0, %0
  %2 = select i1 %1, i64 %neg, i64 %0
  store i64 %2, i64* %arrayidx, align 8
  %inc = add nuw nsw i64 %l1.08, 1
  %exitcond = icmp eq i64 %inc, 100
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  ret void
}
