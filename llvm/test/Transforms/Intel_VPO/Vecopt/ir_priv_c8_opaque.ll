; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; Test to check that we allow using a recurrency in a load instruction that is in
; operands chain of unconditional last private.
;
; RUN: opt -opaque-pointers -vplan-vec -vplan-force-vf=4 --vplan-print-after-initial-transforms -S %s 2>&1 | FileCheck %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: mustprogress nounwind uwtable
define dso_local i32 @_Z3fooPiS_(i32* %b) local_unnamed_addr #0 {
; CHECK-LABEL:  VPlan after initial VPlan transforms:
; CHECK-NEXT:  VPlan IR for: _Z3fooPiS_:omp.inner.for.body.#{{[0-9]+}}
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     ptr [[VP_V_LPRIV:%.*]] = allocate-priv ptr, OrigAlign = 4
; CHECK-NEXT:     call i64 4 ptr [[VP_V_LPRIV]] ptr @llvm.lifetime.start.p0
; CHECK-NEXT:     ptr [[VP__IND_INIT:%.*]] = induction-init{getelementptr} ptr live-in2 i64 12
; CHECK-NEXT:     i64 [[VP__IND_INIT_STEP:%.*]] = induction-init-step{getelementptr} i64 12
; CHECK-NEXT:     ptr [[VP__IND_INIT1:%.*]] = induction-init{getelementptr} ptr live-in3 i64 32
; CHECK-NEXT:     i64 [[VP__IND_INIT_STEP1:%.*]] = induction-init-step{getelementptr} i64 32
; CHECK-NEXT:     i32 [[VP__OMP_IV_LOCAL_011_IND_INIT:%.*]] = induction-init{add} i32 live-in4 i32 1
; CHECK-NEXT:     i32 [[VP__OMP_IV_LOCAL_011_IND_INIT_STEP:%.*]] = induction-init-step{add} i32 1
; CHECK-NEXT:     i32 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i32 103, UF = 1
; CHECK-NEXT:     br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], [[BB2]]
; CHECK-NEXT:     ptr [[VP0:%.*]] = phi  [ ptr [[VP__IND_INIT]], [[BB1]] ],  [ ptr [[VP2:%.*]], [[BB2]] ]
; CHECK-NEXT:     ptr [[VP1:%.*]] = phi  [ ptr [[VP__IND_INIT1]], [[BB1]] ],  [ ptr [[VP3:%.*]], [[BB2]] ]
; CHECK-NEXT:     i32 [[VP__OMP_IV_LOCAL_011:%.*]] = phi  [ i32 [[VP__OMP_IV_LOCAL_011_IND_INIT]], [[BB1]] ],  [ i32 [[VP_ADD2:%.*]], [[BB2]] ]
; CHECK-NEXT:     ptr [[VP2]] = getelementptr inbounds i8, ptr [[VP0]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     ptr [[VP_INCDEC_PTR:%.*]] = getelementptr inbounds i32, ptr [[VP0]] i64 3
; CHECK-NEXT:     ptr [[VP3]] = getelementptr inbounds i8, ptr [[VP1]] i64 [[VP__IND_INIT_STEP1]]
; CHECK-NEXT:     ptr [[VP_INCDEC_PTR1:%.*]] = getelementptr inbounds ptr, ptr [[VP1]] i64 4
; CHECK-NEXT:     i32 [[VP4:%.*]] = load ptr [[VP0]]
; CHECK-NEXT:     ptr [[VP5:%.*]] = load ptr [[VP1]]
; CHECK-NEXT:     i16 [[VP6:%.*]] = load ptr [[VP5]]
; CHECK-NEXT:     i32 [[VP_ADD2]] = add i32 [[VP__OMP_IV_LOCAL_011]] i32 [[VP__OMP_IV_LOCAL_011_IND_INIT_STEP]]
; CHECK-NEXT:     i1 [[VP_VECTOR_LOOP_EXITCOND:%.*]] = icmp uge i32 [[VP_ADD2]] i32 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     br i1 [[VP_VECTOR_LOOP_EXITCOND]], [[BB3:BB[0-9]+]], [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: [[BB2]]
; CHECK-NEXT:     ptr [[VP__IND_FINAL:%.*]] = induction-final{getelementptr} ptr [[B_ADDR_LINEAR_PROMOTED0:%.*]] i64 12
; CHECK-NEXT:     ptr [[VP__IND_FINAL1:%.*]] = induction-final{getelementptr} ptr [[C_ADDR_LINEAR_PROMOTED0:%.*]] i64 32
; CHECK-NEXT:     i32 [[VP__OMP_IV_LOCAL_011_IND_FINAL:%.*]] = induction-final{add} i32 0 i32 1
; CHECK-NEXT:     i32 [[VP__PRIV_FINAL:%.*]] = private-final-uc i32 [[VP4]]
; CHECK-NEXT:     i16 [[VP__PRIV_FINAL1:%.*]] = private-final-uc i16 [[VP6]]
; CHECK-NEXT:     br [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: [[BB3]]
; CHECK-NEXT:     br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0     [[DOTLCSSA0:%.*]] = phi i32 [ [[TMP2:%.*]], [[OMP_INNER_FOR_BODY0:%.*]] ] i32 [[VP__PRIV_FINAL]] -> i32 [[TMP2]]
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 1     [[DOTLCSSA1:%.*]] = phi i16 [ [[TMP3:%.*]], [[OMP_INNER_FOR_BODY0:%.*]] ] i16 [[VP__PRIV_FINAL1]] -> i16 [[TMP3]]
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 2   no underlying for ptr [[VP__IND_FINAL]]
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 3   no underlying for ptr [[VP__IND_FINAL1]]
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 4   no underlying for i32 [[VP__OMP_IV_LOCAL_011_IND_FINAL]]
;
; CHECK: define dso_local i32 @_Z3fooPiS_(ptr [[B:%.*]]) local_unnamed_addr {
; CHECK-NEXT: DIR.OMP.SIMD.118:
; CHECK-NEXT:   [[VP_V_LPRIV:%.*]] = alloca i32, align 4
; CHECK-NEXT:   [[B_ADDR_LINEAR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:   [[C_ADDR_LINEAR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:   %i.linear.iv = alloca i32, align 4
; CHECK-NEXT:   store ptr [[B]], ptr [[B_ADDR_LINEAR]], align 8
; CHECK-NEXT:   store ptr inttoptr (i64 100 to ptr), ptr [[C_ADDR_LINEAR]], align 8
; CHECK-NEXT:   [[VP_V_LPRIV_VEC:%.*]] = alloca <4 x i32>, align 16
; CHECK-NEXT:   [[VP_V_LPRIV_VEC_BASE_ADDR:%.*]] = getelementptr i32, ptr [[VP_V_LPRIV_VEC]], <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:   [[VP_V_LPRIV_VEC_BASE_ADDR_EXTRACT0:%.*]] = extractelement <4 x ptr> [[VP_V_LPRIV_VEC_BASE_ADDR]], i32 0
; CHECK-NEXT:   br label [[DIR_OMP_SIMD_1:%.*]]
; CHECK-EMPTY: 
; CHECK-NEXT: DIR.OMP.SIMD.1:                                   ; preds = %DIR.OMP.SIMD.118
; CHECK-NEXT:   br label [[DIR_OMP_SIMD_2:%.*]]
; CHECK-EMPTY: 
; CHECK-NEXT: DIR.OMP.SIMD.2:                                   ; preds = %DIR.OMP.SIMD.1
; CHECK-NEXT:   [[B_ADDR_LINEAR_PROMOTED:%.*]] = load ptr, ptr [[B_ADDR_LINEAR]], align 8
; CHECK-NEXT:   [[C_ADDR_LINEAR_PROMOTED:%.*]] = load ptr, ptr [[C_ADDR_LINEAR]], align 8
; CHECK-NEXT:   br label [[VPlannedBB:%.*]]
; CHECK-EMPTY: 
; CHECK-NEXT: VPlannedBB:                                       ; preds = %DIR.OMP.SIMD.2
; CHECK-NEXT:   br i1 false, label [[MERGE_BLK17:%.*]], label [[VPlannedBB1:%.*]]
; CHECK-EMPTY: 
; CHECK-NEXT: VPlannedBB1:                                      ; preds = %VPlannedBB
; CHECK-NEXT:   br label [[VPlannedBB2:%.*]]
; CHECK-EMPTY: 
; CHECK-NEXT: VPlannedBB2:                                      ; preds = %VPlannedBB1
; CHECK-NEXT:   call void @llvm.lifetime.start.p0(i64 16, ptr [[VP_V_LPRIV_VEC_BASE_ADDR_EXTRACT0:%.*]])
; CHECK-NEXT:   [[B_ADDR_LINEAR_PROMOTEDIND_START_BCAST_SPLATINSERT:%.*]] = insertelement <4 x ptr> poison, ptr [[B_ADDR_LINEAR_PROMOTED]], i32 0
; CHECK-NEXT:   [[B_ADDR_LINEAR_PROMOTEDIND_START_BCAST_SPLAT:%.*]] = shufflevector <4 x ptr> [[B_ADDR_LINEAR_PROMOTEDIND_START_BCAST_SPLATINSERT]], <4 x ptr> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:   [[VECTOR_GEP:%.*]] = getelementptr inbounds i8, <4 x ptr> [[B_ADDR_LINEAR_PROMOTEDIND_START_BCAST_SPLAT]], <4 x i64> <i64 0, i64 12, i64 24, i64 36>
; CHECK-NEXT:   [[C_ADDR_LINEAR_PROMOTEDIND_START_BCAST_SPLATINSERT:%.*]] = insertelement <4 x ptr> poison, ptr [[C_ADDR_LINEAR_PROMOTED]], i32 0
; CHECK-NEXT:   [[C_ADDR_LINEAR_PROMOTEDIND_START_BCAST_SPLAT:%.*]] = shufflevector <4 x ptr> [[C_ADDR_LINEAR_PROMOTEDIND_START_BCAST_SPLATINSERT]], <4 x ptr> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:   [[VECTOR_GEP3:%.*]] = getelementptr inbounds i8, <4 x ptr> [[C_ADDR_LINEAR_PROMOTEDIND_START_BCAST_SPLAT]], <4 x i64> <i64 0, i64 32, i64 64, i64 96>
; CHECK-NEXT:   br label [[VECTOR_BODY:%.*]]
; CHECK-EMPTY: 
; CHECK-NEXT: vector.body:                                      ; preds = %vector.body, %VPlannedBB2
; CHECK-NEXT:   [[UNI_PHI:%.*]] = phi ptr [ [[B_ADDR_LINEAR_PROMOTED]], [[VPlannedBB2]] ], [ [[MM_VECTORGEP_EXTRACT0:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:   [[VEC_PHI:%.*]] = phi <4 x ptr> [ [[VECTOR_GEP]], [[VPlannedBB2]] ], [ [[MM_VECTORGEP:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:   [[UNI_PHI5:%.*]] = phi ptr [ [[C_ADDR_LINEAR_PROMOTED]], [[VPlannedBB2]] ], [ [[MM_VECTORGEP10_EXTRACT0:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:   [[VEC_PHI6:%.*]] = phi <4 x ptr> [ [[VECTOR_GEP3]], [[VPlannedBB2]] ], [ [[MM_VECTORGEP10:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:   [[UNI_PHI7:%.*]] = phi i32 [ 0, [[VPlannedBB2]] ], [ %1, [[VECTOR_BODY]] ]
; CHECK-NEXT:   [[VEC_PHI8:%.*]] = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, [[VPlannedBB2]] ], [ %0, [[VECTOR_BODY]] ]
; CHECK-NEXT:   [[MM_VECTORGEP]] = getelementptr inbounds i8, <4 x ptr> [[VEC_PHI]], <4 x i64> <i64 48, i64 48, i64 48, i64 48>
; CHECK-NEXT:   [[MM_VECTORGEP_EXTRACT0]] = extractelement <4 x ptr> [[MM_VECTORGEP]], i32 0
; CHECK-NEXT:   [[MM_VECTORGEP9:%.*]] = getelementptr inbounds i32, <4 x ptr> [[VEC_PHI]], <4 x i64> <i64 3, i64 3, i64 3, i64 3>
; CHECK-NEXT:   [[MM_VECTORGEP10]] = getelementptr inbounds i8, <4 x ptr> [[VEC_PHI6]], <4 x i64> <i64 128, i64 128, i64 128, i64 128>
; CHECK-NEXT:   [[MM_VECTORGEP10_EXTRACT0]] = extractelement <4 x ptr> [[MM_VECTORGEP10]], i32 0
; CHECK-NEXT:   [[MM_VECTORGEP:%.*]]11 = getelementptr inbounds ptr, <4 x ptr> [[VEC_PHI6]], <4 x i64> <i64 4, i64 4, i64 4, i64 4>
; CHECK-NEXT:   [[WIDE_MASKED_GATHER:%.*]] = call <4 x i32> @llvm.masked.gather.v4i32.v4p0(<4 x ptr> [[VEC_PHI]], i32 4, <4 x i1> <i1 true, i1 true, i1 true, i1 true>, <4 x i32> undef)
; CHECK-NEXT:   [[WIDE_MASKED_GATHER12:%.*]] = call <4 x ptr> @llvm.masked.gather.v4p0.v4p0(<4 x ptr> [[VEC_PHI6]], i32 4, <4 x i1> <i1 true, i1 true, i1 true, i1 true>, <4 x ptr> undef)
; CHECK-NEXT:   [[WIDE_MASKED_GATHER13:%.*]] = call <4 x i16> @llvm.masked.gather.v4i16.v4p0(<4 x ptr> [[WIDE_MASKED_GATHER12]], i32 4, <4 x i1> <i1 true, i1 true, i1 true, i1 true>, <4 x i16> undef)
; CHECK-NEXT:   %0 = add nuw nsw <4 x i32> [[VEC_PHI8]], <i32 4, i32 4, i32 4, i32 4>
; CHECK-NEXT:   %1 = add nuw nsw i32 [[UNI_PHI7]], 4
; CHECK-NEXT:   %2 = icmp uge i32 %1, 100
; CHECK-NEXT:   br i1 %2, label [[VPlannedBB14:%.*]], label [[VECTOR_BODY]], !llvm.loop !0
; CHECK-EMPTY: 
; CHECK-NEXT: VPlannedBB14:                                     ; preds = %vector.body
; CHECK-NEXT:   [[FINAL_GEP:%.*]] = getelementptr inbounds i8, ptr [[B_ADDR_LINEAR_PROMOTED]], i64 1200
; CHECK-NEXT:   [[FINAL_GEP15:%.*]] = getelementptr inbounds i8, ptr [[C_ADDR_LINEAR_PROMOTED]], i64 3200
; CHECK-NEXT:   [[EXTRACTED_PRIV:%.*]] = extractelement <4 x i32> [[WIDE_MASKED_GATHER]], i64 3
; CHECK-NEXT:   [[EXTRACTED_PRIV16:%.*]] = extractelement <4 x i16> [[WIDE_MASKED_GATHER13]], i64 3
; CHECK-NEXT:   br label [[VPlannedBB17:%.*]]
; CHECK-EMPTY: 
; CHECK-NEXT: VPlannedBB17:                                     ; preds = %VPlannedBB14
; CHECK-NEXT:   br label [[VPlannedBB18:%.*]]
; CHECK-EMPTY: 
; CHECK-NEXT: VPlannedBB18:                                     ; preds = %VPlannedBB17
; CHECK-NEXT:   br i1 false, label [[FINAL_MERGE:%.*]], label [[MERGE_BLK17:%.*]]
; CHECK-EMPTY: 
;
DIR.OMP.SIMD.118:
  %v.lpriv = alloca i32, align 4
  %b.addr.linear = alloca i32*, align 8
  %c.addr.linear = alloca i16**, align 8
  %i.linear.iv = alloca i32, align 4
  store i32* %b, i32** %b.addr.linear, align 8
  store i16** inttoptr (i64 100 to i16**), i16*** %c.addr.linear, align 8
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %DIR.OMP.SIMD.118
%0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.LASTPRIVATE:TYPED"(i32* %v.lpriv, i32 0, i32 1), "QUAL.OMP.LINEAR:PTR_TO_PTR.TYPED"(i32** %b.addr.linear, i32 0, i32 1, i32 3), "QUAL.OMP.LINEAR:PTR_TO_PTR.TYPED"(i16*** %c.addr.linear, i16* null, i32 1, i32 4), "QUAL.OMP.NORMALIZED.IV:TYPED"(i8* null, i8 0), "QUAL.OMP.NORMALIZED.UB:TYPED"(i8* null, i8 0), "QUAL.OMP.LINEAR:IV.TYPED"(i32* %i.linear.iv, i32 0, i32 1, i32 1) ]
  br label %DIR.OMP.SIMD.2

DIR.OMP.SIMD.2:                                   ; preds = %DIR.OMP.SIMD.1
  %b.addr.linear.promoted = load i32*, i32** %b.addr.linear, align 8
  %c.addr.linear.promoted = load i16**, i16*** %c.addr.linear, align 8
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %DIR.OMP.SIMD.2, %omp.inner.for.body
  %1 = phi i32* [ %b.addr.linear.promoted, %DIR.OMP.SIMD.2 ], [ %incdec.ptr, %omp.inner.for.body ]
  %2 = phi i16** [ %c.addr.linear.promoted, %DIR.OMP.SIMD.2 ], [ %incdec1.ptr, %omp.inner.for.body ]
  %.omp.iv.local.011 = phi i32 [ 0, %DIR.OMP.SIMD.2 ], [ %add2, %omp.inner.for.body ]
  %incdec.ptr = getelementptr inbounds i32, i32* %1, i64 3
  %incdec1.ptr = getelementptr inbounds i16*, i16** %2, i64 4
  %3 = load i32, i32* %1, align 4
  %4 = load i16*, i16** %2, align 4
  %5 = load i16, i16* %4, align 4
  %add2 = add nuw nsw i32 %.omp.iv.local.011, 1
  %exitcond.not = icmp eq i32 %add2, 103
  br i1 %exitcond.not, label %DIR.OMP.END.SIMD.219, label %omp.inner.for.body

DIR.OMP.END.SIMD.219:                             ; preds = %omp.inner.for.body
  %.lcssa = phi i32 [ %3, %omp.inner.for.body ]
  %.lcssa1 = phi i16 [ %5, %omp.inner.for.body ]
  %.lcssa1ext = zext i16 %.lcssa1 to i32
  %.lcssaadd = add nsw i32 %.lcssa, %.lcssa1ext
  store i32 %.lcssaadd, i32* %v.lpriv
  br label %DIR.OMP.END.SIMD.3

DIR.OMP.END.SIMD.3:                               ; preds = %DIR.OMP.END.SIMD.219
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.OMP.END.SIMD.4

DIR.OMP.END.SIMD.4:                               ; preds = %DIR.OMP.END.SIMD.3
  %add1.le = add nsw i32 %.lcssa, 3000
  %add2.le = add nsw i32 %.lcssa1ext, 4000
  %add3.le = add nsw i32 %add1.le, %add2.le
  ret i32 %add3.le
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)


