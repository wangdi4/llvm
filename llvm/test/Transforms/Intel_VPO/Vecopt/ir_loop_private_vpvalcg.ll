; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -vplan-enable-soa=false -VPlanDriver -disable-vplan-predicator -vplan-force-vf=4 -S %s | FileCheck %s

; This test checks for a widened alloca for the simd private and a wide-store to the widened
; alloca. It also checks that we pass the correct argument to a serialized call which uses
; the value written to the private as a call argument. The original C Code uses the private
; as the call argument.

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind uwtable
define void @foo(i32* nocapture readonly %iarr)  {
; CHECK:       entry:
; CHECK:         [[A2_VEC:%.*]] = alloca <4 x i32>, align 16
; CHECK-NEXT:    [[A2_VEC_BC:%.*]] = bitcast <4 x i32>* [[A2_VEC]] to i32*
; CHECK-NEXT:    [[A2_VEC_BASE_ADDR:%.*]] = getelementptr i32, i32* [[A2_VEC_BC]], <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK:       vector.body:
; CHECK:         [[SCALAR_GEP:%.*]] = getelementptr inbounds i32, i32* [[IARR:%.*]], i64 [[UNI_PHI:%.*]]
; CHECK-NEXT:    [[TMP0:%.*]] = bitcast i32* [[SCALAR_GEP]] to <4 x i32>*
; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <4 x i32>, <4 x i32>* [[TMP0]], align 4
; CHECK-NEXT:    [[WIDE_LOAD_EXTRACT_3_:%.*]] = extractelement <4 x i32> [[WIDE_LOAD]], i32 3
; CHECK-NEXT:    [[WIDE_LOAD_EXTRACT_2_:%.*]] = extractelement <4 x i32> [[WIDE_LOAD]], i32 2
; CHECK-NEXT:    [[WIDE_LOAD_EXTRACT_1_:%.*]] = extractelement <4 x i32> [[WIDE_LOAD]], i32 1
; CHECK-NEXT:    [[WIDE_LOAD_EXTRACT_0_:%.*]] = extractelement <4 x i32> [[WIDE_LOAD]], i32 0
; CHECK-NEXT:    store <4 x i32> [[WIDE_LOAD]], <4 x i32>* [[A2_VEC]], align 4
; CHECK-NEXT:    call void @baz(i32 [[WIDE_LOAD_EXTRACT_0_]])
; CHECK-NEXT:    call void @baz(i32 [[WIDE_LOAD_EXTRACT_1_]])
; CHECK-NEXT:    call void @baz(i32 [[WIDE_LOAD_EXTRACT_2_]])
; CHECK-NEXT:    call void @baz(i32 [[WIDE_LOAD_EXTRACT_3_]])
entry:
  %a2 = alloca i32, align 4
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %entry
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.PRIVATE"(i32* %a2) ]
  br label %DIR.QUAL.LIST.END.2

DIR.QUAL.LIST.END.2:                              ; preds = %DIR.OMP.SIMD.1
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.inner.for.body, %DIR.QUAL.LIST.END.2
  %.omp.iv.05 = phi i64 [ 0, %DIR.QUAL.LIST.END.2 ], [ %add1, %omp.inner.for.body ]
  %arrayidx = getelementptr inbounds i32, i32* %iarr, i64 %.omp.iv.05
  %0 = load i32, i32* %arrayidx, align 4
  store i32 %0, i32* %a2, align 4
  call void @baz(i32 %0)
  %add1 = add nuw nsw i64 %.omp.iv.05, 1
  %exitcond = icmp eq i64 %add1, 100
  br i1 %exitcond, label %omp.loop.exit, label %omp.inner.for.body

omp.loop.exit:                                    ; preds = %omp.inner.for.body
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.QUAL.LIST.END.3

DIR.QUAL.LIST.END.3:                              ; preds = %omp.loop.exit
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture)

declare void @baz(i32)

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture)

; Function Attrs: argmemonly nounwind
declare token @llvm.directive.region.entry()

; Function Attrs: argmemonly nounwind
declare void @llvm.directive.region.exit(token)
