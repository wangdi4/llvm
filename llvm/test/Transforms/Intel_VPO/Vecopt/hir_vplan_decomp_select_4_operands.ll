; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; Verify that HIR select instructions with 4 operands are decomposed correctly into a compare instruction and a select with 3 operands

; Input HIR
; + DO i1 = 0, 1023, 1   <DO_LOOP>
; |   %0 = (@a)[0][i1];
; |   %3 = (@d)[0][i1];
; |   %spec.select = (i1 > %0 + 2 * %N + %3) ? %0 : %3;
; |   (@d)[0][i1] = %spec.select;
; + END LOOP


; RUN: opt -hir-ssa-deconstruction -hir-vec-dir-insert -VPlanDriverHIR -vplan-print-after-plain-cfg -vplan-dump-external-defs-hir=0 -disable-output < %s 2>&1 | FileCheck %s
; RUN: opt -passes="hir-ssa-deconstruction,hir-vec-dir-insert,vplan-driver-hir" -vplan-print-after-plain-cfg -vplan-dump-external-defs-hir=0 -disable-output < %s 2>&1 | FileCheck %s


target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@a = common dso_local local_unnamed_addr global [1024 x i32] zeroinitializer, align 16
@d = common dso_local local_unnamed_addr global [1024 x i32] zeroinitializer, align 16

; Function Attrs: norecurse nounwind uwtable
define dso_local i32 @foo(i32 %N) local_unnamed_addr {
; CHECK-LABEL:  VPlan after importing plain CFG:
; CHECK-NEXT:  VPlan IR for: foo:HIR
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], [[BB2]]
; CHECK-NEXT:     i64 [[VP0:%.*]] = phi  [ i64 0, [[BB1]] ],  [ i64 [[VP1:%.*]], [[BB2]] ]
; CHECK-NEXT:     i32* [[VP_SUBSCRIPT:%.*]] = subscript inbounds [1024 x i32]* @a i64 0 i64 [[VP0]]
; CHECK-NEXT:     i32 [[VP_LOAD:%.*]] = load i32* [[VP_SUBSCRIPT]]
; CHECK-NEXT:     i32* [[VP_SUBSCRIPT_1:%.*]] = subscript inbounds [1024 x i32]* @d i64 0 i64 [[VP0]]
; CHECK-NEXT:     i32 [[VP_LOAD_1:%.*]] = load i32* [[VP_SUBSCRIPT_1]]
; CHECK-NEXT:     i32 [[VP2:%.*]] = add i32 [[VP_LOAD]] i32 [[VP_LOAD_1]]
; CHECK-NEXT:     i32 [[VP3:%.*]] = mul i32 [[N0:%.*]] i32 2
; CHECK-NEXT:     i32 [[VP4:%.*]] = add i32 [[VP2]] i32 [[VP3]]
; CHECK-NEXT:     i64 [[VP5:%.*]] = sext i32 [[VP4]] to i64
; CHECK-NEXT:     i1 [[VP6:%.*]] = icmp sgt i64 [[VP0]] i64 [[VP5]]
; CHECK-NEXT:     i32 [[VP7:%.*]] = select i1 [[VP6]] i32 [[VP_LOAD]] i32 [[VP_LOAD_1]]
; CHECK-NEXT:     i32* [[VP_SUBSCRIPT_2:%.*]] = subscript inbounds [1024 x i32]* @d i64 0 i64 [[VP0]]
; CHECK-NEXT:     store i32 [[VP7]] i32* [[VP_SUBSCRIPT_2]]
; CHECK-NEXT:     i64 [[VP1]] = add i64 [[VP0]] i64 1
; CHECK-NEXT:     i1 [[VP8:%.*]] = icmp sle i64 [[VP1]] i64 1023
; CHECK-NEXT:     br i1 [[VP8]], [[BB2]], [[BB3:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: [[BB2]]
; CHECK-NEXT:     br [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: [[BB3]]
; CHECK-NEXT:     br <External Block>
;
entry:
  %mul8 = shl nsw i32 %N, 1
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %.pre, %for.body ]
  %arrayidx = getelementptr inbounds [1024 x i32], [1024 x i32]* @a, i64 0, i64 %indvars.iv
  %0 = load i32, i32* %arrayidx, align 4
  %add9 = add nsw i32 %0, %mul8
  %arrayidx15 = getelementptr inbounds [1024 x i32], [1024 x i32]* @d, i64 0, i64 %indvars.iv
  %1 = load i32, i32* %arrayidx15, align 4
  %add16 = add nsw i32 %1, %add9
  %2 = sext i32 %add16 to i64
  %cmp17 = icmp sgt i64 %indvars.iv, %2
  %spec.select = select i1 %cmp17, i32 %0, i32 %1
  store i32 %spec.select, i32* %arrayidx15, align 4
  %.pre = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %.pre, 1024
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  ret i32 42
}

