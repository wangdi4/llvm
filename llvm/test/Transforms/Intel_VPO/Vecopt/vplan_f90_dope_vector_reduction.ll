; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -S -passes="vplan-vec" -vplan-force-vf=16  -debug-only=vpo-ir-loop-vectorize-legality  < %s 2>&1 | FileCheck %s
; RUN: opt -disable-output -passes="hir-ssa-deconstruction,hir-temp-cleanup,hir-vplan-vec,print<hir>" -print-after=hir-vplan-vec -vplan-force-vf=16 -debug-only=HIRLegality < %s 2>&1 | FileCheck %s --check-prefix=HIR-CHECK

target triple = "x86_64-unknown-linux-gnu"

%"QNCA_a0$ptr$rank1$" = type { ptr, i64, i64, i64, i64, i64, [1 x { i64, i64, i64 }] }

define void @cq417019b_IP_test_() {
; CHECK:  F90 dope vector reductions are not supported.
;
; CHECK:  define void @cq417019b_IP_test_() {
; CHECK-NEXT:  alloca_1:
; CHECK-NEXT:    [[B_35_RED0:%.*]] = alloca %"QNCA_a0$ptr$rank1$", align 8
; CHECK-NEXT:    br label [[BB0:%.*]]
; CHECK:       omp.pdo.body62.preheader:
; CHECK-NEXT:    [[TMP2:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.REDUCTION.ADD:F90_DV.TYPED"(ptr [[B_35_RED0]], %"QNCA_a0$ptr$rank1$" zeroinitializer, i32 1) ]
; CHECK-NEXT:    br label [[OMP_PDO_BODY620:%.*]]
; CHECK:       omp.pdo.cond61.omp.pdo.epilog63_crit_edge:
; CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP2]]) [ "DIR.OMP.END.SIMD"() ]
; CHECK-NEXT:    ret void
; CHECK-NEXT:  }
;
; HIR-CHECK:      F90 dope vector reductions are not supported.
;
; HIR-CHECK:      BEGIN REGION { }
; HIR-CHECK-NEXT:       [[TMP2:%.*]] = @llvm.directive.region.entry()
; HIR-CHECK:            + DO i1 = 0, -1 * [[LB_NEW0:%.*]] + smax([[UB_NEW0:%.*]], [[LB_NEW0]]), 1   <DO_LOOP> <simd> <vectorize>
; HIR-CHECK:            + END LOOP
; HIR-CHECK:            @llvm.directive.region.exit([[TMP2]])
; HIR-CHECK-NEXT:       ret
; HIR-CHECK-NEXT: END REGION
;
alloca_1:
  %B.35.red = alloca %"QNCA_a0$ptr$rank1$"
  br label %DIR.OMP.LOOP.1.split43

DIR.OMP.LOOP.1.split43:                           ; preds = %alloca_1
  %I.ul.GEP.0.linear = alloca i32
  %lower.bnd = alloca i64
  %upper.bnd = alloca i64
  br label %omp.pdo.body62.lr.ph

omp.pdo.body62.lr.ph:                             ; preds = %DIR.OMP.LOOP.1.split43
  %lb.new = load i64, ptr %lower.bnd
  %ub.new = load i64, ptr %upper.bnd
  br label %omp.pdo.body62.preheader

omp.pdo.body62.preheader:                         ; preds = %omp.pdo.body62.lr.ph
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.REDUCTION.ADD:F90_DV.TYPED"(ptr %B.35.red, %"QNCA_a0$ptr$rank1$" zeroinitializer, i32 1) ]
  br label %omp.pdo.body62

omp.pdo.body62:                                   ; preds = %omp.pdo.body62.preheader, %loop_exit71
  %omp.pdo.norm.iv.local.039 = phi i64 [ %add.19, %loop_exit71 ], [ %lb.new, %omp.pdo.body62.preheader ]
  br label %loop_test69

loop_test69:                                      ; preds = %omp.pdo.body62
  %int_sext = trunc i64 %omp.pdo.norm.iv.local.039 to i32
  store i32 %int_sext, ptr %I.ul.GEP.0.linear
  br label %loop_exit71

loop_exit71:                                      ; preds = %loop_test69
  %add.19 = add nsw i64 %omp.pdo.norm.iv.local.039, 1
  %rel.12 = icmp sle i64 %add.19, %ub.new
  br i1 %rel.12, label %omp.pdo.body62, label %omp.pdo.cond61.omp.pdo.epilog63_crit_edge

omp.pdo.cond61.omp.pdo.epilog63_crit_edge:        ; preds = %loop_exit71
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"() ]
  ret void
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
