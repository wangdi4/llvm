; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -vplan-print-terminator-inst=false -S < %s -hir-ssa-deconstruction -hir-temp-cleanup -VPlanDriverHIR -vplan-force-vf=4 -vplan-force-uf=3 -enable-vp-value-codegen-hir=0 -vplan-print-after-unroll -print-after=VPlanDriverHIR -disable-output 2>&1 | FileCheck %s
; RUN: opt -vplan-print-terminator-inst=false -S < %s -hir-ssa-deconstruction -hir-temp-cleanup -VPlanDriverHIR -vplan-force-vf=4 -vplan-force-uf=3 -enable-vp-value-codegen-hir -print-after=VPlanDriverHIR -disable-output 2>&1 | FileCheck %s --check-prefix=VPVALCG

; void foo(int *a, int n) {
;   for (int i = 0; i < n; i++) {
;     a[i]++;
;   }
; }

define dso_local void @_Z3fooPii(i32* nocapture %a, i32 %n) local_unnamed_addr #0 {
; CHECK-LABEL:  VPlan after VPlan loop unrolling:
; CHECK-NEXT:  VPlan IR for: Initial VPlan for VF=4
; CHECK-NEXT:  External Defs Start:
; CHECK-DAG:     [[VP0:%.*]] = {sext.i32.i64(%n) + -1}
; CHECK-DAG:     [[VP1:%.*]] = {%a}
; CHECK-NEXT:  External Defs End:
; CHECK-NEXT:  Live-in values:
; CHECK-NEXT:  ID: 0 Value: i64 0
; CHECK-NEXT:    [[BB0:BB[0-9]+]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB1:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]:
; CHECK-NEXT:     [DA: Div] i64 [[VP__IND_INIT:%.*]] = induction-init{add} i64 live-in0 i64 1
; CHECK-NEXT:     [DA: Uni] i64 [[VP__IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:    SUCCESSORS(1):[[BB2:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]:
; CHECK-NEXT:     [DA: Div] i64 [[VP2:%.*]] = phi  [ i64 [[VP__IND_INIT]], [[BB1]] ],  [ i64 [[VP3:%.*]], cloned.[[BB3:BB[0-9]+]] ]
; CHECK-NEXT:     [DA: Div] i32* [[VP_SUBSCRIPT:%.*]] = subscript inbounds i32* [[A0:%.*]] i64 [[VP2]]
; CHECK-NEXT:     [DA: Div] i32 [[VP4:%.*]] = load i32* [[VP_SUBSCRIPT]]
; CHECK-NEXT:     [DA: Div] i32 [[VP5:%.*]] = add i32 [[VP4]] i32 1
; CHECK-NEXT:     [DA: Div] i32* [[VP_SUBSCRIPT_1:%.*]] = subscript inbounds i32* [[A0]] i64 [[VP2]]
; CHECK-NEXT:     [DA: Div] store i32 [[VP5]] i32* [[VP_SUBSCRIPT_1]]
; CHECK-NEXT:     [DA: Div] i64 [[VP6:%.*]] = add i64 [[VP2]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Div] i1 [[VP7:%.*]] = icmp sle i64 [[VP6]] i64 [[VP0]]
; CHECK-NEXT:    SUCCESSORS(1):cloned.[[BB4:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB1]] cloned.[[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB4]]:
; CHECK-NEXT:     [DA: Div] i32* [[VP8:%.*]] = subscript inbounds i32* [[A0]] i64 [[VP6]]
; CHECK-NEXT:     [DA: Div] i32 [[VP9:%.*]] = load i32* [[VP8]]
; CHECK-NEXT:     [DA: Div] i32 [[VP10:%.*]] = add i32 [[VP9]] i32 1
; CHECK-NEXT:     [DA: Div] i32* [[VP11:%.*]] = subscript inbounds i32* [[A0]] i64 [[VP6]]
; CHECK-NEXT:     [DA: Div] store i32 [[VP10]] i32* [[VP11]]
; CHECK-NEXT:     [DA: Div] i64 [[VP12:%.*]] = add i64 [[VP6]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP13:%.*]] = icmp sle i64 [[VP12]] i64 [[VP0]]
; CHECK-NEXT:    SUCCESSORS(1):cloned.[[BB3]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB3]]:
; CHECK-NEXT:     [DA: Div] i32* [[VP14:%.*]] = subscript inbounds i32* [[A0]] i64 [[VP12]]
; CHECK-NEXT:     [DA: Div] i32 [[VP15:%.*]] = load i32* [[VP14]]
; CHECK-NEXT:     [DA: Div] i32 [[VP16:%.*]] = add i32 [[VP15]] i32 1
; CHECK-NEXT:     [DA: Div] i32* [[VP17:%.*]] = subscript inbounds i32* [[A0]] i64 [[VP12]]
; CHECK-NEXT:     [DA: Div] store i32 [[VP16]] i32* [[VP17]]
; CHECK-NEXT:     [DA: Div] i64 [[VP3]] = add i64 [[VP12]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP18:%.*]] = icmp sle i64 [[VP3]] i64 [[VP0]]
; CHECK-NEXT:    SUCCESSORS(2):[[BB2]](i1 [[VP18]]), [[BB5:BB[0-9]+]](!i1 [[VP18]])
; CHECK-NEXT:    PREDECESSORS(1): cloned.[[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]:
; CHECK-NEXT:     [DA: Uni] i64 [[VP__IND_FINAL:%.*]] = induction-final{add} i64 live-in0 i64 1
; CHECK-NEXT:    SUCCESSORS(1):[[BB6:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): cloned.[[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   no underlying for i64 [[VP__IND_FINAL]]
; CHECK-EMPTY:
; CHECK-NEXT:  *** IR Dump After VPlan Vectorization Driver HIR ***
; CHECK-NEXT:  Function: _Z3fooPii
; CHECK-EMPTY:
; CHECK-NEXT:  <0>          BEGIN REGION { modified }
; CHECK-NEXT:  <23>               [[TGU0:%.*]] = (sext.i32.i64([[N0:%.*]]))/u12
; CHECK-NEXT:  <25>               if (0 <u 12 * [[TGU0]])
; CHECK-NEXT:  <25>               {
; CHECK-NEXT:  <24>                  + DO i1 = 0, 12 * [[TGU0]] + -1, 12   <DO_LOOP> <nounroll> <novectorize>
; CHECK-NEXT:  <27>                  |   [[DOTVEC0:%.*]] = (<4 x i32>*)([[A0]])[i1]
; CHECK-NEXT:  <28>                  |   (<4 x i32>*)([[A0]])[i1] = [[DOTVEC0]] + 1
; CHECK-NEXT:  <29>                  |   [[DOTVEC0]] = (<4 x i32>*)([[A0]])[i1 + 4]
; CHECK-NEXT:  <30>                  |   (<4 x i32>*)([[A0]])[i1 + 4] = [[DOTVEC0]] + 1
; CHECK-NEXT:  <31>                  |   [[DOTVEC0]] = (<4 x i32>*)([[A0]])[i1 + 8]
; CHECK-NEXT:  <32>                  |   (<4 x i32>*)([[A0]])[i1 + 8] = [[DOTVEC0]] + 1
; CHECK-NEXT:  <24>                  + END LOOP
; CHECK-NEXT:  <25>               }
; CHECK-NEXT:  <22>
; CHECK-NEXT:  <22>               + DO i1 = 12 * [[TGU0]], sext.i32.i64([[N0]]) + -1, 1   <DO_LOOP>  <MAX_TC_EST = 11> <nounroll> <novectorize> <max_trip_count = 11>
; CHECK-NEXT:  <10>               |   [[TMP1:%.*]] = ([[A0]])[i1]
; CHECK-NEXT:  <12>               |   ([[A0]])[i1] = [[TMP1]] + 1
; CHECK-NEXT:  <22>               + END LOOP
; CHECK-NEXT:  <0>          END REGION
;
; VPVALCG-LABEL:  *** IR Dump After VPlan Vectorization Driver HIR ***
; VPVALCG-NEXT:  Function: _Z3fooPii
; VPVALCG-EMPTY:
; VPVALCG-NEXT:  <0>          BEGIN REGION { modified }
; VPVALCG-NEXT:  <23>               [[TGU0:%.*]] = (sext.i32.i64([[N0:%.*]]))/u12
; VPVALCG-NEXT:  <25>               if (0 <u 12 * [[TGU0]])
; VPVALCG-NEXT:  <25>               {
; VPVALCG-NEXT:  <24>                  + DO i1 = 0, 12 * [[TGU0]] + -1, 12   <DO_LOOP> <nounroll> <novectorize>
; VPVALCG-NEXT:  <27>                  |   [[DOTVEC0:%.*]] = (<4 x i32>*)([[A0:%.*]])[i1]
; VPVALCG-NEXT:  <28>                  |   (<4 x i32>*)([[A0]])[i1] = [[DOTVEC0]] + 1
; VPVALCG-NEXT:  <29>                  |   [[DOTVEC20:%.*]] = (<4 x i32>*)([[A0]])[i1 + 4]
; VPVALCG-NEXT:  <30>                  |   (<4 x i32>*)([[A0]])[i1 + 4] = [[DOTVEC20]] + 1
; VPVALCG-NEXT:  <31>                  |   [[DOTVEC30:%.*]] = (<4 x i32>*)([[A0]])[i1 + 8]
; VPVALCG-NEXT:  <32>                  |   (<4 x i32>*)([[A0]])[i1 + 8] = [[DOTVEC30]] + 1
; VPVALCG-NEXT:  <24>                  + END LOOP
; VPVALCG-NEXT:  <25>               }
; VPVALCG-NEXT:  <22>
; VPVALCG-NEXT:  <22>               + DO i1 = 12 * [[TGU0]], sext.i32.i64([[N0]]) + -1, 1   <DO_LOOP>  <MAX_TC_EST = 11> <nounroll> <novectorize> <max_trip_count = 11>
; VPVALCG-NEXT:  <10>               |   [[TMP1:%.*]] = ([[A0]])[i1]
; VPVALCG-NEXT:  <12>               |   ([[A0]])[i1] = [[TMP1]] + 1
; VPVALCG-NEXT:  <22>               + END LOOP
; VPVALCG-NEXT:  <0>          END REGION
;


entry:
  %cmp = icmp sgt i32 %n, 0
  br i1 %cmp, label %DIR.OMP.SIMD.2, label %omp.precond.end

DIR.OMP.SIMD.2:                                   ; preds = %entry
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.NORMALIZED.IV"(i8* null), "QUAL.OMP.NORMALIZED.UB"(i8* null) ]
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %DIR.OMP.SIMD.2
  %wide.trip.count = sext i32 %n to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.inner.for.body, %DIR.OMP.SIMD.1
  %indvars.iv = phi i64 [ 0, %DIR.OMP.SIMD.1 ], [ %indvars.iv.next, %omp.inner.for.body ]
  %arrayidx = getelementptr inbounds i32, i32* %a, i64 %indvars.iv
  %1 = load i32, i32* %arrayidx, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %arrayidx, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond, label %DIR.OMP.END.SIMD.3, label %omp.inner.for.body

DIR.OMP.END.SIMD.3:                               ; preds = %omp.inner.for.body
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %DIR.OMP.END.SIMD.3, %entry
  ret void
}

declare token @llvm.directive.region.entry() nounwind
declare void @llvm.directive.region.exit(token) nounwind
