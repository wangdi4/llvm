; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; Test to check that we make it obvious that vector loop backedge will never
; be taken when the scalar loop trip count is equal to VF.

; RUN: opt -S -vplan-vec -vplan-force-vf=8 -vplan-print-after-single-trip-count-opt < %s | FileCheck %s
; RUN: opt -S -passes="vplan-vec" -vplan-force-vf=8 -vplan-print-after-single-trip-count-opt < %s | FileCheck %s

; CHECK:          Condition(external): i1 true

; CHECK-LABEL: vector.body
; CHECK: br i1 true, label {{.*}}, label %vector.body
@arr = common dso_local local_unnamed_addr global i32* null, align 8

; Function Attrs: noinline norecurse nounwind uwtable
define dso_local void @foo(i32* %ptr) local_unnamed_addr #0 {
entry:
  %entry.region = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds i32, i32* %ptr, i64 %indvars.iv
  %trunc = trunc i64 %indvars.iv to i32
  store i32 %trunc, i32* %arrayidx, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 8
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  call void @llvm.directive.region.exit(token %entry.region) [ "DIR.OMP.END.SIMD"() ]
  ret void
}

declare token @llvm.directive.region.entry() nounwind
declare void @llvm.directive.region.exit(token) nounwind
