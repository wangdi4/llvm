; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py

; Test to check VPlan unroller for an auto-vectorized loop with SafeReduction.

; RUN: opt -S < %s -hir-ssa-deconstruction -hir-temp-cleanup -hir-vec-dir-insert -VPlanDriverHIR -vplan-force-vf=4 -vplan-force-uf=3 -vplan-print-after-unroll -print-after=VPlanDriverHIR -disable-output 2>&1 | FileCheck %s
; RUN: opt -S < %s -hir-ssa-deconstruction -hir-temp-cleanup -hir-vec-dir-insert -VPlanDriverHIR -vplan-force-vf=4 -vplan-force-uf=3 -enable-vp-value-codegen-hir -print-after=VPlanDriverHIR -disable-output 2>&1 | FileCheck %s --check-prefix=VPVALCG

; int foo(int *a, int n) {
;   int acc = 0;
;   for (int i = 0; i < n; i++) {
;     acc += a[i];
;   }
;   return acc;
; }

; Incoming HIR
; BEGIN REGION { }
;       %entry.region = @llvm.directive.region.entry(); [ DIR.VPO.AUTO.VEC() ]
;
;       + DO i1 = 0, zext.i32.i64(%n) + -1, 1   <DO_LOOP>  <MAX_TC_EST = 4294967295>
;       |   %acc.08 = (%a)[i1]  +  %acc.08; <Safe Reduction>
;       + END LOOP
;
;       @llvm.directive.region.exit(%entry.region); [ DIR.VPO.END.AUTO.VEC() ]
; END REGION


target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"
; Function Attrs: norecurse nounwind readonly uwtable
define dso_local i32 @foo(i32* nocapture readonly %a, i32 %n) local_unnamed_addr {
; CHECK-LABEL:  After VPlan loop unrolling
; CHECK-NEXT:  VPlan IR for: Initial VPlan for VF=4
; CHECK-NEXT:    [[BB0:BB[0-9]+]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB1:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]:
; CHECK-NEXT:     [DA: Uni] i64 [[VP0:%.*]] = zext i32 [[N0:%.*]] to i64
; CHECK-NEXT:     [DA: Uni] i64 [[VP1:%.*]] = add i64 [[VP0]] i64 -1
; CHECK-NEXT:     [DA: Div] i32 [[VP__RED_INIT:%.*]] = reduction-init i32 0 i32 [[ACC_080:%.*]]
; CHECK-NEXT:     [DA: Div] i64 [[VP__IND_INIT:%.*]] = induction-init{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Uni] i64 [[VP__IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:    SUCCESSORS(1):[[BB2:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]:
; CHECK-NEXT:     [DA: Div] i32 [[VP2:%.*]] = phi  [ i32 [[VP__RED_INIT]], [[BB1]] ],  [ i32 [[VP3:%.*]], cloned.[[BB3:BB[0-9]+]] ]
; CHECK-NEXT:     [DA: Div] i64 [[VP4:%.*]] = phi  [ i64 [[VP__IND_INIT]], [[BB1]] ],  [ i64 [[VP5:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] i32* [[VP6:%.*]] = getelementptr inbounds i32* [[A0:%.*]] i64 [[VP4]]
; CHECK-NEXT:     [DA: Div] i32 [[VP7:%.*]] = load i32* [[VP6]]
; CHECK-NEXT:     [DA: Div] i32 [[VP8:%.*]] = add i32 [[VP7]] i32 [[VP2]]
; CHECK-NEXT:     [DA: Div] i64 [[VP9:%.*]] = add i64 [[VP4]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP10:%.*]] = icmp i64 [[VP9]] i64 [[VP1]]
; CHECK-NEXT:    SUCCESSORS(1):cloned.[[BB4:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB1]] cloned.[[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB4]]:
; CHECK-NEXT:     [DA: Div] i32* [[VP11:%.*]] = getelementptr inbounds i32* [[A0]] i64 [[VP9]]
; CHECK-NEXT:     [DA: Div] i32 [[VP12:%.*]] = load i32* [[VP11]]
; CHECK-NEXT:     [DA: Div] i32 [[VP13:%.*]] = add i32 [[VP12]] i32 [[VP8]]
; CHECK-NEXT:     [DA: Div] i64 [[VP14:%.*]] = add i64 [[VP9]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP15:%.*]] = icmp i64 [[VP14]] i64 [[VP1]]
; CHECK-NEXT:    SUCCESSORS(1):cloned.[[BB3]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB3]]:
; CHECK-NEXT:     [DA: Div] i32* [[VP16:%.*]] = getelementptr inbounds i32* [[A0]] i64 [[VP14]]
; CHECK-NEXT:     [DA: Div] i32 [[VP17:%.*]] = load i32* [[VP16]]
; CHECK-NEXT:     [DA: Div] i32 [[VP3]] = add i32 [[VP17]] i32 [[VP13]]
; CHECK-NEXT:     [DA: Div] i64 [[VP5]] = add i64 [[VP14]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP18:%.*]] = icmp i64 [[VP5]] i64 [[VP1]]
; CHECK-NEXT:    SUCCESSORS(2):[[BB2]](i1 [[VP18]]), [[BB5:BB[0-9]+]](!i1 [[VP18]])
; CHECK-NEXT:    PREDECESSORS(1): cloned.[[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]:
; CHECK-NEXT:     [DA: Uni] i32 [[VP__RED_FINAL:%.*]] = reduction-final{u_add} i32 [[VP3]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP__IND_FINAL:%.*]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:    SUCCESSORS(1):[[BB6:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): cloned.[[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:  *** IR Dump After VPlan Vectorization Driver HIR ***
; CHECK-NEXT:  Function: foo
; CHECK-EMPTY:
; CHECK-NEXT:  <0>          BEGIN REGION { modified }
; CHECK-NEXT:  <14>               [[TGU0:%.*]] = (zext.i32.i64([[N0]]))/u12
; CHECK-NEXT:  <16>               if (0 <u 12 * [[TGU0]])
; CHECK-NEXT:  <16>               {
; CHECK-NEXT:  <18>                  [[RED_VAR0:%.*]] = 0
; CHECK-NEXT:  <19>                  [[RED_VAR0]] = insertelement [[RED_VAR0]],  [[ACC_080]],  0
; CHECK-NEXT:  <15>
; CHECK-NEXT:  <15>                  + DO i1 = 0, 12 * [[TGU0]] + -1, 12   <DO_LOOP>  <MAX_TC_EST = 357913941> <nounroll> <novectorize>
; CHECK-NEXT:  <20>                  |   [[DOTVEC0:%.*]] = (<4 x i32>*)([[A0]])[i1 + <i64 0, i64 1, i64 2, i64 3>]
; CHECK-NEXT:  <21>                  |   [[RED_VAR0]] = [[DOTVEC0]]  +  [[RED_VAR0]]
; CHECK-NEXT:  <22>                  |   [[DOTVEC20:%.*]] = (<4 x i32>*)([[A0]])[i1 + <i64 0, i64 1, i64 2, i64 3> + 4]
; CHECK-NEXT:  <23>                  |   [[RED_VAR0]] = [[DOTVEC20]]  +  [[RED_VAR0]]
; CHECK-NEXT:  <24>                  |   [[DOTVEC40:%.*]] = (<4 x i32>*)([[A0]])[i1 + <i64 0, i64 1, i64 2, i64 3> + 8]
; CHECK-NEXT:  <25>                  |   [[RED_VAR0]] = [[DOTVEC40]]  +  [[RED_VAR0]]
; CHECK-NEXT:  <15>                  + END LOOP
; CHECK-NEXT:  <15>
; CHECK-NEXT:  <26>                  [[ACC_080]] = @llvm.experimental.vector.reduce.add.v4i32([[RED_VAR0]])
; CHECK-NEXT:  <16>               }
; CHECK-NEXT:  <11>
; CHECK-NEXT:  <11>               + DO i1 = 12 * [[TGU0]], zext.i32.i64([[N0]]) + -1, 1   <DO_LOOP>  <MAX_TC_EST = 11> <nounroll> <novectorize> <max_trip_count = 11>
; CHECK-NEXT:  <4>                |   [[ACC_080]] = ([[A0]])[i1]  +  [[ACC_080]]
; CHECK-NEXT:  <11>               + END LOOP
; CHECK-NEXT:  <0>          END REGION
;
; VPVALCG-LABEL:  *** IR Dump After VPlan Vectorization Driver HIR ***
; VPVALCG-NEXT:  Function: foo
; VPVALCG-EMPTY:
; VPVALCG-NEXT:  <0>          BEGIN REGION { modified }
; VPVALCG-NEXT:  <14>               [[TGU0:%.*]] = (zext.i32.i64([[N0:%.*]]))/u12
; VPVALCG-NEXT:  <16>               if (0 <u 12 * [[TGU0]])
; VPVALCG-NEXT:  <16>               {
; VPVALCG-NEXT:  <18>                  [[RED_VAR0:%.*]] = 0
; VPVALCG-NEXT:  <19>                  [[RED_VAR0]] = insertelement [[RED_VAR0]],  [[ACC_080:%.*]],  0
; VPVALCG-NEXT:  <15>
; VPVALCG-NEXT:  <15>                  + DO i1 = 0, 12 * [[TGU0]] + -1, 12   <DO_LOOP>  <MAX_TC_EST = 357913941> <nounroll> <novectorize>
; VPVALCG-NEXT:  <20>                  |   [[DOTVEC0:%.*]] = (<4 x i32>*)([[A0:%.*]])[i1 + <i64 0, i64 1, i64 2, i64 3>]
; VPVALCG-NEXT:  <21>                  |   [[RED_VAR0]] = [[DOTVEC0]]  +  [[RED_VAR0]]
; VPVALCG-NEXT:  <22>                  |   [[DOTVEC20:%.*]] = (<4 x i32>*)([[A0]])[i1 + <i64 0, i64 1, i64 2, i64 3> + 4]
; VPVALCG-NEXT:  <23>                  |   [[RED_VAR0]] = [[DOTVEC20]]  +  [[RED_VAR0]]
; VPVALCG-NEXT:  <24>                  |   [[DOTVEC40:%.*]] = (<4 x i32>*)([[A0]])[i1 + <i64 0, i64 1, i64 2, i64 3> + 8]
; VPVALCG-NEXT:  <25>                  |   [[RED_VAR0]] = [[DOTVEC40]]  +  [[RED_VAR0]]
; VPVALCG-NEXT:  <15>                  + END LOOP
; VPVALCG-NEXT:  <15>
; VPVALCG-NEXT:  <26>                  [[ACC_080]] = @llvm.experimental.vector.reduce.add.v4i32([[RED_VAR0]])
; VPVALCG-NEXT:  <16>               }
; VPVALCG-NEXT:  <11>
; VPVALCG-NEXT:  <11>               + DO i1 = 12 * [[TGU0]], zext.i32.i64([[N0]]) + -1, 1   <DO_LOOP>  <MAX_TC_EST = 11> <nounroll> <novectorize> <max_trip_count = 11>
; VPVALCG-NEXT:  <4>                |   [[ACC_080]] = ([[A0]])[i1]  +  [[ACC_080]]
; VPVALCG-NEXT:  <11>               + END LOOP
; VPVALCG-NEXT:  <0>          END REGION
;
entry:
  %cmp6 = icmp sgt i32 %n, 0
  br i1 %cmp6, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  %wide.trip.count9 = zext i32 %n to i64
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %acc.08 = phi i32 [ 0, %for.body.preheader ], [ %add, %for.body ]
  %arrayidx = getelementptr inbounds i32, i32* %a, i64 %indvars.iv
  %0 = load i32, i32* %arrayidx, align 4
  %add = add nsw i32 %0, %acc.08
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count9
  br i1 %exitcond, label %for.end.loopexit, label %for.body

for.end.loopexit:                                 ; preds = %for.body
  %add.lcssa = phi i32 [ %add, %for.body ]
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  %acc.0.lcssa = phi i32 [ 0, %entry ], [ %add.lcssa, %for.end.loopexit ]
  ret i32 %acc.0.lcssa
}
