; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -vplan-vec-scenario="s1;v4;v2s1" \
; RUN: -disable-output -VPlanDriver -vplan-enable-new-cfg-merge \
; RUN: -vplan-enable-masked-variant \
; RUN: -print-after=VPlanDriver \
; RUN: -vplan-enable-peeling %s 2>&1 | FileCheck %s

target datalayout = "e-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024"
target triple = "x86_64-unknown-linux-gnu"

define void @test_store(i64* nocapture %ary, i32 %c) {
;
; CHECK-LABEL: @test_store(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label [[PEEL_CHECKZ31:%.*]]
; CHECK:       peel.checkz31:
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <4 x i64*> poison, i64* [[ARY:%.*]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <4 x i64*> [[BROADCAST_SPLATINSERT]], <4 x i64*> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint <4 x i64*> [[BROADCAST_SPLAT]] to <4 x i64>
; CHECK-NEXT:    [[DOTEXTRACT_0_:%.*]] = extractelement <4 x i64> [[TMP0]], i32 0
; CHECK-NEXT:    [[TMP1:%.*]] = udiv i64 [[DOTEXTRACT_0_]], 8
; CHECK-NEXT:    [[TMP2:%.*]] = mul i64 [[TMP1]], 3
; CHECK-NEXT:    [[TMP3:%.*]] = urem i64 [[TMP2]], 4
; CHECK-NEXT:    [[TMP4:%.*]] = icmp eq i64 0, [[TMP3]]
; CHECK-NEXT:    br i1 [[TMP4]], label [[MERGE_BLK29:%.*]], label [[PEEL_CHECKV32:%.*]]
; CHECK:       peel.checkv32:
; CHECK-NEXT:    [[TMP5:%.*]] = add i64 [[TMP3]], 4
; CHECK-NEXT:    [[TMP6:%.*]] = icmp ugt i64 [[TMP5]], 1024
; CHECK-NEXT:    br i1 [[TMP6]], label [[MERGE_BLK24:%.*]], label [[PEELBLK13:%.*]]
; CHECK:       PeelBlk13:
; CHECK-NEXT:    br label [[FOR_BODY_SL_CLONE:%.*]]
; CHECK:       VPlannedBB:
; CHECK-NEXT:    br label [[MERGE_BLK29]]
; CHECK:       merge.blk29:
; CHECK-NEXT:    [[UNI_PHI:%.*]] = phi i64 [ 0, [[PEEL_CHECKZ31]] ], [ [[INDVARS_IV_NEXT_SL_CLONE:%.*]], [[VPLANNEDBB:%.*]] ]
; CHECK-NEXT:    br label [[VPLANNEDBB1:%.*]]
; CHECK:       VPlannedBB1:
; CHECK-NEXT:    [[TMP7:%.*]] = add i64 [[TMP3]], 2
; CHECK-NEXT:    [[TMP8:%.*]] = icmp ugt i64 [[TMP7]], 1024
; CHECK-NEXT:    br i1 [[TMP8]], label [[MERGE_BLK24]], label [[VPLANNEDBB2:%.*]]
; CHECK:       VPlannedBB2:
; CHECK-NEXT:    [[TMP9:%.*]] = add i64 [[TMP3]], 4
; CHECK-NEXT:    [[TMP10:%.*]] = icmp ugt i64 [[TMP9]], 1024
; CHECK-NEXT:    br i1 [[TMP10]], label [[MERGE_BLK27:%.*]], label [[VPLANNEDBB3:%.*]]
; CHECK:       VPlannedBB3:
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT7:%.*]] = insertelement <4 x i32> poison, i32 [[C:%.*]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT8:%.*]] = shufflevector <4 x i32> [[BROADCAST_SPLATINSERT7]], <4 x i32> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    br label [[VPLANNEDBB4:%.*]]
; CHECK:       VPlannedBB4:
; CHECK-NEXT:    [[UNI_PHIIND_START_BCAST_SPLATINSERT:%.*]] = insertelement <4 x i64> poison, i64 [[UNI_PHI]], i32 0
; CHECK-NEXT:    [[UNI_PHIIND_START_BCAST_SPLAT:%.*]] = shufflevector <4 x i64> [[UNI_PHIIND_START_BCAST_SPLATINSERT]], <4 x i64> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP11:%.*]] = add <4 x i64> [[UNI_PHIIND_START_BCAST_SPLAT]], <i64 0, i64 1, i64 2, i64 3>
; CHECK-NEXT:    [[N_ADJST:%.*]] = sub nuw nsw i64 1024, [[TMP3]]
; CHECK-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[N_ADJST]], 4
; CHECK-NEXT:    [[N_VEC:%.*]] = sub nuw nsw i64 1024, [[N_MOD_VF]]
; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK:       vector.body:
; CHECK-NEXT:    [[UNI_PHI6:%.*]] = phi i64 [ [[UNI_PHI]], [[VPLANNEDBB4]] ], [ [[TMP16:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[VEC_PHI:%.*]] = phi <4 x i64> [ [[TMP11]], [[VPLANNEDBB4]] ], [ [[TMP15:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[SCALAR_GEP:%.*]] = getelementptr inbounds i64, i64* [[ARY]], i64 [[UNI_PHI6]]
; CHECK-NEXT:    [[TMP12:%.*]] = sext <4 x i32> [[BROADCAST_SPLAT8]] to <4 x i64>
; CHECK-NEXT:    [[TMP13:%.*]] = add <4 x i64> [[TMP12]], [[VEC_PHI]]
; CHECK-NEXT:    [[TMP14:%.*]] = bitcast i64* [[SCALAR_GEP]] to <4 x i64>*
; CHECK-NEXT:    store <4 x i64> [[TMP13]], <4 x i64>* [[TMP14]], align 8, !intel.preferred_alignment !0
; CHECK-NEXT:    [[TMP15]] = add nuw nsw <4 x i64> [[VEC_PHI]], <i64 4, i64 4, i64 4, i64 4>
; CHECK-NEXT:    [[TMP16]] = add nuw nsw i64 [[UNI_PHI6]], 4
; CHECK-NEXT:    [[TMP17:%.*]] = icmp ult i64 [[TMP16]], [[N_VEC]]
; CHECK-NEXT:    br i1 [[TMP17]], label [[VECTOR_BODY]], label [[VPLANNEDBB9:%.*]], !llvm.loop [[LOOP1:![0-9]+]]
; CHECK:       VPlannedBB9:
; CHECK-NEXT:    [[TMP18:%.*]] = mul i64 1, [[N_VEC]]
; CHECK-NEXT:    [[TMP19:%.*]] = add i64 0, [[TMP18]]
; CHECK-NEXT:    br label [[VPLANNEDBB10:%.*]]
; CHECK:       VPlannedBB10:
; CHECK-NEXT:    br label [[VPLANNEDBB11:%.*]]
; CHECK:       VPlannedBB11:
; CHECK-NEXT:    [[N_ADJST12:%.*]] = sub nuw nsw i64 1024, [[TMP3]]
; CHECK-NEXT:    [[N_MOD_VF13:%.*]] = urem i64 [[N_ADJST12]], 2
; CHECK-NEXT:    [[N_VEC14:%.*]] = sub nuw nsw i64 1024, [[N_MOD_VF13]]
; CHECK-NEXT:    [[TMP20:%.*]] = icmp eq i64 [[N_VEC14]], [[N_VEC]]
; CHECK-NEXT:    br i1 [[TMP20]], label [[MERGE_BLK24]], label [[MERGE_BLK27]]
; CHECK:       merge.blk27:
; CHECK-NEXT:    [[UNI_PHI15:%.*]] = phi i64 [ [[TMP19]], [[VPLANNEDBB11]] ], [ [[UNI_PHI]], [[VPLANNEDBB2]] ]
; CHECK-NEXT:    br label [[VPLANNEDBB16:%.*]]
; CHECK:       VPlannedBB16:
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT25:%.*]] = insertelement <2 x i32> poison, i32 [[C]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT26:%.*]] = shufflevector <2 x i32> [[BROADCAST_SPLATINSERT25]], <2 x i32> poison, <2 x i32> zeroinitializer
; CHECK-NEXT:    br label [[VPLANNEDBB17:%.*]]
; CHECK:       VPlannedBB17:
; CHECK-NEXT:    [[UNI_PHI15IND_START_BCAST_SPLATINSERT:%.*]] = insertelement <2 x i64> poison, i64 [[UNI_PHI15]], i32 0
; CHECK-NEXT:    [[UNI_PHI15IND_START_BCAST_SPLAT:%.*]] = shufflevector <2 x i64> [[UNI_PHI15IND_START_BCAST_SPLATINSERT]], <2 x i64> poison, <2 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP21:%.*]] = add <2 x i64> [[UNI_PHI15IND_START_BCAST_SPLAT]], <i64 0, i64 1>
; CHECK-NEXT:    [[N_ADJST18:%.*]] = sub nuw nsw i64 1024, [[TMP3]]
; CHECK-NEXT:    [[N_MOD_VF19:%.*]] = urem i64 [[N_ADJST18]], 2
; CHECK-NEXT:    [[N_VEC20:%.*]] = sub nuw nsw i64 1024, [[N_MOD_VF19]]
; CHECK-NEXT:    br label [[VPLANNEDBB21:%.*]]
; CHECK:       VPlannedBB21:
; CHECK-NEXT:    [[UNI_PHI22:%.*]] = phi i64 [ [[UNI_PHI15]], [[VPLANNEDBB17]] ], [ [[TMP26:%.*]], [[VPLANNEDBB21]] ]
; CHECK-NEXT:    [[VEC_PHI23:%.*]] = phi <2 x i64> [ [[TMP21]], [[VPLANNEDBB17]] ], [ [[TMP25:%.*]], [[VPLANNEDBB21]] ]
; CHECK-NEXT:    [[SCALAR_GEP24:%.*]] = getelementptr inbounds i64, i64* [[ARY]], i64 [[UNI_PHI22]]
; CHECK-NEXT:    [[TMP22:%.*]] = sext <2 x i32> [[BROADCAST_SPLAT26]] to <2 x i64>
; CHECK-NEXT:    [[TMP23:%.*]] = add <2 x i64> [[TMP22]], [[VEC_PHI23]]
; CHECK-NEXT:    [[TMP24:%.*]] = bitcast i64* [[SCALAR_GEP24]] to <2 x i64>*
; CHECK-NEXT:    store <2 x i64> [[TMP23]], <2 x i64>* [[TMP24]], align 8
; CHECK-NEXT:    [[TMP25]] = add nuw nsw <2 x i64> [[VEC_PHI23]], <i64 2, i64 2>
; CHECK-NEXT:    [[TMP26]] = add nuw nsw i64 [[UNI_PHI22]], 2
; CHECK-NEXT:    [[TMP27:%.*]] = icmp ult i64 [[TMP26]], [[N_VEC20]]
; CHECK-NEXT:    br i1 [[TMP27]], label [[VPLANNEDBB21]], label [[VPLANNEDBB27:%.*]]
; CHECK:       VPlannedBB27:
; CHECK-NEXT:    [[TMP28:%.*]] = mul i64 1, [[N_VEC20]]
; CHECK-NEXT:    [[TMP29:%.*]] = add i64 0, [[TMP28]]
; CHECK-NEXT:    br label [[VPLANNEDBB28:%.*]]
; CHECK:       VPlannedBB28:
; CHECK-NEXT:    br label [[VPLANNEDBB29:%.*]]
; CHECK:       VPlannedBB29:
; CHECK-NEXT:    [[N_ADJST30:%.*]] = sub nuw nsw i64 1024, [[TMP3]]
; CHECK-NEXT:    [[N_MOD_VF31:%.*]] = urem i64 [[N_ADJST30]], 2
; CHECK-NEXT:    [[N_VEC32:%.*]] = sub nuw nsw i64 1024, [[N_MOD_VF31]]
; CHECK-NEXT:    [[TMP30:%.*]] = icmp eq i64 1024, [[N_VEC32]]
; CHECK-NEXT:    br i1 [[TMP30]], label [[FINAL_MERGE:%.*]], label [[MERGE_BLK24]]
; CHECK:       merge.blk24:
; CHECK-NEXT:    [[UNI_PHI33:%.*]] = phi i64 [ [[TMP29]], [[VPLANNEDBB29]] ], [ [[TMP19]], [[VPLANNEDBB11]] ], [ 0, [[PEEL_CHECKV32]] ], [ [[UNI_PHI]], [[VPLANNEDBB1]] ]
; CHECK-NEXT:    br label [[REMBLK15:%.*]]
; CHECK:       RemBlk15:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       VPlannedBB34:
; CHECK-NEXT:    br label [[FINAL_MERGE]]
; CHECK:       final.merge:
; CHECK-NEXT:    [[UNI_PHI35:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[VPLANNEDBB34:%.*]] ], [ [[TMP29]], [[VPLANNEDBB29]] ]
; CHECK-NEXT:    br label [[FOR_END:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[UNI_PHI33]], [[REMBLK15]] ], [ [[INDVARS_IV_NEXT]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[PTR:%.*]] = getelementptr inbounds i64, i64* [[ARY]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[CC:%.*]] = sext i32 [[C]] to i64
; CHECK-NEXT:    [[ADD:%.*]] = add i64 [[CC]], [[INDVARS_IV]]
; CHECK-NEXT:    store i64 [[ADD]], i64* [[PTR]], align 8
; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK-NEXT:    [[CMP:%.*]] = icmp ult i64 [[INDVARS_IV_NEXT]], 1024
; CHECK-NEXT:    br i1 [[CMP]], label [[FOR_BODY]], label [[VPLANNEDBB34]], !llvm.loop [[LOOP3:![0-9]+]]
; CHECK:       for.body.sl.clone:
; CHECK-NEXT:    [[INDVARS_IV_SL_CLONE:%.*]] = phi i64 [ 0, [[PEELBLK13]] ], [ [[INDVARS_IV_NEXT_SL_CLONE]], [[FOR_BODY_SL_CLONE]] ]
; CHECK-NEXT:    [[PTR_SL_CLONE:%.*]] = getelementptr inbounds i64, i64* [[ARY]], i64 [[INDVARS_IV_SL_CLONE]]
; CHECK-NEXT:    [[CC_SL_CLONE:%.*]] = sext i32 [[C]] to i64
; CHECK-NEXT:    [[ADD_SL_CLONE:%.*]] = add i64 [[CC_SL_CLONE]], [[INDVARS_IV_SL_CLONE]]
; CHECK-NEXT:    store i64 [[ADD_SL_CLONE]], i64* [[PTR_SL_CLONE]], align 8
; CHECK-NEXT:    [[INDVARS_IV_NEXT_SL_CLONE]] = add nuw nsw i64 [[INDVARS_IV_SL_CLONE]], 1
; CHECK-NEXT:    [[CMP_SL_CLONE:%.*]] = icmp ult i64 [[INDVARS_IV_NEXT_SL_CLONE]], [[TMP3]]
; CHECK-NEXT:    br i1 [[CMP_SL_CLONE]], label [[FOR_BODY_SL_CLONE]], label [[VPLANNEDBB]], !llvm.loop [[LOOP5:![0-9]+]]
; CHECK:       for.end:
; CHECK-NEXT:    ret void
;
entry:
  %entry.region = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %for.body

for.body:
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %ptr = getelementptr inbounds i64, i64* %ary, i64 %indvars.iv
  %cc = sext i32 %c to i64
  %add = add i64 %cc, %indvars.iv
  store i64 %add, i64* %ptr, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %cmp = icmp ult i64 %indvars.iv.next, 1024
  br i1 %cmp, label %for.body, label %for.end

for.end:
  call void @llvm.directive.region.exit(token %entry.region) [ "DIR.OMP.END.SIMD"() ]
  ret void
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
