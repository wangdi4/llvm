; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -hir-ssa-deconstruction -hir-vec-dir-insert -hir-vplan-vec -vplan-force-vf=4 -disable-output -print-after=hir-vplan-vec  < %s 2>&1  | FileCheck %s

target triple = "x86_64-unknown-linux-gnu"
%struct.S1 = type { i64, double }

define dso_local void @foo(i32* noalias nocapture %arr, %struct.S1* noalias nocapture readonly %sarr) {
; CHECK:       BEGIN REGION { modified }
; CHECK-NEXT:        + DO i1 = 0, 99, 4   <DO_LOOP> <auto-vectorized> <novectorize>
; CHECK-NEXT:        |   [[DOTVLS_LOAD0:%.*]] = undef
; CHECK-NEXT:        |   [[DOTVEC0:%.*]] = i1 + <i64 0, i64 1, i64 2, i64 3> != 42
; CHECK-NEXT:        |   [[GEP_BASE0:%.*]] = &((double*)([[SARR0:%.*]])[i1].1)
; CHECK-NEXT:        |   [[VLS_MASK0:%.*]] = shufflevector [[DOTVEC0]],  zeroinitializer,  <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
; CHECK-NEXT:        |   [[DOTVLS_LOAD0]] = (<8 x i64>*)([[GEP_BASE0]])[-1]
; CHECK-NEXT:        |   [[VLS_EXTRACT0:%.*]] = shufflevector [[DOTVLS_LOAD0]],  [[DOTVLS_LOAD0]],  <i32 0, i32 2, i32 4, i32 6>
; CHECK-NEXT:        |   [[VLS_EXTRACT10:%.*]] = shufflevector [[DOTVLS_LOAD0]],  [[DOTVLS_LOAD0]],  <i32 1, i32 3, i32 5, i32 7>
; CHECK-NEXT:        |   [[VLS_EXTRACT_CAST0:%.*]] = bitcast.<4 x i64>.<4 x double>([[VLS_EXTRACT10]])
; CHECK-NEXT:        |   [[DOTVEC20:%.*]] = fptosi.<4 x double>.<4 x i64>([[VLS_EXTRACT_CAST0]])
; CHECK-NEXT:        |   (<4 x i32>*)([[ARR0:%.*]])[i1] = [[VLS_EXTRACT0]] + [[DOTVEC20]]
; CHECK-NEXT:        + END LOOP
; CHECK:       END REGION
;
entry:
  br label %header

header:
  %iv = phi i64 [ 0, %entry ], [ %iv.next, %latch ]
  %cond = icmp eq i64 %iv, 42
  br i1 %cond, label %latch, label %bb

bb:
  %b = getelementptr inbounds %struct.S1, %struct.S1* %sarr, i64 %iv, i32 1
  %0 = load double, double* %b, align 8
  %a = getelementptr inbounds %struct.S1, %struct.S1* %sarr, i64 %iv, i32 0
  %1 = load i64, i64* %a, align 8

  %cast = fptosi double %0 to i64
  %add = add nsw i64 %1, %cast
  %conv = trunc i64 %add to i32
  %ptridx2 = getelementptr inbounds i32, i32* %arr, i64 %iv
  store i32 %conv, i32* %ptridx2, align 4
  br label %latch

latch:
  %iv.next = add nuw nsw i64 %iv, 1
  %exitcond = icmp eq i64 %iv.next, 100
  br i1 %exitcond, label %for.end, label %header

for.end:
  ret void
}
