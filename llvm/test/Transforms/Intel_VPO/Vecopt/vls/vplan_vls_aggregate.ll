; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -S -passes=vplan-vec -disable-output -vplan-print-after-vls < %s | FileCheck %s

; Ensure we don't crash inside VLS transformation when facing aggregate types.

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%S = type { i64 }

define void @test1(ptr %p) {
; CHECK-LABEL:  VPlan after VPlan-to-VPlan VLS transformation:
; CHECK-NEXT:  VPlan IR for: test1:header
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] pushvf VF=4 UF=1
; CHECK-NEXT:     [DA: Uni] pushvf VF=4 UF=1
; CHECK-NEXT:     [DA: Uni] br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     [DA: Div] i64 [[VP_IV_IND_INIT:%.*]] = induction-init{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Uni] i64 [[VP_IV_IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:     [DA: Uni] i64 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i64 128, UF = 1
; CHECK-NEXT:     [DA: Uni] br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], [[BB2]]
; CHECK-NEXT:     [DA: Div] i64 [[VP_IV:%.*]] = phi  [ i64 [[VP_IV_IND_INIT]], [[BB1]] ],  [ i64 [[VP_IV_NEXT:%.*]], [[BB2]] ]
; CHECK-NEXT:     [DA: Div] i64 [[VP_IDX0:%.*]] = mul i64 [[VP_IV]] i64 2
; CHECK-NEXT:     [DA: Div] i64 [[VP_IDX1:%.*]] = add i64 [[VP_IDX0]] i64 1
; CHECK-NEXT:     [DA: Div] ptr [[VP_P0:%.*]] = getelementptr inbounds [[S0:%.*]], ptr [[P0:%.*]] i64 [[VP_IDX0]]
; CHECK-NEXT:     [DA: Div] ptr [[VP_P1:%.*]] = getelementptr inbounds [[S0]], ptr [[P0]] i64 [[VP_IDX1]]
; CHECK-NEXT:     [DA: Div] [[S0]] = type { i64 } [[VP_LD0:%.*]] = load ptr [[VP_P0]]
; CHECK-NEXT:     [DA: Div] [[S0]] = type { i64 } [[VP_LD1:%.*]] = load ptr [[VP_P1]]
; CHECK-NEXT:     [DA: Div] store [[S0]] = type { i64 } [[VP_LD0]] ptr [[VP_P1]]
; CHECK-NEXT:     [DA: Div] store [[S0]] = type { i64 } [[VP_LD1]] ptr [[VP_P0]]
; CHECK-NEXT:     [DA: Div] i64 [[VP_IV_NEXT]] = add i64 [[VP_IV]] i64 [[VP_IV_IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP_VECTOR_LOOP_EXITCOND:%.*]] = icmp uge i64 [[VP_IV_NEXT]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP_VECTOR_LOOP_EXITCOND]], [[BB3:BB[0-9]+]], [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: [[BB2]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP_IV_IND_FINAL:%.*]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Uni] br [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: [[BB3]]
; CHECK-NEXT:     [DA: Uni] popvf
; CHECK-NEXT:     [DA: Uni] br final.merge
; CHECK-EMPTY:
; CHECK-NEXT:    final.merge: # preds: [[BB4]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP0:%.*]] = phi-merge  [ i64 live-out0, [[BB4]] ]
; CHECK-NEXT:     [DA: Uni] popvf
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   no underlying for i64 [[VP_IV_IND_FINAL]]
;
entry:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.SIMDLEN"(i32 4) ]
  br label %header

header:
  %iv = phi i64 [ 0, %entry ], [ %iv.next, %header ]
  %idx0 = mul i64 %iv, 2
  %idx1 = add i64 %idx0, 1

  %p0 = getelementptr inbounds %S, ptr %p, i64 %idx0
  %p1 = getelementptr inbounds %S, ptr %p, i64 %idx1

  %ld0 = load %S, ptr %p0
  %ld1 = load %S, ptr %p1

  store %S %ld0, ptr %p1
  store %S %ld1, ptr %p0

  %iv.next = add nuw nsw i64 %iv, 1
  %exitcond = icmp eq i64 %iv.next, 128
  br i1 %exitcond, label %exit, label %header

exit:
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"() ]
  ret void
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
