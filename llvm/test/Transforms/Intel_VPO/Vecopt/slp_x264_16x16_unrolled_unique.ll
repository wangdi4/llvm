; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -slp-vectorizer -enable-intel-advanced-opts -mtriple=x86_64-unknown-linux-gnu -mcpu=skylake-avx512 -mattr=-prefer-256-bit -S | FileCheck %s -check-prefix=16WIDE

define internal i32 @x264_pixel_satd_16x16(i8* nocapture readonly %pix1, i32 %i_pix1, i8* nocapture readonly %pix2, i32 %i_pix2) {
; 16WIDE-LABEL: @x264_pixel_satd_16x16(
; 16WIDE-NEXT:  entry:
; 16WIDE-NEXT:    [[ALLOCA:%.*]] = alloca [16 x [8 x i32]], align 4
; 16WIDE-NEXT:    br label [[LOOP_1452:%.*]]
; 16WIDE:       loop.1452:
; 16WIDE-NEXT:    [[I1_I64_0:%.*]] = phi i64 [ 0, [[ENTRY:%.*]] ], [ [[NEXTIVLOOP_1452:%.*]], [[LOOP_1452]] ]
; 16WIDE-NEXT:    [[TMP0:%.*]] = sext i32 [[I_PIX1:%.*]] to i64
; 16WIDE-NEXT:    [[TMP1:%.*]] = shl nuw i64 [[I1_I64_0]], 1
; 16WIDE-NEXT:    [[TMP2:%.*]] = mul i64 [[TMP1]], [[TMP0]]
; 16WIDE-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, i8* [[PIX1:%.*]], i64 [[TMP2]]
; 16WIDE-NEXT:    [[TMP3:%.*]] = sext i32 [[I_PIX2:%.*]] to i64
; 16WIDE-NEXT:    [[TMP4:%.*]] = mul i64 [[TMP1]], [[TMP3]]
; 16WIDE-NEXT:    [[ARRAYIDX1020:%.*]] = getelementptr inbounds i8, i8* [[PIX2:%.*]], i64 [[TMP4]]
; 16WIDE-NEXT:    [[TMP5:%.*]] = add i64 [[TMP2]], 4
; 16WIDE-NEXT:    [[ARRAYIDX1022:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP5]]
; 16WIDE-NEXT:    [[TMP6:%.*]] = add i64 [[TMP4]], 4
; 16WIDE-NEXT:    [[ARRAYIDX1024:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP6]]
; 16WIDE-NEXT:    [[TMP7:%.*]] = or i64 [[TMP2]], 1
; 16WIDE-NEXT:    [[ARRAYIDX1026:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP7]]
; 16WIDE-NEXT:    [[TMP8:%.*]] = or i64 [[TMP4]], 1
; 16WIDE-NEXT:    [[ARRAYIDX1028:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP8]]
; 16WIDE-NEXT:    [[TMP9:%.*]] = add i64 [[TMP2]], 5
; 16WIDE-NEXT:    [[ARRAYIDX1030:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP9]]
; 16WIDE-NEXT:    [[TMP10:%.*]] = add i64 [[TMP4]], 5
; 16WIDE-NEXT:    [[ARRAYIDX1032:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP10]]
; 16WIDE-NEXT:    [[TMP11:%.*]] = add i64 [[TMP2]], 2
; 16WIDE-NEXT:    [[ARRAYIDX1034:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP11]]
; 16WIDE-NEXT:    [[TMP12:%.*]] = add i64 [[TMP4]], 2
; 16WIDE-NEXT:    [[ARRAYIDX1036:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP12]]
; 16WIDE-NEXT:    [[TMP13:%.*]] = add i64 [[TMP2]], 6
; 16WIDE-NEXT:    [[ARRAYIDX1038:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP13]]
; 16WIDE-NEXT:    [[TMP14:%.*]] = add i64 [[TMP4]], 6
; 16WIDE-NEXT:    [[ARRAYIDX1040:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP14]]
; 16WIDE-NEXT:    [[TMP15:%.*]] = add i64 [[TMP2]], 3
; 16WIDE-NEXT:    [[ARRAYIDX1042:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP15]]
; 16WIDE-NEXT:    [[TMP16:%.*]] = add i64 [[TMP4]], 3
; 16WIDE-NEXT:    [[ARRAYIDX1044:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP16]]
; 16WIDE-NEXT:    [[TMP17:%.*]] = add i64 [[TMP2]], 7
; 16WIDE-NEXT:    [[ARRAYIDX1046:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP17]]
; 16WIDE-NEXT:    [[TMP18:%.*]] = add i64 [[TMP4]], 7
; 16WIDE-NEXT:    [[ARRAYIDX1048:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP18]]
; 16WIDE-NEXT:    [[ARRAYIDX1050:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[TMP1]], i64 0
; 16WIDE-NEXT:    [[ARRAYIDX1052:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[TMP1]], i64 2
; 16WIDE-NEXT:    [[ARRAYIDX1070:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[TMP1]], i64 1
; 16WIDE-NEXT:    [[ARRAYIDX1088:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[TMP1]], i64 3
; 16WIDE-NEXT:    [[TMP19:%.*]] = add i64 [[TMP2]], 8
; 16WIDE-NEXT:    [[ARRAYIDX1105:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP19]]
; 16WIDE-NEXT:    [[TMP20:%.*]] = add i64 [[TMP4]], 8
; 16WIDE-NEXT:    [[ARRAYIDX1107:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP20]]
; 16WIDE-NEXT:    [[TMP21:%.*]] = add i64 [[TMP2]], 12
; 16WIDE-NEXT:    [[ARRAYIDX1109:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP21]]
; 16WIDE-NEXT:    [[TMP22:%.*]] = add i64 [[TMP4]], 12
; 16WIDE-NEXT:    [[ARRAYIDX1111:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP22]]
; 16WIDE-NEXT:    [[TMP23:%.*]] = add i64 [[TMP2]], 9
; 16WIDE-NEXT:    [[ARRAYIDX1113:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP23]]
; 16WIDE-NEXT:    [[TMP24:%.*]] = add i64 [[TMP4]], 9
; 16WIDE-NEXT:    [[ARRAYIDX1115:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP24]]
; 16WIDE-NEXT:    [[TMP25:%.*]] = add i64 [[TMP2]], 13
; 16WIDE-NEXT:    [[ARRAYIDX1117:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP25]]
; 16WIDE-NEXT:    [[TMP26:%.*]] = add i64 [[TMP4]], 13
; 16WIDE-NEXT:    [[ARRAYIDX1119:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP26]]
; 16WIDE-NEXT:    [[TMP27:%.*]] = add i64 [[TMP2]], 10
; 16WIDE-NEXT:    [[ARRAYIDX1121:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP27]]
; 16WIDE-NEXT:    [[TMP28:%.*]] = add i64 [[TMP4]], 10
; 16WIDE-NEXT:    [[ARRAYIDX1123:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP28]]
; 16WIDE-NEXT:    [[TMP29:%.*]] = add i64 [[TMP2]], 14
; 16WIDE-NEXT:    [[ARRAYIDX1125:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP29]]
; 16WIDE-NEXT:    [[TMP30:%.*]] = add i64 [[TMP4]], 14
; 16WIDE-NEXT:    [[ARRAYIDX1127:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP30]]
; 16WIDE-NEXT:    [[TMP31:%.*]] = add i64 [[TMP2]], 11
; 16WIDE-NEXT:    [[ARRAYIDX1129:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP31]]
; 16WIDE-NEXT:    [[TMP32:%.*]] = bitcast i8* [[ARRAYIDX]] to <4 x i8>*
; 16WIDE-NEXT:    [[TMP33:%.*]] = load <4 x i8>, <4 x i8>* [[TMP32]], align 1
; 16WIDE-NEXT:    [[TMP34:%.*]] = bitcast i8* [[ARRAYIDX1105]] to <4 x i8>*
; 16WIDE-NEXT:    [[TMP35:%.*]] = load <4 x i8>, <4 x i8>* [[TMP34]], align 1
; 16WIDE-NEXT:    [[SPLITLOADSHUFFLE18:%.*]] = shufflevector <4 x i8> [[TMP33]], <4 x i8> [[TMP35]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; 16WIDE-NEXT:    [[TMP36:%.*]] = add i64 [[TMP4]], 11
; 16WIDE-NEXT:    [[ARRAYIDX1131:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP36]]
; 16WIDE-NEXT:    [[TMP37:%.*]] = bitcast i8* [[ARRAYIDX1020]] to <4 x i8>*
; 16WIDE-NEXT:    [[TMP38:%.*]] = load <4 x i8>, <4 x i8>* [[TMP37]], align 1
; 16WIDE-NEXT:    [[TMP39:%.*]] = bitcast i8* [[ARRAYIDX1107]] to <4 x i8>*
; 16WIDE-NEXT:    [[TMP40:%.*]] = load <4 x i8>, <4 x i8>* [[TMP39]], align 1
; 16WIDE-NEXT:    [[SPLITLOADSHUFFLE16:%.*]] = shufflevector <4 x i8> [[TMP38]], <4 x i8> [[TMP40]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; 16WIDE-NEXT:    [[TMP41:%.*]] = add i64 [[TMP2]], 15
; 16WIDE-NEXT:    [[ARRAYIDX1133:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP41]]
; 16WIDE-NEXT:    [[TMP42:%.*]] = bitcast i8* [[ARRAYIDX1022]] to <4 x i8>*
; 16WIDE-NEXT:    [[TMP43:%.*]] = load <4 x i8>, <4 x i8>* [[TMP42]], align 1
; 16WIDE-NEXT:    [[TMP44:%.*]] = bitcast i8* [[ARRAYIDX1109]] to <4 x i8>*
; 16WIDE-NEXT:    [[TMP45:%.*]] = load <4 x i8>, <4 x i8>* [[TMP44]], align 1
; 16WIDE-NEXT:    [[SPLITLOADSHUFFLE:%.*]] = shufflevector <4 x i8> [[TMP43]], <4 x i8> [[TMP45]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; 16WIDE-NEXT:    [[TMP46:%.*]] = add i64 [[TMP4]], 15
; 16WIDE-NEXT:    [[ARRAYIDX1135:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP46]]
; 16WIDE-NEXT:    [[TMP47:%.*]] = bitcast i8* [[ARRAYIDX1024]] to <4 x i8>*
; 16WIDE-NEXT:    [[TMP48:%.*]] = load <4 x i8>, <4 x i8>* [[TMP47]], align 1
; 16WIDE-NEXT:    [[TMP49:%.*]] = bitcast i8* [[ARRAYIDX1111]] to <4 x i8>*
; 16WIDE-NEXT:    [[TMP50:%.*]] = load <4 x i8>, <4 x i8>* [[TMP49]], align 1
; 16WIDE-NEXT:    [[SPLITLOADSHUFFLE17:%.*]] = shufflevector <4 x i8> [[TMP48]], <4 x i8> [[TMP50]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; 16WIDE-NEXT:    [[ARRAYIDX1138:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[TMP1]], i64 4
; 16WIDE-NEXT:    [[TMP51:%.*]] = zext <8 x i8> [[SPLITLOADSHUFFLE18]] to <8 x i32>
; 16WIDE-NEXT:    [[TMP52:%.*]] = zext <8 x i8> [[SPLITLOADSHUFFLE]] to <8 x i32>
; 16WIDE-NEXT:    [[TMP53:%.*]] = zext <8 x i8> [[SPLITLOADSHUFFLE17]] to <8 x i32>
; 16WIDE-NEXT:    [[TMP54:%.*]] = zext <8 x i8> [[SPLITLOADSHUFFLE16]] to <8 x i32>
; 16WIDE-NEXT:    [[TMP55:%.*]] = shl nsw <8 x i32> [[TMP52]], <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
; 16WIDE-NEXT:    [[TMP56:%.*]] = shl nsw <8 x i32> [[TMP53]], <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
; 16WIDE-NEXT:    [[TMP57:%.*]] = sub nsw <8 x i32> [[TMP55]], [[TMP54]]
; 16WIDE-NEXT:    [[TMP58:%.*]] = sub nsw <8 x i32> [[TMP57]], [[TMP56]]
; 16WIDE-NEXT:    [[TMP59:%.*]] = add nsw <8 x i32> [[TMP58]], [[TMP51]]
; 16WIDE-NEXT:    [[ARRAYIDX1140:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[TMP1]], i64 6
; 16WIDE-NEXT:    [[ARRAYIDX1158:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[TMP1]], i64 5
; 16WIDE-NEXT:    [[ARRAYIDX1176:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[TMP1]], i64 7
; 16WIDE-NEXT:    [[TMP60:%.*]] = extractelement <8 x i32> [[TMP59]], i32 3
; 16WIDE-NEXT:    [[TMP61:%.*]] = insertelement <8 x i32> poison, i32 [[TMP60]], i32 0
; 16WIDE-NEXT:    [[TMP62:%.*]] = extractelement <8 x i32> [[TMP59]], i32 2
; 16WIDE-NEXT:    [[TMP63:%.*]] = insertelement <8 x i32> [[TMP61]], i32 [[TMP62]], i32 1
; 16WIDE-NEXT:    [[TMP64:%.*]] = extractelement <8 x i32> [[TMP59]], i32 0
; 16WIDE-NEXT:    [[TMP65:%.*]] = insertelement <8 x i32> [[TMP63]], i32 [[TMP64]], i32 2
; 16WIDE-NEXT:    [[TMP66:%.*]] = extractelement <8 x i32> [[TMP59]], i32 7
; 16WIDE-NEXT:    [[TMP67:%.*]] = insertelement <8 x i32> [[TMP65]], i32 [[TMP66]], i32 3
; 16WIDE-NEXT:    [[TMP68:%.*]] = extractelement <8 x i32> [[TMP59]], i32 6
; 16WIDE-NEXT:    [[TMP69:%.*]] = insertelement <8 x i32> [[TMP67]], i32 [[TMP68]], i32 4
; 16WIDE-NEXT:    [[TMP70:%.*]] = extractelement <8 x i32> [[TMP59]], i32 4
; 16WIDE-NEXT:    [[TMP71:%.*]] = insertelement <8 x i32> [[TMP69]], i32 [[TMP70]], i32 5
; 16WIDE-NEXT:    [[SHUFFLE:%.*]] = shufflevector <8 x i32> [[TMP71]], <8 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 2, i32 3, i32 4, i32 5, i32 5>
; 16WIDE-NEXT:    [[TMP72:%.*]] = insertelement <8 x i32> poison, i32 [[TMP62]], i32 0
; 16WIDE-NEXT:    [[TMP73:%.*]] = insertelement <8 x i32> [[TMP72]], i32 [[TMP60]], i32 1
; 16WIDE-NEXT:    [[TMP74:%.*]] = insertelement <8 x i32> [[TMP73]], i32 [[TMP68]], i32 2
; 16WIDE-NEXT:    [[TMP75:%.*]] = insertelement <8 x i32> [[TMP74]], i32 [[TMP66]], i32 3
; 16WIDE-NEXT:    [[SHUFFLE15:%.*]] = shufflevector <8 x i32> [[TMP75]], <8 x i32> poison, <8 x i32> <i32 0, i32 1, i32 1, i32 0, i32 2, i32 3, i32 3, i32 2>
; 16WIDE-NEXT:    [[TMP76:%.*]] = add nsw <8 x i32> [[SHUFFLE]], [[SHUFFLE15]]
; 16WIDE-NEXT:    [[TMP77:%.*]] = sub nsw <8 x i32> [[SHUFFLE]], [[SHUFFLE15]]
; 16WIDE-NEXT:    [[TMP78:%.*]] = shufflevector <8 x i32> [[TMP76]], <8 x i32> [[TMP77]], <8 x i32> <i32 0, i32 9, i32 10, i32 11, i32 4, i32 13, i32 14, i32 15>
; 16WIDE-NEXT:    [[TMP79:%.*]] = add nsw <8 x i32> [[TMP78]], [[TMP59]]
; 16WIDE-NEXT:    [[TMP80:%.*]] = sub nsw <8 x i32> [[TMP78]], [[TMP59]]
; 16WIDE-NEXT:    [[TMP81:%.*]] = shufflevector <8 x i32> [[TMP79]], <8 x i32> [[TMP80]], <8 x i32> <i32 0, i32 9, i32 10, i32 3, i32 4, i32 13, i32 14, i32 7>
; 16WIDE-NEXT:    [[TMP82:%.*]] = extractelement <8 x i32> [[TMP59]], i32 1
; 16WIDE-NEXT:    [[TMP83:%.*]] = insertelement <8 x i32> poison, i32 [[TMP82]], i32 0
; 16WIDE-NEXT:    [[TMP84:%.*]] = insertelement <8 x i32> [[TMP83]], i32 [[TMP64]], i32 1
; 16WIDE-NEXT:    [[TMP85:%.*]] = extractelement <8 x i32> [[TMP59]], i32 5
; 16WIDE-NEXT:    [[TMP86:%.*]] = insertelement <8 x i32> [[TMP84]], i32 [[TMP85]], i32 2
; 16WIDE-NEXT:    [[TMP87:%.*]] = insertelement <8 x i32> [[TMP86]], i32 [[TMP70]], i32 3
; 16WIDE-NEXT:    [[SHUFFLE19:%.*]] = shufflevector <8 x i32> [[TMP87]], <8 x i32> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 0, i32 2, i32 3, i32 2, i32 2>
; 16WIDE-NEXT:    [[TMP88:%.*]] = add nsw <8 x i32> [[TMP81]], [[SHUFFLE19]]
; 16WIDE-NEXT:    [[TMP89:%.*]] = sub nsw <8 x i32> [[TMP81]], [[SHUFFLE19]]
; 16WIDE-NEXT:    [[TMP90:%.*]] = shufflevector <8 x i32> [[TMP88]], <8 x i32> [[TMP89]], <8 x i32> <i32 0, i32 1, i32 2, i32 11, i32 4, i32 5, i32 6, i32 15>
; 16WIDE-NEXT:    [[TMP91:%.*]] = bitcast i32* [[ARRAYIDX1050]] to <8 x i32>*
; 16WIDE-NEXT:    store <8 x i32> [[TMP90]], <8 x i32>* [[TMP91]], align 4
; 16WIDE-NEXT:    [[TMP92:%.*]] = add i64 [[TMP2]], [[TMP0]]
; 16WIDE-NEXT:    [[ARRAYIDX1193:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP92]]
; 16WIDE-NEXT:    [[TMP93:%.*]] = add i64 [[TMP4]], [[TMP3]]
; 16WIDE-NEXT:    [[ARRAYIDX1195:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP93]]
; 16WIDE-NEXT:    [[BRIDGE_T820_:%.*]] = add nsw i64 4, [[TMP92]]
; 16WIDE-NEXT:    [[ARRAYIDX1197:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[BRIDGE_T820_]]
; 16WIDE-NEXT:    [[BRIDGE_T819_:%.*]] = add nsw i64 4, [[TMP93]]
; 16WIDE-NEXT:    [[ARRAYIDX1199:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[BRIDGE_T819_]]
; 16WIDE-NEXT:    [[BRIDGE_T818_:%.*]] = add nsw i64 1, [[TMP92]]
; 16WIDE-NEXT:    [[ARRAYIDX1201:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[BRIDGE_T818_]]
; 16WIDE-NEXT:    [[BRIDGE_T817_:%.*]] = add nsw i64 1, [[TMP93]]
; 16WIDE-NEXT:    [[ARRAYIDX1203:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[BRIDGE_T817_]]
; 16WIDE-NEXT:    [[BRIDGE_T816_:%.*]] = add nsw i64 5, [[TMP92]]
; 16WIDE-NEXT:    [[ARRAYIDX1205:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[BRIDGE_T816_]]
; 16WIDE-NEXT:    [[BRIDGE_T815_:%.*]] = add nsw i64 5, [[TMP93]]
; 16WIDE-NEXT:    [[ARRAYIDX1207:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[BRIDGE_T815_]]
; 16WIDE-NEXT:    [[BRIDGE_T814_:%.*]] = add nsw i64 2, [[TMP92]]
; 16WIDE-NEXT:    [[ARRAYIDX1209:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[BRIDGE_T814_]]
; 16WIDE-NEXT:    [[BRIDGE_T813_:%.*]] = add nsw i64 2, [[TMP93]]
; 16WIDE-NEXT:    [[ARRAYIDX1211:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[BRIDGE_T813_]]
; 16WIDE-NEXT:    [[BRIDGE_T812_:%.*]] = add nsw i64 6, [[TMP92]]
; 16WIDE-NEXT:    [[ARRAYIDX1213:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[BRIDGE_T812_]]
; 16WIDE-NEXT:    [[BRIDGE_T811_:%.*]] = add nsw i64 6, [[TMP93]]
; 16WIDE-NEXT:    [[ARRAYIDX1215:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[BRIDGE_T811_]]
; 16WIDE-NEXT:    [[BRIDGE_T810_:%.*]] = add nsw i64 3, [[TMP92]]
; 16WIDE-NEXT:    [[ARRAYIDX1217:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[BRIDGE_T810_]]
; 16WIDE-NEXT:    [[TMP94:%.*]] = bitcast i8* [[ARRAYIDX1193]] to <4 x i8>*
; 16WIDE-NEXT:    [[TMP95:%.*]] = load <4 x i8>, <4 x i8>* [[TMP94]], align 1
; 16WIDE-NEXT:    [[BRIDGE_T809_:%.*]] = add nsw i64 3, [[TMP93]]
; 16WIDE-NEXT:    [[ARRAYIDX1219:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[BRIDGE_T809_]]
; 16WIDE-NEXT:    [[TMP96:%.*]] = bitcast i8* [[ARRAYIDX1195]] to <4 x i8>*
; 16WIDE-NEXT:    [[TMP97:%.*]] = load <4 x i8>, <4 x i8>* [[TMP96]], align 1
; 16WIDE-NEXT:    [[BRIDGE_T808_:%.*]] = add nsw i64 7, [[TMP92]]
; 16WIDE-NEXT:    [[ARRAYIDX1221:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[BRIDGE_T808_]]
; 16WIDE-NEXT:    [[TMP98:%.*]] = bitcast i8* [[ARRAYIDX1197]] to <4 x i8>*
; 16WIDE-NEXT:    [[TMP99:%.*]] = load <4 x i8>, <4 x i8>* [[TMP98]], align 1
; 16WIDE-NEXT:    [[BRIDGE_T807_:%.*]] = add nsw i64 7, [[TMP93]]
; 16WIDE-NEXT:    [[ARRAYIDX1223:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[BRIDGE_T807_]]
; 16WIDE-NEXT:    [[TMP100:%.*]] = bitcast i8* [[ARRAYIDX1199]] to <4 x i8>*
; 16WIDE-NEXT:    [[TMP101:%.*]] = load <4 x i8>, <4 x i8>* [[TMP100]], align 1
; 16WIDE-NEXT:    [[TMP102:%.*]] = or i64 [[TMP1]], 1
; 16WIDE-NEXT:    [[ARRAYIDX1226:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[TMP102]], i64 0
; 16WIDE-NEXT:    [[ARRAYIDX1244:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[TMP102]], i64 2
; 16WIDE-NEXT:    [[ARRAYIDX1262:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[TMP102]], i64 1
; 16WIDE-NEXT:    [[ARRAYIDX1280:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[TMP102]], i64 3
; 16WIDE-NEXT:    [[BRIDGE_T795_:%.*]] = add nsw i64 8, [[TMP92]]
; 16WIDE-NEXT:    [[ARRAYIDX1297:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[BRIDGE_T795_]]
; 16WIDE-NEXT:    [[BRIDGE_T794_:%.*]] = add nsw i64 8, [[TMP93]]
; 16WIDE-NEXT:    [[ARRAYIDX1299:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[BRIDGE_T794_]]
; 16WIDE-NEXT:    [[BRIDGE_T793_:%.*]] = add nsw i64 12, [[TMP92]]
; 16WIDE-NEXT:    [[ARRAYIDX1301:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[BRIDGE_T793_]]
; 16WIDE-NEXT:    [[BRIDGE_T792_:%.*]] = add nsw i64 12, [[TMP93]]
; 16WIDE-NEXT:    [[ARRAYIDX1303:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[BRIDGE_T792_]]
; 16WIDE-NEXT:    [[BRIDGE_T791_:%.*]] = add nsw i64 9, [[TMP92]]
; 16WIDE-NEXT:    [[ARRAYIDX1305:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[BRIDGE_T791_]]
; 16WIDE-NEXT:    [[BRIDGE_T790_:%.*]] = add nsw i64 9, [[TMP93]]
; 16WIDE-NEXT:    [[ARRAYIDX1307:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[BRIDGE_T790_]]
; 16WIDE-NEXT:    [[BRIDGE_T789_:%.*]] = add nsw i64 13, [[TMP92]]
; 16WIDE-NEXT:    [[ARRAYIDX1309:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[BRIDGE_T789_]]
; 16WIDE-NEXT:    [[BRIDGE_T788_:%.*]] = add nsw i64 13, [[TMP93]]
; 16WIDE-NEXT:    [[ARRAYIDX1311:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[BRIDGE_T788_]]
; 16WIDE-NEXT:    [[BRIDGE_T787_:%.*]] = add nsw i64 10, [[TMP92]]
; 16WIDE-NEXT:    [[ARRAYIDX1313:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[BRIDGE_T787_]]
; 16WIDE-NEXT:    [[BRIDGE_T786_:%.*]] = add nsw i64 10, [[TMP93]]
; 16WIDE-NEXT:    [[ARRAYIDX1315:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[BRIDGE_T786_]]
; 16WIDE-NEXT:    [[BRIDGE_T785_:%.*]] = add nsw i64 14, [[TMP92]]
; 16WIDE-NEXT:    [[ARRAYIDX1317:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[BRIDGE_T785_]]
; 16WIDE-NEXT:    [[BRIDGE_T784_:%.*]] = add nsw i64 14, [[TMP93]]
; 16WIDE-NEXT:    [[ARRAYIDX1319:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[BRIDGE_T784_]]
; 16WIDE-NEXT:    [[BRIDGE_T783_:%.*]] = add nsw i64 11, [[TMP92]]
; 16WIDE-NEXT:    [[ARRAYIDX1321:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[BRIDGE_T783_]]
; 16WIDE-NEXT:    [[TMP103:%.*]] = bitcast i8* [[ARRAYIDX1297]] to <4 x i8>*
; 16WIDE-NEXT:    [[TMP104:%.*]] = load <4 x i8>, <4 x i8>* [[TMP103]], align 1
; 16WIDE-NEXT:    [[BRIDGE_T782_:%.*]] = add nsw i64 11, [[TMP93]]
; 16WIDE-NEXT:    [[ARRAYIDX1323:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[BRIDGE_T782_]]
; 16WIDE-NEXT:    [[TMP105:%.*]] = bitcast i8* [[ARRAYIDX1299]] to <4 x i8>*
; 16WIDE-NEXT:    [[TMP106:%.*]] = load <4 x i8>, <4 x i8>* [[TMP105]], align 1
; 16WIDE-NEXT:    [[BRIDGE_T781_:%.*]] = add nsw i64 15, [[TMP92]]
; 16WIDE-NEXT:    [[ARRAYIDX1325:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[BRIDGE_T781_]]
; 16WIDE-NEXT:    [[TMP107:%.*]] = bitcast i8* [[ARRAYIDX1301]] to <4 x i8>*
; 16WIDE-NEXT:    [[TMP108:%.*]] = load <4 x i8>, <4 x i8>* [[TMP107]], align 1
; 16WIDE-NEXT:    [[BRIDGE_T780_:%.*]] = add nsw i64 15, [[TMP93]]
; 16WIDE-NEXT:    [[ARRAYIDX1327:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[BRIDGE_T780_]]
; 16WIDE-NEXT:    [[TMP109:%.*]] = bitcast i8* [[ARRAYIDX1303]] to <4 x i8>*
; 16WIDE-NEXT:    [[TMP110:%.*]] = load <4 x i8>, <4 x i8>* [[TMP109]], align 1
; 16WIDE-NEXT:    [[ARRAYIDX1330:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[TMP102]], i64 4
; 16WIDE-NEXT:    [[TMP111:%.*]] = shufflevector <4 x i8> [[TMP97]], <4 x i8> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
; 16WIDE-NEXT:    [[TMP112:%.*]] = shufflevector <4 x i8> [[TMP104]], <4 x i8> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
; 16WIDE-NEXT:    [[TMP113:%.*]] = shufflevector <8 x i8> [[TMP111]], <8 x i8> [[TMP112]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
; 16WIDE-NEXT:    [[TMP114:%.*]] = zext <8 x i8> [[TMP113]] to <8 x i32>
; 16WIDE-NEXT:    [[TMP115:%.*]] = shufflevector <4 x i8> [[TMP101]], <4 x i8> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
; 16WIDE-NEXT:    [[TMP116:%.*]] = shufflevector <4 x i8> [[TMP108]], <4 x i8> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
; 16WIDE-NEXT:    [[TMP117:%.*]] = shufflevector <8 x i8> [[TMP115]], <8 x i8> [[TMP116]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
; 16WIDE-NEXT:    [[TMP118:%.*]] = zext <8 x i8> [[TMP117]] to <8 x i32>
; 16WIDE-NEXT:    [[TMP119:%.*]] = shufflevector <4 x i8> [[TMP99]], <4 x i8> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
; 16WIDE-NEXT:    [[TMP120:%.*]] = shufflevector <4 x i8> [[TMP110]], <4 x i8> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
; 16WIDE-NEXT:    [[TMP121:%.*]] = shufflevector <8 x i8> [[TMP119]], <8 x i8> [[TMP120]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
; 16WIDE-NEXT:    [[TMP122:%.*]] = zext <8 x i8> [[TMP121]] to <8 x i32>
; 16WIDE-NEXT:    [[TMP123:%.*]] = shufflevector <4 x i8> [[TMP95]], <4 x i8> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
; 16WIDE-NEXT:    [[TMP124:%.*]] = shufflevector <4 x i8> [[TMP106]], <4 x i8> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
; 16WIDE-NEXT:    [[TMP125:%.*]] = shufflevector <8 x i8> [[TMP123]], <8 x i8> [[TMP124]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
; 16WIDE-NEXT:    [[TMP126:%.*]] = zext <8 x i8> [[TMP125]] to <8 x i32>
; 16WIDE-NEXT:    [[TMP127:%.*]] = shl nsw <8 x i32> [[TMP118]], <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
; 16WIDE-NEXT:    [[TMP128:%.*]] = shl nsw <8 x i32> [[TMP122]], <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
; 16WIDE-NEXT:    [[TMP129:%.*]] = sub nsw <8 x i32> [[TMP127]], [[TMP126]]
; 16WIDE-NEXT:    [[TMP130:%.*]] = sub nsw <8 x i32> [[TMP129]], [[TMP128]]
; 16WIDE-NEXT:    [[TMP131:%.*]] = add nsw <8 x i32> [[TMP130]], [[TMP114]]
; 16WIDE-NEXT:    [[ARRAYIDX1348:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[TMP102]], i64 6
; 16WIDE-NEXT:    [[ARRAYIDX1366:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[TMP102]], i64 5
; 16WIDE-NEXT:    [[ARRAYIDX1384:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[TMP102]], i64 7
; 16WIDE-NEXT:    [[TMP132:%.*]] = extractelement <8 x i32> [[TMP131]], i32 3
; 16WIDE-NEXT:    [[TMP133:%.*]] = insertelement <8 x i32> poison, i32 [[TMP132]], i32 0
; 16WIDE-NEXT:    [[TMP134:%.*]] = extractelement <8 x i32> [[TMP131]], i32 2
; 16WIDE-NEXT:    [[TMP135:%.*]] = insertelement <8 x i32> [[TMP133]], i32 [[TMP134]], i32 1
; 16WIDE-NEXT:    [[TMP136:%.*]] = extractelement <8 x i32> [[TMP131]], i32 7
; 16WIDE-NEXT:    [[TMP137:%.*]] = insertelement <8 x i32> [[TMP135]], i32 [[TMP136]], i32 2
; 16WIDE-NEXT:    [[TMP138:%.*]] = extractelement <8 x i32> [[TMP131]], i32 6
; 16WIDE-NEXT:    [[TMP139:%.*]] = insertelement <8 x i32> [[TMP137]], i32 [[TMP138]], i32 3
; 16WIDE-NEXT:    [[TMP140:%.*]] = extractelement <8 x i32> [[TMP131]], i32 4
; 16WIDE-NEXT:    [[TMP141:%.*]] = insertelement <8 x i32> [[TMP139]], i32 [[TMP140]], i32 4
; 16WIDE-NEXT:    [[SHUFFLE26:%.*]] = shufflevector <8 x i32> [[TMP141]], <8 x i32> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 1, i32 2, i32 3, i32 4, i32 4>
; 16WIDE-NEXT:    [[TMP142:%.*]] = insertelement <8 x i32> poison, i32 [[TMP134]], i32 0
; 16WIDE-NEXT:    [[TMP143:%.*]] = extractelement <8 x i32> [[TMP131]], i32 0
; 16WIDE-NEXT:    [[TMP144:%.*]] = insertelement <8 x i32> [[TMP142]], i32 [[TMP143]], i32 1
; 16WIDE-NEXT:    [[TMP145:%.*]] = insertelement <8 x i32> [[TMP144]], i32 [[TMP138]], i32 2
; 16WIDE-NEXT:    [[TMP146:%.*]] = insertelement <8 x i32> [[TMP145]], i32 [[TMP136]], i32 3
; 16WIDE-NEXT:    [[SHUFFLE27:%.*]] = shufflevector <8 x i32> [[TMP146]], <8 x i32> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 3, i32 3, i32 2>
; 16WIDE-NEXT:    [[TMP147:%.*]] = add nsw <8 x i32> [[SHUFFLE26]], [[SHUFFLE27]]
; 16WIDE-NEXT:    [[TMP148:%.*]] = sub nsw <8 x i32> [[SHUFFLE26]], [[SHUFFLE27]]
; 16WIDE-NEXT:    [[TMP149:%.*]] = shufflevector <8 x i32> [[TMP147]], <8 x i32> [[TMP148]], <8 x i32> <i32 0, i32 9, i32 10, i32 11, i32 4, i32 13, i32 14, i32 15>
; 16WIDE-NEXT:    [[TMP150:%.*]] = add nsw <8 x i32> [[TMP149]], [[TMP131]]
; 16WIDE-NEXT:    [[TMP151:%.*]] = sub nsw <8 x i32> [[TMP149]], [[TMP131]]
; 16WIDE-NEXT:    [[TMP152:%.*]] = shufflevector <8 x i32> [[TMP150]], <8 x i32> [[TMP151]], <8 x i32> <i32 0, i32 1, i32 2, i32 11, i32 4, i32 13, i32 14, i32 7>
; 16WIDE-NEXT:    [[TMP153:%.*]] = extractelement <8 x i32> [[TMP131]], i32 1
; 16WIDE-NEXT:    [[TMP154:%.*]] = insertelement <8 x i32> poison, i32 [[TMP153]], i32 0
; 16WIDE-NEXT:    [[TMP155:%.*]] = insertelement <8 x i32> [[TMP154]], i32 [[TMP143]], i32 1
; 16WIDE-NEXT:    [[TMP156:%.*]] = extractelement <8 x i32> [[TMP131]], i32 5
; 16WIDE-NEXT:    [[TMP157:%.*]] = insertelement <8 x i32> [[TMP155]], i32 [[TMP156]], i32 2
; 16WIDE-NEXT:    [[TMP158:%.*]] = insertelement <8 x i32> [[TMP157]], i32 [[TMP140]], i32 3
; 16WIDE-NEXT:    [[SHUFFLE28:%.*]] = shufflevector <8 x i32> [[TMP158]], <8 x i32> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 0, i32 2, i32 3, i32 2, i32 2>
; 16WIDE-NEXT:    [[TMP159:%.*]] = sub nsw <8 x i32> [[TMP152]], [[SHUFFLE28]]
; 16WIDE-NEXT:    [[TMP160:%.*]] = add nsw <8 x i32> [[TMP152]], [[SHUFFLE28]]
; 16WIDE-NEXT:    [[TMP161:%.*]] = shufflevector <8 x i32> [[TMP159]], <8 x i32> [[TMP160]], <8 x i32> <i32 0, i32 1, i32 2, i32 11, i32 12, i32 13, i32 14, i32 7>
; 16WIDE-NEXT:    [[TMP162:%.*]] = bitcast i32* [[ARRAYIDX1226]] to <8 x i32>*
; 16WIDE-NEXT:    store <8 x i32> [[TMP161]], <8 x i32>* [[TMP162]], align 4
; 16WIDE-NEXT:    [[NEXTIVLOOP_1452]] = add nuw nsw i64 [[I1_I64_0]], 1
; 16WIDE-NEXT:    [[CONDLOOP_1452:%.*]] = icmp ult i64 [[NEXTIVLOOP_1452]], 8
; 16WIDE-NEXT:    br i1 [[CONDLOOP_1452]], label [[LOOP_1452]], label [[AFTERLOOP_1452:%.*]]
; 16WIDE:       afterloop.1452:
; 16WIDE-NEXT:    ret i32 0
;
entry:
  %alloca = alloca [16 x [8 x i32]], align 4
  br label %loop.1452

loop.1452:                                        ; preds = %loop.1452, %entry
  %i1.i64.0 = phi i64 [ 0, %entry ], [ %nextivloop.1452, %loop.1452 ]
  %0 = sext i32 %i_pix1 to i64
  %1 = shl nuw i64 %i1.i64.0, 1
  %2 = mul i64 %1, %0
  %arrayIdx = getelementptr inbounds i8, i8* %pix1, i64 %2
  %gepload = load i8, i8* %arrayIdx, align 1
  %3 = sext i32 %i_pix2 to i64
  %4 = mul i64 %1, %3
  %arrayIdx1020 = getelementptr inbounds i8, i8* %pix2, i64 %4
  %gepload1021 = load i8, i8* %arrayIdx1020, align 1
  %5 = add i64 %2, 4
  %arrayIdx1022 = getelementptr inbounds i8, i8* %pix1, i64 %5
  %gepload1023 = load i8, i8* %arrayIdx1022, align 1
  %6 = add i64 %4, 4
  %arrayIdx1024 = getelementptr inbounds i8, i8* %pix2, i64 %6
  %gepload1025 = load i8, i8* %arrayIdx1024, align 1
  %7 = or i64 %2, 1
  %arrayIdx1026 = getelementptr inbounds i8, i8* %pix1, i64 %7
  %gepload1027 = load i8, i8* %arrayIdx1026, align 1
  %8 = or i64 %4, 1
  %arrayIdx1028 = getelementptr inbounds i8, i8* %pix2, i64 %8
  %gepload1029 = load i8, i8* %arrayIdx1028, align 1
  %9 = add i64 %2, 5
  %arrayIdx1030 = getelementptr inbounds i8, i8* %pix1, i64 %9
  %gepload1031 = load i8, i8* %arrayIdx1030, align 1
  %10 = add i64 %4, 5
  %arrayIdx1032 = getelementptr inbounds i8, i8* %pix2, i64 %10
  %gepload1033 = load i8, i8* %arrayIdx1032, align 1
  %11 = add i64 %2, 2
  %arrayIdx1034 = getelementptr inbounds i8, i8* %pix1, i64 %11
  %gepload1035 = load i8, i8* %arrayIdx1034, align 1
  %12 = add i64 %4, 2
  %arrayIdx1036 = getelementptr inbounds i8, i8* %pix2, i64 %12
  %gepload1037 = load i8, i8* %arrayIdx1036, align 1
  %13 = add i64 %2, 6
  %arrayIdx1038 = getelementptr inbounds i8, i8* %pix1, i64 %13
  %gepload1039 = load i8, i8* %arrayIdx1038, align 1
  %14 = add i64 %4, 6
  %arrayIdx1040 = getelementptr inbounds i8, i8* %pix2, i64 %14
  %gepload1041 = load i8, i8* %arrayIdx1040, align 1
  %15 = add i64 %2, 3
  %arrayIdx1042 = getelementptr inbounds i8, i8* %pix1, i64 %15
  %gepload1043 = load i8, i8* %arrayIdx1042, align 1
  %16 = add i64 %4, 3
  %arrayIdx1044 = getelementptr inbounds i8, i8* %pix2, i64 %16
  %gepload1045 = load i8, i8* %arrayIdx1044, align 1
  %17 = add i64 %2, 7
  %arrayIdx1046 = getelementptr inbounds i8, i8* %pix1, i64 %17
  %gepload1047 = load i8, i8* %arrayIdx1046, align 1
  %18 = add i64 %4, 7
  %arrayIdx1048 = getelementptr inbounds i8, i8* %pix2, i64 %18
  %gepload1049 = load i8, i8* %arrayIdx1048, align 1
  %arrayIdx1050 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %1, i64 0
  %19 = zext i8 %gepload1043 to i32
  %20 = zext i8 %gepload1035 to i32
  %21 = zext i8 %gepload1027 to i32
  %22 = zext i8 %gepload to i32
  %23 = zext i8 %gepload1047 to i32
  %24 = zext i8 %gepload1039 to i32
  %25 = zext i8 %gepload1031 to i32
  %26 = zext i8 %gepload1023 to i32
  %27 = zext i8 %gepload1049 to i32
  %28 = zext i8 %gepload1041 to i32
  %29 = zext i8 %gepload1033 to i32
  %30 = zext i8 %gepload1025 to i32
  %31 = zext i8 %gepload1045 to i32
  %32 = zext i8 %gepload1037 to i32
  %33 = zext i8 %gepload1029 to i32
  %34 = zext i8 %gepload1021 to i32
  %35 = shl nsw i32 %26, 16
  %36 = shl nsw i32 %30, 16
  %37 = shl nsw i32 %25, 16
  %38 = shl nsw i32 %29, 16
  %Chain_T856_3327 = sub nsw i32 %37, %38
  %Chain_T856_3326 = sub nsw i32 %Chain_T856_3327, %33
  %Chain_T856_3329 = add nsw i32 %Chain_T856_3326, %21
  %Chain_T856_3323 = sub nsw i32 %35, %36
  %Chain_T856_3321 = sub nsw i32 %Chain_T856_3323, %34
  %Chain_T856_3322 = add nsw i32 %Chain_T856_3321, %22
  %39 = shl nsw i32 %24, 16
  %40 = shl nsw i32 %28, 16
  %Chain_T856_3316 = sub nsw i32 %39, %40
  %Chain_T856_3318 = sub nsw i32 %Chain_T856_3316, %32
  %Chain_T856_3319 = add nsw i32 %Chain_T856_3318, %20
  %41 = shl nsw i32 %23, 16
  %42 = shl nsw i32 %27, 16
  %Chain_T856_ = sub nsw i32 %41, %42
  %Chain_T856_3313 = sub nsw i32 %Chain_T856_, %31
  %Chain_T856_3314 = add nsw i32 %Chain_T856_3313, %19
  %Bridge_T856_3315 = add nsw i32 %Chain_T856_3314, %Chain_T856_3319
  %Bridge_T856_3320 = add nsw i32 %Bridge_T856_3315, %Chain_T856_3322
  %Bridge_T856_3325 = add nsw i32 %Bridge_T856_3320, %Chain_T856_3329
  store i32 %Bridge_T856_3325, i32* %arrayIdx1050, align 4
  %arrayIdx1052 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %1, i64 2
  %Bridge_T855_3295 = sub nsw i32 %Chain_T856_3322, %Chain_T856_3319
  %Bridge_T855_ = sub nsw i32 %Bridge_T855_3295, %Chain_T856_3314
  %Bridge_T855_3307 = add nsw i32 %Bridge_T855_, %Chain_T856_3329
  store i32 %Bridge_T855_3307, i32* %arrayIdx1052, align 4
  %arrayIdx1070 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %1, i64 1
  %Bridge_T851_ = sub nsw i32 %Chain_T856_3319, %Chain_T856_3314
  %Bridge_T851_3274 = add nsw i32 %Bridge_T851_, %Chain_T856_3322
  %Bridge_T851_3279 = sub nsw i32 %Bridge_T851_3274, %Chain_T856_3329
  store i32 %Bridge_T851_3279, i32* %arrayIdx1070, align 4
  %arrayIdx1088 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %1, i64 3
  %Bridge_T850_3240 = sub nsw i32 %Chain_T856_3314, %Chain_T856_3319
  %Bridge_T850_3249 = add nsw i32 %Bridge_T850_3240, %Chain_T856_3322
  %Bridge_T850_3254 = sub nsw i32 %Bridge_T850_3249, %Chain_T856_3329
  store i32 %Bridge_T850_3254, i32* %arrayIdx1088, align 4
  %43 = add i64 %2, 8
  %arrayIdx1105 = getelementptr inbounds i8, i8* %pix1, i64 %43
  %gepload1106 = load i8, i8* %arrayIdx1105, align 1
  %44 = add i64 %4, 8
  %arrayIdx1107 = getelementptr inbounds i8, i8* %pix2, i64 %44
  %gepload1108 = load i8, i8* %arrayIdx1107, align 1
  %45 = add i64 %2, 12
  %arrayIdx1109 = getelementptr inbounds i8, i8* %pix1, i64 %45
  %gepload1110 = load i8, i8* %arrayIdx1109, align 1
  %46 = add i64 %4, 12
  %arrayIdx1111 = getelementptr inbounds i8, i8* %pix2, i64 %46
  %gepload1112 = load i8, i8* %arrayIdx1111, align 1
  %47 = add i64 %2, 9
  %arrayIdx1113 = getelementptr inbounds i8, i8* %pix1, i64 %47
  %gepload1114 = load i8, i8* %arrayIdx1113, align 1
  %48 = add i64 %4, 9
  %arrayIdx1115 = getelementptr inbounds i8, i8* %pix2, i64 %48
  %gepload1116 = load i8, i8* %arrayIdx1115, align 1
  %49 = add i64 %2, 13
  %arrayIdx1117 = getelementptr inbounds i8, i8* %pix1, i64 %49
  %gepload1118 = load i8, i8* %arrayIdx1117, align 1
  %50 = add i64 %4, 13
  %arrayIdx1119 = getelementptr inbounds i8, i8* %pix2, i64 %50
  %gepload1120 = load i8, i8* %arrayIdx1119, align 1
  %51 = add i64 %2, 10
  %arrayIdx1121 = getelementptr inbounds i8, i8* %pix1, i64 %51
  %gepload1122 = load i8, i8* %arrayIdx1121, align 1
  %52 = add i64 %4, 10
  %arrayIdx1123 = getelementptr inbounds i8, i8* %pix2, i64 %52
  %gepload1124 = load i8, i8* %arrayIdx1123, align 1
  %53 = add i64 %2, 14
  %arrayIdx1125 = getelementptr inbounds i8, i8* %pix1, i64 %53
  %gepload1126 = load i8, i8* %arrayIdx1125, align 1
  %54 = add i64 %4, 14
  %arrayIdx1127 = getelementptr inbounds i8, i8* %pix2, i64 %54
  %gepload1128 = load i8, i8* %arrayIdx1127, align 1
  %55 = add i64 %2, 11
  %arrayIdx1129 = getelementptr inbounds i8, i8* %pix1, i64 %55
  %gepload1130 = load i8, i8* %arrayIdx1129, align 1
  %56 = add i64 %4, 11
  %arrayIdx1131 = getelementptr inbounds i8, i8* %pix2, i64 %56
  %gepload1132 = load i8, i8* %arrayIdx1131, align 1
  %57 = add i64 %2, 15
  %arrayIdx1133 = getelementptr inbounds i8, i8* %pix1, i64 %57
  %gepload1134 = load i8, i8* %arrayIdx1133, align 1
  %58 = add i64 %4, 15
  %arrayIdx1135 = getelementptr inbounds i8, i8* %pix2, i64 %58
  %gepload1136 = load i8, i8* %arrayIdx1135, align 1
  %arrayIdx1138 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %1, i64 4
  %59 = zext i8 %gepload1130 to i32
  %60 = zext i8 %gepload1122 to i32
  %61 = zext i8 %gepload1114 to i32
  %62 = zext i8 %gepload1106 to i32
  %63 = zext i8 %gepload1134 to i32
  %64 = zext i8 %gepload1126 to i32
  %65 = zext i8 %gepload1118 to i32
  %66 = zext i8 %gepload1110 to i32
  %67 = zext i8 %gepload1136 to i32
  %68 = zext i8 %gepload1128 to i32
  %69 = zext i8 %gepload1120 to i32
  %70 = zext i8 %gepload1112 to i32
  %71 = zext i8 %gepload1132 to i32
  %72 = zext i8 %gepload1124 to i32
  %73 = zext i8 %gepload1116 to i32
  %74 = zext i8 %gepload1108 to i32
  %75 = shl nsw i32 %66, 16
  %76 = shl nsw i32 %70, 16
  %77 = shl nsw i32 %65, 16
  %78 = shl nsw i32 %69, 16
  %Chain_T829_3174 = sub nsw i32 %77, %78
  %Chain_T829_3173 = sub nsw i32 %Chain_T829_3174, %73
  %Chain_T829_3176 = add nsw i32 %Chain_T829_3173, %61
  %Chain_T829_3170 = sub nsw i32 %75, %76
  %Chain_T829_3168 = sub nsw i32 %Chain_T829_3170, %74
  %Chain_T829_3169 = add nsw i32 %Chain_T829_3168, %62
  %79 = shl nsw i32 %64, 16
  %80 = shl nsw i32 %68, 16
  %Chain_T829_3163 = sub nsw i32 %79, %80
  %Chain_T829_3165 = sub nsw i32 %Chain_T829_3163, %72
  %Chain_T829_3166 = add nsw i32 %Chain_T829_3165, %60
  %81 = shl nsw i32 %63, 16
  %82 = shl nsw i32 %67, 16
  %Chain_T829_ = sub nsw i32 %81, %82
  %Chain_T829_3160 = sub nsw i32 %Chain_T829_, %71
  %Chain_T829_3161 = add nsw i32 %Chain_T829_3160, %59
  %Bridge_T829_3162 = add nsw i32 %Chain_T829_3161, %Chain_T829_3166
  %Bridge_T829_3167 = add nsw i32 %Bridge_T829_3162, %Chain_T829_3169
  %Bridge_T829_3172 = add nsw i32 %Bridge_T829_3167, %Chain_T829_3176
  store i32 %Bridge_T829_3172, i32* %arrayIdx1138, align 4
  %arrayIdx1140 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %1, i64 6
  %Bridge_T828_3142 = sub nsw i32 %Chain_T829_3169, %Chain_T829_3166
  %Bridge_T828_ = sub nsw i32 %Bridge_T828_3142, %Chain_T829_3161
  %Bridge_T828_3154 = add nsw i32 %Bridge_T828_, %Chain_T829_3176
  store i32 %Bridge_T828_3154, i32* %arrayIdx1140, align 4
  %arrayIdx1158 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %1, i64 5
  %Bridge_T824_ = sub nsw i32 %Chain_T829_3166, %Chain_T829_3161
  %Bridge_T824_3121 = add nsw i32 %Bridge_T824_, %Chain_T829_3169
  %Bridge_T824_3126 = sub nsw i32 %Bridge_T824_3121, %Chain_T829_3176
  store i32 %Bridge_T824_3126, i32* %arrayIdx1158, align 4
  %arrayIdx1176 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %1, i64 7
  %Bridge_T823_3087 = sub nsw i32 %Chain_T829_3161, %Chain_T829_3166
  %Bridge_T823_3096 = add nsw i32 %Bridge_T823_3087, %Chain_T829_3169
  %Bridge_T823_3101 = sub nsw i32 %Bridge_T823_3096, %Chain_T829_3176
  store i32 %Bridge_T823_3101, i32* %arrayIdx1176, align 4
  %83 = add i64 %2, %0
  %arrayIdx1193 = getelementptr inbounds i8, i8* %pix1, i64 %83
  %gepload1194 = load i8, i8* %arrayIdx1193, align 1
  %84 = add i64 %4, %3
  %arrayIdx1195 = getelementptr inbounds i8, i8* %pix2, i64 %84
  %gepload1196 = load i8, i8* %arrayIdx1195, align 1
  %Bridge_T820_ = add nsw i64 4, %83
  %arrayIdx1197 = getelementptr inbounds i8, i8* %pix1, i64 %Bridge_T820_
  %gepload1198 = load i8, i8* %arrayIdx1197, align 1
  %Bridge_T819_ = add nsw i64 4, %84
  %arrayIdx1199 = getelementptr inbounds i8, i8* %pix2, i64 %Bridge_T819_
  %gepload1200 = load i8, i8* %arrayIdx1199, align 1
  %Bridge_T818_ = add nsw i64 1, %83
  %arrayIdx1201 = getelementptr inbounds i8, i8* %pix1, i64 %Bridge_T818_
  %gepload1202 = load i8, i8* %arrayIdx1201, align 1
  %Bridge_T817_ = add nsw i64 1, %84
  %arrayIdx1203 = getelementptr inbounds i8, i8* %pix2, i64 %Bridge_T817_
  %gepload1204 = load i8, i8* %arrayIdx1203, align 1
  %Bridge_T816_ = add nsw i64 5, %83
  %arrayIdx1205 = getelementptr inbounds i8, i8* %pix1, i64 %Bridge_T816_
  %gepload1206 = load i8, i8* %arrayIdx1205, align 1
  %Bridge_T815_ = add nsw i64 5, %84
  %arrayIdx1207 = getelementptr inbounds i8, i8* %pix2, i64 %Bridge_T815_
  %gepload1208 = load i8, i8* %arrayIdx1207, align 1
  %Bridge_T814_ = add nsw i64 2, %83
  %arrayIdx1209 = getelementptr inbounds i8, i8* %pix1, i64 %Bridge_T814_
  %gepload1210 = load i8, i8* %arrayIdx1209, align 1
  %Bridge_T813_ = add nsw i64 2, %84
  %arrayIdx1211 = getelementptr inbounds i8, i8* %pix2, i64 %Bridge_T813_
  %gepload1212 = load i8, i8* %arrayIdx1211, align 1
  %Bridge_T812_ = add nsw i64 6, %83
  %arrayIdx1213 = getelementptr inbounds i8, i8* %pix1, i64 %Bridge_T812_
  %gepload1214 = load i8, i8* %arrayIdx1213, align 1
  %Bridge_T811_ = add nsw i64 6, %84
  %arrayIdx1215 = getelementptr inbounds i8, i8* %pix2, i64 %Bridge_T811_
  %gepload1216 = load i8, i8* %arrayIdx1215, align 1
  %Bridge_T810_ = add nsw i64 3, %83
  %arrayIdx1217 = getelementptr inbounds i8, i8* %pix1, i64 %Bridge_T810_
  %gepload1218 = load i8, i8* %arrayIdx1217, align 1
  %Bridge_T809_ = add nsw i64 3, %84
  %arrayIdx1219 = getelementptr inbounds i8, i8* %pix2, i64 %Bridge_T809_
  %gepload1220 = load i8, i8* %arrayIdx1219, align 1
  %Bridge_T808_ = add nsw i64 7, %83
  %arrayIdx1221 = getelementptr inbounds i8, i8* %pix1, i64 %Bridge_T808_
  %gepload1222 = load i8, i8* %arrayIdx1221, align 1
  %Bridge_T807_ = add nsw i64 7, %84
  %arrayIdx1223 = getelementptr inbounds i8, i8* %pix2, i64 %Bridge_T807_
  %gepload1224 = load i8, i8* %arrayIdx1223, align 1
  %85 = or i64 %1, 1
  %arrayIdx1226 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %85, i64 0
  %86 = zext i8 %gepload1218 to i32
  %87 = zext i8 %gepload1210 to i32
  %88 = zext i8 %gepload1202 to i32
  %89 = zext i8 %gepload1194 to i32
  %90 = zext i8 %gepload1222 to i32
  %91 = zext i8 %gepload1214 to i32
  %92 = zext i8 %gepload1206 to i32
  %93 = zext i8 %gepload1198 to i32
  %94 = zext i8 %gepload1224 to i32
  %95 = zext i8 %gepload1216 to i32
  %96 = zext i8 %gepload1208 to i32
  %97 = zext i8 %gepload1200 to i32
  %98 = zext i8 %gepload1220 to i32
  %99 = zext i8 %gepload1212 to i32
  %100 = zext i8 %gepload1204 to i32
  %101 = zext i8 %gepload1196 to i32
  %102 = shl nsw i32 %93, 16
  %103 = shl nsw i32 %97, 16
  %104 = shl nsw i32 %92, 16
  %105 = shl nsw i32 %96, 16
  %Chain_T802_29342939 = sub nsw i32 %105, %104
  %Chain_T802_29352937 = sub nsw i32 %Chain_T802_29342939, %88
  %Chain_T802_2936 = add nsw i32 %Chain_T802_29352937, %100
  %Chain_T802_29272931 = sub nsw i32 %103, %102
  %Chain_T802_29252929 = sub nsw i32 %Chain_T802_29272931, %89
  %Chain_T802_2928 = add nsw i32 %Chain_T802_29252929, %101
  %106 = shl nsw i32 %91, 16
  %107 = shl nsw i32 %95, 16
  %Chain_T802_29172923 = sub nsw i32 %107, %106
  %Chain_T802_29192921 = sub nsw i32 %Chain_T802_29172923, %87
  %Chain_T802_29182920 = add nsw i32 %Chain_T802_29192921, %99
  %108 = shl nsw i32 %90, 16
  %109 = shl nsw i32 %94, 16
  %Chain_T802_29092915 = sub nsw i32 %109, %108
  %Chain_T802_29112913 = sub nsw i32 %Chain_T802_29092915, %86
  %Chain_T802_29102912 = add nsw i32 %Chain_T802_29112913, %98
  %Bridge_T802_29162940 = add nsw i32 %Chain_T802_29102912, %Chain_T802_29182920
  %Bridge_T802_29242941 = add nsw i32 %Bridge_T802_29162940, %Chain_T802_2928
  %Bridge_T802_2932 = sub nsw i32 %Bridge_T802_29242941, %Chain_T802_2936
  store i32 %Bridge_T802_2932, i32* %arrayIdx1226, align 4
  %arrayIdx1244 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %85, i64 2
  %Bridge_T802_29162940_1 = add nsw i32 %Chain_T802_29102912, %Chain_T802_29182920
  %Bridge_T801_2893 = sub nsw i32 %Bridge_T802_29162940_1, %Chain_T802_2928
  %Bridge_T801_2901 = sub nsw i32 %Bridge_T801_2893, %Chain_T802_2936
  store i32 %Bridge_T801_2901, i32* %arrayIdx1244, align 4
  %arrayIdx1262 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %85, i64 1
  %Bridge_T797_2968 = sub nsw i32 %Chain_T802_29102912, %Chain_T802_29182920
  %Bridge_T797_2976 = sub nsw i32 %Bridge_T797_2968, %Chain_T802_2928
  %Bridge_T797_2984 = add nsw i32 %Bridge_T797_2976, %Chain_T802_2936
  store i32 %Bridge_T797_2984, i32* %arrayIdx1262, align 4
  %arrayIdx1280 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %85, i64 3
  %Bridge_T796_ = sub nsw i32 %Chain_T802_29182920, %Chain_T802_29102912
  %Bridge_T796_2953 = sub nsw i32 %Bridge_T796_, %Chain_T802_2928
  %Bridge_T796_2961 = add nsw i32 %Bridge_T796_2953, %Chain_T802_2936
  store i32 %Bridge_T796_2961, i32* %arrayIdx1280, align 4
  %Bridge_T795_ = add nsw i64 8, %83
  %arrayIdx1297 = getelementptr inbounds i8, i8* %pix1, i64 %Bridge_T795_
  %gepload1298 = load i8, i8* %arrayIdx1297, align 1
  %Bridge_T794_ = add nsw i64 8, %84
  %arrayIdx1299 = getelementptr inbounds i8, i8* %pix2, i64 %Bridge_T794_
  %gepload1300 = load i8, i8* %arrayIdx1299, align 1
  %Bridge_T793_ = add nsw i64 12, %83
  %arrayIdx1301 = getelementptr inbounds i8, i8* %pix1, i64 %Bridge_T793_
  %gepload1302 = load i8, i8* %arrayIdx1301, align 1
  %Bridge_T792_ = add nsw i64 12, %84
  %arrayIdx1303 = getelementptr inbounds i8, i8* %pix2, i64 %Bridge_T792_
  %gepload1304 = load i8, i8* %arrayIdx1303, align 1
  %Bridge_T791_ = add nsw i64 9, %83
  %arrayIdx1305 = getelementptr inbounds i8, i8* %pix1, i64 %Bridge_T791_
  %gepload1306 = load i8, i8* %arrayIdx1305, align 1
  %Bridge_T790_ = add nsw i64 9, %84
  %arrayIdx1307 = getelementptr inbounds i8, i8* %pix2, i64 %Bridge_T790_
  %gepload1308 = load i8, i8* %arrayIdx1307, align 1
  %Bridge_T789_ = add nsw i64 13, %83
  %arrayIdx1309 = getelementptr inbounds i8, i8* %pix1, i64 %Bridge_T789_
  %gepload1310 = load i8, i8* %arrayIdx1309, align 1
  %Bridge_T788_ = add nsw i64 13, %84
  %arrayIdx1311 = getelementptr inbounds i8, i8* %pix2, i64 %Bridge_T788_
  %gepload1312 = load i8, i8* %arrayIdx1311, align 1
  %Bridge_T787_ = add nsw i64 10, %83
  %arrayIdx1313 = getelementptr inbounds i8, i8* %pix1, i64 %Bridge_T787_
  %gepload1314 = load i8, i8* %arrayIdx1313, align 1
  %Bridge_T786_ = add nsw i64 10, %84
  %arrayIdx1315 = getelementptr inbounds i8, i8* %pix2, i64 %Bridge_T786_
  %gepload1316 = load i8, i8* %arrayIdx1315, align 1
  %Bridge_T785_ = add nsw i64 14, %83
  %arrayIdx1317 = getelementptr inbounds i8, i8* %pix1, i64 %Bridge_T785_
  %gepload1318 = load i8, i8* %arrayIdx1317, align 1
  %Bridge_T784_ = add nsw i64 14, %84
  %arrayIdx1319 = getelementptr inbounds i8, i8* %pix2, i64 %Bridge_T784_
  %gepload1320 = load i8, i8* %arrayIdx1319, align 1
  %Bridge_T783_ = add nsw i64 11, %83
  %arrayIdx1321 = getelementptr inbounds i8, i8* %pix1, i64 %Bridge_T783_
  %gepload1322 = load i8, i8* %arrayIdx1321, align 1
  %Bridge_T782_ = add nsw i64 11, %84
  %arrayIdx1323 = getelementptr inbounds i8, i8* %pix2, i64 %Bridge_T782_
  %gepload1324 = load i8, i8* %arrayIdx1323, align 1
  %Bridge_T781_ = add nsw i64 15, %83
  %arrayIdx1325 = getelementptr inbounds i8, i8* %pix1, i64 %Bridge_T781_
  %gepload1326 = load i8, i8* %arrayIdx1325, align 1
  %Bridge_T780_ = add nsw i64 15, %84
  %arrayIdx1327 = getelementptr inbounds i8, i8* %pix2, i64 %Bridge_T780_
  %gepload1328 = load i8, i8* %arrayIdx1327, align 1
  %arrayIdx1330 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %85, i64 4
  %110 = zext i8 %gepload1322 to i32
  %111 = zext i8 %gepload1314 to i32
  %112 = zext i8 %gepload1306 to i32
  %113 = zext i8 %gepload1298 to i32
  %114 = zext i8 %gepload1326 to i32
  %115 = zext i8 %gepload1318 to i32
  %116 = zext i8 %gepload1310 to i32
  %117 = zext i8 %gepload1302 to i32
  %118 = zext i8 %gepload1328 to i32
  %119 = zext i8 %gepload1320 to i32
  %120 = zext i8 %gepload1312 to i32
  %121 = zext i8 %gepload1304 to i32
  %122 = zext i8 %gepload1324 to i32
  %123 = zext i8 %gepload1316 to i32
  %124 = zext i8 %gepload1308 to i32
  %125 = zext i8 %gepload1300 to i32
  %126 = shl nsw i32 %117, 16
  %127 = shl nsw i32 %121, 16
  %128 = shl nsw i32 %116, 16
  %129 = shl nsw i32 %120, 16
  %Chain_T775_2769 = sub nsw i32 %128, %129
  %Chain_T775_2768 = sub nsw i32 %Chain_T775_2769, %124
  %Chain_T775_2771 = add nsw i32 %Chain_T775_2768, %112
  %Chain_T775_2765 = sub nsw i32 %126, %127
  %Chain_T775_2763 = sub nsw i32 %Chain_T775_2765, %125
  %Chain_T775_2764 = add nsw i32 %Chain_T775_2763, %113
  %130 = shl nsw i32 %115, 16
  %131 = shl nsw i32 %119, 16
  %Chain_T775_2758 = sub nsw i32 %130, %131
  %Chain_T775_2760 = sub nsw i32 %Chain_T775_2758, %123
  %Chain_T775_2761 = add nsw i32 %Chain_T775_2760, %111
  %132 = shl nsw i32 %114, 16
  %133 = shl nsw i32 %118, 16
  %Chain_T775_ = sub nsw i32 %132, %133
  %Chain_T775_2755 = sub nsw i32 %Chain_T775_, %122
  %Chain_T775_2756 = add nsw i32 %Chain_T775_2755, %110
  %Bridge_T775_2757 = add nsw i32 %Chain_T775_2756, %Chain_T775_2761
  %Bridge_T775_2762 = add nsw i32 %Bridge_T775_2757, %Chain_T775_2764
  %Bridge_T775_2767 = add nsw i32 %Bridge_T775_2762, %Chain_T775_2771
  store i32 %Bridge_T775_2767, i32* %arrayIdx1330, align 4
  %arrayIdx1348 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %85, i64 6
  %Bridge_T774_2737 = sub nsw i32 %Chain_T775_2764, %Chain_T775_2761
  %Bridge_T774_ = sub nsw i32 %Bridge_T774_2737, %Chain_T775_2756
  %Bridge_T774_2749 = add nsw i32 %Bridge_T774_, %Chain_T775_2771
  store i32 %Bridge_T774_2749, i32* %arrayIdx1348, align 4
  %arrayIdx1366 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %85, i64 5
  %Bridge_T770_ = sub nsw i32 %Chain_T775_2761, %Chain_T775_2756
  %Bridge_T770_2716 = add nsw i32 %Bridge_T770_, %Chain_T775_2764
  %Bridge_T770_2721 = sub nsw i32 %Bridge_T770_2716, %Chain_T775_2771
  store i32 %Bridge_T770_2721, i32* %arrayIdx1366, align 4
  %arrayIdx1384 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %85, i64 7
  %Bridge_T769_2682 = sub nsw i32 %Chain_T775_2756, %Chain_T775_2761
  %Bridge_T769_2691 = add nsw i32 %Bridge_T769_2682, %Chain_T775_2764
  %Bridge_T769_2696 = sub nsw i32 %Bridge_T769_2691, %Chain_T775_2771
  store i32 %Bridge_T769_2696, i32* %arrayIdx1384, align 4
  %nextivloop.1452 = add nuw nsw i64 %i1.i64.0, 1
  %condloop.1452 = icmp ult i64 %nextivloop.1452, 8
  br i1 %condloop.1452, label %loop.1452, label %afterloop.1452

afterloop.1452:                                   ; preds = %loop.1452
  ret i32 0
}

; There should be 16 in total 4-wide loads (without load coalescing).
; Just check for a few of them.

