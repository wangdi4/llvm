; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py

target triple = "x86_64-unknown-linux-gnu"

; REQUIRES: asserts
; RUN: opt -mattr=+avx512vl,+avx512cd -S -hir-ssa-deconstruction -hir-temp-cleanup -hir-vec-dir-insert -hir-vplan-vec -disable-vplan-codegen -disable-output -vplan-cost-model-print-analysis-for-vf=1 < %s 2>&1 | FileCheck %s --check-prefix=CHECK-VF1
; RUN: opt -mattr=+avx512vl,+avx512cd -S -hir-ssa-deconstruction -hir-temp-cleanup -hir-vec-dir-insert -hir-vplan-vec -disable-vplan-codegen -disable-output -vplan-cost-model-print-analysis-for-vf=2 < %s 2>&1 | FileCheck %s --check-prefix=CHECK-VF2
; RUN: opt -mattr=+avx512vl,+avx512cd -S -hir-ssa-deconstruction -hir-temp-cleanup -hir-vec-dir-insert -hir-vplan-vec -disable-vplan-codegen -disable-output -vplan-cost-model-print-analysis-for-vf=4 < %s 2>&1 | FileCheck %s --check-prefix=CHECK-VF4
; RUN: opt -mattr=+avx512vl,+avx512cd -S -hir-ssa-deconstruction -hir-temp-cleanup -hir-vec-dir-insert -hir-vplan-vec -disable-vplan-codegen -disable-output -vplan-cost-model-print-analysis-for-vf=8 < %s 2>&1 | FileCheck %s --check-prefix=CHECK-VF8

define dso_local void @foo1(float* noalias nocapture %A, i32* noalias nocapture readonly %B) local_unnamed_addr {
;
; CHECK-VF1:    Cost 0 for i64 {{.*}} = vpconflict-insn i64 {{.*}}
; CHECK-VF2:    Cost 3000 for i64 {{.*}} = vpconflict-insn i64 {{.*}}
; CHECK-VF4:    Cost 15000 for i64 {{.*}} = vpconflict-insn i64 {{.*}}
; CHECK-VF8:    Cost 22000 for i64 {{.*}} = vpconflict-insn i64 {{.*}}
;
entry:
;   for (int i=0; i<N; i++){
;     index = B[i];
;     A[index] = A[index] + 1;
;   }
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  ret void

for.body:                                         ; preds = %entry, %for.body
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %ptridx = getelementptr inbounds i32, i32* %B, i64 %indvars.iv
  %0 = load i32, i32* %ptridx, align 4
  %idxprom1 = sext i32 %0 to i64
  %ptridx2 = getelementptr inbounds float, float* %A, i64 %idxprom1
  %1 = load float, float* %ptridx2, align 4
  %add = fadd fast float %1, 2.000000e+00
  store float %add, float* %ptridx2, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 1024
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body
}
