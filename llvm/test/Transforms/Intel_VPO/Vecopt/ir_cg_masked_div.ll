; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -VPlanDriver -vplan-force-vf=2 -S | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define void @masked_divergent_div(i32 *%p, i64 %n) {
; CHECK-LABEL: @masked_divergent_div(
; CHECK:       vector.body:
; CHECK:         [[WIDE_LOAD:%.*]] = load <2 x i32>, <2 x i32>* [[TMP0:%.*]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = icmp eq <2 x i32> [[WIDE_LOAD]], zeroinitializer
; CHECK-NEXT:    [[TMP2:%.*]] = xor <2 x i1> [[TMP1]], <i1 true, i1 true>
; FIXME: That must be masked!
; CHECK-NEXT:    [[TMP3:%.*]] = sdiv <2 x i32> <i32 42, i32 42>, [[WIDE_LOAD]]
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast i32* [[SCALAR_GEP:%.*]] to <2 x i32>*
; CHECK-NEXT:    call void @llvm.masked.store.v2i32.p0v2i32(<2 x i32> [[TMP3]], <2 x i32>* [[TMP4]], i32 4, <2 x i1> [[TMP2]])
;
entry:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %header

header:
  %iv = phi i64 [ %iv.next, %latch ], [ 0, %entry ]
  %gep = getelementptr inbounds i32, i32 *%p, i64 %iv
  %ld = load i32, i32* %gep
  %cond = icmp eq i32 %ld, 0
  br i1 %cond, label %latch, label %masked

masked:
  %div = sdiv i32 42, %ld
  store i32 %div, i32 *%gep
  br label %latch

latch:
  %iv.next = add nuw nsw i64 %iv, 1
  %exitcond = icmp eq i64 %iv.next, %n
  br i1 %exitcond, label %loopexit, label %header

loopexit:
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"() ]
  ret void
}

define void @masked_uniform_div(i32 *%p, i64 %n, i32 %val) {
; CHECK-LABEL: @masked_uniform_div(
; CHECK:       vector.body:
; CHECK:         [[WIDE_LOAD:%.*]] = load <2 x i32>, <2 x i32>* [[TMP0]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = icmp eq i32 [[VAL:%.*]], 0
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <2 x i1> undef, i1 [[TMP1]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <2 x i1> [[BROADCAST_SPLATINSERT]], <2 x i1> undef, <2 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP2:%.*]] = icmp eq <2 x i32> [[WIDE_LOAD]], <i32 42, i32 42>
; CHECK-NEXT:    [[TMP3:%.*]] = or <2 x i1> [[BROADCAST_SPLAT]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = xor <2 x i1> [[TMP3]], <i1 true, i1 true>
; FIXME: That must still be masked!
; CHECK-NEXT:    [[TMP5:%.*]] = sdiv i32 42, [[VAL]]
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT2:%.*]] = insertelement <2 x i32> undef, i32 [[TMP5]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT3:%.*]] = shufflevector <2 x i32> [[BROADCAST_SPLATINSERT2]], <2 x i32> undef, <2 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast i32* [[SCALAR_GEP]] to <2 x i32>*
; CHECK-NEXT:    call void @llvm.masked.store.v2i32.p0v2i32(<2 x i32> [[BROADCAST_SPLAT3]], <2 x i32>* [[TMP6]], i32 4, <2 x i1> [[TMP4]])
;
entry:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %header

header:
  %iv = phi i64 [ %iv.next, %latch ], [ 0, %entry ]
  %gep = getelementptr inbounds i32, i32 *%p, i64 %iv
  %ld = load i32, i32* %gep
  %cond = icmp eq i32 %val, 0
  %cond2 = icmp eq i32 %ld, 42
  %or = or i1 %cond, %cond2
  br i1 %or, label %latch, label %masked

masked:
  %div = sdiv i32 42, %val
  store i32 %div, i32 *%gep
  br label %latch

latch:
  %iv.next = add nuw nsw i64 %iv, 1
  %exitcond = icmp eq i64 %iv.next, %n
  br i1 %exitcond, label %loopexit, label %header

loopexit:
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"() ]
  ret void
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
