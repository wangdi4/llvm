; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; Test inner loop control flow uniformity where inner loop exit condition is divergent memory reference.

; REQUIRES: asserts
; RUN: opt -S < %s -VPlanDriver -enable-vp-value-codegen -vplan-print-after-loop-cfu -disable-output | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind
declare token @llvm.directive.region.entry()

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token)

@A = common local_unnamed_addr global [100 x [100 x i64]] zeroinitializer, align 16

; Function Attrs: norecurse nounwind uwtable
define dso_local void @foo(i64 %N, i64* nocapture readonly %lb, i64* nocapture readonly %ub) local_unnamed_addr #0 {
; CHECK-LABEL:  After inner loop control flow transformation
; CHECK-NEXT:    REGION: [[REGION0:region[0-9]+]] (BP: NULL)
; CHECK-NEXT:    [[BB0:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB1:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i64 [[VP0:%.*]] = induction-init{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP1:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:    SUCCESSORS(1):[[BB2:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_OUTER_IV:%.*]] = phi  [ i64 [[VP_OUTER_IV_NEXT:%.*]], [[BB3:BB[0-9]+]] ],  [ i64 [[VP0]], [[BB1]] ]
; CHECK-NEXT:     [DA: Divergent] i64* [[VP_ARRAYIDX:%.*]] = getelementptr inbounds i64* [[LB0:%.*]] i64 [[VP_OUTER_IV]]
; CHECK-NEXT:     [DA: Divergent] i64 [[VP2:%.*]] = load i64* [[VP_ARRAYIDX]]
; CHECK-NEXT:     [DA: Divergent] i64* [[VP_ARRAYIDX2:%.*]] = getelementptr inbounds i64* [[UB0:%.*]] i64 [[VP_OUTER_IV]]
; CHECK-NEXT:     [DA: Divergent] i64 [[VP3:%.*]] = load i64* [[VP_ARRAYIDX2]]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_INNER_TOPTEST:%.*]] = icmp i64 [[VP2]] i64 [[VP3]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB4:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB3]] [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:     Condition([[BB2]]): [DA: Divergent] i1 [[VP_INNER_TOPTEST]] = icmp i64 [[VP2]] i64 [[VP3]]
; CHECK-NEXT:    SUCCESSORS(2):[[BB5:BB[0-9]+]](i1 [[VP_INNER_TOPTEST]]), [[BB6:BB[0-9]+]](!i1 [[VP_INNER_TOPTEST]])
; CHECK-NEXT:    PREDECESSORS(1): [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB5]] (BP: NULL) :
; CHECK-NEXT:       <Empty Block>
; CHECK-NEXT:      SUCCESSORS(1):[[BB7:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB7]] (BP: NULL) :
; CHECK-NEXT:       [DA: Divergent] i64 [[VP_INNER_IV:%.*]] = phi  [ i64 [[VP_INNER_IV_NEXT:%.*]], [[BB8:BB[0-9]+]] ],  [ i64 [[VP2]], [[BB5]] ]
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_LOOP_MASK:%.*]] = phi  [ i1 [[VP_INNER_TOPTEST]], [[BB5]] ],  [ i1 [[VP_LOOP_MASK_NEXT:%.*]], [[BB8]] ]
; CHECK-NEXT:      SUCCESSORS(1):[[BB9:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(2): [[BB8]] [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB9]] (BP: NULL) :
; CHECK-NEXT:       <Empty Block>
; CHECK-NEXT:       Condition([[BB7]]): [DA: Divergent] i1 [[VP_LOOP_MASK]] = phi  [ i1 [[VP_INNER_TOPTEST]], [[BB5]] ],  [ i1 [[VP_LOOP_MASK_NEXT]], [[BB8]] ]
; CHECK-NEXT:      SUCCESSORS(2):[[BB10:BB[0-9]+]](i1 [[VP_LOOP_MASK]]), [[BB11:BB[0-9]+]](!i1 [[VP_LOOP_MASK]])
; CHECK-NEXT:      PREDECESSORS(1): [[BB7]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB10]] (BP: NULL) :
; CHECK-NEXT:         [DA: Divergent] i64 [[VP_SHL:%.*]] = shl i64 [[VP_INNER_IV]] i64 3
; CHECK-NEXT:         [DA: Divergent] i64* [[VP_ARRAYIDX6:%.*]] = getelementptr inbounds [100 x [100 x i64]]* @A i64 0 i64 [[VP_INNER_IV]] i64 [[VP_OUTER_IV]]
; CHECK-NEXT:         [DA: Divergent] store i64 [[VP_SHL]] i64* [[VP_ARRAYIDX6]]
; CHECK-NEXT:         [DA: Divergent] i64 [[VP_INNER_IV_NEXT]] = add i64 [[VP_INNER_IV]] i64 1
; CHECK-NEXT:         [DA: Divergent] i64 [[VP4:%.*]] = load i64* [[VP_ARRAYIDX2]]
; CHECK-NEXT:        SUCCESSORS(1):[[BB11]]
; CHECK-NEXT:        PREDECESSORS(1): [[BB9]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB11]] (BP: NULL) :
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_INNER_EXITCOND:%.*]] = icmp i64 [[VP_INNER_IV_NEXT]] i64 [[VP4]]
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_LOOP_MASK_NEXT]] = and i1 [[VP_INNER_EXITCOND]] i1 [[VP_LOOP_MASK]]
; CHECK-NEXT:       [DA: Uniform]   i1 [[VP5:%.*]] = all-zero-check i1 [[VP_LOOP_MASK_NEXT]]
; CHECK-NEXT:       [DA: Uniform]   i1 [[VP6:%.*]] = not i1 [[VP5]]
; CHECK-NEXT:      SUCCESSORS(1):[[BB8]]
; CHECK-NEXT:      PREDECESSORS(2): [[BB10]] [[BB9]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB8]] (BP: NULL) :
; CHECK-NEXT:       <Empty Block>
; CHECK-NEXT:       Condition([[BB11]]): [DA: Uniform]   i1 [[VP6]] = not i1 [[VP5]]
; CHECK-NEXT:      SUCCESSORS(2):[[BB7]](i1 [[VP6]]), [[BB12:BB[0-9]+]](!i1 [[VP6]])
; CHECK-NEXT:      PREDECESSORS(1): [[BB11]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB12]] (BP: NULL) :
; CHECK-NEXT:       <Empty Block>
; CHECK-NEXT:      SUCCESSORS(1):[[BB6]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB8]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_OUTER_IV_NEXT]] = add i64 [[VP_OUTER_IV]] i64 [[VP1]]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_OUTER_EXITCOND:%.*]] = icmp i64 [[VP_OUTER_IV_NEXT]] i64 [[N0:%.*]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB3]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB12]] [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:     Condition([[BB6]]): [DA: Uniform]   i1 [[VP_OUTER_EXITCOND]] = icmp i64 [[VP_OUTER_IV_NEXT]] i64 [[N0]]
; CHECK-NEXT:    SUCCESSORS(2):[[BB13:BB[0-9]+]](i1 [[VP_OUTER_EXITCOND]]), [[BB2]](!i1 [[VP_OUTER_EXITCOND]])
; CHECK-NEXT:    PREDECESSORS(1): [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB13]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP7:%.*]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:    SUCCESSORS(1):[[BB14:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB14]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB13]]
; CHECK-EMPTY:
; CHECK-NEXT:    END Region([[REGION0]])
;
entry:
  %outer.toptest = icmp sgt i64 %N, 0
  br i1 %outer.toptest, label %outer.preheader, label %func.exit

outer.preheader:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %outer.header

outer.header:
  %outer.iv = phi i64 [ %outer.iv.next, %outer.latch ], [ 0, %outer.preheader ]
  %arrayidx = getelementptr inbounds i64, i64* %lb, i64 %outer.iv
  %0 = load i64, i64* %arrayidx, align 8
  %arrayidx2 = getelementptr inbounds i64, i64* %ub, i64 %outer.iv
  %1 = load i64, i64* %arrayidx2, align 8
  %inner.toptest = icmp slt i64 %0, %1
  br i1 %inner.toptest, label %inner.preheader, label %outer.latch

inner.preheader:
  br label %inner.header

inner.header:
  %inner.iv = phi i64 [ %inner.iv.next, %inner.header ], [ %0, %inner.preheader ]
  %shl = shl i64 %inner.iv, 3
  %arrayidx6 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @A, i64 0, i64 %inner.iv, i64 %outer.iv
  store i64 %shl, i64* %arrayidx6, align 8
  %inner.iv.next = add nsw i64 %inner.iv, 1
  %2 = load i64, i64* %arrayidx2, align 8
  %inner.exitcond = icmp slt i64 %inner.iv.next, %2
  br i1 %inner.exitcond, label %inner.header, label %inner.exit

inner.exit:
  br label %outer.latch

outer.latch:
  %outer.iv.next = add nuw nsw i64 %outer.iv, 1
  %outer.exitcond = icmp eq i64 %outer.iv.next, %N
  br i1 %outer.exitcond, label %outer.exit, label %outer.header

outer.exit:
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"()]
  br label %func.exit

func.exit:
  ret void
}

attributes #0 = { norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"clang version 4.0.0 (branches/vpo 20869)"}
!1 = !{!2, !2, i64 0}
!2 = !{!"long", !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
