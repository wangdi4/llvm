; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt %s -passes='hir-ssa-deconstruction,hir-temp-cleanup,hir-vec-dir-insert,hir-vplan-vec,print<hir>' -disable-output -vplan-force-vf=4 2>&1 | FileCheck %s

define void @foo() {
; CHECK:      BEGIN REGION { modified }
; CHECK-NEXT:       + DO i1 = 0, 159, 4   <DO_LOOP> <auto-vectorized> <novectorize>
; CHECK-NEXT:       |   [[DOTVEC0:%.*]] = inttoptr.<4 x i64>.<4 x ptr>(i1 + <i64 0, i64 1, i64 2, i64 3>)
; CHECK-NEXT:       |   [[EXTRACT0:%.*]] = extractelement [[DOTVEC0]],  0
; CHECK-NEXT:       |   [[DOTVEC10:%.*]] = (undef >u [[DOTVEC0]]) ? [[DOTVEC0]] : undef
; CHECK-NEXT:       + END LOOP
; CHECK:            [[TMP2:%.*]] = extractelement [[DOTVEC10]],  3
; CHECK:      END REGION
;
entry:
  %0 = load i32, ptr undef
  %cmp11 = icmp sgt i32 %0, 0
  br i1 %cmp11, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  %wide.trip.count14 = zext i32 160 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %g.013 = phi ptr [ undef, %for.body.preheader ], [ %2, %for.body ]
  %1 = inttoptr i64 %indvars.iv to ptr
  %cmp1 = icmp ugt ptr undef, %1
  %2 = select i1 %cmp1, ptr %1, ptr undef
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count14
  br i1 %exitcond.not, label %for.end.loopexit, label %for.body

for.end.loopexit:                                 ; preds = %for.body
  %.lcssa = phi ptr [ %2, %for.body ]
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  %g.0.lcssa = phi ptr [ undef, %entry ], [ %.lcssa, %for.end.loopexit ]
  ret void
}
