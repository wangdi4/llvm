; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; Test to check HIR decomposition for indirect calls.

; HIR incoming to vectorizer
; <0>     BEGIN REGION { }
; <2>           %0 = @llvm.directive.region.entry(); [ DIR.OMP.SIMD(),  QUAL.OMP.NORMALIZED.IV(null),  QUAL.OMP.NORMALIZED.UB(null),  QUAL.OMP.LASTPRIVATE(&((%i.lpriv)[0])),  QUAL.OMP.PRIVATE(&((%b.priv)[0])) ]
; <37>
; <37>          + DO i1 = 0, sext.i32.i64(%n) + -1, 1   <DO_LOOP> <simd>
; <11>          |   (%i.lpriv)[0] = i1;
; <12>          |   @llvm.lifetime.start.p0i8(4,  &((i8*)(%b.priv)[0]));
; <13>          |   (%b.priv)[0] = 0;
; <15>          |   %3 = (%func)[i1];
; <17>          |   %4 = (%c)[i1];
; <18>          |   %call = %3(%4);
; <19>          |   %5 = (%b.priv)[0];
; <21>          |   %6 = (%i.lpriv)[0];
; <24>          |   %7 = (%a)[%6];
; <26>          |   (%a)[%6] = %call + %5 + %7;
; <27>          |   @llvm.lifetime.end.p0i8(4,  &((i8*)(%b.priv)[0]));
; <37>          + END LOOP
; <37>
; <35>          @llvm.directive.region.exit(%0); [ DIR.OMP.END.SIMD() ]
; <0>     END REGION


; RUN: opt -hir-ssa-deconstruction -hir-framework -hir-vplan-vec -vplan-print-after-plain-cfg -disable-output < %s 2>&1 | FileCheck %s
; RUN: opt -passes="hir-ssa-deconstruction,hir-vplan-vec" -vplan-print-after-plain-cfg -disable-output < %s 2>&1 | FileCheck %s


; CHECK-LABEL:  VPlan after importing plain CFG:
; CHECK:          i64 [[VP2:%.*]] = phi  [ i64 0, [[BB1:BB[0-9]+]] ],  [ i64 [[VP3:%.*]], [[BB2:BB[0-9]+]] ]
; CHECK-NEXT:     i32 [[VP4:%.*]] = trunc i64 [[VP2]] to i32
; CHECK-NEXT:     store i32 [[VP4]] i32* [[I_LPRIV0:%.*]]
; CHECK-NEXT:     i8* [[VP5:%.*]] = bitcast i32* [[B_PRIV0:%.*]]
; CHECK-NEXT:     call i64 4 i8* [[VP5]] void (i64, i8*)* @llvm.lifetime.start.p0i8
; CHECK-NEXT:     store i32 0 i32* [[B_PRIV0]]
; CHECK-NEXT:     i32 (i32)** [[VP7:%.*]] = subscript inbounds i32 (i32)** [[FUNC0:%.*]] i64 [[VP2]]
; CHECK-NEXT:     i32 (i32)* [[VP8:%.*]] = load i32 (i32)** [[VP7]]
; CHECK-NEXT:     i32* [[VP9:%.*]] = subscript inbounds i32* [[C0:%.*]] i64 [[VP2]]
; CHECK-NEXT:     i32 [[VP10:%.*]] = load i32* [[VP9]]
; CHECK-NEXT:     i32 [[VP11:%.*]] = call i32 [[VP10]] i32 (i32)* [[VP8]]
; CHECK-NEXT:     i32 [[VP12:%.*]] = load i32* [[B_PRIV0]]
; CHECK-NEXT:     i32 [[VP13:%.*]] = load i32* [[I_LPRIV0]]
; CHECK-NEXT:     i64 [[VP14:%.*]] = sext i32 [[VP13]] to i64
; CHECK-NEXT:     i32* [[VP15:%.*]] = subscript inbounds i32* [[A0:%.*]] i64 [[VP14]]
; CHECK-NEXT:     i32 [[VP16:%.*]] = load i32* [[VP15]]
; CHECK-NEXT:     i32 [[VP17:%.*]] = add i32 [[VP11]] i32 [[VP12]]
; CHECK-NEXT:     i32 [[VP18:%.*]] = add i32 [[VP17]] i32 [[VP16]]
; CHECK-NEXT:     i64 [[VP19:%.*]] = sext i32 [[VP13]] to i64
; CHECK-NEXT:     i32* [[VP20:%.*]] = subscript inbounds i32* [[A0]] i64 [[VP19]]
; CHECK-NEXT:     store i32 [[VP18]] i32* [[VP20]]
; CHECK-NEXT:     i8* [[VP21:%.*]] = bitcast i32* [[B_PRIV0]]
; CHECK-NEXT:     call i64 4 i8* [[VP21]] void (i64, i8*)* @llvm.lifetime.end.p0i8
; CHECK-NEXT:     i64 [[VP3]] = add i64 [[VP2]] i64 1
; CHECK-NEXT:     i1 [[VP23:%.*]] = icmp slt i64 [[VP3]] i64 [[VP1:%vp.*]]

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #3

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind uwtable
define dso_local void @foo(i32* nocapture %a, i32* nocapture readonly %c, i32 (i32)** nocapture readonly %func, i32 %n) local_unnamed_addr #1 {
entry:
  %cmp = icmp sgt i32 %n, 0
  br i1 %cmp, label %DIR.OMP.SIMD.116, label %omp.precond.end

DIR.OMP.SIMD.116:                                 ; preds = %entry
  %b.priv = alloca i32, align 4
  %i.lpriv = alloca i32, align 4
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %DIR.OMP.SIMD.116
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.NORMALIZED.IV"(i8* null), "QUAL.OMP.NORMALIZED.UB"(i8* null), "QUAL.OMP.LASTPRIVATE"(i32* %i.lpriv), "QUAL.OMP.PRIVATE"(i32* %b.priv) ]
  br label %DIR.OMP.SIMD.2

DIR.OMP.SIMD.2:                                   ; preds = %DIR.OMP.SIMD.1
  %1 = bitcast i32* %b.priv to i8*
  %wide.trip.count = sext i32 %n to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.inner.for.body, %DIR.OMP.SIMD.2
  %indvars.iv = phi i64 [ 0, %DIR.OMP.SIMD.2 ], [ %indvars.iv.next, %omp.inner.for.body ]
  %2 = trunc i64 %indvars.iv to i32
  store i32 %2, i32* %i.lpriv, align 4, !tbaa !2
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #3
  store i32 0, i32* %b.priv, align 4, !tbaa !2
  %arrayidx = getelementptr inbounds i32 (i32)*, i32 (i32)** %func, i64 %indvars.iv
  %3 = load i32 (i32)*, i32 (i32)** %arrayidx, align 8, !tbaa !6
  %arrayidx7 = getelementptr inbounds i32, i32* %c, i64 %indvars.iv
  %4 = load i32, i32* %arrayidx7, align 4, !tbaa !2
  %call = call i32 %3(i32 %4) #4
  %5 = load i32, i32* %b.priv, align 4, !tbaa !2
  %add8 = add nsw i32 %5, %call
  %6 = load i32, i32* %i.lpriv, align 4, !tbaa !2
  %idxprom9 = sext i32 %6 to i64
  %arrayidx10 = getelementptr inbounds i32, i32* %a, i64 %idxprom9
  %7 = load i32, i32* %arrayidx10, align 4, !tbaa !2
  %add11 = add nsw i32 %7, %add8
  store i32 %add11, i32* %arrayidx10, align 4, !tbaa !2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #3
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond, label %omp.loop.exit, label %omp.inner.for.body

omp.loop.exit:                                    ; preds = %omp.inner.for.body
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
  ret void
}

attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "may-have-openmp-directive"="true" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core-avx2" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+rdrnd,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }
attributes #4 = { noinline nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"icx (ICX) 2019.8.2.0"}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!7, !7, i64 0}
!7 = !{!"pointer@_ZTSPFiiE", !4, i64 0}
!8 = !{!9, !3, i64 0}
!9 = !{!"array@_ZTSA256_i", !3, i64 0}
!10 = !{!11, !7, i64 0}
!11 = !{!"array@_ZTSA256_PFiiE", !7, i64 0}
