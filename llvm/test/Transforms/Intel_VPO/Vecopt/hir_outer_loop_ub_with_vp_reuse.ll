; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -hir-ssa-deconstruction -hir-framework -hir-vplan-vec -vplan-print-after-plain-cfg -disable-output -vplan-force-build < %s 2>&1 -vplan-enable-new-cfg-merge-hir=0 | FileCheck %s
; RUN: opt -hir-ssa-deconstruction -hir-framework -hir-vplan-vec -vplan-print-after-plain-cfg -disable-output -vplan-force-build < %s 2>&1 -vplan-enable-new-cfg-merge-hir=1 | FileCheck %s
; RUN: opt -passes="hir-ssa-deconstruction,hir-vplan-vec" -vplan-print-after-plain-cfg -disable-output -vplan-force-build < %s 2>&1 -vplan-enable-new-cfg-merge-hir=0 | FileCheck %s
; RUN: opt -passes="hir-ssa-deconstruction,hir-vplan-vec" -vplan-print-after-plain-cfg -disable-output -vplan-force-build < %s 2>&1 -vplan-enable-new-cfg-merge-hir=1 | FileCheck %s
;
; Verify that we are able to build a VPlan for an outer loop with a nested loop
; where the decomposed value for the loop upper bound is a VPInstruction that is
; not newly generated. Decomposer had this implicit assumption which was causing
; an assertion fail when trying to set the underlying node.

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@arr = dso_local local_unnamed_addr global [128 x [128 x i64]] zeroinitializer, align 16

define dso_local void @foo(i64* nocapture readonly %lp) local_unnamed_addr #0 {
;
; CHECK-LABEL:  VPlan after importing plain CFG:
; CHECK-NEXT:  VPlan IR for: foo:HIR.#{{[0-9]+}}
; CHECK-NEXT:  External Defs Start:
; CHECK-DAG:     [[VP0:%.*]] = {@arr}
; CHECK-DAG:     [[VP1:%.*]] = {%lp}
; CHECK-NEXT:  External Defs End:
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], [[BB3:BB[0-9]+]]
; CHECK-NEXT:     i64 [[VP2:%.*]] = phi  [ i64 0, [[BB1]] ],  [ i64 [[VP3:%.*]], [[BB3]] ]
; CHECK-NEXT:     i64 [[VP_LOAD:%.*]] = load i64* [[LP0:%.*]]
; CHECK-NEXT:     br [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: [[BB2]]
; CHECK-NEXT:     i64 [[VP4:%.*]] = add i64 [[VP_LOAD]] i64 1
; CHECK-NEXT:     br [[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]: # preds: [[BB4]], [[BB5]]
; CHECK-NEXT:     i64 [[VP5:%.*]] = phi  [ i64 0, [[BB4]] ],  [ i64 [[VP6:%.*]], [[BB5]] ]
; CHECK-NEXT:     i64 [[VP7:%.*]] = add i64 [[VP2]] i64 [[VP5]]
; CHECK-NEXT:     i64* [[VP_SUBSCRIPT:%.*]] = subscript inbounds [128 x [128 x i64]]* @arr i64 0 i64 [[VP5]] i64 [[VP2]]
; CHECK-NEXT:     store i64 [[VP7]] i64* [[VP_SUBSCRIPT]]
; CHECK-NEXT:     i64 [[VP6]] = add i64 [[VP5]] i64 1
; CHECK-NEXT:     i1 [[VP8:%.*]] = icmp slt i64 [[VP6]] i64 [[VP4]]
; CHECK-NEXT:     br i1 [[VP8]], [[BB5]], [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: [[BB5]]
; CHECK-NEXT:     i64 [[VP3]] = add i64 [[VP2]] i64 1
; CHECK-NEXT:     i1 [[VP9:%.*]] = icmp slt i64 [[VP3]] i64 100
; CHECK-NEXT:     br i1 [[VP9]], [[BB2]], [[BB6:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]]: # preds: [[BB3]]
; CHECK-NEXT:     br [[BB7:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB7]]: # preds: [[BB6]]
; CHECK-NEXT:     br <External Block>
;
entry:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %for.body

for.body:                                         ; preds = %entry, %for.end
  %l1.020 = phi i64 [ 0, %entry ], [ %inc7, %for.end ]
  %0 = load i64, i64* %lp, align 8
  %add = add i64 %0, 1
  br label %for.body3.preheader

for.body3.preheader:                              ; preds = %for.body
  br label %for.body3

for.body3:                                        ; preds = %for.body3.preheader, %for.body3
  %l2.019 = phi i64 [ %inc, %for.body3 ], [ 0, %for.body3.preheader ]
  %add4 = add i64 %l2.019, %l1.020
  %arrayidx5 = getelementptr inbounds [128 x [128 x i64]], [128 x [128 x i64]]* @arr, i64 0, i64 %l2.019, i64 %l1.020
  store i64 %add4, i64* %arrayidx5, align 8
  %inc = add nuw i64 %l2.019, 1
  %exitcond.not = icmp eq i64 %inc, %add
  br i1 %exitcond.not, label %for.end.loopexit, label %for.body3

for.end.loopexit:                                 ; preds = %for.body3
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %for.body
  %inc7 = add nuw nsw i64 %l1.020, 1
  %exitcond22.not = icmp eq i64 %inc7, 100
  br i1 %exitcond22.not, label %for.end8, label %for.body

for.end8:                                         ; preds = %for.end
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"() ]
  ret void
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
