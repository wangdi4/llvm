; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; This test checks that debug remarks about peeling decisions are emitted when
; '-vplan-debug-opt-report' is given.

; RUN: opt -S < %s -passes='vplan-vec,intel-ir-optreport-emitter' \
; RUN:     -disable-output -vplan-debug-opt-report -intel-opt-report=high \
; RUN:     -vplan-enable-peeling -vplan-force-dyn-alignment \
; RUN:     -vplan-vec-scenario="s1;v4;s1" 2>&1 | FileCheck %s

source_filename = "test.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree norecurse nosync nounwind memory(argmem: readwrite) uwtable
define dso_local void @foo(ptr nocapture noundef readonly %A, ptr nocapture noundef writeonly %B, i64 noundef %N) local_unnamed_addr #0 !dbg !7 {
; test.c:
; <1>void foo(int *A, int *B, uint64_t N) {
; <2>  for (unsigned I = 0; I < N; ++I)
; <3>    B[I] = A[I] + A[I + 1]
; <4>}
; CHECK-LABEL:  Global optimization report for : foo
; CHECK-EMPTY:
; CHECK-NEXT:  LOOP BEGIN at test.c (2, 3)
; CHECK-NEXT:  <Peeled loop for vectorization>
; CHECK-NEXT:      remark #15576: peel loop is dynamic
; CHECK:           remark #15578: DEBUG: peeled by memref at 3:5 (store)
; CHECK-NEXT:  LOOP END
; CHECK-EMPTY:
; CHECK-NEXT:  LOOP BEGIN at test.c (2, 3)
; CHECK-NEXT:      remark #15301: SIMD LOOP WAS VECTORIZED
; CHECK:           remark #15578: DEBUG: peel scenario: Trip count == default trip count
; CHECK-NEXT:      remark #15578: DEBUG: peel was performed: yes
; CHECK-NEXT:      remark #15578: DEBUG: estimated gain from peeling: [[PEEL:.*]]
; CHECK-NEXT:      remark #15578: DEBUG: estimated gain from *not* peeling: [[NO_PEEL:.*]]
; CHECK-NEXT:      remark #15578: DEBUG: peel kind: dynamic
; CHECK-NEXT:      remark #15578: DEBUG: peel formula: UnalignedGain < FavorAlignedMultiplierDefaultTCEst * AlignedGain: [[NO_PEEL]] < 2 * [[PEEL]]
; CHECK:       LOOP END
entry:
  call void @llvm.dbg.value(metadata ptr %A, metadata !18, metadata !DIExpression()), !dbg !23
  call void @llvm.dbg.value(metadata ptr %B, metadata !19, metadata !DIExpression()), !dbg !23
  call void @llvm.dbg.value(metadata i64 %N, metadata !20, metadata !DIExpression()), !dbg !23
  call void @llvm.dbg.value(metadata i64 0, metadata !21, metadata !DIExpression()), !dbg !24
  br label %OMP.SIMD.BEGIN, !dbg !25

OMP.SIMD.BEGIN:                                   ; preds = %entry
  %entry.region = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %for.body

for.body:                                         ; preds = %for.body, %OMP.SIMD.BEGIN
  %iv = phi i64 [ 0, %OMP.SIMD.BEGIN ], [ %iv.next, %for.body ]
  call void @llvm.dbg.value(metadata i64 %iv, metadata !21, metadata !DIExpression()), !dbg !24

  ; %ld.1 = A[I]
  %src.1 = getelementptr inbounds i32, ptr %A, i64 %iv, !dbg !26
  %ld.1 = load i32, ptr %src.1, align 4, !dbg !26, !tbaa !28

  ; %ld.2 = A[I + 1]
  %off = add nuw nsw i64 %iv, 1, !dbg !32
  call void @llvm.dbg.value(metadata i64 %off, metadata !21, metadata !DIExpression()), !dbg !24
  %src.2 = getelementptr inbounds i32, ptr %A, i64 %off, !dbg !33
  %ld.2 = load i32, ptr %src.2, align 4, !dbg !33, !tbaa !28

  ; B[I] = %ld.1 + %ld.2
  %res = add nuw nsw i32 %ld.1, %ld.2, !dbg !34
  %dst = getelementptr inbounds i32, ptr %B, i64 %iv, !dbg !35
  store i32 %res, ptr %dst, align 4, !dbg !36, !tbaa !28

  %iv.next = add nuw nsw i64 %iv, 1, !dbg !32
  call void @llvm.dbg.value(metadata i64 %iv.next, metadata !21, metadata !DIExpression()), !dbg !24
  %exitcond = icmp eq i64 %iv.next, %N, !dbg !37
  br i1 %exitcond, label %for.end, label %for.body, !dbg !25, !llvm.loop !38

for.end:                                          ; preds = %for.body
  call void @llvm.directive.region.exit(token %entry.region) [ "DIR.OMP.END.SIMD"() ]
  br label %exit

exit:                                             ; preds = %for.end
  ret void, !dbg !41
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.value(metadata, metadata, metadata) #2

attributes #0 = { nofree norecurse nosync nounwind memory(argmem: readwrite) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "loopopt-pipeline"="light" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "pre_loopopt" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #1 = { nounwind }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5}
!llvm.ident = !{!6}

!0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "clang based Intel(R) oneAPI DPC++/C++ Compiler 2023.2.0 (2023.x.0.YYYYMMDD)", isOptimized: true, flags: " --intel -O3 -g -mllvm -vplan-enable-peeling -mllvm -vplan-force-dyn-alignment -mllvm -vplan-vec-scenario=s1;v4;s1 test.c -S -mllvm -print-module-before-loopopt -fveclib=SVML -fheinous-gnu-extensions", runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "test.c", directory: "/localdisk2/tlanphea/issues/46335")
!2 = !{i32 7, !"Dwarf Version", i32 4}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 7, !"uwtable", i32 2}
!6 = !{!"Intel(R) oneAPI DPC++/C++ Compiler 2023.2.0 (2023.x.0.YYYYMMDD)"}
!7 = distinct !DISubprogram(name: "foo", scope: !1, file: !1, line: 1, type: !8, scopeLine: 2, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !17)
!8 = !DISubroutineType(types: !9)
!9 = !{null, !10, !10, !12}
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!11 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!12 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !13, line: 27, baseType: !14)
!13 = !DIFile(filename: "/usr/include/bits/stdint-uintn.h", directory: "")
!14 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint64_t", file: !15, line: 45, baseType: !16)
!15 = !DIFile(filename: "/usr/include/bits/types.h", directory: "")
!16 = !DIBasicType(name: "unsigned long", size: 64, encoding: DW_ATE_unsigned)
!17 = !{!18, !19, !20, !21}
!18 = !DILocalVariable(name: "A", arg: 1, scope: !7, file: !1, line: 1, type: !10)
!19 = !DILocalVariable(name: "B", arg: 2, scope: !7, file: !1, line: 1, type: !10)
!20 = !DILocalVariable(name: "N", arg: 3, scope: !7, file: !1, line: 1, type: !12)
!21 = !DILocalVariable(name: "I", scope: !22, file: !1, line: 2)
!22 = distinct !DILexicalBlock(scope: !7, file: !1, line: 2, column: 3)
!23 = !DILocation(line: 0, scope: !7)
!24 = !DILocation(line: 0, scope: !22)
!25 = !DILocation(line: 2, column: 3, scope: !22)
!26 = !DILocation(line: 4, column: 12, scope: !27)
!27 = distinct !DILexicalBlock(scope: !22, file: !1, line: 2, column: 3)
!28 = !{!29, !29, i64 0}
!29 = !{!"int", !30, i64 0}
!30 = !{!"omnipotent char", !31, i64 0}
!31 = !{!"Simple C/C++ TBAA"}
!32 = !DILocation(line: 3, column: 23, scope: !27)
!33 = !DILocation(line: 3, column: 19, scope: !27)
!34 = !DILocation(line: 3, column: 17, scope: !27)
!35 = !DILocation(line: 3, column: 5, scope: !27)
!36 = !DILocation(line: 3, column: 10, scope: !27)
!37 = !DILocation(line: 2, column: 26, scope: !27)
!38 = distinct !{!38, !25, !39, !40}
!39 = !DILocation(line: 3, column: 26, scope: !22)
!40 = !{!"llvm.loop.mustprogress"}
!41 = !DILocation(line: 3, column: 1, scope: !7)
