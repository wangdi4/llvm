; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; Test to check VPlan histogram lowering and HIR vectorizer CG support for
; masked histogram idiom.

; RUN: opt -mattr=+avx512vl,+avx512cd -passes='hir-ssa-deconstruction,hir-temp-cleanup,hir-vec-dir-insert,hir-vplan-vec,print<hir>' -vplan-force-vf=4 -vplan-print-after-optimize-vconflict-idiom -disable-output < %s 2>&1 | FileCheck %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree norecurse nosync nounwind uwtable
define dso_local void @foo(i64* noalias nocapture noundef readonly %idx, i64* noalias nocapture noundef %out, i64* noalias nocapture noundef readonly %cond) local_unnamed_addr #0 {
; CHECK-LABEL:  VPlan after VPlanOptimizeVConflictIdiom:
; CHECK:         [[BB2:BB[0-9]+]]: # preds: [[BB1:BB[0-9]+]], [[BB3:BB[0-9]+]]
; CHECK:          [DA: Div] i64* [[VP_SUBSCRIPT:%.*]] = subscript inbounds i64* [[COND0:%.*]] i64 [[IV:%.*]]
; CHECK-NEXT:     [DA: Div] i64 [[VP_LOAD:%.*]] = load i64* [[VP_SUBSCRIPT]]
; CHECK-NEXT:     [DA: Div] i1 [[VP5:%.*]] = icmp ne i64 [[VP_LOAD]] i64 0
; CHECK-NEXT:     [DA: Uni] br [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: [[BB2]]
; CHECK-NEXT:     [DA: Div] i1 [[VP6:%.*]] = block-predicate i1 [[VP5]]
; CHECK-NEXT:     [DA: Div] i64* [[VP_SUBSCRIPT_1:%.*]] = subscript inbounds i64* [[IDX0:%.*]] i64 [[IV]]
; CHECK-NEXT:     [DA: Div] i64 [[VP_VCONFLICT_INDEX:%.*]] = load i64* [[VP_SUBSCRIPT_1]]
; CHECK-NEXT:     [DA: Div] i64* [[VP_SUBSCRIPT_2:%.*]] = subscript inbounds i64* [[OUT0:%.*]] i64 [[VP_VCONFLICT_INDEX]]
; CHECK-NEXT:     [DA: Div] i64 [[VP_LOAD_1:%.*]] = load i64* [[VP_SUBSCRIPT_2]]
; CHECK-NEXT:     [DA: Div] i64* [[VP_SUBSCRIPT_3:%.*]] = subscript inbounds i64* [[OUT0]] i64 [[VP_VCONFLICT_INDEX]]
; CHECK-NEXT:     [DA: Div] i64 [[VP_VPCONFICT_INTRINSIC:%.*]] = vpconflict-insn i64 [[VP_VCONFLICT_INDEX]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP_MASK_TO_INT:%.*]] = convert-mask-to-int i1 [[VP5]]
; CHECK-NEXT:     [DA: Div] i64 [[VP_CONFLICT_AND_MASK:%.*]] = and i64 [[VP_VPCONFICT_INTRINSIC]] i64 [[VP_MASK_TO_INT]]
; CHECK-NEXT:     [DA: Div] i64 [[VP_POP_COUNT:%.*]] = call i64 [[VP_CONFLICT_AND_MASK]] llvm.ctpop [x 1]
; CHECK-NEXT:     [DA: Div] i64 [[VP7:%.*]] = add i64 [[VP_POP_COUNT]] i64 1
; CHECK-NEXT:     [DA: Div] i64 [[VP8:%.*]] = mul i64 [[VP7]] i64 1
; CHECK-NEXT:     [DA: Div] i64 [[VP9:%.*]] = add i64 [[VP_LOAD_1]] i64 [[VP8]]
; CHECK-NEXT:     [DA: Div] store i64 [[VP9]] i64* [[VP_SUBSCRIPT_3]]
; CHECK-NEXT:     [DA: Uni] br [[BB3]]

; Checks for outgoing vector HIR.
; CHECK-LABEL: Function: foo
; CHECK-EMPTY:
; CHECK-NEXT:  BEGIN REGION { modified }
; CHECK-NEXT:        [[DOTVEC30:%.*]] = undef
; CHECK-NEXT:        [[DOTVEC20:%.*]] = undef
; CHECK-NEXT:        [[DOTVEC0:%.*]] = (<4 x i64>*)([[COND0]])[0]
; CHECK-NEXT:        [[DOTVEC10:%.*]] = [[DOTVEC0]] != 0
; CHECK-NEXT:        [[DOTVEC20]] = (<4 x i64>*)([[IDX0]])[0], Mask = @{[[DOTVEC10]]};
; CHECK-NEXT:        [[DOTVEC30]] = (<4 x i64>*)([[OUT0]])[[[DOTVEC20]]], Mask = @{[[DOTVEC10]]};
; CHECK-NEXT:        [[CONFLICTS0:%.*]] = @llvm.x86.avx512.conflict.q.256([[DOTVEC20]])
; CHECK-NEXT:        [[TMP0:%.*]] = bitcast.<4 x i1>.i4([[DOTVEC10]])
; CHECK-NEXT:        [[CAST0:%.*]] = zext.i4.i64([[TMP0]])
; CHECK-NEXT:        [[DOTVEC50:%.*]] = [[CONFLICTS0]]  &  [[CAST0]]
; CHECK-NEXT:        [[LLVM_CTPOP_V4I640:%.*]] = @llvm.ctpop.v4i64([[DOTVEC50]])
; CHECK-NEXT:        [[DOTVEC60:%.*]] = [[LLVM_CTPOP_V4I640]] + 1  *  1
; CHECK-NEXT:        (<4 x i64>*)([[OUT0]])[[[DOTVEC20]]] = [[DOTVEC30]] + [[DOTVEC60]], Mask = @{[[DOTVEC10]]};
; CHECK:       END REGION
;
entry:
;   for (l1 = 0; l1 < 4; l1++) {
;     if (cond[l1])
;       out[idx[l1]] += 1;
;   }
  br label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %l1.07 = phi i64 [ 0, %entry ], [ %inc, %for.inc ]
  %arrayidx = getelementptr inbounds i64, i64* %cond, i64 %l1.07
  %0 = load i64, i64* %arrayidx, align 8
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %for.inc, label %if.then

if.then:                                          ; preds = %for.body
  %arrayidx1 = getelementptr inbounds i64, i64* %idx, i64 %l1.07
  %1 = load i64, i64* %arrayidx1, align 8
  %arrayidx2 = getelementptr inbounds i64, i64* %out, i64 %1
  %2 = load i64, i64* %arrayidx2, align 8
  %add = add nsw i64 %2, 1
  store i64 %add, i64* %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then
  %inc = add nuw nsw i64 %l1.07, 1
  %exitcond.not = icmp eq i64 %inc, 4
  br i1 %exitcond.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc
  ret void
}
