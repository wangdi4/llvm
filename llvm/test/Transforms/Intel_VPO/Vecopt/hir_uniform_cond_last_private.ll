; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; Test to check stability of VPlan HIR vectorizer in handling uniform
; conditional last privates.

; RUN: opt -disable-output %s -passes="hir-ssa-deconstruction,hir-temp-cleanup,hir-vplan-vec,print<hir>" -vplan-force-vf=4 2>&1 | FileCheck %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #0

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #0

define void @foo(i1 %cond, ptr %val) #1 {
; CHECK-LABEL: Function: foo
; CHECK-EMPTY:
; CHECK-NEXT:  BEGIN REGION { modified }
; CHECK-NEXT:        [[PRIV0:%.*]] = undef
; CHECK-NEXT:        [[PHI_TEMP0:%.*]] = [[PRIV0]]
; CHECK-NEXT:        [[PHI_TEMP30:%.*]] = -1

; CHECK:             + DO i1 = 0, 1023, 4   <DO_LOOP> <simd-vectorized> <novectorize>
; CHECK-NEXT:        |   [[PHI_TEMP50:%.*]] = [[PHI_TEMP30]]
; CHECK-NEXT:        |   [[PHI_TEMP70:%.*]] = [[PHI_TEMP0]]
; CHECK-NEXT:        |   if ([[COND0:%.*]] != 0)
; CHECK-NEXT:        |   {
; CHECK-NEXT:        |      [[DOTCOPY90:%.*]] = 1
; CHECK-NEXT:        |      [[PHI_TEMP50]] = i1 + <i64 0, i64 1, i64 2, i64 3>
; CHECK-NEXT:        |      [[PHI_TEMP70]] = [[DOTCOPY90]]
; CHECK-NEXT:        |   }
; CHECK-NEXT:        |   [[PHI_TEMP0]] = [[PHI_TEMP70]]
; CHECK-NEXT:        |   [[PHI_TEMP30]] = [[PHI_TEMP50]]
; CHECK-NEXT:        + END LOOP

; CHECK:             [[DOTVEC0:%.*]] = [[PHI_TEMP50]] != -1
; CHECK-NEXT:        [[TMP0:%.*]] = bitcast.<4 x i1>.i4([[DOTVEC0]])
; CHECK-NEXT:        [[CMP0:%.*]] = [[TMP0]] == 0
; CHECK-NEXT:        [[ALL_ZERO_CHECK0:%.*]] = [[CMP0]]
; CHECK-NEXT:        [[PHI_TEMP140:%.*]] = [[PRIV0]]
; CHECK-NEXT:        if ([[CMP0]] == 1)
; CHECK-NEXT:        {
; CHECK-NEXT:           goto [[BB6:BB.*]];
; CHECK-NEXT:        }
; CHECK-NEXT:        [[PRIV_IDX_MAX0:%.*]] = @llvm.vector.reduce.smax.v4i64([[PHI_TEMP50]])
; CHECK-NEXT:        [[PRIV_IDX_CMP0:%.*]] = [[PHI_TEMP50]] == [[PRIV_IDX_MAX0]]
; CHECK-NEXT:        [[BSFINTMASK0:%.*]] = bitcast.<4 x i1>.i4([[PRIV_IDX_CMP0]])
; CHECK-NEXT:        [[BSF0:%.*]] = @llvm.cttz.i4([[BSFINTMASK0]],  1)
; CHECK-NEXT:        [[PRIV0]] = extractelement [[PHI_TEMP70]],  [[BSF0]]
; CHECK-NEXT:        [[PHI_TEMP140]] = [[PRIV0]]
; CHECK-NEXT:        [[BB6]]:
; CHECK-NEXT:        [[PRIV0]] = [[PHI_TEMP140]]
; CHECK-NEXT:        ([[VAL0:%.*]])[0] = [[PRIV0]]
; CHECK-NEXT:        ret
; CHECK-NEXT:  END REGION
;



entry:
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %entry
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %for.body

for.body:                                  ; preds = %DIR.OMP.SIMD.1, %merge
  %priv = phi i32 [ undef, %DIR.OMP.SIMD.1 ], [ %priv.next, %merge ]
  %iv = phi i64 [ 0, %DIR.OMP.SIMD.1 ], [ %iv.next, %merge ]
  br i1 %cond, label %if.then, label %merge

if.then:                                   ; preds = %for.body
  br label %merge

merge:                                             ; preds = %if.then, %for.body
  %priv.next = phi i32 [ %priv, %for.body ], [ 1, %if.then ]
  %iv.next = add nuw nsw i64 %iv, 1
  %exitcond = icmp eq i64 %iv.next, 1024
  br i1 %exitcond, label %DIR.OMP.END.SIMD.2, label %for.body

DIR.OMP.END.SIMD.2:                               ; preds = %merge
  %priv.lcssa = phi i32 [ %priv.next, %merge ]
  store i32 %priv.lcssa, ptr %val, align 8
  br label %DIR.OMP.END.SIMD.224

DIR.OMP.END.SIMD.224:                             ; preds = %DIR.OMP.END.SIMD.2
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"() ]
  ret void
}
