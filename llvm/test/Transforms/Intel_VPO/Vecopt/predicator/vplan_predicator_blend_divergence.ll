; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
;
; The test checks that during blend instructions creation in predicator, we
; don't crash on divergence recalculation for blend that has a newly created
; phi as operand.
;
; RUN: opt -passes=vplan-vec -disable-output -vplan-print-after-predicator -vplan-enable-masked-variant=0 -vplan-dump-da-shapes %s 2>&1 | FileCheck %s
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #0

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #0

define hidden void @_ZN10Mandelbrot12execute_partEiii.DIR.OMP.PARALLEL.LOOP.2.split180(float %f, i1 %c1, i1 %c2, i64 %N) #1 {
;
; CHECK-LABEL:  VPlan after predicator:
; CHECK:         [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: [Shape: Uniform]] i1 [[VP_C2_NOT:%.*]] = not i1 [[C20:%.*]]
; CHECK-NEXT:     [DA: [Shape: Uniform]] br [[BB1:BB[0-9]+]]
;
; CHECK:         [[BB1]]: # preds: [[BB0]]
; CHECK:          [DA: [Shape: Uniform]] br [[BB2:BB[0-9]+]]
;
; CHECK:         [[BB2]]: # preds: [[BB1]], [[BB3:BB[0-9]+]]
; CHECK:          [DA: [Shape: Uniform]] br i1 [[C10:%.*]], [[BB4:BB[0-9]+]], [[BB5:BB[0-9]+]]
;
; CHECK:           [[BB5]]: # preds: [[BB2]]
; CHECK:            [DA: [Shape: Uniform]] br [[BB6:BB[0-9]+]]
;
; CHECK:           [[BB6]]: # preds: [[BB5]]
; CHECK:            [DA: [Shape: Uniform]] br i1 [[C20]], [[BB7:BB[0-9]+]], [[BB8:BB[0-9]+]]
;
; CHECK:             [[BB7]]: # preds: [[BB6]]
; CHECK:              [DA: [Shape: Random]] i1 [[VP_HIR_CMP_48:%.*]] = fcmp uge float [[VP8:%.*]] float 4.000000e+00
; CHECK:              [DA: [Shape: Random]] i1 [[VP_HIR_CMP_48_NOT:%.*]] = not i1 [[VP_HIR_CMP_48]]
; CHECK:              [DA: [Shape: Uniform]] br [[BB9:BB[0-9]+]]
;
; CHECK:             [[BB9]]: # preds: [[BB7]]
; CHECK:              [DA: [Shape: Random]] i1 [[VP9:%.*]] = block-predicate i1 [[VP_HIR_CMP_48]]
; CHECK:              [DA: [Shape: Uniform]] br [[BB8]]
;
; CHECK:           [[BB8]]: # preds: [[BB6]], [[BB9]]
; CHECK:            [DA: [Shape: Random]] float [[VP_T27_0_PHI_BB7:%.*]] = phi  [ float undef, [[BB6]] ],  [ float [[VP8]], [[BB9]] ]
; CHECK:            [DA: [Shape: Random]] i1 [[VP_HIR_CMP_48_NOT_PHI_BB7:%.*]] = phi  [ i1 false, [[BB6]] ],  [ i1 [[VP_HIR_CMP_48_NOT]], [[BB9]] ]
; CHECK:            [DA: [Shape: Random]] i1 [[VP10:%.*]] = or i1 [[VP_C2_NOT]] i1 [[VP_HIR_CMP_48_NOT_PHI_BB7]]
; CHECK:            [DA: [Shape: Random]] i1 [[VP11:%.*]] = block-predicate i1 [[VP10]]
; CHECK:            [DA: [Shape: Uniform]] br [[BLEND_BB0:blend.bb[0-9]+]]
;
; CHECK:           [[BLEND_BB0]]: # preds: [[BB8]]
; CHECK:            [DA: [Shape: Random]] float [[VP_T27_0_BLEND_BB7:%.*]] = blend [ float [[VP_T27_0_PHI_BB7]], i1 true ], [ float 0.000000e+00, i1 [[VP10]] ]
; CHECK:            [DA: [Shape: Uniform]] br [[BB4]]
;
; CHECK:         [[BB4]]: # preds: [[BB2]], [[BLEND_BB0]]
; CHECK:          [DA: [Shape: Random]] float [[VP_T27_0:%.*]] = phi  [ float 0.000000e+00, [[BB2]] ],  [ float [[VP_T27_0_BLEND_BB7]], [[BLEND_BB0]] ]
; CHECK:          [DA: [Shape: Uniform]] br [[BB3]]
;
DIR.OMP.PARALLEL.LOOP.6:
  br label %DIR.OMP.SIMD.1114

DIR.OMP.SIMD.1114:                                ; preds = %DIR.OMP.PARALLEL.LOOP.6
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %DIR.OMP.SIMD.1114
  br label %loop.125

loop.125:                                         ; preds = %ifmerge.70, %DIR.OMP.SIMD.1
  %i2.i64.0 = phi i64 [ 0, %DIR.OMP.SIMD.1 ], [ %nextivloop.125, %ifmerge.70 ]
  %1 = trunc i64 %i2.i64.0 to i32
  %2 = sitofp i32 %1 to float
  %3 = fmul fast float %2, %f
  %4 = fadd fast float %3, %f
  br i1 %c1, label %hir.L.67, label %then.27

then.27:                                          ; preds = %loop.125
  br label %ifmerge.131

ifmerge.131:                                      ; preds = %then.27
  br i1 %c2, label %then.132, label %ifmerge.132

then.132:                                         ; preds = %ifmerge.131
  %5 = fmul fast float %4, 2.000000e+00
  %6 = fmul fast float %5, %f
  %7 = fadd fast float %6, %f
  %8 = fmul fast float %7, %7
  %9 = fadd fast float %f, %8
  %hir.cmp.48 = fcmp fast uge float %9, 4.000000e+00
  br i1 %hir.cmp.48, label %then.48, label %ifmerge.132

then.48:                                          ; preds = %then.132
  br label %hir.L.67

ifmerge.132:                                      ; preds = %then.132, %ifmerge.131
  br label %hir.L.67

hir.L.67:                                         ; preds = %ifmerge.132, %then.48, %loop.125
  %t27.0 = phi float [ 0.000000e+00, %ifmerge.132 ], [ 0.000000e+00, %loop.125 ], [ %9, %then.48 ]
  br label %ifmerge.70

ifmerge.70:                                       ; preds = %hir.L.67
  %nextivloop.125 = add nuw nsw i64 %i2.i64.0, 1
  %condloop.125.not = icmp eq i64 %nextivloop.125, %N
  br i1 %condloop.125.not, label %afterloop.125, label %loop.125

afterloop.125:                                    ; preds = %ifmerge.70
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  ret void
}

attributes #0 = { nounwind }
attributes #1 = { "unsafe-fp-math"="true" }

