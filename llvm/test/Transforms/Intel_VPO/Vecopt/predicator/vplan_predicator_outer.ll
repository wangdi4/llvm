; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py

; RUN: opt -S -passes="vplan-func-vec" -print-after-vplan-func-vec-predicator < %s -disable-output | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@A = common global [1024 x [1024 x i64]] zeroinitializer, align 16

define void @test_2_level_loop_nest(i64 %vf) local_unnamed_addr {
; CHECK-LABEL:  VPlan IR for: test_2_level_loop_nest
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Div] i64 [[VP_LANE:%.*]] = induction-init{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Uni] br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]], [[BB2:BB[0-9]+]]
; CHECK-NEXT:     [DA: Div] i64 [[VP_OUTER_INDUCTION_PHI:%.*]] = phi  [ i64 [[VP_LANE]], [[BB0]] ],  [ i64 [[VP_OUTER_INDUCTION:%.*]], [[BB2]] ]
; CHECK-NEXT:     [DA: Div] i1 [[VP_LOOP_MASK:%.*]] = phi  [ i1 true, [[BB0]] ],  [ i1 [[VP_LOOP_MASK_NEXT:%.*]], [[BB2]] ]
; CHECK-NEXT:     [DA: Uni] br [[BB3:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: [[BB1]]
; CHECK-NEXT:     [DA: Div] i1 [[VP0:%.*]] = block-predicate i1 [[VP_LOOP_MASK]]
; CHECK-NEXT:     [DA: Div] ptr [[VP_GEP:%.*]] = getelementptr inbounds [1024 x [1024 x i64]], ptr @A i64 0 i64 [[VP_OUTER_INDUCTION_PHI]] i64 0
; CHECK-NEXT:     [DA: Div] i1 [[VP_OUTER_LOOP_VARYING:%.*]] = icmp eq ptr [[VP_GEP]] ptr null
; CHECK-NEXT:     [DA: Uni] br [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: [[BB3]]
; CHECK-NEXT:     [DA: Div] i1 [[VP_BB8_BR_VP_OUTER_LOOP_VARYING:%.*]] = select i1 [[VP_LOOP_MASK]] i1 [[VP_OUTER_LOOP_VARYING]] i1 false
; CHECK-NEXT:     [DA: Uni] br [[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]: # preds: [[BB4]]
; CHECK-NEXT:     [DA: Div] i1 [[VP1:%.*]] = block-predicate i1 [[VP_BB8_BR_VP_OUTER_LOOP_VARYING]]
; CHECK-NEXT:     [DA: Uni] br [[BB6:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]]: # preds: [[BB5]], [[BB6]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP_INNER_INDUCTION_PHI:%.*]] = phi  [ i64 0, [[BB5]] ],  [ i64 [[VP_INNER_INDUCTION:%.*]], [[BB6]] ]
; CHECK-NEXT:     [DA: Div] i1 [[VP2:%.*]] = block-predicate i1 [[VP_BB8_BR_VP_OUTER_LOOP_VARYING]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP_INNER_INDUCTION]] = add i64 [[VP_INNER_INDUCTION_PHI]] i64 1
; CHECK-NEXT:     [DA: Uni] i1 [[VP_EXITCOND:%.*]] = icmp eq i64 [[VP_INNER_INDUCTION]] i64 1024
; CHECK-NEXT:     [DA: Uni] i1 [[VP3:%.*]] = all-zero-check i1 [[VP_BB8_BR_VP_OUTER_LOOP_VARYING]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP4:%.*]] = or i1 [[VP3]] i1 [[VP_EXITCOND]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP4]], [[BB7:BB[0-9]+]], [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB7]]: # preds: [[BB6]]
; CHECK-NEXT:     [DA: Div] i1 [[VP5:%.*]] = block-predicate i1 [[VP_BB8_BR_VP_OUTER_LOOP_VARYING]]
; CHECK-NEXT:     [DA: Uni] br [[BB8:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB8]]: # preds: [[BB7]]
; CHECK-NEXT:     [DA: Div] i1 [[VP6:%.*]] = block-predicate i1 [[VP_LOOP_MASK]]
; CHECK-NEXT:     [DA: Div] i64 [[VP_OUTER_INDUCTION]] = add i64 [[VP_OUTER_INDUCTION_PHI]] i64 [[VF0:%.*]]
; CHECK-NEXT:     [DA: Div] i1 [[VP_EXITCOND26:%.*]] = icmp eq i64 [[VP_OUTER_INDUCTION]] i64 1024
; CHECK-NEXT:     [DA: Uni] br [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB8]]
; CHECK-NEXT:     [DA: Div] i1 [[VP_EXITCOND26_NOT:%.*]] = not i1 [[VP_EXITCOND26]]
; CHECK-NEXT:     [DA: Div] i1 [[VP_LOOP_MASK_NEXT]] = select i1 [[VP_LOOP_MASK]] i1 [[VP_EXITCOND26_NOT]] i1 false
; CHECK-NEXT:     [DA: Uni] i1 [[VP7:%.*]] = all-zero-check i1 [[VP_LOOP_MASK_NEXT]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP7]], [[BB9:BB[0-9]+]], [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB9]]: # preds: [[BB2]]
; CHECK-NEXT:     [DA: Div] ret
; CHECK-NEXT:     [DA: Uni] br <External Block>
;
entry:
;        entry
;          |
; +------>outer.loop
; |        |       |
; |     inner.ph   |
; |        |       |
; |    inner.loop  |
; |        |       |
; |    inner.exit  |
; |        |       |
; +--outer.loop.latch
;          |
;         exit
  %lane = call i64 @llvm.vplan.laneid()
  br label %outer.loop

outer.loop:
  %outer.induction.phi = phi i64 [ %lane, %entry ], [ %outer.induction, %outer.loop.latch ]
  %gep = getelementptr inbounds [1024 x [1024 x i64]], ptr @A, i64 0, i64 %outer.induction.phi, i64 0
  %outer.loop.varying = icmp eq ptr %gep, null
  br i1 %outer.loop.varying, label %inner.ph, label %outer.loop.latch

inner.ph:
  br label %inner.loop

inner.loop:
  %inner.induction.phi = phi i64 [ 0, %inner.ph ], [ %inner.induction, %inner.loop ]
  %inner.induction = add nuw nsw i64 %inner.induction.phi, 1
  %exitcond = icmp eq i64 %inner.induction, 1024
  br i1 %exitcond, label %inner.exit, label %inner.loop

inner.exit:
  br label %outer.loop.latch

outer.loop.latch:
  %outer.induction = add nuw nsw i64 %outer.induction.phi, %vf
  %exitcond26 = icmp eq i64 %outer.induction, 1024
  br i1 %exitcond26, label %exit, label %outer.loop

exit:
  ret void
}

define void @test_2_level_loop_nest_swap_inner_branch(i64 %vf) local_unnamed_addr {
; CHECK-LABEL:  VPlan IR for: test_2_level_loop_nest_swap_inner_branch
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Div] i64 [[VP_LANE:%.*]] = induction-init{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Uni] br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]], [[BB2:BB[0-9]+]]
; CHECK-NEXT:     [DA: Div] i64 [[VP_OUTER_INDUCTION_PHI:%.*]] = phi  [ i64 [[VP_LANE]], [[BB0]] ],  [ i64 [[VP_OUTER_INDUCTION:%.*]], [[BB2]] ]
; CHECK-NEXT:     [DA: Div] i1 [[VP_LOOP_MASK:%.*]] = phi  [ i1 true, [[BB0]] ],  [ i1 [[VP_LOOP_MASK_NEXT:%.*]], [[BB2]] ]
; CHECK-NEXT:     [DA: Uni] br [[BB3:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: [[BB1]]
; CHECK-NEXT:     [DA: Div] i1 [[VP0:%.*]] = block-predicate i1 [[VP_LOOP_MASK]]
; CHECK-NEXT:     [DA: Div] ptr [[VP_GEP:%.*]] = getelementptr inbounds [1024 x [1024 x i64]], ptr @A i64 0 i64 [[VP_OUTER_INDUCTION_PHI]] i64 0
; CHECK-NEXT:     [DA: Div] i1 [[VP_OUTER_LOOP_VARYING:%.*]] = icmp eq ptr [[VP_GEP]] ptr null
; CHECK-NEXT:     [DA: Uni] br [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: [[BB3]]
; CHECK-NEXT:     [DA: Div] i1 [[VP_BB8_BR_VP_OUTER_LOOP_VARYING:%.*]] = select i1 [[VP_LOOP_MASK]] i1 [[VP_OUTER_LOOP_VARYING]] i1 false
; CHECK-NEXT:     [DA: Uni] br [[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]: # preds: [[BB4]]
; CHECK-NEXT:     [DA: Div] i1 [[VP1:%.*]] = block-predicate i1 [[VP_BB8_BR_VP_OUTER_LOOP_VARYING]]
; CHECK-NEXT:     [DA: Uni] br [[BB6:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]]: # preds: [[BB5]], [[BB6]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP_INNER_INDUCTION_PHI:%.*]] = phi  [ i64 0, [[BB5]] ],  [ i64 [[VP_INNER_INDUCTION:%.*]], [[BB6]] ]
; CHECK-NEXT:     [DA: Div] i1 [[VP2:%.*]] = block-predicate i1 [[VP_BB8_BR_VP_OUTER_LOOP_VARYING]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP_INNER_INDUCTION]] = add i64 [[VP_INNER_INDUCTION_PHI]] i64 1
; CHECK-NEXT:     [DA: Uni] i1 [[VP_CONTINUE_COND:%.*]] = icmp ne i64 [[VP_INNER_INDUCTION]] i64 1024
; CHECK-NEXT:     [DA: Uni] i1 [[VP3:%.*]] = all-zero-check i1 [[VP_BB8_BR_VP_OUTER_LOOP_VARYING]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP4:%.*]] = not i1 [[VP3]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP5:%.*]] = and i1 [[VP4]] i1 [[VP_CONTINUE_COND]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP5]], [[BB6]], [[BB7:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB7]]: # preds: [[BB6]]
; CHECK-NEXT:     [DA: Div] i1 [[VP6:%.*]] = block-predicate i1 [[VP_BB8_BR_VP_OUTER_LOOP_VARYING]]
; CHECK-NEXT:     [DA: Uni] br [[BB8:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB8]]: # preds: [[BB7]]
; CHECK-NEXT:     [DA: Div] i1 [[VP7:%.*]] = block-predicate i1 [[VP_LOOP_MASK]]
; CHECK-NEXT:     [DA: Div] i64 [[VP_OUTER_INDUCTION]] = add i64 [[VP_OUTER_INDUCTION_PHI]] i64 [[VF0:%.*]]
; CHECK-NEXT:     [DA: Div] i1 [[VP_EXITCOND26:%.*]] = icmp eq i64 [[VP_OUTER_INDUCTION]] i64 1024
; CHECK-NEXT:     [DA: Uni] br [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB8]]
; CHECK-NEXT:     [DA: Div] i1 [[VP_EXITCOND26_NOT:%.*]] = not i1 [[VP_EXITCOND26]]
; CHECK-NEXT:     [DA: Div] i1 [[VP_LOOP_MASK_NEXT]] = select i1 [[VP_LOOP_MASK]] i1 [[VP_EXITCOND26_NOT]] i1 false
; CHECK-NEXT:     [DA: Uni] i1 [[VP8:%.*]] = all-zero-check i1 [[VP_LOOP_MASK_NEXT]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP8]], [[BB9:BB[0-9]+]], [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB9]]: # preds: [[BB2]]
; CHECK-NEXT:     [DA: Div] ret
; CHECK-NEXT:     [DA: Uni] br <External Block>
;
entry:
;        entry
;          |
; +------>outer.loop
; |        |       |
; |     inner.ph   |
; |        |       |
; |    inner.loop  |
; |        |       |
; |    inner.exit  |
; |        |       |
; +--outer.loop.latch
;          |
;         exit
  %lane = call i64 @llvm.vplan.laneid()
  br label %outer.loop

outer.loop:
  %outer.induction.phi = phi i64 [ %lane, %entry ], [ %outer.induction, %outer.loop.latch ]
  %gep = getelementptr inbounds [1024 x [1024 x i64]], ptr @A, i64 0, i64 %outer.induction.phi, i64 0
  %outer.loop.varying = icmp eq ptr %gep, null
  br i1 %outer.loop.varying, label %inner.ph, label %outer.loop.latch

inner.ph:
  br label %inner.loop

inner.loop:
  %inner.induction.phi = phi i64 [ 0, %inner.ph ], [ %inner.induction, %inner.loop ]
  %inner.induction = add nuw nsw i64 %inner.induction.phi, 1
  %continue.cond = icmp ne i64 %inner.induction, 1024
  br i1 %continue.cond, label %inner.loop, label %inner.exit

inner.exit:
  br label %outer.loop.latch

outer.loop.latch:
  %outer.induction = add nuw nsw i64 %outer.induction.phi, %vf
  %exitcond26 = icmp eq i64 %outer.induction, 1024
  br i1 %exitcond26, label %exit, label %outer.loop

exit:
  ret void
}

declare i64 @llvm.vplan.laneid()
