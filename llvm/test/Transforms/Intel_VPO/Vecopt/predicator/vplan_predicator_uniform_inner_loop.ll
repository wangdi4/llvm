; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; REQUIRES: asserts

; RUN: opt -S -passes="vplan-func-vec" -print-after-vplan-func-vec-predicator < %s -disable-output | FileCheck %s

; Check that we have proper bypasses of the inner loop when it should not be entered.

define void @foo(i32 %n1, i32 %n2, i64 %vf) {
; CHECK-LABEL:  VPlan IR for: foo
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Div] i64 [[VP_LANE:%.*]] = induction-init{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Uni] i1 [[VP_CMP1:%.*]] = icmp sgt i32 [[N10:%.*]] i32 [[N20:%.*]]
; CHECK-NEXT:     [DA: Uni] br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]], [[BB2:BB[0-9]+]]
; CHECK-NEXT:     [DA: Div] i64 [[VP_INDVARS_IV:%.*]] = phi  [ i64 [[VP_INDVARS_IV_NEXT:%.*]], [[BB2]] ],  [ i64 [[VP_LANE]], [[BB0]] ]
; CHECK-NEXT:     [DA: Div] i1 [[VP_LOOP_MASK:%.*]] = phi  [ i1 true, [[BB0]] ],  [ i1 [[VP_LOOP_MASK_NEXT:%.*]], [[BB2]] ]
; CHECK-NEXT:     [DA: Uni] br [[BB3:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: [[BB1]]
; CHECK-NEXT:     [DA: Div] i1 [[VP0:%.*]] = block-predicate i1 [[VP_LOOP_MASK]]
; CHECK-NEXT:     [DA: Uni] br [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: [[BB3]]
; CHECK-NEXT:     [DA: Div] i1 [[VP_BB8_BR_VP_CMP1:%.*]] = and i1 [[VP_LOOP_MASK]] i1 [[VP_CMP1]]
; CHECK-NEXT:     [DA: Uni] br [[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]: # preds: [[BB4]]
; CHECK-NEXT:     [DA: Div] i1 [[VP1:%.*]] = block-predicate i1 [[VP_BB8_BR_VP_CMP1]]
; CHECK-NEXT:     [DA: Uni] br [[BB6:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]]: # preds: [[BB5]], [[BB6]]
; CHECK-NEXT:     [DA: Uni] i32 [[VP_I1_014:%.*]] = phi  [ i32 [[VP_INC:%.*]], [[BB6]] ],  [ i32 0, [[BB5]] ]
; CHECK-NEXT:     [DA: Div] i1 [[VP2:%.*]] = block-predicate i1 [[VP_BB8_BR_VP_CMP1]]
; CHECK-NEXT:     [DA: Uni] i32 [[VP_INC]] = add i32 [[VP_I1_014]] i32 1
; CHECK-NEXT:     [DA: Uni] i1 [[VP_EXITCOND:%.*]] = icmp eq i32 [[VP_INC]] i32 1024
; CHECK-NEXT:     [DA: Uni] i1 [[VP3:%.*]] = all-zero-check i1 [[VP_BB8_BR_VP_CMP1]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP4:%.*]] = or i1 [[VP3]] i1 [[VP_EXITCOND]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP4]], [[BB7:BB[0-9]+]], [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB7]]: # preds: [[BB6]]
; CHECK-NEXT:     [DA: Div] i1 [[VP5:%.*]] = block-predicate i1 [[VP_BB8_BR_VP_CMP1]]
; CHECK-NEXT:     [DA: Uni] br [[BB8:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB8]]: # preds: [[BB7]]
; CHECK-NEXT:     [DA: Div] i1 [[VP6:%.*]] = block-predicate i1 [[VP_LOOP_MASK]]
; CHECK-NEXT:     [DA: Div] i64 [[VP_INDVARS_IV_NEXT]] = add i64 [[VP_INDVARS_IV]] i64 [[VF0:%.*]]
; CHECK-NEXT:     [DA: Div] i1 [[VP_EXITCOND15:%.*]] = icmp eq i64 [[VP_INDVARS_IV_NEXT]] i64 1024
; CHECK-NEXT:     [DA: Uni] br [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB8]]
; CHECK-NEXT:     [DA: Div] i1 [[VP_EXITCOND15_NOT:%.*]] = not i1 [[VP_EXITCOND15]]
; CHECK-NEXT:     [DA: Div] i1 [[VP_LOOP_MASK_NEXT]] = and i1 [[VP_EXITCOND15_NOT]] i1 [[VP_LOOP_MASK]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP7:%.*]] = all-zero-check i1 [[VP_LOOP_MASK_NEXT]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP7]], [[BB9:BB[0-9]+]], [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB9]]: # preds: [[BB2]]
; CHECK-NEXT:     [DA: Div] ret
; CHECK-NEXT:     [DA: Uni] br <External Block>
;
entry:
  %lane = call i64 @llvm.vplan.laneid()
  %cmp1 = icmp sgt i32 %n1, %n2
  br label %outer.for

outer.for:
  %indvars.iv = phi i64 [ %indvars.iv.next, %outer.for.inc ], [ %lane, %entry ]
  br i1 %cmp1, label %for.body.preheader, label %outer.for.inc

for.body.preheader:
  br label %for.body

for.body:
  %i1.014 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  %inc = add nuw nsw i32 %i1.014, 1
  %exitcond = icmp eq i32 %inc, 1024
  br i1 %exitcond, label %outer.for.inc.loopexit, label %for.body

outer.for.inc.loopexit:
  br label %outer.for.inc

outer.for.inc:
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, %vf
  %exitcond15 = icmp eq i64 %indvars.iv.next, 1024
  br i1 %exitcond15, label %outer.exit, label %outer.for

outer.exit:
  ret void
}

declare i64 @llvm.vplan.laneid()
