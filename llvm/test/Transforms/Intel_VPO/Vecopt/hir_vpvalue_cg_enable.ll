; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; LIT test to check enabling of VPValue based code-generation by default. We
; check this by ensuring that operations are unmasked in vector code generation
; when we do not explicitly throw the flag to enable VPValue based code
; generation (check prefix to be used is VPVAL for this case).
;
; RUN: opt -hir-ssa-deconstruction -hir-vec-dir-insert -hir-vplan-vec -vplan-force-vf=4 -print-after=hir-vplan-vec -disable-output < %s 2>&1  | FileCheck %s --check-prefixes=VPVAL,PM1
; RUN: opt -passes="hir-ssa-deconstruction,hir-vec-dir-insert,hir-vplan-vec" -vplan-force-vf=4 -print-after=hir-vplan-vec -disable-output < %s 2>&1 | FileCheck %s --check-prefixes=VPVAL,PM2

; RUN: opt -hir-ssa-deconstruction -hir-vec-dir-insert -hir-vplan-vec -vplan-force-vf=4 -print-after=hir-vplan-vec -disable-output < %s 2>&1  | FileCheck %s --check-prefixes=VPVAL,PM1
; RUN: opt -passes="hir-ssa-deconstruction,hir-vec-dir-insert,hir-vplan-vec" -vplan-force-vf=4 -print-after=hir-vplan-vec -disable-output < %s 2>&1 | FileCheck %s --check-prefixes=VPVAL,PM2


define void @foo(i64* noalias nocapture readonly %larr, float* noalias nocapture %farr) {
;PM1:         IR Dump After VPlan HIR Vectorizer
;PM2:         IR Dump After{{.+}}VPlan{{.*}}Driver{{.*}}HIR{{.*}}
; VPVAL:               + DO i1 = 0, 99, 4   <DO_LOOP> <auto-vectorized> <novectorize>
; VPVAL-NEXT:          |   %.vec2 = undef;
; VPVAL-NEXT:          |   %.vec = (<4 x i64>*)(%larr)[i1];
; VPVAL-NEXT:          |   %.vec1 = %.vec > 111;
; VPVAL-NEXT:          |   %.vec2 = (<4 x float>*)(%farr)[i1], Mask = @{%.vec1};
; VPVAL-NEXT:          |   %.vec3 =  - %.vec2;
; VPVAL-NEXT:          |   (<4 x float>*)(%farr)[i1] = %.vec3, Mask = @{%.vec1};
; VPVAL-NEXT:          + END LOOP
;
entry:
  br label %for.body

for.body:                                         ; preds = %for.inc, %entry
  %l1.011 = phi i64 [ 0, %entry ], [ %inc, %for.inc ]
  %arrayidx = getelementptr inbounds i64, i64* %larr, i64 %l1.011
  %0 = load i64, i64* %arrayidx, align 8
  %cmp1 = icmp sgt i64 %0, 111
  br i1 %cmp1, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body
  %arrayidx2 = getelementptr inbounds float, float* %farr, i64 %l1.011
  %1 = load float, float* %arrayidx2, align 4
  %fneg = fneg float %1
  store float %fneg, float* %arrayidx2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then
  %inc = add nuw nsw i64 %l1.011, 1
  %exitcond = icmp eq i64 %inc, 100
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc
  ret void
}
