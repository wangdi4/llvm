; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; Checks that we do not recognize Histogram.

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; REQUIRES: asserts
; RUN: opt -S -mattr=+avx512vl,+avx512cd -passes='hir-ssa-deconstruction,hir-temp-cleanup,hir-vec-dir-insert,hir-vplan-vec' -debug-only=VPlanHCFGBuilder -vplan-print-after-hir-decomposer -disable-vplan-codegen -disable-output < %s 2>&1 | FileCheck %s

; Function Attrs: nofree norecurse nosync nounwind uwtable mustprogress
define dso_local void @foo1(ptr noalias nocapture %A, ptr noalias nocapture readonly %B, ptr noalias nocapture %C, i32 %N) local_unnamed_addr #0 {
;
; CHECK-LABEL:  Visiting HLLoop: 18
; CHECK-NEXT:  VConflict load's use-chain escapes the region.
; CHECK-NEXT:  The current VConflict idiom is not supported.
;
entry:
;  for (int i=0; i<N; i++){
;    index = B[i];
;    A[index] = A[index] + 10;
;    C[i] = A[index] + 11;
;  }
  %cmp19 = icmp sgt i32 %N, 0
  br i1 %cmp19, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count21 = zext i32 %N to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds i32, ptr %B, i64 %indvars.iv
  %0 = load i32, ptr %arrayidx, align 4
  %idxprom1 = sext i32 %0 to i64
  %arrayidx2 = getelementptr inbounds i32, ptr %A, i64 %idxprom1
  %1 = load i32, ptr %arrayidx2, align 4
  %add = add nsw i32 %1, 10
  store i32 %add, ptr %arrayidx2, align 4
  %add7 = add nsw i32 %1, 21
  %arrayidx9 = getelementptr inbounds i32, ptr %C, i64 %indvars.iv
  store i32 %add7, ptr %arrayidx9, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count21
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}

; Function Attrs: nofree norecurse nosync nounwind uwtable mustprogress
define dso_local void @foo2(ptr noalias nocapture %A, ptr noalias nocapture readonly %B, ptr noalias nocapture %C, i32 %N) local_unnamed_addr #0 {
;
; CHECK-LABEL:  Visiting HLLoop: 17
; CHECK-NEXT:  VConflict load's use-chain escapes the region.
; CHECK-NEXT:  The current VConflict idiom is not supported.
;
entry:
;  for (int i=0; i<N; i++){
;    index = B[i];
;    A[index] = A[index] + 10;
;    C[i] = A[index];
;  }
  %cmp18 = icmp sgt i32 %N, 0
  br i1 %cmp18, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count20 = zext i32 %N to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds i32, ptr %B, i64 %indvars.iv
  %0 = load i32, ptr %arrayidx, align 4
  %idxprom1 = sext i32 %0 to i64
  %arrayidx2 = getelementptr inbounds i32, ptr %A, i64 %idxprom1
  %1 = load i32, ptr %arrayidx2, align 4
  %add = add nsw i32 %1, 10
  store i32 %add, ptr %arrayidx2, align 4
  %arrayidx8 = getelementptr inbounds i32, ptr %C, i64 %indvars.iv
  store i32 %add, ptr %arrayidx8, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count20
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}

define dso_local void @foo3(ptr noalias nocapture %A, ptr noalias nocapture readonly %B, ptr noalias nocapture readonly %C, ptr noalias nocapture %D, i32 %TC1) local_unnamed_addr #0 {
;
; CHECK-LABEL:  Visiting HLLoop: 17
; CHECK-NEXT:  VConflict region should not have instructions with side effects.
; CHECK-NEXT:  The current VConflict idiom is not supported.
;
entry:
;  for (int i=0; i<TC1; i++){
;    int index = B[i];
;    D[i] = C[0] + A[index];
;    A[index] = A[index] + C[0];
; }
  %cmp23 = icmp sgt i32 %TC1, 0
  br i1 %cmp23, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %entry
  %0 = load i32, ptr %C, align 4
  %wide.trip.count25 = zext i32 %TC1 to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds i32, ptr %B, i64 %indvars.iv
  %1 = load i32, ptr %arrayidx, align 4
  %idxprom2 = sext i32 %1 to i64
  %arrayidx3 = getelementptr inbounds i32, ptr %A, i64 %idxprom2
  %2 = load i32, ptr %arrayidx3, align 4
  %add = add nsw i32 %2, %0
  %arrayidx5 = getelementptr inbounds i32, ptr %D, i64 %indvars.iv
  store i32 %add, ptr %arrayidx5, align 4
  store i32 %add, ptr %arrayidx3, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count25
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}

define dso_local void @foo4(ptr noalias nocapture %A, ptr noalias nocapture readonly %B, ptr noalias nocapture readonly %C, ptr noalias nocapture readonly %D, i32 %TC1) local_unnamed_addr #0 {
;
; CHECK-LABEL:  Visiting HLLoop: 30
; CHECK-NEXT:  Creating VPBasicBlock for 18
; CHECK-NEXT:  Creating VPBasicBlock for 23
; CHECK-NEXT:  VConflict load and store are in different basic blocks.
; CHECK-NEXT:  The current VConflict idiom is not supported.
;
entry:
;  for (int i=0; i<TC1; i++){
;    int index = B[i];
;    int ld = A[index];
;    if (ld%2==0)
;      ld = ld + C[0];
;    else
;      ld = ld - D[0];
;    A[index] = ld;
;  }
  %cmp19 = icmp sgt i32 %TC1, 0
  br i1 %cmp19, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count21 = zext i32 %TC1 to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %if.end
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void

for.body:                                         ; preds = %for.body.preheader, %if.end
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %if.end ]
  %arrayidx = getelementptr inbounds i32, ptr %B, i64 %indvars.iv
  %0 = load i32, ptr %arrayidx, align 4
  %idxprom1 = sext i32 %0 to i64
  %arrayidx2 = getelementptr inbounds i32, ptr %A, i64 %idxprom1
  %1 = load i32, ptr %arrayidx2, align 4
  %2 = and i32 %1, 1
  %cmp3 = icmp eq i32 %2, 0
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %3 = load i32, ptr %C, align 4
  %add = add nsw i32 %3, %1
  br label %if.end

if.else:                                          ; preds = %for.body
  %4 = load i32, ptr %D, align 4
  %sub = sub nsw i32 %1, %4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %ld.0 = phi i32 [ %add, %if.then ], [ %sub, %if.else ]
  store i32 %ld.0, ptr %arrayidx2, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count21
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}

define dso_local void @foo5(ptr noalias nocapture %A, ptr noalias nocapture readonly %B, ptr noalias nocapture readonly %C, ptr noalias nocapture readonly %D, i32 %TC1) local_unnamed_addr #0 {
;
; CHECK-LABEL:  Visiting HLLoop: 22
; CHECK-NEXT:  VConflict region should not have instructions with side effects.
; CHECK-NEXT:  The current VConflict idiom is not supported.
;
entry:
;  for (int i=0; i<TC1; i++){
;    int index = B[i];
;    D[i] = A[index] + C[i] + D[i];
;    A[index] = A[index] + C[i] + D[i];
; }
  %cmp26 = icmp sgt i32 %TC1, 0
  br i1 %cmp26, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count28 = zext i32 %TC1 to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds i32, ptr %B, i64 %indvars.iv
  %0 = load i32, ptr %arrayidx, align 4
  %idxprom1 = sext i32 %0 to i64
  %arrayidx2 = getelementptr inbounds i32, ptr %A, i64 %idxprom1
  %1 = load i32, ptr %arrayidx2, align 4
  %arrayidx4 = getelementptr inbounds i32, ptr %C, i64 %indvars.iv
  %2 = load i32, ptr %arrayidx4, align 4
  %add = add nsw i32 %2, %1
  %arrayidx10 = getelementptr inbounds i32, ptr %D, i64 %indvars.iv
  %3 = load i32, ptr %arrayidx10, align 4
  %add2 = add nsw i32 %3, %add
  store i32 %add2, ptr %arrayidx10, align 4
  %add11 = add nsw i32 %2, %add2
  store i32 %add11, ptr %arrayidx2, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count28
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}

define dso_local void @foo6(ptr noalias nocapture %A, ptr noalias nocapture readonly %B, ptr noalias nocapture readonly %C, ptr noalias nocapture readonly %D, i32 %TC1) local_unnamed_addr #0 {
;
; CHECK-LABEL:  Visiting HLLoop: 21
; CHECK-NEXT:  VConflict region should not have instructions with side effects.
; CHECK-NEXT:  The current VConflict idiom is not supported.
;
entry:
;  for (int i=0; i<TC1; i++){
;    int index = B[i];
;    D[i] = A[index];
;    A[index] = A[index] + C[i] + D[i];
; }
  %cmp26 = icmp sgt i32 %TC1, 0
  br i1 %cmp26, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count28 = zext i32 %TC1 to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds i32, ptr %B, i64 %indvars.iv
  %0 = load i32, ptr %arrayidx, align 4
  %idxprom1 = sext i32 %0 to i64
  %arrayidx2 = getelementptr inbounds i32, ptr %A, i64 %idxprom1
  %1 = load i32, ptr %arrayidx2, align 4
  %arrayidx4 = getelementptr inbounds i32, ptr %C, i64 %indvars.iv
  %2 = load i32, ptr %arrayidx4, align 4
  %add = add nsw i32 %2, %1
  %arrayidx10 = getelementptr inbounds i32, ptr %D, i64 %indvars.iv
  %3 = load i32, ptr %arrayidx10, align 4
  store i32 %1, ptr %arrayidx10, align 4
  %add11 = add nsw i32 %2, %add
  store i32 %add11, ptr %arrayidx2, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count28
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}

attributes #0 = { nofree norecurse nounwind uwtable mustprogress "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "pre_loopopt" "stack-protector-buffer-size"="8" "target-cpu"="core-avx2" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+rdrnd,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt" "unsafe-fp-math"="true" "use-soft-float"="false" }
