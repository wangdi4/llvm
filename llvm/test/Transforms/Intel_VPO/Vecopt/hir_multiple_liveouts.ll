; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -hir-ssa-deconstruction -hir-temp-cleanup -hir-vec-dir-insert -VPlanDriverHIR -disable-output -vplan-print-after-initial-transforms < %s 2>&1 | FileCheck %s

; The test crashed during the loop entities importing. Check that CFG is built and entities are in place.
;
define dso_local i32 @main(i32* %x4, [100 x i32]* %u0, i64 %n) local_unnamed_addr #0 {
; CHECK-LABEL:  VPlan after initial VPlan transforms:
; CHECK-NEXT:  External Defs Start:
; CHECK-DAG:     [[VP0:%.*]] = {%x4.sroa.0.140}
; CHECK-DAG:     [[VP1:%.*]] = {%u0}
; CHECK-DAG:     [[VP2:%.*]] = {%n + -2}
; CHECK-NEXT:  External Defs End:
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     i32 [[VP__RED_INIT:%.*]] = reduction-init i32 0 i32 live-in1
; CHECK-NEXT:     i64 [[VP__IND_INIT:%.*]] = induction-init{add} i64 live-in2 i64 1
; CHECK-NEXT:     i64 [[VP__IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:     br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], [[BB3:BB[0-9]+]]
; CHECK-NEXT:     i32 [[VP3:%.*]] = phi  [ i32 [[VP__RED_INIT]], [[BB1]] ],  [ i32 [[VP4:%.*]], [[BB3]] ]
; CHECK-NEXT:     i64 [[VP5:%.*]] = phi  [ i64 [[VP__IND_INIT]], [[BB1]] ],  [ i64 [[VP6:%.*]], [[BB3]] ]
; CHECK-NEXT:     i32 [[VP7:%.*]] = trunc i64 [[VP5]] to i32
; CHECK-NEXT:     i32 [[VP8:%.*]] = add i32 [[VP7]] i32 1
; CHECK-NEXT:     i32 [[VP9:%.*]] = hir-copy i32 [[VP8]] , OriginPhiId: -1
; CHECK-NEXT:     i32 [[VP10:%.*]] = trunc i64 [[VP5]] to i32
; CHECK-NEXT:     i32 [[VP11:%.*]] = add i32 [[VP10]] i32 1
; CHECK-NEXT:     i1 [[VP12:%.*]] = icmp ult i32 [[VP11]] i32 2
; CHECK-NEXT:     br i1 [[VP12]], [[BB4:BB[0-9]+]], [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB4]]: # preds: [[BB2]]
; CHECK-NEXT:       i64 [[VP13:%.*]] = add i64 [[VP5]] i64 1
; CHECK-NEXT:       i32* [[VP_SUBSCRIPT:%.*]] = subscript inbounds [100 x i32]* [[U00:%.*]] i64 0 i64 [[VP13]]
; CHECK-NEXT:       i32 [[VP_LOAD:%.*]] = load i32* [[VP_SUBSCRIPT]]
; CHECK-NEXT:       i32 [[VP14:%.*]] = sub i32 [[VP3]] i32 [[VP_LOAD]]
; CHECK-NEXT:       i64 [[VP15:%.*]] = add i64 [[VP5]] i64 2
; CHECK-NEXT:       i32 [[VP16:%.*]] = trunc i64 [[VP15]] to i32
; CHECK-NEXT:       i32 [[VP17:%.*]] = hir-copy i32 [[VP16]] , OriginPhiId: -1
; CHECK-NEXT:       br [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: [[BB4]], [[BB2]]
; CHECK-NEXT:     i32 [[VP18:%.*]] = phi  [ i32 [[VP17]], [[BB4]] ],  [ i32 [[VP9]], [[BB2]] ]
; CHECK-NEXT:     i32 [[VP4]] = phi  [ i32 [[VP14]], [[BB4]] ],  [ i32 [[VP3]], [[BB2]] ]
; CHECK-NEXT:     i64 [[VP6]] = add i64 [[VP5]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     i1 [[VP19:%.*]] = icmp sle i64 [[VP6]] i64 [[VP2]]
; CHECK-NEXT:     br i1 [[VP19]], [[BB2]], [[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]: # preds: [[BB3]]
; CHECK-NEXT:     i32 [[VP__RED_FINAL:%.*]] = reduction-final{u_add} i32 [[VP4]]
; CHECK-NEXT:     i64 [[VP__IND_FINAL:%.*]] = induction-final{add} i64 live-in2 i64 1
; CHECK-NEXT:     br [[BB6:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]]: # preds: [[BB5]]
; CHECK-NEXT:     br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   i32 [[VP18]] -> [[VP20:%.*]] = {%inc.lcssa45}
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 1   i32 [[VP__RED_FINAL]] -> [[VP21:%.*]] = {%x4.sroa.0.140}
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 2   no underlying for i64 [[VP__IND_FINAL]]
;
preheader:
  %x4.sroa.0.044 = load i32, i32* %x4
  br label %header

header:
  %indvars.iv = phi i64 [ 1, %preheader ], [ %indvars.iv.next48, %if.merge ]
  %x4.sroa.0.140 = phi i32 [ %x4.sroa.0.044, %preheader ], [ %x4.sroa.0.2.lcssa, %if.merge ]
  %storemerge3238 = phi i32 [ 1, %preheader ], [ %inc12, %if.merge ]
  %cmp734 = icmp ult i32 %storemerge3238, 2
  %indvars.iv.next48 = add nuw i64 %indvars.iv, 1
  br i1 %cmp734, label %if.then, label %if.merge

if.then:
  %arrayidx9 = getelementptr inbounds [100 x i32], [100 x i32]* %u0, i64 0, i64 %indvars.iv
  %0 = load i32, i32* %arrayidx9, align 4
  %sub10 = sub i32 %x4.sroa.0.140, %0
  %1 = trunc i64 %indvars.iv.next48 to i32
  br label %if.merge

if.merge:
  %inc.lcssa45 = phi i32 [ %1, %if.then ], [ %storemerge3238, %header ]
  %x4.sroa.0.2.lcssa = phi i32 [ %sub10, %if.then ], [ %x4.sroa.0.140, %header ]
  %inc12 = add nuw nsw i32 %storemerge3238, 1
  %exitcond = icmp eq i64 %indvars.iv.next48, %n
  br i1 %exitcond, label %exit, label %header

exit:
  %inc.lcssa45.lcssa = phi i32 [ %inc.lcssa45, %if.merge ]
  %x4.sroa.0.2.lcssa.lcssa = phi i32 [ %x4.sroa.0.2.lcssa, %if.merge ]
  %ret = add i32 %inc.lcssa45.lcssa, %x4.sroa.0.2.lcssa
  ret i32 %ret
}
