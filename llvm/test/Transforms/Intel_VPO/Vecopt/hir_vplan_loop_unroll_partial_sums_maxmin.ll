; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py UTC_ARGS: --version 3
; RUN: opt -S < %s -passes=hir-ssa-deconstruction,hir-temp-cleanup,hir-vec-dir-insert,hir-vplan-vec \
; RUN: -disable-output -vplan-print-after-unroll -vplan-force-vf=8 -vplan-force-uf=2 -vplan-enable-partial-sums=true | FileCheck %s

; Basic check for partial sums; the unrolled loop should use distinct accumulators in each
; unrolled iteration, reduced after the exit to the result.
; This file checks support for max/min reductions.

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; float fmax(float *lp, float init) {
;   long l1;
;   float a = init;
;   for (l1 = 0; l1 < 1024; l1++)
;     a = (lp[l1] > a) ? lp[l1] : a;
;   return a;
; }
define float @fmax(ptr %lp, float %init) {
; CHECK-LABEL:  VPlan after VPlan loop unrolling:
; CHECK-NEXT:  VPlan IR for: Initial VPlan for VF=8
; CHECK-NEXT:  External Defs Start:
; CHECK-DAG:     [[VP0:%.*]] = {%a.010}
; CHECK-DAG:     [[VP1:%.*]] = {%lp}
; CHECK-NEXT:  External Defs End:
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i64 1024, UF = 2
; CHECK-NEXT:     [DA: Div] float [[VP2:%.*]] = reduction-init float live-in0
; CHECK-NEXT:     [DA: Div] float [[VP_MINMAX_RED_INIT:%.*]] = reduction-init float live-in0
; CHECK-NEXT:     [DA: Div] i64 [[VP__IND_INIT:%.*]] = induction-init{add} i64 live-in1 i64 1
; CHECK-NEXT:     [DA: Uni] i64 [[VP__IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:     [DA: Uni] br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], cloned.[[BB3:BB[0-9]+]]
; CHECK-NEXT:     [DA: Div] float [[VP3:%.*]] = phi  [ float [[VP2]], [[BB1]] ],  [ float [[VP4:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] float [[VP5:%.*]] = phi  [ float [[VP_MINMAX_RED_INIT]], [[BB1]] ],  [ float [[VP6:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] i64 [[VP7:%.*]] = phi  [ i64 [[VP__IND_INIT]], [[BB1]] ],  [ i64 [[VP8:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] ptr [[VP_SUBSCRIPT:%.*]] = subscript inbounds ptr [[LP0:%.*]] i64 [[VP7]]
; CHECK-NEXT:     [DA: Div] float [[VP_LOAD:%.*]] = load ptr [[VP_SUBSCRIPT]]
; CHECK-NEXT:     [DA: Div] float [[VP6]] = call float [[VP_LOAD]] float [[VP5]] ptr @llvm.maxnum.f32
; CHECK-NEXT:     [DA: Div] i64 [[VP9:%.*]] = add i64 [[VP7]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP10:%.*]] = icmp slt i64 [[VP9]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br cloned.[[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB3]]: # preds: [[BB2]]
; CHECK-NEXT:     [DA: Div] ptr [[VP11:%.*]] = subscript inbounds ptr [[LP0]] i64 [[VP9]]
; CHECK-NEXT:     [DA: Div] float [[VP12:%.*]] = load ptr [[VP11]]
; CHECK-NEXT:     [DA: Div] float [[VP4]] = call float [[VP12]] float [[VP3]] ptr @llvm.maxnum.f32
; CHECK-NEXT:     [DA: Div] i64 [[VP8]] = add i64 [[VP9]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP13:%.*]] = icmp slt i64 [[VP8]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP13]], [[BB2]], [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: cloned.[[BB3]]
; CHECK-NEXT:     [DA: Div] float [[VP_LLVM_MAXNUM_F32:%.*]] = call float [[VP6]] float [[VP4]] ptr @llvm.maxnum.f32
; CHECK-NEXT:     [DA: Uni] float [[VP_MINMAX_RED_FINAL:%.*]] = reduction-final{fmax} float [[VP_LLVM_MAXNUM_F32]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP__IND_FINAL:%.*]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Uni] br [[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]: # preds: [[BB4]]
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   float [[VP_MINMAX_RED_FINAL]] -> [[VP14:%.*]] = {%a.010}
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 1   no underlying for i64 [[VP__IND_FINAL]]
;
entry:
  br label %for.body

for.body:
  %a.010 = phi float [ %init, %entry ], [ %1, %for.body ]
  %l1.06 = phi i64 [ 0, %entry ], [ %inc, %for.body ]
  %arrayidx = getelementptr inbounds float, ptr %lp, i64 %l1.06
  %0 = load float, ptr %arrayidx, align 4
  %1 = tail call fast float @llvm.maxnum.f32(float %0, float %a.010)
  %inc = add nuw nsw i64 %l1.06, 1
  %exitcond.not = icmp eq i64 %inc, 1024
  br i1 %exitcond.not, label %for.end, label %for.body

for.end:
  %a.lcssa = phi float [ %1, %for.body ]
  ret float %a.lcssa
}

; float fmin(float *lp, float init) {
;   long l1;
;   float a = init;
;   for (l1 = 0; l1 < 1024; l1++)
;     a = (lp[l1] < a) ? lp[l1] : a;
;   return a;
; }
define float @fmin(ptr %lp, float %init) {
; CHECK-LABEL:  VPlan after VPlan loop unrolling:
; CHECK-NEXT:  VPlan IR for: Initial VPlan for VF=8
; CHECK-NEXT:  External Defs Start:
; CHECK-DAG:     [[VP0:%.*]] = {%a.010}
; CHECK-DAG:     [[VP1:%.*]] = {%lp}
; CHECK-NEXT:  External Defs End:
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i64 1024, UF = 2
; CHECK-NEXT:     [DA: Div] float [[VP2:%.*]] = reduction-init float live-in0
; CHECK-NEXT:     [DA: Div] float [[VP_MINMAX_RED_INIT:%.*]] = reduction-init float live-in0
; CHECK-NEXT:     [DA: Div] i64 [[VP__IND_INIT:%.*]] = induction-init{add} i64 live-in1 i64 1
; CHECK-NEXT:     [DA: Uni] i64 [[VP__IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:     [DA: Uni] br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], cloned.[[BB3:BB[0-9]+]]
; CHECK-NEXT:     [DA: Div] float [[VP3:%.*]] = phi  [ float [[VP2]], [[BB1]] ],  [ float [[VP4:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] float [[VP5:%.*]] = phi  [ float [[VP_MINMAX_RED_INIT]], [[BB1]] ],  [ float [[VP6:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] i64 [[VP7:%.*]] = phi  [ i64 [[VP__IND_INIT]], [[BB1]] ],  [ i64 [[VP8:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] ptr [[VP_SUBSCRIPT:%.*]] = subscript inbounds ptr [[LP0:%.*]] i64 [[VP7]]
; CHECK-NEXT:     [DA: Div] float [[VP_LOAD:%.*]] = load ptr [[VP_SUBSCRIPT]]
; CHECK-NEXT:     [DA: Div] float [[VP6]] = call float [[VP_LOAD]] float [[VP5]] ptr @llvm.minnum.f32
; CHECK-NEXT:     [DA: Div] i64 [[VP9:%.*]] = add i64 [[VP7]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP10:%.*]] = icmp slt i64 [[VP9]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br cloned.[[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB3]]: # preds: [[BB2]]
; CHECK-NEXT:     [DA: Div] ptr [[VP11:%.*]] = subscript inbounds ptr [[LP0]] i64 [[VP9]]
; CHECK-NEXT:     [DA: Div] float [[VP12:%.*]] = load ptr [[VP11]]
; CHECK-NEXT:     [DA: Div] float [[VP4]] = call float [[VP12]] float [[VP3]] ptr @llvm.minnum.f32
; CHECK-NEXT:     [DA: Div] i64 [[VP8]] = add i64 [[VP9]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP13:%.*]] = icmp slt i64 [[VP8]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP13]], [[BB2]], [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: cloned.[[BB3]]
; CHECK-NEXT:     [DA: Div] float [[VP_LLVM_MINNUM_F32:%.*]] = call float [[VP6]] float [[VP4]] ptr @llvm.minnum.f32
; CHECK-NEXT:     [DA: Uni] float [[VP_MINMAX_RED_FINAL:%.*]] = reduction-final{fmin} float [[VP_LLVM_MINNUM_F32]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP__IND_FINAL:%.*]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Uni] br [[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]: # preds: [[BB4]]
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   float [[VP_MINMAX_RED_FINAL]] -> [[VP14:%.*]] = {%a.010}
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 1   no underlying for i64 [[VP__IND_FINAL]]
;
entry:
  br label %for.body

for.body:
  %a.010 = phi float [ %init, %entry ], [ %1, %for.body ]
  %l1.06 = phi i64 [ 0, %entry ], [ %inc, %for.body ]
  %arrayidx = getelementptr inbounds float, ptr %lp, i64 %l1.06
  %0 = load float, ptr %arrayidx, align 4
  %1 = tail call fast float @llvm.minnum.f32(float %0, float %a.010)
  %inc = add nuw nsw i64 %l1.06, 1
  %exitcond.not = icmp eq i64 %inc, 1024
  br i1 %exitcond.not, label %for.end, label %for.body

for.end:
  %a.lcssa = phi float [ %1, %for.body ]
  ret float %a.lcssa
}

; int smax(const int *lp, int init) {
;   long l1;
;   int a = init;
;   for (l1 = 0; l1 < 1024; l1++)
;     a = (lp[l1] > a) ? lp[l1] : a;
;   return a;
; }
define i32 @smax(ptr readonly %lp, i32 %init) {
; CHECK-LABEL:  VPlan after VPlan loop unrolling:
; CHECK-NEXT:  VPlan IR for: Initial VPlan for VF=8
; CHECK-NEXT:  External Defs Start:
; CHECK-DAG:     [[VP0:%.*]] = {%a.010}
; CHECK-DAG:     [[VP1:%.*]] = {%lp}
; CHECK-NEXT:  External Defs End:
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i64 1024, UF = 2
; CHECK-NEXT:     [DA: Div] i32 [[VP2:%.*]] = reduction-init i32 live-in0
; CHECK-NEXT:     [DA: Div] i32 [[VP_MINMAX_RED_INIT:%.*]] = reduction-init i32 live-in0
; CHECK-NEXT:     [DA: Div] i64 [[VP__IND_INIT:%.*]] = induction-init{add} i64 live-in1 i64 1
; CHECK-NEXT:     [DA: Uni] i64 [[VP__IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:     [DA: Uni] br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], cloned.[[BB3:BB[0-9]+]]
; CHECK-NEXT:     [DA: Div] i32 [[VP3:%.*]] = phi  [ i32 [[VP2]], [[BB1]] ],  [ i32 [[VP4:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] i32 [[VP5:%.*]] = phi  [ i32 [[VP_MINMAX_RED_INIT]], [[BB1]] ],  [ i32 [[VP6:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] i64 [[VP7:%.*]] = phi  [ i64 [[VP__IND_INIT]], [[BB1]] ],  [ i64 [[VP8:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] ptr [[VP_SUBSCRIPT:%.*]] = subscript inbounds ptr [[LP0:%.*]] i64 [[VP7]]
; CHECK-NEXT:     [DA: Div] i32 [[VP_LOAD:%.*]] = load ptr [[VP_SUBSCRIPT]]
; CHECK-NEXT:     [DA: Div] i1 [[VP9:%.*]] = icmp sgt i32 [[VP_LOAD]] i32 [[VP5]]
; CHECK-NEXT:     [DA: Div] i32 [[VP6]] = select i1 [[VP9]] i32 [[VP_LOAD]] i32 [[VP5]]
; CHECK-NEXT:     [DA: Div] i64 [[VP10:%.*]] = add i64 [[VP7]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP11:%.*]] = icmp slt i64 [[VP10]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br cloned.[[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB3]]: # preds: [[BB2]]
; CHECK-NEXT:     [DA: Div] ptr [[VP12:%.*]] = subscript inbounds ptr [[LP0]] i64 [[VP10]]
; CHECK-NEXT:     [DA: Div] i32 [[VP13:%.*]] = load ptr [[VP12]]
; CHECK-NEXT:     [DA: Div] i1 [[VP14:%.*]] = icmp sgt i32 [[VP13]] i32 [[VP3]]
; CHECK-NEXT:     [DA: Div] i32 [[VP4]] = select i1 [[VP14]] i32 [[VP13]] i32 [[VP3]]
; CHECK-NEXT:     [DA: Div] i64 [[VP8]] = add i64 [[VP10]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP15:%.*]] = icmp slt i64 [[VP8]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP15]], [[BB2]], [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: cloned.[[BB3]]
; CHECK-NEXT:     [DA: Div] i32 [[VP_LLVM_SMAX_I32:%.*]] = call i32 [[VP6]] i32 [[VP4]] ptr @llvm.smax.i32
; CHECK-NEXT:     [DA: Uni] i32 [[VP_MINMAX_RED_FINAL:%.*]] = reduction-final{u_smax} i32 [[VP_LLVM_SMAX_I32]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP__IND_FINAL:%.*]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Uni] br [[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]: # preds: [[BB4]]
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   i32 [[VP_MINMAX_RED_FINAL]] -> [[VP16:%.*]] = {%a.010}
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 1   no underlying for i64 [[VP__IND_FINAL]]
;
entry:
  br label %for.body

for.body:
  %a.010 = phi i32 [ %init, %entry ], [ %spec.select, %for.body ]
  %l1.09 = phi i64 [ 0, %entry ], [ %inc, %for.body ]
  %arrayidx = getelementptr inbounds i32, ptr %lp, i64 %l1.09
  %0 = load i32, ptr %arrayidx, align 4
  %cmp1 = icmp sgt i32 %0, %a.010
  %spec.select = select i1 %cmp1, i32 %0, i32 %a.010
  %inc = add nuw nsw i64 %l1.09, 1
  %exitcond.not = icmp eq i64 %inc, 1024
  br i1 %exitcond.not, label %for.end, label %for.body

for.end:
  %spec.select.lcssa = phi i32 [ %spec.select, %for.body ]
  ret i32 %spec.select.lcssa
}

; unsigned int umin(const unsigned int *lp, unsigned int init) {
;   long l1;
;   unsigned int a = init;
;   for (l1 = 0; l1 < 1024; l1++)
;     a = (lp[l1] > a) ? lp[l1] : a;
;   return a;
; }
define i32 @umin(ptr readonly %lp, i32 %init) {
; CHECK-LABEL:  VPlan after VPlan loop unrolling:
; CHECK-NEXT:  VPlan IR for: Initial VPlan for VF=8
; CHECK-NEXT:  External Defs Start:
; CHECK-DAG:     [[VP0:%.*]] = {%a.010}
; CHECK-DAG:     [[VP1:%.*]] = {%lp}
; CHECK-NEXT:  External Defs End:
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i64 1024, UF = 2
; CHECK-NEXT:     [DA: Div] i32 [[VP2:%.*]] = reduction-init i32 live-in0
; CHECK-NEXT:     [DA: Div] i32 [[VP_MINMAX_RED_INIT:%.*]] = reduction-init i32 live-in0
; CHECK-NEXT:     [DA: Div] i64 [[VP__IND_INIT:%.*]] = induction-init{add} i64 live-in1 i64 1
; CHECK-NEXT:     [DA: Uni] i64 [[VP__IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:     [DA: Uni] br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], cloned.[[BB3:BB[0-9]+]]
; CHECK-NEXT:     [DA: Div] i32 [[VP3:%.*]] = phi  [ i32 [[VP2]], [[BB1]] ],  [ i32 [[VP4:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] i32 [[VP5:%.*]] = phi  [ i32 [[VP_MINMAX_RED_INIT]], [[BB1]] ],  [ i32 [[VP6:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] i64 [[VP7:%.*]] = phi  [ i64 [[VP__IND_INIT]], [[BB1]] ],  [ i64 [[VP8:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] ptr [[VP_SUBSCRIPT:%.*]] = subscript inbounds ptr [[LP0:%.*]] i64 [[VP7]]
; CHECK-NEXT:     [DA: Div] i32 [[VP_LOAD:%.*]] = load ptr [[VP_SUBSCRIPT]]
; CHECK-NEXT:     [DA: Div] i1 [[VP9:%.*]] = icmp ult i32 [[VP_LOAD]] i32 [[VP5]]
; CHECK-NEXT:     [DA: Div] i32 [[VP6]] = select i1 [[VP9]] i32 [[VP_LOAD]] i32 [[VP5]]
; CHECK-NEXT:     [DA: Div] i64 [[VP10:%.*]] = add i64 [[VP7]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP11:%.*]] = icmp slt i64 [[VP10]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br cloned.[[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB3]]: # preds: [[BB2]]
; CHECK-NEXT:     [DA: Div] ptr [[VP12:%.*]] = subscript inbounds ptr [[LP0]] i64 [[VP10]]
; CHECK-NEXT:     [DA: Div] i32 [[VP13:%.*]] = load ptr [[VP12]]
; CHECK-NEXT:     [DA: Div] i1 [[VP14:%.*]] = icmp ult i32 [[VP13]] i32 [[VP3]]
; CHECK-NEXT:     [DA: Div] i32 [[VP4]] = select i1 [[VP14]] i32 [[VP13]] i32 [[VP3]]
; CHECK-NEXT:     [DA: Div] i64 [[VP8]] = add i64 [[VP10]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP15:%.*]] = icmp slt i64 [[VP8]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP15]], [[BB2]], [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: cloned.[[BB3]]
; CHECK-NEXT:     [DA: Div] i32 [[VP_LLVM_UMIN_I32:%.*]] = call i32 [[VP6]] i32 [[VP4]] ptr @llvm.umin.i32
; CHECK-NEXT:     [DA: Uni] i32 [[VP_MINMAX_RED_FINAL:%.*]] = reduction-final{u_umin} i32 [[VP_LLVM_UMIN_I32]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP__IND_FINAL:%.*]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Uni] br [[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]: # preds: [[BB4]]
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   i32 [[VP_MINMAX_RED_FINAL]] -> [[VP16:%.*]] = {%a.010}
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 1   no underlying for i64 [[VP__IND_FINAL]]
;
entry:
  br label %for.body

for.body:
  %a.010 = phi i32 [ %init, %entry ], [ %spec.select, %for.body ]
  %l1.09 = phi i64 [ 0, %entry ], [ %inc, %for.body ]
  %arrayidx = getelementptr inbounds i32, ptr %lp, i64 %l1.09
  %0 = load i32, ptr %arrayidx, align 4
  %cmp1 = icmp ult i32 %0, %a.010
  %spec.select = select i1 %cmp1, i32 %0, i32 %a.010
  %inc = add nuw nsw i64 %l1.09, 1
  %exitcond.not = icmp eq i64 %inc, 1024
  br i1 %exitcond.not, label %for.end, label %for.body

for.end:
  %spec.select.lcssa = phi i32 [ %spec.select, %for.body ]
  ret i32 %spec.select.lcssa
}

declare float @llvm.maxnum.f32(float, float)
declare float @llvm.minnum.f32(float, float)
