; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -passes="hir-ssa-deconstruction,hir-temp-cleanup,hir-vec-dir-insert,hir-vplan-vec,print<hir>" -vplan-print-after-plain-cfg -vplan-force-vf=4 -disable-output < %s 2>&1 | FileCheck %s
;
; LIT test to check VPlan and vector code generated for HLInsts which are in
; min/max form (i.e. an HLInst like t1 = val1 > val2 ? val1 : val2). VPlan
; checks ensure that the operands used in cmp/select for the min/max sequence
; match. CG checks ensure that the generated vector HLInst retains a form so
; that isMax()/isMin() remains true for the same.
;
define dso_local i64 @getmax(ptr noalias nocapture readonly %larr) local_unnamed_addr #0 {
; CHECK-LABEL:  VPlan after importing plain CFG:
; CHECK-NEXT:  VPlan IR for: getmax:HIR.#{{[0-9]+}}
; CHECK-NEXT:  External Defs Start:
; CHECK-DAG:     [[VP0:%.*]] = {%max.012.root}
; CHECK-DAG:     [[VP1:%.*]] = {%larr}
; CHECK-NEXT:  External Defs End:
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], [[BB2]]
; CHECK-NEXT:     i64 [[VP2:%.*]] = phi  [ i64 [[MAX_0120:%.*]], [[BB1]] ],  [ i64 [[VP3:%.*]], [[BB2]] ]
; CHECK-NEXT:     i64 [[VP4:%.*]] = phi  [ i64 0, [[BB1]] ],  [ i64 [[VP5:%.*]], [[BB2]] ]
; CHECK-NEXT:     ptr [[VP_SUBSCRIPT:%.*]] = subscript inbounds ptr [[LARR0:%.*]] i64 [[VP4]]
; CHECK-NEXT:     i64 [[VP_LOAD:%.*]] = load ptr [[VP_SUBSCRIPT]]
; CHECK-NEXT:     i64 [[VP6:%.*]] = mul i64 [[VP_LOAD]] i64 3
; CHECK-NEXT:     i64 [[VP7:%.*]] = add i64 [[VP6]] i64 2
; CHECK-NEXT:     i1 [[VP8:%.*]] = icmp sgt i64 [[VP2]] i64 [[VP7]]
; CHECK-NEXT:     i64 [[VP3]] = select i1 [[VP8]] i64 [[VP2]] i64 [[VP7]]
; CHECK-NEXT:     i64 [[VP5]] = add i64 [[VP4]] i64 1
; CHECK-NEXT:     i1 [[VP9:%.*]] = icmp slt i64 [[VP5]] i64 100
; CHECK-NEXT:     br i1 [[VP9]], [[BB2]], [[BB3:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: [[BB2]]
; CHECK-NEXT:     br [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: [[BB3]]
; CHECK-NEXT:     br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   i64 [[VP3]] -> [[VP10:%.*]] = {%max.012.root}
;
; CHECK:       Function: getmax
;
; CHECK:       BEGIN REGION { modified }
; CHECK-NEXT:        [[RED_INIT0:%.*]] = [[MAX_0120]]
; CHECK-NEXT:        [[PHI_TEMP0:%.*]] = [[RED_INIT0]]
;
; CHECK:             + DO i1 = 0, 99, 4   <DO_LOOP> <auto-vectorized> <novectorize>
; CHECK-NEXT:        |   [[DOTVEC0:%.*]] = (<4 x i64>*)([[LARR0]])[i1]
; CHECK-NEXT:        |   [[DOTVEC10:%.*]] = [[DOTVEC0]]  *  3
; CHECK-NEXT:        |   [[DOTVEC20:%.*]] = ([[PHI_TEMP0]] > [[DOTVEC10]] + 2) ? [[PHI_TEMP0]] : [[DOTVEC10]] + 2
; CHECK-NEXT:        |   [[PHI_TEMP0]] = [[DOTVEC20]]
; CHECK-NEXT:        + END LOOP
;
; CHECK:             [[MAX_0120]] = @llvm.vector.reduce.smax.v4i64([[DOTVEC20]])
; CHECK:       END REGION
;

entry:
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %l1.013 = phi i64 [ 0, %entry ], [ %inc, %for.body ]
  %max.012 = phi i64 [ -9223372036854775808, %entry ], [ %1, %for.body ]
  %arrayidx = getelementptr inbounds i64, ptr %larr, i64 %l1.013
  %0 = load i64, ptr %arrayidx, align 8
  %mul = mul nsw i64 %0, 3
  %add = add nsw i64 %mul, 2
  %cmp1 = icmp sgt i64 %max.012, %add
  %1 = select i1 %cmp1, i64 %max.012, i64 %add
  %inc = add nuw nsw i64 %l1.013, 1
  %exitcond = icmp eq i64 %inc, 100
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  %.lcssa = phi i64 [ %1, %for.body ]
  ret i64 %.lcssa
}

define dso_local i64 @getmin(ptr noalias nocapture readonly %larr) local_unnamed_addr #0 {
; CHECK-LABEL:  VPlan after importing plain CFG:
; CHECK-NEXT:  VPlan IR for: getmin:HIR.#{{[0-9]+}}
; CHECK-NEXT:  External Defs Start:
; CHECK-DAG:     [[VP0:%.*]] = {%min.012}
; CHECK-DAG:     [[VP1:%.*]] = {%inc}
; CHECK-DAG:     [[VP2:%.*]] = {%larr}
; CHECK-NEXT:  External Defs End:
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], [[BB2]]
; CHECK-NEXT:     i64 [[VP3:%.*]] = phi  [ i64 [[MIN_0120:%.*]], [[BB1]] ],  [ i64 [[VP4:%.*]], [[BB2]] ]
; CHECK-NEXT:     i64 [[VP5:%.*]] = phi  [ i64 0, [[BB1]] ],  [ i64 [[VP6:%.*]], [[BB2]] ]
; CHECK-NEXT:     ptr [[VP_SUBSCRIPT:%.*]] = subscript inbounds ptr [[LARR0:%.*]] i64 [[VP5]]
; CHECK-NEXT:     i64 [[VP_LOAD:%.*]] = load ptr [[VP_SUBSCRIPT]]
; CHECK-NEXT:     i64 [[VP7:%.*]] = mul i64 [[VP_LOAD]] i64 3
; CHECK-NEXT:     i64 [[VP8:%.*]] = add i64 [[VP7]] i64 2
; CHECK-NEXT:     i1 [[VP9:%.*]] = icmp sgt i64 [[VP3]] i64 [[VP8]]
; CHECK-NEXT:     i64 [[VP4]] = select i1 [[VP9]] i64 [[VP8]] i64 [[VP3]]
; CHECK-NEXT:     i64 [[VP10:%.*]] = add i64 [[VP5]] i64 1
; CHECK-NEXT:     i64 [[VP6]] = add i64 [[VP5]] i64 1
; CHECK-NEXT:     i1 [[VP11:%.*]] = icmp slt i64 [[VP6]] i64 100
; CHECK-NEXT:     br i1 [[VP11]], [[BB2]], [[BB3:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: [[BB2]]
; CHECK-NEXT:     br [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: [[BB3]]
; CHECK-NEXT:     br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   i64 [[VP4]] -> [[VP12:%.*]] = {%min.012}
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 1   i64 [[VP10]] -> [[VP13:%.*]] = {%inc}
;
; CHECK:       Function: getmin
;
; CHECK:       BEGIN REGION { modified }
; CHECK-NEXT:        [[RED_INIT0:%.*]] = [[MIN_0120]]
; CHECK-NEXT:        [[PHI_TEMP0:%.*]] = [[RED_INIT0]]
;
; CHECK:             + DO i1 = 0, 99, 4   <DO_LOOP> <auto-vectorized> <novectorize>
; CHECK-NEXT:        |   [[DOTVEC0:%.*]] = (<4 x i64>*)([[LARR0]])[i1]
; CHECK-NEXT:        |   [[DOTVEC10:%.*]] = [[DOTVEC0]]  *  3
; CHECK-NEXT:        |   [[DOTVEC20:%.*]] = ([[PHI_TEMP0]] > [[DOTVEC10]] + 2) ? [[DOTVEC10]] + 2 : [[PHI_TEMP0]]
; CHECK-NEXT:        |   [[LIVEOUTCOPY0:%.*]] = i1 + <i64 0, i64 1, i64 2, i64 3> + 1
; CHECK-NEXT:        |   [[PHI_TEMP0]] = [[DOTVEC20]]
; CHECK-NEXT:        + END LOOP
;
; CHECK:             [[MIN_0120]] = @llvm.vector.reduce.smin.v4i64([[DOTVEC20]])
; CHECK-NEXT:        [[INC0:%.*]] = extractelement [[LIVEOUTCOPY0]],  3
; CHECK:       END REGION
;

entry:
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %l1.013 = phi i64 [ 0, %entry ], [ %inc, %for.body ]
  %min.012 = phi i64 [ 9223372036854775807, %entry ], [ %1, %for.body ]
  %arrayidx = getelementptr inbounds i64, ptr %larr, i64 %l1.013
  %0 = load i64, ptr %arrayidx, align 8
  %mul = mul nsw i64 %0, 3
  %add = add nsw i64 %mul, 2
  %cmp1 = icmp sgt i64 %min.012, %add
  %1 = select i1 %cmp1, i64 %add, i64 %min.012
  %inc = add nuw nsw i64 %l1.013, 1
  %exitcond = icmp eq i64 %inc, 100
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  %.lcssa = phi i64 [ %1, %for.body ]
  %.lcssa.i = phi i64 [ %inc, %for.body ]
  %r = add nuw nsw i64 %.lcssa, %.lcssa.i
  ret i64 %r
}
