; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -vplan-print-terminator-inst=false -hir-ssa-deconstruction -hir-temp-cleanup -hir-vec-dir-insert -VPlanDriverHIR -vplan-print-after-plain-cfg -vplan-force-vf=4 -print-after=VPlanDriverHIR -disable-output < %s 2>&1  | FileCheck %s
;
; LIT test to check VPlan and vector code generated for HLInsts which are in
; min/max form (i.e. an HLInst like t1 = val1 > val2 ? val1 : val2). VPlan
; checks ensure that the operands used in cmp/select for the min/max sequence
; match. CG checks ensure that the generated vector HLInst retains a form so
; that isMax()/isMin() remains true for the same.
;
define dso_local i64 @getmax(i64* noalias nocapture readonly %larr) local_unnamed_addr #0 {
; CHECK-LABEL:  VPlan after importing plain CFG:
; CHECK-NEXT:  External Defs Start:
; CHECK-DAG:     [[VP0:%.*]] = {%max.012}
; CHECK-DAG:     [[VP1:%.*]] = {%larr}
; CHECK-NEXT:  External Defs End:
; CHECK-NEXT:    [[BB0:BB[0-9]+]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB1:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB2:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]:
; CHECK-NEXT:     i64 [[VP2:%.*]] = phi  [ i64 [[MAX_0120:%.*]], [[BB1]] ],  [ i64 [[VP3:%.*]], [[BB2]] ]
; CHECK-NEXT:     i64 [[VP4:%.*]] = phi  [ i64 0, [[BB1]] ],  [ i64 [[VP5:%.*]], [[BB2]] ]
; CHECK-NEXT:     i64* [[VP_SUBSCRIPT:%.*]] = subscript inbounds i64* [[LARR0:%.*]] i64 [[VP4]]
; CHECK-NEXT:     i64 [[VP6:%.*]] = load i64* [[VP_SUBSCRIPT]]
; CHECK-NEXT:     i64 [[VP7:%.*]] = mul i64 [[VP6]] i64 3
; CHECK-NEXT:     i64 [[VP8:%.*]] = add i64 [[VP7]] i64 2
; CHECK-NEXT:     i1 [[VP9:%.*]] = icmp sgt i64 [[VP2]] i64 [[VP8]]
; CHECK-NEXT:     i64 [[VP3]] = select i1 [[VP9]] i64 [[VP2]] i64 [[VP8]]
; CHECK-NEXT:     i64 [[VP5]] = add i64 [[VP4]] i64 1
; CHECK-NEXT:     i1 [[VP10:%.*]] = icmp sle i64 [[VP5]] i64 99
; CHECK-NEXT:    SUCCESSORS(2):[[BB2]](i1 [[VP10]]), [[BB3:BB[0-9]+]](!i1 [[VP10]])
; CHECK-NEXT:    PREDECESSORS(2): [[BB1]] [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB4:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   i64 [[VP3]] -> [[VP11:%.*]] = {%max.012}
; CHECK-EMPTY:
; CHECK-NEXT:  *** IR Dump After VPlan Vectorization Driver HIR ***
; CHECK-NEXT:  Function: getmax
; CHECK-EMPTY:
; CHECK-NEXT:  BEGIN REGION { modified }
; CHECK-NEXT:             %red.var = %max.012;
; CHECK-NEXT:          + DO i1 = 0, 99, 4   <DO_LOOP> <novectorize>
; CHECK-NEXT:          |   %.vec = (<4 x i64>*)(%larr)[i1];
; CHECK-NEXT:          |   %.vec1 = %.vec  *  3;
; CHECK-NEXT:          |   %red.var = (%red.var > %.vec1 + 2) ? %red.var : %.vec1 + 2;
; CHECK-NEXT:          + END LOOP
; CHECK-NEXT:             %max.012 = @llvm.vector.reduce.smax.v4i64(%red.var);
; CHECK-NEXT:  END REGION
;
entry:
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %l1.013 = phi i64 [ 0, %entry ], [ %inc, %for.body ]
  %max.012 = phi i64 [ -9223372036854775808, %entry ], [ %1, %for.body ]
  %arrayidx = getelementptr inbounds i64, i64* %larr, i64 %l1.013
  %0 = load i64, i64* %arrayidx, align 8
  %mul = mul nsw i64 %0, 3
  %add = add nsw i64 %mul, 2
  %cmp1 = icmp sgt i64 %max.012, %add
  %1 = select i1 %cmp1, i64 %max.012, i64 %add
  %inc = add nuw nsw i64 %l1.013, 1
  %exitcond = icmp eq i64 %inc, 100
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  %.lcssa = phi i64 [ %1, %for.body ]
  ret i64 %.lcssa
}

define dso_local i64 @getmin(i64* noalias nocapture readonly %larr) local_unnamed_addr #0 {
; CHECK-LABEL:  VPlan after importing plain CFG:
; CHECK-NEXT:  External Defs Start:
; CHECK-DAG:     [[VP0:%.*]] = {%min.012}
; CHECK-DAG:     [[VP1:%.*]] = {%larr}
; CHECK-NEXT:  External Defs End:
; CHECK-NEXT:    [[BB0:BB[0-9]+]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB1:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB2:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]:
; CHECK-NEXT:     i64 [[VP2:%.*]] = phi  [ i64 [[MIN_0120:%.*]], [[BB1]] ],  [ i64 [[VP3:%.*]], [[BB2]] ]
; CHECK-NEXT:     i64 [[VP4:%.*]] = phi  [ i64 0, [[BB1]] ],  [ i64 [[VP5:%.*]], [[BB2]] ]
; CHECK-NEXT:     i64* [[VP_SUBSCRIPT:%.*]] = subscript inbounds i64* [[LARR0:%.*]] i64 [[VP4]]
; CHECK-NEXT:     i64 [[VP6:%.*]] = load i64* [[VP_SUBSCRIPT]]
; CHECK-NEXT:     i64 [[VP7:%.*]] = mul i64 [[VP6]] i64 3
; CHECK-NEXT:     i64 [[VP8:%.*]] = add i64 [[VP7]] i64 2
; CHECK-NEXT:     i1 [[VP9:%.*]] = icmp sgt i64 [[VP2]] i64 [[VP8]]
; CHECK-NEXT:     i64 [[VP3]] = select i1 [[VP9]] i64 [[VP8]] i64 [[VP2]]
; CHECK-NEXT:     i64 [[VP10:%.*]] = add i64 [[VP4]] i64 1
; CHECK-NEXT:     i64 [[VP5]] = add i64 [[VP4]] i64 1
; CHECK-NEXT:     i1 [[VP11:%.*]] = icmp sle i64 [[VP5]] i64 99
; CHECK-NEXT:    SUCCESSORS(2):[[BB2]](i1 [[VP11]]), [[BB3:BB[0-9]+]](!i1 [[VP11]])
; CHECK-NEXT:    PREDECESSORS(2): [[BB1]] [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB4:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0 i64 [[VP3]] -> [[VP12:%.*]] = {%min.012}
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 1 i64 [[VP10]] -> [[VP13:%.*]] = {%inc}
; CHECK-EMPTY:
; CHECK-NEXT: *** IR Dump After VPlan Vectorization Driver HIR ***
; CHECK-NEXT:  Function: getmin
; CHECK-EMPTY:
; CHECK-NEXT:  BEGIN REGION { modified }
; CHECK-NEXT:             %red.var = %min.012;
; CHECK-NEXT:          + DO i1 = 0, 99, 4   <DO_LOOP> <novectorize>
; CHECK-NEXT:          |   %.vec = (<4 x i64>*)(%larr)[i1];
; CHECK-NEXT:          |   %.vec1 = %.vec  *  3;
; CHECK-NEXT:          |   %red.var = (%red.var > %.vec1 + 2) ? %.vec1 + 2 : %red.var;
; CHECK-NEXT:          |   %inc.vec = i1 + <i64 0, i64 1, i64 2, i64 3>  +  1
; CHECK-NEXT:          + END LOOP
; CHECK-NEXT:             %min.012 = @llvm.vector.reduce.smin.v4i64(%red.var);
; CHECK:               %inc = extractelement %inc.vec,  3
; CHECK-NEXT:  END REGION
;
entry:
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %l1.013 = phi i64 [ 0, %entry ], [ %inc, %for.body ]
  %min.012 = phi i64 [ 9223372036854775807, %entry ], [ %1, %for.body ]
  %arrayidx = getelementptr inbounds i64, i64* %larr, i64 %l1.013
  %0 = load i64, i64* %arrayidx, align 8
  %mul = mul nsw i64 %0, 3
  %add = add nsw i64 %mul, 2
  %cmp1 = icmp sgt i64 %min.012, %add
  %1 = select i1 %cmp1, i64 %add, i64 %min.012
  %inc = add nuw nsw i64 %l1.013, 1
  %exitcond = icmp eq i64 %inc, 100
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  %.lcssa = phi i64 [ %1, %for.body ]
  %.lcssa.i = phi i64 [ %inc, %for.body ]
  %r = add nuw nsw i64 %.lcssa, %.lcssa.i
  ret i64 %r
}
