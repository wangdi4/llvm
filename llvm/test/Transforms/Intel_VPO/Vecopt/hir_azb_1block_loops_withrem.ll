; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; Test to check that we dont crash in AZB when CFG contains loops followed by
; blocks with predicate only.
;
; RUN: opt %s -disable-output -passes="hir-ssa-deconstruction,hir-temp-cleanup,hir-vec-dir-insert,hir-vplan-vec" -vplan-all-zero-bypass-region-threshold=1 -enable-intel-advanced-opts -vplan-vec-scenario="n0;v8;m8" -vplan-enable-masked-vectorized-remainder -print-after=hir-vplan-vec 2>&1 | FileCheck %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind readnone speculatable
declare ptr @llvm.intel.subscript.p0.i64.i64.p0.i64(i8, i64, i64, ptr, i64) #0

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

; Function Attrs: nounwind uwtable
define hidden void @z_solve_m_mp_z_solve_.DIR.OMP.DISTRIBUTE.PARLOOP.116.split6271.split(ptr nocapture readonly %tid, ptr noalias nocapture readonly %omp.pdo.norm.ub1633.fpriv, i64 %z0) #2 {
; CHECK-LABEL:  Function: z_solve_m_mp_z_solve_.DIR.OMP.DISTRIBUTE.PARLOOP.116.split6271.split
; CHECK:     DO i2 = 0, [[LOOP_UB0:%.*]], 8   <DO_LOOP>  <MAX_TC_EST = 268435455>  <LEGAL_MAX_TC = 268435455> <simd-vectorized> <nounroll> <novectorize>
;
DIR.OMP.DISTRIBUTE.PARLOOP.81:
  %"z_solve_m_mp_z_solve_$J.priv4521.priv" = alloca i32, align 8
  %"z_solve_m_mp_z_solve_$J.priv4521.priv2" = alloca double, align 8
  %lower.bnd = alloca i64, align 8
  %upper.bnd = alloca i64, align 8
  %stride = alloca i64, align 8
  %upperD = alloca i64, align 8
  %0 = load i64, ptr %omp.pdo.norm.ub1633.fpriv, align 8
  %rel.73.not6180 = icmp slt i64 %0, 0
  br i1 %rel.73.not6180, label %DIR.OMP.END.DISTRIBUTE.PARLOOP.109.loopexit, label %DIR.OMP.SIMD.106.lr.ph

omp.pdo.body227:
  %omp.pdo.norm.iv1624.local.06269 = phi i64 [ 0, %DIR.OMP.SIMD.134 ], [ %add.176, %bb24 ]
  %int_sext1389 = trunc i64 %omp.pdo.norm.iv1624.local.06269 to i32
  %add.151 = add nsw i32 %int_sext1389, 1
  %int_sext1390 = sext i32 %add.151 to i64
  %"z_solve_m_mp_z_solve_$LHS22[][][][]1396" = call ptr @llvm.intel.subscript.p0.i64.i64.p0.i64(i8 0, i64 0, i64 8, ptr elementtype(double) %"z_solve_m_mp_z_solve_$J.priv4521.priv2", i64 %int_sext1390)
  %"z_solve_m_mp_z_solve_$LHS22[][][][]_fetch.1501" = load double, ptr %"z_solve_m_mp_z_solve_$LHS22[][][][]1396"
  %mul.195 = fmul fast double %"z_solve_m_mp_z_solve_$LHS22[][][][]_fetch.1501", 0x27
  store double %mul.195, ptr %"z_solve_m_mp_z_solve_$J.priv4521.priv2", align 8
  br label %bb13

bb13:
  %indvars.iv = phi i64 [ %indvars.iv.next, %bb13 ], [ 1, %omp.pdo.body227 ]
  %"fetch.1510[][][][]_fetch.1529" = load double, ptr %"z_solve_m_mp_z_solve_$J.priv4521.priv2", align 1
  %mul.200 = fmul fast double %"fetch.1510[][][][]_fetch.1529", 0x27
  store double %mul.200, ptr %"z_solve_m_mp_z_solve_$J.priv4521.priv2", align 1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 4
  br i1 %exitcond.not, label %bb16, label %bb13

bb16:
  %"z_solve_m_mp_z_solve_$LHS22[][][][]_fetch.1605" = load double, ptr %"z_solve_m_mp_z_solve_$J.priv4521.priv2"
  %mul.206 = fmul fast double %"z_solve_m_mp_z_solve_$LHS22[][][][]_fetch.1605", %"z_solve_m_mp_z_solve_$LHS22[][][][]_fetch.1605"
  %sub.57 = fsub fast double %"z_solve_m_mp_z_solve_$LHS22[][][][]_fetch.1605", %mul.206
  store double %sub.57, ptr %"z_solve_m_mp_z_solve_$J.priv4521.priv2", align 8
  %"z_solve_m_mp_z_solve_$LHS22[][][][]_fetch.1640" = load double, ptr %"z_solve_m_mp_z_solve_$J.priv4521.priv2", align 8
  br label %bb17

bb17:
  %indvars.iv26 = phi i64 [ %indvars.iv.next27, %bb17 ], [ 1, %bb16 ]
  %"fetch.1641[][][][]_fetch.1660" = load double, ptr %"z_solve_m_mp_z_solve_$J.priv4521.priv2", align 1
  %mul.215 = fmul fast double %"fetch.1641[][][][]_fetch.1660", %mul.206
  %sub.58 = fsub fast double %"fetch.1641[][][][]_fetch.1660", %mul.215
  store double %sub.58, ptr %"z_solve_m_mp_z_solve_$J.priv4521.priv2", align 1
  %indvars.iv.next27 = add nuw nsw i64 %indvars.iv26, 1
  %exitcond28.not = icmp eq i64 %indvars.iv.next27, 4
  br i1 %exitcond28.not, label %bb20, label %bb17

bb20:
  %"z_solve_m_mp_z_solve_$LHS22[][][][]_fetch.1689" = load double, ptr %"z_solve_m_mp_z_solve_$J.priv4521.priv2", align 8
  %div.28 = fdiv fast double 1.000000e+00, %"z_solve_m_mp_z_solve_$LHS22[][][][]_fetch.1689"
  br label %bb21

bb21:
  %indvars.iv29 = phi i64 [ %indvars.iv.next30, %bb21 ], [ 1, %bb20 ]
  %"fetch.1691[][][][]_fetch.1710" = load double, ptr %"z_solve_m_mp_z_solve_$J.priv4521.priv2", align 1
  %mul.224 = fmul fast double %"fetch.1691[][][][]_fetch.1710", %div.28
  store double %mul.224, ptr %"z_solve_m_mp_z_solve_$J.priv4521.priv2", align 1
  %indvars.iv.next30 = add nuw nsw i64 %indvars.iv29, 1
  %exitcond31.not = icmp eq i64 %indvars.iv.next30, 4
  br i1 %exitcond31.not, label %bb24, label %bb21

bb24:
  %add.176 = add nuw nsw i64 %omp.pdo.norm.iv1624.local.06269, 1
  %exitcond32.not = icmp eq i64 %add.176, %five5
  br i1 %exitcond32.not, label %DIR.OMP.END.SIMD.2, label %omp.pdo.body227

DIR.OMP.SIMD.75:
  %omp.pdo.norm.iv1631.priv.local.06181 = phi i64 [ %add.177, %DIR.OMP.END.SIMD.108.loopexit ], [ %lb.new, %DIR.OMP.SIMD.75.preheader ]
  %int_sext1387 = trunc i64 %omp.pdo.norm.iv1631.priv.local.06181 to i32
  %add.150 = add nsw i32 %int_sext1387, 1
  store i32 %add.150, ptr %"z_solve_m_mp_z_solve_$J.priv4521.priv", align 8
  %share_mp_nx2__fetch.1459 = load i32, ptr %"z_solve_m_mp_z_solve_$J.priv4521.priv", align 8
  %rel.74.not6268 = icmp slt i32 %share_mp_nx2__fetch.1459, 1
  br i1 %rel.74.not6268, label %DIR.OMP.END.SIMD.108.loopexit, label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:
  %four4 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.NORMALIZED.IV"(ptr null), "QUAL.OMP.NORMALIZED.UB"(ptr null), "QUAL.OMP.LIVEIN"(ptr %"z_solve_m_mp_z_solve_$J.priv4521.priv") ]
  br label %DIR.OMP.SIMD.134

DIR.OMP.SIMD.134:
  %"z_solve_m_mp_z_solve_$J_fetch.1471" = load i32, ptr %"z_solve_m_mp_z_solve_$J.priv4521.priv", align 8
  %int_sext1391 = sext i32 %"z_solve_m_mp_z_solve_$J_fetch.1471" to i64

  %five5 = zext i32 %share_mp_nx2__fetch.1459 to i64
  br label %omp.pdo.body227

DIR.OMP.END.SIMD.2:
  store i32 %share_mp_nx2__fetch.1459, ptr %"z_solve_m_mp_z_solve_$J.priv4521.priv", align 8
  br label %DIR.OMP.END.SIMD.235

DIR.OMP.END.SIMD.235:
  call void @llvm.directive.region.exit(token %four4) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.OMP.END.SIMD.108.loopexit

DIR.OMP.END.SIMD.108.loopexit:
  %add.177 = add nuw i64 %omp.pdo.norm.iv1631.priv.local.06181, 1
  %exitcond33 = icmp eq i64 %add.177, %six6
  br i1 %exitcond33, label %loop.region.exit.loopexit, label %DIR.OMP.SIMD.75

loop.region.exit.loopexit:
  br label %loop.region.exit
loop.region.exit:
  br label %DIR.OMP.END.DISTRIBUTE.PARLOOP.109.loopexit
DIR.OMP.END.DISTRIBUTE.PARLOOP.109.loopexit:
  ret void

DIR.OMP.SIMD.106.lr.ph:
  %my.tid = load i32, ptr %tid, align 4
  store i64 0, ptr %lower.bnd, align 8
  store i64 %z0, ptr %upper.bnd, align 8
  store i64 1, ptr %stride, align 8
  store i64 %z0, ptr %upperD, align 8
  %lb.new = load i64, ptr %lower.bnd, align 8
  %ub.new = load i64, ptr %upper.bnd, align 8
  %omp.ztt.not = icmp ugt i64 %lb.new, %ub.new
  br i1 %omp.ztt.not, label %loop.region.exit, label %DIR.OMP.SIMD.75.preheader

DIR.OMP.SIMD.75.preheader:
  %six6 = add nuw nsw i64 %ub.new, 1
  br label %DIR.OMP.SIMD.75
}
attributes #0 = { nounwind readnone speculatable }
attributes #1 = { nounwind }
attributes #2 = { nounwind uwtable "denormal-fp-math"="preserve_sign,preserve_sign" "frame-pointer"="none" "intel-lang"="fortran" "loopopt-pipeline"="full" "may-have-openmp-directive"="true" "min-legal-vector-width"="0" "mt-func"="true" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "pre_loopopt" "processed-by-vpo" "target-cpu"="core-avx2" "target-features"="+avx,+avx2,+bmi,+bmi2,+crc32,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+rdrnd,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt" "unsafe-fp-math"="true" }
