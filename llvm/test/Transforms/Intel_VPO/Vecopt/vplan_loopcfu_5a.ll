; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; Test inner loop control flow uniformity for do/while loop without loop index.

; REQUIRES: asserts
; RUN: opt -S < %s -VPlanDriver -vplan-print-after-loop-cfu -disable-output | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"


; Function Attrs: nounwind
declare token @llvm.directive.region.entry() nounwind

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) nounwind

@A = common local_unnamed_addr global [100 x [100 x i64]] zeroinitializer, align 16

; Function Attrs: norecurse nounwind uwtable
define dso_local void @foo(i32* nocapture %a, i32 %m, i32* nocapture readonly %ub, i32 %k) local_unnamed_addr #0 {
; CHECK-LABEL:  After inner loop control flow transformation
; CHECK-NEXT:    REGION: [[REGION0:region[0-9]+]]
; CHECK-NEXT:    [[BB0:BB[0-9]+]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB1:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]:
; CHECK-NEXT:     [DA: Divergent] i64 [[VP0:%.*]] = induction-init{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP1:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:    SUCCESSORS(1):[[BB2:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]:
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_OUTER_IV:%.*]] = phi  [ i64 [[VP0]], [[BB1]] ],  [ i64 [[VP_OUTER_IV_NEXT:%.*]], [[BB3:BB[0-9]+]] ]
; CHECK-NEXT:     [DA: Divergent] i32* [[VP_ARRAYIDX:%.*]] = getelementptr inbounds i32* [[UB0:%.*]] i64 [[VP_OUTER_IV]]
; CHECK-NEXT:     [DA: Divergent] i32* [[VP_ARRAYIDX2:%.*]] = getelementptr inbounds i32* [[A0:%.*]] i64 [[VP_OUTER_IV]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP__PRE:%.*]] = load i32* [[VP_ARRAYIDX]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB4:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB3]] [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB5:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]:
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_INNER_REC:%.*]] = phi  [ i32 [[VP_INNER_REC_NEXT:%.*]], [[BB6:BB[0-9]+]] ],  [ i32 [[VP__PRE]], [[BB4]] ]
; CHECK-NEXT:     [DA: Uniform]   i32 [[VP_INNER_IV:%.*]] = phi  [ i32 [[VP_INNER_IV_NEXT:%.*]], [[BB6]] ],  [ i32 0, [[BB4]] ]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_LOOP_MASK:%.*]] = phi  [ i1 true, [[BB4]] ],  [ i1 [[VP_LOOP_MASK_NEXT:%.*]], [[BB6]] ]
; CHECK-NEXT:    SUCCESSORS(1):[[BB7:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB6]] [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB7]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:     Condition([[BB5]]): [DA: Divergent] i1 [[VP_LOOP_MASK]] = phi  [ i1 true, [[BB4]] ],  [ i1 [[VP_LOOP_MASK_NEXT]], [[BB6]] ]
; CHECK-NEXT:    SUCCESSORS(2):[[BB8:BB[0-9]+]](i1 [[VP_LOOP_MASK]]), [[BB9:BB[0-9]+]](!i1 [[VP_LOOP_MASK]])
; CHECK-NEXT:    PREDECESSORS(1): [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB8]]:
; CHECK-NEXT:       [DA: Divergent] i32 [[VP_MUL:%.*]] = mul i32 [[VP_INNER_REC]] i32 [[VP_INNER_IV]]
; CHECK-NEXT:       [DA: Divergent] store i32 [[VP_MUL]] i32* [[VP_ARRAYIDX2]]
; CHECK-NEXT:       [DA: Uniform]   i32 [[VP_INNER_IV_NEXT]] = add i32 [[VP_INNER_IV]] i32 1
; CHECK-NEXT:       [DA: Divergent] i32 [[VP_INNER_REC_NEXT]] = load i32* [[VP_ARRAYIDX]]
; CHECK-NEXT:      SUCCESSORS(1):[[BB9]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB7]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB9]]:
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_INNER_EXITCOND:%.*]] = icmp i32 [[VP_INNER_REC]] i32 0
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_LOOP_MASK_NEXT]] = and i1 [[VP_INNER_EXITCOND]] i1 [[VP_LOOP_MASK]]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP2:%.*]] = all-zero-check i1 [[VP_LOOP_MASK_NEXT]]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP3:%.*]] = not i1 [[VP2]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB6]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB8]] [[BB7]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:     Condition([[BB9]]): [DA: Uniform]   i1 [[VP3]] = not i1 [[VP2]]
; CHECK-NEXT:    SUCCESSORS(2):[[BB5]](i1 [[VP3]]), [[BB10:BB[0-9]+]](!i1 [[VP3]])
; CHECK-NEXT:    PREDECESSORS(1): [[BB9]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB10]]:
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_OUTER_IV_NEXT]] = add i64 [[VP_OUTER_IV]] i64 [[VP1]]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_EXITCOND:%.*]] = icmp i64 [[VP_OUTER_IV_NEXT]] i64 [[M_SEXT0:%.*]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB3]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:     Condition([[BB10]]): [DA: Uniform]   i1 [[VP_EXITCOND]] = icmp i64 [[VP_OUTER_IV_NEXT]] i64 [[M_SEXT0]]
; CHECK-NEXT:    SUCCESSORS(2):[[BB11:BB[0-9]+]](i1 [[VP_EXITCOND]]), [[BB2]](!i1 [[VP_EXITCOND]])
; CHECK-NEXT:    PREDECESSORS(1): [[BB10]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB11]]:
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP4:%.*]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:    SUCCESSORS(1):[[BB12:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB12]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB11]]
; CHECK-EMPTY:
; CHECK-NEXT:    END Region([[REGION0]])
;
entry:
  %cmp15 = icmp sgt i32 %m, 0
  br i1 %cmp15, label %simd.begin, label %for.end

simd.begin:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %outer.preheader

outer.preheader:
  %m.sext = sext i32 %m to i64
  br label %outer.header

outer.header:
  %outer.iv = phi i64 [ 0, %outer.preheader ], [ %outer.iv.next, %outer.latch ]
  %arrayidx = getelementptr inbounds i32, i32* %ub, i64 %outer.iv
  %arrayidx2 = getelementptr inbounds i32, i32* %a, i64 %outer.iv
  %.pre = load i32, i32* %arrayidx, align 4
  br label %inner.header

inner.header:
  %inner.rec = phi i32 [ %inner.rec.next, %inner.header ], [ %.pre, %outer.header ]
  %inner.iv = phi i32 [ %inner.iv.next, %inner.header ], [ 0, %outer.header ]
  %mul = mul nsw i32 %inner.rec, %inner.iv
  store i32 %mul, i32* %arrayidx2, align 4
  %inner.iv.next = add nuw nsw i32 %inner.iv, 1
  %inner.rec.next = load i32, i32* %arrayidx, align 4
  %inner.exitcond = icmp sgt i32 %inner.rec, 0
  br i1 %inner.exitcond, label %inner.header, label %outer.latch

outer.latch:
  %outer.iv.next = add nuw nsw i64 %outer.iv, 1
  %exitcond = icmp eq i64 %outer.iv.next, %m.sext
  br i1 %exitcond, label %outer.exit, label %outer.header

outer.exit:
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"()]
  br label %for.end

for.end:
  ret void
}

attributes #0 = { norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"clang version 4.0.0 (branches/vpo 20869)"}
!1 = !{!2, !2, i64 0}
!2 = !{!"long", !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
