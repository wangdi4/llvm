; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
;
; Test to check that we don't crash when a last private has two external uses.
;
; RUN: opt -disable-output -enable-new-pm=0 -vplan-vec -vplan-print-after-vpentity-instrs -vplan-entities-dump -print-after=vplan-vec %s 2>&1 | FileCheck %s
; RUN: opt -disable-output -passes="vplan-vec" -vplan-print-after-vpentity-instrs -vplan-entities-dump -print-after=vplan-vec %s 2>&1 | FileCheck %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux"

; Function Attrs: convergent mustprogress nofree nounwind readnone willreturn
declare i32 @_Z5isnanf(float) local_unnamed_addr #0

; Function Attrs: convergent norecurse nounwind
define dso_local void @_ZGVeN16u_test(i32 addrspace(1)* noalias %intOut) local_unnamed_addr #1 {
; CHECK-LABEL:  VPlan after insertion of VPEntities instructions:
; CHECK-NEXT:  VPlan IR for: _ZGVeN16u_test:simd.loop.#{{[0-9]+}}
; CHECK-NEXT:  Loop Entities of the loop with header [[BB0:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:  Induction list
; CHECK-NEXT:   IntInduction(+) Start: i32 0 Step: i32 1 StartVal: i32 0 EndVal: i32 16 BinOp: i32 [[VP_INDVAR:%.*]] = add i32 [[VP_INDEX:%.*]] i32 [[VP_INDEX_IND_INIT_STEP:%.*]]
; CHECK-NEXT:    Linked values: i32 [[VP_INDEX]], i32 [[VP_INDVAR]], i32 [[VP_INDEX_IND_INIT:%.*]], i32 [[VP_INDEX_IND_FINAL:%.*]],
; CHECK:       Private list
; CHECK-EMPTY:
; CHECK-NEXT:    Exit instr: i32 [[VP_COND:%.*]] = zext i1 [[VP_TOBOOL_NOT:%.*]] to i32
; CHECK-NEXT:    Linked values: i32 [[VP_COND]], i32 [[VP_COND_PRIV_FINAL:%.*]],
; CHECK:         [[BB1:BB[0-9]+]]: # preds:
; CHECK-NEXT:     br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]]
; CHECK-NEXT:     i32 [[VP_INDEX_IND_INIT]] = induction-init{add} i32 0 i32 1
; CHECK-NEXT:     i32 [[VP_INDEX_IND_INIT_STEP]] = induction-init-step{add} i32 1
; CHECK-NEXT:     br [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB0]]: # preds: [[BB2]], [[BB3:BB[0-9]+]]
; CHECK-NEXT:     i32 [[VP_INDEX]] = phi  [ i32 [[VP_INDEX_IND_INIT]], [[BB2]] ],  [ i32 [[VP_INDVAR]], [[BB3]] ]
; CHECK-NEXT:     i32 [[VP_CALL:%.*]] = call float 0x7FF8000000000000 i32 (float)* @_Z5isnanf
; CHECK-NEXT:     i1 [[VP_TOBOOL_NOT]] = icmp ne i32 [[VP_CALL]] i32 0
; CHECK-NEXT:     i32 [[VP_COND]] = zext i1 [[VP_TOBOOL_NOT]] to i32
; CHECK-NEXT:     br [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: [[BB0]]
; CHECK-NEXT:     i32 [[VP_INDVAR]] = add i32 [[VP_INDEX]] i32 [[VP_INDEX_IND_INIT_STEP]]
; CHECK-NEXT:     i1 [[VP_VL_COND:%.*]] = icmp ult i32 [[VP_INDVAR]] i32 16
; CHECK-NEXT:     br i1 [[VP_VL_COND]], [[BB0]], [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: [[BB3]]
; CHECK-NEXT:     i32 [[VP_INDEX_IND_FINAL]] = induction-final{add} i32 0 i32 1
; CHECK-NEXT:     i32 [[VP_COND_PRIV_FINAL]] = private-final-uc i32 [[VP_COND]]
; CHECK-NEXT:     br [[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]: # preds: [[BB4]]
; CHECK-NEXT:     br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0     [[COND_LCSSA0:%.*]] = phi i32 [ [[COND0:%.*]], [[SIMD_LOOP_EXIT0:%.*]] ] i32 [[VP_COND_PRIV_FINAL]] -> i32 [[COND0]]
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 1     [[COND_LCSSA10:%.*]] = phi i32 [ [[COND0]], [[SIMD_LOOP_EXIT0]] ] i32 [[VP_COND_PRIV_FINAL]] -> i32 [[COND0]]
;
; ==== Check CG
; CHECK:       final.merge:
; CHECK-NEXT:    [[UNI_PHI60:%.*]] = phi i32 [ [[EXTRACTED_PRIV0:%.*]], [[VPLANNEDBB50:%.*]] ]
; CHECK-NEXT:    [[UNI_PHI70:%.*]] = phi i32 [ [[EXTRACTED_PRIV0]], [[VPLANNEDBB50]] ]
; CHECK-NEXT:    [[UNI_PHI80:%.*]] = phi i32 [ 16, [[VPLANNEDBB50]] ]
; CHECK:       simd.end.region:
; CHECK-NEXT:    [[COND_LCSSA10:%.*]] = phi i32 [ [[UNI_PHI70]], [[FINAL_MERGE0:%.*]] ]
; CHECK-NEXT:    [[COND_LCSSA0:%.*]] = phi i32 [ [[UNI_PHI60]], [[FINAL_MERGE0]] ]
; CHECK-NEXT:    store i32 [[COND_LCSSA0]], i32 addrspace(1)* [[LOAD_INTOUT0:%.*]], align 4
; CHECK-NEXT:    store i32 [[COND_LCSSA10]], i32 addrspace(1)* [[ARRAYIDX40:%.*]], align 4
;
entry:
  %alloca.intOut = alloca i32 addrspace(1)*, align 8
  store i32 addrspace(1)* %intOut, i32 addrspace(1)** %alloca.intOut, align 8
  br label %simd.begin.region

simd.begin.region:                                ; preds = %entry
  %entry.region = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.SIMDLEN"(i32 16), "QUAL.OMP.UNIFORM"(i32 addrspace(1)** %alloca.intOut) ]
  br label %simd.loop.preheader

simd.loop.preheader:                              ; preds = %simd.begin.region
  %load.intOut = load i32 addrspace(1)*, i32 addrspace(1)** %alloca.intOut, align 8
  %arrayidx4 = getelementptr inbounds i32, i32 addrspace(1)* %load.intOut, i64 1
  br label %simd.loop

simd.loop:                                        ; preds = %simd.loop.exit, %simd.loop.preheader
  %index = phi i32 [ 0, %simd.loop.preheader ], [ %indvar, %simd.loop.exit ]
  %call = tail call i32 @_Z5isnanf(float 0x7FF8000000000000) #3
  %tobool.not = icmp ne i32 %call, 0
  %cond = zext i1 %tobool.not to i32
  br label %simd.loop.exit

simd.loop.exit:                                   ; preds = %simd.loop
  %indvar = add nuw i32 %index, 1
  %vl.cond = icmp ult i32 %indvar, 16
  br i1 %vl.cond, label %simd.loop, label %simd.end.region

simd.end.region:                                  ; preds = %simd.loop.exit
  %cond.lcssa1 = phi i32 [ %cond, %simd.loop.exit ]
  %cond.lcssa = phi i32 [ %cond, %simd.loop.exit ]
  store i32 %cond.lcssa, i32 addrspace(1)* %load.intOut, align 4
  store i32 %cond.lcssa1, i32 addrspace(1)* %arrayidx4, align 4
  br label %DIR.OMP.END.SIMD.1

DIR.OMP.END.SIMD.1:                               ; preds = %simd.end.region
  call void @llvm.directive.region.exit(token %entry.region) [ "DIR.OMP.END.SIMD"() ]
  br label %return

return:                                           ; preds = %DIR.OMP.END.SIMD.1
  ret void
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #2

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #2

attributes #0 = { convergent mustprogress nofree nounwind readnone willreturn "frame-pointer"="none" "no-trapping-math"="true" "prefer-vector-width"="512" "stack-protector-buffer-size"="8" "stackrealign" }
attributes #1 = { convergent norecurse nounwind "frame-pointer"="none" "may-have-openmp-directive"="true" "min-legal-vector-width"="0" "no-trapping-math"="true" "prefer-vector-width"="512" "stack-protector-buffer-size"="8" "stackrealign" "uniform-work-group-size"="true" "vector-variants"="_ZGVeN16u_test" }
attributes #2 = { nounwind }
attributes #3 = { convergent nounwind readnone willreturn }

