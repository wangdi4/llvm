; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -opaque-pointers=0 %s -S -passes="vplan-vec" -mattr=avx2 -debug-only=vectorutils -debug-only=VPlanCallVecDecisions 2>&1 | FileCheck %s
; REQUIRES: asserts

; Test that caller/callee simd function parameter scoring is done correctly and
; to distinguish between scoring of uniform pointer and uniform non-pointer arguments.
; MaxArg should be 0 since the highest score for a parameter is the 1st one, the
; uniform pointer argument.

; CHECK-LABEL: Attempting parameter matching of _ZGVxN2ua16lu_ with _ZGVdN2uvu_
; CHECK-NEXT: Args matched variant parameters
; CHECK: MaxArg: 0
; CHECK-NEXT: Score: 20
; CHECK-EMPTY:
; CHECK-NEXT: Matched call to: _ZGVdN2uvu_

target triple = "x86_64-unknown-linux-gnu"

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)

define dso_local void @_Z3fooPlil(i64* nocapture %a, i32 %i, i64 %x) local_unnamed_addr #0 {
entry:
  %idxprom = sext i32 %i to i64
  %ptridx = getelementptr inbounds i64, i64* %a, i64 %idxprom
  store i64 %x, i64* %ptridx, align 8
  ret void
}

define dso_local i32 @main() local_unnamed_addr #1 {
omp.inner.for.body.lr.ph:
  %i.linear.iv = alloca i32, align 4
  %a = alloca [256 x i64], align 16
  %0 = bitcast [256 x i64]* %a to i8*
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %omp.inner.for.body.lr.ph
  %1 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.SIMDLEN"(i32 2), "QUAL.OMP.LINEAR:IV"(i32* %i.linear.iv, i32 1), "QUAL.OMP.NORMALIZED.IV"(i8* null), "QUAL.OMP.NORMALIZED.UB"(i8* null) ]
  br label %DIR.OMP.SIMD.2

DIR.OMP.SIMD.2:                                   ; preds = %DIR.OMP.SIMD.1
  %arraydecay = getelementptr inbounds [256 x i64], [256 x i64]* %a, i64 0, i64 0
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %DIR.OMP.SIMD.2, %omp.inner.for.body
  %.omp.iv.local.07 = phi i32 [ 0, %DIR.OMP.SIMD.2 ], [ %add1, %omp.inner.for.body ]
  call void @_Z3fooPlil(i64* nonnull %arraydecay, i32 %.omp.iv.local.07, i64 256) #3
  %add1 = add nuw nsw i32 %.omp.iv.local.07, 1
  %exitcond = icmp eq i32 %add1, 256
  br i1 %exitcond, label %DIR.OMP.END.SIMD.4, label %omp.inner.for.body

DIR.OMP.END.SIMD.4:                               ; preds = %omp.inner.for.body
  call void @llvm.directive.region.exit(token %1) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.OMP.END.SIMD.3

DIR.OMP.END.SIMD.3:                               ; preds = %DIR.OMP.END.SIMD.4
  ret i32 0
}

attributes #0 = { nofree noinline norecurse nounwind uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" "vector-variants"="_ZGVbN2uvu__Z3fooPlil,_ZGVcN2uvu__Z3fooPlil,_ZGVdN2uvu__Z3fooPlil,_ZGVeN2uvu__Z3fooPlil,_ZGVbM2uvu__Z3fooPlil,_ZGVcM2uvu__Z3fooPlil,_ZGVdM2uvu__Z3fooPlil,_ZGVeM2uvu__Z3fooPlil" }
attributes #1 = { noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "may-have-openmp-directive"="true" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
