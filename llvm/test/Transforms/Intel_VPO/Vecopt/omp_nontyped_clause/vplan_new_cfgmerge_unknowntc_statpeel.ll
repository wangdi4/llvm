; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
;RUN: opt -opaque-pointers=0 -disable-output -passes=vplan-vec -vplan-print-after-cfg-merge -vplan-enable-peeling -vplan-print-vec-scenario < %s 2>&1 | FileCheck %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @_Z7ntstorePd(double* %A, i64 %N) local_unnamed_addr #0 {
; CHECK-LABEL:  Updated scenario for VF: 2
; CHECK-NEXT:  Single loop scenario:
; CHECK-NEXT:   MainLoop: unmasked, VF=2
; CHECK-NEXT:   PeelLoop: scalar
; CHECK-NEXT:   Remainders: none
; CHECK-NEXT:  Updated scenario for VF: 4
; CHECK-NEXT:  Single loop scenario:
; CHECK-NEXT:   MainLoop: unmasked, VF=4
; CHECK-NEXT:   PeelLoop: scalar
; CHECK-NEXT:   Remainders: none
; CHECK-NEXT:  Single loop scenario:
; CHECK-NEXT:   MainLoop: unmasked, VF=4
; CHECK-NEXT:   PeelLoop: scalar
; CHECK-NEXT:   Remainders: scalar,
; CHECK-NEXT:  VPlan after CFG merge before CG:
; CHECK-NEXT:  VPlan IR for: _Z7ntstorePd:omp.inner.for.body
; CHECK-NEXT:    [[PEEL_CHECKZ0:peel.checkz[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] pushvf VF=4 UF=1
; CHECK-NEXT:     [DA: Uni] br [[PEEL_CHECKV0:peel.checkv[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[PEEL_CHECKV0]]: # preds: [[PEEL_CHECKZ0]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP0:%.*]] = add i64 3 i64 4
; CHECK-NEXT:     [DA: Uni] i1 [[VP_PEEL_VEC_TC_CHECK:%.*]] = icmp ugt i64 [[VP0]] i64 [[N0:%.*]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP_PEEL_VEC_TC_CHECK]], [[MERGE_BLK0:merge.blk[0-9]+]], [[PEELBLK0:PeelBlk[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[PEELBLK0]]: # preds: [[PEEL_CHECKV0]]
; CHECK-NEXT:       [DA: Uni] pushvf VF=1 UF=1
; CHECK-NEXT:       [DA: Uni] token [[VP_ORIG_LOOP:%.*]] = scalar-peel omp.inner.for.body, NeedsCloning: 1, LiveInMap:
; CHECK-NEXT:         {label [[DIR_OMP_END_SIMD_20:%.*]] in {  br i1 [[EXITCOND_NOT0:%.*]], label [[DIR_OMP_END_SIMD_20]], label [[OMP_INNER_FOR_BODY0:%.*]], !llvm.loop !0} -> label [[BB0:BB[0-9]+]] }
; CHECK-NEXT:         {i64 [[N0]] in {  [[EXITCOND_NOT0]] = icmp eq i64 [[ADD0:%.*]], [[N0]]} -> i64 3 }
; CHECK-NEXT:       [DA: Uni] i64 [[VP_ORIG_LIVEOUT:%.*]] = orig-live-out token [[VP_ORIG_LOOP]], liveout:   [[ADD0]] = add nuw nsw i64 [[DOTOMP_IV_LOCAL_080:%.*]], 1
; CHECK-NEXT:       [DA: Uni] br [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB0]]: # preds: [[PEELBLK0]]
; CHECK-NEXT:       [DA: Uni] popvf
; CHECK-NEXT:       [DA: Uni] br [[MERGE_BLK1:merge.blk[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[MERGE_BLK1]]: # preds: [[BB0]]
; CHECK-NEXT:       [DA: Uni] i64 [[VP1:%.*]] = phi-merge  [ i64 [[VP_ORIG_LIVEOUT]], [[BB0]] ]
; CHECK-NEXT:       [DA: Uni] br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB1]]: # preds: [[MERGE_BLK1]]
; CHECK-NEXT:       [DA: Uni] i64 [[VP2:%.*]] = add i64 3 i64 4
; CHECK-NEXT:       [DA: Uni] i1 [[VP_PEEL_VEC_TC_CHECK_1:%.*]] = icmp ugt i64 [[VP2]] i64 [[N0]]
; CHECK-NEXT:       [DA: Uni] br i1 [[VP_PEEL_VEC_TC_CHECK_1]], [[MERGE_BLK0]], [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB2]]: # preds: [[BB1]]
; CHECK-NEXT:       [DA: Uni] pushvf VF=4 UF=1
; CHECK-NEXT:       [DA: Uni] br [[BB3:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB3]]: # preds: [[BB2]]
; CHECK-NEXT:       [DA: Div] i64 [[VP__OMP_IV_LOCAL_08_IND_INIT:%.*]] = induction-init{add} i64 [[VP1]] i64 1
; CHECK-NEXT:       [DA: Uni] i64 [[VP__OMP_IV_LOCAL_08_IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:       [DA: Uni] i64 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i64 [[N0]] i64 3, UF = 1
; CHECK-NEXT:       [DA: Uni] br [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB4]]: # preds: [[BB3]], [[BB4]]
; CHECK-NEXT:       [DA: Div] i64 [[VP__OMP_IV_LOCAL_08:%.*]] = phi  [ i64 [[VP__OMP_IV_LOCAL_08_IND_INIT]], [[BB3]] ],  [ i64 [[VP3:%.*]], [[BB4]] ]
; CHECK-NEXT:       [DA: Div] i64 [[VP3]] = add i64 [[VP__OMP_IV_LOCAL_08]] i64 [[VP__OMP_IV_LOCAL_08_IND_INIT_STEP]]
; CHECK-NEXT:       [DA: Div] i64 [[VP_ADD:%.*]] = add i64 [[VP__OMP_IV_LOCAL_08]] i64 1
; CHECK-NEXT:       [DA: Div] double [[VP_CONV:%.*]] = sitofp i64 [[VP_ADD]] to double
; CHECK-NEXT:       [DA: Div] double* [[VP_ARRAYIDX:%.*]] = getelementptr inbounds double* [[A0:%.*]] i64 [[VP_ADD]]
; CHECK-NEXT:       [DA: Div] store double [[VP_CONV]] double* [[VP_ARRAYIDX]]
; CHECK-NEXT:       [DA: Uni] i1 [[VP_VECTOR_LOOP_EXITCOND:%.*]] = icmp uge i64 [[VP3]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:       [DA: Uni] br i1 [[VP_VECTOR_LOOP_EXITCOND]], [[BB5:BB[0-9]+]], [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB5]]: # preds: [[BB4]]
; CHECK-NEXT:       [DA: Uni] i64 [[VP__OMP_IV_LOCAL_08_IND_FINAL:%.*]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:       [DA: Uni] br [[BB6:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB6]]: # preds: [[BB5]]
; CHECK-NEXT:       [DA: Uni] popvf
; CHECK-NEXT:       [DA: Uni] br [[BB7:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB7]]: # preds: [[BB6]]
; CHECK-NEXT:       [DA: Uni] i1 [[VP_REMTC_CHECK:%.*]] = icmp eq i64 [[N0]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:       [DA: Uni] br i1 [[VP_REMTC_CHECK]], final.merge, [[MERGE_BLK0]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[MERGE_BLK0]]: # preds: [[BB7]], [[PEEL_CHECKV0]], [[BB1]]
; CHECK-NEXT:       [DA: Uni] i64 [[VP4:%.*]] = phi-merge  [ i64 live-out0, [[BB7]] ],  [ i64 0, [[PEEL_CHECKV0]] ],  [ i64 [[VP1]], [[BB1]] ]
; CHECK-NEXT:       [DA: Uni] br [[REMBLK0:RemBlk[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[REMBLK0]]: # preds: [[MERGE_BLK0]]
; CHECK-NEXT:       [DA: Uni] pushvf VF=1 UF=1
; CHECK-NEXT:       [DA: Uni] token [[VP_ORIG_LOOP_1:%.*]] = scalar-remainder omp.inner.for.body, NeedsCloning: 0, LiveInMap:
; CHECK-NEXT:         {i64 0 in {  [[DOTOMP_IV_LOCAL_080]] = phi i64 [ 0, [[DIR_OMP_SIMD_20:%.*]] ], [ [[ADD0]], [[OMP_INNER_FOR_BODY0]] ]} -> i64 [[VP4]] }
; CHECK-NEXT:         {label [[DIR_OMP_END_SIMD_20]] in {  br i1 [[EXITCOND_NOT0]], label [[DIR_OMP_END_SIMD_20]], label [[OMP_INNER_FOR_BODY0]], !llvm.loop !0} -> label [[BB8:BB[0-9]+]] }
; CHECK-NEXT:       [DA: Uni] i64 [[VP_ORIG_LIVEOUT_1:%.*]] = orig-live-out token [[VP_ORIG_LOOP_1]], liveout:   [[ADD0]] = add nuw nsw i64 [[DOTOMP_IV_LOCAL_080]], 1
; CHECK-NEXT:       [DA: Uni] br [[BB8]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB8]]: # preds: [[REMBLK0]]
; CHECK-NEXT:       [DA: Uni] popvf
; CHECK-NEXT:       [DA: Uni] br final.merge
; CHECK-EMPTY:
; CHECK-NEXT:    final.merge: # preds: [[BB7]], [[BB8]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP5:%.*]] = phi-merge  [ i64 [[VP_ORIG_LIVEOUT_1]], [[BB8]] ],  [ i64 live-out0, [[BB7]] ]
; CHECK-NEXT:     [DA: Uni] popvf
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   no underlying for i64 [[VP__OMP_IV_LOCAL_08_IND_FINAL]]
;
DIR.OMP.SIMD.113:
  %i.linear.iv = alloca i64, align 8
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %DIR.OMP.SIMD.113
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.ALIGNED:PTR_TO_PTR"(double** null, i32 64), "QUAL.OMP.NORMALIZED.IV"(i8* null), "QUAL.OMP.NORMALIZED.UB"(i8* null), "QUAL.OMP.LINEAR:IV"(i64* %i.linear.iv, i32 1) ]
  br label %DIR.OMP.SIMD.2

DIR.OMP.SIMD.2:                                   ; preds = %DIR.OMP.SIMD.1
  call void @llvm.assume(i1 true) [ "align"(double* %A, i64 64) ]
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %DIR.OMP.SIMD.2, %omp.inner.for.body
  %.omp.iv.local.08 = phi i64 [ 0, %DIR.OMP.SIMD.2 ], [ %add, %omp.inner.for.body ]
  %add = add nuw nsw i64 %.omp.iv.local.08, 1
  %conv = sitofp i64 %add to double
  %arrayidx = getelementptr inbounds double, double* %A, i64 %add
  store double %conv, double* %arrayidx, align 8
  %exitcond.not = icmp eq i64 %add, %N
  br i1 %exitcond.not, label %DIR.OMP.END.SIMD.2, label %omp.inner.for.body

DIR.OMP.END.SIMD.2:                               ; preds = %omp.inner.for.body
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.OMP.END.SIMD.3

DIR.OMP.END.SIMD.3:                               ; preds = %DIR.OMP.END.SIMD.2
  ret void
}


declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
declare void @llvm.assume(i1)
attributes #0 = { nounwind uwtable mustprogress "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "frame-pointer"="none" "may-have-openmp-directive"="true" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "pre_loopopt" "stack-protector-buffer-size"="8" "target-cpu"="skylake-avx512" "target-features"="+adx,+aes,+avx,+avx2,+avx512bw,+avx512cd,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+clflushopt,+clwb,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+pku,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves" "unsafe-fp-math"="true" }

