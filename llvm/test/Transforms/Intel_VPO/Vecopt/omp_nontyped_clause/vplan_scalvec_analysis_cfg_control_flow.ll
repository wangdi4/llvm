; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py

; Test to check correctness of the computed SVA results when CFG has slightly
; complex control flow, and is not a single BB. Basically it tests the
; correctness of traversal algorithm.

; REQUIRES: asserts
; RUN: opt -S < %s -vplan-vec -disable-output -vplan-enable-scalvec-analysis -vplan-print-scalvec-results -vplan-force-vf=2 | FileCheck %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind uwtable
define dso_local void @divControlFlow(i32* nocapture %a, i32* nocapture %b, i32* nocapture readonly %c, i32 %N) local_unnamed_addr {
; CHECK-LABEL:  VPlan after ScalVec analysis:
; CHECK-NEXT:  VPlan IR for: divControlFlow:omp.inner.for.body.#{{[0-9]+}}
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] pushvf VF=2 UF=1 (SVAOpBits )
; CHECK-NEXT:     [DA: Div, SVA: (F  )] i64 [[VP0:%.*]] = vector-trip-count i64 [[WIDE_TRIP_COUNT0:%.*]], UF = 1 (SVAOpBits 0->F )
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] i1 [[VP_VEC_TC_CHECK:%.*]] = icmp eq i64 0 i64 [[VP0]] (SVAOpBits 0->F 1->F )
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] br i1 [[VP_VEC_TC_CHECK]], [[MERGE_BLK0:merge.blk[0-9]+]], [[BB1:BB[0-9]+]] (SVAOpBits 0->F 1->F 2->F )
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] pushvf VF=2 UF=1 (SVAOpBits )
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] br [[BB2:BB[0-9]+]] (SVAOpBits 0->F )
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB2]]: # preds: [[BB1]]
; CHECK-NEXT:       [DA: Div, SVA: ( V )] i32* [[VP_I_LPRIV:%.*]] = allocate-priv i32*, OrigAlign = 4 (SVAOpBits )
; CHECK-NEXT:       [DA: Div, SVA: ( V )] i8* [[VP_I_LPRIV_BCAST:%.*]] = bitcast i32* [[VP_I_LPRIV]] (SVAOpBits 0->V ) 
; CHECK-NEXT:       [DA: Div, SVA: ( V )] call i64 4 i8* [[VP_I_LPRIV_BCAST]] void (i64, i8*)* @llvm.lifetime.start.p0i8 [Serial] (SVAOpBits 0->V 1->V 2->F ) 
; CHECK-NEXT:       [DA: Div, SVA: (FV )] i64 [[VP_INDVARS_IV_IND_INIT:%.*]] = induction-init{add} i64 0 i64 1 (SVAOpBits 0->F 1->F )
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] i64 [[VP_INDVARS_IV_IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1 (SVAOpBits 0->F )
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] i64 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i64 [[WIDE_TRIP_COUNT0]], UF = 1 (SVAOpBits 0->F )
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] br [[BB3:BB[0-9]+]] (SVAOpBits 0->F )
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB3]]: # preds: [[BB2]], [[BB4:BB[0-9]+]]
; CHECK-NEXT:       [DA: Div, SVA: (FV )] i64 [[VP_INDVARS_IV:%.*]] = phi  [ i64 [[VP_INDVARS_IV_IND_INIT]], [[BB2]] ],  [ i64 [[VP_INDVARS_IV_NEXT:%.*]], [[BB4]] ] (SVAOpBits 0->FV 1->FV )
; CHECK-NEXT:       [DA: Div, SVA: ( V )] i64 [[VP1:%.*]] = and i64 [[VP_INDVARS_IV]] i64 1 (SVAOpBits 0->V 1->V )
; CHECK-NEXT:       [DA: Div, SVA: ( V )] i1 [[VP_CMP6:%.*]] = icmp eq i64 [[VP1]] i64 0 (SVAOpBits 0->V 1->V )
; CHECK-NEXT:       [DA: Div, SVA: ( V )] i1 [[VP_CMP6_NOT:%.*]] = not i1 [[VP_CMP6]] (SVAOpBits 0->V )
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] br [[BB5:BB[0-9]+]] (SVAOpBits 0->F )
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB5]]: # preds: [[BB3]]
; CHECK-NEXT:       [DA: Div, SVA: ( V )] i1 [[VP2:%.*]] = block-predicate i1 [[VP_CMP6_NOT]] (SVAOpBits 0->V )
; CHECK-NEXT:       [DA: Div, SVA: (F  )] i32* [[VP_ARRAYIDX:%.*]] = getelementptr inbounds i32* [[C0:%.*]] i64 [[VP_INDVARS_IV]] (SVAOpBits 0->F 1->F )
; CHECK-NEXT:       [DA: Div, SVA: ( V )] i32 [[VP3:%.*]] = load i32* [[VP_ARRAYIDX]] (SVAOpBits 0->F )
; CHECK-NEXT:       [DA: Div, SVA: ( V )] i32 [[VP_ADD7:%.*]] = add i32 [[VP3]] i32 5 (SVAOpBits 0->V 1->V )
; CHECK-NEXT:       [DA: Div, SVA: (F  )] i32* [[VP_ARRAYIDX9:%.*]] = getelementptr inbounds i32* [[A0:%.*]] i64 [[VP_INDVARS_IV]] (SVAOpBits 0->F 1->F )
; CHECK-NEXT:       [DA: Div, SVA: ( V )] store i32 [[VP_ADD7]] i32* [[VP_ARRAYIDX9]] (SVAOpBits 0->V 1->F )
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] br [[BB6:BB[0-9]+]] (SVAOpBits 0->F )
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB6]]: # preds: [[BB5]]
; CHECK-NEXT:       [DA: Div, SVA: ( V )] i1 [[VP4:%.*]] = block-predicate i1 [[VP_CMP6]] (SVAOpBits 0->V )
; CHECK-NEXT:       [DA: Div, SVA: (F  )] i32* [[VP_ARRAYIDX11:%.*]] = getelementptr inbounds i32* [[A0]] i64 [[VP_INDVARS_IV]] (SVAOpBits 0->F 1->F )
; CHECK-NEXT:       [DA: Div, SVA: ( V )] i32 [[VP5:%.*]] = load i32* [[VP_ARRAYIDX11]] (SVAOpBits 0->F )
; CHECK-NEXT:       [DA: Div, SVA: ( V )] i32 [[VP_MUL12:%.*]] = mul i32 [[VP5]] i32 5 (SVAOpBits 0->V 1->V )
; CHECK-NEXT:       [DA: Div, SVA: (F  )] i32* [[VP_ARRAYIDX14:%.*]] = getelementptr inbounds i32* [[B0:%.*]] i64 [[VP_INDVARS_IV]] (SVAOpBits 0->F 1->F )
; CHECK-NEXT:       [DA: Div, SVA: ( V )] store i32 [[VP_MUL12]] i32* [[VP_ARRAYIDX14]] (SVAOpBits 0->V 1->F )
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] br [[BB4]] (SVAOpBits 0->F )
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB4]]: # preds: [[BB6]]
; CHECK-NEXT:       [DA: Div, SVA: ( V )] i32 [[VP_BLEND_PHI_BLEND_BB3:%.*]] = blend [ i32 [[VP_ADD7]], i1 [[VP_CMP6_NOT]] ], [ i32 [[VP_MUL12]], i1 [[VP_CMP6]] ] (SVAOpBits 0->V 1->V 2->V 3->V )
; CHECK-NEXT:       [DA: Div, SVA: (FV )] i64 [[VP_INDVARS_IV_NEXT]] = add i64 [[VP_INDVARS_IV]] i64 [[VP_INDVARS_IV_IND_INIT_STEP]] (SVAOpBits 0->FV 1->FV )
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] i1 [[VP_VECTOR_LOOP_EXITCOND:%.*]] = icmp uge i64 [[VP_INDVARS_IV_NEXT]] i64 [[VP_VECTOR_TRIP_COUNT]] (SVAOpBits 0->F 1->F )
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] br i1 [[VP_VECTOR_LOOP_EXITCOND]], [[BB7:BB[0-9]+]], [[BB3]] (SVAOpBits 0->F 1->F 2->F )
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB7]]: # preds: [[BB4]]
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] i64 [[VP_INDVARS_IV_IND_FINAL:%.*]] = induction-final{add} i64 0 i64 1 (SVAOpBits 0->F 1->F )
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] br [[BB8:BB[0-9]+]] (SVAOpBits 0->F )
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB8]]: # preds: [[BB7]]
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] popvf (SVAOpBits )
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] br [[BB9:BB[0-9]+]] (SVAOpBits 0->F )
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB9]]: # preds: [[BB8]]
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] i1 [[VP_REMTC_CHECK:%.*]] = icmp eq i64 [[WIDE_TRIP_COUNT0]] i64 [[VP_VECTOR_TRIP_COUNT]] (SVAOpBits 0->F 1->F )
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] br i1 [[VP_REMTC_CHECK]], final.merge, [[MERGE_BLK0]] (SVAOpBits 0->F 1->F 2->F )
; CHECK-EMPTY:
; CHECK-NEXT:      [[MERGE_BLK0]]: # preds: [[BB9]], [[BB0]]
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] i64 [[VP6:%.*]] = phi-merge  [ i64 live-out0, [[BB9]] ],  [ i64 0, [[BB0]] ] (SVAOpBits 0->F 1->F )
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] br [[REMBLK0:RemBlk[0-9]+]] (SVAOpBits 0->F )
; CHECK-EMPTY:
; CHECK-NEXT:      [[REMBLK0]]: # preds: [[MERGE_BLK0]]
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] pushvf VF=1 UF=1 (SVAOpBits )
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] token [[VP_ORIG_LOOP:%.*]] = scalar-remainder omp.inner.for.body, NeedsCloning: 0, LiveInMap:
; CHECK-NEXT:         {i64 0 in {  [[INDVARS_IV0:%.*]] = phi i64 [ 0, [[DIR_OMP_SIMD_2290:%.*]] ], [ [[INDVARS_IV_NEXT0:%.*]], [[OMP_INNER_FOR_INC0:%.*]] ]} -> i64 [[VP6]] }
; CHECK-NEXT:         {label [[DIR_OMP_END_SIMD_30:%.*]] in {  br i1 [[EXITCOND0:%.*]], label [[DIR_OMP_END_SIMD_30]], label [[OMP_INNER_FOR_BODY0:%.*]], !llvm.loop !0} -> label [[BB10:BB[0-9]+]] } (SVAOpBits 0->F 1->F )
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] i64 [[VP_ORIG_LIVEOUT:%.*]] = orig-live-out token [[VP_ORIG_LOOP]], liveout:   [[INDVARS_IV_NEXT0]] = add nuw nsw i64 [[INDVARS_IV0]], 1 (SVAOpBits 0->F )
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] br [[BB10]] (SVAOpBits 0->F )
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB10]]: # preds: [[REMBLK0]]
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] popvf (SVAOpBits )
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] br final.merge (SVAOpBits 0->F )
; CHECK-EMPTY:
; CHECK-NEXT:    final.merge: # preds: [[BB9]], [[BB10]]
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] i64 [[VP7:%.*]] = phi-merge  [ i64 [[VP_ORIG_LIVEOUT]], [[BB10]] ],  [ i64 live-out0, [[BB9]] ] (SVAOpBits 0->F 1->F )
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] popvf (SVAOpBits )
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] br <External Block> (SVAOpBits )
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   no underlying for i64 [[VP_INDVARS_IV_IND_FINAL]]
;
entry:
  %cmp = icmp sgt i32 %N, 0
  br i1 %cmp, label %DIR.OMP.SIMD.2, label %omp.precond.end

DIR.OMP.SIMD.2:                                   ; preds = %entry
  %i.lpriv = alloca i32, align 4
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %DIR.OMP.SIMD.2
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.NORMALIZED.IV"(i8* null), "QUAL.OMP.NORMALIZED.UB"(i8* null), "QUAL.OMP.LASTPRIVATE"(i32* %i.lpriv) ]
  br label %DIR.OMP.SIMD.229

DIR.OMP.SIMD.229:                                 ; preds = %DIR.OMP.SIMD.1
  %1 = add nsw i32 %N, -1
  %wide.trip.count = sext i32 %N to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.inner.for.inc, %DIR.OMP.SIMD.229
  %indvars.iv = phi i64 [ 0, %DIR.OMP.SIMD.229 ], [ %indvars.iv.next, %omp.inner.for.inc ]
  %2 = and i64 %indvars.iv, 1
  %cmp6 = icmp eq i64 %2, 0
  br i1 %cmp6, label %if.else, label %if.then

if.then:                                          ; preds = %omp.inner.for.body
  %arrayidx = getelementptr inbounds i32, i32* %c, i64 %indvars.iv
  %3 = load i32, i32* %arrayidx, align 4
  %add7 = add nsw i32 %3, 5
  %arrayidx9 = getelementptr inbounds i32, i32* %a, i64 %indvars.iv
  store i32 %add7, i32* %arrayidx9, align 4
  br label %omp.inner.for.inc

if.else:                                          ; preds = %omp.inner.for.body
  %arrayidx11 = getelementptr inbounds i32, i32* %a, i64 %indvars.iv
  %4 = load i32, i32* %arrayidx11, align 4
  %mul12 = mul nsw i32 %4, 5
  %arrayidx14 = getelementptr inbounds i32, i32* %b, i64 %indvars.iv
  store i32 %mul12, i32* %arrayidx14, align 4
  br label %omp.inner.for.inc

omp.inner.for.inc:                                ; preds = %if.else, %if.then
  %blend.phi = phi i32  [ %add7, %if.then ], [ %mul12, %if.else ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond, label %DIR.OMP.END.SIMD.3, label %omp.inner.for.body

DIR.OMP.END.SIMD.3:                               ; preds = %omp.inner.for.inc
  store i32 %1, i32* %i.lpriv, align 4
  br label %DIR.OMP.END.SIMD.330

DIR.OMP.END.SIMD.330:                             ; preds = %DIR.OMP.END.SIMD.3
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %DIR.OMP.END.SIMD.330, %entry
  ret void
}


; Function Attrs: nounwind uwtable
define dso_local void @uniControlFlow(i32* nocapture %a, i32* nocapture %b, i32* nocapture readonly %c, i32 %N, i64 %key) local_unnamed_addr {
; CHECK-LABEL:  VPlan after ScalVec analysis:
; CHECK-NEXT:  VPlan IR for: uniControlFlow:omp.inner.for.body.#{{[0-9]+}}
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] pushvf VF=2 UF=1 (SVAOpBits )
; CHECK-NEXT:     [DA: Div, SVA: (F  )] i64 [[VP0:%.*]] = vector-trip-count i64 [[WIDE_TRIP_COUNT0:%.*]], UF = 1 (SVAOpBits 0->F )
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] i1 [[VP_VEC_TC_CHECK:%.*]] = icmp eq i64 0 i64 [[VP0]] (SVAOpBits 0->F 1->F )
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] br i1 [[VP_VEC_TC_CHECK]], [[MERGE_BLK0:merge.blk[0-9]+]], [[BB1:BB[0-9]+]] (SVAOpBits 0->F 1->F 2->F )
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] pushvf VF=2 UF=1 (SVAOpBits )
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] br [[BB2:BB[0-9]+]] (SVAOpBits 0->F )
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB2]]: # preds: [[BB1]]
; CHECK-NEXT:       [DA: Div, SVA: ( V )] i32* [[VP_I_LPRIV:%.*]] = allocate-priv i32*, OrigAlign = 4 (SVAOpBits )
; CHECK-NEXT:       [DA: Div, SVA: ( V )] i8* [[VP_I_LPRIV_BCAST:%.*]] = bitcast i32* [[VP_I_LPRIV]] (SVAOpBits 0->V ) 
; CHECK-NEXT:       [DA: Div, SVA: ( V )] call i64 4 i8* [[VP_I_LPRIV_BCAST]] void (i64, i8*)* @llvm.lifetime.start.p0i8 [Serial] (SVAOpBits 0->V 1->V 2->F ) 
; CHECK-NEXT:       [DA: Div, SVA: (F  )] i64 [[VP_INDVARS_IV_IND_INIT:%.*]] = induction-init{add} i64 0 i64 1 (SVAOpBits 0->F 1->F )
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] i64 [[VP_INDVARS_IV_IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1 (SVAOpBits 0->F )
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] i64 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i64 [[WIDE_TRIP_COUNT0]], UF = 1 (SVAOpBits 0->F )
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] br [[BB3:BB[0-9]+]] (SVAOpBits 0->F )
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB3]]: # preds: [[BB2]], [[BB4:BB[0-9]+]]
; CHECK-NEXT:       [DA: Div, SVA: (F  )] i64 [[VP_INDVARS_IV:%.*]] = phi  [ i64 [[VP_INDVARS_IV_IND_INIT]], [[BB2]] ],  [ i64 [[VP_INDVARS_IV_NEXT:%.*]], [[BB4]] ] (SVAOpBits 0->F 1->F )
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] i64 [[VP1:%.*]] = and i64 [[KEY0:%.*]] i64 1 (SVAOpBits 0->F 1->F )
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] i1 [[VP_CMP6:%.*]] = icmp eq i64 [[VP1]] i64 0 (SVAOpBits 0->F 1->F )
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] br i1 [[VP_CMP6]], [[BB5:BB[0-9]+]], [[BB6:BB[0-9]+]] (SVAOpBits 0->F 1->F 2->F )
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB6]]: # preds: [[BB3]]
; CHECK-NEXT:         [DA: Div, SVA: (F  )] i32* [[VP_ARRAYIDX:%.*]] = getelementptr inbounds i32* [[C0:%.*]] i64 [[VP_INDVARS_IV]] (SVAOpBits 0->F 1->F )
; CHECK-NEXT:         [DA: Div, SVA: ( V )] i32 [[VP2:%.*]] = load i32* [[VP_ARRAYIDX]] (SVAOpBits 0->F )
; CHECK-NEXT:         [DA: Div, SVA: ( V )] i32 [[VP_ADD7:%.*]] = add i32 [[VP2]] i32 5 (SVAOpBits 0->V 1->V )
; CHECK-NEXT:         [DA: Div, SVA: (F  )] i32* [[VP_ARRAYIDX9:%.*]] = getelementptr inbounds i32* [[A0:%.*]] i64 [[VP_INDVARS_IV]] (SVAOpBits 0->F 1->F )
; CHECK-NEXT:         [DA: Div, SVA: ( V )] store i32 [[VP_ADD7]] i32* [[VP_ARRAYIDX9]] (SVAOpBits 0->V 1->F )
; CHECK-NEXT:         [DA: Uni, SVA: (F  )] br [[BB4]] (SVAOpBits 0->F )
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB5]]: # preds: [[BB3]]
; CHECK-NEXT:         [DA: Div, SVA: (F  )] i32* [[VP_ARRAYIDX11:%.*]] = getelementptr inbounds i32* [[A0]] i64 [[VP_INDVARS_IV]] (SVAOpBits 0->F 1->F )
; CHECK-NEXT:         [DA: Div, SVA: ( V )] i32 [[VP3:%.*]] = load i32* [[VP_ARRAYIDX11]] (SVAOpBits 0->F )
; CHECK-NEXT:         [DA: Div, SVA: ( V )] i32 [[VP_MUL12:%.*]] = mul i32 [[VP3]] i32 5 (SVAOpBits 0->V 1->V )
; CHECK-NEXT:         [DA: Div, SVA: (F  )] i32* [[VP_ARRAYIDX14:%.*]] = getelementptr inbounds i32* [[B0:%.*]] i64 [[VP_INDVARS_IV]] (SVAOpBits 0->F 1->F )
; CHECK-NEXT:         [DA: Div, SVA: ( V )] store i32 [[VP_MUL12]] i32* [[VP_ARRAYIDX14]] (SVAOpBits 0->V 1->F )
; CHECK-NEXT:         [DA: Uni, SVA: (F  )] br [[BB4]] (SVAOpBits 0->F )
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB4]]: # preds: [[BB6]], [[BB5]]
; CHECK-NEXT:       [DA: Div, SVA: ( V )] i32 [[VP_BLEND_PHI:%.*]] = phi  [ i32 [[VP_ADD7]], [[BB6]] ],  [ i32 [[VP_MUL12]], [[BB5]] ] (SVAOpBits 0->V 1->V )
; CHECK-NEXT:       [DA: Div, SVA: (F  )] i64 [[VP_INDVARS_IV_NEXT]] = add i64 [[VP_INDVARS_IV]] i64 [[VP_INDVARS_IV_IND_INIT_STEP]] (SVAOpBits 0->F 1->F )
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] i1 [[VP_VECTOR_LOOP_EXITCOND:%.*]] = icmp uge i64 [[VP_INDVARS_IV_NEXT]] i64 [[VP_VECTOR_TRIP_COUNT]] (SVAOpBits 0->F 1->F )
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] br i1 [[VP_VECTOR_LOOP_EXITCOND]], [[BB7:BB[0-9]+]], [[BB3]] (SVAOpBits 0->F 1->F 2->F )
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB7]]: # preds: [[BB4]]
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] i64 [[VP_INDVARS_IV_IND_FINAL:%.*]] = induction-final{add} i64 0 i64 1 (SVAOpBits 0->F 1->F )
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] br [[BB8:BB[0-9]+]] (SVAOpBits 0->F )
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB8]]: # preds: [[BB7]]
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] popvf (SVAOpBits )
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] br [[BB9:BB[0-9]+]] (SVAOpBits 0->F )
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB9]]: # preds: [[BB8]]
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] i1 [[VP_REMTC_CHECK:%.*]] = icmp eq i64 [[WIDE_TRIP_COUNT0]] i64 [[VP_VECTOR_TRIP_COUNT]] (SVAOpBits 0->F 1->F )
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] br i1 [[VP_REMTC_CHECK]], final.merge, [[MERGE_BLK0]] (SVAOpBits 0->F 1->F 2->F )
; CHECK-EMPTY:
; CHECK-NEXT:      [[MERGE_BLK0]]: # preds: [[BB9]], [[BB0]]
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] i64 [[VP4:%.*]] = phi-merge  [ i64 live-out0, [[BB9]] ],  [ i64 0, [[BB0]] ] (SVAOpBits 0->F 1->F )
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] br [[REMBLK0:RemBlk[0-9]+]] (SVAOpBits 0->F )
; CHECK-EMPTY:
; CHECK-NEXT:      [[REMBLK0]]: # preds: [[MERGE_BLK0]]
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] pushvf VF=1 UF=1 (SVAOpBits )
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] token [[VP_ORIG_LOOP:%.*]] = scalar-remainder omp.inner.for.body, NeedsCloning: 0, LiveInMap:
; CHECK-NEXT:         {i64 0 in {  [[INDVARS_IV0:%.*]] = phi i64 [ 0, [[DIR_OMP_SIMD_2290:%.*]] ], [ [[INDVARS_IV_NEXT0:%.*]], [[OMP_INNER_FOR_INC0:%.*]] ]} -> i64 [[VP4]] }
; CHECK-NEXT:         {label [[DIR_OMP_END_SIMD_30:%.*]] in {  br i1 [[EXITCOND0:%.*]], label [[DIR_OMP_END_SIMD_30]], label [[OMP_INNER_FOR_BODY0:%.*]], !llvm.loop !0} -> label [[BB10:BB[0-9]+]] } (SVAOpBits 0->F 1->F )
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] i64 [[VP_ORIG_LIVEOUT:%.*]] = orig-live-out token [[VP_ORIG_LOOP]], liveout:   [[INDVARS_IV_NEXT0]] = add nuw nsw i64 [[INDVARS_IV0]], 1 (SVAOpBits 0->F )
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] br [[BB10]] (SVAOpBits 0->F )
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB10]]: # preds: [[REMBLK0]]
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] popvf (SVAOpBits )
; CHECK-NEXT:       [DA: Uni, SVA: (F  )] br final.merge (SVAOpBits 0->F )
; CHECK-EMPTY:
; CHECK-NEXT:    final.merge: # preds: [[BB9]], [[BB10]]
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] i64 [[VP5:%.*]] = phi-merge  [ i64 [[VP_ORIG_LIVEOUT]], [[BB10]] ],  [ i64 live-out0, [[BB9]] ] (SVAOpBits 0->F 1->F )
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] popvf (SVAOpBits )
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] br <External Block> (SVAOpBits )
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   no underlying for i64 [[VP_INDVARS_IV_IND_FINAL]]
;
entry:
  %cmp = icmp sgt i32 %N, 0
  br i1 %cmp, label %DIR.OMP.SIMD.2, label %omp.precond.end

DIR.OMP.SIMD.2:                                   ; preds = %entry
  %i.lpriv = alloca i32, align 4
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %DIR.OMP.SIMD.2
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.NORMALIZED.IV"(i8* null), "QUAL.OMP.NORMALIZED.UB"(i8* null), "QUAL.OMP.LASTPRIVATE"(i32* %i.lpriv) ]
  br label %DIR.OMP.SIMD.229

DIR.OMP.SIMD.229:                                 ; preds = %DIR.OMP.SIMD.1
  %1 = add nsw i32 %N, -1
  %wide.trip.count = sext i32 %N to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.inner.for.inc, %DIR.OMP.SIMD.229
  %indvars.iv = phi i64 [ 0, %DIR.OMP.SIMD.229 ], [ %indvars.iv.next, %omp.inner.for.inc ]
  %2 = and i64 %key, 1
  %cmp6 = icmp eq i64 %2, 0
  br i1 %cmp6, label %if.else, label %if.then

if.then:                                          ; preds = %omp.inner.for.body
  %arrayidx = getelementptr inbounds i32, i32* %c, i64 %indvars.iv
  %3 = load i32, i32* %arrayidx, align 4
  %add7 = add nsw i32 %3, 5
  %arrayidx9 = getelementptr inbounds i32, i32* %a, i64 %indvars.iv
  store i32 %add7, i32* %arrayidx9, align 4
  br label %omp.inner.for.inc

if.else:                                          ; preds = %omp.inner.for.body
  %arrayidx11 = getelementptr inbounds i32, i32* %a, i64 %indvars.iv
  %4 = load i32, i32* %arrayidx11, align 4
  %mul12 = mul nsw i32 %4, 5
  %arrayidx14 = getelementptr inbounds i32, i32* %b, i64 %indvars.iv
  store i32 %mul12, i32* %arrayidx14, align 4
  br label %omp.inner.for.inc

omp.inner.for.inc:                                ; preds = %if.else, %if.then
  %blend.phi = phi i32  [ %add7, %if.then ], [ %mul12, %if.else ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond, label %DIR.OMP.END.SIMD.3, label %omp.inner.for.body

DIR.OMP.END.SIMD.3:                               ; preds = %omp.inner.for.inc
  store i32 %1, i32* %i.lpriv, align 4
  br label %DIR.OMP.END.SIMD.330

DIR.OMP.END.SIMD.330:                             ; preds = %DIR.OMP.END.SIMD.3
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %DIR.OMP.END.SIMD.330, %entry
  ret void
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry()

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token)

