; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; struct str {
;   int a;
;   str() {}
; };
;
; int foo()
; {
;    str x;
; #pragma omp simd lastprivate(x)
;   for (int i = 0; i < 10000; ++i) {
;     x.a = i;
;   }
;  return x.a;
; }

; RUN: opt -opaque-pointers=0 -S -passes=vplan-vec -vplan-force-vf=2 -vplan-print-after-create-masked-vplan -vplan-enable-masked-variant -vplan-vec-scenario="n0;v2;m2" -vplan-print-after-final-cond-transform -disable-output < %s 2>&1 | FileCheck %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.str = type { i32 }

; Function Attrs: nounwind uwtable
define dso_local i32 @_Z3foov() local_unnamed_addr {
; CHECK-LABEL:  VPlan after emitting masked variant:
; CHECK:    new_latch: # preds: [[BB3:BB[0-9]+]], [[BB2:BB[0-9]+]]
; CHECK-NEXT:     [DA: Div] i32 [[VP_ADD1:%.*]] = add i32 [[VP__OMP_IV_LOCAL_010:%.*]] i32 [[VP4:%.*]]
; CHECK-NEXT:     [DA: Div] i1 [[VP6:%.*]] = icmp ult i32 [[VP_ADD1]] i32 [[VP_NORM_UB:%.*]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP7:%.*]] = all-zero-check i1 [[VP6]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP7]], [[BB4:BB[0-9]+]], [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: new_latch
; CHECK-NEXT:     [DA: Uni] i32 [[VP8:%.*]] = induction-final{add} i32 0 i32 1
; CHECK-NEXT:     [DA: Uni] private-last-value-nonpod-masked %struct.str* [[VP0:%.*]] %struct.str* [[X_LPRIV0:%.*]] i1 [[VP5:%.*]]
; CHECK-NEXT:     [DA: Div] call %struct.str* [[VP0]] void (%struct.str*)* @_ZTS3str.omp.destr
; CHECK-NEXT:     [DA: Div] i8* [[VP9:%.*]] = bitcast %struct.str* [[VP0]]
; CHECK-NEXT:     [DA: Div] call i64 4 i8* [[VP9]] void (i64, i8*)* @llvm.lifetime.end.p0i8
; CHECK-NEXT:     [DA: Uni] br [[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]: # preds: [[BB4]]
; CHECK-NEXT:     [DA: Uni] br <External Block>

; CHECK-LABEL:  VPlan after private finalization instructions transformation:
; CHECK:      new_latch: # preds: [[BB3]]
; CHECK-NEXT:       [DA: Div] i32 [[VP_ADD1]] = add i32 [[VP__OMP_IV_LOCAL_010]] i32 [[VP4]]
; CHECK-NEXT:       [DA: Div] i1 [[VP6]] = icmp ult i32 [[VP_ADD1]] i32 [[VP_NORM_UB]]
; CHECK-NEXT:       [DA: Uni] i1 [[VP7]] = all-zero-check i1 [[VP6]]
; CHECK-NEXT:       [DA: Uni] br i1 [[VP7]], [[BB4]], [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB4]]: # preds: new_latch
; CHECK-NEXT:       [DA: Uni] i32 [[VP8]] = induction-final{add} i32 0 i32 1
; CHECK-NEXT:       [DA: Uni] i1 [[VP16:%.*]] = all-zero-check i1 [[VP5]]
; CHECK-NEXT:       [DA: Uni] br i1 [[VP16]], [[BB12:BB[0-9]+]], [[BB13:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB13]]: # preds: [[BB4]]
; CHECK-NEXT:         [DA: Uni] private-last-value-nonpod-masked %struct.str* [[VP0]] %struct.str* [[X_LPRIV0]] i1 [[VP5]]
; CHECK-NEXT:         [DA: Div] call %struct.str* [[VP0]] void (%struct.str*)* @_ZTS3str.omp.destr
; CHECK-NEXT:         [DA: Uni] br [[BB12]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB12]]: # preds: [[BB13]], [[BB4]]
; CHECK-NEXT:       [DA: Div] i8* [[VP9]] = bitcast %struct.str* [[VP0]]
; CHECK-NEXT:       [DA: Div] call i64 4 i8* [[VP9]] void (i64, i8*)* @llvm.lifetime.end.p0i8
; CHECK-NEXT:       [DA: Uni] br [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB5]]: # preds: [[BB12]]
; CHECK-NEXT:       [DA: Uni] popvf
; CHECK-NEXT:       [DA: Uni] br final.merge
; CHECK-EMPTY:
; CHECK-NEXT:    final.merge: # preds: [[BB11:BB[0-9]+]], [[BB5]]
; CHECK-NEXT:     [DA: Uni] i32 [[VP17:%.*]] = phi-merge  [ i32 [[VP8]], [[BB5]] ],  [ i32 live-out0, [[BB11]] ]
; CHECK-NEXT:     [DA: Uni] popvf
; CHECK-NEXT:     [DA: Uni] br <External Block>
;
DIR.OMP.SIMD.115:
  %x.lpriv = alloca %struct.str, align 4
  %i.linear.iv = alloca i32, align 4
  %x = alloca %struct.str, align 4
  %0 = bitcast %struct.str* %x to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0)
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %DIR.OMP.SIMD.115
  %1 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.LASTPRIVATE:NONPOD"(%struct.str* %x.lpriv, %struct.str* (%struct.str*)* @_ZTS3str.omp.def_constr, void (%struct.str*, %struct.str*)* @_ZTS3str.omp.copy_assign, void (%struct.str*)* @_ZTS3str.omp.destr), "QUAL.OMP.NORMALIZED.IV"(i8* null), "QUAL.OMP.NORMALIZED.UB"(i8* null), "QUAL.OMP.LINEAR:IV"(i32* %i.linear.iv, i32 1) ]
  br label %DIR.OMP.SIMD.2

DIR.OMP.SIMD.2:                                   ; preds = %DIR.OMP.SIMD.1
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %DIR.OMP.SIMD.2, %omp.inner.for.body
  %.omp.iv.local.010 = phi i32 [ 0, %DIR.OMP.SIMD.2 ], [ %add1, %omp.inner.for.body ]
  %add1 = add nuw nsw i32 %.omp.iv.local.010, 1
  %exitcond.not = icmp eq i32 %add1, 10000
  br i1 %exitcond.not, label %DIR.OMP.END.SIMD.216, label %omp.inner.for.body

DIR.OMP.END.SIMD.216:                             ; preds = %omp.inner.for.body
  %a = getelementptr inbounds %struct.str, %struct.str* %x.lpriv, i64 0, i32 0
  store i32 9999, i32* %a, align 4
  br label %DIR.OMP.END.SIMD.3

DIR.OMP.END.SIMD.3:                               ; preds = %DIR.OMP.END.SIMD.216
  call void @llvm.directive.region.exit(token %1) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.OMP.END.SIMD.4

DIR.OMP.END.SIMD.4:                               ; preds = %DIR.OMP.END.SIMD.3
  call void @_ZTS3str.omp.copy_assign(%struct.str* nonnull %x, %struct.str* nonnull %x.lpriv)
  %a2 = getelementptr inbounds %struct.str, %struct.str* %x, i64 0, i32 0
  %2 = load i32, i32* %a2, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0)
  ret i32 %2
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn mustprogress
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture)

; Function Attrs: nounwind
declare token @llvm.directive.region.entry()

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token)

; Function Attrs: nofree norecurse nosync nounwind readnone uwtable willreturn mustprogress
declare %struct.str* @_ZTS3str.omp.def_constr(%struct.str* readnone returned %0) section ".text.startup"

; Function Attrs: nofree norecurse nosync nounwind uwtable willreturn mustprogress
declare void @_ZTS3str.omp.copy_assign(%struct.str* nocapture %0, %struct.str* nocapture readonly %1)


; Function Attrs: nofree norecurse nosync nounwind readnone uwtable willreturn mustprogress
declare void @_ZTS3str.omp.destr(%struct.str* nocapture %0) section ".text.startup"

; Function Attrs: argmemonly nofree nosync nounwind willreturn mustprogress
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture)
