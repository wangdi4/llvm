; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt  -passes='hir-ssa-deconstruction,hir-vec-dir-insert,hir-vplan-vec,print<hir>' -disable-output -vplan-force-vf=4 -vplan-enable-hir-private-arrays %s 2>&1 | FileCheck %s

target triple = "x86_64-unknown-linux-gnu"

define i16 @foo(i16 %a, i32 %n) {
;
; CHECK:       Function: foo
; CHECK:  BEGIN REGION { modified }
; CHECK:           %priv.mem.bc = &(([12 x i16]*)(%priv.mem)[0])
; CHECK:           + DO i1 = 0, {{.*}}, 4   <DO_LOOP> <simd-vectorized> <nounroll> <novectorize>
; CHECK-NEXT:      |   %nsbgepcopy = &((<4 x [12 x i16]*>)(%priv.mem.bc)[<i32 0, i32 1, i32 2, i32 3>])
; CHECK-NEXT:      |   (<4 x i16>*)(%nsbgepcopy)[i1 + <i64 0, i64 1, i64 2, i64 3>][3] = %a
; CHECK-NEXT:      + END LOOP
; CHECK:           @llvm.memcpy.p0a12i16.p0a12i16.i64(&((%b3.i.lpriv)[0]),  &(([12 x i16]*)(%priv.mem)[0][3]),  24,  0)

; CHECK:           + DO i1 = {{.*}}, %n, 1   <DO_LOOP>
; CHECK-NEXT:      |   (%b3.i.lpriv)[i1][3] = %a
; CHECK-NEXT:      + END LOOP

; CHECK:           %res = (%b3.i.lpriv)[0][1]
; CHECK-NEXT:      ret %res
; CHECK-NEXT:  END REGION
;
omp.inner.for.body.i.lr.ph:
  %b3.i.lpriv = alloca [12 x i16], align 1
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.LASTPRIVATE"([12 x i16]* %b3.i.lpriv) ]
  br label %omp.inner.for.body.i

omp.inner.for.body.i:
  %.omp.iv.i.local.03 = phi i32 [ %add5.i, %omp.body.continue.i ], [ 0, %DIR.OMP.SIMD.1 ]

  %arrayidx.i = getelementptr inbounds [12 x i16], [12 x i16]* %b3.i.lpriv, i32 %.omp.iv.i.local.03, i32 3
  store i16 %a, i16* %arrayidx.i

  br label %omp.body.continue.i

omp.body.continue.i:
  %add5.i = add nuw nsw i32 %.omp.iv.i.local.03, 1
  %exitcond.not = icmp eq i32 %.omp.iv.i.local.03, %n
  br i1 %exitcond.not, label %omp.inner.for.cond.i.DIR.OMP.END.SIMD.5.i.loopexit_crit_edge, label %omp.inner.for.body.i

omp.inner.for.cond.i.DIR.OMP.END.SIMD.5.i.loopexit_crit_edge:
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]

  %idx = getelementptr inbounds [12 x i16], [12 x i16]* %b3.i.lpriv, i64 0, i64 1
  %res = load i16, i16* %idx

  ret i16 %res
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
