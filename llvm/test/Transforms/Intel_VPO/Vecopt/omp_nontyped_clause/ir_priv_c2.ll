; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -enable-new-pm=0 -vplan-vec -vplan-force-vf=4 -vplan-enable-all-liveouts -vplan-print-after-vpentity-instrs -vplan-entities-dump -disable-vplan-codegen -S < %s 2>&1 | FileCheck %s
; RUN: opt -passes='vplan-vec' -vplan-force-vf=4 -vplan-enable-all-liveouts -vplan-print-after-vpentity-instrs -vplan-entities-dump -disable-vplan-codegen -S < %s 2>&1 | FileCheck %s

; inner loop with break
define dso_local i64 @_Z3fooPlS_() local_unnamed_addr {
; CHECK-LABEL:  VPlan after insertion of VPEntities instructions:
; CHECK-NEXT:  VPlan IR for: _Z3fooPlS_:omp.inner.for.body.#{{[0-9]+}}
; CHECK-NEXT:  Loop Entities of the loop with header [[BB0:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:  Induction list
; CHECK-NEXT:   IntInduction(+) Start: i64 0 Step: i64 1 StartVal: i64 0 EndVal: i64 100 BinOp: i64 [[VP_ADD9:%.*]] = add i64 [[VP__OMP_IV_LOCAL_023:%.*]] i64 [[VP__OMP_IV_LOCAL_023_IND_INIT_STEP:%.*]]
; CHECK-NEXT:    Linked values: i64 [[VP__OMP_IV_LOCAL_023]], i64 [[VP_ADD9]], i64 [[VP__OMP_IV_LOCAL_023_IND_INIT:%.*]], i64 [[VP__OMP_IV_LOCAL_023_IND_INIT_STEP]], i64 [[VP__OMP_IV_LOCAL_023_IND_FINAL:%.*]],
; CHECK:       Private list
; CHECK-EMPTY:
; CHECK-NEXT:    Exit instr: i64 [[VP0:%.*]] = phi  [ i64 [[VP1:%.*]], [[BB1:BB[0-9]+]] ],  [ i64 [[VP2:%.*]], [[BB2:BB[0-9]+]] ]
; CHECK-NEXT:    Linked values: i64 [[VP0]], i64* [[RET_LPRIV0:%.*]], i64 [[VP2]], i64* [[VP_RET_LPRIV:%.*]], i64 [[VP__PRIV_FINAL:%.*]],
; CHECK-NEXT:   Memory: i64* [[RET_LPRIV0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3:BB[0-9]+]]: # preds:
; CHECK-NEXT:     br [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: [[BB3]]
; CHECK-NEXT:     i64* [[VP_RET_LPRIV]] = allocate-priv i64*, OrigAlign = 8
; CHECK-NEXT:     i8* [[VP_RET_LPRIV_BCAST:%.*]] = bitcast i64* [[VP_RET_LPRIV]]
; CHECK-NEXT:     call i64 8 i8* [[VP_RET_LPRIV_BCAST]] void (i64, i8*)* @llvm.lifetime.start.p0i8
; CHECK-NEXT:     i64 [[VP__OMP_IV_LOCAL_023_IND_INIT]] = induction-init{add} i64 0 i64 1
; CHECK-NEXT:     i64 [[VP__OMP_IV_LOCAL_023_IND_INIT_STEP]] = induction-init-step{add} i64 1
; CHECK-NEXT:     br [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB0]]: # preds: [[BB4]], [[BB5:BB[0-9]+]]
; CHECK-NEXT:     i64 [[VP2]] = phi  [ i64 [[RET_LPRIV_PROMOTED0:%.*]], [[BB4]] ],  [ i64 [[VP0]], [[BB5]] ]
; CHECK-NEXT:     i64 [[VP_PRIV_IDX_HDR:%.*]] = phi  [ i64 -1, [[BB4]] ],  [ i64 [[VP_PRIV_IDX_BB7:%.*]], [[BB5]] ]
; CHECK-NEXT:     i64 [[VP__OMP_IV_LOCAL_023]] = phi  [ i64 [[VP__OMP_IV_LOCAL_023_IND_INIT]], [[BB4]] ],  [ i64 [[VP_ADD9]], [[BB5]] ]
; CHECK-NEXT:     i64 [[VP__PRE:%.*]] = add i64 [[VP__OMP_IV_LOCAL_023]] i64 1
; CHECK-NEXT:     br [[BB6:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]]: # preds: [[BB0]], [[BB7:BB[0-9]+]]
; CHECK-NEXT:     i64 [[VP3:%.*]] = phi  [ i64 [[VP__PRE]], [[BB0]] ],  [ i64 0, [[BB7]] ]
; CHECK-NEXT:     i64 [[VP_INNER_IV:%.*]] = phi  [ i64 0, [[BB0]] ],  [ i64 [[VP_INC:%.*]], [[BB7]] ]
; CHECK-NEXT:     i1 [[VP_TOBOOL:%.*]] = icmp eq i64 [[VP_INNER_IV]] i64 0
; CHECK-NEXT:     br i1 [[VP_TOBOOL]], [[BB7]], [[BB8:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB8]]: # preds: [[BB6]]
; CHECK-NEXT:       i1 [[VP_TOBOOL3:%.*]] = icmp eq i64 [[VP_INNER_IV]] i64 0
; CHECK-NEXT:       br i1 [[VP_TOBOOL3]], [[BB7]], [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB1]]: # preds: [[BB8]]
; CHECK-NEXT:       i64 [[VP_INNER_IV_LCSSA:%.*]] = phi  [ i64 [[VP_INNER_IV]], [[BB8]] ]
; CHECK-NEXT:       i64 [[VP1]] = add i64 [[VP_INNER_IV_LCSSA]] i64 1
; CHECK-NEXT:       br [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB7]]: # preds: [[BB6]], [[BB8]]
; CHECK-NEXT:       i64 [[VP_INC]] = add i64 [[VP_INNER_IV]] i64 1
; CHECK-NEXT:       i1 [[VP_EXITCOND:%.*]] = icmp eq i64 [[VP_INC]] i64 100
; CHECK-NEXT:       br i1 [[VP_EXITCOND]], [[BB2]], [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB2]]: # preds: [[BB7]]
; CHECK-NEXT:       br [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]: # preds: [[BB1]], [[BB2]]
; CHECK-NEXT:     i64 [[VP_PRIV_IDX_BB7]] = phi  [ i64 [[VP__OMP_IV_LOCAL_023]], [[BB1]] ],  [ i64 [[VP_PRIV_IDX_HDR]], [[BB2]] ]
; CHECK-NEXT:     i64 [[VP0]] = phi  [ i64 [[VP1]], [[BB1]] ],  [ i64 [[VP2]], [[BB2]] ]
; CHECK-NEXT:     i64 [[VP_ADD9]] = add i64 [[VP__OMP_IV_LOCAL_023]] i64 [[VP__OMP_IV_LOCAL_023_IND_INIT_STEP]]
; CHECK-NEXT:     i1 [[VP_EXITCOND32:%.*]] = icmp eq i64 [[VP_ADD9]] i64 100
; CHECK-NEXT:     br i1 [[VP_EXITCOND32]], [[BB9:BB[0-9]+]], [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB9]]: # preds: [[BB5]]
; CHECK-NEXT:     i64 [[VP__OMP_IV_LOCAL_023_IND_FINAL]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:     i64 [[VP__PRIV_FINAL]] = private-final-c i64 [[VP0]] i64 [[VP_PRIV_IDX_BB7]] i64 [[RET_LPRIV_PROMOTED0]]
; CHECK-NEXT:     i8* [[VP_RET_LPRIV_BCAST1:%.*]] = bitcast i64* [[VP_RET_LPRIV]]
; CHECK-NEXT:     call i64 8 i8* [[VP_RET_LPRIV_BCAST1]] void (i64, i8*)* @llvm.lifetime.end.p0i8
; CHECK-NEXT:     br [[BB10:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB10]]: # preds: [[BB9]]
; CHECK-NEXT:     br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0     [[DOTLCSSA0:%.*]] = phi i64 [ [[TMP4:%.*]], [[CLEANUP0:%.*]] ] i64 [[VP__PRIV_FINAL]] -> i64 [[TMP4]]
;
omp.inner.for.body.lr.ph:
  %ret.lpriv = alloca i64, align 8
  store i64 0, i64* %ret.lpriv, align 8
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %omp.inner.for.body.lr.ph
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.LASTPRIVATE:CONDITIONAL"(i64* %ret.lpriv), "QUAL.OMP.NORMALIZED.IV"(i8* null), "QUAL.OMP.NORMALIZED.UB"(i8* null) ]
  br label %DIR.OMP.SIMD.2

DIR.OMP.SIMD.2:                                   ; preds = %DIR.OMP.SIMD.1
  %ret.lpriv.promoted = load i64, i64* %ret.lpriv, align 8
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %cleanup, %DIR.OMP.SIMD.2
  %1 = phi i64 [ %ret.lpriv.promoted, %DIR.OMP.SIMD.2 ], [ %4, %cleanup ]
  %.omp.iv.local.023 = phi i64 [ 0, %DIR.OMP.SIMD.2 ], [ %add9, %cleanup ]
  %.pre = add i64 %.omp.iv.local.023, 1
  br label %for.body

for.body:                                         ; preds = %for.inc, %omp.inner.for.body
  %2 = phi i64 [ %.pre, %omp.inner.for.body ], [ 0, %for.inc ]
  %inner_iv = phi i64 [ 0, %omp.inner.for.body ], [ %inc, %for.inc ]
  %tobool = icmp eq i64 %inner_iv, 0
  br i1 %tobool, label %for.inc, label %if.then

if.then:                                          ; preds = %for.body
  %tobool3 = icmp eq i64 %inner_iv, 0
  br i1 %tobool3, label %for.inc, label %if.then4

if.then4:                                         ; preds = %if.then
  %inner_iv.lcssa = phi i64 [ %inner_iv, %if.then ]
  %3 = add i64 %inner_iv.lcssa, 1
  br label %cleanup

for.inc:                                          ; preds = %if.then, %for.body
  %inc = add nuw nsw i64 %inner_iv, 1
  %exitcond = icmp eq i64 %inc, 100
  br i1 %exitcond, label %cleanup.loopexit, label %for.body

cleanup.loopexit:                                 ; preds = %for.inc
  br label %cleanup

cleanup:                                          ; preds = %cleanup.loopexit, %if.then4
  %4 = phi i64 [ %3, %if.then4 ], [ %1, %cleanup.loopexit ]
  %add9 = add nuw nsw i64 %.omp.iv.local.023, 1
  %exitcond32 = icmp eq i64 %add9, 100
  br i1 %exitcond32, label %DIR.OMP.END.SIMD.4, label %omp.inner.for.body

DIR.OMP.END.SIMD.4:                               ; preds = %cleanup
  %.lcssa = phi i64 [ %4, %cleanup ]
  br label %DIR.OMP.END.SIMD.3

DIR.OMP.END.SIMD.3:                               ; preds = %DIR.OMP.END.SIMD.4
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.OMP.END.SIMD.433

DIR.OMP.END.SIMD.433:                             ; preds = %DIR.OMP.END.SIMD.3
  ret i64 %.lcssa
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
