; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -opaque-pointers=0 %s -disable-output -passes=vplan-vec -vplan-force-vf=4 -vplan-enable-all-liveouts \
; RUN: -vplan-print-after-plain-cfg -debug-only=vploop-analysis -disable-vplan-codegen 2>&1 | FileCheck %s

; inner loop w/o break with top test
define dso_local i64 @_Z3fooPlS_() local_unnamed_addr #0 {
; CHECK-LABEL:  VPlan after importing plain CFG:
; CHECK-NEXT:  VPlan IR for: _Z3fooPlS_:omp.inner.for.body.#{{[0-9]+}}
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], [[BB3:BB[0-9]+]]
; CHECK-NEXT:     i64 [[VP__LCSSA30:%.*]] = phi  [ i64 [[RET_LPRIV_PROMOTED290:%.*]], [[BB1]] ],  [ i64 [[VP__LCSSA:%.*]], [[BB3]] ]
; CHECK-NEXT:     i64 [[VP__OMP_IV_LOCAL_020:%.*]] = phi  [ i64 0, [[BB1]] ],  [ i64 [[VP_ADD9:%.*]], [[BB3]] ]
; CHECK-NEXT:     i64 [[VP__PRE:%.*]] = add i64 [[VP__OMP_IV_LOCAL_020]] i64 1
; CHECK-NEXT:     br [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: [[BB2]], [[BB5:BB[0-9]+]]
; CHECK-NEXT:     i64 [[VP0:%.*]] = phi  [ i64 [[VP__PRE]], [[BB2]] ],  [ i64 0, [[BB5]] ]
; CHECK-NEXT:     i64 [[VP1:%.*]] = phi  [ i64 [[VP__LCSSA30]], [[BB2]] ],  [ i64 [[VP2:%.*]], [[BB5]] ]
; CHECK-NEXT:     i64 [[VP_INNER_IV:%.*]] = phi  [ i64 0, [[BB2]] ],  [ i64 [[VP_INC:%.*]], [[BB5]] ]
; CHECK-NEXT:     i1 [[VP_TOBOOL:%.*]] = icmp eq i64 [[VP0]] i64 0
; CHECK-NEXT:     br i1 [[VP_TOBOOL]], [[BB5]], [[BB6:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB6]]: # preds: [[BB4]]
; CHECK-NEXT:       i1 [[VP_TOBOOL3:%.*]] = icmp eq i64 [[VP1]] i64 0
; CHECK-NEXT:       br i1 [[VP_TOBOOL3]], [[BB7:BB[0-9]+]], [[BB8:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB8]]: # preds: [[BB6]]
; CHECK-NEXT:         i64 [[VP3:%.*]] = add i64 [[VP1]] i64 10
; CHECK-NEXT:         br [[BB7]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB7]]: # preds: [[BB6]], [[BB8]]
; CHECK-NEXT:       i64 [[VP4:%.*]] = phi  [ i64 [[VP3]], [[BB8]] ],  [ i64 [[VP1]], [[BB6]] ]
; CHECK-NEXT:       br [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]: # preds: [[BB4]], [[BB7]]
; CHECK-NEXT:     i64 [[VP2]] = phi  [ i64 [[VP1]], [[BB4]] ],  [ i64 [[VP4]], [[BB7]] ]
; CHECK-NEXT:     i64 [[VP_INC]] = add i64 [[VP_INNER_IV]] i64 1
; CHECK-NEXT:     i1 [[VP_EXITCOND:%.*]] = icmp eq i64 [[VP_INC]] i64 100
; CHECK-NEXT:     br i1 [[VP_EXITCOND]], [[BB3]], [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: [[BB5]]
; CHECK-NEXT:     i64 [[VP__LCSSA]] = phi  [ i64 [[VP2]], [[BB5]] ]
; CHECK-NEXT:     i64 [[VP_ADD9]] = add i64 [[VP__OMP_IV_LOCAL_020]] i64 1
; CHECK-NEXT:     i1 [[VP_EXITCOND31:%.*]] = icmp eq i64 [[VP_ADD9]] i64 100
; CHECK-NEXT:     br i1 [[VP_EXITCOND31]], [[BB9:BB[0-9]+]], [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB9]]: # preds: [[BB3]]
; CHECK-NEXT:     br [[BB10:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB10]]: # preds: [[BB9]]
; CHECK-NEXT:     br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0     [[DOTLCSSA_LCSSA0:%.*]] = phi i64 [ [[DOTLCSSA0:%.*]], [[FOR_COND_CLEANUP0:%.*]] ] i64 [[VP__LCSSA]] -> i64 [[DOTLCSSA0]]

; CHECK:       Incorrect use of private:
; CHECK-NEXT:  i64 [[VP3]] = add i64 [[VP1]] i64 10
;
omp.inner.for.body.lr.ph:
  %ret.lpriv = alloca i64, align 8
  store i64 0, i64* %ret.lpriv, align 8
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %omp.inner.for.body.lr.ph
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.LASTPRIVATE:CONDITIONAL"(i64* %ret.lpriv), "QUAL.OMP.NORMALIZED.IV"(i8* null), "QUAL.OMP.NORMALIZED.UB"(i8* null) ]
  br label %DIR.OMP.SIMD.2

DIR.OMP.SIMD.2:                                   ; preds = %DIR.OMP.SIMD.1
  %ret.lpriv.promoted29 = load i64, i64* %ret.lpriv, align 8
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %DIR.OMP.SIMD.2, %for.cond.cleanup
  %.lcssa30 = phi i64 [ %ret.lpriv.promoted29, %DIR.OMP.SIMD.2 ], [ %.lcssa, %for.cond.cleanup ]
  %.omp.iv.local.020 = phi i64 [ 0, %DIR.OMP.SIMD.2 ], [ %add9, %for.cond.cleanup ]
  %.pre = add i64 %.omp.iv.local.020, 1
  br label %for.body

for.body:                                         ; preds = %omp.inner.for.body, %for.inc
  %1 = phi i64 [ %.pre, %omp.inner.for.body ], [ 0, %for.inc ]
  %2 = phi i64 [ %.lcssa30, %omp.inner.for.body ], [ %5, %for.inc ]
  %inner.iv = phi i64 [ 0, %omp.inner.for.body ], [ %inc, %for.inc ]
  %tobool = icmp eq i64 %1, 0
  br i1 %tobool, label %for.inc, label %if.then

if.then:                                          ; preds = %for.body
  %tobool3 = icmp eq i64 %2, 0
  br i1 %tobool3, label %if.end, label %if.then4

if.then4:                                         ; preds = %if.then
  %3 = add i64 %2, 10
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.then
  %4 = phi i64 [ %3, %if.then4 ], [ %2, %if.then ]
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.end
  %5 = phi i64 [ %2, %for.body ], [ %4, %if.end ]
  %inc = add nuw nsw i64 %inner.iv, 1
  %exitcond = icmp eq i64 %inc, 100
  br i1 %exitcond, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.inc
  %.lcssa = phi i64 [ %5, %for.inc ]
  %add9 = add nuw nsw i64 %.omp.iv.local.020, 1
  %exitcond31 = icmp eq i64 %add9, 100
  br i1 %exitcond31, label %DIR.OMP.END.SIMD.4, label %omp.inner.for.body

DIR.OMP.END.SIMD.4:                               ; preds = %for.cond.cleanup
  %.lcssa.lcssa = phi i64 [ %.lcssa, %for.cond.cleanup ]
  br label %DIR.OMP.END.SIMD.3

DIR.OMP.END.SIMD.3:                               ; preds = %DIR.OMP.END.SIMD.4
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.OMP.END.SIMD.432

DIR.OMP.END.SIMD.432:                             ; preds = %DIR.OMP.END.SIMD.3
  ret i64 %.lcssa.lcssa
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
