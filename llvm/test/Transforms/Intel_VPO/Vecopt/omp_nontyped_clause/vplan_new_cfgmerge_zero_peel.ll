; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
;RUN: opt -disable-output -passes=vplan-vec -vplan-print-after-cfg-merge -vplan-enable-peeling -vplan-print-vec-scenario < %s 2>&1 | FileCheck %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @_Z7ntstorePd(double* %A) {
; CHECK-LABEL:  Updated scenario for VF: 2
; CHECK-NEXT:  Single loop scenario:
; CHECK-NEXT:   MainLoop: unmasked, VF=2
; CHECK-NEXT:   PeelLoop: none
; CHECK-NEXT:   Remainders: none
; CHECK-NEXT:  Single loop scenario:
; CHECK-NEXT:   MainLoop: unmasked, VF=2
; CHECK-NEXT:   PeelLoop: none
; CHECK-NEXT:   Remainders: none
; CHECK-NEXT:  VPlan after CFG merge before CG:
; CHECK-NEXT:  VPlan IR for: _Z7ntstorePd:omp.inner.for.body
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] pushvf VF=2 UF=1
; CHECK-NEXT:     [DA: Uni] pushvf VF=2 UF=1
; CHECK-NEXT:     [DA: Uni] br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     [DA: Div] i64 [[VP__OMP_IV_LOCAL_08_IND_INIT:%.*]] = induction-init{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Uni] i64 [[VP__OMP_IV_LOCAL_08_IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:     [DA: Uni] i64 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i64 131072, UF = 1
; CHECK-NEXT:     [DA: Uni] br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], [[BB2]]
; CHECK-NEXT:     [DA: Div] i64 [[VP__OMP_IV_LOCAL_08:%.*]] = phi  [ i64 [[VP__OMP_IV_LOCAL_08_IND_INIT]], [[BB1]] ],  [ i64 [[VP_ADD1:%.*]], [[BB2]] ]
; CHECK-NEXT:     [DA: Div] double [[VP_CONV:%.*]] = sitofp i64 [[VP__OMP_IV_LOCAL_08]] to double
; CHECK-NEXT:     [DA: Div] double* [[VP_ARRAYIDX:%.*]] = getelementptr inbounds double* [[A0:%.*]] i64 [[VP__OMP_IV_LOCAL_08]]
; CHECK-NEXT:     [DA: Div] store double [[VP_CONV]] double* [[VP_ARRAYIDX]]
; CHECK-NEXT:     [DA: Div] i64 [[VP_ADD1]] = add i64 [[VP__OMP_IV_LOCAL_08]] i64 [[VP__OMP_IV_LOCAL_08_IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP_VECTOR_LOOP_EXITCOND:%.*]] = icmp uge i64 [[VP_ADD1]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP_VECTOR_LOOP_EXITCOND]], [[BB3:BB[0-9]+]], [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: [[BB2]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP__OMP_IV_LOCAL_08_IND_FINAL:%.*]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Uni] br [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: [[BB3]]
; CHECK-NEXT:     [DA: Uni] popvf
; CHECK-NEXT:     [DA: Uni] br final.merge
; CHECK-EMPTY:
; CHECK-NEXT:    final.merge: # preds: [[BB4]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP0:%.*]] = phi-merge  [ i64 live-out0, [[BB4]] ]
; CHECK-NEXT:     [DA: Uni] popvf
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   no underlying for i64 [[VP__OMP_IV_LOCAL_08_IND_FINAL]]
;
DIR.OMP.SIMD.113:
  %i.linear.iv = alloca i64, align 8
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %DIR.OMP.SIMD.113
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.ALIGNED:PTR_TO_PTR"(double** null, i32 64), "QUAL.OMP.NORMALIZED.IV"(i8* null), "QUAL.OMP.NORMALIZED.UB"(i8* null), "QUAL.OMP.LINEAR:IV"(i64* %i.linear.iv, i32 1) ]
  br label %DIR.OMP.SIMD.2

DIR.OMP.SIMD.2:                                   ; preds = %DIR.OMP.SIMD.1
  call void @llvm.assume(i1 true) [ "align"(double* %A, i64 64) ]
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %DIR.OMP.SIMD.2, %omp.inner.for.body
  %.omp.iv.local.08 = phi i64 [ 0, %DIR.OMP.SIMD.2 ], [ %add1, %omp.inner.for.body ]
  %conv = sitofp i64 %.omp.iv.local.08 to double
  %arrayidx = getelementptr inbounds double, double* %A, i64 %.omp.iv.local.08
  store double %conv, double* %arrayidx, align 8
  %add1 = add nuw nsw i64 %.omp.iv.local.08, 1
  %exitcond.not = icmp eq i64 %add1, 131072
  br i1 %exitcond.not, label %DIR.OMP.END.SIMD.2, label %omp.inner.for.body

DIR.OMP.END.SIMD.2:                               ; preds = %omp.inner.for.body
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.OMP.END.SIMD.3

DIR.OMP.END.SIMD.3:                               ; preds = %DIR.OMP.END.SIMD.2
  ret void
}
declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
declare void @llvm.assume(i1)

