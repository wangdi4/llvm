; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; Test vectorization of calls having Kernel Vectorization attributes
; RUN: opt < %s -passes=vplan-vec -vplan-force-vf=2 -S | FileCheck %s
%opencl.reserve_id_t.5 = type opaque
%opencl.pipe_wo_t.6 = type opaque
%opencl.pipe_ro_t.7 = type opaque

@test_pipe_workgroup_write_int.res_id = internal unnamed_addr addrspace(3) global %opencl.reserve_id_t.5* undef, align 8
@test_pipe_workgroup_read_int.res_id = internal unnamed_addr addrspace(3) global %opencl.reserve_id_t.5* undef, align 8

; Function Attrs: convergent nounwind readnone
declare i64 @_Z13get_global_idj(i32 %0) local_unnamed_addr #1

; Function Attrs: convergent nounwind readnone
declare i64 @_Z14get_local_sizej(i32 %0) local_unnamed_addr #1

; Function Attrs: convergent
declare zeroext i1 @_Z19is_valid_reserve_id13ocl_reserveid(%opencl.reserve_id_t.5* %0) local_unnamed_addr #3

; Function Attrs: convergent nounwind readnone
declare i64 @_Z12get_local_idj(i32 %0) local_unnamed_addr #1

; Function Attrs: convergent
declare %opencl.reserve_id_t.5* @__work_group_reserve_read_pipe(%opencl.pipe_ro_t.7 addrspace(1)* %0, i32 %1, i32 %2, i32 %3) local_unnamed_addr #2

declare i32 @__read_pipe_4(%opencl.pipe_ro_t.7 addrspace(1)* %0, %opencl.reserve_id_t.5* %1, i32 %2, i8 addrspace(4)* %3, i32 %4, i32 %5) local_unnamed_addr

; Function Attrs: convergent
declare void @__work_group_commit_read_pipe(%opencl.pipe_ro_t.7 addrspace(1)* %0, %opencl.reserve_id_t.5* %1, i32 %2, i32 %3) local_unnamed_addr #4

; CHECK-LABEL: @_ZGVeN16uu_test_pipe_workgroup_read_int(
; CHECK:       vector.body:
; CHECK:         [[TMP6:%.*]] = tail call %opencl.reserve_id_t.5* @__work_group_reserve_read_pipe(%opencl.pipe_ro_t.7 addrspace(1)* [[LOAD_IN_PIPE:%.*]], i32 [[DOTEXTRACT_0_:%.*]], i32 4, i32 4)
; CHECK:         [[TMP7:%.*]] = tail call zeroext i1 @_Z19is_valid_reserve_id13ocl_reserveid(%opencl.reserve_id_t.5* [[TMP6]])
; CHECK-NEXT:    [[TMP8:%.*]] = insertelement <2 x i1> undef, i1 [[TMP7]], i32 0
; CHECK-NEXT:    [[TMP9:%.*]] = tail call zeroext i1 @_Z19is_valid_reserve_id13ocl_reserveid(%opencl.reserve_id_t.5* [[TMP6]])
; CHECK-NEXT:    [[TMP10:%.*]] = insertelement <2 x i1> [[TMP8]], i1 [[TMP9]], i32 1
; CHECK-NEXT:    br label [[VPLANNEDBB8:%.*]]
; CHECK:       VPlannedBB7:
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast <2 x i1> [[TMP10]] to i2
; CHECK-NEXT:    [[TMP12:%.*]] = icmp ne i2 [[TMP11]], 0
; CHECK:       pred.load.continue:
; CHECK:         [[PREDICATE:%.*]] = extractelement <2 x i1> [[TMP10]], i64 0
; CHECK-NEXT:    [[TMP20:%.*]] = icmp eq i1 [[PREDICATE]], true
; CHECK-NEXT:    br i1 [[TMP20]], label [[PRED_CALL_IF:%.*]], label [[TMP22:%.*]]
; CHECK:       pred.call.if:
; CHECK-NEXT:    [[TMP21:%.*]] = tail call i32 @__read_pipe_4(%opencl.pipe_ro_t.7 addrspace(1)* [[LOAD_IN_PIPE]], %opencl.reserve_id_t.5* [[TMP15:%.*]], i32 [[DOTEXTRACT_0_11:%.*]], i8 addrspace(4)* [[DOTEXTRACT_0_12:%.*]], i32 4, i32 4)
; CHECK-NEXT:    br label [[TMP22]]
; CHECK:       22:
; CHECK-NEXT:    [[TMP23:%.*]] = phi i32 [ undef, [[PRED_LOAD_CONTINUE:%.*]] ], [ [[TMP21]], [[PRED_CALL_IF]] ]
; CHECK-NEXT:    br label [[PRED_CALL_CONTINUE:%.*]]
; CHECK:       pred.call.continue:
; CHECK-NEXT:    [[PREDICATE13:%.*]] = extractelement <2 x i1> [[TMP10]], i64 1
; CHECK-NEXT:    [[TMP24:%.*]] = icmp eq i1 [[PREDICATE13]], true
; CHECK-NEXT:    br i1 [[TMP24]], label [[PRED_CALL_IF19:%.*]], label [[TMP26:%.*]]
; CHECK:       pred.call.if19:
; CHECK-NEXT:    [[TMP25:%.*]] = tail call i32 @__read_pipe_4(%opencl.pipe_ro_t.7 addrspace(1)* [[LOAD_IN_PIPE]], %opencl.reserve_id_t.5* [[TMP15:%.*]], i32 [[DOTEXTRACT_1_:%.*]], i8 addrspace(4)* [[DOTEXTRACT_1_14:%.*]], i32 4, i32 4)
; CHECK-NEXT:    br label [[TMP26]]
; CHECK:       pred.load.continue22:
; CHECK-NEXT:    [[TMP33:%.*]] = bitcast <2 x i1> [[TMP10]] to i2
; CHECK-NEXT:    [[TMP34:%.*]] = icmp ne i2 [[TMP33]], 0
; CHECK-NEXT:    br i1 [[TMP34]], label [[PRED_CALL_IF23:%.*]], label [[TMP35:%.*]]
; CHECK:       pred.call.if23:
; CHECK-NEXT:    tail call void @__work_group_commit_read_pipe(%opencl.pipe_ro_t.7 addrspace(1)* [[LOAD_IN_PIPE]], %opencl.reserve_id_t.5* [[TMP32:%.*]], i32 4, i32 4)
; CHECK-NEXT:    br label [[TMP35]]

; Function Attrs: convergent nounwind
define void @_ZGVeN16uu_test_pipe_workgroup_read_int(%opencl.pipe_ro_t.7 addrspace(1)* %in_pipe, i32 addrspace(1)* %dst) local_unnamed_addr #5 {
entry:
  %alloca.in_pipe = alloca %opencl.pipe_ro_t.7 addrspace(1)*
  store %opencl.pipe_ro_t.7 addrspace(1)* %in_pipe, %opencl.pipe_ro_t.7 addrspace(1)** %alloca.in_pipe
  %alloca.dst = alloca i32 addrspace(1)*
  store i32 addrspace(1)* %dst, i32 addrspace(1)** %alloca.dst
  %call = tail call i64 @_Z13get_global_idj(i32 0) #7
  %call3 = tail call i64 @_Z12get_local_idj(i32 0) #7
  %0 = trunc i64 %call3 to i32
  %call1 = tail call i64 @_Z14get_local_sizej(i32 0) #7
  br label %simd.begin.region

simd.begin.region:                                ; preds = %entry
  %entry.region = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.SIMDLEN"(i32 16), "QUAL.OMP.UNIFORM"(%opencl.pipe_ro_t.7 addrspace(1)** %alloca.in_pipe, i32 addrspace(1)** %alloca.dst) ]
  br label %simd.loop.preheader

simd.loop.preheader:                              ; preds = %simd.begin.region
  %load.dst = load i32 addrspace(1)*, i32 addrspace(1)** %alloca.dst
  %load.in_pipe = load %opencl.pipe_ro_t.7 addrspace(1)*, %opencl.pipe_ro_t.7 addrspace(1)** %alloca.in_pipe
  br label %simd.loop

simd.loop:                                        ; preds = %simd.loop.exit, %simd.loop.preheader
  %index = phi i32 [ 0, %simd.loop.preheader ], [ %indvar, %simd.loop.exit ]
  %add1 = add nuw i32 %0, %index
  %1 = sext i32 %add1 to i64
  %2 = sext i32 %index to i64
  %add = add nuw i64 %2, %call
  %3 = trunc i64 %call1 to i32
  ; Uniform kernel-convergent-call, kernel-uniform-call, kernel-call-once call
  ; Expected to be not widened and not serialized.
  %4 = tail call %opencl.reserve_id_t.5* @__work_group_reserve_read_pipe(%opencl.pipe_ro_t.7 addrspace(1)* %load.in_pipe, i32 %3, i32 4, i32 4) #8
  store %opencl.reserve_id_t.5* %4, %opencl.reserve_id_t.5* addrspace(3)* @test_pipe_workgroup_read_int.res_id, align 8
  ; Regular uniform OCL call, expected to be serialized
  %call2 = tail call zeroext i1 @_Z19is_valid_reserve_id13ocl_reserveid(%opencl.reserve_id_t.5* %4) #9
  br i1 %call2, label %if.then, label %if.end

if.then:                                          ; preds = %simd.loop
  %5 = load %opencl.reserve_id_t.5*, %opencl.reserve_id_t.5* addrspace(3)* @test_pipe_workgroup_read_int.res_id, align 8
  %sext = shl i64 %add, 32
  %idxprom = ashr exact i64 %sext, 32
  %arrayidx = getelementptr inbounds i32, i32 addrspace(1)* %load.dst, i64 %idxprom
  %6 = bitcast i32 addrspace(1)* %arrayidx to i8 addrspace(1)*
  %7 = addrspacecast i8 addrspace(1)* %6 to i8 addrspace(4)*
  ; Regular non-uniform OCL call, expect serialization with predication
  %8 = tail call i32 @__read_pipe_4(%opencl.pipe_ro_t.7 addrspace(1)* %load.in_pipe, %opencl.reserve_id_t.5* %5, i32 %add1, i8 addrspace(4)* %7, i32 4, i32 4) #6
  %9 = load %opencl.reserve_id_t.5*, %opencl.reserve_id_t.5* addrspace(3)* @test_pipe_workgroup_read_int.res_id, align 8
  ; Non-uniform kernel-convergent-call, kernel-uniform-call, kernel-call-once call
  ; Expected to be all-ones bypassed, not widened and not serialized.
  tail call void @__work_group_commit_read_pipe(%opencl.pipe_ro_t.7 addrspace(1)* %load.in_pipe, %opencl.reserve_id_t.5* %9, i32 4, i32 4) #8
  br label %if.end

if.end:                                           ; preds = %if.then, %simd.loop
  br label %simd.loop.exit

simd.loop.exit:                                   ; preds = %if.end
  %indvar = add nuw i32 %index, 1
  %vl.cond = icmp ult i32 %indvar, 16
  br i1 %vl.cond, label %simd.loop, label %simd.end.region

simd.end.region:                                  ; preds = %simd.loop.exit
  call void @llvm.directive.region.exit(token %entry.region) [ "DIR.OMP.END.SIMD"() ]
  br label %return

return:                                           ; preds = %simd.end.region
  ret void
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #6

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token %0) #6

attributes #0 = { convergent nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "denorms-are-zero"="false" "disable-tail-calls"="false" "frame-pointer"="none" "kernel-call-once" "kernel-convergent-call" "kernel-uniform-call" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "stackrealign" "uniform-work-group-size"="false" "unsafe-fp-math"="false" "use-soft-float"="false" "vector-variants"="_ZGVeN16uu_test_pipe_workgroup_write_int" }
attributes #1 = { convergent nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "denorms-are-zero"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "stackrealign" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { convergent "kernel-call-once" "kernel-convergent-call" "kernel-uniform-call" "opencl-vec-uniform-return" }
attributes #3 = { convergent "correctly-rounded-divide-sqrt-fp-math"="false" "denorms-are-zero"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "stackrealign" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { convergent "kernel-call-once" "kernel-convergent-call" "kernel-uniform-call" }
attributes #5 = { convergent nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "denorms-are-zero"="false" "disable-tail-calls"="false" "frame-pointer"="none" "kernel-call-once" "kernel-convergent-call" "kernel-uniform-call" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "stackrealign" "uniform-work-group-size"="false" "unsafe-fp-math"="false" "use-soft-float"="false" "vector-variants"="_ZGVeN16uu_test_pipe_workgroup_read_int" }
attributes #6 = { nounwind }
attributes #7 = { convergent nounwind readnone }
attributes #8 = { convergent nounwind "kernel-call-once" "kernel-convergent-call" "kernel-uniform-call" }
attributes #9 = { convergent nounwind }
