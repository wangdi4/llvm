; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -opaque-pointers=0 -S -passes="vplan-vec" -vplan-force-vf=4 --vplan-print-after-live-inout-list %s | FileCheck %s
;
; Test code gen for unconditional last private of a scalar data type.
;
define void @simd_loop(i32* %A, i32* %B) {
; CHECK-LABEL:  VPlan after live in/out lists creation:
; CHECK-NEXT:  VPlan IR for: simd_loop:omp.inner.for.body.#{{[0-9]+}}
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     i32* [[VP_PRIVATE:%.*]] = allocate-priv i32*, OrigAlign = 4
; CHECK-NEXT:     i8* [[VP_PRIVATE_BCAST:%.*]] = bitcast i32* [[VP_PRIVATE]]
; CHECK-NEXT:     call i64 4 i8* [[VP_PRIVATE_BCAST]] void (i64, i8*)* @llvm.lifetime.start.p0i8
; CHECK-NEXT:     i64 [[VP_INDVARS_IV_IND_INIT:%.*]] = induction-init{add} i64 live-in1 i64 1
; CHECK-NEXT:     i64 [[VP_INDVARS_IV_IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:     i64 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i64 1024, UF = 1
; CHECK-NEXT:     br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], [[BB2]]
; CHECK-NEXT:     i64 [[VP_INDVARS_IV:%.*]] = phi  [ i64 [[VP_INDVARS_IV_IND_INIT]], [[BB1]] ],  [ i64 [[VP_INDVARS_IV_NEXT:%.*]], [[BB2]] ]
; CHECK-NEXT:     i32* [[VP_ARRAYIDX:%.*]] = getelementptr inbounds i32* [[A0:%.*]] i64 [[VP_INDVARS_IV]]
; CHECK-NEXT:     i32 [[VP0:%.*]] = load i32* [[VP_ARRAYIDX]]
; CHECK-NEXT:     i1 [[VP_CMP3:%.*]] = icmp sgt i32 [[VP0]] i32 0
; CHECK-NEXT:     i32 [[VP_PRIV_OUTGOING:%.*]] = select i1 [[VP_CMP3]] i32 [[VP0]] i32 0
; CHECK-NEXT:     i64 [[VP_INDVARS_IV_NEXT]] = add i64 [[VP_INDVARS_IV]] i64 [[VP_INDVARS_IV_IND_INIT_STEP]]
; CHECK-NEXT:     i1 [[VP_VECTOR_LOOP_EXITCOND:%.*]] = icmp ult i64 [[VP_INDVARS_IV_NEXT]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     br i1 [[VP_VECTOR_LOOP_EXITCOND]], [[BB2]], [[BB3:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: [[BB2]]
; CHECK-NEXT:     i64 [[VP_INDVARS_IV_IND_FINAL:%.*]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:     i32 [[VP_PRIV_OUTGOING_PRIV_FINAL:%.*]] = private-final-uc i32 [[VP_PRIV_OUTGOING]]
; CHECK-NEXT:     i8* [[VP_PRIVATE_BCAST1:%.*]] = bitcast i32* [[VP_PRIVATE]]
; CHECK-NEXT:     call i64 4 i8* [[VP_PRIVATE_BCAST1]] void (i64, i8*)* @llvm.lifetime.end.p0i8
; CHECK-NEXT:     br [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: [[BB3]]
; CHECK-NEXT:     br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0     [[DOT_LCSSA0:%.*]] = phi i32 [ [[PRIV_OUTGOING0:%.*]], [[OMP_INNER_FOR_BODY0:%.*]] ] i32 [[VP_PRIV_OUTGOING_PRIV_FINAL]] -> i32 [[PRIV_OUTGOING0]]
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 1   no underlying for i64 [[VP_INDVARS_IV_IND_FINAL]]
; CHECK-EMPTY:
; CHECK-NEXT:  Original loop live-ins/live-outs:
; CHECK-NEXT:    Id: 1
; CHECK-NEXT:      Phi:   [[INDVARS_IV0:%.*]] = phi i64 [ 0, [[DIR_OMP_SIMD_30:%.*]] ], [ [[INDVARS_IV_NEXT0:%.*]], [[OMP_INNER_FOR_BODY0]] ]    Start op: 0
; CHECK-NEXT:      Live-Out:   [[INDVARS_IV_NEXT0]] = add nuw nsw i64 [[INDVARS_IV0]], 1
; CHECK-NEXT:    Id: 0
; CHECK-NEXT:      Phi: nullptr    Start op: -1
; CHECK-NEXT:      Live-Out:   [[PRIV_OUTGOING0]] = select i1 [[CMP30:%.*]], i32 [[TMP0:%.*]], i32 0
;
; CHECK:  define void @simd_loop(i32* [[A0]], i32* [[B0:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[PRIVATE0:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[PRIVATE_VEC0:%.*]] = alloca <4 x i32>, align 16
; CHECK-NEXT:    [[PRIVATE_VEC_BC0:%.*]] = bitcast <4 x i32>* [[PRIVATE_VEC0]] to i32*
; CHECK-NEXT:    [[PRIVATE_VEC_BASE_ADDR0:%.*]] = getelementptr i32, i32* [[PRIVATE_VEC_BC0]], <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    br label [[DIR_OMP_SIMD_30]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.SIMD.3:
; CHECK-NEXT:    br label [[VPLANNEDBB0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB:
; CHECK-NEXT:    br label [[VPLANNEDBB10:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB1:
; CHECK-NEXT:    [[PRIVATE_VEC0_BCAST:%.*]] = bitcast <4 x i32>* [[PRIVATE_VEC0]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[PRIVATE_VEC0_BCAST]])
; CHECK-NEXT:    br label [[VECTOR_BODY0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  vector.body:
; CHECK-NEXT:    [[UNI_PHI0:%.*]] = phi i64 [ 0, [[VPLANNEDBB10]] ], [ [[TMP4:%.*]], [[VECTOR_BODY0]] ]
; CHECK-NEXT:    [[VEC_PHI0:%.*]] = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, [[VPLANNEDBB10]] ], [ [[TMP3:%.*]], [[VECTOR_BODY0]] ]
; CHECK-NEXT:    [[SCALAR_GEP0:%.*]] = getelementptr inbounds i32, i32* [[A0]], i64 [[UNI_PHI0]]
; CHECK-NEXT:    [[TMP0:%.*]] = bitcast i32* [[SCALAR_GEP0]] to <4 x i32>*
; CHECK-NEXT:    [[WIDE_LOAD0:%.*]] = load <4 x i32>, <4 x i32>* [[TMP0]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = icmp sgt <4 x i32> [[WIDE_LOAD0]], zeroinitializer
; CHECK-NEXT:    [[TMP2:%.*]] = select <4 x i1> [[TMP1]], <4 x i32> [[WIDE_LOAD0]], <4 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP3]] = add nuw nsw <4 x i64> [[VEC_PHI0]], <i64 4, i64 4, i64 4, i64 4>
; CHECK-NEXT:    [[TMP4]] = add nuw nsw i64 [[UNI_PHI0]], 4
; CHECK-NEXT:    [[TMP5:%.*]] = icmp ult i64 [[TMP4]], 1024
; CHECK-NEXT:    br i1 [[TMP5]], label [[VECTOR_BODY0]], label [[VPLANNEDBB30:%.*]], !llvm.loop !0
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB3:
; CHECK-NEXT:    [[EXTRACTED_PRIV0:%.*]] = extractelement <4 x i32> [[TMP2]], i64 3
; CHECK-NEXT:    [[PRIVATE_VEC0_BCAST:%.*]] = bitcast <4 x i32>* [[PRIVATE_VEC0]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[PRIVATE_VEC0_BCAST]])
; CHECK-NEXT:    br label [[VPLANNEDBB40:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB4:
; CHECK-NEXT:    br label [[FINAL_MERGE0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  final.merge:
; CHECK-NEXT:    [[UNI_PHI50:%.*]] = phi i32 [ [[EXTRACTED_PRIV0]], [[VPLANNEDBB40]] ]
; CHECK-NEXT:    [[UNI_PHI60:%.*]] = phi i64 [ 1024, [[VPLANNEDBB40]] ]
; CHECK-NEXT:    br label [[OMP_LOOP_EXIT0:%.*]]
;
; CHECK:       omp.loop.exit:
; CHECK-NEXT:    [[DOT_LCSSA0]] = phi i32 [ [[UNI_PHI50]], [[FINAL_MERGE0]] ]
; CHECK-NEXT:    store i32 [[DOT_LCSSA0]], i32* [[PRIVATE0]], align 8
; CHECK-NEXT:    br label [[DIR_OMP_END_SIMD_10:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.END.SIMD.1:
; CHECK-NEXT:    ret void
; CHECK-NEXT:  }
;
entry:
  %private = alloca i32, align 4
  br label %DIR.OMP.SIMD.3

DIR.OMP.SIMD.3:                                   ; preds = %entry
  %entry.region = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.SIMDLEN"(i32 4), "QUAL.OMP.PRIVATE"(i32* %private) ]
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %DIR.OMP.SIMD.3, %omp.inner.for.body
  %indvars.iv = phi i64 [ 0, %DIR.OMP.SIMD.3 ], [ %indvars.iv.next, %omp.inner.for.body ]
  %arrayidx = getelementptr inbounds i32, i32* %A, i64 %indvars.iv
  %0 = load i32, i32* %arrayidx, align 8
  %cmp3 = icmp sgt i32 %0, 0
  %priv.outgoing = select i1 %cmp3, i32 %0, i32 zeroinitializer
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 1024
  br i1 %exitcond, label %omp.inner.for.body, label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.inner.for.body
  %..lcssa = phi i32 [ %priv.outgoing, %omp.inner.for.body ]
  store i32 %..lcssa, i32* %private, align 8
  br label %DIR.OMP.END.SIMD.1

DIR.OMP.END.SIMD.1:                               ; preds = %omp.loop.exit
  call void @llvm.directive.region.exit(token %entry.region) [ "DIR.OMP.END.SIMD"() ]
  ret void
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
