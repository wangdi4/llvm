; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -opaque-pointers=0 %s -disable-output -passes=vplan-vec -vplan-print-after-live-inout-list -vplan-dump-live-inout -vplan-entities-dump | FileCheck %s

define void @main(i64 %call.i, i8* %call1) {
; CHECK-LABEL:  VPlan after live in/out lists creation:
; CHECK-NEXT:  VPlan IR for: main:omp.inner.for.body.i.#{{[0-9]+}}
; CHECK-NEXT:  Live-in values:
; CHECK-NEXT:  ID: 0 Value: i16 [[RET_I_LPRIV_PROMOTED1080:%.*]]
; CHECK-NEXT:  ID: 1 Value: i64 0
; CHECK-NEXT:  Loop Entities of the loop with header [[BB0:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:  Induction list
; CHECK-NEXT:   IntInduction(+) Start: i64 0 Step: i64 1 StartVal: i64 0 EndVal: i64 2147483647 BinOp: i64 [[VP_INDVARS_IV_NEXT115:%.*]] = add i64 [[VP_INDVARS_IV114:%.*]] i64 [[VP_INDVARS_IV114_IND_INIT_STEP:%.*]]
; CHECK-NEXT:    Linked values: i64 [[VP_INDVARS_IV114]], i64 [[VP_INDVARS_IV_NEXT115]], i64 [[VP_INDVARS_IV114_IND_INIT:%.*]], i64 [[VP_INDVARS_IV114_IND_INIT_STEP]], i64 [[VP_INDVARS_IV114_IND_FINAL:%.*]],
; CHECK:       Private list
; CHECK-EMPTY:
; CHECK-NEXT:    Exit instr: i16 [[VP0:%.*]] = phi  [ i16 [[VP__LCSSA109:%.*]], [[BB0]] ],  [ i16 [[VP_SPEC_SELECT_LCSSA:%.*]], [[BB1:BB[0-9]+]] ]
; CHECK-NEXT:    Linked values: i16 [[VP0]], i16* [[RET_I_LPRIV0:%.*]], i16 [[VP__LCSSA109]], i16* [[VP_RET_I_LPRIV:%.*]], i16 [[VP__PRIV_FINAL:%.*]],
; CHECK-NEXT:   Memory: i16* [[RET_I_LPRIV0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2:BB[0-9]+]]: # preds:
; CHECK-NEXT:     br [[BB3:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: [[BB2]]
; CHECK-NEXT:     i16* [[VP_RET_I_LPRIV]] = allocate-priv i16*, OrigAlign = 2
; CHECK-NEXT:     i8* [[VP_RET_I_LPRIV_BCAST:%.*]] = bitcast i16* [[VP_RET_I_LPRIV]]
; CHECK-NEXT:     call i64 2 i8* [[VP_RET_I_LPRIV_BCAST]] void (i64, i8*)* @llvm.lifetime.start.p0i8
; CHECK-NEXT:     i64 [[VP_INDVARS_IV114_IND_INIT]] = induction-init{add} i64 live-in1 i64 1
; CHECK-NEXT:     i64 [[VP_INDVARS_IV114_IND_INIT_STEP]] = induction-init-step{add} i64 1
; CHECK-NEXT:     i64 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i64 [[CONV0:%.*]], UF = 1
; CHECK-NEXT:     br [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB0]]: # preds: [[BB3]], [[BB4:BB[0-9]+]]
; CHECK-NEXT:     i64 [[VP_PRIV_IDX_HDR:%.*]] = phi  [ i64 -1, [[BB3]] ],  [ i64 [[VP_PRIV_IDX_BB4:%.*]], [[BB4]] ]
; CHECK-NEXT:     i64 [[VP_INDVARS_IV114]] = phi  [ i64 [[VP_INDVARS_IV114_IND_INIT]], [[BB3]] ],  [ i64 [[VP_INDVARS_IV_NEXT115]], [[BB4]] ]
; CHECK-NEXT:     i16 [[VP__LCSSA109]] = phi  [ i16 [[RET_I_LPRIV_PROMOTED1080]], [[BB3]] ],  [ i16 [[VP0]], [[BB4]] ]
; CHECK-NEXT:     i32 [[VP1:%.*]] = trunc i64 [[VP_INDVARS_IV114]] to i32
; CHECK-NEXT:     br i1 [[CMP7_I1050:%.*]], [[BB5:BB[0-9]+]], [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB5]]: # preds: [[BB0]]
; CHECK-NEXT:       i16* [[VP_ARRAYIDX_I:%.*]] = getelementptr inbounds i16* [[TMP0:%.*]] i64 [[VP_INDVARS_IV114]]
; CHECK-NEXT:       i16 [[VP2:%.*]] = load i16* [[VP_ARRAYIDX_I]]
; CHECK-NEXT:       i32 [[VP_CONV_I65:%.*]] = sext i16 [[VP2]] to i32
; CHECK-NEXT:       br [[BB6:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB6]]: # preds: [[BB5]], [[BB6]]
; CHECK-NEXT:       i32 [[VP_STOREMERGE_I106:%.*]] = phi  [ i32 0, [[BB5]] ],  [ i32 [[VP_INC_I:%.*]], [[BB6]] ]
; CHECK-NEXT:       i64 [[VP_PRIV_IDX_BB5:%.*]] = phi  [ i64 [[VP_PRIV_IDX_HDR]], [[BB5]] ],  [ i64 [[VP_PRIV_IDX_BB5_1:%.*]], [[BB6]] ]
; CHECK-NEXT:       i16 [[VP3:%.*]] = phi  [ i16 [[VP__LCSSA109]], [[BB5]] ],  [ i16 [[VP_SPEC_SELECT:%.*]], [[BB6]] ]
; CHECK-NEXT:       i32 [[VP_ADD8_I:%.*]] = add i32 [[VP_STOREMERGE_I106]] i32 [[VP1]]
; CHECK-NEXT:       i1 [[VP_CMP9_I:%.*]] = icmp sgt i32 [[VP_ADD8_I]] i32 [[VP_CONV_I65]]
; CHECK-NEXT:       i64 [[VP_PRIV_IDX_BB5_1]] = select i1 [[VP_CMP9_I]] i64 [[VP_INDVARS_IV114]] i64 [[VP_PRIV_IDX_BB5]]
; CHECK-NEXT:       i16 [[VP_SPEC_SELECT]] = select i1 [[VP_CMP9_I]] i16 [[VP2]] i16 [[VP3]]
; CHECK-NEXT:       i32 [[VP_INC_I]] = add i32 [[VP_STOREMERGE_I106]] i32 1
; CHECK-NEXT:       i1 [[VP_EXITCOND113_NOT:%.*]] = icmp eq i32 [[VP_INC_I]] i32 [[DIV6_I1300:%.*]]
; CHECK-NEXT:       br i1 [[VP_EXITCOND113_NOT]], [[BB1]], [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB1]]: # preds: [[BB6]]
; CHECK-NEXT:       i64 [[VP_PRIV_IDX_BB6:%.*]] = phi  [ i64 [[VP_PRIV_IDX_BB5_1]], [[BB6]] ]
; CHECK-NEXT:       i16 [[VP_SPEC_SELECT_LCSSA]] = phi  [ i16 [[VP_SPEC_SELECT]], [[BB6]] ]
; CHECK-NEXT:       br [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: [[BB0]], [[BB1]]
; CHECK-NEXT:     i64 [[VP_PRIV_IDX_BB4]] = phi  [ i64 [[VP_PRIV_IDX_HDR]], [[BB0]] ],  [ i64 [[VP_PRIV_IDX_BB6]], [[BB1]] ]
; CHECK-NEXT:     i16 [[VP0]] = phi  [ i16 [[VP__LCSSA109]], [[BB0]] ],  [ i16 [[VP_SPEC_SELECT_LCSSA]], [[BB1]] ]
; CHECK-NEXT:     i64 [[VP_INDVARS_IV_NEXT115]] = add i64 [[VP_INDVARS_IV114]] i64 [[VP_INDVARS_IV114_IND_INIT_STEP]]
; CHECK-NEXT:     i1 [[VP_VECTOR_LOOP_EXITCOND:%.*]] = icmp uge i64 [[VP_INDVARS_IV_NEXT115]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     br i1 [[VP_VECTOR_LOOP_EXITCOND]], [[BB7:BB[0-9]+]], [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB7]]: # preds: [[BB4]]
; CHECK-NEXT:     i64 [[VP_INDVARS_IV114_IND_FINAL]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:     i16 [[VP__PRIV_FINAL]] = private-final-c i16 [[VP0]] i64 [[VP_PRIV_IDX_BB4]] i16 live-in0
; CHECK-NEXT:     i8* [[VP_RET_I_LPRIV_BCAST1:%.*]] = bitcast i16* [[VP_RET_I_LPRIV]]
; CHECK-NEXT:     call i64 2 i8* [[VP_RET_I_LPRIV_BCAST1]] void (i64, i8*)* @llvm.lifetime.end.p0i8
; CHECK-NEXT:     br [[BB8:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB8]]: # preds: [[BB7]]
; CHECK-NEXT:     br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  Live-out values:
; CHECK-NEXT:  live-out0(i16 [[VP__PRIV_FINAL]])
; CHECK-NEXT:  live-out1(i64 [[VP_INDVARS_IV114_IND_FINAL]])
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0     [[DOTLCSSA0:%.*]] = phi i16 [ [[TMP4:%.*]], [[FOR_COND_CLEANUP_I0:%.*]] ] i16 [[VP__PRIV_FINAL]] -> i16 [[TMP4]]
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 1   no underlying for i64 [[VP_INDVARS_IV114_IND_FINAL]]
; CHECK-EMPTY:
; CHECK-NEXT:  Original loop live-ins/live-outs:
; CHECK-NEXT:    Id: 1
; CHECK-NEXT:      Phi:   [[INDVARS_IV1140:%.*]] = phi i64 [ 0, [[DIR_OMP_SIMD_20:%.*]] ], [ [[INDVARS_IV_NEXT1150:%.*]], [[FOR_COND_CLEANUP_I0]] ]    Start op: 0
; CHECK-NEXT:      Live-Out:   [[INDVARS_IV_NEXT1150]] = add nuw nsw i64 [[INDVARS_IV1140]], 1
; CHECK-NEXT:    Id: 0
; CHECK-NEXT:      Phi:   [[DOTLCSSA1090:%.*]] = phi i16 [ [[RET_I_LPRIV_PROMOTED1080]], [[DIR_OMP_SIMD_20]] ], [ [[TMP4]], [[FOR_COND_CLEANUP_I0]] ]    Start op: 0
; CHECK-NEXT:      Live-Out:   [[TMP4]] = phi i16 [ [[DOTLCSSA1090]], [[OMP_INNER_FOR_BODY_I0:%.*]] ], [ [[SPEC_SELECT_LCSSA0:%.*]], [[FOR_COND_CLEANUP_I_LOOPEXIT0:%.*]] ]
;
entry:
  %conv.i = trunc i64 %call.i to i32
  %ret.i.lpriv = alloca i16
  br label %cond.end

cond.true:                                        ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %cond.true, %entry
  %cond = phi i32 [ %conv.i, %cond.true ], [ 100, %entry ]
  %conv = sext i32 %cond to i64
  %0 = bitcast i8* %call1 to i16*
  %cmp4110 = icmp sgt i32 %cond, 0
  br i1 %cmp4110, label %for.body.preheader, label %exit

for.body.preheader:                               ; preds = %cond.end
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %indvars.iv118 = phi i64 [ %indvars.iv.next119, %for.body ], [ 0, %for.body.preheader ]
  %indvars.iv.next119 = add nuw nsw i64 %indvars.iv118, 1
  %exitcond121.not = icmp eq i64 %indvars.iv.next119, %conv
  br i1 %exitcond121.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  br i1 true, label %DIR.OMP.SIMD.1, label %exit

DIR.OMP.SIMD.1:                                   ; preds = %for.cond.cleanup
  %1 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.LASTPRIVATE:CONDITIONAL"(i16* %ret.i.lpriv) ]
  br label %DIR.OMP.SIMD.2

DIR.OMP.SIMD.2:                                   ; preds = %DIR.OMP.SIMD.1
  %div6.i130 = lshr i32 %cond, 1
  %cmp7.i105 = icmp sgt i32 %cond, 1
  %ret.i.lpriv.promoted108 = load i16, i16* %ret.i.lpriv
  br label %omp.inner.for.body.i

omp.inner.for.body.i:                             ; preds = %for.cond.cleanup.i, %DIR.OMP.SIMD.2
  %indvars.iv114 = phi i64 [ 0, %DIR.OMP.SIMD.2 ], [ %indvars.iv.next115, %for.cond.cleanup.i ]
  %.lcssa109 = phi i16 [ %ret.i.lpriv.promoted108, %DIR.OMP.SIMD.2 ], [ %4, %for.cond.cleanup.i ]
  %2 = trunc i64 %indvars.iv114 to i32
  br i1 %cmp7.i105, label %for.body.i.lr.ph, label %for.cond.cleanup.i

for.body.i.lr.ph:                                 ; preds = %omp.inner.for.body.i
  %arrayidx.i = getelementptr inbounds i16, i16* %0, i64 %indvars.iv114
  %3 = load i16, i16* %arrayidx.i
  %conv.i65 = sext i16 %3 to i32
  br label %for.body.i

for.cond.cleanup.i.loopexit:                      ; preds = %for.body.i
  %spec.select.lcssa = phi i16 [ %spec.select, %for.body.i ]
  br label %for.cond.cleanup.i

for.cond.cleanup.i:                               ; preds = %for.cond.cleanup.i.loopexit, %omp.inner.for.body.i
  %4 = phi i16 [ %.lcssa109, %omp.inner.for.body.i ], [ %spec.select.lcssa, %for.cond.cleanup.i.loopexit ]
  %indvars.iv.next115 = add nuw nsw i64 %indvars.iv114, 1
  %exitcond117.not = icmp eq i64 %indvars.iv.next115, %conv
  br i1 %exitcond117.not, label %_ZN18ConditionalPrivateIs10vec_policyEclEiPKs.exit, label %omp.inner.for.body.i

for.body.i:                                       ; preds = %for.body.i, %for.body.i.lr.ph
  %storemerge.i106 = phi i32 [ 0, %for.body.i.lr.ph ], [ %inc.i, %for.body.i ]
  %5 = phi i16 [ %.lcssa109, %for.body.i.lr.ph ], [ %spec.select, %for.body.i ]
  %add8.i = add nuw nsw i32 %storemerge.i106, %2
  %cmp9.i = icmp sgt i32 %add8.i, %conv.i65
  %spec.select = select i1 %cmp9.i, i16 %3, i16 %5
  %inc.i = add nuw nsw i32 %storemerge.i106, 1
  %exitcond113.not = icmp eq i32 %inc.i, %div6.i130
  br i1 %exitcond113.not, label %for.cond.cleanup.i.loopexit, label %for.body.i

_ZN18ConditionalPrivateIs10vec_policyEclEiPKs.exit: ; preds = %for.cond.cleanup.i
  %.lcssa = phi i16 [ %4, %for.cond.cleanup.i ]
  store i16 %.lcssa, i16* %ret.i.lpriv
  br label %DIR.OMP.END.SIMD.3

DIR.OMP.END.SIMD.3:                               ; preds = %_ZN18ConditionalPrivateIs10vec_policyEclEiPKs.exit
  call void @llvm.directive.region.exit(token %1) [ "DIR.OMP.END.SIMD"() ]
  br label %exit

exit:                                             ; preds = %DIR.OMP.END.SIMD.3, %for.cond.cleanup, %cond.end
  ret void
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
