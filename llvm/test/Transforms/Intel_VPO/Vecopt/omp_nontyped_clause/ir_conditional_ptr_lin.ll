; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
;
; Test for that induction which has updates under conditions is processed correctly
; (i.e. induction init/final are processed correctly).
; REQUIRES: asserts
; RUN: opt -passes=vplan-vec -vplan-force-vf=2 -vplan-entities-dump -vplan-print-after-vpentity-instrs -vplan-dump-plan-da -S < %s 2>&1 | FileCheck %s
;
define void @foo2(i64 %N) local_unnamed_addr #0 {
; CHECK-LABEL:  VPlan after insertion of VPEntities instructions:
; CHECK-NEXT:  VPlan IR for: foo2:for.body
; CHECK-NEXT:  Loop Entities of the loop with header [[BB0:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:  Induction list
; CHECK-NEXT:   IntInduction(+) Start: i64 1 Step: i64 1 StartVal: i64 1 EndVal: ? BinOp: i64 [[VP_INDVARS_IV_NEXT:%.*]] = add i64 [[VP_INDVARS_IV:%.*]] i64 1 need close form
; CHECK-NEXT:    Linked values: i64 [[VP_INDVARS_IV]], i64 [[VP_INDVARS_IV_NEXT]], i64 [[VP_INDVARS_IV_IND_INIT:%.*]], i64 [[VP_INDVARS_IV_IND_INIT_STEP:%.*]], i64 [[VP0:%.*]], i64 [[VP_INDVARS_IV_IND_FINAL:%.*]],
; CHECK-EMPTY:
; CHECK-NEXT:   PtrInduction(+) Start: i64* [[K_IV_B0:%.*]] Step: i64 2 StartVal: ? EndVal: ? BinOp: i64* [[VP_K_IV_NEXT:%.*]] = phi  [ i64* [[VP_K_IV_N1:%.*]], [[BB1:BB[0-9]+]] ],  [ i64* [[VP_K_IV_N2:%.*]], [[BB2:BB[0-9]+]] ] need close form
; CHECK-NEXT:    Linked values: i64* [[VP_K_IV:%.*]], i64* [[VP_K_IV_NEXT]], i64* [[VP_K_IV_IND_INIT:%.*]], i64 [[VP_K_IV_IND_INIT_STEP:%.*]], i64* [[VP1:%.*]], i64* [[VP_K_IV_IND_FINAL:%.*]],
; CHECK-EMPTY:
; CHECK-NEXT:   PtrInduction(+) Start: i32* [[K1_IV_B0:%.*]] Step: i64 1 StartVal: ? EndVal: ? BinOp: i32* [[VP_K1_IV_NEXT:%.*]] = phi  [ i32* [[VP_K1_IV_N1:%.*]], [[BB1:BB[0-9]+]] ],  [ i32* [[VP_K1_IV_N2:%.*]], [[BB2:BB[0-9]+]] ] need close form
; CHECK-NEXT:    Linked values: i32* [[VP_K1_IV:%.*]], i32* [[VP_K1_IV_NEXT]], i32* [[VP_K1_IV_IND_INIT:%.*]], i64 [[VP_K1_IV_IND_INIT_STEP:%.*]], i32* [[VP2:%.*]], i32* [[VP_K1_IV_IND_FINAL:%.*]],
; CHECK:         [[BB3:BB[0-9]+]]: # preds:
; CHECK-NEXT:     br [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: [[BB3]]
; CHECK-NEXT:     i64 [[VP_INDVARS_IV_IND_INIT]] = induction-init{add} i64 1 i64 1
; CHECK-NEXT:     i64 [[VP_INDVARS_IV_IND_INIT_STEP]] = induction-init-step{add} i64 1
; CHECK-NEXT:     i64* [[VP_K_IV_IND_INIT]] = induction-init{getelementptr} i64* [[K_IV_B0]] i64 2
; CHECK-NEXT:     i64 [[VP_K_IV_IND_INIT_STEP]] = induction-init-step{getelementptr} i64 2
; CHECK-NEXT:     i32* [[VP_K1_IV_IND_INIT]] = induction-init{getelementptr} i32* [[K1_IV_B0]] i64 1
; CHECK-NEXT:     i64 [[VP_K1_IV_IND_INIT_STEP]] = induction-init-step{getelementptr} i64 1
; CHECK-NEXT:     br [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB0]]: # preds: [[BB4]], [[BB5:BB[0-9]+]]
; CHECK-NEXT:     i64 [[VP_INDVARS_IV]] = phi  [ i64 [[VP_INDVARS_IV_IND_INIT]], [[BB4]] ],  [ i64 [[VP0]], [[BB5]] ]
; CHECK-NEXT:     i64* [[VP_K_IV]] = phi  [ i64* [[VP_K_IV_IND_INIT]], [[BB4]] ],  [ i64* [[VP1]], [[BB5]] ]
; CHECK-NEXT:     i32* [[VP_K1_IV]] = phi  [ i32* [[VP_K1_IV_IND_INIT]], [[BB4]] ],  [ i32* [[VP2]], [[BB5]] ]
; CHECK-NEXT:     i64 [[VP0]] = add i64 [[VP_INDVARS_IV]] i64 [[VP_INDVARS_IV_IND_INIT_STEP]]
; CHECK-NEXT:     i64 [[VP_INDVARS_IV_NEXT]] = add i64 [[VP_INDVARS_IV]] i64 1
; CHECK-NEXT:     i1 [[VP_EE:%.*]] = icmp eq i64 [[VP_INDVARS_IV_NEXT]] i64 43
; CHECK-NEXT:     br i1 [[VP_EE]], [[BB1]], [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB2]]: # preds: [[BB0]]
; CHECK-NEXT:       i64* [[VP_K_IV_N2]] = getelementptr inbounds i64* [[VP_K_IV]] i64 2
; CHECK-NEXT:       i32* [[VP_K1_IV_N2]] = getelementptr inbounds i32* [[VP_K1_IV]] i64 1
; CHECK-NEXT:       br [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:       i64* [[VP_K_IV_N1]] = getelementptr inbounds i64* [[VP_K_IV]] i64 2
; CHECK-NEXT:       i32* [[VP_K1_IV_N1]] = getelementptr inbounds i32* [[VP_K1_IV]] i64 1
; CHECK-NEXT:       br [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]: # preds: [[BB2]], [[BB1]]
; CHECK-NEXT:     i64* [[VP_K_IV_NEXT]] = phi  [ i64* [[VP_K_IV_N1]], [[BB1]] ],  [ i64* [[VP_K_IV_N2]], [[BB2]] ]
; CHECK-NEXT:     i32* [[VP_K1_IV_NEXT]] = phi  [ i32* [[VP_K1_IV_N1]], [[BB1]] ],  [ i32* [[VP_K1_IV_N2]], [[BB2]] ]
; CHECK-NEXT:     i32* [[VP2]] = getelementptr inbounds i32* [[VP_K1_IV]] i64 [[VP_K1_IV_IND_INIT_STEP]]
; CHECK-NEXT:     i64* [[VP1]] = getelementptr inbounds i64* [[VP_K_IV]] i64 [[VP_K_IV_IND_INIT_STEP]]
; CHECK-NEXT:     i1 [[VP_EXITCOND:%.*]] = icmp eq i64 [[VP0]] i64 [[N0:%.*]]
; CHECK-NEXT:     br i1 [[VP_EXITCOND]], [[BB6:BB[0-9]+]], [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]]: # preds: [[BB5]]
; CHECK-NEXT:     i64 [[VP_INDVARS_IV_IND_FINAL]] = induction-final{add} i64 1 i64 1
; CHECK-NEXT:     i64* [[VP_K_IV_IND_FINAL]] = induction-final{getelementptr} i64* [[K_IV_B0]] i64 2
; CHECK-NEXT:     i32* [[VP_K1_IV_IND_FINAL]] = induction-final{getelementptr} i32* [[K1_IV_B0]] i64 1
; CHECK-NEXT:     br [[BB7:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB7]]: # preds: [[BB6]]
; CHECK-NEXT:     br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0     [[LCSSA_K0:%.*]] = phi i64* [ [[K_IV_NEXT0:%.*]], [[LATCH0:%.*]] ] i64* [[VP_K_IV_IND_FINAL]] -> i64* [[K_IV_NEXT0]];
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 1     [[LCSSA_K1:%.*]] = phi i32* [ [[K1_IV_NEXT0:%.*]], [[LATCH0:%.*]] ] i32* [[VP_K1_IV_IND_FINAL]] -> i32* [[K1_IV_NEXT0]];
;
; CHECK: Printing Divergence info for foo2:for.body.#1
; CHECK-NEXT: Basic Block: [[BB7:BB[0-9]+]]
; CHECK-NEXT: Uniform: [Shape: Uniform] br [[BB1:BB[0-9]+]]
; CHECK-EMPTY: 
; CHECK-NEXT: Basic Block: [[BB1]]
; CHECK-NEXT: Divergent: [Shape: Unit Stride, Stride: i64 1] i64 [[VP2_INIT:%.*]] = induction-init{add} i64 live-in2 i64 1
; CHECK-NEXT: Uniform: [Shape: Uniform] i64 [[VP2_STEP:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT: Divergent: [Shape: Strided, Stride: i64 16] i64* [[VP3_INIT:%.*]] = induction-init{getelementptr} i64* live-in0 i64 2
; CHECK-NEXT: Uniform: [Shape: Uniform] i64 [[VP3_STEP:%.*]] = induction-init-step{getelementptr} i64 2
; CHECK-NEXT: Divergent: [Shape: Strided, Stride: i64 4] i32* [[VP4_INIT:%.*]] = induction-init{getelementptr} i32* live-in1 i64 1
; CHECK-NEXT: Uniform: [Shape: Uniform] i64 [[VP4_STEP:%.*]] = induction-init-step{getelementptr} i64 1
; CHECK-NEXT: Uniform: [Shape: Uniform] i64 [[VP_IV_STEP:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT: Uniform: [Shape: Uniform] i64 [[VP_TC:%.*]] = orig-trip-count for original loop for.body
; CHECK-NEXT: Uniform: [Shape: Uniform] i64 [[VP_VEC_TC:%.*]] = vector-trip-count i64 [[VP_TC]], UF = 1
; CHECK-NEXT: Uniform: [Shape: Uniform] br [[BB2:BB[0-9]+]]
; CHECK-EMPTY: 
; CHECK-NEXT: Basic Block: [[BB2]]
; CHECK-NEXT: Uniform: [Shape: Uniform] i64 [[VP_IV_PHI:%.*]] = phi  [ i64 0, [[BB1:BB[0-9]+]] ],  [ i64 [[VP_IV_NEXT:%.*]], [[BB5]] ]
; CHECK-NEXT: Divergent: [Shape: Unit Stride, Stride: i64 1] i64 [[VP2_PHI:%.*]] = phi  [ i64 [[VP2_INIT]], [[BB1]] ],  [ i64 [[VP2_NEXT:%.*]], [[BB5]] ]
; CHECK-NEXT: Divergent: [Shape: Strided, Stride: i64 16] i64* [[VP3_PHI:%.*]] = phi  [ i64* [[VP3_INIT]], [[BB1]] ],  [ i64* [[VP3_NEXT:%.*]], [[BB5]] ]
; CHECK-NEXT: Divergent: [Shape: Strided, Stride: i64 4] i32* [[VP4_PHI:%.*]] = phi  [ i32* [[VP4_INIT]], [[BB1]] ],  [ i32* [[VP4_NEXT:%.*]], [[BB5]] ]
; CHECK-NEXT: Divergent: [Shape: Unit Stride, Stride: i64 1] i64 [[VP2_NEXT]] = add i64 [[VP2_PHI]] i64 [[VP2_STEP]]
; CHECK-NEXT: Divergent: [Shape: Unit Stride, Stride: i64 1] i64 [[VP2_INC:%.*]] = add i64 [[VP2_PHI]] i64 1
; CHECK-NEXT: Divergent: [Shape: Random] i1 [[VP2_CMP:%.*]] = icmp eq i64 [[VP2_INC]] i64 43
; CHECK-NEXT: Divergent: [Shape: Random] br i1 [[VP2_CMP]], [[BB3:BB[0-9]+]], [[BB4:BB[0-9]+]]
; CHECK-EMPTY: 
; CHECK-NEXT: Basic Block: [[BB4]]
; CHECK-NEXT: Divergent: [Shape: Strided, Stride: i64 16] i64* [[VP3_GEP0:%.*]] = getelementptr inbounds i64* [[VP3_PHI]] i64 2
; CHECK-NEXT: Divergent: [Shape: Strided, Stride: i64 4] i32* [[VP4_GEP0:%.*]] = getelementptr inbounds i32* [[VP4_PHI]] i64 1
; CHECK-NEXT: Uniform: [Shape: Uniform] br [[BB5]]
; CHECK-EMPTY: 
; CHECK-NEXT: Basic Block: [[BB3]]
; CHECK-NEXT: Divergent: [Shape: Strided, Stride: i64 16] i64* [[VP3_GEP1:%.*]] = getelementptr inbounds i64* [[VP3_PHI]] i64 2
; CHECK-NEXT: Divergent: [Shape: Strided, Stride: i64 4] i32* [[VP4_GEP1:%.*]] = getelementptr inbounds i32* [[VP4_PHI]] i64 1
; CHECK-NEXT: Uniform: [Shape: Uniform] br [[BB5]]
; CHECK-EMPTY: 
; CHECK-NEXT: Basic Block: [[BB5]]
; CHECK-NEXT: Divergent: [Shape: Random] i64* [[VP3_PHI1:%.*]] = phi  [ i64* [[VP3_GEP1]], [[BB3]] ],  [ i64* [[VP3_GEP0]], [[BB4]] ]
; CHECK-NEXT: Divergent: [Shape: Random] i32* [[VP4_PHI1:%.*]] = phi  [ i32* [[VP4_GEP1]], [[BB3]] ],  [ i32* [[VP4_GEP0]], [[BB4]] ]
; CHECK-NEXT: Divergent: [Shape: Strided, Stride: i64 4] i32* [[VP4_NEXT]] = getelementptr inbounds i32* [[VP4_PHI]] i64 [[VP4_STEP:%.*]]
; CHECK-NEXT: Divergent: [Shape: Strided, Stride: i64 16] i64* [[VP3_NEXT]] = getelementptr inbounds i64* [[VP3_PHI]] i64 [[VP3_STEP:%.*]]
; CHECK-NEXT: Uniform: [Shape: Uniform] i64 [[VP_IV_NEXT]] = add i64 [[VP_IV_PHI]] i64 [[VP_IV_STEP]]
; CHECK-NEXT: Uniform: [Shape: Uniform] i1 [[VP_IV_CMP:%.*]] = icmp uge i64 [[VP_IV_NEXT]] i64 [[VP_VEC_TC]]
; CHECK-NEXT: Uniform: [Shape: Uniform] br i1 [[VP_IV_CMP]], [[BB6]], [[BB2]]
; CHECK-EMPTY: 
; CHECK-NEXT: Basic Block: [[BB6]]
; CHECK-NEXT: Uniform: [Shape: Uniform] i64 [[VP_IND0:%.*]] = induction-final{add} i64 1 i64 1
; CHECK-NEXT: Uniform: [Shape: Uniform] i64* [[VP_IND1:%.*]] = induction-final{getelementptr} i64* %k.iv.b i64 2
; CHECK-NEXT: Uniform: [Shape: Uniform] i32* [[VP_1_IND1:%.*]] = induction-final{getelementptr} i32* %k1.iv.b i64 1
; CHECK-NEXT: Uniform: [Shape: Uniform] br [[BB8:BB[0-9]+]]
; CHECK-EMPTY: 
; CHECK-NEXT: Basic Block: [[BB8]]
; CHECK-NEXT: Uniform: [Shape: Uniform] br <External Block>
;
; CHECK: define void @foo2(i64 [[N:%.*]]) local_unnamed_addr {
; CHECK-NEXT: entry:
; CHECK-NEXT:   [[VP_K:%.*]] = alloca i64*, align 4
; CHECK-NEXT:   [[VP_K1:%.*]] = alloca i32*, align 4
; CHECK-NEXT:   store i64* null, i64** [[VP_K]], align 4
; CHECK-NEXT:   store i32* null, i32** [[VP_K1]], align 4
; CHECK-NEXT:   br label [[REG_ENTRY:%.*]]
; CHECK-EMPTY: 
; CHECK-NEXT: reg.entry:                                        ; preds = %entry
; CHECK-NEXT:   br label [[FOR_BODY_LR_PH:%.*]]
; CHECK-EMPTY: 
; CHECK-NEXT: for.body.lr.ph:                                   ; preds = %reg.entry
; CHECK-NEXT:   [[VP_K_IV_B:%.*]] = load i64*, i64** [[VP_K]], align 4
; CHECK-NEXT:   [[VP_K1_IV_B:%.*]] = load i32*, i32** [[VP_K1]], align 4
; CHECK-NEXT:   %0 = add i64 [[N]], -1
; CHECK-NEXT:   br label [[VPlannedBB:%.*]]
; CHECK-EMPTY: 
; CHECK-NEXT: VPlannedBB:                                       ; preds = %for.body.lr.ph
; CHECK-NEXT:   %1 = and i64 %0, 4294967294
; CHECK-NEXT:   %2 = icmp eq i64 0, %1
; CHECK-NEXT:   br i1 %2, label [[MERGE_BLK13:%.*]], label [[VPlannedBB1:%.*]]
; CHECK-EMPTY: 
; CHECK-NEXT: VPlannedBB1:                                      ; preds = %VPlannedBB
; CHECK-NEXT:   br label [[VPlannedBB2:%.*]]
; CHECK-EMPTY: 
; CHECK-NEXT: VPlannedBB2:                                      ; preds = %VPlannedBB1
; CHECK-NEXT:   [[VP_K_IV_BIND_START_BCAST_SPLATINSERT:%.*]] = insertelement <2 x i64*> poison, i64* [[VP_K_IV_B]], i32 0
; CHECK-NEXT:   [[VP_K_IV_BIND_START_BCAST_SPLAT:%.*]] = shufflevector <2 x i64*> [[VP_K_IV_BIND_START_BCAST_SPLATINSERT:%.*]], <2 x i64*> poison, <2 x i32> zeroinitializer
; CHECK-NEXT:   [[VP_VECTOR_GEP:%.*]] = getelementptr inbounds i64, <2 x i64*> [[VP_K_IV_BIND_START_BCAST_SPLAT]], <2 x i64> <i64 0, i64 2>
; CHECK-NEXT:   [[VP_K1_IV_BIND_START_BCAST_SPLATINSERT:%.*]] = insertelement <2 x i32*> poison, i32* [[VP_K1_IV_B]], i32 0
; CHECK-NEXT:   [[VP_K1_IV_BIND_START_BCAST_SPLAT:%.*]] = shufflevector <2 x i32*> [[VP_K1_IV_BIND_START_BCAST_SPLATINSERT:%.*]], <2 x i32*> poison, <2 x i32> zeroinitializer
; CHECK-NEXT:   [[VP_VECTOR_GEP3:%.*]] = getelementptr inbounds i32, <2 x i32*> [[VP_K1_IV_BIND_START_BCAST_SPLAT]], <2 x i64> <i64 0, i64 1>
; CHECK-NEXT:   %3 = and i64 %0, 4294967294
; CHECK-NEXT:   br label [[VECTOR_BODY:%.*]]
; CHECK-EMPTY: 
; CHECK-NEXT: vector.body:                                      ; preds = %VPlannedBB15, %VPlannedBB2
; CHECK-NEXT:   [[VP_UNI_PHI:%.*]] = phi i64 [ 0, [[VPlannedBB2]] ], [ %9, [[VPlannedBB15:%.*]] ]
; CHECK-NEXT:   [[VP_UNI_PHI5:%.*]] = phi i64 [ 1, [[VPlannedBB2]] ], [ %5, [[VPlannedBB15]] ]
; CHECK-NEXT:   [[VP_VEC_PHI:%.*]] = phi <2 x i64> [ <i64 1, i64 2>, [[VPlannedBB2]] ], [ %4, [[VPlannedBB15]] ]
; CHECK-NEXT:   [[VP_UNI_PHI6:%.*]] = phi i64* [ [[VP_K_IV_B]], [[VPlannedBB2]] ], [ [[VP_MM_VECTORGEP18_EXTRACT0:%.*]], [[VPlannedBB15]] ]
; CHECK-NEXT:   [[VP_VEC_PHI7:%.*]] = phi <2 x i64*> [ [[VP_VECTOR_GEP]], [[VPlannedBB2]] ], [ [[VP_MM_VECTORGEP18:%.*]], [[VPlannedBB15]] ]
; CHECK-NEXT:   [[VP_UNI_PHI8:%.*]] = phi i32* [ [[VP_K1_IV_B]], [[VPlannedBB2]] ], [ [[VP_MM_VECTORGEP17_EXTRACT0:%.*]], [[VPlannedBB15]] ]
; CHECK-NEXT:   [[VP_VEC_PHI9:%.*]] = phi <2 x i32*> [ [[VP_VECTOR_GEP3]], [[VPlannedBB2]] ], [ [[VP_MM_VECTORGEP17:%.*]], [[VPlannedBB15]] ]
; CHECK-NEXT:   %4 = add <2 x i64> [[VP_VEC_PHI]], <i64 2, i64 2>
; CHECK-NEXT:   %5 = add i64 [[VP_UNI_PHI5]], 2
; CHECK-NEXT:   %6 = add nuw nsw <2 x i64> [[VP_VEC_PHI]], <i64 1, i64 1>
; CHECK-NEXT:   %7 = icmp eq <2 x i64> %6, <i64 43, i64 43>
; CHECK-NEXT:   %8 = xor <2 x i1> %7, <i1 true, i1 true>
; CHECK-NEXT:   br label [[VPlannedBB10:%.*]]
; CHECK-EMPTY: 
; CHECK-NEXT: VPlannedBB10:                                      ; preds = %vector.body
; CHECK-NEXT:   [[VP_MM_VECTORGEP:%.*]] = getelementptr inbounds i64, <2 x i64*> [[VP_VEC_PHI7]], <2 x i64> <i64 2, i64 2>
; CHECK-NEXT:   [[VP_MM_VECTORGEP11:%.*]] = getelementptr inbounds i32, <2 x i32*> [[VP_VEC_PHI9]], <2 x i64> <i64 1, i64 1>
; CHECK-NEXT:   br label [[VPlannedBB12:%.*]]
; CHECK-EMPTY: 
; CHECK-NEXT: VPlannedBB12:                                      ; preds = %VPlannedBB10
; CHECK-NEXT:   [[VP_MM_VECTORGEP13:%.*]] = getelementptr inbounds i64, <2 x i64*> [[VP_VEC_PHI7]], <2 x i64> <i64 2, i64 2>
; CHECK-NEXT:   [[VP_MM_VECTORGEP14:%.*]] = getelementptr inbounds i32, <2 x i32*> [[VP_VEC_PHI9]], <2 x i64> <i64 1, i64 1>
; CHECK-NEXT:   br label [[VPlannedBB15]]
; CHECK-EMPTY: 
; CHECK-NEXT: VPlannedBB15:                                     ; preds = %VPlannedBB12
; CHECK-NEXT:   %predblend = select <2 x i1> %7, <2 x i64*> [[VP_MM_VECTORGEP13]], <2 x i64*> [[VP_MM_VECTORGEP]]
; CHECK-NEXT:   %predblend16 = select <2 x i1> %7, <2 x i32*> [[VP_MM_VECTORGEP14]], <2 x i32*> [[VP_MM_VECTORGEP11]]
; CHECK-NEXT:   [[VP_MM_VECTORGEP17]] = getelementptr inbounds i32, <2 x i32*> [[VP_VEC_PHI9]], <2 x i64> <i64 2, i64 2>
; CHECK-NEXT:   [[VP_MM_VECTORGEP17_EXTRACT0]] = extractelement <2 x i32*> [[VP_MM_VECTORGEP17]], i32 0
; CHECK-NEXT:   [[VP_MM_VECTORGEP18]] = getelementptr inbounds i64, <2 x i64*> [[VP_VEC_PHI7]], <2 x i64> <i64 4, i64 4>
; CHECK-NEXT:   [[VP_MM_VECTORGEP18_EXTRACT0]] = extractelement <2 x i64*> [[VP_MM_VECTORGEP18]], i32 0
; CHECK-NEXT:   %9 = add i64 [[VP_UNI_PHI]], 2
; CHECK-NEXT:   %10 = icmp uge i64 %9, %3
; CHECK-NEXT:   br i1 %10, label [[VPlannedBB19:%.*]], label [[VECTOR_BODY]], !llvm.loop !0
; CHECK-EMPTY: 
; CHECK-NEXT: VPlannedBB19:                                     ; preds = %VPlannedBB15
; CHECK-NEXT:   %11 = mul i64 1, %3
; CHECK-NEXT:   %12 = add i64 1, %11
; CHECK-NEXT:   %13 = mul i64 2, %3
; CHECK-NEXT:   [[VP_FINAL_GEP:%.*]] = getelementptr inbounds i64, i64* [[VP_K_IV_B]], i64 %13
; CHECK-NEXT:   %14 = mul i64 1, %3
; CHECK-NEXT:   [[VP_FINAL_GEP20:%.*]] = getelementptr inbounds i32, i32* [[VP_K1_IV_B]], i64 %14
; CHECK-NEXT:   br label [[VPlannedBB21:%.*]]
; CHECK-EMPTY: 
;
entry:
  %k = alloca i64*, align 4
  %k1 = alloca i32*, align 4
  store i64* null, i64** %k, align 4
  store i32* null, i32** %k1, align 4
  br label %reg.entry

reg.entry:
  %entry.region = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.LINEAR"(i64** %k, i64 2), "QUAL.OMP.LINEAR"(i32** %k1, i64 1) ]
  br label %for.body.lr.ph

for.body.lr.ph:
  %k.iv.b = load i64*, i64** %k, align 4
  %k1.iv.b = load i32*, i32** %k1, align 4
  br label %for.body

for.body:
  %indvars.iv = phi i64 [ 1, %for.body.lr.ph ], [ %indvars.iv.next, %latch ]
  %k.iv = phi i64* [ %k.iv.b, %for.body.lr.ph ], [ %k.iv.next, %latch ]
  %k1.iv = phi i32* [ %k1.iv.b, %for.body.lr.ph ], [ %k1.iv.next, %latch ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %ee = icmp eq i64 %indvars.iv.next, 43
  br i1 %ee, label %then, label %else

then:
  %k.iv.n1 = getelementptr inbounds i64, i64* %k.iv, i64 2
  %k1.iv.n1 = getelementptr inbounds i32, i32* %k1.iv, i64 1
  br label %latch
else:
  %k.iv.n2 = getelementptr inbounds i64, i64* %k.iv, i64 2
  %k1.iv.n2 = getelementptr inbounds i32, i32* %k1.iv, i64 1
  br label %latch

latch:
  %k.iv.next = phi i64* [%k.iv.n1, %then ], [%k.iv.n2, %else ]
  %k1.iv.next = phi i32* [%k1.iv.n1, %then ], [%k1.iv.n2, %else ]
  %exitcond = icmp eq i64 %indvars.iv.next, %N
  br i1 %exitcond, label %for.cond.cleanup.loopexit, label %for.body

for.cond.cleanup.loopexit:
  %lcssa.k = phi i64* [%k.iv.next, %latch]
  %lcssa.k1 = phi i32* [%k1.iv.next, %latch]
  br label %for.cond.cleanup

for.cond.cleanup:
  call void @llvm.directive.region.exit(token %entry.region) [ "DIR.OMP.END.SIMD"() ]
  ret void
}
declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)

