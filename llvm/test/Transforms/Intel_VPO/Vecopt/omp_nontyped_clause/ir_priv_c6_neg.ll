; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; Test to check that we don't allow using of a lastprivate as operand 0 of select instruction.
; RUN: opt -disable-output -vplan-vec -vplan-force-vf=4 -vplan-enable-all-liveouts -vplan-print-after-plain-cfg  -debug-only=vploop-analysis -disable-vplan-codegen %s 2>&1 | FileCheck %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: mustprogress nounwind uwtable
define dso_local i32 @_Z3fooPii(i1 %a, i64 %N) local_unnamed_addr #0 {
; CHECK-LABEL:  VPlan after importing plain CFG:
; CHECK-NEXT:  VPlan IR for: _Z3fooPii:omp.inner.for.body.#{{[0-9]+}}
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], [[BB2]]
; CHECK-NEXT:     i64 [[VP_INDVARS_IV:%.*]] = phi  [ i64 0, [[BB1]] ],  [ i64 [[VP_INDVARS_IV_NEXT:%.*]], [[BB2]] ]
; CHECK-NEXT:     i32 [[VP_V2_1:%.*]] = phi  [ i32 [[V2_LPRIV_PROMOTED0:%.*]], [[BB1]] ],  [ i32 [[VP_V2_2:%.*]], [[BB2]] ]
; CHECK-NEXT:     i1 [[VP_V1_1:%.*]] = phi  [ i1 false, [[BB1]] ],  [ i1 [[VP_V1_2:%.*]], [[BB2]] ]
; CHECK-NEXT:     i32 [[VP_V2_2]] = select i1 [[VP_V1_1]] i32 2 i32 1
; CHECK-NEXT:     i1 [[VP_V1_2]] = select i1 [[A0:%.*]] i1 [[VP_V1_1]] i1 true
; CHECK-NEXT:     i64 [[VP_INDVARS_IV_NEXT]] = add i64 [[VP_INDVARS_IV]] i64 1
; CHECK-NEXT:     i1 [[VP_EXITCOND_NOT:%.*]] = icmp eq i64 [[VP_INDVARS_IV_NEXT]] i64 [[N0:%.*]]
; CHECK-NEXT:     br i1 [[VP_EXITCOND_NOT]], [[BB3:BB[0-9]+]], [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: [[BB2]]
; CHECK-NEXT:     br [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: [[BB3]]
; CHECK-NEXT:     br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0     [[DOTLCSSA330:%.*]] = phi i32 [ [[V2_20:%.*]], [[OMP_INNER_FOR_BODY0:%.*]] ] i32 [[VP_V2_2]] -> i32 [[V2_20]]
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 1     [[DOTLCSSA0:%.*]] = phi i1 [ [[V1_20:%.*]], [[OMP_INNER_FOR_BODY0]] ] i1 [[VP_V1_2]] -> i1 [[V1_20]]
;
; CHECK:       Incorrect use of private:
; CHECK-NEXT:  i32 [[VP_V2_2]] = select i1 [[VP_V1_1]] i32 2 i32 1
;
entry:
  %v2.lpriv = alloca i32, align 4
  %v1.lpriv = alloca i1, align 1
  %i.linear.iv = alloca i32, align 4
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %entry
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.LASTPRIVATE"(i1* %v1.lpriv), "QUAL.OMP.LASTPRIVATE"(i32* %v2.lpriv), "QUAL.OMP.NORMALIZED.IV"(i8* null), "QUAL.OMP.NORMALIZED.UB"(i8* null), "QUAL.OMP.LINEAR:IV"(i32* %i.linear.iv, i32 1) ]
  br label %DIR.OMP.SIMD.131

DIR.OMP.SIMD.131:                                 ; preds = %DIR.OMP.SIMD.1
  %v2.lpriv.promoted = load i32, i32* %v2.lpriv, align 4
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %DIR.OMP.SIMD.131, %omp.inner.for.body
  %indvars.iv = phi i64 [ 0, %DIR.OMP.SIMD.131 ], [ %indvars.iv.next, %omp.inner.for.body ]
  %v2.1 = phi i32 [ %v2.lpriv.promoted, %DIR.OMP.SIMD.131 ], [ %v2.2, %omp.inner.for.body ]
  %v1.1 = phi i1 [ 0, %DIR.OMP.SIMD.131 ], [ %v1.2, %omp.inner.for.body ]
  %v2.2 = select i1 %v1.1, i32 2, i32 1
  %v1.2 = select i1 %a, i1 %v1.1, i1 1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %N
  br i1 %exitcond.not, label %DIR.OMP.END.SIMD.228, label %omp.inner.for.body

DIR.OMP.END.SIMD.228:                             ; preds = %omp.inner.for.body
  %.lcssa33 = phi i32 [ %v2.2, %omp.inner.for.body ]
  %.lcssa = phi i1 [ %v1.2, %omp.inner.for.body ]
  store i1 %.lcssa, i1* %v1.lpriv, align 1
  store i32 %.lcssa33, i32* %v2.lpriv, align 4
  br label %DIR.OMP.END.SIMD.2

DIR.OMP.END.SIMD.2:                               ; preds = %DIR.OMP.END.SIMD.228
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.OMP.END.SIMD.3

DIR.OMP.END.SIMD.3:                               ; preds = %DIR.OMP.END.SIMD.2
  ret i32 0
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)

