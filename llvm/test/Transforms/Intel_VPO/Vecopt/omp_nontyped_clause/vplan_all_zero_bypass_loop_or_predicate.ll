; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; REQUIRES: asserts
; RUN: opt < %s -passes="vplan-vec" -vplan-enable-all-zero-bypass-loops -vplan-print-after-all-zero-bypass\
; RUN:  -vplan-force-vf=4 -disable-output -disable-vplan-codegen -S 2>&1 | FileCheck %s

; This test should insert an all-zero bypass around divergent loop with preheader BB4, header BB5. This test
; stresses the region formation logic by using a combination of 'and' and 'or' predicate instructions within
; the loop body.

declare token @llvm.directive.region.entry() #2

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #2

; Function Attrs: nounwind uwtable
define dso_local void @foo(i32* nocapture readonly %a, i32* nocapture %b, i32* nocapture %c, i32 %x, i32 %y) local_unnamed_addr #0 {
; CHECK-LABEL:  VPlan after all zero bypass insertion:
; CHECK-NEXT:  VPlan IR for: foo:omp.inner.for.body
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     [DA: Div] i32* [[VP_I_LPRIV:%.*]] = allocate-priv i32*, OrigAlign = 4
; CHECK-NEXT:     [DA: Div] i8* [[VP_I_LPRIV_BCAST:%.*]] = bitcast i32* [[VP_I_LPRIV]]
; CHECK-NEXT:     [DA: Div] call i64 4 i8* [[VP_I_LPRIV_BCAST]] void (i64, i8*)* @llvm.lifetime.start.p0i8
; CHECK-NEXT:     [DA: Div] i64 [[VP_INDVARS_IV_IND_INIT:%.*]] = induction-init{add} i64 live-in0 i64 1
; CHECK-NEXT:     [DA: Uni] i64 [[VP_INDVARS_IV_IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:     [DA: Uni] i64 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i64 256, UF = 1
; CHECK-NEXT:     [DA: Uni] br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], [[BB3:BB[0-9]+]]
; CHECK-NEXT:     [DA: Div] i64 [[VP_INDVARS_IV:%.*]] = phi  [ i64 [[VP_INDVARS_IV_NEXT:%.*]], [[BB3]] ],  [ i64 [[VP_INDVARS_IV_IND_INIT]], [[BB1]] ]
; CHECK-NEXT:     [DA: Div] i32* [[VP_ARRAYIDX:%.*]] = getelementptr inbounds i32* [[A0:%.*]] i64 [[VP_INDVARS_IV]]
; CHECK-NEXT:     [DA: Div] i32 [[VP0:%.*]] = load i32* [[VP_ARRAYIDX]]
; CHECK-NEXT:     [DA: Div] i1 [[VP_CMP127:%.*]] = icmp slt i32 [[VP0]] i32 256
; CHECK-NEXT:     [DA: Uni] br all.zero.bypass.begin54
; CHECK-EMPTY:
; CHECK-NEXT:    all.zero.bypass.begin54: # preds: [[BB2]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP_ALL_ZERO_CHECK:%.*]] = all-zero-check i1 [[VP_CMP127]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP_ALL_ZERO_CHECK]], all.zero.bypass.end56, [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB4]]: # preds: all.zero.bypass.begin54
; CHECK-NEXT:       [DA: Div] i1 [[VP1:%.*]] = block-predicate i1 [[VP_CMP127]]
; CHECK-NEXT:       [DA: Div] i32* [[VP_ARRAYIDX9:%.*]] = getelementptr inbounds i32* [[B0:%.*]] i64 [[VP_INDVARS_IV]]
; CHECK-NEXT:       [DA: Uni] i32 [[VP_DIV:%.*]] = sdiv i32 [[X0:%.*]] i32 [[Y0:%.*]]
; CHECK-NEXT:       [DA: Div] i32* [[VP_ARRAYIDX11:%.*]] = getelementptr inbounds i32* [[C0:%.*]] i64 [[VP_INDVARS_IV]]
; CHECK-NEXT:       [DA: Uni] br [[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB5]]: # preds: [[BB6:BB[0-9]+]], [[BB4]]
; CHECK-NEXT:       [DA: Div] i32 [[VP2:%.*]] = phi  [ i32 [[VP0]], [[BB4]] ],  [ i32 [[VP__PRE:%.*]], [[BB6]] ]
; CHECK-NEXT:       [DA: Div] i32 [[VP_STOREMERGE28:%.*]] = phi  [ i32 [[VP0]], [[BB4]] ],  [ i32 [[VP_INC:%.*]], [[BB6]] ]
; CHECK-NEXT:       [DA: Div] i1 [[VP_LOOP_MASK:%.*]] = phi  [ i1 [[VP_CMP127]], [[BB4]] ],  [ i1 [[VP_LOOP_MASK_NEXT:%.*]], [[BB6]] ]
; CHECK-NEXT:       [DA: Div] i1 [[VP3:%.*]] = block-predicate i1 [[VP_CMP127]]
; CHECK-NEXT:       [DA: Uni] br [[BB7:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB7]]: # preds: [[BB5]]
; CHECK-NEXT:       [DA: Div] i1 [[VP_BB5_BR_VP_LOOP_MASK:%.*]] = select i1 [[VP_CMP127]] i1 [[VP_LOOP_MASK]] i1 false
; CHECK-NEXT:       [DA: Uni] br [[BB8:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB8]]: # preds: [[BB7]]
; CHECK-NEXT:       [DA: Div] i1 [[VP4:%.*]] = block-predicate i1 [[VP_BB5_BR_VP_LOOP_MASK]]
; CHECK-NEXT:       [DA: Uni] br [[BB9:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB9]]: # preds: [[BB8]]
; CHECK-NEXT:       [DA: Div] i1 [[VP5:%.*]] = block-predicate i1 [[VP_BB5_BR_VP_LOOP_MASK]]
; CHECK-NEXT:       [DA: Div] i1 [[VP_PIVOT:%.*]] = icmp slt i32 [[VP2]] i32 24
; CHECK-NEXT:       [DA: Div] i1 [[VP_PIVOT_NOT:%.*]] = not i1 [[VP_PIVOT]]
; CHECK-NEXT:       [DA: Uni] br [[BB10:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB10]]: # preds: [[BB9]]
; CHECK-NEXT:       [DA: Div] i1 [[VP_BB6_BR_VP_PIVOT_NOT:%.*]] = select i1 [[VP_BB5_BR_VP_LOOP_MASK]] i1 [[VP_PIVOT_NOT]] i1 false
; CHECK-NEXT:       [DA: Div] i1 [[VP_BB6_BR_VP_PIVOT:%.*]] = select i1 [[VP_BB5_BR_VP_LOOP_MASK]] i1 [[VP_PIVOT]] i1 false
; CHECK-NEXT:       [DA: Uni] br [[BB11:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB11]]: # preds: [[BB10]]
; CHECK-NEXT:       [DA: Div] i1 [[VP6:%.*]] = block-predicate i1 [[VP_BB6_BR_VP_PIVOT_NOT]]
; CHECK-NEXT:       [DA: Div] i1 [[VP_SWITCHLEAF31:%.*]] = icmp eq i32 [[VP2]] i32 24
; CHECK-NEXT:       [DA: Div] i1 [[VP_SWITCHLEAF31_NOT:%.*]] = not i1 [[VP_SWITCHLEAF31]]
; CHECK-NEXT:       [DA: Uni] br [[BB12:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB12]]: # preds: [[BB11]]
; CHECK-NEXT:       [DA: Div] i1 [[VP_BB8_BR_VP_SWITCHLEAF31_NOT:%.*]] = select i1 [[VP_BB6_BR_VP_PIVOT_NOT]] i1 [[VP_SWITCHLEAF31_NOT]] i1 false
; CHECK-NEXT:       [DA: Div] i1 [[VP_BB8_BR_VP_SWITCHLEAF31:%.*]] = select i1 [[VP_BB6_BR_VP_PIVOT_NOT]] i1 [[VP_SWITCHLEAF31]] i1 false
; CHECK-NEXT:       [DA: Uni] br [[BB13:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB13]]: # preds: [[BB12]]
; CHECK-NEXT:       [DA: Div] i1 [[VP7:%.*]] = block-predicate i1 [[VP_BB6_BR_VP_PIVOT]]
; CHECK-NEXT:       [DA: Div] i1 [[VP_SWITCHLEAF:%.*]] = icmp eq i32 [[VP2]] i32 3
; CHECK-NEXT:       [DA: Div] i1 [[VP_SWITCHLEAF_NOT:%.*]] = not i1 [[VP_SWITCHLEAF]]
; CHECK-NEXT:       [DA: Uni] br [[BB14:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB14]]: # preds: [[BB13]]
; CHECK-NEXT:       [DA: Div] i1 [[VP_BB7_BR_VP_SWITCHLEAF_NOT:%.*]] = select i1 [[VP_BB6_BR_VP_PIVOT]] i1 [[VP_SWITCHLEAF_NOT]] i1 false
; CHECK-NEXT:       [DA: Div] i1 [[VP_BB7_BR_VP_SWITCHLEAF:%.*]] = select i1 [[VP_BB6_BR_VP_PIVOT]] i1 [[VP_SWITCHLEAF]] i1 false
; CHECK-NEXT:       [DA: Uni] br [[BB15:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB15]]: # preds: [[BB14]]
; CHECK-NEXT:       [DA: Div] i1 [[VP8:%.*]] = or i1 [[VP_BB8_BR_VP_SWITCHLEAF31_NOT]] i1 [[VP_BB7_BR_VP_SWITCHLEAF_NOT]]
; CHECK-NEXT:       [DA: Div] i1 [[VP9:%.*]] = block-predicate i1 [[VP8]]
; CHECK-NEXT:       [DA: Uni] br [[BB16:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB16]]: # preds: [[BB15]]
; CHECK-NEXT:       [DA: Div] i1 [[VP10:%.*]] = or i1 [[VP_BB8_BR_VP_SWITCHLEAF31]] i1 [[VP_BB7_BR_VP_SWITCHLEAF]]
; CHECK-NEXT:       [DA: Div] i1 [[VP11:%.*]] = block-predicate i1 [[VP10]]
; CHECK-NEXT:       [DA: Div] store i32 [[SUB0:%.*]] i32* [[VP_ARRAYIDX9]]
; CHECK-NEXT:       [DA: Uni] br [[BB17:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB17]]: # preds: [[BB16]]
; CHECK-NEXT:       [DA: Div] i1 [[VP12:%.*]] = block-predicate i1 [[VP_BB5_BR_VP_LOOP_MASK]]
; CHECK-NEXT:       [DA: Div] store i32 [[VP_DIV]] i32* [[VP_ARRAYIDX11]]
; CHECK-NEXT:       [DA: Div] i32 [[VP_INC]] = add i32 [[VP_STOREMERGE28]] i32 1
; CHECK-NEXT:       [DA: Div] i1 [[VP_EXITCOND:%.*]] = icmp eq i32 [[VP_INC]] i32 256
; CHECK-NEXT:       [DA: Div] i1 [[VP_EXITCOND_NOT:%.*]] = not i1 [[VP_EXITCOND]]
; CHECK-NEXT:       [DA: Uni] br [[BB18:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB18]]: # preds: [[BB17]]
; CHECK-NEXT:       [DA: Div] i1 [[VP_BB11_BR_VP_EXITCOND_NOT:%.*]] = select i1 [[VP_BB5_BR_VP_LOOP_MASK]] i1 [[VP_EXITCOND_NOT]] i1 false
; CHECK-NEXT:       [DA: Uni] br [[BB19:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB19]]: # preds: [[BB18]]
; CHECK-NEXT:       [DA: Div] i1 [[VP13:%.*]] = block-predicate i1 [[VP_BB11_BR_VP_EXITCOND_NOT]]
; CHECK-NEXT:       [DA: Div] i32 [[VP__PRE]] = load i32* [[VP_ARRAYIDX]]
; CHECK-NEXT:       [DA: Uni] br [[NEW_LOOP_LATCH0:new.loop.latch[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[NEW_LOOP_LATCH0]]: # preds: [[BB19]]
; CHECK-NEXT:       [DA: Div] i1 [[VP_TAKEBACKEDGECOND_BLEND_BB13:%.*]] = blend [ i1 false, i1 [[VP_BB5_BR_VP_LOOP_MASK]] ], [ i1 true, i1 [[VP_BB11_BR_VP_EXITCOND_NOT]] ]
; CHECK-NEXT:       [DA: Div] i1 [[VP14:%.*]] = block-predicate i1 [[VP_BB5_BR_VP_LOOP_MASK]]
; CHECK-NEXT:       [DA: Uni] br [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB6]]: # preds: [[NEW_LOOP_LATCH0]]
; CHECK-NEXT:       [DA: Div] i1 [[VP15:%.*]] = block-predicate i1 [[VP_CMP127]]
; CHECK-NEXT:       [DA: Div] i1 [[VP_LOOP_MASK_NEXT]] = select i1 [[VP_LOOP_MASK]] i1 [[VP_TAKEBACKEDGECOND_BLEND_BB13]] i1 false
; CHECK-NEXT:       [DA: Uni] i1 [[VP16:%.*]] = all-zero-check i1 [[VP_LOOP_MASK_NEXT]]
; CHECK-NEXT:       [DA: Uni] br i1 [[VP16]], [[BB20:BB[0-9]+]], [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB20]]: # preds: [[BB6]]
; CHECK-NEXT:       [DA: Div] i1 [[VP17:%.*]] = block-predicate i1 [[VP_CMP127]]
; CHECK-NEXT:       [DA: Uni] br all.zero.bypass.end56
; CHECK-EMPTY:
; CHECK-NEXT:    all.zero.bypass.end56: # preds: [[BB20]], all.zero.bypass.begin54
; CHECK-NEXT:     [DA: Uni] br [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: all.zero.bypass.end56
; CHECK-NEXT:     [DA: Div] i64 [[VP_INDVARS_IV_NEXT]] = add i64 [[VP_INDVARS_IV]] i64 [[VP_INDVARS_IV_IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP_EXITCOND29:%.*]] = icmp uge i64 [[VP_INDVARS_IV_NEXT]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP_EXITCOND29]], [[BB21:BB[0-9]+]], [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB21]]: # preds: [[BB3]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP_INDVARS_IV_IND_FINAL:%.*]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Uni] br [[BB22:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB22]]: # preds: [[BB21]]
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   no underlying for i64 [[VP_INDVARS_IV_IND_FINAL]]
;
omp.inner.for.body.lr.ph:
  %i.lpriv = alloca i32, align 4
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %omp.inner.for.body.lr.ph
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.NORMALIZED.IV"(i8* null), "QUAL.OMP.NORMALIZED.UB"(i8* null), "QUAL.OMP.LASTPRIVATE"(i32* %i.lpriv) ]
  br label %DIR.OMP.SIMD.2

DIR.OMP.SIMD.2:                                   ; preds = %DIR.OMP.SIMD.1
  %sub = sub nsw i32 %x, %y
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %for.end, %DIR.OMP.SIMD.2
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.end ], [ 0, %DIR.OMP.SIMD.2 ]
  %arrayidx = getelementptr inbounds i32, i32* %a, i64 %indvars.iv
  %1 = load i32, i32* %arrayidx, align 4
  %cmp127 = icmp slt i32 %1, 256
  br i1 %cmp127, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %omp.inner.for.body
  %arrayidx9 = getelementptr inbounds i32, i32* %b, i64 %indvars.iv
  %div = sdiv i32 %x, %y
  %arrayidx11 = getelementptr inbounds i32, i32* %c, i64 %indvars.iv
  br label %for.body

for.body:                                         ; preds = %if.end.for.body_crit_edge, %for.body.lr.ph
  %2 = phi i32 [ %1, %for.body.lr.ph ], [ %.pre, %if.end.for.body_crit_edge ]
  %storemerge28 = phi i32 [ %1, %for.body.lr.ph ], [ %inc, %if.end.for.body_crit_edge ]
  br label %NodeBlock

NodeBlock:                                        ; preds = %for.body
  %Pivot = icmp slt i32 %2, 24
  br i1 %Pivot, label %LeafBlock, label %LeafBlock30

LeafBlock30:                                      ; preds = %NodeBlock
  %SwitchLeaf31 = icmp eq i32 %2, 24
  br i1 %SwitchLeaf31, label %if.then, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %2, 3
  br i1 %SwitchLeaf, label %if.then, label %NewDefault

if.then:                                          ; preds = %LeafBlock30, %LeafBlock
  store i32 %sub, i32* %arrayidx9, align 4
  br label %if.end

NewDefault:                                       ; preds = %LeafBlock30, %LeafBlock
  br label %if.end

if.end:                                           ; preds = %NewDefault, %if.then
  store i32 %div, i32* %arrayidx11, align 4
  %inc = add i32 %storemerge28, 1
  %exitcond = icmp eq i32 %inc, 256
  br i1 %exitcond, label %for.cond.for.end_crit_edge, label %if.end.for.body_crit_edge

if.end.for.body_crit_edge:                        ; preds = %if.end
  %.pre = load i32, i32* %arrayidx, align 4
  br label %for.body

for.cond.for.end_crit_edge:                       ; preds = %if.end
  br label %for.end

for.end:                                          ; preds = %for.cond.for.end_crit_edge, %omp.inner.for.body
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond29 = icmp eq i64 %indvars.iv.next, 256
  br i1 %exitcond29, label %DIR.OMP.END.SIMD.4, label %omp.inner.for.body

DIR.OMP.END.SIMD.4:                               ; preds = %for.end
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.OMP.END.SIMD.3

DIR.OMP.END.SIMD.3:                               ; preds = %DIR.OMP.END.SIMD.4
  ret void
}
