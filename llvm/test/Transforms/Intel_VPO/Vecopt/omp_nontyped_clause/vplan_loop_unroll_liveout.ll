; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -opaque-pointers=0 -vplan-enable-soa=false -S < %s -passes=vplan-vec,loop-simplify --vplan-force-vf=4\
; RUN: --vplan-force-uf=3 --vplan-print-after-unroll \
; RUN: -vplan-entities-dump | FileCheck %s

; int foo(int *a, int n) {
;   int res;
;   #pragma omp simd
;   for (int i = 0; i < n; i++) {
;     int b = a[i];
;     res = b;
;   }
;   return res;
; }

define dso_local i32 @_Z3fooPii(i32* nocapture readonly %a, i32 %n) local_unnamed_addr #0 {
; CHECK-LABEL:  VPlan after VPlan loop unrolling:
; CHECK-NEXT:  VPlan IR for: _Z3fooPii:omp.inner.for.body
; CHECK-NEXT:  Loop Entities of the loop with header [[BB0:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:  Induction list
; CHECK-NEXT:   IntInduction(+) Start: i64 0 Step: i64 1 StartVal: i64 0 EndVal: i64 2147483647 BinOp: [DA: Div] i64 [[VP_INDVARS_IV_NEXT:%.*]] = add i64 [[VP_INDVARS_IV:%.*]] i64 [[VP_INDVARS_IV_IND_INIT_STEP:%.*]]
; CHECK-NEXT:    Linked values: i64 [[VP_INDVARS_IV]], i64 [[VP_INDVARS_IV_NEXT]], i64 [[VP_INDVARS_IV_IND_INIT:%.*]], i64 [[VP_INDVARS_IV_IND_INIT_STEP]], i64 [[VP_INDVARS_IV_IND_FINAL:%.*]],
; CHECK:       Private list
; CHECK-EMPTY:
; CHECK-NEXT:    Private tag: InMemory
; CHECK-NEXT:    Linked values: i32* [[B_PRIV0:%.*]], i32* [[VP_B_PRIV:%.*]],
; CHECK-NEXT:   Memory: i32* [[B_PRIV0]]
; CHECK-EMPTY:
; CHECK-NEXT:    Exit instr: [DA: Div] i32 [[VP0:%.*]] = load i32* [[VP_ARRAYIDX:%.*]]
; CHECK-NEXT:    Linked values: i32 [[VP0]], i32 [[VP__PRIV_FINAL:%.*]],
; CHECK:         [[BB1:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]]
; CHECK-NEXT:     [DA: Div] i32* [[VP_B_PRIV]] = allocate-priv i32*, OrigAlign = 4
; CHECK-NEXT:     [DA: Div] i8* [[VP_B_PRIV_BCAST:%.*]] = bitcast i32* [[VP_B_PRIV]]
; CHECK-NEXT:     [DA: Div] call i64 4 i8* [[VP_B_PRIV_BCAST]] void (i64, i8*)* @llvm.lifetime.start.p0i8 [Serial]
; CHECK-NEXT:     [DA: Div] i64 [[VP_INDVARS_IV_IND_INIT]] = induction-init{add} i64 live-in1 i64 1
; CHECK-NEXT:     [DA: Uni] i64 [[VP_INDVARS_IV_IND_INIT_STEP]] = induction-init-step{add} i64 1
; CHECK-NEXT:     [DA: Uni] i64 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i64 [[WIDE_TRIP_COUNT210:%.*]], UF = 3
; CHECK-NEXT:     [DA: Uni] br [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB0]]: # preds: [[BB2]], cloned.[[BB3:BB[0-9]+]]
; CHECK-NEXT:     [DA: Div] i64 [[VP_INDVARS_IV]] = phi  [ i64 [[VP_INDVARS_IV_IND_INIT]], [[BB2]] ],  [ i64 [[VP_INDVARS_IV_NEXT_1:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] i32* [[VP_ARRAYIDX]] = getelementptr inbounds i32* [[A0:%.*]] i64 [[VP_INDVARS_IV]]
; CHECK-NEXT:     [DA: Div] i32 [[VP0]] = load i32* [[VP_ARRAYIDX]]
; CHECK-NEXT:     [DA: Div] i64 [[VP_INDVARS_IV_NEXT]] = add i64 [[VP_INDVARS_IV]] i64 [[VP_INDVARS_IV_IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP_VECTOR_LOOP_EXITCOND:%.*]] = icmp uge i64 [[VP_INDVARS_IV_NEXT]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br cloned.[[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB4]]: # preds: [[BB0]]
; CHECK-NEXT:     [DA: Div] i32* [[VP_ARRAYIDX_1:%.*]] = getelementptr inbounds i32* [[A0]] i64 [[VP_INDVARS_IV_NEXT]]
; CHECK-NEXT:     [DA: Div] i32 [[VP1:%.*]] = load i32* [[VP_ARRAYIDX_1]]
; CHECK-NEXT:     [DA: Div] i64 [[VP_INDVARS_IV_NEXT_2:%.*]] = add i64 [[VP_INDVARS_IV_NEXT]] i64 [[VP_INDVARS_IV_IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP2:%.*]] = icmp uge i64 [[VP_INDVARS_IV_NEXT_2]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br cloned.[[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB3]]: # preds: cloned.[[BB4]]
; CHECK-NEXT:     [DA: Div] i32* [[VP_ARRAYIDX_2:%.*]] = getelementptr inbounds i32* [[A0]] i64 [[VP_INDVARS_IV_NEXT_2]]
; CHECK-NEXT:     [DA: Div] i32 [[VP3:%.*]] = load i32* [[VP_ARRAYIDX_2]]
; CHECK-NEXT:     [DA: Div] i64 [[VP_INDVARS_IV_NEXT_1]] = add i64 [[VP_INDVARS_IV_NEXT_2]] i64 [[VP_INDVARS_IV_IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP4:%.*]] = icmp uge i64 [[VP_INDVARS_IV_NEXT_1]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP4]], [[BB5:BB[0-9]+]], [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]: # preds: cloned.[[BB3]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP_INDVARS_IV_IND_FINAL]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Div] i8* [[VP_B_PRIV_BCAST1:%.*]] = bitcast i32* [[VP_B_PRIV]]
; CHECK-NEXT:     [DA: Div] call i64 4 i8* [[VP_B_PRIV_BCAST1]] void (i64, i8*)* @llvm.lifetime.end.p0i8 [Serial]
; CHECK-NEXT:     [DA: Uni] i32 [[VP__PRIV_FINAL]] = private-final-uc i32 [[VP3]]
; CHECK-NEXT:     [DA: Uni] br [[BB6:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]]: # preds: [[BB5]]
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0     [[DOTLCSSA0:%.*]] = phi i32 [ [[TMP2:%.*]], [[OMP_INNER_FOR_BODY0:%.*]] ] i32 [[VP__PRIV_FINAL]] -> i32 [[TMP2]]
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 1   no underlying for i64 [[VP_INDVARS_IV_IND_FINAL]]
;
; CHECK:  define dso_local i32 @_Z3fooPii(i32* nocapture readonly [[A0]], i32 [[N0:%.*]]) local_unnamed_addr {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP0:%.*]] = icmp sgt i32 [[N0]], 0
; CHECK-NEXT:    [[B_PRIV_VEC0:%.*]] = alloca <4 x i32>, align 16
; CHECK-NEXT:    [[B_PRIV_VEC_BC0:%.*]] = bitcast <4 x i32>* [[B_PRIV_VEC0]] to i32*
; CHECK-NEXT:    [[B_PRIV_VEC_BASE_ADDR0:%.*]] = getelementptr i32, i32* [[B_PRIV_VEC_BC0]], <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    br i1 [[CMP0]], label [[DIR_OMP_SIMD_20:%.*]], label [[OMP_PRECOND_END0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.SIMD.2:
; CHECK-NEXT:    [[B_PRIV0]] = alloca i32, align 4
; CHECK-NEXT:    br label [[DIR_OMP_SIMD_10:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.SIMD.1:
; CHECK-NEXT:    br label [[DIR_OMP_SIMD_2220:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.SIMD.222:
; CHECK-NEXT:    [[TMP0:%.*]] = bitcast i32* [[B_PRIV0]] to i8*
; CHECK-NEXT:    [[WIDE_TRIP_COUNT210]] = zext i32 [[N0]] to i64
; CHECK-NEXT:    br label [[VPLANNEDBB0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB:
; CHECK-NEXT:    [[N_MOD_VF0:%.*]] = urem i64 [[WIDE_TRIP_COUNT210]], 12
; CHECK-NEXT:    [[N_VEC0:%.*]] = sub nuw nsw i64 [[WIDE_TRIP_COUNT210]], [[N_MOD_VF0]]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp eq i64 0, [[N_VEC0]]
; CHECK-NEXT:    br i1 [[TMP1]], label %[[MERGE_BLK0:.*]], label [[VPLANNEDBB10:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB1:
; CHECK-NEXT:    br label [[VPLANNEDBB20:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB2:
; CHECK-NEXT:    [[B_PRIV_VEC0_BCAST:%.*]] = bitcast <4 x i32>* [[B_PRIV_VEC0]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 16, i8* [[B_PRIV_VEC0_BCAST]])
; CHECK-NEXT:    [[N_MOD_VF30:%.*]] = urem i64 [[WIDE_TRIP_COUNT210]], 12
; CHECK-NEXT:    [[N_VEC40:%.*]] = sub nuw nsw i64 [[WIDE_TRIP_COUNT210]], [[N_MOD_VF30]]
; CHECK-NEXT:    br label [[VECTOR_BODY0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  vector.body:
; CHECK-NEXT:    [[UNI_PHI0:%.*]] = phi i64 [ 0, [[VPLANNEDBB20]] ], [ [[TMP12:%.*]], [[VPLANNEDBB90:%.*]] ]
; CHECK-NEXT:    [[VEC_PHI0:%.*]] = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, [[VPLANNEDBB20]] ], [ [[TMP11:%.*]], [[VPLANNEDBB90]] ]
; CHECK-NEXT:    [[SCALAR_GEP0:%.*]] = getelementptr inbounds i32, i32* [[A0]], i64 [[UNI_PHI0]]
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast i32* [[SCALAR_GEP0]] to <4 x i32>*
; CHECK-NEXT:    [[WIDE_LOAD0:%.*]] = load <4 x i32>, <4 x i32>* [[TMP2]], align 4
; CHECK-NEXT:    [[TMP3:%.*]] = add nuw nsw <4 x i64> [[VEC_PHI0]], <i64 4, i64 4, i64 4, i64 4>
; CHECK-NEXT:    [[TMP4:%.*]] = add nuw nsw i64 [[UNI_PHI0]], 4
; CHECK-NEXT:    [[TMP5:%.*]] = icmp uge i64 [[TMP4]], [[N_VEC40]]
; CHECK-NEXT:    br label [[VPLANNEDBB60:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB6:
; CHECK-NEXT:    [[SCALAR_GEP70:%.*]] = getelementptr inbounds i32, i32* [[A0]], i64 [[TMP4]]
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast i32* [[SCALAR_GEP70]] to <4 x i32>*
; CHECK-NEXT:    [[WIDE_LOAD80:%.*]] = load <4 x i32>, <4 x i32>* [[TMP6]], align 4
; CHECK-NEXT:    [[TMP7:%.*]] = add nuw nsw <4 x i64> [[TMP3]], <i64 4, i64 4, i64 4, i64 4>
; CHECK-NEXT:    [[TMP8:%.*]] = add nuw nsw i64 [[TMP4]], 4
; CHECK-NEXT:    [[TMP9:%.*]] = icmp uge i64 [[TMP8]], [[N_VEC40]]
; CHECK-NEXT:    br label [[VPLANNEDBB90]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB9:
; CHECK-NEXT:    [[SCALAR_GEP100:%.*]] = getelementptr inbounds i32, i32* [[A0]], i64 [[TMP8]]
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast i32* [[SCALAR_GEP100]] to <4 x i32>*
; CHECK-NEXT:    [[WIDE_LOAD110:%.*]] = load <4 x i32>, <4 x i32>* [[TMP10]], align 4
; CHECK-NEXT:    [[TMP11]] = add nuw nsw <4 x i64> [[TMP7]], <i64 4, i64 4, i64 4, i64 4>
; CHECK-NEXT:    [[TMP12]] = add nuw nsw i64 [[TMP8]], 4
; CHECK-NEXT:    [[TMP13:%.*]] = icmp uge i64 [[TMP12]], [[N_VEC40]]
; CHECK-NEXT:    br i1 [[TMP13]], label [[VPLANNEDBB120:%.*]], label [[VECTOR_BODY0]], !llvm.loop !0
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB12:
; CHECK-NEXT:    [[TMP14:%.*]] = mul i64 1, [[N_VEC40]]
; CHECK-NEXT:    [[TMP15:%.*]] = add i64 0, [[TMP14]]
; CHECK-NEXT:    [[B_PRIV_VEC0_BCAST:%.*]] = bitcast <4 x i32>* [[B_PRIV_VEC0]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 16, i8* [[B_PRIV_VEC0_BCAST]])
; CHECK-NEXT:    [[EXTRACTED_PRIV0:%.*]] = extractelement <4 x i32> [[WIDE_LOAD110]], i64 3
; CHECK-NEXT:    br label [[VPLANNEDBB130:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB13:
; CHECK-NEXT:    br label [[VPLANNEDBB140:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB14:
; CHECK-NEXT:    [[TMP16:%.*]] = icmp eq i64 [[WIDE_TRIP_COUNT210]], [[N_VEC40]]
; CHECK-NEXT:    br i1 [[TMP16]], label [[FINAL_MERGE0:%.*]], label %[[MERGE_BLK0]]
; CHECK-EMPTY:
; CHECK-NEXT:  [[MERGE_BLK0]]:
; CHECK-NEXT:    [[UNI_PHI150:%.*]] = phi i32 [ [[EXTRACTED_PRIV0]], [[VPLANNEDBB140]] ], [ undef, [[VPLANNEDBB0]] ]
; CHECK-NEXT:    [[UNI_PHI160:%.*]] = phi i64 [ [[TMP15]], [[VPLANNEDBB140]] ], [ 0, [[VPLANNEDBB0]] ]
; CHECK-NEXT:    br label %[[REMBLK0:.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  [[REMBLK0]]:
; CHECK-NEXT:    br label [[OMP_INNER_FOR_BODY0]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB17:
; CHECK-NEXT:    br label [[FINAL_MERGE0]]
; CHECK-EMPTY:
; CHECK-NEXT:  final.merge:
; CHECK-NEXT:    [[UNI_PHI180:%.*]] = phi i32 [ [[TMP17:%.*]], [[VPLANNEDBB170:%.*]] ], [ [[EXTRACTED_PRIV0]], [[VPLANNEDBB140]] ]
; CHECK-NEXT:    [[UNI_PHI190:%.*]] = phi i64 [ [[INDVARS_IV_NEXT0:%.*]], [[VPLANNEDBB170]] ], [ [[TMP15]], [[VPLANNEDBB140]] ]
; CHECK-NEXT:    br label [[DIR_OMP_END_SIMD_30:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  omp.inner.for.body:
; CHECK-NEXT:    [[INDVARS_IV0:%.*]] = phi i64 [ [[UNI_PHI160]], %[[REMBLK0]] ], [ [[INDVARS_IV_NEXT0]], [[OMP_INNER_FOR_BODY0]] ]
; CHECK-NEXT:    [[ARRAYIDX0:%.*]] = getelementptr inbounds i32, i32* [[A0]], i64 [[INDVARS_IV0]]
; CHECK-NEXT:    [[TMP17]] = load i32, i32* [[ARRAYIDX0]], align 4
; CHECK-NEXT:    [[INDVARS_IV_NEXT0]] = add nuw nsw i64 [[INDVARS_IV0]], 1
; CHECK-NEXT:    [[EXITCOND0:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT0]], [[WIDE_TRIP_COUNT210]]
; CHECK-NEXT:    br i1 [[EXITCOND0]], label [[VPLANNEDBB170]], label [[OMP_INNER_FOR_BODY0]], !llvm.loop !2
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.END.SIMD.3:
; CHECK-NEXT:    [[DOTLCSSA0]] = phi i32 [ [[UNI_PHI180]], [[FINAL_MERGE0]] ]
; CHECK-NEXT:    br label [[DIR_OMP_END_SIMD_3230:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.END.SIMD.323:
; CHECK-NEXT:    br label [[OMP_PRECOND_END0]]
; CHECK-EMPTY:
; CHECK-NEXT:  omp.precond.end:
; CHECK-NEXT:    [[RES_20:%.*]] = phi i32 [ [[DOTLCSSA0]], [[DIR_OMP_END_SIMD_3230]] ], [ undef, [[ENTRY0:%.*]] ]
; CHECK-NEXT:    ret i32 [[RES_20]]
; CHECK-NEXT:  }
;
entry:
  %cmp = icmp sgt i32 %n, 0
  br i1 %cmp, label %DIR.OMP.SIMD.2, label %omp.precond.end

DIR.OMP.SIMD.2:                                   ; preds = %entry
  %b.priv = alloca i32, align 4
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %DIR.OMP.SIMD.2
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.NORMALIZED.IV"(i8* null), "QUAL.OMP.NORMALIZED.UB"(i8* null), "QUAL.OMP.PRIVATE"(i32* %b.priv) ]
  br label %DIR.OMP.SIMD.222

DIR.OMP.SIMD.222:                                 ; preds = %DIR.OMP.SIMD.1
  %1 = bitcast i32* %b.priv to i8*
  %wide.trip.count21 = zext i32 %n to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.inner.for.body, %DIR.OMP.SIMD.222
  %indvars.iv = phi i64 [ 0, %DIR.OMP.SIMD.222 ], [ %indvars.iv.next, %omp.inner.for.body ]
  %arrayidx = getelementptr inbounds i32, i32* %a, i64 %indvars.iv
  %2 = load i32, i32* %arrayidx, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count21
  br i1 %exitcond, label %DIR.OMP.END.SIMD.3, label %omp.inner.for.body

DIR.OMP.END.SIMD.3:                               ; preds = %omp.inner.for.body
  %.lcssa = phi i32 [ %2, %omp.inner.for.body ]
  br label %DIR.OMP.END.SIMD.323

DIR.OMP.END.SIMD.323:                             ; preds = %DIR.OMP.END.SIMD.3
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %DIR.OMP.END.SIMD.323, %entry
  %res.2 = phi i32 [ %.lcssa, %DIR.OMP.END.SIMD.323 ], [ undef, %entry ]
  ret i32 %res.2
}

declare token @llvm.directive.region.entry() nounwind
declare void @llvm.directive.region.exit(token) nounwind
