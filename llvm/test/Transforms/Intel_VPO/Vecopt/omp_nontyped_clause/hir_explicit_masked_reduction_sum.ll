; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; Test that VPlan is able to import explicit masked sum reduction into VPEntities framework,
; and lowered correctly into VPInstructions.

; Incoming HIR into vectorizer
; BEGIN REGION { }
;       %tok = @llvm.directive.region.entry(); [ DIR.OMP.SIMD(),  QUAL.OMP.REDUCTION.ADD(&((%red)[0])) ]
;       %start = (%red)[0];
;       %tsum.015 = %start;
;
;       + DO i1 = 0, sext.i32.i64(%N) + -1, 1   <DO_LOOP>  <MAX_TC_EST = 1000> <simd>
;       |   %0 = (@B)[0][i1];
;       |   if (%0 > 0.000000e+00)
;       |   {
;       |      %1 = (@C)[0][i1];
;       |      %add = %0  +  %1;
;       |      %tsum.015 = %tsum.015  +  %add;
;       |   }
;       + END LOOP
;
;       (%red)[0] = %tsum.015;
;       @llvm.directive.region.exit(%tok); [ DIR.OMP.END.SIMD() ]
; END REGION


; RUN: opt -hir-ssa-deconstruction -hir-framework -hir-temp-cleanup -hir-vplan-vec -vplan-entities-dump -vplan-print-after-vpentity-instrs -vplan-force-vf=4 -disable-output < %s 2>&1 -vplan-enable-new-cfg-merge-hir=0 | FileCheck %s
; RUN: opt -hir-ssa-deconstruction -hir-framework -hir-temp-cleanup -hir-vplan-vec -vplan-entities-dump -vplan-print-after-vpentity-instrs -vplan-force-vf=4 -disable-output < %s 2>&1 -vplan-enable-new-cfg-merge-hir=1 | FileCheck %s
; RUN: opt -passes="hir-ssa-deconstruction,hir-temp-cleanup,hir-vplan-vec" -vplan-entities-dump -vplan-print-after-vpentity-instrs -vplan-force-vf=4 -disable-output < %s 2>&1 -vplan-enable-new-cfg-merge-hir=0 | FileCheck %s
; RUN: opt -passes="hir-ssa-deconstruction,hir-temp-cleanup,hir-vplan-vec" -vplan-entities-dump -vplan-print-after-vpentity-instrs -vplan-force-vf=4 -disable-output < %s 2>&1 -vplan-enable-new-cfg-merge-hir=1 | FileCheck %s


target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@B = common dso_local local_unnamed_addr global [1000 x float] zeroinitializer, align 16
@C = common dso_local local_unnamed_addr global [1000 x float] zeroinitializer, align 16

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local float @ifsum1(i32 %N) local_unnamed_addr {
; CHECK-LABEL:  VPlan after insertion of VPEntities instructions:
; CHECK-NEXT:  VPlan IR for: ifsum1:HIR.#{{[0-9]+}}
; CHECK-NEXT:  External Defs Start:
; CHECK-DAG:     [[VP0:%.*]] = {%tsum.015}
; CHECK-DAG:     [[VP1:%.*]] = {@B}
; CHECK-DAG:     [[VP2:%.*]] = {@C}
; CHECK-DAG:     [[VP3:%.*]] = {sext.i32.i64(%N) + -1}
; CHECK-NEXT:  External Defs End:
; CHECK-NEXT:  Loop Entities of the loop with header [[BB0:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:  Reduction list
; CHECK-NEXT:   (+) Start: float [[TSUM_0150:%.*]] Exit: float [[VP4:%.*]]
; CHECK-NEXT:    Linked values: float [[VP5:%.*]], float [[VP4]], float [[VP6:%.*]], float [[VP_RED_INIT:%.*]], float [[VP_RED_FINAL:%.*]],
; CHECK:       Induction list
; CHECK-NEXT:   IntInduction(+) Start: i64 0 Step: i64 1 StartVal: i64 0 EndVal: ? BinOp: i64 [[VP7:%.*]] = add i64 [[VP8:%.*]] i64 [[VP__IND_INIT_STEP:%.*]]
; CHECK-NEXT:    Linked values: i64 [[VP8]], i64 [[VP7]], i64 [[VP__IND_INIT:%.*]], i64 [[VP__IND_INIT_STEP]], i64 [[VP__IND_FINAL:%.*]],
; CHECK:         [[BB1:BB[0-9]+]]: # preds:
; CHECK-NEXT:     br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]]
; CHECK-NEXT:     i64 [[VP9:%.*]] = add i64 [[VP3]] i64 1
; CHECK-NEXT:     float [[VP_RED_INIT]] = reduction-init float 0.000000e+00
; CHECK-NEXT:     i64 [[VP__IND_INIT]] = induction-init{add} i64 0 i64 1
; CHECK-NEXT:     i64 [[VP__IND_INIT_STEP]] = induction-init-step{add} i64 1
; CHECK-NEXT:     br [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB0]]: # preds: [[BB2]], [[BB3:BB[0-9]+]]
; CHECK-NEXT:     float [[VP5]] = phi  [ float [[VP_RED_INIT]], [[BB2]] ],  [ float [[VP4]], [[BB3]] ]
; CHECK-NEXT:     i64 [[VP8]] = phi  [ i64 [[VP__IND_INIT]], [[BB2]] ],  [ i64 [[VP7]], [[BB3]] ]
; CHECK-NEXT:     float* [[VP_SUBSCRIPT:%.*]] = subscript inbounds [1000 x float]* @B i64 0 i64 [[VP8]]
; CHECK-NEXT:     float [[VP_LOAD:%.*]] = load float* [[VP_SUBSCRIPT]]
; CHECK-NEXT:     i1 [[VP10:%.*]] = fcmp ogt float [[VP_LOAD]] float 0.000000e+00
; CHECK-NEXT:     br i1 [[VP10]], [[BB4:BB[0-9]+]], [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB4]]: # preds: [[BB0]]
; CHECK-NEXT:       float* [[VP_SUBSCRIPT_1:%.*]] = subscript inbounds [1000 x float]* @C i64 0 i64 [[VP8]]
; CHECK-NEXT:       float [[VP_LOAD_1:%.*]] = load float* [[VP_SUBSCRIPT_1]]
; CHECK-NEXT:       float [[VP11:%.*]] = fadd float [[VP_LOAD]] float [[VP_LOAD_1]]
; CHECK-NEXT:       float [[VP6]] = fadd float [[VP5]] float [[VP11]]
; CHECK-NEXT:       br [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: [[BB4]], [[BB0]]
; CHECK-NEXT:     float [[VP4]] = phi  [ float [[VP6]], [[BB4]] ],  [ float [[VP5]], [[BB0]] ]
; CHECK-NEXT:     i64 [[VP7]] = add i64 [[VP8]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     i1 [[VP12:%.*]] = icmp slt i64 [[VP7]] i64 [[VP9]]
; CHECK-NEXT:     br i1 [[VP12]], [[BB0]], [[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]: # preds: [[BB3]]
; CHECK-NEXT:     float [[VP_RED_FINAL]] = reduction-final{fadd} float [[VP4]] float [[TSUM_0150]]
; CHECK-NEXT:     i64 [[VP__IND_FINAL]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:     br [[BB6:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]]: # preds: [[BB5]]
; CHECK-NEXT:     br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   float [[VP_RED_FINAL]] -> [[VP13:%.*]] = {%tsum.015}
;
entry:
  %red = alloca float, align 4
  %cmp14 = icmp sgt i32 %N, 0
  br i1 %cmp14, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = sext i32 %N to i64
  %tok = call token @llvm.directive.region.entry()[ "DIR.OMP.SIMD"(), "QUAL.OMP.REDUCTION.ADD"(float* %red) ]
  %start = load float, float* %red, align 4
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.inc
  %tsum.1.lcssa = phi float [ %tsum.1, %for.inc ]
  store float %tsum.1.lcssa, float* %red, align 4
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"() ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  %tsum.0.lcssa = phi float [ 0.000000e+00, %entry ], [ %tsum.1.lcssa, %for.cond.cleanup.loopexit ]
  ret float %tsum.0.lcssa

for.body:                                         ; preds = %for.inc, %for.body.preheader
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.inc ]
  %tsum.015 = phi float [ %start, %for.body.preheader ], [ %tsum.1, %for.inc ]
  %arrayidx = getelementptr inbounds [1000 x float], [1000 x float]* @B, i64 0, i64 %indvars.iv
  %0 = load float, float* %arrayidx, align 4
  %cmp1 = fcmp ogt float %0, 0.000000e+00
  br i1 %cmp1, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body
  %arrayidx5 = getelementptr inbounds [1000 x float], [1000 x float]* @C, i64 0, i64 %indvars.iv
  %1 = load float, float* %arrayidx5, align 4
  %add = fadd fast float %0, %1
  %add6 = fadd fast float %tsum.015, %add
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then
  %tsum.1 = phi float [ %add6, %if.then ], [ %tsum.015, %for.body ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond, label %for.cond.cleanup.loopexit, label %for.body
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry()

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token)
