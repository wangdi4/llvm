; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; Test to check VPlan LLVM-IR codegen placement for extracts from already vectorized
; values. Shuffles generated to extract subvectors must be placed close to source
; to avoid generation of invalid IR.

; RUN: opt -VPlanDriver -S < %s 2>&1 | FileCheck %s

declare <8 x i16> @_Z3minDv8_tS_(<8 x i16>) local_unnamed_addr

define dso_local void @_ZGVeN16uuuu_kernel_extract_pipelined(i16* %fused_grid, i1 %cmp166.i) local_unnamed_addr #0 {
; CHECK-LABEL: @_ZGVeN16uuuu_kernel_extract_pipelined(
; CHECK:       vector.body:
; CHECK:         [[WIDE_INSERT:%.*]] = shufflevector <32 x i16> <i16 poison, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 poison, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 poison, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 poison, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>, <32 x i16> [[EXTENDED_:%.*]], <32 x i32> <i32 32, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 33, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 34, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 35, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
; CHECK-NEXT:    [[EXTRACTSUBVEC_8:%.*]] = shufflevector <32 x i16> [[WIDE_INSERT]], <32 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
; CHECK-NEXT:    [[EXTRACTSUBVEC_7:%.*]] = shufflevector <32 x i16> [[WIDE_INSERT]], <32 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
; CHECK-NEXT:    [[EXTRACTSUBVEC_6:%.*]] = shufflevector <32 x i16> [[WIDE_INSERT]], <32 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; CHECK-NEXT:    [[EXTRACTSUBVEC_:%.*]] = shufflevector <32 x i16> [[WIDE_INSERT]], <32 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; CHECK-NEXT:    br i1 [[UNI_COND:%.*]], label %[[VPLANNEDBB4:.*]], label %[[VPLANNEDBB5:.*]]

; CHECK:       [[VPLANNEDBB4]]:
; CHECK-NEXT:    [[TMP2:%.*]] = tail call <8 x i16> @_Z3minDv8_tS_(<8 x i16> [[EXTRACTSUBVEC_]])
; CHECK-NEXT:    [[TMP3:%.*]] = tail call <8 x i16> @_Z3minDv8_tS_(<8 x i16> [[EXTRACTSUBVEC_6]])
; CHECK-NEXT:    [[TMP4:%.*]] = tail call <8 x i16> @_Z3minDv8_tS_(<8 x i16> [[EXTRACTSUBVEC_7]])
; CHECK-NEXT:    [[TMP5:%.*]] = tail call <8 x i16> @_Z3minDv8_tS_(<8 x i16> [[EXTRACTSUBVEC_8]])
; CHECK-NEXT:    br label %[[VPLANNEDBB5]]
; CHECK:       [[VPLANNEDBB5]]:
; CHECK-NEXT:    [[TMP6:%.*]] = tail call <8 x i16> @_Z3minDv8_tS_(<8 x i16> [[EXTRACTSUBVEC_]])
; CHECK-NEXT:    [[TMP7:%.*]] = tail call <8 x i16> @_Z3minDv8_tS_(<8 x i16> [[EXTRACTSUBVEC_6]])
; CHECK-NEXT:    [[TMP8:%.*]] = tail call <8 x i16> @_Z3minDv8_tS_(<8 x i16> [[EXTRACTSUBVEC_7]])
; CHECK-NEXT:    [[TMP9:%.*]] = tail call <8 x i16> @_Z3minDv8_tS_(<8 x i16> [[EXTRACTSUBVEC_8]])
;


for.body10:
  br label %simd.begin.region

simd.begin.region:                                ; preds = %for.body10
  %entry.region = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.SIMDLEN"(i32 4) ]
  br label %simd.loop.preheader

simd.loop.preheader:                              ; preds = %simd.begin.region
  br label %simd.loop

simd.loop:                                        ; preds = %simd.loop.exit, %simd.loop.preheader
  %index = phi i32 [ 0, %simd.loop.preheader ], [ %indvar, %simd.loop.exit ]
  %index.ext = sext i32 %index to i64
  %gep = getelementptr inbounds i16, i16* %fused_grid, i64 %index.ext
  %conv22.i = load i16, i16* %gep, align 4
  %cond.i = insertelement <8 x i16> <i16 poison, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>, i16 %conv22.i, i32 0
  br i1 %cmp166.i, label %if.then168.i, label %if.then174.i

if.then168.i:                                     ; preds = %simd.loop
  ; Extract from widened %cond.i should not be placed here, since we have another user
  ; of extracted value in if.then174.i.
  %call169.i = tail call <8 x i16> @_Z3minDv8_tS_(<8 x i16> %cond.i)
  br label %if.then174.i

if.then174.i:                                     ; preds = %if.then168.i, %simd.loop
  %call175.i = tail call <8 x i16> @_Z3minDv8_tS_(<8 x i16> %cond.i)
  br label %simd.loop.exit

simd.loop.exit:                                   ; preds = %if.then174.i
  %indvar = add nuw i32 %index, 1
  %vl.cond = icmp ult i32 %indvar, 16
  br i1 %vl.cond, label %simd.loop, label %simd.end.region

simd.end.region:                                  ; preds = %simd.loop.exit
  call void @llvm.directive.region.exit(token %entry.region) [ "DIR.OMP.END.SIMD"() ]
  br label %return

return:                                           ; preds = %simd.end.region
  ret void
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1
