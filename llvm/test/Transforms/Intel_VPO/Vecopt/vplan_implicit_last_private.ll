; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt %s -S -vplan-vec -vplan-vec -vplan-entities-dump -vplan-print-after-live-inout-list -vplan-enable-peeling | FileCheck %s

; int foo(int *A) {
;   int priv;
;   #pragma omp simd
;   for (int i = 0; i < 100; i++) {
;      priv = A[i] * 42;
;   }
;   return priv;
; }

target triple = "x86_64-unknown-linux-gnu"

define dso_local i32 @_Z3fooPi(i32* nocapture readonly %A) {
; CHECK-LABEL:  VPlan after live in/out lists creation:
; CHECK-NEXT:  VPlan IR for: _Z3fooPi:omp.inner.for.body
; CHECK-NEXT:  Loop Entities of the loop with header [[BB0:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:  Induction list
; CHECK-NEXT:   IntInduction(+) Start: i64 0 Step: i64 1 StartVal: i64 0 EndVal: i64 100 BinOp: i64 [[VP_INDVARS_IV_NEXT:%.*]] = add i64 [[VP_INDVARS_IV:%.*]] i64 [[VP_INDVARS_IV_IND_INIT_STEP:%.*]]
; CHECK-NEXT:    Linked values: i64 [[VP_INDVARS_IV]], i64 [[VP_INDVARS_IV_NEXT]], i64 [[VP_INDVARS_IV_IND_INIT:%.*]], i64 [[VP_INDVARS_IV_IND_FINAL:%.*]],
; CHECK:       Private list
; CHECK-EMPTY:
; CHECK-NEXT:    Exit instr: i32 [[VP0:%.*]] = load i32* [[VP_PTRIDX:%.*]]
; CHECK-NEXT:    Linked values: i32 [[VP0]], i32 [[VP__PRIV_FINAL:%.*]],
; CHECK:         [[BB1:BB[0-9]+]]: # preds:
; CHECK-NEXT:     br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]]
; CHECK-NEXT:     i64 [[VP_INDVARS_IV_IND_INIT]] = induction-init{add} i64 live-in1 i64 1
; CHECK-NEXT:     i64 [[VP_INDVARS_IV_IND_INIT_STEP]] = induction-init-step{add} i64 1
; CHECK-NEXT:     i64 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i64 100, UF = 1
; CHECK-NEXT:     br [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB0]]: # preds: [[BB2]], [[BB0]]
; CHECK-NEXT:     i64 [[VP_INDVARS_IV]] = phi  [ i64 [[VP_INDVARS_IV_IND_INIT]], [[BB2]] ],  [ i64 [[VP_INDVARS_IV_NEXT]], [[BB0]] ]
; CHECK-NEXT:     call i64 4 i8* [[TMP1:%.*]] void (i64, i8*)* @llvm.lifetime.start.p0i8
; CHECK-NEXT:     i32* [[VP_PTRIDX]] = getelementptr inbounds i32* [[A0:%.*]] i64 [[VP_INDVARS_IV]]
; CHECK-NEXT:     i32 [[VP0]] = load i32* [[VP_PTRIDX]]
; CHECK-NEXT:     call i64 4 i8* [[TMP1]] void (i64, i8*)* @llvm.lifetime.end.p0i8
; CHECK-NEXT:     i64 [[VP_INDVARS_IV_NEXT]] = add i64 [[VP_INDVARS_IV]] i64 [[VP_INDVARS_IV_IND_INIT_STEP]]
; CHECK-NEXT:     i1 [[VP_VECTOR_LOOP_EXITCOND:%.*]] = icmp uge i64 [[VP_INDVARS_IV_NEXT]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     br i1 [[VP_VECTOR_LOOP_EXITCOND]], [[BB3:BB[0-9]+]], [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: [[BB0]]
; CHECK-NEXT:     i64 [[VP_INDVARS_IV_IND_FINAL]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:     i32 [[VP__PRIV_FINAL]] = private-final-uc i32 [[VP0]]
; CHECK-NEXT:     br [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: [[BB3]]
; CHECK-NEXT:     br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0     [[DOTLCSSA0:%.*]] = phi i32 [ [[TMP2:%.*]], [[OMP_INNER_FOR_BODY0:%.*]] ] i32 [[VP__PRIV_FINAL]] -> i32 [[TMP2]]
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 1   no underlying for i64 [[VP_INDVARS_IV_IND_FINAL]]
; CHECK-EMPTY:
; CHECK-NEXT:  Original loop live-ins/live-outs:
; CHECK-NEXT:    Id: 1
; CHECK-NEXT:      Phi:   [[INDVARS_IV0:%.*]] = phi i64 [ 0, [[DIR_OMP_SIMD_20:%.*]] ], [ [[INDVARS_IV_NEXT0:%.*]], [[OMP_INNER_FOR_BODY0]] ]    Start op: 0
; CHECK-NEXT:      Live-Out:   [[INDVARS_IV_NEXT0]] = add nuw nsw i64 [[INDVARS_IV0]], 1
; CHECK-NEXT:    Id: 0
; CHECK-NEXT:      Phi: nullptr    Start op: -1
; CHECK-NEXT:      Live-Out:   [[TMP2]] = load i32, i32* [[PTRIDX0:%.*]], align 4
; CHECK:       target triple = "x86_64-unknown-linux-gnu"
;
; CHECK:  define dso_local i32 @_Z3fooPi(i32* nocapture readonly [[A0]]) {
; CHECK-NEXT:  DIR.OMP.SIMD.116:
; CHECK-NEXT:    [[I_LINEAR_IV0:%.*]] = alloca i32, align 4
; CHECK-NEXT:    br label [[DIR_OMP_SIMD_10:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.SIMD.1:
; CHECK-NEXT:    br label [[DIR_OMP_SIMD_20]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.SIMD.2:
; CHECK-NEXT:    [[TMP0:%.*]] = bitcast i32* [[I_LINEAR_IV0]] to i8*
; CHECK-NEXT:    br label [[PEEL_CHECKZ0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  peel.checkz16:
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT0:%.*]] = insertelement <4 x i32*> poison, i32* [[A0]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT0:%.*]] = shufflevector <4 x i32*> [[BROADCAST_SPLATINSERT0]], <4 x i32*> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP1]] = ptrtoint <4 x i32*> [[BROADCAST_SPLAT0]] to <4 x i64>
; CHECK-NEXT:    [[DOTEXTRACT_0_0:%.*]] = extractelement <4 x i64> [[TMP1]], i32 0
; CHECK-NEXT:    [[TMP2]] = udiv i64 [[DOTEXTRACT_0_0]], 4
; CHECK-NEXT:    [[TMP3:%.*]] = mul i64 [[TMP2]], 3
; CHECK-NEXT:    [[TMP4:%.*]] = urem i64 [[TMP3]], 4
; CHECK-NEXT:    [[TMP5:%.*]] = icmp eq i64 0, [[TMP4]]
; CHECK-NEXT:    br i1 [[TMP5]], label [[MERGE_BLK0:%.*]], label [[PEEL_CHECKV0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  peel.checkv17:
; CHECK-NEXT:    [[TMP6:%.*]] = add i64 [[TMP4]], 4
; CHECK-NEXT:    [[TMP7:%.*]] = icmp ugt i64 [[TMP6]], 100
; CHECK-NEXT:    br i1 [[TMP7]], label [[MERGE_BLK1:%.*]], label [[PEELBLK0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  PeelBlk6:
; CHECK-NEXT:    br label [[OMP_INNER_FOR_BODY_SL_CLONE0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB:
; CHECK-NEXT:    [[DOTLCSSA160:%.*]] = phi i32 [ [[TMP19:%.*]], [[OMP_INNER_FOR_BODY_SL_CLONE0]] ]
; CHECK-NEXT:    [[INDVARS_IV_NEXT_SL_CLONE_LCSSA0:%.*]] = phi i64 [ [[INDVARS_IV_NEXT_SL_CLONE0:%.*]], [[OMP_INNER_FOR_BODY_SL_CLONE0]] ]
; CHECK-NEXT:    br label [[MERGE_BLK0]]
; CHECK-EMPTY:
; CHECK-NEXT:  merge.blk14:
; CHECK-NEXT:    [[UNI_PHI0:%.*]] = phi i32 [ undef, [[PEEL_CHECKZ0]] ], [ [[DOTLCSSA160]], [[VPLANNEDBB0:%.*]] ]
; CHECK-NEXT:    [[UNI_PHI10:%.*]] = phi i64 [ 0, [[PEEL_CHECKZ0]] ], [ [[INDVARS_IV_NEXT_SL_CLONE_LCSSA0]], [[VPLANNEDBB0]] ]
; CHECK-NEXT:    br label [[VPLANNEDBB20:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB2:
; CHECK-NEXT:    [[TMP8:%.*]] = add i64 [[TMP4]], 4
; CHECK-NEXT:    [[TMP9:%.*]] = icmp ugt i64 [[TMP8]], 100
; CHECK-NEXT:    br i1 [[TMP9]], label [[MERGE_BLK1]], label [[VPLANNEDBB30:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB3:
; CHECK-NEXT:    br label [[VPLANNEDBB40:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB4:
; CHECK-NEXT:    [[UNI_PHI1IND_START_BCAST_SPLATINSERT0:%.*]] = insertelement <4 x i64> poison, i64 [[UNI_PHI10]], i32 0
; CHECK-NEXT:    [[UNI_PHI1IND_START_BCAST_SPLAT0:%.*]] = shufflevector <4 x i64> [[UNI_PHI1IND_START_BCAST_SPLATINSERT0]], <4 x i64> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP10:%.*]] = add <4 x i64> [[UNI_PHI1IND_START_BCAST_SPLAT0]], <i64 0, i64 1, i64 2, i64 3>
; CHECK-NEXT:    [[N_ADJST0:%.*]] = sub nuw nsw i64 100, [[TMP4]]
; CHECK-NEXT:    [[N_MOD_VF0:%.*]] = urem i64 [[N_ADJST0]], 4
; CHECK-NEXT:    [[N_VEC0:%.*]] = sub nuw nsw i64 100, [[N_MOD_VF0]]
; CHECK-NEXT:    br label [[VECTOR_BODY0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  vector.body:
; CHECK-NEXT:    [[UNI_PHI60:%.*]] = phi i64 [ [[UNI_PHI10]], [[VPLANNEDBB40]] ], [ [[TMP13:%.*]], [[VECTOR_BODY0]] ]
; CHECK-NEXT:    [[VEC_PHI0:%.*]] = phi <4 x i64> [ [[TMP10]], [[VPLANNEDBB40]] ], [ [[TMP12:%.*]], [[VECTOR_BODY0]] ]
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull [[TMP0]])
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull [[TMP0]])
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull [[TMP0]])
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull [[TMP0]])
; CHECK-NEXT:    [[SCALAR_GEP0:%.*]] = getelementptr inbounds i32, i32* [[A0]], i64 [[UNI_PHI60]]
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast i32* [[SCALAR_GEP0]] to <4 x i32>*
; CHECK-NEXT:    [[WIDE_LOAD0:%.*]] = load <4 x i32>, <4 x i32>* [[TMP11]], align 4, !intel.preferred_alignment !0
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull [[TMP0]])
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull [[TMP0]])
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull [[TMP0]])
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull [[TMP0]])
; CHECK-NEXT:    [[TMP12]] = add nuw nsw <4 x i64> [[VEC_PHI0]], <i64 4, i64 4, i64 4, i64 4>
; CHECK-NEXT:    [[TMP13]] = add nuw nsw i64 [[UNI_PHI60]], 4
; CHECK-NEXT:    [[TMP14:%.*]] = icmp uge i64 [[TMP13]], [[N_VEC0]]
; CHECK-NEXT:    br i1 [[TMP14]], label [[VPLANNEDBB70:%.*]], label [[VECTOR_BODY0]], !llvm.loop !1
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB7:
; CHECK-NEXT:    [[WIDE_LOAD_LCSSA0:%.*]] = phi <4 x i32> [ [[WIDE_LOAD0]], [[VECTOR_BODY0]] ]
; CHECK-NEXT:    [[TMP15:%.*]] = mul i64 1, [[N_VEC0]]
; CHECK-NEXT:    [[TMP16:%.*]] = add i64 0, [[TMP15]]
; CHECK-NEXT:    [[EXTRACTED_PRIV0:%.*]] = extractelement <4 x i32> [[WIDE_LOAD_LCSSA0]], i64 3
; CHECK-NEXT:    br label [[VPLANNEDBB80:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB8:
; CHECK-NEXT:    br label [[VPLANNEDBB90:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB9:
; CHECK-NEXT:    [[TMP17:%.*]] = icmp eq i64 100, [[N_VEC0]]
; CHECK-NEXT:    br i1 [[TMP17]], label [[FINAL_MERGE0:%.*]], label [[MERGE_BLK1]]
; CHECK-EMPTY:
; CHECK-NEXT:  merge.blk12:
; CHECK-NEXT:    [[UNI_PHI100:%.*]] = phi i32 [ [[EXTRACTED_PRIV0]], [[VPLANNEDBB90]] ], [ undef, [[PEEL_CHECKV0]] ], [ [[UNI_PHI0]], [[VPLANNEDBB20]] ]
; CHECK-NEXT:    [[UNI_PHI110:%.*]] = phi i64 [ [[TMP16]], [[VPLANNEDBB90]] ], [ 0, [[PEEL_CHECKV0]] ], [ [[UNI_PHI10]], [[VPLANNEDBB20]] ]
; CHECK-NEXT:    br label [[REMBLK0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  RemBlk8:
; CHECK-NEXT:    br label [[OMP_INNER_FOR_BODY0]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB12:
; CHECK-NEXT:    [[DOTLCSSA150:%.*]] = phi i32 [ [[TMP18:%.*]], [[OMP_INNER_FOR_BODY0]] ]
; CHECK-NEXT:    [[INDVARS_IV_NEXT_LCSSA0:%.*]] = phi i64 [ [[INDVARS_IV_NEXT0]], [[OMP_INNER_FOR_BODY0]] ]
; CHECK-NEXT:    br label [[FINAL_MERGE0]]
; CHECK-EMPTY:
; CHECK-NEXT:  final.merge:
; CHECK-NEXT:    [[UNI_PHI130:%.*]] = phi i32 [ [[DOTLCSSA150]], [[VPLANNEDBB120:%.*]] ], [ [[EXTRACTED_PRIV0]], [[VPLANNEDBB90]] ]
; CHECK-NEXT:    [[UNI_PHI140:%.*]] = phi i64 [ [[INDVARS_IV_NEXT_LCSSA0]], [[VPLANNEDBB120]] ], [ [[TMP16]], [[VPLANNEDBB90]] ]
; CHECK-NEXT:    br label [[DIR_OMP_END_SIMD_2170:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  omp.inner.for.body:
; CHECK-NEXT:    [[INDVARS_IV0]] = phi i64 [ [[UNI_PHI110]], [[REMBLK0]] ], [ [[INDVARS_IV_NEXT0]], [[OMP_INNER_FOR_BODY0]] ]
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull [[TMP0]])
; CHECK-NEXT:    [[PTRIDX0]] = getelementptr inbounds i32, i32* [[A0]], i64 [[INDVARS_IV0]]
; CHECK-NEXT:    [[TMP18]] = load i32, i32* [[PTRIDX0]], align 4
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull [[TMP0]])
; CHECK-NEXT:    [[INDVARS_IV_NEXT0]] = add nuw nsw i64 [[INDVARS_IV0]], 1
; CHECK-NEXT:    [[EXITCOND_NOT0:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT0]], 100
; CHECK-NEXT:    br i1 [[EXITCOND_NOT0]], label [[VPLANNEDBB120]], label [[OMP_INNER_FOR_BODY0]], !llvm.loop !3
; CHECK-EMPTY:
; CHECK-NEXT:  omp.inner.for.body.sl.clone:
; CHECK-NEXT:    [[INDVARS_IV_SL_CLONE0:%.*]] = phi i64 [ 0, [[PEELBLK0]] ], [ [[INDVARS_IV_NEXT_SL_CLONE0]], [[OMP_INNER_FOR_BODY_SL_CLONE0]] ]
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull [[TMP0]])
; CHECK-NEXT:    [[PTRIDX_SL_CLONE0:%.*]] = getelementptr inbounds i32, i32* [[A0]], i64 [[INDVARS_IV_SL_CLONE0]]
; CHECK-NEXT:    [[TMP19]] = load i32, i32* [[PTRIDX_SL_CLONE0]], align 4
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull [[TMP0]])
; CHECK-NEXT:    [[INDVARS_IV_NEXT_SL_CLONE0]] = add nuw nsw i64 [[INDVARS_IV_SL_CLONE0]], 1
; CHECK-NEXT:    [[EXITCOND_NOT_SL_CLONE0:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT_SL_CLONE0]], [[TMP4]]
; CHECK-NEXT:    br i1 [[EXITCOND_NOT_SL_CLONE0]], label [[VPLANNEDBB0]], label [[OMP_INNER_FOR_BODY_SL_CLONE0]], !llvm.loop !5
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.END.SIMD.217:
; CHECK-NEXT:    [[DOTLCSSA0]] = phi i32 [ [[UNI_PHI130]], [[FINAL_MERGE0]] ]
; CHECK-NEXT:    br label [[DIR_OMP_END_SIMD_30:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.END.SIMD.3:
; CHECK-NEXT:    br label [[DIR_OMP_END_SIMD_40:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.END.SIMD.4:
; CHECK-NEXT:    [[MUL10:%.*]] = mul nsw i32 [[DOTLCSSA0]], 42
; CHECK-NEXT:    ret i32 [[MUL10]]
; CHECK-NEXT:  }
;
DIR.OMP.SIMD.116:
  %i.linear.iv = alloca i32, align 4
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %DIR.OMP.SIMD.116
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.NORMALIZED.IV"(i8* null), "QUAL.OMP.NORMALIZED.UB"(i8* null), "QUAL.OMP.LINEAR:IV"(i32* %i.linear.iv, i32 1) ]
  br label %DIR.OMP.SIMD.2

DIR.OMP.SIMD.2:                                   ; preds = %DIR.OMP.SIMD.1
  %1 = bitcast i32* %i.linear.iv to i8*
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %DIR.OMP.SIMD.2, %omp.inner.for.body
  %indvars.iv = phi i64 [ 0, %DIR.OMP.SIMD.2 ], [ %indvars.iv.next, %omp.inner.for.body ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1)
  %ptridx = getelementptr inbounds i32, i32* %A, i64 %indvars.iv
  %2 = load i32, i32* %ptridx, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 100
  br i1 %exitcond.not, label %DIR.OMP.END.SIMD.217, label %omp.inner.for.body

DIR.OMP.END.SIMD.217:                             ; preds = %omp.inner.for.body
  %.lcssa = phi i32 [ %2, %omp.inner.for.body ]
  br label %DIR.OMP.END.SIMD.3

DIR.OMP.END.SIMD.3:                               ; preds = %DIR.OMP.END.SIMD.217
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.OMP.END.SIMD.4

DIR.OMP.END.SIMD.4:                               ; preds = %DIR.OMP.END.SIMD.3
  %mul1 = mul nsw i32 %.lcssa, 42
  ret i32 %mul1
}

declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture)
declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture)
