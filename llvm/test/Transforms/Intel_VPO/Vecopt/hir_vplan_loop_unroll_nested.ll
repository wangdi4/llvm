; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt %s -S -passes='hir-ssa-deconstruction,hir-temp-cleanup,hir-pre-vec-complete-unroll,hir-memory-reduction-sinking,hir-vec-dir-insert,hir-vplan-vec,print<hir>' \
; RUN:  -vplan-enable-partial-sums=false -disable-output 2>&1 | FileCheck %s --check-prefix=VPCHECK

; VPCHECK:      + DO i1 = 0, -1 * [[DOTPR0:%.*]] + 3, 1   <DO_LOOP>
; VPCHECK:      |   [[DOTVEC0:%.*]] = (<2 x double>*)([[TMP0:%.*]])[4 * <i64 0, i64 1>]
; VPCHECK-NEXT: |   [[DOTVEC270:%.*]] = [[DOTVEC0]]  *  [[TMP1:%.*]]
; VPCHECK-NEXT: |   [[DOTVEC280:%.*]] = [[PHI_TEMP250:%.*]]  +  [[DOTVEC270]]
; VPCHECK-NEXT: |   [[DOTVEC290:%.*]] = (<2 x double>*)([[TMP0]])[4 * <i64 0, i64 1> + 1]
; VPCHECK-NEXT: |   [[DOTVEC300:%.*]] = [[DOTVEC290]]  *  [[TMP1]]
; VPCHECK-NEXT: |   [[DOTVEC310:%.*]] = [[PHI_TEMP230:%.*]]  +  [[DOTVEC300]]
; VPCHECK-NEXT: |   [[DOTVEC320:%.*]] = (<2 x double>*)([[TMP0]])[4 * <i64 0, i64 1> + 2]
; VPCHECK-NEXT: |   [[DOTVEC330:%.*]] = [[DOTVEC320]]  *  [[TMP1]]
; VPCHECK-NEXT: |   [[DOTVEC340:%.*]] = [[PHI_TEMP210:%.*]]  +  [[DOTVEC330]]
; VPCHECK-NEXT: |   [[DOTVEC350:%.*]] = (<2 x double>*)([[TMP0]])[4 * <i64 0, i64 1> + 3]
; VPCHECK-NEXT: |   [[DOTVEC360:%.*]] = [[DOTVEC350]]  *  [[TMP1]]
; VPCHECK-NEXT: |   [[DOTVEC370:%.*]] = [[PHI_TEMP0:%.*]]  +  [[DOTVEC360]]
; VPCHECK-NEXT: |   [[DOTVEC380:%.*]] = (<2 x double>*)([[TMP0]])[4 * <i64 0, i64 1> + 8]
; VPCHECK-NEXT: |   [[DOTVEC390:%.*]] = [[DOTVEC380]]  *  [[TMP1]]
; VPCHECK-NEXT: |   [[DOTVEC400:%.*]] = [[DOTVEC280]]  +  [[DOTVEC390]]
; VPCHECK-NEXT: |   [[DOTVEC410:%.*]] = (<2 x double>*)([[TMP0]])[4 * <i64 0, i64 1> + 9]
; VPCHECK-NEXT: |   [[DOTVEC420:%.*]] = [[DOTVEC410]]  *  [[TMP1]]
; VPCHECK-NEXT: |   [[DOTVEC430:%.*]] = [[DOTVEC310]]  +  [[DOTVEC420]]
; VPCHECK-NEXT: |   [[DOTVEC440:%.*]] = (<2 x double>*)([[TMP0]])[4 * <i64 0, i64 1> + 10]
; VPCHECK-NEXT: |   [[DOTVEC450:%.*]] = [[DOTVEC440]]  *  [[TMP1]]
; VPCHECK-NEXT: |   [[DOTVEC460:%.*]] = [[DOTVEC340]]  +  [[DOTVEC450]]
; VPCHECK-NEXT: |   [[DOTVEC470:%.*]] = (<2 x double>*)([[TMP0]])[4 * <i64 0, i64 1> + 11]
; VPCHECK-NEXT: |   [[DOTVEC480:%.*]] = [[DOTVEC470]]  *  [[TMP1]]
; VPCHECK-NEXT: |   [[DOTVEC490:%.*]] = [[DOTVEC370]]  +  [[DOTVEC480]]
; VPCHECK-NEXT: |   [[PHI_TEMP0]] = [[DOTVEC490]]
; VPCHECK-NEXT: |   [[PHI_TEMP210]] = [[DOTVEC460]]
; VPCHECK-NEXT: |   [[PHI_TEMP230]] = [[DOTVEC430]]
; VPCHECK-NEXT: |   [[PHI_TEMP250]] = [[DOTVEC400]]
; VPCHECK:      + END LOOP

@c = external global i32

define i32 @main() {
entry:
  %0 = load ptr, ptr undef
  br label %for.cond5.preheader

for.cond5.preheader:                              ; preds = %entry
  br label %for.body7

for.cond.cleanup:                                 ; preds = %for.body7
  %1 = load double, ptr undef
  %.pr = load i32, ptr @c
  br label %for.body15.lr.ph

for.body15.lr.ph:                                 ; preds = %for.cond.cleanup
  br label %for.body15

for.body7:                                        ; preds = %for.body7, %for.cond5.preheader
  br i1 undef, label %for.cond.cleanup, label %for.body7

for.cond13.for.cond36.preheader_crit_edge:        ; preds = %for.end29
  ret i32 undef

for.body15:                                       ; preds = %for.end29, %for.body15.lr.ph
  %inc3265 = phi i32 [ %.pr, %for.body15.lr.ph ], [ %inc32, %for.end29 ]
  br label %for.cond19.preheader

for.cond19.preheader:                             ; preds = %for.inc27, %for.body15
  %incdec.ptr.lcssa63 = phi ptr [ %0, %for.body15 ], [ %scevgep, %for.inc27 ]
  %storemerge57 = phi i32 [ 0, %for.body15 ], [ %inc28, %for.inc27 ]
  br label %for.body21

for.body21:                                       ; preds = %for.body21, %for.cond19.preheader
  %indvars.iv67 = phi i64 [ 0, %for.cond19.preheader ], [ %indvars.iv.next68, %for.body21 ]
  %incdec.ptr61 = phi ptr [ %incdec.ptr.lcssa63, %for.cond19.preheader ], [ %incdec.ptr, %for.body21 ]
  %incdec.ptr = getelementptr inbounds double, ptr %incdec.ptr61, i64 1
  %2 = load double, ptr %incdec.ptr61
  %mul = fmul fast double %2, %1
  %add.ptr23 = getelementptr inbounds double, ptr undef, i64 %indvars.iv67
  %3 = load double, ptr %add.ptr23
  %add = fadd fast double %3, %mul
  store double %add, ptr %add.ptr23
  %indvars.iv.next68 = add nuw nsw i64 %indvars.iv67, 1
  %exitcond69.not = icmp eq i64 %indvars.iv.next68, 4
  br i1 %exitcond69.not, label %for.inc27, label %for.body21

for.inc27:                                        ; preds = %for.body21
  %scevgep = getelementptr double, ptr %incdec.ptr.lcssa63, i64 4
  %inc28 = add nuw nsw i32 %storemerge57, 1
  %exitcond71.not = icmp eq i32 %inc28, 4
  br i1 %exitcond71.not, label %for.end29, label %for.cond19.preheader, !llvm.loop !0

for.end29:                                        ; preds = %for.inc27
  %inc32 = add nsw i32 %inc3265, 1
  %exitcond73.not = icmp eq i32 %inc32, 4
  br i1 %exitcond73.not, label %for.cond13.for.cond36.preheader_crit_edge, label %for.body15
}

!0 = distinct !{!0, !1}
!1 = !{!"llvm.loop.unroll.count", i32 2}
