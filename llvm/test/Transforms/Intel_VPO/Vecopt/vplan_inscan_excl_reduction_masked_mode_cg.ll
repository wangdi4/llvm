; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes="vplan-vec" -vplan-vec-scenario="n0;v4;m2" -S < %s 2>&1 | FileCheck %s

;; This test is meant as a baseline to demonstrate the changes that would
;; be performed by exclusive scan loop transformation. The future
;; transformation would exchange input and scan phases of inscan reduction.
;; The code generation in the test is valid only if the transformation above
;; has been performed.

;; float foo(float *A, float *B) {
;;   float x = 1.0f;
;; #pragma omp simd reduction(inscan, + : x)
;; #pragma nounroll
;;   for (int i=0; i<1024; i++) {
;;     B[i] = x;
;; #pragma omp scan exclusive(x)
;;     x += A[i];
;;   }
;;   return x;
;; }

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define float @_Z3fooPfS_(ptr %A, ptr %B) {
; CHECK-LABEL: @_Z3fooPfS_(
; CHECK-NEXT:  DIR.OMP.SIMD.1:
; CHECK-NEXT:    [[X_RED:%.*]] = alloca float, align 4
; CHECK:         store float 1.000000e+00, ptr [[X_RED]], align 4
; CHECK:         [[X_RED_VEC:%.*]] = alloca <4 x float>, align 16
; CHECK:         [[DOTVEC29:%.*]] = alloca <2 x float>, align 8
; CHECK:         br label [[DIR_OMP_SIMD_126:%.*]]
; CHECK:       VPlannedBB28:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 8, ptr [[DOTVEC_BASE_ADDR_EXTRACT_0_:%.*]])
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 8, ptr [[DOTVEC29_BASE_ADDR_EXTRACT_0_:%.*]])
; CHECK-NEXT:    [[TMP25:%.*]] = load float, ptr [[X_RED]], align 1
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT75:%.*]] = insertelement <2 x float> poison, float [[TMP25]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT76:%.*]] = shufflevector <2 x float> [[BROADCAST_SPLATINSERT75]], <2 x float> poison, <2 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP26:%.*]] = load float, ptr [[X_RED]], align 1
; CHECK-NEXT:    [[UNI_PHI26IND_START_BCAST_SPLATINSERT:%.*]] = insertelement <2 x i64> poison, i64 [[UNI_PHI26:%.*]], i32 0
; CHECK-NEXT:    [[UNI_PHI26IND_START_BCAST_SPLAT:%.*]] = shufflevector <2 x i64> [[UNI_PHI26IND_START_BCAST_SPLATINSERT]], <2 x i64> poison, <2 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP27:%.*]] = add <2 x i64> [[UNI_PHI26IND_START_BCAST_SPLAT]], <i64 0, i64 1>
; CHECK-NEXT:    [[TMP28:%.*]] = load i32, ptr [[I_LINEAR_IV:%.*]], align 1
; CHECK-NEXT:    [[TMP29:%.*]] = load i32, ptr [[I_LINEAR_IV]], align 1
; CHECK-NEXT:    [[IND_START_BCAST_SPLATINSERT30:%.*]] = insertelement <2 x i32> poison, i32 [[TMP28]], i32 0
; CHECK-NEXT:    [[IND_START_BCAST_SPLAT31:%.*]] = shufflevector <2 x i32> [[IND_START_BCAST_SPLATINSERT30]], <2 x i32> poison, <2 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP30:%.*]] = add <2 x i32> [[IND_START_BCAST_SPLAT31]], <i32 0, i32 1>
; CHECK-NEXT:    store <2 x i32> [[TMP30]], ptr [[DOTVEC:%.*]], align 1
; CHECK-NEXT:    br label [[VPLANNEDBB32:%.*]]
; CHECK:       VPlannedBB32:
; CHECK-NEXT:    [[UNI_PHI33:%.*]] = phi i64 [ [[UNI_PHI26]], [[VPLANNEDBB28:%.*]] ], [ [[TMP48:%.*]], [[NEW_LATCH59:%.*]] ]
; CHECK-NEXT:    [[VEC_PHI34:%.*]] = phi <2 x i64> [ [[TMP27]], [[VPLANNEDBB28]] ], [ [[TMP47:%.*]], [[NEW_LATCH59]] ]
; CHECK-NEXT:    [[VEC_PHI35:%.*]] = phi <2 x float> [ [[BROADCAST_SPLAT76]], [[VPLANNEDBB28]] ], [ [[PREDBLEND65:%.*]], [[NEW_LATCH59]] ]
; CHECK-NEXT:    [[UNI_PHI36:%.*]] = phi i32 [ [[TMP28]], [[VPLANNEDBB28]] ], [ [[PREDBLEND62_EXTRACT_0_:%.*]], [[NEW_LATCH59]] ]
; CHECK-NEXT:    [[VEC_PHI37:%.*]] = phi <2 x i32> [ [[TMP30]], [[VPLANNEDBB28]] ], [ [[PREDBLEND62:%.*]], [[NEW_LATCH59]] ]
; CHECK-NEXT:    store <2 x float> zeroinitializer, ptr [[DOTVEC29]], align 1
; CHECK-NEXT:    [[TMP31:%.*]] = icmp ult i64 [[UNI_PHI33]], 1024
; CHECK-NEXT:    [[TMP32:%.*]] = icmp ult <2 x i64> [[VEC_PHI34]], <i64 1024, i64 1024>
; CHECK-NEXT:    br label [[VPLANNEDBB38:%.*]]
; CHECK:       VPlannedBB38:
; CHECK-NEXT:    call void @llvm.masked.store.v2i32.p0(<2 x i32> [[VEC_PHI37]], ptr [[DOTVEC]], i32 1, <2 x i1> [[TMP32]])
; CHECK-NEXT:    br label [[VPLANNEDBB39:%.*]]
; CHECK:       VPlannedBB39:
; CHECK-NEXT:    br label [[VPLANNEDBB40:%.*]]
; CHECK:       VPlannedBB40:
; CHECK-NEXT:    [[TMP33:%.*]] = trunc <2 x i64> [[VEC_PHI34]] to <2 x i32>
; CHECK-NEXT:    call void @llvm.masked.store.v2i32.p0(<2 x i32> [[TMP33]], ptr [[DOTVEC]], i32 4, <2 x i1> [[TMP32]])
; CHECK-NEXT:    br label [[VPLANNEDBB41:%.*]]
; CHECK:       VPlannedBB41:
; CHECK-NEXT:    [[WIDE_LOAD42:%.*]] = load <2 x i32>, ptr [[DOTVEC]], align 4
; CHECK-NEXT:    [[TMP34:%.*]] = sext <2 x i32> [[WIDE_LOAD42]] to <2 x i64>
; CHECK-NEXT:    [[MM_VECTORGEP45:%.*]] = getelementptr inbounds float, <2 x ptr> [[BROADCAST_SPLAT44:%.*]], <2 x i64> [[TMP34]]
; CHECK-NEXT:    [[WIDE_MASKED_GATHER46:%.*]] = call <2 x float> @llvm.masked.gather.v2f32.v2p0(<2 x ptr> [[MM_VECTORGEP45]], i32 4, <2 x i1> [[TMP32]], <2 x float> poison)
; CHECK-NEXT:    [[WIDE_LOAD47:%.*]] = load <2 x float>, ptr [[DOTVEC29]], align 4
; CHECK-NEXT:    [[TMP35:%.*]] = fadd fast <2 x float> [[WIDE_LOAD47]], [[WIDE_MASKED_GATHER46]]
; CHECK-NEXT:    call void @llvm.masked.store.v2f32.p0(<2 x float> [[TMP35]], ptr [[DOTVEC29]], i32 4, <2 x i1> [[TMP32]])
; CHECK-NEXT:    br label [[VPLANNEDBB48:%.*]]
; CHECK:       VPlannedBB48:
; CHECK-NEXT:    br label [[VPLANNEDBB49:%.*]]
; CHECK:       VPlannedBB49:
; CHECK-NEXT:    [[TMP36:%.*]] = add <2 x i32> [[VEC_PHI37]], <i32 2, i32 2>
; CHECK-NEXT:    [[TMP37:%.*]] = add i32 [[UNI_PHI36]], 2
; CHECK-NEXT:    br label [[VPLANNEDBB50:%.*]]
; CHECK:       VPlannedBB50:
; CHECK-NEXT:    br label [[VPLANNEDBB51:%.*]]
; CHECK:       VPlannedBB51:
; CHECK-NEXT:    [[WIDE_LOAD52:%.*]] = load <2 x float>, ptr [[DOTVEC29]], align 1
; CHECK-NEXT:    [[TMP38:%.*]] = shufflevector <2 x float> [[WIDE_LOAD52]], <2 x float> zeroinitializer, <2 x i32> <i32 2, i32 0>
; CHECK-NEXT:    [[TMP39:%.*]] = fadd fast <2 x float> [[WIDE_LOAD52]], [[TMP38]]
; CHECK-NEXT:    [[TMP40:%.*]] = shufflevector <2 x float> [[TMP39]], <2 x float> zeroinitializer, <2 x i32> <i32 2, i32 0>
; CHECK-NEXT:    [[TMP41:%.*]] = fadd fast <2 x float> [[TMP40]], [[VEC_PHI35]]
; CHECK-NEXT:    call void @llvm.masked.store.v2f32.p0(<2 x float> [[TMP41]], ptr [[DOTVEC29]], i32 1, <2 x i1> [[TMP32]])
; CHECK-NEXT:    [[TMP42:%.*]] = bitcast <2 x i1> [[TMP32]] to i2
; CHECK-NEXT:    [[CTLZ:%.*]] = call i2 @llvm.ctlz.i2(i2 [[TMP42]], i1 true)
; CHECK-NEXT:    [[TMP43:%.*]] = sub i2 1, [[CTLZ]]
; CHECK-NEXT:    [[LAST_ACTIVE_LANE:%.*]] = extractelement <2 x float> [[TMP41]], i2 [[TMP43]]
; CHECK-NEXT:    [[TMP44:%.*]] = bitcast <2 x i1> [[TMP32]] to i2
; CHECK-NEXT:    [[CTLZ53:%.*]] = call i2 @llvm.ctlz.i2(i2 [[TMP44]], i1 true)
; CHECK-NEXT:    [[TMP45:%.*]] = sub i2 1, [[CTLZ53]]
; CHECK-NEXT:    [[LAST_ACTIVE_LANE54:%.*]] = extractelement <2 x float> [[WIDE_LOAD52]], i2 [[TMP45]]
; CHECK-NEXT:    [[TMP46:%.*]] = fadd float [[LAST_ACTIVE_LANE]], [[LAST_ACTIVE_LANE54]]
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT63:%.*]] = insertelement <2 x float> poison, float [[TMP46]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT64:%.*]] = shufflevector <2 x float> [[BROADCAST_SPLATINSERT63]], <2 x float> poison, <2 x i32> zeroinitializer
; CHECK-NEXT:    br label [[VPLANNEDBB55:%.*]]
; CHECK:       VPlannedBB55:
; CHECK-NEXT:    br label [[VPLANNEDBB56:%.*]]
; CHECK:       VPlannedBB56:
; CHECK-NEXT:    [[WIDE_LOAD57:%.*]] = load <2 x float>, ptr [[DOTVEC29]], align 4
; CHECK-NEXT:    [[SCALAR_GEP58:%.*]] = getelementptr inbounds float, ptr [[B:%.*]], i64 [[UNI_PHI33]]
; CHECK-NEXT:    call void @llvm.masked.store.v2f32.p0(<2 x float> [[WIDE_LOAD57]], ptr [[SCALAR_GEP58]], i32 4, <2 x i1> [[TMP32]])
; CHECK-NEXT:    br label [[NEW_LATCH28:%.*]]
; CHECK:       new_latch28:
; CHECK-NEXT:    br label [[NEW_LATCH59]]
; CHECK:       new_latch59:
; CHECK-NEXT:    [[PREDBLEND:%.*]] = select <2 x i1> [[TMP32]], <2 x float> [[TMP35]], <2 x float> [[BROADCAST_SPLAT61:%.*]]
; CHECK-NEXT:    [[PREDBLEND62]] = select <2 x i1> [[TMP32]], <2 x i32> [[TMP36]], <2 x i32> [[VEC_PHI37]]
; CHECK-NEXT:    [[PREDBLEND62_EXTRACT_0_]] = extractelement <2 x i32> [[PREDBLEND62]], i32 0
; CHECK-NEXT:    [[PREDBLEND65]] = select <2 x i1> [[TMP32]], <2 x float> [[BROADCAST_SPLAT64]], <2 x float> [[VEC_PHI35]]
; CHECK-NEXT:    [[PREDBLEND65_EXTRACT_0_:%.*]] = extractelement <2 x float> [[PREDBLEND65]], i32 0
; CHECK-NEXT:    [[TMP47]] = add nuw nsw <2 x i64> [[VEC_PHI34]], <i64 2, i64 2>
; CHECK-NEXT:    [[TMP48]] = add nuw nsw i64 [[UNI_PHI33]], 2
; CHECK-NEXT:    [[TMP49:%.*]] = icmp ult <2 x i64> [[TMP47]], <i64 1024, i64 1024>
; CHECK-NEXT:    [[TMP50:%.*]] = bitcast <2 x i1> [[TMP49]] to i2
; CHECK-NEXT:    [[TMP51:%.*]] = icmp eq i2 [[TMP50]], 0
; CHECK-NEXT:    br i1 [[TMP51]], label [[VPLANNEDBB66:%.*]], label [[VPLANNEDBB32]]
; CHECK:       VPlannedBB66:
; CHECK-NEXT:    store float [[PREDBLEND65_EXTRACT_0_]], ptr [[X_RED]], align 1
;
DIR.OMP.SIMD.1:
  %x.red = alloca float, align 4
  %i.linear.iv = alloca i32, align 4
  store float 1.000000e+00, ptr %x.red, align 4
  br label %DIR.OMP.SIMD.126

DIR.OMP.SIMD.126:                                 ; preds = %DIR.OMP.SIMD.1
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.REDUCTION.ADD:INSCAN.TYPED"(ptr %x.red, float 0.000000e+00, i32 1, i64 1), "QUAL.OMP.NORMALIZED.IV:TYPED"(ptr null, i32 0), "QUAL.OMP.NORMALIZED.UB:TYPED"(ptr null, i32 0), "QUAL.OMP.LINEAR:IV.TYPED"(ptr %i.linear.iv, i32 0, i32 1, i32 1) ]
  br label %DIR.OMP.END.SCAN.2

DIR.OMP.END.SCAN.2:                               ; preds = %DIR.OMP.SIMD.126, %DIR.VPO.END.GUARD.MEM.MOTION.4
  %indvars.iv = phi i64 [ 0, %DIR.OMP.SIMD.126 ], [ %indvars.iv.next, %DIR.VPO.END.GUARD.MEM.MOTION.4 ]
  br label %DIR.VPO.GUARD.MEM.MOTION.2

DIR.VPO.GUARD.MEM.MOTION.2:                       ; preds = DIR.OMP.END.SCAN.2
  %guard.start = call token @llvm.directive.region.entry() [ "DIR.VPO.GUARD.MEM.MOTION"(), "QUAL.OMP.LIVEIN"(ptr %x.red) ]
  br label %DIR.OMP.SIMD.139

DIR.OMP.SIMD.139:                                 ; preds = %DIR.VPO.GUARD.MEM.MOTION.2
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %i.linear.iv)
  %1 = trunc i64 %indvars.iv to i32
  store i32 %1, ptr %i.linear.iv, align 4
  %2 = load float, ptr %x.red, align 4
  %arrayidx = getelementptr inbounds float, ptr %B, i64 %indvars.iv
  store float %2, ptr %arrayidx, align 4
  br label %DIR.OMP.SCAN.2

DIR.OMP.SCAN.2:                                   ; preds = %DIR.OMP.END.SCAN.2
  %3 = call token @llvm.directive.region.entry() [ "DIR.OMP.SCAN"(), "QUAL.OMP.EXCLUSIVE:TYPED"(ptr %x.red, float 0.000000e+00, i32 1, i64 1) ]
  br label %DIR.OMP.SCAN.1

DIR.OMP.SCAN.1:                                   ; preds = %DIR.OMP.SCAN.2
  fence acq_rel
  br label %DIR.OMP.END.SCAN.4

DIR.OMP.END.SCAN.4:                               ; preds = %DIR.OMP.SCAN.1
  call void @llvm.directive.region.exit(token %3) [ "DIR.OMP.END.SCAN"() ]
  br label %DIR.OMP.END.SCAN.228

DIR.OMP.END.SCAN.228:                             ; preds = %DIR.OMP.END.SCAN.4
  %4 = load i32, ptr %i.linear.iv, align 4
  %idxprom1 = sext i32 %4 to i64
  %arrayidx2 = getelementptr inbounds float, ptr %A, i64 %idxprom1
  %5 = load float, ptr %arrayidx2, align 4
  %6 = load float, ptr %x.red, align 4
  %add3 = fadd fast float %6, %5
  store float %add3, ptr %x.red, align 4
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %i.linear.iv)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br label %DIR.VPO.END.GUARD.MEM.MOTION.8

DIR.VPO.END.GUARD.MEM.MOTION.8:                   ; preds = DIR.OMP.END.SCAN.228
  call void @llvm.directive.region.exit(token %guard.start) [ "DIR.VPO.END.GUARD.MEM.MOTION"() ]
  br label %DIR.VPO.END.GUARD.MEM.MOTION.4

DIR.VPO.END.GUARD.MEM.MOTION.4:                   ; preds = %DIR.VPO.END.GUARD.MEM.MOTION.8
  %exitcond.not = icmp eq i64 %indvars.iv.next, 1024
  br i1 %exitcond.not, label %DIR.OMP.END.SIMD.6, label %DIR.OMP.END.SCAN.2

DIR.OMP.END.SIMD.6:                               ; preds = %DIR.VPO.END.GUARD.MEM.MOTION.4
  %add3.lcssa = phi float [ %add3, %DIR.VPO.END.GUARD.MEM.MOTION.4 ]
  br label %DIR.OMP.END.SIMD.1

DIR.OMP.END.SIMD.1:                               ; preds = %DIR.OMP.END.SIMD.6
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.OMP.END.SIMD.3

DIR.OMP.END.SIMD.3:                               ; preds = %DIR.OMP.END.SIMD.1
  ret float %add3.lcssa
}

declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture)

declare token @llvm.directive.region.entry()

declare void @llvm.directive.region.exit(token)

declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture)
