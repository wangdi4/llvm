; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -VPlanDriver -S %s | FileCheck %s
; RUN: opt -passes="vplan-driver" -S %s | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define void @foo(<2 x i32>* nocapture readonly %p) {
; CHECK-LABEL: @foo(
; CHECK:       vector.body:
; CHECK-NEXT:    [[UNI_PHI1:%.*]] = phi i64 [ 0, [[VECTOR_PH:%.*]] ], [ [[TMP7:%.*]], [[VECTOR_BODY:%.*]] ]
; CHECK-NEXT:    [[VEC_PHI:%.*]] = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, [[VECTOR_PH]] ], [ [[TMP6:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[SCALAR_GEP:%.*]] = getelementptr inbounds <2 x i32>, <2 x i32>* [[P:%.*]], i64 [[UNI_PHI1]]
; CHECK-NEXT:    [[TMP0:%.*]] = bitcast <2 x i32>* [[SCALAR_GEP]] to <8 x i32>*
; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <8 x i32>, <8 x i32>* [[TMP0]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = sext <8 x i32> [[WIDE_LOAD]] to <8 x i64>
; CHECK-NEXT:    [[TMP2:%.*]] = zext <8 x i32> [[WIDE_LOAD]] to <8 x i64>
; CHECK-NEXT:    [[TMP3:%.*]] = trunc <8 x i32> [[WIDE_LOAD]] to <8 x i8>
; CHECK-NEXT:    [[TMP4:%.*]] = sitofp <8 x i32> [[WIDE_LOAD]] to <8 x float>
; CHECK-NEXT:    [[TMP5:%.*]] = uitofp <8 x i32> [[WIDE_LOAD]] to <8 x float>
; CHECK-NEXT:    [[TMP6]] = add nuw nsw <4 x i64> [[VEC_PHI]], <i64 4, i64 4, i64 4, i64 4>
; CHECK-NEXT:    [[TMP7]] = add nuw nsw i64 [[UNI_PHI1]], 4
; CHECK-NEXT:    [[TMP8:%.*]] = icmp eq i64 [[TMP7]], 1024
; CHECK-NEXT:    br i1 [[TMP8]], label [[VPLANNEDBB:%.*]], label [[VECTOR_BODY]], [[LOOP0:!llvm.loop !.*]]
;
entry:
  %entry.region = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.SIMDLEN"(i32 4) ]
  br label %header

header:
  %iv = phi i64 [ 0, %entry ], [ %iv.next, %header ]
  %gep = getelementptr inbounds <2 x i32>, <2 x i32>* %p, i64 %iv
  %ld = load <2 x i32>, <2 x i32>* %gep
  %sext = sext <2 x i32> %ld to <2 x i64>
  %zext = zext <2 x i32> %ld to <2 x i64>
  %trunc = trunc <2 x i32> %ld to <2 x i8>
  %sitofp = sitofp <2 x i32> %ld to <2 x float>
  %uitofp = uitofp <2 x i32> %ld to <2 x float>
  %iv.next = add nuw nsw i64 %iv, 1
  %exitcond = icmp eq i64 %iv.next, 1024
  br i1 %exitcond, label %exit, label %header

exit:
  call void @llvm.directive.region.exit(token %entry.region) [ "DIR.OMP.END.SIMD"() ]
  ret void
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
