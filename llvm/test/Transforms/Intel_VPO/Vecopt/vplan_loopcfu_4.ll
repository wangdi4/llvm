; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; Test inner control flow uniformity where the inner loop is a while loop without loop index.

; REQUIRES: asserts

; RUN: opt -S -vplan-func-vec -print-after-vplan-func-vec-loop-cfu < %s -disable-output | FileCheck %s
; RUN: opt -S -passes="vplan-func-vec" -print-after-vplan-func-vec-loop-cfu < %s -disable-output | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

declare token @llvm.directive.region.entry() nounwind
declare void @llvm.directive.region.exit(token) nounwind

@A = common local_unnamed_addr global [100 x [100 x i64]] zeroinitializer, align 16

define dso_local void @foo(i32* nocapture %a, i32 %m, i32* nocapture readonly %ub, i32 %k) local_unnamed_addr #0 {
; CHECK-LABEL:  VPlan IR for: foo
; CHECK-NEXT:    [[BB0:BB[0-9]+]]:
; CHECK-NEXT:     [DA: Div] i32 [[VP_LANE:%.*]] = induction-init{add} i32 0 i32 1
; CHECK-NEXT:     [DA: Div] i32* [[VP_ARRAYIDX:%.*]] = getelementptr inbounds i32* [[UB0:%.*]] i32 [[VP_LANE]]
; CHECK-NEXT:     [DA: Div] i32 [[VP0:%.*]] = load i32* [[VP_ARRAYIDX]]
; CHECK-NEXT:     [DA: Div] i1 [[VP_CMP114:%.*]] = icmp i32 [[VP0]] i32 0
; CHECK-NEXT:    SUCCESSORS(2):[[BB1:BB[0-9]+]](i1 [[VP_CMP114]]), [[BB2:BB[0-9]+]](!i1 [[VP_CMP114]])
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB1]]:
; CHECK-NEXT:       [DA: Div] i32* [[VP_ARRAYIDX5:%.*]] = getelementptr inbounds i32* [[A0:%.*]] i32 [[VP_LANE]]
; CHECK-NEXT:       [DA: Div] i32 [[VP_LANE_TRUNC:%.*]] = trunc i32 [[VP_LANE]] to i32
; CHECK-NEXT:      SUCCESSORS(1):[[BB3:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB3]]:
; CHECK-NEXT:       [DA: Div] i32 [[VP_REC:%.*]] = phi  [ i32 [[VP0]], [[BB1]] ],  [ i32 [[VP_REC_NEXT:%.*]], [[BB4:BB[0-9]+]] ]
; CHECK-NEXT:       [DA: Div] i1 [[VP_LOOP_MASK:%.*]] = phi  [ i1 [[VP_CMP114]], [[BB1]] ],  [ i1 [[VP_LOOP_MASK_NEXT:%.*]], [[BB4]] ]
; CHECK-NEXT:      SUCCESSORS(1):[[BB5:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(2): [[BB4]] [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB5]]:
; CHECK-NEXT:       <Empty Block>
; CHECK-NEXT:       Condition([[BB3]]): [DA: Div] i1 [[VP_LOOP_MASK]] = phi  [ i1 [[VP_CMP114]], [[BB1]] ],  [ i1 [[VP_LOOP_MASK_NEXT]], [[BB4]] ]
; CHECK-NEXT:      SUCCESSORS(2):[[BB6:BB[0-9]+]](i1 [[VP_LOOP_MASK]]), [[BB7:BB[0-9]+]](!i1 [[VP_LOOP_MASK]])
; CHECK-NEXT:      PREDECESSORS(1): [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB6]]:
; CHECK-NEXT:         [DA: Div] i32 [[VP_MUL:%.*]] = mul i32 [[VP_REC]] i32 [[VP_LANE_TRUNC]]
; CHECK-NEXT:         [DA: Div] store i32 [[VP_MUL]] i32* [[VP_ARRAYIDX5]]
; CHECK-NEXT:         [DA: Div] i32 [[VP_REC_NEXT]] = load i32* [[VP_ARRAYIDX]]
; CHECK-NEXT:        SUCCESSORS(1):[[BB7]]
; CHECK-NEXT:        PREDECESSORS(1): [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB7]]:
; CHECK-NEXT:       [DA: Div] i1 [[VP_EXITCOND:%.*]] = icmp i32 [[VP_REC_NEXT]] i32 0
; CHECK-NEXT:       [DA: Div] i1 [[VP_LOOP_MASK_NEXT]] = and i1 [[VP_EXITCOND]] i1 [[VP_LOOP_MASK]]
; CHECK-NEXT:       [DA: Uni] i1 [[VP1:%.*]] = all-zero-check i1 [[VP_LOOP_MASK_NEXT]]
; CHECK-NEXT:       [DA: Uni] i1 [[VP2:%.*]] = not i1 [[VP1]]
; CHECK-NEXT:      SUCCESSORS(1):[[BB4]]
; CHECK-NEXT:      PREDECESSORS(2): [[BB6]] [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB4]]:
; CHECK-NEXT:       <Empty Block>
; CHECK-NEXT:       Condition([[BB7]]): [DA: Uni] i1 [[VP2]] = not i1 [[VP1]]
; CHECK-NEXT:      SUCCESSORS(2):[[BB3]](i1 [[VP2]]), [[BB8:BB[0-9]+]](!i1 [[VP2]])
; CHECK-NEXT:      PREDECESSORS(1): [[BB7]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB8]]:
; CHECK-NEXT:       <Empty Block>
; CHECK-NEXT:      SUCCESSORS(1):[[BB2]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]:
; CHECK-NEXT:     [DA: Div] void [[VP3:%.*]] = ret
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(2): [[BB8]] [[BB0]]
;
entry:
  %lane = call i64 @llvm.vplan.laneid()
  %arrayidx = getelementptr inbounds i32, i32* %ub, i64 %lane
  %0 = load i32, i32* %arrayidx, align 4
  %cmp114 = icmp sgt i32 %0, 0
  br i1 %cmp114, label %preheader, label %exit

preheader:
  %arrayidx5 = getelementptr inbounds i32, i32* %a, i64 %lane
  %lane.trunc = trunc i64 %lane to i32
  br label %header

header:
  %rec = phi i32 [ %0, %preheader ], [ %rec.next, %header ]
  %mul = mul nsw i32 %rec, %lane.trunc
  store i32 %mul, i32* %arrayidx5, align 4
  %rec.next = load i32, i32* %arrayidx, align 4
  %exitcond = icmp sgt i32 %rec.next, 0
  br i1 %exitcond, label %header, label %loop.exit

loop.exit:
  br label %exit

exit:
  ret void
}

declare i64 @llvm.vplan.laneid()
