; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; Test to check reductions with multiple updates.
;
; RUN: opt -passes="hir-ssa-deconstruction,hir-temp-cleanup,hir-vplan-vec" -vplan-print-legality -vplan-print-after-vpentity-instrs -disable-output %s 2>&1 | FileCheck %s --check-prefix=HIR
; RUN: opt -passes="vplan-vec" -vplan-print-after-vpentity-instrs -vplan-entities-dump -disable-output %s 2>&1 | FileCheck %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Input HIR
;   BEGIN REGION { }
;         %1 =  (%r.red)[0];
;
;         + DO i1 = 0, zext.i32.i64(%n) + -1, 1   <DO_LOOP>  <MAX_TC_EST = 2147483647> <simd> <ivdep>
;         |   %1 = %1  +  i1;
;         |   %call = @_Z4predPf(&((%a)[i1]));
;         |   if (%call != 0)
;         |   {
;         |      %conv = sitofp.i32.float(%1);
;         |      %add6 = (%a)[i1]  +  %conv;
;         |      %1 = fptosi.float.i32(%add6);
;         |   }
;         |   %1 = %1  +  1;
;         + END LOOP
;
;         (%r.red)[0] = %1;
;   END REGION

; Function Attrs: mustprogress nounwind uwtable
define dso_local i32 @_Z4funciPf(i64 %n, ptr %a) local_unnamed_addr #0 {
; HIR-LABEL:  HIRLegality Descriptor Lists
; HIR:       HIRLegality ReductionList:
; HIR-NEXT:  Ref: &(([[R_RED0:%.*]])[0])
; HIR-NEXT:    UpdateInstructions:
; HIR-NEXT:    none
; HIR-EMPTY:
; HIR-NEXT:    AliasRef: [[TMP1:%.*]]
; HIR-NEXT:    UpdateInstructions:
; HIR-NEXT:    [[TMP1]] = [[TMP1]]  +  i1
; HIR-NEXT:    [[TMP1]] = fptosi.float.i32([[ADD60:%.*]])
; HIR-NEXT:    [[TMP1]] = [[TMP1]]  +  1
; HIR-NEXT:      InitValue: [[TMP1]]

; HIR:       VPlan IR for: _Z4funciPf:HIR.#{{[0-9]+}}
; HIR-NEXT:  External Defs Start:
; HIR-DAG:     [[VP0:%.*]] = {%1}
; HIR-DAG:     [[VP1:%.*]] = {%a}
; HIR-DAG:     [[VP2:%.*]] = {%k.linear.iv}
; HIR-DAG:     [[VP3:%.*]] = {%n + -1}
; HIR-NEXT:  External Defs End:
; HIR-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; HIR-NEXT:     br [[BB1:BB[0-9]+]]
; HIR-EMPTY:
; HIR-NEXT:    [[BB1]]: # preds: [[BB0]]
; HIR-NEXT:     i64 [[VP4:%.*]] = add i64 [[VP3]] i64 1
; HIR-NEXT:     i32 [[VP_RED_INIT:%.*]] = reduction-init i32 0 i32 [[TMP1]]
; HIR-NEXT:     i64 [[VP__IND_INIT:%.*]] = induction-init{add} i64 0 i64 1
; HIR-NEXT:     i64 [[VP__IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; HIR-NEXT:     br [[BB2:BB[0-9]+]]
; HIR-EMPTY:
; HIR-NEXT:    [[BB2]]: # preds: [[BB1]], [[BB3:BB[0-9]+]]
; HIR-NEXT:     i32 [[VP5:%.*]] = phi  [ i32 [[VP_RED_INIT]], [[BB1]] ],  [ i32 [[VP6:%.*]], [[BB3]] ]
; HIR-NEXT:     i64 [[VP7:%.*]] = phi  [ i64 [[VP__IND_INIT]], [[BB1]] ],  [ i64 [[VP8:%.*]], [[BB3]] ]
; HIR-NEXT:     i32 [[VP9:%.*]] = trunc i64 [[VP7]] to i32
; HIR-NEXT:     i32 [[VP10:%.*]] = add i32 [[VP5]] i32 [[VP9]]
; HIR-NEXT:     ptr [[VP_SUBSCRIPT:%.*]] = subscript inbounds ptr [[A0:%.*]] i64 [[VP7]]
; HIR-NEXT:     i32 [[VP_CALL:%.*]] = call ptr [[VP_SUBSCRIPT]] ptr @_Z4predPf
; HIR-NEXT:     i1 [[VP11:%.*]] = icmp ne i32 [[VP_CALL]] i32 0
; HIR-NEXT:     br i1 [[VP11]], [[BB4:BB[0-9]+]], [[BB3]]
; HIR-EMPTY:
; HIR-NEXT:      [[BB4]]: # preds: [[BB2]]
; HIR-NEXT:       float [[VP12:%.*]] = sitofp i32 [[VP10]] to float
; HIR-NEXT:       ptr [[VP_SUBSCRIPT_1:%.*]] = subscript inbounds ptr [[A0]] i64 [[VP7]]
; HIR-NEXT:       float [[VP_LOAD:%.*]] = load ptr [[VP_SUBSCRIPT_1]]
; HIR-NEXT:       float [[VP13:%.*]] = fadd float [[VP_LOAD]] float [[VP12]]
; HIR-NEXT:       i32 [[VP14:%.*]] = fptosi float [[VP13]] to i32
; HIR-NEXT:       br [[BB3]]
; HIR-EMPTY:
; HIR-NEXT:    [[BB3]]: # preds: [[BB4]], [[BB2]]
; HIR-NEXT:     i32 [[VP15:%.*]] = phi  [ i32 [[VP14]], [[BB4]] ],  [ i32 [[VP10]], [[BB2]] ]
; HIR-NEXT:     i32 [[VP6]] = add i32 [[VP15]] i32 1
; HIR-NEXT:     i64 [[VP8]] = add i64 [[VP7]] i64 [[VP__IND_INIT_STEP]]
; HIR-NEXT:     i1 [[VP16:%.*]] = icmp slt i64 [[VP8]] i64 [[VP4]]
; HIR-NEXT:     br i1 [[VP16]], [[BB2]], [[BB5:BB[0-9]+]]
; HIR-EMPTY:
; HIR-NEXT:    [[BB5]]: # preds: [[BB3]]
; HIR-NEXT:     i32 [[VP_RED_FINAL:%.*]] = reduction-final{u_add} i32 [[VP6]]
; HIR-NEXT:     i64 [[VP__IND_FINAL:%.*]] = induction-final{add} i64 0 i64 1
; HIR-NEXT:     br [[BB6:BB[0-9]+]]
; HIR-EMPTY:
; HIR-NEXT:    [[BB6]]: # preds: [[BB5]]
; HIR-NEXT:     br <External Block>
; HIR-EMPTY:
; HIR-NEXT:  External Uses:
; HIR-NEXT:  Id: 0   i32 [[VP_RED_FINAL]] -> [[VP17:%.*]] = {%1}
;
; CHECK:       VPlan IR for: _Z4funciPf:omp.inner.for.body.#{{[0-9]+}}
; CHECK-NEXT:  Loop Entities of the loop with header [[BB0:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:  Reduction list
; CHECK-NEXT:   signed  (+) Start: i32 [[R_RED_PROMOTED0:%.*]] Exit: i32 [[VP_INC:%.*]]
; CHECK-NEXT:    Linked values: i32 [[VP0:%.*]], i32 [[VP_INC]], i32 [[VP_RED_INIT:%.*]], i32 [[VP_RED_FINAL:%.*]],
; CHECK-EMPTY:
; CHECK-EMPTY:
; CHECK-NEXT:  Induction list
; CHECK-NEXT:   IntInduction(+) Start: i64 0 Step: i64 1 StartVal: i64 0 EndVal: ? BinOp: i64 [[VP_INDVARS_IV_NEXT:%.*]] = add i64 [[VP_INDVARS_IV:%.*]] i64 [[VP_INDVARS_IV_IND_INIT_STEP:%.*]]
; CHECK-NEXT:    Linked values: i64 [[VP_INDVARS_IV]], i64 [[VP_INDVARS_IV_NEXT]], i64 [[VP_INDVARS_IV_IND_INIT:%.*]], i64 [[VP_INDVARS_IV_IND_INIT_STEP]], i64 [[VP_INDVARS_IV_IND_FINAL:%.*]],
; CHECK:         [[BB1:BB[0-9]+]]: # preds:
; CHECK-NEXT:     br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]]
; CHECK-NEXT:     i32 [[VP_RED_INIT]] = reduction-init i32 0 i32 [[R_RED_PROMOTED0]]
; CHECK-NEXT:     i64 [[VP_INDVARS_IV_IND_INIT]] = induction-init{add} i64 0 i64 1
; CHECK-NEXT:     i64 [[VP_INDVARS_IV_IND_INIT_STEP]] = induction-init-step{add} i64 1
; CHECK-NEXT:     br [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB0]]: # preds: [[BB2]], [[BB3:BB[0-9]+]]
; CHECK-NEXT:     i64 [[VP_INDVARS_IV]] = phi  [ i64 [[VP_INDVARS_IV_IND_INIT]], [[BB2]] ],  [ i64 [[VP_INDVARS_IV_NEXT]], [[BB3]] ]
; CHECK-NEXT:     i32 [[VP0]] = phi  [ i32 [[VP_RED_INIT]], [[BB2]] ],  [ i32 [[VP_INC]], [[BB3]] ]
; CHECK-NEXT:     i32 [[VP1:%.*]] = trunc i64 [[VP_INDVARS_IV]] to i32
; CHECK-NEXT:     i32 [[VP_ADD5:%.*]] = add i32 [[VP0]] i32 [[VP1]]
; CHECK-NEXT:     ptr [[VP_ADD_PTR:%.*]] = getelementptr inbounds float, ptr [[A0:%.*]] i64 [[VP_INDVARS_IV]]
; CHECK-NEXT:     i32 [[VP_CALL:%.*]] = call ptr [[VP_ADD_PTR]] ptr @_Z4predPf
; CHECK-NEXT:     i1 [[VP_TOBOOL_NOT:%.*]] = icmp eq i32 [[VP_CALL]] i32 0
; CHECK-NEXT:     br i1 [[VP_TOBOOL_NOT]], [[BB3]], [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB4]]: # preds: [[BB0]]
; CHECK-NEXT:       float [[VP2:%.*]] = load ptr [[VP_ADD_PTR]]
; CHECK-NEXT:       float [[VP_CONV:%.*]] = sitofp i32 [[VP_ADD5]] to float
; CHECK-NEXT:       float [[VP_ADD6:%.*]] = fadd float [[VP2]] float [[VP_CONV]]
; CHECK-NEXT:       i32 [[VP_CONV7:%.*]] = fptosi float [[VP_ADD6]] to i32
; CHECK-NEXT:       br [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: [[BB0]], [[BB4]]
; CHECK-NEXT:     i32 [[VP3:%.*]] = phi  [ i32 [[VP_CONV7]], [[BB4]] ],  [ i32 [[VP_ADD5]], [[BB0]] ]
; CHECK-NEXT:     i32 [[VP_INC]] = add i32 [[VP3]] i32 1
; CHECK-NEXT:     i64 [[VP_INDVARS_IV_NEXT]] = add i64 [[VP_INDVARS_IV]] i64 [[VP_INDVARS_IV_IND_INIT_STEP]]
; CHECK-NEXT:     i1 [[VP_EXITCOND_NOT:%.*]] = icmp eq i64 [[VP_INDVARS_IV_NEXT]] i64 [[N0:%.*]]
; CHECK-NEXT:     br i1 [[VP_EXITCOND_NOT]], [[BB5:BB[0-9]+]], [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]: # preds: [[BB3]]
; CHECK-NEXT:     i32 [[VP_RED_FINAL]] = reduction-final{u_add} i32 [[VP_INC]]
; CHECK-NEXT:     i64 [[VP_INDVARS_IV_IND_FINAL]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:     br [[BB6:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]]: # preds: [[BB5]]
; CHECK-NEXT:     br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0     [[INC_LCSSA0:%.*]] = phi i32 [ [[INC0:%.*]], [[IF_END0:%.*]] ] i32 [[VP_RED_FINAL]] -> i32 [[INC0]]
;
entry:
  %r.red = alloca i32, align 4
  %k.linear.iv = alloca i32, align 4
  store i32 0, ptr %r.red, align 4
  br label %DIR.OMP.SIMD.129

DIR.OMP.SIMD.129:                                 ; preds = %DIR.OMP.SIMD.1
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.REDUCTION.ADD:TYPED"(ptr %r.red, i32 0, i32 1), "QUAL.OMP.LINEAR:IV.TYPED"(ptr %k.linear.iv, i32 0, i32 1, i32 1) ]
  br label %DIR.OMP.SIMD.2

DIR.OMP.SIMD.2:                                   ; preds = %DIR.OMP.SIMD.129
  %r.red.promoted = load i32, ptr %r.red, align 4
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %DIR.OMP.SIMD.2, %if.end
  %indvars.iv = phi i64 [ 0, %DIR.OMP.SIMD.2 ], [ %indvars.iv.next, %if.end ]
  %1 = phi i32 [ %r.red.promoted, %DIR.OMP.SIMD.2 ], [ %inc, %if.end ]
  %2 = trunc i64 %indvars.iv to i32
  %add5 = add nsw i32 %1, %2
  %add.ptr = getelementptr inbounds float, ptr %a, i64 %indvars.iv
  %call = call i32 @_Z4predPf(ptr %add.ptr) #1
  %tobool.not = icmp eq i32 %call, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %omp.inner.for.body
  %3 = load float, ptr %add.ptr, align 4
  %conv = sitofp i32 %add5 to float
  %add6 = fadd fast float %3, %conv
  %conv7 = fptosi float %add6 to i32
  br label %if.end

if.end:                                           ; preds = %if.then, %omp.inner.for.body
  %4 = phi i32 [ %conv7, %if.then ], [ %add5, %omp.inner.for.body ]
  %inc = add nsw i32 %4, 1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %n
  br i1 %exitcond.not, label %DIR.OMP.END.SIMD.2, label %omp.inner.for.body

DIR.OMP.END.SIMD.2:                               ; preds = %if.end
  %inc.lcssa = phi i32 [ %inc, %if.end ]
  store i32 %inc.lcssa, ptr %r.red, align 4
  br label %DIR.OMP.END.SIMD.3

DIR.OMP.END.SIMD.3:                               ; preds = %DIR.OMP.END.SIMD.2
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %DIR.OMP.END.SIMD.3, %entry
  ret i32 undef
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #0

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #0

declare dso_local i32 @_Z4predPf(ptr) local_unnamed_addr #0

attributes #0 = { nounwind }

