; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; LIT test to check folding of divide by constant into linear canon expressions
; in VPValue based CG.
; RUN: opt -hir-ssa-deconstruction -hir-vec-dir-insert -VPlanDriverHIR -vplan-force-vf=4 -print-after=VPlanDriverHIR -disable-output -enable-vp-value-codegen-hir=1 < %s 2>&1  | FileCheck %s
define void @foo(i64* noalias nocapture %larr, i64* noalias nocapture %larr2, i64 %n1) {
; CHECK-LABEL:  *** IR Dump After VPlan Vectorization Driver HIR ***
; CHECK:               + DO i1 = 0, 99, 4   <DO_LOOP> <auto-vectorized> <novectorize>
; CHECK-NEXT:          |   (<4 x i64>*)(%larr)[i1] = (i1 + <i64 0, i64 1, i64 2, i64 3>)/u9;
; CHECK-NEXT:          |   (<4 x i64>*)(%larr2)[i1] = (i1 + %n1 + <i64 0, i64 1, i64 2, i64 3>)/9;
; CHECK-NEXT:          + END LOOP
;
entry:
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %l1.09 = phi i64 [ 0, %entry ], [ %inc, %for.body ]
  %div = udiv i64 %l1.09, 9
  %arrayidx = getelementptr inbounds i64, i64* %larr, i64 %l1.09
  store i64 %div, i64* %arrayidx, align 8
  %add = add nsw i64 %l1.09, %n1
  %div1 = sdiv i64 %add, 9
  %arrayidx2 = getelementptr inbounds i64, i64* %larr2, i64 %l1.09
  store i64 %div1, i64* %arrayidx2, align 8
  %inc = add nuw nsw i64 %l1.09, 1
  %exitcond = icmp eq i64 %inc, 100
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  ret void
}
