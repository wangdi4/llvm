; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py

; Tests if the phi node of the exit block is updated correctly.

; RUN: opt < %s -vplan-func-vec -disable-output -print-after-vplan-func-vec-loop-exit-canon | FileCheck %s
; RUN: opt < %s -passes="vplan-func-vec" -disable-output -print-after-vplan-func-vec-loop-exit-canon | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define void @main(i32 %vf) {
; CHECK-LABEL:  VPlan IR for: main
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     i32 [[VP_LANE:%.*]] = induction-init{add} i32 0 i32 1
; CHECK-NEXT:     br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]], [[BB2:BB[0-9]+]]
; CHECK-NEXT:     i32 [[VP_OUTER_LOOP_INDUCTION_VAR:%.*]] = phi  [ i32 0, [[BB0]] ],  [ i32 [[VP_OUTER_LOOP_INDUCTION:%.*]], [[BB2]] ]
; CHECK-NEXT:     br [[BB3:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: [[BB1]], [[NEW_LOOP_LATCH0:new.loop.latch[0-9]+]]
; CHECK-NEXT:     i32 [[VP_INNER_LOOP_1_INDUCTION_VAR:%.*]] = phi  [ i32 0, [[BB1]] ],  [ i32 [[VP_INNER_LOOP_1_INDUCTION_SSA_PHI:%.*]], [[NEW_LOOP_LATCH0]] ]
; CHECK-NEXT:     i1 [[VP_CMP1:%.*]] = icmp eq i32 [[VP_INNER_LOOP_1_INDUCTION_VAR]] i32 8
; CHECK-NEXT:     br i1 [[VP_CMP1]], [[BB4:BB[0-9]+]], [[INTERMEDIATE_BB0:intermediate.bb[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB4]]: # preds: [[BB3]]
; CHECK-NEXT:       br [[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB5]]: # preds: [[BB4]], [[NEW_LOOP_LATCH1:new.loop.latch[0-9]+]]
; CHECK-NEXT:       i32 [[VP_INNER_LOOP_2_INDUCTION_VAR:%.*]] = phi  [ i32 0, [[BB4]] ],  [ i32 [[VP_INNER_LOOP_2_INDUCTION_SSA_PHI:%.*]], [[NEW_LOOP_LATCH1]] ]
; CHECK-NEXT:       i1 [[VP_CMP2:%.*]] = icmp eq i32 [[VP_INNER_LOOP_2_INDUCTION_VAR]] i32 16
; CHECK-NEXT:       br i1 [[VP_CMP2]], [[BB6:BB[0-9]+]], [[INTERMEDIATE_BB1:intermediate.bb[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[INTERMEDIATE_BB1]]: # preds: [[BB5]]
; CHECK-NEXT:         br [[NEW_LOOP_LATCH1]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB6]]: # preds: [[BB5]]
; CHECK-NEXT:         i32 [[VP_VAR_2:%.*]] = add i32 [[VP_INNER_LOOP_2_INDUCTION_VAR]] i32 2
; CHECK-NEXT:         i1 [[VP_CMP3:%.*]] = icmp eq i32 [[VP_VAR_2]] i32 32
; CHECK-NEXT:         br i1 [[VP_CMP3]], [[BB7:BB[0-9]+]], [[INTERMEDIATE_BB2:intermediate.bb[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:          [[INTERMEDIATE_BB2]]: # preds: [[BB6]]
; CHECK-NEXT:           br [[NEW_LOOP_LATCH1]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB7]]: # preds: [[BB6]]
; CHECK-NEXT:         i32 [[VP_INNER_LOOP_2_INDUCTION:%.*]] = add i32 [[VP_INNER_LOOP_2_INDUCTION_VAR]] i32 1
; CHECK-NEXT:         i1 [[VP_INNER_LOOP_2_BOTTOM_TEST:%.*]] = icmp eq i32 [[VP_INNER_LOOP_2_INDUCTION]] i32 128
; CHECK-NEXT:         br i1 [[VP_INNER_LOOP_2_BOTTOM_TEST]], [[BB8:BB[0-9]+]], [[INTERMEDIATE_BB3:intermediate.bb[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:          [[INTERMEDIATE_BB3]]: # preds: [[BB7]]
; CHECK-NEXT:           br [[NEW_LOOP_LATCH1]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB8]]: # preds: [[BB7]]
; CHECK-NEXT:         br [[NEW_LOOP_LATCH1]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[NEW_LOOP_LATCH1]]: # preds: [[BB8]], [[INTERMEDIATE_BB1]], [[INTERMEDIATE_BB2]], [[INTERMEDIATE_BB3]]
; CHECK-NEXT:       i32 [[VP_INNER_LOOP_2_INDUCTION_SSA_PHI]] = phi  [ i32 [[VP_INNER_LOOP_2_INDUCTION]], [[BB8]] ],  [ i32 undef, [[INTERMEDIATE_BB1]] ],  [ i32 undef, [[INTERMEDIATE_BB2]] ],  [ i32 [[VP_INNER_LOOP_2_INDUCTION]], [[INTERMEDIATE_BB3]] ]
; CHECK-NEXT:       i32 [[VP_EXIT_ID_PHI:%.*]] = phi  [ i32 0, [[BB8]] ],  [ i32 1, [[INTERMEDIATE_BB1]] ],  [ i32 2, [[INTERMEDIATE_BB2]] ],  [ i32 3, [[INTERMEDIATE_BB3]] ]
; CHECK-NEXT:       i1 [[VP_TAKE_BACKEDGE_COND:%.*]] = phi  [ i1 true, [[BB8]] ],  [ i1 false, [[INTERMEDIATE_BB1]] ],  [ i1 false, [[INTERMEDIATE_BB2]] ],  [ i1 false, [[INTERMEDIATE_BB3]] ]
; CHECK-NEXT:       br i1 [[VP_TAKE_BACKEDGE_COND]], [[BB5]], [[CASCADED_IF_BLOCK0:cascaded.if.block[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[CASCADED_IF_BLOCK0]]: # preds: [[NEW_LOOP_LATCH1]]
; CHECK-NEXT:       i1 [[VP0:%.*]] = icmp eq i32 [[VP_EXIT_ID_PHI]] i32 2
; CHECK-NEXT:       br i1 [[VP0]], [[INTERMEDIATE_BB4:intermediate.bb[0-9]+]], [[CASCADED_IF_BLOCK1:cascaded.if.block[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[CASCADED_IF_BLOCK1]]: # preds: [[CASCADED_IF_BLOCK0]]
; CHECK-NEXT:         i1 [[VP1:%.*]] = icmp eq i32 [[VP_EXIT_ID_PHI]] i32 3
; CHECK-NEXT:         br i1 [[VP1]], [[BB9:BB[0-9]+]], [[INTERMEDIATE_BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[INTERMEDIATE_BB0]]: # preds: [[BB3]], [[CASCADED_IF_BLOCK1]]
; CHECK-NEXT:         i32 [[VP_EXITBB1_PHI:%.*]] = phi  [ i32 1, [[BB3]] ],  [ i32 2, [[CASCADED_IF_BLOCK1]] ]
; CHECK-NEXT:         br [[NEW_LOOP_LATCH0]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB9]]: # preds: [[CASCADED_IF_BLOCK1]]
; CHECK-NEXT:         i32 [[VP_INNER_LOOP_1_INDUCTION:%.*]] = add i32 [[VP_INNER_LOOP_1_INDUCTION_VAR]] i32 1
; CHECK-NEXT:         i1 [[VP_INNER_LOOP_1_BOTTOM_TEST:%.*]] = icmp eq i32 [[VP_INNER_LOOP_1_INDUCTION]] i32 128
; CHECK-NEXT:         br i1 [[VP_INNER_LOOP_1_BOTTOM_TEST]], [[BB10:BB[0-9]+]], [[INTERMEDIATE_BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB10]]: # preds: [[BB9]]
; CHECK-NEXT:         br [[NEW_LOOP_LATCH0]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[INTERMEDIATE_BB4]]: # preds: [[BB9]], [[CASCADED_IF_BLOCK0]]
; CHECK-NEXT:       i32 [[VP_EXITBB2_PHI:%.*]] = phi  [ i32 3, [[CASCADED_IF_BLOCK0]] ],  [ i32 4, [[BB9]] ]
; CHECK-NEXT:       br [[NEW_LOOP_LATCH0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[NEW_LOOP_LATCH0]]: # preds: [[BB10]], [[INTERMEDIATE_BB0]], [[INTERMEDIATE_BB4]]
; CHECK-NEXT:     i32 [[VP_INNER_LOOP_1_INDUCTION_SSA_PHI]] = phi  [ i32 [[VP_INNER_LOOP_1_INDUCTION]], [[BB10]] ],  [ i32 undef, [[INTERMEDIATE_BB0]] ],  [ i32 undef, [[INTERMEDIATE_BB4]] ]
; CHECK-NEXT:     i32 [[VP_EXIT_ID_PHI_1:%.*]] = phi  [ i32 0, [[BB10]] ],  [ i32 1, [[INTERMEDIATE_BB0]] ],  [ i32 2, [[INTERMEDIATE_BB4]] ]
; CHECK-NEXT:     i1 [[VP_TAKE_BACKEDGE_COND_1:%.*]] = phi  [ i1 true, [[BB10]] ],  [ i1 false, [[INTERMEDIATE_BB0]] ],  [ i1 false, [[INTERMEDIATE_BB4]] ]
; CHECK-NEXT:     br i1 [[VP_TAKE_BACKEDGE_COND_1]], [[BB3]], [[CASCADED_IF_BLOCK2:cascaded.if.block[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[CASCADED_IF_BLOCK2]]: # preds: [[NEW_LOOP_LATCH0]]
; CHECK-NEXT:     i1 [[VP2:%.*]] = icmp eq i32 [[VP_EXIT_ID_PHI_1]] i32 2
; CHECK-NEXT:     br i1 [[VP2]], [[BB11:BB[0-9]+]], [[BB12:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB12]]: # preds: [[CASCADED_IF_BLOCK2]]
; CHECK-NEXT:       br [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB11]]: # preds: [[CASCADED_IF_BLOCK2]]
; CHECK-NEXT:       br [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB12]], [[BB11]]
; CHECK-NEXT:     i32 [[VP_OUTER_LOOP_INDUCTION]] = add i32 [[VP_OUTER_LOOP_INDUCTION_VAR]] i32 [[VF0:%.*]]
; CHECK-NEXT:     i1 [[VP_CMP4:%.*]] = icmp eq i32 [[VP_OUTER_LOOP_INDUCTION]] i32 1024
; CHECK-NEXT:     br i1 [[VP_CMP4]], [[BB1]], [[BB13:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB13]]: # preds: [[BB2]]
; CHECK-NEXT:     br [[BB14:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB14]]: # preds: [[BB13]]
; CHECK-NEXT:     ret
; CHECK-NEXT:     br <External Block>
;
entry:
  %lane = call i32 @llvm.vplan.laneid()
  br label %outer_loop_header
;-------------------------------------------------------------------------------
;                     BEFORE MERGE LOOP EXITS TRANSFORMATION
;-------------------------------------------------------------------------------
; +----->outer_loop_header
; |              |
; | +--->inner_loop_1_header---------------------------------------+
; | |            |                                                 |
; | |           bb1                                                |
; | |            |                                                 |
; | | +->inner_loop_2_header---------------------------------------+
; | | |          |                                                 |
; | | |         bb2---------------------------+                    |
; | | |          |                            |                    |
; | | |         bb3-------------+             |                    |
; | | |          |              |             |                    |
; | | +--inner_loop_2_latch     |             |                    |
; | |                           |             |                    |
; | |                 inner_loop_1_exitbb1----+                    |
; | |                           |             |                    |
; | +------------------inner_loop_1_latch     |                    |
; |                                           |                    |
; |                                 inner_loop_1_exitbb2 inner_loop_2_exitbb1
; |                                              \              /
; +----------------------------------------------outer_loop_latch
;                                                      |
outer_loop_header:
  %outer_loop_induction_var = phi i32 [ 0, %entry ], [ %outer_loop_induction, %outer_loop_latch ]
  br label %inner_loop_1_header

inner_loop_1_header:
  %inner_loop_1_induction_var = phi i32 [ 0, %outer_loop_header ], [ %inner_loop_1_induction, %inner_loop_1_latch ]
  %cmp1 = icmp eq i32 %inner_loop_1_induction_var, 8
  br i1 %cmp1, label %bb1, label %inner_loop_1_exitbb1

bb1:
  br label %inner_loop_2_header

inner_loop_2_header:
  %inner_loop_2_induction_var = phi i32 [ 0, %bb1 ], [ %inner_loop_2_induction, %inner_loop_2_latch ]
  %cmp2 = icmp eq i32 %inner_loop_2_induction_var, 16
  br i1 %cmp2, label %bb2, label %inner_loop_1_exitbb1

bb2:
  %var_2 = add nsw i32 %inner_loop_2_induction_var, 2
  %cmp3 = icmp eq i32 %var_2, 32
  br i1 %cmp3, label %bb3, label %inner_loop_1_exitbb2

bb3:
  %inner_loop_2_induction = add nsw i32 %inner_loop_2_induction_var, 1
  %inner_loop_2_bottom_test = icmp eq i32 %inner_loop_2_induction, 128
  br i1 %inner_loop_2_bottom_test, label %inner_loop_2_latch, label %inner_loop_2_exitbb1

inner_loop_2_latch:
  br label %inner_loop_2_header

inner_loop_2_exitbb1:
  %inner_loop_1_induction = add nsw i32 %inner_loop_1_induction_var, 1
  %inner_loop_1_bottom_test = icmp eq i32 %inner_loop_1_induction, 128
  br i1 %inner_loop_1_bottom_test, label %inner_loop_1_latch, label %inner_loop_1_exitbb2

inner_loop_1_latch:
  br label %inner_loop_1_header

inner_loop_1_exitbb1:
  %exitbb1_phi = phi i32 [ 1, %inner_loop_1_header ], [ 2, %inner_loop_2_header ]
  br label %outer_loop_latch

inner_loop_1_exitbb2:
  %exitbb2_phi = phi i32 [ 3, %bb2 ], [ 4, %inner_loop_2_exitbb1 ]
  br label %outer_loop_latch

outer_loop_latch:
  %outer_loop_induction = add nsw i32 %outer_loop_induction_var, %vf
  %cmp4 = icmp eq i32 %outer_loop_induction, 1024
  br i1 %cmp4, label %outer_loop_header, label %outer_loop_exit

outer_loop_exit:
  br label %end

end:
  ret void
}

declare i32 @llvm.vplan.laneid()
