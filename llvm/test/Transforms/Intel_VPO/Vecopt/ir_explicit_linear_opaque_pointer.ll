; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -opaque-pointers -disable-output -vplan-vec -vplan-force-vf=2 -vplan-entities-dump -vplan-print-after-vpentity-instrs -vplan-dump-induction-init-details  < %s 2>&1 | FileCheck %s
; RUN: opt -opaque-pointers -disable-output -passes="vplan-vec" -vplan-force-vf=2 -vplan-entities-dump -vplan-print-after-vpentity-instrs -vplan-dump-induction-init-details  < %s 2>&1 | FileCheck %s
; REQUIRES: asserts

; Test verifies that VPlan can consume OMP linear clauses with opaque pointres.

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; int x[10];
; int y = 1;
; void foo() {
; #pragma omp simd linear (y)
;    for (int i = 0; i < 10; i++) {
;      x[i] = y;
;    }
; }
;

@x = dso_local global [10 x i32] zeroinitializer, align 16
@y = dso_local global i32 1, align 4

; Function Attrs: noinline nounwind uwtable
define dso_local void @foo() #0 {
; CHECK-LABEL:  VPlan after insertion of VPEntities instructions:
; CHECK-NEXT:  VPlan IR for: foo:omp.inner.for.body.#{{[0-9]+}}
; CHECK-NEXT:  Loop Entities of the loop with header [[BB0:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:  Induction list
; CHECK-NEXT:   IntInduction(+) Start: i32 0 Step: i32 1 StartVal: i32 0 EndVal: i32 10 BinOp: i32 [[VP_IV_NEXT:%.*]] = add i32 [[VP_IV:%.*]] i32 [[VP_IV_IND_INIT_STEP:%.*]]
; CHECK-NEXT:    Linked values: i32 [[VP_IV]], i32 [[VP_IV_NEXT]], i32 [[VP_IV_IND_INIT:%.*]], i32 [[VP_IV_IND_INIT_STEP]], i32 [[VP_IV_IND_FINAL:%.*]],
; CHECK-EMPTY:
; CHECK-NEXT:   IntInduction(+) Start: i32 [[VP_Y:%.*]] Step: i32 1 StartVal: ? EndVal: ? need close form
; CHECK-NEXT:    Linked values: ptr [[VP_Y_LINEAR_PTR:%.*]], i32 [[VP_Y_LINEAR_PTR_IND_INIT:%.*]], i32 [[VP_Y_LINEAR_PTR_IND_INIT_STEP:%.*]], void [[VP_STORE:%.*]], i32 [[VP_Y_LINEAR_PTR_IND_FINAL:%.*]],
; CHECK-NEXT:   Memory: ptr [[Y_LINEAR_PTR0:%.*]]
; CHECK-NEXT:   IntInduction(+) Start: i32 [[VP_IV]] Step: i32 1 StartVal: ? EndVal: ? need close form
; CHECK-NEXT:    Linked values: ptr [[VP_I_LINEAR_IV_PTR:%.*]], i32 [[VP_I_LINEAR_IV_PTR_IND_INIT:%.*]], i32 [[VP_I_LINEAR_IV_PTR_IND_INIT_STEP:%.*]], void [[VP_STORE_1:%.*]], i32 [[VP_I_LINEAR_IV_PTR_IND_FINAL:%.*]],
; CHECK-NEXT:   Memory: ptr [[I_LINEAR_IV_PTR0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1:BB[0-9]+]]: # preds:
; CHECK-NEXT:     br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]]
; CHECK-NEXT:     ptr [[VP_I_LINEAR_IV_PTR]] = allocate-priv ptr, OrigAlign = 4
; CHECK-NEXT:     call i64 4 ptr [[VP_I_LINEAR_IV_PTR]] ptr @llvm.lifetime.start.p0
; CHECK-NEXT:     ptr [[VP_Y_LINEAR_PTR]] = allocate-priv ptr, OrigAlign = 4
; CHECK-NEXT:     call i64 4 ptr [[VP_Y_LINEAR_PTR]] ptr @llvm.lifetime.start.p0
; CHECK-NEXT:     i32 [[VP_IV_IND_INIT]] = induction-init{add, StartVal: i32 0, EndVal: i32 10} i32 0 i32 1
; CHECK-NEXT:     i32 [[VP_IV_IND_INIT_STEP]] = induction-init-step{add} i32 1
; CHECK-NEXT:     i32 [[VP_LOAD:%.*]] = load ptr [[Y_LINEAR_PTR0]]
; CHECK-NEXT:     i32 [[VP_Y_LINEAR_PTR_IND_INIT]] = induction-init{add, StartVal: ?, EndVal: ?} i32 [[VP_LOAD]] i32 1
; CHECK-NEXT:     store i32 [[VP_Y_LINEAR_PTR_IND_INIT]] ptr [[VP_Y_LINEAR_PTR]]
; CHECK-NEXT:     i32 [[VP_Y_LINEAR_PTR_IND_INIT_STEP]] = induction-init-step{add} i32 1
; CHECK-NEXT:     i32 [[VP_LOAD_1:%.*]] = load ptr [[I_LINEAR_IV_PTR0]]
; CHECK-NEXT:     i32 [[VP_I_LINEAR_IV_PTR_IND_INIT]] = induction-init{add, StartVal: ?, EndVal: ?} i32 [[VP_LOAD_1]] i32 1
; CHECK-NEXT:     store i32 [[VP_I_LINEAR_IV_PTR_IND_INIT]] ptr [[VP_I_LINEAR_IV_PTR]]
; CHECK-NEXT:     i32 [[VP_I_LINEAR_IV_PTR_IND_INIT_STEP]] = induction-init-step{add} i32 1
; CHECK-NEXT:     br [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB0]]: # preds: [[BB2]], [[BB0]]
; CHECK-NEXT:     i32 [[VP_IV]] = phi  [ i32 [[VP_IV_IND_INIT]], [[BB2]] ],  [ i32 [[VP_IV_NEXT]], [[BB0]] ]
; CHECK-NEXT:     i32 [[VP0:%.*]] = phi  [ i32 [[VP_Y_LINEAR_PTR_IND_INIT]], [[BB2]] ],  [ i32 [[VP1:%.*]], [[BB0]] ]
; CHECK-NEXT:     i32 [[VP2:%.*]] = phi  [ i32 [[VP_I_LINEAR_IV_PTR_IND_INIT]], [[BB2]] ],  [ i32 [[VP3:%.*]], [[BB0]] ]
; CHECK-NEXT:     store i32 [[VP2]] ptr [[VP_I_LINEAR_IV_PTR]]
; CHECK-NEXT:     store i32 [[VP0]] ptr [[VP_Y_LINEAR_PTR]]
; CHECK-NEXT:     store i32 [[VP_IV]] ptr [[VP_I_LINEAR_IV_PTR]]
; CHECK-NEXT:     i32 [[VP_Y]] = load ptr [[VP_Y_LINEAR_PTR]]
; CHECK-NEXT:     i32 [[VP_I:%.*]] = load ptr [[VP_I_LINEAR_IV_PTR]]
; CHECK-NEXT:     ptr [[VP_X_PTR:%.*]] = getelementptr inbounds [10 x i32], ptr @x i64 0 i32 [[VP_I]]
; CHECK-NEXT:     store i32 [[VP_Y]] ptr [[VP_X_PTR]]
; CHECK-NEXT:     i32 [[VP_IV_NEXT]] = add i32 [[VP_IV]] i32 [[VP_IV_IND_INIT_STEP]]
; CHECK-NEXT:     i32 [[VP1]] = add i32 [[VP0]] i32 [[VP_Y_LINEAR_PTR_IND_INIT_STEP]]
; CHECK-NEXT:     i32 [[VP3]] = add i32 [[VP2]] i32 [[VP_I_LINEAR_IV_PTR_IND_INIT_STEP]]
; CHECK-NEXT:     i1 [[VP_COND_EXIT:%.*]] = icmp sgt i32 10 i32 [[VP_IV_NEXT]]
; CHECK-NEXT:     br i1 [[VP_COND_EXIT]], [[BB0]], [[BB3:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: [[BB0]]
; CHECK-NEXT:     i32 [[VP_IV_IND_FINAL]] = induction-final{add} i32 0 i32 1
; CHECK-NEXT:     i32 [[VP_LOAD_2:%.*]] = load ptr [[VP_Y_LINEAR_PTR]]
; CHECK-NEXT:     i32 [[VP_Y_LINEAR_PTR_IND_FINAL]] = induction-final{add} i32 [[VP_LOAD]] i32 1
; CHECK-NEXT:     store i32 [[VP_Y_LINEAR_PTR_IND_FINAL]] ptr [[Y_LINEAR_PTR0]]
; CHECK-NEXT:     call i64 4 ptr [[VP_Y_LINEAR_PTR]] ptr @llvm.lifetime.end.p0
; CHECK-NEXT:     i32 [[VP_LOAD_3:%.*]] = load ptr [[VP_I_LINEAR_IV_PTR]]
; CHECK-NEXT:     i32 [[VP_I_LINEAR_IV_PTR_IND_FINAL]] = induction-final{add} i32 [[VP_LOAD_1]] i32 1
; CHECK-NEXT:     store i32 [[VP_I_LINEAR_IV_PTR_IND_FINAL]] ptr [[I_LINEAR_IV_PTR0]]
; CHECK-NEXT:     call i64 4 ptr [[VP_I_LINEAR_IV_PTR]] ptr @llvm.lifetime.end.p0
; CHECK-NEXT:     br [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: [[BB3]]
; CHECK-NEXT:     br <External Block>
;
entry:
  %y.linear.ptr = alloca i32, align 4
  %i.linear.iv.ptr = alloca i32, align 4
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %entry
  %y.init = load i32, i32* @y, align 4
  store i32 %y.init, i32* %y.linear.ptr, align 4
  br label %omp.region.entry

omp.region.entry:                                 ; preds = %DIR.OMP.SIMD.1
  %i3 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.LINEAR:TYPED"(i32* %y.linear.ptr, i32 0, i32 1, i32 1), "QUAL.OMP.LINEAR:IV.TYPED"(i32* %i.linear.iv.ptr, i32 0, i32 1, i32 1) ]
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.inner.for.body, %omp.region.entry
  %iv = phi i32 [ 0, %omp.region.entry ], [ %iv.next, %omp.inner.for.body ]
  store i32 %iv, i32* %i.linear.iv.ptr, align 4
  %y = load i32, i32* %y.linear.ptr, align 4
  %i = load i32, i32* %i.linear.iv.ptr, align 4
  %x.ptr = getelementptr inbounds [10 x i32], [10 x i32]* @x, i64 0, i32 %i
  store i32 %y, i32* %x.ptr, align 4
  %iv.next = add nsw i32 %iv, 1
  %cond.exit = icmp sgt i32 10, %iv.next
  br i1 %cond.exit, label %omp.inner.for.body, label %omp.region.exit

omp.region.exit:                                  ; preds = %omp.inner.for.body
  call void @llvm.directive.region.exit(token %i3) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.OMP.END.SIMD.1

DIR.OMP.END.SIMD.1:                               ; preds = %omp.region.exit
  %y.last = load i32, i32* %y.linear.ptr, align 4
  store i32 %y.last, i32* @y, align 4
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %DIR.OMP.END.SIMD.1
  br label %DIR.OMP.END.SIMD.3

DIR.OMP.END.SIMD.3:                               ; preds = %omp.loop.exit
  ret void
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

attributes #0 = { noinline nounwind uwtable "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "frame-pointer"="all" "may-have-openmp-directive"="true" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #1 = { nounwind }
