; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt < %s -hir-ssa-deconstruction -hir-vec-dir-insert -VPlanDriverHIR \
; RUN:     -mtriple=x86_64-unknown-unknown -mcpu=skx \
; RUN:     -disable-output -vplan-cost-model-print-analysis-for-vf=8 \
; RUN:     | FileCheck %s --check-prefix=VPLAN-HIR-CM-VF8

@arr.i32.0 = common local_unnamed_addr global [1024 x i32] zeroinitializer, align 16
@arr.i32.1 = common local_unnamed_addr global [1024 x i32] zeroinitializer, align 16
@arr.i32.2 = common local_unnamed_addr global [1024 x i32] zeroinitializer, align 16
@arr.i32.3 = common local_unnamed_addr global [1024 x i32] zeroinitializer, align 16

define void @test_fit_32bitindex_gather() local_unnamed_addr #0 {
; VPLAN-HIR-CM-VF8-LABEL:  HIR Cost Model for VPlan test_fit_32bitindex_gather.28 with VF = 8:
; VPLAN-HIR-CM-VF8-NEXT:  Total Cost: 48
; VPLAN-HIR-CM-VF8-NEXT:  Analyzing VPBasicBlock [[BB0:BB[0-9]+]], total cost: 0
; VPLAN-HIR-CM-VF8-NEXT:  Analyzing VPBasicBlock [[BB1:BB[0-9]+]], total cost: 0
; VPLAN-HIR-CM-VF8-NEXT:    Cost Unknown for i32 [[VP__IND_INIT:%.*]] = induction-init{add} i32 0 i32 1
; VPLAN-HIR-CM-VF8-NEXT:    Cost Unknown for i32 [[VP__IND_INIT_STEP:%.*]] = induction-init-step{add} i32 1
; VPLAN-HIR-CM-VF8-NEXT:  Analyzing VPBasicBlock [[BB2:BB[0-9]+]], total cost: 48
; VPLAN-HIR-CM-VF8-NEXT:    Cost Unknown for i32 [[VP0:%.*]] = phi  [ i32 [[VP__IND_INIT]], [[BB1]] ],  [ i32 [[VP1:%.*]], [[BB2]] ]
; VPLAN-HIR-CM-VF8-NEXT:    Cost Unknown for i32 [[VP2:%.*]] = mul i32 3 i32 [[VP0]]
; VPLAN-HIR-CM-VF8-NEXT:    Cost Unknown for i64 [[VP3:%.*]] = sext i32 [[VP2]] to i64
; VPLAN-HIR-CM-VF8-NEXT:    Cost 0 for i32* [[VP4:%.*]] = subscript inbounds [1024 x i32]* @arr.i32.0 i64 0 i64 [[VP3]]
; VPLAN-HIR-CM-VF8-NEXT:    Cost 4 for i32 [[VP5:%.*]] = load i32* [[VP4]]
; VPLAN-HIR-CM-VF8-NEXT:    Cost Unknown for i32 [[VP6:%.*]] = mul i32 3 i32 [[VP0]]
; VPLAN-HIR-CM-VF8-NEXT:    Cost Unknown for i64 [[VP7:%.*]] = sext i32 [[VP6]] to i64
; VPLAN-HIR-CM-VF8-NEXT:    Cost 0 for i32* [[VP8:%.*]] = subscript inbounds [1024 x i32]* @arr.i32.1 i64 1 i64 [[VP7]]
; VPLAN-HIR-CM-VF8-NEXT:    Cost 4 for i32 [[VP9:%.*]] = load i32* [[VP8]]
; VPLAN-HIR-CM-VF8-NEXT:    Cost Unknown for i32 [[VP10:%.*]] = mul i32 3 i32 [[VP0]]
; VPLAN-HIR-CM-VF8-NEXT:    Cost Unknown for i64 [[VP11:%.*]] = sext i32 [[VP10]] to i64
; VPLAN-HIR-CM-VF8-NEXT:    Cost 0 for i32* [[VP12:%.*]] = subscript inbounds [1024 x i32]* @arr.i32.2 i64 2147483647 i64 [[VP11]]
; VPLAN-HIR-CM-VF8-NEXT:    Cost 4 for i32 [[VP13:%.*]] = load i32* [[VP12]]
; VPLAN-HIR-CM-VF8-NEXT:    Cost Unknown for i32 [[VP14:%.*]] = mul i32 3 i32 [[VP0]]
; VPLAN-HIR-CM-VF8-NEXT:    Cost Unknown for i64 [[VP15:%.*]] = sext i32 [[VP14]] to i64
; VPLAN-HIR-CM-VF8-NEXT:    Cost 0 for i32* [[VP16:%.*]] = subscript inbounds [1024 x i32]* @arr.i32.3 i64 2147483648 i64 [[VP15]]
; VPLAN-HIR-CM-VF8-NEXT:    Cost 4 for i32 [[VP17:%.*]] = load i32* [[VP16]]
; VPLAN-HIR-CM-VF8-NEXT:    Cost Unknown for i32 [[VP18:%.*]] = mul i32 3 i32 [[VP0]]
; VPLAN-HIR-CM-VF8-NEXT:    Cost Unknown for i64 [[VP19:%.*]] = sext i32 [[VP18]] to i64
; VPLAN-HIR-CM-VF8-NEXT:    Cost 0 for i32* [[VP20:%.*]] = subscript inbounds [1024 x i32]* @arr.i32.0 i64 0 i64 [[VP19]]
; VPLAN-HIR-CM-VF8-NEXT:    Cost 8 for store i32 [[VP9]] i32* [[VP20]]
; VPLAN-HIR-CM-VF8-NEXT:    Cost Unknown for i32 [[VP21:%.*]] = mul i32 3 i32 [[VP0]]
; VPLAN-HIR-CM-VF8-NEXT:    Cost Unknown for i64 [[VP22:%.*]] = sext i32 [[VP21]] to i64
; VPLAN-HIR-CM-VF8-NEXT:    Cost 0 for i32* [[VP23:%.*]] = subscript inbounds [1024 x i32]* @arr.i32.1 i64 1 i64 [[VP22]]
; VPLAN-HIR-CM-VF8-NEXT:    Cost 8 for store i32 [[VP13]] i32* [[VP23]]
; VPLAN-HIR-CM-VF8-NEXT:    Cost Unknown for i32 [[VP24:%.*]] = mul i32 3 i32 [[VP0]]
; VPLAN-HIR-CM-VF8-NEXT:    Cost Unknown for i64 [[VP25:%.*]] = sext i32 [[VP24]] to i64
; VPLAN-HIR-CM-VF8-NEXT:    Cost 0 for i32* [[VP26:%.*]] = subscript inbounds [1024 x i32]* @arr.i32.2 i64 2147483647 i64 [[VP25]]
; VPLAN-HIR-CM-VF8-NEXT:    Cost 8 for store i32 [[VP17]] i32* [[VP26]]
; VPLAN-HIR-CM-VF8-NEXT:    Cost Unknown for i32 [[VP27:%.*]] = mul i32 3 i32 [[VP0]]
; VPLAN-HIR-CM-VF8-NEXT:    Cost Unknown for i64 [[VP28:%.*]] = sext i32 [[VP27]] to i64
; VPLAN-HIR-CM-VF8-NEXT:    Cost 0 for i32* [[VP29:%.*]] = subscript inbounds [1024 x i32]* @arr.i32.3 i64 2147483648 i64 [[VP28]]
; VPLAN-HIR-CM-VF8-NEXT:    Cost 8 for store i32 [[VP5]] i32* [[VP29]]
; VPLAN-HIR-CM-VF8-NEXT:    Cost Unknown for i32 [[VP1]] = add i32 [[VP0]] i32 [[VP__IND_INIT_STEP]]
; VPLAN-HIR-CM-VF8-NEXT:    Cost Unknown for i1 [[VP30:%.*]] = icmp i32 [[VP1]] i32 340
; VPLAN-HIR-CM-VF8-NEXT:  Analyzing VPBasicBlock [[BB3:BB[0-9]+]], total cost: 0
; VPLAN-HIR-CM-VF8-NEXT:    Cost Unknown for i32 [[VP__IND_FINAL:%.*]] = induction-final{add} i32 0 i32 1
; VPLAN-HIR-CM-VF8-NEXT:  Analyzing VPBasicBlock [[BB4:BB[0-9]+]], total cost: 0
;
entry:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %for.body

for.body:
  %indvars.iv = phi i32 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %indvars.iv64 = sext i32 %indvars.iv to i64
  %ld.idx0 = getelementptr inbounds [1024 x i32], [1024 x i32]* @arr.i32.0, i64 0, i64 %indvars.iv64
  %ld.idx1 = getelementptr inbounds [1024 x i32], [1024 x i32]* @arr.i32.1, i64 1, i64 %indvars.iv64
  %ld.idx2 = getelementptr inbounds [1024 x i32], [1024 x i32]* @arr.i32.2, i64 2147483647, i64 %indvars.iv64
  %ld.idx3 = getelementptr inbounds [1024 x i32], [1024 x i32]* @arr.i32.3, i64 2147483648, i64 %indvars.iv64
  %ld0 = load i32, i32* %ld.idx0
  %ld1 = load i32, i32* %ld.idx1
  %ld2 = load i32, i32* %ld.idx2
  %ld3 = load i32, i32* %ld.idx3

  store i32 %ld1, i32* %ld.idx0
  store i32 %ld2, i32* %ld.idx1
  store i32 %ld3, i32* %ld.idx2
  store i32 %ld0, i32* %ld.idx3

  %indvars.iv.next = add nuw nsw i32 %indvars.iv, 3
  %exitcond = icmp eq i32 %indvars.iv.next, 1024
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"()]
  ret void

}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

; This attribute makes TTI to work as if -zmm-usage=low is thrown. W/o this
; attribute TTI assumes zmm can be used and <8 x i64> index fits a single HW
; gather/scatter instruction.
attributes #0 = { "min-legal-vector-width"="0" }
attributes #1 = { nounwind }
