; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; Test to check for correct processing of induction update instructions. For
; induction variable k we should have a close-form calculation generated.
; RUN: opt -S < %s -VPlanDriver -vplan-force-vf=4 -vplan-entities-dump -vplan-print-after-linearization -disable-output  | FileCheck %s

define void @foo(i32* noalias nocapture %A, i32* noalias nocapture readonly %B, i64 %N, i64 %c) local_unnamed_addr #0 {
; CHECK-LABEL:  After predication and linearization
; CHECK-NEXT:  Loop Entities of the loop with header [[BB0:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:  Induction list
; CHECK-NEXT:   IntInduction(+) Start: i64 1 Step: i64 1 BinOp: i64 [[VP_INDVARS_IV_NEXT:%.*]] = add i64 [[VP_INDVARS_IV:%.*]] i64 [[VP_INDVARS_IV_IND_INIT_STEP:%.*]]
; CHECK-NEXT:    Linked values: i64 [[VP_INDVARS_IV]], i64 [[VP_INDVARS_IV_NEXT]], i64 [[VP_INDVARS_IV_IND_INIT:%.*]], i64 [[VP_INDVARS_IV_IND_FINAL:%.*]],
; CHECK-EMPTY:
; CHECK-NEXT:   IntInduction(+) Start: i64 [[K_IV_B0:%.*]] Step: i64 2 BinOp: i64 [[VP_K_IV_NEXT:%.*]] = add i64 [[VP_K_IV_N1:%.*]] i64 1 need close form
; CHECK-NEXT:    Linked values: i64 [[VP_K_IV:%.*]], i64 [[VP_K_IV_NEXT]], i64 [[VP_K_IV_IND_INIT:%.*]], i64 [[VP0:%.*]], i64 [[VP_K_IV_IND_FINAL:%.*]],
; CHECK:         [[BB1:BB[0-9]+]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB2:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]:
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_INDVARS_IV_IND_INIT]] = induction-init{add} i64 1 i64 1
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP_INDVARS_IV_IND_INIT_STEP]] = induction-init-step{add} i64 1
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_K_IV_IND_INIT]] = induction-init{add} i64 [[K_IV_B0]] i64 2
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP_K_IV_IND_INIT_STEP:%.*]] = induction-init-step{add} i64 2
; CHECK-NEXT:    SUCCESSORS(1):[[BB0]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB0]]:
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_INDVARS_IV]] = phi  [ i64 [[VP_INDVARS_IV_IND_INIT]], [[BB2]] ],  [ i64 [[VP_INDVARS_IV_NEXT]], [[BB0]] ]
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_K_IV]] = phi  [ i64 [[VP_K_IV_IND_INIT]], [[BB2]] ],  [ i64 [[VP0]], [[BB0]] ]
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_K_IV_N1]] = add i64 [[VP_K_IV]] i64 1
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_INDVARS_IV_NEXT]] = add i64 [[VP_INDVARS_IV]] i64 [[VP_INDVARS_IV_IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_K_IV_NEXT]] = add i64 [[VP_K_IV_N1]] i64 1
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_EXITCOND:%.*]] = icmp i64 [[VP_INDVARS_IV_NEXT]] i64 [[N0:%.*]]
; CHECK-NEXT:     [DA: Divergent] i64 [[VP0]] = add i64 [[VP_K_IV]] i64 [[VP_K_IV_IND_INIT_STEP]]
; CHECK-NEXT:    SUCCESSORS(2):[[BB3:BB[0-9]+]](i1 [[VP_EXITCOND]]), [[BB0]](!i1 [[VP_EXITCOND]])
; CHECK-NEXT:    PREDECESSORS(2): [[BB0]] [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]:
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP_INDVARS_IV_IND_FINAL]] = induction-final{add} i64 1 i64 1
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP_K_IV_IND_FINAL]] = induction-final{add} i64 [[K_IV_B0]] i64 2
; CHECK-NEXT:    SUCCESSORS(1):[[BB4:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB3]]
;
entry:
  %k = alloca i64, align 4
  store i64 0, i64* %k, align 4
  br label %reg.entry

reg.entry:
  %entry.region = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.LINEAR"(i64* %k, i64 2) ]
  br label %for.body.lr.ph

for.body.lr.ph:
  %k.iv.b = load i64, i64* %k, align 4
  br label %for.body

for.body:
  %indvars.iv = phi i64 [ 1, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %k.iv = phi i64 [ %k.iv.b, %for.body.lr.ph ], [ %k.iv.next, %for.body ]
  %k.iv.n1 = add nuw nsw i64 %k.iv, 1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %k.iv.next = add nuw nsw i64 %k.iv.n1, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %N
  br i1 %exitcond, label %for.cond.cleanup.loopexit, label %for.body

for.cond.cleanup.loopexit:
  br label %for.cond.cleanup

for.cond.cleanup:
  call void @llvm.directive.region.exit(token %entry.region) [ "DIR.OMP.END.SIMD"() ]
  ret void
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)

