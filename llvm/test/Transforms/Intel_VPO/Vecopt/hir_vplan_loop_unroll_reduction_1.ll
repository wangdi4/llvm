; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -S < %s -hir-ssa-deconstruction -hir-temp-cleanup -VPlanDriverHIR -vplan-force-vf=4 -vplan-force-uf=3 -enable-vp-value-codegen-hir=0 --vplan-print-after-unroll --print-after=VPlanDriverHIR -disable-output 2>&1 | FileCheck %s
; RUN: opt -S < %s -hir-ssa-deconstruction -hir-temp-cleanup -VPlanDriverHIR -vplan-force-vf=4 -vplan-force-uf=3 -enable-vp-value-codegen-hir -print-after=VPlanDriverHIR -disable-output 2>&1 | FileCheck %s --check-prefix=VPVALCG

; int foo(int *a, int n) {
;   int acc = 0;
;   #pragma omp simd
;   for (int i = 0; i < n; i++) {
;     acc += a[i];
;   }
;   return acc;
; }

define dso_local i32 @_Z3fooPii(i32* nocapture readonly %a, i32 %n) local_unnamed_addr #0 {
; CHECK-LABEL:  VPlan after VPlan loop unrolling:
; CHECK-NEXT:  VPlan IR for: Initial VPlan for VF=4
; CHECK-NEXT:  External Defs Start:
; CHECK-DAG:     [[VP0:%.*]] = {%acc.019}
; CHECK-DAG:     [[VP1:%.*]] = {sext.i32.i64(%n) + -1}
; CHECK-DAG:     [[VP2:%.*]] = {%a}
; CHECK-NEXT:  External Defs End:
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     i64 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i64 [[VP1]], UF = 3
; CHECK-NEXT:     [DA: Div] i32 [[VP__RED_INIT:%.*]] = reduction-init i32 0 i32 live-in0
; CHECK-NEXT:     [DA: Div] i64 [[VP__IND_INIT:%.*]] = induction-init{add} i64 live-in1 i64 1
; CHECK-NEXT:     [DA: Uni] i64 [[VP__IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:     [DA: Uni] br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], cloned.[[BB3:BB[0-9]+]]
; CHECK-NEXT:     [DA: Div] i32 [[VP3:%.*]] = phi  [ i32 [[VP__RED_INIT]], [[BB1]] ],  [ i32 [[VP4:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] i64 [[VP5:%.*]] = phi  [ i64 [[VP__IND_INIT]], [[BB1]] ],  [ i64 [[VP6:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] i32* [[VP_SUBSCRIPT:%.*]] = subscript inbounds i32* [[A0:%.*]] i64 [[VP5]]
; CHECK-NEXT:     [DA: Div] i32 [[VP_LOAD:%.*]] = load i32* [[VP_SUBSCRIPT]]
; CHECK-NEXT:     [DA: Div] i32 [[VP7:%.*]] = add i32 [[VP_LOAD]] i32 [[VP3]]
; CHECK-NEXT:     [DA: Div] i64 [[VP8:%.*]] = add i64 [[VP5]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP9:%.*]] = icmp sle i64 [[VP8]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br cloned.[[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB4]]: # preds: [[BB2]]
; CHECK-NEXT:     [DA: Div] i32* [[VP10:%.*]] = subscript inbounds i32* [[A0]] i64 [[VP8]]
; CHECK-NEXT:     [DA: Div] i32 [[VP11:%.*]] = load i32* [[VP10]]
; CHECK-NEXT:     [DA: Div] i32 [[VP12:%.*]] = add i32 [[VP11]] i32 [[VP7]]
; CHECK-NEXT:     [DA: Div] i64 [[VP13:%.*]] = add i64 [[VP8]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP14:%.*]] = icmp sle i64 [[VP13]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br cloned.[[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB3]]: # preds: cloned.[[BB4]]
; CHECK-NEXT:     [DA: Div] i32* [[VP15:%.*]] = subscript inbounds i32* [[A0]] i64 [[VP13]]
; CHECK-NEXT:     [DA: Div] i32 [[VP16:%.*]] = load i32* [[VP15]]
; CHECK-NEXT:     [DA: Div] i32 [[VP4]] = add i32 [[VP16]] i32 [[VP12]]
; CHECK-NEXT:     [DA: Div] i64 [[VP6]] = add i64 [[VP13]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP17:%.*]] = icmp sle i64 [[VP6]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP17]], [[BB2]], [[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]: # preds: cloned.[[BB3]]
; CHECK-NEXT:     [DA: Uni] i32 [[VP__RED_FINAL:%.*]] = reduction-final{u_add} i32 [[VP4]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP__IND_FINAL:%.*]] = induction-final{add} i64 live-in1 i64 1
; CHECK-NEXT:     [DA: Uni] br [[BB6:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]]: # preds: [[BB5]]
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   i32 [[VP__RED_FINAL]] -> [[VP18:%.*]] = {%acc.019}
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 1   no underlying for i64 [[VP__IND_FINAL]]
; CHECK-EMPTY:
; CHECK-NEXT:  *** IR Dump After VPlan Vectorization Driver HIR (VPlanDriverHIR) ***
; CHECK-NEXT:  Function: _Z3fooPii
; CHECK-EMPTY:
; CHECK-NEXT:  <0>          BEGIN REGION { modified }
; CHECK-NEXT:  <7>                [[ACC_0190:%.*]] = 0
; CHECK-NEXT:  <25>               [[TGU0:%.*]] = (sext.i32.i64([[N0:%.*]]))/u12
; CHECK-NEXT:  <27>               if (0 <u 12 * [[TGU0]])
; CHECK-NEXT:  <27>               {
; CHECK-NEXT:  <29>                     [[RED_VAR0:%.*]] = 0
; CHECK-NEXT:  <30>                     [[RED_VAR0]] = insertelement [[RED_VAR0]],  [[ACC_0190]],  0
; CHECK-NEXT:  <26>                  + DO i1 = 0, 12 * [[TGU0]] + -1, 12   <DO_LOOP> <simd-vectorized> <nounroll> <novectorize>
; CHECK-NEXT:  <31>                  |   [[DOTVEC0:%.*]] = (<4 x i32>*)([[A0]])[i1]
; CHECK-NEXT:  <32>                  |   [[DOTVEC20:%.*]] = [[DOTVEC0]]  +  [[RED_VAR0]]
; CHECK-NEXT:  <33>                  |   [[DOTVEC0]] = (<4 x i32>*)([[A0]])[i1 + 4]
; CHECK-NEXT:  <34>                  |   [[DOTVEC40:%.*]] = [[DOTVEC0]]  +  [[DOTVEC20]]
; CHECK-NEXT:  <35>                  |   [[DOTVEC0]] = (<4 x i32>*)([[A0]])[i1 + 8]
; CHECK-NEXT:  <36>                  |   [[RED_VAR0]] = [[DOTVEC0]]  +  [[DOTVEC40]]
; CHECK-NEXT:  <26>                  + END LOOP
; CHECK-NEXT:  <37>                     [[ACC_0190]] = @llvm.vector.reduce.add.v4i32([[RED_VAR0]])
; CHECK-NEXT:  <27>               }
; CHECK-NEXT:  <24>
; CHECK-NEXT:  <24>               + DO i1 = 12 * [[TGU0]], sext.i32.i64([[N0]]) + -1, 1   <DO_LOOP>  <MAX_TC_EST = 11> <nounroll> <novectorize> <max_trip_count = 11>
; CHECK-NEXT:  <11>               |   [[TMP1:%.*]] = ([[A0]])[i1]
; CHECK-NEXT:  <12>               |   [[ACC_0190]] = [[TMP1]]  +  [[ACC_0190]]
; CHECK-NEXT:  <24>               + END LOOP
; CHECK-NEXT:  <0>          END REGION
;
; VPVALCG-LABEL:  *** IR Dump After VPlan Vectorization Driver HIR (VPlanDriverHIR) ***
; VPVALCG-NEXT:  Function: _Z3fooPii
; VPVALCG-EMPTY:
; VPVALCG-NEXT:  <0>          BEGIN REGION { modified }
; VPVALCG-NEXT:  <7>                [[ACC_0190:%.*]] = 0
; VPVALCG-NEXT:  <25>               [[TGU0:%.*]] = (sext.i32.i64([[N0:%.*]]))/u12
; VPVALCG-NEXT:  <27>               if (0 <u 12 * [[TGU0]])
; VPVALCG-NEXT:  <27>               {
; VPVALCG-NEXT:  <29>                     [[RED_VAR0:%.*]] = 0
; VPVALCG-NEXT:  <30>                     [[RED_VAR0]] = insertelement [[RED_VAR0]],  [[ACC_0190]],  0
; VPVALCG-NEXT:  <26>                  + DO i1 = 0, 12 * [[TGU0]] + -1, 12   <DO_LOOP> <simd-vectorized> <nounroll> <novectorize>
; VPVALCG-NEXT:  <31>                  |   [[DOTVEC0:%.*]] = (<4 x i32>*)([[A0:%.*]])[i1]
; VPVALCG-NEXT:  <32>                  |   [[DOTVEC20:%.*]] = [[DOTVEC0]]  +  [[RED_VAR0]]
; VPVALCG-NEXT:  <33>                  |   [[DOTVEC30:%.*]] = (<4 x i32>*)([[A0]])[i1 + 4]
; VPVALCG-NEXT:  <34>                  |   [[DOTVEC40:%.*]] = [[DOTVEC30]]  +  [[DOTVEC20]]
; VPVALCG-NEXT:  <35>                  |   [[DOTVEC50:%.*]] = (<4 x i32>*)([[A0]])[i1 + 8]
; VPVALCG-NEXT:  <36>                  |   [[RED_VAR0]] = [[DOTVEC50]]  +  [[DOTVEC40]]
; VPVALCG-NEXT:  <26>                  + END LOOP
; VPVALCG-NEXT:  <37>                     [[ACC_0190]] = @llvm.vector.reduce.add.v4i32([[RED_VAR0]])
; VPVALCG-NEXT:  <27>               }
; VPVALCG-NEXT:  <24>
; VPVALCG-NEXT:  <24>               + DO i1 = 12 * [[TGU0]], sext.i32.i64([[N0]]) + -1, 1   <DO_LOOP>  <MAX_TC_EST = 11> <nounroll> <novectorize> <max_trip_count = 11>
; VPVALCG-NEXT:  <11>               |   [[TMP1:%.*]] = ([[A0]])[i1]
; VPVALCG-NEXT:  <12>               |   [[ACC_0190]] = [[TMP1]]  +  [[ACC_0190]]
; VPVALCG-NEXT:  <24>               + END LOOP
; VPVALCG-NEXT:  <0>          END REGION
;


entry:
  %cmp = icmp sgt i32 %n, 0
  br i1 %cmp, label %DIR.OMP.SIMD.2, label %omp.precond.end

DIR.OMP.SIMD.2:                                   ; preds = %entry
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.NORMALIZED.IV"(i8* null), "QUAL.OMP.NORMALIZED.UB"(i8* null) ]
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %DIR.OMP.SIMD.2
  %wide.trip.count = sext i32 %n to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.inner.for.body, %DIR.OMP.SIMD.1
  %indvars.iv = phi i64 [ 0, %DIR.OMP.SIMD.1 ], [ %indvars.iv.next, %omp.inner.for.body ]
  %acc.019 = phi i32 [ 0, %DIR.OMP.SIMD.1 ], [ %add6, %omp.inner.for.body ]
  %arrayidx = getelementptr inbounds i32, i32* %a, i64 %indvars.iv
  %1 = load i32, i32* %arrayidx, align 4
  %add6 = add nsw i32 %1, %acc.019
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond, label %DIR.OMP.END.SIMD.3, label %omp.inner.for.body

DIR.OMP.END.SIMD.3:                               ; preds = %omp.inner.for.body
  %add6.lcssa = phi i32 [ %add6, %omp.inner.for.body ]
  br label %DIR.OMP.END.SIMD.2

DIR.OMP.END.SIMD.2:                               ; preds = %DIR.OMP.END.SIMD.3
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %DIR.OMP.END.SIMD.2, %entry
  %acc.2 = phi i32 [ %add6.lcssa, %DIR.OMP.END.SIMD.2 ], [ 0, %entry ]
  ret i32 %acc.2
}

declare token @llvm.directive.region.entry() nounwind
declare void @llvm.directive.region.exit(token) nounwind
