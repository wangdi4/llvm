; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt %s -S -vplan-vec | FileCheck %s

target triple = "x86_64-unknown-linux-gnu"

%"QNCA_a0$i32*$rank2$" = type { i32*, i64, i64, i64, i64, i64, [2 x { i64, i64, i64 }] }

define i32 @sum_() {
; CHECK:  define i32 @sum_() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[B3_I_LPRIV0:%.*]] = alloca %"QNCA_a0$i32*$rank2$", align 1
; CHECK-NEXT:    [[B3_I_LPRIV_VEC0:%.*]] = alloca [2 x %"QNCA_a0$i32*$rank2$"], align 8
; CHECK-NEXT:    [[B3_I_LPRIV_VEC_BC0:%.*]] = bitcast [2 x %"QNCA_a0$i32*$rank2$"]* [[B3_I_LPRIV_VEC0]] to %"QNCA_a0$i32*$rank2$"*
; CHECK-NEXT:    [[B3_I_LPRIV_VEC_BASE_ADDR0:%.*]] = getelementptr %"QNCA_a0$i32*$rank2$", %"QNCA_a0$i32*$rank2$"* [[B3_I_LPRIV_VEC_BC0]], <2 x i32> <i32 0, i32 1>
; CHECK-NEXT:    [[B3_I_LPRIV_VEC_BASE_ADDR_EXTRACT_1_0:%.*]] = extractelement <2 x %"QNCA_a0$i32*$rank2$"*> [[B3_I_LPRIV_VEC_BASE_ADDR0]], i32 1
; CHECK-NEXT:    br label [[DIR_OMP_SIMD_1440:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.SIMD.144:
; CHECK-NEXT:    br label [[VPLANNEDBB0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB:
; CHECK-NEXT:    br i1 true, label [[MERGE_BLK0:%.*]], label [[VPLANNEDBB10:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB1:
; CHECK-NEXT:    br label [[VPLANNEDBB20:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB2:
; CHECK-NEXT:    [[B3_I_LPRIV_VEC0_BCAST:%.*]] = bitcast [2 x %"QNCA_a0$i32*$rank2$"]* [[B3_I_LPRIV_VEC0]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 192, i8* [[B3_I_LPRIV_VEC0_BCAST]])
; CHECK-NEXT:    br label [[VECTOR_BODY0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  vector.body:
; CHECK-NEXT:    [[UNI_PHI0:%.*]] = phi i64 [ 0, [[VPLANNEDBB20]] ], [ [[TMP2:%.*]], [[VPLANNEDBB50:%.*]] ]
; CHECK-NEXT:    [[UNI_PHI40:%.*]] = phi i64 [ [[TMP1:%.*]], [[VPLANNEDBB50]] ], [ 1, [[VPLANNEDBB20]] ]
; CHECK-NEXT:    [[VEC_PHI0:%.*]] = phi <2 x i64> [ [[TMP0:%.*]], [[VPLANNEDBB50]] ], [ <i64 1, i64 2>, [[VPLANNEDBB20]] ]
; CHECK-NEXT:    br label [[VPLANNEDBB50]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB5:
; CHECK-NEXT:    [[TMP0]] = add nuw <2 x i64> [[VEC_PHI0]], <i64 2, i64 2>
; CHECK-NEXT:    [[TMP1]] = add nuw i64 [[UNI_PHI40]], 2
; CHECK-NEXT:    [[TMP2]] = add i64 [[UNI_PHI0]], 2
; CHECK-NEXT:    [[TMP3:%.*]] = icmp uge i64 [[TMP2]], 0
; CHECK-NEXT:    br i1 [[TMP3]], label [[VPLANNEDBB60:%.*]], label [[VECTOR_BODY0]], !llvm.loop !0
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB6:
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast %"QNCA_a0$i32*$rank2$"* [[B3_I_LPRIV0]] to i8*
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast %"QNCA_a0$i32*$rank2$"* [[B3_I_LPRIV_VEC_BASE_ADDR_EXTRACT_1_0]] to i8*
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 [[TMP4]], i8* align 8 [[TMP5]], i64 96, i1 false)
;
entry:
  %b3.i.lpriv = alloca %"QNCA_a0$i32*$rank2$", align 1
  br label %DIR.OMP.SIMD.144

DIR.OMP.SIMD.144:
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.LASTPRIVATE"(%"QNCA_a0$i32*$rank2$"* %b3.i.lpriv) ]
  br label %loop_test12.preheader

loop_test12.preheader:
  %"$loop_ctr1.037" = phi i64 [ %add.6, %loop_body ], [ 1, %DIR.OMP.SIMD.144 ]
  br label %loop_body

loop_body:
  %add.6 = add nuw i64 %"$loop_ctr1.037", 1
  %exitcond40.not = icmp eq i64 %"$loop_ctr1.037", undef
  br i1 %exitcond40.not, label %loop_exit18.loopexit, label %loop_test12.preheader

loop_exit18.loopexit:
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  ret i32 undef
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
