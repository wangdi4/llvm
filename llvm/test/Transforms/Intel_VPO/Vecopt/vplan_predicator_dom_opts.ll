; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt %s -VPlanDriver -enable-new-vplan-predicator=false -enable-vp-value-codegen=0 -vplan-predicator-report -disable-vplan-subregions=0 -disable-vplan-loop-regions=0 -disable-predicator-opts -S -o /dev/null | FileCheck %s -check-prefix=NOOPT
; RUN: opt %s -VPlanDriver -enable-new-vplan-predicator=false -enable-vp-value-codegen=0 -vplan-predicator-report -disable-vplan-subregions=0 -disable-vplan-loop-regions=0 -S -o /dev/null | FileCheck %s -check-prefix=OPT

; region1
; -------
;  BB19
;   |
;   v
; loop23
;   |
;   v
;  BB20


; loop23
; ------
;  BB18
;   |
;   v
;  BB2<----+
;   |      |
;   v      |
; region24 |
;   |      |
;   v      |
;  BB22----+
;   |
;   v
;  BB17


; region24
; --------
;   BB21---+
;    |     |
;    v     |
; region25 |
;    |     |
;    v     |
;   BB10   |
;    |     |
;    v     |
; region26 |
;    |     |
;    v     |
;   BB5<---+


; region25
; --------
; BB4
;  | \
;  v  v
; BB7 BB8
;  |  /
;  v v
; BB9


; region26
; --------
; BB11
;  | \
;  v  v
; BB13 BB14
;  |   /
;  v  v
; BB15




source_filename = "none"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind uwtable
define void @foo(i32* noalias nocapture %a, i32* noalias nocapture %b, i32* noalias nocapture %c, i32 %N) local_unnamed_addr #0 {
; NOOPT-LABEL:  Predicator report
; NOOPT-NEXT:  [[LOOP0:loop[0-9]+]]:
; NOOPT-NEXT:    [[BB0:BB[0-9]+]]:
; NOOPT-NEXT:      [[BP0:BP[0-9]+]] =
; NOOPT-NEXT:    [[BB1:BB[0-9]+]]:
; NOOPT-NEXT:      [[BP1:BP[0-9]+]] = [[BP0]]
; NOOPT-NEXT:    [[REGION0:region[0-9]+]]:
; NOOPT-NEXT:      [[BP1]] = [[BP0]]
; NOOPT-NEXT:    [[BB2:BB[0-9]+]]:
; NOOPT-NEXT:      [[BP2:BP[0-9]+]] = [[BP1]]
; NOOPT-NEXT:    [[BB3:BB[0-9]+]]:
; NOOPT-NEXT:      [[BP3:BP[0-9]+]] = [[BP0]]
; NOOPT-NEXT:  End of the Predicator report.
; NOOPT-NEXT:  Predicator report
; NOOPT-NEXT:  [[REGION0]]:
; NOOPT-NEXT:    [[BB4:BB[0-9]+]]:
; NOOPT-NEXT:      [[BP4:BP[0-9]+]] = [[BP1]]
; NOOPT-NEXT:      [[IFT0:IfT[0-9]+]] = [[BP4]] && i1 [[VP_CMP0:%.*]]
; NOOPT-NEXT:      [[IFF0:IfF[0-9]+]] = [[BP4]] && !i1 [[VP_CMP0]]
; NOOPT-NEXT:    [[REGION1:region[0-9]+]]:
; NOOPT-NEXT:      [[IFT0]] = [[BP4]] && i1 [[VP_CMP0]]
; NOOPT-NEXT:    [[BB5:BB[0-9]+]]:
; NOOPT-NEXT:      [[BP5:BP[0-9]+]] = [[IFT0]]
; NOOPT-NEXT:    [[REGION2:region[0-9]+]]:
; NOOPT-NEXT:      [[BP5]] = [[IFT0]]
; NOOPT-NEXT:    [[BB6:BB[0-9]+]]:
; NOOPT-NEXT:      [[BP6:BP[0-9]+]] = [[BP5]] || [[IFF0]]
; NOOPT-NEXT:  End of the Predicator report.
; NOOPT-NEXT:  Predicator report
; NOOPT-NEXT:  [[REGION1]]:
; NOOPT-NEXT:    [[BB7:BB[0-9]+]]:
; NOOPT-NEXT:      [[BP7:BP[0-9]+]] = [[IFT0]]
; NOOPT-NEXT:      [[IFF1:IfF[0-9]+]] = [[BP7]] && !i1 [[VP_CMP1:%.*]]
; NOOPT-NEXT:      [[IFT1:IfT[0-9]+]] = [[BP7]] && i1 [[VP_CMP1]]
; NOOPT-NEXT:    [[BB8:BB[0-9]+]]:
; NOOPT-NEXT:      [[BP8:BP[0-9]+]] = [[IFF1]]
; NOOPT-NEXT:    [[BB9:BB[0-9]+]]:
; NOOPT-NEXT:      [[BP9:BP[0-9]+]] = [[IFT1]]
; NOOPT-NEXT:    [[BB10:BB[0-9]+]]:
; NOOPT-NEXT:      [[BP10:BP[0-9]+]] = [[BP8]] || [[BP9]]
; NOOPT-NEXT:  End of the Predicator report.
; NOOPT-NEXT:  Predicator report
; NOOPT-NEXT:  [[REGION2]]:
; NOOPT-NEXT:    [[BB11:BB[0-9]+]]:
; NOOPT-NEXT:      [[BP11:BP[0-9]+]] = [[BP5]]
; NOOPT-NEXT:      [[IFF2:IfF[0-9]+]] = [[BP11]] && !i1 [[VP_CMP2:%.*]]
; NOOPT-NEXT:      [[IFT2:IfT[0-9]+]] = [[BP11]] && i1 [[VP_CMP2]]
; NOOPT-NEXT:    [[BB12:BB[0-9]+]]:
; NOOPT-NEXT:      [[BP12:BP[0-9]+]] = [[IFF2]]
; NOOPT-NEXT:    [[BB13:BB[0-9]+]]:
; NOOPT-NEXT:      [[BP13:BP[0-9]+]] = [[IFT2]]
; NOOPT-NEXT:    [[BB14:BB[0-9]+]]:
; NOOPT-NEXT:      [[BP14:BP[0-9]+]] = [[BP12]] || [[BP13]]
; NOOPT-NEXT:  End of the Predicator report.
;
; OPT-LABEL:  Predicator report
; OPT-NEXT:  [[REGION0:region[0-9]+]]:
; OPT-NEXT:    [[BB0:BB[0-9]+]]:
; OPT-NEXT:      [[BP0:BP[0-9]+]] = [[IFT0:IfT[0-9]+]]
; OPT-NEXT:      [[IFF0:IfF[0-9]+]] = [[BP0]] && !i1 [[VP_CMP1:%.*]]
; OPT-NEXT:      [[IFT1:IfT[0-9]+]] = [[BP0]] && i1 [[VP_CMP1]]
; OPT-NEXT:    [[BB1:BB[0-9]+]]:
; OPT-NEXT:      [[BP1:BP[0-9]+]] = [[IFF0]]
; OPT-NEXT:    [[BB2:BB[0-9]+]]:
; OPT-NEXT:      [[BP2:BP[0-9]+]] = [[IFT1]]
; OPT-NEXT:    [[BB3:BB[0-9]+]]:
; OPT-NEXT:      [[BP3:BP[0-9]+]] = [[BP0]]
; OPT-NEXT:  End of the Predicator report.
; OPT-NEXT:  Predicator report
; OPT-NEXT:  [[REGION1:region[0-9]+]]:
; OPT-NEXT:    [[BB4:BB[0-9]+]]:
; OPT-NEXT:      [[BP4:BP[0-9]+]] = [[BP5:BP[0-9]+]]
; OPT-NEXT:      [[IFF1:IfF[0-9]+]] = [[BP4]] && !i1 [[VP_CMP2:%.*]]
; OPT-NEXT:      [[IFT2:IfT[0-9]+]] = [[BP4]] && i1 [[VP_CMP2]]
; OPT-NEXT:    [[BB5:BB[0-9]+]]:
; OPT-NEXT:      [[BP6:BP[0-9]+]] = [[IFF1]]
; OPT-NEXT:    [[BB6:BB[0-9]+]]:
; OPT-NEXT:      [[BP7:BP[0-9]+]] = [[IFT2]]
; OPT-NEXT:    [[BB7:BB[0-9]+]]:
; OPT-NEXT:      [[BP8:BP[0-9]+]] = [[BP4]]
; OPT-NEXT:  End of the Predicator report.
; OPT-NEXT:  Predicator report
; OPT-NEXT:  [[REGION2:region[0-9]+]]:
; OPT-NEXT:    [[BB8:BB[0-9]+]]:
; OPT-NEXT:      [[IFT0]] = i1 [[VP_CMP0:%.*]]
; OPT-NEXT:      [[IFF2:IfF[0-9]+]] = !i1 [[VP_CMP0]]
; OPT-NEXT:    [[REGION0]]:
; OPT-NEXT:      [[IFT0]] = i1 [[VP_CMP0]]
; OPT-NEXT:    [[BB9:BB[0-9]+]]:
; OPT-NEXT:      [[BP5]] = [[IFT0]]
; OPT-NEXT:    [[REGION1]]:
; OPT-NEXT:      [[BP5]] = [[IFT0]]
; OPT-NEXT:    [[BB10:BB[0-9]+]]:
; OPT-NEXT:  End of the Predicator report.
; OPT-NEXT:  Predicator report
; OPT-NEXT:  [[LOOP0:loop[0-9]+]]:
; OPT-NEXT:    [[BB11:BB[0-9]+]]:
; OPT-NEXT:    [[BB12:BB[0-9]+]]:
; OPT-NEXT:    [[REGION2]]:
; OPT-NEXT:    [[BB13:BB[0-9]+]]:
; OPT-NEXT:    [[BB14:BB[0-9]+]]:
; OPT-NEXT:  End of the Predicator report.
;
entry:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %for.body

for.body:                                         ; preds = %for.inc, %entry
  %iv = phi i64 [ 0, %entry ], [ %iv.next, %if.end0 ]
  %arrayidx = getelementptr inbounds i32, i32* %a, i64 %iv
  %0 = load i32, i32* %arrayidx, align 4
  %cmp0 = icmp sgt i64 %iv, 0
  br i1 %cmp0, label %if.then0, label %if.end0

if.then0:
  %cmp1 = icmp sgt i32 %0, 0
  br i1 %cmp1, label %if.then1, label %if.else1

if.then1:
  br label %if.end1

if.else1:
  br label %if.end1

if.end1:
  br label %bb.mid1

bb.mid1:
  br label %bb.mid2

bb.mid2:
  %cmp2 = icmp sgt i32 %0, 0
  br i1 %cmp2, label %if.then2, label %if.else2

if.then2:                                          ; preds = %if.end1
  br label %if.end2

if.else2:                                          ; preds = %if.end1
  br label %if.end2

if.end2:                                           ; preds = %if.else2, %if.then2
  br label %if.end0

if.end0:
  %iv.next = add nuw nsw i64 %iv, 1
  %exitcond = icmp eq i64 %iv.next, 300
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"()]
  ret void
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

attributes #0 = { noinline nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }



