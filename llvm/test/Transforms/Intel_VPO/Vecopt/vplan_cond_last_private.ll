; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt %s -S -vplan-vec | FileCheck %s

define void @foo() {
; CHECK-LABEL: @foo(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RET_LPRIV:%.*]] = alloca i8, align 1
; CHECK-NEXT:    br label [[TMP0:%.*]]
; CHECK:       0:
; CHECK-NEXT:    [[TMP1:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.LASTPRIVATE:CONDITIONAL"(i8* [[RET_LPRIV]]) ]
; CHECK-NEXT:    br label [[OMP_INNER_FOR_BODY:%.*]]
; CHECK:       omp.inner.for.body:
; CHECK-NEXT:    [[DOTOMP_IV_LOCAL_016:%.*]] = phi i32 [ 0, [[TMP0]] ], [ [[ADD9:%.*]], [[OMP_INNER_FOR_INC:%.*]] ]
; CHECK-NEXT:    br i1 undef, label [[IF_THEN:%.*]], label [[OMP_INNER_FOR_INC]]
; CHECK:       if.then:
; CHECK-NEXT:    [[TMP2:%.*]] = load i8, i8* undef, align 1
; CHECK-NEXT:    store i8 [[TMP2]], i8* [[RET_LPRIV]], align 1
; CHECK-NEXT:    br label [[OMP_INNER_FOR_INC]]
; CHECK:       omp.inner.for.inc:
; CHECK-NEXT:    [[ADD9]] = add nsw i32 [[DOTOMP_IV_LOCAL_016]], 1
; CHECK-NEXT:    [[CMP4:%.*]] = icmp sgt i32 undef, [[ADD9]]
; CHECK-NEXT:    br i1 [[CMP4]], label [[OMP_INNER_FOR_BODY]], label [[OMP_INNER_FOR_COND_OMP_INNER_FOR_END_CRIT_EDGE:%.*]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK:       omp.inner.for.cond.omp.inner.for.end_crit_edge:
; CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP1]]) [ "DIR.OMP.END.SIMD"() ]
; CHECK-NEXT:    ret void
;
entry:
  %ret.lpriv = alloca i8
  br label %0

0:
  %1 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.LASTPRIVATE:CONDITIONAL"(i8* %ret.lpriv) ]
  br label %omp.inner.for.body

omp.inner.for.body:
  %.omp.iv.local.016 = phi i32 [ 0, %0 ], [ %add9, %omp.inner.for.inc ]
  br i1 undef, label %if.then, label %omp.inner.for.inc

if.then:
  %2 = load i8, i8* undef
  store i8 %2, i8* %ret.lpriv
  br label %omp.inner.for.inc

omp.inner.for.inc:
  %add9 = add nsw i32 %.omp.iv.local.016, 1
  %cmp4 = icmp sgt i32 undef, %add9
  br i1 %cmp4, label %omp.inner.for.body, label %omp.inner.for.cond.omp.inner.for.end_crit_edge

omp.inner.for.cond.omp.inner.for.end_crit_edge:
  call void @llvm.directive.region.exit(token %1) [ "DIR.OMP.END.SIMD"() ]
  ret void
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
