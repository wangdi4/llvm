; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; Test to check that we don't crash when a reduction has two external uses.
;
; RUN: opt -disable-output -passes="vplan-vec" -vplan-print-after-vpentity-instrs -vplan-entities-dump -print-after=vplan-vec %s 2>&1 | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define float @expl_reduction_sub(float* nocapture %x2) {
; CHECK-LABEL:  VPlan after insertion of VPEntities instructions:
; CHECK-NEXT:  VPlan IR for: expl_reduction_sub:for.body.#{{[0-9]+}}
; CHECK-NEXT:  Loop Entities of the loop with header [[BB0:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:  Reduction list
; CHECK-NEXT:   (+) Start: float [[X_PROMOTED0:%.*]] Exit: float [[VP_ADD:%.*]]
; CHECK-NEXT:    Linked values: float [[VP_ADD7:%.*]], float [[VP_ADD]], float [[VP_XRED_INIT:%.*]], float [[VP_XRED_FINAL:%.*]],
; CHECK-EMPTY:
; CHECK-EMPTY:
; CHECK-NEXT:  Induction list
; CHECK-NEXT:   IntInduction(+) Start: i64 0 Step: i64 1 StartVal: i64 0 EndVal: i64 1000 BinOp: i64 [[VP_INDVARS_IV_NEXT:%.*]] = add i64 [[VP_INDVARS_IV:%.*]] i64 [[VP_INDVARS_IV_IND_INIT_STEP:%.*]]
; CHECK-NEXT:    Linked values: i64 [[VP_INDVARS_IV]], i64 [[VP_INDVARS_IV_NEXT]], i64 [[VP_INDVARS_IV_IND_INIT:%.*]], i64 [[VP_INDVARS_IV_IND_INIT_STEP]], i64 [[VP_INDVARS_IV_IND_FINAL:%.*]],
; CHECK:         [[BB1:BB[0-9]+]]: # preds:
; CHECK-NEXT:     br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]]
; CHECK-NEXT:     float [[VP_XRED_INIT]] = reduction-init float -0.000000e+00
; CHECK-NEXT:     i64 [[VP_INDVARS_IV_IND_INIT]] = induction-init{add} i64 0 i64 1
; CHECK-NEXT:     i64 [[VP_INDVARS_IV_IND_INIT_STEP]] = induction-init-step{add} i64 1
; CHECK-NEXT:     br [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB0]]: # preds: [[BB2]], [[BB0]]
; CHECK-NEXT:     i64 [[VP_INDVARS_IV]] = phi  [ i64 [[VP_INDVARS_IV_IND_INIT]], [[BB2]] ],  [ i64 [[VP_INDVARS_IV_NEXT]], [[BB0]] ]
; CHECK-NEXT:     float [[VP_ADD7]] = phi  [ float [[VP_XRED_INIT]], [[BB2]] ],  [ float [[VP_ADD]], [[BB0]] ]
; CHECK-NEXT:     float [[VP_ADD]] = fsub float [[VP_ADD7]] float 5.000000e-01
; CHECK-NEXT:     i64 [[VP_INDVARS_IV_NEXT]] = add i64 [[VP_INDVARS_IV]] i64 [[VP_INDVARS_IV_IND_INIT_STEP]]
; CHECK-NEXT:     i1 [[VP_EXITCOND:%.*]] = icmp eq i64 [[VP_INDVARS_IV_NEXT]] i64 1000
; CHECK-NEXT:     br i1 [[VP_EXITCOND]], [[BB3:BB[0-9]+]], [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: [[BB0]]
; CHECK-NEXT:     float [[VP_XRED_FINAL]] = reduction-final{fadd} float [[VP_ADD]] float [[X_PROMOTED0]]
; CHECK-NEXT:     i64 [[VP_INDVARS_IV_IND_FINAL]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:     br [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: [[BB3]]
; CHECK-NEXT:     br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0     [[ADD_LCSSA10:%.*]] = phi float [ [[ADD0:%.*]], [[FOR_BODY0:%.*]] ] float [[VP_XRED_FINAL]] -> float [[ADD0]]
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 1     [[ADD_LCSSA0:%.*]] = phi float [ [[ADD0]], [[FOR_BODY0]] ] float [[VP_XRED_FINAL]] -> float [[ADD0]]
;
; ==== Check CG
; CHECK:       final.merge:
; CHECK-NEXT:    [[UNI_PHI60:%.*]] = phi float [ [[TMP5:%.*]], [[VPLANNEDBB50:%.*]] ]
; CHECK-NEXT:    [[UNI_PHI70:%.*]] = phi float [ [[TMP5]], [[VPLANNEDBB50]] ]
; CHECK-NEXT:    [[UNI_PHI80:%.*]] = phi i64 [ 1000, [[VPLANNEDBB50]] ]
; CHECK:       for.end:
; CHECK-NEXT:    [[ADD_LCSSA0:%.*]] = phi float [ [[UNI_PHI70]], [[FINAL_MERGE0:%.*]] ]
; CHECK-NEXT:    [[ADD_LCSSA10:%.*]] = phi float [ [[UNI_PHI60]], [[FINAL_MERGE0]] ]
; CHECK:       DIR.QUAL.LIST.END.3:
; CHECK-NEXT:    store float [[ADD_LCSSA0]], float* [[X0:%.*]], align 4
; CHECK-NEXT:    store float [[ADD_LCSSA10]], float* [[X20:%.*]], align 4
;
entry:
  %x = alloca float, align 4
  store float 0.000000e+00, float* %x, align 4
  br label %entry.split

entry.split:                                      ; preds = %entry
%tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.SIMDLEN"(i32 8), "QUAL.OMP.REDUCTION.ADD:TYPED"(float* %x, float zeroinitializer, i32 1) ]
  br label %DIR.QUAL.LIST.END.2

DIR.QUAL.LIST.END.2:                              ; preds = %entry.split
  %x.promoted = load float, float* %x, align 4
  br label %for.body

for.body:                                         ; preds = %for.body, %DIR.QUAL.LIST.END.2
  %indvars.iv = phi i64 [ 0, %DIR.QUAL.LIST.END.2 ], [ %indvars.iv.next, %for.body ]
  %add7 = phi float [ %x.promoted, %DIR.QUAL.LIST.END.2 ], [ %add, %for.body ]
  %add = fsub float %add7, 5.000000e-01
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 1000
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  %add.lcssa = phi float [ %add, %for.body ]
  %add.lcssa1 = phi float [ %add, %for.body ]
  br label %for.end1

for.end1:                                         ; preds = %for.end
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.QUAL.LIST.END.3

DIR.QUAL.LIST.END.3:                              ; preds = %for.end
  store float %add.lcssa, float* %x, align 4
  store float %add.lcssa1, float* %x2, align 4
  ret float %add.lcssa
}

; Function Attrs: argmemonly nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: argmemonly nounwind
declare void @llvm.directive.region.exit(token) #1


