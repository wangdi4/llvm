; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -S < %s -VPlanDriver -vplan-force-vf=2 2>&1 | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

declare i32 @__intel_indirect_call_i32(i32(i32)*, ...) #2

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #3

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #3
; Function Attrs: nounwind uwtable
define dso_local void @_ZGVbN4_direct(i32* nocapture %a, i32* nocapture readonly %c, i32 (i32)** nocapture readonly %func, i32 %n) local_unnamed_addr #1 {
; CHECK:  define dso_local void @_ZGVbN4_direct(i32* nocapture [[A0:%.*]], i32* nocapture readonly [[C0:%.*]], i32 (i32)** nocapture readonly [[FUNC0:%.*]], i32 [[N0:%.*]]) local_unnamed_addr #2 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label [[PREHEADER0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  preheader:
; CHECK-NEXT:    [[N_MOD_VF0:%.*]] = urem i32 [[N0]], 2
; CHECK-NEXT:    [[N_VEC0:%.*]] = sub i32 [[N0]], [[N_MOD_VF0]]
; CHECK-NEXT:    [[CMP_ZERO0:%.*]] = icmp eq i32 [[N_VEC0]], 0
; CHECK-NEXT:    br i1 [[CMP_ZERO0]], label [[SCALAR_PH0:%.*]], label [[VECTOR_PH0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  vector.ph:
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT0:%.*]] = insertelement <2 x i32> undef, i32 [[N0]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT0:%.*]] = shufflevector <2 x i32> [[BROADCAST_SPLATINSERT0]], <2 x i32> undef, <2 x i32> zeroinitializer
; CHECK-NEXT:    br label [[VECTOR_BODY0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  vector.body:
; CHECK-NEXT:    [[UNI_PHI0:%.*]] = phi i32 [ 0, [[VECTOR_PH0]] ], [ [[TMP30:%.*]], [[PRED_LOAD_CONTINUE100:%.*]] ]
; CHECK-NEXT:    [[UNI_PHI10:%.*]] = phi i32 [ [[TMP29:%.*]], [[PRED_LOAD_CONTINUE100]] ], [ 0, [[VECTOR_PH0]] ]
; CHECK-NEXT:    [[VEC_PHI0:%.*]] = phi <2 x i32> [ [[TMP28:%.*]], [[PRED_LOAD_CONTINUE100]] ], [ <i32 0, i32 1>, [[VECTOR_PH0]] ]
; CHECK-NEXT:    [[TMP0:%.*]] = add nsw <2 x i32> [[VEC_PHI0]], <i32 2, i32 2>
; CHECK-NEXT:    [[TMP1:%.*]] = icmp eq <2 x i32> [[TMP0]], [[BROADCAST_SPLAT0]]
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast <2 x i1> [[TMP1]] to i2
; CHECK-NEXT:    [[TMP3:%.*]] = icmp ne i2 [[TMP2]], 0
; CHECK-NEXT:    br i1 [[TMP3]], label [[PRED_LOAD_IF0:%.*]], label [[TMP5:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.load.if:
; CHECK-NEXT:    [[TMP4:%.*]] = load i32 (i32)*, i32 (i32)** [[FUNC0]], align 8
; CHECK-NEXT:    br label [[TMP5]]
; CHECK-EMPTY:
; CHECK-NEXT:  5:
; CHECK-NEXT:    [[TMP6:%.*]] = phi i32 (i32)* [ undef, [[VECTOR_BODY0]] ], [ [[TMP4]], [[PRED_LOAD_IF0]] ]
; CHECK-NEXT:    br label [[PRED_LOAD_CONTINUE0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.load.continue:
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast <2 x i1> [[TMP1]] to i2
; CHECK-NEXT:    [[TMP8:%.*]] = icmp ne i2 [[TMP7]], 0
; CHECK-NEXT:    br i1 [[TMP8]], label [[PRED_LOAD_IF50:%.*]], label [[TMP10:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.load.if5:
; CHECK-NEXT:    [[TMP9:%.*]] = load i32, i32* [[C0]], align 4
; CHECK-NEXT:    br label [[TMP10]]
; CHECK-EMPTY:
; CHECK-NEXT:  10:
; CHECK-NEXT:    [[TMP11:%.*]] = phi i32 [ undef, [[PRED_LOAD_CONTINUE0]] ], [ [[TMP9]], [[PRED_LOAD_IF50]] ]
; CHECK-NEXT:    br label [[PRED_LOAD_CONTINUE60:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.load.continue6:
; CHECK-NEXT:    [[PREDICATE0:%.*]] = extractelement <2 x i1> [[TMP1]], i64 0
; CHECK-NEXT:    [[TMP12:%.*]] = icmp eq i1 [[PREDICATE0]], true
; CHECK-NEXT:    br i1 [[TMP12]], label [[PRED_CALL_IF0:%.*]], label [[TMP15:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.if:
; CHECK-NEXT:    [[TMP13:%.*]] = call i32 (i32 (i32)*, ...) @__intel_indirect_call_i32(i32 (i32)* [[TMP6]], i32 [[TMP11]])
; CHECK-NEXT:    [[TMP14:%.*]] = insertelement <2 x i32> undef, i32 [[TMP13]], i32 0
; CHECK-NEXT:    br label [[TMP15]]
; CHECK-EMPTY:
; CHECK-NEXT:  15:
; CHECK-NEXT:    [[TMP16:%.*]] = phi <2 x i32> [ undef, [[PRED_LOAD_CONTINUE60]] ], [ [[TMP14]], [[PRED_CALL_IF0]] ]
; CHECK-NEXT:    br label [[PRED_CALL_CONTINUE0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.continue:
; CHECK-NEXT:    [[PREDICATE20:%.*]] = extractelement <2 x i1> [[TMP1]], i64 1
; CHECK-NEXT:    [[TMP17:%.*]] = icmp eq i1 [[PREDICATE20]], true
; CHECK-NEXT:    br i1 [[TMP17]], label [[PRED_CALL_IF70:%.*]], label [[TMP20:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.if7:
; CHECK-NEXT:    [[TMP18:%.*]] = call i32 (i32 (i32)*, ...) @__intel_indirect_call_i32(i32 (i32)* [[TMP6]], i32 [[TMP11]])
; CHECK-NEXT:    [[TMP19:%.*]] = insertelement <2 x i32> [[TMP16]], i32 [[TMP18]], i32 1
; CHECK-NEXT:    br label [[TMP20]]
; CHECK-EMPTY:
; CHECK-NEXT:  20:
; CHECK-NEXT:    [[TMP21:%.*]] = phi <2 x i32> [ [[TMP16]], [[PRED_CALL_CONTINUE0]] ], [ [[TMP19]], [[PRED_CALL_IF70]] ]
; CHECK-NEXT:    br label [[PRED_CALL_CONTINUE80:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.continue8:
; CHECK-NEXT:    [[TMP22:%.*]] = bitcast <2 x i1> [[TMP1]] to i2
; CHECK-NEXT:    [[TMP23:%.*]] = icmp ne i2 [[TMP22]], 0
; CHECK-NEXT:    br i1 [[TMP23]], label [[PRED_LOAD_IF90:%.*]], label [[TMP25:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.load.if9:
; CHECK-NEXT:    [[TMP24:%.*]] = load i32, i32* [[A0]], align 4
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT30:%.*]] = insertelement <2 x i32> undef, i32 [[TMP24]], i32 0
; CHECK-NEXT:    br label [[TMP25]]
; CHECK-EMPTY:
; CHECK-NEXT:  25:
; CHECK-NEXT:    [[TMP26:%.*]] = phi <2 x i32> [ undef, [[PRED_CALL_CONTINUE80]] ], [ [[BROADCAST_SPLATINSERT30]], [[PRED_LOAD_IF90]] ]
; CHECK-NEXT:    br label [[PRED_LOAD_CONTINUE100]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.load.continue10:
; CHECK-NEXT:    [[BROADCAST_SPLAT40:%.*]] = shufflevector <2 x i32> [[TMP26]], <2 x i32> undef, <2 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP27:%.*]] = add nsw <2 x i32> [[BROADCAST_SPLAT40]], [[TMP21]]
; CHECK-NEXT:    [[TMP28]] = add nsw <2 x i32> [[VEC_PHI0]], <i32 2, i32 2>
; CHECK-NEXT:    [[TMP29]] = add nsw i32 [[UNI_PHI10]], 2
; CHECK-NEXT:    [[TMP30]] = add i32 [[UNI_PHI0]], 2
; CHECK-NEXT:    [[TMP31:%.*]] = icmp eq i32 [[TMP30]], [[N_VEC0]]
; CHECK-NEXT:    br i1 [[TMP31]], label [[VPLANNEDBB0:%.*]], label [[VECTOR_BODY0]], !llvm.loop !0
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB:
; CHECK-NEXT:    [[TMP32:%.*]] = mul i32 1, [[N_VEC0]]
; CHECK-NEXT:    [[TMP33:%.*]] = add i32 0, [[TMP32]]
; CHECK-NEXT:    br label [[MIDDLE_BLOCK0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  middle.block:
; CHECK-NEXT:    [[CMP_N0:%.*]] = icmp eq i32 [[N0]], [[N_VEC0]]
; CHECK-NEXT:    br i1 [[CMP_N0]], label [[LOOP_EXIT0:%.*]], label [[SCALAR_PH0]]
; CHECK-EMPTY:
; CHECK-NEXT:  scalar.ph:
; CHECK-NEXT:    [[BC_RESUME_VAL0:%.*]] = phi i32 [ 0, [[PREHEADER0]] ], [ [[TMP33]], [[MIDDLE_BLOCK0]] ]
; CHECK-NEXT:    br label [[FOR_BODY0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  for.body:
; CHECK-NEXT:    [[IV_PHI0:%.*]] = phi i32 [ [[IV0:%.*]], [[IF_END0:%.*]] ], [ [[BC_RESUME_VAL0]], [[SCALAR_PH0]] ]
; CHECK-NEXT:    [[CHECK0:%.*]] = add nsw i32 [[IV_PHI0]], 2
; CHECK-NEXT:    [[COND0:%.*]] = icmp eq i32 [[CHECK0]], [[N0]]
; CHECK-NEXT:    br i1 [[COND0]], label [[IF_THEN0:%.*]], label [[IF_END0]]
; CHECK-EMPTY:
; CHECK-NEXT:  if.then:
; CHECK-NEXT:    [[LD_FUNC0:%.*]] = load i32 (i32)*, i32 (i32)** [[FUNC0]], align 8
; CHECK-NEXT:    [[LD_C0:%.*]] = load i32, i32* [[C0]], align 4
; CHECK-NEXT:    [[CALL0:%.*]] = call i32 (i32 (i32)*, ...) @__intel_indirect_call_i32(i32 (i32)* [[LD_FUNC0]], i32 [[LD_C0]]) #0
; CHECK-NEXT:    [[LD_A0:%.*]] = load i32, i32* [[A0]], align 4
; CHECK-NEXT:    [[ADD0:%.*]] = add nsw i32 [[LD_A0]], [[CALL0]]
; CHECK-NEXT:    br label [[IF_END0]]
; CHECK-EMPTY:
; CHECK-NEXT:  if.end:
; CHECK-NEXT:    [[IV0]] = add nsw i32 [[IV_PHI0]], 1
; CHECK-NEXT:    [[EXITCOND0:%.*]] = icmp eq i32 [[IV0]], [[N0]]
; CHECK-NEXT:    br i1 [[EXITCOND0]], label [[LOOP_EXIT0]], label [[FOR_BODY0]], !llvm.loop !2
; CHECK-EMPTY:
; CHECK-NEXT:  loop.exit:
; CHECK-NEXT:    br label [[END0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  end:
; CHECK-NEXT:    ret void
; CHECK-NEXT:  }
;
entry:
  br label %preheader

preheader:
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %for.body

for.body:
  %iv.phi = phi i32 [ %iv, %if.end ], [ 0, %preheader ]
  %check = add nsw i32 %iv.phi, 2
  %cond = icmp eq i32 %check, %n
  br i1 %cond, label %if.then, label %if.end

if.then:
  %ld.func = load i32 (i32)*, i32 (i32)** %func, align 8
  %ld.c = load i32, i32* %c, align 4
  %call = call i32 (i32(i32)*, ...) @__intel_indirect_call_i32(i32 (i32)* %ld.func, i32 %ld.c) #2
  %ld.a = load i32, i32* %a, align 4
  %add = add nsw i32 %ld.a, %call
  br label %if.end

if.end:
  %iv = add nsw i32 %iv.phi, 1
  %exitcond = icmp eq i32 %iv, %n
  br i1 %exitcond, label %loop.exit, label %for.body

loop.exit:
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %end

end:
  ret void
}

attributes #1 = { "vector-variants"="_ZGVbM4vvvv_direct,_ZGVbN4vvvv_direct" }
attributes #2 = { "vector-variants"="_ZGVbM4v___intel_indirect_call_i32,_ZGVbN4v___intel_indirect_call_i32" }
attributes #3 = { nounwind }


