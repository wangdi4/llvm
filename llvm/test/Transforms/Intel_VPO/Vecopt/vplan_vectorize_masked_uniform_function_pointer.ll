; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -S < %s -vplan-vec -vplan-force-vf=4 2>&1 | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

declare i32 @__intel_indirect_call_i32(i32(i32)*, ...) #2

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #3

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #3
; Function Attrs: nounwind uwtable
define dso_local void @_ZGVbN4_direct(i32* nocapture %a, i32* nocapture readonly %c, i32 (i32)** nocapture readonly %func, i32 %n) local_unnamed_addr #1 {
; CHECK:  define dso_local void @_ZGVbN4_direct(i32* nocapture [[A0:%.*]], i32* nocapture readonly [[C0:%.*]], i32 (i32)** nocapture readonly [[FUNC0:%.*]], i32 [[N0:%.*]]) local_unnamed_addr #2 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label [[PREHEADER0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  preheader:
; CHECK-NEXT:    br label [[VPLANNEDBB0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB:
; CHECK-NEXT:    br label [[VPLANNEDBB10:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB1:
; CHECK-NEXT:    [[TMP0:%.*]] = and i32 [[N0]], -4
; CHECK-NEXT:    [[TMP1:%.*]] = icmp eq i32 0, [[TMP0]]
; CHECK-NEXT:    br i1 [[TMP1]], label [[SCALAR_PH0:%.*]], label [[VECTOR_PH0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  vector.ph:
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT0:%.*]] = insertelement <4 x i32> poison, i32 [[N0]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT0:%.*]] = shufflevector <4 x i32> [[BROADCAST_SPLATINSERT0]], <4 x i32> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    br label [[VECTOR_BODY0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  vector.body:
; CHECK-NEXT:    [[UNI_PHI0:%.*]] = phi i32 [ [[TMP25:%.*]], [[VPLANNEDBB80:%.*]] ], [ 0, [[VECTOR_PH0]] ]
; CHECK-NEXT:    [[VEC_PHI0:%.*]] = phi <4 x i32> [ [[TMP24:%.*]], [[VPLANNEDBB80]] ], [ <i32 0, i32 1, i32 2, i32 3>, [[VECTOR_PH0]] ]
; CHECK-NEXT:    [[TMP2:%.*]] = add nsw <4 x i32> [[VEC_PHI0]], <i32 2, i32 2, i32 2, i32 2>
; CHECK-NEXT:    [[TMP3:%.*]] = icmp eq <4 x i32> [[TMP2]], [[BROADCAST_SPLAT0]]
; CHECK-NEXT:    br label [[VPLANNEDBB30:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB3:
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast <4 x i1> [[TMP3]] to i4
; CHECK-NEXT:    [[TMP5:%.*]] = icmp ne i4 [[TMP4]], 0
; CHECK-NEXT:    br i1 [[TMP5]], label [[PRED_LOAD_IF0:%.*]], label [[TMP7:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.load.if:
; CHECK-NEXT:    [[TMP6:%.*]] = load i32 (i32)*, i32 (i32)** [[FUNC0]], align 8
; CHECK-NEXT:    br label [[TMP7]]
; CHECK-EMPTY:
; CHECK-NEXT:  7:
; CHECK-NEXT:    [[TMP8:%.*]] = phi i32 (i32)* [ undef, [[VPLANNEDBB30]] ], [ [[TMP6]], [[PRED_LOAD_IF0]] ]
; CHECK-NEXT:    br label [[PRED_LOAD_CONTINUE0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.load.continue:
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast <4 x i1> [[TMP3]] to i4
; CHECK-NEXT:    [[TMP10:%.*]] = icmp ne i4 [[TMP9]], 0
; CHECK-NEXT:    br i1 [[TMP10]], label [[PRED_LOAD_IF150:%.*]], label [[TMP12:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.load.if15:
; CHECK-NEXT:    [[TMP11:%.*]] = load i32, i32* [[C0]], align 4
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT40:%.*]] = insertelement <4 x i32> poison, i32 [[TMP11]], i32 0
; CHECK-NEXT:    br label [[TMP12]]
; CHECK-EMPTY:
; CHECK-NEXT:  12:
; CHECK-NEXT:    [[TMP13:%.*]] = phi <4 x i32> [ poison, [[PRED_LOAD_CONTINUE0]] ], [ [[BROADCAST_SPLATINSERT40]], [[PRED_LOAD_IF150]] ]
; CHECK-NEXT:    br label [[PRED_LOAD_CONTINUE160:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.load.continue16:
; CHECK-NEXT:    [[BROADCAST_SPLAT50:%.*]] = shufflevector <4 x i32> [[TMP13]], <4 x i32> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    [[MASKEXT0:%.*]] = sext <4 x i1> [[TMP3]] to <4 x i32>
; CHECK-NEXT:    [[TMP14:%.*]] = bitcast i32 (i32)* [[TMP8]] to <4 x i32> (<4 x i32>, <4 x i32>)**
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr <4 x i32> (<4 x i32>, <4 x i32>)*, <4 x i32> (<4 x i32>, <4 x i32>)** [[TMP14]], i32 0
; CHECK-NEXT:    [[TMP16:%.*]] = load <4 x i32> (<4 x i32>, <4 x i32>)*, <4 x i32> (<4 x i32>, <4 x i32>)** [[TMP15]], align 8
; CHECK-NEXT:    [[TMP17:%.*]] = call <4 x i32> [[TMP16]](<4 x i32> [[BROADCAST_SPLAT50]], <4 x i32> [[MASKEXT0]])
; CHECK-NEXT:    [[TMP18:%.*]] = bitcast <4 x i1> [[TMP3]] to i4
; CHECK-NEXT:    [[TMP19:%.*]] = icmp ne i4 [[TMP18]], 0
; CHECK-NEXT:    br i1 [[TMP19]], label [[PRED_LOAD_IF170:%.*]], label [[TMP21:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.load.if17:
; CHECK-NEXT:    [[TMP20:%.*]] = load i32, i32* [[A0]], align 4
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT60:%.*]] = insertelement <4 x i32> poison, i32 [[TMP20]], i32 0
; CHECK-NEXT:    br label [[TMP21]]
; CHECK-EMPTY:
; CHECK-NEXT:  21:
; CHECK-NEXT:    [[TMP22:%.*]] = phi <4 x i32> [ poison, [[PRED_LOAD_CONTINUE160]] ], [ [[BROADCAST_SPLATINSERT60]], [[PRED_LOAD_IF170]] ]
; CHECK-NEXT:    br label [[PRED_LOAD_CONTINUE180:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.load.continue18:
; CHECK-NEXT:    [[BROADCAST_SPLAT70:%.*]] = shufflevector <4 x i32> [[TMP22]], <4 x i32> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP23:%.*]] = add nsw <4 x i32> [[BROADCAST_SPLAT70]], [[TMP17]]
; CHECK-NEXT:    br label [[VPLANNEDBB80]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB8:
; CHECK-NEXT:    [[TMP24]] = add nsw <4 x i32> [[VEC_PHI0]], <i32 4, i32 4, i32 4, i32 4>
; CHECK-NEXT:    [[TMP25]] = add nsw i32 [[UNI_PHI0]], 4
; CHECK-NEXT:    [[TMP26:%.*]] = icmp uge i32 [[TMP25]], [[TMP0]]
; CHECK-NEXT:    br i1 [[TMP26]], label [[VPLANNEDBB90:%.*]], label [[VECTOR_BODY0]], !llvm.loop !0
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB9:
; CHECK-NEXT:    [[TMP27:%.*]] = mul i32 1, [[TMP0]]
; CHECK-NEXT:    [[TMP28:%.*]] = add i32 0, [[TMP27]]
; CHECK-NEXT:    br label [[MIDDLE_BLOCK0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  middle.block:
; CHECK-NEXT:    [[TMP29:%.*]] = icmp ne i32 [[N0]], [[TMP0]]
; CHECK-NEXT:    br i1 [[TMP29]], label [[SCALAR_PH0]], label [[VPLANNEDBB100:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  scalar.ph:
; CHECK-NEXT:    [[UNI_PHI110:%.*]] = phi i32 [ [[TMP28]], [[MIDDLE_BLOCK0]] ], [ 0, [[VPLANNEDBB10]] ]
; CHECK-NEXT:    br label [[VPLANNEDBB120:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB12:
; CHECK-NEXT:    br label [[FOR_BODY0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB10:
; CHECK-NEXT:    [[UNI_PHI130:%.*]] = phi i32 [ [[IV0:%.*]], [[IF_END0:%.*]] ], [ [[TMP28]], [[MIDDLE_BLOCK0]] ]
; CHECK-NEXT:    br label [[VPLANNEDBB140:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB14:
; CHECK-NEXT:    br label [[LOOP_EXIT0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  for.body:
; CHECK-NEXT:    [[IV_PHI0:%.*]] = phi i32 [ [[IV0]], [[IF_END0]] ], [ [[UNI_PHI110]], [[VPLANNEDBB120]] ]
; CHECK-NEXT:    [[CHECK0:%.*]] = add nsw i32 [[IV_PHI0]], 2
; CHECK-NEXT:    [[COND0:%.*]] = icmp eq i32 [[CHECK0]], [[N0]]
; CHECK-NEXT:    br i1 [[COND0]], label [[IF_THEN0:%.*]], label [[IF_END0]]
; CHECK-EMPTY:
; CHECK-NEXT:  if.then:
; CHECK-NEXT:    [[LD_FUNC0:%.*]] = load i32 (i32)*, i32 (i32)** [[FUNC0]], align 8
; CHECK-NEXT:    [[LD_C0:%.*]] = load i32, i32* [[C0]], align 4
; CHECK-NEXT:    [[CALL0:%.*]] = call i32 (i32 (i32)*, ...) @__intel_indirect_call_i32(i32 (i32)* [[LD_FUNC0]], i32 [[LD_C0]]) #0
; CHECK-NEXT:    [[LD_A0:%.*]] = load i32, i32* [[A0]], align 4
; CHECK-NEXT:    [[ADD0:%.*]] = add nsw i32 [[LD_A0]], [[CALL0]]
; CHECK-NEXT:    br label [[IF_END0]]
; CHECK-EMPTY:
; CHECK-NEXT:  if.end:
; CHECK-NEXT:    [[IV0]] = add nsw i32 [[IV_PHI0]], 1
; CHECK-NEXT:    [[EXITCOND0:%.*]] = icmp eq i32 [[IV0]], [[N0]]
; CHECK-NEXT:    br i1 [[EXITCOND0]], label [[VPLANNEDBB100]], label [[FOR_BODY0]], !llvm.loop !2
; CHECK-EMPTY:
; CHECK-NEXT:  loop.exit:
; CHECK-NEXT:    br label [[END0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  end:
; CHECK-NEXT:    ret void
; CHECK-NEXT:  }
;
entry:
  br label %preheader

preheader:
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %for.body

for.body:
  %iv.phi = phi i32 [ %iv, %if.end ], [ 0, %preheader ]
  %check = add nsw i32 %iv.phi, 2
  %cond = icmp eq i32 %check, %n
  br i1 %cond, label %if.then, label %if.end

if.then:
  %ld.func = load i32 (i32)*, i32 (i32)** %func, align 8
  %ld.c = load i32, i32* %c, align 4
  %call = call i32 (i32(i32)*, ...) @__intel_indirect_call_i32(i32 (i32)* %ld.func, i32 %ld.c) #2
  %ld.a = load i32, i32* %a, align 4
  %add = add nsw i32 %ld.a, %call
  br label %if.end

if.end:
  %iv = add nsw i32 %iv.phi, 1
  %exitcond = icmp eq i32 %iv, %n
  br i1 %exitcond, label %loop.exit, label %for.body

loop.exit:
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %end

end:
  ret void
}

attributes #1 = { "vector-variants"="_ZGVbM4vvvv_direct,_ZGVbN4vvvv_direct" }
attributes #2 = { "vector-variants"="_ZGVbM4v___intel_indirect_call_i32,_ZGVbN4v___intel_indirect_call_i32" }
attributes #3 = { nounwind }


