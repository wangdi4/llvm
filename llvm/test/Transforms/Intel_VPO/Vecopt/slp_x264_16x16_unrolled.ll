; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -slp-vectorizer -enable-intel-advanced-opts -mtriple=x86_64-unknown-linux-gnu -mcpu=skylake-avx512 -mattr=-prefer-256-bit -S -slp-enable-gather-load=false | FileCheck %s
; This test checks that we don't crash because of not unique values and still vectorize part of the tree.
; Full support for this case requires "head duplication".

define internal i32 @x264_pixel_satd_16x16(i8* nocapture readonly %pix1, i32 %i_pix1, i8* nocapture readonly %pix2, i32 %i_pix2) {
; CHECK-LABEL: @x264_pixel_satd_16x16(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[ALLOCA:%.*]] = alloca [16 x [8 x i32]], align 4
; CHECK-NEXT:    [[ALLOCA933:%.*]] = alloca [8 x i32], align 16
; CHECK-NEXT:    [[ALLOCA934:%.*]] = alloca [8 x i32], align 16
; CHECK-NEXT:    [[ALLOCA935:%.*]] = alloca [8 x i32], align 16
; CHECK-NEXT:    [[ALLOCA936:%.*]] = alloca [8 x i32], align 16
; CHECK-NEXT:    br label [[LOOP_1452:%.*]]
; CHECK:       loop.1452:
; CHECK-NEXT:    [[I1_I64_0:%.*]] = phi i64 [ 0, [[ENTRY:%.*]] ], [ [[NEXTIVLOOP_1452:%.*]], [[LOOP_1452]] ]
; CHECK-NEXT:    [[I:%.*]] = sext i32 [[I_PIX1:%.*]] to i64
; CHECK-NEXT:    [[I1:%.*]] = shl nuw i64 [[I1_I64_0]], 1
; CHECK-NEXT:    [[I2:%.*]] = mul i64 [[I1]], [[I]]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, i8* [[PIX1:%.*]], i64 [[I2]]
; CHECK-NEXT:    [[GEPLOAD:%.*]] = load i8, i8* [[ARRAYIDX]], align 1
; CHECK-NEXT:    [[I3:%.*]] = sext i32 [[I_PIX2:%.*]] to i64
; CHECK-NEXT:    [[I4:%.*]] = mul i64 [[I1]], [[I3]]
; CHECK-NEXT:    [[ARRAYIDX1020:%.*]] = getelementptr inbounds i8, i8* [[PIX2:%.*]], i64 [[I4]]
; CHECK-NEXT:    [[GEPLOAD1021:%.*]] = load i8, i8* [[ARRAYIDX1020]], align 1
; CHECK-NEXT:    [[I5:%.*]] = add i64 [[I2]], 4
; CHECK-NEXT:    [[ARRAYIDX1022:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I5]]
; CHECK-NEXT:    [[GEPLOAD1023:%.*]] = load i8, i8* [[ARRAYIDX1022]], align 1
; CHECK-NEXT:    [[I6:%.*]] = add i64 [[I4]], 4
; CHECK-NEXT:    [[ARRAYIDX1024:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I6]]
; CHECK-NEXT:    [[GEPLOAD1025:%.*]] = load i8, i8* [[ARRAYIDX1024]], align 1
; CHECK-NEXT:    [[I7:%.*]] = or i64 [[I2]], 1
; CHECK-NEXT:    [[ARRAYIDX1026:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I7]]
; CHECK-NEXT:    [[GEPLOAD1027:%.*]] = load i8, i8* [[ARRAYIDX1026]], align 1
; CHECK-NEXT:    [[I8:%.*]] = or i64 [[I4]], 1
; CHECK-NEXT:    [[ARRAYIDX1028:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I8]]
; CHECK-NEXT:    [[GEPLOAD1029:%.*]] = load i8, i8* [[ARRAYIDX1028]], align 1
; CHECK-NEXT:    [[I9:%.*]] = add i64 [[I2]], 5
; CHECK-NEXT:    [[ARRAYIDX1030:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I9]]
; CHECK-NEXT:    [[GEPLOAD1031:%.*]] = load i8, i8* [[ARRAYIDX1030]], align 1
; CHECK-NEXT:    [[I10:%.*]] = add i64 [[I4]], 5
; CHECK-NEXT:    [[ARRAYIDX1032:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I10]]
; CHECK-NEXT:    [[GEPLOAD1033:%.*]] = load i8, i8* [[ARRAYIDX1032]], align 1
; CHECK-NEXT:    [[I11:%.*]] = add i64 [[I2]], 2
; CHECK-NEXT:    [[ARRAYIDX1034:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I11]]
; CHECK-NEXT:    [[GEPLOAD1035:%.*]] = load i8, i8* [[ARRAYIDX1034]], align 1
; CHECK-NEXT:    [[I12:%.*]] = add i64 [[I4]], 2
; CHECK-NEXT:    [[ARRAYIDX1036:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I12]]
; CHECK-NEXT:    [[GEPLOAD1037:%.*]] = load i8, i8* [[ARRAYIDX1036]], align 1
; CHECK-NEXT:    [[I13:%.*]] = add i64 [[I2]], 6
; CHECK-NEXT:    [[ARRAYIDX1038:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I13]]
; CHECK-NEXT:    [[GEPLOAD1039:%.*]] = load i8, i8* [[ARRAYIDX1038]], align 1
; CHECK-NEXT:    [[I14:%.*]] = add i64 [[I4]], 6
; CHECK-NEXT:    [[ARRAYIDX1040:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I14]]
; CHECK-NEXT:    [[GEPLOAD1041:%.*]] = load i8, i8* [[ARRAYIDX1040]], align 1
; CHECK-NEXT:    [[I15:%.*]] = add i64 [[I2]], 3
; CHECK-NEXT:    [[ARRAYIDX1042:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I15]]
; CHECK-NEXT:    [[GEPLOAD1043:%.*]] = load i8, i8* [[ARRAYIDX1042]], align 1
; CHECK-NEXT:    [[I16:%.*]] = add i64 [[I4]], 3
; CHECK-NEXT:    [[ARRAYIDX1044:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I16]]
; CHECK-NEXT:    [[GEPLOAD1045:%.*]] = load i8, i8* [[ARRAYIDX1044]], align 1
; CHECK-NEXT:    [[I17:%.*]] = add i64 [[I2]], 7
; CHECK-NEXT:    [[ARRAYIDX1046:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I17]]
; CHECK-NEXT:    [[GEPLOAD1047:%.*]] = load i8, i8* [[ARRAYIDX1046]], align 1
; CHECK-NEXT:    [[I18:%.*]] = add i64 [[I4]], 7
; CHECK-NEXT:    [[ARRAYIDX1048:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I18]]
; CHECK-NEXT:    [[GEPLOAD1049:%.*]] = load i8, i8* [[ARRAYIDX1048]], align 1
; CHECK-NEXT:    [[ARRAYIDX1050:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I1]], i64 0
; CHECK-NEXT:    [[I20:%.*]] = zext i8 [[GEPLOAD1035]] to i32
; CHECK-NEXT:    [[I24:%.*]] = zext i8 [[GEPLOAD1039]] to i32
; CHECK-NEXT:    [[I28:%.*]] = zext i8 [[GEPLOAD1041]] to i32
; CHECK-NEXT:    [[I32:%.*]] = zext i8 [[GEPLOAD1037]] to i32
; CHECK-NEXT:    [[I39:%.*]] = shl nsw i32 [[I24]], 16
; CHECK-NEXT:    [[I40:%.*]] = shl nsw i32 [[I28]], 16
; CHECK-NEXT:    [[CHAIN_T856_3316:%.*]] = sub nsw i32 [[I39]], [[I40]]
; CHECK-NEXT:    [[CHAIN_T856_3318:%.*]] = sub nsw i32 [[CHAIN_T856_3316]], [[I32]]
; CHECK-NEXT:    [[CHAIN_T856_3319:%.*]] = add nsw i32 [[CHAIN_T856_3318]], [[I20]]
; CHECK-NEXT:    [[I43:%.*]] = add i64 [[I2]], 8
; CHECK-NEXT:    [[ARRAYIDX1105:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I43]]
; CHECK-NEXT:    [[GEPLOAD1106:%.*]] = load i8, i8* [[ARRAYIDX1105]], align 1
; CHECK-NEXT:    [[I44:%.*]] = add i64 [[I4]], 8
; CHECK-NEXT:    [[ARRAYIDX1107:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I44]]
; CHECK-NEXT:    [[GEPLOAD1108:%.*]] = load i8, i8* [[ARRAYIDX1107]], align 1
; CHECK-NEXT:    [[I45:%.*]] = add i64 [[I2]], 12
; CHECK-NEXT:    [[ARRAYIDX1109:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I45]]
; CHECK-NEXT:    [[GEPLOAD1110:%.*]] = load i8, i8* [[ARRAYIDX1109]], align 1
; CHECK-NEXT:    [[I46:%.*]] = add i64 [[I4]], 12
; CHECK-NEXT:    [[ARRAYIDX1111:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I46]]
; CHECK-NEXT:    [[GEPLOAD1112:%.*]] = load i8, i8* [[ARRAYIDX1111]], align 1
; CHECK-NEXT:    [[I55:%.*]] = add i64 [[I2]], 11
; CHECK-NEXT:    [[ARRAYIDX1129:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I55]]
; CHECK-NEXT:    [[GEPLOAD1130:%.*]] = load i8, i8* [[ARRAYIDX1129]], align 1
; CHECK-NEXT:    [[I56:%.*]] = add i64 [[I4]], 11
; CHECK-NEXT:    [[ARRAYIDX1131:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I56]]
; CHECK-NEXT:    [[GEPLOAD1132:%.*]] = load i8, i8* [[ARRAYIDX1131]], align 1
; CHECK-NEXT:    [[I57:%.*]] = add i64 [[I2]], 15
; CHECK-NEXT:    [[ARRAYIDX1133:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I57]]
; CHECK-NEXT:    [[GEPLOAD1134:%.*]] = load i8, i8* [[ARRAYIDX1133]], align 1
; CHECK-NEXT:    [[I58:%.*]] = add i64 [[I4]], 15
; CHECK-NEXT:    [[ARRAYIDX1135:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I58]]
; CHECK-NEXT:    [[GEPLOAD1136:%.*]] = load i8, i8* [[ARRAYIDX1135]], align 1
; CHECK-NEXT:    [[TMP0:%.*]] = insertelement <4 x i8> undef, i8 [[GEPLOAD]], i32 0
; CHECK-NEXT:    [[TMP1:%.*]] = insertelement <4 x i8> [[TMP0]], i8 [[GEPLOAD1043]], i32 1
; CHECK-NEXT:    [[TMP2:%.*]] = insertelement <4 x i8> [[TMP1]], i8 [[GEPLOAD1106]], i32 2
; CHECK-NEXT:    [[TMP3:%.*]] = insertelement <4 x i8> [[TMP2]], i8 [[GEPLOAD1130]], i32 3
; CHECK-NEXT:    [[TMP4:%.*]] = zext <4 x i8> [[TMP3]] to <4 x i32>
; CHECK-NEXT:    [[TMP5:%.*]] = insertelement <4 x i8> undef, i8 [[GEPLOAD1023]], i32 0
; CHECK-NEXT:    [[TMP6:%.*]] = insertelement <4 x i8> [[TMP5]], i8 [[GEPLOAD1047]], i32 1
; CHECK-NEXT:    [[TMP7:%.*]] = insertelement <4 x i8> [[TMP6]], i8 [[GEPLOAD1110]], i32 2
; CHECK-NEXT:    [[TMP8:%.*]] = insertelement <4 x i8> [[TMP7]], i8 [[GEPLOAD1134]], i32 3
; CHECK-NEXT:    [[TMP9:%.*]] = zext <4 x i8> [[TMP8]] to <4 x i32>
; CHECK-NEXT:    [[TMP10:%.*]] = insertelement <4 x i8> undef, i8 [[GEPLOAD1025]], i32 0
; CHECK-NEXT:    [[TMP11:%.*]] = insertelement <4 x i8> [[TMP10]], i8 [[GEPLOAD1049]], i32 1
; CHECK-NEXT:    [[TMP12:%.*]] = insertelement <4 x i8> [[TMP11]], i8 [[GEPLOAD1112]], i32 2
; CHECK-NEXT:    [[TMP13:%.*]] = insertelement <4 x i8> [[TMP12]], i8 [[GEPLOAD1136]], i32 3
; CHECK-NEXT:    [[TMP14:%.*]] = zext <4 x i8> [[TMP13]] to <4 x i32>
; CHECK-NEXT:    [[TMP15:%.*]] = insertelement <4 x i8> undef, i8 [[GEPLOAD1021]], i32 0
; CHECK-NEXT:    [[TMP16:%.*]] = insertelement <4 x i8> [[TMP15]], i8 [[GEPLOAD1045]], i32 1
; CHECK-NEXT:    [[TMP17:%.*]] = insertelement <4 x i8> [[TMP16]], i8 [[GEPLOAD1108]], i32 2
; CHECK-NEXT:    [[TMP18:%.*]] = insertelement <4 x i8> [[TMP17]], i8 [[GEPLOAD1132]], i32 3
; CHECK-NEXT:    [[TMP19:%.*]] = zext <4 x i8> [[TMP18]] to <4 x i32>
; CHECK-NEXT:    [[TMP20:%.*]] = shl nsw <4 x i32> [[TMP9]], <i32 16, i32 16, i32 16, i32 16>
; CHECK-NEXT:    [[TMP21:%.*]] = shl nsw <4 x i32> [[TMP14]], <i32 16, i32 16, i32 16, i32 16>
; CHECK-NEXT:    [[TMP22:%.*]] = sub nsw <4 x i32> [[TMP20]], [[TMP19]]
; CHECK-NEXT:    [[TMP23:%.*]] = sub nsw <4 x i32> [[TMP22]], [[TMP21]]
; CHECK-NEXT:    [[TMP24:%.*]] = add nsw <4 x i32> [[TMP23]], [[TMP4]]
; CHECK-NEXT:    [[SHUFFLE1:%.*]] = shufflevector <4 x i32> [[TMP24]], <4 x i32> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 0, i32 2, i32 2, i32 3, i32 2>
; CHECK-NEXT:    [[TMP25:%.*]] = extractelement <8 x i32> [[SHUFFLE1]], i32 2
; CHECK-NEXT:    [[BRIDGE_T856_3315:%.*]] = add nsw i32 [[TMP25]], [[CHAIN_T856_3319]]
; CHECK-NEXT:    [[ARRAYIDX1052:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I1]], i64 2
; CHECK-NEXT:    [[TMP26:%.*]] = extractelement <8 x i32> [[SHUFFLE1]], i32 0
; CHECK-NEXT:    [[BRIDGE_T855_3295:%.*]] = sub nsw i32 [[TMP26]], [[CHAIN_T856_3319]]
; CHECK-NEXT:    [[ARRAYIDX1070:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I1]], i64 1
; CHECK-NEXT:    [[BRIDGE_T851_:%.*]] = sub nsw i32 [[CHAIN_T856_3319]], [[TMP25]]
; CHECK-NEXT:    [[ARRAYIDX1088:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I1]], i64 3
; CHECK-NEXT:    [[BRIDGE_T850_3240:%.*]] = sub nsw i32 [[TMP25]], [[CHAIN_T856_3319]]
; CHECK-NEXT:    [[I47:%.*]] = add i64 [[I2]], 9
; CHECK-NEXT:    [[ARRAYIDX1113:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I47]]
; CHECK-NEXT:    [[GEPLOAD1114:%.*]] = load i8, i8* [[ARRAYIDX1113]], align 1
; CHECK-NEXT:    [[I48:%.*]] = add i64 [[I4]], 9
; CHECK-NEXT:    [[ARRAYIDX1115:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I48]]
; CHECK-NEXT:    [[GEPLOAD1116:%.*]] = load i8, i8* [[ARRAYIDX1115]], align 1
; CHECK-NEXT:    [[I49:%.*]] = add i64 [[I2]], 13
; CHECK-NEXT:    [[ARRAYIDX1117:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I49]]
; CHECK-NEXT:    [[GEPLOAD1118:%.*]] = load i8, i8* [[ARRAYIDX1117]], align 1
; CHECK-NEXT:    [[I50:%.*]] = add i64 [[I4]], 13
; CHECK-NEXT:    [[ARRAYIDX1119:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I50]]
; CHECK-NEXT:    [[GEPLOAD1120:%.*]] = load i8, i8* [[ARRAYIDX1119]], align 1
; CHECK-NEXT:    [[I51:%.*]] = add i64 [[I2]], 10
; CHECK-NEXT:    [[ARRAYIDX1121:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I51]]
; CHECK-NEXT:    [[GEPLOAD1122:%.*]] = load i8, i8* [[ARRAYIDX1121]], align 1
; CHECK-NEXT:    [[I52:%.*]] = add i64 [[I4]], 10
; CHECK-NEXT:    [[ARRAYIDX1123:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I52]]
; CHECK-NEXT:    [[GEPLOAD1124:%.*]] = load i8, i8* [[ARRAYIDX1123]], align 1
; CHECK-NEXT:    [[I53:%.*]] = add i64 [[I2]], 14
; CHECK-NEXT:    [[ARRAYIDX1125:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I53]]
; CHECK-NEXT:    [[GEPLOAD1126:%.*]] = load i8, i8* [[ARRAYIDX1125]], align 1
; CHECK-NEXT:    [[I54:%.*]] = add i64 [[I4]], 14
; CHECK-NEXT:    [[ARRAYIDX1127:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I54]]
; CHECK-NEXT:    [[GEPLOAD1128:%.*]] = load i8, i8* [[ARRAYIDX1127]], align 1
; CHECK-NEXT:    [[ARRAYIDX1138:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I1]], i64 4
; CHECK-NEXT:    [[I60:%.*]] = zext i8 [[GEPLOAD1122]] to i32
; CHECK-NEXT:    [[I64:%.*]] = zext i8 [[GEPLOAD1126]] to i32
; CHECK-NEXT:    [[I68:%.*]] = zext i8 [[GEPLOAD1128]] to i32
; CHECK-NEXT:    [[I72:%.*]] = zext i8 [[GEPLOAD1124]] to i32
; CHECK-NEXT:    [[I79:%.*]] = shl nsw i32 [[I64]], 16
; CHECK-NEXT:    [[I80:%.*]] = shl nsw i32 [[I68]], 16
; CHECK-NEXT:    [[CHAIN_T829_3163:%.*]] = sub nsw i32 [[I79]], [[I80]]
; CHECK-NEXT:    [[CHAIN_T829_3165:%.*]] = sub nsw i32 [[CHAIN_T829_3163]], [[I72]]
; CHECK-NEXT:    [[CHAIN_T829_3166:%.*]] = add nsw i32 [[CHAIN_T829_3165]], [[I60]]
; CHECK-NEXT:    [[TMP27:%.*]] = extractelement <8 x i32> [[SHUFFLE1]], i32 6
; CHECK-NEXT:    [[ARRAYIDX1140:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I1]], i64 6
; CHECK-NEXT:    [[TMP28:%.*]] = extractelement <8 x i32> [[SHUFFLE1]], i32 4
; CHECK-NEXT:    [[ARRAYIDX1158:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I1]], i64 5
; CHECK-NEXT:    [[ARRAYIDX1176:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I1]], i64 7
; CHECK-NEXT:    [[TMP29:%.*]] = insertelement <4 x i32> undef, i32 [[TMP27]], i32 0
; CHECK-NEXT:    [[TMP30:%.*]] = insertelement <4 x i32> [[TMP29]], i32 [[CHAIN_T829_3166]], i32 1
; CHECK-NEXT:    [[TMP31:%.*]] = insertelement <4 x i32> [[TMP30]], i32 [[TMP28]], i32 2
; CHECK-NEXT:    [[TMP32:%.*]] = insertelement <4 x i32> [[TMP31]], i32 [[TMP27]], i32 3
; CHECK-NEXT:    [[TMP33:%.*]] = insertelement <2 x i32> undef, i32 [[CHAIN_T829_3166]], i32 0
; CHECK-NEXT:    [[TMP34:%.*]] = insertelement <2 x i32> [[TMP33]], i32 [[TMP27]], i32 1
; CHECK-NEXT:    [[SHUFFLE2:%.*]] = shufflevector <2 x i32> [[TMP34]], <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 0>
; CHECK-NEXT:    [[TMP35:%.*]] = add nsw <4 x i32> [[TMP32]], [[SHUFFLE2]]
; CHECK-NEXT:    [[TMP36:%.*]] = sub nsw <4 x i32> [[TMP32]], [[SHUFFLE2]]
; CHECK-NEXT:    [[TMP37:%.*]] = shufflevector <4 x i32> [[TMP35]], <4 x i32> [[TMP36]], <4 x i32> <i32 0, i32 5, i32 6, i32 7>
; CHECK-NEXT:    [[I83:%.*]] = add i64 [[I2]], [[I]]
; CHECK-NEXT:    [[ARRAYIDX1193:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I83]]
; CHECK-NEXT:    [[GEPLOAD1194:%.*]] = load i8, i8* [[ARRAYIDX1193]], align 1
; CHECK-NEXT:    [[I84:%.*]] = add i64 [[I4]], [[I3]]
; CHECK-NEXT:    [[ARRAYIDX1195:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I84]]
; CHECK-NEXT:    [[GEPLOAD1196:%.*]] = load i8, i8* [[ARRAYIDX1195]], align 1
; CHECK-NEXT:    [[BRIDGE_T820_:%.*]] = add nsw i64 4, [[I83]]
; CHECK-NEXT:    [[ARRAYIDX1197:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[BRIDGE_T820_]]
; CHECK-NEXT:    [[GEPLOAD1198:%.*]] = load i8, i8* [[ARRAYIDX1197]], align 1
; CHECK-NEXT:    [[BRIDGE_T819_:%.*]] = add nsw i64 4, [[I84]]
; CHECK-NEXT:    [[ARRAYIDX1199:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[BRIDGE_T819_]]
; CHECK-NEXT:    [[GEPLOAD1200:%.*]] = load i8, i8* [[ARRAYIDX1199]], align 1
; CHECK-NEXT:    [[BRIDGE_T818_:%.*]] = add nsw i64 1, [[I83]]
; CHECK-NEXT:    [[ARRAYIDX1201:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[BRIDGE_T818_]]
; CHECK-NEXT:    [[GEPLOAD1202:%.*]] = load i8, i8* [[ARRAYIDX1201]], align 1
; CHECK-NEXT:    [[BRIDGE_T817_:%.*]] = add nsw i64 1, [[I84]]
; CHECK-NEXT:    [[ARRAYIDX1203:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[BRIDGE_T817_]]
; CHECK-NEXT:    [[GEPLOAD1204:%.*]] = load i8, i8* [[ARRAYIDX1203]], align 1
; CHECK-NEXT:    [[BRIDGE_T816_:%.*]] = add nsw i64 5, [[I83]]
; CHECK-NEXT:    [[ARRAYIDX1205:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[BRIDGE_T816_]]
; CHECK-NEXT:    [[GEPLOAD1206:%.*]] = load i8, i8* [[ARRAYIDX1205]], align 1
; CHECK-NEXT:    [[BRIDGE_T815_:%.*]] = add nsw i64 5, [[I84]]
; CHECK-NEXT:    [[ARRAYIDX1207:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[BRIDGE_T815_]]
; CHECK-NEXT:    [[GEPLOAD1208:%.*]] = load i8, i8* [[ARRAYIDX1207]], align 1
; CHECK-NEXT:    [[BRIDGE_T814_:%.*]] = add nsw i64 2, [[I83]]
; CHECK-NEXT:    [[ARRAYIDX1209:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[BRIDGE_T814_]]
; CHECK-NEXT:    [[GEPLOAD1210:%.*]] = load i8, i8* [[ARRAYIDX1209]], align 1
; CHECK-NEXT:    [[BRIDGE_T813_:%.*]] = add nsw i64 2, [[I84]]
; CHECK-NEXT:    [[ARRAYIDX1211:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[BRIDGE_T813_]]
; CHECK-NEXT:    [[GEPLOAD1212:%.*]] = load i8, i8* [[ARRAYIDX1211]], align 1
; CHECK-NEXT:    [[BRIDGE_T812_:%.*]] = add nsw i64 6, [[I83]]
; CHECK-NEXT:    [[ARRAYIDX1213:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[BRIDGE_T812_]]
; CHECK-NEXT:    [[GEPLOAD1214:%.*]] = load i8, i8* [[ARRAYIDX1213]], align 1
; CHECK-NEXT:    [[BRIDGE_T811_:%.*]] = add nsw i64 6, [[I84]]
; CHECK-NEXT:    [[ARRAYIDX1215:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[BRIDGE_T811_]]
; CHECK-NEXT:    [[GEPLOAD1216:%.*]] = load i8, i8* [[ARRAYIDX1215]], align 1
; CHECK-NEXT:    [[BRIDGE_T810_:%.*]] = add nsw i64 3, [[I83]]
; CHECK-NEXT:    [[ARRAYIDX1217:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[BRIDGE_T810_]]
; CHECK-NEXT:    [[GEPLOAD1218:%.*]] = load i8, i8* [[ARRAYIDX1217]], align 1
; CHECK-NEXT:    [[BRIDGE_T809_:%.*]] = add nsw i64 3, [[I84]]
; CHECK-NEXT:    [[ARRAYIDX1219:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[BRIDGE_T809_]]
; CHECK-NEXT:    [[GEPLOAD1220:%.*]] = load i8, i8* [[ARRAYIDX1219]], align 1
; CHECK-NEXT:    [[BRIDGE_T808_:%.*]] = add nsw i64 7, [[I83]]
; CHECK-NEXT:    [[ARRAYIDX1221:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[BRIDGE_T808_]]
; CHECK-NEXT:    [[GEPLOAD1222:%.*]] = load i8, i8* [[ARRAYIDX1221]], align 1
; CHECK-NEXT:    [[BRIDGE_T807_:%.*]] = add nsw i64 7, [[I84]]
; CHECK-NEXT:    [[ARRAYIDX1223:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[BRIDGE_T807_]]
; CHECK-NEXT:    [[GEPLOAD1224:%.*]] = load i8, i8* [[ARRAYIDX1223]], align 1
; CHECK-NEXT:    [[I85:%.*]] = or i64 [[I1]], 1
; CHECK-NEXT:    [[ARRAYIDX1226:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I85]], i64 0
; CHECK-NEXT:    [[I86:%.*]] = zext i8 [[GEPLOAD1218]] to i32
; CHECK-NEXT:    [[I87:%.*]] = zext i8 [[GEPLOAD1210]] to i32
; CHECK-NEXT:    [[I89:%.*]] = zext i8 [[GEPLOAD1194]] to i32
; CHECK-NEXT:    [[I90:%.*]] = zext i8 [[GEPLOAD1222]] to i32
; CHECK-NEXT:    [[I91:%.*]] = zext i8 [[GEPLOAD1214]] to i32
; CHECK-NEXT:    [[I93:%.*]] = zext i8 [[GEPLOAD1198]] to i32
; CHECK-NEXT:    [[I94:%.*]] = zext i8 [[GEPLOAD1224]] to i32
; CHECK-NEXT:    [[I95:%.*]] = zext i8 [[GEPLOAD1216]] to i32
; CHECK-NEXT:    [[I97:%.*]] = zext i8 [[GEPLOAD1200]] to i32
; CHECK-NEXT:    [[I98:%.*]] = zext i8 [[GEPLOAD1220]] to i32
; CHECK-NEXT:    [[I99:%.*]] = zext i8 [[GEPLOAD1212]] to i32
; CHECK-NEXT:    [[I101:%.*]] = zext i8 [[GEPLOAD1196]] to i32
; CHECK-NEXT:    [[I102:%.*]] = shl nsw i32 [[I93]], 16
; CHECK-NEXT:    [[I103:%.*]] = shl nsw i32 [[I97]], 16
; CHECK-NEXT:    [[CHAIN_T802_29272931:%.*]] = sub nsw i32 [[I103]], [[I102]]
; CHECK-NEXT:    [[CHAIN_T802_29252929:%.*]] = sub nsw i32 [[CHAIN_T802_29272931]], [[I89]]
; CHECK-NEXT:    [[CHAIN_T802_2928:%.*]] = add nsw i32 [[CHAIN_T802_29252929]], [[I101]]
; CHECK-NEXT:    [[I106:%.*]] = shl nsw i32 [[I91]], 16
; CHECK-NEXT:    [[I107:%.*]] = shl nsw i32 [[I95]], 16
; CHECK-NEXT:    [[CHAIN_T802_29172923:%.*]] = sub nsw i32 [[I107]], [[I106]]
; CHECK-NEXT:    [[CHAIN_T802_29192921:%.*]] = sub nsw i32 [[CHAIN_T802_29172923]], [[I87]]
; CHECK-NEXT:    [[CHAIN_T802_29182920:%.*]] = add nsw i32 [[CHAIN_T802_29192921]], [[I99]]
; CHECK-NEXT:    [[I108:%.*]] = shl nsw i32 [[I90]], 16
; CHECK-NEXT:    [[I109:%.*]] = shl nsw i32 [[I94]], 16
; CHECK-NEXT:    [[CHAIN_T802_29092915:%.*]] = sub nsw i32 [[I109]], [[I108]]
; CHECK-NEXT:    [[CHAIN_T802_29112913:%.*]] = sub nsw i32 [[CHAIN_T802_29092915]], [[I86]]
; CHECK-NEXT:    [[CHAIN_T802_29102912:%.*]] = add nsw i32 [[CHAIN_T802_29112913]], [[I98]]
; CHECK-NEXT:    [[ARRAYIDX1244:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I85]], i64 2
; CHECK-NEXT:    [[ARRAYIDX1262:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I85]], i64 1
; CHECK-NEXT:    [[ARRAYIDX1280:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I85]], i64 3
; CHECK-NEXT:    [[BRIDGE_T795_:%.*]] = add nsw i64 8, [[I83]]
; CHECK-NEXT:    [[ARRAYIDX1297:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[BRIDGE_T795_]]
; CHECK-NEXT:    [[GEPLOAD1298:%.*]] = load i8, i8* [[ARRAYIDX1297]], align 1
; CHECK-NEXT:    [[BRIDGE_T794_:%.*]] = add nsw i64 8, [[I84]]
; CHECK-NEXT:    [[ARRAYIDX1299:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[BRIDGE_T794_]]
; CHECK-NEXT:    [[GEPLOAD1300:%.*]] = load i8, i8* [[ARRAYIDX1299]], align 1
; CHECK-NEXT:    [[BRIDGE_T793_:%.*]] = add nsw i64 12, [[I83]]
; CHECK-NEXT:    [[ARRAYIDX1301:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[BRIDGE_T793_]]
; CHECK-NEXT:    [[GEPLOAD1302:%.*]] = load i8, i8* [[ARRAYIDX1301]], align 1
; CHECK-NEXT:    [[BRIDGE_T792_:%.*]] = add nsw i64 12, [[I84]]
; CHECK-NEXT:    [[ARRAYIDX1303:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[BRIDGE_T792_]]
; CHECK-NEXT:    [[GEPLOAD1304:%.*]] = load i8, i8* [[ARRAYIDX1303]], align 1
; CHECK-NEXT:    [[BRIDGE_T791_:%.*]] = add nsw i64 9, [[I83]]
; CHECK-NEXT:    [[ARRAYIDX1305:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[BRIDGE_T791_]]
; CHECK-NEXT:    [[GEPLOAD1306:%.*]] = load i8, i8* [[ARRAYIDX1305]], align 1
; CHECK-NEXT:    [[BRIDGE_T790_:%.*]] = add nsw i64 9, [[I84]]
; CHECK-NEXT:    [[ARRAYIDX1307:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[BRIDGE_T790_]]
; CHECK-NEXT:    [[GEPLOAD1308:%.*]] = load i8, i8* [[ARRAYIDX1307]], align 1
; CHECK-NEXT:    [[BRIDGE_T789_:%.*]] = add nsw i64 13, [[I83]]
; CHECK-NEXT:    [[ARRAYIDX1309:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[BRIDGE_T789_]]
; CHECK-NEXT:    [[GEPLOAD1310:%.*]] = load i8, i8* [[ARRAYIDX1309]], align 1
; CHECK-NEXT:    [[BRIDGE_T788_:%.*]] = add nsw i64 13, [[I84]]
; CHECK-NEXT:    [[ARRAYIDX1311:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[BRIDGE_T788_]]
; CHECK-NEXT:    [[GEPLOAD1312:%.*]] = load i8, i8* [[ARRAYIDX1311]], align 1
; CHECK-NEXT:    [[BRIDGE_T787_:%.*]] = add nsw i64 10, [[I83]]
; CHECK-NEXT:    [[ARRAYIDX1313:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[BRIDGE_T787_]]
; CHECK-NEXT:    [[GEPLOAD1314:%.*]] = load i8, i8* [[ARRAYIDX1313]], align 1
; CHECK-NEXT:    [[BRIDGE_T786_:%.*]] = add nsw i64 10, [[I84]]
; CHECK-NEXT:    [[ARRAYIDX1315:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[BRIDGE_T786_]]
; CHECK-NEXT:    [[GEPLOAD1316:%.*]] = load i8, i8* [[ARRAYIDX1315]], align 1
; CHECK-NEXT:    [[BRIDGE_T785_:%.*]] = add nsw i64 14, [[I83]]
; CHECK-NEXT:    [[ARRAYIDX1317:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[BRIDGE_T785_]]
; CHECK-NEXT:    [[GEPLOAD1318:%.*]] = load i8, i8* [[ARRAYIDX1317]], align 1
; CHECK-NEXT:    [[BRIDGE_T784_:%.*]] = add nsw i64 14, [[I84]]
; CHECK-NEXT:    [[ARRAYIDX1319:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[BRIDGE_T784_]]
; CHECK-NEXT:    [[GEPLOAD1320:%.*]] = load i8, i8* [[ARRAYIDX1319]], align 1
; CHECK-NEXT:    [[BRIDGE_T783_:%.*]] = add nsw i64 11, [[I83]]
; CHECK-NEXT:    [[ARRAYIDX1321:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[BRIDGE_T783_]]
; CHECK-NEXT:    [[GEPLOAD1322:%.*]] = load i8, i8* [[ARRAYIDX1321]], align 1
; CHECK-NEXT:    [[BRIDGE_T782_:%.*]] = add nsw i64 11, [[I84]]
; CHECK-NEXT:    [[ARRAYIDX1323:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[BRIDGE_T782_]]
; CHECK-NEXT:    [[GEPLOAD1324:%.*]] = load i8, i8* [[ARRAYIDX1323]], align 1
; CHECK-NEXT:    [[BRIDGE_T781_:%.*]] = add nsw i64 15, [[I83]]
; CHECK-NEXT:    [[ARRAYIDX1325:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[BRIDGE_T781_]]
; CHECK-NEXT:    [[GEPLOAD1326:%.*]] = load i8, i8* [[ARRAYIDX1325]], align 1
; CHECK-NEXT:    [[BRIDGE_T780_:%.*]] = add nsw i64 15, [[I84]]
; CHECK-NEXT:    [[ARRAYIDX1327:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[BRIDGE_T780_]]
; CHECK-NEXT:    [[GEPLOAD1328:%.*]] = load i8, i8* [[ARRAYIDX1327]], align 1
; CHECK-NEXT:    [[ARRAYIDX1330:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I85]], i64 4
; CHECK-NEXT:    [[I110:%.*]] = zext i8 [[GEPLOAD1322]] to i32
; CHECK-NEXT:    [[I111:%.*]] = zext i8 [[GEPLOAD1314]] to i32
; CHECK-NEXT:    [[TMP38:%.*]] = insertelement <4 x i8> undef, i8 [[GEPLOAD1027]], i32 0
; CHECK-NEXT:    [[TMP39:%.*]] = insertelement <4 x i8> [[TMP38]], i8 [[GEPLOAD1114]], i32 1
; CHECK-NEXT:    [[TMP40:%.*]] = insertelement <4 x i8> [[TMP39]], i8 [[GEPLOAD1204]], i32 2
; CHECK-NEXT:    [[TMP41:%.*]] = insertelement <4 x i8> [[TMP40]], i8 [[GEPLOAD1306]], i32 3
; CHECK-NEXT:    [[TMP42:%.*]] = zext <4 x i8> [[TMP41]] to <4 x i32>
; CHECK-NEXT:    [[I113:%.*]] = zext i8 [[GEPLOAD1298]] to i32
; CHECK-NEXT:    [[I114:%.*]] = zext i8 [[GEPLOAD1326]] to i32
; CHECK-NEXT:    [[I115:%.*]] = zext i8 [[GEPLOAD1318]] to i32
; CHECK-NEXT:    [[TMP43:%.*]] = insertelement <4 x i8> undef, i8 [[GEPLOAD1031]], i32 0
; CHECK-NEXT:    [[TMP44:%.*]] = insertelement <4 x i8> [[TMP43]], i8 [[GEPLOAD1118]], i32 1
; CHECK-NEXT:    [[TMP45:%.*]] = insertelement <4 x i8> [[TMP44]], i8 [[GEPLOAD1208]], i32 2
; CHECK-NEXT:    [[TMP46:%.*]] = insertelement <4 x i8> [[TMP45]], i8 [[GEPLOAD1310]], i32 3
; CHECK-NEXT:    [[TMP47:%.*]] = zext <4 x i8> [[TMP46]] to <4 x i32>
; CHECK-NEXT:    [[I117:%.*]] = zext i8 [[GEPLOAD1302]] to i32
; CHECK-NEXT:    [[I118:%.*]] = zext i8 [[GEPLOAD1328]] to i32
; CHECK-NEXT:    [[I119:%.*]] = zext i8 [[GEPLOAD1320]] to i32
; CHECK-NEXT:    [[TMP48:%.*]] = insertelement <4 x i8> undef, i8 [[GEPLOAD1033]], i32 0
; CHECK-NEXT:    [[TMP49:%.*]] = insertelement <4 x i8> [[TMP48]], i8 [[GEPLOAD1120]], i32 1
; CHECK-NEXT:    [[TMP50:%.*]] = insertelement <4 x i8> [[TMP49]], i8 [[GEPLOAD1206]], i32 2
; CHECK-NEXT:    [[TMP51:%.*]] = insertelement <4 x i8> [[TMP50]], i8 [[GEPLOAD1312]], i32 3
; CHECK-NEXT:    [[TMP52:%.*]] = zext <4 x i8> [[TMP51]] to <4 x i32>
; CHECK-NEXT:    [[I121:%.*]] = zext i8 [[GEPLOAD1304]] to i32
; CHECK-NEXT:    [[I122:%.*]] = zext i8 [[GEPLOAD1324]] to i32
; CHECK-NEXT:    [[I123:%.*]] = zext i8 [[GEPLOAD1316]] to i32
; CHECK-NEXT:    [[TMP53:%.*]] = insertelement <4 x i8> undef, i8 [[GEPLOAD1029]], i32 0
; CHECK-NEXT:    [[TMP54:%.*]] = insertelement <4 x i8> [[TMP53]], i8 [[GEPLOAD1116]], i32 1
; CHECK-NEXT:    [[TMP55:%.*]] = insertelement <4 x i8> [[TMP54]], i8 [[GEPLOAD1202]], i32 2
; CHECK-NEXT:    [[TMP56:%.*]] = insertelement <4 x i8> [[TMP55]], i8 [[GEPLOAD1308]], i32 3
; CHECK-NEXT:    [[TMP57:%.*]] = zext <4 x i8> [[TMP56]] to <4 x i32>
; CHECK-NEXT:    [[I125:%.*]] = zext i8 [[GEPLOAD1300]] to i32
; CHECK-NEXT:    [[I126:%.*]] = shl nsw i32 [[I117]], 16
; CHECK-NEXT:    [[I127:%.*]] = shl nsw i32 [[I121]], 16
; CHECK-NEXT:    [[TMP58:%.*]] = shl nsw <4 x i32> [[TMP47]], <i32 16, i32 16, i32 16, i32 16>
; CHECK-NEXT:    [[TMP59:%.*]] = shl nsw <4 x i32> [[TMP52]], <i32 16, i32 16, i32 16, i32 16>
; CHECK-NEXT:    [[TMP60:%.*]] = sub nsw <4 x i32> [[TMP58]], [[TMP57]]
; CHECK-NEXT:    [[TMP61:%.*]] = sub nsw <4 x i32> [[TMP60]], [[TMP59]]
; CHECK-NEXT:    [[TMP62:%.*]] = add nsw <4 x i32> [[TMP61]], [[TMP42]]
; CHECK-NEXT:    [[SHUFFLE:%.*]] = shufflevector <4 x i32> [[TMP62]], <4 x i32> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3>
; CHECK-NEXT:    [[CHAIN_T775_2765:%.*]] = sub nsw i32 [[I126]], [[I127]]
; CHECK-NEXT:    [[CHAIN_T775_2763:%.*]] = sub nsw i32 [[CHAIN_T775_2765]], [[I125]]
; CHECK-NEXT:    [[CHAIN_T775_2764:%.*]] = add nsw i32 [[CHAIN_T775_2763]], [[I113]]
; CHECK-NEXT:    [[I130:%.*]] = shl nsw i32 [[I115]], 16
; CHECK-NEXT:    [[I131:%.*]] = shl nsw i32 [[I119]], 16
; CHECK-NEXT:    [[CHAIN_T775_2758:%.*]] = sub nsw i32 [[I130]], [[I131]]
; CHECK-NEXT:    [[CHAIN_T775_2760:%.*]] = sub nsw i32 [[CHAIN_T775_2758]], [[I123]]
; CHECK-NEXT:    [[CHAIN_T775_2761:%.*]] = add nsw i32 [[CHAIN_T775_2760]], [[I111]]
; CHECK-NEXT:    [[I132:%.*]] = shl nsw i32 [[I114]], 16
; CHECK-NEXT:    [[I133:%.*]] = shl nsw i32 [[I118]], 16
; CHECK-NEXT:    [[CHAIN_T775_:%.*]] = sub nsw i32 [[I132]], [[I133]]
; CHECK-NEXT:    [[CHAIN_T775_2755:%.*]] = sub nsw i32 [[CHAIN_T775_]], [[I122]]
; CHECK-NEXT:    [[CHAIN_T775_2756:%.*]] = add nsw i32 [[CHAIN_T775_2755]], [[I110]]
; CHECK-NEXT:    [[TMP63:%.*]] = insertelement <4 x i32> undef, i32 [[CHAIN_T802_29102912]], i32 0
; CHECK-NEXT:    [[TMP64:%.*]] = insertelement <4 x i32> [[TMP63]], i32 [[CHAIN_T802_29102912]], i32 1
; CHECK-NEXT:    [[TMP65:%.*]] = insertelement <4 x i32> [[TMP64]], i32 [[CHAIN_T802_29182920]], i32 2
; CHECK-NEXT:    [[TMP66:%.*]] = insertelement <4 x i32> [[TMP65]], i32 [[CHAIN_T775_2756]], i32 3
; CHECK-NEXT:    [[TMP67:%.*]] = insertelement <4 x i32> undef, i32 [[CHAIN_T802_29182920]], i32 0
; CHECK-NEXT:    [[TMP68:%.*]] = insertelement <4 x i32> [[TMP67]], i32 [[CHAIN_T802_29182920]], i32 1
; CHECK-NEXT:    [[TMP69:%.*]] = insertelement <4 x i32> [[TMP68]], i32 [[CHAIN_T802_29102912]], i32 2
; CHECK-NEXT:    [[TMP70:%.*]] = insertelement <4 x i32> [[TMP69]], i32 [[CHAIN_T775_2761]], i32 3
; CHECK-NEXT:    [[TMP71:%.*]] = sub nsw <4 x i32> [[TMP66]], [[TMP70]]
; CHECK-NEXT:    [[TMP72:%.*]] = add nsw <4 x i32> [[TMP66]], [[TMP70]]
; CHECK-NEXT:    [[TMP73:%.*]] = shufflevector <4 x i32> [[TMP71]], <4 x i32> [[TMP72]], <4 x i32> <i32 0, i32 5, i32 2, i32 7>
; CHECK-NEXT:    [[ARRAYIDX1348:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I85]], i64 6
; CHECK-NEXT:    [[BRIDGE_T774_2737:%.*]] = sub nsw i32 [[CHAIN_T775_2764]], [[CHAIN_T775_2761]]
; CHECK-NEXT:    [[ARRAYIDX1366:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I85]], i64 5
; CHECK-NEXT:    [[BRIDGE_T770_:%.*]] = sub nsw i32 [[CHAIN_T775_2761]], [[CHAIN_T775_2756]]
; CHECK-NEXT:    [[ARRAYIDX1384:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I85]], i64 7
; CHECK-NEXT:    [[BRIDGE_T769_2682:%.*]] = sub nsw i32 [[CHAIN_T775_2756]], [[CHAIN_T775_2761]]
; CHECK-NEXT:    [[TMP74:%.*]] = insertelement <16 x i32> undef, i32 [[BRIDGE_T856_3315]], i32 0
; CHECK-NEXT:    [[TMP75:%.*]] = insertelement <16 x i32> [[TMP74]], i32 [[BRIDGE_T851_]], i32 1
; CHECK-NEXT:    [[TMP76:%.*]] = insertelement <16 x i32> [[TMP75]], i32 [[BRIDGE_T855_3295]], i32 2
; CHECK-NEXT:    [[TMP77:%.*]] = insertelement <16 x i32> [[TMP76]], i32 [[BRIDGE_T850_3240]], i32 3
; CHECK-NEXT:    [[TMP78:%.*]] = extractelement <4 x i32> [[TMP37]], i32 0
; CHECK-NEXT:    [[TMP79:%.*]] = insertelement <16 x i32> [[TMP77]], i32 [[TMP78]], i32 4
; CHECK-NEXT:    [[TMP80:%.*]] = extractelement <4 x i32> [[TMP37]], i32 1
; CHECK-NEXT:    [[TMP81:%.*]] = insertelement <16 x i32> [[TMP79]], i32 [[TMP80]], i32 5
; CHECK-NEXT:    [[TMP82:%.*]] = extractelement <4 x i32> [[TMP37]], i32 2
; CHECK-NEXT:    [[TMP83:%.*]] = insertelement <16 x i32> [[TMP81]], i32 [[TMP82]], i32 6
; CHECK-NEXT:    [[TMP84:%.*]] = extractelement <4 x i32> [[TMP37]], i32 3
; CHECK-NEXT:    [[TMP85:%.*]] = insertelement <16 x i32> [[TMP83]], i32 [[TMP84]], i32 7
; CHECK-NEXT:    [[TMP86:%.*]] = extractelement <4 x i32> [[TMP73]], i32 1
; CHECK-NEXT:    [[TMP87:%.*]] = insertelement <16 x i32> [[TMP85]], i32 [[TMP86]], i32 8
; CHECK-NEXT:    [[TMP88:%.*]] = extractelement <4 x i32> [[TMP73]], i32 0
; CHECK-NEXT:    [[TMP89:%.*]] = insertelement <16 x i32> [[TMP87]], i32 [[TMP88]], i32 9
; CHECK-NEXT:    [[TMP90:%.*]] = insertelement <16 x i32> [[TMP89]], i32 [[TMP86]], i32 10
; CHECK-NEXT:    [[TMP91:%.*]] = extractelement <4 x i32> [[TMP73]], i32 2
; CHECK-NEXT:    [[TMP92:%.*]] = insertelement <16 x i32> [[TMP90]], i32 [[TMP91]], i32 11
; CHECK-NEXT:    [[TMP93:%.*]] = extractelement <4 x i32> [[TMP73]], i32 3
; CHECK-NEXT:    [[TMP94:%.*]] = insertelement <16 x i32> [[TMP92]], i32 [[TMP93]], i32 12
; CHECK-NEXT:    [[TMP95:%.*]] = insertelement <16 x i32> [[TMP94]], i32 [[BRIDGE_T770_]], i32 13
; CHECK-NEXT:    [[TMP96:%.*]] = insertelement <16 x i32> [[TMP95]], i32 [[BRIDGE_T774_2737]], i32 14
; CHECK-NEXT:    [[TMP97:%.*]] = insertelement <16 x i32> [[TMP96]], i32 [[BRIDGE_T769_2682]], i32 15
; CHECK-NEXT:    [[TMP98:%.*]] = insertelement <16 x i32> undef, i32 [[TMP26]], i32 0
; CHECK-NEXT:    [[TMP99:%.*]] = insertelement <16 x i32> [[TMP98]], i32 [[TMP26]], i32 1
; CHECK-NEXT:    [[TMP100:%.*]] = insertelement <16 x i32> [[TMP99]], i32 [[TMP25]], i32 2
; CHECK-NEXT:    [[TMP101:%.*]] = insertelement <16 x i32> [[TMP100]], i32 [[TMP26]], i32 3
; CHECK-NEXT:    [[TMP102:%.*]] = insertelement <16 x i32> [[TMP101]], i32 [[TMP28]], i32 4
; CHECK-NEXT:    [[TMP103:%.*]] = insertelement <16 x i32> [[TMP102]], i32 [[TMP28]], i32 5
; CHECK-NEXT:    [[TMP104:%.*]] = insertelement <16 x i32> [[TMP103]], i32 [[TMP27]], i32 6
; CHECK-NEXT:    [[TMP105:%.*]] = insertelement <16 x i32> [[TMP104]], i32 [[TMP28]], i32 7
; CHECK-NEXT:    [[TMP106:%.*]] = insertelement <16 x i32> [[TMP105]], i32 [[CHAIN_T802_2928]], i32 8
; CHECK-NEXT:    [[TMP107:%.*]] = insertelement <16 x i32> [[TMP106]], i32 [[CHAIN_T802_2928]], i32 9
; CHECK-NEXT:    [[TMP108:%.*]] = insertelement <16 x i32> [[TMP107]], i32 [[CHAIN_T802_2928]], i32 10
; CHECK-NEXT:    [[TMP109:%.*]] = insertelement <16 x i32> [[TMP108]], i32 [[CHAIN_T802_2928]], i32 11
; CHECK-NEXT:    [[TMP110:%.*]] = insertelement <16 x i32> [[TMP109]], i32 [[CHAIN_T775_2764]], i32 12
; CHECK-NEXT:    [[TMP111:%.*]] = insertelement <16 x i32> [[TMP110]], i32 [[CHAIN_T775_2764]], i32 13
; CHECK-NEXT:    [[TMP112:%.*]] = insertelement <16 x i32> [[TMP111]], i32 [[CHAIN_T775_2756]], i32 14
; CHECK-NEXT:    [[TMP113:%.*]] = insertelement <16 x i32> [[TMP112]], i32 [[CHAIN_T775_2764]], i32 15
; CHECK-NEXT:    [[TMP114:%.*]] = add nsw <16 x i32> [[TMP97]], [[TMP113]]
; CHECK-NEXT:    [[TMP115:%.*]] = sub nsw <16 x i32> [[TMP97]], [[TMP113]]
; CHECK-NEXT:    [[TMP116:%.*]] = shufflevector <16 x i32> [[TMP114]], <16 x i32> [[TMP115]], <16 x i32> <i32 0, i32 1, i32 18, i32 3, i32 4, i32 5, i32 22, i32 7, i32 8, i32 25, i32 26, i32 27, i32 12, i32 13, i32 30, i32 15>
; CHECK-NEXT:    [[TMP117:%.*]] = add nsw <16 x i32> [[TMP116]], [[SHUFFLE]]
; CHECK-NEXT:    [[TMP118:%.*]] = sub nsw <16 x i32> [[TMP116]], [[SHUFFLE]]
; CHECK-NEXT:    [[TMP119:%.*]] = shufflevector <16 x i32> [[TMP117]], <16 x i32> [[TMP118]], <16 x i32> <i32 0, i32 17, i32 2, i32 19, i32 4, i32 21, i32 6, i32 23, i32 24, i32 9, i32 26, i32 11, i32 12, i32 29, i32 14, i32 31>
; CHECK-NEXT:    [[TMP120:%.*]] = bitcast i32* [[ARRAYIDX1050]] to <16 x i32>*
; CHECK-NEXT:    store <16 x i32> [[TMP119]], <16 x i32>* [[TMP120]], align 4
; CHECK-NEXT:    [[NEXTIVLOOP_1452]] = add nuw nsw i64 [[I1_I64_0]], 1
; CHECK-NEXT:    [[CONDLOOP_1452:%.*]] = icmp ult i64 [[NEXTIVLOOP_1452]], 8
; CHECK-NEXT:    br i1 [[CONDLOOP_1452]], label [[LOOP_1452]], label [[AFTERLOOP_1452:%.*]]
; CHECK:       afterloop.1452:
; CHECK-NEXT:    ret i32 0
;
entry:
  %alloca = alloca [16 x [8 x i32]], align 4
  %alloca933 = alloca [8 x i32], align 16
  %alloca934 = alloca [8 x i32], align 16
  %alloca935 = alloca [8 x i32], align 16
  %alloca936 = alloca [8 x i32], align 16
  br label %loop.1452

loop.1452:                                        ; preds = %loop.1452, %entry
  %i1.i64.0 = phi i64 [ 0, %entry ], [ %nextivloop.1452, %loop.1452 ]
  %i = sext i32 %i_pix1 to i64
  %i1 = shl nuw i64 %i1.i64.0, 1
  %i2 = mul i64 %i1, %i
  %arrayIdx = getelementptr inbounds i8, i8* %pix1, i64 %i2
  %gepload = load i8, i8* %arrayIdx, align 1
  %i3 = sext i32 %i_pix2 to i64
  %i4 = mul i64 %i1, %i3
  %arrayIdx1020 = getelementptr inbounds i8, i8* %pix2, i64 %i4
  %gepload1021 = load i8, i8* %arrayIdx1020, align 1
  %i5 = add i64 %i2, 4
  %arrayIdx1022 = getelementptr inbounds i8, i8* %pix1, i64 %i5
  %gepload1023 = load i8, i8* %arrayIdx1022, align 1
  %i6 = add i64 %i4, 4
  %arrayIdx1024 = getelementptr inbounds i8, i8* %pix2, i64 %i6
  %gepload1025 = load i8, i8* %arrayIdx1024, align 1
  %i7 = or i64 %i2, 1
  %arrayIdx1026 = getelementptr inbounds i8, i8* %pix1, i64 %i7
  %gepload1027 = load i8, i8* %arrayIdx1026, align 1
  %i8 = or i64 %i4, 1
  %arrayIdx1028 = getelementptr inbounds i8, i8* %pix2, i64 %i8
  %gepload1029 = load i8, i8* %arrayIdx1028, align 1
  %i9 = add i64 %i2, 5
  %arrayIdx1030 = getelementptr inbounds i8, i8* %pix1, i64 %i9
  %gepload1031 = load i8, i8* %arrayIdx1030, align 1
  %i10 = add i64 %i4, 5
  %arrayIdx1032 = getelementptr inbounds i8, i8* %pix2, i64 %i10
  %gepload1033 = load i8, i8* %arrayIdx1032, align 1
  %i11 = add i64 %i2, 2
  %arrayIdx1034 = getelementptr inbounds i8, i8* %pix1, i64 %i11
  %gepload1035 = load i8, i8* %arrayIdx1034, align 1
  %i12 = add i64 %i4, 2
  %arrayIdx1036 = getelementptr inbounds i8, i8* %pix2, i64 %i12
  %gepload1037 = load i8, i8* %arrayIdx1036, align 1
  %i13 = add i64 %i2, 6
  %arrayIdx1038 = getelementptr inbounds i8, i8* %pix1, i64 %i13
  %gepload1039 = load i8, i8* %arrayIdx1038, align 1
  %i14 = add i64 %i4, 6
  %arrayIdx1040 = getelementptr inbounds i8, i8* %pix2, i64 %i14
  %gepload1041 = load i8, i8* %arrayIdx1040, align 1
  %i15 = add i64 %i2, 3
  %arrayIdx1042 = getelementptr inbounds i8, i8* %pix1, i64 %i15
  %gepload1043 = load i8, i8* %arrayIdx1042, align 1
  %i16 = add i64 %i4, 3
  %arrayIdx1044 = getelementptr inbounds i8, i8* %pix2, i64 %i16
  %gepload1045 = load i8, i8* %arrayIdx1044, align 1
  %i17 = add i64 %i2, 7
  %arrayIdx1046 = getelementptr inbounds i8, i8* %pix1, i64 %i17
  %gepload1047 = load i8, i8* %arrayIdx1046, align 1
  %i18 = add i64 %i4, 7
  %arrayIdx1048 = getelementptr inbounds i8, i8* %pix2, i64 %i18
  %gepload1049 = load i8, i8* %arrayIdx1048, align 1
  %arrayIdx1050 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1, i64 0
  %i19 = zext i8 %gepload1043 to i32
  %i20 = zext i8 %gepload1035 to i32
  %i21 = zext i8 %gepload1027 to i32
  %i22 = zext i8 %gepload to i32
  %i23 = zext i8 %gepload1047 to i32
  %i24 = zext i8 %gepload1039 to i32
  %i25 = zext i8 %gepload1031 to i32
  %i26 = zext i8 %gepload1023 to i32
  %i27 = zext i8 %gepload1049 to i32
  %i28 = zext i8 %gepload1041 to i32
  %i29 = zext i8 %gepload1033 to i32
  %i30 = zext i8 %gepload1025 to i32
  %i31 = zext i8 %gepload1045 to i32
  %i32 = zext i8 %gepload1037 to i32
  %i33 = zext i8 %gepload1029 to i32
  %i34 = zext i8 %gepload1021 to i32
  %i35 = shl nsw i32 %i26, 16
  %i36 = shl nsw i32 %i30, 16
  %i37 = shl nsw i32 %i25, 16
  %i38 = shl nsw i32 %i29, 16
  %Chain_T856_3327 = sub nsw i32 %i37, %i38
  %Chain_T856_3326 = sub nsw i32 %Chain_T856_3327, %i33
  %Chain_T856_3329 = add nsw i32 %Chain_T856_3326, %i21
  %Chain_T856_3323 = sub nsw i32 %i35, %i36
  %Chain_T856_3321 = sub nsw i32 %Chain_T856_3323, %i34
  %Chain_T856_3322 = add nsw i32 %Chain_T856_3321, %i22
  %i39 = shl nsw i32 %i24, 16
  %i40 = shl nsw i32 %i28, 16
  %Chain_T856_3316 = sub nsw i32 %i39, %i40
  %Chain_T856_3318 = sub nsw i32 %Chain_T856_3316, %i32
  %Chain_T856_3319 = add nsw i32 %Chain_T856_3318, %i20
  %i41 = shl nsw i32 %i23, 16
  %i42 = shl nsw i32 %i27, 16
  %Chain_T856_ = sub nsw i32 %i41, %i42
  %Chain_T856_3313 = sub nsw i32 %Chain_T856_, %i31
  %Chain_T856_3314 = add nsw i32 %Chain_T856_3313, %i19
  %Bridge_T856_3315 = add nsw i32 %Chain_T856_3314, %Chain_T856_3319
  %Bridge_T856_3320 = add nsw i32 %Bridge_T856_3315, %Chain_T856_3322
  %Bridge_T856_3325 = add nsw i32 %Bridge_T856_3320, %Chain_T856_3329
  store i32 %Bridge_T856_3325, i32* %arrayIdx1050, align 4
  %arrayIdx1052 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1, i64 2
  %Bridge_T855_3295 = sub nsw i32 %Chain_T856_3322, %Chain_T856_3319
  %Bridge_T855_ = sub nsw i32 %Bridge_T855_3295, %Chain_T856_3314
  %Bridge_T855_3307 = add nsw i32 %Bridge_T855_, %Chain_T856_3329
  store i32 %Bridge_T855_3307, i32* %arrayIdx1052, align 4
  %arrayIdx1070 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1, i64 1
  %Bridge_T851_ = sub nsw i32 %Chain_T856_3319, %Chain_T856_3314
  %Bridge_T851_3274 = add nsw i32 %Bridge_T851_, %Chain_T856_3322
  %Bridge_T851_3279 = sub nsw i32 %Bridge_T851_3274, %Chain_T856_3329
  store i32 %Bridge_T851_3279, i32* %arrayIdx1070, align 4
  %arrayIdx1088 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1, i64 3
  %Bridge_T850_3240 = sub nsw i32 %Chain_T856_3314, %Chain_T856_3319
  %Bridge_T850_3249 = add nsw i32 %Bridge_T850_3240, %Chain_T856_3322
  %Bridge_T850_3254 = sub nsw i32 %Bridge_T850_3249, %Chain_T856_3329
  store i32 %Bridge_T850_3254, i32* %arrayIdx1088, align 4
  %i43 = add i64 %i2, 8
  %arrayIdx1105 = getelementptr inbounds i8, i8* %pix1, i64 %i43
  %gepload1106 = load i8, i8* %arrayIdx1105, align 1
  %i44 = add i64 %i4, 8
  %arrayIdx1107 = getelementptr inbounds i8, i8* %pix2, i64 %i44
  %gepload1108 = load i8, i8* %arrayIdx1107, align 1
  %i45 = add i64 %i2, 12
  %arrayIdx1109 = getelementptr inbounds i8, i8* %pix1, i64 %i45
  %gepload1110 = load i8, i8* %arrayIdx1109, align 1
  %i46 = add i64 %i4, 12
  %arrayIdx1111 = getelementptr inbounds i8, i8* %pix2, i64 %i46
  %gepload1112 = load i8, i8* %arrayIdx1111, align 1
  %i47 = add i64 %i2, 9
  %arrayIdx1113 = getelementptr inbounds i8, i8* %pix1, i64 %i47
  %gepload1114 = load i8, i8* %arrayIdx1113, align 1
  %i48 = add i64 %i4, 9
  %arrayIdx1115 = getelementptr inbounds i8, i8* %pix2, i64 %i48
  %gepload1116 = load i8, i8* %arrayIdx1115, align 1
  %i49 = add i64 %i2, 13
  %arrayIdx1117 = getelementptr inbounds i8, i8* %pix1, i64 %i49
  %gepload1118 = load i8, i8* %arrayIdx1117, align 1
  %i50 = add i64 %i4, 13
  %arrayIdx1119 = getelementptr inbounds i8, i8* %pix2, i64 %i50
  %gepload1120 = load i8, i8* %arrayIdx1119, align 1
  %i51 = add i64 %i2, 10
  %arrayIdx1121 = getelementptr inbounds i8, i8* %pix1, i64 %i51
  %gepload1122 = load i8, i8* %arrayIdx1121, align 1
  %i52 = add i64 %i4, 10
  %arrayIdx1123 = getelementptr inbounds i8, i8* %pix2, i64 %i52
  %gepload1124 = load i8, i8* %arrayIdx1123, align 1
  %i53 = add i64 %i2, 14
  %arrayIdx1125 = getelementptr inbounds i8, i8* %pix1, i64 %i53
  %gepload1126 = load i8, i8* %arrayIdx1125, align 1
  %i54 = add i64 %i4, 14
  %arrayIdx1127 = getelementptr inbounds i8, i8* %pix2, i64 %i54
  %gepload1128 = load i8, i8* %arrayIdx1127, align 1
  %i55 = add i64 %i2, 11
  %arrayIdx1129 = getelementptr inbounds i8, i8* %pix1, i64 %i55
  %gepload1130 = load i8, i8* %arrayIdx1129, align 1
  %i56 = add i64 %i4, 11
  %arrayIdx1131 = getelementptr inbounds i8, i8* %pix2, i64 %i56
  %gepload1132 = load i8, i8* %arrayIdx1131, align 1
  %i57 = add i64 %i2, 15
  %arrayIdx1133 = getelementptr inbounds i8, i8* %pix1, i64 %i57
  %gepload1134 = load i8, i8* %arrayIdx1133, align 1
  %i58 = add i64 %i4, 15
  %arrayIdx1135 = getelementptr inbounds i8, i8* %pix2, i64 %i58
  %gepload1136 = load i8, i8* %arrayIdx1135, align 1
  %arrayIdx1138 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1, i64 4
  %i59 = zext i8 %gepload1130 to i32
  %i60 = zext i8 %gepload1122 to i32
  %i61 = zext i8 %gepload1114 to i32
  %i62 = zext i8 %gepload1106 to i32
  %i63 = zext i8 %gepload1134 to i32
  %i64 = zext i8 %gepload1126 to i32
  %i65 = zext i8 %gepload1118 to i32
  %i66 = zext i8 %gepload1110 to i32
  %i67 = zext i8 %gepload1136 to i32
  %i68 = zext i8 %gepload1128 to i32
  %i69 = zext i8 %gepload1120 to i32
  %i70 = zext i8 %gepload1112 to i32
  %i71 = zext i8 %gepload1132 to i32
  %i72 = zext i8 %gepload1124 to i32
  %i73 = zext i8 %gepload1116 to i32
  %i74 = zext i8 %gepload1108 to i32
  %i75 = shl nsw i32 %i66, 16
  %i76 = shl nsw i32 %i70, 16
  %i77 = shl nsw i32 %i65, 16
  %i78 = shl nsw i32 %i69, 16
  %Chain_T829_3174 = sub nsw i32 %i77, %i78
  %Chain_T829_3173 = sub nsw i32 %Chain_T829_3174, %i73
  %Chain_T829_3176 = add nsw i32 %Chain_T829_3173, %i61
  %Chain_T829_3170 = sub nsw i32 %i75, %i76
  %Chain_T829_3168 = sub nsw i32 %Chain_T829_3170, %i74
  %Chain_T829_3169 = add nsw i32 %Chain_T829_3168, %i62
  %i79 = shl nsw i32 %i64, 16
  %i80 = shl nsw i32 %i68, 16
  %Chain_T829_3163 = sub nsw i32 %i79, %i80
  %Chain_T829_3165 = sub nsw i32 %Chain_T829_3163, %i72
  %Chain_T829_3166 = add nsw i32 %Chain_T829_3165, %i60
  %i81 = shl nsw i32 %i63, 16
  %i82 = shl nsw i32 %i67, 16
  %Chain_T829_ = sub nsw i32 %i81, %i82
  %Chain_T829_3160 = sub nsw i32 %Chain_T829_, %i71
  %Chain_T829_3161 = add nsw i32 %Chain_T829_3160, %i59
  %Bridge_T829_3162 = add nsw i32 %Chain_T829_3161, %Chain_T829_3166
  %Bridge_T829_3167 = add nsw i32 %Bridge_T829_3162, %Chain_T829_3169
  %Bridge_T829_3172 = add nsw i32 %Bridge_T829_3167, %Chain_T829_3176
  store i32 %Bridge_T829_3172, i32* %arrayIdx1138, align 4
  %arrayIdx1140 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1, i64 6
  %Bridge_T828_3142 = sub nsw i32 %Chain_T829_3169, %Chain_T829_3166
  %Bridge_T828_ = sub nsw i32 %Bridge_T828_3142, %Chain_T829_3161
  %Bridge_T828_3154 = add nsw i32 %Bridge_T828_, %Chain_T829_3176
  store i32 %Bridge_T828_3154, i32* %arrayIdx1140, align 4
  %arrayIdx1158 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1, i64 5
  %Bridge_T824_ = sub nsw i32 %Chain_T829_3166, %Chain_T829_3161
  %Bridge_T824_3121 = add nsw i32 %Bridge_T824_, %Chain_T829_3169
  %Bridge_T824_3126 = sub nsw i32 %Bridge_T824_3121, %Chain_T829_3176
  store i32 %Bridge_T824_3126, i32* %arrayIdx1158, align 4
  %arrayIdx1176 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1, i64 7
  %Bridge_T823_3087 = sub nsw i32 %Chain_T829_3161, %Chain_T829_3166
  %Bridge_T823_3096 = add nsw i32 %Bridge_T823_3087, %Chain_T829_3169
  %Bridge_T823_3101 = sub nsw i32 %Bridge_T823_3096, %Chain_T829_3176
  store i32 %Bridge_T823_3101, i32* %arrayIdx1176, align 4
  %i83 = add i64 %i2, %i
  %arrayIdx1193 = getelementptr inbounds i8, i8* %pix1, i64 %i83
  %gepload1194 = load i8, i8* %arrayIdx1193, align 1
  %i84 = add i64 %i4, %i3
  %arrayIdx1195 = getelementptr inbounds i8, i8* %pix2, i64 %i84
  %gepload1196 = load i8, i8* %arrayIdx1195, align 1
  %Bridge_T820_ = add nsw i64 4, %i83
  %arrayIdx1197 = getelementptr inbounds i8, i8* %pix1, i64 %Bridge_T820_
  %gepload1198 = load i8, i8* %arrayIdx1197, align 1
  %Bridge_T819_ = add nsw i64 4, %i84
  %arrayIdx1199 = getelementptr inbounds i8, i8* %pix2, i64 %Bridge_T819_
  %gepload1200 = load i8, i8* %arrayIdx1199, align 1
  %Bridge_T818_ = add nsw i64 1, %i83
  %arrayIdx1201 = getelementptr inbounds i8, i8* %pix1, i64 %Bridge_T818_
  %gepload1202 = load i8, i8* %arrayIdx1201, align 1
  %Bridge_T817_ = add nsw i64 1, %i84
  %arrayIdx1203 = getelementptr inbounds i8, i8* %pix2, i64 %Bridge_T817_
  %gepload1204 = load i8, i8* %arrayIdx1203, align 1
  %Bridge_T816_ = add nsw i64 5, %i83
  %arrayIdx1205 = getelementptr inbounds i8, i8* %pix1, i64 %Bridge_T816_
  %gepload1206 = load i8, i8* %arrayIdx1205, align 1
  %Bridge_T815_ = add nsw i64 5, %i84
  %arrayIdx1207 = getelementptr inbounds i8, i8* %pix2, i64 %Bridge_T815_
  %gepload1208 = load i8, i8* %arrayIdx1207, align 1
  %Bridge_T814_ = add nsw i64 2, %i83
  %arrayIdx1209 = getelementptr inbounds i8, i8* %pix1, i64 %Bridge_T814_
  %gepload1210 = load i8, i8* %arrayIdx1209, align 1
  %Bridge_T813_ = add nsw i64 2, %i84
  %arrayIdx1211 = getelementptr inbounds i8, i8* %pix2, i64 %Bridge_T813_
  %gepload1212 = load i8, i8* %arrayIdx1211, align 1
  %Bridge_T812_ = add nsw i64 6, %i83
  %arrayIdx1213 = getelementptr inbounds i8, i8* %pix1, i64 %Bridge_T812_
  %gepload1214 = load i8, i8* %arrayIdx1213, align 1
  %Bridge_T811_ = add nsw i64 6, %i84
  %arrayIdx1215 = getelementptr inbounds i8, i8* %pix2, i64 %Bridge_T811_
  %gepload1216 = load i8, i8* %arrayIdx1215, align 1
  %Bridge_T810_ = add nsw i64 3, %i83
  %arrayIdx1217 = getelementptr inbounds i8, i8* %pix1, i64 %Bridge_T810_
  %gepload1218 = load i8, i8* %arrayIdx1217, align 1
  %Bridge_T809_ = add nsw i64 3, %i84
  %arrayIdx1219 = getelementptr inbounds i8, i8* %pix2, i64 %Bridge_T809_
  %gepload1220 = load i8, i8* %arrayIdx1219, align 1
  %Bridge_T808_ = add nsw i64 7, %i83
  %arrayIdx1221 = getelementptr inbounds i8, i8* %pix1, i64 %Bridge_T808_
  %gepload1222 = load i8, i8* %arrayIdx1221, align 1
  %Bridge_T807_ = add nsw i64 7, %i84
  %arrayIdx1223 = getelementptr inbounds i8, i8* %pix2, i64 %Bridge_T807_
  %gepload1224 = load i8, i8* %arrayIdx1223, align 1
  %i85 = or i64 %i1, 1
  %arrayIdx1226 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i85, i64 0
  %i86 = zext i8 %gepload1218 to i32
  %i87 = zext i8 %gepload1210 to i32
  %i88 = zext i8 %gepload1202 to i32
  %i89 = zext i8 %gepload1194 to i32
  %i90 = zext i8 %gepload1222 to i32
  %i91 = zext i8 %gepload1214 to i32
  %i92 = zext i8 %gepload1206 to i32
  %i93 = zext i8 %gepload1198 to i32
  %i94 = zext i8 %gepload1224 to i32
  %i95 = zext i8 %gepload1216 to i32
  %i96 = zext i8 %gepload1208 to i32
  %i97 = zext i8 %gepload1200 to i32
  %i98 = zext i8 %gepload1220 to i32
  %i99 = zext i8 %gepload1212 to i32
  %i100 = zext i8 %gepload1204 to i32
  %i101 = zext i8 %gepload1196 to i32
  %i102 = shl nsw i32 %i93, 16
  %i103 = shl nsw i32 %i97, 16
  %i104 = shl nsw i32 %i92, 16
  %i105 = shl nsw i32 %i96, 16
  %Chain_T802_29342939 = sub nsw i32 %i105, %i104
  %Chain_T802_29352937 = sub nsw i32 %Chain_T802_29342939, %i88
  %Chain_T802_2936 = add nsw i32 %Chain_T802_29352937, %i100
  %Chain_T802_29272931 = sub nsw i32 %i103, %i102
  %Chain_T802_29252929 = sub nsw i32 %Chain_T802_29272931, %i89
  %Chain_T802_2928 = add nsw i32 %Chain_T802_29252929, %i101
  %i106 = shl nsw i32 %i91, 16
  %i107 = shl nsw i32 %i95, 16
  %Chain_T802_29172923 = sub nsw i32 %i107, %i106
  %Chain_T802_29192921 = sub nsw i32 %Chain_T802_29172923, %i87
  %Chain_T802_29182920 = add nsw i32 %Chain_T802_29192921, %i99
  %i108 = shl nsw i32 %i90, 16
  %i109 = shl nsw i32 %i94, 16
  %Chain_T802_29092915 = sub nsw i32 %i109, %i108
  %Chain_T802_29112913 = sub nsw i32 %Chain_T802_29092915, %i86
  %Chain_T802_29102912 = add nsw i32 %Chain_T802_29112913, %i98
  %Bridge_T802_29162940 = add nsw i32 %Chain_T802_29102912, %Chain_T802_29182920
  %Bridge_T802_29242941 = add nsw i32 %Bridge_T802_29162940, %Chain_T802_2928
  %Bridge_T802_2932 = sub nsw i32 %Bridge_T802_29242941, %Chain_T802_2936
  store i32 %Bridge_T802_2932, i32* %arrayIdx1226, align 4
  %arrayIdx1244 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i85, i64 2
  %Bridge_T801_2893 = sub nsw i32 %Bridge_T802_29162940, %Chain_T802_2928
  %Bridge_T801_2901 = sub nsw i32 %Bridge_T801_2893, %Chain_T802_2936
  store i32 %Bridge_T801_2901, i32* %arrayIdx1244, align 4
  %arrayIdx1262 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i85, i64 1
  %Bridge_T797_2968 = sub nsw i32 %Chain_T802_29102912, %Chain_T802_29182920
  %Bridge_T797_2976 = sub nsw i32 %Bridge_T797_2968, %Chain_T802_2928
  %Bridge_T797_2984 = add nsw i32 %Bridge_T797_2976, %Chain_T802_2936
  store i32 %Bridge_T797_2984, i32* %arrayIdx1262, align 4
  %arrayIdx1280 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i85, i64 3
  %Bridge_T796_ = sub nsw i32 %Chain_T802_29182920, %Chain_T802_29102912
  %Bridge_T796_2953 = sub nsw i32 %Bridge_T796_, %Chain_T802_2928
  %Bridge_T796_2961 = add nsw i32 %Bridge_T796_2953, %Chain_T802_2936
  store i32 %Bridge_T796_2961, i32* %arrayIdx1280, align 4
  %Bridge_T795_ = add nsw i64 8, %i83
  %arrayIdx1297 = getelementptr inbounds i8, i8* %pix1, i64 %Bridge_T795_
  %gepload1298 = load i8, i8* %arrayIdx1297, align 1
  %Bridge_T794_ = add nsw i64 8, %i84
  %arrayIdx1299 = getelementptr inbounds i8, i8* %pix2, i64 %Bridge_T794_
  %gepload1300 = load i8, i8* %arrayIdx1299, align 1
  %Bridge_T793_ = add nsw i64 12, %i83
  %arrayIdx1301 = getelementptr inbounds i8, i8* %pix1, i64 %Bridge_T793_
  %gepload1302 = load i8, i8* %arrayIdx1301, align 1
  %Bridge_T792_ = add nsw i64 12, %i84
  %arrayIdx1303 = getelementptr inbounds i8, i8* %pix2, i64 %Bridge_T792_
  %gepload1304 = load i8, i8* %arrayIdx1303, align 1
  %Bridge_T791_ = add nsw i64 9, %i83
  %arrayIdx1305 = getelementptr inbounds i8, i8* %pix1, i64 %Bridge_T791_
  %gepload1306 = load i8, i8* %arrayIdx1305, align 1
  %Bridge_T790_ = add nsw i64 9, %i84
  %arrayIdx1307 = getelementptr inbounds i8, i8* %pix2, i64 %Bridge_T790_
  %gepload1308 = load i8, i8* %arrayIdx1307, align 1
  %Bridge_T789_ = add nsw i64 13, %i83
  %arrayIdx1309 = getelementptr inbounds i8, i8* %pix1, i64 %Bridge_T789_
  %gepload1310 = load i8, i8* %arrayIdx1309, align 1
  %Bridge_T788_ = add nsw i64 13, %i84
  %arrayIdx1311 = getelementptr inbounds i8, i8* %pix2, i64 %Bridge_T788_
  %gepload1312 = load i8, i8* %arrayIdx1311, align 1
  %Bridge_T787_ = add nsw i64 10, %i83
  %arrayIdx1313 = getelementptr inbounds i8, i8* %pix1, i64 %Bridge_T787_
  %gepload1314 = load i8, i8* %arrayIdx1313, align 1
  %Bridge_T786_ = add nsw i64 10, %i84
  %arrayIdx1315 = getelementptr inbounds i8, i8* %pix2, i64 %Bridge_T786_
  %gepload1316 = load i8, i8* %arrayIdx1315, align 1
  %Bridge_T785_ = add nsw i64 14, %i83
  %arrayIdx1317 = getelementptr inbounds i8, i8* %pix1, i64 %Bridge_T785_
  %gepload1318 = load i8, i8* %arrayIdx1317, align 1
  %Bridge_T784_ = add nsw i64 14, %i84
  %arrayIdx1319 = getelementptr inbounds i8, i8* %pix2, i64 %Bridge_T784_
  %gepload1320 = load i8, i8* %arrayIdx1319, align 1
  %Bridge_T783_ = add nsw i64 11, %i83
  %arrayIdx1321 = getelementptr inbounds i8, i8* %pix1, i64 %Bridge_T783_
  %gepload1322 = load i8, i8* %arrayIdx1321, align 1
  %Bridge_T782_ = add nsw i64 11, %i84
  %arrayIdx1323 = getelementptr inbounds i8, i8* %pix2, i64 %Bridge_T782_
  %gepload1324 = load i8, i8* %arrayIdx1323, align 1
  %Bridge_T781_ = add nsw i64 15, %i83
  %arrayIdx1325 = getelementptr inbounds i8, i8* %pix1, i64 %Bridge_T781_
  %gepload1326 = load i8, i8* %arrayIdx1325, align 1
  %Bridge_T780_ = add nsw i64 15, %i84
  %arrayIdx1327 = getelementptr inbounds i8, i8* %pix2, i64 %Bridge_T780_
  %gepload1328 = load i8, i8* %arrayIdx1327, align 1
  %arrayIdx1330 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i85, i64 4
  %i110 = zext i8 %gepload1322 to i32
  %i111 = zext i8 %gepload1314 to i32
  %i112 = zext i8 %gepload1306 to i32
  %i113 = zext i8 %gepload1298 to i32
  %i114 = zext i8 %gepload1326 to i32
  %i115 = zext i8 %gepload1318 to i32
  %i116 = zext i8 %gepload1310 to i32
  %i117 = zext i8 %gepload1302 to i32
  %i118 = zext i8 %gepload1328 to i32
  %i119 = zext i8 %gepload1320 to i32
  %i120 = zext i8 %gepload1312 to i32
  %i121 = zext i8 %gepload1304 to i32
  %i122 = zext i8 %gepload1324 to i32
  %i123 = zext i8 %gepload1316 to i32
  %i124 = zext i8 %gepload1308 to i32
  %i125 = zext i8 %gepload1300 to i32
  %i126 = shl nsw i32 %i117, 16
  %i127 = shl nsw i32 %i121, 16
  %i128 = shl nsw i32 %i116, 16
  %i129 = shl nsw i32 %i120, 16
  %Chain_T775_2769 = sub nsw i32 %i128, %i129
  %Chain_T775_2768 = sub nsw i32 %Chain_T775_2769, %i124
  %Chain_T775_2771 = add nsw i32 %Chain_T775_2768, %i112
  %Chain_T775_2765 = sub nsw i32 %i126, %i127
  %Chain_T775_2763 = sub nsw i32 %Chain_T775_2765, %i125
  %Chain_T775_2764 = add nsw i32 %Chain_T775_2763, %i113
  %i130 = shl nsw i32 %i115, 16
  %i131 = shl nsw i32 %i119, 16
  %Chain_T775_2758 = sub nsw i32 %i130, %i131
  %Chain_T775_2760 = sub nsw i32 %Chain_T775_2758, %i123
  %Chain_T775_2761 = add nsw i32 %Chain_T775_2760, %i111
  %i132 = shl nsw i32 %i114, 16
  %i133 = shl nsw i32 %i118, 16
  %Chain_T775_ = sub nsw i32 %i132, %i133
  %Chain_T775_2755 = sub nsw i32 %Chain_T775_, %i122
  %Chain_T775_2756 = add nsw i32 %Chain_T775_2755, %i110
  %Bridge_T775_2757 = add nsw i32 %Chain_T775_2756, %Chain_T775_2761
  %Bridge_T775_2762 = add nsw i32 %Bridge_T775_2757, %Chain_T775_2764
  %Bridge_T775_2767 = add nsw i32 %Bridge_T775_2762, %Chain_T775_2771
  store i32 %Bridge_T775_2767, i32* %arrayIdx1330, align 4
  %arrayIdx1348 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i85, i64 6
  %Bridge_T774_2737 = sub nsw i32 %Chain_T775_2764, %Chain_T775_2761
  %Bridge_T774_ = sub nsw i32 %Bridge_T774_2737, %Chain_T775_2756
  %Bridge_T774_2749 = add nsw i32 %Bridge_T774_, %Chain_T775_2771
  store i32 %Bridge_T774_2749, i32* %arrayIdx1348, align 4
  %arrayIdx1366 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i85, i64 5
  %Bridge_T770_ = sub nsw i32 %Chain_T775_2761, %Chain_T775_2756
  %Bridge_T770_2716 = add nsw i32 %Bridge_T770_, %Chain_T775_2764
  %Bridge_T770_2721 = sub nsw i32 %Bridge_T770_2716, %Chain_T775_2771
  store i32 %Bridge_T770_2721, i32* %arrayIdx1366, align 4
  %arrayIdx1384 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i85, i64 7
  %Bridge_T769_2682 = sub nsw i32 %Chain_T775_2756, %Chain_T775_2761
  %Bridge_T769_2691 = add nsw i32 %Bridge_T769_2682, %Chain_T775_2764
  %Bridge_T769_2696 = sub nsw i32 %Bridge_T769_2691, %Chain_T775_2771
  store i32 %Bridge_T769_2696, i32* %arrayIdx1384, align 4
  %nextivloop.1452 = add nuw nsw i64 %i1.i64.0, 1
  %condloop.1452 = icmp ult i64 %nextivloop.1452, 8
  br i1 %condloop.1452, label %loop.1452, label %afterloop.1452

afterloop.1452:                                   ; preds = %loop.1452
  ret i32 0
}
