; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py UTC_ARGS: --version 3
; Test that the partial sums transformation is not performed for the min/max+index idiom.
; RUN: opt -passes="hir-ssa-deconstruction,hir-temp-cleanup,hir-vec-dir-insert,hir-vplan-vec" -enable-mmindex=1 -disable-nonlinear-mmindex=1 -vplan-force-vf=4 -vplan-force-uf=2 -vplan-enable-partial-sums=true -disable-output -vplan-print-after-unroll < %s 2>&1 | FileCheck %s

;int ordering[1000];
;int  maxloc (int m) {
;    int best = -111111111;
;    int tmp = 0;
;    int val = 0;
;    for (int i=0; i< m; i++) {
;        if (ordering[i] > best) {
;            best = ordering[i];
;            tmp = i;
;        }
;    }
;    return tmp + best+val;
;}
;
; Function Attrs: norecurse nounwind readonly uwtable
define dso_local i32 @maxloc(i32 %m, ptr nocapture readonly %ordering) local_unnamed_addr #0 {
;
; CHECK-LABEL:  VPlan after VPlan loop unrolling:
; CHECK-NEXT:  VPlan IR for: Initial VPlan for VF=4
; CHECK-NEXT:  External Defs Start:
; CHECK-DAG:     [[VP0:%.*]] = {%tmp.024}
; CHECK-DAG:     [[VP1:%.*]] = {%m + -1}
; CHECK-DAG:     [[VP2:%.*]] = {%ordering}
; CHECK-DAG:     [[VP3:%.*]] = {%best.023}
; CHECK-NEXT:  External Defs End:
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     [DA: Uni] i32 [[VP4:%.*]] = add i32 [[VP1]] i32 1
; CHECK-NEXT:     [DA: Uni] i32 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i32 [[VP4]], UF = 2
; CHECK-NEXT:     [DA: Div] i32 [[VP_MINMAX_RED_INIT:%.*]] = reduction-init i32 live-in1
; CHECK-NEXT:     [DA: Div] i32 [[VP_MONO_IDX_RED_INIT:%.*]] = reduction-init i32 live-in0
; CHECK-NEXT:     [DA: Div] i32 [[VP__IND_INIT:%.*]] = induction-init{add} i32 live-in2 i32 1
; CHECK-NEXT:     [DA: Uni] i32 [[VP__IND_INIT_STEP:%.*]] = induction-init-step{add} i32 1
; CHECK-NEXT:     [DA: Uni] br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], cloned.[[BB3:BB[0-9]+]]
; CHECK-NEXT:     [DA: Div] i32 [[VP5:%.*]] = phi  [ i32 [[VP_MONO_IDX_RED_INIT]], [[BB1]] ],  [ i32 [[VP6:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] i32 [[VP7:%.*]] = phi  [ i32 [[VP_MINMAX_RED_INIT]], [[BB1]] ],  [ i32 [[VP8:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] i32 [[VP9:%.*]] = phi  [ i32 [[VP__IND_INIT]], [[BB1]] ],  [ i32 [[VP10:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] i64 [[VP11:%.*]] = sext i32 [[VP9]] to i64
; CHECK-NEXT:     [DA: Div] ptr [[VP_SUBSCRIPT:%.*]] = subscript inbounds ptr [[ORDERING0:%.*]] i64 [[VP11]]
; CHECK-NEXT:     [DA: Div] i32 [[VP_LOAD:%.*]] = load ptr [[VP_SUBSCRIPT]]
; CHECK-NEXT:     [DA: Div] i1 [[VP12:%.*]] = icmp sgt i32 [[VP_LOAD]] i32 [[VP7]]
; CHECK-NEXT:     [DA: Div] i32 [[VP13:%.*]] = select i1 [[VP12]] i32 [[VP9]] i32 [[VP5]]
; CHECK-NEXT:     [DA: Div] i1 [[VP14:%.*]] = icmp sgt i32 [[VP_LOAD]] i32 [[VP7]]
; CHECK-NEXT:     [DA: Div] i32 [[VP15:%.*]] = select i1 [[VP14]] i32 [[VP_LOAD]] i32 [[VP7]]
; CHECK-NEXT:     [DA: Div] i32 [[VP16:%.*]] = add i32 [[VP9]] i32 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP17:%.*]] = icmp slt i32 [[VP16]] i32 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br cloned.[[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB3]]: # preds: [[BB2]]
; CHECK-NEXT:     [DA: Div] i64 [[VP18:%.*]] = sext i32 [[VP16]] to i64
; CHECK-NEXT:     [DA: Div] ptr [[VP19:%.*]] = subscript inbounds ptr [[ORDERING0]] i64 [[VP18]]
; CHECK-NEXT:     [DA: Div] i32 [[VP20:%.*]] = load ptr [[VP19]]
; CHECK-NEXT:     [DA: Div] i1 [[VP21:%.*]] = icmp sgt i32 [[VP20]] i32 [[VP15]]
; CHECK-NEXT:     [DA: Div] i32 [[VP6]] = select i1 [[VP21]] i32 [[VP16]] i32 [[VP13]]
; CHECK-NEXT:     [DA: Div] i1 [[VP22:%.*]] = icmp sgt i32 [[VP20]] i32 [[VP15]]
; CHECK-NEXT:     [DA: Div] i32 [[VP8]] = select i1 [[VP22]] i32 [[VP20]] i32 [[VP15]]
; CHECK-NEXT:     [DA: Div] i32 [[VP10]] = add i32 [[VP16]] i32 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP23:%.*]] = icmp slt i32 [[VP10]] i32 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP23]], [[BB2]], [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: cloned.[[BB3]]
; CHECK-NEXT:     [DA: Uni] i32 [[VP_MINMAX_RED_FINAL:%.*]] = reduction-final{u_smax} i32 [[VP8]]
; CHECK-NEXT:     [DA: Uni] i32 [[VP_MONO_IDX_RED_FINAL:%.*]] = reduction-final{s_smin} i32 [[VP6]] i32 [[VP8]] i32 [[VP_MINMAX_RED_FINAL]]
; CHECK-NEXT:     [DA: Uni] i32 [[VP__IND_FINAL:%.*]] = induction-final{add} i32 0 i32 1
; CHECK-NEXT:     [DA: Uni] br [[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]: # preds: [[BB4]]
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   i32 [[VP_MONO_IDX_RED_FINAL]] -> [[VP24:%.*]] = {%tmp.024}
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 1   i32 [[VP_MINMAX_RED_FINAL]] -> [[VP25:%.*]] = {%best.023}
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 2   no underlying for i32 [[VP__IND_FINAL]]
;
entry:
  %cmp22 = icmp sgt i32 %m, 0
  br i1 %cmp22, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
;  %wide.trip.count = sext i32 %m to i64
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %indvars.iv = phi i32 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %tmp.024 = phi i32 [ 0, %for.body.preheader ], [ %spec.select20, %for.body ]
  %best.023 = phi i32 [ -111111111, %for.body.preheader ], [ %spec.select, %for.body ]
  %arrayidx = getelementptr inbounds i32, ptr %ordering, i32 %indvars.iv
  %0 = load i32, ptr %arrayidx, align 4, !tbaa !2
  %cmp1 = icmp sgt i32 %0, %best.023
  %spec.select = select i1 %cmp1, i32 %0, i32 %best.023
  %spec.select20 = select i1 %cmp1, i32 %indvars.iv, i32 %tmp.024
  %indvars.iv.next = add nuw nsw i32 %indvars.iv, 1
  %exitcond = icmp eq i32 %indvars.iv.next, %m
  br i1 %exitcond, label %for.end.loopexit, label %for.body

for.end.loopexit:                                 ; preds = %for.body
  %spec.select.lcssa = phi i32 [ %spec.select, %for.body ]
  %spec.select20.lcssa = phi i32 [ %spec.select20, %for.body ]
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  %best.0.lcssa = phi i32 [ -111111111, %entry ], [ %spec.select.lcssa, %for.end.loopexit ]
  %tmp.0.lcssa = phi i32 [ 0, %entry ], [ %spec.select20.lcssa, %for.end.loopexit ]
  %add6 = add nsw i32 %tmp.0.lcssa, %best.0.lcssa
  ret i32 %add6
};
attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core-avx2" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+rdrnd,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt" "unsafe-fp-math"="false" "use-soft-float"="false" }

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"icx (ICX) dev.8.x.0"}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}

