; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; REQUIRES: asserts
; RUN: opt -S -mattr=+avx512vl,+avx512cd -passes="hir-ssa-deconstruction,hir-temp-cleanup,hir-vec-dir-insert,hir-vplan-vec" -vplan-force-vf=4 -disable-output -disable-vplan-codegen -debug-only=vplan-vec -debug-only=LoopVectorizationPlanner < %s 2>&1 | FileCheck %s

; Tree conflict should not be lowered to double permute tree reduction for all test cases

; CHECK: There is no VF found that all VConflict idioms in loop can be optimized for.
; not supported due to non-commutativity of operands

; for (int i=0; i<N; ++i) {
;   int index = B[i];
;   A[index] = i - A[index];
; }

; Function Attrs: nofree norecurse nosync nounwind uwtable
define dso_local void @foo1(float* noalias nocapture noundef %A, i32* nocapture noundef readonly %B, float* noalias nocapture readnone %C, i32 noundef %N) local_unnamed_addr #0 {
entry:
  %cmp12 = icmp sgt i32 %N, 0
  br i1 %cmp12, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count14 = zext i32 %N to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds i32, i32* %B, i64 %indvars.iv
  %0 = load i32, i32* %arrayidx, align 4
  %1 = trunc i64 %indvars.iv to i32
  %conv = sitofp i32 %1 to float
  %idxprom1 = sext i32 %0 to i64
  %arrayidx2 = getelementptr inbounds float, float* %A, i64 %idxprom1
  %2 = load float, float* %arrayidx2, align 4
  %sub = fsub fast float %conv, %2
  store float %sub, float* %arrayidx2, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count14
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}

; CHECK: There is no VF found that all VConflict idioms in loop can be optimized for.
; not supported because fast flag is not present

; Function Attrs: nofree norecurse nosync nounwind uwtable
define dso_local void @foo2(float* noalias nocapture noundef %A, i32* nocapture noundef readonly %B, float* noalias nocapture noundef readonly %C, i32 noundef %N) local_unnamed_addr #0 {
;
; float A[N], C[N];
; int B[N]; // conflict idx
; for (int i=0; i<N; ++i) {
;   int index = B[i];
;   A[index] = A[index] + C[i];
; }
entry:
  %cmp14 = icmp sgt i32 %N, 0
  br i1 %cmp14, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count16 = zext i32 %N to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds i32, i32* %B, i64 %indvars.iv
  %0 = load i32, i32* %arrayidx, align 8
  %idxprom1 = sext i32 %0 to i64
  %arrayidx2 = getelementptr inbounds float, float* %A, i64 %idxprom1
  %1 = load float, float* %arrayidx2, align 4
  %arrayidx4 = getelementptr inbounds float, float* %C, i64 %indvars.iv
  %2 = load float, float* %arrayidx4, align 4
  %add = fadd float %2, %1
  store float %add, float* %arrayidx2, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count16
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}

; CHECK: There is no VF found that all VConflict idioms in loop can be optimized for.
; short types not supported yet

; Function Attrs: nofree norecurse nosync nounwind uwtable
define dso_local void @foo3(i16* noalias nocapture noundef %A, i16* nocapture noundef readonly %B, i16* noalias nocapture noundef readonly %C, i32 noundef %N) local_unnamed_addr #0 {
;
; short A[N], C[N];
; short B[N]; // conflict idx
; for (int i=0; i<N; ++i) {
;   int index = B[i];
;   A[index] = A[index] + C[i];
; }
entry:
  %cmp14 = icmp sgt i32 %N, 0
  br i1 %cmp14, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count16 = zext i32 %N to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds i16, i16* %B, i64 %indvars.iv
  %0 = load i16, i16* %arrayidx, align 8
  %idxprom1 = sext i16 %0 to i64
  %arrayidx2 = getelementptr inbounds i16, i16* %A, i64 %idxprom1
  %1 = load i16, i16* %arrayidx2, align 4
  %arrayidx4 = getelementptr inbounds i16, i16* %C, i64 %indvars.iv
  %2 = load i16, i16* %arrayidx4, align 4
  %add = add i16 %2, %1
  store i16 %add, i16* %arrayidx2, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count16
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}

; CHECK: There is no VF found that all VConflict idioms in loop can be optimized for.
; char types not supported yet

; Function Attrs: nofree norecurse nosync nounwind uwtable
define dso_local void @foo4(i8* noalias nocapture noundef %A, i8* nocapture noundef readonly %B, i8* noalias nocapture noundef readonly %C, i32 noundef %N) local_unnamed_addr #0 {
;
; char A[N], C[N];
; char B[N]; // conflict idx
; for (int i=0; i<N; ++i) {
;   int index = B[i];
;   A[index] = A[index] + C[i];
; }
entry:
  %cmp14 = icmp sgt i32 %N, 0
  br i1 %cmp14, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count16 = zext i32 %N to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds i8, i8* %B, i64 %indvars.iv
  %0 = load i8, i8* %arrayidx, align 8
  %idxprom1 = sext i8 %0 to i64
  %arrayidx2 = getelementptr inbounds i8, i8* %A, i64 %idxprom1
  %1 = load i8, i8* %arrayidx2, align 4
  %arrayidx4 = getelementptr inbounds i8, i8* %C, i64 %indvars.iv
  %2 = load i8, i8* %arrayidx4, align 4
  %add = add i8 %2, %1
  store i8 %add, i8* %arrayidx2, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count16
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}

attributes #0 = { nofree norecurse nosync nounwind uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "frame-pointer"="none" "loopopt-pipeline"="light" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "pre_loopopt" "stack-protector-buffer-size"="8" "target-cpu"="skylake-avx512" "target-features"="+adx,+aes,+avx,+avx2,+avx512bw,+avx512cd,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+clflushopt,+clwb,+crc32,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+pku,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves" "unsafe-fp-math"="true" }
