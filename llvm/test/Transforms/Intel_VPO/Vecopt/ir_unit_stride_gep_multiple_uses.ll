; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; Test to verify codegen implementation to correctly handle unit-stride GEPs with multiple uses.
; If a unit-stride GEP is used as a value in non memory pointer context, then we generate a
; vector GEP. This vector GEP is then reused to compute scalar address needed for places where
; the unit-stride GEP is used in memory pointer context.

; RUN: opt -opaque-pointers=0 -passes=vplan-vec -vplan-force-vf=4 < %s -S | FileCheck %s

define i32 @multiple_uses(i32* %src, i32** %dest) {
; CHECK-LABEL: @multiple_uses(
; CHECK:       vector.body:
; CHECK-NEXT:    [[UNI_PHI:%.*]] = phi i64 [ 0, [[VECTOR_PH:%.*]] ], [ [[TMP3:%.*]], [[VECTOR_BODY:%.*]] ]
; CHECK-NEXT:    [[VEC_PHI:%.*]] = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, [[VECTOR_PH]] ], [ [[TMP2:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[VEC_PHI_EXTRACT_3_:%.*]] = extractelement <4 x i64> [[VEC_PHI]], i32 3
; CHECK-NEXT:    [[SCALAR_GEP:%.*]] = getelementptr inbounds i32, i32* [[SRC:%.*]], i64 [[UNI_PHI]]
; CHECK-NEXT:    [[SCALAR_GEP1:%.*]] = getelementptr inbounds i32, i32* [[SRC]], i64 [[VEC_PHI_EXTRACT_3_]]
; CHECK-NEXT:    [[MM_VECTOR_GEP:%.*]] = getelementptr inbounds i32, i32* [[SRC]], <4 x i64> [[VEC_PHI]]
; CHECK-NEXT:    store i32* [[SCALAR_GEP1]], i32** [[DEST:%.*]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = bitcast i32* [[SCALAR_GEP]] to <4 x i32>*
; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <4 x i32>, <4 x i32>* [[TMP0]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = add <4 x i32> [[WIDE_LOAD]], <i32 42, i32 42, i32 42, i32 42>
; CHECK-NEXT:    [[TMP2]] = add nuw nsw <4 x i64> [[VEC_PHI]], <i64 4, i64 4, i64 4, i64 4>
; CHECK-NEXT:    [[TMP3]] = add nuw nsw i64 [[UNI_PHI]], 4
; CHECK-NEXT:    [[TMP4:%.*]] = icmp ult i64 [[TMP3]], 1024
; CHECK-NEXT:    br i1 [[TMP4]], label [[VECTOR_BODY]], label [[VPLANNEDBB:%.*]]
;
entry:
  %entry.region = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.inner.for.body, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %omp.inner.for.body ]
  %arrayidx = getelementptr inbounds i32, i32* %src, i64 %indvars.iv
  ; Use unit-stride GEP as a value.
  store i32* %arrayidx, i32** %dest, align 8
  ; Use unit-stride GEP as pointer operand for memory operation.
  %unit.stride.load = load i32, i32* %arrayidx, align 8
  %use = add i32 %unit.stride.load, 42
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 1024
  br i1 %exitcond, label %omp.inner.for.body, label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.inner.for.body
  %use.lcssa = phi i32 [ %use, %omp.inner.for.body ]
  call void @llvm.directive.region.exit(token %entry.region) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.QUAL.LIST.END.1

DIR.QUAL.LIST.END.1:                              ; preds = %omp.loop.exit
  ret i32 %use.lcssa
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #0

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #0
