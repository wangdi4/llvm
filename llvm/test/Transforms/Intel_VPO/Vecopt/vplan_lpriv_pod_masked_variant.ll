; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -vplan-vec -S -vplan-vec-scenario="n1;v16;m16" -vplan-print-after-vpentity-instrs -vplan-print-after-create-masked-vplan -vplan-enable-masked-variant -vplan-print-after-final-cond-transform < %s 2>&1 | FileCheck %s
; RUN: opt -passes="vplan-vec" -S -vplan-vec-scenario="n1;v16;m16" -vplan-print-after-vpentity-instrs -vplan-print-after-create-masked-vplan -vplan-enable-masked-variant -vplan-print-after-final-cond-transform < %s  2>&1 | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"
define i32 @main() {
; CHECK-LABEL:  VPlan after insertion of VPEntities instructions:
; CHECK:          i32* [[VP_XP:%.*]] = allocate-priv i32*, OrigAlign = 4
;
; CHECK:          i32 [[VP_IV:%.*]] = phi  [ i32 [[VP_IV_IND_INIT:%.*]], [[BB1:BB[0-9]+]] ],  [ i32 [[VP_IV_NEXT:%.*]], [[BB3:BB[0-9]+]] ]
; CHECK-NEXT:     i32 [[VP_IV_NEXT]] = add i32 [[VP_IV]] i32 [[VP_IV_IND_INIT_STEP:%.*]]
;
; CHECK:          i32 [[VP_X:%.*]] = add i32 [[VP_IV]] i32 1
;
; CHECK:          i32 [[VP_IV_IND_FINAL:%.*]] = induction-final{add} i32 0 i32 1
; CHECK-NEXT:     i32 [[VP_X_PRIV_FINAL:%.*]] = private-final-uc i32 [[VP_X]]
; CHECK-NEXT:     store i32 [[VP_X_PRIV_FINAL]] i32* [[XP0:%.*]]
; CHECK-NEXT:     br [[BB5:BB[0-9]+]]
;
; CHECK:       VPlan after emitting masked variant:
; CHECK-NEXT:  VPlan IR for: main:header.#{{[0-9]+}}.cloned.masked
; CHECK-NEXT:    [[BB6:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] br [[BB7:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB7]]: # preds: [[BB6]]
; CHECK-NEXT:     [DA: Div] i32* [[VP0:%.*]] = allocate-priv i32*, OrigAlign = 4
; CHECK-NEXT:     [DA: Div] i32 [[VP1:%.*]] = induction-init{add} i32 live-in1 i32 1
; CHECK-NEXT:     [DA: Uni] i32 [[VP2:%.*]] = induction-init-step{add} i32 1
; CHECK-NEXT:     [DA: Uni] br [[BB8:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB8]]: # preds: [[BB7]], new_latch
; CHECK-NEXT:     [DA: Div] i32 [[VP_IV_1:%.*]] = phi  [ i32 [[VP1]], [[BB7]] ],  [ i32 [[VP_IV_NEXT_1:%.*]], new_latch ]
; CHECK-NEXT:     [DA: Div] i1 [[VP3:%.*]] = icmp ult i32 [[VP_IV_1]] i32 128
; CHECK-NEXT:     [DA: Div] br i1 [[VP3]], [[BB9:BB[0-9]+]], new_latch
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB9]]: # preds: [[BB8]]
; CHECK-NEXT:       [DA: Uni] br [[BB10:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB10]]: # preds: [[BB9]]
; CHECK:          [DA: Div] i32 [[VP_X_1:%.*]] = add i32 [[VP_IV_1]] i32 1
; CHECK-NEXT:       [DA: Uni] br new_latch
; CHECK:         new_latch:
; CHECK-NEXT:     [DA: Div] i32 [[VP4:%.*]] = phi  [ i32 [[VP_X_1]], [[BB10]] ],  [ i32 live-in0, [[BB8]] ]
; CHECK-NEXT:     [DA: Div] i32 [[VP_IV_NEXT_1]] = add i32 [[VP_IV_1]] i32 [[VP2]]
; CHECK-NEXT:     [DA: Div] i1 [[VP5:%.*]] = icmp ult i32 [[VP_IV_NEXT_1]] i32 128
; CHECK-NEXT:     [DA: Uni] i1 [[VP6:%.*]] = all-zero-check i1 [[VP5]]
;
; CHECK:          [DA: Uni] i32 [[VP7:%.*]] = induction-final{add} i32 0 i32 1
; CHECK-NEXT:     [DA: Uni] i32 [[VP8:%.*]] = private-final-masked i32 [[VP4]] i1 [[VP3]] i32 live-in0
; CHECK-NEXT:     [DA: Uni] store i32 [[VP8]] i32* [[XP0]]
; CHECK-NEXT:     [DA: Uni] br [[BB12:BB[0-9]+]]
; CHECK:       External Uses:
; CHECK-NEXT:  Id: 0     [[X_LCSSA0:.*]] = phi i32 [ [[X0:.*]], [[LATCH0:.*]] ] i32 [[VP8]] -> i32 [[X0]]
;
; CHECK-LABEL: VPlan after private finalization instructions transformation:
; CHECK:           new_latch:
; CHECK-NEXT:       [DA: Div] i32 [[VP__BLEND_BB310:%.*]] = blend [ i32 [[VP10:%.*]], i1 true ], [ i32 [[VP_X_1:%.*]], i1 [[VP3:%.*]] ]
; CHECK-NEXT:       [DA: Div] i32 [[VP_IV_NEXT_1]] = add i32 [[VP_IV_1]] i32 [[VP2]]
; CHECK-NEXT:       [DA: Div] i1 [[VP5]] = icmp ult i32 [[VP_IV_NEXT_1]] i32 128
; CHECK-NEXT:       [DA: Uni] i1 [[VP6]] = all-zero-check i1 [[VP5]]
; CHECK:            [DA: Uni] i32 [[VP7]] = induction-final{add} i32 0 i32 1
; CHECK-NEXT:       [DA: Uni] i1 [[VP14:%.*]] = all-zero-check i1 [[VP3]]
; CHECK-NEXT:       [DA: Uni] br i1 [[VP14]], [[BB14:BB[0-9]+]], [[BB15:BB[0-9]+]]
;
; CHECK:             [[BB15]]: # preds: [[BB11:BB[0-9]+]]
; CHECK-NEXT:         [DA: Uni] i32 [[VP8]] = private-final-masked i32 [[VP__BLEND_BB310]] i1 [[VP3]] i32 [[VP10]]
; CHECK-NEXT:         [DA: Uni] br [[BB14]]
;
; CHECK:           [[BB14]]: # preds: [[BB15]], [[BB11]]
; CHECK-NEXT:       [DA: Uni] i32 [[VP15:%.*]] = phi  [ i32 [[VP10]], [[BB11]] ],  [ i32 [[VP8]], [[BB15]] ]
; CHECK-NEXT:       [DA: Uni] store i32 [[VP15]] i32* [[XP0]]
; CHECK-NEXT:       [DA: Uni] br [[BB12]]
;
;========= generated code
; CHECK:  define i32 @main() {
; CHECK:       VPlannedBB17:
; CHECK-NEXT:    [[TMP12:%.*]] = bitcast <16 x i1> [[TMP5:%.*]] to i16
; CHECK-NEXT:    [[TMP13:%.*]] = icmp eq i16 [[TMP12]], 0
; CHECK-NEXT:    br i1 [[TMP13]], label [[VPLANNEDBB180:%.*]], label [[VPLANNEDBB190:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB19:
; CHECK-NEXT:    [[TMP14:%.*]] = bitcast <16 x i1> [[TMP5]] to i16
; CHECK-NEXT:    [[CTLZ0:%.*]] = call i16 @llvm.ctlz.i16(i16 [[TMP14]], i1 true)
; CHECK-NEXT:    [[TMP15:%.*]] = sub i16 15, [[CTLZ0]]
; CHECK-NEXT:    [[PRIV_EXTRACT0:%.*]] = extractelement <16 x i32> [[PREDBLEND0:%.*]], i16 [[TMP15]]
; CHECK-NEXT:    br label [[VPLANNEDBB180]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB18:
; CHECK-NEXT:    [[UNI_PHI200:%.*]] = phi i32 [ [[UNI_PHI80:%.*]], [[VPLANNEDBB170:%.*]] ], [ [[PRIV_EXTRACT0]], [[VPLANNEDBB190]] ]
; CHECK-NEXT:    store i32 [[UNI_PHI200]], i32* [[XP0]], align 1
;
entry:
  %xp = alloca i32, align 4
  br label %preheader

preheader:
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.LASTPRIVATE"(i32* %xp)]
  br label %header
header:
  %iv = phi i32 [ 0, %preheader ], [ %iv.next, %latch ]
  %iv.next = add nsw i32 %iv, 1
  br label %latch

latch:
  %x = add nsw i32 %iv, 1
  %bottom_test = icmp eq i32 %iv.next, 128
  br i1 %bottom_test, label %loopexit, label %header

loopexit:
  %x.lcssa = phi i32 [%x, %latch]
  store i32 %x.lcssa, i32* %xp
  br label %endloop

endloop:
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %exit

exit:
  ret i32 %x.lcssa
}

declare token @llvm.directive.region.entry() nounwind
declare void @llvm.directive.region.exit(token) nounwind
