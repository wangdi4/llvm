; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; In the following lit test, the inner loop is uniform and all the side exits
; are uniform.

; RUN: opt -VPlanDriver -disable-output -vplan-print-after-simplify-cfg %s 2>&1 | FileCheck %s
; RUN: opt -passes="vplan-driver" -disable-output -vplan-print-after-simplify-cfg %s 2>&1 | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: norecurse nounwind uwtable
define dso_local i32 @main() #0 {
; CHECK-LABEL:  Print after simplify plain CFG
; CHECK-NEXT:    REGION: [[REGION0:region[0-9]+]]
; CHECK-NEXT:    [[BB0:BB[0-9]+]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB1:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB2:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]:
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_PHI_OUTER_LOOP_INDUCTION:%.*]] = phi  [ i32 0, [[BB1]] ],  [ i32 [[VP_OUTER_LOOP_INDUCTION:%.*]], [[BB3:BB[0-9]+]] ]
; CHECK-NEXT:    SUCCESSORS(1):[[BB4:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB3]] [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB5:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]:
; CHECK-NEXT:     [DA: Uniform]   i32 [[VP_PHI_INNER_LOOP_INDUCTION:%.*]] = phi  [ i32 0, [[BB4]] ],  [ i32 [[VP_INNER_LOOP_INDUCTION_SSA_PHI:%.*]], [[NEW_LOOP_LATCH0:new.loop.latch[0-9]+]] ]
; CHECK-NEXT:     [DA: Uniform]   i32 [[VP_INC1:%.*]] = add i32 [[VP_PHI_INNER_LOOP_INDUCTION]] i32 1
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_CMP1:%.*]] = icmp i32 [[VP_INC1]] i32 16
; CHECK-NEXT:    SUCCESSORS(2):[[BB6:BB[0-9]+]](i1 [[VP_CMP1]]), [[INTERMEDIATE_BB0:intermediate.bb[0-9]+]](!i1 [[VP_CMP1]])
; CHECK-NEXT:    PREDECESSORS(2): [[NEW_LOOP_LATCH0]] [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[INTERMEDIATE_BB0]]:
; CHECK-NEXT:       [DA: Uniform]   i32 [[VP_LIVE_OUT1_PHI:%.*]] = phi  [ i32 [[VP_INC1]], [[BB5]] ]
; CHECK-NEXT:      SUCCESSORS(1):[[NEW_LOOP_LATCH0]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB6]]:
; CHECK-NEXT:       [DA: Uniform]   i32 [[VP_INC2:%.*]] = add i32 [[VP_PHI_INNER_LOOP_INDUCTION]] i32 2
; CHECK-NEXT:       [DA: Uniform]   i1 [[VP_CMP2:%.*]] = icmp i32 [[VP_INC2]] i32 32
; CHECK-NEXT:      SUCCESSORS(2):[[BB7:BB[0-9]+]](i1 [[VP_CMP2]]), [[INTERMEDIATE_BB1:intermediate.bb[0-9]+]](!i1 [[VP_CMP2]])
; CHECK-NEXT:      PREDECESSORS(1): [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[INTERMEDIATE_BB1]]:
; CHECK-NEXT:         [DA: Uniform]   i32 [[VP_LIVE_OUT2_PHI:%.*]] = phi  [ i32 [[VP_INC2]], [[BB6]] ]
; CHECK-NEXT:        SUCCESSORS(1):[[NEW_LOOP_LATCH0]]
; CHECK-NEXT:        PREDECESSORS(1): [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB7]]:
; CHECK-NEXT:       [DA: Uniform]   i32 [[VP_INNER_LOOP_INDUCTION:%.*]] = add i32 [[VP_PHI_INNER_LOOP_INDUCTION]] i32 4
; CHECK-NEXT:       [DA: Uniform]   i1 [[VP_INNER_LOOP_BOTTOM_TEST:%.*]] = icmp i32 [[VP_INNER_LOOP_INDUCTION]] i32 1024
; CHECK-NEXT:      SUCCESSORS(1):[[NEW_LOOP_LATCH0]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[NEW_LOOP_LATCH0]]:
; CHECK-NEXT:     [DA: Uniform]   i32 [[VP_LIVE_OUT2_PHI_SSA_PHI:%.*]] = phi  [ i32 undef, [[BB7]] ],  [ i32 undef, [[INTERMEDIATE_BB0]] ],  [ i32 [[VP_LIVE_OUT2_PHI]], [[INTERMEDIATE_BB1]] ]
; CHECK-NEXT:     [DA: Uniform]   i32 [[VP_LIVE_OUT1_PHI_SSA_PHI:%.*]] = phi  [ i32 undef, [[BB7]] ],  [ i32 [[VP_LIVE_OUT1_PHI]], [[INTERMEDIATE_BB0]] ],  [ i32 undef, [[INTERMEDIATE_BB1]] ]
; CHECK-NEXT:     [DA: Uniform]   i32 [[VP_INNER_LOOP_INDUCTION_SSA_PHI]] = phi  [ i32 [[VP_INNER_LOOP_INDUCTION]], [[BB7]] ],  [ i32 undef, [[INTERMEDIATE_BB0]] ],  [ i32 undef, [[INTERMEDIATE_BB1]] ]
; CHECK-NEXT:     [DA: Uniform]   i32 [[VP_EXIT_ID_PHI:%.*]] = phi  [ i32 0, [[BB7]] ],  [ i32 1, [[INTERMEDIATE_BB0]] ],  [ i32 2, [[INTERMEDIATE_BB1]] ]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_TAKE_BACKEDGE_COND:%.*]] = phi  [ i1 [[VP_INNER_LOOP_BOTTOM_TEST]], [[BB7]] ],  [ i1 false, [[INTERMEDIATE_BB0]] ],  [ i1 false, [[INTERMEDIATE_BB1]] ]
; CHECK-NEXT:    SUCCESSORS(2):[[BB5]](i1 [[VP_TAKE_BACKEDGE_COND]]), [[CASCADED_IF_BLOCK0:cascaded.if.block[0-9]+]](!i1 [[VP_TAKE_BACKEDGE_COND]])
; CHECK-NEXT:    PREDECESSORS(3): [[BB7]] [[INTERMEDIATE_BB0]] [[INTERMEDIATE_BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[CASCADED_IF_BLOCK0]]:
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP0:%.*]] = icmp i32 [[VP_EXIT_ID_PHI]] i32 1
; CHECK-NEXT:    SUCCESSORS(1):[[BB8:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[NEW_LOOP_LATCH0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB8]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:     Condition([[CASCADED_IF_BLOCK0]]): [DA: Uniform]   i1 [[VP0]] = icmp i32 [[VP_EXIT_ID_PHI]] i32 1
; CHECK-NEXT:    SUCCESSORS(2):[[BB9:BB[0-9]+]](i1 [[VP0]]), [[CASCADED_IF_BLOCK1:cascaded.if.block[0-9]+]](!i1 [[VP0]])
; CHECK-NEXT:    PREDECESSORS(1): [[CASCADED_IF_BLOCK0]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[CASCADED_IF_BLOCK1]]:
; CHECK-NEXT:       [DA: Uniform]   i1 [[VP1:%.*]] = icmp i32 [[VP_EXIT_ID_PHI]] i32 2
; CHECK-NEXT:      SUCCESSORS(2):[[BB10:BB[0-9]+]](i1 [[VP1]]), [[BB11:BB[0-9]+]](!i1 [[VP1]])
; CHECK-NEXT:      PREDECESSORS(1): [[BB8]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB11]]:
; CHECK-NEXT:         <Empty Block>
; CHECK-NEXT:        SUCCESSORS(1):[[BB3]]
; CHECK-NEXT:        PREDECESSORS(1): [[CASCADED_IF_BLOCK1]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB10]]:
; CHECK-NEXT:         [DA: Uniform]   i32 [[VP_LIVE_OUT2:%.*]] = add i32 [[VP_LIVE_OUT2_PHI_SSA_PHI]] i32 1
; CHECK-NEXT:        SUCCESSORS(1):[[BB12:BB[0-9]+]]
; CHECK-NEXT:        PREDECESSORS(1): [[CASCADED_IF_BLOCK1]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB9]]:
; CHECK-NEXT:         [DA: Uniform]   i32 [[VP_LIVE_OUT1:%.*]] = add i32 [[VP_LIVE_OUT1_PHI_SSA_PHI]] i32 1
; CHECK-NEXT:        SUCCESSORS(1):[[BB12]]
; CHECK-NEXT:        PREDECESSORS(1): [[BB8]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB12]]:
; CHECK-NEXT:       <Empty Block>
; CHECK-NEXT:      SUCCESSORS(1):[[BB3]]
; CHECK-NEXT:      PREDECESSORS(2): [[BB10]] [[BB9]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]:
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_OUTER_LOOP_INDUCTION]] = add i32 [[VP_PHI_OUTER_LOOP_INDUCTION]] i32 1
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_OUTER_LOOP_BOTTOM_TEST:%.*]] = icmp i32 [[VP_OUTER_LOOP_INDUCTION]] i32 1024
; CHECK-NEXT:    SUCCESSORS(2):[[BB2]](i1 [[VP_OUTER_LOOP_BOTTOM_TEST]]), [[BB13:BB[0-9]+]](!i1 [[VP_OUTER_LOOP_BOTTOM_TEST]])
; CHECK-NEXT:    PREDECESSORS(2): [[BB11]] [[BB12]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB13]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB14:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB14]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB13]]
; CHECK-EMPTY:
; CHECK-NEXT:    END Region([[REGION0]])
;
entry:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %outer.loop
;-------------------------------------------------------------------------------
;           BEFORE                                      AFTER
;-------------------------------------------------------------------------------
; +------>outer.loop                     +---------->outer.loop(BB2)
; |           |                          |               |
; |  +--->inner.loop(U)--------+         |              BB4(added by
; |  |       /                 |         |               |  simplifyPlainCFG())
; |  |   bb1(U)--------------+ exit.bb1  | +-------->inner.loop(BB5)
; |  |     |                 |       |   | |            /       \
; |  +--inner.loop.latch(U) exit.bb2 |   | |      bb1(BB6)  INTERMEDIATE_BB0
; |           |              |       |   | |         /  \                 |
; |        exit.bb3         bb2<-----+   | | inner.loop. INTERMEDIATE_BB1 |
; |            \            /            | | latch(BB7)        |          |
; +-----------outer.loop.latch           | |        \          |          |
;                     |                  | +---------NEW_LOOP_LATCH0<-----+
;                                        |                |
;                                        |        CASCADED_IF_BLOCK0
;                                        |                 |
;                                        |                BB8(added by
;                                        |                 | simplifyPlainCFG())
;                                        |                / \
;                                        |    exit.bb1(BB9) CASCADED_IF_BLOCK1
;                                        |        \                 /  \
;                                        |         \   exit.bb2(BB10) exit.bb3
;                                        |          \   /         /    (BB11)
;                                        |          bb2(BB12)    /
;                                        |            \         /
;                                        +-------outer.loop.latch(BB3)
;                                                           |
outer.loop:
  %phi.outer.loop.induction = phi i32 [ 0, %entry ], [ %outer.loop.induction, %outer.loop.latch ]
  br label %inner.loop

inner.loop:
  %phi.inner.loop.induction = phi i32 [ 0, %outer.loop ], [ %inner.loop.induction, %inner.loop.latch ]
  %inc1 = add nsw i32 %phi.inner.loop.induction, 1
  %cmp1 = icmp eq i32 %inc1, 16
  br i1 %cmp1, label %bb1, label %exit.bb1

bb1:
  %inc2 = add nsw i32 %phi.inner.loop.induction, 2
  %cmp2 = icmp eq i32 %inc2, 32
  br i1 %cmp2, label %inner.loop.latch, label %exit.bb2

inner.loop.latch:
  %inner.loop.induction = add nsw i32 %phi.inner.loop.induction, 4
  %inner.loop.bottom.test = icmp eq i32 %inner.loop.induction, 1024
  br i1 %inner.loop.bottom.test, label %inner.loop, label %exit.bb3

exit.bb1:
  %live.out1.phi = phi i32 [ %inc1, %inner.loop ]
  %live.out1 = add nsw i32 %live.out1.phi, 1
  br label %bb2

exit.bb2:
  %live.out2.phi = phi i32 [ %inc2, %bb1 ]
  %live.out2 = add nsw i32 %live.out2.phi, 1
  br label %bb2

bb2:
  br label %outer.loop.latch

exit.bb3:
  br label %outer.loop.latch

outer.loop.latch:
  %outer.loop.induction = add nsw i32 %phi.outer.loop.induction, 1
  %outer.loop.bottom.test = icmp eq i32 %outer.loop.induction, 1024
  br i1 %outer.loop.bottom.test, label %outer.loop, label %outer.loop.exit

outer.loop.exit:
  br label %end

end:
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"()]
  ret i32 0
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 4.0.0 (branches/vpo 21280)"}
!1 = !{!2, !2, i64 0}
!2 = !{!"float", !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
