; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -S -VPlanDriver -vplan-force-vf=2 -vplan-print-after-init < %s -disable-output | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define void @main() {
; CHECK-LABEL:  VPlan after initial VPlan for VF=2:
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     [DA: Div] i32 [[VP_ADD_PHI_RED_INIT:%.*]] = reduction-init i32 0 i32 live-in0
; CHECK-NEXT:     [DA: Div] i32 [[VP_IV_IND_INIT:%.*]] = induction-init{add} i32 live-in1 i32 1
; CHECK-NEXT:     [DA: Uni] i32 [[VP_IV_IND_INIT_STEP:%.*]] = induction-init-step{add} i32 1
; CHECK-NEXT:     [DA: Uni] i32 [[VP_VF:%.*]] = induction-init-step{add} i32 1
; CHECK-NEXT:     [DA: Uni] i32 [[VP_ORIG_TRIP_COUNT:%.*]] = orig-trip-count for original loop header
; CHECK-NEXT:     [DA: Uni] i32 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i32 [[VP_ORIG_TRIP_COUNT]], UF = 1
; CHECK-NEXT:     [DA: Uni] br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], [[BB3:BB[0-9]+]]
; CHECK-NEXT:     [DA: Uni] i32 [[VP_VECTOR_LOOP_IV:%.*]] = phi  [ i32 0, [[BB1]] ],  [ i32 [[VP_VECTOR_LOOP_IV_NEXT:%.*]], [[BB3]] ]
; CHECK-NEXT:     [DA: Div] i32 [[VP_IV:%.*]] = phi  [ i32 [[VP_IV_IND_INIT]], [[BB1]] ],  [ i32 [[VP_IV_NEXT:%.*]], [[BB3]] ]
; CHECK-NEXT:     [DA: Div] i32 [[VP_ADD_PHI:%.*]] = phi  [ i32 [[VP_ADD_PHI_RED_INIT]], [[BB1]] ],  [ i32 [[VP_ADD:%.*]], [[BB3]] ]
; CHECK-NEXT:     [DA: Div] i32 [[VP_IV_NEXT]] = add i32 [[VP_IV]] i32 [[VP_IV_IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Div] i1 [[VP_COND1:%.*]] = icmp eq i32 [[VP_IV]] i32 8
; CHECK-NEXT:     [DA: Uni] br [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: [[BB2]]
; CHECK-NEXT:     [DA: Div] i1 [[VP0:%.*]] = block-predicate i1 [[VP_COND1]]
; CHECK-NEXT:     [DA: Div] i32 [[VP_X1:%.*]] = add i32 [[VP_IV]] i32 1
; CHECK-NEXT:     [DA: Div] i1 [[VP_COND2:%.*]] = icmp eq i32 [[VP_X1]] i32 16
; CHECK-NEXT:     [DA: Div] i1 [[VP_COND2_NOT:%.*]] = not i1 [[VP_COND2]]
; CHECK-NEXT:     [DA: Uni] br [[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]: # preds: [[BB4]]
; CHECK-NEXT:     [DA: Div] i1 [[VP_BB3_BR_VP_COND2_NOT:%.*]] = and i1 [[VP_COND1]] i1 [[VP_COND2_NOT]]
; CHECK-NEXT:     [DA: Div] i1 [[VP_BB3_BR_VP_COND2:%.*]] = and i1 [[VP_COND1]] i1 [[VP_COND2]]
; CHECK-NEXT:     [DA: Uni] br [[BB6:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]]: # preds: [[BB5]]
; CHECK-NEXT:     [DA: Div] i1 [[VP1:%.*]] = block-predicate i1 [[VP_BB3_BR_VP_COND2_NOT]]
; CHECK-NEXT:     [DA: Div] i32 [[VP_X3:%.*]] = add i32 [[VP_X1]] i32 2
; CHECK-NEXT:     [DA: Uni] br [[BB7:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB7]]: # preds: [[BB6]]
; CHECK-NEXT:     [DA: Div] i1 [[VP2:%.*]] = block-predicate i1 [[VP_BB3_BR_VP_COND2]]
; CHECK-NEXT:     [DA: Div] i32 [[VP_X2:%.*]] = add i32 [[VP_X1]] i32 1
; CHECK-NEXT:     [DA: Uni] br [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: [[BB7]]
; CHECK-NEXT:     [DA: Div] i32 [[VP_ADD]] = add i32 [[VP_ADD_PHI]] i32 1
; CHECK-NEXT:     [DA: Uni] i32 [[VP_VECTOR_LOOP_IV_NEXT]] = add i32 [[VP_VECTOR_LOOP_IV]] i32 [[VP_VF]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP_VECTOR_LOOP_EXITCOND:%.*]] = icmp uge i32 [[VP_VECTOR_LOOP_IV_NEXT]] i32 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP_VECTOR_LOOP_EXITCOND]], [[BB8:BB[0-9]+]], [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB8]]: # preds: [[BB3]]
; CHECK-NEXT:     [DA: Uni] i32 [[VP_ADD_PHI_RED_FINAL:%.*]] = reduction-final{u_add} i32 [[VP_ADD]]
; CHECK-NEXT:     [DA: Uni] i32 [[VP_IV_IND_FINAL:%.*]] = induction-final{add} i32 live-in1 i32 1
; CHECK-NEXT:     [DA: Uni] br [[BB9:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB9]]: # preds: [[BB8]]
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0     [[LCSSA_PHI0:%.*]] = phi i32 [ [[ADD0:%.*]], [[LATCH0:%.*]] ] i32 [[VP_ADD_PHI_RED_FINAL]] -> i32 [[ADD0]]
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 1   no underlying for i32 [[VP_IV_IND_FINAL]]
;
entry:
  br label %preheader

preheader:
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %header
; +--->header+---+
; |      |       |
; |      v       |
; |     bb1      |
; |      +       |
; |    +-+-+     |
; |    v   v     |
; |  bb2   bb3   |
; |  +       +   |
; |  |       |   |
; |  +>latch<+<-+
; |      |
; +------+
;        v
;       bb4
;        |
;        v
;       exit
header:
  %iv = phi i32 [ 0, %preheader ], [ %iv.next, %latch ]
  %add.phi = phi i32 [ 0, %preheader ], [ %add, %latch ]
  %iv.next = add nsw i32 %iv, 1
  %bottom_test = icmp eq i32 %iv.next, 128
  %cond1 = icmp eq i32 %iv, 8
  br i1 %cond1, label %bb1, label %latch

bb1:
  %x1 = add nsw i32 %iv, 1
  %cond2 = icmp eq i32 %x1, 16
  br i1 %cond2, label %bb2, label %bb3

bb2:
  %x2 = add nsw i32 %x1, 1
  br label %latch

bb3:
  %x3 = add nsw i32 %x1, 2
  br label %latch

latch:
  %add = add nsw i32 %add.phi, 1
  br i1 %bottom_test, label %loopexit, label %header

loopexit:
  %lcssa.phi = phi i32 [ %add, %latch ]
  %add.final = add nsw i32 %lcssa.phi, 1
  br label %bb4

bb4:
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %exit

exit:
  ret void
}

declare token @llvm.directive.region.entry() nounwind
declare void @llvm.directive.region.exit(token) nounwind
