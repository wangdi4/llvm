; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -vplan-enable-new-cfg-merge-hir=false -enable-new-pm=0 -hir-ssa-deconstruction -hir-temp-cleanup -hir-vec-dir-insert -hir-vplan-vec -vplan-force-vf=4 -print-after=hir-vplan-vec -enable-mmindex=1 -disable-output < %s 2>&1 | FileCheck %s
; RUN: opt -vplan-enable-new-cfg-merge-hir=false -passes="hir-ssa-deconstruction,hir-temp-cleanup,hir-vec-dir-insert,hir-vplan-vec,print<hir>" -vplan-force-vf=4 -enable-mmindex=1 -disable-output < %s 2>&1 | FileCheck %s
; RUN: opt -vplan-enable-new-cfg-merge-hir -enable-new-pm=0 -hir-ssa-deconstruction -hir-temp-cleanup -hir-vec-dir-insert -hir-vplan-vec -vplan-force-vf=4 -print-after=hir-vplan-vec -enable-mmindex=1 -disable-output < %s 2>&1 | FileCheck %s
; RUN: opt -vplan-enable-new-cfg-merge-hir -passes="hir-ssa-deconstruction,hir-temp-cleanup,hir-vec-dir-insert,hir-vplan-vec,print<hir>" -vplan-force-vf=4 -enable-mmindex=1 -disable-output < %s 2>&1 | FileCheck %s

;
; The test checks the situation when value of main reduciton in minmax+index idiom is unused after loop.
; In this case, we should generate a correct assignment to the incoming variable.
; CHECK:                      + END LOOP
; CHECK:                      %[[max018:.*]] = @llvm.vector.reduce.smax.v4i64(%.[[vec5:.*]]);
; CHECK-NEXT:                 %[[idxblend:.*]] = (%[[max018]] == %.[[vec5]]) ? %.[[vec4:.*]] : <i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807, i64 9223372036854775807>;
; CHECK-NEXT:                 %[[indmax017:.*]] = @llvm.vector.reduce.smin.v4i64(%[[idxblend]]);
; CHECK:                   }
; CHECK:                   + DO i1 = {{.*}}, zext.i32.i64(%n) + -2, 1   <DO_LOOP>
; CHECK-NEXT:              |   [[TMP:%.*]] = (%x)[i1 + 1];
; CHECK-NEXT:              |   %[[indmax017]] = ([[TMP]] > %[[max018]]) ? i1 + 1 : %[[indmax017]];
; CHECK-NEXT:              |   %[[max018]] = ([[TMP]] > %[[max018]]) ? [[TMP]] : %[[max018]];
; CHECK-NEXT:              + END LOOP
; CHECK:             END REGION
;

; Function Attrs: nounwind readonly uwtable
define dso_local i64 @_Z3fooPdi(i64* nocapture readonly %x, i32 %n) local_unnamed_addr #0 {
entry:
  br label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  %0 = load i64, i64* %x, align 8
  %wide.trip.count20 = zext i32 %n to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.body
  %indmax.0.lcssa = phi i64 [ %2, %for.body ]
  ret i64 %indmax.0.lcssa

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ 1, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %max.018 = phi i64 [ %0, %for.body.preheader ], [ %3, %for.body ]
  %indmax.017 = phi i64 [ 0, %for.body.preheader ], [ %2, %for.body ]
  %ptridx1 = getelementptr inbounds i64, i64* %x, i64 %indvars.iv
  %1 = load i64, i64* %ptridx1, align 8
  %cmp2 = icmp sgt i64 %1, %max.018
  %2 = select i1 %cmp2, i64 %indvars.iv, i64 %indmax.017
  %3 = select i1 %cmp2, i64 %1, i64 %max.018
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count20
  br i1 %exitcond, label %for.cond.cleanup.loopexit, label %for.body
}

