; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -hir-ssa-deconstruction -hir-framework -hir-vplan-vec -disable-output -print-after=hir-vplan-vec  -vplan-force-vf=4 < %s 2>&1 -vplan-enable-new-cfg-merge-hir=0 | FileCheck %s
; RUN: opt -passes="hir-ssa-deconstruction,hir-vplan-vec,print<hir>" -disable-output -vplan-force-vf=4 < %s 2>&1 -vplan-enable-new-cfg-merge-hir=0 | FileCheck %s
;
; LIT test to demonstrate vectorization of outer loop with two sibling inner loops.
; Incoming HIR:
;
;         + DO i1 = 0, 99, 1   <DO_LOOP> <simd>
;         |   + DO i2 = 0, 99, 1   <DO_LOOP>
;         |   |   (@larr1)[0][i1][i2] = i1 + i2;
;         |   + END LOOP
;         |
;         |
;         |   + DO i2 = 0, 99, 1   <DO_LOOP>
;         |   |   (@larr2)[0][i1][i2] = i1 + i2;
;         |   + END LOOP
;         + END LOOP

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@larr1 = dso_local local_unnamed_addr global [100 x [100 x i64]] zeroinitializer, align 16
@larr2 = dso_local local_unnamed_addr global [100 x [100 x i64]] zeroinitializer, align 16

; Function Attrs: nofree norecurse nosync nounwind uwtable writeonly
define dso_local void @foo(i64** nocapture readnone %lpp) local_unnamed_addr #0 {
; CHECK:       + DO i1 = 0, 99, 4   <DO_LOOP> <simd-vectorized> <novectorize>
; CHECK-NEXT:  |   %phi.temp = 0;
; CHECK-NEXT:  |
; CHECK-NEXT:  |   + DO i2 = 0, 99, 1   <DO_LOOP>
; CHECK-NEXT:  |   |   (<4 x i64>*)(@larr1)[0][i1 + <i64 0, i64 1, i64 2, i64 3>][i2] = i1 + i2 + <i64 0, i64 1, i64 2, i64 3>;
; CHECK-NEXT:  |   |   %.vec = i2 + 1 < 100;
; CHECK-NEXT:  |   |   %phi.temp = i2 + 1;
; CHECK-NEXT:  |   + END LOOP
; CHECK-NEXT:  |
; CHECK-NEXT:  |   %phi.temp5 = 0;
; CHECK-NEXT:  |
; CHECK-NEXT:  |   + DO i2 = 0, 99, 1   <DO_LOOP>
; CHECK-NEXT:  |   |   (<4 x i64>*)(@larr2)[0][i1 + <i64 0, i64 1, i64 2, i64 3>][i2] = i1 + i2 + <i64 0, i64 1, i64 2, i64 3>;
; CHECK-NEXT:  |   |   %.vec7 = i2 + 1 < 100;
; CHECK-NEXT:  |   |   %phi.temp5 = i2 + 1;
; CHECK-NEXT:  |   + END LOOP
; CHECK-NEXT:  + END LOOP
;
entry:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %entry, %for.inc14
  %l1.034 = phi i64 [ 0, %entry ], [ %inc15, %for.inc14 ]
  br label %for.body3

for.body3:                                        ; preds = %for.cond1.preheader, %for.body3
  %l2.032 = phi i64 [ 0, %for.cond1.preheader ], [ %inc, %for.body3 ]
  %add = add nuw nsw i64 %l2.032, %l1.034
  %arrayidx4 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @larr1, i64 0, i64 %l1.034, i64 %l2.032
  store i64 %add, i64* %arrayidx4, align 8
  %inc = add nuw nsw i64 %l2.032, 1
  %exitcond.not = icmp eq i64 %inc, 100
  br i1 %exitcond.not, label %for.body7.preheader, label %for.body3

for.body7.preheader:                              ; preds = %for.body3
  br label %for.body7

for.body7:                                        ; preds = %for.body7.preheader, %for.body7
  %l2.133 = phi i64 [ %inc12, %for.body7 ], [ 0, %for.body7.preheader ]
  %add8 = add nuw nsw i64 %l2.133, %l1.034
  %arrayidx10 = getelementptr inbounds [100 x [100 x i64]], [100 x [100 x i64]]* @larr2, i64 0, i64 %l1.034, i64 %l2.133
  store i64 %add8, i64* %arrayidx10, align 8
  %inc12 = add nuw nsw i64 %l2.133, 1
  %exitcond35.not = icmp eq i64 %inc12, 100
  br i1 %exitcond35.not, label %for.inc14, label %for.body7

for.inc14:                                        ; preds = %for.body7
  %inc15 = add nuw nsw i64 %l1.034, 1
  %exitcond36.not = icmp eq i64 %inc15, 100
  br i1 %exitcond36.not, label %for.end16, label %for.cond1.preheader

for.end16:                                        ; preds = %for.inc14
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"() ]
  ret void
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
