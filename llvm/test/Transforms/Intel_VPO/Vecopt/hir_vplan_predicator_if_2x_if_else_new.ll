; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt %s -hir-ssa-deconstruction -hir-temp-cleanup -hir-vec-dir-insert -hir-vplan-vec -disable-vplan-codegen -disable-output -vplan-print-after-predicator -vplan-dump-external-defs-hir=0 -S | FileCheck %s
; RUN: opt -passes="hir-ssa-deconstruction,hir-temp-cleanup,hir-vec-dir-insert,hir-vplan-vec" %s -disable-vplan-codegen -disable-output -vplan-print-after-predicator -vplan-dump-external-defs-hir=0 -S | FileCheck %s

; REQUIRES: asserts

; Verify New VPlan predicator: if with two nested if-else statements.
; Copy of vplan_predicator_if_2x_if_else_new.ll modified for HIR.

; void foo(int * restrict a, int * restrict b, int * restrict c, int N)
; {
;   int i;
;   for (i = 0; i < 300; i++) {
;
;     if (b[i] > 0) {
;       if (a[i] > 0)
;         b[i] = b[i] * 5;
;       else
;         a[i] = a[i] + 5;
;
;       c[i] = c[i] * N;
;
;       if (c[i] > 0)
;         a[i] = c[i] - a[i];
;       else
;         b[i] = a[i] * c[i];
;     }
;   }
; }
; ModuleID = 't1.c'
source_filename = "t1.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline norecurse nounwind uwtable
define dso_local void @foo(i32* noalias nocapture %a, i32* noalias nocapture %b, i32* noalias nocapture %c, i32 %N) local_unnamed_addr #0 {
; CHECK-LABEL:  VPlan after predicator:
; CHECK-NEXT:  VPlan IR for: foo:HIR.#{{[0-9]+}}
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i64 300, UF = 1
; CHECK-NEXT:     [DA: Div] i64 [[VP__IND_INIT:%.*]] = induction-init{add} i64 live-in0 i64 1
; CHECK-NEXT:     [DA: Uni] i64 [[VP__IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:     [DA: Uni] br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], [[BB3:BB[0-9]+]]
; CHECK-NEXT:     [DA: Div] i64 [[VP0:%.*]] = phi  [ i64 [[VP__IND_INIT]], [[BB1]] ],  [ i64 [[VP1:%.*]], [[BB3]] ]
; CHECK-NEXT:     [DA: Div] i32* [[VP_SUBSCRIPT:%.*]] = subscript inbounds i32* [[B0:%.*]] i64 [[VP0]]
; CHECK-NEXT:     [DA: Div] i32 [[VP_LOAD:%.*]] = load i32* [[VP_SUBSCRIPT]]
; CHECK-NEXT:     [DA: Div] i1 [[VP2:%.*]] = icmp sgt i32 [[VP_LOAD]] i32 0
; CHECK-NEXT:     [DA: Uni] br [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: [[BB2]]
; CHECK-NEXT:     [DA: Div] i1 [[VP3:%.*]] = block-predicate i1 [[VP2]]
; CHECK-NEXT:     [DA: Div] i32* [[VP_SUBSCRIPT_1:%.*]] = subscript inbounds i32* [[A0:%.*]] i64 [[VP0]]
; CHECK-NEXT:     [DA: Div] i32 [[VP_LOAD_1:%.*]] = load i32* [[VP_SUBSCRIPT_1]]
; CHECK-NEXT:     [DA: Div] i1 [[VP4:%.*]] = icmp sgt i32 [[VP_LOAD_1]] i32 0
; CHECK-NEXT:     [DA: Div] i1 [[VP__NOT:%.*]] = not i1 [[VP4]]
; CHECK-NEXT:     [DA: Uni] br [[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]: # preds: [[BB4]]
; CHECK-NEXT:     [DA: Div] i1 [[VP_BB4_BR_VP__NOT:%.*]] = and i1 [[VP2]] i1 [[VP__NOT]]
; CHECK-NEXT:     [DA: Div] i1 [[VP_BB4_BR_:%.*]] = and i1 [[VP2]] i1 [[VP4]]
; CHECK-NEXT:     [DA: Uni] br [[BB6:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]]: # preds: [[BB5]]
; CHECK-NEXT:     [DA: Div] i1 [[VP5:%.*]] = block-predicate i1 [[VP_BB4_BR_VP__NOT]]
; CHECK-NEXT:     [DA: Div] i32 [[VP6:%.*]] = add i32 [[VP_LOAD_1]] i32 5
; CHECK-NEXT:     [DA: Div] i32* [[VP_SUBSCRIPT_2:%.*]] = subscript inbounds i32* [[A0]] i64 [[VP0]]
; CHECK-NEXT:     [DA: Div] store i32 [[VP6]] i32* [[VP_SUBSCRIPT_2]]
; CHECK-NEXT:     [DA: Uni] br [[BB7:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB7]]: # preds: [[BB6]]
; CHECK-NEXT:     [DA: Div] i1 [[VP7:%.*]] = block-predicate i1 [[VP_BB4_BR_]]
; CHECK-NEXT:     [DA: Div] i32 [[VP8:%.*]] = mul i32 [[VP_LOAD]] i32 5
; CHECK-NEXT:     [DA: Div] i32* [[VP_SUBSCRIPT_3:%.*]] = subscript inbounds i32* [[B0]] i64 [[VP0]]
; CHECK-NEXT:     [DA: Div] store i32 [[VP8]] i32* [[VP_SUBSCRIPT_3]]
; CHECK-NEXT:     [DA: Uni] br [[BB8:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB8]]: # preds: [[BB7]]
; CHECK-NEXT:     [DA: Div] i1 [[VP9:%.*]] = block-predicate i1 [[VP2]]
; CHECK-NEXT:     [DA: Div] i32* [[VP_SUBSCRIPT_4:%.*]] = subscript inbounds i32* [[C0:%.*]] i64 [[VP0]]
; CHECK-NEXT:     [DA: Div] i32 [[VP_LOAD_2:%.*]] = load i32* [[VP_SUBSCRIPT_4]]
; CHECK-NEXT:     [DA: Div] i32 [[VP10:%.*]] = mul i32 [[VP_LOAD_2]] i32 [[N0:%.*]]
; CHECK-NEXT:     [DA: Div] i32* [[VP_SUBSCRIPT_5:%.*]] = subscript inbounds i32* [[C0]] i64 [[VP0]]
; CHECK-NEXT:     [DA: Div] store i32 [[VP10]] i32* [[VP_SUBSCRIPT_5]]
; CHECK-NEXT:     [DA: Div] i32* [[VP_SUBSCRIPT_6:%.*]] = subscript inbounds i32* [[A0]] i64 [[VP0]]
; CHECK-NEXT:     [DA: Div] i32 [[VP_LOAD_3:%.*]] = load i32* [[VP_SUBSCRIPT_6]]
; CHECK-NEXT:     [DA: Div] i32 [[VP11:%.*]] = mul i32 [[VP_LOAD_2]] i32 [[N0]]
; CHECK-NEXT:     [DA: Div] i1 [[VP12:%.*]] = icmp sgt i32 [[VP11]] i32 0
; CHECK-NEXT:     [DA: Div] i1 [[VP__NOT_1:%.*]] = not i1 [[VP12]]
; CHECK-NEXT:     [DA: Uni] br [[BB9:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB9]]: # preds: [[BB8]]
; CHECK-NEXT:     [DA: Div] i1 [[VP_BB7_BR_VP__NOT:%.*]] = and i1 [[VP2]] i1 [[VP__NOT_1]]
; CHECK-NEXT:     [DA: Div] i1 [[VP_BB7_BR_:%.*]] = and i1 [[VP2]] i1 [[VP12]]
; CHECK-NEXT:     [DA: Uni] br [[BB10:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB10]]: # preds: [[BB9]]
; CHECK-NEXT:     [DA: Div] i1 [[VP13:%.*]] = block-predicate i1 [[VP_BB7_BR_VP__NOT]]
; CHECK-NEXT:     [DA: Div] i32 [[VP14:%.*]] = mul i32 [[VP_LOAD_3]] i32 [[N0]]
; CHECK-NEXT:     [DA: Div] i32 [[VP15:%.*]] = mul i32 [[VP_LOAD_2]] i32 [[VP14]]
; CHECK-NEXT:     [DA: Div] i32* [[VP_SUBSCRIPT_7:%.*]] = subscript inbounds i32* [[B0]] i64 [[VP0]]
; CHECK-NEXT:     [DA: Div] store i32 [[VP15]] i32* [[VP_SUBSCRIPT_7]]
; CHECK-NEXT:     [DA: Uni] br [[BB11:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB11]]: # preds: [[BB10]]
; CHECK-NEXT:     [DA: Div] i1 [[VP16:%.*]] = block-predicate i1 [[VP_BB7_BR_]]
; CHECK-NEXT:     [DA: Div] i32 [[VP17:%.*]] = mul i32 [[VP_LOAD_2]] i32 [[N0]]
; CHECK-NEXT:     [DA: Div] i32 [[VP18:%.*]] = mul i32 [[VP_LOAD_3]] i32 -1
; CHECK-NEXT:     [DA: Div] i32 [[VP19:%.*]] = add i32 [[VP17]] i32 [[VP18]]
; CHECK-NEXT:     [DA: Div] i32* [[VP_SUBSCRIPT_8:%.*]] = subscript inbounds i32* [[A0]] i64 [[VP0]]
; CHECK-NEXT:     [DA: Div] store i32 [[VP19]] i32* [[VP_SUBSCRIPT_8]]
; CHECK-NEXT:     [DA: Uni] br [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: [[BB11]]
; CHECK-NEXT:     [DA: Div] i64 [[VP1]] = add i64 [[VP0]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP20:%.*]] = icmp slt i64 [[VP1]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP20]], [[BB2]], [[BB12:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB12]]: # preds: [[BB3]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP__IND_FINAL:%.*]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Uni] br [[BB13:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB13]]: # preds: [[BB12]]
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   no underlying for i64 [[VP__IND_FINAL]]
;
entry:
  br label %for.body

for.body:                                         ; preds = %for.inc, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.inc ]
  %arrayidx = getelementptr inbounds i32, i32* %b, i64 %indvars.iv
  %0 = load i32, i32* %arrayidx, align 4, !tbaa !2
  %cmp1 = icmp sgt i32 %0, 0
  br i1 %cmp1, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body
  %arrayidx3 = getelementptr inbounds i32, i32* %a, i64 %indvars.iv
  %1 = load i32, i32* %arrayidx3, align 4, !tbaa !2
  %cmp4 = icmp sgt i32 %1, 0
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.then
  %mul = mul nsw i32 %0, 5
  store i32 %mul, i32* %arrayidx, align 4, !tbaa !2
  br label %if.end

if.else:                                          ; preds = %if.then
  %add = add nsw i32 %1, 5
  store i32 %add, i32* %arrayidx3, align 4, !tbaa !2
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then5
  %arrayidx15 = getelementptr inbounds i32, i32* %c, i64 %indvars.iv
  %2 = load i32, i32* %arrayidx15, align 4, !tbaa !2
  %mul16 = mul nsw i32 %2, %N
  store i32 %mul16, i32* %arrayidx15, align 4, !tbaa !2
  %cmp21 = icmp sgt i32 %mul16, 0
  %3 = load i32, i32* %arrayidx3, align 4, !tbaa !2
  br i1 %cmp21, label %if.then22, label %if.else29

if.then22:                                        ; preds = %if.end
  %sub = sub nsw i32 %mul16, %3
  store i32 %sub, i32* %arrayidx3, align 4, !tbaa !2
  br label %for.inc

if.else29:                                        ; preds = %if.end
  %mul34 = mul nsw i32 %3, %mul16
  store i32 %mul34, i32* %arrayidx, align 4, !tbaa !2
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.else29, %if.then22
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 300
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc
  ret void
}

attributes #0 = { noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"icx (ICX) dev.8.x.0"}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
