; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -vplan-vec-scenario="m4;v4;m4" \
; RUN: -disable-output -vplan-vec -vplan-enable-new-cfg-merge \
; RUN: -disable-vplan-codegen -vplan-enable-masked-variant \
; RUN: -vplan-enable-peeling -vplan-print-after-cfg-merge %s 2>&1 | FileCheck %s
target datalayout = "e-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024"
target triple = "x86_64-unknown-linux-gnu"

define void @test_store(i64* nocapture %ary, i32 %c) {
; CHECK-LABEL:  Single loop scenario:
; CHECK-NEXT:   MainLoop: unmasked, VF=4
; CHECK-NEXT:   PeelLoop: masked, VF=4
; CHECK-NEXT:   Remainders: masked, VF=4,
; CHECK-NEXT:  VPlan after CFG merge before CG:
; CHECK-NEXT:  VPlan IR for: test_store:for.body
; CHECK-NEXT:    [[PEEL_CHECKZ0:peel.checkz[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] pushvf VF=4 UF=1
; CHECK-NEXT:     [DA: Uni] i64* [[VP_PEEL_BASE_PTR:%.*]] = inv-scev-wrapper{ [[ARY0:%.*]] }
; CHECK-NEXT:     [DA: Uni] i64 [[VP_BASEPTR_INT:%.*]] = ptrtoint i64* [[VP_PEEL_BASE_PTR]] to i64
; CHECK-NEXT:     [DA: Uni] i64 [[VP_QUOTIENT:%.*]] = udiv i64 [[VP_BASEPTR_INT]] i64 8
; CHECK-NEXT:     [DA: Uni] i64 [[VP_QMULTIPLIER:%.*]] = mul i64 [[VP_QUOTIENT]] i64 3
; CHECK-NEXT:     [DA: Uni] i64 [[VP_PEEL_COUNT:%.*]] = urem i64 [[VP_QMULTIPLIER]] i64 4
; CHECK-NEXT:     [DA: Div] i64 [[VP0:%.*]] = sub i64 [[VP_PEEL_COUNT]] i64 1
; CHECK-NEXT:     [DA: Uni] i1 [[VP_PEEL_ZERO_CHECK:%.*]] = icmp eq i64 0 i64 [[VP_PEEL_COUNT]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP_PEEL_ZERO_CHECK]], [[MERGE_BLK0:merge.blk[0-9]+]], [[PEEL_CHECKV0:peel.checkv[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[PEEL_CHECKV0]]: # preds: [[PEEL_CHECKZ0]]
; CHECK-NEXT:       [DA: Uni] i64 [[VP1:%.*]] = add i64 [[VP_PEEL_COUNT]] i64 4
; CHECK-NEXT:       [DA: Uni] i1 [[VP_PEEL_VEC_TC_CHECK:%.*]] = icmp ugt i64 [[VP1]] i64 1023
; CHECK-NEXT:       [DA: Uni] br i1 [[VP_PEEL_VEC_TC_CHECK]], [[MERGE_BLK1:merge.blk[0-9]+]], Cloned.[[BB0:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:        Cloned.[[BB0]]: # preds: [[PEEL_CHECKV0]]
; CHECK-NEXT:         [DA: Uni] pushvf VF=4 UF=1
; CHECK-NEXT:         [DA: Uni] br Cloned.[[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:        Cloned.[[BB1]]: # preds: Cloned.[[BB0]]
; CHECK-NEXT:         [DA: Div] i64 [[VP2:%.*]] = induction-init{add} i64 0 i64 1
; CHECK-NEXT:         [DA: Uni] i64 [[VP3:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:         [DA: Uni] br Cloned.[[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:        Cloned.[[BB2]]: # preds: Cloned.[[BB1]], new_latch
; CHECK-NEXT:         [DA: Div] i64 [[VP_INDVARS_IV:%.*]] = phi  [ i64 [[VP2]], Cloned.[[BB1]] ],  [ i64 [[VP_INDVARS_IV_NEXT:%.*]], new_latch ]
; CHECK-NEXT:         [DA: Div] i1 [[VP4:%.*]] = icmp ule i64 [[VP_INDVARS_IV]] i64 [[VP0]]
; CHECK-NEXT:         [DA: Uni] br [[BB3:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB3]]: # preds: Cloned.[[BB2]]
; CHECK-NEXT:         [DA: Div] i1 [[VP5:%.*]] = block-predicate i1 [[VP4]]
; CHECK-NEXT:         [DA: Div] i64* [[VP_PTR:%.*]] = getelementptr inbounds i64* [[ARY0]] i64 [[VP_INDVARS_IV]]
; CHECK-NEXT:         [DA: Uni] i64 [[VP_CC:%.*]] = sext i32 [[C0:%.*]] to i64
; CHECK-NEXT:         [DA: Div] i64 [[VP_ADD:%.*]] = add i64 [[VP_CC]] i64 [[VP_INDVARS_IV]]
; CHECK-NEXT:         [DA: Div] store i64 [[VP_ADD]] i64* [[VP_PTR]]
; CHECK-NEXT:         [DA: Uni] br new_latch
; CHECK-EMPTY:
; CHECK-NEXT:        new_latch: # preds: [[BB3]]
; CHECK-NEXT:         [DA: Div] i64 [[VP_INDVARS_IV_NEXT]] = add i64 [[VP_INDVARS_IV]] i64 [[VP3]]
; CHECK-NEXT:         [DA: Div] i1 [[VP6:%.*]] = icmp ule i64 [[VP_INDVARS_IV_NEXT]] i64 [[VP0]]
; CHECK-NEXT:         [DA: Uni] i1 [[VP7:%.*]] = all-zero-check i1 [[VP6]]
; CHECK-NEXT:         [DA: Uni] br i1 [[VP7]], Cloned.[[BB4:BB[0-9]+]], Cloned.[[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:        Cloned.[[BB4]]: # preds: new_latch
; CHECK-NEXT:         [DA: Uni] i64 [[VP8:%.*]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:         [DA: Uni] br Cloned.[[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:        Cloned.[[BB5]]: # preds: Cloned.[[BB4]]
; CHECK-NEXT:         [DA: Uni] popvf
; CHECK-NEXT:         [DA: Uni] br [[MERGE_BLK0]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[MERGE_BLK0]]: # preds: [[PEEL_CHECKZ0]], Cloned.[[BB5]]
; CHECK-NEXT:       [DA: Uni] i64 [[VP9:%.*]] = phi-merge  [ i64 0, [[PEEL_CHECKZ0]] ],  [ i64 [[VP8]], Cloned.[[BB5]] ]
; CHECK-NEXT:       [DA: Uni] br [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB2]]: # preds: [[MERGE_BLK0]]
; CHECK-NEXT:       [DA: Uni] i64 [[VP10:%.*]] = add i64 [[VP_PEEL_COUNT]] i64 4
; CHECK-NEXT:       [DA: Uni] i1 [[VP_PEEL_VEC_TC_CHECK_1:%.*]] = icmp ugt i64 [[VP10]] i64 1023
; CHECK-NEXT:       [DA: Uni] br i1 [[VP_PEEL_VEC_TC_CHECK_1]], [[MERGE_BLK1]], [[BB6:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB6]]: # preds: [[BB2]]
; CHECK-NEXT:       [DA: Uni] pushvf VF=4 UF=1
; CHECK-NEXT:       [DA: Uni] br [[BB7:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB7]]: # preds: [[BB6]]
; CHECK-NEXT:       [DA: Div] i64 [[VP_INDVARS_IV_IND_INIT:%.*]] = induction-init{add} i64 [[VP9]] i64 1
; CHECK-NEXT:       [DA: Uni] i64 [[VP_INDVARS_IV_IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:       [DA: Uni] i64 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i64 1023 i64 [[VP_PEEL_COUNT]], UF = 1
; CHECK-NEXT:       [DA: Uni] br [[BB8:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB8]]: # preds: [[BB7]], [[BB8]]
; CHECK-NEXT:       [DA: Div] i64 [[VP_INDVARS_IV_1:%.*]] = phi  [ i64 [[VP_INDVARS_IV_IND_INIT]], [[BB7]] ],  [ i64 [[VP_INDVARS_IV_NEXT_1:%.*]], [[BB8]] ]
; CHECK-NEXT:       [DA: Div] i64* [[VP_PTR_1:%.*]] = getelementptr inbounds i64* [[ARY0]] i64 [[VP_INDVARS_IV_1]]
; CHECK-NEXT:       [DA: Uni] i64 [[VP_CC_1:%.*]] = sext i32 [[C0]] to i64
; CHECK-NEXT:       [DA: Div] i64 [[VP_ADD_1:%.*]] = add i64 [[VP_CC_1]] i64 [[VP_INDVARS_IV_1]]
; CHECK-NEXT:       [DA: Div] store i64 [[VP_ADD_1]] i64* [[VP_PTR_1]]
; CHECK-NEXT:       [DA: Div] i64 [[VP_INDVARS_IV_NEXT_1]] = add i64 [[VP_INDVARS_IV_1]] i64 [[VP_INDVARS_IV_IND_INIT_STEP]]
; CHECK-NEXT:       [DA: Uni] i1 [[VP_VECTOR_LOOP_EXITCOND:%.*]] = icmp ule i64 [[VP_INDVARS_IV_NEXT_1]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:       [DA: Uni] br i1 [[VP_VECTOR_LOOP_EXITCOND]], [[BB8]], [[BB9:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB9]]: # preds: [[BB8]]
; CHECK-NEXT:       [DA: Uni] i64 [[VP_INDVARS_IV_IND_FINAL:%.*]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:       [DA: Uni] br [[BB10:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB10]]: # preds: [[BB9]]
; CHECK-NEXT:       [DA: Uni] popvf
; CHECK-NEXT:       [DA: Uni] br [[BB11:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB11]]: # preds: [[BB10]]
; CHECK-NEXT:       [DA: Uni] i1 [[VP_REMTC_CHECK:%.*]] = icmp eq i64 1023 i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:       [DA: Uni] br i1 [[VP_REMTC_CHECK]], final.merge, [[MERGE_BLK1]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[MERGE_BLK1]]: # preds: [[BB11]], [[PEEL_CHECKV0]], [[BB2]]
; CHECK-NEXT:       [DA: Uni] i64 [[VP11:%.*]] = phi-merge  [ i64 live-out0, [[BB11]] ],  [ i64 0, [[PEEL_CHECKV0]] ],  [ i64 [[VP9]], [[BB2]] ]
; CHECK-NEXT:       [DA: Uni] br Cloned.Cloned.[[BB12:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      Cloned.Cloned.[[BB12]]: # preds: [[MERGE_BLK1]]
; CHECK-NEXT:       [DA: Uni] pushvf VF=4 UF=1
; CHECK-NEXT:       [DA: Uni] br Cloned.Cloned.[[BB13:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      Cloned.Cloned.[[BB13]]: # preds: Cloned.Cloned.[[BB12]]
; CHECK-NEXT:       [DA: Div] i64 [[VP12:%.*]] = induction-init{add} i64 [[VP11]] i64 1
; CHECK-NEXT:       [DA: Uni] i64 [[VP13:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:       [DA: Uni] br Cloned.Cloned.[[BB14:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      Cloned.Cloned.[[BB14]]: # preds: Cloned.Cloned.[[BB13]], Cloned.new_latch17
; CHECK-NEXT:       [DA: Div] i64 [[VP_INDVARS_IV_2:%.*]] = phi  [ i64 [[VP12]], Cloned.Cloned.[[BB13]] ],  [ i64 [[VP_INDVARS_IV_NEXT_2:%.*]], Cloned.new_latch17 ]
; CHECK-NEXT:       [DA: Div] i1 [[VP14:%.*]] = icmp ule i64 [[VP_INDVARS_IV_2]] i64 1023
; CHECK-NEXT:       [DA: Uni] br Cloned.[[BB15:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      Cloned.[[BB15]]: # preds: Cloned.Cloned.[[BB14]]
; CHECK-NEXT:       [DA: Div] i1 [[VP15:%.*]] = block-predicate i1 [[VP14]]
; CHECK-NEXT:       [DA: Div] i64* [[VP_PTR_2:%.*]] = getelementptr inbounds i64* [[ARY0]] i64 [[VP_INDVARS_IV_2]]
; CHECK-NEXT:       [DA: Uni] i64 [[VP_CC_2:%.*]] = sext i32 [[C0]] to i64
; CHECK-NEXT:       [DA: Div] i64 [[VP_ADD_2:%.*]] = add i64 [[VP_CC_2]] i64 [[VP_INDVARS_IV_2]]
; CHECK-NEXT:       [DA: Div] store i64 [[VP_ADD_2]] i64* [[VP_PTR_2]]
; CHECK-NEXT:       [DA: Uni] br Cloned.new_latch17
; CHECK-EMPTY:
; CHECK-NEXT:      Cloned.new_latch17: # preds: Cloned.[[BB15]]
; CHECK-NEXT:       [DA: Div] i64 [[VP_INDVARS_IV_NEXT_2]] = add i64 [[VP_INDVARS_IV_2]] i64 [[VP13]]
; CHECK-NEXT:       [DA: Div] i1 [[VP16:%.*]] = icmp ule i64 [[VP_INDVARS_IV_NEXT_2]] i64 1023
; CHECK-NEXT:       [DA: Uni] i1 [[VP17:%.*]] = all-zero-check i1 [[VP16]]
; CHECK-NEXT:       [DA: Uni] br i1 [[VP17]], Cloned.Cloned.[[BB16:BB[0-9]+]], Cloned.Cloned.[[BB14]]
; CHECK-EMPTY:
; CHECK-NEXT:      Cloned.Cloned.[[BB16]]: # preds: Cloned.new_latch17
; CHECK-NEXT:       [DA: Uni] i64 [[VP18:%.*]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:       [DA: Uni] br Cloned.Cloned.[[BB17:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      Cloned.Cloned.[[BB17]]: # preds: Cloned.Cloned.[[BB16]]
; CHECK-NEXT:       [DA: Uni] popvf
; CHECK-NEXT:       [DA: Uni] br final.merge
; CHECK-EMPTY:
; CHECK-NEXT:    final.merge: # preds: [[BB11]], Cloned.Cloned.[[BB17]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP19:%.*]] = phi-merge  [ i64 [[VP18]], Cloned.Cloned.[[BB17]] ],  [ i64 live-out0, [[BB11]] ]
; CHECK-NEXT:     [DA: Uni] popvf
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   no underlying for i64 [[VP_INDVARS_IV_IND_FINAL]]
;
entry:
  %entry.region = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %for.body

for.body:
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %ptr = getelementptr inbounds i64, i64* %ary, i64 %indvars.iv
  %cc = sext i32 %c to i64
  %add = add i64 %cc, %indvars.iv
  store i64 %add, i64* %ptr, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %cmp = icmp ule i64 %indvars.iv.next, 1023
  br i1 %cmp, label %for.body, label %for.end

for.end:
  call void @llvm.directive.region.exit(token %entry.region) [ "DIR.OMP.END.SIMD"() ]
  ret void
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
