; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -hir-ssa-deconstruction -hir-framework -hir-vplan-vec -disable-output -print-after=hir-vplan-vec < %s 2>&1 | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define void @foo(i64 *%a, i64 *%b) {
; CHECK:       + DO i1 = 0, 127, 4   <DO_LOOP> <simd-vectorized> <novectorize>
; CHECK-NEXT:  |   [[DOTVEC0:%.*]] = (<4 x i64>*)([[A0:%.*]])[i1]
; CHECK-NEXT:  |   [[DOTVEC20:%.*]] = bitcast.<4 x i64>.<8 x i32>([[DOTVEC0]])
; CHECK-NEXT:  |   [[SHUFFLE30:%.*]] = shufflevector [[DOTVEC20]],  [[DOTVEC20]],  <i32 9, i32 0, i32 11, i32 2, i32 13, i32 4, i32 15, i32 6>
; CHECK-NEXT:  |   [[DOTUNIFLOAD0:%.*]] = ([[B0:%.*]])[0]
; CHECK-NEXT:  |   [[DOTVEC40:%.*]] = bitcast.<4 x i64>.<8 x i32>([[DOTUNIFLOAD0]])
; CHECK-NEXT:  |   [[EXTRACTSUBVEC_0:%.*]] = shufflevector [[DOTVEC40]],  undef,  <i32 0, i32 1>
; CHECK-NEXT:  |   [[EXTRACTSUBVEC_50:%.*]] = shufflevector [[DOTVEC40]],  undef,  <i32 0, i32 1>
; CHECK-NEXT:  |   [[SHUFFLE60:%.*]] = shufflevector [[EXTRACTSUBVEC_0]],  [[EXTRACTSUBVEC_50]],  <i32 3, i32 0>
; CHECK-NEXT:  |   [[SHUFFLE70:%.*]] = shufflevector [[DOTVEC20]],  [[DOTVEC20]] + <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>,  <i32 9, i32 0, i32 11, i32 2, i32 13, i32 4, i32 15, i32 6>;
; CHECK-NEXT:  + END LOOP
;
entry:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.SIMDLEN"(i32 4) ]
  br label %header

header:
  %iv = phi i64 [ 0, %entry ], [ %iv.next, %header ]

  %ptr = getelementptr i64, i64 *%a, i64 %iv
  %ld = load i64, i64 *%ptr
  %vec = bitcast i64 %ld to <2 x i32>
  %shuffle = shufflevector <2 x i32> %vec, <2 x i32> %vec, <2 x i32><i32 3, i32 0>

  %ld.uni = load i64, i64 *%b
  %vec.uni = bitcast i64 %ld.uni to <2 x i32>
  %shuffle.uni = shufflevector <2 x i32> %vec.uni, <2 x i32> %vec.uni, <2 x i32><i32 3, i32 0>

  %vec.add = add <2 x i32> %vec, <i32 1, i32 1>
  %shuffle2 = shufflevector <2 x i32> %vec, <2 x i32> %vec.add, <2 x i32><i32 3, i32 0>
  
  %iv.next = add nuw nsw i64 %iv, 1
  %exitcond = icmp eq i64 %iv.next, 128
  br i1 %exitcond, label %exit, label %header

exit:
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"() ]
  ret void
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
