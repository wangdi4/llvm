; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -S -vplan-vec -disable-vplan-predicator -vplan-force-vf=4 < %s  | FileCheck %s

;  for (int i=0; i<n; ++i) {}
;    ip[i] = i;
;}

define void @foo(i32* nocapture %ip, i32 %N) local_unnamed_addr #0 {
;
; CHECK:  define void @foo(i32* nocapture [[IP0:%.*]], i32 [[N0:%.*]]) local_unnamed_addr {
; CHECK:       for.body.preheader:
; CHECK-NEXT:    br label [[VPLANNEDBB0:%.*]]
; CHECK:       vector.body:
; CHECK-NEXT:    [[UNI_PHI0:%.*]] = phi i64 [ 0, [[VECTOR_PH0:%.*]] ], [ [[TMP5:%.*]], [[VECTOR_BODY0:%.*]] ]
; CHECK-NEXT:    [[VEC_PHI0:%.*]] = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, [[VECTOR_PH0]] ], [ [[TMP4:%.*]], [[VECTOR_BODY0]] ]
; CHECK-NEXT:    [[SCALAR_GEP0:%.*]] = getelementptr inbounds i32, i32* [[IP0]], i64 [[UNI_PHI0]]
; CHECK-NEXT:    [[TMP2:%.*]] = trunc <4 x i64> [[VEC_PHI0]] to <4 x i32>
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast i32* [[SCALAR_GEP0]] to <4 x i32>*
; CHECK-NEXT:    store <4 x i32> [[TMP2]], <4 x i32>* [[TMP3]], align 4
; CHECK-NEXT:    [[TMP4]] = add nuw nsw <4 x i64> [[VEC_PHI0]], <i64 4, i64 4, i64 4, i64 4>
; CHECK-NEXT:    [[TMP5]] = add nuw nsw i64 [[UNI_PHI0]], 4
; CHECK-NEXT:    [[TMP6:%.*]] = icmp uge i64 [[TMP5]], [[TMP0:%.*]]
; CHECK-NEXT:    br i1 [[TMP6]], label [[VPLANNEDBB30:%.*]], label [[VECTOR_BODY0]], !llvm.loop !0
; CHECK:       scalar.ph:
; CHECK-NEXT:    [[UNI_PHI50:%.*]] = phi i64 [ [[TMP8:%.*]], [[MIDDLE_BLOCK0:%.*]] ], [ 0, [[VPLANNEDBB10:%.*]] ]
; CHECK-NEXT:    br label [[VPLANNEDBB60:%.*]]
; CHECK:       VPlannedBB6:
; CHECK-NEXT:    br label [[FOR_BODY0:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    [[INDVARS_IV0:%.*]] = phi i64 [ [[UNI_PHI50]], [[VPLANNEDBB60]] ], [ [[INDVARS_IV_NEXT0:%.*]], [[FOR_BODY0]] ]
;
entry:
  %entry.region = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %DIR.QUAL.LIST.END.2

DIR.QUAL.LIST.END.2:
  %zext.trip.cnt = zext i32 %N to i64
  br label %for.body.preheader

for.body.preheader:                              ; preds = %DIR.QUAL.LIST.END.2
  br label %for.body

for.body:
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds i32, i32* %ip, i64 %indvars.iv
  %0 = trunc i64 %indvars.iv to i32
  store i32 %0, i32* %arrayidx, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %zext.trip.cnt
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  call void @llvm.directive.region.exit(token %entry.region) [ "DIR.OMP.END.SIMD"() ]
  br label %for.cleanup

for.cleanup:                              ; preds = %for.end
  ret void
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry()

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token)
