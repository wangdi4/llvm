; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s   -instcombine -slp-vectorizer -enable-intel-advanced-opts -mtriple=x86_64-unknown-linux-gnu -mcpu=skylake-avx512 -S | FileCheck %s
; RUN: opt < %s   -slp-vectorizer -enable-intel-advanced-opts -mtriple=x86_64-unknown-linux-gnu -mcpu=skylake-avx512 -S | FileCheck %s --check-prefixes=WOIC

; The test case is basically a shrink of slp_x264_16x16_nary.ll to show case x264 test pattern
; sensitive to instcombine add/sub expressions reassociating transforms.
; The code expected to be vectorized.
define dso_local i32 @x264_pixel_satd_16x16(i8* noalias nocapture readonly %pix1, i32 %i_pix1, i8* noalias nocapture readonly %pix2, i32 %i_pix2, [16 x [8 x i32]]* noalias nocapture %R) {
; CHECK-LABEL: @x264_pixel_satd_16x16(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[IDX_EXT_I:%.*]] = sext i32 [[I_PIX1:%.*]] to i64
; CHECK-NEXT:    [[IDX_EXT63_I:%.*]] = sext i32 [[I_PIX2:%.*]] to i64
; CHECK-NEXT:    br label [[LOOP_1247:%.*]]
; CHECK:       loop.1247:
; CHECK-NEXT:    [[I1_I64_0:%.*]] = phi i64 [ 0, [[ENTRY:%.*]] ], [ [[NEXTIVLOOP_1247:%.*]], [[LOOP_1247]] ]
; CHECK-NEXT:    [[I:%.*]] = mul i64 [[I1_I64_0]], [[IDX_EXT_I]]
; CHECK-NEXT:    [[GEP:%.*]] = getelementptr inbounds i8, i8* [[PIX1:%.*]], i64 [[I]]
; CHECK-NEXT:    [[I1:%.*]] = mul i64 [[I1_I64_0]], [[IDX_EXT63_I]]
; CHECK-NEXT:    [[GEP013:%.*]] = getelementptr inbounds i8, i8* [[PIX2:%.*]], i64 [[I1]]
; CHECK-NEXT:    [[I2:%.*]] = add i64 [[I]], 4
; CHECK-NEXT:    [[GEP015:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I2]]
; CHECK-NEXT:    [[I3:%.*]] = add i64 [[I1]], 4
; CHECK-NEXT:    [[GEP017:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I3]]
; CHECK-NEXT:    [[I4:%.*]] = add i64 [[I]], 1
; CHECK-NEXT:    [[GEP019:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I4]]
; CHECK-NEXT:    [[I5:%.*]] = add i64 [[I1]], 1
; CHECK-NEXT:    [[GEP021:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I5]]
; CHECK-NEXT:    [[I6:%.*]] = add i64 [[I]], 5
; CHECK-NEXT:    [[GEP023:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I6]]
; CHECK-NEXT:    [[I7:%.*]] = add i64 [[I1]], 5
; CHECK-NEXT:    [[GEP025:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I7]]
; CHECK-NEXT:    [[I8:%.*]] = add i64 [[I]], 2
; CHECK-NEXT:    [[GEP027:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I8]]
; CHECK-NEXT:    [[I9:%.*]] = add i64 [[I1]], 2
; CHECK-NEXT:    [[GEP029:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I9]]
; CHECK-NEXT:    [[I10:%.*]] = add i64 [[I]], 6
; CHECK-NEXT:    [[GEP031:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I10]]
; CHECK-NEXT:    [[I11:%.*]] = add i64 [[I1]], 6
; CHECK-NEXT:    [[GEP033:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I11]]
; CHECK-NEXT:    [[I12:%.*]] = add i64 [[I]], 3
; CHECK-NEXT:    [[GEP035:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I12]]
; CHECK-NEXT:    [[TMP0:%.*]] = bitcast i8* [[GEP]] to <4 x i8>*
; CHECK-NEXT:    [[TMP1:%.*]] = load <4 x i8>, <4 x i8>* [[TMP0]], align 1
; CHECK-NEXT:    [[I13:%.*]] = add i64 [[I1]], 3
; CHECK-NEXT:    [[GEP037:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I13]]
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast i8* [[GEP013]] to <4 x i8>*
; CHECK-NEXT:    [[TMP3:%.*]] = load <4 x i8>, <4 x i8>* [[TMP2]], align 1
; CHECK-NEXT:    [[I14:%.*]] = add i64 [[I]], 7
; CHECK-NEXT:    [[GEP039:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I14]]
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast i8* [[GEP015]] to <4 x i8>*
; CHECK-NEXT:    [[TMP5:%.*]] = load <4 x i8>, <4 x i8>* [[TMP4]], align 1
; CHECK-NEXT:    [[I15:%.*]] = add i64 [[I1]], 7
; CHECK-NEXT:    [[GEP041:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I15]]
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast i8* [[GEP017]] to <4 x i8>*
; CHECK-NEXT:    [[TMP7:%.*]] = load <4 x i8>, <4 x i8>* [[TMP6]], align 1
; CHECK-NEXT:    [[TMP8:%.*]] = zext <4 x i8> [[TMP1]] to <4 x i32>
; CHECK-NEXT:    [[TMP9:%.*]] = zext <4 x i8> [[TMP7]] to <4 x i32>
; CHECK-NEXT:    [[TMP10:%.*]] = zext <4 x i8> [[TMP3]] to <4 x i32>
; CHECK-NEXT:    [[TMP11:%.*]] = zext <4 x i8> [[TMP5]] to <4 x i32>
; CHECK-NEXT:    [[TMP12:%.*]] = shl nuw nsw <4 x i32> [[TMP9]], <i32 16, i32 16, i32 16, i32 16>
; CHECK-NEXT:    [[TMP13:%.*]] = shl nuw nsw <4 x i32> [[TMP11]], <i32 16, i32 16, i32 16, i32 16>
; CHECK-NEXT:    [[TMP14:%.*]] = or <4 x i32> [[TMP12]], [[TMP10]]
; CHECK-NEXT:    [[TMP15:%.*]] = sub nsw <4 x i32> [[TMP13]], [[TMP14]]
; CHECK-NEXT:    [[TMP16:%.*]] = add nsw <4 x i32> [[TMP15]], [[TMP8]]
; CHECK-NEXT:    [[GEP043:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[R:%.*]], i64 0, i64 [[I1_I64_0]], i64 0
; CHECK-NEXT:    [[GEP045:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[R]], i64 0, i64 [[I1_I64_0]], i64 2
; CHECK-NEXT:    [[GEP063:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[R]], i64 0, i64 [[I1_I64_0]], i64 1
; CHECK-NEXT:    [[GEP081:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[R]], i64 0, i64 [[I1_I64_0]], i64 3
; CHECK-NEXT:    [[TMP17:%.*]] = extractelement <4 x i32> [[TMP16]], i32 3
; CHECK-NEXT:    [[TMP18:%.*]] = insertelement <2 x i32> poison, i32 [[TMP17]], i32 0
; CHECK-NEXT:    [[TMP19:%.*]] = extractelement <4 x i32> [[TMP16]], i32 0
; CHECK-NEXT:    [[TMP20:%.*]] = insertelement <2 x i32> [[TMP18]], i32 [[TMP19]], i32 1
; CHECK-NEXT:    [[SHUFFLE:%.*]] = shufflevector <2 x i32> [[TMP20]], <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 1>
; CHECK-NEXT:    [[TMP21:%.*]] = extractelement <4 x i32> [[TMP16]], i32 1
; CHECK-NEXT:    [[TMP22:%.*]] = insertelement <2 x i32> poison, i32 [[TMP21]], i32 0
; CHECK-NEXT:    [[TMP23:%.*]] = insertelement <2 x i32> [[TMP22]], i32 [[TMP17]], i32 1
; CHECK-NEXT:    [[SHUFFLE1:%.*]] = shufflevector <2 x i32> [[TMP23]], <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 0>
; CHECK-NEXT:    [[TMP24:%.*]] = add nsw <4 x i32> [[SHUFFLE]], [[SHUFFLE1]]
; CHECK-NEXT:    [[TMP25:%.*]] = sub nsw <4 x i32> [[SHUFFLE]], [[SHUFFLE1]]
; CHECK-NEXT:    [[TMP26:%.*]] = shufflevector <4 x i32> [[TMP24]], <4 x i32> [[TMP25]], <4 x i32> <i32 0, i32 5, i32 2, i32 7>
; CHECK-NEXT:    [[TMP27:%.*]] = extractelement <4 x i32> [[TMP16]], i32 2
; CHECK-NEXT:    [[TMP28:%.*]] = insertelement <2 x i32> poison, i32 [[TMP27]], i32 0
; CHECK-NEXT:    [[TMP29:%.*]] = insertelement <2 x i32> [[TMP28]], i32 [[TMP17]], i32 1
; CHECK-NEXT:    [[SHUFFLE2:%.*]] = shufflevector <2 x i32> [[TMP29]], <2 x i32> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 0>
; CHECK-NEXT:    [[TMP30:%.*]] = add nsw <4 x i32> [[TMP26]], [[SHUFFLE2]]
; CHECK-NEXT:    [[TMP31:%.*]] = sub nsw <4 x i32> [[TMP26]], [[SHUFFLE2]]
; CHECK-NEXT:    [[TMP32:%.*]] = shufflevector <4 x i32> [[TMP30]], <4 x i32> [[TMP31]], <4 x i32> <i32 0, i32 1, i32 6, i32 7>
; CHECK-NEXT:    [[TMP33:%.*]] = add <4 x i32> [[TMP32]], [[TMP16]]
; CHECK-NEXT:    [[TMP34:%.*]] = sub <4 x i32> [[TMP32]], [[TMP16]]
; CHECK-NEXT:    [[TMP35:%.*]] = shufflevector <4 x i32> [[TMP33]], <4 x i32> [[TMP34]], <4 x i32> <i32 0, i32 5, i32 6, i32 3>
; CHECK-NEXT:    [[TMP36:%.*]] = bitcast i32* [[GEP043]] to <4 x i32>*
; CHECK-NEXT:    store <4 x i32> [[TMP35]], <4 x i32>* [[TMP36]], align 4
; CHECK-NEXT:    [[NEXTIVLOOP_1247]] = add nuw nsw i64 [[I1_I64_0]], 1
; CHECK-NEXT:    [[CONDLOOP_1247:%.*]] = icmp ult i64 [[I1_I64_0]], 15
; CHECK-NEXT:    br i1 [[CONDLOOP_1247]], label [[LOOP_1247]], label [[AFTERLOOP_1247:%.*]]
; CHECK:       afterloop.1247:
; CHECK-NEXT:    ret i32 0
;
; WOIC-LABEL: @x264_pixel_satd_16x16(
; WOIC-NEXT:  entry:
; WOIC-NEXT:    [[IDX_EXT_I:%.*]] = sext i32 [[I_PIX1:%.*]] to i64
; WOIC-NEXT:    [[IDX_EXT63_I:%.*]] = sext i32 [[I_PIX2:%.*]] to i64
; WOIC-NEXT:    br label [[LOOP_1247:%.*]]
; WOIC:       loop.1247:
; WOIC-NEXT:    [[I1_I64_0:%.*]] = phi i64 [ 0, [[ENTRY:%.*]] ], [ [[NEXTIVLOOP_1247:%.*]], [[LOOP_1247]] ]
; WOIC-NEXT:    [[I:%.*]] = mul i64 [[I1_I64_0]], [[IDX_EXT_I]]
; WOIC-NEXT:    [[GEP:%.*]] = getelementptr inbounds i8, i8* [[PIX1:%.*]], i64 [[I]]
; WOIC-NEXT:    [[I1:%.*]] = mul i64 [[I1_I64_0]], [[IDX_EXT63_I]]
; WOIC-NEXT:    [[GEP013:%.*]] = getelementptr inbounds i8, i8* [[PIX2:%.*]], i64 [[I1]]
; WOIC-NEXT:    [[I2:%.*]] = add i64 [[I]], 4
; WOIC-NEXT:    [[GEP015:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I2]]
; WOIC-NEXT:    [[I3:%.*]] = add i64 [[I1]], 4
; WOIC-NEXT:    [[GEP017:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I3]]
; WOIC-NEXT:    [[I4:%.*]] = add i64 [[I]], 1
; WOIC-NEXT:    [[GEP019:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I4]]
; WOIC-NEXT:    [[I5:%.*]] = add i64 [[I1]], 1
; WOIC-NEXT:    [[GEP021:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I5]]
; WOIC-NEXT:    [[I6:%.*]] = add i64 [[I]], 5
; WOIC-NEXT:    [[GEP023:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I6]]
; WOIC-NEXT:    [[I7:%.*]] = add i64 [[I1]], 5
; WOIC-NEXT:    [[GEP025:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I7]]
; WOIC-NEXT:    [[I8:%.*]] = add i64 [[I]], 2
; WOIC-NEXT:    [[GEP027:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I8]]
; WOIC-NEXT:    [[I9:%.*]] = add i64 [[I1]], 2
; WOIC-NEXT:    [[GEP029:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I9]]
; WOIC-NEXT:    [[I10:%.*]] = add i64 [[I]], 6
; WOIC-NEXT:    [[GEP031:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I10]]
; WOIC-NEXT:    [[I11:%.*]] = add i64 [[I1]], 6
; WOIC-NEXT:    [[GEP033:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I11]]
; WOIC-NEXT:    [[I12:%.*]] = add i64 [[I]], 3
; WOIC-NEXT:    [[GEP035:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I12]]
; WOIC-NEXT:    [[TMP0:%.*]] = bitcast i8* [[GEP]] to <4 x i8>*
; WOIC-NEXT:    [[TMP1:%.*]] = load <4 x i8>, <4 x i8>* [[TMP0]], align 1
; WOIC-NEXT:    [[I13:%.*]] = add i64 [[I1]], 3
; WOIC-NEXT:    [[GEP037:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I13]]
; WOIC-NEXT:    [[TMP2:%.*]] = bitcast i8* [[GEP013]] to <4 x i8>*
; WOIC-NEXT:    [[TMP3:%.*]] = load <4 x i8>, <4 x i8>* [[TMP2]], align 1
; WOIC-NEXT:    [[I14:%.*]] = add i64 [[I]], 7
; WOIC-NEXT:    [[GEP039:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I14]]
; WOIC-NEXT:    [[TMP4:%.*]] = bitcast i8* [[GEP015]] to <4 x i8>*
; WOIC-NEXT:    [[TMP5:%.*]] = load <4 x i8>, <4 x i8>* [[TMP4]], align 1
; WOIC-NEXT:    [[I15:%.*]] = add i64 [[I1]], 7
; WOIC-NEXT:    [[GEP041:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I15]]
; WOIC-NEXT:    [[TMP6:%.*]] = bitcast i8* [[GEP017]] to <4 x i8>*
; WOIC-NEXT:    [[TMP7:%.*]] = load <4 x i8>, <4 x i8>* [[TMP6]], align 1
; WOIC-NEXT:    [[TMP8:%.*]] = zext <4 x i8> [[TMP1]] to <4 x i32>
; WOIC-NEXT:    [[TMP9:%.*]] = zext <4 x i8> [[TMP7]] to <4 x i32>
; WOIC-NEXT:    [[TMP10:%.*]] = zext <4 x i8> [[TMP3]] to <4 x i32>
; WOIC-NEXT:    [[TMP11:%.*]] = zext <4 x i8> [[TMP5]] to <4 x i32>
; WOIC-NEXT:    [[TMP12:%.*]] = shl <4 x i32> [[TMP9]], <i32 16, i32 16, i32 16, i32 16>
; WOIC-NEXT:    [[TMP13:%.*]] = shl <4 x i32> [[TMP11]], <i32 16, i32 16, i32 16, i32 16>
; WOIC-NEXT:    [[TMP14:%.*]] = sub <4 x i32> [[TMP13]], [[TMP10]]
; WOIC-NEXT:    [[TMP15:%.*]] = sub <4 x i32> [[TMP14]], [[TMP12]]
; WOIC-NEXT:    [[TMP16:%.*]] = add <4 x i32> [[TMP15]], [[TMP8]]
; WOIC-NEXT:    [[GEP043:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[R:%.*]], i64 0, i64 [[I1_I64_0]], i64 0
; WOIC-NEXT:    [[GEP045:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[R]], i64 0, i64 [[I1_I64_0]], i64 2
; WOIC-NEXT:    [[GEP063:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[R]], i64 0, i64 [[I1_I64_0]], i64 1
; WOIC-NEXT:    [[GEP081:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[R]], i64 0, i64 [[I1_I64_0]], i64 3
; WOIC-NEXT:    [[TMP17:%.*]] = extractelement <4 x i32> [[TMP16]], i32 3
; WOIC-NEXT:    [[TMP18:%.*]] = insertelement <2 x i32> poison, i32 [[TMP17]], i32 0
; WOIC-NEXT:    [[TMP19:%.*]] = extractelement <4 x i32> [[TMP16]], i32 0
; WOIC-NEXT:    [[TMP20:%.*]] = insertelement <2 x i32> [[TMP18]], i32 [[TMP19]], i32 1
; WOIC-NEXT:    [[SHUFFLE:%.*]] = shufflevector <2 x i32> [[TMP20]], <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 1>
; WOIC-NEXT:    [[TMP21:%.*]] = extractelement <4 x i32> [[TMP16]], i32 1
; WOIC-NEXT:    [[TMP22:%.*]] = insertelement <2 x i32> poison, i32 [[TMP21]], i32 0
; WOIC-NEXT:    [[TMP23:%.*]] = insertelement <2 x i32> [[TMP22]], i32 [[TMP17]], i32 1
; WOIC-NEXT:    [[SHUFFLE1:%.*]] = shufflevector <2 x i32> [[TMP23]], <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 0>
; WOIC-NEXT:    [[TMP24:%.*]] = add <4 x i32> [[SHUFFLE]], [[SHUFFLE1]]
; WOIC-NEXT:    [[TMP25:%.*]] = sub <4 x i32> [[SHUFFLE]], [[SHUFFLE1]]
; WOIC-NEXT:    [[TMP26:%.*]] = shufflevector <4 x i32> [[TMP24]], <4 x i32> [[TMP25]], <4 x i32> <i32 0, i32 5, i32 2, i32 7>
; WOIC-NEXT:    [[TMP27:%.*]] = extractelement <4 x i32> [[TMP16]], i32 2
; WOIC-NEXT:    [[TMP28:%.*]] = insertelement <2 x i32> poison, i32 [[TMP27]], i32 0
; WOIC-NEXT:    [[TMP29:%.*]] = insertelement <2 x i32> [[TMP28]], i32 [[TMP17]], i32 1
; WOIC-NEXT:    [[SHUFFLE2:%.*]] = shufflevector <2 x i32> [[TMP29]], <2 x i32> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 0>
; WOIC-NEXT:    [[TMP30:%.*]] = add <4 x i32> [[TMP26]], [[SHUFFLE2]]
; WOIC-NEXT:    [[TMP31:%.*]] = sub <4 x i32> [[TMP26]], [[SHUFFLE2]]
; WOIC-NEXT:    [[TMP32:%.*]] = shufflevector <4 x i32> [[TMP30]], <4 x i32> [[TMP31]], <4 x i32> <i32 0, i32 1, i32 6, i32 7>
; WOIC-NEXT:    [[TMP33:%.*]] = add <4 x i32> [[TMP32]], [[TMP16]]
; WOIC-NEXT:    [[TMP34:%.*]] = sub <4 x i32> [[TMP32]], [[TMP16]]
; WOIC-NEXT:    [[TMP35:%.*]] = shufflevector <4 x i32> [[TMP33]], <4 x i32> [[TMP34]], <4 x i32> <i32 0, i32 5, i32 6, i32 3>
; WOIC-NEXT:    [[TMP36:%.*]] = bitcast i32* [[GEP043]] to <4 x i32>*
; WOIC-NEXT:    store <4 x i32> [[TMP35]], <4 x i32>* [[TMP36]], align 4
; WOIC-NEXT:    [[NEXTIVLOOP_1247]] = add nuw nsw i64 [[I1_I64_0]], 1
; WOIC-NEXT:    [[CONDLOOP_1247:%.*]] = icmp ult i64 [[NEXTIVLOOP_1247]], 16
; WOIC-NEXT:    br i1 [[CONDLOOP_1247]], label [[LOOP_1247]], label [[AFTERLOOP_1247:%.*]]
; WOIC:       afterloop.1247:
; WOIC-NEXT:    ret i32 0
;
entry:
  %idx.ext.i = sext i32 %i_pix1 to i64
  %idx.ext63.i = sext i32 %i_pix2 to i64
  br label %loop.1247

loop.1247:                                        ; preds = %loop.1247, %entry
  %i1.i64.0 = phi i64 [ 0, %entry ], [ %nextivloop.1247, %loop.1247 ]
  %i = mul i64 %i1.i64.0, %idx.ext.i
  %gep = getelementptr inbounds i8, i8* %pix1, i64 %i
  %load00 = load i8, i8* %gep, align 1
  %i1 = mul i64 %i1.i64.0, %idx.ext63.i
  %gep013 = getelementptr inbounds i8, i8* %pix2, i64 %i1
  %load014 = load i8, i8* %gep013, align 1
  %i2 = add i64 %i, 4
  %gep015 = getelementptr inbounds i8, i8* %pix1, i64 %i2
  %load016 = load i8, i8* %gep015, align 1
  %i3 = add i64 %i1, 4
  %gep017 = getelementptr inbounds i8, i8* %pix2, i64 %i3
  %load018 = load i8, i8* %gep017, align 1
  %i4 = add i64 %i, 1
  %gep019 = getelementptr inbounds i8, i8* %pix1, i64 %i4
  %load020 = load i8, i8* %gep019, align 1
  %i5 = add i64 %i1, 1
  %gep021 = getelementptr inbounds i8, i8* %pix2, i64 %i5
  %load022 = load i8, i8* %gep021, align 1
  %i6 = add i64 %i, 5
  %gep023 = getelementptr inbounds i8, i8* %pix1, i64 %i6
  %load024 = load i8, i8* %gep023, align 1
  %i7 = add i64 %i1, 5
  %gep025 = getelementptr inbounds i8, i8* %pix2, i64 %i7
  %load026 = load i8, i8* %gep025, align 1
  %i8 = add i64 %i, 2
  %gep027 = getelementptr inbounds i8, i8* %pix1, i64 %i8
  %load028 = load i8, i8* %gep027, align 1
  %i9 = add i64 %i1, 2
  %gep029 = getelementptr inbounds i8, i8* %pix2, i64 %i9
  %load030 = load i8, i8* %gep029, align 1
  %i10 = add i64 %i, 6
  %gep031 = getelementptr inbounds i8, i8* %pix1, i64 %i10
  %load032 = load i8, i8* %gep031, align 1
  %i11 = add i64 %i1, 6
  %gep033 = getelementptr inbounds i8, i8* %pix2, i64 %i11
  %load034 = load i8, i8* %gep033, align 1
  %i12 = add i64 %i, 3
  %gep035 = getelementptr inbounds i8, i8* %pix1, i64 %i12
  %load036 = load i8, i8* %gep035, align 1
  %i13 = add i64 %i1, 3
  %gep037 = getelementptr inbounds i8, i8* %pix2, i64 %i13
  %load038 = load i8, i8* %gep037, align 1
  %i14 = add i64 %i, 7
  %gep039 = getelementptr inbounds i8, i8* %pix1, i64 %i14
  %load040 = load i8, i8* %gep039, align 1
  %i15 = add i64 %i1, 7
  %gep041 = getelementptr inbounds i8, i8* %pix2, i64 %i15
  %load042 = load i8, i8* %gep041, align 1
  %i16 = zext i8 %load036 to i32
  %i17 = zext i8 %load028 to i32
  %i18 = zext i8 %load020 to i32
  %i19 = zext i8 %load00 to i32
  %i20 = zext i8 %load042 to i32
  %i21 = zext i8 %load034 to i32
  %i22 = zext i8 %load026 to i32
  %i23 = zext i8 %load018 to i32
  %i24 = zext i8 %load038 to i32
  %i25 = zext i8 %load030 to i32
  %i26 = zext i8 %load022 to i32
  %i27 = zext i8 %load014 to i32
  %i28 = zext i8 %load040 to i32
  %i29 = zext i8 %load032 to i32
  %i30 = zext i8 %load024 to i32
  %i31 = zext i8 %load016 to i32
  %i32 = shl i32 %i20, 16
  %i33 = shl i32 %i21, 16
  %i34 = shl i32 %i22, 16
  %i35 = shl i32 %i23, 16
  %i36 = shl i32 %i28, 16
  %i37 = shl i32 %i29, 16
  %i38 = shl i32 %i30, 16
  %i39 = shl i32 %i31, 16
  %N1 = sub i32 %i36, %i24
  %N2 = sub i32 %N1, %i32
  %N3 = add i32 %N2, %i16
  %N4 = sub i32 %i37, %i25
  %N5 = sub i32 %N4, %i33
  %N6 = add i32 %N5, %i17
  %N7 = sub i32 %i38, %i26
  %N8 = sub i32 %N7, %i34
  %N9 = add i32 %N8, %i18
  %N10 = sub i32 %i39, %i27
  %N11 = sub i32 %N10, %i35
  %N12 = add i32 %N11, %i19

  %gep043 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %R, i64 0, i64 %i1.i64.0, i64 0
  %N151 = add i32 %N12, %N9
  %N159 = add i32 %N151, %N6
  %N167 = add i32 %N159, %N3
  store i32 %N167, i32* %gep043, align 4

  %gep045 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %R, i64 0, i64 %i1.i64.0, i64 2
  %N156 = add i32 %N12, %N9
  %N164 = sub i32 %N156, %N6
  %N172 = sub i32 %N164, %N3
  store i32 %N172, i32* %gep045, align 4

  %gep063 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %R, i64 0, i64 %i1.i64.0, i64 1
  %N157 = sub i32 %N12, %N9
  %N165 = add i32 %N157, %N6
  %N173 = sub i32 %N165, %N3
  store i32 %N173, i32* %gep063, align 4

  %gep081 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %R, i64 0, i64 %i1.i64.0, i64 3
  %N158 = sub i32 %N12, %N9
  %N166 = sub i32 %N158, %N6
  %N174 = add i32 %N166, %N3
  store i32 %N174, i32* %gep081, align 4

  %nextivloop.1247 = add nuw nsw i64 %i1.i64.0, 1
  %condloop.1247 = icmp ult i64 %nextivloop.1247, 16
  br i1 %condloop.1247, label %loop.1247, label %afterloop.1247

afterloop.1247:                                   ; preds = %loop.1247
  ret i32 0
}

