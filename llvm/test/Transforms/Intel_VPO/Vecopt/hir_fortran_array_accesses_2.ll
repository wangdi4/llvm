; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; Check VPlan decomposition and codegen approaches for a simple Fortran-based loop nest with
; struct accesses.

; RUN: opt -hir-ssa-deconstruction -hir-vec-dir-insert -hir-vplan-vec -vplan-print-after-plain-cfg -vplan-dump-subscript-details -disable-output< %s 2>&1 | FileCheck %s --check-prefix=VPLAN-IR
; RUN: opt -passes="hir-ssa-deconstruction,hir-vec-dir-insert,hir-vplan-vec" -vplan-print-after-plain-cfg -vplan-dump-subscript-details -disable-output< %s 2>&1 | FileCheck %s --check-prefix=VPLAN-IR

; RUN: opt -hir-ssa-deconstruction -hir-vec-dir-insert -hir-vplan-vec -vplan-force-vf=2 -print-after=hir-vplan-vec -disable-output < %s 2>&1 | FileCheck %s --check-prefixes=VPVALUE-CG,PM1
; RUN: opt -passes="hir-ssa-deconstruction,hir-vec-dir-insert,hir-vplan-vec" -vplan-force-vf=2 -print-after=hir-vplan-vec -disable-output < %s 2>&1 | FileCheck %s --check-prefixes=VPVALUE-CG,PM2


target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.A = type { i32, i32 }

@a = common dso_local local_unnamed_addr global [10 x %struct.A] zeroinitializer, align 16

define dso_local void @foo(i32 %n, %struct.A* noalias nocapture readonly %arr) {
; VPLAN-IR-LABEL:  VPlan after importing plain CFG:
; VPLAN-IR-NEXT:  VPlan IR for: foo:HIR
; VPLAN-IR-NEXT:  External Defs Start:
; VPLAN-IR-DAG:     [[VP0:%.*]] = {%arr}
; VPLAN-IR-NEXT:  External Defs End:
; VPLAN-IR-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; VPLAN-IR-NEXT:     br [[BB1:BB[0-9]+]]
; VPLAN-IR-EMPTY:
; VPLAN-IR-NEXT:    [[BB1]]: # preds: [[BB0]]
; VPLAN-IR-NEXT:     br [[BB2:BB[0-9]+]]
; VPLAN-IR-EMPTY:
; VPLAN-IR-NEXT:    [[BB2]]: # preds: [[BB1]], [[BB2]]
; VPLAN-IR-NEXT:     i64 [[VP1:%.*]] = phi  [ i64 0, [[BB1]] ],  [ i64 [[VP2:%.*]], [[BB2]] ]
; VPLAN-IR-NEXT:     i32 [[VP3:%.*]] = trunc i64 [[VP1]] to i32
; VPLAN-IR-NEXT:     i32 [[VP4:%.*]] = mul i32 10 i32 [[VP3]]
; VPLAN-IR-NEXT:     i32* [[VP_SUBSCRIPT:%.*]] = subscript inbounds %struct.A* [[ARR0:%.*]] {i64 0 : i64 0 : i64 16 : %struct.A*(%struct.A)} {i64 0 : i64 [[VP1]] : i64 8 : %struct.A*(%struct.A) (1 )}
; VPLAN-IR-NEXT:     store i32 [[VP4]] i32* [[VP_SUBSCRIPT]]
; VPLAN-IR-NEXT:     i64 [[VP2]] = add i64 [[VP1]] i64 1
; VPLAN-IR-NEXT:     i1 [[VP5:%.*]] = icmp slt i64 [[VP2]] i64 1024
; VPLAN-IR-NEXT:     br i1 [[VP5]], [[BB2]], [[BB3:BB[0-9]+]]
; VPLAN-IR-EMPTY:
; VPLAN-IR-NEXT:    [[BB3]]: # preds: [[BB2]]
; VPLAN-IR-NEXT:     br [[BB4:BB[0-9]+]]
; VPLAN-IR-EMPTY:
; VPLAN-IR-NEXT:    [[BB4]]: # preds: [[BB3]]
; VPLAN-IR-NEXT:     br <External Block>
;
; PM1:         IR Dump After VPlan HIR Vectorizer
; PM2:         IR Dump After{{.+}}VPlan{{.*}}Driver{{.*}}HIR{{.*}}
; VPVALUE-CG-NEXT:  Function: foo
; VPVALUE-CG-EMPTY:
; VPVALUE-CG-NEXT:            BEGIN REGION { modified }
; VPVALUE-CG-NEXT:                 + DO i1 = 0, 1023, 2   <DO_LOOP> <auto-vectorized> <novectorize>
; VPVALUE-CG-NEXT:                 |   (<2 x i32>*)([[ARR0:%.*]])[0][i1 + <i64 0, i64 1>].1 = 10 * i1 + 10 * <i32 0, i32 1>
; VPVALUE-CG-NEXT:                 + END LOOP
; VPVALUE-CG-NEXT:            END REGION
;
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  ret void

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %outer = call %struct.A* @llvm.intel.subscript.p0s_struct.As.i64.i64.p0s_struct.As.i64(i8 1, i64 0, i64 16, %struct.A* elementtype(%struct.A) %arr, i64 0)
  %inner = call %struct.A* @llvm.intel.subscript.p0s_struct.As.i64.i64.p0s_struct.As.i64(i8 0, i64 0, i64 8, %struct.A* elementtype(%struct.A) %outer, i64 %indvars.iv)
  %field.gep = getelementptr inbounds %struct.A, %struct.A* %inner, i64 0, i32 1
  %iv.trunc = trunc i64 %indvars.iv to i32
  %mul.iv = mul nuw nsw i32 %iv.trunc, 10
  store i32 %mul.iv, i32* %field.gep, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 1024
  br i1 %exitcond, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind readnone speculatable
declare %struct.A* @llvm.intel.subscript.p0s_struct.As.i64.i64.p0s_struct.As.i64(i8, i64, i64, %struct.A*, i64) #0

attributes #0 = { nounwind readnone speculatable }
