; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -VPlanDriver -S -enable-vp-value-codegen=false %s | FileCheck %s --check-prefix=CHECK-LLVM

; CHECK-LLVM-LABEL: @reduction_add(
; CHECK-LLVM:       entry:
; CHECK-LLVM:         [[SUM_VEC:%.*]] = alloca <8 x i32>, align 4
; CHECK-LLVM:       vector.ph:
; CHECK-LLVM-NEXT:    [[SUMINITVAL:%.*]] = load i32, i32* [[SUM:%.*]]
; CHECK-LLVM-NEXT:    [[TMP3:%.*]] = insertelement <8 x i32> zeroinitializer, i32 [[SUMINITVAL]], i32 0
; CHECK-LLVM-NEXT:    store <8 x i32> [[TMP3]], <8 x i32>* [[SUM_VEC]]
; CHECK-LLVM-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK-LLVM:       vector.body:
; CHECK-LLVM:         [[SCALAR_GEP_:%.*]] = getelementptr inbounds [1999 x i32], [1999 x i32]* [[A:%.*]], i64 0, i64 [[INDEX:%.*]]
; CHECK-LLVM-NEXT:    [[TMP4:%.*]] = bitcast i32* [[SCALAR_GEP_]] to <8 x i32>*
; CHECK-LLVM-NEXT:    [[WIDE_LOAD:%.*]] = load <8 x i32>, <8 x i32>* [[TMP4]], align 4
; CHECK-LLVM-NEXT:    [[TMP5:%.*]] = icmp slt <8 x i32> [[WIDE_LOAD]], <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
; CHECK-LLVM-NEXT:    [[WIDE_LOAD1:%.*]] = load <8 x i32>, <8 x i32>* [[SUM_VEC]], align 4
; CHECK-LLVM-NEXT:    [[TMP6:%.*]] = add nsw <8 x i32> [[WIDE_LOAD1]], [[WIDE_LOAD]]
; CHECK-LLVM-NEXT:    call void @llvm.masked.store.v8i32.p0v8i32(<8 x i32> [[TMP6]], <8 x i32>* [[SUM_VEC]], i32 4, <8 x i1> [[TMP5]])
; CHECK-LLVM:       VPlannedBB:
; CHECK-LLVM-NEXT:    br label [[MIDDLE_BLOCK:%.*]]
; CHECK-LLVM:       middle.block:
; CHECK-LLVM-NEXT:    [[RED_VEC:%.*]] = load <8 x i32>, <8 x i32>* [[SUM_VEC]]
; CHECK-LLVM-NEXT:    [[RDX_SHUF:%.*]] = shufflevector <8 x i32> [[RED_VEC]], <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
; CHECK-LLVM-NEXT:    [[BIN_RDX:%.*]] = add <8 x i32> [[RED_VEC]], [[RDX_SHUF]]
; CHECK-LLVM-NEXT:    [[RDX_SHUF2:%.*]] = shufflevector <8 x i32> [[BIN_RDX]], <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
; CHECK-LLVM-NEXT:    [[BIN_RDX3:%.*]] = add <8 x i32> [[BIN_RDX]], [[RDX_SHUF2]]
; CHECK-LLVM-NEXT:    [[RDX_SHUF4:%.*]] = shufflevector <8 x i32> [[BIN_RDX3]], <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
; CHECK-LLVM-NEXT:    [[BIN_RDX5:%.*]] = add <8 x i32> [[BIN_RDX3]], [[RDX_SHUF4]]
; CHECK-LLVM-NEXT:    [[TMP11:%.*]] = extractelement <8 x i32> [[BIN_RDX5]], i32 0
; CHECK-LLVM-NEXT:    store i32 [[TMP11]], i32* [[SUM]]

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"
@.str = private unnamed_addr addrspace(2) constant [10 x i8] c"Min = %d\0A\00", align 1

define void @reduction_add(i32 %thread_id_from_which_to_print_message) #0 {
entry:
  %Sum = alloca i32, align 4
  %A = alloca [1999 x i32], align 4
  %call = tail call i64 @_Z13get_global_idj(i32 0) #5
  %conv = trunc i64 %call to i32
  %cmp = icmp eq i32 %conv, %thread_id_from_which_to_print_message
  br i1 %cmp, label %if.then, label %if.end18

if.then:                                          ; preds = %entry
  store i32 0, i32* %Sum, align 4
  br label %for.body

for.body:                                         ; preds = %if.then, %for.body
  %indvars.iv3 = phi i64 [ 0, %if.then ], [ %indvars.iv.next4, %for.body ]
  %0 = shl i64 %indvars.iv3, 1
  %1 = add nsw i64 %0, -100
  %arrayidx = getelementptr inbounds [1999 x i32], [1999 x i32]* %A, i64 0, i64 %indvars.iv3
  %2 = trunc i64 %1 to i32
  store i32 %2, i32* %arrayidx, align 4
  %indvars.iv.next4 = add nuw nsw i64 %indvars.iv3, 1
  %exitcond7 = icmp ne i64 %indvars.iv.next4, 1999
  br i1 %exitcond7, label %for.body, label %for.end

for.end:                                          ; preds = %for.body
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.SIMDLEN"(i32 8), "QUAL.OMP.REDUCTION.ADD"(i32* %Sum) ]
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %for.end, %omp.inner.for.inc
  %indvars.iv = phi i64 [ 0, %for.end ], [ %indvars.iv.next, %omp.inner.for.inc ]
  %arrayidx9 = getelementptr inbounds [1999 x i32], [1999 x i32]* %A, i64 0, i64 %indvars.iv
  %3 = load i32, i32* %arrayidx9, align 4
  %cmp10 = icmp slt i32 %3, 5
  br i1 %cmp10, label %if.then12, label %omp.inner.for.inc

if.then12:                                        ; preds = %omp.inner.for.body
  %4 = load i32, i32* %Sum, align 4
  %add15 = add nsw i32 %4, %3
  store i32 %add15, i32* %Sum, align 4
  br label %omp.inner.for.inc

omp.inner.for.inc:                                ; preds = %if.then12, %omp.inner.for.body
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 1999
  br i1 %exitcond, label %omp.inner.for.body, label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.inner.for.inc
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.QUAL.LIST.END.1

DIR.QUAL.LIST.END.1:                              ; preds = %omp.loop.exit
  %5 = load i32, i32* %Sum, align 4
  %call17 = call i32 (i8 addrspace(2)*, ...) @printf(i8 addrspace(2)* nonnull getelementptr inbounds ([10 x i8], [10 x i8] addrspace(2)* @.str, i64 0, i64 0), i32 %5) #2
  br label %if.end18

if.end18:                                         ; preds = %DIR.QUAL.LIST.END.1, %entry
  ret void
}

; Function Attrs: argmemonly nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: argmemonly nounwind
declare void @llvm.directive.region.exit(token) #1

; Function Attrs: nounwind
declare i32 @printf(i8 addrspace(2)*, ...)
declare i64 @_Z13get_global_idj(i32)


