; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; Checks if tree conflict is lowered to double permute tree reduction

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; RUN: opt -S -enable-new-pm=0 -mattr=+avx512vl,+avx512cd -vplan-force-vf=4 -hir-ssa-deconstruction -hir-temp-cleanup -hir-vec-dir-insert -hir-vplan-vec -print-after=hir-vplan-vec -disable-output < %s 2>&1 -vplan-enable-new-cfg-merge-hir=0 | FileCheck %s --check-prefix=CHECK-VF4
; RUN: opt -S -mattr=+avx512vl,+avx512cd -vplan-force-vf=4 -passes="hir-ssa-deconstruction,hir-temp-cleanup,hir-vec-dir-insert,hir-vplan-vec" -print-after=hir-vplan-vec -disable-output < %s 2>&1 -vplan-enable-new-cfg-merge-hir=0 | FileCheck %s --check-prefix=CHECK-VF4
; RUN: opt -S -enable-new-pm=0 -mattr=+avx512vl,+avx512cd -vplan-force-vf=8 -hir-ssa-deconstruction -hir-temp-cleanup -hir-vec-dir-insert -hir-vplan-vec -print-after=hir-vplan-vec -disable-output < %s 2>&1 -vplan-enable-new-cfg-merge-hir=0 | FileCheck %s --check-prefix=CHECK-VF8
; RUN: opt -S -mattr=+avx512vl,+avx512cd -vplan-force-vf=8 -passes="hir-ssa-deconstruction,hir-temp-cleanup,hir-vec-dir-insert,hir-vplan-vec" -print-after=hir-vplan-vec -disable-output < %s 2>&1 -vplan-enable-new-cfg-merge-hir=0 | FileCheck %s --check-prefix=CHECK-VF8

; RUN: opt -S -enable-new-pm=0 -mattr=+avx512vl,+avx512cd -vplan-force-vf=4 -hir-ssa-deconstruction -hir-temp-cleanup -hir-vec-dir-insert -hir-vplan-vec -print-after=hir-vplan-vec -disable-output < %s 2>&1 -vplan-enable-new-cfg-merge-hir | FileCheck %s --check-prefix=CHECK-VF4
; RUN: opt -S -mattr=+avx512vl,+avx512cd -vplan-force-vf=4 -passes="hir-ssa-deconstruction,hir-temp-cleanup,hir-vec-dir-insert,hir-vplan-vec" -print-after=hir-vplan-vec -disable-output < %s 2>&1 -vplan-enable-new-cfg-merge-hir | FileCheck %s --check-prefix=CHECK-VF4
; RUN: opt -S -enable-new-pm=0 -mattr=+avx512vl,+avx512cd -vplan-force-vf=8 -hir-ssa-deconstruction -hir-temp-cleanup -hir-vec-dir-insert -hir-vplan-vec -print-after=hir-vplan-vec -disable-output < %s 2>&1 -vplan-enable-new-cfg-merge-hir | FileCheck %s --check-prefix=CHECK-VF8
; RUN: opt -S -mattr=+avx512vl,+avx512cd -vplan-force-vf=8 -passes="hir-ssa-deconstruction,hir-temp-cleanup,hir-vec-dir-insert,hir-vplan-vec" -print-after=hir-vplan-vec -disable-output < %s 2>&1 -vplan-enable-new-cfg-merge-hir | FileCheck %s --check-prefix=CHECK-VF8

; Function Attrs: nofree norecurse nosync nounwind uwtable
define dso_local void @foo(i64* noalias nocapture noundef %A, i32* nocapture noundef readonly %B, i64* noalias nocapture noundef readonly %C, i32 noundef %N) local_unnamed_addr #0 {
;
; long A[N], C[N];
; int B[N]; // conflict idx
; for (int i=0; i<N; ++i) {
;   int index = B[i];
;   A[index] = A[index] + C[i];
; }
;
; CHECK-VF4-LABEL:  Function: foo
; CHECK-VF4-EMPTY:
; CHECK-VF4-NEXT:  BEGIN REGION { modified }
; CHECK-VF4:                + DO i1 = 0, {{.*}}, 4   <DO_LOOP>  <MAX_TC_EST = 536870911>  <LEGAL_MAX_TC = 536870911> <auto-vectorized> <nounroll> <novectorize>
; CHECK-VF4-NEXT:           |   [[DOTVEC0:%.*]] = (<4 x i32>*)([[B0:%.*]])[i1]
; CHECK-VF4-NEXT:           |   [[DOTVEC10:%.*]] = (<4 x i64>*)([[A0:%.*]])[[[DOTVEC0]]]
; CHECK-VF4-NEXT:           |   [[DOTVEC20:%.*]] = (<4 x i64>*)([[C0:%.*]])[i1]
; CHECK-VF4-NEXT:           |   [[CONFLICTS0:%.*]] = @llvm.x86.avx512.conflict.q.256([[DOTVEC0]])
; CHECK-VF4-NEXT:           |   [[LLVM_CTLZ_V4I640:%.*]] = @llvm.ctlz.v4i64([[CONFLICTS0]],  0)
; CHECK-VF4-NEXT:           |   [[DOTVEC30:%.*]] = 63  -  [[LLVM_CTLZ_V4I640]]
; CHECK-VF4-NEXT:           |   [[DOTVEC40:%.*]] = [[DOTVEC30]] != -1
; CHECK-VF4-NEXT:           |   [[TMP0:%.*]] = bitcast.<4 x i1>.i4([[DOTVEC40]])
; CHECK-VF4-NEXT:           |   [[CMP0:%.*]] = [[TMP0]] == 0
; CHECK-VF4-NEXT:           |   [[ALL_ZERO_CHECK0:%.*]] = [[CMP0]]
; CHECK-VF4-NEXT:           |   [[PHI_TEMP0:%.*]] = [[DOTVEC20]]
; CHECK-VF4-NEXT:           |   if ([[CMP0]] == 1)
; CHECK-VF4-NEXT:           |   {
; CHECK-VF4-NEXT:           |      goto [[BB0:BB.*]];
; CHECK-VF4-NEXT:           |   }
; CHECK-VF4-NEXT:           |   [[PHI_TEMP50:%.*]] = [[DOTVEC30]]
; CHECK-VF4-NEXT:           |   [[PHI_TEMP70:%.*]] = [[DOTVEC20]]
; CHECK-VF4-NEXT:           |   [[PHI_TEMP90:%.*]] = [[DOTVEC40]]
; CHECK-VF4-NEXT:           |
; CHECK-VF4-NEXT:           |   + UNKNOWN LOOP i2 <novectorize>
; CHECK-VF4-NEXT:           |   |   <i2 = 0>
; CHECK-VF4-NEXT:           |   |   [[BB1:BB.*]]:
; CHECK-VF4-NEXT:           |   |   [[PERMUTE0:%.*]] = @llvm.x86.avx512.permvar.di.256([[PHI_TEMP70]],  [[PHI_TEMP50]])
; CHECK-VF4-NEXT:           |   |   [[DOTVEC110:%.*]] = [[PHI_TEMP90]] == -1
; CHECK-VF4-NEXT:           |   |   [[DOTVEC120:%.*]] = ([[PHI_TEMP90]] == -1) ? [[PERMUTE0]] : 0
; CHECK-VF4-NEXT:           |   |   [[DOTVEC130:%.*]] = ([[PHI_TEMP90]] == -1) ? [[PHI_TEMP70]] + [[DOTVEC120]] : [[PHI_TEMP70]]
; CHECK-VF4-NEXT:           |   |   [[PERMUTE140:%.*]] = @llvm.x86.avx512.permvar.di.256([[PHI_TEMP50]],  [[PHI_TEMP50]])
; CHECK-VF4-NEXT:           |   |   [[DOTVEC150:%.*]] = ([[PHI_TEMP90]] == -1) ? [[PERMUTE140]] : [[PHI_TEMP50]]
; CHECK-VF4-NEXT:           |   |   [[DOTVEC160:%.*]] = [[DOTVEC150]] != -1
; CHECK-VF4-NEXT:           |   |   [[TMP1:%.*]] = bitcast.<4 x i1>.i4([[DOTVEC160]])
; CHECK-VF4-NEXT:           |   |   [[CMP170:%.*]] = [[TMP1]] == 0
; CHECK-VF4-NEXT:           |   |   [[ALL_ZERO_CHECK180:%.*]] = [[CMP170]]
; CHECK-VF4-NEXT:           |   |   [[DOTVEC190:%.*]] = [[ALL_ZERO_CHECK180]]  ^  -1
; CHECK-VF4-NEXT:           |   |   [[PHI_TEMP50]] = [[DOTVEC150]]
; CHECK-VF4-NEXT:           |   |   [[PHI_TEMP70]] = [[DOTVEC130]]
; CHECK-VF4-NEXT:           |   |   [[PHI_TEMP90]] = [[DOTVEC160]]
; CHECK-VF4-NEXT:           |   |   [[PHI_TEMP0]] = [[DOTVEC130]]
; CHECK-VF4-NEXT:           |   |   [[UNIFCOND240:%.*]] = extractelement [[DOTVEC190]],  0
; CHECK-VF4-NEXT:           |   |   if ([[UNIFCOND240]] == 1)
; CHECK-VF4-NEXT:           |   |   {
; CHECK-VF4-NEXT:           |   |      <i2 = i2 + 1>
; CHECK-VF4-NEXT:           |   |      goto [[BB1]];
; CHECK-VF4-NEXT:           |   |   }
; CHECK-VF4-NEXT:           |   + END LOOP
; CHECK-VF4-NEXT:           |
; CHECK-VF4-NEXT:           |   [[BB0]]:
; CHECK-VF4-NEXT:           |   (<4 x i64>*)([[A0]])[[[DOTVEC0]]] = [[DOTVEC10]] + [[PHI_TEMP0]]
; CHECK-VF4-NEXT:           + END LOOP
;
; CHECK-VF8-LABEL:  Function: foo
; CHECK-VF8-EMPTY:
; CHECK-VF8-NEXT:  BEGIN REGION { modified }
; CHECK-VF8:                + DO i1 = 0, {{.*}}, 8   <DO_LOOP>  <MAX_TC_EST = 268435455>  <LEGAL_MAX_TC = 268435455> <auto-vectorized> <nounroll> <novectorize>
; CHECK-VF8-NEXT:           |   [[DOTVEC0:%.*]] = (<8 x i32>*)([[B0:%.*]])[i1]
; CHECK-VF8-NEXT:           |   [[DOTVEC10:%.*]] = (<8 x i64>*)([[A0:%.*]])[[[DOTVEC0]]]
; CHECK-VF8-NEXT:           |   [[DOTVEC20:%.*]] = (<8 x i64>*)([[C0:%.*]])[i1]
; CHECK-VF8-NEXT:           |   [[CONFLICTS0:%.*]] = @llvm.x86.avx512.conflict.q.512([[DOTVEC0]])
; CHECK-VF8-NEXT:           |   [[LLVM_CTLZ_V8I640:%.*]] = @llvm.ctlz.v8i64([[CONFLICTS0]],  0)
; CHECK-VF8-NEXT:           |   [[DOTVEC30:%.*]] = 63  -  [[LLVM_CTLZ_V8I640]]
; CHECK-VF8-NEXT:           |   [[DOTVEC40:%.*]] = [[DOTVEC30]] != -1
; CHECK-VF8-NEXT:           |   [[TMP0:%.*]] = bitcast.<8 x i1>.i8([[DOTVEC40]])
; CHECK-VF8-NEXT:           |   [[CMP0:%.*]] = [[TMP0]] == 0
; CHECK-VF8-NEXT:           |   [[ALL_ZERO_CHECK0:%.*]] = [[CMP0]]
; CHECK-VF8-NEXT:           |   [[PHI_TEMP0:%.*]] = [[DOTVEC20]]
; CHECK-VF8-NEXT:           |   if ([[CMP0]] == 1)
; CHECK-VF8-NEXT:           |   {
; CHECK-VF8-NEXT:           |      goto [[BB0:BB.*]];
; CHECK-VF8-NEXT:           |   }
; CHECK-VF8-NEXT:           |   [[PHI_TEMP50:%.*]] = [[DOTVEC30]]
; CHECK-VF8-NEXT:           |   [[PHI_TEMP70:%.*]] = [[DOTVEC20]]
; CHECK-VF8-NEXT:           |   [[PHI_TEMP90:%.*]] = [[DOTVEC40]]
; CHECK-VF8-NEXT:           |
; CHECK-VF8-NEXT:           |   + UNKNOWN LOOP i2 <novectorize>
; CHECK-VF8-NEXT:           |   |   <i2 = 0>
; CHECK-VF8-NEXT:           |   |   [[BB1:BB.*]]:
; CHECK-VF8-NEXT:           |   |   [[PERMUTE0:%.*]] = @llvm.x86.avx512.permvar.di.512([[PHI_TEMP70]],  [[PHI_TEMP50]])
; CHECK-VF8-NEXT:           |   |   [[DOTVEC110:%.*]] = [[PHI_TEMP90]] == -1
; CHECK-VF8-NEXT:           |   |   [[DOTVEC120:%.*]] = ([[PHI_TEMP90]] == -1) ? [[PERMUTE0]] : 0
; CHECK-VF8-NEXT:           |   |   [[DOTVEC130:%.*]] = ([[PHI_TEMP90]] == -1) ? [[PHI_TEMP70]] + [[DOTVEC120]] : [[PHI_TEMP70]]
; CHECK-VF8-NEXT:           |   |   [[PERMUTE140:%.*]] = @llvm.x86.avx512.permvar.di.512([[PHI_TEMP50]],  [[PHI_TEMP50]])
; CHECK-VF8-NEXT:           |   |   [[DOTVEC150:%.*]] = ([[PHI_TEMP90]] == -1) ? [[PERMUTE140]] : [[PHI_TEMP50]]
; CHECK-VF8-NEXT:           |   |   [[DOTVEC160:%.*]] = [[DOTVEC150]] != -1
; CHECK-VF8-NEXT:           |   |   [[TMP1:%.*]] = bitcast.<8 x i1>.i8([[DOTVEC160]])
; CHECK-VF8-NEXT:           |   |   [[CMP170:%.*]] = [[TMP1]] == 0
; CHECK-VF8-NEXT:           |   |   [[ALL_ZERO_CHECK180:%.*]] = [[CMP170]]
; CHECK-VF8-NEXT:           |   |   [[DOTVEC190:%.*]] = [[ALL_ZERO_CHECK180]]  ^  -1
; CHECK-VF8-NEXT:           |   |   [[PHI_TEMP50]] = [[DOTVEC150]]
; CHECK-VF8-NEXT:           |   |   [[PHI_TEMP70]] = [[DOTVEC130]]
; CHECK-VF8-NEXT:           |   |   [[PHI_TEMP90]] = [[DOTVEC160]]
; CHECK-VF8-NEXT:           |   |   [[PHI_TEMP0]] = [[DOTVEC130]]
; CHECK-VF8-NEXT:           |   |   [[UNIFCOND240:%.*]] = extractelement [[DOTVEC190]],  0
; CHECK-VF8-NEXT:           |   |   if ([[UNIFCOND240]] == 1)
; CHECK-VF8-NEXT:           |   |   {
; CHECK-VF8-NEXT:           |   |      <i2 = i2 + 1>
; CHECK-VF8-NEXT:           |   |      goto [[BB1]];
; CHECK-VF8-NEXT:           |   |   }
; CHECK-VF8-NEXT:           |   + END LOOP
; CHECK-VF8-NEXT:           |
; CHECK-VF8-NEXT:           |   [[BB0]]:
; CHECK-VF8-NEXT:           |   (<8 x i64>*)([[A0]])[[[DOTVEC0]]] = [[DOTVEC10]] + [[PHI_TEMP0]]
; CHECK-VF8-NEXT:           + END LOOP
;
entry:
  %cmp14 = icmp sgt i32 %N, 0
  br i1 %cmp14, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count16 = zext i32 %N to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.body
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds i32, i32* %B, i64 %indvars.iv
  %0 = load i32, i32* %arrayidx, align 8
  %idxprom1 = sext i32 %0 to i64
  %arrayidx2 = getelementptr inbounds i64, i64* %A, i64 %idxprom1
  %1 = load i64, i64* %arrayidx2, align 4
  %arrayidx4 = getelementptr inbounds i64, i64* %C, i64 %indvars.iv
  %2 = load i64, i64* %arrayidx4, align 4
  %add = add i64 %2, %1
  store i64 %add, i64* %arrayidx2, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count16
  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body
}

attributes #0 = { nofree norecurse nosync nounwind uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "frame-pointer"="none" "loopopt-pipeline"="light" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "pre_loopopt" "stack-protector-buffer-size"="8" "target-cpu"="skylake-avx512" "target-features"="+adx,+aes,+avx,+avx2,+avx512bw,+avx512cd,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+clflushopt,+clwb,+crc32,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+pku,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves" "unsafe-fp-math"="true" "prefer-vector-width"="512" }
