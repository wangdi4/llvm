; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -vplan-force-vf=4 -S -vplan-vec -disable-vplan-predicator -instcombine < %s | FileCheck %s

;int inc_x;
;int foo(int * __restrict__ A, int N, int init) {
;  int x = init;
;#pragma omp simd
;  for (int i=0; i < N; i++) {
;    A[i] = x;
;    x += inc_x;
;  }
;  return x;
;}


target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"

@inc_x = common global i32 0, align 4

define i32 @foo(i32* noalias nocapture %A, i32 %N, i32 %init)  {
; CHECK-LABEL: @foo(
; CHECK:       VPlannedBB2:
; CHECK:         [[TMP6:%.*]] = shl i32 [[TMP0:%.*]], 2
; CHECK-NEXT:    [[IND_STEP_INIT_SPLATINSERT:%.*]] = insertelement <4 x i32> poison, i32 [[TMP6]], i32 0
; CHECK-NEXT:    [[IND_STEP_INIT_SPLAT:%.*]] = shufflevector <4 x i32> [[IND_STEP_INIT_SPLATINSERT]], <4 x i32> poison, <4 x i32> zeroinitializer
; CHECK:         br label [[VECTOR_BODY:%.*]]
; CHECK:       vector.body:
; CHECK:         [[VEC_PHI5:%.*]] = phi <4 x i32> [ [[TMP5:%.*]], [[VPLANNEDBB2:%.*]] ], [ [[TMP9:%.*]], [[VECTOR_BODY]] ]
; CHECK:         [[TMP9]] = add nsw <4 x i32> [[IND_STEP_INIT_SPLAT]], [[VEC_PHI5]]
;
entry:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %L1

L1:
  %cmp7 = icmp sgt i32 %N, 0
  br i1 %cmp7, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %entry
  %0 = load i32, i32* @inc_x, align 4
  %1 = mul i32 %0, %N
  %wide.trip.count = zext i32 %N to i64
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %x.08 = phi i32 [ %init, %for.body.lr.ph ], [ %add, %for.body ]
  %arrayidx = getelementptr inbounds i32, i32* %A, i64 %indvars.iv
  store i32 %x.08, i32* %arrayidx, align 4
  %add = add nsw i32 %0, %x.08
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond, label %for.cond.cleanup.loopexit, label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.body
  %2 = add i32 %1, %init
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  %x.0.lcssa = phi i32 [ %init, %L1 ], [ %2, %for.cond.cleanup.loopexit ]
  br label %DIR.OMP.END.SIMD.1

DIR.OMP.END.SIMD.1:                               ; preds = %for.cond.cleanup
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.QUAL.LIST.END.2

DIR.QUAL.LIST.END.2:                              ; preds = %DIR.OMP.END.SIMD.1
  ret i32 %x.0.lcssa
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
