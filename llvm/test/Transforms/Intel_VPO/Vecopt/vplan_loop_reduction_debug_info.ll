; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; REQUIRES: asserts
; RUN: opt -disable-output -passes=vplan-vec -vplan-dump-debug-loc -vplan-print-after-plain-cfg < %s 2>&1 | FileCheck %s --check-prefixes=CHECKPCFG
; RUN: opt -disable-output -passes=vplan-vec -vplan-dump-debug-loc -vplan-print-after-vpentity-instrs < %s 2>&1 | FileCheck %s --check-prefixes=CHECKVPE
; RUN: opt -disable-output -passes='hir-ssa-deconstruction,hir-vec-dir-insert,hir-vplan-vec,print<hir>' -vplan-dump-debug-loc -vplan-print-after-plain-cfg < %s 2>&1 | FileCheck %s --check-prefixes=CHECKHIRPCFG
; RUN: opt -disable-output -passes='hir-ssa-deconstruction,hir-vec-dir-insert,hir-vplan-vec,print<hir>' -vplan-dump-debug-loc -vplan-print-after-vpentity-instrs < %s 2>&1 | FileCheck %s --check-prefixes=CHECKHIRVPE

; RUN: opt -disable-output -passes="vplan-vec" -vplan-dump-debug-loc -vplan-print-after-plain-cfg < %s 2>&1 | FileCheck %s --check-prefixes=CHECKPCFG
; RUN: opt -disable-output -passes="vplan-vec" -vplan-dump-debug-loc -vplan-print-after-vpentity-instrs < %s 2>&1 | FileCheck %s --check-prefixes=CHECKVPE
; RUN: opt -disable-output -passes="hir-ssa-deconstruction,hir-vec-dir-insert,hir-vec-dir-insert,hir-vplan-vec" -vplan-dump-debug-loc -vplan-print-after-plain-cfg < %s 2>&1 | FileCheck %s --check-prefixes=CHECKHIRPCFG
; RUN: opt -disable-output -passes="hir-ssa-deconstruction,hir-vec-dir-insert,hir-vec-dir-insert,hir-vplan-vec" -vplan-dump-debug-loc -vplan-print-after-vpentity-instrs < %s 2>&1 | FileCheck %s --check-prefixes=CHECKHIRVPE

; Test debug location information on VPlan at specific points of vectorizer pipeline
; Original code source lines:
;     8      int s = 0;
;     9
;    10  #pragma omp simd reduction(+:s)
;    11      for (int i=0; i<N; i++) {
;    12         s += a[i];
;    13      }
;    14      return s;

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@a = dso_local local_unnamed_addr global [128 x i32] zeroinitializer, align 16, !dbg !0
; Function Attrs: nounwind uwtable mustprogress
define dso_local i32 @_Z3foov() local_unnamed_addr #0 !dbg !102 {
; CHECKPCFG-LABEL:  VPlan after importing plain CFG:
; CHECKPCFG-NEXT:  VPlan IR for: _Z3foov:omp.inner.for.body.#{{[0-9]+}}
; CHECKPCFG-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECKPCFG-NEXT:     br [[BB1:BB[0-9]+]]
; CHECKPCFG-NEXT:      DbgLoc:
; CHECKPCFG:         [[BB1]]: # preds: [[BB0]]
; CHECKPCFG-NEXT:     br [[BB2:BB[0-9]+]]
; CHECKPCFG-NEXT:      DbgLoc: sum.cpp:10:1
; CHECKPCFG:         [[BB2]]: # preds: [[BB1]], [[BB2]]
; CHECKPCFG-NEXT:     i64 [[VP_INDVARS_IV:%.*]] = phi  [ i64 0, [[BB1]] ],  [ i64 [[VP_INDVARS_IV_NEXT:%.*]], [[BB2]] ]
; CHECKPCFG-NEXT:      DbgLoc: sum.cpp:0
; CHECKPCFG-EMPTY:
; CHECKPCFG-NEXT:     i32 [[VP0:%.*]] = phi  [ i32 [[S_RED_PROMOTED0:%.*]], [[BB1]] ],  [ i32 [[VP_ADD1:%.*]], [[BB2]] ]
; CHECKPCFG-NEXT:      DbgLoc: sum.cpp:0
; CHECKPCFG-EMPTY:
; CHECKPCFG-NEXT:     call metadata i64 [[INDVARS_IV0:%.*]] metadata !107 metadata !DIExpression() void (metadata, metadata, metadata)* @llvm.dbg.value
; CHECKPCFG-NEXT:      DbgLoc: sum.cpp:0
; CHECKPCFG-EMPTY:
; CHECKPCFG-NEXT:     call i64 4 i8* [[TMP1:%.*]] void (i64, i8*)* @llvm.lifetime.start.p0i8
; CHECKPCFG-NEXT:      DbgLoc: sum.cpp:10:1
; CHECKPCFG-EMPTY:
; CHECKPCFG-NEXT:     i32* [[VP_ARRAYIDX:%.*]] = getelementptr inbounds [128 x i32]* @a i64 0 i64 [[VP_INDVARS_IV]]
; CHECKPCFG-NEXT:      DbgLoc: sum.cpp:12:13
; CHECKPCFG-EMPTY:
; CHECKPCFG-NEXT:     i32 [[VP1:%.*]] = load i32* [[VP_ARRAYIDX]]
; CHECKPCFG-NEXT:      DbgLoc: sum.cpp:12:13
; CHECKPCFG-EMPTY:
; CHECKPCFG-NEXT:     i32 [[VP_ADD1]] = add i32 [[VP0]] i32 [[VP1]]
; CHECKPCFG-NEXT:      DbgLoc: sum.cpp:12:10
; CHECKPCFG-EMPTY:
; CHECKPCFG-NEXT:     call i64 4 i8* [[TMP1]] void (i64, i8*)* @llvm.lifetime.end.p0i8
; CHECKPCFG-NEXT:      DbgLoc: sum.cpp:13:5
; CHECKPCFG-EMPTY:
; CHECKPCFG-NEXT:     i64 [[VP_INDVARS_IV_NEXT]] = add i64 [[VP_INDVARS_IV]] i64 1
; CHECKPCFG-NEXT:      DbgLoc: sum.cpp:11:5
; CHECKPCFG-EMPTY:
; CHECKPCFG-NEXT:     call metadata i64 [[INDVARS_IV_NEXT0:%.*]] metadata !107 metadata !DIExpression() void (metadata, metadata, metadata)* @llvm.dbg.value
; CHECKPCFG-NEXT:      DbgLoc: sum.cpp:0
; CHECKPCFG-EMPTY:
; CHECKPCFG-NEXT:     i1 [[VP_EXITCOND_NOT:%.*]] = icmp eq i64 [[VP_INDVARS_IV_NEXT]] i64 128
; CHECKPCFG-NEXT:      DbgLoc: sum.cpp:11:5
; CHECKPCFG-EMPTY:
; CHECKPCFG-NEXT:     br i1 [[VP_EXITCOND_NOT]], [[BB3:BB[0-9]+]], [[BB2]]
; CHECKPCFG-NEXT:      DbgLoc: sum.cpp:10:1
; CHECKPCFG:         [[BB3]]: # preds: [[BB2]]
; CHECKPCFG-NEXT:     br [[BB4:BB[0-9]+]]
; CHECKPCFG-NEXT:      DbgLoc: sum.cpp:12:10
; CHECKPCFG:         [[BB4]]: # preds: [[BB3]]
; CHECKPCFG-NEXT:     br <External Block>
; CHECKPCFG-NEXT:      DbgLoc:
; CHECKPCFG:       External Uses:
; CHECKPCFG-NEXT:  Id: 0     [[ADD1_LCSSA0:%.*]] = phi i32 [ [[ADD10:%.*]], [[OMP_INNER_FOR_BODY0:%.*]] ], !dbg !124 i32 [[VP_ADD1]] -> i32 [[ADD10]]
;
; CHECKVPE-LABEL:  VPlan after insertion of VPEntities instructions:
; CHECKVPE-NEXT:  VPlan IR for: _Z3foov:omp.inner.for.body.#{{[0-9]+}}
; CHECKVPE-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECKVPE-NEXT:     br [[BB1:BB[0-9]+]]
; CHECKVPE-NEXT:      DbgLoc:
; CHECKVPE:         [[BB1]]: # preds: [[BB0]]
; CHECKVPE-NEXT:     i32 [[VP_S_REDRED_INIT:%.*]] = reduction-init i32 0 i32 [[S_RED_PROMOTED0:%.*]]
; CHECKVPE-NEXT:      DbgLoc: sum.cpp:10:1
; CHECKVPE-EMPTY:
; CHECKVPE-NEXT:     i64 [[VP_INDVARS_IV_IND_INIT:%.*]] = induction-init{add} i64 0 i64 1
; CHECKVPE-NEXT:      DbgLoc: sum.cpp:10:1
; CHECKVPE-EMPTY:
; CHECKVPE-NEXT:     i64 [[VP_INDVARS_IV_IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; CHECKVPE-NEXT:      DbgLoc: sum.cpp:10:1
; CHECKVPE-EMPTY:
; CHECKVPE-NEXT:     br [[BB2:BB[0-9]+]]
; CHECKVPE-NEXT:      DbgLoc: sum.cpp:10:1
; CHECKVPE:         [[BB2]]: # preds: [[BB1]], [[BB2]]
; CHECKVPE-NEXT:     i64 [[VP_INDVARS_IV:%.*]] = phi  [ i64 [[VP_INDVARS_IV_IND_INIT]], [[BB1]] ],  [ i64 [[VP_INDVARS_IV_NEXT:%.*]], [[BB2]] ]
; CHECKVPE-NEXT:      DbgLoc: sum.cpp:0
; CHECKVPE-EMPTY:
; CHECKVPE-NEXT:     i32 [[VP0:%.*]] = phi  [ i32 [[VP_S_REDRED_INIT]], [[BB1]] ],  [ i32 [[VP_ADD1:%.*]], [[BB2]] ]
; CHECKVPE-NEXT:      DbgLoc: sum.cpp:0
; CHECKVPE-EMPTY:
; CHECKVPE-NEXT:     call metadata i64 [[INDVARS_IV0:%.*]] metadata !107 metadata !DIExpression() void (metadata, metadata, metadata)* @llvm.dbg.value
; CHECKVPE-NEXT:      DbgLoc: sum.cpp:0
; CHECKVPE-EMPTY:
; CHECKVPE-NEXT:     call i64 4 i8* [[TMP1:%.*]] void (i64, i8*)* @llvm.lifetime.start.p0i8
; CHECKVPE-NEXT:      DbgLoc: sum.cpp:10:1
; CHECKVPE-EMPTY:
; CHECKVPE-NEXT:     i32* [[VP_ARRAYIDX:%.*]] = getelementptr inbounds [128 x i32]* @a i64 0 i64 [[VP_INDVARS_IV]]
; CHECKVPE-NEXT:      DbgLoc: sum.cpp:12:13
; CHECKVPE-EMPTY:
; CHECKVPE-NEXT:     i32 [[VP1:%.*]] = load i32* [[VP_ARRAYIDX]]
; CHECKVPE-NEXT:      DbgLoc: sum.cpp:12:13
; CHECKVPE-EMPTY:
; CHECKVPE-NEXT:     i32 [[VP_ADD1]] = add i32 [[VP0]] i32 [[VP1]]
; CHECKVPE-NEXT:      DbgLoc: sum.cpp:12:10
; CHECKVPE-EMPTY:
; CHECKVPE-NEXT:     call i64 4 i8* [[TMP1]] void (i64, i8*)* @llvm.lifetime.end.p0i8
; CHECKVPE-NEXT:      DbgLoc: sum.cpp:13:5
; CHECKVPE-EMPTY:
; CHECKVPE-NEXT:     i64 [[VP_INDVARS_IV_NEXT]] = add i64 [[VP_INDVARS_IV]] i64 [[VP_INDVARS_IV_IND_INIT_STEP]]
; CHECKVPE-NEXT:      DbgLoc: sum.cpp:11:5
; CHECKVPE-EMPTY:
; CHECKVPE-NEXT:     call metadata i64 [[INDVARS_IV_NEXT0:%.*]] metadata !107 metadata !DIExpression() void (metadata, metadata, metadata)* @llvm.dbg.value
; CHECKVPE-NEXT:      DbgLoc: sum.cpp:0
; CHECKVPE-EMPTY:
; CHECKVPE-NEXT:     i1 [[VP_EXITCOND_NOT:%.*]] = icmp eq i64 [[VP_INDVARS_IV_NEXT]] i64 128
; CHECKVPE-NEXT:      DbgLoc: sum.cpp:11:5
; CHECKVPE-EMPTY:
; CHECKVPE-NEXT:     br i1 [[VP_EXITCOND_NOT]], [[BB3:BB[0-9]+]], [[BB2]]
; CHECKVPE-NEXT:      DbgLoc: sum.cpp:10:1
; CHECKVPE:         [[BB3]]: # preds: [[BB2]]
; CHECKVPE-NEXT:     i32 [[VP_S_REDRED_FINAL:%.*]] = reduction-final{u_add} i32 [[VP_ADD1]]
; CHECKVPE-NEXT:      DbgLoc: sum.cpp:12:10
; CHECKVPE-EMPTY:
; CHECKVPE-NEXT:     i64 [[VP_INDVARS_IV_IND_FINAL:%.*]] = induction-final{add} i64 0 i64 1
; CHECKVPE-NEXT:      DbgLoc: sum.cpp:12:10
; CHECKVPE-EMPTY:
; CHECKVPE-NEXT:     br [[BB4:BB[0-9]+]]
; CHECKVPE-NEXT:      DbgLoc: sum.cpp:12:10
; CHECKVPE:         [[BB4]]: # preds: [[BB3]]
; CHECKVPE-NEXT:     br <External Block>
; CHECKVPE-NEXT:      DbgLoc:
; CHECKVPE:       External Uses:
; CHECKVPE-NEXT:  Id: 0     [[ADD1_LCSSA0:%.*]] = phi i32 [ [[ADD10:%.*]], [[OMP_INNER_FOR_BODY0:%.*]] ], !dbg !124 i32 [[VP_S_REDRED_FINAL]] -> i32 [[ADD10]]
;
; CHECKHIRPCFG-LABEL:  VPlan after importing plain CFG:
; CHECKHIRPCFG-NEXT:  VPlan IR for: _Z3foov:HIR.#{{[0-9]+}}
; CHECKHIRPCFG-NEXT:  External Defs Start:
; CHECKHIRPCFG-DAG:     [[VP0:%.*]] = {%2}
; CHECKHIRPCFG-DAG:     [[VP1:%.*]] = {@a}
; CHECKHIRPCFG-DAG:     [[VP2:%.*]] = {%i.linear.iv}
; CHECKHIRPCFG-NEXT:  External Defs End:
; CHECKHIRPCFG-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECKHIRPCFG-NEXT:     br [[BB1:BB[0-9]+]]
; CHECKHIRPCFG-NEXT:      DbgLoc:
; CHECKHIRPCFG:         [[BB1]]: # preds: [[BB0]]
; CHECKHIRPCFG-NEXT:     br [[BB2:BB[0-9]+]]
; CHECKHIRPCFG-NEXT:      DbgLoc: sum.cpp:10:1
; CHECKHIRPCFG:         [[BB2]]: # preds: [[BB1]], [[BB2]]
; CHECKHIRPCFG-NEXT:     i32 [[VP3:%.*]] = phi  [ i32 [[TMP2:%.*]], [[BB1]] ],  [ i32 [[VP4:%.*]], [[BB2]] ]
; CHECKHIRPCFG-NEXT:      DbgLoc: sum.cpp:12:10
; CHECKHIRPCFG-EMPTY:
; CHECKHIRPCFG-NEXT:     i64 [[VP5:%.*]] = phi  [ i64 0, [[BB1]] ],  [ i64 [[VP6:%.*]], [[BB2]] ]
; CHECKHIRPCFG-NEXT:      DbgLoc:
; CHECKHIRPCFG-EMPTY:
; CHECKHIRPCFG-NEXT:     i32* [[I_LINEAR_IV0_SUB:%.*]] = subscript inbounds i32* [[I_LINEAR_IV0:%.*]]
; CHECKHIRPCFG-NEXT:      DbgLoc:
; CHECKHIRPCFG-EMPTY:
; CHECKHIRPCFG-NEXT:     i8* [[VP7:%.*]] = bitcast i32* [[I_LINEAR_IV0_SUB:%.*]]
; CHECKHIRPCFG-NEXT:      DbgLoc:
; CHECKHIRPCFG-EMPTY:
; CHECKHIRPCFG-NEXT:     call i64 4 i8* [[VP7]] void (i64, i8*)* @llvm.lifetime.start.p0i8
; CHECKHIRPCFG-NEXT:      DbgLoc: sum.cpp:10:1
; CHECKHIRPCFG-EMPTY:
; CHECKHIRPCFG-NEXT:     i32* [[VP_SUBSCRIPT:%.*]] = subscript inbounds [128 x i32]* @a i64 0 i64 [[VP5]]
; CHECKHIRPCFG-NEXT:      DbgLoc: sum.cpp:12:13
; CHECKHIRPCFG-EMPTY:
; CHECKHIRPCFG-NEXT:     i32 [[VP_LOAD:%.*]] = load i32* [[VP_SUBSCRIPT]]
; CHECKHIRPCFG-NEXT:      DbgLoc: sum.cpp:12:13
; CHECKHIRPCFG-EMPTY:
; CHECKHIRPCFG-NEXT:     i32 [[VP4]] = add i32 [[VP3]] i32 [[VP_LOAD]]
; CHECKHIRPCFG-NEXT:      DbgLoc: sum.cpp:12:10
; CHECKHIRPCFG-EMPTY:
; CHECKHIRPCFG-NEXT:     i32* [[I_LINEAR_IV0_SUB:%.*]] = subscript inbounds i32* [[I_LINEAR_IV0]]
; CHECKHIRPCFG-NEXT:      DbgLoc:
; CHECKHIRPCFG-EMPTY:
; CHECKHIRPCFG-NEXT:     i8* [[VP8:%.*]] = bitcast i32* [[I_LINEAR_IV0_SUB]]
; CHECKHIRPCFG-NEXT:      DbgLoc:
; CHECKHIRPCFG-EMPTY:
; CHECKHIRPCFG-NEXT:     call i64 4 i8* [[VP8]] void (i64, i8*)* @llvm.lifetime.end.p0i8
; CHECKHIRPCFG-NEXT:      DbgLoc: sum.cpp:13:5
; CHECKHIRPCFG-EMPTY:
; CHECKHIRPCFG-NEXT:     i64 [[VP6]] = add i64 [[VP5]] i64 1
; CHECKHIRPCFG-NEXT:      DbgLoc: sum.cpp:11:5
; CHECKHIRPCFG-EMPTY:
; CHECKHIRPCFG-NEXT:     i1 [[VP9:%.*]] = icmp slt i64 [[VP6]] i64 128
; CHECKHIRPCFG-NEXT:      DbgLoc: sum.cpp:11:5
; CHECKHIRPCFG-EMPTY:
; CHECKHIRPCFG-NEXT:     br i1 [[VP9]], [[BB2]], [[BB3:BB[0-9]+]]
; CHECKHIRPCFG-NEXT:      DbgLoc: sum.cpp:10:1
; CHECKHIRPCFG:         [[BB3]]: # preds: [[BB2]]
; CHECKHIRPCFG-NEXT:     br [[BB4:BB[0-9]+]]
; CHECKHIRPCFG-NEXT:      DbgLoc:
; CHECKHIRPCFG:         [[BB4]]: # preds: [[BB3]]
; CHECKHIRPCFG-NEXT:     br <External Block>
; CHECKHIRPCFG-NEXT:      DbgLoc:
; CHECKHIRPCFG:       External Uses:
; CHECKHIRPCFG-NEXT:  Id: 0   i32 [[VP4]] -> [[VP10:%.*]] = {%2}
;
; CHECKHIRVPE-LABEL:  VPlan after insertion of VPEntities instructions:
; CHECKHIRVPE-NEXT:  VPlan IR for: _Z3foov:HIR.#{{[0-9]+}}
; CHECKHIRVPE-NEXT:  External Defs Start:
; CHECKHIRVPE-DAG:     [[VP0:%.*]] = {%2}
; CHECKHIRVPE-DAG:     [[VP1:%.*]] = {@a}
; CHECKHIRVPE-DAG:     [[VP2:%.*]] = {%i.linear.iv}
; CHECKHIRVPE-NEXT:  External Defs End:
; CHECKHIRVPE-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECKHIRVPE-NEXT:     br [[BB1:BB[0-9]+]]
; CHECKHIRVPE-NEXT:      DbgLoc:
; CHECKHIRVPE:         [[BB1]]: # preds: [[BB0]]
; CHECKHIRVPE-NEXT:     i32 [[VP_RED_INIT:%.*]] = reduction-init i32 0 i32 [[TMP2:%.*]]
; CHECKHIRVPE-NEXT:      DbgLoc: sum.cpp:10:1
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     i64 [[VP__IND_INIT:%.*]] = induction-init{add} i64 0 i64 1
; CHECKHIRVPE-NEXT:      DbgLoc: sum.cpp:10:1
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     i64 [[VP__IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; CHECKHIRVPE-NEXT:      DbgLoc: sum.cpp:10:1
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     br [[BB2:BB[0-9]+]]
; CHECKHIRVPE-NEXT:      DbgLoc: sum.cpp:10:1
; CHECKHIRVPE:         [[BB2]]: # preds: [[BB1]], [[BB2]]
; CHECKHIRVPE-NEXT:     i32 [[VP3:%.*]] = phi  [ i32 [[VP_RED_INIT]], [[BB1]] ],  [ i32 [[VP4:%.*]], [[BB2]] ]
; CHECKHIRVPE-NEXT:      DbgLoc: sum.cpp:12:10
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     i64 [[VP5:%.*]] = phi  [ i64 [[VP__IND_INIT]], [[BB1]] ],  [ i64 [[VP6:%.*]], [[BB2]] ]
; CHECKHIRVPE-NEXT:      DbgLoc:
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     i32* [[I_LINEAR_IV0_SUB:%.*]] = subscript inbounds i32* [[I_LINEAR_IV0:%.*]]
; CHECKHIRVPE-NEXT:      DbgLoc:
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     i8* [[VP7:%.*]] = bitcast i32* [[I_LINEAR_IV0_SUB:%.*]]
; CHECKHIRVPE-NEXT:      DbgLoc:
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     call i64 4 i8* [[VP7]] void (i64, i8*)* @llvm.lifetime.start.p0i8
; CHECKHIRVPE-NEXT:      DbgLoc: sum.cpp:10:1
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     i32* [[VP_SUBSCRIPT:%.*]] = subscript inbounds [128 x i32]* @a i64 0 i64 [[VP5]]
; CHECKHIRVPE-NEXT:      DbgLoc: sum.cpp:12:13
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     i32 [[VP_LOAD:%.*]] = load i32* [[VP_SUBSCRIPT]]
; CHECKHIRVPE-NEXT:      DbgLoc: sum.cpp:12:13
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     i32 [[VP4]] = add i32 [[VP3]] i32 [[VP_LOAD]]
; CHECKHIRVPE-NEXT:      DbgLoc: sum.cpp:12:10
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     i32* [[I_LINEAR_IV0_SUB:%.*]] = subscript inbounds i32* [[I_LINEAR_IV0]]
; CHECKHIRVPE-NEXT:      DbgLoc:
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     i8* [[VP8:%.*]] = bitcast i32* [[I_LINEAR_IV0_SUB]]
; CHECKHIRVPE-NEXT:      DbgLoc:
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     call i64 4 i8* [[VP8]] void (i64, i8*)* @llvm.lifetime.end.p0i8
; CHECKHIRVPE-NEXT:      DbgLoc: sum.cpp:13:5
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     i64 [[VP6]] = add i64 [[VP5]] i64 [[VP__IND_INIT_STEP]]
; CHECKHIRVPE-NEXT:      DbgLoc: sum.cpp:11:5
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     i1 [[VP9:%.*]] = icmp slt i64 [[VP6]] i64 128
; CHECKHIRVPE-NEXT:      DbgLoc: sum.cpp:11:5
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     br i1 [[VP9]], [[BB2]], [[BB3:BB[0-9]+]]
; CHECKHIRVPE-NEXT:      DbgLoc: sum.cpp:10:1
; CHECKHIRVPE:         [[BB3]]: # preds: [[BB2]]
; CHECKHIRVPE-NEXT:     i32 [[VP_RED_FINAL:%.*]] = reduction-final{u_add} i32 [[VP4]]
; CHECKHIRVPE-NEXT:      DbgLoc: sum.cpp:12:10
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     i64 [[VP__IND_FINAL:%.*]] = induction-final{add} i64 0 i64 1
; CHECKHIRVPE-NEXT:      DbgLoc:
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     br [[BB4:BB[0-9]+]]
; CHECKHIRVPE-NEXT:      DbgLoc:
; CHECKHIRVPE:         [[BB4]]: # preds: [[BB3]]
; CHECKHIRVPE-NEXT:     br <External Block>
; CHECKHIRVPE-NEXT:      DbgLoc:
; CHECKHIRVPE:       External Uses:
; CHECKHIRVPE-NEXT:  Id: 0   i32 [[VP_RED_FINAL]] -> [[VP10:%.*]] = {%2}
;
DIR.OMP.SIMD.120:
  %s.red = alloca i32, align 4
  %i.linear.iv = alloca i32, align 4
  call void @llvm.dbg.value(metadata i32 0, metadata !106, metadata !DIExpression()), !dbg !111
  call void @llvm.dbg.declare(metadata i32* undef, metadata !107, metadata !DIExpression()), !dbg !112
  call void @llvm.dbg.value(metadata i32 127, metadata !109, metadata !DIExpression()), !dbg !112
  call void @llvm.dbg.value(metadata i32* undef, metadata !110, metadata !DIExpression(DW_OP_deref)), !dbg !112
  store i32 0, i32* %s.red, align 4, !dbg !113
  call void @llvm.dbg.value(metadata i32 0, metadata !107, metadata !DIExpression()), !dbg !112
  br label %DIR.OMP.SIMD.1, !dbg !112

DIR.OMP.SIMD.1:                                   ; preds = %DIR.OMP.SIMD.120
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.REDUCTION.ADD:TYPED"(i32* %s.red, i32 0, i32 1), "QUAL.OMP.LINEAR:IV.TYPED"(i32* %i.linear.iv, i32 0, i32 1, i32 1) ], !dbg !113
  br label %DIR.OMP.SIMD.2, !dbg !113

DIR.OMP.SIMD.2:                                   ; preds = %DIR.OMP.SIMD.1
  %1 = bitcast i32* %i.linear.iv to i8*, !dbg !114
  %s.red.promoted = load i32, i32* %s.red, align 4, !tbaa !115
  br label %omp.inner.for.body, !dbg !114

omp.inner.for.body:                               ; preds = %DIR.OMP.SIMD.2, %omp.inner.for.body
  %indvars.iv = phi i64 [ 0, %DIR.OMP.SIMD.2 ], [ %indvars.iv.next, %omp.inner.for.body ], !dbg !112
  %2 = phi i32 [ %s.red.promoted, %DIR.OMP.SIMD.2 ], [ %add1, %omp.inner.for.body ], !dbg !112
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !107, metadata !DIExpression()), !dbg !112
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #3, !dbg !114, !llvm.access.group !119
  %arrayidx = getelementptr inbounds [128 x i32], [128 x i32]* @a, i64 0, i64 %indvars.iv, !dbg !120, !intel-tbaa !122
  %3 = load i32, i32* %arrayidx, align 4, !dbg !120, !tbaa !122, !llvm.access.group !119
  %add1 = add nsw i32 %2, %3, !dbg !124
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #3, !dbg !125, !llvm.access.group !119
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !126
  call void @llvm.dbg.value(metadata i64 %indvars.iv.next, metadata !107, metadata !DIExpression()), !dbg !112
  %exitcond.not = icmp eq i64 %indvars.iv.next, 128, !dbg !126
  br i1 %exitcond.not, label %DIR.OMP.END.SIMD.221, label %omp.inner.for.body, !dbg !114, !llvm.loop !127

DIR.OMP.END.SIMD.221:                             ; preds = %omp.inner.for.body
  %add1.lcssa = phi i32 [ %add1, %omp.inner.for.body ], !dbg !124
  br label %DIR.OMP.END.SIMD.3, !dbg !124

DIR.OMP.END.SIMD.3:                               ; preds = %DIR.OMP.END.SIMD.221
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ], !dbg !113
  br label %DIR.OMP.END.SIMD.4, !dbg !113

DIR.OMP.END.SIMD.4:                               ; preds = %DIR.OMP.END.SIMD.3
  call void @llvm.dbg.value(metadata i32 %add1.lcssa, metadata !106, metadata !DIExpression()), !dbg !111
  ret i32 %add1.lcssa, !dbg !131
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #3

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #3

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #2

attributes #0 = { nounwind uwtable mustprogress "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "frame-pointer"="none" "may-have-openmp-directive"="true" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "pre_loopopt" "stack-protector-buffer-size"="8" "target-cpu"="skylake-avx512" "target-features"="+adx,+aes,+avx,+avx2,+avx512bw,+avx512cd,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+clflushopt,+clwb,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+pku,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves" "unsafe-fp-math"="true" }
attributes #1 = { argmemonly nofree nosync nounwind willreturn }
attributes #2 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #3 = { nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!98, !99, !100}
!llvm.ident = !{!101}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "a", scope: !2, file: !3, line: 5, type: !95, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus_14, file: !3, producer: "clang based Intel(R) oneAPI DPC++/C++ Compiler 2021.2.0 (2021.x.0.YYYYMMDD)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !5, imports: !6, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "sum.cpp", directory: "/tmp")
!4 = !{}
!5 = !{!0}
!6 = !{!7, !15, !19, !23, !27, !30, !32, !34, !36, !39, !42, !45, !48, !51, !53, !58, !62, !66, !70, !72, !74, !76, !78, !81, !84, !87, !90, !93}
!7 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !8, entity: !9, file: !14, line: 47)
!8 = !DINamespace(name: "std", scope: null)
!9 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !10, line: 24, baseType: !11)
!10 = !DIFile(filename: "/usr/include/bits/stdint-intn.h", directory: "")
!11 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int8_t", file: !12, line: 36, baseType: !13)
!12 = !DIFile(filename: "/usr/include/bits/types.h", directory: "")
!13 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!14 = !DIFile(filename: "/ref/lib/gcc/x86_64-linux-gnu/10.1.0/../../../../include/c++/10.1.0/cstdint", directory: "")
!15 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !8, entity: !16, file: !14, line: 48)
!16 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !10, line: 25, baseType: !17)
!17 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int16_t", file: !12, line: 38, baseType: !18)
!18 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!19 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !8, entity: !20, file: !14, line: 49)
!20 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !10, line: 26, baseType: !21)
!21 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int32_t", file: !12, line: 40, baseType: !22)
!22 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!23 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !8, entity: !24, file: !14, line: 50)
!24 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !10, line: 27, baseType: !25)
!25 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int64_t", file: !12, line: 43, baseType: !26)
!26 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!27 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !8, entity: !28, file: !14, line: 52)
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !29, line: 58, baseType: !13)
!29 = !DIFile(filename: "/usr/include/stdint.h", directory: "")
!30 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !8, entity: !31, file: !14, line: 53)
!31 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !29, line: 60, baseType: !26)
!32 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !8, entity: !33, file: !14, line: 54)
!33 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !29, line: 61, baseType: !26)
!34 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !8, entity: !35, file: !14, line: 55)
!35 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !29, line: 62, baseType: !26)
!36 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !8, entity: !37, file: !14, line: 57)
!37 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !29, line: 43, baseType: !38)
!38 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int_least8_t", file: !12, line: 51, baseType: !11)
!39 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !8, entity: !40, file: !14, line: 58)
!40 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !29, line: 44, baseType: !41)
!41 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int_least16_t", file: !12, line: 53, baseType: !17)
!42 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !8, entity: !43, file: !14, line: 59)
!43 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !29, line: 45, baseType: !44)
!44 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int_least32_t", file: !12, line: 55, baseType: !21)
!45 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !8, entity: !46, file: !14, line: 60)
!46 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !29, line: 46, baseType: !47)
!47 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int_least64_t", file: !12, line: 57, baseType: !25)
!48 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !8, entity: !49, file: !14, line: 62)
!49 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !29, line: 101, baseType: !50)
!50 = !DIDerivedType(tag: DW_TAG_typedef, name: "__intmax_t", file: !12, line: 71, baseType: !26)
!51 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !8, entity: !52, file: !14, line: 63)
!52 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !29, line: 87, baseType: !26)
!53 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !8, entity: !54, file: !14, line: 65)
!54 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !55, line: 24, baseType: !56)
!55 = !DIFile(filename: "/usr/include/bits/stdint-uintn.h", directory: "")
!56 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint8_t", file: !12, line: 37, baseType: !57)
!57 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!58 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !8, entity: !59, file: !14, line: 66)
!59 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !55, line: 25, baseType: !60)
!60 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint16_t", file: !12, line: 39, baseType: !61)
!61 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!62 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !8, entity: !63, file: !14, line: 67)
!63 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !55, line: 26, baseType: !64)
!64 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint32_t", file: !12, line: 41, baseType: !65)
!65 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!66 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !8, entity: !67, file: !14, line: 68)
!67 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !55, line: 27, baseType: !68)
!68 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint64_t", file: !12, line: 44, baseType: !69)
!69 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!70 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !8, entity: !71, file: !14, line: 70)
!71 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !29, line: 71, baseType: !57)
!72 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !8, entity: !73, file: !14, line: 71)
!73 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !29, line: 73, baseType: !69)
!74 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !8, entity: !75, file: !14, line: 72)
!75 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !29, line: 74, baseType: !69)
!76 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !8, entity: !77, file: !14, line: 73)
!77 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !29, line: 75, baseType: !69)
!78 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !8, entity: !79, file: !14, line: 75)
!79 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !29, line: 49, baseType: !80)
!80 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint_least8_t", file: !12, line: 52, baseType: !56)
!81 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !8, entity: !82, file: !14, line: 76)
!82 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !29, line: 50, baseType: !83)
!83 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint_least16_t", file: !12, line: 54, baseType: !60)
!84 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !8, entity: !85, file: !14, line: 77)
!85 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !29, line: 51, baseType: !86)
!86 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint_least32_t", file: !12, line: 56, baseType: !64)
!87 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !8, entity: !88, file: !14, line: 78)
!88 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !29, line: 52, baseType: !89)
!89 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint_least64_t", file: !12, line: 58, baseType: !68)
!90 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !8, entity: !91, file: !14, line: 80)
!91 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !29, line: 102, baseType: !92)
!92 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uintmax_t", file: !12, line: 72, baseType: !69)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !8, entity: !94, file: !14, line: 81)
!94 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !29, line: 90, baseType: !69)
!95 = !DICompositeType(tag: DW_TAG_array_type, baseType: !22, size: 4096, elements: !96)
!96 = !{!97}
!97 = !DISubrange(count: 128)
!98 = !{i32 7, !"Dwarf Version", i32 4}
!99 = !{i32 2, !"Debug Info Version", i32 3}
!100 = !{i32 1, !"wchar_size", i32 4}
!101 = !{!"Intel(R) oneAPI DPC++/C++ Compiler 2021.2.0 (2021.x.0.YYYYMMDD)"}
!102 = distinct !DISubprogram(name: "foo", linkageName: "_Z3foov", scope: !3, file: !3, line: 7, type: !103, scopeLine: 7, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !105)
!103 = !DISubroutineType(types: !104)
!104 = !{!22}
!105 = !{!106, !107, !109, !110}
!106 = !DILocalVariable(name: "s", scope: !102, file: !3, line: 8, type: !22)
!107 = !DILocalVariable(name: ".omp.iv", scope: !108, type: !22, flags: DIFlagArtificial)
!108 = distinct !DILexicalBlock(scope: !102, file: !3, line: 10, column: 1)
!109 = !DILocalVariable(name: ".omp.ub", scope: !108, type: !22, flags: DIFlagArtificial)
!110 = !DILocalVariable(name: "i", scope: !108, file: !3, line: 11, type: !22)
!111 = !DILocation(line: 0, scope: !102)
!112 = !DILocation(line: 0, scope: !108)
!113 = !DILocation(line: 10, column: 1, scope: !108)
!114 = !DILocation(line: 10, column: 1, scope: !102)
!115 = !{!116, !116, i64 0}
!116 = !{!"int", !117, i64 0}
!117 = !{!"omnipotent char", !118, i64 0}
!118 = !{!"Simple C++ TBAA"}
!119 = distinct !{}
!120 = !DILocation(line: 12, column: 13, scope: !121)
!121 = distinct !DILexicalBlock(scope: !108, file: !3, line: 11, column: 29)
!122 = !{!123, !116, i64 0}
!123 = !{!"array@_ZTSA128_i", !116, i64 0}
!124 = !DILocation(line: 12, column: 10, scope: !121)
!125 = !DILocation(line: 13, column: 5, scope: !121)
!126 = !DILocation(line: 11, column: 5, scope: !108)
!127 = distinct !{!127, !113, !128, !129, !130}
!128 = !DILocation(line: 10, column: 32, scope: !108)
!129 = !{!"llvm.loop.vectorize.ivdep_loop", i32 0}
!130 = !{!"llvm.loop.parallel_accesses", !119}
!131 = !DILocation(line: 14, column: 5, scope: !102)
