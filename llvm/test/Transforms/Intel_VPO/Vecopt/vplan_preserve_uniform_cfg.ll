; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -S < %s -VPlanDriver -disable-output -vplan-print-after-linearization | FileCheck %s

; This is to test that the predicator preserves uniform control flow.

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@A = common local_unnamed_addr global [1024 x i64] zeroinitializer, align 16

; Function Attrs: nounwind uwtable
define i64 @test_uniform() local_unnamed_addr #0 {
; CHECK-LABEL:  After predication and linearization
; CHECK-NEXT:    REGION: [[REGION0:region[0-9]+]]
; CHECK-NEXT:    [[BB0:BB[0-9]+]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB1:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]:
; CHECK-NEXT:     [DA: Divergent] i64 [[VP0:%.*]] = induction-init{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP1:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:    SUCCESSORS(1):[[BB2:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]:
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_INDUCTION_PHI:%.*]] = phi  [ i64 [[VP0]], [[BB1]] ],  [ i64 [[VP_INDUCTION:%.*]], [[BB3:BB[0-9]+]] ]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_LOOP_HEADER_UNIFORM:%.*]] = icmp i64 [[UNIFORM_LD0:%.*]] i64 0
; CHECK-NEXT:    SUCCESSORS(2):[[BB4:BB[0-9]+]](i1 [[VP_LOOP_HEADER_UNIFORM]]), [[BB3]](!i1 [[VP_LOOP_HEADER_UNIFORM]])
; CHECK-NEXT:    PREDECESSORS(2): [[BB3]] [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB4]]:
; CHECK-NEXT:       [DA: Uniform]   i64 [[VP_BB1_UNIFORM:%.*]] = add i64 [[UNIFORM_LD0]] i64 1
; CHECK-NEXT:      SUCCESSORS(1):[[BB3]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]:
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_INDUCTION]] = add i64 [[VP_INDUCTION_PHI]] i64 [[VP1]]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_EXITCOND:%.*]] = icmp i64 [[VP_INDUCTION]] i64 1024
; CHECK-NEXT:    SUCCESSORS(2):[[BB5:BB[0-9]+]](i1 [[VP_EXITCOND]]), [[BB2]](!i1 [[VP_EXITCOND]])
; CHECK-NEXT:    PREDECESSORS(2): [[BB4]] [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]:
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP2:%.*]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:    SUCCESSORS(1):[[BB6:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:    END Region([[REGION0]])
;
entry:
;        entry
;          |
;     loop.preheader
;          |
; +--->loop.header
; |      /    |
; |     bb1   |
; |      \    |
; +----loop.latch
;          |
;      loop.exit
;          |
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %loop.preheader

loop.preheader:                              ; preds = %entry
  %gep = getelementptr inbounds [1024 x i64], [1024 x i64]* @A, i64 0, i64 0
  %uniform.ld = load i64, i64* %gep, align 4, !tbaa !1
  br label %loop.header

loop.header:                                         ; preds = %loop.latch, %loop.preheader
  %induction.phi = phi i64 [ 0, %loop.preheader ], [ %induction, %loop.latch ]
  %loop.header.uniform = icmp sgt i64 %uniform.ld, 0
  br i1 %loop.header.uniform, label %bb1, label %loop.latch

bb1:                                          ; preds = %loop.header
  %bb1.uniform = add i64 %uniform.ld, 1
  br label %loop.latch

loop.latch:                                           ; preds = %loop.header, %bb1
  %induction = add nuw nsw i64 %induction.phi, 1
  %exitcond = icmp eq i64 %induction, 1024
  br i1 %exitcond, label %loop.exit, label %loop.header

loop.exit:                                 ; preds = %loop.latch
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"()]
  ret i64 0
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }

!llvm.ident = !{!0}

!0 = !{!"clang version 4.0.0 (branches/vpo 20877)"}
!1 = !{!2, !3, i64 0}
!2 = !{!"array@_ZTSA1024_i", !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
