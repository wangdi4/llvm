; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; RUN: opt %s -S -passes=vplan-vec -vplan-nested-simd-strategy=innermost -vplan-force-vf=2 -vplan-enable-all-zero-bypass-loops=false | FileCheck %s --check-prefix=INNER
; RUN: opt %s -S -passes=vplan-vec -vplan-nested-simd-strategy=frominside -vplan-force-vf=2 -vplan-enable-all-zero-bypass-loops=false | FileCheck %s

define void @foo(ptr %a) {
; INNER-LABEL: define void @foo
;
; Peel check
;
; INNER:       peel.checkz23:
; INNER-NEXT:    [[TMP0:%.*]] = ptrtoint <2 x ptr> [[BROADCAST_SPLAT:%.*]] to <2 x i64>
; INNER-NEXT:    [[DOTEXTRACT_0_:%.*]] = extractelement <2 x i64> [[TMP0]], i32 0
; INNER-NEXT:    [[TMP1:%.*]] = udiv i64 [[DOTEXTRACT_0_]], 4
; INNER-NEXT:    [[TMP2:%.*]] = mul i64 [[TMP1]], 1
; INNER-NEXT:    [[TMP3:%.*]] = urem i64 [[TMP2]], 2
; INNER-NEXT:    [[BROADCAST_SPLATINSERT1:%.*]] = insertelement <2 x i64> poison, i64 [[TMP3]], i64 0
; INNER-NEXT:    [[BROADCAST_SPLAT2:%.*]] = shufflevector <2 x i64> [[BROADCAST_SPLATINSERT1]], <2 x i64> poison, <2 x i32> zeroinitializer
; INNER-NEXT:    [[TMP4:%.*]] = trunc <2 x i64> [[BROADCAST_SPLAT2]] to <2 x i32>
; INNER-NEXT:    [[DOTEXTRACT_0_3:%.*]] = extractelement <2 x i32> [[TMP4]], i32 0
; INNER-NEXT:    [[TMP5:%.*]] = icmp eq i32 0, [[DOTEXTRACT_0_3]]
; INNER-NEXT:    br i1 [[TMP5]], label [[MERGE_BLK21:%.*]], label [[PEEL_CHECKV24:%.*]]
; INNER:       peel.checkv24:
; INNER-NEXT:    [[TMP6:%.*]] = add i32 [[DOTEXTRACT_0_3]], 2
; INNER-NEXT:    [[TMP7:%.*]] = icmp ugt i32 [[TMP6]], 64
; INNER-NEXT:    br i1 [[TMP7]], label [[MERGE_BLK19:%.*]], label [[PEELBLK13:%.*]]
;
; INNER:       merge.blk21:
; INNER-NEXT:    [[UNI_PHI:%.*]] = phi i32 [ 0, [[PEEL_CHECKZ23:%.*]] ], [ [[J_NEXT_SL_CLONE:%.*]], [[VPLANNEDBB:%.*]] ]
; INNER-NEXT:    br label [[VPLANNEDBB4:%.*]]
;
; INNER:       VPlannedBB6:
; INNER-NEXT:    [[UNI_PHIIND_START_BCAST_SPLATINSERT:%.*]] = insertelement <2 x i32> poison, i32 [[UNI_PHI]], i64 0
; INNER-NEXT:    [[UNI_PHIIND_START_BCAST_SPLAT:%.*]] = shufflevector <2 x i32> [[UNI_PHIIND_START_BCAST_SPLATINSERT]], <2 x i32> poison, <2 x i32> zeroinitializer
; INNER-NEXT:    [[TMP10:%.*]] = add <2 x i32> [[UNI_PHIIND_START_BCAST_SPLAT]], <i32 0, i32 1>
; INNER-NEXT:    [[N_ADJST:%.*]] = sub nuw nsw i32 64, [[UNI_PHI]]
; INNER-NEXT:    [[N_MOD_VF:%.*]] = urem i32 [[N_ADJST]], 2
; INNER-NEXT:    [[N_VEC:%.*]] = sub nuw nsw i32 64, [[N_MOD_VF]]
; INNER-NEXT:    br label [[VECTOR_BODY:%.*]]
;
; Main loop
;
; INNER:       vector.body:
; INNER-NEXT:    [[UNI_PHI8:%.*]] = phi i32 [ [[UNI_PHI]], [[VPLANNEDBB6:%.*]] ], [ [[TMP13:%.*]], [[VECTOR_BODY]] ]
; INNER-NEXT:    [[VEC_PHI:%.*]] = phi <2 x i32> [ [[TMP10]], [[VPLANNEDBB6]] ], [ [[TMP12:%.*]], [[VECTOR_BODY]] ]
; INNER-NEXT:    [[SCALAR_GEP:%.*]] = getelementptr i32, ptr [[ARR:%.*]], i32 [[UNI_PHI8]]
; INNER-NEXT:    [[TMP11:%.*]] = add <2 x i32> [[BROADCAST_SPLAT10:%.*]], [[VEC_PHI]]
; INNER-NEXT:    store <2 x i32> [[TMP11]], ptr [[SCALAR_GEP]], align 4, !intel.preferred_alignment !0
; INNER-NEXT:    [[TMP12]] = add nuw nsw <2 x i32> [[VEC_PHI]], <i32 2, i32 2>
; INNER-NEXT:    [[TMP13]] = add nuw nsw i32 [[UNI_PHI8]], 2
; INNER-NEXT:    [[TMP14:%.*]] = icmp uge i32 [[TMP13]], [[N_VEC]]
; INNER-NEXT:    br i1 [[TMP14]], label [[VPLANNEDBB11:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP1:![0-9]+]]
; INNER:       VPlannedBB11:
; INNER-NEXT:    [[TMP15:%.*]] = mul i32 1, [[N_VEC]]
; INNER-NEXT:    [[TMP16:%.*]] = add i32 0, [[TMP15]]
; INNER-NEXT:    br label [[VPLANNEDBB12:%.*]]
;
; INNER:       merge.blk19:
; INNER-NEXT:    [[UNI_PHI14:%.*]] = phi i32 [ [[TMP16]], [[VPLANNEDBB13:%.*]] ], [ 0, [[PEEL_CHECKV24]] ], [ [[UNI_PHI]], [[VPLANNEDBB4]] ]
; INNER-NEXT:    br label [[REMBLK15:%.*]]
;
; Remainder
;
; INNER:       body.inner:
; INNER-NEXT:    [[J:%.*]] = phi i32 [ [[UNI_PHI14]], [[REMBLK15]] ], [ [[J_NEXT:%.*]], [[BODY_INNER:%.*]] ]
; INNER-NEXT:    [[INDEX_INNER:%.*]] = getelementptr i32, ptr [[ARR]], i32 [[J]]
; INNER-NEXT:    [[VAL:%.*]] = add i32 [[I:%.*]], [[J]]
; INNER-NEXT:    store i32 [[VAL]], ptr [[INDEX_INNER]], align 4
; INNER-NEXT:    [[J_NEXT]] = add i32 [[J]], 1
; INNER-NEXT:    [[CMP_INNER:%.*]] = icmp eq i32 [[J_NEXT]], 64
; INNER-NEXT:    br i1 [[CMP_INNER]], label [[VPLANNEDBB15:%.*]], label [[BODY_INNER]], !llvm.loop [[LOOP3:![0-9]+]]
;
; Peel loop
;
; INNER:       body.inner.sl.clone:
; INNER-NEXT:    [[J_SL_CLONE:%.*]] = phi i32 [ 0, [[PEELBLK13]] ], [ [[J_NEXT_SL_CLONE]], [[BODY_INNER_SL_CLONE:%.*]] ]
; INNER-NEXT:    [[INDEX_INNER_SL_CLONE:%.*]] = getelementptr i32, ptr [[ARR]], i32 [[J_SL_CLONE]]
; INNER-NEXT:    [[VAL_SL_CLONE:%.*]] = add i32 [[I]], [[J_SL_CLONE]]
; INNER-NEXT:    store i32 [[VAL_SL_CLONE]], ptr [[INDEX_INNER_SL_CLONE]], align 4
; INNER-NEXT:    [[J_NEXT_SL_CLONE]] = add i32 [[J_SL_CLONE]], 1
; INNER-NEXT:    [[CMP_INNER_SL_CLONE:%.*]] = icmp eq i32 [[J_NEXT_SL_CLONE]], [[DOTEXTRACT_0_3]]
; INNER-NEXT:    br i1 [[CMP_INNER_SL_CLONE]], label [[VPLANNEDBB]], label [[BODY_INNER_SL_CLONE]], !llvm.loop [[LOOP6:![0-9]+]]
;
; CHECK-LABEL: define void @foo
;
; Peel check (re-vectorized)
;
; CHECK:       VPlannedBB24:
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint <4 x ptr> [[TMP0:%.*]] to <4 x i64>
; CHECK-NEXT:    [[WIDE_EXTRACT:%.*]] = shufflevector <4 x i64> [[TMP1]], <4 x i64> undef, <2 x i32> <i32 0, i32 2>
; CHECK-NEXT:    [[TMP2:%.*]] = udiv <2 x i64> [[WIDE_EXTRACT]], <i64 4, i64 4>
; CHECK-NEXT:    [[TMP3:%.*]] = mul <2 x i64> [[TMP2]], <i64 1, i64 1>
; CHECK-NEXT:    [[TMP4:%.*]] = urem <2 x i64> [[TMP3]], <i64 2, i64 2>
; CHECK-NEXT:    [[WIDE_INSERT25:%.*]] = shufflevector <2 x i64> [[TMP4]], <2 x i64> undef, <4 x i32> <i32 0, i32 poison, i32 1, i32 poison>
; CHECK-NEXT:    [[TMP5:%.*]] = shufflevector <4 x i64> [[WIDE_INSERT25]], <4 x i64> poison, <4 x i32> <i32 0, i32 0, i32 2, i32 2>
; CHECK-NEXT:    [[TMP6:%.*]] = trunc <4 x i64> [[TMP5]] to <4 x i32>
; CHECK-NEXT:    [[WIDE_EXTRACT26:%.*]] = shufflevector <4 x i32> [[TMP6]], <4 x i32> undef, <2 x i32> <i32 0, i32 2>
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq <2 x i32> zeroinitializer, [[WIDE_EXTRACT26]]
; CHECK-NEXT:    [[TMP8:%.*]] = xor <2 x i1> [[TMP7]], <i1 true, i1 true>
; CHECK-NEXT:    br label [[VPLANNEDBB27:%.*]]
; CHECK:       VPlannedBB27:
; CHECK-NEXT:    [[TMP9:%.*]] = add <2 x i32> [[WIDE_EXTRACT26]], <i32 2, i32 2>
; CHECK-NEXT:    [[TMP10:%.*]] = icmp ugt <2 x i32> [[TMP9]], <i32 64, i32 64>
; CHECK-NEXT:    [[TMP11:%.*]] = xor <2 x i1> [[TMP10]], <i1 true, i1 true>
; CHECK-NEXT:    [[TMP12:%.*]] = xor <2 x i1> [[TMP10]], <i1 true, i1 true>
; CHECK-NEXT:    br label [[VPLANNEDBB28:%.*]]
; CHECK:       VPlannedBB28:
; CHECK-NEXT:    [[TMP13:%.*]] = select <2 x i1> [[TMP8]], <2 x i1> [[TMP11]], <2 x i1> zeroinitializer
; CHECK-NEXT:    [[TMP14:%.*]] = select <2 x i1> [[TMP8]], <2 x i1> [[TMP10]], <2 x i1> zeroinitializer
; CHECK-NEXT:    br label [[VPLANNEDBB29:%.*]]
; CHECK:       VPlannedBB29:
; CHECK-NEXT:    br label [[VPLANNEDBB30:%.*]]
;
; Peel loop (re-vectorized)
;
; CHECK:       VPlannedBB30:
; CHECK-NEXT:    [[UNI_PHI31:%.*]] = phi i32 [ 0, [[VPLANNEDBB29]] ], [ [[TMP17:%.*]], [[VPLANNEDBB40:%.*]] ]
; CHECK-NEXT:    [[VEC_PHI32:%.*]] = phi <2 x i1> [ [[TMP12]], [[VPLANNEDBB29]] ], [ [[TMP21:%.*]], [[VPLANNEDBB40]] ]
; CHECK-NEXT:    [[VEC_PHI33:%.*]] = phi <2 x i32> [ undef, [[VPLANNEDBB29]] ], [ [[TMP19:%.*]], [[VPLANNEDBB40]] ]
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT36:%.*]] = insertelement <2 x i32> poison, i32 [[UNI_PHI31]], i64 0
; CHECK-NEXT:    [[BROADCAST_SPLAT37:%.*]] = shufflevector <2 x i32> [[BROADCAST_SPLATINSERT36]], <2 x i32> poison, <2 x i32> zeroinitializer
; CHECK-NEXT:    br label [[VPLANNEDBB34:%.*]]
; CHECK:       VPlannedBB34:
; CHECK-NEXT:    [[TMP15:%.*]] = select <2 x i1> [[TMP13]], <2 x i1> [[VEC_PHI32]], <2 x i1> zeroinitializer
; CHECK-NEXT:    br label [[VPLANNEDBB35:%.*]]
; CHECK:       VPlannedBB35:
; CHECK-NEXT:    [[MM_VECTORGEP:%.*]] = getelementptr i32, <2 x ptr> [[WIDE_LOAD:%.*]], <2 x i32> [[BROADCAST_SPLAT37]]
; CHECK-NEXT:    [[TMP16:%.*]] = add <2 x i32> [[VEC_PHI21:%.*]], [[BROADCAST_SPLAT37]]
; CHECK-NEXT:    call void @llvm.masked.scatter.v2i32.v2p0(<2 x i32> [[TMP16]], <2 x ptr> [[MM_VECTORGEP]], i32 4, <2 x i1> [[TMP15]])
; CHECK-NEXT:    [[TMP17]] = add i32 [[UNI_PHI31]], 1
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT38:%.*]] = insertelement <2 x i32> poison, i32 [[TMP17]], i64 0
; CHECK-NEXT:    [[BROADCAST_SPLAT39:%.*]] = shufflevector <2 x i32> [[BROADCAST_SPLATINSERT38]], <2 x i32> poison, <2 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP18:%.*]] = icmp eq <2 x i32> [[BROADCAST_SPLAT39]], [[WIDE_EXTRACT26]]
; CHECK-NEXT:    br label [[VPLANNEDBB40]]
; CHECK:       VPlannedBB40:
; CHECK-NEXT:    [[TMP19]] = select <2 x i1> [[VEC_PHI32]], <2 x i32> [[BROADCAST_SPLAT39]], <2 x i32> [[VEC_PHI33]]
; CHECK-NEXT:    [[TMP20:%.*]] = xor <2 x i1> [[TMP18]], <i1 true, i1 true>
; CHECK-NEXT:    [[TMP21]] = select <2 x i1> [[VEC_PHI32]], <2 x i1> [[TMP20]], <2 x i1> zeroinitializer
; CHECK-NEXT:    [[TMP22:%.*]] = and <2 x i1> [[TMP21]], [[TMP13]]
; CHECK-NEXT:    [[TMP23:%.*]] = bitcast <2 x i1> [[TMP22]] to i2
; CHECK-NEXT:    [[TMP24:%.*]] = icmp eq i2 [[TMP23]], 0
; CHECK-NEXT:    br i1 [[TMP24]], label [[VPLANNEDBB41:%.*]], label [[VPLANNEDBB30]]
;
; CHECK:       VPlannedBB41:
; CHECK-NEXT:    [[VEC_PHI42:%.*]] = phi <2 x i32> [ [[TMP19]], [[VPLANNEDBB40]] ]
; CHECK-NEXT:    br label [[VPLANNEDBB43:%.*]]
; CHECK:       VPlannedBB43:
; CHECK-NEXT:    [[PREDBLEND:%.*]] = select <2 x i1> [[TMP13]], <2 x i32> [[VEC_PHI42]], <2 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP25:%.*]] = or <2 x i1> [[TMP7]], [[TMP13]]
; CHECK-NEXT:    br label [[VPLANNEDBB44:%.*]]
; CHECK:       VPlannedBB44:
; CHECK-NEXT:    [[TMP26:%.*]] = add <2 x i32> [[PREDBLEND]], <i32 2, i32 2>
; CHECK-NEXT:    [[TMP27:%.*]] = icmp ugt <2 x i32> [[TMP26]], <i32 64, i32 64>
; CHECK-NEXT:    [[TMP28:%.*]] = xor <2 x i1> [[TMP27]], <i1 true, i1 true>
; CHECK-NEXT:    br label [[VPLANNEDBB45:%.*]]
; CHECK:       VPlannedBB45:
; CHECK-NEXT:    [[TMP29:%.*]] = select <2 x i1> [[TMP25]], <2 x i1> [[TMP28]], <2 x i1> zeroinitializer
; CHECK-NEXT:    [[TMP30:%.*]] = select <2 x i1> [[TMP25]], <2 x i1> [[TMP27]], <2 x i1> zeroinitializer
; CHECK-NEXT:    br label [[VPLANNEDBB46:%.*]]
; CHECK:       VPlannedBB46:
; CHECK-NEXT:    [[WIDE_INSERT47:%.*]] = shufflevector <2 x i32> [[VEC_PHI21]], <2 x i32> undef, <4 x i32> <i32 0, i32 poison, i32 1, i32 poison>
; CHECK-NEXT:    [[TMP31:%.*]] = shufflevector <4 x i32> [[WIDE_INSERT47]], <4 x i32> poison, <4 x i32> <i32 0, i32 0, i32 2, i32 2>
; CHECK-NEXT:    br label [[VPLANNEDBB48:%.*]]
; CHECK:       VPlannedBB48:
; CHECK-NEXT:    [[WIDE_INSERT49:%.*]] = shufflevector <2 x i32> [[PREDBLEND]], <2 x i32> undef, <4 x i32> <i32 0, i32 poison, i32 1, i32 poison>
; CHECK-NEXT:    [[TMP32:%.*]] = shufflevector <4 x i32> [[WIDE_INSERT49]], <4 x i32> poison, <4 x i32> <i32 0, i32 0, i32 2, i32 2>
; CHECK-NEXT:    [[TMP33:%.*]] = add <4 x i32> [[TMP32]], <i32 0, i32 1, i32 0, i32 1>
; CHECK-NEXT:    [[TMP34:%.*]] = sub nuw nsw <2 x i32> <i32 64, i32 64>, [[PREDBLEND]]
; CHECK-NEXT:    [[TMP35:%.*]] = urem <2 x i32> [[TMP34]], <i32 2, i32 2>
; CHECK-NEXT:    [[TMP36:%.*]] = sub nuw nsw <2 x i32> <i32 64, i32 64>, [[TMP35]]
; CHECK-NEXT:    br label [[VPLANNEDBB50:%.*]]
;
; Main loop (re-vectorized)
;
; CHECK:       VPlannedBB50:
; CHECK-NEXT:    [[VEC_PHI51:%.*]] = phi <2 x i32> [ [[PREDBLEND]], [[VPLANNEDBB48]] ], [ [[TMP40:%.*]], [[VPLANNEDBB57:%.*]] ]
; CHECK-NEXT:    [[VEC_PHI52:%.*]] = phi <4 x i32> [ [[TMP33]], [[VPLANNEDBB48]] ], [ [[TMP39:%.*]], [[VPLANNEDBB57]] ]
; CHECK-NEXT:    [[VEC_PHI53:%.*]] = phi <2 x i1> [ <i1 true, i1 true>, [[VPLANNEDBB48]] ], [ [[TMP43:%.*]], [[VPLANNEDBB57]] ]
; CHECK-NEXT:    br label [[VPLANNEDBB54:%.*]]
; CHECK:       VPlannedBB54:
; CHECK-NEXT:    [[TMP37:%.*]] = select <2 x i1> [[TMP29]], <2 x i1> [[VEC_PHI53]], <2 x i1> zeroinitializer
; CHECK-NEXT:    br label [[VPLANNEDBB55:%.*]]
; CHECK:       VPlannedBB55:
; CHECK-NEXT:    [[MM_VECTORGEP56:%.*]] = getelementptr i32, <2 x ptr> [[WIDE_LOAD]], <2 x i32> [[VEC_PHI51]]
; CHECK-NEXT:    [[TMP38:%.*]] = add <4 x i32> [[TMP31]], [[VEC_PHI52]]
; CHECK-NEXT:    [[VECBASEPTR_MM_VECTORGEP56:%.*]] = shufflevector <2 x ptr> [[MM_VECTORGEP56]], <2 x ptr> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
; CHECK-NEXT:    [[ELEMBASEPTR_:%.*]] = getelementptr i32, <4 x ptr> [[VECBASEPTR_MM_VECTORGEP56]], <4 x i64> <i64 0, i64 1, i64 0, i64 1>
; CHECK-NEXT:    [[REPLICATEDMASKELTS_:%.*]] = shufflevector <2 x i1> [[TMP37]], <2 x i1> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
; CHECK-NEXT:    call void @llvm.masked.scatter.v4i32.v4p0(<4 x i32> [[TMP38]], <4 x ptr> [[ELEMBASEPTR_]], i32 4, <4 x i1> [[REPLICATEDMASKELTS_]])
; CHECK-NEXT:    [[TMP39]] = add nuw nsw <4 x i32> [[VEC_PHI52]], <i32 2, i32 2, i32 2, i32 2>
; CHECK-NEXT:    [[TMP40]] = add nuw nsw <2 x i32> [[VEC_PHI51]], <i32 2, i32 2>
; CHECK-NEXT:    [[TMP41:%.*]] = icmp uge <2 x i32> [[TMP40]], [[TMP36]]
; CHECK-NEXT:    br label [[VPLANNEDBB57]]
; CHECK:       VPlannedBB57:
; CHECK-NEXT:    [[TMP42:%.*]] = xor <2 x i1> [[TMP41]], <i1 true, i1 true>
; CHECK-NEXT:    [[TMP43]] = select <2 x i1> [[VEC_PHI53]], <2 x i1> [[TMP42]], <2 x i1> zeroinitializer
; CHECK-NEXT:    [[TMP44:%.*]] = and <2 x i1> [[TMP43]], [[TMP29]]
; CHECK-NEXT:    [[TMP45:%.*]] = bitcast <2 x i1> [[TMP44]] to i2
; CHECK-NEXT:    [[TMP46:%.*]] = icmp eq i2 [[TMP45]], 0
; CHECK-NEXT:    br i1 [[TMP46]], label [[VPLANNEDBB58:%.*]], label [[VPLANNEDBB50]]
;
; Remainder (re-vectorized)
;
; CHECK:       VPlannedBB66:
; CHECK-NEXT:    [[VEC_PHI67:%.*]] = phi <2 x i32> [ [[PREDBLEND64:%.*]], [[VPLANNEDBB65:%.*]] ], [ [[TMP56:%.*]], [[VPLANNEDBB73:%.*]] ]
; CHECK-NEXT:    [[VEC_PHI68:%.*]] = phi <2 x i1> [ <i1 true, i1 true>, [[VPLANNEDBB65]] ], [ [[TMP60:%.*]], [[VPLANNEDBB73]] ]
; CHECK-NEXT:    [[VEC_PHI69:%.*]] = phi <2 x i32> [ undef, [[VPLANNEDBB65]] ], [ [[TMP58:%.*]], [[VPLANNEDBB73]] ]
; CHECK-NEXT:    br label [[VPLANNEDBB70:%.*]]
; CHECK:       VPlannedBB70:
; CHECK-NEXT:    [[TMP54:%.*]] = select <2 x i1> [[TMP53:%.*]], <2 x i1> [[VEC_PHI68]], <2 x i1> zeroinitializer
; CHECK-NEXT:    br label [[VPLANNEDBB71:%.*]]
; CHECK:       VPlannedBB71:
; CHECK-NEXT:    [[MM_VECTORGEP72:%.*]] = getelementptr i32, <2 x ptr> [[WIDE_LOAD]], <2 x i32> [[VEC_PHI67]]
; CHECK-NEXT:    [[TMP55:%.*]] = add <2 x i32> [[VEC_PHI21]], [[VEC_PHI67]]
; CHECK-NEXT:    call void @llvm.masked.scatter.v2i32.v2p0(<2 x i32> [[TMP55]], <2 x ptr> [[MM_VECTORGEP72]], i32 4, <2 x i1> [[TMP54]])
; CHECK-NEXT:    [[TMP56]] = add <2 x i32> [[VEC_PHI67]], <i32 1, i32 1>
; CHECK-NEXT:    [[TMP57:%.*]] = icmp eq <2 x i32> [[TMP56]], <i32 64, i32 64>
; CHECK-NEXT:    br label [[VPLANNEDBB73]]
; CHECK:       VPlannedBB73:
; CHECK-NEXT:    [[TMP58]] = select <2 x i1> [[VEC_PHI68]], <2 x i32> [[TMP56]], <2 x i32> [[VEC_PHI69]]
; CHECK-NEXT:    [[TMP59:%.*]] = xor <2 x i1> [[TMP57]], <i1 true, i1 true>
; CHECK-NEXT:    [[TMP60]] = select <2 x i1> [[VEC_PHI68]], <2 x i1> [[TMP59]], <2 x i1> zeroinitializer
; CHECK-NEXT:    [[TMP61:%.*]] = and <2 x i1> [[TMP60]], [[TMP53]]
; CHECK-NEXT:    [[TMP62:%.*]] = bitcast <2 x i1> [[TMP61]] to i2
; CHECK-NEXT:    [[TMP63:%.*]] = icmp eq i2 [[TMP62]], 0
; CHECK-NEXT:    br i1 [[TMP63]], label [[VPLANNEDBB74:%.*]], label [[VPLANNEDBB66:%.*]]
;
entry:
  br label %header

header:
  %token = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %body

body:
  %i = phi i32 [ 0, %header ], [ %i.next, %exit.inner ]
  %index = getelementptr ptr, ptr %a, i32 %i
  %arr = load ptr, ptr %index
  br label %header.inner

header.inner:
  %token.inner = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %body.inner

body.inner:
  %j = phi i32 [ 0, %header.inner ], [ %j.next, %body.inner ]

  %index.inner = getelementptr i32, ptr %arr, i32 %j
  %val = add i32 %i, %j
  store i32 %val, ptr %index.inner

  %j.next = add i32 %j, 1
  %cmp.inner = icmp eq i32 %j.next, 64
  br i1 %cmp.inner, label %latch.inner, label %body.inner, !llvm.loop !1

latch.inner:
  call void @llvm.directive.region.exit(token %token.inner) [ "DIR.OMP.END.SIMD"() ]
  br label %exit.inner

exit.inner:
  %i.next = add i32 %i, 1
  %cmp = icmp eq i32 %i.next, 32
  br i1 %cmp, label %latch, label %body

latch:
  call void @llvm.directive.region.exit(token %token) [ "DIR.OMP.END.SIMD"() ]
  br label %exit

exit:
  ret void
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)

!1 = distinct !{!1, !2}
!2 = !{!"llvm.loop.intel.vector.dynamic_align", !"true"}
