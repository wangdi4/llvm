; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt < %s -VPlanDriver -vplan-force-vf=2 -disable-output -vplan-print-after-linearization 2>&1 | FileCheck %s --check-prefixes=VPLAN
; RUN: opt < %s -VPlanDriver -vplan-force-vf=2 -S 2>&1 | FileCheck %s --check-prefixes=CG
define void @foo(i64 *%p, i1 %uniform) #0 {
; VPLAN-LABEL:  VPlan after predication and linearization:
; VPLAN-NEXT:  Live-in values:
; VPLAN-NEXT:  ID: 0 Value: i64 0
; VPLAN-NEXT:    [[BB0:BB[0-9]+]]:
; VPLAN-NEXT:     [DA: Uni] i1 [[VP_UNIFORM_NOT:%.*]] = not i1 [[UNIFORM0:%.*]]
; VPLAN-NEXT:    SUCCESSORS(1):[[BB1:BB[0-9]+]]
; VPLAN-NEXT:    no PREDECESSORS
; VPLAN-EMPTY:
; VPLAN-NEXT:    [[BB1]]:
; VPLAN-NEXT:     [DA: Div] i64 [[VP_IV_IND_INIT:%.*]] = induction-init{add} i64 live-in0 i64 1
; VPLAN-NEXT:     [DA: Uni] i64 [[VP_IV_IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; VPLAN-NEXT:     [DA: Uni] i64 [[VP_VF:%.*]] = induction-init-step{add} i64 1
; VPLAN-NEXT:     [DA: Uni] i64 [[VP_ORIG_TRIP_COUNT:%.*]] = orig-trip-count for original loop header
; VPLAN-NEXT:     [DA: Uni] i64 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i64 [[VP_ORIG_TRIP_COUNT]], UF = 1
; VPLAN-NEXT:    SUCCESSORS(1):[[BB2:BB[0-9]+]]
; VPLAN-NEXT:    PREDECESSORS(1): [[BB0]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    [[BB2]]:
; VPLAN-NEXT:     [DA: Uni] i64 [[VP_VECTOR_LOOP_IV:%.*]] = phi  [ i64 0, [[BB1]] ],  [ i64 [[VP_VECTOR_LOOP_IV_NEXT:%.*]], [[BB3:BB[0-9]+]] ]
; VPLAN-NEXT:     [DA: Div] i64 [[VP_IV:%.*]] = phi  [ i64 [[VP_IV_IND_INIT]], [[BB1]] ],  [ i64 [[VP_IV_NEXT:%.*]], [[BB3]] ]
; VPLAN-NEXT:     [DA: Div] i1 [[VP_COND:%.*]] = icmp sgt i64 [[VP_IV]] i64 0
; VPLAN-NEXT:    SUCCESSORS(1):[[BB4:BB[0-9]+]]
; VPLAN-NEXT:    PREDECESSORS(2): [[BB1]] [[BB3]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    [[BB4]]:
; VPLAN-NEXT:     [DA: Div] i1 [[VP0:%.*]] = block-predicate i1 [[VP_COND]]
; VPLAN-NEXT:    SUCCESSORS(1):[[BB5:BB[0-9]+]]
; VPLAN-NEXT:    PREDECESSORS(1): [[BB2]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    [[BB5]]:
; VPLAN-NEXT:     [DA: Div] i1 [[VP_BB3_BR_VP_UNIFORM_NOT:%.*]] = and i1 [[VP_COND]] i1 [[VP_UNIFORM_NOT]]
; VPLAN-NEXT:     [DA: Div] i1 [[VP_BB3_BR_VP_UNIFORM:%.*]] = and i1 [[VP_COND]] i1 [[UNIFORM0]]
; VPLAN-NEXT:    SUCCESSORS(1):[[BB6:BB[0-9]+]]
; VPLAN-NEXT:    PREDECESSORS(1): [[BB4]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    [[BB6]]:
; VPLAN-NEXT:     [DA: Div] i1 [[VP1:%.*]] = block-predicate i1 [[VP_BB3_BR_VP_UNIFORM_NOT]]
; VPLAN-NEXT:    SUCCESSORS(1):[[BB7:BB[0-9]+]]
; VPLAN-NEXT:    PREDECESSORS(1): [[BB5]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    [[BB7]]:
; VPLAN-NEXT:     [DA: Div] i1 [[VP2:%.*]] = block-predicate i1 [[VP_BB3_BR_VP_UNIFORM]]
; VPLAN-NEXT:    SUCCESSORS(1):[[BB8:BB[0-9]+]].active.lane
; VPLAN-NEXT:    PREDECESSORS(1): [[BB6]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    [[BB8]].active.lane:
; VPLAN-NEXT:     [DA: Div] i64 [[VP_BLEND_BLEND_BB5:%.*]] = blend [ i64 2, i1 [[VP_BB3_BR_VP_UNIFORM_NOT]] ], [ i64 1, i1 [[VP_BB3_BR_VP_UNIFORM]] ]
; VPLAN-NEXT:     [DA: Uni] i1 [[VP_COND_ACTIVE:%.*]] = active-lane i1 [[VP_COND]]
; VPLAN-NEXT:     [DA: Uni] i64 [[VP_BLEND_BLEND_BB5_ACTIVE:%.*]] = lane-extract i64 [[VP_BLEND_BLEND_BB5]] i1 [[VP_COND_ACTIVE]]
; VPLAN-NEXT:    SUCCESSORS(1):[[BB8]]
; VPLAN-NEXT:    PREDECESSORS(1): [[BB7]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    [[BB8]]:
; VPLAN-NEXT:     [DA: Div] i1 [[VP3:%.*]] = block-predicate i1 [[VP_COND]]
; VPLAN-NEXT:     [DA: Uni] i64 [[VP_VAL:%.*]] = add i64 [[VP_BLEND_BLEND_BB5_ACTIVE]] i64 1
; VPLAN-NEXT:    SUCCESSORS(1):[[BB9:BB[0-9]+]]
; VPLAN-NEXT:    PREDECESSORS(1): [[BB8]].active.lane
; VPLAN-EMPTY:
; VPLAN-NEXT:    [[BB9]]:
; VPLAN-NEXT:     [DA: Div] i1 [[VP4:%.*]] = block-predicate i1 [[VP_COND]]
; VPLAN-NEXT:    SUCCESSORS(1):[[BB3]]
; VPLAN-NEXT:    PREDECESSORS(1): [[BB8]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    [[BB3]]:
; VPLAN-NEXT:     [DA: Div] i64 [[VP_ST_BLEND_BB8:%.*]] = blend [ i64 -1, i1 true ], [ i64 [[VP_VAL]], i1 [[VP_COND]] ]
; VPLAN-NEXT:     [DA: Div] i64* [[VP_GEP:%.*]] = getelementptr i64* [[P0:%.*]] i64 [[VP_IV]]
; VPLAN-NEXT:     [DA: Div] store i64 [[VP_ST_BLEND_BB8]] i64* [[VP_GEP]]
; VPLAN-NEXT:     [DA: Div] i64 [[VP_IV_NEXT]] = add i64 [[VP_IV]] i64 [[VP_IV_IND_INIT_STEP]]
; VPLAN-NEXT:     [DA: Uni] i64 [[VP_VECTOR_LOOP_IV_NEXT]] = add i64 [[VP_VECTOR_LOOP_IV]] i64 [[VP_VF]]
; VPLAN-NEXT:     [DA: Uni] i1 [[VP_VECTOR_LOOP_EXITCOND:%.*]] = icmp eq i64 [[VP_VECTOR_LOOP_IV_NEXT]] i64 [[VP_VECTOR_TRIP_COUNT]]
; VPLAN-NEXT:    SUCCESSORS(2):[[BB10:BB[0-9]+]](i1 [[VP_VECTOR_LOOP_EXITCOND]]), [[BB2]](!i1 [[VP_VECTOR_LOOP_EXITCOND]])
; VPLAN-NEXT:    PREDECESSORS(1): [[BB9]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    [[BB10]]:
; VPLAN-NEXT:     [DA: Uni] i64 [[VP_IV_IND_FINAL:%.*]] = induction-final{add} i64 live-in0 i64 1
; VPLAN-NEXT:    SUCCESSORS(1):[[BB11:BB[0-9]+]]
; VPLAN-NEXT:    PREDECESSORS(1): [[BB3]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    [[BB11]]:
; VPLAN-NEXT:     <Empty Block>
; VPLAN-NEXT:    no SUCCESSORS
; VPLAN-NEXT:    PREDECESSORS(1): [[BB10]]
; VPLAN-EMPTY:
; VPLAN-NEXT:  External Uses:
; VPLAN-NEXT:  Id: 0   no underlying for i64 [[VP_IV_IND_FINAL]]
;
; CG:  define void @foo(i64* [[P0:%.*]], i1 [[UNIFORM0:%.*]]) #0 {
; CG:       vector.body:
; CG-NEXT:    [[UNI_PHI0:%.*]] = phi i64 [ 0, [[VECTOR_PH0:%.*]] ], [ [[TMP10:%.*]], [[VECTOR_BODY0:%.*]] ]
; CG-NEXT:    [[UNI_PHI10:%.*]] = phi i64 [ 0, [[VECTOR_PH0]] ], [ [[TMP9:%.*]], [[VECTOR_BODY0]] ]
; CG-NEXT:    [[VEC_PHI0:%.*]] = phi <2 x i64> [ <i64 0, i64 1>, [[VECTOR_PH0]] ], [ [[TMP8:%.*]], [[VECTOR_BODY0]] ]
; CG-NEXT:    [[TMP1:%.*]] = icmp sgt <2 x i64> [[VEC_PHI0]], zeroinitializer
; CG-NEXT:    [[TMP2:%.*]] = and <2 x i1> [[TMP1]], [[TMP0:%.*]]
; CG-NEXT:    [[TMP3:%.*]] = and <2 x i1> [[TMP1]], [[BROADCAST_SPLAT0:%.*]]
; CG-NEXT:    [[PREDBLEND0:%.*]] = select <2 x i1> [[TMP3]], <2 x i64> <i64 1, i64 1>, <2 x i64> <i64 2, i64 2>
; CG-NEXT:    [[TMP4:%.*]] = bitcast <2 x i1> [[TMP1]] to i2
; CG-NEXT:    [[CTTZ0:%.*]] = call i2 @llvm.cttz.i2(i2 [[TMP4]], i1 false)
; CG-NEXT:    [[TMP5:%.*]] = extractelement <2 x i64> [[PREDBLEND0]], i2 [[CTTZ0]]
; CG-NEXT:    [[TMP6:%.*]] = add i64 [[TMP5]], 1
; CG-NEXT:    [[BROADCAST_SPLATINSERT20:%.*]] = insertelement <2 x i64> undef, i64 [[TMP6]], i32 0
; CG-NEXT:    [[BROADCAST_SPLAT30:%.*]] = shufflevector <2 x i64> [[BROADCAST_SPLATINSERT20]], <2 x i64> undef, <2 x i32> zeroinitializer
; CG-NEXT:    [[PREDBLEND40:%.*]] = select <2 x i1> [[TMP1]], <2 x i64> [[BROADCAST_SPLAT30]], <2 x i64> <i64 -1, i64 -1>
; CG-NEXT:    [[SCALAR_GEP0:%.*]] = getelementptr i64, i64* [[P0]], i64 [[UNI_PHI10]]
; CG-NEXT:    [[TMP7:%.*]] = bitcast i64* [[SCALAR_GEP0]] to <2 x i64>*
; CG-NEXT:    store <2 x i64> [[PREDBLEND40]], <2 x i64>* [[TMP7]], align 4
; CG-NEXT:    [[TMP8]] = add nuw nsw <2 x i64> [[VEC_PHI0]], <i64 2, i64 2>
; CG-NEXT:    [[TMP9]] = add nuw nsw i64 [[UNI_PHI10]], 2
; CG-NEXT:    [[TMP10]] = add i64 [[UNI_PHI0]], 2
; CG-NEXT:    [[TMP11:%.*]] = icmp eq i64 [[TMP10]], 4
; CG-NEXT:    br i1 [[TMP11]], label [[VPLANNEDBB0:%.*]], label [[VECTOR_BODY0]]
;
entry:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %header

header:
  %iv = phi i64 [ 0, %entry ], [ %iv.next, %latch ]
  %cond = icmp sgt i64 %iv, 0
  br i1 %cond, label %uni.start, label %latch

uni.start:
  br i1 %uniform, label %if.then, label %if.else

if.then:
  br label %if.end

if.else:
  br label %if.end

if.end:
  %blend = phi i64 [ 1, %if.then ], [ 2, %if.else]
  %val = add nsw nuw i64 %blend, 1
  br label %uni.end

uni.end:
  br label %latch

latch:
  %st = phi i64 [ -1, %header ], [ %val, %uni.end]
  %gep = getelementptr i64, i64 *%p, i64 %iv
  store i64 %st, i64 *%gep
  %iv.next = add nsw nuw i64 %iv, 1
  %exitcond = icmp eq i64 %iv.next, 4
  br i1 %exitcond, label %exit, label %header

exit:
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"() ]
  ret void
}
; The above function could be used to test through 'lli' like
;
; Original incorrect behavior:
; $ opt -VPlanDriver -vplan-force-vf=2 -remove-region-directives -S %s | lli  ; echo $?
; 3
; Expected correct results:
; $ opt -remove-region-directives -S %s | lli  ; echo $?
; 2
;
; define i32 @main() {
;   %p = alloca i64, i64 42
;   call void @foo(i64 *%p, i1 true)
;   %q = getelementptr i64, i64 *%p, i64 1
;   %ret = load i64, i64 *%q
;   %trunc = trunc i64 %ret to i32
;   ret i32 %trunc
; }


; Used to crash with the first iteration of the patch. Not sure how to reproduce
; the same now that blends with undef are optimized inside predicator.
define void @uniform_with_undef(i64 *%p, i64 %n) #0 {
; VPLAN-LABEL:  VPlan after predication and linearization:
; VPLAN-NEXT:  Live-in values:
; VPLAN-NEXT:  ID: 0 Value: i64 0
; VPLAN-NEXT:    [[BB0:BB[0-9]+]]:
; VPLAN-NEXT:     <Empty Block>
; VPLAN-NEXT:    SUCCESSORS(1):[[BB1:BB[0-9]+]]
; VPLAN-NEXT:    no PREDECESSORS
; VPLAN-EMPTY:
; VPLAN-NEXT:    [[BB1]]:
; VPLAN-NEXT:     [DA: Div] i64 [[VP_IV_IND_INIT:%.*]] = induction-init{add} i64 live-in0 i64 1
; VPLAN-NEXT:     [DA: Uni] i64 [[VP_IV_IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; VPLAN-NEXT:     [DA: Uni] i64 [[VP_VF:%.*]] = induction-init-step{add} i64 1
; VPLAN-NEXT:     [DA: Uni] i64 [[VP_ORIG_TRIP_COUNT:%.*]] = orig-trip-count for original loop header
; VPLAN-NEXT:     [DA: Uni] i64 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i64 [[VP_ORIG_TRIP_COUNT]], UF = 1
; VPLAN-NEXT:    SUCCESSORS(1):[[BB2:BB[0-9]+]]
; VPLAN-NEXT:    PREDECESSORS(1): [[BB0]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    [[BB2]]:
; VPLAN-NEXT:     [DA: Uni] i64 [[VP_VECTOR_LOOP_IV:%.*]] = phi  [ i64 0, [[BB1]] ],  [ i64 [[VP_VECTOR_LOOP_IV_NEXT:%.*]], [[BB3:BB[0-9]+]] ]
; VPLAN-NEXT:     [DA: Div] i64 [[VP_IV:%.*]] = phi  [ i64 [[VP_IV_IND_INIT]], [[BB1]] ],  [ i64 [[VP_IV_NEXT:%.*]], [[BB3]] ]
; VPLAN-NEXT:     [DA: Div] i1 [[VP_COND:%.*]] = icmp sgt i64 [[VP_IV]] i64 0
; VPLAN-NEXT:     [DA: Div] i1 [[VP_VARYING:%.*]] = icmp eq i64 [[VP_IV]] i64 [[N0:%.*]]
; VPLAN-NEXT:     [DA: Div] i1 [[VP_VARYING_NOT:%.*]] = not i1 [[VP_VARYING]]
; VPLAN-NEXT:    SUCCESSORS(1):[[BB4:BB[0-9]+]]
; VPLAN-NEXT:    PREDECESSORS(2): [[BB1]] [[BB3]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    [[BB4]]:
; VPLAN-NEXT:     [DA: Div] i1 [[VP0:%.*]] = block-predicate i1 [[VP_VARYING_NOT]]
; VPLAN-NEXT:    SUCCESSORS(1):[[BB5:BB[0-9]+]]
; VPLAN-NEXT:    PREDECESSORS(1): [[BB2]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    [[BB5]]:
; VPLAN-NEXT:     [DA: Div] i1 [[VP1:%.*]] = block-predicate i1 [[VP_VARYING]]
; VPLAN-NEXT:    SUCCESSORS(1):[[BB6:BB[0-9]+]]
; VPLAN-NEXT:    PREDECESSORS(1): [[BB4]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    [[BB6]]:
; VPLAN-NEXT:     [DA: Uni] i64 [[VP_VAL:%.*]] = add i64 1 i64 1
; VPLAN-NEXT:    SUCCESSORS(1):[[BB3]]
; VPLAN-NEXT:    PREDECESSORS(1): [[BB5]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    [[BB3]]:
; VPLAN-NEXT:     [DA: Div] i64* [[VP_GEP:%.*]] = getelementptr i64* [[P0:%.*]] i64 [[VP_IV]]
; VPLAN-NEXT:     [DA: Div] store i64 1 i64* [[VP_GEP]]
; VPLAN-NEXT:     [DA: Div] i64 [[VP_IV_NEXT]] = add i64 [[VP_IV]] i64 [[VP_IV_IND_INIT_STEP]]
; VPLAN-NEXT:     [DA: Uni] i64 [[VP_VECTOR_LOOP_IV_NEXT]] = add i64 [[VP_VECTOR_LOOP_IV]] i64 [[VP_VF]]
; VPLAN-NEXT:     [DA: Uni] i1 [[VP_VECTOR_LOOP_EXITCOND:%.*]] = icmp eq i64 [[VP_VECTOR_LOOP_IV_NEXT]] i64 [[VP_VECTOR_TRIP_COUNT]]
; VPLAN-NEXT:    SUCCESSORS(2):[[BB7:BB[0-9]+]](i1 [[VP_VECTOR_LOOP_EXITCOND]]), [[BB2]](!i1 [[VP_VECTOR_LOOP_EXITCOND]])
; VPLAN-NEXT:    PREDECESSORS(1): [[BB6]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    [[BB7]]:
; VPLAN-NEXT:     [DA: Uni] i64 [[VP_IV_IND_FINAL:%.*]] = induction-final{add} i64 live-in0 i64 1
; VPLAN-NEXT:    SUCCESSORS(1):[[BB8:BB[0-9]+]]
; VPLAN-NEXT:    PREDECESSORS(1): [[BB3]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    [[BB8]]:
; VPLAN-NEXT:     <Empty Block>
; VPLAN-NEXT:    no SUCCESSORS
; VPLAN-NEXT:    PREDECESSORS(1): [[BB7]]
; VPLAN-EMPTY:
; VPLAN-NEXT:  External Uses:
; VPLAN-NEXT:  Id: 0   no underlying for i64 [[VP_IV_IND_FINAL]]

; CG:  define void @uniform_with_undef(i64* [[P0:%.*]], i64 [[N0:%.*]]) #0 {
; CG-NEXT:  entry:
; CG:       vector.body:
; CG-NEXT:    [[UNI_PHI0:%.*]] = phi i64 [ 0, [[VECTOR_PH0]] ], [ [[TMP6:%.*]], [[VECTOR_BODY0]] ]
; CG-NEXT:    [[UNI_PHI10:%.*]] = phi i64 [ 0, [[VECTOR_PH0]] ], [ [[TMP5:%.*]], [[VECTOR_BODY0]] ]
; CG-NEXT:    [[VEC_PHI0:%.*]] = phi <2 x i64> [ <i64 0, i64 1>, [[VECTOR_PH0]] ], [ [[TMP4:%.*]], [[VECTOR_BODY0]] ]
; CG-NEXT:    [[TMP0:%.*]] = icmp sgt <2 x i64> [[VEC_PHI0]], zeroinitializer
; CG-NEXT:    [[TMP1:%.*]] = icmp eq <2 x i64> [[VEC_PHI0]], [[BROADCAST_SPLAT0]]
; CG-NEXT:    [[TMP2:%.*]] = xor <2 x i1> [[TMP1]], <i1 true, i1 true>
; CG-NEXT:    [[SCALAR_GEP0:%.*]] = getelementptr i64, i64* [[P0]], i64 [[UNI_PHI10]]
; CG-NEXT:    [[TMP3:%.*]] = bitcast i64* [[SCALAR_GEP0]] to <2 x i64>*
; CG-NEXT:    store <2 x i64> <i64 1, i64 1>, <2 x i64>* [[TMP3]], align 4
; CG-NEXT:    [[TMP4]] = add nuw nsw <2 x i64> [[VEC_PHI0]], <i64 2, i64 2>
; CG-NEXT:    [[TMP5]] = add nuw nsw i64 [[UNI_PHI10]], 2
; CG-NEXT:    [[TMP6]] = add i64 [[UNI_PHI0]], 2
; CG-NEXT:    [[TMP7:%.*]] = icmp eq i64 [[TMP6]], 4
; CG-NEXT:    br i1 [[TMP7]], label [[VPLANNEDBB0:%.*]], label [[VECTOR_BODY0]]
;
entry:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %header

header:
  %iv = phi i64 [ 0, %entry ], [ %iv.next, %latch ]
  %cond = icmp sgt i64 %iv, 0
  %varying = icmp eq i64 %iv, %n
  br i1 %varying, label %if.then, label %if.else

if.then:
  br label %if.end

if.else:
  br label %if.end

if.end:
  %blend = phi i64 [ 1, %if.then ], [ undef, %if.else]
  %val = add nsw nuw i64 %blend, 1
  br label %latch

latch:
  %gep = getelementptr i64, i64 *%p, i64 %iv
  store i64 %blend, i64 *%gep
  %iv.next = add nsw nuw i64 %iv, 1
  %exitcond = icmp eq i64 %iv.next, 4
  br i1 %exitcond, label %exit, label %header

exit:
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"() ]
  ret void
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token %0)

attributes #0 = { noinline }
