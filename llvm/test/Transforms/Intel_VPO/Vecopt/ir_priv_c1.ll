; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt %s -S -vplan-vec -vplan-force-vf=4 -vplan-enable-all-liveouts \
; RUN: -vplan-print-after-vpentity-instrs -vplan-entities-dump -disable-vplan-codegen | FileCheck %s

; outer loop
define dso_local double @_Z3fooPiiS_() local_unnamed_addr #3 {
; CHECK-LABEL:  VPlan after insertion of VPEntities instructions:
; CHECK-NEXT:  VPlan IR for: _Z3fooPiiS_:omp.inner.for.body.#{{[0-9]+}}
; CHECK-NEXT:  Loop Entities of the loop with header [[BB0:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:  Induction list
; CHECK-NEXT:   IntInduction(+) Start: i64 0 Step: i64 1 StartVal: i64 0 EndVal: i64 171 BinOp: i64 [[VP_INDVARS_IV_NEXT:%.*]] = add i64 [[VP_INDVARS_IV:%.*]] i64 [[VP_INDVARS_IV_IND_INIT_STEP:%.*]]
; CHECK-NEXT:    Linked values: i64 [[VP_INDVARS_IV]], i64 [[VP_INDVARS_IV_NEXT]], i64 [[VP_INDVARS_IV_IND_INIT:%.*]], i64 [[VP_INDVARS_IV_IND_FINAL:%.*]],
; CHECK:       Private list
; CHECK-EMPTY:
; CHECK-NEXT:    Exit instr: double [[VP_CONV735:%.*]] = phi  [ double [[VP_CONV734:%.*]], [[BB0]] ],  [ double [[VP_ADD6:%.*]], [[BB1:BB[0-9]+]] ]
; CHECK-NEXT:    Linked values: double [[VP_CONV735]], double* [[D_LPRIV0:%.*]], double [[VP_CONV734]], double* [[VP_D_LPRIV:%.*]], double [[VP_CONV735_PRIV_FINAL:%.*]],
; CHECK-NEXT:   Memory: double* [[D_LPRIV0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2:BB[0-9]+]]: # preds:
; CHECK-NEXT:     br [[BB3:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: [[BB2]]
; CHECK-NEXT:     double* [[VP_D_LPRIV]] = allocate-priv double*, OrigAlign = 8
; CHECK-NEXT:     i8* [[VP_D_LPRIV_BCAST:%.*]] = bitcast double* [[VP_D_LPRIV]]
; CHECK-NEXT:     call i64 8 i8* [[VP_D_LPRIV_BCAST]] void (i64, i8*)* @llvm.lifetime.start.p0i8
; CHECK-NEXT:     i64 [[VP_INDVARS_IV_IND_INIT]] = induction-init{add} i64 0 i64 1
; CHECK-NEXT:     i64 [[VP_INDVARS_IV_IND_INIT_STEP]] = induction-init-step{add} i64 1
; CHECK-NEXT:     br [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB0]]: # preds: [[BB3]], [[BB4:BB[0-9]+]]
; CHECK-NEXT:     i64 [[VP_PRIV_IDX_HDR:%.*]] = phi  [ i64 -1, [[BB3]] ],  [ i64 [[VP_PRIV_IDX_BB3:%.*]], [[BB4]] ]
; CHECK-NEXT:     i64 [[VP_INDVARS_IV]] = phi  [ i64 [[VP_INDVARS_IV_IND_INIT]], [[BB3]] ],  [ i64 [[VP_INDVARS_IV_NEXT]], [[BB4]] ]
; CHECK-NEXT:     double [[VP_CONV734]] = phi  [ double [[D_LPRIV_PROMOTED0:%.*]], [[BB3]] ],  [ double [[VP_CONV735]], [[BB4]] ]
; CHECK-NEXT:     i1 [[VP_TOBOOL:%.*]] = icmp eq i64 [[VP_INDVARS_IV]] i64 25
; CHECK-NEXT:     br i1 [[VP_TOBOOL]], [[BB4]], [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:       double [[VP_CI:%.*]] = sitofp i64 [[VP_INDVARS_IV]] to double
; CHECK-NEXT:       double [[VP_ADD6]] = fdiv double [[VP_CI]] double [[D_LPRIV_PROMOTED0]]
; CHECK-NEXT:       br [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: [[BB0]], [[BB1]]
; CHECK-NEXT:     i64 [[VP_PRIV_IDX_BB3]] = phi  [ i64 [[VP_PRIV_IDX_HDR]], [[BB0]] ],  [ i64 [[VP_INDVARS_IV]], [[BB1]] ]
; CHECK-NEXT:     double [[VP_CONV735]] = phi  [ double [[VP_CONV734]], [[BB0]] ],  [ double [[VP_ADD6]], [[BB1]] ]
; CHECK-NEXT:     i64 [[VP_INDVARS_IV_NEXT]] = add i64 [[VP_INDVARS_IV]] i64 [[VP_INDVARS_IV_IND_INIT_STEP]]
; CHECK-NEXT:     i1 [[VP_EXITCOND:%.*]] = icmp eq i64 [[VP_INDVARS_IV_NEXT]] i64 171
; CHECK-NEXT:     br i1 [[VP_EXITCOND]], [[BB5:BB[0-9]+]], [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]: # preds: [[BB4]]
; CHECK-NEXT:     i64 [[VP_INDVARS_IV_IND_FINAL]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:     double [[VP_CONV735_PRIV_FINAL]] = private-final-c double [[VP_CONV735]] i64 [[VP_PRIV_IDX_BB3]] double [[D_LPRIV_PROMOTED0]]
; CHECK-NEXT:     i8* [[VP_D_LPRIV_BCAST1:%.*]] = bitcast double* [[VP_D_LPRIV]]
; CHECK-NEXT:     call i64 8 i8* [[VP_D_LPRIV_BCAST1]] void (i64, i8*)* @llvm.lifetime.end.p0i8
; CHECK-NEXT:     br [[BB6:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]]: # preds: [[BB5]]
; CHECK-NEXT:     br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0     [[CONV735_LCSSA0:%.*]] = phi double [ [[CONV7350:%.*]], [[IF_END0:%.*]] ] double [[VP_CONV735_PRIV_FINAL]] -> double [[CONV7350]]
;

entry:
  %d.lpriv = alloca double, align 8
  store double 0.000000e+00, double* %d.lpriv, align 8
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %DIR.OMP.SIMD.2
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.LASTPRIVATE:CONDITIONAL.TYPED"(double* %d.lpriv, double zeroinitializer, i32 1) ]
  br label %DIR.OMP.SIMD.237

DIR.OMP.SIMD.237:                                 ; preds = %DIR.OMP.SIMD.1
  %d.lpriv.promoted = load double, double* %d.lpriv, align 8
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %if.end, %DIR.OMP.SIMD.237
  %indvars.iv = phi i64 [ 0, %DIR.OMP.SIMD.237 ], [ %indvars.iv.next, %if.end ]
  %conv734 = phi double [ %d.lpriv.promoted, %DIR.OMP.SIMD.237 ], [ %conv735, %if.end ]
  %tobool = icmp eq i64 %indvars.iv, 25
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %omp.inner.for.body
  %ci = sitofp i64 %indvars.iv to double
  %add6 = fdiv double %ci, %d.lpriv.promoted
  br label %if.end

if.end:                                           ; preds = %omp.inner.for.body, %if.then
  %conv735 = phi double [ %conv734, %omp.inner.for.body ], [ %add6, %if.then ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 171
  br i1 %exitcond, label %omp.inner.for.cond.omp.loop.exit.split_crit_edge, label %omp.inner.for.body

omp.inner.for.cond.omp.loop.exit.split_crit_edge: ; preds = %if.end
  %conv735.lcssa = phi double [ %conv735, %if.end ]
  store double %conv735.lcssa, double* %d.lpriv, align 8
  br label %DIR.OMP.END.SIMD.3

DIR.OMP.END.SIMD.3:                               ; preds = %omp.inner.for.cond.omp.loop.exit.split_crit_edge
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %DIR.OMP.END.SIMD.3, %entry
  ret double %conv735.lcssa
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
