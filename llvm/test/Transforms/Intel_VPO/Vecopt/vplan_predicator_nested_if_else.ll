; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -S < %s -VPlanDriver -disable-output -vplan-print-after-linearization | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind uwtable
define void @test_nested_if_else(i32* noalias nocapture %a) local_unnamed_addr #0 {
;
; CHECK-LABEL:  After predication and linearization
; CHECK-NEXT:    [[BB0:BB[0-9]+]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB1:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]:
; CHECK-NEXT:     [DA: Div] i64 [[VP_INDUCTION_PHI_IND_INIT:%.*]] = induction-init{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Uni] i64 [[VP_INDUCTION_PHI_IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:     [DA: Uni] i64 [[VP_VF:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:     [DA: Uni] i64 [[VP_ORIG_TRIP_COUNT:%.*]] = orig-trip-count for original loop loop.header
; CHECK-NEXT:     [DA: Uni] i64 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i64 [[VP_ORIG_TRIP_COUNT]], UF = 1
; CHECK-NEXT:    SUCCESSORS(1):[[BB2:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]:
; CHECK-NEXT:     [DA: Uni] i64 [[VP_VECTOR_LOOP_IV:%.*]] = phi  [ i64 0, [[BB1]] ],  [ i64 [[VP_VECTOR_LOOP_IV_NEXT:%.*]], [[BB3:BB[0-9]+]] ]
; CHECK-NEXT:     [DA: Div] i64 [[VP_INDUCTION_PHI:%.*]] = phi  [ i64 [[VP_INDUCTION_PHI_IND_INIT]], [[BB1]] ],  [ i64 [[VP_INDUCTION:%.*]], [[BB3]] ]
; CHECK-NEXT:     [DA: Div] i32* [[VP_GEP:%.*]] = getelementptr inbounds i32* [[A0:%.*]] i64 [[VP_INDUCTION_PHI]]
; CHECK-NEXT:     [DA: Div] i32 [[VP_LOOP_HEADER_LD:%.*]] = load i32* [[VP_GEP]]
; CHECK-NEXT:     [DA: Div] i1 [[VP_LOOP_HEADER_VARYING:%.*]] = icmp i32 [[VP_LOOP_HEADER_LD]] i32 0
; CHECK-NEXT:     [DA: Div] i1 [[VP_LOOP_HEADER_VARYING_NOT:%.*]] = not i1 [[VP_LOOP_HEADER_VARYING]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB4:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB3]] [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]:
; CHECK-NEXT:     [DA: Div] i1 [[VP0:%.*]] = block-predicate i1 [[VP_LOOP_HEADER_VARYING_NOT]]
; CHECK-NEXT:     [DA: Div] i1 [[VP_BB2_VARYING:%.*]] = icmp i32 [[VP_LOOP_HEADER_LD]] i32 2
; CHECK-NEXT:     [DA: Div] i1 [[VP_BB2_VARYING_NOT:%.*]] = not i1 [[VP_BB2_VARYING]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB5:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]:
; CHECK-NEXT:     [DA: Div] i1 [[VP_BB4_BR_VP_BB2_VARYING_NOT:%.*]] = and i1 [[VP_LOOP_HEADER_VARYING_NOT]] i1 [[VP_BB2_VARYING_NOT]]
; CHECK-NEXT:     [DA: Div] i1 [[VP_BB4_BR_VP_BB2_VARYING:%.*]] = and i1 [[VP_LOOP_HEADER_VARYING_NOT]] i1 [[VP_BB2_VARYING]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB6:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]]:
; CHECK-NEXT:     [DA: Div] i1 [[VP1:%.*]] = block-predicate i1 [[VP_BB4_BR_VP_BB2_VARYING_NOT]]
; CHECK-NEXT:     [DA: Div] i32 [[VP_BB6_MUL:%.*]] = mul i32 [[VP_LOOP_HEADER_LD]] i32 6
; CHECK-NEXT:    SUCCESSORS(1):[[BB7:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB7]]:
; CHECK-NEXT:     [DA: Div] i1 [[VP2:%.*]] = block-predicate i1 [[VP_BB4_BR_VP_BB2_VARYING]]
; CHECK-NEXT:     [DA: Div] i32 [[VP_BB5_SUB:%.*]] = sub i32 [[VP_LOOP_HEADER_LD]] i32 5
; CHECK-NEXT:    SUCCESSORS(1):[[BB8:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB8]]:
; CHECK-NEXT:     [DA: Div] i1 [[VP3:%.*]] = block-predicate i1 [[VP_LOOP_HEADER_VARYING]]
; CHECK-NEXT:     [DA: Div] i1 [[VP_BB1_VARYING:%.*]] = icmp i32 [[VP_LOOP_HEADER_LD]] i32 1
; CHECK-NEXT:     [DA: Div] i1 [[VP_BB1_VARYING_NOT:%.*]] = not i1 [[VP_BB1_VARYING]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB9:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB7]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB9]]:
; CHECK-NEXT:     [DA: Div] i1 [[VP_BB3_BR_VP_BB1_VARYING_NOT:%.*]] = and i1 [[VP_LOOP_HEADER_VARYING]] i1 [[VP_BB1_VARYING_NOT]]
; CHECK-NEXT:     [DA: Div] i1 [[VP_BB3_BR_VP_BB1_VARYING:%.*]] = and i1 [[VP_LOOP_HEADER_VARYING]] i1 [[VP_BB1_VARYING]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB10:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB8]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB10]]:
; CHECK-NEXT:     [DA: Div] i1 [[VP4:%.*]] = block-predicate i1 [[VP_BB3_BR_VP_BB1_VARYING_NOT]]
; CHECK-NEXT:     [DA: Div] i32 [[VP_BB4_ADD:%.*]] = add i32 [[VP_LOOP_HEADER_LD]] i32 4
; CHECK-NEXT:    SUCCESSORS(1):[[BB11:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB9]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB11]]:
; CHECK-NEXT:     [DA: Div] i1 [[VP5:%.*]] = block-predicate i1 [[VP_BB3_BR_VP_BB1_VARYING]]
; CHECK-NEXT:     [DA: Div] i32 [[VP_BB3_MUL:%.*]] = mul i32 [[VP_LOOP_HEADER_LD]] i32 3
; CHECK-NEXT:    SUCCESSORS(1):[[BB3]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB10]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]:
; CHECK-NEXT:     [DA: Div] i64 [[VP_INDUCTION]] = add i64 [[VP_INDUCTION_PHI]] i64 [[VP_INDUCTION_PHI_IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP_VECTOR_LOOP_IV_NEXT]] = add i64 [[VP_VECTOR_LOOP_IV]] i64 [[VP_VF]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP_VECTOR_LOOP_EXITCOND:%.*]] = icmp i64 [[VP_VECTOR_LOOP_IV_NEXT]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:    SUCCESSORS(2):[[BB12:BB[0-9]+]](i1 [[VP_VECTOR_LOOP_EXITCOND]]), [[BB2]](!i1 [[VP_VECTOR_LOOP_EXITCOND]])
; CHECK-NEXT:    PREDECESSORS(1): [[BB11]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB12]]:
; CHECK-NEXT:     [DA: Uni] i64 [[VP_INDUCTION_PHI_IND_FINAL:%.*]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:    SUCCESSORS(1):[[BB13:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB13]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB12]]
;
entry:
;          entry
;            |
; +----->loop.header
; |       /    \
; |     bb1    bb2
; |     / \    / \
; |   bb3 bb4 bb5 bb6
; |     \   \  /  /
; +------loop.latch
;            |
;        loop.exit
;            |
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %loop.header

loop.header:                                         ; preds = %loop.latch, %entry
  %induction.phi = phi i64 [ 0, %entry ], [ %induction, %loop.latch ]
  %gep = getelementptr inbounds i32, i32* %a, i64 %induction.phi
  %loop.header.ld = load i32, i32* %gep, align 4
  %loop.header.varying = icmp eq i32 %loop.header.ld, 0
  br i1 %loop.header.varying, label %bb1, label %bb2

bb1:                                          ; preds = %loop.header
  %bb1.varying = icmp sgt i32 %loop.header.ld, 1
  br i1 %bb1.varying, label %bb3, label %bb4

bb3:                                         ; preds = %bb1
  %bb3.mul = mul nsw i32 %loop.header.ld, 3
  br label %loop.latch

bb4:                                          ; preds = %bb1
  %bb4.add = add nsw i32 %loop.header.ld, 4
  br label %loop.latch

bb2:                                        ; preds = %loop.header
  %bb2.varying = icmp sgt i32 %loop.header.ld, 2
  br i1 %bb2.varying, label %bb5, label %bb6

bb5:                                        ; preds = %bb2
  %bb5.sub = sub nsw i32 %loop.header.ld, 5
  br label %loop.latch

bb6:                                        ; preds = %bb2
  %bb6.mul = mul nsw i32 %loop.header.ld, 6
  br label %loop.latch

loop.latch:                                          ; preds = %bb4, %bb3, %bb6, %bb5
  %induction = add nuw nsw i64 %induction.phi, 1
  %exitcond = icmp eq i64 %induction, 1000
  br i1 %exitcond, label %loop.exit, label %loop.header

loop.exit:                                          ; preds = %loop.latch
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"()]
  ret void
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

attributes #0 = { noinline nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
