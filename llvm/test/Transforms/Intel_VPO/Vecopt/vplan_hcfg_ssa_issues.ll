; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -S < %s -VPlanDriver -disable-output -vplan-print-after-linearization | FileCheck %s
;
; Ensure that we don't generate broken SSA form in the output LLVM IR. That used
; to happen due to merge loop exit transformation breaking SSA form. If uniform
; branches were present, preserving them was resulting in that broken SSA being
; emitted back into LLVM.
;
; Currently, we workaround that by detecting such cases and linearizing uniform
; branches in the predicator (see uniform block-predicate instructions in the
; output - they shouldn't happen without this hack). Proper fix would be to not
; break SSA form at all and remove the predicator workarounds.
;
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)

define dso_local void @header_use(i64 %N, i64 *%a, i64 %mask_out_inner_loop) local_unnamed_addr #0 {
; CHECK-LABEL:  After predication and linearization
; CHECK-NEXT:    REGION: [[REGION0:region[0-9]+]] (BP: NULL)
; CHECK-NEXT:    [[BB0:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[LOOP0:loop[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    REGION: [[LOOP0]] (BP: NULL)
; CHECK-NEXT:    [[BB1:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB2:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_OUTER_IV:%.*]] = phi  [ i64 [[VP_OUTER_IV_NEXT:%.*]], [[BB3:BB[0-9]+]] ],  [ i64 0, [[BB1]] ]
; CHECK-NEXT:    SUCCESSORS(1):[[LOOP1:loop[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB3]] [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:    REGION: [[LOOP1]] (BP: NULL)
; CHECK-NEXT:    [[BB4:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB5:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP_INNER_IV:%.*]] = phi  [ i64 [[VP_INNER_IV_NEXT:%.*]], [[BB6:BB[0-9]+]] ],  [ i64 0, [[BB4]] ]
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP_HEADER_PHI_USE:%.*]] = phi  [ i64 0, [[BB4]] ],  [ i64 [[VP_DEF:%.*]], [[BB6]] ]
; CHECK-NEXT:     [DA: Uniform]   i32 [[VP0:%.*]] = phi  [ i32 [[VP1:%.*]], [[BB6]] ],  [ i32 0, [[BB4]] ]
; CHECK-NEXT:     [DA: Uniform]   i64* [[VP_ARRAYIDX:%.*]] = getelementptr inbounds i64* [[A0:%.*]] i64 [[VP_INNER_IV]]
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP_LD:%.*]] = load i64* [[VP_ARRAYIDX]]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_CMP:%.*]] = icmp i64 [[N0:%.*]] i64 42
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_CMP_NOT:%.*]] = not i1 [[VP_CMP]]
; CHECK-NEXT:    SUCCESSORS(1):[[REGION1:region[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB6]] [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:    REGION: [[REGION1]] (BP: NULL)
; CHECK-NEXT:    [[BB7:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB8:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB8]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP2:%.*]] = block-predicate i1 [[VP_CMP_NOT]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB9:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB7]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB9]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP3:%.*]] = block-predicate i1 [[VP_CMP]]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_SIDEEXIT_CMP:%.*]] = icmp i64 [[N0]] i64 13
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_SIDEEXIT_CMP_NOT:%.*]] = not i1 [[VP_SIDEEXIT_CMP]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB10:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB8]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB10]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_BB7_BR_VP_SIDEEXIT_CMP_NOT:%.*]] = and i1 [[VP_CMP]] i1 [[VP_SIDEEXIT_CMP_NOT]]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_BB7_BR_VP_SIDEEXIT_CMP:%.*]] = and i1 [[VP_CMP]] i1 [[VP_SIDEEXIT_CMP]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB11:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB9]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB11]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP4:%.*]] = or i1 [[VP_BB7_BR_VP_SIDEEXIT_CMP_NOT]] i1 [[VP_CMP_NOT]]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP5:%.*]] = block-predicate i1 [[VP4]]
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP_DEF]] = add i64 [[N0]] i64 1
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP_INNER_IV_NEXT]] = add i64 [[VP_INNER_IV]] i64 1
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_EXITCOND:%.*]] = icmp i64 [[VP_INNER_IV_NEXT]] i64 42
; CHECK-NEXT:    SUCCESSORS(1):[[INTERMEDIATE_BB0:IntermediateBB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB10]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[INTERMEDIATE_BB0]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP6:%.*]] = block-predicate i1 [[VP_BB7_BR_VP_SIDEEXIT_CMP]]
; CHECK-NEXT:    SUCCESSORS(1):[[NEW_LOOP_LATCH0:NewLoopLatch[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB11]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[NEW_LOOP_LATCH0]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i32 [[VP1]] = phi  [ i32 [[VP0]], [[BB11]] ],  [ i32 1, [[INTERMEDIATE_BB0]] ]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_TAKEBACKEDGECOND:%.*]] = phi  [ i1 [[VP_EXITCOND]], [[BB11]] ],  [ i1 true, [[INTERMEDIATE_BB0]] ]
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[INTERMEDIATE_BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    SUCCESSORS(1):[[BB6]]
; CHECK-NEXT:    END Region([[REGION1]])
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:     Condition([[NEW_LOOP_LATCH0]]): [DA: Uniform]   i1 [[VP_TAKEBACKEDGECOND]] = phi  [ i1 [[VP_EXITCOND]], [[BB11]] ],  [ i1 true, [[INTERMEDIATE_BB0]] ]
; CHECK-NEXT:    SUCCESSORS(2):[[CASCADED_IF_BLOCK0:CascadedIfBlock[0-9]+]](i1 [[VP_TAKEBACKEDGECOND]]), [[BB5]](!i1 [[VP_TAKEBACKEDGECOND]])
; CHECK-NEXT:    PREDECESSORS(1): [[REGION1]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[CASCADED_IF_BLOCK0]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP7:%.*]] = icmp i32 [[VP1]] i32 1
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP__NOT:%.*]] = not i1 [[VP7]]
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:    SUCCESSORS(1):[[REGION2:region[0-9]+]]
; CHECK-NEXT:    END Region([[LOOP1]])
; CHECK-EMPTY:
; CHECK-NEXT:    REGION: [[REGION2]] (BP: NULL)
; CHECK-NEXT:    [[BB12:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB13:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB13]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP8:%.*]] = block-predicate i1 [[VP__NOT]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB14:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB12]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB14]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP9:%.*]] = block-predicate i1 [[VP7]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB15:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB13]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB15]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_OUTER_IV_NEXT]] = add i64 [[VP_OUTER_IV]] i64 1
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_OUTER_EXIT_COND:%.*]] = icmp i64 [[VP_OUTER_IV_NEXT]] i64 [[N0]]
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB14]]
; CHECK-EMPTY:
; CHECK-NEXT:    SUCCESSORS(1):[[BB3]]
; CHECK-NEXT:    END Region([[REGION2]])
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:     Condition([[BB15]]): [DA: Uniform]   i1 [[VP_OUTER_EXIT_COND]] = icmp i64 [[VP_OUTER_IV_NEXT]] i64 [[N0]]
; CHECK-NEXT:    SUCCESSORS(2):[[BB16:BB[0-9]+]](i1 [[VP_OUTER_EXIT_COND]]), [[BB2]](!i1 [[VP_OUTER_EXIT_COND]])
; CHECK-NEXT:    PREDECESSORS(1): [[REGION2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB16]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    SUCCESSORS(1):[[BB17:BB[0-9]+]]
; CHECK-NEXT:    END Region([[LOOP0]])
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB17]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[LOOP0]]
; CHECK-EMPTY:
; CHECK-NEXT:    END Region([[REGION0]])
;
entry:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %outer.header

outer.header:
  %outer.iv = phi i64 [ %outer.iv.next, %outer.latch ], [ 0, %entry ]
  br label %inner.preheader

inner.preheader:
  br label %inner.header

inner.header:
  %inner.iv = phi i64 [ %inner.iv.next, %inner.latch ], [ 0, %inner.preheader ]
  %header.phi.use = phi i64 [ 0, %inner.preheader ], [ %def, %inner.latch ]
  %arrayidx = getelementptr inbounds i64, i64* %a, i64 %inner.iv
  %ld = load i64, i64* %arrayidx
  %cmp = icmp eq i64 %N, 42
  br i1 %cmp, label %bb1, label %bb2

bb1:
  %sideexit.cmp = icmp eq i64 %N, 13
  br i1 %sideexit.cmp, label %inner.sideexit, label %inner.latch

bb2:
  br label %inner.latch

inner.latch:
  %def = add nsw i64 %N, 1
  %inner.iv.next = add nuw nsw i64 %inner.iv, 1
  %exitcond = icmp eq i64 %inner.iv.next, 42
  br i1 %exitcond, label %inner.loopexit, label %inner.header

inner.sideexit:
  br label %outer.latch

inner.loopexit:
  br label %outer.latch

outer.latch:
  %outer.iv.next = add nuw nsw i64 %outer.iv, 1
  %outer_exit_cond = icmp eq i64 %outer.iv.next, %N
  br i1 %outer_exit_cond, label %outer.loopexit, label %outer.header

outer.loopexit:
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"()]
  br label %for.end7

for.end7:
  ret void
}

define dso_local void @side_exit_use(i64 %N, i64 *%a, i64 %mask_out_inner_loop) local_unnamed_addr #0 {
; CHECK-LABEL:  After predication and linearization
; CHECK-NEXT:    REGION: [[REGION0:region[0-9]+]] (BP: NULL)
; CHECK-NEXT:    [[BB0:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[LOOP0:loop[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    REGION: [[LOOP0]] (BP: NULL)
; CHECK-NEXT:    [[BB1:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB2:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_OUTER_IV:%.*]] = phi  [ i64 [[VP_OUTER_IV_NEXT:%.*]], [[BB3:BB[0-9]+]] ],  [ i64 0, [[BB1]] ]
; CHECK-NEXT:    SUCCESSORS(1):[[LOOP1:loop[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB3]] [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:    REGION: [[LOOP1]] (BP: NULL)
; CHECK-NEXT:    [[BB4:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB5:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP_INNER_IV:%.*]] = phi  [ i64 [[VP_INNER_IV_NEXT:%.*]], [[BB6:BB[0-9]+]] ],  [ i64 0, [[BB4]] ]
; CHECK-NEXT:     [DA: Uniform]   i32 [[VP0:%.*]] = phi  [ i32 [[VP1:%.*]], [[BB6]] ],  [ i32 0, [[BB4]] ]
; CHECK-NEXT:     [DA: Uniform]   i64* [[VP_ARRAYIDX:%.*]] = getelementptr inbounds i64* [[A0:%.*]] i64 [[VP_INNER_IV]]
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP_LD:%.*]] = load i64* [[VP_ARRAYIDX]]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_CMP:%.*]] = icmp i64 [[N0:%.*]] i64 42
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_CMP_NOT:%.*]] = not i1 [[VP_CMP]]
; CHECK-NEXT:    SUCCESSORS(1):[[REGION1:region[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB6]] [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:    REGION: [[REGION1]] (BP: NULL)
; CHECK-NEXT:    [[BB7:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB8:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB8]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP2:%.*]] = block-predicate i1 [[VP_CMP_NOT]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB9:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB7]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB9]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP3:%.*]] = block-predicate i1 [[VP_CMP]]
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP_DEF:%.*]] = add i64 [[N0]] i64 1
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_SIDEEXIT_CMP:%.*]] = icmp i64 [[N0]] i64 13
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_SIDEEXIT_CMP_NOT:%.*]] = not i1 [[VP_SIDEEXIT_CMP]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB10:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB8]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB10]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_BB7_BR_VP_SIDEEXIT_CMP_NOT:%.*]] = and i1 [[VP_CMP]] i1 [[VP_SIDEEXIT_CMP_NOT]]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_BB7_BR_VP_SIDEEXIT_CMP:%.*]] = and i1 [[VP_CMP]] i1 [[VP_SIDEEXIT_CMP]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB11:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB9]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB11]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP4:%.*]] = or i1 [[VP_BB7_BR_VP_SIDEEXIT_CMP_NOT]] i1 [[VP_CMP_NOT]]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP5:%.*]] = block-predicate i1 [[VP4]]
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP_INNER_IV_NEXT]] = add i64 [[VP_INNER_IV]] i64 1
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_EXITCOND:%.*]] = icmp i64 [[VP_INNER_IV_NEXT]] i64 42
; CHECK-NEXT:    SUCCESSORS(1):[[INTERMEDIATE_BB0:IntermediateBB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB10]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[INTERMEDIATE_BB0]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP_EXIT_USE:%.*]] = phi  [ i64 [[VP_DEF]], [[BB9]] ]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP6:%.*]] = block-predicate i1 [[VP_BB7_BR_VP_SIDEEXIT_CMP]]
; CHECK-NEXT:    SUCCESSORS(1):[[NEW_LOOP_LATCH0:NewLoopLatch[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB11]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[NEW_LOOP_LATCH0]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i32 [[VP1]] = phi  [ i32 [[VP0]], [[BB11]] ],  [ i32 1, [[INTERMEDIATE_BB0]] ]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_TAKEBACKEDGECOND:%.*]] = phi  [ i1 [[VP_EXITCOND]], [[BB11]] ],  [ i1 true, [[INTERMEDIATE_BB0]] ]
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[INTERMEDIATE_BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    SUCCESSORS(1):[[BB6]]
; CHECK-NEXT:    END Region([[REGION1]])
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:     Condition([[NEW_LOOP_LATCH0]]): [DA: Uniform]   i1 [[VP_TAKEBACKEDGECOND]] = phi  [ i1 [[VP_EXITCOND]], [[BB11]] ],  [ i1 true, [[INTERMEDIATE_BB0]] ]
; CHECK-NEXT:    SUCCESSORS(2):[[CASCADED_IF_BLOCK0:CascadedIfBlock[0-9]+]](i1 [[VP_TAKEBACKEDGECOND]]), [[BB5]](!i1 [[VP_TAKEBACKEDGECOND]])
; CHECK-NEXT:    PREDECESSORS(1): [[REGION1]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[CASCADED_IF_BLOCK0]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP7:%.*]] = icmp i32 [[VP1]] i32 1
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP__NOT:%.*]] = not i1 [[VP7]]
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:    SUCCESSORS(1):[[REGION2:region[0-9]+]]
; CHECK-NEXT:    END Region([[LOOP1]])
; CHECK-EMPTY:
; CHECK-NEXT:    REGION: [[REGION2]] (BP: NULL)
; CHECK-NEXT:    [[BB12:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB13:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB13]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP8:%.*]] = block-predicate i1 [[VP__NOT]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB14:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB12]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB14]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP9:%.*]] = block-predicate i1 [[VP7]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB15:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB13]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB15]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_OUTER_IV_NEXT]] = add i64 [[VP_OUTER_IV]] i64 1
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_OUTER_EXIT_COND:%.*]] = icmp i64 [[VP_OUTER_IV_NEXT]] i64 [[N0]]
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB14]]
; CHECK-EMPTY:
; CHECK-NEXT:    SUCCESSORS(1):[[BB3]]
; CHECK-NEXT:    END Region([[REGION2]])
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:     Condition([[BB15]]): [DA: Uniform]   i1 [[VP_OUTER_EXIT_COND]] = icmp i64 [[VP_OUTER_IV_NEXT]] i64 [[N0]]
; CHECK-NEXT:    SUCCESSORS(2):[[BB16:BB[0-9]+]](i1 [[VP_OUTER_EXIT_COND]]), [[BB2]](!i1 [[VP_OUTER_EXIT_COND]])
; CHECK-NEXT:    PREDECESSORS(1): [[REGION2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB16]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    SUCCESSORS(1):[[BB17:BB[0-9]+]]
; CHECK-NEXT:    END Region([[LOOP0]])
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB17]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[LOOP0]]
; CHECK-EMPTY:
; CHECK-NEXT:    END Region([[REGION0]])
;
entry:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %outer.header

outer.header:
  %outer.iv = phi i64 [ %outer.iv.next, %outer.latch ], [ 0, %entry ]
  br label %inner.preheader

inner.preheader:
  br label %inner.header

inner.header:
  %inner.iv = phi i64 [ %inner.iv.next, %inner.latch ], [ 0, %inner.preheader ]
  %arrayidx = getelementptr inbounds i64, i64* %a, i64 %inner.iv
  %ld = load i64, i64* %arrayidx
  %cmp = icmp eq i64 %N, 42
  br i1 %cmp, label %bb1, label %bb2

bb1:
  %def = add nsw i64 %N, 1
  %sideexit.cmp = icmp eq i64 %N, 13
  br i1 %sideexit.cmp, label %inner.sideexit, label %inner.latch

bb2:
  br label %inner.latch

inner.latch:
  %inner.iv.next = add nuw nsw i64 %inner.iv, 1
  %exitcond = icmp eq i64 %inner.iv.next, 42
  br i1 %exitcond, label %inner.loopexit, label %inner.header

inner.sideexit:
  %exit.use = phi i64 [ %def, %bb1 ]
  br label %outer.latch

inner.loopexit:
  br label %outer.latch

outer.latch:
  %outer.iv.next = add nuw nsw i64 %outer.iv, 1
  %outer_exit_cond = icmp eq i64 %outer.iv.next, %N
  br i1 %outer_exit_cond, label %outer.loopexit, label %outer.header

outer.loopexit:
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"()]
  br label %for.end7

for.end7:
  ret void
}

define dso_local void @exit_use(i64 %N, i64 *%a, i64 %mask_out_inner_loop) local_unnamed_addr #0 {
; CHECK-LABEL:  After predication and linearization
; CHECK-NEXT:    REGION: [[REGION0:region[0-9]+]] (BP: NULL)
; CHECK-NEXT:    [[BB0:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[LOOP0:loop[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    REGION: [[LOOP0]] (BP: NULL)
; CHECK-NEXT:    [[BB1:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB2:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_OUTER_IV:%.*]] = phi  [ i64 [[VP_OUTER_IV_NEXT:%.*]], [[BB3:BB[0-9]+]] ],  [ i64 0, [[BB1]] ]
; CHECK-NEXT:    SUCCESSORS(1):[[LOOP1:loop[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB3]] [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:    REGION: [[LOOP1]] (BP: NULL)
; CHECK-NEXT:    [[BB4:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB5:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP_INNER_IV:%.*]] = phi  [ i64 [[VP_INNER_IV_NEXT:%.*]], [[BB6:BB[0-9]+]] ],  [ i64 0, [[BB4]] ]
; CHECK-NEXT:     [DA: Uniform]   i32 [[VP0:%.*]] = phi  [ i32 [[VP1:%.*]], [[BB6]] ],  [ i32 0, [[BB4]] ]
; CHECK-NEXT:     [DA: Uniform]   i64* [[VP_ARRAYIDX:%.*]] = getelementptr inbounds i64* [[A0:%.*]] i64 [[VP_INNER_IV]]
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP_LD:%.*]] = load i64* [[VP_ARRAYIDX]]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_CMP:%.*]] = icmp i64 [[N0:%.*]] i64 42
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_CMP_NOT:%.*]] = not i1 [[VP_CMP]]
; CHECK-NEXT:    SUCCESSORS(1):[[REGION1:region[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB6]] [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:    REGION: [[REGION1]] (BP: NULL)
; CHECK-NEXT:    [[BB7:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB8:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB8]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP2:%.*]] = block-predicate i1 [[VP_CMP_NOT]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB9:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB7]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB9]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP3:%.*]] = block-predicate i1 [[VP_CMP]]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_SIDEEXIT_CMP:%.*]] = icmp i64 [[N0]] i64 13
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_SIDEEXIT_CMP_NOT:%.*]] = not i1 [[VP_SIDEEXIT_CMP]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB10:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB8]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB10]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_BB7_BR_VP_SIDEEXIT_CMP_NOT:%.*]] = and i1 [[VP_CMP]] i1 [[VP_SIDEEXIT_CMP_NOT]]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_BB7_BR_VP_SIDEEXIT_CMP:%.*]] = and i1 [[VP_CMP]] i1 [[VP_SIDEEXIT_CMP]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB11:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB9]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB11]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP4:%.*]] = or i1 [[VP_BB7_BR_VP_SIDEEXIT_CMP_NOT]] i1 [[VP_CMP_NOT]]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP5:%.*]] = block-predicate i1 [[VP4]]
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP_DEF:%.*]] = add i64 [[N0]] i64 1
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP_INNER_IV_NEXT]] = add i64 [[VP_INNER_IV]] i64 1
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_EXITCOND:%.*]] = icmp i64 [[VP_INNER_IV_NEXT]] i64 42
; CHECK-NEXT:    SUCCESSORS(1):[[INTERMEDIATE_BB0:IntermediateBB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB10]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[INTERMEDIATE_BB0]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP6:%.*]] = block-predicate i1 [[VP_BB7_BR_VP_SIDEEXIT_CMP]]
; CHECK-NEXT:    SUCCESSORS(1):[[NEW_LOOP_LATCH0:NewLoopLatch[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB11]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[NEW_LOOP_LATCH0]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i32 [[VP1]] = phi  [ i32 [[VP0]], [[BB11]] ],  [ i32 1, [[INTERMEDIATE_BB0]] ]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_TAKEBACKEDGECOND:%.*]] = phi  [ i1 [[VP_EXITCOND]], [[BB11]] ],  [ i1 true, [[INTERMEDIATE_BB0]] ]
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[INTERMEDIATE_BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    SUCCESSORS(1):[[BB6]]
; CHECK-NEXT:    END Region([[REGION1]])
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:     Condition([[NEW_LOOP_LATCH0]]): [DA: Uniform]   i1 [[VP_TAKEBACKEDGECOND]] = phi  [ i1 [[VP_EXITCOND]], [[BB11]] ],  [ i1 true, [[INTERMEDIATE_BB0]] ]
; CHECK-NEXT:    SUCCESSORS(2):[[CASCADED_IF_BLOCK0:CascadedIfBlock[0-9]+]](i1 [[VP_TAKEBACKEDGECOND]]), [[BB5]](!i1 [[VP_TAKEBACKEDGECOND]])
; CHECK-NEXT:    PREDECESSORS(1): [[REGION1]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[CASCADED_IF_BLOCK0]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP7:%.*]] = icmp i32 [[VP1]] i32 1
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP__NOT:%.*]] = not i1 [[VP7]]
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:    SUCCESSORS(1):[[REGION2:region[0-9]+]]
; CHECK-NEXT:    END Region([[LOOP1]])
; CHECK-EMPTY:
; CHECK-NEXT:    REGION: [[REGION2]] (BP: NULL)
; CHECK-NEXT:    [[BB12:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB13:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB13]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP_EXIT_USE:%.*]] = phi  [ i64 [[VP_DEF]], [[BB12]] ]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP8:%.*]] = block-predicate i1 [[VP__NOT]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB14:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB12]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB14]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP9:%.*]] = block-predicate i1 [[VP7]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB15:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB13]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB15]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_OUTER_IV_NEXT]] = add i64 [[VP_OUTER_IV]] i64 1
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_OUTER_EXIT_COND:%.*]] = icmp i64 [[VP_OUTER_IV_NEXT]] i64 [[N0]]
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB14]]
; CHECK-EMPTY:
; CHECK-NEXT:    SUCCESSORS(1):[[BB3]]
; CHECK-NEXT:    END Region([[REGION2]])
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:     Condition([[BB15]]): [DA: Uniform]   i1 [[VP_OUTER_EXIT_COND]] = icmp i64 [[VP_OUTER_IV_NEXT]] i64 [[N0]]
; CHECK-NEXT:    SUCCESSORS(2):[[BB16:BB[0-9]+]](i1 [[VP_OUTER_EXIT_COND]]), [[BB2]](!i1 [[VP_OUTER_EXIT_COND]])
; CHECK-NEXT:    PREDECESSORS(1): [[REGION2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB16]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    SUCCESSORS(1):[[BB17:BB[0-9]+]]
; CHECK-NEXT:    END Region([[LOOP0]])
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB17]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[LOOP0]]
; CHECK-EMPTY:
; CHECK-NEXT:    END Region([[REGION0]])
;
entry:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %outer.header

outer.header:
  %outer.iv = phi i64 [ %outer.iv.next, %outer.latch ], [ 0, %entry ]
  br label %inner.preheader

inner.preheader:
  br label %inner.header

inner.header:
  %inner.iv = phi i64 [ %inner.iv.next, %inner.latch ], [ 0, %inner.preheader ]
  %arrayidx = getelementptr inbounds i64, i64* %a, i64 %inner.iv
  %ld = load i64, i64* %arrayidx
  %cmp = icmp eq i64 %N, 42
  br i1 %cmp, label %bb1, label %bb2

bb1:
  %sideexit.cmp = icmp eq i64 %N, 13
  br i1 %sideexit.cmp, label %inner.sideexit, label %inner.latch

bb2:
  br label %inner.latch

inner.latch:
  %def = add nsw i64 %N, 1
  %inner.iv.next = add nuw nsw i64 %inner.iv, 1
  %exitcond = icmp eq i64 %inner.iv.next, 42
  br i1 %exitcond, label %inner.loopexit, label %inner.header

inner.sideexit:
  br label %outer.latch

inner.loopexit:
  %exit.use = phi i64 [ %def, %inner.latch ]
  br label %outer.latch

outer.latch:
  %outer.iv.next = add nuw nsw i64 %outer.iv, 1
  %outer_exit_cond = icmp eq i64 %outer.iv.next, %N
  br i1 %outer_exit_cond, label %outer.loopexit, label %outer.header

outer.loopexit:
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"()]
  br label %for.end7

for.end7:
  ret void
}

define dso_local void @no_ssa_breakage(i64 %N, i64 *%a, i64 %mask_out_inner_loop) local_unnamed_addr #0 {
; CHECK-LABEL:  After predication and linearization
; CHECK-NEXT:    REGION: [[REGION0:region[0-9]+]] (BP: NULL)
; CHECK-NEXT:    [[BB0:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[LOOP0:loop[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    REGION: [[LOOP0]] (BP: NULL)
; CHECK-NEXT:    [[BB1:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB2:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_OUTER_IV:%.*]] = phi  [ i64 [[VP_OUTER_IV_NEXT:%.*]], [[BB3:BB[0-9]+]] ],  [ i64 0, [[BB1]] ]
; CHECK-NEXT:    SUCCESSORS(1):[[LOOP1:loop[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB3]] [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:    REGION: [[LOOP1]] (BP: NULL)
; CHECK-NEXT:    [[BB4:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB5:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP_INNER_IV:%.*]] = phi  [ i64 [[VP_INNER_IV_NEXT:%.*]], [[BB6:BB[0-9]+]] ],  [ i64 0, [[BB4]] ]
; CHECK-NEXT:     [DA: Uniform]   i32 [[VP0:%.*]] = phi  [ i32 [[VP1:%.*]], [[BB6]] ],  [ i32 0, [[BB4]] ]
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP_INNER_IV_NEXT]] = add i64 [[VP_INNER_IV]] i64 1
; CHECK-NEXT:     [DA: Uniform]   i64* [[VP_ARRAYIDX:%.*]] = getelementptr inbounds i64* [[A0:%.*]] i64 [[VP_INNER_IV]]
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP_LD:%.*]] = load i64* [[VP_ARRAYIDX]]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_CMP:%.*]] = icmp i64 [[N0:%.*]] i64 42
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_CMP_NOT:%.*]] = not i1 [[VP_CMP]]
; CHECK-NEXT:    SUCCESSORS(1):[[REGION1:region[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB6]] [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:    REGION: [[REGION1]] (BP: NULL)
; CHECK-NEXT:    [[BB7:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:     Condition([[BB5]]): [DA: Uniform]   i1 [[VP_CMP]] = icmp i64 [[N0]] i64 42
; CHECK-NEXT:    SUCCESSORS(2):[[BB8:BB[0-9]+]](i1 [[VP_CMP]]), [[BB9:BB[0-9]+]](!i1 [[VP_CMP]])
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB9]] (BP: NULL) :
; CHECK-NEXT:       <Empty Block>
; CHECK-NEXT:      SUCCESSORS(1):[[BB10:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB7]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB8]] (BP: NULL) :
; CHECK-NEXT:       [DA: Uniform]   i1 [[VP_SIDEEXIT_CMP:%.*]] = icmp i64 [[N0]] i64 13
; CHECK-NEXT:       [DA: Uniform]   i1 [[VP_SIDEEXIT_CMP_NOT:%.*]] = not i1 [[VP_SIDEEXIT_CMP]]
; CHECK-NEXT:      SUCCESSORS(1):[[BB11:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB7]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB11]] (BP: NULL) :
; CHECK-NEXT:       [DA: Uniform]   i1 [[VP_BB7_BR_VP_SIDEEXIT_CMP_NOT:%.*]] = and i1 [[VP_CMP]] i1 [[VP_SIDEEXIT_CMP_NOT]]
; CHECK-NEXT:       [DA: Uniform]   i1 [[VP_BB7_BR_VP_SIDEEXIT_CMP:%.*]] = and i1 [[VP_CMP]] i1 [[VP_SIDEEXIT_CMP]]
; CHECK-NEXT:       Condition([[BB8]]): [DA: Uniform]   i1 [[VP_SIDEEXIT_CMP]] = icmp i64 [[N0]] i64 13
; CHECK-NEXT:      SUCCESSORS(2):[[INTERMEDIATE_BB0:IntermediateBB[0-9]+]](i1 [[VP_SIDEEXIT_CMP]]), [[BB10]](!i1 [[VP_SIDEEXIT_CMP]])
; CHECK-NEXT:      PREDECESSORS(1): [[BB8]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB10]] (BP: NULL) :
; CHECK-NEXT:       [DA: Uniform]   i1 [[VP_BB7_BR_VP_SIDEEXIT_CMP_NOT_PHI_BB9:%.*]] = phi  [ i1 false, [[BB9]] ],  [ i1 [[VP_BB7_BR_VP_SIDEEXIT_CMP_NOT]], [[BB11]] ]
; CHECK-NEXT:       [DA: Uniform]   i1 [[VP2:%.*]] = or i1 [[VP_BB7_BR_VP_SIDEEXIT_CMP_NOT_PHI_BB9]] i1 [[VP_CMP_NOT]]
; CHECK-NEXT:       [DA: Uniform]   i1 [[VP_EXITCOND:%.*]] = icmp i64 [[VP_INNER_IV_NEXT]] i64 42
; CHECK-NEXT:      SUCCESSORS(1):[[NEW_LOOP_LATCH0:NewLoopLatch[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(2): [[BB9]] [[BB11]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[INTERMEDIATE_BB0]] (BP: NULL) :
; CHECK-NEXT:       <Empty Block>
; CHECK-NEXT:      SUCCESSORS(1):[[NEW_LOOP_LATCH0]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB11]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[NEW_LOOP_LATCH0]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i32 [[VP1]] = phi  [ i32 [[VP0]], [[BB10]] ],  [ i32 1, [[INTERMEDIATE_BB0]] ]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_TAKEBACKEDGECOND:%.*]] = phi  [ i1 [[VP_EXITCOND]], [[BB10]] ],  [ i1 true, [[INTERMEDIATE_BB0]] ]
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(2): [[BB10]] [[INTERMEDIATE_BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    SUCCESSORS(1):[[BB6]]
; CHECK-NEXT:    END Region([[REGION1]])
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:     Condition([[NEW_LOOP_LATCH0]]): [DA: Uniform]   i1 [[VP_TAKEBACKEDGECOND]] = phi  [ i1 [[VP_EXITCOND]], [[BB10]] ],  [ i1 true, [[INTERMEDIATE_BB0]] ]
; CHECK-NEXT:    SUCCESSORS(2):[[CASCADED_IF_BLOCK0:CascadedIfBlock[0-9]+]](i1 [[VP_TAKEBACKEDGECOND]]), [[BB5]](!i1 [[VP_TAKEBACKEDGECOND]])
; CHECK-NEXT:    PREDECESSORS(1): [[REGION1]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[CASCADED_IF_BLOCK0]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP3:%.*]] = icmp i32 [[VP1]] i32 1
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP__NOT:%.*]] = not i1 [[VP3]]
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:    SUCCESSORS(1):[[REGION2:region[0-9]+]]
; CHECK-NEXT:    END Region([[LOOP1]])
; CHECK-EMPTY:
; CHECK-NEXT:    REGION: [[REGION2]] (BP: NULL)
; CHECK-NEXT:    [[BB12:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:     Condition([[CASCADED_IF_BLOCK0]]): [DA: Uniform]   i1 [[VP3]] = icmp i32 [[VP1]] i32 1
; CHECK-NEXT:    SUCCESSORS(2):[[BB13:BB[0-9]+]](i1 [[VP3]]), [[BB14:BB[0-9]+]](!i1 [[VP3]])
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB14]] (BP: NULL) :
; CHECK-NEXT:       <Empty Block>
; CHECK-NEXT:      SUCCESSORS(1):[[BB15:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB12]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB13]] (BP: NULL) :
; CHECK-NEXT:       <Empty Block>
; CHECK-NEXT:      SUCCESSORS(1):[[BB15]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB12]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB15]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_OUTER_IV_NEXT]] = add i64 [[VP_OUTER_IV]] i64 1
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_OUTER_EXIT_COND:%.*]] = icmp i64 [[VP_OUTER_IV_NEXT]] i64 [[N0]]
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(2): [[BB14]] [[BB13]]
; CHECK-EMPTY:
; CHECK-NEXT:    SUCCESSORS(1):[[BB3]]
; CHECK-NEXT:    END Region([[REGION2]])
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:     Condition([[BB15]]): [DA: Uniform]   i1 [[VP_OUTER_EXIT_COND]] = icmp i64 [[VP_OUTER_IV_NEXT]] i64 [[N0]]
; CHECK-NEXT:    SUCCESSORS(2):[[BB16:BB[0-9]+]](i1 [[VP_OUTER_EXIT_COND]]), [[BB2]](!i1 [[VP_OUTER_EXIT_COND]])
; CHECK-NEXT:    PREDECESSORS(1): [[REGION2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB16]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    SUCCESSORS(1):[[BB17:BB[0-9]+]]
; CHECK-NEXT:    END Region([[LOOP0]])
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB17]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[LOOP0]]
; CHECK-EMPTY:
; CHECK-NEXT:    END Region([[REGION0]])
;
entry:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %outer.header

outer.header:
  %outer.iv = phi i64 [ %outer.iv.next, %outer.latch ], [ 0, %entry ]
  br label %inner.preheader

inner.preheader:
  br label %inner.header

inner.header:
  %inner.iv = phi i64 [ %inner.iv.next, %inner.latch ], [ 0, %inner.preheader ]
  %inner.iv.next = add nuw nsw i64 %inner.iv, 1
  %arrayidx = getelementptr inbounds i64, i64* %a, i64 %inner.iv
  %ld = load i64, i64* %arrayidx
  %cmp = icmp eq i64 %N, 42
  br i1 %cmp, label %bb1, label %bb2

bb1:
  %sideexit.cmp = icmp eq i64 %N, 13
  br i1 %sideexit.cmp, label %inner.sideexit, label %inner.latch

bb2:
  br label %inner.latch

inner.latch:
  %exitcond = icmp eq i64 %inner.iv.next, 42
  br i1 %exitcond, label %inner.loopexit, label %inner.header

inner.sideexit:
  br label %outer.latch

inner.loopexit:
  br label %outer.latch

outer.latch:
  %outer.iv.next = add nuw nsw i64 %outer.iv, 1
  %outer_exit_cond = icmp eq i64 %outer.iv.next, %N
  br i1 %outer_exit_cond, label %outer.loopexit, label %outer.header

outer.loopexit:
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"()]
  br label %for.end7

for.end7:
  ret void
}
attributes #0 = { norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"clang version 4.0.0 (branches/vpo 20869)"}
!1 = !{!2, !2, i64 0}
!2 = !{!"long", !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
