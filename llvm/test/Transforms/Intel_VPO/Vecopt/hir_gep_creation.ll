; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -passes='hir-ssa-deconstruction,hir-temp-cleanup,hir-vec-dir-insert,hir-vplan-vec'  -disable-output  -vplan-print-after-plain-cfg < %s | FileCheck %s

; The test does not really CHECK the output, it just ensures that there is no crash.

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@PL_charclass = external hidden unnamed_addr constant [256 x i32], align 16

;    + DO i1 = 0, %i87 + -1 * umin((-1 + %i87), %i85) + -1, 1   <DO_MULTI_EXIT_LOOP>
;    |   %i91.out = &((%i87)[-1 * i1]);
;    |   %i92 = &((%i87)[-1 * i1 + -1]);
;    |   %i93 = (%i87)[-1 * i1 + -1];
;    |   %i97 = (@PL_charclass)[0][%i93]  &  17408;
;    |   if (%i97 != 17408)
;    |   {
;    |      goto bb101;
;    |   }
;    |   (%i87)[-1 * i1 + -1] = 0;
;    + END LOOP

define void @Perl_do_open6( ptr %arg1,    i32 %arg5, ptr %i87, ptr %i85) {
; CHECK-LABEL:  VPlan after importing plain CFG:
; CHECK-NEXT:  VPlan IR for: Perl_do_open6:HIR.#{{[0-9]+}}
; CHECK-NEXT:  External Defs Start:
; CHECK-DAG:     [[VP0:%.*]] = {@PL_charclass}
; CHECK-DAG:     [[VP1:%.*]] = {%i87}
; CHECK-DAG:     [[VP2:%.*]] = {-1 * umin((-1 + ptrtoint.ptr.i64(%i87)), ptrtoint.ptr.i64(%i85)) + ptrtoint.ptr.i64(%i87) + -1}
; CHECK-NEXT:  External Defs End:
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     i64 [[VP3:%.*]] = add i64 [[VP2]] i64 1
; CHECK-NEXT:     br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], [[BB3:BB[0-9]+]]
; CHECK-NEXT:     i64 [[VP4:%.*]] = phi  [ i64 0, [[BB1]] ],  [ i64 [[VP5:%.*]], [[BB3]] ]
; CHECK-NEXT:     i64 [[VP6:%.*]] = mul i64 -1 i64 [[VP4]]
; CHECK-NEXT:     ptr [[VP_SUBSCRIPT:%.*]] = subscript inbounds ptr [[I870:%.*]] i64 [[VP6]]
; CHECK-NEXT:     ptr [[VP7:%.*]] = hir-copy ptr [[VP_SUBSCRIPT]] , OriginPhiId: -1
; CHECK-NEXT:     i64 [[VP9:%.*]] = add i64 [[VP6]] i64 -1
; CHECK-NEXT:     ptr [[VP_SUBSCRIPT_1:%.*]] = subscript inbounds ptr [[I870]] i64 [[VP9]]
; CHECK-NEXT:     ptr [[VP_SUBSCRIPT_2:%.*]] = subscript inbounds ptr [[I870]] i64 [[VP9]]
; CHECK-NEXT:     i8 [[VP_LOAD:%.*]] = load ptr [[VP_SUBSCRIPT_2]]
; CHECK-NEXT:     i64 [[VP12:%.*]] = zext i8 [[VP_LOAD]] to i64
; CHECK-NEXT:     ptr [[VP_SUBSCRIPT_3:%.*]] = subscript inbounds ptr @PL_charclass i64 0 i64 [[VP12]]
; CHECK-NEXT:     i32 [[VP_LOAD_1:%.*]] = load ptr [[VP_SUBSCRIPT_3]]
; CHECK-NEXT:     i32 [[VP13:%.*]] = and i32 [[VP_LOAD_1]] i32 17408
; CHECK-NEXT:     i1 [[VP14:%.*]] = icmp ne i32 [[VP13]] i32 17408
; CHECK-NEXT:     br i1 [[VP14]], [[BB4:BB[0-9]+]], [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB3]]: # preds: [[BB2]]
; CHECK-NEXT:       i64 [[VP15:%.*]] = mul i64 -1 i64 [[VP4]]
; CHECK-NEXT:       i64 [[VP16:%.*]] = add i64 [[VP15]] i64 -1
; CHECK-NEXT:       ptr [[VP_SUBSCRIPT_4:%.*]] = subscript inbounds ptr [[I870]] i64 [[VP16]]
; CHECK-NEXT:       store i8 0 ptr [[VP_SUBSCRIPT_4]]
; CHECK-NEXT:       i64 [[VP5]] = add i64 [[VP4]] i64 1
; CHECK-NEXT:       i1 [[VP17:%.*]] = icmp slt i64 [[VP5]] i64 [[VP3]]
; CHECK-NEXT:       br i1 [[VP17]], [[BB2]], [[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB5]]: # preds: [[BB3]]
; CHECK-NEXT:       br [[BB6:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB4]]: # preds: [[BB2]]
; CHECK-NEXT:       br bb101
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]]: # preds: [[BB4]], [[BB5]]
; CHECK-NEXT:     br [[BB7:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB7]]: # preds: [[BB6]]
; CHECK-NEXT:     br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   ptr [[VP7]] -> [[VP18:%.*]] = {%i91.out}
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 1   ptr [[VP_SUBSCRIPT_1]] -> [[VP19:%.*]] = {%i92}
;
bb89:
  br label %bb90

bb90:
  %i91 = phi ptr [ %i92, %bb99 ], [ %i87, %bb89 ]
  %i92 = getelementptr inbounds i8, ptr %i91, i64 -1
  %i93 = load i8, ptr %i92, align 1
  %i94 = zext i8 %i93 to i64
  %i95 = getelementptr inbounds [256 x i32], ptr @PL_charclass, i64 0, i64 %i94
  %i96 = load i32, ptr %i95, align 4
  %i97 = and i32 %i96, 17408
  %i98 = icmp eq i32 %i97, 17408
  br i1 %i98, label %bb99, label %bb101

bb99:
  store i8 0, ptr %i92, align 1
  %i100 = icmp ugt ptr %i92, %i85
  br i1 %i100, label %bb90, label %bb101

bb101:
  %i102 = phi ptr [ %i91, %bb90 ], [ %i92, %bb99 ]
  br label %bb103

bb103:
  ret void
}
