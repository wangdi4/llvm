; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -S < %s -passes=hir-ssa-deconstruction,hir-vec-dir-insert,hir-vplan-vec \
; RUN: -disable-output -vplan-print-after-unroll -vplan-force-uf=3 -vplan-enable-partial-sums=true | FileCheck %s

; float foo(float *lp, float init) {
;   long l1;
;   float sum = init;
;   for (l1 = 0; l1 < 1024; l1++)
;     sum += lp[l1];
;   return sum;
; }

; Basic check for partial sums; the unrolled loop should use distinct accumulators in each
; unrolled iteration, reduced after the exit to the result.
define float @foo(float* %lp, float %init) {
; CHECK-LABEL:  VPlan after VPlan loop unrolling:
; CHECK-NEXT:  VPlan IR for: Initial VPlan for VF=4
; CHECK-NEXT:  External Defs Start:
; CHECK-DAG:     [[VP0:%.*]] = {%sum.07}
; CHECK-DAG:     [[VP1:%.*]] = {%lp}
; CHECK-NEXT:  External Defs End:
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i64 1024, UF = 3
; CHECK-NEXT:     [DA: Div] float [[VP_RED_INIT:%.*]] = reduction-init float 0.000000e+00
; CHECK-NEXT:     [DA: Div] i64 [[VP__IND_INIT:%.*]] = induction-init{add} i64 live-in1 i64 1
; CHECK-NEXT:     [DA: Uni] i64 [[VP__IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:     [DA: Uni] br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], cloned.[[BB3:BB[0-9]+]]
; CHECK-NEXT:     [DA: Div] float [[VP2:%.*]] = phi  [ float [[VP_RED_INIT]], [[BB1]] ],  [ float [[VP3:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] float [[VP4:%.*]] = phi  [ float [[VP_RED_INIT]], [[BB1]] ],  [ float [[VP5:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] float [[VP6:%.*]] = phi  [ float [[VP_RED_INIT]], [[BB1]] ],  [ float [[VP7:%.*]], [[BB2]] ]
; CHECK-NEXT:     [DA: Div] i64 [[VP8:%.*]] = phi  [ i64 [[VP__IND_INIT]], [[BB1]] ],  [ i64 [[VP9:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] float* [[VP_SUBSCRIPT:%.*]] = subscript inbounds float* [[LP0:%.*]] i64 [[VP8]]
; CHECK-NEXT:     [DA: Div] float [[VP_LOAD:%.*]] = load float* [[VP_SUBSCRIPT]]
; CHECK-NEXT:     [DA: Div] float [[VP7]] = fadd float [[VP_LOAD]] float [[VP6]]
; CHECK-NEXT:     [DA: Div] i64 [[VP10:%.*]] = add i64 [[VP8]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP11:%.*]] = icmp slt i64 [[VP10]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br cloned.[[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB4]]: # preds: [[BB2]]
; CHECK-NEXT:     [DA: Div] float* [[VP12:%.*]] = subscript inbounds float* [[LP0]] i64 [[VP10]]
; CHECK-NEXT:     [DA: Div] float [[VP13:%.*]] = load float* [[VP12]]
; CHECK-NEXT:     [DA: Div] float [[VP3]] = fadd float [[VP13]] float [[VP2]]
; CHECK-NEXT:     [DA: Div] i64 [[VP14:%.*]] = add i64 [[VP10]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP15:%.*]] = icmp slt i64 [[VP14]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br cloned.[[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB3]]: # preds: cloned.[[BB4]]
; CHECK-NEXT:     [DA: Div] float* [[VP16:%.*]] = subscript inbounds float* [[LP0]] i64 [[VP14]]
; CHECK-NEXT:     [DA: Div] float [[VP17:%.*]] = load float* [[VP16]]
; CHECK-NEXT:     [DA: Div] float [[VP5]] = fadd float [[VP17]] float [[VP4]]
; CHECK-NEXT:     [DA: Div] i64 [[VP9]] = add i64 [[VP14]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP18:%.*]] = icmp slt i64 [[VP9]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP18]], [[BB2]], [[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]: # preds: cloned.[[BB3]]
; CHECK-NEXT:     [DA: Div] float [[VP19:%.*]] = fadd float [[VP7]] float [[VP3]]
; CHECK-NEXT:     [DA: Div] float [[VP20:%.*]] = fadd float [[VP19]] float [[VP5]]
; CHECK-NEXT:     [DA: Uni] float [[VP_RED_FINAL:%.*]] = reduction-final{fadd} float [[VP20]] float live-in0
; CHECK-NEXT:     [DA: Uni] i64 [[VP__IND_FINAL:%.*]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Uni] br [[BB6:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]]: # preds: [[BB5]]
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   float [[VP_RED_FINAL]] -> [[VP21:%.*]] = {%sum.07}
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 1   no underlying for i64 [[VP__IND_FINAL]]
;
entry:
  br label %for.body

for.body:                                         ; preds = %entry, %for.body
  %sum.07 = phi float [ %init, %entry ], [ %add, %for.body ]
  %l1.06 = phi i64 [ 0, %entry ], [ %inc, %for.body ]
  %arrayidx = getelementptr inbounds float, float* %lp, i64 %l1.06
  %0 = load float, float* %arrayidx, align 4
  %add = fadd fast float %0, %sum.07
  %inc = add nuw nsw i64 %l1.06, 1
  %exitcond.not = icmp eq i64 %inc, 1024
  br i1 %exitcond.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  %add.lcssa = phi float [ %add, %for.body ]
  ret float %add.lcssa
}

; float foo_no_fmf(float *lp, float init) {
;   long l1;
;   float sum = init;
; #pragma omp simd
;   for (l1 = 0; l1 < 1024; l1++)
;     sum += lp[l1];
;   return sum;
; }

; Ensure transformation is not done when reassoc FMF is not present on fadd.
define float @foo_no_fmf(float* %lp, float %init) {
; CHECK-LABEL:  VPlan after VPlan loop unrolling:
; CHECK-NEXT:  VPlan IR for: Initial VPlan for VF=4
; CHECK-NEXT:  External Defs Start:
; CHECK-DAG:     [[VP0:%.*]] = {%1}
; CHECK-DAG:     [[VP1:%.*]] = {%lp}
; CHECK-NEXT:  External Defs End:
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i64 1024, UF = 3
; CHECK-NEXT:     [DA: Div] float [[VP_RED_INIT:%.*]] = reduction-init float -0.000000e+00
; CHECK-NEXT:     [DA: Div] i64 [[VP__IND_INIT:%.*]] = induction-init{add} i64 live-in1 i64 1
; CHECK-NEXT:     [DA: Uni] i64 [[VP__IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:     [DA: Uni] br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], cloned.[[BB3:BB[0-9]+]]
; CHECK-NEXT:     [DA: Div] float [[VP2:%.*]] = phi  [ float [[VP_RED_INIT]], [[BB1]] ],  [ float [[VP3:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] i64 [[VP4:%.*]] = phi  [ i64 [[VP__IND_INIT]], [[BB1]] ],  [ i64 [[VP5:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] float* [[VP_SUBSCRIPT:%.*]] = subscript inbounds float* [[LP0:%.*]] i64 [[VP4]]
; CHECK-NEXT:     [DA: Div] float [[VP_LOAD:%.*]] = load float* [[VP_SUBSCRIPT]]
; CHECK-NEXT:     [DA: Div] float [[VP6:%.*]] = fadd float [[VP2]] float [[VP_LOAD]]
; CHECK-NEXT:     [DA: Div] i64 [[VP7:%.*]] = add i64 [[VP4]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP8:%.*]] = icmp slt i64 [[VP7]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br cloned.[[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB4]]: # preds: [[BB2]]
; CHECK-NEXT:     [DA: Div] float* [[VP9:%.*]] = subscript inbounds float* [[LP0]] i64 [[VP7]]
; CHECK-NEXT:     [DA: Div] float [[VP10:%.*]] = load float* [[VP9]]
; CHECK-NEXT:     [DA: Div] float [[VP11:%.*]] = fadd float [[VP6]] float [[VP10]]
; CHECK-NEXT:     [DA: Div] i64 [[VP12:%.*]] = add i64 [[VP7]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP13:%.*]] = icmp slt i64 [[VP12]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br cloned.[[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB3]]: # preds: cloned.[[BB4]]
; CHECK-NEXT:     [DA: Div] float* [[VP14:%.*]] = subscript inbounds float* [[LP0]] i64 [[VP12]]
; CHECK-NEXT:     [DA: Div] float [[VP15:%.*]] = load float* [[VP14]]
; CHECK-NEXT:     [DA: Div] float [[VP3]] = fadd float [[VP11]] float [[VP15]]
; CHECK-NEXT:     [DA: Div] i64 [[VP5]] = add i64 [[VP12]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP16:%.*]] = icmp slt i64 [[VP5]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP16]], [[BB2]], [[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]: # preds: cloned.[[BB3]]
; CHECK-NEXT:     [DA: Uni] float [[VP_RED_FINAL:%.*]] = reduction-final{fadd} float [[VP3]] float live-in0
; CHECK-NEXT:     [DA: Uni] i64 [[VP__IND_FINAL:%.*]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Uni] br [[BB6:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]]: # preds: [[BB5]]
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   float [[VP_RED_FINAL]] -> [[VP17:%.*]] = {%1}
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 1   no underlying for i64 [[VP__IND_FINAL]]
;
entry:
  %sum.red = alloca float, align 4
  store float 0.000000e+00, float* %sum.red, align 4
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.REDUCTION.ADD:TYPED"(float* %sum.red, float zeroinitializer, i32 1) ]
  br label %DIR.OMP.SIMD.2

DIR.OMP.SIMD.2:
  %sum.red.promoted = load float, float* %sum.red, align 4
  br label %for.body

for.body:
  %1 = phi float [ %sum.red.promoted, %DIR.OMP.SIMD.2 ], [ %add1, %for.body ]
  %iv = phi i64 [ 0, %DIR.OMP.SIMD.2 ], [ %add2, %for.body ]
  %arrayidx = getelementptr inbounds float, float* %lp, i64 %iv
  %2 = load float, float* %arrayidx, align 4
  %add1 = fadd float %1, %2
  %add2 = add nuw nsw i64 %iv, 1
  %exitcond.not = icmp eq i64 %add2, 1024
  br i1 %exitcond.not, label %for.exit, label %for.body

for.exit:
  %add1.lcssa = phi float [ %add1, %for.body ]
  store float %add1.lcssa, float* %sum.red, align 4
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %ret

ret:
  %3 = fadd float %add1.lcssa, %init
  ret float %3
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)

