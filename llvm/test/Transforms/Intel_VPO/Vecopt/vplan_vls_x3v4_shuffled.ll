; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S -VPlanDriver -debug-only=ovls < %s 2>&1 | FileCheck %s
; REQUIRES: asserts

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define void @foo(<4 x i32>* nocapture %ary) {
;  typedef int32_t v4i32 __attribute__((vector_size(16)));
;  v4i32 *ary, t0, t1, t2;
;  for (i = 0; i < 1024; i += 3) {
;    l0 = ary[i + 1];
;    l1 = ary[i + 2];
;    l2 = ary[i + 0];
;    ary[i + 0] = l0 + <10, 11, 12, 13>;
;    ary[i + 2] = l1 + <20, 21, 22, 23>;
;    ary[i + 1] = l2 + <30, 31, 32, 33>;
;  }
;
; CHECK:       Printing Groups- Total Groups 2
; CHECK-NEXT:  Group#1
; CHECK-NEXT:    Vector Length(in bytes): 64
; CHECK-NEXT:    AccType: SLoad, Stride (in bytes): 48
; CHECK-NEXT:    AccessMask(per byte, R to L): 111111111111111111111111111111111111111111111111
; CHECK-NEXT:   #3 <4 x 128> SLoad
; CHECK-NEXT:   #1 <4 x 128> SLoad
; CHECK-NEXT:   #2 <4 x 128> SLoad
; CHECK-NEXT:  Group#2
; CHECK-NEXT:    Vector Length(in bytes): 64
; CHECK-NEXT:    AccType: SStore, Stride (in bytes): 48
; CHECK-NEXT:    AccessMask(per byte, R to L): 111111111111111111111111111111111111111111111111
; CHECK-NEXT:   #4 <4 x 128> SStore
; CHECK-NEXT:   #6 <4 x 128> SStore
; CHECK-NEXT:   #5 <4 x 128> SStore
;
; CHECK-LABEL: @foo(
; CHECK:         [[SCALAR_GEP:%.*]] = getelementptr inbounds <4 x i32>, <4 x i32>* [[ARY:%.*]], i64 [[TMP0_EXTRACT_0:%.*]]
; CHECK-NEXT:    [[SCALAR_GEP4:%.*]] = getelementptr <4 x i32>, <4 x i32>* [[SCALAR_GEP]], i64 -1
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast <4 x i32>* [[SCALAR_GEP4]] to <16 x i128>*
; CHECK-NEXT:    [[VLS_LOAD:%.*]] = call <16 x i128> @llvm.masked.load.v16i128.p0v16i128(<16 x i128>* [[TMP1]], i32 4, <16 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 false, i1 false, i1 false, i1 false>, <16 x i128> undef)
; CHECK-NEXT:    [[TMP2:%.*]] = shufflevector <16 x i128> [[VLS_LOAD]], <16 x i128> [[VLS_LOAD]], <4 x i32> <i32 0, i32 3, i32 6, i32 9>
; CHECK-NEXT:    [[VP_L2:%.*]] = bitcast <4 x i128> [[TMP2]] to <16 x i32>
; CHECK-NEXT:    [[TMP3:%.*]] = shufflevector <16 x i128> [[VLS_LOAD]], <16 x i128> [[VLS_LOAD]], <4 x i32> <i32 1, i32 4, i32 7, i32 10>
; CHECK-NEXT:    [[VP_L0:%.*]] = bitcast <4 x i128> [[TMP3]] to <16 x i32>
; CHECK-NEXT:    [[TMP4:%.*]] = shufflevector <16 x i128> [[VLS_LOAD]], <16 x i128> [[VLS_LOAD]], <4 x i32> <i32 2, i32 5, i32 8, i32 11>
; CHECK-NEXT:    [[VP_L1:%.*]] = bitcast <4 x i128> [[TMP4]] to <16 x i32>
; CHECK-NEXT:    [[SCALAR_GEP5:%.*]] = getelementptr inbounds <4 x i32>, <4 x i32>* [[ARY]], i64 [[UNI_PHI:%.*]]
; CHECK-NEXT:    [[TMP5:%.*]] = add nsw <16 x i32> [[VP_L0]], <i32 10, i32 11, i32 12, i32 13, i32 10, i32 11, i32 12, i32 13, i32 10, i32 11, i32 12, i32 13, i32 10, i32 11, i32 12, i32 13>
; CHECK-NEXT:    [[TMP6:%.*]] = add nsw <16 x i32> [[VP_L1]], <i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23>
; CHECK-NEXT:    [[TMP7:%.*]] = add nsw <16 x i32> [[VP_L2]], <i32 30, i32 31, i32 32, i32 33, i32 30, i32 31, i32 32, i32 33, i32 30, i32 31, i32 32, i32 33, i32 30, i32 31, i32 32, i32 33>
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast <16 x i32> [[TMP5]] to <4 x i128>
; CHECK-NEXT:    [[TMP9:%.*]] = shufflevector <4 x i128> [[TMP8]], <4 x i128> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
; CHECK-NEXT:    [[TMP10:%.*]] = shufflevector <16 x i128> undef, <16 x i128> [[TMP9]], <16 x i32> <i32 16, i32 1, i32 2, i32 17, i32 4, i32 5, i32 18, i32 7, i32 8, i32 19, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast <16 x i32> [[TMP7]] to <4 x i128>
; CHECK-NEXT:    [[TMP12:%.*]] = shufflevector <4 x i128> [[TMP11]], <4 x i128> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
; CHECK-NEXT:    [[TMP13:%.*]] = shufflevector <16 x i128> [[TMP10]], <16 x i128> [[TMP12]], <16 x i32> <i32 0, i32 16, i32 2, i32 3, i32 17, i32 5, i32 6, i32 18, i32 8, i32 9, i32 19, i32 11, i32 12, i32 13, i32 14, i32 15>
; CHECK-NEXT:    [[TMP14:%.*]] = bitcast <16 x i32> [[TMP6]] to <4 x i128>
; CHECK-NEXT:    [[TMP15:%.*]] = shufflevector <4 x i128> [[TMP14]], <4 x i128> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
; CHECK-NEXT:    [[TMP16:%.*]] = shufflevector <16 x i128> [[TMP13]], <16 x i128> [[TMP15]], <16 x i32> <i32 0, i32 1, i32 16, i32 3, i32 4, i32 17, i32 6, i32 7, i32 18, i32 9, i32 10, i32 19, i32 12, i32 13, i32 14, i32 15>
; CHECK-NEXT:    [[TMP17:%.*]] = bitcast <4 x i32>* [[SCALAR_GEP5]] to <16 x i128>*
; CHECK-NEXT:    call void @llvm.masked.store.v16i128.p0v16i128(<16 x i128> [[TMP16]], <16 x i128>* [[TMP17]], i32 4, <16 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 false, i1 false, i1 false, i1 false>)
;
entry:
  %entry.region = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.SIMDLEN"(i32 4) ]
  br label %for.body

for.body:                                         ; preds = %entry, %for.body
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]

  ; l0 = ary[i + 1];
  %i0 = add nsw i64 %indvars.iv, 1
  %p0 = getelementptr inbounds <4 x i32>, <4 x i32>* %ary, i64 %i0
  %l0 = load <4 x i32>, <4 x i32>* %p0, align 4

  ; l1 = ary[i + 2];
  %i1 = add nsw i64 %indvars.iv, 2
  %p1 = getelementptr inbounds <4 x i32>, <4 x i32>* %ary, i64 %i1
  %l1 = load <4 x i32>, <4 x i32>* %p1, align 4

  ; l2 = ary[i + 0];
  %p2 = getelementptr inbounds <4 x i32>, <4 x i32>* %ary, i64 %indvars.iv
  %l2 = load <4 x i32>, <4 x i32>* %p2, align 4

  ; ary[i + 0] = l0 + 11;
  %t0 = add nsw <4 x i32> %l0, <i32 10, i32 11, i32 12, i32 13>
  store <4 x i32> %t0, <4 x i32>* %p2, align 4

  ; ary[i + 2] = l1 + 22;
  %t1 = add nsw <4 x i32> %l1, <i32 20, i32 21, i32 22, i32 23>
  store <4 x i32> %t1, <4 x i32>* %p1, align 4

  ; ary[i + 1] = l2 + 33;
  %t2 = add nsw <4 x i32> %l2, <i32 30, i32 31, i32 32, i32 33>
  store <4 x i32> %t2, <4 x i32>* %p0, align 4

  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 3
  %cmp = icmp ult i64 %indvars.iv.next, 1024
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body
  call void @llvm.directive.region.exit(token %entry.region) [ "DIR.OMP.END.SIMD"() ]
  ret void
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
