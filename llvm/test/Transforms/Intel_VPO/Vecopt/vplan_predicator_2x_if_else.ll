; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py

; RUN: opt -vplan-print-terminator-inst=false -S -vplan-func-vec -print-after-vplan-func-vec-predicator < %s -disable-output | FileCheck %s
; RUN: opt -vplan-print-terminator-inst=false -S -passes="vplan-func-vec" -print-after-vplan-func-vec-predicator < %s -disable-output | FileCheck %s

; Tests predicator for two hammocks.

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define void @test_2_hammocks_1(i32* noalias nocapture %a) local_unnamed_addr #0 {
;
; CHECK-LABEL:  VPlan IR for: test_2_hammocks_1
; CHECK-NEXT:    [[BB0:BB[0-9]+]]:
; CHECK-NEXT:     [DA: Div] i32 [[VP_LANE:%.*]] = induction-init{add} i32 0 i32 1
; CHECK-NEXT:     [DA: Div] i32* [[VP_GEP:%.*]] = getelementptr inbounds i32* [[A0:%.*]] i32 [[VP_LANE]]
; CHECK-NEXT:     [DA: Div] i32 [[VP_LD:%.*]] = load i32* [[VP_GEP]]
; CHECK-NEXT:     [DA: Div] i1 [[VP_VARYING:%.*]] = icmp sgt i32 [[VP_LD]] i32 0
; CHECK-NEXT:     [DA: Div] i1 [[VP_VARYING_NOT:%.*]] = not i1 [[VP_VARYING]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB1:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]:
; CHECK-NEXT:     [DA: Div] i1 [[VP0:%.*]] = block-predicate i1 [[VP_VARYING_NOT]]
; CHECK-NEXT:     [DA: Div] i32 [[VP_BB2_ADD:%.*]] = add i32 [[VP_LD]] i32 2
; CHECK-NEXT:    SUCCESSORS(1):[[BB2:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]:
; CHECK-NEXT:     [DA: Div] i1 [[VP1:%.*]] = block-predicate i1 [[VP_VARYING]]
; CHECK-NEXT:     [DA: Div] i32 [[VP_BB1_MUL:%.*]] = mul i32 [[VP_LD]] i32 1
; CHECK-NEXT:    SUCCESSORS(1):[[BB3:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]:
; CHECK-NEXT:     [DA: Div] i1 [[VP_BB3_VARYING:%.*]] = icmp sgt i32 [[VP_LD]] i32 3
; CHECK-NEXT:     [DA: Div] i1 [[VP_BB3_VARYING_NOT:%.*]] = not i1 [[VP_BB3_VARYING]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB4:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]:
; CHECK-NEXT:     [DA: Div] i1 [[VP2:%.*]] = block-predicate i1 [[VP_BB3_VARYING_NOT]]
; CHECK-NEXT:     [DA: Div] i32 [[VP_BB5_MUL:%.*]] = mul i32 [[VP_LD]] i32 5
; CHECK-NEXT:    SUCCESSORS(1):[[BB5:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]:
; CHECK-NEXT:     [DA: Div] i1 [[VP3:%.*]] = block-predicate i1 [[VP_BB3_VARYING]]
; CHECK-NEXT:     [DA: Div] i32 [[VP_BB4_SUB:%.*]] = sub i32 [[VP_LD]] i32 4
; CHECK-NEXT:    SUCCESSORS(1):[[BB6:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]]:
; CHECK-NEXT:     [DA: Div] ret
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB5]]
;
entry:
;      entry
;      /   \
;    bb1   bb2
;      \   /
;       bb3
;      /   \
;    bb4   bb5
;      \   /
;       exit

  %lane = call i32 @llvm.vplan.laneid()
  %gep = getelementptr inbounds i32, i32* %a, i32 %lane
  %ld = load i32, i32* %gep, align 4
  %varying = icmp sgt i32 %ld, 0
  br i1 %varying, label %bb1, label %bb2

bb1:
  %bb1.mul = mul nsw i32 %ld, 1
  br label %bb3

bb2:
  %bb2.add = add nsw i32 %ld, 2
  br label %bb3

bb3:
  %bb3.varying = icmp sgt i32 %ld, 3
  br i1 %bb3.varying, label %bb4, label %bb5

bb4:
  %bb4.sub = sub nsw i32 %ld, 4
  br label %exit

bb5:
  %bb5.mul = mul nsw i32 %ld, 5
  br label %exit

exit:
  ret void
}

declare i32 @llvm.vplan.laneid()
