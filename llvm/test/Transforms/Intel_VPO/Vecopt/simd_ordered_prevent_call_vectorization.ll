; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt < %s -S -opaque-pointers=0 -vec-clone -vplan-pragma-omp-ordered-simd-extract -vpo-cfg-restructuring -vplan-vec -vplan-force-vf=4 2>&1 | FileCheck %s

; Check that the call that is emitted by code extractor is not vectorized.

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define dso_local i32 @_Z3fooi(i32 %a) local_unnamed_addr #0 {
; CHECK:  define dso_local i32 @_Z3fooi(i32 [[A0:%.*]]) local_unnamed_addr #0 {
; CHECK-NEXT:  DIR.OMP.END.ORDERED.4:
; CHECK-NEXT:    br label [[CODEREPL0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  codeRepl:
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region()
; CHECK-NEXT:    br label [[DIR_OMP_END_ORDERED_30:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.END.ORDERED.3:
; CHECK-NEXT:    ret i32 0
; CHECK-NEXT:  }
;
; CHECK:  define dso_local <4 x i32> @_ZGVbN4v__Z3fooi(<4 x i32> [[A0]]) local_unnamed_addr #2 {
; CHECK-NEXT:  DIR.OMP.END.ORDERED.4:
; CHECK-NEXT:    [[VEC_RETVAL0:%.*]] = alloca <4 x i32>, align 16
; CHECK-NEXT:    [[RET_CAST0:%.*]] = bitcast <4 x i32>* [[VEC_RETVAL0]] to i32*
; CHECK-NEXT:    br label [[SIMD_BEGIN_REGION0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.begin.region:
; CHECK-NEXT:    br label [[SIMD_LOOP_PREHEADER0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.preheader:
; CHECK-NEXT:    br label [[VPLANNEDBB0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB:
; CHECK-NEXT:    br label [[VPLANNEDBB10:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB1:
; CHECK-NEXT:    br label [[VECTOR_BODY0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  vector.body:
; CHECK-NEXT:    [[UNI_PHI0:%.*]] = phi i32 [ 0, [[VPLANNEDBB10]] ], [ [[TMP2:%.*]], [[VPLANNEDBB50:%.*]] ]
; CHECK-NEXT:    [[VEC_PHI0:%.*]] = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, [[VPLANNEDBB10]] ], [ [[TMP1:%.*]], [[VPLANNEDBB50]] ]
; CHECK-NEXT:    [[SCALAR_GEP0:%.*]] = getelementptr i32, i32* [[RET_CAST0]], i32 [[UNI_PHI0]]
; CHECK-NEXT:    [[TMP0:%.*]] = bitcast i32* [[SCALAR_GEP0]] to <4 x i32>*
; CHECK-NEXT:    store <4 x i32> zeroinitializer, <4 x i32>* [[TMP0]], align 16
; CHECK-NEXT:    br label [[VPLANNEDBB30:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB3:
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_1()
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_1()
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_1()
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_1()
; CHECK-NEXT:    br label [[VPLANNEDBB40:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB4:
; CHECK-NEXT:    br label [[VPLANNEDBB50]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB5:
; CHECK-NEXT:    [[TMP1]] = add nuw <4 x i32> [[VEC_PHI0]], <i32 4, i32 4, i32 4, i32 4>
; CHECK-NEXT:    [[TMP2]] = add nuw i32 [[UNI_PHI0]], 4
; CHECK-NEXT:    [[TMP3:%.*]] = icmp ult i32 [[TMP2]], 4
; CHECK-NEXT:    br i1 false, label [[VECTOR_BODY0]], label [[VPLANNEDBB60:%.*]], !llvm.loop !0
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB6:
; CHECK-NEXT:    br label [[VPLANNEDBB70:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB7:
; CHECK-NEXT:    br label [[FINAL_MERGE0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  final.merge:
; CHECK-NEXT:    [[UNI_PHI80:%.*]] = phi i32 [ 4, [[VPLANNEDBB70]] ]
; CHECK-NEXT:    br label [[SIMD_END_REGION0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.header:
; CHECK-NEXT:    [[INDEX0:%.*]] = phi i32 [ [[INDVAR0:%.*]], [[SIMD_LOOP_LATCH0:%.*]] ]
; CHECK-NEXT:    [[RET_CAST_GEP0:%.*]] = getelementptr i32, i32* [[RET_CAST0]], i32 [[INDEX0]]
; CHECK-NEXT:    store i32 0, i32* [[RET_CAST_GEP0]], align 4
; CHECK-NEXT:    br label [[CODEREPL0]]
; CHECK-EMPTY:
; CHECK-NEXT:  codeRepl:
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_1()
; CHECK-NEXT:    br label [[DIR_OMP_END_ORDERED_30]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.END.ORDERED.3:
; CHECK-NEXT:    br label [[SIMD_LOOP_LATCH0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.latch:
; CHECK-NEXT:    [[INDVAR0]] = add nuw i32 [[INDEX0]], 1
; CHECK-NEXT:    [[VL_COND0:%.*]] = icmp ult i32 [[INDVAR0]], 4
; CHECK-NEXT:    br label [[SIMD_LOOP_HEADER0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.end.region:
; CHECK-NEXT:    br label [[RETURN0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  return:
; CHECK-NEXT:    [[VEC_RET_CAST0:%.*]] = bitcast i32* [[RET_CAST0]] to <4 x i32>*
; CHECK-NEXT:    [[VEC_RET0:%.*]] = load <4 x i32>, <4 x i32>* [[VEC_RET_CAST0]], align 16
; CHECK-NEXT:    ret <4 x i32> [[VEC_RET0]]
; CHECK-NEXT:  }
;
; CHECK:  define dso_local <8 x i32> @_ZGVcN8v__Z3fooi(<8 x i32> [[A0]]) local_unnamed_addr #2 {
; CHECK-NEXT:  DIR.OMP.END.ORDERED.4:
; CHECK-NEXT:    [[VEC_RETVAL0]] = alloca <8 x i32>, align 32
; CHECK-NEXT:    [[RET_CAST0]] = bitcast <8 x i32>* [[VEC_RETVAL0]] to i32*
; CHECK-NEXT:    br label [[SIMD_BEGIN_REGION0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.begin.region:
; CHECK-NEXT:    br label [[SIMD_LOOP_PREHEADER0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.preheader:
; CHECK-NEXT:    br label [[VPLANNEDBB0]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB:
; CHECK-NEXT:    br label [[VPLANNEDBB10]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB1:
; CHECK-NEXT:    br label [[VECTOR_BODY0]]
; CHECK-EMPTY:
; CHECK-NEXT:  vector.body:
; CHECK-NEXT:    [[UNI_PHI0]] = phi i32 [ 0, [[VPLANNEDBB10]] ], [ [[TMP2]], [[VPLANNEDBB50]] ]
; CHECK-NEXT:    [[VEC_PHI0]] = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, [[VPLANNEDBB10]] ], [ [[TMP1]], [[VPLANNEDBB50]] ]
; CHECK-NEXT:    [[SCALAR_GEP0]] = getelementptr i32, i32* [[RET_CAST0]], i32 [[UNI_PHI0]]
; CHECK-NEXT:    [[TMP0]] = bitcast i32* [[SCALAR_GEP0]] to <4 x i32>*
; CHECK-NEXT:    store <4 x i32> zeroinitializer, <4 x i32>* [[TMP0]], align 16
; CHECK-NEXT:    br label [[VPLANNEDBB30]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB3:
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_2()
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_2()
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_2()
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_2()
; CHECK-NEXT:    br label [[VPLANNEDBB40]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB4:
; CHECK-NEXT:    br label [[VPLANNEDBB50]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB5:
; CHECK-NEXT:    [[TMP1]] = add nuw <4 x i32> [[VEC_PHI0]], <i32 4, i32 4, i32 4, i32 4>
; CHECK-NEXT:    [[TMP2]] = add nuw i32 [[UNI_PHI0]], 4
; CHECK-NEXT:    [[TMP3]] = icmp ult i32 [[TMP2]], 8
; CHECK-NEXT:    br i1 [[TMP3]], label [[VECTOR_BODY0]], label [[VPLANNEDBB60]], !llvm.loop !2
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB6:
; CHECK-NEXT:    br label [[VPLANNEDBB70]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB7:
; CHECK-NEXT:    br label [[FINAL_MERGE0]]
; CHECK-EMPTY:
; CHECK-NEXT:  final.merge:
; CHECK-NEXT:    [[UNI_PHI80]] = phi i32 [ 8, [[VPLANNEDBB70]] ]
; CHECK-NEXT:    br label [[SIMD_END_REGION0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.header:
; CHECK-NEXT:    [[INDEX0]] = phi i32 [ [[INDVAR0]], [[SIMD_LOOP_LATCH0]] ]
; CHECK-NEXT:    [[RET_CAST_GEP0]] = getelementptr i32, i32* [[RET_CAST0]], i32 [[INDEX0]]
; CHECK-NEXT:    store i32 0, i32* [[RET_CAST_GEP0]], align 4
; CHECK-NEXT:    br label [[CODEREPL0]]
; CHECK-EMPTY:
; CHECK-NEXT:  codeRepl:
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_2()
; CHECK-NEXT:    br label [[DIR_OMP_END_ORDERED_30]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.END.ORDERED.3:
; CHECK-NEXT:    br label [[SIMD_LOOP_LATCH0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.latch:
; CHECK-NEXT:    [[INDVAR0]] = add nuw i32 [[INDEX0]], 1
; CHECK-NEXT:    [[VL_COND0]] = icmp ult i32 [[INDVAR0]], 8
; CHECK-NEXT:    br label [[SIMD_LOOP_HEADER0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.end.region:
; CHECK-NEXT:    br label [[RETURN0]]
; CHECK-EMPTY:
; CHECK-NEXT:  return:
; CHECK-NEXT:    [[VEC_RET_CAST0]] = bitcast i32* [[RET_CAST0]] to <8 x i32>*
; CHECK-NEXT:    [[VEC_RET0]] = load <8 x i32>, <8 x i32>* [[VEC_RET_CAST0]], align 32
; CHECK-NEXT:    ret <8 x i32> [[VEC_RET0]]
; CHECK-NEXT:  }
;
; CHECK:  define dso_local <8 x i32> @_ZGVdN8v__Z3fooi(<8 x i32> [[A0]]) local_unnamed_addr #2 {
; CHECK-NEXT:  DIR.OMP.END.ORDERED.4:
; CHECK-NEXT:    [[VEC_RETVAL0]] = alloca <8 x i32>, align 32
; CHECK-NEXT:    [[RET_CAST0]] = bitcast <8 x i32>* [[VEC_RETVAL0]] to i32*
; CHECK-NEXT:    br label [[SIMD_BEGIN_REGION0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.begin.region:
; CHECK-NEXT:    br label [[SIMD_LOOP_PREHEADER0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.preheader:
; CHECK-NEXT:    br label [[VPLANNEDBB0]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB:
; CHECK-NEXT:    br label [[VPLANNEDBB10]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB1:
; CHECK-NEXT:    br label [[VECTOR_BODY0]]
; CHECK-EMPTY:
; CHECK-NEXT:  vector.body:
; CHECK-NEXT:    [[UNI_PHI0]] = phi i32 [ 0, [[VPLANNEDBB10]] ], [ [[TMP2]], [[VPLANNEDBB50]] ]
; CHECK-NEXT:    [[VEC_PHI0]] = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, [[VPLANNEDBB10]] ], [ [[TMP1]], [[VPLANNEDBB50]] ]
; CHECK-NEXT:    [[SCALAR_GEP0]] = getelementptr i32, i32* [[RET_CAST0]], i32 [[UNI_PHI0]]
; CHECK-NEXT:    [[TMP0]] = bitcast i32* [[SCALAR_GEP0]] to <4 x i32>*
; CHECK-NEXT:    store <4 x i32> zeroinitializer, <4 x i32>* [[TMP0]], align 16
; CHECK-NEXT:    br label [[VPLANNEDBB30]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB3:
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_3()
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_3()
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_3()
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_3()
; CHECK-NEXT:    br label [[VPLANNEDBB40]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB4:
; CHECK-NEXT:    br label [[VPLANNEDBB50]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB5:
; CHECK-NEXT:    [[TMP1]] = add nuw <4 x i32> [[VEC_PHI0]], <i32 4, i32 4, i32 4, i32 4>
; CHECK-NEXT:    [[TMP2]] = add nuw i32 [[UNI_PHI0]], 4
; CHECK-NEXT:    [[TMP3]] = icmp ult i32 [[TMP2]], 8
; CHECK-NEXT:    br i1 [[TMP3]], label [[VECTOR_BODY0]], label [[VPLANNEDBB60]], !llvm.loop !3
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB6:
; CHECK-NEXT:    br label [[VPLANNEDBB70]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB7:
; CHECK-NEXT:    br label [[FINAL_MERGE0]]
; CHECK-EMPTY:
; CHECK-NEXT:  final.merge:
; CHECK-NEXT:    [[UNI_PHI80]] = phi i32 [ 8, [[VPLANNEDBB70]] ]
; CHECK-NEXT:    br label [[SIMD_END_REGION0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.header:
; CHECK-NEXT:    [[INDEX0]] = phi i32 [ [[INDVAR0]], [[SIMD_LOOP_LATCH0]] ]
; CHECK-NEXT:    [[RET_CAST_GEP0]] = getelementptr i32, i32* [[RET_CAST0]], i32 [[INDEX0]]
; CHECK-NEXT:    store i32 0, i32* [[RET_CAST_GEP0]], align 4
; CHECK-NEXT:    br label [[CODEREPL0]]
; CHECK-EMPTY:
; CHECK-NEXT:  codeRepl:
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_3()
; CHECK-NEXT:    br label [[DIR_OMP_END_ORDERED_30]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.END.ORDERED.3:
; CHECK-NEXT:    br label [[SIMD_LOOP_LATCH0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.latch:
; CHECK-NEXT:    [[INDVAR0]] = add nuw i32 [[INDEX0]], 1
; CHECK-NEXT:    [[VL_COND0]] = icmp ult i32 [[INDVAR0]], 8
; CHECK-NEXT:    br label [[SIMD_LOOP_HEADER0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.end.region:
; CHECK-NEXT:    br label [[RETURN0]]
; CHECK-EMPTY:
; CHECK-NEXT:  return:
; CHECK-NEXT:    [[VEC_RET_CAST0]] = bitcast i32* [[RET_CAST0]] to <8 x i32>*
; CHECK-NEXT:    [[VEC_RET0]] = load <8 x i32>, <8 x i32>* [[VEC_RET_CAST0]], align 32
; CHECK-NEXT:    ret <8 x i32> [[VEC_RET0]]
; CHECK-NEXT:  }
;
; CHECK:  define dso_local <16 x i32> @_ZGVeN16v__Z3fooi(<16 x i32> [[A0]]) local_unnamed_addr #2 {
; CHECK-NEXT:  DIR.OMP.END.ORDERED.4:
; CHECK-NEXT:    [[VEC_RETVAL0]] = alloca <16 x i32>, align 64
; CHECK-NEXT:    [[RET_CAST0]] = bitcast <16 x i32>* [[VEC_RETVAL0]] to i32*
; CHECK-NEXT:    br label [[SIMD_BEGIN_REGION0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.begin.region:
; CHECK-NEXT:    br label [[SIMD_LOOP_PREHEADER0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.preheader:
; CHECK-NEXT:    br label [[VPLANNEDBB0]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB:
; CHECK-NEXT:    br label [[VPLANNEDBB10]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB1:
; CHECK-NEXT:    br label [[VECTOR_BODY0]]
; CHECK-EMPTY:
; CHECK-NEXT:  vector.body:
; CHECK-NEXT:    [[UNI_PHI0]] = phi i32 [ 0, [[VPLANNEDBB10]] ], [ [[TMP2]], [[VPLANNEDBB50]] ]
; CHECK-NEXT:    [[VEC_PHI0]] = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, [[VPLANNEDBB10]] ], [ [[TMP1]], [[VPLANNEDBB50]] ]
; CHECK-NEXT:    [[SCALAR_GEP0]] = getelementptr i32, i32* [[RET_CAST0]], i32 [[UNI_PHI0]]
; CHECK-NEXT:    [[TMP0]] = bitcast i32* [[SCALAR_GEP0]] to <4 x i32>*
; CHECK-NEXT:    store <4 x i32> zeroinitializer, <4 x i32>* [[TMP0]], align 16
; CHECK-NEXT:    br label [[VPLANNEDBB30]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB3:
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_4()
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_4()
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_4()
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_4()
; CHECK-NEXT:    br label [[VPLANNEDBB40]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB4:
; CHECK-NEXT:    br label [[VPLANNEDBB50]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB5:
; CHECK-NEXT:    [[TMP1]] = add nuw <4 x i32> [[VEC_PHI0]], <i32 4, i32 4, i32 4, i32 4>
; CHECK-NEXT:    [[TMP2]] = add nuw i32 [[UNI_PHI0]], 4
; CHECK-NEXT:    [[TMP3]] = icmp ult i32 [[TMP2]], 16
; CHECK-NEXT:    br i1 [[TMP3]], label [[VECTOR_BODY0]], label [[VPLANNEDBB60]], !llvm.loop !4
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB6:
; CHECK-NEXT:    br label [[VPLANNEDBB70]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB7:
; CHECK-NEXT:    br label [[FINAL_MERGE0]]
; CHECK-EMPTY:
; CHECK-NEXT:  final.merge:
; CHECK-NEXT:    [[UNI_PHI80]] = phi i32 [ 16, [[VPLANNEDBB70]] ]
; CHECK-NEXT:    br label [[SIMD_END_REGION0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.header:
; CHECK-NEXT:    [[INDEX0]] = phi i32 [ [[INDVAR0]], [[SIMD_LOOP_LATCH0]] ]
; CHECK-NEXT:    [[RET_CAST_GEP0]] = getelementptr i32, i32* [[RET_CAST0]], i32 [[INDEX0]]
; CHECK-NEXT:    store i32 0, i32* [[RET_CAST_GEP0]], align 4
; CHECK-NEXT:    br label [[CODEREPL0]]
; CHECK-EMPTY:
; CHECK-NEXT:  codeRepl:
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_4()
; CHECK-NEXT:    br label [[DIR_OMP_END_ORDERED_30]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.END.ORDERED.3:
; CHECK-NEXT:    br label [[SIMD_LOOP_LATCH0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.latch:
; CHECK-NEXT:    [[INDVAR0]] = add nuw i32 [[INDEX0]], 1
; CHECK-NEXT:    [[VL_COND0]] = icmp ult i32 [[INDVAR0]], 16
; CHECK-NEXT:    br label [[SIMD_LOOP_HEADER0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.end.region:
; CHECK-NEXT:    br label [[RETURN0]]
; CHECK-EMPTY:
; CHECK-NEXT:  return:
; CHECK-NEXT:    [[VEC_RET_CAST0]] = bitcast i32* [[RET_CAST0]] to <16 x i32>*
; CHECK-NEXT:    [[VEC_RET0]] = load <16 x i32>, <16 x i32>* [[VEC_RET_CAST0]], align 64
; CHECK-NEXT:    ret <16 x i32> [[VEC_RET0]]
; CHECK-NEXT:  }
;
; CHECK:  define dso_local <4 x i32> @_ZGVbM4v__Z3fooi(<4 x i32> [[A0]], <4 x i32> [[MASK0:%.*]]) local_unnamed_addr #2 {
; CHECK-NEXT:  DIR.OMP.END.ORDERED.4:
; CHECK-NEXT:    [[VEC_MASK0:%.*]] = alloca <4 x i32>, align 16
; CHECK-NEXT:    [[VEC_RETVAL0]] = alloca <4 x i32>, align 16
; CHECK-NEXT:    [[MASK_CAST0:%.*]] = bitcast <4 x i32>* [[VEC_MASK0]] to i32*
; CHECK-NEXT:    [[RET_CAST0]] = bitcast <4 x i32>* [[VEC_RETVAL0]] to i32*
; CHECK-NEXT:    store <4 x i32> [[MASK0]], <4 x i32>* [[VEC_MASK0]], align 16
; CHECK-NEXT:    br label [[SIMD_BEGIN_REGION0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.begin.region:
; CHECK-NEXT:    br label [[SIMD_LOOP_PREHEADER0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.preheader:
; CHECK-NEXT:    br label [[VPLANNEDBB0]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB:
; CHECK-NEXT:    br label [[VPLANNEDBB10]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB1:
; CHECK-NEXT:    br label [[VECTOR_BODY0]]
; CHECK-EMPTY:
; CHECK-NEXT:  vector.body:
; CHECK-NEXT:    [[UNI_PHI0]] = phi i32 [ 0, [[VPLANNEDBB10]] ], [ [[TMP13:%.*]], [[VPLANNEDBB110:%.*]] ]
; CHECK-NEXT:    [[VEC_PHI0]] = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, [[VPLANNEDBB10]] ], [ [[TMP12:%.*]], [[VPLANNEDBB110]] ]
; CHECK-NEXT:    [[SCALAR_GEP0]] = getelementptr i32, i32* [[MASK_CAST0]], i32 [[UNI_PHI0]]
; CHECK-NEXT:    [[TMP0]] = bitcast i32* [[SCALAR_GEP0]] to <4 x i32>*
; CHECK-NEXT:    [[WIDE_LOAD0:%.*]] = load <4 x i32>, <4 x i32>* [[TMP0]], align 16
; CHECK-NEXT:    [[TMP1]] = icmp ne <4 x i32> [[WIDE_LOAD0]], zeroinitializer
; CHECK-NEXT:    [[TMP2]] = xor <4 x i1> [[TMP1]], <i1 true, i1 true, i1 true, i1 true>
; CHECK-NEXT:    br label [[VPLANNEDBB30]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB3:
; CHECK-NEXT:    br label [[VPLANNEDBB40]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB4:
; CHECK-NEXT:    [[SCALAR_GEP50:%.*]] = getelementptr i32, i32* [[RET_CAST0]], i32 [[UNI_PHI0]]
; CHECK-NEXT:    [[TMP3]] = bitcast i32* [[SCALAR_GEP50]] to <4 x i32>*
; CHECK-NEXT:    call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> zeroinitializer, <4 x i32>* [[TMP3]], i32 16, <4 x i1> [[TMP1]])
; CHECK-NEXT:    br label [[VPLANNEDBB60]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB6:
; CHECK-NEXT:    [[PREDICATE0:%.*]] = extractelement <4 x i1> [[TMP1]], i64 0
; CHECK-NEXT:    [[TMP4:%.*]] = icmp eq i1 [[PREDICATE0]], true
; CHECK-NEXT:    br i1 [[TMP4]], label [[PRED_CALL_IF0:%.*]], label [[TMP5:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.if:
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_5()
; CHECK-NEXT:    br label [[TMP5]]
; CHECK-EMPTY:
; CHECK-NEXT:  5:
; CHECK-NEXT:    br label [[PRED_CALL_CONTINUE0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.continue:
; CHECK-NEXT:    [[PREDICATE70:%.*]] = extractelement <4 x i1> [[TMP1]], i64 1
; CHECK-NEXT:    [[TMP6:%.*]] = icmp eq i1 [[PREDICATE70]], true
; CHECK-NEXT:    br i1 [[TMP6]], label [[PRED_CALL_IF150:%.*]], label [[TMP7:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.if15:
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_5()
; CHECK-NEXT:    br label [[TMP7]]
; CHECK-EMPTY:
; CHECK-NEXT:  7:
; CHECK-NEXT:    br label [[PRED_CALL_CONTINUE160:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.continue16:
; CHECK-NEXT:    [[PREDICATE80:%.*]] = extractelement <4 x i1> [[TMP1]], i64 2
; CHECK-NEXT:    [[TMP8:%.*]] = icmp eq i1 [[PREDICATE80]], true
; CHECK-NEXT:    br i1 [[TMP8]], label [[PRED_CALL_IF170:%.*]], label [[TMP9:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.if17:
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_5()
; CHECK-NEXT:    br label [[TMP9]]
; CHECK-EMPTY:
; CHECK-NEXT:  9:
; CHECK-NEXT:    br label [[PRED_CALL_CONTINUE180:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.continue18:
; CHECK-NEXT:    [[PREDICATE90:%.*]] = extractelement <4 x i1> [[TMP1]], i64 3
; CHECK-NEXT:    [[TMP10:%.*]] = icmp eq i1 [[PREDICATE90]], true
; CHECK-NEXT:    br i1 [[TMP10]], label [[PRED_CALL_IF190:%.*]], label [[TMP11:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.if19:
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_5()
; CHECK-NEXT:    br label [[TMP11]]
; CHECK-EMPTY:
; CHECK-NEXT:  11:
; CHECK-NEXT:    br label [[PRED_CALL_CONTINUE200:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.continue20:
; CHECK-NEXT:    br label [[VPLANNEDBB100:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB10:
; CHECK-NEXT:    br label [[VPLANNEDBB110]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB11:
; CHECK-NEXT:    [[TMP12]] = add nuw <4 x i32> [[VEC_PHI0]], <i32 4, i32 4, i32 4, i32 4>
; CHECK-NEXT:    [[TMP13]] = add nuw i32 [[UNI_PHI0]], 4
; CHECK-NEXT:    [[TMP14:%.*]] = icmp ult i32 [[TMP13]], 4
; CHECK-NEXT:    br i1 false, label [[VECTOR_BODY0]], label [[VPLANNEDBB120:%.*]], !llvm.loop !5
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB12:
; CHECK-NEXT:    br label [[VPLANNEDBB130:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB13:
; CHECK-NEXT:    br label [[FINAL_MERGE0]]
; CHECK-EMPTY:
; CHECK-NEXT:  final.merge:
; CHECK-NEXT:    [[UNI_PHI140:%.*]] = phi i32 [ 4, [[VPLANNEDBB130]] ]
; CHECK-NEXT:    br label [[SIMD_END_REGION0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.header:
; CHECK-NEXT:    [[INDEX0]] = phi i32 [ [[INDVAR0]], [[SIMD_LOOP_LATCH0]] ]
; CHECK-NEXT:    [[MASK_GEP0:%.*]] = getelementptr i32, i32* [[MASK_CAST0]], i32 [[INDEX0]]
; CHECK-NEXT:    [[MASK_PARM0:%.*]] = load i32, i32* [[MASK_GEP0]], align 4
; CHECK-NEXT:    [[MASK_COND0:%.*]] = icmp ne i32 [[MASK_PARM0]], 0
; CHECK-NEXT:    br i1 [[MASK_COND0]], label [[SIMD_LOOP_THEN0:%.*]], label [[SIMD_LOOP_ELSE0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.then:
; CHECK-NEXT:    [[RET_CAST_GEP0]] = getelementptr i32, i32* [[RET_CAST0]], i32 [[INDEX0]]
; CHECK-NEXT:    store i32 0, i32* [[RET_CAST_GEP0]], align 4
; CHECK-NEXT:    br label [[CODEREPL0]]
; CHECK-EMPTY:
; CHECK-NEXT:  codeRepl:
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_5()
; CHECK-NEXT:    br label [[DIR_OMP_END_ORDERED_30]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.END.ORDERED.3:
; CHECK-NEXT:    br label [[SIMD_LOOP_LATCH0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.else:
; CHECK-NEXT:    br label [[SIMD_LOOP_LATCH0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.latch:
; CHECK-NEXT:    [[INDVAR0]] = add nuw i32 [[INDEX0]], 1
; CHECK-NEXT:    [[VL_COND0]] = icmp ult i32 [[INDVAR0]], 4
; CHECK-NEXT:    br label [[SIMD_LOOP_HEADER0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.end.region:
; CHECK-NEXT:    br label [[RETURN0]]
; CHECK-EMPTY:
; CHECK-NEXT:  return:
; CHECK-NEXT:    [[VEC_RET_CAST0]] = bitcast i32* [[RET_CAST0]] to <4 x i32>*
; CHECK-NEXT:    [[VEC_RET0]] = load <4 x i32>, <4 x i32>* [[VEC_RET_CAST0]], align 16
; CHECK-NEXT:    ret <4 x i32> [[VEC_RET0]]
; CHECK-NEXT:  }
;
; CHECK:  define dso_local <8 x i32> @_ZGVcM8v__Z3fooi(<8 x i32> [[A0]], <8 x i32> [[MASK0]]) local_unnamed_addr #2 {
; CHECK-NEXT:  DIR.OMP.END.ORDERED.4:
; CHECK-NEXT:    [[VEC_MASK0]] = alloca <8 x i32>, align 32
; CHECK-NEXT:    [[VEC_RETVAL0]] = alloca <8 x i32>, align 32
; CHECK-NEXT:    [[MASK_CAST0]] = bitcast <8 x i32>* [[VEC_MASK0]] to i32*
; CHECK-NEXT:    [[RET_CAST0]] = bitcast <8 x i32>* [[VEC_RETVAL0]] to i32*
; CHECK-NEXT:    store <8 x i32> [[MASK0]], <8 x i32>* [[VEC_MASK0]], align 32
; CHECK-NEXT:    br label [[SIMD_BEGIN_REGION0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.begin.region:
; CHECK-NEXT:    br label [[SIMD_LOOP_PREHEADER0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.preheader:
; CHECK-NEXT:    br label [[VPLANNEDBB0]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB:
; CHECK-NEXT:    br label [[VPLANNEDBB10]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB1:
; CHECK-NEXT:    br label [[VECTOR_BODY0]]
; CHECK-EMPTY:
; CHECK-NEXT:  vector.body:
; CHECK-NEXT:    [[UNI_PHI0]] = phi i32 [ 0, [[VPLANNEDBB10]] ], [ [[TMP13]], [[VPLANNEDBB110]] ]
; CHECK-NEXT:    [[VEC_PHI0]] = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, [[VPLANNEDBB10]] ], [ [[TMP12]], [[VPLANNEDBB110]] ]
; CHECK-NEXT:    [[SCALAR_GEP0]] = getelementptr i32, i32* [[MASK_CAST0]], i32 [[UNI_PHI0]]
; CHECK-NEXT:    [[TMP0]] = bitcast i32* [[SCALAR_GEP0]] to <4 x i32>*
; CHECK-NEXT:    [[WIDE_LOAD0]] = load <4 x i32>, <4 x i32>* [[TMP0]], align 16
; CHECK-NEXT:    [[TMP1]] = icmp ne <4 x i32> [[WIDE_LOAD0]], zeroinitializer
; CHECK-NEXT:    [[TMP2]] = xor <4 x i1> [[TMP1]], <i1 true, i1 true, i1 true, i1 true>
; CHECK-NEXT:    br label [[VPLANNEDBB30]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB3:
; CHECK-NEXT:    br label [[VPLANNEDBB40]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB4:
; CHECK-NEXT:    [[SCALAR_GEP50]] = getelementptr i32, i32* [[RET_CAST0]], i32 [[UNI_PHI0]]
; CHECK-NEXT:    [[TMP3]] = bitcast i32* [[SCALAR_GEP50]] to <4 x i32>*
; CHECK-NEXT:    call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> zeroinitializer, <4 x i32>* [[TMP3]], i32 16, <4 x i1> [[TMP1]])
; CHECK-NEXT:    br label [[VPLANNEDBB60]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB6:
; CHECK-NEXT:    [[PREDICATE0]] = extractelement <4 x i1> [[TMP1]], i64 0
; CHECK-NEXT:    [[TMP4]] = icmp eq i1 [[PREDICATE0]], true
; CHECK-NEXT:    br i1 [[TMP4]], label [[PRED_CALL_IF0]], label [[TMP5]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.if:
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_6()
; CHECK-NEXT:    br label [[TMP5]]
; CHECK-EMPTY:
; CHECK-NEXT:  5:
; CHECK-NEXT:    br label [[PRED_CALL_CONTINUE0]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.continue:
; CHECK-NEXT:    [[PREDICATE70]] = extractelement <4 x i1> [[TMP1]], i64 1
; CHECK-NEXT:    [[TMP6]] = icmp eq i1 [[PREDICATE70]], true
; CHECK-NEXT:    br i1 [[TMP6]], label [[PRED_CALL_IF150]], label [[TMP7]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.if15:
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_6()
; CHECK-NEXT:    br label [[TMP7]]
; CHECK-EMPTY:
; CHECK-NEXT:  7:
; CHECK-NEXT:    br label [[PRED_CALL_CONTINUE160]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.continue16:
; CHECK-NEXT:    [[PREDICATE80]] = extractelement <4 x i1> [[TMP1]], i64 2
; CHECK-NEXT:    [[TMP8]] = icmp eq i1 [[PREDICATE80]], true
; CHECK-NEXT:    br i1 [[TMP8]], label [[PRED_CALL_IF170]], label [[TMP9]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.if17:
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_6()
; CHECK-NEXT:    br label [[TMP9]]
; CHECK-EMPTY:
; CHECK-NEXT:  9:
; CHECK-NEXT:    br label [[PRED_CALL_CONTINUE180]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.continue18:
; CHECK-NEXT:    [[PREDICATE90]] = extractelement <4 x i1> [[TMP1]], i64 3
; CHECK-NEXT:    [[TMP10]] = icmp eq i1 [[PREDICATE90]], true
; CHECK-NEXT:    br i1 [[TMP10]], label [[PRED_CALL_IF190]], label [[TMP11]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.if19:
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_6()
; CHECK-NEXT:    br label [[TMP11]]
; CHECK-EMPTY:
; CHECK-NEXT:  11:
; CHECK-NEXT:    br label [[PRED_CALL_CONTINUE200]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.continue20:
; CHECK-NEXT:    br label [[VPLANNEDBB100]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB10:
; CHECK-NEXT:    br label [[VPLANNEDBB110]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB11:
; CHECK-NEXT:    [[TMP12]] = add nuw <4 x i32> [[VEC_PHI0]], <i32 4, i32 4, i32 4, i32 4>
; CHECK-NEXT:    [[TMP13]] = add nuw i32 [[UNI_PHI0]], 4
; CHECK-NEXT:    [[TMP14]] = icmp ult i32 [[TMP13]], 8
; CHECK-NEXT:    br i1 [[TMP14]], label [[VECTOR_BODY0]], label [[VPLANNEDBB120]], !llvm.loop !6
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB12:
; CHECK-NEXT:    br label [[VPLANNEDBB130]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB13:
; CHECK-NEXT:    br label [[FINAL_MERGE0]]
; CHECK-EMPTY:
; CHECK-NEXT:  final.merge:
; CHECK-NEXT:    [[UNI_PHI140]] = phi i32 [ 8, [[VPLANNEDBB130]] ]
; CHECK-NEXT:    br label [[SIMD_END_REGION0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.header:
; CHECK-NEXT:    [[INDEX0]] = phi i32 [ [[INDVAR0]], [[SIMD_LOOP_LATCH0]] ]
; CHECK-NEXT:    [[MASK_GEP0]] = getelementptr i32, i32* [[MASK_CAST0]], i32 [[INDEX0]]
; CHECK-NEXT:    [[MASK_PARM0]] = load i32, i32* [[MASK_GEP0]], align 4
; CHECK-NEXT:    [[MASK_COND0]] = icmp ne i32 [[MASK_PARM0]], 0
; CHECK-NEXT:    br i1 [[MASK_COND0]], label [[SIMD_LOOP_THEN0]], label [[SIMD_LOOP_ELSE0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.then:
; CHECK-NEXT:    [[RET_CAST_GEP0]] = getelementptr i32, i32* [[RET_CAST0]], i32 [[INDEX0]]
; CHECK-NEXT:    store i32 0, i32* [[RET_CAST_GEP0]], align 4
; CHECK-NEXT:    br label [[CODEREPL0]]
; CHECK-EMPTY:
; CHECK-NEXT:  codeRepl:
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_6()
; CHECK-NEXT:    br label [[DIR_OMP_END_ORDERED_30]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.END.ORDERED.3:
; CHECK-NEXT:    br label [[SIMD_LOOP_LATCH0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.else:
; CHECK-NEXT:    br label [[SIMD_LOOP_LATCH0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.latch:
; CHECK-NEXT:    [[INDVAR0]] = add nuw i32 [[INDEX0]], 1
; CHECK-NEXT:    [[VL_COND0]] = icmp ult i32 [[INDVAR0]], 8
; CHECK-NEXT:    br label [[SIMD_LOOP_HEADER0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.end.region:
; CHECK-NEXT:    br label [[RETURN0]]
; CHECK-EMPTY:
; CHECK-NEXT:  return:
; CHECK-NEXT:    [[VEC_RET_CAST0]] = bitcast i32* [[RET_CAST0]] to <8 x i32>*
; CHECK-NEXT:    [[VEC_RET0]] = load <8 x i32>, <8 x i32>* [[VEC_RET_CAST0]], align 32
; CHECK-NEXT:    ret <8 x i32> [[VEC_RET0]]
; CHECK-NEXT:  }
;
; CHECK:  define dso_local <8 x i32> @_ZGVdM8v__Z3fooi(<8 x i32> [[A0]], <8 x i32> [[MASK0]]) local_unnamed_addr #2 {
; CHECK-NEXT:  DIR.OMP.END.ORDERED.4:
; CHECK-NEXT:    [[VEC_MASK0]] = alloca <8 x i32>, align 32
; CHECK-NEXT:    [[VEC_RETVAL0]] = alloca <8 x i32>, align 32
; CHECK-NEXT:    [[MASK_CAST0]] = bitcast <8 x i32>* [[VEC_MASK0]] to i32*
; CHECK-NEXT:    [[RET_CAST0]] = bitcast <8 x i32>* [[VEC_RETVAL0]] to i32*
; CHECK-NEXT:    store <8 x i32> [[MASK0]], <8 x i32>* [[VEC_MASK0]], align 32
; CHECK-NEXT:    br label [[SIMD_BEGIN_REGION0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.begin.region:
; CHECK-NEXT:    br label [[SIMD_LOOP_PREHEADER0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.preheader:
; CHECK-NEXT:    br label [[VPLANNEDBB0]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB:
; CHECK-NEXT:    br label [[VPLANNEDBB10]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB1:
; CHECK-NEXT:    br label [[VECTOR_BODY0]]
; CHECK-EMPTY:
; CHECK-NEXT:  vector.body:
; CHECK-NEXT:    [[UNI_PHI0]] = phi i32 [ 0, [[VPLANNEDBB10]] ], [ [[TMP13]], [[VPLANNEDBB110]] ]
; CHECK-NEXT:    [[VEC_PHI0]] = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, [[VPLANNEDBB10]] ], [ [[TMP12]], [[VPLANNEDBB110]] ]
; CHECK-NEXT:    [[SCALAR_GEP0]] = getelementptr i32, i32* [[MASK_CAST0]], i32 [[UNI_PHI0]]
; CHECK-NEXT:    [[TMP0]] = bitcast i32* [[SCALAR_GEP0]] to <4 x i32>*
; CHECK-NEXT:    [[WIDE_LOAD0]] = load <4 x i32>, <4 x i32>* [[TMP0]], align 16
; CHECK-NEXT:    [[TMP1]] = icmp ne <4 x i32> [[WIDE_LOAD0]], zeroinitializer
; CHECK-NEXT:    [[TMP2]] = xor <4 x i1> [[TMP1]], <i1 true, i1 true, i1 true, i1 true>
; CHECK-NEXT:    br label [[VPLANNEDBB30]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB3:
; CHECK-NEXT:    br label [[VPLANNEDBB40]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB4:
; CHECK-NEXT:    [[SCALAR_GEP50]] = getelementptr i32, i32* [[RET_CAST0]], i32 [[UNI_PHI0]]
; CHECK-NEXT:    [[TMP3]] = bitcast i32* [[SCALAR_GEP50]] to <4 x i32>*
; CHECK-NEXT:    call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> zeroinitializer, <4 x i32>* [[TMP3]], i32 16, <4 x i1> [[TMP1]])
; CHECK-NEXT:    br label [[VPLANNEDBB60]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB6:
; CHECK-NEXT:    [[PREDICATE0]] = extractelement <4 x i1> [[TMP1]], i64 0
; CHECK-NEXT:    [[TMP4]] = icmp eq i1 [[PREDICATE0]], true
; CHECK-NEXT:    br i1 [[TMP4]], label [[PRED_CALL_IF0]], label [[TMP5]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.if:
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_7()
; CHECK-NEXT:    br label [[TMP5]]
; CHECK-EMPTY:
; CHECK-NEXT:  5:
; CHECK-NEXT:    br label [[PRED_CALL_CONTINUE0]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.continue:
; CHECK-NEXT:    [[PREDICATE70]] = extractelement <4 x i1> [[TMP1]], i64 1
; CHECK-NEXT:    [[TMP6]] = icmp eq i1 [[PREDICATE70]], true
; CHECK-NEXT:    br i1 [[TMP6]], label [[PRED_CALL_IF150]], label [[TMP7]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.if15:
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_7()
; CHECK-NEXT:    br label [[TMP7]]
; CHECK-EMPTY:
; CHECK-NEXT:  7:
; CHECK-NEXT:    br label [[PRED_CALL_CONTINUE160]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.continue16:
; CHECK-NEXT:    [[PREDICATE80]] = extractelement <4 x i1> [[TMP1]], i64 2
; CHECK-NEXT:    [[TMP8]] = icmp eq i1 [[PREDICATE80]], true
; CHECK-NEXT:    br i1 [[TMP8]], label [[PRED_CALL_IF170]], label [[TMP9]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.if17:
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_7()
; CHECK-NEXT:    br label [[TMP9]]
; CHECK-EMPTY:
; CHECK-NEXT:  9:
; CHECK-NEXT:    br label [[PRED_CALL_CONTINUE180]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.continue18:
; CHECK-NEXT:    [[PREDICATE90]] = extractelement <4 x i1> [[TMP1]], i64 3
; CHECK-NEXT:    [[TMP10]] = icmp eq i1 [[PREDICATE90]], true
; CHECK-NEXT:    br i1 [[TMP10]], label [[PRED_CALL_IF190]], label [[TMP11]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.if19:
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_7()
; CHECK-NEXT:    br label [[TMP11]]
; CHECK-EMPTY:
; CHECK-NEXT:  11:
; CHECK-NEXT:    br label [[PRED_CALL_CONTINUE200]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.continue20:
; CHECK-NEXT:    br label [[VPLANNEDBB100]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB10:
; CHECK-NEXT:    br label [[VPLANNEDBB110]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB11:
; CHECK-NEXT:    [[TMP12]] = add nuw <4 x i32> [[VEC_PHI0]], <i32 4, i32 4, i32 4, i32 4>
; CHECK-NEXT:    [[TMP13]] = add nuw i32 [[UNI_PHI0]], 4
; CHECK-NEXT:    [[TMP14]] = icmp ult i32 [[TMP13]], 8
; CHECK-NEXT:    br i1 [[TMP14]], label [[VECTOR_BODY0]], label [[VPLANNEDBB120]], !llvm.loop !7
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB12:
; CHECK-NEXT:    br label [[VPLANNEDBB130]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB13:
; CHECK-NEXT:    br label [[FINAL_MERGE0]]
; CHECK-EMPTY:
; CHECK-NEXT:  final.merge:
; CHECK-NEXT:    [[UNI_PHI140]] = phi i32 [ 8, [[VPLANNEDBB130]] ]
; CHECK-NEXT:    br label [[SIMD_END_REGION0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.header:
; CHECK-NEXT:    [[INDEX0]] = phi i32 [ [[INDVAR0]], [[SIMD_LOOP_LATCH0]] ]
; CHECK-NEXT:    [[MASK_GEP0]] = getelementptr i32, i32* [[MASK_CAST0]], i32 [[INDEX0]]
; CHECK-NEXT:    [[MASK_PARM0]] = load i32, i32* [[MASK_GEP0]], align 4
; CHECK-NEXT:    [[MASK_COND0]] = icmp ne i32 [[MASK_PARM0]], 0
; CHECK-NEXT:    br i1 [[MASK_COND0]], label [[SIMD_LOOP_THEN0]], label [[SIMD_LOOP_ELSE0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.then:
; CHECK-NEXT:    [[RET_CAST_GEP0]] = getelementptr i32, i32* [[RET_CAST0]], i32 [[INDEX0]]
; CHECK-NEXT:    store i32 0, i32* [[RET_CAST_GEP0]], align 4
; CHECK-NEXT:    br label [[CODEREPL0]]
; CHECK-EMPTY:
; CHECK-NEXT:  codeRepl:
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_7()
; CHECK-NEXT:    br label [[DIR_OMP_END_ORDERED_30]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.END.ORDERED.3:
; CHECK-NEXT:    br label [[SIMD_LOOP_LATCH0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.else:
; CHECK-NEXT:    br label [[SIMD_LOOP_LATCH0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.latch:
; CHECK-NEXT:    [[INDVAR0]] = add nuw i32 [[INDEX0]], 1
; CHECK-NEXT:    [[VL_COND0]] = icmp ult i32 [[INDVAR0]], 8
; CHECK-NEXT:    br label [[SIMD_LOOP_HEADER0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.end.region:
; CHECK-NEXT:    br label [[RETURN0]]
; CHECK-EMPTY:
; CHECK-NEXT:  return:
; CHECK-NEXT:    [[VEC_RET_CAST0]] = bitcast i32* [[RET_CAST0]] to <8 x i32>*
; CHECK-NEXT:    [[VEC_RET0]] = load <8 x i32>, <8 x i32>* [[VEC_RET_CAST0]], align 32
; CHECK-NEXT:    ret <8 x i32> [[VEC_RET0]]
; CHECK-NEXT:  }
;
; CHECK:  define dso_local <16 x i32> @_ZGVeM16v__Z3fooi(<16 x i32> [[A0]], <16 x i32> [[MASK0]]) local_unnamed_addr #2 {
; CHECK-NEXT:  DIR.OMP.END.ORDERED.4:
; CHECK-NEXT:    [[VEC_MASK0]] = alloca <16 x i32>, align 64
; CHECK-NEXT:    [[VEC_RETVAL0]] = alloca <16 x i32>, align 64
; CHECK-NEXT:    [[MASK_CAST0]] = bitcast <16 x i32>* [[VEC_MASK0]] to i32*
; CHECK-NEXT:    [[RET_CAST0]] = bitcast <16 x i32>* [[VEC_RETVAL0]] to i32*
; CHECK-NEXT:    store <16 x i32> [[MASK0]], <16 x i32>* [[VEC_MASK0]], align 64
; CHECK-NEXT:    br label [[SIMD_BEGIN_REGION0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.begin.region:
; CHECK-NEXT:    br label [[SIMD_LOOP_PREHEADER0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.preheader:
; CHECK-NEXT:    br label [[VPLANNEDBB0]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB:
; CHECK-NEXT:    br label [[VPLANNEDBB10]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB1:
; CHECK-NEXT:    br label [[VECTOR_BODY0]]
; CHECK-EMPTY:
; CHECK-NEXT:  vector.body:
; CHECK-NEXT:    [[UNI_PHI0]] = phi i32 [ 0, [[VPLANNEDBB10]] ], [ [[TMP13]], [[VPLANNEDBB110]] ]
; CHECK-NEXT:    [[VEC_PHI0]] = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, [[VPLANNEDBB10]] ], [ [[TMP12]], [[VPLANNEDBB110]] ]
; CHECK-NEXT:    [[SCALAR_GEP0]] = getelementptr i32, i32* [[MASK_CAST0]], i32 [[UNI_PHI0]]
; CHECK-NEXT:    [[TMP0]] = bitcast i32* [[SCALAR_GEP0]] to <4 x i32>*
; CHECK-NEXT:    [[WIDE_LOAD0]] = load <4 x i32>, <4 x i32>* [[TMP0]], align 16
; CHECK-NEXT:    [[TMP1]] = icmp ne <4 x i32> [[WIDE_LOAD0]], zeroinitializer
; CHECK-NEXT:    [[TMP2]] = xor <4 x i1> [[TMP1]], <i1 true, i1 true, i1 true, i1 true>
; CHECK-NEXT:    br label [[VPLANNEDBB30]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB3:
; CHECK-NEXT:    br label [[VPLANNEDBB40]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB4:
; CHECK-NEXT:    [[SCALAR_GEP50]] = getelementptr i32, i32* [[RET_CAST0]], i32 [[UNI_PHI0]]
; CHECK-NEXT:    [[TMP3]] = bitcast i32* [[SCALAR_GEP50]] to <4 x i32>*
; CHECK-NEXT:    call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> zeroinitializer, <4 x i32>* [[TMP3]], i32 16, <4 x i1> [[TMP1]])
; CHECK-NEXT:    br label [[VPLANNEDBB60]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB6:
; CHECK-NEXT:    [[PREDICATE0]] = extractelement <4 x i1> [[TMP1]], i64 0
; CHECK-NEXT:    [[TMP4]] = icmp eq i1 [[PREDICATE0]], true
; CHECK-NEXT:    br i1 [[TMP4]], label [[PRED_CALL_IF0]], label [[TMP5]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.if:
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_8()
; CHECK-NEXT:    br label [[TMP5]]
; CHECK-EMPTY:
; CHECK-NEXT:  5:
; CHECK-NEXT:    br label [[PRED_CALL_CONTINUE0]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.continue:
; CHECK-NEXT:    [[PREDICATE70]] = extractelement <4 x i1> [[TMP1]], i64 1
; CHECK-NEXT:    [[TMP6]] = icmp eq i1 [[PREDICATE70]], true
; CHECK-NEXT:    br i1 [[TMP6]], label [[PRED_CALL_IF150]], label [[TMP7]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.if15:
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_8()
; CHECK-NEXT:    br label [[TMP7]]
; CHECK-EMPTY:
; CHECK-NEXT:  7:
; CHECK-NEXT:    br label [[PRED_CALL_CONTINUE160]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.continue16:
; CHECK-NEXT:    [[PREDICATE80]] = extractelement <4 x i1> [[TMP1]], i64 2
; CHECK-NEXT:    [[TMP8]] = icmp eq i1 [[PREDICATE80]], true
; CHECK-NEXT:    br i1 [[TMP8]], label [[PRED_CALL_IF170]], label [[TMP9]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.if17:
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_8()
; CHECK-NEXT:    br label [[TMP9]]
; CHECK-EMPTY:
; CHECK-NEXT:  9:
; CHECK-NEXT:    br label [[PRED_CALL_CONTINUE180]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.continue18:
; CHECK-NEXT:    [[PREDICATE90]] = extractelement <4 x i1> [[TMP1]], i64 3
; CHECK-NEXT:    [[TMP10]] = icmp eq i1 [[PREDICATE90]], true
; CHECK-NEXT:    br i1 [[TMP10]], label [[PRED_CALL_IF190]], label [[TMP11]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.if19:
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_8()
; CHECK-NEXT:    br label [[TMP11]]
; CHECK-EMPTY:
; CHECK-NEXT:  11:
; CHECK-NEXT:    br label [[PRED_CALL_CONTINUE200]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.continue20:
; CHECK-NEXT:    br label [[VPLANNEDBB100]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB10:
; CHECK-NEXT:    br label [[VPLANNEDBB110]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB11:
; CHECK-NEXT:    [[TMP12]] = add nuw <4 x i32> [[VEC_PHI0]], <i32 4, i32 4, i32 4, i32 4>
; CHECK-NEXT:    [[TMP13]] = add nuw i32 [[UNI_PHI0]], 4
; CHECK-NEXT:    [[TMP14]] = icmp ult i32 [[TMP13]], 16
; CHECK-NEXT:    br i1 [[TMP14]], label [[VECTOR_BODY0]], label [[VPLANNEDBB120]], !llvm.loop !8
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB12:
; CHECK-NEXT:    br label [[VPLANNEDBB130]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB13:
; CHECK-NEXT:    br label [[FINAL_MERGE0]]
; CHECK-EMPTY:
; CHECK-NEXT:  final.merge:
; CHECK-NEXT:    [[UNI_PHI140]] = phi i32 [ 16, [[VPLANNEDBB130]] ]
; CHECK-NEXT:    br label [[SIMD_END_REGION0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.header:
; CHECK-NEXT:    [[INDEX0]] = phi i32 [ [[INDVAR0]], [[SIMD_LOOP_LATCH0]] ]
; CHECK-NEXT:    [[MASK_GEP0]] = getelementptr i32, i32* [[MASK_CAST0]], i32 [[INDEX0]]
; CHECK-NEXT:    [[MASK_PARM0]] = load i32, i32* [[MASK_GEP0]], align 4
; CHECK-NEXT:    [[MASK_COND0]] = icmp ne i32 [[MASK_PARM0]], 0
; CHECK-NEXT:    br i1 [[MASK_COND0]], label [[SIMD_LOOP_THEN0]], label [[SIMD_LOOP_ELSE0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.then:
; CHECK-NEXT:    [[RET_CAST_GEP0]] = getelementptr i32, i32* [[RET_CAST0]], i32 [[INDEX0]]
; CHECK-NEXT:    store i32 0, i32* [[RET_CAST_GEP0]], align 4
; CHECK-NEXT:    br label [[CODEREPL0]]
; CHECK-EMPTY:
; CHECK-NEXT:  codeRepl:
; CHECK-NEXT:    call void @_Z3fooi.ordered.simd.region_8()
; CHECK-NEXT:    br label [[DIR_OMP_END_ORDERED_30]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.END.ORDERED.3:
; CHECK-NEXT:    br label [[SIMD_LOOP_LATCH0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.else:
; CHECK-NEXT:    br label [[SIMD_LOOP_LATCH0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.latch:
; CHECK-NEXT:    [[INDVAR0]] = add nuw i32 [[INDEX0]], 1
; CHECK-NEXT:    [[VL_COND0]] = icmp ult i32 [[INDVAR0]], 16
; CHECK-NEXT:    br label [[SIMD_LOOP_HEADER0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.end.region:
; CHECK-NEXT:    br label [[RETURN0]]
; CHECK-EMPTY:
; CHECK-NEXT:  return:
; CHECK-NEXT:    [[VEC_RET_CAST0]] = bitcast i32* [[RET_CAST0]] to <16 x i32>*
; CHECK-NEXT:    [[VEC_RET0]] = load <16 x i32>, <16 x i32>* [[VEC_RET_CAST0]], align 64
; CHECK-NEXT:    ret <16 x i32> [[VEC_RET0]]
; CHECK-NEXT:  }
;
; CHECK:  define internal void @_Z3fooi.ordered.simd.region() #3 {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[DIR_OMP_ORDERED_10:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.ORDERED.1:
; CHECK-NEXT:    [[TMP0]] = call token @llvm.directive.region.entry() [ "DIR.OMP.ORDERED"(), "QUAL.OMP.ORDERED.SIMD"() ]
; CHECK-NEXT:    br label [[DIR_OMP_ORDERED_20:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.ORDERED.2:
; CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP0]]) [ "DIR.OMP.END.ORDERED"() ]
; CHECK-NEXT:    br label [[DIR_OMP_END_ORDERED_3_EXITSTUB0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.END.ORDERED.3.exitStub:
; CHECK-NEXT:    ret void
; CHECK-NEXT:  }
;
; CHECK:  define internal void @_Z3fooi.ordered.simd.region_1() #4 {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[DIR_OMP_ORDERED_10]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.ORDERED.1:
; CHECK-NEXT:    [[TMP0]] = call token @llvm.directive.region.entry() [ "DIR.OMP.ORDERED"(), "QUAL.OMP.ORDERED.SIMD"() ]
; CHECK-NEXT:    br label [[DIR_OMP_ORDERED_20]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.ORDERED.2:
; CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP0]]) [ "DIR.OMP.END.ORDERED"() ]
; CHECK-NEXT:    br label [[DIR_OMP_END_ORDERED_3_EXITSTUB0]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.END.ORDERED.3.exitStub:
; CHECK-NEXT:    ret void
; CHECK-NEXT:  }
;
; CHECK:  define internal void @_Z3fooi.ordered.simd.region_2() #4 {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[DIR_OMP_ORDERED_10]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.ORDERED.1:
; CHECK-NEXT:    [[TMP0]] = call token @llvm.directive.region.entry() [ "DIR.OMP.ORDERED"(), "QUAL.OMP.ORDERED.SIMD"() ]
; CHECK-NEXT:    br label [[DIR_OMP_ORDERED_20]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.ORDERED.2:
; CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP0]]) [ "DIR.OMP.END.ORDERED"() ]
; CHECK-NEXT:    br label [[DIR_OMP_END_ORDERED_3_EXITSTUB0]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.END.ORDERED.3.exitStub:
; CHECK-NEXT:    ret void
; CHECK-NEXT:  }
;
; CHECK:  define internal void @_Z3fooi.ordered.simd.region_3() #4 {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[DIR_OMP_ORDERED_10]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.ORDERED.1:
; CHECK-NEXT:    [[TMP0]] = call token @llvm.directive.region.entry() [ "DIR.OMP.ORDERED"(), "QUAL.OMP.ORDERED.SIMD"() ]
; CHECK-NEXT:    br label [[DIR_OMP_ORDERED_20]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.ORDERED.2:
; CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP0]]) [ "DIR.OMP.END.ORDERED"() ]
; CHECK-NEXT:    br label [[DIR_OMP_END_ORDERED_3_EXITSTUB0]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.END.ORDERED.3.exitStub:
; CHECK-NEXT:    ret void
; CHECK-NEXT:  }
;
; CHECK:  define internal void @_Z3fooi.ordered.simd.region_4() #4 {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[DIR_OMP_ORDERED_10]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.ORDERED.1:
; CHECK-NEXT:    [[TMP0]] = call token @llvm.directive.region.entry() [ "DIR.OMP.ORDERED"(), "QUAL.OMP.ORDERED.SIMD"() ]
; CHECK-NEXT:    br label [[DIR_OMP_ORDERED_20]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.ORDERED.2:
; CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP0]]) [ "DIR.OMP.END.ORDERED"() ]
; CHECK-NEXT:    br label [[DIR_OMP_END_ORDERED_3_EXITSTUB0]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.END.ORDERED.3.exitStub:
; CHECK-NEXT:    ret void
; CHECK-NEXT:  }
;
; CHECK:  define internal void @_Z3fooi.ordered.simd.region_5() #4 {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[DIR_OMP_ORDERED_10]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.ORDERED.1:
; CHECK-NEXT:    [[TMP0]] = call token @llvm.directive.region.entry() [ "DIR.OMP.ORDERED"(), "QUAL.OMP.ORDERED.SIMD"() ]
; CHECK-NEXT:    br label [[DIR_OMP_ORDERED_20]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.ORDERED.2:
; CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP0]]) [ "DIR.OMP.END.ORDERED"() ]
; CHECK-NEXT:    br label [[DIR_OMP_END_ORDERED_3_EXITSTUB0]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.END.ORDERED.3.exitStub:
; CHECK-NEXT:    ret void
; CHECK-NEXT:  }
;
; CHECK:  define internal void @_Z3fooi.ordered.simd.region_6() #4 {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[DIR_OMP_ORDERED_10]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.ORDERED.1:
; CHECK-NEXT:    [[TMP0]] = call token @llvm.directive.region.entry() [ "DIR.OMP.ORDERED"(), "QUAL.OMP.ORDERED.SIMD"() ]
; CHECK-NEXT:    br label [[DIR_OMP_ORDERED_20]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.ORDERED.2:
; CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP0]]) [ "DIR.OMP.END.ORDERED"() ]
; CHECK-NEXT:    br label [[DIR_OMP_END_ORDERED_3_EXITSTUB0]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.END.ORDERED.3.exitStub:
; CHECK-NEXT:    ret void
; CHECK-NEXT:  }
;
; CHECK:  define internal void @_Z3fooi.ordered.simd.region_7() #4 {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[DIR_OMP_ORDERED_10]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.ORDERED.1:
; CHECK-NEXT:    [[TMP0]] = call token @llvm.directive.region.entry() [ "DIR.OMP.ORDERED"(), "QUAL.OMP.ORDERED.SIMD"() ]
; CHECK-NEXT:    br label [[DIR_OMP_ORDERED_20]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.ORDERED.2:
; CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP0]]) [ "DIR.OMP.END.ORDERED"() ]
; CHECK-NEXT:    br label [[DIR_OMP_END_ORDERED_3_EXITSTUB0]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.END.ORDERED.3.exitStub:
; CHECK-NEXT:    ret void
; CHECK-NEXT:  }
;
; CHECK:  define internal void @_Z3fooi.ordered.simd.region_8() #4 {
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[DIR_OMP_ORDERED_10]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.ORDERED.1:
; CHECK-NEXT:    [[TMP0]] = call token @llvm.directive.region.entry() [ "DIR.OMP.ORDERED"(), "QUAL.OMP.ORDERED.SIMD"() ]
; CHECK-NEXT:    br label [[DIR_OMP_ORDERED_20]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.ORDERED.2:
; CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP0]]) [ "DIR.OMP.END.ORDERED"() ]
; CHECK-NEXT:    br label [[DIR_OMP_END_ORDERED_3_EXITSTUB0]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.END.ORDERED.3.exitStub:
; CHECK-NEXT:    ret void
; CHECK-NEXT:  }
;
DIR.OMP.END.ORDERED.4:
  br label %DIR.OMP.ORDERED.1

DIR.OMP.ORDERED.1:                                ; preds = %DIR.OMP.END.ORDERED.4
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.ORDERED"(), "QUAL.OMP.ORDERED.SIMD"() ]
  br label %DIR.OMP.ORDERED.2

DIR.OMP.ORDERED.2:                                ; preds = %DIR.OMP.ORDERED.1
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.ORDERED"() ]
  br label %DIR.OMP.END.ORDERED.3

DIR.OMP.END.ORDERED.3:                            ; preds = %DIR.OMP.ORDERED.2
  ret i32 0
}

declare token @llvm.directive.region.entry() #1

declare void @llvm.directive.region.exit(token) #1

attributes #0 = { noinline nounwind uwtable "vector-variants"="_ZGVbN4v__Z3fooi,_ZGVcN8v__Z3fooi,_ZGVdN8v__Z3fooi,_ZGVeN16v__Z3fooi,_ZGVbM4v__Z3fooi,_ZGVcM8v__Z3fooi,_ZGVdM8v__Z3fooi,_ZGVeM16v__Z3fooi" }
attributes #1 = { nounwind }

