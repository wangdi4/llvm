; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; Test checks for that we don't crash in fixNonInductionVPPhis when vectorized remainder is enabled.
; RUN: opt -passes=vplan-vec -vplan-enable-non-masked-vectorized-remainder -vplan-print-after-cfg-merge -S -vplan-enable-masked-vectorized-remainder=0 %s | FileCheck %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #0

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #0

define void @_ZN10Mandelbrot16execute_cpu_partEii_DIR_OMP_PARALLEL_LOOP_2_split154(i1 %c, float %p) #1 {
; CHECK-LABEL:  VPlan after CFG merge before CG:
; **** Main loop
; CHECK:             [[BB0:BB[0-9]+]]:
; CHECK:             [[BB1:BB[0-9]+]]:
; CHECK:             [[BB2:BB[0-9]+]]:
; CHECK-NEXT:         [DA: Uni] pushvf VF=16 UF=1
; CHECK-NEXT:         [DA: Uni] br [[BB3:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB3]]: # preds: [[BB2]]
; CHECK-NEXT:         [DA: Div] i32 [[VP__OMP_IV15_LOCAL_0141_IND_INIT:%.*]] = induction-init{add} i32 0 i32 1
; CHECK-NEXT:         [DA: Uni] i32 [[VP__OMP_IV15_LOCAL_0141_IND_INIT_STEP:%.*]] = induction-init-step{add} i32 1
; CHECK-NEXT:         [DA: Uni] i32 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i32 1035, UF = 1
; CHECK-NEXT:         [DA: Uni] br [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB4]]: # preds: [[BB3]], [[BB5:BB[0-9]+]]
; CHECK-NEXT:         [DA: Div] i32 [[VP__OMP_IV15_LOCAL_0141:%.*]] = phi  [ i32 [[VP__OMP_IV15_LOCAL_0141_IND_INIT]], [[BB3]] ],  [ i32 [[VP_ADD71:%.*]], [[BB5]] ]
; CHECK-NEXT:         [DA: Div] float [[VP_CONV:%.*]] = sitofp i32 [[VP__OMP_IV15_LOCAL_0141]] to float
; CHECK-NEXT:         [DA: Div] float [[VP_MUL22:%.*]] = fmul float 2.000000e+00 float [[VP_CONV]]
; CHECK-NEXT:         [DA: Div] float [[VP_ADD23:%.*]] = fadd float [[VP_MUL22]] float 1.000000e+00
; CHECK-NEXT:         [DA: Uni] br i1 [[C0:%.*]], [[BB6:BB[0-9]+]], [[BB7:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:          [[BB6]]: # preds: [[BB4]]
; CHECK-NEXT:           [DA: Uni] br [[BB8:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:          [[BB8]]: # preds: [[BB6]], [[NEW_LOOP_LATCH0:new.loop.latch[0-9]+]]
; **** This is the phi in the main loop, clone of which in remainder caused the crash
; CHECK-NEXT:           [DA: Div] float [[VP_T5_0:%.*]] = phi  [ float [[VP_ADD23]], [[BB6]] ],  [ float [[VP__SSA_PHI:%.*]], [[NEW_LOOP_LATCH0]] ]
; CHECK-NEXT:           [DA: Uni] br i1 [[C0]], [[INTERMEDIATE_BB0:intermediate.bb[0-9]+]], [[BB9:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:            [[BB9]]: # preds: [[BB8]]
; CHECK-NEXT:             [DA: Uni] br [[BB10:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:            [[BB10]]: # preds: [[BB9]]
; CHECK-NEXT:             [DA: Uni] br i1 [[C0]], [[INTERMEDIATE_BB0]], [[BB11:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:            [[BB11]]: # preds: [[BB10]]
; CHECK-NEXT:             [DA: Uni] float [[VP2:%.*]] = fsub float [[P0:%.*]] float 1.000000e+00
; CHECK-NEXT:             [DA: Uni] br [[NEW_LOOP_LATCH0]]
; CHECK-EMPTY:
; CHECK-NEXT:            [[INTERMEDIATE_BB0]]: # preds: [[BB8]], [[BB10]]
; CHECK-NEXT:             [DA: Uni] br [[NEW_LOOP_LATCH0]]
; CHECK-EMPTY:
; CHECK-NEXT:          [[NEW_LOOP_LATCH0]]: # preds: [[BB11]], [[INTERMEDIATE_BB0]]
; **** operand of that phi
; CHECK-NEXT:           [DA: Uni] float [[VP__SSA_PHI]] = phi  [ float [[VP2]], [[BB11]] ],  [ float undef, [[INTERMEDIATE_BB0]] ]
; CHECK-NEXT:           [DA: Uni] i32 [[VP_EXIT_ID_PHI:%.*]] = phi  [ i32 0, [[BB11]] ],  [ i32 1, [[INTERMEDIATE_BB0]] ]
; CHECK-NEXT:           [DA: Uni] i1 [[VP_TAKE_BACKEDGE_COND:%.*]] = phi  [ i1 true, [[BB11]] ],  [ i1 false, [[INTERMEDIATE_BB0]] ]
; CHECK-NEXT:           [DA: Uni] br i1 [[VP_TAKE_BACKEDGE_COND]], [[BB8]], [[BB12:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:          [[BB12]]: # preds: [[NEW_LOOP_LATCH0]]
; CHECK-NEXT:           [DA: Uni] br [[BB7]]
; **** Merge block between loops
; CHECK:             [[MERGE_BLK1: merge.*]]: # preds: [[BB15:BB[0-9]+]], [[BB1:BB[0-9]+]]
; CHECK-NEXT:         [DA: Uni] i32 [[VP4:%.*]] = phi-merge  [ i32 live-out0, [[BB15]] ],  [ i32 0, [[BB1]] ]
; CHECK-NEXT:         [DA: Uni] br [[BB16:BB[0-9]+]]
;
; CHECK:              [DA: Uni] pushvf VF=4 UF=1
; CHECK-NEXT:         [DA: Uni] br [[BB17:BB[0-9]+]]
; **** Remainder loop
; CHECK:             [[BB17]]: # preds: [[BB16]]
; CHECK-NEXT:         [DA: Div] i32 [[VP5:%.*]] = induction-init{add} i32 [[VP4]] i32 1
; CHECK-NEXT:         [DA: Uni] i32 [[VP6:%.*]] = induction-init-step{add} i32 1
; CHECK-NEXT:         [DA: Uni] i32 [[VP7:%.*]] = vector-trip-count i32 1035, UF = 1
; CHECK-NEXT:         [DA: Uni] br [[BB18:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB18]]: # preds: [[BB17]], [[BB19:BB[0-9]+]]
; CHECK-NEXT:         [DA: Div] i32 [[VP__OMP_IV15_LOCAL_0141_1:%.*]] = phi  [ i32 [[VP5]], [[BB17]] ],  [ i32 [[VP_ADD71_1:%.*]], [[BB19]] ]
; CHECK-NEXT:         [DA: Div] float [[VP_CONV_1:%.*]] = sitofp i32 [[VP__OMP_IV15_LOCAL_0141_1]] to float
; CHECK-NEXT:         [DA: Div] float [[VP_MUL22_1:%.*]] = fmul float 2.000000e+00 float [[VP_CONV_1]]
; CHECK-NEXT:         [DA: Div] float [[VP_ADD23_1:%.*]] = fadd float [[VP_MUL22_1]] float 1.000000e+00
; CHECK-NEXT:         [DA: Uni] br i1 [[C0]], [[BB20:BB[0-9]+]], [[BB21:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:          [[BB20]]: # preds: [[BB18]]
; CHECK-NEXT:           [DA: Uni] br [[BB22:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:          [[BB22]]: # preds: [[BB20]], [[NEW_LOOP_LATCH1:new.loop.latch[0-9]+]]
; ***** The crash happened on this phi during fixup, on the VP8 operand. VP8 is uniform
; ***** and should be broadcasted before this use. The broadcast should be with VF=4, see BB16.
; ***** while during fixup we have VF=16, see BB2.
; CHECK-NEXT:           [DA: Div] float [[VP_T5_0_1:%.*]] = phi  [ float [[VP_ADD23_1]], [[BB20]] ],  [ float [[VP8:%.*]], [[NEW_LOOP_LATCH1]] ]
; CHECK-NEXT:           [DA: Uni] br i1 [[C0]], [[INTERMEDIATE_BB1:intermediate.bb[0-9]+]], [[BB23:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:            [[BB23]]: # preds: [[BB22]]
; CHECK-NEXT:             [DA: Uni] br [[BB24:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:            [[BB24]]: # preds: [[BB23]]
; CHECK-NEXT:             [DA: Uni] br i1 [[C0]], [[INTERMEDIATE_BB1]], [[BB25:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:            [[BB25]]: # preds: [[BB24]]
; CHECK-NEXT:             [DA: Uni] float [[VP9:%.*]] = fsub float [[P0]] float 1.000000e+00
; CHECK-NEXT:             [DA: Uni] br [[NEW_LOOP_LATCH1]]
; CHECK-EMPTY:
; CHECK-NEXT:            [[INTERMEDIATE_BB1]]: # preds: [[BB22]], [[BB24]]
; CHECK-NEXT:             [DA: Uni] br [[NEW_LOOP_LATCH1]]
; CHECK-EMPTY:
; CHECK-NEXT:          [[NEW_LOOP_LATCH1]]: # preds: [[INTERMEDIATE_BB1]], [[BB25]]
; ***** uniform VP8 
; CHECK-NEXT:           [DA: Uni] float [[VP8]] = phi  [ float [[VP9]], [[BB25]] ],  [ float undef, [[INTERMEDIATE_BB1]] ]
; CHECK-NEXT:           [DA: Uni] i32 [[VP10:%.*]] = phi  [ i32 0, [[BB25]] ],  [ i32 1, [[INTERMEDIATE_BB1]] ]
; CHECK-NEXT:           [DA: Uni] i1 [[VP11:%.*]] = phi  [ i1 true, [[BB25]] ],  [ i1 false, [[INTERMEDIATE_BB1]] ]
; CHECK-NEXT:           [DA: Uni] br i1 [[VP11]], [[BB22]], [[BB26:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:          [[BB26]]: # preds: [[NEW_LOOP_LATCH1]]
; CHECK-NEXT:           [DA: Uni] br [[BB21]]
;
; Check generated code
; CHECK:  define void @_ZN10Mandelbrot16execute_cpu_partEii_DIR_OMP_PARALLEL_LOOP_2_split154(i1 [[C0]], float [[P0]]) #1 {
; CHECK:       vector.body:
; CHECK:       VPlannedBB29:
; CHECK-NEXT:    [[VEC_PHI300:%.*]] = phi <4 x float> [ [[TMP10:%.*]], %[[VPLANNEDBB270:.*]] ], [ [[BROADCAST_SPLAT0:%.*]], %[[NEW_LOOP_LATCH1:.*]] ]
; CHECK-NEXT:    br i1 [[C0]], label [[VPLANNEDBB310:%.*]], label [[VPLANNEDBB320:%.*]]
; CHECK:       [[NEW_LOOP_LATCH1]]:
; CHECK-NEXT:    [[UNI_PHI350:%.*]] = phi float [ [[TMP11:%.*]], [[VPLANNEDBB340:%.*]] ], [ undef, [[VPLANNEDBB310]] ]
; CHECK-NEXT:    [[UNI_PHI360:%.*]] = phi i32 [ 0, [[VPLANNEDBB340]] ], [ 1, [[VPLANNEDBB310]] ]
; CHECK-NEXT:    [[UNI_PHI370:%.*]] = phi i1 [ true, [[VPLANNEDBB340]] ], [ false, [[VPLANNEDBB310]] ]
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT0:%.*]] = insertelement <4 x float> poison, float [[UNI_PHI350]], i64 0
; CHECK-NEXT:    [[BROADCAST_SPLAT0]] = shufflevector <4 x float> [[BROADCAST_SPLATINSERT0]], <4 x float> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    br i1 [[UNI_PHI370]], label [[VPLANNEDBB290:%.*]], label [[VPLANNEDBB380:%.*]]
;
DIR.OMP.PARALLEL.LOOP.3:
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %DIR.OMP.PARALLEL.LOOP.3
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %omp.inner.for.body
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %DIR.OMP.SIMD.1246

DIR.OMP.SIMD.1246:                                ; preds = %DIR.OMP.SIMD.1
  br label %omp.inner.for.body19

omp.inner.for.body19:                             ; preds = %if.end, %DIR.OMP.SIMD.1246
  %.omp.iv15.local.0141 = phi i32 [ 0, %DIR.OMP.SIMD.1246 ], [ %add71, %if.end ]
  %conv = sitofp i32 %.omp.iv15.local.0141 to float
  %mul22 = fmul fast float 2.0000000e+00, %conv
  %add23 = fadd fast float %mul22, 1.0000000e+00
  br i1 %c, label %region.0, label %for.end

for.end:                                          ; preds = %hir.L.25, %omp.inner.for.body19
  br label %if.end

if.end:                                           ; preds = %for.end
  %add71 = add nuw nsw i32 %.omp.iv15.local.0141, 1
  %exitcond.not = icmp eq i32 %add71, 1035
  br i1 %exitcond.not, label %omp.inner.for.cond17.DIR.OMP.END.SIMD.6.loopexit_crit_edge, label %omp.inner.for.body19

omp.inner.for.cond17.DIR.OMP.END.SIMD.6.loopexit_crit_edge: ; preds = %if.end
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  unreachable

region.0:                                         ; preds = %omp.inner.for.body19
  br label %hir.L.1

hir.L.1:                                          ; preds = %ifmerge.93, %region.0
  %t5.0 = phi float [ %add23, %region.0 ], [ %1, %ifmerge.93 ]
  br i1 %c, label %hir.L.25, label %ifmerge.42

hir.L.25:                                         ; preds = %ifmerge.76, %hir.L.1
  br label %for.end

ifmerge.42:                                       ; preds = %hir.L.1
  br label %ifmerge.76

ifmerge.76:                                       ; preds = %ifmerge.42
  br i1 %c, label %hir.L.25, label %ifmerge.93

ifmerge.93:                                       ; preds = %ifmerge.76
  %1 = fsub fast float %p, 1.0000000e+00
  br label %hir.L.1, !llvm.loop !0
}

attributes #0 = { nounwind }
attributes #1 = { "target-features"="+adx,+aes,+avx,+avx2,+avx512bw,+avx512cd,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+clflushopt,+clwb,+crc32,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+pku,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves" }

!nvvm.annotations = !{}

!0 = distinct !{!0, !1, !2}
!1 = !{!"llvm.loop.mustprogress"}
!2 = !{!"llvm.loop.unroll.disable"}
