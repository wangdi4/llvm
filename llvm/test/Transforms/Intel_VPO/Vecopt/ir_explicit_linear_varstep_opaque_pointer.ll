; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -opaque-pointers -vplan-vec -vplan-force-vf=2 -vplan-entities-dump -vplan-print-after-vpentity-instrs -vplan-dump-induction-init-details -vplan-dump-plan-da -S < %s 2>&1 | FileCheck %s
; RUN: opt -opaque-pointers -passes="vplan-vec" -vplan-force-vf=2 -vplan-entities-dump -vplan-print-after-vpentity-instrs -vplan-dump-induction-init-details -vplan-dump-plan-da -S < %s 2>&1 | FileCheck %s
; REQUIRES: asserts

; CHECK: VPlan IR for: foo:omp.inner.for.body.#1
; CHECK:   i32 [[VP_IND_INIT:%.*]] = induction-init{add, StartVal: ?, EndVal: ?} i32 [[VP_PTR0:%.*]] i32 %step
; CHECK:   i32 [[VP_IND_INIT_STEP:%.*]] = induction-init-step{add} i32 %step
; CHECK:   i32 [[VP_IND_FINAL:%.*]] = induction-final{add} i32 [[VP_PTR0:%.*]] i32 %step
;
; CHECK: Printing Divergence info for foo:omp.inner.for.body.#1
; CHECK:   Divergent: [Shape: Random] i32 [[VP_IND_INIT:%.*]] = induction-init{add, StartVal: ?, EndVal: ?} i32 [[VP_PTR0:%.*]] i32 %step
; CHECK:   Uniform: [Shape: Uniform] i32 [[VP_IND_INIT_STEP:%.*]] = induction-init-step{add} i32 %step
; CHECK:   Uniform: [Shape: Uniform] i32 [[VP_IND_FINAL:%.*]] = induction-final{add} i32 [[VP_PTR0:%.*]] i32 %step
;
; CHECK:      define dso_local void @foo(i32 noundef %step) #0 {
; CHECK:      VPlannedBB:                                      ; preds = %omp.region.entry
; CHECK-NEXT:   [[VP_BCAST_SPLATINSERT:%.*]] = insertelement <2 x i32> poison, i32 %step, i32 0
; CHECK-NEXT:   [[VP_BCAST_SPLAT:%.*]] = shufflevector <2 x i32> [[VP_BCAST_SPLATINSERT]], <2 x i32> poison, <2 x i32> zeroinitializer
; CHECK-NEXT:   br label %VPlannedBB1
; CHECK:      VPlannedBB1:                                      ; preds = %VPlannedBB
; CHECK:        [[VP_LOAD0:%.*]] = load i32, ptr [[VP_Y_LINEAR_PTR:%.*]], align 1
; CHECK:        [[VP_BCAST_SPLAT_MUL:%.*]] = mul <2 x i32> [[VP_BCAST_SPLAT]], <i32 0, i32 1>
; CHECK-NEXT:   [[VP_BCAST_SPLAT_ADD:%.*]] = add <2 x i32> [[VP_IND_START_BCAST_SPLAT:%.*]], [[VP_BCAST_SPLAT_MUL]]
; CHECK-NEXT:   store <2 x i32> [[VP_BCAST_SPLAT_ADD]], ptr [[VP_Y_LINEAR_PTR_VEC:%.*]], align 1
; CHECK-NEXT:   [[VP_STEP_MUL:%.*]] = mul i32 %step, 2
; CHECK-NEXT:   [[VP_IND_STEP_INIT_SPLATINSERT:%.*]] = insertelement <2 x i32> poison, i32 [[VP_STEP_MUL]], i32 0
; CHECK-NEXT:   [[VP_IND_STEP_INIT_SPLAT:%.*]] = shufflevector <2 x i32> [[VP_IND_STEP_INIT_SPLATINSERT]], <2 x i32> poison, <2 x i32> zeroinitializer
; CHECK:      vector.body:                                      ; preds = %vector.body, %VPlannedBB1
; CHECK:        [[VP_VEC_PHI:%.*]] = phi <2 x i32> [ [[VP_BCAST_SPLAT_ADD]], %VPlannedBB1 ], [ [[VP_PTR_NEXT:%.*]], %vector.body ]
; CHECK:        [[VP_PTR_NEXT]] = add <2 x i32> [[VP_VEC_PHI]], [[VP_IND_STEP_INIT_SPLAT]]
; CHECK:        br i1 [[VP_IV_NEXT:%.*]], label %vector.body, label %VPlannedBB10, !llvm.loop !0
; CHECK:      VPlannedBB10:                                     ; preds = %vector.body
; CHECK:        [[VP_STEP_NEXT:%.*]] = mul i32 %step, 10
; CHECK-NEXT:   [[VP_LOAD0_NEXT:%.*]] = add i32 [[VP_LOAD0]], [[VP_STEP_NEXT]]
; CHECK-NEXT:   store i32 [[VP_LOAD0_NEXT]], ptr [[VP_Y_LINEAR_PTR]], align 1
;
; Test verifies that VPlan can consume OMP linear clauses with opaque pointres.

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@x = dso_local global [10 x i32] zeroinitializer, align 16
@y = dso_local global i32 1, align 4

; Function Attrs: noinline nounwind uwtable
define dso_local void @foo(i32 noundef %step) #0 {
entry:
  %y.linear.ptr = alloca i32, align 4
  %i.linear.iv.ptr = alloca i32, align 4
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %entry
  %y.init = load i32, i32* @y, align 4
  store i32 %y.init, i32* %y.linear.ptr, align 4
  br label %omp.region.entry

omp.region.entry:                                 ; preds = %DIR.OMP.SIMD.1
  %i3 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.LINEAR:TYPED"(i32* %y.linear.ptr, i32 0, i32 1, i32 %step), "QUAL.OMP.LINEAR:IV.TYPED"(i32* %i.linear.iv.ptr, i32 0, i32 1, i32 1) ]
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.inner.for.body, %omp.region.entry
  %iv = phi i32 [ 0, %omp.region.entry ], [ %iv.next, %omp.inner.for.body ]
  store i32 %iv, i32* %i.linear.iv.ptr, align 4
  %y = load i32, i32* %y.linear.ptr, align 4
  %i = load i32, i32* %i.linear.iv.ptr, align 4
  %x.ptr = getelementptr inbounds [10 x i32], [10 x i32]* @x, i64 0, i32 %i
  store i32 %y, i32* %x.ptr, align 4
  %iv.next = add nsw i32 %iv, 1
  %cond.exit = icmp sgt i32 10, %iv.next
  br i1 %cond.exit, label %omp.inner.for.body, label %omp.region.exit

omp.region.exit:                                  ; preds = %omp.inner.for.body
  call void @llvm.directive.region.exit(token %i3) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.OMP.END.SIMD.1

DIR.OMP.END.SIMD.1:                               ; preds = %omp.region.exit
  %y.last = load i32, i32* %y.linear.ptr, align 4
  store i32 %y.last, i32* @y, align 4
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %DIR.OMP.END.SIMD.1
  br label %DIR.OMP.END.SIMD.3

DIR.OMP.END.SIMD.3:                               ; preds = %omp.loop.exit
  ret void
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

attributes #0 = { noinline nounwind uwtable "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "frame-pointer"="all" "may-have-openmp-directive"="true" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #1 = { nounwind }
