; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -vplan-vec-scenario="m4;v4;m4" \
; RUN: -disable-output -passes=vplan-vec \
; RUN: -print-after=vplan-vec \
; RUN: -vplan-enable-peeling=0 %s 2>&1 | FileCheck %s

target datalayout = "e-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024"
target triple = "x86_64-unknown-linux-gnu"

define void @test_store(ptr nocapture %ary, i32 %c) {
;
; CHECK-LABEL: @test_store(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label [[PEEL_CHECKZ26:%.*]]
; CHECK:       peel.checkz26:
; CHECK-NEXT:    br label [[PEEL_CHECKV27:%.*]]
; CHECK:       peel.checkv27:
; CHECK-NEXT:    br i1 false, label [[MERGE_BLK22:%.*]], label [[VPLANNEDBB:%.*]]
; CHECK:       VPlannedBB:
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <4 x i32> poison, i32 [[C:%.*]], i64 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <4 x i32> [[BROADCAST_SPLATINSERT]], <4 x i32> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    br label [[VPLANNEDBB1:%.*]]
; CHECK:       VPlannedBB1:
; CHECK-NEXT:    br label [[VPLANNEDBB2:%.*]]
; CHECK:       VPlannedBB2:
; CHECK-NEXT:    [[UNI_PHI:%.*]] = phi i64 [ 0, [[VPLANNEDBB1]] ], [ [[TMP6:%.*]], [[NEW_LATCH:%.*]] ]
; CHECK-NEXT:    [[VEC_PHI:%.*]] = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, [[VPLANNEDBB1]] ], [ [[TMP5:%.*]], [[NEW_LATCH]] ]
; CHECK-NEXT:    [[TMP0:%.*]] = add nuw nsw <4 x i64> [[VEC_PHI]], zeroinitializer
; CHECK-NEXT:    [[DOTEXTRACT_0_:%.*]] = extractelement <4 x i64> [[TMP0]], i32 0
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult <4 x i64> [[VEC_PHI]], <i64 1, i64 1, i64 1, i64 1>
; CHECK-NEXT:    br label [[VPLANNEDBB3:%.*]]
; CHECK:       VPlannedBB3:
; CHECK-NEXT:    [[SCALAR_GEP:%.*]] = getelementptr inbounds i64, ptr [[ARY:%.*]], i64 [[DOTEXTRACT_0_]]
; CHECK-NEXT:    [[TMP2:%.*]] = sext <4 x i32> [[BROADCAST_SPLAT]] to <4 x i64>
; CHECK-NEXT:    [[TMP3:%.*]] = add <4 x i64> [[TMP2]], [[TMP0]]
; CHECK-NEXT:    call void @llvm.masked.store.v4i64.p0(<4 x i64> [[TMP3]], ptr [[SCALAR_GEP]], i32 8, <4 x i1> [[TMP1]])
; CHECK-NEXT:    br label [[NEW_LATCH]]
; CHECK:       new_latch:
; CHECK-NEXT:    [[TMP5]] = add nuw nsw <4 x i64> [[VEC_PHI]], <i64 4, i64 4, i64 4, i64 4>
; CHECK-NEXT:    [[TMP6]] = add nuw nsw i64 [[UNI_PHI]], 4
; CHECK-NEXT:    [[TMP7:%.*]] = icmp ult <4 x i64> [[TMP5]], <i64 1, i64 1, i64 1, i64 1>
; CHECK-NEXT:    [[TMP8:%.*]] = bitcast <4 x i1> [[TMP7]] to i4
; CHECK-NEXT:    [[TMP9:%.*]] = icmp eq i4 [[TMP8]], 0
; CHECK-NEXT:    br i1 [[TMP9]], label [[VPLANNEDBB4:%.*]], label [[VPLANNEDBB2]]
; CHECK:       VPlannedBB4:
; CHECK-NEXT:    br label [[VPLANNEDBB5:%.*]]
; CHECK:       VPlannedBB5:
; CHECK-NEXT:    br label [[MERGE_BLK24:%.*]]
; CHECK:       merge.blk24:
; CHECK-NEXT:    [[UNI_PHI6:%.*]] = phi i64 [ 1, [[VPLANNEDBB5]] ]
; CHECK-NEXT:    br label [[VPLANNEDBB7:%.*]]
; CHECK:       VPlannedBB7:
; CHECK-NEXT:    br i1 false, label [[MERGE_BLK22]], label [[VPLANNEDBB8:%.*]]
; CHECK:       VPlannedBB8:
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT14:%.*]] = insertelement <4 x i32> poison, i32 [[C]], i64 0
; CHECK-NEXT:    [[BROADCAST_SPLAT15:%.*]] = shufflevector <4 x i32> [[BROADCAST_SPLATINSERT14]], <4 x i32> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    br label [[VPLANNEDBB9:%.*]]
; CHECK:       VPlannedBB9:
; CHECK-NEXT:    [[UNI_PHI6IND_START_BCAST_SPLATINSERT:%.*]] = insertelement <4 x i64> poison, i64 [[UNI_PHI6]], i64 0
; CHECK-NEXT:    [[UNI_PHI6IND_START_BCAST_SPLAT:%.*]] = shufflevector <4 x i64> [[UNI_PHI6IND_START_BCAST_SPLATINSERT]], <4 x i64> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP10:%.*]] = add <4 x i64> [[UNI_PHI6IND_START_BCAST_SPLAT]], <i64 0, i64 1, i64 2, i64 3>
; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK:       vector.body:
; CHECK-NEXT:    [[UNI_PHI11:%.*]] = phi i64 [ [[UNI_PHI6]], [[VPLANNEDBB9]] ], [ [[TMP15:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[VEC_PHI12:%.*]] = phi <4 x i64> [ [[TMP10]], [[VPLANNEDBB9]] ], [ [[TMP14:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[SCALAR_GEP13:%.*]] = getelementptr inbounds i64, ptr [[ARY]], i64 [[UNI_PHI11]]
; CHECK-NEXT:    [[TMP11:%.*]] = sext <4 x i32> [[BROADCAST_SPLAT15]] to <4 x i64>
; CHECK-NEXT:    [[TMP12:%.*]] = add <4 x i64> [[TMP11]], [[VEC_PHI12]]
; CHECK-NEXT:    store <4 x i64> [[TMP12]], ptr [[SCALAR_GEP13]], align 8
; CHECK-NEXT:    [[TMP14]] = add nuw nsw <4 x i64> [[VEC_PHI12]], <i64 4, i64 4, i64 4, i64 4>
; CHECK-NEXT:    [[TMP15]] = add nuw nsw i64 [[UNI_PHI11]], 4
; CHECK-NEXT:    [[TMP16:%.*]] = icmp ult i64 [[TMP15]], 1021
; CHECK-NEXT:    br i1 [[TMP16]], label [[VECTOR_BODY]], label [[VPLANNEDBB16:%.*]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK:       VPlannedBB16:
; CHECK-NEXT:    br label [[VPLANNEDBB17:%.*]]
; CHECK:       VPlannedBB17:
; CHECK-NEXT:    br label [[VPLANNEDBB18:%.*]]
; CHECK:       VPlannedBB18:
; CHECK-NEXT:    br i1 false, label [[FINAL_MERGE:%.*]], label [[MERGE_BLK22]]
; CHECK:       merge.blk22:
; CHECK-NEXT:    [[UNI_PHI19:%.*]] = phi i64 [ 1021, [[VPLANNEDBB18]] ], [ 0, [[PEEL_CHECKV27]] ], [ [[UNI_PHI6]], [[VPLANNEDBB7]] ]
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT25:%.*]] = insertelement <4 x i64> poison, i64 [[UNI_PHI19]], i64 0
; CHECK-NEXT:    [[BROADCAST_SPLAT26:%.*]] = shufflevector <4 x i64> [[BROADCAST_SPLATINSERT25]], <4 x i64> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    br label [[VPLANNEDBB20:%.*]]
; CHECK:       VPlannedBB20:
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT32:%.*]] = insertelement <4 x i32> poison, i32 [[C]], i64 0
; CHECK-NEXT:    [[BROADCAST_SPLAT33:%.*]] = shufflevector <4 x i32> [[BROADCAST_SPLATINSERT32]], <4 x i32> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    br label [[VPLANNEDBB21:%.*]]
; CHECK:       VPlannedBB21:
; CHECK-NEXT:    [[TMP17:%.*]] = sub i64 1024, [[UNI_PHI19]]
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT27:%.*]] = insertelement <4 x i64> poison, i64 [[TMP17]], i64 0
; CHECK-NEXT:    [[BROADCAST_SPLAT28:%.*]] = shufflevector <4 x i64> [[BROADCAST_SPLATINSERT27]], <4 x i64> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    br label [[VPLANNEDBB22:%.*]]
; CHECK:       VPlannedBB22:
; CHECK-NEXT:    [[UNI_PHI23:%.*]] = phi i64 [ 0, [[VPLANNEDBB21]] ], [ [[TMP24:%.*]], [[NEW_LATCH17:%.*]] ]
; CHECK-NEXT:    [[VEC_PHI24:%.*]] = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, [[VPLANNEDBB21]] ], [ [[TMP23:%.*]], [[NEW_LATCH17]] ]
; CHECK-NEXT:    [[TMP18:%.*]] = add nuw nsw <4 x i64> [[VEC_PHI24]], [[BROADCAST_SPLAT26]]
; CHECK-NEXT:    [[DOTEXTRACT_0_30:%.*]] = extractelement <4 x i64> [[TMP18]], i32 0
; CHECK-NEXT:    [[TMP19:%.*]] = icmp ult <4 x i64> [[VEC_PHI24]], [[BROADCAST_SPLAT28]]
; CHECK-NEXT:    br label [[VPLANNEDBB29:%.*]]
; CHECK:       VPlannedBB29:
; CHECK-NEXT:    [[SCALAR_GEP31:%.*]] = getelementptr inbounds i64, ptr [[ARY]], i64 [[DOTEXTRACT_0_30]]
; CHECK-NEXT:    [[TMP20:%.*]] = sext <4 x i32> [[BROADCAST_SPLAT33]] to <4 x i64>
; CHECK-NEXT:    [[TMP21:%.*]] = add <4 x i64> [[TMP20]], [[TMP18]]
; CHECK-NEXT:    call void @llvm.masked.store.v4i64.p0(<4 x i64> [[TMP21]], ptr [[SCALAR_GEP31]], i32 8, <4 x i1> [[TMP19]])
; CHECK-NEXT:    br label [[NEW_LATCH17]]
; CHECK:       new_latch17:
; CHECK-NEXT:    [[TMP23]] = add nuw nsw <4 x i64> [[VEC_PHI24]], <i64 4, i64 4, i64 4, i64 4>
; CHECK-NEXT:    [[TMP24]] = add nuw nsw i64 [[UNI_PHI23]], 4
; CHECK-NEXT:    [[TMP25:%.*]] = icmp ult <4 x i64> [[TMP23]], [[BROADCAST_SPLAT28]]
; CHECK-NEXT:    [[TMP26:%.*]] = bitcast <4 x i1> [[TMP25]] to i4
; CHECK-NEXT:    [[TMP27:%.*]] = icmp eq i4 [[TMP26]], 0
; CHECK-NEXT:    br i1 [[TMP27]], label [[VPLANNEDBB34:%.*]], label [[VPLANNEDBB22]]
; CHECK:       VPlannedBB34:
; CHECK-NEXT:    br label [[VPLANNEDBB35:%.*]]
; CHECK:       VPlannedBB35:
; CHECK-NEXT:    br label [[FINAL_MERGE]]
; CHECK:       final.merge:
; CHECK-NEXT:    [[UNI_PHI36:%.*]] = phi i64 [ 1024, [[VPLANNEDBB35]] ], [ 1021, [[VPLANNEDBB18]] ]
; CHECK-NEXT:    br label [[FOR_END:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY:%.*]] ]
; CHECK-NEXT:    [[PTR:%.*]] = getelementptr inbounds i64, ptr [[ARY]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[CC:%.*]] = sext i32 [[C]] to i64
; CHECK-NEXT:    [[ADD:%.*]] = add i64 [[CC]], [[INDVARS_IV]]
; CHECK-NEXT:    store i64 [[ADD]], ptr [[PTR]], align 8
; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK-NEXT:    [[CMP:%.*]] = icmp ult i64 [[INDVARS_IV_NEXT]], 1024
; CHECK-NEXT:    br label [[FOR_BODY]]
; CHECK:       for.end:
; CHECK-NEXT:    ret void
;
entry:
  %entry.region = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %for.body

for.body:
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %ptr = getelementptr inbounds i64, ptr %ary, i64 %indvars.iv
  %cc = sext i32 %c to i64
  %add = add i64 %cc, %indvars.iv
  store i64 %add, ptr %ptr, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %cmp = icmp ult i64 %indvars.iv.next, 1024
  br i1 %cmp, label %for.body, label %for.end

for.end:
  call void @llvm.directive.region.exit(token %entry.region) [ "DIR.OMP.END.SIMD"() ]
  ret void
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
