; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; Test that VPlan is able to import masked max reduction into VPEntities framework.
; TODO: Currently min/max reductions are not supported in mixed CG without VPEntity instructions. Update test
; with CHECKs for CG when implemented.

; Incoming HIR into vectorizer
; BEGIN REGION { }
;       %entry.region = @llvm.directive.region.entry(); [ DIR.VPO.AUTO.VEC() ]
;
;       + DO i1 = 0, sext.i32.i64(%N) + -1, 1   <DO_LOOP>  <MAX_TC_EST = 1000>
;       |   if ((@B)[0][i1] > 0.000000e+00)
;       |   {
;       |      %1 = (@C)[0][i1];
;       |      %tmax.015 = (%1 > %tmax.015) ? %1 : %tmax.015; <Safe Reduction>
;       |   }
;       + END LOOP
;
;       @llvm.directive.region.exit(%entry.region); [ DIR.VPO.END.AUTO.VEC() ]
; END REGION

; RUN: opt -hir-ssa-deconstruction -hir-temp-cleanup -hir-vec-dir-insert -VPlanDriverHIR -disable-output -vplan-print-after-vpentity-instrs < %s 2>&1 | FileCheck %s

; Check that reduction is imported and lowered into corresponding VPInstructions.

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@B = common dso_local local_unnamed_addr global [1000 x float] zeroinitializer, align 16
@C = common dso_local local_unnamed_addr global [1000 x float] zeroinitializer, align 16

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local float @ifmax1(i32 %N) local_unnamed_addr #0 {
;
; CHECK-LABEL:  After insertion VPEntities instructions:
; CHECK-NEXT:    [[BB0:BB[0-9]+]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB1:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]:
; CHECK-NEXT:     i64 [[VP0:%.*]] = sext i32 [[N0:%.*]] to i64
; CHECK-NEXT:     i64 [[VP1:%.*]] = add i64 [[VP0]] i64 -1
; CHECK-NEXT:     float [[VP__RED_INIT:%.*]] = reduction-init float [[TMAX_0150:%.*]]
; CHECK-NEXT:     i64 [[VP__IND_INIT:%.*]] = induction-init{add} i64 0 i64 1
; CHECK-NEXT:     i64 [[VP__IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:    SUCCESSORS(1):[[BB2:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]:
; CHECK-NEXT:     float [[VP2:%.*]] = phi  [ float [[VP__RED_INIT]], [[BB1]] ],  [ float [[VP3:%.*]], [[BB3:BB[0-9]+]] ]
; CHECK-NEXT:     i64 [[VP4:%.*]] = phi  [ i64 [[VP__IND_INIT]], [[BB1]] ],  [ i64 [[VP5:%.*]], [[BB3]] ]
; CHECK-NEXT:     float* [[VP6:%.*]] = getelementptr inbounds [1000 x float]* @B i64 0 i64 [[VP4]]
; CHECK-NEXT:     float [[VP7:%.*]] = load float* [[VP6]]
; CHECK-NEXT:     i1 [[VP8:%.*]] = fcmp float [[VP7]] float 0.000000e+00
; CHECK-NEXT:    SUCCESSORS(2):[[BB4:BB[0-9]+]](i1 [[VP8]]), [[BB3]](!i1 [[VP8]])
; CHECK-NEXT:    PREDECESSORS(2): [[BB1]] [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB4]]:
; CHECK-NEXT:       float [[VP9:%.*]] = phi  [ float [[VP2]], [[BB2]] ]
; CHECK-NEXT:       float* [[VP10:%.*]] = getelementptr inbounds [1000 x float]* @C i64 0 i64 [[VP4]]
; CHECK-NEXT:       float [[VP11:%.*]] = load float* [[VP10]]
; CHECK-NEXT:       i1 [[VP12:%.*]] = fcmp float [[VP11]] float [[VP9]]
; CHECK-NEXT:       float [[VP13:%.*]] = select i1 [[VP12]] float [[VP11]] float [[VP9]]
; CHECK-NEXT:      SUCCESSORS(1):[[BB3]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]:
; CHECK-NEXT:     float [[VP3]] = phi  [ float [[VP13]], [[BB4]] ],  [ float [[VP2]], [[BB2]] ]
; CHECK-NEXT:     i64 [[VP5]] = add i64 [[VP4]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     i1 [[VP14:%.*]] = icmp i64 [[VP5]] i64 [[VP1]]
; CHECK-NEXT:    SUCCESSORS(2):[[BB2]](i1 [[VP14]]), [[BB5:BB[0-9]+]](!i1 [[VP14]])
; CHECK-NEXT:    PREDECESSORS(2): [[BB4]] [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]:
; CHECK-NEXT:     float [[VP__RED_FINAL:%.*]] = reduction-final{fmax} float [[VP3]]
; CHECK-NEXT:     i64 [[VP__IND_FINAL:%.*]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:    SUCCESSORS(1):[[BB6:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB5]]
;
entry:
  %cmp14 = icmp sgt i32 %N, 0
  br i1 %cmp14, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = sext i32 %N to i64
  br label %for.body

for.cond.cleanup.loopexit:                        ; preds = %for.inc
  %tmax.1.lcssa = phi float [ %tmax.1, %for.inc ]
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  %tmax.0.lcssa = phi float [ 1.000000e+01, %entry ], [ %tmax.1.lcssa, %for.cond.cleanup.loopexit ]
  ret float %tmax.0.lcssa

for.body:                                         ; preds = %for.inc, %for.body.preheader
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.inc ]
  %tmax.015 = phi float [ 0xFFF0000000000000, %for.body.preheader ], [ %tmax.1, %for.inc ]
  %arrayidx = getelementptr inbounds [1000 x float], [1000 x float]* @B, i64 0, i64 %indvars.iv, !intel-tbaa !2
  %0 = load float, float* %arrayidx, align 4, !tbaa !2
  %cmp1 = fcmp ogt float %0, 0.000000e+00
  br i1 %cmp1, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body
  %arrayidx5 = getelementptr inbounds [1000 x float], [1000 x float]* @C, i64 0, i64 %indvars.iv, !intel-tbaa !2
  %1 = load float, float* %arrayidx5, align 4, !tbaa !2
  %max.cmp = fcmp ogt float %1, %tmax.015
  %add6 = select fast i1 %max.cmp, float %1, float %tmax.015
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then
  %tmax.1 = phi float [ %add6, %if.then ], [ %tmax.015, %for.body ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond, label %for.cond.cleanup.loopexit, label %for.body
}

attributes #0 = { norecurse nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "pre_loopopt" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!2 = !{!3, !4, i64 0}
!3 = !{!"array@_ZTSA1000_f", !4, i64 0}
!4 = !{!"float", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}

