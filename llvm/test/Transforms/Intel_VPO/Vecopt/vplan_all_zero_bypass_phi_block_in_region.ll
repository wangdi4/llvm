; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; REQUIRES: asserts
; RUN: opt < %s -vplan-func-vec -enable-vplan-func-vec-all-zero-bypass-loops -print-after-vplan-func-vec-all-zero-bypass -disable-output -S 2>&1 | FileCheck %s
; RUN: opt < %s -passes="vplan-func-vec" -enable-vplan-func-vec-all-zero-bypass-loops -print-after-vplan-func-vec-all-zero-bypass -disable-output -S 2>&1 | FileCheck %s

; This test checks to make sure that a maximal region is formed around the loop starting at BB5. This region starts at BB1 and since the
; block-predicate for BB1 and BB5 is the same, then a redundant loop region is not generated.

declare i64 @llvm.vplan.laneid()

; Function Attrs: nounwind uwtable
define dso_local void @foo(i32* nocapture readonly %a, i32* nocapture readonly %b, i32* nocapture %c, i32 %x, i32 %y) local_unnamed_addr #0 {
; CHECK-LABEL:  VPlan after all zero bypass:
; CHECK-NEXT:  VPlan IR for: foo
; CHECK-NEXT:    [[BB0:BB[0-9]+]]:
; CHECK-NEXT:     [DA: Div] i32 [[VP_LANE:%.*]] = induction-init{add} i32 0 i32 1
; CHECK-NEXT:     [DA: Uni] i1 [[VP_CMP9:%.*]] = icmp eq i32 [[Y0:%.*]] i32 [[X0:%.*]]
; CHECK-NEXT:     [DA: Uni] i32 [[VP_MUL11:%.*]] = mul i32 [[Y0]] i32 [[X0]]
; CHECK-NEXT:     [DA: Div] i32* [[VP_ARRAYIDX:%.*]] = getelementptr inbounds i32* [[A0:%.*]] i32 [[VP_LANE]]
; CHECK-NEXT:     [DA: Div] i32 [[VP0:%.*]] = load i32* [[VP_ARRAYIDX]]
; CHECK-NEXT:     [DA: Div] i1 [[VP_CMP1:%.*]] = icmp sgt i32 [[VP0]] i32 7
; CHECK-NEXT:    SUCCESSORS(1):all.zero.bypass.begin13
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    all.zero.bypass.begin13:
; CHECK-NEXT:     [DA: Uni] i1 [[VP_ALL_ZERO_CHECK:%.*]] = all-zero-check i1 [[VP_CMP1]]
; CHECK-NEXT:    SUCCESSORS(2):all.zero.bypass.end15(i1 [[VP_ALL_ZERO_CHECK]]), [[BB1:BB[0-9]+]](!i1 [[VP_ALL_ZERO_CHECK]])
; CHECK-NEXT:    PREDECESSORS(1): [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB1]]:
; CHECK-NEXT:       [DA: Div] i1 [[VP1:%.*]] = block-predicate i1 [[VP_CMP1]]
; CHECK-NEXT:       [DA: Div] i32* [[VP_ARRAYIDX3:%.*]] = getelementptr inbounds i32* [[B0:%.*]] i32 [[VP_LANE]]
; CHECK-NEXT:       [DA: Div] i32 [[VP2:%.*]] = load i32* [[VP_ARRAYIDX3]]
; CHECK-NEXT:       [DA: Div] i1 [[VP_CMP4:%.*]] = icmp sgt i32 [[VP2]] i32 8
; CHECK-NEXT:      SUCCESSORS(1):[[BB2:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(1): all.zero.bypass.begin13
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB2]]:
; CHECK-NEXT:       [DA: Div] i1 [[VP_BB2_BR_VP_CMP4:%.*]] = and i1 [[VP_CMP1]] i1 [[VP_CMP4]]
; CHECK-NEXT:      SUCCESSORS(1):[[BB3:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB3]]:
; CHECK-NEXT:       [DA: Div] i1 [[VP3:%.*]] = block-predicate i1 [[VP_BB2_BR_VP_CMP4]]
; CHECK-NEXT:       [DA: Uni] i32 [[VP_DIV:%.*]] = sdiv i32 [[X0]] i32 [[Y0]]
; CHECK-NEXT:       [DA: Div] i32* [[VP_ARRAYIDX7:%.*]] = getelementptr inbounds i32* [[C0:%.*]] i32 [[VP_LANE]]
; CHECK-NEXT:       [DA: Div] store i32 [[VP_DIV]] i32* [[VP_ARRAYIDX7]]
; CHECK-NEXT:      SUCCESSORS(1):[[BB4:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB4]]:
; CHECK-NEXT:       [DA: Div] i1 [[VP4:%.*]] = block-predicate i1 [[VP_CMP1]]
; CHECK-NEXT:       [DA: Div] i32* [[VP_ARRAYIDX13:%.*]] = getelementptr inbounds i32* [[C0]] i32 [[VP_LANE]]
; CHECK-NEXT:      SUCCESSORS(1):[[BB5:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB5]]:
; CHECK-NEXT:       [DA: Uni] i32 [[VP_J_033:%.*]] = phi  [ i32 0, [[BB4]] ],  [ i32 [[VP_INC:%.*]], [[BB6:BB[0-9]+]] ]
; CHECK-NEXT:       [DA: Div] i1 [[VP5:%.*]] = block-predicate i1 [[VP_CMP1]]
; CHECK-NEXT:      SUCCESSORS(1):[[BB7:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(2): [[BB4]] [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB7]]:
; CHECK-NEXT:       [DA: Div] i1 [[VP_BB6_BR_VP_CMP9:%.*]] = and i1 [[VP_CMP1]] i1 [[VP_CMP9]]
; CHECK-NEXT:      SUCCESSORS(1):[[BB8:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB8]]:
; CHECK-NEXT:       [DA: Div] i1 [[VP6:%.*]] = block-predicate i1 [[VP_BB6_BR_VP_CMP9]]
; CHECK-NEXT:       [DA: Div] store i32 [[VP_MUL11]] i32* [[VP_ARRAYIDX13]]
; CHECK-NEXT:      SUCCESSORS(1):[[BB6]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB7]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB6]]:
; CHECK-NEXT:       [DA: Div] i1 [[VP7:%.*]] = block-predicate i1 [[VP_CMP1]]
; CHECK-NEXT:       [DA: Uni] i32 [[VP_INC]] = add i32 [[VP_J_033]] i32 1
; CHECK-NEXT:       [DA: Uni] i1 [[VP_EXITCOND:%.*]] = icmp eq i32 [[VP_INC]] i32 256
; CHECK-NEXT:       [DA: Uni] i1 [[VP8:%.*]] = all-zero-check i1 [[VP_CMP1]]
; CHECK-NEXT:       [DA: Uni] i1 [[VP9:%.*]] = or i1 [[VP8]] i1 [[VP_EXITCOND]]
; CHECK-NEXT:      SUCCESSORS(2):[[BB9:BB[0-9]+]](i1 [[VP9]]), [[BB5]](!i1 [[VP9]])
; CHECK-NEXT:      PREDECESSORS(1): [[BB8]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB9]]:
; CHECK-NEXT:       [DA: Div] i1 [[VP10:%.*]] = block-predicate i1 [[VP_CMP1]]
; CHECK-NEXT:      SUCCESSORS(1):all.zero.bypass.end15
; CHECK-NEXT:      PREDECESSORS(1): [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:    all.zero.bypass.end15:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB10:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB9]] all.zero.bypass.begin13
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB10]]:
; CHECK-NEXT:     [DA: Div] void [[VP11:%.*]] = ret
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): all.zero.bypass.end15
;
; Loop bypass region is not created here because there is another outer region beginning at BB1 under the same all-zero condition.
;       (D)  entry___
;           /        |
;       if.then      |
;        /    |      |
;   if.then5  |      |
;        \    |      |
;        if.end      |
;           |        |
;   (U) for.body<--  |
;         /   |   |  |
;   if.then10 |   |  |
;         \   |   |  |
;        for.inc__|  |
;           |        |
;        for.end     |
;           |        |
;          exit<------
entry:
  %lane = call i64 @llvm.vplan.laneid()
  %cmp9 = icmp eq i32 %y, %x
  %mul11 = mul nsw i32 %y, %x
  %arrayidx = getelementptr inbounds i32, i32* %a, i64 %lane
  %0 = load i32, i32* %arrayidx, align 4
  %cmp1 = icmp sgt i32 %0, 7
  br i1 %cmp1, label %if.then, label %exit

if.then:
  %arrayidx3 = getelementptr inbounds i32, i32* %b, i64 %lane
  %1 = load i32, i32* %arrayidx3, align 4
  %cmp4 = icmp sgt i32 %1, 8
  br i1 %cmp4, label %if.then5, label %if.end

if.then5:
  %div = sdiv i32 %x, %y
  %arrayidx7 = getelementptr inbounds i32, i32* %c, i64 %lane
  store i32 %div, i32* %arrayidx7, align 4
  br label %if.end

if.end:
  %arrayidx13 = getelementptr inbounds i32, i32* %c, i64 %lane
  br label %for.body

for.body:
  %j.033 = phi i32 [ 0, %if.end ], [ %inc, %for.inc ]
  br i1 %cmp9, label %if.then10, label %for.inc

if.then10:
  store i32 %mul11, i32* %arrayidx13, align 4
  br label %for.inc

for.inc:
  %inc = add nuw nsw i32 %j.033, 1
  %exitcond = icmp eq i32 %inc, 256
  br i1 %exitcond, label %for.end, label %for.body

for.end:
  br label %exit

exit:
  ret void
}
