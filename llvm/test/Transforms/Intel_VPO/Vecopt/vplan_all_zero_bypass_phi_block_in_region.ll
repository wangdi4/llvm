; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; REQUIRES: asserts
; RUN: opt -opaque-pointers=0 < %s -passes="vplan-func-vec" -enable-vplan-func-vec-all-zero-bypass-loops -print-after-vplan-func-vec-all-zero-bypass -disable-output -S 2>&1 | FileCheck %s

; Previously, this test checked to make sure that a maximal region was formed around the loop starting at BB5.
; The region started at BB1 because during loop region collection, the single predecessor chain was traversed
; while any block-predicate calculations or block-predicates themselves were isStricterOrEqualTo the block-
; predicate of the loop preheader. During that traversal, each block would be added to the region. This lead
; to some potential stability problems because in some cases regions started to overlap one another. For now,
; all-zero bypass was changed to be more conservative and not extend regions "upward". Further testing is needed
; to determine how to properly extend regions in these cases and for now stability is favored over this optimization.
; An alternate approach would be to detect loop regions that are nested in non-loop regions under the same predicate
; and just throw them away. This could be done during non-loop region collection.

declare i64 @llvm.vplan.laneid()

; Function Attrs: nounwind uwtable
define dso_local void @foo(i32* nocapture readonly %a, i32* nocapture readonly %b, i32* nocapture %c, i32 %x, i32 %y) local_unnamed_addr #0 {
; CHECK-LABEL:  VPlan after all-zero bypass for VPlan Function vectorization:
; CHECK-NEXT:  VPlan IR for: foo
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Div] i64 [[VP_LANE:%.*]] = induction-init{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Uni] i1 [[VP_CMP9:%.*]] = icmp eq i32 [[Y0:%.*]] i32 [[X0:%.*]]
; CHECK-NEXT:     [DA: Uni] i32 [[VP_MUL11:%.*]] = mul i32 [[Y0]] i32 [[X0]]
; CHECK-NEXT:     [DA: Div] i32* [[VP_ARRAYIDX:%.*]] = getelementptr inbounds i32* [[A0:%.*]] i64 [[VP_LANE]]
; CHECK-NEXT:     [DA: Div] i32 [[VP0:%.*]] = load i32* [[VP_ARRAYIDX]]
; CHECK-NEXT:     [DA: Div] i1 [[VP_CMP1:%.*]] = icmp sgt i32 [[VP0]] i32 7
; CHECK-NEXT:     [DA: Uni] br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     [DA: Div] i1 [[VP1:%.*]] = block-predicate i1 [[VP_CMP1]]
; CHECK-NEXT:     [DA: Div] i32* [[VP_ARRAYIDX3:%.*]] = getelementptr inbounds i32* [[B0:%.*]] i64 [[VP_LANE]]
; CHECK-NEXT:     [DA: Div] i32 [[VP2:%.*]] = load i32* [[VP_ARRAYIDX3]]
; CHECK-NEXT:     [DA: Div] i1 [[VP_CMP4:%.*]] = icmp sgt i32 [[VP2]] i32 8
; CHECK-NEXT:     [DA: Uni] br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]]
; CHECK-NEXT:     [DA: Div] i1 [[VP_BB2_BR_VP_CMP4:%.*]] = select i1 [[VP_CMP1]] i1 [[VP_CMP4]] i1 false
; CHECK-NEXT:     [DA: Uni] br [[BB3:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: [[BB2]]
; CHECK-NEXT:     [DA: Div] i1 [[VP3:%.*]] = block-predicate i1 [[VP_BB2_BR_VP_CMP4]]
; CHECK-NEXT:     [DA: Uni] i32 [[VP_DIV:%.*]] = sdiv i32 [[X0]] i32 [[Y0]]
; CHECK-NEXT:     [DA: Div] i32* [[VP_ARRAYIDX7:%.*]] = getelementptr inbounds i32* [[C0:%.*]] i64 [[VP_LANE]]
; CHECK-NEXT:     [DA: Div] store i32 [[VP_DIV]] i32* [[VP_ARRAYIDX7]]
; CHECK-NEXT:     [DA: Uni] br all.zero.bypass.begin13
; CHECK-EMPTY:
; CHECK-NEXT:    all.zero.bypass.begin13: # preds: [[BB3]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP_ALL_ZERO_CHECK:%.*]] = all-zero-check i1 [[VP_CMP1]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP_ALL_ZERO_CHECK]], all.zero.bypass.end15, [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB4]]: # preds: all.zero.bypass.begin13
; CHECK-NEXT:       [DA: Div] i1 [[VP4:%.*]] = block-predicate i1 [[VP_CMP1]]
; CHECK-NEXT:       [DA: Div] i32* [[VP_ARRAYIDX13:%.*]] = getelementptr inbounds i32* [[C0]] i64 [[VP_LANE]]
; CHECK-NEXT:       [DA: Uni] br [[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB5]]: # preds: [[BB6:BB[0-9]+]], [[BB4]]
; CHECK-NEXT:       [DA: Uni] i32 [[VP_J_033:%.*]] = phi  [ i32 0, [[BB4]] ],  [ i32 [[VP_INC:%.*]], [[BB6]] ]
; CHECK-NEXT:       [DA: Div] i1 [[VP5:%.*]] = block-predicate i1 [[VP_CMP1]]
; CHECK-NEXT:       [DA: Uni] br [[BB7:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB7]]: # preds: [[BB5]]
; CHECK-NEXT:       [DA: Div] i1 [[VP_BB6_BR_VP_CMP9:%.*]] = select i1 [[VP_CMP1]] i1 [[VP_CMP9]] i1 false
; CHECK-NEXT:       [DA: Uni] br [[BB8:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB8]]: # preds: [[BB7]]
; CHECK-NEXT:       [DA: Div] i1 [[VP6:%.*]] = block-predicate i1 [[VP_BB6_BR_VP_CMP9]]
; CHECK-NEXT:       [DA: Div] store i32 [[VP_MUL11]] i32* [[VP_ARRAYIDX13]]
; CHECK-NEXT:       [DA: Uni] br [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB6]]: # preds: [[BB8]]
; CHECK-NEXT:       [DA: Div] i1 [[VP7:%.*]] = block-predicate i1 [[VP_CMP1]]
; CHECK-NEXT:       [DA: Uni] i32 [[VP_INC]] = add i32 [[VP_J_033]] i32 1
; CHECK-NEXT:       [DA: Uni] i1 [[VP_EXITCOND:%.*]] = icmp eq i32 [[VP_INC]] i32 256
; CHECK-NEXT:       [DA: Uni] i1 [[VP8:%.*]] = all-zero-check i1 [[VP_CMP1]]
; CHECK-NEXT:       [DA: Uni] i1 [[VP9:%.*]] = or i1 [[VP8]] i1 [[VP_EXITCOND]]
; CHECK-NEXT:       [DA: Uni] br i1 [[VP9]], [[BB9:BB[0-9]+]], [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB9]]: # preds: [[BB6]]
; CHECK-NEXT:       [DA: Div] i1 [[VP10:%.*]] = block-predicate i1 [[VP_CMP1]]
; CHECK-NEXT:       [DA: Uni] br all.zero.bypass.end15
; CHECK-EMPTY:
; CHECK-NEXT:    all.zero.bypass.end15: # preds: [[BB9]], all.zero.bypass.begin13
; CHECK-NEXT:     [DA: Uni] br [[BB10:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB10]]: # preds: all.zero.bypass.end15
; CHECK-NEXT:     [DA: Div] ret
; CHECK-NEXT:     [DA: Uni] br <External Block>
;
; Loop bypass region is not created here because there is another outer region beginning at BB1 under the same all-zero condition.
;       (D)  entry___
;           /        |
;       if.then      |
;        /    |      |
;   if.then5  |      |
;        \    |      |
;        if.end      |
;           |        |
;   (U) for.body<--  |
;         /   |   |  |
;   if.then10 |   |  |
;         \   |   |  |
;        for.inc__|  |
;           |        |
;        for.end     |
;           |        |
;          exit<------
entry:
  %lane = call i64 @llvm.vplan.laneid()
  %cmp9 = icmp eq i32 %y, %x
  %mul11 = mul nsw i32 %y, %x
  %arrayidx = getelementptr inbounds i32, i32* %a, i64 %lane
  %0 = load i32, i32* %arrayidx, align 4
  %cmp1 = icmp sgt i32 %0, 7
  br i1 %cmp1, label %if.then, label %exit

if.then:
  %arrayidx3 = getelementptr inbounds i32, i32* %b, i64 %lane
  %1 = load i32, i32* %arrayidx3, align 4
  %cmp4 = icmp sgt i32 %1, 8
  br i1 %cmp4, label %if.then5, label %if.end

if.then5:
  %div = sdiv i32 %x, %y
  %arrayidx7 = getelementptr inbounds i32, i32* %c, i64 %lane
  store i32 %div, i32* %arrayidx7, align 4
  br label %if.end

if.end:
  %arrayidx13 = getelementptr inbounds i32, i32* %c, i64 %lane
  br label %for.body

for.body:
  %j.033 = phi i32 [ 0, %if.end ], [ %inc, %for.inc ]
  br i1 %cmp9, label %if.then10, label %for.inc

if.then10:
  store i32 %mul11, i32* %arrayidx13, align 4
  br label %for.inc

for.inc:
  %inc = add nuw nsw i32 %j.033, 1
  %exitcond = icmp eq i32 %inc, 256
  br i1 %exitcond, label %for.end, label %for.body

for.end:
  br label %exit

exit:
  ret void
}
