; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; struct str {
;   int a;
;   str() {}
; };
;
; int foo()
; {
;    str x;
; #pragma omp simd lastprivate(x)
;   for (int i = 0; i < 10000; ++i) {
;     x.a = i;
;   }
;  return x.a;
; }

; RUN: opt -S -passes=vplan-vec -vplan-force-vf=2 -vplan-vec-scenario="n0;v2;m2" < %s 2>&1 | FileCheck %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.str = type { i32 }

; Function Attrs: nounwind uwtable
define dso_local i32 @_Z3foov() local_unnamed_addr {
; CHECK:  VPlannedBB18:
; CHECK-NEXT:    [[TMP20:%.*]] = bitcast <2 x i1> [[TMP12:%.*]] to i2
; CHECK-NEXT:    [[CTLZ0:%.*]] = call i2 @llvm.ctlz.i2(i2 [[TMP20]], i1 true)
; CHECK-NEXT:    [[TMP21:%.*]] = sub i2 1, [[CTLZ0]]
; CHECK-NEXT:    [[PRIV_EXTRACT0:%.*]] = extractelement <2 x ptr> [[DOTVEC_BASE_ADDR0:%.*]], i2 [[TMP21]]
; CHECK-NEXT:    call void @_ZTS3str.omp.copy_assign(ptr [[X_LPRIV0:%.*]], ptr [[PRIV_EXTRACT0]])
;
DIR.OMP.SIMD.115:
  %x.lpriv = alloca %struct.str, align 4
  %i.linear.iv = alloca i32, align 4
  %x = alloca %struct.str, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %x)
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %DIR.OMP.SIMD.115
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.LASTPRIVATE:NONPOD.TYPED"(ptr %x.lpriv, %struct.str zeroinitializer, i32 1, ptr @_ZTS3str.omp.def_constr, ptr @_ZTS3str.omp.copy_assign, ptr @_ZTS3str.omp.destr), "QUAL.OMP.LINEAR:IV.TYPED"(ptr %i.linear.iv, i32 0, i32 1, i32 1) ]
  br label %DIR.OMP.SIMD.2

DIR.OMP.SIMD.2:                                   ; preds = %DIR.OMP.SIMD.1
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %DIR.OMP.SIMD.2, %omp.inner.for.body
  %.omp.iv.local.010 = phi i32 [ 0, %DIR.OMP.SIMD.2 ], [ %add1, %omp.inner.for.body ]
  %add1 = add nuw nsw i32 %.omp.iv.local.010, 1
  %exitcond.not = icmp eq i32 %add1, 10000
  br i1 %exitcond.not, label %DIR.OMP.END.SIMD.216, label %omp.inner.for.body

DIR.OMP.END.SIMD.216:                             ; preds = %omp.inner.for.body
  store i32 9999, ptr %x.lpriv, align 4
  br label %DIR.OMP.END.SIMD.3

DIR.OMP.END.SIMD.3:                               ; preds = %DIR.OMP.END.SIMD.216
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.OMP.END.SIMD.4

DIR.OMP.END.SIMD.4:                               ; preds = %DIR.OMP.END.SIMD.3
  call void @_ZTS3str.omp.copy_assign(ptr nonnull %x, ptr nonnull %x.lpriv)
  %1 = load i32, ptr %x, align 4
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %x)
  ret i32 %1
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn mustprogress
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture)

; Function Attrs: nounwind
declare token @llvm.directive.region.entry()

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token)

; Function Attrs: nofree norecurse nosync nounwind readnone uwtable willreturn mustprogress
declare ptr @_ZTS3str.omp.def_constr(ptr readnone returned %x) section ".text.startup"

; Function Attrs: nofree norecurse nosync nounwind uwtable willreturn mustprogress
declare void @_ZTS3str.omp.copy_assign(ptr nocapture %x, ptr nocapture readonly %0)


; Function Attrs: nofree norecurse nosync nounwind readnone uwtable willreturn mustprogress
declare void @_ZTS3str.omp.destr(ptr nocapture %x) section ".text.startup"

; Function Attrs: argmemonly nofree nosync nounwind willreturn mustprogress
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture)
