; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; Checks whether MinMaxIdiomsInputIteratorHIR works properly.
; MinMaxIdiomsInputIteratorHIR should skip VConflict idiom and process only Min/Max
; idiom.

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; REQUIRES: asserts
; RUN: opt -S -mattr=+avx512vl,+avx512cd -hir-ssa-deconstruction -hir-temp-cleanup -hir-vec-dir-insert -enable-mmindex=1 -disable-nonlinear-mmindex=1 -enable-vconflict-idiom -vplan-entities-dump -vplan-print-after-vpentity-instrs -hir-vplan-vec -vplan-force-vf=4 < %s 2>&1 | FileCheck %s

; Function Attrs: nofree norecurse nounwind uwtable mustprogress
define dso_local void @_Z3foo1PiS_S_S_S_S_S_(i32* noalias nocapture readonly %A, i32* noalias nocapture readonly %B, i32* noalias nocapture %C, i32* noalias nocapture readonly %D, i32* noalias nocapture %E, i32* noalias nocapture readonly %F, i32* noalias nocapture %G) local_unnamed_addr #0 {
; CHECK:  Reduction list
; CHECK-NEXT:   signed (SIntMin) Start: i32 [[MIN_VALUE1_0590:%.*]] Exit: i32 [[VP10:%.*]]
; CHECK-NEXT:    Linked values: i32 [[VP11:%.*]], i32 [[VP10]], i32 [[VP__RED_INIT:%.*]], i32 [[VP__RED_FINAL:%.*]],
; CHECK-EMPTY:
; CHECK-NEXT:   signed (SIntMin) Start: i64 [[INDEX1_0580:%.*]] Exit: i64 [[VP12:%.*]]
; CHECK-NEXT:    Linked values: i64 [[VP13:%.*]], i64 [[VP12]], i64 [[VP__RED_INIT_1:%.*]], i64 [[VP__RED_FINAL_1:%.*]],
; CHECK-NEXT:   Parent exit: i32 [[VP10]]
; CHECK-NEXT:   signed (SIntMin) Start: i32 [[MIN_VALUE3_0550:%.*]] Exit: i32 [[VP14:%.*]]
; CHECK-NEXT:    Linked values: i32 [[VP15:%.*]], i32 [[VP14]], i32 [[VP__RED_INIT_2:%.*]], i32 [[VP__RED_FINAL_2:%.*]],
; CHECK-EMPTY:
; CHECK-NEXT:   signed (SIntMin) Start: i64 [[INDEX3_0560:%.*]] Exit: i64 [[VP16:%.*]]
; CHECK-NEXT:    Linked values: i64 [[VP17:%.*]], i64 [[VP16]], i64 [[VP__RED_INIT_3:%.*]], i64 [[VP__RED_FINAL_3:%.*]],
; CHECK-NEXT:   Parent exit: i32 [[VP14]]
;
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %spec.select.lcssa = phi i64 [ %spec.select, %for.body ]
  %spec.select54.lcssa = phi i32 [ %spec.select54, %for.body ]
  %.lcssa63 = phi i32 [ %6, %for.body ]
  %.lcssa = phi i64 [ %7, %for.body ]
  %sub = add nsw i64 %spec.select.lcssa, -1
  %ptridx25 = getelementptr inbounds i32, i32* %E, i64 %sub
  store i32 %spec.select54.lcssa, i32* %ptridx25, align 4
  %sub26 = add nsw i64 %.lcssa, -3
  %ptridx27 = getelementptr inbounds i32, i32* %E, i64 %sub26
  store i32 %.lcssa63, i32* %ptridx27, align 4
  ret void

for.body:                                         ; preds = %entry, %for.body
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %min_value1.059 = phi i32 [ 0, %entry ], [ %spec.select54, %for.body ]
  %index1.058 = phi i64 [ 0, %entry ], [ %spec.select, %for.body ]
  %index3.056 = phi i64 [ 0, %entry ], [ %7, %for.body ]
  %min_value3.055 = phi i32 [ 0, %entry ], [ %6, %for.body ]
  ; VConflict Idiom
  %ptridx = getelementptr inbounds i32, i32* %B, i64 %indvars.iv
  %0 = load i32, i32* %ptridx, align 4
  %idxprom1 = sext i32 %0 to i64
  %ptridx2 = getelementptr inbounds i32, i32* %C, i64 %idxprom1
  %1 = load i32, i32* %ptridx2, align 4
  %add = add nsw i32 %1, 2
  store i32 %add, i32* %ptridx2, align 4
  %ptridx6 = getelementptr inbounds i32, i32* %A, i64 %indvars.iv
  %2 = load i32, i32* %ptridx6, align 4
  ; Min/Max Idiom
  %cmp7 = icmp slt i32 %2, %min_value1.059
  %spec.select = select i1 %cmp7, i64 %indvars.iv, i64 %index1.058
  %spec.select54 = select i1 %cmp7, i32 %2, i32 %min_value1.059
  ; VConflict Idiom
  %ptridx11 = getelementptr inbounds i32, i32* %F, i64 %indvars.iv
  %3 = load i32, i32* %ptridx11, align 4
  %idxprom12 = sext i32 %3 to i64
  %ptridx13 = getelementptr inbounds i32, i32* %G, i64 %idxprom12
  %4 = load i32, i32* %ptridx13, align 4
  %add14 = add nsw i32 %4, 5
  store i32 %add14, i32* %ptridx13, align 4
  %ptridx18 = getelementptr inbounds i32, i32* %D, i64 %indvars.iv
  %5 = load i32, i32* %ptridx18, align 4
  ; Min/Max Idiom
  %cmp19 = icmp slt i32 %5, %min_value3.055
  %6 = select i1 %cmp19, i32 %5, i32 %min_value3.055
  %7 = select i1 %cmp19, i64 %indvars.iv, i64 %index3.056
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 1024
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nofree norecurse nounwind uwtable mustprogress
define dso_local void @_Z3foo2PiS_S_S_S_S_S_(i32* noalias nocapture readonly %A, i32* noalias nocapture readonly %B, i32* noalias nocapture %C, i32* noalias nocapture readonly %D, i32* noalias nocapture %E, i32* noalias nocapture readonly %F, i32* noalias nocapture %G) local_unnamed_addr #0 {
; CHECK:  Reduction list
; CHECK-NEXT:   signed (SIntMin) Start: i32 [[MIN_VALUE1_0590:%.*]] Exit: i32 [[VP10:%.*]]
; CHECK-NEXT:    Linked values: i32 [[VP11:%.*]], i32 [[VP10]], i32 [[VP__RED_INIT:%.*]], i32 [[VP__RED_FINAL:%.*]],
; CHECK-EMPTY:
; CHECK-NEXT:   signed (SIntMin) Start: i64 [[INDEX1_0580:%.*]] Exit: i64 [[VP12:%.*]]
; CHECK-NEXT:    Linked values: i64 [[VP13:%.*]], i64 [[VP12]], i64 [[VP__RED_INIT_1:%.*]], i64 [[VP__RED_FINAL_1:%.*]],
; CHECK-NEXT:   Parent exit: i32 [[VP10]]
; CHECK-NEXT:   signed (SIntMin) Start: i32 [[MIN_VALUE3_0550:%.*]] Exit: i32 [[VP14:%.*]]
; CHECK-NEXT:    Linked values: i32 [[VP15:%.*]], i32 [[VP14]], i32 [[VP__RED_INIT_2:%.*]], i32 [[VP__RED_FINAL_2:%.*]],
; CHECK-EMPTY:
; CHECK-NEXT:   signed (SIntMin) Start: i64 [[INDEX3_0560:%.*]] Exit: i64 [[VP16:%.*]]
; CHECK-NEXT:    Linked values: i64 [[VP17:%.*]], i64 [[VP16]], i64 [[VP__RED_INIT_3:%.*]], i64 [[VP__RED_FINAL_3:%.*]],
; CHECK-NEXT:   Parent exit: i32 [[VP14]]
;
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %spec.select.lcssa = phi i64 [ %spec.select, %for.body ]
  %spec.select54.lcssa = phi i32 [ %spec.select54, %for.body ]
  %.lcssa63 = phi i32 [ %6, %for.body ]
  %.lcssa = phi i64 [ %7, %for.body ]
  %sub = add nsw i64 %spec.select.lcssa, -1
  %ptridx25 = getelementptr inbounds i32, i32* %E, i64 %sub
  store i32 %spec.select54.lcssa, i32* %ptridx25, align 4
  %sub26 = add nsw i64 %.lcssa, -3
  %ptridx27 = getelementptr inbounds i32, i32* %E, i64 %sub26
  store i32 %.lcssa63, i32* %ptridx27, align 4
  ret void

for.body:                                         ; preds = %entry, %for.body
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %min_value1.059 = phi i32 [ 0, %entry ], [ %spec.select54, %for.body ]
  %index1.058 = phi i64 [ 0, %entry ], [ %spec.select, %for.body ]
  %index3.056 = phi i64 [ 0, %entry ], [ %7, %for.body ]
  %min_value3.055 = phi i32 [ 0, %entry ], [ %6, %for.body ]
  %ptridx = getelementptr inbounds i32, i32* %A, i64 %indvars.iv
  %0 = load i32, i32* %ptridx, align 4
  ; Min/Max Idiom
  %cmp1 = icmp slt i32 %0, %min_value1.059
  %spec.select = select i1 %cmp1, i64 %indvars.iv, i64 %index1.058
  %spec.select54 = select i1 %cmp1, i32 %0, i32 %min_value1.059
  ; VConflict Idiom
  %ptridx5 = getelementptr inbounds i32, i32* %B, i64 %indvars.iv
  %1 = load i32, i32* %ptridx5, align 4
  %idxprom6 = sext i32 %1 to i64
  %ptridx7 = getelementptr inbounds i32, i32* %C, i64 %idxprom6
  %2 = load i32, i32* %ptridx7, align 4
  %add = add nsw i32 %2, 2
  store i32 %add, i32* %ptridx7, align 4
  ; VConflict Idiom
  %ptridx11 = getelementptr inbounds i32, i32* %F, i64 %indvars.iv
  %3 = load i32, i32* %ptridx11, align 4
  %idxprom12 = sext i32 %3 to i64
  %ptridx13 = getelementptr inbounds i32, i32* %G, i64 %idxprom12
  %4 = load i32, i32* %ptridx13, align 4
  %add14 = add nsw i32 %4, 5
  store i32 %add14, i32* %ptridx13, align 4
  %ptridx18 = getelementptr inbounds i32, i32* %D, i64 %indvars.iv
  %5 = load i32, i32* %ptridx18, align 4
  ; Min/Max Idiom
  %cmp19 = icmp slt i32 %5, %min_value3.055
  %6 = select i1 %cmp19, i32 %5, i32 %min_value3.055
  %7 = select i1 %cmp19, i64 %indvars.iv, i64 %index3.056
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 1024
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nofree norecurse nounwind uwtable mustprogress
define dso_local void @_Z3foo3PiS_S_S_S_S_S_(i32* noalias nocapture readonly %A, i32* noalias nocapture readonly %B, i32* noalias nocapture %C, i32* noalias nocapture readonly %D, i32* noalias nocapture %E, i32* noalias nocapture readonly %F, i32* noalias nocapture %G) local_unnamed_addr #0 {
; CHECK:  Reduction list
; CHECK-NEXT:   signed (SIntMin) Start: i32 [[MIN_VALUE1_0590:%.*]] Exit: i32 [[VP10:%.*]]
; CHECK-NEXT:    Linked values: i32 [[VP11:%.*]], i32 [[VP10]], i32 [[VP__RED_INIT:%.*]], i32 [[VP__RED_FINAL:%.*]],
; CHECK-EMPTY:
; CHECK-NEXT:   signed (SIntMin) Start: i64 [[INDEX1_0580:%.*]] Exit: i64 [[VP12:%.*]]
; CHECK-NEXT:    Linked values: i64 [[VP13:%.*]], i64 [[VP12]], i64 [[VP__RED_INIT_1:%.*]], i64 [[VP__RED_FINAL_1:%.*]],
; CHECK-NEXT:   Parent exit: i32 [[VP10]]
; CHECK-NEXT:   signed (SIntMin) Start: i32 [[MIN_VALUE3_0550:%.*]] Exit: i32 [[VP14:%.*]]
; CHECK-NEXT:    Linked values: i32 [[VP15:%.*]], i32 [[VP14]], i32 [[VP__RED_INIT_2:%.*]], i32 [[VP__RED_FINAL_2:%.*]],
; CHECK-EMPTY:
; CHECK-NEXT:   signed (SIntMin) Start: i64 [[INDEX3_0560:%.*]] Exit: i64 [[VP16:%.*]]
; CHECK-NEXT:    Linked values: i64 [[VP17:%.*]], i64 [[VP16]], i64 [[VP__RED_INIT_3:%.*]], i64 [[VP__RED_FINAL_3:%.*]],
; CHECK-NEXT:   Parent exit: i32 [[VP14]]
;
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %spec.select.lcssa = phi i64 [ %spec.select, %for.body ]
  %spec.select54.lcssa = phi i32 [ %spec.select54, %for.body ]
  %.lcssa63 = phi i32 [ %4, %for.body ]
  %.lcssa = phi i64 [ %5, %for.body ]
  %sub = add nsw i64 %spec.select.lcssa, -1
  %ptridx25 = getelementptr inbounds i32, i32* %E, i64 %sub
  store i32 %spec.select54.lcssa, i32* %ptridx25, align 4
  %sub26 = add nsw i64 %.lcssa, -3
  %ptridx27 = getelementptr inbounds i32, i32* %E, i64 %sub26
  store i32 %.lcssa63, i32* %ptridx27, align 4
  ret void

for.body:                                         ; preds = %entry, %for.body
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %min_value1.059 = phi i32 [ 0, %entry ], [ %spec.select54, %for.body ]
  %index1.058 = phi i64 [ 0, %entry ], [ %spec.select, %for.body ]
  %index3.056 = phi i64 [ 0, %entry ], [ %5, %for.body ]
  %min_value3.055 = phi i32 [ 0, %entry ], [ %4, %for.body ]
  %ptridx = getelementptr inbounds i32, i32* %A, i64 %indvars.iv
  %0 = load i32, i32* %ptridx, align 4
  ; Min/Max Idiom
  %cmp1 = icmp slt i32 %0, %min_value1.059
  %spec.select = select i1 %cmp1, i64 %indvars.iv, i64 %index1.058
  %spec.select54 = select i1 %cmp1, i32 %0, i32 %min_value1.059
  ; VConflict Idiom
  %ptridx5 = getelementptr inbounds i32, i32* %B, i64 %indvars.iv
  %1 = load i32, i32* %ptridx5, align 4
  %idxprom6 = sext i32 %1 to i64
  %ptridx7 = getelementptr inbounds i32, i32* %C, i64 %idxprom6
  %2 = load i32, i32* %ptridx7, align 4
  %add = add nsw i32 %2, 2
  store i32 %add, i32* %ptridx7, align 4
  %ptridx11 = getelementptr inbounds i32, i32* %D, i64 %indvars.iv
  %3 = load i32, i32* %ptridx11, align 4
  ; Min/Max Idiom
  %cmp12 = icmp slt i32 %3, %min_value3.055
  %4 = select i1 %cmp12, i32 %3, i32 %min_value3.055
  %5 = select i1 %cmp12, i64 %indvars.iv, i64 %index3.056
  ; VConflict Idiom
  %ptridx19 = getelementptr inbounds i32, i32* %F, i64 %indvars.iv
  %6 = load i32, i32* %ptridx19, align 4
  %idxprom20 = sext i32 %6 to i64
  %ptridx21 = getelementptr inbounds i32, i32* %G, i64 %idxprom20
  %7 = load i32, i32* %ptridx21, align 4
  %add22 = add nsw i32 %7, 5
  store i32 %add22, i32* %ptridx21, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 1024
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nofree norecurse nounwind uwtable mustprogress
define dso_local void @_Z3foo4PiS_S_S_S_S_S_(i32* noalias nocapture readonly %A, i32* noalias nocapture readonly %B, i32* noalias nocapture %C, i32* noalias nocapture readonly %D, i32* noalias nocapture %E, i32* noalias nocapture readonly %F, i32* noalias nocapture %G) local_unnamed_addr #0 {
; CHECK:  Reduction list
; CHECK-NEXT:   signed (SIntMin) Start: i32 [[MIN_VALUE1_0590:%.*]] Exit: i32 [[VP10:%.*]]
; CHECK-NEXT:    Linked values: i32 [[VP11:%.*]], i32 [[VP10]], i32 [[VP__RED_INIT:%.*]], i32 [[VP__RED_FINAL:%.*]],
; CHECK-EMPTY:
; CHECK-NEXT:   signed (SIntMin) Start: i64 [[INDEX1_0580:%.*]] Exit: i64 [[VP12:%.*]]
; CHECK-NEXT:    Linked values: i64 [[VP13:%.*]], i64 [[VP12]], i64 [[VP__RED_INIT_1:%.*]], i64 [[VP__RED_FINAL_1:%.*]],
; CHECK-NEXT:   Parent exit: i32 [[VP10]]
; CHECK-NEXT:   signed (SIntMin) Start: i32 [[MIN_VALUE3_0550:%.*]] Exit: i32 [[VP14:%.*]]
; CHECK-NEXT:    Linked values: i32 [[VP15:%.*]], i32 [[VP14]], i32 [[VP__RED_INIT_2:%.*]], i32 [[VP__RED_FINAL_2:%.*]],
; CHECK-EMPTY:
; CHECK-NEXT:   signed (SIntMin) Start: i64 [[INDEX3_0560:%.*]] Exit: i64 [[VP16:%.*]]
; CHECK-NEXT:    Linked values: i64 [[VP17:%.*]], i64 [[VP16]], i64 [[VP__RED_INIT_3:%.*]], i64 [[VP__RED_FINAL_3:%.*]],
; CHECK-NEXT:   Parent exit: i32 [[VP14]]
;
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %spec.select.lcssa = phi i64 [ %spec.select, %for.body ]
  %spec.select54.lcssa = phi i32 [ %spec.select54, %for.body ]
  %.lcssa63 = phi i32 [ %4, %for.body ]
  %.lcssa = phi i64 [ %5, %for.body ]
  %sub = add nsw i64 %spec.select.lcssa, -1
  %ptridx25 = getelementptr inbounds i32, i32* %E, i64 %sub
  store i32 %spec.select54.lcssa, i32* %ptridx25, align 4
  %sub26 = add nsw i64 %.lcssa, -3
  %ptridx27 = getelementptr inbounds i32, i32* %E, i64 %sub26
  store i32 %.lcssa63, i32* %ptridx27, align 4
  ret void

for.body:                                         ; preds = %entry, %for.body
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %min_value1.059 = phi i32 [ 0, %entry ], [ %spec.select54, %for.body ]
  %index1.058 = phi i64 [ 0, %entry ], [ %spec.select, %for.body ]
  %index3.056 = phi i64 [ 0, %entry ], [ %5, %for.body ]
  %min_value3.055 = phi i32 [ 0, %entry ], [ %4, %for.body ]
  ; VConflict Idiom
  %ptridx = getelementptr inbounds i32, i32* %B, i64 %indvars.iv
  %0 = load i32, i32* %ptridx, align 4
  %idxprom1 = sext i32 %0 to i64
  %ptridx2 = getelementptr inbounds i32, i32* %C, i64 %idxprom1
  %1 = load i32, i32* %ptridx2, align 4
  %add = add nsw i32 %1, 2
  store i32 %add, i32* %ptridx2, align 4
  %ptridx6 = getelementptr inbounds i32, i32* %A, i64 %indvars.iv
  %2 = load i32, i32* %ptridx6, align 4
  ; Min/Max Idiom
  %cmp7 = icmp slt i32 %2, %min_value1.059
  %spec.select = select i1 %cmp7, i64 %indvars.iv, i64 %index1.058
  %spec.select54 = select i1 %cmp7, i32 %2, i32 %min_value1.059
  %ptridx11 = getelementptr inbounds i32, i32* %D, i64 %indvars.iv
  %3 = load i32, i32* %ptridx11, align 4
  ; Min/Max Idiom
  %cmp12 = icmp slt i32 %3, %min_value3.055
  %4 = select i1 %cmp12, i32 %3, i32 %min_value3.055
  %5 = select i1 %cmp12, i64 %indvars.iv, i64 %index3.056
  ; VConflict Idiom
  %ptridx19 = getelementptr inbounds i32, i32* %F, i64 %indvars.iv
  %6 = load i32, i32* %ptridx19, align 4
  %idxprom20 = sext i32 %6 to i64
  %ptridx21 = getelementptr inbounds i32, i32* %G, i64 %idxprom20
  %7 = load i32, i32* %ptridx21, align 4
  %add22 = add nsw i32 %7, 5
  store i32 %add22, i32* %ptridx21, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 1024
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body
}

attributes #0 = { "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "pre_loopopt" "stack-protector-buffer-size"="8" "target-cpu"="core-avx2" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+rdrnd,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt" "unsafe-fp-math"="true" "use-soft-float"="false" }
