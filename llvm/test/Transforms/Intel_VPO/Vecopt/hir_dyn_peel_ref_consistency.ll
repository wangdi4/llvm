; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -hir-ssa-deconstruction -hir-vec-dir-insert -hir-vplan-vec -disable-output -print-after=hir-vplan-vec  -vplan-force-vf=4 -vplan-enable-new-cfg-merge-hir -vplan-print-after-cfg-merge -hir-details-no-verbose-indent < %s 2>&1 | FileCheck %s
; RUN: opt -passes="hir-ssa-deconstruction,hir-vec-dir-insert,hir-vplan-vec,print<hir>" -disable-output -vplan-force-vf=4  -vplan-enable-new-cfg-merge-hir -vplan-print-after-cfg-merge -hir-details-no-verbose-indent < %s 2>&1 | FileCheck %s
;
; LIT test to check dynamic peeling in VPlan HIR path. The test was crashing
; as the scalar ref created for VPInvSCEVWrapper was not made consistent. A
; subsequent call to try to widen the ref crashes in findMaxTempBlobLevel as
; the ref was not consistent.
;
; CHECK:         BEGIN REGION { modified }
; CHECK-NEXT:          %.vec = ptrtoint.<4 x i64*>.<4 x i64>(&((<4 x i64*>)(%lp)[%n1]));
; CHECK-NEXT:          %.vec1 = %.vec  /u  8;
; CHECK-NEXT:          %.vec2 = %.vec1  *  3;
; CHECK-NEXT:          %.vec3 = %.vec2  %u  4;
; CHECK-NEXT:          %.vec4 = 0 == %.vec3;
; CHECK-NEXT:          %phi.temp = 0;
; CHECK-NEXT:          %extract.0. = extractelement %.vec4,  0;
; CHECK-NEXT:          if (%extract.0. == 1)
; CHECK-NEXT:          {
; CHECK-NEXT:             goto merge.blk14.24;
; CHECK-NEXT:          }
; CHECK-NEXT:          %.vec5 = %.vec3 + 4 >u 400;
; CHECK-NEXT:          %phi.temp6 = 0;
; CHECK-NEXT:          %extract.0.8 = extractelement %.vec5,  0;
; CHECK-NEXT:          if (%extract.0.8 == 1)
; CHECK-NEXT:          {
; CHECK-NEXT:             goto merge.blk12.32;
; CHECK-NEXT:          }
; CHECK-NEXT:          %extract.0.9 = extractelement %.vec3,  0;
; CHECK-NEXT:          %ub.tmp = %extract.0.9;
; CHECK-NEXT:          %peel.ub = %ub.tmp  -  1;

; CHECK:               + DO i1 = 0, %peel.ub, 1   <DO_LOOP>
; CHECK-NEXT:          |   (%lp)[i1 + %n1] = i1;
; CHECK-NEXT:          + END LOOP

; CHECK:               %phi.temp = %ub.tmp;
; CHECK-NEXT:          merge.blk14.24:
; CHECK-NEXT:          %.vec11 = %.vec3 + 4 >u 400;
; CHECK-NEXT:          %phi.temp6 = %phi.temp;
; CHECK-NEXT:          %extract.0.13 = extractelement %.vec11,  0;
; CHECK-NEXT:          if (%extract.0.13 == 1)
; CHECK-NEXT:          {
; CHECK-NEXT:             goto merge.blk12.32;
; CHECK-NEXT:          }

; CHECK:               + DO i1 = %phi.temp, 399, 4   <DO_LOOP> <auto-vectorized> <nounroll> <novectorize>
; CHECK-NEXT:          |   (<4 x i64>*)(%lp)[i1 + %n1] = i1 + <i64 0, i64 1, i64 2, i64 3>;
; CHECK-NEXT:          + END LOOP

; CHECK:               %.vec14 = 400 == 400;
; CHECK-NEXT:          %phi.temp6 = 400;
; CHECK-NEXT:          %phi.temp16 = 400;
; CHECK-NEXT:          %extract.0.18 = extractelement %.vec14,  0;
; CHECK-NEXT:          if (%extract.0.18 == 1)
; CHECK-NEXT:          {
; CHECK-NEXT:             goto final.merge.68;
; CHECK-NEXT:          }
; CHECK-NEXT:          merge.blk12.32:
; CHECK-NEXT:          %lb.tmp = %phi.temp6;

; CHECK:               + DO i1 = %lb.tmp, 399, 1   <DO_LOOP>
; CHECK-NEXT:          |   (%lp)[i1 + %n1] = i1;
; CHECK-NEXT:          + END LOOP

; CHECK:               %phi.temp16 = 399;
; CHECK-NEXT:          final.merge.68:
; CHECK-NEXT:    END REGION
;
define void @foo(i64* %lp, i64 %n1) {
entry:
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %l1.06 = phi i64 [ %inc, %for.body ], [ 0, %entry ]
  %idx = add i64 %l1.06, %n1
  %arrayidx = getelementptr inbounds i64, i64* %lp, i64 %idx
  store i64 %l1.06, i64* %arrayidx, align 8
  %inc = add nuw nsw i64 %l1.06, 1
  %exitcond.not = icmp eq i64 %inc, 400
  br i1 %exitcond.not, label %for.end.loopexit, label %for.body, !llvm.loop !0

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}
!0 = distinct !{!0, !1}
!1 = !{!"llvm.loop.intel.vector.dynamic_align", !"true"}
