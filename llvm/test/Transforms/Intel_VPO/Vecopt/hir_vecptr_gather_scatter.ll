; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -passes="hir-ssa-deconstruction,hir-vec-dir-insert,hir-vplan-vec,print<hir>" -vplan-force-vf=4 -disable-output < %s 2>&1 | FileCheck %s

; Verify fix for CMPLRLLVM-43412.  Formerly we had a compfail in the
; gather-scatter handling because of a self-address-of DDRef with no
; cached GEP information.

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define void @foo(ptr noalias %fp1, ptr %fp2) {
; CHECK:             + DO i1 = 0, 1023, 4   <DO_LOOP> <auto-vectorized> <novectorize>
; CHECK-NEXT:        |   %.vec = (<4 x ptr>*)([[FP20:%.*]])[i1]
; CHECK-NEXT:        |   %.replicated.elts = shufflevector %.vec,  undef,  <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
; CHECK-NEXT:        |   %.vec1 = (<8 x float>*)(%.replicated.elts)[<i64 0, i64 1, i64 0, i64 1, i64 0, i64 1, i64 0, i64 1>]
; CHECK-NEXT:        |   (<8 x float>*)([[FP10:%.*]])[i1] = %.vec1
; CHECK-NEXT:        + END LOOP
;
entry:
  br label %for.body

for.body:
  %l1.06 = phi i64 [ 0, %entry ], [ %inc, %for.body ]
  %arrayidx = getelementptr inbounds ptr, ptr %fp2, i64 %l1.06
  %0 = load ptr, ptr %arrayidx, align 8
  %1 = load <2 x float>, ptr %0, align 8
  %arrayidx1 = getelementptr inbounds <2 x float>, ptr %fp1, i64 %l1.06
  store <2 x float> %1, ptr %arrayidx1, align 8
  %inc = add nuw nsw i64 %l1.06, 1
  %exitcond.not = icmp eq i64 %inc, 1024
  br i1 %exitcond.not, label %for.end, label %for.body

for.end:
  ret void
}
