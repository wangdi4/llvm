; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; LIT test to check folding of multiply by constant into linear canon expressions
; in VPValue based CG.
; RUN: opt -hir-ssa-deconstruction -hir-vec-dir-insert -hir-vplan-vec -vplan-force-vf=4 -print-after=hir-vplan-vec -disable-output -enable-vp-value-codegen-hir=1 < %s 2>&1  | FileCheck %s -check-prefixes=PM1
; RUN: opt -passes="hir-ssa-deconstruction,hir-vec-dir-insert,hir-vplan-vec" -vplan-force-vf=4 -print-after=hir-vplan-vec -disable-output -enable-vp-value-codegen-hir=1 < %s 2>&1 | FileCheck %s -check-prefixes=PM2

define void @foo(i64* noalias nocapture %larr) {
; PM1:         IR Dump After VPlan HIR Vectorizer
; PM2:         IR Dump After{{.+}}VPlan{{.*}}Driver{{.*}}HIR{{.*}}
; CHECK:               + DO i1 = 0, 99, 4   <DO_LOOP> <auto-vectorized> <novectorize>
; CHECK-NEXT:          |   (<4 x i64>*)(%larr)[i1] = 9 * i1 + 9 * <i64 0, i64 1, i64 2, i64 3>;
; CHECK-NEXT:          + END LOOP
;
entry:
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %l1.09 = phi i64 [ 0, %entry ], [ %inc, %for.body ]
  %mul = mul i64 %l1.09, 9
  %arrayidx = getelementptr inbounds i64, i64* %larr, i64 %l1.09
  store i64 %mul, i64* %arrayidx, align 8
  %inc = add nuw nsw i64 %l1.09, 1
  %exitcond = icmp eq i64 %inc, 100
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  ret void
}
