; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -vplan-enable-soa=false < %s -S -vplan-pragma-omp-ordered-simd-extract -vpo-cfg-restructuring -VPlanDriver -vplan-force-vf=2 -VPODirectiveCleanup -always-inline 2>&1 | FileCheck %s

; The Code Extractor might add the output values of the call in the entry block.
; Here, we test if the output values are treated as privates.

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define void @var_tripcount(i32* %ip, i32 %n, i32* %x) local_unnamed_addr {
; CHECK:  define void @var_tripcount(i32* [[IP0:%.*]], i32 [[N0:%.*]], i32* [[X0:%.*]]) local_unnamed_addr {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VAL_LOC0:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[VAL_LOC_VEC0:%.*]] = alloca <2 x i32>, align 8
; CHECK-NEXT:    [[VAL_LOC_VEC_BC0:%.*]] = bitcast <2 x i32>* [[VAL_LOC_VEC0]] to i32*
; CHECK-NEXT:    [[VAL_LOC_VEC_BASE_ADDR0:%.*]] = getelementptr i32, i32* [[VAL_LOC_VEC_BC0]], <2 x i32> <i32 0, i32 1>
; CHECK-NEXT:    [[VAL_LOC_VEC_BASE_ADDR_EXTRACT_1_0:%.*]] = extractelement <2 x i32*> [[VAL_LOC_VEC_BASE_ADDR0]], i32 1
; CHECK-NEXT:    [[VAL_LOC_VEC_BASE_ADDR_EXTRACT_0_0:%.*]] = extractelement <2 x i32*> [[VAL_LOC_VEC_BASE_ADDR0]], i32 0
; CHECK-NEXT:    br label [[DIR_OMP_SIMD_10:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.SIMD.1:
; CHECK-NEXT:    br label [[DIR_QUAL_LIST_END_20:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.QUAL.LIST.END.2:
; CHECK-NEXT:    [[CMP50:%.*]] = icmp sgt i32 [[N0]], 0
; CHECK-NEXT:    br i1 [[CMP50]], label [[FOR_BODY_PREHEADER0:%.*]], label [[DIR_OMP_END_SIMD_20:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  for.body.preheader:
; CHECK-NEXT:    [[WIDE_TRIP_COUNT0:%.*]] = zext i32 [[N0]] to i64
; CHECK-NEXT:    [[N_MOD_VF0:%.*]] = urem i64 [[WIDE_TRIP_COUNT0]], 2
; CHECK-NEXT:    [[N_VEC0:%.*]] = sub i64 [[WIDE_TRIP_COUNT0]], [[N_MOD_VF0]]
; CHECK-NEXT:    [[CMP_ZERO0:%.*]] = icmp eq i64 [[N_VEC0]], 0
; CHECK-NEXT:    br i1 [[CMP_ZERO0]], label [[SCALAR_PH0:%.*]], label [[VECTOR_PH0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  vector.ph:
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT0:%.*]] = insertelement <2 x i32*> undef, i32* [[IP0]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT0:%.*]] = shufflevector <2 x i32*> [[BROADCAST_SPLATINSERT0]], <2 x i32*> undef, <2 x i32> zeroinitializer
; CHECK-NEXT:    br label [[VECTOR_BODY0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  vector.body:
; CHECK-NEXT:    [[UNI_PHI0:%.*]] = phi i64 [ 0, [[VECTOR_PH0]] ], [ [[TMP3:%.*]], [[VECTOR_BODY0]] ]
; CHECK-NEXT:    [[UNI_PHI20:%.*]] = phi i64 [ [[TMP2:%.*]], [[VECTOR_BODY0]] ], [ 0, [[VECTOR_PH0]] ]
; CHECK-NEXT:    [[VEC_PHI0:%.*]] = phi <2 x i64> [ [[TMP1:%.*]], [[VECTOR_BODY0]] ], [ <i64 0, i64 1>, [[VECTOR_PH0]] ]
; CHECK-NEXT:    [[MM_VECTORGEP0:%.*]] = getelementptr inbounds i32, <2 x i32*> [[BROADCAST_SPLAT0]], <2 x i64> [[VEC_PHI0]]
; CHECK-NEXT:    [[MM_VECTORGEP_EXTRACT_1_0:%.*]] = extractelement <2 x i32*> [[MM_VECTORGEP0]], i32 1
; CHECK-NEXT:    [[MM_VECTORGEP_EXTRACT_0_0:%.*]] = extractelement <2 x i32*> [[MM_VECTORGEP0]], i32 0
; CHECK-NEXT:    [[TMP0:%.*]] = bitcast <2 x i32*> [[VAL_LOC_VEC_BASE_ADDR0]] to <2 x i8*>
; CHECK-NEXT:    [[DOTEXTRACT_1_0:%.*]] = extractelement <2 x i8*> [[TMP0]], i32 1
; CHECK-NEXT:    [[DOTEXTRACT_0_0:%.*]] = extractelement <2 x i8*> [[TMP0]], i32 0
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 -1, i8* [[DOTEXTRACT_0_0]])
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 -1, i8* [[DOTEXTRACT_1_0]])
; CHECK-NEXT:    [[VAL_I0:%.*]] = load i32, i32* [[MM_VECTORGEP_EXTRACT_0_0]], align 4
; CHECK-NEXT:    store i32 [[VAL_I0]], i32* [[VAL_LOC_VEC_BASE_ADDR_EXTRACT_0_0]], align 4
; CHECK-NEXT:    [[VAL_I40:%.*]] = load i32, i32* [[MM_VECTORGEP_EXTRACT_1_0]], align 4
; CHECK-NEXT:    store i32 [[VAL_I40]], i32* [[VAL_LOC_VEC_BASE_ADDR_EXTRACT_1_0]], align 4
; CHECK-NEXT:    [[WIDE_LOAD0:%.*]] = load <2 x i32>, <2 x i32>* [[VAL_LOC_VEC0]], align 4
; CHECK-NEXT:    [[WIDE_LOAD_EXTRACT_1_0:%.*]] = extractelement <2 x i32> [[WIDE_LOAD0]], i32 1
; CHECK-NEXT:    [[WIDE_LOAD_EXTRACT_0_0:%.*]] = extractelement <2 x i32> [[WIDE_LOAD0]], i32 0
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 -1, i8* [[DOTEXTRACT_0_0]])
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 -1, i8* [[DOTEXTRACT_1_0]])
; CHECK-NEXT:    store i32 [[WIDE_LOAD_EXTRACT_0_0]], i32* [[MM_VECTORGEP_EXTRACT_0_0]], align 4
; CHECK-NEXT:    store i32 [[WIDE_LOAD_EXTRACT_1_0]], i32* [[MM_VECTORGEP_EXTRACT_1_0]], align 4
; CHECK-NEXT:    [[TMP1]] = add nuw nsw <2 x i64> [[VEC_PHI0]], <i64 2, i64 2>
; CHECK-NEXT:    [[TMP2]] = add nuw nsw i64 [[UNI_PHI20]], 2
; CHECK-NEXT:    [[TMP3]] = add i64 [[UNI_PHI0]], 2
; CHECK-NEXT:    [[TMP4:%.*]] = icmp eq i64 [[TMP3]], [[N_VEC0]]
; CHECK-NEXT:    br i1 [[TMP4]], label [[VPLANNEDBB0:%.*]], label [[VECTOR_BODY0]], !llvm.loop !0
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB:
; CHECK-NEXT:    [[TMP5:%.*]] = mul i64 1, [[N_VEC0]]
; CHECK-NEXT:    [[TMP6:%.*]] = add i64 0, [[TMP5]]
; CHECK-NEXT:    br label [[MIDDLE_BLOCK0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  middle.block:
; CHECK-NEXT:    [[CMP_N0:%.*]] = icmp eq i64 [[WIDE_TRIP_COUNT0]], [[N_VEC0]]
; CHECK-NEXT:    br i1 [[CMP_N0]], label [[FOR_END0:%.*]], label [[SCALAR_PH0]]
; CHECK-EMPTY:
; CHECK-NEXT:  scalar.ph:
; CHECK-NEXT:    [[BC_RESUME_VAL0:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER0]] ], [ [[TMP6]], [[MIDDLE_BLOCK0]] ]
; CHECK-NEXT:    br label [[FOR_BODY0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  for.body:
; CHECK-NEXT:    [[INDVARS_IV0:%.*]] = phi i64 [ [[INDVARS_IV_NEXT0:%.*]], [[LATCH0:%.*]] ], [ [[BC_RESUME_VAL0]], [[SCALAR_PH0]] ]
; CHECK-NEXT:    [[ARRAYIDX0:%.*]] = getelementptr inbounds i32, i32* [[IP0]], i64 [[INDVARS_IV0]]
; CHECK-NEXT:    br label [[CODEREPL0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  codeRepl:
; CHECK-NEXT:    [[LT_CAST0:%.*]] = bitcast i32* [[VAL_LOC0]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 -1, i8* [[LT_CAST0]])
; CHECK-NEXT:    [[VAL_I30:%.*]] = load i32, i32* [[ARRAYIDX0]], align 4
; CHECK-NEXT:    store i32 [[VAL_I30]], i32* [[VAL_LOC0]], align 4
; CHECK-NEXT:    [[VAL_RELOAD0:%.*]] = load i32, i32* [[VAL_LOC0]], align 4
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 -1, i8* [[LT_CAST0]])
; CHECK-NEXT:    br label [[CODEREPL10:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  codeRepl1:
; CHECK-NEXT:    store i32 [[VAL_RELOAD0]], i32* [[ARRAYIDX0]], align 4
; CHECK-NEXT:    br label [[LATCH0]]
; CHECK-EMPTY:
; CHECK-NEXT:  latch:
; CHECK-NEXT:    [[INDVARS_IV_NEXT0]] = add nuw nsw i64 [[INDVARS_IV0]], 1
; CHECK-NEXT:    [[EXITCOND0:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT0]], [[WIDE_TRIP_COUNT0]]
; CHECK-NEXT:    br i1 [[EXITCOND0]], label [[FOR_END0]], label [[FOR_BODY0]], !llvm.loop !2
; CHECK-EMPTY:
; CHECK-NEXT:  for.end:
; CHECK-NEXT:    br label [[DIR_OMP_END_SIMD_20]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.END.SIMD.2:
; CHECK-NEXT:    br label [[DIR_OMP_END_SIMD_10:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.END.SIMD.1:
; CHECK-NEXT:    br label [[DIR_QUAL_LIST_END_30:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.QUAL.LIST.END.3:
; CHECK-NEXT:    ret void
; CHECK-NEXT:  }
;
entry:
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:
  %entry.region = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %DIR.QUAL.LIST.END.2

DIR.QUAL.LIST.END.2:
  %cmp5 = icmp sgt i32 %n, 0
  br i1 %cmp5, label %for.body.preheader, label %DIR.OMP.END.SIMD.2

for.body.preheader:
  %wide.trip.count = zext i32 %n to i64
  br label %for.body

for.body:
  %indvars.iv = phi i64 [ %indvars.iv.next, %latch ], [ 0, %for.body.preheader ]
  %arrayidx = getelementptr inbounds i32, i32* %ip, i64 %indvars.iv
  br label %ordered.entry.1

ordered.entry.1:
  %tok.ordered.1 = call token @llvm.directive.region.entry() [ "DIR.OMP.ORDERED"(), "QUAL.OMP.ORDERED.SIMD"() ]
  br label %ordered.1

ordered.1:
  %val = load i32, i32* %arrayidx
  br label %ordered.exit.1

ordered.exit.1:
  call void @llvm.directive.region.exit(token %tok.ordered.1) [ "DIR.OMP.END.ORDERED"() ]
  br label %ordered.entry.2

ordered.entry.2:
  %tok.ordered.2 = call token @llvm.directive.region.entry() [ "DIR.OMP.ORDERED"(), "QUAL.OMP.ORDERED.SIMD"() ]
  br label %ordered.2

ordered.2:
  store i32 %val, i32* %arrayidx, align 4
  br label %ordered.exit.2

ordered.exit.2:
  call void @llvm.directive.region.exit(token %tok.ordered.2) [ "DIR.OMP.END.ORDERED"() ]
  br label %latch

latch:
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond, label %for.end, label %for.body

for.end:
  br label %DIR.OMP.END.SIMD.2

DIR.OMP.END.SIMD.2:
  call void @llvm.directive.region.exit(token %entry.region) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.QUAL.LIST.END.3

DIR.QUAL.LIST.END.3:
  ret void
}

declare token @llvm.directive.region.entry() nounwind
declare void @llvm.directive.region.exit(token) nounwind
