; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -S < %s -VPlanDriver -loop-simplify --vplan-force-vf=4 --vplan-force-uf=3 --vplan-print-after-unroll | FileCheck %s

; void foo(int *a, int *b, int n) {
;   #pragma omp simd
;   for (int i = 0; i < n; i++) {
;     if (a[i] % 2)
;       a[i] = b[i];
;     else
;       b[i] = a[i];
;   }
; }

define dso_local void @_Z3fooPiS_i(i32* nocapture %a, i32* nocapture %b, i32 %n) local_unnamed_addr #0 {
; CHECK-LABEL:  After loop unrolling
; CHECK-NEXT:    REGION: [[REGION0:region[0-9]+]]
; CHECK-NEXT:    [[BB0:BB[0-9]+]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB1:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]:
; CHECK-NEXT:     [DA: Divergent] i64 [[VP0:%.*]] = induction-init{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP1:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:    SUCCESSORS(1):[[BB2:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]:
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_INDVARS_IV:%.*]] = phi  [ i64 [[VP0]], [[BB1]] ],  [ i64 [[VP_INDVARS_IV_NEXT:%.*]], cloned.[[BB3:BB[0-9]+]] ]
; CHECK-NEXT:     [DA: Divergent] i32* [[VP_ARRAYIDX:%.*]] = getelementptr inbounds i32* [[A0:%.*]] i64 [[VP_INDVARS_IV]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP2:%.*]] = load i32* [[VP_ARRAYIDX]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP3:%.*]] = and i32 [[VP2]] i32 1
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_TOBOOL:%.*]] = icmp i32 [[VP3]] i32 0
; CHECK-NEXT:     [DA: Divergent] i32* [[VP_ARRAYIDX13:%.*]] = getelementptr inbounds i32* [[B0:%.*]] i64 [[VP_INDVARS_IV]]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_TOBOOL_NOT:%.*]] = not i1 [[VP_TOBOOL]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB4:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): cloned.[[BB3]] [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]:
; CHECK-NEXT:     [DA: Divergent] i1 [[VP4:%.*]] = block-predicate i1 [[VP_TOBOOL_NOT]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP5:%.*]] = load i32* [[VP_ARRAYIDX13]]
; CHECK-NEXT:     [DA: Divergent] store i32 [[VP5]] i32* [[VP_ARRAYIDX]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB5:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]:
; CHECK-NEXT:     [DA: Divergent] i1 [[VP6:%.*]] = block-predicate i1 [[VP_TOBOOL]]
; CHECK-NEXT:     [DA: Divergent] store i32 [[VP2]] i32* [[VP_ARRAYIDX13]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB6:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]]:
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_INDVARS_IV_NEXT_1:%.*]] = add i64 [[VP_INDVARS_IV]] i64 [[VP1]]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_EXITCOND:%.*]] = icmp i64 [[VP_INDVARS_IV_NEXT_1]] i64 [[WIDE_TRIP_COUNT0:%.*]]
; CHECK-NEXT:    SUCCESSORS(1):cloned.[[BB7:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB7]]:
; CHECK-NEXT:     [DA: Divergent] i32* [[VP_ARRAYIDX_1:%.*]] = getelementptr inbounds i32* [[A0]] i64 [[VP_INDVARS_IV_NEXT_1]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP7:%.*]] = load i32* [[VP_ARRAYIDX_1]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP8:%.*]] = and i32 [[VP7]] i32 1
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_TOBOOL_1:%.*]] = icmp i32 [[VP8]] i32 0
; CHECK-NEXT:     [DA: Divergent] i32* [[VP_ARRAYIDX13_1:%.*]] = getelementptr inbounds i32* [[B0]] i64 [[VP_INDVARS_IV_NEXT_1]]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP9:%.*]] = not i1 [[VP_TOBOOL_1]]
; CHECK-NEXT:    SUCCESSORS(1):cloned.[[BB8:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB8]]:
; CHECK-NEXT:     [DA: Divergent] i1 [[VP10:%.*]] = block-predicate i1 [[VP9]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP11:%.*]] = load i32* [[VP_ARRAYIDX13_1]]
; CHECK-NEXT:     [DA: Divergent] store i32 [[VP11]] i32* [[VP_ARRAYIDX_1]]
; CHECK-NEXT:    SUCCESSORS(1):cloned.[[BB9:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): cloned.[[BB7]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB9]]:
; CHECK-NEXT:     [DA: Divergent] i1 [[VP12:%.*]] = block-predicate i1 [[VP_TOBOOL_1]]
; CHECK-NEXT:     [DA: Divergent] store i32 [[VP7]] i32* [[VP_ARRAYIDX13_1]]
; CHECK-NEXT:    SUCCESSORS(1):cloned.[[BB10:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): cloned.[[BB8]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB10]]:
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_INDVARS_IV_NEXT_2:%.*]] = add i64 [[VP_INDVARS_IV_NEXT_1]] i64 [[VP1]]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_EXITCOND_1:%.*]] = icmp i64 [[VP_INDVARS_IV_NEXT_2]] i64 [[WIDE_TRIP_COUNT0]]
; CHECK-NEXT:    SUCCESSORS(1):cloned.[[BB11:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): cloned.[[BB9]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB11]]:
; CHECK-NEXT:     [DA: Divergent] i32* [[VP_ARRAYIDX_2:%.*]] = getelementptr inbounds i32* [[A0]] i64 [[VP_INDVARS_IV_NEXT_2]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP13:%.*]] = load i32* [[VP_ARRAYIDX_2]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP14:%.*]] = and i32 [[VP13]] i32 1
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_TOBOOL_2:%.*]] = icmp i32 [[VP14]] i32 0
; CHECK-NEXT:     [DA: Divergent] i32* [[VP_ARRAYIDX13_2:%.*]] = getelementptr inbounds i32* [[B0]] i64 [[VP_INDVARS_IV_NEXT_2]]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP15:%.*]] = not i1 [[VP_TOBOOL_2]]
; CHECK-NEXT:    SUCCESSORS(1):cloned.[[BB12:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): cloned.[[BB10]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB12]]:
; CHECK-NEXT:     [DA: Divergent] i1 [[VP16:%.*]] = block-predicate i1 [[VP15]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP17:%.*]] = load i32* [[VP_ARRAYIDX13_2]]
; CHECK-NEXT:     [DA: Divergent] store i32 [[VP17]] i32* [[VP_ARRAYIDX_2]]
; CHECK-NEXT:    SUCCESSORS(1):cloned.[[BB13:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): cloned.[[BB11]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB13]]:
; CHECK-NEXT:     [DA: Divergent] i1 [[VP18:%.*]] = block-predicate i1 [[VP_TOBOOL_2]]
; CHECK-NEXT:     [DA: Divergent] store i32 [[VP13]] i32* [[VP_ARRAYIDX13_2]]
; CHECK-NEXT:    SUCCESSORS(1):cloned.[[BB3]]
; CHECK-NEXT:    PREDECESSORS(1): cloned.[[BB12]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB3]]:
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_INDVARS_IV_NEXT]] = add i64 [[VP_INDVARS_IV_NEXT_2]] i64 [[VP1]]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_EXITCOND_2:%.*]] = icmp i64 [[VP_INDVARS_IV_NEXT]] i64 [[WIDE_TRIP_COUNT0]]
; CHECK-NEXT:    SUCCESSORS(2):[[BB14:BB[0-9]+]](i1 [[VP_EXITCOND_2]]), [[BB2]](!i1 [[VP_EXITCOND_2]])
; CHECK-NEXT:    PREDECESSORS(1): cloned.[[BB13]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB14]]:
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP19:%.*]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:    SUCCESSORS(1):[[BB15:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): cloned.[[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB15]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB14]]
; CHECK-EMPTY:
; CHECK-NEXT:    END Region([[REGION0]])

; CHECK:  define dso_local void @_Z3fooPiS_i(i32* nocapture [[A0]], i32* nocapture [[B0]], i32 [[N0:%.*]]) local_unnamed_addr {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP0:%.*]] = icmp sgt i32 [[N0]], 0
; CHECK-NEXT:    br i1 [[CMP0]], label [[DIR_OMP_SIMD_20:%.*]], label [[OMP_PRECOND_END0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.SIMD.2:
; CHECK-NEXT:    br label [[DIR_OMP_SIMD_10:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.SIMD.1:
; CHECK-NEXT:    [[WIDE_TRIP_COUNT0]] = sext i32 [[N0]] to i64
; CHECK-NEXT:    [[N_MOD_VF0:%.*]] = urem i64 [[WIDE_TRIP_COUNT0]], 12
; CHECK-NEXT:    [[N_VEC0:%.*]] = sub i64 [[WIDE_TRIP_COUNT0]], [[N_MOD_VF0]]
; CHECK-NEXT:    [[CMP_ZERO0:%.*]] = icmp eq i64 [[N_VEC0]], 0
; CHECK-NEXT:    br i1 [[CMP_ZERO0]], label [[SCALAR_PH0:%.*]], label [[VECTOR_PH0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  vector.ph:
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT0:%.*]] = insertelement <4 x i64> undef, i64 [[WIDE_TRIP_COUNT0]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT0:%.*]] = shufflevector <4 x i64> [[BROADCAST_SPLATINSERT0]], <4 x i64> undef, <4 x i32> zeroinitializer
; CHECK-NEXT:    br label [[VECTOR_BODY0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  vector.body:
; CHECK-NEXT:    [[INDEX0:%.*]] = phi i64 [ 0, [[VECTOR_PH0]] ], [ [[INDEX_NEXT0:%.*]], [[VECTOR_BODY0]] ]
; CHECK-NEXT:    [[UNI_PHI0:%.*]] = phi i64 [ 0, [[VECTOR_PH0]] ], [ [[TMP28:%.*]], [[VECTOR_BODY0]] ]
; CHECK-NEXT:    [[VEC_PHI0:%.*]] = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, [[VECTOR_PH0]] ], [ [[TMP27:%.*]], [[VECTOR_BODY0]] ]
; CHECK-NEXT:    [[SCALAR_GEP0:%.*]] = getelementptr inbounds i32, i32* [[A0]], i64 [[UNI_PHI0]]
; CHECK-NEXT:    [[TMP0:%.*]] = bitcast i32* [[SCALAR_GEP0]] to <4 x i32>*
; CHECK-NEXT:    [[WIDE_LOAD0:%.*]] = load <4 x i32>, <4 x i32>* [[TMP0]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = and <4 x i32> [[WIDE_LOAD0]], <i32 1, i32 1, i32 1, i32 1>
; CHECK-NEXT:    [[TMP2:%.*]] = icmp eq <4 x i32> [[TMP1]], zeroinitializer
; CHECK-NEXT:    [[SCALAR_GEP10:%.*]] = getelementptr inbounds i32, i32* [[B0]], i64 [[UNI_PHI0]]
; CHECK-NEXT:    [[TMP3:%.*]] = xor <4 x i1> [[TMP2]], <i1 true, i1 true, i1 true, i1 true>
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast i32* [[SCALAR_GEP10]] to <4 x i32>*
; CHECK-NEXT:    [[WIDE_MASKED_LOAD0:%.*]] = call <4 x i32> @llvm.masked.load.v4i32.p0v4i32(<4 x i32>* [[TMP4]], i32 4, <4 x i1> [[TMP3]], <4 x i32> undef)
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast i32* [[SCALAR_GEP0]] to <4 x i32>*
; CHECK-NEXT:    call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> [[WIDE_MASKED_LOAD0]], <4 x i32>* [[TMP5]], i32 4, <4 x i1> [[TMP3]])
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast i32* [[SCALAR_GEP10]] to <4 x i32>*
; CHECK-NEXT:    call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> [[WIDE_LOAD0]], <4 x i32>* [[TMP6]], i32 4, <4 x i1> [[TMP2]])
; CHECK-NEXT:    [[TMP7:%.*]] = add nuw nsw <4 x i64> [[VEC_PHI0]], <i64 4, i64 4, i64 4, i64 4>
; CHECK-NEXT:    [[TMP8:%.*]] = add nuw nsw i64 [[UNI_PHI0]], 4
; CHECK-NEXT:    [[TMP9:%.*]] = icmp eq <4 x i64> [[TMP7]], [[BROADCAST_SPLAT0]]
; CHECK-NEXT:    [[SCALAR_GEP20:%.*]] = getelementptr inbounds i32, i32* [[A0]], i64 [[TMP8]]
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast i32* [[SCALAR_GEP20]] to <4 x i32>*
; CHECK-NEXT:    [[WIDE_LOAD30:%.*]] = load <4 x i32>, <4 x i32>* [[TMP10]], align 4
; CHECK-NEXT:    [[TMP11:%.*]] = and <4 x i32> [[WIDE_LOAD30]], <i32 1, i32 1, i32 1, i32 1>
; CHECK-NEXT:    [[TMP12:%.*]] = icmp eq <4 x i32> [[TMP11]], zeroinitializer
; CHECK-NEXT:    [[SCALAR_GEP40:%.*]] = getelementptr inbounds i32, i32* [[B0]], i64 [[TMP8]]
; CHECK-NEXT:    [[TMP13:%.*]] = xor <4 x i1> [[TMP12]], <i1 true, i1 true, i1 true, i1 true>
; CHECK-NEXT:    [[TMP14:%.*]] = bitcast i32* [[SCALAR_GEP40]] to <4 x i32>*
; CHECK-NEXT:    [[WIDE_MASKED_LOAD50:%.*]] = call <4 x i32> @llvm.masked.load.v4i32.p0v4i32(<4 x i32>* [[TMP14]], i32 4, <4 x i1> [[TMP13]], <4 x i32> undef)
; CHECK-NEXT:    [[TMP15:%.*]] = bitcast i32* [[SCALAR_GEP20]] to <4 x i32>*
; CHECK-NEXT:    call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> [[WIDE_MASKED_LOAD50]], <4 x i32>* [[TMP15]], i32 4, <4 x i1> [[TMP13]])
; CHECK-NEXT:    [[TMP16:%.*]] = bitcast i32* [[SCALAR_GEP40]] to <4 x i32>*
; CHECK-NEXT:    call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> [[WIDE_LOAD30]], <4 x i32>* [[TMP16]], i32 4, <4 x i1> [[TMP12]])
; CHECK-NEXT:    [[TMP17:%.*]] = add nuw nsw <4 x i64> [[TMP7]], <i64 4, i64 4, i64 4, i64 4>
; CHECK-NEXT:    [[TMP18:%.*]] = add nuw nsw i64 [[TMP8]], 4
; CHECK-NEXT:    [[TMP19:%.*]] = icmp eq <4 x i64> [[TMP17]], [[BROADCAST_SPLAT0]]
; CHECK-NEXT:    [[SCALAR_GEP60:%.*]] = getelementptr inbounds i32, i32* [[A0]], i64 [[TMP18]]
; CHECK-NEXT:    [[TMP20:%.*]] = bitcast i32* [[SCALAR_GEP60]] to <4 x i32>*
; CHECK-NEXT:    [[WIDE_LOAD70:%.*]] = load <4 x i32>, <4 x i32>* [[TMP20]], align 4
; CHECK-NEXT:    [[TMP21:%.*]] = and <4 x i32> [[WIDE_LOAD70]], <i32 1, i32 1, i32 1, i32 1>
; CHECK-NEXT:    [[TMP22:%.*]] = icmp eq <4 x i32> [[TMP21]], zeroinitializer
; CHECK-NEXT:    [[SCALAR_GEP80:%.*]] = getelementptr inbounds i32, i32* [[B0]], i64 [[TMP18]]
; CHECK-NEXT:    [[TMP23:%.*]] = xor <4 x i1> [[TMP22]], <i1 true, i1 true, i1 true, i1 true>
; CHECK-NEXT:    [[TMP24:%.*]] = bitcast i32* [[SCALAR_GEP80]] to <4 x i32>*
; CHECK-NEXT:    [[WIDE_MASKED_LOAD90:%.*]] = call <4 x i32> @llvm.masked.load.v4i32.p0v4i32(<4 x i32>* [[TMP24]], i32 4, <4 x i1> [[TMP23]], <4 x i32> undef)
; CHECK-NEXT:    [[TMP25:%.*]] = bitcast i32* [[SCALAR_GEP60]] to <4 x i32>*
; CHECK-NEXT:    call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> [[WIDE_MASKED_LOAD90]], <4 x i32>* [[TMP25]], i32 4, <4 x i1> [[TMP23]])
; CHECK-NEXT:    [[TMP26:%.*]] = bitcast i32* [[SCALAR_GEP80]] to <4 x i32>*
; CHECK-NEXT:    call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> [[WIDE_LOAD70]], <4 x i32>* [[TMP26]], i32 4, <4 x i1> [[TMP22]])
; CHECK-NEXT:    [[TMP27]] = add nuw nsw <4 x i64> [[TMP17]], <i64 4, i64 4, i64 4, i64 4>
; CHECK-NEXT:    [[TMP28]] = add nuw nsw i64 [[TMP18]], 4
; CHECK-NEXT:    [[TMP29:%.*]] = icmp eq <4 x i64> [[TMP27]], [[BROADCAST_SPLAT0]]
; CHECK-NEXT:    [[DOTEXTRACT_0_0:%.*]] = extractelement <4 x i1> [[TMP29]], i32 0
; CHECK-NEXT:    [[INDEX_NEXT0]] = add i64 [[INDEX0]], 12
; CHECK-NEXT:    [[TMP30:%.*]] = icmp eq i64 [[INDEX_NEXT0]], [[N_VEC0]]
; CHECK-NEXT:    br i1 [[TMP30]], label [[VPLANNEDBB0:%.*]], label [[VECTOR_BODY0]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB:
; CHECK-NEXT:    [[TMP31:%.*]] = mul i64 1, [[N_VEC0]]
; CHECK-NEXT:    [[TMP32:%.*]] = add i64 0, [[TMP31]]
; CHECK-NEXT:    br label [[MIDDLE_BLOCK0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  middle.block:
; CHECK-NEXT:    [[CMP_N0:%.*]] = icmp eq i64 [[WIDE_TRIP_COUNT0]], [[N_VEC0]]
; CHECK-NEXT:    br i1 [[CMP_N0]], label [[DIR_OMP_END_SIMD_30:%.*]], label [[SCALAR_PH0]]
; CHECK-EMPTY:
; CHECK-NEXT:  scalar.ph:
; CHECK-NEXT:    [[BC_RESUME_VAL0:%.*]] = phi i64 [ 0, [[DIR_OMP_SIMD_10]] ], [ [[TMP32]], [[MIDDLE_BLOCK0]] ]
; CHECK-NEXT:    br label [[OMP_INNER_FOR_BODY0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  omp.inner.for.body:
; CHECK-NEXT:    [[INDVARS_IV0:%.*]] = phi i64 [ [[BC_RESUME_VAL0]], [[SCALAR_PH0]] ], [ [[INDVARS_IV_NEXT0:%.*]], [[OMP_BODY_CONTINUE0:%.*]] ]
; CHECK-NEXT:    [[ARRAYIDX0:%.*]] = getelementptr inbounds i32, i32* [[A0]], i64 [[INDVARS_IV0]]
; CHECK-NEXT:    [[TMP33:%.*]] = load i32, i32* [[ARRAYIDX0]], align 4
; CHECK-NEXT:    [[TMP34:%.*]] = and i32 [[TMP33]], 1
; CHECK-NEXT:    [[TOBOOL0:%.*]] = icmp eq i32 [[TMP34]], 0
; CHECK-NEXT:    [[ARRAYIDX130:%.*]] = getelementptr inbounds i32, i32* [[B0]], i64 [[INDVARS_IV0]]
; CHECK-NEXT:    br i1 [[TOBOOL0]], label [[IF_ELSE0:%.*]], label [[IF_THEN0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  if.then:
; CHECK-NEXT:    [[TMP35:%.*]] = load i32, i32* [[ARRAYIDX130]], align 4
; CHECK-NEXT:    store i32 [[TMP35]], i32* [[ARRAYIDX0]], align 4
; CHECK-NEXT:    br label [[OMP_BODY_CONTINUE0]]
; CHECK-EMPTY:
; CHECK-NEXT:  if.else:
; CHECK-NEXT:    store i32 [[TMP33]], i32* [[ARRAYIDX130]], align 4
; CHECK-NEXT:    br label [[OMP_BODY_CONTINUE0]]
; CHECK-EMPTY:
; CHECK-NEXT:  omp.body.continue:
; CHECK-NEXT:    [[INDVARS_IV_NEXT0]] = add nuw nsw i64 [[INDVARS_IV0]], 1
; CHECK-NEXT:    [[EXITCOND0:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT0]], [[WIDE_TRIP_COUNT0]]
; CHECK-NEXT:    br i1 [[EXITCOND0]], label [[DIR_OMP_END_SIMD_3_LOOPEXIT0:%.*]], label [[OMP_INNER_FOR_BODY0]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.END.SIMD.3.loopexit:
; CHECK-NEXT:    br label [[DIR_OMP_END_SIMD_30]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.END.SIMD.3:
; CHECK-NEXT:    br label [[OMP_PRECOND_END0]]
; CHECK-EMPTY:
; CHECK-NEXT:  omp.precond.end:
; CHECK-NEXT:    ret void
; CHECK-NEXT:  }

entry:
  %cmp = icmp sgt i32 %n, 0
  br i1 %cmp, label %DIR.OMP.SIMD.2, label %omp.precond.end

DIR.OMP.SIMD.2:                                   ; preds = %entry
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.NORMALIZED.IV"(i8* null), "QUAL.OMP.NORMALIZED.UB"(i8* null) ]
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %DIR.OMP.SIMD.2
  %wide.trip.count = sext i32 %n to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.body.continue, %DIR.OMP.SIMD.1
  %indvars.iv = phi i64 [ 0, %DIR.OMP.SIMD.1 ], [ %indvars.iv.next, %omp.body.continue ]
  %arrayidx = getelementptr inbounds i32, i32* %a, i64 %indvars.iv
  %1 = load i32, i32* %arrayidx, align 4
  %2 = and i32 %1, 1
  %tobool = icmp eq i32 %2, 0
  %arrayidx13 = getelementptr inbounds i32, i32* %b, i64 %indvars.iv
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %omp.inner.for.body
  %3 = load i32, i32* %arrayidx13, align 4
  store i32 %3, i32* %arrayidx, align 4
  br label %omp.body.continue

if.else:                                          ; preds = %omp.inner.for.body
  store i32 %1, i32* %arrayidx13, align 4
  br label %omp.body.continue

omp.body.continue:                                ; preds = %if.then, %if.else
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond, label %DIR.OMP.END.SIMD.3, label %omp.inner.for.body

DIR.OMP.END.SIMD.3:                               ; preds = %omp.body.continue
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %DIR.OMP.END.SIMD.3, %entry
  ret void
}

declare token @llvm.directive.region.entry() nounwind
declare void @llvm.directive.region.exit(token) nounwind
