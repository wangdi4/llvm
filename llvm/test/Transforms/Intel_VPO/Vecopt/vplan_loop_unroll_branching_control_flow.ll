; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -S < %s -vplan-vec -loop-simplify --vplan-force-vf=4 --vplan-force-uf=3 \
; RUN: --vplan-print-after-unroll -disable-output | FileCheck %s --check-prefix=VPLAN
; RUN: opt -S < %s -vplan-vec -loop-simplify --vplan-force-vf=4 --vplan-force-uf=3  \
; RUN: | FileCheck %s --check-prefix=CG

; void foo(int *a, int *b, int n) {
;   #pragma omp simd
;   for (int i = 0; i < n; i++) {
;     if (a[i] % 2)
;       a[i] = b[i];
;     else
;       b[i] = a[i];
;   }
; }

define dso_local void @divergent_control_flow(i32* nocapture %a, i32* nocapture %b, i32 %n) local_unnamed_addr #0 {
; VPLAN-LABEL:  VPlan after VPlan loop unrolling:
; VPLAN-NEXT:  VPlan IR for: divergent_control_flow:omp.inner.for.body
; VPLAN-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; VPLAN-NEXT:     [DA: Uni] br [[BB1:BB[0-9]+]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    [[BB1]]: # preds: [[BB0]]
; VPLAN-NEXT:     [DA: Div] i64 [[VP_INDVARS_IV_IND_INIT:%.*]] = induction-init{add} i64 live-in0 i64 1
; VPLAN-NEXT:     [DA: Uni] i64 [[VP_INDVARS_IV_IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; VPLAN-NEXT:     [DA: Uni] i64 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i64 [[WIDE_TRIP_COUNT0:%.*]], UF = 3
; VPLAN-NEXT:     [DA: Uni] br [[BB2:BB[0-9]+]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    [[BB2]]: # preds: [[BB1]], cloned.[[BB3:BB[0-9]+]]
; VPLAN-NEXT:     [DA: Div] i64 [[VP_INDVARS_IV:%.*]] = phi  [ i64 [[VP_INDVARS_IV_IND_INIT]], [[BB1]] ],  [ i64 [[VP_INDVARS_IV_NEXT:%.*]], cloned.[[BB3]] ]
; VPLAN-NEXT:     [DA: Div] i32* [[VP_ARRAYIDX:%.*]] = getelementptr inbounds i32* [[A0:%.*]] i64 [[VP_INDVARS_IV]]
; VPLAN-NEXT:     [DA: Div] i32 [[VP0:%.*]] = load i32* [[VP_ARRAYIDX]]
; VPLAN-NEXT:     [DA: Div] i32 [[VP1:%.*]] = and i32 [[VP0]] i32 1
; VPLAN-NEXT:     [DA: Div] i1 [[VP_TOBOOL:%.*]] = icmp eq i32 [[VP1]] i32 0
; VPLAN-NEXT:     [DA: Div] i1 [[VP_TOBOOL_NOT:%.*]] = not i1 [[VP_TOBOOL]]
; VPLAN-NEXT:     [DA: Div] i32* [[VP_ARRAYIDX13:%.*]] = getelementptr inbounds i32* [[B0:%.*]] i64 [[VP_INDVARS_IV]]
; VPLAN-NEXT:     [DA: Uni] br [[BB4:BB[0-9]+]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    [[BB4]]: # preds: [[BB2]]
; VPLAN-NEXT:     [DA: Div] i1 [[VP2:%.*]] = block-predicate i1 [[VP_TOBOOL_NOT]]
; VPLAN-NEXT:     [DA: Div] i32 [[VP3:%.*]] = load i32* [[VP_ARRAYIDX13]]
; VPLAN-NEXT:     [DA: Div] store i32 [[VP3]] i32* [[VP_ARRAYIDX]]
; VPLAN-NEXT:     [DA: Uni] br [[BB5:BB[0-9]+]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    [[BB5]]: # preds: [[BB4]]
; VPLAN-NEXT:     [DA: Div] i1 [[VP4:%.*]] = block-predicate i1 [[VP_TOBOOL]]
; VPLAN-NEXT:     [DA: Div] store i32 [[VP0]] i32* [[VP_ARRAYIDX13]]
; VPLAN-NEXT:     [DA: Uni] br [[BB6:BB[0-9]+]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    [[BB6]]: # preds: [[BB5]]
; VPLAN-NEXT:     [DA: Div] i32 [[VP_PHI_BLEND_BB3:%.*]] = blend [ i32 42, i1 [[VP_TOBOOL_NOT]] ], [ i32 0, i1 [[VP_TOBOOL]] ]
; VPLAN-NEXT:     [DA: Div] i64 [[VP_INDVARS_IV_NEXT_1:%.*]] = add i64 [[VP_INDVARS_IV]] i64 [[VP_INDVARS_IV_IND_INIT_STEP]]
; VPLAN-NEXT:     [DA: Uni] i1 [[VP_VECTOR_LOOP_EXITCOND:%.*]] = icmp uge i64 [[VP_INDVARS_IV_NEXT_1]] i64 [[VP_VECTOR_TRIP_COUNT]]
; VPLAN-NEXT:     [DA: Uni] br cloned.[[BB7:BB[0-9]+]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    cloned.[[BB7]]: # preds: [[BB6]]
; VPLAN-NEXT:     [DA: Div] i32* [[VP_ARRAYIDX_1:%.*]] = getelementptr inbounds i32* [[A0]] i64 [[VP_INDVARS_IV_NEXT_1]]
; VPLAN-NEXT:     [DA: Div] i32 [[VP5:%.*]] = load i32* [[VP_ARRAYIDX_1]]
; VPLAN-NEXT:     [DA: Div] i32 [[VP6:%.*]] = and i32 [[VP5]] i32 1
; VPLAN-NEXT:     [DA: Div] i1 [[VP_TOBOOL_1:%.*]] = icmp eq i32 [[VP6]] i32 0
; VPLAN-NEXT:     [DA: Div] i1 [[VP7:%.*]] = not i1 [[VP_TOBOOL_1]]
; VPLAN-NEXT:     [DA: Div] i32* [[VP_ARRAYIDX13_1:%.*]] = getelementptr inbounds i32* [[B0]] i64 [[VP_INDVARS_IV_NEXT_1]]
; VPLAN-NEXT:     [DA: Uni] br cloned.[[BB8:BB[0-9]+]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    cloned.[[BB8]]: # preds: cloned.[[BB7]]
; VPLAN-NEXT:     [DA: Div] i1 [[VP8:%.*]] = block-predicate i1 [[VP7]]
; VPLAN-NEXT:     [DA: Div] i32 [[VP9:%.*]] = load i32* [[VP_ARRAYIDX13_1]]
; VPLAN-NEXT:     [DA: Div] store i32 [[VP9]] i32* [[VP_ARRAYIDX_1]]
; VPLAN-NEXT:     [DA: Uni] br cloned.[[BB9:BB[0-9]+]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    cloned.[[BB9]]: # preds: cloned.[[BB8]]
; VPLAN-NEXT:     [DA: Div] i1 [[VP10:%.*]] = block-predicate i1 [[VP_TOBOOL_1]]
; VPLAN-NEXT:     [DA: Div] store i32 [[VP5]] i32* [[VP_ARRAYIDX13_1]]
; VPLAN-NEXT:     [DA: Uni] br cloned.[[BB10:BB[0-9]+]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    cloned.[[BB10]]: # preds: cloned.[[BB9]]
; VPLAN-NEXT:     [DA: Div] i32 [[VP11:%.*]] = blend [ i32 42, i1 [[VP7]] ], [ i32 0, i1 [[VP_TOBOOL_1]] ]
; VPLAN-NEXT:     [DA: Div] i64 [[VP_INDVARS_IV_NEXT_2:%.*]] = add i64 [[VP_INDVARS_IV_NEXT_1]] i64 [[VP_INDVARS_IV_IND_INIT_STEP]]
; VPLAN-NEXT:     [DA: Uni] i1 [[VP12:%.*]] = icmp uge i64 [[VP_INDVARS_IV_NEXT_2]] i64 [[VP_VECTOR_TRIP_COUNT]]
; VPLAN-NEXT:     [DA: Uni] br cloned.[[BB11:BB[0-9]+]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    cloned.[[BB11]]: # preds: cloned.[[BB10]]
; VPLAN-NEXT:     [DA: Div] i32* [[VP_ARRAYIDX_2:%.*]] = getelementptr inbounds i32* [[A0]] i64 [[VP_INDVARS_IV_NEXT_2]]
; VPLAN-NEXT:     [DA: Div] i32 [[VP13:%.*]] = load i32* [[VP_ARRAYIDX_2]]
; VPLAN-NEXT:     [DA: Div] i32 [[VP14:%.*]] = and i32 [[VP13]] i32 1
; VPLAN-NEXT:     [DA: Div] i1 [[VP_TOBOOL_2:%.*]] = icmp eq i32 [[VP14]] i32 0
; VPLAN-NEXT:     [DA: Div] i1 [[VP15:%.*]] = not i1 [[VP_TOBOOL_2]]
; VPLAN-NEXT:     [DA: Div] i32* [[VP_ARRAYIDX13_2:%.*]] = getelementptr inbounds i32* [[B0]] i64 [[VP_INDVARS_IV_NEXT_2]]
; VPLAN-NEXT:     [DA: Uni] br cloned.[[BB12:BB[0-9]+]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    cloned.[[BB12]]: # preds: cloned.[[BB11]]
; VPLAN-NEXT:     [DA: Div] i1 [[VP16:%.*]] = block-predicate i1 [[VP15]]
; VPLAN-NEXT:     [DA: Div] i32 [[VP17:%.*]] = load i32* [[VP_ARRAYIDX13_2]]
; VPLAN-NEXT:     [DA: Div] store i32 [[VP17]] i32* [[VP_ARRAYIDX_2]]
; VPLAN-NEXT:     [DA: Uni] br cloned.[[BB13:BB[0-9]+]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    cloned.[[BB13]]: # preds: cloned.[[BB12]]
; VPLAN-NEXT:     [DA: Div] i1 [[VP18:%.*]] = block-predicate i1 [[VP_TOBOOL_2]]
; VPLAN-NEXT:     [DA: Div] store i32 [[VP13]] i32* [[VP_ARRAYIDX13_2]]
; VPLAN-NEXT:     [DA: Uni] br cloned.[[BB3]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    cloned.[[BB3]]: # preds: cloned.[[BB13]]
; VPLAN-NEXT:     [DA: Div] i32 [[VP19:%.*]] = blend [ i32 42, i1 [[VP15]] ], [ i32 0, i1 [[VP_TOBOOL_2]] ]
; VPLAN-NEXT:     [DA: Div] i64 [[VP_INDVARS_IV_NEXT]] = add i64 [[VP_INDVARS_IV_NEXT_2]] i64 [[VP_INDVARS_IV_IND_INIT_STEP]]
; VPLAN-NEXT:     [DA: Uni] i1 [[VP20:%.*]] = icmp uge i64 [[VP_INDVARS_IV_NEXT]] i64 [[VP_VECTOR_TRIP_COUNT]]
; VPLAN-NEXT:     [DA: Uni] br i1 [[VP20]], [[BB14:BB[0-9]+]], [[BB2]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    [[BB14]]: # preds: cloned.[[BB3]]
; VPLAN-NEXT:     [DA: Uni] i64 [[VP_INDVARS_IV_IND_FINAL:%.*]] = induction-final{add} i64 0 i64 1
; VPLAN-NEXT:     [DA: Uni] br [[BB15:BB[0-9]+]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    [[BB15]]: # preds: [[BB14]]
; VPLAN-NEXT:     [DA: Uni] br <External Block>
; VPLAN-EMPTY:
; VPLAN-NEXT:  External Uses:
; VPLAN-NEXT:  Id: 0   no underlying for i64 [[VP_INDVARS_IV_IND_FINAL]]
;
;
; CG:  define dso_local void @divergent_control_flow(i32* nocapture [[A0:%.*]], i32* nocapture [[B0:%.*]], i32 [[N0:%.*]]) local_unnamed_addr {
; CG-NEXT:  entry:
; CG-NEXT:    [[CMP0:%.*]] = icmp sgt i32 [[N0]], 0
; CG-NEXT:    br i1 [[CMP0]], label [[DIR_OMP_SIMD_20:%.*]], label [[OMP_PRECOND_END0:%.*]]
; CG-EMPTY:
; CG-NEXT:  DIR.OMP.SIMD.2:
; CG-NEXT:    br label [[DIR_OMP_SIMD_10:%.*]]
; CG-EMPTY:
; CG-NEXT:  DIR.OMP.SIMD.1:
; CG-NEXT:    [[WIDE_TRIP_COUNT0:%.*]] = sext i32 [[N0]] to i64
; CG-NEXT:    br label [[VPLANNEDBB0:%.*]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB:
; CG-NEXT:    [[N_MOD_VF0:%.*]] = urem i64 [[WIDE_TRIP_COUNT0]], 12
; CG-NEXT:    [[N_VEC0:%.*]] = sub nuw nsw i64 [[WIDE_TRIP_COUNT0]], [[N_MOD_VF0]]
; CG-NEXT:    [[TMP0:%.*]] = icmp eq i64 0, [[N_VEC0]]
; CG-NEXT:    br i1 [[TMP0]], label %[[MERGE_BLK0:.*]], label [[VPLANNEDBB10:%.*]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB1:
; CG-NEXT:    br label [[VPLANNEDBB20:%.*]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB2:
; CG-NEXT:    [[N_MOD_VF30:%.*]] = urem i64 [[WIDE_TRIP_COUNT0]], 12
; CG-NEXT:    [[N_VEC40:%.*]] = sub nuw nsw i64 [[WIDE_TRIP_COUNT0]], [[N_MOD_VF30]]
; CG-NEXT:    br label [[VECTOR_BODY0:%.*]]
; CG-EMPTY:
; CG-NEXT:  vector.body:
; CG-NEXT:    [[UNI_PHI0:%.*]] = phi i64 [ 0, [[VPLANNEDBB20]] ], [ [[TMP29:%.*]], [[VPLANNEDBB260:%.*]] ]
; CG-NEXT:    [[VEC_PHI0:%.*]] = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, [[VPLANNEDBB20]] ], [ [[TMP28:%.*]], [[VPLANNEDBB260]] ]
; CG-NEXT:    [[SCALAR_GEP0:%.*]] = getelementptr inbounds i32, i32* [[A0]], i64 [[UNI_PHI0]]
; CG-NEXT:    [[TMP1:%.*]] = bitcast i32* [[SCALAR_GEP0]] to <4 x i32>*
; CG-NEXT:    [[WIDE_LOAD0:%.*]] = load <4 x i32>, <4 x i32>* [[TMP1]], align 4
; CG-NEXT:    [[TMP2:%.*]] = and <4 x i32> [[WIDE_LOAD0]], <i32 1, i32 1, i32 1, i32 1>
; CG-NEXT:    [[TMP3:%.*]] = icmp eq <4 x i32> [[TMP2]], zeroinitializer
; CG-NEXT:    [[TMP4:%.*]] = xor <4 x i1> [[TMP3]], <i1 true, i1 true, i1 true, i1 true>
; CG-NEXT:    [[SCALAR_GEP60:%.*]] = getelementptr inbounds i32, i32* [[B0]], i64 [[UNI_PHI0]]
; CG-NEXT:    br label [[VPLANNEDBB70:%.*]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB7:
; CG-NEXT:    [[TMP5:%.*]] = bitcast i32* [[SCALAR_GEP60]] to <4 x i32>*
; CG-NEXT:    [[WIDE_MASKED_LOAD0:%.*]] = call <4 x i32> @llvm.masked.load.v4i32.p0v4i32(<4 x i32>* [[TMP5]], i32 4, <4 x i1> [[TMP4]], <4 x i32> poison)
; CG-NEXT:    [[TMP6:%.*]] = bitcast i32* [[SCALAR_GEP0]] to <4 x i32>*
; CG-NEXT:    call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> [[WIDE_MASKED_LOAD0]], <4 x i32>* [[TMP6]], i32 4, <4 x i1> [[TMP4]])
; CG-NEXT:    br label [[VPLANNEDBB80:%.*]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB8:
; CG-NEXT:    [[TMP7:%.*]] = bitcast i32* [[SCALAR_GEP60]] to <4 x i32>*
; CG-NEXT:    call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> [[WIDE_LOAD0]], <4 x i32>* [[TMP7]], i32 4, <4 x i1> [[TMP3]])
; CG-NEXT:    br label [[VPLANNEDBB90:%.*]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB9:
; CG-NEXT:    [[PREDBLEND0:%.*]] = select <4 x i1> [[TMP3]], <4 x i32> zeroinitializer, <4 x i32> <i32 42, i32 42, i32 42, i32 42>
; CG-NEXT:    [[TMP8:%.*]] = add nuw nsw <4 x i64> [[VEC_PHI0]], <i64 4, i64 4, i64 4, i64 4>
; CG-NEXT:    [[TMP9:%.*]] = add nuw nsw i64 [[UNI_PHI0]], 4
; CG-NEXT:    [[TMP10:%.*]] = icmp uge i64 [[TMP9]], [[N_VEC40]]
; CG-NEXT:    br label [[VPLANNEDBB100:%.*]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB10:
; CG-NEXT:    [[SCALAR_GEP110:%.*]] = getelementptr inbounds i32, i32* [[A0]], i64 [[TMP9]]
; CG-NEXT:    [[TMP11:%.*]] = bitcast i32* [[SCALAR_GEP110]] to <4 x i32>*
; CG-NEXT:    [[WIDE_LOAD120:%.*]] = load <4 x i32>, <4 x i32>* [[TMP11]], align 4
; CG-NEXT:    [[TMP12:%.*]] = and <4 x i32> [[WIDE_LOAD120]], <i32 1, i32 1, i32 1, i32 1>
; CG-NEXT:    [[TMP13:%.*]] = icmp eq <4 x i32> [[TMP12]], zeroinitializer
; CG-NEXT:    [[TMP14:%.*]] = xor <4 x i1> [[TMP13]], <i1 true, i1 true, i1 true, i1 true>
; CG-NEXT:    [[SCALAR_GEP130:%.*]] = getelementptr inbounds i32, i32* [[B0]], i64 [[TMP9]]
; CG-NEXT:    br label [[VPLANNEDBB140:%.*]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB14:
; CG-NEXT:    [[TMP15:%.*]] = bitcast i32* [[SCALAR_GEP130]] to <4 x i32>*
; CG-NEXT:    [[WIDE_MASKED_LOAD150:%.*]] = call <4 x i32> @llvm.masked.load.v4i32.p0v4i32(<4 x i32>* [[TMP15]], i32 4, <4 x i1> [[TMP14]], <4 x i32> poison)
; CG-NEXT:    [[TMP16:%.*]] = bitcast i32* [[SCALAR_GEP110]] to <4 x i32>*
; CG-NEXT:    call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> [[WIDE_MASKED_LOAD150]], <4 x i32>* [[TMP16]], i32 4, <4 x i1> [[TMP14]])
; CG-NEXT:    br label [[VPLANNEDBB160:%.*]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB16:
; CG-NEXT:    [[TMP17:%.*]] = bitcast i32* [[SCALAR_GEP130]] to <4 x i32>*
; CG-NEXT:    call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> [[WIDE_LOAD120]], <4 x i32>* [[TMP17]], i32 4, <4 x i1> [[TMP13]])
; CG-NEXT:    br label [[VPLANNEDBB170:%.*]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB17:
; CG-NEXT:    [[PREDBLEND180:%.*]] = select <4 x i1> [[TMP13]], <4 x i32> zeroinitializer, <4 x i32> <i32 42, i32 42, i32 42, i32 42>
; CG-NEXT:    [[TMP18:%.*]] = add nuw nsw <4 x i64> [[TMP8]], <i64 4, i64 4, i64 4, i64 4>
; CG-NEXT:    [[TMP19:%.*]] = add nuw nsw i64 [[TMP9]], 4
; CG-NEXT:    [[TMP20:%.*]] = icmp uge i64 [[TMP19]], [[N_VEC40]]
; CG-NEXT:    br label [[VPLANNEDBB190:%.*]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB19:
; CG-NEXT:    [[SCALAR_GEP200:%.*]] = getelementptr inbounds i32, i32* [[A0]], i64 [[TMP19]]
; CG-NEXT:    [[TMP21:%.*]] = bitcast i32* [[SCALAR_GEP200]] to <4 x i32>*
; CG-NEXT:    [[WIDE_LOAD210:%.*]] = load <4 x i32>, <4 x i32>* [[TMP21]], align 4
; CG-NEXT:    [[TMP22:%.*]] = and <4 x i32> [[WIDE_LOAD210]], <i32 1, i32 1, i32 1, i32 1>
; CG-NEXT:    [[TMP23:%.*]] = icmp eq <4 x i32> [[TMP22]], zeroinitializer
; CG-NEXT:    [[TMP24:%.*]] = xor <4 x i1> [[TMP23]], <i1 true, i1 true, i1 true, i1 true>
; CG-NEXT:    [[SCALAR_GEP220:%.*]] = getelementptr inbounds i32, i32* [[B0]], i64 [[TMP19]]
; CG-NEXT:    br label [[VPLANNEDBB230:%.*]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB23:
; CG-NEXT:    [[TMP25:%.*]] = bitcast i32* [[SCALAR_GEP220]] to <4 x i32>*
; CG-NEXT:    [[WIDE_MASKED_LOAD240:%.*]] = call <4 x i32> @llvm.masked.load.v4i32.p0v4i32(<4 x i32>* [[TMP25]], i32 4, <4 x i1> [[TMP24]], <4 x i32> poison)
; CG-NEXT:    [[TMP26:%.*]] = bitcast i32* [[SCALAR_GEP200]] to <4 x i32>*
; CG-NEXT:    call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> [[WIDE_MASKED_LOAD240]], <4 x i32>* [[TMP26]], i32 4, <4 x i1> [[TMP24]])
; CG-NEXT:    br label [[VPLANNEDBB250:%.*]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB25:
; CG-NEXT:    [[TMP27:%.*]] = bitcast i32* [[SCALAR_GEP220]] to <4 x i32>*
; CG-NEXT:    call void @llvm.masked.store.v4i32.p0v4i32(<4 x i32> [[WIDE_LOAD210]], <4 x i32>* [[TMP27]], i32 4, <4 x i1> [[TMP23]])
; CG-NEXT:    br label [[VPLANNEDBB260]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB26:
; CG-NEXT:    [[PREDBLEND270:%.*]] = select <4 x i1> [[TMP23]], <4 x i32> zeroinitializer, <4 x i32> <i32 42, i32 42, i32 42, i32 42>
; CG-NEXT:    [[TMP28]] = add nuw nsw <4 x i64> [[TMP18]], <i64 4, i64 4, i64 4, i64 4>
; CG-NEXT:    [[TMP29]] = add nuw nsw i64 [[TMP19]], 4
; CG-NEXT:    [[TMP30:%.*]] = icmp uge i64 [[TMP29]], [[N_VEC40]]
; CG-NEXT:    br i1 [[TMP30]], label [[VPLANNEDBB280:%.*]], label [[VECTOR_BODY0]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB28:
; CG-NEXT:    [[TMP31:%.*]] = mul i64 1, [[N_VEC40]]
; CG-NEXT:    [[TMP32:%.*]] = add i64 0, [[TMP31]]
; CG-NEXT:    br label [[VPLANNEDBB290:%.*]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB29:
; CG-NEXT:    br label [[VPLANNEDBB300:%.*]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB30:
; CG-NEXT:    [[TMP33:%.*]] = icmp eq i64 [[WIDE_TRIP_COUNT0]], [[N_VEC40]]
; CG-NEXT:    br i1 [[TMP33]], label [[FINAL_MERGE0:%.*]], label %[[MERGE_BLK0]]
; CG-EMPTY:
; CG-NEXT:  [[MERGE_BLK0]]:
; CG-NEXT:    [[UNI_PHI310:%.*]] = phi i64 [ [[TMP32]], [[VPLANNEDBB300]] ], [ 0, [[VPLANNEDBB0]] ]
; CG-NEXT:    br label %[[REMBLK0:.*]]
; CG-EMPTY:
; CG-NEXT:  [[REMBLK0]]:
; CG-NEXT:    br label [[OMP_INNER_FOR_BODY0:%.*]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB32:
; CG-NEXT:    br label [[FINAL_MERGE0]]
; CG-EMPTY:
; CG-NEXT:  final.merge:
; CG-NEXT:    [[UNI_PHI330:%.*]] = phi i64 [ [[INDVARS_IV_NEXT0:%.*]], [[VPLANNEDBB320:%.*]] ], [ [[TMP32]], [[VPLANNEDBB300]] ]
; CG-NEXT:    br label [[DIR_OMP_END_SIMD_30:%.*]]
; CG-EMPTY:
; CG-NEXT:  omp.inner.for.body:
; CG-NEXT:    [[INDVARS_IV0:%.*]] = phi i64 [ [[UNI_PHI310]], %[[REMBLK0]] ], [ [[INDVARS_IV_NEXT0]], [[OMP_BODY_CONTINUE0:%.*]] ]
; CG-NEXT:    [[ARRAYIDX0:%.*]] = getelementptr inbounds i32, i32* [[A0]], i64 [[INDVARS_IV0]]
; CG-NEXT:    [[TMP34:%.*]] = load i32, i32* [[ARRAYIDX0]], align 4
; CG-NEXT:    [[TMP35:%.*]] = and i32 [[TMP34]], 1
; CG-NEXT:    [[TOBOOL0:%.*]] = icmp eq i32 [[TMP35]], 0
; CG-NEXT:    [[ARRAYIDX130:%.*]] = getelementptr inbounds i32, i32* [[B0]], i64 [[INDVARS_IV0]]
; CG-NEXT:    br i1 [[TOBOOL0]], label [[IF_ELSE0:%.*]], label [[IF_THEN0:%.*]]
; CG-EMPTY:
; CG-NEXT:  if.then:
; CG-NEXT:    [[TMP36:%.*]] = load i32, i32* [[ARRAYIDX130]], align 4
; CG-NEXT:    store i32 [[TMP36]], i32* [[ARRAYIDX0]], align 4
; CG-NEXT:    br label [[OMP_BODY_CONTINUE0]]
; CG-EMPTY:
; CG-NEXT:  if.else:
; CG-NEXT:    store i32 [[TMP34]], i32* [[ARRAYIDX130]], align 4
; CG-NEXT:    br label [[OMP_BODY_CONTINUE0]]
; CG-EMPTY:
; CG-NEXT:  omp.body.continue:
; CG-NEXT:    [[PHI0:%.*]] = phi i32 [ 42, [[IF_THEN0]] ], [ 0, [[IF_ELSE0]] ]
; CG-NEXT:    [[INDVARS_IV_NEXT0]] = add nuw nsw i64 [[INDVARS_IV0]], 1
; CG-NEXT:    [[EXITCOND0:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT0]], [[WIDE_TRIP_COUNT0]]
; CG-NEXT:    br i1 [[EXITCOND0]], label [[VPLANNEDBB320]], label [[OMP_INNER_FOR_BODY0]]
; CG-EMPTY:
; CG-NEXT:  DIR.OMP.END.SIMD.3:
; CG-NEXT:    br label [[OMP_PRECOND_END0]]
; CG-EMPTY:
; CG-NEXT:  omp.precond.end:
; CG-NEXT:    ret void
; CG-NEXT:  }
;
entry:
  %cmp = icmp sgt i32 %n, 0
  br i1 %cmp, label %DIR.OMP.SIMD.2, label %omp.precond.end

DIR.OMP.SIMD.2:                                   ; preds = %entry
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.NORMALIZED.IV"(i8* null), "QUAL.OMP.NORMALIZED.UB"(i8* null) ]
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %DIR.OMP.SIMD.2
  %wide.trip.count = sext i32 %n to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.body.continue, %DIR.OMP.SIMD.1
  %indvars.iv = phi i64 [ 0, %DIR.OMP.SIMD.1 ], [ %indvars.iv.next, %omp.body.continue ]
  %arrayidx = getelementptr inbounds i32, i32* %a, i64 %indvars.iv
  %1 = load i32, i32* %arrayidx, align 4
  %2 = and i32 %1, 1
  %tobool = icmp eq i32 %2, 0
  %arrayidx13 = getelementptr inbounds i32, i32* %b, i64 %indvars.iv
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %omp.inner.for.body
  %3 = load i32, i32* %arrayidx13, align 4
  store i32 %3, i32* %arrayidx, align 4
  br label %omp.body.continue

if.else:                                          ; preds = %omp.inner.for.body
  store i32 %1, i32* %arrayidx13, align 4
  br label %omp.body.continue

omp.body.continue:                                ; preds = %if.then, %if.else
  %phi = phi i32 [ 42, %if.then ], [0, %if.else ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond, label %DIR.OMP.END.SIMD.3, label %omp.inner.for.body

DIR.OMP.END.SIMD.3:                               ; preds = %omp.body.continue
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %DIR.OMP.END.SIMD.3, %entry
  ret void
}

define dso_local void @uniform_control_flow(i32* nocapture %a, i32* nocapture %b, i32 %n) local_unnamed_addr #0 {
; VPLAN-LABEL:  VPlan after VPlan loop unrolling:
; VPLAN-NEXT:  VPlan IR for: uniform_control_flow:omp.inner.for.body
; VPLAN-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; VPLAN-NEXT:     [DA: Uni] br [[BB1:BB[0-9]+]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    [[BB1]]: # preds: [[BB0]]
; VPLAN-NEXT:     [DA: Div] i64 [[VP_INDVARS_IV_IND_INIT:%.*]] = induction-init{add} i64 live-in0 i64 1
; VPLAN-NEXT:     [DA: Uni] i64 [[VP_INDVARS_IV_IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; VPLAN-NEXT:     [DA: Uni] i64 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i64 [[WIDE_TRIP_COUNT0:%.*]], UF = 3
; VPLAN-NEXT:     [DA: Uni] br [[BB2:BB[0-9]+]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    [[BB2]]: # preds: [[BB1]], cloned.[[BB3:BB[0-9]+]]
; VPLAN-NEXT:     [DA: Div] i64 [[VP_INDVARS_IV:%.*]] = phi  [ i64 [[VP_INDVARS_IV_IND_INIT]], [[BB1]] ],  [ i64 [[VP_INDVARS_IV_NEXT:%.*]], cloned.[[BB3]] ]
; VPLAN-NEXT:     [DA: Div] i32* [[VP_ARRAYIDX:%.*]] = getelementptr inbounds i32* [[A0:%.*]] i64 [[VP_INDVARS_IV]]
; VPLAN-NEXT:     [DA: Div] i32 [[VP0:%.*]] = load i32* [[VP_ARRAYIDX]]
; VPLAN-NEXT:     [DA: Div] i32 [[VP1:%.*]] = and i32 [[VP0]] i32 1
; VPLAN-NEXT:     [DA: Uni] i1 [[VP_TOBOOL:%.*]] = icmp eq i32 [[N0:%.*]] i32 42
; VPLAN-NEXT:     [DA: Div] i32* [[VP_ARRAYIDX13:%.*]] = getelementptr inbounds i32* [[B0:%.*]] i64 [[VP_INDVARS_IV]]
; VPLAN-NEXT:     [DA: Uni] br i1 [[VP_TOBOOL]], [[BB4:BB[0-9]+]], [[BB5:BB[0-9]+]]
; VPLAN-EMPTY:
; VPLAN-NEXT:      [[BB5]]: # preds: [[BB2]]
; VPLAN-NEXT:       [DA: Div] i32 [[VP2:%.*]] = load i32* [[VP_ARRAYIDX13]]
; VPLAN-NEXT:       [DA: Div] store i32 [[VP2]] i32* [[VP_ARRAYIDX]]
; VPLAN-NEXT:       [DA: Uni] br [[BB6:BB[0-9]+]]
; VPLAN-EMPTY:
; VPLAN-NEXT:      [[BB4]]: # preds: [[BB2]]
; VPLAN-NEXT:       [DA: Div] store i32 [[VP0]] i32* [[VP_ARRAYIDX13]]
; VPLAN-NEXT:       [DA: Uni] br [[BB6]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    [[BB6]]: # preds: [[BB5]], [[BB4]]
; VPLAN-NEXT:     [DA: Uni] i32 [[VP_PHI:%.*]] = phi  [ i32 42, [[BB5]] ],  [ i32 0, [[BB4]] ]
; VPLAN-NEXT:     [DA: Div] i64 [[VP_INDVARS_IV_NEXT_1:%.*]] = add i64 [[VP_INDVARS_IV]] i64 [[VP_INDVARS_IV_IND_INIT_STEP]]
; VPLAN-NEXT:     [DA: Uni] i1 [[VP_VECTOR_LOOP_EXITCOND:%.*]] = icmp uge i64 [[VP_INDVARS_IV_NEXT_1]] i64 [[VP_VECTOR_TRIP_COUNT]]
; VPLAN-NEXT:     [DA: Uni] br cloned.[[BB7:BB[0-9]+]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    cloned.[[BB7]]: # preds: [[BB6]]
; VPLAN-NEXT:     [DA: Div] i32* [[VP_ARRAYIDX_1:%.*]] = getelementptr inbounds i32* [[A0]] i64 [[VP_INDVARS_IV_NEXT_1]]
; VPLAN-NEXT:     [DA: Div] i32 [[VP3:%.*]] = load i32* [[VP_ARRAYIDX_1]]
; VPLAN-NEXT:     [DA: Div] i32 [[VP4:%.*]] = and i32 [[VP3]] i32 1
; VPLAN-NEXT:     [DA: Uni] i1 [[VP_TOBOOL_1:%.*]] = icmp eq i32 [[N0]] i32 42
; VPLAN-NEXT:     [DA: Div] i32* [[VP_ARRAYIDX13_1:%.*]] = getelementptr inbounds i32* [[B0]] i64 [[VP_INDVARS_IV_NEXT_1]]
; VPLAN-NEXT:     [DA: Uni] br i1 [[VP_TOBOOL_1]], cloned.[[BB8:BB[0-9]+]], cloned.[[BB9:BB[0-9]+]]
; VPLAN-EMPTY:
; VPLAN-NEXT:      cloned.[[BB9]]: # preds: cloned.[[BB7]]
; VPLAN-NEXT:       [DA: Div] i32 [[VP5:%.*]] = load i32* [[VP_ARRAYIDX13_1]]
; VPLAN-NEXT:       [DA: Div] store i32 [[VP5]] i32* [[VP_ARRAYIDX_1]]
; VPLAN-NEXT:       [DA: Uni] br cloned.[[BB10:BB[0-9]+]]
; VPLAN-EMPTY:
; VPLAN-NEXT:      cloned.[[BB8]]: # preds: cloned.[[BB7]]
; VPLAN-NEXT:       [DA: Div] store i32 [[VP3]] i32* [[VP_ARRAYIDX13_1]]
; VPLAN-NEXT:       [DA: Uni] br cloned.[[BB10]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    cloned.[[BB10]]: # preds: cloned.[[BB9]], cloned.[[BB8]]
; VPLAN-NEXT:     [DA: Uni] i32 [[VP_PHI_1:%.*]] = phi  [ i32 42, cloned.[[BB9]] ],  [ i32 0, cloned.[[BB8]] ]
; VPLAN-NEXT:     [DA: Div] i64 [[VP_INDVARS_IV_NEXT_2:%.*]] = add i64 [[VP_INDVARS_IV_NEXT_1]] i64 [[VP_INDVARS_IV_IND_INIT_STEP]]
; VPLAN-NEXT:     [DA: Uni] i1 [[VP6:%.*]] = icmp uge i64 [[VP_INDVARS_IV_NEXT_2]] i64 [[VP_VECTOR_TRIP_COUNT]]
; VPLAN-NEXT:     [DA: Uni] br cloned.[[BB11:BB[0-9]+]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    cloned.[[BB11]]: # preds: cloned.[[BB10]]
; VPLAN-NEXT:     [DA: Div] i32* [[VP_ARRAYIDX_2:%.*]] = getelementptr inbounds i32* [[A0]] i64 [[VP_INDVARS_IV_NEXT_2]]
; VPLAN-NEXT:     [DA: Div] i32 [[VP7:%.*]] = load i32* [[VP_ARRAYIDX_2]]
; VPLAN-NEXT:     [DA: Div] i32 [[VP8:%.*]] = and i32 [[VP7]] i32 1
; VPLAN-NEXT:     [DA: Uni] i1 [[VP_TOBOOL_2:%.*]] = icmp eq i32 [[N0]] i32 42
; VPLAN-NEXT:     [DA: Div] i32* [[VP_ARRAYIDX13_2:%.*]] = getelementptr inbounds i32* [[B0]] i64 [[VP_INDVARS_IV_NEXT_2]]
; VPLAN-NEXT:     [DA: Uni] br i1 [[VP_TOBOOL_2]], cloned.[[BB12:BB[0-9]+]], cloned.[[BB13:BB[0-9]+]]
; VPLAN-EMPTY:
; VPLAN-NEXT:      cloned.[[BB13]]: # preds: cloned.[[BB11]]
; VPLAN-NEXT:       [DA: Div] i32 [[VP9:%.*]] = load i32* [[VP_ARRAYIDX13_2]]
; VPLAN-NEXT:       [DA: Div] store i32 [[VP9]] i32* [[VP_ARRAYIDX_2]]
; VPLAN-NEXT:       [DA: Uni] br cloned.[[BB3]]
; VPLAN-EMPTY:
; VPLAN-NEXT:      cloned.[[BB12]]: # preds: cloned.[[BB11]]
; VPLAN-NEXT:       [DA: Div] store i32 [[VP7]] i32* [[VP_ARRAYIDX13_2]]
; VPLAN-NEXT:       [DA: Uni] br cloned.[[BB3]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    cloned.[[BB3]]: # preds: cloned.[[BB13]], cloned.[[BB12]]
; VPLAN-NEXT:     [DA: Uni] i32 [[VP_PHI_2:%.*]] = phi  [ i32 42, cloned.[[BB13]] ],  [ i32 0, cloned.[[BB12]] ]
; VPLAN-NEXT:     [DA: Div] i64 [[VP_INDVARS_IV_NEXT]] = add i64 [[VP_INDVARS_IV_NEXT_2]] i64 [[VP_INDVARS_IV_IND_INIT_STEP]]
; VPLAN-NEXT:     [DA: Uni] i1 [[VP10:%.*]] = icmp uge i64 [[VP_INDVARS_IV_NEXT]] i64 [[VP_VECTOR_TRIP_COUNT]]
; VPLAN-NEXT:     [DA: Uni] br i1 [[VP10]], [[BB14:BB[0-9]+]], [[BB2]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    [[BB14]]: # preds: cloned.[[BB3]]
; VPLAN-NEXT:     [DA: Uni] i64 [[VP_INDVARS_IV_IND_FINAL:%.*]] = induction-final{add} i64 0 i64 1
; VPLAN-NEXT:     [DA: Uni] br [[BB15:BB[0-9]+]]
; VPLAN-EMPTY:
; VPLAN-NEXT:    [[BB15]]: # preds: [[BB14]]
; VPLAN-NEXT:     [DA: Uni] br <External Block>
; VPLAN-EMPTY:
; VPLAN-NEXT:  External Uses:
; VPLAN-NEXT:  Id: 0   no underlying for i64 [[VP_INDVARS_IV_IND_FINAL]]
;
;
; CG:  define dso_local void @uniform_control_flow(i32* nocapture [[A0:%.*]], i32* nocapture [[B0:%.*]], i32 [[N0:%.*]]) local_unnamed_addr {
; CG-NEXT:  entry:
; CG-NEXT:    [[CMP0:%.*]] = icmp sgt i32 [[N0]], 0
; CG-NEXT:    br i1 [[CMP0]], label [[DIR_OMP_SIMD_20:%.*]], label [[OMP_PRECOND_END0:%.*]]
; CG-EMPTY:
; CG-NEXT:  DIR.OMP.SIMD.2:
; CG-NEXT:    br label [[DIR_OMP_SIMD_10:%.*]]
; CG-EMPTY:
; CG-NEXT:  DIR.OMP.SIMD.1:
; CG-NEXT:    [[WIDE_TRIP_COUNT0:%.*]] = sext i32 [[N0]] to i64
; CG-NEXT:    br label [[VPLANNEDBB0:%.*]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB:
; CG-NEXT:    [[N_MOD_VF0:%.*]] = urem i64 [[WIDE_TRIP_COUNT0]], 12
; CG-NEXT:    [[N_VEC0:%.*]] = sub nuw nsw i64 [[WIDE_TRIP_COUNT0]], [[N_MOD_VF0]]
; CG-NEXT:    [[TMP0:%.*]] = icmp eq i64 0, [[N_VEC0]]
; CG-NEXT:    br i1 [[TMP0]], label %[[MERGE_BLK0:.*]], label [[VPLANNEDBB10:%.*]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB1:
; CG-NEXT:    br label [[VPLANNEDBB20:%.*]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB2:
; CG-NEXT:    [[N_MOD_VF30:%.*]] = urem i64 [[WIDE_TRIP_COUNT0]], 12
; CG-NEXT:    [[N_VEC40:%.*]] = sub nuw nsw i64 [[WIDE_TRIP_COUNT0]], [[N_MOD_VF30]]
; CG-NEXT:    br label [[VECTOR_BODY0:%.*]]
; CG-EMPTY:
; CG-NEXT:  vector.body:
; CG-NEXT:    [[UNI_PHI0:%.*]] = phi i64 [ 0, [[VPLANNEDBB20]] ], [ [[TMP26:%.*]], [[VPLANNEDBB280:%.*]] ]
; CG-NEXT:    [[VEC_PHI0:%.*]] = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, [[VPLANNEDBB20]] ], [ [[TMP25:%.*]], [[VPLANNEDBB280]] ]
; CG-NEXT:    [[SCALAR_GEP0:%.*]] = getelementptr inbounds i32, i32* [[A0]], i64 [[UNI_PHI0]]
; CG-NEXT:    [[TMP1:%.*]] = bitcast i32* [[SCALAR_GEP0]] to <4 x i32>*
; CG-NEXT:    [[WIDE_LOAD0:%.*]] = load <4 x i32>, <4 x i32>* [[TMP1]], align 4
; CG-NEXT:    [[TMP2:%.*]] = and <4 x i32> [[WIDE_LOAD0]], <i32 1, i32 1, i32 1, i32 1>
; CG-NEXT:    [[TMP3:%.*]] = icmp eq i32 [[N0]], 42
; CG-NEXT:    [[SCALAR_GEP60:%.*]] = getelementptr inbounds i32, i32* [[B0]], i64 [[UNI_PHI0]]
; CG-NEXT:    br i1 [[TMP3]], label [[VPLANNEDBB70:%.*]], label [[VPLANNEDBB80:%.*]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB8:
; CG-NEXT:    [[TMP4:%.*]] = bitcast i32* [[SCALAR_GEP60]] to <4 x i32>*
; CG-NEXT:    [[WIDE_LOAD90:%.*]] = load <4 x i32>, <4 x i32>* [[TMP4]], align 4
; CG-NEXT:    [[TMP5:%.*]] = bitcast i32* [[SCALAR_GEP0]] to <4 x i32>*
; CG-NEXT:    store <4 x i32> [[WIDE_LOAD90]], <4 x i32>* [[TMP5]], align 4
; CG-NEXT:    br label [[VPLANNEDBB100:%.*]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB7:
; CG-NEXT:    [[TMP6:%.*]] = bitcast i32* [[SCALAR_GEP60]] to <4 x i32>*
; CG-NEXT:    store <4 x i32> [[WIDE_LOAD0]], <4 x i32>* [[TMP6]], align 4
; CG-NEXT:    br label [[VPLANNEDBB100]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB10:
; CG-NEXT:    [[UNI_PHI110:%.*]] = phi i32 [ 42, [[VPLANNEDBB80]] ], [ 0, [[VPLANNEDBB70]] ]
; CG-NEXT:    [[TMP7:%.*]] = add nuw nsw <4 x i64> [[VEC_PHI0]], <i64 4, i64 4, i64 4, i64 4>
; CG-NEXT:    [[TMP8:%.*]] = add nuw nsw i64 [[UNI_PHI0]], 4
; CG-NEXT:    [[TMP9:%.*]] = icmp uge i64 [[TMP8]], [[N_VEC40]]
; CG-NEXT:    br label [[VPLANNEDBB120:%.*]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB12:
; CG-NEXT:    [[SCALAR_GEP130:%.*]] = getelementptr inbounds i32, i32* [[A0]], i64 [[TMP8]]
; CG-NEXT:    [[TMP10:%.*]] = bitcast i32* [[SCALAR_GEP130]] to <4 x i32>*
; CG-NEXT:    [[WIDE_LOAD140:%.*]] = load <4 x i32>, <4 x i32>* [[TMP10]], align 4
; CG-NEXT:    [[TMP11:%.*]] = and <4 x i32> [[WIDE_LOAD140]], <i32 1, i32 1, i32 1, i32 1>
; CG-NEXT:    [[TMP12:%.*]] = icmp eq i32 [[N0]], 42
; CG-NEXT:    [[SCALAR_GEP150:%.*]] = getelementptr inbounds i32, i32* [[B0]], i64 [[TMP8]]
; CG-NEXT:    br i1 [[TMP12]], label [[VPLANNEDBB160:%.*]], label [[VPLANNEDBB170:%.*]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB17:
; CG-NEXT:    [[TMP13:%.*]] = bitcast i32* [[SCALAR_GEP150]] to <4 x i32>*
; CG-NEXT:    [[WIDE_LOAD180:%.*]] = load <4 x i32>, <4 x i32>* [[TMP13]], align 4
; CG-NEXT:    [[TMP14:%.*]] = bitcast i32* [[SCALAR_GEP130]] to <4 x i32>*
; CG-NEXT:    store <4 x i32> [[WIDE_LOAD180]], <4 x i32>* [[TMP14]], align 4
; CG-NEXT:    br label [[VPLANNEDBB190:%.*]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB16:
; CG-NEXT:    [[TMP15:%.*]] = bitcast i32* [[SCALAR_GEP150]] to <4 x i32>*
; CG-NEXT:    store <4 x i32> [[WIDE_LOAD140]], <4 x i32>* [[TMP15]], align 4
; CG-NEXT:    br label [[VPLANNEDBB190]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB19:
; CG-NEXT:    [[UNI_PHI200:%.*]] = phi i32 [ 42, [[VPLANNEDBB170]] ], [ 0, [[VPLANNEDBB160]] ]
; CG-NEXT:    [[TMP16:%.*]] = add nuw nsw <4 x i64> [[TMP7]], <i64 4, i64 4, i64 4, i64 4>
; CG-NEXT:    [[TMP17:%.*]] = add nuw nsw i64 [[TMP8]], 4
; CG-NEXT:    [[TMP18:%.*]] = icmp uge i64 [[TMP17]], [[N_VEC40]]
; CG-NEXT:    br label [[VPLANNEDBB210:%.*]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB21:
; CG-NEXT:    [[SCALAR_GEP220:%.*]] = getelementptr inbounds i32, i32* [[A0]], i64 [[TMP17]]
; CG-NEXT:    [[TMP19:%.*]] = bitcast i32* [[SCALAR_GEP220]] to <4 x i32>*
; CG-NEXT:    [[WIDE_LOAD230:%.*]] = load <4 x i32>, <4 x i32>* [[TMP19]], align 4
; CG-NEXT:    [[TMP20:%.*]] = and <4 x i32> [[WIDE_LOAD230]], <i32 1, i32 1, i32 1, i32 1>
; CG-NEXT:    [[TMP21:%.*]] = icmp eq i32 [[N0]], 42
; CG-NEXT:    [[SCALAR_GEP240:%.*]] = getelementptr inbounds i32, i32* [[B0]], i64 [[TMP17]]
; CG-NEXT:    br i1 [[TMP21]], label [[VPLANNEDBB250:%.*]], label [[VPLANNEDBB260:%.*]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB26:
; CG-NEXT:    [[TMP22:%.*]] = bitcast i32* [[SCALAR_GEP240]] to <4 x i32>*
; CG-NEXT:    [[WIDE_LOAD270:%.*]] = load <4 x i32>, <4 x i32>* [[TMP22]], align 4
; CG-NEXT:    [[TMP23:%.*]] = bitcast i32* [[SCALAR_GEP220]] to <4 x i32>*
; CG-NEXT:    store <4 x i32> [[WIDE_LOAD270]], <4 x i32>* [[TMP23]], align 4
; CG-NEXT:    br label [[VPLANNEDBB280]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB25:
; CG-NEXT:    [[TMP24:%.*]] = bitcast i32* [[SCALAR_GEP240]] to <4 x i32>*
; CG-NEXT:    store <4 x i32> [[WIDE_LOAD230]], <4 x i32>* [[TMP24]], align 4
; CG-NEXT:    br label [[VPLANNEDBB280]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB28:
; CG-NEXT:    [[UNI_PHI290:%.*]] = phi i32 [ 42, [[VPLANNEDBB260]] ], [ 0, [[VPLANNEDBB250]] ]
; CG-NEXT:    [[TMP25]] = add nuw nsw <4 x i64> [[TMP16]], <i64 4, i64 4, i64 4, i64 4>
; CG-NEXT:    [[TMP26]] = add nuw nsw i64 [[TMP17]], 4
; CG-NEXT:    [[TMP27:%.*]] = icmp uge i64 [[TMP26]], [[N_VEC40]]
; CG-NEXT:    br i1 [[TMP27]], label [[VPLANNEDBB300:%.*]], label [[VECTOR_BODY0]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB30:
; CG-NEXT:    [[TMP28:%.*]] = mul i64 1, [[N_VEC40]]
; CG-NEXT:    [[TMP29:%.*]] = add i64 0, [[TMP28]]
; CG-NEXT:    br label [[VPLANNEDBB310:%.*]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB31:
; CG-NEXT:    br label [[VPLANNEDBB320:%.*]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB32:
; CG-NEXT:    [[TMP30:%.*]] = icmp eq i64 [[WIDE_TRIP_COUNT0]], [[N_VEC40]]
; CG-NEXT:    br i1 [[TMP30]], label [[FINAL_MERGE0:%.*]], label %[[MERGE_BLK0]]
; CG-EMPTY:
; CG-NEXT:  [[MERGE_BLK0]]:
; CG-NEXT:    [[UNI_PHI330:%.*]] = phi i64 [ [[TMP29]], [[VPLANNEDBB320]] ], [ 0, [[VPLANNEDBB0]] ]
; CG-NEXT:    br label %[[REMBLK0:.*]]
; CG-EMPTY:
; CG-NEXT:  [[REMBLK0]]:
; CG-NEXT:    br label [[OMP_INNER_FOR_BODY0:%.*]]
; CG-EMPTY:
; CG-NEXT:  VPlannedBB34:
; CG-NEXT:    br label [[FINAL_MERGE0]]
; CG-EMPTY:
; CG-NEXT:  final.merge:
; CG-NEXT:    [[UNI_PHI350:%.*]] = phi i64 [ [[INDVARS_IV_NEXT0:%.*]], [[VPLANNEDBB340:%.*]] ], [ [[TMP29]], [[VPLANNEDBB320]] ]
; CG-NEXT:    br label [[DIR_OMP_END_SIMD_30:%.*]]
; CG-EMPTY:
; CG-NEXT:  omp.inner.for.body:
; CG-NEXT:    [[INDVARS_IV0:%.*]] = phi i64 [ [[UNI_PHI330]], %[[REMBLK0]] ], [ [[INDVARS_IV_NEXT0]], [[OMP_BODY_CONTINUE0:%.*]] ]
; CG-NEXT:    [[ARRAYIDX0:%.*]] = getelementptr inbounds i32, i32* [[A0]], i64 [[INDVARS_IV0]]
; CG-NEXT:    [[TMP31:%.*]] = load i32, i32* [[ARRAYIDX0]], align 4
; CG-NEXT:    [[TMP32:%.*]] = and i32 [[TMP31]], 1
; CG-NEXT:    [[TOBOOL0:%.*]] = icmp eq i32 [[N0]], 42
; CG-NEXT:    [[ARRAYIDX130:%.*]] = getelementptr inbounds i32, i32* [[B0]], i64 [[INDVARS_IV0]]
; CG-NEXT:    br i1 [[TOBOOL0]], label [[IF_ELSE0:%.*]], label [[IF_THEN0:%.*]]
; CG-EMPTY:
; CG-NEXT:  if.then:
; CG-NEXT:    [[TMP33:%.*]] = load i32, i32* [[ARRAYIDX130]], align 4
; CG-NEXT:    store i32 [[TMP33]], i32* [[ARRAYIDX0]], align 4
; CG-NEXT:    br label [[OMP_BODY_CONTINUE0]]
; CG-EMPTY:
; CG-NEXT:  if.else:
; CG-NEXT:    store i32 [[TMP31]], i32* [[ARRAYIDX130]], align 4
; CG-NEXT:    br label [[OMP_BODY_CONTINUE0]]
; CG-EMPTY:
; CG-NEXT:  omp.body.continue:
; CG-NEXT:    [[PHI0:%.*]] = phi i32 [ 42, [[IF_THEN0]] ], [ 0, [[IF_ELSE0]] ]
; CG-NEXT:    [[INDVARS_IV_NEXT0]] = add nuw nsw i64 [[INDVARS_IV0]], 1
; CG-NEXT:    [[EXITCOND0:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT0]], [[WIDE_TRIP_COUNT0]]
; CG-NEXT:    br i1 [[EXITCOND0]], label [[VPLANNEDBB340]], label [[OMP_INNER_FOR_BODY0]]
; CG-EMPTY:
; CG-NEXT:  DIR.OMP.END.SIMD.3:
; CG-NEXT:    br label [[OMP_PRECOND_END0]]
; CG-EMPTY:
; CG-NEXT:  omp.precond.end:
; CG-NEXT:    ret void
; CG-NEXT:  }
;
entry:
  %cmp = icmp sgt i32 %n, 0
  br i1 %cmp, label %DIR.OMP.SIMD.2, label %omp.precond.end

DIR.OMP.SIMD.2:                                   ; preds = %entry
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.NORMALIZED.IV"(i8* null), "QUAL.OMP.NORMALIZED.UB"(i8* null) ]
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %DIR.OMP.SIMD.2
  %wide.trip.count = sext i32 %n to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.body.continue, %DIR.OMP.SIMD.1
  %indvars.iv = phi i64 [ 0, %DIR.OMP.SIMD.1 ], [ %indvars.iv.next, %omp.body.continue ]
  %arrayidx = getelementptr inbounds i32, i32* %a, i64 %indvars.iv
  %1 = load i32, i32* %arrayidx, align 4
  %2 = and i32 %1, 1
  %tobool = icmp eq i32 %n, 42
  %arrayidx13 = getelementptr inbounds i32, i32* %b, i64 %indvars.iv
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %omp.inner.for.body
  %3 = load i32, i32* %arrayidx13, align 4
  store i32 %3, i32* %arrayidx, align 4
  br label %omp.body.continue

if.else:                                          ; preds = %omp.inner.for.body
  store i32 %1, i32* %arrayidx13, align 4
  br label %omp.body.continue

omp.body.continue:                                ; preds = %if.then, %if.else
  %phi = phi i32 [ 42, %if.then ], [0, %if.else ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond, label %DIR.OMP.END.SIMD.3, label %omp.inner.for.body

DIR.OMP.END.SIMD.3:                               ; preds = %omp.body.continue
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %DIR.OMP.END.SIMD.3, %entry
  ret void
}

declare token @llvm.directive.region.entry() nounwind
declare void @llvm.directive.region.exit(token) nounwind
