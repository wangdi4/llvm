; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; This test checks that we compute correct known bits for subscript
; instructions.

; RUN: opt -S < %s -passes='hir-ssa-deconstruction,hir-vplan-vec' -vplan-force-vf=2 -disable-output \
; RUN:   -vplan-print-after-init -vplan-dump-known-bits 2>&1 | FileCheck %s

define void @foo(i64 *%array) {
; CHECK-LABEL:  VPlan after initial VPlan for VF=2:
; CHECK-NEXT:  VPlan IR for: Initial VPlan for VF=2
; CHECK-NEXT:  External Defs Start:
; CHECK-DAG:     [[VP0:%.*]] = {%array}
; CHECK-NEXT:  External Defs End:
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     br [[BB1:BB[0-9]+]] ({{.*}})
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     i64 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i64 1024, UF = 1 ({{.*}}), KnownBits: ????????????????????????????????????????????????????????????????
; CHECK-NEXT:     i64 [[VP__IND_INIT:%.*]] = induction-init{add} i64 live-in0 i64 1 ({{.*}}), KnownBits: 0000000000000000000000000000000000000000000000000000000000000000
; CHECK-NEXT:     i64 [[VP__IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1 ({{.*}}), KnownBits: 0000000000000000000000000000000000000000000000000000000000000001
; CHECK-NEXT:     br [[BB2:BB[0-9]+]] ({{.*}})
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], [[BB2]]
; CHECK-NEXT:     i64 [[VP1:%.*]] = phi  [ i64 [[VP__IND_INIT]], [[BB1]] ],  [ i64 [[VP2:%.*]], [[BB2]] ] ({{.*}}), KnownBits: 000000000000000000000000000000000000000000000000000000??????????
; CHECK-NEXT:     i64* [[VP_SUBSCRIPT:%.*]] = subscript i64* [[ARRAY0:%.*]] i64 [[VP1]] ({{.*}}), KnownBits: ????????????????????????????????????????????????????????????????
; CHECK-NEXT:     i64* [[VP_SUBSCRIPT_1:%.*]] = subscript i64* [[ARRAY0]] i64 [[VP1]] ({{.*}}), KnownBits: ????????????????????????????????????????????????????????????????
; CHECK-NEXT:     i64 [[VP_LOAD:%.*]] = load i64* [[VP_SUBSCRIPT_1]] ({{.*}}), KnownBits: ????????????????????????????????????????????????????????????????
; CHECK-NEXT:     i32* [[VP_SUBSCRIPT_2:%.*]] = subscript i32* null i64 4 ({{.*}}), KnownBits: 0000000000000000000000000000000000000000000000000000000000010000
; CHECK-NEXT:     store i32 1 i32* [[VP_SUBSCRIPT_2]] ({{.*}})
; CHECK-NEXT:     i8* [[VP_SUBSCRIPT_3:%.*]] = subscript i8* null i64 4 ({{.*}}), KnownBits: 0000000000000000000000000000000000000000000000000000000000000100
; CHECK-NEXT:     store i8 2 i8* [[VP_SUBSCRIPT_3]] ({{.*}})
; CHECK-NEXT:     i8* [[VP_SUBSCRIPT_4:%.*]] = subscript { i8, i8 }* null i64 2 (1 ) ({{.*}}), KnownBits: 0000000000000000000000000000000000000000000000000000000000000101
; CHECK-NEXT:     store i8 3 i8* [[VP_SUBSCRIPT_4]] ({{.*}})
; CHECK-NEXT:     i8* [[VP_SUBSCRIPT_5:%.*]] = subscript { i8, i8 }* null i64 [[VP_LOAD]] (1 ) ({{.*}}), KnownBits: ???????????????????????????????????????????????????????????????1
; CHECK-NEXT:     store i8 4 i8* [[VP_SUBSCRIPT_5]] ({{.*}})
; CHECK-NEXT:     i64 [[VP3:%.*]] = mul i64 [[VP_LOAD]] i64 8 ({{.*}}), KnownBits: ?????????????????????????????????????????????????????????????000
; CHECK-NEXT:     i8* [[VP_SUBSCRIPT_6:%.*]] = subscript inbounds i8* null i64 [[VP3]] ({{.*}}), KnownBits: ????????????????????????????????????????????????????????????0000
; CHECK-NEXT:     store i8 5 i8* [[VP_SUBSCRIPT_6]] ({{.*}})
; CHECK-NEXT:     i64 [[VP4:%.*]] = mul i64 [[VP_LOAD]] i64 2 ({{.*}}), KnownBits: ???????????????????????????????????????????????????????????????0
; CHECK-NEXT:     i8* [[VP_SUBSCRIPT_7:%.*]] = subscript inbounds i8* null i64 [[VP3]] ({{.*}}), KnownBits: ??????????????????????????????????????????????????????????????00
; CHECK-NEXT:     store i8 6 i8* [[VP_SUBSCRIPT_7]] ({{.*}})
; CHECK-NEXT:     i64* [[VP_SUBSCRIPT_8:%.*]] = subscript inbounds i64* null i64 [[VP3]] ({{.*}}), KnownBits: ?????????????????????????????????????????????????????????0000000
; CHECK-NEXT:     store i64 7 i64* [[VP_SUBSCRIPT_8]] ({{.*}})
; CHECK-NEXT:     i64* [[VP_SUBSCRIPT_9:%.*]] = subscript inbounds i64* null i64 [[VP3]] ({{.*}}), KnownBits: ???????????????????????????????????????????????????????????00000
; CHECK-NEXT:     store i64 8 i64* [[VP_SUBSCRIPT_9]] ({{.*}})
; CHECK-NEXT:     i64* [[VP_SUBSCRIPT_10:%.*]] = subscript inbounds i64* null i64 [[VP_LOAD]] ({{.*}}), KnownBits: ????????????????????????????????????????????????????????????????
; CHECK-NEXT:     store i64 9 i64* [[VP_SUBSCRIPT_10]] ({{.*}})
; CHECK-NEXT:     i64 [[VP5:%.*]] = add i64 [[VP3]] i64 [[VP1]] ({{.*}}), KnownBits: ????????????????????????????????????????????????????????????????
; CHECK-NEXT:     i64* [[VP_SUBSCRIPT_11:%.*]] = subscript i64* [[ARRAY0]] i64 [[VP5]] ({{.*}}), KnownBits: ????????????????????????????????????????????????????????????????
; CHECK-NEXT:     store i64 10 i64* [[VP_SUBSCRIPT_11]] ({{.*}})
; CHECK-NEXT:     i8* [[VP_SUBSCRIPT_12:%.*]] = subscript i8* null i64 [[VP_LOAD]] ({{.*}}), KnownBits: ????????????????????????????????????????????????????????????????
; CHECK-NEXT:     store i8 11 i8* [[VP_SUBSCRIPT_12]] ({{.*}})
; CHECK-NEXT:     i8* [[VP_SUBSCRIPT_13:%.*]] = subscript inbounds i8* null i64 [[VP3]] ({{.*}}), KnownBits: ????????????????????????????????????????????????????????????????
; CHECK-NEXT:     store i8 12 i8* [[VP_SUBSCRIPT_13]] ({{.*}})
; CHECK-NEXT:     i64* [[VP_SUBSCRIPT_14:%.*]] = subscript inbounds i64* [[VP_SUBSCRIPT]] i64 [[VP3]] ({{.*}}), KnownBits: ????????????????????????????????????????????????????????????????
; CHECK-NEXT:     store i64 13 i64* [[VP_SUBSCRIPT_14]] ({{.*}})
; CHECK-NEXT:     i64* [[VP_SUBSCRIPT_15:%.*]] = subscript inbounds i64* null i64 [[VP_LOAD]] ({{.*}}), KnownBits: ????????????????????????????????????????????????????????????????
; CHECK-NEXT:     store i64 14 i64* [[VP_SUBSCRIPT_15]] ({{.*}})
; CHECK-NEXT:     i64* [[VP_SUBSCRIPT_16:%.*]] = subscript [256 x i64]* null i64 0 i64 0 ({{.*}}), KnownBits: 0000000000000000000000000000000000000000000000000000000000000000
; CHECK-NEXT:     store i64 15 i64* [[VP_SUBSCRIPT_16]] ({{.*}})
; CHECK-NEXT:     i64* [[VP_SUBSCRIPT_17:%.*]] = subscript [256 x i64]* null i64 0 i64 [[VP1]] ({{.*}}), KnownBits: 000000000000000000000000000000000000000000000000000??????????000
; CHECK-NEXT:     store i64 16 i64* [[VP_SUBSCRIPT_17]] ({{.*}})
; CHECK-NEXT:     i64* [[VP_SUBSCRIPT_18:%.*]] = subscript [256 x i64]* null i64 [[VP1]] i64 0 ({{.*}}), KnownBits: 0000000000000000000000000000000000000000000??????????00000000000
; CHECK-NEXT:     store i64 17 i64* [[VP_SUBSCRIPT_18]] ({{.*}})
; CHECK-NEXT:     i64 [[VP2]] = add i64 [[VP1]] i64 [[VP__IND_INIT_STEP]] ({{.*}}), KnownBits: 00000000000000000000000000000000000000000000000000000???????????
; CHECK-NEXT:     i1 [[VP6:%.*]] = icmp slt i64 [[VP2]] i64 [[VP_VECTOR_TRIP_COUNT]] ({{.*}}), KnownBits: ?
; CHECK-NEXT:     br i1 [[VP6]], [[BB2]], [[BB3:BB[0-9]+]] ({{.*}})
;
entry:
  br label %for.ph

for.ph:
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %for.body

for.body:
  %iv = phi i64 [ 0, %for.ph ], [ %add1, %for.body ]

  %gep = getelementptr i64, i64* %array, i64 %iv
  %a = load i64, i64* %gep, align 8
  %a.mul2 = mul i64 %a, 2
  %a.mul8 = mul i64 %a, 8

  ; Aligned GEPs with LB = 0 && Stride = sizeof(elemtype)
  ; Legend = sub.<type>[.<offset>]+
  %sub.i32.4 = getelementptr i32, i32* null, i64 4
  store i32 1, i32* %sub.i32.4, align 1
  %sub.i8.4 = getelementptr i8, i8* null, i64 4
  store i8 2, i8* %sub.i8.4, align 1
  %sub.i8i8.2.1 = getelementptr {i8, i8}, {i8, i8}* null, i64 2, i32 1
  store i8 3, i8* %sub.i8i8.2.1, align 1
  %sub.i8i8.a.1 = getelementptr {i8, i8}, {i8, i8}* null, i64 %a, i32 1
  store i8 4, i8* %sub.i8i8.a.1, align 1

  ; Aligned subscripts with LB =/= 0 || Stride =/= sizeof(elemtype)
  ; sub.<type>.<lb>.<stride>.<index>
  %sub.i8.0.2.8 = call i8* @llvm.intel.subscript.p0i8.i64.i32.p0i8.i64(i8 0, i64 0, i32 2, i8* elementtype(i8) null, i64 %a.mul8)
  store i8 5, i8* %sub.i8.0.2.8, align 8
  %sub.i8.2.2.8 = call i8* @llvm.intel.subscript.p0i8.i64.i32.p0i8.i64(i8 0, i64 %a.mul2, i32 2, i8* elementtype(i8) null, i64 %a.mul8)
  store i8 6, i8* %sub.i8.2.2.8, align 8
  %sub.i32.0.16.8 = call i64* @llvm.intel.subscript.p0i64.i64.i32.p0i64.i64(i8 0, i64 0, i32 16, i64* elementtype(i64) null, i64 %a.mul8)
  store i64 7, i64* %sub.i32.0.16.8, align 8
  %sub.i32.2.16.8 = call i64* @llvm.intel.subscript.p0i64.i64.i32.p0i64.i64(i8 0, i64 %a.mul2, i32 16, i64* elementtype(i64) null, i64 %a.mul8)
  store i64 8, i64* %sub.i32.2.16.8, align 8
  %sub.i32.8.a.a = call i64* @llvm.intel.subscript.p0i64.i64.i64.p0i64.i64(i8 0, i64 %a.mul8, i64 %a, i64* elementtype(i64) null, i64 %a)
  store i64 9, i64* %sub.i32.8.a.a, align 8

  ; Negative cases (unaligned GEPs and subscripts)
  %sub.unk.1 = getelementptr i64, i64* %gep, i64 %a.mul8
  store i64 10, i64* %sub.unk.1, align 8
  %sub.unk.2 = getelementptr i8, i8* null, i64 %a
  store i8 11, i8* %sub.unk.2, align 1
  %sub.unk.3 = call i8* @llvm.intel.subscript.p0i8.i64.i32.p0i8.i64(i8 0, i64 %a, i32 1, i8* elementtype(i8) null, i64 %a.mul8)
  store i8 12, i8* %sub.unk.3, align 8
  %sub.unk.4 = call i64* @llvm.intel.subscript.p0i64.i64.i32.p0i64.i64(i8 0, i64 %a.mul8, i32 8, i64* elementtype(i64) %gep, i64 %a.mul8)
  store i64 13, i64* %sub.unk.4, align 8
  %sub.unk.5 = call i64* @llvm.intel.subscript.p0i64.i64.i64.p0i64.i64(i8 0, i64 %a.mul8, i64 %a, i64* elementtype(i64) null, i64 %a)
  store i64 14, i64* %sub.unk.5, align 8

  ; Rank > 1 with non-ptr dimension type
  %sub.256xi64.1 = getelementptr [256 x i64], [256 x i64]* null, i64 0, i64 0
  store i64 15, i64* %sub.256xi64.1, align 8
  %sub.256xi64.2 = getelementptr [256 x i64], [256 x i64]* null, i64 0, i64 %iv
  store i64 16, i64* %sub.256xi64.2, align 8
  %sub.256xi64.3 = getelementptr [256 x i64], [256 x i64]* null, i64 %iv, i64 0
  store i64 17, i64* %sub.256xi64.3, align 8

  %add1 = add nuw nsw i64 %iv, 1
  %exitcond.not = icmp eq i64 %add1, 1024
  br i1 %exitcond.not, label %omp.simd.end, label %for.body

omp.simd.end:
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %ret

ret:
  ret void
}

declare i8* @llvm.intel.subscript.p0i8.i64.i32.p0i8.i64(i8, i64, i32, i8* elementtype(i8), i64) #0
declare i64* @llvm.intel.subscript.p0i64.i64.i32.p0i64.i64(i8, i64, i32, i64* elementtype(i64), i64) #0
declare i64* @llvm.intel.subscript.p0i64.i64.i64.p0i64.i64(i8, i64, i64, i64* elementtype(i64), i64) #0

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)

attributes #0 = { nounwind readnone speculatable }
