; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; Test to check that last private with "TYPED" clause is succesfully imported into VPlan

; RUN: opt -disable-output %s -passes="hir-ssa-deconstruction,hir-temp-cleanup,hir-vplan-vec" -vplan-force-vf=4 --vplan-print-after-plain-cfg -vplan-entities-dump 2>&1 | FileCheck %s

define i64 @foo(i64* nocapture %larr, i64* %mm) {
; CHECK-LABEL:  VPlan after importing plain CFG:
; CHECK-NEXT:  VPlan IR for: foo:HIR.#{{[0-9]+}}
; CHECK-NEXT:  External Defs Start:
; CHECK-DAG:     [[VP0:%.*]] = {%priv_phi}
; CHECK-DAG:     [[VP1:%.*]] = {%larr}
; CHECK-DAG:     [[VP2:%.*]] = {%mm}
; CHECK-NEXT:  External Defs End:
; CHECK-NEXT:  Loop Entities of the loop with header [[BB0:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:  Induction list
; CHECK-NEXT:   IntInduction(+) Start: i64 0 Step: i64 1 StartVal: i64 0 EndVal: i64 99 BinOp: i64 [[VP3:%.*]] = add i64 [[VP4:%.*]] i64 1
; CHECK-NEXT:    Linked values: i64 [[VP4]], i64 [[VP3]],
; CHECK:       Private list
; CHECK-EMPTY:
; CHECK-NEXT:    Private tag: InMemory
; CHECK-NEXT:    Linked values: i64* [[MM0:%.*]],
; CHECK-NEXT:   Memory: i64* [[MM0]]

entry:
  %m1 = load i64, i64* %mm
  br label %b1

b1:
  %entry.region = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.LASTPRIVATE:TYPED"(i64* %mm, i64 0, i32 1) ]
  br label %for.body

for.body:
  %l1.010 = phi i64 [ 0, %b1 ], [ %inc, %else ]
  %priv_phi = phi i64 [ %m1, %b1 ], [ %merge, %else ]
  %arrayidx = getelementptr inbounds i64, i64* %larr, i64 %l1.010
  %cmp = icmp eq i64 %l1.010, 100
  br i1 %cmp, label %then, label %else

then:
  %0 = load i64, i64* %arrayidx, align 8
  br label %else

else:
  %merge = phi i64 [ %priv_phi, %for.body ], [ %0, %then ]
  %inc = add nuw nsw i64 %l1.010, 1
  %exitcond = icmp eq i64 %inc, 100
  br i1 %exitcond, label %for.end, label %for.body

for.end:
  %lcssa.merge =  phi i64 [%merge, %else]
  store i64 %lcssa.merge, i64* %mm
  call void @llvm.directive.region.exit(token %entry.region) [ "DIR.OMP.END.SIMD"() ]
  ret i64 %lcssa.merge
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
