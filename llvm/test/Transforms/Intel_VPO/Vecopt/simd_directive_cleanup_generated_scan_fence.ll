; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -enable-new-pm=0 -vplan-vec -vplan-force-vf=4 -vplan-force-inscan-reduction-vectorization=true -VPODirectiveCleanup -S < %s 2>&1 | FileCheck %s
; RUN: opt -passes="vplan-vec,vpo-directive-cleanup" -vplan-force-vf=4 -vplan-force-inscan-reduction-vectorization=true -S < %s 2>&1 | FileCheck %s

; This test demonstrates that compiler-generated fence instruction
; is present in the loop scalar remainder together with the VPo directives.
; A follow up patch would remove a compiler generated fence.

;; void foo(float *A, float *B) {
;;   float x = 0.0f;
;; #pragma omp simd reduction(inscan, + : x)
;;   for (int i=0; i<1025; i++) {
;;     x += A[i];
;; #pragma omp scan inclusive(x)
;;     B[i] = x;
;;   }
;; }

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define void @omp_scan(float* %A, float* %B) {
;
; CHECK:  define void @omp_scan(float* [[A0:%.*]], float* [[B0:%.*]]) {
; CHECK-LABEL:  entry:
; CHECK:         br label [[VECTOR_BODY0:%.*]]
; CHECK-EMPTY:
; CHECK-LABEL:  vector.body:
; CHECK:         br i1 [[TMP16:%.*]], label [[VPLANNEDBB130:%.*]], label [[VECTOR_BODY0:%.*]], !llvm.loop !0
; CHECK-EMPTY:
; CHECK-LABEL:  VPlannedBB13:
; CHECK:         br label [[DIR_OMP_END_SCAN_3350:%.*]]
; CHECK-EMPTY:
; CHECK-LABEL:  DIR.OMP.END.SCAN.335:
; CHECK-NEXT:    [[INDVARS_IV0:%.*]] = phi i64 [ 1024, [[VPLANNEDBB130]] ], [ [[INDVARS_IV_NEXT0:%.*]], [[DIR_OMP_END_SCAN_3350]] ]
; CHECK-NEXT:    [[TMP18:%.*]] = trunc i64 [[INDVARS_IV0]] to i32
; CHECK-NEXT:    [[ARRAYIDX0:%.*]] = getelementptr inbounds float, float* [[A0]], i64 [[INDVARS_IV0]]
; CHECK-NEXT:    [[TMP19:%.*]] = load float, float* [[ARRAYIDX0]], align 4
; CHECK-NEXT:    [[TMP20:%.*]] = load float, float* [[X_RED0:%.*]], align 4
; CHECK-NEXT:    [[ADD50:%.*]] = fadd fast float [[TMP20]], [[TMP19]]
; CHECK-NEXT:    store float [[ADD50]], float* [[X_RED0]], align 4
; CHECK-NEXT:    fence acq_rel
; CHECK-NEXT:    [[TMP21:%.*]] = load float, float* [[X_RED0]], align 4
; CHECK-NEXT:    [[ARRAYIDX70:%.*]] = getelementptr inbounds float, float* [[B0]], i64 [[INDVARS_IV0]]
; CHECK-NEXT:    store float [[TMP21]], float* [[ARRAYIDX70]], align 4
; CHECK-NEXT:    [[INDVARS_IV_NEXT0]] = add nuw nsw i64 [[INDVARS_IV0]], 1
; CHECK-NEXT:    [[EXITCOND_NOT0:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT0]], 1025
; CHECK-NEXT:    br i1 [[EXITCOND_NOT0]], label [[OMP_PRECOND_END0:%.*]], label [[DIR_OMP_END_SCAN_3350]], !llvm.loop !2
; CHECK-EMPTY:
; CHECK-LABEL:  omp.precond.end:
; CHECK-NEXT:    ret void
; CHECK-NEXT:  }
;
entry:
  %x.red = alloca float, align 4
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %entry
  store float 0.000000e+00, float* %x.red, align 4
  br label %DIR.OMP.SIMD.138

DIR.OMP.SIMD.138:                                 ; preds = %DIR.OMP.SIMD.1
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.REDUCTION.ADD:INSCAN"(float* %x.red, i64 1) ]
  br label %DIR.OMP.SIMD.139

DIR.OMP.SIMD.139:                                 ; preds = %DIR.OMP.SIMD.138
  br label %DIR.OMP.END.SCAN.335

DIR.OMP.END.SCAN.335:                             ; preds = %DIR.OMP.END.SCAN.3, %DIR.OMP.SIMD.139
  %indvars.iv = phi i64 [ 0, %DIR.OMP.SIMD.139 ], [ %indvars.iv.next, %DIR.OMP.END.SCAN.3 ]
  %1 = trunc i64 %indvars.iv to i32
  %arrayidx = getelementptr inbounds float, float* %A, i64 %indvars.iv
  %2 = load float, float* %arrayidx, align 4
  %3 = load float, float* %x.red, align 4
  %add5 = fadd fast float %3, %2
  store float %add5, float* %x.red, align 4
  br label %DIR.OMP.SCAN.3

DIR.OMP.SCAN.3:                                   ; preds = %DIR.OMP.END.SCAN.335
  %4 = call token @llvm.directive.region.entry() [ "DIR.OMP.SCAN"(), "QUAL.OMP.INCLUSIVE"(float* %x.red, i64 1) ]
  br label %DIR.OMP.SCAN.2

DIR.OMP.SCAN.2:                                   ; preds = %DIR.OMP.SCAN.3
  fence acq_rel
  br label %DIR.OMP.END.SCAN.5

DIR.OMP.END.SCAN.5:                               ; preds = %DIR.OMP.SCAN.2
  call void @llvm.directive.region.exit(token %4) [ "DIR.OMP.END.SCAN"() ]
  br label %DIR.OMP.END.SCAN.3

DIR.OMP.END.SCAN.3:                               ; preds = %DIR.OMP.END.SCAN.5
  %5 = load float, float* %x.red, align 4
  %arrayidx7 = getelementptr inbounds float, float* %B, i64 %indvars.iv
  store float %5, float* %arrayidx7, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 1025
  br i1 %exitcond.not, label %DIR.OMP.END.SIMD.1, label %DIR.OMP.END.SCAN.335, !llvm.loop !0

DIR.OMP.END.SIMD.1:                               ; preds = %DIR.OMP.END.SIMD.7
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %DIR.OMP.END.SIMD.4, %entry
  ret void
}

declare token @llvm.directive.region.entry()

declare void @llvm.directive.region.exit(token)

!0 = distinct !{!0, !1, !2}
!1 = !{!"llvm.loop.vectorize.enable", i1 true}
!2 = !{!"llvm.loop.vectorize.ivdep_loop", i32 0}
