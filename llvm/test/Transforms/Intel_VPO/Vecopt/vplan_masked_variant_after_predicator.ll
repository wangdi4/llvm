; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -S -vplan-vec -vplan-force-vf=2  -vplan-print-after-predicator < %s -disable-output | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define void @main() {
; CHECK-LABEL:  VPlan after predicator:
; CHECK-NEXT:  VPlan IR for: main:header.#{{[0-9]+}}
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     [DA: Div] i32 [[VP_ADD_PHIRED_INIT:%.*]] = reduction-init i32 0 i32 live-in0
; CHECK-NEXT:     [DA: Div] i32 [[VP_IV_IND_INIT:%.*]] = induction-init{add} i32 live-in1 i32 1
; CHECK-NEXT:     [DA: Uni] i32 [[VP_IV_IND_INIT_STEP:%.*]] = induction-init-step{add} i32 1
; CHECK-NEXT:     [DA: Div] i32 [[VP_ADD_PHI_2_IND_INIT:%.*]] = induction-init{add} i32 live-in2 i32 2
; CHECK-NEXT:     [DA: Uni] i32 [[VP_ADD_PHI_2_IND_INIT_STEP:%.*]] = induction-init-step{add} i32 2
; CHECK-NEXT:     [DA: Uni] i32 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i32 128, UF = 1
; CHECK-NEXT:     [DA: Uni] br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], [[BB3:BB[0-9]+]]
; CHECK-NEXT:     [DA: Div] i32 [[VP_IV:%.*]] = phi  [ i32 [[VP_IV_IND_INIT]], [[BB1]] ],  [ i32 [[VP_IV_NEXT:%.*]], [[BB3]] ]
; CHECK-NEXT:     [DA: Div] i32 [[VP_ADD_PHI:%.*]] = phi  [ i32 [[VP_ADD_PHIRED_INIT]], [[BB1]] ],  [ i32 [[VP_ADD:%.*]], [[BB3]] ]
; CHECK-NEXT:     [DA: Div] i32 [[VP_ADD_PHI_2:%.*]] = phi  [ i32 [[VP_ADD_PHI_2_IND_INIT]], [[BB1]] ],  [ i32 [[VP_ADD_2:%.*]], [[BB3]] ]
; CHECK-NEXT:     [DA: Div] i32 [[VP_IV_NEXT]] = add i32 [[VP_IV]] i32 [[VP_IV_IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] br [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: [[BB2]]
; CHECK-NEXT:     [DA: Div] i32 [[VP_ADD]] = add i32 [[VP_ADD_PHI]] i32 1
; CHECK-NEXT:     [DA: Div] i32 [[VP_ADD_2]] = add i32 [[VP_ADD_PHI_2]] i32 [[VP_ADD_PHI_2_IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP_VECTOR_LOOP_EXITCOND:%.*]] = icmp uge i32 [[VP_IV_NEXT]] i32 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP_VECTOR_LOOP_EXITCOND]], [[BB4:BB[0-9]+]], [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: [[BB3]]
; CHECK-NEXT:     [DA: Uni] i32 [[VP_ADD_PHIRED_FINAL:%.*]] = reduction-final{u_add} i32 [[VP_ADD]]
; CHECK-NEXT:     [DA: Uni] i32 [[VP_IV_IND_FINAL:%.*]] = induction-final{add} i32 0 i32 1
; CHECK-NEXT:     [DA: Uni] i32 [[VP_ADD_PHI_2_IND_FINAL:%.*]] = induction-final{add} i32 0 i32 2
; CHECK-NEXT:     [DA: Uni] br [[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]: # preds: [[BB4]]
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0     [[LCSSA_PHI0:%.*]] = phi i32 [ [[ADD0:%.*]], [[LATCH0:%.*]] ] i32 [[VP_ADD_PHIRED_FINAL]] -> i32 [[ADD0]]
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 1   no underlying for i32 [[VP_IV_IND_FINAL]]
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 2   no underlying for i32 [[VP_ADD_PHI_2_IND_FINAL]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlan after predicator:
; CHECK-NEXT:  VPlan IR for: main:header.#{{[0-9]+}}.cloned.masked
; CHECK-NEXT:    [[BB6:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] br [[BB7:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB7]]: # preds: [[BB6]]
; CHECK-NEXT:     [DA: Div] i32 [[VP0:%.*]] = reduction-init i32 0 i32 live-in0
; CHECK-NEXT:     [DA: Div] i32 [[VP1:%.*]] = induction-init{add} i32 live-in1 i32 1
; CHECK-NEXT:     [DA: Uni] i32 [[VP2:%.*]] = induction-init-step{add} i32 1
; CHECK-NEXT:     [DA: Div] i32 [[VP3:%.*]] = induction-init{add} i32 live-in2 i32 2
; CHECK-NEXT:     [DA: Uni] i32 [[VP4:%.*]] = induction-init-step{add} i32 2
; CHECK-NEXT:     [DA: Uni] br [[BB8:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB8]]: # preds: [[BB7]], new_latch
; CHECK-NEXT:     [DA: Div] i32 [[VP_IV_1:%.*]] = phi  [ i32 [[VP1]], [[BB7]] ],  [ i32 [[VP_IV_NEXT_1:%.*]], new_latch ]
; CHECK-NEXT:     [DA: Div] i32 [[VP_ADD_PHI_1:%.*]] = phi  [ i32 [[VP0]], [[BB7]] ],  [ i32 [[VP__BLEND_BB310:%.*]], new_latch ]
; CHECK-NEXT:     [DA: Div] i32 [[VP_ADD_PHI_2_1:%.*]] = phi  [ i32 [[VP3]], [[BB7]] ],  [ i32 [[VP__BLEND_BB310_1:%.*]], new_latch ]
; CHECK-NEXT:     [DA: Div] i1 [[VP5:%.*]] = icmp ult i32 [[VP_IV_1]] i32 128
; CHECK-NEXT:     [DA: Uni] br [[BB9:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB9]]: # preds: [[BB8]]
; CHECK-NEXT:     [DA: Div] i1 [[VP6:%.*]] = block-predicate i1 [[VP5]]
; CHECK-NEXT:     [DA: Uni] br [[BB10:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB10]]: # preds: [[BB9]]
; CHECK-NEXT:     [DA: Div] i1 [[VP7:%.*]] = block-predicate i1 [[VP5]]
; CHECK-NEXT:     [DA: Div] i32 [[VP_ADD_1:%.*]] = add i32 [[VP_ADD_PHI_1]] i32 1
; CHECK-NEXT:     [DA: Div] i32 [[VP_ADD_2_1:%.*]] = add i32 [[VP_ADD_PHI_2_1]] i32 [[VP4]]
; CHECK-NEXT:     [DA: Uni] br new_latch
; CHECK-EMPTY:
; CHECK-NEXT:    new_latch: # preds: [[BB10]]
; CHECK-NEXT:     [DA: Div] i32 [[VP__BLEND_BB310]] = blend [ i32 [[VP_ADD_PHI_1]], i1 true ], [ i32 [[VP_ADD_1]], i1 [[VP5]] ]
; CHECK-NEXT:     [DA: Div] i32 [[VP__BLEND_BB310_1]] = blend [ i32 [[VP_ADD_PHI_2_1]], i1 true ], [ i32 [[VP_ADD_2_1]], i1 [[VP5]] ]
; CHECK-NEXT:     [DA: Div] i32 [[VP_IV_NEXT_1]] = add i32 [[VP_IV_1]] i32 [[VP2]]
; CHECK-NEXT:     [DA: Div] i1 [[VP8:%.*]] = icmp ult i32 [[VP_IV_NEXT_1]] i32 128
; CHECK-NEXT:     [DA: Uni] i1 [[VP9:%.*]] = all-zero-check i1 [[VP8]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP9]], [[BB11:BB[0-9]+]], [[BB8]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB11]]: # preds: new_latch
; CHECK-NEXT:     [DA: Uni] i32 [[VP10:%.*]] = reduction-final{u_add} i32 [[VP__BLEND_BB310]]
; CHECK-NEXT:     [DA: Uni] i32 [[VP11:%.*]] = induction-final{add} i32 0 i32 1
; CHECK-NEXT:     [DA: Uni] i32 [[VP12:%.*]] = induction-final{add} i32 0 i32 2
; CHECK-NEXT:     [DA: Uni] br [[BB12:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB12]]: # preds: [[BB11]]
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0     [[LCSSA_PHI0]] = phi i32 [ [[ADD0]], [[LATCH0]] ] i32 [[VP10]] -> i32 [[ADD0]]
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 1   no underlying for i32 [[VP11]]
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 2   no underlying for i32 [[VP12]]
;
entry:
  br label %preheader

preheader:
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %header
; +--->header
; |      |
; |      v
; |    latch
; |      |
; +------+
;        v
;     loopexit
;        |
;        v
;      exit
header:
  %iv = phi i32 [ 0, %preheader ], [ %iv.next, %latch ]
  %add.phi = phi i32 [ 0, %preheader ], [ %add, %latch ]
  %add.phi.2 = phi i32 [ 0, %preheader ], [ %add.2, %latch ]
  %iv.next = add nsw i32 %iv, 1
  br label %latch

latch:
  %add = add nsw i32 %add.phi, 1
  %add.2 = add nsw i32 %add.phi.2, 2
  %bottom_test = icmp eq i32 %iv.next, 128
  br i1 %bottom_test, label %loopexit, label %header

loopexit:
  %lcssa.phi = phi i32 [ %add, %latch ]
  %add.final = add nsw i32 %lcssa.phi, 1
  br label %bb

bb:
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %exit

exit:
  ret void
}

declare token @llvm.directive.region.entry() nounwind
declare void @llvm.directive.region.exit(token) nounwind
