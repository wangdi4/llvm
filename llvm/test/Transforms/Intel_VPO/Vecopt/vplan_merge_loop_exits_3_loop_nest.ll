; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; This test crashed before the patch that assigns the cascaded if blocks to the
; correct loop (https://git-amr-2.devtools.intel.com/gerrit/#/c/214475/).
; Because two of the exit blocks (inner_loop2_exitbb2 and inner_loop2_exitbb3)
; of the inner most loop (inner_loop_2) did not belong to the next loop nesting
; level (inner_loop_1), but they belonged to the outermost loop. However,
; CASCADED_IF_BLOCK0 and CASCADED_IF_BLOCK3 were wrongly assigned to inner_loop_1.
; This is now fixed and the cascaded if blocks are assigned to the correct loop.
; "inner_loop_2_exitbb1" (BB10) belongs to the second loop nest. Hence,
; CASCADED_IF_BLOCK0 is assigned to the second loop nest. "inner_loop_2_exitbb2"
; (BB14) and "inner_loop_2_ exitbb3"(BB15) belong to the outer-most loop. Thus,
; CASCADED_IF_BLOCK3 is assigned to the outermost loop and it is an exit block
; for inner_loop_1.

; RUN: opt < %s -vplan-func-vec -disable-output -print-after-vplan-func-vec-loop-exit-canon | FileCheck %s
; RUN: opt < %s -passes="vplan-func-vec" -disable-output -print-after-vplan-func-vec-loop-exit-canon | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define void @main(i32 %vf) {
; CHECK-LABEL:  VPlan IR for: main
; CHECK-NEXT:    [[BB0:BB[0-9]+]]:
; CHECK-NEXT:     i32 [[VP_LANE:%.*]] = induction-init{add} i32 0 i32 1
; CHECK-NEXT:    SUCCESSORS(1):[[BB1:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]:
; CHECK-NEXT:     i32 [[VP_OUTER_LOOP_INDUCTION_VAR:%.*]] = phi  [ i32 0, [[BB0]] ],  [ i32 [[VP_OUTER_LOOP_INDUCTION:%.*]], [[BB2:BB[0-9]+]] ]
; CHECK-NEXT:    SUCCESSORS(1):[[BB3:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB2]] [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]:
; CHECK-NEXT:     i32 [[VP_INNER_LOOP_1_INDUCTION_VAR:%.*]] = phi  [ i32 0, [[BB1]] ],  [ i32 [[VP_INNER_LOOP_1_INDUCTION_SSA_PHI:%.*]], [[NEW_LOOP_LATCH0:new.loop.latch[0-9]+]] ]
; CHECK-NEXT:     i1 [[VP_CMP1:%.*]] = icmp i32 [[VP_INNER_LOOP_1_INDUCTION_VAR]] i32 8
; CHECK-NEXT:    SUCCESSORS(2):[[BB4:BB[0-9]+]](i1 [[VP_CMP1]]), [[INTERMEDIATE_BB0:intermediate.bb[0-9]+]](!i1 [[VP_CMP1]])
; CHECK-NEXT:    PREDECESSORS(2): [[NEW_LOOP_LATCH0]] [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[INTERMEDIATE_BB0]]:
; CHECK-NEXT:       <Empty Block>
; CHECK-NEXT:      SUCCESSORS(1):[[NEW_LOOP_LATCH0]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB4]]:
; CHECK-NEXT:       <Empty Block>
; CHECK-NEXT:      SUCCESSORS(1):[[BB5:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB5]]:
; CHECK-NEXT:       i32 [[VP_INNER_LOOP_2_INDUCTION_VAR:%.*]] = phi  [ i32 0, [[BB4]] ],  [ i32 [[VP_INNER_LOOP_2_INDUCTION_SSA_PHI:%.*]], [[NEW_LOOP_LATCH1:new.loop.latch[0-9]+]] ]
; CHECK-NEXT:       i1 [[VP_CMP2:%.*]] = icmp i32 [[VP_INNER_LOOP_2_INDUCTION_VAR]] i32 16
; CHECK-NEXT:      SUCCESSORS(2):[[BB6:BB[0-9]+]](i1 [[VP_CMP2]]), [[INTERMEDIATE_BB1:intermediate.bb[0-9]+]](!i1 [[VP_CMP2]])
; CHECK-NEXT:      PREDECESSORS(2): [[NEW_LOOP_LATCH1]] [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[INTERMEDIATE_BB1]]:
; CHECK-NEXT:         <Empty Block>
; CHECK-NEXT:        SUCCESSORS(1):[[NEW_LOOP_LATCH1]]
; CHECK-NEXT:        PREDECESSORS(1): [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB6]]:
; CHECK-NEXT:         i32 [[VP_VAR_2:%.*]] = add i32 [[VP_INNER_LOOP_2_INDUCTION_VAR]] i32 2
; CHECK-NEXT:         i1 [[VP_CMP3:%.*]] = icmp i32 [[VP_VAR_2]] i32 32
; CHECK-NEXT:        SUCCESSORS(2):[[BB7:BB[0-9]+]](i1 [[VP_CMP3]]), [[INTERMEDIATE_BB2:intermediate.bb[0-9]+]](!i1 [[VP_CMP3]])
; CHECK-NEXT:        PREDECESSORS(1): [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:          [[INTERMEDIATE_BB2]]:
; CHECK-NEXT:           <Empty Block>
; CHECK-NEXT:          SUCCESSORS(1):[[NEW_LOOP_LATCH1]]
; CHECK-NEXT:          PREDECESSORS(1): [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB7]]:
; CHECK-NEXT:         i32 [[VP_INNER_LOOP_2_INDUCTION:%.*]] = add i32 [[VP_INNER_LOOP_2_INDUCTION_VAR]] i32 1
; CHECK-NEXT:         i1 [[VP_INNER_LOOP_2_BOTTOM_TEST:%.*]] = icmp i32 [[VP_INNER_LOOP_2_INDUCTION]] i32 128
; CHECK-NEXT:        SUCCESSORS(1):[[NEW_LOOP_LATCH1]]
; CHECK-NEXT:        PREDECESSORS(1): [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[NEW_LOOP_LATCH1]]:
; CHECK-NEXT:       i32 [[VP_INNER_LOOP_2_INDUCTION_SSA_PHI]] = phi  [ i32 [[VP_INNER_LOOP_2_INDUCTION]], [[BB7]] ],  [ i32 undef, [[INTERMEDIATE_BB1]] ],  [ i32 undef, [[INTERMEDIATE_BB2]] ]
; CHECK-NEXT:       i32 [[VP_EXIT_ID_PHI:%.*]] = phi  [ i32 0, [[BB7]] ],  [ i32 1, [[INTERMEDIATE_BB1]] ],  [ i32 2, [[INTERMEDIATE_BB2]] ]
; CHECK-NEXT:       i1 [[VP_TAKE_BACKEDGE_COND:%.*]] = phi  [ i1 [[VP_INNER_LOOP_2_BOTTOM_TEST]], [[BB7]] ],  [ i1 false, [[INTERMEDIATE_BB1]] ],  [ i1 false, [[INTERMEDIATE_BB2]] ]
; CHECK-NEXT:      SUCCESSORS(2):[[BB5]](i1 [[VP_TAKE_BACKEDGE_COND]]), [[CASCADED_IF_BLOCK0:cascaded.if.block[0-9]+]](!i1 [[VP_TAKE_BACKEDGE_COND]])
; CHECK-NEXT:      PREDECESSORS(3): [[BB7]] [[INTERMEDIATE_BB1]] [[INTERMEDIATE_BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[CASCADED_IF_BLOCK0]]:
; CHECK-NEXT:       i1 [[VP0:%.*]] = icmp i32 [[VP_EXIT_ID_PHI]] i32 1
; CHECK-NEXT:      SUCCESSORS(2):[[BB8:BB[0-9]+]](i1 [[VP0]]), [[INTERMEDIATE_BB3:intermediate.bb[0-9]+]](!i1 [[VP0]])
; CHECK-NEXT:      PREDECESSORS(1): [[NEW_LOOP_LATCH1]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[INTERMEDIATE_BB3]]:
; CHECK-NEXT:         <Empty Block>
; CHECK-NEXT:        SUCCESSORS(1):[[NEW_LOOP_LATCH0]]
; CHECK-NEXT:        PREDECESSORS(1): [[CASCADED_IF_BLOCK0]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB8]]:
; CHECK-NEXT:       <Empty Block>
; CHECK-NEXT:      SUCCESSORS(1):[[BB9:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(1): [[CASCADED_IF_BLOCK0]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB9]]:
; CHECK-NEXT:       i32 [[VP_INNER_LOOP_1_INDUCTION:%.*]] = add i32 [[VP_INNER_LOOP_1_INDUCTION_VAR]] i32 1
; CHECK-NEXT:       i1 [[VP_INNER_LOOP_1_BOTTOM_TEST:%.*]] = icmp i32 [[VP_INNER_LOOP_1_INDUCTION]] i32 128
; CHECK-NEXT:      SUCCESSORS(1):[[NEW_LOOP_LATCH0]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB8]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[NEW_LOOP_LATCH0]]:
; CHECK-NEXT:     i32 [[VP_EXIT_ID_PHI_SSA_PHI:%.*]] = phi  [ i32 [[VP_EXIT_ID_PHI]], [[BB9]] ],  [ i32 undef, [[INTERMEDIATE_BB0]] ],  [ i32 [[VP_EXIT_ID_PHI]], [[INTERMEDIATE_BB3]] ]
; CHECK-NEXT:     i32 [[VP_INNER_LOOP_1_INDUCTION_SSA_PHI]] = phi  [ i32 [[VP_INNER_LOOP_1_INDUCTION]], [[BB9]] ],  [ i32 undef, [[INTERMEDIATE_BB0]] ],  [ i32 undef, [[INTERMEDIATE_BB3]] ]
; CHECK-NEXT:     i32 [[VP_EXIT_ID_PHI_1:%.*]] = phi  [ i32 0, [[BB9]] ],  [ i32 1, [[INTERMEDIATE_BB0]] ],  [ i32 2, [[INTERMEDIATE_BB3]] ]
; CHECK-NEXT:     i1 [[VP_TAKE_BACKEDGE_COND_1:%.*]] = phi  [ i1 [[VP_INNER_LOOP_1_BOTTOM_TEST]], [[BB9]] ],  [ i1 false, [[INTERMEDIATE_BB0]] ],  [ i1 false, [[INTERMEDIATE_BB3]] ]
; CHECK-NEXT:    SUCCESSORS(2):[[BB3]](i1 [[VP_TAKE_BACKEDGE_COND_1]]), [[CASCADED_IF_BLOCK1:cascaded.if.block[0-9]+]](!i1 [[VP_TAKE_BACKEDGE_COND_1]])
; CHECK-NEXT:    PREDECESSORS(3): [[BB9]] [[INTERMEDIATE_BB0]] [[INTERMEDIATE_BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[CASCADED_IF_BLOCK1]]:
; CHECK-NEXT:     i1 [[VP1:%.*]] = icmp i32 [[VP_EXIT_ID_PHI_1]] i32 1
; CHECK-NEXT:    SUCCESSORS(2):[[BB10:BB[0-9]+]](i1 [[VP1]]), [[CASCADED_IF_BLOCK2:cascaded.if.block[0-9]+]](!i1 [[VP1]])
; CHECK-NEXT:    PREDECESSORS(1): [[NEW_LOOP_LATCH0]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[CASCADED_IF_BLOCK2]]:
; CHECK-NEXT:       i1 [[VP2:%.*]] = icmp i32 [[VP_EXIT_ID_PHI_1]] i32 2
; CHECK-NEXT:      SUCCESSORS(2):[[CASCADED_IF_BLOCK3:cascaded.if.block[0-9]+]](i1 [[VP2]]), [[BB11:BB[0-9]+]](!i1 [[VP2]])
; CHECK-NEXT:      PREDECESSORS(1): [[CASCADED_IF_BLOCK1]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB11]]:
; CHECK-NEXT:         <Empty Block>
; CHECK-NEXT:        SUCCESSORS(1):[[BB12:BB[0-9]+]]
; CHECK-NEXT:        PREDECESSORS(1): [[CASCADED_IF_BLOCK2]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[CASCADED_IF_BLOCK3]]:
; CHECK-NEXT:         i1 [[VP3:%.*]] = icmp i32 [[VP_EXIT_ID_PHI_SSA_PHI]] i32 2
; CHECK-NEXT:        SUCCESSORS(2):[[BB13:BB[0-9]+]](i1 [[VP3]]), [[BB12]](!i1 [[VP3]])
; CHECK-NEXT:        PREDECESSORS(1): [[CASCADED_IF_BLOCK2]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB12]]:
; CHECK-NEXT:         <Empty Block>
; CHECK-NEXT:        SUCCESSORS(1):[[BB2]]
; CHECK-NEXT:        PREDECESSORS(2): [[BB11]] [[CASCADED_IF_BLOCK3]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB10]]:
; CHECK-NEXT:         <Empty Block>
; CHECK-NEXT:        SUCCESSORS(1):[[BB13]]
; CHECK-NEXT:        PREDECESSORS(1): [[CASCADED_IF_BLOCK1]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB13]]:
; CHECK-NEXT:       <Empty Block>
; CHECK-NEXT:      SUCCESSORS(1):[[BB2]]
; CHECK-NEXT:      PREDECESSORS(2): [[BB10]] [[CASCADED_IF_BLOCK3]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]:
; CHECK-NEXT:     i32 [[VP_OUTER_LOOP_INDUCTION]] = add i32 [[VP_OUTER_LOOP_INDUCTION_VAR]] i32 [[VF0:%.*]]
; CHECK-NEXT:     i1 [[VP_CMP4:%.*]] = icmp i32 [[VP_OUTER_LOOP_INDUCTION]] i32 1024
; CHECK-NEXT:    SUCCESSORS(2):[[BB1]](i1 [[VP_CMP4]]), [[BB14:BB[0-9]+]](!i1 [[VP_CMP4]])
; CHECK-NEXT:    PREDECESSORS(2): [[BB12]] [[BB13]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB14]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB15:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB15]]:
; CHECK-NEXT:     void [[VP4:%.*]] = ret
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB14]]
;
entry:
  %lane = call i32 @llvm.vplan.laneid()
  br label %outer_loop_header
;-------------------------------------------------------------------------------
;                     BEFORE MERGE LOOP EXITS TRANSFORMATION
;-------------------------------------------------------------------------------
;                              outer_loop_header
;                                      |
;         +-------------------inner_loop_1_header<-----------------------------+
;         |                            |                                       |
;         |           +---------------bb1                                      |
;         |           |                |                                       |
;         |           |  +--->inner_loop_2_header---------------+              |
;         |           |  |             |                        |              |
;         |           |  |            bb2                       |              |
;         |           |  |             |                        |              |
;         |           |  +----inner_loop_2_latch                |              |
;         |           |                \                        |              |
;         |           |                 \             inner_loop_2_exitbb1     |
;         |           |                  \                      |              |
;         |           |                   \           inner_loop_1_latch-------+
;         |           |                    \                    |
;inner_loop_1_exitbb1 |                     \         inner_loop_1_exitbb2
;              |      |                      \          /
;             inner_loop_2_exitbb2       inner_loop_2_exitbb3
;                                \           /
;                              outer_loop_latch
;                                      |
outer_loop_header:
  %outer_loop_induction_var = phi i32 [ 0, %entry ], [ %outer_loop_induction, %outer_loop_latch ]
  br label %inner_loop_1_header

inner_loop_1_header:
  %inner_loop_1_induction_var = phi i32 [ 0, %outer_loop_header ], [ %inner_loop_1_induction, %inner_loop_1_latch ]
  %cmp1 = icmp eq i32 %inner_loop_1_induction_var, 8
  br i1 %cmp1, label %bb1, label %inner_loop_1_exitbb1

bb1:
  br label %inner_loop_2_header

inner_loop_2_header:
  %inner_loop_2_induction_var = phi i32 [ 0, %bb1 ], [ %inner_loop_2_induction, %inner_loop_2_latch ]
  %cmp2 = icmp eq i32 %inner_loop_2_induction_var, 16
  br i1 %cmp2, label %bb2, label %inner_loop_2_exitbb1

bb2:
  %var_2 = add nsw i32 %inner_loop_2_induction_var, 2
  %cmp3 = icmp eq i32 %var_2, 32
  br i1 %cmp3, label %inner_loop_2_latch, label %inner_loop_2_exitbb2

inner_loop_2_latch:
  %inner_loop_2_induction = add nsw i32 %inner_loop_2_induction_var, 1
  %inner_loop_2_bottom_test = icmp eq i32 %inner_loop_2_induction, 128
  br i1 %inner_loop_2_bottom_test, label %inner_loop_2_header, label %inner_loop_2_exitbb3

inner_loop_2_exitbb1:
  br label %inner_loop_1_latch

inner_loop_1_latch:
  %inner_loop_1_induction = add nsw i32 %inner_loop_1_induction_var, 1
  %inner_loop_1_bottom_test = icmp eq i32 %inner_loop_1_induction, 128
  br i1 %inner_loop_1_bottom_test, label %inner_loop_1_header, label %inner_loop_1_exitbb2

inner_loop_1_exitbb1:
  br label %inner_loop_2_exitbb2

inner_loop_2_exitbb2:
  br label %outer_loop_latch

inner_loop_1_exitbb2:
  br label %inner_loop_2_exitbb3

inner_loop_2_exitbb3:
  br label %outer_loop_latch

outer_loop_latch:
  %outer_loop_induction = add nsw i32 %outer_loop_induction_var, %vf
  %cmp4 = icmp eq i32 %outer_loop_induction, 1024
  br i1 %cmp4, label %outer_loop_header, label %outer_loop_exit

outer_loop_exit:
  br label %end

end:
  ret void
}

declare i32 @llvm.vplan.laneid()
