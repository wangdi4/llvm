; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -passes="hir-ssa-deconstruction,hir-temp-cleanup,hir-loop-concatenation,hir-vec-dir-insert,hir-vplan-vec,hir-cg" -enable-intel-advanced-opts -mattr=+avx2 -xmain-opt-level=3 -vplan-print-after-plain-cfg -S -disable-output 2>&1 < %s | FileCheck %s

;
; The test case below is added to demonstrate incorrect decomposition of an add
; HLInst whose LVAL is a memref, i.e., an HLInst like a[i] = a + b. Decomposition
; generates an add instruction with three operands whose third operand is the LVAL
; address. The correct decomposition should generate an add using the first two
; operands followed by a store to the third operand. This test is a copy of
; Transforms/Intel_LoopTransforms/HIRLoopConcatenation/x264_pixel_satd_16x16.ll.
; Unfortunately, the issue does not duplicate with a smaller test case and requires
; a set of HIR transformations to kick in. The RUN line has been modified to invoke
; VPlanDriverHIR.
;
; Test for no compilation errors.

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind readonly uwtable
define hidden i32 @x264_pixel_satd_16x16(ptr nocapture readonly, i32, ptr nocapture readonly, i32) #0 {
; CHECK-LABEL:  VPlan after importing plain CFG
; CHECK-LABEL:  VPlan after importing plain CFG
; CHECK:          i64 [[VP7:%.*]] = phi  [ i64 0, {{.*}} ],  [ i64 [[VP8:%.*]], {{.*}} ]
; CHECK:          ptr [[VP75:%.*]] = subscript inbounds ptr [[ALLOCA300:%alloca[0-9]*]] i64 0 i64 [[VP7]]
; CHECK-NEXT:     i32 [[VP76:%.*]] = load ptr [[VP75]]
; CHECK-NEXT:     i32 [[VP77:%.*]] = add i32 {{.*}} i32 {{.*}}
; CHECK-NEXT:     i32 [[VP78:%.*]] = add i32 {{.*}} i32 {{.*}}
; CHECK-NEXT:     i32 [[VP79:%.*]] = add i32 [[VP78]] i32 [[VP76]]
; CHECK-NEXT:     ptr [[VP80:%.*]] = subscript inbounds ptr [[ALLOCA300]] i64 0 i64 [[VP7]]
; CHECK-NEXT:     i32 [[VP81:%.*]] = add i32 [[VP77]] i32 [[VP79]]
; CHECK-NEXT:     store i32 [[VP81]] ptr [[VP80]]

; CHECK:          ptr [[VP148:%.*]] = subscript inbounds ptr [[ALLOCA310:%.*]] i64 0 i64 [[VP7]]
; CHECK-NEXT:     i32 [[VP149:%.*]] = load ptr [[VP148]]
; CHECK-NEXT:     i32 [[VP150:%.*]] = add i32 {{.*}} i32 {{.*}}
; CHECK-NEXT:     i32 [[VP151:%.*]] = add i32 {{.*}} i32 {{.*}}
; CHECK-NEXT:     i32 [[VP152:%.*]] = add i32 [[VP151]] i32 [[VP149]]
; CHECK-NEXT:     ptr [[VP153:%.*]] = subscript inbounds ptr [[ALLOCA310]] i64 0 i64 [[VP7]]
; CHECK-NEXT:     i32 [[VP154:%.*]] = add i32 [[VP150]] i32 [[VP152]]
; CHECK-NEXT:     store i32 [[VP154]] ptr [[VP153]]

; CHECK:          ptr [[VP221:%.*]] = subscript inbounds ptr [[ALLOCA320:%.*]] i64 0 i64 [[VP7]]
; CHECK-NEXT:     i32 [[VP222:%.*]] = load ptr [[VP221]]
; CHECK-NEXT:     i32 [[VP223:%.*]] = add i32 {{.*}} i32 {{.*}}
; CHECK-NEXT:     i32 [[VP224:%.*]] = add i32 {{.*}} i32 {{.*}}
; CHECK-NEXT:     i32 [[VP225:%.*]] = add i32 [[VP224]] i32 [[VP222]]
; CHECK-NEXT:     ptr [[VP226:%.*]] = subscript inbounds ptr [[ALLOCA320]] i64 0 i64 [[VP7]]
; CHECK-NEXT:     i32 [[VP227:%.*]] = add i32 [[VP223]] i32 [[VP225]]
; CHECK-NEXT:     store i32 [[VP227]] ptr [[VP226]]

; CHECK:          ptr [[VP292:%.*]] = subscript inbounds ptr [[ALLOCA330:.*]] i64 0 i64 [[VP7]]
; CHECK-NEXT:     i32 [[VP293:%.*]] = load ptr [[VP292]]
; CHECK-NEXT:     i32 [[VP294:%.*]] = add i32 {{.*}} i32 {{.*}}
; CHECK-NEXT:     i32 [[VP295:%.*]] = add i32 {{.*}} i32 {{.*}}
; CHECK-NEXT:     i32 [[VP296:%.*]] = add i32 [[VP295]] i32 [[VP293]]
; CHECK-NEXT:     ptr [[VP297:%.*]] = subscript inbounds ptr [[ALLOCA330]] i64 0 i64 [[VP7]]
; CHECK-NEXT:     i32 [[VP298:%.*]] = add i32 [[VP294]] i32 [[VP296]]
; CHECK-NEXT:     store i32 [[VP298]] ptr [[VP297]]
; CHECK-NEXT:     i64 [[VP8]] = add i64 [[VP7]] i64 1
; CHECK-NEXT:     i1 [[VP299:%.*]] = icmp slt i64 [[VP8]] i64 8
; CHECK-LABEL:  VPlan after importing plain CFG
;
  %5 = alloca [4 x [4 x i32]], align 16
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %5) #2
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  br label %8

; <label>:9:                                      ; preds = %8, %4
  %9 = phi i64 [ 0, %4 ], [ %86, %8 ]
  %10 = phi ptr [ %0, %4 ], [ %87, %8 ]
  %11 = phi ptr [ %2, %4 ], [ %88, %8 ]
  %12 = load i8, ptr %10, align 1, !tbaa !3
  %13 = zext i8 %12 to i32
  %14 = load i8, ptr %11, align 1, !tbaa !3
  %15 = zext i8 %14 to i32
  %16 = sub nsw i32 %13, %15
  %17 = getelementptr inbounds i8, ptr %10, i64 4
  %18 = load i8, ptr %17, align 1, !tbaa !3
  %19 = zext i8 %18 to i32
  %20 = getelementptr inbounds i8, ptr %11, i64 4
  %21 = load i8, ptr %20, align 1, !tbaa !3
  %22 = zext i8 %21 to i32
  %23 = sub nsw i32 %19, %22
  %24 = shl nsw i32 %23, 16
  %25 = add nsw i32 %24, %16
  %26 = getelementptr inbounds i8, ptr %10, i64 1
  %27 = load i8, ptr %26, align 1, !tbaa !3
  %28 = zext i8 %27 to i32
  %29 = getelementptr inbounds i8, ptr %11, i64 1
  %30 = load i8, ptr %29, align 1, !tbaa !3
  %31 = zext i8 %30 to i32
  %32 = sub nsw i32 %28, %31
  %33 = getelementptr inbounds i8, ptr %10, i64 5
  %34 = load i8, ptr %33, align 1, !tbaa !3
  %35 = zext i8 %34 to i32
  %36 = getelementptr inbounds i8, ptr %11, i64 5
  %37 = load i8, ptr %36, align 1, !tbaa !3
  %38 = zext i8 %37 to i32
  %39 = sub nsw i32 %35, %38
  %40 = shl nsw i32 %39, 16
  %41 = add nsw i32 %40, %32
  %42 = getelementptr inbounds i8, ptr %10, i64 2
  %43 = load i8, ptr %42, align 1, !tbaa !3
  %44 = zext i8 %43 to i32
  %45 = getelementptr inbounds i8, ptr %11, i64 2
  %46 = load i8, ptr %45, align 1, !tbaa !3
  %47 = zext i8 %46 to i32
  %48 = sub nsw i32 %44, %47
  %49 = getelementptr inbounds i8, ptr %10, i64 6
  %50 = load i8, ptr %49, align 1, !tbaa !3
  %51 = zext i8 %50 to i32
  %52 = getelementptr inbounds i8, ptr %11, i64 6
  %53 = load i8, ptr %52, align 1, !tbaa !3
  %54 = zext i8 %53 to i32
  %55 = sub nsw i32 %51, %54
  %56 = shl nsw i32 %55, 16
  %57 = add nsw i32 %56, %48
  %58 = getelementptr inbounds i8, ptr %10, i64 3
  %59 = load i8, ptr %58, align 1, !tbaa !3
  %60 = zext i8 %59 to i32
  %61 = getelementptr inbounds i8, ptr %11, i64 3
  %62 = load i8, ptr %61, align 1, !tbaa !3
  %63 = zext i8 %62 to i32
  %64 = sub nsw i32 %60, %63
  %65 = getelementptr inbounds i8, ptr %10, i64 7
  %66 = load i8, ptr %65, align 1, !tbaa !3
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds i8, ptr %11, i64 7
  %69 = load i8, ptr %68, align 1, !tbaa !3
  %70 = zext i8 %69 to i32
  %71 = sub nsw i32 %67, %70
  %72 = shl nsw i32 %71, 16
  %73 = add nsw i32 %72, %64
  %74 = add nsw i32 %41, %25
  %75 = sub nsw i32 %25, %41
  %76 = add nsw i32 %73, %57
  %77 = sub nsw i32 %57, %73
  %78 = add nsw i32 %76, %74
  %79 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 %9, i64 0
  store i32 %78, ptr %79, align 16, !tbaa !6
  %80 = sub nsw i32 %74, %76
  %81 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 %9, i64 2
  store i32 %80, ptr %81, align 8, !tbaa !6
  %82 = add nsw i32 %77, %75
  %83 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 %9, i64 1
  store i32 %82, ptr %83, align 4, !tbaa !6
  %84 = sub nsw i32 %75, %77
  %85 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 %9, i64 3
  store i32 %84, ptr %85, align 4, !tbaa !6
  %86 = add nuw nsw i64 %9, 1
  %87 = getelementptr inbounds i8, ptr %10, i64 %6
  %88 = getelementptr inbounds i8, ptr %11, i64 %7
  %89 = icmp eq i64 %86, 4
  br i1 %89, label %90, label %8

; <label>:91:                                     ; preds = %8
  br label %91

; <label>:92:                                     ; preds = %91, %90
  %92 = phi i64 [ %134, %91 ], [ 0, %90 ]
  %93 = phi i32 [ %133, %91 ], [ 0, %90 ]
  %94 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 0, i64 %92
  %95 = load i32, ptr %94, align 4, !tbaa !6
  %96 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 1, i64 %92
  %97 = load i32, ptr %96, align 4, !tbaa !6
  %98 = add i32 %97, %95
  %99 = sub i32 %95, %97
  %100 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 2, i64 %92
  %101 = load i32, ptr %100, align 4, !tbaa !6
  %102 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 3, i64 %92
  %103 = load i32, ptr %102, align 4, !tbaa !6
  %104 = add i32 %103, %101
  %105 = sub i32 %101, %103
  %106 = add nsw i32 %104, %98
  %107 = sub nsw i32 %98, %104
  %108 = add nsw i32 %105, %99
  %109 = sub nsw i32 %99, %105
  %110 = lshr i32 %106, 15
  %111 = and i32 %110, 65537
  %112 = mul nuw i32 %111, 65535
  %113 = add i32 %112, %106
  %114 = xor i32 %113, %112
  %115 = lshr i32 %108, 15
  %116 = and i32 %115, 65537
  %117 = mul nuw i32 %116, 65535
  %118 = add i32 %117, %108
  %119 = xor i32 %118, %117
  %120 = lshr i32 %107, 15
  %121 = and i32 %120, 65537
  %122 = mul nuw i32 %121, 65535
  %123 = add i32 %122, %107
  %124 = xor i32 %123, %122
  %125 = lshr i32 %109, 15
  %126 = and i32 %125, 65537
  %127 = mul nuw i32 %126, 65535
  %128 = add i32 %127, %109
  %129 = xor i32 %128, %127
  %130 = add i32 %124, %93
  %131 = add i32 %130, %129
  %132 = add i32 %114, %119
  %133 = add i32 %132, %131
  %134 = add nuw nsw i64 %92, 1
  %135 = icmp eq i64 %134, 4
  br i1 %135, label %136, label %91

; <label>:137:                                    ; preds = %91
  %137 = phi i32 [ %133, %91 ]
  %138 = lshr i32 %137, 16
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %5) #2
  %139 = shl nsw i32 %1, 2
  %140 = sext i32 %139 to i64
  %141 = getelementptr inbounds i8, ptr %0, i64 %140
  %142 = shl nsw i32 %3, 2
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds i8, ptr %2, i64 %143
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %5) #2
  br label %145

; <label>:146:                                    ; preds = %145, %136
  %146 = phi i64 [ 0, %136 ], [ %223, %145 ]
  %147 = phi ptr [ %141, %136 ], [ %224, %145 ]
  %148 = phi ptr [ %144, %136 ], [ %225, %145 ]
  %149 = load i8, ptr %147, align 1, !tbaa !3
  %150 = zext i8 %149 to i32
  %151 = load i8, ptr %148, align 1, !tbaa !3
  %152 = zext i8 %151 to i32
  %153 = sub nsw i32 %150, %152
  %154 = getelementptr inbounds i8, ptr %147, i64 4
  %155 = load i8, ptr %154, align 1, !tbaa !3
  %156 = zext i8 %155 to i32
  %157 = getelementptr inbounds i8, ptr %148, i64 4
  %158 = load i8, ptr %157, align 1, !tbaa !3
  %159 = zext i8 %158 to i32
  %160 = sub nsw i32 %156, %159
  %161 = shl nsw i32 %160, 16
  %162 = add nsw i32 %161, %153
  %163 = getelementptr inbounds i8, ptr %147, i64 1
  %164 = load i8, ptr %163, align 1, !tbaa !3
  %165 = zext i8 %164 to i32
  %166 = getelementptr inbounds i8, ptr %148, i64 1
  %167 = load i8, ptr %166, align 1, !tbaa !3
  %168 = zext i8 %167 to i32
  %169 = sub nsw i32 %165, %168
  %170 = getelementptr inbounds i8, ptr %147, i64 5
  %171 = load i8, ptr %170, align 1, !tbaa !3
  %172 = zext i8 %171 to i32
  %173 = getelementptr inbounds i8, ptr %148, i64 5
  %174 = load i8, ptr %173, align 1, !tbaa !3
  %175 = zext i8 %174 to i32
  %176 = sub nsw i32 %172, %175
  %177 = shl nsw i32 %176, 16
  %178 = add nsw i32 %177, %169
  %179 = getelementptr inbounds i8, ptr %147, i64 2
  %180 = load i8, ptr %179, align 1, !tbaa !3
  %181 = zext i8 %180 to i32
  %182 = getelementptr inbounds i8, ptr %148, i64 2
  %183 = load i8, ptr %182, align 1, !tbaa !3
  %184 = zext i8 %183 to i32
  %185 = sub nsw i32 %181, %184
  %186 = getelementptr inbounds i8, ptr %147, i64 6
  %187 = load i8, ptr %186, align 1, !tbaa !3
  %188 = zext i8 %187 to i32
  %189 = getelementptr inbounds i8, ptr %148, i64 6
  %190 = load i8, ptr %189, align 1, !tbaa !3
  %191 = zext i8 %190 to i32
  %192 = sub nsw i32 %188, %191
  %193 = shl nsw i32 %192, 16
  %194 = add nsw i32 %193, %185
  %195 = getelementptr inbounds i8, ptr %147, i64 3
  %196 = load i8, ptr %195, align 1, !tbaa !3
  %197 = zext i8 %196 to i32
  %198 = getelementptr inbounds i8, ptr %148, i64 3
  %199 = load i8, ptr %198, align 1, !tbaa !3
  %200 = zext i8 %199 to i32
  %201 = sub nsw i32 %197, %200
  %202 = getelementptr inbounds i8, ptr %147, i64 7
  %203 = load i8, ptr %202, align 1, !tbaa !3
  %204 = zext i8 %203 to i32
  %205 = getelementptr inbounds i8, ptr %148, i64 7
  %206 = load i8, ptr %205, align 1, !tbaa !3
  %207 = zext i8 %206 to i32
  %208 = sub nsw i32 %204, %207
  %209 = shl nsw i32 %208, 16
  %210 = add nsw i32 %209, %201
  %211 = add nsw i32 %178, %162
  %212 = sub nsw i32 %162, %178
  %213 = add nsw i32 %210, %194
  %214 = sub nsw i32 %194, %210
  %215 = add nsw i32 %213, %211
  %216 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 %146, i64 0
  store i32 %215, ptr %216, align 16, !tbaa !6
  %217 = sub nsw i32 %211, %213
  %218 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 %146, i64 2
  store i32 %217, ptr %218, align 8, !tbaa !6
  %219 = add nsw i32 %214, %212
  %220 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 %146, i64 1
  store i32 %219, ptr %220, align 4, !tbaa !6
  %221 = sub nsw i32 %212, %214
  %222 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 %146, i64 3
  store i32 %221, ptr %222, align 4, !tbaa !6
  %223 = add nuw nsw i64 %146, 1
  %224 = getelementptr inbounds i8, ptr %147, i64 %6
  %225 = getelementptr inbounds i8, ptr %148, i64 %7
  %226 = icmp eq i64 %223, 4
  br i1 %226, label %227, label %145

; <label>:228:                                    ; preds = %145
  %228 = and i32 %137, 65535
  %229 = add nuw nsw i32 %228, %138
  br label %230

; <label>:231:                                    ; preds = %230, %227
  %231 = phi i64 [ %273, %230 ], [ 0, %227 ]
  %232 = phi i32 [ %272, %230 ], [ 0, %227 ]
  %233 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 0, i64 %231
  %234 = load i32, ptr %233, align 4, !tbaa !6
  %235 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 1, i64 %231
  %236 = load i32, ptr %235, align 4, !tbaa !6
  %237 = add i32 %236, %234
  %238 = sub i32 %234, %236
  %239 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 2, i64 %231
  %240 = load i32, ptr %239, align 4, !tbaa !6
  %241 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 3, i64 %231
  %242 = load i32, ptr %241, align 4, !tbaa !6
  %243 = add i32 %242, %240
  %244 = sub i32 %240, %242
  %245 = add nsw i32 %243, %237
  %246 = sub nsw i32 %237, %243
  %247 = add nsw i32 %244, %238
  %248 = sub nsw i32 %238, %244
  %249 = lshr i32 %245, 15
  %250 = and i32 %249, 65537
  %251 = mul nuw i32 %250, 65535
  %252 = add i32 %251, %245
  %253 = xor i32 %252, %251
  %254 = lshr i32 %247, 15
  %255 = and i32 %254, 65537
  %256 = mul nuw i32 %255, 65535
  %257 = add i32 %256, %247
  %258 = xor i32 %257, %256
  %259 = lshr i32 %246, 15
  %260 = and i32 %259, 65537
  %261 = mul nuw i32 %260, 65535
  %262 = add i32 %261, %246
  %263 = xor i32 %262, %261
  %264 = lshr i32 %248, 15
  %265 = and i32 %264, 65537
  %266 = mul nuw i32 %265, 65535
  %267 = add i32 %266, %248
  %268 = xor i32 %267, %266
  %269 = add i32 %263, %232
  %270 = add i32 %269, %268
  %271 = add i32 %253, %258
  %272 = add i32 %271, %270
  %273 = add nuw nsw i64 %231, 1
  %274 = icmp eq i64 %273, 4
  br i1 %274, label %275, label %230

; <label>:276:                                    ; preds = %230
  %276 = phi i32 [ %272, %230 ]
  %277 = lshr i32 %229, 1
  %278 = lshr i32 %276, 16
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %5) #2
  %279 = getelementptr inbounds i8, ptr %0, i64 8
  %280 = getelementptr inbounds i8, ptr %2, i64 8
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %5) #2
  br label %281

; <label>:282:                                    ; preds = %281, %275
  %282 = phi i64 [ 0, %275 ], [ %359, %281 ]
  %283 = phi ptr [ %279, %275 ], [ %360, %281 ]
  %284 = phi ptr [ %280, %275 ], [ %361, %281 ]
  %285 = load i8, ptr %283, align 1, !tbaa !3
  %286 = zext i8 %285 to i32
  %287 = load i8, ptr %284, align 1, !tbaa !3
  %288 = zext i8 %287 to i32
  %289 = sub nsw i32 %286, %288
  %290 = getelementptr inbounds i8, ptr %283, i64 4
  %291 = load i8, ptr %290, align 1, !tbaa !3
  %292 = zext i8 %291 to i32
  %293 = getelementptr inbounds i8, ptr %284, i64 4
  %294 = load i8, ptr %293, align 1, !tbaa !3
  %295 = zext i8 %294 to i32
  %296 = sub nsw i32 %292, %295
  %297 = shl nsw i32 %296, 16
  %298 = add nsw i32 %297, %289
  %299 = getelementptr inbounds i8, ptr %283, i64 1
  %300 = load i8, ptr %299, align 1, !tbaa !3
  %301 = zext i8 %300 to i32
  %302 = getelementptr inbounds i8, ptr %284, i64 1
  %303 = load i8, ptr %302, align 1, !tbaa !3
  %304 = zext i8 %303 to i32
  %305 = sub nsw i32 %301, %304
  %306 = getelementptr inbounds i8, ptr %283, i64 5
  %307 = load i8, ptr %306, align 1, !tbaa !3
  %308 = zext i8 %307 to i32
  %309 = getelementptr inbounds i8, ptr %284, i64 5
  %310 = load i8, ptr %309, align 1, !tbaa !3
  %311 = zext i8 %310 to i32
  %312 = sub nsw i32 %308, %311
  %313 = shl nsw i32 %312, 16
  %314 = add nsw i32 %313, %305
  %315 = getelementptr inbounds i8, ptr %283, i64 2
  %316 = load i8, ptr %315, align 1, !tbaa !3
  %317 = zext i8 %316 to i32
  %318 = getelementptr inbounds i8, ptr %284, i64 2
  %319 = load i8, ptr %318, align 1, !tbaa !3
  %320 = zext i8 %319 to i32
  %321 = sub nsw i32 %317, %320
  %322 = getelementptr inbounds i8, ptr %283, i64 6
  %323 = load i8, ptr %322, align 1, !tbaa !3
  %324 = zext i8 %323 to i32
  %325 = getelementptr inbounds i8, ptr %284, i64 6
  %326 = load i8, ptr %325, align 1, !tbaa !3
  %327 = zext i8 %326 to i32
  %328 = sub nsw i32 %324, %327
  %329 = shl nsw i32 %328, 16
  %330 = add nsw i32 %329, %321
  %331 = getelementptr inbounds i8, ptr %283, i64 3
  %332 = load i8, ptr %331, align 1, !tbaa !3
  %333 = zext i8 %332 to i32
  %334 = getelementptr inbounds i8, ptr %284, i64 3
  %335 = load i8, ptr %334, align 1, !tbaa !3
  %336 = zext i8 %335 to i32
  %337 = sub nsw i32 %333, %336
  %338 = getelementptr inbounds i8, ptr %283, i64 7
  %339 = load i8, ptr %338, align 1, !tbaa !3
  %340 = zext i8 %339 to i32
  %341 = getelementptr inbounds i8, ptr %284, i64 7
  %342 = load i8, ptr %341, align 1, !tbaa !3
  %343 = zext i8 %342 to i32
  %344 = sub nsw i32 %340, %343
  %345 = shl nsw i32 %344, 16
  %346 = add nsw i32 %345, %337
  %347 = add nsw i32 %314, %298
  %348 = sub nsw i32 %298, %314
  %349 = add nsw i32 %346, %330
  %350 = sub nsw i32 %330, %346
  %351 = add nsw i32 %349, %347
  %352 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 %282, i64 0
  store i32 %351, ptr %352, align 16, !tbaa !6
  %353 = sub nsw i32 %347, %349
  %354 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 %282, i64 2
  store i32 %353, ptr %354, align 8, !tbaa !6
  %355 = add nsw i32 %350, %348
  %356 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 %282, i64 1
  store i32 %355, ptr %356, align 4, !tbaa !6
  %357 = sub nsw i32 %348, %350
  %358 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 %282, i64 3
  store i32 %357, ptr %358, align 4, !tbaa !6
  %359 = add nuw nsw i64 %282, 1
  %360 = getelementptr inbounds i8, ptr %283, i64 %6
  %361 = getelementptr inbounds i8, ptr %284, i64 %7
  %362 = icmp eq i64 %359, 4
  br i1 %362, label %363, label %281

; <label>:364:                                    ; preds = %281
  %364 = and i32 %276, 65535
  %365 = add nuw nsw i32 %364, %278
  br label %366

; <label>:367:                                    ; preds = %366, %363
  %367 = phi i64 [ %409, %366 ], [ 0, %363 ]
  %368 = phi i32 [ %408, %366 ], [ 0, %363 ]
  %369 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 0, i64 %367
  %370 = load i32, ptr %369, align 4, !tbaa !6
  %371 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 1, i64 %367
  %372 = load i32, ptr %371, align 4, !tbaa !6
  %373 = add i32 %372, %370
  %374 = sub i32 %370, %372
  %375 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 2, i64 %367
  %376 = load i32, ptr %375, align 4, !tbaa !6
  %377 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 3, i64 %367
  %378 = load i32, ptr %377, align 4, !tbaa !6
  %379 = add i32 %378, %376
  %380 = sub i32 %376, %378
  %381 = add nsw i32 %379, %373
  %382 = sub nsw i32 %373, %379
  %383 = add nsw i32 %380, %374
  %384 = sub nsw i32 %374, %380
  %385 = lshr i32 %381, 15
  %386 = and i32 %385, 65537
  %387 = mul nuw i32 %386, 65535
  %388 = add i32 %387, %381
  %389 = xor i32 %388, %387
  %390 = lshr i32 %383, 15
  %391 = and i32 %390, 65537
  %392 = mul nuw i32 %391, 65535
  %393 = add i32 %392, %383
  %394 = xor i32 %393, %392
  %395 = lshr i32 %382, 15
  %396 = and i32 %395, 65537
  %397 = mul nuw i32 %396, 65535
  %398 = add i32 %397, %382
  %399 = xor i32 %398, %397
  %400 = lshr i32 %384, 15
  %401 = and i32 %400, 65537
  %402 = mul nuw i32 %401, 65535
  %403 = add i32 %402, %384
  %404 = xor i32 %403, %402
  %405 = add i32 %399, %368
  %406 = add i32 %405, %404
  %407 = add i32 %389, %394
  %408 = add i32 %407, %406
  %409 = add nuw nsw i64 %367, 1
  %410 = icmp eq i64 %409, 4
  br i1 %410, label %411, label %366

; <label>:412:                                    ; preds = %366
  %412 = phi i32 [ %408, %366 ]
  %413 = lshr i32 %365, 1
  %414 = lshr i32 %412, 16
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %5) #2
  %415 = getelementptr inbounds i8, ptr %279, i64 %140
  %416 = getelementptr inbounds i8, ptr %280, i64 %143
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %5) #2
  br label %417

; <label>:418:                                    ; preds = %417, %411
  %418 = phi i64 [ 0, %411 ], [ %495, %417 ]
  %419 = phi ptr [ %415, %411 ], [ %496, %417 ]
  %420 = phi ptr [ %416, %411 ], [ %497, %417 ]
  %421 = load i8, ptr %419, align 1, !tbaa !3
  %422 = zext i8 %421 to i32
  %423 = load i8, ptr %420, align 1, !tbaa !3
  %424 = zext i8 %423 to i32
  %425 = sub nsw i32 %422, %424
  %426 = getelementptr inbounds i8, ptr %419, i64 4
  %427 = load i8, ptr %426, align 1, !tbaa !3
  %428 = zext i8 %427 to i32
  %429 = getelementptr inbounds i8, ptr %420, i64 4
  %430 = load i8, ptr %429, align 1, !tbaa !3
  %431 = zext i8 %430 to i32
  %432 = sub nsw i32 %428, %431
  %433 = shl nsw i32 %432, 16
  %434 = add nsw i32 %433, %425
  %435 = getelementptr inbounds i8, ptr %419, i64 1
  %436 = load i8, ptr %435, align 1, !tbaa !3
  %437 = zext i8 %436 to i32
  %438 = getelementptr inbounds i8, ptr %420, i64 1
  %439 = load i8, ptr %438, align 1, !tbaa !3
  %440 = zext i8 %439 to i32
  %441 = sub nsw i32 %437, %440
  %442 = getelementptr inbounds i8, ptr %419, i64 5
  %443 = load i8, ptr %442, align 1, !tbaa !3
  %444 = zext i8 %443 to i32
  %445 = getelementptr inbounds i8, ptr %420, i64 5
  %446 = load i8, ptr %445, align 1, !tbaa !3
  %447 = zext i8 %446 to i32
  %448 = sub nsw i32 %444, %447
  %449 = shl nsw i32 %448, 16
  %450 = add nsw i32 %449, %441
  %451 = getelementptr inbounds i8, ptr %419, i64 2
  %452 = load i8, ptr %451, align 1, !tbaa !3
  %453 = zext i8 %452 to i32
  %454 = getelementptr inbounds i8, ptr %420, i64 2
  %455 = load i8, ptr %454, align 1, !tbaa !3
  %456 = zext i8 %455 to i32
  %457 = sub nsw i32 %453, %456
  %458 = getelementptr inbounds i8, ptr %419, i64 6
  %459 = load i8, ptr %458, align 1, !tbaa !3
  %460 = zext i8 %459 to i32
  %461 = getelementptr inbounds i8, ptr %420, i64 6
  %462 = load i8, ptr %461, align 1, !tbaa !3
  %463 = zext i8 %462 to i32
  %464 = sub nsw i32 %460, %463
  %465 = shl nsw i32 %464, 16
  %466 = add nsw i32 %465, %457
  %467 = getelementptr inbounds i8, ptr %419, i64 3
  %468 = load i8, ptr %467, align 1, !tbaa !3
  %469 = zext i8 %468 to i32
  %470 = getelementptr inbounds i8, ptr %420, i64 3
  %471 = load i8, ptr %470, align 1, !tbaa !3
  %472 = zext i8 %471 to i32
  %473 = sub nsw i32 %469, %472
  %474 = getelementptr inbounds i8, ptr %419, i64 7
  %475 = load i8, ptr %474, align 1, !tbaa !3
  %476 = zext i8 %475 to i32
  %477 = getelementptr inbounds i8, ptr %420, i64 7
  %478 = load i8, ptr %477, align 1, !tbaa !3
  %479 = zext i8 %478 to i32
  %480 = sub nsw i32 %476, %479
  %481 = shl nsw i32 %480, 16
  %482 = add nsw i32 %481, %473
  %483 = add nsw i32 %450, %434
  %484 = sub nsw i32 %434, %450
  %485 = add nsw i32 %482, %466
  %486 = sub nsw i32 %466, %482
  %487 = add nsw i32 %485, %483
  %488 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 %418, i64 0
  store i32 %487, ptr %488, align 16, !tbaa !6
  %489 = sub nsw i32 %483, %485
  %490 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 %418, i64 2
  store i32 %489, ptr %490, align 8, !tbaa !6
  %491 = add nsw i32 %486, %484
  %492 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 %418, i64 1
  store i32 %491, ptr %492, align 4, !tbaa !6
  %493 = sub nsw i32 %484, %486
  %494 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 %418, i64 3
  store i32 %493, ptr %494, align 4, !tbaa !6
  %495 = add nuw nsw i64 %418, 1
  %496 = getelementptr inbounds i8, ptr %419, i64 %6
  %497 = getelementptr inbounds i8, ptr %420, i64 %7
  %498 = icmp eq i64 %495, 4
  br i1 %498, label %499, label %417

; <label>:500:                                    ; preds = %417
  %500 = and i32 %412, 65535
  %501 = add nuw nsw i32 %500, %414
  br label %502

; <label>:503:                                    ; preds = %502, %499
  %503 = phi i64 [ %545, %502 ], [ 0, %499 ]
  %504 = phi i32 [ %544, %502 ], [ 0, %499 ]
  %505 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 0, i64 %503
  %506 = load i32, ptr %505, align 4, !tbaa !6
  %507 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 1, i64 %503
  %508 = load i32, ptr %507, align 4, !tbaa !6
  %509 = add i32 %508, %506
  %510 = sub i32 %506, %508
  %511 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 2, i64 %503
  %512 = load i32, ptr %511, align 4, !tbaa !6
  %513 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 3, i64 %503
  %514 = load i32, ptr %513, align 4, !tbaa !6
  %515 = add i32 %514, %512
  %516 = sub i32 %512, %514
  %517 = add nsw i32 %515, %509
  %518 = sub nsw i32 %509, %515
  %519 = add nsw i32 %516, %510
  %520 = sub nsw i32 %510, %516
  %521 = lshr i32 %517, 15
  %522 = and i32 %521, 65537
  %523 = mul nuw i32 %522, 65535
  %524 = add i32 %523, %517
  %525 = xor i32 %524, %523
  %526 = lshr i32 %519, 15
  %527 = and i32 %526, 65537
  %528 = mul nuw i32 %527, 65535
  %529 = add i32 %528, %519
  %530 = xor i32 %529, %528
  %531 = lshr i32 %518, 15
  %532 = and i32 %531, 65537
  %533 = mul nuw i32 %532, 65535
  %534 = add i32 %533, %518
  %535 = xor i32 %534, %533
  %536 = lshr i32 %520, 15
  %537 = and i32 %536, 65537
  %538 = mul nuw i32 %537, 65535
  %539 = add i32 %538, %520
  %540 = xor i32 %539, %538
  %541 = add i32 %535, %504
  %542 = add i32 %541, %540
  %543 = add i32 %525, %530
  %544 = add i32 %543, %542
  %545 = add nuw nsw i64 %503, 1
  %546 = icmp eq i64 %545, 4
  br i1 %546, label %547, label %502

; <label>:548:                                    ; preds = %502
  %548 = phi i32 [ %544, %502 ]
  %549 = lshr i32 %501, 1
  %550 = lshr i32 %548, 16
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %5) #2
  %551 = shl nsw i32 %1, 3
  %552 = sext i32 %551 to i64
  %553 = getelementptr inbounds i8, ptr %0, i64 %552
  %554 = shl nsw i32 %3, 3
  %555 = sext i32 %554 to i64
  %556 = getelementptr inbounds i8, ptr %2, i64 %555
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %5) #2
  br label %557

; <label>:558:                                    ; preds = %557, %547
  %558 = phi i64 [ 0, %547 ], [ %635, %557 ]
  %559 = phi ptr [ %553, %547 ], [ %636, %557 ]
  %560 = phi ptr [ %556, %547 ], [ %637, %557 ]
  %561 = load i8, ptr %559, align 1, !tbaa !3
  %562 = zext i8 %561 to i32
  %563 = load i8, ptr %560, align 1, !tbaa !3
  %564 = zext i8 %563 to i32
  %565 = sub nsw i32 %562, %564
  %566 = getelementptr inbounds i8, ptr %559, i64 4
  %567 = load i8, ptr %566, align 1, !tbaa !3
  %568 = zext i8 %567 to i32
  %569 = getelementptr inbounds i8, ptr %560, i64 4
  %570 = load i8, ptr %569, align 1, !tbaa !3
  %571 = zext i8 %570 to i32
  %572 = sub nsw i32 %568, %571
  %573 = shl nsw i32 %572, 16
  %574 = add nsw i32 %573, %565
  %575 = getelementptr inbounds i8, ptr %559, i64 1
  %576 = load i8, ptr %575, align 1, !tbaa !3
  %577 = zext i8 %576 to i32
  %578 = getelementptr inbounds i8, ptr %560, i64 1
  %579 = load i8, ptr %578, align 1, !tbaa !3
  %580 = zext i8 %579 to i32
  %581 = sub nsw i32 %577, %580
  %582 = getelementptr inbounds i8, ptr %559, i64 5
  %583 = load i8, ptr %582, align 1, !tbaa !3
  %584 = zext i8 %583 to i32
  %585 = getelementptr inbounds i8, ptr %560, i64 5
  %586 = load i8, ptr %585, align 1, !tbaa !3
  %587 = zext i8 %586 to i32
  %588 = sub nsw i32 %584, %587
  %589 = shl nsw i32 %588, 16
  %590 = add nsw i32 %589, %581
  %591 = getelementptr inbounds i8, ptr %559, i64 2
  %592 = load i8, ptr %591, align 1, !tbaa !3
  %593 = zext i8 %592 to i32
  %594 = getelementptr inbounds i8, ptr %560, i64 2
  %595 = load i8, ptr %594, align 1, !tbaa !3
  %596 = zext i8 %595 to i32
  %597 = sub nsw i32 %593, %596
  %598 = getelementptr inbounds i8, ptr %559, i64 6
  %599 = load i8, ptr %598, align 1, !tbaa !3
  %600 = zext i8 %599 to i32
  %601 = getelementptr inbounds i8, ptr %560, i64 6
  %602 = load i8, ptr %601, align 1, !tbaa !3
  %603 = zext i8 %602 to i32
  %604 = sub nsw i32 %600, %603
  %605 = shl nsw i32 %604, 16
  %606 = add nsw i32 %605, %597
  %607 = getelementptr inbounds i8, ptr %559, i64 3
  %608 = load i8, ptr %607, align 1, !tbaa !3
  %609 = zext i8 %608 to i32
  %610 = getelementptr inbounds i8, ptr %560, i64 3
  %611 = load i8, ptr %610, align 1, !tbaa !3
  %612 = zext i8 %611 to i32
  %613 = sub nsw i32 %609, %612
  %614 = getelementptr inbounds i8, ptr %559, i64 7
  %615 = load i8, ptr %614, align 1, !tbaa !3
  %616 = zext i8 %615 to i32
  %617 = getelementptr inbounds i8, ptr %560, i64 7
  %618 = load i8, ptr %617, align 1, !tbaa !3
  %619 = zext i8 %618 to i32
  %620 = sub nsw i32 %616, %619
  %621 = shl nsw i32 %620, 16
  %622 = add nsw i32 %621, %613
  %623 = add nsw i32 %590, %574
  %624 = sub nsw i32 %574, %590
  %625 = add nsw i32 %622, %606
  %626 = sub nsw i32 %606, %622
  %627 = add nsw i32 %625, %623
  %628 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 %558, i64 0
  store i32 %627, ptr %628, align 16, !tbaa !6
  %629 = sub nsw i32 %623, %625
  %630 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 %558, i64 2
  store i32 %629, ptr %630, align 8, !tbaa !6
  %631 = add nsw i32 %626, %624
  %632 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 %558, i64 1
  store i32 %631, ptr %632, align 4, !tbaa !6
  %633 = sub nsw i32 %624, %626
  %634 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 %558, i64 3
  store i32 %633, ptr %634, align 4, !tbaa !6
  %635 = add nuw nsw i64 %558, 1
  %636 = getelementptr inbounds i8, ptr %559, i64 %6
  %637 = getelementptr inbounds i8, ptr %560, i64 %7
  %638 = icmp eq i64 %635, 4
  br i1 %638, label %639, label %557

; <label>:640:                                    ; preds = %557
  %640 = and i32 %548, 65535
  %641 = add nuw nsw i32 %640, %550
  br label %642

; <label>:643:                                    ; preds = %642, %639
  %643 = phi i64 [ %685, %642 ], [ 0, %639 ]
  %644 = phi i32 [ %684, %642 ], [ 0, %639 ]
  %645 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 0, i64 %643
  %646 = load i32, ptr %645, align 4, !tbaa !6
  %647 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 1, i64 %643
  %648 = load i32, ptr %647, align 4, !tbaa !6
  %649 = add i32 %648, %646
  %650 = sub i32 %646, %648
  %651 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 2, i64 %643
  %652 = load i32, ptr %651, align 4, !tbaa !6
  %653 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 3, i64 %643
  %654 = load i32, ptr %653, align 4, !tbaa !6
  %655 = add i32 %654, %652
  %656 = sub i32 %652, %654
  %657 = add nsw i32 %655, %649
  %658 = sub nsw i32 %649, %655
  %659 = add nsw i32 %656, %650
  %660 = sub nsw i32 %650, %656
  %661 = lshr i32 %657, 15
  %662 = and i32 %661, 65537
  %663 = mul nuw i32 %662, 65535
  %664 = add i32 %663, %657
  %665 = xor i32 %664, %663
  %666 = lshr i32 %659, 15
  %667 = and i32 %666, 65537
  %668 = mul nuw i32 %667, 65535
  %669 = add i32 %668, %659
  %670 = xor i32 %669, %668
  %671 = lshr i32 %658, 15
  %672 = and i32 %671, 65537
  %673 = mul nuw i32 %672, 65535
  %674 = add i32 %673, %658
  %675 = xor i32 %674, %673
  %676 = lshr i32 %660, 15
  %677 = and i32 %676, 65537
  %678 = mul nuw i32 %677, 65535
  %679 = add i32 %678, %660
  %680 = xor i32 %679, %678
  %681 = add i32 %675, %644
  %682 = add i32 %681, %680
  %683 = add i32 %665, %670
  %684 = add i32 %683, %682
  %685 = add nuw nsw i64 %643, 1
  %686 = icmp eq i64 %685, 4
  br i1 %686, label %687, label %642

; <label>:688:                                    ; preds = %642
  %688 = phi i32 [ %684, %642 ]
  %689 = lshr i32 %641, 1
  %690 = lshr i32 %688, 16
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %5) #2
  %691 = mul nsw i32 %1, 12
  %692 = sext i32 %691 to i64
  %693 = getelementptr inbounds i8, ptr %0, i64 %692
  %694 = mul nsw i32 %3, 12
  %695 = sext i32 %694 to i64
  %696 = getelementptr inbounds i8, ptr %2, i64 %695
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %5) #2
  br label %697

; <label>:698:                                    ; preds = %697, %687
  %698 = phi i64 [ 0, %687 ], [ %775, %697 ]
  %699 = phi ptr [ %693, %687 ], [ %776, %697 ]
  %700 = phi ptr [ %696, %687 ], [ %777, %697 ]
  %701 = load i8, ptr %699, align 1, !tbaa !3
  %702 = zext i8 %701 to i32
  %703 = load i8, ptr %700, align 1, !tbaa !3
  %704 = zext i8 %703 to i32
  %705 = sub nsw i32 %702, %704
  %706 = getelementptr inbounds i8, ptr %699, i64 4
  %707 = load i8, ptr %706, align 1, !tbaa !3
  %708 = zext i8 %707 to i32
  %709 = getelementptr inbounds i8, ptr %700, i64 4
  %710 = load i8, ptr %709, align 1, !tbaa !3
  %711 = zext i8 %710 to i32
  %712 = sub nsw i32 %708, %711
  %713 = shl nsw i32 %712, 16
  %714 = add nsw i32 %713, %705
  %715 = getelementptr inbounds i8, ptr %699, i64 1
  %716 = load i8, ptr %715, align 1, !tbaa !3
  %717 = zext i8 %716 to i32
  %718 = getelementptr inbounds i8, ptr %700, i64 1
  %719 = load i8, ptr %718, align 1, !tbaa !3
  %720 = zext i8 %719 to i32
  %721 = sub nsw i32 %717, %720
  %722 = getelementptr inbounds i8, ptr %699, i64 5
  %723 = load i8, ptr %722, align 1, !tbaa !3
  %724 = zext i8 %723 to i32
  %725 = getelementptr inbounds i8, ptr %700, i64 5
  %726 = load i8, ptr %725, align 1, !tbaa !3
  %727 = zext i8 %726 to i32
  %728 = sub nsw i32 %724, %727
  %729 = shl nsw i32 %728, 16
  %730 = add nsw i32 %729, %721
  %731 = getelementptr inbounds i8, ptr %699, i64 2
  %732 = load i8, ptr %731, align 1, !tbaa !3
  %733 = zext i8 %732 to i32
  %734 = getelementptr inbounds i8, ptr %700, i64 2
  %735 = load i8, ptr %734, align 1, !tbaa !3
  %736 = zext i8 %735 to i32
  %737 = sub nsw i32 %733, %736
  %738 = getelementptr inbounds i8, ptr %699, i64 6
  %739 = load i8, ptr %738, align 1, !tbaa !3
  %740 = zext i8 %739 to i32
  %741 = getelementptr inbounds i8, ptr %700, i64 6
  %742 = load i8, ptr %741, align 1, !tbaa !3
  %743 = zext i8 %742 to i32
  %744 = sub nsw i32 %740, %743
  %745 = shl nsw i32 %744, 16
  %746 = add nsw i32 %745, %737
  %747 = getelementptr inbounds i8, ptr %699, i64 3
  %748 = load i8, ptr %747, align 1, !tbaa !3
  %749 = zext i8 %748 to i32
  %750 = getelementptr inbounds i8, ptr %700, i64 3
  %751 = load i8, ptr %750, align 1, !tbaa !3
  %752 = zext i8 %751 to i32
  %753 = sub nsw i32 %749, %752
  %754 = getelementptr inbounds i8, ptr %699, i64 7
  %755 = load i8, ptr %754, align 1, !tbaa !3
  %756 = zext i8 %755 to i32
  %757 = getelementptr inbounds i8, ptr %700, i64 7
  %758 = load i8, ptr %757, align 1, !tbaa !3
  %759 = zext i8 %758 to i32
  %760 = sub nsw i32 %756, %759
  %761 = shl nsw i32 %760, 16
  %762 = add nsw i32 %761, %753
  %763 = add nsw i32 %730, %714
  %764 = sub nsw i32 %714, %730
  %765 = add nsw i32 %762, %746
  %766 = sub nsw i32 %746, %762
  %767 = add nsw i32 %765, %763
  %768 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 %698, i64 0
  store i32 %767, ptr %768, align 16, !tbaa !6
  %769 = sub nsw i32 %763, %765
  %770 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 %698, i64 2
  store i32 %769, ptr %770, align 8, !tbaa !6
  %771 = add nsw i32 %766, %764
  %772 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 %698, i64 1
  store i32 %771, ptr %772, align 4, !tbaa !6
  %773 = sub nsw i32 %764, %766
  %774 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 %698, i64 3
  store i32 %773, ptr %774, align 4, !tbaa !6
  %775 = add nuw nsw i64 %698, 1
  %776 = getelementptr inbounds i8, ptr %699, i64 %6
  %777 = getelementptr inbounds i8, ptr %700, i64 %7
  %778 = icmp eq i64 %775, 4
  br i1 %778, label %779, label %697

; <label>:780:                                    ; preds = %697
  %780 = and i32 %688, 65535
  %781 = add nuw nsw i32 %780, %690
  br label %782

; <label>:783:                                    ; preds = %782, %779
  %783 = phi i64 [ %825, %782 ], [ 0, %779 ]
  %784 = phi i32 [ %824, %782 ], [ 0, %779 ]
  %785 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 0, i64 %783
  %786 = load i32, ptr %785, align 4, !tbaa !6
  %787 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 1, i64 %783
  %788 = load i32, ptr %787, align 4, !tbaa !6
  %789 = add i32 %788, %786
  %790 = sub i32 %786, %788
  %791 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 2, i64 %783
  %792 = load i32, ptr %791, align 4, !tbaa !6
  %793 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 3, i64 %783
  %794 = load i32, ptr %793, align 4, !tbaa !6
  %795 = add i32 %794, %792
  %796 = sub i32 %792, %794
  %797 = add nsw i32 %795, %789
  %798 = sub nsw i32 %789, %795
  %799 = add nsw i32 %796, %790
  %800 = sub nsw i32 %790, %796
  %801 = lshr i32 %797, 15
  %802 = and i32 %801, 65537
  %803 = mul nuw i32 %802, 65535
  %804 = add i32 %803, %797
  %805 = xor i32 %804, %803
  %806 = lshr i32 %799, 15
  %807 = and i32 %806, 65537
  %808 = mul nuw i32 %807, 65535
  %809 = add i32 %808, %799
  %810 = xor i32 %809, %808
  %811 = lshr i32 %798, 15
  %812 = and i32 %811, 65537
  %813 = mul nuw i32 %812, 65535
  %814 = add i32 %813, %798
  %815 = xor i32 %814, %813
  %816 = lshr i32 %800, 15
  %817 = and i32 %816, 65537
  %818 = mul nuw i32 %817, 65535
  %819 = add i32 %818, %800
  %820 = xor i32 %819, %818
  %821 = add i32 %815, %784
  %822 = add i32 %821, %820
  %823 = add i32 %805, %810
  %824 = add i32 %823, %822
  %825 = add nuw nsw i64 %783, 1
  %826 = icmp eq i64 %825, 4
  br i1 %826, label %827, label %782

; <label>:828:                                    ; preds = %782
  %828 = phi i32 [ %824, %782 ]
  %829 = lshr i32 %781, 1
  %830 = lshr i32 %828, 16
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %5) #2
  %831 = getelementptr inbounds i8, ptr %279, i64 %552
  %832 = getelementptr inbounds i8, ptr %280, i64 %555
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %5) #2
  br label %833

; <label>:834:                                    ; preds = %833, %827
  %834 = phi i64 [ 0, %827 ], [ %911, %833 ]
  %835 = phi ptr [ %831, %827 ], [ %912, %833 ]
  %836 = phi ptr [ %832, %827 ], [ %913, %833 ]
  %837 = load i8, ptr %835, align 1, !tbaa !3
  %838 = zext i8 %837 to i32
  %839 = load i8, ptr %836, align 1, !tbaa !3
  %840 = zext i8 %839 to i32
  %841 = sub nsw i32 %838, %840
  %842 = getelementptr inbounds i8, ptr %835, i64 4
  %843 = load i8, ptr %842, align 1, !tbaa !3
  %844 = zext i8 %843 to i32
  %845 = getelementptr inbounds i8, ptr %836, i64 4
  %846 = load i8, ptr %845, align 1, !tbaa !3
  %847 = zext i8 %846 to i32
  %848 = sub nsw i32 %844, %847
  %849 = shl nsw i32 %848, 16
  %850 = add nsw i32 %849, %841
  %851 = getelementptr inbounds i8, ptr %835, i64 1
  %852 = load i8, ptr %851, align 1, !tbaa !3
  %853 = zext i8 %852 to i32
  %854 = getelementptr inbounds i8, ptr %836, i64 1
  %855 = load i8, ptr %854, align 1, !tbaa !3
  %856 = zext i8 %855 to i32
  %857 = sub nsw i32 %853, %856
  %858 = getelementptr inbounds i8, ptr %835, i64 5
  %859 = load i8, ptr %858, align 1, !tbaa !3
  %860 = zext i8 %859 to i32
  %861 = getelementptr inbounds i8, ptr %836, i64 5
  %862 = load i8, ptr %861, align 1, !tbaa !3
  %863 = zext i8 %862 to i32
  %864 = sub nsw i32 %860, %863
  %865 = shl nsw i32 %864, 16
  %866 = add nsw i32 %865, %857
  %867 = getelementptr inbounds i8, ptr %835, i64 2
  %868 = load i8, ptr %867, align 1, !tbaa !3
  %869 = zext i8 %868 to i32
  %870 = getelementptr inbounds i8, ptr %836, i64 2
  %871 = load i8, ptr %870, align 1, !tbaa !3
  %872 = zext i8 %871 to i32
  %873 = sub nsw i32 %869, %872
  %874 = getelementptr inbounds i8, ptr %835, i64 6
  %875 = load i8, ptr %874, align 1, !tbaa !3
  %876 = zext i8 %875 to i32
  %877 = getelementptr inbounds i8, ptr %836, i64 6
  %878 = load i8, ptr %877, align 1, !tbaa !3
  %879 = zext i8 %878 to i32
  %880 = sub nsw i32 %876, %879
  %881 = shl nsw i32 %880, 16
  %882 = add nsw i32 %881, %873
  %883 = getelementptr inbounds i8, ptr %835, i64 3
  %884 = load i8, ptr %883, align 1, !tbaa !3
  %885 = zext i8 %884 to i32
  %886 = getelementptr inbounds i8, ptr %836, i64 3
  %887 = load i8, ptr %886, align 1, !tbaa !3
  %888 = zext i8 %887 to i32
  %889 = sub nsw i32 %885, %888
  %890 = getelementptr inbounds i8, ptr %835, i64 7
  %891 = load i8, ptr %890, align 1, !tbaa !3
  %892 = zext i8 %891 to i32
  %893 = getelementptr inbounds i8, ptr %836, i64 7
  %894 = load i8, ptr %893, align 1, !tbaa !3
  %895 = zext i8 %894 to i32
  %896 = sub nsw i32 %892, %895
  %897 = shl nsw i32 %896, 16
  %898 = add nsw i32 %897, %889
  %899 = add nsw i32 %866, %850
  %900 = sub nsw i32 %850, %866
  %901 = add nsw i32 %898, %882
  %902 = sub nsw i32 %882, %898
  %903 = add nsw i32 %901, %899
  %904 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 %834, i64 0
  store i32 %903, ptr %904, align 16, !tbaa !6
  %905 = sub nsw i32 %899, %901
  %906 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 %834, i64 2
  store i32 %905, ptr %906, align 8, !tbaa !6
  %907 = add nsw i32 %902, %900
  %908 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 %834, i64 1
  store i32 %907, ptr %908, align 4, !tbaa !6
  %909 = sub nsw i32 %900, %902
  %910 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 %834, i64 3
  store i32 %909, ptr %910, align 4, !tbaa !6
  %911 = add nuw nsw i64 %834, 1
  %912 = getelementptr inbounds i8, ptr %835, i64 %6
  %913 = getelementptr inbounds i8, ptr %836, i64 %7
  %914 = icmp eq i64 %911, 4
  br i1 %914, label %915, label %833

; <label>:916:                                    ; preds = %833
  %916 = and i32 %828, 65535
  %917 = add nuw nsw i32 %916, %830
  br label %918

; <label>:919:                                    ; preds = %918, %915
  %919 = phi i64 [ %961, %918 ], [ 0, %915 ]
  %920 = phi i32 [ %960, %918 ], [ 0, %915 ]
  %921 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 0, i64 %919
  %922 = load i32, ptr %921, align 4, !tbaa !6
  %923 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 1, i64 %919
  %924 = load i32, ptr %923, align 4, !tbaa !6
  %925 = add i32 %924, %922
  %926 = sub i32 %922, %924
  %927 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 2, i64 %919
  %928 = load i32, ptr %927, align 4, !tbaa !6
  %929 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 3, i64 %919
  %930 = load i32, ptr %929, align 4, !tbaa !6
  %931 = add i32 %930, %928
  %932 = sub i32 %928, %930
  %933 = add nsw i32 %931, %925
  %934 = sub nsw i32 %925, %931
  %935 = add nsw i32 %932, %926
  %936 = sub nsw i32 %926, %932
  %937 = lshr i32 %933, 15
  %938 = and i32 %937, 65537
  %939 = mul nuw i32 %938, 65535
  %940 = add i32 %939, %933
  %941 = xor i32 %940, %939
  %942 = lshr i32 %935, 15
  %943 = and i32 %942, 65537
  %944 = mul nuw i32 %943, 65535
  %945 = add i32 %944, %935
  %946 = xor i32 %945, %944
  %947 = lshr i32 %934, 15
  %948 = and i32 %947, 65537
  %949 = mul nuw i32 %948, 65535
  %950 = add i32 %949, %934
  %951 = xor i32 %950, %949
  %952 = lshr i32 %936, 15
  %953 = and i32 %952, 65537
  %954 = mul nuw i32 %953, 65535
  %955 = add i32 %954, %936
  %956 = xor i32 %955, %954
  %957 = add i32 %951, %920
  %958 = add i32 %957, %956
  %959 = add i32 %941, %946
  %960 = add i32 %959, %958
  %961 = add nuw nsw i64 %919, 1
  %962 = icmp eq i64 %961, 4
  br i1 %962, label %963, label %918

; <label>:964:                                    ; preds = %918
  %964 = phi i32 [ %960, %918 ]
  %965 = lshr i32 %917, 1
  %966 = lshr i32 %964, 16
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %5) #2
  %967 = getelementptr inbounds i8, ptr %279, i64 %692
  %968 = getelementptr inbounds i8, ptr %280, i64 %695
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %5) #2
  br label %969

; <label>:970:                                    ; preds = %969, %963
  %970 = phi i64 [ 0, %963 ], [ %1047, %969 ]
  %971 = phi ptr [ %967, %963 ], [ %1048, %969 ]
  %972 = phi ptr [ %968, %963 ], [ %1049, %969 ]
  %973 = load i8, ptr %971, align 1, !tbaa !3
  %974 = zext i8 %973 to i32
  %975 = load i8, ptr %972, align 1, !tbaa !3
  %976 = zext i8 %975 to i32
  %977 = sub nsw i32 %974, %976
  %978 = getelementptr inbounds i8, ptr %971, i64 4
  %979 = load i8, ptr %978, align 1, !tbaa !3
  %980 = zext i8 %979 to i32
  %981 = getelementptr inbounds i8, ptr %972, i64 4
  %982 = load i8, ptr %981, align 1, !tbaa !3
  %983 = zext i8 %982 to i32
  %984 = sub nsw i32 %980, %983
  %985 = shl nsw i32 %984, 16
  %986 = add nsw i32 %985, %977
  %987 = getelementptr inbounds i8, ptr %971, i64 1
  %988 = load i8, ptr %987, align 1, !tbaa !3
  %989 = zext i8 %988 to i32
  %990 = getelementptr inbounds i8, ptr %972, i64 1
  %991 = load i8, ptr %990, align 1, !tbaa !3
  %992 = zext i8 %991 to i32
  %993 = sub nsw i32 %989, %992
  %994 = getelementptr inbounds i8, ptr %971, i64 5
  %995 = load i8, ptr %994, align 1, !tbaa !3
  %996 = zext i8 %995 to i32
  %997 = getelementptr inbounds i8, ptr %972, i64 5
  %998 = load i8, ptr %997, align 1, !tbaa !3
  %999 = zext i8 %998 to i32
  %1000 = sub nsw i32 %996, %999
  %1001 = shl nsw i32 %1000, 16
  %1002 = add nsw i32 %1001, %993
  %1003 = getelementptr inbounds i8, ptr %971, i64 2
  %1004 = load i8, ptr %1003, align 1, !tbaa !3
  %1005 = zext i8 %1004 to i32
  %1006 = getelementptr inbounds i8, ptr %972, i64 2
  %1007 = load i8, ptr %1006, align 1, !tbaa !3
  %1008 = zext i8 %1007 to i32
  %1009 = sub nsw i32 %1005, %1008
  %1010 = getelementptr inbounds i8, ptr %971, i64 6
  %1011 = load i8, ptr %1010, align 1, !tbaa !3
  %1012 = zext i8 %1011 to i32
  %1013 = getelementptr inbounds i8, ptr %972, i64 6
  %1014 = load i8, ptr %1013, align 1, !tbaa !3
  %1015 = zext i8 %1014 to i32
  %1016 = sub nsw i32 %1012, %1015
  %1017 = shl nsw i32 %1016, 16
  %1018 = add nsw i32 %1017, %1009
  %1019 = getelementptr inbounds i8, ptr %971, i64 3
  %1020 = load i8, ptr %1019, align 1, !tbaa !3
  %1021 = zext i8 %1020 to i32
  %1022 = getelementptr inbounds i8, ptr %972, i64 3
  %1023 = load i8, ptr %1022, align 1, !tbaa !3
  %1024 = zext i8 %1023 to i32
  %1025 = sub nsw i32 %1021, %1024
  %1026 = getelementptr inbounds i8, ptr %971, i64 7
  %1027 = load i8, ptr %1026, align 1, !tbaa !3
  %1028 = zext i8 %1027 to i32
  %1029 = getelementptr inbounds i8, ptr %972, i64 7
  %1030 = load i8, ptr %1029, align 1, !tbaa !3
  %1031 = zext i8 %1030 to i32
  %1032 = sub nsw i32 %1028, %1031
  %1033 = shl nsw i32 %1032, 16
  %1034 = add nsw i32 %1033, %1025
  %1035 = add nsw i32 %1002, %986
  %1036 = sub nsw i32 %986, %1002
  %1037 = add nsw i32 %1034, %1018
  %1038 = sub nsw i32 %1018, %1034
  %1039 = add nsw i32 %1037, %1035
  %1040 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 %970, i64 0
  store i32 %1039, ptr %1040, align 16, !tbaa !6
  %1041 = sub nsw i32 %1035, %1037
  %1042 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 %970, i64 2
  store i32 %1041, ptr %1042, align 8, !tbaa !6
  %1043 = add nsw i32 %1038, %1036
  %1044 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 %970, i64 1
  store i32 %1043, ptr %1044, align 4, !tbaa !6
  %1045 = sub nsw i32 %1036, %1038
  %1046 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 %970, i64 3
  store i32 %1045, ptr %1046, align 4, !tbaa !6
  %1047 = add nuw nsw i64 %970, 1
  %1048 = getelementptr inbounds i8, ptr %971, i64 %6
  %1049 = getelementptr inbounds i8, ptr %972, i64 %7
  %1050 = icmp eq i64 %1047, 4
  br i1 %1050, label %1051, label %969

; <label>:1052:                                   ; preds = %969
  %1052 = and i32 %964, 65535
  %1053 = add nuw nsw i32 %1052, %966
  br label %1054

; <label>:1055:                                   ; preds = %1054, %1051
  %1055 = phi i64 [ %1097, %1054 ], [ 0, %1051 ]
  %1056 = phi i32 [ %1096, %1054 ], [ 0, %1051 ]
  %1057 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 0, i64 %1055
  %1058 = load i32, ptr %1057, align 4, !tbaa !6
  %1059 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 1, i64 %1055
  %1060 = load i32, ptr %1059, align 4, !tbaa !6
  %1061 = add i32 %1060, %1058
  %1062 = sub i32 %1058, %1060
  %1063 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 2, i64 %1055
  %1064 = load i32, ptr %1063, align 4, !tbaa !6
  %1065 = getelementptr inbounds [4 x [4 x i32]], ptr %5, i64 0, i64 3, i64 %1055
  %1066 = load i32, ptr %1065, align 4, !tbaa !6
  %1067 = add i32 %1066, %1064
  %1068 = sub i32 %1064, %1066
  %1069 = add nsw i32 %1067, %1061
  %1070 = sub nsw i32 %1061, %1067
  %1071 = add nsw i32 %1068, %1062
  %1072 = sub nsw i32 %1062, %1068
  %1073 = lshr i32 %1069, 15
  %1074 = and i32 %1073, 65537
  %1075 = mul nuw i32 %1074, 65535
  %1076 = add i32 %1075, %1069
  %1077 = xor i32 %1076, %1075
  %1078 = lshr i32 %1071, 15
  %1079 = and i32 %1078, 65537
  %1080 = mul nuw i32 %1079, 65535
  %1081 = add i32 %1080, %1071
  %1082 = xor i32 %1081, %1080
  %1083 = lshr i32 %1070, 15
  %1084 = and i32 %1083, 65537
  %1085 = mul nuw i32 %1084, 65535
  %1086 = add i32 %1085, %1070
  %1087 = xor i32 %1086, %1085
  %1088 = lshr i32 %1072, 15
  %1089 = and i32 %1088, 65537
  %1090 = mul nuw i32 %1089, 65535
  %1091 = add i32 %1090, %1072
  %1092 = xor i32 %1091, %1090
  %1093 = add i32 %1087, %1056
  %1094 = add i32 %1093, %1092
  %1095 = add i32 %1077, %1082
  %1096 = add i32 %1095, %1094
  %1097 = add nuw nsw i64 %1055, 1
  %1098 = icmp eq i64 %1097, 4
  br i1 %1098, label %1099, label %1054

; <label>:1100:                                   ; preds = %1054
  %1100 = phi i32 [ %1096, %1054 ]
  %1101 = lshr i32 %1053, 1
  %1102 = and i32 %1100, 65535
  %1103 = lshr i32 %1100, 16
  %1104 = add nuw nsw i32 %1102, %1103
  %1105 = lshr i32 %1104, 1
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %5) #2
  %1106 = add nuw nsw i32 %413, %277
  %1107 = add nuw nsw i32 %1106, %549
  %1108 = add nuw nsw i32 %1107, %689
  %1109 = add nuw nsw i32 %1108, %829
  %1110 = add nuw i32 %1109, %965
  %1111 = add nuw nsw i32 %1101, %1105
  %1112 = add i32 %1111, %1110
  ret i32 %1112
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0(i64, ptr nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0(i64, ptr nocapture) #1

attributes #0 = { nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "pre_loopopt" "stack-protector-buffer-size"="8" "target-cpu"="core-avx2" "target-features"="+aes,+avx,+avx2,+bmi,+bmi2,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+rdrnd,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}
!llvm.module.flags = !{!1, !2}

!0 = !{!"clang version 8.0.0 (ssh://git-amr-2.devtools.intel.com:29418/dpd_icl-clang a53756907774b7d85a523756d285be3e3ac08d1c) (ssh://git-amr-2.devtools.intel.com:29418/dpd_icl-llvm 83f888c43ae98f3186f3cabcb84faa2f86917625)"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 1, !"ThinLTO", i32 0}
!3 = !{!4, !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!7, !9, i64 0}
!7 = !{!"array@_ZTSA4_A4_j", !8, i64 0}
!8 = !{!"array@_ZTSA4_j", !9, i64 0}
!9 = !{!"int", !4, i64 0}
