; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -vplan-vec-scenario="s1;v4;v2s1" \
; RUN: -disable-output -VPlanDriver -vplan-enable-new-cfg-merge \
; RUN: -disable-vplan-codegen -vplan-enable-masked-variant \
; RUN: -vplan-print-after-create-in-merge \
; RUN: -vplan-new-cfg-merge-list-only %s 2>&1 | FileCheck %s
; R;UN: -vplan-enable-peeling -vplan-print-after-merge-skeleton %s 2>&1 | FileCheck %s

target datalayout = "e-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024"
target triple = "x86_64-unknown-linux-gnu"

define void @test_store(i64* nocapture %ary, i32 %c) {
; CHECK-LABEL:  Single loop scenario:
; CHECK-NEXT:   MainLoop: unmasked, VF=4
; CHECK-NEXT:   PeelLoop: scalar
; CHECK-NEXT:   Remainders: scalar,unmasked, VF=2,
; CHECK-NEXT:  VPlan after creation during merge:
; CHECK-NEXT:  VPlan IR for: test_store:for.body.ScalarPeel
; CHECK-NEXT:    [[PEELBLK0:PeelBlk[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] token [[VP_ORIG_LOOP:%.*]] = scalar-peel for.body, LiveInMap:
; CHECK-NEXT:         {label [[FOR_END0:%.*]] in {  br i1 [[CMP0:%.*]], label [[FOR_BODY0:%.*]], label [[FOR_END0]], !llvm.loop !0} -> label [[BB0:BB[0-9]+]] }
; CHECK-NEXT:     [DA: Uni] i64 [[VP_ORIG_LIVEOUT:%.*]] = orig-live-out token [[VP_ORIG_LOOP]], liveout:   [[INDVARS_IV_NEXT0:%.*]] = add nuw nsw i64 [[INDVARS_IV0:%.*]], 1
; CHECK-NEXT:     [DA: Uni] br [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB0]]: # preds: [[PEELBLK0]]
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   no underlying for i64 [[VP_ORIG_LIVEOUT]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlan after adding existing one during merge:
; CHECK-NEXT:  VPlan IR for: test_store:for.body
; CHECK-NEXT:    [[BB1:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] br [[BB2:BB[0-9]+]] (SVAOpBits 0->F )
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]]
; CHECK-NEXT:     [DA: Div, SVA: (FV )] i64 [[VP_INDVARS_IV_IND_INIT:%.*]] = induction-init{add} i64 live-in0 i64 1 (SVAOpBits 0->F 1->F )
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] i64 [[VP_INDVARS_IV_IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1 (SVAOpBits 0->F )
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] i64 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i64 1024, UF = 1 (SVAOpBits 0->F )
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] br [[BB3:BB[0-9]+]] (SVAOpBits 0->F )
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: [[BB2]], [[BB3]]
; CHECK-NEXT:     [DA: Div, SVA: (FV )] i64 [[VP_INDVARS_IV:%.*]] = phi  [ i64 [[VP_INDVARS_IV_IND_INIT]], [[BB2]] ],  [ i64 [[VP_INDVARS_IV_NEXT:%.*]], [[BB3]] ] (SVAOpBits 0->FV 1->FV )
; CHECK-NEXT:     [DA: Div, SVA: (F  )] i64* [[VP_PTR:%.*]] = getelementptr inbounds i64* [[ARY0:%.*]] i64 [[VP_INDVARS_IV]] (SVAOpBits 0->F 1->F )
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] i64 [[VP_CC:%.*]] = sext i32 [[C0:%.*]] to i64 (SVAOpBits 0->F )
; CHECK-NEXT:     [DA: Div, SVA: ( V )] i64 [[VP_ADD:%.*]] = add i64 [[VP_CC]] i64 [[VP_INDVARS_IV]] (SVAOpBits 0->V 1->V )
; CHECK-NEXT:     [DA: Div, SVA: ( V )] store i64 [[VP_ADD]] i64* [[VP_PTR]] (SVAOpBits 0->V 1->F )
; CHECK-NEXT:     [DA: Div, SVA: (FV )] i64 [[VP_INDVARS_IV_NEXT]] = add i64 [[VP_INDVARS_IV]] i64 [[VP_INDVARS_IV_IND_INIT_STEP]] (SVAOpBits 0->FV 1->FV )
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] i1 [[VP_CMP:%.*]] = icmp ult i64 [[VP_INDVARS_IV_NEXT]] i64 [[VP_VECTOR_TRIP_COUNT]] (SVAOpBits 0->F 1->F )
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] br i1 [[VP_CMP]], [[BB3]], [[BB4:BB[0-9]+]] (SVAOpBits 0->F 1->F 2->F )
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: [[BB3]]
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] i64 [[VP_INDVARS_IV_IND_FINAL:%.*]] = induction-final{add} i64 live-in0 i64 1 (SVAOpBits 0->F 1->F )
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] br [[BB5:BB[0-9]+]] (SVAOpBits 0->F )
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]: # preds: [[BB4]]
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] br <External Block> (SVAOpBits )
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   no underlying for i64 [[VP_INDVARS_IV_IND_FINAL]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlan after creation during merge:
; CHECK-NEXT:  VPlan IR for: test_store:for.body.ScalarRemainder
; CHECK-NEXT:    [[REMBLK0:RemBlk[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] token [[VP_ORIG_LOOP_1:%.*]] = scalar-remainder for.body, LiveInMap:
; CHECK-NEXT:         {i64 0 in {  [[INDVARS_IV0]] = phi i64 [ 0, [[ENTRY0:%.*]] ], [ [[INDVARS_IV_NEXT0]], [[FOR_BODY0]] ]} -> i64 live-in0 }
; CHECK-NEXT:         {label [[FOR_END0]] in {  br i1 [[CMP0]], label [[FOR_BODY0]], label [[FOR_END0]], !llvm.loop !0} -> label [[BB6:BB[0-9]+]] }
; CHECK-NEXT:     [DA: Uni] i64 [[VP_ORIG_LIVEOUT_1:%.*]] = orig-live-out token [[VP_ORIG_LOOP_1]], liveout:   [[INDVARS_IV_NEXT0]] = add nuw nsw i64 [[INDVARS_IV0]], 1
; CHECK-NEXT:     [DA: Uni] br [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]]: # preds: [[REMBLK0]]
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   no underlying for i64 [[VP_ORIG_LIVEOUT_1]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlan after creation during merge:
; CHECK-NEXT:  VPlan IR for: test_store:for.body.cloned
; CHECK-NEXT:    Cloned.[[BB7:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] br Cloned.[[BB8:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    Cloned.[[BB8]]: # preds: Cloned.[[BB7]]
; CHECK-NEXT:     [DA: Div] i64 [[VP0:%.*]] = induction-init{add} i64 live-in0 i64 1
; CHECK-NEXT:     [DA: Uni] i64 [[VP1:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:     [DA: Uni] i64 [[VP2:%.*]] = vector-trip-count i64 1024, UF = 1
; CHECK-NEXT:     [DA: Uni] br Cloned.[[BB9:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    Cloned.[[BB9]]: # preds: Cloned.[[BB8]], Cloned.[[BB9]]
; CHECK-NEXT:     [DA: Div] i64 [[VP_INDVARS_IV_1:%.*]] = phi  [ i64 [[VP0]], Cloned.[[BB8]] ],  [ i64 [[VP_INDVARS_IV_NEXT_1:%.*]], Cloned.[[BB9]] ]
; CHECK-NEXT:     [DA: Div] i64* [[VP_PTR_1:%.*]] = getelementptr inbounds i64* [[ARY0]] i64 [[VP_INDVARS_IV_1]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP_CC_1:%.*]] = sext i32 [[C0]] to i64
; CHECK-NEXT:     [DA: Div] i64 [[VP_ADD_1:%.*]] = add i64 [[VP_CC_1]] i64 [[VP_INDVARS_IV_1]]
; CHECK-NEXT:     [DA: Div] store i64 [[VP_ADD_1]] i64* [[VP_PTR_1]]
; CHECK-NEXT:     [DA: Div] i64 [[VP_INDVARS_IV_NEXT_1]] = add i64 [[VP_INDVARS_IV_1]] i64 [[VP1]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP_CMP_1:%.*]] = icmp ult i64 [[VP_INDVARS_IV_NEXT_1]] i64 [[VP2]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP_CMP_1]], Cloned.[[BB9]], Cloned.[[BB10:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    Cloned.[[BB10]]: # preds: Cloned.[[BB9]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP3:%.*]] = induction-final{add} i64 live-in0 i64 1
; CHECK-NEXT:     [DA: Uni] br Cloned.[[BB11:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    Cloned.[[BB11]]: # preds: Cloned.[[BB10]]
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   no underlying for i64 [[VP3]]
; CHECK-EMPTY:
; CHECK-NEXT:  List of VPlans added for merging:
; CHECK-NEXT:  VPlan: test_store:for.body.ScalarRemainder
; CHECK-NEXT:    Kind: remainder VF:1
; CHECK-NEXT:  VPlan: test_store:for.body.cloned
; CHECK-NEXT:    Kind: remainder VF:2
; CHECK-NEXT:  VPlan: test_store:for.body
; CHECK-NEXT:    Kind: main VF:4
; CHECK-NEXT:  VPlan: test_store:for.body.ScalarPeel
; CHECK-NEXT:    Kind: peel VF:1
;
entry:
  %entry.region = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %for.body

for.body:
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %ptr = getelementptr inbounds i64, i64* %ary, i64 %indvars.iv
  %cc = sext i32 %c to i64
  %add = add i64 %cc, %indvars.iv
  store i64 %add, i64* %ptr, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %cmp = icmp ult i64 %indvars.iv.next, 1024
  br i1 %cmp, label %for.body, label %for.end

for.end:
  call void @llvm.directive.region.exit(token %entry.region) [ "DIR.OMP.END.SIMD"() ]
  ret void
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
