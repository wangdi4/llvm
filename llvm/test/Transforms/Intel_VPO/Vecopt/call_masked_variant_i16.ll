; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py UTC_ARGS: --version 2
; RUN: opt -mtriple=x86_64 -passes=vplan-vec -vplan-force-vf=32 -S < %s | FileCheck %s
; RUN: opt -mtriple=x86_64 -passes='hir-ssa-deconstruction,hir-vplan-vec,print<hir>' -vplan-force-vf=32 -disable-output < %s 2>&1 | FileCheck %s -check-prefix=HIR

; Test case to test mask argument lowering at a call site for avx512
; according to VecABI specification.
; Test checks that mask parameter is passed via i32 argument and since
; the argument provides effective 32 bits of mask, we do not need to
; generate final zext instruction as a part of instructions sequence
; which packs logical type (which is the characteristic type) into the
; variant argument. Since characteristic data type is i16 we can skip
; one bitcast instruction too.
; Test also checks that data type is not promoted to i32.

@ARRAY_SIZE = external dso_local  constant i32, align 4

declare token @llvm.directive.region.entry() #0
declare void @llvm.directive.region.exit(token) #0
declare i16 @vfunc(i16 noundef) #1

define void @test(ptr nocapture noundef readonly %src, ptr nocapture noundef writeonly %dst) #2 {
; CHECK:  define void @test(ptr nocapture noundef readonly [[SRC0:%.*]], ptr nocapture noundef writeonly [[DST0:%.*]]) #2 {
; CHECK:       vector.body:
; CHECK-NEXT:    [[UNI_PHI0:%.*]] = phi i64 [ 0, [[VPLANNEDBB20:%.*]] ], [ [[TMP6:%.*]], [[VECTOR_BODY0:%.*]] ]
; CHECK-NEXT:    [[VEC_PHI0:%.*]] = phi <32 x i64> [ <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15, i64 16, i64 17, i64 18, i64 19, i64 20, i64 21, i64 22, i64 23, i64 24, i64 25, i64 26, i64 27, i64 28, i64 29, i64 30, i64 31>, [[VPLANNEDBB20]] ], [ [[TMP5:%.*]], [[VECTOR_BODY0]] ]
; CHECK-NEXT:    [[SCALAR_GEP0:%.*]] = getelementptr inbounds i16, ptr [[SRC0]], i64 [[UNI_PHI0]]
; CHECK-NEXT:    [[WIDE_LOAD0:%.*]] = load <32 x i16>, ptr [[SCALAR_GEP0]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = call x86_regcallcc <32 x i16> @_ZGVZM32v_vfunc(<32 x i16> noundef [[WIDE_LOAD0]], i32 bitcast (<32 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true> to i32)) #0
;
; HIR-LABEL:  Function: test
; HIR:             + DO i1 = 0, [[LOOP_UB0:%.*]], 32   <DO_LOOP>  <MAX_TC_EST = 67108863>  <LEGAL_MAX_TC = 67108863> <simd-vectorized> <nounroll> <novectorize>
; HIR-NEXT:        |   [[DOTVEC140:%.*]] = undef
; HIR-NEXT:        |   [[DOTVEC40:%.*]] = (<32 x i16>*)([[SRC0:%.*]])[i1]
; HIR-NEXT:        |   [[SEXT0:%.*]] = sext.<32 x i1>.<32 x i16>(1)
; HIR-NEXT:        |   [[TRUNC0:%.*]] = trunc.<32 x i16>.<32 x i1>([[SEXT0]])
; HIR-NEXT:        |   [[TMP1:%.*]] = bitcast.<32 x i1>.i32([[TRUNC0]])
; HIR-NEXT:        |   [[_ZGVZM32V_VFUNC0:%.*]] = @_ZGVZM32v_vfunc([[DOTVEC40]],  [[TMP1]])
; HIR-NEXT:        |   (<32 x i16>*)([[DST0:%.*]])[i1] = [[_ZGVZM32V_VFUNC0]]
; HIR-NEXT:        + END LOOP
;
entry:
  %i.linear.iv = alloca i32, align 4
  %0 = load i32, ptr @ARRAY_SIZE, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %DIR.OMP.SIMD.1, label %omp.precond.end

DIR.OMP.SIMD.1:                                   ; preds = %entry
  %1 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.NORMALIZED.IV:TYPED"(ptr null, i32 0), "QUAL.OMP.NORMALIZED.UB:TYPED"(ptr null, i32 0), "QUAL.OMP.LINEAR:IV.TYPED"(ptr %i.linear.iv, i32 0, i32 1, i32 1) ]
  br label %DIR.OMP.SIMD.117

DIR.OMP.SIMD.117:                                 ; preds = %DIR.OMP.SIMD.1
  %wide.trip.count = zext i32 %0 to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.inner.for.body, %DIR.OMP.SIMD.117
  %indvars.iv = phi i64 [ 0, %DIR.OMP.SIMD.117 ], [ %indvars.iv.next, %omp.inner.for.body ]
  %arrayidx = getelementptr inbounds i16, ptr %src, i64 %indvars.iv
  %2 = load i16, ptr %arrayidx, align 8
  %callret = call i16 @vfunc(i16 noundef %2) #0
  %arrayidx6 = getelementptr inbounds i16, ptr %dst, i64 %indvars.iv
  store i16 %callret, ptr %arrayidx6, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %omp.inner.for.cond.DIR.OMP.END.SIMD.3.loopexit_crit_edge, label %omp.inner.for.body

omp.inner.for.cond.DIR.OMP.END.SIMD.3.loopexit_crit_edge: ; preds = %omp.inner.for.body
  call void @llvm.directive.region.exit(token %1) [ "DIR.OMP.END.SIMD"() ]
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %omp.inner.for.cond.DIR.OMP.END.SIMD.3.loopexit_crit_edge, %entry
  ret void
}

attributes #0 = { nounwind }
attributes #1 = { "vector-variants"="_ZGVZM32v_vfunc" }
attributes #2 = { "target-cpu"="skylake-avx512" }
