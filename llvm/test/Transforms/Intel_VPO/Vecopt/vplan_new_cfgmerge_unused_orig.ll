; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; This test checks that the operands of the 'select' instructions are correctly widened.

;RUN: opt -vplan-vec -vplan-force-vf=2 -S -print-after=vplan-vec -vplan-vec-scenario="n0;v2;m2" %s | FileCheck %s
;RUN: opt -passes="vplan-vec" -vplan-force-vf=2 -S -print-after=vplan-vec -vplan-vec-scenario="n0;v2;m2" %s | FileCheck %s

; Check that peel count and checks are generated correctly for i32 loop induction variable.

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind uwtable
define dso_local float @getElement(i32 %idx) {
; CHECK-LABEL: @getElement(
; CHECK-NEXT:  omp.inner.for.body.lr.ph:
; CHECK-NEXT:    br label [[DIR_OMP_SIMD_1:%.*]]
; CHECK:       DIR.OMP.SIMD.1:
; CHECK-NEXT:    br label [[DIR_OMP_SIMD_2:%.*]]
; CHECK:       DIR.OMP.SIMD.2:
; CHECK-NEXT:    [[REM:%.*]] = and i32 [[IDX:%.*]], 3
; CHECK-NEXT:    [[REM_F:%.*]] = sitofp i32 [[REM]] to float
; CHECK-NEXT:    br label [[VPLANNEDBB:%.*]]
; CHECK:       VPlannedBB:
; CHECK-NEXT:    br i1 false, label [[MERGE_BLK15:%.*]], label [[VPLANNEDBB1:%.*]]
; CHECK:       VPlannedBB1:
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <2 x float> poison, float [[REM_F]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <2 x float> [[BROADCAST_SPLATINSERT]], <2 x float> poison, <2 x i32> zeroinitializer
; CHECK-NEXT:    br label [[VPLANNEDBB2:%.*]]
; CHECK:       VPlannedBB2:
; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK:       vector.body:
; CHECK-NEXT:    [[UNI_PHI:%.*]] = phi i32 [ 0, [[VPLANNEDBB2]] ], [ [[TMP2:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[VEC_PHI:%.*]] = phi <2 x i32> [ <i32 0, i32 1>, [[VPLANNEDBB2]] ], [ [[TMP1:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[VEC_PHI4:%.*]] = phi <2 x float> [ <float -0.000000e+00, float -0.000000e+00>, [[VPLANNEDBB2]] ], [ [[TMP0:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[TMP0]] = fadd <2 x float> [[VEC_PHI4]], [[BROADCAST_SPLAT]]
; CHECK-NEXT:    [[TMP1]] = add nuw nsw <2 x i32> [[VEC_PHI]], <i32 2, i32 2>
; CHECK-NEXT:    [[TMP2]] = add nuw nsw i32 [[UNI_PHI]], 2
; CHECK-NEXT:    [[TMP3:%.*]] = icmp uge i32 [[TMP2]], 4096
; CHECK-NEXT:    br i1 [[TMP3]], label [[VPLANNEDBB5:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK:       VPlannedBB5:
; CHECK-NEXT:    [[TMP4:%.*]] = call float @llvm.vector.reduce.fadd.v2f32(float 0.000000e+00, <2 x float> [[TMP0]])
; CHECK-NEXT:    br label [[VPLANNEDBB6:%.*]]
; CHECK:       VPlannedBB6:
; CHECK-NEXT:    br label [[VPLANNEDBB7:%.*]]
; CHECK:       VPlannedBB7:
; CHECK-NEXT:    br i1 true, label [[FINAL_MERGE:%.*]], label [[MERGE_BLK15]]
; CHECK:       merge.blk15:
; CHECK-NEXT:    [[UNI_PHI8:%.*]] = phi float [ [[TMP4]], [[VPLANNEDBB7]] ], [ 0.000000e+00, [[VPLANNEDBB]] ]
; CHECK-NEXT:    [[UNI_PHI9:%.*]] = phi i32 [ 4096, [[VPLANNEDBB7]] ], [ 0, [[VPLANNEDBB]] ]
; CHECK-NEXT:    br label [[VPLANNEDBB10:%.*]]
; CHECK:       VPlannedBB10:
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT17:%.*]] = insertelement <2 x float> poison, float [[REM_F]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT18:%.*]] = shufflevector <2 x float> [[BROADCAST_SPLATINSERT17]], <2 x float> poison, <2 x i32> zeroinitializer
; CHECK-NEXT:    br label [[VPLANNEDBB11:%.*]]
; CHECK:       VPlannedBB11:
; CHECK-NEXT:    [[UNI_PHI9IND_START_BCAST_SPLATINSERT:%.*]] = insertelement <2 x i32> poison, i32 [[UNI_PHI9]], i32 0
; CHECK-NEXT:    [[UNI_PHI9IND_START_BCAST_SPLAT:%.*]] = shufflevector <2 x i32> [[UNI_PHI9IND_START_BCAST_SPLATINSERT]], <2 x i32> poison, <2 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP5:%.*]] = add <2 x i32> [[UNI_PHI9IND_START_BCAST_SPLAT]], <i32 0, i32 1>
; CHECK-NEXT:    br label [[VPLANNEDBB12:%.*]]
; CHECK:       VPlannedBB12:
; CHECK-NEXT:    [[UNI_PHI13:%.*]] = phi i32 [ [[UNI_PHI9]], [[VPLANNEDBB11]] ], [ [[TMP9:%.*]], [[NEW_LATCH:%.*]] ]
; CHECK-NEXT:    [[VEC_PHI14:%.*]] = phi <2 x i32> [ [[TMP5]], [[VPLANNEDBB11]] ], [ [[TMP8:%.*]], [[NEW_LATCH]] ]
; CHECK-NEXT:    [[VEC_PHI15:%.*]] = phi <2 x float> [ <float -0.000000e+00, float -0.000000e+00>, [[VPLANNEDBB11]] ], [ [[PREDBLEND:%.*]], [[NEW_LATCH]] ]
; CHECK-NEXT:    [[TMP6:%.*]] = icmp ult <2 x i32> [[VEC_PHI14]], <i32 4096, i32 4096>
; CHECK-NEXT:    br label [[VPLANNEDBB16:%.*]]
; CHECK:       VPlannedBB16:
; CHECK-NEXT:    [[TMP7:%.*]] = fadd <2 x float> [[VEC_PHI15]], [[BROADCAST_SPLAT18]]
; CHECK-NEXT:    br label [[NEW_LATCH]]
; CHECK:       new_latch:
; CHECK-NEXT:    [[PREDBLEND]] = select <2 x i1> [[TMP6]], <2 x float> [[TMP7]], <2 x float> [[VEC_PHI15]]
; CHECK-NEXT:    [[TMP8]] = add nuw nsw <2 x i32> [[VEC_PHI14]], <i32 2, i32 2>
; CHECK-NEXT:    [[TMP9]] = add nuw nsw i32 [[UNI_PHI13]], 2
; CHECK-NEXT:    [[TMP10:%.*]] = icmp ult <2 x i32> [[TMP8]], <i32 4096, i32 4096>
; CHECK-NEXT:    [[TMP11:%.*]] = bitcast <2 x i1> [[TMP10]] to i2
; CHECK-NEXT:    [[TMP12:%.*]] = icmp eq i2 [[TMP11]], 0
; CHECK-NEXT:    br i1 [[TMP12]], label [[VPLANNEDBB19:%.*]], label [[VPLANNEDBB12]]
; CHECK:       VPlannedBB19:
; CHECK-NEXT:    [[TMP13:%.*]] = call float @llvm.vector.reduce.fadd.v2f32(float [[UNI_PHI8]], <2 x float> [[PREDBLEND]])
; CHECK-NEXT:    br label [[VPLANNEDBB20:%.*]]
; CHECK:       VPlannedBB20:
; CHECK-NEXT:    br label [[FINAL_MERGE]]
; CHECK:       final.merge:
; CHECK-NEXT:    [[UNI_PHI21:%.*]] = phi float [ [[TMP13]], [[VPLANNEDBB20]] ], [ [[TMP4]], [[VPLANNEDBB7]] ]
; CHECK-NEXT:    [[UNI_PHI22:%.*]] = phi i32 [ 4096, [[VPLANNEDBB20]] ], [ 4096, [[VPLANNEDBB7]] ]
; CHECK-NEXT:    br label [[DIR_OMP_END_SIMD_4:%.*]]
; CHECK:       omp.inner.for.body:
; CHECK-NEXT:    [[DOTOMP_IV_LOCAL_0:%.*]] = phi i32 [ [[ADD3:%.*]], [[OMP_INNER_FOR_BODY:%.*]] ]
; CHECK-NEXT:    [[RETVAL_015:%.*]] = phi float [ [[ADD2:%.*]], [[OMP_INNER_FOR_BODY]] ]
; CHECK-NEXT:    [[ADD2]] = fadd float [[RETVAL_015]], [[REM_F]]
; CHECK-NEXT:    [[ADD3]] = add nuw nsw i32 [[DOTOMP_IV_LOCAL_0]], 1
; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp eq i32 [[ADD3]], 4096
; CHECK-NEXT:    br label [[OMP_INNER_FOR_BODY]]
; CHECK:       DIR.OMP.END.SIMD.4:
; CHECK-NEXT:    [[ADD2_LCSSA:%.*]] = phi float [ [[UNI_PHI21]], [[FINAL_MERGE]] ]
; CHECK-NEXT:    br label [[DIR_OMP_END_SIMD_3:%.*]]
; CHECK:       DIR.OMP.END.SIMD.3:
; CHECK-NEXT:    br label [[DIR_OMP_END_SIMD_419:%.*]]
; CHECK:       DIR.OMP.END.SIMD.419:
; CHECK-NEXT:    ret float [[ADD2_LCSSA]]
;
omp.inner.for.body.lr.ph:
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %omp.inner.for.body.lr.ph
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.NORMALIZED.IV"(i8* null), "QUAL.OMP.NORMALIZED.UB"(i8* null) ]
  br label %DIR.OMP.SIMD.2

DIR.OMP.SIMD.2:                                   ; preds = %DIR.OMP.SIMD.1
  %rem = and i32 %idx, 3
  %rem.f = sitofp i32 %rem to float
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.inner.for.body, %DIR.OMP.SIMD.2
  %.omp.iv.local.0 = phi i32 [ 0, %DIR.OMP.SIMD.2 ], [ %add3, %omp.inner.for.body ]
  %retVal.015 = phi float [ 0.000000e+00, %DIR.OMP.SIMD.2 ], [ %add2, %omp.inner.for.body ]
  %add2 = fadd float %retVal.015, %rem.f
  %add3 = add nuw nsw i32 %.omp.iv.local.0, 1
  %exitcond = icmp eq i32 %add3, 4096
  br i1 %exitcond, label %DIR.OMP.END.SIMD.4, label %omp.inner.for.body

DIR.OMP.END.SIMD.4:                               ; preds = %omp.inner.for.body
  %add2.lcssa = phi float [ %add2, %omp.inner.for.body ]
  br label %DIR.OMP.END.SIMD.3

DIR.OMP.END.SIMD.3:                               ; preds = %DIR.OMP.END.SIMD.4
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.OMP.END.SIMD.419

DIR.OMP.END.SIMD.419:                             ; preds = %DIR.OMP.END.SIMD.3
  ret float %add2.lcssa
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry()

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token %0)
