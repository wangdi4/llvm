; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; Test to verify the correctness of PHI node placement and fixing algorithm
; using IDF. For this test case, HIR decomposer does not initially place a
; missing PHI node due to lack of use. The issue is addressed when IDF based
; PHI node placement algorithm is executed.

; RUN: opt -hir-ssa-deconstruction -hir-vec-dir-insert -hir-temp-cleanup -hir-last-value-computation -VPlanDriverHIR -vplan-print-after-plain-cfg -disable-output -vplan-force-build < %s 2>&1 | FileCheck %s
; RUN: opt -passes="hir-ssa-deconstruction,hir-temp-cleanup,hir-last-value-computation,hir-vec-dir-insert,vplan-driver-hir" -vplan-print-after-plain-cfg -disable-output -vplan-force-build < %s 2>&1 | FileCheck %s

; Input HIR
; <50>    + DO i1 = 0, %n + -1, 1   <DO_LOOP>
; <9>     |   %.omp.iv.0.out = i1;
; <10>    |   %inc.lcssa25 = 0;
; <51>    |
; <15>    |      %conv = sitofp.i64.float(i1);
; <51>    |   + DO i2 = 0, %m + -1, 1   <DO_LOOP>  <MAX_TC_EST = 101>
; <21>    |   |   (%a)[i1][i2] = %conv;
; <24>    |   |   (%ub)[i2] = 3 * i2 + %ret.021;
; <51>    |   + END LOOP
; <25>    |      %add10 = 2 * %m + %ret.021 + -2  +  2;
; <34>    |      %ret.021 = %add10;
; <35>    |      %inc.lcssa25 = %m;
; <50>    + END LOOP

; For the above HIR, decomposer initially would place PHI nodes for the variable
; %ret.021 only in inner loop body and outer loop exit VPBBs. However a PHI node
; is needed in the outer loop header since %ret.021 is updated in every
; iteration of outerloop. These kind of scenarios are handled by the IDF based
; PHI node placement algorithm that is executed during fixPhiNode. IDF correctly
; inserts a PHI node for %ret.021 in the outer loop header (BB2).

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@A = dso_local local_unnamed_addr global [101 x [101 x float]] zeroinitializer, align 16
@B = dso_local local_unnamed_addr global [101 x [101 x float]] zeroinitializer, align 16
@ub = dso_local local_unnamed_addr global [101 x i64] zeroinitializer, align 16

; Function Attrs: nounwind uwtable
define dso_local i64 @_Z3foollPlPA101_fb(i64 %n, i64 %m, i64* nocapture %ub, [101 x float]* nocapture %a, i1 zeroext %vec) local_unnamed_addr {
; Check the plain CFG structure and correctness of incoming values of PHI nodes
; CHECK-LABEL:  VPlan after importing plain CFG:
; CHECK-NEXT:  External Defs Start:
; CHECK-DAG:     [[VP0:%.*]] = {%ret.021}
; CHECK-DAG:     [[VP1:%.*]] = {%m + -1}
; CHECK-DAG:     [[VP2:%.*]] = {%a}
; CHECK-DAG:     [[VP3:%.*]] = {%n + -1}
; CHECK-DAG:     [[VP4:%.*]] = {%ub}
; CHECK-DAG:     [[VP5:%.*]] = {%m}
; CHECK-NEXT:  External Defs End:
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], [[BB3:BB[0-9]+]]
; CHECK-NEXT:     i64 [[VP6:%.*]] = phi  [ i64 [[RET_0210:%.*]], [[BB1]] ],  [ i64 [[VP7:%.*]], [[BB3]] ]
; CHECK-NEXT:     i64 [[VP8:%.*]] = phi  [ i64 0, [[BB1]] ],  [ i64 [[VP9:%.*]], [[BB3]] ]
; CHECK-NEXT:     i64 [[VP10:%.*]] = hir-copy i64 [[VP8]] , OriginPhiId: -1
; CHECK-NEXT:     i64 [[VP11:%.*]] = hir-copy i64 0 , OriginPhiId: -1
; CHECK-NEXT:     br [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: [[BB2]]
; CHECK-NEXT:     float [[VP12:%.*]] = sitofp i64 [[VP8]] to float
; CHECK-NEXT:     br [[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]: # preds: [[BB4]], [[BB5]]
; CHECK-NEXT:     i64 [[VP13:%.*]] = phi  [ i64 [[VP6]], [[BB4]] ],  [ i64 [[VP13]], [[BB5]] ]
; CHECK-NEXT:     i64 [[VP14:%.*]] = phi  [ i64 0, [[BB4]] ],  [ i64 [[VP15:%.*]], [[BB5]] ]
; CHECK-NEXT:     float* [[VP_SUBSCRIPT:%.*]] = subscript inbounds [101 x float]* [[A0:%.*]] i64 [[VP8]] i64 [[VP14]]
; CHECK-NEXT:     store float [[VP12]] float* [[VP_SUBSCRIPT]]
; CHECK-NEXT:     i64 [[VP16:%.*]] = mul i64 3 i64 [[VP14]]
; CHECK-NEXT:     i64 [[VP17:%.*]] = add i64 [[VP13]] i64 [[VP16]]
; CHECK-NEXT:     i64* [[VP_SUBSCRIPT_1:%.*]] = subscript inbounds i64* [[UB0:%.*]] i64 [[VP14]]
; CHECK-NEXT:     store i64 [[VP17]] i64* [[VP_SUBSCRIPT_1]]
; CHECK-NEXT:     i64 [[VP15]] = add i64 [[VP14]] i64 1
; CHECK-NEXT:     i1 [[VP18:%.*]] = icmp sle i64 [[VP15]] i64 [[VP1]]
; CHECK-NEXT:     br i1 [[VP18]], [[BB5]], [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: [[BB5]]
; CHECK-NEXT:     i64 [[VP19:%.*]] = mul i64 [[M0:%.*]] i64 2
; CHECK-NEXT:     i64 [[VP20:%.*]] = add i64 [[VP19]] i64 [[VP13]]
; CHECK-NEXT:     i64 [[VP21:%.*]] = add i64 [[VP20]] i64 -2
; CHECK-NEXT:     i64 [[VP22:%.*]] = add i64 [[VP21]] i64 2
; CHECK-NEXT:     i64 [[VP7]] = hir-copy i64 [[VP22]] , OriginPhiId: -1
; CHECK-NEXT:     i64 [[VP23:%.*]] = hir-copy i64 [[M0]] , OriginPhiId: -1
; CHECK-NEXT:     i64 [[VP9]] = add i64 [[VP8]] i64 1
; CHECK-NEXT:     i1 [[VP24:%.*]] = icmp sle i64 [[VP9]] i64 [[VP3]]
; CHECK-NEXT:     br i1 [[VP24]], [[BB2]], [[BB6:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]]: # preds: [[BB3]]
; CHECK-NEXT:     br [[BB7:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB7]]: # preds: [[BB6]]
; CHECK-NEXT:     br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   i64 [[VP10]] -> [[VP25:%.*]] = {%.omp.iv.0.out}
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 1   i64 [[VP23]] -> [[VP26:%.*]] = {%inc.lcssa25}
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 2   i64 [[VP7]] -> [[VP27:%.*]] = {%ret.021}
;
entry:
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #2
  %1 = bitcast i64* %j to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #2
  %cmp = icmp sgt i64 %n, 0
  br i1 %cmp, label %DIR.OMP.SIMD.118, label %omp.precond.end

DIR.OMP.SIMD.118:                                 ; preds = %entry
  %2 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.SIMDLEN"(i32 4), "QUAL.OMP.LINEAR"(i64* %i, i32 1), "QUAL.OMP.LINEAR"(i64* %j, i32 1), "QUAL.OMP.NORMALIZED.IV"(i8* null), "QUAL.OMP.NORMALIZED.UB"(i8* null) ]
  %cmp622 = icmp sgt i64 %m, 0
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.inner.for.inc, %DIR.OMP.SIMD.118
  %.omp.iv.0 = phi i64 [ %add11, %omp.inner.for.inc ], [ 0, %DIR.OMP.SIMD.118 ]
  %ret.021 = phi i64 [ %ret.1.lcssa, %omp.inner.for.inc ], [ 0, %DIR.OMP.SIMD.118 ]
  br i1 %cmp622, label %for.body.lr.ph, label %omp.inner.for.inc

for.body.lr.ph:                                   ; preds = %omp.inner.for.body
  %conv = sitofp i64 %.omp.iv.0 to float
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %ret.124 = phi i64 [ %ret.021, %for.body.lr.ph ], [ %add10, %for.body ]
  %storemerge23 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %arrayidx7 = getelementptr inbounds [101 x float], [101 x float]* %a, i64 %.omp.iv.0, i64 %storemerge23
  store float %conv, float* %arrayidx7, align 4, !tbaa !2
  %add8 = add nsw i64 %ret.124, %storemerge23
  %arrayidx9 = getelementptr inbounds i64, i64* %ub, i64 %storemerge23
  store i64 %add8, i64* %arrayidx9, align 8, !tbaa !7
  %add10 = add nsw i64 %ret.124, 2
  %inc = add nuw nsw i64 %storemerge23, 1
  %exitcond = icmp eq i64 %inc, %m
  br i1 %exitcond, label %omp.inner.for.inc.loopexit, label %for.body

omp.inner.for.inc.loopexit:                       ; preds = %for.body
  %add10.lcssa = phi i64 [ %add10, %for.body ]
  br label %omp.inner.for.inc

omp.inner.for.inc:                                ; preds = %omp.inner.for.inc.loopexit, %omp.inner.for.body
  %inc.lcssa25 = phi i64 [ 0, %omp.inner.for.body ], [ %m, %omp.inner.for.inc.loopexit ]
  %ret.1.lcssa = phi i64 [ %ret.021, %omp.inner.for.body ], [ %add10.lcssa, %omp.inner.for.inc.loopexit ]
  %add11 = add nuw nsw i64 %.omp.iv.0, 1
  %exitcond26 = icmp eq i64 %add11, %n
  br i1 %exitcond26, label %omp.loop.exit, label %omp.inner.for.body

omp.loop.exit:                                    ; preds = %omp.inner.for.inc
  %inc.lcssa25.lcssa = phi i64 [ %inc.lcssa25, %omp.inner.for.inc ]
  %ret.1.lcssa.lcssa = phi i64 [ %ret.1.lcssa, %omp.inner.for.inc ]
  %.omp.iv.0.lcssa = phi i64 [ %.omp.iv.0, %omp.inner.for.inc ]
  store i64 %inc.lcssa25.lcssa, i64* %j, align 8, !tbaa !7
  store i64 %.omp.iv.0.lcssa, i64* %i, align 8, !tbaa !7
  call void @llvm.directive.region.exit(token %2) [ "DIR.OMP.END.SIMD"() ]
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %omp.loop.exit, %entry
  %ret.2 = phi i64 [ %ret.1.lcssa.lcssa, %omp.loop.exit ], [ 0, %entry ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #2
  ret i64 %ret.2
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #2

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }


!2 = !{!3, !4, i64 0}
!3 = !{!"array@_ZTSA101_f", !4, i64 0}
!4 = !{!"float", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!8, !8, i64 0}
!8 = !{!"long", !5, i64 0}
