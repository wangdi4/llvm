; NOTE: Assertions have been autogenerated by utils/update_test_checks.py

; RUN: opt -S -VPlanDriver < %s | FileCheck %s
; RUN: opt -enable-explicit-vplan-vls-hir -tbaa -hir-ssa-deconstruction -hir-framework -VPlanDriverHIR -hir-cg -mem2reg -S < %s | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%S1 = type { i64, double }

define void @foo(%S1 *%p) {
; CHECK: load <8 x i64>, {{.*}}, align 8, !tbaa [[TBAA:!.*]]
; CHECK: store <8 x i64> {{.*}}, align 8, !tbaa [[TBAA]]
; CHECK-DAG: [[CHAR:!.*]] = !{!"omnipotent char", {{.*}}, i64 0}
; CHECK-DAG: [[TBAA]] = !{[[CHAR]], [[CHAR]], i64 0}
;
entry:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.SIMDLEN"(i32 4) ]
  br label %header

header:
  %iv = phi i64 [ 0, %entry ], [ %iv.next, %header ]

  %p.i64 = getelementptr inbounds %S1, %S1* %p, i64 %iv, i32 0
  %p.double = getelementptr inbounds %S1, %S1* %p, i64 %iv, i32 1

  %ld.i64 = load i64, i64 *%p.i64, !tbaa !4
  %ld.double = load double, double *%p.double, !tbaa !5

  %cast = sitofp i64 %iv to double

  store i64 %iv, i64 *%p.i64, !tbaa !4
  store double %cast, double *%p.double, !tbaa !5

  %iv.next = add nuw nsw i64 %iv, 1
  %exitcond = icmp eq i64 %iv.next, 128
  br i1 %exitcond, label %exit, label %header

exit:
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"() ]
  ret void
}

declare token @llvm.directive.region.entry() #0
declare void @llvm.directive.region.exit(token) #0

!0 = !{!"Simple C/C++ TBAA"}
!1 = !{!"omnipotent char", !0, i64 0}
!2 = !{!"long", !1, i64 0}
!3 = !{!"double", !1, i64 0}
!4 = !{!2, !2, i64 0}
!5 = !{!3, !3, i64 0}
