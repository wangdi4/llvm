; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -opaque-pointers=0 -S < %s -passes='function(vpo-cfg-restructuring),vplan-pragma-omp-ordered-simd-extract,print' -disable-output --vpo-utils-add-typed-privates=false 2>&1 | FileCheck %s --check-prefixes=CHECK,UNTYPED
; RUN: opt -opaque-pointers=0 -S < %s -passes='function(vpo-cfg-restructuring),vplan-pragma-omp-ordered-simd-extract,print' -disable-output 2>&1 | FileCheck %s --check-prefixes=CHECK,TYPED

; Tests how Code Extractor will work for an simd ordered region with complicated
; control flow.

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define void @var_tripcount(i32* %ip, i32 %n, i32* %x) local_unnamed_addr {
; CHECK-LABEL: @var_tripcount(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[PHI_RES_LOC:%.*]] = alloca i32, align 4
; CHECK-NEXT:    br label [[DIR_OMP_SIMD_1:%.*]]
; CHECK:       DIR.OMP.SIMD.1:
; TYPED-NEXT:    [[ENTRY_REGION:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.PRIVATE:TYPED"(i32* [[PHI_RES_LOC]], i32 0, i32 1) ]
; UNTYPED-NEXT:  [[ENTRY_REGION:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.PRIVATE"(i32* [[PHI_RES_LOC]]) ]
; CHECK-NEXT:    br label [[DIR_QUAL_LIST_END_2:%.*]]
; CHECK:       DIR.QUAL.LIST.END.2:
; CHECK-NEXT:    [[CMP1:%.*]] = icmp sgt i32 [[N:%.*]], 0
; CHECK-NEXT:    br i1 [[CMP1]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; CHECK:       for.body.preheader:
; CHECK-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[LATCH:%.*]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i32, i32* [[IP:%.*]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[VAL:%.*]] = load i32, i32* [[X:%.*]], align 4
; CHECK-NEXT:    br label [[CODEREPL:%.*]]
; CHECK:       codeRepl:
; CHECK-NEXT:    [[LT_CAST:%.*]] = bitcast i32* [[PHI_RES_LOC]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 -1, i8* [[LT_CAST]])
; CHECK-NEXT:    call void @var_tripcount.ordered.simd.region(i32 [[VAL]], i32* [[ARRAYIDX]], i32 [[N]], i32* [[PHI_RES_LOC]])
; CHECK-NEXT:    [[PHI_RES_RELOAD:%.*]] = load i32, i32* [[PHI_RES_LOC]], align 4
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 -1, i8* [[LT_CAST]])
; CHECK-NEXT:    br label [[LATCH]]
; CHECK:       latch:
; CHECK-NEXT:    store i32 [[PHI_RES_RELOAD]], i32* [[X]], align 4
; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT]]
; CHECK-NEXT:    br i1 [[EXITCOND]], label [[FOR_END:%.*]], label [[FOR_BODY]]
; CHECK:       for.end:
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP]]
; CHECK:       for.cond.cleanup:
; CHECK-NEXT:    br label [[DIR_OMP_END_SIMD_2:%.*]]
; CHECK:       DIR.OMP.END.SIMD.2:
; CHECK-NEXT:    call void @llvm.directive.region.exit(token [[ENTRY_REGION]]) [ "DIR.OMP.END.SIMD"() ]
; CHECK-NEXT:    br label [[DIR_QUAL_LIST_END_3:%.*]]
; CHECK:       DIR.QUAL.LIST.END.3:
; CHECK-NEXT:    ret void
;
entry:
  %entry.region = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %DIR.QUAL.LIST.END.2

DIR.QUAL.LIST.END.2:
  %cmp1 = icmp sgt i32 %n, 0
  br i1 %cmp1, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:
  %wide.trip.count = zext i32 %n to i64
  br label %for.body

for.body:
  %indvars.iv = phi i64 [ %indvars.iv.next, %latch ], [ 0, %for.body.preheader ]
  %arrayidx = getelementptr inbounds i32, i32* %ip, i64 %indvars.iv
  %val = load i32, i32* %x
  br label %ordered.entry

ordered.entry:
;            ordered.entry
;                  |
;              ordered.1<-------+
;                /   \          |
;         ordered.2  ordered.3--+
;          /     |      /
; +-> ordered.5  |     /
; |       |      |    /
; +-------+      |   /
;          \     |  /
;           ordered.4
;                |
;         ordered.exit
  %tok.ordered = call token @llvm.directive.region.entry() [ "DIR.OMP.ORDERED"(), "QUAL.OMP.ORDERED.SIMD"() ]
  br label %ordered.1

ordered.1:
  %phi.ordered.loop.induction.1 = phi i32 [ 0, %ordered.entry ], [ %ordered.loop.induction.1, %ordered.3 ]
  %val1 = add nsw i32 %val, 2
  %cmp2 = icmp eq i32 %val1, 8
  br i1 %cmp2, label %ordered.2, label %ordered.3

ordered.2:
  %val3 = load i32, i32* %arrayidx, align 4
  %cmp3 = icmp eq i32 %val3, %val1
  br i1 %cmp3, label %ordered.5, label %ordered.4

ordered.3:
  %res1 = add nsw i32 %n, %val1
  %ordered.loop.induction.1 = add nsw i32 %phi.ordered.loop.induction.1, 1
  %cmp4 = icmp eq i32 %ordered.loop.induction.1, 16
  br i1 %cmp4, label %ordered.1, label %ordered.4

ordered.5:
  %phi.ordered.loop.induction.2 = phi i32 [ 0, %ordered.2 ], [ %ordered.loop.induction.2, %ordered.5 ]
  %res2 = add nsw i32 %n, %val3
  %ordered.loop.induction.2 = add nsw i32 %phi.ordered.loop.induction.2, 1
  %cmp5 = icmp eq i32 %ordered.loop.induction.2, 16
  br i1 %cmp5, label %ordered.5, label %ordered.4

ordered.4:
  %phi.res = phi i32 [ %val3, %ordered.2 ], [ %res1, %ordered.3 ], [ %res2, %ordered.5 ]
  br label %ordered.exit

ordered.exit:
  call void @llvm.directive.region.exit(token %tok.ordered) [ "DIR.OMP.END.ORDERED"() ]
  br label %latch

latch:
  store i32 %phi.res, i32* %x, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond, label %for.end, label %for.body

for.end:
  br label %for.cond.cleanup

for.cond.cleanup:
  call void @llvm.directive.region.exit(token %entry.region) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.QUAL.LIST.END.3

DIR.QUAL.LIST.END.3:
  ret void
}

declare token @llvm.directive.region.entry() nounwind
declare void @llvm.directive.region.exit(token) nounwind
