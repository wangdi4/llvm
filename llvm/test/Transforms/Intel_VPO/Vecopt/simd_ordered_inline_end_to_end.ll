; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -passes='vplan-pragma-omp-ordered-simd-extract,vpo-cfg-restructuring,vplan-vec,vpo-directive-cleanup,always-inline' -vplan-force-vf=2 -S < %s 2>&1 | FileCheck %s

; Tests if the code that was removed by Code Extractor is correctly inlined in
; the code.

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define void @var_tripcount(i32* %ip, i32 %n, i32* %x) local_unnamed_addr {
; CHECK:  define void @var_tripcount(i32* [[IP0:%.*]], i32 [[N0:%.*]], i32* [[X0:%.*]]) local_unnamed_addr {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label [[DIR_OMP_SIMD_10:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.SIMD.1:
; CHECK-NEXT:    br label [[DIR_QUAL_LIST_END_20:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.QUAL.LIST.END.2:
; CHECK-NEXT:    [[CMP50:%.*]] = icmp sgt i32 [[N0]], 0
; CHECK-NEXT:    br i1 [[CMP50]], label [[FOR_BODY_PREHEADER0:%.*]], label [[FOR_COND_CLEANUP0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  for.body.preheader:
; CHECK-NEXT:    [[WIDE_TRIP_COUNT0:%.*]] = zext i32 [[N0]] to i64
; CHECK-NEXT:    br label [[VPLANNEDBB0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB:
; CHECK-NEXT:    [[TMP0:%.*]] = and i64 [[WIDE_TRIP_COUNT0]], 4294967294
; CHECK-NEXT:    [[TMP1:%.*]] = icmp eq i64 0, [[TMP0]]
; CHECK-NEXT:    br i1 [[TMP1]], label %[[MERGE_BLK0:.*]], label [[VPLANNEDBB10:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB1:
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT0:%.*]] = insertelement <2 x i32*> poison, i32* [[IP0]], i64 0
; CHECK-NEXT:    [[BROADCAST_SPLAT0:%.*]] = shufflevector <2 x i32*> [[BROADCAST_SPLATINSERT0]], <2 x i32*> poison, <2 x i32> zeroinitializer
; CHECK-NEXT:    br label [[VPLANNEDBB20:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB2:
; CHECK-NEXT:    [[TMP2:%.*]] = and i64 [[WIDE_TRIP_COUNT0]], 4294967294
; CHECK-NEXT:    br label [[VECTOR_BODY0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  vector.body:
; CHECK-NEXT:    [[UNI_PHI0:%.*]] = phi i64 [ [[TMP4:%.*]], [[VPLANNEDBB50:%.*]] ], [ 0, [[VPLANNEDBB20]] ]
; CHECK-NEXT:    [[VEC_PHI0:%.*]] = phi <2 x i64> [ [[TMP3:%.*]], [[VPLANNEDBB50]] ], [ <i64 0, i64 1>, [[VPLANNEDBB20]] ]
; CHECK-NEXT:    [[MM_VECTORGEP0:%.*]] = getelementptr inbounds i32, <2 x i32*> [[BROADCAST_SPLAT0]], <2 x i64> [[VEC_PHI0]]
; CHECK-NEXT:    [[MM_VECTORGEP_EXTRACT_1_0:%.*]] = extractelement <2 x i32*> [[MM_VECTORGEP0]], i32 1
; CHECK-NEXT:    [[MM_VECTORGEP_EXTRACT_0_0:%.*]] = extractelement <2 x i32*> [[MM_VECTORGEP0]], i32 0
; CHECK-NEXT:    br label [[VPLANNEDBB40:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB4:
;
; The ordered block is inlined back to the loop:
; CHECK-NEXT:    [[VAL_I0:%.*]] = load i32, i32* [[X0]], align 4
; CHECK-NEXT:    store i32 [[VAL_I0]], i32* [[MM_VECTORGEP_EXTRACT_0_0]], align 4
;
; The ordered block is inlined again:
; CHECK-NEXT:    [[VAL_I130:%.*]] = load i32, i32* [[X0]], align 4
; CHECK-NEXT:    store i32 [[VAL_I130]], i32* [[MM_VECTORGEP_EXTRACT_1_0]], align 4
; CHECK-NEXT:    br label [[VPLANNEDBB50]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB5:
; CHECK-NEXT:    [[TMP3]] = add nuw nsw <2 x i64> [[VEC_PHI0]], <i64 2, i64 2>
; CHECK-NEXT:    [[TMP4]] = add nuw nsw i64 [[UNI_PHI0]], 2
; CHECK-NEXT:    [[TMP5:%.*]] = icmp uge i64 [[TMP4]], [[TMP2]]
; CHECK-NEXT:    br i1 [[TMP5]], label [[VPLANNEDBB60:%.*]], label [[VECTOR_BODY0]], !llvm.loop !0
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB6:
; CHECK-NEXT:    [[TMP6:%.*]] = mul i64 1, [[TMP2]]
; CHECK-NEXT:    [[TMP7:%.*]] = add i64 0, [[TMP6]]
; CHECK-NEXT:    br label [[VPLANNEDBB70:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB7:
; CHECK-NEXT:    br label [[VPLANNEDBB80:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB8:
; CHECK-NEXT:    [[TMP8:%.*]] = icmp eq i64 [[WIDE_TRIP_COUNT0]], [[TMP2]]
; CHECK-NEXT:    br i1 [[TMP8]], label [[FINAL_MERGE0:%.*]], label %[[MERGE_BLK0]]
; CHECK-EMPTY:
; CHECK-NEXT:  [[MERGE_BLK0]]:
; CHECK-NEXT:    [[UNI_PHI90:%.*]] = phi i64 [ [[TMP7]], [[VPLANNEDBB80]] ], [ 0, [[VPLANNEDBB0]] ]
; CHECK-NEXT:    br label %[[REMBLK0:.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  [[REMBLK0]]:
; CHECK-NEXT:    br label [[FOR_BODY0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB10:
; CHECK-NEXT:    br label [[FINAL_MERGE0]]
; CHECK-EMPTY:
; CHECK-NEXT:  final.merge:
; CHECK-NEXT:    [[UNI_PHI110:%.*]] = phi i64 [ [[INDVARS_IV_NEXT0:%.*]], [[VPLANNEDBB100:%.*]] ], [ [[TMP7]], [[VPLANNEDBB80]] ]
; CHECK-NEXT:    br label [[FOR_END0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  for.body:
; CHECK-NEXT:    [[INDVARS_IV0:%.*]] = phi i64 [ [[INDVARS_IV_NEXT0]], [[LATCH0:%.*]] ], [ [[UNI_PHI90]], %[[REMBLK0]] ]
; CHECK-NEXT:    [[ARRAYIDX0:%.*]] = getelementptr inbounds i32, i32* [[IP0]], i64 [[INDVARS_IV0]]
; CHECK-NEXT:    br label [[CODEREPL0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  codeRepl:
;
; Inline the ordered region again:
; CHECK-NEXT:    [[VAL_I120:%.*]] = load i32, i32* [[X0]], align 4
; CHECK-NEXT:    store i32 [[VAL_I120]], i32* [[ARRAYIDX0]], align 4
; CHECK-NEXT:    br label [[LATCH0]]
; CHECK-EMPTY:
; CHECK-NEXT:  latch:
; CHECK-NEXT:    [[INDVARS_IV_NEXT0]] = add nuw nsw i64 [[INDVARS_IV0]], 1
; CHECK-NEXT:    [[EXITCOND0:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT0]], [[WIDE_TRIP_COUNT0]]
; CHECK-NEXT:    br i1 [[EXITCOND0]], label [[VPLANNEDBB100]], label [[FOR_BODY0]], !llvm.loop !2
; CHECK-EMPTY:
; CHECK-NEXT:  for.end:
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP0]]
; CHECK-EMPTY:
; CHECK-NEXT:  for.cond.cleanup:
; CHECK-NEXT:    br label [[DIR_OMP_END_SIMD_20:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.END.SIMD.2:
; CHECK-NEXT:    br label [[DIR_QUAL_LIST_END_30:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.QUAL.LIST.END.3:
; CHECK-NEXT:    ret void
; CHECK-NEXT:  }
;
entry:
  %entry.region = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %DIR.QUAL.LIST.END.2

DIR.QUAL.LIST.END.2:
  %cmp5 = icmp sgt i32 %n, 0
  br i1 %cmp5, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:
  %wide.trip.count = zext i32 %n to i64
  br label %for.body

for.body:
  %indvars.iv = phi i64 [ %indvars.iv.next, %latch ], [ 0, %for.body.preheader ]
  %arrayidx = getelementptr inbounds i32, i32* %ip, i64 %indvars.iv
  br label %ordered.entry

ordered.entry:
  %tok.ordered = call token @llvm.directive.region.entry() [ "DIR.OMP.ORDERED"(), "QUAL.OMP.ORDERED.SIMD"() ]
  br label %ordered

ordered:
  %val = load i32, i32* %x
  store i32 %val, i32* %arrayidx, align 4
  br label %ordered.exit

ordered.exit:
  call void @llvm.directive.region.exit(token %tok.ordered) [ "DIR.OMP.END.ORDERED"() ]
  br label %latch

latch:
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond, label %for.end, label %for.body

for.end:
  br label %for.cond.cleanup

for.cond.cleanup:
  call void @llvm.directive.region.exit(token %entry.region) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.QUAL.LIST.END.3

DIR.QUAL.LIST.END.3:
  ret void
}

declare token @llvm.directive.region.entry() nounwind
declare void @llvm.directive.region.exit(token) nounwind
