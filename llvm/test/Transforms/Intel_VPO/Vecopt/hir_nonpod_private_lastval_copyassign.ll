; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -enable-new-pm=0 -hir-ssa-deconstruction -hir-framework -hir-vplan-vec -print-after=hir-vplan-vec -vplan-force-vf=2 -disable-output < %s 2>&1 | FileCheck %s
; RUN: opt -passes='hir-ssa-deconstruction,hir-vplan-vec,print<hir>' -vplan-force-vf=2 -disable-output < %s 2>&1 | FileCheck %s

; *** IR Dump Before VPlan HIR Vectorizer (hir-vplan-vec) ***
; Function: _Z3fooPi
;
; <0>          BEGIN REGION { }
; <2>                %1 = @llvm.directive.region.entry(); [ DIR.OMP.SIMD(),  QUAL.OMP.LASTPRIVATE:NONPOD(&((%x.lpriv)[0])&((@_ZTS3str.omp.def_constr)[0])&((@_ZTS3str.omp.copy_assign)[0])&((@_ZTS3str.omp.destr)[0])),  QUAL.OMP.NORMALIZED.IV(null),  QUAL.OMP.NORMALIZED.UB(null),  QUAL.OMP.LINEAR:IV(&((%i.linear.iv)[0])1) ]
; <7>                %a.promoted = (%x.lpriv)[0].0;
; <21>
; <21>               + DO i1 = 0, 9999, 1   <DO_LOOP> <simd>
; <11>               |   @foo(&((%x.lpriv)[0]));
; <21>               + END LOOP
; <21>
; <19>               @llvm.directive.region.exit(%1); [ DIR.OMP.END.SIMD() ]
; <20>               ret 0;
; <0>          END REGION

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.str = type { i32 }

; Function Attrs: nounwind uwtable
define dso_local i32 @_Z3fooPi(i32* nocapture readonly %k) local_unnamed_addr {
;
; CHECK:  Function: _Z3fooPi
; CHECK:  BEGIN REGION { modified }
; CHECK-NEXT:        [[A_PROMOTED0:%.*]] = ([[X_LPRIV0:%.*]])[0].0
; CHECK-NEXT:        [[PRIV_MEM_BC0:%.*]] = &((%struct.str*)([[PRIV_MEM0:%.*]])[0])
; CHECK-NEXT:        [[SERIAL_TEMP0:%.*]] = undef
; CHECK-NEXT:        [[_ZTS3STR_OMP_DEF_CONSTR0:%.*]] = @_ZTS3str.omp.def_constr(&((%struct.str*)([[PRIV_MEM0]])[0]))
; CHECK-NEXT:        [[SERIAL_TEMP0]] = insertelement [[SERIAL_TEMP0]],  [[_ZTS3STR_OMP_DEF_CONSTR0]],  0
; CHECK-NEXT:        [[EXTRACT_1_0:%.*]] = extractelement &((<2 x %struct.str*>)([[PRIV_MEM_BC0]])[<i32 0, i32 1>]),  1
; CHECK-NEXT:        [[_ZTS3STR_OMP_DEF_CONSTR20:%.*]] = @_ZTS3str.omp.def_constr([[EXTRACT_1_0]])
; CHECK-NEXT:        [[SERIAL_TEMP0]] = insertelement [[SERIAL_TEMP0]],  [[_ZTS3STR_OMP_DEF_CONSTR20]],  1
; CHECK:        + DO i1 = 0, 9999, 2   <DO_LOOP> <simd-vectorized> <novectorize>
; CHECK-NEXT:        |   @foo(&((%struct.str*)([[PRIV_MEM0]])[0]))
; CHECK-NEXT:        |   [[EXTRACT_1_40:%.*]] = extractelement &((<2 x %struct.str*>)([[PRIV_MEM_BC0]])[<i32 0, i32 1>]),  1
; CHECK-NEXT:        |   @foo([[EXTRACT_1_40]])
; CHECK-NEXT:        + END LOOP
; CHECK:        [[EXTRACT_1_50:%.*]] = extractelement &((<2 x %struct.str*>)([[PRIV_MEM_BC0]])[<i32 0, i32 1>]),  1
; CHECK-NEXT:        @_ZTS3str.omp.copy_assign([[X_LPRIV0]],  [[EXTRACT_1_50]])
; CHECK-NEXT:        @_ZTS3str.omp.destr(&((%struct.str*)([[PRIV_MEM0]])[0]))
; CHECK-NEXT:        [[EXTRACT_1_60:%.*]] = extractelement &((<2 x %struct.str*>)([[PRIV_MEM_BC0]])[<i32 0, i32 1>]),  1
; CHECK-NEXT:        @_ZTS3str.omp.destr([[EXTRACT_1_60]])
; CHECK:             ret 0
; CHECK-NEXT:  END REGION
;
DIR.OMP.SIMD.118:
  %x.lpriv = alloca %struct.str, align 4
  %i.linear.iv = alloca i32, align 4
  %x = alloca %struct.str, align 4
  %0 = bitcast %struct.str* %x to i8*
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %DIR.OMP.SIMD.118
  %1 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.LASTPRIVATE:NONPOD.TYPED"(%struct.str* %x.lpriv, %struct.str zeroinitializer, i32 1, %struct.str* (%struct.str*)* @_ZTS3str.omp.def_constr, void (%struct.str*, %struct.str*)* @_ZTS3str.omp.copy_assign, void (%struct.str*)* @_ZTS3str.omp.destr), "QUAL.OMP.LINEAR:IV.TYPED"(i32* %i.linear.iv, i32 0, i32 1, i32 1) ]
  br label %DIR.OMP.SIMD.2

DIR.OMP.SIMD.2:                                   ; preds = %DIR.OMP.SIMD.1
  %2 = bitcast i32* %i.linear.iv to i8*
  %a = getelementptr inbounds %struct.str, %struct.str* %x.lpriv, i64 0, i32 0
  %a.promoted = load i32, i32* %a, align 4
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %DIR.OMP.SIMD.2, %omp.inner.for.body
  %indvars.iv = phi i64 [ 0, %DIR.OMP.SIMD.2 ], [ %indvars.iv.next, %omp.inner.for.body ]
  call void @foo(%struct.str* %x.lpriv) #0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 10000
  br i1 %exitcond.not, label %DIR.OMP.END.SIMD.219, label %omp.inner.for.body

DIR.OMP.END.SIMD.219:                             ; preds = %omp.inner.for.body
  call void @llvm.directive.region.exit(token %1) [ "DIR.OMP.END.SIMD"() ]
  ret i32 0
}

declare void @foo(%struct.str*)

; Function Attrs: nounwind
declare token @llvm.directive.region.entry()

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token)

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn
declare %struct.str* @_ZTS3str.omp.def_constr(%struct.str* readnone returned %0)

; Function Attrs: mustprogress nofree norecurse nosync nounwind uwtable willreturn
declare void @_ZTS3str.omp.copy_assign(%struct.str* nocapture %0, %struct.str* nocapture readonly %1)

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone uwtable willreturn
declare void @_ZTS3str.omp.destr(%struct.str* nocapture %0)

attributes #0 = { nounwind }
