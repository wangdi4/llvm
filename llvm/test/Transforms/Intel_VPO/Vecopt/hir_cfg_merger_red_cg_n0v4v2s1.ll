; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; Test for reduction last value CG with CFGMerger and non-scalar remainder along HIR path.

; RUN: opt -hir-ssa-deconstruction -hir-framework -hir-vplan-vec -vplan-enable-new-cfg-merge-hir -vplan-vec-scenario="n0;v4;v2s1" -print-after=hir-vplan-vec -disable-output < %s 2>&1 | FileCheck %s
; RUN: opt -passes="hir-ssa-deconstruction,hir-vplan-vec,print<hir>" -vplan-enable-new-cfg-merge-hir -vplan-vec-scenario="n0;v4;v2s1" -disable-output < %s 2>&1 | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define float @foo(float* nocapture readonly %A, i64 %N, float %init) {
; CHECK-LABEL:  Single loop scenario:
; CHECK-NEXT:   MainLoop: unmasked, VF=4
; CHECK-NEXT:   PeelLoop: none
; CHECK-NEXT:   Remainders: scalar,unmasked, VF=2,
; CHECK:       BEGIN REGION { modified }
; CHECK-NEXT:        [[SUM_070:%.*]] = [[INIT0:%.*]]
; CHECK-NEXT:        [[TGU0:%.*]] = [[N0:%.*]]  /u  2
; CHECK-NEXT:        [[VEC_TC0:%.*]] = [[TGU0]]  *  2
; CHECK-NEXT:        [[DOTVEC0:%.*]] = 0 == [[VEC_TC0]]
; CHECK-NEXT:        [[PHI_TEMP0:%.*]] = [[SUM_070]]
; CHECK-NEXT:        [[PHI_TEMP20:%.*]] = 0
; CHECK-NEXT:        [[UNIFCOND0:%.*]] = extractelement [[DOTVEC0]],  0
; CHECK-NEXT:        if ([[UNIFCOND0]] == 1)
; CHECK-NEXT:        {
; CHECK-NEXT:           goto [[MERGE_BLK0:merge.blk[0-9]+]].31
; CHECK-NEXT:        }
; CHECK-NEXT:        [[TGU40:%.*]] = [[N0]]  /u  4
; CHECK-NEXT:        [[VEC_TC50:%.*]] = [[TGU40]]  *  4
; CHECK-NEXT:        [[DOTVEC60:%.*]] = 0 == [[VEC_TC50]]
; CHECK-NEXT:        [[PHI_TEMP70:%.*]] = [[SUM_070]]
; CHECK-NEXT:        [[PHI_TEMP90:%.*]] = 0
; CHECK-NEXT:        [[UNIFCOND110:%.*]] = extractelement [[DOTVEC60]],  0
; CHECK-NEXT:        if ([[UNIFCOND110]] == 1)
; CHECK-NEXT:        {
; CHECK-NEXT:           goto [[MERGE_BLK1:merge.blk[0-9]+]].42
; CHECK-NEXT:        }
; CHECK-NEXT:        [[TGU120:%.*]] = [[N0]]  /u  4
; CHECK-NEXT:        [[VEC_TC130:%.*]] = [[TGU120]]  *  4
; CHECK-NEXT:        [[RED_INIT0:%.*]] = 0.000000e+00
; CHECK-NEXT:        [[PHI_TEMP140:%.*]] = [[RED_INIT0]]
; CHECK:             + DO i1 = 0, [[VEC_TC130]] + -1, 4   <DO_LOOP> <simd-vectorized> <nounroll> <novectorize>
; CHECK-NEXT:        |   [[DOTVEC160:%.*]] = (<4 x float>*)([[A0:%.*]])[i1]
; CHECK-NEXT:        |   [[DOTVEC170:%.*]] = [[DOTVEC160]]  +  [[PHI_TEMP140]]
; CHECK-NEXT:        |   [[PHI_TEMP140]] = [[DOTVEC170]]
; CHECK-NEXT:        + END LOOP
; CHECK:             [[SUM_070]] = @llvm.vector.reduce.fadd.v4f32([[SUM_070]],  [[DOTVEC170]])
; CHECK-NEXT:        [[TGU190:%.*]] = [[N0]]  /u  2
; CHECK-NEXT:        [[VEC_TC200:%.*]] = [[TGU190]]  *  2
; CHECK-NEXT:        [[DOTVEC210:%.*]] = [[VEC_TC200]] == [[VEC_TC130]]
; CHECK-NEXT:        [[PHI_TEMP70]] = [[SUM_070]]
; CHECK-NEXT:        [[PHI_TEMP90]] = [[VEC_TC130]]
; CHECK-NEXT:        [[PHI_TEMP240:%.*]] = [[SUM_070]]
; CHECK-NEXT:        [[PHI_TEMP260:%.*]] = [[VEC_TC130]]
; CHECK-NEXT:        [[UNIFCOND280:%.*]] = extractelement [[DOTVEC210]],  0
; CHECK-NEXT:        if ([[UNIFCOND280]] == 1)
; CHECK-NEXT:        {
; CHECK-NEXT:           goto [[MERGE_BLK2:merge.blk[0-9]+]].71
; CHECK-NEXT:        }
; CHECK-NEXT:        [[MERGE_BLK1]].42:
; CHECK-NEXT:        [[TGU290:%.*]] = [[N0]]  /u  2
; CHECK-NEXT:        [[VEC_TC300:%.*]] = [[TGU290]]  *  2
; CHECK-NEXT:        [[RED_INIT310:%.*]] = 0.000000e+00
; CHECK-NEXT:        [[PHI_TEMP320:%.*]] = [[RED_INIT310]]
; CHECK:             + DO i1 = [[PHI_TEMP90]], [[VEC_TC300]] + -1, 2   <DO_LOOP>  <MAX_TC_EST = 2>  <LEGAL_MAX_TC = 2> <nounroll> <novectorize> <max_trip_count = 2>
; CHECK-NEXT:        |   [[DOTVEC340:%.*]] = (<2 x float>*)([[A0]])[i1]
; CHECK-NEXT:        |   [[DOTVEC350:%.*]] = [[DOTVEC340]]  +  [[PHI_TEMP320]]
; CHECK-NEXT:        |   [[PHI_TEMP320]] = [[DOTVEC350]]
; CHECK-NEXT:        + END LOOP
; CHECK:             [[SUM_070]] = @llvm.vector.reduce.fadd.v2f32([[PHI_TEMP70]],  [[DOTVEC350]])
; CHECK-NEXT:        [[PHI_TEMP240]] = [[SUM_070]]
; CHECK-NEXT:        [[PHI_TEMP260]] = [[VEC_TC300]]
; CHECK-NEXT:        [[MERGE_BLK2]].71:
; CHECK-NEXT:        [[TGU400:%.*]] = [[N0]]  /u  2
; CHECK-NEXT:        [[VEC_TC410:%.*]] = [[TGU400]]  *  2
; CHECK-NEXT:        [[DOTVEC420:%.*]] = [[N0]] == [[VEC_TC410]]
; CHECK-NEXT:        [[PHI_TEMP0]] = [[PHI_TEMP240]]
; CHECK-NEXT:        [[PHI_TEMP20]] = [[PHI_TEMP260]]
; CHECK-NEXT:        [[PHI_TEMP450:%.*]] = [[PHI_TEMP240]]
; CHECK-NEXT:        [[PHI_TEMP470:%.*]] = [[PHI_TEMP260]]
; CHECK-NEXT:        [[UNIFCOND490:%.*]] = extractelement [[DOTVEC420]],  0
; CHECK-NEXT:        if ([[UNIFCOND490]] == 1)
; CHECK-NEXT:        {
; CHECK-NEXT:           goto final.merge.105
; CHECK-NEXT:        }
; CHECK-NEXT:        [[MERGE_BLK0]].31:
; CHECK-NEXT:        [[LB_TMP0:%.*]] = [[PHI_TEMP20]]
; CHECK-NEXT:        [[SUM_070]] = [[PHI_TEMP0]]
; CHECK:             + DO i1 = [[LB_TMP0]], [[N0]] + -1, 1   <DO_LOOP> <MAX_TC_EST = 3> <LEGAL_MAX_TC = 3> <nounroll> <novectorize> <max_trip_count = 3>
; CHECK-NEXT:        |   [[A_I0:%.*]] = ([[A0]])[i1]
; CHECK-NEXT:        |   [[SUM_070]] = [[A_I0]]  +  [[SUM_070]]
; CHECK-NEXT:        + END LOOP
; CHECK:             [[PHI_TEMP450]] = [[SUM_070]]
; CHECK-NEXT:        [[PHI_TEMP470]] = [[N0]] + -1
; CHECK-NEXT:        final.merge.105:
; CHECK-NEXT:  END REGION
;
entry:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %for.body

for.body:                                           ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %entry ]
  %sum.07 = phi float [ %add, %for.body ], [ %init, %entry ]
  %arrayidx = getelementptr inbounds float, float* %A, i64 %indvars.iv
  %A.i = load float, float* %arrayidx, align 4
  %add = fadd fast float %A.i, %sum.07
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %N
  br i1 %exitcond, label %for.cond.cleanup.loopexit, label %for.body

for.cond.cleanup.loopexit:                             ; preds = %for.body
  %add.lcssa = phi float [ %add, %for.body ]
  br label %end.simd

end.simd:
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.QUAL.LIST.END.3

DIR.QUAL.LIST.END.3:
  ret float %add.lcssa

}
declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
