; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; The "live_out1" and "live_out2" values are moved in Intermediate_BB0 and
; Intermediate_BB1. Therefore, they become live-outs after merge loop exits
; tranformation. In addition, "var3" is also a live-out of the loop. We need
; to preserve SSA for all the live-outs. Hence, a SSA phi node is emitted for
; each live-out.

; RUN: opt -vplan-print-terminator-inst=false < %s -vplan-func-vec -disable-output -print-after-vplan-func-vec-loop-exit-canon | FileCheck %s
; RUN: opt -vplan-print-terminator-inst=false < %s -passes="vplan-func-vec" -disable-output -print-after-vplan-func-vec-loop-exit-canon | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: norecurse nounwind uwtable
define void @main() {
; CHECK-LABEL:  VPlan IR for: main
; CHECK-NEXT:    [[BB0:BB[0-9]+]]:
; CHECK-NEXT:     i32 [[VP_LANE:%.*]] = induction-init{add} i32 0 i32 1
; CHECK-NEXT:    SUCCESSORS(1):[[BB1:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]:
; CHECK-NEXT:     i32 [[VP_IV:%.*]] = phi  [ i32 0, [[BB0]] ],  [ i32 [[VP_IV_NEXT_SSA_PHI:%.*]], [[NEW_LOOP_LATCH0:new.loop.latch[0-9]+]] ]
; CHECK-NEXT:     i32 [[VP_VAR1:%.*]] = add i32 [[VP_IV]] i32 1
; CHECK-NEXT:     i1 [[VP_CMP1:%.*]] = icmp eq i32 [[VP_IV]] i32 16
; CHECK-NEXT:    SUCCESSORS(2):[[BB2:BB[0-9]+]](i1 [[VP_CMP1]]), [[INTERMEDIATE_BB0:intermediate.bb[0-9]+]](!i1 [[VP_CMP1]])
; CHECK-NEXT:    PREDECESSORS(2): [[BB0]] [[NEW_LOOP_LATCH0]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[INTERMEDIATE_BB0]]:
; CHECK-NEXT:       i32 [[VP_LIVE_OUT1:%.*]] = phi  [ i32 [[VP_VAR1]], [[BB1]] ]
; CHECK-NEXT:      SUCCESSORS(1):[[NEW_LOOP_LATCH0]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB2]]:
; CHECK-NEXT:       i32 [[VP_VAR2:%.*]] = add i32 [[VP_VAR1]] i32 1
; CHECK-NEXT:       i1 [[VP_CMP2:%.*]] = icmp eq i32 [[VP_VAR2]] i32 32
; CHECK-NEXT:      SUCCESSORS(2):[[BB3:BB[0-9]+]](i1 [[VP_CMP2]]), [[INTERMEDIATE_BB1:intermediate.bb[0-9]+]](!i1 [[VP_CMP2]])
; CHECK-NEXT:      PREDECESSORS(1): [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[INTERMEDIATE_BB1]]:
; CHECK-NEXT:         i32 [[VP_LIVE_OUT2:%.*]] = phi  [ i32 [[VP_VAR2]], [[BB2]] ]
; CHECK-NEXT:        SUCCESSORS(1):[[NEW_LOOP_LATCH0]]
; CHECK-NEXT:        PREDECESSORS(1): [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB3]]:
; CHECK-NEXT:       i32 [[VP_IV_NEXT:%.*]] = add i32 [[VP_IV]] i32 1
; CHECK-NEXT:       i32 [[VP_VAR3:%.*]] = add i32 [[VP_VAR2]] i32 2
; CHECK-NEXT:       i1 [[VP_BOTTOM_TEST:%.*]] = icmp eq i32 [[VP_IV_NEXT]] i32 128
; CHECK-NEXT:      SUCCESSORS(1):[[NEW_LOOP_LATCH0]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[NEW_LOOP_LATCH0]]:
; CHECK-NEXT:     i32 [[VP_LIVE_OUT2_SSA_PHI:%.*]] = phi  [ i32 undef, [[BB3]] ],  [ i32 undef, [[INTERMEDIATE_BB0]] ],  [ i32 [[VP_LIVE_OUT2]], [[INTERMEDIATE_BB1]] ]
; CHECK-NEXT:     i32 [[VP_LIVE_OUT1_SSA_PHI:%.*]] = phi  [ i32 undef, [[BB3]] ],  [ i32 [[VP_LIVE_OUT1]], [[INTERMEDIATE_BB0]] ],  [ i32 undef, [[INTERMEDIATE_BB1]] ]
; CHECK-NEXT:     i32 [[VP_VAR3_SSA_PHI:%.*]] = phi  [ i32 [[VP_VAR3]], [[BB3]] ],  [ i32 undef, [[INTERMEDIATE_BB0]] ],  [ i32 undef, [[INTERMEDIATE_BB1]] ]
; CHECK-NEXT:     i32 [[VP_IV_NEXT_SSA_PHI]] = phi  [ i32 [[VP_IV_NEXT]], [[BB3]] ],  [ i32 undef, [[INTERMEDIATE_BB0]] ],  [ i32 undef, [[INTERMEDIATE_BB1]] ]
; CHECK-NEXT:     i32 [[VP_EXIT_ID_PHI:%.*]] = phi  [ i32 0, [[BB3]] ],  [ i32 1, [[INTERMEDIATE_BB0]] ],  [ i32 2, [[INTERMEDIATE_BB1]] ]
; CHECK-NEXT:     i1 [[VP_TAKE_BACKEDGE_COND:%.*]] = phi  [ i1 [[VP_BOTTOM_TEST]], [[BB3]] ],  [ i1 false, [[INTERMEDIATE_BB0]] ],  [ i1 false, [[INTERMEDIATE_BB1]] ]
; CHECK-NEXT:    SUCCESSORS(2):[[BB1]](i1 [[VP_TAKE_BACKEDGE_COND]]), [[CASCADED_IF_BLOCK0:cascaded.if.block[0-9]+]](!i1 [[VP_TAKE_BACKEDGE_COND]])
; CHECK-NEXT:    PREDECESSORS(3): [[BB3]] [[INTERMEDIATE_BB0]] [[INTERMEDIATE_BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[CASCADED_IF_BLOCK0]]:
; CHECK-NEXT:     i1 [[VP0:%.*]] = icmp eq i32 [[VP_EXIT_ID_PHI]] i32 1
; CHECK-NEXT:    SUCCESSORS(2):[[BB4:BB[0-9]+]](i1 [[VP0]]), [[CASCADED_IF_BLOCK1:cascaded.if.block[0-9]+]](!i1 [[VP0]])
; CHECK-NEXT:    PREDECESSORS(1): [[NEW_LOOP_LATCH0]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[CASCADED_IF_BLOCK1]]:
; CHECK-NEXT:       i1 [[VP1:%.*]] = icmp eq i32 [[VP_EXIT_ID_PHI]] i32 2
; CHECK-NEXT:      SUCCESSORS(2):[[BB5:BB[0-9]+]](i1 [[VP1]]), [[BB6:BB[0-9]+]](!i1 [[VP1]])
; CHECK-NEXT:      PREDECESSORS(1): [[CASCADED_IF_BLOCK0]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB6]]:
; CHECK-NEXT:         i32 [[VP_LIVE_OUT3:%.*]] = phi  [ i32 [[VP_VAR3_SSA_PHI]], [[CASCADED_IF_BLOCK1]] ]
; CHECK-NEXT:         i32 [[VP_VAR6:%.*]] = add i32 [[VP_LIVE_OUT3]] i32 1
; CHECK-NEXT:        SUCCESSORS(1):[[BB7:BB[0-9]+]]
; CHECK-NEXT:        PREDECESSORS(1): [[CASCADED_IF_BLOCK1]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB5]]:
; CHECK-NEXT:         i32 [[VP_VAR5:%.*]] = add i32 [[VP_LIVE_OUT2_SSA_PHI]] i32 1
; CHECK-NEXT:        SUCCESSORS(1):[[BB7]]
; CHECK-NEXT:        PREDECESSORS(1): [[CASCADED_IF_BLOCK1]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB4]]:
; CHECK-NEXT:       i32 [[VP_VAR4:%.*]] = add i32 [[VP_LIVE_OUT1_SSA_PHI]] i32 1
; CHECK-NEXT:      SUCCESSORS(1):[[BB7]]
; CHECK-NEXT:      PREDECESSORS(1): [[CASCADED_IF_BLOCK0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB7]]:
; CHECK-NEXT:     ret
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(3): [[BB4]] [[BB5]] [[BB6]]
;
entry:
  %lane = call i32 @llvm.vplan.laneid()
  br label %inner_loop_header
;-------------------------------------------------------------------------------
;             BEFORE                                       AFTER
;-------------------------------------------------------------------------------
; +------>inner_loop_header               +--->BB1(inner_loop_header)
; |        /              \               |        |             \
; |      bb1 ---------+    \              |     BB2(bb2)      INTERMEDIATE_BB0
; |       |           |     \             |       /   \                /
; +-inner_loop_latch  |      \            |     BB3 INTERMEDIATE_BB1  /
;         |           |       \     (inner_loop_latch)       |       /
;       exitbb3    exitbb2  exitbb1       |         \        |      /
;                                         +----------NEW_LOOP_LATCH0
;                                                            |
;                                                   CASCADED_IF_BLOCK0
;                                                      /         \
;                                           (exitbb1)BB4   CASCADED_IF_BLOCK1
;                                                              /      \
;                                                   (exitbb2)BB5   (exitbb3)BB6
inner_loop_header:
  %iv = phi i32 [ 0, %entry ], [ %iv_next, %inner_loop_latch ]
  %var1 = add nsw i32 %iv, 1
  %cmp1 = icmp eq i32 %iv, 16
  br i1 %cmp1, label %bb1, label %exitbb1

bb1:
  %var2 = add nsw i32 %var1, 1
  %cmp2 = icmp eq i32 %var2, 32
  br i1 %cmp2, label %inner_loop_latch, label %exitbb2

inner_loop_latch:
  %iv_next = add nsw i32 %iv, 1
  %var3 = add nsw i32 %var2, 2
  %bottom_test = icmp eq i32 %iv_next, 128
  br i1 %bottom_test, label %inner_loop_header, label %exitbb3

exitbb1:
  %live_out1 = phi i32 [ %var1, %inner_loop_header ]
  %var4 = add nsw i32 %live_out1, 1
  br label %end

exitbb2:
  %live_out2 = phi i32 [ %var2, %bb1 ]
  %var5 = add nsw i32 %live_out2, 1
  br label %end

exitbb3:
  %live_out3 = phi i32 [ %var3, %inner_loop_latch ]
  %var6 = add nsw i32 %live_out3, 1
  br label %end

end:
  ret void
}

declare i32 @llvm.vplan.laneid()
