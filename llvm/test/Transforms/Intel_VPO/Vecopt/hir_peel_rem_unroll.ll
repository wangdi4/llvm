; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -disable-output -passes="hir-ssa-deconstruction,hir-temp-cleanup,hir-runtime-dd,hir-vec-dir-insert,hir-vplan-vec" -print-after=hir-vplan-vec -vplan-enable-peeling -vplan-enable-vectorized-peel -vplan-enable-masked-vectorized-remainder -vplan-enable-peel-rem-strip  -vplan-vec-scenario="m8;v8;m8" %s 2>&1 | FileCheck %s --check-prefix=PEEL
;
; RUN: opt -disable-output -passes="hir-ssa-deconstruction,hir-temp-cleanup,hir-runtime-dd,hir-vec-dir-insert,hir-vplan-vec" -print-after=hir-vplan-vec -vplan-enable-masked-vectorized-remainder -vplan-enable-peel-rem-strip  -vplan-vec-scenario="n0;v8;m8" %s 2>&1 | FileCheck %s --check-prefix=REM

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: argmemonly nofree norecurse nosync nounwind writeonly uwtable
define dso_local void @init(ptr nocapture noundef writeonly %a, i32 noundef %n, i32 noundef %seed) local_unnamed_addr #0 {
;
; PEEL-LABEL: Function: init
; PEEL-EMPTY:
; PEEL-NEXT:  BEGIN REGION { modified }
; PEEL-NEXT:        [[DOTVEC0:%.*]] = zext.i32.i64([[N0:%.*]]) <u 354
; PEEL-NEXT:        [[PHI_TEMP0:%.*]] = 0
; PEEL-NEXT:        [[EXTRACT_0_0:%.*]] = extractelement [[DOTVEC0]],  0
; PEEL-NEXT:        if ([[EXTRACT_0_0]] == 1)
; PEEL-NEXT:        {
; PEEL-NEXT:           goto [[MERGE_BLK0:merge.blk[0-9]+]].26
; PEEL-NEXT:        }
; PEEL-NEXT:        [[DOTVEC10:%.*]] = ptrtoint.<8 x ptr>.<8 x i64>(&((<8 x ptr>)([[A0:%.*]])[0]))
; PEEL-NEXT:        [[DOTVEC20:%.*]] = [[DOTVEC10]]  /u  4
; PEEL-NEXT:        [[DOTVEC30:%.*]] = [[DOTVEC20]]  *  7
; PEEL-NEXT:        [[DOTVEC40:%.*]] = [[DOTVEC30]]  [[U0:%.*]]  8
; PEEL-NEXT:        [[DOTVEC50:%.*]] = 0 == [[DOTVEC40]]
; PEEL-NEXT:        [[PHI_TEMP0]] = 0
; PEEL-NEXT:        [[EXTRACT_0_70:%.*]] = extractelement [[DOTVEC50]],  0
; PEEL-NEXT:        if ([[EXTRACT_0_70]] == 1)
; PEEL-NEXT:        {
; PEEL-NEXT:           goto [[MERGE_BLK0]].26
; PEEL-NEXT:        }
; PEEL-NEXT:        [[DOTVEC80:%.*]] = [[DOTVEC40]] + 8 >u zext.i32.i64([[N0]])
; PEEL-NEXT:        [[PHI_TEMP90:%.*]] = 0
; PEEL-NEXT:        [[EXTRACT_0_110:%.*]] = extractelement [[DOTVEC80]],  0
; PEEL-NEXT:        if ([[EXTRACT_0_110]] == 1)
; PEEL-NEXT:        {
; PEEL-NEXT:           goto [[MERGE_BLK1:merge.blk[0-9]+]].45
; PEEL-NEXT:        }
; PEEL-NEXT:        [[DOTVEC120:%.*]] = zext.i32.i64([[N0]]) + -1  +  1
; PEEL-NEXT:        [[DOTSCAL0:%.*]] = zext.i32.i64([[N0]]) + -1  +  1
; PEEL-NEXT:        [[DOTVEC130:%.*]] = [[DOTVEC40]]  -  0
; PEEL-NEXT:        [[EXTRACT_0_140:%.*]] = extractelement [[DOTVEC130]],  0
; PEEL-NEXT:        [[LOOP_UB0:%.*]] = [[EXTRACT_0_140]]  -  1
; ===== "unrolled" (stripped) masked peel loop
; PEEL-NEXT:        [[DOTVEC150:%.*]] = <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7> <u [[DOTVEC130]]
; PEEL-NEXT:        [[DOTVEC160:%.*]] = zext.<8 x i1>.<8 x i32>(-1 * <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7>)
; PEEL-NEXT:        [[DOTVEC170:%.*]] = ([[DOTVEC160]] == 0) ? <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7> : -1 * <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7>
; PEEL-NEXT:        [[DOTVEC180:%.*]] = [[SEED0:%.*]] + [[DOTVEC170]]  [[U0]]  101
; PEEL-NEXT:        (<8 x i32>*)([[A0]])[0] = [[DOTVEC180]], Mask = @{[[DOTVEC150]]}
; PEEL-NEXT:        [[DOTVEC190:%.*]] = <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7> + 8 <u [[DOTVEC130]]
; PEEL-NEXT:        [[TMP0:%.*]] = bitcast.<8 x i1>.i8([[DOTVEC190]])
; PEEL-NEXT:        [[CMP0:%.*]] = [[TMP0]] == 0
; PEEL-NEXT:        [[ALL_ZERO_CHECK0:%.*]] = [[CMP0]]
; PEEL-NEXT:        [[EXTRACT_0_200:%.*]] = extractelement [[DOTVEC40]],  0
; PEEL-NEXT:        [[IND_FINAL0:%.*]] = 0  +  [[EXTRACT_0_200]]
; PEEL-NEXT:        [[PHI_TEMP0]] = [[IND_FINAL0]]
; PEEL-NEXT:        [[MERGE_BLK0]].26:
; PEEL-NEXT:        [[DOTVEC220:%.*]] = [[PHI_TEMP0]] + 8 >u zext.i32.i64([[N0]])
; PEEL-NEXT:        [[PHI_TEMP90]] = [[PHI_TEMP0]]
; PEEL-NEXT:        [[EXTRACT_0_240:%.*]] = extractelement [[DOTVEC220]],  0
; PEEL-NEXT:        if ([[EXTRACT_0_240]] == 1)
; PEEL-NEXT:        {
; PEEL-NEXT:           goto [[MERGE_BLK1]].45
; PEEL-NEXT:        }
; PEEL-NEXT:        [[ADJ_TC0:%.*]] = zext.i32.i64([[N0]])  -  [[PHI_TEMP0]]
; PEEL-NEXT:        [[TGU0:%.*]] = [[ADJ_TC0]]  /u  8
; PEEL-NEXT:        [[VEC_TC0:%.*]] = [[TGU0]]  *  8
; PEEL-NEXT:        [[ADJ_TC250:%.*]] = [[VEC_TC0]]  +  [[PHI_TEMP0]]
; PEEL-NEXT:        [[TMP1:%.*]] = [[PHI_TEMP0]]  +  <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7>
; PEEL-NEXT:        [[LOOP_UB260:%.*]] = [[ADJ_TC250]]  -  1

; PEEL:             + DO i1 = [[PHI_TEMP0]], [[LOOP_UB260]], 8   <DO_LOOP>  <MAX_TC_EST = 536870911>  <LEGAL_MAX_TC = 536870911> <auto-vectorized> <nounroll> <novectorize>
; PEEL-NEXT:        |   [[DOTVEC270:%.*]] = (-1 * i1 + -1 * <i1 false, i1 true, i1 false, i1 true, i1 false, i1 true, i1 false, i1 true> == 0) ? i1 + <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7> : -1 * i1 + -1 * <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; PEEL-NEXT:        |   [[DOTVEC280:%.*]] = [[SEED0]] + [[DOTVEC270]]  [[U0]]  101
; PEEL-NEXT:        |   (<8 x i32>*)([[A0]])[i1] = [[DOTVEC280]]
; PEEL-NEXT:        + END LOOP

; PEEL:             [[IND_FINAL290:%.*]] = 0  +  [[ADJ_TC250]]
; PEEL-NEXT:        [[DOTVEC300:%.*]] = zext.i32.i64([[N0]]) == [[ADJ_TC250]]
; PEEL-NEXT:        [[PHI_TEMP90]] = [[IND_FINAL290]]
; PEEL-NEXT:        [[PHI_TEMP320:%.*]] = [[IND_FINAL290]]
; PEEL-NEXT:        [[EXTRACT_0_340:%.*]] = extractelement [[DOTVEC300]],  0
; PEEL-NEXT:        if ([[EXTRACT_0_340]] == 1)
; PEEL-NEXT:        {
; PEEL-NEXT:           goto final.merge.110
; PEEL-NEXT:        }
; PEEL-NEXT:        [[MERGE_BLK1]].45:
; PEEL-NEXT:        [[DOTVEC350:%.*]] = zext.i32.i64([[N0]])  -  [[PHI_TEMP90]]
; PEEL-NEXT:        [[EXTRACT_0_360:%.*]] = extractelement [[DOTVEC350]],  0
; PEEL-NEXT:        [[LOOP_UB370:%.*]] = [[EXTRACT_0_360]]  -  1

; PEEL:             + DO i1 = 0, [[LOOP_UB370]], 8   <DO_LOOP>  <MAX_TC_EST = 2>  <LEGAL_MAX_TC = 2> <vector-remainder> <nounroll> <novectorize> <max_trip_count = 2>
; PEEL-NEXT:        |   [[DOTVEC380:%.*]] = i1 + <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7> <u [[DOTVEC350]]
; PEEL-NEXT:        |   [[DOTVEC390:%.*]] = -1  *  i1 + [[PHI_TEMP90]] + <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7>
; PEEL-NEXT:        |   [[DOTSCAL400:%.*]] = -1  *  i1 + [[PHI_TEMP90]]
; PEEL-NEXT:        |   [[DOTVEC410:%.*]] = -1  *  i1 + [[PHI_TEMP90]] + <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7>
; PEEL-NEXT:        |   [[DOTSCAL420:%.*]] = -1  *  i1 + [[PHI_TEMP90]]
; PEEL-NEXT:        |   [[DOTVEC430:%.*]] = ([[DOTVEC390]] == 0) ? i1 + [[PHI_TEMP90]] + <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7> : [[DOTVEC410]]
; PEEL-NEXT:        |   [[DOTVEC440:%.*]] = [[SEED0]] + [[DOTVEC430]]  [[U0]]  101
; PEEL-NEXT:        |   (<8 x i32>*)([[A0]])[i1 + %phi.temp9] = [[DOTVEC440]], Mask = @{[[DOTVEC380]]}
; PEEL-NEXT:        |   [[DOTVEC450:%.*]] = i1 + <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7> + 8 <u [[DOTVEC350]]
; PEEL-NEXT:        |   [[TMP2:%.*]] = bitcast.<8 x i1>.i8([[DOTVEC450]])
; PEEL-NEXT:        |   [[CMP460:%.*]] = [[TMP2]] == 0
; PEEL-NEXT:        |   [[ALL_ZERO_CHECK470:%.*]] = [[CMP460]]
; PEEL-NEXT:        + END LOOP

; PEEL:             [[IND_FINAL480:%.*]] = 0  +  zext.i32.i64([[N0]])
; PEEL-NEXT:        [[PHI_TEMP320]] = [[IND_FINAL480]]
; PEEL-NEXT:        final.merge.110:
; PEEL-NEXT:  END REGION
;
; REM-LABEL: Function: init
; REM-EMPTY:
; REM-NEXT:  BEGIN REGION { modified }
; REM-NEXT:        [[TGU0:%.*]] = zext.i32.i64([[N0:%.*]])  /u  8
; REM-NEXT:        [[VEC_TC0:%.*]] = [[TGU0]]  *  8
; REM-NEXT:        [[DOTVEC0:%.*]] = 0 == [[VEC_TC0]]
; REM-NEXT:        [[PHI_TEMP0:%.*]] = 0
; REM-NEXT:        [[EXTRACT_0_0:%.*]] = extractelement [[DOTVEC0]],  0
; REM-NEXT:        if ([[EXTRACT_0_0]] == 1)
; REM-NEXT:        {
; REM-NEXT:           goto [[MERGE_BLK0:merge.blk[0-9]+]].28
; REM-NEXT:        }
; REM-NEXT:        [[TGU10:%.*]] = zext.i32.i64([[N0]])  /u  8
; REM-NEXT:        [[VEC_TC20:%.*]] = [[TGU10]]  *  8
; REM-NEXT:        [[LOOP_UB0:%.*]] = [[VEC_TC20]]  -  1

; REM:             + DO i1 = 0, [[LOOP_UB0]], 8   <DO_LOOP>  <MAX_TC_EST = 536870911>  <LEGAL_MAX_TC = 536870911> <auto-vectorized> <nounroll> <novectorize>
; REM-NEXT:        |   [[DOTVEC30:%.*]] = (-1 * i1 + -1 * <i1 false, i1 true, i1 false, i1 true, i1 false, i1 true, i1 false, i1 true> == 0) ? i1 + <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7> : -1 * i1 + -1 * <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; REM-NEXT:        |   [[DOTVEC40:%.*]] = [[SEED0:%.*]] + [[DOTVEC30]]  %u  101
; REM-NEXT:        |   (<8 x i32>*)([[A0:%.*]])[i1] = [[DOTVEC40]]
; REM-NEXT:        + END LOOP

; REM:             [[IND_FINAL0:%.*]] = 0  +  [[VEC_TC20]]
; REM-NEXT:        [[DOTVEC50:%.*]] = zext.i32.i64([[N0]]) == [[VEC_TC20]]
; REM-NEXT:        [[PHI_TEMP0]] = [[IND_FINAL0]]
; REM-NEXT:        [[PHI_TEMP70:%.*]] = [[IND_FINAL0]]
; REM-NEXT:        [[EXTRACT_0_90:%.*]] = extractelement [[DOTVEC50]],  0
; REM-NEXT:        if ([[EXTRACT_0_90]] == 1)
; REM-NEXT:        {
; REM-NEXT:           goto final.merge.52
; REM-NEXT:        }
; REM-NEXT:        [[MERGE_BLK0]].28:
; REM-NEXT:        [[DOTVEC100:%.*]] = zext.i32.i64([[N0]])  -  [[PHI_TEMP0]]
; REM-NEXT:        [[EXTRACT_0_110:%.*]] = extractelement [[DOTVEC100]],  0
; REM-NEXT:        [[LOOP_UB120:%.*]] = [[EXTRACT_0_110]]  -  1
; ===== "unrolled" (stripped) masked remainder loop
; REM-NEXT:        [[DOTVEC130:%.*]] = <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7> <u [[DOTVEC100]]
; REM-NEXT:        [[DOTVEC140:%.*]] = -1  *  [[PHI_TEMP0]] + <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7>
; REM-NEXT:        [[DOTSCAL0:%.*]] = -1  *  [[PHI_TEMP0]]
; REM-NEXT:        [[DOTVEC150:%.*]] = -1  *  [[PHI_TEMP0]] + <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7>
; REM-NEXT:        [[DOTSCAL160:%.*]] = -1  *  [[PHI_TEMP0]]
; REM-NEXT:        [[DOTVEC170:%.*]] = ([[DOTVEC140]] == 0) ? [[PHI_TEMP0]] + <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7> : [[DOTVEC150]]
; REM-NEXT:        [[DOTVEC180:%.*]] = [[SEED0]] + [[DOTVEC170]]  %u  101
; REM-NEXT:        (<8 x i32>*)([[A0]])[[[PHI_TEMP0]]] = [[DOTVEC180]], Mask = @{[[DOTVEC130]]}
; REM-NEXT:        [[DOTVEC190:%.*]] = <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7> + 8 <u [[DOTVEC100]]
; REM-NEXT:        [[TMP0:%.*]] = bitcast.<8 x i1>.i8([[DOTVEC190]])
; REM-NEXT:        [[CMP0:%.*]] = [[TMP0]] == 0
; REM-NEXT:        [[ALL_ZERO_CHECK0:%.*]] = [[CMP0]]
; REM-NEXT:        [[IND_FINAL200:%.*]] = 0  +  zext.i32.i64([[N0]])
; REM-NEXT:        [[PHI_TEMP70]] = [[IND_FINAL200]]
; REM-NEXT:        final.merge.52:
; REM-NEXT:  END REGION
entry:
  %cmp10.not = icmp eq i32 %n, 0
  br i1 %cmp10.not, label %for.end, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %0 = trunc i64 %indvars.iv to i32
  %rem = and i32 %0, 1
  %cmp1 = icmp eq i32 %rem, 0
  %1 = sub i32 0, %0
  %.p = select i1 %cmp1, i32 %0, i32 %1
  %2 = add i32 %.p, %seed
  %rem2 = urem i32 %2, 101
  %arrayidx = getelementptr inbounds i32, ptr %a, i64 %indvars.iv
  store i32 %rem2, ptr %arrayidx, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end.loopexit, label %for.body

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}

attributes #0 = {"unsafe-fp-math"="true" }
