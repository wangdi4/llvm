; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -vplan-print-terminator-inst=false < %s -S -hir-ssa-deconstruction -hir-temp-cleanup -hir-last-value-computation \
; RUN:     -hir-vec-dir-insert -VPlanDriverHIR -vplan-print-after-linearization -disable-output \
; RUN:     | FileCheck %s
;

; Test to verify predicator behavior for our hacky support of search loops
; vectorization. The main issue is that we don't merge loop exits nor perform
; linearization for such search loops. There is nothing specific in what this
; test aims for, more like documentation for what predicator is doing for such
; exceptional input.
;

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local i32 @_Z3fooiPKaPaa(i32 %n, i8* nocapture readonly %a, i8* nocapture readnone %b, i8 signext %val) local_unnamed_addr #0 {
; CHECK-LABEL:  VPlan after predication and linearization
; CHECK-NEXT:  External Defs Start:
; CHECK-DAG:     [[VP0:%.*]] = {sext.i32.i64(%n) + -1}
; CHECK-DAG:     [[VP1:%.*]] = {%val}
; CHECK-DAG:     [[VP2:%.*]] = {%a}
; CHECK-NEXT:  External Defs End:
; CHECK-NEXT:    [[BB0:BB[0-9]+]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB1:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB2:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]:
; CHECK-NEXT:     [DA: Uni] i64 [[VP3:%.*]] = phi  [ i64 0, [[BB1]] ],  [ i64 [[VP4:%.*]], [[BB3:BB[0-9]+]] ]
; CHECK-NEXT:     [DA: Uni] i8* [[VP5:%.*]] = subscript inbounds i8* [[A0:%.*]] i64 [[VP3]]
; CHECK-NEXT:     [DA: Uni] i8 [[VP6:%.*]] = load i8* [[VP5]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP7:%.*]] = icmp ne i8 [[VP6]] i8 [[VAL0:%.*]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP__NOT:%.*]] = not i1 [[VP7]]
; CHECK-NEXT:    SUCCESSORS(2):[[BB4:BB[0-9]+]](i1 [[VP7]]), [[BB5:BB[0-9]+]](!i1 [[VP7]])
; CHECK-NEXT:    PREDECESSORS(2): [[BB1]] [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB5]]:
; CHECK-NEXT:       [DA: Uni] i1 [[VP8:%.*]] = block-predicate i1 [[VP__NOT]]
; CHECK-NEXT:       [DA: Uni] i64 [[VP4]] = add i64 [[VP3]] i64 1
; CHECK-NEXT:       [DA: Uni] i1 [[VP9:%.*]] = icmp sle i64 [[VP4]] i64 [[VP0]]
; CHECK-NEXT:       [DA: Uni] i1 [[VP__NOT_1:%.*]] = not i1 [[VP9]]
; CHECK-NEXT:      SUCCESSORS(1):[[BB3]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB3]]:
; CHECK-NEXT:       [DA: Uni] i1 [[VP_BB6_BR_VP__NOT:%.*]] = and i1 [[VP__NOT]] i1 [[VP__NOT_1]]
; CHECK-NEXT:       Condition([[BB5]]): [DA: Uni] i1 [[VP9]] = icmp sle i64 [[VP4]] i64 [[VP0]]
; CHECK-NEXT:      SUCCESSORS(2):[[BB2]](i1 [[VP9]]), [[BB6:BB[0-9]+]](!i1 [[VP9]])
; CHECK-NEXT:      PREDECESSORS(1): [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB6]]:
; CHECK-NEXT:       [DA: Uni] i1 [[VP10:%.*]] = block-predicate i1 [[VP_BB6_BR_VP__NOT]]
; CHECK-NEXT:      SUCCESSORS(1):[[BB7:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB4]]:
; CHECK-NEXT:       [DA: Uni] i1 [[VP11:%.*]] = block-predicate i1 [[VP7]]
; CHECK-NEXT:       [DA: Uni] i64 [[VP12:%.*]] = hir-copy i64 [[VP3]] , OriginPhiId: -1
; CHECK-NEXT:       [DA: Uni] br cleanup.loopexit.split.loop.exit
; CHECK-NEXT:      SUCCESSORS(1):[[BB7]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB7]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB8:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB4]] [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB8]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB7]]
;
entry:
  %cmp8 = icmp sgt i32 %n, 0
  br i1 %cmp8, label %for.body.preheader, label %cleanup

for.body.preheader:                               ; preds = %entry
  %0 = sext i32 %n to i64
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.inc
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.inc ]
  %arrayidx = getelementptr inbounds i8, i8* %a, i64 %indvars.iv
  %1 = load i8, i8* %arrayidx, align 1, !tbaa !2
  %cmp2 = icmp eq i8 %1, %val
  br i1 %cmp2, label %for.inc, label %cleanup.loopexit.split.loop.exit

for.inc:                                          ; preds = %for.body
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %cmp = icmp slt i64 %indvars.iv.next, %0
  br i1 %cmp, label %for.body, label %cleanup.loopexit, !llvm.loop !5

cleanup.loopexit.split.loop.exit:                 ; preds = %for.body
  %indvars.iv.lcssa = phi i64 [ %indvars.iv, %for.body ]
  %2 = trunc i64 %indvars.iv.lcssa to i32
  br label %cleanup

cleanup.loopexit:                                 ; preds = %for.inc
  br label %cleanup

cleanup:                                          ; preds = %cleanup.loopexit, %cleanup.loopexit.split.loop.exit, %entry
  %index.0 = phi i32 [ -1, %entry ], [ %2, %cleanup.loopexit.split.loop.exit ], [ -1, %cleanup.loopexit ]
  ret i32 %index.0
}

attributes #0 = { norecurse nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "pre_loopopt" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 8.0.0 (ssh://git-amr-2.devtools.intel.com:29418/dpd_icl-clang 6d93f34e605c44d05e5c49346cf267f862c04f87) (ssh://git-amr-2.devtools.intel.com:29418/dpd_icl-llvm 89e0ade2ec1aea25dcf4f481a86a58a1ce934c50)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C++ TBAA"}
!5 = distinct !{!5, !6, !7}
!6 = !{!"llvm.loop.vectorize.ignore_profitability"}
!7 = !{!"llvm.loop.vectorize.enable", i1 true}
