; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt %s -S -passes=vplan-vec -vplan-force-vf=4 | FileCheck %s

; Test for registerized last private with explicit typed markings.

define i64 @foo(i64* nocapture %larr, i64* %mm) {
; CHECK-LABEL: @foo(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[M1:%.*]] = load i64, i64* [[MM:%.*]], align 4
; CHECK-NEXT:    [[MM_VEC:%.*]] = alloca <4 x i64>, align 32
; CHECK-NEXT:    [[MM_VEC_BC:%.*]] = bitcast <4 x i64>* [[MM_VEC]] to i64*
; CHECK-NEXT:    [[MM_VEC_BASE_ADDR:%.*]] = getelementptr i64, i64* [[MM_VEC_BC]], <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    br label [[B1:%.*]]
; CHECK:       b1:
; CHECK-NEXT:    br label [[VPLANNEDBB:%.*]]
; CHECK:       VPlannedBB:
; CHECK-NEXT:    br label [[VPLANNEDBB1:%.*]]
; CHECK:       VPlannedBB1:
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT15:%.*]] = insertelement <4 x i64> poison, i64 [[M1]], i64 0
; CHECK-NEXT:    [[BROADCAST_SPLAT16:%.*]] = shufflevector <4 x i64> [[BROADCAST_SPLATINSERT15]], <4 x i64> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK:       vector.body:
; CHECK-NEXT:    [[VEC_PHI:%.*]] = phi <4 x i64> [ <i64 -1, i64 -1, i64 -1, i64 -1>, [[VPLANNEDBB1]] ], [ [[PREDBLEND:%.*]], [[VPLANNEDBB6:%.*]] ]
; CHECK-NEXT:    [[UNI_PHI:%.*]] = phi i64 [ 0, [[VPLANNEDBB1]] ], [ [[TMP3:%.*]], [[VPLANNEDBB6]] ]
; CHECK-NEXT:    [[VEC_PHI3:%.*]] = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, [[VPLANNEDBB1]] ], [ [[TMP2:%.*]], [[VPLANNEDBB6]] ]
; CHECK-NEXT:    [[VEC_PHI4:%.*]] = phi <4 x i64> [ [[BROADCAST_SPLAT16]], [[VPLANNEDBB1]] ], [ [[PREDBLEND7:%.*]], [[VPLANNEDBB6]] ]
; CHECK-NEXT:    [[SCALAR_GEP:%.*]] = getelementptr inbounds i64, i64* [[LARR:%.*]], i64 [[UNI_PHI]]
; CHECK-NEXT:    [[TMP0:%.*]] = icmp eq <4 x i64> [[VEC_PHI3]], <i64 100, i64 100, i64 100, i64 100>
; CHECK-NEXT:    br label [[VPLANNEDBB5:%.*]]
; CHECK:       VPlannedBB5:
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast i64* [[SCALAR_GEP]] to <4 x i64>*
; CHECK-NEXT:    [[WIDE_MASKED_LOAD:%.*]] = call <4 x i64> @llvm.masked.load.v4i64.p0v4i64(<4 x i64>* [[TMP1]], i32 8, <4 x i1> [[TMP0]], <4 x i64> poison)
; CHECK-NEXT:    br label [[VPLANNEDBB6]]
; CHECK:       VPlannedBB6:
; CHECK-NEXT:    [[PREDBLEND]] = select <4 x i1> [[TMP0]], <4 x i64> [[VEC_PHI3]], <4 x i64> [[VEC_PHI]]
; CHECK-NEXT:    [[PREDBLEND7]] = select <4 x i1> [[TMP0]], <4 x i64> [[WIDE_MASKED_LOAD]], <4 x i64> [[VEC_PHI4]]
; CHECK-NEXT:    [[TMP2]] = add nuw nsw <4 x i64> [[VEC_PHI3]], <i64 4, i64 4, i64 4, i64 4>
; CHECK-NEXT:    [[TMP3]] = add nuw nsw i64 [[UNI_PHI]], 4
; CHECK-NEXT:    [[TMP4:%.*]] = icmp uge i64 [[TMP3]], 100
; CHECK-NEXT:    br i1 [[TMP4]], label [[VPLANNEDBB8:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK:       VPlannedBB8:
; CHECK-NEXT:    [[TMP5:%.*]] = icmp ne <4 x i64> [[PREDBLEND]], <i64 -1, i64 -1, i64 -1, i64 -1>
; CHECK-NEXT:    [[TMP6:%.*]] = bitcast <4 x i1> [[TMP5]] to i4
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i4 [[TMP6]], 0
; CHECK-NEXT:    br i1 [[TMP7]], label [[VPLANNEDBB9:%.*]], label [[VPLANNEDBB10:%.*]]
; CHECK:       VPlannedBB10:
; CHECK-NEXT:    [[TMP8:%.*]] = call i64 @llvm.vector.reduce.smax.v4i64(<4 x i64> [[PREDBLEND]])
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <4 x i64> poison, i64 [[TMP8]], i64 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <4 x i64> [[BROADCAST_SPLATINSERT]], <4 x i64> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    [[PRIV_IDX_CMP:%.*]] = icmp eq <4 x i64> [[PREDBLEND]], [[BROADCAST_SPLAT]]
; CHECK-NEXT:    [[TMP9:%.*]] = bitcast <4 x i1> [[PRIV_IDX_CMP]] to i4
; CHECK-NEXT:    [[CTTZ:%.*]] = call i4 @llvm.cttz.i4(i4 [[TMP9]], i1 true)
; CHECK-NEXT:    [[PRIV_EXTRACT:%.*]] = extractelement <4 x i64> [[PREDBLEND7]], i4 [[CTTZ]]
; CHECK-NEXT:    br label [[VPLANNEDBB9]]
; CHECK:       VPlannedBB9:
; CHECK-NEXT:    [[UNI_PHI11:%.*]] = phi i64 [ [[M1]], [[VPLANNEDBB8]] ], [ [[PRIV_EXTRACT]], [[VPLANNEDBB10]] ]
; CHECK-NEXT:    br label [[VPLANNEDBB12:%.*]]
; CHECK:       VPlannedBB12:
; CHECK-NEXT:    br label [[FINAL_MERGE:%.*]]
; CHECK:       final.merge:
; CHECK-NEXT:    [[UNI_PHI13:%.*]] = phi i64 [ [[UNI_PHI11]], [[VPLANNEDBB12]] ]
; CHECK-NEXT:    [[UNI_PHI14:%.*]] = phi i64 [ 100, [[VPLANNEDBB12]] ]
; CHECK-NEXT:    br label [[FOR_END:%.*]]
; CHECK:       for.end:
; CHECK-NEXT:    [[LCSSA_MERGE:%.*]] = phi i64 [ [[UNI_PHI13]], [[FINAL_MERGE]] ]
; CHECK-NEXT:    store i64 [[LCSSA_MERGE]], i64* [[MM]], align 4
; CHECK-NEXT:    ret i64 [[LCSSA_MERGE]]
;
entry:
  %m1 = load i64, i64* %mm
  br label %b1

b1:
  %entry.region = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.LASTPRIVATE:TYPED"(i64* %mm, i64 0, i32 1) ]
  br label %for.body

for.body:
  %l1.010 = phi i64 [ 0, %b1 ], [ %inc, %else ]
  %priv_phi = phi i64 [ %m1, %b1 ], [ %merge, %else ]
  %arrayidx = getelementptr inbounds i64, i64* %larr, i64 %l1.010
  %cmp = icmp eq i64 %l1.010, 100
  br i1 %cmp, label %then, label %else

then:
  %0 = load i64, i64* %arrayidx, align 8
  br label %else

else:
  %merge = phi i64 [ %priv_phi, %for.body ], [ %0, %then ]
  %inc = add nuw nsw i64 %l1.010, 1
  %exitcond = icmp eq i64 %inc, 100
  br i1 %exitcond, label %for.end, label %for.body

for.end:
  %lcssa.merge =  phi i64 [%merge, %else]
  store i64 %lcssa.merge, i64* %mm
  call void @llvm.directive.region.exit(token %entry.region) [ "DIR.OMP.END.SIMD"() ]
  ret i64 %lcssa.merge
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
