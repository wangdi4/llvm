; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py

; This test makes sure that the DA algorithm properly handles floating-point inductions.

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; RUN: opt -VPlanDriver -vplan-build-stress-only-innermost -loopopt=0 \
; RUN: -vpo-vplan-build-stress-test -vplan-dump-da -disable-output \
; RUN: %s 2>&1 | FileCheck %s

; REQUIRES:asserts

define void @test_uniform_edge_to_divergent_block() {
;
; CHECK:       Printing Divergence info for Loop at depth 1 containing: [[BB0:BB[0-9]+]]<header>,[[BB1:BB[0-9]+]]<latch><exiting>
; CHECK-EMPTY:
; CHECK-NEXT:  Basic Block: [[BB0]]
; CHECK-NEXT:  Uniform: [Shape: Uniform] i64 [[VP_VECTOR_LOOP_IV:%.*]] = phi  [ i64 0, [[BB2:BB[0-9]+]] ],  [ i64 [[VP_VECTOR_LOOP_IV_NEXT:%.*]], [[BB1]] ]
; CHECK-NEXT:  Divergent: [Shape: Random] double [[VP_IV:%.*]] = phi  [ double [[VP_IV_IND_INIT:%.*]], [[BB2]] ],  [ double [[VP_IV_NEXT:%.*]], [[BB1]] ]
; CHECK-EMPTY:
; CHECK-NEXT:  Basic Block: [[BB1]]
; CHECK-NEXT:  Divergent: [Shape: Random] double [[VP_IV_NEXT]] = fadd double [[VP_IV]] double [[VP_IV_IND_INIT_STEP:%.*]]
; CHECK-NEXT:  Uniform: [Shape: Uniform] i64 [[VP_VECTOR_LOOP_IV_NEXT]] = add i64 [[VP_VECTOR_LOOP_IV]] i64 [[VP_VF:%.*]]
; CHECK-NEXT:  Uniform: [Shape: Uniform] i1 [[VP_VECTOR_LOOP_EXITCOND:%.*]] = icmp i64 [[VP_VECTOR_LOOP_IV_NEXT]] i64 [[VP_VECTOR_TRIP_COUNT:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  Basic Block: [[BB3:BB[0-9]+]]
; CHECK-NEXT:  Uniform: [Shape: Uniform] double [[VP_IV_IND_FINAL:%.*]] = induction-final{fadd} double live-in0 double 1.000000e+00
; CHECK-EMPTY:
; CHECK-NEXT:  Basic Block: [[BB4:BB[0-9]+]]
;
entry:
  br label %for.body
for.body:
  %iv = phi double [ -2.000000e+00, %entry ], [ %iv.next, %latch ]
  br label %latch
latch:
  %iv.next = fadd double %iv, 1.000000e+00
  %exitcond = fcmp olt double %iv.next, 2.500000e+00
  br i1 %exitcond, label %for.end, label %for.body

for.end:
  ret void
}
