; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py

; Test merge loop exits transformation when the inner loop has one side exit.

; RUN: opt < %s -passes="vplan-func-vec" -disable-output -print-after-vplan-func-vec-loop-exit-canon | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define void @main() {
; CHECK-LABEL:  VPlan IR for: main
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     i32 [[VP_LANE:%.*]] = induction-init{add} i32 0 i32 1
; CHECK-NEXT:     br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]], [[NEW_LOOP_LATCH0:new.loop.latch[0-9]+]]
; CHECK-NEXT:     i32 [[VP_IV:%.*]] = phi  [ i32 0, [[BB0]] ],  [ i32 [[VP_IV_NEXT:%.*]], [[NEW_LOOP_LATCH0]] ]
; CHECK-NEXT:     i32 [[VP_IV_NEXT]] = add i32 [[VP_IV]] i32 1
; CHECK-NEXT:     i1 [[VP_CMP1:%.*]] = icmp eq i32 [[VP_IV]] i32 [[VP_LANE]]
; CHECK-NEXT:     br i1 [[VP_CMP1]], [[BB2:BB[0-9]+]], [[INTERMEDIATE_BB0:intermediate.bb[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[INTERMEDIATE_BB0]]: # preds: [[BB1]]
; CHECK-NEXT:       br [[NEW_LOOP_LATCH0]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB2]]: # preds: [[BB1]]
; CHECK-NEXT:       i1 [[VP_BOTTOM_TEST:%.*]] = icmp ne i32 [[VP_IV_NEXT]] i32 128
; CHECK-NEXT:       br [[NEW_LOOP_LATCH0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[NEW_LOOP_LATCH0]]: # preds: [[BB2]], [[INTERMEDIATE_BB0]]
; CHECK-NEXT:     i32 [[VP_EXIT_ID_PHI:%.*]] = phi  [ i32 0, [[BB2]] ],  [ i32 1, [[INTERMEDIATE_BB0]] ]
; CHECK-NEXT:     i1 [[VP_TAKE_BACKEDGE_COND:%.*]] = phi  [ i1 [[VP_BOTTOM_TEST]], [[BB2]] ],  [ i1 false, [[INTERMEDIATE_BB0]] ]
; CHECK-NEXT:     br i1 [[VP_TAKE_BACKEDGE_COND]], [[BB1]], [[CASCADED_IF_BLOCK0:cascaded.if.block[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[CASCADED_IF_BLOCK0]]: # preds: [[NEW_LOOP_LATCH0]]
; CHECK-NEXT:     i1 [[VP0:%.*]] = icmp eq i32 [[VP_EXIT_ID_PHI]] i32 1
; CHECK-NEXT:     br i1 [[VP0]], [[BB3:BB[0-9]+]], [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB4]]: # preds: [[CASCADED_IF_BLOCK0]]
; CHECK-NEXT:       br [[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB3]]: # preds: [[CASCADED_IF_BLOCK0]]
; CHECK-NEXT:       br [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]: # preds: [[BB3]], [[BB4]]
; CHECK-NEXT:     ret
; CHECK-NEXT:     br <External Block>
;
entry:
  %lane = call i32 @llvm.vplan.laneid()
  br label %header

header:
  %iv = phi i32 [ 0, %entry ], [ %iv.next, %latch ]
  %iv.next = add nsw i32 %iv, 1
  %cmp1 = icmp eq i32 %iv, %lane
  br i1 %cmp1, label %latch, label %exit_bb1

latch:
  %bottom_test = icmp ne i32 %iv.next, 128
  br i1 %bottom_test, label %header, label %exit_bb2

exit_bb1:
  br label %end

exit_bb2:
  br label %end

end:
  ret void
}

declare i32 @llvm.vplan.laneid()
