; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -S -VPlanDriver -vplan-force-vf=2 -vplan-print-after-create-masked-vplan -vplan-enable-masked-variant < %s -disable-output | FileCheck %s

; Check if the masked variant is generated for a simple nested loop.

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define void @main(i32 %inner.tc, i32 %outer.tc) {
; CHECK-LABEL:  VPlan after emitting masked variant:
; CHECK-NEXT:  VPlan IR for: main:outer.header.cloned.masked
; CHECK-NEXT:    Cloned.[[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] br Cloned.[[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    Cloned.[[BB1]]: # preds: Cloned.[[BB0]]
; CHECK-NEXT:     [DA: Div] i32 [[VP0:%.*]] = induction-init{add} i32 live-in0 i32 1
; CHECK-NEXT:     [DA: Uni] i32 [[VP1:%.*]] = induction-init-step{add} i32 1
; CHECK-NEXT:     [DA: Uni] i32 [[VP2:%.*]] = vector-trip-count i32 [[OUTER_TC0:%.*]], UF = 1
; CHECK-NEXT:     [DA: Uni] br Cloned.[[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    Cloned.[[BB2]]: # preds: Cloned.[[BB1]], new_latch
; CHECK-NEXT:     [DA: Div] i32 [[VP_OUTER_IV:%.*]] = phi  [ i32 [[VP0]], Cloned.[[BB1]] ],  [ i32 [[VP_OUTER_IV_NEXT:%.*]], new_latch ]
; CHECK-NEXT:     [DA: Div] i1 [[VP_OUTER_BOTTOM_TEST:%.*]] = icmp eq i32 [[VP_OUTER_IV]] i32 [[VP2]]
; CHECK-NEXT:     [DA: Div] br i1 [[VP_OUTER_BOTTOM_TEST]], [[BB3:BB[0-9]+]], new_latch
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB3]]: # preds: Cloned.[[BB2]]
; CHECK-NEXT:       [DA: Uni] br Cloned.[[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      Cloned.[[BB4]]: # preds: Cloned.[[BB5:BB[0-9]+]], [[BB3]]
; CHECK-NEXT:       [DA: Uni] i32 [[VP_INNER_IV:%.*]] = phi  [ i32 0, [[BB3]] ],  [ i32 [[VP_INNER_IV_NEXT:%.*]], Cloned.[[BB5]] ]
; CHECK-NEXT:       [DA: Uni] i32 [[VP_INNER_IV_NEXT]] = add i32 [[VP_INNER_IV]] i32 1
; CHECK-NEXT:       [DA: Uni] br Cloned.[[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:      Cloned.[[BB5]]: # preds: Cloned.[[BB4]]
; CHECK-NEXT:       [DA: Uni] i1 [[VP_INNER_BOTTOM_TEST:%.*]] = icmp eq i32 [[VP_INNER_IV_NEXT]] i32 [[INNER_TC0:%.*]]
; CHECK-NEXT:       [DA: Uni] br i1 [[VP_INNER_BOTTOM_TEST]], Cloned.[[BB6:BB[0-9]+]], Cloned.[[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:      Cloned.[[BB6]]: # preds: Cloned.[[BB5]]
; CHECK-NEXT:       [DA: Uni] br new_latch
; CHECK-EMPTY:
; CHECK-NEXT:    new_latch: # preds: Cloned.[[BB6]], Cloned.[[BB2]]
; CHECK-NEXT:     [DA: Div] i32 [[VP_OUTER_IV_NEXT]] = add i32 [[VP_OUTER_IV]] i32 [[VP1]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP_OUTER_BOTTOM_TEST_1:%.*]] = icmp eq i32 [[VP_OUTER_IV_NEXT]] i32 [[VP2]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP_OUTER_BOTTOM_TEST_1]], Cloned.[[BB7:BB[0-9]+]], Cloned.[[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    Cloned.[[BB7]]: # preds: new_latch
; CHECK-NEXT:     [DA: Uni] i32 [[VP3:%.*]] = induction-final{add} i32 live-in0 i32 1
; CHECK-NEXT:     [DA: Uni] br Cloned.[[BB8:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    Cloned.[[BB8]]: # preds: Cloned.[[BB7]]
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   no underlying for i32 [[VP3]]
;
entry:
  br label %preheader

preheader:
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %outer.header

outer.header:
  %outer.iv = phi i32 [ 0, %preheader ], [ %outer.iv.next, %outer.latch ]
  %outer.iv.next = add nsw i32 %outer.iv, 1
  br label %inner.header

inner.header:
  %inner.iv = phi i32 [ 0, %outer.header ], [ %inner.iv.next, %inner.latch ]
  %inner.iv.next = add nsw i32 %inner.iv, 1
  br label %inner.latch

inner.latch:
  %inner.bottom.test = icmp eq i32 %inner.iv.next, %inner.tc
  br i1 %inner.bottom.test, label %outer.latch, label %inner.header

outer.latch:
  %outer.bottom.test = icmp eq i32 %outer.iv.next, %outer.tc
  br i1 %outer.bottom.test, label %loopexit, label %outer.header

loopexit:
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %exit

exit:
  ret void
}

declare token @llvm.directive.region.entry() nounwind
declare void @llvm.directive.region.exit(token) nounwind
