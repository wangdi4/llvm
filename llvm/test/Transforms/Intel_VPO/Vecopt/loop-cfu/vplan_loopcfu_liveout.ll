; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; REQUIRES: asserts

; RUN: opt -opaque-pointers=0 -S -passes="vplan-func-vec" -print-after-vplan-func-vec-loop-cfu < %s -disable-output | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@A = common local_unnamed_addr global [100 x [100 x i64]] zeroinitializer, align 16

define dso_local void @foo(i64 %N, i64 *%a, i64 %mask_out_loop) local_unnamed_addr {
; CHECK-LABEL:  VPlan IR for: foo
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Div] i64 [[VP_LANE:%.*]] = induction-init{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Div] i1 [[VP_SKIP_LOOP:%.*]] = icmp eq i64 [[VP_LANE]] i64 [[MASK_OUT_LOOP0:%.*]]
; CHECK-NEXT:     [DA: Div] br i1 [[VP_SKIP_LOOP]], [[BB1:BB[0-9]+]], [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB2]]: # preds: [[BB0]]
; CHECK-NEXT:       [DA: Div] i1 [[VP_CMP216:%.*]] = icmp eq i64 [[VP_LANE]] i64 0
; CHECK-NEXT:       [DA: Div] i1 [[VP_CMP216_NOT:%.*]] = not i1 [[VP_CMP216]]
; CHECK-NEXT:       [DA: Div] br i1 [[VP_CMP216]], [[BB1]], [[BB3:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB3]]: # preds: [[BB2]]
; CHECK-NEXT:       [DA: Uni] br [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB4]]: # preds: [[BB3]], [[BB5:BB[0-9]+]]
; CHECK-NEXT:       [DA: Uni] i64 [[VP_IV:%.*]] = phi  [ i64 [[VP_IV_NEXT:%.*]], [[BB5]] ],  [ i64 0, [[BB3]] ]
; CHECK-NEXT:       [DA: Div] i1 [[VP_LOOP_MASK:%.*]] = phi  [ i1 [[VP_CMP216_NOT]], [[BB3]] ],  [ i1 [[VP_LOOP_MASK_NEXT:%.*]], [[BB5]] ]
; CHECK-NEXT:       [DA: Div] i64 [[VP_IV_LIVE_OUT_PREV:%.*]] = phi  [ i64 undef, [[BB3]] ],  [ i64 [[VP_IV_LIVE_OUT_BLEND:%.*]], [[BB5]] ]
; CHECK-NEXT:       [DA: Div] i1 [[VP_SOME_CMP_LIVE_OUT_PREV:%.*]] = phi  [ i1 undef, [[BB3]] ],  [ i1 [[VP_SOME_CMP_LIVE_OUT_BLEND:%.*]], [[BB5]] ]
; CHECK-NEXT:       [DA: Div] br i1 [[VP_LOOP_MASK]], [[BB6:BB[0-9]+]], [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB6]]: # preds: [[BB4]]
; CHECK-NEXT:         [DA: Uni] i64* [[VP_ARRAYIDX:%.*]] = getelementptr inbounds i64* [[A0:%.*]] i64 [[VP_IV]]
; CHECK-NEXT:         [DA: Uni] i64 [[VP_LD:%.*]] = load i64* [[VP_ARRAYIDX]]
; CHECK-NEXT:         [DA: Uni] i1 [[VP_SOME_CMP:%.*]] = icmp eq i64 [[VP_LD]] i64 42
; CHECK-NEXT:         [DA: Uni] i64 [[VP_IV_NEXT]] = add i64 [[VP_IV]] i64 1
; CHECK-NEXT:         [DA: Div] i1 [[VP_EXITCOND:%.*]] = icmp eq i64 [[VP_IV_NEXT]] i64 [[VP_LANE]]
; CHECK-NEXT:         [DA: Uni] br [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB5]]: # preds: [[BB6]], [[BB4]]
; CHECK-NEXT:       [DA: Div] i64 [[VP_IV_LIVE_OUT_BLEND]] = select i1 [[VP_LOOP_MASK]] i64 [[VP_IV]] i64 [[VP_IV_LIVE_OUT_PREV]]
; CHECK-NEXT:       [DA: Div] i1 [[VP_SOME_CMP_LIVE_OUT_BLEND]] = select i1 [[VP_LOOP_MASK]] i1 [[VP_SOME_CMP]] i1 [[VP_SOME_CMP_LIVE_OUT_PREV]]
; CHECK-NEXT:       [DA: Div] i1 [[VP_EXITCOND_NOT:%.*]] = not i1 [[VP_EXITCOND]]
; CHECK-NEXT:       [DA: Div] i1 [[VP_LOOP_MASK_NEXT]] = select i1 [[VP_LOOP_MASK]] i1 [[VP_EXITCOND_NOT]] i1 false
; CHECK-NEXT:       [DA: Uni] i1 [[VP0:%.*]] = all-zero-check i1 [[VP_LOOP_MASK_NEXT]]
; CHECK-NEXT:       [DA: Uni] br i1 [[VP0]], [[BB7:BB[0-9]+]], [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB7]]: # preds: [[BB5]]
; CHECK-NEXT:       [DA: Div] i64 [[VP_PHI_USE:%.*]] = phi  [ i64 [[VP_IV_LIVE_OUT_BLEND]], [[BB5]] ]
; CHECK-NEXT:       [DA: Div] i1 [[VP_NO_PHI_INST_USE:%.*]] = phi  [ i1 [[VP_SOME_CMP_LIVE_OUT_BLEND]], [[BB5]] ]
; CHECK-NEXT:       [DA: Div] i64 [[VP_IV_NEXT_1:%.*]] = add i64 [[VP_PHI_USE]] i64 1
; CHECK-NEXT:       [DA: Uni] br [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]], [[BB2]], [[BB7]]
; CHECK-NEXT:     [DA: Div] ret
; CHECK-NEXT:     [DA: Uni] br <External Block>
;
entry:
  %lane = call i64 @llvm.vplan.laneid()
  %skip_loop = icmp eq i64 %lane, %mask_out_loop
  br i1 %skip_loop, label %exit, label %top_test

top_test:
  %cmp216 = icmp eq i64 %lane, 0
  br i1 %cmp216, label %exit, label %preheader

preheader:
  br label %header

header:
  %iv = phi i64 [ %iv.next, %header ], [ 0, %preheader ]
  %arrayidx = getelementptr inbounds i64, i64* %a, i64 %iv
  %ld = load i64, i64* %arrayidx
  %some_cmp = icmp eq i64 %ld, 42
  %iv.next = add nuw nsw i64 %iv, 1
  %exitcond = icmp eq i64 %iv.next, %lane
  br i1 %exitcond, label %loopexit, label %header

loopexit:
  %phi_use = phi i64 [ %iv, %header ]
  %phi_update_use = phi i64 [ %iv.next, %header ]
  %no_phi_inst_use = phi i1 [%some_cmp, %header ]
  br label %exit

exit:
  ret void
}

declare i64 @llvm.vplan.laneid()
