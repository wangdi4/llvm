; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; Test inner loop control flow uniformity where inner loop exit condition is divergent memory reference.

; REQUIRES: asserts

; RUN: opt -S -passes="vplan-func-vec" -print-after-vplan-func-vec-loop-cfu < %s -disable-output | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"


@A = common local_unnamed_addr global [100 x [100 x i64]] zeroinitializer, align 16

define dso_local void @foo(i64 %N, ptr nocapture readonly %lb, ptr nocapture readonly %ub) local_unnamed_addr {
; CHECK-LABEL:  VPlan IR for: foo
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Div] i64 [[VP_LANE:%.*]] = induction-init{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Div] ptr [[VP_ARRAYIDX:%.*]] = getelementptr inbounds i64, ptr [[LB0:%.*]] i64 [[VP_LANE]]
; CHECK-NEXT:     [DA: Div] i64 [[VP0:%.*]] = load ptr [[VP_ARRAYIDX]]
; CHECK-NEXT:     [DA: Div] ptr [[VP_ARRAYIDX2:%.*]] = getelementptr inbounds i64, ptr [[UB0:%.*]] i64 [[VP_LANE]]
; CHECK-NEXT:     [DA: Div] i64 [[VP1:%.*]] = load ptr [[VP_ARRAYIDX2]]
; CHECK-NEXT:     [DA: Div] i1 [[VP_TOPTEST:%.*]] = icmp slt i64 [[VP0]] i64 [[VP1]]
; CHECK-NEXT:     [DA: Div] br i1 [[VP_TOPTEST]], [[BB1:BB[0-9]+]], [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:       [DA: Uni] br [[BB3:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB3]]: # preds: [[BB1]], [[BB4:BB[0-9]+]]
; CHECK-NEXT:       [DA: Div] i64 [[VP_IV:%.*]] = phi  [ i64 [[VP_IV_NEXT:%.*]], [[BB4]] ],  [ i64 [[VP0]], [[BB1]] ]
; CHECK-NEXT:       [DA: Div] i1 [[VP_LOOP_MASK:%.*]] = phi  [ i1 [[VP_TOPTEST]], [[BB1]] ],  [ i1 [[VP_LOOP_MASK_NEXT:%.*]], [[BB4]] ]
; CHECK-NEXT:       [DA: Div] br i1 [[VP_LOOP_MASK]], [[BB5:BB[0-9]+]], [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB5]]: # preds: [[BB3]]
; CHECK-NEXT:         [DA: Div] i64 [[VP_SHL:%.*]] = shl i64 [[VP_IV]] i64 3
; CHECK-NEXT:         [DA: Div] ptr [[VP_ARRAYIDX6:%.*]] = getelementptr inbounds [100 x [100 x i64]], ptr @A i64 0 i64 [[VP_IV]] i64 [[VP_LANE]]
; CHECK-NEXT:         [DA: Div] store i64 [[VP_SHL]] ptr [[VP_ARRAYIDX6]]
; CHECK-NEXT:         [DA: Div] i64 [[VP_IV_NEXT]] = add i64 [[VP_IV]] i64 1
; CHECK-NEXT:         [DA: Div] i64 [[VP2:%.*]] = load ptr [[VP_ARRAYIDX2]]
; CHECK-NEXT:         [DA: Div] i1 [[VP_CONTINUE_COND:%.*]] = icmp slt i64 [[VP_IV_NEXT]] i64 [[VP2]]
; CHECK-NEXT:         [DA: Uni] br [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB4]]: # preds: [[BB5]], [[BB3]]
; CHECK-NEXT:       [DA: Div] i1 [[VP_LOOP_MASK_NEXT]] = select i1 [[VP_LOOP_MASK]] i1 [[VP_CONTINUE_COND]] i1 false
; CHECK-NEXT:       [DA: Uni] i1 [[VP3:%.*]] = all-zero-check i1 [[VP_LOOP_MASK_NEXT]]
; CHECK-NEXT:       [DA: Uni] br i1 [[VP3]], [[BB6:BB[0-9]+]], [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB6]]: # preds: [[BB4]]
; CHECK-NEXT:       [DA: Uni] br [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB0]], [[BB6]]
; CHECK-NEXT:     [DA: Div] ret
; CHECK-NEXT:     [DA: Uni] br <External Block>
;
entry:
  %lane = call i64 @llvm.vplan.laneid()
  %arrayidx = getelementptr inbounds i64, ptr %lb, i64 %lane
  %0 = load i64, ptr %arrayidx, align 8
  %arrayidx2 = getelementptr inbounds i64, ptr %ub, i64 %lane
  %1 = load i64, ptr %arrayidx2, align 8
  %toptest = icmp slt i64 %0, %1
  br i1 %toptest, label %preheader, label %exit

preheader:
  br label %header

header:
  %iv = phi i64 [ %iv.next, %header ], [ %0, %preheader ]
  %shl = shl i64 %iv, 3
  %arrayidx6 = getelementptr inbounds [100 x [100 x i64]], ptr @A, i64 0, i64 %iv, i64 %lane
  store i64 %shl, ptr %arrayidx6, align 8
  %iv.next = add nsw i64 %iv, 1
  %2 = load i64, ptr %arrayidx2, align 8
  %continue.cond = icmp slt i64 %iv.next, %2
  br i1 %continue.cond, label %header, label %loop.exit

loop.exit:
  br label %exit

exit:
  ret void
}

declare i64 @llvm.vplan.laneid()
