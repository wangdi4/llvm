; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; Test inner loop control flow uniformity where inner loop is a while loop with loop index.

; REQUIRES: asserts

; RUN: opt -S -passes="vplan-func-vec" -print-after-vplan-func-vec-loop-cfu < %s -disable-output | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@A = common local_unnamed_addr global [100 x [100 x i64]] zeroinitializer, align 16

define dso_local void @foo(i32** nocapture readonly %a, i32 %m, i32* nocapture readonly %ub, i32 %k) local_unnamed_addr {
; CHECK-LABEL:  VPlan IR for: foo
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Div] i64 [[VP_LANE:%.*]] = induction-init{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Div] i32* [[VP_ARRAYIDX:%.*]] = getelementptr inbounds i32* [[UB0:%.*]] i64 [[VP_LANE]]
; CHECK-NEXT:     [DA: Div] i32 [[VP0:%.*]] = load i32* [[VP_ARRAYIDX]]
; CHECK-NEXT:     [DA: Div] i1 [[VP_TOPTEST:%.*]] = icmp slt i32 [[VP0]] i32 0
; CHECK-NEXT:     [DA: Div] i1 [[VP_TOPTEST_NOT:%.*]] = not i1 [[VP_TOPTEST]]
; CHECK-NEXT:     [DA: Div] br i1 [[VP_TOPTEST]], [[BB1:BB[0-9]+]], [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB2]]: # preds: [[BB0]]
; CHECK-NEXT:       [DA: Div] i32 [[VP1:%.*]] = trunc i64 [[VP_LANE]] to i32
; CHECK-NEXT:       [DA: Uni] br [[BB3:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB3]]: # preds: [[BB2]], [[BB4:BB[0-9]+]]
; CHECK-NEXT:       [DA: Uni] i64 [[VP_IV:%.*]] = phi  [ i64 0, [[BB2]] ],  [ i64 [[VP_IV_NEXT:%.*]], [[BB4]] ]
; CHECK-NEXT:       [DA: Div] i32 [[VP2:%.*]] = phi  [ i32 [[VP0]], [[BB2]] ],  [ i32 [[VP3:%.*]], [[BB4]] ]
; CHECK-NEXT:       [DA: Div] i1 [[VP_LOOP_MASK:%.*]] = phi  [ i1 [[VP_TOPTEST_NOT]], [[BB2]] ],  [ i1 [[VP_LOOP_MASK_NEXT:%.*]], [[BB4]] ]
; CHECK-NEXT:       [DA: Div] br i1 [[VP_LOOP_MASK]], [[BB5:BB[0-9]+]], [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB5]]: # preds: [[BB3]]
; CHECK-NEXT:         [DA: Div] i32 [[VP_MUL:%.*]] = mul i32 [[VP2]] i32 [[VP1]]
; CHECK-NEXT:         [DA: Uni] i32** [[VP_ARRAYIDX5:%.*]] = getelementptr inbounds i32** [[A0:%.*]] i64 [[VP_IV]]
; CHECK-NEXT:         [DA: Uni] i32* [[VP4:%.*]] = load i32** [[VP_ARRAYIDX5]]
; CHECK-NEXT:         [DA: Div] i32* [[VP_ARRAYIDX7:%.*]] = getelementptr inbounds i32* [[VP4]] i64 [[VP_LANE]]
; CHECK-NEXT:         [DA: Div] store i32 [[VP_MUL]] i32* [[VP_ARRAYIDX7]]
; CHECK-NEXT:         [DA: Uni] i64 [[VP_IV_NEXT]] = add i64 [[VP_IV]] i64 1
; CHECK-NEXT:         [DA: Div] i32 [[VP3]] = load i32* [[VP_ARRAYIDX]]
; CHECK-NEXT:         [DA: Div] i64 [[VP5:%.*]] = sext i32 [[VP3]] to i64
; CHECK-NEXT:         [DA: Div] i1 [[VP_CONTINUE_COND:%.*]] = icmp slt i64 [[VP_IV]] i64 [[VP5]]
; CHECK-NEXT:         [DA: Uni] br [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB4]]: # preds: [[BB5]], [[BB3]]
; CHECK-NEXT:       [DA: Div] i1 [[VP_LOOP_MASK_NEXT]] = select i1 [[VP_LOOP_MASK]] i1 [[VP_CONTINUE_COND]] i1 false
; CHECK-NEXT:       [DA: Uni] i1 [[VP6:%.*]] = all-zero-check i1 [[VP_LOOP_MASK_NEXT]]
; CHECK-NEXT:       [DA: Uni] br i1 [[VP6]], [[BB6:BB[0-9]+]], [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB6]]: # preds: [[BB4]]
; CHECK-NEXT:       [DA: Uni] br [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]], [[BB6]]
; CHECK-NEXT:     [DA: Div] ret
; CHECK-NEXT:     [DA: Uni] br <External Block>
;
entry:
  %lane = call i64 @llvm.vplan.laneid()
  %arrayidx = getelementptr inbounds i32, i32* %ub, i64 %lane
  %0 = load i32, i32* %arrayidx, align 4
  %toptest = icmp slt i32 %0, 0
  br i1 %toptest, label %exit, label %preheader

preheader:
  %1 = trunc i64 %lane to i32
  br label %header

header:
  %iv = phi i64 [ 0, %preheader ], [ %iv.next, %header ]
  %2 = phi i32 [ %0, %preheader ], [ %4, %header ]
  %mul = mul nsw i32 %2, %1
  %arrayidx5 = getelementptr inbounds i32*, i32** %a, i64 %iv
  %3 = load i32*, i32** %arrayidx5, align 8
  %arrayidx7 = getelementptr inbounds i32, i32* %3, i64 %lane
  store i32 %mul, i32* %arrayidx7, align 4
  %iv.next = add nuw nsw i64 %iv, 1
  %4 = load i32, i32* %arrayidx, align 4
  %5 = sext i32 %4 to i64
  %continue.cond = icmp slt i64 %iv, %5
  br i1 %continue.cond, label %header, label %loop.exit

loop.exit:
  br label %exit

exit:
  ret void
}

declare i64 @llvm.vplan.laneid()
