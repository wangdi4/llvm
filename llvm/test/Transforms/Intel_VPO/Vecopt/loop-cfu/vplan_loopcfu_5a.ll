; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; Test inner loop control flow uniformity for do/while loop without loop index.

; REQUIRES: asserts

; RUN: opt -S -passes="vplan-func-vec" -print-after-vplan-func-vec-loop-cfu < %s -disable-output | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@A = common local_unnamed_addr global [100 x [100 x i64]] zeroinitializer, align 16

define dso_local void @foo(ptr nocapture %a, i32 %m, ptr nocapture readonly %ub, i32 %k) local_unnamed_addr {
; CHECK-LABEL:  VPlan IR for: foo
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Div] i64 [[VP_LANE:%.*]] = induction-init{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Div] ptr [[VP_ARRAYIDX:%.*]] = getelementptr inbounds i32, ptr [[UB0:%.*]] i64 [[VP_LANE]]
; CHECK-NEXT:     [DA: Div] ptr [[VP_ARRAYIDX2:%.*]] = getelementptr inbounds i32, ptr [[A0:%.*]] i64 [[VP_LANE]]
; CHECK-NEXT:     [DA: Div] i32 [[VP__PRE:%.*]] = load ptr [[VP_ARRAYIDX]]
; CHECK-NEXT:     [DA: Uni] br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]], [[BB2:BB[0-9]+]]
; CHECK-NEXT:     [DA: Div] i32 [[VP_REC:%.*]] = phi  [ i32 [[VP_REC_NEXT:%.*]], [[BB2]] ],  [ i32 [[VP__PRE]], [[BB0]] ]
; CHECK-NEXT:     [DA: Uni] i32 [[VP_IV:%.*]] = phi  [ i32 [[VP_IV_NEXT:%.*]], [[BB2]] ],  [ i32 0, [[BB0]] ]
; CHECK-NEXT:     [DA: Div] i1 [[VP_LOOP_MASK:%.*]] = phi  [ i1 true, [[BB0]] ],  [ i1 [[VP_LOOP_MASK_NEXT:%.*]], [[BB2]] ]
; CHECK-NEXT:     [DA: Div] br i1 [[VP_LOOP_MASK]], [[BB3:BB[0-9]+]], [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB3]]: # preds: [[BB1]]
; CHECK-NEXT:       [DA: Div] i32 [[VP_MUL:%.*]] = mul i32 [[VP_REC]] i32 [[VP_IV]]
; CHECK-NEXT:       [DA: Div] store i32 [[VP_MUL]] ptr [[VP_ARRAYIDX2]]
; CHECK-NEXT:       [DA: Uni] i32 [[VP_IV_NEXT]] = add i32 [[VP_IV]] i32 1
; CHECK-NEXT:       [DA: Div] i32 [[VP_REC_NEXT]] = load ptr [[VP_ARRAYIDX]]
; CHECK-NEXT:       [DA: Div] i1 [[VP_CONTINUE_COND:%.*]] = icmp sgt i32 [[VP_REC]] i32 0
; CHECK-NEXT:       [DA: Uni] br [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB3]], [[BB1]]
; CHECK-NEXT:     [DA: Div] i1 [[VP_LOOP_MASK_NEXT]] = select i1 [[VP_LOOP_MASK]] i1 [[VP_CONTINUE_COND]] i1 false
; CHECK-NEXT:     [DA: Uni] i1 [[VP0:%.*]] = all-zero-check i1 [[VP_LOOP_MASK_NEXT]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP0]], [[BB4:BB[0-9]+]], [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: [[BB2]]
; CHECK-NEXT:     [DA: Uni] br [[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]: # preds: [[BB4]]
; CHECK-NEXT:     [DA: Div] ret
; CHECK-NEXT:     [DA: Uni] br <External Block>
;
entry:
  %lane = call i64 @llvm.vplan.laneid()
  %arrayidx = getelementptr inbounds i32, ptr %ub, i64 %lane
  %arrayidx2 = getelementptr inbounds i32, ptr %a, i64 %lane
  %.pre = load i32, ptr %arrayidx, align 4
  br label %header

header:
  %rec = phi i32 [ %rec.next, %header ], [ %.pre, %entry ]
  %iv = phi i32 [ %iv.next, %header ], [ 0, %entry ]
  %mul = mul nsw i32 %rec, %iv
  store i32 %mul, ptr %arrayidx2, align 4
  %iv.next = add nuw nsw i32 %iv, 1
  %rec.next = load i32, ptr %arrayidx, align 4
  %continue.cond = icmp sgt i32 %rec, 0
  br i1 %continue.cond, label %header, label %loop.exit

loop.exit:
  br label %exit

exit:
  ret void
}

declare i64 @llvm.vplan.laneid()
