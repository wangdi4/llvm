; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -enable-new-pm=0 -vplan-vec -vplan-force-vf=2 -vplan-print-after-create-masked-vplan -disable-output < %s 2>&1 | FileCheck %s
; RUN: opt -passes='vplan-vec' -vplan-force-vf=2 -vplan-print-after-create-masked-vplan -disable-output < %s 2>&1 | FileCheck %s

; Check if the masked variant is generated for the outer loop when the induction
; and the bottom check are in different basic blocks.

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define void @main(i32 %inner.tc, i32 %outer.tc) {
; CHECK-LABEL:  VPlan after emitting masked variant:
; CHECK-NEXT:  VPlan IR for: main:outer.header.#{{[0-9]+}}.cloned.masked
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     [DA: Div] i32 [[VP0:%.*]] = induction-init{add} i32 live-in0 i32 1
; CHECK-NEXT:     [DA: Uni] i32 [[VP1:%.*]] = induction-init-step{add} i32 1
; CHECK-NEXT:     [DA: Uni] br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], new_latch
; CHECK-NEXT:     [DA: Div] i32 [[VP_OUTER_IV:%.*]] = phi  [ i32 [[VP0]], [[BB1]] ],  [ i32 [[VP_OUTER_IV_NEXT:%.*]], new_latch ]
; CHECK-NEXT:     [DA: Div] i1 [[VP2:%.*]] = icmp ult i32 [[VP_OUTER_IV]] i32 [[OUTER_TC0:%.*]]
; CHECK-NEXT:     [DA: Div] br i1 [[VP2]], [[BB3:BB[0-9]+]], new_latch
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB3]]: # preds: [[BB2]]
; CHECK-NEXT:       [DA: Uni] br [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB4]]: # preds: [[BB5:BB[0-9]+]], [[BB3]]
; CHECK-NEXT:       [DA: Uni] i32 [[VP_INNER_IV:%.*]] = phi  [ i32 0, [[BB3]] ],  [ i32 [[VP_INNER_IV_NEXT:%.*]], [[BB5]] ]
; CHECK-NEXT:       [DA: Uni] i32 [[VP_INNER_IV_NEXT]] = add i32 [[VP_INNER_IV]] i32 1
; CHECK-NEXT:       [DA: Uni] br [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB5]]: # preds: [[BB4]]
; CHECK-NEXT:       [DA: Uni] i32 [[VP_X:%.*]] = add i32 [[VP_INNER_IV]] i32 1
; CHECK-NEXT:       [DA: Uni] i1 [[VP_INNER_BOTTOM_TEST:%.*]] = icmp eq i32 [[VP_INNER_IV_NEXT]] i32 [[INNER_TC0:%.*]]
; CHECK-NEXT:       [DA: Uni] br i1 [[VP_INNER_BOTTOM_TEST]], [[BB6:BB[0-9]+]], [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB6]]: # preds: [[BB5]]
; CHECK-NEXT:       [DA: Uni] i32 [[VP_X_LCSSA_PHI:%.*]] = phi  [ i32 [[VP_X]], [[BB5]] ]
; CHECK-NEXT:       [DA: Uni] i1 [[VP_X_COND:%.*]] = icmp eq i32 [[VP_X_LCSSA_PHI]] i32 16
; CHECK-NEXT:       [DA: Uni] br i1 [[VP_X_COND]], [[BB7:BB[0-9]+]], [[BB8:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB8]]: # preds: [[BB6]]
; CHECK-NEXT:         [DA: Uni] i32 [[VP_X_ADD:%.*]] = add i32 [[VP_X_LCSSA_PHI]] i32 1
; CHECK-NEXT:         [DA: Uni] br [[BB7]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB7]]: # preds: [[BB6]], [[BB8]]
; CHECK-NEXT:       [DA: Uni] i32 [[VP_X_PHI:%.*]] = phi  [ i32 [[VP_X_LCSSA_PHI]], [[BB6]] ],  [ i32 [[VP_X_ADD]], [[BB8]] ]
; CHECK-NEXT:       [DA: Uni] i32 [[VP_X_ADD_FINAL:%.*]] = add i32 [[VP_X_PHI]] i32 1
; CHECK-NEXT:       [DA: Uni] br new_latch
; CHECK-EMPTY:
; CHECK-NEXT:    new_latch: # preds: [[BB7]], [[BB2]]
; CHECK-NEXT:     [DA: Div] i32 [[VP_OUTER_IV_NEXT]] = add i32 [[VP_OUTER_IV]] i32 [[VP1]]
; CHECK-NEXT:     [DA: Div] i1 [[VP3:%.*]] = icmp ult i32 [[VP_OUTER_IV_NEXT]] i32 [[OUTER_TC0]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP4:%.*]] = all-zero-check i1 [[VP3]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP4]], [[BB9:BB[0-9]+]], [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB9]]: # preds: new_latch
; CHECK-NEXT:     [DA: Uni] i32 [[VP5:%.*]] = induction-final{add} i32 0 i32 1
; CHECK-NEXT:     [DA: Uni] br [[BB10:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB10]]: # preds: [[BB9]]
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   no underlying for i32 [[VP5]]
;
entry:
  br label %preheader

preheader:                                        ; preds = %entry
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %outer.header

outer.header:                                     ; preds = %outer.latch, %preheader
  %outer.iv = phi i32 [ 0, %preheader ], [ %outer.iv.next, %outer.latch ]
  %outer.iv.next = add nsw i32 %outer.iv, 1
  br label %inner.header

inner.header:                                     ; preds = %inner.latch, %outer.header
  %inner.iv = phi i32 [ 0, %outer.header ], [ %inner.iv.next, %inner.latch ]
  %inner.iv.next = add nsw i32 %inner.iv, 1
  br label %inner.latch

inner.latch:                                      ; preds = %inner.header
  %x = add nsw i32 %inner.iv, 1
  %inner.bottom.test = icmp eq i32 %inner.iv.next, %inner.tc
  br i1 %inner.bottom.test, label %bb1, label %inner.header

bb1:                                              ; preds = %inner.latch
  %x.lcssa.phi = phi i32 [ %x, %inner.latch ]
  %outer.bottom.test = icmp eq i32 %outer.iv.next, %outer.tc
  %x.cond = icmp eq i32 %x.lcssa.phi, 16
  br i1 %x.cond, label %outer.latch, label %bb2

bb2:                                              ; preds = %bb1
  %x.add = add nsw i32 %x.lcssa.phi, 1
  br label %outer.latch

outer.latch:                                      ; preds = %bb2, %bb1
  %x.phi = phi i32 [ %x.lcssa.phi, %bb1 ], [ %x.add, %bb2 ]
  %x.add.final = add nsw i32 %x.phi, 1
  br i1 %outer.bottom.test, label %loopexit, label %outer.header

loopexit:                                         ; preds = %outer.latch
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %exit

exit:                                             ; preds = %loopexit
  ret void
}

declare token @llvm.directive.region.entry() nounwind
declare void @llvm.directive.region.exit(token) nounwind
