; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -S < %s -VPlanDriver -disable-output -vplan-print-after-linearization | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind uwtable
define void @foo(i32* noalias nocapture readnone %a) local_unnamed_addr #0 {
;
; CHECK-LABEL:  After predication and linearization
; CHECK-NEXT:    [[BB0:BB[0-9]+]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB1:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]:
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_INDUCTION_PHI_IND_INIT:%.*]] = induction-init{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP_INDUCTION_PHI_IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:    SUCCESSORS(1):[[BB2:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]:
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_INDUCTION_PHI:%.*]] = phi  [ i64 [[VP_INDUCTION_PHI_IND_INIT]], [[BB1]] ],  [ i64 [[VP_INDUCTION:%.*]], [[BB3:BB[0-9]+]] ]
; CHECK-NEXT:     [DA: Divergent] i32* [[VP_GEP:%.*]] = getelementptr inbounds i32* [[A0:%.*]] i64 [[VP_INDUCTION_PHI]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_LOOP_HEADER_LD:%.*]] = load i32* [[VP_GEP]]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_LOOP_HEADER_VARYING:%.*]] = icmp i32 [[VP_LOOP_HEADER_LD]] i32 100
; CHECK-NEXT:    SUCCESSORS(1):[[BB4:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB3]] [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]:
; CHECK-NEXT:     [DA: Divergent] i1 [[VP0:%.*]] = block-predicate i1 [[VP_LOOP_HEADER_VARYING]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_BB1_MUL:%.*]] = mul i32 [[VP_LOOP_HEADER_LD]] i32 1
; CHECK-NEXT:    SUCCESSORS(1):[[BB3]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]:
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_INDUCTION]] = add i64 [[VP_INDUCTION_PHI]] i64 [[VP_INDUCTION_PHI_IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_EXITCOND:%.*]] = icmp i64 [[VP_INDUCTION]] i64 1000
; CHECK-NEXT:    SUCCESSORS(2):[[BB5:BB[0-9]+]](i1 [[VP_EXITCOND]]), [[BB2]](!i1 [[VP_EXITCOND]])
; CHECK-NEXT:    PREDECESSORS(1): [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]:
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP_INDUCTION_PHI_IND_FINAL:%.*]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:    SUCCESSORS(1):[[BB6:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]]:
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB5]]
;
entry:
;        entry
;          |
; +--->loop.header
; |      |    |
; |     bb1   |
; |      |    |
; +----loop.latch
;          |
;      loop.exit
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %loop.header

loop.header:                                         ; preds = %loop.latch, %entry
  %induction.phi = phi i64 [ 0, %entry ], [ %induction, %loop.latch ]
  %gep = getelementptr inbounds i32, i32* %a, i64 %induction.phi
  %loop.header.ld = load i32, i32* %gep, align 4
  %loop.header.varying = icmp sgt i32 %loop.header.ld, 100
  br i1 %loop.header.varying, label %bb1, label %loop.latch

bb1:                                          ; preds = %loop.header
  %bb1.mul = mul nsw i32 %loop.header.ld, 1
  br label %loop.latch

loop.latch:                                          ; preds = %loop.header, %bb1
  %induction = add nuw nsw i64 %induction.phi, 1
  %exitcond = icmp eq i64 %induction, 1000
  br i1 %exitcond, label %loop.exit, label %loop.header

loop.exit:                                          ; preds = %loop.latch
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"()]
  ret void
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

attributes #0 = { noinline nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
