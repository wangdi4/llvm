; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py

; RUN: opt -opaque-pointers=0 -passes=vplan-vec -vplan-enable-soa-phis -vplan-dump-da-shapes -vplan-print-after-predicator -disable-vplan-codegen \
; RUN: -disable-output -vplan-enable-masked-variant=0 -vplan-force-vf=2 %s 2>&1 | FileCheck %s

; REQUIRES:asserts

@arr = common dso_local local_unnamed_addr global [1024 x i32] zeroinitializer, align 16

; For this test, our aim is to check if the shapes are infered correctly for SOA-pointers into BLEND VPInstructions.

define void @test_vplan_da_phis_soa(i32* %arr.non.priv) {
; CHECK-LABEL:  VPlan after predicator:
; CHECK:  VPlan IR for: test_vplan_da_phis_soa:simd.loop.#{{[0-9]+}}
; CHECK:    BB10:
; CHECK:    BB1:
; CHECK:     [DA: [Shape: SOA Unit Stride, Stride: i64 4]] [1024 x i32]* [[VP_ARR_PRIV32:%.*]] = allocate-priv [1024 x i32]*, OrigAlign = 4
; CHECK:     [DA: [Shape: SOA Unit Stride, Stride: i64 4]] i8* [[VP0:%.*]] = bitcast [1024 x i32]* [[VP_ARR_PRIV32]]
; CHECK:     [DA: [Shape: Random]] call i64 4096 i8* [[VP0]] void (i64, i8*)* @llvm.lifetime.start.p0i8
; CHECK:     [DA: [Shape: Unit Stride, Stride: i64 1]] i64 [[VP_IV1_IND_INIT:%.*]] = induction-init{add} i64 live-in0 i64 1
; CHECK:     [DA: [Shape: Uniform]] i64 [[VP_IV1_IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; CHECK:     [DA: [Shape: Uniform]] i64 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i64 1024, UF = 1
; CHECK:    BB2:
; CHECK:     [DA: [Shape: Unit Stride, Stride: i64 1]] i64 [[VP_IV1:%.*]] = phi  [ i64 [[VP_IV1_IND_INIT]], [[BB1:BB[0-9]+]] ],  [ i64 [[VP_IV1_NEXT:%.*]], [[BB3:BB[0-9]+]] ]
; CHECK:     [DA: [Shape: SOA Unit Stride, Stride: i64 4]] i32* [[VP_UNI_GEP32:%.*]] = getelementptr inbounds [1024 x i32]* [[VP_ARR_PRIV32]] i64 0 i64 0
; CHECK:     [DA: [Shape: Random]] i32 [[VP_LD:%.*]] = load i32* [[VP_UNI_GEP32]]
; CHECK:     [DA: [Shape: Random]] i64 [[VP_LD_64:%.*]] = sext i32 [[VP_LD]] to i64
; CHECK:     [DA: [Shape: Uniform]] br i1 true, [[BB4:BB[0-9]+]], [[BB5:BB[0-9]+]]
; CHECK:      BB4:
; CHECK:       [DA: [Shape: SOA Unit Stride, Stride: i64 4]] i32* [[VP_UNI_ELSE1:%.*]] = getelementptr inbounds i32* [[VP_UNI_GEP32]] i64 2
; CHECK:       [DA: [Shape: Strided, Stride: i64 4]] i32* [[VP_STR_ELSE_NON_PRIV1:%.*]] = getelementptr inbounds i32* [[ARR_NON_PRIV0:%.*]] i64 [[VP_IV1]]
; CHECK:       [DA: [Shape: SOA Random]] i32* [[VP_RND_SOA_ELSE:%.*]] = getelementptr inbounds [1024 x i32]* [[VP_ARR_PRIV32]] i64 0 i64 [[VP_LD_64]]
; CHECK:       [DA: [Shape: Random]] i32* [[VP_RND_ELSE_NON_PRIV1:%.*]] = getelementptr inbounds i32* [[ARR_NON_PRIV0]] i64 [[VP_LD_64]]
; CHECK:       [DA: [Shape: SOA Strided, Stride: VF x i64 4]] i32* [[VP_STR_SOA_ELSE:%.*]] = getelementptr inbounds [1024 x i32]* [[VP_ARR_PRIV32]] i64 0 i64 [[VP_IV1]]
; CHECK:      BB3:
; CHECK:       [DA: [Shape: SOA Unit Stride, Stride: i64 4]] i32* [[VP_UNI_IF1:%.*]] = getelementptr inbounds i32* [[VP_UNI_GEP32]] i64 1
; CHECK:       [DA: [Shape: Uniform]] i32* [[VP_UNI_IF_NON_PRIV1:%.*]] = getelementptr inbounds i32* [[ARR_NON_PRIV0]] i64 1
; CHECK:       [DA: [Shape: SOA Random]] i32* [[VP_RND_SOA_IF:%.*]] = getelementptr inbounds [1024 x i32]* [[VP_ARR_PRIV32]] i64 0 i64 [[VP_LD_64]]
; CHECK:       [DA: [Shape: SOA Strided, Stride: VF x i64 4]] i32* [[VP_STR_SOA_IF:%.*]] = getelementptr inbounds [1024 x i32]* [[VP_ARR_PRIV32]] i64 0 i64 [[VP_IV1]]
; CHECK:       [DA: [Shape: Strided, Stride: i64 4]] i32* [[VP_STR_IF_NON_PRIV1:%.*]] = getelementptr inbounds i32* [[ARR_NON_PRIV0]] i64 [[VP_IV1]]
; CHECK:    BB5:
; CHECK:     [DA: [Shape: SOA Unit Stride, Stride: i64 4]] i32* [[VP_PHI_RESULT11:%.*]] = phi  [ i32* [[VP_UNI_IF1]], [[BB4]] ],  [ i32* [[VP_UNI_ELSE1]], [[BB5]] ]
; CHECK:     [DA: [Shape: Random]] i32* [[VP_PHI_RESULT12:%.*]] = phi  [ i32* [[VP_UNI_IF1]], [[BB4]] ],  [ i32* [[VP_STR_ELSE_NON_PRIV1]], [[BB5]] ]
; CHECK:     [DA: [Shape: SOA Random]] i32* [[VP_PHI_RESULT13:%.*]] = phi  [ i32* [[VP_RND_SOA_IF]], [[BB4]] ],  [ i32* [[VP_STR_SOA_ELSE]], [[BB5]] ]
; CHECK:     [DA: [Shape: SOA Random]] i32* [[VP_PHI_RESULT14:%.*]] = phi  [ i32* [[VP_UNI_IF1]], [[BB4]] ],  [ i32* [[VP_STR_SOA_ELSE]], [[BB5]] ]
; CHECK:     [DA: [Shape: SOA Random]] i32* [[VP_PHI_RESULT15:%.*]] = phi  [ i32* [[VP_STR_SOA_ELSE]], [[BB5]] ],  [ i32* [[VP_UNI_IF1]], [[BB4]] ]
; CHECK:     [DA: [Shape: SOA Random]] i32* [[VP_PHI_RESULT16:%.*]] = phi  [ i32* [[VP_UNI_IF1]], [[BB4]] ],  [ i32* [[VP_RND_SOA_ELSE]], [[BB5]] ]
; CHECK:     [DA: [Shape: Random]] i32* [[VP_PHI_RESULT17:%.*]] = phi  [ i32* [[VP_UNI_IF1]], [[BB4]] ],  [ i32* [[VP_RND_ELSE_NON_PRIV1]], [[BB5]] ]
; CHECK:     [DA: [Shape: Random]] i32* [[VP_PHI_RESULT18:%.*]] = phi  [ i32* [[VP_RND_SOA_IF]], [[BB4]] ],  [ i32* [[VP_RND_ELSE_NON_PRIV1]], [[BB5]] ]
; CHECK:     [DA: [Shape: Random]] i32* [[VP_PHI_RESULT19:%.*]] = phi  [ i32* [[VP_STR_IF_NON_PRIV1]], [[BB4]] ],  [ i32* [[VP_STR_SOA_ELSE]], [[BB5]] ]
; CHECK:     [DA: [Shape: Random]] i32* [[VP_PHI_RESULT20:%.*]] = phi  [ i32* [[VP_STR_IF_NON_PRIV1]], [[BB4]] ],  [ i32* [[VP_RND_SOA_ELSE]], [[BB5]] ]
; CHECK:    BB7:
; CHECK:          [DA: [Shape: Random]] i1 [[VP1:%.*]] = block-predicate i1 [[VP_CMPS_NOT:%.*]]
; CHECK:          [DA: [Shape: SOA Unit Stride, Stride: i64 4]] i32* [[VP_UNI_ELSE2:%.*]] = getelementptr inbounds i32* [[VP_UNI_GEP32]] i64 2
; CHECK:          [DA: [Shape: Strided, Stride: i64 4]] i32* [[VP_STR_ELSE_NON_PRIV2:%.*]] = getelementptr inbounds i32* [[ARR_NON_PRIV0]] i64 [[VP_IV1]]
; CHECK:          [DA: [Shape: SOA Strided, Stride: VF x i64 4]] i32* [[VP_STR_SOA_DIV_ELSE:%.*]] = getelementptr inbounds [1024 x i32]* [[VP_ARR_PRIV32]] i64 0 i64 [[VP_IV1]]
; CHECK:          [DA: [Shape: SOA Random]] i32* [[VP_RND_SOA_DIV_ELSE:%.*]] = getelementptr inbounds [1024 x i32]* [[VP_ARR_PRIV32]] i64 0 i64 [[VP_LD_64]]
; CHECK:          [DA: [Shape: Random]] i32* [[VP_RND_DIV_ELSE_NON_PRIV1:%.*]] = getelementptr inbounds i32* [[ARR_NON_PRIV0]] i64 [[VP_LD_64]]
; CHECK:    BB6:
; CHECK:          [DA: [Shape: Random]] i1 [[VP2:%.*]] = block-predicate i1 [[VP_CMPS:%.*]]
; CHECK:          [DA: [Shape: SOA Unit Stride, Stride: i64 4]] i32* [[VP_UNI_IF2:%.*]] = getelementptr inbounds i32* [[VP_UNI_GEP32]] i64 1
; CHECK:          [DA: [Shape: Uniform]] i32* [[VP_UNI_IF_NON_PRIV2:%.*]] = getelementptr inbounds i32* [[ARR_NON_PRIV0]] i64 1
; CHECK:          [DA: [Shape: SOA Random]] i32* [[VP_RND_SOA_DIV_IF:%.*]] = getelementptr inbounds [1024 x i32]* [[VP_ARR_PRIV32]] i64 0 i64 [[VP_LD_64]]
; CHECK:          [DA: [Shape: Random]] i32* [[VP_RND_DIV_IF_NON_PRIV1:%.*]] = getelementptr inbounds i32* [[ARR_NON_PRIV0]] i64 [[VP_LD_64]]
; CHECK:          [DA: [Shape: Strided, Stride: i64 4]] i32* [[VP_STR_IF_NON_PRIV2:%.*]] = getelementptr inbounds i32* [[ARR_NON_PRIV0]] i64 [[VP_IV1]]
; CHECK:    BB8:
; CHECK:     [DA: [Shape: SOA Random]] i32* [[VP_PHI_RESULT21_BLEND_BB6:%.*]] = blend [ i32* [[VP_UNI_ELSE2]], i1 [[VP_CMPS_NOT]] ], [ i32* [[VP_UNI_IF2]], i1 [[VP_CMPS]] ]
; CHECK:     [DA: [Shape: Random]] i32* [[VP_PHI_RESULT22_BLEND_BB6:%.*]] = blend [ i32* [[VP_STR_ELSE_NON_PRIV2]], i1 [[VP_CMPS_NOT]] ], [ i32* [[VP_UNI_IF2]], i1 [[VP_CMPS]] ]
; CHECK:     [DA: [Shape: SOA Random]] i32* [[VP_PHI_RESULT23_BLEND_BB6:%.*]] = blend [ i32* [[VP_STR_SOA_DIV_ELSE]], i1 [[VP_CMPS_NOT]] ], [ i32* [[VP_RND_SOA_DIV_IF]], i1 [[VP_CMPS]] ]
; CHECK:     [DA: [Shape: SOA Random]] i32* [[VP_PHI_RESULT24_BLEND_BB6:%.*]] = blend [ i32* [[VP_STR_SOA_DIV_ELSE]], i1 [[VP_CMPS_NOT]] ], [ i32* [[VP_UNI_IF2]], i1 [[VP_CMPS]] ]
; CHECK:     [DA: [Shape: SOA Random]] i32* [[VP_PHI_RESULT25_BLEND_BB6:%.*]] = blend [ i32* [[VP_STR_SOA_DIV_ELSE]], i1 [[VP_CMPS_NOT]] ], [ i32* [[VP_UNI_IF2]], i1 [[VP_CMPS]] ]
; CHECK:     [DA: [Shape: SOA Random]] i32* [[VP_PHI_RESULT26_BLEND_BB6:%.*]] = blend [ i32* [[VP_RND_SOA_DIV_ELSE]], i1 [[VP_CMPS_NOT]] ], [ i32* [[VP_UNI_IF2]], i1 [[VP_CMPS]] ]
; CHECK:     [DA: [Shape: Random]] i32* [[VP_PHI_RESULT27_BLEND_BB6:%.*]] = blend [ i32* [[VP_RND_DIV_ELSE_NON_PRIV1]], i1 [[VP_CMPS_NOT]] ], [ i32* [[VP_UNI_IF2]], i1 [[VP_CMPS]] ]
; CHECK:     [DA: [Shape: Random]] i32* [[VP_PHI_RESULT28_BLEND_BB6:%.*]] = blend [ i32* [[VP_RND_DIV_ELSE_NON_PRIV1]], i1 [[VP_CMPS_NOT]] ], [ i32* [[VP_RND_SOA_DIV_IF]], i1 [[VP_CMPS]] ]
; CHECK:     [DA: [Shape: Random]] i32* [[VP_PHI_RESULT29_BLEND_BB6:%.*]] = blend [ i32* [[VP_STR_SOA_DIV_ELSE]], i1 [[VP_CMPS_NOT]] ], [ i32* [[VP_STR_IF_NON_PRIV2]], i1 [[VP_CMPS]] ]
; CHECK:     [DA: [Shape: Random]] i32* [[VP_PHI_RESULT30_BLEND_BB6:%.*]] = blend [ i32* [[VP_RND_SOA_DIV_ELSE]], i1 [[VP_CMPS_NOT]] ], [ i32* [[VP_STR_IF_NON_PRIV2]], i1 [[VP_CMPS]] ]
;
entry:
  %arr.priv32 = alloca [1024 x i32], align 4
  br label %simd.begin.region

simd.begin.region:
  %entry.region = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.PRIVATE:TYPED"([1024 x i32]* %arr.priv32, i32 0, i32 1024)]
  br label %simd.loop.preheader

simd.loop.preheader:
  br label %simd.loop

simd.loop:
  %iv1 = phi i64 [ 0, %simd.loop.preheader ], [ %iv1.next, %conv.point.div]
  %uni.gep32 = getelementptr inbounds [1024 x i32], [1024 x i32]* %arr.priv32, i64 0, i64 0
  %ld = load i32, i32* %uni.gep32, align 4
  %ld.64 = sext i32 %ld to i64
  br i1 true, label %if, label %else

if:
  %uni.if1 = getelementptr inbounds i32, i32* %uni.gep32, i64 1
  %uni.if.non_priv1 = getelementptr inbounds i32, i32* %arr.non.priv, i64 1
  %rnd.soa.if = getelementptr inbounds [1024 x i32], [1024 x i32]* %arr.priv32, i64 0, i64 %ld.64
  %str.soa.if = getelementptr inbounds [1024 x i32], [1024 x i32]* %arr.priv32, i64 0, i64 %iv1
  %str.if.non.priv1 = getelementptr inbounds i32, i32* %arr.non.priv, i64 %iv1
  br label %conv.point.uni

else:
  %uni.else1 = getelementptr inbounds i32, i32* %uni.gep32, i64 2
  %str.else.non.priv1 = getelementptr inbounds i32, i32* %arr.non.priv, i64 %iv1
  %rnd.soa.else = getelementptr inbounds [1024 x i32], [1024 x i32]* %arr.priv32, i64 0, i64 %ld.64
  %rnd.else.non.priv1 = getelementptr inbounds i32, i32* %arr.non.priv, i64 %ld.64
  %str.soa.else = getelementptr inbounds [1024 x i32], [1024 x i32]* %arr.priv32, i64 0, i64 %iv1
  br label %conv.point.uni

conv.point.uni:
  %phi.result11 = phi i32* [%uni.if1, %if], [%uni.else1, %else]
  %phi.result12 = phi i32* [%uni.if1, %if], [%str.else.non.priv1, %else]
  %phi.result13 = phi i32* [%rnd.soa.if, %if], [%str.soa.else, %else]
  %phi.result14 = phi i32* [%uni.if1, %if], [%str.soa.else, %else]
  %phi.result15 = phi i32* [%str.soa.else, %else], [%uni.if1, %if]
  %phi.result16 = phi i32* [%uni.if1, %if], [%rnd.soa.else, %else]
  %phi.result17 = phi i32* [%uni.if1, %if], [%rnd.else.non.priv1, %else]
  %phi.result18 = phi i32* [%rnd.soa.if, %if], [%rnd.else.non.priv1, %else]
  %phi.result19 = phi i32* [%str.if.non.priv1, %if], [%str.soa.else, %else]
  %phi.result20 = phi i32* [%str.if.non.priv1, %if], [%rnd.soa.else, %else]
  %rem = srem i64 %iv1, 2
  %cmps = icmp eq i64 %rem, 0
  br i1 %cmps, label %div.if, label %div.else

div.if:
  %uni.if2 = getelementptr inbounds i32, i32* %uni.gep32, i64 1
  %uni.if.non_priv2 = getelementptr inbounds i32, i32* %arr.non.priv, i64 1
  %rnd.soa.div.if = getelementptr inbounds [1024 x i32], [1024 x i32]* %arr.priv32, i64 0, i64 %ld.64
  %rnd.div.if.non.priv1 = getelementptr inbounds i32, i32* %arr.non.priv, i64 %ld.64
  %str.if.non.priv2 = getelementptr inbounds i32, i32* %arr.non.priv, i64 %iv1
  br label %conv.point.div

div.else:
  %uni.else2 = getelementptr inbounds i32, i32* %uni.gep32, i64 2
  %str.else.non.priv2 = getelementptr inbounds i32, i32* %arr.non.priv, i64 %iv1
  %str.soa.div.else = getelementptr inbounds [1024 x i32], [1024 x i32]* %arr.priv32, i64 0, i64 %iv1
  %rnd.soa.div.else = getelementptr inbounds [1024 x i32], [1024 x i32]* %arr.priv32, i64 0, i64 %ld.64
  %rnd.div.else.non.priv1 = getelementptr inbounds i32, i32* %arr.non.priv, i64 %ld.64
  br label %conv.point.div

conv.point.div:
  %phi.result21 = phi i32* [%uni.if2, %div.if], [%uni.else2, %div.else]
  %phi.result22 = phi i32* [%uni.if2, %div.if], [%str.else.non.priv2, %div.else]
  %phi.result23 = phi i32* [%rnd.soa.div.if, %div.if], [%str.soa.div.else, %div.else]
  %phi.result24 = phi i32* [%uni.if2, %div.if], [%str.soa.div.else, %div.else]
  %phi.result25 = phi i32* [%str.soa.div.else, %div.else], [%uni.if2, %div.if]
  %phi.result26 = phi i32* [%uni.if2, %div.if], [%rnd.soa.div.else, %div.else]
  %phi.result27 = phi i32* [%uni.if2, %div.if], [%rnd.div.else.non.priv1, %div.else]
  %phi.result28 = phi i32* [%rnd.soa.div.if, %div.if], [%rnd.div.else.non.priv1, %div.else]
  %phi.result29 = phi i32* [%str.if.non.priv2, %div.if], [%str.soa.div.else, %div.else]
  %phi.result30 = phi i32* [%str.if.non.priv2, %div.if], [%rnd.soa.div.else, %div.else]
  %iv1.next = add nuw nsw i64 %iv1, 1
  %cmp = icmp ult i64 %iv1.next, 1024
  br i1 %cmp, label %simd.loop, label %simd.end

simd.end:
  call void @llvm.directive.region.exit(token %entry.region) [ "DIR.OMP.END.SIMD"() ]
  ret void
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token %0)
