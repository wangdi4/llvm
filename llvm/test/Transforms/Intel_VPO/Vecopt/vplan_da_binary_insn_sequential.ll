; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; The test checks if the correct vector shape is created for binary instructions
; whose stride is 1.

; REQUIRES: asserts
; RUN: opt -passes=vplan-vec -vplan-dump-da -disable-output %s 2>&1 | FileCheck %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define dso_local void @XNU() local_unnamed_addr #0 {
; CHECK:       Printing Divergence info for Loop at depth 1 containing: [[BB0:BB[0-9]+]]<header>,[[BB1:BB[0-9]+]],[[BB2:BB[0-9]+]]<latch><exiting>
; CHECK-EMPTY:
; CHECK-NEXT:  Basic Block: [[BB0]]
; CHECK-NEXT:  Divergent: [Shape: Unit Stride, Stride: i64 1] i64 [[VP_FIRST_INDUCTION_PHI:%.*]] = phi  [ i64 [[VP_FIRST_INDUCTION_PHI_IND_INIT:%.*]], [[BB3:BB[0-9]+]] ],  [ i64 [[VP_FIRST_INDUCTION:%.*]], [[BB2]] ]
; CHECK-NEXT:  Divergent: [Shape: Strided, Stride: i64 2] i64 [[VP_SECOND_INDUCTION_PHI:%.*]] = phi  [ i64 [[VP_SECOND_INDUCTION_PHI_IND_INIT:%.*]], [[BB3]] ],  [ i64 [[VP_SECOND_INDUCTION:%.*]], [[BB2]] ]
; CHECK-NEXT:  Uniform: [Shape: Uniform] br [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:  Basic Block: [[BB1]]
; CHECK-NEXT:  Divergent: [Shape: Unit Stride, Stride: i64 -1] i64 [[VP_SUB:%.*]] = sub i64 [[VP_FIRST_INDUCTION_PHI]] i64 [[VP_SECOND_INDUCTION_PHI]]
; CHECK-NEXT:  Uniform: [Shape: Uniform] br [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:  Basic Block: [[BB2]]
; CHECK-NEXT:  Divergent: [Shape: Unit Stride, Stride: i64 1] i64 [[VP_FIRST_INDUCTION]] = add i64 [[VP_FIRST_INDUCTION_PHI]] i64 [[VP_FIRST_INDUCTION_PHI_IND_INIT_STEP:%.*]]
; CHECK-NEXT:  Divergent: [Shape: Strided, Stride: i64 2] i64 [[VP_SECOND_INDUCTION]] = add i64 [[VP_SECOND_INDUCTION_PHI]] i64 [[VP_SECOND_INDUCTION_PHI_IND_INIT_STEP:%.*]]
; CHECK-NEXT:  Uniform: [Shape: Uniform] i1 [[VP_EXIT_COND:%.*]] = icmp uge i64 [[VP_FIRST_INDUCTION]] i64 [[VP_VECTOR_TRIP_COUNT:%.*]]
; CHECK-NEXT:  Uniform: [Shape: Uniform] br i1 [[VP_EXIT_COND]], [[BB4:BB[0-9]+]], [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:  Basic Block: [[BB4]]
; CHECK-NEXT:  Uniform: [Shape: Uniform] i64 [[VP_FIRST_INDUCTION_PHI_IND_FINAL:%.*]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:  Uniform: [Shape: Uniform] i64 [[VP_SECOND_INDUCTION_PHI_IND_FINAL:%.*]] = induction-final{add} i64 0 i64 2
; CHECK-NEXT:  Uniform: [Shape: Uniform] br [[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:  Basic Block: [[BB5]]
; CHECK-NEXT:  Uniform: [Shape: Uniform] br <External Block>
;
entry:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %loop.header

loop.header:                                       ; preds = %loop.latch, %entry
  %first.induction.phi = phi i64 [ 0, %entry ], [ %first.induction, %loop.latch ]
  %second.induction.phi = phi i64 [ 0, %entry ], [ %second.induction, %loop.latch ]
  br label %loop.body

loop.body:                                       ; preds = %loop.header
  %sub = sub nuw nsw i64 %first.induction.phi, %second.induction.phi
  br label %loop.latch

loop.latch:                                        ; preds = %loop.body
  %first.induction = add nuw nsw i64 %first.induction.phi, 1
  %second.induction = add nuw nsw i64 %second.induction.phi, 2
  %exit.cond = icmp eq i64 %first.induction, 1000
  br i1 %exit.cond, label %exit, label %loop.header

exit:                            ; preds = %loop.latch
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"()]
  ret void
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

attributes #0 = { "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }

!llvm.ident = !{!0}

!0 = !{!"Intel(R) oneAPI DPC++ Compiler 2021.1 (YYYY.x.0.MMDD)"}
