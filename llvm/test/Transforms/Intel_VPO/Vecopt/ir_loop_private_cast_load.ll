; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -VPlanDriver -vplan-force-vf=4 -S < %s | FileCheck %s

; Check that bitcast of a scalar private to the narrower type isn't used a
; unit-strided memory.

; JIRA: CMPLRLLVM-20884

define void @foo(i32* nocapture %arr) {
; CHECK-LABEL: @foo(
; CHECK:       vector.body:
; CHECK-NEXT:    [[UNI_PHI:%.*]] = phi i32 [ 0, [[VECTOR_PH:%.*]] ], [ [[TMP4:%.*]], [[VECTOR_BODY:%.*]] ]
; CHECK-NEXT:    [[UNI_PHI1:%.*]] = phi i32 [ 0, [[VECTOR_PH]] ], [ [[TMP3:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[VEC_PHI:%.*]] = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, [[VECTOR_PH]] ], [ [[TMP2:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[TMP0:%.*]] = bitcast <4 x i32*> [[PRIV_VEC_BASE_ADDR:%.*]] to <4 x i8*>
; CHECK-NEXT:    [[DOTEXTRACT_0_:%.*]] = extractelement <4 x i8*> [[TMP0]], i32 0
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast i8* [[DOTEXTRACT_0_]] to <4 x i8>*
; FIXME: That should be a gather, because access isn't unit-strided.
; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <4 x i8>, <4 x i8>* [[TMP1]], align 4
; CHECK-NEXT:    [[TMP2]] = add nuw nsw <4 x i32> [[VEC_PHI]], <i32 4, i32 4, i32 4, i32 4>
; CHECK-NEXT:    [[TMP3]] = add nuw nsw i32 [[UNI_PHI1]], 4
; CHECK-NEXT:    [[TMP4]] = add i32 [[UNI_PHI]], 4
; CHECK-NEXT:    [[TMP5:%.*]] = icmp eq i32 [[TMP4]], 100
; CHECK-NEXT:    br i1 [[TMP5]], label [[VPLANNEDBB:%.*]], label [[VECTOR_BODY]], !llvm.loop !0
;
entry:
  %priv = alloca i32, align 4
  br label %preheader

preheader:
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.PRIVATE"(i32* %priv) ]
  br label %header

header:
  %iv = phi i32 [ 0, %preheader ], [ %iv.next, %header ]
  %cast = bitcast i32 *%priv to i8 *
  %priv.val = load i8, i8* %cast, align 4
  %iv.next = add nuw nsw i32 %iv, 1
  %exitcond = icmp eq i32 %iv.next, 100
  br i1 %exitcond, label %exit, label %header

exit:
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  ret void
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
