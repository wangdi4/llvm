; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -S < %s --hir-ssa-deconstruction -hir-vec-dir-insert -hir-vplan-vec \
; RUN: -disable-output -vplan-print-after-unroll -vplan-force-uf=3 -vplan-enable-partial-sums=true | FileCheck %s

; Ensure that the generated reductions use a distinct identity-only intitializer
; when the original has a specified start value. The unrolled loop should
; have one PHI using the VP_RED_INIT value, and UF-1 PHIs using an identity-only reduction-init.
define i64 @foo(i64* %lp, i64 %init) {
; CHECK-LABEL:  VPlan after VPlan loop unrolling:
; CHECK-NEXT:  VPlan IR for: Initial VPlan for VF=4
; CHECK-NEXT:  External Defs Start:
; CHECK-DAG:     [[VP0:%.*]] = {%sum.07}
; CHECK-DAG:     [[VP1:%.*]] = {%lp}
; CHECK-NEXT:  External Defs End:
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i64 1024, UF = 3
; CHECK-NEXT:     [DA: Div] i64 [[VP2:%.*]] = reduction-init i64 0
; CHECK-NEXT:     [DA: Div] i64 [[VP_RED_INIT:%.*]] = reduction-init i64 0 i64 live-in0
; CHECK-NEXT:     [DA: Div] i64 [[VP__IND_INIT:%.*]] = induction-init{add} i64 live-in1 i64 1
; CHECK-NEXT:     [DA: Uni] i64 [[VP__IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:     [DA: Uni] br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], cloned.[[BB3:BB[0-9]+]]
; CHECK-NEXT:     [DA: Div] i64 [[VP3:%.*]] = phi  [ i64 [[VP2]], [[BB1]] ],  [ i64 [[VP4:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] i64 [[VP5:%.*]] = phi  [ i64 [[VP2]], [[BB1]] ],  [ i64 [[VP6:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] i64 [[VP7:%.*]] = phi  [ i64 [[VP_RED_INIT]], [[BB1]] ],  [ i64 [[VP8:%.*]], [[BB2]] ]
; CHECK-NEXT:     [DA: Div] i64 [[VP9:%.*]] = phi  [ i64 [[VP__IND_INIT]], [[BB1]] ],  [ i64 [[VP10:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] i64* [[VP_SUBSCRIPT:%.*]] = subscript inbounds i64* [[LP0:%.*]] i64 [[VP9]]
; CHECK-NEXT:     [DA: Div] i64 [[VP_LOAD:%.*]] = load i64* [[VP_SUBSCRIPT]]
; CHECK-NEXT:     [DA: Div] i64 [[VP8]] = add i64 [[VP_LOAD]] i64 [[VP7]]
; CHECK-NEXT:     [DA: Div] i64 [[VP11:%.*]] = add i64 [[VP9]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP12:%.*]] = icmp slt i64 [[VP11]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br cloned.[[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB4]]: # preds: [[BB2]]
; CHECK-NEXT:     [DA: Div] i64* [[VP13:%.*]] = subscript inbounds i64* [[LP0]] i64 [[VP11]]
; CHECK-NEXT:     [DA: Div] i64 [[VP14:%.*]] = load i64* [[VP13]]
; CHECK-NEXT:     [DA: Div] i64 [[VP4]] = add i64 [[VP14]] i64 [[VP3]]
; CHECK-NEXT:     [DA: Div] i64 [[VP15:%.*]] = add i64 [[VP11]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP16:%.*]] = icmp slt i64 [[VP15]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br cloned.[[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB3]]: # preds: cloned.[[BB4]]
; CHECK-NEXT:     [DA: Div] i64* [[VP17:%.*]] = subscript inbounds i64* [[LP0]] i64 [[VP15]]
; CHECK-NEXT:     [DA: Div] i64 [[VP18:%.*]] = load i64* [[VP17]]
; CHECK-NEXT:     [DA: Div] i64 [[VP6]] = add i64 [[VP18]] i64 [[VP5]]
; CHECK-NEXT:     [DA: Div] i64 [[VP10]] = add i64 [[VP15]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP19:%.*]] = icmp slt i64 [[VP10]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP19]], [[BB2]], [[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]: # preds: cloned.[[BB3]]
; CHECK-NEXT:     [DA: Div] i64 [[VP20:%.*]] = add i64 [[VP8]] i64 [[VP4]]
; CHECK-NEXT:     [DA: Div] i64 [[VP21:%.*]] = add i64 [[VP20]] i64 [[VP6]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP_RED_FINAL:%.*]] = reduction-final{u_add} i64 [[VP21]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP__IND_FINAL:%.*]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Uni] br [[BB6:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]]: # preds: [[BB5]]
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   i64 [[VP_RED_FINAL]] -> [[VP22:%.*]] = {%sum.07}
; CHECK-EMPTY:
; CHECK-NEXT:  Id: 1   no underlying for i64 [[VP__IND_FINAL]]
;
entry:
  br label %for.body

for.body:                                         ; preds = %entry, %for.body
  %sum.07 = phi i64 [ %init, %entry ], [ %add, %for.body ]
  %l1.06 = phi i64 [ 0, %entry ], [ %inc, %for.body ]
  %arrayidx = getelementptr inbounds i64, i64* %lp, i64 %l1.06
  %0 = load i64, i64* %arrayidx, align 4
  %add = add nuw nsw i64 %0, %sum.07
  %inc = add nuw nsw i64 %l1.06, 1
  %exitcond.not = icmp eq i64 %inc, 1024
  br i1 %exitcond.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  %add.lcssa = phi i64 [ %add, %for.body ]
  ret i64 %add.lcssa
}
