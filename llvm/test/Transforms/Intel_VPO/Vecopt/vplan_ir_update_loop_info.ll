; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -passes=vplan-vec -S -disable-output

; The test used to crash due to LoopInfo not being updated during VPlan CG.
; See also CMPLRLLVM-19018.

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define hidden void @foo(i1 %loop1.top.test, ptr %base) {
entry:
  br i1 %loop1.top.test, label %DIR.OMP.END.SIMD.6, label %loop1.preheader

loop1.preheader:
  %tok1 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.SIMDLEN"(i32 16) ]
  br label %loop1.body

loop1.body:
  %loop1.iv = phi i64 [ 0, %loop1.preheader ], [ %loop1.iv.next, %loop1.body ]
  %loop1.iv.next = add nsw i64 %loop1.iv, 1
  %loop1.exitcond = icmp eq i64 %loop1.iv, 42
  br i1 %loop1.exitcond, label %loop1.exit, label %loop1.body

loop1.exit:
  %loop1.lcssa = phi i64 [ %loop1.iv.next, %loop1.body ]
  %x = trunc i64 %loop1.lcssa to i32
  call void @llvm.directive.region.exit(token %tok1) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.OMP.END.SIMD.6

DIR.OMP.END.SIMD.6:
  %ncount.priv.4 = phi i32 [ 0, %entry ], [ %x, %loop1.exit ]
  br label %loop2.preheader

loop2.preheader:
  %tok2 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.SIMDLEN"(i32 16) ]
  br label %loop2.body

loop2.body:
  %loop2.iv = phi i64 [ 0, %loop2.preheader ], [ %loop2.iv.next, %loop2.body ]
  %loop2.iv.next = add nsw i64 %loop2.iv, 1
  %loop2.exitcond = icmp eq i64 %loop2.iv, 42
  br i1 %loop2.exitcond, label %loop2.exit, label %loop2.body

loop2.exit:
  call void @llvm.directive.region.exit(token %tok2) [ "DIR.OMP.END.SIMD"() ]
  %add.ptr251 = getelementptr inbounds i32, ptr %base, i32 %ncount.priv.4
  br label %loop3.preheader

loop3.preheader:
  %tok3 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.SIMDLEN"(i32 16) ]
  br label %loop3.body

loop3.body:
  %loop3.iv = phi i64 [ 0, %loop3.preheader ], [ %loop3.iv.next, %loop3.body ]
  %gep = getelementptr inbounds i32, ptr %add.ptr251, i64 %loop3.iv
  %loop3.iv.next = add nuw nsw i64 %loop3.iv, 1
  %loop3.exitcond = icmp eq i64 %loop3.iv.next, 42
  br i1 %loop3.exitcond, label %loop3.exit, label %loop3.body

loop3.exit:
  call void @llvm.directive.region.exit(token %tok3) [ "DIR.OMP.END.SIMD"() ]
  ret void

}

declare token @llvm.directive.region.entry() nounwind
declare void @llvm.directive.region.exit(token) nounwind
