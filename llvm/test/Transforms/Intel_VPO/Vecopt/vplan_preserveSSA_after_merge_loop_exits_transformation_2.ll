; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; It is not always needed to emit a phi node to preserve SSA. In the following
; test, VP_DEF is defined in BB6 which dominates all the exiting blocks. For
; this reason, it is not needed to emit a phi node in new loop latch for VP_DEF.
; On the contrary, the definition block(BB8) of VP_INNER_LOOP_INDUCTION does not
; dominate all the exiting block. Hence, a phi node is emitted in NEWLOOPLATCH0
; to preserve SSA.

; RUN: opt < %s -vplan-func-vec -disable-output -print-after-vplan-func-vec-loop-exit-canon | FileCheck %s
; RUN: opt < %s -passes="vplan-func-vec" -disable-output -print-after-vplan-func-vec-loop-exit-canon | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: norecurse nounwind uwtable
define void @main() {
; CHECK-LABEL:  VPlan IR for: main
; CHECK-NEXT:    [[BB0:BB[0-9]+]]:
; CHECK-NEXT:     i32 [[VP_LANE:%.*]] = induction-init{add} i32 0 i32 1
; CHECK-NEXT:    SUCCESSORS(1):[[BB1:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]:
; CHECK-NEXT:     i32 [[VP_IV:%.*]] = phi  [ i32 0, [[BB0]] ],  [ i32 [[VP_IV_NEXT_SSA_PHI:%.*]], [[NEW_LOOP_LATCH0:new.loop.latch[0-9]+]] ]
; CHECK-NEXT:     i32 [[VP_DEF_PHI:%.*]] = phi  [ i32 0, [[BB0]] ],  [ i32 [[VP_DEF:%.*]], [[NEW_LOOP_LATCH0]] ]
; CHECK-NEXT:     i32 [[VP_VAR1:%.*]] = add i32 [[VP_IV]] i32 [[VP_DEF_PHI]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB2:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB0]] [[NEW_LOOP_LATCH0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]:
; CHECK-NEXT:     i32 [[VP_DEF]] = add i32 [[VP_IV]] i32 [[VP_VAR1]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB3:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]:
; CHECK-NEXT:     i32 [[VP_VAR2:%.*]] = add i32 [[VP_DEF]] i32 1
; CHECK-NEXT:     i1 [[VP_CMP2:%.*]] = icmp i32 [[VP_VAR2]] i32 32
; CHECK-NEXT:    SUCCESSORS(2):[[BB4:BB[0-9]+]](i1 [[VP_CMP2]]), [[INTERMEDIATE_BB0:intermediate.bb[0-9]+]](!i1 [[VP_CMP2]])
; CHECK-NEXT:    PREDECESSORS(1): [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[INTERMEDIATE_BB0]]:
; CHECK-NEXT:       <Empty Block>
; CHECK-NEXT:      SUCCESSORS(1):[[NEW_LOOP_LATCH0]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB4]]:
; CHECK-NEXT:       i32 [[VP_IV_NEXT:%.*]] = add i32 [[VP_IV]] i32 1
; CHECK-NEXT:       i1 [[VP_BOTTOM_TEST:%.*]] = icmp i32 [[VP_IV_NEXT]] i32 128
; CHECK-NEXT:      SUCCESSORS(1):[[NEW_LOOP_LATCH0]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[NEW_LOOP_LATCH0]]:
; CHECK-NEXT:     i32 [[VP_IV_NEXT_SSA_PHI]] = phi  [ i32 [[VP_IV_NEXT]], [[BB4]] ],  [ i32 undef, [[INTERMEDIATE_BB0]] ]
; CHECK-NEXT:     i32 [[VP_EXIT_ID_PHI:%.*]] = phi  [ i32 0, [[BB4]] ],  [ i32 1, [[INTERMEDIATE_BB0]] ]
; CHECK-NEXT:     i1 [[VP_TAKE_BACKEDGE_COND:%.*]] = phi  [ i1 [[VP_BOTTOM_TEST]], [[BB4]] ],  [ i1 false, [[INTERMEDIATE_BB0]] ]
; CHECK-NEXT:    SUCCESSORS(2):[[BB1]](i1 [[VP_TAKE_BACKEDGE_COND]]), [[CASCADED_IF_BLOCK0:cascaded.if.block[0-9]+]](!i1 [[VP_TAKE_BACKEDGE_COND]])
; CHECK-NEXT:    PREDECESSORS(2): [[BB4]] [[INTERMEDIATE_BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[CASCADED_IF_BLOCK0]]:
; CHECK-NEXT:     i1 [[VP0:%.*]] = icmp i32 [[VP_EXIT_ID_PHI]] i32 1
; CHECK-NEXT:    SUCCESSORS(2):[[BB5:BB[0-9]+]](i1 [[VP0]]), [[BB6:BB[0-9]+]](!i1 [[VP0]])
; CHECK-NEXT:    PREDECESSORS(1): [[NEW_LOOP_LATCH0]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB6]]:
; CHECK-NEXT:       <Empty Block>
; CHECK-NEXT:      SUCCESSORS(1):[[BB7:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(1): [[CASCADED_IF_BLOCK0]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB5]]:
; CHECK-NEXT:       <Empty Block>
; CHECK-NEXT:      SUCCESSORS(1):[[BB7]]
; CHECK-NEXT:      PREDECESSORS(1): [[CASCADED_IF_BLOCK0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB7]]:
; CHECK-NEXT:     void [[VP1:%.*]] = ret
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(2): [[BB5]] [[BB6]]
;
entry:
  %lane = call i32 @llvm.vplan.laneid()
  br label %inner_loop_header
;-------------------------------------------------------------------------------
;             BEFORE                                       AFTER
;-------------------------------------------------------------------------------
; +------>inner_loop_header            +----------->BB1(inner_loop_header)
; |         /                          |               |
; |       bb1                          |            BB2(bb1)
; |        |                           |               |
; |       bb2 -----------+             |            BB3(bb2)
; |        |             |             |            /      \
; +-inner_loop_latch     |             |          BB4   INTERMEDIATE_BB0
;          |             |           (inner_loop_latch)       |
;       exitbb2       exitbb1          |           \          |
;                                      +----------NEW_LOOP_LATCH0
;                                                        |
;                                                 CASCADED_IF_BLOCK0
;                                                    /         \
;                                          (exitbb1)BB5    (exitbb2)BB6
inner_loop_header:
  %iv = phi i32 [ 0, %entry ], [ %iv_next, %inner_loop_latch ]
  %def_phi = phi i32 [ 0, %entry ], [ %def, %inner_loop_latch ]
  %var1 = add nsw i32 %iv, %def_phi
  br label %bb1

bb1:
  %def = add nsw i32 %iv, %var1
  br label %bb2

bb2:
  %var2 = add nsw i32 %def, 1
  %cmp2 = icmp eq i32 %var2, 32
  br i1 %cmp2, label %inner_loop_latch, label %exitbb1

inner_loop_latch:
  %iv_next = add nsw i32 %iv, 1
  %bottom_test = icmp eq i32 %iv_next, 128
  br i1 %bottom_test, label %inner_loop_header, label %exitbb2

exitbb1:
  br label %end

exitbb2:
  br label %end

end:
  ret void
}

declare i32 @llvm.vplan.laneid()
