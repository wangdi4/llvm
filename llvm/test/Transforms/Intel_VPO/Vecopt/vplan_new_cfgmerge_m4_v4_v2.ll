; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; The scenario requires static peeling, due to remainder is non-masked vector loop.
; This is enforced by planner: when scenario contains peel but peeling is disabled
; a static peel(1) is enforced.
; RUN: opt -vplan-vec-scenario="m4;v4;v2" \
; RUN: -disable-output -vplan-vec -vplan-enable-new-cfg-merge \
; RUN: -disable-vplan-codegen -vplan-enable-masked-variant \
; RUN: -vplan-print-after-create-in-merge -vplan-print-after-merge-pass2 \
; RUN: -vplan-enable-peeling=0 -vplan-print-after-merge-skeleton %s 2>&1 | FileCheck %s

target datalayout = "e-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024"
target triple = "x86_64-unknown-linux-gnu"

define void @test_store(i64* nocapture %ary, i32 %c) {
;
; CHECK-LABEL:  Single loop scenario:
; CHECK-NEXT:   MainLoop: unmasked, VF=4
; CHECK-NEXT:   PeelLoop: masked, VF=4
; CHECK-NEXT:   Remainders: unmasked, VF=2,
; CHECK-NEXT:  VPlan after adding existing one during merge:
; CHECK-NEXT:  VPlan IR for: test_store:for.body.#{{[0-9]+}}.cloned.masked
; CHECK-NEXT:    Cloned.[[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] br Cloned.[[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    Cloned.[[BB1]]: # preds: Cloned.[[BB0]]
; CHECK-NEXT:     [DA: Div] i64 [[VP0:%.*]] = induction-init{add} i64 live-in0 i64 1
; CHECK-NEXT:     [DA: Uni] i64 [[VP1:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:     [DA: Uni] br Cloned.[[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    Cloned.[[BB2]]: # preds: Cloned.[[BB1]], new_latch
; CHECK-NEXT:     [DA: Div] i64 [[VP_INDVARS_IV:%.*]] = phi  [ i64 [[VP0]], Cloned.[[BB1]] ],  [ i64 [[VP_INDVARS_IV_NEXT:%.*]], new_latch ]
; CHECK-NEXT:     [DA: Div] i1 [[VP2:%.*]] = icmp ult i64 [[VP_INDVARS_IV]] i64 1024
; CHECK-NEXT:     [DA: Uni] br [[BB3:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: Cloned.[[BB2]]
; CHECK-NEXT:     [DA: Div] i1 [[VP3:%.*]] = block-predicate i1 [[VP2]]
; CHECK-NEXT:     [DA: Div] i64* [[VP_PTR:%.*]] = getelementptr inbounds i64* [[ARY0:%.*]] i64 [[VP_INDVARS_IV]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP_CC:%.*]] = sext i32 [[C0:%.*]] to i64
; CHECK-NEXT:     [DA: Div] i64 [[VP_ADD:%.*]] = add i64 [[VP_CC]] i64 [[VP_INDVARS_IV]]
; CHECK-NEXT:     [DA: Div] store i64 [[VP_ADD]] i64* [[VP_PTR]]
; CHECK-NEXT:     [DA: Uni] br new_latch
; CHECK-EMPTY:
; CHECK-NEXT:    new_latch: # preds: [[BB3]]
; CHECK-NEXT:     [DA: Div] i64 [[VP_INDVARS_IV_NEXT]] = add i64 [[VP_INDVARS_IV]] i64 [[VP1]]
; CHECK-NEXT:     [DA: Div] i1 [[VP4:%.*]] = icmp ult i64 [[VP_INDVARS_IV_NEXT]] i64 1024
; CHECK-NEXT:     [DA: Uni] i1 [[VP5:%.*]] = all-zero-check i1 [[VP4]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP5]], Cloned.[[BB4:BB[0-9]+]], Cloned.[[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    Cloned.[[BB4]]: # preds: new_latch
; CHECK-NEXT:     [DA: Uni] i64 [[VP6:%.*]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Uni] br Cloned.[[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    Cloned.[[BB5]]: # preds: Cloned.[[BB4]]
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   no underlying for i64 [[VP6]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlan after adding existing one during merge:
; CHECK-NEXT:  VPlan IR for: test_store:for.body.#{{[0-9]+}}
; CHECK-NEXT:    [[BB6:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] br [[BB7:BB[0-9]+]] (SVAOpBits 0->F )
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB7]]: # preds: [[BB6]]
; CHECK-NEXT:     [DA: Div, SVA: (FV )] i64 [[VP_INDVARS_IV_IND_INIT:%.*]] = induction-init{add} i64 live-in0 i64 1 (SVAOpBits 0->F 1->F )
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] i64 [[VP_INDVARS_IV_IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1 (SVAOpBits 0->F )
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] i64 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i64 1024, UF = 1 (SVAOpBits 0->F )
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] br [[BB8:BB[0-9]+]] (SVAOpBits 0->F )
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB8]]: # preds: [[BB7]], [[BB8]]
; CHECK-NEXT:     [DA: Div, SVA: (FV )] i64 [[VP_INDVARS_IV_1:%.*]] = phi  [ i64 [[VP_INDVARS_IV_IND_INIT]], [[BB7]] ],  [ i64 [[VP_INDVARS_IV_NEXT_1:%.*]], [[BB8]] ] (SVAOpBits 0->FV 1->FV )
; CHECK-NEXT:     [DA: Div, SVA: (F  )] i64* [[VP_PTR_1:%.*]] = getelementptr inbounds i64* [[ARY0]] i64 [[VP_INDVARS_IV_1]] (SVAOpBits 0->F 1->F )
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] i64 [[VP_CC_1:%.*]] = sext i32 [[C0]] to i64 (SVAOpBits 0->F )
; CHECK-NEXT:     [DA: Div, SVA: ( V )] i64 [[VP_ADD_1:%.*]] = add i64 [[VP_CC_1]] i64 [[VP_INDVARS_IV_1]] (SVAOpBits 0->V 1->V )
; CHECK-NEXT:     [DA: Div, SVA: ( V )] store i64 [[VP_ADD_1]] i64* [[VP_PTR_1]] (SVAOpBits 0->V 1->F )
; CHECK-NEXT:     [DA: Div, SVA: (FV )] i64 [[VP_INDVARS_IV_NEXT_1]] = add i64 [[VP_INDVARS_IV_1]] i64 [[VP_INDVARS_IV_IND_INIT_STEP]] (SVAOpBits 0->FV 1->FV )
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] i1 [[VP_VECTOR_LOOP_EXITCOND:%.*]] = icmp ult i64 [[VP_INDVARS_IV_NEXT_1]] i64 [[VP_VECTOR_TRIP_COUNT]] (SVAOpBits 0->F 1->F )
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] br i1 [[VP_VECTOR_LOOP_EXITCOND]], [[BB8]], [[BB9:BB[0-9]+]] (SVAOpBits 0->F 1->F 2->F )
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB9]]: # preds: [[BB8]]
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] i64 [[VP_INDVARS_IV_IND_FINAL:%.*]] = induction-final{add} i64 0 i64 1 (SVAOpBits 0->F 1->F )
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] br [[BB10:BB[0-9]+]] (SVAOpBits 0->F )
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB10]]: # preds: [[BB9]]
; CHECK-NEXT:     [DA: Uni, SVA: (F  )] br <External Block> (SVAOpBits )
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   no underlying for i64 [[VP_INDVARS_IV_IND_FINAL]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlan after creation during merge:
; CHECK-NEXT:  VPlan IR for: test_store:for.body.#{{[0-9]+}}.cloned
; CHECK-NEXT:    Cloned.[[BB11:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] br Cloned.[[BB12:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    Cloned.[[BB12]]: # preds: Cloned.[[BB11]]
; CHECK-NEXT:     [DA: Div] i64 [[VP7:%.*]] = induction-init{add} i64 live-in0 i64 1
; CHECK-NEXT:     [DA: Uni] i64 [[VP8:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:     [DA: Uni] i64 [[VP9:%.*]] = vector-trip-count i64 1024, UF = 1
; CHECK-NEXT:     [DA: Uni] br Cloned.[[BB13:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    Cloned.[[BB13]]: # preds: Cloned.[[BB12]], Cloned.[[BB13]]
; CHECK-NEXT:     [DA: Div] i64 [[VP_INDVARS_IV_2:%.*]] = phi  [ i64 [[VP7]], Cloned.[[BB12]] ],  [ i64 [[VP_INDVARS_IV_NEXT_2:%.*]], Cloned.[[BB13]] ]
; CHECK-NEXT:     [DA: Div] i64* [[VP_PTR_2:%.*]] = getelementptr inbounds i64* [[ARY0]] i64 [[VP_INDVARS_IV_2]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP_CC_2:%.*]] = sext i32 [[C0]] to i64
; CHECK-NEXT:     [DA: Div] i64 [[VP_ADD_2:%.*]] = add i64 [[VP_CC_2]] i64 [[VP_INDVARS_IV_2]]
; CHECK-NEXT:     [DA: Div] store i64 [[VP_ADD_2]] i64* [[VP_PTR_2]]
; CHECK-NEXT:     [DA: Div] i64 [[VP_INDVARS_IV_NEXT_2]] = add i64 [[VP_INDVARS_IV_2]] i64 [[VP8]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP10:%.*]] = icmp ult i64 [[VP_INDVARS_IV_NEXT_2]] i64 [[VP9]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP10]], Cloned.[[BB13]], Cloned.[[BB14:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    Cloned.[[BB14]]: # preds: Cloned.[[BB13]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP11:%.*]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Uni] br Cloned.[[BB15:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    Cloned.[[BB15]]: # preds: Cloned.[[BB14]]
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   no underlying for i64 [[VP11]]
; CHECK-EMPTY:
; CHECK-NEXT:  List of VPlans added for merging:
; CHECK-NEXT:  VPlan: test_store:for.body.#{{[0-9]+}}.cloned
; CHECK-NEXT:    Kind: remainder VF:2
; CHECK-NEXT:  VPlan: test_store:for.body.#{{[0-9]+}}
; CHECK-NEXT:    Kind: main VF:4
; CHECK-NEXT:  VPlan: test_store:for.body.#{{[0-9]+}}.cloned.masked
; CHECK-NEXT:    Kind: peel VF:4
; CHECK-NEXT:  VPlan after merge skeleton creation:
; CHECK-NEXT:  VPlan IR for: test_store:for.body.#{{[0-9]+}}
; CHECK-NEXT:    [[PEEL_CHECKZ0:peel.checkz[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] pushvf VF=4 UF=1
; CHECK-NEXT:     [DA: Uni] br [[BB16:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB16]]: # preds: [[PEEL_CHECKZ0]]
; CHECK-NEXT:     [DA: Uni] token [[VP_VPLAN_PEEL_ADAPTER:%.*]] = vplan-peel-adapter for VPlan {test_store:for.body.#{{[0-9]+}}.cloned.masked}
; CHECK-NEXT:     [DA: Uni] br [[MERGE_BLK0:merge.blk[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[MERGE_BLK0]]: # preds: [[BB16]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP12:%.*]] = phi-merge  [ token [[VP_VPLAN_PEEL_ADAPTER]], [[BB16]] ]
; CHECK-NEXT:     [DA: Uni] br [[BB17:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB17]]: # preds: [[MERGE_BLK0]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP13:%.*]] = add i64 1 i64 2
; CHECK-NEXT:     [DA: Uni] i1 [[VP_PEEL_VEC_TC_CHECK:%.*]] = icmp ugt i64 [[VP13]] i64 1024
; CHECK-NEXT:     [DA: Uni] br i1 [[VP_PEEL_VEC_TC_CHECK]], final.merge, [[BB18:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB18]]: # preds: [[BB17]]
; CHECK-NEXT:       [DA: Uni] i64 [[VP14:%.*]] = add i64 1 i64 4
; CHECK-NEXT:       [DA: Uni] i1 [[VP_PEEL_VEC_TC_CHECK_1:%.*]] = icmp ugt i64 [[VP14]] i64 1024
; CHECK-NEXT:       [DA: Uni] br i1 [[VP_PEEL_VEC_TC_CHECK_1]], [[MERGE_BLK1:merge.blk[0-9]+]], [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB6]]: # preds: [[BB18]]
; CHECK-NEXT:         [DA: Uni] pushvf VF=4 UF=1
; CHECK-NEXT:         [DA: Uni] br [[BB7]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB7]]: # preds: [[BB6]]
; CHECK-NEXT:         [DA: Div] i64 [[VP_INDVARS_IV_IND_INIT]] = induction-init{add} i64 live-in0 i64 1
; CHECK-NEXT:         [DA: Uni] i64 [[VP_INDVARS_IV_IND_INIT_STEP]] = induction-init-step{add} i64 1
; CHECK-NEXT:         [DA: Uni] i64 [[VP_VECTOR_TRIP_COUNT]] = vector-trip-count i64 1024 i64 1, UF = 1
; CHECK-NEXT:         [DA: Uni] br [[BB8]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB8]]: # preds: [[BB7]], [[BB8]]
; CHECK-NEXT:         [DA: Div] i64 [[VP_INDVARS_IV_1]] = phi  [ i64 [[VP_INDVARS_IV_IND_INIT]], [[BB7]] ],  [ i64 [[VP_INDVARS_IV_NEXT_1]], [[BB8]] ]
; CHECK-NEXT:         [DA: Div] i64* [[VP_PTR_1]] = getelementptr inbounds i64* [[ARY0]] i64 [[VP_INDVARS_IV_1]]
; CHECK-NEXT:         [DA: Uni] i64 [[VP_CC_1]] = sext i32 [[C0]] to i64
; CHECK-NEXT:         [DA: Div] i64 [[VP_ADD_1]] = add i64 [[VP_CC_1]] i64 [[VP_INDVARS_IV_1]]
; CHECK-NEXT:         [DA: Div] store i64 [[VP_ADD_1]] i64* [[VP_PTR_1]]
; CHECK-NEXT:         [DA: Div] i64 [[VP_INDVARS_IV_NEXT_1]] = add i64 [[VP_INDVARS_IV_1]] i64 [[VP_INDVARS_IV_IND_INIT_STEP]]
; CHECK-NEXT:         [DA: Uni] i1 [[VP_VECTOR_LOOP_EXITCOND]] = icmp ult i64 [[VP_INDVARS_IV_NEXT_1]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:         [DA: Uni] br i1 [[VP_VECTOR_LOOP_EXITCOND]], [[BB8]], [[BB9]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB9]]: # preds: [[BB8]]
; CHECK-NEXT:         [DA: Uni] i64 [[VP_INDVARS_IV_IND_FINAL]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:         [DA: Uni] br [[BB10]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB10]]: # preds: [[BB9]]
; CHECK-NEXT:         [DA: Uni] popvf
; CHECK-NEXT:         [DA: Uni] br [[BB19:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB19]]: # preds: [[BB10]]
; CHECK-NEXT:         [DA: Uni] pushvf VF=2 UF=1
; CHECK-NEXT:         [DA: Div] i64 [[VP15:%.*]] = vector-trip-count i64 1024 i64 1, UF = 1
; CHECK-NEXT:         [DA: Uni] popvf
; CHECK-NEXT:         [DA: Uni] i1 [[VP_REMTC_CHECK:%.*]] = icmp eq i64 [[VP15]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:         [DA: Uni] br i1 [[VP_REMTC_CHECK]], final.merge, [[MERGE_BLK1]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[MERGE_BLK1]]: # preds: [[BB19]], [[BB18]]
; CHECK-NEXT:       [DA: Uni] i64 [[VP16:%.*]] = phi-merge  [ i64 live-out0, [[BB19]] ],  [ i64 [[VP12]], [[BB18]] ]
; CHECK-NEXT:       [DA: Uni] br [[BB20:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB20]]: # preds: [[MERGE_BLK1]]
; CHECK-NEXT:       [DA: Uni] token [[VP_VPLAN_ADAPTER:%.*]] = vplan-adapter for VPlan {test_store:for.body.#{{[0-9]+}}.cloned} i64 [[VP16]]
; CHECK-NEXT:       [DA: Uni] br final.merge
; CHECK-EMPTY:
; CHECK-NEXT:    final.merge: # preds: [[BB20]], [[BB19]], [[BB17]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP17:%.*]] = phi-merge  [ token [[VP_VPLAN_ADAPTER]], [[BB20]] ],  [ i64 live-out0, [[BB19]] ],  [ i64 [[VP12]], [[BB17]] ]
; CHECK-NEXT:     [DA: Uni] popvf
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   no underlying for i64 [[VP_INDVARS_IV_IND_FINAL]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlan after final merge pass:
; CHECK-NEXT:  VPlan IR for: test_store:for.body.#{{[0-9]+}}
; CHECK-NEXT:    [[PEEL_CHECKZ0]]: # preds:
; CHECK-NEXT:     [DA: Uni] pushvf VF=4 UF=1
; CHECK-NEXT:     [DA: Uni] br Cloned.[[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    Cloned.[[BB0]]: # preds: [[PEEL_CHECKZ0]]
; CHECK-NEXT:     [DA: Uni] pushvf VF=4 UF=1
; CHECK-NEXT:     [DA: Uni] br Cloned.[[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:    Cloned.[[BB1]]: # preds: Cloned.[[BB0]]
; CHECK-NEXT:     [DA: Div] i64 [[VP0]] = induction-init{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Uni] i64 [[VP1]] = induction-init-step{add} i64 1
; CHECK-NEXT:     [DA: Uni] br Cloned.[[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    Cloned.[[BB2]]: # preds: Cloned.[[BB1]], new_latch
; CHECK-NEXT:     [DA: Div] i64 [[VP_INDVARS_IV]] = phi  [ i64 [[VP0]], Cloned.[[BB1]] ],  [ i64 [[VP_INDVARS_IV_NEXT]], new_latch ]
; CHECK-NEXT:     [DA: Div] i1 [[VP2]] = icmp ult i64 [[VP_INDVARS_IV]] i64 1
; CHECK-NEXT:     [DA: Uni] br [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: Cloned.[[BB2]]
; CHECK-NEXT:     [DA: Div] i1 [[VP3]] = block-predicate i1 [[VP2]]
; CHECK-NEXT:     [DA: Div] i64* [[VP_PTR]] = getelementptr inbounds i64* [[ARY0]] i64 [[VP_INDVARS_IV]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP_CC]] = sext i32 [[C0]] to i64
; CHECK-NEXT:     [DA: Div] i64 [[VP_ADD]] = add i64 [[VP_CC]] i64 [[VP_INDVARS_IV]]
; CHECK-NEXT:     [DA: Div] store i64 [[VP_ADD]] i64* [[VP_PTR]]
; CHECK-NEXT:     [DA: Uni] br new_latch
; CHECK-EMPTY:
; CHECK-NEXT:    new_latch: # preds: [[BB3]]
; CHECK-NEXT:     [DA: Div] i64 [[VP_INDVARS_IV_NEXT]] = add i64 [[VP_INDVARS_IV]] i64 [[VP1]]
; CHECK-NEXT:     [DA: Div] i1 [[VP4]] = icmp ult i64 [[VP_INDVARS_IV_NEXT]] i64 1
; CHECK-NEXT:     [DA: Uni] i1 [[VP5]] = all-zero-check i1 [[VP4]]
; CHECK-NEXT:     [DA: Uni] br i1 [[VP5]], Cloned.[[BB4]], Cloned.[[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    Cloned.[[BB4]]: # preds: new_latch
; CHECK-NEXT:     [DA: Uni] i64 [[VP6]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:     [DA: Uni] br Cloned.[[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:    Cloned.[[BB5]]: # preds: Cloned.[[BB4]]
; CHECK-NEXT:     [DA: Uni] popvf
; CHECK-NEXT:     [DA: Uni] br [[MERGE_BLK0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[MERGE_BLK0]]: # preds: Cloned.[[BB5]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP12]] = phi-merge  [ i64 [[VP6]], Cloned.[[BB5]] ]
; CHECK-NEXT:     [DA: Uni] br [[BB17]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB17]]: # preds: [[MERGE_BLK0]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP13]] = add i64 1 i64 2
; CHECK-NEXT:     [DA: Uni] i1 [[VP_PEEL_VEC_TC_CHECK]] = icmp ugt i64 [[VP13]] i64 1024
; CHECK-NEXT:     [DA: Uni] br i1 [[VP_PEEL_VEC_TC_CHECK]], final.merge, [[BB18]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB18]]: # preds: [[BB17]]
; CHECK-NEXT:       [DA: Uni] i64 [[VP14]] = add i64 1 i64 4
; CHECK-NEXT:       [DA: Uni] i1 [[VP_PEEL_VEC_TC_CHECK_1]] = icmp ugt i64 [[VP14]] i64 1024
; CHECK-NEXT:       [DA: Uni] br i1 [[VP_PEEL_VEC_TC_CHECK_1]], [[MERGE_BLK1]], [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB6]]: # preds: [[BB18]]
; CHECK-NEXT:         [DA: Uni] pushvf VF=4 UF=1
; CHECK-NEXT:         [DA: Uni] br [[BB7]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB7]]: # preds: [[BB6]]
; CHECK-NEXT:         [DA: Div] i64 [[VP_INDVARS_IV_IND_INIT]] = induction-init{add} i64 [[VP12]] i64 1
; CHECK-NEXT:         [DA: Uni] i64 [[VP_INDVARS_IV_IND_INIT_STEP]] = induction-init-step{add} i64 1
; CHECK-NEXT:         [DA: Uni] i64 [[VP_VECTOR_TRIP_COUNT]] = vector-trip-count i64 1024 i64 1, UF = 1
; CHECK-NEXT:         [DA: Uni] br [[BB8]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB8]]: # preds: [[BB7]], [[BB8]]
; CHECK-NEXT:         [DA: Div] i64 [[VP_INDVARS_IV_1]] = phi  [ i64 [[VP_INDVARS_IV_IND_INIT]], [[BB7]] ],  [ i64 [[VP_INDVARS_IV_NEXT_1]], [[BB8]] ]
; CHECK-NEXT:         [DA: Div] i64* [[VP_PTR_1]] = getelementptr inbounds i64* [[ARY0]] i64 [[VP_INDVARS_IV_1]]
; CHECK-NEXT:         [DA: Uni] i64 [[VP_CC_1]] = sext i32 [[C0]] to i64
; CHECK-NEXT:         [DA: Div] i64 [[VP_ADD_1]] = add i64 [[VP_CC_1]] i64 [[VP_INDVARS_IV_1]]
; CHECK-NEXT:         [DA: Div] store i64 [[VP_ADD_1]] i64* [[VP_PTR_1]]
; CHECK-NEXT:         [DA: Div] i64 [[VP_INDVARS_IV_NEXT_1]] = add i64 [[VP_INDVARS_IV_1]] i64 [[VP_INDVARS_IV_IND_INIT_STEP]]
; CHECK-NEXT:         [DA: Uni] i1 [[VP_VECTOR_LOOP_EXITCOND]] = icmp ult i64 [[VP_INDVARS_IV_NEXT_1]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:         [DA: Uni] br i1 [[VP_VECTOR_LOOP_EXITCOND]], [[BB8]], [[BB9]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB9]]: # preds: [[BB8]]
; CHECK-NEXT:         [DA: Uni] i64 [[VP_INDVARS_IV_IND_FINAL]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:         [DA: Uni] br [[BB10]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB10]]: # preds: [[BB9]]
; CHECK-NEXT:         [DA: Uni] popvf
; CHECK-NEXT:         [DA: Uni] br [[BB19]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB19]]: # preds: [[BB10]]
; CHECK-NEXT:         [DA: Uni] pushvf VF=2 UF=1
; CHECK-NEXT:         [DA: Div] i64 [[VP15]] = vector-trip-count i64 1024 i64 1, UF = 1
; CHECK-NEXT:         [DA: Uni] popvf
; CHECK-NEXT:         [DA: Uni] i1 [[VP_REMTC_CHECK]] = icmp eq i64 [[VP15]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:         [DA: Uni] br i1 [[VP_REMTC_CHECK]], final.merge, [[MERGE_BLK1]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[MERGE_BLK1]]: # preds: [[BB19]], [[BB18]]
; CHECK-NEXT:       [DA: Uni] i64 [[VP16]] = phi-merge  [ i64 live-out0, [[BB19]] ],  [ i64 [[VP12]], [[BB18]] ]
; CHECK-NEXT:       [DA: Uni] br Cloned.[[BB11]]
; CHECK-EMPTY:
; CHECK-NEXT:      Cloned.[[BB11]]: # preds: [[MERGE_BLK1]]
; CHECK-NEXT:       [DA: Uni] pushvf VF=2 UF=1
; CHECK-NEXT:       [DA: Uni] br Cloned.[[BB12]]
; CHECK-EMPTY:
; CHECK-NEXT:      Cloned.[[BB12]]: # preds: Cloned.[[BB11]]
; CHECK-NEXT:       [DA: Div] i64 [[VP7]] = induction-init{add} i64 [[VP16]] i64 1
; CHECK-NEXT:       [DA: Uni] i64 [[VP8]] = induction-init-step{add} i64 1
; CHECK-NEXT:       [DA: Uni] i64 [[VP9]] = vector-trip-count i64 1024 i64 1, UF = 1
; CHECK-NEXT:       [DA: Uni] br Cloned.[[BB13]]
; CHECK-EMPTY:
; CHECK-NEXT:      Cloned.[[BB13]]: # preds: Cloned.[[BB12]], Cloned.[[BB13]]
; CHECK-NEXT:       [DA: Div] i64 [[VP_INDVARS_IV_2]] = phi  [ i64 [[VP7]], Cloned.[[BB12]] ],  [ i64 [[VP_INDVARS_IV_NEXT_2]], Cloned.[[BB13]] ]
; CHECK-NEXT:       [DA: Div] i64* [[VP_PTR_2]] = getelementptr inbounds i64* [[ARY0]] i64 [[VP_INDVARS_IV_2]]
; CHECK-NEXT:       [DA: Uni] i64 [[VP_CC_2]] = sext i32 [[C0]] to i64
; CHECK-NEXT:       [DA: Div] i64 [[VP_ADD_2]] = add i64 [[VP_CC_2]] i64 [[VP_INDVARS_IV_2]]
; CHECK-NEXT:       [DA: Div] store i64 [[VP_ADD_2]] i64* [[VP_PTR_2]]
; CHECK-NEXT:       [DA: Div] i64 [[VP_INDVARS_IV_NEXT_2]] = add i64 [[VP_INDVARS_IV_2]] i64 [[VP8]]
; CHECK-NEXT:       [DA: Uni] i1 [[VP10]] = icmp ult i64 [[VP_INDVARS_IV_NEXT_2]] i64 [[VP9]]
; CHECK-NEXT:       [DA: Uni] br i1 [[VP10]], Cloned.[[BB13]], Cloned.[[BB14]]
; CHECK-EMPTY:
; CHECK-NEXT:      Cloned.[[BB14]]: # preds: Cloned.[[BB13]]
; CHECK-NEXT:       [DA: Uni] i64 [[VP11]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:       [DA: Uni] br Cloned.[[BB15]]
; CHECK-EMPTY:
; CHECK-NEXT:      Cloned.[[BB15]]: # preds: Cloned.[[BB14]]
; CHECK-NEXT:       [DA: Uni] popvf
; CHECK-NEXT:       [DA: Uni] br final.merge
; CHECK-EMPTY:
; CHECK-NEXT:    final.merge: # preds: [[BB19]], [[BB17]], Cloned.[[BB15]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP17]] = phi-merge  [ i64 [[VP11]], Cloned.[[BB15]] ],  [ i64 live-out0, [[BB19]] ],  [ i64 [[VP12]], [[BB17]] ]
; CHECK-NEXT:     [DA: Uni] popvf
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   no underlying for i64 [[VP_INDVARS_IV_IND_FINAL]]
;
entry:
  %entry.region = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %for.body

for.body:
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %ptr = getelementptr inbounds i64, i64* %ary, i64 %indvars.iv
  %cc = sext i32 %c to i64
  %add = add i64 %cc, %indvars.iv
  store i64 %add, i64* %ptr, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %cmp = icmp ult i64 %indvars.iv.next, 1024
  br i1 %cmp, label %for.body, label %for.end

for.end:
  call void @llvm.directive.region.exit(token %entry.region) [ "DIR.OMP.END.SIMD"() ]
  ret void
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
