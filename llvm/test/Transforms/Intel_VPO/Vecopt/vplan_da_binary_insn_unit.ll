; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py

; REQUIRES: asserts
; RUN: opt -passes=vplan-vec -vplan-dump-da -disable-output %s 2>&1 | FileCheck %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define dso_local void @XNU() local_unnamed_addr #0 {
; CHECK:       Printing Divergence info for Loop at depth 1 containing: [[BB0:BB[0-9]+]]<header>,[[BB1:BB[0-9]+]],[[BB2:BB[0-9]+]]<latch><exiting>
; CHECK-NEXT:      Loop at depth 2 containing: [[BB1]]<header><latch><exiting>
; CHECK-EMPTY:
; CHECK-NEXT:  Basic Block: [[BB0]]
; CHECK-NEXT:  Uniform: [Shape: Uniform] i64 [[VP_VECTOR_LOOP_IV:%.*]] = phi  [ i64 0, [[BB3:BB[0-9]+]] ],  [ i64 [[VP_VECTOR_LOOP_IV_NEXT:%.*]], [[BB2]] ]
; CHECK-NEXT:  Divergent: [Shape: Unit Stride, Stride: i64 1] i64 [[VP_ADD_PHI:%.*]] = phi  [ i64 [[VP_ADD_PHI_IND_INIT:%.*]], [[BB3]] ],  [ i64 [[VP_ADD:%.*]], [[BB2]] ]
; CHECK-NEXT:  Divergent: [Shape: Unit Stride, Stride: i64 1] i64 [[VP_OUTER_LOOP_INDUCTION_PHI:%.*]] = phi  [ i64 [[VP_OUTER_LOOP_INDUCTION_PHI_IND_INIT:%.*]], [[BB3]] ],  [ i64 [[VP_OUTER_LOOP_INDUCTION:%.*]], [[BB2]] ]
; CHECK-NEXT:  Divergent: [Shape: Unit Stride, Stride: i64 1] i64 [[VP_ADD]] = add i64 [[VP_ADD_PHI]] i64 [[VP_ADD_PHI_IND_INIT_STEP:%.*]]
; CHECK-NEXT:  Uniform: [Shape: Uniform] br [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:  Basic Block: [[BB1]]
; CHECK-NEXT:  Divergent: [Shape: Unit Stride, Stride: i64 1] i64 [[VP_INNER_LOOP_INDUCTION_PHI:%.*]] = phi  [ i64 [[VP_OUTER_LOOP_INDUCTION_PHI]], [[BB0]] ],  [ i64 [[VP_INNER_LOOP_INDUCTION:%.*]], [[BB1]] ]
; CHECK-NEXT:  Uniform: [Shape: Uniform] i64 [[VP_SUB:%.*]] = sub i64 [[VP_INNER_LOOP_INDUCTION_PHI]] i64 [[VP_ADD_PHI]]
; CHECK-NEXT:  Divergent: [Shape: Unit Stride, Stride: i64 1] i64 [[VP_INNER_LOOP_INDUCTION]] = add i64 [[VP_INNER_LOOP_INDUCTION_PHI]] i64 1
; CHECK-NEXT:  Uniform: [Shape: Uniform] br i1 undef, [[BB2]], [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:  Basic Block: [[BB2]]
; CHECK-NEXT:  Divergent: [Shape: Unit Stride, Stride: i64 1] i64 [[VP_OUTER_LOOP_INDUCTION]] = add i64 [[VP_OUTER_LOOP_INDUCTION_PHI]] i64 [[VP_OUTER_LOOP_INDUCTION_PHI_IND_INIT_STEP:%.*]]
; CHECK-NEXT:  Uniform: [Shape: Uniform] i64 [[VP_VECTOR_LOOP_IV_NEXT]] = add i64 [[VP_VECTOR_LOOP_IV]] i64 [[VP_VF:%.*]]
; CHECK-NEXT:  Uniform: [Shape: Uniform] i1 [[VP_VECTOR_LOOP_EXITCOND:%.*]] = icmp uge i64 [[VP_VECTOR_LOOP_IV_NEXT]] i64 [[VP_VECTOR_TRIP_COUNT:%.*]]
; CHECK-NEXT:  Uniform: [Shape: Uniform] br i1 [[VP_VECTOR_LOOP_EXITCOND]], [[BB4:BB[0-9]+]], [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:  Basic Block: [[BB4]]
; CHECK-NEXT:  Uniform: [Shape: Uniform] i64 [[VP_ADD_PHI_IND_FINAL:%.*]] = induction-final{add} i64 1 i64 1
; CHECK-NEXT:  Uniform: [Shape: Uniform] i64 [[VP_OUTER_LOOP_INDUCTION_PHI_IND_FINAL:%.*]] = induction-final{add} i64 2 i64 1
; CHECK-NEXT:  Uniform: [Shape: Uniform] br [[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:  Basic Block: [[BB5]]
; CHECK-NEXT:  Uniform: [Shape: Uniform] br <External Block>
;
entry:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %outer.loop

outer.loop:                                       ; preds = %outer.loop.latch, %entry
  %add.phi = phi i64 [ 1, %entry ], [ %add, %outer.loop.latch ]
  %outer.loop.induction.phi = phi i64 [ 2, %entry ], [ %outer.loop.induction, %outer.loop.latch ]
  %add = add nuw nsw i64 %add.phi, 1
  br label %inner.loop

inner.loop:                                       ; preds = %inner.loop, %outer.loop
  %inner.loop.induction.phi = phi i64 [ %outer.loop.induction.phi, %outer.loop ], [ %inner.loop.induction, %inner.loop ]
  %sub = sub nuw nsw i64 %inner.loop.induction.phi, %add.phi
  %inner.loop.induction = add nuw nsw i64 %inner.loop.induction.phi, 1
  br i1 undef, label %outer.loop.latch, label %inner.loop

outer.loop.latch:                                        ; preds = %inner.loop
  %outer.loop.induction = add nuw nsw i64 %outer.loop.induction.phi, 1
  %exit.cond = icmp eq i64 %outer.loop.induction, 5
  br i1 %exit.cond, label %exit, label %outer.loop

exit:                            ; preds = %outer.loop.latch
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"()]
  ret void
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

attributes #0 = { "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }

!llvm.ident = !{!0}

!0 = !{!"Intel(R) oneAPI DPC++ Compiler 2021.1 (YYYY.x.0.MMDD)"}
