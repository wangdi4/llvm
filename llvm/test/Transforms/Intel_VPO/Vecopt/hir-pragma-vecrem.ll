; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; Check that pragma vecremainder works with cfg-merger enabled for HIR
; RUN: opt -enable-new-pm=0 -hir-ssa-deconstruction -hir-vec-dir-insert -hir-vplan-vec -disable-output -vplan-print-vec-scenario -print-after=hir-vplan-vec -vplan-enable-masked-vectorized-remainder=0 -vplan-enable-non-masked-vectorized-remainder=0 %s 2>&1 | FileCheck %s
; RUN: opt -passes="hir-ssa-deconstruction,hir-vec-dir-insert,hir-vplan-vec,print<hir>" -disable-output -vplan-print-vec-scenario -vplan-enable-masked-vectorized-remainder=0 -vplan-enable-non-masked-vectorized-remainder=0 %s 2>&1 | FileCheck %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly uwtable willreturn
define dso_local noundef i32 @_Z3fooPiii(i32* noalias nocapture noundef readonly %ptr, i32 noundef %n) local_unnamed_addr {
; CHECK-LABEL:  Updated scenario for VF: 2
; CHECK-NEXT:  Single loop scenario:
; CHECK-NEXT:   MainLoop: unmasked, VF=2
; CHECK-NEXT:   PeelLoop: none
; CHECK-NEXT:   Remainders: masked, VF=2,
; CHECK-NEXT:  Updated scenario for VF: 4
; CHECK-NEXT:  Single loop scenario:
; CHECK-NEXT:   MainLoop: unmasked, VF=4
; CHECK-NEXT:   PeelLoop: none
; CHECK-NEXT:   Remainders: unmasked, VF=2,scalar,
; CHECK-NEXT:  Updated scenario for VF: 8
; CHECK-NEXT:  Single loop scenario:
; CHECK-NEXT:   MainLoop: unmasked, VF=8
; CHECK-NEXT:   PeelLoop: none
; CHECK-NEXT:   Remainders: unmasked, VF=4,scalar,
; CHECK-NEXT:  Updated scenario for VF: 16
; CHECK-NEXT:  Single loop scenario:
; CHECK-NEXT:   MainLoop: unmasked, VF=16
; CHECK-NEXT:   PeelLoop: none
; CHECK-NEXT:   Remainders: unmasked, VF=4,scalar,
; CHECK-NEXT:  Single loop scenario:
; CHECK-NEXT:   MainLoop: unmasked, VF=16
; CHECK-NEXT:   PeelLoop: none
; CHECK-NEXT:   Remainders: unmasked, VF=4,scalar,
; CHECK:       Function: _Z3fooPiii
; CHECK:       BEGIN REGION { modified }
; CHECK-NEXT:        [[TGU0:%.*]] = [[N0:%.*]]  /u  4
; CHECK-NEXT:        [[VEC_TC0:%.*]] = [[TGU0]]  *  4
; CHECK-NEXT:        [[DOTVEC0:%.*]] = 0 == [[VEC_TC0]]
; CHECK-NEXT:        [[PHI_TEMP0:%.*]] = [[S_090:%.*]];
; CHECK-NEXT:        [[PHI_TEMP10:%.*]] = 0
; CHECK-NEXT:        [[EXTRACT_0_0:%.*]] = extractelement [[DOTVEC0]],  0
; CHECK-NEXT:        if ([[EXTRACT_0_0]] == 1)
; CHECK-NEXT:        {
; CHECK-NEXT:           goto [[MERGE_BLK0:merge.blk[0-9]+]].23
; CHECK-NEXT:        }
; CHECK-NEXT:        [[TGU30:%.*]] = [[N0]]  /u  16
; CHECK-NEXT:        [[VEC_TC40:%.*]] = [[TGU30]]  *  16
; CHECK-NEXT:        [[DOTVEC50:%.*]] = 0 == [[VEC_TC40]]
; CHECK-NEXT:        [[PHI_TEMP60:%.*]] = [[S_090]]
; CHECK-NEXT:        [[PHI_TEMP80:%.*]] = 0
; CHECK-NEXT:        [[EXTRACT_0_100:%.*]] = extractelement [[DOTVEC50]],  0
; CHECK-NEXT:        if ([[EXTRACT_0_100]] == 1)
; CHECK-NEXT:        {
; CHECK-NEXT:           goto [[MERGE_BLK1:merge.blk[0-9]+]].34
; CHECK-NEXT:        }
; CHECK-NEXT:        [[TGU110:%.*]] = [[N0]]  /u  16
; CHECK-NEXT:        [[VEC_TC120:%.*]] = [[TGU110]]  *  16
; CHECK-NEXT:        [[RED_INIT0:%.*]] = 0
; CHECK-NEXT:        [[RED_INIT_INSERT0:%.*]] = insertelement [[RED_INIT0]],  [[S_090]],  0
; CHECK-NEXT:        [[PHI_TEMP130:%.*]] = [[RED_INIT_INSERT0]]
; CHECK-NEXT:        [[LOOP_UB0:%.*]] = [[VEC_TC120]]  -  1
; CHECK:             + DO i1 = 0, [[LOOP_UB0]], 16   <DO_LOOP> <auto-vectorized> <nounroll> <novectorize>
; CHECK-NEXT:        |   [[DOTVEC150:%.*]] = (<16 x i32>*)([[PTR0:%.*]])[i1]
; CHECK-NEXT:        |   [[DOTVEC160:%.*]] = [[DOTVEC150]]  +  [[PHI_TEMP130]]
; CHECK-NEXT:        |   [[PHI_TEMP130]] = [[DOTVEC160]]
; CHECK-NEXT:        + END LOOP
; CHECK:             [[S_090]] = @llvm.vector.reduce.add.v16i32([[DOTVEC160]])
; CHECK-NEXT:        [[IND_FINAL0:%.*]] = 0  +  [[VEC_TC120]]
; CHECK-NEXT:        [[TGU180:%.*]] = [[N0]]  /u  4
; CHECK-NEXT:        [[VEC_TC190:%.*]] = [[TGU180]]  *  4
; CHECK-NEXT:        [[DOTVEC200:%.*]] = [[VEC_TC190]] == [[VEC_TC120]]
; CHECK-NEXT:        [[PHI_TEMP60]] = [[S_090]]
; CHECK-NEXT:        [[PHI_TEMP80]] = [[IND_FINAL0]]
; CHECK-NEXT:        [[PHI_TEMP230:%.*]] = [[S_090]]
; CHECK-NEXT:        [[PHI_TEMP250:%.*]] = [[IND_FINAL0]]
; CHECK-NEXT:        [[EXTRACT_0_270:%.*]] = extractelement [[DOTVEC200]],  0
; CHECK-NEXT:        if ([[EXTRACT_0_270]] == 1)
; CHECK-NEXT:        {
; CHECK-NEXT:           goto [[MERGE_BLK2:merge.blk[0-9]+]].66
; CHECK-NEXT:        }
; CHECK-NEXT:        [[MERGE_BLK1]].34:
; CHECK-NEXT:        [[DOTVEC280:%.*]] = [[N0]] + -1  +  1
; CHECK-NEXT:        [[DOTSCAL0:%.*]] = [[N0]] + -1  +  1
; CHECK-NEXT:        [[TGU290:%.*]] = [[N0]]  /u  4
; CHECK-NEXT:        [[VEC_TC300:%.*]] = [[TGU290]]  *  4
; CHECK-NEXT:        [[RED_INIT310:%.*]] = 0
; CHECK-NEXT:        [[RED_INIT_INSERT320:%.*]] = insertelement [[RED_INIT310]],  [[PHI_TEMP60]],  0
; CHECK-NEXT:        [[TMP0:%.*]] = [[PHI_TEMP80]]  +  <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:        [[PHI_TEMP330:%.*]] = [[RED_INIT_INSERT320]]
; CHECK-NEXT:        [[LOOP_UB350:%.*]] = [[VEC_TC300]]  -  1
; CHECK:             + DO i1 = [[PHI_TEMP80]], [[LOOP_UB350]], 4   <DO_LOOP>  <MAX_TC_EST = 3>  <LEGAL_MAX_TC = 3> <vector-remainder> <nounroll> <novectorize> <max_trip_count = 3>
; CHECK-NEXT:        |   [[DOTVEC360:%.*]] = (<4 x i32>*)([[PTR0]])[i1]
; CHECK-NEXT:        |   [[DOTVEC370:%.*]] = [[DOTVEC360]]  +  [[PHI_TEMP330]]
; CHECK-NEXT:        |   [[PHI_TEMP330]] = [[DOTVEC370]]
; CHECK-NEXT:        + END LOOP
; CHECK:             [[S_090]] = @llvm.vector.reduce.add.v4i32([[DOTVEC370]])
; CHECK-NEXT:        [[IND_FINAL400:%.*]] = 0  +  [[VEC_TC300]]
; CHECK-NEXT:        [[PHI_TEMP230]] = [[S_090]]
; CHECK-NEXT:        [[PHI_TEMP250]] = [[IND_FINAL400]]
; CHECK-NEXT:        [[MERGE_BLK2]].66:
; CHECK-NEXT:        [[TGU430:%.*]] = [[N0]]  /u  4
; CHECK-NEXT:        [[VEC_TC440:%.*]] = [[TGU430]]  *  4
; CHECK-NEXT:        [[DOTVEC450:%.*]] = [[N0]] == [[VEC_TC440]]
; CHECK-NEXT:        [[PHI_TEMP0]] = [[PHI_TEMP230]]
; CHECK-NEXT:        [[PHI_TEMP10]] = [[PHI_TEMP250]]
; CHECK-NEXT:        [[PHI_TEMP480:%.*]] = [[PHI_TEMP230]]
; CHECK-NEXT:        [[PHI_TEMP500:%.*]] = [[PHI_TEMP250]]
; CHECK-NEXT:        [[EXTRACT_0_520:%.*]] = extractelement [[DOTVEC450]],  0
; CHECK-NEXT:        if ([[EXTRACT_0_520]] == 1)
; CHECK-NEXT:        {
; CHECK-NEXT:           goto final.merge.106
; CHECK-NEXT:        }
; CHECK-NEXT:        [[MERGE_BLK0]].23:
; CHECK-NEXT:        [[LB_TMP0:%.*]] = [[PHI_TEMP10]]
; CHECK-NEXT:        [[S_090]] = [[PHI_TEMP0]]
; CHECK:             + DO i1 = [[LB_TMP0]], [[N0]] + -1, 1   <DO_LOOP>  <MAX_TC_EST = 15>  <LEGAL_MAX_TC = 15> <vector-remainder> <nounroll> <novectorize> <max_trip_count = 15>
; CHECK-NEXT:        |   [[TMP1:%.*]] = ([[PTR0]])[i1]
; CHECK-NEXT:        |   [[S_090]] = [[TMP1]]  +  [[S_090]]
; CHECK-NEXT:        + END LOOP
; CHECK:             [[PHI_TEMP480]] = [[S_090]]
; CHECK-NEXT:        [[PHI_TEMP500]] = [[N0]] + -1
; CHECK-NEXT:        final.merge.106:
; CHECK-NEXT:  END REGION
;

entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  %s.0.lcssa = phi i32 [ %add, %for.body ]
  ret i32 %s.0.lcssa

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i32 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %s.09 = phi i32 [ 0, %entry ], [ %add, %for.body ]
  %arrayidx = getelementptr inbounds i32, i32* %ptr, i32 %indvars.iv
  %0 = load i32, i32* %arrayidx, align 4
  %add = add nsw i32 %0, %s.09
  %indvars.iv.next = add nuw nsw i32 %indvars.iv, 1
  %exitcond.not = icmp eq i32 %indvars.iv.next, %n
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !llvm.loop !0
}

!0 = distinct !{!0, !1, !2}
!1 = !{!"llvm.loop.mustprogress"}
!2 = !{!"llvm.loop.intel.vector.vecremainder", !"true"}

