; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -vplan-enable-new-cfg-merge-hir=false %s -hir-ssa-deconstruction -hir-framework -hir-temp-cleanup -hir-vec-dir-insert -disable-output -hir-vplan-vec -print-after=hir-vplan-vec -vplan-force-vf=4 2>&1 | FileCheck %s
; RUN: opt -vplan-enable-new-cfg-merge-hir %s -hir-ssa-deconstruction -hir-framework -hir-temp-cleanup -hir-vec-dir-insert -disable-output -hir-vplan-vec -print-after=hir-vplan-vec -vplan-force-vf=4 2>&1 | FileCheck %s

; This tests verifies that MinMax+Index idiom recognition bails out for vector types in select instruction.

define void @foo() {
; CHECK:      BEGIN REGION { modified }
; CHECK-NEXT:       + DO i1 = 0, 159, 4   <DO_LOOP> <auto-vectorized> <novectorize>
; CHECK-NEXT:       |   [[DOTVEC0:%.*]] = undef < <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
; CHECK-NEXT:       |   [[DOTVEC10:%.*]] = (undef < <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>) ? undef : <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
; CHECK-NEXT:       + END LOOP
; CHECK:      END REGION
;
  %1 = zext i32 159 to i64
  br label %2

2:                                                ; preds = %2, %0
  %3 = phi i64 [ %6, %2 ], [ 0, %0 ]
  %4 = icmp slt <2 x i32> undef, <i32 255, i32 255>
  %5 = select <2 x i1> %4, <2 x i32> undef, <2 x i32> <i32 255, i32 255>
  %6 = add nuw nsw i64 %3, 1
  %7 = icmp eq i64 %3, %1
  br i1 %7, label %8, label %2

8:                                                ; preds = %2
  ret void
}
