; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -vplan-vec-scenario="m4;v4;m4" \
; RUN: -disable-output -vplan-vec -vplan-enable-new-cfg-merge \
; RUN: -print-after=vplan-vec\
; RUN: -vplan-enable-peeling %s 2>&1 | FileCheck %s

target datalayout = "e-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024"
target triple = "x86_64-unknown-linux-gnu"

define void @test_store(i64* nocapture %ary, i32 %c) {
;
; CHECK-LABEL: @test_store(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label [[PEEL_CHECKL27:%.*]]
; CHECK:       peel.checkl27:
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <4 x i64*> poison, i64* [[ARY:%.*]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <4 x i64*> [[BROADCAST_SPLATINSERT]], <4 x i64*> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint <4 x i64*> [[BROADCAST_SPLAT]] to <4 x i64>
; CHECK-NEXT:    [[DOTEXTRACT_0_:%.*]] = extractelement <4 x i64> [[TMP0]], i32 0
; CHECK-NEXT:    [[TMP1:%.*]] = and i64 [[DOTEXTRACT_0_]], 7
; CHECK-NEXT:    [[TMP2:%.*]] = icmp eq i64 0, [[TMP1]]
; CHECK-NEXT:    br i1 [[TMP2]], label [[PEEL_CHECKZ26:%.*]], label [[MERGE_BLK22:%.*]]
; CHECK:       peel.checkz26:
; CHECK-NEXT:    [[TMP3:%.*]] = ptrtoint <4 x i64*> [[BROADCAST_SPLAT]] to <4 x i64>
; CHECK-NEXT:    [[DOTEXTRACT_0_1:%.*]] = extractelement <4 x i64> [[TMP3]], i32 0
; CHECK-NEXT:    [[TMP4:%.*]] = udiv i64 [[DOTEXTRACT_0_1]], 8
; CHECK-NEXT:    [[TMP5:%.*]] = mul i64 [[TMP4]], 3
; CHECK-NEXT:    [[TMP6:%.*]] = urem i64 [[TMP5]], 4
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT4:%.*]] = insertelement <4 x i64> poison, i64 [[TMP6]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT5:%.*]] = shufflevector <4 x i64> [[BROADCAST_SPLATINSERT4]], <4 x i64> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i64 0, [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label [[MERGE_BLK24:%.*]], label [[PEEL_CHECKV28:%.*]]
; CHECK:       peel.checkv28:
; CHECK-NEXT:    [[TMP8:%.*]] = add i64 [[TMP6]], 4
; CHECK-NEXT:    [[TMP9:%.*]] = icmp ugt i64 [[TMP8]], 1024
; CHECK-NEXT:    br i1 [[TMP9]], label [[MERGE_BLK22]], label [[VPLANNEDBB:%.*]]
; CHECK:       VPlannedBB:
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT7:%.*]] = insertelement <4 x i32> poison, i32 [[C:%.*]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT8:%.*]] = shufflevector <4 x i32> [[BROADCAST_SPLATINSERT7]], <4 x i32> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    br label [[VPLANNEDBB2:%.*]]
; CHECK:       VPlannedBB2:
; CHECK-NEXT:    br label [[VPLANNEDBB3:%.*]]
; CHECK:       VPlannedBB3:
; CHECK-NEXT:    [[UNI_PHI:%.*]] = phi i64 [ 0, [[VPLANNEDBB2]] ], [ [[TMP15:%.*]], [[NEW_LATCH:%.*]] ]
; CHECK-NEXT:    [[VEC_PHI:%.*]] = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, [[VPLANNEDBB2]] ], [ [[TMP14:%.*]], [[NEW_LATCH]] ]
; CHECK-NEXT:    [[TMP10:%.*]] = icmp ult <4 x i64> [[VEC_PHI]], [[BROADCAST_SPLAT5]]
; CHECK-NEXT:    br label [[VPLANNEDBB6:%.*]]
; CHECK:       VPlannedBB6:
; CHECK-NEXT:    [[SCALAR_GEP:%.*]] = getelementptr inbounds i64, i64* [[ARY]], i64 [[UNI_PHI]]
; CHECK-NEXT:    [[TMP11:%.*]] = sext <4 x i32> [[BROADCAST_SPLAT8]] to <4 x i64>
; CHECK-NEXT:    [[TMP12:%.*]] = add <4 x i64> [[TMP11]], [[VEC_PHI]]
; CHECK-NEXT:    [[TMP13:%.*]] = bitcast i64* [[SCALAR_GEP]] to <4 x i64>*
; CHECK-NEXT:    call void @llvm.masked.store.v4i64.p0v4i64(<4 x i64> [[TMP12]], <4 x i64>* [[TMP13]], i32 1, <4 x i1> [[TMP10]])
; CHECK-NEXT:    br label [[NEW_LATCH]]
; CHECK:       new_latch:
; CHECK-NEXT:    [[TMP14]] = add nuw nsw <4 x i64> [[VEC_PHI]], <i64 4, i64 4, i64 4, i64 4>
; CHECK-NEXT:    [[TMP15]] = add nuw nsw i64 [[UNI_PHI]], 4
; CHECK-NEXT:    [[TMP16:%.*]] = icmp ult <4 x i64> [[TMP14]], [[BROADCAST_SPLAT5]]
; CHECK-NEXT:    [[TMP17:%.*]] = bitcast <4 x i1> [[TMP16]] to i4
; CHECK-NEXT:    [[TMP18:%.*]] = icmp eq i4 [[TMP17]], 0
; CHECK-NEXT:    br i1 [[TMP18]], label [[VPLANNEDBB9:%.*]], label [[VPLANNEDBB3]]
; CHECK:       VPlannedBB9:
; CHECK-NEXT:    [[TMP19:%.*]] = mul i64 1, [[TMP6]]
; CHECK-NEXT:    [[TMP20:%.*]] = add i64 0, [[TMP19]]
; CHECK-NEXT:    br label [[VPLANNEDBB10:%.*]]
; CHECK:       VPlannedBB10:
; CHECK-NEXT:    br label [[MERGE_BLK24]]
; CHECK:       merge.blk24:
; CHECK-NEXT:    [[UNI_PHI11:%.*]] = phi i64 [ 0, [[PEEL_CHECKZ26]] ], [ [[TMP20]], [[VPLANNEDBB10]] ]
; CHECK-NEXT:    br label [[VPLANNEDBB12:%.*]]
; CHECK:       VPlannedBB12:
; CHECK-NEXT:    [[TMP21:%.*]] = add i64 [[TMP6]], 4
; CHECK-NEXT:    [[TMP22:%.*]] = icmp ugt i64 [[TMP21]], 1024
; CHECK-NEXT:    br i1 [[TMP22]], label [[MERGE_BLK22]], label [[VPLANNEDBB13:%.*]]
; CHECK:       VPlannedBB13:
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT19:%.*]] = insertelement <4 x i32> poison, i32 [[C]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT20:%.*]] = shufflevector <4 x i32> [[BROADCAST_SPLATINSERT19]], <4 x i32> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    br label [[VPLANNEDBB14:%.*]]
; CHECK:       VPlannedBB14:
; CHECK-NEXT:    [[UNI_PHI11IND_START_BCAST_SPLATINSERT:%.*]] = insertelement <4 x i64> poison, i64 [[UNI_PHI11]], i32 0
; CHECK-NEXT:    [[UNI_PHI11IND_START_BCAST_SPLAT:%.*]] = shufflevector <4 x i64> [[UNI_PHI11IND_START_BCAST_SPLATINSERT]], <4 x i64> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP23:%.*]] = add <4 x i64> [[UNI_PHI11IND_START_BCAST_SPLAT]], <i64 0, i64 1, i64 2, i64 3>
; CHECK-NEXT:    [[N_ADJST:%.*]] = sub nuw nsw i64 1024, [[TMP6]]
; CHECK-NEXT:    [[N_MOD_VF:%.*]] = urem i64 [[N_ADJST]], 4
; CHECK-NEXT:    [[N_VEC:%.*]] = sub nuw nsw i64 1024, [[N_MOD_VF]]
; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK:       vector.body:
; CHECK-NEXT:    [[UNI_PHI16:%.*]] = phi i64 [ [[UNI_PHI11]], [[VPLANNEDBB14]] ], [ [[TMP28:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[VEC_PHI17:%.*]] = phi <4 x i64> [ [[TMP23]], [[VPLANNEDBB14]] ], [ [[TMP27:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[SCALAR_GEP18:%.*]] = getelementptr inbounds i64, i64* [[ARY]], i64 [[UNI_PHI16]]
; CHECK-NEXT:    [[TMP24:%.*]] = sext <4 x i32> [[BROADCAST_SPLAT20]] to <4 x i64>
; CHECK-NEXT:    [[TMP25:%.*]] = add <4 x i64> [[TMP24]], [[VEC_PHI17]]
; CHECK-NEXT:    [[TMP26:%.*]] = bitcast i64* [[SCALAR_GEP18]] to <4 x i64>*
; CHECK-NEXT:    store <4 x i64> [[TMP25]], <4 x i64>* [[TMP26]], align 1, !intel.preferred_alignment !0
; CHECK-NEXT:    [[TMP27]] = add nuw nsw <4 x i64> [[VEC_PHI17]], <i64 4, i64 4, i64 4, i64 4>
; CHECK-NEXT:    [[TMP28]] = add nuw nsw i64 [[UNI_PHI16]], 4
; CHECK-NEXT:    [[TMP29:%.*]] = icmp ult i64 [[TMP28]], [[N_VEC]]
; CHECK-NEXT:    br i1 [[TMP29]], label [[VECTOR_BODY]], label [[VPLANNEDBB21:%.*]], !llvm.loop [[LOOP1:![0-9]+]]
; CHECK:       VPlannedBB21:
; CHECK-NEXT:    [[TMP30:%.*]] = mul i64 1, [[N_VEC]]
; CHECK-NEXT:    [[TMP31:%.*]] = add i64 0, [[TMP30]]
; CHECK-NEXT:    br label [[VPLANNEDBB22:%.*]]
; CHECK:       VPlannedBB22:
; CHECK-NEXT:    br label [[VPLANNEDBB23:%.*]]
; CHECK:       VPlannedBB23:
; CHECK-NEXT:    [[TMP32:%.*]] = icmp eq i64 1024, [[N_VEC]]
; CHECK-NEXT:    br i1 [[TMP32]], label [[FINAL_MERGE:%.*]], label [[MERGE_BLK22]]
; CHECK:       merge.blk22:
; CHECK-NEXT:    [[UNI_PHI24:%.*]] = phi i64 [ [[TMP31]], [[VPLANNEDBB23]] ], [ 0, [[PEEL_CHECKL27]] ], [ 0, [[PEEL_CHECKV28]] ], [ [[UNI_PHI11]], [[VPLANNEDBB12]] ]
; CHECK-NEXT:    br label [[VPLANNEDBB25:%.*]]
; CHECK:       VPlannedBB25:
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT32:%.*]] = insertelement <4 x i32> poison, i32 [[C]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT33:%.*]] = shufflevector <4 x i32> [[BROADCAST_SPLATINSERT32]], <4 x i32> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    br label [[VPLANNEDBB26:%.*]]
; CHECK:       VPlannedBB26:
; CHECK-NEXT:    [[UNI_PHI24IND_START_BCAST_SPLATINSERT:%.*]] = insertelement <4 x i64> poison, i64 [[UNI_PHI24]], i32 0
; CHECK-NEXT:    [[UNI_PHI24IND_START_BCAST_SPLAT:%.*]] = shufflevector <4 x i64> [[UNI_PHI24IND_START_BCAST_SPLATINSERT]], <4 x i64> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP33:%.*]] = add <4 x i64> [[UNI_PHI24IND_START_BCAST_SPLAT]], <i64 0, i64 1, i64 2, i64 3>
; CHECK-NEXT:    br label [[VPLANNEDBB27:%.*]]
; CHECK:       VPlannedBB27:
; CHECK-NEXT:    [[UNI_PHI28:%.*]] = phi i64 [ [[UNI_PHI24]], [[VPLANNEDBB26]] ], [ [[TMP39:%.*]], [[NEW_LATCH17:%.*]] ]
; CHECK-NEXT:    [[VEC_PHI29:%.*]] = phi <4 x i64> [ [[TMP33]], [[VPLANNEDBB26]] ], [ [[TMP38:%.*]], [[NEW_LATCH17]] ]
; CHECK-NEXT:    [[TMP34:%.*]] = icmp ult <4 x i64> [[VEC_PHI29]], <i64 1024, i64 1024, i64 1024, i64 1024>
; CHECK-NEXT:    br label [[VPLANNEDBB30:%.*]]
; CHECK:       VPlannedBB30:
; CHECK-NEXT:    [[SCALAR_GEP31:%.*]] = getelementptr inbounds i64, i64* [[ARY]], i64 [[UNI_PHI28]]
; CHECK-NEXT:    [[TMP35:%.*]] = sext <4 x i32> [[BROADCAST_SPLAT33]] to <4 x i64>
; CHECK-NEXT:    [[TMP36:%.*]] = add <4 x i64> [[TMP35]], [[VEC_PHI29]]
; CHECK-NEXT:    [[TMP37:%.*]] = bitcast i64* [[SCALAR_GEP31]] to <4 x i64>*
; CHECK-NEXT:    call void @llvm.masked.store.v4i64.p0v4i64(<4 x i64> [[TMP36]], <4 x i64>* [[TMP37]], i32 1, <4 x i1> [[TMP34]])
; CHECK-NEXT:    br label [[NEW_LATCH17]]
; CHECK:       new_latch17:
; CHECK-NEXT:    [[TMP38]] = add nuw nsw <4 x i64> [[VEC_PHI29]], <i64 4, i64 4, i64 4, i64 4>
; CHECK-NEXT:    [[TMP39]] = add nuw nsw i64 [[UNI_PHI28]], 4
; CHECK-NEXT:    [[TMP40:%.*]] = icmp ult <4 x i64> [[TMP38]], <i64 1024, i64 1024, i64 1024, i64 1024>
; CHECK-NEXT:    [[TMP41:%.*]] = bitcast <4 x i1> [[TMP40]] to i4
; CHECK-NEXT:    [[TMP42:%.*]] = icmp eq i4 [[TMP41]], 0
; CHECK-NEXT:    br i1 [[TMP42]], label [[VPLANNEDBB34:%.*]], label [[VPLANNEDBB27]]
; CHECK:       VPlannedBB34:
; CHECK-NEXT:    br label [[VPLANNEDBB35:%.*]]
; CHECK:       VPlannedBB35:
; CHECK-NEXT:    br label [[FINAL_MERGE]]
; CHECK:       final.merge:
; CHECK-NEXT:    [[UNI_PHI36:%.*]] = phi i64 [ 1024, [[VPLANNEDBB35]] ], [ [[TMP31]], [[VPLANNEDBB23]] ]
; CHECK-NEXT:    br label [[FOR_END:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY:%.*]] ]
; CHECK-NEXT:    [[PTR:%.*]] = getelementptr inbounds i64, i64* [[ARY]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[CC:%.*]] = sext i32 [[C]] to i64
; CHECK-NEXT:    [[ADD:%.*]] = add i64 [[CC]], [[INDVARS_IV]]
; CHECK-NEXT:    store i64 [[ADD]], i64* [[PTR]], align 1
; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK-NEXT:    [[CMP:%.*]] = icmp ult i64 [[INDVARS_IV_NEXT]], 1024
; CHECK-NEXT:    br label [[FOR_BODY]]
; CHECK:       for.end:
; CHECK-NEXT:    ret void
;

entry:
  %entry.region = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %for.body

for.body:
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %ptr = getelementptr inbounds i64, i64* %ary, i64 %indvars.iv
  %cc = sext i32 %c to i64
  %add = add i64 %cc, %indvars.iv
  store i64 %add, i64* %ptr, align 1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %cmp = icmp ult i64 %indvars.iv.next, 1024
  br i1 %cmp, label %for.body, label %for.end

for.end:
  call void @llvm.directive.region.exit(token %entry.region) [ "DIR.OMP.END.SIMD"() ]
  ret void
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
