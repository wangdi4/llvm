; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -opaque-pointers=0 < %s -passes=vplan-vec -mtriple=x86_64-unknown-unknown -mattr=+avx2 -disable-output -vplan-cost-model-print-analysis-for-vf=2 -enable-intel-advanced-opts | FileCheck %s

@arr.i32.1 = external local_unnamed_addr global [1024 x <2 x i32>], align 16
@arr.i32.2 = external local_unnamed_addr global [1024 x <2 x i32>], align 16
@arr.i32.3 = external local_unnamed_addr global [1024 x <2 x i32>], align 16

define void @foo() {
;
; CHECK-LABEL:  Cost Model for VPlan foo:for.body.#{{[0-9]+}} with VF = 2:
; CHECK-NEXT:  Analyzing VPBasicBlock [[BB0:BB[0-9]+]]
; CHECK-NEXT:    Cost 0 for br [[BB1:BB[0-9]+]]
; CHECK-NEXT:  [[BB0]]: base cost: 0
; CHECK-NEXT:  Analyzing VPBasicBlock [[BB1]]
; CHECK-NEXT:    Cost 0 for i64 [[VP_INDVARS_IV_IND_INIT:%.*]] = induction-init{add} i64 live-in0 i64 1
; CHECK-NEXT:    Cost 0 for i64 [[VP_INDVARS_IV_IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:    Cost 0 for i64 [[VP_VECTOR_TRIP_COUNT:%.*]] = vector-trip-count i64 1024, UF = 1
; CHECK-NEXT:    Cost 0 for br [[BB2:BB[0-9]+]]
; CHECK-NEXT:  [[BB1]]: base cost: 0
; CHECK-NEXT:  Cost Model for Loop preheader [[BB0]] : [[BB1]] for VF = 2 resulted Cost = 0
; CHECK-NEXT:  Analyzing VPBasicBlock [[BB2]]
; CHECK-NEXT:    Cost Unknown for i64 [[VP_INDVARS_IV:%.*]] = phi  [ i64 [[VP_INDVARS_IV_IND_INIT]], [[BB1]] ],  [ i64 [[VP_INDVARS_IV_NEXT:%.*]], [[BB2]] ]
; CHECK-NEXT:    Cost 0 for <2 x i32>* [[VP_LD1_IDX:%.*]] = getelementptr inbounds [1024 x <2 x i32>]* @arr.i32.1 i64 0 i64 [[VP_INDVARS_IV]]
; CHECK-NEXT:    Cost 1 for <2 x i32> [[VP_LD1:%.*]] = load <2 x i32>* [[VP_LD1_IDX]]
; CHECK-NEXT:    Cost 0 for <2 x i32>* [[VP_LD2_IDX:%.*]] = getelementptr inbounds [1024 x <2 x i32>]* @arr.i32.2 i64 0 i64 [[VP_INDVARS_IV]]
; CHECK-NEXT:    Cost 1 for <2 x i32> [[VP_LD2:%.*]] = load <2 x i32>* [[VP_LD2_IDX]]
; CHECK-NEXT:    Cost 1 for <2 x i32> [[VP_R1:%.*]] = add <2 x i32> [[VP_LD1]] <2 x i32> [[VP_LD2]]
; CHECK-NEXT:    Cost 1 for <2 x i32> [[VP_R2:%.*]] = sub <2 x i32> [[VP_LD1]] <2 x i32> [[VP_LD2]]
; CHECK-NEXT:    Cost 2 for <2 x i32> [[VP_R3:%.*]] = mul <2 x i32> [[VP_R1]] <2 x i32> [[VP_R2]]
; CHECK-NEXT:    Cost 80 for <2 x i32> [[VP_R4:%.*]] = sdiv <2 x i32> [[VP_R3]] <2 x i32> [[VP_LD1]]
; CHECK-NEXT:    Cost 0 for <2 x i32>* [[VP_ST_IDX:%.*]] = getelementptr inbounds [1024 x <2 x i32>]* @arr.i32.3 i64 0 i64 [[VP_INDVARS_IV]]
; CHECK-NEXT:    Cost 1 for store <2 x i32> [[VP_R4]] <2 x i32>* [[VP_ST_IDX]]
; CHECK-NEXT:    Cost 1 for i64 [[VP_INDVARS_IV_NEXT]] = add i64 [[VP_INDVARS_IV]] i64 [[VP_INDVARS_IV_IND_INIT_STEP]]
; CHECK-NEXT:    Cost 4 for i1 [[VP_VECTOR_LOOP_EXITCOND:%.*]] = icmp uge i64 [[VP_INDVARS_IV_NEXT]] i64 [[VP_VECTOR_TRIP_COUNT]]
; CHECK-NEXT:    Cost 0 for br i1 [[VP_VECTOR_LOOP_EXITCOND]], [[BB3:BB[0-9]+]], [[BB2]]
; CHECK-NEXT:  [[BB2]]: base cost: 92
; CHECK-NEXT:  Base Cost: 92
; CHECK-NEXT:  Analyzing VPBasicBlock [[BB3]]
; CHECK-NEXT:    Cost 0 for i64 [[VP_INDVARS_IV_IND_FINAL:%.*]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:    Cost 0 for br [[BB4:BB[0-9]+]]
; CHECK-NEXT:  [[BB3]]: base cost: 0
; CHECK-NEXT:  Analyzing VPBasicBlock [[BB4]]
; CHECK-NEXT:    Cost 0 for br <External Block>
; CHECK-NEXT:  [[BB4]]: base cost: 0
; CHECK-NEXT:  Cost Model for Loop postexit [[BB3]] : [[BB4]] for VF = 2 resulted Cost = 0
;
entry:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %for.body

for.body:
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %ld1.idx = getelementptr inbounds [1024 x <2 x i32>], [1024 x <2 x i32>]* @arr.i32.1, i64 0, i64 %indvars.iv
  %ld1 = load <2 x i32>, <2 x i32>* %ld1.idx
  %ld2.idx = getelementptr inbounds [1024 x <2 x i32>], [1024 x <2 x i32>]* @arr.i32.2, i64 0, i64 %indvars.iv
  %ld2 = load <2 x i32>, <2 x i32>* %ld2.idx

  %r1 = add nsw nuw <2 x i32> %ld1, %ld2
  %r2 = sub nsw nuw <2 x i32> %ld1, %ld2
  %r3 = mul nsw nuw <2 x i32> %r1, %r2
  %r4 = sdiv <2 x i32> %r3, %ld1

  %st.idx = getelementptr inbounds [1024 x <2 x i32>], [1024 x <2 x i32>]* @arr.i32.3, i64 0, i64 %indvars.iv
  store <2 x i32> %r4, <2 x i32>* %st.idx

  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 1024
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"()]
  ret void
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
