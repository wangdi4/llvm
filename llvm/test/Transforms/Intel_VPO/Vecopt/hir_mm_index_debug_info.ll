; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; REQUIRES: asserts
; RUN: opt -disable-output -hir-ssa-deconstruction -hir-temp-cleanup -hir-vec-dir-insert -hir-vplan-vec -vplan-dump-debug-loc -vplan-print-after-plain-cfg < %s 2>&1 | FileCheck %s --check-prefixes=CHECKHIRPCFG
; RUN: opt -disable-output -hir-ssa-deconstruction -hir-temp-cleanup -hir-vec-dir-insert -hir-vplan-vec -vplan-dump-debug-loc -vplan-print-after-vpentity-instrs < %s 2>&1 | FileCheck %s --check-prefixes=CHECKHIRVPE
; RUN: opt -disable-output -passes="hir-ssa-deconstruction,hir-temp-cleanup,hir-vec-dir-insert,hir-vplan-vec" -vplan-dump-debug-loc -vplan-print-after-plain-cfg < %s 2>&1 | FileCheck %s --check-prefixes=CHECKHIRPCFG
; RUN: opt -disable-output -passes="hir-ssa-deconstruction,hir-temp-cleanup,hir-vec-dir-insert,hir-vplan-vec" -vplan-dump-debug-loc -vplan-print-after-vpentity-instrs < %s 2>&1 | FileCheck %s --check-prefixes=CHECKHIRVPE


; Original code source lines:
;  8   int64_t tmp = 0;
;  9   int64_t i;
;  10  for (i=0; i< m; i++) {
;  11      tmp = (ordering[i] > b) ? tmp : i;
;  12      b = (ordering[i] > b) ? b : ordering[i];
;  13  }
;  14
;  15  return tmp + b;

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@ordering = dso_local local_unnamed_addr global [1000 x i32] zeroinitializer, align 16, !dbg !0

; Function Attrs: norecurse nounwind readonly uwtable willreturn mustprogress
define dso_local i32 @_Z6maxlocl(i64 %m) local_unnamed_addr #0 !dbg !14 {
;
; CHECKHIRPCFG-LABEL:  VPlan after importing plain CFG:
; CHECKHIRPCFG-NEXT:  VPlan IR for: _Z6maxlocl:HIR.#{{[0-9]+}}
; CHECKHIRPCFG-NEXT:  External Defs Start:
; CHECKHIRPCFG-DAG:     [[VP0:%.*]] = {%tmp.026}
; CHECKHIRPCFG-DAG:     [[VP1:%.*]] = {@ordering}
; CHECKHIRPCFG-DAG:     [[VP2:%.*]] = {%m + -1}
; CHECKHIRPCFG-DAG:     [[VP3:%.*]] = {%b.025}
; CHECKHIRPCFG-NEXT:  External Defs End:
; CHECKHIRPCFG-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECKHIRPCFG-NEXT:     br [[BB1:BB[0-9]+]]
; CHECKHIRPCFG-NEXT:      DbgLoc:
; CHECKHIRPCFG:         [[BB1]]: # preds: [[BB0]]
; CHECKHIRPCFG-NEXT:     i64 [[VP4:%.*]] = add i64 [[VP2]] i64 1
; CHECKHIRPCFG-NEXT:      DbgLoc: mm_index.cpp:10:16
; CHECKHIRPCFG-EMPTY:
; CHECKHIRPCFG-NEXT:     br [[BB2:BB[0-9]+]]
; CHECKHIRPCFG-NEXT:      DbgLoc: mm_index.cpp:10:5
; CHECKHIRPCFG:         [[BB2]]: # preds: [[BB1]], [[BB2]]
; CHECKHIRPCFG-NEXT:     i64 [[VP5:%.*]] = phi  [ i64 [[TMP_0260:%.*]], [[BB1]] ],  [ i64 [[VP6:%.*]], [[BB2]] ]
; CHECKHIRPCFG-NEXT:      DbgLoc: mm_index.cpp:11:15
; CHECKHIRPCFG-EMPTY:
; CHECKHIRPCFG-NEXT:     i64 [[VP7:%.*]] = phi  [ i64 [[B_0250:%.*]], [[BB1]] ],  [ i64 [[VP8:%.*]], [[BB2]] ]
; CHECKHIRPCFG-NEXT:      DbgLoc: mm_index.cpp:11:15
; CHECKHIRPCFG-EMPTY:
; CHECKHIRPCFG-NEXT:     i64 [[VP9:%.*]] = phi  [ i64 0, [[BB1]] ],  [ i64 [[VP10:%.*]], [[BB2]] ]
; CHECKHIRPCFG-NEXT:      DbgLoc:
; CHECKHIRPCFG-EMPTY:
; CHECKHIRPCFG-NEXT:     i32* [[VP_SUBSCRIPT:%.*]] = subscript inbounds [1000 x i32]* @ordering i64 0 i64 [[VP9]]
; CHECKHIRPCFG-NEXT:      DbgLoc: mm_index.cpp:11:16
; CHECKHIRPCFG-EMPTY:
; CHECKHIRPCFG-NEXT:     i32 [[VP_LOAD:%.*]] = load i32* [[VP_SUBSCRIPT]]
; CHECKHIRPCFG-NEXT:      DbgLoc: mm_index.cpp:11:16
; CHECKHIRPCFG-EMPTY:
; CHECKHIRPCFG-NEXT:     i64 [[VP11:%.*]] = sext i32 [[VP_LOAD]] to i64
; CHECKHIRPCFG-NEXT:      DbgLoc: mm_index.cpp:11:15
; CHECKHIRPCFG-EMPTY:
; CHECKHIRPCFG-NEXT:     i1 [[VP12:%.*]] = icmp slt i64 [[VP7]] i64 [[VP11]]
; CHECKHIRPCFG-NEXT:      DbgLoc: mm_index.cpp:11:28
; CHECKHIRPCFG-EMPTY:
; CHECKHIRPCFG-NEXT:     i64 [[VP6]] = select i1 [[VP12]] i64 [[VP5]] i64 [[VP9]]
; CHECKHIRPCFG-NEXT:      DbgLoc: mm_index.cpp:11:15
; CHECKHIRPCFG-EMPTY:
; CHECKHIRPCFG-NEXT:     i64 [[VP13:%.*]] = sext i32 [[VP_LOAD]] to i64
; CHECKHIRPCFG-NEXT:      DbgLoc: mm_index.cpp:12:13
; CHECKHIRPCFG-EMPTY:
; CHECKHIRPCFG-NEXT:     i1 [[VP14:%.*]] = icmp slt i64 [[VP7]] i64 [[VP13]]
; CHECKHIRPCFG-NEXT:      DbgLoc: mm_index.cpp:11:28
; CHECKHIRPCFG-EMPTY:
; CHECKHIRPCFG-NEXT:     i64 [[VP8]] = select i1 [[VP14]] i64 [[VP7]] i64 [[VP13]]
; CHECKHIRPCFG-NEXT:      DbgLoc: mm_index.cpp:12:13
; CHECKHIRPCFG-EMPTY:
; CHECKHIRPCFG-NEXT:     i64 [[VP10]] = add i64 [[VP9]] i64 1
; CHECKHIRPCFG-NEXT:      DbgLoc: mm_index.cpp:10:16
; CHECKHIRPCFG-EMPTY:
; CHECKHIRPCFG-NEXT:     i1 [[VP15:%.*]] = icmp slt i64 [[VP10]] i64 [[VP4]]
; CHECKHIRPCFG-NEXT:      DbgLoc: mm_index.cpp:10:16
; CHECKHIRPCFG-EMPTY:
; CHECKHIRPCFG-NEXT:     br i1 [[VP15]], [[BB2]], [[BB3:BB[0-9]+]]
; CHECKHIRPCFG-NEXT:      DbgLoc: mm_index.cpp:10:5
; CHECKHIRPCFG:         [[BB3]]: # preds: [[BB2]]
; CHECKHIRPCFG-NEXT:     br [[BB4:BB[0-9]+]]
; CHECKHIRPCFG-NEXT:      DbgLoc:
; CHECKHIRPCFG:         [[BB4]]: # preds: [[BB3]]
; CHECKHIRPCFG-NEXT:     br <External Block>
; CHECKHIRPCFG-NEXT:      DbgLoc:
; CHECKHIRPCFG:       External Uses:
; CHECKHIRPCFG-NEXT:  Id: 0   i64 [[VP6]] -> [[VP16:%.*]] = {%tmp.026}
; CHECKHIRPCFG-EMPTY:
; CHECKHIRPCFG-NEXT:  Id: 1   i64 [[VP8]] -> [[VP17:%.*]] = {%b.025}
;
; CHECKHIRVPE-LABEL:  VPlan after insertion of VPEntities instructions:
; CHECKHIRVPE-NEXT:  VPlan IR for: _Z6maxlocl:HIR.#{{[0-9]+}}
; CHECKHIRVPE-NEXT:  External Defs Start:
; CHECKHIRVPE-DAG:     [[VP0:%.*]] = {%tmp.026}
; CHECKHIRVPE-DAG:     [[VP1:%.*]] = {@ordering}
; CHECKHIRVPE-DAG:     [[VP2:%.*]] = {%m + -1}
; CHECKHIRVPE-DAG:     [[VP3:%.*]] = {%b.025}
; CHECKHIRVPE-NEXT:  External Defs End:
; CHECKHIRVPE-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECKHIRVPE-NEXT:     br [[BB1:BB[0-9]+]]
; CHECKHIRVPE-NEXT:      DbgLoc:
; CHECKHIRVPE:         [[BB1]]: # preds: [[BB0]]
; CHECKHIRVPE-NEXT:     i64 [[VP4:%.*]] = add i64 [[VP2]] i64 1
; CHECKHIRVPE-NEXT:      DbgLoc: mm_index.cpp:10:16
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     i64 [[VP_MINMAX_RED_INIT:%.*]] = reduction-init i64 [[B_0250:%.*]]
; CHECKHIRVPE-NEXT:      DbgLoc: mm_index.cpp:10:5
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     i64 [[VP_MONO_IDX_RED_INIT:%.*]] = reduction-init i64 [[TMP_0260:%.*]]
; CHECKHIRVPE-NEXT:      DbgLoc: mm_index.cpp:10:5
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     i64 [[VP__IND_INIT:%.*]] = induction-init{add} i64 0 i64 1
; CHECKHIRVPE-NEXT:      DbgLoc: mm_index.cpp:10:5
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     i64 [[VP__IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; CHECKHIRVPE-NEXT:      DbgLoc: mm_index.cpp:10:5
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     br [[BB2:BB[0-9]+]]
; CHECKHIRVPE-NEXT:      DbgLoc: mm_index.cpp:10:5
; CHECKHIRVPE:         [[BB2]]: # preds: [[BB1]], [[BB2]]
; CHECKHIRVPE-NEXT:     i64 [[VP5:%.*]] = phi  [ i64 [[VP_MONO_IDX_RED_INIT]], [[BB1]] ],  [ i64 [[VP6:%.*]], [[BB2]] ]
; CHECKHIRVPE-NEXT:      DbgLoc: mm_index.cpp:11:15
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     i64 [[VP7:%.*]] = phi  [ i64 [[VP_MINMAX_RED_INIT]], [[BB1]] ],  [ i64 [[VP8:%.*]], [[BB2]] ]
; CHECKHIRVPE-NEXT:      DbgLoc: mm_index.cpp:11:15
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     i64 [[VP9:%.*]] = phi  [ i64 [[VP__IND_INIT]], [[BB1]] ],  [ i64 [[VP10:%.*]], [[BB2]] ]
; CHECKHIRVPE-NEXT:      DbgLoc:
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     i32* [[VP_SUBSCRIPT:%.*]] = subscript inbounds [1000 x i32]* @ordering i64 0 i64 [[VP9]]
; CHECKHIRVPE-NEXT:      DbgLoc: mm_index.cpp:11:16
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     i32 [[VP_LOAD:%.*]] = load i32* [[VP_SUBSCRIPT]]
; CHECKHIRVPE-NEXT:      DbgLoc: mm_index.cpp:11:16
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     i64 [[VP11:%.*]] = sext i32 [[VP_LOAD]] to i64
; CHECKHIRVPE-NEXT:      DbgLoc: mm_index.cpp:11:15
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     i1 [[VP12:%.*]] = icmp slt i64 [[VP7]] i64 [[VP11]]
; CHECKHIRVPE-NEXT:      DbgLoc: mm_index.cpp:11:28
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     i64 [[VP6]] = select i1 [[VP12]] i64 [[VP5]] i64 [[VP9]]
; CHECKHIRVPE-NEXT:      DbgLoc: mm_index.cpp:11:15
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     i64 [[VP13:%.*]] = sext i32 [[VP_LOAD]] to i64
; CHECKHIRVPE-NEXT:      DbgLoc: mm_index.cpp:12:13
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     i1 [[VP14:%.*]] = icmp slt i64 [[VP7]] i64 [[VP13]]
; CHECKHIRVPE-NEXT:      DbgLoc: mm_index.cpp:11:28
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     i64 [[VP8]] = select i1 [[VP14]] i64 [[VP7]] i64 [[VP13]]
; CHECKHIRVPE-NEXT:      DbgLoc: mm_index.cpp:12:13
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     i64 [[VP10]] = add i64 [[VP9]] i64 [[VP__IND_INIT_STEP]]
; CHECKHIRVPE-NEXT:      DbgLoc: mm_index.cpp:10:16
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     i1 [[VP15:%.*]] = icmp slt i64 [[VP10]] i64 [[VP4]]
; CHECKHIRVPE-NEXT:      DbgLoc: mm_index.cpp:10:16
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     br i1 [[VP15]], [[BB2]], [[BB3:BB[0-9]+]]
; CHECKHIRVPE-NEXT:      DbgLoc: mm_index.cpp:10:5
; CHECKHIRVPE:         [[BB3]]: # preds: [[BB2]]
; CHECKHIRVPE-NEXT:     i64 [[VP_MINMAX_RED_FINAL:%.*]] = reduction-final{u_smin} i64 [[VP8]]
; CHECKHIRVPE-NEXT:      DbgLoc: mm_index.cpp:12:13
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     i64 [[VP_MONO_IDX_RED_FINAL:%.*]] = reduction-final{s_smax} i64 [[VP6]] i64 [[VP8]] i64 [[VP_MINMAX_RED_FINAL]]
; CHECKHIRVPE-NEXT:      DbgLoc: mm_index.cpp:11:15
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     i64 [[VP__IND_FINAL:%.*]] = induction-final{add} i64 0 i64 1
; CHECKHIRVPE-NEXT:      DbgLoc:
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:     br [[BB4:BB[0-9]+]]
; CHECKHIRVPE-NEXT:      DbgLoc:
; CHECKHIRVPE:         [[BB4]]: # preds: [[BB3]]
; CHECKHIRVPE-NEXT:     br <External Block>
; CHECKHIRVPE-NEXT:      DbgLoc:
; CHECKHIRVPE:       External Uses:
; CHECKHIRVPE-NEXT:  Id: 0   i64 [[VP_MONO_IDX_RED_FINAL]] -> [[VP16:%.*]] = {%tmp.026}
; CHECKHIRVPE-EMPTY:
; CHECKHIRVPE-NEXT:  Id: 1   i64 [[VP_MINMAX_RED_FINAL]] -> [[VP17:%.*]] = {%b.025}
;

entry:
  call void @llvm.dbg.value(metadata i64 %m, metadata !23, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i64 -111111111, metadata !24, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i64 0, metadata !25, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i64 0, metadata !26, metadata !DIExpression()), !dbg !27
  %cmp24 = icmp sgt i64 %m, 0, !dbg !28
  br i1 %cmp24, label %for.body.preheader, label %for.end, !dbg !31

for.body.preheader:                               ; preds = %entry
  br label %for.body, !dbg !31

for.body:                                         ; preds = %for.body.preheader, %for.body
  %i.027 = phi i64 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  %tmp.026 = phi i64 [ %1, %for.body ], [ 0, %for.body.preheader ]
  %b.025 = phi i64 [ %spec.select, %for.body ], [ -111111111, %for.body.preheader ]
  call void @llvm.dbg.value(metadata i64 %i.027, metadata !26, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i64 %tmp.026, metadata !25, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i64 %b.025, metadata !24, metadata !DIExpression()), !dbg !27
  %arrayidx = getelementptr inbounds [1000 x i32], [1000 x i32]* @ordering, i64 0, i64 %i.027, !dbg !32, !intel-tbaa !34
  %0 = load i32, i32* %arrayidx, align 4, !dbg !32, !tbaa !34
  %conv = sext i32 %0 to i64, !dbg !32
  %cmp1 = icmp slt i64 %b.025, %conv, !dbg !39
  %1 = select i1 %cmp1, i64 %tmp.026, i64 %i.027, !dbg !40
  call void @llvm.dbg.value(metadata i64 %1, metadata !25, metadata !DIExpression()), !dbg !27
  %spec.select = select i1 %cmp1, i64 %b.025, i64 %conv, !dbg !41
  call void @llvm.dbg.value(metadata i64 %spec.select, metadata !24, metadata !DIExpression()), !dbg !27
  %inc = add nuw nsw i64 %i.027, 1, !dbg !42
  call void @llvm.dbg.value(metadata i64 %inc, metadata !26, metadata !DIExpression()), !dbg !27
  %exitcond.not = icmp eq i64 %inc, %m, !dbg !28
  br i1 %exitcond.not, label %for.end.loopexit, label %for.body, !dbg !31, !llvm.loop !43

for.end.loopexit:                                 ; preds = %for.body
  %.lcssa = phi i64 [ %1, %for.body ], !dbg !40
  %spec.select.lcssa = phi i64 [ %spec.select, %for.body ], !dbg !41
  br label %for.end, !dbg !46

for.end:                                          ; preds = %for.end.loopexit, %entry
  %b.0.lcssa = phi i64 [ -111111111, %entry ], [ %spec.select.lcssa, %for.end.loopexit ]
  %tmp.0.lcssa = phi i64 [ 0, %entry ], [ %.lcssa, %for.end.loopexit ]
  %add = add nsw i64 %tmp.0.lcssa, %b.0.lcssa, !dbg !46
  %conv11 = trunc i64 %add to i32, !dbg !47
  ret i32 %conv11, !dbg !48
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

attributes #0 = { norecurse nounwind readonly uwtable willreturn mustprogress "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "frame-pointer"="none" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "pre_loopopt" "stack-protector-buffer-size"="8" "target-cpu"="skylake-avx512" "target-features"="+adx,+aes,+avx,+avx2,+avx512bw,+avx512cd,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+clflushopt,+clwb,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+pku,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves" "unsafe-fp-math"="true" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!10, !11, !12}
!llvm.ident = !{!13}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "ordering", scope: !2, file: !3, line: 3, type: !6, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus_14, file: !3, producer: "clang based Intel(R) oneAPI DPC++/C++ Compiler 2021.2.0 (2021.x.0.YYYYMMDD)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !5, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "mm_index.cpp", directory: "/tmp")
!4 = !{}
!5 = !{!0}
!6 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 32000, elements: !8)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{!9}
!9 = !DISubrange(count: 1000)
!10 = !{i32 7, !"Dwarf Version", i32 4}
!11 = !{i32 2, !"Debug Info Version", i32 3}
!12 = !{i32 1, !"wchar_size", i32 4}
!13 = !{!"Intel(R) oneAPI DPC++/C++ Compiler 2021.2.0 (2021.x.0.YYYYMMDD)"}
!14 = distinct !DISubprogram(name: "maxloc", linkageName: "_Z6maxlocl", scope: !3, file: !3, line: 5, type: !15, scopeLine: 5, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !22)
!15 = !DISubroutineType(types: !16)
!16 = !{!7, !17}
!17 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !18, line: 27, baseType: !19)
!18 = !DIFile(filename: "/usr/include/bits/stdint-intn.h", directory: "")
!19 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int64_t", file: !20, line: 43, baseType: !21)
!20 = !DIFile(filename: "/usr/include/bits/types.h", directory: "")
!21 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!22 = !{!23, !24, !25, !26}
!23 = !DILocalVariable(name: "m", arg: 1, scope: !14, file: !3, line: 5, type: !17)
!24 = !DILocalVariable(name: "b", scope: !14, file: !3, line: 7, type: !17)
!25 = !DILocalVariable(name: "tmp", scope: !14, file: !3, line: 8, type: !17)
!26 = !DILocalVariable(name: "i", scope: !14, file: !3, line: 9, type: !17)
!27 = !DILocation(line: 0, scope: !14)
!28 = !DILocation(line: 10, column: 16, scope: !29)
!29 = distinct !DILexicalBlock(scope: !30, file: !3, line: 10, column: 5)
!30 = distinct !DILexicalBlock(scope: !14, file: !3, line: 10, column: 5)
!31 = !DILocation(line: 10, column: 5, scope: !30)
!32 = !DILocation(line: 11, column: 16, scope: !33)
!33 = distinct !DILexicalBlock(scope: !29, file: !3, line: 10, column: 26)
!34 = !{!35, !36, i64 0}
!35 = !{!"array@_ZTSA1000_i", !36, i64 0}
!36 = !{!"int", !37, i64 0}
!37 = !{!"omnipotent char", !38, i64 0}
!38 = !{!"Simple C++ TBAA"}
!39 = !DILocation(line: 11, column: 28, scope: !33)
!40 = !DILocation(line: 11, column: 15, scope: !33)
!41 = !DILocation(line: 12, column: 13, scope: !33)
!42 = !DILocation(line: 10, column: 22, scope: !29)
!43 = distinct !{!43, !31, !44, !45}
!44 = !DILocation(line: 13, column: 5, scope: !30)
!45 = !{!"llvm.loop.mustprogress"}
!46 = !DILocation(line: 15, column: 16, scope: !14)
!47 = !DILocation(line: 15, column: 12, scope: !14)
!48 = !DILocation(line: 15, column: 5, scope: !14)
