; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; Test VPlan unrolling feature for HIR loops with Call instructions.

; RUN: opt -vector-library=SVML -hir-ssa-deconstruction -hir-framework -VPlanDriverHIR -vplan-force-vf=4 -vplan-force-uf=2 -vplan-print-after-unroll -print-after=VPlanDriverHIR -disable-output -enable-vp-value-codegen-hir < %s 2>&1 | FileCheck %s

define dso_local void @_Z3fooPii(float* nocapture %a, i32 %n) local_unnamed_addr #0 {
; CHECK-LABEL:  VPlan after VPlan loop unrolling:
; CHECK-NEXT:  VPlan IR for: Initial VPlan for VF=4
; CHECK-NEXT:  External Defs Start:
; CHECK-DAG:     [[VP0:%.*]] = {%a}
; CHECK-NEXT:  External Defs End:
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     [DA: Uni] br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     [DA: Div] i64 [[VP__IND_INIT:%.*]] = induction-init{add} i64 live-in0 i64 1
; CHECK-NEXT:     [DA: Uni] i64 [[VP__IND_INIT_STEP:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:     [DA: Uni] br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], cloned.[[BB3:BB[0-9]+]]
; CHECK-NEXT:     [DA: Div] i64 [[VP1:%.*]] = phi  [ i64 [[VP__IND_INIT]], [[BB1]] ],  [ i64 [[VP2:%.*]], cloned.[[BB3]] ]
; CHECK-NEXT:     [DA: Div] float* [[VP_SUBSCRIPT:%.*]] = subscript inbounds float* [[A0:%.*]] i64 [[VP1]]
; CHECK-NEXT:     [DA: Div] float [[VP_LOAD:%.*]] = load float* [[VP_SUBSCRIPT]]
; CHECK-NEXT:     [DA: Div] float [[VP_INC:%.*]] = call float [[VP_LOAD]] float (float)* @sinf
; CHECK-NEXT:     [DA: Div] float* [[VP_SUBSCRIPT_1:%.*]] = subscript inbounds float* [[A0]] i64 [[VP1]]
; CHECK-NEXT:     [DA: Div] store float [[VP_INC]] float* [[VP_SUBSCRIPT_1]]
; CHECK-NEXT:     [DA: Div] i64 [[VP3:%.*]] = add i64 [[VP1]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Div] i1 [[VP4:%.*]] = icmp sle i64 [[VP3]] i64 79
; CHECK-NEXT:     [DA: Uni] br cloned.[[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    cloned.[[BB3]]: # preds: [[BB2]]
; CHECK-NEXT:     [DA: Div] float* [[VP5:%.*]] = subscript inbounds float* [[A0]] i64 [[VP3]]
; CHECK-NEXT:     [DA: Div] float [[VP6:%.*]] = load float* [[VP5]]
; CHECK-NEXT:     [DA: Div] float [[VP7:%.*]] = call float [[VP6]] float (float)* @sinf
; CHECK-NEXT:     [DA: Div] float* [[VP8:%.*]] = subscript inbounds float* [[A0]] i64 [[VP3]]
; CHECK-NEXT:     [DA: Div] store float [[VP7]] float* [[VP8]]
; CHECK-NEXT:     [DA: Div] i64 [[VP2]] = add i64 [[VP3]] i64 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     [DA: Uni] i1 [[VP9:%.*]] = icmp sle i64 [[VP2]] i64 79
; CHECK-NEXT:     [DA: Uni] br i1 [[VP9]], [[BB2]], [[BB4:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]]: # preds: cloned.[[BB3]]
; CHECK-NEXT:     [DA: Uni] i64 [[VP__IND_FINAL:%.*]] = induction-final{add} i64 live-in0 i64 1
; CHECK-NEXT:     [DA: Uni] br [[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]: # preds: [[BB4]]
; CHECK-NEXT:     [DA: Uni] br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   no underlying for i64 [[VP__IND_FINAL]]

; CHECK:          BEGIN REGION { modified }
; CHECK-NEXT:           + DO i1 = 0, 79, 8   <DO_LOOP> <novectorize>
; CHECK-NEXT:           |   [[VEC:%.*]] = (<4 x float>*)(%a)[i1];
; CHECK-NEXT:           |   [[SVML_SINF4:%.*]] = @__svml_sinf4([[VEC]]);
; CHECK-NEXT:           |   (<4 x float>*)(%a)[i1] = [[SVML_SINF4]];
; CHECK-NEXT:           |   [[VEC:%.*]] = (<4 x float>*)(%a)[i1 + 4];
; CHECK-NEXT:           |   [[SVML_SINF4:%.*]] = @__svml_sinf4([[VEC]]);
; CHECK-NEXT:           |   (<4 x float>*)(%a)[i1 + 4] = [[SVML_SINF4]];
; CHECK-NEXT:           + END LOOP
; CHECK-NEXT:     END REGION
;

entry:
  %cmp = icmp sgt i32 %n, 0
  br i1 %cmp, label %DIR.OMP.SIMD.2, label %omp.precond.end

DIR.OMP.SIMD.2:                                   ; preds = %entry
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.NORMALIZED.IV"(i8* null), "QUAL.OMP.NORMALIZED.UB"(i8* null) ]
  br label %DIR.OMP.SIMD.1

DIR.OMP.SIMD.1:                                   ; preds = %DIR.OMP.SIMD.2
  %wide.trip.count = sext i32 %n to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.inner.for.body, %DIR.OMP.SIMD.1
  %indvars.iv = phi i64 [ 0, %DIR.OMP.SIMD.1 ], [ %indvars.iv.next, %omp.inner.for.body ]
  %arrayidx = getelementptr inbounds float, float* %a, i64 %indvars.iv
  %1 = load float, float* %arrayidx, align 4
  %inc = call float @sinf(float %1) #3
  store float %inc, float* %arrayidx, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 80
  br i1 %exitcond, label %DIR.OMP.END.SIMD.3, label %omp.inner.for.body

DIR.OMP.END.SIMD.3:                               ; preds = %omp.inner.for.body
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %DIR.OMP.END.SIMD.3, %entry
  ret void
}

declare token @llvm.directive.region.entry() nounwind
declare void @llvm.directive.region.exit(token) nounwind
declare dso_local float @sinf(float) local_unnamed_addr #2

attributes #2 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
