; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py

; RUN: opt -vplan-print-terminator-inst=false -S -vplan-func-vec -print-after-vplan-func-vec-predicator < %s -disable-output | FileCheck %s
; RUN: opt -vplan-print-terminator-inst=false -S -passes="vplan-func-vec" -print-after-vplan-func-vec-predicator < %s -disable-output | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define void @da_incremental_phi_update(i1 %toptest) {
; CHECK-LABEL:  VPlan IR for: da_incremental_phi_update
; CHECK-NEXT:    [[BB0:BB[0-9]+]]:
; CHECK-NEXT:     [DA: Div] i32 [[VP_LANE:%.*]] = induction-init{add} i32 0 i32 1
; CHECK-NEXT:     [DA: Uni] i1 [[VP_TOPTEST_NOT:%.*]] = not i1 [[TOPTEST0:%.*]]
; CHECK-NEXT:     Condition(external): i1 [[TOPTEST0]]
; CHECK-NEXT:    SUCCESSORS(2):[[BB1:BB[0-9]+]](i1 [[TOPTEST0]]), [[BB2:BB[0-9]+]](!i1 [[TOPTEST0]])
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB2]]:
; CHECK-NEXT:       <Empty Block>
; CHECK-NEXT:      SUCCESSORS(1):[[BB3:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB3]]:
; CHECK-NEXT:       [DA: Uni] i32 [[VP_IV:%.*]] = phi  [ i32 0, [[BB2]] ],  [ i32 [[VP_IV_NEXT:%.*]], [[BB4:BB[0-9]+]] ]
; CHECK-NEXT:       [DA: Div] i1 [[VP_LOOP_MASK:%.*]] = phi  [ i1 [[VP_TOPTEST_NOT]], [[BB2]] ],  [ i1 [[VP_LOOP_MASK_NEXT:%.*]], [[BB4]] ]
; CHECK-NEXT:       [DA: Div] i32 [[VP_IV_NEXT_LIVE_OUT_PREV:%.*]] = phi  [ i32 undef, [[BB2]] ],  [ i32 [[VP_IV_NEXT_LIVE_OUT_BLEND:%.*]], [[BB4]] ]
; CHECK-NEXT:      SUCCESSORS(1):[[BB5:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(2): [[BB2]] [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB5]]:
; CHECK-NEXT:       [DA: Div] i1 [[VP0:%.*]] = block-predicate i1 [[VP_LOOP_MASK]]
; CHECK-NEXT:       [DA: Uni] i32 [[VP_IV_NEXT]] = add i32 [[VP_IV]] i32 1
; CHECK-NEXT:       [DA: Uni] i1 [[VP_CMP_NOT_I:%.*]] = icmp eq i32 [[VP_IV_NEXT]] i32 42
; CHECK-NEXT:       [DA: Div] i1 [[VP_EXITCOND:%.*]] = icmp eq i32 [[VP_IV_NEXT]] i32 [[VP_LANE]]
; CHECK-NEXT:      SUCCESSORS(1):[[BB4]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB4]]:
; CHECK-NEXT:       [DA: Div] i32 [[VP_IV_NEXT_LIVE_OUT_BLEND]] = select i1 [[VP_LOOP_MASK]] i32 [[VP_IV_NEXT]] i32 [[VP_IV_NEXT_LIVE_OUT_PREV]]
; CHECK-NEXT:       [DA: Div] i1 [[VP_EXITCOND_NOT:%.*]] = not i1 [[VP_EXITCOND]]
; CHECK-NEXT:       [DA: Div] i1 [[VP_LOOP_MASK_NEXT]] = and i1 [[VP_EXITCOND_NOT]] i1 [[VP_LOOP_MASK]]
; CHECK-NEXT:       [DA: Uni] i1 [[VP1:%.*]] = all-zero-check i1 [[VP_LOOP_MASK_NEXT]]
; CHECK-NEXT:      SUCCESSORS(2):[[BB6:BB[0-9]+]](i1 [[VP1]]), [[BB3]](!i1 [[VP1]])
; CHECK-NEXT:      PREDECESSORS(1): [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB6]]:
; CHECK-NEXT:       [DA: Div] i32 [[VP_LCSSA:%.*]] = phi  [ i32 [[VP_IV_NEXT_LIVE_OUT_BLEND]], [[BB4]] ]
; CHECK-NEXT:       [DA: Div] i1 [[VP_CMP_NOT_I_1:%.*]] = icmp eq i32 [[VP_LCSSA]] i32 42
; CHECK-NEXT:      SUCCESSORS(1):[[BB1]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]:
; CHECK-NEXT:     [DA: Div] i32 [[VP_PHI_PHI_BB2:%.*]] = phi  [ i32 undef, [[BB0]] ],  [ i32 [[VP_LCSSA]], [[BB6]] ]
; CHECK-NEXT:     [DA: Div] i1 [[VP_CMP_NOT_I_PHI_BB2:%.*]] = phi  [ i1 false, [[BB0]] ],  [ i1 [[VP_CMP_NOT_I_1]], [[BB6]] ]
; CHECK-NEXT:     [DA: Div] i1 [[VP2:%.*]] = or i1 [[TOPTEST0]] i1 [[VP_CMP_NOT_I_PHI_BB2]]
; CHECK-NEXT:     [DA: Div] i1 [[VP3:%.*]] = block-predicate i1 [[VP2]]
; CHECK-NEXT:     [DA: Div] i32 [[VP_ADD:%.*]] = add i32 [[VP_LANE]] i32 [[VP_LANE]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB7:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB0]] [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB7]]:
; CHECK-NEXT:     [DA: Div] i32 [[VP_PHI_BLEND_BB2:%.*]] = blend [ i32 [[VP_PHI_PHI_BB2]], i1 true ], [ i32 [[VP_ADD]], i1 [[VP2]] ]
; CHECK-NEXT:     [DA: Div] ret
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB1]]
;
entry:
  ; This is a complex test that probably needs multiples things in different
  ; subcomponents inside VPlan pipeline to happen in some particular order. It
  ; might not be the best way to unit-test the desired property.

  ; The issue it tries to cover is that incremental DA update for a PHI created
  ; inside predicator was returning "uniform" in case where it should have
  ; answered "divergent".
  %lane = call i32 @llvm.vplan.laneid()
  br i1 %toptest, label %thread, label %preheader

preheader:
  br label %header

header:
  %iv = phi i32 [ 0, %preheader ], [ %iv.next, %header ]
  %iv.next = add i32 %iv, 1
  %cmp.not.i = icmp eq i32 %iv.next, 42
  %exitcond = icmp eq i32 %iv.next, %lane
  br i1 %exitcond, label %loop.exit, label %header

loop.exit:
  %lcssa = phi i32 [ %iv.next, %header ]
  %cmp.not.i.lcssa = phi i1 [ %cmp.not.i, %header ]
  br i1 %cmp.not.i.lcssa, label %thread, label %bb

thread:
  %add = add i32 %lane, %lane ;
  br label %bb

bb:
  ; Originally, one of the manifestations of the bug was incorrect blend created
  ; for this phi.
  %phi = phi i32 [ %add, %thread ], [ %lcssa, %loop.exit ]
  ret void
}

declare i32 @llvm.vplan.laneid()
