; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -passes="vplan-vec" -vplan-force-vf=4 -vplan-force-inscan-reduction-vectorization=true -S < %s 2>&1 | FileCheck %s

;; The implemented code generation is only valid if exchange of input and scan
;; phases of the loop has been performed. This patch is submitted speculatively
;; to allow for concurrent code review.

;; float foo(float *A, float *B, int N) {
;;   float x = 1.0f;
;; #pragma omp simd reduction(inscan, + : x)
;;   for (int i=0; i<N; i++) {
;;     B[i] = x;
;; #pragma omp scan exclusive(x)
;;     x += A[i];
;;   }
;;   return x;
;; }

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define float @_Z3fooPfS_(ptr %A, ptr %B) {
;
; CHECK:       target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
; CHECK-NEXT:  target triple = "x86_64-unknown-linux-gnu"
;
; CHECK:  define float @_Z3fooPfS_(ptr [[A0:%.*]], ptr [[B0:%.*]]) {
; CHECK-NEXT:  DIR.OMP.SIMD.1:
; CHECK-NEXT:    [[X_RED0:%.*]] = alloca float, align 4
; CHECK-NEXT:    [[I_LINEAR_IV0:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store float 1.000000e+00, ptr [[X_RED0]], align 4
; CHECK-NEXT:    [[I_LINEAR_IV_VEC0:%.*]] = alloca <4 x i32>, align 16
; CHECK-NEXT:    [[I_LINEAR_IV_VEC_BASE_ADDR0:%.*]] = getelementptr i32, ptr [[I_LINEAR_IV_VEC0]], <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    [[I_LINEAR_IV_VEC_BASE_ADDR_EXTRACT_0_0:%.*]] = extractelement <4 x ptr> [[I_LINEAR_IV_VEC_BASE_ADDR0]], i32 0
; CHECK-NEXT:    [[X_RED_VEC0:%.*]] = alloca <4 x float>, align 16
; CHECK-NEXT:    [[X_RED_VEC_BASE_ADDR0:%.*]] = getelementptr float, ptr [[X_RED_VEC0]], <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    [[X_RED_VEC_BASE_ADDR_EXTRACT_0_0:%.*]] = extractelement <4 x ptr> [[X_RED_VEC_BASE_ADDR0]], i32 0
; CHECK-NEXT:    br label [[DIR_OMP_SIMD_1260:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  DIR.OMP.SIMD.126:
; CHECK-NEXT:    br label [[VPLANNEDBB0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB:
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT120:%.*]] = insertelement <4 x ptr> poison, ptr [[A0]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT130:%.*]] = shufflevector <4 x ptr> [[BROADCAST_SPLATINSERT120]], <4 x ptr> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    br label [[VPLANNEDBB10:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB1:
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[I_LINEAR_IV_VEC_BASE_ADDR_EXTRACT_0_0]])
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 16, ptr [[X_RED_VEC_BASE_ADDR_EXTRACT_0_0]])
; CHECK-NEXT:    [[TMP0:%.*]] = load float, ptr [[X_RED0]], align 1
; CHECK-NEXT:    [[TMP1:%.*]] = load float, ptr [[X_RED0]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load float, ptr [[X_RED0]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = load float, ptr [[X_RED0]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[I_LINEAR_IV0]], align 1
; CHECK-NEXT:    [[TMP5:%.*]] = load i32, ptr [[I_LINEAR_IV0]], align 1
; CHECK-NEXT:    [[TMP6:%.*]] = load i32, ptr [[I_LINEAR_IV0]], align 1
; CHECK-NEXT:    [[TMP7:%.*]] = load i32, ptr [[I_LINEAR_IV0]], align 1
; CHECK-NEXT:    [[IND_START_BCAST_SPLATINSERT0:%.*]] = insertelement <4 x i32> poison, i32 [[TMP4]], i32 0
; CHECK-NEXT:    [[IND_START_BCAST_SPLAT0:%.*]] = shufflevector <4 x i32> [[IND_START_BCAST_SPLATINSERT0]], <4 x i32> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP8:%.*]] = add <4 x i32> [[IND_START_BCAST_SPLAT0]], <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    store <4 x i32> [[TMP8]], ptr [[I_LINEAR_IV_VEC0]], align 1
; CHECK-NEXT:    br label [[VECTOR_BODY0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  vector.body:
; CHECK-NEXT:    [[UNI_PHI0:%.*]] = phi i64 [ 0, [[VPLANNEDBB10]] ], [ [[TMP20:%.*]], [[VPLANNEDBB100:%.*]] ]
; CHECK-NEXT:    [[VEC_PHI0:%.*]] = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, [[VPLANNEDBB10]] ], [ [[TMP19:%.*]], [[VPLANNEDBB100]] ]
; CHECK-NEXT:    [[UNI_PHI30:%.*]] = phi float [ [[TMP0]], [[VPLANNEDBB10]] ], [ [[TMP16:%.*]], [[VPLANNEDBB100]] ]
; CHECK-NEXT:    [[UNI_PHI40:%.*]] = phi i32 [ [[TMP4]], [[VPLANNEDBB10]] ], [ [[TMP22:%.*]], [[VPLANNEDBB100]] ]
; CHECK-NEXT:    [[VEC_PHI50:%.*]] = phi <4 x i32> [ [[TMP8]], [[VPLANNEDBB10]] ], [ [[TMP21:%.*]], [[VPLANNEDBB100]] ]
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT0:%.*]] = insertelement <4 x float> poison, float [[UNI_PHI30]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT0:%.*]] = shufflevector <4 x float> [[BROADCAST_SPLATINSERT0]], <4 x float> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    store <4 x i32> [[VEC_PHI50]], ptr [[I_LINEAR_IV_VEC0]], align 1
; CHECK-NEXT:    store <4 x float> zeroinitializer, ptr [[X_RED_VEC0]], align 1
; CHECK-NEXT:    [[TMP9:%.*]] = trunc <4 x i64> [[VEC_PHI0]] to <4 x i32>
; CHECK-NEXT:    store <4 x i32> [[TMP9]], ptr [[I_LINEAR_IV_VEC0]], align 4
; CHECK-NEXT:    [[WIDE_LOAD0:%.*]] = load <4 x float>, ptr [[X_RED_VEC0]], align 4
; CHECK-NEXT:    [[SCALAR_GEP0:%.*]] = getelementptr inbounds float, ptr [[B0]], i64 [[UNI_PHI0]]
; CHECK-NEXT:    store <4 x float> [[WIDE_LOAD0]], ptr [[SCALAR_GEP0]], align 4
; CHECK-NEXT:    br label [[VPLANNEDBB60:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB6:
; CHECK-NEXT:    br label [[VPLANNEDBB70:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB7:
; CHECK-NEXT:    [[WIDE_LOAD80:%.*]] = load <4 x float>, ptr [[X_RED_VEC0]], align 1
; CHECK-NEXT:    [[WIDE_LOAD8_EXTRACT_3_0:%.*]] = extractelement <4 x float> [[WIDE_LOAD80]], i32 3
; CHECK-NEXT:    [[TMP10:%.*]] = shufflevector <4 x float> [[WIDE_LOAD80]], <4 x float> zeroinitializer, <4 x i32> <i32 4, i32 0, i32 1, i32 2>
; CHECK-NEXT:    [[TMP11:%.*]] = fadd fast <4 x float> [[WIDE_LOAD80]], [[TMP10]]
; CHECK-NEXT:    [[TMP12:%.*]] = shufflevector <4 x float> [[TMP11]], <4 x float> zeroinitializer, <4 x i32> <i32 4, i32 5, i32 0, i32 1>
; CHECK-NEXT:    [[TMP13:%.*]] = fadd fast <4 x float> [[TMP11]], [[TMP12]]
; CHECK-NEXT:    [[TMP14:%.*]] = shufflevector <4 x float> [[TMP13]], <4 x float> zeroinitializer, <4 x i32> <i32 4, i32 0, i32 1, i32 2>
; CHECK-NEXT:    [[TMP15:%.*]] = fadd fast <4 x float> [[TMP14]], [[BROADCAST_SPLAT0]]
; CHECK-NEXT:    [[DOTEXTRACT_3_0:%.*]] = extractelement <4 x float> [[TMP15]], i32 3
; CHECK-NEXT:    store <4 x float> [[TMP15]], ptr [[X_RED_VEC0]], align 1
; CHECK-NEXT:    [[TMP16]] = fadd float [[DOTEXTRACT_3_0]], [[WIDE_LOAD8_EXTRACT_3_0]]
; CHECK-NEXT:    br label [[VPLANNEDBB90:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB9:
; CHECK-NEXT:    br label [[VPLANNEDBB100]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB10:
; CHECK-NEXT:    [[WIDE_LOAD110:%.*]] = load <4 x i32>, ptr [[I_LINEAR_IV_VEC0]], align 4
; CHECK-NEXT:    [[TMP17:%.*]] = sext <4 x i32> [[WIDE_LOAD110]] to <4 x i64>
; CHECK-NEXT:    [[MM_VECTORGEP0:%.*]] = getelementptr inbounds float, <4 x ptr> [[BROADCAST_SPLAT130]], <4 x i64> [[TMP17]]
; CHECK-NEXT:    [[WIDE_MASKED_GATHER0:%.*]] = call <4 x float> @llvm.masked.gather.v4f32.v4p0(<4 x ptr> [[MM_VECTORGEP0]], i32 4, <4 x i1> <i1 true, i1 true, i1 true, i1 true>, <4 x float> undef)
; CHECK-NEXT:    [[WIDE_LOAD140:%.*]] = load <4 x float>, ptr [[X_RED_VEC0]], align 4
; CHECK-NEXT:    [[TMP18:%.*]] = fadd fast <4 x float> [[WIDE_LOAD140]], [[WIDE_MASKED_GATHER0]]
; CHECK-NEXT:    store <4 x float> [[TMP18]], ptr [[X_RED_VEC0]], align 4
; CHECK-NEXT:    [[TMP19]] = add nuw nsw <4 x i64> [[VEC_PHI0]], <i64 4, i64 4, i64 4, i64 4>
; CHECK-NEXT:    [[TMP20]] = add nuw nsw i64 [[UNI_PHI0]], 4
; CHECK-NEXT:    [[TMP21]] = add <4 x i32> [[VEC_PHI50]], <i32 4, i32 4, i32 4, i32 4>
; CHECK-NEXT:    [[TMP22]] = add i32 [[UNI_PHI40]], 4
; CHECK-NEXT:    [[TMP23:%.*]] = icmp uge i64 [[TMP20]], 1024
; CHECK-NEXT:    br i1 [[TMP23]], label [[VPLANNEDBB150:%.*]], label [[VECTOR_BODY0]], !llvm.loop !0
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB15:
; CHECK-NEXT:    store float [[TMP16]], ptr [[X_RED0]], align 1
;
DIR.OMP.SIMD.1:
  %x.red = alloca float, align 4
  %i.linear.iv = alloca i32, align 4
  store float 1.000000e+00, ptr %x.red, align 4
  br label %DIR.OMP.SIMD.126

DIR.OMP.SIMD.126:                                 ; preds = %DIR.OMP.SIMD.1
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.REDUCTION.ADD:INSCAN.TYPED"(ptr %x.red, float 0.000000e+00, i32 1, i64 1), "QUAL.OMP.NORMALIZED.IV:TYPED"(ptr null, i32 0), "QUAL.OMP.NORMALIZED.UB:TYPED"(ptr null, i32 0), "QUAL.OMP.LINEAR:IV.TYPED"(ptr %i.linear.iv, i32 0, i32 1, i32 1) ]
  br label %DIR.OMP.END.SCAN.2

DIR.OMP.END.SCAN.2:                               ; preds = %DIR.OMP.SIMD.126, %DIR.OMP.END.SCAN.228
  %indvars.iv = phi i64 [ 0, %DIR.OMP.SIMD.126 ], [ %indvars.iv.next, %DIR.OMP.END.SCAN.228 ]
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %i.linear.iv)
  %1 = trunc i64 %indvars.iv to i32
  store i32 %1, ptr %i.linear.iv, align 4
  %2 = load float, ptr %x.red, align 4
  %arrayidx = getelementptr inbounds float, ptr %B, i64 %indvars.iv
  store float %2, ptr %arrayidx, align 4
  br label %DIR.OMP.SCAN.2

DIR.OMP.SCAN.2:                                   ; preds = %DIR.OMP.END.SCAN.2
  %3 = call token @llvm.directive.region.entry() [ "DIR.OMP.SCAN"(), "QUAL.OMP.EXCLUSIVE:TYPED"(ptr %x.red, float 0.000000e+00, i32 1, i64 1) ]
  br label %DIR.OMP.SCAN.1

DIR.OMP.SCAN.1:                                   ; preds = %DIR.OMP.SCAN.2
  fence acq_rel
  br label %DIR.OMP.END.SCAN.4

DIR.OMP.END.SCAN.4:                               ; preds = %DIR.OMP.SCAN.1
  call void @llvm.directive.region.exit(token %3) [ "DIR.OMP.END.SCAN"() ]
  br label %DIR.OMP.END.SCAN.228

DIR.OMP.END.SCAN.228:                             ; preds = %DIR.OMP.END.SCAN.4
  %4 = load i32, ptr %i.linear.iv, align 4
  %idxprom1 = sext i32 %4 to i64
  %arrayidx2 = getelementptr inbounds float, ptr %A, i64 %idxprom1
  %5 = load float, ptr %arrayidx2, align 4
  %6 = load float, ptr %x.red, align 4
  %add3 = fadd fast float %6, %5
  store float %add3, ptr %x.red, align 4
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %i.linear.iv)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 1024
  br i1 %exitcond.not, label %DIR.OMP.END.SIMD.6, label %DIR.OMP.END.SCAN.2

DIR.OMP.END.SIMD.6:                               ; preds = %DIR.OMP.END.SCAN.228
  %add3.lcssa = phi float [ %add3, %DIR.OMP.END.SCAN.228 ]
  br label %DIR.OMP.END.SIMD.1

DIR.OMP.END.SIMD.1:                               ; preds = %DIR.OMP.END.SIMD.6
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.OMP.END.SIMD.3

DIR.OMP.END.SIMD.3:                               ; preds = %DIR.OMP.END.SIMD.1
  ret float %add3.lcssa
}

declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture)

declare token @llvm.directive.region.entry()

declare void @llvm.directive.region.exit(token)

declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture)
