; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -vplan-vec -S -vplan-vec-scenario="n1;v16;m16" -vplan-print-after-vpentity-instrs -vplan-print-after-create-masked-vplan -vplan-enable-masked-variant -vplan-print-after-final-cond-transform < %s 2>&1 | FileCheck %s
; RUN: opt -passes="vplan-vec" -S -vplan-vec-scenario="n1;v16;m16" -vplan-print-after-vpentity-instrs -vplan-print-after-create-masked-vplan -vplan-enable-masked-variant -vplan-print-after-final-cond-transform < %s 2>&1 | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"


define i32 @main() {
; CHECK-LABEL:  VPlan after insertion of VPEntities instructions:
; CHECK:          i32* [[VP_X:%.*]] = allocate-priv i32*, OrigAlign = 4
;
; CHECK:          i32 [[VP_XV:%.*]] = add i32 [[VP_IV:%.*]] i32 1
; CHECK-NEXT:     store i32 [[VP_XV]] i32* [[VP_X]]
;
; CHECK:          i32 [[VP_LOAD:%.*]] = load i32* [[VP_X]]
; CHECK-NEXT:     i32 [[VP_LOADED_PRIV_FINAL:%.*]] = private-final-uc-mem i32 [[VP_LOAD]]
; CHECK-NEXT:     store i32 [[VP_LOADED_PRIV_FINAL]] i32* [[X0:%.*]]
;
; CHECK-LABEL: VPlan after emitting masked variant:
; CHECK:          [DA: Div] i32* [[VP0:%.*]] = allocate-priv i32*, OrigAlign = 4
; CHECK:          [DA: Div] i32 [[VP_IV_1:%.*]] = phi  [ i32 [[VP1:%.*]], [[BB7:BB[0-9]+]] ],  [ i32 [[VP_IV_NEXT_1:%.*]], new_latch ]
; CHECK-NEXT:     [DA: Div] i1 [[VP3:%.*]] = icmp ult i32 [[VP_IV_1]] i32 128
; CHECK-NEXT:     [DA: Div] br i1 [[VP3]], [[BB9:BB[0-9]+]], new_latch
;
; CHECK:            [DA: Div] i32 [[VP_XV_1:%.*]] = add i32 [[VP_IV_1]] i32 1
; CHECK-NEXT:       [DA: Div] store i32 [[VP_XV_1]] i32* [[VP0]]
;
; CHECK:         new_latch:
; CHECK-NEXT:     [DA: Div] i32 [[VP_IV_NEXT_1:%.*]] = add i32 [[VP_IV_1:.*]] i32 [[VP2:%.*]]
; CHECK-NEXT:     [DA: Div] i1 [[VP4:%.*]] = icmp ult i32 [[VP_IV_NEXT_1]] i32 128
; CHECK-NEXT:     [DA: Uni] i1 [[VP5:%.*]] = all-zero-check i1 [[VP4]]
;
; CHECK:         [[BB11:BB[0-9]+]]: # preds: new_latch
; CHECK-NEXT:     [DA: Uni] i32 [[VP6:%.*]] = induction-final{add} i32 0 i32 1
; CHECK-NEXT:     [DA: Div] i32 [[VP7:%.*]] = load i32* [[VP0:.*]]
; CHECK-NEXT:     [DA: Uni] i32 [[VP8:%.*]] = private-final-masked-mem i32 [[VP7]] i1 [[VP3]]
; CHECK-NEXT:     [DA: Uni] store i32 [[VP8]] i32* [[X0]]
;
; CHECK-LABEL: VPlan after private finalization instructions transformation:
; CHECK:           [[BB11]]: # preds: new_latch
; CHECK-NEXT:       [DA: Uni] i32 [[VP6]] = induction-final{add} i32 0 i32 1
; CHECK-NEXT:       [DA: Div] i32 [[VP7]] = load i32* [[VP0]]
; CHECK-NEXT:       [DA: Uni] i1 [[VP13:%.*]] = all-zero-check i1 [[VP3]]
; CHECK-NEXT:       [DA: Uni] br i1 [[VP13]], [[BB14:BB[0-9]+]], [[BB15:BB[0-9]+]]
;
; CHECK:             [[BB15]]: # preds: [[BB11]]
; CHECK-NEXT:         [DA: Uni] i32 [[VP8]] = private-final-masked-mem i32 [[VP7]] i1 [[VP3]]
; CHECK-NEXT:         [DA: Uni] store i32 [[VP8]] i32* [[X0]]
; CHECK-NEXT:         [DA: Uni] br [[BB14]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB14]]: # preds: [[BB15]], [[BB11]]
; CHECK-NEXT:       [DA: Uni] br [[BB12:BB[0-9]+]]
;================ generated code
; CHECK:  define i32 @main() {
; CHECK:       VPlannedBB16:
; CHECK-NEXT:    [[WIDE_LOAD170:%.*]] = load <16 x i32>, <16 x i32>* [[DOTVEC0:%.*]], align 1
; CHECK-NEXT:    [[TMP12:%.*]] = bitcast <16 x i1> [[TMP5:%.*]] to i16
; CHECK-NEXT:    [[TMP13:%.*]] = icmp eq i16 [[TMP12]], 0
; CHECK-NEXT:    br i1 [[TMP13]], label [[VPLANNEDBB180:%.*]], label [[VPLANNEDBB190:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB19:
; CHECK-NEXT:    [[TMP14:%.*]] = bitcast <16 x i1> [[TMP5]] to i16
; CHECK-NEXT:    [[CTLZ0:%.*]] = call i16 @llvm.ctlz.i16(i16 [[TMP14]], i1 true)
; CHECK-NEXT:    [[TMP15:%.*]] = sub i16 15, [[CTLZ0]]
; CHECK-NEXT:    [[PRIV_EXTRACT0:%.*]] = extractelement <16 x i32> [[WIDE_LOAD170]], i16 [[TMP15]]
; CHECK-NEXT:    store i32 [[PRIV_EXTRACT0]], i32* [[X0]], align 1
; CHECK-NEXT:    br label [[VPLANNEDBB180]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB18:
; CHECK-NEXT:    br label [[VPLANNEDBB200:%.*]]
;
entry:
  %x = alloca i32, align 4
  br label %preheader

preheader:
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.LASTPRIVATE"(i32* %x) ]
  br label %header
header:
  %iv = phi i32 [ 0, %preheader ], [ %iv.next, %latch ]
  %iv.next = add nsw i32 %iv, 1
  br label %latch

latch:
  %xv = add nsw i32 %iv, 1
  store i32 %xv, i32* %x, align 4
  %bottom_test = icmp eq i32 %iv.next, 128
  br i1 %bottom_test, label %loopexit, label %header

loopexit:
  br label %endloop

endloop:
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %exit

exit:
  %r = load i32, i32* %x, align 4
  ret i32 %r
}

declare token @llvm.directive.region.entry() nounwind
declare void @llvm.directive.region.exit(token) nounwind
