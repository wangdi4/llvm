; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -passes='hir-ssa-deconstruction,hir-vec-dir-insert,hir-vplan-vec' -allow-memory-speculation -debug -debug-only=vplan-idioms -vplan-print-after-plain-cfg -disable-output %s | FileCheck %s

; ModuleID = 'search.c'
source_filename = "search.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree noinline norecurse nounwind uwtable
define dso_local i64 @foo(ptr nocapture readonly %arr, ptr noalias nocapture %larr) local_unnamed_addr #0 {
; CHECK-LABEL:  VPlan after importing plain CFG:
; CHECK-NEXT:  VPlan IR for: foo:HIR
; CHECK-NEXT:  External Defs Start:
; CHECK-DAG:     [[VP0:%.*]] = {%i1}
; CHECK-DAG:     [[VP1:%.*]] = {%arr}
; CHECK-NEXT:  External Defs End:
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], [[BB3:BB[0-9]+]]
; CHECK-NEXT:     i64 [[VP2:%.*]] = phi  [ i64 0, [[BB1]] ],  [ i64 [[VP3:%.*]], [[BB3]] ]
; CHECK-NEXT:     i64 [[VP4:%.*]] = hir-copy i64 [[VP2]] , OriginPhiId: -1
; CHECK-NEXT:     ptr [[VP_SUBSCRIPT:%.*]] = subscript inbounds ptr [[ARR0:%.*]] i64 [[I10:%.*]] i64 [[VP2]]
; CHECK-NEXT:     i8 [[VP_LOAD:%.*]] = load ptr [[VP_SUBSCRIPT]]
; CHECK-NEXT:     i64 [[VP5:%.*]] = hir-copy i64 [[VP4]] , OriginPhiId: -1
; CHECK-NEXT:     i1 [[VP6:%.*]] = icmp ne i8 [[VP_LOAD]] i8 100
; CHECK-NEXT:     br i1 [[VP6]], [[BB4:BB[0-9]+]], [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB3]]: # preds: [[BB2]]
; CHECK-NEXT:       i64 [[VP7:%.*]] = hir-copy i64 100 , OriginPhiId: -1
; CHECK-NEXT:       i64 [[VP3]] = add i64 [[VP2]] i64 1
; CHECK-NEXT:       i1 [[VP8:%.*]] = icmp slt i64 [[VP3]] i64 100
; CHECK-NEXT:       br i1 [[VP8]], [[BB2]], [[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB5]]: # preds: [[BB3]]
; CHECK-NEXT:       br [[BB6:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB4]]: # preds: [[BB2]]
; CHECK-NEXT:       br <External Basic Block>
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]]: # preds: [[BB4]], [[BB5]]
; CHECK-NEXT:     br [[BB7:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB7]]: # preds: [[BB6]]
; CHECK-NEXT:     br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   i64 [[VP5]], i64 [[VP7]] -> [[VP9:%.*]] = {%l2.0.lcssa}
;
entry:
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.end, %entry
  %l1.020 = phi i64 [ 0, %entry ], [ %inc9, %for.end ]
  br label %for.body3

for.body3:                                        ; preds = %for.inc, %for.cond1.preheader
  %l2.019 = phi i64 [ 0, %for.cond1.preheader ], [ %inc, %for.inc ]
  %arrayidx4 = getelementptr inbounds [100 x i8], ptr %arr, i64 %l1.020, i64 %l2.019
  %0 = load i8, ptr %arrayidx4, align 1, !tbaa !2
  %cmp5 = icmp eq i8 %0, 100
  br i1 %cmp5, label %for.inc, label %for.end

for.inc:                                          ; preds = %for.body3
  %inc = add nuw nsw i64 %l2.019, 1
  %exitcond = icmp eq i64 %inc, 100
  br i1 %exitcond, label %for.end, label %for.body3, !llvm.loop !6

for.end:                                          ; preds = %for.inc, %for.body3
  %l2.0.lcssa = phi i64 [ %l2.019, %for.body3 ], [ 100, %for.inc ]
  %arrayidx7 = getelementptr inbounds i64, ptr %larr, i64 %l1.020
  store i64 %l2.0.lcssa, ptr %arrayidx7, align 8, !tbaa !8
  %inc9 = add nuw nsw i64 %l1.020, 1
  %exitcond22 = icmp eq i64 %inc9, 100
  br i1 %exitcond22, label %for.end10, label %for.cond1.preheader, !llvm.loop !10

for.end10:                                        ; preds = %for.end
  ret i64 0
}

attributes #0 = { nofree noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Intel(R) oneAPI DPC++ Compiler 2021.1 (YYYY.x.0.MMDD)"}
!2 = !{!3, !4, i64 0}
!3 = !{!"array@_ZTSA100_c", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.unroll.disable"}
!8 = !{!9, !9, i64 0}
!9 = !{!"long", !4, i64 0}
!10 = distinct !{!10, !7}
