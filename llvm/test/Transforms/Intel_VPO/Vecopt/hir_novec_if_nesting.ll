; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -vplan-enable-new-cfg-merge-hir=false -S -enable-new-pm=0 -disable-output -hir-ssa-deconstruction -hir-vec-dir-insert -hir-vplan-vec -print-after=hir-vplan-vec -vplan-force-vf=2 < %s 2>&1 | FileCheck %s
; RUN: opt -vplan-enable-new-cfg-merge-hir=false -S -passes="hir-ssa-deconstruction,hir-vec-dir-insert,hir-vplan-vec,print<hir>" -disable-output -vplan-force-vf=2 < %s 2>&1 | FileCheck %s
; RUN: opt -vplan-enable-new-cfg-merge-hir -S -enable-new-pm=0 -disable-output -hir-ssa-deconstruction -hir-vec-dir-insert -hir-vplan-vec -print-after=hir-vplan-vec -vplan-force-vf=2 < %s 2>&1 | FileCheck %s
; RUN: opt -vplan-enable-new-cfg-merge-hir -S -passes="hir-ssa-deconstruction,hir-vec-dir-insert,hir-vplan-vec,print<hir>" -disable-output -vplan-force-vf=2 < %s 2>&1 | FileCheck %s

; *** IR Dump Before VPlan HIR Vectorizer (hir-vplan-vec) ***
; Function: main
;
; <0>          BEGIN REGION { }
; <37>               + DO i1 = 0, 76, 1   <DO_LOOP>
; <4>                |   if (-1 * i1 + 67 == 0)
; <4>                |   {
; <9>                |      (%dn)[0][i1 + 3] = 0;
; <4>                |   }
; <4>                |   else
; <4>                |   {
; <14>               |      %2 = (%dn)[0][i1 + 2];
; <16>               |      (%dn)[0][i1 + 2] = %2 + -1;
; <4>                |   }
; <37>               + END LOOP
; <0>          END REGION

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() {
;                *** IR Dump After VPlan HIR Vectorizer (hir-vplan-vec) ***
; CHECK:  Function: main
; CHECK-EMPTY:
; CHECK-NEXT:  BEGIN REGION { modified }
; CHECK:             + DO i1 = 0, 75, 2   <DO_LOOP> <auto-vectorized> <novectorize>
; CHECK-NEXT:        |   [[DOTVEC20:%.*]] = undef
; CHECK-NEXT:        |   [[DOTVEC0:%.*]] = -1 * i1 + -1 * <i32 0, i32 1> + 67 == 0
; CHECK-NEXT:        |   [[DOTVEC10:%.*]] = [[DOTVEC0]]  ^  -1
; CHECK-NEXT:        |   [[DOTVEC20]] = (<2 x i32>*)([[DN0:%.*]])[0][i1 + 2], Mask = @{[[DOTVEC10]]}
; FIXME: The order of 2 following operations is incorrect. They should be emitted in a reverse order
; FIXME: due to the data dependency. DDG analysis allows vectorization supposing the order of statements
; FIXME: is preserved. We should either preserve the order of statements or not vectorize the loop.
; CHECK-NEXT:        |   (<2 x i32>*)([[DN0]])[0][i1 + 2] = [[DOTVEC20]] + -1, Mask = @{[[DOTVEC10]]}
; CHECK-NEXT:        |   (<2 x i32>*)([[DN0]])[0][i1 + 3] = 0, Mask = @{[[DOTVEC0]]}
; CHECK-NEXT:        + END LOOP
; CHECK:             + DO i1 = {{.*}}, 76, 1   <DO_LOOP>
; CHECK-NEXT:        |   if (-1 * i1 + 67 == 0)
; CHECK-NEXT:        |   {
; CHECK-NEXT:        |      ([[DN0]])[0][i1 + 3] = 0
; CHECK-NEXT:        |   }
; CHECK-NEXT:        |   else
; CHECK-NEXT:        |   {
; CHECK-NEXT:        |      [[TMP2:%.*]] = ([[DN0]])[0][i1 + 2]
; CHECK-NEXT:        |      ([[DN0]])[0][i1 + 2] = [[TMP2]] + -1
; CHECK-NEXT:        |   }
; CHECK-NEXT:        + END LOOP
; CHECK:       END REGION
;
entry:
  %dn = alloca [100 x i32], align 16
  %0 = bitcast [100 x i32]* %dn to i8*
  call void @llvm.lifetime.start.p0i8(i64 400, i8* nonnull %0)
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(400) %0, i8 0, i64 400, i1 false)
  br label %for.body

for.body:                                         ; preds = %for.inc, %entry
  %indvars.iv = phi i64 [ 3, %entry ], [ %indvars.iv.next, %for.inc ]
  %nc5.028 = phi i32 [ 68, %entry ], [ %dec, %for.inc ]
  %dec = add nsw i32 %nc5.028, -1
  %tobool.not = icmp eq i32 %dec, 0
  br i1 %tobool.not, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  %1 = add nsw i64 %indvars.iv, -1
  %arrayidx1 = getelementptr inbounds [100 x i32], [100 x i32]* %dn, i64 0, i64 %1
  %2 = load i32, i32* %arrayidx1, align 4
  %sub2 = add i32 %2, -1
  store i32 %sub2, i32* %arrayidx1, align 4
  br label %for.inc

if.else:                                          ; preds = %for.body
  %arrayidx4 = getelementptr inbounds [100 x i32], [100 x i32]* %dn, i64 0, i64 %indvars.iv
  store i32 0, i32* %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.else, %if.then
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 80
  br i1 %exitcond.not, label %for.body.i.preheader, label %for.body

for.body.i.preheader:                             ; preds = %for.inc
  ret i32 0
}

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg)

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture)

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture)
