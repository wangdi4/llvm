; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; Test to check that VPlan's LLVM-IR based vector code generator can explicitly handle fneg without underlying IR Value.
; This test is based on Transforms/Intel_VPO/Vecopt/vplan_loopcfu_liveout_nonlcssa.ll

; Explictly disable VPValue-CG, this test is specifically for IR-based CG.
; RUN: opt -S < %s -VPlanDriver -vplan-force-vf=2 -enable-vp-value-codegen=false | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)

define dso_local void @foo_non_lcssa(i64 %N, float *%a, i64 %mask_out_inner_loop) local_unnamed_addr #0 {
; CHECK: VPlannedBB:
; CHECK:   [[VEC_PHI:%.*]] = phi <2 x float> [ [[WIDE_SELECT_:%.*]], %VPlannedBB ], [ undef, %vector.body ]
; CHECK:   [[VEC_PHI3:%.*]] = phi <2 x i1> [ {{.*}}, %vector.body ], [ [[TMP15:%.*]], %VPlannedBB ]
; CHECK:   [[TMP6:%.*]] = and <2 x i1> {{.*}}, [[VEC_PHI3]]
; CHECK:   [[WIDE_MASKED_GATHER:%.*]] = call <2 x float> @llvm.masked.gather.v2f32.v2p0f32(<2 x float*> {{.*}}, i32 4, <2 x i1> [[TMP6]], <2 x float> undef)
; CHECK:   [[TMP8:%.*]] = fcmp oeq <2 x float> [[WIDE_MASKED_GATHER]], <float 4.200000e+01, float 4.200000e+01>
; CHECK:   [[TMP12:%.*]] = and <2 x i1> [[TMP6]], [[TMP8]]
; CHECK:   [[PREDPHI6:%.*]] = select <2 x i1> [[TMP12]], <2 x float> [[WIDE_MASKED_GATHER]], <2 x float> <float 1.000000e+02, float 1.000000e+02>
; CHECK:   [[TMP15]] = and <2 x i1> {{.*}}, [[VEC_PHI3]]
; CHECK:   [[WIDE_SELECT_]] = select <2 x i1> [[VEC_PHI3]], <2 x float> [[PREDPHI6]], <2 x float> [[VEC_PHI]]
; CHECK: VPlannedBB10:
; CHECK:   fneg <2 x float> [[WIDE_SELECT_]]

entry:
  %cmp18 = icmp sgt i64 %N, 0
  br i1 %cmp18, label %for.cond1.preheader.preheader, label %for.end7

for.cond1.preheader.preheader:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %for.cond1.preheader

for.cond1.preheader:
  %outer.iv = phi i64 [ %outer.iv.next, %for.inc5 ], [ 0, %for.cond1.preheader.preheader ]
  %skip_loop = icmp eq i64 %outer.iv, %mask_out_inner_loop
  br i1 %skip_loop, label %for.inc5, label %top_test

top_test:
  %cmp216 = icmp eq i64 %outer.iv, 0
  br i1 %cmp216, label %for.inc5, label %for.body3.preheader

for.body3.preheader:
  br label %for.body3

for.body3:
  %inner.iv = phi i64 [ %inner.iv.next, %no_early_exit ], [ 0, %for.body3.preheader ]
  ; CG for linear loads in uniform inner loops is ugly, make index non-linear.
  %iv.x2 = mul i64 %inner.iv, %outer.iv
  %arrayidx = getelementptr inbounds float, float* %a, i64 %iv.x2
  %ld = load float, float* %arrayidx
  %some_cmp = fcmp oeq float %ld, 42.0
  %inner.iv.next = add nuw nsw i64 %inner.iv, 1
  br i1 %some_cmp, label %for.inc5.loopexit, label %no_early_exit

no_early_exit:
  %exitcond = icmp eq i64 %inner.iv.next, %outer.iv
  br i1 %exitcond, label %for.inc5.loopexit, label %for.body3

for.inc5.loopexit:
  %phi_use = phi float [ %ld, %for.body3 ], [ 100.0, %no_early_exit ]
  %invalid_fneg = fneg float %phi_use
  %use_fneg = fadd float %invalid_fneg, 1.0
  br label %for.inc5

for.inc5:
  %outer.iv.next = add nuw nsw i64 %outer.iv, 1
  %outer_exit_cond = icmp eq i64 %outer.iv.next, %N
  br i1 %outer_exit_cond, label %for.end7.loopexit, label %for.cond1.preheader

for.end7.loopexit:
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"() ]
  br label %for.end7

for.end7:
  ret void
}

attributes #0 = { norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = !{!"clang version 4.0.0 (branches/vpo 20869)"}
!1 = !{!2, !2, i64 0}
!2 = !{!"long", !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
