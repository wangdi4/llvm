; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -slp-vectorizer -enable-intel-advanced-opts -mtriple=x86_64-unknown-linux-gnu -pslp -mcpu=skylake-avx512 -tti -S | FileCheck %s -check-prefix=8WIDE

define dso_local i32 @x264_pixel_satd_16x16(i8* nocapture readonly %pix1, i32 %i_pix1, i8* nocapture readonly %pix2, i32 %i_pix2) {
; 8WIDE-LABEL: @x264_pixel_satd_16x16(
; 8WIDE-NEXT:  entry:
; 8WIDE-NEXT:    [[ALLOCA:%.*]] = alloca [16 x [8 x i32]], align 4
; 8WIDE-NEXT:    [[ALLOCA933:%.*]] = alloca [8 x i32], align 16
; 8WIDE-NEXT:    [[ALLOCA934:%.*]] = alloca [8 x i32], align 16
; 8WIDE-NEXT:    [[ALLOCA935:%.*]] = alloca [8 x i32], align 16
; 8WIDE-NEXT:    [[ALLOCA936:%.*]] = alloca [8 x i32], align 16
; 8WIDE-NEXT:    br label [[LOOP_1247:%.*]]
; 8WIDE:       loop.1247:
; 8WIDE-NEXT:    [[I1_I64_0:%.*]] = phi i64 [ 0, [[ENTRY:%.*]] ], [ [[NEXTIVLOOP_1247:%.*]], [[LOOP_1247]] ]
; 8WIDE-NEXT:    [[TMP0:%.*]] = sext i32 [[I_PIX1:%.*]] to i64
; 8WIDE-NEXT:    [[TMP1:%.*]] = mul i64 [[I1_I64_0]], [[TMP0]]
; 8WIDE-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, i8* [[PIX1:%.*]], i64 [[TMP1]]
; 8WIDE-NEXT:    [[TMP2:%.*]] = sext i32 [[I_PIX2:%.*]] to i64
; 8WIDE-NEXT:    [[TMP3:%.*]] = mul i64 [[I1_I64_0]], [[TMP2]]
; 8WIDE-NEXT:    [[ARRAYIDX1013:%.*]] = getelementptr inbounds i8, i8* [[PIX2:%.*]], i64 [[TMP3]]
; 8WIDE-NEXT:    [[TMP4:%.*]] = add i64 [[TMP1]], 4
; 8WIDE-NEXT:    [[ARRAYIDX1015:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP4]]
; 8WIDE-NEXT:    [[TMP5:%.*]] = add i64 [[TMP3]], 4
; 8WIDE-NEXT:    [[ARRAYIDX1017:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP5]]
; 8WIDE-NEXT:    [[TMP6:%.*]] = add i64 [[TMP1]], 1
; 8WIDE-NEXT:    [[ARRAYIDX1019:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP6]]
; 8WIDE-NEXT:    [[TMP7:%.*]] = add i64 [[TMP3]], 1
; 8WIDE-NEXT:    [[ARRAYIDX1021:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP7]]
; 8WIDE-NEXT:    [[TMP8:%.*]] = add i64 [[TMP1]], 5
; 8WIDE-NEXT:    [[ARRAYIDX1023:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP8]]
; 8WIDE-NEXT:    [[TMP9:%.*]] = add i64 [[TMP3]], 5
; 8WIDE-NEXT:    [[ARRAYIDX1025:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP9]]
; 8WIDE-NEXT:    [[TMP10:%.*]] = add i64 [[TMP1]], 2
; 8WIDE-NEXT:    [[ARRAYIDX1027:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP10]]
; 8WIDE-NEXT:    [[TMP11:%.*]] = add i64 [[TMP3]], 2
; 8WIDE-NEXT:    [[ARRAYIDX1029:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP11]]
; 8WIDE-NEXT:    [[TMP12:%.*]] = add i64 [[TMP1]], 6
; 8WIDE-NEXT:    [[ARRAYIDX1031:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP12]]
; 8WIDE-NEXT:    [[TMP13:%.*]] = add i64 [[TMP3]], 6
; 8WIDE-NEXT:    [[ARRAYIDX1033:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP13]]
; 8WIDE-NEXT:    [[TMP14:%.*]] = add i64 [[TMP1]], 3
; 8WIDE-NEXT:    [[ARRAYIDX1035:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP14]]
; 8WIDE-NEXT:    [[TMP15:%.*]] = add i64 [[TMP3]], 3
; 8WIDE-NEXT:    [[ARRAYIDX1037:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP15]]
; 8WIDE-NEXT:    [[TMP16:%.*]] = add i64 [[TMP1]], 7
; 8WIDE-NEXT:    [[ARRAYIDX1039:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP16]]
; 8WIDE-NEXT:    [[TMP17:%.*]] = add i64 [[TMP3]], 7
; 8WIDE-NEXT:    [[ARRAYIDX1041:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP17]]
; 8WIDE-NEXT:    [[ARRAYIDX1043:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I1_I64_0]], i64 0
; 8WIDE-NEXT:    [[ARRAYIDX1045:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I1_I64_0]], i64 2
; 8WIDE-NEXT:    [[TMP18:%.*]] = add i64 [[TMP3]], 12
; 8WIDE-NEXT:    [[ARRAYIDX1104:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP18]]
; 8WIDE-NEXT:    [[TMP19:%.*]] = add i64 [[TMP3]], 13
; 8WIDE-NEXT:    [[ARRAYIDX1112:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP19]]
; 8WIDE-NEXT:    [[TMP20:%.*]] = add i64 [[TMP3]], 14
; 8WIDE-NEXT:    [[ARRAYIDX1120:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP20]]
; 8WIDE-NEXT:    [[TMP21:%.*]] = add i64 [[TMP3]], 15
; 8WIDE-NEXT:    [[ARRAYIDX1128:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP21]]
; 8WIDE-NEXT:    [[TMP22:%.*]] = bitcast i8* [[ARRAYIDX1017]] to <4 x i8>*
; 8WIDE-NEXT:    [[TMP23:%.*]] = load <4 x i8>, <4 x i8>* [[TMP22]], align 1, !tbaa !1
; 8WIDE-NEXT:    [[TMP24:%.*]] = bitcast i8* [[ARRAYIDX1104]] to <4 x i8>*
; 8WIDE-NEXT:    [[TMP25:%.*]] = load <4 x i8>, <4 x i8>* [[TMP24]], align 1, !tbaa !1
; 8WIDE-NEXT:    [[SPLITLOADSHUFFLE55:%.*]] = shufflevector <4 x i8> [[TMP23]], <4 x i8> [[TMP25]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; 8WIDE-NEXT:    [[TMP26:%.*]] = zext <8 x i8> [[SPLITLOADSHUFFLE55]] to <8 x i32>
; 8WIDE-NEXT:    [[TMP27:%.*]] = extractelement <8 x i32> [[TMP26]], i32 0
; 8WIDE-NEXT:    [[TMP28:%.*]] = shl i32 [[TMP27]], 16
; 8WIDE-NEXT:    [[TMP29:%.*]] = add i64 [[TMP1]], 12
; 8WIDE-NEXT:    [[ARRAYIDX1102:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP29]]
; 8WIDE-NEXT:    [[TMP30:%.*]] = add i64 [[TMP1]], 13
; 8WIDE-NEXT:    [[ARRAYIDX1110:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP30]]
; 8WIDE-NEXT:    [[TMP31:%.*]] = add i64 [[TMP1]], 14
; 8WIDE-NEXT:    [[ARRAYIDX1118:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP31]]
; 8WIDE-NEXT:    [[TMP32:%.*]] = add i64 [[TMP1]], 15
; 8WIDE-NEXT:    [[ARRAYIDX1126:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP32]]
; 8WIDE-NEXT:    [[TMP33:%.*]] = bitcast i8* [[ARRAYIDX1015]] to <4 x i8>*
; 8WIDE-NEXT:    [[TMP34:%.*]] = load <4 x i8>, <4 x i8>* [[TMP33]], align 1, !tbaa !1
; 8WIDE-NEXT:    [[TMP35:%.*]] = bitcast i8* [[ARRAYIDX1102]] to <4 x i8>*
; 8WIDE-NEXT:    [[TMP36:%.*]] = load <4 x i8>, <4 x i8>* [[TMP35]], align 1, !tbaa !1
; 8WIDE-NEXT:    [[SPLITLOADSHUFFLE:%.*]] = shufflevector <4 x i8> [[TMP34]], <4 x i8> [[TMP36]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; 8WIDE-NEXT:    [[TMP37:%.*]] = zext <8 x i8> [[SPLITLOADSHUFFLE]] to <8 x i32>
; 8WIDE-NEXT:    [[TMP38:%.*]] = extractelement <8 x i32> [[TMP37]], i32 0
; 8WIDE-NEXT:    [[TMP39:%.*]] = shl i32 [[TMP38]], 16
; 8WIDE-NEXT:    [[TMP40:%.*]] = extractelement <8 x i32> [[TMP37]], i32 1
; 8WIDE-NEXT:    [[TMP41:%.*]] = shl i32 [[TMP40]], 16
; 8WIDE-NEXT:    [[TMP42:%.*]] = extractelement <8 x i32> [[TMP26]], i32 1
; 8WIDE-NEXT:    [[TMP43:%.*]] = shl i32 [[TMP42]], 16
; 8WIDE-NEXT:    [[TMP44:%.*]] = extractelement <8 x i32> [[TMP37]], i32 2
; 8WIDE-NEXT:    [[TMP45:%.*]] = shl i32 [[TMP44]], 16
; 8WIDE-NEXT:    [[TMP46:%.*]] = extractelement <8 x i32> [[TMP26]], i32 2
; 8WIDE-NEXT:    [[TMP47:%.*]] = shl i32 [[TMP46]], 16
; 8WIDE-NEXT:    [[TMP48:%.*]] = extractelement <8 x i32> [[TMP37]], i32 3
; 8WIDE-NEXT:    [[TMP49:%.*]] = shl i32 [[TMP48]], 16
; 8WIDE-NEXT:    [[TMP50:%.*]] = extractelement <8 x i32> [[TMP26]], i32 3
; 8WIDE-NEXT:    [[TMP51:%.*]] = shl i32 [[TMP50]], 16
; 8WIDE-NEXT:    [[ARRAYIDX1063:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I1_I64_0]], i64 1
; 8WIDE-NEXT:    [[TMP52:%.*]] = shl i32 [[TMP27]], 16
; 8WIDE-NEXT:    [[TMP53:%.*]] = shl i32 [[TMP38]], 16
; 8WIDE-NEXT:    [[TMP54:%.*]] = shl i32 [[TMP40]], 16
; 8WIDE-NEXT:    [[TMP55:%.*]] = shl i32 [[TMP42]], 16
; 8WIDE-NEXT:    [[TMP56:%.*]] = shl i32 [[TMP44]], 16
; 8WIDE-NEXT:    [[TMP57:%.*]] = shl i32 [[TMP46]], 16
; 8WIDE-NEXT:    [[TMP58:%.*]] = shl i32 [[TMP48]], 16
; 8WIDE-NEXT:    [[TMP59:%.*]] = shl i32 [[TMP50]], 16
; 8WIDE-NEXT:    [[ARRAYIDX1081:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I1_I64_0]], i64 3
; 8WIDE-NEXT:    [[TMP60:%.*]] = shl i32 [[TMP27]], 16
; 8WIDE-NEXT:    [[TMP61:%.*]] = shl i32 [[TMP38]], 16
; 8WIDE-NEXT:    [[TMP62:%.*]] = shl i32 [[TMP40]], 16
; 8WIDE-NEXT:    [[TMP63:%.*]] = shl i32 [[TMP42]], 16
; 8WIDE-NEXT:    [[TMP64:%.*]] = shl i32 [[TMP44]], 16
; 8WIDE-NEXT:    [[TMP65:%.*]] = shl i32 [[TMP46]], 16
; 8WIDE-NEXT:    [[TMP66:%.*]] = shl i32 [[TMP48]], 16
; 8WIDE-NEXT:    [[TMP67:%.*]] = shl i32 [[TMP50]], 16
; 8WIDE-NEXT:    [[TMP68:%.*]] = add i64 [[TMP1]], 8
; 8WIDE-NEXT:    [[ARRAYIDX1098:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP68]]
; 8WIDE-NEXT:    [[TMP69:%.*]] = add i64 [[TMP3]], 8
; 8WIDE-NEXT:    [[ARRAYIDX1100:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP69]]
; 8WIDE-NEXT:    [[TMP70:%.*]] = add i64 [[TMP1]], 9
; 8WIDE-NEXT:    [[ARRAYIDX1106:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP70]]
; 8WIDE-NEXT:    [[TMP71:%.*]] = add i64 [[TMP3]], 9
; 8WIDE-NEXT:    [[ARRAYIDX1108:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP71]]
; 8WIDE-NEXT:    [[TMP72:%.*]] = add i64 [[TMP1]], 10
; 8WIDE-NEXT:    [[ARRAYIDX1114:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP72]]
; 8WIDE-NEXT:    [[TMP73:%.*]] = add i64 [[TMP3]], 10
; 8WIDE-NEXT:    [[ARRAYIDX1116:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP73]]
; 8WIDE-NEXT:    [[TMP74:%.*]] = add i64 [[TMP1]], 11
; 8WIDE-NEXT:    [[ARRAYIDX1122:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP74]]
; 8WIDE-NEXT:    [[TMP75:%.*]] = bitcast i8* [[ARRAYIDX]] to <4 x i8>*
; 8WIDE-NEXT:    [[TMP76:%.*]] = load <4 x i8>, <4 x i8>* [[TMP75]], align 1, !tbaa !1
; 8WIDE-NEXT:    [[TMP77:%.*]] = bitcast i8* [[ARRAYIDX1098]] to <4 x i8>*
; 8WIDE-NEXT:    [[TMP78:%.*]] = load <4 x i8>, <4 x i8>* [[TMP77]], align 1, !tbaa !1
; 8WIDE-NEXT:    [[SPLITLOADSHUFFLE56:%.*]] = shufflevector <4 x i8> [[TMP76]], <4 x i8> [[TMP78]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; 8WIDE-NEXT:    [[TMP79:%.*]] = add i64 [[TMP3]], 11
; 8WIDE-NEXT:    [[ARRAYIDX1124:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP79]]
; 8WIDE-NEXT:    [[TMP80:%.*]] = bitcast i8* [[ARRAYIDX1013]] to <4 x i8>*
; 8WIDE-NEXT:    [[TMP81:%.*]] = load <4 x i8>, <4 x i8>* [[TMP80]], align 1, !tbaa !1
; 8WIDE-NEXT:    [[TMP82:%.*]] = bitcast i8* [[ARRAYIDX1100]] to <4 x i8>*
; 8WIDE-NEXT:    [[TMP83:%.*]] = load <4 x i8>, <4 x i8>* [[TMP82]], align 1, !tbaa !1
; 8WIDE-NEXT:    [[SPLITLOADSHUFFLE54:%.*]] = shufflevector <4 x i8> [[TMP81]], <4 x i8> [[TMP83]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; 8WIDE-NEXT:    [[ARRAYIDX1131:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I1_I64_0]], i64 4
; 8WIDE-NEXT:    [[TMP84:%.*]] = zext <8 x i8> [[SPLITLOADSHUFFLE56]] to <8 x i32>
; 8WIDE-NEXT:    [[TMP85:%.*]] = zext <8 x i8> [[SPLITLOADSHUFFLE54]] to <8 x i32>
; 8WIDE-NEXT:    [[TMP86:%.*]] = shl <8 x i32> [[TMP37]], <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
; 8WIDE-NEXT:    [[TMP87:%.*]] = shl <8 x i32> [[TMP26]], <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
; 8WIDE-NEXT:    [[TMP88:%.*]] = sub <8 x i32> [[TMP86]], [[TMP85]]
; 8WIDE-NEXT:    [[TMP89:%.*]] = sub <8 x i32> [[TMP88]], [[TMP87]]
; 8WIDE-NEXT:    [[TMP90:%.*]] = add <8 x i32> [[TMP89]], [[TMP84]]
; 8WIDE-NEXT:    [[ARRAYIDX1133:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I1_I64_0]], i64 6
; 8WIDE-NEXT:    [[TMP91:%.*]] = extractelement <8 x i32> [[TMP26]], i32 4
; 8WIDE-NEXT:    [[TMP92:%.*]] = shl i32 [[TMP91]], 16
; 8WIDE-NEXT:    [[TMP93:%.*]] = extractelement <8 x i32> [[TMP37]], i32 4
; 8WIDE-NEXT:    [[TMP94:%.*]] = shl i32 [[TMP93]], 16
; 8WIDE-NEXT:    [[TMP95:%.*]] = extractelement <8 x i32> [[TMP37]], i32 5
; 8WIDE-NEXT:    [[TMP96:%.*]] = shl i32 [[TMP95]], 16
; 8WIDE-NEXT:    [[TMP97:%.*]] = extractelement <8 x i32> [[TMP26]], i32 5
; 8WIDE-NEXT:    [[TMP98:%.*]] = shl i32 [[TMP97]], 16
; 8WIDE-NEXT:    [[TMP99:%.*]] = extractelement <8 x i32> [[TMP37]], i32 6
; 8WIDE-NEXT:    [[TMP100:%.*]] = shl i32 [[TMP99]], 16
; 8WIDE-NEXT:    [[TMP101:%.*]] = extractelement <8 x i32> [[TMP26]], i32 6
; 8WIDE-NEXT:    [[TMP102:%.*]] = shl i32 [[TMP101]], 16
; 8WIDE-NEXT:    [[TMP103:%.*]] = extractelement <8 x i32> [[TMP37]], i32 7
; 8WIDE-NEXT:    [[TMP104:%.*]] = shl i32 [[TMP103]], 16
; 8WIDE-NEXT:    [[TMP105:%.*]] = extractelement <8 x i32> [[TMP26]], i32 7
; 8WIDE-NEXT:    [[TMP106:%.*]] = shl i32 [[TMP105]], 16
; 8WIDE-NEXT:    [[ARRAYIDX1151:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I1_I64_0]], i64 5
; 8WIDE-NEXT:    [[TMP107:%.*]] = shl i32 [[TMP91]], 16
; 8WIDE-NEXT:    [[TMP108:%.*]] = shl i32 [[TMP93]], 16
; 8WIDE-NEXT:    [[TMP109:%.*]] = shl i32 [[TMP95]], 16
; 8WIDE-NEXT:    [[TMP110:%.*]] = shl i32 [[TMP97]], 16
; 8WIDE-NEXT:    [[TMP111:%.*]] = shl i32 [[TMP99]], 16
; 8WIDE-NEXT:    [[TMP112:%.*]] = shl i32 [[TMP101]], 16
; 8WIDE-NEXT:    [[TMP113:%.*]] = shl i32 [[TMP103]], 16
; 8WIDE-NEXT:    [[TMP114:%.*]] = shl i32 [[TMP105]], 16
; 8WIDE-NEXT:    [[ARRAYIDX1169:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I1_I64_0]], i64 7
; 8WIDE-NEXT:    [[TMP115:%.*]] = shl i32 [[TMP91]], 16
; 8WIDE-NEXT:    [[TMP116:%.*]] = shl i32 [[TMP93]], 16
; 8WIDE-NEXT:    [[TMP117:%.*]] = shl i32 [[TMP95]], 16
; 8WIDE-NEXT:    [[TMP118:%.*]] = shl i32 [[TMP97]], 16
; 8WIDE-NEXT:    [[TMP119:%.*]] = shl i32 [[TMP99]], 16
; 8WIDE-NEXT:    [[TMP120:%.*]] = shl i32 [[TMP101]], 16
; 8WIDE-NEXT:    [[TMP121:%.*]] = shl i32 [[TMP103]], 16
; 8WIDE-NEXT:    [[TMP122:%.*]] = shl i32 [[TMP105]], 16
; 8WIDE-NEXT:    [[TMP123:%.*]] = extractelement <8 x i32> [[TMP90]], i32 3
; 8WIDE-NEXT:    [[TMP124:%.*]] = insertelement <8 x i32> undef, i32 [[TMP123]], i32 0
; 8WIDE-NEXT:    [[TMP125:%.*]] = extractelement <8 x i32> [[TMP90]], i32 2
; 8WIDE-NEXT:    [[TMP126:%.*]] = insertelement <8 x i32> [[TMP124]], i32 [[TMP125]], i32 1
; 8WIDE-NEXT:    [[TMP127:%.*]] = extractelement <8 x i32> [[TMP90]], i32 1
; 8WIDE-NEXT:    [[TMP128:%.*]] = insertelement <8 x i32> [[TMP126]], i32 [[TMP127]], i32 2
; 8WIDE-NEXT:    [[TMP129:%.*]] = extractelement <8 x i32> [[TMP90]], i32 0
; 8WIDE-NEXT:    [[TMP130:%.*]] = insertelement <8 x i32> [[TMP128]], i32 [[TMP129]], i32 3
; 8WIDE-NEXT:    [[TMP131:%.*]] = extractelement <8 x i32> [[TMP90]], i32 6
; 8WIDE-NEXT:    [[TMP132:%.*]] = insertelement <8 x i32> [[TMP130]], i32 [[TMP131]], i32 4
; 8WIDE-NEXT:    [[TMP133:%.*]] = insertelement <8 x i32> [[TMP132]], i32 [[TMP131]], i32 5
; 8WIDE-NEXT:    [[TMP134:%.*]] = extractelement <8 x i32> [[TMP90]], i32 4
; 8WIDE-NEXT:    [[TMP135:%.*]] = insertelement <8 x i32> [[TMP133]], i32 [[TMP134]], i32 6
; 8WIDE-NEXT:    [[TMP136:%.*]] = insertelement <8 x i32> [[TMP135]], i32 [[TMP134]], i32 7
; 8WIDE-NEXT:    [[TMP137:%.*]] = insertelement <8 x i32> undef, i32 [[TMP125]], i32 0
; 8WIDE-NEXT:    [[TMP138:%.*]] = insertelement <8 x i32> [[TMP137]], i32 [[TMP123]], i32 1
; 8WIDE-NEXT:    [[TMP139:%.*]] = insertelement <8 x i32> [[TMP138]], i32 [[TMP129]], i32 2
; 8WIDE-NEXT:    [[TMP140:%.*]] = insertelement <8 x i32> [[TMP139]], i32 [[TMP127]], i32 3
; 8WIDE-NEXT:    [[TMP141:%.*]] = extractelement <8 x i32> [[TMP90]], i32 7
; 8WIDE-NEXT:    [[TMP142:%.*]] = insertelement <8 x i32> [[TMP140]], i32 [[TMP141]], i32 4
; 8WIDE-NEXT:    [[TMP143:%.*]] = insertelement <8 x i32> [[TMP142]], i32 [[TMP134]], i32 5
; 8WIDE-NEXT:    [[TMP144:%.*]] = extractelement <8 x i32> [[TMP90]], i32 5
; 8WIDE-NEXT:    [[TMP145:%.*]] = insertelement <8 x i32> [[TMP143]], i32 [[TMP144]], i32 6
; 8WIDE-NEXT:    [[TMP146:%.*]] = insertelement <8 x i32> [[TMP145]], i32 [[TMP131]], i32 7
; 8WIDE-NEXT:    [[TMP147:%.*]] = add <8 x i32> [[TMP136]], [[TMP146]]
; 8WIDE-NEXT:    [[TMP148:%.*]] = sub <8 x i32> [[TMP136]], [[TMP146]]
; 8WIDE-NEXT:    [[TMP149:%.*]] = select <8 x i1> <i1 true, i1 false, i1 true, i1 false, i1 true, i1 true, i1 true, i1 false>, <8 x i32> [[TMP147]], <8 x i32> [[TMP148]]
; 8WIDE-NEXT:    [[TMP150:%.*]] = insertelement <8 x i32> undef, i32 [[TMP127]], i32 0
; 8WIDE-NEXT:    [[TMP151:%.*]] = insertelement <8 x i32> [[TMP150]], i32 [[TMP129]], i32 1
; 8WIDE-NEXT:    [[TMP152:%.*]] = insertelement <8 x i32> [[TMP151]], i32 [[TMP123]], i32 2
; 8WIDE-NEXT:    [[TMP153:%.*]] = insertelement <8 x i32> [[TMP152]], i32 [[TMP125]], i32 3
; 8WIDE-NEXT:    [[TMP154:%.*]] = insertelement <8 x i32> [[TMP153]], i32 [[TMP144]], i32 4
; 8WIDE-NEXT:    [[TMP155:%.*]] = insertelement <8 x i32> [[TMP154]], i32 [[TMP141]], i32 5
; 8WIDE-NEXT:    [[TMP156:%.*]] = insertelement <8 x i32> [[TMP155]], i32 [[TMP141]], i32 6
; 8WIDE-NEXT:    [[TMP157:%.*]] = insertelement <8 x i32> [[TMP156]], i32 [[TMP144]], i32 7
; 8WIDE-NEXT:    [[TMP158:%.*]] = add <8 x i32> [[TMP149]], [[TMP157]]
; 8WIDE-NEXT:    [[TMP159:%.*]] = sub <8 x i32> [[TMP149]], [[TMP157]]
; 8WIDE-NEXT:    [[TMP160:%.*]] = select <8 x i1> <i1 true, i1 true, i1 false, i1 false, i1 true, i1 false, i1 false, i1 false>, <8 x i32> [[TMP158]], <8 x i32> [[TMP159]]
; 8WIDE-NEXT:    [[TMP161:%.*]] = add <8 x i32> [[TMP160]], [[TMP90]]
; 8WIDE-NEXT:    [[TMP162:%.*]] = sub <8 x i32> [[TMP160]], [[TMP90]]
; 8WIDE-NEXT:    [[TMP163:%.*]] = select <8 x i1> <i1 true, i1 false, i1 false, i1 true, i1 true, i1 false, i1 false, i1 true>, <8 x i32> [[TMP161]], <8 x i32> [[TMP162]]
; 8WIDE-NEXT:    [[TMP164:%.*]] = bitcast i32* [[ARRAYIDX1043]] to <8 x i32>*
; 8WIDE-NEXT:    store <8 x i32> [[TMP163]], <8 x i32>* [[TMP164]], align 4
; 8WIDE-NEXT:    [[NEXTIVLOOP_1247]] = add nuw nsw i64 [[I1_I64_0]], 1
; 8WIDE-NEXT:    [[CONDLOOP_1247:%.*]] = icmp ult i64 [[NEXTIVLOOP_1247]], 16
; 8WIDE-NEXT:    br i1 [[CONDLOOP_1247]], label [[LOOP_1247]], label [[AFTERLOOP_1247:%.*]]
; 8WIDE:       afterloop.1247:
; 8WIDE-NEXT:    ret i32 0
;
entry:
  %alloca = alloca [16 x [8 x i32]], align 4
  %alloca933 = alloca [8 x i32], align 16
  %alloca934 = alloca [8 x i32], align 16
  %alloca935 = alloca [8 x i32], align 16
  %alloca936 = alloca [8 x i32], align 16
  br label %loop.1247

loop.1247:                                        ; preds = %loop.1247, %entry
  %i1.i64.0 = phi i64 [ 0, %entry ], [ %nextivloop.1247, %loop.1247 ]
  %0 = sext i32 %i_pix1 to i64
  %1 = mul i64 %i1.i64.0, %0
  %arrayIdx = getelementptr inbounds i8, i8* %pix1, i64 %1
  %gepload = load i8, i8* %arrayIdx, align 1, !tbaa !2
  %2 = sext i32 %i_pix2 to i64
  %3 = mul i64 %i1.i64.0, %2
  %arrayIdx1013 = getelementptr inbounds i8, i8* %pix2, i64 %3
  %gepload1014 = load i8, i8* %arrayIdx1013, align 1, !tbaa !2
  %4 = add i64 %1, 4
  %arrayIdx1015 = getelementptr inbounds i8, i8* %pix1, i64 %4
  %gepload1016 = load i8, i8* %arrayIdx1015, align 1, !tbaa !2
  %5 = add i64 %3, 4
  %arrayIdx1017 = getelementptr inbounds i8, i8* %pix2, i64 %5
  %gepload1018 = load i8, i8* %arrayIdx1017, align 1, !tbaa !2
  %6 = add i64 %1, 1
  %arrayIdx1019 = getelementptr inbounds i8, i8* %pix1, i64 %6
  %gepload1020 = load i8, i8* %arrayIdx1019, align 1, !tbaa !2
  %7 = add i64 %3, 1
  %arrayIdx1021 = getelementptr inbounds i8, i8* %pix2, i64 %7
  %gepload1022 = load i8, i8* %arrayIdx1021, align 1, !tbaa !2
  %8 = add i64 %1, 5
  %arrayIdx1023 = getelementptr inbounds i8, i8* %pix1, i64 %8
  %gepload1024 = load i8, i8* %arrayIdx1023, align 1, !tbaa !2
  %9 = add i64 %3, 5
  %arrayIdx1025 = getelementptr inbounds i8, i8* %pix2, i64 %9
  %gepload1026 = load i8, i8* %arrayIdx1025, align 1, !tbaa !2
  %10 = add i64 %1, 2
  %arrayIdx1027 = getelementptr inbounds i8, i8* %pix1, i64 %10
  %gepload1028 = load i8, i8* %arrayIdx1027, align 1, !tbaa !2
  %11 = add i64 %3, 2
  %arrayIdx1029 = getelementptr inbounds i8, i8* %pix2, i64 %11
  %gepload1030 = load i8, i8* %arrayIdx1029, align 1, !tbaa !2
  %12 = add i64 %1, 6
  %arrayIdx1031 = getelementptr inbounds i8, i8* %pix1, i64 %12
  %gepload1032 = load i8, i8* %arrayIdx1031, align 1, !tbaa !2
  %13 = add i64 %3, 6
  %arrayIdx1033 = getelementptr inbounds i8, i8* %pix2, i64 %13
  %gepload1034 = load i8, i8* %arrayIdx1033, align 1, !tbaa !2
  %14 = add i64 %1, 3
  %arrayIdx1035 = getelementptr inbounds i8, i8* %pix1, i64 %14
  %gepload1036 = load i8, i8* %arrayIdx1035, align 1, !tbaa !2
  %15 = add i64 %3, 3
  %arrayIdx1037 = getelementptr inbounds i8, i8* %pix2, i64 %15
  %gepload1038 = load i8, i8* %arrayIdx1037, align 1, !tbaa !2
  %16 = add i64 %1, 7
  %arrayIdx1039 = getelementptr inbounds i8, i8* %pix1, i64 %16
  %gepload1040 = load i8, i8* %arrayIdx1039, align 1, !tbaa !2
  %17 = add i64 %3, 7
  %arrayIdx1041 = getelementptr inbounds i8, i8* %pix2, i64 %17
  %gepload1042 = load i8, i8* %arrayIdx1041, align 1, !tbaa !2
  %arrayIdx1043 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1.i64.0, i64 0
  %18 = zext i8 %gepload1036 to i32
  %19 = zext i8 %gepload1028 to i32
  %20 = zext i8 %gepload1020 to i32
  %21 = zext i8 %gepload to i32
  %22 = zext i8 %gepload1042 to i32
  %23 = zext i8 %gepload1034 to i32
  %24 = zext i8 %gepload1026 to i32
  %25 = zext i8 %gepload1018 to i32
  %26 = zext i8 %gepload1038 to i32
  %27 = zext i8 %gepload1030 to i32
  %28 = zext i8 %gepload1022 to i32
  %29 = zext i8 %gepload1014 to i32
  %30 = zext i8 %gepload1040 to i32
  %31 = zext i8 %gepload1032 to i32
  %32 = zext i8 %gepload1024 to i32
  %33 = zext i8 %gepload1016 to i32
  %34 = shl i32 %25, 16
  %35 = shl i32 %33, 16
  %Chain_T24_168 = sub i32 %35, %29
  %Chain_T24_171 = sub i32 %Chain_T24_168, %34
  %Chain_T24_169 = add i32 %Chain_T24_171, %21
  %36 = shl i32 %32, 16
  %37 = shl i32 %24, 16
  %Chain_T24_162 = sub i32 %36, %28
  %Chain_T24_160 = sub i32 %Chain_T24_162, %37
  %Chain_T24_163 = add i32 %Chain_T24_160, %20
  %38 = shl i32 %31, 16
  %39 = shl i32 %23, 16
  %Chain_T24_154 = sub i32 %38, %27
  %Chain_T24_152 = sub i32 %Chain_T24_154, %39
  %Chain_T24_155 = add i32 %Chain_T24_152, %19
  %40 = shl i32 %30, 16
  %41 = shl i32 %22, 16
  %Chain_T24_149 = sub i32 %40, %26
  %Chain_T24_ = sub i32 %Chain_T24_149, %41
  %Chain_T24_150 = add i32 %Chain_T24_, %18
  %Bridge_T24_151 = add i32 %Chain_T24_150, %Chain_T24_155
  %Bridge_T24_159 = add i32 %Bridge_T24_151, %Chain_T24_163
  %Bridge_T24_167 = add i32 %Bridge_T24_159, %Chain_T24_169
  store i32 %Bridge_T24_167, i32* %arrayIdx1043, align 4
  %arrayIdx1045 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1.i64.0, i64 2
  %42 = shl i32 %25, 16
  %43 = shl i32 %33, 16
  %44 = shl i32 %32, 16
  %45 = shl i32 %24, 16
  %46 = shl i32 %31, 16
  %47 = shl i32 %23, 16
  %48 = shl i32 %30, 16
  %49 = shl i32 %22, 16
  %Bridge_T23_156 = sub i32 %Chain_T24_163, %Chain_T24_155
  %Bridge_T23_ = sub i32 %Bridge_T23_156, %Chain_T24_150
  %Bridge_T23_172 = add i32 %Bridge_T23_, %Chain_T24_169
  store i32 %Bridge_T23_172, i32* %arrayIdx1045, align 4
  %arrayIdx1063 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1.i64.0, i64 1
  %50 = shl i32 %25, 16
  %51 = shl i32 %33, 16
  %52 = shl i32 %32, 16
  %53 = shl i32 %24, 16
  %54 = shl i32 %31, 16
  %55 = shl i32 %23, 16
  %56 = shl i32 %30, 16
  %57 = shl i32 %22, 16
  %Bridge_T22_ = sub i32 %Chain_T24_155, %Chain_T24_150
  %Bridge_T22_165 = sub i32 %Bridge_T22_, %Chain_T24_163
  %Bridge_T22_173 = add i32 %Bridge_T22_165, %Chain_T24_169
  store i32 %Bridge_T22_173, i32* %arrayIdx1063, align 4
  %arrayIdx1081 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1.i64.0, i64 3
  %58 = shl i32 %25, 16
  %59 = shl i32 %33, 16
  %60 = shl i32 %32, 16
  %61 = shl i32 %24, 16
  %62 = shl i32 %31, 16
  %63 = shl i32 %23, 16
  %64 = shl i32 %30, 16
  %65 = shl i32 %22, 16
  %Bridge_T21_158 = sub i32 %Chain_T24_150, %Chain_T24_155
  %Bridge_T21_166 = sub i32 %Bridge_T21_158, %Chain_T24_163
  %Bridge_T21_174 = add i32 %Bridge_T21_166, %Chain_T24_169
  store i32 %Bridge_T21_174, i32* %arrayIdx1081, align 4
  %66 = add i64 %1, 8
  %arrayIdx1098 = getelementptr inbounds i8, i8* %pix1, i64 %66
  %gepload1099 = load i8, i8* %arrayIdx1098, align 1, !tbaa !2
  %67 = add i64 %3, 8
  %arrayIdx1100 = getelementptr inbounds i8, i8* %pix2, i64 %67
  %gepload1101 = load i8, i8* %arrayIdx1100, align 1, !tbaa !2
  %68 = add i64 %1, 12
  %arrayIdx1102 = getelementptr inbounds i8, i8* %pix1, i64 %68
  %gepload1103 = load i8, i8* %arrayIdx1102, align 1, !tbaa !2
  %69 = add i64 %3, 12
  %arrayIdx1104 = getelementptr inbounds i8, i8* %pix2, i64 %69
  %gepload1105 = load i8, i8* %arrayIdx1104, align 1, !tbaa !2
  %70 = add i64 %1, 9
  %arrayIdx1106 = getelementptr inbounds i8, i8* %pix1, i64 %70
  %gepload1107 = load i8, i8* %arrayIdx1106, align 1, !tbaa !2
  %71 = add i64 %3, 9
  %arrayIdx1108 = getelementptr inbounds i8, i8* %pix2, i64 %71
  %gepload1109 = load i8, i8* %arrayIdx1108, align 1, !tbaa !2
  %72 = add i64 %1, 13
  %arrayIdx1110 = getelementptr inbounds i8, i8* %pix1, i64 %72
  %gepload1111 = load i8, i8* %arrayIdx1110, align 1, !tbaa !2
  %73 = add i64 %3, 13
  %arrayIdx1112 = getelementptr inbounds i8, i8* %pix2, i64 %73
  %gepload1113 = load i8, i8* %arrayIdx1112, align 1, !tbaa !2
  %74 = add i64 %1, 10
  %arrayIdx1114 = getelementptr inbounds i8, i8* %pix1, i64 %74
  %gepload1115 = load i8, i8* %arrayIdx1114, align 1, !tbaa !2
  %75 = add i64 %3, 10
  %arrayIdx1116 = getelementptr inbounds i8, i8* %pix2, i64 %75
  %gepload1117 = load i8, i8* %arrayIdx1116, align 1, !tbaa !2
  %76 = add i64 %1, 14
  %arrayIdx1118 = getelementptr inbounds i8, i8* %pix1, i64 %76
  %gepload1119 = load i8, i8* %arrayIdx1118, align 1, !tbaa !2
  %77 = add i64 %3, 14
  %arrayIdx1120 = getelementptr inbounds i8, i8* %pix2, i64 %77
  %gepload1121 = load i8, i8* %arrayIdx1120, align 1, !tbaa !2
  %78 = add i64 %1, 11
  %arrayIdx1122 = getelementptr inbounds i8, i8* %pix1, i64 %78
  %gepload1123 = load i8, i8* %arrayIdx1122, align 1, !tbaa !2
  %79 = add i64 %3, 11
  %arrayIdx1124 = getelementptr inbounds i8, i8* %pix2, i64 %79
  %gepload1125 = load i8, i8* %arrayIdx1124, align 1, !tbaa !2
  %80 = add i64 %1, 15
  %arrayIdx1126 = getelementptr inbounds i8, i8* %pix1, i64 %80
  %gepload1127 = load i8, i8* %arrayIdx1126, align 1, !tbaa !2
  %81 = add i64 %3, 15
  %arrayIdx1128 = getelementptr inbounds i8, i8* %pix2, i64 %81
  %gepload1129 = load i8, i8* %arrayIdx1128, align 1, !tbaa !2
  %arrayIdx1131 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1.i64.0, i64 4
  %82 = zext i8 %gepload1123 to i32
  %83 = zext i8 %gepload1115 to i32
  %84 = zext i8 %gepload1107 to i32
  %85 = zext i8 %gepload1099 to i32
  %86 = zext i8 %gepload1129 to i32
  %87 = zext i8 %gepload1121 to i32
  %88 = zext i8 %gepload1113 to i32
  %89 = zext i8 %gepload1105 to i32
  %90 = zext i8 %gepload1125 to i32
  %91 = zext i8 %gepload1117 to i32
  %92 = zext i8 %gepload1109 to i32
  %93 = zext i8 %gepload1101 to i32
  %94 = zext i8 %gepload1127 to i32
  %95 = zext i8 %gepload1119 to i32
  %96 = zext i8 %gepload1111 to i32
  %97 = zext i8 %gepload1103 to i32
  %98 = shl i32 %89, 16
  %99 = shl i32 %97, 16
  %Chain_T4_81 = sub i32 %99, %93
  %Chain_T4_84 = sub i32 %Chain_T4_81, %98
  %Chain_T4_82 = add i32 %Chain_T4_84, %85
  %100 = shl i32 %96, 16
  %101 = shl i32 %88, 16
  %Chain_T4_75 = sub i32 %100, %92
  %Chain_T4_73 = sub i32 %Chain_T4_75, %101
  %Chain_T4_76 = add i32 %Chain_T4_73, %84
  %102 = shl i32 %95, 16
  %103 = shl i32 %87, 16
  %Chain_T4_67 = sub i32 %102, %91
  %Chain_T4_65 = sub i32 %Chain_T4_67, %103
  %Chain_T4_68 = add i32 %Chain_T4_65, %83
  %104 = shl i32 %94, 16
  %105 = shl i32 %86, 16
  %Chain_T4_62 = sub i32 %104, %90
  %Chain_T4_ = sub i32 %Chain_T4_62, %105
  %Chain_T4_63 = add i32 %Chain_T4_, %82
  %Bridge_T4_64 = add i32 %Chain_T4_63, %Chain_T4_68
  %Bridge_T4_72 = add i32 %Bridge_T4_64, %Chain_T4_76
  %Bridge_T4_80 = add i32 %Bridge_T4_72, %Chain_T4_82
  store i32 %Bridge_T4_80, i32* %arrayIdx1131, align 4
  %arrayIdx1133 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1.i64.0, i64 6
  %106 = shl i32 %89, 16
  %107 = shl i32 %97, 16
  %108 = shl i32 %96, 16
  %109 = shl i32 %88, 16
  %110 = shl i32 %95, 16
  %111 = shl i32 %87, 16
  %112 = shl i32 %94, 16
  %113 = shl i32 %86, 16
  %Bridge_T3_69 = sub i32 %Chain_T4_76, %Chain_T4_68
  %Bridge_T3_ = sub i32 %Bridge_T3_69, %Chain_T4_63
  %Bridge_T3_85 = add i32 %Bridge_T3_, %Chain_T4_82
  store i32 %Bridge_T3_85, i32* %arrayIdx1133, align 4
  %arrayIdx1151 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1.i64.0, i64 5
  %114 = shl i32 %89, 16
  %115 = shl i32 %97, 16
  %116 = shl i32 %96, 16
  %117 = shl i32 %88, 16
  %118 = shl i32 %95, 16
  %119 = shl i32 %87, 16
  %120 = shl i32 %94, 16
  %121 = shl i32 %86, 16
  %Bridge_T2_ = sub i32 %Chain_T4_68, %Chain_T4_63
  %Bridge_T2_78 = sub i32 %Bridge_T2_, %Chain_T4_76
  %Bridge_T2_86 = add i32 %Bridge_T2_78, %Chain_T4_82
  store i32 %Bridge_T2_86, i32* %arrayIdx1151, align 4
  %arrayIdx1169 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1.i64.0, i64 7
  %122 = shl i32 %89, 16
  %123 = shl i32 %97, 16
  %124 = shl i32 %96, 16
  %125 = shl i32 %88, 16
  %126 = shl i32 %95, 16
  %127 = shl i32 %87, 16
  %128 = shl i32 %94, 16
  %129 = shl i32 %86, 16
  %Bridge_T1_71 = sub i32 %Chain_T4_63, %Chain_T4_68
  %Bridge_T1_79 = sub i32 %Bridge_T1_71, %Chain_T4_76
  %Bridge_T1_87 = add i32 %Bridge_T1_79, %Chain_T4_82
  store i32 %Bridge_T1_87, i32* %arrayIdx1169, align 4
  %nextivloop.1247 = add nuw nsw i64 %i1.i64.0, 1
  %condloop.1247 = icmp ult i64 %nextivloop.1247, 16
  br i1 %condloop.1247, label %loop.1247, label %afterloop.1247

afterloop.1247:                                   ; preds = %loop.1247
  ret i32 0
}

!llvm.module.flags = !{!0}

!0 = !{i32 1, !"wchar_size", i32 4}
!2 = !{!3, !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}

