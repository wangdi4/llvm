; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -slp-vectorizer -enable-intel-advanced-opts -mtriple=x86_64-unknown-linux-gnu -mcpu=skylake-avx512 -S | FileCheck %s -check-prefix=8WIDE

define dso_local i32 @x264_pixel_satd_16x16(i8* nocapture readonly %pix1, i32 %i_pix1, i8* nocapture readonly %pix2, i32 %i_pix2) {
; 8WIDE-LABEL: @x264_pixel_satd_16x16(
; 8WIDE-NEXT:  entry:
; 8WIDE-NEXT:    [[ALLOCA:%.*]] = alloca [16 x [8 x i32]], align 4
; 8WIDE-NEXT:    [[ALLOCA933:%.*]] = alloca [8 x i32], align 16
; 8WIDE-NEXT:    [[ALLOCA934:%.*]] = alloca [8 x i32], align 16
; 8WIDE-NEXT:    [[ALLOCA935:%.*]] = alloca [8 x i32], align 16
; 8WIDE-NEXT:    [[ALLOCA936:%.*]] = alloca [8 x i32], align 16
; 8WIDE-NEXT:    br label [[LOOP_1247:%.*]]
; 8WIDE:       loop.1247:
; 8WIDE-NEXT:    [[I1_I64_0:%.*]] = phi i64 [ 0, [[ENTRY:%.*]] ], [ [[NEXTIVLOOP_1247:%.*]], [[LOOP_1247]] ]
; 8WIDE-NEXT:    [[I:%.*]] = sext i32 [[I_PIX1:%.*]] to i64
; 8WIDE-NEXT:    [[I1:%.*]] = mul i64 [[I1_I64_0]], [[I]]
; 8WIDE-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, i8* [[PIX1:%.*]], i64 [[I1]]
; 8WIDE-NEXT:    [[I2:%.*]] = sext i32 [[I_PIX2:%.*]] to i64
; 8WIDE-NEXT:    [[I3:%.*]] = mul i64 [[I1_I64_0]], [[I2]]
; 8WIDE-NEXT:    [[ARRAYIDX1013:%.*]] = getelementptr inbounds i8, i8* [[PIX2:%.*]], i64 [[I3]]
; 8WIDE-NEXT:    [[I4:%.*]] = add i64 [[I1]], 4
; 8WIDE-NEXT:    [[ARRAYIDX1015:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I4]]
; 8WIDE-NEXT:    [[I5:%.*]] = add i64 [[I3]], 4
; 8WIDE-NEXT:    [[ARRAYIDX1017:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I5]]
; 8WIDE-NEXT:    [[I6:%.*]] = add i64 [[I1]], 1
; 8WIDE-NEXT:    [[ARRAYIDX1019:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I6]]
; 8WIDE-NEXT:    [[I7:%.*]] = add i64 [[I3]], 1
; 8WIDE-NEXT:    [[ARRAYIDX1021:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I7]]
; 8WIDE-NEXT:    [[I8:%.*]] = add i64 [[I1]], 5
; 8WIDE-NEXT:    [[ARRAYIDX1023:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I8]]
; 8WIDE-NEXT:    [[I9:%.*]] = add i64 [[I3]], 5
; 8WIDE-NEXT:    [[ARRAYIDX1025:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I9]]
; 8WIDE-NEXT:    [[I10:%.*]] = add i64 [[I1]], 2
; 8WIDE-NEXT:    [[ARRAYIDX1027:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I10]]
; 8WIDE-NEXT:    [[I11:%.*]] = add i64 [[I3]], 2
; 8WIDE-NEXT:    [[ARRAYIDX1029:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I11]]
; 8WIDE-NEXT:    [[I12:%.*]] = add i64 [[I1]], 6
; 8WIDE-NEXT:    [[ARRAYIDX1031:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I12]]
; 8WIDE-NEXT:    [[I13:%.*]] = add i64 [[I3]], 6
; 8WIDE-NEXT:    [[ARRAYIDX1033:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I13]]
; 8WIDE-NEXT:    [[I14:%.*]] = add i64 [[I1]], 3
; 8WIDE-NEXT:    [[ARRAYIDX1035:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I14]]
; 8WIDE-NEXT:    [[I15:%.*]] = add i64 [[I3]], 3
; 8WIDE-NEXT:    [[ARRAYIDX1037:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I15]]
; 8WIDE-NEXT:    [[I16:%.*]] = add i64 [[I1]], 7
; 8WIDE-NEXT:    [[ARRAYIDX1039:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I16]]
; 8WIDE-NEXT:    [[I17:%.*]] = add i64 [[I3]], 7
; 8WIDE-NEXT:    [[ARRAYIDX1041:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I17]]
; 8WIDE-NEXT:    [[ARRAYIDX1043:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I1_I64_0]], i64 0
; 8WIDE-NEXT:    [[ARRAYIDX1045:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I1_I64_0]], i64 2
; 8WIDE-NEXT:    [[I69:%.*]] = add i64 [[I3]], 12
; 8WIDE-NEXT:    [[ARRAYIDX1104:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I69]]
; 8WIDE-NEXT:    [[I73:%.*]] = add i64 [[I3]], 13
; 8WIDE-NEXT:    [[ARRAYIDX1112:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I73]]
; 8WIDE-NEXT:    [[I77:%.*]] = add i64 [[I3]], 14
; 8WIDE-NEXT:    [[ARRAYIDX1120:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I77]]
; 8WIDE-NEXT:    [[I81:%.*]] = add i64 [[I3]], 15
; 8WIDE-NEXT:    [[ARRAYIDX1128:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I81]]
; 8WIDE-NEXT:    [[TMP0:%.*]] = bitcast i8* [[ARRAYIDX1017]] to <4 x i8>*
; 8WIDE-NEXT:    [[TMP1:%.*]] = load <4 x i8>, <4 x i8>* [[TMP0]], align 1
; 8WIDE-NEXT:    [[TMP2:%.*]] = bitcast i8* [[ARRAYIDX1104]] to <4 x i8>*
; 8WIDE-NEXT:    [[TMP3:%.*]] = load <4 x i8>, <4 x i8>* [[TMP2]], align 1
; 8WIDE-NEXT:    [[SPLITLOADSHUFFLE55:%.*]] = shufflevector <4 x i8> [[TMP1]], <4 x i8> [[TMP3]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; 8WIDE-NEXT:    [[TMP4:%.*]] = zext <8 x i8> [[SPLITLOADSHUFFLE55]] to <8 x i32>
; 8WIDE-NEXT:    [[TMP5:%.*]] = extractelement <8 x i32> [[TMP4]], i32 0
; 8WIDE-NEXT:    [[I42:%.*]] = shl i32 [[TMP5]], 16
; 8WIDE-NEXT:    [[I68:%.*]] = add i64 [[I1]], 12
; 8WIDE-NEXT:    [[ARRAYIDX1102:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I68]]
; 8WIDE-NEXT:    [[I72:%.*]] = add i64 [[I1]], 13
; 8WIDE-NEXT:    [[ARRAYIDX1110:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I72]]
; 8WIDE-NEXT:    [[I76:%.*]] = add i64 [[I1]], 14
; 8WIDE-NEXT:    [[ARRAYIDX1118:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I76]]
; 8WIDE-NEXT:    [[I80:%.*]] = add i64 [[I1]], 15
; 8WIDE-NEXT:    [[ARRAYIDX1126:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I80]]
; 8WIDE-NEXT:    [[TMP6:%.*]] = bitcast i8* [[ARRAYIDX1015]] to <4 x i8>*
; 8WIDE-NEXT:    [[TMP7:%.*]] = load <4 x i8>, <4 x i8>* [[TMP6]], align 1
; 8WIDE-NEXT:    [[TMP8:%.*]] = bitcast i8* [[ARRAYIDX1102]] to <4 x i8>*
; 8WIDE-NEXT:    [[TMP9:%.*]] = load <4 x i8>, <4 x i8>* [[TMP8]], align 1
; 8WIDE-NEXT:    [[SPLITLOADSHUFFLE:%.*]] = shufflevector <4 x i8> [[TMP7]], <4 x i8> [[TMP9]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; 8WIDE-NEXT:    [[TMP10:%.*]] = zext <8 x i8> [[SPLITLOADSHUFFLE]] to <8 x i32>
; 8WIDE-NEXT:    [[TMP11:%.*]] = extractelement <8 x i32> [[TMP10]], i32 0
; 8WIDE-NEXT:    [[I43:%.*]] = shl i32 [[TMP11]], 16
; 8WIDE-NEXT:    [[TMP12:%.*]] = extractelement <8 x i32> [[TMP10]], i32 1
; 8WIDE-NEXT:    [[I44:%.*]] = shl i32 [[TMP12]], 16
; 8WIDE-NEXT:    [[TMP13:%.*]] = extractelement <8 x i32> [[TMP4]], i32 1
; 8WIDE-NEXT:    [[I45:%.*]] = shl i32 [[TMP13]], 16
; 8WIDE-NEXT:    [[TMP14:%.*]] = extractelement <8 x i32> [[TMP10]], i32 2
; 8WIDE-NEXT:    [[I46:%.*]] = shl i32 [[TMP14]], 16
; 8WIDE-NEXT:    [[TMP15:%.*]] = extractelement <8 x i32> [[TMP4]], i32 2
; 8WIDE-NEXT:    [[I47:%.*]] = shl i32 [[TMP15]], 16
; 8WIDE-NEXT:    [[TMP16:%.*]] = extractelement <8 x i32> [[TMP10]], i32 3
; 8WIDE-NEXT:    [[I48:%.*]] = shl i32 [[TMP16]], 16
; 8WIDE-NEXT:    [[TMP17:%.*]] = extractelement <8 x i32> [[TMP4]], i32 3
; 8WIDE-NEXT:    [[I49:%.*]] = shl i32 [[TMP17]], 16
; 8WIDE-NEXT:    [[ARRAYIDX1063:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I1_I64_0]], i64 1
; 8WIDE-NEXT:    [[I50:%.*]] = shl i32 [[TMP5]], 16
; 8WIDE-NEXT:    [[I51:%.*]] = shl i32 [[TMP11]], 16
; 8WIDE-NEXT:    [[I52:%.*]] = shl i32 [[TMP12]], 16
; 8WIDE-NEXT:    [[I53:%.*]] = shl i32 [[TMP13]], 16
; 8WIDE-NEXT:    [[I54:%.*]] = shl i32 [[TMP14]], 16
; 8WIDE-NEXT:    [[I55:%.*]] = shl i32 [[TMP15]], 16
; 8WIDE-NEXT:    [[I56:%.*]] = shl i32 [[TMP16]], 16
; 8WIDE-NEXT:    [[I57:%.*]] = shl i32 [[TMP17]], 16
; 8WIDE-NEXT:    [[ARRAYIDX1081:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I1_I64_0]], i64 3
; 8WIDE-NEXT:    [[I58:%.*]] = shl i32 [[TMP5]], 16
; 8WIDE-NEXT:    [[I59:%.*]] = shl i32 [[TMP11]], 16
; 8WIDE-NEXT:    [[I60:%.*]] = shl i32 [[TMP12]], 16
; 8WIDE-NEXT:    [[I61:%.*]] = shl i32 [[TMP13]], 16
; 8WIDE-NEXT:    [[I62:%.*]] = shl i32 [[TMP14]], 16
; 8WIDE-NEXT:    [[I63:%.*]] = shl i32 [[TMP15]], 16
; 8WIDE-NEXT:    [[I64:%.*]] = shl i32 [[TMP16]], 16
; 8WIDE-NEXT:    [[I65:%.*]] = shl i32 [[TMP17]], 16
; 8WIDE-NEXT:    [[I66:%.*]] = add i64 [[I1]], 8
; 8WIDE-NEXT:    [[ARRAYIDX1098:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I66]]
; 8WIDE-NEXT:    [[I67:%.*]] = add i64 [[I3]], 8
; 8WIDE-NEXT:    [[ARRAYIDX1100:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I67]]
; 8WIDE-NEXT:    [[I70:%.*]] = add i64 [[I1]], 9
; 8WIDE-NEXT:    [[ARRAYIDX1106:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I70]]
; 8WIDE-NEXT:    [[I71:%.*]] = add i64 [[I3]], 9
; 8WIDE-NEXT:    [[ARRAYIDX1108:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I71]]
; 8WIDE-NEXT:    [[I74:%.*]] = add i64 [[I1]], 10
; 8WIDE-NEXT:    [[ARRAYIDX1114:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I74]]
; 8WIDE-NEXT:    [[I75:%.*]] = add i64 [[I3]], 10
; 8WIDE-NEXT:    [[ARRAYIDX1116:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I75]]
; 8WIDE-NEXT:    [[I78:%.*]] = add i64 [[I1]], 11
; 8WIDE-NEXT:    [[ARRAYIDX1122:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[I78]]
; 8WIDE-NEXT:    [[TMP18:%.*]] = bitcast i8* [[ARRAYIDX]] to <4 x i8>*
; 8WIDE-NEXT:    [[TMP19:%.*]] = load <4 x i8>, <4 x i8>* [[TMP18]], align 1
; 8WIDE-NEXT:    [[TMP20:%.*]] = bitcast i8* [[ARRAYIDX1098]] to <4 x i8>*
; 8WIDE-NEXT:    [[TMP21:%.*]] = load <4 x i8>, <4 x i8>* [[TMP20]], align 1
; 8WIDE-NEXT:    [[SPLITLOADSHUFFLE56:%.*]] = shufflevector <4 x i8> [[TMP19]], <4 x i8> [[TMP21]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; 8WIDE-NEXT:    [[I79:%.*]] = add i64 [[I3]], 11
; 8WIDE-NEXT:    [[ARRAYIDX1124:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[I79]]
; 8WIDE-NEXT:    [[TMP22:%.*]] = bitcast i8* [[ARRAYIDX1013]] to <4 x i8>*
; 8WIDE-NEXT:    [[TMP23:%.*]] = load <4 x i8>, <4 x i8>* [[TMP22]], align 1
; 8WIDE-NEXT:    [[TMP24:%.*]] = bitcast i8* [[ARRAYIDX1100]] to <4 x i8>*
; 8WIDE-NEXT:    [[TMP25:%.*]] = load <4 x i8>, <4 x i8>* [[TMP24]], align 1
; 8WIDE-NEXT:    [[SPLITLOADSHUFFLE54:%.*]] = shufflevector <4 x i8> [[TMP23]], <4 x i8> [[TMP25]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; 8WIDE-NEXT:    [[ARRAYIDX1131:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I1_I64_0]], i64 4
; 8WIDE-NEXT:    [[TMP26:%.*]] = zext <8 x i8> [[SPLITLOADSHUFFLE56]] to <8 x i32>
; 8WIDE-NEXT:    [[TMP27:%.*]] = zext <8 x i8> [[SPLITLOADSHUFFLE54]] to <8 x i32>
; 8WIDE-NEXT:    [[TMP28:%.*]] = shl <8 x i32> [[TMP10]], <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
; 8WIDE-NEXT:    [[TMP29:%.*]] = shl <8 x i32> [[TMP4]], <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
; 8WIDE-NEXT:    [[TMP30:%.*]] = sub <8 x i32> [[TMP28]], [[TMP27]]
; 8WIDE-NEXT:    [[TMP31:%.*]] = sub <8 x i32> [[TMP30]], [[TMP29]]
; 8WIDE-NEXT:    [[TMP32:%.*]] = add <8 x i32> [[TMP31]], [[TMP26]]
; 8WIDE-NEXT:    [[ARRAYIDX1133:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I1_I64_0]], i64 6
; 8WIDE-NEXT:    [[TMP33:%.*]] = extractelement <8 x i32> [[TMP4]], i32 4
; 8WIDE-NEXT:    [[I106:%.*]] = shl i32 [[TMP33]], 16
; 8WIDE-NEXT:    [[TMP34:%.*]] = extractelement <8 x i32> [[TMP10]], i32 4
; 8WIDE-NEXT:    [[I107:%.*]] = shl i32 [[TMP34]], 16
; 8WIDE-NEXT:    [[TMP35:%.*]] = extractelement <8 x i32> [[TMP10]], i32 5
; 8WIDE-NEXT:    [[I108:%.*]] = shl i32 [[TMP35]], 16
; 8WIDE-NEXT:    [[TMP36:%.*]] = extractelement <8 x i32> [[TMP4]], i32 5
; 8WIDE-NEXT:    [[I109:%.*]] = shl i32 [[TMP36]], 16
; 8WIDE-NEXT:    [[TMP37:%.*]] = extractelement <8 x i32> [[TMP10]], i32 6
; 8WIDE-NEXT:    [[I110:%.*]] = shl i32 [[TMP37]], 16
; 8WIDE-NEXT:    [[TMP38:%.*]] = extractelement <8 x i32> [[TMP4]], i32 6
; 8WIDE-NEXT:    [[I111:%.*]] = shl i32 [[TMP38]], 16
; 8WIDE-NEXT:    [[TMP39:%.*]] = extractelement <8 x i32> [[TMP10]], i32 7
; 8WIDE-NEXT:    [[I112:%.*]] = shl i32 [[TMP39]], 16
; 8WIDE-NEXT:    [[TMP40:%.*]] = extractelement <8 x i32> [[TMP4]], i32 7
; 8WIDE-NEXT:    [[I113:%.*]] = shl i32 [[TMP40]], 16
; 8WIDE-NEXT:    [[ARRAYIDX1151:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I1_I64_0]], i64 5
; 8WIDE-NEXT:    [[I114:%.*]] = shl i32 [[TMP33]], 16
; 8WIDE-NEXT:    [[I115:%.*]] = shl i32 [[TMP34]], 16
; 8WIDE-NEXT:    [[I116:%.*]] = shl i32 [[TMP35]], 16
; 8WIDE-NEXT:    [[I117:%.*]] = shl i32 [[TMP36]], 16
; 8WIDE-NEXT:    [[I118:%.*]] = shl i32 [[TMP37]], 16
; 8WIDE-NEXT:    [[I119:%.*]] = shl i32 [[TMP38]], 16
; 8WIDE-NEXT:    [[I120:%.*]] = shl i32 [[TMP39]], 16
; 8WIDE-NEXT:    [[I121:%.*]] = shl i32 [[TMP40]], 16
; 8WIDE-NEXT:    [[ARRAYIDX1169:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I1_I64_0]], i64 7
; 8WIDE-NEXT:    [[I122:%.*]] = shl i32 [[TMP33]], 16
; 8WIDE-NEXT:    [[I123:%.*]] = shl i32 [[TMP34]], 16
; 8WIDE-NEXT:    [[I124:%.*]] = shl i32 [[TMP35]], 16
; 8WIDE-NEXT:    [[I125:%.*]] = shl i32 [[TMP36]], 16
; 8WIDE-NEXT:    [[I126:%.*]] = shl i32 [[TMP37]], 16
; 8WIDE-NEXT:    [[I127:%.*]] = shl i32 [[TMP38]], 16
; 8WIDE-NEXT:    [[I128:%.*]] = shl i32 [[TMP39]], 16
; 8WIDE-NEXT:    [[I129:%.*]] = shl i32 [[TMP40]], 16
; 8WIDE-NEXT:    [[TMP41:%.*]] = extractelement <8 x i32> [[TMP32]], i32 3
; 8WIDE-NEXT:    [[TMP42:%.*]] = insertelement <8 x i32> undef, i32 [[TMP41]], i32 0
; 8WIDE-NEXT:    [[TMP43:%.*]] = extractelement <8 x i32> [[TMP32]], i32 2
; 8WIDE-NEXT:    [[TMP44:%.*]] = insertelement <8 x i32> [[TMP42]], i32 [[TMP43]], i32 1
; 8WIDE-NEXT:    [[TMP45:%.*]] = extractelement <8 x i32> [[TMP32]], i32 1
; 8WIDE-NEXT:    [[TMP46:%.*]] = insertelement <8 x i32> [[TMP44]], i32 [[TMP45]], i32 2
; 8WIDE-NEXT:    [[TMP47:%.*]] = extractelement <8 x i32> [[TMP32]], i32 0
; 8WIDE-NEXT:    [[TMP48:%.*]] = insertelement <8 x i32> [[TMP46]], i32 [[TMP47]], i32 3
; 8WIDE-NEXT:    [[TMP49:%.*]] = extractelement <8 x i32> [[TMP32]], i32 6
; 8WIDE-NEXT:    [[TMP50:%.*]] = insertelement <8 x i32> [[TMP48]], i32 [[TMP49]], i32 4
; 8WIDE-NEXT:    [[TMP51:%.*]] = insertelement <8 x i32> [[TMP50]], i32 [[TMP49]], i32 5
; 8WIDE-NEXT:    [[TMP52:%.*]] = extractelement <8 x i32> [[TMP32]], i32 4
; 8WIDE-NEXT:    [[TMP53:%.*]] = insertelement <8 x i32> [[TMP51]], i32 [[TMP52]], i32 6
; 8WIDE-NEXT:    [[TMP54:%.*]] = insertelement <8 x i32> [[TMP53]], i32 [[TMP52]], i32 7
; 8WIDE-NEXT:    [[TMP55:%.*]] = insertelement <8 x i32> undef, i32 [[TMP43]], i32 0
; 8WIDE-NEXT:    [[TMP56:%.*]] = insertelement <8 x i32> [[TMP55]], i32 [[TMP41]], i32 1
; 8WIDE-NEXT:    [[TMP57:%.*]] = insertelement <8 x i32> [[TMP56]], i32 [[TMP47]], i32 2
; 8WIDE-NEXT:    [[TMP58:%.*]] = insertelement <8 x i32> [[TMP57]], i32 [[TMP45]], i32 3
; 8WIDE-NEXT:    [[TMP59:%.*]] = extractelement <8 x i32> [[TMP32]], i32 7
; 8WIDE-NEXT:    [[TMP60:%.*]] = insertelement <8 x i32> [[TMP58]], i32 [[TMP59]], i32 4
; 8WIDE-NEXT:    [[TMP61:%.*]] = insertelement <8 x i32> [[TMP60]], i32 [[TMP52]], i32 5
; 8WIDE-NEXT:    [[TMP62:%.*]] = extractelement <8 x i32> [[TMP32]], i32 5
; 8WIDE-NEXT:    [[TMP63:%.*]] = insertelement <8 x i32> [[TMP61]], i32 [[TMP62]], i32 6
; 8WIDE-NEXT:    [[TMP64:%.*]] = insertelement <8 x i32> [[TMP63]], i32 [[TMP49]], i32 7
; 8WIDE-NEXT:    [[TMP65:%.*]] = add <8 x i32> [[TMP54]], [[TMP64]]
; 8WIDE-NEXT:    [[TMP66:%.*]] = sub <8 x i32> [[TMP54]], [[TMP64]]
; 8WIDE-NEXT:    [[TMP67:%.*]] = select <8 x i1> <i1 true, i1 false, i1 true, i1 false, i1 true, i1 true, i1 true, i1 false>, <8 x i32> [[TMP65]], <8 x i32> [[TMP66]]
; 8WIDE-NEXT:    [[TMP68:%.*]] = insertelement <8 x i32> undef, i32 [[TMP45]], i32 0
; 8WIDE-NEXT:    [[TMP69:%.*]] = insertelement <8 x i32> [[TMP68]], i32 [[TMP47]], i32 1
; 8WIDE-NEXT:    [[TMP70:%.*]] = insertelement <8 x i32> [[TMP69]], i32 [[TMP41]], i32 2
; 8WIDE-NEXT:    [[TMP71:%.*]] = insertelement <8 x i32> [[TMP70]], i32 [[TMP43]], i32 3
; 8WIDE-NEXT:    [[TMP72:%.*]] = insertelement <8 x i32> [[TMP71]], i32 [[TMP62]], i32 4
; 8WIDE-NEXT:    [[TMP73:%.*]] = insertelement <8 x i32> [[TMP72]], i32 [[TMP59]], i32 5
; 8WIDE-NEXT:    [[TMP74:%.*]] = insertelement <8 x i32> [[TMP73]], i32 [[TMP59]], i32 6
; 8WIDE-NEXT:    [[TMP75:%.*]] = insertelement <8 x i32> [[TMP74]], i32 [[TMP62]], i32 7
; 8WIDE-NEXT:    [[TMP76:%.*]] = add <8 x i32> [[TMP67]], [[TMP75]]
; 8WIDE-NEXT:    [[TMP77:%.*]] = sub <8 x i32> [[TMP67]], [[TMP75]]
; 8WIDE-NEXT:    [[TMP78:%.*]] = select <8 x i1> <i1 true, i1 true, i1 false, i1 false, i1 true, i1 false, i1 false, i1 false>, <8 x i32> [[TMP76]], <8 x i32> [[TMP77]]
; 8WIDE-NEXT:    [[TMP79:%.*]] = add <8 x i32> [[TMP78]], [[TMP32]]
; 8WIDE-NEXT:    [[TMP80:%.*]] = sub <8 x i32> [[TMP78]], [[TMP32]]
; 8WIDE-NEXT:    [[TMP81:%.*]] = select <8 x i1> <i1 true, i1 false, i1 false, i1 true, i1 true, i1 false, i1 false, i1 true>, <8 x i32> [[TMP79]], <8 x i32> [[TMP80]]
; 8WIDE-NEXT:    [[TMP82:%.*]] = bitcast i32* [[ARRAYIDX1043]] to <8 x i32>*
; 8WIDE-NEXT:    store <8 x i32> [[TMP81]], <8 x i32>* [[TMP82]], align 4
; 8WIDE-NEXT:    [[NEXTIVLOOP_1247]] = add nuw nsw i64 [[I1_I64_0]], 1
; 8WIDE-NEXT:    [[CONDLOOP_1247:%.*]] = icmp ult i64 [[NEXTIVLOOP_1247]], 16
; 8WIDE-NEXT:    br i1 [[CONDLOOP_1247]], label [[LOOP_1247]], label [[AFTERLOOP_1247:%.*]]
; 8WIDE:       afterloop.1247:
; 8WIDE-NEXT:    ret i32 0
;
entry:
  %alloca = alloca [16 x [8 x i32]], align 4
  %alloca933 = alloca [8 x i32], align 16
  %alloca934 = alloca [8 x i32], align 16
  %alloca935 = alloca [8 x i32], align 16
  %alloca936 = alloca [8 x i32], align 16
  br label %loop.1247

loop.1247:                                        ; preds = %loop.1247, %entry
  %i1.i64.0 = phi i64 [ 0, %entry ], [ %nextivloop.1247, %loop.1247 ]
  %i = sext i32 %i_pix1 to i64
  %i1 = mul i64 %i1.i64.0, %i
  %arrayIdx = getelementptr inbounds i8, i8* %pix1, i64 %i1
  %gepload = load i8, i8* %arrayIdx, align 1
  %i2 = sext i32 %i_pix2 to i64
  %i3 = mul i64 %i1.i64.0, %i2
  %arrayIdx1013 = getelementptr inbounds i8, i8* %pix2, i64 %i3
  %gepload1014 = load i8, i8* %arrayIdx1013, align 1
  %i4 = add i64 %i1, 4
  %arrayIdx1015 = getelementptr inbounds i8, i8* %pix1, i64 %i4
  %gepload1016 = load i8, i8* %arrayIdx1015, align 1
  %i5 = add i64 %i3, 4
  %arrayIdx1017 = getelementptr inbounds i8, i8* %pix2, i64 %i5
  %gepload1018 = load i8, i8* %arrayIdx1017, align 1
  %i6 = add i64 %i1, 1
  %arrayIdx1019 = getelementptr inbounds i8, i8* %pix1, i64 %i6
  %gepload1020 = load i8, i8* %arrayIdx1019, align 1
  %i7 = add i64 %i3, 1
  %arrayIdx1021 = getelementptr inbounds i8, i8* %pix2, i64 %i7
  %gepload1022 = load i8, i8* %arrayIdx1021, align 1
  %i8 = add i64 %i1, 5
  %arrayIdx1023 = getelementptr inbounds i8, i8* %pix1, i64 %i8
  %gepload1024 = load i8, i8* %arrayIdx1023, align 1
  %i9 = add i64 %i3, 5
  %arrayIdx1025 = getelementptr inbounds i8, i8* %pix2, i64 %i9
  %gepload1026 = load i8, i8* %arrayIdx1025, align 1
  %i10 = add i64 %i1, 2
  %arrayIdx1027 = getelementptr inbounds i8, i8* %pix1, i64 %i10
  %gepload1028 = load i8, i8* %arrayIdx1027, align 1
  %i11 = add i64 %i3, 2
  %arrayIdx1029 = getelementptr inbounds i8, i8* %pix2, i64 %i11
  %gepload1030 = load i8, i8* %arrayIdx1029, align 1
  %i12 = add i64 %i1, 6
  %arrayIdx1031 = getelementptr inbounds i8, i8* %pix1, i64 %i12
  %gepload1032 = load i8, i8* %arrayIdx1031, align 1
  %i13 = add i64 %i3, 6
  %arrayIdx1033 = getelementptr inbounds i8, i8* %pix2, i64 %i13
  %gepload1034 = load i8, i8* %arrayIdx1033, align 1
  %i14 = add i64 %i1, 3
  %arrayIdx1035 = getelementptr inbounds i8, i8* %pix1, i64 %i14
  %gepload1036 = load i8, i8* %arrayIdx1035, align 1
  %i15 = add i64 %i3, 3
  %arrayIdx1037 = getelementptr inbounds i8, i8* %pix2, i64 %i15
  %gepload1038 = load i8, i8* %arrayIdx1037, align 1
  %i16 = add i64 %i1, 7
  %arrayIdx1039 = getelementptr inbounds i8, i8* %pix1, i64 %i16
  %gepload1040 = load i8, i8* %arrayIdx1039, align 1
  %i17 = add i64 %i3, 7
  %arrayIdx1041 = getelementptr inbounds i8, i8* %pix2, i64 %i17
  %gepload1042 = load i8, i8* %arrayIdx1041, align 1
  %arrayIdx1043 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1.i64.0, i64 0
  %i18 = zext i8 %gepload1036 to i32
  %i19 = zext i8 %gepload1028 to i32
  %i20 = zext i8 %gepload1020 to i32
  %i21 = zext i8 %gepload to i32
  %i22 = zext i8 %gepload1042 to i32
  %i23 = zext i8 %gepload1034 to i32
  %i24 = zext i8 %gepload1026 to i32
  %i25 = zext i8 %gepload1018 to i32
  %i26 = zext i8 %gepload1038 to i32
  %i27 = zext i8 %gepload1030 to i32
  %i28 = zext i8 %gepload1022 to i32
  %i29 = zext i8 %gepload1014 to i32
  %i30 = zext i8 %gepload1040 to i32
  %i31 = zext i8 %gepload1032 to i32
  %i32 = zext i8 %gepload1024 to i32
  %i33 = zext i8 %gepload1016 to i32
  %i34 = shl i32 %i25, 16
  %i35 = shl i32 %i33, 16
  %Chain_T24_168 = sub i32 %i35, %i29
  %Chain_T24_171 = sub i32 %Chain_T24_168, %i34
  %Chain_T24_169 = add i32 %Chain_T24_171, %i21
  %i36 = shl i32 %i32, 16
  %i37 = shl i32 %i24, 16
  %Chain_T24_162 = sub i32 %i36, %i28
  %Chain_T24_160 = sub i32 %Chain_T24_162, %i37
  %Chain_T24_163 = add i32 %Chain_T24_160, %i20
  %i38 = shl i32 %i31, 16
  %i39 = shl i32 %i23, 16
  %Chain_T24_154 = sub i32 %i38, %i27
  %Chain_T24_152 = sub i32 %Chain_T24_154, %i39
  %Chain_T24_155 = add i32 %Chain_T24_152, %i19
  %i40 = shl i32 %i30, 16
  %i41 = shl i32 %i22, 16
  %Chain_T24_149 = sub i32 %i40, %i26
  %Chain_T24_ = sub i32 %Chain_T24_149, %i41
  %Chain_T24_150 = add i32 %Chain_T24_, %i18
  %Bridge_T24_151 = add i32 %Chain_T24_150, %Chain_T24_155
  %Bridge_T24_159 = add i32 %Bridge_T24_151, %Chain_T24_163
  %Bridge_T24_167 = add i32 %Bridge_T24_159, %Chain_T24_169
  store i32 %Bridge_T24_167, i32* %arrayIdx1043, align 4
  %arrayIdx1045 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1.i64.0, i64 2
  %i42 = shl i32 %i25, 16
  %i43 = shl i32 %i33, 16
  %i44 = shl i32 %i32, 16
  %i45 = shl i32 %i24, 16
  %i46 = shl i32 %i31, 16
  %i47 = shl i32 %i23, 16
  %i48 = shl i32 %i30, 16
  %i49 = shl i32 %i22, 16
  %Bridge_T23_156 = sub i32 %Chain_T24_163, %Chain_T24_155
  %Bridge_T23_ = sub i32 %Bridge_T23_156, %Chain_T24_150
  %Bridge_T23_172 = add i32 %Bridge_T23_, %Chain_T24_169
  store i32 %Bridge_T23_172, i32* %arrayIdx1045, align 4
  %arrayIdx1063 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1.i64.0, i64 1
  %i50 = shl i32 %i25, 16
  %i51 = shl i32 %i33, 16
  %i52 = shl i32 %i32, 16
  %i53 = shl i32 %i24, 16
  %i54 = shl i32 %i31, 16
  %i55 = shl i32 %i23, 16
  %i56 = shl i32 %i30, 16
  %i57 = shl i32 %i22, 16
  %Bridge_T22_ = sub i32 %Chain_T24_155, %Chain_T24_150
  %Bridge_T22_165 = sub i32 %Bridge_T22_, %Chain_T24_163
  %Bridge_T22_173 = add i32 %Bridge_T22_165, %Chain_T24_169
  store i32 %Bridge_T22_173, i32* %arrayIdx1063, align 4
  %arrayIdx1081 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1.i64.0, i64 3
  %i58 = shl i32 %i25, 16
  %i59 = shl i32 %i33, 16
  %i60 = shl i32 %i32, 16
  %i61 = shl i32 %i24, 16
  %i62 = shl i32 %i31, 16
  %i63 = shl i32 %i23, 16
  %i64 = shl i32 %i30, 16
  %i65 = shl i32 %i22, 16
  %Bridge_T21_158 = sub i32 %Chain_T24_150, %Chain_T24_155
  %Bridge_T21_166 = sub i32 %Bridge_T21_158, %Chain_T24_163
  %Bridge_T21_174 = add i32 %Bridge_T21_166, %Chain_T24_169
  store i32 %Bridge_T21_174, i32* %arrayIdx1081, align 4
  %i66 = add i64 %i1, 8
  %arrayIdx1098 = getelementptr inbounds i8, i8* %pix1, i64 %i66
  %gepload1099 = load i8, i8* %arrayIdx1098, align 1
  %i67 = add i64 %i3, 8
  %arrayIdx1100 = getelementptr inbounds i8, i8* %pix2, i64 %i67
  %gepload1101 = load i8, i8* %arrayIdx1100, align 1
  %i68 = add i64 %i1, 12
  %arrayIdx1102 = getelementptr inbounds i8, i8* %pix1, i64 %i68
  %gepload1103 = load i8, i8* %arrayIdx1102, align 1
  %i69 = add i64 %i3, 12
  %arrayIdx1104 = getelementptr inbounds i8, i8* %pix2, i64 %i69
  %gepload1105 = load i8, i8* %arrayIdx1104, align 1
  %i70 = add i64 %i1, 9
  %arrayIdx1106 = getelementptr inbounds i8, i8* %pix1, i64 %i70
  %gepload1107 = load i8, i8* %arrayIdx1106, align 1
  %i71 = add i64 %i3, 9
  %arrayIdx1108 = getelementptr inbounds i8, i8* %pix2, i64 %i71
  %gepload1109 = load i8, i8* %arrayIdx1108, align 1
  %i72 = add i64 %i1, 13
  %arrayIdx1110 = getelementptr inbounds i8, i8* %pix1, i64 %i72
  %gepload1111 = load i8, i8* %arrayIdx1110, align 1
  %i73 = add i64 %i3, 13
  %arrayIdx1112 = getelementptr inbounds i8, i8* %pix2, i64 %i73
  %gepload1113 = load i8, i8* %arrayIdx1112, align 1
  %i74 = add i64 %i1, 10
  %arrayIdx1114 = getelementptr inbounds i8, i8* %pix1, i64 %i74
  %gepload1115 = load i8, i8* %arrayIdx1114, align 1
  %i75 = add i64 %i3, 10
  %arrayIdx1116 = getelementptr inbounds i8, i8* %pix2, i64 %i75
  %gepload1117 = load i8, i8* %arrayIdx1116, align 1
  %i76 = add i64 %i1, 14
  %arrayIdx1118 = getelementptr inbounds i8, i8* %pix1, i64 %i76
  %gepload1119 = load i8, i8* %arrayIdx1118, align 1
  %i77 = add i64 %i3, 14
  %arrayIdx1120 = getelementptr inbounds i8, i8* %pix2, i64 %i77
  %gepload1121 = load i8, i8* %arrayIdx1120, align 1
  %i78 = add i64 %i1, 11
  %arrayIdx1122 = getelementptr inbounds i8, i8* %pix1, i64 %i78
  %gepload1123 = load i8, i8* %arrayIdx1122, align 1
  %i79 = add i64 %i3, 11
  %arrayIdx1124 = getelementptr inbounds i8, i8* %pix2, i64 %i79
  %gepload1125 = load i8, i8* %arrayIdx1124, align 1
  %i80 = add i64 %i1, 15
  %arrayIdx1126 = getelementptr inbounds i8, i8* %pix1, i64 %i80
  %gepload1127 = load i8, i8* %arrayIdx1126, align 1
  %i81 = add i64 %i3, 15
  %arrayIdx1128 = getelementptr inbounds i8, i8* %pix2, i64 %i81
  %gepload1129 = load i8, i8* %arrayIdx1128, align 1
  %arrayIdx1131 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1.i64.0, i64 4
  %i82 = zext i8 %gepload1123 to i32
  %i83 = zext i8 %gepload1115 to i32
  %i84 = zext i8 %gepload1107 to i32
  %i85 = zext i8 %gepload1099 to i32
  %i86 = zext i8 %gepload1129 to i32
  %i87 = zext i8 %gepload1121 to i32
  %i88 = zext i8 %gepload1113 to i32
  %i89 = zext i8 %gepload1105 to i32
  %i90 = zext i8 %gepload1125 to i32
  %i91 = zext i8 %gepload1117 to i32
  %i92 = zext i8 %gepload1109 to i32
  %i93 = zext i8 %gepload1101 to i32
  %i94 = zext i8 %gepload1127 to i32
  %i95 = zext i8 %gepload1119 to i32
  %i96 = zext i8 %gepload1111 to i32
  %i97 = zext i8 %gepload1103 to i32
  %i98 = shl i32 %i89, 16
  %i99 = shl i32 %i97, 16
  %Chain_T4_81 = sub i32 %i99, %i93
  %Chain_T4_84 = sub i32 %Chain_T4_81, %i98
  %Chain_T4_82 = add i32 %Chain_T4_84, %i85
  %i100 = shl i32 %i96, 16
  %i101 = shl i32 %i88, 16
  %Chain_T4_75 = sub i32 %i100, %i92
  %Chain_T4_73 = sub i32 %Chain_T4_75, %i101
  %Chain_T4_76 = add i32 %Chain_T4_73, %i84
  %i102 = shl i32 %i95, 16
  %i103 = shl i32 %i87, 16
  %Chain_T4_67 = sub i32 %i102, %i91
  %Chain_T4_65 = sub i32 %Chain_T4_67, %i103
  %Chain_T4_68 = add i32 %Chain_T4_65, %i83
  %i104 = shl i32 %i94, 16
  %i105 = shl i32 %i86, 16
  %Chain_T4_62 = sub i32 %i104, %i90
  %Chain_T4_ = sub i32 %Chain_T4_62, %i105
  %Chain_T4_63 = add i32 %Chain_T4_, %i82
  %Bridge_T4_64 = add i32 %Chain_T4_63, %Chain_T4_68
  %Bridge_T4_72 = add i32 %Bridge_T4_64, %Chain_T4_76
  %Bridge_T4_80 = add i32 %Bridge_T4_72, %Chain_T4_82
  store i32 %Bridge_T4_80, i32* %arrayIdx1131, align 4
  %arrayIdx1133 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1.i64.0, i64 6
  %i106 = shl i32 %i89, 16
  %i107 = shl i32 %i97, 16
  %i108 = shl i32 %i96, 16
  %i109 = shl i32 %i88, 16
  %i110 = shl i32 %i95, 16
  %i111 = shl i32 %i87, 16
  %i112 = shl i32 %i94, 16
  %i113 = shl i32 %i86, 16
  %Bridge_T3_69 = sub i32 %Chain_T4_76, %Chain_T4_68
  %Bridge_T3_ = sub i32 %Bridge_T3_69, %Chain_T4_63
  %Bridge_T3_85 = add i32 %Bridge_T3_, %Chain_T4_82
  store i32 %Bridge_T3_85, i32* %arrayIdx1133, align 4
  %arrayIdx1151 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1.i64.0, i64 5
  %i114 = shl i32 %i89, 16
  %i115 = shl i32 %i97, 16
  %i116 = shl i32 %i96, 16
  %i117 = shl i32 %i88, 16
  %i118 = shl i32 %i95, 16
  %i119 = shl i32 %i87, 16
  %i120 = shl i32 %i94, 16
  %i121 = shl i32 %i86, 16
  %Bridge_T2_ = sub i32 %Chain_T4_68, %Chain_T4_63
  %Bridge_T2_78 = sub i32 %Bridge_T2_, %Chain_T4_76
  %Bridge_T2_86 = add i32 %Bridge_T2_78, %Chain_T4_82
  store i32 %Bridge_T2_86, i32* %arrayIdx1151, align 4
  %arrayIdx1169 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1.i64.0, i64 7
  %i122 = shl i32 %i89, 16
  %i123 = shl i32 %i97, 16
  %i124 = shl i32 %i96, 16
  %i125 = shl i32 %i88, 16
  %i126 = shl i32 %i95, 16
  %i127 = shl i32 %i87, 16
  %i128 = shl i32 %i94, 16
  %i129 = shl i32 %i86, 16
  %Bridge_T1_71 = sub i32 %Chain_T4_63, %Chain_T4_68
  %Bridge_T1_79 = sub i32 %Bridge_T1_71, %Chain_T4_76
  %Bridge_T1_87 = add i32 %Bridge_T1_79, %Chain_T4_82
  store i32 %Bridge_T1_87, i32* %arrayIdx1169, align 4
  %nextivloop.1247 = add nuw nsw i64 %i1.i64.0, 1
  %condloop.1247 = icmp ult i64 %nextivloop.1247, 16
  br i1 %condloop.1247, label %loop.1247, label %afterloop.1247

afterloop.1247:                                   ; preds = %loop.1247
  ret i32 0
}
