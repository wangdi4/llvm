; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -S < %s -VPlanDriver -disable-output -vplan-print-after-linearization -disable-vplan-subregions | FileCheck %s
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define void @test_uniform_edge_to_divergent_block(i32* %a, i32 %b) local_unnamed_addr {
; CHECK-LABEL:  After predication and linearization
; CHECK-NEXT:    REGION: [[REGION0:region[0-9]+]] (BP: NULL)
; CHECK-NEXT:    [[BB0:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[LOOP0:loop[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    REGION: [[LOOP0]] (BP: NULL)
; CHECK-NEXT:    [[BB1:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB2:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_INDVARS_IV:%.*]] = phi  [ i32 0, [[BB1]] ],  [ i32 [[VP_INDVARS_IV_NEXT:%.*]], [[BB3:BB[0-9]+]] ]
; CHECK-NEXT:     [DA: Divergent] i32* [[VP_GEP:%.*]] = getelementptr i32* [[A0:%.*]] i32 [[VP_INDVARS_IV]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_LD:%.*]] = load i32* [[VP_GEP]]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_UNIFORM:%.*]] = icmp i32 [[B0:%.*]] i32 42
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_VARYING:%.*]] = icmp i32 [[VP_LD]] i32 42
; CHECK-NEXT:    SUCCESSORS(1):[[BB4:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB3]] [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_BB0_UNIFORM:%.*]] = or i1 [[VP_UNIFORM]] i1 true
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_BB0_ADD:%.*]] = add i32 [[VP_LD]] i32 0
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_BB0_UNIFORM_NOT:%.*]] = not i1 [[VP_BB0_UNIFORM]]
; CHECK-NEXT:    SUCCESSORS(2):[[BB5:BB[0-9]+]](i1 [[VP_BB0_UNIFORM]]), [[BB6:BB[0-9]+]](!i1 [[VP_BB0_UNIFORM]])
; CHECK-NEXT:    PREDECESSORS(1): [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB5]] (BP: NULL) :
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_BB1_VARYING:%.*]] = or i1 [[VP_VARYING]] i1 true
; CHECK-NEXT:       [DA: Divergent] i32 [[VP_BB1_ADD:%.*]] = add i32 [[VP_LD]] i32 1
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_BB1_VARYING_NOT:%.*]] = not i1 [[VP_BB1_VARYING]]
; CHECK-NEXT:      SUCCESSORS(1):[[BB7:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB7]] (BP: NULL) :
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_BB6_BR_VP_BB1_VARYING_NOT:%.*]] = and i1 [[VP_BB0_UNIFORM]] i1 [[VP_BB1_VARYING_NOT]]
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_BB6_BR_VP_BB1_VARYING:%.*]] = and i1 [[VP_BB0_UNIFORM]] i1 [[VP_BB1_VARYING]]
; CHECK-NEXT:      SUCCESSORS(1):[[BB6]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_BB6_BR_VP_BB1_VARYING_PHI_BB7:%.*]] = phi  [ i1 [[VP_BB6_BR_VP_BB1_VARYING]], [[BB7]] ],  [ i1 false, [[BB4]] ]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_BB6_BR_VP_BB1_VARYING_NOT_PHI_BB7:%.*]] = phi  [ i1 [[VP_BB6_BR_VP_BB1_VARYING_NOT]], [[BB7]] ],  [ i1 false, [[BB4]] ]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP0:%.*]] = or i1 [[VP_BB6_BR_VP_BB1_VARYING_NOT_PHI_BB7]] i1 [[VP_BB0_UNIFORM_NOT]]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP1:%.*]] = block-predicate i1 [[VP0]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_BB2_ADD:%.*]] = add i32 [[VP_LD]] i32 2
; CHECK-NEXT:    SUCCESSORS(1):[[BB8:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB7]] [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB8]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP2:%.*]] = block-predicate i1 [[VP_BB6_BR_VP_BB1_VARYING_PHI_BB7]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_BB3_ADD:%.*]] = add i32 [[VP_LD]] i32 3
; CHECK-NEXT:    SUCCESSORS(1):[[BB9:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB9]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_BB4_ADD:%.*]] = add i32 [[VP_LD]] i32 4
; CHECK-NEXT:    SUCCESSORS(1):[[BB3]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB8]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_INDVARS_IV_NEXT]] = add i32 [[VP_INDVARS_IV]] i32 1
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_EXITCOND:%.*]] = icmp i32 [[VP_INDVARS_IV_NEXT]] i32 300
; CHECK-NEXT:    SUCCESSORS(2):[[BB10:BB[0-9]+]](i1 [[VP_EXITCOND]]), [[BB2]](!i1 [[VP_EXITCOND]])
; CHECK-NEXT:    PREDECESSORS(1): [[BB9]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB10]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    SUCCESSORS(1):[[BB11:BB[0-9]+]]
; CHECK-NEXT:    END Region([[LOOP0]])
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB11]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[LOOP0]]
; CHECK-EMPTY:
; CHECK-NEXT:    END Region([[REGION0]])
;
entry:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %for.body
;         BB0 (U)<--+
;       /     \     |
;     BB1 (D)  |    |
;    /   \    /     |
;   /     \ /       |
;  BB3   BB2        |
;   \    /          |
;    BB4            |
;     |             |
;    Latch----------+
for.body:
  %indvars.iv = phi i32 [ 0, %entry ], [ %indvars.iv.next, %latch ]
  %gep = getelementptr i32, i32 *%a, i32 %indvars.iv
  %ld = load i32, i32* %gep, align 4
  %uniform = icmp eq i32 %b,  42
  %varying = icmp eq i32 %ld,  42
  br label %bb0

bb0:
  %bb0.uniform = or i1 %uniform, true
  %bb0.add = add i32 %ld, 0
  br i1 %bb0.uniform, label %bb1, label %bb2

bb1:
  %bb1.varying = or i1 %varying, true
  %bb1.add = add i32 %ld, 1
  br i1 %bb1.varying, label %bb3, label %bb2

bb2:
  %bb2.add = add i32 %ld, 2
  br label %bb4

bb3:
  %bb3.add = add i32 %ld, 3
  br label %bb4

bb4:
  %bb4.add = add i32 %ld, 4
  br label %latch

latch:
  %indvars.iv.next = add nuw nsw i32 %indvars.iv, 1
  %exitcond = icmp eq i32 %indvars.iv.next, 300
  br i1 %exitcond, label %for.end, label %for.body

for.end:
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"()]
  ret void
}

define void @test_two_linearized_pathes_merge(i32* %a, i32 %b) local_unnamed_addr {
; CHECK-LABEL:  After predication and linearization
; CHECK-NEXT:    REGION: [[REGION0:region[0-9]+]] (BP: NULL)
; CHECK-NEXT:    [[BB0:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[LOOP0:loop[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    REGION: [[LOOP0]] (BP: NULL)
; CHECK-NEXT:    [[BB1:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB2:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_INDVARS_IV:%.*]] = phi  [ i32 0, [[BB1]] ],  [ i32 [[VP_INDVARS_IV_NEXT:%.*]], [[BB3:BB[0-9]+]] ]
; CHECK-NEXT:     [DA: Divergent] i32* [[VP_GEP:%.*]] = getelementptr i32* [[A0:%.*]] i32 [[VP_INDVARS_IV]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_LD:%.*]] = load i32* [[VP_GEP]]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_UNIFORM:%.*]] = icmp i32 [[B0:%.*]] i32 42
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_VARYING:%.*]] = icmp i32 [[VP_LD]] i32 42
; CHECK-NEXT:    SUCCESSORS(1):[[BB4:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB3]] [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_BB0_UNIFORM:%.*]] = or i1 [[VP_UNIFORM]] i1 true
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_BB0_ADD:%.*]] = add i32 [[VP_LD]] i32 0
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_BB0_UNIFORM_NOT:%.*]] = not i1 [[VP_BB0_UNIFORM]]
; CHECK-NEXT:    SUCCESSORS(2):[[BB5:BB[0-9]+]](i1 [[VP_BB0_UNIFORM]]), [[BB6:BB[0-9]+]](!i1 [[VP_BB0_UNIFORM]])
; CHECK-NEXT:    PREDECESSORS(1): [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB6]] (BP: NULL) :
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_BB2_VARYING:%.*]] = or i1 [[VP_VARYING]] i1 true
; CHECK-NEXT:       [DA: Divergent] i32 [[VP_BB2_ADD:%.*]] = add i32 [[VP_LD]] i32 2
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_BB2_VARYING_NOT:%.*]] = not i1 [[VP_BB2_VARYING]]
; CHECK-NEXT:      SUCCESSORS(1):[[BB7:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB7]] (BP: NULL) :
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_BB7_BR_VP_BB2_VARYING_NOT:%.*]] = and i1 [[VP_BB0_UNIFORM_NOT]] i1 [[VP_BB2_VARYING_NOT]]
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_BB7_BR_VP_BB2_VARYING:%.*]] = and i1 [[VP_BB0_UNIFORM_NOT]] i1 [[VP_BB2_VARYING]]
; CHECK-NEXT:      SUCCESSORS(1):[[BB8:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB8]] (BP: NULL) :
; CHECK-NEXT:       [DA: Divergent] i1 [[VP0:%.*]] = block-predicate i1 [[VP_BB7_BR_VP_BB2_VARYING_NOT]]
; CHECK-NEXT:       [DA: Divergent] i32 [[VP_BB6_ADD:%.*]] = add i32 [[VP_LD]] i32 6
; CHECK-NEXT:      SUCCESSORS(1):[[BB9:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB7]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB5]] (BP: NULL) :
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_BB1_VARYING:%.*]] = or i1 [[VP_VARYING]] i1 true
; CHECK-NEXT:       [DA: Divergent] i32 [[VP_BB1_ADD:%.*]] = add i32 [[VP_LD]] i32 1
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_BB1_VARYING_NOT:%.*]] = not i1 [[VP_BB1_VARYING]]
; CHECK-NEXT:      SUCCESSORS(1):[[BB10:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB10]] (BP: NULL) :
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_BB6_BR_VP_BB1_VARYING:%.*]] = and i1 [[VP_BB0_UNIFORM]] i1 [[VP_BB1_VARYING]]
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_BB6_BR_VP_BB1_VARYING_NOT:%.*]] = and i1 [[VP_BB0_UNIFORM]] i1 [[VP_BB1_VARYING_NOT]]
; CHECK-NEXT:      SUCCESSORS(1):[[BB11:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB11]] (BP: NULL) :
; CHECK-NEXT:       [DA: Divergent] i1 [[VP1:%.*]] = block-predicate i1 [[VP_BB6_BR_VP_BB1_VARYING]]
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_BB3_VARYING:%.*]] = or i1 [[VP_VARYING]] i1 true
; CHECK-NEXT:       [DA: Divergent] i32 [[VP_BB3_ADD:%.*]] = add i32 [[VP_LD]] i32 3
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_BB3_VARYING_NOT:%.*]] = not i1 [[VP_BB3_VARYING]]
; CHECK-NEXT:      SUCCESSORS(1):[[BB12:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB10]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB12]] (BP: NULL) :
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_BB10_BR_VP_BB3_VARYING_NOT:%.*]] = and i1 [[VP_BB6_BR_VP_BB1_VARYING]] i1 [[VP_BB3_VARYING_NOT]]
; CHECK-NEXT:      SUCCESSORS(1):[[BB13:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB11]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB13]] (BP: NULL) :
; CHECK-NEXT:       [DA: Divergent] i1 [[VP2:%.*]] = or i1 [[VP_BB10_BR_VP_BB3_VARYING_NOT]] i1 [[VP_BB6_BR_VP_BB1_VARYING_NOT]]
; CHECK-NEXT:       [DA: Divergent] i1 [[VP3:%.*]] = block-predicate i1 [[VP2]]
; CHECK-NEXT:       [DA: Divergent] i32 [[VP_BB4_ADD:%.*]] = add i32 [[VP_LD]] i32 4
; CHECK-NEXT:      SUCCESSORS(1):[[BB9]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB12]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB9]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_BB7_BR_VP_BB2_VARYING_PHI_BB8:%.*]] = phi  [ i1 false, [[BB13]] ],  [ i1 [[VP_BB7_BR_VP_BB2_VARYING]], [[BB8]] ]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_BB6_BR_VP_BB1_VARYING_NOT_PHI_BB8:%.*]] = phi  [ i1 [[VP_BB6_BR_VP_BB1_VARYING_NOT]], [[BB13]] ],  [ i1 false, [[BB8]] ]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_BB10_BR_VP_BB3_VARYING_NOT_PHI_BB8:%.*]] = phi  [ i1 [[VP_BB10_BR_VP_BB3_VARYING_NOT]], [[BB13]] ],  [ i1 false, [[BB8]] ]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP4:%.*]] = or i1 [[VP_BB7_BR_VP_BB2_VARYING_PHI_BB8]] i1 [[VP_BB10_BR_VP_BB3_VARYING_NOT_PHI_BB8]]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP5:%.*]] = or i1 [[VP_BB6_BR_VP_BB1_VARYING_NOT_PHI_BB8]] i1 [[VP4]]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP6:%.*]] = block-predicate i1 [[VP5]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_BB5_ADD:%.*]] = add i32 [[VP_LD]] i32 5
; CHECK-NEXT:    SUCCESSORS(1):[[BB14:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB13]] [[BB8]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB14]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_INDVARS_IV_NEXT]] = add i32 [[VP_INDVARS_IV]] i32 1
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_EXITCOND:%.*]] = icmp i32 [[VP_INDVARS_IV_NEXT]] i32 300
; CHECK-NEXT:    SUCCESSORS(1):[[BB3]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB9]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:     Condition([[BB14]]): [DA: Uniform]   i1 [[VP_EXITCOND]] = icmp i32 [[VP_INDVARS_IV_NEXT]] i32 300
; CHECK-NEXT:    SUCCESSORS(2):[[BB15:BB[0-9]+]](i1 [[VP_EXITCOND]]), [[BB2]](!i1 [[VP_EXITCOND]])
; CHECK-NEXT:    PREDECESSORS(1): [[BB14]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB15]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    SUCCESSORS(1):[[BB16:BB[0-9]+]]
; CHECK-NEXT:    END Region([[LOOP0]])
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB16]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[LOOP0]]
; CHECK-EMPTY:
; CHECK-NEXT:    END Region([[REGION0]])
;
entry:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %for.body
;           BB0 (U) <-----+
;          /    \         |
;         /      \        |
;      BB1 (D)   BB2 (D)  |
;     /   \      /  \     |
;  BB3     +    /    \    |
;  |  \    |   /      \   |
;  |    BB4    |      |   |
;  |      \    /      |   |
;  |        BB5       BB6 |
;  \         \        /   |
;   \         \     /     |
;    +----------Latch-----+
for.body:
  %indvars.iv = phi i32 [ 0, %entry ], [ %indvars.iv.next, %latch ]
  %gep = getelementptr i32, i32 *%a, i32 %indvars.iv
  %ld = load i32, i32* %gep, align 4
  %uniform = icmp eq i32 %b,  42
  %varying = icmp eq i32 %ld,  42
  br label %bb0

bb0:
  %bb0.uniform = or i1 %uniform, true
  %bb0.add = add i32 %ld, 0
  br i1 %bb0.uniform, label %bb1, label %bb2

bb1:
  %bb1.varying = or i1 %varying, true
  %bb1.add = add i32 %ld, 1
  br i1 %bb1.varying, label %bb3, label %bb4

bb2:
  %bb2.varying = or i1 %varying, true
  %bb2.add = add i32 %ld, 2
  br i1 %bb2.varying, label %bb5, label %bb6

bb3:
  %bb3.varying = or i1 %varying, true
  %bb3.add = add i32 %ld, 3
  br i1 %bb3.varying, label %latch, label %bb4

bb4:
  %bb4.add = add i32 %ld, 4
  br label %bb5

bb5:
  %bb5.add = add i32 %ld, 5
  br label %latch

bb6:
  %bb6.add = add i32 %ld, 6
  br label %latch

latch:
  %indvars.iv.next = add nuw nsw i32 %indvars.iv, 1
  %exitcond = icmp eq i32 %indvars.iv.next, 300
  br i1 %exitcond, label %for.end, label %for.body

for.end:
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"()]
  ret void
}

define void @test_separate_blend_bb_for_2_div_plus_uniform(i32* %a, i32 %b) local_unnamed_addr {
; CHECK-LABEL:  After predication and linearization
; CHECK-NEXT:    REGION: [[REGION0:region[0-9]+]] (BP: NULL)
; CHECK-NEXT:    [[BB0:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[LOOP0:loop[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    REGION: [[LOOP0]] (BP: NULL)
; CHECK-NEXT:    [[BB1:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB2:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_INDVARS_IV:%.*]] = phi  [ i32 0, [[BB1]] ],  [ i32 [[VP_INDVARS_IV_NEXT:%.*]], [[BB3:BB[0-9]+]] ]
; CHECK-NEXT:     [DA: Divergent] i32* [[VP_GEP:%.*]] = getelementptr i32* [[A0:%.*]] i32 [[VP_INDVARS_IV]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_LD:%.*]] = load i32* [[VP_GEP]]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_UNIFORM:%.*]] = icmp i32 [[B0:%.*]] i32 42
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_VARYING:%.*]] = icmp i32 [[VP_LD]] i32 42
; CHECK-NEXT:    SUCCESSORS(1):[[BB4:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB3]] [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_BB0_UNIFORM:%.*]] = or i1 [[VP_UNIFORM]] i1 true
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_BB0_ADD:%.*]] = add i32 [[VP_LD]] i32 0
; CHECK-NEXT:    SUCCESSORS(2):[[BB5:BB[0-9]+]](i1 [[VP_BB0_UNIFORM]]), [[BB6:BB[0-9]+]](!i1 [[VP_BB0_UNIFORM]])
; CHECK-NEXT:    PREDECESSORS(1): [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB5]] (BP: NULL) :
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_BB1_VARYING:%.*]] = or i1 [[VP_VARYING]] i1 true
; CHECK-NEXT:       [DA: Divergent] i32 [[VP_BB1_ADD:%.*]] = add i32 [[VP_LD]] i32 1
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_BB1_VARYING_NOT:%.*]] = not i1 [[VP_BB1_VARYING]]
; CHECK-NEXT:      SUCCESSORS(1):[[BB7:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB7]] (BP: NULL) :
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_BB6_BR_VP_BB1_VARYING_NOT:%.*]] = and i1 [[VP_BB0_UNIFORM]] i1 [[VP_BB1_VARYING_NOT]]
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_BB6_BR_VP_BB1_VARYING:%.*]] = and i1 [[VP_BB0_UNIFORM]] i1 [[VP_BB1_VARYING]]
; CHECK-NEXT:      SUCCESSORS(1):[[BB8:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB8]] (BP: NULL) :
; CHECK-NEXT:       [DA: Divergent] i1 [[VP0:%.*]] = block-predicate i1 [[VP_BB6_BR_VP_BB1_VARYING_NOT]]
; CHECK-NEXT:       [DA: Divergent] i32 [[VP_BB2_ADD:%.*]] = add i32 [[VP_LD]] i32 2
; CHECK-NEXT:      SUCCESSORS(1):[[BB9:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB7]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB9]] (BP: NULL) :
; CHECK-NEXT:       [DA: Divergent] i1 [[VP1:%.*]] = block-predicate i1 [[VP_BB6_BR_VP_BB1_VARYING]]
; CHECK-NEXT:       [DA: Divergent] i32 [[VP_BB3_ADD:%.*]] = add i32 [[VP_LD]] i32 3
; CHECK-NEXT:      SUCCESSORS(1):[[BB10:BlendBB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB8]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB10]] (BP: NULL) :
; CHECK-NEXT:       [DA: Divergent] i32 [[VP2:%.*]] = phi  [ i32 3, [[BB9]] ],  [ i32 2, [[BB8]] ]
; CHECK-NEXT:      SUCCESSORS(1):[[BB6]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB9]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_PHI:%.*]] = phi  [ i32 0, [[BB4]] ],  [ i32 [[VP2]], [[BB10]] ]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_BB4_ADD:%.*]] = add i32 [[VP_LD]] i32 4
; CHECK-NEXT:    SUCCESSORS(1):[[BB3]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB4]] [[BB10]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_INDVARS_IV_NEXT]] = add i32 [[VP_INDVARS_IV]] i32 1
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_EXITCOND:%.*]] = icmp i32 [[VP_INDVARS_IV_NEXT]] i32 300
; CHECK-NEXT:    SUCCESSORS(2):[[BB11:BB[0-9]+]](i1 [[VP_EXITCOND]]), [[BB2]](!i1 [[VP_EXITCOND]])
; CHECK-NEXT:    PREDECESSORS(1): [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB11]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    SUCCESSORS(1):[[BB12:BB[0-9]+]]
; CHECK-NEXT:    END Region([[LOOP0]])
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB12]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[LOOP0]]
; CHECK-EMPTY:
; CHECK-NEXT:    END Region([[REGION0]])
;
entry:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %for.body
;         BB0 (U)<--+
;       /     \     |
;     BB1 (D)  |    |
;    /   \     |    |
;   /     \    |    |
;  BB3   BB2   |    |
;   \    /    /     |
;    BB4<----+      |
;     |             |
;    Latch----------+
for.body:
  %indvars.iv = phi i32 [ 0, %entry ], [ %indvars.iv.next, %latch ]
  %gep = getelementptr i32, i32 *%a, i32 %indvars.iv
  %ld = load i32, i32* %gep, align 4
  %uniform = icmp eq i32 %b,  42
  %varying = icmp eq i32 %ld,  42
  br label %bb0

bb0:
  %bb0.uniform = or i1 %uniform, true
  %bb0.add = add i32 %ld, 0
  br i1 %bb0.uniform, label %bb1, label %bb4

bb1:
  %bb1.varying = or i1 %varying, true
  %bb1.add = add i32 %ld, 1
  br i1 %bb1.varying, label %bb3, label %bb2

bb2:
  %bb2.add = add i32 %ld, 2
  br label %bb4

bb3:
  %bb3.add = add i32 %ld, 3
  br label %bb4

bb4:
  %phi = phi i32 [ 0, %bb0 ], [ 2, %bb2 ], [ 3, %bb3 ]
  %bb4.add = add i32 %ld, 4
  br label %latch

latch:
  %indvars.iv.next = add nuw nsw i32 %indvars.iv, 1
  %exitcond = icmp eq i32 %indvars.iv.next, 300
  br i1 %exitcond, label %for.end, label %for.body

for.end:
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"()]
  ret void
}

define void @test_two_blend_bbs(i32* %a, i32 %b)  local_unnamed_addr {
; CHECK-LABEL:  After predication and linearization
; CHECK-NEXT:    REGION: [[REGION0:region[0-9]+]] (BP: NULL)
; CHECK-NEXT:    [[BB0:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[LOOP0:loop[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    REGION: [[LOOP0]] (BP: NULL)
; CHECK-NEXT:    [[BB1:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB2:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_INDVARS_IV:%.*]] = phi  [ i32 0, [[BB1]] ],  [ i32 [[VP_INDVARS_IV_NEXT:%.*]], [[BB3:BB[0-9]+]] ]
; CHECK-NEXT:     [DA: Divergent] i32* [[VP_GEP:%.*]] = getelementptr i32* [[A0:%.*]] i32 [[VP_INDVARS_IV]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_LD:%.*]] = load i32* [[VP_GEP]]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_UNIFORM:%.*]] = icmp i32 [[B0:%.*]] i32 42
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_VARYING:%.*]] = icmp i32 [[VP_LD]] i32 42
; CHECK-NEXT:    SUCCESSORS(1):[[BB4:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB3]] [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]] (BP: NULL) :
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_BB0_UNIFORM:%.*]] = or i1 [[VP_UNIFORM]] i1 true
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_BB0_ADD:%.*]] = add i32 [[VP_LD]] i32 0
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_BB0_UNIFORM_NOT:%.*]] = not i1 [[VP_BB0_UNIFORM]]
; CHECK-NEXT:    SUCCESSORS(2):[[BB5:BB[0-9]+]](i1 [[VP_BB0_UNIFORM]]), [[BB6:BB[0-9]+]](!i1 [[VP_BB0_UNIFORM]])
; CHECK-NEXT:    PREDECESSORS(1): [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB6]] (BP: NULL) :
; CHECK-NEXT:       [DA: Uniform]   i1 [[VP_BB4_UNIFORM:%.*]] = or i1 [[VP_UNIFORM]] i1 true
; CHECK-NEXT:       [DA: Divergent] i32 [[VP_BB4_ADD:%.*]] = add i32 [[VP_LD]] i32 4
; CHECK-NEXT:       [DA: Uniform]   i1 [[VP_BB4_UNIFORM_NOT:%.*]] = not i1 [[VP_BB4_UNIFORM]]
; CHECK-NEXT:      SUCCESSORS(1):[[BB7:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB7]] (BP: NULL) :
; CHECK-NEXT:       [DA: Uniform]   i1 [[VP_BB7_BR_VP_BB4_UNIFORM_NOT:%.*]] = and i1 [[VP_BB0_UNIFORM_NOT]] i1 [[VP_BB4_UNIFORM_NOT]]
; CHECK-NEXT:       Condition([[BB6]]): [DA: Uniform]   i1 [[VP_BB4_UNIFORM]] = or i1 [[VP_UNIFORM]] i1 true
; CHECK-NEXT:      SUCCESSORS(2):[[BB8:BB[0-9]+]](i1 [[VP_BB4_UNIFORM]]), [[BB9:BB[0-9]+]](!i1 [[VP_BB4_UNIFORM]])
; CHECK-NEXT:      PREDECESSORS(1): [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB9]] (BP: NULL) :
; CHECK-NEXT:         [DA: Divergent] i1 [[VP_BB5_VARYING:%.*]] = or i1 [[VP_VARYING]] i1 true
; CHECK-NEXT:         [DA: Divergent] i32 [[VP_BB5_ADD:%.*]] = add i32 [[VP_LD]] i32 5
; CHECK-NEXT:        SUCCESSORS(1):[[BB10:BB[0-9]+]]
; CHECK-NEXT:        PREDECESSORS(1): [[BB7]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB10]] (BP: NULL) :
; CHECK-NEXT:         [DA: Divergent] i1 [[VP_BB9_BR_VP_BB5_VARYING:%.*]] = and i1 [[VP_BB7_BR_VP_BB4_UNIFORM_NOT]] i1 [[VP_BB5_VARYING]]
; CHECK-NEXT:        SUCCESSORS(1):[[BB11:BB[0-9]+]]
; CHECK-NEXT:        PREDECESSORS(1): [[BB9]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB11]] (BP: NULL) :
; CHECK-NEXT:         [DA: Divergent] i1 [[VP0:%.*]] = block-predicate i1 [[VP_BB9_BR_VP_BB5_VARYING]]
; CHECK-NEXT:         [DA: Divergent] i32 [[VP_BB6_ADD:%.*]] = add i32 [[VP_LD]] i32 6
; CHECK-NEXT:        SUCCESSORS(1):[[BB12:BlendBB[0-9]+]]
; CHECK-NEXT:        PREDECESSORS(1): [[BB10]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB12]] (BP: NULL) :
; CHECK-NEXT:         [DA: Divergent] i32 [[VP1:%.*]] = phi  [ i32 6, [[BB11]] ],  [ i32 5, [[BB9]] ]
; CHECK-NEXT:        SUCCESSORS(1):[[BB8]]
; CHECK-NEXT:        PREDECESSORS(1): [[BB11]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB5]] (BP: NULL) :
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_BB1_VARYING:%.*]] = or i1 [[VP_VARYING]] i1 true
; CHECK-NEXT:       [DA: Divergent] i32 [[VP_BB1_ADD:%.*]] = add i32 [[VP_LD]] i32 1
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_BB1_VARYING_NOT:%.*]] = not i1 [[VP_BB1_VARYING]]
; CHECK-NEXT:      SUCCESSORS(1):[[BB13:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB13]] (BP: NULL) :
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_BB6_BR_VP_BB1_VARYING_NOT:%.*]] = and i1 [[VP_BB0_UNIFORM]] i1 [[VP_BB1_VARYING_NOT]]
; CHECK-NEXT:       [DA: Divergent] i1 [[VP_BB6_BR_VP_BB1_VARYING:%.*]] = and i1 [[VP_BB0_UNIFORM]] i1 [[VP_BB1_VARYING]]
; CHECK-NEXT:      SUCCESSORS(1):[[BB14:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB14]] (BP: NULL) :
; CHECK-NEXT:       [DA: Divergent] i1 [[VP2:%.*]] = block-predicate i1 [[VP_BB6_BR_VP_BB1_VARYING_NOT]]
; CHECK-NEXT:       [DA: Divergent] i32 [[VP_BB2_ADD:%.*]] = add i32 [[VP_LD]] i32 2
; CHECK-NEXT:      SUCCESSORS(1):[[BB15:BB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB13]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB15]] (BP: NULL) :
; CHECK-NEXT:       [DA: Divergent] i1 [[VP3:%.*]] = block-predicate i1 [[VP_BB6_BR_VP_BB1_VARYING]]
; CHECK-NEXT:       [DA: Divergent] i32 [[VP_BB3_ADD:%.*]] = add i32 [[VP_LD]] i32 3
; CHECK-NEXT:      SUCCESSORS(1):[[BB16:BlendBB[0-9]+]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB14]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB16]] (BP: NULL) :
; CHECK-NEXT:       [DA: Divergent] i32 [[VP4:%.*]] = phi  [ i32 2, [[BB14]] ],  [ i32 3, [[BB15]] ]
; CHECK-NEXT:      SUCCESSORS(1):[[BB8]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB15]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB8]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_PHI:%.*]] = phi  [ i32 4, [[BB7]] ],  [ i32 [[VP1]], [[BB12]] ],  [ i32 [[VP4]], [[BB16]] ]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_BB7_ADD:%.*]] = add i32 [[VP_LD]] i32 7
; CHECK-NEXT:    SUCCESSORS(1):[[BB3]]
; CHECK-NEXT:    PREDECESSORS(3): [[BB7]] [[BB12]] [[BB16]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_INDVARS_IV_NEXT]] = add i32 [[VP_INDVARS_IV]] i32 1
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_EXITCOND:%.*]] = icmp i32 [[VP_INDVARS_IV_NEXT]] i32 300
; CHECK-NEXT:    SUCCESSORS(2):[[BB17:BB[0-9]+]](i1 [[VP_EXITCOND]]), [[BB2]](!i1 [[VP_EXITCOND]])
; CHECK-NEXT:    PREDECESSORS(1): [[BB8]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB17]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    SUCCESSORS(1):[[BB18:BB[0-9]+]]
; CHECK-NEXT:    END Region([[LOOP0]])
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB18]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[LOOP0]]
; CHECK-EMPTY:
; CHECK-NEXT:    END Region([[REGION0]])
;
entry:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %for.body
;         BB0 (U) <----------+
;       /     \              |
;     BB1 (D)  BB4 (U)       |
;    /   \      /  \         |
;   /     \    /    BB5 (D)  |
;  BB3   BB2  |    / |       |
;   \     |   | BB6  |       |
;    \    |   | /    /       |
;     \   |  / /    /        |
;      \  | / /    /         |
;       +>BB7<----+          |
;         |                  |
;          Latch-------------+
for.body:
  %indvars.iv = phi i32 [ 0, %entry ], [ %indvars.iv.next, %latch ]
  %gep = getelementptr i32, i32 *%a, i32 %indvars.iv
  %ld = load i32, i32* %gep, align 4
  %uniform = icmp eq i32 %b,  42
  %varying = icmp eq i32 %ld,  42
  br label %bb0

bb0:
  %bb0.uniform = or i1 %uniform, true
  %bb0.add = add i32 %ld, 0
  br i1 %bb0.uniform, label %bb1, label %bb4

bb1:
  %bb1.varying = or i1 %varying, true
  %bb1.add = add i32 %ld, 1
  br i1 %bb1.varying, label %bb3, label %bb2

bb2:
  %bb2.add = add i32 %ld, 2
  br label %bb7

bb3:
  %bb3.add = add i32 %ld, 3
  br label %bb7

bb4:
  %bb4.uniform = or i1 %uniform, true
  %bb4.add = add i32 %ld, 4
  br i1 %bb4.uniform, label %bb7, label %bb5

bb5:
  %bb5.varying = or i1 %varying, true
  %bb5.add = add i32 %ld, 5
  br i1 %bb5.varying, label %bb6, label %bb7

bb6:
  %bb6.add = add i32 %ld, 6
  br label %bb7

bb7:
  %phi = phi i32 [5, %bb5], [ 3, %bb3 ], [ 4, %bb4 ],[ 6, %bb6 ], [ 2, %bb2 ]
  %bb7.add = add i32 %ld, 7
  br label %latch

latch:
  %indvars.iv.next = add nuw nsw i32 %indvars.iv, 1
  %exitcond = icmp eq i32 %indvars.iv.next, 300
  br i1 %exitcond, label %for.end, label %for.body

for.end:
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"()]
  ret void
}

define dso_local void @test_divergent_inner_loop_with_double_top_test(i64 %N, i64 *%a, i64 %mask_out_inner_loop) local_unnamed_addr {
; CHECK-LABEL:  After predication and linearization
; CHECK-NEXT:    REGION: [[REGION0:region[0-9]+]] (BP: NULL)
; CHECK-NEXT:    [[BB0:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[LOOP0:loop[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    REGION: [[LOOP0]] (BP: NULL)
; CHECK-NEXT:    [[BB1:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB2:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_OUTER_IV:%.*]] = phi  [ i64 [[VP_OUTER_IV_NEXT:%.*]], [[BB3:BB[0-9]+]] ],  [ i64 0, [[BB1]] ]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_SKIP_LOOP:%.*]] = icmp i64 [[VP_OUTER_IV]] i64 [[MASK_OUT_INNER_LOOP0:%.*]]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_SKIP_LOOP_NOT:%.*]] = not i1 [[VP_SKIP_LOOP]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB4:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB3]] [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB5:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP0:%.*]] = block-predicate i1 [[VP_SKIP_LOOP_NOT]]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_CMP216:%.*]] = icmp i64 [[N0:%.*]] i64 0
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_CMP216_NOT:%.*]] = not i1 [[VP_CMP216]]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_CMP216_NOT_1:%.*]] = not i1 [[VP_CMP216]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB6:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_BB5_BR_VP_CMP216_NOT:%.*]] = and i1 [[VP_SKIP_LOOP_NOT]] i1 [[VP_CMP216_NOT_1]]
; CHECK-NEXT:    SUCCESSORS(1):[[LOOP1:loop[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:    REGION: [[LOOP1]] (BP: NULL)
; CHECK-NEXT:    [[BB7:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP1:%.*]] = block-predicate i1 [[VP_BB5_BR_VP_CMP216_NOT]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB8:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB8]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_INNER_IV_LIVE_OUT_PREV:%.*]] = phi  [ i64 [[VP_INNER_IV_LIVE_OUT_BLEND:%.*]], [[BB9:BB[0-9]+]] ],  [ i64 undef, [[BB7]] ]
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP_INNER_IV:%.*]] = phi  [ i64 [[VP_INNER_IV_NEXT:%.*]], [[BB9]] ],  [ i64 0, [[BB7]] ]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_LOOP_MASK:%.*]] = phi  [ i1 [[VP_CMP216_NOT]], [[BB7]] ],  [ i1 [[VP_LOOP_MASK_NEXT:%.*]], [[BB9]] ]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP2:%.*]] = block-predicate i1 [[VP_BB5_BR_VP_CMP216_NOT]]
; CHECK-NEXT:    SUCCESSORS(1):mask_[[REGION1:region[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB9]] [[BB7]]
; CHECK-EMPTY:
; CHECK-NEXT:    REGION: mask_[[REGION1]] (BP: NULL)
; CHECK-NEXT:    [[BB10:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP3:%.*]] = block-predicate i1 [[VP_BB5_BR_VP_CMP216_NOT]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB11:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB11]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_BB17_BR_VP_LOOP_MASK:%.*]] = and i1 [[VP_BB5_BR_VP_CMP216_NOT]] i1 [[VP_LOOP_MASK]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB12:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB10]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB12]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP4:%.*]] = block-predicate i1 [[VP_BB17_BR_VP_LOOP_MASK]]
; CHECK-NEXT:     [DA: Uniform]   i64* [[VP_ARRAYIDX:%.*]] = getelementptr inbounds i64* [[A0:%.*]] i64 [[VP_INNER_IV]]
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP_LD:%.*]] = load i64* [[VP_ARRAYIDX]]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_SOME_CMP:%.*]] = icmp i64 [[VP_LD]] i64 42
; CHECK-NEXT:     [DA: Uniform]   i64 [[VP_INNER_IV_NEXT]] = add i64 [[VP_INNER_IV]] i64 1
; CHECK-NEXT:    SUCCESSORS(1):[[BB13:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB11]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB13]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP5:%.*]] = block-predicate i1 [[VP_BB5_BR_VP_CMP216_NOT]]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_EXITCOND:%.*]] = icmp i64 [[VP_INNER_IV_NEXT]] i64 [[VP_OUTER_IV]]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_EXITCOND_NOT:%.*]] = not i1 [[VP_EXITCOND]]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_LOOP_MASK_NEXT]] = and i1 [[VP_EXITCOND_NOT]] i1 [[VP_LOOP_MASK]]
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_INNER_IV_LIVE_OUT_BLEND]] = select i1 [[VP_LOOP_MASK]] i64 [[VP_INNER_IV]] i64 [[VP_INNER_IV_LIVE_OUT_PREV]]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP6:%.*]] = all-zero-check i1 [[VP_LOOP_MASK_NEXT]]
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB12]]
; CHECK-EMPTY:
; CHECK-NEXT:    SUCCESSORS(1):[[BB9]]
; CHECK-NEXT:    END Region(mask_[[REGION1]])
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB9]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP7:%.*]] = block-predicate i1 [[VP_BB5_BR_VP_CMP216_NOT]]
; CHECK-NEXT:     Condition([[BB13]]): [DA: Uniform]   i1 [[VP6]] = all-zero-check i1 [[VP_LOOP_MASK_NEXT]]
; CHECK-NEXT:    SUCCESSORS(2):[[BB14:BB[0-9]+]](i1 [[VP6]]), [[BB8]](!i1 [[VP6]])
; CHECK-NEXT:    PREDECESSORS(1): mask_[[REGION1]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB14]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_PHI_USE:%.*]] = phi  [ i64 [[VP_INNER_IV_LIVE_OUT_BLEND]], [[BB9]] ]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP8:%.*]] = block-predicate i1 [[VP_BB5_BR_VP_CMP216_NOT]]
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB9]]
; CHECK-EMPTY:
; CHECK-NEXT:    SUCCESSORS(1):[[BB15:BB[0-9]+]]
; CHECK-NEXT:    END Region([[LOOP1]])
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB15]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i64 [[VP_OUTER_IV_NEXT]] = add i64 [[VP_OUTER_IV]] i64 1
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_OUTER_EXIT_COND:%.*]] = icmp i64 [[VP_OUTER_IV_NEXT]] i64 [[N0]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB3]]
; CHECK-NEXT:    PREDECESSORS(1): [[LOOP1]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:     Condition([[BB15]]): [DA: Uniform]   i1 [[VP_OUTER_EXIT_COND]] = icmp i64 [[VP_OUTER_IV_NEXT]] i64 [[N0]]
; CHECK-NEXT:    SUCCESSORS(2):[[BB16:BB[0-9]+]](i1 [[VP_OUTER_EXIT_COND]]), [[BB2]](!i1 [[VP_OUTER_EXIT_COND]])
; CHECK-NEXT:    PREDECESSORS(1): [[BB15]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB16]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    SUCCESSORS(1):[[BB17:BB[0-9]+]]
; CHECK-NEXT:    END Region([[LOOP0]])
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB17]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[LOOP0]]
; CHECK-EMPTY:
; CHECK-NEXT:    END Region([[REGION0]])
;
entry:
  %cmp18 = icmp sgt i64 %N, 0
  br i1 %cmp18, label %for.cond1.preheader.preheader, label %for.end7

for.cond1.preheader.preheader:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %for.cond1.preheader

for.cond1.preheader:
  %outer.iv = phi i64 [ %outer.iv.next, %for.inc5 ], [ 0, %for.cond1.preheader.preheader ]
  %skip_loop = icmp eq i64 %outer.iv, %mask_out_inner_loop
  br i1 %skip_loop, label %for.inc5, label %top_test

top_test:
  %cmp216 = icmp eq i64 %N, 0
  br i1 %cmp216, label %for.inc5, label %for.body3.preheader

for.body3.preheader:
  br label %for.body3

for.body3:
  %inner.iv = phi i64 [ %inner.iv.next, %for.body3 ], [ 0, %for.body3.preheader ]
  %arrayidx = getelementptr inbounds i64, i64* %a, i64 %inner.iv
  %ld = load i64, i64* %arrayidx
  %some_cmp = icmp eq i64 %ld, 42
  %inner.iv.next = add nuw nsw i64 %inner.iv, 1
  %exitcond = icmp eq i64 %inner.iv.next, %outer.iv
  br i1 %exitcond, label %for.inc5.loopexit, label %for.body3

for.inc5.loopexit:
  %phi_use = phi i64 [ %inner.iv, %for.body3 ]
  br label %for.inc5

for.inc5:
  %outer.iv.next = add nuw nsw i64 %outer.iv, 1
  %outer_exit_cond = icmp eq i64 %outer.iv.next, %N
  br i1 %outer_exit_cond, label %for.end7.loopexit, label %for.cond1.preheader

for.end7.loopexit:
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"()]
  br label %for.end7

for.end7:
  ret void
}

define void @test_single_succ_single_pred_edge(i32* %a, i32 %b) local_unnamed_addr {
; CHECK-LABEL:  After predication and linearization
; CHECK-NEXT:    REGION: [[REGION0:region[0-9]+]] (BP: NULL)
; CHECK-NEXT:    [[BB0:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[LOOP0:loop[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    REGION: [[LOOP0]] (BP: NULL)
; CHECK-NEXT:    [[BB1:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB2:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_INDVARS_IV:%.*]] = phi  [ i32 0, [[BB1]] ],  [ i32 [[VP_INDVARS_IV_NEXT:%.*]], [[BB3:BB[0-9]+]] ]
; CHECK-NEXT:     [DA: Divergent] i32* [[VP_GEP:%.*]] = getelementptr i32* [[A0:%.*]] i32 [[VP_INDVARS_IV]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_LD:%.*]] = load i32* [[VP_GEP]]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_UNIFORM:%.*]] = icmp i32 [[B0:%.*]] i32 42
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_VARYING:%.*]] = icmp i32 [[VP_LD]] i32 42
; CHECK-NEXT:    SUCCESSORS(1):[[BB4:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB3]] [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_BB0_VARYING:%.*]] = or i1 [[VP_VARYING]] i1 true
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_BB0_ADD:%.*]] = add i32 [[VP_LD]] i32 0
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_BB0_VARYING_NOT:%.*]] = not i1 [[VP_BB0_VARYING]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB5:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP0:%.*]] = block-predicate i1 [[VP_BB0_VARYING_NOT]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_BB2_ADD:%.*]] = add i32 [[VP_LD]] i32 2
; CHECK-NEXT:    SUCCESSORS(1):[[BB6:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP1:%.*]] = block-predicate i1 [[VP_BB0_VARYING]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_BB1_ADD:%.*]] = add i32 [[VP_LD]] i32 1
; CHECK-NEXT:    SUCCESSORS(1):[[BB7:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB7]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP2:%.*]] = block-predicate i1 [[VP_BB0_VARYING]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_BB3_ADD:%.*]] = add i32 [[VP_LD]] i32 3
; CHECK-NEXT:    SUCCESSORS(1):[[BB8:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB8]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_BB4_ADD:%.*]] = add i32 [[VP_LD]] i32 4
; CHECK-NEXT:    SUCCESSORS(1):[[BB3]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB7]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_INDVARS_IV_NEXT]] = add i32 [[VP_INDVARS_IV]] i32 1
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_EXITCOND:%.*]] = icmp i32 [[VP_INDVARS_IV_NEXT]] i32 300
; CHECK-NEXT:    SUCCESSORS(2):[[BB9:BB[0-9]+]](i1 [[VP_EXITCOND]]), [[BB2]](!i1 [[VP_EXITCOND]])
; CHECK-NEXT:    PREDECESSORS(1): [[BB8]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB9]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    SUCCESSORS(1):[[BB10:BB[0-9]+]]
; CHECK-NEXT:    END Region([[LOOP0]])
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB10]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[LOOP0]]
; CHECK-EMPTY:
; CHECK-NEXT:    END Region([[REGION0]])
;
entry:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %for.body
;         BB0 (D)<--+
;       /    \      |
;     BB1    BB2    |
;      |      |     |
;      |      |     |
;     BB3    /      |
;      |    /       |
;     BB4<-+        |
;     |             |
;    Latch----------+
; Test checks predicate of the BB3, because BB1-BB3 edge is both single
; successor for BB1 and single predecessor for BB3.
for.body:
  %indvars.iv = phi i32 [ 0, %entry ], [ %indvars.iv.next, %latch ]
  %gep = getelementptr i32, i32 *%a, i32 %indvars.iv
  %ld = load i32, i32* %gep, align 4
  %uniform = icmp eq i32 %b,  42
  %varying = icmp eq i32 %ld,  42
  br label %bb0

bb0:
  %bb0.varying = or i1 %varying, true
  %bb0.add = add i32 %ld, 0
  br i1 %bb0.varying, label %bb1, label %bb2

bb1:
  %bb1.add = add i32 %ld, 1
  br label %bb3

bb2:
  %bb2.add = add i32 %ld, 2
  br label %bb4

bb3:
  %bb3.add = add i32 %ld, 3
  br label %bb4

bb4:
  %bb4.add = add i32 %ld, 4
  br label %latch

latch:
  %indvars.iv.next = add nuw nsw i32 %indvars.iv, 1
  %exitcond = icmp eq i32 %indvars.iv.next, 300
  br i1 %exitcond, label %for.end, label %for.body

for.end:
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"()]
  ret void
}

define void @test_use_dom_instead_of_direct_succ(i32* %a, i32 %b) local_unnamed_addr {
; CHECK-LABEL:  After predication and linearization
; CHECK-NEXT:    REGION: [[REGION0:region[0-9]+]] (BP: NULL)
; CHECK-NEXT:    [[BB0:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[LOOP0:loop[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    REGION: [[LOOP0]] (BP: NULL)
; CHECK-NEXT:    [[BB1:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB2:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_INDVARS_IV:%.*]] = phi  [ i32 0, [[BB1]] ],  [ i32 [[VP_INDVARS_IV_NEXT:%.*]], [[BB3:BB[0-9]+]] ]
; CHECK-NEXT:     [DA: Divergent] i32* [[VP_GEP:%.*]] = getelementptr i32* [[A0:%.*]] i32 [[VP_INDVARS_IV]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_LD:%.*]] = load i32* [[VP_GEP]]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_UNIFORM:%.*]] = icmp i32 [[B0:%.*]] i32 42
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_VARYING:%.*]] = icmp i32 [[VP_LD]] i32 42
; CHECK-NEXT:    SUCCESSORS(1):[[BB4:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB3]] [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_BB0_VARYING:%.*]] = or i1 [[VP_VARYING]] i1 true
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_BB0_ADD:%.*]] = add i32 [[VP_LD]] i32 0
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_BB0_VARYING_NOT:%.*]] = not i1 [[VP_BB0_VARYING]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB5:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP0:%.*]] = block-predicate i1 [[VP_BB0_VARYING_NOT]]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_BB6_VARYING:%.*]] = or i1 [[VP_VARYING]] i1 true
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_BB6_ADD:%.*]] = add i32 [[VP_LD]] i32 6
; CHECK-NEXT:    SUCCESSORS(1):[[BB6:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_BB7_BR_VP_BB6_VARYING:%.*]] = and i1 [[VP_BB0_VARYING_NOT]] i1 [[VP_BB6_VARYING]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB7:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB7]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP1:%.*]] = block-predicate i1 [[VP_BB7_BR_VP_BB6_VARYING]]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_BB7_VARYING:%.*]] = or i1 [[VP_VARYING]] i1 true
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_BB7_ADD:%.*]] = add i32 [[VP_LD]] i32 7
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_BB7_VARYING_NOT:%.*]] = not i1 [[VP_BB7_VARYING]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB8:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB8]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_BB8_BR_VP_BB7_VARYING_NOT:%.*]] = and i1 [[VP_BB7_BR_VP_BB6_VARYING]] i1 [[VP_BB7_VARYING_NOT]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB9:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB7]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB9]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP2:%.*]] = block-predicate i1 [[VP_BB8_BR_VP_BB7_VARYING_NOT]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_BB8_ADD:%.*]] = add i32 [[VP_LD]] i32 8
; CHECK-NEXT:    SUCCESSORS(1):[[BB10:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB8]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB10]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP3:%.*]] = block-predicate i1 [[VP_BB0_VARYING]]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_BB1_VARYING:%.*]] = or i1 [[VP_VARYING]] i1 true
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_BB1_ADD:%.*]] = add i32 [[VP_LD]] i32 1
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_BB1_VARYING_NOT:%.*]] = not i1 [[VP_BB1_VARYING]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB11:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB9]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB11]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_BB6_BR_VP_BB1_VARYING_NOT:%.*]] = and i1 [[VP_BB0_VARYING]] i1 [[VP_BB1_VARYING_NOT]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB12:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB10]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB12]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP4:%.*]] = block-predicate i1 [[VP_BB6_BR_VP_BB1_VARYING_NOT]]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_BB2_VARYING:%.*]] = or i1 [[VP_VARYING]] i1 true
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_BB2_ADD:%.*]] = add i32 [[VP_LD]] i32 2
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_BB2_VARYING_NOT:%.*]] = not i1 [[VP_BB2_VARYING]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB13:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB11]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB13]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_BB11_BR_VP_BB2_VARYING_NOT:%.*]] = and i1 [[VP_BB6_BR_VP_BB1_VARYING_NOT]] i1 [[VP_BB2_VARYING_NOT]]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_BB11_BR_VP_BB2_VARYING:%.*]] = and i1 [[VP_BB6_BR_VP_BB1_VARYING_NOT]] i1 [[VP_BB2_VARYING]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB14:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB12]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB14]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP5:%.*]] = block-predicate i1 [[VP_BB11_BR_VP_BB2_VARYING_NOT]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_BB3_ADD:%.*]] = add i32 [[VP_LD]] i32 3
; CHECK-NEXT:    SUCCESSORS(1):[[BB15:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB13]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB15]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP6:%.*]] = block-predicate i1 [[VP_BB11_BR_VP_BB2_VARYING]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_BB4_ADD:%.*]] = add i32 [[VP_LD]] i32 4
; CHECK-NEXT:    SUCCESSORS(1):[[BB16:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB14]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB16]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP7:%.*]] = or i1 [[VP_BB7_BR_VP_BB6_VARYING]] i1 [[VP_BB6_BR_VP_BB1_VARYING_NOT]]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP8:%.*]] = block-predicate i1 [[VP7]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_BB5_ADD:%.*]] = add i32 [[VP_LD]] i32 5
; CHECK-NEXT:    SUCCESSORS(1):[[BB17:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB15]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB17]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_INDVARS_IV_NEXT]] = add i32 [[VP_INDVARS_IV]] i32 1
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_EXITCOND:%.*]] = icmp i32 [[VP_INDVARS_IV_NEXT]] i32 300
; CHECK-NEXT:    SUCCESSORS(1):[[BB3]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB16]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:     Condition([[BB17]]): [DA: Uniform]   i1 [[VP_EXITCOND]] = icmp i32 [[VP_INDVARS_IV_NEXT]] i32 300
; CHECK-NEXT:    SUCCESSORS(2):[[BB18:BB[0-9]+]](i1 [[VP_EXITCOND]]), [[BB2]](!i1 [[VP_EXITCOND]])
; CHECK-NEXT:    PREDECESSORS(1): [[BB17]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB18]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    SUCCESSORS(1):[[BB19:BB[0-9]+]]
; CHECK-NEXT:    END Region([[LOOP0]])
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB19]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[LOOP0]]
; CHECK-EMPTY:
; CHECK-NEXT:    END Region([[REGION0]])
;
entry:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %for.body
;            BB0 (D) <---------+
;          /    \              |
;        BB1 (D) \             |
;       /  \      BB6 (D)-+    |
;      +    \       |     |    |
;      |    BB2    BB7 (D)|    |
;      |    /  \    |\    |    |
;      |  BB4  BB3  + BB8 |    |
;      |    \  /   /   |  |    |
;      |    BB5<--+    |  |    |
;      +     | \       |  +    |
;       \    |  +------+ /     |
;        \   |          /      |
;         +-> Latch___BB-------+
for.body:
  %indvars.iv = phi i32 [ 0, %entry ], [ %indvars.iv.next, %latch ]
  %gep = getelementptr i32, i32 *%a, i32 %indvars.iv
  %ld = load i32, i32* %gep, align 4
  %uniform = icmp eq i32 %b,  42
  %varying = icmp eq i32 %ld,  42
  br label %bb0

bb0:
  %bb0.varying = or i1 %varying, true
  %bb0.add = add i32 %ld, 0
  br i1 %bb0.varying, label %bb1, label %bb6

bb1:
  %bb1.varying = or i1 %varying, true
  %bb1.add = add i32 %ld, 1
  br i1 %bb1.varying, label %latch, label %bb2

bb2:
  %bb2.varying = or i1 %varying, true
  %bb2.add = add i32 %ld, 2
  br i1 %bb2.varying, label %bb4, label %bb3

bb3:
  %bb3.add = add i32 %ld, 3
  br label %bb5

bb4:
  %bb4.add = add i32 %ld, 4
  br label %bb5

bb5:
  %bb5.add = add i32 %ld, 5
  br label %latch

bb6:
  %bb6.varying = or i1 %varying, true
  %bb6.add = add i32 %ld, 6
  br i1 %bb6.varying, label %bb7, label %latch

bb7:
  %bb7.varying = or i1 %varying, true
  %bb7.add = add i32 %ld, 7
  br i1 %bb7.varying, label %bb5, label %bb8

bb8:
  %bb8.add = add i32 %ld, 8
  br label %bb5

latch:
  %indvars.iv.next = add nuw nsw i32 %indvars.iv, 1
  %exitcond = icmp eq i32 %indvars.iv.next, 300
  br i1 %exitcond, label %for.end, label %for.body

for.end:
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"()]
  ret void
}

declare token @llvm.directive.region.entry()

declare void @llvm.directive.region.exit(token)
