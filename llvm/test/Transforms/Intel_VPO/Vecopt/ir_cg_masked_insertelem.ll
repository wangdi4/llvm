; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt < %s -VPlanDriver -vplan-force-vf=2 -S 2>&1 | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

declare i32 @foo(i32)

; This used to crash by generating broken SSA.
define void @test_predicated_index_operand(i32 *%p, i64 %n) {
; CHECK:  define void @test_predicated_index_operand(i32* [[P0:%.*]], i64 [[N0:%.*]]) {
; CHECK:       vector.body:
; CHECK-NEXT:    [[UNI_PHI0:%.*]] = phi i64 [ [[TMP22:%.*]], [[VPLANNEDBB70:%.*]] ], [ 0, [[VECTOR_PH0:%.*]] ]
; CHECK-NEXT:    [[VEC_PHI0:%.*]] = phi <2 x i64> [ [[TMP21:%.*]], [[VPLANNEDBB70]] ], [ <i64 0, i64 1>, [[VECTOR_PH0]] ]
; CHECK-NEXT:    [[SCALAR_GEP0:%.*]] = getelementptr inbounds i32, i32* [[P0]], i64 [[UNI_PHI0]]
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast i32* [[SCALAR_GEP0]] to <2 x i32>*
; CHECK-NEXT:    [[WIDE_LOAD0:%.*]] = load <2 x i32>, <2 x i32>* [[TMP2]], align 4
; CHECK-NEXT:    [[WIDE_LOAD_EXTRACT_1_0:%.*]] = extractelement <2 x i32> [[WIDE_LOAD0]], i32 1
; CHECK-NEXT:    [[WIDE_LOAD_EXTRACT_0_0:%.*]] = extractelement <2 x i32> [[WIDE_LOAD0]], i32 0
; CHECK-NEXT:    [[TMP3:%.*]] = icmp eq <2 x i32> [[WIDE_LOAD0]], zeroinitializer
; CHECK-NEXT:    [[TMP4:%.*]] = xor <2 x i1> [[TMP3]], <i1 true, i1 true>
; CHECK-NEXT:    br label [[VPLANNEDBB30:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB3:
; CHECK-NEXT:    [[PREDICATE0:%.*]] = extractelement <2 x i1> [[TMP4]], i64 0
; CHECK-NEXT:    [[TMP5:%.*]] = icmp eq i1 [[PREDICATE0]], true
; CHECK-NEXT:    br i1 [[TMP5]], label [[PRED_CALL_IF0:%.*]], label [[TMP7:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.if:
; CHECK-NEXT:    [[TMP6:%.*]] = call i32 @foo(i32 [[WIDE_LOAD_EXTRACT_0_0]])
; CHECK-NEXT:    br label [[TMP7]]
; CHECK-EMPTY:
; CHECK-NEXT:  7:
; CHECK-NEXT:    [[TMP8:%.*]] = phi i32 [ undef, [[VPLANNEDBB30]] ], [ [[TMP6]], [[PRED_CALL_IF0]] ]
; CHECK-NEXT:    br label [[PRED_CALL_CONTINUE0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.continue:
; CHECK-NEXT:    [[PREDICATE40:%.*]] = extractelement <2 x i1> [[TMP4]], i64 1
; CHECK-NEXT:    [[TMP9:%.*]] = icmp eq i1 [[PREDICATE40]], true
; CHECK-NEXT:    br i1 [[TMP9]], label [[PRED_CALL_IF140:%.*]], label [[TMP11:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.if14:
; CHECK-NEXT:    [[TMP10:%.*]] = call i32 @foo(i32 [[WIDE_LOAD_EXTRACT_1_0]])
; CHECK-NEXT:    br label [[TMP11]]
; CHECK-EMPTY:
; CHECK-NEXT:  11:
; CHECK-NEXT:    [[TMP12:%.*]] = phi i32 [ undef, [[PRED_CALL_CONTINUE0]] ], [ [[TMP10]], [[PRED_CALL_IF140]] ]
; CHECK-NEXT:    br label [[PRED_CALL_CONTINUE150:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.continue15:
; CHECK-NEXT:    [[PREDICATE50:%.*]] = extractelement <2 x i1> [[TMP4]], i64 0
; CHECK-NEXT:    [[TMP13:%.*]] = icmp eq i1 [[PREDICATE50]], true
; CHECK-NEXT:    br i1 [[TMP13]], label [[PRED_INSERTELEMENT_IF0:%.*]], label [[TMP15:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.insertelement.if:
; CHECK-NEXT:    [[TMP14:%.*]] = insertelement <4 x i32> zeroinitializer, i32 [[WIDE_LOAD_EXTRACT_0_0]], i32 [[TMP8]]
; CHECK-NEXT:    br label [[TMP15]]
; CHECK-EMPTY:
; CHECK-NEXT:  15:
; CHECK-NEXT:    [[TMP16:%.*]] = phi <4 x i32> [ undef, [[PRED_CALL_CONTINUE150]] ], [ [[TMP14]], [[PRED_INSERTELEMENT_IF0]] ]
; CHECK-NEXT:    br label [[PRED_INSERTELEMENT_CONTINUE0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.insertelement.continue:
; CHECK-NEXT:    [[PREDICATE60:%.*]] = extractelement <2 x i1> [[TMP4]], i64 1
; CHECK-NEXT:    [[TMP17:%.*]] = icmp eq i1 [[PREDICATE60]], true
; CHECK-NEXT:    br i1 [[TMP17]], label [[PRED_INSERTELEMENT_IF160:%.*]], label [[TMP19:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.insertelement.if16:
; CHECK-NEXT:    [[TMP18:%.*]] = insertelement <4 x i32> zeroinitializer, i32 [[WIDE_LOAD_EXTRACT_1_0]], i32 [[TMP12]]
; CHECK-NEXT:    br label [[TMP19]]
; CHECK-EMPTY:
; CHECK-NEXT:  19:
; CHECK-NEXT:    [[TMP20:%.*]] = phi <4 x i32> [ undef, [[PRED_INSERTELEMENT_CONTINUE0]] ], [ [[TMP18]], [[PRED_INSERTELEMENT_IF160]] ]
; CHECK-NEXT:    br label [[PRED_INSERTELEMENT_CONTINUE170:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.insertelement.continue17:
; CHECK-NEXT:    br label [[VPLANNEDBB70]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB7:
; CHECK-NEXT:    [[TMP21]] = add nuw nsw <2 x i64> [[VEC_PHI0]], <i64 2, i64 2>
; CHECK-NEXT:    [[TMP22]] = add nuw nsw i64 [[UNI_PHI0]], 2
; CHECK-NEXT:    [[TMP23:%.*]] = icmp eq i64 [[TMP22]], [[TMP0:%.*]]
; CHECK-NEXT:    br i1 [[TMP23]], label [[VPLANNEDBB80:%.*]], label [[VECTOR_BODY0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB8:
; CHECK-NEXT:    [[TMP24:%.*]] = mul i64 1, [[TMP0]]
; CHECK-NEXT:    [[TMP25:%.*]] = add i64 0, [[TMP24]]
; CHECK-NEXT:    br label [[MIDDLE_BLOCK0:%.*]]
;
entry:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %header

header:
  %iv = phi i64 [ %iv.next, %latch ], [ 0, %entry ]
  %gep = getelementptr inbounds i32, i32 *%p, i64 %iv
  %ld = load i32, i32* %gep
  %cond = icmp eq i32 %ld, 0
  br i1 %cond, label %latch, label %masked

masked:
  %pred.op = call i32 @foo(i32 %ld)
  %vecins = insertelement <4 x i32> zeroinitializer, i32 %ld, i32 %pred.op
  br label %latch

latch:
  %iv.next = add nuw nsw i64 %iv, 1
  %exitcond = icmp eq i64 %iv.next, %n
  br i1 %exitcond, label %loopexit, label %header

loopexit:
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"() ]
  ret void
}

define void @test_predicated_value_operand(i32 *%p, i64 %n) {
; CHECK:  define void @test_predicated_value_operand(i32* [[P0:%.*]], i64 [[N0:%.*]]) {
; CHECK:       vector.body:
; CHECK-NEXT:    [[UNI_PHI0:%.*]] = phi i64 [ [[TMP24:%.*]], [[VPLANNEDBB70:%.*]] ], [ 0, [[VECTOR_PH0:%.*]] ]
; CHECK-NEXT:    [[VEC_PHI0:%.*]] = phi <2 x i64> [ [[TMP23:%.*]], [[VPLANNEDBB70]] ], [ <i64 0, i64 1>, [[VECTOR_PH0]] ]
; CHECK-NEXT:    [[SCALAR_GEP0:%.*]] = getelementptr inbounds i32, i32* [[P0]], i64 [[UNI_PHI0]]
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast i32* [[SCALAR_GEP0]] to <2 x i32>*
; CHECK-NEXT:    [[WIDE_LOAD0:%.*]] = load <2 x i32>, <2 x i32>* [[TMP2]], align 4
; CHECK-NEXT:    [[WIDE_LOAD_EXTRACT_1_0:%.*]] = extractelement <2 x i32> [[WIDE_LOAD0]], i32 1
; CHECK-NEXT:    [[WIDE_LOAD_EXTRACT_0_0:%.*]] = extractelement <2 x i32> [[WIDE_LOAD0]], i32 0
; CHECK-NEXT:    [[TMP3:%.*]] = icmp eq <2 x i32> [[WIDE_LOAD0]], zeroinitializer
; CHECK-NEXT:    [[TMP4:%.*]] = xor <2 x i1> [[TMP3]], <i1 true, i1 true>
; CHECK-NEXT:    br label [[VPLANNEDBB30:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB3:
; CHECK-NEXT:    [[PREDICATE0:%.*]] = extractelement <2 x i1> [[TMP4]], i64 0
; CHECK-NEXT:    [[TMP5:%.*]] = icmp eq i1 [[PREDICATE0]], true
; CHECK-NEXT:    br i1 [[TMP5]], label [[PRED_CALL_IF0:%.*]], label [[TMP7:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.if:
; CHECK-NEXT:    [[TMP6:%.*]] = call i32 @foo(i32 [[WIDE_LOAD_EXTRACT_0_0]])
; CHECK-NEXT:    br label [[TMP7]]
; CHECK-EMPTY:
; CHECK-NEXT:  7:
; CHECK-NEXT:    [[TMP8:%.*]] = phi i32 [ undef, [[VPLANNEDBB30]] ], [ [[TMP6]], [[PRED_CALL_IF0]] ]
; CHECK-NEXT:    br label [[PRED_CALL_CONTINUE0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.continue:
; CHECK-NEXT:    [[TMP9:%.*]] = insertelement <2 x i32> undef, i32 [[TMP8]], i32 0
; CHECK-NEXT:    [[PREDICATE40:%.*]] = extractelement <2 x i1> [[TMP4]], i64 1
; CHECK-NEXT:    [[TMP10:%.*]] = icmp eq i1 [[PREDICATE40]], true
; CHECK-NEXT:    br i1 [[TMP10]], label [[PRED_CALL_IF140:%.*]], label [[TMP12:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.if14:
; CHECK-NEXT:    [[TMP11:%.*]] = call i32 @foo(i32 [[WIDE_LOAD_EXTRACT_1_0]])
; CHECK-NEXT:    br label [[TMP12]]
; CHECK-EMPTY:
; CHECK-NEXT:  12:
; CHECK-NEXT:    [[TMP13:%.*]] = phi i32 [ undef, [[PRED_CALL_CONTINUE0]] ], [ [[TMP11]], [[PRED_CALL_IF140]] ]
; CHECK-NEXT:    br label [[PRED_CALL_CONTINUE150:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.call.continue15:
; CHECK-NEXT:    [[TMP14:%.*]] = insertelement <2 x i32> [[TMP9]], i32 [[TMP13]], i32 1
; CHECK-NEXT:    [[PREDICATE50:%.*]] = extractelement <2 x i1> [[TMP4]], i64 0
; CHECK-NEXT:    [[TMP15:%.*]] = icmp eq i1 [[PREDICATE50]], true
; CHECK-NEXT:    br i1 [[TMP15]], label [[PRED_INSERTELEMENT_IF0:%.*]], label [[TMP17:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.insertelement.if:
; CHECK-NEXT:    [[TMP16:%.*]] = insertelement <4 x i32> zeroinitializer, i32 [[TMP8]], i32 [[WIDE_LOAD_EXTRACT_0_0]]
; CHECK-NEXT:    br label [[TMP17]]
; CHECK-EMPTY:
; CHECK-NEXT:  17:
; CHECK-NEXT:    [[TMP18:%.*]] = phi <4 x i32> [ undef, [[PRED_CALL_CONTINUE150]] ], [ [[TMP16]], [[PRED_INSERTELEMENT_IF0]] ]
; CHECK-NEXT:    br label [[PRED_INSERTELEMENT_CONTINUE0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.insertelement.continue:
; CHECK-NEXT:    [[PREDICATE60:%.*]] = extractelement <2 x i1> [[TMP4]], i64 1
; CHECK-NEXT:    [[TMP19:%.*]] = icmp eq i1 [[PREDICATE60]], true
; CHECK-NEXT:    br i1 [[TMP19]], label [[PRED_INSERTELEMENT_IF160:%.*]], label [[TMP21:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.insertelement.if16:
; CHECK-NEXT:    [[TMP20:%.*]] = insertelement <4 x i32> zeroinitializer, i32 [[TMP13]], i32 [[WIDE_LOAD_EXTRACT_1_0]]
; CHECK-NEXT:    br label [[TMP21]]
; CHECK-EMPTY:
; CHECK-NEXT:  21:
; CHECK-NEXT:    [[TMP22:%.*]] = phi <4 x i32> [ undef, [[PRED_INSERTELEMENT_CONTINUE0]] ], [ [[TMP20]], [[PRED_INSERTELEMENT_IF160]] ]
; CHECK-NEXT:    br label [[PRED_INSERTELEMENT_CONTINUE170:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  pred.insertelement.continue17:
; CHECK-NEXT:    br label [[VPLANNEDBB70]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB7:
; CHECK-NEXT:    [[TMP23]] = add nuw nsw <2 x i64> [[VEC_PHI0]], <i64 2, i64 2>
; CHECK-NEXT:    [[TMP24]] = add nuw nsw i64 [[UNI_PHI0]], 2
; CHECK-NEXT:    [[TMP25:%.*]] = icmp eq i64 [[TMP24]], [[TMP0:%.*]]
; CHECK-NEXT:    br i1 [[TMP25]], label [[VPLANNEDBB80:%.*]], label [[VECTOR_BODY0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  VPlannedBB8:
; CHECK-NEXT:    [[TMP26:%.*]] = mul i64 1, [[TMP0]]
; CHECK-NEXT:    [[TMP27:%.*]] = add i64 0, [[TMP26]]
; CHECK-NEXT:    br label [[MIDDLE_BLOCK0:%.*]]
;
entry:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %header

header:
  %iv = phi i64 [ %iv.next, %latch ], [ 0, %entry ]
  %gep = getelementptr inbounds i32, i32 *%p, i64 %iv
  %ld = load i32, i32* %gep
  %cond = icmp eq i32 %ld, 0
  br i1 %cond, label %latch, label %masked

masked:
  %pred.op = call i32 @foo(i32 %ld)
  %vecins = insertelement <4 x i32> zeroinitializer, i32 %pred.op, i32 %ld
  br label %latch

latch:
  %iv.next = add nuw nsw i64 %iv, 1
  %exitcond = icmp eq i64 %iv.next, %n
  br i1 %exitcond, label %loopexit, label %header

loopexit:
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"() ]
  ret void
}


declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
