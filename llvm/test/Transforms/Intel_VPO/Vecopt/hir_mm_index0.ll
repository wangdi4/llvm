; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; Test for basic functionality of min/max+index idiom (main reduction + first linear index).
; REQUIRES: asserts
; RUN: opt -disable-output -hir-ssa-deconstruction -hir-temp-cleanup -hir-vec-dir-insert -VPlanDriverHIR -vplan-plain-dump -vplan-entities-dump -disable-vplan-codegen -enable-mmindex=1 -disable-nonlinear-mmindex=1 -vplan-print-after-vpentity-instrs -vplan-force-vf=4 -S < %s 2>&1 | FileCheck %s
; RUN: opt -disable-output -hir-ssa-deconstruction -hir-temp-cleanup -hir-vec-dir-insert -VPlanDriverHIR -vplan-plain-dump -vplan-entities-dump -enable-vp-value-codegen-hir=1 -enable-mmindex=1 -disable-nonlinear-mmindex=1 -hir-cg -vplan-force-vf=4  -S -print-after=VPlanDriverHIR < %s 2>&1 | FileCheck -check-prefix CGCHECK %s
; RUN: opt -disable-output -hir-ssa-deconstruction -hir-temp-cleanup -hir-vec-dir-insert -VPlanDriverHIR -vplan-plain-dump -vplan-entities-dump -enable-vp-value-codegen-hir=0 -enable-mmindex=1 -disable-nonlinear-mmindex=1 -hir-cg -vplan-force-vf=4  -S -print-after=VPlanDriverHIR < %s 2>&1 | FileCheck -check-prefix CGCHECK %s

; CHECK:       External Defs Start:
; CHECK:         [[VPMPLUS:%.*]] = {%m + -1}
; CHECK:       External Defs End:
; CHECK:  Reduction list
; CHECK-NEXT:   signed (SIntMax) Start: i32 [[BEST_0230:%.*]] Exit: i32 [[VP0:%.*]]
; CHECK-NEXT:    Linked values: i32 [[VP1:%.*]], i32 [[VP0]], i32 [[VP__RED_INIT:%.*]], i32 [[VP__RED_FINAL:%.*]],
; CHECK-EMPTY:
; CHECK-NEXT:   signed (SIntMin) Start: i32 [[TMP_0240:%.*]] Exit: i32 [[VP2:%.*]]
; CHECK-NEXT:    Linked values: i32 [[VP3:%.*]], i32 [[VP2]], i32 [[VP__RED_INIT_1:%.*]], i32 [[VP__RED_FINAL_1:%.*]],
; CHECK-NEXT:   IsLinearIndex: 1  Parent exit: i32 [[VP0]]
; CHECK-EMPTY:
; CHECK-NEXT:  Induction list
; CHECK-NEXT:   IntInduction(+) Start: i32 0 Step: i32 1 StartVal: i32 0 EndVal: ? BinOp: i32 [[VP4:%.*]] = add i32 [[VP5:%.*]] i32 [[VP__IND_INIT_STEP:%.*]]
; CHECK-NEXT:    Linked values: i32 [[VP5]], i32 [[VP4]], i32 [[VP__IND_INIT:%.*]], i32 [[VP__IND_FINAL:%.*]],
;
; CHECK:    [[BB1:BB[0-9]+]]:
; CHECK:    [[BB2:BB[0-9]+]]:
; CHECK-NEXT:     i32 [[VP__RED_INIT]] = reduction-init i32 [[BEST_0230]]
; CHECK-NEXT:     i32 [[VP__RED_INIT_1]] = reduction-init i32 [[TMP_0240]]
; CHECK-NEXT:     i32 [[VP__IND_INIT]] = induction-init{add} i32 0 i32 1
; CHECK-NEXT:     i32 [[VP__IND_INIT_STEP]] = induction-init-step{add} i32 1
;
; CHECK:    [[BB3:BB[0-9]+]]:
; CHECK-NEXT:     i32 [[VP3]] = phi  [ i32 [[VP__RED_INIT_1]], [[BB2:.*]] ],  [ i32 [[VP2]], [[BB3:.*]] ]
; CHECK-NEXT:     i32 [[VP1]] = phi  [ i32 [[VP__RED_INIT]], [[BB2]] ],  [ i32 [[VP0]], [[BB3]] ]
; CHECK-NEXT:     i32 [[VP5]] = phi  [ i32 [[VP__IND_INIT]], [[BB2]] ],  [ i32 [[VP4]], [[BB3]] ]
; CHECK-NEXT:     i64 [[VP7:%.*]] = sext i32 [[VP5]] to i64
; CHECK-NEXT:     i32* [[VP8:%.*]] = subscript inbounds i32* [[ORDERING0:%.*]] i64 [[VP7]]
; CHECK-NEXT:     i32 [[VP9:%.*]] = load i32* [[VP8]]
; CHECK-NEXT:     i1 [[VP10:%.*]] = icmp sgt i32 [[VP9]] i32 [[VP1]]
; CHECK-NEXT:     i32 [[VP2]] = select i1 [[VP10]] i32 [[VP5]] i32 [[VP3]]
; CHECK-NEXT:     i1 [[VP11:%.*]] = icmp sgt i32 [[VP9]] i32 [[VP1]]
; CHECK-NEXT:     i32 [[VP0]] = select i1 [[VP11]] i32 [[VP9]] i32 [[VP1]]
; CHECK-NEXT:     i32 [[VP4]] = add i32 [[VP5]] i32 [[VP__IND_INIT_STEP]]
; CHECK-NEXT:     i1 [[VP12:%.*]] = icmp sle i32 [[VP4]] i32 [[VPMPLUS]]
;
; CHECK:    [[BB4:BB[0-9]+]]:
; CHECK-NEXT:     i32 [[VP__RED_FINAL]] = reduction-final{u_smax} i32 [[VP0]]
; CHECK-NEXT:     i32 [[VP__RED_FINAL_1]] = reduction-final{s_smin} i32 [[VP2]] i32 [[VP0]] i32 [[VP__RED_FINAL]]
; CHECK-NEXT:     i32 [[VP__IND_FINAL]] = induction-final{add} i32 0 i32 1
;

;CGCHECK-LABEL:*** IR Dump After VPlan Vectorization Driver HIR ***
;CGCHECK: Function: maxloc
;CGCHECK-EMPTY:
;CGCHECK-NEXT:  BEGIN REGION { modified }
;CGCHECK-NEXT:        %tgu = (%m)/u4;
;CGCHECK-NEXT:        if (0 <u 4 * %tgu)
;CGCHECK-NEXT:        {
;CGCHECK-NEXT:           %red.var = %best.023;
;CGCHECK-NEXT:           %red.var1 = %tmp.024;
;CGCHECK:                + DO i1 = 0, 4 * %tgu + -1, 4   <DO_LOOP>  <MAX_TC_EST = 1073741823> <auto-vectorized> <nounroll> <novectorize>
;CGCHECK-NEXT:           |   %.vec = (<4 x i32>*)(%ordering)[i1];
;CGCHECK-NEXT:           |   %red.var1 = (%.vec > %red.var) ? i1 + <i32 0, i32 1, i32 2, i32 3> : %red.var1;
;CGCHECK-NEXT:           |   %red.var = (%.vec > %red.var) ? %.vec : %red.var;
;CGCHECK-NEXT:           + END LOOP
;CGCHECK:                %best.023 = @llvm.vector.reduce.smax.v4i32(%red.var);
;CGCHECK-NEXT:           %idx.blend = (%best.023 == %red.var) ? %red.var1 : <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>;
;CGCHECK-NEXT:           %tmp.024 = @llvm.vector.reduce.smin.v4i32(%idx.blend);
;CGCHECK-NEXT:        }
;CGCHECK:           + DO i1 = 4 * %tgu, %m + -1, 1   <DO_LOOP>  <MAX_TC_EST = 3> <nounroll> <novectorize> <max_trip_count = 3>
;CGCHECK-NEXT:        |   %0 = (%ordering)[i1];
;CGCHECK-NEXT:        |   %tmp.024 = (%0 > %best.023) ? i1 : %tmp.024;
;CGCHECK-NEXT:        |   %best.023 = (%0 > %best.023) ? %0 : %best.023;
;CGCHECK-NEXT:       + END LOOP
;CGCHECK-NEXT: END REGION
;
;int ordering[1000];
;int  maxloc (int m) {
;    int best = -111111111;
;    int tmp = 0;
;    int val = 0;
;    for (int i=0; i< m; i++) {
;        if (ordering[i] > best) {
;            best = ordering[i];
;            tmp = i;
;        }
;    }
;    return tmp + best+val;
;}
;
; Function Attrs: norecurse nounwind readonly uwtable
define dso_local i32 @maxloc(i32 %m, i32* nocapture readonly %ordering) local_unnamed_addr #0 {

entry:
  %cmp22 = icmp sgt i32 %m, 0
  br i1 %cmp22, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
;  %wide.trip.count = sext i32 %m to i64
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %indvars.iv = phi i32 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %tmp.024 = phi i32 [ 0, %for.body.preheader ], [ %spec.select20, %for.body ]
  %best.023 = phi i32 [ -111111111, %for.body.preheader ], [ %spec.select, %for.body ]
  %arrayidx = getelementptr inbounds i32, i32* %ordering, i32 %indvars.iv
  %0 = load i32, i32* %arrayidx, align 4, !tbaa !2
  %cmp1 = icmp sgt i32 %0, %best.023
  %spec.select = select i1 %cmp1, i32 %0, i32 %best.023
  %spec.select20 = select i1 %cmp1, i32 %indvars.iv, i32 %tmp.024
  %indvars.iv.next = add nuw nsw i32 %indvars.iv, 1
  %exitcond = icmp eq i32 %indvars.iv.next, %m
  br i1 %exitcond, label %for.end.loopexit, label %for.body

for.end.loopexit:                                 ; preds = %for.body
  %spec.select.lcssa = phi i32 [ %spec.select, %for.body ]
  %spec.select20.lcssa = phi i32 [ %spec.select20, %for.body ]
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  %best.0.lcssa = phi i32 [ -111111111, %entry ], [ %spec.select.lcssa, %for.end.loopexit ]
  %tmp.0.lcssa = phi i32 [ 0, %entry ], [ %spec.select20.lcssa, %for.end.loopexit ]
  %add6 = add nsw i32 %tmp.0.lcssa, %best.0.lcssa
  ret i32 %add6
};
attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core-avx2" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+rdrnd,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt" "unsafe-fp-math"="false" "use-soft-float"="false" }

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"icx (ICX) dev.8.x.0"}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}

