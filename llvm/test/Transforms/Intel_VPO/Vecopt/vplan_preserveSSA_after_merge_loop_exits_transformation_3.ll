; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; Tests whether it is needed to emit a phi node (that preserves SSA) for values
; that are defined in exiting blocks. VP_DEF is defined in loop header (BB5)
; which is also an exiting block. VP_VAR4 is defined in BB8 which is an exiting
; block. BB5 dominates all the exiting block. Therefore, it is not needed to
; emit a phi node in NEWLOOPLATCH0 in order to preserve SSA. On the contrary,
; BB8 does not dominate all exiting blocks. Thus, a phi node should be emitted
; in NEWLOOPLATCH0 for value VP_VAR4.
; Finally, a phi node is needed for VP_INNER_LOOP_INDUCTION.

; RUN: opt -vplan-print-terminator-inst=false < %s -vplan-func-vec -disable-output -print-after-vplan-func-vec-loop-exit-canon | FileCheck %s
; RUN: opt -vplan-print-terminator-inst=false < %s -passes="vplan-func-vec" -disable-output -print-after-vplan-func-vec-loop-exit-canon | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: norecurse nounwind uwtable
define void @main() {
; CHECK-LABEL:  VPlan IR for: main
; CHECK-NEXT:    [[BB0:BB[0-9]+]]:
; CHECK-NEXT:     i32 [[VP_LANE:%.*]] = induction-init{add} i32 0 i32 1
; CHECK-NEXT:    SUCCESSORS(1):[[BB1:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]:
; CHECK-NEXT:     i32 [[VP_IV:%.*]] = phi  [ i32 0, [[BB0]] ],  [ i32 [[VP_IV_NEXT_SSA_PHI:%.*]], [[NEW_LOOP_LATCH0:new.loop.latch[0-9]+]] ]
; CHECK-NEXT:     i32 [[VP_DEF_PHI:%.*]] = phi  [ i32 0, [[BB0]] ],  [ i32 [[VP_DEF:%.*]], [[NEW_LOOP_LATCH0]] ]
; CHECK-NEXT:     i32 [[VP_VAR1:%.*]] = add i32 [[VP_IV]] i32 [[VP_DEF_PHI]]
; CHECK-NEXT:     i32 [[VP_DEF]] = add i32 [[VP_VAR1]] i32 1
; CHECK-NEXT:     i1 [[VP_CMP1:%.*]] = icmp eq i32 [[VP_DEF]] i32 16
; CHECK-NEXT:    SUCCESSORS(2):[[BB2:BB[0-9]+]](i1 [[VP_CMP1]]), [[INTERMEDIATE_BB0:intermediate.bb[0-9]+]](!i1 [[VP_CMP1]])
; CHECK-NEXT:    PREDECESSORS(2): [[BB0]] [[NEW_LOOP_LATCH0]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[INTERMEDIATE_BB0]]:
; CHECK-NEXT:       <Empty Block>
; CHECK-NEXT:      SUCCESSORS(1):[[NEW_LOOP_LATCH0]]
; CHECK-NEXT:      PREDECESSORS(1): [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB2]]:
; CHECK-NEXT:       i32 [[VP_VAR2:%.*]] = add i32 [[VP_IV]] i32 2
; CHECK-NEXT:       i1 [[VP_CMP2:%.*]] = icmp eq i32 [[VP_VAR2]] i32 16
; CHECK-NEXT:      SUCCESSORS(2):[[BB3:BB[0-9]+]](i1 [[VP_CMP2]]), [[BB4:BB[0-9]+]](!i1 [[VP_CMP2]])
; CHECK-NEXT:      PREDECESSORS(1): [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB4]]:
; CHECK-NEXT:         i32 [[VP_VAR3:%.*]] = add i32 [[VP_VAR2]] i32 1
; CHECK-NEXT:         i1 [[VP_CMP3:%.*]] = icmp eq i32 [[VP_VAR3]] i32 32
; CHECK-NEXT:        SUCCESSORS(2):[[BB5:BB[0-9]+]](i1 [[VP_CMP3]]), [[INTERMEDIATE_BB1:intermediate.bb[0-9]+]](!i1 [[VP_CMP3]])
; CHECK-NEXT:        PREDECESSORS(1): [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:          [[INTERMEDIATE_BB1]]:
; CHECK-NEXT:           <Empty Block>
; CHECK-NEXT:          SUCCESSORS(1):[[NEW_LOOP_LATCH0]]
; CHECK-NEXT:          PREDECESSORS(1): [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB3]]:
; CHECK-NEXT:         <Empty Block>
; CHECK-NEXT:        SUCCESSORS(1):[[BB5]]
; CHECK-NEXT:        PREDECESSORS(1): [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB5]]:
; CHECK-NEXT:       i32 [[VP_IV_NEXT:%.*]] = add i32 [[VP_IV]] i32 1
; CHECK-NEXT:       i1 [[VP_BOTTOM_TEST:%.*]] = icmp eq i32 [[VP_IV_NEXT]] i32 128
; CHECK-NEXT:      SUCCESSORS(1):[[NEW_LOOP_LATCH0]]
; CHECK-NEXT:      PREDECESSORS(2): [[BB4]] [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[NEW_LOOP_LATCH0]]:
; CHECK-NEXT:     i32 [[VP_IV_NEXT_SSA_PHI]] = phi  [ i32 [[VP_IV_NEXT]], [[BB5]] ],  [ i32 undef, [[INTERMEDIATE_BB0]] ],  [ i32 undef, [[INTERMEDIATE_BB1]] ]
; CHECK-NEXT:     i32 [[VP_EXIT_ID_PHI:%.*]] = phi  [ i32 0, [[BB5]] ],  [ i32 1, [[INTERMEDIATE_BB0]] ],  [ i32 2, [[INTERMEDIATE_BB1]] ]
; CHECK-NEXT:     i1 [[VP_TAKE_BACKEDGE_COND:%.*]] = phi  [ i1 [[VP_BOTTOM_TEST]], [[BB5]] ],  [ i1 false, [[INTERMEDIATE_BB0]] ],  [ i1 false, [[INTERMEDIATE_BB1]] ]
; CHECK-NEXT:    SUCCESSORS(2):[[BB1]](i1 [[VP_TAKE_BACKEDGE_COND]]), [[CASCADED_IF_BLOCK0:cascaded.if.block[0-9]+]](!i1 [[VP_TAKE_BACKEDGE_COND]])
; CHECK-NEXT:    PREDECESSORS(3): [[BB5]] [[INTERMEDIATE_BB0]] [[INTERMEDIATE_BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[CASCADED_IF_BLOCK0]]:
; CHECK-NEXT:     i1 [[VP0:%.*]] = icmp eq i32 [[VP_EXIT_ID_PHI]] i32 1
; CHECK-NEXT:    SUCCESSORS(2):[[BB6:BB[0-9]+]](i1 [[VP0]]), [[CASCADED_IF_BLOCK1:cascaded.if.block[0-9]+]](!i1 [[VP0]])
; CHECK-NEXT:    PREDECESSORS(1): [[NEW_LOOP_LATCH0]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[CASCADED_IF_BLOCK1]]:
; CHECK-NEXT:       i1 [[VP1:%.*]] = icmp eq i32 [[VP_EXIT_ID_PHI]] i32 2
; CHECK-NEXT:      SUCCESSORS(2):[[BB7:BB[0-9]+]](i1 [[VP1]]), [[BB8:BB[0-9]+]](!i1 [[VP1]])
; CHECK-NEXT:      PREDECESSORS(1): [[CASCADED_IF_BLOCK0]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB8]]:
; CHECK-NEXT:         <Empty Block>
; CHECK-NEXT:        SUCCESSORS(1):[[BB9:BB[0-9]+]]
; CHECK-NEXT:        PREDECESSORS(1): [[CASCADED_IF_BLOCK1]]
; CHECK-EMPTY:
; CHECK-NEXT:        [[BB7]]:
; CHECK-NEXT:         <Empty Block>
; CHECK-NEXT:        SUCCESSORS(1):[[BB9]]
; CHECK-NEXT:        PREDECESSORS(1): [[CASCADED_IF_BLOCK1]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB6]]:
; CHECK-NEXT:       <Empty Block>
; CHECK-NEXT:      SUCCESSORS(1):[[BB9]]
; CHECK-NEXT:      PREDECESSORS(1): [[CASCADED_IF_BLOCK0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB9]]:
; CHECK-NEXT:     ret
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(3): [[BB6]] [[BB7]] [[BB8]]
;
entry:
  %lane = call i32 @llvm.vplan.laneid()
  br label %inner_loop_header
;-------------------------------------------------------------------------------
;             BEFORE                                       AFTER
;-------------------------------------------------------------------------------
; +------>inner_loop_header              +----------->BB1(inner_loop_header)
; |         /             \              |            /                \
; |       bb1              \             |       BB2(bb1)    INTERMEDIATE_BB0
; |      /   \              \            |        /   \                    |
; |    bb2   bb3----+        \           |  BB3(bb2) BB4(bb3)              |
; |      \   /       \        \          |      \      /  \                |
; +-inner_loop_latch  \        \         |       \    /  INTERMEDIATE_BB1  +
;          |           \        \        |        \  /              /     /
;       exitbb3     exitbb2   exitbb1    |  BB5(inner_loop_latch)  /     /
;                                        |         \              /     /
;                                        +----------NEW_LOOP_LATCH0<---+
;                                                           |
;                                                    CASCADED_IF_BLOCK0
;                                                       /           \
;                                            (exitbb1)BB6   CASCADED_IF_BLOCK1
;                                                              /      \
;                                                   (exitbb2)BB7 (exitbb3)BB8
inner_loop_header:
  %iv = phi i32 [ 0, %entry ], [ %iv_next, %inner_loop_latch ]
  %def_phi = phi i32 [ 0, %entry ], [ %def, %inner_loop_latch ]
  %var1 = add nsw i32 %iv, %def_phi
  %def = add nsw i32 %var1, 1
  %cmp1 = icmp eq i32 %def, 16
  br i1 %cmp1, label %bb1, label %exitbb1

bb1:
  %var2 = add nsw i32 %iv, 2
  %cmp2 = icmp eq i32 %var2, 16
  br i1 %cmp2, label %bb2, label %bb3

bb2:
  br label %inner_loop_latch

bb3:
  %var3 = add nsw i32 %var2, 1
  %cmp3 = icmp eq i32 %var3, 32
  br i1 %cmp3, label %inner_loop_latch, label %exitbb2

inner_loop_latch:
  %iv_next = add nsw i32 %iv, 1
  %bottom_test = icmp eq i32 %iv_next, 128
  br i1 %bottom_test, label %inner_loop_header, label %exitbb3

exitbb1:
  br label %end

exitbb2:
  br label %end

exitbb3:
  br label %end

end:
  ret void
}

declare i32 @llvm.vplan.laneid()
