; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -passes="hir-ssa-deconstruction,hir-vec-dir-insert,hir-vplan-vec,print<hir>" -disable-output < %s 2>&1 | FileCheck %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@b = dso_local global [4 x i32] zeroinitializer, align 16
@a = dso_local global [4 x i32] zeroinitializer, align 16

; The test generated from the following C-code:
; int a[4];
;
;void foo() {
;  int i, x;
;
;#pragma unroll 2
;  for(i = 0; i < 4; i++)
;    x = a[i];
;}
;
; The test is indended to check that VPlan doesn't assert on the input code
; due to selection VF = 4 or greater which is illegal given UF = 2 and
; TripCount = 4.

define dso_local void @foo() {
; CHECK:       Function: foo
; CHECK-EMPTY:
; CHECK-NEXT:           BEGIN REGION { modified }
; CHECK-NEXT:                 %.vec = (<2 x i32>*)(@a)[0][0];
; CHECK-NEXT:                 %.vec1 = (<2 x i32>*)(@a)[0][4];
; CHECK-NEXT:                 %.vec2 = (<2 x i32>*)(@a)[0][2];
; CHECK-NEXT:                 %.vec3 = (<2 x i32>*)(@a)[0][6];
; CHECK-NEXT:           END REGION
;
entry:
  br label %for.body

for.body:                                         ; preds = %entry, %for.body
  %iv = phi i32 [ 0, %entry ], [ %iv.next, %for.body ]
  %idx = getelementptr inbounds [4 x i32], ptr @a, i32 0, i32 %iv
  %0 = load i32, ptr %idx, align 4
  %add = add i32 %iv, 4
  %idx2 = getelementptr inbounds [4 x i32], ptr @a, i32 0, i32 %add
  %1 = load i32, ptr %idx2, align 4
  %iv.next = add nuw nsw i32 %iv, 1
  %exitcond = icmp ne i32 %iv.next, 4
  br i1 %exitcond, label %for.body, label %for.end, !llvm.loop !0

for.end:                                          ; preds = %for.body
  ret void
}

!0 = distinct !{!0, !1}
!1 = !{!"llvm.loop.unroll.count", i32 2}
