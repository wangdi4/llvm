; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; Test to check that reverse unit-stride pointers are recognized by DA and CG-ed as wide loads/stores
; by VPValue-based code generator.

; REQUIRES: asserts
; RUN: opt -VPlanDriver -enable-vp-value-codegen -vplan-force-vf=4 -debug-only=vplan-divergence-analysis 2>&1 < %s -S | FileCheck %s

; CHECK: Printing Divergence info for Loop
; CHECK: Basic Block: {{.*}}
; CHECK_NEXT: Divergent: [Shape: Unit Stride, Stride: i64 1] i64 [[IV:%vp.*]] = phi  [ i64 0, {{.*}} ],  [ i64 [[IV_ADD:%vp.*]], {{.*}} ]
; CHECK_NEXT: Divergent: [Shape: Strided, Stride: i64 -1] i64 [[IV_SUB:%vp.*]] = sub i64 1023 i64 [[IV]]
; CHECK_NEXT: Divergent: [Shape: Unit Stride Pointer, Stride: i64 -4] i32* [[SRC_GEP:%vp.*]] = getelementptr inbounds i32* %src i64 [[IV_SUB]]
; CHECK_NEXT: Divergent: [Shape: Random] i32 [[LOAD:%vp.*]] = load i32* [[SRC_GEP]]
; CHECK_NEXT: Divergent: [Shape: Unit Stride Pointer, Stride: i64 -4] i32* [[DEST_GEP:%vp.*]] = getelementptr inbounds i32* %dest i64 [[IV_SUB]]
; CHECK_NEXT: Divergent: [Shape: Random] store i32 [[LOAD]] i32* [[DEST_GEP]]
; CHECK_NEXT: Divergent: [Shape: Unit Stride, Stride: i64 1] i64 [[IV_ADD]] = add i64 [[IV]] i64 1
; CHECK_NEXT: Uniform: [Shape: Uniform] i1 [[IV_CMP:%vp.*]] = icmp i64 [[IV_ADD]] i64 1024

define void @reverse(i32* %src, i32* %dest) {
; CHECK:       vector.body:
; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH:%.*]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY:%.*]] ]
; CHECK-NEXT:    [[UNI_PHI:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[TMP7:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[VEC_PHI:%.*]] = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, [[VECTOR_PH]] ], [ [[TMP6:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[TMP0:%.*]] = sub nuw nsw <4 x i64> <i64 1023, i64 1023, i64 1023, i64 1023>, [[VEC_PHI]]
; CHECK-NEXT:    [[TMP1:%.*]] = extractelement <4 x i64> [[TMP0]], i32 0
; CHECK-NEXT:    [[SCALAR_GEP:%.*]] = getelementptr inbounds i32, i32* [[SRC:%.*]], i64 [[TMP1]]
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i32, i32* [[SCALAR_GEP]], i32 -3
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast i32* [[TMP2]] to <4 x i32>*
; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <4 x i32>, <4 x i32>* [[TMP3]], align 8
; CHECK-NEXT:    [[REVERSE:%.*]] = shufflevector <4 x i32> [[WIDE_LOAD]], <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
; CHECK-NEXT:    [[SCALAR_GEP1:%.*]] = getelementptr inbounds i32, i32* [[DEST:%.*]], i64 [[TMP1]]
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i32, i32* [[SCALAR_GEP1]], i32 -3
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast i32* [[TMP4]] to <4 x i32>*
; CHECK-NEXT:    [[REVERSE2:%.*]] = shufflevector <4 x i32> [[REVERSE]], <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
; CHECK-NEXT:    store <4 x i32> [[REVERSE2]], <4 x i32>* [[TMP5]], align 8
; CHECK-NEXT:    [[TMP6]] = add nuw nsw <4 x i64> [[VEC_PHI]], <i64 4, i64 4, i64 4, i64 4>
; CHECK-NEXT:    [[TMP7]] = add nuw nsw i64 [[UNI_PHI]], 4
; CHECK-NEXT:    [[TMP8:%.*]] = icmp ne <4 x i64> [[TMP6]], <i64 1024, i64 1024, i64 1024, i64 1024>
; CHECK-NEXT:    [[TMP9:%.*]] = extractelement <4 x i1> [[TMP8]], i32 0
; CHECK-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], 4
; CHECK-NEXT:    [[TMP10:%.*]] = icmp eq i64 [[INDEX_NEXT]], 1024
; CHECK-NEXT:    br i1 [[TMP10]], label [[VPLANNEDBB:%.*]], label [[VECTOR_BODY]]
;
entry:
  %entry.region = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %entry, %omp.inner.for.body
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %omp.inner.for.body ]
  %0 = sub nuw nsw i64 1023, %indvars.iv
  %arrayidx = getelementptr inbounds i32, i32* %src, i64 %0
  %1 = load i32, i32* %arrayidx, align 8
  %arrayidx2 = getelementptr inbounds i32, i32* %dest, i64 %0
  store i32 %1, i32* %arrayidx2, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 1024
  br i1 %exitcond, label %omp.inner.for.body, label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.inner.for.body
  call void @llvm.directive.region.exit(token %entry.region) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.QUAL.LIST.END.1

DIR.QUAL.LIST.END.1:                              ; preds = %omp.loop.exit
  ret void
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry()

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token)

