; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -S -passes=vplan-func-vec -vplan-dump-da < %s -disable-output 2>&1| FileCheck %s

define void @foo(<2 x i32> *%a, <2 x i32> *%b) {
; CHECK:       Printing Divergence info for foo
; CHECK-NEXT:  Basic Block: [[BB0:BB[0-9]+]]
; CHECK-NEXT:  Divergent: [Shape: Unit Stride, Stride: i64 1] i64 [[VP_LANE:%.*]] = induction-init{add} i64 0 i64 1
; CHECK-NEXT:  Divergent: [Shape: Strided, Stride: i64 8] <2 x i32>* [[VP_PTR:%.*]] = getelementptr <2 x i32>* [[A0:%.*]] i64 [[VP_LANE]]
; CHECK-NEXT:  Divergent: [Shape: Random] <2 x i32> [[VP_LD:%.*]] = load <2 x i32>* [[VP_PTR]]
; CHECK-NEXT:  Divergent: [Shape: Random] <2 x i32> [[VP_SHUFFLE:%.*]] = shufflevector <2 x i32> [[VP_LD]] <2 x i32> [[VP_LD]] <2 x i32> <i32 3, i32 0>
; CHECK-NEXT:  Uniform: [Shape: Uniform] <2 x i32> [[VP_LD_UNI:%.*]] = load <2 x i32>* [[B0:%.*]]
; CHECK-NEXT:  Uniform: [Shape: Uniform] <2 x i32> [[VP_SHUFFLE_UNI:%.*]] = shufflevector <2 x i32> [[VP_LD_UNI]] <2 x i32> [[VP_LD_UNI]] <2 x i32> <i32 3, i32 0>
; CHECK-NEXT:  Divergent: [Shape: Random] ret
; CHECK-NEXT:  Uniform: [Shape: Uniform] br <External Block>
;
entry:
  %lane = call i64 @llvm.vplan.laneid()
  %ptr = getelementptr <2 x i32>, <2 x i32> *%a, i64 %lane
  %ld = load <2 x i32>, <2 x i32> *%ptr
  %shuffle = shufflevector <2 x i32> %ld, <2 x i32> %ld, <2 x i32><i32 3, i32 0>

  %ld.uni = load <2 x i32>, <2 x i32> *%b
  %shuffle.uni = shufflevector <2 x i32> %ld.uni, <2 x i32> %ld.uni, <2 x i32><i32 3, i32 0>

  ret void
}

declare i64 @llvm.vplan.laneid()
