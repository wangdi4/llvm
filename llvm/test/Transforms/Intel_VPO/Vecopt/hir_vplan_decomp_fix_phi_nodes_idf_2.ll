; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; LLVM IR generated from the following testcase using icx -O1 -S -emit-llvm
; #include <stdio.h>
; unsigned long long time_ago = 0;
; unsigned int m = 0;
; unsigned int a [9] = {0};
; int main () {
;     unsigned char i = 0;
;     for (i = 8; i > 0; --i)
;     {
;         unsigned short v = time_ago;
;         m *= (a[i] ? (2) / a[i] : (v));
;     }
;     return 0;
; }
;
; Test to verify the correctness of PHI node placement and fixing algorithm using IDF. For this test case, HIR decomposer
; does not initially place a missing PHI node due to lack of use. The issue is addressed when IDF based PHI node placement
; algorithm is executed.

; Input HIR
; <21>     + DO i1 = 0, 7, 1   <DO_LOOP>
; <3>      |   %3 = (@a)[0][-1 * i1 + 8];
; <5>      |   %cond = trunc.i64.i16(%1);
; <6>      |   if (%3 != 0)
; <6>      |   {
; <11>     |      %cond = (2 /u %3);
; <6>      |   }
; <14>     |   %mul10 = %mul10  *  %cond; <Safe Reduction>
; <21>     + END LOOP

; For the above HIR, decomposer initially would place a PHI node for the variable %mul10 incorrectly in the loop latch VPBB (after the if block).
; However the PHI node is needed in the loop header since %mul10 is updated in every iteration of loop (reduction). This scenario is handled
; by IDF based PHI node placement. IDF will insert a PHI in loop header, and the incorrectly inserted PHI node by decomposer will blend
; the new PHI node from both incoming VPBBs (effectively a no-op).

; RUN: opt -vplan-force-vf=4 -passes="hir-ssa-deconstruction,hir-vec-dir-insert,hir-vplan-vec" -vplan-print-after-plain-cfg -enable-blob-coeff-vec -enable-nested-blob-vec -disable-output < %s 2>&1 | FileCheck %s

; Check the plain CFG structure and correctness of incoming values of PHI nodes
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@time_ago = local_unnamed_addr global i64 0, align 8
@m = local_unnamed_addr global i32 0, align 4
@a = local_unnamed_addr global [9 x i32] zeroinitializer, align 16

; Function Attrs: noinline norecurse nounwind uwtable
define i32 @main() local_unnamed_addr #0 {
; CHECK-LABEL:  VPlan after importing plain CFG:
; CHECK-NEXT:  VPlan IR for: main:HIR.#{{[0-9]+}}
; CHECK-NEXT:  External Defs Start:
; CHECK-DAG:     [[VP0:%.*]] = {(trunc i64 %1 to i16)}
; CHECK-DAG:     [[VP1:%.*]] = {%mul10}
; CHECK-DAG:     [[VP2:%.*]] = {@a}
; CHECK-DAG:     [[VP3:%.*]] = {%cond}
; CHECK-NEXT:  External Defs End:
; CHECK-NEXT:    [[BB0:BB[0-9]+]]: # preds:
; CHECK-NEXT:     br [[BB1:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]]: # preds: [[BB0]]
; CHECK-NEXT:     br [[BB2:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]]: # preds: [[BB1]], [[BB3:BB[0-9]+]]
; CHECK-NEXT:     i32 [[VP4:%.*]] = phi  [ i32 [[MUL100:%.*]], [[BB1]] ],  [ i32 [[VP5:%.*]], [[BB3]] ]
; CHECK-NEXT:     i64 [[VP6:%.*]] = phi  [ i64 0, [[BB1]] ],  [ i64 [[VP7:%.*]], [[BB3]] ]
; CHECK-NEXT:     i64 [[VP8:%.*]] = mul i64 -1 i64 [[VP6]]
; CHECK-NEXT:     i64 [[VP9:%.*]] = add i64 [[VP8]] i64 8
; CHECK-NEXT:     ptr [[VP_SUBSCRIPT:%.*]] = subscript inbounds ptr @a i64 0 i64 [[VP9]]
; CHECK-NEXT:     i32 [[VP_LOAD:%.*]] = load ptr [[VP_SUBSCRIPT]]
; CHECK-NEXT:     i32 [[VP10:%.*]] = zext i16 [[VP0]] to i32
; CHECK-NEXT:     i32 [[VP11:%.*]] = hir-copy i32 [[VP10]] , OriginPhiId: -1
; CHECK-NEXT:     i1 [[VP12:%.*]] = icmp ne i32 [[VP_LOAD]] i32 0
; CHECK-NEXT:     br i1 [[VP12]], [[BB4:BB[0-9]+]], [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:      [[BB4]]: # preds: [[BB2]]
; CHECK-NEXT:       i32 [[VP13:%.*]] = udiv i32 2 i32 [[VP_LOAD]]
; CHECK-NEXT:       i32 [[VP14:%.*]] = hir-copy i32 [[VP13]] , OriginPhiId: -1
; CHECK-NEXT:       br [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]]: # preds: [[BB4]], [[BB2]]
; CHECK-NEXT:     i32 [[VP15:%.*]] = phi  [ i32 [[VP14]], [[BB4]] ],  [ i32 [[VP11]], [[BB2]] ]
; CHECK-NEXT:     i32 [[VP5]] = mul i32 [[VP4]] i32 [[VP15]]
; CHECK-NEXT:     i64 [[VP7]] = add i64 [[VP6]] i64 1
; CHECK-NEXT:     i1 [[VP16:%.*]] = icmp slt i64 [[VP7]] i64 8
; CHECK-NEXT:     br i1 [[VP16]], [[BB2]], [[BB5:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]]: # preds: [[BB3]]
; CHECK-NEXT:     br [[BB6:BB[0-9]+]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]]: # preds: [[BB5]]
; CHECK-NEXT:     br <External Block>
; CHECK-EMPTY:
; CHECK-NEXT:  External Uses:
; CHECK-NEXT:  Id: 0   i32 [[VP5]] -> [[VP17:%.*]] = {%mul10}
;
  %1 = load i64, ptr @time_ago, align 8
  %conv1 = trunc i64 %1 to i32
  %conv4 = and i32 %conv1, 65535
  %m.promoted = load i32, ptr @m, align 4, !tbaa !2
  br label %2

; <label>:2:                                      ; preds = %0, %5
  %indvars.iv = phi i64 [ 8, %0 ], [ %indvars.iv.next, %5 ]
  %mul10 = phi i32 [ %m.promoted, %0 ], [ %mul, %5 ]
  %arrayidx = getelementptr inbounds [9 x i32], ptr @a, i64 0, i64 %indvars.iv
  %3 = load i32, ptr %arrayidx, align 4, !tbaa !6
  %tobool = icmp eq i32 %3, 0
  br i1 %tobool, label %5, label %4

; <label>:4:                                      ; preds = %2
  %div = udiv i32 2, %3
  br label %5

; <label>:5:                                      ; preds = %2, %4
  %cond = phi i32 [ %div, %4 ], [ %conv4, %2 ]
  %mul = mul i32 %mul10, %cond
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %cmp = icmp eq i64 %indvars.iv.next, 0
  br i1 %cmp, label %6, label %2

; <label>:6:                                      ; preds = %5
  store i32 %mul, ptr @m, align 4, !tbaa !2
  ret i32 0
}

attributes #0 = { noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }


!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C++ TBAA"}
!6 = !{!7, !3, i64 0}
!7 = !{!"array@_ZTSA9_j", !3, i64 0}

