; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt %s -VPlanDriver -enable-new-vplan-predicator -disable-vplan-codegen -disable-output -vplan-print-after-linearization -enable-vp-value-codegen=0 -S | FileCheck %s --check-prefixes=CHECK,CHECK-LLVM
; RUN: opt %s -VPlanDriver -enable-new-vplan-predicator -disable-vplan-codegen -disable-output -vplan-print-after-linearization -enable-vp-value-codegen=1 -S | FileCheck %s --check-prefixes=CHECK,CHECK-VPVALUE
; REQUIRES: asserts

; Verify New VPlan predicator: if with two nested if-else statements.
; 1. icx test.c -o test_noopt.ll -fopenmp -Qoption,c,-fintel-openmp -O0 -restrict -S -emit-llvm
; 2. opt test_noopt.ll -O2 -debug-pass=Arguments
; 3. opt test_noopt.ll -S -o pred_if_else.ll -loopopt=false (+ all the flags from -O2 from #2, but -VPODirectiveCleanup and -loop-unroll)

; void foo(int * restrict a, int * restrict b, int * restrict c, int N)
; {
;   int i;
; #pragma omp simd
;   for (i = 0; i < 300; i++) {
;
;     if (b[i] > 0) {
;       if (a[i] > 0)
;         b[i] = b[i] * 5;
;       else
;         a[i] = a[i] + 5;
;
;       c[i] = c[i] * N;
;
;       if (c[i] > 0)
;         a[i] = c[i] - a[i];
;       else
;         b[i] = a[i] * c[i];
;     }
;   }
; }


; ModuleID = 'pred_if_2x_if_else_noopt.ll'
source_filename = "pred_if_2x_if_else.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind
declare token @llvm.directive.region.entry()

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token)

; Function Attrs: noinline nounwind uwtable
define void @foo(i32* noalias nocapture %a, i32* noalias nocapture %b, i32* noalias nocapture %c, i32 %N) local_unnamed_addr #0 {
; CHECK-LABEL:  After predication and linearization
; CHECK-NEXT:    REGION: [[REGION0:region[0-9]+]] (BP: NULL)
; CHECK-NEXT:    [[BB0:BB[0-9]+]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB1:BB[0-9]+]]
; CHECK-NEXT:    no PREDECESSORS
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB1]] (BP: NULL) :
; CHECK-LLVM-NEXT:        <Empty Block>
; CHECK-VPVALUE-NEXT:     [DA: Divergent] i64 [[VP0:%.*]] = induction-init{add} i64 0 i64 1
; CHECK-VPVALUE-NEXT:     [DA: Uniform]   i64 [[VP1:%.*]] = induction-init-step{add} i64 1
; CHECK-NEXT:    SUCCESSORS(1):[[BB2:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB0]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB2]] (BP: NULL) :
; CHECK-LLVM-NEXT:     [DA: Divergent] i64 [[VP_INDVARS_IV:%.*]] = phi  [ i64 0, [[BB1]] ],  [ i64 [[VP_INDVARS_IV_NEXT:%.*]], [[BB3:BB[0-9]+]] ]
; CHECK-VPVALUE-NEXT:     [DA: Divergent] i64 [[VP_INDVARS_IV:%.*]] = phi  [ i64 [[VP0]], [[BB1]] ],  [ i64 [[VP_INDVARS_IV_NEXT:%.*]], [[BB3:BB[0-9]+]] ]
; CHECK-NEXT:     [DA: Divergent] i32* [[VP_ARRAYIDX:%.*]] = getelementptr inbounds i32* [[B0:%.*]] i64 [[VP_INDVARS_IV]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP2:%.*]] = load i32* [[VP_ARRAYIDX]]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_CMP1:%.*]] = icmp i32 [[VP2]] i32 0
; CHECK-NEXT:    SUCCESSORS(1):[[BB4:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(2): [[BB3]] [[BB1]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB4]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    SUCCESSORS(1):[[BB5:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB2]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB5]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP3:%.*]] = block-predicate i1 [[VP_CMP1]]
; CHECK-NEXT:     [DA: Divergent] i32* [[VP_ARRAYIDX3:%.*]] = getelementptr inbounds i32* [[A0:%.*]] i64 [[VP_INDVARS_IV]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP4:%.*]] = load i32* [[VP_ARRAYIDX3]]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_CMP4:%.*]] = icmp i32 [[VP4]] i32 0
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_CMP4_NOT:%.*]] = not i1 [[VP_CMP4]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB6:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB4]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB6]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_BB4_BR_VP_CMP4_NOT:%.*]] = and i1 [[VP_CMP1]] i1 [[VP_CMP4_NOT]]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_BB4_BR_VP_CMP4:%.*]] = and i1 [[VP_CMP1]] i1 [[VP_CMP4]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB7:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB5]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB7]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP5:%.*]] = block-predicate i1 [[VP_BB4_BR_VP_CMP4_NOT]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_ADD:%.*]] = add i32 [[VP4]] i32 5
; CHECK-NEXT:     [DA: Divergent] store i32 [[VP_ADD]] i32* [[VP_ARRAYIDX3]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB8:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB6]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB8]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP6:%.*]] = block-predicate i1 [[VP_BB4_BR_VP_CMP4]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_MUL:%.*]] = mul i32 [[VP2]] i32 5
; CHECK-NEXT:     [DA: Divergent] store i32 [[VP_MUL]] i32* [[VP_ARRAYIDX]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB9:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB7]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB9]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i32 [[VP7:%.*]] = phi  [ i32 [[VP_ADD]], [[BB7]] ],  [ i32 [[VP4]], [[BB8]] ]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP8:%.*]] = block-predicate i1 [[VP_CMP1]]
; CHECK-NEXT:     [DA: Divergent] i32* [[VP_ARRAYIDX15:%.*]] = getelementptr inbounds i32* [[C0:%.*]] i64 [[VP_INDVARS_IV]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP9:%.*]] = load i32* [[VP_ARRAYIDX15]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_MUL16:%.*]] = mul i32 [[VP9]] i32 [[N0:%.*]]
; CHECK-NEXT:     [DA: Divergent] store i32 [[VP_MUL16]] i32* [[VP_ARRAYIDX15]]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_CMP21:%.*]] = icmp i32 [[VP_MUL16]] i32 0
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_CMP21_NOT:%.*]] = not i1 [[VP_CMP21]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB10:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB8]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB10]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP10:%.*]] = block-predicate i1 [[VP_CMP1]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB11:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB9]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB11]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_BB16_BR_VP_CMP21_NOT:%.*]] = and i1 [[VP_CMP1]] i1 [[VP_CMP21_NOT]]
; CHECK-NEXT:     [DA: Divergent] i1 [[VP_BB16_BR_VP_CMP21:%.*]] = and i1 [[VP_CMP1]] i1 [[VP_CMP21]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB12:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB10]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB12]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP11:%.*]] = block-predicate i1 [[VP_BB16_BR_VP_CMP21_NOT]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_MUL34:%.*]] = mul i32 [[VP7]] i32 [[VP_MUL16]]
; CHECK-NEXT:     [DA: Divergent] store i32 [[VP_MUL34]] i32* [[VP_ARRAYIDX]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB13:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB11]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB13]] (BP: NULL) :
; CHECK-NEXT:     [DA: Divergent] i1 [[VP12:%.*]] = block-predicate i1 [[VP_BB16_BR_VP_CMP21]]
; CHECK-NEXT:     [DA: Divergent] i32 [[VP_SUB:%.*]] = sub i32 [[VP_MUL16]] i32 [[VP7]]
; CHECK-NEXT:     [DA: Divergent] store i32 [[VP_SUB]] i32* [[VP_ARRAYIDX3]]
; CHECK-NEXT:    SUCCESSORS(1):[[BB14:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB12]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB14]] (BP: NULL) :
; CHECK-LLVM-NEXT:        [DA: Divergent] i64 [[VP_INDVARS_IV_NEXT]] = add i64 [[VP_INDVARS_IV]] i64 1
; CHECK-VPVALUE-NEXT:     [DA: Divergent] i64 [[VP_INDVARS_IV_NEXT]] = add i64 [[VP_INDVARS_IV]] i64 [[VP1]]
; CHECK-NEXT:     [DA: Uniform]   i1 [[VP_EXITCOND:%.*]] = icmp i64 [[VP_INDVARS_IV_NEXT]] i64 300
; CHECK-NEXT:    SUCCESSORS(1):[[BB3]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB13]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB3]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:     Condition([[BB14]]): [DA: Uniform]   i1 [[VP_EXITCOND]] = icmp i64 [[VP_INDVARS_IV_NEXT]] i64 300
; CHECK-NEXT:    SUCCESSORS(2):[[BB15:BB[0-9]+]](i1 [[VP_EXITCOND]]), [[BB2]](!i1 [[VP_EXITCOND]])
; CHECK-NEXT:    PREDECESSORS(1): [[BB14]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB15]] (BP: NULL) :
; CHECK-LLVM-NEXT:        <Empty Block>
; CHECK-VPVALUE-NEXT:     [DA: Uniform]   i64 [[VP13:%.*]] = induction-final{add} i64 0 i64 1
; CHECK-NEXT:    SUCCESSORS(1):[[BB16:BB[0-9]+]]
; CHECK-NEXT:    PREDECESSORS(1): [[BB3]]
; CHECK-EMPTY:
; CHECK-NEXT:    [[BB16]] (BP: NULL) :
; CHECK-NEXT:     <Empty Block>
; CHECK-NEXT:    no SUCCESSORS
; CHECK-NEXT:    PREDECESSORS(1): [[BB15]]
; CHECK-EMPTY:
; CHECK-NEXT:    END Region([[REGION0]])
;
entry:
  %tok = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
  br label %for.body

for.body:                                         ; preds = %for.inc, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.inc ]
  %arrayidx = getelementptr inbounds i32, i32* %b, i64 %indvars.iv
  %0 = load i32, i32* %arrayidx, align 4
  %cmp1 = icmp sgt i32 %0, 0
  br i1 %cmp1, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body
  %arrayidx3 = getelementptr inbounds i32, i32* %a, i64 %indvars.iv
  %1 = load i32, i32* %arrayidx3, align 4
  %cmp4 = icmp sgt i32 %1, 0
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.then
  %mul = mul nsw i32 %0, 5
  store i32 %mul, i32* %arrayidx, align 4
  br label %if.end

if.else:                                          ; preds = %if.then
  %add = add nsw i32 %1, 5
  store i32 %add, i32* %arrayidx3, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then5
  %2 = phi i32 [ %add, %if.else ], [ %1, %if.then5 ]
  %arrayidx15 = getelementptr inbounds i32, i32* %c, i64 %indvars.iv
  %3 = load i32, i32* %arrayidx15, align 4
  %mul16 = mul nsw i32 %3, %N
  store i32 %mul16, i32* %arrayidx15, align 4
  %cmp21 = icmp sgt i32 %mul16, 0
  br i1 %cmp21, label %if.then22, label %if.else29

if.then22:                                        ; preds = %if.end
  %sub = sub nsw i32 %mul16, %2
  store i32 %sub, i32* %arrayidx3, align 4
  br label %for.inc

if.else29:                                        ; preds = %if.end
  %mul34 = mul nsw i32 %2, %mul16
  store i32 %mul34, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.else29, %if.then22
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 300
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc
  call void @llvm.directive.region.exit(token %tok) [ "DIR.OMP.END.SIMD"()]
  ret void
}

attributes #0 = { noinline nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
