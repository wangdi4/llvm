; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -enable-new-pm=0 -dpcpp-kernel-builtin-call-to-inst -S %s -enable-debugify -disable-output 2>&1 | FileCheck -check-prefix=DEBUGIFY %s
; RUN: opt -passes=dpcpp-kernel-builtin-call-to-inst -S %s -enable-debugify -disable-output 2>&1 | FileCheck -check-prefix=DEBUGIFY %s
; RUN: opt -enable-new-pm=0 -dpcpp-kernel-builtin-call-to-inst -S %s | FileCheck %s
; RUN: opt -passes=dpcpp-kernel-builtin-call-to-inst -S %s | FileCheck %s

define void @test_half(half %x) {
; CHECK-LABEL: @test_half(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = bitcast half [[X:%.*]] to i16
; CHECK-NEXT:    [[TMP1:%.*]] = icmp slt i16 [[TMP0]], 0
; CHECK-NEXT:    [[TMP2:%.*]] = zext i1 [[TMP1]] to i32
; CHECK-NEXT:    ret void
;
entry:
  %call = call i32 @_Z7signbitDh(half %x)
  ret void
}

declare i32 @_Z7signbitDh(half)

define void @test_half64(<64 x half> %x) {
; CHECK-LABEL: @test_half64(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x half> [[X:%.*]] to <64 x i16>
; CHECK-NEXT:    [[TMP1:%.*]] = icmp slt <64 x i16> [[TMP0]], zeroinitializer
; CHECK-NEXT:    [[TMP2:%.*]] = sext <64 x i1> [[TMP1]] to <64 x i16>
; CHECK-NEXT:    ret void
;
entry:
  %call = call <64 x i16> @_Z7signbitDv64_Dh(<64 x half> %x)
  ret void
}

declare <64 x i16> @_Z7signbitDv64_Dh(<64 x half>)

define void @test_float(float %x) {
; CHECK-LABEL: @test_float(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = bitcast float [[X:%.*]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = icmp slt i32 [[TMP0]], 0
; CHECK-NEXT:    [[TMP2:%.*]] = zext i1 [[TMP1]] to i32
; CHECK-NEXT:    ret void
;
entry:
  %call = call i32 @_Z7signbitf(float %x)
  ret void
}

declare i32 @_Z7signbitf(float)

define void @test_float64(<64 x float> %x) {
; CHECK-LABEL: @test_float64(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x float> [[X:%.*]] to <64 x i32>
; CHECK-NEXT:    [[TMP1:%.*]] = icmp slt <64 x i32> [[TMP0]], zeroinitializer
; CHECK-NEXT:    [[TMP2:%.*]] = sext <64 x i1> [[TMP1]] to <64 x i32>
; CHECK-NEXT:    ret void
;
entry:
  %call = call <64 x i32> @_Z7signbitDv64_f(<64 x float> %x)
  ret void
}

declare <64 x i32> @_Z7signbitDv64_f(<64 x float>)

define void @test_double(double %x) {
; CHECK-LABEL: @test_double(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = bitcast double [[X:%.*]] to i64
; CHECK-NEXT:    [[TMP1:%.*]] = icmp slt i64 [[TMP0]], 0
; CHECK-NEXT:    [[TMP2:%.*]] = zext i1 [[TMP1]] to i32
; CHECK-NEXT:    ret void
;
entry:
  %call = call i32 @_Z7signbitd(double %x)
  ret void
}

declare i32 @_Z7signbitd(double)

define void @test_double64(<64 x double> %x) {
; CHECK-LABEL: @test_double64(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = bitcast <64 x double> [[X:%.*]] to <64 x i64>
; CHECK-NEXT:    [[TMP1:%.*]] = icmp slt <64 x i64> [[TMP0]], zeroinitializer
; CHECK-NEXT:    [[TMP2:%.*]] = sext <64 x i1> [[TMP1]] to <64 x i64>
; CHECK-NEXT:    ret void
;
entry:
  %call = call <64 x i64> @_Z7signbitDv64_d(<64 x double> %x)
  ret void
}

declare <64 x i64> @_Z7signbitDv64_d(<64 x double>)

; DEBUGIFY-NOT: WARNING
