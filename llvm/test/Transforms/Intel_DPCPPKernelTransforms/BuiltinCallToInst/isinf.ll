; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; XFAIL: *

; RUN: opt -enable-new-pm=0 -dpcpp-kernel-builtin-call-to-inst -S %s -enable-debugify -disable-output 2>&1 | FileCheck -check-prefix=DEBUGIFY %s
; RUN: opt -passes=dpcpp-kernel-builtin-call-to-inst -S %s -enable-debugify -disable-output 2>&1 | FileCheck -check-prefix=DEBUGIFY %s
; RUN: opt -enable-new-pm=0 -dpcpp-kernel-builtin-call-to-inst -S %s | FileCheck %s
; RUN: opt -passes=dpcpp-kernel-builtin-call-to-inst -S %s | FileCheck %s

; The hex representation of '516' is 0x204, which stands for
; 0x4 (fcNegInf) | 0x200 (fcPosInf)

define void @test_half(half %x) {
; CHECK-LABEL: @test_half(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = call i1 @llvm.is.fpclass.f16(half [[X:%.*]], i32 516)
; CHECK-NEXT:    [[TMP1:%.*]] = zext i1 [[TMP0]] to i32
; CHECK-NEXT:    ret void
;
entry:
  %call = call i32 @_Z5isinfDh(half %x)
  ret void
}

declare i32 @_Z5isinfDh(half)

define void @test_half64(<64 x half> %x) {
; CHECK-LABEL: @test_half64(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = call <64 x i1> @llvm.is.fpclass.v64f16(<64 x half> [[X:%.*]], i32 516)
; CHECK-NEXT:    [[TMP1:%.*]] = sext <64 x i1> [[TMP0]] to <64 x i16>
; CHECK-NEXT:    ret void
;
entry:
  %call = call <64 x i16> @_Z5isinfDv64_Dh(<64 x half> %x)
  ret void
}

declare <64 x i16> @_Z5isinfDv64_Dh(<64 x half>)

define void @test_float(float %x) {
; CHECK-LABEL: @test_float(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = call i1 @llvm.is.fpclass.f32(float [[X:%.*]], i32 516)
; CHECK-NEXT:    [[TMP1:%.*]] = zext i1 [[TMP0]] to i32
; CHECK-NEXT:    ret void
;
entry:
  %call = call i32 @_Z5isinff(float %x)
  ret void
}

declare i32 @_Z5isinff(float)

define void @test_float64(<64 x float> %x) {
; CHECK-LABEL: @test_float64(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = call <64 x i1> @llvm.is.fpclass.v64f32(<64 x float> [[X:%.*]], i32 516)
; CHECK-NEXT:    [[TMP1:%.*]] = sext <64 x i1> [[TMP0]] to <64 x i32>
; CHECK-NEXT:    ret void
;
entry:
  %call = call <64 x i32> @_Z5isinfDv64_f(<64 x float> %x)
  ret void
}

declare <64 x i32> @_Z5isinfDv64_f(<64 x float>)

define void @test_double(double %x) {
; CHECK-LABEL: @test_double(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = call i1 @llvm.is.fpclass.f64(double [[X:%.*]], i32 516)
; CHECK-NEXT:    [[TMP1:%.*]] = zext i1 [[TMP0]] to i32
; CHECK-NEXT:    ret void
;
entry:
  %call = call i32 @_Z5isinfd(double %x)
  ret void
}

declare i32 @_Z5isinfd(double)

define void @test_double64(<64 x double> %x) {
; CHECK-LABEL: @test_double64(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = call <64 x i1> @llvm.is.fpclass.v64f64(<64 x double> [[X:%.*]], i32 516)
; CHECK-NEXT:    [[TMP1:%.*]] = sext <64 x i1> [[TMP0]] to <64 x i64>
; CHECK-NEXT:    ret void
;
entry:
  %call = call <64 x i64> @_Z5isinfDv64_d(<64 x double> %x)
  ret void
}

declare <64 x i64> @_Z5isinfDv64_d(<64 x double>)

; DEBUGIFY-NOT: WARNING
