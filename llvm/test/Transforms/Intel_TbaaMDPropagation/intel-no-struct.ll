; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -opaque-pointers -tbaa-prop -S %s | FileCheck %s

define void @foo(ptr %p) {
; CHECK-LABEL: @foo(
; CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[P:%.*]], align 8, !tbaa [[TBAA0:![0-9]+]]
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[P]], align 8, !tbaa [[TBAA4:![0-9]+]]
; CHECK-NEXT:    ret void
;
; The TBAA MD for struct should be removed after the fakeload is removed.
; CHECK-NOT: !{{[0-9]+}} = {{.*}}struct

  %1 = call ptr @llvm.intel.fakeload.p0(ptr %p, metadata !0)
  %2 = load ptr, ptr %1, align 8, !tbaa !6
  %3 = load i32, ptr %1, align 8, !tbaa !7
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare ptr @llvm.intel.fakeload.p0(ptr, metadata) #4

attributes #0 = { nounwind }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { inaccessiblememonly nofree nosync nounwind willreturn }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { nounwind readnone speculatable }

; CHECK-DAG: [[TBAA_PTR:![0-9]+]]{{.*}}pointer
; CHECK-DAG: [[TBAA_INT:![0-9]+]]{{.*}}int
; CHECK-DAG: [[TBAA0]] = !{[[TBAA_PTR]], [[TBAA_PTR]]
; CHECK-DAG: [[TBAA4]] = !{[[TBAA_INT]], [[TBAA_INT]]
!0 = !{!1, !1, i64 0}
!1 = !{!"struct", !2, i64 0, !2, i64 4}
!2 = !{!"int", !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C++ TBAA"}
!5 = !{!"pointer@char", !3, i64 0}
!6 = !{!5, !5, i64 0}
!7 = !{!2, !2, i64 0}
