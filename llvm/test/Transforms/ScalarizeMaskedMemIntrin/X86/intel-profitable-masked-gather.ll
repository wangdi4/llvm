; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -opaque-pointers=0 -passes="scalarize-masked-mem-intrin" %s -S -mtriple=x86_64-unknown-unknown -mcpu=core-avx2 | FileCheck %s

define <8 x float> @test(<8 x float*> %mm_vectorGEP, <8 x i1> %x) {
; CHECK-LABEL: @test(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = call <8 x float> @llvm.masked.gather.v8f32.v8p0f32(<8 x float*> [[MM_VECTORGEP:%.*]], i32 4, <8 x i1> [[X:%.*]], <8 x float> undef)
; CHECK-NEXT:    ret <8 x float> [[TMP0]]
;
entry:
  %0 = call <8 x float> @llvm.masked.gather.v8f32.v8p0f32(<8 x float*> %mm_vectorGEP, i32 4, <8 x i1> %x, <8 x float> undef)
  ret <8 x float> %0
}

define <8 x float> @test2(<8 x float*> %mm_vectorGEP) {
; CHECK-LABEL: @test2(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[PTR0:%.*]] = extractelement <8 x float*> [[MM_VECTORGEP:%.*]], i64 0
; CHECK-NEXT:    [[LOAD0:%.*]] = load float, float* [[PTR0]], align 4
; CHECK-NEXT:    [[RES0:%.*]] = insertelement <8 x float> undef, float [[LOAD0]], i64 0
; CHECK-NEXT:    [[PTR1:%.*]] = extractelement <8 x float*> [[MM_VECTORGEP]], i64 1
; CHECK-NEXT:    [[LOAD1:%.*]] = load float, float* [[PTR1]], align 4
; CHECK-NEXT:    [[RES1:%.*]] = insertelement <8 x float> [[RES0]], float [[LOAD1]], i64 1
; CHECK-NEXT:    [[PTR2:%.*]] = extractelement <8 x float*> [[MM_VECTORGEP]], i64 2
; CHECK-NEXT:    [[LOAD2:%.*]] = load float, float* [[PTR2]], align 4
; CHECK-NEXT:    [[RES2:%.*]] = insertelement <8 x float> [[RES1]], float [[LOAD2]], i64 2
; CHECK-NEXT:    [[PTR3:%.*]] = extractelement <8 x float*> [[MM_VECTORGEP]], i64 3
; CHECK-NEXT:    [[LOAD3:%.*]] = load float, float* [[PTR3]], align 4
; CHECK-NEXT:    [[RES3:%.*]] = insertelement <8 x float> [[RES2]], float [[LOAD3]], i64 3
; CHECK-NEXT:    [[PTR4:%.*]] = extractelement <8 x float*> [[MM_VECTORGEP]], i64 4
; CHECK-NEXT:    [[LOAD4:%.*]] = load float, float* [[PTR4]], align 4
; CHECK-NEXT:    [[RES4:%.*]] = insertelement <8 x float> [[RES3]], float [[LOAD4]], i64 4
; CHECK-NEXT:    [[PTR5:%.*]] = extractelement <8 x float*> [[MM_VECTORGEP]], i64 5
; CHECK-NEXT:    [[LOAD5:%.*]] = load float, float* [[PTR5]], align 4
; CHECK-NEXT:    [[RES5:%.*]] = insertelement <8 x float> [[RES4]], float [[LOAD5]], i64 5
; CHECK-NEXT:    [[PTR6:%.*]] = extractelement <8 x float*> [[MM_VECTORGEP]], i64 6
; CHECK-NEXT:    [[LOAD6:%.*]] = load float, float* [[PTR6]], align 4
; CHECK-NEXT:    [[RES6:%.*]] = insertelement <8 x float> [[RES5]], float [[LOAD6]], i64 6
; CHECK-NEXT:    [[PTR7:%.*]] = extractelement <8 x float*> [[MM_VECTORGEP]], i64 7
; CHECK-NEXT:    [[LOAD7:%.*]] = load float, float* [[PTR7]], align 4
; CHECK-NEXT:    [[RES7:%.*]] = insertelement <8 x float> [[RES6]], float [[LOAD7]], i64 7
; CHECK-NEXT:    ret <8 x float> [[RES7]]
;
entry:
  %0 = call <8 x float> @llvm.masked.gather.v8f32.v8p0f32(<8 x float*> %mm_vectorGEP, i32 4, <8 x i1> <i1 1, i1 1, i1 1, i1 1, i1 1, i1 1, i1 1, i1 1>, <8 x float> undef)
  ret <8 x float> %0
}

define <4 x float> @test3(<4 x float*> %mm_vectorGEP, <4 x i1> %x) {
; CHECK-LABEL: @test3(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = call <4 x float> @llvm.masked.gather.v4f32.v4p0f32(<4 x float*> [[MM_VECTORGEP:%.*]], i32 4, <4 x i1> [[X:%.*]], <4 x float> undef)
; CHECK-NEXT:    ret <4 x float> [[TMP0]]
;
entry:
  %0 = call <4 x float> @llvm.masked.gather.v4f32.v4p0f32(<4 x float*> %mm_vectorGEP, i32 4, <4 x i1> %x, <4 x float> undef)
  ret <4 x float> %0
}

define <4 x float> @test4(<4 x float*> %mm_vectorGEP) {
; CHECK-LABEL: @test4(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[PTR0:%.*]] = extractelement <4 x float*> [[MM_VECTORGEP:%.*]], i64 0
; CHECK-NEXT:    [[LOAD0:%.*]] = load float, float* [[PTR0]], align 4
; CHECK-NEXT:    [[RES0:%.*]] = insertelement <4 x float> undef, float [[LOAD0]], i64 0
; CHECK-NEXT:    [[PTR1:%.*]] = extractelement <4 x float*> [[MM_VECTORGEP]], i64 1
; CHECK-NEXT:    [[LOAD1:%.*]] = load float, float* [[PTR1]], align 4
; CHECK-NEXT:    [[RES1:%.*]] = insertelement <4 x float> [[RES0]], float [[LOAD1]], i64 1
; CHECK-NEXT:    [[PTR2:%.*]] = extractelement <4 x float*> [[MM_VECTORGEP]], i64 2
; CHECK-NEXT:    [[LOAD2:%.*]] = load float, float* [[PTR2]], align 4
; CHECK-NEXT:    [[RES2:%.*]] = insertelement <4 x float> [[RES1]], float [[LOAD2]], i64 2
; CHECK-NEXT:    [[PTR3:%.*]] = extractelement <4 x float*> [[MM_VECTORGEP]], i64 3
; CHECK-NEXT:    [[LOAD3:%.*]] = load float, float* [[PTR3]], align 4
; CHECK-NEXT:    [[RES3:%.*]] = insertelement <4 x float> [[RES2]], float [[LOAD3]], i64 3
; CHECK-NEXT:    ret <4 x float> [[RES3]]
;
entry:
  %0 = call <4 x float> @llvm.masked.gather.v4f32.v4p0f32(<4 x float*> %mm_vectorGEP, i32 4, <4 x i1> <i1 1, i1 1, i1 1, i1 1>, <4 x float> undef)
  ret <4 x float> %0
}

declare <4 x float> @llvm.masked.gather.v4f32.v4p0f32(<4 x float*>, i32 immarg, <4 x i1>, <4 x float>)
declare <8 x float> @llvm.masked.gather.v8f32.v8p0f32(<8 x float*>, i32 immarg, <8 x i1>, <8 x float>)
