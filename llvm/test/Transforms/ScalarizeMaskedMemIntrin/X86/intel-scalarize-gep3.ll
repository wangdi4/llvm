; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S -enable-intel-advanced-opts -passes=scalarize-masked-mem-intrin -mtriple=x86_64-unknown-unknown -mattr=+avx2 < %s | FileCheck %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: argmemonly nofree nosync nounwind uwtable
define void @mm_mp_gentrs_(ptr noalias nocapture readonly dereferenceable(4) %PTRST, ptr noalias nocapture readonly dereferenceable(4) %NCLS, ptr noalias nocapture writeonly dereferenceable(4) %RPICT) local_unnamed_addr #0 {
; CHECK-LABEL: @mm_mp_gentrs_(
; CHECK-NEXT:  alloca_1:
; CHECK-NEXT:    [[NCLS_FETCH_1:%.*]] = load i32, ptr [[NCLS:%.*]], align 1
; CHECK-NEXT:    [[INT_SEXT:%.*]] = sext i32 [[NCLS_FETCH_1]] to i64
; CHECK-NEXT:    [[MUL_1:%.*]] = shl nsw i64 [[INT_SEXT]], 2
; CHECK-NEXT:    [[REL_1:%.*]] = icmp slt i32 [[NCLS_FETCH_1]], 2
; CHECK-NEXT:    br i1 [[REL_1]], label [[BB3:%.*]], label [[BB2_PREHEADER:%.*]]
; CHECK:       bb2.preheader:
; CHECK-NEXT:    [[TMP0:%.*]] = zext i32 [[NCLS_FETCH_1]] to i64
; CHECK-NEXT:    [[TMP1:%.*]] = add nsw i64 [[TMP0]], -1
; CHECK-NEXT:    [[TMP2:%.*]] = and i64 [[TMP1]], -2
; CHECK-NEXT:    [[EXTRACT_0_20:%.*]] = icmp eq i64 [[TMP2]], 0
; CHECK-NEXT:    br i1 [[EXTRACT_0_20]], label [[HIR_L_24:%.*]], label [[LOOP_16_PREHEADER:%.*]]
; CHECK:       loop.16.preheader:
; CHECK-NEXT:    br label [[LOOP_16:%.*]]
; CHECK:       bb3:
; CHECK-NEXT:    ret void
; CHECK:       hir.L.24:
; CHECK-NEXT:    [[T20_0:%.*]] = phi i64 [ 0, [[BB2_PREHEADER]] ], [ [[TMP2]], [[AFTERLOOP_16:%.*]] ]
; CHECK-NEXT:    [[TMP3:%.*]] = add nsw i64 [[TMP0]], -2
; CHECK-NEXT:    br label [[LOOP_51:%.*]]
; CHECK:       loop.16:
; CHECK-NEXT:    [[I1_I64_0:%.*]] = phi i64 [ [[NEXTIVLOOP_16:%.*]], [[LOOP_16]] ], [ 0, [[LOOP_16_PREHEADER]] ]
; CHECK-NEXT:    [[TMP5:%.*]] = add i64 [[I1_I64_0]], 1
; CHECK-NEXT:    [[TMP6:%.*]] = mul i64 [[MUL_1]], [[TMP5]]
; CHECK-NEXT:    [[PTR0:%.*]] = getelementptr i8, ptr [[PTRST:%.*]], i64 [[TMP6]]
; CHECK-NEXT:    [[TMP7:%.*]] = add i64 [[I1_I64_0]], 1
; CHECK-NEXT:    [[PTR01:%.*]] = getelementptr float, ptr [[PTR0]], i64 [[TMP7]]
; CHECK-NEXT:    [[LOAD0:%.*]] = load float, ptr [[PTR01]], align 1
; CHECK-NEXT:    [[RES0:%.*]] = insertelement <2 x float> undef, float [[LOAD0]], i64 0
; CHECK-NEXT:    [[TMP10:%.*]] = add i64 [[I1_I64_0]], 2
; CHECK-NEXT:    [[TMP11:%.*]] = mul i64 [[MUL_1]], [[TMP10]]
; CHECK-NEXT:    [[PTR1:%.*]] = getelementptr i8, ptr [[PTRST]], i64 [[TMP11]]
; CHECK-NEXT:    [[TMP12:%.*]] = add i64 [[I1_I64_0]], 2
; CHECK-NEXT:    [[PTR12:%.*]] = getelementptr float, ptr [[PTR1]], i64 [[TMP12]]
; CHECK-NEXT:    [[LOAD1:%.*]] = load float, ptr [[PTR12]], align 1
; CHECK-NEXT:    [[RES1:%.*]] = insertelement <2 x float> [[RES0]], float [[LOAD1]], i64 1
; CHECK-NEXT:    [[TMP14:%.*]] = add nuw nsw i64 [[I1_I64_0]], 1
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr inbounds float, ptr [[RPICT:%.*]], i64 [[TMP14]]
; CHECK-NEXT:    [[TMP16:%.*]] = bitcast ptr [[TMP15]] to ptr
; CHECK-NEXT:    store <2 x float> [[RES1]], ptr [[TMP16]], align 1
; CHECK-NEXT:    [[NEXTIVLOOP_16]] = add nuw nsw i64 [[I1_I64_0]], 2
; CHECK-NEXT:    [[CONDLOOP_16_NOT_NOT:%.*]] = icmp slt i64 [[NEXTIVLOOP_16]], [[TMP2]]
; CHECK-NEXT:    br i1 [[CONDLOOP_16_NOT_NOT]], label [[LOOP_16]], label [[AFTERLOOP_16]]
; CHECK:       afterloop.16:
; CHECK-NEXT:    [[EXTRACT_0_1839:%.*]] = icmp eq i64 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    br i1 [[EXTRACT_0_1839]], label [[BB3]], label [[HIR_L_24]]
; CHECK:       loop.51:
; CHECK-NEXT:    [[I1_I64_1:%.*]] = phi i64 [ [[T20_0]], [[HIR_L_24]] ], [ [[TMP17:%.*]], [[LOOP_51]] ]
; CHECK-NEXT:    [[TMP17]] = add i64 [[I1_I64_1]], 1
; CHECK-NEXT:    [[TMP18:%.*]] = getelementptr inbounds float, ptr [[RPICT]], i64 [[TMP17]]
; CHECK-NEXT:    [[TMP19:%.*]] = mul nsw i64 [[TMP17]], [[INT_SEXT]]
; CHECK-NEXT:    [[TMP20:%.*]] = getelementptr inbounds float, ptr [[PTRST]], i64 [[TMP19]]
; CHECK-NEXT:    [[TMP21:%.*]] = getelementptr inbounds float, ptr [[TMP20]], i64 [[TMP17]]
; CHECK-NEXT:    [[GEPLOAD:%.*]] = load float, ptr [[TMP21]], align 1
; CHECK-NEXT:    store float [[GEPLOAD]], ptr [[TMP18]], align 1
; CHECK-NEXT:    [[CONDLOOP_51_NOT:%.*]] = icmp eq i64 [[I1_I64_1]], [[TMP3]]
; CHECK-NEXT:    br i1 [[CONDLOOP_51_NOT]], label [[BB3]], label [[LOOP_51]]
;
alloca_1:
  %NCLS_fetch.1 = load i32, ptr %NCLS, align 1
  %int_sext = sext i32 %NCLS_fetch.1 to i64
  %mul.1 = shl nsw i64 %int_sext, 2
  %rel.1 = icmp slt i32 %NCLS_fetch.1, 2
  br i1 %rel.1, label %bb3, label %bb2.preheader

bb2.preheader:                                    ; preds = %alloca_1
  %0 = zext i32 %NCLS_fetch.1 to i64
  %1 = add nsw i64 %0, -1
  %2 = and i64 %1, -2
  %extract.0.20 = icmp eq i64 %2, 0
  br i1 %extract.0.20, label %hir.L.24, label %loop.16.preheader

loop.16.preheader:                                ; preds = %bb2.preheader
  %.splatinsert22 = insertelement <2 x ptr> poison, ptr %PTRST, i64 0
  %.splatinsert27 = insertelement <2 x i64> poison, i64 %mul.1, i64 0
  %.splat28 = shufflevector <2 x i64> %.splatinsert27, <2 x i64> poison, <2 x i32> zeroinitializer
  %3 = bitcast <2 x ptr> %.splatinsert22 to <2 x ptr>
  %4 = shufflevector <2 x ptr> %3, <2 x ptr> poison, <2 x i32> zeroinitializer
  br label %loop.16

bb3:                                              ; preds = %loop.51, %afterloop.16, %alloca_1
  ret void

hir.L.24:                                         ; preds = %afterloop.16, %bb2.preheader
  %t20.0 = phi i64 [ 0, %bb2.preheader ], [ %2, %afterloop.16 ]
  %5 = add nsw i64 %0, -2
  br label %loop.51

loop.16:                                          ; preds = %loop.16.preheader, %loop.16
  %i1.i64.0 = phi i64 [ %nextivloop.16, %loop.16 ], [ 0, %loop.16.preheader ]
  %.splatinsert24 = insertelement <2 x i64> poison, i64 %i1.i64.0, i64 0
  %.splat25 = shufflevector <2 x i64> %.splatinsert24, <2 x i64> poison, <2 x i32> zeroinitializer
  %6 = add nuw <2 x i64> %.splat25, <i64 1, i64 2>
  %7 = mul nsw <2 x i64> %.splat28, %6
  %8 = getelementptr inbounds i8, <2 x ptr> %4, <2 x i64> %7
  %9 = bitcast <2 x ptr> %8 to <2 x ptr>
  %10 = getelementptr inbounds float, <2 x ptr> %9, <2 x i64> %6
  %11 = call <2 x float> @llvm.masked.gather.v2f32.v2p0(<2 x ptr> %10, i32 1, <2 x i1> <i1 true, i1 true>, <2 x float> undef)
  %12 = add nuw nsw i64 %i1.i64.0, 1
  %13 = getelementptr inbounds float, ptr %RPICT, i64 %12
  %14 = bitcast ptr %13 to ptr
  store <2 x float> %11, ptr %14, align 1
  %nextivloop.16 = add nuw nsw i64 %i1.i64.0, 2
  %condloop.16.not.not = icmp slt i64 %nextivloop.16, %2
  br i1 %condloop.16.not.not, label %loop.16, label %afterloop.16

afterloop.16:                                     ; preds = %loop.16
  %extract.0.1839 = icmp eq i64 %1, %2
  br i1 %extract.0.1839, label %bb3, label %hir.L.24

loop.51:                                          ; preds = %loop.51, %hir.L.24
  %i1.i64.1 = phi i64 [ %t20.0, %hir.L.24 ], [ %15, %loop.51 ]
  %15 = add i64 %i1.i64.1, 1
  %16 = getelementptr inbounds float, ptr %RPICT, i64 %15
  %17 = mul nsw i64 %15, %int_sext
  %18 = getelementptr inbounds float, ptr %PTRST, i64 %17
  %19 = getelementptr inbounds float, ptr %18, i64 %15
  %gepload = load float, ptr %19, align 1
  store float %gepload, ptr %16, align 1
  %condloop.51.not = icmp eq i64 %i1.i64.1, %5
  br i1 %condloop.51.not, label %bb3, label %loop.51
}

; Function Attrs: nocallback nofree nosync nounwind readonly willreturn
declare <2 x float> @llvm.masked.gather.v2f32.v2p0(<2 x ptr>, i32 immarg, <2 x i1>, <2 x float>) #2

attributes #0 = { argmemonly nofree nosync nounwind uwtable "denormal-fp-math"="preserve_sign,preserve_sign" "frame-pointer"="none" "intel-lang"="fortran" "loopopt-pipeline"="full" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "target-cpu"="core-avx2" "target-features"="+avx,+avx2,+bmi,+bmi2,+crc32,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+rdrnd,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt" "unsafe-fp-math"="true" }
attributes #2 = { nocallback nofree nosync nounwind readonly willreturn }
