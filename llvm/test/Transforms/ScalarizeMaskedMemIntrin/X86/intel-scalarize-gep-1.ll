; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S -passes=scalarize-masked-mem-intrin -mtriple=x86_64-unknown-unknown -mattr=+avx2 < %s | FileCheck %s

define <16 x i16> @test_gather(<16 x i16>* %0, i16* %map) {
; CHECK-LABEL: @test_gather(
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast <16 x i16>* [[TMP0:%.*]] to i16*
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i16, i16* [[TMP2]], i32 0
; CHECK-NEXT:    [[TMP4:%.*]] = load i16, i16* [[TMP3]], align 2
; CHECK-NEXT:    [[TMP5:%.*]] = sext i16 [[TMP4]] to i64
; CHECK-NEXT:    [[TMP6:%.*]] = add i64 [[TMP5]], 32768
; CHECK-NEXT:    [[PTR0:%.*]] = getelementptr i16, i16* [[MAP:%.*]], i64 [[TMP6]]
; CHECK-NEXT:    [[LOAD0:%.*]] = load i16, i16* [[PTR0]], align 2
; CHECK-NEXT:    [[RES0:%.*]] = insertelement <16 x i16> undef, i16 [[LOAD0]], i64 0
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast <16 x i16>* [[TMP0]] to i16*
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i16, i16* [[TMP7]], i32 1
; CHECK-NEXT:    [[TMP9:%.*]] = load i16, i16* [[TMP8]], align 2
; CHECK-NEXT:    [[TMP10:%.*]] = sext i16 [[TMP9]] to i64
; CHECK-NEXT:    [[TMP11:%.*]] = add i64 [[TMP10]], 32768
; CHECK-NEXT:    [[PTR1:%.*]] = getelementptr i16, i16* [[MAP]], i64 [[TMP11]]
; CHECK-NEXT:    [[LOAD1:%.*]] = load i16, i16* [[PTR1]], align 2
; CHECK-NEXT:    [[RES1:%.*]] = insertelement <16 x i16> [[RES0]], i16 [[LOAD1]], i64 1
; CHECK-NEXT:    [[TMP12:%.*]] = bitcast <16 x i16>* [[TMP0]] to i16*
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i16, i16* [[TMP12]], i32 2
; CHECK-NEXT:    [[TMP14:%.*]] = load i16, i16* [[TMP13]], align 2
; CHECK-NEXT:    [[TMP15:%.*]] = sext i16 [[TMP14]] to i64
; CHECK-NEXT:    [[TMP16:%.*]] = add i64 [[TMP15]], 32768
; CHECK-NEXT:    [[PTR2:%.*]] = getelementptr i16, i16* [[MAP]], i64 [[TMP16]]
; CHECK-NEXT:    [[LOAD2:%.*]] = load i16, i16* [[PTR2]], align 2
; CHECK-NEXT:    [[RES2:%.*]] = insertelement <16 x i16> [[RES1]], i16 [[LOAD2]], i64 2
; CHECK-NEXT:    [[TMP17:%.*]] = bitcast <16 x i16>* [[TMP0]] to i16*
; CHECK-NEXT:    [[TMP18:%.*]] = getelementptr i16, i16* [[TMP17]], i32 3
; CHECK-NEXT:    [[TMP19:%.*]] = load i16, i16* [[TMP18]], align 2
; CHECK-NEXT:    [[TMP20:%.*]] = sext i16 [[TMP19]] to i64
; CHECK-NEXT:    [[TMP21:%.*]] = add i64 [[TMP20]], 32768
; CHECK-NEXT:    [[PTR3:%.*]] = getelementptr i16, i16* [[MAP]], i64 [[TMP21]]
; CHECK-NEXT:    [[LOAD3:%.*]] = load i16, i16* [[PTR3]], align 2
; CHECK-NEXT:    [[RES3:%.*]] = insertelement <16 x i16> [[RES2]], i16 [[LOAD3]], i64 3
; CHECK-NEXT:    [[TMP22:%.*]] = bitcast <16 x i16>* [[TMP0]] to i16*
; CHECK-NEXT:    [[TMP23:%.*]] = getelementptr i16, i16* [[TMP22]], i32 4
; CHECK-NEXT:    [[TMP24:%.*]] = load i16, i16* [[TMP23]], align 2
; CHECK-NEXT:    [[TMP25:%.*]] = sext i16 [[TMP24]] to i64
; CHECK-NEXT:    [[TMP26:%.*]] = add i64 [[TMP25]], 32768
; CHECK-NEXT:    [[PTR4:%.*]] = getelementptr i16, i16* [[MAP]], i64 [[TMP26]]
; CHECK-NEXT:    [[LOAD4:%.*]] = load i16, i16* [[PTR4]], align 2
; CHECK-NEXT:    [[RES4:%.*]] = insertelement <16 x i16> [[RES3]], i16 [[LOAD4]], i64 4
; CHECK-NEXT:    [[TMP27:%.*]] = bitcast <16 x i16>* [[TMP0]] to i16*
; CHECK-NEXT:    [[TMP28:%.*]] = getelementptr i16, i16* [[TMP27]], i32 5
; CHECK-NEXT:    [[TMP29:%.*]] = load i16, i16* [[TMP28]], align 2
; CHECK-NEXT:    [[TMP30:%.*]] = sext i16 [[TMP29]] to i64
; CHECK-NEXT:    [[TMP31:%.*]] = add i64 [[TMP30]], 32768
; CHECK-NEXT:    [[PTR5:%.*]] = getelementptr i16, i16* [[MAP]], i64 [[TMP31]]
; CHECK-NEXT:    [[LOAD5:%.*]] = load i16, i16* [[PTR5]], align 2
; CHECK-NEXT:    [[RES5:%.*]] = insertelement <16 x i16> [[RES4]], i16 [[LOAD5]], i64 5
; CHECK-NEXT:    [[TMP32:%.*]] = bitcast <16 x i16>* [[TMP0]] to i16*
; CHECK-NEXT:    [[TMP33:%.*]] = getelementptr i16, i16* [[TMP32]], i32 6
; CHECK-NEXT:    [[TMP34:%.*]] = load i16, i16* [[TMP33]], align 2
; CHECK-NEXT:    [[TMP35:%.*]] = sext i16 [[TMP34]] to i64
; CHECK-NEXT:    [[TMP36:%.*]] = add i64 [[TMP35]], 32768
; CHECK-NEXT:    [[PTR6:%.*]] = getelementptr i16, i16* [[MAP]], i64 [[TMP36]]
; CHECK-NEXT:    [[LOAD6:%.*]] = load i16, i16* [[PTR6]], align 2
; CHECK-NEXT:    [[RES6:%.*]] = insertelement <16 x i16> [[RES5]], i16 [[LOAD6]], i64 6
; CHECK-NEXT:    [[TMP37:%.*]] = bitcast <16 x i16>* [[TMP0]] to i16*
; CHECK-NEXT:    [[TMP38:%.*]] = getelementptr i16, i16* [[TMP37]], i32 7
; CHECK-NEXT:    [[TMP39:%.*]] = load i16, i16* [[TMP38]], align 2
; CHECK-NEXT:    [[TMP40:%.*]] = sext i16 [[TMP39]] to i64
; CHECK-NEXT:    [[TMP41:%.*]] = add i64 [[TMP40]], 32768
; CHECK-NEXT:    [[PTR7:%.*]] = getelementptr i16, i16* [[MAP]], i64 [[TMP41]]
; CHECK-NEXT:    [[LOAD7:%.*]] = load i16, i16* [[PTR7]], align 2
; CHECK-NEXT:    [[RES7:%.*]] = insertelement <16 x i16> [[RES6]], i16 [[LOAD7]], i64 7
; CHECK-NEXT:    [[TMP42:%.*]] = bitcast <16 x i16>* [[TMP0]] to i16*
; CHECK-NEXT:    [[TMP43:%.*]] = getelementptr i16, i16* [[TMP42]], i32 8
; CHECK-NEXT:    [[TMP44:%.*]] = load i16, i16* [[TMP43]], align 2
; CHECK-NEXT:    [[TMP45:%.*]] = sext i16 [[TMP44]] to i64
; CHECK-NEXT:    [[TMP46:%.*]] = add i64 [[TMP45]], 32768
; CHECK-NEXT:    [[PTR8:%.*]] = getelementptr i16, i16* [[MAP]], i64 [[TMP46]]
; CHECK-NEXT:    [[LOAD8:%.*]] = load i16, i16* [[PTR8]], align 2
; CHECK-NEXT:    [[RES8:%.*]] = insertelement <16 x i16> [[RES7]], i16 [[LOAD8]], i64 8
; CHECK-NEXT:    [[TMP47:%.*]] = bitcast <16 x i16>* [[TMP0]] to i16*
; CHECK-NEXT:    [[TMP48:%.*]] = getelementptr i16, i16* [[TMP47]], i32 9
; CHECK-NEXT:    [[TMP49:%.*]] = load i16, i16* [[TMP48]], align 2
; CHECK-NEXT:    [[TMP50:%.*]] = sext i16 [[TMP49]] to i64
; CHECK-NEXT:    [[TMP51:%.*]] = add i64 [[TMP50]], 32768
; CHECK-NEXT:    [[PTR9:%.*]] = getelementptr i16, i16* [[MAP]], i64 [[TMP51]]
; CHECK-NEXT:    [[LOAD9:%.*]] = load i16, i16* [[PTR9]], align 2
; CHECK-NEXT:    [[RES9:%.*]] = insertelement <16 x i16> [[RES8]], i16 [[LOAD9]], i64 9
; CHECK-NEXT:    [[TMP52:%.*]] = bitcast <16 x i16>* [[TMP0]] to i16*
; CHECK-NEXT:    [[TMP53:%.*]] = getelementptr i16, i16* [[TMP52]], i32 10
; CHECK-NEXT:    [[TMP54:%.*]] = load i16, i16* [[TMP53]], align 2
; CHECK-NEXT:    [[TMP55:%.*]] = sext i16 [[TMP54]] to i64
; CHECK-NEXT:    [[TMP56:%.*]] = add i64 [[TMP55]], 32768
; CHECK-NEXT:    [[PTR10:%.*]] = getelementptr i16, i16* [[MAP]], i64 [[TMP56]]
; CHECK-NEXT:    [[LOAD10:%.*]] = load i16, i16* [[PTR10]], align 2
; CHECK-NEXT:    [[RES10:%.*]] = insertelement <16 x i16> [[RES9]], i16 [[LOAD10]], i64 10
; CHECK-NEXT:    [[TMP57:%.*]] = bitcast <16 x i16>* [[TMP0]] to i16*
; CHECK-NEXT:    [[TMP58:%.*]] = getelementptr i16, i16* [[TMP57]], i32 11
; CHECK-NEXT:    [[TMP59:%.*]] = load i16, i16* [[TMP58]], align 2
; CHECK-NEXT:    [[TMP60:%.*]] = sext i16 [[TMP59]] to i64
; CHECK-NEXT:    [[TMP61:%.*]] = add i64 [[TMP60]], 32768
; CHECK-NEXT:    [[PTR11:%.*]] = getelementptr i16, i16* [[MAP]], i64 [[TMP61]]
; CHECK-NEXT:    [[LOAD11:%.*]] = load i16, i16* [[PTR11]], align 2
; CHECK-NEXT:    [[RES11:%.*]] = insertelement <16 x i16> [[RES10]], i16 [[LOAD11]], i64 11
; CHECK-NEXT:    [[TMP62:%.*]] = bitcast <16 x i16>* [[TMP0]] to i16*
; CHECK-NEXT:    [[TMP63:%.*]] = getelementptr i16, i16* [[TMP62]], i32 12
; CHECK-NEXT:    [[TMP64:%.*]] = load i16, i16* [[TMP63]], align 2
; CHECK-NEXT:    [[TMP65:%.*]] = sext i16 [[TMP64]] to i64
; CHECK-NEXT:    [[TMP66:%.*]] = add i64 [[TMP65]], 32768
; CHECK-NEXT:    [[PTR12:%.*]] = getelementptr i16, i16* [[MAP]], i64 [[TMP66]]
; CHECK-NEXT:    [[LOAD12:%.*]] = load i16, i16* [[PTR12]], align 2
; CHECK-NEXT:    [[RES12:%.*]] = insertelement <16 x i16> [[RES11]], i16 [[LOAD12]], i64 12
; CHECK-NEXT:    [[TMP67:%.*]] = bitcast <16 x i16>* [[TMP0]] to i16*
; CHECK-NEXT:    [[TMP68:%.*]] = getelementptr i16, i16* [[TMP67]], i32 13
; CHECK-NEXT:    [[TMP69:%.*]] = load i16, i16* [[TMP68]], align 2
; CHECK-NEXT:    [[TMP70:%.*]] = sext i16 [[TMP69]] to i64
; CHECK-NEXT:    [[TMP71:%.*]] = add i64 [[TMP70]], 32768
; CHECK-NEXT:    [[PTR13:%.*]] = getelementptr i16, i16* [[MAP]], i64 [[TMP71]]
; CHECK-NEXT:    [[LOAD13:%.*]] = load i16, i16* [[PTR13]], align 2
; CHECK-NEXT:    [[RES13:%.*]] = insertelement <16 x i16> [[RES12]], i16 [[LOAD13]], i64 13
; CHECK-NEXT:    [[TMP72:%.*]] = bitcast <16 x i16>* [[TMP0]] to i16*
; CHECK-NEXT:    [[TMP73:%.*]] = getelementptr i16, i16* [[TMP72]], i32 14
; CHECK-NEXT:    [[TMP74:%.*]] = load i16, i16* [[TMP73]], align 2
; CHECK-NEXT:    [[TMP75:%.*]] = sext i16 [[TMP74]] to i64
; CHECK-NEXT:    [[TMP76:%.*]] = add i64 [[TMP75]], 32768
; CHECK-NEXT:    [[PTR14:%.*]] = getelementptr i16, i16* [[MAP]], i64 [[TMP76]]
; CHECK-NEXT:    [[LOAD14:%.*]] = load i16, i16* [[PTR14]], align 2
; CHECK-NEXT:    [[RES14:%.*]] = insertelement <16 x i16> [[RES13]], i16 [[LOAD14]], i64 14
; CHECK-NEXT:    [[TMP77:%.*]] = bitcast <16 x i16>* [[TMP0]] to i16*
; CHECK-NEXT:    [[TMP78:%.*]] = getelementptr i16, i16* [[TMP77]], i32 15
; CHECK-NEXT:    [[TMP79:%.*]] = load i16, i16* [[TMP78]], align 2
; CHECK-NEXT:    [[TMP80:%.*]] = sext i16 [[TMP79]] to i64
; CHECK-NEXT:    [[TMP81:%.*]] = add i64 [[TMP80]], 32768
; CHECK-NEXT:    [[PTR15:%.*]] = getelementptr i16, i16* [[MAP]], i64 [[TMP81]]
; CHECK-NEXT:    [[LOAD15:%.*]] = load i16, i16* [[PTR15]], align 2
; CHECK-NEXT:    [[RES15:%.*]] = insertelement <16 x i16> [[RES14]], i16 [[LOAD15]], i64 15
; CHECK-NEXT:    ret <16 x i16> [[RES15]]
;
  %.splatinsert46 = insertelement <16 x i16*> poison, i16* %map, i32 0
  %.splat47 = shufflevector <16 x i16*> %.splatinsert46, <16 x i16*> poison, <16 x i32> zeroinitializer
  %ld = load <16 x i16>, <16 x i16>* %0, align 2
  %2 = sext <16 x i16> %ld to <16 x i64>
  %3 = add nsw <16 x i64> %2, <i64 32768, i64 32768, i64 32768, i64 32768, i64 32768, i64 32768, i64 32768, i64 32768, i64 32768, i64 32768, i64 32768, i64 32768, i64 32768, i64 32768, i64 32768, i64 32768>
  %4 = getelementptr inbounds i16, <16 x i16*> %.splat47, <16 x i64> %3
  %5 = call <16 x i16> @llvm.masked.gather.v16i16.v16p0i16(<16 x i16*> %4, i32 2, <16 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <16 x i16> undef)
  ret <16 x i16> %5
}

; Function Attrs: nofree nosync nounwind readonly willreturn
declare <16 x i16> @llvm.masked.gather.v16i16.v16p0i16(<16 x i16*>, i32, <16 x i1>, <16 x i16>)
