; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes="jump-threading" -S < %s | FileCheck %s

; This test case an create a degenerate phi that triggered a crash in BasicAA

@syHistory = external dso_local global [8192 x i8], align 16

; Function Attrs: nounwind uwtable
define dso_local void @SyFgets(i8* %arg) #0 {
; CHECK-LABEL: @SyFgets(
; CHECK-NEXT:  bb:
; CHECK-NEXT:    br label [[BB47:%.*]]
; CHECK:       bb47:
; CHECK-NEXT:    [[TMP:%.*]] = phi i8* [ undef, [[BB363:%.*]] ], [ [[ARG:%.*]], [[BB:%.*]] ], [ undef, [[BB363_THREAD36:%.*]] ]
; CHECK-NEXT:    [[TMP41:%.*]] = select i1 undef, i32 undef, i32 undef
; CHECK-NEXT:    [[COND:%.*]] = icmp eq i32 [[TMP41]], 22
; CHECK-NEXT:    br i1 [[COND]], label [[BB363_THREAD:%.*]], label [[BB171:%.*]]
; CHECK:       bb363.thread:
; CHECK-NEXT:    br label [[BB366:%.*]]
; CHECK:       bb64:
; CHECK-NEXT:    [[TMP69:%.*]] = add i32 [[TMP6959:%.*]], -1
; CHECK-NEXT:    [[TMP70:%.*]] = icmp sgt i32 [[TMP6959]], 0
; CHECK-NEXT:    br i1 [[TMP70]], label [[BB71:%.*]], label [[BB363]]
; CHECK:       bb71:
; CHECK-NEXT:    [[TMP6959]] = phi i32 [ [[TMP69]], [[BB64:%.*]] ]
; CHECK-NEXT:    [[TMP35958:%.*]] = phi i32 [ [[TMP35958]], [[BB64]] ]
; CHECK-NEXT:    switch i32 [[TMP35958]], label [[BB64]] [
; CHECK-NEXT:    i32 16, label [[BB171]]
; CHECK-NEXT:    i32 19, label [[BB221_THREAD:%.*]]
; CHECK-NEXT:    i32 -1, label [[BB64_THREAD51:%.*]]
; CHECK-NEXT:    ]
; CHECK:       bb64.thread51:
; CHECK-NEXT:    [[TMP695963:%.*]] = phi i32 [ [[TMP6955:%.*]], [[BB71_THREAD60:%.*]] ], [ [[TMP6959]], [[BB71]] ]
; CHECK-NEXT:    [[TMP6955]] = add i32 [[TMP695963]], -1
; CHECK-NEXT:    [[TMP7056:%.*]] = icmp sgt i32 [[TMP695963]], 0
; CHECK-NEXT:    br i1 [[TMP7056]], label [[BB71_THREAD60]], label [[BB363_THREAD50:%.*]]
; CHECK:       bb71.thread60:
; CHECK-NEXT:    br label [[BB64_THREAD51]]
; CHECK:       bb363.thread50:
; CHECK-NEXT:    br label [[BB366]]
; CHECK:       bb171:
; CHECK-NEXT:    [[TMP81:%.*]] = phi i8* [ undef, [[BB71]] ], [ [[TMP]], [[BB47]] ]
; CHECK-NEXT:    store i8 0, i8* [[TMP81]], align 1, !tbaa !1
; CHECK-NEXT:    [[TMP173:%.*]] = load i8, i8* getelementptr inbounds ([8192 x i8], [8192 x i8]* @syHistory, i64 0, i64 0), align 1, !tbaa !1
; CHECK-NEXT:    switch i8 [[TMP173]], label [[BB174:%.*]] [
; CHECK-NEXT:    i8 0, label [[BB174]]
; CHECK-NEXT:    ]
; CHECK:       bb174:
; CHECK-NEXT:    unreachable
; CHECK:       bb221.thread:
; CHECK-NEXT:    [[TMP22240:%.*]] = icmp sgt i32 [[TMP6959]], 0
; CHECK-NEXT:    br i1 [[TMP22240]], label [[BB363_THREAD36]], label [[BB363_THREAD36]]
; CHECK:       bb363.thread36:
; CHECK-NEXT:    br label [[BB47]]
; CHECK:       bb363:
; CHECK-NEXT:    switch i32 [[TMP35958]], label [[BB47]] [
; CHECK-NEXT:    i32 -1, label [[BB366]]
; CHECK-NEXT:    ]
; CHECK:       bb366:
; CHECK-NEXT:    unreachable
;
bb:
  br label %bb18

bb18:                                             ; preds = %bb363, %bb
  %tmp = phi i8* [ %tmp65, %bb363 ], [ %arg, %bb ]
  %tmp19 = phi i8* [ %tmp67, %bb363 ], [ getelementptr inbounds ([8192 x i8], [8192 x i8]* @syHistory, i64 0, i64 0), %bb ]
  %tmp41 = select i1 undef, i32 undef, i32 undef
  br label %bb47

bb47:                                             ; preds = %bb18
  %cond = icmp eq i32 %tmp41, 22
  br i1 %cond, label %bb64, label %bb79

bb64:                                             ; preds = %bb358, %bb47
  %tmp65 = phi i8* [ undef, %bb358 ], [ %tmp, %bb47 ]
  %tmp66 = phi i32 [ %tmp359, %bb358 ], [ undef, %bb47 ]
  %tmp67 = phi i8* [ %tmp67, %bb358 ], [ %tmp19, %bb47 ]
  %tmp68 = phi i32 [ %tmp361, %bb358 ], [ undef, %bb47 ]
  %tmp69 = add i32 %tmp68, -1
  %tmp70 = icmp sgt i32 %tmp68, 0
  br i1 %tmp70, label %bb71, label %bb363

bb71:                                             ; preds = %bb64
  switch i32 %tmp66, label %bb346 [
  i32 16, label %bb79
  i32 19, label %bb216
  i32 -1, label %bb358
  ]

bb79:                                             ; preds = %bb71, %bb47
  %tmp80 = phi i8* [ %tmp67, %bb71 ], [ %tmp19, %bb47 ]
  %tmp81 = phi i8* [ %tmp65, %bb71 ], [ %tmp, %bb47 ]
  store i8 0, i8* %tmp81, align 1, !tbaa !1
  br label %bb171

bb171:                                            ; preds = %bb79
  %tmp173 = load i8, i8* %tmp80, align 1, !tbaa !1
  switch i8 %tmp173, label %bb174 [
  i8 0, label %bb174
  ]

bb174:                                            ; preds = %bb171, %bb171
  unreachable

bb216:                                            ; preds = %bb71
  br label %bb217

bb217:                                            ; preds = %bb221, %bb216
  %tmp218 = phi i8 [ undef, %bb216 ], [ 0, %bb221 ]
  %tmp219 = phi i32 [ %tmp69, %bb216 ], [ undef, %bb221 ]
  %tmp220 = icmp eq i8 %tmp218, 0
  br i1 %tmp220, label %bb221, label %bb358

bb221:                                            ; preds = %bb217
  %tmp222 = icmp sgt i32 %tmp219, 0
  br i1 %tmp222, label %bb217, label %bb363

bb346:                                            ; preds = %bb71
  br label %bb358

bb358:                                            ; preds = %bb346, %bb217, %bb71
  %tmp359 = phi i32 [ %tmp66, %bb346 ], [ -1, %bb71 ], [ 19, %bb217 ]
  %tmp361 = phi i32 [ %tmp69, %bb346 ], [ %tmp69, %bb71 ], [ %tmp219, %bb217 ]
  br label %bb64

bb363:                                            ; preds = %bb221, %bb64
  switch i32 %tmp66, label %bb18 [
  i32 -1, label %bb366
  ]

bb366:                                            ; preds = %bb363
  unreachable
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "pre_loopopt" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!2, !2, i64 0}
!2 = !{!"omnipotent char", !3, i64 0}
!3 = !{!"Simple C/C++ TBAA"}
