; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes="jump-threading" -S < %s | FileCheck %s

; This test used to crash due to the for.body block becoming unreachable
; from the entry block due to jump threading. Then later distant jump threading
; would try to follow the %state.1395.ph usage back into the reachable part
; of the CFG. This would ultimately leading to a crash where we were unable to
; collect region blocks from for.body back to the reachable part of the CFG.

define void @cmplrs_1835() {
; CHECK-LABEL: @cmplrs_1835(
; CHECK-NEXT:  sw.bb.loopexit:
; CHECK-NEXT:    unreachable
; CHECK:       for.body.thread:
; CHECK-NEXT:    br label [[FOR_BODY_THREAD:%.*]]
entry:
  br label %for.inc.thread390

for.body:                                         ; preds = %for.inc, %for.body.preheader
  switch i32 %state.1395.ph, label %for.inc [
  i32 0, label %sw.bb.loopexit
  i32 17, label %sw.bb132.loopexit
  i32 18, label %sw.bb140
  i32 20, label %sw.bb157
  ]

sw.bb.loopexit:                                   ; preds = %for.body
  unreachable

sw.bb132.loopexit:                                ; preds = %for.body
  br label %for.inc.thread390

sw.bb140:                                         ; preds = %for.body
  unreachable

sw.bb157:                                         ; preds = %for.body
  br label %for.body.preheader

for.inc.thread390:                                ; preds = %sw.bb132.loopexit, %entry
  %state.1.ph388 = phi i32 [ 18, %sw.bb132.loopexit ], [ 0, %entry ]
  br label %for.body.preheader

for.body.preheader:                               ; preds = %for.inc.thread390, %sw.bb157
  %state.1395.ph = phi i32 [ 20, %sw.bb157 ], [ %state.1.ph388, %for.inc.thread390 ]
  br label %for.body

for.inc:                                          ; preds = %for.body
  br i1 undef, label %for.end.loopexit605, label %for.body

for.end.loopexit605:                              ; preds = %for.inc
  %state.1395.ph.lcssa765 = phi i32 [ %state.1395.ph, %for.inc ]
  unreachable
}
