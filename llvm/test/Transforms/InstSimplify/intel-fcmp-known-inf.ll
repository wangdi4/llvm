; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -S < %s -passes='early-cse<memssa>' | FileCheck %s

; This test checks that we don't optimize away equality comparisons for +/-INF
; even when 'fast' is specified. See CMPLRLLVM-51224 for context.

define i1 @dont_simplify_double_oeq(double %0){
; CHECK-LABEL: define i1 @dont_simplify_double_oeq(
; CHECK-SAME: double [[TMP0:%.*]]) {
; CHECK-NEXT:    [[TMP2:%.*]] = fcmp fast ueq double [[TMP0]], 0x7FF0000000000000
; CHECK-NEXT:    [[TMP3:%.*]] = fcmp fast ueq double [[TMP0]], 0xFFF0000000000000
; CHECK-NEXT:    [[TMP4:%.*]] = add i1 [[TMP2]], [[TMP3]]
; CHECK-NEXT:    ret i1 [[TMP4]]
;
  %2 = fcmp fast ueq double %0, 0x7FF0000000000000
  %3 = fcmp fast ueq double %0, 0xFFF0000000000000
  %4 = add i1 %2, %3
  ret i1 %4
}

define i1 @dont_simplify_double_ueq(double %0){
; CHECK-LABEL: define i1 @dont_simplify_double_ueq(
; CHECK-SAME: double [[TMP0:%.*]]) {
; CHECK-NEXT:    [[TMP2:%.*]] = fcmp fast ueq double [[TMP0]], 0x7FF0000000000000
; CHECK-NEXT:    [[TMP3:%.*]] = fcmp fast ueq double [[TMP0]], 0xFFF0000000000000
; CHECK-NEXT:    [[TMP4:%.*]] = add i1 [[TMP2]], [[TMP3]]
; CHECK-NEXT:    ret i1 [[TMP4]]
;
  %2 = fcmp fast ueq double %0, 0x7FF0000000000000
  %3 = fcmp fast ueq double %0, 0xFFF0000000000000
  %4 = add i1 %2, %3
  ret i1 %4
}

define i1 @dont_simplify_double_one(double %0){
; CHECK-LABEL: define i1 @dont_simplify_double_one(
; CHECK-SAME: double [[TMP0:%.*]]) {
; CHECK-NEXT:    [[TMP2:%.*]] = fcmp fast one double [[TMP0]], 0x7FF0000000000000
; CHECK-NEXT:    [[TMP3:%.*]] = fcmp fast one double [[TMP0]], 0xFFF0000000000000
; CHECK-NEXT:    [[TMP4:%.*]] = add i1 [[TMP2]], [[TMP3]]
; CHECK-NEXT:    ret i1 [[TMP4]]
;
  %2 = fcmp fast one double %0, 0x7FF0000000000000
  %3 = fcmp fast one double %0, 0xFFF0000000000000
  %4 = add i1 %2, %3
  ret i1 %4
}

define i1 @dont_simplify_double_une(double %0){
; CHECK-LABEL: define i1 @dont_simplify_double_une(
; CHECK-SAME: double [[TMP0:%.*]]) {
; CHECK-NEXT:    [[TMP2:%.*]] = fcmp fast une double [[TMP0]], 0x7FF0000000000000
; CHECK-NEXT:    [[TMP3:%.*]] = fcmp fast une double [[TMP0]], 0xFFF0000000000000
; CHECK-NEXT:    [[TMP4:%.*]] = add i1 [[TMP2]], [[TMP3]]
; CHECK-NEXT:    ret i1 [[TMP4]]
;
  %2 = fcmp fast une double %0, 0x7FF0000000000000
  %3 = fcmp fast une double %0, 0xFFF0000000000000
  %4 = add i1 %2, %3
  ret i1 %4
}

define i1 @dont_simplify_float_oeq(float %0){
; CHECK-LABEL: define i1 @dont_simplify_float_oeq(
; CHECK-SAME: float [[TMP0:%.*]]) {
; CHECK-NEXT:    [[TMP2:%.*]] = fcmp fast ueq float [[TMP0]], 0x7FF0000000000000
; CHECK-NEXT:    [[TMP3:%.*]] = fcmp fast ueq float [[TMP0]], 0xFFF0000000000000
; CHECK-NEXT:    [[TMP4:%.*]] = add i1 [[TMP2]], [[TMP3]]
; CHECK-NEXT:    ret i1 [[TMP4]]
;
  %2 = fcmp fast ueq float %0, 0x7FF0000000000000
  %3 = fcmp fast ueq float %0, 0xFFF0000000000000
  %4 = add i1 %2, %3
  ret i1 %4
}

define i1 @dont_simplify_float_ueq(float %0){
; CHECK-LABEL: define i1 @dont_simplify_float_ueq(
; CHECK-SAME: float [[TMP0:%.*]]) {
; CHECK-NEXT:    [[TMP2:%.*]] = fcmp fast ueq float [[TMP0]], 0x7FF0000000000000
; CHECK-NEXT:    [[TMP3:%.*]] = fcmp fast ueq float [[TMP0]], 0xFFF0000000000000
; CHECK-NEXT:    [[TMP4:%.*]] = add i1 [[TMP2]], [[TMP3]]
; CHECK-NEXT:    ret i1 [[TMP4]]
;
  %2 = fcmp fast ueq float %0, 0x7FF0000000000000
  %3 = fcmp fast ueq float %0, 0xFFF0000000000000
  %4 = add i1 %2, %3
  ret i1 %4
}

define i1 @dont_simplify_float_one(float %0){
; CHECK-LABEL: define i1 @dont_simplify_float_one(
; CHECK-SAME: float [[TMP0:%.*]]) {
; CHECK-NEXT:    [[TMP2:%.*]] = fcmp fast one float [[TMP0]], 0x7FF0000000000000
; CHECK-NEXT:    [[TMP3:%.*]] = fcmp fast one float [[TMP0]], 0xFFF0000000000000
; CHECK-NEXT:    [[TMP4:%.*]] = add i1 [[TMP2]], [[TMP3]]
; CHECK-NEXT:    ret i1 [[TMP4]]
;
  %2 = fcmp fast one float %0, 0x7FF0000000000000
  %3 = fcmp fast one float %0, 0xFFF0000000000000
  %4 = add i1 %2, %3
  ret i1 %4
}

define i1 @dont_simplify_float_une(float %0){
; CHECK-LABEL: define i1 @dont_simplify_float_une(
; CHECK-SAME: float [[TMP0:%.*]]) {
; CHECK-NEXT:    [[TMP2:%.*]] = fcmp fast une float [[TMP0]], 0x7FF0000000000000
; CHECK-NEXT:    [[TMP3:%.*]] = fcmp fast une float [[TMP0]], 0xFFF0000000000000
; CHECK-NEXT:    [[TMP4:%.*]] = add i1 [[TMP2]], [[TMP3]]
; CHECK-NEXT:    ret i1 [[TMP4]]
;
  %2 = fcmp fast une float %0, 0x7FF0000000000000
  %3 = fcmp fast une float %0, 0xFFF0000000000000
  %4 = add i1 %2, %3
  ret i1 %4
}
