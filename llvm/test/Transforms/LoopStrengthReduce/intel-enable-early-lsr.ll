; NOTE: Assertions have been autogenerated by utils/update_test_checks.py

; RUN: opt -S -passes="loop(loop-reduce)" %s | FileCheck %s

;
; Compilation options:
; icx -fiopenmp -fopenmp-targets=spir64="-mllvm -enable-early-lsr" -O3
;
; #include <omp.h>
;
; void foo (int N)
; {
;    float B[N];
;
;    #pragma omp target map(tofrom: B)
;    {
;       int c = 7;
;
;       #pragma omp parallel for
;       for (int i = 0; i < N; i++)
;       {
;          B[i] = i * c;
;       }
;    }
;
;    printf ("%f\n", B[5]);
; }
;
;
;
target datalayout = "e-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-n8:16:32:64"
target triple = "spir64"
target device_triples = "spir64"

%0 = type { i32, i32, [4 x %1], i64, i64, i64 }
%1 = type { i32, i32 }
%struct.__tgt_offload_entry.0 = type { ptr addrspace(4), ptr addrspace(2), i64, i32, i32, i64 }

@__omp_offloading_3b_d7a6801f__Z3foo_l8_kernel_info = weak target_declare local_unnamed_addr addrspace(1) constant %0 { i32 5, i32 4, [4 x %1] [%1 { i32 0, i32 8 }, %1 { i32 0, i32 8 }, %1 { i32 0, i32 8 }, %1 { i32 0, i32 8 }], i64 0, i64 0, i64 0 }
@.omp_offloading.entry_name = internal target_declare unnamed_addr addrspace(2) constant [39 x i8] c"__omp_offloading_3b_d7a6801f__Z3foo_l8\00"
@.omp_offloading.entry.__omp_offloading_3b_d7a6801f__Z3foo_l8 = weak target_declare local_unnamed_addr addrspace(1) constant %struct.__tgt_offload_entry.0 { ptr addrspace(4) null, ptr addrspace(2) @.omp_offloading.entry_name, i64 0, i32 0, i32 0, i64 39 }, section "omp_offloading_entries"

declare spir_func i64 @_Z14get_local_sizej(i32) local_unnamed_addr

declare spir_func i64 @_Z12get_local_idj(i32) local_unnamed_addr

; Function Attrs: noinline nounwind
define weak dso_local spir_kernel void @__omp_offloading_3b_d7a6801f__Z3foo_l8(ptr addrspace(1) noalias %vla.ascast, i64 %N.addr.ascast.val.zext, i64 %omp.vla.tmp.ascast.val, i64 %.addr.ascast.val) local_unnamed_addr #0 {
; CHECK-LABEL: @__omp_offloading_3b_d7a6801f__Z3foo_l8(
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    [[N_ADDR_ASCAST_VAL_ZEXT_TRUNC:%.*]] = trunc i64 [[N_ADDR_ASCAST_VAL_ZEXT:%.*]] to i32
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[N_ADDR_ASCAST_VAL_ZEXT_TRUNC]], 1
; CHECK-NEXT:    br i1 [[CMP]], label [[DIR_OMP_END_TARGET_9:%.*]], label [[OMP_INNER_FOR_BODY_LR_PH:%.*]]
; CHECK:       omp.inner.for.body.lr.ph:
; CHECK-NEXT:    [[TMP0:%.*]] = tail call spir_func i64 @_Z14get_local_sizej(i32 0) #[[ATTR1:[0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = tail call spir_func i64 @_Z12get_local_idj(i32 0) #[[ATTR1]]
; CHECK-NEXT:    [[TMP2:%.*]] = trunc i64 [[TMP1]] to i32
; CHECK-NEXT:    [[DOTNOT_NOT:%.*]] = icmp sgt i32 [[N_ADDR_ASCAST_VAL_ZEXT_TRUNC]], [[TMP2]]
; CHECK-NEXT:    br i1 [[DOTNOT_NOT]], label [[OMP_INNER_FOR_BODY_PREHEADER:%.*]], label [[DIR_OMP_END_TARGET_9]]
; CHECK:       omp.inner.for.body.preheader:
; CHECK-NEXT:    [[TMP3:%.*]] = trunc i64 [[TMP0]] to i32
; CHECK-NEXT:    [[TMP4:%.*]] = sext i32 [[TMP2]] to i64
; CHECK-NEXT:    [[TMP5:%.*]] = shl nsw i64 [[TMP4]], 2
; CHECK-NEXT:    [[SCEVGEP:%.*]] = getelementptr i8, ptr addrspace(1) [[VLA_ASCAST:%.*]], i64 [[TMP5]]
; CHECK-NEXT:    [[TMP6:%.*]] = sext i32 [[TMP3]] to i64
; CHECK-NEXT:    [[TMP7:%.*]] = shl nsw i64 [[TMP6]], 2
; CHECK-NEXT:    [[TMP8:%.*]] = mul i32 [[TMP2]], 7
; CHECK-NEXT:    [[TMP9:%.*]] = mul i32 [[TMP3]], 7
; CHECK-NEXT:    br label [[OMP_INNER_FOR_BODY:%.*]]
; CHECK:       omp.inner.for.body:
; CHECK-NEXT:    [[LSR_IV2:%.*]] = phi i32 [ [[LSR_IV_NEXT:%.*]], [[OMP_INNER_FOR_BODY]] ], [ [[TMP8]], [[OMP_INNER_FOR_BODY_PREHEADER]] ]
; CHECK-NEXT:    [[LSR_IV:%.*]] = phi ptr addrspace(1) [ [[SCEVGEP1:%.*]], [[OMP_INNER_FOR_BODY]] ], [ [[SCEVGEP]], [[OMP_INNER_FOR_BODY_PREHEADER]] ]
; CHECK-NEXT:    [[DOTOMP_IV_ASCAST_LOCAL_047:%.*]] = phi i32 [ [[ADD8:%.*]], [[OMP_INNER_FOR_BODY]] ], [ [[TMP2]], [[OMP_INNER_FOR_BODY_PREHEADER]] ]
; CHECK-NEXT:    [[CONV:%.*]] = sitofp i32 [[LSR_IV2]] to float
; CHECK-NEXT:    store float [[CONV]], ptr addrspace(1) [[LSR_IV]], align 4, !tbaa [[TBAA8:![0-9]+]], !alias.scope !12, !noalias !17, !llvm.access.group [[ACC_GRP31:![0-9]+]]
; CHECK-NEXT:    [[ADD8]] = add nsw i32 [[DOTOMP_IV_ASCAST_LOCAL_047]], [[TMP3]]
; CHECK-NEXT:    [[SCEVGEP1]] = getelementptr i8, ptr addrspace(1) [[LSR_IV]], i64 [[TMP7]]
; CHECK-NEXT:    [[LSR_IV_NEXT]] = add i32 [[LSR_IV2]], [[TMP9]]
; CHECK-NEXT:    [[CMP4_NOT_NOT_NOT:%.*]] = icmp slt i32 [[ADD8]], [[N_ADDR_ASCAST_VAL_ZEXT_TRUNC]]
; CHECK-NEXT:    br i1 [[CMP4_NOT_NOT_NOT]], label [[OMP_INNER_FOR_BODY]], label [[DIR_OMP_END_TARGET_9_LOOPEXIT:%.*]], !llvm.loop [[LOOP32:![0-9]+]]
; CHECK:       DIR.OMP.END.TARGET.9.loopexit:
; CHECK-NEXT:    br label [[DIR_OMP_END_TARGET_9]]
; CHECK:       DIR.OMP.END.TARGET.9:
; CHECK-NEXT:    ret void
;
newFuncRoot:
  %N.addr.ascast.val.zext.trunc = trunc i64 %N.addr.ascast.val.zext to i32
  %cmp = icmp slt i32 %N.addr.ascast.val.zext.trunc, 1
  br i1 %cmp, label %DIR.OMP.END.TARGET.9, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %newFuncRoot
  %0 = tail call spir_func i64 @_Z14get_local_sizej(i32 0) #1
  %1 = tail call spir_func i64 @_Z12get_local_idj(i32 0) #1
  %2 = trunc i64 %1 to i32
  %.not.not = icmp sgt i32 %N.addr.ascast.val.zext.trunc, %2
  br i1 %.not.not, label %omp.inner.for.body.preheader, label %DIR.OMP.END.TARGET.9

omp.inner.for.body.preheader:                     ; preds = %omp.inner.for.body.lr.ph
  %3 = trunc i64 %0 to i32
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.inner.for.body.preheader, %omp.inner.for.body
  %.omp.iv.ascast.local.047 = phi i32 [ %add8, %omp.inner.for.body ], [ %2, %omp.inner.for.body.preheader ]
  %mul6 = mul nsw i32 %.omp.iv.ascast.local.047, 7
  %conv = sitofp i32 %mul6 to float
  %idxprom = sext i32 %.omp.iv.ascast.local.047 to i64
  %arrayidx7 = getelementptr inbounds float, ptr addrspace(1) %vla.ascast, i64 %idxprom
  store float %conv, ptr addrspace(1) %arrayidx7, align 4, !tbaa !8, !alias.scope !12, !noalias !17, !llvm.access.group !31
  %add8 = add nsw i32 %.omp.iv.ascast.local.047, %3
  %cmp4.not.not.not = icmp slt i32 %add8, %N.addr.ascast.val.zext.trunc
  br i1 %cmp4.not.not.not, label %omp.inner.for.body, label %DIR.OMP.END.TARGET.9, !llvm.loop !32

DIR.OMP.END.TARGET.9:                             ; preds = %omp.inner.for.body, %omp.inner.for.body.lr.ph, %newFuncRoot
  ret void
}

attributes #0 = { noinline nounwind "approx-func-fp-math"="true" "contains-openmp-target"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "frame-pointer"="all" "may-have-openmp-directive"="true" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "processed-by-vpo" "stack-protector-buffer-size"="8" "target.declare"="true" "unsafe-fp-math"="true" }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!opencl.compiler.options = !{!5}
!llvm.ident = !{!6}
!spirv.Source = !{!7}
!nvvm.annotations = !{}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"openmp", i32 50}
!2 = !{i32 7, !"openmp-device", i32 50}
!3 = !{i32 7, !"PIC Level", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{}
!6 = !{!"Intel(R) oneAPI DPC++/C++ Compiler 2023.0.0 (2023.x.0.YYYYMMDD)"}
!7 = !{i32 4, i32 200000}
!8 = !{!9, !9, i64 0}
!9 = !{!"float", !10, i64 0}
!10 = !{!"omnipotent char", !11, i64 0}
!11 = !{!"Simple C/C++ TBAA"}
!12 = !{!13, !15}
!13 = distinct !{!13, !14, !"OMPAliasScope"}
!14 = distinct !{!14, !"OMPDomain"}
!15 = distinct !{!15, !16, !"OMPAliasScope"}
!16 = distinct !{!16, !"OMPDomain"}
!17 = !{!18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30}
!18 = distinct !{!18, !14, !"OMPAliasScope"}
!19 = distinct !{!19, !14, !"OMPAliasScope"}
!20 = distinct !{!20, !14, !"OMPAliasScope"}
!21 = distinct !{!21, !14, !"OMPAliasScope"}
!22 = distinct !{!22, !16, !"OMPAliasScope"}
!23 = distinct !{!23, !16, !"OMPAliasScope"}
!24 = distinct !{!24, !16, !"OMPAliasScope"}
!25 = distinct !{!25, !16, !"OMPAliasScope"}
!26 = distinct !{!26, !16, !"OMPAliasScope"}
!27 = distinct !{!27, !16, !"OMPAliasScope"}
!28 = distinct !{!28, !16, !"OMPAliasScope"}
!29 = distinct !{!29, !16, !"OMPAliasScope"}
!30 = distinct !{!30, !16, !"OMPAliasScope"}
!31 = distinct !{}
!32 = distinct !{!32, !33, !34}
!33 = !{!"llvm.loop.vectorize.ivdep_loop", i32 0}
!34 = !{!"llvm.loop.parallel_accesses", !31}


