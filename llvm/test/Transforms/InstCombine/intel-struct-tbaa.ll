; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -opaque-pointers -S -instcombine -verify | FileCheck %s
; RUN: opt < %s -opaque-pointers -S -passes=instcombine,verify | FileCheck %s
%struct.a = type { { float, float } }

@dest = dso_local global %struct.a zeroinitializer, align 4

declare void @llvm.memcpy.p0i8.p0i8.i64(i8*, i8*, i64, i1)

define dso_local void @use(%struct.a* %src) {
; CHECK-LABEL: @use(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds { i32, i32 }, ptr [[SRC:%.*]], i64 0, i32 0
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[TMP0]], align 4, !tbaa [[TBAA0:![0-9]+]]
; CHECK-NEXT:    store i32 [[TMP1]], ptr @dest, align 4, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds { i32, i32 }, ptr [[SRC]], i64 0, i32 1
; CHECK-NEXT:    [[TMP3:%.*]] = load i32, ptr [[TMP2]], align 4, !tbaa [[TBAA0]]
; CHECK-NEXT:    store i32 [[TMP3]], ptr getelementptr inbounds ([[STRUCT_A:%.*]], ptr @dest, i64 0, i32 0, i32 1), align 4, !tbaa [[TBAA0]]
; CHECK-NEXT:    ret void
;
entry:
  %src.i8 = bitcast %struct.a* %src to i8*
  %dest.i8 = bitcast %struct.a* @dest to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %dest.i8, i8* align 4 %src.i8, i64 8, i1 false), !tbaa.struct !0
  ret void
}

!0 = !{i64 0, i64 4, !1, i64 4, i64 4, !1}
!1 = !{!"float", !2, i64 0}
!2 = !{!"omnipotent char", !3, i64 0}
!3 = !{!"Simple C++ TBAA"}
