; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -S -instcombine | FileCheck %s

define i64 @test_sext_and(<2 x i32> %x) {
; CHECK-LABEL: @test_sext_and(
; CHECK-NEXT:    [[B:%.*]] = call i32 @llvm.experimental.vector.reduce.and.v2i32(<2 x i32> [[X:%.*]])
; CHECK-NEXT:    [[TMP1:%.*]] = sext i32 [[B]] to i64
; CHECK-NEXT:    ret i64 [[TMP1]]
;
  %a = sext <2 x i32> %x to <2 x i64>
  %b = call i64 @llvm.experimental.vector.reduce.and.v2i64(<2 x i64> %a)
  ret i64 %b
}

define i64 @test_sext_or(<2 x i32> %x) {
; CHECK-LABEL: @test_sext_or(
; CHECK-NEXT:    [[B:%.*]] = call i32 @llvm.experimental.vector.reduce.or.v2i32(<2 x i32> [[X:%.*]])
; CHECK-NEXT:    [[TMP1:%.*]] = sext i32 [[B]] to i64
; CHECK-NEXT:    ret i64 [[TMP1]]
;
  %a = sext <2 x i32> %x to <2 x i64>
  %b = call i64 @llvm.experimental.vector.reduce.or.v2i64(<2 x i64> %a)
  ret i64 %b
}

define i64 @test_sext_xor(<2 x i32> %x) {
; CHECK-LABEL: @test_sext_xor(
; CHECK-NEXT:    [[B:%.*]] = call i32 @llvm.experimental.vector.reduce.xor.v2i32(<2 x i32> [[X:%.*]])
; CHECK-NEXT:    [[TMP1:%.*]] = sext i32 [[B]] to i64
; CHECK-NEXT:    ret i64 [[TMP1]]
;
  %a = sext <2 x i32> %x to <2 x i64>
  %b = call i64 @llvm.experimental.vector.reduce.xor.v2i64(<2 x i64> %a)
  ret i64 %b
}

define i64 @test_zext_and(<2 x i32> %x) {
; CHECK-LABEL: @test_zext_and(
; CHECK-NEXT:    [[B:%.*]] = call i32 @llvm.experimental.vector.reduce.and.v2i32(<2 x i32> [[X:%.*]])
; CHECK-NEXT:    [[TMP1:%.*]] = zext i32 [[B]] to i64
; CHECK-NEXT:    ret i64 [[TMP1]]
;
  %a = zext <2 x i32> %x to <2 x i64>
  %b = call i64 @llvm.experimental.vector.reduce.and.v2i64(<2 x i64> %a)
  ret i64 %b
}

define i64 @test_zext_or(<2 x i32> %x) {
; CHECK-LABEL: @test_zext_or(
; CHECK-NEXT:    [[B:%.*]] = call i32 @llvm.experimental.vector.reduce.or.v2i32(<2 x i32> [[X:%.*]])
; CHECK-NEXT:    [[TMP1:%.*]] = zext i32 [[B]] to i64
; CHECK-NEXT:    ret i64 [[TMP1]]
;
  %a = zext <2 x i32> %x to <2 x i64>
  %b = call i64 @llvm.experimental.vector.reduce.or.v2i64(<2 x i64> %a)
  ret i64 %b
}

define i64 @test_zext_xor(<2 x i32> %x) {
; CHECK-LABEL: @test_zext_xor(
; CHECK-NEXT:    [[B:%.*]] = call i32 @llvm.experimental.vector.reduce.xor.v2i32(<2 x i32> [[X:%.*]])
; CHECK-NEXT:    [[TMP1:%.*]] = zext i32 [[B]] to i64
; CHECK-NEXT:    ret i64 [[TMP1]]
;
  %a = zext <2 x i32>%x to <2 x i64>
  %b = call i64 @llvm.experimental.vector.reduce.xor.v2i64(<2 x i64> %a)
  ret i64 %b
}

declare i64 @llvm.experimental.vector.reduce.and.v2i64(<2 x i64>)
declare i64 @llvm.experimental.vector.reduce.or.v2i64(<2 x i64>)
declare i64 @llvm.experimental.vector.reduce.xor.v2i64(<2 x i64>)

