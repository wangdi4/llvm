; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -instcombine -S < %s | FileCheck %s

declare void @llvm.masked.scatter.v2f64.v2p0f64(<2 x double> %val, <2 x double*> %ptrs, i32, <2 x i1> %mask)

define void @scatter_splat_pointer(double* %ptr, <2 x double> %val, <2 x i1> %mask)  {
; CHECK-LABEL: @scatter_splat_pointer(
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr double, double* [[PTR:%.*]], <2 x i64> zeroinitializer
; CHECK-NEXT:    call void @llvm.masked.scatter.v2f64.v2p0f64(<2 x double> [[VAL:%.*]], <2 x double*> [[TMP1]], i32 8, <2 x i1> [[MASK:%.*]])
; CHECK-NEXT:    ret void
;
  %.splatinsert = insertelement <2 x double*> undef, double* %ptr, i64 0
  %.splat = shufflevector <2 x double*> %.splatinsert, <2 x double*> undef, <2 x i32> zeroinitializer
  call void @llvm.masked.scatter.v2f64.v2p0f64(<2 x double> %val, <2 x double*> %.splat, i32 8, <2 x i1> %mask)
  ret void
}

; We can remove an alloca this only stored to.
define void @scatter_alloca(<2 x double> %val, <2 x i1> %mask)  {
; CHECK-LABEL: @scatter_alloca(
; CHECK-NEXT:    ret void
;
  %ptr = alloca double, align 8
  %.splatinsert = insertelement <2 x double*> undef, double* %ptr, i64 0
  %.splat = shufflevector <2 x double*> %.splatinsert, <2 x double*> undef, <2 x i32> zeroinitializer
  call void @llvm.masked.scatter.v2f64.v2p0f64(<2 x double> %val, <2 x double*> %.splat, i32 8, <2 x i1> %mask)
  ret void
}
