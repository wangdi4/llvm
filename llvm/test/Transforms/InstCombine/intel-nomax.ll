; INTEL_FEATURE_SW_ADVANCED
; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; REQUIRES: intel_feature_sw_advanced

; RUN: opt < %s -passes=instcombine -enable-intel-advanced-opts=true -S | FileCheck %s

; Prevent max/min recognition for scalar 0/1 select, when advanced
; optimizations are enabled. Selects may enable CFG transformations.

target triple = "i686-pc-linux-gnu"
target datalayout = "e-p:64:64-p1:16:16-p2:32:32:32-p3:64:64:64"

define i32 @clamp_nomax(i32 %x) #0 {
; CHECK-LABEL: @clamp_nomax(
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[X:%.*]], 0
; CHECK-NEXT:    [[SEL:%.*]] = select i1 [[CMP]], i32 1, i32 [[X]]
; CHECK-NEXT:    ret i32 [[SEL]]
;
  %cmp = icmp eq i32 %x, 0
  %sel = select i1 %cmp, i32 1, i32 %x
  ret i32 %sel
}

define i8 @clamp_nomin(i8 %x) #0 {
; CHECK-LABEL: @clamp_nomin(
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i8 [[X:%.*]], -1
; CHECK-NEXT:    [[SEL:%.*]] = select i1 [[CMP]], i8 -2, i8 [[X]]
; CHECK-NEXT:    ret i8 [[SEL]]
;
  %cmp = icmp eq i8 %x, 255
  %sel = select i1 %cmp, i8 254, i8 %x
  ret i8 %sel
}


define <2 x i8> @clamp_max_vec(<2 x i8> %x) #0 {
; CHECK-LABEL: @clamp_max_vec(
; CHECK-NEXT:    [[SEL:%.*]] = call <2 x i8> @llvm.umin.v2i8(<2 x i8> [[X:%.*]], <2 x i8> <i8 -2, i8 -2>)
; CHECK-NEXT:    ret <2 x i8> [[SEL]]
;
  %cmp = icmp eq <2 x i8> %x, <i8 255, i8 255>
  %sel = select <2 x i1> %cmp, <2 x i8> <i8 254, i8 254>, <2 x i8> %x
  ret <2 x i8> %sel
}

attributes #0 = { "target-cpu"="skylake-avx512" "target-features"="+avx512f,+avx512vl,+avx512dq,+sse4.2"}
; end INTEL_FEATURE_SW_ADVANCED
