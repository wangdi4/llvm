; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt < %s --passes=instcombine -S | FileCheck %s

; IC should not convert scalars into unsupported vector types.
; (such as <4 x i4>)

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define dso_local noundef zeroext i4 @mask4(<16 x float> noundef nofpclass(nan inf) %x) local_unnamed_addr {
; CHECK-LABEL: define dso_local noundef zeroext i4 @mask4(
; CHECK-SAME: <16 x float> noundef nofpclass(nan inf) [[X:%.*]]) local_unnamed_addr {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = fcmp fast olt <16 x float> [[X]], zeroinitializer
; CHECK-NEXT:    [[BC:%.*]] = bitcast <16 x i1> [[TMP0]] to i16
; CHECK-NEXT:    [[CONV:%.*]] = trunc i16 [[BC]] to i4
; CHECK-NEXT:    ret i4 [[CONV]]
;
entry:
  %0 = fcmp fast olt <16 x float> %x, zeroinitializer
  %bc = bitcast <16 x i1> %0 to i16
  %conv = trunc i16 %bc to i4
  ret i4 %conv
}

; This one is OK to convert.
define dso_local noundef zeroext i8 @mask8(<16 x float> noundef nofpclass(nan inf) %x) local_unnamed_addr {
; CHECK-LABEL: define dso_local noundef zeroext i8 @mask8(
; CHECK-SAME: <16 x float> noundef nofpclass(nan inf) [[X:%.*]]) local_unnamed_addr {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = fcmp fast olt <16 x float> [[X]], zeroinitializer
; CHECK-NEXT:    [[BC1:%.*]] = bitcast <16 x i1> [[TMP0]] to <2 x i8>
; CHECK-NEXT:    [[CONV:%.*]] = extractelement <2 x i8> [[BC1]], i64 0
; CHECK-NEXT:    ret i8 [[CONV]]
;
entry:
  %0 = fcmp fast olt <16 x float> %x, zeroinitializer
  %bc = bitcast <16 x i1> %0 to i16
  %conv = trunc i16 %bc to i8
  ret i8 %conv
}

