; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -opaque-pointers=0 -passes=instcombine -S %s | FileCheck %s

; Loading an i16 from an i9 pointer is undefined, but we should allow the
; codegen to interpret that (it is legal on x86). Don't try to sign-extend
; the -1(i9) to -1(i16), or poison it.
; "Safe" constants like 0, may or may not work, depending on whether LLVM
; is currently using actual size or store size to fold constants.

define i16 @i9extneg1(i9 *%addr) {
; CHECK-LABEL: @i9extneg1(
; CHECK-NEXT:    store i9 -1, i9* [[ADDR:%.*]], align 2
; CHECK-NEXT:    [[ADDR2:%.*]] = bitcast i9* [[ADDR]] to i16*
; CHECK-NEXT:    [[RES:%.*]] = load i16, i16* [[ADDR2]], align 2
; CHECK-NEXT:    ret i16 [[RES]]
;
  store i9 -1, i9* %addr, align 2
  %addr2 = bitcast i9* %addr to i16*
  %res = load i16, i16* %addr2, align 2
  ret i16 %res
}

; OK, truncate is well defined.
define i8 @i9truncneg1(i9 *%addr) {
; CHECK-LABEL: @i9truncneg1(
; CHECK-NEXT:    store i9 -1, i9* [[ADDR:%.*]], align 2
; CHECK-NEXT:    ret i8 -1
;
  store i9 -1, i9* %addr, align 2
  %addr2 = bitcast i9* %addr to i8*
  %res = load i8, i8* %addr2, align 2
  ret i8 %res
}

