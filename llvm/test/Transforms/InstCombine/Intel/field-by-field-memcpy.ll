; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; CMPLRLLVM-25540: This test verifies that field-by-field memcpy lowering
; is triggered in instcombine pass.

; RUN: opt -passes=instcombine %s -S | FileCheck %s

; check memcpy is field-by-field lowered.

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.Pixel = type { i16, i16, i16, i16 }

define dso_local i32 @foo(ptr %p) local_unnamed_addr  {
; CHECK-LABEL: define dso_local i32 @foo
; CHECK-SAME: (ptr [[P:%.*]]) local_unnamed_addr {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[P_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[Q:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[P]], ptr [[P_ADDR]], align 8, !tbaa [[TBAA5:![0-9]+]]
; CHECK-NEXT:    [[Q_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[P_ADDR_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[Q]], ptr [[Q_ADDR]], align 8
; CHECK-NEXT:    store ptr [[P_ADDR]], ptr [[P_ADDR_ADDR]], align 8
; CHECK-NEXT:    [[Q9:%.*]] = load volatile ptr, ptr [[Q_ADDR]], align 8
; CHECK-NEXT:    [[P_ADDR11:%.*]] = load volatile ptr, ptr [[P_ADDR_ADDR]], align 8
; CHECK-NEXT:    [[I12:%.*]] = load ptr, ptr [[Q9]], align 8, !tbaa [[TBAA5]]
; CHECK-NEXT:    [[I13:%.*]] = load ptr, ptr [[P_ADDR11]], align 8, !tbaa [[TBAA5]]
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds { i16, i16, i16, i16 }, ptr [[I13]], i64 0, i32 0
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds { i16, i16, i16, i16 }, ptr [[I12]], i64 0, i32 0
; CHECK-NEXT:    [[TMP2:%.*]] = load i16, ptr [[TMP0]], align 2, !tbaa [[TBAA9:![0-9]+]]
; CHECK-NEXT:    store i16 [[TMP2]], ptr [[TMP1]], align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds { i16, i16, i16, i16 }, ptr [[I13]], i64 0, i32 1
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds { i16, i16, i16, i16 }, ptr [[I12]], i64 0, i32 1
; CHECK-NEXT:    [[TMP5:%.*]] = load i16, ptr [[TMP3]], align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    store i16 [[TMP5]], ptr [[TMP4]], align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds { i16, i16, i16, i16 }, ptr [[I13]], i64 0, i32 2
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr inbounds { i16, i16, i16, i16 }, ptr [[I12]], i64 0, i32 2
; CHECK-NEXT:    [[TMP8:%.*]] = load i16, ptr [[TMP6]], align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    store i16 [[TMP8]], ptr [[TMP7]], align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr inbounds { i16, i16, i16, i16 }, ptr [[I13]], i64 0, i32 3
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr inbounds { i16, i16, i16, i16 }, ptr [[I12]], i64 0, i32 3
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2, !tbaa [[TBAA9]]
; CHECK-NEXT:    ret i32 0
;
entry:
  %p.addr = alloca ptr, align 8
  %q = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8, !tbaa !5
  %q.addr = alloca ptr, align 8
  %p.addr.addr = alloca ptr, align 8
  store ptr %q, ptr %q.addr, align 8
  store ptr %p.addr, ptr %p.addr.addr, align 8
  %q9 = load volatile ptr, ptr %q.addr, align 8
  %p.addr11 = load volatile ptr, ptr %p.addr.addr, align 8
  %i12 = load ptr, ptr %q9, align 8, !tbaa !5
  %i13 = load ptr, ptr %p.addr11, align 8, !tbaa !5
  call void @llvm.memcpy.p0.p0.i64(ptr align 2 %i12, ptr align 2 %i13, i64 8, i1 false), !tbaa.struct !11
  ret i32 0
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg)

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"Virtual Function Elim", i32 0}
!2 = !{i32 1, !"ThinLTO", i32 0}
!3 = !{i32 1, !"EnableSplitLTOUnit", i32 1}
!4 = !{!"Intel(R) oneAPI DPC++ Compiler 2021.2.0 (YYYY.x.0.MMDD)"}
!5 = !{!6, !6, i64 0}
!6 = !{!"pointer@_ZTSP5Pixel", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !7, i64 0}
!11 = !{i64 0, i64 2, !12, i64 2, i64 2, !12, i64 4, i64 2, !12, i64 6, i64 2, !12}
!12 = !{!13, !13, i64 0}
!13 = !{!"short", !7, i64 0}
!14 = !{!15, !13, i64 0}
!15 = !{!"struct@Pixel", !13, i64 0, !13, i64 2, !13, i64 4, !13, i64 6}
!16 = !{!15, !13, i64 2}
!17 = !{!15, !13, i64 4}
!18 = !{!15, !13, i64 6}
