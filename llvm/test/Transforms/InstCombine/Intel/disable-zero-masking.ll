; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes="instcombine" -S -mtriple=i686-linux -mattr=+avx512f,+avx512vl,+avx512dq -enable-intel-advanced-opts=true %s | FileCheck %s

; Function Attrs: nofree nosync nounwind uwtable
define dso_local void @disable-zero-masking(ptr noalias %vec_ptr, ptr noalias %cnt_ptr, ptr noalias %mat_ptr, i64 %offset) #0 {
; CHECK-LABEL: @disable-zero-masking(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load <8 x i64>, ptr [[MAT_PTR:%.*]], align 64
; CHECK-NEXT:    [[ARRAYIDX1:%.*]] = getelementptr inbounds i64, ptr [[MAT_PTR]], i64 8
; CHECK-NEXT:    [[TMP1:%.*]] = load <8 x i64>, ptr [[ARRAYIDX1]], align 64
; CHECK-NEXT:    [[ARRAYIDX3:%.*]] = getelementptr inbounds i64, ptr [[MAT_PTR]], i64 16
; CHECK-NEXT:    [[TMP2:%.*]] = load <8 x i64>, ptr [[ARRAYIDX3]], align 64
; CHECK-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds i64, ptr [[MAT_PTR]], i64 24
; CHECK-NEXT:    [[TMP3:%.*]] = load <8 x i64>, ptr [[ARRAYIDX5]], align 64
; CHECK-NEXT:    [[ARRAYIDX7:%.*]] = getelementptr inbounds i64, ptr [[MAT_PTR]], i64 32
; CHECK-NEXT:    [[TMP4:%.*]] = load <8 x i64>, ptr [[ARRAYIDX7]], align 64
; CHECK-NEXT:    [[ARRAYIDX9:%.*]] = getelementptr inbounds i64, ptr [[MAT_PTR]], i64 40
; CHECK-NEXT:    [[TMP5:%.*]] = load <8 x i64>, ptr [[ARRAYIDX9]], align 64
; CHECK-NEXT:    [[ARRAYIDX11:%.*]] = getelementptr inbounds i64, ptr [[MAT_PTR]], i64 48
; CHECK-NEXT:    [[TMP6:%.*]] = load <8 x i64>, ptr [[ARRAYIDX11]], align 64
; CHECK-NEXT:    [[ARRAYIDX13:%.*]] = getelementptr inbounds i64, ptr [[MAT_PTR]], i64 56
; CHECK-NEXT:    [[TMP7:%.*]] = load <8 x i64>, ptr [[ARRAYIDX13]], align 64
; CHECK-NEXT:    [[ARRAYIDX15:%.*]] = getelementptr inbounds i64, ptr [[VEC_PTR:%.*]], i64 [[OFFSET:%.*]]
; CHECK-NEXT:    [[TMP8:%.*]] = load <8 x i1>, ptr [[ARRAYIDX15]], align 8
; CHECK-NEXT:    [[TMP9:%.*]] = select <8 x i1> [[TMP8]], <8 x i64> [[TMP0]], <8 x i64> zeroinitializer
; CHECK-NEXT:    [[ARRAYIDX19:%.*]] = getelementptr inbounds i8, ptr [[ARRAYIDX15]], i64 1
; CHECK-NEXT:    [[TMP10:%.*]] = load <8 x i1>, ptr [[ARRAYIDX19]], align 1
; CHECK-NEXT:    [[XOR_I_I151:%.*]] = xor <8 x i64> [[TMP9]], [[TMP1]]
; CHECK-NEXT:    [[TMP11:%.*]] = select <8 x i1> [[TMP10]], <8 x i64> [[XOR_I_I151]], <8 x i64> [[TMP9]]
; CHECK-NEXT:    [[ARRAYIDX24:%.*]] = getelementptr inbounds i8, ptr [[ARRAYIDX15]], i64 2
; CHECK-NEXT:    [[TMP12:%.*]] = load <8 x i1>, ptr [[ARRAYIDX24]], align 2
; CHECK-NEXT:    [[XOR_I_I150:%.*]] = xor <8 x i64> [[TMP11]], [[TMP2]]
; CHECK-NEXT:    [[TMP13:%.*]] = select <8 x i1> [[TMP12]], <8 x i64> [[XOR_I_I150]], <8 x i64> [[TMP11]]
; CHECK-NEXT:    [[ARRAYIDX29:%.*]] = getelementptr inbounds i8, ptr [[ARRAYIDX15]], i64 3
; CHECK-NEXT:    [[TMP14:%.*]] = load <8 x i1>, ptr [[ARRAYIDX29]], align 1
; CHECK-NEXT:    [[XOR_I_I149:%.*]] = xor <8 x i64> [[TMP13]], [[TMP3]]
; CHECK-NEXT:    [[TMP15:%.*]] = select <8 x i1> [[TMP14]], <8 x i64> [[XOR_I_I149]], <8 x i64> [[TMP13]]
; CHECK-NEXT:    [[ARRAYIDX34:%.*]] = getelementptr inbounds i8, ptr [[ARRAYIDX15]], i64 4
; CHECK-NEXT:    [[TMP16:%.*]] = load <8 x i1>, ptr [[ARRAYIDX34]], align 4
; CHECK-NEXT:    [[XOR_I_I148:%.*]] = xor <8 x i64> [[TMP15]], [[TMP4]]
; CHECK-NEXT:    [[TMP17:%.*]] = select <8 x i1> [[TMP16]], <8 x i64> [[XOR_I_I148]], <8 x i64> [[TMP15]]
; CHECK-NEXT:    [[ARRAYIDX39:%.*]] = getelementptr inbounds i8, ptr [[ARRAYIDX15]], i64 5
; CHECK-NEXT:    [[TMP18:%.*]] = load <8 x i1>, ptr [[ARRAYIDX39]], align 1
; CHECK-NEXT:    [[XOR_I_I147:%.*]] = xor <8 x i64> [[TMP17]], [[TMP5]]
; CHECK-NEXT:    [[TMP19:%.*]] = select <8 x i1> [[TMP18]], <8 x i64> [[XOR_I_I147]], <8 x i64> [[TMP17]]
; CHECK-NEXT:    [[ARRAYIDX44:%.*]] = getelementptr inbounds i8, ptr [[ARRAYIDX15]], i64 6
; CHECK-NEXT:    [[TMP20:%.*]] = load <8 x i1>, ptr [[ARRAYIDX44]], align 2
; CHECK-NEXT:    [[XOR_I_I146:%.*]] = xor <8 x i64> [[TMP19]], [[TMP6]]
; CHECK-NEXT:    [[TMP21:%.*]] = select <8 x i1> [[TMP20]], <8 x i64> [[XOR_I_I146]], <8 x i64> [[TMP19]]
; CHECK-NEXT:    [[ARRAYIDX49:%.*]] = getelementptr inbounds i8, ptr [[ARRAYIDX15]], i64 7
; CHECK-NEXT:    [[TMP22:%.*]] = load <8 x i1>, ptr [[ARRAYIDX49]], align 1
; CHECK-NEXT:    [[XOR_I_I:%.*]] = xor <8 x i64> [[TMP21]], [[TMP7]]
; CHECK-NEXT:    [[TMP23:%.*]] = select <8 x i1> [[TMP22]], <8 x i64> [[XOR_I_I]], <8 x i64> [[TMP21]]
; CHECK-NEXT:    [[SHUFFLE_I145:%.*]] = shufflevector <8 x i64> [[TMP23]], <8 x i64> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    [[EXTRACT:%.*]] = shufflevector <8 x i64> [[TMP23]], <8 x i64> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
; CHECK-NEXT:    [[XOR_I144:%.*]] = xor <4 x i64> [[EXTRACT]], [[SHUFFLE_I145]]
; CHECK-NEXT:    [[SHUFFLE_I:%.*]] = shufflevector <4 x i64> [[XOR_I144]], <4 x i64> poison, <2 x i32> <i32 0, i32 1>
; CHECK-NEXT:    [[EXTRACT59:%.*]] = shufflevector <4 x i64> [[XOR_I144]], <4 x i64> poison, <2 x i32> <i32 2, i32 3>
; CHECK-NEXT:    [[XOR_I143:%.*]] = xor <2 x i64> [[EXTRACT59]], [[SHUFFLE_I]]
; CHECK-NEXT:    [[TMP24:%.*]] = bitcast <2 x i64> [[XOR_I143]] to <4 x i32>
; CHECK-NEXT:    [[PERMIL:%.*]] = shufflevector <4 x i32> [[TMP24]], <4 x i32> poison, <4 x i32> <i32 2, i32 3, i32 poison, i32 poison>
; CHECK-NEXT:    [[TMP25:%.*]] = bitcast <4 x i32> [[PERMIL]] to <2 x i64>
; CHECK-NEXT:    [[XOR_I:%.*]] = xor <2 x i64> [[XOR_I143]], [[TMP25]]
; CHECK-NEXT:    [[TMP26:%.*]] = extractelement <2 x i64> [[XOR_I]], i64 0
; CHECK-NEXT:    [[SHR:%.*]] = lshr i64 [[TMP26]], 32
; CHECK-NEXT:    [[OR:%.*]] = or i64 [[TMP26]], [[SHR]]
; CHECK-NEXT:    [[SHR62:%.*]] = lshr i64 [[OR]], 16
; CHECK-NEXT:    [[AND63:%.*]] = and i64 [[OR]], [[SHR62]]
; CHECK-NEXT:    [[AND64:%.*]] = and i64 [[AND63]], 255
; CHECK-NEXT:    [[SHR65:%.*]] = lshr i64 [[AND63]], 8
; CHECK-NEXT:    [[AND66:%.*]] = and i64 [[SHR65]], 255
; CHECK-NEXT:    [[ADD:%.*]] = add nuw nsw i64 [[AND64]], [[AND66]]
; CHECK-NEXT:    [[ARRAYIDX67:%.*]] = getelementptr inbounds i32, ptr [[CNT_PTR:%.*]], i64 [[ADD]]
; CHECK-NEXT:    [[TMP27:%.*]] = load i32, ptr [[ARRAYIDX67]], align 4
; CHECK-NEXT:    [[INC:%.*]] = add nsw i32 [[TMP27]], 1
; CHECK-NEXT:    store i32 [[INC]], ptr [[ARRAYIDX67]], align 4
; CHECK-NEXT:    ret void
;
entry:
  %0 = load <8 x i64>, ptr %mat_ptr, align 64
  %arrayidx1 = getelementptr inbounds i64, ptr %mat_ptr, i64 8
  %1 = load <8 x i64>, ptr %arrayidx1, align 64
  %arrayidx3 = getelementptr inbounds i64, ptr %mat_ptr, i64 16
  %2 = load <8 x i64>, ptr %arrayidx3, align 64
  %arrayidx5 = getelementptr inbounds i64, ptr %mat_ptr, i64 24
  %3 = load <8 x i64>, ptr %arrayidx5, align 64
  %arrayidx7 = getelementptr inbounds i64, ptr %mat_ptr, i64 32
  %4 = load <8 x i64>, ptr %arrayidx7, align 64
  %arrayidx9 = getelementptr inbounds i64, ptr %mat_ptr, i64 40
  %5 = load <8 x i64>, ptr %arrayidx9, align 64
  %arrayidx11 = getelementptr inbounds i64, ptr %mat_ptr, i64 48
  %6 = load <8 x i64>, ptr %arrayidx11, align 64
  %arrayidx13 = getelementptr inbounds i64, ptr %mat_ptr, i64 56
  %7 = load <8 x i64>, ptr %arrayidx13, align 64
  %arrayidx15 = getelementptr inbounds i64, ptr %vec_ptr, i64 %offset
  %8 = load i8, ptr %arrayidx15, align 8
  %9 = bitcast i8 %8 to <8 x i1>
  %10 = select <8 x i1> %9, <8 x i64> %0, <8 x i64> zeroinitializer
  %arrayidx19 = getelementptr inbounds i8, ptr %arrayidx15, i64 1
  %11 = load i8, ptr %arrayidx19, align 1
  %xor.i.i151 = xor <8 x i64> %10, %1
  %12 = bitcast i8 %11 to <8 x i1>
  %13 = select <8 x i1> %12, <8 x i64> %xor.i.i151, <8 x i64> %10
  %arrayidx24 = getelementptr inbounds i8, ptr %arrayidx15, i64 2
  %14 = load i8, ptr %arrayidx24, align 2
  %xor.i.i150 = xor <8 x i64> %13, %2
  %15 = bitcast i8 %14 to <8 x i1>
  %16 = select <8 x i1> %15, <8 x i64> %xor.i.i150, <8 x i64> %13
  %arrayidx29 = getelementptr inbounds i8, ptr %arrayidx15, i64 3
  %17 = load i8, ptr %arrayidx29, align 1
  %xor.i.i149 = xor <8 x i64> %16, %3
  %18 = bitcast i8 %17 to <8 x i1>
  %19 = select <8 x i1> %18, <8 x i64> %xor.i.i149, <8 x i64> %16
  %arrayidx34 = getelementptr inbounds i8, ptr %arrayidx15, i64 4
  %20 = load i8, ptr %arrayidx34, align 4
  %xor.i.i148 = xor <8 x i64> %19, %4
  %21 = bitcast i8 %20 to <8 x i1>
  %22 = select <8 x i1> %21, <8 x i64> %xor.i.i148, <8 x i64> %19
  %arrayidx39 = getelementptr inbounds i8, ptr %arrayidx15, i64 5
  %23 = load i8, ptr %arrayidx39, align 1
  %xor.i.i147 = xor <8 x i64> %22, %5
  %24 = bitcast i8 %23 to <8 x i1>
  %25 = select <8 x i1> %24, <8 x i64> %xor.i.i147, <8 x i64> %22
  %arrayidx44 = getelementptr inbounds i8, ptr %arrayidx15, i64 6
  %26 = load i8, ptr %arrayidx44, align 2
  %xor.i.i146 = xor <8 x i64> %25, %6
  %27 = bitcast i8 %26 to <8 x i1>
  %28 = select <8 x i1> %27, <8 x i64> %xor.i.i146, <8 x i64> %25
  %arrayidx49 = getelementptr inbounds i8, ptr %arrayidx15, i64 7
  %29 = load i8, ptr %arrayidx49, align 1
  %xor.i.i = xor <8 x i64> %28, %7
  %30 = bitcast i8 %29 to <8 x i1>
  %31 = select <8 x i1> %30, <8 x i64> %xor.i.i, <8 x i64> %28
  %shuffle.i145 = shufflevector <8 x i64> %31, <8 x i64> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %extract = shufflevector <8 x i64> %31, <8 x i64> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %xor.i144 = xor <4 x i64> %extract, %shuffle.i145
  %shuffle.i = shufflevector <4 x i64> %xor.i144, <4 x i64> poison, <2 x i32> <i32 0, i32 1>
  %extract59 = shufflevector <4 x i64> %xor.i144, <4 x i64> poison, <2 x i32> <i32 2, i32 3>
  %xor.i143 = xor <2 x i64> %extract59, %shuffle.i
  %32 = bitcast <2 x i64> %xor.i143 to <4 x i32>
  %permil = shufflevector <4 x i32> %32, <4 x i32> poison, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %33 = bitcast <4 x i32> %permil to <2 x i64>
  %xor.i = xor <2 x i64> %33, %xor.i143
  %34 = extractelement <2 x i64> %xor.i, i64 0
  %shr = lshr i64 %34, 32
  %or = or i64 %34, %shr
  %shr62 = lshr i64 %or, 16
  %and63 = and i64 %or, %shr62
  %and64 = and i64 %and63, 255
  %shr65 = lshr i64 %and63, 8
  %and66 = and i64 %shr65, 255
  %add = add nuw nsw i64 %and64, %and66
  %arrayidx67 = getelementptr inbounds i32, ptr %cnt_ptr, i64 %add
  %35 = load i32, ptr %arrayidx67, align 4
  %inc = add nsw i32 %35, 1
  store i32 %inc, ptr %arrayidx67, align 4
  ret void
}

; prevents gep+gep optimization. this is default for xmain.
attributes #0 = {"loopopt-pipeline" = "light"}
