; INTEL_FEATURE_SW_ADVANCED
; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; REQUIRES: intel_feature_sw_advanced
; RUN: opt < %s -S -passes="instcombine" -enable-intel-advanced-opts=true | FileCheck %s

; Don't transform A-B == 0 to A == B, for AVX512. x86 CG will make this
; decision itself.

target triple = "i686-pc-linux-gnu"

declare void @use(i32)
declare void @use_vec(<2 x i8>)

define i1 @sub_eq_zero_use(i32 %x, i32 %y) #0 {
; CHECK-LABEL: @sub_eq_zero_use(
; CHECK-NEXT:    [[SUB:%.*]] = sub i32 [[X:%.*]], [[Y:%.*]]
; CHECK-NEXT:    call void @use(i32 [[SUB]])
; CHECK-NEXT:    [[R:%.*]] = icmp eq i32 [[SUB]], 0
; CHECK-NEXT:    ret i1 [[R]]
;
  %sub = sub i32 %x, %y
  call void @use(i32 %sub)
  %r = icmp eq i32 %sub, 0
  ret i1 %r
}

define <2 x i1> @sub_ne_zero_use(<2 x i8> %x, <2 x i8> %y) #0 {
; CHECK-LABEL: @sub_ne_zero_use(
; CHECK-NEXT:    [[SUB:%.*]] = sub <2 x i8> [[X:%.*]], [[Y:%.*]]
; CHECK-NEXT:    call void @use_vec(<2 x i8> [[SUB]])
; CHECK-NEXT:    [[R:%.*]] = icmp eq <2 x i8> [[SUB]], zeroinitializer
; CHECK-NEXT:    ret <2 x i1> [[R]]
;
  %sub = sub <2 x i8> %x, %y
  call void @use_vec(<2 x i8> %sub)
  %r = icmp eq <2 x i8> %sub, zeroinitializer
  ret <2 x i1> %r
}


attributes #0 = { "target-cpu"="skylake-avx512" "target-features"="+avx512f,+avx512vl,+avx512dq"}
; end INTEL_FEATURE_SW_ADVANCED
