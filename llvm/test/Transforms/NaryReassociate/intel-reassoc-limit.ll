; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -nary-reassociate -nary-reassoc-inst-limit=4 -S | FileCheck %s

; Test that the instruction limit works (disables reassoc on a block-by-block
; basis)

define i32 @foo(i32 %t4) {
; CHECK-LABEL: @foo(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[T5:%.*]] = add i32 [[T4:%.*]], 8
; CHECK-NEXT:    [[T13:%.*]] = add i32 [[T4]], -128
; CHECK-NEXT:    [[T14:%.*]] = add i32 [[T13]], 8
; CHECK-NEXT:    [[T21:%.*]] = add i32 119, [[T4]]
; CHECK-NEXT:    br label [[SMALLBLOCK:%.*]]
; CHECK:       smallblock:
; CHECK-NEXT:    [[A:%.*]] = add i32 [[T4]], -128
; CHECK-NEXT:    [[B:%.*]] = add i32 [[A]], -128
; CHECK-NEXT:    br label [[RESULT:%.*]]
; CHECK:       result:
; CHECK-NEXT:    [[RES:%.*]] = add i32 [[B]], [[T21]]
; CHECK-NEXT:    ret i32 [[RES]]
;
entry:
; this block is skipped by the limit.
; %t23 is still removed and replaced with %b, when block "result" is analyzed.
  %t5 = add i32 %t4, 8
  %t13 = add i32 %t4, -128
  %t14 = add i32 %t13, 8
  %t21 = add i32 119, %t4
  %t23 = add i32 %t21, -128
  br label %smallblock

; this block is optimized.
smallblock:
  %a = add i32 %t4, -128
  %b = add i32 %a, -128
  %c = add i32 %b, 128 ; can be removed, reuse %a instead
  br label %result

result:
  %res = add i32 %t23, %c
  ret i32 %res
}

