; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes=mem2reg < %s -S | FileCheck %s

; If alloca is for private variable used inside SIMD region, it can be promoted
define void @test1() {
; CHECK-LABEL: @test1(
; CHECK-NEXT:    [[TMP1:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"() ]
; CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP1]]) [ "DIR.OMP.END.SIMD"() ]
; CHECK-NEXT:    ret void
;
  %x = alloca i32
  %y = alloca i32
  %1 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.PRIVATE"(i32* %x), "QUAL.OMP.PRIVATE"(i32* %y) ]
  store i32 42, i32* %x
  store i32 41, i32* %y
  call void @llvm.directive.region.exit(token %1) [ "DIR.OMP.END.SIMD"() ]
  ret void
}

; If alloca is used not in SIMD region, it won't be promoted
define void @test2() {
; CHECK-LABEL: @test2(
; CHECK-NEXT:    [[X:%.*]] = alloca i32
; CHECK-NEXT:    [[TMP1:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.PARALLEL"(), "QUAL.OMP.PRIVATE"(i32* [[X]]) ]
; CHECK-NEXT:    store i32 42, i32* [[X]]
; CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP1]]) [ "DIR.OMP.END.PARALLEL"() ]
; CHECK-NEXT:    ret void
;
  %x = alloca i32
  %1 = call token @llvm.directive.region.entry() [ "DIR.OMP.PARALLEL"(), "QUAL.OMP.PRIVATE"(i32* %x) ]
  store i32 42, i32* %x
  call void @llvm.directive.region.exit(token %1) [ "DIR.OMP.END.PARALLEL"() ]
  ret void
}

; If alloca is used in SIMD region but not for private variable, it won't be promoted
define void @test3() {
; CHECK-LABEL: @test3(
; CHECK-NEXT:    [[X:%.*]] = alloca i32
; CHECK-NEXT:    [[TMP1:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.REDUCTION.ADD"(i32* [[X]]) ]
; CHECK-NEXT:    store i32 42, i32* [[X]]
; CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP1]]) [ "DIR.OMP.END.SIMD"() ]
; CHECK-NEXT:    ret void
;
  %x = alloca i32
  %1 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.REDUCTION.ADD"(i32* %x) ]
  store i32 42, i32* %x
  call void @llvm.directive.region.exit(token %1) [ "DIR.OMP.END.SIMD"() ]
  ret void
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
