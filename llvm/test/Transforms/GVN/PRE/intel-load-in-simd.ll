; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -gvn -S < %s | FileCheck %s

; Suppress PRE for loads in SIMD regions as it can make the loop non-vectorizable.

define dso_local void @foo(float* nocapture %a, i32 %N) {
entry:
  %i.linear.iv = alloca i32, align 4
  %cmp318 = icmp slt i32 %N, 1
  br i1 %cmp318, label %omp.precond.end, label %omp.inner.for.body.lr.ph

; CHECK:       omp.inner.for.body.lr.ph:
; CHECK-NOT:   %.pre = load
; CHECK:       omp.inner.for.body:
omp.inner.for.body.lr.ph:                         ; preds = %entry
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.LINEAR:IV"(i32* %i.linear.iv, i32 1), "QUAL.OMP.NORMALIZED.IV"(i8* null), "QUAL.OMP.NORMALIZED.UB"(i8* null) ]
  %1 = add i32 %N, -1
  %2 = zext i32 %1 to i64
  %wide.trip.count = sext i32 %N to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.inner.for.body.lr.ph, %omp.inner.for.body
  %indvars.iv = phi i64 [ 0, %omp.inner.for.body.lr.ph ], [ %indvars.iv.next, %omp.inner.for.body ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %ptridx = getelementptr inbounds float, float* %a, i64 %indvars.iv.next
  %3 = load float, float* %ptridx, align 4
  %ptridx7 = getelementptr inbounds float, float* %a, i64 %indvars.iv
  %4 = load float, float* %ptridx7, align 4
  %add8 = fadd float %3, %4
  store float %add8, float* %ptridx7, align 4
  %exitcond = icmp ne i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond, label %omp.inner.for.body, label %omp.inner.for.cond.omp.loop.exit.split.loopexit_crit_edge

omp.inner.for.cond.omp.loop.exit.split.loopexit_crit_edge: ; preds = %omp.inner.for.body
  %5 = add nuw nsw i64 %2, 1
  %6 = trunc i64 %5 to i32
  store i32 %6, i32* %i.linear.iv, align 4
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %omp.inner.for.cond.omp.loop.exit.split.loopexit_crit_edge, %entry
  ret void
}

declare token @llvm.directive.region.entry() #2
declare void @llvm.directive.region.exit(token) #2
