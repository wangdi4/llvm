; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -bugpoint-enable-legacy-pm -vector-library=SVML -iml-trans -S < %s | FileCheck %s

; check if __svml_cexp16_mask is correctly split or scalarized when VL = 1.

target triple = "x86_64-pc-linux-gnu"

define <32 x double> @test_cexp(<32 x double> %input1, <16 x i1> %input2) {
; CHECK-LABEL: define <32 x double> @test_cexp(
; CHECK-SAME: <32 x double> [[INPUT1:%.*]], <16 x i1> [[INPUT2:%.*]]) {
; CHECK-NEXT:    [[INPUT1_PART_0_OF_16_:%.*]] = shufflevector <32 x double> [[INPUT1]], <32 x double> undef, <2 x i32> <i32 0, i32 1>
; CHECK-NEXT:    [[VCALL:%.*]] = call fast svml_cc <2 x double> @__svml_cexp1(<2 x double> [[INPUT1_PART_0_OF_16_]])
; CHECK-NEXT:    [[INPUT2_PART_0_OF_16:%.*]] = extractelement <16 x i1> [[INPUT2]], i32 0
; CHECK-NEXT:    [[VCALL_VCALL:%.*]] = select fast i1 [[INPUT2_PART_0_OF_16]], <2 x double> [[VCALL]], <2 x double> [[INPUT1_PART_0_OF_16_]]
; CHECK-NEXT:    [[INPUT1_PART_1_OF_16_:%.*]] = shufflevector <32 x double> [[INPUT1]], <32 x double> undef, <2 x i32> <i32 2, i32 3>
; CHECK-NEXT:    [[VCALL1:%.*]] = call fast svml_cc <2 x double> @__svml_cexp1(<2 x double> [[INPUT1_PART_1_OF_16_]])
; CHECK-NEXT:    [[INPUT2_PART_1_OF_16:%.*]] = extractelement <16 x i1> [[INPUT2]], i32 1
; CHECK-NEXT:    [[VCALL_VCALL2:%.*]] = select fast i1 [[INPUT2_PART_1_OF_16]], <2 x double> [[VCALL1]], <2 x double> [[INPUT1_PART_1_OF_16_]]
; CHECK-NEXT:    [[INPUT1_PART_2_OF_16_:%.*]] = shufflevector <32 x double> [[INPUT1]], <32 x double> undef, <2 x i32> <i32 4, i32 5>
; CHECK-NEXT:    [[VCALL3:%.*]] = call fast svml_cc <2 x double> @__svml_cexp1(<2 x double> [[INPUT1_PART_2_OF_16_]])
; CHECK-NEXT:    [[INPUT2_PART_2_OF_16:%.*]] = extractelement <16 x i1> [[INPUT2]], i32 2
; CHECK-NEXT:    [[VCALL_VCALL4:%.*]] = select fast i1 [[INPUT2_PART_2_OF_16]], <2 x double> [[VCALL3]], <2 x double> [[INPUT1_PART_2_OF_16_]]
; CHECK-NEXT:    [[INPUT1_PART_3_OF_16_:%.*]] = shufflevector <32 x double> [[INPUT1]], <32 x double> undef, <2 x i32> <i32 6, i32 7>
; CHECK-NEXT:    [[VCALL5:%.*]] = call fast svml_cc <2 x double> @__svml_cexp1(<2 x double> [[INPUT1_PART_3_OF_16_]])
; CHECK-NEXT:    [[INPUT2_PART_3_OF_16:%.*]] = extractelement <16 x i1> [[INPUT2]], i32 3
; CHECK-NEXT:    [[VCALL_VCALL6:%.*]] = select fast i1 [[INPUT2_PART_3_OF_16]], <2 x double> [[VCALL5]], <2 x double> [[INPUT1_PART_3_OF_16_]]
; CHECK-NEXT:    [[INPUT1_PART_4_OF_16_:%.*]] = shufflevector <32 x double> [[INPUT1]], <32 x double> undef, <2 x i32> <i32 8, i32 9>
; CHECK-NEXT:    [[VCALL7:%.*]] = call fast svml_cc <2 x double> @__svml_cexp1(<2 x double> [[INPUT1_PART_4_OF_16_]])
; CHECK-NEXT:    [[INPUT2_PART_4_OF_16:%.*]] = extractelement <16 x i1> [[INPUT2]], i32 4
; CHECK-NEXT:    [[VCALL_VCALL8:%.*]] = select fast i1 [[INPUT2_PART_4_OF_16]], <2 x double> [[VCALL7]], <2 x double> [[INPUT1_PART_4_OF_16_]]
; CHECK-NEXT:    [[INPUT1_PART_5_OF_16_:%.*]] = shufflevector <32 x double> [[INPUT1]], <32 x double> undef, <2 x i32> <i32 10, i32 11>
; CHECK-NEXT:    [[VCALL9:%.*]] = call fast svml_cc <2 x double> @__svml_cexp1(<2 x double> [[INPUT1_PART_5_OF_16_]])
; CHECK-NEXT:    [[INPUT2_PART_5_OF_16:%.*]] = extractelement <16 x i1> [[INPUT2]], i32 5
; CHECK-NEXT:    [[VCALL_VCALL10:%.*]] = select fast i1 [[INPUT2_PART_5_OF_16]], <2 x double> [[VCALL9]], <2 x double> [[INPUT1_PART_5_OF_16_]]
; CHECK-NEXT:    [[INPUT1_PART_6_OF_16_:%.*]] = shufflevector <32 x double> [[INPUT1]], <32 x double> undef, <2 x i32> <i32 12, i32 13>
; CHECK-NEXT:    [[VCALL11:%.*]] = call fast svml_cc <2 x double> @__svml_cexp1(<2 x double> [[INPUT1_PART_6_OF_16_]])
; CHECK-NEXT:    [[INPUT2_PART_6_OF_16:%.*]] = extractelement <16 x i1> [[INPUT2]], i32 6
; CHECK-NEXT:    [[VCALL_VCALL12:%.*]] = select fast i1 [[INPUT2_PART_6_OF_16]], <2 x double> [[VCALL11]], <2 x double> [[INPUT1_PART_6_OF_16_]]
; CHECK-NEXT:    [[INPUT1_PART_7_OF_16_:%.*]] = shufflevector <32 x double> [[INPUT1]], <32 x double> undef, <2 x i32> <i32 14, i32 15>
; CHECK-NEXT:    [[VCALL13:%.*]] = call fast svml_cc <2 x double> @__svml_cexp1(<2 x double> [[INPUT1_PART_7_OF_16_]])
; CHECK-NEXT:    [[INPUT2_PART_7_OF_16:%.*]] = extractelement <16 x i1> [[INPUT2]], i32 7
; CHECK-NEXT:    [[VCALL_VCALL14:%.*]] = select fast i1 [[INPUT2_PART_7_OF_16]], <2 x double> [[VCALL13]], <2 x double> [[INPUT1_PART_7_OF_16_]]
; CHECK-NEXT:    [[INPUT1_PART_8_OF_16_:%.*]] = shufflevector <32 x double> [[INPUT1]], <32 x double> undef, <2 x i32> <i32 16, i32 17>
; CHECK-NEXT:    [[VCALL15:%.*]] = call fast svml_cc <2 x double> @__svml_cexp1(<2 x double> [[INPUT1_PART_8_OF_16_]])
; CHECK-NEXT:    [[INPUT2_PART_8_OF_16:%.*]] = extractelement <16 x i1> [[INPUT2]], i32 8
; CHECK-NEXT:    [[VCALL_VCALL16:%.*]] = select fast i1 [[INPUT2_PART_8_OF_16]], <2 x double> [[VCALL15]], <2 x double> [[INPUT1_PART_8_OF_16_]]
; CHECK-NEXT:    [[INPUT1_PART_9_OF_16_:%.*]] = shufflevector <32 x double> [[INPUT1]], <32 x double> undef, <2 x i32> <i32 18, i32 19>
; CHECK-NEXT:    [[VCALL17:%.*]] = call fast svml_cc <2 x double> @__svml_cexp1(<2 x double> [[INPUT1_PART_9_OF_16_]])
; CHECK-NEXT:    [[INPUT2_PART_9_OF_16:%.*]] = extractelement <16 x i1> [[INPUT2]], i32 9
; CHECK-NEXT:    [[VCALL_VCALL18:%.*]] = select fast i1 [[INPUT2_PART_9_OF_16]], <2 x double> [[VCALL17]], <2 x double> [[INPUT1_PART_9_OF_16_]]
; CHECK-NEXT:    [[INPUT1_PART_10_OF_16_:%.*]] = shufflevector <32 x double> [[INPUT1]], <32 x double> undef, <2 x i32> <i32 20, i32 21>
; CHECK-NEXT:    [[VCALL19:%.*]] = call fast svml_cc <2 x double> @__svml_cexp1(<2 x double> [[INPUT1_PART_10_OF_16_]])
; CHECK-NEXT:    [[INPUT2_PART_10_OF_16:%.*]] = extractelement <16 x i1> [[INPUT2]], i32 10
; CHECK-NEXT:    [[VCALL_VCALL20:%.*]] = select fast i1 [[INPUT2_PART_10_OF_16]], <2 x double> [[VCALL19]], <2 x double> [[INPUT1_PART_10_OF_16_]]
; CHECK-NEXT:    [[INPUT1_PART_11_OF_16_:%.*]] = shufflevector <32 x double> [[INPUT1]], <32 x double> undef, <2 x i32> <i32 22, i32 23>
; CHECK-NEXT:    [[VCALL21:%.*]] = call fast svml_cc <2 x double> @__svml_cexp1(<2 x double> [[INPUT1_PART_11_OF_16_]])
; CHECK-NEXT:    [[INPUT2_PART_11_OF_16:%.*]] = extractelement <16 x i1> [[INPUT2]], i32 11
; CHECK-NEXT:    [[VCALL_VCALL22:%.*]] = select fast i1 [[INPUT2_PART_11_OF_16]], <2 x double> [[VCALL21]], <2 x double> [[INPUT1_PART_11_OF_16_]]
; CHECK-NEXT:    [[INPUT1_PART_12_OF_16_:%.*]] = shufflevector <32 x double> [[INPUT1]], <32 x double> undef, <2 x i32> <i32 24, i32 25>
; CHECK-NEXT:    [[VCALL23:%.*]] = call fast svml_cc <2 x double> @__svml_cexp1(<2 x double> [[INPUT1_PART_12_OF_16_]])
; CHECK-NEXT:    [[INPUT2_PART_12_OF_16:%.*]] = extractelement <16 x i1> [[INPUT2]], i32 12
; CHECK-NEXT:    [[VCALL_VCALL24:%.*]] = select fast i1 [[INPUT2_PART_12_OF_16]], <2 x double> [[VCALL23]], <2 x double> [[INPUT1_PART_12_OF_16_]]
; CHECK-NEXT:    [[INPUT1_PART_13_OF_16_:%.*]] = shufflevector <32 x double> [[INPUT1]], <32 x double> undef, <2 x i32> <i32 26, i32 27>
; CHECK-NEXT:    [[VCALL25:%.*]] = call fast svml_cc <2 x double> @__svml_cexp1(<2 x double> [[INPUT1_PART_13_OF_16_]])
; CHECK-NEXT:    [[INPUT2_PART_13_OF_16:%.*]] = extractelement <16 x i1> [[INPUT2]], i32 13
; CHECK-NEXT:    [[VCALL_VCALL26:%.*]] = select fast i1 [[INPUT2_PART_13_OF_16]], <2 x double> [[VCALL25]], <2 x double> [[INPUT1_PART_13_OF_16_]]
; CHECK-NEXT:    [[INPUT1_PART_14_OF_16_:%.*]] = shufflevector <32 x double> [[INPUT1]], <32 x double> undef, <2 x i32> <i32 28, i32 29>
; CHECK-NEXT:    [[VCALL27:%.*]] = call fast svml_cc <2 x double> @__svml_cexp1(<2 x double> [[INPUT1_PART_14_OF_16_]])
; CHECK-NEXT:    [[INPUT2_PART_14_OF_16:%.*]] = extractelement <16 x i1> [[INPUT2]], i32 14
; CHECK-NEXT:    [[VCALL_VCALL28:%.*]] = select fast i1 [[INPUT2_PART_14_OF_16]], <2 x double> [[VCALL27]], <2 x double> [[INPUT1_PART_14_OF_16_]]
; CHECK-NEXT:    [[INPUT1_PART_15_OF_16_:%.*]] = shufflevector <32 x double> [[INPUT1]], <32 x double> undef, <2 x i32> <i32 30, i32 31>
; CHECK-NEXT:    [[VCALL29:%.*]] = call fast svml_cc <2 x double> @__svml_cexp1(<2 x double> [[INPUT1_PART_15_OF_16_]])
; CHECK-NEXT:    [[INPUT2_PART_15_OF_16:%.*]] = extractelement <16 x i1> [[INPUT2]], i32 15
; CHECK-NEXT:    [[VCALL_VCALL30:%.*]] = select fast i1 [[INPUT2_PART_15_OF_16]], <2 x double> [[VCALL29]], <2 x double> [[INPUT1_PART_15_OF_16_]]
; CHECK-NEXT:    [[TMP1:%.*]] = shufflevector <2 x double> [[VCALL_VCALL]], <2 x double> [[VCALL_VCALL2]], <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    [[TMP2:%.*]] = shufflevector <2 x double> [[VCALL_VCALL4]], <2 x double> [[VCALL_VCALL6]], <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    [[TMP3:%.*]] = shufflevector <2 x double> [[VCALL_VCALL8]], <2 x double> [[VCALL_VCALL10]], <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    [[TMP4:%.*]] = shufflevector <2 x double> [[VCALL_VCALL12]], <2 x double> [[VCALL_VCALL14]], <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    [[TMP5:%.*]] = shufflevector <2 x double> [[VCALL_VCALL16]], <2 x double> [[VCALL_VCALL18]], <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    [[TMP6:%.*]] = shufflevector <2 x double> [[VCALL_VCALL20]], <2 x double> [[VCALL_VCALL22]], <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    [[TMP7:%.*]] = shufflevector <2 x double> [[VCALL_VCALL24]], <2 x double> [[VCALL_VCALL26]], <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    [[TMP8:%.*]] = shufflevector <2 x double> [[VCALL_VCALL28]], <2 x double> [[VCALL_VCALL30]], <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    [[TMP9:%.*]] = shufflevector <4 x double> [[TMP1]], <4 x double> [[TMP2]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; CHECK-NEXT:    [[TMP10:%.*]] = shufflevector <4 x double> [[TMP3]], <4 x double> [[TMP4]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; CHECK-NEXT:    [[TMP11:%.*]] = shufflevector <4 x double> [[TMP5]], <4 x double> [[TMP6]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; CHECK-NEXT:    [[TMP12:%.*]] = shufflevector <4 x double> [[TMP7]], <4 x double> [[TMP8]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; CHECK-NEXT:    [[TMP13:%.*]] = shufflevector <8 x double> [[TMP9]], <8 x double> [[TMP10]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; CHECK-NEXT:    [[TMP14:%.*]] = shufflevector <8 x double> [[TMP11]], <8 x double> [[TMP12]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; CHECK-NEXT:    [[SHUFFLE_COMB:%.*]] = shufflevector <16 x double> [[TMP13]], <16 x double> [[TMP14]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
; CHECK-NEXT:    ret <32 x double> [[SHUFFLE_COMB]]
;
  %1 = call fast svml_cc <32 x double> @__svml_cexp16_mask(<32 x double> undef, <16 x i1> %input2, <32 x double> %input1)
  ret <32 x double> %1
}

define <32 x double> @test_clog(<32 x double> %input1, <16 x i1> %input2) {
; CHECK-LABEL: define <32 x double> @test_clog(
; CHECK-SAME: <32 x double> [[INPUT1:%.*]], <16 x i1> [[INPUT2:%.*]]) {
; CHECK-NEXT:    [[INPUT1_PART_0_OF_16_:%.*]] = shufflevector <32 x double> [[INPUT1]], <32 x double> undef, <2 x i32> <i32 0, i32 1>
; CHECK-NEXT:    [[VCALL:%.*]] = call fast svml_cc <2 x double> @__svml_clog1(<2 x double> [[INPUT1_PART_0_OF_16_]])
; CHECK-NEXT:    [[INPUT2_PART_0_OF_16:%.*]] = extractelement <16 x i1> [[INPUT2]], i32 0
; CHECK-NEXT:    [[VCALL_VCALL:%.*]] = select fast i1 [[INPUT2_PART_0_OF_16]], <2 x double> [[VCALL]], <2 x double> [[INPUT1_PART_0_OF_16_]]
; CHECK-NEXT:    [[INPUT1_PART_1_OF_16_:%.*]] = shufflevector <32 x double> [[INPUT1]], <32 x double> undef, <2 x i32> <i32 2, i32 3>
; CHECK-NEXT:    [[VCALL1:%.*]] = call fast svml_cc <2 x double> @__svml_clog1(<2 x double> [[INPUT1_PART_1_OF_16_]])
; CHECK-NEXT:    [[INPUT2_PART_1_OF_16:%.*]] = extractelement <16 x i1> [[INPUT2]], i32 1
; CHECK-NEXT:    [[VCALL_VCALL2:%.*]] = select fast i1 [[INPUT2_PART_1_OF_16]], <2 x double> [[VCALL1]], <2 x double> [[INPUT1_PART_1_OF_16_]]
; CHECK-NEXT:    [[INPUT1_PART_2_OF_16_:%.*]] = shufflevector <32 x double> [[INPUT1]], <32 x double> undef, <2 x i32> <i32 4, i32 5>
; CHECK-NEXT:    [[VCALL3:%.*]] = call fast svml_cc <2 x double> @__svml_clog1(<2 x double> [[INPUT1_PART_2_OF_16_]])
; CHECK-NEXT:    [[INPUT2_PART_2_OF_16:%.*]] = extractelement <16 x i1> [[INPUT2]], i32 2
; CHECK-NEXT:    [[VCALL_VCALL4:%.*]] = select fast i1 [[INPUT2_PART_2_OF_16]], <2 x double> [[VCALL3]], <2 x double> [[INPUT1_PART_2_OF_16_]]
; CHECK-NEXT:    [[INPUT1_PART_3_OF_16_:%.*]] = shufflevector <32 x double> [[INPUT1]], <32 x double> undef, <2 x i32> <i32 6, i32 7>
; CHECK-NEXT:    [[VCALL5:%.*]] = call fast svml_cc <2 x double> @__svml_clog1(<2 x double> [[INPUT1_PART_3_OF_16_]])
; CHECK-NEXT:    [[INPUT2_PART_3_OF_16:%.*]] = extractelement <16 x i1> [[INPUT2]], i32 3
; CHECK-NEXT:    [[VCALL_VCALL6:%.*]] = select fast i1 [[INPUT2_PART_3_OF_16]], <2 x double> [[VCALL5]], <2 x double> [[INPUT1_PART_3_OF_16_]]
; CHECK-NEXT:    [[INPUT1_PART_4_OF_16_:%.*]] = shufflevector <32 x double> [[INPUT1]], <32 x double> undef, <2 x i32> <i32 8, i32 9>
; CHECK-NEXT:    [[VCALL7:%.*]] = call fast svml_cc <2 x double> @__svml_clog1(<2 x double> [[INPUT1_PART_4_OF_16_]])
; CHECK-NEXT:    [[INPUT2_PART_4_OF_16:%.*]] = extractelement <16 x i1> [[INPUT2]], i32 4
; CHECK-NEXT:    [[VCALL_VCALL8:%.*]] = select fast i1 [[INPUT2_PART_4_OF_16]], <2 x double> [[VCALL7]], <2 x double> [[INPUT1_PART_4_OF_16_]]
; CHECK-NEXT:    [[INPUT1_PART_5_OF_16_:%.*]] = shufflevector <32 x double> [[INPUT1]], <32 x double> undef, <2 x i32> <i32 10, i32 11>
; CHECK-NEXT:    [[VCALL9:%.*]] = call fast svml_cc <2 x double> @__svml_clog1(<2 x double> [[INPUT1_PART_5_OF_16_]])
; CHECK-NEXT:    [[INPUT2_PART_5_OF_16:%.*]] = extractelement <16 x i1> [[INPUT2]], i32 5
; CHECK-NEXT:    [[VCALL_VCALL10:%.*]] = select fast i1 [[INPUT2_PART_5_OF_16]], <2 x double> [[VCALL9]], <2 x double> [[INPUT1_PART_5_OF_16_]]
; CHECK-NEXT:    [[INPUT1_PART_6_OF_16_:%.*]] = shufflevector <32 x double> [[INPUT1]], <32 x double> undef, <2 x i32> <i32 12, i32 13>
; CHECK-NEXT:    [[VCALL11:%.*]] = call fast svml_cc <2 x double> @__svml_clog1(<2 x double> [[INPUT1_PART_6_OF_16_]])
; CHECK-NEXT:    [[INPUT2_PART_6_OF_16:%.*]] = extractelement <16 x i1> [[INPUT2]], i32 6
; CHECK-NEXT:    [[VCALL_VCALL12:%.*]] = select fast i1 [[INPUT2_PART_6_OF_16]], <2 x double> [[VCALL11]], <2 x double> [[INPUT1_PART_6_OF_16_]]
; CHECK-NEXT:    [[INPUT1_PART_7_OF_16_:%.*]] = shufflevector <32 x double> [[INPUT1]], <32 x double> undef, <2 x i32> <i32 14, i32 15>
; CHECK-NEXT:    [[VCALL13:%.*]] = call fast svml_cc <2 x double> @__svml_clog1(<2 x double> [[INPUT1_PART_7_OF_16_]])
; CHECK-NEXT:    [[INPUT2_PART_7_OF_16:%.*]] = extractelement <16 x i1> [[INPUT2]], i32 7
; CHECK-NEXT:    [[VCALL_VCALL14:%.*]] = select fast i1 [[INPUT2_PART_7_OF_16]], <2 x double> [[VCALL13]], <2 x double> [[INPUT1_PART_7_OF_16_]]
; CHECK-NEXT:    [[INPUT1_PART_8_OF_16_:%.*]] = shufflevector <32 x double> [[INPUT1]], <32 x double> undef, <2 x i32> <i32 16, i32 17>
; CHECK-NEXT:    [[VCALL15:%.*]] = call fast svml_cc <2 x double> @__svml_clog1(<2 x double> [[INPUT1_PART_8_OF_16_]])
; CHECK-NEXT:    [[INPUT2_PART_8_OF_16:%.*]] = extractelement <16 x i1> [[INPUT2]], i32 8
; CHECK-NEXT:    [[VCALL_VCALL16:%.*]] = select fast i1 [[INPUT2_PART_8_OF_16]], <2 x double> [[VCALL15]], <2 x double> [[INPUT1_PART_8_OF_16_]]
; CHECK-NEXT:    [[INPUT1_PART_9_OF_16_:%.*]] = shufflevector <32 x double> [[INPUT1]], <32 x double> undef, <2 x i32> <i32 18, i32 19>
; CHECK-NEXT:    [[VCALL17:%.*]] = call fast svml_cc <2 x double> @__svml_clog1(<2 x double> [[INPUT1_PART_9_OF_16_]])
; CHECK-NEXT:    [[INPUT2_PART_9_OF_16:%.*]] = extractelement <16 x i1> [[INPUT2]], i32 9
; CHECK-NEXT:    [[VCALL_VCALL18:%.*]] = select fast i1 [[INPUT2_PART_9_OF_16]], <2 x double> [[VCALL17]], <2 x double> [[INPUT1_PART_9_OF_16_]]
; CHECK-NEXT:    [[INPUT1_PART_10_OF_16_:%.*]] = shufflevector <32 x double> [[INPUT1]], <32 x double> undef, <2 x i32> <i32 20, i32 21>
; CHECK-NEXT:    [[VCALL19:%.*]] = call fast svml_cc <2 x double> @__svml_clog1(<2 x double> [[INPUT1_PART_10_OF_16_]])
; CHECK-NEXT:    [[INPUT2_PART_10_OF_16:%.*]] = extractelement <16 x i1> [[INPUT2]], i32 10
; CHECK-NEXT:    [[VCALL_VCALL20:%.*]] = select fast i1 [[INPUT2_PART_10_OF_16]], <2 x double> [[VCALL19]], <2 x double> [[INPUT1_PART_10_OF_16_]]
; CHECK-NEXT:    [[INPUT1_PART_11_OF_16_:%.*]] = shufflevector <32 x double> [[INPUT1]], <32 x double> undef, <2 x i32> <i32 22, i32 23>
; CHECK-NEXT:    [[VCALL21:%.*]] = call fast svml_cc <2 x double> @__svml_clog1(<2 x double> [[INPUT1_PART_11_OF_16_]])
; CHECK-NEXT:    [[INPUT2_PART_11_OF_16:%.*]] = extractelement <16 x i1> [[INPUT2]], i32 11
; CHECK-NEXT:    [[VCALL_VCALL22:%.*]] = select fast i1 [[INPUT2_PART_11_OF_16]], <2 x double> [[VCALL21]], <2 x double> [[INPUT1_PART_11_OF_16_]]
; CHECK-NEXT:    [[INPUT1_PART_12_OF_16_:%.*]] = shufflevector <32 x double> [[INPUT1]], <32 x double> undef, <2 x i32> <i32 24, i32 25>
; CHECK-NEXT:    [[VCALL23:%.*]] = call fast svml_cc <2 x double> @__svml_clog1(<2 x double> [[INPUT1_PART_12_OF_16_]])
; CHECK-NEXT:    [[INPUT2_PART_12_OF_16:%.*]] = extractelement <16 x i1> [[INPUT2]], i32 12
; CHECK-NEXT:    [[VCALL_VCALL24:%.*]] = select fast i1 [[INPUT2_PART_12_OF_16]], <2 x double> [[VCALL23]], <2 x double> [[INPUT1_PART_12_OF_16_]]
; CHECK-NEXT:    [[INPUT1_PART_13_OF_16_:%.*]] = shufflevector <32 x double> [[INPUT1]], <32 x double> undef, <2 x i32> <i32 26, i32 27>
; CHECK-NEXT:    [[VCALL25:%.*]] = call fast svml_cc <2 x double> @__svml_clog1(<2 x double> [[INPUT1_PART_13_OF_16_]])
; CHECK-NEXT:    [[INPUT2_PART_13_OF_16:%.*]] = extractelement <16 x i1> [[INPUT2]], i32 13
; CHECK-NEXT:    [[VCALL_VCALL26:%.*]] = select fast i1 [[INPUT2_PART_13_OF_16]], <2 x double> [[VCALL25]], <2 x double> [[INPUT1_PART_13_OF_16_]]
; CHECK-NEXT:    [[INPUT1_PART_14_OF_16_:%.*]] = shufflevector <32 x double> [[INPUT1]], <32 x double> undef, <2 x i32> <i32 28, i32 29>
; CHECK-NEXT:    [[VCALL27:%.*]] = call fast svml_cc <2 x double> @__svml_clog1(<2 x double> [[INPUT1_PART_14_OF_16_]])
; CHECK-NEXT:    [[INPUT2_PART_14_OF_16:%.*]] = extractelement <16 x i1> [[INPUT2]], i32 14
; CHECK-NEXT:    [[VCALL_VCALL28:%.*]] = select fast i1 [[INPUT2_PART_14_OF_16]], <2 x double> [[VCALL27]], <2 x double> [[INPUT1_PART_14_OF_16_]]
; CHECK-NEXT:    [[INPUT1_PART_15_OF_16_:%.*]] = shufflevector <32 x double> [[INPUT1]], <32 x double> undef, <2 x i32> <i32 30, i32 31>
; CHECK-NEXT:    [[VCALL29:%.*]] = call fast svml_cc <2 x double> @__svml_clog1(<2 x double> [[INPUT1_PART_15_OF_16_]])
; CHECK-NEXT:    [[INPUT2_PART_15_OF_16:%.*]] = extractelement <16 x i1> [[INPUT2]], i32 15
; CHECK-NEXT:    [[VCALL_VCALL30:%.*]] = select fast i1 [[INPUT2_PART_15_OF_16]], <2 x double> [[VCALL29]], <2 x double> [[INPUT1_PART_15_OF_16_]]
; CHECK-NEXT:    [[TMP1:%.*]] = shufflevector <2 x double> [[VCALL_VCALL]], <2 x double> [[VCALL_VCALL2]], <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    [[TMP2:%.*]] = shufflevector <2 x double> [[VCALL_VCALL4]], <2 x double> [[VCALL_VCALL6]], <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    [[TMP3:%.*]] = shufflevector <2 x double> [[VCALL_VCALL8]], <2 x double> [[VCALL_VCALL10]], <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    [[TMP4:%.*]] = shufflevector <2 x double> [[VCALL_VCALL12]], <2 x double> [[VCALL_VCALL14]], <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    [[TMP5:%.*]] = shufflevector <2 x double> [[VCALL_VCALL16]], <2 x double> [[VCALL_VCALL18]], <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    [[TMP6:%.*]] = shufflevector <2 x double> [[VCALL_VCALL20]], <2 x double> [[VCALL_VCALL22]], <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    [[TMP7:%.*]] = shufflevector <2 x double> [[VCALL_VCALL24]], <2 x double> [[VCALL_VCALL26]], <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    [[TMP8:%.*]] = shufflevector <2 x double> [[VCALL_VCALL28]], <2 x double> [[VCALL_VCALL30]], <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    [[TMP9:%.*]] = shufflevector <4 x double> [[TMP1]], <4 x double> [[TMP2]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; CHECK-NEXT:    [[TMP10:%.*]] = shufflevector <4 x double> [[TMP3]], <4 x double> [[TMP4]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; CHECK-NEXT:    [[TMP11:%.*]] = shufflevector <4 x double> [[TMP5]], <4 x double> [[TMP6]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; CHECK-NEXT:    [[TMP12:%.*]] = shufflevector <4 x double> [[TMP7]], <4 x double> [[TMP8]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
; CHECK-NEXT:    [[TMP13:%.*]] = shufflevector <8 x double> [[TMP9]], <8 x double> [[TMP10]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; CHECK-NEXT:    [[TMP14:%.*]] = shufflevector <8 x double> [[TMP11]], <8 x double> [[TMP12]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; CHECK-NEXT:    [[SHUFFLE_COMB:%.*]] = shufflevector <16 x double> [[TMP13]], <16 x double> [[TMP14]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
; CHECK-NEXT:    ret <32 x double> [[SHUFFLE_COMB]]
;
  %1 = call fast svml_cc <32 x double> @__svml_clog16_mask(<32 x double> undef, <16 x i1> %input2, <32 x double> %input1)
  ret <32 x double> %1
}

define <4 x double> @test_cexp2(<4 x double> %input1, <2 x i64> %input2) {
; CHECK-LABEL: define <4 x double> @test_cexp2(
; CHECK-SAME: <4 x double> [[INPUT1:%.*]], <2 x i64> [[INPUT2:%.*]]) {
; CHECK-NEXT:    [[INPUT1_PART_0_OF_2_:%.*]] = shufflevector <4 x double> [[INPUT1]], <4 x double> undef, <2 x i32> <i32 0, i32 1>
; CHECK-NEXT:    [[VCALL:%.*]] = call fast svml_cc <2 x double> @__svml_cexp1(<2 x double> [[INPUT1_PART_0_OF_2_]])
; CHECK-NEXT:    [[INPUT2_PART_0_OF_2:%.*]] = extractelement <2 x i64> [[INPUT2]], i32 0
; CHECK-NEXT:    [[MASK_TRUNC_:%.*]] = trunc i64 [[INPUT2_PART_0_OF_2]] to i1
; CHECK-NEXT:    [[VCALL_VCALL:%.*]] = select fast i1 [[MASK_TRUNC_]], <2 x double> [[VCALL]], <2 x double> [[INPUT1_PART_0_OF_2_]]
; CHECK-NEXT:    [[INPUT1_PART_1_OF_2_:%.*]] = shufflevector <4 x double> [[INPUT1]], <4 x double> undef, <2 x i32> <i32 2, i32 3>
; CHECK-NEXT:    [[VCALL1:%.*]] = call fast svml_cc <2 x double> @__svml_cexp1(<2 x double> [[INPUT1_PART_1_OF_2_]])
; CHECK-NEXT:    [[INPUT2_PART_1_OF_2:%.*]] = extractelement <2 x i64> [[INPUT2]], i32 1
; CHECK-NEXT:    [[MASK_TRUNC_2:%.*]] = trunc i64 [[INPUT2_PART_1_OF_2]] to i1
; CHECK-NEXT:    [[VCALL_VCALL3:%.*]] = select fast i1 [[MASK_TRUNC_2]], <2 x double> [[VCALL1]], <2 x double> [[INPUT1_PART_1_OF_2_]]
; CHECK-NEXT:    [[SHUFFLE_COMB:%.*]] = shufflevector <2 x double> [[VCALL_VCALL]], <2 x double> [[VCALL_VCALL3]], <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    ret <4 x double> [[SHUFFLE_COMB]]
;
  %1 = call fast svml_cc <4 x double> @__svml_cexp2_mask(<4 x double> %input1, <2 x i64> %input2)
  ret <4 x double> %1
}

declare <32 x double> @__svml_cexp16_mask(<32 x double>, <16 x i1>, <32 x double>)

declare <32 x double> @__svml_clog16_mask(<32 x double>, <16 x i1>, <32 x double>)

declare <4 x double> @__svml_cexp2_mask(<4 x double>, <2 x i64>)
