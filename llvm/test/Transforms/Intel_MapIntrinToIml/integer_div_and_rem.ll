; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; Check sdiv/srem/udiv/urem instructions are converted to SVML calls
; RUN: opt -vector-library=SVML -iml-trans -S < %s | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define <32 x i8> @test_s8div32(<32 x i8> %A, <32 x i8> %B) #0 {
; CHECK-LABEL: @test_s8div32(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VCALL:%.*]] = call svml_cc <32 x i8> @__svml_i8div32(<32 x i8> [[A:%.*]], <32 x i8> [[B:%.*]])
; CHECK-NEXT:    ret <32 x i8> [[VCALL]]
;
entry:
  %0 = sdiv <32 x i8> %A, %B
  ret <32 x i8> %0
}

define <16 x i16> @test_s16div16(<16 x i16> %A, <16 x i16> %B) #0 {
; CHECK-LABEL: @test_s16div16(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VCALL:%.*]] = call svml_cc <16 x i16> @__svml_i16div16(<16 x i16> [[A:%.*]], <16 x i16> [[B:%.*]])
; CHECK-NEXT:    ret <16 x i16> [[VCALL]]
;
entry:
  %0 = sdiv <16 x i16> %A, %B
  ret <16 x i16> %0
}

define <8 x i32> @test_s32div8(<8 x i32> %A, <8 x i32> %B) #0 {
; CHECK-LABEL: @test_s32div8(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VCALL:%.*]] = call svml_cc <8 x i32> @__svml_idiv8(<8 x i32> [[A:%.*]], <8 x i32> [[B:%.*]])
; CHECK-NEXT:    ret <8 x i32> [[VCALL]]
;
entry:
  %0 = sdiv <8 x i32> %A, %B
  ret <8 x i32> %0
}

define <8 x i32> @test_s32rem8(<8 x i32> %A, <8 x i32> %B) #0 {
; CHECK-LABEL: @test_s32rem8(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VCALL:%.*]] = call svml_cc <8 x i32> @__svml_irem8(<8 x i32> [[A:%.*]], <8 x i32> [[B:%.*]])
; CHECK-NEXT:    ret <8 x i32> [[VCALL]]
;
entry:
  %0 = srem <8 x i32> %A, %B
  ret <8 x i32> %0
}

define <8 x i32> @test_u32div8(<8 x i32> %A, <8 x i32> %B) #0 {
; CHECK-LABEL: @test_u32div8(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VCALL:%.*]] = call svml_cc <8 x i32> @__svml_udiv8(<8 x i32> [[A:%.*]], <8 x i32> [[B:%.*]])
; CHECK-NEXT:    ret <8 x i32> [[VCALL]]
;
entry:
  %0 = udiv <8 x i32> %A, %B
  ret <8 x i32> %0
}

define <8 x i32> @test_u32rem8(<8 x i32> %A, <8 x i32> %B) #0 {
; CHECK-LABEL: @test_u32rem8(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VCALL:%.*]] = call svml_cc <8 x i32> @__svml_urem8(<8 x i32> [[A:%.*]], <8 x i32> [[B:%.*]])
; CHECK-NEXT:    ret <8 x i32> [[VCALL]]
;
entry:
  %0 = urem <8 x i32> %A, %B
  ret <8 x i32> %0
}

define <4 x i64> @test_s64div4(<4 x i64> %A, <4 x i64> %B) #0 {
; CHECK-LABEL: @test_s64div4(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VCALL:%.*]] = call svml_cc <4 x i64> @__svml_i64div4(<4 x i64> [[A:%.*]], <4 x i64> [[B:%.*]])
; CHECK-NEXT:    ret <4 x i64> [[VCALL]]
;
entry:
  %0 = sdiv <4 x i64> %A, %B
  ret <4 x i64> %0
}

attributes #0 = { uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "prefer-vector-width"="256" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="skylake-avx512" "target-features"="+adx,+aes,+avx,+avx2,+avx512bw,+avx512cd,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+clflushopt,+clwb,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+mpx,+pclmul,+pku,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves" "unsafe-fp-math"="false" "use-soft-float"="false" }
