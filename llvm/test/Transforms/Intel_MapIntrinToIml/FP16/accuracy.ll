; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; Check IMF precision attribute is handled correctly, and make sure medium
; accuracy is used in fast math by default, scalarizarion is used in non-fast-math.

; RUN: opt -bugpoint-enable-legacy-pm -vector-library=SVML -S -iml-trans < %s 2>&1 | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define void @default_accuracy_no_fastmath(half %c) {
; CHECK-LABEL: define {{[^@]+}}@default_accuracy_no_fastmath(
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <8 x half> undef, half [[C:%.*]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <8 x half> [[BROADCAST_SPLATINSERT]], <8 x half> undef, <8 x i32> zeroinitializer
; CHECK-NEXT:    [[ARG:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 0
; CHECK-NEXT:    [[TMP1:%.*]] = call half @expf16(half [[ARG]])
; CHECK-NEXT:    [[ARG1:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 1
; CHECK-NEXT:    [[TMP2:%.*]] = call half @expf16(half [[ARG1]])
; CHECK-NEXT:    [[ARG2:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 2
; CHECK-NEXT:    [[TMP3:%.*]] = call half @expf16(half [[ARG2]])
; CHECK-NEXT:    [[ARG3:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 3
; CHECK-NEXT:    [[TMP4:%.*]] = call half @expf16(half [[ARG3]])
; CHECK-NEXT:    [[ARG4:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 4
; CHECK-NEXT:    [[TMP5:%.*]] = call half @expf16(half [[ARG4]])
; CHECK-NEXT:    [[ARG5:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 5
; CHECK-NEXT:    [[TMP6:%.*]] = call half @expf16(half [[ARG5]])
; CHECK-NEXT:    [[ARG6:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 6
; CHECK-NEXT:    [[TMP7:%.*]] = call half @expf16(half [[ARG6]])
; CHECK-NEXT:    [[ARG7:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 7
; CHECK-NEXT:    [[TMP8:%.*]] = call half @expf16(half [[ARG7]])
; CHECK-NEXT:    [[INS:%.*]] = insertelement <8 x half> undef, half [[TMP1]], i32 0
; CHECK-NEXT:    [[INS8:%.*]] = insertelement <8 x half> [[INS]], half [[TMP2]], i32 1
; CHECK-NEXT:    [[INS9:%.*]] = insertelement <8 x half> [[INS8]], half [[TMP3]], i32 2
; CHECK-NEXT:    [[INS10:%.*]] = insertelement <8 x half> [[INS9]], half [[TMP4]], i32 3
; CHECK-NEXT:    [[INS11:%.*]] = insertelement <8 x half> [[INS10]], half [[TMP5]], i32 4
; CHECK-NEXT:    [[INS12:%.*]] = insertelement <8 x half> [[INS11]], half [[TMP6]], i32 5
; CHECK-NEXT:    [[INS13:%.*]] = insertelement <8 x half> [[INS12]], half [[TMP7]], i32 6
; CHECK-NEXT:    [[INS14:%.*]] = insertelement <8 x half> [[INS13]], half [[TMP8]], i32 7
; CHECK-NEXT:    ret void
;
  %broadcast.splatinsert = insertelement <8 x half> undef, half %c, i32 0
  %broadcast.splat = shufflevector <8 x half> %broadcast.splatinsert, <8 x half> undef, <8 x i32> zeroinitializer
  %vec_call = call svml_cc <8 x half> @__svml_exps8(<8 x half> %broadcast.splat) #1
  ret void
}

define void @default_accuracy_fastmath(half %c) {
; CHECK-LABEL: define {{[^@]+}}@default_accuracy_fastmath(
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <8 x half> undef, half [[C:%.*]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <8 x half> [[BROADCAST_SPLATINSERT]], <8 x half> undef, <8 x i32> zeroinitializer
; CHECK-NEXT:    [[VCALL:%.*]] = call fast svml_cc <8 x half> @__svml_exps8(<8 x half> [[BROADCAST_SPLAT]])
; CHECK-NEXT:    ret void
;
  %broadcast.splatinsert = insertelement <8 x half> undef, half %c, i32 0
  %broadcast.splat = shufflevector <8 x half> %broadcast.splatinsert, <8 x half> undef, <8 x i32> zeroinitializer
  %vec_call = call fast svml_cc <8 x half> @__svml_exps8(<8 x half> %broadcast.splat) #1
  ret void
}

define void @low_accuracy_no_fastmath(half %c) {
; CHECK-LABEL: define {{[^@]+}}@low_accuracy_no_fastmath(
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <8 x half> undef, half [[C:%.*]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <8 x half> [[BROADCAST_SPLATINSERT]], <8 x half> undef, <8 x i32> zeroinitializer
; CHECK-NEXT:    [[ARG:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 0
; CHECK-NEXT:    [[TMP1:%.*]] = call half @expf16(half [[ARG]])
; CHECK-NEXT:    [[ARG1:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 1
; CHECK-NEXT:    [[TMP2:%.*]] = call half @expf16(half [[ARG1]])
; CHECK-NEXT:    [[ARG2:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 2
; CHECK-NEXT:    [[TMP3:%.*]] = call half @expf16(half [[ARG2]])
; CHECK-NEXT:    [[ARG3:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 3
; CHECK-NEXT:    [[TMP4:%.*]] = call half @expf16(half [[ARG3]])
; CHECK-NEXT:    [[ARG4:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 4
; CHECK-NEXT:    [[TMP5:%.*]] = call half @expf16(half [[ARG4]])
; CHECK-NEXT:    [[ARG5:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 5
; CHECK-NEXT:    [[TMP6:%.*]] = call half @expf16(half [[ARG5]])
; CHECK-NEXT:    [[ARG6:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 6
; CHECK-NEXT:    [[TMP7:%.*]] = call half @expf16(half [[ARG6]])
; CHECK-NEXT:    [[ARG7:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 7
; CHECK-NEXT:    [[TMP8:%.*]] = call half @expf16(half [[ARG7]])
; CHECK-NEXT:    [[INS:%.*]] = insertelement <8 x half> undef, half [[TMP1]], i32 0
; CHECK-NEXT:    [[INS8:%.*]] = insertelement <8 x half> [[INS]], half [[TMP2]], i32 1
; CHECK-NEXT:    [[INS9:%.*]] = insertelement <8 x half> [[INS8]], half [[TMP3]], i32 2
; CHECK-NEXT:    [[INS10:%.*]] = insertelement <8 x half> [[INS9]], half [[TMP4]], i32 3
; CHECK-NEXT:    [[INS11:%.*]] = insertelement <8 x half> [[INS10]], half [[TMP5]], i32 4
; CHECK-NEXT:    [[INS12:%.*]] = insertelement <8 x half> [[INS11]], half [[TMP6]], i32 5
; CHECK-NEXT:    [[INS13:%.*]] = insertelement <8 x half> [[INS12]], half [[TMP7]], i32 6
; CHECK-NEXT:    [[INS14:%.*]] = insertelement <8 x half> [[INS13]], half [[TMP8]], i32 7
; CHECK-NEXT:    ret void
;
  %broadcast.splatinsert = insertelement <8 x half> undef, half %c, i32 0
  %broadcast.splat = shufflevector <8 x half> %broadcast.splatinsert, <8 x half> undef, <8 x i32> zeroinitializer
  %vec_call = call svml_cc <8 x half> @__svml_exps8(<8 x half> %broadcast.splat) #2
  ret void
}

define void @low_accuracy_fastmath(half %c) {
; CHECK-LABEL: define {{[^@]+}}@low_accuracy_fastmath(
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <8 x half> undef, half [[C:%.*]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <8 x half> [[BROADCAST_SPLATINSERT]], <8 x half> undef, <8 x i32> zeroinitializer
; CHECK-NEXT:    [[VCALL:%.*]] = call fast svml_cc <8 x half> @__svml_exps8_ep(<8 x half> [[BROADCAST_SPLAT]])
; CHECK-NEXT:    ret void
;
  %broadcast.splatinsert = insertelement <8 x half> undef, half %c, i32 0
  %broadcast.splat = shufflevector <8 x half> %broadcast.splatinsert, <8 x half> undef, <8 x i32> zeroinitializer
  %vec_call = call fast svml_cc <8 x half> @__svml_exps8(<8 x half> %broadcast.splat) #2
  ret void
}

define void @medium_accuracy_no_fastmath(half %c) {
; CHECK-LABEL: define {{[^@]+}}@medium_accuracy_no_fastmath(
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <8 x half> undef, half [[C:%.*]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <8 x half> [[BROADCAST_SPLATINSERT]], <8 x half> undef, <8 x i32> zeroinitializer
; CHECK-NEXT:    [[ARG:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 0
; CHECK-NEXT:    [[TMP1:%.*]] = call half @expf16(half [[ARG]])
; CHECK-NEXT:    [[ARG1:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 1
; CHECK-NEXT:    [[TMP2:%.*]] = call half @expf16(half [[ARG1]])
; CHECK-NEXT:    [[ARG2:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 2
; CHECK-NEXT:    [[TMP3:%.*]] = call half @expf16(half [[ARG2]])
; CHECK-NEXT:    [[ARG3:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 3
; CHECK-NEXT:    [[TMP4:%.*]] = call half @expf16(half [[ARG3]])
; CHECK-NEXT:    [[ARG4:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 4
; CHECK-NEXT:    [[TMP5:%.*]] = call half @expf16(half [[ARG4]])
; CHECK-NEXT:    [[ARG5:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 5
; CHECK-NEXT:    [[TMP6:%.*]] = call half @expf16(half [[ARG5]])
; CHECK-NEXT:    [[ARG6:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 6
; CHECK-NEXT:    [[TMP7:%.*]] = call half @expf16(half [[ARG6]])
; CHECK-NEXT:    [[ARG7:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 7
; CHECK-NEXT:    [[TMP8:%.*]] = call half @expf16(half [[ARG7]])
; CHECK-NEXT:    [[INS:%.*]] = insertelement <8 x half> undef, half [[TMP1]], i32 0
; CHECK-NEXT:    [[INS8:%.*]] = insertelement <8 x half> [[INS]], half [[TMP2]], i32 1
; CHECK-NEXT:    [[INS9:%.*]] = insertelement <8 x half> [[INS8]], half [[TMP3]], i32 2
; CHECK-NEXT:    [[INS10:%.*]] = insertelement <8 x half> [[INS9]], half [[TMP4]], i32 3
; CHECK-NEXT:    [[INS11:%.*]] = insertelement <8 x half> [[INS10]], half [[TMP5]], i32 4
; CHECK-NEXT:    [[INS12:%.*]] = insertelement <8 x half> [[INS11]], half [[TMP6]], i32 5
; CHECK-NEXT:    [[INS13:%.*]] = insertelement <8 x half> [[INS12]], half [[TMP7]], i32 6
; CHECK-NEXT:    [[INS14:%.*]] = insertelement <8 x half> [[INS13]], half [[TMP8]], i32 7
; CHECK-NEXT:    ret void
;
  %broadcast.splatinsert = insertelement <8 x half> undef, half %c, i32 0
  %broadcast.splat = shufflevector <8 x half> %broadcast.splatinsert, <8 x half> undef, <8 x i32> zeroinitializer
  %vec_call = call svml_cc <8 x half> @__svml_exps8(<8 x half> %broadcast.splat) #3
  ret void
}

define void @medium_accuracy_fastmath(half %c) {
; CHECK-LABEL: define {{[^@]+}}@medium_accuracy_fastmath(
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <8 x half> undef, half [[C:%.*]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <8 x half> [[BROADCAST_SPLATINSERT]], <8 x half> undef, <8 x i32> zeroinitializer
; CHECK-NEXT:    [[VCALL:%.*]] = call fast svml_cc <8 x half> @__svml_exps8(<8 x half> [[BROADCAST_SPLAT]])
; CHECK-NEXT:    ret void
;
  %broadcast.splatinsert = insertelement <8 x half> undef, half %c, i32 0
  %broadcast.splat = shufflevector <8 x half> %broadcast.splatinsert, <8 x half> undef, <8 x i32> zeroinitializer
  %vec_call = call fast svml_cc <8 x half> @__svml_exps8(<8 x half> %broadcast.splat) #3
  ret void
}

define void @high_accuracy_no_fastmath(half %c) {
; CHECK-LABEL: define {{[^@]+}}@high_accuracy_no_fastmath(
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <8 x half> undef, half [[C:%.*]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <8 x half> [[BROADCAST_SPLATINSERT]], <8 x half> undef, <8 x i32> zeroinitializer
; CHECK-NEXT:    [[ARG:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 0
; CHECK-NEXT:    [[TMP1:%.*]] = call half @expf16(half [[ARG]])
; CHECK-NEXT:    [[ARG1:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 1
; CHECK-NEXT:    [[TMP2:%.*]] = call half @expf16(half [[ARG1]])
; CHECK-NEXT:    [[ARG2:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 2
; CHECK-NEXT:    [[TMP3:%.*]] = call half @expf16(half [[ARG2]])
; CHECK-NEXT:    [[ARG3:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 3
; CHECK-NEXT:    [[TMP4:%.*]] = call half @expf16(half [[ARG3]])
; CHECK-NEXT:    [[ARG4:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 4
; CHECK-NEXT:    [[TMP5:%.*]] = call half @expf16(half [[ARG4]])
; CHECK-NEXT:    [[ARG5:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 5
; CHECK-NEXT:    [[TMP6:%.*]] = call half @expf16(half [[ARG5]])
; CHECK-NEXT:    [[ARG6:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 6
; CHECK-NEXT:    [[TMP7:%.*]] = call half @expf16(half [[ARG6]])
; CHECK-NEXT:    [[ARG7:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 7
; CHECK-NEXT:    [[TMP8:%.*]] = call half @expf16(half [[ARG7]])
; CHECK-NEXT:    [[INS:%.*]] = insertelement <8 x half> undef, half [[TMP1]], i32 0
; CHECK-NEXT:    [[INS8:%.*]] = insertelement <8 x half> [[INS]], half [[TMP2]], i32 1
; CHECK-NEXT:    [[INS9:%.*]] = insertelement <8 x half> [[INS8]], half [[TMP3]], i32 2
; CHECK-NEXT:    [[INS10:%.*]] = insertelement <8 x half> [[INS9]], half [[TMP4]], i32 3
; CHECK-NEXT:    [[INS11:%.*]] = insertelement <8 x half> [[INS10]], half [[TMP5]], i32 4
; CHECK-NEXT:    [[INS12:%.*]] = insertelement <8 x half> [[INS11]], half [[TMP6]], i32 5
; CHECK-NEXT:    [[INS13:%.*]] = insertelement <8 x half> [[INS12]], half [[TMP7]], i32 6
; CHECK-NEXT:    [[INS14:%.*]] = insertelement <8 x half> [[INS13]], half [[TMP8]], i32 7
; CHECK-NEXT:    ret void
;
  %broadcast.splatinsert = insertelement <8 x half> undef, half %c, i32 0
  %broadcast.splat = shufflevector <8 x half> %broadcast.splatinsert, <8 x half> undef, <8 x i32> zeroinitializer
  %vec_call = call svml_cc <8 x half> @__svml_exps8(<8 x half> %broadcast.splat) #4
  ret void
}

define void @high_accuracy_fastmath(half %c) {
; CHECK-LABEL: define {{[^@]+}}@high_accuracy_fastmath(
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <8 x half> undef, half [[C:%.*]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <8 x half> [[BROADCAST_SPLATINSERT]], <8 x half> undef, <8 x i32> zeroinitializer
; CHECK-NEXT:    [[VCALL:%.*]] = call fast svml_cc <8 x half> @__svml_exps8_ha(<8 x half> [[BROADCAST_SPLAT]])
; CHECK-NEXT:    ret void
;
  %broadcast.splatinsert = insertelement <8 x half> undef, half %c, i32 0
  %broadcast.splat = shufflevector <8 x half> %broadcast.splatinsert, <8 x half> undef, <8 x i32> zeroinitializer
  %vec_call = call fast svml_cc <8 x half> @__svml_exps8(<8 x half> %broadcast.splat) #4
  ret void
}

define void @default_accuracy_afn(half %c) {
; CHECK-LABEL: define {{[^@]+}}@default_accuracy_afn(
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <8 x half> undef, half [[C:%.*]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <8 x half> [[BROADCAST_SPLATINSERT]], <8 x half> undef, <8 x i32> zeroinitializer
; CHECK-NEXT:    [[VCALL:%.*]] = call afn svml_cc <8 x half> @__svml_exps8(<8 x half> [[BROADCAST_SPLAT]])
; CHECK-NEXT:    ret void
;
  %broadcast.splatinsert = insertelement <8 x half> undef, half %c, i32 0
  %broadcast.splat = shufflevector <8 x half> %broadcast.splatinsert, <8 x half> undef, <8 x i32> zeroinitializer
  %vec_call = call afn svml_cc <8 x half> @__svml_exps8(<8 x half> %broadcast.splat) #1
  ret void
}

define void @low_accuracy_afn(half %c) {
; CHECK-LABEL: define {{[^@]+}}@low_accuracy_afn(
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <8 x half> undef, half [[C:%.*]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <8 x half> [[BROADCAST_SPLATINSERT]], <8 x half> undef, <8 x i32> zeroinitializer
; CHECK-NEXT:    [[VCALL:%.*]] = call afn svml_cc <8 x half> @__svml_exps8_ep(<8 x half> [[BROADCAST_SPLAT]])
; CHECK-NEXT:    ret void
;
  %broadcast.splatinsert = insertelement <8 x half> undef, half %c, i32 0
  %broadcast.splat = shufflevector <8 x half> %broadcast.splatinsert, <8 x half> undef, <8 x i32> zeroinitializer
  %vec_call = call afn svml_cc <8 x half> @__svml_exps8(<8 x half> %broadcast.splat) #2
  ret void
}

define void @medium_accuracy_afn(half %c) {
; CHECK-LABEL: define {{[^@]+}}@medium_accuracy_afn(
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <8 x half> undef, half [[C:%.*]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <8 x half> [[BROADCAST_SPLATINSERT]], <8 x half> undef, <8 x i32> zeroinitializer
; CHECK-NEXT:    [[VCALL:%.*]] = call afn svml_cc <8 x half> @__svml_exps8(<8 x half> [[BROADCAST_SPLAT]])
; CHECK-NEXT:    ret void
;
  %broadcast.splatinsert = insertelement <8 x half> undef, half %c, i32 0
  %broadcast.splat = shufflevector <8 x half> %broadcast.splatinsert, <8 x half> undef, <8 x i32> zeroinitializer
  %vec_call = call afn svml_cc <8 x half> @__svml_exps8(<8 x half> %broadcast.splat) #3
  ret void
}

define void @high_accuracy_afn(half %c) {
; CHECK-LABEL: define {{[^@]+}}@high_accuracy_afn(
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <8 x half> undef, half [[C:%.*]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <8 x half> [[BROADCAST_SPLATINSERT]], <8 x half> undef, <8 x i32> zeroinitializer
; CHECK-NEXT:    [[VCALL:%.*]] = call afn svml_cc <8 x half> @__svml_exps8_ha(<8 x half> [[BROADCAST_SPLAT]])
; CHECK-NEXT:    ret void
;
  %broadcast.splatinsert = insertelement <8 x half> undef, half %c, i32 0
  %broadcast.splat = shufflevector <8 x half> %broadcast.splatinsert, <8 x half> undef, <8 x i32> zeroinitializer
  %vec_call = call afn svml_cc <8 x half> @__svml_exps8(<8 x half> %broadcast.splat) #4
  ret void
}

define void @default_accuracy_noafn(half %c) {
; CHECK-LABEL: define {{[^@]+}}@default_accuracy_noafn(
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <8 x half> undef, half [[C:%.*]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <8 x half> [[BROADCAST_SPLATINSERT]], <8 x half> undef, <8 x i32> zeroinitializer
; CHECK-NEXT:    [[ARG:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 0
; CHECK-NEXT:    [[TMP1:%.*]] = call reassoc nnan ninf nsz arcp contract half @expf16(half [[ARG]])
; CHECK-NEXT:    [[ARG1:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 1
; CHECK-NEXT:    [[TMP2:%.*]] = call reassoc nnan ninf nsz arcp contract half @expf16(half [[ARG1]])
; CHECK-NEXT:    [[ARG2:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 2
; CHECK-NEXT:    [[TMP3:%.*]] = call reassoc nnan ninf nsz arcp contract half @expf16(half [[ARG2]])
; CHECK-NEXT:    [[ARG3:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 3
; CHECK-NEXT:    [[TMP4:%.*]] = call reassoc nnan ninf nsz arcp contract half @expf16(half [[ARG3]])
; CHECK-NEXT:    [[ARG4:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 4
; CHECK-NEXT:    [[TMP5:%.*]] = call reassoc nnan ninf nsz arcp contract half @expf16(half [[ARG4]])
; CHECK-NEXT:    [[ARG5:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 5
; CHECK-NEXT:    [[TMP6:%.*]] = call reassoc nnan ninf nsz arcp contract half @expf16(half [[ARG5]])
; CHECK-NEXT:    [[ARG6:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 6
; CHECK-NEXT:    [[TMP7:%.*]] = call reassoc nnan ninf nsz arcp contract half @expf16(half [[ARG6]])
; CHECK-NEXT:    [[ARG7:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 7
; CHECK-NEXT:    [[TMP8:%.*]] = call reassoc nnan ninf nsz arcp contract half @expf16(half [[ARG7]])
; CHECK-NEXT:    [[INS:%.*]] = insertelement <8 x half> undef, half [[TMP1]], i32 0
; CHECK-NEXT:    [[INS8:%.*]] = insertelement <8 x half> [[INS]], half [[TMP2]], i32 1
; CHECK-NEXT:    [[INS9:%.*]] = insertelement <8 x half> [[INS8]], half [[TMP3]], i32 2
; CHECK-NEXT:    [[INS10:%.*]] = insertelement <8 x half> [[INS9]], half [[TMP4]], i32 3
; CHECK-NEXT:    [[INS11:%.*]] = insertelement <8 x half> [[INS10]], half [[TMP5]], i32 4
; CHECK-NEXT:    [[INS12:%.*]] = insertelement <8 x half> [[INS11]], half [[TMP6]], i32 5
; CHECK-NEXT:    [[INS13:%.*]] = insertelement <8 x half> [[INS12]], half [[TMP7]], i32 6
; CHECK-NEXT:    [[INS14:%.*]] = insertelement <8 x half> [[INS13]], half [[TMP8]], i32 7
; CHECK-NEXT:    ret void
;
  %broadcast.splatinsert = insertelement <8 x half> undef, half %c, i32 0
  %broadcast.splat = shufflevector <8 x half> %broadcast.splatinsert, <8 x half> undef, <8 x i32> zeroinitializer
  %vec_call = call reassoc nnan ninf nsz arcp contract svml_cc <8 x half> @__svml_exps8(<8 x half> %broadcast.splat) #1
  ret void
}

define void @low_accuracy_noafn(half %c) {
; CHECK-LABEL: define {{[^@]+}}@low_accuracy_noafn(
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <8 x half> undef, half [[C:%.*]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <8 x half> [[BROADCAST_SPLATINSERT]], <8 x half> undef, <8 x i32> zeroinitializer
; CHECK-NEXT:    [[ARG:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 0
; CHECK-NEXT:    [[TMP1:%.*]] = call reassoc nnan ninf nsz arcp contract half @expf16(half [[ARG]])
; CHECK-NEXT:    [[ARG1:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 1
; CHECK-NEXT:    [[TMP2:%.*]] = call reassoc nnan ninf nsz arcp contract half @expf16(half [[ARG1]])
; CHECK-NEXT:    [[ARG2:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 2
; CHECK-NEXT:    [[TMP3:%.*]] = call reassoc nnan ninf nsz arcp contract half @expf16(half [[ARG2]])
; CHECK-NEXT:    [[ARG3:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 3
; CHECK-NEXT:    [[TMP4:%.*]] = call reassoc nnan ninf nsz arcp contract half @expf16(half [[ARG3]])
; CHECK-NEXT:    [[ARG4:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 4
; CHECK-NEXT:    [[TMP5:%.*]] = call reassoc nnan ninf nsz arcp contract half @expf16(half [[ARG4]])
; CHECK-NEXT:    [[ARG5:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 5
; CHECK-NEXT:    [[TMP6:%.*]] = call reassoc nnan ninf nsz arcp contract half @expf16(half [[ARG5]])
; CHECK-NEXT:    [[ARG6:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 6
; CHECK-NEXT:    [[TMP7:%.*]] = call reassoc nnan ninf nsz arcp contract half @expf16(half [[ARG6]])
; CHECK-NEXT:    [[ARG7:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 7
; CHECK-NEXT:    [[TMP8:%.*]] = call reassoc nnan ninf nsz arcp contract half @expf16(half [[ARG7]])
; CHECK-NEXT:    [[INS:%.*]] = insertelement <8 x half> undef, half [[TMP1]], i32 0
; CHECK-NEXT:    [[INS8:%.*]] = insertelement <8 x half> [[INS]], half [[TMP2]], i32 1
; CHECK-NEXT:    [[INS9:%.*]] = insertelement <8 x half> [[INS8]], half [[TMP3]], i32 2
; CHECK-NEXT:    [[INS10:%.*]] = insertelement <8 x half> [[INS9]], half [[TMP4]], i32 3
; CHECK-NEXT:    [[INS11:%.*]] = insertelement <8 x half> [[INS10]], half [[TMP5]], i32 4
; CHECK-NEXT:    [[INS12:%.*]] = insertelement <8 x half> [[INS11]], half [[TMP6]], i32 5
; CHECK-NEXT:    [[INS13:%.*]] = insertelement <8 x half> [[INS12]], half [[TMP7]], i32 6
; CHECK-NEXT:    [[INS14:%.*]] = insertelement <8 x half> [[INS13]], half [[TMP8]], i32 7
; CHECK-NEXT:    ret void
;
  %broadcast.splatinsert = insertelement <8 x half> undef, half %c, i32 0
  %broadcast.splat = shufflevector <8 x half> %broadcast.splatinsert, <8 x half> undef, <8 x i32> zeroinitializer
  %vec_call = call reassoc nnan ninf nsz arcp contract svml_cc <8 x half> @__svml_exps8(<8 x half> %broadcast.splat) #2
  ret void
}

define void @medium_accuracy_noafn(half %c) {
; CHECK-LABEL: define {{[^@]+}}@medium_accuracy_noafn(
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <8 x half> undef, half [[C:%.*]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <8 x half> [[BROADCAST_SPLATINSERT]], <8 x half> undef, <8 x i32> zeroinitializer
; CHECK-NEXT:    [[ARG:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 0
; CHECK-NEXT:    [[TMP1:%.*]] = call reassoc nnan ninf nsz arcp contract half @expf16(half [[ARG]])
; CHECK-NEXT:    [[ARG1:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 1
; CHECK-NEXT:    [[TMP2:%.*]] = call reassoc nnan ninf nsz arcp contract half @expf16(half [[ARG1]])
; CHECK-NEXT:    [[ARG2:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 2
; CHECK-NEXT:    [[TMP3:%.*]] = call reassoc nnan ninf nsz arcp contract half @expf16(half [[ARG2]])
; CHECK-NEXT:    [[ARG3:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 3
; CHECK-NEXT:    [[TMP4:%.*]] = call reassoc nnan ninf nsz arcp contract half @expf16(half [[ARG3]])
; CHECK-NEXT:    [[ARG4:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 4
; CHECK-NEXT:    [[TMP5:%.*]] = call reassoc nnan ninf nsz arcp contract half @expf16(half [[ARG4]])
; CHECK-NEXT:    [[ARG5:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 5
; CHECK-NEXT:    [[TMP6:%.*]] = call reassoc nnan ninf nsz arcp contract half @expf16(half [[ARG5]])
; CHECK-NEXT:    [[ARG6:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 6
; CHECK-NEXT:    [[TMP7:%.*]] = call reassoc nnan ninf nsz arcp contract half @expf16(half [[ARG6]])
; CHECK-NEXT:    [[ARG7:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 7
; CHECK-NEXT:    [[TMP8:%.*]] = call reassoc nnan ninf nsz arcp contract half @expf16(half [[ARG7]])
; CHECK-NEXT:    [[INS:%.*]] = insertelement <8 x half> undef, half [[TMP1]], i32 0
; CHECK-NEXT:    [[INS8:%.*]] = insertelement <8 x half> [[INS]], half [[TMP2]], i32 1
; CHECK-NEXT:    [[INS9:%.*]] = insertelement <8 x half> [[INS8]], half [[TMP3]], i32 2
; CHECK-NEXT:    [[INS10:%.*]] = insertelement <8 x half> [[INS9]], half [[TMP4]], i32 3
; CHECK-NEXT:    [[INS11:%.*]] = insertelement <8 x half> [[INS10]], half [[TMP5]], i32 4
; CHECK-NEXT:    [[INS12:%.*]] = insertelement <8 x half> [[INS11]], half [[TMP6]], i32 5
; CHECK-NEXT:    [[INS13:%.*]] = insertelement <8 x half> [[INS12]], half [[TMP7]], i32 6
; CHECK-NEXT:    [[INS14:%.*]] = insertelement <8 x half> [[INS13]], half [[TMP8]], i32 7
; CHECK-NEXT:    ret void
;
  %broadcast.splatinsert = insertelement <8 x half> undef, half %c, i32 0
  %broadcast.splat = shufflevector <8 x half> %broadcast.splatinsert, <8 x half> undef, <8 x i32> zeroinitializer
  %vec_call = call reassoc nnan ninf nsz arcp contract svml_cc <8 x half> @__svml_exps8(<8 x half> %broadcast.splat) #3
  ret void
}

define void @high_accuracy_noafn(half %c) {
; CHECK-LABEL: define {{[^@]+}}@high_accuracy_noafn(
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <8 x half> undef, half [[C:%.*]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <8 x half> [[BROADCAST_SPLATINSERT]], <8 x half> undef, <8 x i32> zeroinitializer
; CHECK-NEXT:    [[ARG:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 0
; CHECK-NEXT:    [[TMP1:%.*]] = call reassoc nnan ninf nsz arcp contract half @expf16(half [[ARG]])
; CHECK-NEXT:    [[ARG1:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 1
; CHECK-NEXT:    [[TMP2:%.*]] = call reassoc nnan ninf nsz arcp contract half @expf16(half [[ARG1]])
; CHECK-NEXT:    [[ARG2:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 2
; CHECK-NEXT:    [[TMP3:%.*]] = call reassoc nnan ninf nsz arcp contract half @expf16(half [[ARG2]])
; CHECK-NEXT:    [[ARG3:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 3
; CHECK-NEXT:    [[TMP4:%.*]] = call reassoc nnan ninf nsz arcp contract half @expf16(half [[ARG3]])
; CHECK-NEXT:    [[ARG4:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 4
; CHECK-NEXT:    [[TMP5:%.*]] = call reassoc nnan ninf nsz arcp contract half @expf16(half [[ARG4]])
; CHECK-NEXT:    [[ARG5:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 5
; CHECK-NEXT:    [[TMP6:%.*]] = call reassoc nnan ninf nsz arcp contract half @expf16(half [[ARG5]])
; CHECK-NEXT:    [[ARG6:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 6
; CHECK-NEXT:    [[TMP7:%.*]] = call reassoc nnan ninf nsz arcp contract half @expf16(half [[ARG6]])
; CHECK-NEXT:    [[ARG7:%.*]] = extractelement <8 x half> [[BROADCAST_SPLAT]], i32 7
; CHECK-NEXT:    [[TMP8:%.*]] = call reassoc nnan ninf nsz arcp contract half @expf16(half [[ARG7]])
; CHECK-NEXT:    [[INS:%.*]] = insertelement <8 x half> undef, half [[TMP1]], i32 0
; CHECK-NEXT:    [[INS8:%.*]] = insertelement <8 x half> [[INS]], half [[TMP2]], i32 1
; CHECK-NEXT:    [[INS9:%.*]] = insertelement <8 x half> [[INS8]], half [[TMP3]], i32 2
; CHECK-NEXT:    [[INS10:%.*]] = insertelement <8 x half> [[INS9]], half [[TMP4]], i32 3
; CHECK-NEXT:    [[INS11:%.*]] = insertelement <8 x half> [[INS10]], half [[TMP5]], i32 4
; CHECK-NEXT:    [[INS12:%.*]] = insertelement <8 x half> [[INS11]], half [[TMP6]], i32 5
; CHECK-NEXT:    [[INS13:%.*]] = insertelement <8 x half> [[INS12]], half [[TMP7]], i32 6
; CHECK-NEXT:    [[INS14:%.*]] = insertelement <8 x half> [[INS13]], half [[TMP8]], i32 7
; CHECK-NEXT:    ret void
;
  %broadcast.splatinsert = insertelement <8 x half> undef, half %c, i32 0
  %broadcast.splat = shufflevector <8 x half> %broadcast.splatinsert, <8 x half> undef, <8 x i32> zeroinitializer
  %vec_call = call reassoc nnan ninf nsz arcp contract svml_cc <8 x half> @__svml_exps8(<8 x half> %broadcast.splat) #4
  ret void
}

declare <8 x half> @__svml_exps8(<8 x half>)

attributes #1 = { nounwind }
attributes #2 = { nounwind "imf-precision"="low" }
attributes #3 = { nounwind "imf-precision"="medium" }
attributes #4 = { nounwind "imf-precision"="high" }
