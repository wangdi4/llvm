; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; Check integer division for narrow vectors is widen correctly
; RUN: opt -vector-library=SVML -iml-trans -S < %s | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define <4 x i8> @test_s8div4(<4 x i8> %A, <4 x i8> %B) #0 {
; CHECK-LABEL: @test_s8div4(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[SHUFFLE_DUP:%.*]] = shufflevector <4 x i8> [[A:%.*]], <4 x i8> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    [[SHUFFLE_DUP1:%.*]] = shufflevector <4 x i8> [[B:%.*]], <4 x i8> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    [[VCALL:%.*]] = call svml_cc_avx512 <64 x i8> @__svml_i8div64_z0(<64 x i8> [[SHUFFLE_DUP]], <64 x i8> [[SHUFFLE_DUP1]])
; CHECK-NEXT:    [[SHUFFLE_PART:%.*]] = shufflevector <64 x i8> [[VCALL]], <64 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    ret <4 x i8> [[SHUFFLE_PART]]
;
entry:
  %0 = sdiv <4 x i8> %A, %B
  ret <4 x i8> %0
}

define <4 x i16> @test_s16div4(<4 x i16> %A, <4 x i16> %B) #0 {
; CHECK-LABEL: @test_s16div4(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[SHUFFLE_DUP:%.*]] = shufflevector <4 x i16> [[A:%.*]], <4 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    [[SHUFFLE_DUP1:%.*]] = shufflevector <4 x i16> [[B:%.*]], <4 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    [[VCALL:%.*]] = call svml_cc_avx512 <32 x i16> @__svml_i16div32_z0(<32 x i16> [[SHUFFLE_DUP]], <32 x i16> [[SHUFFLE_DUP1]])
; CHECK-NEXT:    [[SHUFFLE_PART:%.*]] = shufflevector <32 x i16> [[VCALL]], <32 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    ret <4 x i16> [[SHUFFLE_PART]]
;
entry:
  %0 = sdiv <4 x i16> %A, %B
  ret <4 x i16> %0
}

define <4 x i32> @test_s32div4(<4 x i32> %A, <4 x i32> %B) #0 {
; CHECK-LABEL: @test_s32div4(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[SHUFFLE_DUP:%.*]] = shufflevector <4 x i32> [[A:%.*]], <4 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    [[SHUFFLE_DUP1:%.*]] = shufflevector <4 x i32> [[B:%.*]], <4 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    [[VCALL:%.*]] = call svml_cc_avx512 <16 x i32> @__svml_idiv16_z0(<16 x i32> [[SHUFFLE_DUP]], <16 x i32> [[SHUFFLE_DUP1]])
; CHECK-NEXT:    [[SHUFFLE_PART:%.*]] = shufflevector <16 x i32> [[VCALL]], <16 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    ret <4 x i32> [[SHUFFLE_PART]]
;
entry:
  %0 = sdiv <4 x i32> %A, %B
  ret <4 x i32> %0
}

define <4 x i64> @test_s64div4(<4 x i64> %A, <4 x i64> %B) #0 {
; CHECK-LABEL: @test_s64div4(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[SHUFFLE_DUP:%.*]] = shufflevector <4 x i64> [[A:%.*]], <4 x i64> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    [[SHUFFLE_DUP1:%.*]] = shufflevector <4 x i64> [[B:%.*]], <4 x i64> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    [[VCALL:%.*]] = call svml_cc_avx512 <8 x i64> @__svml_i64div8_z0(<8 x i64> [[SHUFFLE_DUP]], <8 x i64> [[SHUFFLE_DUP1]])
; CHECK-NEXT:    [[SHUFFLE_PART:%.*]] = shufflevector <8 x i64> [[VCALL]], <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    ret <4 x i64> [[SHUFFLE_PART]]
;
entry:
  %0 = sdiv <4 x i64> %A, %B
  ret <4 x i64> %0
}

attributes #0 = { uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="512" "prefer-vector-width"="512" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="skylake-avx512" "target-features"="+adx,+aes,+avx,+avx2,+avx512bw,+avx512cd,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+clflushopt,+clwb,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+mpx,+pclmul,+pku,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves" "unsafe-fp-math"="false" "use-soft-float"="false" }
