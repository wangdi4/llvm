; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; Some SVML functions (such as floor and ceil) don't have variants of different
; accuracies. This test checks these functions are always translated to the
; same function regardless of the accuracy specified.

; RUN: opt -bugpoint-enable-legacy-pm -vector-library=SVML -S -iml-trans < %s 2>&1 | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define void @default_accuracy_no_fastmath(double %c) {
; CHECK-LABEL: define {{[^@]+}}@default_accuracy_no_fastmath(
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <4 x double> undef, double [[C:%.*]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <4 x double> [[BROADCAST_SPLATINSERT]], <4 x double> undef, <4 x i32> zeroinitializer
; CHECK-NEXT:    [[ARG:%.*]] = extractelement <4 x double> [[BROADCAST_SPLAT]], i32 0
; CHECK-NEXT:    [[TMP1:%.*]] = call double @ceil(double [[ARG]])
; CHECK-NEXT:    [[ARG1:%.*]] = extractelement <4 x double> [[BROADCAST_SPLAT]], i32 1
; CHECK-NEXT:    [[TMP2:%.*]] = call double @ceil(double [[ARG1]])
; CHECK-NEXT:    [[ARG2:%.*]] = extractelement <4 x double> [[BROADCAST_SPLAT]], i32 2
; CHECK-NEXT:    [[TMP3:%.*]] = call double @ceil(double [[ARG2]])
; CHECK-NEXT:    [[ARG3:%.*]] = extractelement <4 x double> [[BROADCAST_SPLAT]], i32 3
; CHECK-NEXT:    [[TMP4:%.*]] = call double @ceil(double [[ARG3]])
; CHECK-NEXT:    [[INS:%.*]] = insertelement <4 x double> undef, double [[TMP1]], i32 0
; CHECK-NEXT:    [[INS4:%.*]] = insertelement <4 x double> [[INS]], double [[TMP2]], i32 1
; CHECK-NEXT:    [[INS5:%.*]] = insertelement <4 x double> [[INS4]], double [[TMP3]], i32 2
; CHECK-NEXT:    [[INS6:%.*]] = insertelement <4 x double> [[INS5]], double [[TMP4]], i32 3
; CHECK-NEXT:    ret void
;
  %broadcast.splatinsert = insertelement <4 x double> undef, double %c, i32 0
  %broadcast.splat = shufflevector <4 x double> %broadcast.splatinsert, <4 x double> undef, <4 x i32> zeroinitializer
  %vec_call = call svml_cc <4 x double> @__svml_ceil4(<4 x double> %broadcast.splat) #1
  ret void
}

define void @default_accuracy_fastmath(double %c) {
; CHECK-LABEL: define {{[^@]+}}@default_accuracy_fastmath(
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <4 x double> undef, double [[C:%.*]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <4 x double> [[BROADCAST_SPLATINSERT]], <4 x double> undef, <4 x i32> zeroinitializer
; CHECK-NEXT:    [[BROADCAST_SPLAT_PART_0_OF_2_:%.*]] = shufflevector <4 x double> [[BROADCAST_SPLAT]], <4 x double> undef, <2 x i32> <i32 0, i32 1>
; CHECK-NEXT:    [[VCALL:%.*]] = call fast svml_cc <2 x double> @__svml_ceil2(<2 x double> [[BROADCAST_SPLAT_PART_0_OF_2_]])
; CHECK-NEXT:    [[BROADCAST_SPLAT_PART_1_OF_2_:%.*]] = shufflevector <4 x double> [[BROADCAST_SPLAT]], <4 x double> undef, <2 x i32> <i32 2, i32 3>
; CHECK-NEXT:    [[VCALL1:%.*]] = call fast svml_cc <2 x double> @__svml_ceil2(<2 x double> [[BROADCAST_SPLAT_PART_1_OF_2_]])
; CHECK-NEXT:    [[SHUFFLE_COMB:%.*]] = shufflevector <2 x double> [[VCALL]], <2 x double> [[VCALL1]], <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    ret void
;
  %broadcast.splatinsert = insertelement <4 x double> undef, double %c, i32 0
  %broadcast.splat = shufflevector <4 x double> %broadcast.splatinsert, <4 x double> undef, <4 x i32> zeroinitializer
  %vec_call = call fast svml_cc <4 x double> @__svml_ceil4(<4 x double> %broadcast.splat) #1
  ret void
}

define void @low_accuracy_no_fastmath(double %c) {
; CHECK-LABEL: define {{[^@]+}}@low_accuracy_no_fastmath(
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <4 x double> undef, double [[C:%.*]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <4 x double> [[BROADCAST_SPLATINSERT]], <4 x double> undef, <4 x i32> zeroinitializer
; CHECK-NEXT:    [[ARG:%.*]] = extractelement <4 x double> [[BROADCAST_SPLAT]], i32 0
; CHECK-NEXT:    [[TMP1:%.*]] = call double @ceil(double [[ARG]])
; CHECK-NEXT:    [[ARG1:%.*]] = extractelement <4 x double> [[BROADCAST_SPLAT]], i32 1
; CHECK-NEXT:    [[TMP2:%.*]] = call double @ceil(double [[ARG1]])
; CHECK-NEXT:    [[ARG2:%.*]] = extractelement <4 x double> [[BROADCAST_SPLAT]], i32 2
; CHECK-NEXT:    [[TMP3:%.*]] = call double @ceil(double [[ARG2]])
; CHECK-NEXT:    [[ARG3:%.*]] = extractelement <4 x double> [[BROADCAST_SPLAT]], i32 3
; CHECK-NEXT:    [[TMP4:%.*]] = call double @ceil(double [[ARG3]])
; CHECK-NEXT:    [[INS:%.*]] = insertelement <4 x double> undef, double [[TMP1]], i32 0
; CHECK-NEXT:    [[INS4:%.*]] = insertelement <4 x double> [[INS]], double [[TMP2]], i32 1
; CHECK-NEXT:    [[INS5:%.*]] = insertelement <4 x double> [[INS4]], double [[TMP3]], i32 2
; CHECK-NEXT:    [[INS6:%.*]] = insertelement <4 x double> [[INS5]], double [[TMP4]], i32 3
; CHECK-NEXT:    ret void
;
  %broadcast.splatinsert = insertelement <4 x double> undef, double %c, i32 0
  %broadcast.splat = shufflevector <4 x double> %broadcast.splatinsert, <4 x double> undef, <4 x i32> zeroinitializer
  %vec_call = call svml_cc <4 x double> @__svml_ceil4(<4 x double> %broadcast.splat) #2
  ret void
}

define void @low_accuracy_fastmath(double %c) {
; CHECK-LABEL: define {{[^@]+}}@low_accuracy_fastmath(
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <4 x double> undef, double [[C:%.*]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <4 x double> [[BROADCAST_SPLATINSERT]], <4 x double> undef, <4 x i32> zeroinitializer
; CHECK-NEXT:    [[BROADCAST_SPLAT_PART_0_OF_2_:%.*]] = shufflevector <4 x double> [[BROADCAST_SPLAT]], <4 x double> undef, <2 x i32> <i32 0, i32 1>
; CHECK-NEXT:    [[VCALL:%.*]] = call fast svml_cc <2 x double> @__svml_ceil2(<2 x double> [[BROADCAST_SPLAT_PART_0_OF_2_]])
; CHECK-NEXT:    [[BROADCAST_SPLAT_PART_1_OF_2_:%.*]] = shufflevector <4 x double> [[BROADCAST_SPLAT]], <4 x double> undef, <2 x i32> <i32 2, i32 3>
; CHECK-NEXT:    [[VCALL1:%.*]] = call fast svml_cc <2 x double> @__svml_ceil2(<2 x double> [[BROADCAST_SPLAT_PART_1_OF_2_]])
; CHECK-NEXT:    [[SHUFFLE_COMB:%.*]] = shufflevector <2 x double> [[VCALL]], <2 x double> [[VCALL1]], <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    ret void
;
  %broadcast.splatinsert = insertelement <4 x double> undef, double %c, i32 0
  %broadcast.splat = shufflevector <4 x double> %broadcast.splatinsert, <4 x double> undef, <4 x i32> zeroinitializer
  %vec_call = call fast svml_cc <4 x double> @__svml_ceil4(<4 x double> %broadcast.splat) #2
  ret void
}

define void @medium_accuracy_no_fastmath(double %c) {
; CHECK-LABEL: define {{[^@]+}}@medium_accuracy_no_fastmath(
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <4 x double> undef, double [[C:%.*]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <4 x double> [[BROADCAST_SPLATINSERT]], <4 x double> undef, <4 x i32> zeroinitializer
; CHECK-NEXT:    [[ARG:%.*]] = extractelement <4 x double> [[BROADCAST_SPLAT]], i32 0
; CHECK-NEXT:    [[TMP1:%.*]] = call double @ceil(double [[ARG]])
; CHECK-NEXT:    [[ARG1:%.*]] = extractelement <4 x double> [[BROADCAST_SPLAT]], i32 1
; CHECK-NEXT:    [[TMP2:%.*]] = call double @ceil(double [[ARG1]])
; CHECK-NEXT:    [[ARG2:%.*]] = extractelement <4 x double> [[BROADCAST_SPLAT]], i32 2
; CHECK-NEXT:    [[TMP3:%.*]] = call double @ceil(double [[ARG2]])
; CHECK-NEXT:    [[ARG3:%.*]] = extractelement <4 x double> [[BROADCAST_SPLAT]], i32 3
; CHECK-NEXT:    [[TMP4:%.*]] = call double @ceil(double [[ARG3]])
; CHECK-NEXT:    [[INS:%.*]] = insertelement <4 x double> undef, double [[TMP1]], i32 0
; CHECK-NEXT:    [[INS4:%.*]] = insertelement <4 x double> [[INS]], double [[TMP2]], i32 1
; CHECK-NEXT:    [[INS5:%.*]] = insertelement <4 x double> [[INS4]], double [[TMP3]], i32 2
; CHECK-NEXT:    [[INS6:%.*]] = insertelement <4 x double> [[INS5]], double [[TMP4]], i32 3
; CHECK-NEXT:    ret void
;
  %broadcast.splatinsert = insertelement <4 x double> undef, double %c, i32 0
  %broadcast.splat = shufflevector <4 x double> %broadcast.splatinsert, <4 x double> undef, <4 x i32> zeroinitializer
  %vec_call = call svml_cc <4 x double> @__svml_ceil4(<4 x double> %broadcast.splat) #3
  ret void
}

define void @medium_accuracy_fastmath(double %c) {
; CHECK-LABEL: define {{[^@]+}}@medium_accuracy_fastmath(
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <4 x double> undef, double [[C:%.*]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <4 x double> [[BROADCAST_SPLATINSERT]], <4 x double> undef, <4 x i32> zeroinitializer
; CHECK-NEXT:    [[BROADCAST_SPLAT_PART_0_OF_2_:%.*]] = shufflevector <4 x double> [[BROADCAST_SPLAT]], <4 x double> undef, <2 x i32> <i32 0, i32 1>
; CHECK-NEXT:    [[VCALL:%.*]] = call fast svml_cc <2 x double> @__svml_ceil2(<2 x double> [[BROADCAST_SPLAT_PART_0_OF_2_]])
; CHECK-NEXT:    [[BROADCAST_SPLAT_PART_1_OF_2_:%.*]] = shufflevector <4 x double> [[BROADCAST_SPLAT]], <4 x double> undef, <2 x i32> <i32 2, i32 3>
; CHECK-NEXT:    [[VCALL1:%.*]] = call fast svml_cc <2 x double> @__svml_ceil2(<2 x double> [[BROADCAST_SPLAT_PART_1_OF_2_]])
; CHECK-NEXT:    [[SHUFFLE_COMB:%.*]] = shufflevector <2 x double> [[VCALL]], <2 x double> [[VCALL1]], <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    ret void
;
  %broadcast.splatinsert = insertelement <4 x double> undef, double %c, i32 0
  %broadcast.splat = shufflevector <4 x double> %broadcast.splatinsert, <4 x double> undef, <4 x i32> zeroinitializer
  %vec_call = call fast svml_cc <4 x double> @__svml_ceil4(<4 x double> %broadcast.splat) #3
  ret void
}

define void @high_accuracy_no_fastmath(double %c) {
; CHECK-LABEL: define {{[^@]+}}@high_accuracy_no_fastmath(
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <4 x double> undef, double [[C:%.*]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <4 x double> [[BROADCAST_SPLATINSERT]], <4 x double> undef, <4 x i32> zeroinitializer
; CHECK-NEXT:    [[ARG:%.*]] = extractelement <4 x double> [[BROADCAST_SPLAT]], i32 0
; CHECK-NEXT:    [[TMP1:%.*]] = call double @ceil(double [[ARG]])
; CHECK-NEXT:    [[ARG1:%.*]] = extractelement <4 x double> [[BROADCAST_SPLAT]], i32 1
; CHECK-NEXT:    [[TMP2:%.*]] = call double @ceil(double [[ARG1]])
; CHECK-NEXT:    [[ARG2:%.*]] = extractelement <4 x double> [[BROADCAST_SPLAT]], i32 2
; CHECK-NEXT:    [[TMP3:%.*]] = call double @ceil(double [[ARG2]])
; CHECK-NEXT:    [[ARG3:%.*]] = extractelement <4 x double> [[BROADCAST_SPLAT]], i32 3
; CHECK-NEXT:    [[TMP4:%.*]] = call double @ceil(double [[ARG3]])
; CHECK-NEXT:    [[INS:%.*]] = insertelement <4 x double> undef, double [[TMP1]], i32 0
; CHECK-NEXT:    [[INS4:%.*]] = insertelement <4 x double> [[INS]], double [[TMP2]], i32 1
; CHECK-NEXT:    [[INS5:%.*]] = insertelement <4 x double> [[INS4]], double [[TMP3]], i32 2
; CHECK-NEXT:    [[INS6:%.*]] = insertelement <4 x double> [[INS5]], double [[TMP4]], i32 3
; CHECK-NEXT:    ret void
;
  %broadcast.splatinsert = insertelement <4 x double> undef, double %c, i32 0
  %broadcast.splat = shufflevector <4 x double> %broadcast.splatinsert, <4 x double> undef, <4 x i32> zeroinitializer
  %vec_call = call svml_cc <4 x double> @__svml_ceil4(<4 x double> %broadcast.splat) #4
  ret void
}

define void @high_accuracy_fastmath(double %c) {
; CHECK-LABEL: define {{[^@]+}}@high_accuracy_fastmath(
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <4 x double> undef, double [[C:%.*]], i32 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <4 x double> [[BROADCAST_SPLATINSERT]], <4 x double> undef, <4 x i32> zeroinitializer
; CHECK-NEXT:    [[BROADCAST_SPLAT_PART_0_OF_2_:%.*]] = shufflevector <4 x double> [[BROADCAST_SPLAT]], <4 x double> undef, <2 x i32> <i32 0, i32 1>
; CHECK-NEXT:    [[VCALL:%.*]] = call fast svml_cc <2 x double> @__svml_ceil2(<2 x double> [[BROADCAST_SPLAT_PART_0_OF_2_]])
; CHECK-NEXT:    [[BROADCAST_SPLAT_PART_1_OF_2_:%.*]] = shufflevector <4 x double> [[BROADCAST_SPLAT]], <4 x double> undef, <2 x i32> <i32 2, i32 3>
; CHECK-NEXT:    [[VCALL1:%.*]] = call fast svml_cc <2 x double> @__svml_ceil2(<2 x double> [[BROADCAST_SPLAT_PART_1_OF_2_]])
; CHECK-NEXT:    [[SHUFFLE_COMB:%.*]] = shufflevector <2 x double> [[VCALL]], <2 x double> [[VCALL1]], <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    ret void
;
  %broadcast.splatinsert = insertelement <4 x double> undef, double %c, i32 0
  %broadcast.splat = shufflevector <4 x double> %broadcast.splatinsert, <4 x double> undef, <4 x i32> zeroinitializer
  %vec_call = call fast svml_cc <4 x double> @__svml_ceil4(<4 x double> %broadcast.splat) #4
  ret void
}

declare <4 x double> @__svml_ceil4(<4 x double>)

attributes #1 = { nounwind }
attributes #2 = { nounwind "imf-precision"="low" }
attributes #3 = { nounwind "imf-precision"="medium" }
attributes #4 = { nounwind "imf-precision"="high" }
