; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S -passes="loop(simple-loop-unswitch<nontrivial>),hir-ssa-deconstruction,hir-cg"  %s | FileCheck %s

; Loop unswitching was breaking the marked SIMD loop, causing a crash in HIR.

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #0

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #0

; Function Attrs: nounwind uwtable
define internal void @MAIN__.DIR.OMP.PARALLEL.LOOP.1.split81(ptr nocapture %"_unnamed_main$$_$D", i64 %do.norm.lb6.val, i64 %add.10, i1 %rel.1.not, i1 %rel.36, i64 %0, i1 %.not.not) #1 {
; CHECK-LABEL: @MAIN__.DIR.OMP.PARALLEL.LOOP.1.split81(
; CHECK-NEXT:  DIR.OMP.SIMD.2:
; CHECK-NEXT:    br label [[OMP_COLLAPSED_LOOP_BODY_LR_PH:%.*]]
; CHECK:       omp.pdo.body8:
; CHECK-NEXT:    br label [[DO_COND18_PREHEADER:%.*]]
; CHECK:       do.cond18.preheader:
; CHECK-NEXT:    [[ADD_9:%.*]] = add nuw nsw i64 0, 1
; CHECK-NEXT:    [[REL_2_NOT:%.*]] = icmp ugt i64 1, 0
; CHECK-NEXT:    br i1 [[REL_2_NOT]], label [[DO_EPILOG16_SPLIT:%.*]], label [[DO_COND18_PREHEADER]]
; CHECK:       do.epilog16.split:
; CHECK-NEXT:    [[ADD_101:%.*]] = add nsw i64 undef, 1
; CHECK-NEXT:    [[REL_1_NOT2:%.*]] = icmp sgt i64 [[DO_NORM_LB6_VAL:%.*]], undef
; CHECK-NEXT:    br label [[OMP_PDO_BODY8:%.*]]
; CHECK:       omp.collapsed.loop.body.lr.ph:
; CHECK-NEXT:    [[LB_NEW:%.*]] = load i64, ptr null, align 8
; CHECK-NEXT:    br label [[OMP_COLLAPSED_LOOP_BODY_PREHEADER:%.*]]
; CHECK:       omp.collapsed.loop.body.preheader:
; CHECK-NEXT:    [[TMP1:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.COLLAPSE"(i32 0), "QUAL.OMP.LASTPRIVATE"(ptr null), "QUAL.OMP.LASTPRIVATE"(ptr null), "QUAL.OMP.LIVEIN"(ptr null), "QUAL.OMP.LIVEIN"(ptr null), "QUAL.OMP.LIVEIN"(ptr null) ]
; CHECK-NEXT:    [[REL_363:%.*]] = icmp slt i64 0, 0
; CHECK-NEXT:    %"_unnamed_main$$_$G_fetch.38" = load float, ptr null, align 8
; CHECK-NEXT:    br i1 [[REL_1_NOT:%.*]], label [[OMP_COLLAPSED_LOOP_BODY_SPLIT_US:%.*]], label [[OMP_COLLAPSED_LOOP_BODY_PREHEADER_SPLIT:%.*]]
; CHECK:       omp.collapsed.loop.body.preheader.split:
; CHECK-NEXT:    br label [[OMP_COLLAPSED_LOOP_BODY:%.*]]
; CHECK:       omp.collapsed.loop.body:
; CHECK-NEXT:    [[TMP2:%.*]] = srem i64 0, 0
; CHECK-NEXT:    br label [[OMP_COLLAPSED_LOOP_BODY_SPLIT:%.*]]
; CHECK:       omp.collapsed.loop.body.split.us:
; CHECK-NEXT:    br i1 false, label [[OMP_COLLAPSED_LOOP_BODY_SPLIT_US_SPLIT_US:%.*]], label [[OMP_COLLAPSED_LOOP_BODY_SPLIT_US_SPLIT:%.*]]
; CHECK:       omp.collapsed.loop.body.split.us.split.us:
; CHECK-NEXT:    br label [[OMP_PDO_BODY8_US_US:%.*]]
; CHECK:       omp.pdo.body8.us.us:
; CHECK-NEXT:    br label [[DO_COND18_PREHEADER_US_US_US_US:%.*]]
; CHECK:       do.cond18.preheader.us.us.us.us:
; CHECK-NEXT:    [[STOREMERGE8_US_US_US_US:%.*]] = phi i64 [ [[DO_NORM_LB6_VAL]], [[OMP_PDO_BODY8_US_US]] ], [ 0, [[DO_COND18_DO_EPILOG20_CRIT_EDGE_SPLIT_US_US_US_US_US:%.*]] ]
; CHECK-NEXT:    ret void
; CHECK:       do.cond18.do.epilog20_crit_edge.split.us.us.us.us.us:
; CHECK-NEXT:    br label [[DO_COND18_PREHEADER_US_US_US_US]]
; CHECK:       omp.collapsed.loop.body.split.us.split:
; CHECK-NEXT:    store float 0.000000e+00, ptr null, align 8
; CHECK-NEXT:    ret void
; CHECK:       omp.collapsed.loop.body.split:
; CHECK-NEXT:    br i1 false, label [[OMP_COLLAPSED_LOOP_BODY_SPLIT_SPLIT_US:%.*]], label [[OMP_COLLAPSED_LOOP_BODY_SPLIT_SPLIT:%.*]]
; CHECK:       omp.collapsed.loop.body.split.split.us:
; CHECK-NEXT:    br label [[OMP_PDO_BODY8_US:%.*]]
; CHECK:       omp.pdo.body8.us:
; CHECK-NEXT:    br label [[DO_COND18_PREHEADER_US:%.*]]
; CHECK:       do.cond18.preheader.us:
; CHECK-NEXT:    [[ADD_9_US:%.*]] = add nuw nsw i64 0, 1
; CHECK-NEXT:    [[REL_2_NOT_US:%.*]] = icmp ugt i64 1, 0
; CHECK-NEXT:    br i1 [[REL_2_NOT_US]], label [[DO_EPILOG16_SPLIT_US:%.*]], label [[DO_COND18_PREHEADER_US]]
; CHECK:       do.epilog16.split.us:
; CHECK-NEXT:    [[ADD_101_US:%.*]] = add nsw i64 undef, 1
; CHECK-NEXT:    [[REL_1_NOT2_US:%.*]] = icmp sgt i64 [[DO_NORM_LB6_VAL]], undef
; CHECK-NEXT:    br label [[OMP_COLLAPSED_LOOP_INC_SPLIT_SPLIT_US:%.*]]
; CHECK:       omp.collapsed.loop.inc.split.split.us:
; CHECK-NEXT:    br label [[OMP_COLLAPSED_LOOP_INC_SPLIT:%.*]]
; CHECK:       omp.collapsed.loop.body.split.split:
; CHECK-NEXT:    br label [[OMP_PDO_BODY8]]
; CHECK:       omp.collapsed.loop.inc.split:
; CHECK-NEXT:    br label [[OMP_COLLAPSED_LOOP_INC:%.*]]
; CHECK:       omp.collapsed.loop.inc:
; CHECK-NEXT:    [[DOTNOT_NOT4:%.*]] = icmp ugt i64 0, 0
; CHECK-NEXT:    br i1 [[REL_36:%.*]], label [[OMP_COLLAPSED_LOOP_COND_DIR_OMP_END_SIMD_6_LOOPEXIT_CRIT_EDGE:%.*]], label [[OMP_COLLAPSED_LOOP_BODY]]
; CHECK:       omp.collapsed.loop.cond.DIR.OMP.END.SIMD.6.loopexit_crit_edge:
; CHECK-NEXT:    call void @llvm.directive.region.exit(token none) [ "DIR.OMP.END.SIMD"() ]
; CHECK-NEXT:    ret void
;
DIR.OMP.SIMD.2:
  br label %omp.collapsed.loop.body.lr.ph

omp.pdo.body8:                                    ; preds = %omp.collapsed.loop.body.split, %do.epilog16.split
  br label %do.cond18.preheader

do.cond18.preheader:                              ; preds = %do.cond18.preheader, %omp.pdo.body8
  %storemerge8 = phi i64 [ 0, %omp.pdo.body8 ], [ 0, %do.cond18.preheader ]
  %add.9 = add nuw nsw i64 0, 1
  %rel.2.not = icmp ugt i64 1, 0
  br i1 %rel.2.not, label %do.epilog16.split, label %do.cond18.preheader

do.epilog16.split:                                ; preds = %do.cond18.preheader
  %add.101 = add nsw i64 undef, 1
  %rel.1.not2 = icmp sgt i64 %do.norm.lb6.val, undef
  br i1 %rel.1.not, label %omp.collapsed.loop.inc.split, label %omp.pdo.body8

omp.collapsed.loop.body.lr.ph:                    ; preds = %DIR.OMP.SIMD.2
  %lb.new = load i64, ptr null, align 8
  br label %omp.collapsed.loop.body.preheader

omp.collapsed.loop.body.preheader:                ; preds = %omp.collapsed.loop.body.lr.ph
  %1 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.COLLAPSE"(i32 0), "QUAL.OMP.LASTPRIVATE"(ptr null), "QUAL.OMP.LASTPRIVATE"(ptr null), "QUAL.OMP.LIVEIN"(ptr null), "QUAL.OMP.LIVEIN"(ptr null), "QUAL.OMP.LIVEIN"(ptr null) ]
  %rel.363 = icmp slt i64 0, 0
  %"_unnamed_main$$_$G_fetch.38" = load float, ptr null, align 8
  br label %omp.collapsed.loop.body

omp.collapsed.loop.body:                          ; preds = %omp.collapsed.loop.inc, %omp.collapsed.loop.body.preheader
  %omp.collapsed.iv.local.080 = phi i64 [ 0, %omp.collapsed.loop.body.preheader ], [ 0, %omp.collapsed.loop.inc ]
  %2 = srem i64 0, 0
  br i1 %rel.1.not, label %omp.collapsed.loop.body.split.us, label %omp.collapsed.loop.body.split

omp.collapsed.loop.body.split.us:                 ; preds = %omp.collapsed.loop.body
  br i1 false, label %omp.collapsed.loop.body.split.us.split.us, label %omp.collapsed.loop.body.split.us.split

omp.collapsed.loop.body.split.us.split.us:        ; preds = %omp.collapsed.loop.body.split.us
  br label %omp.pdo.body8.us.us

omp.pdo.body8.us.us:                              ; preds = %omp.collapsed.loop.body.split.us.split.us
  br label %do.cond18.preheader.us.us.us.us

do.cond18.preheader.us.us.us.us:                  ; preds = %do.cond18.do.epilog20_crit_edge.split.us.us.us.us.us, %omp.pdo.body8.us.us
  %storemerge8.us.us.us.us = phi i64 [ %do.norm.lb6.val, %omp.pdo.body8.us.us ], [ 0, %do.cond18.do.epilog20_crit_edge.split.us.us.us.us.us ]
  ret void

do.cond18.do.epilog20_crit_edge.split.us.us.us.us.us: ; No predecessors!
  br label %do.cond18.preheader.us.us.us.us

omp.collapsed.loop.body.split.us.split:           ; preds = %omp.collapsed.loop.body.split.us
  store float 0.000000e+00, ptr null, align 8
  ret void

omp.collapsed.loop.body.split:                    ; preds = %omp.collapsed.loop.body
  br label %omp.pdo.body8

omp.collapsed.loop.inc.split:                     ; preds = %do.epilog16.split
  br label %omp.collapsed.loop.inc

omp.collapsed.loop.inc:                           ; preds = %omp.collapsed.loop.inc.split
  %.not.not4 = icmp ugt i64 0, 0
  br i1 %rel.36, label %omp.collapsed.loop.cond.DIR.OMP.END.SIMD.6.loopexit_crit_edge, label %omp.collapsed.loop.body

omp.collapsed.loop.cond.DIR.OMP.END.SIMD.6.loopexit_crit_edge: ; preds = %omp.collapsed.loop.inc
  call void @llvm.directive.region.exit(token none) [ "DIR.OMP.END.SIMD"() ]
  ret void
}

attributes #0 = { nounwind }
attributes #1 = { nounwind uwtable "denormal-fp-math"="preserve_sign,preserve_sign" "frame-pointer"="none" "intel-lang"="fortran" "loopopt-pipeline"="light" "may-have-openmp-directive"="true" "min-legal-vector-width"="0" "mt-func"="true" "pre_loopopt" "processed-by-vpo" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" }
