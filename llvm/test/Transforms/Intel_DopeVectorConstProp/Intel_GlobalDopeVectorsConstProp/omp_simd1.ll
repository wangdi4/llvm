; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function accel_ion_mix_.DIR.OMP.DISTRIBUTE.PARLOOP.12.split83.split --prefix-filecheck-ir-name IR --version 2
; RUN: opt < %s  -disable-output -passes=dopevectorconstprop -dope-vector-global-const-prop=true -debug-only=dope-vector-global-const-prop -enable-intel-advanced-opts -mtriple=i686-- -mattr=+avx2 2>&1 | FileCheck -check-prefix=CHECK-REPORT %s
; RUN: opt < %s  -S -passes=dopevectorconstprop -dope-vector-global-const-prop=true -debug-only=dope-vector-global-const-prop -enable-intel-advanced-opts -mtriple=i686-- -mattr=+avx2 -pretty-print-directives 2>&1 | FileCheck %s

; CHECK-REPORT: Global variable: md_globals_mp_a_
; CHECK-REPORT-NEXT:   LLVM Type: QNCA_a0$double*$rank2$
; CHECK-REPORT-NEXT:  Global dope vector result: Pass
; CHECK-REPORT-NEXT:  Dope vector analysis result: Pass
; CHECK-REPORT-NEXT:  Constant propagation status: performed
; CHECK-REPORT-NEXT:    [0] Array Pointer: Read
; CHECK-REPORT-NEXT:    [1] Element size: Written | Constant = i64 8
; CHECK-REPORT-NEXT:    [2] Co-Dimension: Written | Constant = i64 0
; CHECK-REPORT-NEXT:    [3] Flags: Read | Written
; CHECK-REPORT-NEXT:    [4] Dimensions: Written | Constant = i64 2
; CHECK-REPORT-NEXT:    [6][0] Extent: Written | Constant = i64 3
; CHECK-REPORT-NEXT:    [6][0] Stride: Written | Constant = i64 8
; CHECK-REPORT-NEXT:    [6][0] Lower Bound: Read | Written | Constant = i64 1
; CHECK-REPORT-NEXT:    [6][1] Extent: Written
; CHECK-REPORT-NEXT:    [6][1] Stride: Read | Written | Constant = i64 24
; CHECK-REPORT-NEXT:    [6][1] Lower Bound: Read | Written | Constant = i64 0

; CHECK-REPORT:Global variable: md_globals_mp_x_
; CHECK-REPORT-NEXT:  LLVM Type: QNCA_a0$double*$rank2$
; CHECK-REPORT-NEXT:  Global dope vector result: Pass
; CHECK-REPORT-NEXT:  Dope vector analysis result: Pass
; CHECK-REPORT-NEXT:  Constant propagation status: performed
; CHECK-REPORT-NEXT:    [0] Array Pointer: Read
; CHECK-REPORT-NEXT:    [1] Element size: Written | Constant = i64 8
; CHECK-REPORT-NEXT:    [2] Co-Dimension: Written | Constant = i64 0
; CHECK-REPORT-NEXT:    [3] Flags: Read | Written
; CHECK-REPORT-NEXT:    [4] Dimensions: Written | Constant = i64 2
; CHECK-REPORT-NEXT:    [6][0] Extent: Written | Constant = i64 3
; CHECK-REPORT-NEXT:    [6][0] Stride: Written | Constant = i64 8
; CHECK-REPORT-NEXT:    [6][0] Lower Bound: Read | Written | Constant = i64 1
; CHECK-REPORT-NEXT:    [6][1] Extent: Written | Constant = i64 10
; CHECK-REPORT-NEXT:    [6][1] Stride: Read | Written | Constant = i64 24
; CHECK-REPORT-NEXT:    [6][1] Lower Bound: Read | Written | Constant = i64 0

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"QNCA_a0$double*$rank2$" = type { ptr, i64, i64, i64, i64, i64, [2 x { i64, i64, i64 }] }
%struct.ident_t = type { i32, i32, i32, i32, ptr }

@llvm.compiler.used = appending global [2 x ptr] [ptr @__intel_new_feature_proc_init, ptr @__intel_new_feature_proc_init], section "llvm.metadata"
@md_globals_mp_a_ = internal global %"QNCA_a0$double*$rank2$" { ptr null, i64 0, i64 0, i64 1342177408, i64 2, i64 0, [2 x { i64, i64, i64 }] zeroinitializer }
@md_globals_mp_n_ = internal global i32 0, align 8
@md_globals_mp_x_ = internal target_declare global %"QNCA_a0$double*$rank2$" { ptr null, i64 0, i64 0, i64 1342177408, i64 2, i64 0, [2 x { i64, i64, i64 }] zeroinitializer }
@anon.51e22fbcc89b1089f46ef5816b9e3e9a.0 = internal unnamed_addr constant i32 65536, align 4
@anon.51e22fbcc89b1089f46ef5816b9e3e9a.1 = internal unnamed_addr constant i32 2, align 4
@.kmpc_loc.0.0 = private unnamed_addr global %struct.ident_t { i32 0, i32 838862850, i32 0, i32 0, ptr @.source.0.0.5 }
@.kmpc_loc.0.0.2 = private unnamed_addr global %struct.ident_t { i32 0, i32 838860802, i32 0, i32 0, ptr @.source.0.0.5 }
@.kmpc_loc.0.0.4 = private unnamed_addr global %struct.ident_t { i32 0, i32 838860802, i32 0, i32 0, ptr @.source.0.0.5 }
@.source.0.0.5 = private unnamed_addr constant [22 x i8] c";unknown;unknown;0;0;;"
@.kmpc_loc.0.0.6 = private unnamed_addr global %struct.ident_t { i32 0, i32 838860802, i32 0, i32 0, ptr @.source.0.0.5 }

; Function Attrs: nofree nounwind
declare dso_local void @__intel_new_feature_proc_init(i32, i64) #0

define dso_local void @MAIN__() #1 {
  %1 = alloca i64, align 8, !llfort.type_idx !5
  %2 = alloca i64, align 8, !llfort.type_idx !5
  %3 = tail call i32 @for_set_fpe_(ptr nonnull @anon.51e22fbcc89b1089f46ef5816b9e3e9a.0) #5, !llfort.type_idx !6
  %4 = tail call i32 @for_set_reentrancy(ptr nonnull @anon.51e22fbcc89b1089f46ef5816b9e3e9a.1) #5, !llfort.type_idx !6
  store i32 10, ptr @md_globals_mp_n_, align 8, !tbaa !7
  %5 = load i64, ptr getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_x_, i64 0, i32 3), align 8, !tbaa !12, !llfort.type_idx !16
  %6 = and i64 %5, 1030792151296
  %7 = or i64 %6, 133
  store i64 %7, ptr getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_x_, i64 0, i32 3), align 8, !tbaa !12
  store i64 0, ptr getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_x_, i64 0, i32 5), align 8, !tbaa !17
  store i64 8, ptr getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_x_, i64 0, i32 1), align 8, !tbaa !18
  store i64 2, ptr getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_x_, i64 0, i32 4), align 8, !tbaa !19
  store i64 0, ptr getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_x_, i64 0, i32 2), align 8, !tbaa !20
  %8 = tail call ptr @llvm.intel.subscript.p0.i64.i32.p0.i32(i8 0, i64 0, i32 24, ptr nonnull elementtype(i64) getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_x_, i64 0, i32 6, i64 0, i32 2), i32 0), !llfort.type_idx !21
  store i64 1, ptr %8, align 1, !tbaa !22
  %9 = tail call ptr @llvm.intel.subscript.p0.i64.i32.p0.i32(i8 0, i64 0, i32 24, ptr nonnull elementtype(i64) getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_x_, i64 0, i32 6, i64 0), i32 0), !llfort.type_idx !23
  store i64 3, ptr %9, align 1, !tbaa !24
  %10 = tail call ptr @llvm.intel.subscript.p0.i64.i32.p0.i32(i8 0, i64 0, i32 24, ptr nonnull elementtype(i64) getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_x_, i64 0, i32 6, i64 0, i32 2), i32 1), !llfort.type_idx !21
  store i64 0, ptr %10, align 1, !tbaa !22
  %11 = tail call ptr @llvm.intel.subscript.p0.i64.i32.p0.i32(i8 0, i64 0, i32 24, ptr nonnull elementtype(i64) getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_x_, i64 0, i32 6, i64 0), i32 1), !llfort.type_idx !23
  store i64 10, ptr %11, align 1, !tbaa !24
  %12 = tail call ptr @llvm.intel.subscript.p0.i64.i32.p0.i32(i8 0, i64 0, i32 24, ptr nonnull elementtype(i64) getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_x_, i64 0, i32 6, i64 0, i32 1), i32 0), !llfort.type_idx !25
  store i64 8, ptr %12, align 1, !tbaa !26
  %13 = tail call ptr @llvm.intel.subscript.p0.i64.i32.p0.i32(i8 0, i64 0, i32 24, ptr nonnull elementtype(i64) getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_x_, i64 0, i32 6, i64 0, i32 1), i32 1), !llfort.type_idx !25
  store i64 24, ptr %13, align 1, !tbaa !26
  %14 = call i32 (ptr, i32, ...) @for_check_mult_overflow64(ptr nonnull %1, i32 2, i64 10, i64 24) #5, !llfort.type_idx !6
  %15 = load i64, ptr %1, align 8, !tbaa !27, !llfort.type_idx !5
  %16 = load i64, ptr getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_x_, i64 0, i32 3), align 8, !tbaa !12, !llfort.type_idx !16
  %17 = and i64 %16, -68451041281
  %18 = or i64 %17, 1342177280
  store i64 %18, ptr getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_x_, i64 0, i32 3), align 8, !tbaa !12
  %19 = trunc i64 %16 to i32
  %20 = shl i32 %19, 1
  %21 = and i32 %20, 2
  %22 = shl i32 %14, 4
  %23 = and i32 %22, 16
  %24 = lshr i64 %16, 15
  %25 = trunc i64 %24 to i32
  %26 = and i32 %25, 65011712
  %27 = or i32 %23, %21
  %28 = or i32 %27, %26
  %29 = or i32 %28, 327680
  %30 = load i64, ptr getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_x_, i64 0, i32 5), align 8, !tbaa !17, !llfort.type_idx !28
  %31 = inttoptr i64 %30 to ptr, !llfort.type_idx !29
  %32 = tail call i32 @for_alloc_allocatable_handle(i64 %15, ptr nonnull @md_globals_mp_x_, i32 %29, ptr %31) #5, !llfort.type_idx !6
  %33 = load i64, ptr getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_a_, i64 0, i32 3), align 8, !tbaa !30, !llfort.type_idx !16
  %34 = and i64 %33, 1030792151296
  %35 = or i64 %34, 133
  store i64 %35, ptr getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_a_, i64 0, i32 3), align 8, !tbaa !30
  store i64 0, ptr getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_a_, i64 0, i32 5), align 8, !tbaa !32
  store i64 8, ptr getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_a_, i64 0, i32 1), align 8, !tbaa !33
  store i64 2, ptr getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_a_, i64 0, i32 4), align 8, !tbaa !34
  store i64 0, ptr getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_a_, i64 0, i32 2), align 8, !tbaa !35
  %36 = tail call ptr @llvm.intel.subscript.p0.i64.i32.p0.i32(i8 0, i64 0, i32 24, ptr nonnull elementtype(i64) getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_a_, i64 0, i32 6, i64 0, i32 2), i32 0), !llfort.type_idx !21
  store i64 1, ptr %36, align 1, !tbaa !36
  %37 = tail call ptr @llvm.intel.subscript.p0.i64.i32.p0.i32(i8 0, i64 0, i32 24, ptr nonnull elementtype(i64) getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_a_, i64 0, i32 6, i64 0), i32 0), !llfort.type_idx !23
  store i64 3, ptr %37, align 1, !tbaa !37
  %38 = load i32, ptr @md_globals_mp_n_, align 8, !tbaa !7, !llfort.type_idx !38
  %39 = tail call ptr @llvm.intel.subscript.p0.i64.i32.p0.i32(i8 0, i64 0, i32 24, ptr nonnull elementtype(i64) getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_a_, i64 0, i32 6, i64 0, i32 2), i32 1), !llfort.type_idx !21
  store i64 0, ptr %39, align 1, !tbaa !36
  %40 = icmp sgt i32 %38, 0
  %41 = select i1 %40, i32 %38, i32 0
  %42 = zext i32 %41 to i64
  %43 = tail call ptr @llvm.intel.subscript.p0.i64.i32.p0.i32(i8 0, i64 0, i32 24, ptr nonnull elementtype(i64) getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_a_, i64 0, i32 6, i64 0), i32 1), !llfort.type_idx !23
  store i64 %42, ptr %43, align 1, !tbaa !37
  %44 = tail call ptr @llvm.intel.subscript.p0.i64.i32.p0.i32(i8 0, i64 0, i32 24, ptr nonnull elementtype(i64) getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_a_, i64 0, i32 6, i64 0, i32 1), i32 0), !llfort.type_idx !25
  store i64 8, ptr %44, align 1, !tbaa !39
  %45 = tail call ptr @llvm.intel.subscript.p0.i64.i32.p0.i32(i8 0, i64 0, i32 24, ptr nonnull elementtype(i64) getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_a_, i64 0, i32 6, i64 0, i32 1), i32 1), !llfort.type_idx !25
  store i64 24, ptr %45, align 1, !tbaa !39
  %46 = call i32 (ptr, i32, ...) @for_check_mult_overflow64(ptr nonnull %2, i32 2, i64 %42, i64 24) #5, !llfort.type_idx !6
  %47 = load i64, ptr %2, align 8, !tbaa !27, !llfort.type_idx !5
  %48 = load i64, ptr getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_a_, i64 0, i32 3), align 8, !tbaa !30, !llfort.type_idx !16
  %49 = and i64 %48, -68451041281
  %50 = or i64 %49, 1342177280
  store i64 %50, ptr getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_a_, i64 0, i32 3), align 8, !tbaa !30
  %51 = trunc i64 %48 to i32
  %52 = shl i32 %51, 1
  %53 = and i32 %52, 2
  %54 = shl i32 %46, 4
  %55 = and i32 %54, 16
  %56 = lshr i64 %48, 15
  %57 = trunc i64 %56 to i32
  %58 = and i32 %57, 65011712
  %59 = or i32 %55, %53
  %60 = or i32 %59, %58
  %61 = or i32 %60, 327680
  %62 = load i64, ptr getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_a_, i64 0, i32 5), align 8, !tbaa !32, !llfort.type_idx !28
  %63 = inttoptr i64 %62 to ptr, !llfort.type_idx !29
  %64 = tail call i32 @for_alloc_allocatable_handle(i64 %47, ptr nonnull @md_globals_mp_a_, i32 %61, ptr %63) #5, !llfort.type_idx !6
  %65 = load i32, ptr @md_globals_mp_n_, align 8, !tbaa !40, !llfort.type_idx !45
  %66 = add nsw i32 %65, -1
  %67 = zext i32 %66 to i64
  tail call void (ptr, i32, ptr, ...) @__kmpc_fork_teams(ptr nonnull @.kmpc_loc.0.0.6, i32 2, ptr nonnull @accel_ion_mix_.DIR.OMP.TEAMS.2.split, i64 %67, i64 0)
  ret void
}

declare !llfort.intrin_id !46 dso_local i32 @for_set_fpe_(ptr nocapture readonly) local_unnamed_addr

; Function Attrs: nofree
declare !llfort.intrin_id !47 dso_local i32 @for_set_reentrancy(ptr nocapture readonly) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree norecurse nosync nounwind speculatable willreturn memory(none)
declare ptr @llvm.intel.subscript.p0.i64.i32.p0.i32(i8, i64, i32, ptr, i32) #3

; Function Attrs: nofree
declare !llfort.intrin_id !48 dso_local i32 @for_check_mult_overflow64(ptr nocapture, i32, ...) local_unnamed_addr #2

; Function Attrs: nofree
declare !llfort.intrin_id !49 dso_local i32 @for_alloc_allocatable_handle(i64, ptr nocapture, i32, ptr) local_unnamed_addr #2

; Function Attrs: nofree nounwind uwtable
define internal void @accel_ion_mix_.DIR.OMP.TEAMS.2.split(ptr nocapture readnone %0, ptr nocapture readnone %1, i64 %2, i64 %3) #4 {
  %5 = and i64 %2, 4294967295
  tail call void (ptr, i32, ptr, ...) @__kmpc_fork_call(ptr nonnull @.kmpc_loc.0.0.4, i32 2, ptr nonnull @accel_ion_mix_.DIR.OMP.DISTRIBUTE.PARLOOP.12.split83.split, i64 0, i64 %5)
  ret void
}

; Function Attrs: nounwind
declare !callback !50 void @__kmpc_fork_teams(ptr, i32, ptr, ...) local_unnamed_addr #5

; Function Attrs: nounwind uwtable
define internal void @accel_ion_mix_.DIR.OMP.DISTRIBUTE.PARLOOP.12.split83.split(ptr nocapture readonly %0, ptr nocapture readnone %1, i64 %2, i64 %3) #6 {
; CHECK-LABEL: define internal void @accel_ion_mix_.DIR.OMP.DISTRIBUTE.PARLOOP.12.split83.split
; CHECK-SAME: (ptr nocapture readonly [[TMP0:%.*]], ptr nocapture readnone [[TMP1:%.*]], i64 [[TMP2:%.*]], i64 [[TMP3:%.*]]) #[[ATTR7:[0-9]+]] {
  %5 = trunc i64 %3 to i32
; CHECK:    [[TMP6:%.*]] = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
; CHECK:    [[TMP12:%.*]] = alloca double, align 8
  %12 = alloca double, align 8
; CHECK:    [[TMP13:%.*]] = alloca i32, align 4
  %13 = alloca i32, align 4
  store i32 0, ptr %7, align 4
  %14 = icmp slt i32 %5, 0
  br i1 %14, label %55, label %56

15:                                               ; preds = %31, %15
  %16 = phi i64 [ 0, %31 ], [ %23, %15 ]
  %17 = phi double [ %42, %31 ], [ %22, %15 ]
  %18 = fadd fast double %41, %17
  %19 = call ptr @llvm.intel.subscript.p0.i64.i64.p0.i64(i8 1, i64 %36, i64 %35, ptr nonnull elementtype(double) %33, i64 %16), !llfort.type_idx !52
  %20 = call ptr @llvm.intel.subscript.p0.i64.i64.p0.i64(i8 0, i64 %34, i64 8, ptr elementtype(double) %19, i64 1), !llfort.type_idx !52
  %21 = load double, ptr %20, align 1, !tbaa !53, !alias.scope !59, !noalias !66, !llvm.access.group !87, !llfort.type_idx !52
  %22 = fsub fast double %18, %21
  %23 = add nuw nsw i64 %16, 1
  %24 = icmp eq i64 %23, %43
  br i1 %24, label %44, label %15, !llvm.loop !90

25:                                               ; preds = %61, %47
  %26 = phi i32 [ %52, %47 ], [ %58, %61 ]
  store i32 %26, ptr %6, align 4, !tbaa !93, !alias.scope !95, !noalias !96, !llvm.access.group !88
  %27 = load i32, ptr @md_globals_mp_n_, align 8, !tbaa !127, !alias.scope !129, !noalias !130, !llvm.access.group !88, !llfort.type_idx !45
  store double 0.000000e+00, ptr %12, align 8, !llvm.access.group !88
  %28 = icmp slt i32 %27, 1
  br i1 %28, label %29, label %31

29:                                               ; preds = %25
  %30 = sext i32 %26 to i64, !llfort.type_idx !5
  br label %47

31:                                               ; preds = %25
; CHECK:      [[TMP32:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(),
; CHECK-NEXT: "QUAL.OMP.LINEAR:TYPED.IV"(ptr [[TMP13]], i32 0, i64 1, i32 1),
; CHECK-NEXT: "QUAL.OMP.REDUCTION.ADD:TYPED"(ptr [[TMP12]], double 0.000000e+00, i64 1),
; CHECK-NEXT: "QUAL.OMP.NORMALIZED.IV:TYPED"(ptr null, i32 0),
; CHECK-NEXT: "QUAL.OMP.NORMALIZED.UB:TYPED"(ptr null, i32 0),
; CHECK-NEXT: "QUAL.OMP.LIVEIN"(ptr [[TMP6]]),
; CHECK-NEXT: "QUAL.OMP.LIVEIN:F90_DV"(ptr @md_globals_mp_x_),
; CHECK-NEXT: "QUAL.OMP.LIVEIN"(ptr @md_globals_mp_n_) ]
  %32 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.LINEAR:TYPED.IV"(ptr %13, i32 0, i64 1, i32 1), "QUAL.OMP.REDUCTION.ADD:TYPED"(ptr %12, double 0.000000e+00, i64 1), "QUAL.OMP.NORMALIZED.IV:TYPED"(ptr null, i32 0), "QUAL.OMP.NORMALIZED.UB:TYPED"(ptr null, i32 0), "QUAL.OMP.LIVEIN"(ptr %6), "QUAL.OMP.LIVEIN:F90_DV"(ptr @md_globals_mp_x_), "QUAL.OMP.LIVEIN"(ptr @md_globals_mp_n_) ], !llvm.access.group !88
; CHECK:    [[TMP33:%.*]] = load ptr, ptr @md_globals_mp_x_
  %33 = load ptr, ptr @md_globals_mp_x_, align 8, !tbaa !131, !alias.scope !135, !noalias !130, !llvm.access.group !87, !llfort.type_idx !52
  %34 = load i64, ptr %62, align 1, !tbaa !136, !alias.scope !137, !noalias !130, !llvm.access.group !87, !llfort.type_idx !21
  %35 = load i64, ptr %63, align 1, !tbaa !138, !range !139, !alias.scope !140, !noalias !130, !llvm.access.group !87, !llfort.type_idx !25
  %36 = load i64, ptr %64, align 1, !tbaa !136, !alias.scope !141, !noalias !130, !llvm.access.group !87, !llfort.type_idx !21
; CHECK:    [[TMP37:%.*]] = load i32, ptr [[TMP6]]
  %37 = load i32, ptr %6, align 4, !tbaa !93, !alias.scope !142, !noalias !143, !llvm.access.group !88
; CHECK:    [[TMP38:%.*]] = sext i32 [[TMP37]] to i64
  %38 = sext i32 %37 to i64
; CHECK:    [[TMP39:%.*]] = call ptr @llvm.intel.subscript.p0.i64.i64.p0.i64(i8 1, i64 0, i64 24, ptr elementtype(double) [[TMP33]], i64 [[TMP38]])
  %39 = call ptr @llvm.intel.subscript.p0.i64.i64.p0.i64(i8 1, i64 %36, i64 %35, ptr elementtype(double) %33, i64 %38), !llfort.type_idx !52
; CHECK:    [[TMP40:%.*]] = call ptr @llvm.intel.subscript.p0.i64.i64.p0.i64(i8 0, i64 1, i64 8, ptr elementtype(double) [[TMP39]], i64 1)
  %40 = call ptr @llvm.intel.subscript.p0.i64.i64.p0.i64(i8 0, i64 %34, i64 8, ptr elementtype(double) %39, i64 1), !llfort.type_idx !52
; CHECK:    [[TMP41:%.*]] = load double, ptr [[TMP40]]
  %41 = load double, ptr %40, align 1, !tbaa !53, !alias.scope !144, !noalias !66, !llvm.access.group !87, !llfort.type_idx !52
; CHECK:    [[TMP42:%.*]] = load double, ptr [[TMP12]]
  %42 = load double, ptr %12, align 8, !tbaa !145, !alias.scope !147, !noalias !148
  %43 = zext i32 %27 to i64
  br label %15

44:                                               ; preds = %15
  store i32 %27, ptr %13, align 4, !tbaa !149, !alias.scope !151, !noalias !152
  store double %22, ptr %12, align 8, !tbaa !145, !alias.scope !147, !noalias !148
  br label %45

45:                                               ; preds = %44
; CHECK:    call void @llvm.directive.region.exit(token [[TMP32]]) [ "DIR.OMP.END.SIMD"() ]
  call void @llvm.directive.region.exit(token %32) [ "DIR.OMP.END.SIMD"() ], !llvm.access.group !88
  %46 = fadd double %22, 0.000000e+00
  br label %47

47:                                               ; preds = %45, %29
  %48 = phi i64 [ %30, %29 ], [ %38, %45 ]
  %49 = phi double [ 0.000000e+00, %29 ], [ %46, %45 ]
  %50 = call ptr @llvm.intel.subscript.p0.i64.i64.p0.i64(i8 1, i64 %71, i64 %69, ptr elementtype(double) %65, i64 %48), !llfort.type_idx !52
  %51 = call ptr @llvm.intel.subscript.p0.i64.i64.p0.i64(i8 0, i64 %67, i64 8, ptr elementtype(double) %50, i64 1), !llfort.type_idx !52
  store double %49, ptr %51, align 1, !tbaa !153, !alias.scope !155, !noalias !156, !llvm.access.group !88
  %52 = add nuw i32 %26, 1
  %53 = icmp eq i32 %52, %72
  br i1 %53, label %54, label %25, !llvm.loop !157

54:                                               ; preds = %56, %47
  call void @__kmpc_for_static_fini(ptr nonnull @.kmpc_loc.0.0.2, i32 %57)
  br label %55

55:                                               ; preds = %54, %4
  ret void

56:                                               ; preds = %4
  %57 = load i32, ptr %0, align 4
  store i32 0, ptr %8, align 4
  store i32 %5, ptr %9, align 4
  store i32 1, ptr %10, align 4
  store i32 %5, ptr %11, align 4
  call void @__kmpc_dist_for_static_init_4(ptr nonnull @.kmpc_loc.0.0, i32 %57, i32 34, ptr nonnull %7, ptr nonnull %8, ptr nonnull %9, ptr nonnull %11, ptr nonnull %10, i32 1, i32 1)
  %58 = load i32, ptr %8, align 4, !range !159
  %59 = load i32, ptr %9, align 4, !range !159
  %60 = icmp ugt i32 %58, %59
  br i1 %60, label %54, label %61

61:                                               ; preds = %56
  %62 = call ptr @llvm.intel.subscript.p0.i64.i32.p0.i32(i8 0, i64 0, i32 24, ptr nonnull elementtype(i64) getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_x_, i64 0, i32 6, i64 0, i32 2), i32 0)
  %63 = call ptr @llvm.intel.subscript.p0.i64.i32.p0.i32(i8 0, i64 0, i32 24, ptr nonnull elementtype(i64) getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_x_, i64 0, i32 6, i64 0, i32 1), i32 1)
  %64 = call ptr @llvm.intel.subscript.p0.i64.i32.p0.i32(i8 0, i64 0, i32 24, ptr nonnull elementtype(i64) getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_x_, i64 0, i32 6, i64 0, i32 2), i32 1)
  %65 = load ptr, ptr @md_globals_mp_a_, align 8
  %66 = call ptr @llvm.intel.subscript.p0.i64.i32.p0.i32(i8 0, i64 0, i32 24, ptr nonnull elementtype(i64) getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_a_, i64 0, i32 6, i64 0, i32 2), i32 0)
  %67 = load i64, ptr %66, align 1
  %68 = call ptr @llvm.intel.subscript.p0.i64.i32.p0.i32(i8 0, i64 0, i32 24, ptr nonnull elementtype(i64) getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_a_, i64 0, i32 6, i64 0, i32 1), i32 1)
  %69 = load i64, ptr %68, align 1, !range !139
  %70 = call ptr @llvm.intel.subscript.p0.i64.i32.p0.i32(i8 0, i64 0, i32 24, ptr nonnull elementtype(i64) getelementptr inbounds (%"QNCA_a0$double*$rank2$", ptr @md_globals_mp_a_, i64 0, i32 6, i64 0, i32 2), i32 1)
  %71 = load i64, ptr %70, align 1
  %72 = add nuw nsw i32 %59, 1
  br label %25
}

; Function Attrs: nofree nounwind
declare !callback !50 void @__kmpc_fork_call(ptr, i32, ptr, ...) local_unnamed_addr #0

; Function Attrs: mustprogress nocallback nofree norecurse nosync nounwind speculatable willreturn memory(none)
declare ptr @llvm.intel.subscript.p0.i64.i64.p0.i64(i8, i64, i64, ptr, i64) #3

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #5

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #5

; Function Attrs: nofree nounwind
declare void @__kmpc_for_static_fini(ptr nocapture nofree readonly, i32) local_unnamed_addr #0

; Function Attrs: nounwind
declare void @__kmpc_dist_for_static_init_4(ptr, i32, i32, ptr, ptr, ptr, ptr, ptr, i32, i32) local_unnamed_addr #5

attributes #0 = { nofree nounwind }
attributes #1 = { nounwind uwtable "denormal-fp-math"="preserve_sign" "frame-pointer"="none" "intel-lang"="fortran" "loopopt-pipeline"="full" "may-have-openmp-directive"="true" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "pre_loopopt" "prefer-vector-width"="512" "target-cpu"="skylake-avx512"  "unsafe-fp-math"="true" }
attributes #2 = { nofree "intel-lang"="fortran" }
attributes #3 = { mustprogress nocallback nofree norecurse nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nofree nounwind uwtable "denormal-fp-math"="preserve_sign" "frame-pointer"="none" "intel-lang"="fortran" "loopopt-pipeline"="full" "may-have-openmp-directive"="true" "min-legal-vector-width"="0" "mt-func"="true" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "pre_loopopt" "prefer-vector-width"="512" "processed-by-vpo" "target-cpu"="skylake-avx512"  "unsafe-fp-math"="true" }
attributes #5 = { nounwind }
attributes #6 = { nounwind uwtable "denormal-fp-math"="preserve_sign" "frame-pointer"="none" "intel-lang"="fortran" "loopopt-pipeline"="full" "may-have-openmp-directive"="true" "min-legal-vector-width"="0" "mt-func"="true" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "pre_loopopt" "prefer-vector-width"="512" "processed-by-vpo" "target-cpu"="skylake-avx512" "unsafe-fp-math"="true" }

!omp_offload.info = !{!0}
!llvm.module.flags = !{!1, !2, !3, !4}
!ifx.types.dv = !{!160}

!0 = !{i32 1, !"md_globals_mp_x_", i32 0, i32 0, ptr @md_globals_mp_x_}
!1 = !{i32 1, !"ThinLTO", i32 0}
!2 = !{i32 1, !"EnableSplitLTOUnit", i32 1}
!3 = !{i32 7, !"openmp", i32 50}
!4 = !{i32 1, !"LTOPostLink", i32 1}
!5 = !{i64 3}
!6 = !{i64 2}
!7 = !{!8, !8, i64 0}
!8 = !{!"ifx$unique_sym$7", !9, i64 0}
!9 = !{!"Fortran Data Symbol", !10, i64 0}
!10 = !{!"Generic Fortran Symbol", !11, i64 0}
!11 = !{!"ifx$root$2$MAIN__"}
!12 = !{!13, !14, i64 24}
!13 = !{!"ifx$descr$3", !14, i64 0, !14, i64 8, !14, i64 16, !14, i64 24, !14, i64 32, !14, i64 40, !14, i64 48, !14, i64 56, !14, i64 64, !14, i64 72, !14, i64 80, !14, i64 88}
!14 = !{!"ifx$descr$field", !15, i64 0}
!15 = !{!"Fortran Dope Vector Symbol", !10, i64 0}
!16 = !{i64 29}
!17 = !{!13, !14, i64 40}
!18 = !{!13, !14, i64 8}
!19 = !{!13, !14, i64 32}
!20 = !{!13, !14, i64 16}
!21 = !{i64 20}
!22 = !{!13, !14, i64 64}
!23 = !{i64 18}
!24 = !{!13, !14, i64 48}
!25 = !{i64 19}
!26 = !{!13, !14, i64 56}
!27 = !{!9, !9, i64 0}
!28 = !{i64 31}
!29 = !{i64 11}
!30 = !{!31, !14, i64 24}
!31 = !{!"ifx$descr$4", !14, i64 0, !14, i64 8, !14, i64 16, !14, i64 24, !14, i64 32, !14, i64 40, !14, i64 48, !14, i64 56, !14, i64 64, !14, i64 72, !14, i64 80, !14, i64 88}
!32 = !{!31, !14, i64 40}
!33 = !{!31, !14, i64 8}
!34 = !{!31, !14, i64 32}
!35 = !{!31, !14, i64 16}
!36 = !{!31, !14, i64 64}
!37 = !{!31, !14, i64 48}
!38 = !{i64 61}
!39 = !{!31, !14, i64 56}
!40 = !{!41, !41, i64 0}
!41 = !{!"ifx$unique_sym$1$0", !42, i64 0}
!42 = !{!"Fortran Data Symbol", !43, i64 0}
!43 = !{!"Generic Fortran Symbol", !44, i64 0}
!44 = !{!"ifx$root$1$accel_ion_mix_$0"}
!45 = !{i64 46}
!46 = !{i32 97}
!47 = !{i32 98}
!48 = !{i32 102}
!49 = !{i32 94}
!50 = !{!51}
!51 = !{i64 2, i64 -1, i64 -1, i1 true}
!52 = !{i64 6}
!53 = !{!54, !54, i64 0}
!54 = !{!"ifx$unique_sym$5", !55, i64 0}
!55 = !{!"Fortran Target Data Symbol", !56, i64 0}
!56 = !{!"Fortran Data Symbol", !57, i64 0}
!57 = !{!"Generic Fortran Symbol", !58, i64 0}
!58 = !{!"ifx$root$1$accel_ion_mix_"}
!59 = !{!60, !62, !63, !65}
!60 = distinct !{!60, !61, !"OMPAliasScope"}
!61 = distinct !{!61, !"OMPDomain"}
!62 = distinct !{!62, !61, !"OMPAliasScope"}
!63 = distinct !{!63, !64, !"OMPAliasScope"}
!64 = distinct !{!64, !"OMPDomain"}
!65 = distinct !{!65, !64, !"OMPAliasScope"}
!66 = !{!67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86}
!67 = distinct !{!67, !61, !"OMPAliasScope"}
!68 = distinct !{!68, !61, !"OMPAliasScope"}
!69 = distinct !{!69, !61, !"OMPAliasScope"}
!70 = distinct !{!70, !61, !"OMPAliasScope"}
!71 = distinct !{!71, !61, !"OMPAliasScope"}
!72 = distinct !{!72, !61, !"OMPAliasScope"}
!73 = distinct !{!73, !61, !"OMPAliasScope"}
!74 = distinct !{!74, !61, !"OMPAliasScope"}
!75 = distinct !{!75, !61, !"OMPAliasScope"}
!76 = distinct !{!76, !61, !"OMPAliasScope"}
!77 = distinct !{!77, !64, !"OMPAliasScope"}
!78 = distinct !{!78, !64, !"OMPAliasScope"}
!79 = distinct !{!79, !64, !"OMPAliasScope"}
!80 = distinct !{!80, !64, !"OMPAliasScope"}
!81 = distinct !{!81, !64, !"OMPAliasScope"}
!82 = distinct !{!82, !64, !"OMPAliasScope"}
!83 = distinct !{!83, !64, !"OMPAliasScope"}
!84 = distinct !{!84, !64, !"OMPAliasScope"}
!85 = distinct !{!85, !64, !"OMPAliasScope"}
!86 = distinct !{!86, !64, !"OMPAliasScope"}
!87 = !{!88, !89}
!88 = distinct !{}
!89 = distinct !{}
!90 = distinct !{!90, !91, !92}
!91 = !{!"llvm.loop.vectorize.ivdep_loop", i32 0}
!92 = !{!"llvm.loop.parallel_accesses", !89}
!93 = !{!94, !94, i64 0}
!94 = !{!"ifx$unique_sym$2", !56, i64 0}
!95 = !{!67, !68, !77, !78}
!96 = !{!97, !98, !69, !70, !99, !71, !75, !62, !100, !73, !74, !76, !60, !101, !102, !103, !72, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !79, !80, !114, !81, !85, !65, !115, !83, !84, !86, !63, !116, !117, !118, !82, !119, !120, !121, !122, !123, !124, !125, !126}
!97 = distinct !{!97, !61, !"OMPAliasScope"}
!98 = distinct !{!98, !61, !"OMPAliasScope"}
!99 = distinct !{!99, !61, !"OMPAliasScope"}
!100 = distinct !{!100, !61, !"OMPAliasScope"}
!101 = distinct !{!101, !61, !"OMPAliasScope"}
!102 = distinct !{!102, !61, !"OMPAliasScope"}
!103 = distinct !{!103, !61, !"OMPAliasScope"}
!104 = distinct !{!104, !61, !"OMPAliasScope"}
!105 = distinct !{!105, !61, !"OMPAliasScope"}
!106 = distinct !{!106, !61, !"OMPAliasScope"}
!107 = distinct !{!107, !61, !"OMPAliasScope"}
!108 = distinct !{!108, !61, !"OMPAliasScope"}
!109 = distinct !{!109, !61, !"OMPAliasScope"}
!110 = distinct !{!110, !61, !"OMPAliasScope"}
!111 = distinct !{!111, !61, !"OMPAliasScope"}
!112 = distinct !{!112, !64, !"OMPAliasScope"}
!113 = distinct !{!113, !64, !"OMPAliasScope"}
!114 = distinct !{!114, !64, !"OMPAliasScope"}
!115 = distinct !{!115, !64, !"OMPAliasScope"}
!116 = distinct !{!116, !64, !"OMPAliasScope"}
!117 = distinct !{!117, !64, !"OMPAliasScope"}
!118 = distinct !{!118, !64, !"OMPAliasScope"}
!119 = distinct !{!119, !64, !"OMPAliasScope"}
!120 = distinct !{!120, !64, !"OMPAliasScope"}
!121 = distinct !{!121, !64, !"OMPAliasScope"}
!122 = distinct !{!122, !64, !"OMPAliasScope"}
!123 = distinct !{!123, !64, !"OMPAliasScope"}
!124 = distinct !{!124, !64, !"OMPAliasScope"}
!125 = distinct !{!125, !64, !"OMPAliasScope"}
!126 = distinct !{!126, !64, !"OMPAliasScope"}
!127 = !{!128, !128, i64 0}
!128 = !{!"ifx$unique_sym$1", !56, i64 0}
!129 = !{!99, !114}
!130 = !{!67, !68, !69, !70, !71, !75, !62, !100, !73, !74, !76, !60, !101, !102, !103, !72, !77, !78, !79, !80, !81, !85, !65, !115, !83, !84, !86, !63, !116, !117, !118, !82}
!131 = !{!132, !133, i64 0}
!132 = !{!"ifx$descr$1", !133, i64 0, !133, i64 8, !133, i64 16, !133, i64 24, !133, i64 32, !133, i64 40, !133, i64 48, !133, i64 56, !133, i64 64, !133, i64 72, !133, i64 80, !133, i64 88}
!133 = !{!"ifx$descr$field", !134, i64 0}
!134 = !{!"Fortran Dope Vector Symbol", !57, i64 0}
!135 = !{!104, !119}
!136 = !{!132, !133, i64 64}
!137 = !{!105, !120}
!138 = !{!132, !133, i64 56}
!139 = !{i64 1, i64 -9223372036854775808}
!140 = !{!106, !121}
!141 = !{!107, !122}
!142 = !{!68, !78, !67, !77}
!143 = !{!69, !70, !71, !75, !62, !100, !73, !74, !76, !60, !101, !102, !103, !72, !79, !80, !81, !85, !65, !115, !83, !84, !86, !63, !116, !117, !118, !82}
!144 = !{!101, !100, !116, !115}
!145 = !{!146, !146, i64 0}
!146 = !{!"ifx$unique_sym$3", !56, i64 0}
!147 = !{!70, !80, !69, !79}
!148 = !{!67, !68, !71, !75, !62, !100, !73, !74, !76, !60, !101, !102, !103, !72, !77, !78, !81, !85, !65, !115, !83, !84, !86, !63, !116, !117, !118, !82}
!149 = !{!150, !150, i64 0}
!150 = !{!"ifx$unique_sym$4", !56, i64 0}
!151 = !{!72, !82}
!152 = !{!97, !98, !67, !68, !69, !70, !99, !71, !75, !62, !100, !73, !74, !76, !60, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !77, !78, !79, !80, !114, !81, !85, !65, !115, !83, !84, !86, !63, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126}
!153 = !{!154, !154, i64 0}
!154 = !{!"ifx$unique_sym$6", !56, i64 0}
!155 = !{!73, !74, !75, !76, !83, !84, !85, !86}
!156 = !{!97, !98, !67, !68, !69, !70, !99, !71, !72, !104, !105, !106, !107, !101, !100, !60, !62, !108, !109, !110, !111, !112, !113, !77, !78, !79, !80, !114, !81, !82, !119, !120, !121, !122, !116, !115, !63, !65, !123, !124, !125, !126}
!157 = distinct !{!157, !91, !158}
!158 = !{!"llvm.loop.parallel_accesses", !88}
!159 = !{i32 0, i32 2147483647}
!160 = !{%"QNCA_a0$double*$rank2$" zeroinitializer, double 0.000000e+00}

