; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes="loop-vectorize" %s -vector-library=SVML -S | FileCheck %s

; This test only has SSE1 enabled. Make sure we don't try to vectorize the sin call.

target datalayout = "e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-f64:32:64-f80:32-n8:16:32-S128"
target triple = "i386-unknown-linux-gnu"

@llvm.compiler.used = appending global [6 x ptr] [ptr bitcast (<2 x double> (<2 x double>)* @__svml_sin2 to ptr), ptr bitcast (<4 x double> (<4 x double>)* @__svml_sin4
to ptr), ptr bitcast (<8 x double> (<8 x double>)* @__svml_sin8 to ptr), ptr bitcast (<16 x double> (<16 x double>)* @__svml_sin16 to ptr), ptr bitcast (<32 x double> (<32 x double>)* @__svml_sin32 to ptr), ptr bitcast (<64 x double> (<64 x double>)* @__svml_sin64 to ptr)], section "llvm.metadata"

; Function Attrs: nofree nounwind
define dso_local void @a(i32 %b, ptr nocapture %c) local_unnamed_addr #0 {
; CHECK-LABEL: @a(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP6:%.*]] = icmp sgt i32 [[B:%.*]], 0
; CHECK-NEXT:    br i1 [[CMP6]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_END:%.*]]
; CHECK:       for.body.preheader:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    [[D_07:%.*]] = phi i32 [ [[INC:%.*]], [[FOR_BODY]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK-NEXT:    [[CONV:%.*]] = sitofp i32 [[D_07]] to double
; CHECK-NEXT:    [[CALL:%.*]] = tail call double @sin(double [[CONV]]) #2
; CHECK-NEXT:    [[CONV1:%.*]] = fptrunc double [[CALL]] to float
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, ptr [[C:%.*]], i32 [[D_07]]
; CHECK-NEXT:    store float [[CONV1]], ptr [[ARRAYIDX]], align 4
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[D_07]], 1
; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp eq i32 [[INC]], [[B]]
; CHECK-NEXT:    br i1 [[EXITCOND]], label [[FOR_END_LOOPEXIT:%.*]], label [[FOR_BODY]]
; CHECK:       for.end.loopexit:
; CHECK-NEXT:    br label [[FOR_END]]
; CHECK:       for.end:
; CHECK-NEXT:    ret void
;
entry:
  %cmp6 = icmp sgt i32 %b, 0
  br i1 %cmp6, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %d.07 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  %conv = sitofp i32 %d.07 to double
  %call = tail call double @sin(double %conv) #2
  %conv1 = fptrunc double %call to float
  %arrayidx = getelementptr inbounds float, ptr %c, i32 %d.07
  store float %conv1, ptr %arrayidx, align 4
  %inc = add nuw nsw i32 %d.07, 1
  %exitcond = icmp eq i32 %inc, %b
  br i1 %exitcond, label %for.end.loopexit, label %for.body

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local double @sin(double) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local <2 x double> @__svml_sin2(<2 x double>) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local <4 x double> @__svml_sin4(<4 x double>) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local <8 x double> @__svml_sin8(<8 x double>) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local <16 x double> @__svml_sin16(<16 x double>) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local <32 x double> @__svml_sin32(<32 x double>) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local <64 x double> @__svml_sin64(<64 x double>) local_unnamed_addr #1

attributes #0 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="pentium3" "target-features"="+cx8,+fxsr,+mmx,+sse,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="pentium3" "target-features"="+cx8,+fxsr,+mmx,+sse,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "vector-function-abi-variant"="_ZGV_LLVM_N2v_sin(__svml_sin2),_ZGV_LLVM_N4v_sin(__svml_sin4),_ZGV_LLVM_N8v_sin(__svml_sin8),_ZGV_LLVM_N16v_sin(__svml_sin16),_ZGV_LLVM_N32v_sin(__svml_sin32),_ZGV_LLVM_N64v_sin(__svml_sin64)" }
