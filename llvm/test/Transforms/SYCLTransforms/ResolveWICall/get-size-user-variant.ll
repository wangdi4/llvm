; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes='sycl-kernel-add-implicit-args,sycl-kernel-resolve-wi-call' -S %s | FileCheck %s
; RUN: opt -passes='sycl-kernel-add-implicit-args,debugify,sycl-kernel-resolve-wi-call,check-debugify' -S %s -disable-output 2>&1 | FileCheck %s -check-prefix=DEBUGIFY

define void @gsize() !sg_construction_mode !1 {
; CHECK-LABEL: @gsize(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr { i64, [3 x i64], [3 x i64], [2 x [3 x i64]], [3 x i64], ptr, ptr, [3 x i64], [2 x [3 x i64]], [3 x i64] }, ptr [[PWORKDIM:%.*]], i32 0, i32 2, i32 0
; CHECK-NEXT:    [[GLOBALSIZE_0:%.*]] = load i64, ptr [[TMP0]], align 1
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr { i64, [3 x i64], [3 x i64], [2 x [3 x i64]], [3 x i64], ptr, ptr, [3 x i64], [2 x [3 x i64]], [3 x i64] }, ptr [[PWORKDIM]], i32 0, i32 2, i32 1
; CHECK-NEXT:    [[GLOBALSIZE_1:%.*]] = load i64, ptr [[TMP1]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr { i64, [3 x i64], [3 x i64], [2 x [3 x i64]], [3 x i64], ptr, ptr, [3 x i64], [2 x [3 x i64]], [3 x i64] }, ptr [[PWORKDIM]], i32 0, i32 2, i32 2
; CHECK-NEXT:    [[GLOBALSIZE_2:%.*]] = load i64, ptr [[TMP2]], align 1
; CHECK-NEXT:    ret void
;
entry:
  %gid0 = call i64 @user._Z15get_global_sizej(i32 0)
  %gid1 = call i64 @user._Z15get_global_sizej(i32 1)
  %gid2 = call i64 @user._Z15get_global_sizej(i32 2)
  ret void
}

define void @lsize() !sg_construction_mode !1 {
; CHECK-LABEL: @lsize(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr { i64, [3 x i64], [3 x i64], [2 x [3 x i64]], [3 x i64], ptr, ptr, [3 x i64], [2 x [3 x i64]], [3 x i64] }, ptr [[PWORKDIM:%.*]], i32 0, i32 4, i32 0
; CHECK-NEXT:    [[NUMGROUPS_0:%.*]] = load i64, ptr [[TMP0]], align 1
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i64, ptr [[PWGID:%.*]], i32 0
; CHECK-NEXT:    [[GROUPID_0:%.*]] = load i64, ptr [[TMP1]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = add nsw i64 [[GROUPID_0]], 1
; CHECK-NEXT:    [[TMP3:%.*]] = icmp eq i64 [[NUMGROUPS_0]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = zext i1 [[TMP3]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr { i64, [3 x i64], [3 x i64], [2 x [3 x i64]], [3 x i64], ptr, ptr, [3 x i64], [2 x [3 x i64]], [3 x i64] }, ptr [[PWORKDIM]], i32 0, i32 3, i32 [[TMP4]], i32 0
; CHECK-NEXT:    [[LOCALSIZE_0:%.*]] = load i64, ptr [[TMP5]], align 1
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr { i64, [3 x i64], [3 x i64], [2 x [3 x i64]], [3 x i64], ptr, ptr, [3 x i64], [2 x [3 x i64]], [3 x i64] }, ptr [[PWORKDIM]], i32 0, i32 4, i32 1
; CHECK-NEXT:    [[NUMGROUPS_1:%.*]] = load i64, ptr [[TMP6]], align 1
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i64, ptr [[PWGID]], i32 1
; CHECK-NEXT:    [[GROUPID_1:%.*]] = load i64, ptr [[TMP7]], align 1
; CHECK-NEXT:    [[TMP8:%.*]] = add nsw i64 [[GROUPID_1]], 1
; CHECK-NEXT:    [[TMP9:%.*]] = icmp eq i64 [[NUMGROUPS_1]], [[TMP8]]
; CHECK-NEXT:    [[TMP10:%.*]] = zext i1 [[TMP9]] to i32
; CHECK-NEXT:    [[TMP11:%.*]] = getelementptr { i64, [3 x i64], [3 x i64], [2 x [3 x i64]], [3 x i64], ptr, ptr, [3 x i64], [2 x [3 x i64]], [3 x i64] }, ptr [[PWORKDIM]], i32 0, i32 3, i32 [[TMP10]], i32 1
; CHECK-NEXT:    [[LOCALSIZE_1:%.*]] = load i64, ptr [[TMP11]], align 1
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr { i64, [3 x i64], [3 x i64], [2 x [3 x i64]], [3 x i64], ptr, ptr, [3 x i64], [2 x [3 x i64]], [3 x i64] }, ptr [[PWORKDIM]], i32 0, i32 4, i32 2
; CHECK-NEXT:    [[NUMGROUPS_2:%.*]] = load i64, ptr [[TMP12]], align 1
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i64, ptr [[PWGID]], i32 2
; CHECK-NEXT:    [[GROUPID_2:%.*]] = load i64, ptr [[TMP13]], align 1
; CHECK-NEXT:    [[TMP14:%.*]] = add nsw i64 [[GROUPID_2]], 1
; CHECK-NEXT:    [[TMP15:%.*]] = icmp eq i64 [[NUMGROUPS_2]], [[TMP14]]
; CHECK-NEXT:    [[TMP16:%.*]] = zext i1 [[TMP15]] to i32
; CHECK-NEXT:    [[TMP17:%.*]] = getelementptr { i64, [3 x i64], [3 x i64], [2 x [3 x i64]], [3 x i64], ptr, ptr, [3 x i64], [2 x [3 x i64]], [3 x i64] }, ptr [[PWORKDIM]], i32 0, i32 3, i32 [[TMP16]], i32 2
; CHECK-NEXT:    [[LOCALSIZE_2:%.*]] = load i64, ptr [[TMP17]], align 1
; CHECK-NEXT:    ret void
;
entry:
  %lid0 = call i64 @user._Z14get_local_sizej(i32 0)
  %lid1 = call i64 @user._Z14get_local_sizej(i32 1)
  %lid2 = call i64 @user._Z14get_local_sizej(i32 2)
  ret void
}

define void @enq_lsize() !sg_construction_mode !1 {
; CHECK-LABEL: @enq_lsize(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr { i64, [3 x i64], [3 x i64], [2 x [3 x i64]], [3 x i64], ptr, ptr, [3 x i64], [2 x [3 x i64]], [3 x i64] }, ptr [[PWORKDIM:%.*]], i32 0, i32 3, i32 0, i32 0
; CHECK-NEXT:    [[LOCALSIZE_0:%.*]] = load i64, ptr [[TMP0]], align 1
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr { i64, [3 x i64], [3 x i64], [2 x [3 x i64]], [3 x i64], ptr, ptr, [3 x i64], [2 x [3 x i64]], [3 x i64] }, ptr [[PWORKDIM]], i32 0, i32 3, i32 0, i32 1
; CHECK-NEXT:    [[LOCALSIZE_1:%.*]] = load i64, ptr [[TMP1]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr { i64, [3 x i64], [3 x i64], [2 x [3 x i64]], [3 x i64], ptr, ptr, [3 x i64], [2 x [3 x i64]], [3 x i64] }, ptr [[PWORKDIM]], i32 0, i32 3, i32 0, i32 2
; CHECK-NEXT:    [[LOCALSIZE_2:%.*]] = load i64, ptr [[TMP2]], align 1
; CHECK-NEXT:    ret void
;
entry:
  %lid0 = call i64 @user._Z23get_enqueued_local_sizej(i32 0)
  %lid1 = call i64 @user._Z23get_enqueued_local_sizej(i32 1)
  %lid2 = call i64 @user._Z23get_enqueued_local_sizej(i32 2)
  ret void
}

define void @groupsize() !sg_construction_mode !1 {
; CHECK-LABEL: @groupsize(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr { i64, [3 x i64], [3 x i64], [2 x [3 x i64]], [3 x i64], ptr, ptr, [3 x i64], [2 x [3 x i64]], [3 x i64] }, ptr [[PWORKDIM:%.*]], i32 0, i32 4, i32 0
; CHECK-NEXT:    [[NUMGROUPS_0:%.*]] = load i64, ptr [[TMP0]], align 1
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr { i64, [3 x i64], [3 x i64], [2 x [3 x i64]], [3 x i64], ptr, ptr, [3 x i64], [2 x [3 x i64]], [3 x i64] }, ptr [[PWORKDIM]], i32 0, i32 4, i32 1
; CHECK-NEXT:    [[NUMGROUPS_1:%.*]] = load i64, ptr [[TMP1]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr { i64, [3 x i64], [3 x i64], [2 x [3 x i64]], [3 x i64], ptr, ptr, [3 x i64], [2 x [3 x i64]], [3 x i64] }, ptr [[PWORKDIM]], i32 0, i32 4, i32 2
; CHECK-NEXT:    [[NUMGROUPS_2:%.*]] = load i64, ptr [[TMP2]], align 1
; CHECK-NEXT:    ret void
;
entry:
  %groupid0 = call i64 @user._Z14get_num_groupsj(i32 0)
  %groupid1 = call i64 @user._Z14get_num_groupsj(i32 1)
  %groupid2 = call i64 @user._Z14get_num_groupsj(i32 2)
  ret void
}

declare i64 @user._Z15get_global_sizej(i32)

declare i64 @user._Z14get_local_sizej(i32)

declare i64 @user._Z23get_enqueued_local_sizej(i32)

declare i64 @user._Z14get_num_groupsj(i32)

!sycl.kernels = !{!0}
!opencl.ocl.version = !{!2}

!0 = !{ptr @gsize, ptr @lsize, ptr @enq_lsize, ptr @groupsize}
!1 = !{i32 -1}
!2 = !{i32 3, i32 0}

; DEBUGIFY-NOT: WARNING
