; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; RUN: opt -passes=sycl-kernel-resolve-matrix-wi-slice -S %s | FileCheck %s
; RUN: opt -passes='debugify,sycl-kernel-resolve-matrix-wi-slice,check-debugify' -disable-output -S %s 2>&1 | FileCheck %s -check-prefix=DEBUGIFY

define void @test(<256 x i8> %mat, i64 %element.index) {
; CHECK-LABEL: define void @test
; CHECK-SAME: (<256 x i8> [[MAT:%.*]], i64 [[ELEMENT_INDEX:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[SG_SIZE:%.*]] = call i32 @_Z22get_max_sub_group_sizev()
; CHECK-NEXT:    [[SG_LID:%.*]] = call i32 @_Z22get_sub_group_local_idv()
; CHECK-NEXT:    [[TMP0:%.*]] = trunc i64 [[ELEMENT_INDEX]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = mul nuw i32 [[SG_SIZE]], [[TMP0]]
; CHECK-NEXT:    [[LINEAR_MAT_COORD:%.*]] = add nuw i32 [[SG_LID]], [[TMP1]]
; CHECK-NEXT:    [[TMP2:%.*]] = udiv i32 [[LINEAR_MAT_COORD]], 32
; CHECK-NEXT:    [[TMP3:%.*]] = urem i32 [[LINEAR_MAT_COORD]], 32
; CHECK-NEXT:    [[TMP4:%.*]] = insertelement <2 x i32> poison, i32 [[TMP2]], i32 0
; CHECK-NEXT:    [[TMP5:%.*]] = insertelement <2 x i32> [[TMP4]], i32 [[TMP3]], i32 1
; CHECK-NEXT:    ret void
;
entry:
  %call.i.i = tail call <2 x i32> @llvm.experimental.matrix.wi.element.coordinate.v2i32.v256i8(<256 x i8> %mat, i32 8, i32 32, i64 %element.index, metadata !"scope.subgroup")
  ret void
}

declare <2 x i32> @llvm.experimental.matrix.wi.element.coordinate.v2i32.v256i8(<256 x i8>, i32, i32, i64, metadata)

; DEBUGIFY-NOT: WARNING
; DEBUGIFY: PASS
