; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function @_ZGVeN16u__ZTSZZ17matrix_verify_addIN4sycl3_V16detail9half_impl4halfELm16ELm32EEvNS1_5queueER10big_matrixIT_XT0_EXT1_EERNS1_8nd_rangeILi2EEEfENKUlRNS1_7handlerEE_clESE_E10add_matrix --scrub-attributes --include-generated-funcs --version 2

; RUN: opt -opaque-pointers=0 -passes=sycl-kernel-resolve-matrix-fill,sycl-kernel-resolve-matrix-wi-slice,sycl-kernel-set-vf,sycl-kernel-vec-clone,lcssa,vplan-vec -sycl-vector-variant-isa-encoding-override=AVX512Core -S %s | FileCheck %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux"

%"class.sycl::_V1::detail::half_impl::half" = type { half }

; Function Attrs: nofree nosync nounwind
define void @_ZTSZZ17matrix_verify_addIN4sycl3_V16detail9half_impl4halfELm16ELm32EEvNS1_5queueER10big_matrixIT_XT0_EXT1_EERNS1_8nd_rangeILi2EEEfENKUlRNS1_7handlerEE_clESE_E10add_matrix(%"class.sycl::_V1::detail::half_impl::half" addrspace(1)* align 2 %_arg_accA) local_unnamed_addr #0 !kernel_arg_addr_space !7 !kernel_arg_access_qual !8 !kernel_arg_type !9 !kernel_arg_base_type !9 !kernel_arg_type_qual !10 !arg_type_null_val !11 !intel_reqd_sub_group_size !12 !spirv.ParameterDecorations !13 {
entry:
  %0 = tail call i64 @_Z13get_global_idj(i32 1) #7
  %1 = tail call i64 @_Z13get_global_idj(i32 0) #7
  %2 = tail call i64 @_Z12get_local_idj(i32 1) #7
  %3 = tail call i64 @_Z12get_local_idj(i32 0) #7
  %cmp.i.i = icmp ult i64 %0, 2147483648
  tail call void @llvm.assume(i1 %cmp.i.i)
  %cmp.i34.i = icmp ult i64 %1, 2147483648
  tail call void @llvm.assume(i1 %cmp.i34.i)
  %cmp.i36.i = icmp ult i64 %2, 2147483648
  tail call void @llvm.assume(i1 %cmp.i36.i)
  %cmp.i38.i = icmp ult i64 %3, 2147483648
  tail call void @llvm.assume(i1 %cmp.i38.i)
  %call.i.i = tail call <128 x half> @llvm.experimental.matrix.fill.v128f16.f16(half 0xH4500, i32 8, i32 16, metadata !"matrix.rowmajor", metadata !"scope.subgroup", metadata !"matrix.use.a")
  br label %for.cond.i

for.cond.i:                                       ; preds = %for.body.i, %entry
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body.i ], [ 0, %entry ]
  %sub_a.sroa.0.0.i = phi <128 x half> [ %call.i63.i, %for.body.i ], [ %call.i.i, %entry ]
  %call.i45.i = tail call i64 @llvm.experimental.matrix.wi.slice.length.v128f16(<128 x half> %sub_a.sroa.0.0.i, i32 8, i32 16, metadata !"matrix.rowmajor", metadata !"scope.subgroup", metadata !"matrix.use.a")
  %cmp.i = icmp ugt i64 %call.i45.i, %indvars.iv
  br i1 %cmp.i, label %for.body.i, label %_ZZZ17matrix_verify_addIN4sycl3_V16detail9half_impl4halfELm16ELm32EEvNS1_5queueER10big_matrixIT_XT0_EXT1_EERNS1_8nd_rangeILi2EEEfENKUlRNS1_7handlerEE_clESE_ENKUlNS1_7nd_itemILi2EEEE_clESH_.exit

for.body.i:                                       ; preds = %for.cond.i
  %4 = tail call half @llvm.experimental.matrix.wi.slice.extractelement.v128f16.i64(<128 x half> %sub_a.sroa.0.0.i, i32 8, i32 16, i64 %indvars.iv, metadata !"matrix.rowmajor", metadata !"scope.subgroup", metadata !"matrix.use.a")
  %add.i.i.i = fadd fast half %4, 0xH4000
  %call.i63.i = tail call <128 x half> @llvm.experimental.matrix.wi.slice.insertelement.v128f16.i64(<128 x half> %sub_a.sroa.0.0.i, i32 8, i32 16, half %add.i.i.i, i64 %indvars.iv, metadata !"matrix.rowmajor", metadata !"scope.subgroup", metadata !"matrix.use.a")
  %indvars.iv.next = add nuw i64 %indvars.iv, 1
  br label %for.cond.i

_ZZZ17matrix_verify_addIN4sycl3_V16detail9half_impl4halfELm16ELm32EEvNS1_5queueER10big_matrixIT_XT0_EXT1_EERNS1_8nd_rangeILi2EEEfENKUlRNS1_7handlerEE_clESE_ENKUlNS1_7nd_itemILi2EEEE_clESH_.exit: ; preds = %for.cond.i
  %sub5.i = sub nsw i64 %1, %3
  %sub.i = sub nsw i64 %0, %2
  %mul21.i = shl nsw i64 %sub.i, 8
  %add.ptr.i.i = getelementptr inbounds %"class.sycl::_V1::detail::half_impl::half", %"class.sycl::_V1::detail::half_impl::half" addrspace(1)* %_arg_accA, i64 %mul21.i
  %div32.i = and i64 %sub5.i, -16
  %add.ptr.i48.i = getelementptr inbounds %"class.sycl::_V1::detail::half_impl::half", %"class.sycl::_V1::detail::half_impl::half" addrspace(1)* %add.ptr.i.i, i64 %div32.i
  tail call void @"llvm.experimental.matrix.store.v128f16.p1s_class.sycl::_V1::detail::half_impl::halfs"(<128 x half> %sub_a.sroa.0.0.i, %"class.sycl::_V1::detail::half_impl::half" addrspace(1)* %add.ptr.i48.i, i64 32, i1 false, i32 8, i32 16, metadata !"matrix.rowmajor", metadata !"matrix.rowmajor", metadata !"scope.subgroup", metadata !"matrix.use.a") #8
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite)
declare void @llvm.assume(i1 noundef) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare <128 x half> @llvm.experimental.matrix.fill.v128f16.f16(half, i32, i32, metadata, metadata, metadata) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn
declare i64 @llvm.experimental.matrix.wi.slice.length.v128f16(<128 x half>, i32, i32, metadata, metadata, metadata) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn
declare half @llvm.experimental.matrix.wi.slice.extractelement.v128f16.i64(<128 x half>, i32, i32, i64, metadata, metadata, metadata) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn
declare <128 x half> @llvm.experimental.matrix.wi.slice.insertelement.v128f16.i64(<128 x half>, i32, i32, half, i64, metadata, metadata, metadata) #4

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(write)
declare void @"llvm.experimental.matrix.store.v128f16.p1s_class.sycl::_V1::detail::half_impl::halfs"(<128 x half>, %"class.sycl::_V1::detail::half_impl::half" addrspace(1)*, i64, i1, i32, i32, metadata, metadata, metadata, metadata) #5

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare i64 @_Z13get_global_idj(i32) local_unnamed_addr #6

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare i64 @_Z12get_local_idj(i32) local_unnamed_addr #6

attributes #0 = { nofree nosync nounwind "prefer-vector-width"="512" }
attributes #1 = { noinline nounwind optnone "prefer-vector-width"="512" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn }
attributes #5 = { mustprogress nocallback nofree nosync nounwind willreturn memory(write) }
attributes #6 = { mustprogress nofree nosync nounwind willreturn memory(none) "prefer-vector-width"="512" }
attributes #7 = { nounwind willreturn memory(none) }
attributes #8 = { convergent "kernel-call-once" "kernel-uniform-call" "opencl-vec-uniform-return" }

!spirv.MemoryModel = !{!0}
!opencl.enable.FP_CONTRACT = !{}
!spirv.Source = !{!1}
!opencl.spir.version = !{!2}
!opencl.ocl.version = !{!3}
!opencl.used.extensions = !{!4}
!opencl.used.optional.core.features = !{!4}
!spirv.Generator = !{!5}
!sycl.kernels = !{!6}

!0 = !{i32 2, i32 2}
!1 = !{i32 4, i32 100000}
!2 = !{i32 1, i32 2}
!3 = !{i32 1, i32 0}
!4 = !{}
!5 = !{i16 6, i16 14}
!6 = !{void (%"class.sycl::_V1::detail::half_impl::half" addrspace(1)*)* @_ZTSZZ17matrix_verify_addIN4sycl3_V16detail9half_impl4halfELm16ELm32EEvNS1_5queueER10big_matrixIT_XT0_EXT1_EERNS1_8nd_rangeILi2EEEfENKUlRNS1_7handlerEE_clESE_E10add_matrix}
!7 = !{i32 1}
!8 = !{!"none"}
!9 = !{!"class.sycl::_V1::detail::half_impl::half*"}
!10 = !{!""}
!11 = !{%"class.sycl::_V1::detail::half_impl::half" addrspace(1)* null}
!12 = !{i32 16}
!13 = !{!14}
!14 = !{!15}
!15 = !{i32 44, i32 2}
; CHECK-LABEL: define void @_ZTSZZ17matrix_verify_addIN4sycl3_V16detail9half_impl4halfELm16ELm32EEvNS1_5queueER10big_matrixIT_XT0_EXT1_EERNS1_8nd_rangeILi2EEEfENKUlRNS1_7handlerEE_clESE_E10add_matrix
; CHECK-SAME: (%"class.sycl::_V1::detail::half_impl::half" addrspace(1)* align 2 [[_ARG_ACCA:%.*]]) local_unnamed_addr #[[ATTR0:[0-9]+]] !kernel_arg_addr_space !7 !kernel_arg_access_qual !8 !kernel_arg_type !9 !kernel_arg_base_type !9 !kernel_arg_type_qual !10 !arg_type_null_val !11 !intel_reqd_sub_group_size !12 !spirv.ParameterDecorations !13 !recommended_vector_length !12 !vectorized_width !7 !vectorized_kernel !16 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = tail call i64 @_Z13get_global_idj(i32 1)
; CHECK-NEXT:    [[TMP1:%.*]] = tail call i64 @_Z13get_global_idj(i32 0)
; CHECK-NEXT:    [[TMP2:%.*]] = tail call i64 @_Z12get_local_idj(i32 1)
; CHECK-NEXT:    [[TMP3:%.*]] = tail call i64 @_Z12get_local_idj(i32 0)
; CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp ult i64 [[TMP0]], 2147483648
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[CMP_I_I]])
; CHECK-NEXT:    [[CMP_I34_I:%.*]] = icmp ult i64 [[TMP1]], 2147483648
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[CMP_I34_I]])
; CHECK-NEXT:    [[CMP_I36_I:%.*]] = icmp ult i64 [[TMP2]], 2147483648
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[CMP_I36_I]])
; CHECK-NEXT:    [[CMP_I38_I:%.*]] = icmp ult i64 [[TMP3]], 2147483648
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[CMP_I38_I]])
; CHECK-NEXT:    [[MAT_INIT:%.*]] = call <128 x half> @llvm.experimental.matrix.fill.v128f16.f16(half 0xH0000, i32 8, i32 16, metadata !"matrix.rowmajor", metadata !"scope.subgroup", metadata !"matrix.use.a")
; CHECK-NEXT:    [[SG_SLICE_LENGTH:%.*]] = call i64 @get_sub_group_slice_length.(i32 128)
; CHECK-NEXT:    br label [[MATRIX_FILL_SLICE_LOOP_HEADER:%.*]]
; CHECK:       matrix.fill.slice.loop.header:
; CHECK-NEXT:    [[ELEMENT_INDEX:%.*]] = phi i64 [ 0, [[ENTRY:%.*]] ], [ [[ELEMENT_INDEX_INC:%.*]], [[MATRIX_FILL_SLICE_LOOP:%.*]] ]
; CHECK-NEXT:    [[MAT:%.*]] = phi <128 x half> [ [[MAT_INIT]], [[ENTRY]] ], [ [[MAT_UPDATE3:%.*]], [[MATRIX_FILL_SLICE_LOOP]] ]
; CHECK-NEXT:    [[TMP4:%.*]] = icmp slt i64 [[ELEMENT_INDEX]], [[SG_SLICE_LENGTH]]
; CHECK-NEXT:    br i1 [[TMP4]], label [[MATRIX_FILL_SLICE_LOOP]], label [[MATRIX_FILL_SLICE_LOOP_END:%.*]]
; CHECK:       matrix.fill.slice.loop:
; CHECK-NEXT:    [[ROWSLICE_ID2:%.*]] = call i64 @get_sub_group_rowslice_id.v128f16.i64(<128 x half> [[MAT]], i32 8, i32 16, i64 [[ELEMENT_INDEX]])
; CHECK-NEXT:    call void @sub_group_rowslice_insertelement.f16(i64 [[ROWSLICE_ID2]], half 0xH4500)
; CHECK-NEXT:    [[MAT_UPDATE3]] = call <128 x half> @sub_group_insert_rowslice_to_matrix.v128f16(i64 [[ROWSLICE_ID2]])
; CHECK-NEXT:    [[ELEMENT_INDEX_INC]] = add nuw i64 [[ELEMENT_INDEX]], 1
; CHECK-NEXT:    br label [[MATRIX_FILL_SLICE_LOOP_HEADER]]
; CHECK:       matrix.fill.slice.loop.end:
; CHECK-NEXT:    [[MAT_LCSSA:%.*]] = phi <128 x half> [ [[MAT]], [[MATRIX_FILL_SLICE_LOOP_HEADER]] ]
; CHECK-NEXT:    br label [[FOR_COND_I:%.*]]
; CHECK:       for.cond.i:
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY_I:%.*]] ], [ 0, [[MATRIX_FILL_SLICE_LOOP_END]] ]
; CHECK-NEXT:    [[SUB_A_SROA_0_0_I:%.*]] = phi <128 x half> [ [[MAT_UPDATE:%.*]], [[FOR_BODY_I]] ], [ [[MAT_LCSSA]], [[MATRIX_FILL_SLICE_LOOP_END]] ]
; CHECK-NEXT:    [[SG_SLICE_LENGTH1:%.*]] = call i64 @get_sub_group_slice_length.(i32 128)
; CHECK-NEXT:    [[CMP_I:%.*]] = icmp ugt i64 [[SG_SLICE_LENGTH1]], [[INDVARS_IV]]
; CHECK-NEXT:    br i1 [[CMP_I]], label [[FOR_BODY_I]], label [[_ZZZ17MATRIX_VERIFY_ADDIN4SYCL3_V16DETAIL9HALF_IMPL4HALFELM16ELM32EEVNS1_5QUEUEER10BIG_MATRIXIT_XT0_EXT1_EERNS1_8ND_RANGEILI2EEEFENKULRNS1_7HANDLEREE_CLESE_ENKULNS1_7ND_ITEMILI2EEEE_CLESH__EXIT:%.*]]
; CHECK:       for.body.i:
; CHECK-NEXT:    [[ROWSLICE_ID:%.*]] = call i64 @get_sub_group_rowslice_id.v128f16.i64(<128 x half> [[SUB_A_SROA_0_0_I]], i32 8, i32 16, i64 [[INDVARS_IV]])
; CHECK-NEXT:    [[EXTRACT_ELEM:%.*]] = call half @sub_group_rowslice_extractelement.f16(i64 [[ROWSLICE_ID]])
; CHECK-NEXT:    [[ADD_I_I_I:%.*]] = fadd fast half [[EXTRACT_ELEM]], 0xH4000
; CHECK-NEXT:    [[ROWSLICE_ID4:%.*]] = call i64 @get_sub_group_rowslice_id.v128f16.i64(<128 x half> [[SUB_A_SROA_0_0_I]], i32 8, i32 16, i64 [[INDVARS_IV]])
; CHECK-NEXT:    call void @sub_group_rowslice_insertelement.f16(i64 [[ROWSLICE_ID4]], half [[ADD_I_I_I]])
; CHECK-NEXT:    [[MAT_UPDATE]] = call <128 x half> @sub_group_insert_rowslice_to_matrix.v128f16(i64 [[ROWSLICE_ID4]])
; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw i64 [[INDVARS_IV]], 1
; CHECK-NEXT:    br label [[FOR_COND_I]]
; CHECK:       _ZZZ17matrix_verify_addIN4sycl3_V16detail9half_impl4halfELm16ELm32EEvNS1_5queueER10big_matrixIT_XT0_EXT1_EERNS1_8nd_rangeILi2EEEfENKUlRNS1_7handlerEE_clESE_ENKUlNS1_7nd_itemILi2EEEE_clESH_.exit:
; CHECK-NEXT:    [[SUB_A_SROA_0_0_I_LCSSA:%.*]] = phi <128 x half> [ [[SUB_A_SROA_0_0_I]], [[FOR_COND_I]] ]
; CHECK-NEXT:    [[SUB5_I:%.*]] = sub nsw i64 [[TMP1]], [[TMP3]]
; CHECK-NEXT:    [[SUB_I:%.*]] = sub nsw i64 [[TMP0]], [[TMP2]]
; CHECK-NEXT:    [[MUL21_I:%.*]] = shl nsw i64 [[SUB_I]], 8
; CHECK-NEXT:    [[ADD_PTR_I_I:%.*]] = getelementptr inbounds %"class.sycl::_V1::detail::half_impl::half", %"class.sycl::_V1::detail::half_impl::half" addrspace(1)* [[_ARG_ACCA]], i64 [[MUL21_I]]
; CHECK-NEXT:    [[DIV32_I:%.*]] = and i64 [[SUB5_I]], -16
; CHECK-NEXT:    [[ADD_PTR_I48_I:%.*]] = getelementptr inbounds %"class.sycl::_V1::detail::half_impl::half", %"class.sycl::_V1::detail::half_impl::half" addrspace(1)* [[ADD_PTR_I_I]], i64 [[DIV32_I]]
; CHECK-NEXT:    tail call void @"llvm.experimental.matrix.store.v128f16.p1s_class.sycl::_V1::detail::half_impl::halfs"(<128 x half> [[SUB_A_SROA_0_0_I_LCSSA]], %"class.sycl::_V1::detail::half_impl::half" addrspace(1)* [[ADD_PTR_I48_I]], i64 32, i1 false, i32 8, i32 16, metadata !"matrix.rowmajor", metadata !"matrix.rowmajor", metadata !"scope.subgroup", metadata !"matrix.use.a")
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define void @_ZGVeN16u__ZTSZZ17matrix_verify_addIN4sycl3_V16detail9half_impl4halfELm16ELm32EEvNS1_5queueER10big_matrixIT_XT0_EXT1_EERNS1_8nd_rangeILi2EEEfENKUlRNS1_7handlerEE_clESE_E10add_matrix
; CHECK-SAME: (%"class.sycl::_V1::detail::half_impl::half" addrspace(1)* align 2 [[_ARG_ACCA:%.*]]) local_unnamed_addr #[[ATTR9:[0-9]+]] !kernel_arg_addr_space !7 !kernel_arg_access_qual !8 !kernel_arg_type !9 !kernel_arg_base_type !9 !kernel_arg_type_qual !10 !arg_type_null_val !11 !intel_reqd_sub_group_size !12 !spirv.ParameterDecorations !13 !scalar_kernel !6 !recommended_vector_length !12 !vectorized_width !12 !vectorization_dimension !17 !can_unite_workgroups !18 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[ALLOCA__ARG_ACCA:%.*]] = alloca %"class.sycl::_V1::detail::half_impl::half" addrspace(1)*, align 8
; CHECK-NEXT:    store %"class.sycl::_V1::detail::half_impl::half" addrspace(1)* [[_ARG_ACCA]], %"class.sycl::_V1::detail::half_impl::half" addrspace(1)** [[ALLOCA__ARG_ACCA]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = tail call i64 @_Z13get_global_idj(i32 0)
; CHECK-NEXT:    [[TMP1:%.*]] = tail call i64 @_Z13get_global_idj(i32 1)
; CHECK-NEXT:    [[TMP2:%.*]] = tail call i64 @_Z12get_local_idj(i32 0)
; CHECK-NEXT:    [[TMP3:%.*]] = trunc i64 [[TMP2]] to i32
; CHECK-NEXT:    [[TMP4:%.*]] = tail call i64 @_Z12get_local_idj(i32 1)
; CHECK-NEXT:    br label [[SIMD_BEGIN_REGION:%.*]]
; CHECK:       simd.begin.region:
; CHECK-NEXT:    br label [[SIMD_LOOP_PREHEADER:%.*]]
; CHECK:       simd.loop.preheader:
; CHECK-NEXT:    [[LOAD__ARG_ACCA:%.*]] = load %"class.sycl::_V1::detail::half_impl::half" addrspace(1)*, %"class.sycl::_V1::detail::half_impl::half" addrspace(1)** [[ALLOCA__ARG_ACCA]], align 8
; CHECK-NEXT:    br label [[VPLANNEDBB:%.*]]
; CHECK:       VPlannedBB:
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <16 x i32> poison, i32 [[TMP3]], i64 0
; CHECK-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <16 x i32> [[BROADCAST_SPLATINSERT]], <16 x i32> poison, <16 x i32> zeroinitializer
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT4:%.*]] = insertelement <16 x i64> poison, i64 [[TMP0]], i64 0
; CHECK-NEXT:    [[BROADCAST_SPLAT5:%.*]] = shufflevector <16 x i64> [[BROADCAST_SPLATINSERT4]], <16 x i64> poison, <16 x i32> zeroinitializer
; CHECK-NEXT:    br label [[VPLANNEDBB2:%.*]]
; CHECK:       VPlannedBB2:
; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK:       vector.body:
; CHECK-NEXT:    [[UNI_PHI:%.*]] = phi i32 [ 0, [[VPLANNEDBB2]] ], [ [[TMP32:%.*]], [[VPLANNEDBB43:%.*]] ]
; CHECK-NEXT:    [[VEC_PHI:%.*]] = phi <16 x i32> [ <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, [[VPLANNEDBB2]] ], [ [[TMP31:%.*]], [[VPLANNEDBB43]] ]
; CHECK-NEXT:    [[TMP5:%.*]] = add nuw <16 x i32> [[BROADCAST_SPLAT]], [[VEC_PHI]]
; CHECK-NEXT:    [[TMP6:%.*]] = sext <16 x i32> [[TMP5]] to <16 x i64>
; CHECK-NEXT:    [[DOTEXTRACT_0_41:%.*]] = extractelement <16 x i64> [[TMP6]], i32 0
; CHECK-NEXT:    [[TMP7:%.*]] = sext <16 x i32> [[VEC_PHI]] to <16 x i64>
; CHECK-NEXT:    [[TMP8:%.*]] = add nuw <16 x i64> [[TMP7]], [[BROADCAST_SPLAT5]]
; CHECK-NEXT:    [[DOTEXTRACT_0_40:%.*]] = extractelement <16 x i64> [[TMP8]], i32 0
; CHECK-NEXT:    [[TMP9:%.*]] = icmp ult i64 [[TMP1]], 2147483648
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[TMP9]])
; CHECK-NEXT:    [[TMP10:%.*]] = icmp ult <16 x i64> [[TMP8]], <i64 2147483648, i64 2147483648, i64 2147483648, i64 2147483648, i64 2147483648, i64 2147483648, i64 2147483648, i64 2147483648, i64 2147483648, i64 2147483648, i64 2147483648, i64 2147483648, i64 2147483648, i64 2147483648, i64 2147483648, i64 2147483648>
; CHECK-NEXT:    [[DOTEXTRACT_15_:%.*]] = extractelement <16 x i1> [[TMP10]], i32 15
; CHECK-NEXT:    [[DOTEXTRACT_14_:%.*]] = extractelement <16 x i1> [[TMP10]], i32 14
; CHECK-NEXT:    [[DOTEXTRACT_13_:%.*]] = extractelement <16 x i1> [[TMP10]], i32 13
; CHECK-NEXT:    [[DOTEXTRACT_12_:%.*]] = extractelement <16 x i1> [[TMP10]], i32 12
; CHECK-NEXT:    [[DOTEXTRACT_11_:%.*]] = extractelement <16 x i1> [[TMP10]], i32 11
; CHECK-NEXT:    [[DOTEXTRACT_10_:%.*]] = extractelement <16 x i1> [[TMP10]], i32 10
; CHECK-NEXT:    [[DOTEXTRACT_9_:%.*]] = extractelement <16 x i1> [[TMP10]], i32 9
; CHECK-NEXT:    [[DOTEXTRACT_8_:%.*]] = extractelement <16 x i1> [[TMP10]], i32 8
; CHECK-NEXT:    [[DOTEXTRACT_7_:%.*]] = extractelement <16 x i1> [[TMP10]], i32 7
; CHECK-NEXT:    [[DOTEXTRACT_6_:%.*]] = extractelement <16 x i1> [[TMP10]], i32 6
; CHECK-NEXT:    [[DOTEXTRACT_5_:%.*]] = extractelement <16 x i1> [[TMP10]], i32 5
; CHECK-NEXT:    [[DOTEXTRACT_4_:%.*]] = extractelement <16 x i1> [[TMP10]], i32 4
; CHECK-NEXT:    [[DOTEXTRACT_3_:%.*]] = extractelement <16 x i1> [[TMP10]], i32 3
; CHECK-NEXT:    [[DOTEXTRACT_2_:%.*]] = extractelement <16 x i1> [[TMP10]], i32 2
; CHECK-NEXT:    [[DOTEXTRACT_1_:%.*]] = extractelement <16 x i1> [[TMP10]], i32 1
; CHECK-NEXT:    [[DOTEXTRACT_0_:%.*]] = extractelement <16 x i1> [[TMP10]], i32 0
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[DOTEXTRACT_0_]])
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[DOTEXTRACT_1_]])
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[DOTEXTRACT_2_]])
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[DOTEXTRACT_3_]])
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[DOTEXTRACT_4_]])
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[DOTEXTRACT_5_]])
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[DOTEXTRACT_6_]])
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[DOTEXTRACT_7_]])
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[DOTEXTRACT_8_]])
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[DOTEXTRACT_9_]])
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[DOTEXTRACT_10_]])
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[DOTEXTRACT_11_]])
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[DOTEXTRACT_12_]])
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[DOTEXTRACT_13_]])
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[DOTEXTRACT_14_]])
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[DOTEXTRACT_15_]])
; CHECK-NEXT:    [[TMP11:%.*]] = icmp ult i64 [[TMP4]], 2147483648
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[TMP11]])
; CHECK-NEXT:    [[TMP12:%.*]] = icmp ult <16 x i64> [[TMP6]], <i64 2147483648, i64 2147483648, i64 2147483648, i64 2147483648, i64 2147483648, i64 2147483648, i64 2147483648, i64 2147483648, i64 2147483648, i64 2147483648, i64 2147483648, i64 2147483648, i64 2147483648, i64 2147483648, i64 2147483648, i64 2147483648>
; CHECK-NEXT:    [[DOTEXTRACT_15_21:%.*]] = extractelement <16 x i1> [[TMP12]], i32 15
; CHECK-NEXT:    [[DOTEXTRACT_14_20:%.*]] = extractelement <16 x i1> [[TMP12]], i32 14
; CHECK-NEXT:    [[DOTEXTRACT_13_19:%.*]] = extractelement <16 x i1> [[TMP12]], i32 13
; CHECK-NEXT:    [[DOTEXTRACT_12_18:%.*]] = extractelement <16 x i1> [[TMP12]], i32 12
; CHECK-NEXT:    [[DOTEXTRACT_11_17:%.*]] = extractelement <16 x i1> [[TMP12]], i32 11
; CHECK-NEXT:    [[DOTEXTRACT_10_16:%.*]] = extractelement <16 x i1> [[TMP12]], i32 10
; CHECK-NEXT:    [[DOTEXTRACT_9_15:%.*]] = extractelement <16 x i1> [[TMP12]], i32 9
; CHECK-NEXT:    [[DOTEXTRACT_8_14:%.*]] = extractelement <16 x i1> [[TMP12]], i32 8
; CHECK-NEXT:    [[DOTEXTRACT_7_13:%.*]] = extractelement <16 x i1> [[TMP12]], i32 7
; CHECK-NEXT:    [[DOTEXTRACT_6_12:%.*]] = extractelement <16 x i1> [[TMP12]], i32 6
; CHECK-NEXT:    [[DOTEXTRACT_5_11:%.*]] = extractelement <16 x i1> [[TMP12]], i32 5
; CHECK-NEXT:    [[DOTEXTRACT_4_10:%.*]] = extractelement <16 x i1> [[TMP12]], i32 4
; CHECK-NEXT:    [[DOTEXTRACT_3_9:%.*]] = extractelement <16 x i1> [[TMP12]], i32 3
; CHECK-NEXT:    [[DOTEXTRACT_2_8:%.*]] = extractelement <16 x i1> [[TMP12]], i32 2
; CHECK-NEXT:    [[DOTEXTRACT_1_7:%.*]] = extractelement <16 x i1> [[TMP12]], i32 1
; CHECK-NEXT:    [[DOTEXTRACT_0_6:%.*]] = extractelement <16 x i1> [[TMP12]], i32 0
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[DOTEXTRACT_0_6]])
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[DOTEXTRACT_1_7]])
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[DOTEXTRACT_2_8]])
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[DOTEXTRACT_3_9]])
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[DOTEXTRACT_4_10]])
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[DOTEXTRACT_5_11]])
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[DOTEXTRACT_6_12]])
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[DOTEXTRACT_7_13]])
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[DOTEXTRACT_8_14]])
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[DOTEXTRACT_9_15]])
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[DOTEXTRACT_10_16]])
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[DOTEXTRACT_11_17]])
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[DOTEXTRACT_12_18]])
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[DOTEXTRACT_13_19]])
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[DOTEXTRACT_14_20]])
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[DOTEXTRACT_15_21]])
; CHECK-NEXT:    [[TMP13:%.*]] = call <128 x half> @llvm.experimental.matrix.fill.v128f16.f16(half 0xH0000, i32 8, i32 16, metadata !"matrix.rowmajor", metadata !"scope.subgroup", metadata !"matrix.use.a")
; CHECK-NEXT:    [[TMP14:%.*]] = call i64 @get_sub_group_slice_length.(i32 128)
; CHECK-NEXT:    br label [[VPLANNEDBB22:%.*]]
; CHECK:       VPlannedBB22:
; CHECK-NEXT:    [[UNI_PHI23:%.*]] = phi i64 [ 0, [[VECTOR_BODY]] ], [ [[UNI_PHI26:%.*]], [[NEW_LOOP_LATCH14:%.*]] ]
; CHECK-NEXT:    [[UNI_PHI24:%.*]] = phi <128 x half> [ [[TMP13]], [[VECTOR_BODY]] ], [ [[UNI_PHI27:%.*]], [[NEW_LOOP_LATCH14]] ]
; CHECK-NEXT:    [[TMP15:%.*]] = icmp slt i64 [[UNI_PHI23]], [[TMP14]]
; CHECK-NEXT:    br i1 [[TMP15]], label [[VPLANNEDBB25:%.*]], label [[NEW_LOOP_LATCH14]]
; CHECK:       VPlannedBB25:
; CHECK-NEXT:    [[TMP16:%.*]] = call i64 @get_sub_group_rowslice_id.v128f16.i64(<128 x half> [[UNI_PHI24]], i32 8, i32 16, i64 [[UNI_PHI23]])
; CHECK-NEXT:    call void @_ZGVbN16uv_sub_group_rowslice_insertelement.f16(i64 [[TMP16]], <16 x half> <half 0xH4500, half 0xH4500, half 0xH4500, half 0xH4500, half 0xH4500, half 0xH4500, half 0xH4500, half 0xH4500, half 0xH4500, half 0xH4500, half 0xH4500, half 0xH4500, half 0xH4500, half 0xH4500, half 0xH4500, half 0xH4500>)
; CHECK-NEXT:    [[TMP17:%.*]] = call <128 x half> @sub_group_insert_rowslice_to_matrix.v128f16(i64 [[TMP16]])
; CHECK-NEXT:    [[TMP18:%.*]] = add i64 [[UNI_PHI23]], 1
; CHECK-NEXT:    br label [[NEW_LOOP_LATCH14]]
; CHECK:       new.loop.latch14:
; CHECK-NEXT:    [[UNI_PHI26]] = phi i64 [ [[TMP18]], [[VPLANNEDBB25]] ], [ undef, [[VPLANNEDBB22]] ]
; CHECK-NEXT:    [[UNI_PHI27]] = phi <128 x half> [ [[TMP17]], [[VPLANNEDBB25]] ], [ undef, [[VPLANNEDBB22]] ]
; CHECK-NEXT:    [[UNI_PHI28:%.*]] = phi i1 [ true, [[VPLANNEDBB25]] ], [ false, [[VPLANNEDBB22]] ]
; CHECK-NEXT:    br i1 [[UNI_PHI28]], label [[VPLANNEDBB22]], label [[VPLANNEDBB29:%.*]]
; CHECK:       VPlannedBB29:
; CHECK-NEXT:    [[UNI_PHI30:%.*]] = phi <128 x half> [ [[UNI_PHI24]], [[NEW_LOOP_LATCH14]] ]
; CHECK-NEXT:    br label [[VPLANNEDBB31:%.*]]
; CHECK:       VPlannedBB31:
; CHECK-NEXT:    [[UNI_PHI32:%.*]] = phi i64 [ [[UNI_PHI35:%.*]], [[NEW_LOOP_LATCH16:%.*]] ], [ 0, [[VPLANNEDBB29]] ]
; CHECK-NEXT:    [[UNI_PHI33:%.*]] = phi <128 x half> [ [[UNI_PHI36:%.*]], [[NEW_LOOP_LATCH16]] ], [ [[UNI_PHI30]], [[VPLANNEDBB29]] ]
; CHECK-NEXT:    [[TMP19:%.*]] = call i64 @get_sub_group_slice_length.(i32 128)
; CHECK-NEXT:    [[TMP20:%.*]] = icmp ugt i64 [[TMP19]], [[UNI_PHI32]]
; CHECK-NEXT:    br i1 [[TMP20]], label [[VPLANNEDBB34:%.*]], label [[NEW_LOOP_LATCH16]]
; CHECK:       VPlannedBB34:
; CHECK-NEXT:    [[TMP21:%.*]] = call i64 @get_sub_group_rowslice_id.v128f16.i64(<128 x half> [[UNI_PHI33]], i32 8, i32 16, i64 [[UNI_PHI32]])
; CHECK-NEXT:    [[TMP22:%.*]] = call <16 x half> @_ZGVbN16u_sub_group_rowslice_extractelement.f16(i64 [[TMP21]])
; CHECK-NEXT:    [[TMP23:%.*]] = fadd fast <16 x half> [[TMP22]], <half 0xH4000, half 0xH4000, half 0xH4000, half 0xH4000, half 0xH4000, half 0xH4000, half 0xH4000, half 0xH4000, half 0xH4000, half 0xH4000, half 0xH4000, half 0xH4000, half 0xH4000, half 0xH4000, half 0xH4000, half 0xH4000>
; CHECK-NEXT:    [[TMP24:%.*]] = call i64 @get_sub_group_rowslice_id.v128f16.i64(<128 x half> [[UNI_PHI33]], i32 8, i32 16, i64 [[UNI_PHI32]])
; CHECK-NEXT:    call void @_ZGVbN16uv_sub_group_rowslice_insertelement.f16(i64 [[TMP24]], <16 x half> [[TMP23]])
; CHECK-NEXT:    [[TMP25:%.*]] = call <128 x half> @sub_group_insert_rowslice_to_matrix.v128f16(i64 [[TMP24]])
; CHECK-NEXT:    [[TMP26:%.*]] = add i64 [[UNI_PHI32]], 1
; CHECK-NEXT:    br label [[NEW_LOOP_LATCH16]]
; CHECK:       new.loop.latch16:
; CHECK-NEXT:    [[UNI_PHI35]] = phi i64 [ [[TMP26]], [[VPLANNEDBB34]] ], [ undef, [[VPLANNEDBB31]] ]
; CHECK-NEXT:    [[UNI_PHI36]] = phi <128 x half> [ [[TMP25]], [[VPLANNEDBB34]] ], [ undef, [[VPLANNEDBB31]] ]
; CHECK-NEXT:    [[UNI_PHI37:%.*]] = phi i1 [ true, [[VPLANNEDBB34]] ], [ false, [[VPLANNEDBB31]] ]
; CHECK-NEXT:    br i1 [[UNI_PHI37]], label [[VPLANNEDBB31]], label [[VPLANNEDBB38:%.*]]
; CHECK:       VPlannedBB38:
; CHECK-NEXT:    [[UNI_PHI39:%.*]] = phi <128 x half> [ [[UNI_PHI33]], [[NEW_LOOP_LATCH16]] ]
; CHECK-NEXT:    [[TMP27:%.*]] = sub i64 [[DOTEXTRACT_0_40]], [[DOTEXTRACT_0_41]]
; CHECK-NEXT:    [[TMP28:%.*]] = sub i64 [[TMP1]], [[TMP4]]
; CHECK-NEXT:    [[TMP29:%.*]] = shl i64 [[TMP28]], 8
; CHECK-NEXT:    [[SCALAR_GEP:%.*]] = getelementptr inbounds %"class.sycl::_V1::detail::half_impl::half", %"class.sycl::_V1::detail::half_impl::half" addrspace(1)* [[LOAD__ARG_ACCA]], i64 [[TMP29]]
; CHECK-NEXT:    [[TMP30:%.*]] = and i64 [[TMP27]], -16
; CHECK-NEXT:    [[SCALAR_GEP42:%.*]] = getelementptr inbounds %"class.sycl::_V1::detail::half_impl::half", %"class.sycl::_V1::detail::half_impl::half" addrspace(1)* [[SCALAR_GEP]], i64 [[TMP30]]
; CHECK-NEXT:    tail call void @"llvm.experimental.matrix.store.v128f16.p1s_class.sycl::_V1::detail::half_impl::halfs"(<128 x half> [[UNI_PHI39]], %"class.sycl::_V1::detail::half_impl::half" addrspace(1)* [[SCALAR_GEP42]], i64 32, i1 false, i32 8, i32 16, metadata !"matrix.rowmajor", metadata !"matrix.rowmajor", metadata !"scope.subgroup", metadata !"matrix.use.a")
; CHECK-NEXT:    br label [[VPLANNEDBB43]]
; CHECK:       VPlannedBB43:
; CHECK-NEXT:    [[TMP31]] = add nuw nsw <16 x i32> [[VEC_PHI]], <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
; CHECK-NEXT:    [[TMP32]] = add nuw nsw i32 [[UNI_PHI]], 16
; CHECK-NEXT:    [[TMP33:%.*]] = icmp ult i32 [[TMP32]], 16
; CHECK-NEXT:    br i1 false, label [[VECTOR_BODY]], label [[VPLANNEDBB44:%.*]], !llvm.loop [[LOOP19:![0-9]+]]
; CHECK:       VPlannedBB44:
; CHECK-NEXT:    br label [[VPLANNEDBB45:%.*]]
; CHECK:       VPlannedBB45:
; CHECK-NEXT:    br label [[FINAL_MERGE:%.*]]
; CHECK:       final.merge:
; CHECK-NEXT:    [[UNI_PHI46:%.*]] = phi i32 [ 16, [[VPLANNEDBB45]] ]
; CHECK-NEXT:    br label [[SIMD_END_REGION:%.*]]
; CHECK:       simd.loop.header:
; CHECK-NEXT:    [[INDEX:%.*]] = phi i32 [ [[INDVAR:%.*]], [[SIMD_LOOP_LATCH:%.*]] ]
; CHECK-NEXT:    [[ADD1:%.*]] = add nuw i32 [[TMP3]], [[INDEX]]
; CHECK-NEXT:    [[TMP34:%.*]] = sext i32 [[ADD1]] to i64
; CHECK-NEXT:    [[TMP35:%.*]] = sext i32 [[INDEX]] to i64
; CHECK-NEXT:    [[ADD:%.*]] = add nuw i64 [[TMP35]], [[TMP0]]
; CHECK-NEXT:    [[CMP_I_I:%.*]] = icmp ult i64 [[TMP1]], 2147483648
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[CMP_I_I]])
; CHECK-NEXT:    [[CMP_I34_I:%.*]] = icmp ult i64 [[ADD]], 2147483648
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[CMP_I34_I]])
; CHECK-NEXT:    [[CMP_I36_I:%.*]] = icmp ult i64 [[TMP4]], 2147483648
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[CMP_I36_I]])
; CHECK-NEXT:    [[CMP_I38_I:%.*]] = icmp ult i64 [[TMP34]], 2147483648
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[CMP_I38_I]])
; CHECK-NEXT:    [[MAT_INIT:%.*]] = call <128 x half> @llvm.experimental.matrix.fill.v128f16.f16(half 0xH0000, i32 8, i32 16, metadata !"matrix.rowmajor", metadata !"scope.subgroup", metadata !"matrix.use.a")
; CHECK-NEXT:    [[SG_SLICE_LENGTH:%.*]] = call i64 @get_sub_group_slice_length.(i32 128)
; CHECK-NEXT:    br label [[MATRIX_FILL_SLICE_LOOP_HEADER:%.*]]
; CHECK:       matrix.fill.slice.loop.header:
; CHECK-NEXT:    [[ELEMENT_INDEX:%.*]] = phi i64 [ 0, [[SIMD_LOOP_HEADER:%.*]] ], [ [[ELEMENT_INDEX_INC:%.*]], [[MATRIX_FILL_SLICE_LOOP:%.*]] ]
; CHECK-NEXT:    [[MAT:%.*]] = phi <128 x half> [ [[MAT_INIT]], [[SIMD_LOOP_HEADER]] ], [ [[MAT_UPDATE3:%.*]], [[MATRIX_FILL_SLICE_LOOP]] ]
; CHECK-NEXT:    [[TMP36:%.*]] = icmp slt i64 [[ELEMENT_INDEX]], [[SG_SLICE_LENGTH]]
; CHECK-NEXT:    br i1 [[TMP36]], label [[MATRIX_FILL_SLICE_LOOP]], label [[MATRIX_FILL_SLICE_LOOP_END:%.*]]
; CHECK:       matrix.fill.slice.loop:
; CHECK-NEXT:    [[ROWSLICE_ID2:%.*]] = call i64 @get_sub_group_rowslice_id.v128f16.i64(<128 x half> [[MAT]], i32 8, i32 16, i64 [[ELEMENT_INDEX]])
; CHECK-NEXT:    call void @sub_group_rowslice_insertelement.f16(i64 [[ROWSLICE_ID2]], half 0xH4500)
; CHECK-NEXT:    [[MAT_UPDATE3]] = call <128 x half> @sub_group_insert_rowslice_to_matrix.v128f16(i64 [[ROWSLICE_ID2]])
; CHECK-NEXT:    [[ELEMENT_INDEX_INC]] = add nuw i64 [[ELEMENT_INDEX]], 1
; CHECK-NEXT:    br label [[MATRIX_FILL_SLICE_LOOP_HEADER]]
; CHECK:       matrix.fill.slice.loop.end:
; CHECK-NEXT:    [[MAT_LCSSA:%.*]] = phi <128 x half> [ [[MAT]], [[MATRIX_FILL_SLICE_LOOP_HEADER]] ]
; CHECK-NEXT:    br label [[FOR_COND_I:%.*]]
; CHECK:       for.cond.i:
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY_I:%.*]] ], [ 0, [[MATRIX_FILL_SLICE_LOOP_END]] ]
; CHECK-NEXT:    [[SUB_A_SROA_0_0_I:%.*]] = phi <128 x half> [ [[MAT_UPDATE:%.*]], [[FOR_BODY_I]] ], [ [[MAT_LCSSA]], [[MATRIX_FILL_SLICE_LOOP_END]] ]
; CHECK-NEXT:    [[SG_SLICE_LENGTH1:%.*]] = call i64 @get_sub_group_slice_length.(i32 128)
; CHECK-NEXT:    [[CMP_I:%.*]] = icmp ugt i64 [[SG_SLICE_LENGTH1]], [[INDVARS_IV]]
; CHECK-NEXT:    br i1 [[CMP_I]], label [[FOR_BODY_I]], label [[_ZZZ17MATRIX_VERIFY_ADDIN4SYCL3_V16DETAIL9HALF_IMPL4HALFELM16ELM32EEVNS1_5QUEUEER10BIG_MATRIXIT_XT0_EXT1_EERNS1_8ND_RANGEILI2EEEFENKULRNS1_7HANDLEREE_CLESE_ENKULNS1_7ND_ITEMILI2EEEE_CLESH__EXIT:%.*]]
; CHECK:       for.body.i:
; CHECK-NEXT:    [[ROWSLICE_ID:%.*]] = call i64 @get_sub_group_rowslice_id.v128f16.i64(<128 x half> [[SUB_A_SROA_0_0_I]], i32 8, i32 16, i64 [[INDVARS_IV]])
; CHECK-NEXT:    [[EXTRACT_ELEM:%.*]] = call half @sub_group_rowslice_extractelement.f16(i64 [[ROWSLICE_ID]])
; CHECK-NEXT:    [[ADD_I_I_I:%.*]] = fadd fast half [[EXTRACT_ELEM]], 0xH4000
; CHECK-NEXT:    [[ROWSLICE_ID4:%.*]] = call i64 @get_sub_group_rowslice_id.v128f16.i64(<128 x half> [[SUB_A_SROA_0_0_I]], i32 8, i32 16, i64 [[INDVARS_IV]])
; CHECK-NEXT:    call void @sub_group_rowslice_insertelement.f16(i64 [[ROWSLICE_ID4]], half [[ADD_I_I_I]])
; CHECK-NEXT:    [[MAT_UPDATE]] = call <128 x half> @sub_group_insert_rowslice_to_matrix.v128f16(i64 [[ROWSLICE_ID4]])
; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw i64 [[INDVARS_IV]], 1
; CHECK-NEXT:    br label [[FOR_COND_I]]
; CHECK:       _ZZZ17matrix_verify_addIN4sycl3_V16detail9half_impl4halfELm16ELm32EEvNS1_5queueER10big_matrixIT_XT0_EXT1_EERNS1_8nd_rangeILi2EEEfENKUlRNS1_7handlerEE_clESE_ENKUlNS1_7nd_itemILi2EEEE_clESH_.exit:
; CHECK-NEXT:    [[SUB_A_SROA_0_0_I_LCSSA:%.*]] = phi <128 x half> [ [[SUB_A_SROA_0_0_I]], [[FOR_COND_I]] ]
; CHECK-NEXT:    [[SUB5_I:%.*]] = sub nsw i64 [[ADD]], [[TMP34]]
; CHECK-NEXT:    [[SUB_I:%.*]] = sub nsw i64 [[TMP1]], [[TMP4]]
; CHECK-NEXT:    [[MUL21_I:%.*]] = shl nsw i64 [[SUB_I]], 8
; CHECK-NEXT:    [[ADD_PTR_I_I:%.*]] = getelementptr inbounds %"class.sycl::_V1::detail::half_impl::half", %"class.sycl::_V1::detail::half_impl::half" addrspace(1)* [[LOAD__ARG_ACCA]], i64 [[MUL21_I]]
; CHECK-NEXT:    [[DIV32_I:%.*]] = and i64 [[SUB5_I]], -16
; CHECK-NEXT:    [[ADD_PTR_I48_I:%.*]] = getelementptr inbounds %"class.sycl::_V1::detail::half_impl::half", %"class.sycl::_V1::detail::half_impl::half" addrspace(1)* [[ADD_PTR_I_I]], i64 [[DIV32_I]]
; CHECK-NEXT:    tail call void @"llvm.experimental.matrix.store.v128f16.p1s_class.sycl::_V1::detail::half_impl::halfs"(<128 x half> [[SUB_A_SROA_0_0_I_LCSSA]], %"class.sycl::_V1::detail::half_impl::half" addrspace(1)* [[ADD_PTR_I48_I]], i64 32, i1 false, i32 8, i32 16, metadata !"matrix.rowmajor", metadata !"matrix.rowmajor", metadata !"scope.subgroup", metadata !"matrix.use.a")
; CHECK-NEXT:    br label [[SIMD_LOOP_LATCH]]
; CHECK:       simd.loop.latch:
; CHECK-NEXT:    [[INDVAR]] = add nuw i32 [[INDEX]], 1
; CHECK-NEXT:    [[VL_COND:%.*]] = icmp ult i32 [[INDVAR]], 16
; CHECK-NEXT:    br label [[SIMD_LOOP_HEADER]]
; CHECK:       simd.end.region:
; CHECK-NEXT:    br label [[RETURN:%.*]]
; CHECK:       return:
; CHECK-NEXT:    ret void
;
