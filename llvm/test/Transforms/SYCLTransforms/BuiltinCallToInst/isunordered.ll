; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes=dpcpp-kernel-builtin-call-to-inst -S %s -enable-debugify -disable-output 2>&1 | FileCheck -check-prefix=DEBUGIFY %s
; RUN: opt -passes=dpcpp-kernel-builtin-call-to-inst -S %s | FileCheck %s

define void @test_half(half %x) {
; CHECK-LABEL: @test_half(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = fcmp uno half [[X:%.*]], [[X]]
; CHECK-NEXT:    [[TMP1:%.*]] = zext i1 [[TMP0]] to i32
; CHECK-NEXT:    ret void
;
entry:
  %call = call i32 @_Z11isunorderedDhDh(half %x, half %x)
  ret void
}

declare i32 @_Z11isunorderedDhDh(half, half)

define void @test_half64(<64 x half> %x) {
; CHECK-LABEL: @test_half64(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = fcmp uno <64 x half> [[X:%.*]], [[X]]
; CHECK-NEXT:    [[TMP1:%.*]] = sext <64 x i1> [[TMP0]] to <64 x i16>
; CHECK-NEXT:    ret void
;
entry:
  %call = call <64 x i16> @_Z11isunorderedDv64_DhS_(<64 x half> %x, <64 x half> %x)
  ret void
}

declare <64 x i16> @_Z11isunorderedDv64_DhS_(<64 x half>, <64 x half>)

define void @test_float(float %x) {
; CHECK-LABEL: @test_float(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = fcmp uno float [[X:%.*]], [[X]]
; CHECK-NEXT:    [[TMP1:%.*]] = zext i1 [[TMP0]] to i32
; CHECK-NEXT:    ret void
;
entry:
  %call = call i32 @_Z11isunorderedff(float %x, float %x)
  ret void
}

declare i32 @_Z11isunorderedff(float, float)

define void @test_float64(<64 x float> %x) {
; CHECK-LABEL: @test_float64(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = fcmp uno <64 x float> [[X:%.*]], [[X]]
; CHECK-NEXT:    [[TMP1:%.*]] = sext <64 x i1> [[TMP0]] to <64 x i32>
; CHECK-NEXT:    ret void
;
entry:
  %call = call <64 x i32> @_Z11isunorderedDv64_fS_(<64 x float> %x, <64 x float> %x)
  ret void
}

declare <64 x i32> @_Z11isunorderedDv64_fS_(<64 x float>, <64 x float>)

define void @test_double(double %x) {
; CHECK-LABEL: @test_double(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = fcmp uno double [[X:%.*]], [[X]]
; CHECK-NEXT:    [[TMP1:%.*]] = zext i1 [[TMP0]] to i32
; CHECK-NEXT:    ret void
;
entry:
  %call = call i32 @_Z11isunordereddd(double %x, double %x)
  ret void
}

declare i32 @_Z11isunordereddd(double, double)

define void @test_double64(<64 x double> %x) {
; CHECK-LABEL: @test_double64(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = fcmp uno <64 x double> [[X:%.*]], [[X]]
; CHECK-NEXT:    [[TMP1:%.*]] = sext <64 x i1> [[TMP0]] to <64 x i64>
; CHECK-NEXT:    ret void
;
entry:
  %call = call <64 x i64> @_Z11isunorderedDv64_dS_(<64 x double> %x, <64 x double> %x)
  ret void
}

declare <64 x i64> @_Z11isunorderedDv64_dS_(<64 x double>, <64 x double>)

; DEBUGIFY-NOT: WARNING
