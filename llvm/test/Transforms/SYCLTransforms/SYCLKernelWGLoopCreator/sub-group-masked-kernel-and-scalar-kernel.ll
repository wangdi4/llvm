; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes=sycl-kernel-wgloop-creator %s -S | FileCheck %s
; RUN: opt -passes=sycl-kernel-wgloop-creator %s -S -enable-debugify -disable-output 2>&1 | FileCheck -check-prefix=DEBUGIFY %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux"

; Function Attrs: convergent nounwind
define void @test(i32 addrspace(1)* noalias %a) local_unnamed_addr #0 !kernel_arg_addr_space !1 !kernel_arg_access_qual !2 !kernel_arg_type !3 !kernel_arg_base_type !3 !kernel_arg_type_qual !4 !kernel_arg_host_accessible !5 !kernel_arg_pipe_depth !6 !kernel_arg_pipe_io !4 !kernel_arg_buffer_location !4 !kernel_arg_name !7 !vectorized_kernel !8 !vectorized_masked_kernel !9 !no_barrier_path !10 !kernel_has_sub_groups !10 !vectorized_width !1 !scalar_kernel !11 !kernel_execution_length !12 !kernel_has_barrier !5 !kernel_has_global_sync !5 {
; CHECK-LABEL: @test(
; CHECK:       entry:
; CHECK-NEXT:    [[EARLY_EXIT_CALL:%.*]] = call [7 x i64] @WG.boundaries.test(i32 addrspace(1)* [[A:%.*]])
; CHECK-NEXT:    [[TMP1:%.*]] = extractvalue [7 x i64] [[EARLY_EXIT_CALL]], 0
; CHECK-NEXT:    [[TMP2:%.*]] = trunc i64 [[TMP1]] to i1
; CHECK-NEXT:    br i1 [[TMP2]], label [[WGLOOPSENTRY:%.*]], label [[EXIT:%.*]]
; CHECK:       WGLoopsEntry:
; CHECK-NEXT:    [[INIT_GID_DIM0:%.*]] = extractvalue [7 x i64] [[EARLY_EXIT_CALL]], 1
; CHECK-NEXT:    [[LOOP_SIZE_DIM0:%.*]] = extractvalue [7 x i64] [[EARLY_EXIT_CALL]], 2
; CHECK-NEXT:    [[MAX_GID_DIM0:%.*]] = add i64 [[INIT_GID_DIM0]], [[LOOP_SIZE_DIM0]]
; CHECK-NEXT:    [[INIT_GID_DIM1:%.*]] = extractvalue [7 x i64] [[EARLY_EXIT_CALL]], 3
; CHECK-NEXT:    [[LOOP_SIZE_DIM1:%.*]] = extractvalue [7 x i64] [[EARLY_EXIT_CALL]], 4
; CHECK-NEXT:    [[MAX_GID_DIM1:%.*]] = add i64 [[INIT_GID_DIM1]], [[LOOP_SIZE_DIM1]]
; CHECK-NEXT:    [[INIT_GID_DIM2:%.*]] = extractvalue [7 x i64] [[EARLY_EXIT_CALL]], 5
; CHECK-NEXT:    [[LOOP_SIZE_DIM2:%.*]] = extractvalue [7 x i64] [[EARLY_EXIT_CALL]], 6
; CHECK-NEXT:    [[MAX_GID_DIM2:%.*]] = add i64 [[INIT_GID_DIM2]], [[LOOP_SIZE_DIM2]]
; CHECK-NEXT:    [[VECTOR_SIZE:%.*]] = ashr i64 [[LOOP_SIZE_DIM0]], 2
; CHECK-NEXT:    [[NUM_VECTOR_WI:%.*]] = shl i64 [[VECTOR_SIZE]], 2
; CHECK-NEXT:    [[MAX_VECTOR_GID:%.*]] = add i64 [[NUM_VECTOR_WI]], [[INIT_GID_DIM0]]
; CHECK-NEXT:    [[SCALAR_SIZE:%.*]] = sub i64 [[LOOP_SIZE_DIM0]], [[NUM_VECTOR_WI]]
; CHECK-NEXT:    br label [[VECT_IF:%.*]]
; CHECK:       vect_if:
; CHECK-NEXT:    [[TMP3:%.*]] = icmp ne i64 [[VECTOR_SIZE]], 0
; CHECK-NEXT:    br i1 [[TMP3]], label [[DIM_2_VECTOR_PRE_HEAD:%.*]], label [[MASKED_VECT_IF:%.*]]
; CHECK:       dim_2_vector_pre_head:
; CHECK-NEXT:    br label [[DIM_1_VECTOR_PRE_HEAD:%.*]]
; CHECK:       dim_1_vector_pre_head:
; CHECK-NEXT:    [[DIM_2_VECTOR_IND_VAR:%.*]] = phi i64 [ [[INIT_GID_DIM2]], [[DIM_2_VECTOR_PRE_HEAD]] ], [ [[DIM_2_VECTOR_INC_IND_VAR:%.*]], [[DIM_1_VECTOR_EXIT:%.*]] ]
; CHECK-NEXT:    br label [[DIM_0_VECTOR_PRE_HEAD:%.*]]
; CHECK:       dim_0_vector_pre_head:
; CHECK-NEXT:    [[DIM_1_VECTOR_IND_VAR:%.*]] = phi i64 [ [[INIT_GID_DIM1]], [[DIM_1_VECTOR_PRE_HEAD]] ], [ [[DIM_1_VECTOR_INC_IND_VAR:%.*]], [[DIM_0_VECTOR_EXIT:%.*]] ]
; CHECK-NEXT:    br label [[ENTRYVECTOR_FUNC:%.*]]
; CHECK:       entryvector_func:
; CHECK-NEXT:    [[DIM_0_VECTOR_IND_VAR:%.*]] = phi i64 [ [[INIT_GID_DIM0]], [[DIM_0_VECTOR_PRE_HEAD]] ], [ [[DIM_0_VECTOR_INC_IND_VAR:%.*]], [[ENTRYVECTOR_FUNC]] ]
; CHECK-NEXT:    [[DIM_0_VECTOR_INC_IND_VAR]] = add nuw nsw i64 [[DIM_0_VECTOR_IND_VAR]], 4
; CHECK-NEXT:    [[DIM_0_VECTOR_CMP_TO_MAX:%.*]] = icmp sge i64 [[DIM_0_VECTOR_INC_IND_VAR]], [[MAX_VECTOR_GID]]
; CHECK-NEXT:    br i1 [[DIM_0_VECTOR_CMP_TO_MAX]], label [[DIM_0_VECTOR_EXIT]], label [[ENTRYVECTOR_FUNC]]
; CHECK:       dim_0_vector_exit:
; CHECK-NEXT:    [[DIM_1_VECTOR_INC_IND_VAR]] = add nuw nsw i64 [[DIM_1_VECTOR_IND_VAR]], 1
; CHECK-NEXT:    [[DIM_1_VECTOR_CMP_TO_MAX:%.*]] = icmp sge i64 [[DIM_1_VECTOR_INC_IND_VAR]], [[MAX_GID_DIM1]]
; CHECK-NEXT:    br i1 [[DIM_1_VECTOR_CMP_TO_MAX]], label [[DIM_1_VECTOR_EXIT]], label [[DIM_0_VECTOR_PRE_HEAD]]
; CHECK:       dim_1_vector_exit:
; CHECK-NEXT:    [[DIM_2_VECTOR_INC_IND_VAR]] = add nuw nsw i64 [[DIM_2_VECTOR_IND_VAR]], 1
; CHECK-NEXT:    [[DIM_2_VECTOR_CMP_TO_MAX:%.*]] = icmp sge i64 [[DIM_2_VECTOR_INC_IND_VAR]], [[MAX_GID_DIM2]]
; CHECK-NEXT:    br i1 [[DIM_2_VECTOR_CMP_TO_MAX]], label [[DIM_2_VECTOR_EXIT:%.*]], label [[DIM_1_VECTOR_PRE_HEAD]]
; CHECK:       dim_2_vector_exit:
; CHECK-NEXT:    br label [[MASKED_VECT_IF]]
; CHECK:       masked_vect_if:
; CHECK-NEXT:    [[TMP4:%.*]] = icmp ne i64 [[SCALAR_SIZE]], 0
; CHECK-NEXT:    br i1 [[TMP4]], label [[MASK_GENERATE:%.*]], label [[RET:%.*]]
; CHECK:       mask_generate:
; CHECK-NEXT:    [[DOTSPLATINSERT:%.*]] = insertelement <4 x i64> poison, i64 [[SCALAR_SIZE]], i64 0
; CHECK-NEXT:    [[DOTSPLAT:%.*]] = shufflevector <4 x i64> [[DOTSPLATINSERT]], <4 x i64> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    [[MASK_I1:%.*]] = icmp ult <4 x i64> <i64 0, i64 1, i64 2, i64 3>, [[DOTSPLAT]]
; CHECK-NEXT:    [[MASK_I32:%.*]] = sext <4 x i1> [[MASK_I1]] to <4 x i32>
; CHECK-NEXT:    br label [[DIM_2_VECTOR_PRE_HEAD11:%.*]]
; CHECK:       dim_2_vector_pre_head11:
; CHECK-NEXT:    br label [[DIM_1_VECTOR_PRE_HEAD6:%.*]]
; CHECK:       dim_1_vector_pre_head6:
; CHECK-NEXT:    [[DIM_2_VECTOR_IND_VAR13:%.*]] = phi i64 [ [[INIT_GID_DIM2]], [[DIM_2_VECTOR_PRE_HEAD11]] ], [ [[DIM_2_VECTOR_INC_IND_VAR14:%.*]], [[DIM_1_VECTOR_EXIT7:%.*]] ]
; CHECK-NEXT:    br label [[DIM_0_VECTOR_PRE_HEAD1:%.*]]
; CHECK:       dim_0_vector_pre_head1:
; CHECK-NEXT:    [[DIM_1_VECTOR_IND_VAR8:%.*]] = phi i64 [ [[INIT_GID_DIM1]], [[DIM_1_VECTOR_PRE_HEAD6]] ], [ [[DIM_1_VECTOR_INC_IND_VAR9:%.*]], [[DIM_0_VECTOR_EXIT2:%.*]] ]
; CHECK-NEXT:    br label [[MASKED_KERNEL_ENTRY:%.*]]
; CHECK:       masked_kernel_entry:
; CHECK-NEXT:    [[DIM_0_VECTOR_IND_VAR3:%.*]] = phi i64 [ [[MAX_VECTOR_GID]], [[DIM_0_VECTOR_PRE_HEAD1]] ], [ [[DIM_0_VECTOR_INC_IND_VAR4:%.*]], [[MASKED_KERNEL_ENTRY]] ]
; CHECK-NEXT:    [[DIM_0_VECTOR_INC_IND_VAR4]] = add nuw nsw i64 [[DIM_0_VECTOR_IND_VAR3]], 4
; CHECK-NEXT:    [[DIM_0_VECTOR_CMP_TO_MAX5:%.*]] = icmp sge i64 [[DIM_0_VECTOR_INC_IND_VAR4]], [[MAX_GID_DIM0]]
; CHECK-NEXT:    br i1 [[DIM_0_VECTOR_CMP_TO_MAX5]], label [[DIM_0_VECTOR_EXIT2]], label [[MASKED_KERNEL_ENTRY]], !llvm.loop [[LOOP13:![0-9]+]]
; CHECK:       dim_0_vector_exit2:
; CHECK-NEXT:    [[DIM_1_VECTOR_INC_IND_VAR9]] = add nuw nsw i64 [[DIM_1_VECTOR_IND_VAR8]], 1
; CHECK-NEXT:    [[DIM_1_VECTOR_CMP_TO_MAX10:%.*]] = icmp sge i64 [[DIM_1_VECTOR_INC_IND_VAR9]], [[MAX_GID_DIM1]]
; CHECK-NEXT:    br i1 [[DIM_1_VECTOR_CMP_TO_MAX10]], label [[DIM_1_VECTOR_EXIT7]], label [[DIM_0_VECTOR_PRE_HEAD1]], !llvm.loop [[LOOP15:![0-9]+]]
; CHECK:       dim_1_vector_exit7:
; CHECK-NEXT:    [[DIM_2_VECTOR_INC_IND_VAR14]] = add nuw nsw i64 [[DIM_2_VECTOR_IND_VAR13]], 1
; CHECK-NEXT:    [[DIM_2_VECTOR_CMP_TO_MAX15:%.*]] = icmp sge i64 [[DIM_2_VECTOR_INC_IND_VAR14]], [[MAX_GID_DIM2]]
; CHECK-NEXT:    br i1 [[DIM_2_VECTOR_CMP_TO_MAX15]], label [[DIM_2_VECTOR_EXIT12:%.*]], label [[DIM_1_VECTOR_PRE_HEAD6]], !llvm.loop [[LOOP16:![0-9]+]]
; CHECK:       dim_2_vector_exit12:
; CHECK-NEXT:    br label [[RET]]
; CHECK:       ret:
; CHECK-NEXT:    br label [[EXIT]]
; CHECK:       exit:
; CHECK-NEXT:    ret void
;
entry:
  ret void
}

; Function Attrs: convergent
declare i32 @_Z22get_max_sub_group_sizev() local_unnamed_addr #1

define [7 x i64] @WG.boundaries.test(i32 addrspace(1)* %0) !recommended_vector_length !13 {
entry:
  %1 = call i64 @_Z14get_local_sizej(i32 0)
  %2 = call i64 @get_base_global_id.(i32 0)
  %3 = call i64 @_Z14get_local_sizej(i32 1)
  %4 = call i64 @get_base_global_id.(i32 1)
  %5 = call i64 @_Z14get_local_sizej(i32 2)
  %6 = call i64 @get_base_global_id.(i32 2)
  %7 = insertvalue [7 x i64] undef, i64 %1, 2
  %8 = insertvalue [7 x i64] %7, i64 %2, 1
  %9 = insertvalue [7 x i64] %8, i64 %3, 4
  %10 = insertvalue [7 x i64] %9, i64 %4, 3
  %11 = insertvalue [7 x i64] %10, i64 %5, 6
  %12 = insertvalue [7 x i64] %11, i64 %6, 5
  %13 = insertvalue [7 x i64] %12, i64 1, 0
  ret [7 x i64] %13
}

declare i64 @_Z14get_local_sizej(i32)

declare i64 @get_base_global_id.(i32)

; Function Attrs: convergent nounwind
define void @_ZGVcN4u_test(i32 addrspace(1)* noalias %a) local_unnamed_addr #0 !kernel_arg_addr_space !1 !kernel_arg_access_qual !2 !kernel_arg_type !3 !kernel_arg_base_type !3 !kernel_arg_type_qual !4 !kernel_arg_host_accessible !5 !kernel_arg_pipe_depth !6 !kernel_arg_pipe_io !4 !kernel_arg_buffer_location !4 !kernel_arg_name !7 !vectorized_kernel !11 !no_barrier_path !10 !kernel_has_sub_groups !10 !vectorized_width !13 !scalar_kernel !0 !kernel_execution_length !12 !kernel_has_barrier !5 !kernel_has_global_sync !5 !recommended_vector_length !13 !vectorization_dimension !6 !can_unite_workgroups !5 {
entry:
  ret void
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #2

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #2

; Function Attrs: convergent nounwind
define void @_ZGVcM4u_test(i32 addrspace(1)* noalias %a, <4 x i32> %mask) local_unnamed_addr #0 !kernel_arg_addr_space !1 !kernel_arg_access_qual !2 !kernel_arg_type !3 !kernel_arg_base_type !3 !kernel_arg_type_qual !4 !kernel_arg_host_accessible !5 !kernel_arg_pipe_depth !6 !kernel_arg_pipe_io !4 !kernel_arg_buffer_location !4 !kernel_arg_name !7 !vectorized_kernel !11 !no_barrier_path !10 !kernel_has_sub_groups !10 !vectorized_width !13 !scalar_kernel !0 !kernel_execution_length !14 !kernel_has_barrier !5 !kernel_has_global_sync !5 !recommended_vector_length !13 !vectorization_dimension !6 !can_unite_workgroups !5 {
entry:
  ret void
}

; Function Attrs: nounwind
define void @foo(i32 addrspace(1)* noalias %a) local_unnamed_addr #2 !kernel_arg_addr_space !1 !kernel_arg_access_qual !2 !kernel_arg_type !3 !kernel_arg_base_type !3 !kernel_arg_type_qual !4 !kernel_arg_host_accessible !5 !kernel_arg_pipe_depth !6 !kernel_arg_pipe_io !4 !kernel_arg_buffer_location !4 !kernel_arg_name !7 !no_barrier_path !10 !kernel_has_barrier !5 !kernel_has_global_sync !5 {
; CHECK-LABEL: @foo(
; CHECK:       entry:
; CHECK-NEXT:    [[BASE_GID_DIM0:%.*]] = call i64 @get_base_global_id.(i32 0)
; CHECK-NEXT:    [[LOCAL_SIZE_DIM0:%.*]] = call i64 @_Z14get_local_sizej(i32 0)
; CHECK-NEXT:    [[MAX_GID_DIM0:%.*]] = add i64 [[BASE_GID_DIM0]], [[LOCAL_SIZE_DIM0]]
; CHECK-NEXT:    [[BASE_GID_DIM1:%.*]] = call i64 @get_base_global_id.(i32 1)
; CHECK-NEXT:    [[LOCAL_SIZE_DIM1:%.*]] = call i64 @_Z14get_local_sizej(i32 1)
; CHECK-NEXT:    [[MAX_GID_DIM1:%.*]] = add i64 [[BASE_GID_DIM1]], [[LOCAL_SIZE_DIM1]]
; CHECK-NEXT:    [[BASE_GID_DIM2:%.*]] = call i64 @get_base_global_id.(i32 2)
; CHECK-NEXT:    [[LOCAL_SIZE_DIM2:%.*]] = call i64 @_Z14get_local_sizej(i32 2)
; CHECK-NEXT:    [[MAX_GID_DIM2:%.*]] = add i64 [[BASE_GID_DIM2]], [[LOCAL_SIZE_DIM2]]
; CHECK-NEXT:    br label [[DIM_2_PRE_HEAD:%.*]]
; CHECK:       dim_2_pre_head:
; CHECK-NEXT:    br label [[DIM_1_PRE_HEAD:%.*]]
; CHECK:       dim_1_pre_head:
; CHECK-NEXT:    [[DIM_2_IND_VAR:%.*]] = phi i64 [ [[BASE_GID_DIM2]], [[DIM_2_PRE_HEAD]] ], [ [[DIM_2_INC_IND_VAR:%.*]], [[DIM_1_EXIT:%.*]] ]
; CHECK-NEXT:    br label [[DIM_0_PRE_HEAD:%.*]]
; CHECK:       dim_0_pre_head:
; CHECK-NEXT:    [[DIM_1_IND_VAR:%.*]] = phi i64 [ [[BASE_GID_DIM1]], [[DIM_1_PRE_HEAD]] ], [ [[DIM_1_INC_IND_VAR:%.*]], [[DIM_0_EXIT:%.*]] ]
; CHECK-NEXT:    br label [[SCALAR_KERNEL_ENTRY:%.*]]
; CHECK:       scalar_kernel_entry:
; CHECK-NEXT:    [[DIM_0_IND_VAR:%.*]] = phi i64 [ [[BASE_GID_DIM0]], [[DIM_0_PRE_HEAD]] ], [ [[DIM_0_INC_IND_VAR:%.*]], [[SCALAR_KERNEL_ENTRY]] ]
; CHECK-NEXT:    [[DIM_0_INC_IND_VAR]] = add nuw nsw i64 [[DIM_0_IND_VAR]], 1
; CHECK-NEXT:    [[DIM_0_CMP_TO_MAX:%.*]] = icmp eq i64 [[DIM_0_INC_IND_VAR]], [[MAX_GID_DIM0]]
; CHECK-NEXT:    br i1 [[DIM_0_CMP_TO_MAX]], label [[DIM_0_EXIT]], label [[SCALAR_KERNEL_ENTRY]]
; CHECK:       dim_0_exit:
; CHECK-NEXT:    [[DIM_1_INC_IND_VAR]] = add nuw nsw i64 [[DIM_1_IND_VAR]], 1
; CHECK-NEXT:    [[DIM_1_CMP_TO_MAX:%.*]] = icmp eq i64 [[DIM_1_INC_IND_VAR]], [[MAX_GID_DIM1]]
; CHECK-NEXT:    br i1 [[DIM_1_CMP_TO_MAX]], label [[DIM_1_EXIT]], label [[DIM_0_PRE_HEAD]]
; CHECK:       dim_1_exit:
; CHECK-NEXT:    [[DIM_2_INC_IND_VAR]] = add nuw nsw i64 [[DIM_2_IND_VAR]], 1
; CHECK-NEXT:    [[DIM_2_CMP_TO_MAX:%.*]] = icmp eq i64 [[DIM_2_INC_IND_VAR]], [[MAX_GID_DIM2]]
; CHECK-NEXT:    br i1 [[DIM_2_CMP_TO_MAX]], label [[DIM_2_EXIT:%.*]], label [[DIM_1_PRE_HEAD]]
; CHECK:       dim_2_exit:
; CHECK-NEXT:    br label [[EXIT:%.*]]
; CHECK:       exit:
; CHECK-NEXT:    ret void
;
entry:
  ret void
}

; Function Attrs: nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.scatter.v4i32.v4p1i32(<4 x i32>, <4 x i32 addrspace(1)*>, i32 immarg, <4 x i1>) #3

attributes #0 = { convergent nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "stackrealign" "uniform-work-group-size"="false" "unsafe-fp-math"="false" "use-soft-float"="false" "vector-variants"="_ZGVcN4u_test,_ZGVcM4u_test" }
attributes #1 = { convergent "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "stackrealign" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { nofree nosync nounwind willreturn writeonly }

!sycl.kernels = !{!0}

!0 = !{void (i32 addrspace(1)*)* @test, void (i32 addrspace(1)*)* @foo}
!1 = !{i32 1}
!2 = !{!"none"}
!3 = !{!"uint*"}
!4 = !{!""}
!5 = !{i1 false}
!6 = !{i32 0}
!7 = !{!"a"}
!8 = !{void (i32 addrspace(1)*)* @_ZGVcN4u_test}
!9 = !{void (i32 addrspace(1)*, <4 x i32>)* @_ZGVcM4u_test}
!10 = !{i1 true}
!11 = !{null}
!12 = !{i32 2}
!13 = !{i32 4}
!14 = !{i32 22}

; DEBUGIFY-NOT: WARNING
; DEBUGIFY-COUNT-50: WARNING: Instruction with empty DebugLoc in function test
; DEBUGIFY-COUNT-20: WARNING: Instruction with empty DebugLoc in function foo
; DEBUGIFY: WARNING: Missing line 1
; DEBUGIFY: WARNING: Missing line 16
; DEBUGIFY: WARNING: Missing variable 1
; DEBUGIFY-NOT: WARNING
