; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -opaque-pointers=0 -passes=vec-clone -S < %s | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define void @vec_sum( <2 x i32> %m, <2 x i32> %l) #0 {
; CHECK:  define void @_ZGVbN4uv_vec_sum(<2 x i32> [[M0:%.*]], <8 x i32> [[L0:%.*]]) #1 {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[ALLOCA_M0:%.*]] = alloca <2 x i32>, align 8
; CHECK-NEXT:    store <2 x i32> [[M0]], <2 x i32>* [[ALLOCA_M0]], align 8
; CHECK-NEXT:    [[VEC_L0:%.*]] = alloca <8 x i32>, align 32
; CHECK-NEXT:    [[VEC_L_CAST0:%.*]] = bitcast <8 x i32>* [[VEC_L0]] to <2 x i32>*
; CHECK-NEXT:    store <8 x i32> [[L0]], <8 x i32>* [[VEC_L0]], align 32
; CHECK-NEXT:    br label [[SIMD_BEGIN_REGION0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.begin.region:
; CHECK-NEXT:    [[ENTRY_REGION0:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.SIMDLEN"(i32 4), "QUAL.OMP.UNIFORM:TYPED"(<2 x i32>* [[ALLOCA_M0]], <2 x  i32> zeroinitializer, i32 1) ]
; CHECK-NEXT:    br label [[SIMD_LOOP_PREHEADER0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.preheader:
; CHECK-NEXT:    [[LOAD_M0:%.*]] = load <2 x i32>, <2 x i32>* [[ALLOCA_M0]], align 8
; CHECK-NEXT:    br label [[SIMD_LOOP_HEADER0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.header:
; CHECK-NEXT:    [[INDEX0:%.*]] = phi i32 [ 0, [[SIMD_LOOP_PREHEADER0]] ], [ [[INDVAR0:%.*]], [[SIMD_LOOP_LATCH0:%.*]] ]
; CHECK-NEXT:    [[VEC_L_CAST_GEP0:%.*]] = getelementptr <2 x i32>, <2 x i32>* [[VEC_L_CAST0]], i32 [[INDEX0]]
; CHECK-NEXT:    [[VEC_L_ELEM0:%.*]] = load <2 x i32>, <2 x i32>* [[VEC_L_CAST_GEP0]], align 8
; CHECK-NEXT:    [[ADD30:%.*]] = add nsw <2 x i32> [[LOAD_M0]], [[VEC_L_ELEM0]]
; CHECK-NEXT:    br label [[SIMD_LOOP_LATCH0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.latch:
; CHECK-NEXT:    [[INDVAR0]] = add nuw nsw i32 [[INDEX0]], 1
; CHECK-NEXT:    [[VL_COND0:%.*]] = icmp ult i32 [[INDVAR0]], 4
; CHECK-NEXT:    br i1 [[VL_COND0]], label [[SIMD_LOOP_HEADER0]], label [[SIMD_END_REGION0:%.*]], !llvm.loop !0
; CHECK-EMPTY:
; CHECK-NEXT:  simd.end.region:
; CHECK-NEXT:    call void @llvm.directive.region.exit(token [[ENTRY_REGION0]]) [ "DIR.OMP.END.SIMD"() ]
; CHECK-NEXT:    br label [[RETURN0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  return:
; CHECK-NEXT:    ret void
; CHECK-NEXT:  }
;
entry:
  %add3 = add nsw <2 x i32> %m, %l
  ret void
}

attributes #0 = { nounwind uwtable "vector-variants"="_ZGVbN4uv_vec_sum"  }
