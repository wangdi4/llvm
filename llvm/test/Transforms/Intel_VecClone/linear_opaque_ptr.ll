; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --include-generated-funcs
; RUN: opt -opaque-pointers -vec-clone -S < %s | FileCheck %s
; RUN: opt -opaque-pointers -passes="vec-clone" -S < %s | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define ptr @foo(ptr %p) #0 {
  ret ptr %p
}

attributes #0 = { "vector-variants"="_ZGVbN4l4_foo" }
; CHECK-LABEL: @_ZGVbN4l4_foo(
; CHECK-NEXT:    [[ALLOCA_P:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[P:%.*]], ptr [[ALLOCA_P]], align 8
; CHECK-NEXT:    [[VEC_RETVAL:%.*]] = alloca <4 x ptr>, align 32
; CHECK-NEXT:    br label [[SIMD_BEGIN_REGION:%.*]]
; CHECK:       simd.begin.region:
; CHECK-NEXT:    [[ENTRY_REGION:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.SIMDLEN"(i32 4), "QUAL.OMP.LINEAR:TYPED.PTR_TO_PTR"(ptr [[ALLOCA_P]], i8 0, i32 1, i32 4) ]
; CHECK-NEXT:    br label [[SIMD_LOOP_PREHEADER:%.*]]
; CHECK:       simd.loop.preheader:
; CHECK-NEXT:    [[LOAD_P:%.*]] = load ptr, ptr [[ALLOCA_P]], align 8
; CHECK-NEXT:    br label [[SIMD_LOOP_HEADER:%.*]]
; CHECK:       simd.loop.header:
; CHECK-NEXT:    [[INDEX:%.*]] = phi i32 [ 0, [[SIMD_LOOP_PREHEADER]] ], [ [[INDVAR:%.*]], [[SIMD_LOOP_LATCH:%.*]] ]
; CHECK-NEXT:    [[RET_CAST_GEP:%.*]] = getelementptr ptr, ptr [[VEC_RETVAL]], i32 [[INDEX]]
; CHECK-NEXT:    [[STRIDE_MUL:%.*]] = mul i32 4, [[INDEX]]
; CHECK-NEXT:    [[P_GEP:%.*]] = getelementptr i8, ptr [[LOAD_P]], i32 [[STRIDE_MUL]]
; CHECK-NEXT:    store ptr [[P_GEP]], ptr [[RET_CAST_GEP]], align 8
; CHECK-NEXT:    br label [[SIMD_LOOP_LATCH]]
; CHECK:       simd.loop.latch:
; CHECK-NEXT:    [[INDVAR]] = add nuw i32 [[INDEX]], 1
; CHECK-NEXT:    [[VL_COND:%.*]] = icmp ult i32 [[INDVAR]], 4
; CHECK-NEXT:    br i1 [[VL_COND]], label [[SIMD_LOOP_HEADER]], label [[SIMD_END_REGION:%.*]]
; CHECK:       simd.end.region:
; CHECK-NEXT:    call void @llvm.directive.region.exit(token [[ENTRY_REGION]]) [ "DIR.OMP.END.SIMD"() ]
; CHECK-NEXT:    br label [[RETURN:%.*]]
; CHECK:       return:
; CHECK-NEXT:    [[VEC_RET:%.*]] = load <4 x ptr>, ptr [[VEC_RETVAL]], align 32
; CHECK-NEXT:    ret <4 x ptr> [[VEC_RET]]
;
