; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -opaque-pointers=0 -passes="vec-clone" -S < %s | FileCheck %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define zeroext i1 @_Z3fooj(i32 %i) #0 {
; CHECK-LABEL:define zeroext <16 x i8> @_ZGVbN16v__Z3fooj(<16 x i32>
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VEC_I0:%.*]] = alloca <16 x i32>, align 64
; CHECK-NEXT:    [[VEC_RETVAL0:%.*]] = alloca <16 x i8>, align 16
; CHECK-NEXT:    [[VEC_I_CAST0:%.*]] = bitcast <16 x i32>* [[VEC_I0]] to i32*
; CHECK-NEXT:    store <16 x i32> [[I0:%.*]], <16 x i32>* [[VEC_I0]], align 64
; CHECK-NEXT:    [[RET_CAST0:%.*]] = bitcast <16 x i8>* [[VEC_RETVAL0]] to i8*
; CHECK-NEXT:    br label [[SIMD_BEGIN_REGION0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.begin.region:
; CHECK-NEXT:    [[ENTRY_REGION0:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.SIMDLEN"(i32 16) ]
; CHECK-NEXT:    br label [[SIMD_LOOP_PREHEADER0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.preheader:
; CHECK-NEXT:    br label [[SIMD_LOOP_HEADER0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.header:
; CHECK-NEXT:    [[INDEX0:%.*]] = phi i32 [ 0, [[SIMD_LOOP_PREHEADER0]] ], [ [[INDVAR0:%.*]], [[SIMD_LOOP_LATCH0:%.*]] ]
; CHECK-NEXT:    [[VEC_I_CAST_GEP0:%.*]] = getelementptr i32, i32* [[VEC_I_CAST0]], i32 [[INDEX0]]
; CHECK-NEXT:    [[VEC_I_ELEM0:%.*]] = load i32, i32* [[VEC_I_CAST_GEP0]], align 4
; CHECK-NEXT:    [[CMP0:%.*]] = icmp eq i32 [[VEC_I_ELEM0]], 97
; CHECK-NEXT:    [[CMP_ZEXT0:%.*]] = zext i1 [[CMP0]] to i8
; CHECK-NEXT:    [[RET_CAST_GEP0:%.*]] = getelementptr i8, i8* [[RET_CAST0]], i32 [[INDEX0]]
; CHECK-NEXT:    store i8 [[CMP_ZEXT0]], i8* [[RET_CAST_GEP0]], align 1
; CHECK-NEXT:    br label [[SIMD_LOOP_LATCH0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.latch:
; CHECK-NEXT:    [[INDVAR0]] = add nuw i32 [[INDEX0]], 1
; CHECK-NEXT:    [[VL_COND0:%.*]] = icmp ult i32 [[INDVAR0]], 16
; CHECK-NEXT:    br i1 [[VL_COND0]], label [[SIMD_LOOP_HEADER0]], label [[SIMD_END_REGION0:%.*]], !llvm.loop !0
; CHECK-EMPTY:
; CHECK-NEXT:  simd.end.region:
; CHECK-NEXT:    call void @llvm.directive.region.exit(token [[ENTRY_REGION0]]) [ "DIR.OMP.END.SIMD"() ]
; CHECK-NEXT:    br label [[RETURN0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  return:
; CHECK-NEXT:    [[VEC_RET_CAST0:%.*]] = bitcast i8* [[RET_CAST0]] to <16 x i8>*
; CHECK-NEXT:    [[VEC_RET0:%.*]] = load <16 x i8>, <16 x i8>* [[VEC_RET_CAST0]], align 16
; CHECK-NEXT:    ret <16 x i8> [[VEC_RET0]]
; CHECK-NEXT:  }
;
entry:
  %cmp = icmp eq i32 %i, 97
  ret i1 %cmp
}

attributes #0 = { noinline nounwind "vector-variants"="_ZGVbN16v__Z3fooj" }
