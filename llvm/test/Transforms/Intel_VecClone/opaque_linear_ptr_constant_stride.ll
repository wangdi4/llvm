; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -passes="vec-clone" -S < %s | FileCheck %s

; Check to see that the constant stride is read from the "vector-variant"
; encoding (e.g., 'l8') and used to generate the correct index offset. The
; llvm.intel.directive.elementsize intrinsic is not needed for constant
; stride cases because the stride value from the encoding is already
; specified in bytes based on the pointee type and can be used directly
; in the i8* gep. Also check that the intrinsic is removed from the
; cloned function.

; CHECK-NOT: call void @llvm.intel.directive.elementsize

define dso_local noundef i32 @_Z3fooPi(ptr noundef %x) local_unnamed_addr #0 {
;
; CHECK-LABEL:  simd.loop.header:
; CHECK:         [[INDEX0:%.*]] = phi i32 [ 0, %simd.loop.preheader ], [ [[INDVAR0:%.*]], [[SIMD_LOOP_LATCH0:%.*]] ]
; CHECK-NEXT:    [[STRIDE_BYTES0:%.*]] = mul i32 8, [[INDEX0]]
; CHECK-NEXT:    [[LOAD_X_GEP0:%.*]] = getelementptr i8, ptr [[LOAD_X0:%.*]], i32 [[STRIDE_BYTES0]]
;
entry:
  tail call void @llvm.intel.directive.elementsize(ptr %x, i64 4)
  %0 = load i32, ptr %x, align 4
  %add = add nsw i32 %0, 1
  ret i32 %add
}

declare void @llvm.intel.directive.elementsize(ptr, i64 immarg) #1

attributes #0 = { "vector-variants"="_ZGVbN8l8__Z3fooPi" }
