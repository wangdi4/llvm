; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; Check that byval arguments are not re-allocated by VecClone pass.

; RUN: opt -opaque-pointers=0 -passes="vec-clone" -S < %s | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.pair = type { i32, i32 }

define i32 @foo(%struct.pair* byval(%struct.pair) %x) #0 {
; CHECK-LABEL: @_ZGVbN4u_foo(
; CHECK-NEXT:    [[VEC_RETVAL:%.*]] = alloca <4 x i32>
; CHECK-NEXT:    [[RET_CAST:%.*]] = bitcast <4 x i32>* [[VEC_RETVAL]] to i32*
; CHECK-NEXT:    br label [[SIMD_BEGIN_REGION:%.*]]
; CHECK:       simd.begin.region:
; CHECK-NEXT:    [[ENTRY_REGION:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.SIMDLEN"(i32 4), "QUAL.OMP.UNIFORM:TYPED"(%struct.pair* [[X:%.*]], %struct.pair zeroinitializer, i32 1) ]
; CHECK-NEXT:    br label [[SIMD_LOOP_PREHEADER:%.*]]
; CHECK:       simd.loop.preheader:
; CHECK-NEXT:    br label [[SIMD_LOOP_HEADER:%.*]]
; CHECK:       simd.loop.header:
; CHECK-NEXT:    [[INDEX:%.*]] = phi i32 [ 0, [[SIMD_LOOP_PREHEADER]] ], [ [[INDVAR:%.*]], [[SIMD_LOOP_LATCH:%.*]] ]
; CHECK-NEXT:    [[FST_P:%.*]] = getelementptr inbounds [[STRUCT_PAIR:%.*]], %struct.pair* [[X]], i32 0, i32 0
; CHECK-NEXT:    [[SND_P:%.*]] = getelementptr inbounds [[STRUCT_PAIR]], %struct.pair* [[X]], i32 0, i32 1
; CHECK-NEXT:    [[FST:%.*]] = load i32, i32* [[FST_P]], align 4
; CHECK-NEXT:    [[SND:%.*]] = load i32, i32* [[SND_P]], align 4
; CHECK-NEXT:    [[SUM:%.*]] = add i32 [[FST]], [[SND]]
; CHECK-NEXT:    [[RET_CAST_GEP:%.*]] = getelementptr i32, i32* [[RET_CAST]], i32 [[INDEX]]
; CHECK-NEXT:    store i32 [[SUM]], i32* [[RET_CAST_GEP]]
; CHECK-NEXT:    br label [[SIMD_LOOP_LATCH]]
; CHECK:       simd.loop.latch:
; CHECK-NEXT:    [[INDVAR]] = add nuw i32 [[INDEX]], 1
; CHECK-NEXT:    [[VL_COND:%.*]] = icmp ult i32 [[INDVAR]], 4
; CHECK-NEXT:    br i1 [[VL_COND]], label [[SIMD_LOOP_HEADER]], label [[SIMD_END_REGION:%.*]], !llvm.loop !0
; CHECK:       simd.end.region:
; CHECK-NEXT:    call void @llvm.directive.region.exit(token [[ENTRY_REGION]]) [ "DIR.OMP.END.SIMD"() ]
; CHECK-NEXT:    br label [[RETURN:%.*]]
; CHECK:       return:
; CHECK-NEXT:    [[VEC_RET:%.*]] = load <4 x i32>, <4 x i32>* [[VEC_RETVAL]]
; CHECK-NEXT:    ret <4 x i32> [[VEC_RET]]
;
  %fst.p = getelementptr inbounds %struct.pair, %struct.pair* %x, i32 0, i32 0
  %snd.p = getelementptr inbounds %struct.pair, %struct.pair* %x, i32 0, i32 1
  %fst = load i32, i32* %fst.p, align 4
  %snd = load i32, i32* %snd.p, align 4
  %sum = add i32 %fst, %snd
  ret i32 %sum
}

attributes #0 = { nounwind uwtable "vector-variants"="_ZGVbN4u_foo" }
