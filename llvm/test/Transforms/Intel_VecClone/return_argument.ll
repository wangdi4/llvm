; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -vec-clone -S < %s | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define i32 @bar(i32 %gid) #0 {
; CHECK:  define <4 x i32> @_ZGVbN4v_bar(<4 x i32> [[GID0:%.*]]) #1 {
; CHECK-NEXT:    [[VEC_GID0:%.*]] = alloca <4 x i32>, align 16
; CHECK-NEXT:    [[VEC_GID_CAST0:%.*]] = bitcast <4 x i32>* [[VEC_GID0]] to i32*
; CHECK-NEXT:    store <4 x i32> [[GID0]], <4 x i32>* [[VEC_GID0]], align 16
; CHECK-NEXT:    br label [[SIMD_BEGIN_REGION0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.begin.region:
; CHECK-NEXT:    [[ENTRY_REGION0:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.SIMDLEN"(i32 4) ]
; CHECK-NEXT:    br label [[SIMD_LOOP_PREHEADER0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.preheader:
; CHECK-NEXT:    br label [[SIMD_LOOP0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop:
; CHECK-NEXT:    [[INDEX0:%.*]] = phi i32 [ 0, [[SIMD_LOOP_PREHEADER0]] ], [ [[INDVAR0:%.*]], [[SIMD_LOOP_EXIT0:%.*]] ]
; CHECK-NEXT:    br label [[SIMD_LOOP_EXIT0]]
; CHECK-EMPTY:
; CHECK-NEXT:  simd.loop.exit:
; CHECK-NEXT:    [[INDVAR0]] = add nuw i32 [[INDEX0]], 1
; CHECK-NEXT:    [[VL_COND0:%.*]] = icmp ult i32 [[INDVAR0]], 4
; CHECK-NEXT:    br i1 [[VL_COND0]], label [[SIMD_LOOP0]], label [[SIMD_END_REGION0:%.*]], !llvm.loop !0
; CHECK-EMPTY:
; CHECK-NEXT:  simd.end.region:
; CHECK-NEXT:    call void @llvm.directive.region.exit(token [[ENTRY_REGION0]]) [ "DIR.OMP.END.SIMD"() ]
; CHECK-NEXT:    br label [[RETURN0:%.*]]
; CHECK-EMPTY:
; CHECK-NEXT:  return:
; CHECK-NEXT:    [[VEC_VEC_GID_CAST0:%.*]] = bitcast i32* [[VEC_GID_CAST0]] to <4 x i32>*
; CHECK-NEXT:    [[VEC_RET0:%.*]] = load <4 x i32>, <4 x i32>* [[VEC_VEC_GID_CAST0]], align 16
; CHECK-NEXT:    ret <4 x i32> [[VEC_RET0]]
; CHECK-NEXT:  }
;
  ret i32 %gid
}

attributes #0 = { nounwind uwtable "vector-variants"="_ZGVbN4v_" }
