; NOTE: Assertions have been autogenerated by utils/intel_update_vplan_checks.py
; RUN: opt -passes="vec-clone" -S < %s | FileCheck %s

; Check to see that pointee type size is read from the llvm.intel.directive.elementsize
; intrinsic and used to generate the correct index offset using variable stride. Also
; check to see that the directive is removed from the original function.

; CHECK-NOT: call void @llvm.intel.directive.elementsize

define dso_local noundef i64 @_Z3fooiPl(i32 noundef %c, ptr noundef %x) local_unnamed_addr #0 {
;
; CHECK-LABEL:  simd.loop.header:
; CHECK:         [[INDEX0:%.*]] = phi i32 [ 0, %simd.loop.preheader ], [ [[INDVAR0:%.*]], [[SIMD_LOOP_LATCH0:%.*]] ]
; CHECK-NEXT:    [[TMP0:%.*]] = sext i32 [[LOAD_C0:%.*]] to i64
; CHECK-NEXT:    [[TMP1:%.*]] = mul i64 [[TMP0]], 8
; CHECK-NEXT:    [[TMP2:%.*]] = trunc i64 [[TMP1]] to i32
; CHECK-NEXT:    [[STRIDE_BYTES0:%.*]] = mul i32 [[TMP2]], [[INDEX0]]
; CHECK-NEXT:    [[LOAD_X_GEP0:%.*]] = getelementptr i8, ptr [[LOAD_X0:%.*]], i32 [[STRIDE_BYTES0]]
;
entry:
  tail call void @llvm.intel.directive.elementsize(ptr %x, i64 8)
  %0 = load i64, ptr %x, align 8
  %add = add nsw i64 %0, 1
  ret i64 %add
}

declare void @llvm.intel.directive.elementsize(ptr, i64 immarg)

attributes #0 = { "vector-variants"="_ZGVbN8uls0__Z3fooiPl" }
