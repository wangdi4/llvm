; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; REQUIRES: intel_feature_markercount
; RUN: opt %s -O1 -S -function-marker-count=me -mtriple=x86_64 -stop-before=loop-instsimplify | FileCheck %s
; RUN: opt %s -O1 -S -function-marker-count=me -mtriple=x86_64 -stop-before=inliner-wrapper | FileCheck %s
; RUN: opt %s -O2 -S -function-marker-count=me -mtriple=x86_64 | FileCheck %s

define i32 @f() {
; CHECK-LABEL: @f(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    tail call void @llvm.mark.prolog()
; CHECK-NEXT:    tail call void asm sideeffect "nop", ""() #[[ATTR2:[0-9]+]]
; CHECK-NEXT:    tail call void @llvm.mark.epilog()
; CHECK-NEXT:    ret i32 0
;
entry:
  call void asm sideeffect "nop", ""()
  ret i32 0
}

define i32 @g(i1 %cmp) {
; CHECK-LABEL: @g(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    tail call void @llvm.mark.prolog()
; CHECK-NEXT:    br i1 [[CMP:%.*]], label [[FOR_COND1:%.*]], label [[FOR_END6:%.*]]
; CHECK:       for.cond1:
; CHECK-NEXT:    br label [[FOR_COND1]]
; CHECK:       for.end6:
; CHECK-NEXT:    tail call void @llvm.mark.epilog()
; CHECK-NEXT:    ret i32 0
;
entry:
  br i1 %cmp, label %for.cond1, label %for.end6

for.cond1:                                        ; preds = %for.cond1, %entry
  br label %for.cond1

for.end6:                                         ; preds = %entry
  ret i32 0
}
