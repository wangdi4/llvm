; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S -passes="mergeicmps" < %s | FileCheck %s

; Same as no-gep-other-work.ll, but we have overloaded memcmp with an
; incompatible version (64-bit size, but the target is 32-bits).
; We should not call memcmp in this case.

target triple = "i386-unknown-linux-gnu"
target datalayout = "e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-f64:32:64-f80:32-n8:16:32-S128"

declare void @other_work()

declare i32 @memcmp(i8*, i8*, i64) local_unnamed_addr

define i1 @test(i8* dereferenceable(2) %arg, i8* dereferenceable(2) %arg1) {
; CHECK-LABEL: @test(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @other_work()
; CHECK-NEXT:    [[ARG_OFF:%.*]] = getelementptr inbounds i8, i8* [[ARG:%.*]], i64 1
; CHECK-NEXT:    [[ARG1_OFF:%.*]] = getelementptr inbounds i8, i8* [[ARG1:%.*]], i64 1
; CHECK-NEXT:    [[ARG_OFF_VAL:%.*]] = load i8, i8* [[ARG_OFF]], align 1
; CHECK-NEXT:    [[ARG1_OFF_VAL:%.*]] = load i8, i8* [[ARG1_OFF]], align 1
; CHECK-NEXT:    [[CMP_OFF:%.*]] = icmp eq i8 [[ARG_OFF_VAL]], [[ARG1_OFF_VAL]]
; CHECK-NEXT:    br i1 [[CMP_OFF]], label [[IF:%.*]], label [[JOIN:%.*]]
; CHECK:       if:
; CHECK-NEXT:    [[ARG_VAL:%.*]] = load i8, i8* [[ARG]], align 1
; CHECK-NEXT:    [[ARG1_VAL:%.*]] = load i8, i8* [[ARG1]], align 1
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i8 [[ARG_VAL]], [[ARG1_VAL]]
; CHECK-NEXT:    br label [[JOIN]]
; CHECK:       join:
; CHECK-NEXT:    [[PHI:%.*]] = phi i1 [ false, [[ENTRY:%.*]] ], [ [[CMP]], [[IF]] ]
; CHECK-NEXT:    ret i1 [[PHI]]
;
entry:
  call void @other_work()
  %arg.off = getelementptr inbounds i8, i8* %arg, i64 1
  %arg1.off = getelementptr inbounds i8, i8* %arg1, i64 1
  %arg.off.val = load i8, i8* %arg.off
  %arg1.off.val = load i8, i8* %arg1.off
  %cmp.off = icmp eq i8 %arg.off.val, %arg1.off.val
  br i1 %cmp.off, label %if, label %join

if:
  %arg.val = load i8, i8* %arg
  %arg1.val = load i8, i8* %arg1
  %cmp = icmp eq i8 %arg.val, %arg1.val
  br label %join

join:
  %phi = phi i1 [ false, %entry ], [ %cmp, %if ]
  ret i1 %phi
}

