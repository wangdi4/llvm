; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -enable-intel-advanced-opts -intel-libirc-allowed -S -passes 'unaligned-nontemporal,verify' < %s | FileCheck %s
target triple = "x86_64-unknown-linux-gnu"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"

; This test checks that stores are assigned correctly to multiple multi-store
; blocks covering different parts of the same array.

define void @example(ptr %dest) #0 {
; CHECK-LABEL: @example(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[DEST2:%.*]] = ptrtoint ptr [[DEST:%.*]] to i64
; CHECK-NEXT:    [[ADDR_NT_STORE_ALLOCA:%.*]] = alloca i8, i64 4184, align 64
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[__NONTEMPORAL_BUFFER_DATA:%.*]], ptr [[ADDR_NT_STORE_ALLOCA]], i32 0, i32 4
; CHECK-NEXT:    [[ADDR1_NT_STORE_ALLOCA:%.*]] = alloca i8, i64 4184, align 64
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[__NONTEMPORAL_BUFFER_DATA]], ptr [[ADDR1_NT_STORE_ALLOCA]], i32 0, i32 4
; CHECK-NEXT:    [[DEST1:%.*]] = getelementptr inbounds <8 x i64>, ptr [[DEST]], i64 10000
; CHECK-NEXT:    [[DEST14:%.*]] = ptrtoint ptr [[DEST1]] to i64
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr [[__NONTEMPORAL_BUFFER_DATA]], ptr [[ADDR_NT_STORE_ALLOCA]], i32 0, i32 1
; CHECK-NEXT:    store i64 [[DEST2]], ptr [[TMP2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = and i64 [[DEST2]], 63
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr [[__NONTEMPORAL_BUFFER_DATA]], ptr [[ADDR_NT_STORE_ALLOCA]], i32 0, i32 2
; CHECK-NEXT:    store i64 [[TMP3]], ptr [[TMP4]], align 8
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr [[__NONTEMPORAL_BUFFER_DATA]], ptr [[ADDR_NT_STORE_ALLOCA]], i32 0, i32 3
; CHECK-NEXT:    store i64 0, ptr [[TMP5]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr [[__NONTEMPORAL_BUFFER_DATA]], ptr [[ADDR1_NT_STORE_ALLOCA]], i32 0, i32 1
; CHECK-NEXT:    store i64 [[DEST14]], ptr [[TMP6]], align 8
; CHECK-NEXT:    [[TMP7:%.*]] = and i64 [[DEST14]], 63
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr [[__NONTEMPORAL_BUFFER_DATA]], ptr [[ADDR1_NT_STORE_ALLOCA]], i32 0, i32 2
; CHECK-NEXT:    store i64 [[TMP7]], ptr [[TMP8]], align 8
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr [[__NONTEMPORAL_BUFFER_DATA]], ptr [[ADDR1_NT_STORE_ALLOCA]], i32 0, i32 3
; CHECK-NEXT:    store i64 0, ptr [[TMP9]], align 8
; CHECK-NEXT:    br label [[LOOP:%.*]]
; CHECK:       loop:
; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[ENTRY:%.*]] ], [ [[INDEX_NEXT_1:%.*]], [[LOOP_SPLIT_SPLIT:%.*]] ]
; CHECK-NEXT:    [[ADDR_NT_BUF_IDX:%.*]] = phi i64 [ 0, [[ENTRY]] ], [ [[ADDR_NT_BUF_POST_PHI:%.*]], [[LOOP_SPLIT_SPLIT]] ]
; CHECK-NEXT:    [[ADDR1_NT_BUF_IDX:%.*]] = phi i64 [ 0, [[ENTRY]] ], [ [[ADDR1_NT_BUF_POST_PHI:%.*]], [[LOOP_SPLIT_SPLIT]] ]
; CHECK-NEXT:    [[INDEX_NEXT:%.*]] = add nuw nsw i64 [[INDEX]], 1
; CHECK-NEXT:    [[SPLAT:%.*]] = insertelement <8 x i64> zeroinitializer, i64 [[INDEX]], i32 0
; CHECK-NEXT:    [[ADDR:%.*]] = getelementptr inbounds <8 x i64>, ptr [[DEST]], i64 [[INDEX]]
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr [2 x <8 x i64>], ptr [[TMP0]], i64 [[ADDR_NT_BUF_IDX]], i64 0
; CHECK-NEXT:    store <8 x i64> [[SPLAT]], ptr [[TMP10]], align 8
; CHECK-NEXT:    [[ADDR1:%.*]] = getelementptr inbounds <8 x i64>, ptr [[DEST1]], i64 [[INDEX]]
; CHECK-NEXT:    [[TMP11:%.*]] = getelementptr [2 x <8 x i64>], ptr [[TMP1]], i64 [[ADDR1_NT_BUF_IDX]], i64 0
; CHECK-NEXT:    store <8 x i64> [[SPLAT]], ptr [[TMP11]], align 8
; CHECK-NEXT:    [[INDEX_NEXT_1]] = add nuw nsw i64 [[INDEX_NEXT]], 1
; CHECK-NEXT:    [[SPLAT_1:%.*]] = insertelement <8 x i64> zeroinitializer, i64 [[INDEX_NEXT]], i32 0
; CHECK-NEXT:    [[ADDR_1:%.*]] = getelementptr inbounds <8 x i64>, ptr [[DEST]], i64 [[INDEX_NEXT]]
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr [2 x <8 x i64>], ptr [[TMP0]], i64 [[ADDR_NT_BUF_IDX]], i64 1
; CHECK-NEXT:    store <8 x i64> [[SPLAT_1]], ptr [[TMP12]], align 8
; CHECK-NEXT:    [[ADDR_NT_BUF_IDX3:%.*]] = add nuw nsw i64 [[ADDR_NT_BUF_IDX]], 1
; CHECK-NEXT:    [[TMP13:%.*]] = icmp eq i64 32, [[ADDR_NT_BUF_IDX3]]
; CHECK-NEXT:    br i1 [[TMP13]], label [[ADDR_NT_BUF_DRAIN:%.*]], label [[LOOP_SPLIT:%.*]]
; CHECK:       addr.nt_buf_drain:
; CHECK-NEXT:    call void @__libirc_nontemporal_store(ptr [[ADDR_NT_STORE_ALLOCA]], i64 4096, i32 0)
; CHECK-NEXT:    br label [[LOOP_SPLIT]]
; CHECK:       loop.split:
; CHECK-NEXT:    [[ADDR_NT_BUF_POST_PHI]] = phi i64 [ [[ADDR_NT_BUF_IDX3]], [[LOOP]] ], [ 0, [[ADDR_NT_BUF_DRAIN]] ]
; CHECK-NEXT:    [[ADDR1_1:%.*]] = getelementptr inbounds <8 x i64>, ptr [[DEST1]], i64 [[INDEX_NEXT]]
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr [2 x <8 x i64>], ptr [[TMP1]], i64 [[ADDR1_NT_BUF_IDX]], i64 1
; CHECK-NEXT:    store <8 x i64> [[SPLAT_1]], ptr [[TMP14]], align 8
; CHECK-NEXT:    [[ADDR1_NT_BUF_IDX5:%.*]] = add nuw nsw i64 [[ADDR1_NT_BUF_IDX]], 1
; CHECK-NEXT:    [[TMP15:%.*]] = icmp eq i64 32, [[ADDR1_NT_BUF_IDX5]]
; CHECK-NEXT:    br i1 [[TMP15]], label [[ADDR1_NT_BUF_DRAIN:%.*]], label [[LOOP_SPLIT_SPLIT]]
; CHECK:       addr1.nt_buf_drain:
; CHECK-NEXT:    call void @__libirc_nontemporal_store(ptr [[ADDR1_NT_STORE_ALLOCA]], i64 4096, i32 0)
; CHECK-NEXT:    br label [[LOOP_SPLIT_SPLIT]]
; CHECK:       loop.split.split:
; CHECK-NEXT:    [[ADDR1_NT_BUF_POST_PHI]] = phi i64 [ [[ADDR1_NT_BUF_IDX5]], [[LOOP_SPLIT]] ], [ 0, [[ADDR1_NT_BUF_DRAIN]] ]
; CHECK-NEXT:    [[COND_1:%.*]] = icmp eq i64 [[INDEX_NEXT_1]], 10000
; CHECK-NEXT:    br i1 [[COND_1]], label [[EXIT:%.*]], label [[LOOP]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK:       exit:
; CHECK-NEXT:    [[TMP16:%.*]] = mul i64 [[ADDR1_NT_BUF_POST_PHI]], 128
; CHECK-NEXT:    call void @__libirc_nontemporal_store(ptr [[ADDR1_NT_STORE_ALLOCA]], i64 [[TMP16]], i32 1)
; CHECK-NEXT:    [[TMP17:%.*]] = mul i64 [[ADDR_NT_BUF_POST_PHI]], 128
; CHECK-NEXT:    call void @__libirc_nontemporal_store(ptr [[ADDR_NT_STORE_ALLOCA]], i64 [[TMP17]], i32 1)
; CHECK-NEXT:    ret void
;
entry:
  %dest1 = getelementptr inbounds <8 x i64>, ptr %dest, i64 10000
  br label %loop

loop:                                             ; preds = %loop, %entry
  %index = phi i64 [ 0, %entry ], [ %index.next.1, %loop ]
  %index.next = add nuw nsw i64 %index, 1
  %splat = insertelement <8 x i64> zeroinitializer, i64 %index, i32 0
  %addr = getelementptr inbounds <8 x i64>, ptr %dest, i64 %index
  store <8 x i64> %splat, ptr %addr, align 16, !nontemporal !0
  %addr1 = getelementptr inbounds <8 x i64>, ptr %dest1, i64 %index
  store <8 x i64> %splat, ptr %addr1, align 16, !nontemporal !0
  %index.next.1 = add nuw nsw i64 %index.next, 1
  %splat.1 = insertelement <8 x i64> zeroinitializer, i64 %index.next, i32 0
  %addr.1 = getelementptr inbounds <8 x i64>, ptr %dest, i64 %index.next
  store <8 x i64> %splat.1, ptr %addr.1, align 16, !nontemporal !0
  %addr1.1 = getelementptr inbounds <8 x i64>, ptr %dest1, i64 %index.next
  store <8 x i64> %splat.1, ptr %addr1.1, align 16, !nontemporal !0
  %cond.1 = icmp eq i64 %index.next.1, 10000
  br i1 %cond.1, label %exit, label %loop, !llvm.loop !1

exit:                                             ; preds = %loop
  ret void
}

attributes #0 = { "target-features"="+avx512f" }

!0 = !{i32 1}
!1 = distinct !{!1, !2}
!2 = !{!"llvm.loop.unroll.disable"}
