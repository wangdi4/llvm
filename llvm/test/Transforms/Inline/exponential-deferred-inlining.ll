; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; INTEL_CUSTOMIZATION
; We need to call out the new pass manager explicitly, because it is not yet
; the default on xmain.
; RUN: opt -S -passes=inline < %s | FileCheck %s
; end INTEL_CUSTOMIZATION

declare void @foo()

define internal void @f1() {
  call void @foo()
  call void @foo()
  call void @foo()
  call void @foo()
  call void @foo()
  call void @foo()
  call void @foo()
  call void @foo()
  call void @foo()
  call void @foo()
  call void @foo()
  call void @foo()
  ret void
}

define internal void @f2() {
; CHECK-LABEL: @f2(
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    ret void
;
  call void @f1()
  call void @f1()
  call void @f1()
  ret void
}

define internal void @f3() {
  call void @f2()
  call void @f2()
  ret void
}

define internal void @f4() {
  call void @f3()
  call void @f3()
  ret void
}

define internal void @f5() {
  call void @f4()
  call void @f4()
  ret void
}

define internal void @f6() {
; CHECK-LABEL: @f6(
; CHECK-NEXT:    call void @f2()
; CHECK-NEXT:    call void @f2()
; CHECK-NEXT:    call void @f2()
; CHECK-NEXT:    call void @f2()
; CHECK-NEXT:    call void @f2()
; CHECK-NEXT:    call void @f2()
; CHECK-NEXT:    call void @f2()
; CHECK-NEXT:    call void @f2()
; CHECK-NEXT:    call void @f2()
; CHECK-NEXT:    call void @f2()
; CHECK-NEXT:    call void @f2()
; CHECK-NEXT:    call void @f2()
; CHECK-NEXT:    call void @f2()
; CHECK-NEXT:    call void @f2()
; CHECK-NEXT:    call void @f2()
; CHECK-NEXT:    call void @f2()
; CHECK-NEXT:    ret void
;
  call void @f5()
  call void @f5()
  ret void
}

define void @f7() {
; CHECK-LABEL: @f7(
; CHECK-NEXT:    call void @f6()
; CHECK-NEXT:    call void @f6()
; CHECK-NEXT:    ret void
;
  call void @f6()
  call void @f6()
  ret void
}
