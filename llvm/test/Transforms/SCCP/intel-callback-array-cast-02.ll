; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; This test case checks that the interprocedural sparse conditional constant
; propagation won't be applied because the array was casted to a different
; type.

; RUN: opt -passes=ipsccp -S %s | FileCheck %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%DummyStruct = type { [2 x i8] }
%TestStruct = type { [16 x i8], [16 x i8], i32, ptr }
%TestStruct.1 = type { [16 x i8], [16 x i8], i32, ptr }
@globArray = internal global [1000 x %TestStruct] zeroinitializer

; Check that the GEP in @callback wasn't changed when opaque is false.
; (opaque pointers: the 0 0 GEP is deleted)
define internal void @callback(ptr %ID, ptr %Arr) {
; CHECK-LABEL: @callback(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret void
;
entry:
  ret void
}

; Check that the parameter in the call site for @callback wasn't updated
define internal void @foo(ptr %Arr) {
; CHECK-LABEL: @foo(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void (i32, ptr, ...) @broker(i32 3, ptr @callback, ptr @globArray)
; CHECK-NEXT:    ret void
;
entry:
  call void (i32, ptr, ...) @broker(i32 3, ptr @callback, ptr %Arr)
  ret void
}

define void @bar() {
; CHECK-LABEL: @bar(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @foo(ptr @globArray)
; CHECK-NEXT:    ret void
;
entry:
  call void @foo(ptr @globArray)
  ret void
}

declare !callback !0 void @broker(i32, ptr, ...)

!0 = !{!1}
!1 = !{i64 1, i64 -1, i1 true}

