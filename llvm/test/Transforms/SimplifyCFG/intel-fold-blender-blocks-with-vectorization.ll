; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes=simplifycfg -mtriple=i686-linux -mattr=+avx2 -enable-intel-advanced-opts=true -mattr=-prefer-256-bit %s -S 2>&1 | FileCheck %s --check-prefixes=CHECK


target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VBVHNode = type { [6 x float], %struct.VBVHNode*, %struct.VBVHNode* }
%struct.Isect = type { [3 x float], [3 x float], float, [3 x float], [3 x float], [6 x i32], [3 x float], i32, i32, i32, i32, i8*, float, float, i32, %struct.anon, %struct.anon, %struct.RayObject*, %struct.RayHint* }
%struct.anon = type { i8*, i8* }
%struct.RayObject = type { %struct.RayObjectAPI*, %struct.RayObjectControl }
%struct.RayObjectAPI = type { i32 (%struct.RayObject*, %struct.Isect*)*, void (%struct.RayObject*, %struct.RayObject*)*, void (%struct.RayObject*)*, void (%struct.RayObject*)*, void (%struct.RayObject*, float*, float*)*, float (%struct.RayObject*)*, void (%struct.RayObject*, %struct.RayHint*, float*, float*)* }
%struct.RayObjectControl = type { i8*, i32 (i8*)* }
%struct.RayHint = type { %union.anon }
%union.anon = type { %struct.LCTSHint }
%struct.LCTSHint = type { i32, [256 x %struct.RayObject*] }

; Function Attrs: inlinehint norecurse nosync nounwind readonly uwtable willreturn mustprogress
define hidden fastcc i32 @_ZL17bvh_node_hit_testI8VBVHNodeEiPT_P5Isect(%struct.VBVHNode* nocapture readonly %node, %struct.Isect* nocapture readonly %isec) unnamed_addr #0 {
; CHECK-LABEL: @_ZL17bvh_node_hit_testI8VBVHNodeEiPT_P5Isect(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[BB:%.*]] = getelementptr inbounds [[STRUCT_VBVHNODE:%.*]], %struct.VBVHNode* [[NODE:%.*]], i64 0, i32 0, !intel-tbaa !5
; CHECK-NEXT:    [[ARRAYDECAY:%.*]] = getelementptr inbounds [6 x float], [6 x float]* [[BB]], i64 0, i64 0
; CHECK-NEXT:    [[BV_INDEX_I:%.*]] = getelementptr inbounds [[STRUCT_ISECT:%.*]], %struct.Isect* [[ISEC:%.*]], i64 0, i32 5, !intel-tbaa !12
; CHECK-NEXT:    [[ARRAYIDX_I:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[BV_INDEX_I]], i64 0, i64 0, !intel-tbaa !21
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, i32* [[ARRAYIDX_I]], align 4, !tbaa [[TBAA22:![0-9]+]]
; CHECK-NEXT:    [[IDXPROM_I:%.*]] = sext i32 [[TMP0]] to i64
; CHECK-NEXT:    [[PTRIDX_I:%.*]] = getelementptr inbounds float, float* [[ARRAYDECAY]], i64 [[IDXPROM_I]]
; CHECK-NEXT:    [[TMP1:%.*]] = load float, float* [[PTRIDX_I]], align 4, !tbaa [[TBAA23:![0-9]+]]
; CHECK-NEXT:    [[START_I:%.*]] = getelementptr inbounds [[STRUCT_ISECT]], %struct.Isect* [[ISEC]], i64 0, i32 0, !intel-tbaa !24
; CHECK-NEXT:    [[ARRAYIDX1_I:%.*]] = getelementptr inbounds [3 x float], [3 x float]* [[START_I]], i64 0, i64 0, !intel-tbaa !25
; CHECK-NEXT:    [[TMP2:%.*]] = load float, float* [[ARRAYIDX1_I]], align 8, !tbaa [[TBAA26:![0-9]+]]
; CHECK-NEXT:    [[SUB_I:%.*]] = fsub fast float [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[IDOT_AXIS_I:%.*]] = getelementptr inbounds [[STRUCT_ISECT]], %struct.Isect* [[ISEC]], i64 0, i32 6, !intel-tbaa !27
; CHECK-NEXT:    [[ARRAYIDX2_I:%.*]] = getelementptr inbounds [3 x float], [3 x float]* [[IDOT_AXIS_I]], i64 0, i64 0, !intel-tbaa !25
; CHECK-NEXT:    [[TMP3:%.*]] = load float, float* [[ARRAYIDX2_I]], align 4, !tbaa [[TBAA28:![0-9]+]]
; CHECK-NEXT:    [[MUL_I:%.*]] = fmul fast float [[SUB_I]], [[TMP3]]
; CHECK-NEXT:    [[ARRAYIDX4_I:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[BV_INDEX_I]], i64 0, i64 1, !intel-tbaa !21
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, i32* [[ARRAYIDX4_I]], align 4, !tbaa [[TBAA22]]
; CHECK-NEXT:    [[IDXPROM5_I:%.*]] = sext i32 [[TMP4]] to i64
; CHECK-NEXT:    [[PTRIDX6_I:%.*]] = getelementptr inbounds float, float* [[ARRAYDECAY]], i64 [[IDXPROM5_I]]
; CHECK-NEXT:    [[TMP5:%.*]] = load float, float* [[PTRIDX6_I]], align 4, !tbaa [[TBAA23]]
; CHECK-NEXT:    [[SUB9_I:%.*]] = fsub fast float [[TMP5]], [[TMP2]]
; CHECK-NEXT:    [[MUL12_I:%.*]] = fmul fast float [[SUB9_I]], [[TMP3]]
; CHECK-NEXT:    [[ARRAYIDX14_I:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[BV_INDEX_I]], i64 0, i64 2, !intel-tbaa !21
; CHECK-NEXT:    [[TMP6:%.*]] = load i32, i32* [[ARRAYIDX14_I]], align 4, !tbaa [[TBAA22]]
; CHECK-NEXT:    [[IDXPROM15_I:%.*]] = sext i32 [[TMP6]] to i64
; CHECK-NEXT:    [[PTRIDX16_I:%.*]] = getelementptr inbounds float, float* [[ARRAYDECAY]], i64 [[IDXPROM15_I]]
; CHECK-NEXT:    [[TMP7:%.*]] = load float, float* [[PTRIDX16_I]], align 4, !tbaa [[TBAA23]]
; CHECK-NEXT:    [[ARRAYIDX18_I:%.*]] = getelementptr inbounds [3 x float], [3 x float]* [[START_I]], i64 0, i64 1, !intel-tbaa !25
; CHECK-NEXT:    [[TMP8:%.*]] = load float, float* [[ARRAYIDX18_I]], align 4, !tbaa [[TBAA26]]
; CHECK-NEXT:    [[SUB19_I:%.*]] = fsub fast float [[TMP7]], [[TMP8]]
; CHECK-NEXT:    [[ARRAYIDX21_I:%.*]] = getelementptr inbounds [3 x float], [3 x float]* [[IDOT_AXIS_I]], i64 0, i64 1, !intel-tbaa !25
; CHECK-NEXT:    [[TMP9:%.*]] = load float, float* [[ARRAYIDX21_I]], align 4, !tbaa [[TBAA28]]
; CHECK-NEXT:    [[MUL22_I:%.*]] = fmul fast float [[SUB19_I]], [[TMP9]]
; CHECK-NEXT:    [[ARRAYIDX24_I:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[BV_INDEX_I]], i64 0, i64 3, !intel-tbaa !21
; CHECK-NEXT:    [[TMP10:%.*]] = load i32, i32* [[ARRAYIDX24_I]], align 4, !tbaa [[TBAA22]]
; CHECK-NEXT:    [[IDXPROM25_I:%.*]] = sext i32 [[TMP10]] to i64
; CHECK-NEXT:    [[PTRIDX26_I:%.*]] = getelementptr inbounds float, float* [[ARRAYDECAY]], i64 [[IDXPROM25_I]]
; CHECK-NEXT:    [[TMP11:%.*]] = load float, float* [[PTRIDX26_I]], align 4, !tbaa [[TBAA23]]
; CHECK-NEXT:    [[SUB29_I:%.*]] = fsub fast float [[TMP11]], [[TMP8]]
; CHECK-NEXT:    [[MUL32_I:%.*]] = fmul fast float [[SUB29_I]], [[TMP9]]
; CHECK-NEXT:    [[ARRAYIDX34_I:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[BV_INDEX_I]], i64 0, i64 4, !intel-tbaa !21
; CHECK-NEXT:    [[TMP12:%.*]] = load i32, i32* [[ARRAYIDX34_I]], align 4, !tbaa [[TBAA22]]
; CHECK-NEXT:    [[IDXPROM35_I:%.*]] = sext i32 [[TMP12]] to i64
; CHECK-NEXT:    [[PTRIDX36_I:%.*]] = getelementptr inbounds float, float* [[ARRAYDECAY]], i64 [[IDXPROM35_I]]
; CHECK-NEXT:    [[TMP13:%.*]] = load float, float* [[PTRIDX36_I]], align 4, !tbaa [[TBAA23]]
; CHECK-NEXT:    [[ARRAYIDX38_I:%.*]] = getelementptr inbounds [3 x float], [3 x float]* [[START_I]], i64 0, i64 2, !intel-tbaa !25
; CHECK-NEXT:    [[TMP14:%.*]] = load float, float* [[ARRAYIDX38_I]], align 8, !tbaa [[TBAA26]]
; CHECK-NEXT:    [[SUB39_I:%.*]] = fsub fast float [[TMP13]], [[TMP14]]
; CHECK-NEXT:    [[ARRAYIDX41_I:%.*]] = getelementptr inbounds [3 x float], [3 x float]* [[IDOT_AXIS_I]], i64 0, i64 2, !intel-tbaa !25
; CHECK-NEXT:    [[TMP15:%.*]] = load float, float* [[ARRAYIDX41_I]], align 4, !tbaa [[TBAA28]]
; CHECK-NEXT:    [[MUL42_I:%.*]] = fmul fast float [[SUB39_I]], [[TMP15]]
; CHECK-NEXT:    [[ARRAYIDX44_I:%.*]] = getelementptr inbounds [6 x i32], [6 x i32]* [[BV_INDEX_I]], i64 0, i64 5, !intel-tbaa !21
; CHECK-NEXT:    [[TMP16:%.*]] = load i32, i32* [[ARRAYIDX44_I]], align 4, !tbaa [[TBAA22]]
; CHECK-NEXT:    [[IDXPROM45_I:%.*]] = sext i32 [[TMP16]] to i64
; CHECK-NEXT:    [[PTRIDX46_I:%.*]] = getelementptr inbounds float, float* [[ARRAYDECAY]], i64 [[IDXPROM45_I]]
; CHECK-NEXT:    [[TMP17:%.*]] = load float, float* [[PTRIDX46_I]], align 4, !tbaa [[TBAA23]]
; CHECK-NEXT:    [[SUB49_I:%.*]] = fsub fast float [[TMP17]], [[TMP14]]
; CHECK-NEXT:    [[MUL52_I:%.*]] = fmul fast float [[SUB49_I]], [[TMP15]]
; CHECK-NEXT:    [[CMP_I:%.*]] = fcmp fast ogt float [[MUL_I]], [[MUL32_I]]
; CHECK-NEXT:    [[CMP53_I:%.*]] = fcmp fast olt float [[MUL12_I]], [[MUL22_I]]
; CHECK-NEXT:    [[OR_COND129_I:%.*]] = select i1 [[CMP_I]], i1 true, i1 [[CMP53_I]]
; CHECK-NEXT:    [[CMP55_I:%.*]] = fcmp fast ogt float [[MUL_I]], [[MUL52_I]]
; CHECK-NEXT:    [[OR_COND130_I:%.*]] = select i1 [[OR_COND129_I]], i1 true, i1 [[CMP55_I]]
; CHECK-NEXT:    [[CMP57_I:%.*]] = fcmp fast olt float [[MUL12_I]], [[MUL42_I]]
; CHECK-NEXT:    [[OR_COND131_I:%.*]] = select i1 [[OR_COND130_I]], i1 true, i1 [[CMP57_I]]
; CHECK-NEXT:    [[CMP59_I:%.*]] = fcmp fast ogt float [[MUL22_I]], [[MUL52_I]]
; CHECK-NEXT:    [[OR_COND132_I:%.*]] = select i1 [[OR_COND131_I]], i1 true, i1 [[CMP59_I]]
; CHECK-NEXT:    [[CMP61_I:%.*]] = fcmp fast olt float [[MUL32_I]], [[MUL42_I]]
; CHECK-NEXT:    [[BVINDEXPTR:%.*]] = bitcast i32* [[ARRAYIDX_I]] to <6 x i32>*
; CHECK-NEXT:    [[BVINDEXV:%.*]] = load <6 x i32>, <6 x i32>* [[BVINDEXPTR]], align 1
; CHECK-NEXT:    [[BBPTR:%.*]] = getelementptr inbounds [6 x float], [6 x float]* [[BB]], i64 0, <6 x i32> [[BVINDEXV]]
; CHECK-NEXT:    [[BBV:%.*]] = call <6 x float> @llvm.masked.gather.v6f32.v6p0f32(<6 x float*> [[BBPTR]], i32 1, <6 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <6 x float> poison)
; CHECK-NEXT:    [[STARTPTR:%.*]] = bitcast float* [[ARRAYIDX1_I]] to <3 x float>*
; CHECK-NEXT:    [[STARTV:%.*]] = load <3 x float>, <3 x float>* [[STARTPTR]], align 1
; CHECK-NEXT:    [[STARTWIDENV:%.*]] = shufflevector <3 x float> [[STARTV]], <3 x float> poison, <6 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2>
; CHECK-NEXT:    [[IDOTAXISPTR:%.*]] = bitcast float* [[ARRAYIDX2_I]] to <3 x float>*
; CHECK-NEXT:    [[IDOTAXISV:%.*]] = load <3 x float>, <3 x float>* [[IDOTAXISPTR]], align 1
; CHECK-NEXT:    [[IDOTAXISWIDENV:%.*]] = shufflevector <3 x float> [[IDOTAXISV]], <3 x float> poison, <6 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2>
; CHECK-NEXT:    [[TMP18:%.*]] = fsub <6 x float> [[BBV]], [[STARTWIDENV]]
; CHECK-NEXT:    [[T:%.*]] = fmul <6 x float> [[TMP18]], [[IDOTAXISWIDENV]]
; CHECK-NEXT:    [[T1:%.*]] = shufflevector <6 x float> [[T]], <6 x float> poison, <8 x i32> <i32 0, i32 0, i32 2, i32 2, i32 4, i32 4, i32 4, i32 4>
; CHECK-NEXT:    [[T2:%.*]] = shufflevector <6 x float> [[T]], <6 x float> poison, <8 x i32> <i32 3, i32 5, i32 5, i32 1, i32 1, i32 3, i32 1, i32 3>
; CHECK-NEXT:    [[T1CMPT2:%.*]] = fcmp ogt <8 x float> [[T1]], [[T2]]
; CHECK-NEXT:    [[T2LT0:%.*]] = fcmp olt <8 x float> [[T2]], zeroinitializer
; CHECK-NEXT:    [[OR:%.*]] = or <8 x i1> [[T1CMPT2]], [[T2LT0]]
; CHECK-NEXT:    [[TMP19:%.*]] = call i1 @llvm.vector.reduce.or.v8i1(<8 x i1> [[OR]])
; CHECK-NEXT:    [[OR_COND133_I:%.*]] = select i1 [[OR_COND132_I]], i1 true, i1 [[CMP61_I]]
; CHECK-NEXT:    [[CMP62_I:%.*]] = fcmp fast olt float [[MUL12_I]], 0.000000e+00
; CHECK-NEXT:    [[CMP64_I:%.*]] = fcmp fast olt float [[MUL32_I]], 0.000000e+00
; CHECK-NEXT:    [[OR_COND_I:%.*]] = select i1 [[CMP62_I]], i1 true, i1 [[CMP64_I]]
; CHECK-NEXT:    [[CMP66_I:%.*]] = fcmp fast olt float [[MUL52_I]], 0.000000e+00
; CHECK-NEXT:    [[OR_COND84_I:%.*]] = select i1 [[OR_COND_I]], i1 true, i1 [[CMP66_I]]
; CHECK-NEXT:    [[OR_COND:%.*]] = select i1 [[OR_COND133_I]], i1 true, i1 [[OR_COND84_I]]
; CHECK-NEXT:    br i1 [[TMP19]], label [[_ZL27RAYOBJECT_BB_INTERSECT_TESTPK5ISECTPKF_EXIT:%.*]], label [[IF_END68_I:%.*]], !unpredictable !29
; CHECK:       if.end68.i:
; CHECK-NEXT:    [[DIST_I:%.*]] = getelementptr inbounds [[STRUCT_ISECT]], %struct.Isect* [[ISEC]], i64 0, i32 2, !intel-tbaa !30
; CHECK-NEXT:    [[TMP20:%.*]] = load float, float* [[DIST_I]], align 8, !tbaa [[TBAA30:![0-9]+]]
; CHECK-NEXT:    [[CMP69_I:%.*]] = fcmp fast ule float [[MUL_I]], [[TMP20]]
; CHECK-NEXT:    [[CMP72_I:%.*]] = fcmp fast ule float [[MUL22_I]], [[TMP20]]
; CHECK-NEXT:    [[OR_COND134_I:%.*]] = select i1 [[CMP69_I]], i1 [[CMP72_I]], i1 false
; CHECK-NEXT:    [[CMP75_I:%.*]] = fcmp fast ule float [[MUL42_I]], [[TMP20]]
; CHECK-NEXT:    [[SPLATDIST_SPLATINSERT:%.*]] = insertelement <8 x float> poison, float [[TMP20]], i32 0
; CHECK-NEXT:    [[SPLATDIST_SPLAT:%.*]] = shufflevector <8 x float> [[SPLATDIST_SPLATINSERT]], <8 x float> poison, <8 x i32> zeroinitializer
; CHECK-NEXT:    [[T2ULEDIST:%.*]] = fcmp ule <8 x float> [[T1]], [[SPLATDIST_SPLAT]]
; CHECK-NEXT:    [[TMP21:%.*]] = call i1 @llvm.vector.reduce.and.v8i1(<8 x i1> [[T2ULEDIST]])
; CHECK-NEXT:    [[OR_COND135_I:%.*]] = select i1 [[OR_COND134_I]], i1 [[CMP75_I]], i1 false
; CHECK-NEXT:    [[TMP22:%.*]] = zext i1 [[TMP21]] to i32
; CHECK-NEXT:    br label [[_ZL27RAYOBJECT_BB_INTERSECT_TESTPK5ISECTPKF_EXIT]]
; CHECK:       _ZL27rayobject_bb_intersect_testPK5IsectPKf.exit:
; CHECK-NEXT:    [[RETVAL_0_I:%.*]] = phi i32 [ 0, [[ENTRY:%.*]] ], [ [[TMP22]], [[IF_END68_I]] ]
; CHECK-NEXT:    ret i32 [[RETVAL_0_I]]
;
entry:
  %bb = getelementptr inbounds %struct.VBVHNode, %struct.VBVHNode* %node, i64 0, i32 0, !intel-tbaa !5
  %arraydecay = getelementptr inbounds [6 x float], [6 x float]* %bb, i64 0, i64 0
  %bv_index.i = getelementptr inbounds %struct.Isect, %struct.Isect* %isec, i64 0, i32 5, !intel-tbaa !12
  %arrayidx.i = getelementptr inbounds [6 x i32], [6 x i32]* %bv_index.i, i64 0, i64 0, !intel-tbaa !21
  %0 = load i32, i32* %arrayidx.i, align 4, !tbaa !22
  %idxprom.i = sext i32 %0 to i64
  %ptridx.i = getelementptr inbounds float, float* %arraydecay, i64 %idxprom.i
  %1 = load float, float* %ptridx.i, align 4, !tbaa !23
  %start.i = getelementptr inbounds %struct.Isect, %struct.Isect* %isec, i64 0, i32 0, !intel-tbaa !24
  %arrayidx1.i = getelementptr inbounds [3 x float], [3 x float]* %start.i, i64 0, i64 0, !intel-tbaa !25
  %2 = load float, float* %arrayidx1.i, align 8, !tbaa !26
  %sub.i = fsub fast float %1, %2
  %idot_axis.i = getelementptr inbounds %struct.Isect, %struct.Isect* %isec, i64 0, i32 6, !intel-tbaa !27
  %arrayidx2.i = getelementptr inbounds [3 x float], [3 x float]* %idot_axis.i, i64 0, i64 0, !intel-tbaa !25
  %3 = load float, float* %arrayidx2.i, align 4, !tbaa !28
  %mul.i = fmul fast float %sub.i, %3
  %arrayidx4.i = getelementptr inbounds [6 x i32], [6 x i32]* %bv_index.i, i64 0, i64 1, !intel-tbaa !21
  %4 = load i32, i32* %arrayidx4.i, align 4, !tbaa !22
  %idxprom5.i = sext i32 %4 to i64
  %ptridx6.i = getelementptr inbounds float, float* %arraydecay, i64 %idxprom5.i
  %5 = load float, float* %ptridx6.i, align 4, !tbaa !23
  %sub9.i = fsub fast float %5, %2
  %mul12.i = fmul fast float %sub9.i, %3
  %arrayidx14.i = getelementptr inbounds [6 x i32], [6 x i32]* %bv_index.i, i64 0, i64 2, !intel-tbaa !21
  %6 = load i32, i32* %arrayidx14.i, align 4, !tbaa !22
  %idxprom15.i = sext i32 %6 to i64
  %ptridx16.i = getelementptr inbounds float, float* %arraydecay, i64 %idxprom15.i
  %7 = load float, float* %ptridx16.i, align 4, !tbaa !23
  %arrayidx18.i = getelementptr inbounds [3 x float], [3 x float]* %start.i, i64 0, i64 1, !intel-tbaa !25
  %8 = load float, float* %arrayidx18.i, align 4, !tbaa !26
  %sub19.i = fsub fast float %7, %8
  %arrayidx21.i = getelementptr inbounds [3 x float], [3 x float]* %idot_axis.i, i64 0, i64 1, !intel-tbaa !25
  %9 = load float, float* %arrayidx21.i, align 4, !tbaa !28
  %mul22.i = fmul fast float %sub19.i, %9
  %arrayidx24.i = getelementptr inbounds [6 x i32], [6 x i32]* %bv_index.i, i64 0, i64 3, !intel-tbaa !21
  %10 = load i32, i32* %arrayidx24.i, align 4, !tbaa !22
  %idxprom25.i = sext i32 %10 to i64
  %ptridx26.i = getelementptr inbounds float, float* %arraydecay, i64 %idxprom25.i
  %11 = load float, float* %ptridx26.i, align 4, !tbaa !23
  %sub29.i = fsub fast float %11, %8
  %mul32.i = fmul fast float %sub29.i, %9
  %arrayidx34.i = getelementptr inbounds [6 x i32], [6 x i32]* %bv_index.i, i64 0, i64 4, !intel-tbaa !21
  %12 = load i32, i32* %arrayidx34.i, align 4, !tbaa !22
  %idxprom35.i = sext i32 %12 to i64
  %ptridx36.i = getelementptr inbounds float, float* %arraydecay, i64 %idxprom35.i
  %13 = load float, float* %ptridx36.i, align 4, !tbaa !23
  %arrayidx38.i = getelementptr inbounds [3 x float], [3 x float]* %start.i, i64 0, i64 2, !intel-tbaa !25
  %14 = load float, float* %arrayidx38.i, align 8, !tbaa !26
  %sub39.i = fsub fast float %13, %14
  %arrayidx41.i = getelementptr inbounds [3 x float], [3 x float]* %idot_axis.i, i64 0, i64 2, !intel-tbaa !25
  %15 = load float, float* %arrayidx41.i, align 4, !tbaa !28
  %mul42.i = fmul fast float %sub39.i, %15
  %arrayidx44.i = getelementptr inbounds [6 x i32], [6 x i32]* %bv_index.i, i64 0, i64 5, !intel-tbaa !21
  %16 = load i32, i32* %arrayidx44.i, align 4, !tbaa !22
  %idxprom45.i = sext i32 %16 to i64
  %ptridx46.i = getelementptr inbounds float, float* %arraydecay, i64 %idxprom45.i
  %17 = load float, float* %ptridx46.i, align 4, !tbaa !23
  %sub49.i = fsub fast float %17, %14
  %mul52.i = fmul fast float %sub49.i, %15
  %cmp.i = fcmp fast ogt float %mul.i, %mul32.i
  %cmp53.i = fcmp fast olt float %mul12.i, %mul22.i
  %or.cond129.i = select i1 %cmp.i, i1 true, i1 %cmp53.i
  %cmp55.i = fcmp fast ogt float %mul.i, %mul52.i
  %or.cond130.i = select i1 %or.cond129.i, i1 true, i1 %cmp55.i
  %cmp57.i = fcmp fast olt float %mul12.i, %mul42.i
  %or.cond131.i = select i1 %or.cond130.i, i1 true, i1 %cmp57.i
  %cmp59.i = fcmp fast ogt float %mul22.i, %mul52.i
  %or.cond132.i = select i1 %or.cond131.i, i1 true, i1 %cmp59.i
  %cmp61.i = fcmp fast olt float %mul32.i, %mul42.i
  %or.cond133.i = select i1 %or.cond132.i, i1 true, i1 %cmp61.i
  br i1 %or.cond133.i, label %_ZL27rayobject_bb_intersect_testPK5IsectPKf.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %cmp62.i = fcmp fast olt float %mul12.i, 0.000000e+00
  %cmp64.i = fcmp fast olt float %mul32.i, 0.000000e+00
  %or.cond.i = select i1 %cmp62.i, i1 true, i1 %cmp64.i
  %cmp66.i = fcmp fast olt float %mul52.i, 0.000000e+00
  %or.cond84.i = select i1 %or.cond.i, i1 true, i1 %cmp66.i
  br i1 %or.cond84.i, label %_ZL27rayobject_bb_intersect_testPK5IsectPKf.exit, label %if.end68.i

if.end68.i:                                       ; preds = %if.end.i
  %dist.i = getelementptr inbounds %struct.Isect, %struct.Isect* %isec, i64 0, i32 2, !intel-tbaa !29
  %18 = load float, float* %dist.i, align 8, !tbaa !29
  %cmp69.i = fcmp fast ule float %mul.i, %18
  %cmp72.i = fcmp fast ule float %mul22.i, %18
  %or.cond134.i = select i1 %cmp69.i, i1 %cmp72.i, i1 false
  %cmp75.i = fcmp fast ule float %mul42.i, %18
  %or.cond135.i = select i1 %or.cond134.i, i1 %cmp75.i, i1 false
  %19 = zext i1 %or.cond135.i to i32
  br label %_ZL27rayobject_bb_intersect_testPK5IsectPKf.exit

_ZL27rayobject_bb_intersect_testPK5IsectPKf.exit: ; preds = %if.end68.i, %if.end.i, %entry
  %retval.0.i = phi i32 [ 0, %entry ], [ 0, %if.end.i ], [ %19, %if.end68.i ]
  ret i32 %retval.0.i
}

attributes #0 = { inlinehint norecurse nosync nounwind readonly uwtable willreturn mustprogress "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "frame-pointer"="none" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "pre_loopopt" "stack-protector-buffer-size"="8" "target-cpu"="skylake-avx512" "target-features"="+adx,+aes,+avx,+avx2,+avx512bw,+avx512cd,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+clflushopt,+clwb,+cx16,+cx8,+f16c,+fma,+fsgsbase,+fxsr,+invpcid,+lzcnt,+mmx,+movbe,+pclmul,+pku,+popcnt,+prfchw,+rdrnd,+rdseed,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsavec,+xsaveopt,+xsaves" "unsafe-fp-math"="true" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"Virtual Function Elim", i32 0}
!2 = !{i32 1, !"ThinLTO", i32 0}
!3 = !{i32 1, !"EnableSplitLTOUnit", i32 1}
!4 = !{!"Intel(R) oneAPI DPC++/C++ Compiler 2021.2.0 (2021.x.0.YYYYMMDD)"}
!5 = !{!6, !7, i64 0}
!6 = !{!"struct@_ZTS8VBVHNode", !7, i64 0, !11, i64 24, !11, i64 32}
!7 = !{!"array@_ZTSA6_f", !8, i64 0}
!8 = !{!"float", !9, i64 0}
!9 = !{!"omnipotent char", !10, i64 0}
!10 = !{!"Simple C++ TBAA"}
!11 = !{!"pointer@_ZTSP8VBVHNode", !9, i64 0}
!12 = !{!13, !15, i64 52}
!13 = !{!"struct@_ZTS5Isect", !14, i64 0, !14, i64 12, !8, i64 24, !14, i64 28, !14, i64 40, !15, i64 52, !14, i64 76, !16, i64 88, !16, i64 92, !16, i64 96, !16, i64 100, !17, i64 104, !8, i64 112, !8, i64 116, !16, i64 120, !18, i64 128, !18, i64 144, !19, i64 160, !20, i64 168}
!14 = !{!"array@_ZTSA3_f", !8, i64 0}
!15 = !{!"array@_ZTSA6_i", !16, i64 0}
!16 = !{!"int", !9, i64 0}
!17 = !{!"pointer@_ZTSPv", !9, i64 0}
!18 = !{!"struct@_ZTSN5IsectUt_E", !17, i64 0, !17, i64 8}
!19 = !{!"pointer@_ZTSP9RayObject", !9, i64 0}
!20 = !{!"pointer@_ZTSP7RayHint", !9, i64 0}
!21 = !{!15, !16, i64 0}
!22 = !{!13, !16, i64 52}
!23 = !{!8, !8, i64 0}
!24 = !{!13, !14, i64 0}
!25 = !{!14, !8, i64 0}
!26 = !{!13, !8, i64 0}
!27 = !{!13, !14, i64 76}
!28 = !{!13, !8, i64 76}
!29 = !{!13, !8, i64 24}
