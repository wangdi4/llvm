; RUN: opt < %s -sroa -tti -mtriple=x86_64-unknown-linux-gnu  -mcpu=skylake-avx512 -S | FileCheck %s
; RUN: opt < %s -passes=sroa -tti -mtriple=x86_64-unknown-linux-gnu  -mcpu=skylake-avx512 -S | FileCheck %s

; This lit test is intended to verify that 'alloca' instructions get removed by SROA.

; ModuleID = '/export/iusers/ebrevnov/workspaces/xmain/llvm/test/Transforms/Intel_VPO/Vecopt/load_coalescing_16x16.ll'
source_filename = "x264_pixel_satd_16x16.ll"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; CHECK-NOT: alloca [16 x [8 x i32]]
; CHECK-NOT: alloca <8 x i32>

; Function Attrs: norecurse nounwind readonly uwtable
define internal i32 @x264_pixel_satd_16x16(i8* nocapture readonly %pix1, i32 %i_pix1, i8* nocapture readonly %pix2, i32 %i_pix2) #0 {
entry:
  %idx.ext.i = sext i32 %i_pix1 to i64
  %idx.ext63.i = sext i32 %i_pix2 to i64
  %alloca = alloca [16 x [8 x i32]], align 4
  %alloca842 = alloca <8 x i32>, align 16
  %alloca843 = alloca <8 x i32>, align 16
  %alloca844 = alloca <8 x i32>, align 16
  %alloca845 = alloca <8 x i32>, align 16
  %arrayIdx = getelementptr inbounds i8, i8* %pix1, i64 4
  %arrayIdx924 = getelementptr inbounds i8, i8* %pix2, i64 4
  %arrayIdx926 = getelementptr inbounds i8, i8* %pix1, i64 1
  %arrayIdx928 = getelementptr inbounds i8, i8* %pix2, i64 1
  %arrayIdx930 = getelementptr inbounds i8, i8* %pix1, i64 5
  %arrayIdx932 = getelementptr inbounds i8, i8* %pix2, i64 5
  %arrayIdx934 = getelementptr inbounds i8, i8* %pix1, i64 2
  %arrayIdx936 = getelementptr inbounds i8, i8* %pix2, i64 2
  %arrayIdx938 = getelementptr inbounds i8, i8* %pix1, i64 6
  %arrayIdx940 = getelementptr inbounds i8, i8* %pix2, i64 6
  %arrayIdx942 = getelementptr inbounds i8, i8* %pix1, i64 3
  %arrayIdx944 = getelementptr inbounds i8, i8* %pix2, i64 3
  %arrayIdx946 = getelementptr inbounds i8, i8* %pix1, i64 7
  %arrayIdx948 = getelementptr inbounds i8, i8* %pix2, i64 7
  %arrayIdx950 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 0, i64 0
  %arrayIdx952 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 0, i64 2
  %arrayIdx970 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 0, i64 1
  %arrayIdx988 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 0, i64 3
  %arrayIdx1005 = getelementptr inbounds i8, i8* %pix1, i64 8
  %arrayIdx1007 = getelementptr inbounds i8, i8* %pix2, i64 8
  %arrayIdx1009 = getelementptr inbounds i8, i8* %pix1, i64 12
  %arrayIdx1011 = getelementptr inbounds i8, i8* %pix2, i64 12
  %arrayIdx1013 = getelementptr inbounds i8, i8* %pix1, i64 9
  %arrayIdx1015 = getelementptr inbounds i8, i8* %pix2, i64 9
  %arrayIdx1017 = getelementptr inbounds i8, i8* %pix1, i64 13
  %arrayIdx1019 = getelementptr inbounds i8, i8* %pix2, i64 13
  %arrayIdx1021 = getelementptr inbounds i8, i8* %pix1, i64 10
  %arrayIdx1023 = getelementptr inbounds i8, i8* %pix2, i64 10
  %arrayIdx1025 = getelementptr inbounds i8, i8* %pix1, i64 14
  %arrayIdx1027 = getelementptr inbounds i8, i8* %pix2, i64 14
  %arrayIdx1029 = getelementptr inbounds i8, i8* %pix1, i64 11
  %0 = bitcast i8* %pix1 to <4 x i8>*
  %1 = bitcast i8* %arrayIdx to <4 x i8>*
  %2 = bitcast i8* %arrayIdx1005 to <4 x i8>*
  %3 = bitcast i8* %arrayIdx1009 to <4 x i8>*
  %4 = bitcast <4 x i8>* %0 to <16 x i8>*
  %5 = load <16 x i8>, <16 x i8>* %4, align 1
  %LoadCoalescingShuffle_ = shufflevector <16 x i8> %5, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_1 = shufflevector <16 x i8> %5, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_2 = shufflevector <16 x i8> %5, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %LoadCoalescingShuffle_3 = shufflevector <16 x i8> %5, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %SplitLoadShuffle6884 = shufflevector <4 x i8> %LoadCoalescingShuffle_, <4 x i8> %LoadCoalescingShuffle_2, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %arrayIdx1031 = getelementptr inbounds i8, i8* %pix2, i64 11
  %6 = bitcast i8* %pix2 to <4 x i8>*
  %7 = bitcast i8* %arrayIdx924 to <4 x i8>*
  %8 = bitcast i8* %arrayIdx1007 to <4 x i8>*
  %9 = bitcast i8* %arrayIdx1011 to <4 x i8>*
  %10 = bitcast <4 x i8>* %6 to <16 x i8>*
  %11 = load <16 x i8>, <16 x i8>* %10, align 1
  %LoadCoalescingShuffle_4 = shufflevector <16 x i8> %11, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_5 = shufflevector <16 x i8> %11, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_6 = shufflevector <16 x i8> %11, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %LoadCoalescingShuffle_7 = shufflevector <16 x i8> %11, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %SplitLoadShuffle6882 = shufflevector <4 x i8> %LoadCoalescingShuffle_4, <4 x i8> %LoadCoalescingShuffle_6, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %arrayIdx1033 = getelementptr inbounds i8, i8* %pix1, i64 15
  %SplitLoadShuffle = shufflevector <4 x i8> %LoadCoalescingShuffle_1, <4 x i8> %LoadCoalescingShuffle_3, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %arrayIdx1035 = getelementptr inbounds i8, i8* %pix2, i64 15
  %SplitLoadShuffle6883 = shufflevector <4 x i8> %LoadCoalescingShuffle_5, <4 x i8> %LoadCoalescingShuffle_7, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %arrayIdx1038 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 0, i64 4
  %12 = zext <8 x i8> %SplitLoadShuffle6884 to <8 x i32>
  %13 = zext <8 x i8> %SplitLoadShuffle to <8 x i32>
  %14 = zext <8 x i8> %SplitLoadShuffle6883 to <8 x i32>
  %15 = zext <8 x i8> %SplitLoadShuffle6882 to <8 x i32>
  %16 = shl nuw nsw <8 x i32> %13, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %17 = shl nuw nsw <8 x i32> %14, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %18 = sub nsw <8 x i32> %16, %15
  %19 = sub nsw <8 x i32> %18, %17
  %20 = add nsw <8 x i32> %19, %12
  %arrayIdx1040 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 0, i64 6
  %arrayIdx1058 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 0, i64 5
  %arrayIdx1076 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 0, i64 7
  %21 = extractelement <8 x i32> %20, i32 3
  %22 = insertelement <8 x i32> undef, i32 %21, i32 0
  %23 = extractelement <8 x i32> %20, i32 0
  %24 = insertelement <8 x i32> %22, i32 %23, i32 1
  %25 = insertelement <8 x i32> %24, i32 %23, i32 2
  %26 = insertelement <8 x i32> %25, i32 %23, i32 3
  %27 = extractelement <8 x i32> %20, i32 7
  %28 = insertelement <8 x i32> %26, i32 %27, i32 4
  %29 = extractelement <8 x i32> %20, i32 4
  %30 = insertelement <8 x i32> %28, i32 %29, i32 5
  %31 = insertelement <8 x i32> %30, i32 %29, i32 6
  %32 = insertelement <8 x i32> %31, i32 %29, i32 7
  %33 = extractelement <8 x i32> %20, i32 1
  %34 = insertelement <8 x i32> undef, i32 %33, i32 0
  %35 = insertelement <8 x i32> %34, i32 %21, i32 1
  %36 = insertelement <8 x i32> %35, i32 %33, i32 2
  %37 = insertelement <8 x i32> %36, i32 %33, i32 3
  %38 = extractelement <8 x i32> %20, i32 5
  %39 = insertelement <8 x i32> %37, i32 %38, i32 4
  %40 = insertelement <8 x i32> %39, i32 %27, i32 5
  %41 = insertelement <8 x i32> %40, i32 %38, i32 6
  %42 = insertelement <8 x i32> %41, i32 %38, i32 7
  %43 = add nsw <8 x i32> %32, %42
  %44 = sub nsw <8 x i32> %32, %42
  %45 = select <8 x i1> <i1 true, i1 false, i1 true, i1 false, i1 true, i1 false, i1 true, i1 false>, <8 x i32> %43, <8 x i32> %44
  %46 = extractelement <8 x i32> %20, i32 2
  %47 = insertelement <8 x i32> undef, i32 %46, i32 0
  %48 = insertelement <8 x i32> %47, i32 %46, i32 1
  %49 = insertelement <8 x i32> %48, i32 %21, i32 2
  %50 = insertelement <8 x i32> %49, i32 %46, i32 3
  %51 = extractelement <8 x i32> %20, i32 6
  %52 = insertelement <8 x i32> %50, i32 %51, i32 4
  %53 = insertelement <8 x i32> %52, i32 %51, i32 5
  %54 = insertelement <8 x i32> %53, i32 %27, i32 6
  %55 = insertelement <8 x i32> %54, i32 %51, i32 7
  %56 = add nsw <8 x i32> %45, %55
  %57 = sub nsw <8 x i32> %45, %55
  %58 = select <8 x i1> <i1 true, i1 true, i1 false, i1 false, i1 true, i1 true, i1 false, i1 false>, <8 x i32> %56, <8 x i32> %57
  %59 = sub <8 x i32> %58, %20
  %60 = add <8 x i32> %58, %20
  %61 = select <8 x i1> <i1 true, i1 false, i1 false, i1 true, i1 true, i1 false, i1 false, i1 true>, <8 x i32> %60, <8 x i32> %59
  %62 = bitcast i32* %arrayIdx950 to <8 x i32>*
  store <8 x i32> %61, <8 x i32>* %62, align 4
  %arrayIdx1093 = getelementptr inbounds i8, i8* %pix1, i64 %idx.ext.i
  %arrayIdx1095 = getelementptr inbounds i8, i8* %pix2, i64 %idx.ext63.i
  %63 = add nsw i64 %idx.ext.i, 4
  %arrayIdx1097 = getelementptr inbounds i8, i8* %pix1, i64 %63
  %64 = add nsw i64 %idx.ext63.i, 4
  %arrayIdx1099 = getelementptr inbounds i8, i8* %pix2, i64 %64
  %65 = add nsw i64 %idx.ext.i, 1
  %arrayIdx1101 = getelementptr inbounds i8, i8* %pix1, i64 %65
  %66 = add nsw i64 %idx.ext63.i, 1
  %arrayIdx1103 = getelementptr inbounds i8, i8* %pix2, i64 %66
  %67 = add nsw i64 %idx.ext.i, 5
  %arrayIdx1105 = getelementptr inbounds i8, i8* %pix1, i64 %67
  %68 = add nsw i64 %idx.ext63.i, 5
  %arrayIdx1107 = getelementptr inbounds i8, i8* %pix2, i64 %68
  %69 = add nsw i64 %idx.ext.i, 2
  %arrayIdx1109 = getelementptr inbounds i8, i8* %pix1, i64 %69
  %70 = add nsw i64 %idx.ext63.i, 2
  %arrayIdx1111 = getelementptr inbounds i8, i8* %pix2, i64 %70
  %71 = add nsw i64 %idx.ext.i, 6
  %arrayIdx1113 = getelementptr inbounds i8, i8* %pix1, i64 %71
  %72 = add nsw i64 %idx.ext63.i, 6
  %arrayIdx1115 = getelementptr inbounds i8, i8* %pix2, i64 %72
  %73 = add nsw i64 %idx.ext.i, 3
  %arrayIdx1117 = getelementptr inbounds i8, i8* %pix1, i64 %73
  %74 = add nsw i64 %idx.ext63.i, 3
  %arrayIdx1119 = getelementptr inbounds i8, i8* %pix2, i64 %74
  %75 = add nsw i64 %idx.ext.i, 7
  %arrayIdx1121 = getelementptr inbounds i8, i8* %pix1, i64 %75
  %76 = add nsw i64 %idx.ext63.i, 7
  %arrayIdx1123 = getelementptr inbounds i8, i8* %pix2, i64 %76
  %arrayIdx1126 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 1, i64 0
  %arrayIdx1144 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 1, i64 2
  %arrayIdx1162 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 1, i64 1
  %arrayIdx1180 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 1, i64 3
  %77 = add nsw i64 %idx.ext.i, 8
  %arrayIdx1197 = getelementptr inbounds i8, i8* %pix1, i64 %77
  %78 = add nsw i64 %idx.ext63.i, 8
  %arrayIdx1199 = getelementptr inbounds i8, i8* %pix2, i64 %78
  %79 = add nsw i64 %idx.ext.i, 12
  %arrayIdx1201 = getelementptr inbounds i8, i8* %pix1, i64 %79
  %80 = add nsw i64 %idx.ext63.i, 12
  %arrayIdx1203 = getelementptr inbounds i8, i8* %pix2, i64 %80
  %81 = add nsw i64 %idx.ext.i, 9
  %arrayIdx1205 = getelementptr inbounds i8, i8* %pix1, i64 %81
  %82 = add nsw i64 %idx.ext63.i, 9
  %arrayIdx1207 = getelementptr inbounds i8, i8* %pix2, i64 %82
  %83 = add nsw i64 %idx.ext.i, 13
  %arrayIdx1209 = getelementptr inbounds i8, i8* %pix1, i64 %83
  %84 = add nsw i64 %idx.ext63.i, 13
  %arrayIdx1211 = getelementptr inbounds i8, i8* %pix2, i64 %84
  %85 = add nsw i64 %idx.ext.i, 10
  %arrayIdx1213 = getelementptr inbounds i8, i8* %pix1, i64 %85
  %86 = add nsw i64 %idx.ext63.i, 10
  %arrayIdx1215 = getelementptr inbounds i8, i8* %pix2, i64 %86
  %87 = add nsw i64 %idx.ext.i, 14
  %arrayIdx1217 = getelementptr inbounds i8, i8* %pix1, i64 %87
  %88 = add nsw i64 %idx.ext63.i, 14
  %arrayIdx1219 = getelementptr inbounds i8, i8* %pix2, i64 %88
  %89 = add nsw i64 %idx.ext.i, 11
  %arrayIdx1221 = getelementptr inbounds i8, i8* %pix1, i64 %89
  %90 = bitcast i8* %arrayIdx1093 to <4 x i8>*
  %91 = bitcast i8* %arrayIdx1097 to <4 x i8>*
  %92 = bitcast i8* %arrayIdx1197 to <4 x i8>*
  %93 = bitcast i8* %arrayIdx1201 to <4 x i8>*
  %94 = bitcast <4 x i8>* %90 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1
  %LoadCoalescingShuffle_8 = shufflevector <16 x i8> %95, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_9 = shufflevector <16 x i8> %95, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_10 = shufflevector <16 x i8> %95, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %LoadCoalescingShuffle_11 = shufflevector <16 x i8> %95, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %SplitLoadShuffle6933 = shufflevector <4 x i8> %LoadCoalescingShuffle_8, <4 x i8> %LoadCoalescingShuffle_10, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %96 = add nsw i64 %idx.ext63.i, 11
  %arrayIdx1223 = getelementptr inbounds i8, i8* %pix2, i64 %96
  %97 = bitcast i8* %arrayIdx1095 to <4 x i8>*
  %98 = bitcast i8* %arrayIdx1099 to <4 x i8>*
  %99 = bitcast i8* %arrayIdx1199 to <4 x i8>*
  %100 = bitcast i8* %arrayIdx1203 to <4 x i8>*
  %101 = bitcast <4 x i8>* %97 to <16 x i8>*
  %102 = load <16 x i8>, <16 x i8>* %101, align 1
  %LoadCoalescingShuffle_12 = shufflevector <16 x i8> %102, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_13 = shufflevector <16 x i8> %102, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_14 = shufflevector <16 x i8> %102, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %LoadCoalescingShuffle_15 = shufflevector <16 x i8> %102, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %SplitLoadShuffle6931 = shufflevector <4 x i8> %LoadCoalescingShuffle_12, <4 x i8> %LoadCoalescingShuffle_14, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %103 = add nsw i64 %idx.ext.i, 15
  %arrayIdx1225 = getelementptr inbounds i8, i8* %pix1, i64 %103
  %SplitLoadShuffle6930 = shufflevector <4 x i8> %LoadCoalescingShuffle_9, <4 x i8> %LoadCoalescingShuffle_11, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %104 = add nsw i64 %idx.ext63.i, 15
  %arrayIdx1227 = getelementptr inbounds i8, i8* %pix2, i64 %104
  %SplitLoadShuffle6932 = shufflevector <4 x i8> %LoadCoalescingShuffle_13, <4 x i8> %LoadCoalescingShuffle_15, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %arrayIdx1230 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 1, i64 4
  %105 = zext <8 x i8> %SplitLoadShuffle6933 to <8 x i32>
  %106 = zext <8 x i8> %SplitLoadShuffle6930 to <8 x i32>
  %107 = zext <8 x i8> %SplitLoadShuffle6932 to <8 x i32>
  %108 = zext <8 x i8> %SplitLoadShuffle6931 to <8 x i32>
  %109 = shl nuw nsw <8 x i32> %106, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %110 = shl nuw nsw <8 x i32> %107, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %111 = sub nsw <8 x i32> %109, %108
  %112 = sub nsw <8 x i32> %111, %110
  %113 = add nsw <8 x i32> %112, %105
  %arrayIdx1248 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 1, i64 6
  %arrayIdx1266 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 1, i64 5
  %arrayIdx1284 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 1, i64 7
  %114 = extractelement <8 x i32> %113, i32 3
  %115 = insertelement <8 x i32> undef, i32 %114, i32 0
  %116 = extractelement <8 x i32> %113, i32 0
  %117 = insertelement <8 x i32> %115, i32 %116, i32 1
  %118 = insertelement <8 x i32> %117, i32 %116, i32 2
  %119 = insertelement <8 x i32> %118, i32 %116, i32 3
  %120 = extractelement <8 x i32> %113, i32 7
  %121 = insertelement <8 x i32> %119, i32 %120, i32 4
  %122 = extractelement <8 x i32> %113, i32 4
  %123 = insertelement <8 x i32> %121, i32 %122, i32 5
  %124 = insertelement <8 x i32> %123, i32 %122, i32 6
  %125 = insertelement <8 x i32> %124, i32 %122, i32 7
  %126 = extractelement <8 x i32> %113, i32 1
  %127 = insertelement <8 x i32> undef, i32 %126, i32 0
  %128 = insertelement <8 x i32> %127, i32 %114, i32 1
  %129 = insertelement <8 x i32> %128, i32 %126, i32 2
  %130 = insertelement <8 x i32> %129, i32 %126, i32 3
  %131 = extractelement <8 x i32> %113, i32 5
  %132 = insertelement <8 x i32> %130, i32 %131, i32 4
  %133 = insertelement <8 x i32> %132, i32 %120, i32 5
  %134 = insertelement <8 x i32> %133, i32 %131, i32 6
  %135 = insertelement <8 x i32> %134, i32 %131, i32 7
  %136 = add nsw <8 x i32> %125, %135
  %137 = sub nsw <8 x i32> %125, %135
  %138 = select <8 x i1> <i1 true, i1 false, i1 true, i1 false, i1 true, i1 false, i1 true, i1 false>, <8 x i32> %136, <8 x i32> %137
  %139 = extractelement <8 x i32> %113, i32 2
  %140 = insertelement <8 x i32> undef, i32 %139, i32 0
  %141 = insertelement <8 x i32> %140, i32 %139, i32 1
  %142 = insertelement <8 x i32> %141, i32 %114, i32 2
  %143 = insertelement <8 x i32> %142, i32 %139, i32 3
  %144 = extractelement <8 x i32> %113, i32 6
  %145 = insertelement <8 x i32> %143, i32 %144, i32 4
  %146 = insertelement <8 x i32> %145, i32 %144, i32 5
  %147 = insertelement <8 x i32> %146, i32 %120, i32 6
  %148 = insertelement <8 x i32> %147, i32 %144, i32 7
  %149 = add nsw <8 x i32> %138, %148
  %150 = sub nsw <8 x i32> %138, %148
  %151 = select <8 x i1> <i1 true, i1 true, i1 false, i1 false, i1 true, i1 true, i1 false, i1 false>, <8 x i32> %149, <8 x i32> %150
  %152 = sub <8 x i32> %151, %113
  %153 = add <8 x i32> %151, %113
  %154 = select <8 x i1> <i1 true, i1 false, i1 false, i1 true, i1 true, i1 false, i1 false, i1 true>, <8 x i32> %153, <8 x i32> %152
  %155 = bitcast i32* %arrayIdx1126 to <8 x i32>*
  store <8 x i32> %154, <8 x i32>* %155, align 4
  %156 = shl nsw i64 %idx.ext.i, 1
  %arrayIdx1301 = getelementptr inbounds i8, i8* %pix1, i64 %156
  %157 = shl nsw i64 %idx.ext63.i, 1
  %arrayIdx1303 = getelementptr inbounds i8, i8* %pix2, i64 %157
  %158 = add nsw i64 %156, 4
  %arrayIdx1305 = getelementptr inbounds i8, i8* %pix1, i64 %158
  %159 = add nsw i64 %157, 4
  %arrayIdx1307 = getelementptr inbounds i8, i8* %pix2, i64 %159
  %160 = or i64 %156, 1
  %arrayIdx1309 = getelementptr inbounds i8, i8* %pix1, i64 %160
  %161 = or i64 %157, 1
  %arrayIdx1311 = getelementptr inbounds i8, i8* %pix2, i64 %161
  %162 = add nsw i64 %156, 5
  %arrayIdx1313 = getelementptr inbounds i8, i8* %pix1, i64 %162
  %163 = add nsw i64 %157, 5
  %arrayIdx1315 = getelementptr inbounds i8, i8* %pix2, i64 %163
  %164 = add nsw i64 %156, 2
  %arrayIdx1317 = getelementptr inbounds i8, i8* %pix1, i64 %164
  %165 = add nsw i64 %157, 2
  %arrayIdx1319 = getelementptr inbounds i8, i8* %pix2, i64 %165
  %166 = add nsw i64 %156, 6
  %arrayIdx1321 = getelementptr inbounds i8, i8* %pix1, i64 %166
  %167 = add nsw i64 %157, 6
  %arrayIdx1323 = getelementptr inbounds i8, i8* %pix2, i64 %167
  %168 = add nsw i64 %156, 3
  %arrayIdx1325 = getelementptr inbounds i8, i8* %pix1, i64 %168
  %169 = add nsw i64 %157, 3
  %arrayIdx1327 = getelementptr inbounds i8, i8* %pix2, i64 %169
  %170 = add nsw i64 %156, 7
  %arrayIdx1329 = getelementptr inbounds i8, i8* %pix1, i64 %170
  %171 = add nsw i64 %157, 7
  %arrayIdx1331 = getelementptr inbounds i8, i8* %pix2, i64 %171
  %arrayIdx1334 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 2, i64 0
  %arrayIdx1352 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 2, i64 2
  %arrayIdx1370 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 2, i64 1
  %arrayIdx1388 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 2, i64 3
  %172 = add nsw i64 %156, 8
  %arrayIdx1405 = getelementptr inbounds i8, i8* %pix1, i64 %172
  %173 = add nsw i64 %157, 8
  %arrayIdx1407 = getelementptr inbounds i8, i8* %pix2, i64 %173
  %174 = add nsw i64 %156, 12
  %arrayIdx1409 = getelementptr inbounds i8, i8* %pix1, i64 %174
  %175 = add nsw i64 %157, 12
  %arrayIdx1411 = getelementptr inbounds i8, i8* %pix2, i64 %175
  %176 = add nsw i64 %156, 9
  %arrayIdx1413 = getelementptr inbounds i8, i8* %pix1, i64 %176
  %177 = add nsw i64 %157, 9
  %arrayIdx1415 = getelementptr inbounds i8, i8* %pix2, i64 %177
  %178 = add nsw i64 %156, 13
  %arrayIdx1417 = getelementptr inbounds i8, i8* %pix1, i64 %178
  %179 = add nsw i64 %157, 13
  %arrayIdx1419 = getelementptr inbounds i8, i8* %pix2, i64 %179
  %180 = add nsw i64 %156, 10
  %arrayIdx1421 = getelementptr inbounds i8, i8* %pix1, i64 %180
  %181 = add nsw i64 %157, 10
  %arrayIdx1423 = getelementptr inbounds i8, i8* %pix2, i64 %181
  %182 = add nsw i64 %156, 14
  %arrayIdx1425 = getelementptr inbounds i8, i8* %pix1, i64 %182
  %183 = add nsw i64 %157, 14
  %arrayIdx1427 = getelementptr inbounds i8, i8* %pix2, i64 %183
  %184 = add nsw i64 %156, 11
  %arrayIdx1429 = getelementptr inbounds i8, i8* %pix1, i64 %184
  %185 = bitcast i8* %arrayIdx1301 to <4 x i8>*
  %186 = bitcast i8* %arrayIdx1305 to <4 x i8>*
  %187 = bitcast i8* %arrayIdx1405 to <4 x i8>*
  %188 = bitcast i8* %arrayIdx1409 to <4 x i8>*
  %189 = bitcast <4 x i8>* %185 to <16 x i8>*
  %190 = load <16 x i8>, <16 x i8>* %189, align 1
  %LoadCoalescingShuffle_16 = shufflevector <16 x i8> %190, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_17 = shufflevector <16 x i8> %190, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_18 = shufflevector <16 x i8> %190, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %LoadCoalescingShuffle_19 = shufflevector <16 x i8> %190, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %SplitLoadShuffle6982 = shufflevector <4 x i8> %LoadCoalescingShuffle_16, <4 x i8> %LoadCoalescingShuffle_18, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %191 = add nsw i64 %157, 11
  %arrayIdx1431 = getelementptr inbounds i8, i8* %pix2, i64 %191
  %192 = bitcast i8* %arrayIdx1303 to <4 x i8>*
  %193 = bitcast i8* %arrayIdx1307 to <4 x i8>*
  %194 = bitcast i8* %arrayIdx1407 to <4 x i8>*
  %195 = bitcast i8* %arrayIdx1411 to <4 x i8>*
  %196 = bitcast <4 x i8>* %192 to <16 x i8>*
  %197 = load <16 x i8>, <16 x i8>* %196, align 1
  %LoadCoalescingShuffle_20 = shufflevector <16 x i8> %197, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_21 = shufflevector <16 x i8> %197, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_22 = shufflevector <16 x i8> %197, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %LoadCoalescingShuffle_23 = shufflevector <16 x i8> %197, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %SplitLoadShuffle6980 = shufflevector <4 x i8> %LoadCoalescingShuffle_20, <4 x i8> %LoadCoalescingShuffle_22, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %198 = add nsw i64 %156, 15
  %arrayIdx1433 = getelementptr inbounds i8, i8* %pix1, i64 %198
  %SplitLoadShuffle6979 = shufflevector <4 x i8> %LoadCoalescingShuffle_17, <4 x i8> %LoadCoalescingShuffle_19, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %199 = add nsw i64 %157, 15
  %arrayIdx1435 = getelementptr inbounds i8, i8* %pix2, i64 %199
  %SplitLoadShuffle6981 = shufflevector <4 x i8> %LoadCoalescingShuffle_21, <4 x i8> %LoadCoalescingShuffle_23, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %arrayIdx1438 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 2, i64 4
  %200 = zext <8 x i8> %SplitLoadShuffle6982 to <8 x i32>
  %201 = zext <8 x i8> %SplitLoadShuffle6979 to <8 x i32>
  %202 = zext <8 x i8> %SplitLoadShuffle6981 to <8 x i32>
  %203 = zext <8 x i8> %SplitLoadShuffle6980 to <8 x i32>
  %204 = shl nuw nsw <8 x i32> %201, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %205 = shl nuw nsw <8 x i32> %202, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %206 = sub nsw <8 x i32> %204, %203
  %207 = sub nsw <8 x i32> %206, %205
  %208 = add nsw <8 x i32> %207, %200
  %arrayIdx1456 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 2, i64 6
  %arrayIdx1474 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 2, i64 5
  %arrayIdx1492 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 2, i64 7
  %209 = extractelement <8 x i32> %208, i32 3
  %210 = insertelement <8 x i32> undef, i32 %209, i32 0
  %211 = extractelement <8 x i32> %208, i32 0
  %212 = insertelement <8 x i32> %210, i32 %211, i32 1
  %213 = insertelement <8 x i32> %212, i32 %211, i32 2
  %214 = insertelement <8 x i32> %213, i32 %211, i32 3
  %215 = extractelement <8 x i32> %208, i32 7
  %216 = insertelement <8 x i32> %214, i32 %215, i32 4
  %217 = extractelement <8 x i32> %208, i32 4
  %218 = insertelement <8 x i32> %216, i32 %217, i32 5
  %219 = insertelement <8 x i32> %218, i32 %217, i32 6
  %220 = insertelement <8 x i32> %219, i32 %217, i32 7
  %221 = extractelement <8 x i32> %208, i32 1
  %222 = insertelement <8 x i32> undef, i32 %221, i32 0
  %223 = insertelement <8 x i32> %222, i32 %209, i32 1
  %224 = insertelement <8 x i32> %223, i32 %221, i32 2
  %225 = insertelement <8 x i32> %224, i32 %221, i32 3
  %226 = extractelement <8 x i32> %208, i32 5
  %227 = insertelement <8 x i32> %225, i32 %226, i32 4
  %228 = insertelement <8 x i32> %227, i32 %215, i32 5
  %229 = insertelement <8 x i32> %228, i32 %226, i32 6
  %230 = insertelement <8 x i32> %229, i32 %226, i32 7
  %231 = add nsw <8 x i32> %220, %230
  %232 = sub nsw <8 x i32> %220, %230
  %233 = select <8 x i1> <i1 true, i1 false, i1 true, i1 false, i1 true, i1 false, i1 true, i1 false>, <8 x i32> %231, <8 x i32> %232
  %234 = extractelement <8 x i32> %208, i32 2
  %235 = insertelement <8 x i32> undef, i32 %234, i32 0
  %236 = insertelement <8 x i32> %235, i32 %234, i32 1
  %237 = insertelement <8 x i32> %236, i32 %209, i32 2
  %238 = insertelement <8 x i32> %237, i32 %234, i32 3
  %239 = extractelement <8 x i32> %208, i32 6
  %240 = insertelement <8 x i32> %238, i32 %239, i32 4
  %241 = insertelement <8 x i32> %240, i32 %239, i32 5
  %242 = insertelement <8 x i32> %241, i32 %215, i32 6
  %243 = insertelement <8 x i32> %242, i32 %239, i32 7
  %244 = add nsw <8 x i32> %233, %243
  %245 = sub nsw <8 x i32> %233, %243
  %246 = select <8 x i1> <i1 true, i1 true, i1 false, i1 false, i1 true, i1 true, i1 false, i1 false>, <8 x i32> %244, <8 x i32> %245
  %247 = sub <8 x i32> %246, %208
  %248 = add <8 x i32> %246, %208
  %249 = select <8 x i1> <i1 true, i1 false, i1 false, i1 true, i1 true, i1 false, i1 false, i1 true>, <8 x i32> %248, <8 x i32> %247
  %250 = bitcast i32* %arrayIdx1334 to <8 x i32>*
  store <8 x i32> %249, <8 x i32>* %250, align 4
  %251 = mul nsw i64 %idx.ext.i, 3
  %arrayIdx1509 = getelementptr inbounds i8, i8* %pix1, i64 %251
  %252 = mul nsw i64 %idx.ext63.i, 3
  %arrayIdx1511 = getelementptr inbounds i8, i8* %pix2, i64 %252
  %253 = add nsw i64 %251, 4
  %arrayIdx1513 = getelementptr inbounds i8, i8* %pix1, i64 %253
  %254 = add nsw i64 %252, 4
  %arrayIdx1515 = getelementptr inbounds i8, i8* %pix2, i64 %254
  %255 = add nsw i64 %251, 1
  %arrayIdx1517 = getelementptr inbounds i8, i8* %pix1, i64 %255
  %256 = add nsw i64 %252, 1
  %arrayIdx1519 = getelementptr inbounds i8, i8* %pix2, i64 %256
  %257 = add nsw i64 %251, 5
  %arrayIdx1521 = getelementptr inbounds i8, i8* %pix1, i64 %257
  %258 = add nsw i64 %252, 5
  %arrayIdx1523 = getelementptr inbounds i8, i8* %pix2, i64 %258
  %259 = add nsw i64 %251, 2
  %arrayIdx1525 = getelementptr inbounds i8, i8* %pix1, i64 %259
  %260 = add nsw i64 %252, 2
  %arrayIdx1527 = getelementptr inbounds i8, i8* %pix2, i64 %260
  %261 = add nsw i64 %251, 6
  %arrayIdx1529 = getelementptr inbounds i8, i8* %pix1, i64 %261
  %262 = add nsw i64 %252, 6
  %arrayIdx1531 = getelementptr inbounds i8, i8* %pix2, i64 %262
  %263 = add nsw i64 %251, 3
  %arrayIdx1533 = getelementptr inbounds i8, i8* %pix1, i64 %263
  %264 = add nsw i64 %252, 3
  %arrayIdx1535 = getelementptr inbounds i8, i8* %pix2, i64 %264
  %265 = add nsw i64 %251, 7
  %arrayIdx1537 = getelementptr inbounds i8, i8* %pix1, i64 %265
  %266 = add nsw i64 %252, 7
  %arrayIdx1539 = getelementptr inbounds i8, i8* %pix2, i64 %266
  %arrayIdx1542 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 3, i64 0
  %arrayIdx1560 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 3, i64 2
  %arrayIdx1578 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 3, i64 1
  %arrayIdx1596 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 3, i64 3
  %267 = add nsw i64 %251, 8
  %arrayIdx1613 = getelementptr inbounds i8, i8* %pix1, i64 %267
  %268 = add nsw i64 %252, 8
  %arrayIdx1615 = getelementptr inbounds i8, i8* %pix2, i64 %268
  %269 = add nsw i64 %251, 12
  %arrayIdx1617 = getelementptr inbounds i8, i8* %pix1, i64 %269
  %270 = add nsw i64 %252, 12
  %arrayIdx1619 = getelementptr inbounds i8, i8* %pix2, i64 %270
  %271 = add nsw i64 %251, 9
  %arrayIdx1621 = getelementptr inbounds i8, i8* %pix1, i64 %271
  %272 = add nsw i64 %252, 9
  %arrayIdx1623 = getelementptr inbounds i8, i8* %pix2, i64 %272
  %273 = add nsw i64 %251, 13
  %arrayIdx1625 = getelementptr inbounds i8, i8* %pix1, i64 %273
  %274 = add nsw i64 %252, 13
  %arrayIdx1627 = getelementptr inbounds i8, i8* %pix2, i64 %274
  %275 = add nsw i64 %251, 10
  %arrayIdx1629 = getelementptr inbounds i8, i8* %pix1, i64 %275
  %276 = add nsw i64 %252, 10
  %arrayIdx1631 = getelementptr inbounds i8, i8* %pix2, i64 %276
  %277 = add nsw i64 %251, 14
  %arrayIdx1633 = getelementptr inbounds i8, i8* %pix1, i64 %277
  %278 = add nsw i64 %252, 14
  %arrayIdx1635 = getelementptr inbounds i8, i8* %pix2, i64 %278
  %279 = add nsw i64 %251, 11
  %arrayIdx1637 = getelementptr inbounds i8, i8* %pix1, i64 %279
  %280 = bitcast i8* %arrayIdx1509 to <4 x i8>*
  %281 = bitcast i8* %arrayIdx1513 to <4 x i8>*
  %282 = bitcast i8* %arrayIdx1613 to <4 x i8>*
  %283 = bitcast i8* %arrayIdx1617 to <4 x i8>*
  %284 = bitcast <4 x i8>* %280 to <16 x i8>*
  %285 = load <16 x i8>, <16 x i8>* %284, align 1
  %LoadCoalescingShuffle_24 = shufflevector <16 x i8> %285, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_25 = shufflevector <16 x i8> %285, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_26 = shufflevector <16 x i8> %285, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %LoadCoalescingShuffle_27 = shufflevector <16 x i8> %285, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %SplitLoadShuffle7031 = shufflevector <4 x i8> %LoadCoalescingShuffle_24, <4 x i8> %LoadCoalescingShuffle_26, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %286 = add nsw i64 %252, 11
  %arrayIdx1639 = getelementptr inbounds i8, i8* %pix2, i64 %286
  %287 = bitcast i8* %arrayIdx1511 to <4 x i8>*
  %288 = bitcast i8* %arrayIdx1515 to <4 x i8>*
  %289 = bitcast i8* %arrayIdx1615 to <4 x i8>*
  %290 = bitcast i8* %arrayIdx1619 to <4 x i8>*
  %291 = bitcast <4 x i8>* %287 to <16 x i8>*
  %292 = load <16 x i8>, <16 x i8>* %291, align 1
  %LoadCoalescingShuffle_28 = shufflevector <16 x i8> %292, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_29 = shufflevector <16 x i8> %292, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_30 = shufflevector <16 x i8> %292, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %LoadCoalescingShuffle_31 = shufflevector <16 x i8> %292, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %SplitLoadShuffle7029 = shufflevector <4 x i8> %LoadCoalescingShuffle_28, <4 x i8> %LoadCoalescingShuffle_30, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %293 = add nsw i64 %251, 15
  %arrayIdx1641 = getelementptr inbounds i8, i8* %pix1, i64 %293
  %SplitLoadShuffle7028 = shufflevector <4 x i8> %LoadCoalescingShuffle_25, <4 x i8> %LoadCoalescingShuffle_27, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %294 = add nsw i64 %252, 15
  %arrayIdx1643 = getelementptr inbounds i8, i8* %pix2, i64 %294
  %SplitLoadShuffle7030 = shufflevector <4 x i8> %LoadCoalescingShuffle_29, <4 x i8> %LoadCoalescingShuffle_31, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %arrayIdx1646 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 3, i64 4
  %295 = zext <8 x i8> %SplitLoadShuffle7031 to <8 x i32>
  %296 = zext <8 x i8> %SplitLoadShuffle7028 to <8 x i32>
  %297 = zext <8 x i8> %SplitLoadShuffle7030 to <8 x i32>
  %298 = zext <8 x i8> %SplitLoadShuffle7029 to <8 x i32>
  %299 = shl nuw nsw <8 x i32> %296, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %300 = shl nuw nsw <8 x i32> %297, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %301 = sub nsw <8 x i32> %299, %298
  %302 = sub nsw <8 x i32> %301, %300
  %303 = add nsw <8 x i32> %302, %295
  %arrayIdx1664 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 3, i64 6
  %arrayIdx1682 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 3, i64 5
  %arrayIdx1700 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 3, i64 7
  %304 = extractelement <8 x i32> %303, i32 3
  %305 = insertelement <8 x i32> undef, i32 %304, i32 0
  %306 = extractelement <8 x i32> %303, i32 0
  %307 = insertelement <8 x i32> %305, i32 %306, i32 1
  %308 = insertelement <8 x i32> %307, i32 %306, i32 2
  %309 = insertelement <8 x i32> %308, i32 %306, i32 3
  %310 = extractelement <8 x i32> %303, i32 7
  %311 = insertelement <8 x i32> %309, i32 %310, i32 4
  %312 = extractelement <8 x i32> %303, i32 4
  %313 = insertelement <8 x i32> %311, i32 %312, i32 5
  %314 = insertelement <8 x i32> %313, i32 %312, i32 6
  %315 = insertelement <8 x i32> %314, i32 %312, i32 7
  %316 = extractelement <8 x i32> %303, i32 1
  %317 = insertelement <8 x i32> undef, i32 %316, i32 0
  %318 = insertelement <8 x i32> %317, i32 %304, i32 1
  %319 = insertelement <8 x i32> %318, i32 %316, i32 2
  %320 = insertelement <8 x i32> %319, i32 %316, i32 3
  %321 = extractelement <8 x i32> %303, i32 5
  %322 = insertelement <8 x i32> %320, i32 %321, i32 4
  %323 = insertelement <8 x i32> %322, i32 %310, i32 5
  %324 = insertelement <8 x i32> %323, i32 %321, i32 6
  %325 = insertelement <8 x i32> %324, i32 %321, i32 7
  %326 = add nsw <8 x i32> %315, %325
  %327 = sub nsw <8 x i32> %315, %325
  %328 = select <8 x i1> <i1 true, i1 false, i1 true, i1 false, i1 true, i1 false, i1 true, i1 false>, <8 x i32> %326, <8 x i32> %327
  %329 = extractelement <8 x i32> %303, i32 2
  %330 = insertelement <8 x i32> undef, i32 %329, i32 0
  %331 = insertelement <8 x i32> %330, i32 %329, i32 1
  %332 = insertelement <8 x i32> %331, i32 %304, i32 2
  %333 = insertelement <8 x i32> %332, i32 %329, i32 3
  %334 = extractelement <8 x i32> %303, i32 6
  %335 = insertelement <8 x i32> %333, i32 %334, i32 4
  %336 = insertelement <8 x i32> %335, i32 %334, i32 5
  %337 = insertelement <8 x i32> %336, i32 %310, i32 6
  %338 = insertelement <8 x i32> %337, i32 %334, i32 7
  %339 = add nsw <8 x i32> %328, %338
  %340 = sub nsw <8 x i32> %328, %338
  %341 = select <8 x i1> <i1 true, i1 true, i1 false, i1 false, i1 true, i1 true, i1 false, i1 false>, <8 x i32> %339, <8 x i32> %340
  %342 = sub <8 x i32> %341, %303
  %343 = add <8 x i32> %341, %303
  %344 = select <8 x i1> <i1 true, i1 false, i1 false, i1 true, i1 true, i1 false, i1 false, i1 true>, <8 x i32> %343, <8 x i32> %342
  %345 = bitcast i32* %arrayIdx1542 to <8 x i32>*
  store <8 x i32> %344, <8 x i32>* %345, align 4
  %346 = shl nsw i64 %idx.ext.i, 2
  %arrayIdx1717 = getelementptr inbounds i8, i8* %pix1, i64 %346
  %347 = shl nsw i64 %idx.ext63.i, 2
  %arrayIdx1719 = getelementptr inbounds i8, i8* %pix2, i64 %347
  %348 = add nsw i64 %346, 4
  %arrayIdx1721 = getelementptr inbounds i8, i8* %pix1, i64 %348
  %349 = add nsw i64 %347, 4
  %arrayIdx1723 = getelementptr inbounds i8, i8* %pix2, i64 %349
  %350 = or i64 %346, 1
  %arrayIdx1725 = getelementptr inbounds i8, i8* %pix1, i64 %350
  %351 = or i64 %347, 1
  %arrayIdx1727 = getelementptr inbounds i8, i8* %pix2, i64 %351
  %352 = add nsw i64 %346, 5
  %arrayIdx1729 = getelementptr inbounds i8, i8* %pix1, i64 %352
  %353 = add nsw i64 %347, 5
  %arrayIdx1731 = getelementptr inbounds i8, i8* %pix2, i64 %353
  %354 = or i64 %346, 2
  %arrayIdx1733 = getelementptr inbounds i8, i8* %pix1, i64 %354
  %355 = or i64 %347, 2
  %arrayIdx1735 = getelementptr inbounds i8, i8* %pix2, i64 %355
  %356 = add nsw i64 %346, 6
  %arrayIdx1737 = getelementptr inbounds i8, i8* %pix1, i64 %356
  %357 = add nsw i64 %347, 6
  %arrayIdx1739 = getelementptr inbounds i8, i8* %pix2, i64 %357
  %358 = or i64 %346, 3
  %arrayIdx1741 = getelementptr inbounds i8, i8* %pix1, i64 %358
  %359 = or i64 %347, 3
  %arrayIdx1743 = getelementptr inbounds i8, i8* %pix2, i64 %359
  %360 = add nsw i64 %346, 7
  %arrayIdx1745 = getelementptr inbounds i8, i8* %pix1, i64 %360
  %361 = add nsw i64 %347, 7
  %arrayIdx1747 = getelementptr inbounds i8, i8* %pix2, i64 %361
  %arrayIdx1750 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 4, i64 0
  %arrayIdx1768 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 4, i64 2
  %arrayIdx1786 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 4, i64 1
  %arrayIdx1804 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 4, i64 3
  %362 = add nsw i64 %346, 8
  %arrayIdx1821 = getelementptr inbounds i8, i8* %pix1, i64 %362
  %363 = add nsw i64 %347, 8
  %arrayIdx1823 = getelementptr inbounds i8, i8* %pix2, i64 %363
  %364 = add nsw i64 %346, 12
  %arrayIdx1825 = getelementptr inbounds i8, i8* %pix1, i64 %364
  %365 = add nsw i64 %347, 12
  %arrayIdx1827 = getelementptr inbounds i8, i8* %pix2, i64 %365
  %366 = add nsw i64 %346, 9
  %arrayIdx1829 = getelementptr inbounds i8, i8* %pix1, i64 %366
  %367 = add nsw i64 %347, 9
  %arrayIdx1831 = getelementptr inbounds i8, i8* %pix2, i64 %367
  %368 = add nsw i64 %346, 13
  %arrayIdx1833 = getelementptr inbounds i8, i8* %pix1, i64 %368
  %369 = add nsw i64 %347, 13
  %arrayIdx1835 = getelementptr inbounds i8, i8* %pix2, i64 %369
  %370 = add nsw i64 %346, 10
  %arrayIdx1837 = getelementptr inbounds i8, i8* %pix1, i64 %370
  %371 = add nsw i64 %347, 10
  %arrayIdx1839 = getelementptr inbounds i8, i8* %pix2, i64 %371
  %372 = add nsw i64 %346, 14
  %arrayIdx1841 = getelementptr inbounds i8, i8* %pix1, i64 %372
  %373 = add nsw i64 %347, 14
  %arrayIdx1843 = getelementptr inbounds i8, i8* %pix2, i64 %373
  %374 = add nsw i64 %346, 11
  %arrayIdx1845 = getelementptr inbounds i8, i8* %pix1, i64 %374
  %375 = bitcast i8* %arrayIdx1717 to <4 x i8>*
  %376 = bitcast i8* %arrayIdx1721 to <4 x i8>*
  %377 = bitcast i8* %arrayIdx1821 to <4 x i8>*
  %378 = bitcast i8* %arrayIdx1825 to <4 x i8>*
  %379 = bitcast <4 x i8>* %375 to <16 x i8>*
  %380 = load <16 x i8>, <16 x i8>* %379, align 1
  %LoadCoalescingShuffle_32 = shufflevector <16 x i8> %380, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_33 = shufflevector <16 x i8> %380, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_34 = shufflevector <16 x i8> %380, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %LoadCoalescingShuffle_35 = shufflevector <16 x i8> %380, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %SplitLoadShuffle7080 = shufflevector <4 x i8> %LoadCoalescingShuffle_32, <4 x i8> %LoadCoalescingShuffle_34, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %381 = add nsw i64 %347, 11
  %arrayIdx1847 = getelementptr inbounds i8, i8* %pix2, i64 %381
  %382 = bitcast i8* %arrayIdx1719 to <4 x i8>*
  %383 = bitcast i8* %arrayIdx1723 to <4 x i8>*
  %384 = bitcast i8* %arrayIdx1823 to <4 x i8>*
  %385 = bitcast i8* %arrayIdx1827 to <4 x i8>*
  %386 = bitcast <4 x i8>* %382 to <16 x i8>*
  %387 = load <16 x i8>, <16 x i8>* %386, align 1
  %LoadCoalescingShuffle_36 = shufflevector <16 x i8> %387, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_37 = shufflevector <16 x i8> %387, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_38 = shufflevector <16 x i8> %387, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %LoadCoalescingShuffle_39 = shufflevector <16 x i8> %387, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %SplitLoadShuffle7078 = shufflevector <4 x i8> %LoadCoalescingShuffle_36, <4 x i8> %LoadCoalescingShuffle_38, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %388 = add nsw i64 %346, 15
  %arrayIdx1849 = getelementptr inbounds i8, i8* %pix1, i64 %388
  %SplitLoadShuffle7077 = shufflevector <4 x i8> %LoadCoalescingShuffle_33, <4 x i8> %LoadCoalescingShuffle_35, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %389 = add nsw i64 %347, 15
  %arrayIdx1851 = getelementptr inbounds i8, i8* %pix2, i64 %389
  %SplitLoadShuffle7079 = shufflevector <4 x i8> %LoadCoalescingShuffle_37, <4 x i8> %LoadCoalescingShuffle_39, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %arrayIdx1854 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 4, i64 4
  %390 = zext <8 x i8> %SplitLoadShuffle7080 to <8 x i32>
  %391 = zext <8 x i8> %SplitLoadShuffle7077 to <8 x i32>
  %392 = zext <8 x i8> %SplitLoadShuffle7079 to <8 x i32>
  %393 = zext <8 x i8> %SplitLoadShuffle7078 to <8 x i32>
  %394 = shl nuw nsw <8 x i32> %391, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %395 = shl nuw nsw <8 x i32> %392, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %396 = sub nsw <8 x i32> %394, %393
  %397 = sub nsw <8 x i32> %396, %395
  %398 = add nsw <8 x i32> %397, %390
  %arrayIdx1872 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 4, i64 6
  %arrayIdx1890 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 4, i64 5
  %arrayIdx1908 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 4, i64 7
  %399 = extractelement <8 x i32> %398, i32 3
  %400 = insertelement <8 x i32> undef, i32 %399, i32 0
  %401 = extractelement <8 x i32> %398, i32 0
  %402 = insertelement <8 x i32> %400, i32 %401, i32 1
  %403 = insertelement <8 x i32> %402, i32 %401, i32 2
  %404 = insertelement <8 x i32> %403, i32 %401, i32 3
  %405 = extractelement <8 x i32> %398, i32 7
  %406 = insertelement <8 x i32> %404, i32 %405, i32 4
  %407 = extractelement <8 x i32> %398, i32 4
  %408 = insertelement <8 x i32> %406, i32 %407, i32 5
  %409 = insertelement <8 x i32> %408, i32 %407, i32 6
  %410 = insertelement <8 x i32> %409, i32 %407, i32 7
  %411 = extractelement <8 x i32> %398, i32 1
  %412 = insertelement <8 x i32> undef, i32 %411, i32 0
  %413 = insertelement <8 x i32> %412, i32 %399, i32 1
  %414 = insertelement <8 x i32> %413, i32 %411, i32 2
  %415 = insertelement <8 x i32> %414, i32 %411, i32 3
  %416 = extractelement <8 x i32> %398, i32 5
  %417 = insertelement <8 x i32> %415, i32 %416, i32 4
  %418 = insertelement <8 x i32> %417, i32 %405, i32 5
  %419 = insertelement <8 x i32> %418, i32 %416, i32 6
  %420 = insertelement <8 x i32> %419, i32 %416, i32 7
  %421 = add nsw <8 x i32> %410, %420
  %422 = sub nsw <8 x i32> %410, %420
  %423 = select <8 x i1> <i1 true, i1 false, i1 true, i1 false, i1 true, i1 false, i1 true, i1 false>, <8 x i32> %421, <8 x i32> %422
  %424 = extractelement <8 x i32> %398, i32 2
  %425 = insertelement <8 x i32> undef, i32 %424, i32 0
  %426 = insertelement <8 x i32> %425, i32 %424, i32 1
  %427 = insertelement <8 x i32> %426, i32 %399, i32 2
  %428 = insertelement <8 x i32> %427, i32 %424, i32 3
  %429 = extractelement <8 x i32> %398, i32 6
  %430 = insertelement <8 x i32> %428, i32 %429, i32 4
  %431 = insertelement <8 x i32> %430, i32 %429, i32 5
  %432 = insertelement <8 x i32> %431, i32 %405, i32 6
  %433 = insertelement <8 x i32> %432, i32 %429, i32 7
  %434 = add nsw <8 x i32> %423, %433
  %435 = sub nsw <8 x i32> %423, %433
  %436 = select <8 x i1> <i1 true, i1 true, i1 false, i1 false, i1 true, i1 true, i1 false, i1 false>, <8 x i32> %434, <8 x i32> %435
  %437 = sub <8 x i32> %436, %398
  %438 = add <8 x i32> %436, %398
  %439 = select <8 x i1> <i1 true, i1 false, i1 false, i1 true, i1 true, i1 false, i1 false, i1 true>, <8 x i32> %438, <8 x i32> %437
  %440 = bitcast i32* %arrayIdx1750 to <8 x i32>*
  store <8 x i32> %439, <8 x i32>* %440, align 4
  %441 = mul nsw i64 %idx.ext.i, 5
  %arrayIdx1925 = getelementptr inbounds i8, i8* %pix1, i64 %441
  %442 = mul nsw i64 %idx.ext63.i, 5
  %arrayIdx1927 = getelementptr inbounds i8, i8* %pix2, i64 %442
  %443 = add nsw i64 %441, 4
  %arrayIdx1929 = getelementptr inbounds i8, i8* %pix1, i64 %443
  %444 = add nsw i64 %442, 4
  %arrayIdx1931 = getelementptr inbounds i8, i8* %pix2, i64 %444
  %445 = add nsw i64 %441, 1
  %arrayIdx1933 = getelementptr inbounds i8, i8* %pix1, i64 %445
  %446 = add nsw i64 %442, 1
  %arrayIdx1935 = getelementptr inbounds i8, i8* %pix2, i64 %446
  %447 = add nsw i64 %441, 5
  %arrayIdx1937 = getelementptr inbounds i8, i8* %pix1, i64 %447
  %448 = add nsw i64 %442, 5
  %arrayIdx1939 = getelementptr inbounds i8, i8* %pix2, i64 %448
  %449 = add nsw i64 %441, 2
  %arrayIdx1941 = getelementptr inbounds i8, i8* %pix1, i64 %449
  %450 = add nsw i64 %442, 2
  %arrayIdx1943 = getelementptr inbounds i8, i8* %pix2, i64 %450
  %451 = add nsw i64 %441, 6
  %arrayIdx1945 = getelementptr inbounds i8, i8* %pix1, i64 %451
  %452 = add nsw i64 %442, 6
  %arrayIdx1947 = getelementptr inbounds i8, i8* %pix2, i64 %452
  %453 = add nsw i64 %441, 3
  %arrayIdx1949 = getelementptr inbounds i8, i8* %pix1, i64 %453
  %454 = add nsw i64 %442, 3
  %arrayIdx1951 = getelementptr inbounds i8, i8* %pix2, i64 %454
  %455 = add nsw i64 %441, 7
  %arrayIdx1953 = getelementptr inbounds i8, i8* %pix1, i64 %455
  %456 = add nsw i64 %442, 7
  %arrayIdx1955 = getelementptr inbounds i8, i8* %pix2, i64 %456
  %arrayIdx1958 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 5, i64 0
  %arrayIdx1976 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 5, i64 2
  %arrayIdx1994 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 5, i64 1
  %arrayIdx2012 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 5, i64 3
  %457 = add nsw i64 %441, 8
  %arrayIdx2029 = getelementptr inbounds i8, i8* %pix1, i64 %457
  %458 = add nsw i64 %442, 8
  %arrayIdx2031 = getelementptr inbounds i8, i8* %pix2, i64 %458
  %459 = add nsw i64 %441, 12
  %arrayIdx2033 = getelementptr inbounds i8, i8* %pix1, i64 %459
  %460 = add nsw i64 %442, 12
  %arrayIdx2035 = getelementptr inbounds i8, i8* %pix2, i64 %460
  %461 = add nsw i64 %441, 9
  %arrayIdx2037 = getelementptr inbounds i8, i8* %pix1, i64 %461
  %462 = add nsw i64 %442, 9
  %arrayIdx2039 = getelementptr inbounds i8, i8* %pix2, i64 %462
  %463 = add nsw i64 %441, 13
  %arrayIdx2041 = getelementptr inbounds i8, i8* %pix1, i64 %463
  %464 = add nsw i64 %442, 13
  %arrayIdx2043 = getelementptr inbounds i8, i8* %pix2, i64 %464
  %465 = add nsw i64 %441, 10
  %arrayIdx2045 = getelementptr inbounds i8, i8* %pix1, i64 %465
  %466 = add nsw i64 %442, 10
  %arrayIdx2047 = getelementptr inbounds i8, i8* %pix2, i64 %466
  %467 = add nsw i64 %441, 14
  %arrayIdx2049 = getelementptr inbounds i8, i8* %pix1, i64 %467
  %468 = add nsw i64 %442, 14
  %arrayIdx2051 = getelementptr inbounds i8, i8* %pix2, i64 %468
  %469 = add nsw i64 %441, 11
  %arrayIdx2053 = getelementptr inbounds i8, i8* %pix1, i64 %469
  %470 = bitcast i8* %arrayIdx1925 to <4 x i8>*
  %471 = bitcast i8* %arrayIdx1929 to <4 x i8>*
  %472 = bitcast i8* %arrayIdx2029 to <4 x i8>*
  %473 = bitcast i8* %arrayIdx2033 to <4 x i8>*
  %474 = bitcast <4 x i8>* %470 to <16 x i8>*
  %475 = load <16 x i8>, <16 x i8>* %474, align 1
  %LoadCoalescingShuffle_40 = shufflevector <16 x i8> %475, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_41 = shufflevector <16 x i8> %475, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_42 = shufflevector <16 x i8> %475, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %LoadCoalescingShuffle_43 = shufflevector <16 x i8> %475, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %SplitLoadShuffle7129 = shufflevector <4 x i8> %LoadCoalescingShuffle_40, <4 x i8> %LoadCoalescingShuffle_42, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %476 = add nsw i64 %442, 11
  %arrayIdx2055 = getelementptr inbounds i8, i8* %pix2, i64 %476
  %477 = bitcast i8* %arrayIdx1927 to <4 x i8>*
  %478 = bitcast i8* %arrayIdx1931 to <4 x i8>*
  %479 = bitcast i8* %arrayIdx2031 to <4 x i8>*
  %480 = bitcast i8* %arrayIdx2035 to <4 x i8>*
  %481 = bitcast <4 x i8>* %477 to <16 x i8>*
  %482 = load <16 x i8>, <16 x i8>* %481, align 1
  %LoadCoalescingShuffle_44 = shufflevector <16 x i8> %482, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_45 = shufflevector <16 x i8> %482, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_46 = shufflevector <16 x i8> %482, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %LoadCoalescingShuffle_47 = shufflevector <16 x i8> %482, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %SplitLoadShuffle7127 = shufflevector <4 x i8> %LoadCoalescingShuffle_44, <4 x i8> %LoadCoalescingShuffle_46, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %483 = add nsw i64 %441, 15
  %arrayIdx2057 = getelementptr inbounds i8, i8* %pix1, i64 %483
  %SplitLoadShuffle7126 = shufflevector <4 x i8> %LoadCoalescingShuffle_41, <4 x i8> %LoadCoalescingShuffle_43, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %484 = add nsw i64 %442, 15
  %arrayIdx2059 = getelementptr inbounds i8, i8* %pix2, i64 %484
  %SplitLoadShuffle7128 = shufflevector <4 x i8> %LoadCoalescingShuffle_45, <4 x i8> %LoadCoalescingShuffle_47, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %arrayIdx2062 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 5, i64 4
  %485 = zext <8 x i8> %SplitLoadShuffle7129 to <8 x i32>
  %486 = zext <8 x i8> %SplitLoadShuffle7126 to <8 x i32>
  %487 = zext <8 x i8> %SplitLoadShuffle7128 to <8 x i32>
  %488 = zext <8 x i8> %SplitLoadShuffle7127 to <8 x i32>
  %489 = shl nuw nsw <8 x i32> %486, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %490 = shl nuw nsw <8 x i32> %487, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %491 = sub nsw <8 x i32> %489, %488
  %492 = sub nsw <8 x i32> %491, %490
  %493 = add nsw <8 x i32> %492, %485
  %arrayIdx2080 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 5, i64 6
  %arrayIdx2098 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 5, i64 5
  %arrayIdx2116 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 5, i64 7
  %494 = extractelement <8 x i32> %493, i32 3
  %495 = insertelement <8 x i32> undef, i32 %494, i32 0
  %496 = extractelement <8 x i32> %493, i32 0
  %497 = insertelement <8 x i32> %495, i32 %496, i32 1
  %498 = insertelement <8 x i32> %497, i32 %496, i32 2
  %499 = insertelement <8 x i32> %498, i32 %496, i32 3
  %500 = extractelement <8 x i32> %493, i32 7
  %501 = insertelement <8 x i32> %499, i32 %500, i32 4
  %502 = extractelement <8 x i32> %493, i32 4
  %503 = insertelement <8 x i32> %501, i32 %502, i32 5
  %504 = insertelement <8 x i32> %503, i32 %502, i32 6
  %505 = insertelement <8 x i32> %504, i32 %502, i32 7
  %506 = extractelement <8 x i32> %493, i32 1
  %507 = insertelement <8 x i32> undef, i32 %506, i32 0
  %508 = insertelement <8 x i32> %507, i32 %494, i32 1
  %509 = insertelement <8 x i32> %508, i32 %506, i32 2
  %510 = insertelement <8 x i32> %509, i32 %506, i32 3
  %511 = extractelement <8 x i32> %493, i32 5
  %512 = insertelement <8 x i32> %510, i32 %511, i32 4
  %513 = insertelement <8 x i32> %512, i32 %500, i32 5
  %514 = insertelement <8 x i32> %513, i32 %511, i32 6
  %515 = insertelement <8 x i32> %514, i32 %511, i32 7
  %516 = add nsw <8 x i32> %505, %515
  %517 = sub nsw <8 x i32> %505, %515
  %518 = select <8 x i1> <i1 true, i1 false, i1 true, i1 false, i1 true, i1 false, i1 true, i1 false>, <8 x i32> %516, <8 x i32> %517
  %519 = extractelement <8 x i32> %493, i32 2
  %520 = insertelement <8 x i32> undef, i32 %519, i32 0
  %521 = insertelement <8 x i32> %520, i32 %519, i32 1
  %522 = insertelement <8 x i32> %521, i32 %494, i32 2
  %523 = insertelement <8 x i32> %522, i32 %519, i32 3
  %524 = extractelement <8 x i32> %493, i32 6
  %525 = insertelement <8 x i32> %523, i32 %524, i32 4
  %526 = insertelement <8 x i32> %525, i32 %524, i32 5
  %527 = insertelement <8 x i32> %526, i32 %500, i32 6
  %528 = insertelement <8 x i32> %527, i32 %524, i32 7
  %529 = add nsw <8 x i32> %518, %528
  %530 = sub nsw <8 x i32> %518, %528
  %531 = select <8 x i1> <i1 true, i1 true, i1 false, i1 false, i1 true, i1 true, i1 false, i1 false>, <8 x i32> %529, <8 x i32> %530
  %532 = sub <8 x i32> %531, %493
  %533 = add <8 x i32> %531, %493
  %534 = select <8 x i1> <i1 true, i1 false, i1 false, i1 true, i1 true, i1 false, i1 false, i1 true>, <8 x i32> %533, <8 x i32> %532
  %535 = bitcast i32* %arrayIdx1958 to <8 x i32>*
  store <8 x i32> %534, <8 x i32>* %535, align 4
  %536 = mul nsw i64 %idx.ext.i, 6
  %arrayIdx2133 = getelementptr inbounds i8, i8* %pix1, i64 %536
  %537 = mul nsw i64 %idx.ext63.i, 6
  %arrayIdx2135 = getelementptr inbounds i8, i8* %pix2, i64 %537
  %538 = add nsw i64 %536, 4
  %arrayIdx2137 = getelementptr inbounds i8, i8* %pix1, i64 %538
  %539 = add nsw i64 %537, 4
  %arrayIdx2139 = getelementptr inbounds i8, i8* %pix2, i64 %539
  %540 = or i64 %536, 1
  %arrayIdx2141 = getelementptr inbounds i8, i8* %pix1, i64 %540
  %541 = or i64 %537, 1
  %arrayIdx2143 = getelementptr inbounds i8, i8* %pix2, i64 %541
  %542 = add nsw i64 %536, 5
  %arrayIdx2145 = getelementptr inbounds i8, i8* %pix1, i64 %542
  %543 = add nsw i64 %537, 5
  %arrayIdx2147 = getelementptr inbounds i8, i8* %pix2, i64 %543
  %544 = add nsw i64 %536, 2
  %arrayIdx2149 = getelementptr inbounds i8, i8* %pix1, i64 %544
  %545 = add nsw i64 %537, 2
  %arrayIdx2151 = getelementptr inbounds i8, i8* %pix2, i64 %545
  %546 = add nsw i64 %536, 6
  %arrayIdx2153 = getelementptr inbounds i8, i8* %pix1, i64 %546
  %547 = add nsw i64 %537, 6
  %arrayIdx2155 = getelementptr inbounds i8, i8* %pix2, i64 %547
  %548 = add nsw i64 %536, 3
  %arrayIdx2157 = getelementptr inbounds i8, i8* %pix1, i64 %548
  %549 = add nsw i64 %537, 3
  %arrayIdx2159 = getelementptr inbounds i8, i8* %pix2, i64 %549
  %550 = add nsw i64 %536, 7
  %arrayIdx2161 = getelementptr inbounds i8, i8* %pix1, i64 %550
  %551 = add nsw i64 %537, 7
  %arrayIdx2163 = getelementptr inbounds i8, i8* %pix2, i64 %551
  %arrayIdx2166 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 6, i64 0
  %arrayIdx2184 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 6, i64 2
  %arrayIdx2202 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 6, i64 1
  %arrayIdx2220 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 6, i64 3
  %552 = add nsw i64 %536, 8
  %arrayIdx2237 = getelementptr inbounds i8, i8* %pix1, i64 %552
  %553 = add nsw i64 %537, 8
  %arrayIdx2239 = getelementptr inbounds i8, i8* %pix2, i64 %553
  %554 = add nsw i64 %536, 12
  %arrayIdx2241 = getelementptr inbounds i8, i8* %pix1, i64 %554
  %555 = add nsw i64 %537, 12
  %arrayIdx2243 = getelementptr inbounds i8, i8* %pix2, i64 %555
  %556 = add nsw i64 %536, 9
  %arrayIdx2245 = getelementptr inbounds i8, i8* %pix1, i64 %556
  %557 = add nsw i64 %537, 9
  %arrayIdx2247 = getelementptr inbounds i8, i8* %pix2, i64 %557
  %558 = add nsw i64 %536, 13
  %arrayIdx2249 = getelementptr inbounds i8, i8* %pix1, i64 %558
  %559 = add nsw i64 %537, 13
  %arrayIdx2251 = getelementptr inbounds i8, i8* %pix2, i64 %559
  %560 = add nsw i64 %536, 10
  %arrayIdx2253 = getelementptr inbounds i8, i8* %pix1, i64 %560
  %561 = add nsw i64 %537, 10
  %arrayIdx2255 = getelementptr inbounds i8, i8* %pix2, i64 %561
  %562 = add nsw i64 %536, 14
  %arrayIdx2257 = getelementptr inbounds i8, i8* %pix1, i64 %562
  %563 = add nsw i64 %537, 14
  %arrayIdx2259 = getelementptr inbounds i8, i8* %pix2, i64 %563
  %564 = add nsw i64 %536, 11
  %arrayIdx2261 = getelementptr inbounds i8, i8* %pix1, i64 %564
  %565 = bitcast i8* %arrayIdx2133 to <4 x i8>*
  %566 = bitcast i8* %arrayIdx2137 to <4 x i8>*
  %567 = bitcast i8* %arrayIdx2237 to <4 x i8>*
  %568 = bitcast i8* %arrayIdx2241 to <4 x i8>*
  %569 = bitcast <4 x i8>* %565 to <16 x i8>*
  %570 = load <16 x i8>, <16 x i8>* %569, align 1
  %LoadCoalescingShuffle_48 = shufflevector <16 x i8> %570, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_49 = shufflevector <16 x i8> %570, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_50 = shufflevector <16 x i8> %570, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %LoadCoalescingShuffle_51 = shufflevector <16 x i8> %570, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %SplitLoadShuffle7178 = shufflevector <4 x i8> %LoadCoalescingShuffle_48, <4 x i8> %LoadCoalescingShuffle_50, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %571 = add nsw i64 %537, 11
  %arrayIdx2263 = getelementptr inbounds i8, i8* %pix2, i64 %571
  %572 = bitcast i8* %arrayIdx2135 to <4 x i8>*
  %573 = bitcast i8* %arrayIdx2139 to <4 x i8>*
  %574 = bitcast i8* %arrayIdx2239 to <4 x i8>*
  %575 = bitcast i8* %arrayIdx2243 to <4 x i8>*
  %576 = bitcast <4 x i8>* %572 to <16 x i8>*
  %577 = load <16 x i8>, <16 x i8>* %576, align 1
  %LoadCoalescingShuffle_52 = shufflevector <16 x i8> %577, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_53 = shufflevector <16 x i8> %577, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_54 = shufflevector <16 x i8> %577, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %LoadCoalescingShuffle_55 = shufflevector <16 x i8> %577, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %SplitLoadShuffle7176 = shufflevector <4 x i8> %LoadCoalescingShuffle_52, <4 x i8> %LoadCoalescingShuffle_54, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %578 = add nsw i64 %536, 15
  %arrayIdx2265 = getelementptr inbounds i8, i8* %pix1, i64 %578
  %SplitLoadShuffle7175 = shufflevector <4 x i8> %LoadCoalescingShuffle_49, <4 x i8> %LoadCoalescingShuffle_51, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %579 = add nsw i64 %537, 15
  %arrayIdx2267 = getelementptr inbounds i8, i8* %pix2, i64 %579
  %SplitLoadShuffle7177 = shufflevector <4 x i8> %LoadCoalescingShuffle_53, <4 x i8> %LoadCoalescingShuffle_55, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %arrayIdx2270 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 6, i64 4
  %580 = zext <8 x i8> %SplitLoadShuffle7178 to <8 x i32>
  %581 = zext <8 x i8> %SplitLoadShuffle7175 to <8 x i32>
  %582 = zext <8 x i8> %SplitLoadShuffle7177 to <8 x i32>
  %583 = zext <8 x i8> %SplitLoadShuffle7176 to <8 x i32>
  %584 = shl nuw nsw <8 x i32> %581, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %585 = shl nuw nsw <8 x i32> %582, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %586 = sub nsw <8 x i32> %584, %583
  %587 = sub nsw <8 x i32> %586, %585
  %588 = add nsw <8 x i32> %587, %580
  %arrayIdx2288 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 6, i64 6
  %arrayIdx2306 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 6, i64 5
  %arrayIdx2324 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 6, i64 7
  %589 = extractelement <8 x i32> %588, i32 3
  %590 = insertelement <8 x i32> undef, i32 %589, i32 0
  %591 = extractelement <8 x i32> %588, i32 0
  %592 = insertelement <8 x i32> %590, i32 %591, i32 1
  %593 = insertelement <8 x i32> %592, i32 %591, i32 2
  %594 = insertelement <8 x i32> %593, i32 %591, i32 3
  %595 = extractelement <8 x i32> %588, i32 7
  %596 = insertelement <8 x i32> %594, i32 %595, i32 4
  %597 = extractelement <8 x i32> %588, i32 4
  %598 = insertelement <8 x i32> %596, i32 %597, i32 5
  %599 = insertelement <8 x i32> %598, i32 %597, i32 6
  %600 = insertelement <8 x i32> %599, i32 %597, i32 7
  %601 = extractelement <8 x i32> %588, i32 1
  %602 = insertelement <8 x i32> undef, i32 %601, i32 0
  %603 = insertelement <8 x i32> %602, i32 %589, i32 1
  %604 = insertelement <8 x i32> %603, i32 %601, i32 2
  %605 = insertelement <8 x i32> %604, i32 %601, i32 3
  %606 = extractelement <8 x i32> %588, i32 5
  %607 = insertelement <8 x i32> %605, i32 %606, i32 4
  %608 = insertelement <8 x i32> %607, i32 %595, i32 5
  %609 = insertelement <8 x i32> %608, i32 %606, i32 6
  %610 = insertelement <8 x i32> %609, i32 %606, i32 7
  %611 = add nsw <8 x i32> %600, %610
  %612 = sub nsw <8 x i32> %600, %610
  %613 = select <8 x i1> <i1 true, i1 false, i1 true, i1 false, i1 true, i1 false, i1 true, i1 false>, <8 x i32> %611, <8 x i32> %612
  %614 = extractelement <8 x i32> %588, i32 2
  %615 = insertelement <8 x i32> undef, i32 %614, i32 0
  %616 = insertelement <8 x i32> %615, i32 %614, i32 1
  %617 = insertelement <8 x i32> %616, i32 %589, i32 2
  %618 = insertelement <8 x i32> %617, i32 %614, i32 3
  %619 = extractelement <8 x i32> %588, i32 6
  %620 = insertelement <8 x i32> %618, i32 %619, i32 4
  %621 = insertelement <8 x i32> %620, i32 %619, i32 5
  %622 = insertelement <8 x i32> %621, i32 %595, i32 6
  %623 = insertelement <8 x i32> %622, i32 %619, i32 7
  %624 = add nsw <8 x i32> %613, %623
  %625 = sub nsw <8 x i32> %613, %623
  %626 = select <8 x i1> <i1 true, i1 true, i1 false, i1 false, i1 true, i1 true, i1 false, i1 false>, <8 x i32> %624, <8 x i32> %625
  %627 = sub <8 x i32> %626, %588
  %628 = add <8 x i32> %626, %588
  %629 = select <8 x i1> <i1 true, i1 false, i1 false, i1 true, i1 true, i1 false, i1 false, i1 true>, <8 x i32> %628, <8 x i32> %627
  %630 = bitcast i32* %arrayIdx2166 to <8 x i32>*
  store <8 x i32> %629, <8 x i32>* %630, align 4
  %631 = mul nsw i64 %idx.ext.i, 7
  %arrayIdx2341 = getelementptr inbounds i8, i8* %pix1, i64 %631
  %632 = mul nsw i64 %idx.ext63.i, 7
  %arrayIdx2343 = getelementptr inbounds i8, i8* %pix2, i64 %632
  %633 = add nsw i64 %631, 4
  %arrayIdx2345 = getelementptr inbounds i8, i8* %pix1, i64 %633
  %634 = add nsw i64 %632, 4
  %arrayIdx2347 = getelementptr inbounds i8, i8* %pix2, i64 %634
  %635 = add nsw i64 %631, 1
  %arrayIdx2349 = getelementptr inbounds i8, i8* %pix1, i64 %635
  %636 = add nsw i64 %632, 1
  %arrayIdx2351 = getelementptr inbounds i8, i8* %pix2, i64 %636
  %637 = add nsw i64 %631, 5
  %arrayIdx2353 = getelementptr inbounds i8, i8* %pix1, i64 %637
  %638 = add nsw i64 %632, 5
  %arrayIdx2355 = getelementptr inbounds i8, i8* %pix2, i64 %638
  %639 = add nsw i64 %631, 2
  %arrayIdx2357 = getelementptr inbounds i8, i8* %pix1, i64 %639
  %640 = add nsw i64 %632, 2
  %arrayIdx2359 = getelementptr inbounds i8, i8* %pix2, i64 %640
  %641 = add nsw i64 %631, 6
  %arrayIdx2361 = getelementptr inbounds i8, i8* %pix1, i64 %641
  %642 = add nsw i64 %632, 6
  %arrayIdx2363 = getelementptr inbounds i8, i8* %pix2, i64 %642
  %643 = add nsw i64 %631, 3
  %arrayIdx2365 = getelementptr inbounds i8, i8* %pix1, i64 %643
  %644 = add nsw i64 %632, 3
  %arrayIdx2367 = getelementptr inbounds i8, i8* %pix2, i64 %644
  %645 = add nsw i64 %631, 7
  %arrayIdx2369 = getelementptr inbounds i8, i8* %pix1, i64 %645
  %646 = add nsw i64 %632, 7
  %arrayIdx2371 = getelementptr inbounds i8, i8* %pix2, i64 %646
  %arrayIdx2374 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 7, i64 0
  %arrayIdx2392 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 7, i64 2
  %arrayIdx2410 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 7, i64 1
  %arrayIdx2428 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 7, i64 3
  %647 = add nsw i64 %631, 8
  %arrayIdx2445 = getelementptr inbounds i8, i8* %pix1, i64 %647
  %648 = add nsw i64 %632, 8
  %arrayIdx2447 = getelementptr inbounds i8, i8* %pix2, i64 %648
  %649 = add nsw i64 %631, 12
  %arrayIdx2449 = getelementptr inbounds i8, i8* %pix1, i64 %649
  %650 = add nsw i64 %632, 12
  %arrayIdx2451 = getelementptr inbounds i8, i8* %pix2, i64 %650
  %651 = add nsw i64 %631, 9
  %arrayIdx2453 = getelementptr inbounds i8, i8* %pix1, i64 %651
  %652 = add nsw i64 %632, 9
  %arrayIdx2455 = getelementptr inbounds i8, i8* %pix2, i64 %652
  %653 = add nsw i64 %631, 13
  %arrayIdx2457 = getelementptr inbounds i8, i8* %pix1, i64 %653
  %654 = add nsw i64 %632, 13
  %arrayIdx2459 = getelementptr inbounds i8, i8* %pix2, i64 %654
  %655 = add nsw i64 %631, 10
  %arrayIdx2461 = getelementptr inbounds i8, i8* %pix1, i64 %655
  %656 = add nsw i64 %632, 10
  %arrayIdx2463 = getelementptr inbounds i8, i8* %pix2, i64 %656
  %657 = add nsw i64 %631, 14
  %arrayIdx2465 = getelementptr inbounds i8, i8* %pix1, i64 %657
  %658 = add nsw i64 %632, 14
  %arrayIdx2467 = getelementptr inbounds i8, i8* %pix2, i64 %658
  %659 = add nsw i64 %631, 11
  %arrayIdx2469 = getelementptr inbounds i8, i8* %pix1, i64 %659
  %660 = bitcast i8* %arrayIdx2341 to <4 x i8>*
  %661 = bitcast i8* %arrayIdx2345 to <4 x i8>*
  %662 = bitcast i8* %arrayIdx2445 to <4 x i8>*
  %663 = bitcast i8* %arrayIdx2449 to <4 x i8>*
  %664 = bitcast <4 x i8>* %660 to <16 x i8>*
  %665 = load <16 x i8>, <16 x i8>* %664, align 1
  %LoadCoalescingShuffle_56 = shufflevector <16 x i8> %665, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_57 = shufflevector <16 x i8> %665, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_58 = shufflevector <16 x i8> %665, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %LoadCoalescingShuffle_59 = shufflevector <16 x i8> %665, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %SplitLoadShuffle7227 = shufflevector <4 x i8> %LoadCoalescingShuffle_56, <4 x i8> %LoadCoalescingShuffle_58, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %666 = add nsw i64 %632, 11
  %arrayIdx2471 = getelementptr inbounds i8, i8* %pix2, i64 %666
  %667 = bitcast i8* %arrayIdx2343 to <4 x i8>*
  %668 = bitcast i8* %arrayIdx2347 to <4 x i8>*
  %669 = bitcast i8* %arrayIdx2447 to <4 x i8>*
  %670 = bitcast i8* %arrayIdx2451 to <4 x i8>*
  %671 = bitcast <4 x i8>* %667 to <16 x i8>*
  %672 = load <16 x i8>, <16 x i8>* %671, align 1
  %LoadCoalescingShuffle_60 = shufflevector <16 x i8> %672, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_61 = shufflevector <16 x i8> %672, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_62 = shufflevector <16 x i8> %672, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %LoadCoalescingShuffle_63 = shufflevector <16 x i8> %672, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %SplitLoadShuffle7225 = shufflevector <4 x i8> %LoadCoalescingShuffle_60, <4 x i8> %LoadCoalescingShuffle_62, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %673 = add nsw i64 %631, 15
  %arrayIdx2473 = getelementptr inbounds i8, i8* %pix1, i64 %673
  %SplitLoadShuffle7224 = shufflevector <4 x i8> %LoadCoalescingShuffle_57, <4 x i8> %LoadCoalescingShuffle_59, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %674 = add nsw i64 %632, 15
  %arrayIdx2475 = getelementptr inbounds i8, i8* %pix2, i64 %674
  %SplitLoadShuffle7226 = shufflevector <4 x i8> %LoadCoalescingShuffle_61, <4 x i8> %LoadCoalescingShuffle_63, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %arrayIdx2478 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 7, i64 4
  %675 = zext <8 x i8> %SplitLoadShuffle7227 to <8 x i32>
  %676 = zext <8 x i8> %SplitLoadShuffle7224 to <8 x i32>
  %677 = zext <8 x i8> %SplitLoadShuffle7226 to <8 x i32>
  %678 = zext <8 x i8> %SplitLoadShuffle7225 to <8 x i32>
  %679 = shl nuw nsw <8 x i32> %676, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %680 = shl nuw nsw <8 x i32> %677, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %681 = sub nsw <8 x i32> %679, %678
  %682 = sub nsw <8 x i32> %681, %680
  %683 = add nsw <8 x i32> %682, %675
  %arrayIdx2496 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 7, i64 6
  %arrayIdx2514 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 7, i64 5
  %arrayIdx2532 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 7, i64 7
  %684 = extractelement <8 x i32> %683, i32 3
  %685 = insertelement <8 x i32> undef, i32 %684, i32 0
  %686 = extractelement <8 x i32> %683, i32 0
  %687 = insertelement <8 x i32> %685, i32 %686, i32 1
  %688 = insertelement <8 x i32> %687, i32 %686, i32 2
  %689 = insertelement <8 x i32> %688, i32 %686, i32 3
  %690 = extractelement <8 x i32> %683, i32 7
  %691 = insertelement <8 x i32> %689, i32 %690, i32 4
  %692 = extractelement <8 x i32> %683, i32 4
  %693 = insertelement <8 x i32> %691, i32 %692, i32 5
  %694 = insertelement <8 x i32> %693, i32 %692, i32 6
  %695 = insertelement <8 x i32> %694, i32 %692, i32 7
  %696 = extractelement <8 x i32> %683, i32 1
  %697 = insertelement <8 x i32> undef, i32 %696, i32 0
  %698 = insertelement <8 x i32> %697, i32 %684, i32 1
  %699 = insertelement <8 x i32> %698, i32 %696, i32 2
  %700 = insertelement <8 x i32> %699, i32 %696, i32 3
  %701 = extractelement <8 x i32> %683, i32 5
  %702 = insertelement <8 x i32> %700, i32 %701, i32 4
  %703 = insertelement <8 x i32> %702, i32 %690, i32 5
  %704 = insertelement <8 x i32> %703, i32 %701, i32 6
  %705 = insertelement <8 x i32> %704, i32 %701, i32 7
  %706 = add nsw <8 x i32> %695, %705
  %707 = sub nsw <8 x i32> %695, %705
  %708 = select <8 x i1> <i1 true, i1 false, i1 true, i1 false, i1 true, i1 false, i1 true, i1 false>, <8 x i32> %706, <8 x i32> %707
  %709 = extractelement <8 x i32> %683, i32 2
  %710 = insertelement <8 x i32> undef, i32 %709, i32 0
  %711 = insertelement <8 x i32> %710, i32 %709, i32 1
  %712 = insertelement <8 x i32> %711, i32 %684, i32 2
  %713 = insertelement <8 x i32> %712, i32 %709, i32 3
  %714 = extractelement <8 x i32> %683, i32 6
  %715 = insertelement <8 x i32> %713, i32 %714, i32 4
  %716 = insertelement <8 x i32> %715, i32 %714, i32 5
  %717 = insertelement <8 x i32> %716, i32 %690, i32 6
  %718 = insertelement <8 x i32> %717, i32 %714, i32 7
  %719 = add nsw <8 x i32> %708, %718
  %720 = sub nsw <8 x i32> %708, %718
  %721 = select <8 x i1> <i1 true, i1 true, i1 false, i1 false, i1 true, i1 true, i1 false, i1 false>, <8 x i32> %719, <8 x i32> %720
  %722 = sub <8 x i32> %721, %683
  %723 = add <8 x i32> %721, %683
  %724 = select <8 x i1> <i1 true, i1 false, i1 false, i1 true, i1 true, i1 false, i1 false, i1 true>, <8 x i32> %723, <8 x i32> %722
  %725 = bitcast i32* %arrayIdx2374 to <8 x i32>*
  store <8 x i32> %724, <8 x i32>* %725, align 4
  %726 = shl nsw i64 %idx.ext.i, 3
  %arrayIdx2549 = getelementptr inbounds i8, i8* %pix1, i64 %726
  %727 = shl nsw i64 %idx.ext63.i, 3
  %arrayIdx2551 = getelementptr inbounds i8, i8* %pix2, i64 %727
  %728 = or i64 %726, 4
  %arrayIdx2553 = getelementptr inbounds i8, i8* %pix1, i64 %728
  %729 = or i64 %727, 4
  %arrayIdx2555 = getelementptr inbounds i8, i8* %pix2, i64 %729
  %730 = or i64 %726, 1
  %arrayIdx2557 = getelementptr inbounds i8, i8* %pix1, i64 %730
  %731 = or i64 %727, 1
  %arrayIdx2559 = getelementptr inbounds i8, i8* %pix2, i64 %731
  %732 = or i64 %726, 5
  %arrayIdx2561 = getelementptr inbounds i8, i8* %pix1, i64 %732
  %733 = or i64 %727, 5
  %arrayIdx2563 = getelementptr inbounds i8, i8* %pix2, i64 %733
  %734 = or i64 %726, 2
  %arrayIdx2565 = getelementptr inbounds i8, i8* %pix1, i64 %734
  %735 = or i64 %727, 2
  %arrayIdx2567 = getelementptr inbounds i8, i8* %pix2, i64 %735
  %736 = or i64 %726, 6
  %arrayIdx2569 = getelementptr inbounds i8, i8* %pix1, i64 %736
  %737 = or i64 %727, 6
  %arrayIdx2571 = getelementptr inbounds i8, i8* %pix2, i64 %737
  %738 = or i64 %726, 3
  %arrayIdx2573 = getelementptr inbounds i8, i8* %pix1, i64 %738
  %739 = or i64 %727, 3
  %arrayIdx2575 = getelementptr inbounds i8, i8* %pix2, i64 %739
  %740 = or i64 %726, 7
  %arrayIdx2577 = getelementptr inbounds i8, i8* %pix1, i64 %740
  %741 = or i64 %727, 7
  %arrayIdx2579 = getelementptr inbounds i8, i8* %pix2, i64 %741
  %arrayIdx2582 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 8, i64 0
  %arrayIdx2600 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 8, i64 2
  %arrayIdx2618 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 8, i64 1
  %arrayIdx2636 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 8, i64 3
  %742 = add nsw i64 %726, 8
  %arrayIdx2653 = getelementptr inbounds i8, i8* %pix1, i64 %742
  %743 = add nsw i64 %727, 8
  %arrayIdx2655 = getelementptr inbounds i8, i8* %pix2, i64 %743
  %744 = add nsw i64 %726, 12
  %arrayIdx2657 = getelementptr inbounds i8, i8* %pix1, i64 %744
  %745 = add nsw i64 %727, 12
  %arrayIdx2659 = getelementptr inbounds i8, i8* %pix2, i64 %745
  %746 = add nsw i64 %726, 9
  %arrayIdx2661 = getelementptr inbounds i8, i8* %pix1, i64 %746
  %747 = add nsw i64 %727, 9
  %arrayIdx2663 = getelementptr inbounds i8, i8* %pix2, i64 %747
  %748 = add nsw i64 %726, 13
  %arrayIdx2665 = getelementptr inbounds i8, i8* %pix1, i64 %748
  %749 = add nsw i64 %727, 13
  %arrayIdx2667 = getelementptr inbounds i8, i8* %pix2, i64 %749
  %750 = add nsw i64 %726, 10
  %arrayIdx2669 = getelementptr inbounds i8, i8* %pix1, i64 %750
  %751 = add nsw i64 %727, 10
  %arrayIdx2671 = getelementptr inbounds i8, i8* %pix2, i64 %751
  %752 = add nsw i64 %726, 14
  %arrayIdx2673 = getelementptr inbounds i8, i8* %pix1, i64 %752
  %753 = add nsw i64 %727, 14
  %arrayIdx2675 = getelementptr inbounds i8, i8* %pix2, i64 %753
  %754 = add nsw i64 %726, 11
  %arrayIdx2677 = getelementptr inbounds i8, i8* %pix1, i64 %754
  %755 = bitcast i8* %arrayIdx2549 to <4 x i8>*
  %756 = bitcast i8* %arrayIdx2553 to <4 x i8>*
  %757 = bitcast i8* %arrayIdx2653 to <4 x i8>*
  %758 = bitcast i8* %arrayIdx2657 to <4 x i8>*
  %759 = bitcast <4 x i8>* %755 to <16 x i8>*
  %760 = load <16 x i8>, <16 x i8>* %759, align 1
  %LoadCoalescingShuffle_64 = shufflevector <16 x i8> %760, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_65 = shufflevector <16 x i8> %760, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_66 = shufflevector <16 x i8> %760, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %LoadCoalescingShuffle_67 = shufflevector <16 x i8> %760, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %SplitLoadShuffle7276 = shufflevector <4 x i8> %LoadCoalescingShuffle_64, <4 x i8> %LoadCoalescingShuffle_66, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %761 = add nsw i64 %727, 11
  %arrayIdx2679 = getelementptr inbounds i8, i8* %pix2, i64 %761
  %762 = bitcast i8* %arrayIdx2551 to <4 x i8>*
  %763 = bitcast i8* %arrayIdx2555 to <4 x i8>*
  %764 = bitcast i8* %arrayIdx2655 to <4 x i8>*
  %765 = bitcast i8* %arrayIdx2659 to <4 x i8>*
  %766 = bitcast <4 x i8>* %762 to <16 x i8>*
  %767 = load <16 x i8>, <16 x i8>* %766, align 1
  %LoadCoalescingShuffle_68 = shufflevector <16 x i8> %767, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_69 = shufflevector <16 x i8> %767, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_70 = shufflevector <16 x i8> %767, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %LoadCoalescingShuffle_71 = shufflevector <16 x i8> %767, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %SplitLoadShuffle7274 = shufflevector <4 x i8> %LoadCoalescingShuffle_68, <4 x i8> %LoadCoalescingShuffle_70, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %768 = add nsw i64 %726, 15
  %arrayIdx2681 = getelementptr inbounds i8, i8* %pix1, i64 %768
  %SplitLoadShuffle7273 = shufflevector <4 x i8> %LoadCoalescingShuffle_65, <4 x i8> %LoadCoalescingShuffle_67, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %769 = add nsw i64 %727, 15
  %arrayIdx2683 = getelementptr inbounds i8, i8* %pix2, i64 %769
  %SplitLoadShuffle7275 = shufflevector <4 x i8> %LoadCoalescingShuffle_69, <4 x i8> %LoadCoalescingShuffle_71, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %arrayIdx2686 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 8, i64 4
  %770 = zext <8 x i8> %SplitLoadShuffle7276 to <8 x i32>
  %771 = zext <8 x i8> %SplitLoadShuffle7273 to <8 x i32>
  %772 = zext <8 x i8> %SplitLoadShuffle7275 to <8 x i32>
  %773 = zext <8 x i8> %SplitLoadShuffle7274 to <8 x i32>
  %774 = shl nuw nsw <8 x i32> %771, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %775 = shl nuw nsw <8 x i32> %772, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %776 = sub nsw <8 x i32> %774, %773
  %777 = sub nsw <8 x i32> %776, %775
  %778 = add nsw <8 x i32> %777, %770
  %arrayIdx2704 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 8, i64 6
  %arrayIdx2722 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 8, i64 5
  %arrayIdx2740 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 8, i64 7
  %779 = extractelement <8 x i32> %778, i32 3
  %780 = insertelement <8 x i32> undef, i32 %779, i32 0
  %781 = extractelement <8 x i32> %778, i32 0
  %782 = insertelement <8 x i32> %780, i32 %781, i32 1
  %783 = insertelement <8 x i32> %782, i32 %781, i32 2
  %784 = insertelement <8 x i32> %783, i32 %781, i32 3
  %785 = extractelement <8 x i32> %778, i32 7
  %786 = insertelement <8 x i32> %784, i32 %785, i32 4
  %787 = extractelement <8 x i32> %778, i32 4
  %788 = insertelement <8 x i32> %786, i32 %787, i32 5
  %789 = insertelement <8 x i32> %788, i32 %787, i32 6
  %790 = insertelement <8 x i32> %789, i32 %787, i32 7
  %791 = extractelement <8 x i32> %778, i32 1
  %792 = insertelement <8 x i32> undef, i32 %791, i32 0
  %793 = insertelement <8 x i32> %792, i32 %779, i32 1
  %794 = insertelement <8 x i32> %793, i32 %791, i32 2
  %795 = insertelement <8 x i32> %794, i32 %791, i32 3
  %796 = extractelement <8 x i32> %778, i32 5
  %797 = insertelement <8 x i32> %795, i32 %796, i32 4
  %798 = insertelement <8 x i32> %797, i32 %785, i32 5
  %799 = insertelement <8 x i32> %798, i32 %796, i32 6
  %800 = insertelement <8 x i32> %799, i32 %796, i32 7
  %801 = add nsw <8 x i32> %790, %800
  %802 = sub nsw <8 x i32> %790, %800
  %803 = select <8 x i1> <i1 true, i1 false, i1 true, i1 false, i1 true, i1 false, i1 true, i1 false>, <8 x i32> %801, <8 x i32> %802
  %804 = extractelement <8 x i32> %778, i32 2
  %805 = insertelement <8 x i32> undef, i32 %804, i32 0
  %806 = insertelement <8 x i32> %805, i32 %804, i32 1
  %807 = insertelement <8 x i32> %806, i32 %779, i32 2
  %808 = insertelement <8 x i32> %807, i32 %804, i32 3
  %809 = extractelement <8 x i32> %778, i32 6
  %810 = insertelement <8 x i32> %808, i32 %809, i32 4
  %811 = insertelement <8 x i32> %810, i32 %809, i32 5
  %812 = insertelement <8 x i32> %811, i32 %785, i32 6
  %813 = insertelement <8 x i32> %812, i32 %809, i32 7
  %814 = add nsw <8 x i32> %803, %813
  %815 = sub nsw <8 x i32> %803, %813
  %816 = select <8 x i1> <i1 true, i1 true, i1 false, i1 false, i1 true, i1 true, i1 false, i1 false>, <8 x i32> %814, <8 x i32> %815
  %817 = sub <8 x i32> %816, %778
  %818 = add <8 x i32> %816, %778
  %819 = select <8 x i1> <i1 true, i1 false, i1 false, i1 true, i1 true, i1 false, i1 false, i1 true>, <8 x i32> %818, <8 x i32> %817
  %820 = bitcast i32* %arrayIdx2582 to <8 x i32>*
  store <8 x i32> %819, <8 x i32>* %820, align 4
  %821 = mul nsw i64 %idx.ext.i, 9
  %arrayIdx2757 = getelementptr inbounds i8, i8* %pix1, i64 %821
  %822 = mul nsw i64 %idx.ext63.i, 9
  %arrayIdx2759 = getelementptr inbounds i8, i8* %pix2, i64 %822
  %823 = add nsw i64 %821, 4
  %arrayIdx2761 = getelementptr inbounds i8, i8* %pix1, i64 %823
  %824 = add nsw i64 %822, 4
  %arrayIdx2763 = getelementptr inbounds i8, i8* %pix2, i64 %824
  %825 = add nsw i64 %821, 1
  %arrayIdx2765 = getelementptr inbounds i8, i8* %pix1, i64 %825
  %826 = add nsw i64 %822, 1
  %arrayIdx2767 = getelementptr inbounds i8, i8* %pix2, i64 %826
  %827 = add nsw i64 %821, 5
  %arrayIdx2769 = getelementptr inbounds i8, i8* %pix1, i64 %827
  %828 = add nsw i64 %822, 5
  %arrayIdx2771 = getelementptr inbounds i8, i8* %pix2, i64 %828
  %829 = add nsw i64 %821, 2
  %arrayIdx2773 = getelementptr inbounds i8, i8* %pix1, i64 %829
  %830 = add nsw i64 %822, 2
  %arrayIdx2775 = getelementptr inbounds i8, i8* %pix2, i64 %830
  %831 = add nsw i64 %821, 6
  %arrayIdx2777 = getelementptr inbounds i8, i8* %pix1, i64 %831
  %832 = add nsw i64 %822, 6
  %arrayIdx2779 = getelementptr inbounds i8, i8* %pix2, i64 %832
  %833 = add nsw i64 %821, 3
  %arrayIdx2781 = getelementptr inbounds i8, i8* %pix1, i64 %833
  %834 = add nsw i64 %822, 3
  %arrayIdx2783 = getelementptr inbounds i8, i8* %pix2, i64 %834
  %835 = add nsw i64 %821, 7
  %arrayIdx2785 = getelementptr inbounds i8, i8* %pix1, i64 %835
  %836 = add nsw i64 %822, 7
  %arrayIdx2787 = getelementptr inbounds i8, i8* %pix2, i64 %836
  %arrayIdx2790 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 9, i64 0
  %arrayIdx2808 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 9, i64 2
  %arrayIdx2826 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 9, i64 1
  %arrayIdx2844 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 9, i64 3
  %837 = add nsw i64 %821, 8
  %arrayIdx2861 = getelementptr inbounds i8, i8* %pix1, i64 %837
  %838 = add nsw i64 %822, 8
  %arrayIdx2863 = getelementptr inbounds i8, i8* %pix2, i64 %838
  %839 = add nsw i64 %821, 12
  %arrayIdx2865 = getelementptr inbounds i8, i8* %pix1, i64 %839
  %840 = add nsw i64 %822, 12
  %arrayIdx2867 = getelementptr inbounds i8, i8* %pix2, i64 %840
  %841 = add nsw i64 %821, 9
  %arrayIdx2869 = getelementptr inbounds i8, i8* %pix1, i64 %841
  %842 = add nsw i64 %822, 9
  %arrayIdx2871 = getelementptr inbounds i8, i8* %pix2, i64 %842
  %843 = add nsw i64 %821, 13
  %arrayIdx2873 = getelementptr inbounds i8, i8* %pix1, i64 %843
  %844 = add nsw i64 %822, 13
  %arrayIdx2875 = getelementptr inbounds i8, i8* %pix2, i64 %844
  %845 = add nsw i64 %821, 10
  %arrayIdx2877 = getelementptr inbounds i8, i8* %pix1, i64 %845
  %846 = add nsw i64 %822, 10
  %arrayIdx2879 = getelementptr inbounds i8, i8* %pix2, i64 %846
  %847 = add nsw i64 %821, 14
  %arrayIdx2881 = getelementptr inbounds i8, i8* %pix1, i64 %847
  %848 = add nsw i64 %822, 14
  %arrayIdx2883 = getelementptr inbounds i8, i8* %pix2, i64 %848
  %849 = add nsw i64 %821, 11
  %arrayIdx2885 = getelementptr inbounds i8, i8* %pix1, i64 %849
  %850 = bitcast i8* %arrayIdx2757 to <4 x i8>*
  %851 = bitcast i8* %arrayIdx2761 to <4 x i8>*
  %852 = bitcast i8* %arrayIdx2861 to <4 x i8>*
  %853 = bitcast i8* %arrayIdx2865 to <4 x i8>*
  %854 = bitcast <4 x i8>* %850 to <16 x i8>*
  %855 = load <16 x i8>, <16 x i8>* %854, align 1
  %LoadCoalescingShuffle_72 = shufflevector <16 x i8> %855, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_73 = shufflevector <16 x i8> %855, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_74 = shufflevector <16 x i8> %855, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %LoadCoalescingShuffle_75 = shufflevector <16 x i8> %855, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %SplitLoadShuffle7325 = shufflevector <4 x i8> %LoadCoalescingShuffle_72, <4 x i8> %LoadCoalescingShuffle_74, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %856 = add nsw i64 %822, 11
  %arrayIdx2887 = getelementptr inbounds i8, i8* %pix2, i64 %856
  %857 = bitcast i8* %arrayIdx2759 to <4 x i8>*
  %858 = bitcast i8* %arrayIdx2763 to <4 x i8>*
  %859 = bitcast i8* %arrayIdx2863 to <4 x i8>*
  %860 = bitcast i8* %arrayIdx2867 to <4 x i8>*
  %861 = bitcast <4 x i8>* %857 to <16 x i8>*
  %862 = load <16 x i8>, <16 x i8>* %861, align 1
  %LoadCoalescingShuffle_76 = shufflevector <16 x i8> %862, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_77 = shufflevector <16 x i8> %862, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_78 = shufflevector <16 x i8> %862, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %LoadCoalescingShuffle_79 = shufflevector <16 x i8> %862, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %SplitLoadShuffle7323 = shufflevector <4 x i8> %LoadCoalescingShuffle_76, <4 x i8> %LoadCoalescingShuffle_78, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %863 = add nsw i64 %821, 15
  %arrayIdx2889 = getelementptr inbounds i8, i8* %pix1, i64 %863
  %SplitLoadShuffle7322 = shufflevector <4 x i8> %LoadCoalescingShuffle_73, <4 x i8> %LoadCoalescingShuffle_75, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %864 = add nsw i64 %822, 15
  %arrayIdx2891 = getelementptr inbounds i8, i8* %pix2, i64 %864
  %SplitLoadShuffle7324 = shufflevector <4 x i8> %LoadCoalescingShuffle_77, <4 x i8> %LoadCoalescingShuffle_79, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %arrayIdx2894 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 9, i64 4
  %865 = zext <8 x i8> %SplitLoadShuffle7325 to <8 x i32>
  %866 = zext <8 x i8> %SplitLoadShuffle7322 to <8 x i32>
  %867 = zext <8 x i8> %SplitLoadShuffle7324 to <8 x i32>
  %868 = zext <8 x i8> %SplitLoadShuffle7323 to <8 x i32>
  %869 = shl nuw nsw <8 x i32> %866, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %870 = shl nuw nsw <8 x i32> %867, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %871 = sub nsw <8 x i32> %869, %868
  %872 = sub nsw <8 x i32> %871, %870
  %873 = add nsw <8 x i32> %872, %865
  %arrayIdx2912 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 9, i64 6
  %arrayIdx2930 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 9, i64 5
  %arrayIdx2948 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 9, i64 7
  %874 = extractelement <8 x i32> %873, i32 3
  %875 = insertelement <8 x i32> undef, i32 %874, i32 0
  %876 = extractelement <8 x i32> %873, i32 0
  %877 = insertelement <8 x i32> %875, i32 %876, i32 1
  %878 = insertelement <8 x i32> %877, i32 %876, i32 2
  %879 = insertelement <8 x i32> %878, i32 %876, i32 3
  %880 = extractelement <8 x i32> %873, i32 7
  %881 = insertelement <8 x i32> %879, i32 %880, i32 4
  %882 = extractelement <8 x i32> %873, i32 4
  %883 = insertelement <8 x i32> %881, i32 %882, i32 5
  %884 = insertelement <8 x i32> %883, i32 %882, i32 6
  %885 = insertelement <8 x i32> %884, i32 %882, i32 7
  %886 = extractelement <8 x i32> %873, i32 1
  %887 = insertelement <8 x i32> undef, i32 %886, i32 0
  %888 = insertelement <8 x i32> %887, i32 %874, i32 1
  %889 = insertelement <8 x i32> %888, i32 %886, i32 2
  %890 = insertelement <8 x i32> %889, i32 %886, i32 3
  %891 = extractelement <8 x i32> %873, i32 5
  %892 = insertelement <8 x i32> %890, i32 %891, i32 4
  %893 = insertelement <8 x i32> %892, i32 %880, i32 5
  %894 = insertelement <8 x i32> %893, i32 %891, i32 6
  %895 = insertelement <8 x i32> %894, i32 %891, i32 7
  %896 = add nsw <8 x i32> %885, %895
  %897 = sub nsw <8 x i32> %885, %895
  %898 = select <8 x i1> <i1 true, i1 false, i1 true, i1 false, i1 true, i1 false, i1 true, i1 false>, <8 x i32> %896, <8 x i32> %897
  %899 = extractelement <8 x i32> %873, i32 2
  %900 = insertelement <8 x i32> undef, i32 %899, i32 0
  %901 = insertelement <8 x i32> %900, i32 %899, i32 1
  %902 = insertelement <8 x i32> %901, i32 %874, i32 2
  %903 = insertelement <8 x i32> %902, i32 %899, i32 3
  %904 = extractelement <8 x i32> %873, i32 6
  %905 = insertelement <8 x i32> %903, i32 %904, i32 4
  %906 = insertelement <8 x i32> %905, i32 %904, i32 5
  %907 = insertelement <8 x i32> %906, i32 %880, i32 6
  %908 = insertelement <8 x i32> %907, i32 %904, i32 7
  %909 = add nsw <8 x i32> %898, %908
  %910 = sub nsw <8 x i32> %898, %908
  %911 = select <8 x i1> <i1 true, i1 true, i1 false, i1 false, i1 true, i1 true, i1 false, i1 false>, <8 x i32> %909, <8 x i32> %910
  %912 = sub <8 x i32> %911, %873
  %913 = add <8 x i32> %911, %873
  %914 = select <8 x i1> <i1 true, i1 false, i1 false, i1 true, i1 true, i1 false, i1 false, i1 true>, <8 x i32> %913, <8 x i32> %912
  %915 = bitcast i32* %arrayIdx2790 to <8 x i32>*
  store <8 x i32> %914, <8 x i32>* %915, align 4
  %916 = mul nsw i64 %idx.ext.i, 10
  %arrayIdx2965 = getelementptr inbounds i8, i8* %pix1, i64 %916
  %917 = mul nsw i64 %idx.ext63.i, 10
  %arrayIdx2967 = getelementptr inbounds i8, i8* %pix2, i64 %917
  %918 = add nsw i64 %916, 4
  %arrayIdx2969 = getelementptr inbounds i8, i8* %pix1, i64 %918
  %919 = add nsw i64 %917, 4
  %arrayIdx2971 = getelementptr inbounds i8, i8* %pix2, i64 %919
  %920 = or i64 %916, 1
  %arrayIdx2973 = getelementptr inbounds i8, i8* %pix1, i64 %920
  %921 = or i64 %917, 1
  %arrayIdx2975 = getelementptr inbounds i8, i8* %pix2, i64 %921
  %922 = add nsw i64 %916, 5
  %arrayIdx2977 = getelementptr inbounds i8, i8* %pix1, i64 %922
  %923 = add nsw i64 %917, 5
  %arrayIdx2979 = getelementptr inbounds i8, i8* %pix2, i64 %923
  %924 = add nsw i64 %916, 2
  %arrayIdx2981 = getelementptr inbounds i8, i8* %pix1, i64 %924
  %925 = add nsw i64 %917, 2
  %arrayIdx2983 = getelementptr inbounds i8, i8* %pix2, i64 %925
  %926 = add nsw i64 %916, 6
  %arrayIdx2985 = getelementptr inbounds i8, i8* %pix1, i64 %926
  %927 = add nsw i64 %917, 6
  %arrayIdx2987 = getelementptr inbounds i8, i8* %pix2, i64 %927
  %928 = add nsw i64 %916, 3
  %arrayIdx2989 = getelementptr inbounds i8, i8* %pix1, i64 %928
  %929 = add nsw i64 %917, 3
  %arrayIdx2991 = getelementptr inbounds i8, i8* %pix2, i64 %929
  %930 = add nsw i64 %916, 7
  %arrayIdx2993 = getelementptr inbounds i8, i8* %pix1, i64 %930
  %931 = add nsw i64 %917, 7
  %arrayIdx2995 = getelementptr inbounds i8, i8* %pix2, i64 %931
  %arrayIdx2998 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 10, i64 0
  %arrayIdx3016 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 10, i64 2
  %arrayIdx3034 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 10, i64 1
  %arrayIdx3052 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 10, i64 3
  %932 = add nsw i64 %916, 8
  %arrayIdx3069 = getelementptr inbounds i8, i8* %pix1, i64 %932
  %933 = add nsw i64 %917, 8
  %arrayIdx3071 = getelementptr inbounds i8, i8* %pix2, i64 %933
  %934 = add nsw i64 %916, 12
  %arrayIdx3073 = getelementptr inbounds i8, i8* %pix1, i64 %934
  %935 = add nsw i64 %917, 12
  %arrayIdx3075 = getelementptr inbounds i8, i8* %pix2, i64 %935
  %936 = add nsw i64 %916, 9
  %arrayIdx3077 = getelementptr inbounds i8, i8* %pix1, i64 %936
  %937 = add nsw i64 %917, 9
  %arrayIdx3079 = getelementptr inbounds i8, i8* %pix2, i64 %937
  %938 = add nsw i64 %916, 13
  %arrayIdx3081 = getelementptr inbounds i8, i8* %pix1, i64 %938
  %939 = add nsw i64 %917, 13
  %arrayIdx3083 = getelementptr inbounds i8, i8* %pix2, i64 %939
  %940 = add nsw i64 %916, 10
  %arrayIdx3085 = getelementptr inbounds i8, i8* %pix1, i64 %940
  %941 = add nsw i64 %917, 10
  %arrayIdx3087 = getelementptr inbounds i8, i8* %pix2, i64 %941
  %942 = add nsw i64 %916, 14
  %arrayIdx3089 = getelementptr inbounds i8, i8* %pix1, i64 %942
  %943 = add nsw i64 %917, 14
  %arrayIdx3091 = getelementptr inbounds i8, i8* %pix2, i64 %943
  %944 = add nsw i64 %916, 11
  %arrayIdx3093 = getelementptr inbounds i8, i8* %pix1, i64 %944
  %945 = bitcast i8* %arrayIdx2965 to <4 x i8>*
  %946 = bitcast i8* %arrayIdx2969 to <4 x i8>*
  %947 = bitcast i8* %arrayIdx3069 to <4 x i8>*
  %948 = bitcast i8* %arrayIdx3073 to <4 x i8>*
  %949 = bitcast <4 x i8>* %945 to <16 x i8>*
  %950 = load <16 x i8>, <16 x i8>* %949, align 1
  %LoadCoalescingShuffle_80 = shufflevector <16 x i8> %950, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_81 = shufflevector <16 x i8> %950, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_82 = shufflevector <16 x i8> %950, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %LoadCoalescingShuffle_83 = shufflevector <16 x i8> %950, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %SplitLoadShuffle7374 = shufflevector <4 x i8> %LoadCoalescingShuffle_80, <4 x i8> %LoadCoalescingShuffle_82, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %951 = add nsw i64 %917, 11
  %arrayIdx3095 = getelementptr inbounds i8, i8* %pix2, i64 %951
  %952 = bitcast i8* %arrayIdx2967 to <4 x i8>*
  %953 = bitcast i8* %arrayIdx2971 to <4 x i8>*
  %954 = bitcast i8* %arrayIdx3071 to <4 x i8>*
  %955 = bitcast i8* %arrayIdx3075 to <4 x i8>*
  %956 = bitcast <4 x i8>* %952 to <16 x i8>*
  %957 = load <16 x i8>, <16 x i8>* %956, align 1
  %LoadCoalescingShuffle_84 = shufflevector <16 x i8> %957, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_85 = shufflevector <16 x i8> %957, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_86 = shufflevector <16 x i8> %957, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %LoadCoalescingShuffle_87 = shufflevector <16 x i8> %957, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %SplitLoadShuffle7372 = shufflevector <4 x i8> %LoadCoalescingShuffle_84, <4 x i8> %LoadCoalescingShuffle_86, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %958 = add nsw i64 %916, 15
  %arrayIdx3097 = getelementptr inbounds i8, i8* %pix1, i64 %958
  %SplitLoadShuffle7371 = shufflevector <4 x i8> %LoadCoalescingShuffle_81, <4 x i8> %LoadCoalescingShuffle_83, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %959 = add nsw i64 %917, 15
  %arrayIdx3099 = getelementptr inbounds i8, i8* %pix2, i64 %959
  %SplitLoadShuffle7373 = shufflevector <4 x i8> %LoadCoalescingShuffle_85, <4 x i8> %LoadCoalescingShuffle_87, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %arrayIdx3102 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 10, i64 4
  %960 = zext <8 x i8> %SplitLoadShuffle7374 to <8 x i32>
  %961 = zext <8 x i8> %SplitLoadShuffle7371 to <8 x i32>
  %962 = zext <8 x i8> %SplitLoadShuffle7373 to <8 x i32>
  %963 = zext <8 x i8> %SplitLoadShuffle7372 to <8 x i32>
  %964 = shl nuw nsw <8 x i32> %961, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %965 = shl nuw nsw <8 x i32> %962, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %966 = sub nsw <8 x i32> %964, %963
  %967 = sub nsw <8 x i32> %966, %965
  %968 = add nsw <8 x i32> %967, %960
  %arrayIdx3120 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 10, i64 6
  %arrayIdx3138 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 10, i64 5
  %arrayIdx3156 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 10, i64 7
  %969 = extractelement <8 x i32> %968, i32 3
  %970 = insertelement <8 x i32> undef, i32 %969, i32 0
  %971 = extractelement <8 x i32> %968, i32 0
  %972 = insertelement <8 x i32> %970, i32 %971, i32 1
  %973 = insertelement <8 x i32> %972, i32 %971, i32 2
  %974 = insertelement <8 x i32> %973, i32 %971, i32 3
  %975 = extractelement <8 x i32> %968, i32 7
  %976 = insertelement <8 x i32> %974, i32 %975, i32 4
  %977 = extractelement <8 x i32> %968, i32 4
  %978 = insertelement <8 x i32> %976, i32 %977, i32 5
  %979 = insertelement <8 x i32> %978, i32 %977, i32 6
  %980 = insertelement <8 x i32> %979, i32 %977, i32 7
  %981 = extractelement <8 x i32> %968, i32 1
  %982 = insertelement <8 x i32> undef, i32 %981, i32 0
  %983 = insertelement <8 x i32> %982, i32 %969, i32 1
  %984 = insertelement <8 x i32> %983, i32 %981, i32 2
  %985 = insertelement <8 x i32> %984, i32 %981, i32 3
  %986 = extractelement <8 x i32> %968, i32 5
  %987 = insertelement <8 x i32> %985, i32 %986, i32 4
  %988 = insertelement <8 x i32> %987, i32 %975, i32 5
  %989 = insertelement <8 x i32> %988, i32 %986, i32 6
  %990 = insertelement <8 x i32> %989, i32 %986, i32 7
  %991 = add nsw <8 x i32> %980, %990
  %992 = sub nsw <8 x i32> %980, %990
  %993 = select <8 x i1> <i1 true, i1 false, i1 true, i1 false, i1 true, i1 false, i1 true, i1 false>, <8 x i32> %991, <8 x i32> %992
  %994 = extractelement <8 x i32> %968, i32 2
  %995 = insertelement <8 x i32> undef, i32 %994, i32 0
  %996 = insertelement <8 x i32> %995, i32 %994, i32 1
  %997 = insertelement <8 x i32> %996, i32 %969, i32 2
  %998 = insertelement <8 x i32> %997, i32 %994, i32 3
  %999 = extractelement <8 x i32> %968, i32 6
  %1000 = insertelement <8 x i32> %998, i32 %999, i32 4
  %1001 = insertelement <8 x i32> %1000, i32 %999, i32 5
  %1002 = insertelement <8 x i32> %1001, i32 %975, i32 6
  %1003 = insertelement <8 x i32> %1002, i32 %999, i32 7
  %1004 = add nsw <8 x i32> %993, %1003
  %1005 = sub nsw <8 x i32> %993, %1003
  %1006 = select <8 x i1> <i1 true, i1 true, i1 false, i1 false, i1 true, i1 true, i1 false, i1 false>, <8 x i32> %1004, <8 x i32> %1005
  %1007 = sub <8 x i32> %1006, %968
  %1008 = add <8 x i32> %1006, %968
  %1009 = select <8 x i1> <i1 true, i1 false, i1 false, i1 true, i1 true, i1 false, i1 false, i1 true>, <8 x i32> %1008, <8 x i32> %1007
  %1010 = bitcast i32* %arrayIdx2998 to <8 x i32>*
  store <8 x i32> %1009, <8 x i32>* %1010, align 4
  %1011 = mul nsw i64 %idx.ext.i, 11
  %arrayIdx3173 = getelementptr inbounds i8, i8* %pix1, i64 %1011
  %1012 = mul nsw i64 %idx.ext63.i, 11
  %arrayIdx3175 = getelementptr inbounds i8, i8* %pix2, i64 %1012
  %1013 = add nsw i64 %1011, 4
  %arrayIdx3177 = getelementptr inbounds i8, i8* %pix1, i64 %1013
  %1014 = add nsw i64 %1012, 4
  %arrayIdx3179 = getelementptr inbounds i8, i8* %pix2, i64 %1014
  %1015 = add nsw i64 %1011, 1
  %arrayIdx3181 = getelementptr inbounds i8, i8* %pix1, i64 %1015
  %1016 = add nsw i64 %1012, 1
  %arrayIdx3183 = getelementptr inbounds i8, i8* %pix2, i64 %1016
  %1017 = add nsw i64 %1011, 5
  %arrayIdx3185 = getelementptr inbounds i8, i8* %pix1, i64 %1017
  %1018 = add nsw i64 %1012, 5
  %arrayIdx3187 = getelementptr inbounds i8, i8* %pix2, i64 %1018
  %1019 = add nsw i64 %1011, 2
  %arrayIdx3189 = getelementptr inbounds i8, i8* %pix1, i64 %1019
  %1020 = add nsw i64 %1012, 2
  %arrayIdx3191 = getelementptr inbounds i8, i8* %pix2, i64 %1020
  %1021 = add nsw i64 %1011, 6
  %arrayIdx3193 = getelementptr inbounds i8, i8* %pix1, i64 %1021
  %1022 = add nsw i64 %1012, 6
  %arrayIdx3195 = getelementptr inbounds i8, i8* %pix2, i64 %1022
  %1023 = add nsw i64 %1011, 3
  %arrayIdx3197 = getelementptr inbounds i8, i8* %pix1, i64 %1023
  %1024 = add nsw i64 %1012, 3
  %arrayIdx3199 = getelementptr inbounds i8, i8* %pix2, i64 %1024
  %1025 = add nsw i64 %1011, 7
  %arrayIdx3201 = getelementptr inbounds i8, i8* %pix1, i64 %1025
  %1026 = add nsw i64 %1012, 7
  %arrayIdx3203 = getelementptr inbounds i8, i8* %pix2, i64 %1026
  %arrayIdx3206 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 11, i64 0
  %arrayIdx3224 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 11, i64 2
  %arrayIdx3242 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 11, i64 1
  %arrayIdx3260 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 11, i64 3
  %1027 = add nsw i64 %1011, 8
  %arrayIdx3277 = getelementptr inbounds i8, i8* %pix1, i64 %1027
  %1028 = add nsw i64 %1012, 8
  %arrayIdx3279 = getelementptr inbounds i8, i8* %pix2, i64 %1028
  %1029 = add nsw i64 %1011, 12
  %arrayIdx3281 = getelementptr inbounds i8, i8* %pix1, i64 %1029
  %1030 = add nsw i64 %1012, 12
  %arrayIdx3283 = getelementptr inbounds i8, i8* %pix2, i64 %1030
  %1031 = add nsw i64 %1011, 9
  %arrayIdx3285 = getelementptr inbounds i8, i8* %pix1, i64 %1031
  %1032 = add nsw i64 %1012, 9
  %arrayIdx3287 = getelementptr inbounds i8, i8* %pix2, i64 %1032
  %1033 = add nsw i64 %1011, 13
  %arrayIdx3289 = getelementptr inbounds i8, i8* %pix1, i64 %1033
  %1034 = add nsw i64 %1012, 13
  %arrayIdx3291 = getelementptr inbounds i8, i8* %pix2, i64 %1034
  %1035 = add nsw i64 %1011, 10
  %arrayIdx3293 = getelementptr inbounds i8, i8* %pix1, i64 %1035
  %1036 = add nsw i64 %1012, 10
  %arrayIdx3295 = getelementptr inbounds i8, i8* %pix2, i64 %1036
  %1037 = add nsw i64 %1011, 14
  %arrayIdx3297 = getelementptr inbounds i8, i8* %pix1, i64 %1037
  %1038 = add nsw i64 %1012, 14
  %arrayIdx3299 = getelementptr inbounds i8, i8* %pix2, i64 %1038
  %1039 = add nsw i64 %1011, 11
  %arrayIdx3301 = getelementptr inbounds i8, i8* %pix1, i64 %1039
  %1040 = bitcast i8* %arrayIdx3173 to <4 x i8>*
  %1041 = bitcast i8* %arrayIdx3177 to <4 x i8>*
  %1042 = bitcast i8* %arrayIdx3277 to <4 x i8>*
  %1043 = bitcast i8* %arrayIdx3281 to <4 x i8>*
  %1044 = bitcast <4 x i8>* %1040 to <16 x i8>*
  %1045 = load <16 x i8>, <16 x i8>* %1044, align 1
  %LoadCoalescingShuffle_88 = shufflevector <16 x i8> %1045, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_89 = shufflevector <16 x i8> %1045, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_90 = shufflevector <16 x i8> %1045, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %LoadCoalescingShuffle_91 = shufflevector <16 x i8> %1045, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %SplitLoadShuffle7423 = shufflevector <4 x i8> %LoadCoalescingShuffle_88, <4 x i8> %LoadCoalescingShuffle_90, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1046 = add nsw i64 %1012, 11
  %arrayIdx3303 = getelementptr inbounds i8, i8* %pix2, i64 %1046
  %1047 = bitcast i8* %arrayIdx3175 to <4 x i8>*
  %1048 = bitcast i8* %arrayIdx3179 to <4 x i8>*
  %1049 = bitcast i8* %arrayIdx3279 to <4 x i8>*
  %1050 = bitcast i8* %arrayIdx3283 to <4 x i8>*
  %1051 = bitcast <4 x i8>* %1047 to <16 x i8>*
  %1052 = load <16 x i8>, <16 x i8>* %1051, align 1
  %LoadCoalescingShuffle_92 = shufflevector <16 x i8> %1052, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_93 = shufflevector <16 x i8> %1052, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_94 = shufflevector <16 x i8> %1052, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %LoadCoalescingShuffle_95 = shufflevector <16 x i8> %1052, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %SplitLoadShuffle7421 = shufflevector <4 x i8> %LoadCoalescingShuffle_92, <4 x i8> %LoadCoalescingShuffle_94, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1053 = add nsw i64 %1011, 15
  %arrayIdx3305 = getelementptr inbounds i8, i8* %pix1, i64 %1053
  %SplitLoadShuffle7420 = shufflevector <4 x i8> %LoadCoalescingShuffle_89, <4 x i8> %LoadCoalescingShuffle_91, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1054 = add nsw i64 %1012, 15
  %arrayIdx3307 = getelementptr inbounds i8, i8* %pix2, i64 %1054
  %SplitLoadShuffle7422 = shufflevector <4 x i8> %LoadCoalescingShuffle_93, <4 x i8> %LoadCoalescingShuffle_95, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %arrayIdx3310 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 11, i64 4
  %1055 = zext <8 x i8> %SplitLoadShuffle7423 to <8 x i32>
  %1056 = zext <8 x i8> %SplitLoadShuffle7420 to <8 x i32>
  %1057 = zext <8 x i8> %SplitLoadShuffle7422 to <8 x i32>
  %1058 = zext <8 x i8> %SplitLoadShuffle7421 to <8 x i32>
  %1059 = shl nuw nsw <8 x i32> %1056, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %1060 = shl nuw nsw <8 x i32> %1057, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %1061 = sub nsw <8 x i32> %1059, %1058
  %1062 = sub nsw <8 x i32> %1061, %1060
  %1063 = add nsw <8 x i32> %1062, %1055
  %arrayIdx3328 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 11, i64 6
  %arrayIdx3346 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 11, i64 5
  %arrayIdx3364 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 11, i64 7
  %1064 = extractelement <8 x i32> %1063, i32 3
  %1065 = insertelement <8 x i32> undef, i32 %1064, i32 0
  %1066 = extractelement <8 x i32> %1063, i32 0
  %1067 = insertelement <8 x i32> %1065, i32 %1066, i32 1
  %1068 = insertelement <8 x i32> %1067, i32 %1066, i32 2
  %1069 = insertelement <8 x i32> %1068, i32 %1066, i32 3
  %1070 = extractelement <8 x i32> %1063, i32 7
  %1071 = insertelement <8 x i32> %1069, i32 %1070, i32 4
  %1072 = extractelement <8 x i32> %1063, i32 4
  %1073 = insertelement <8 x i32> %1071, i32 %1072, i32 5
  %1074 = insertelement <8 x i32> %1073, i32 %1072, i32 6
  %1075 = insertelement <8 x i32> %1074, i32 %1072, i32 7
  %1076 = extractelement <8 x i32> %1063, i32 1
  %1077 = insertelement <8 x i32> undef, i32 %1076, i32 0
  %1078 = insertelement <8 x i32> %1077, i32 %1064, i32 1
  %1079 = insertelement <8 x i32> %1078, i32 %1076, i32 2
  %1080 = insertelement <8 x i32> %1079, i32 %1076, i32 3
  %1081 = extractelement <8 x i32> %1063, i32 5
  %1082 = insertelement <8 x i32> %1080, i32 %1081, i32 4
  %1083 = insertelement <8 x i32> %1082, i32 %1070, i32 5
  %1084 = insertelement <8 x i32> %1083, i32 %1081, i32 6
  %1085 = insertelement <8 x i32> %1084, i32 %1081, i32 7
  %1086 = add nsw <8 x i32> %1075, %1085
  %1087 = sub nsw <8 x i32> %1075, %1085
  %1088 = select <8 x i1> <i1 true, i1 false, i1 true, i1 false, i1 true, i1 false, i1 true, i1 false>, <8 x i32> %1086, <8 x i32> %1087
  %1089 = extractelement <8 x i32> %1063, i32 2
  %1090 = insertelement <8 x i32> undef, i32 %1089, i32 0
  %1091 = insertelement <8 x i32> %1090, i32 %1089, i32 1
  %1092 = insertelement <8 x i32> %1091, i32 %1064, i32 2
  %1093 = insertelement <8 x i32> %1092, i32 %1089, i32 3
  %1094 = extractelement <8 x i32> %1063, i32 6
  %1095 = insertelement <8 x i32> %1093, i32 %1094, i32 4
  %1096 = insertelement <8 x i32> %1095, i32 %1094, i32 5
  %1097 = insertelement <8 x i32> %1096, i32 %1070, i32 6
  %1098 = insertelement <8 x i32> %1097, i32 %1094, i32 7
  %1099 = add nsw <8 x i32> %1088, %1098
  %1100 = sub nsw <8 x i32> %1088, %1098
  %1101 = select <8 x i1> <i1 true, i1 true, i1 false, i1 false, i1 true, i1 true, i1 false, i1 false>, <8 x i32> %1099, <8 x i32> %1100
  %1102 = sub <8 x i32> %1101, %1063
  %1103 = add <8 x i32> %1101, %1063
  %1104 = select <8 x i1> <i1 true, i1 false, i1 false, i1 true, i1 true, i1 false, i1 false, i1 true>, <8 x i32> %1103, <8 x i32> %1102
  %1105 = bitcast i32* %arrayIdx3206 to <8 x i32>*
  store <8 x i32> %1104, <8 x i32>* %1105, align 4
  %1106 = mul nsw i64 %idx.ext.i, 12
  %arrayIdx3381 = getelementptr inbounds i8, i8* %pix1, i64 %1106
  %1107 = mul nsw i64 %idx.ext63.i, 12
  %arrayIdx3383 = getelementptr inbounds i8, i8* %pix2, i64 %1107
  %1108 = add nsw i64 %1106, 4
  %arrayIdx3385 = getelementptr inbounds i8, i8* %pix1, i64 %1108
  %1109 = add nsw i64 %1107, 4
  %arrayIdx3387 = getelementptr inbounds i8, i8* %pix2, i64 %1109
  %1110 = or i64 %1106, 1
  %arrayIdx3389 = getelementptr inbounds i8, i8* %pix1, i64 %1110
  %1111 = or i64 %1107, 1
  %arrayIdx3391 = getelementptr inbounds i8, i8* %pix2, i64 %1111
  %1112 = add nsw i64 %1106, 5
  %arrayIdx3393 = getelementptr inbounds i8, i8* %pix1, i64 %1112
  %1113 = add nsw i64 %1107, 5
  %arrayIdx3395 = getelementptr inbounds i8, i8* %pix2, i64 %1113
  %1114 = or i64 %1106, 2
  %arrayIdx3397 = getelementptr inbounds i8, i8* %pix1, i64 %1114
  %1115 = or i64 %1107, 2
  %arrayIdx3399 = getelementptr inbounds i8, i8* %pix2, i64 %1115
  %1116 = add nsw i64 %1106, 6
  %arrayIdx3401 = getelementptr inbounds i8, i8* %pix1, i64 %1116
  %1117 = add nsw i64 %1107, 6
  %arrayIdx3403 = getelementptr inbounds i8, i8* %pix2, i64 %1117
  %1118 = or i64 %1106, 3
  %arrayIdx3405 = getelementptr inbounds i8, i8* %pix1, i64 %1118
  %1119 = or i64 %1107, 3
  %arrayIdx3407 = getelementptr inbounds i8, i8* %pix2, i64 %1119
  %1120 = add nsw i64 %1106, 7
  %arrayIdx3409 = getelementptr inbounds i8, i8* %pix1, i64 %1120
  %1121 = add nsw i64 %1107, 7
  %arrayIdx3411 = getelementptr inbounds i8, i8* %pix2, i64 %1121
  %arrayIdx3414 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 12, i64 0
  %arrayIdx3432 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 12, i64 2
  %arrayIdx3450 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 12, i64 1
  %arrayIdx3468 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 12, i64 3
  %1122 = add nsw i64 %1106, 8
  %arrayIdx3485 = getelementptr inbounds i8, i8* %pix1, i64 %1122
  %1123 = add nsw i64 %1107, 8
  %arrayIdx3487 = getelementptr inbounds i8, i8* %pix2, i64 %1123
  %1124 = add nsw i64 %1106, 12
  %arrayIdx3489 = getelementptr inbounds i8, i8* %pix1, i64 %1124
  %1125 = add nsw i64 %1107, 12
  %arrayIdx3491 = getelementptr inbounds i8, i8* %pix2, i64 %1125
  %1126 = add nsw i64 %1106, 9
  %arrayIdx3493 = getelementptr inbounds i8, i8* %pix1, i64 %1126
  %1127 = add nsw i64 %1107, 9
  %arrayIdx3495 = getelementptr inbounds i8, i8* %pix2, i64 %1127
  %1128 = add nsw i64 %1106, 13
  %arrayIdx3497 = getelementptr inbounds i8, i8* %pix1, i64 %1128
  %1129 = add nsw i64 %1107, 13
  %arrayIdx3499 = getelementptr inbounds i8, i8* %pix2, i64 %1129
  %1130 = add nsw i64 %1106, 10
  %arrayIdx3501 = getelementptr inbounds i8, i8* %pix1, i64 %1130
  %1131 = add nsw i64 %1107, 10
  %arrayIdx3503 = getelementptr inbounds i8, i8* %pix2, i64 %1131
  %1132 = add nsw i64 %1106, 14
  %arrayIdx3505 = getelementptr inbounds i8, i8* %pix1, i64 %1132
  %1133 = add nsw i64 %1107, 14
  %arrayIdx3507 = getelementptr inbounds i8, i8* %pix2, i64 %1133
  %1134 = add nsw i64 %1106, 11
  %arrayIdx3509 = getelementptr inbounds i8, i8* %pix1, i64 %1134
  %1135 = bitcast i8* %arrayIdx3381 to <4 x i8>*
  %1136 = bitcast i8* %arrayIdx3385 to <4 x i8>*
  %1137 = bitcast i8* %arrayIdx3485 to <4 x i8>*
  %1138 = bitcast i8* %arrayIdx3489 to <4 x i8>*
  %1139 = bitcast <4 x i8>* %1135 to <16 x i8>*
  %1140 = load <16 x i8>, <16 x i8>* %1139, align 1
  %LoadCoalescingShuffle_96 = shufflevector <16 x i8> %1140, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_97 = shufflevector <16 x i8> %1140, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_98 = shufflevector <16 x i8> %1140, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %LoadCoalescingShuffle_99 = shufflevector <16 x i8> %1140, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %SplitLoadShuffle7472 = shufflevector <4 x i8> %LoadCoalescingShuffle_96, <4 x i8> %LoadCoalescingShuffle_98, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1141 = add nsw i64 %1107, 11
  %arrayIdx3511 = getelementptr inbounds i8, i8* %pix2, i64 %1141
  %1142 = bitcast i8* %arrayIdx3383 to <4 x i8>*
  %1143 = bitcast i8* %arrayIdx3387 to <4 x i8>*
  %1144 = bitcast i8* %arrayIdx3487 to <4 x i8>*
  %1145 = bitcast i8* %arrayIdx3491 to <4 x i8>*
  %1146 = bitcast <4 x i8>* %1142 to <16 x i8>*
  %1147 = load <16 x i8>, <16 x i8>* %1146, align 1
  %LoadCoalescingShuffle_100 = shufflevector <16 x i8> %1147, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_101 = shufflevector <16 x i8> %1147, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_102 = shufflevector <16 x i8> %1147, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %LoadCoalescingShuffle_103 = shufflevector <16 x i8> %1147, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %SplitLoadShuffle7470 = shufflevector <4 x i8> %LoadCoalescingShuffle_100, <4 x i8> %LoadCoalescingShuffle_102, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1148 = add nsw i64 %1106, 15
  %arrayIdx3513 = getelementptr inbounds i8, i8* %pix1, i64 %1148
  %SplitLoadShuffle7469 = shufflevector <4 x i8> %LoadCoalescingShuffle_97, <4 x i8> %LoadCoalescingShuffle_99, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1149 = add nsw i64 %1107, 15
  %arrayIdx3515 = getelementptr inbounds i8, i8* %pix2, i64 %1149
  %SplitLoadShuffle7471 = shufflevector <4 x i8> %LoadCoalescingShuffle_101, <4 x i8> %LoadCoalescingShuffle_103, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %arrayIdx3518 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 12, i64 4
  %1150 = zext <8 x i8> %SplitLoadShuffle7472 to <8 x i32>
  %1151 = zext <8 x i8> %SplitLoadShuffle7469 to <8 x i32>
  %1152 = zext <8 x i8> %SplitLoadShuffle7471 to <8 x i32>
  %1153 = zext <8 x i8> %SplitLoadShuffle7470 to <8 x i32>
  %1154 = shl nuw nsw <8 x i32> %1151, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %1155 = shl nuw nsw <8 x i32> %1152, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %1156 = sub nsw <8 x i32> %1154, %1153
  %1157 = sub nsw <8 x i32> %1156, %1155
  %1158 = add nsw <8 x i32> %1157, %1150
  %arrayIdx3536 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 12, i64 6
  %arrayIdx3554 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 12, i64 5
  %arrayIdx3572 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 12, i64 7
  %1159 = extractelement <8 x i32> %1158, i32 3
  %1160 = insertelement <8 x i32> undef, i32 %1159, i32 0
  %1161 = extractelement <8 x i32> %1158, i32 0
  %1162 = insertelement <8 x i32> %1160, i32 %1161, i32 1
  %1163 = insertelement <8 x i32> %1162, i32 %1161, i32 2
  %1164 = insertelement <8 x i32> %1163, i32 %1161, i32 3
  %1165 = extractelement <8 x i32> %1158, i32 7
  %1166 = insertelement <8 x i32> %1164, i32 %1165, i32 4
  %1167 = extractelement <8 x i32> %1158, i32 4
  %1168 = insertelement <8 x i32> %1166, i32 %1167, i32 5
  %1169 = insertelement <8 x i32> %1168, i32 %1167, i32 6
  %1170 = insertelement <8 x i32> %1169, i32 %1167, i32 7
  %1171 = extractelement <8 x i32> %1158, i32 1
  %1172 = insertelement <8 x i32> undef, i32 %1171, i32 0
  %1173 = insertelement <8 x i32> %1172, i32 %1159, i32 1
  %1174 = insertelement <8 x i32> %1173, i32 %1171, i32 2
  %1175 = insertelement <8 x i32> %1174, i32 %1171, i32 3
  %1176 = extractelement <8 x i32> %1158, i32 5
  %1177 = insertelement <8 x i32> %1175, i32 %1176, i32 4
  %1178 = insertelement <8 x i32> %1177, i32 %1165, i32 5
  %1179 = insertelement <8 x i32> %1178, i32 %1176, i32 6
  %1180 = insertelement <8 x i32> %1179, i32 %1176, i32 7
  %1181 = add nsw <8 x i32> %1170, %1180
  %1182 = sub nsw <8 x i32> %1170, %1180
  %1183 = select <8 x i1> <i1 true, i1 false, i1 true, i1 false, i1 true, i1 false, i1 true, i1 false>, <8 x i32> %1181, <8 x i32> %1182
  %1184 = extractelement <8 x i32> %1158, i32 2
  %1185 = insertelement <8 x i32> undef, i32 %1184, i32 0
  %1186 = insertelement <8 x i32> %1185, i32 %1184, i32 1
  %1187 = insertelement <8 x i32> %1186, i32 %1159, i32 2
  %1188 = insertelement <8 x i32> %1187, i32 %1184, i32 3
  %1189 = extractelement <8 x i32> %1158, i32 6
  %1190 = insertelement <8 x i32> %1188, i32 %1189, i32 4
  %1191 = insertelement <8 x i32> %1190, i32 %1189, i32 5
  %1192 = insertelement <8 x i32> %1191, i32 %1165, i32 6
  %1193 = insertelement <8 x i32> %1192, i32 %1189, i32 7
  %1194 = add nsw <8 x i32> %1183, %1193
  %1195 = sub nsw <8 x i32> %1183, %1193
  %1196 = select <8 x i1> <i1 true, i1 true, i1 false, i1 false, i1 true, i1 true, i1 false, i1 false>, <8 x i32> %1194, <8 x i32> %1195
  %1197 = sub <8 x i32> %1196, %1158
  %1198 = add <8 x i32> %1196, %1158
  %1199 = select <8 x i1> <i1 true, i1 false, i1 false, i1 true, i1 true, i1 false, i1 false, i1 true>, <8 x i32> %1198, <8 x i32> %1197
  %1200 = bitcast i32* %arrayIdx3414 to <8 x i32>*
  store <8 x i32> %1199, <8 x i32>* %1200, align 4
  %1201 = mul nsw i64 %idx.ext.i, 13
  %arrayIdx3589 = getelementptr inbounds i8, i8* %pix1, i64 %1201
  %1202 = mul nsw i64 %idx.ext63.i, 13
  %arrayIdx3591 = getelementptr inbounds i8, i8* %pix2, i64 %1202
  %1203 = add nsw i64 %1201, 4
  %arrayIdx3593 = getelementptr inbounds i8, i8* %pix1, i64 %1203
  %1204 = add nsw i64 %1202, 4
  %arrayIdx3595 = getelementptr inbounds i8, i8* %pix2, i64 %1204
  %1205 = add nsw i64 %1201, 1
  %arrayIdx3597 = getelementptr inbounds i8, i8* %pix1, i64 %1205
  %1206 = add nsw i64 %1202, 1
  %arrayIdx3599 = getelementptr inbounds i8, i8* %pix2, i64 %1206
  %1207 = add nsw i64 %1201, 5
  %arrayIdx3601 = getelementptr inbounds i8, i8* %pix1, i64 %1207
  %1208 = add nsw i64 %1202, 5
  %arrayIdx3603 = getelementptr inbounds i8, i8* %pix2, i64 %1208
  %1209 = add nsw i64 %1201, 2
  %arrayIdx3605 = getelementptr inbounds i8, i8* %pix1, i64 %1209
  %1210 = add nsw i64 %1202, 2
  %arrayIdx3607 = getelementptr inbounds i8, i8* %pix2, i64 %1210
  %1211 = add nsw i64 %1201, 6
  %arrayIdx3609 = getelementptr inbounds i8, i8* %pix1, i64 %1211
  %1212 = add nsw i64 %1202, 6
  %arrayIdx3611 = getelementptr inbounds i8, i8* %pix2, i64 %1212
  %1213 = add nsw i64 %1201, 3
  %arrayIdx3613 = getelementptr inbounds i8, i8* %pix1, i64 %1213
  %1214 = add nsw i64 %1202, 3
  %arrayIdx3615 = getelementptr inbounds i8, i8* %pix2, i64 %1214
  %1215 = add nsw i64 %1201, 7
  %arrayIdx3617 = getelementptr inbounds i8, i8* %pix1, i64 %1215
  %1216 = add nsw i64 %1202, 7
  %arrayIdx3619 = getelementptr inbounds i8, i8* %pix2, i64 %1216
  %arrayIdx3622 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 13, i64 0
  %arrayIdx3640 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 13, i64 2
  %arrayIdx3658 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 13, i64 1
  %arrayIdx3676 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 13, i64 3
  %1217 = add nsw i64 %1201, 8
  %arrayIdx3693 = getelementptr inbounds i8, i8* %pix1, i64 %1217
  %1218 = add nsw i64 %1202, 8
  %arrayIdx3695 = getelementptr inbounds i8, i8* %pix2, i64 %1218
  %1219 = add nsw i64 %1201, 12
  %arrayIdx3697 = getelementptr inbounds i8, i8* %pix1, i64 %1219
  %1220 = add nsw i64 %1202, 12
  %arrayIdx3699 = getelementptr inbounds i8, i8* %pix2, i64 %1220
  %1221 = add nsw i64 %1201, 9
  %arrayIdx3701 = getelementptr inbounds i8, i8* %pix1, i64 %1221
  %1222 = add nsw i64 %1202, 9
  %arrayIdx3703 = getelementptr inbounds i8, i8* %pix2, i64 %1222
  %1223 = add nsw i64 %1201, 13
  %arrayIdx3705 = getelementptr inbounds i8, i8* %pix1, i64 %1223
  %1224 = add nsw i64 %1202, 13
  %arrayIdx3707 = getelementptr inbounds i8, i8* %pix2, i64 %1224
  %1225 = add nsw i64 %1201, 10
  %arrayIdx3709 = getelementptr inbounds i8, i8* %pix1, i64 %1225
  %1226 = add nsw i64 %1202, 10
  %arrayIdx3711 = getelementptr inbounds i8, i8* %pix2, i64 %1226
  %1227 = add nsw i64 %1201, 14
  %arrayIdx3713 = getelementptr inbounds i8, i8* %pix1, i64 %1227
  %1228 = add nsw i64 %1202, 14
  %arrayIdx3715 = getelementptr inbounds i8, i8* %pix2, i64 %1228
  %1229 = add nsw i64 %1201, 11
  %arrayIdx3717 = getelementptr inbounds i8, i8* %pix1, i64 %1229
  %1230 = bitcast i8* %arrayIdx3589 to <4 x i8>*
  %1231 = bitcast i8* %arrayIdx3593 to <4 x i8>*
  %1232 = bitcast i8* %arrayIdx3693 to <4 x i8>*
  %1233 = bitcast i8* %arrayIdx3697 to <4 x i8>*
  %1234 = bitcast <4 x i8>* %1230 to <16 x i8>*
  %1235 = load <16 x i8>, <16 x i8>* %1234, align 1
  %LoadCoalescingShuffle_104 = shufflevector <16 x i8> %1235, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_105 = shufflevector <16 x i8> %1235, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_106 = shufflevector <16 x i8> %1235, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %LoadCoalescingShuffle_107 = shufflevector <16 x i8> %1235, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %SplitLoadShuffle7521 = shufflevector <4 x i8> %LoadCoalescingShuffle_104, <4 x i8> %LoadCoalescingShuffle_106, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1236 = add nsw i64 %1202, 11
  %arrayIdx3719 = getelementptr inbounds i8, i8* %pix2, i64 %1236
  %1237 = bitcast i8* %arrayIdx3591 to <4 x i8>*
  %1238 = bitcast i8* %arrayIdx3595 to <4 x i8>*
  %1239 = bitcast i8* %arrayIdx3695 to <4 x i8>*
  %1240 = bitcast i8* %arrayIdx3699 to <4 x i8>*
  %1241 = bitcast <4 x i8>* %1237 to <16 x i8>*
  %1242 = load <16 x i8>, <16 x i8>* %1241, align 1
  %LoadCoalescingShuffle_108 = shufflevector <16 x i8> %1242, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_109 = shufflevector <16 x i8> %1242, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_110 = shufflevector <16 x i8> %1242, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %LoadCoalescingShuffle_111 = shufflevector <16 x i8> %1242, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %SplitLoadShuffle7519 = shufflevector <4 x i8> %LoadCoalescingShuffle_108, <4 x i8> %LoadCoalescingShuffle_110, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1243 = add nsw i64 %1201, 15
  %arrayIdx3721 = getelementptr inbounds i8, i8* %pix1, i64 %1243
  %SplitLoadShuffle7518 = shufflevector <4 x i8> %LoadCoalescingShuffle_105, <4 x i8> %LoadCoalescingShuffle_107, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1244 = add nsw i64 %1202, 15
  %arrayIdx3723 = getelementptr inbounds i8, i8* %pix2, i64 %1244
  %SplitLoadShuffle7520 = shufflevector <4 x i8> %LoadCoalescingShuffle_109, <4 x i8> %LoadCoalescingShuffle_111, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %arrayIdx3726 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 13, i64 4
  %1245 = zext <8 x i8> %SplitLoadShuffle7521 to <8 x i32>
  %1246 = zext <8 x i8> %SplitLoadShuffle7518 to <8 x i32>
  %1247 = zext <8 x i8> %SplitLoadShuffle7520 to <8 x i32>
  %1248 = zext <8 x i8> %SplitLoadShuffle7519 to <8 x i32>
  %1249 = shl nuw nsw <8 x i32> %1246, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %1250 = shl nuw nsw <8 x i32> %1247, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %1251 = sub nsw <8 x i32> %1249, %1248
  %1252 = sub nsw <8 x i32> %1251, %1250
  %1253 = add nsw <8 x i32> %1252, %1245
  %arrayIdx3744 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 13, i64 6
  %arrayIdx3762 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 13, i64 5
  %arrayIdx3780 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 13, i64 7
  %1254 = extractelement <8 x i32> %1253, i32 3
  %1255 = insertelement <8 x i32> undef, i32 %1254, i32 0
  %1256 = extractelement <8 x i32> %1253, i32 0
  %1257 = insertelement <8 x i32> %1255, i32 %1256, i32 1
  %1258 = insertelement <8 x i32> %1257, i32 %1256, i32 2
  %1259 = insertelement <8 x i32> %1258, i32 %1256, i32 3
  %1260 = extractelement <8 x i32> %1253, i32 7
  %1261 = insertelement <8 x i32> %1259, i32 %1260, i32 4
  %1262 = extractelement <8 x i32> %1253, i32 4
  %1263 = insertelement <8 x i32> %1261, i32 %1262, i32 5
  %1264 = insertelement <8 x i32> %1263, i32 %1262, i32 6
  %1265 = insertelement <8 x i32> %1264, i32 %1262, i32 7
  %1266 = extractelement <8 x i32> %1253, i32 1
  %1267 = insertelement <8 x i32> undef, i32 %1266, i32 0
  %1268 = insertelement <8 x i32> %1267, i32 %1254, i32 1
  %1269 = insertelement <8 x i32> %1268, i32 %1266, i32 2
  %1270 = insertelement <8 x i32> %1269, i32 %1266, i32 3
  %1271 = extractelement <8 x i32> %1253, i32 5
  %1272 = insertelement <8 x i32> %1270, i32 %1271, i32 4
  %1273 = insertelement <8 x i32> %1272, i32 %1260, i32 5
  %1274 = insertelement <8 x i32> %1273, i32 %1271, i32 6
  %1275 = insertelement <8 x i32> %1274, i32 %1271, i32 7
  %1276 = add nsw <8 x i32> %1265, %1275
  %1277 = sub nsw <8 x i32> %1265, %1275
  %1278 = select <8 x i1> <i1 true, i1 false, i1 true, i1 false, i1 true, i1 false, i1 true, i1 false>, <8 x i32> %1276, <8 x i32> %1277
  %1279 = extractelement <8 x i32> %1253, i32 2
  %1280 = insertelement <8 x i32> undef, i32 %1279, i32 0
  %1281 = insertelement <8 x i32> %1280, i32 %1279, i32 1
  %1282 = insertelement <8 x i32> %1281, i32 %1254, i32 2
  %1283 = insertelement <8 x i32> %1282, i32 %1279, i32 3
  %1284 = extractelement <8 x i32> %1253, i32 6
  %1285 = insertelement <8 x i32> %1283, i32 %1284, i32 4
  %1286 = insertelement <8 x i32> %1285, i32 %1284, i32 5
  %1287 = insertelement <8 x i32> %1286, i32 %1260, i32 6
  %1288 = insertelement <8 x i32> %1287, i32 %1284, i32 7
  %1289 = add nsw <8 x i32> %1278, %1288
  %1290 = sub nsw <8 x i32> %1278, %1288
  %1291 = select <8 x i1> <i1 true, i1 true, i1 false, i1 false, i1 true, i1 true, i1 false, i1 false>, <8 x i32> %1289, <8 x i32> %1290
  %1292 = sub <8 x i32> %1291, %1253
  %1293 = add <8 x i32> %1291, %1253
  %1294 = select <8 x i1> <i1 true, i1 false, i1 false, i1 true, i1 true, i1 false, i1 false, i1 true>, <8 x i32> %1293, <8 x i32> %1292
  %1295 = bitcast i32* %arrayIdx3622 to <8 x i32>*
  store <8 x i32> %1294, <8 x i32>* %1295, align 4
  %1296 = mul nsw i64 %idx.ext.i, 14
  %arrayIdx3797 = getelementptr inbounds i8, i8* %pix1, i64 %1296
  %1297 = mul nsw i64 %idx.ext63.i, 14
  %arrayIdx3799 = getelementptr inbounds i8, i8* %pix2, i64 %1297
  %1298 = add nsw i64 %1296, 4
  %arrayIdx3801 = getelementptr inbounds i8, i8* %pix1, i64 %1298
  %1299 = add nsw i64 %1297, 4
  %arrayIdx3803 = getelementptr inbounds i8, i8* %pix2, i64 %1299
  %1300 = or i64 %1296, 1
  %arrayIdx3805 = getelementptr inbounds i8, i8* %pix1, i64 %1300
  %1301 = or i64 %1297, 1
  %arrayIdx3807 = getelementptr inbounds i8, i8* %pix2, i64 %1301
  %1302 = add nsw i64 %1296, 5
  %arrayIdx3809 = getelementptr inbounds i8, i8* %pix1, i64 %1302
  %1303 = add nsw i64 %1297, 5
  %arrayIdx3811 = getelementptr inbounds i8, i8* %pix2, i64 %1303
  %1304 = add nsw i64 %1296, 2
  %arrayIdx3813 = getelementptr inbounds i8, i8* %pix1, i64 %1304
  %1305 = add nsw i64 %1297, 2
  %arrayIdx3815 = getelementptr inbounds i8, i8* %pix2, i64 %1305
  %1306 = add nsw i64 %1296, 6
  %arrayIdx3817 = getelementptr inbounds i8, i8* %pix1, i64 %1306
  %1307 = add nsw i64 %1297, 6
  %arrayIdx3819 = getelementptr inbounds i8, i8* %pix2, i64 %1307
  %1308 = add nsw i64 %1296, 3
  %arrayIdx3821 = getelementptr inbounds i8, i8* %pix1, i64 %1308
  %1309 = add nsw i64 %1297, 3
  %arrayIdx3823 = getelementptr inbounds i8, i8* %pix2, i64 %1309
  %1310 = add nsw i64 %1296, 7
  %arrayIdx3825 = getelementptr inbounds i8, i8* %pix1, i64 %1310
  %1311 = add nsw i64 %1297, 7
  %arrayIdx3827 = getelementptr inbounds i8, i8* %pix2, i64 %1311
  %arrayIdx3830 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 14, i64 0
  %arrayIdx3848 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 14, i64 2
  %arrayIdx3866 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 14, i64 1
  %arrayIdx3884 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 14, i64 3
  %1312 = add nsw i64 %1296, 8
  %arrayIdx3901 = getelementptr inbounds i8, i8* %pix1, i64 %1312
  %1313 = add nsw i64 %1297, 8
  %arrayIdx3903 = getelementptr inbounds i8, i8* %pix2, i64 %1313
  %1314 = add nsw i64 %1296, 12
  %arrayIdx3905 = getelementptr inbounds i8, i8* %pix1, i64 %1314
  %1315 = add nsw i64 %1297, 12
  %arrayIdx3907 = getelementptr inbounds i8, i8* %pix2, i64 %1315
  %1316 = add nsw i64 %1296, 9
  %arrayIdx3909 = getelementptr inbounds i8, i8* %pix1, i64 %1316
  %1317 = add nsw i64 %1297, 9
  %arrayIdx3911 = getelementptr inbounds i8, i8* %pix2, i64 %1317
  %1318 = add nsw i64 %1296, 13
  %arrayIdx3913 = getelementptr inbounds i8, i8* %pix1, i64 %1318
  %1319 = add nsw i64 %1297, 13
  %arrayIdx3915 = getelementptr inbounds i8, i8* %pix2, i64 %1319
  %1320 = add nsw i64 %1296, 10
  %arrayIdx3917 = getelementptr inbounds i8, i8* %pix1, i64 %1320
  %1321 = add nsw i64 %1297, 10
  %arrayIdx3919 = getelementptr inbounds i8, i8* %pix2, i64 %1321
  %1322 = add nsw i64 %1296, 14
  %arrayIdx3921 = getelementptr inbounds i8, i8* %pix1, i64 %1322
  %1323 = add nsw i64 %1297, 14
  %arrayIdx3923 = getelementptr inbounds i8, i8* %pix2, i64 %1323
  %1324 = add nsw i64 %1296, 11
  %arrayIdx3925 = getelementptr inbounds i8, i8* %pix1, i64 %1324
  %1325 = bitcast i8* %arrayIdx3797 to <4 x i8>*
  %1326 = bitcast i8* %arrayIdx3801 to <4 x i8>*
  %1327 = bitcast i8* %arrayIdx3901 to <4 x i8>*
  %1328 = bitcast i8* %arrayIdx3905 to <4 x i8>*
  %1329 = bitcast <4 x i8>* %1325 to <16 x i8>*
  %1330 = load <16 x i8>, <16 x i8>* %1329, align 1
  %LoadCoalescingShuffle_112 = shufflevector <16 x i8> %1330, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_113 = shufflevector <16 x i8> %1330, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_114 = shufflevector <16 x i8> %1330, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %LoadCoalescingShuffle_115 = shufflevector <16 x i8> %1330, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %SplitLoadShuffle7570 = shufflevector <4 x i8> %LoadCoalescingShuffle_112, <4 x i8> %LoadCoalescingShuffle_114, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1331 = add nsw i64 %1297, 11
  %arrayIdx3927 = getelementptr inbounds i8, i8* %pix2, i64 %1331
  %1332 = bitcast i8* %arrayIdx3799 to <4 x i8>*
  %1333 = bitcast i8* %arrayIdx3803 to <4 x i8>*
  %1334 = bitcast i8* %arrayIdx3903 to <4 x i8>*
  %1335 = bitcast i8* %arrayIdx3907 to <4 x i8>*
  %1336 = bitcast <4 x i8>* %1332 to <16 x i8>*
  %1337 = load <16 x i8>, <16 x i8>* %1336, align 1
  %LoadCoalescingShuffle_116 = shufflevector <16 x i8> %1337, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_117 = shufflevector <16 x i8> %1337, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_118 = shufflevector <16 x i8> %1337, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %LoadCoalescingShuffle_119 = shufflevector <16 x i8> %1337, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %SplitLoadShuffle7568 = shufflevector <4 x i8> %LoadCoalescingShuffle_116, <4 x i8> %LoadCoalescingShuffle_118, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1338 = add nsw i64 %1296, 15
  %arrayIdx3929 = getelementptr inbounds i8, i8* %pix1, i64 %1338
  %SplitLoadShuffle7567 = shufflevector <4 x i8> %LoadCoalescingShuffle_113, <4 x i8> %LoadCoalescingShuffle_115, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1339 = add nsw i64 %1297, 15
  %arrayIdx3931 = getelementptr inbounds i8, i8* %pix2, i64 %1339
  %SplitLoadShuffle7569 = shufflevector <4 x i8> %LoadCoalescingShuffle_117, <4 x i8> %LoadCoalescingShuffle_119, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %arrayIdx3934 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 14, i64 4
  %1340 = zext <8 x i8> %SplitLoadShuffle7570 to <8 x i32>
  %1341 = zext <8 x i8> %SplitLoadShuffle7567 to <8 x i32>
  %1342 = zext <8 x i8> %SplitLoadShuffle7569 to <8 x i32>
  %1343 = zext <8 x i8> %SplitLoadShuffle7568 to <8 x i32>
  %1344 = shl nuw nsw <8 x i32> %1341, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %1345 = shl nuw nsw <8 x i32> %1342, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %1346 = sub nsw <8 x i32> %1344, %1343
  %1347 = sub nsw <8 x i32> %1346, %1345
  %1348 = add nsw <8 x i32> %1347, %1340
  %arrayIdx3952 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 14, i64 6
  %arrayIdx3970 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 14, i64 5
  %arrayIdx3988 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 14, i64 7
  %1349 = extractelement <8 x i32> %1348, i32 3
  %1350 = insertelement <8 x i32> undef, i32 %1349, i32 0
  %1351 = extractelement <8 x i32> %1348, i32 0
  %1352 = insertelement <8 x i32> %1350, i32 %1351, i32 1
  %1353 = insertelement <8 x i32> %1352, i32 %1351, i32 2
  %1354 = insertelement <8 x i32> %1353, i32 %1351, i32 3
  %1355 = extractelement <8 x i32> %1348, i32 7
  %1356 = insertelement <8 x i32> %1354, i32 %1355, i32 4
  %1357 = extractelement <8 x i32> %1348, i32 4
  %1358 = insertelement <8 x i32> %1356, i32 %1357, i32 5
  %1359 = insertelement <8 x i32> %1358, i32 %1357, i32 6
  %1360 = insertelement <8 x i32> %1359, i32 %1357, i32 7
  %1361 = extractelement <8 x i32> %1348, i32 1
  %1362 = insertelement <8 x i32> undef, i32 %1361, i32 0
  %1363 = insertelement <8 x i32> %1362, i32 %1349, i32 1
  %1364 = insertelement <8 x i32> %1363, i32 %1361, i32 2
  %1365 = insertelement <8 x i32> %1364, i32 %1361, i32 3
  %1366 = extractelement <8 x i32> %1348, i32 5
  %1367 = insertelement <8 x i32> %1365, i32 %1366, i32 4
  %1368 = insertelement <8 x i32> %1367, i32 %1355, i32 5
  %1369 = insertelement <8 x i32> %1368, i32 %1366, i32 6
  %1370 = insertelement <8 x i32> %1369, i32 %1366, i32 7
  %1371 = add nsw <8 x i32> %1360, %1370
  %1372 = sub nsw <8 x i32> %1360, %1370
  %1373 = select <8 x i1> <i1 true, i1 false, i1 true, i1 false, i1 true, i1 false, i1 true, i1 false>, <8 x i32> %1371, <8 x i32> %1372
  %1374 = extractelement <8 x i32> %1348, i32 2
  %1375 = insertelement <8 x i32> undef, i32 %1374, i32 0
  %1376 = insertelement <8 x i32> %1375, i32 %1374, i32 1
  %1377 = insertelement <8 x i32> %1376, i32 %1349, i32 2
  %1378 = insertelement <8 x i32> %1377, i32 %1374, i32 3
  %1379 = extractelement <8 x i32> %1348, i32 6
  %1380 = insertelement <8 x i32> %1378, i32 %1379, i32 4
  %1381 = insertelement <8 x i32> %1380, i32 %1379, i32 5
  %1382 = insertelement <8 x i32> %1381, i32 %1355, i32 6
  %1383 = insertelement <8 x i32> %1382, i32 %1379, i32 7
  %1384 = add nsw <8 x i32> %1373, %1383
  %1385 = sub nsw <8 x i32> %1373, %1383
  %1386 = select <8 x i1> <i1 true, i1 true, i1 false, i1 false, i1 true, i1 true, i1 false, i1 false>, <8 x i32> %1384, <8 x i32> %1385
  %1387 = sub <8 x i32> %1386, %1348
  %1388 = add <8 x i32> %1386, %1348
  %1389 = select <8 x i1> <i1 true, i1 false, i1 false, i1 true, i1 true, i1 false, i1 false, i1 true>, <8 x i32> %1388, <8 x i32> %1387
  %1390 = bitcast i32* %arrayIdx3830 to <8 x i32>*
  store <8 x i32> %1389, <8 x i32>* %1390, align 4
  %1391 = mul nsw i64 %idx.ext.i, 15
  %arrayIdx4005 = getelementptr inbounds i8, i8* %pix1, i64 %1391
  %1392 = mul nsw i64 %idx.ext63.i, 15
  %arrayIdx4007 = getelementptr inbounds i8, i8* %pix2, i64 %1392
  %1393 = add nsw i64 %1391, 4
  %arrayIdx4009 = getelementptr inbounds i8, i8* %pix1, i64 %1393
  %1394 = add nsw i64 %1392, 4
  %arrayIdx4011 = getelementptr inbounds i8, i8* %pix2, i64 %1394
  %1395 = add nsw i64 %1391, 1
  %arrayIdx4013 = getelementptr inbounds i8, i8* %pix1, i64 %1395
  %1396 = add nsw i64 %1392, 1
  %arrayIdx4015 = getelementptr inbounds i8, i8* %pix2, i64 %1396
  %1397 = add nsw i64 %1391, 5
  %arrayIdx4017 = getelementptr inbounds i8, i8* %pix1, i64 %1397
  %1398 = add nsw i64 %1392, 5
  %arrayIdx4019 = getelementptr inbounds i8, i8* %pix2, i64 %1398
  %1399 = add nsw i64 %1391, 2
  %arrayIdx4021 = getelementptr inbounds i8, i8* %pix1, i64 %1399
  %1400 = add nsw i64 %1392, 2
  %arrayIdx4023 = getelementptr inbounds i8, i8* %pix2, i64 %1400
  %1401 = add nsw i64 %1391, 6
  %arrayIdx4025 = getelementptr inbounds i8, i8* %pix1, i64 %1401
  %1402 = add nsw i64 %1392, 6
  %arrayIdx4027 = getelementptr inbounds i8, i8* %pix2, i64 %1402
  %1403 = add nsw i64 %1391, 3
  %arrayIdx4029 = getelementptr inbounds i8, i8* %pix1, i64 %1403
  %1404 = add nsw i64 %1392, 3
  %arrayIdx4031 = getelementptr inbounds i8, i8* %pix2, i64 %1404
  %1405 = add nsw i64 %1391, 7
  %arrayIdx4033 = getelementptr inbounds i8, i8* %pix1, i64 %1405
  %1406 = add nsw i64 %1392, 7
  %arrayIdx4035 = getelementptr inbounds i8, i8* %pix2, i64 %1406
  %arrayIdx4038 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 15, i64 0
  %arrayIdx4056 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 15, i64 2
  %arrayIdx4074 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 15, i64 1
  %arrayIdx4092 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 15, i64 3
  %1407 = add nsw i64 %1391, 8
  %arrayIdx4109 = getelementptr inbounds i8, i8* %pix1, i64 %1407
  %1408 = add nsw i64 %1392, 8
  %arrayIdx4111 = getelementptr inbounds i8, i8* %pix2, i64 %1408
  %1409 = add nsw i64 %1391, 12
  %arrayIdx4113 = getelementptr inbounds i8, i8* %pix1, i64 %1409
  %1410 = add nsw i64 %1392, 12
  %arrayIdx4115 = getelementptr inbounds i8, i8* %pix2, i64 %1410
  %1411 = add nsw i64 %1391, 9
  %arrayIdx4117 = getelementptr inbounds i8, i8* %pix1, i64 %1411
  %1412 = add nsw i64 %1392, 9
  %arrayIdx4119 = getelementptr inbounds i8, i8* %pix2, i64 %1412
  %1413 = add nsw i64 %1391, 13
  %arrayIdx4121 = getelementptr inbounds i8, i8* %pix1, i64 %1413
  %1414 = add nsw i64 %1392, 13
  %arrayIdx4123 = getelementptr inbounds i8, i8* %pix2, i64 %1414
  %1415 = add nsw i64 %1391, 10
  %arrayIdx4125 = getelementptr inbounds i8, i8* %pix1, i64 %1415
  %1416 = add nsw i64 %1392, 10
  %arrayIdx4127 = getelementptr inbounds i8, i8* %pix2, i64 %1416
  %1417 = add nsw i64 %1391, 14
  %arrayIdx4129 = getelementptr inbounds i8, i8* %pix1, i64 %1417
  %1418 = add nsw i64 %1392, 14
  %arrayIdx4131 = getelementptr inbounds i8, i8* %pix2, i64 %1418
  %1419 = add nsw i64 %1391, 11
  %arrayIdx4133 = getelementptr inbounds i8, i8* %pix1, i64 %1419
  %1420 = bitcast i8* %arrayIdx4005 to <4 x i8>*
  %1421 = bitcast i8* %arrayIdx4009 to <4 x i8>*
  %1422 = bitcast i8* %arrayIdx4109 to <4 x i8>*
  %1423 = bitcast i8* %arrayIdx4113 to <4 x i8>*
  %1424 = bitcast <4 x i8>* %1420 to <16 x i8>*
  %1425 = load <16 x i8>, <16 x i8>* %1424, align 1
  %LoadCoalescingShuffle_120 = shufflevector <16 x i8> %1425, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_121 = shufflevector <16 x i8> %1425, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_122 = shufflevector <16 x i8> %1425, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %LoadCoalescingShuffle_123 = shufflevector <16 x i8> %1425, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %SplitLoadShuffle7619 = shufflevector <4 x i8> %LoadCoalescingShuffle_120, <4 x i8> %LoadCoalescingShuffle_122, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1426 = add nsw i64 %1392, 11
  %arrayIdx4135 = getelementptr inbounds i8, i8* %pix2, i64 %1426
  %1427 = bitcast i8* %arrayIdx4007 to <4 x i8>*
  %1428 = bitcast i8* %arrayIdx4011 to <4 x i8>*
  %1429 = bitcast i8* %arrayIdx4111 to <4 x i8>*
  %1430 = bitcast i8* %arrayIdx4115 to <4 x i8>*
  %1431 = bitcast <4 x i8>* %1427 to <16 x i8>*
  %1432 = load <16 x i8>, <16 x i8>* %1431, align 1
  %LoadCoalescingShuffle_124 = shufflevector <16 x i8> %1432, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_125 = shufflevector <16 x i8> %1432, <16 x i8> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_126 = shufflevector <16 x i8> %1432, <16 x i8> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %LoadCoalescingShuffle_127 = shufflevector <16 x i8> %1432, <16 x i8> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %SplitLoadShuffle7617 = shufflevector <4 x i8> %LoadCoalescingShuffle_124, <4 x i8> %LoadCoalescingShuffle_126, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1433 = add nsw i64 %1391, 15
  %arrayIdx4137 = getelementptr inbounds i8, i8* %pix1, i64 %1433
  %SplitLoadShuffle7616 = shufflevector <4 x i8> %LoadCoalescingShuffle_121, <4 x i8> %LoadCoalescingShuffle_123, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1434 = add nsw i64 %1392, 15
  %arrayIdx4139 = getelementptr inbounds i8, i8* %pix2, i64 %1434
  %SplitLoadShuffle7618 = shufflevector <4 x i8> %LoadCoalescingShuffle_125, <4 x i8> %LoadCoalescingShuffle_127, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %arrayIdx4142 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 15, i64 4
  %1435 = zext <8 x i8> %SplitLoadShuffle7619 to <8 x i32>
  %1436 = zext <8 x i8> %SplitLoadShuffle7616 to <8 x i32>
  %1437 = zext <8 x i8> %SplitLoadShuffle7618 to <8 x i32>
  %1438 = zext <8 x i8> %SplitLoadShuffle7617 to <8 x i32>
  %1439 = shl nuw nsw <8 x i32> %1436, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %1440 = shl nuw nsw <8 x i32> %1437, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %1441 = sub nsw <8 x i32> %1439, %1438
  %1442 = sub nsw <8 x i32> %1441, %1440
  %1443 = add nsw <8 x i32> %1442, %1435
  %arrayIdx4160 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 15, i64 6
  %arrayIdx4178 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 15, i64 5
  %arrayIdx4196 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 15, i64 7
  %1444 = extractelement <8 x i32> %1443, i32 3
  %1445 = insertelement <8 x i32> undef, i32 %1444, i32 0
  %1446 = extractelement <8 x i32> %1443, i32 0
  %1447 = insertelement <8 x i32> %1445, i32 %1446, i32 1
  %1448 = insertelement <8 x i32> %1447, i32 %1446, i32 2
  %1449 = insertelement <8 x i32> %1448, i32 %1446, i32 3
  %1450 = extractelement <8 x i32> %1443, i32 7
  %1451 = insertelement <8 x i32> %1449, i32 %1450, i32 4
  %1452 = extractelement <8 x i32> %1443, i32 4
  %1453 = insertelement <8 x i32> %1451, i32 %1452, i32 5
  %1454 = insertelement <8 x i32> %1453, i32 %1452, i32 6
  %1455 = insertelement <8 x i32> %1454, i32 %1452, i32 7
  %1456 = extractelement <8 x i32> %1443, i32 1
  %1457 = insertelement <8 x i32> undef, i32 %1456, i32 0
  %1458 = insertelement <8 x i32> %1457, i32 %1444, i32 1
  %1459 = insertelement <8 x i32> %1458, i32 %1456, i32 2
  %1460 = insertelement <8 x i32> %1459, i32 %1456, i32 3
  %1461 = extractelement <8 x i32> %1443, i32 5
  %1462 = insertelement <8 x i32> %1460, i32 %1461, i32 4
  %1463 = insertelement <8 x i32> %1462, i32 %1450, i32 5
  %1464 = insertelement <8 x i32> %1463, i32 %1461, i32 6
  %1465 = insertelement <8 x i32> %1464, i32 %1461, i32 7
  %1466 = add nsw <8 x i32> %1455, %1465
  %1467 = sub nsw <8 x i32> %1455, %1465
  %1468 = select <8 x i1> <i1 true, i1 false, i1 true, i1 false, i1 true, i1 false, i1 true, i1 false>, <8 x i32> %1466, <8 x i32> %1467
  %1469 = extractelement <8 x i32> %1443, i32 2
  %1470 = insertelement <8 x i32> undef, i32 %1469, i32 0
  %1471 = insertelement <8 x i32> %1470, i32 %1469, i32 1
  %1472 = insertelement <8 x i32> %1471, i32 %1444, i32 2
  %1473 = insertelement <8 x i32> %1472, i32 %1469, i32 3
  %1474 = extractelement <8 x i32> %1443, i32 6
  %1475 = insertelement <8 x i32> %1473, i32 %1474, i32 4
  %1476 = insertelement <8 x i32> %1475, i32 %1474, i32 5
  %1477 = insertelement <8 x i32> %1476, i32 %1450, i32 6
  %1478 = insertelement <8 x i32> %1477, i32 %1474, i32 7
  %1479 = add nsw <8 x i32> %1468, %1478
  %1480 = sub nsw <8 x i32> %1468, %1478
  %1481 = select <8 x i1> <i1 true, i1 true, i1 false, i1 false, i1 true, i1 true, i1 false, i1 false>, <8 x i32> %1479, <8 x i32> %1480
  %1482 = sub <8 x i32> %1481, %1443
  %1483 = add <8 x i32> %1481, %1443
  %1484 = select <8 x i1> <i1 true, i1 false, i1 false, i1 true, i1 true, i1 false, i1 false, i1 true>, <8 x i32> %1483, <8 x i32> %1482
  %1485 = bitcast i32* %arrayIdx4038 to <8 x i32>*
  store <8 x i32> %1484, <8 x i32>* %1485, align 4
  %arrayIdx4213 = getelementptr inbounds <8 x i32>, <8 x i32>* %alloca842, i64 0, i64 0
  %arrayIdx4214 = getelementptr inbounds <8 x i32>, <8 x i32>* %alloca843, i64 0, i64 0
  %arrayIdx4215 = getelementptr inbounds <8 x i32>, <8 x i32>* %alloca844, i64 0, i64 0
  %arrayIdx4216 = getelementptr inbounds <8 x i32>, <8 x i32>* %alloca845, i64 0, i64 0
  %arrayIdx4218 = getelementptr inbounds <8 x i32>, <8 x i32>* %alloca842, i64 0, i64 1
  %arrayIdx4220 = getelementptr inbounds <8 x i32>, <8 x i32>* %alloca843, i64 0, i64 1
  %arrayIdx4222 = getelementptr inbounds <8 x i32>, <8 x i32>* %alloca844, i64 0, i64 1
  %arrayIdx4224 = getelementptr inbounds <8 x i32>, <8 x i32>* %alloca845, i64 0, i64 1
  %arrayIdx4226 = getelementptr inbounds <8 x i32>, <8 x i32>* %alloca842, i64 0, i64 2
  %arrayIdx4228 = getelementptr inbounds <8 x i32>, <8 x i32>* %alloca843, i64 0, i64 2
  %arrayIdx4230 = getelementptr inbounds <8 x i32>, <8 x i32>* %alloca844, i64 0, i64 2
  %arrayIdx4232 = getelementptr inbounds <8 x i32>, <8 x i32>* %alloca845, i64 0, i64 2
  %arrayIdx4234 = getelementptr inbounds <8 x i32>, <8 x i32>* %alloca842, i64 0, i64 3
  %arrayIdx4236 = getelementptr inbounds <8 x i32>, <8 x i32>* %alloca843, i64 0, i64 3
  %arrayIdx4238 = getelementptr inbounds <8 x i32>, <8 x i32>* %alloca844, i64 0, i64 3
  %arrayIdx4240 = getelementptr inbounds <8 x i32>, <8 x i32>* %alloca845, i64 0, i64 3
  %arrayIdx4242 = getelementptr inbounds <8 x i32>, <8 x i32>* %alloca842, i64 0, i64 4
  %arrayIdx4244 = getelementptr inbounds <8 x i32>, <8 x i32>* %alloca843, i64 0, i64 4
  %arrayIdx4246 = getelementptr inbounds <8 x i32>, <8 x i32>* %alloca844, i64 0, i64 4
  %arrayIdx4248 = getelementptr inbounds <8 x i32>, <8 x i32>* %alloca845, i64 0, i64 4
  %arrayIdx4250 = getelementptr inbounds <8 x i32>, <8 x i32>* %alloca842, i64 0, i64 5
  %arrayIdx4252 = getelementptr inbounds <8 x i32>, <8 x i32>* %alloca843, i64 0, i64 5
  %arrayIdx4254 = getelementptr inbounds <8 x i32>, <8 x i32>* %alloca844, i64 0, i64 5
  %arrayIdx4256 = getelementptr inbounds <8 x i32>, <8 x i32>* %alloca845, i64 0, i64 5
  %arrayIdx4258 = getelementptr inbounds <8 x i32>, <8 x i32>* %alloca842, i64 0, i64 6
  %arrayIdx4260 = getelementptr inbounds <8 x i32>, <8 x i32>* %alloca843, i64 0, i64 6
  %arrayIdx4262 = getelementptr inbounds <8 x i32>, <8 x i32>* %alloca844, i64 0, i64 6
  %arrayIdx4264 = getelementptr inbounds <8 x i32>, <8 x i32>* %alloca845, i64 0, i64 6
  %arrayIdx4266 = getelementptr inbounds <8 x i32>, <8 x i32>* %alloca842, i64 0, i64 7
  %1486 = bitcast i32* %arrayIdx4213 to <8 x i32>*
  store <8 x i32> zeroinitializer, <8 x i32>* %1486, align 16
  %arrayIdx4268 = getelementptr inbounds <8 x i32>, <8 x i32>* %alloca843, i64 0, i64 7
  %1487 = bitcast i32* %arrayIdx4214 to <8 x i32>*
  store <8 x i32> zeroinitializer, <8 x i32>* %1487, align 16
  %arrayIdx4270 = getelementptr inbounds <8 x i32>, <8 x i32>* %alloca844, i64 0, i64 7
  %1488 = bitcast i32* %arrayIdx4215 to <8 x i32>*
  store <8 x i32> zeroinitializer, <8 x i32>* %1488, align 16
  %arrayIdx4272 = getelementptr inbounds <8 x i32>, <8 x i32>* %alloca845, i64 0, i64 7
  %1489 = bitcast i32* %arrayIdx4216 to <8 x i32>*
  store <8 x i32> zeroinitializer, <8 x i32>* %1489, align 16
  %1490 = bitcast [16 x [8 x i32]]* %alloca to <8 x i32>*
  %arrayIdx4291 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 1, i64 0
  %1491 = bitcast i32* %arrayIdx4291 to <8 x i32>*
  %1492 = bitcast <8 x i32>* %1490 to <16 x i32>*
  %1493 = load <16 x i32>, <16 x i32>* %1492, align 4
  %LoadCoalescingShuffle_128 = shufflevector <16 x i32> %1493, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_129 = shufflevector <16 x i32> %1493, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %arrayIdx4294 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 2, i64 0
  %1494 = bitcast i32* %arrayIdx4294 to <8 x i32>*
  %arrayIdx4297 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 3, i64 0
  %1495 = bitcast i32* %arrayIdx4297 to <8 x i32>*
  %1496 = bitcast <8 x i32>* %1494 to <16 x i32>*
  %1497 = load <16 x i32>, <16 x i32>* %1496, align 4
  %LoadCoalescingShuffle_130 = shufflevector <16 x i32> %1497, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_131 = shufflevector <16 x i32> %1497, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1498 = add <8 x i32> %LoadCoalescingShuffle_128, %LoadCoalescingShuffle_129
  %1499 = add <8 x i32> %1498, %LoadCoalescingShuffle_130
  %1500 = add <8 x i32> %1499, %LoadCoalescingShuffle_131
  %1501 = lshr <8 x i32> %1500, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %1502 = and <8 x i32> %1501, <i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537>
  %1503 = mul nuw <8 x i32> %1502, <i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535>
  %1504 = add <8 x i32> %1500, %1503
  %1505 = xor <8 x i32> %1504, %1503
  %1506 = sub <8 x i32> %LoadCoalescingShuffle_128, %LoadCoalescingShuffle_129
  %1507 = add <8 x i32> %1506, %LoadCoalescingShuffle_130
  %1508 = sub <8 x i32> %1507, %LoadCoalescingShuffle_131
  %1509 = lshr <8 x i32> %1508, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %1510 = and <8 x i32> %1509, <i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537>
  %1511 = mul nuw <8 x i32> %1510, <i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535>
  %1512 = add <8 x i32> %1508, %1511
  %1513 = xor <8 x i32> %1512, %1511
  %1514 = add <8 x i32> %LoadCoalescingShuffle_130, %LoadCoalescingShuffle_131
  %1515 = sub <8 x i32> %1498, %1514
  %1516 = lshr <8 x i32> %1515, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %1517 = and <8 x i32> %1516, <i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537>
  %1518 = mul nuw <8 x i32> %1517, <i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535>
  %1519 = add <8 x i32> %1498, %1518
  %1520 = sub <8 x i32> %1519, %1514
  %1521 = xor <8 x i32> %1520, %1518
  %1522 = sub <8 x i32> %1506, %LoadCoalescingShuffle_130
  %1523 = add <8 x i32> %1522, %LoadCoalescingShuffle_131
  %1524 = lshr <8 x i32> %1523, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %1525 = and <8 x i32> %1524, <i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537>
  %1526 = mul nuw <8 x i32> %1525, <i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535>
  %1527 = add <8 x i32> %1523, %1526
  %1528 = xor <8 x i32> %1527, %1526
  %gepload4333 = load <8 x i32>, <8 x i32>* %alloca842, align 16
  %1529 = add <8 x i32> %1505, %1513
  %1530 = add <8 x i32> %1529, %1521
  %1531 = add <8 x i32> %1530, %gepload4333
  %1532 = add <8 x i32> %1531, %1528
  store <8 x i32> %1532, <8 x i32>* %alloca842, align 16
  %arrayIdx4337 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 4, i64 0
  %1533 = bitcast i32* %arrayIdx4337 to <8 x i32>*
  %arrayIdx4340 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 5, i64 0
  %1534 = bitcast i32* %arrayIdx4340 to <8 x i32>*
  %1535 = bitcast <8 x i32>* %1533 to <16 x i32>*
  %1536 = load <16 x i32>, <16 x i32>* %1535, align 4
  %LoadCoalescingShuffle_132 = shufflevector <16 x i32> %1536, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_133 = shufflevector <16 x i32> %1536, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %arrayIdx4343 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 6, i64 0
  %1537 = bitcast i32* %arrayIdx4343 to <8 x i32>*
  %arrayIdx4346 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 7, i64 0
  %1538 = bitcast i32* %arrayIdx4346 to <8 x i32>*
  %1539 = bitcast <8 x i32>* %1537 to <16 x i32>*
  %1540 = load <16 x i32>, <16 x i32>* %1539, align 4
  %LoadCoalescingShuffle_134 = shufflevector <16 x i32> %1540, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_135 = shufflevector <16 x i32> %1540, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1541 = add <8 x i32> %LoadCoalescingShuffle_132, %LoadCoalescingShuffle_133
  %1542 = add <8 x i32> %1541, %LoadCoalescingShuffle_134
  %1543 = add <8 x i32> %1542, %LoadCoalescingShuffle_135
  %1544 = lshr <8 x i32> %1543, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %1545 = and <8 x i32> %1544, <i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537>
  %1546 = mul nuw <8 x i32> %1545, <i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535>
  %1547 = add <8 x i32> %1543, %1546
  %1548 = xor <8 x i32> %1547, %1546
  %1549 = sub <8 x i32> %LoadCoalescingShuffle_132, %LoadCoalescingShuffle_133
  %1550 = add <8 x i32> %1549, %LoadCoalescingShuffle_134
  %1551 = sub <8 x i32> %1550, %LoadCoalescingShuffle_135
  %1552 = lshr <8 x i32> %1551, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %1553 = and <8 x i32> %1552, <i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537>
  %1554 = mul nuw <8 x i32> %1553, <i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535>
  %1555 = add <8 x i32> %1551, %1554
  %1556 = xor <8 x i32> %1555, %1554
  %1557 = add <8 x i32> %LoadCoalescingShuffle_134, %LoadCoalescingShuffle_135
  %1558 = sub <8 x i32> %1541, %1557
  %1559 = lshr <8 x i32> %1558, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %1560 = and <8 x i32> %1559, <i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537>
  %1561 = mul nuw <8 x i32> %1560, <i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535>
  %1562 = add <8 x i32> %1541, %1561
  %1563 = sub <8 x i32> %1562, %1557
  %1564 = xor <8 x i32> %1563, %1561
  %1565 = sub <8 x i32> %1549, %LoadCoalescingShuffle_134
  %1566 = add <8 x i32> %1565, %LoadCoalescingShuffle_135
  %1567 = lshr <8 x i32> %1566, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %1568 = and <8 x i32> %1567, <i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537>
  %1569 = mul nuw <8 x i32> %1568, <i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535>
  %1570 = add <8 x i32> %1566, %1569
  %1571 = xor <8 x i32> %1570, %1569
  %gepload4382 = load <8 x i32>, <8 x i32>* %alloca843, align 16
  %1572 = add <8 x i32> %1548, %1556
  %1573 = add <8 x i32> %1572, %1564
  %1574 = add <8 x i32> %1573, %gepload4382
  %1575 = add <8 x i32> %1574, %1571
  store <8 x i32> %1575, <8 x i32>* %alloca843, align 16
  %arrayIdx4386 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 8, i64 0
  %1576 = bitcast i32* %arrayIdx4386 to <8 x i32>*
  %arrayIdx4389 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 9, i64 0
  %1577 = bitcast i32* %arrayIdx4389 to <8 x i32>*
  %1578 = bitcast <8 x i32>* %1576 to <16 x i32>*
  %1579 = load <16 x i32>, <16 x i32>* %1578, align 4
  %LoadCoalescingShuffle_136 = shufflevector <16 x i32> %1579, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_137 = shufflevector <16 x i32> %1579, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %arrayIdx4392 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 10, i64 0
  %1580 = bitcast i32* %arrayIdx4392 to <8 x i32>*
  %arrayIdx4395 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 11, i64 0
  %1581 = bitcast i32* %arrayIdx4395 to <8 x i32>*
  %1582 = bitcast <8 x i32>* %1580 to <16 x i32>*
  %1583 = load <16 x i32>, <16 x i32>* %1582, align 4
  %LoadCoalescingShuffle_138 = shufflevector <16 x i32> %1583, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_139 = shufflevector <16 x i32> %1583, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1584 = add <8 x i32> %LoadCoalescingShuffle_136, %LoadCoalescingShuffle_137
  %1585 = add <8 x i32> %1584, %LoadCoalescingShuffle_138
  %1586 = add <8 x i32> %1585, %LoadCoalescingShuffle_139
  %1587 = lshr <8 x i32> %1586, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %1588 = and <8 x i32> %1587, <i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537>
  %1589 = mul nuw <8 x i32> %1588, <i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535>
  %1590 = add <8 x i32> %1586, %1589
  %1591 = xor <8 x i32> %1590, %1589
  %1592 = sub <8 x i32> %LoadCoalescingShuffle_136, %LoadCoalescingShuffle_137
  %1593 = add <8 x i32> %1592, %LoadCoalescingShuffle_138
  %1594 = sub <8 x i32> %1593, %LoadCoalescingShuffle_139
  %1595 = lshr <8 x i32> %1594, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %1596 = and <8 x i32> %1595, <i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537>
  %1597 = mul nuw <8 x i32> %1596, <i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535>
  %1598 = add <8 x i32> %1594, %1597
  %1599 = xor <8 x i32> %1598, %1597
  %1600 = add <8 x i32> %LoadCoalescingShuffle_138, %LoadCoalescingShuffle_139
  %1601 = sub <8 x i32> %1584, %1600
  %1602 = lshr <8 x i32> %1601, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %1603 = and <8 x i32> %1602, <i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537>
  %1604 = mul nuw <8 x i32> %1603, <i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535>
  %1605 = add <8 x i32> %1584, %1604
  %1606 = sub <8 x i32> %1605, %1600
  %1607 = xor <8 x i32> %1606, %1604
  %1608 = sub <8 x i32> %1592, %LoadCoalescingShuffle_138
  %1609 = add <8 x i32> %1608, %LoadCoalescingShuffle_139
  %1610 = lshr <8 x i32> %1609, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %1611 = and <8 x i32> %1610, <i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537>
  %1612 = mul nuw <8 x i32> %1611, <i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535>
  %1613 = add <8 x i32> %1609, %1612
  %1614 = xor <8 x i32> %1613, %1612
  %gepload4431 = load <8 x i32>, <8 x i32>* %alloca844, align 16
  %1615 = add <8 x i32> %1591, %1599
  %1616 = add <8 x i32> %1615, %1607
  %1617 = add <8 x i32> %1616, %gepload4431
  %1618 = add <8 x i32> %1617, %1614
  store <8 x i32> %1618, <8 x i32>* %alloca844, align 16
  %arrayIdx4435 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 12, i64 0
  %1619 = bitcast i32* %arrayIdx4435 to <8 x i32>*
  %arrayIdx4438 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 13, i64 0
  %1620 = bitcast i32* %arrayIdx4438 to <8 x i32>*
  %1621 = bitcast <8 x i32>* %1619 to <16 x i32>*
  %1622 = load <16 x i32>, <16 x i32>* %1621, align 4
  %LoadCoalescingShuffle_140 = shufflevector <16 x i32> %1622, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_141 = shufflevector <16 x i32> %1622, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %arrayIdx4441 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 14, i64 0
  %1623 = bitcast i32* %arrayIdx4441 to <8 x i32>*
  %arrayIdx4444 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 15, i64 0
  %1624 = bitcast i32* %arrayIdx4444 to <8 x i32>*
  %1625 = bitcast <8 x i32>* %1623 to <16 x i32>*
  %1626 = load <16 x i32>, <16 x i32>* %1625, align 4
  %LoadCoalescingShuffle_142 = shufflevector <16 x i32> %1626, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %LoadCoalescingShuffle_143 = shufflevector <16 x i32> %1626, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1627 = add <8 x i32> %LoadCoalescingShuffle_140, %LoadCoalescingShuffle_141
  %1628 = add <8 x i32> %1627, %LoadCoalescingShuffle_142
  %1629 = add <8 x i32> %1628, %LoadCoalescingShuffle_143
  %1630 = lshr <8 x i32> %1629, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %1631 = and <8 x i32> %1630, <i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537>
  %1632 = mul nuw <8 x i32> %1631, <i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535>
  %1633 = add <8 x i32> %1629, %1632
  %1634 = xor <8 x i32> %1633, %1632
  %1635 = sub <8 x i32> %LoadCoalescingShuffle_140, %LoadCoalescingShuffle_141
  %1636 = add <8 x i32> %1635, %LoadCoalescingShuffle_142
  %1637 = sub <8 x i32> %1636, %LoadCoalescingShuffle_143
  %1638 = lshr <8 x i32> %1637, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %1639 = and <8 x i32> %1638, <i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537>
  %1640 = mul nuw <8 x i32> %1639, <i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535>
  %1641 = add <8 x i32> %1637, %1640
  %1642 = xor <8 x i32> %1641, %1640
  %1643 = add <8 x i32> %LoadCoalescingShuffle_142, %LoadCoalescingShuffle_143
  %1644 = sub <8 x i32> %1627, %1643
  %1645 = lshr <8 x i32> %1644, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %1646 = and <8 x i32> %1645, <i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537>
  %1647 = mul nuw <8 x i32> %1646, <i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535>
  %1648 = add <8 x i32> %1627, %1647
  %1649 = sub <8 x i32> %1648, %1643
  %1650 = xor <8 x i32> %1649, %1647
  %1651 = sub <8 x i32> %1635, %LoadCoalescingShuffle_142
  %1652 = add <8 x i32> %1651, %LoadCoalescingShuffle_143
  %1653 = lshr <8 x i32> %1652, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %1654 = and <8 x i32> %1653, <i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537, i32 65537>
  %1655 = mul nuw <8 x i32> %1654, <i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535>
  %1656 = add <8 x i32> %1652, %1655
  %1657 = xor <8 x i32> %1656, %1655
  %gepload4480 = load <8 x i32>, <8 x i32>* %alloca845, align 16
  %1658 = add <8 x i32> %1634, %1642
  %1659 = add <8 x i32> %1658, %1650
  %1660 = add <8 x i32> %1659, %gepload4480
  %1661 = add <8 x i32> %1660, %1657
  store <8 x i32> %1661, <8 x i32>* %alloca845, align 16
  %1662 = bitcast <8 x i32>* %alloca842 to <4 x i32>*
  %1663 = bitcast i32* %arrayIdx4242 to <4 x i32>*
  %1664 = bitcast <4 x i32>* %1662 to <8 x i32>*
  %1665 = load <8 x i32>, <8 x i32>* %1664, align 16
  %LoadCoalescingShuffle_144 = shufflevector <8 x i32> %1665, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_145 = shufflevector <8 x i32> %1665, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1666 = bitcast <8 x i32>* %alloca843 to <4 x i32>*
  %1667 = bitcast i32* %arrayIdx4244 to <4 x i32>*
  %1668 = bitcast <4 x i32>* %1666 to <8 x i32>*
  %1669 = load <8 x i32>, <8 x i32>* %1668, align 16
  %LoadCoalescingShuffle_146 = shufflevector <8 x i32> %1669, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_147 = shufflevector <8 x i32> %1669, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1670 = bitcast <8 x i32>* %alloca844 to <4 x i32>*
  %1671 = bitcast i32* %arrayIdx4246 to <4 x i32>*
  %1672 = bitcast <4 x i32>* %1670 to <8 x i32>*
  %1673 = load <8 x i32>, <8 x i32>* %1672, align 16
  %LoadCoalescingShuffle_148 = shufflevector <8 x i32> %1673, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_149 = shufflevector <8 x i32> %1673, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1674 = bitcast <8 x i32>* %alloca845 to <4 x i32>*
  %1675 = bitcast i32* %arrayIdx4248 to <4 x i32>*
  %1676 = bitcast <4 x i32>* %1674 to <8 x i32>*
  %1677 = load <8 x i32>, <8 x i32>* %1676, align 16
  %LoadCoalescingShuffle_150 = shufflevector <8 x i32> %1677, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %LoadCoalescingShuffle_151 = shufflevector <8 x i32> %1677, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %rdx.shuf9174517 = shufflevector <4 x i32> %LoadCoalescingShuffle_151, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1678 = add <4 x i32> %LoadCoalescingShuffle_151, %rdx.shuf9174517
  %rdx.shuf9194520 = shufflevector <4 x i32> %1678, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1679 = add <4 x i32> %1678, %rdx.shuf9194520
  %bin.final9214522 = extractelement <4 x i32> %1679, i64 0
  %rdx.shuf9114525 = shufflevector <4 x i32> %LoadCoalescingShuffle_150, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1680 = add <4 x i32> %LoadCoalescingShuffle_150, %rdx.shuf9114525
  %rdx.shuf9134528 = shufflevector <4 x i32> %1680, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1681 = add <4 x i32> %1680, %rdx.shuf9134528
  %bin.final9154530 = extractelement <4 x i32> %1681, i64 0
  %rdx.shuf9054533 = shufflevector <4 x i32> %LoadCoalescingShuffle_149, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1682 = add <4 x i32> %LoadCoalescingShuffle_149, %rdx.shuf9054533
  %rdx.shuf9074536 = shufflevector <4 x i32> %1682, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1683 = add <4 x i32> %1682, %rdx.shuf9074536
  %bin.final9094538 = extractelement <4 x i32> %1683, i64 0
  %rdx.shuf8994541 = shufflevector <4 x i32> %LoadCoalescingShuffle_148, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1684 = add <4 x i32> %LoadCoalescingShuffle_148, %rdx.shuf8994541
  %rdx.shuf9014544 = shufflevector <4 x i32> %1684, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1685 = add <4 x i32> %1684, %rdx.shuf9014544
  %bin.final9034546 = extractelement <4 x i32> %1685, i64 0
  %rdx.shuf8934549 = shufflevector <4 x i32> %LoadCoalescingShuffle_147, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1686 = add <4 x i32> %LoadCoalescingShuffle_147, %rdx.shuf8934549
  %rdx.shuf8954552 = shufflevector <4 x i32> %1686, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1687 = add <4 x i32> %1686, %rdx.shuf8954552
  %bin.final8974554 = extractelement <4 x i32> %1687, i64 0
  %rdx.shuf8874557 = shufflevector <4 x i32> %LoadCoalescingShuffle_146, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1688 = add <4 x i32> %LoadCoalescingShuffle_146, %rdx.shuf8874557
  %rdx.shuf8894560 = shufflevector <4 x i32> %1688, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1689 = add <4 x i32> %1688, %rdx.shuf8894560
  %bin.final8914562 = extractelement <4 x i32> %1689, i64 0
  %rdx.shuf8814565 = shufflevector <4 x i32> %LoadCoalescingShuffle_145, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1690 = add <4 x i32> %LoadCoalescingShuffle_145, %rdx.shuf8814565
  %rdx.shuf8834568 = shufflevector <4 x i32> %1690, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1691 = add <4 x i32> %1690, %rdx.shuf8834568
  %bin.final8854570 = extractelement <4 x i32> %1691, i64 0
  %rdx.shuf4573 = shufflevector <4 x i32> %LoadCoalescingShuffle_144, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1692 = add <4 x i32> %LoadCoalescingShuffle_144, %rdx.shuf4573
  %rdx.shuf8784576 = shufflevector <4 x i32> %1692, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1693 = add <4 x i32> %1692, %rdx.shuf8784576
  %bin.final4578 = extractelement <4 x i32> %1693, i64 0
  %1694 = insertelement <8 x i32> undef, i32 %bin.final9214522, i32 0
  %1695 = insertelement <8 x i32> %1694, i32 %bin.final9094538, i32 1
  %1696 = insertelement <8 x i32> %1695, i32 %bin.final9154530, i32 2
  %1697 = insertelement <8 x i32> %1696, i32 %bin.final9034546, i32 3
  %1698 = insertelement <8 x i32> %1697, i32 %bin.final8974554, i32 4
  %1699 = insertelement <8 x i32> %1698, i32 %bin.final8854570, i32 5
  %1700 = insertelement <8 x i32> %1699, i32 %bin.final4578, i32 6
  %1701 = insertelement <8 x i32> %1700, i32 %bin.final8914562, i32 7
  %1702 = lshr <8 x i32> %1701, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %1703 = and <8 x i32> <i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535>, %1701
  %1704 = add nuw nsw <8 x i32> %1702, %1703
  %1705 = lshr <8 x i32> %1704, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %1706 = add nuw nsw i32 undef, undef
  %1707 = add nuw nsw i32 %1706, undef
  %1708 = add nuw nsw i32 %1707, undef
  %1709 = add nuw nsw i32 %1708, undef
  %1710 = add nuw i32 %1709, undef
  %1711 = add i32 %1710, undef
  %rdx.shuf = shufflevector <8 x i32> %1705, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx = add <8 x i32> %1705, %rdx.shuf
  %rdx.shuf7620 = shufflevector <8 x i32> %bin.rdx, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx7621 = add <8 x i32> %bin.rdx, %rdx.shuf7620
  %rdx.shuf7622 = shufflevector <8 x i32> %bin.rdx7621, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %bin.rdx7623 = add <8 x i32> %bin.rdx7621, %rdx.shuf7622
  %1712 = extractelement <8 x i32> %bin.rdx7623, i32 0
  %1713 = add i32 %1711, undef
  ret i32 %1712
}

; Function Attrs: argmemonly nounwind
declare void @llvm.intel.directive(metadata) #1

attributes #0 = { norecurse nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "pre_loopopt" "stack-protector-buffer-size"="8" "target-cpu"="skylake-avx512" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind "target-cpu"="skylake-avx512" }

!llvm.module.flags = !{!0}

!0 = !{i32 1, !"wchar_size", i32 4}
