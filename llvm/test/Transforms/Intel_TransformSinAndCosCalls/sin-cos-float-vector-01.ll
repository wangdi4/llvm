; NOTE: Assertions have been autogenerated by utils/update_test_checks.py

; RUN: opt -passes="transform-sin-cos-calls" -S 2>&1 < %s | FileCheck %s
;
; Test case:
; . float sinf/cosf (mul constant)
; . vector (omp simd loop)
; . precision: low
; . fast-math: yes
;
; Compilation options:
; icpx -O2 -fiopenmp ffast-math -fimf-precision=low
;
; #include <math.h>
;
; #define PIx2 6.2831853071795864769252867665590058f
;
; float ComputeQCPU(int Num, float *Kx, float *Ky)
; {
;   float Arg, cosArg, sinArg;
;   float Sum = 0.0;
;   int i;
;
;   #pragma omp simd private(Arg, cosArg, sinArg) reduction(+:Sum)
;   for (i = 0; i < Num; i++) {
;     Arg = PIx2 * (Kx[i] + Ky[i]);
;     cosArg = cosf(Arg);
;     sinArg = sinf(Arg);
;     Sum += (cosArg * sinArg);
;   }
;   return Sum;
; }
;
;
;
; Function Attrs: nounwind uwtable mustprogress
define dso_local float @_Z11ComputeQCPUiPfS_(i32 %Num, ptr nocapture readonly %Kx, ptr nocapture readonly %Ky) local_unnamed_addr #0 {
;
; CHECK-LABEL: @_Z11ComputeQCPUiPfS_(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[SUM_RED:%.*]] = alloca float, align 4
; CHECK-NEXT:    [[I_LINEAR_IV:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[NUM:%.*]], 0
; CHECK-NEXT:    br i1 [[CMP]], label [[DIR_OMP_SIMD_1:%.*]], label [[OMP_PRECOND_END:%.*]]
; CHECK:       DIR.OMP.SIMD.1:
; CHECK-NEXT:    store float 0.000000e+00, ptr [[SUM_RED]], align 4
; CHECK-NEXT:    br label [[DIR_OMP_SIMD_141:%.*]]
; CHECK:       DIR.OMP.SIMD.141:
; CHECK-NEXT:    [[TMP0:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.REDUCTION.ADD"(ptr [[SUM_RED]]), "QUAL.OMP.LINEAR:IV"(ptr [[I_LINEAR_IV]], i32 1), "QUAL.OMP.NORMALIZED.IV"(ptr null), "QUAL.OMP.NORMALIZED.UB"(ptr null) ]
; CHECK-NEXT:    br label [[DIR_OMP_SIMD_2:%.*]]
; CHECK:       DIR.OMP.SIMD.2:
; CHECK-NEXT:    [[SUM_RED_PROMOTED:%.*]] = load float, ptr [[SUM_RED]], align 4, !tbaa [[TBAA2:![0-9]+]]
; CHECK-NEXT:    [[WIDE_TRIP_COUNT40:%.*]] = zext i32 [[NUM]] to i64
; CHECK-NEXT:    br label [[OMP_INNER_FOR_BODY:%.*]]
; CHECK:       omp.inner.for.body:
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[DIR_OMP_SIMD_2]] ], [ [[INDVARS_IV_NEXT:%.*]], [[OMP_INNER_FOR_BODY]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = phi float [ [[SUM_RED_PROMOTED]], [[DIR_OMP_SIMD_2]] ], [ [[ADD10:%.*]], [[OMP_INNER_FOR_BODY]] ]
; CHECK-NEXT:    [[PTRIDX:%.*]] = getelementptr inbounds float, ptr [[KX:%.*]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[TMP2:%.*]] = load float, ptr [[PTRIDX]], align 4, !tbaa [[TBAA2]], !llvm.access.group [[ACC_GRP6:![0-9]+]]
; CHECK-NEXT:    [[PTRIDX6:%.*]] = getelementptr inbounds float, ptr [[KY:%.*]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[TMP3:%.*]] = load float, ptr [[PTRIDX6]], align 4, !tbaa [[TBAA2]], !llvm.access.group [[ACC_GRP6]]
; CHECK-NEXT:    [[ADD7:%.*]] = fadd fast float [[TMP3]], [[TMP2]]
; CHECK-NEXT:    [[MUL8:%.*]] = fmul fast float [[ADD7]], 0x401921FB60000000
; CHECK-NEXT:    [[MUL8_OVERPI:%.*]] = fmul fast float [[ADD7]], 2.000000e+00
; CHECK-NEXT:    [[TMP4:%.*]] = call fast float @cospif(float [[MUL8_OVERPI]]) #[[ATTR0:[0-9]+]]
; CHECK-NEXT:    [[MUL8_OVERPI1:%.*]] = fmul fast float [[ADD7]], 2.000000e+00
; CHECK-NEXT:    [[TMP5:%.*]] = call fast float @sinpif(float [[MUL8_OVERPI1]]) #[[ATTR0]]
; CHECK-NEXT:    [[MUL9:%.*]] = fmul fast float [[TMP4]], [[TMP5]]
; CHECK-NEXT:    [[ADD10]] = fadd fast float [[MUL9]], [[TMP1]]
; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT40]]
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label [[DIR_OMP_END_SIMD_239:%.*]], label [[OMP_INNER_FOR_BODY]], !llvm.loop [[LOOP7:![0-9]+]]
; CHECK:       DIR.OMP.END.SIMD.239:
; CHECK-NEXT:    store i32 [[NUM]], ptr [[I_LINEAR_IV]], align 4, !tbaa [[TBAA10:![0-9]+]]
; CHECK-NEXT:    store float [[ADD10]], ptr [[SUM_RED]], align 4, !tbaa [[TBAA2]]
; CHECK-NEXT:    br label [[DIR_OMP_END_SIMD_3:%.*]]
; CHECK:       DIR.OMP.END.SIMD.3:
; CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP0]]) [ "DIR.OMP.END.SIMD"() ]
; CHECK-NEXT:    br label [[DIR_OMP_END_SIMD_4:%.*]]
; CHECK:       DIR.OMP.END.SIMD.4:
; CHECK-NEXT:    [[TMP6:%.*]] = fadd float [[ADD10]], 0.000000e+00
; CHECK-NEXT:    br label [[OMP_PRECOND_END]]
; CHECK:       omp.precond.end:
; CHECK-NEXT:    [[SUM_1:%.*]] = phi float [ 0.000000e+00, [[ENTRY:%.*]] ], [ [[TMP6]], [[DIR_OMP_END_SIMD_4]] ]
; CHECK-NEXT:    ret float [[SUM_1]]
;
entry:
  %Sum.red = alloca float, align 4
  %i.linear.iv = alloca i32, align 4
  %cmp = icmp sgt i32 %Num, 0
  br i1 %cmp, label %DIR.OMP.SIMD.1, label %omp.precond.end

DIR.OMP.SIMD.1:                                   ; preds = %entry
  store float 0.000000e+00, ptr %Sum.red, align 4
  br label %DIR.OMP.SIMD.141

DIR.OMP.SIMD.141:                                 ; preds = %DIR.OMP.SIMD.1
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.REDUCTION.ADD"(ptr %Sum.red), "QUAL.OMP.LINEAR:IV"(ptr %i.linear.iv, i32 1), "QUAL.OMP.NORMALIZED.IV"(ptr null), "QUAL.OMP.NORMALIZED.UB"(ptr null) ]
  br label %DIR.OMP.SIMD.2

DIR.OMP.SIMD.2:                                   ; preds = %DIR.OMP.SIMD.141
  %Sum.red.promoted = load float, ptr %Sum.red, align 4, !tbaa !2
  %wide.trip.count40 = zext i32 %Num to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %DIR.OMP.SIMD.2, %omp.inner.for.body
  %indvars.iv = phi i64 [ 0, %DIR.OMP.SIMD.2 ], [ %indvars.iv.next, %omp.inner.for.body ]
  %1 = phi float [ %Sum.red.promoted, %DIR.OMP.SIMD.2 ], [ %add10, %omp.inner.for.body ]
  %ptridx = getelementptr inbounds float, ptr %Kx, i64 %indvars.iv
  %2 = load float, ptr %ptridx, align 4, !tbaa !2, !llvm.access.group !6
  %ptridx6 = getelementptr inbounds float, ptr %Ky, i64 %indvars.iv
  %3 = load float, ptr %ptridx6, align 4, !tbaa !2, !llvm.access.group !6
  %add7 = fadd fast float %3, %2
  %mul8 = fmul fast float %add7, 0x401921FB60000000
  %4 = call fast float @llvm.cos.f32(float %mul8) #4
  %5 = call fast float @llvm.sin.f32(float %mul8) #4
  %mul9 = fmul fast float %4, %5
  %add10 = fadd fast float %mul9, %1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count40
  br i1 %exitcond.not, label %DIR.OMP.END.SIMD.239, label %omp.inner.for.body, !llvm.loop !7

DIR.OMP.END.SIMD.239:                             ; preds = %omp.inner.for.body
  store i32 %Num, ptr %i.linear.iv, align 4, !tbaa !10
  store float %add10, ptr %Sum.red, align 4, !tbaa !2
  br label %DIR.OMP.END.SIMD.3

DIR.OMP.END.SIMD.3:                               ; preds = %DIR.OMP.END.SIMD.239
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  br label %DIR.OMP.END.SIMD.4

DIR.OMP.END.SIMD.4:                               ; preds = %DIR.OMP.END.SIMD.3
  %6 = fadd float %add10, 0.000000e+00
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %DIR.OMP.END.SIMD.4, %entry
  %Sum.1 = phi float [ 0.000000e+00, %entry ], [ %6, %DIR.OMP.END.SIMD.4 ]
  ret float %Sum.1
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #2

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #2

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.cos.f32(float) #3

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.sin.f32(float) #3

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @cospif(float) #3

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @sinpif(float) #3

attributes #0 = { "imf-precision"="low" }
attributes #1 = { argmemonly nofree nosync nounwind willreturn }
attributes #2 = { nounwind }
attributes #3 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #4 = { "imf-precision"="low" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Intel(R) oneAPI DPC++ Compiler 2021.2.0 (YYYY.x.0.MMDD)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"float", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C++ TBAA"}
!6 = distinct !{}
!7 = distinct !{!7, !8, !9}
!8 = !{!"llvm.loop.vectorize.ivdep_loop", i32 0}
!9 = !{!"llvm.loop.parallel_accesses", !6}
!10 = !{!11, !11, i64 0}
!11 = !{!"int", !4, i64 0}
