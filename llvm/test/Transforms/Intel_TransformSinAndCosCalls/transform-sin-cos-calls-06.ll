; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; Source code compiled with: -O3 -ffast-math -fimf-precision=low
; #include <math.h>
;
; #define PIx2 6.2831853071795864769252867665590058f
;
; float ComputeQCPU(int Num, float *Kx, float *Ky)
; {
;   float Arg, cosArg, sinArg;
;   float Sum = 0.0;
;   int i;
;
;   #pragma omp simd private(Arg, cosArg, sinArg) reduction(+:Sum)
;   for (i = 0; i < Num; i++) {
;     Arg = PIx2 * (Kx[i] + Ky[i]);
;     cosArg = cosf(Arg);
;     sinArg = sinf(Arg);
;     Sum += (cosArg * sinArg);
;   }
;   return Sum;
; }
;
; RUN: opt < %s -transform-sin-cos-calls -enable-transform-sin-cos -S 2>&1 | FileCheck %s
; RUN: opt -passes="transform-sin-cos-calls" -enable-transform-sin-cos -S 2>&1 < %s | FileCheck %s
;
; CHECK-LABEL: @ComputeQCPU(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[SUM_RED:%.*]] = alloca float, align 4
; CHECK-NEXT:    [[I_LINEAR_IV:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[NUM:%.*]], 0
; CHECK-NEXT:    br i1 [[CMP]], label [[OMP_INNER_FOR_BODY_LR_PH:%.*]], label [[OMP_PRECOND_END:%.*]]
; CHECK:       omp.inner.for.body.lr.ph:
; CHECK-NEXT:    store float 0.000000e+00, float* [[SUM_RED]], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.REDUCTION.ADD"(float* [[SUM_RED]]), "QUAL.OMP.LINEAR:IV"(i32* [[I_LINEAR_IV]], i32 1), "QUAL.OMP.NORMALIZED.IV"(i8* null), "QUAL.OMP.NORMALIZED.UB"(i8* null) ]
; CHECK-NEXT:    [[SUM_RED_PROMOTED:%.*]] = load float, float* [[SUM_RED]], align 4, [[TBAA2:!tbaa !.*]]
; CHECK-NEXT:    [[WIDE_TRIP_COUNT37:%.*]] = zext i32 [[NUM]] to i64
; CHECK-NEXT:    br label [[OMP_INNER_FOR_BODY:%.*]]
; CHECK:       omp.inner.for.body:
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[OMP_INNER_FOR_BODY_LR_PH]] ], [ [[INDVARS_IV_NEXT:%.*]], [[OMP_INNER_FOR_BODY]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = phi float [ [[SUM_RED_PROMOTED]], [[OMP_INNER_FOR_BODY_LR_PH]] ], [ [[ADD10:%.*]], [[OMP_INNER_FOR_BODY]] ]
; CHECK-NEXT:    [[PTRIDX:%.*]] = getelementptr inbounds float, float* [[KX:%.*]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[TMP2:%.*]] = load float, float* [[PTRIDX]], align 4, [[TBAA2]]
; CHECK-NEXT:    [[PTRIDX6:%.*]] = getelementptr inbounds float, float* [[KY:%.*]], i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[TMP3:%.*]] = load float, float* [[PTRIDX6]], align 4, [[TBAA2]]
; CHECK-NEXT:    [[ADD7:%.*]] = fadd fast float [[TMP3]], [[TMP2]]
; CHECK-NEXT:    [[MUL8:%.*]] = fmul fast float [[ADD7]], 0x401921FB60000000
; CHECK-NEXT:    [[MUL8_OVERPI:%.*]] = fmul fast float [[ADD7]], 2.000000e+00
; CHECK-NEXT:    [[TMP4:%.*]] = call fast float @cospif(float [[MUL8_OVERPI]]) [[ATTR3:#.*]]
; CHECK-NEXT:    [[MUL8_OVERPI1:%.*]] = fmul fast float [[ADD7]], 2.000000e+00
; CHECK-NEXT:    [[TMP5:%.*]] = call fast float @sinpif(float [[MUL8_OVERPI1]]) [[ATTR3]]
; CHECK-NEXT:    [[MUL9:%.*]] = fmul fast float [[TMP4]], [[TMP5]]
; CHECK-NEXT:    [[ADD10]] = fadd fast float [[MUL9]], [[TMP1]]
; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], [[WIDE_TRIP_COUNT37]]
; CHECK-NEXT:    br i1 [[EXITCOND]], label [[OMP_INNER_FOR_COND_OMP_LOOP_EXIT_SPLIT_LOOPEXIT_CRIT_EDGE_SPLIT_SPLIT:%.*]], label [[OMP_INNER_FOR_BODY]]
; CHECK:       omp.inner.for.cond.omp.loop.exit.split.loopexit_crit_edge.split.split:
; CHECK-NEXT:    store i32 [[NUM]], i32* [[I_LINEAR_IV]], align 4, [[TBAA6:!tbaa !.*]]
; CHECK-NEXT:    store float [[ADD10]], float* [[SUM_RED]], align 4, [[TBAA2]]
; CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP0]]) [ "DIR.OMP.END.SIMD"() ]
; CHECK-NEXT:    [[TMP6:%.*]] = fadd float [[ADD10]], 0.000000e+00
; CHECK-NEXT:    br label [[OMP_PRECOND_END]]
; CHECK:       omp.precond.end:
; CHECK-NEXT:    [[SUM_1:%.*]] = phi float [ 0.000000e+00, [[ENTRY:%.*]] ], [ [[TMP6]], [[OMP_INNER_FOR_COND_OMP_LOOP_EXIT_SPLIT_LOOPEXIT_CRIT_EDGE_SPLIT_SPLIT]] ]
; CHECK-NEXT:    ret float [[SUM_1]]
;
; ModuleID = 'test_pomriq.c'
source_filename = "test_pomriq.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind uwtable
define dso_local float @ComputeQCPU(i32 %Num, float* nocapture readonly %Kx, float* nocapture readonly %Ky) local_unnamed_addr #0 {
entry:
  %Sum.red = alloca float, align 4
  %i.linear.iv = alloca i32, align 4
  %cmp = icmp sgt i32 %Num, 0
  br i1 %cmp, label %omp.inner.for.body.lr.ph, label %omp.precond.end

omp.inner.for.body.lr.ph:                         ; preds = %entry
  store float 0.000000e+00, float* %Sum.red, align 4
  %0 = call token @llvm.directive.region.entry() [ "DIR.OMP.SIMD"(), "QUAL.OMP.REDUCTION.ADD"(float* %Sum.red), "QUAL.OMP.LINEAR:IV"(i32* %i.linear.iv, i32 1), "QUAL.OMP.NORMALIZED.IV"(i8* null), "QUAL.OMP.NORMALIZED.UB"(i8* null) ]
  %Sum.red.promoted = load float, float* %Sum.red, align 4, !tbaa !2
  %wide.trip.count37 = zext i32 %Num to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.inner.for.body.lr.ph, %omp.inner.for.body
  %indvars.iv = phi i64 [ 0, %omp.inner.for.body.lr.ph ], [ %indvars.iv.next, %omp.inner.for.body ]
  %1 = phi float [ %Sum.red.promoted, %omp.inner.for.body.lr.ph ], [ %add10, %omp.inner.for.body ]
  %ptridx = getelementptr inbounds float, float* %Kx, i64 %indvars.iv
  %2 = load float, float* %ptridx, align 4, !tbaa !2
  %ptridx6 = getelementptr inbounds float, float* %Ky, i64 %indvars.iv
  %3 = load float, float* %ptridx6, align 4, !tbaa !2
  %add7 = fadd fast float %3, %2
  %mul8 = fmul fast float %add7, 0x401921FB60000000
  %4 = call fast float @llvm.cos.f32(float %mul8) #3
  %5 = call fast float @llvm.sin.f32(float %mul8) #3
  %mul9 = fmul fast float %4, %5
  %add10 = fadd fast float %mul9, %1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count37
  br i1 %exitcond, label %omp.inner.for.cond.omp.loop.exit.split.loopexit_crit_edge.split.split, label %omp.inner.for.body

omp.inner.for.cond.omp.loop.exit.split.loopexit_crit_edge.split.split: ; preds = %omp.inner.for.body
  store i32 %Num, i32* %i.linear.iv, align 4, !tbaa !6
  store float %add10, float* %Sum.red, align 4, !tbaa !2
  call void @llvm.directive.region.exit(token %0) [ "DIR.OMP.END.SIMD"() ]
  %6 = fadd float %add10, 0.000000e+00
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %omp.inner.for.cond.omp.loop.exit.split.loopexit_crit_edge.split.split, %entry
  %Sum.1 = phi float [ 0.000000e+00, %entry ], [ %6, %omp.inner.for.cond.omp.loop.exit.split.loopexit_crit_edge.split.split ]
  ret float %Sum.1
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.sin.f32(float) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.cos.f32(float) #2

attributes #0 = { "unsafe-fp-math"="true" }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone speculatable willreturn }
attributes #3 = { "imf-precision"="low" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Intel(R) oneAPI DPC++ Compiler Pro 2021.1 (YYYY.x.0.MMDD)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"float", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!7, !7, i64 0}
!7 = !{!"int", !4, i64 0}
