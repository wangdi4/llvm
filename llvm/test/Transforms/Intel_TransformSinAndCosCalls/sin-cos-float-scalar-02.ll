; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
;
; Test case:
; . float sinf/cosf (various patterns)
; . scalar (sinf/cosf will not be vectorized by the compiler)
; . precision: medium
; . fast-math: yes
;
; Compilation options:
; icpx -O2 -ffast-math -fimf-precision=medium
;
; #include <math.h>
;
; #define FP_NUM 7.38906f
; #define PI ((float)3.14159265358979)
;
; float Compute(float fArg)
; {
;   float f1, f2, f3, f4, f5, f6, f7, f8;
;
;   f1 = sinf(8.0 * fArg);
;   f2 = cosf(8.0 * fArg);
;
;   f3 = sinf(fArg * (10.0 + FP_NUM));
;   f4 = cosf(fArg * 10.25);
;
;   f5 = sinf(fArg - 20.0);
;   f6 = cosf(fArg * fArg);
;
;   float arg_mul = (FP_NUM + fArg) * PI;
;   f7 = sinf(arg_mul);
;   f8 = cosf(arg_mul);
;
;   return (f1 + f2 + f3 + f4 + f5 + f6 + f7 + f8);
; }
;
; RUN: opt < %s -transform-sin-cos-calls -S 2>&1 | FileCheck %s
; RUN: opt -passes="transform-sin-cos-calls" -S 2>&1 < %s | FileCheck %s
;
; CHECK-LABEL: @_Z7Computef(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CONV1:%.*]] = fmul fast float [[FARG:%.*]], 8.000000e+00
; CHECK-NEXT:    [[TMP0:%.*]] = tail call fast float @llvm.sin.f32(float [[CONV1]]) [[ATTR0:#.*]]
; CHECK-NEXT:    [[TMP1:%.*]] = tail call fast float @llvm.cos.f32(float [[CONV1]]) [[ATTR0]]
; CHECK-NEXT:    [[CONV7:%.*]] = fmul fast float [[FARG]], 0x4031639980000000
; CHECK-NEXT:    [[CONV7_OVERPI:%.*]] = fmul fast float [[FARG]], 0x401623F3E0000000
; CHECK-NEXT:    [[TMP2:%.*]] = tail call fast float @sinpif(float [[CONV7_OVERPI]]) [[ATTR0]]
; CHECK-NEXT:    [[CONV10:%.*]] = fmul fast float [[FARG]], 1.025000e+01
; CHECK-NEXT:    [[CONV10_OVERPI:%.*]] = fmul fast float [[FARG]], 0x400A19F600000000
; CHECK-NEXT:    [[TMP3:%.*]] = tail call fast float @cospif(float [[CONV10_OVERPI]]) [[ATTR0]]
; CHECK-NEXT:    [[CONV12:%.*]] = fadd fast float [[FARG]], -2.000000e+01
; CHECK-NEXT:    [[TMP4:%.*]] = tail call fast float @llvm.sin.f32(float [[CONV12]]) [[ATTR0]]
; CHECK-NEXT:    [[MUL13:%.*]] = fmul fast float [[FARG]], [[FARG]]
; CHECK-NEXT:    [[TMP5:%.*]] = tail call fast float @llvm.cos.f32(float [[MUL13]]) [[ATTR0]]
; CHECK-NEXT:    [[TMP6:%.*]] = fmul fast float [[FARG]], 0x400921FB60000000
; CHECK-NEXT:    [[MUL14:%.*]] = fadd fast float [[TMP6]], 0x403736A280000000
; CHECK-NEXT:    [[TMP7:%.*]] = tail call fast float @llvm.sin.f32(float [[MUL14]]) [[ATTR0]]
; CHECK-NEXT:    [[TMP8:%.*]] = tail call fast float @llvm.cos.f32(float [[MUL14]]) [[ATTR0]]
; CHECK-NEXT:    [[ADD15:%.*]] = fadd fast float [[TMP0]], [[TMP1]]
; CHECK-NEXT:    [[ADD16:%.*]] = fadd fast float [[ADD15]], [[TMP2]]
; CHECK-NEXT:    [[ADD17:%.*]] = fadd fast float [[ADD16]], [[TMP3]]
; CHECK-NEXT:    [[ADD18:%.*]] = fadd fast float [[ADD17]], [[TMP4]]
; CHECK-NEXT:    [[ADD19:%.*]] = fadd fast float [[ADD18]], [[TMP5]]
; CHECK-NEXT:    [[ADD20:%.*]] = fadd fast float [[ADD19]], [[TMP7]]
; CHECK-NEXT:    [[ADD21:%.*]] = fadd fast float [[ADD20]], [[TMP8]]
; CHECK-NEXT:    ret float [[ADD21]]
;
; Function Attrs: nounwind readnone uwtable mustprogress
define dso_local float @_Z7Computef(float %fArg) local_unnamed_addr #0 {
entry:
  %conv1 = fmul fast float %fArg, 8.000000e+00
  %0 = tail call fast float @llvm.sin.f32(float %conv1) #2
  %1 = tail call fast float @llvm.cos.f32(float %conv1) #2
  %conv7 = fmul fast float %fArg, 0x4031639980000000
  %2 = tail call fast float @llvm.sin.f32(float %conv7) #2
  %conv10 = fmul fast float %fArg, 1.025000e+01
  %3 = tail call fast float @llvm.cos.f32(float %conv10) #2
  %conv12 = fadd fast float %fArg, -2.000000e+01
  %4 = tail call fast float @llvm.sin.f32(float %conv12) #2
  %mul13 = fmul fast float %fArg, %fArg
  %5 = tail call fast float @llvm.cos.f32(float %mul13) #2
  %6 = fmul fast float %fArg, 0x400921FB60000000
  %mul14 = fadd fast float %6, 0x403736A280000000
  %7 = tail call fast float @llvm.sin.f32(float %mul14) #2
  %8 = tail call fast float @llvm.cos.f32(float %mul14) #2
  %add15 = fadd fast float %0, %1
  %add16 = fadd fast float %add15, %2
  %add17 = fadd fast float %add16, %3
  %add18 = fadd fast float %add17, %4
  %add19 = fadd fast float %add18, %5
  %add20 = fadd fast float %add19, %7
  %add21 = fadd fast float %add20, %8
  ret float %add21
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.sin.f32(float) #1

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.cos.f32(float) #1

attributes #0 = { "imf-precision"="medium" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { "imf-precision"="medium" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Intel(R) oneAPI DPC++ Compiler 2021.2.0 (YYYY.x.0.MMDD)"}
