; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; Source code compiled with: -O3 -ffast-math -fimf-precision=low
; #include <math.h>
; #define FP_NUM 7.38906f
; #define M_PI ((float)3.14159265358979)
;
; float Compute(float fArg)
; {
;  float f1, f2, f3, f4, f5, f6, f7, f8;
;
;  f1 = sinf(8.0 * fArg);
;  f2 = cosf(8.0 * fArg);
;
;  f3 = sinf(fArg * 10.0);
;  f4 = cosf(fArg * 10.0);
;
;  f5 = sinf(fArg - 20.0);
;  f6 = cosf(fArg * fArg);
;
;  float arg_mul = (FP_NUM + fArg)*M_PI;
;  f7 = sinf(arg_mul);
;  f8 = cosf(arg_mul);
;
;  return (f1 + f2 + f3 + f4 + f5 + f6 + f7 + f8);
; }
;
; RUN: opt < %s -transform-sin-cos-calls -S -enable-transform-sin-cos 2>&1 | FileCheck %s
; RUN: opt -passes="transform-sin-cos-calls" -enable-transform-sin-cos -S 2>&1 < %s | FileCheck %s
;
; CHECK-LABEL: @_Z7Computef(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CONV1:%.*]] = fmul fast float [[FARG:%.*]], 8.000000e+00
; CHECK-NEXT:    [[CONV1_OVERPI:%.*]] = fmul fast float [[FARG]], 0x40045F3060000000
; CHECK-NEXT:    [[TMP0:%.*]] = tail call fast float @sinpif(float [[CONV1_OVERPI]]) [[ATTR2:#.*]]
; CHECK-NEXT:    [[CONV1_OVERPI1:%.*]] = fmul fast float [[FARG]], 0x40045F3060000000
; CHECK-NEXT:    [[TMP1:%.*]] = tail call fast float @cospif(float [[CONV1_OVERPI1]]) [[ATTR2]]
; CHECK-NEXT:    [[CONV7:%.*]] = fmul fast float [[FARG]], 1.000000e+01
; CHECK-NEXT:    [[CONV7_OVERPI:%.*]] = fmul fast float [[FARG]], 0x400976FC80000000
; CHECK-NEXT:    [[TMP2:%.*]] = tail call fast float @sinpif(float [[CONV7_OVERPI]]) [[ATTR2]]
; CHECK-NEXT:    [[CONV7_OVERPI2:%.*]] = fmul fast float [[FARG]], 0x400976FC80000000
; CHECK-NEXT:    [[TMP3:%.*]] = tail call fast float @cospif(float [[CONV7_OVERPI2]]) [[ATTR2]]
; CHECK-NEXT:    [[CONV12:%.*]] = fadd fast float [[FARG]], -2.000000e+01
; CHECK-NEXT:    [[TMP4:%.*]] = tail call fast float @llvm.sin.f32(float [[CONV12]]) [[ATTR2]]
; CHECK-NEXT:    [[MUL13:%.*]] = fmul fast float [[FARG]], [[FARG]]
; CHECK-NEXT:    [[TMP5:%.*]] = tail call fast float @llvm.cos.f32(float [[MUL13]]) [[ATTR2]]
; CHECK-NEXT:    [[CONV13:%.*]] = fmul fast float [[FARG]], 0x401921FB60000000
; CHECK-NEXT:    [[MUL14:%.*]] = fadd fast float [[CONV13]], 0x404736A280000000
; CHECK-NEXT:    [[MUL14_MULOVERPI:%.*]] = fmul fast float [[FARG]], 2.000000e+00
; CHECK-NEXT:    [[ADD_ADDOVERPI:%.*]] = fadd fast float [[MUL14_MULOVERPI]], 0x402D8E65C0000000
; CHECK-NEXT:    [[TMP6:%.*]] = tail call fast float @sinpif(float [[ADD_ADDOVERPI]]) [[ATTR2]]
; CHECK-NEXT:    [[MUL14_MULOVERPI3:%.*]] = fmul fast float [[FARG]], 2.000000e+00
; CHECK-NEXT:    [[ADD_ADDOVERPI4:%.*]] = fadd fast float [[MUL14_MULOVERPI3]], 0x402D8E65C0000000
; CHECK-NEXT:    [[TMP7:%.*]] = tail call fast float @cospif(float [[ADD_ADDOVERPI4]]) [[ATTR2]]
; CHECK-NEXT:    [[ADD:%.*]] = fadd fast float [[TMP0]], [[TMP1]]
; CHECK-NEXT:    [[ADD14:%.*]] = fadd fast float [[ADD]], [[TMP2]]
; CHECK-NEXT:    [[ADD15:%.*]] = fadd fast float [[ADD14]], [[TMP3]]
; CHECK-NEXT:    [[ADD16:%.*]] = fadd fast float [[ADD15]], [[TMP4]]
; CHECK-NEXT:    [[ADD17:%.*]] = fadd fast float [[ADD16]], [[TMP5]]
; CHECK-NEXT:    [[ADD18:%.*]] = fadd fast float [[ADD17]], [[TMP6]]
; CHECK-NEXT:    [[ADD19:%.*]] = fadd fast float [[ADD18]], [[TMP7]]
; CHECK-NEXT:    ret float [[ADD19]]
;
; ModuleID = 'test_sinpi_cospi.cpp'
source_filename = "test_sinpi_cospi.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind readnone uwtable
define dso_local float @_Z7Computef(float %fArg) local_unnamed_addr #0 {
entry:
  %conv1 = fmul fast float %fArg, 8.000000e+00
  %0 = tail call fast float @llvm.sin.f32(float %conv1) #2
  %1 = tail call fast float @llvm.cos.f32(float %conv1) #2
  %conv7 = fmul fast float %fArg, 1.000000e+01
  %2 = tail call fast float @llvm.sin.f32(float %conv7) #2
  %3 = tail call fast float @llvm.cos.f32(float %conv7) #2
  %conv12 = fadd fast float %fArg, -2.000000e+01
  %4 = tail call fast float @llvm.sin.f32(float %conv12) #2
  %mul13 = fmul fast float %fArg, %fArg
  %5 = tail call fast float @llvm.cos.f32(float %mul13) #2
  %conv13 = fmul fast float %fArg, 0x401921FB60000000
  %mul14 = fadd fast float %conv13, 0x404736A280000000
  %6 = tail call fast float @llvm.sin.f32(float %mul14) #2
  %7 = tail call fast float @llvm.cos.f32(float %mul14) #2
  %add = fadd fast float %0, %1
  %add14 = fadd fast float %add, %2
  %add15 = fadd fast float %add14, %3
  %add16 = fadd fast float %add15, %4
  %add17 = fadd fast float %add16, %5
  %add18 = fadd fast float %add17, %6
  %add19 = fadd fast float %add18, %7
  ret float %add19
}

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.sin.f32(float) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.cos.f32(float) #1

attributes #0 = { "unsafe-fp-math"="true" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "imf-precision"="low" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Intel(R) oneAPI DPC++ Compiler Pro 2021.1 (YYYY.x.0.MMDD)"}
