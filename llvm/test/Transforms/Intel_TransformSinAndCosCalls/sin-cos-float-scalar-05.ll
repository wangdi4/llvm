; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
;
; Test case:
; . float sinf/cosf (various patterns)
; . scalar (sinf/cosf will not be vectorized by compiler)
; . precision: not specified (precision=medium by default)
; . fast-math: no
;
; Compilation options:
; icpx -O2 -fno-fast-math
;
; #include <math.h>
;
; #define FP_NUM 7.38906f
; #define PI ((float)3.14159265358979)
;
; float Compute(float fArg)
; {
;   float f1, f2, f3, f4, f5, f6, f7, f8;
;
;   f1 = sinf(8.0 * fArg);
;   f2 = cosf(8.0 * fArg);
;
;   f3 = sinf(fArg * (10.0 + FP_NUM));
;   f4 = cosf(fArg * 10.25);
;
;   f5 = sinf(fArg - 20.0);
;   f6 = cosf(fArg * fArg);
;
;   float arg_mul = (FP_NUM + fArg) * PI;
;   f7 = sinf(arg_mul);
;   f8 = cosf(arg_mul);
;
;   return (f1 + f2 + f3 + f4 + f5 + f6 + f7 + f8);
; }
;
; RUN: opt -passes="transform-sin-cos-calls" -S 2>&1 < %s | FileCheck %s
;
; CHECK-LABEL: @_Z7Computef(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CONV:%.*]] = fpext float [[FARG:%.*]] to double
; CHECK-NEXT:    [[CONV1:%.*]] = fmul float [[FARG]], 8.000000e+00
; CHECK-NEXT:    [[CALL:%.*]] = tail call float @sinf(float [[CONV1]]) [[ATTR1:#.*]]
; CHECK-NEXT:    [[CALL5:%.*]] = tail call float @cosf(float [[CONV1]]) [[ATTR1]]
; CHECK-NEXT:    [[MUL7:%.*]] = fmul double [[CONV]], 0x4031639970000000
; CHECK-NEXT:    [[CONV8:%.*]] = fptrunc double [[MUL7]] to float
; CHECK-NEXT:    [[CALL9:%.*]] = tail call float @sinf(float [[CONV8]]) [[ATTR1]]
; CHECK-NEXT:    [[CONV12:%.*]] = fmul float [[FARG]], 1.025000e+01
; CHECK-NEXT:    [[CALL13:%.*]] = tail call float @cosf(float [[CONV12]]) [[ATTR1]]
; CHECK-NEXT:    [[CONV15:%.*]] = fadd float [[FARG]], -2.000000e+01
; CHECK-NEXT:    [[CALL16:%.*]] = tail call float @sinf(float [[CONV15]]) [[ATTR1]]
; CHECK-NEXT:    [[MUL17:%.*]] = fmul float [[FARG]], [[FARG]]
; CHECK-NEXT:    [[CALL18:%.*]] = tail call float @cosf(float [[MUL17]]) [[ATTR1]]
; CHECK-NEXT:    [[ADD:%.*]] = fadd float [[FARG]], 0x401D8E65C0000000
; CHECK-NEXT:    [[MUL19:%.*]] = fmul float [[ADD]], 0x400921FB60000000
; CHECK-NEXT:    [[CALL20:%.*]] = tail call float @sinf(float [[MUL19]]) [[ATTR1]]
; CHECK-NEXT:    [[CALL21:%.*]] = tail call float @cosf(float [[MUL19]]) [[ATTR1]]
; CHECK-NEXT:    [[ADD22:%.*]] = fadd float [[CALL]], [[CALL5]]
; CHECK-NEXT:    [[ADD23:%.*]] = fadd float [[ADD22]], [[CALL9]]
; CHECK-NEXT:    [[ADD24:%.*]] = fadd float [[ADD23]], [[CALL13]]
; CHECK-NEXT:    [[ADD25:%.*]] = fadd float [[ADD24]], [[CALL16]]
; CHECK-NEXT:    [[ADD26:%.*]] = fadd float [[ADD25]], [[CALL18]]
; CHECK-NEXT:    [[ADD27:%.*]] = fadd float [[ADD26]], [[CALL20]]
; CHECK-NEXT:    [[ADD28:%.*]] = fadd float [[ADD27]], [[CALL21]]
; CHECK-NEXT:    ret float [[ADD28]]
;
; Function Attrs: nofree nounwind uwtable mustprogress
define dso_local float @_Z7Computef(float %fArg) local_unnamed_addr #0 {
entry:
  %conv = fpext float %fArg to double
  %conv1 = fmul float %fArg, 8.000000e+00
  %call = tail call float @sinf(float %conv1) #2
  %call5 = tail call float @cosf(float %conv1) #2
  %mul7 = fmul double %conv, 0x4031639970000000
  %conv8 = fptrunc double %mul7 to float
  %call9 = tail call float @sinf(float %conv8) #2
  %conv12 = fmul float %fArg, 1.025000e+01
  %call13 = tail call float @cosf(float %conv12) #2
  %conv15 = fadd float %fArg, -2.000000e+01
  %call16 = tail call float @sinf(float %conv15) #2
  %mul17 = fmul float %fArg, %fArg
  %call18 = tail call float @cosf(float %mul17) #2
  %add = fadd float %fArg, 0x401D8E65C0000000
  %mul19 = fmul float %add, 0x400921FB60000000
  %call20 = tail call float @sinf(float %mul19) #2
  %call21 = tail call float @cosf(float %mul19) #2
  %add22 = fadd float %call, %call5
  %add23 = fadd float %add22, %call9
  %add24 = fadd float %add23, %call13
  %add25 = fadd float %add24, %call16
  %add26 = fadd float %add25, %call18
  %add27 = fadd float %add26, %call20
  %add28 = fadd float %add27, %call21
  ret float %add28
}

; Function Attrs: nofree nounwind
declare dso_local float @sinf(float) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local float @cosf(float) local_unnamed_addr #1

attributes #0 = { "unsafe-fp-math"="false" }
attributes #1 = { "unsafe-fp-math"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Intel(R) oneAPI DPC++ Compiler 2021.2.0 (YYYY.x.0.MMDD)"}
