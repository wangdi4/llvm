; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; Source code compiled with: -O3 (Note: -fimf-precision=medium by default)
; #include <math.h>
; #define FP_NUM 7.38906f
; #define M_PI ((float)3.14159265358979)
;
; float Compute(float fArg)
; {
;  float f1, f2, f3, f4, f5, f6, f7, f8;
;
;  f1 = sinf(8.0 * fArg);
;  f2 = cosf(8.0 * fArg);
;
;  f3 = sinf(fArg * 10.0);
;  f4 = cosf(fArg * 10.0);
;
;  f5 = sinf(fArg - 20.0);
;  f6 = cosf(fArg * fArg);
;
;  float arg_mul = (FP_NUM + fArg)*M_PI;
;  f7 = sinf(arg_mul);
;  f8 = cosf(arg_mul);
;
;  return (f1 + f2 + f3 + f4 + f5 + f6 + f7 + f8);
; }
;
; RUN: opt < %s -transform-sin-cos-calls -enable-transform-sin-cos -S 2>&1 | FileCheck %s
; RUN: opt -passes="transform-sin-cos-calls" -enable-transform-sin-cos -S 2>&1 < %s | FileCheck %s
;
; CHECK-LABEL: @_Z7Computef(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CONV1:%.*]] = fmul float [[FARG:%.*]], 8.000000e+00
; CHECK-NEXT:    [[CALL:%.*]] = tail call float @sinf(float [[CONV1]]) [[ATTR1:#.*]]
; CHECK-NEXT:    [[CALL5:%.*]] = tail call float @cosf(float [[CONV1]]) [[ATTR1]]
; CHECK-NEXT:    [[CONV8:%.*]] = fmul float [[FARG]], 1.000000e+01
; CHECK-NEXT:    [[CALL9:%.*]] = tail call float @sinf(float [[CONV8]]) [[ATTR1]]
; CHECK-NEXT:    [[CALL13:%.*]] = tail call float @cosf(float [[CONV8]]) [[ATTR1]]
; CHECK-NEXT:    [[CONV15:%.*]] = fadd float [[FARG]], -2.000000e+01
; CHECK-NEXT:    [[CALL16:%.*]] = tail call float @sinf(float [[CONV15]]) [[ATTR1]]
; CHECK-NEXT:    [[MUL17:%.*]] = fmul float [[FARG]], [[FARG]]
; CHECK-NEXT:    [[CALL18:%.*]] = tail call float @cosf(float [[MUL17]]) [[ATTR1]]
; CHECK-NEXT:    [[CONV13:%.*]] = fmul float [[FARG]], 0x401921FB60000000
; CHECK-NEXT:    [[MUL14:%.*]] = fadd float [[CONV13]], 0x404736A280000000
; CHECK-NEXT:    [[CALL19:%.*]] = tail call float @sinf(float [[MUL14]]) [[ATTR1]]
; CHECK-NEXT:    [[CALL20:%.*]] = tail call float @cosf(float [[MUL14]]) [[ATTR1]]
; CHECK-NEXT:    [[ADD:%.*]] = fadd float [[CALL]], [[CALL5]]
; CHECK-NEXT:    [[ADD19:%.*]] = fadd float [[ADD]], [[CALL9]]
; CHECK-NEXT:    [[ADD20:%.*]] = fadd float [[ADD19]], [[CALL13]]
; CHECK-NEXT:    [[ADD21:%.*]] = fadd float [[ADD20]], [[CALL16]]
; CHECK-NEXT:    [[ADD22:%.*]] = fadd float [[ADD21]], [[CALL18]]
; CHECK-NEXT:    [[ADD23:%.*]] = fadd float [[ADD22]], [[CALL19]]
; CHECK-NEXT:    [[ADD24:%.*]] = fadd float [[ADD23]], [[CALL20]]
; CHECK-NEXT:    ret float [[ADD24]]
;
; ModuleID = 'test_sinpi_cospi.cpp'
source_filename = "test_sinpi_cospi.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree nounwind uwtable
define dso_local float @_Z7Computef(float %fArg) local_unnamed_addr #1 {
entry:
  %conv1 = fmul float %fArg, 8.000000e+00
  %call = tail call float @sinf(float %conv1) #2
  %call5 = tail call float @cosf(float %conv1) #2
  %conv8 = fmul float %fArg, 1.000000e+01
  %call9 = tail call float @sinf(float %conv8) #2
  %call13 = tail call float @cosf(float %conv8) #2
  %conv15 = fadd float %fArg, -2.000000e+01
  %call16 = tail call float @sinf(float %conv15) #2
  %mul17 = fmul float %fArg, %fArg
  %call18 = tail call float @cosf(float %mul17) #2
  %conv13 = fmul float %fArg, 0x401921FB60000000
  %mul14 = fadd float %conv13, 0x404736A280000000
  %call19 = tail call float @sinf(float %mul14) #2
  %call20 = tail call float @cosf(float %mul14) #2
  %add = fadd float %call, %call5
  %add19 = fadd float %add, %call9
  %add20 = fadd float %add19, %call13
  %add21 = fadd float %add20, %call16
  %add22 = fadd float %add21, %call18
  %add23 = fadd float %add22, %call19
  %add24 = fadd float %add23, %call20
  ret float %add24
}

; Function Attrs: nofree nounwind
declare dso_local float @sinf(float) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local float @cosf(float) local_unnamed_addr #1

attributes #1 = { "no-infs-fp-math"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Intel(R) oneAPI DPC++ Compiler Pro 2021.1 (YYYY.x.0.MMDD)"}
