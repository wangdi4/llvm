; RUN: opt -hir-ssa-deconstruction -analyze -bugpoint-enable-legacy-pm -hir-framework -hir-cg -force-hir-cg -print-after=hir-cg 2>&1 < %s | FileCheck %s
; RUN: opt -passes="hir-ssa-deconstruction,print<hir>,hir-cg" -force-hir-cg -S 2>&1 < %s | FileCheck %s

; Verify that HIR does not contain any dbg intrinsics and CG does not create any
; llvm.dbg.declare intrinsic.
; We were incorrectly generating llvm.dbg.declare intrinsic for llvm.dbg.value()
; with DIArgList(i32 %0, i32 %inc716) as the metadata argument in incoming IR.

; Formed HIR-
; + DO i1 = 0, -1 * %.pr + -1, 1   <DO_LOOP>
; |   if (%.pr12 == 0)
; |   {
; |      %2 = inttoptr.i64.<1 x double>*(i1 + trunc.i32.i8((%0 + %.pr)));
; |      %3 = (%2)[0];
; |      (@b)[0] = 0;
; |      %1 = %3;
; |   }
; |   %hir.de.ssa.copy0.out = %1;
; |   %.pr12 = -1;
; + END LOOP


; Check that all dbg intrinsics are optimized away in HIR representation.

; CHECK: BEGIN REGION
; CHECK-NOT: llvm.dbg
; CHECK: END REGION


; Check that no declare intrinsics are generated by CG.

; CHECK-NOT: llvm.dbg.declare


@c = dso_local local_unnamed_addr global i32 0, align 4, !dbg !0
@a = dso_local local_unnamed_addr global i32 0, align 4, !dbg !19
@b = dso_local local_unnamed_addr global i32 0, align 4, !dbg !21
@d = dso_local local_unnamed_addr global i32 0, align 4, !dbg !23

; Function Attrs: nofree norecurse nosync nounwind uwtable
define dso_local i32 @e() local_unnamed_addr #0 !dbg !30 {
entry:
  %.pr = load i32, i32* @c, align 4, !dbg !39, !tbaa !42
  %0 = load i32, i32* @a, align 4, !dbg !46
  call void @llvm.dbg.value(metadata <1 x i64> undef, metadata !34, metadata !DIExpression()), !dbg !48
  %tobool.not14 = icmp eq i32 %.pr, 0, !dbg !49
  br i1 %tobool.not14, label %for.end8, label %for.body.lr.ph, !dbg !49

for.body.lr.ph:                                   ; preds = %entry
  %.pr12.pre = load i32, i32* @b, align 4, !dbg !50, !tbaa !42
  %phi.cmp = icmp eq i32 %.pr12.pre, 0, !dbg !49
  br label %for.body, !dbg !49

for.body:                                         ; preds = %for.body.lr.ph, %for.end
  %.pr12 = phi i1 [ %phi.cmp, %for.body.lr.ph ], [ true, %for.end ]
  %inc716 = phi i32 [ %.pr, %for.body.lr.ph ], [ %inc7, %for.end ]
  %1 = phi <1 x double> [ undef, %for.body.lr.ph ], [ %.lcssa, %for.end ]
  call void @llvm.dbg.value(metadata !DIArgList(i32 %0, i32 %inc716), metadata !35, metadata !DIExpression(DW_OP_LLVM_arg, 0, DW_OP_LLVM_arg, 1, DW_OP_plus, DW_OP_LLVM_convert, 32, DW_ATE_unsigned, DW_OP_LLVM_convert, 8, DW_ATE_unsigned, DW_OP_stack_value)), !dbg !48
  call void @llvm.dbg.value(metadata <1 x i64> undef, metadata !34, metadata !DIExpression()), !dbg !48
  br i1 %.pr12, label %for.end, label %for.body3.preheader, !dbg !53

for.body3.preheader:                              ; preds = %for.body
  %add = add nsw i32 %0, %inc716, !dbg !54
  call void @llvm.dbg.value(metadata i32 %add, metadata !35, metadata !DIExpression(DW_OP_LLVM_convert, 32, DW_ATE_unsigned, DW_OP_LLVM_convert, 8, DW_ATE_unsigned, DW_OP_stack_value)), !dbg !48
  %conv = zext i32 %add to i64, !dbg !46
  %sext = shl i64 %conv, 56, !dbg !55
  %conv4 = ashr exact i64 %sext, 56, !dbg !55
  %2 = inttoptr i64 %conv4 to <1 x double>*, !dbg !56
  call void @llvm.dbg.value(metadata i32 undef, metadata !34, metadata !DIExpression()), !dbg !48
  %3 = load <1 x double>, <1 x double>* %2, align 8, !dbg !56, !tbaa !57
  store i32 0, i32* @b, align 4, !dbg !58, !tbaa !42
  br label %for.end, !dbg !53

for.end:                                          ; preds = %for.body3.preheader, %for.body
  %.lcssa = phi <1 x double> [ %3, %for.body3.preheader ], [ %1, %for.body ]
  call void @llvm.dbg.value(metadata i32 undef, metadata !37, metadata !DIExpression()), !dbg !48
  %inc7 = add nsw i32 %inc716, 1, !dbg !59
  call void @llvm.dbg.value(metadata <1 x i64> undef, metadata !34, metadata !DIExpression()), !dbg !48
  %tobool.not = icmp eq i32 %inc7, 0, !dbg !49
  br i1 %tobool.not, label %for.cond.for.end8_crit_edge, label %for.body, !dbg !49, !llvm.loop !60

for.cond.for.end8_crit_edge:                      ; preds = %for.end
  %.lcssa.lcssa = phi <1 x double> [ %.lcssa, %for.end ]
  %4 = extractelement <1 x double> %.lcssa.lcssa, i32 0, !dbg !63
  %5 = bitcast double %4 to <2 x i32>, !dbg !63
  %6 = extractelement <2 x i32> %5, i64 0, !dbg !63
  call void @llvm.dbg.value(metadata i32 %6, metadata !37, metadata !DIExpression()), !dbg !48
  store i32 %6, i32* @d, align 4, !dbg !64, !tbaa !42
  store i32 0, i32* @c, align 4, !dbg !59, !tbaa !42
  br label %for.end8, !dbg !49

for.end8:                                         ; preds = %for.cond.for.end8_crit_edge, %entry
  ret i32 undef, !dbg !65
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn mustprogress
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

attributes #0 = { nofree norecurse nosync nounwind uwtable "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "frame-pointer"="none" "min-legal-vector-width"="64" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "pre_loopopt" "stack-protector-buffer-size"="8" "target-cpu"="corei7-avx" "target-features"="+avx,+cx16,+cx8,+fxsr,+mmx,+pclmul,+popcnt,+sahf,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt" "unsafe-fp-math"="true" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn mustprogress }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!25, !26, !27, !28}
!llvm.ident = !{!29}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "c", scope: !2, file: !3, line: 2, type: !15, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang based Intel(R) oneAPI DPC++/C++ Compiler 2021.2.0 (2021.x.0.YYYYMMDD)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !18, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "t.c", directory: "/localdisk2/pchawla/ics/tests/CMPLRLLVM-28793/reduced")
!4 = !{}
!5 = !{!6, !13}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = !DIDerivedType(tag: DW_TAG_typedef, name: "__m64", file: !8, line: 13, baseType: !9, align: 64)
!8 = !DIFile(filename: "xmain-web/deploy/linux_prod/lib/clang/13.0.0/include/mmintrin.h", directory: "/localdisk2/pchawla/ics")
!9 = !DICompositeType(tag: DW_TAG_array_type, baseType: !10, size: 64, flags: DIFlagVector, elements: !11)
!10 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!11 = !{!12}
!12 = !DISubrange(count: 1)
!13 = !DIDerivedType(tag: DW_TAG_typedef, name: "__v2si", file: !8, line: 16, baseType: !14)
!14 = !DICompositeType(tag: DW_TAG_array_type, baseType: !15, size: 64, flags: DIFlagVector, elements: !16)
!15 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!16 = !{!17}
!17 = !DISubrange(count: 2)
!18 = !{!19, !21, !0, !23}
!19 = !DIGlobalVariableExpression(var: !20, expr: !DIExpression())
!20 = distinct !DIGlobalVariable(name: "a", scope: !2, file: !3, line: 2, type: !15, isLocal: false, isDefinition: true)
!21 = !DIGlobalVariableExpression(var: !22, expr: !DIExpression())
!22 = distinct !DIGlobalVariable(name: "b", scope: !2, file: !3, line: 2, type: !15, isLocal: false, isDefinition: true)
!23 = !DIGlobalVariableExpression(var: !24, expr: !DIExpression())
!24 = distinct !DIGlobalVariable(name: "d", scope: !2, file: !3, line: 2, type: !15, isLocal: false, isDefinition: true)
!25 = !{i32 7, !"Dwarf Version", i32 4}
!26 = !{i32 2, !"Debug Info Version", i32 3}
!27 = !{i32 1, !"wchar_size", i32 4}
!28 = !{i32 7, !"uwtable", i32 1}
!29 = !{!"Intel(R) oneAPI DPC++/C++ Compiler 2021.2.0 (2021.x.0.YYYYMMDD)"}
!30 = distinct !DISubprogram(name: "e", scope: !3, file: !3, line: 3, type: !31, scopeLine: 3, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !33)
!31 = !DISubroutineType(types: !32)
!32 = !{!15}
!33 = !{!34, !35, !37}
!34 = !DILocalVariable(name: "f", scope: !30, file: !3, line: 4, type: !7)
!35 = !DILocalVariable(name: "g", scope: !30, file: !3, line: 5, type: !36)
!36 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!37 = !DILocalVariable(name: "i", scope: !30, file: !3, line: 6, type: !38)
!38 = !DICompositeType(tag: DW_TAG_array_type, baseType: !15, size: 32, elements: !11)
!39 = !DILocation(line: 7, column: 8, scope: !40)
!40 = distinct !DILexicalBlock(scope: !41, file: !3, line: 7, column: 1)
!41 = distinct !DILexicalBlock(scope: !30, file: !3, line: 7, column: 1)
!42 = !{!43, !43, i64 0}
!43 = !{!"int", !44, i64 0}
!44 = !{!"omnipotent char", !45, i64 0}
!45 = !{!"Simple C/C++ TBAA"}
!46 = !DILocation(line: 9, column: 7, scope: !47)
!47 = distinct !DILexicalBlock(scope: !40, file: !3, line: 9, column: 1)
!48 = !DILocation(line: 0, scope: !30)
!49 = !DILocation(line: 7, column: 1, scope: !41)
!50 = !DILocation(line: 9, column: 21, scope: !51)
!51 = distinct !DILexicalBlock(scope: !52, file: !3, line: 9, column: 14)
!52 = distinct !DILexicalBlock(scope: !47, file: !3, line: 9, column: 14)
!53 = !DILocation(line: 9, column: 14, scope: !52)
!54 = !DILocation(line: 9, column: 9, scope: !47)
!55 = !DILocation(line: 9, column: 34, scope: !51)
!56 = !DILocation(line: 9, column: 33, scope: !51)
!57 = !{!44, !44, i64 0}
!58 = !DILocation(line: 9, column: 25, scope: !51)
!59 = !DILocation(line: 7, column: 12, scope: !40)
!60 = distinct !{!60, !49, !61, !62}
!61 = !DILocation(line: 9, column: 77, scope: !41)
!62 = !{!"llvm.loop.mustprogress"}
!63 = !DILocation(line: 9, column: 53, scope: !47)
!64 = !DILocation(line: 9, column: 69, scope: !47)
!65 = !DILocation(line: 10, column: 1, scope: !30)
