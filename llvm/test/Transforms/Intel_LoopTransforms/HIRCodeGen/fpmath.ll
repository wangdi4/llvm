; Check that fast math flags are captured in the HIR Framework and generated by HIRCodeGen

; RUN: opt -hir-ssa-deconstruction -analyze -hir-framework -bugpoint-enable-legacy-pm -S -hir-details -hir-cg -force-hir-cg -print-after=hir-cg < %s 2>&1 | FileCheck %s
; RUN: opt -passes="hir-ssa-deconstruction,print<hir-framework>,hir-cg,print" -S -hir-details -force-hir-cg -disable-output < %s 2>&1 | FileCheck %s

; Verify HIR Framework parsing

; CHECK: BEGIN REGION
; CHECK: %add = %0  +  %x.041; <fast>
; CHECK: %mul = %add  *  %1; <fast>

; CHECK: %cond = (%mul > 0.000000e+00) ? -1.000000e+00 : 1.000000e+00; <fast>

; CHECK: %add4 = %cond  +  %mul; <nnan,nsz>

; CHECK: %cmp5 = %add4 > 0.000000e+00; <ninf>
; CHECK: %cmp6 = %add4 < 1.000000e+00; <fast>

; CHECK: %add7 = %add4  +  1.000000e+00; <fast>

; CHECK: if (%x.041 > 1.000000e+01 && %x.041 < 2.000000e+01) <fast> <fast>
; CHECK: END REGION

; Verify HIR Code Generation

; CHECK: define double @foo
; CHECK: region.0:
; CHECK: fadd fast double
; CHECK: fmul fast double

; CHECK: fcmp fast ogt double
; CHECK-SAME: 0.000000e+00

; CHECK: fadd nnan nsz double

; CHECK: fcmp ninf ogt double
; CHECK-SAME: 0.000000e+00
; CHECK: fcmp fast olt double
; CHECK-SAME: 1.000000e+00

; CHECK: fadd fast double
; CHECK-SAME: 1.000000e+00

; CHECK: fcmp fast ogt double
; CHECK-SAME: 1.000000e+01
; CHECK: fcmp fast olt double
; CHECK-SAME: 2.000000e+01

;Module Before HIR; ModuleID = 'fpmath.c'
source_filename = "fpmath.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: norecurse nounwind uwtable
define double @foo(double* nocapture %p, double* nocapture %q, i32 %n) local_unnamed_addr #0 {
entry:
  %cmp39 = icmp sgt i32 %n, 0
  br i1 %cmp39, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %if.end18
  %indvars.iv = phi i64 [ %indvars.iv.next, %if.end18 ], [ 0, %for.body.preheader ]
  %x.041 = phi double [ %add7.add4, %if.end18 ], [ 0.000000e+00, %for.body.preheader ]
  %arrayidx = getelementptr inbounds double, double* %p, i64 %indvars.iv
  %0 = load double, double* %arrayidx, align 8
  %add = fadd fast double %0, %x.041
  %arrayidx2 = getelementptr inbounds double, double* %q, i64 %indvars.iv
  %1 = load double, double* %arrayidx2, align 8
  %mul = fmul fast double %add, %1
  %cmp3 = fcmp fast ogt double %mul, 0.000000e+00
  %cond = select i1 %cmp3, double -1.000000e+00, double 1.000000e+00
  %add4 = fadd nnan nsz double %cond, %mul
  %cmp5 = fcmp ninf ogt double %add4, 0.000000e+00
  %cmp6 = fcmp fast olt double %add4, 1.000000e+00
  %or.cond = and i1 %cmp5, %cmp6
  %add7 = fadd fast double %add4, 1.000000e+00
  %add7.add4 = select i1 %or.cond, double %add7, double %add4
  %cmp8 = fcmp fast ogt double %add7.add4, 1.000000e+01
  %cmp10 = fcmp fast olt double %add7.add4, 2.000000e+01
  %or.cond19 = and i1 %cmp8, %cmp10
  br i1 %or.cond19, label %if.then11, label %if.end18

if.then11:                                        ; preds = %for.body
  store double 0.000000e+00, double* %arrayidx, align 8
  br label %if.end18

if.end18:                                         ; preds = %for.body, %if.then11
  %.sink = phi double [ 1.000000e+00, %if.then11 ], [ 0.000000e+00, %for.body ]
  store double %.sink, double* %arrayidx2, align 8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond, label %for.end.loopexit, label %for.body

for.end.loopexit:                                 ; preds = %if.end18
  %add7.add4.lcssa = phi double [ %add7.add4, %if.end18 ]
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  %x.0.lcssa = phi double [ 0.000000e+00, %entry ], [ %add7.add4.lcssa, %for.end.loopexit ]
  ret double %x.0.lcssa
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

attributes #0 = { norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "pre_loopopt" "stack-protector-buffer-size"="8" "target-cpu"="core-avx2" "target-features"="+aes,+avx,+avx2,+bmi,+bmi2,+cx16,+f16c,+fma,+fsgsbase,+fxsr,+lzcnt,+mmx,+movbe,+pclmul,+popcnt,+rdrnd,+rtm,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave,+xsaveopt" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }


