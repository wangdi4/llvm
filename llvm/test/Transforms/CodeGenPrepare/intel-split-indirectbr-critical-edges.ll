; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; REQUIRES: x86-registered-target
; RUN: opt -opaque-pointers=0 -codegenprepare -mtriple=x86_64-unknown-linux-gnu < %s -S | FileCheck %s

; Verify PHI nodes generated after a critical edge from an indirectbr
; block is split by SplitIndirectCriticalEdges during CodeGen preprocessing.
; It's hard to split such edges on MIR level if the indirectbr is
; generated as jump-table jump.

define i32 @f_indirectbr(i8* %a) {
; CHECK-LABEL: @f_indirectbr(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    indirectbr i8* [[A:%.*]], [label [[IBR_EPILOG:%.*]], label [[IBR_BB:%.*]], label %ibr.bb2]
; CHECK:       ibr.bb:
; CHECK-NEXT:    br label [[DOTSPLIT:%.*]]
; CHECK:       ibr.bb2:
; CHECK-NEXT:    br label [[DOTSPLIT]]
; CHECK:       ibr.epilog:
; CHECK-NEXT:    br label [[DOTSPLIT]]
; CHECK:       .split:
; CHECK-NEXT:    [[MERGE:%.*]] = phi i32 [ 2, [[IBR_EPILOG]] ], [ 0, [[IBR_BB]] ], [ 1, [[IBR_BB2:%.*]] ]
; CHECK-NEXT:    ret i32 [[MERGE]]
;
entry:
  indirectbr i8* %a, [ label %ibr.epilog, label %ibr.bb, label %ibr.bb2 ]

ibr.bb:
  br label %ibr.epilog

ibr.bb2:
  br label %ibr.epilog

ibr.epilog:
  %retval.0 = phi i32 [ 0, %ibr.bb ], [ 1, %ibr.bb2 ], [ 2, %entry ]
  ret i32 %retval.0
}
