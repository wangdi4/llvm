; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; REQUIRES: x86-registered-target
; RUN: opt -codegenprepare -mtriple=x86_64-unknown-linux-gnu < %s -S | FileCheck %s

; Test that a critical edge from a switch block is split
; by SplitIndirectCriticalEdges during CodeGen preprocessing.
; It's hard to split such edges on MIR level if the switch is
; generated as jump-table jump.

define i32 @f_switch(i32 %c) {
; CHECK-LABEL: @f_switch(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    switch i32 [[C:%.*]], label [[SW_EPILOG:%.*]] [
; CHECK-NEXT:    i32 0, label [[SW_BB:%.*]]
; CHECK-NEXT:    i32 1, label [[SW_BB2:%.*]]
; CHECK-NEXT:    i32 2, label [[SW_BB2]]
; CHECK-NEXT:    ]
; CHECK:       sw.bb:
; CHECK-NEXT:    br label [[DOTSPLIT:%.*]]
; CHECK:       sw.bb2:
; CHECK-NEXT:    br label [[DOTSPLIT]]
; CHECK:       .split:
; CHECK-NEXT:    [[MERGE:%.*]] = phi i32 [ 1, [[SW_BB2]] ], [ 0, [[SW_BB]] ]
; CHECK-NEXT:    br label [[DOTSPLIT1:%.*]]
; CHECK:       sw.epilog:
; CHECK-NEXT:    br label [[DOTSPLIT1]]
; CHECK:       .split1:
; CHECK-NEXT:    [[MERGE3:%.*]] = phi i32 [ 2, [[SW_EPILOG]] ], [ [[MERGE]], [[DOTSPLIT]] ]
; CHECK-NEXT:    ret i32 [[MERGE3]]
;
entry:
  switch i32 %c, label %sw.epilog [ ; critical edge
  i32 0, label %sw.bb
  i32 1, label %sw.bb2 ; critical edge
  i32 2, label %sw.bb2 ; critical edge
  ]

sw.bb:
  br label %sw.bb2

sw.bb2:
  %retval.0 = phi i32 [ 0, %sw.bb ], [ 1, %entry ], [ 1, %entry ]
  br label %sw.epilog

sw.epilog:
  %retval.1 = phi i32 [ %retval.0, %sw.bb2 ], [ 2, %entry ]
  ret i32 %retval.1
}
