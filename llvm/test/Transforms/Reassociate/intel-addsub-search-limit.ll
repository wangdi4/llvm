; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes="addsub-reassoc" < %s -addsub-reassoc-max-scoring-depth=1 -S | FileCheck %s

; Copy of Intel_addsub_16x16_nary.ll, check that the
; -addsub-reassoc-max-scoring-depth flag can restrict the optimization.

define dso_local i32 @x264_pixel_satd_16x16(i8* nocapture readonly %pix1, i32 %i_pix1, i8* nocapture readonly %pix2, i32 %i_pix2) {
; CHECK-LABEL: @x264_pixel_satd_16x16(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[IDX_EXT_I:%.*]] = sext i32 [[I_PIX1:%.*]] to i64
; CHECK-NEXT:    [[IDX_EXT63_I:%.*]] = sext i32 [[I_PIX2:%.*]] to i64
; CHECK-NEXT:    [[ALLOCA:%.*]] = alloca [16 x [8 x i32]], align 4
; CHECK-NEXT:    [[ALLOCA933:%.*]] = alloca [8 x i32], align 16
; CHECK-NEXT:    [[ALLOCA934:%.*]] = alloca [8 x i32], align 16
; CHECK-NEXT:    [[ALLOCA935:%.*]] = alloca [8 x i32], align 16
; CHECK-NEXT:    [[ALLOCA936:%.*]] = alloca [8 x i32], align 16
; CHECK-NEXT:    br label [[LOOP_1247:%.*]]
; CHECK:       loop.1247:
; CHECK-NEXT:    [[I1_I64_0:%.*]] = phi i64 [ 0, [[ENTRY:%.*]] ], [ [[NEXTIVLOOP_1247:%.*]], [[LOOP_1247]] ]
; CHECK-NEXT:    [[TMP0:%.*]] = mul i64 [[I1_I64_0]], [[IDX_EXT_I]]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, i8* [[PIX1:%.*]], i64 [[TMP0]]
; CHECK-NEXT:    [[GEPLOAD:%.*]] = load i8, i8* [[ARRAYIDX]], align 1, !tbaa [[TBAA0:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = mul i64 [[I1_I64_0]], [[IDX_EXT63_I]]
; CHECK-NEXT:    [[ARRAYIDX1013:%.*]] = getelementptr inbounds i8, i8* [[PIX2:%.*]], i64 [[TMP1]]
; CHECK-NEXT:    [[GEPLOAD1014:%.*]] = load i8, i8* [[ARRAYIDX1013]], align 1, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[TMP2:%.*]] = add i64 [[TMP0]], 4
; CHECK-NEXT:    [[ARRAYIDX1015:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP2]]
; CHECK-NEXT:    [[GEPLOAD1016:%.*]] = load i8, i8* [[ARRAYIDX1015]], align 1, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[TMP3:%.*]] = add i64 [[TMP1]], 4
; CHECK-NEXT:    [[ARRAYIDX1017:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP3]]
; CHECK-NEXT:    [[GEPLOAD1018:%.*]] = load i8, i8* [[ARRAYIDX1017]], align 1, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[TMP4:%.*]] = add i64 [[TMP0]], 1
; CHECK-NEXT:    [[ARRAYIDX1019:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP4]]
; CHECK-NEXT:    [[GEPLOAD1020:%.*]] = load i8, i8* [[ARRAYIDX1019]], align 1, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[TMP5:%.*]] = add i64 [[TMP1]], 1
; CHECK-NEXT:    [[ARRAYIDX1021:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP5]]
; CHECK-NEXT:    [[GEPLOAD1022:%.*]] = load i8, i8* [[ARRAYIDX1021]], align 1, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[TMP6:%.*]] = add i64 [[TMP0]], 5
; CHECK-NEXT:    [[ARRAYIDX1023:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP6]]
; CHECK-NEXT:    [[GEPLOAD1024:%.*]] = load i8, i8* [[ARRAYIDX1023]], align 1, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[TMP7:%.*]] = add i64 [[TMP1]], 5
; CHECK-NEXT:    [[ARRAYIDX1025:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP7]]
; CHECK-NEXT:    [[GEPLOAD1026:%.*]] = load i8, i8* [[ARRAYIDX1025]], align 1, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[TMP8:%.*]] = add i64 [[TMP0]], 2
; CHECK-NEXT:    [[ARRAYIDX1027:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP8]]
; CHECK-NEXT:    [[GEPLOAD1028:%.*]] = load i8, i8* [[ARRAYIDX1027]], align 1, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[TMP9:%.*]] = add i64 [[TMP1]], 2
; CHECK-NEXT:    [[ARRAYIDX1029:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP9]]
; CHECK-NEXT:    [[GEPLOAD1030:%.*]] = load i8, i8* [[ARRAYIDX1029]], align 1, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[TMP10:%.*]] = add i64 [[TMP0]], 6
; CHECK-NEXT:    [[ARRAYIDX1031:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP10]]
; CHECK-NEXT:    [[GEPLOAD1032:%.*]] = load i8, i8* [[ARRAYIDX1031]], align 1, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[TMP11:%.*]] = add i64 [[TMP1]], 6
; CHECK-NEXT:    [[ARRAYIDX1033:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP11]]
; CHECK-NEXT:    [[GEPLOAD1034:%.*]] = load i8, i8* [[ARRAYIDX1033]], align 1, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[TMP12:%.*]] = add i64 [[TMP0]], 3
; CHECK-NEXT:    [[ARRAYIDX1035:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP12]]
; CHECK-NEXT:    [[GEPLOAD1036:%.*]] = load i8, i8* [[ARRAYIDX1035]], align 1, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[TMP13:%.*]] = add i64 [[TMP1]], 3
; CHECK-NEXT:    [[ARRAYIDX1037:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP13]]
; CHECK-NEXT:    [[GEPLOAD1038:%.*]] = load i8, i8* [[ARRAYIDX1037]], align 1, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[TMP14:%.*]] = add i64 [[TMP0]], 7
; CHECK-NEXT:    [[ARRAYIDX1039:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP14]]
; CHECK-NEXT:    [[GEPLOAD1040:%.*]] = load i8, i8* [[ARRAYIDX1039]], align 1, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[TMP15:%.*]] = add i64 [[TMP1]], 7
; CHECK-NEXT:    [[ARRAYIDX1041:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP15]]
; CHECK-NEXT:    [[GEPLOAD1042:%.*]] = load i8, i8* [[ARRAYIDX1041]], align 1, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[ARRAYIDX1043:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I1_I64_0]], i64 0
; CHECK-NEXT:    [[TMP16:%.*]] = zext i8 [[GEPLOAD1036]] to i32
; CHECK-NEXT:    [[TMP17:%.*]] = zext i8 [[GEPLOAD1028]] to i32
; CHECK-NEXT:    [[TMP18:%.*]] = zext i8 [[GEPLOAD1020]] to i32
; CHECK-NEXT:    [[TMP19:%.*]] = zext i8 [[GEPLOAD]] to i32
; CHECK-NEXT:    [[TMP20:%.*]] = zext i8 [[GEPLOAD1042]] to i32
; CHECK-NEXT:    [[TMP21:%.*]] = zext i8 [[GEPLOAD1034]] to i32
; CHECK-NEXT:    [[TMP22:%.*]] = zext i8 [[GEPLOAD1026]] to i32
; CHECK-NEXT:    [[TMP23:%.*]] = zext i8 [[GEPLOAD1018]] to i32
; CHECK-NEXT:    [[TMP24:%.*]] = zext i8 [[GEPLOAD1038]] to i32
; CHECK-NEXT:    [[TMP25:%.*]] = zext i8 [[GEPLOAD1030]] to i32
; CHECK-NEXT:    [[TMP26:%.*]] = zext i8 [[GEPLOAD1022]] to i32
; CHECK-NEXT:    [[TMP27:%.*]] = zext i8 [[GEPLOAD1014]] to i32
; CHECK-NEXT:    [[TMP28:%.*]] = zext i8 [[GEPLOAD1040]] to i32
; CHECK-NEXT:    [[TMP29:%.*]] = zext i8 [[GEPLOAD1032]] to i32
; CHECK-NEXT:    [[TMP30:%.*]] = zext i8 [[GEPLOAD1024]] to i32
; CHECK-NEXT:    [[TMP31:%.*]] = zext i8 [[GEPLOAD1016]] to i32
; CHECK-NEXT:    [[CHAIN_7_39:%.*]] = shl i32 [[TMP20]], 16
; CHECK-NEXT:    [[CHAIN_7_42:%.*]] = shl i32 [[TMP28]], 16
; CHECK-NEXT:    [[CHAIN_7_41:%.*]] = sub i32 [[CHAIN_7_42]], [[TMP24]]
; CHECK-NEXT:    [[CHAIN_7_40:%.*]] = sub i32 [[CHAIN_7_41]], [[CHAIN_7_39]]
; CHECK-NEXT:    [[CHAIN_7_:%.*]] = add i32 [[CHAIN_7_40]], [[TMP16]]
; CHECK-NEXT:    [[CHAIN_8_44:%.*]] = shl i32 [[TMP29]], 16
; CHECK-NEXT:    [[CHAIN_8_47:%.*]] = shl i32 [[TMP21]], 16
; CHECK-NEXT:    [[CHAIN_8_46:%.*]] = sub i32 [[CHAIN_8_47]], [[TMP17]]
; CHECK-NEXT:    [[CHAIN_8_45:%.*]] = sub i32 [[CHAIN_8_46]], [[CHAIN_8_44]]
; CHECK-NEXT:    [[CHAIN_8_:%.*]] = add i32 [[CHAIN_8_45]], [[TMP25]]
; CHECK-NEXT:    [[CHAIN_10_49:%.*]] = shl i32 [[TMP30]], 16
; CHECK-NEXT:    [[CHAIN_10_52:%.*]] = shl i32 [[TMP22]], 16
; CHECK-NEXT:    [[CHAIN_10_51:%.*]] = sub i32 [[CHAIN_10_52]], [[TMP18]]
; CHECK-NEXT:    [[CHAIN_10_50:%.*]] = sub i32 [[CHAIN_10_51]], [[CHAIN_10_49]]
; CHECK-NEXT:    [[CHAIN_10_:%.*]] = add i32 [[CHAIN_10_50]], [[TMP26]]
; CHECK-NEXT:    [[CHAIN_12_54:%.*]] = shl i32 [[TMP23]], 16
; CHECK-NEXT:    [[CHAIN_12_57:%.*]] = shl i32 [[TMP31]], 16
; CHECK-NEXT:    [[CHAIN_12_56:%.*]] = sub i32 [[CHAIN_12_57]], [[TMP27]]
; CHECK-NEXT:    [[CHAIN_12_55:%.*]] = sub i32 [[CHAIN_12_56]], [[CHAIN_12_54]]
; CHECK-NEXT:    [[CHAIN_12_:%.*]] = add i32 [[CHAIN_12_55]], [[TMP19]]
; CHECK-NEXT:    [[TRUNK_24_69:%.*]] = sub i32 [[CHAIN_12_]], [[CHAIN_10_]]
; CHECK-NEXT:    [[TRUNK_24_68:%.*]] = sub i32 [[TRUNK_24_69]], [[CHAIN_8_]]
; CHECK-NEXT:    [[TRUNK_24_:%.*]] = add i32 [[TRUNK_24_68]], [[CHAIN_7_]]
; CHECK-NEXT:    store i32 [[TRUNK_24_]], i32* [[ARRAYIDX1043]], align 4
; CHECK-NEXT:    [[ARRAYIDX1045:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I1_I64_0]], i64 2
; CHECK-NEXT:    [[TRUNK_23_66:%.*]] = sub i32 [[CHAIN_12_]], [[CHAIN_10_]]
; CHECK-NEXT:    [[TRUNK_23_65:%.*]] = add i32 [[TRUNK_23_66]], [[CHAIN_8_]]
; CHECK-NEXT:    [[TRUNK_23_:%.*]] = sub i32 [[TRUNK_23_65]], [[CHAIN_7_]]
; CHECK-NEXT:    store i32 [[TRUNK_23_]], i32* [[ARRAYIDX1045]], align 4
; CHECK-NEXT:    [[ARRAYIDX1063:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I1_I64_0]], i64 1
; CHECK-NEXT:    [[TRUNK_22_63:%.*]] = add i32 [[CHAIN_12_]], [[CHAIN_10_]]
; CHECK-NEXT:    [[TRUNK_22_62:%.*]] = sub i32 [[TRUNK_22_63]], [[CHAIN_8_]]
; CHECK-NEXT:    [[TRUNK_22_:%.*]] = sub i32 [[TRUNK_22_62]], [[CHAIN_7_]]
; CHECK-NEXT:    store i32 [[TRUNK_22_]], i32* [[ARRAYIDX1063]], align 4
; CHECK-NEXT:    [[ARRAYIDX1081:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I1_I64_0]], i64 3
; CHECK-NEXT:    [[TRUNK_21_60:%.*]] = add i32 [[CHAIN_12_]], [[CHAIN_10_]]
; CHECK-NEXT:    [[TRUNK_21_59:%.*]] = add i32 [[TRUNK_21_60]], [[CHAIN_8_]]
; CHECK-NEXT:    [[TRUNK_21_:%.*]] = add i32 [[TRUNK_21_59]], [[CHAIN_7_]]
; CHECK-NEXT:    store i32 [[TRUNK_21_]], i32* [[ARRAYIDX1081]], align 4
; CHECK-NEXT:    [[TMP32:%.*]] = add i64 [[TMP0]], 8
; CHECK-NEXT:    [[ARRAYIDX1098:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP32]]
; CHECK-NEXT:    [[GEPLOAD1099:%.*]] = load i8, i8* [[ARRAYIDX1098]], align 1, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[TMP33:%.*]] = add i64 [[TMP1]], 8
; CHECK-NEXT:    [[ARRAYIDX1100:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP33]]
; CHECK-NEXT:    [[GEPLOAD1101:%.*]] = load i8, i8* [[ARRAYIDX1100]], align 1, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[TMP34:%.*]] = add i64 [[TMP0]], 12
; CHECK-NEXT:    [[ARRAYIDX1102:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP34]]
; CHECK-NEXT:    [[GEPLOAD1103:%.*]] = load i8, i8* [[ARRAYIDX1102]], align 1, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[TMP35:%.*]] = add i64 [[TMP1]], 12
; CHECK-NEXT:    [[ARRAYIDX1104:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP35]]
; CHECK-NEXT:    [[GEPLOAD1105:%.*]] = load i8, i8* [[ARRAYIDX1104]], align 1, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[TMP36:%.*]] = add i64 [[TMP0]], 9
; CHECK-NEXT:    [[ARRAYIDX1106:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP36]]
; CHECK-NEXT:    [[GEPLOAD1107:%.*]] = load i8, i8* [[ARRAYIDX1106]], align 1, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[TMP37:%.*]] = add i64 [[TMP1]], 9
; CHECK-NEXT:    [[ARRAYIDX1108:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP37]]
; CHECK-NEXT:    [[GEPLOAD1109:%.*]] = load i8, i8* [[ARRAYIDX1108]], align 1, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[TMP38:%.*]] = add i64 [[TMP0]], 13
; CHECK-NEXT:    [[ARRAYIDX1110:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP38]]
; CHECK-NEXT:    [[GEPLOAD1111:%.*]] = load i8, i8* [[ARRAYIDX1110]], align 1, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[TMP39:%.*]] = add i64 [[TMP1]], 13
; CHECK-NEXT:    [[ARRAYIDX1112:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP39]]
; CHECK-NEXT:    [[GEPLOAD1113:%.*]] = load i8, i8* [[ARRAYIDX1112]], align 1, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[TMP40:%.*]] = add i64 [[TMP0]], 10
; CHECK-NEXT:    [[ARRAYIDX1114:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP40]]
; CHECK-NEXT:    [[GEPLOAD1115:%.*]] = load i8, i8* [[ARRAYIDX1114]], align 1, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[TMP41:%.*]] = add i64 [[TMP1]], 10
; CHECK-NEXT:    [[ARRAYIDX1116:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP41]]
; CHECK-NEXT:    [[GEPLOAD1117:%.*]] = load i8, i8* [[ARRAYIDX1116]], align 1, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[TMP42:%.*]] = add i64 [[TMP0]], 14
; CHECK-NEXT:    [[ARRAYIDX1118:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP42]]
; CHECK-NEXT:    [[GEPLOAD1119:%.*]] = load i8, i8* [[ARRAYIDX1118]], align 1, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[TMP43:%.*]] = add i64 [[TMP1]], 14
; CHECK-NEXT:    [[ARRAYIDX1120:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP43]]
; CHECK-NEXT:    [[GEPLOAD1121:%.*]] = load i8, i8* [[ARRAYIDX1120]], align 1, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[TMP44:%.*]] = add i64 [[TMP0]], 11
; CHECK-NEXT:    [[ARRAYIDX1122:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP44]]
; CHECK-NEXT:    [[GEPLOAD1123:%.*]] = load i8, i8* [[ARRAYIDX1122]], align 1, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[TMP45:%.*]] = add i64 [[TMP1]], 11
; CHECK-NEXT:    [[ARRAYIDX1124:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP45]]
; CHECK-NEXT:    [[GEPLOAD1125:%.*]] = load i8, i8* [[ARRAYIDX1124]], align 1, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[TMP46:%.*]] = add i64 [[TMP0]], 15
; CHECK-NEXT:    [[ARRAYIDX1126:%.*]] = getelementptr inbounds i8, i8* [[PIX1]], i64 [[TMP46]]
; CHECK-NEXT:    [[GEPLOAD1127:%.*]] = load i8, i8* [[ARRAYIDX1126]], align 1, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[TMP47:%.*]] = add i64 [[TMP1]], 15
; CHECK-NEXT:    [[ARRAYIDX1128:%.*]] = getelementptr inbounds i8, i8* [[PIX2]], i64 [[TMP47]]
; CHECK-NEXT:    [[GEPLOAD1129:%.*]] = load i8, i8* [[ARRAYIDX1128]], align 1, !tbaa [[TBAA0]]
; CHECK-NEXT:    [[ARRAYIDX1131:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I1_I64_0]], i64 4
; CHECK-NEXT:    [[TMP48:%.*]] = zext i8 [[GEPLOAD1123]] to i32
; CHECK-NEXT:    [[TMP49:%.*]] = zext i8 [[GEPLOAD1115]] to i32
; CHECK-NEXT:    [[TMP50:%.*]] = zext i8 [[GEPLOAD1107]] to i32
; CHECK-NEXT:    [[TMP51:%.*]] = zext i8 [[GEPLOAD1099]] to i32
; CHECK-NEXT:    [[TMP52:%.*]] = zext i8 [[GEPLOAD1129]] to i32
; CHECK-NEXT:    [[TMP53:%.*]] = zext i8 [[GEPLOAD1121]] to i32
; CHECK-NEXT:    [[TMP54:%.*]] = zext i8 [[GEPLOAD1113]] to i32
; CHECK-NEXT:    [[TMP55:%.*]] = zext i8 [[GEPLOAD1105]] to i32
; CHECK-NEXT:    [[TMP56:%.*]] = zext i8 [[GEPLOAD1125]] to i32
; CHECK-NEXT:    [[TMP57:%.*]] = zext i8 [[GEPLOAD1117]] to i32
; CHECK-NEXT:    [[TMP58:%.*]] = zext i8 [[GEPLOAD1109]] to i32
; CHECK-NEXT:    [[TMP59:%.*]] = zext i8 [[GEPLOAD1101]] to i32
; CHECK-NEXT:    [[TMP60:%.*]] = zext i8 [[GEPLOAD1127]] to i32
; CHECK-NEXT:    [[TMP61:%.*]] = zext i8 [[GEPLOAD1119]] to i32
; CHECK-NEXT:    [[TMP62:%.*]] = zext i8 [[GEPLOAD1111]] to i32
; CHECK-NEXT:    [[TMP63:%.*]] = zext i8 [[GEPLOAD1103]] to i32
; CHECK-NEXT:    [[CHAIN_0_4:%.*]] = shl i32 [[TMP52]], 16
; CHECK-NEXT:    [[CHAIN_0_7:%.*]] = shl i32 [[TMP60]], 16
; CHECK-NEXT:    [[CHAIN_0_6:%.*]] = sub i32 [[CHAIN_0_7]], [[TMP56]]
; CHECK-NEXT:    [[CHAIN_0_5:%.*]] = sub i32 [[CHAIN_0_6]], [[CHAIN_0_4]]
; CHECK-NEXT:    [[CHAIN_0_:%.*]] = add i32 [[CHAIN_0_5]], [[TMP48]]
; CHECK-NEXT:    [[CHAIN_1_9:%.*]] = shl i32 [[TMP61]], 16
; CHECK-NEXT:    [[CHAIN_1_12:%.*]] = shl i32 [[TMP53]], 16
; CHECK-NEXT:    [[CHAIN_1_11:%.*]] = sub i32 [[CHAIN_1_12]], [[TMP49]]
; CHECK-NEXT:    [[CHAIN_1_10:%.*]] = sub i32 [[CHAIN_1_11]], [[CHAIN_1_9]]
; CHECK-NEXT:    [[CHAIN_1_:%.*]] = add i32 [[CHAIN_1_10]], [[TMP57]]
; CHECK-NEXT:    [[CHAIN_3_14:%.*]] = shl i32 [[TMP62]], 16
; CHECK-NEXT:    [[CHAIN_3_17:%.*]] = shl i32 [[TMP54]], 16
; CHECK-NEXT:    [[CHAIN_3_16:%.*]] = sub i32 [[CHAIN_3_17]], [[TMP50]]
; CHECK-NEXT:    [[CHAIN_3_15:%.*]] = sub i32 [[CHAIN_3_16]], [[CHAIN_3_14]]
; CHECK-NEXT:    [[CHAIN_3_:%.*]] = add i32 [[CHAIN_3_15]], [[TMP58]]
; CHECK-NEXT:    [[CHAIN_5_19:%.*]] = shl i32 [[TMP55]], 16
; CHECK-NEXT:    [[CHAIN_5_22:%.*]] = shl i32 [[TMP63]], 16
; CHECK-NEXT:    [[CHAIN_5_21:%.*]] = sub i32 [[CHAIN_5_22]], [[TMP59]]
; CHECK-NEXT:    [[CHAIN_5_20:%.*]] = sub i32 [[CHAIN_5_21]], [[CHAIN_5_19]]
; CHECK-NEXT:    [[CHAIN_5_:%.*]] = add i32 [[CHAIN_5_20]], [[TMP51]]
; CHECK-NEXT:    [[TRUNK_4_34:%.*]] = sub i32 [[CHAIN_5_]], [[CHAIN_3_]]
; CHECK-NEXT:    [[TRUNK_4_33:%.*]] = sub i32 [[TRUNK_4_34]], [[CHAIN_1_]]
; CHECK-NEXT:    [[TRUNK_4_:%.*]] = add i32 [[TRUNK_4_33]], [[CHAIN_0_]]
; CHECK-NEXT:    store i32 [[TRUNK_4_]], i32* [[ARRAYIDX1131]], align 4
; CHECK-NEXT:    [[ARRAYIDX1133:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I1_I64_0]], i64 6
; CHECK-NEXT:    [[TRUNK_3_31:%.*]] = sub i32 [[CHAIN_5_]], [[CHAIN_3_]]
; CHECK-NEXT:    [[TRUNK_3_30:%.*]] = add i32 [[TRUNK_3_31]], [[CHAIN_1_]]
; CHECK-NEXT:    [[TRUNK_3_:%.*]] = sub i32 [[TRUNK_3_30]], [[CHAIN_0_]]
; CHECK-NEXT:    store i32 [[TRUNK_3_]], i32* [[ARRAYIDX1133]], align 4
; CHECK-NEXT:    [[ARRAYIDX1151:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I1_I64_0]], i64 5
; CHECK-NEXT:    [[TRUNK_2_28:%.*]] = add i32 [[CHAIN_5_]], [[CHAIN_3_]]
; CHECK-NEXT:    [[TRUNK_2_27:%.*]] = sub i32 [[TRUNK_2_28]], [[CHAIN_1_]]
; CHECK-NEXT:    [[TRUNK_2_:%.*]] = sub i32 [[TRUNK_2_27]], [[CHAIN_0_]]
; CHECK-NEXT:    store i32 [[TRUNK_2_]], i32* [[ARRAYIDX1151]], align 4
; CHECK-NEXT:    [[ARRAYIDX1169:%.*]] = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* [[ALLOCA]], i64 0, i64 [[I1_I64_0]], i64 7
; CHECK-NEXT:    [[TRUNK_1_25:%.*]] = add i32 [[CHAIN_5_]], [[CHAIN_3_]]
; CHECK-NEXT:    [[TRUNK_1_24:%.*]] = add i32 [[TRUNK_1_25]], [[CHAIN_1_]]
; CHECK-NEXT:    [[TRUNK_1_:%.*]] = add i32 [[TRUNK_1_24]], [[CHAIN_0_]]
; CHECK-NEXT:    store i32 [[TRUNK_1_]], i32* [[ARRAYIDX1169]], align 4
; CHECK-NEXT:    [[NEXTIVLOOP_1247]] = add nuw nsw i64 [[I1_I64_0]], 1
; CHECK-NEXT:    [[CONDLOOP_1247:%.*]] = icmp ult i64 [[NEXTIVLOOP_1247]], 16
; CHECK-NEXT:    br i1 [[CONDLOOP_1247]], label [[LOOP_1247]], label [[AFTERLOOP_1247:%.*]]
; CHECK:       afterloop.1247:
; CHECK-NEXT:    ret i32 0
;
entry:
  %idx.ext.i = sext i32 %i_pix1 to i64
  %idx.ext63.i = sext i32 %i_pix2 to i64
  %alloca = alloca [16 x [8 x i32]], align 4
  %alloca933 = alloca [8 x i32], align 16
  %alloca934 = alloca [8 x i32], align 16
  %alloca935 = alloca [8 x i32], align 16
  %alloca936 = alloca [8 x i32], align 16
  br label %loop.1247

loop.1247:                                        ; preds = %loop.1247, %entry
  %i1.i64.0 = phi i64 [ 0, %entry ], [ %nextivloop.1247, %loop.1247 ]
  %0 = mul i64 %i1.i64.0, %idx.ext.i
  %arrayIdx = getelementptr inbounds i8, i8* %pix1, i64 %0
  %gepload = load i8, i8* %arrayIdx, align 1, !tbaa !0
  %1 = mul i64 %i1.i64.0, %idx.ext63.i
  %arrayIdx1013 = getelementptr inbounds i8, i8* %pix2, i64 %1
  %gepload1014 = load i8, i8* %arrayIdx1013, align 1, !tbaa !0
  %2 = add i64 %0, 4
  %arrayIdx1015 = getelementptr inbounds i8, i8* %pix1, i64 %2
  %gepload1016 = load i8, i8* %arrayIdx1015, align 1, !tbaa !0
  %3 = add i64 %1, 4
  %arrayIdx1017 = getelementptr inbounds i8, i8* %pix2, i64 %3
  %gepload1018 = load i8, i8* %arrayIdx1017, align 1, !tbaa !0
  %4 = add i64 %0, 1
  %arrayIdx1019 = getelementptr inbounds i8, i8* %pix1, i64 %4
  %gepload1020 = load i8, i8* %arrayIdx1019, align 1, !tbaa !0
  %5 = add i64 %1, 1
  %arrayIdx1021 = getelementptr inbounds i8, i8* %pix2, i64 %5
  %gepload1022 = load i8, i8* %arrayIdx1021, align 1, !tbaa !0
  %6 = add i64 %0, 5
  %arrayIdx1023 = getelementptr inbounds i8, i8* %pix1, i64 %6
  %gepload1024 = load i8, i8* %arrayIdx1023, align 1, !tbaa !0
  %7 = add i64 %1, 5
  %arrayIdx1025 = getelementptr inbounds i8, i8* %pix2, i64 %7
  %gepload1026 = load i8, i8* %arrayIdx1025, align 1, !tbaa !0
  %8 = add i64 %0, 2
  %arrayIdx1027 = getelementptr inbounds i8, i8* %pix1, i64 %8
  %gepload1028 = load i8, i8* %arrayIdx1027, align 1, !tbaa !0
  %9 = add i64 %1, 2
  %arrayIdx1029 = getelementptr inbounds i8, i8* %pix2, i64 %9
  %gepload1030 = load i8, i8* %arrayIdx1029, align 1, !tbaa !0
  %10 = add i64 %0, 6
  %arrayIdx1031 = getelementptr inbounds i8, i8* %pix1, i64 %10
  %gepload1032 = load i8, i8* %arrayIdx1031, align 1, !tbaa !0
  %11 = add i64 %1, 6
  %arrayIdx1033 = getelementptr inbounds i8, i8* %pix2, i64 %11
  %gepload1034 = load i8, i8* %arrayIdx1033, align 1, !tbaa !0
  %12 = add i64 %0, 3
  %arrayIdx1035 = getelementptr inbounds i8, i8* %pix1, i64 %12
  %gepload1036 = load i8, i8* %arrayIdx1035, align 1, !tbaa !0
  %13 = add i64 %1, 3
  %arrayIdx1037 = getelementptr inbounds i8, i8* %pix2, i64 %13
  %gepload1038 = load i8, i8* %arrayIdx1037, align 1, !tbaa !0
  %14 = add i64 %0, 7
  %arrayIdx1039 = getelementptr inbounds i8, i8* %pix1, i64 %14
  %gepload1040 = load i8, i8* %arrayIdx1039, align 1, !tbaa !0
  %15 = add i64 %1, 7
  %arrayIdx1041 = getelementptr inbounds i8, i8* %pix2, i64 %15
  %gepload1042 = load i8, i8* %arrayIdx1041, align 1, !tbaa !0
  %arrayIdx1043 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1.i64.0, i64 0
  %16 = zext i8 %gepload1036 to i32
  %17 = zext i8 %gepload1028 to i32
  %18 = add nuw nsw i32 %16, %17
  %19 = zext i8 %gepload1020 to i32
  %20 = add nuw nsw i32 %18, %19
  %21 = zext i8 %gepload to i32
  %22 = add nuw nsw i32 %20, %21
  %23 = zext i8 %gepload1042 to i32
  %24 = shl nuw nsw i32 %23, 16
  %25 = sub nsw i32 %22, %24
  %26 = zext i8 %gepload1034 to i32
  %27 = shl nuw nsw i32 %26, 16
  %28 = sub nsw i32 %25, %27
  %29 = zext i8 %gepload1026 to i32
  %30 = shl nuw nsw i32 %29, 16
  %31 = sub nsw i32 %28, %30
  %32 = zext i8 %gepload1018 to i32
  %33 = shl nuw nsw i32 %32, 16
  %34 = sub i32 %31, %33
  %35 = zext i8 %gepload1038 to i32
  %36 = sub i32 %34, %35
  %37 = zext i8 %gepload1030 to i32
  %38 = sub i32 %36, %37
  %39 = zext i8 %gepload1022 to i32
  %40 = sub i32 %38, %39
  %41 = zext i8 %gepload1014 to i32
  %42 = sub i32 %40, %41
  %43 = zext i8 %gepload1040 to i32
  %44 = shl nuw nsw i32 %43, 16
  %45 = add i32 %42, %44
  %46 = zext i8 %gepload1032 to i32
  %47 = shl nuw nsw i32 %46, 16
  %48 = add i32 %45, %47
  %49 = zext i8 %gepload1024 to i32
  %50 = shl nuw nsw i32 %49, 16
  %51 = add i32 %48, %50
  %52 = zext i8 %gepload1016 to i32
  %53 = shl nuw nsw i32 %52, 16
  %54 = add i32 %51, %53
  store i32 %54, i32* %arrayIdx1043, align 4
  %arrayIdx1045 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1.i64.0, i64 2
  %55 = add nuw nsw i32 %16, %17
  %56 = sub nsw i32 %19, %55
  %57 = add nsw i32 %56, %21
  %58 = add nsw i32 %57, %24
  %59 = add nsw i32 %58, %27
  %60 = sub nsw i32 %59, %30
  %61 = sub i32 %60, %33
  %62 = add i32 %61, %35
  %63 = add i32 %62, %37
  %64 = sub i32 %63, %39
  %65 = sub i32 %64, %41
  %66 = sub i32 %65, %44
  %67 = sub i32 %66, %47
  %68 = add i32 %67, %50
  %69 = add i32 %68, %53
  store i32 %69, i32* %arrayIdx1045, align 4
  %arrayIdx1063 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1.i64.0, i64 1
  %70 = sub nsw i32 %17, %16
  %71 = sub nsw i32 %70, %19
  %72 = add nsw i32 %71, %21
  %73 = add nsw i32 %72, %24
  %74 = sub nsw i32 %73, %27
  %75 = add nsw i32 %74, %30
  %76 = sub i32 %75, %33
  %77 = add i32 %76, %35
  %78 = sub i32 %77, %37
  %79 = add i32 %78, %39
  %80 = sub i32 %79, %41
  %81 = sub i32 %80, %44
  %82 = add i32 %81, %47
  %83 = sub i32 %82, %50
  %84 = add i32 %83, %53
  store i32 %84, i32* %arrayIdx1063, align 4
  %arrayIdx1081 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1.i64.0, i64 3
  %85 = sub nsw i32 %16, %17
  %86 = sub nsw i32 %85, %19
  %87 = add nsw i32 %86, %21
  %88 = sub nsw i32 %87, %24
  %89 = add nsw i32 %88, %27
  %90 = add nsw i32 %89, %30
  %91 = sub i32 %90, %33
  %92 = sub i32 %91, %35
  %93 = add i32 %92, %37
  %94 = add i32 %93, %39
  %95 = sub i32 %94, %41
  %96 = add i32 %95, %44
  %97 = sub i32 %96, %47
  %98 = sub i32 %97, %50
  %99 = add i32 %98, %53
  store i32 %99, i32* %arrayIdx1081, align 4
  %100 = add i64 %0, 8
  %arrayIdx1098 = getelementptr inbounds i8, i8* %pix1, i64 %100
  %gepload1099 = load i8, i8* %arrayIdx1098, align 1, !tbaa !0
  %101 = add i64 %1, 8
  %arrayIdx1100 = getelementptr inbounds i8, i8* %pix2, i64 %101
  %gepload1101 = load i8, i8* %arrayIdx1100, align 1, !tbaa !0
  %102 = add i64 %0, 12
  %arrayIdx1102 = getelementptr inbounds i8, i8* %pix1, i64 %102
  %gepload1103 = load i8, i8* %arrayIdx1102, align 1, !tbaa !0
  %103 = add i64 %1, 12
  %arrayIdx1104 = getelementptr inbounds i8, i8* %pix2, i64 %103
  %gepload1105 = load i8, i8* %arrayIdx1104, align 1, !tbaa !0
  %104 = add i64 %0, 9
  %arrayIdx1106 = getelementptr inbounds i8, i8* %pix1, i64 %104
  %gepload1107 = load i8, i8* %arrayIdx1106, align 1, !tbaa !0
  %105 = add i64 %1, 9
  %arrayIdx1108 = getelementptr inbounds i8, i8* %pix2, i64 %105
  %gepload1109 = load i8, i8* %arrayIdx1108, align 1, !tbaa !0
  %106 = add i64 %0, 13
  %arrayIdx1110 = getelementptr inbounds i8, i8* %pix1, i64 %106
  %gepload1111 = load i8, i8* %arrayIdx1110, align 1, !tbaa !0
  %107 = add i64 %1, 13
  %arrayIdx1112 = getelementptr inbounds i8, i8* %pix2, i64 %107
  %gepload1113 = load i8, i8* %arrayIdx1112, align 1, !tbaa !0
  %108 = add i64 %0, 10
  %arrayIdx1114 = getelementptr inbounds i8, i8* %pix1, i64 %108
  %gepload1115 = load i8, i8* %arrayIdx1114, align 1, !tbaa !0
  %109 = add i64 %1, 10
  %arrayIdx1116 = getelementptr inbounds i8, i8* %pix2, i64 %109
  %gepload1117 = load i8, i8* %arrayIdx1116, align 1, !tbaa !0
  %110 = add i64 %0, 14
  %arrayIdx1118 = getelementptr inbounds i8, i8* %pix1, i64 %110
  %gepload1119 = load i8, i8* %arrayIdx1118, align 1, !tbaa !0
  %111 = add i64 %1, 14
  %arrayIdx1120 = getelementptr inbounds i8, i8* %pix2, i64 %111
  %gepload1121 = load i8, i8* %arrayIdx1120, align 1, !tbaa !0
  %112 = add i64 %0, 11
  %arrayIdx1122 = getelementptr inbounds i8, i8* %pix1, i64 %112
  %gepload1123 = load i8, i8* %arrayIdx1122, align 1, !tbaa !0
  %113 = add i64 %1, 11
  %arrayIdx1124 = getelementptr inbounds i8, i8* %pix2, i64 %113
  %gepload1125 = load i8, i8* %arrayIdx1124, align 1, !tbaa !0
  %114 = add i64 %0, 15
  %arrayIdx1126 = getelementptr inbounds i8, i8* %pix1, i64 %114
  %gepload1127 = load i8, i8* %arrayIdx1126, align 1, !tbaa !0
  %115 = add i64 %1, 15
  %arrayIdx1128 = getelementptr inbounds i8, i8* %pix2, i64 %115
  %gepload1129 = load i8, i8* %arrayIdx1128, align 1, !tbaa !0
  %arrayIdx1131 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1.i64.0, i64 4
  %116 = zext i8 %gepload1123 to i32
  %117 = zext i8 %gepload1115 to i32
  %118 = add nuw nsw i32 %116, %117
  %119 = zext i8 %gepload1107 to i32
  %120 = add nuw nsw i32 %118, %119
  %121 = zext i8 %gepload1099 to i32
  %122 = add nuw nsw i32 %120, %121
  %123 = zext i8 %gepload1129 to i32
  %124 = shl nuw nsw i32 %123, 16
  %125 = sub nsw i32 %122, %124
  %126 = zext i8 %gepload1121 to i32
  %127 = shl nuw nsw i32 %126, 16
  %128 = sub nsw i32 %125, %127
  %129 = zext i8 %gepload1113 to i32
  %130 = shl nuw nsw i32 %129, 16
  %131 = sub nsw i32 %128, %130
  %132 = zext i8 %gepload1105 to i32
  %133 = shl nuw nsw i32 %132, 16
  %134 = sub i32 %131, %133
  %135 = zext i8 %gepload1125 to i32
  %136 = sub i32 %134, %135
  %137 = zext i8 %gepload1117 to i32
  %138 = sub i32 %136, %137
  %139 = zext i8 %gepload1109 to i32
  %140 = sub i32 %138, %139
  %141 = zext i8 %gepload1101 to i32
  %142 = sub i32 %140, %141
  %143 = zext i8 %gepload1127 to i32
  %144 = shl nuw nsw i32 %143, 16
  %145 = add i32 %142, %144
  %146 = zext i8 %gepload1119 to i32
  %147 = shl nuw nsw i32 %146, 16
  %148 = add i32 %145, %147
  %149 = zext i8 %gepload1111 to i32
  %150 = shl nuw nsw i32 %149, 16
  %151 = add i32 %148, %150
  %152 = zext i8 %gepload1103 to i32
  %153 = shl nuw nsw i32 %152, 16
  %154 = add i32 %151, %153
  store i32 %154, i32* %arrayIdx1131, align 4
  %arrayIdx1133 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1.i64.0, i64 6
  %155 = add nuw nsw i32 %116, %117
  %156 = sub nsw i32 %119, %155
  %157 = add nsw i32 %156, %121
  %158 = add nsw i32 %157, %124
  %159 = add nsw i32 %158, %127
  %160 = sub nsw i32 %159, %130
  %161 = sub i32 %160, %133
  %162 = add i32 %161, %135
  %163 = add i32 %162, %137
  %164 = sub i32 %163, %139
  %165 = sub i32 %164, %141
  %166 = sub i32 %165, %144
  %167 = sub i32 %166, %147
  %168 = add i32 %167, %150
  %169 = add i32 %168, %153
  store i32 %169, i32* %arrayIdx1133, align 4
  %arrayIdx1151 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1.i64.0, i64 5
  %170 = sub nsw i32 %117, %116
  %171 = sub nsw i32 %170, %119
  %172 = add nsw i32 %171, %121
  %173 = add nsw i32 %172, %124
  %174 = sub nsw i32 %173, %127
  %175 = add nsw i32 %174, %130
  %176 = sub i32 %175, %133
  %177 = add i32 %176, %135
  %178 = sub i32 %177, %137
  %179 = add i32 %178, %139
  %180 = sub i32 %179, %141
  %181 = sub i32 %180, %144
  %182 = add i32 %181, %147
  %183 = sub i32 %182, %150
  %184 = add i32 %183, %153
  store i32 %184, i32* %arrayIdx1151, align 4
  %arrayIdx1169 = getelementptr inbounds [16 x [8 x i32]], [16 x [8 x i32]]* %alloca, i64 0, i64 %i1.i64.0, i64 7
  %185 = sub nsw i32 %116, %117
  %186 = sub nsw i32 %185, %119
  %187 = add nsw i32 %186, %121
  %188 = sub nsw i32 %187, %124
  %189 = add nsw i32 %188, %127
  %190 = add nsw i32 %189, %130
  %191 = sub i32 %190, %133
  %192 = sub i32 %191, %135
  %193 = add i32 %192, %137
  %194 = add i32 %193, %139
  %195 = sub i32 %194, %141
  %196 = add i32 %195, %144
  %197 = sub i32 %196, %147
  %198 = sub i32 %197, %150
  %199 = add i32 %198, %153
  store i32 %199, i32* %arrayIdx1169, align 4
  %nextivloop.1247 = add nuw nsw i64 %i1.i64.0, 1
  %condloop.1247 = icmp ult i64 %nextivloop.1247, 16
  br i1 %condloop.1247, label %loop.1247, label %afterloop.1247

afterloop.1247:                                   ; preds = %loop.1247
  ret i32 0
}

!0 = !{!1, !1, i64 0}
!1 = !{!"omnipotent char", !2, i64 0}
!2 = !{!"Simple C/C++ TBAA"}
