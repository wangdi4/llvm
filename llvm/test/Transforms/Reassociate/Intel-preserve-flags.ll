; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes="reassociate" < %s -S | FileCheck %s

;; Ensure that we don't reassociate operands between the add operators such
;; that we must drop valuable "nsw" flags. Note that swapping %i.0 and %m is
;; allowed because Reassociate can preserve the flags in that case.

define void @loop2(ptr nocapture %a, ptr nocapture readonly %b, ptr nocapture readonly %c, i32 %m) {
; CHECK-LABEL: @loop2(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label [[FOR_COND:%.*]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[I_0:%.*]] = phi i32 [ 0, [[ENTRY:%.*]] ], [ [[INC:%.*]], [[FOR_BODY:%.*]] ]
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[I_0]], [[M:%.*]]
; CHECK-NEXT:    br i1 [[CMP]], label [[FOR_BODY]], label [[FOR_END:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    [[ADD:%.*]] = add nsw i32 [[M]], [[I_0]]
; CHECK-NEXT:    [[SUB:%.*]] = add nsw i32 [[ADD]], -1
; CHECK-NEXT:    [[IDXPROM:%.*]] = sext i32 [[SUB]] to i64
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, ptr [[B:%.*]], i64 [[IDXPROM]]
; CHECK-NEXT:    [[TMP0:%.*]] = load float, ptr [[ARRAYIDX]], align 4
; CHECK-NEXT:    [[IDXPROM1:%.*]] = zext i32 [[I_0]] to i64
; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds float, ptr [[C:%.*]], i64 [[IDXPROM1]]
; CHECK-NEXT:    [[TMP1:%.*]] = load float, ptr [[ARRAYIDX2]], align 4
; CHECK-NEXT:    [[ADD3:%.*]] = fadd fast float [[TMP1]], [[TMP0]]
; CHECK-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds float, ptr [[A:%.*]], i64 [[IDXPROM1]]
; CHECK-NEXT:    store float [[ADD3]], ptr [[ARRAYIDX5]], align 4
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_0]], 1
; CHECK-NEXT:    br label [[FOR_COND]]
; CHECK:       for.end:
; CHECK-NEXT:    ret void
;
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.body, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %cmp = icmp slt i32 %i.0, %m
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %add = add nsw i32 %i.0, %m
  %sub = add nsw i32 %add, -1
  %idxprom = sext i32 %sub to i64
  %arrayidx = getelementptr inbounds float, ptr %b, i64 %idxprom
  %0 = load float, ptr %arrayidx
  %idxprom1 = zext i32 %i.0 to i64
  %arrayidx2 = getelementptr inbounds float, ptr %c, i64 %idxprom1
  %1 = load float, ptr %arrayidx2
  %add3 = fadd fast float %0, %1
  %arrayidx5 = getelementptr inbounds float, ptr %a, i64 %idxprom1
  store float %add3, ptr %arrayidx5
  %inc = add nuw nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

