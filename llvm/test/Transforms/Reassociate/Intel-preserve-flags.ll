; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -reassociate -S | FileCheck %s

;; Ensure that we don't reassociate operands between the add operators such
;; that we must drop valuable "nsw" flags. Note that swapping %i.0 and %m is
;; allowed because Reassociate can preserve the flags in that case.
; CHECK:       for.body:
; CHECK-NEXT:    [[ADD:%.*]] = add nsw i32
; CHECK-NEXT:    [[SUB:%.*]] = add nsw i32 [[ADD]], -1
; CHECK-NEXT:    [[IDXPROM:%.*]] = sext i32 [[SUB]] to i64
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, float* %b, i64 [[IDXPROM]]

define void @loop2(float* nocapture %a, float* nocapture readonly %b, float* nocapture readonly %c, i32 %m) {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.body, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %cmp = icmp slt i32 %i.0, %m
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %add = add nsw i32 %i.0, %m
  %sub = add nsw i32 %add, -1
  %idxprom = sext i32 %sub to i64
  %arrayidx = getelementptr inbounds float, float* %b, i64 %idxprom
  %0 = load float, float* %arrayidx
  %idxprom1 = zext i32 %i.0 to i64
  %arrayidx2 = getelementptr inbounds float, float* %c, i64 %idxprom1
  %1 = load float, float* %arrayidx2
  %add3 = fadd fast float %0, %1
  %arrayidx5 = getelementptr inbounds float, float* %a, i64 %idxprom1
  store float %add3, float* %arrayidx5
  %inc = add nuw nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

