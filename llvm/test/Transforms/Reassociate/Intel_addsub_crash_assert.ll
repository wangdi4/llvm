; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -opaque-pointers=0 -passes="addsub-reassoc" < %s -S | FileCheck %s
; REQUIRES: asserts

define void @crash2(i32 *%p, i32 %u) {
; CHECK-LABEL: @crash2(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[I0:%.*]] = load i32, i32* [[P:%.*]], align 4
; CHECK-NEXT:    [[I1:%.*]] = sub i32 2, [[U:%.*]]
; CHECK-NEXT:    [[I2:%.*]] = add i32 [[I1]], [[U]]
; CHECK-NEXT:    [[I3:%.*]] = add i32 [[I2]], 4
; CHECK-NEXT:    [[I4:%.*]] = add i32 [[U]], 2
; CHECK-NEXT:    [[I5:%.*]] = add i32 [[I4]], [[I0]]
; CHECK-NEXT:    [[I6:%.*]] = sub i32 4, [[I5]]
; CHECK-NEXT:    [[I7:%.*]] = add i32 [[I6]], [[U]]
; CHECK-NEXT:    ret void
;
; CMPLRLLVM-24780
; Crash happened during searching for candidates for a common subexpression (group).
; After finding a group the algorithm then removes the group elements (leaves)
; from each tree (the group is applicable to) in its internal representation.
; Group {-2, -%u} was found in the first iteration and it was not removed correctly.
; Specifically opcode the group is being applied to a tree was not taken into account).
;
;  --- Tree 0/2 ---
;  Linear form (size:5):
;  Leaf (-)i32 2
;  Leaf (-)i32 %u
;  Leaf (-)i32 %i0
;  Leaf (+)i32 4
;  Leaf (+)i32 %u
;  --- Tree 1/2 ---
;  Linear form (size:4):
;  Leaf (-)i32 %u
;  Leaf (+)i32 2
;  Leaf (+)i32 %u
;  Leaf (+)i32 4

entry:
  %i0 = load i32, i32* %p, align 4
  %i1 = sub i32 2, %u
  %i2 = add i32 %i1, %u
  %i3 = add i32 %i2, 4

  %i4 = add i32 %u, 2
  %i5 = add i32 %i4, %i0
  %i6 = sub i32 4, %i5
  %i7 = add i32 %i6, %u
  ret void
}
