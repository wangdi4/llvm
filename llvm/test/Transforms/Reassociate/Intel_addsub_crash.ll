; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -addsub-reassoc -S | FileCheck %s

; Instruction  "%i12 = add i32 0, 0" has two uses and was placed into tree
; trunk in attempt to grow tree. Trees are only allowed to have instructions
; in trunk with single use inside same tree. As those was the only uses
; the pass end up trying to delete the instruction twice and crashed.

@a = global [1 x i32] zeroinitializer

define void @foo() {
; CHECK-LABEL: @foo(
; CHECK-NEXT:  bb:
; CHECK-NEXT:    [[I:%.*]] = load i32, i32* getelementptr inbounds ([1 x i32], [1 x i32]* @a, i64 0, i64 0), align 4
; CHECK-NEXT:    [[I5:%.*]] = load i32, i32* getelementptr inbounds ([1 x i32], [1 x i32]* @a, i64 0, i64 0), align 4
; CHECK-NEXT:    [[I12:%.*]] = add i32 0, 0
; CHECK-NEXT:    [[CHAIN_0_2:%.*]] = add i32 [[I]], [[I5]]
; CHECK-NEXT:    [[CHAIN_0_:%.*]] = add i32 [[CHAIN_0_2]], 0
; CHECK-NEXT:    [[CHAIN_1_4:%.*]] = add i32 [[I]], [[I5]]
; CHECK-NEXT:    [[CHAIN_1_:%.*]] = add i32 [[CHAIN_1_4]], 0
; CHECK-NEXT:    [[TRUNK_1_15:%.*]] = add i32 [[CHAIN_1_]], [[CHAIN_0_]]
; CHECK-NEXT:    [[TRUNK_1_14:%.*]] = add i32 [[TRUNK_1_15]], 0
; CHECK-NEXT:    [[TRUNK_1_13:%.*]] = add i32 [[TRUNK_1_14]], 0
; CHECK-NEXT:    [[TRUNK_1_:%.*]] = add i32 [[TRUNK_1_13]], 0
; CHECK-NEXT:    [[TRUNK_0_11:%.*]] = add i32 [[CHAIN_1_]], [[CHAIN_0_]]
; CHECK-NEXT:    [[TRUNK_0_10:%.*]] = add i32 [[TRUNK_0_11]], 0
; CHECK-NEXT:    [[TRUNK_0_9:%.*]] = add i32 [[TRUNK_0_10]], 0
; CHECK-NEXT:    [[TRUNK_0_8:%.*]] = add i32 [[TRUNK_0_9]], 0
; CHECK-NEXT:    [[TRUNK_0_7:%.*]] = add i32 [[TRUNK_0_8]], 0
; CHECK-NEXT:    [[TRUNK_0_6:%.*]] = add i32 [[TRUNK_0_7]], [[I12]]
; CHECK-NEXT:    [[TRUNK_0_:%.*]] = add i32 [[TRUNK_0_6]], [[I12]]
; CHECK-NEXT:    ret void
;
bb:
  %i = load i32, i32* getelementptr inbounds ([1 x i32], [1 x i32]* @a, i64 0, i64 0), align 4
  %i1 = add i32 %i, 0
  %i2 = add i32 %i, 0
  %i3 = add i32 %i, 0
  %i4 = add i32 %i, 0
  %i5 = load i32, i32* getelementptr inbounds ([1 x i32], [1 x i32]* @a, i64 0, i64 0), align 4
  %i6 = add i32 %i5, 0
  %i7 = add i32 %i5, 0
  %i8 = add i32 %i5, 0
  %i9 = add i32 %i1, 0
  %i10 = add i32 %i2, %i9
  %i11 = add i32 %i6, %i10
  %i12 = add i32 0, 0
  %i13 = add i32 %i12, 0
  %i14 = add i32 %i12, %i13
  %i15 = add i32 %i14, 0
  %i16 = add i32 %i15, 0
  %i17 = add i32 %i3, %i16
  %i18 = add i32 %i4, %i17
  %i19 = add i32 %i8, %i18
  %i20 = add i32 %i11, %i7
  %i21 = add i32 %i19, %i5
  ret void
}
