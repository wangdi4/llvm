; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -xmain-enable-gep0-removal -passes='default<O3>' -unroll-runtime -S %s | FileCheck %s ;INTEL

; This test is -O3, many changes from llorg are expected. ;INTEL

target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx"

@b = global [58 x double] zeroinitializer, align 16
@c = global [58 x double] zeroinitializer, align 16
@a = global [58 x double] zeroinitializer, align 16

; Test case for #42332, showing excessive unrolling of vector loop.
define void @test_known_trip_count() {
; CHECK-LABEL: @test_known_trip_count(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[ENTRY:%.*]] ], [ [[INDVARS_IV_NEXT:%.*]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds [58 x double], ptr @b, i64 0, i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[TMP0:%.*]] = load double, ptr [[ARRAYIDX]], align 8
; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds [58 x double], ptr @c, i64 0, i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[TMP1:%.*]] = load double, ptr [[ARRAYIDX2]], align 8
; CHECK-NEXT:    [[ADD:%.*]] = fadd double [[TMP0]], [[TMP1]]
; CHECK-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds [58 x double], ptr @a, i64 0, i64 [[INDVARS_IV]]
; CHECK-NEXT:    store double [[ADD]], ptr [[ARRAYIDX4]], align 8
; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INDVARS_IV_NEXT]], 61
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label [[EXIT:%.*]], label [[FOR_BODY]]
; CHECK:       exit:
; CHECK-NEXT:    ret void
;
entry:
  br label %for.cond

for.cond:
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %cmp = icmp slt i32 %i.0, 61
  br i1 %cmp, label %for.body, label %exit

for.body:
  %idxprom = sext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds [58 x double], ptr @b, i64 0, i64 %idxprom
  %0 = load double, ptr %arrayidx, align 8
  %idxprom1 = sext i32 %i.0 to i64
  %arrayidx2 = getelementptr inbounds [58 x double], ptr @c, i64 0, i64 %idxprom1
  %1 = load double, ptr %arrayidx2, align 8
  %add = fadd double %0, %1
  %idxprom3 = sext i32 %i.0 to i64
  %arrayidx4 = getelementptr inbounds [58 x double], ptr @a, i64 0, i64 %idxprom3
  store double %add, ptr %arrayidx4, align 8
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

exit:
  ret void
}


define void @test_runtime_trip_count(i32 %N) {
; CHECK-LABEL: @test_runtime_trip_count(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP1:%.*]] = icmp sgt i32 [[N:%.*]], 0
; CHECK-NEXT:    br i1 [[CMP1]], label [[FOR_BODY_PREHEADER:%.*]], label [[EXIT:%.*]]
; CHECK:       for.body.preheader:
; CHECK-NEXT:    [[WIDE_TRIP_COUNT:%.*]] = zext i32 [[N]] to i64
; CHECK-NEXT:    [[XTRAITER:%.*]] = and i64 [[WIDE_TRIP_COUNT]], 7
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ult i32 [[N]], 8
; CHECK-NEXT:    br i1 [[TMP0]], label [[EXIT_LOOPEXIT_UNR_LCSSA:%.*]], label [[FOR_BODY_PREHEADER_NEW:%.*]]
; CHECK:       for.body.preheader.new:
; CHECK-NEXT:    [[UNROLL_ITER:%.*]] = and i64 [[WIDE_TRIP_COUNT]], 4294967288
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER_NEW]] ], [ [[INDVARS_IV_NEXT_7:%.*]], [[FOR_BODY]] ] ;INTEL
; CHECK-NEXT:    [[NITER:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER_NEW]] ], [ [[NITER_NEXT_7:%.*]], [[FOR_BODY]] ] ;INTEL
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds [58 x double], ptr @b, i64 0, i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[TMP1:%.*]] = load double, ptr [[ARRAYIDX]], align 16 ;INTEL
; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds [58 x double], ptr @c, i64 0, i64 [[INDVARS_IV]]
; CHECK-NEXT:    [[TMP2:%.*]] = load double, ptr [[ARRAYIDX2]], align 16 ;INTEL
; CHECK-NEXT:    [[ADD:%.*]] = fadd double [[TMP1]], [[TMP2]] ;INTEL
; CHECK-NEXT:    [[ARRAYIDX4:%.*]] = getelementptr inbounds [58 x double], ptr @a, i64 0, i64 [[INDVARS_IV]]
; CHECK-NEXT:    store double [[ADD]], ptr [[ARRAYIDX4]], align 16
; CHECK-NEXT:    [[INDVARS_IV_NEXT:%.*]] = add nuw nsw i64 [[INDVARS_IV]], 1
; CHECK-NEXT:    [[ARRAYIDX_1:%.*]] = getelementptr inbounds [58 x double], ptr @b, i64 0, i64 [[INDVARS_IV_NEXT]]
; CHECK-NEXT:    [[TMP3:%.*]] = load double, ptr [[ARRAYIDX_1]], align 8
; CHECK-NEXT:    [[ARRAYIDX2_1:%.*]] = getelementptr inbounds [58 x double], ptr @c, i64 0, i64 [[INDVARS_IV_NEXT]]
; CHECK-NEXT:    [[TMP4:%.*]] = load double, ptr [[ARRAYIDX2_1]], align 8
; CHECK-NEXT:    [[ADD_1:%.*]] = fadd double [[TMP3]], [[TMP4]]
; CHECK-NEXT:    [[ARRAYIDX4_1:%.*]] = getelementptr inbounds [58 x double], ptr @a, i64 0, i64 [[INDVARS_IV_NEXT]]
; CHECK-NEXT:    store double [[ADD_1]], ptr [[ARRAYIDX4_1]], align 8
; CHECK-NEXT:    [[INDVARS_IV_NEXT_1:%.*]] = add nuw nsw i64 [[INDVARS_IV]], 2
; CHECK-NEXT:    [[ARRAYIDX_2:%.*]] = getelementptr inbounds [58 x double], ptr @b, i64 0, i64 [[INDVARS_IV_NEXT_1]]
; CHECK-NEXT:    [[TMP5:%.*]] = load double, ptr [[ARRAYIDX_2]], align 16
; CHECK-NEXT:    [[ARRAYIDX2_2:%.*]] = getelementptr inbounds [58 x double], ptr @c, i64 0, i64 [[INDVARS_IV_NEXT_1]]
; CHECK-NEXT:    [[TMP6:%.*]] = load double, ptr [[ARRAYIDX2_2]], align 16
; CHECK-NEXT:    [[ADD_2:%.*]] = fadd double [[TMP5]], [[TMP6]]
; CHECK-NEXT:    [[ARRAYIDX4_2:%.*]] = getelementptr inbounds [58 x double], ptr @a, i64 0, i64 [[INDVARS_IV_NEXT_1]]
; CHECK-NEXT:    store double [[ADD_2]], ptr [[ARRAYIDX4_2]], align 16
; CHECK-NEXT:    [[INDVARS_IV_NEXT_2:%.*]] = add nuw nsw i64 [[INDVARS_IV]], 3
; CHECK-NEXT:    [[ARRAYIDX_3:%.*]] = getelementptr inbounds [58 x double], ptr @b, i64 0, i64 [[INDVARS_IV_NEXT_2]]
; CHECK-NEXT:    [[TMP7:%.*]] = load double, ptr [[ARRAYIDX_3]], align 8
; CHECK-NEXT:    [[ARRAYIDX2_3:%.*]] = getelementptr inbounds [58 x double], ptr @c, i64 0, i64 [[INDVARS_IV_NEXT_2]]
; CHECK-NEXT:    [[TMP8:%.*]] = load double, ptr [[ARRAYIDX2_3]], align 8
; CHECK-NEXT:    [[ADD_3:%.*]] = fadd double [[TMP7]], [[TMP8]]
; CHECK-NEXT:    [[ARRAYIDX4_3:%.*]] = getelementptr inbounds [58 x double], ptr @a, i64 0, i64 [[INDVARS_IV_NEXT_2]]
; CHECK-NEXT:    store double [[ADD_3]], ptr [[ARRAYIDX4_3]], align 8
; CHECK-NEXT:    [[INDVARS_IV_NEXT_3:%.*]] = add nuw nsw i64 [[INDVARS_IV]], 4
; CHECK-NEXT:    [[ARRAYIDX_4:%.*]] = getelementptr inbounds [58 x double], ptr @b, i64 0, i64 [[INDVARS_IV_NEXT_3]]
; CHECK-NEXT:    [[TMP9:%.*]] = load double, ptr [[ARRAYIDX_4]], align 16
; CHECK-NEXT:    [[ARRAYIDX2_4:%.*]] = getelementptr inbounds [58 x double], ptr @c, i64 0, i64 [[INDVARS_IV_NEXT_3]]
; CHECK-NEXT:    [[TMP10:%.*]] = load double, ptr [[ARRAYIDX2_4]], align 16
; CHECK-NEXT:    [[ADD_4:%.*]] = fadd double [[TMP9]], [[TMP10]]
; CHECK-NEXT:    [[ARRAYIDX4_4:%.*]] = getelementptr inbounds [58 x double], ptr @a, i64 0, i64 [[INDVARS_IV_NEXT_3]]
; CHECK-NEXT:    store double [[ADD_4]], ptr [[ARRAYIDX4_4]], align 16
; CHECK-NEXT:    [[INDVARS_IV_NEXT_4:%.*]] = add nuw nsw i64 [[INDVARS_IV]], 5
; CHECK-NEXT:    [[ARRAYIDX_5:%.*]] = getelementptr inbounds [58 x double], ptr @b, i64 0, i64 [[INDVARS_IV_NEXT_4]]
; CHECK-NEXT:    [[TMP11:%.*]] = load double, ptr [[ARRAYIDX_5]], align 8
; CHECK-NEXT:    [[ARRAYIDX2_5:%.*]] = getelementptr inbounds [58 x double], ptr @c, i64 0, i64 [[INDVARS_IV_NEXT_4]]
; CHECK-NEXT:    [[TMP12:%.*]] = load double, ptr [[ARRAYIDX2_5]], align 8
; CHECK-NEXT:    [[ADD_5:%.*]] = fadd double [[TMP11]], [[TMP12]]
; CHECK-NEXT:    [[ARRAYIDX4_5:%.*]] = getelementptr inbounds [58 x double], ptr @a, i64 0, i64 [[INDVARS_IV_NEXT_4]]
; CHECK-NEXT:    store double [[ADD_5]], ptr [[ARRAYIDX4_5]], align 8
; CHECK-NEXT:    [[INDVARS_IV_NEXT_5:%.*]] = add nuw nsw i64 [[INDVARS_IV]], 6
; CHECK-NEXT:    [[ARRAYIDX_6:%.*]] = getelementptr inbounds [58 x double], ptr @b, i64 0, i64 [[INDVARS_IV_NEXT_5]]
; CHECK-NEXT:    [[TMP13:%.*]] = load double, ptr [[ARRAYIDX_6]], align 16
; CHECK-NEXT:    [[ARRAYIDX2_6:%.*]] = getelementptr inbounds [58 x double], ptr @c, i64 0, i64 [[INDVARS_IV_NEXT_5]]
; CHECK-NEXT:    [[TMP14:%.*]] = load double, ptr [[ARRAYIDX2_6]], align 16
; CHECK-NEXT:    [[ADD_6:%.*]] = fadd double [[TMP13]], [[TMP14]]
; CHECK-NEXT:    [[ARRAYIDX4_6:%.*]] = getelementptr inbounds [58 x double], ptr @a, i64 0, i64 [[INDVARS_IV_NEXT_5]]
; CHECK-NEXT:    store double [[ADD_6]], ptr [[ARRAYIDX4_6]], align 16
; CHECK-NEXT:    [[INDVARS_IV_NEXT_6:%.*]] = add nuw nsw i64 [[INDVARS_IV]], 7
; CHECK-NEXT:    [[ARRAYIDX_7:%.*]] = getelementptr inbounds [58 x double], ptr @b, i64 0, i64 [[INDVARS_IV_NEXT_6]]
; CHECK-NEXT:    [[TMP15:%.*]] = load double, ptr [[ARRAYIDX_7]], align 8
; CHECK-NEXT:    [[ARRAYIDX2_7:%.*]] = getelementptr inbounds [58 x double], ptr @c, i64 0, i64 [[INDVARS_IV_NEXT_6]]
; CHECK-NEXT:    [[TMP16:%.*]] = load double, ptr [[ARRAYIDX2_7]], align 8
; CHECK-NEXT:    [[ADD_7:%.*]] = fadd double [[TMP15]], [[TMP16]]
; CHECK-NEXT:    [[ARRAYIDX4_7:%.*]] = getelementptr inbounds [58 x double], ptr @a, i64 0, i64 [[INDVARS_IV_NEXT_6]]
; CHECK-NEXT:    store double [[ADD_7]], ptr [[ARRAYIDX4_7]], align 8
; CHECK-NEXT:    [[INDVARS_IV_NEXT_7]] = add nuw nsw i64 [[INDVARS_IV]], 8
; CHECK-NEXT:    [[NITER_NEXT_7]] = add nuw i64 [[NITER]], 8
; CHECK-NEXT:    [[NITER_NCMP_7:%.*]] = icmp eq i64 [[NITER_NEXT_7]], [[UNROLL_ITER]]
; CHECK-NEXT:    br i1 [[NITER_NCMP_7]], label [[EXIT_LOOPEXIT_UNR_LCSSA]], label [[FOR_BODY]]
; CHECK:       exit.loopexit.unr-lcssa:
; CHECK-NEXT:    [[INDVARS_IV_UNR:%.*]] = phi i64 [ 0, [[FOR_BODY_PREHEADER]] ], [ [[INDVARS_IV_NEXT_7]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[LCMP_MOD_NOT:%.*]] = icmp eq i64 [[XTRAITER]], 0
; CHECK-NEXT:    br i1 [[LCMP_MOD_NOT]], label [[EXIT]], label [[FOR_BODY_EPIL:%.*]]
; CHECK:       for.body.epil:
; CHECK-NEXT:    [[INDVARS_IV_EPIL:%.*]] = phi i64 [ [[INDVARS_IV_NEXT_EPIL:%.*]], [[FOR_BODY_EPIL]] ], [ [[INDVARS_IV_UNR]], [[EXIT_LOOPEXIT_UNR_LCSSA]] ]
; CHECK-NEXT:    [[EPIL_ITER:%.*]] = phi i64 [ [[EPIL_ITER_NEXT:%.*]], [[FOR_BODY_EPIL]] ], [ 0, [[EXIT_LOOPEXIT_UNR_LCSSA]] ]
; CHECK-NEXT:    [[ARRAYIDX_EPIL:%.*]] = getelementptr inbounds [58 x double], ptr @b, i64 0, i64 [[INDVARS_IV_EPIL]]
; CHECK-NEXT:    [[TMP17:%.*]] = load double, ptr [[ARRAYIDX_EPIL]], align 8
; CHECK-NEXT:    [[ARRAYIDX2_EPIL:%.*]] = getelementptr inbounds [58 x double], ptr @c, i64 0, i64 [[INDVARS_IV_EPIL]]
; CHECK-NEXT:    [[TMP18:%.*]] = load double, ptr [[ARRAYIDX2_EPIL]], align 8
; CHECK-NEXT:    [[ADD_EPIL:%.*]] = fadd double [[TMP17]], [[TMP18]]
; CHECK-NEXT:    [[ARRAYIDX4_EPIL:%.*]] = getelementptr inbounds [58 x double], ptr @a, i64 0, i64 [[INDVARS_IV_EPIL]]
; CHECK-NEXT:    store double [[ADD_EPIL]], ptr [[ARRAYIDX4_EPIL]], align 8
; CHECK-NEXT:    [[INDVARS_IV_NEXT_EPIL]] = add nuw nsw i64 [[INDVARS_IV_EPIL]], 1
; CHECK-NEXT:    [[EPIL_ITER_NEXT]] = add i64 [[EPIL_ITER]], 1
; CHECK-NEXT:    [[EPIL_ITER_CMP_NOT:%.*]] = icmp eq i64 [[EPIL_ITER_NEXT]], [[XTRAITER]]
; CHECK-NEXT:    br i1 [[EPIL_ITER_CMP_NOT]], label [[EXIT]], label [[FOR_BODY_EPIL]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK:       exit:
; CHECK-NEXT:    ret void
;
entry:
  br label %for.cond

for.cond:
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %cmp = icmp slt i32 %i.0, %N
  br i1 %cmp, label %for.body, label %exit

for.body:
  %idxprom = sext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds [58 x double], ptr @b, i64 0, i64 %idxprom
  %0 = load double, ptr %arrayidx, align 8
  %idxprom1 = sext i32 %i.0 to i64
  %arrayidx2 = getelementptr inbounds [58 x double], ptr @c, i64 0, i64 %idxprom1
  %1 = load double, ptr %arrayidx2, align 8
  %add = fadd double %0, %1
  %idxprom3 = sext i32 %i.0 to i64
  %arrayidx4 = getelementptr inbounds [58 x double], ptr @a, i64 0, i64 %idxprom3
  store double %add, ptr %arrayidx4, align 8
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

exit:
  ret void
}
