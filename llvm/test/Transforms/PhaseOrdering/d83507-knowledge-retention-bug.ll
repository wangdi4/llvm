; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; INTEL_CUSTOMIZATION
; RUN: opt -opaque-pointers -xmain-enable-gep0-removal -passes='loop(loop-rotate),instcombine' -enable-knowledge-retention -S < %s  | FileCheck %s --check-prefixes=NEWPM
; end INTEL_CUSTOMIZATION

%0 = type { ptr }

define ptr @f1(ptr %i0) local_unnamed_addr {
; INTEL_CUSTOMIZATION
; update_test_checks is using hardcoded block names, which are different due
; slightly different code in JumpThreading.

; NEWPM-LABEL: @f1(
; NEWPM-NEXT:  bb:
; NEWPM:         br label [[BB3:%.*]]
; NEWPM:       bb3:
; NEWPM-NEXT:    [[I1:%.*]] = phi ptr [ %i0, [[BB:%.*]] ], [ [[I5:%.*]], [[BB3]] ]
; NEWPM-NEXT:    call void @llvm.assume(i1 true) [ "nonnull"(ptr [[I1]]) ]
; NEWPM-NEXT:    [[I5]] = load ptr, ptr [[TMP0:%.*]], align 8
; NEWPM-NEXT:    [[I2:%.*]] = icmp eq ptr [[I5]], null
; NEWPM-NEXT:    br i1 [[I2]], label [[BB6:%.*]], label [[BB3]]
; NEWPM:       bb6:
; NEWPM-NEXT:    ret ptr undef
; end INTEL_CUSTOMIZATION
bb:
  br label %bb1

bb1:
  %i = phi ptr [ %i0, %bb ], [ %i5, %bb3 ]
  %i2 = icmp eq ptr %i, null
  br i1 %i2, label %bb6, label %bb3

bb3:
  call void @llvm.assume(i1 true) [ "nonnull"(ptr %i) ]
  %i5 = load ptr, ptr %i, align 8
  br label %bb1

bb6:
  ret ptr undef
}

declare void @llvm.assume(i1)
