; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; INTEL_CUSTOMIZATION
; NOTE: This file is edited manually after it is autogenerated by
;       update_llc_test_checks.py for test purpose, and this comment
;       is part of the testing. Please keep the 4-line comment and
;       the difference from x86-basic-ref.ll.
; end INTEL_CUSTOMIZATION
;; Check that we accept functions with '$' in the name.
; RUN: llc -mtriple=x86_64 < %s | FileCheck %s

;; Check that we accept .Ldsolocal$local: below the function label.
; RUN: llc -mtriple=x86_64 -relocation-model=pic < %s | FileCheck %s --check-prefix=PIC

;; Check that we accept .seh_proc below the function label.
; RUN: llc -mtriple=x86_64-windows -relocation-model=pic < %s | FileCheck %s --check-prefix=WIN

; RUN: llc -mtriple=x86_64 < %s | FileCheck %s ;INTEL

@gv0 = dso_local global i32 0, align 4
@gv1 = dso_preemptable global i32 0, align 4

define hidden i32 @"_Z54bar$ompvariant$bar"() {
; CHECK: _Z54bar$ompvariant$bar: ;INTEL
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movl $2, %eax
; CHECK-NEXT:    retq
;
; PIC: _Z54bar$ompvariant$bar: ;INTEL
; PIC:       # %bb.0: # %entry
; PIC-NEXT:    movl $2, %eax
; PIC-NEXT:    retq
;
; WIN: _Z54bar$ompvariant$bar: ;INTEL
; WIN:       # %bb.0: # %entry
; WIN-NEXT:    movl $2, %eax
; WIN-NEXT:    retq
entry:
  ret i32 2
}

define dso_local i32 @dsolocal() {
; CHECK-LABEL: dsolocal:
; CHECK:       # %bb.0: # %entry
; INTEL_CUSTOMIZATION
; CHECK:    pushq %rax
; CHECK:    .cfi_def_cfa_offset 16
; CHECK:    callq ext@PLT
; CHECK:    movl $2, %eax
; CHECK:    popq %rcx
; CHECK:    .cfi_def_cfa_offset 8
; CHECK:    retq
; end INTEL_CUSTOMIZATION
;
; PIC-LABEL: dsolocal:
; PIC:       # %bb.0: # %entry
; INTEL_CUSTOMIZATION
; PIC:    pushq %rax
; PIC:    .cfi_def_cfa_offset 16
; PIC:    callq ext@PLT
; PIC:    movl $2, %eax
; PIC:    popq %rcx
; PIC:    .cfi_def_cfa_offset 8
; PIC:    retq
; end INTEL_CUSTOMIZATION
;
; WIN-LABEL: dsolocal:
; WIN:       # %bb.0: # %entry
; INTEL_CUSTOMIZATION
; WIN:    subq $40, %rsp
; WIN:    .seh_stackalloc 40
; WIN:    .seh_endprologue
; WIN:    callq ext
; WIN:    movl $2, %eax
; WIN:    addq $40, %rsp
; WIN:    retq
; WIN:    .seh_endproc
; end INTEL_CUSTOMIZATION
entry:
  call void @ext()
  ret i32 2
}

declare void @ext()

define i32 @load() {
; CHECK-LABEL: load:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movl gv0(%rip), %eax
; CHECK-NEXT:    movq gv1@GOTPCREL(%rip), %rcx
; CHECK-NEXT:    addl (%rcx), %eax
; CHECK-NEXT:    retq
;
; PIC-LABEL: load:
; PIC:       # %bb.0: # %entry
; PIC-NEXT:    movl .Lgv0$local(%rip), %eax
; PIC-NEXT:    movq gv1@GOTPCREL(%rip), %rcx
; PIC-NEXT:    addl (%rcx), %eax
; PIC-NEXT:    retq
;
; WIN-LABEL: load:
; WIN:       # %bb.0: # %entry
; WIN-NEXT:    movl gv0(%rip), %eax
; WIN-NEXT:    addl gv1(%rip), %eax
; WIN-NEXT:    retq
entry:
  %a = load i32, i32* @gv0
  %b = load i32, i32* @gv1
  %c = add i32 %a, %b
  ret i32 %c
}
