RUN: printf '\377lprofr\201' > %t
RUN: printf '\0\0\0\0\0\0\0\10' >> %t
RUN: printf '\0\0\0\0\0\0\0\0' >> %t
RUN: printf '\0\0\0\0\0\0\0\2' >> %t
RUN: printf '\0\0\0\0\0\0\0\0' >> %t
RUN: printf '\0\0\0\0\0\0\0\3' >> %t
RUN: printf '\0\0\0\0\0\0\0\0' >> %t
RUN: printf '\0\0\0\0\0\0\0\20' >> %t
RUN: printf '\0\0\0\1\0\4\0\0' >> %t
RUN: printf '\0\0\0\2\0\4\0\0' >> %t
RUN: printf '\0\0\0\0\0\0\0\0' >> %t

RUN: printf '\134\370\302\114\333\030\275\254' >> %t
RUN: printf '\0\0\0\0\0\0\0\1' >> %t
RUN: printf '\0\0\0\1\0\4\0\0' >> %t
RUN: printf '\0\0\0\0\0\0\0\0' >> %t
RUN: printf '\0\0\0\0\0\0\0\0' >> %t
RUN: printf '\0\0\0\1\0\0\0\0' >> %t
<<<<<<< HEAD
// INTEL_CUSTOMIZATION
// Add 2 bytes of 0 for the number of profiled loops,
// plus 6 bytes of 0 to pad to a 64-bit aligmnent to
// support the addition of loop trip count value
// profiling types done by the xmain compiler.
RUN: printf '\0\0\0\0\0\0\0\0' >> %t
// end INTEL_CUSTOMIZATION

RUN: printf '\344\023\165\112\031\035\265\067' >> %t
RUN: printf '\0\0\0\0\0\0\0\02' >> %t
// INTEL_CUSTOMIZATION
// The addition of 8 bytes due to record descriptor increasing,
// causes the pointer offset to the counters to change by 8
// bytes in opposite direction.
RUN: printf '\0\0\0\1\0\3\xff\xd0' >> %t
// end INTEL_CUSTOMIZATION
RUN: printf '\0\0\0\0\0\0\0\0' >> %t
RUN: printf '\0\0\0\0\0\0\0\0' >> %t
RUN: printf '\0\0\0\02\0\0\0\0' >> %t
// INTEL_CUSTOMIZATION
// Add 2 bytes of 0 for the number of profiled loops,
// plus 6 bytes of 0 to pad to a 64-bit aligmnent.
RUN: printf '\0\0\0\0\0\0\0\0' >> %t
// end INTEL_CUSTOMIZATION
=======

RUN: printf '\344\023\165\112\031\035\265\067' >> %t
RUN: printf '\0\0\0\0\0\0\0\02' >> %t
RUN: printf '\0\0\0\1\0\3\xff\xd8' >> %t
RUN: printf '\0\0\0\0\0\0\0\0' >> %t
RUN: printf '\0\0\0\0\0\0\0\0' >> %t
RUN: printf '\0\0\0\02\0\0\0\0' >> %t
>>>>>>> 53a2923bf67bc164558d489493176630123abf7e

RUN: printf '\0\0\0\0\0\0\0\023' >> %t
RUN: printf '\0\0\0\0\0\0\0\067' >> %t
RUN: printf '\0\0\0\0\0\0\0\101' >> %t
RUN: printf '\7\0foo\1bar\0\0\0\0\0\0\0' >> %t

RUN: llvm-profdata show %t -all-functions -counts | FileCheck %s

CHECK: Counters:
CHECK:   foo:
CHECK:     Hash: 0x0000000000000001
CHECK:     Counters: 1
CHECK:     Function count: 19
CHECK:     Block counts: []
CHECK:   bar:
CHECK:     Hash: 0x0000000000000002
CHECK:     Counters: 2
CHECK:     Function count: 55
CHECK:     Block counts: [65]
CHECK: Functions shown: 2
CHECK: Total functions: 2
CHECK: Maximum function count: 55
CHECK: Maximum internal block count: 65
