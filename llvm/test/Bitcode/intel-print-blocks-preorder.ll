; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: -p --scrub-attributes
; RUN: opt -S -print-blocks-preorder < %s | FileCheck %s

; This test ensures that the -print-blocks-preorder flag causes the IR to be
; printed in pre-order. Also, blocks that are unreachable from the entry of
; the function, and without predecessors, are visited again in pre-order,
; and blocks in unreachable cycles are visited in the order they are
; present in the input IR.
; until all blocks are printed.

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define void @bar() {
; CHECK-LABEL: @bar(

; Pre-order printing begins with the Entry block of the function.
; CHECK-NEXT:  bb:
; CHECK-NEXT:    br label %bb1
; CHECK:       bb1:
; CHECK-NEXT:    %call1 = call token @llvm.directive.region.entry() [ "DIR.OMP.PARALLEL"() ]
; CHECK-NEXT:    br label %bb2
; CHECK:       bb2:
; CHECK-NEXT:    %call = call token @llvm.directive.region.entry() [ "DIR.OMP.SINGLE"() ]
; CHECK-NEXT:    %icmp1 = icmp sle i32 undef, undef
; CHECK-NEXT:    br i1 %icmp1, label %bb3, label %bb5
; CHECK:       bb3:
; CHECK-NEXT:    br label %bb4
; CHECK:       bb4:
; CHECK-NEXT:    %icmp = icmp sle i32 undef, undef
; CHECK-NEXT:    br i1 %icmp, label %bb4, label %bb5
; CHECK:       bb5:
; CHECK-NEXT:    call void @llvm.directive.region.exit(token %call) [ "DIR.OMP.END.SINGLE"() ]
; CHECK-NEXT:    call void @llvm.directive.region.exit(token %call1) [ "DIR.OMP.END.PARALLEL"() ]
; CHECK-NEXT:    ret void

; Pre-order printing is also done starting from unreachable blocks
; with no predecessors.
; CHECK:       bb_a1:
; CHECK-NEXT:    br label %bb_a2
; CHECK:       bb_a2:
; CHECK-NEXT:    unreachable
; CHECK:       bb_b1:
; CHECK-NEXT:    br label %bb_b2
; CHECK:       bb_b2:
; CHECK-NEXT:    unreachable

; But unreachable cycles (i.e. all blocks have a predecessor), are printed as-is,
; in the order they are present in the input.
; CHECK:       bb_d1:
; CHECK-NEXT:    br label %bb_d2
; CHECK:       bb_c1:
; CHECK-NEXT:    br label %bb_c1
; CHECK:       bb_d2:
; CHECK-NEXT:    br label %bb_d1
;
bb:
  br label %bb1

bb3:                                              ; preds = %bb2
  br label %bb4

bb_d1:                                            ; preds = %bb_d2
  br label %bb_d2

bb4:                                              ; preds = %bb4, %bb3
  %icmp = icmp sle i32 undef, undef
  br i1 %icmp, label %bb4, label %bb5

bb_a1:                                            ; No predecessors!
  br label %bb_a2

bb2:                                              ; preds = %bb1
  %call = call token @llvm.directive.region.entry() [ "DIR.OMP.SINGLE"() ]
  %icmp1 = icmp sle i32 undef, undef
  br i1 %icmp1, label %bb3, label %bb5

bb_b2:                                            ; preds = %bb_b1
  unreachable

bb_a2:                                            ; preds = %bb_a1
  unreachable

bb5:                                              ; preds = %bb2, %bb4
  call void @llvm.directive.region.exit(token %call) [ "DIR.OMP.END.SINGLE"() ]
  call void @llvm.directive.region.exit(token %call1) [ "DIR.OMP.END.PARALLEL"() ]
  ret void

bb_c1:                                            ; preds = %bb_c1
  br label %bb_c1

bb_d2:                                            ; preds = %bb_d1
  br label %bb_d1

bb_b1:                                            ; No predecessors!
  br label %bb_b2

bb1:                                              ; preds = %bb
  %call1 = call token @llvm.directive.region.entry() [ "DIR.OMP.PARALLEL"() ]
  br label %bb2
}

declare token @llvm.directive.region.entry()
declare void @llvm.directive.region.exit(token)
