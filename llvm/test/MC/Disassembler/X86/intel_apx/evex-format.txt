# REQUIRES: intel_feature_isa_apx_f
## NOTE: This file needs to be updated after
## 1. the bug of XED is fixed
## 2. promoted instruction is supported
# RUN: llvm-mc -triple x86_64 -disassemble %s | FileCheck %s --check-prefix=ATT
# RUN: llvm-mc -triple x86_64 -disassemble -output-asm-variant=1 %s | FileCheck %s --check-prefix=INTEL

## MRMDestMem

# ATT:   vextractf32x4	$1, %zmm0, (%r16,%r17)
# INTEL: vextractf32x4	xmmword ptr [r16 + r17], zmm0, 1
0x62,0xfb,0x79,0x48,0x19,0x04,0x08,0x01

# ATT:   shldl	%cl, %r16d, 291(%r17,%r18,4), %r19d
# INTEL: shld	r19d, dword ptr [r17 + 4*r18 + 291], r16d, cl
0x62,0xec,0x60,0x10,0xa5,0x84,0x91,0x23,0x01,0x00,0x00

# ATT:   shldl	%cl, %r16d, 127(%r17d), %r18d
# INTEL: shld	r18d, dword ptr [r17d + 127], r16d, cl
0x67,0x62,0xec,0x6c,0x10,0xa5,0x41,0x7f

# ATT:   {evex} shldl	%cl, %r16d, 127(%r17d)
# INTEL: {evex} shld	dword ptr [r17d + 127], r16d, cl
0x67,0x62,0xec,0x7c,0x08,0xa5,0x41,0x7f

# ATT:   ccmpbq	{of}	%r16, 123(%r17,%r18,4)
# INTEL: ccmpb	{of}	qword ptr [r17 + 4*r18 + 123], r16
0x62,0xec,0xc0,0x02,0x39,0x44,0x91,0x7b

## MRMDestMemCC

# ATT:   cfcmovbq	%r16, 123(%r17,%r18,4)
# INTEL: cfcmovb	qword ptr [r17 + 4*r18 + 123], r16
0x62,0xec,0xf8,0x0c,0x42,0x44,0x91,0x7b

## MRMSrcMem

# ATT:   vbroadcasti32x4	(%r16,%r17), %zmm0
# INTEL: vbroadcasti32x4	zmm0, xmmword ptr [r16 + r17]
0x62,0xfa,0x79,0x48,0x5a,0x04,0x08

# ATT:   addq	127(%r16), %r17, %r18
# INTEL: add	r18, r17, qword ptr [r16 + 127]
0x62,0xec,0xec,0x10,0x03,0x48,0x7f

# ATT:   addq	291(%r16), %r17, %r18
# INTEL: add	r18, r17, qword ptr [r16 + 291]
0x62,0xec,0xec,0x10,0x03,0x88,0x23,0x01,0x00,0x00

# ATT:   {evex} addq	127(%r16), %r17
# INTEL: {evex} add	r17, qword ptr [r16 + 127]
0x62,0xec,0xfc,0x08,0x03,0x48,0x7f

# ATT:   ccmpbq	{of}	123(%r16,%r17,4), %r18
# INTEL: ccmpb	{of}	r18, qword ptr [r16 + 4*r17 + 123]
0x62,0xec,0xc0,0x02,0x3b,0x54,0x88,0x7b

## MRMSrcMemCC

# ATT:   cfcmovbq	123(%r16,%r17,4), %r18
# INTEL: cfcmovb	r18, qword ptr [r16 + 4*r17 + 123]
0x62,0xec,0xf8,0x08,0x42,0x54,0x88,0x7b

# ATT:   cfcmovbeq	123(%r16,%r17,4), %r18, %r19
# INTEL: cfcmovbe	r19, r18, qword ptr [r16 + 4*r17 + 123]
0x62,0xec,0xe0,0x14,0x46,0x54,0x88,0x7b

## MRM0m

# ATT:   vprorq	$0, (%r16,%r17), %zmm0
# INTEL: vprorq	zmm0, zmmword ptr [r16 + r17], 0
0x62,0xf9,0xf9,0x48,0x72,0x04,0x08,0x00

# ATT:   roll	%cl, 291(%r16,%r17,4), %r18d
# INTEL: rol	r18d, dword ptr [r16 + 4*r17 + 291], cl
0x62,0xfc,0x68,0x10,0xd3,0x84,0x88,0x23,0x01,0x00,0x00

# ATT:   roll	%cl, 127(%r16d), %r17d
# INTEL: rol	r17d, dword ptr [r16d + 127], cl
0x67,0x62,0xfc,0x74,0x10,0xd3,0x40,0x7f

# ATT:   {evex} roll	%cl, 127(%r16d)
# INTEL: {evex} rol	dword ptr [r16d + 127], cl
0x67,0x62,0xfc,0x7c,0x08,0xd3,0x40,0x7f

# ATT:   ctestbq	{of}	$123456, 123(%r16,%r17,4)
# INTEL: ctestb	{of}	qword ptr [r16 + 4*r17 + 123], 123456
0x62,0xfc,0xc0,0x02,0xf7,0x44,0x88,0x7b,0x40,0xe2,0x01,0x00

## MRM1m

# ATT:   vprolq	$0, (%r16,%r17), %zmm0
# INTEL: vprolq	zmm0, zmmword ptr [r16 + r17], 0
0x62,0xf9,0xf9,0x48,0x72,0x0c,0x08,0x00

# ATT:   rorl	%cl, 291(%r16,%r17,4), %r18d
# INTEL: ror	r18d, dword ptr [r16 + 4*r17 + 291], cl
0x62,0xfc,0x68,0x10,0xd3,0x8c,0x88,0x23,0x01,0x00,0x00

# ATT:   rorl	%cl, 127(%r16d), %r17d
# INTEL: ror	r17d, dword ptr [r16d + 127], cl
0x67,0x62,0xfc,0x74,0x10,0xd3,0x48,0x7f

# ATT:   {evex} rorl	%cl, 127(%r16d)
# INTEL: {evex} ror	dword ptr [r16d + 127], cl
0x67,0x62,0xfc,0x7c,0x08,0xd3,0x48,0x7f

## MRM2m

# ATT:   vpsrlq	$0, (%r16,%r17), %zmm0
# INTEL: vpsrlq	zmm0, zmmword ptr [r16 + r17], 0
0x62,0xf9,0xf9,0x48,0x73,0x14,0x08,0x00

# ATT:   rcll	%cl, 291(%r16,%r17,4), %r18d
# INTEL: rcl	r18d, dword ptr [r16 + 4*r17 + 291], cl
0x62,0xfc,0x68,0x10,0xd3,0x94,0x88,0x23,0x01,0x00,0x00

# ATT:   rcll	%cl, 127(%r16d), %r17d
# INTEL: rcl	r17d, dword ptr [r16d + 127], cl
0x67,0x62,0xfc,0x74,0x10,0xd3,0x50,0x7f

# ATT:   {evex} rcll	%cl, 127(%r16d)
# INTEL: {evex} rcl	dword ptr [r16d + 127], cl
0x67,0x62,0xfc,0x7c,0x08,0xd3,0x50,0x7f

## MRM3m

# ATT:   vpsrldq	$0, (%r16,%r17), %zmm0
# INTEL: vpsrldq	zmm0, zmmword ptr [r16 + r17], 0
0x62,0xf9,0x79,0x48,0x73,0x1c,0x08,0x00

# ATT:   rcrl	%cl, 291(%r16,%r17,4), %r18d
# INTEL: rcr	r18d, dword ptr [r16 + 4*r17 + 291], cl
0x62,0xfc,0x68,0x10,0xd3,0x9c,0x88,0x23,0x01,0x00,0x00

# ATT:   rcrl	%cl, 127(%r16d), %r17d
# INTEL: rcr	r17d, dword ptr [r16d + 127], cl
0x67,0x62,0xfc,0x74,0x10,0xd3,0x58,0x7f

# ATT:   {evex} rcrl	%cl, 127(%r16d)
# INTEL: {evex} rcr	dword ptr [r16d + 127], cl
0x67,0x62,0xfc,0x7c,0x08,0xd3,0x58,0x7f

## MRM4m

# ATT:   vpsraq	$0, (%r16,%r17), %zmm0
# INTEL: vpsraq	zmm0, zmmword ptr [r16 + r17], 0
0x62,0xf9,0xf9,0x48,0x72,0x24,0x08,0x00

# ATT:   shll	%cl, 291(%r16,%r17,4), %r18d
# INTEL: shl	r18d, dword ptr [r16 + 4*r17 + 291], cl
0x62,0xfc,0x68,0x10,0xd3,0xa4,0x88,0x23,0x01,0x00,0x00

# ATT:   shll	%cl, 127(%r16d), %r17d
# INTEL: shl	r17d, dword ptr [r16d + 127], cl
0x67,0x62,0xfc,0x74,0x10,0xd3,0x60,0x7f

# ATT:   {evex} shll	%cl, 127(%r16d)
# INTEL: {evex} shl	dword ptr [r16d + 127], cl
0x67,0x62,0xfc,0x7c,0x08,0xd3,0x60,0x7f

## MRM5m

## xed bug
# ATT:   vscatterpf0dps	(%r16,%zmm0) {%k1}
# INTEL: vscatterpf0dps	{k1}, zmmword ptr [r16 + zmm0]
0x62,0xfa,0x7d,0x49,0xc6,0x2c,0x00

# ATT:   shrl	%cl, 291(%r16,%r17,4), %r18d
# INTEL: shr	r18d, dword ptr [r16 + 4*r17 + 291], cl
0x62,0xfc,0x68,0x10,0xd3,0xac,0x88,0x23,0x01,0x00,0x00

# ATT:   shrl	%cl, 127(%r16d), %r17d
# INTEL: shr	r17d, dword ptr [r16d + 127], cl
0x67,0x62,0xfc,0x74,0x10,0xd3,0x68,0x7f

# ATT:   {evex} shrl	%cl, 127(%r16d)
# INTEL: {evex} shr	dword ptr [r16d + 127], cl         
0x67,0x62,0xfc,0x7c,0x08,0xd3,0x68,0x7f

## MRM6m

# ATT:   vpsllq	$0, (%r16,%r17), %zmm0
# INTEL: vpsllq	zmm0, zmmword ptr [r16 + r17], 0
0x62,0xf9,0xf9,0x48,0x73,0x34,0x08,0x00

# ATT:   {evex} divq    127(%r16)
# INTEL: {evex} div     qword ptr [r16 + 127]
0x62,0xfc,0xfc,0x08,0xf7,0x70,0x7f

# ATT:   {evex} divq    291(%r16)
# INTEL: {evex} div     qword ptr [r16 + 291]
0x62,0xfc,0xfc,0x08,0xf7,0xb0,0x23,0x01,0x00,0x00

# ATT:   xorq   $123, 127(%r16), %r17
# INTEL: xor    r17, qword ptr [r16 + 127], 123
0x62,0xfc,0xf4,0x10,0x83,0x70,0x7f,0x7b

# ATT:   xorq   $123, 291(%r16), %r17
# INTEL: xor    r17, qword ptr [r16 + 291], 123
0x62,0xfc,0xf4,0x10,0x83,0xb0,0x23,0x01,0x00,0x00,0x7b

# ATT:   {evex} xorq   $123, 127(%r16)
# INTEL: {evex} xor    qword ptr [r16 + 127], 123
0x62,0xfc,0xfc,0x08,0x83,0x70,0x7f,0x7b

## MRM7m

# ATT:   vpslldq	$0, (%r16,%r17), %zmm0
# INTEL: vpslldq	zmm0, zmmword ptr [r16 + r17], 0
0x62,0xf9,0x79,0x48,0x73,0x3c,0x08,0x00

# ATT:   sarl	%cl, 291(%r16,%r17,4), %r18d
# INTEL: sar	r18d, dword ptr [r16 + 4*r17 + 291], cl
0x62,0xfc,0x68,0x10,0xd3,0xbc,0x88,0x23,0x01,0x00,0x00

# ATT:   sarl	%cl, 127(%r16d), %r17d
# INTEL: sar	r17d, dword ptr [r16d + 127], cl
0x67,0x62,0xfc,0x74,0x10,0xd3,0x78,0x7f

# ATT:   {evex} sarl    %cl, 127(%r16d)
# INTEL: {evex} sar	dword ptr [r16d + 127], cl
0x67,0x62,0xfc,0x7c,0x08,0xd3,0x78,0x7f

# ATT:   ccmpfq	{of}	$123, 123(%r16,%r17,4)
# INTEL: ccmpf	{of}	qword ptr [r16 + 4*r17 + 123], 123
0x62,0xfc,0xc0,0x0b,0x83,0x7c,0x88,0x7b,0x7b

## MRMSrcReg

# ATT:   imulq %r16, %r17, %r18
# INTEL: imul r18, r17, r16
0x62,0xec,0xec,0x10,0xaf,0xc8

# ATT:   {evex} imulq %r16, %r17
# INTEL: {evex} imul r17, r16
0x62,0xec,0xfc,0x08,0xaf,0xc8

# ATT:   ccmpbq	{of}	%r16, %r17
# INTEL: ccmpb	{of}	r17, r16
0x62,0xec,0xc4,0x02,0x3b,0xc8

## MRMSrcRegCC

# ATT:   cfcmovbeq	%r16, %r17
# INTEL: cfcmovbe	r17, r16
0x62,0xec,0xfc,0x08,0x46,0xc8

# ATT:   cfcmovlq	%r16, %r17, %r18
# INTEL: cfcmovl	r18, r17, r16
0x62,0xec,0xec,0x14,0x4c,0xc8

## MRMDestReg

# ATT:   vextractps	$1, %xmm16, %r16d
# INTEL: vextractps	r16d, xmm16, 1
0x62,0xeb,0x7d,0x08,0x17,0xc0,0x01

# ATT:   shldq	%cl, %r16, %r17, %r18
# INTEL: shld	r18, r17, r16, cl
0x62,0xec,0xec,0x10,0xa5,0xc1

# ATT:   ccmpoq {of}	%r16, %r17
# INTEL: ccmpo {of}	r17, r16
0x62,0xec,0xc4,0x00,0x39,0xc1

## MRMDestRegCC

# ATT:   cfcmovbeq	%r16, %r17
# INTEL: cfcmovbe	r17, r16
0x62,0xec,0xfc,0x08,0x46,0xc8

## MRM0r

# ATT:   rolq	%cl, %r16, %r17
# INTEL: rol	r17, r16, cl
0x62,0xfc,0xf4,0x10,0xd3,0xc0

# ATT:   ctestbq	{of}	$123456, %r16
# INTEL: ctestb	{of}	r16, 123456
0x62,0xfc,0xc4,0x02,0xf7,0xc0,0x40,0xe2,0x01,0x00

## MRM1r

# ATT:   rorq	%cl, %r16, %r17
# INTEL: ror	r17, r16, cl
0x62,0xfc,0xf4,0x10,0xd3,0xc8

## MRM2r

# ATT:   rclq	%cl, %r16, %r17
# INTEL: rcl	r17, r16, cl
0x62,0xfc,0xf4,0x10,0xd3,0xd0

## MRM3r

# ATT:   rcrq	%cl, %r16, %r17
# INTEL: rcr	r17, r16, cl
0x62,0xfc,0xf4,0x10,0xd3,0xd8

## MRM4r

# ATT:   shll	%r16d, %r17d
# INTEL: shl	r17d, r16d
0x62,0xfc,0x74,0x10,0xd1,0xe0

## MRM5r

# ATT:   shrq	%cl, %r16, %r17
# INTEL: shr	r17, r16, cl
0x62,0xfc,0xf4,0x10,0xd3,0xe8

## MRM6r

# ATT:   {evex}  divq    %r16
# INTEL: {evex}  div     r16
0x62,0xfc,0xfc,0x08,0xf7,0xf0

## MRM7r

# ATT:   sarq	%cl, %r16, %r17
# INTEL: sar	r17, r16, cl
0x62,0xfc,0xf4,0x10,0xd3,0xf8

# ATT:   ccmpbq	{of}	$123456, %r16
# INTEL: ccmpb	{of}	r16, 123456
0x62,0xfc,0xc4,0x02,0x81,0xf8,0x40,0xe2,0x01,0x00
