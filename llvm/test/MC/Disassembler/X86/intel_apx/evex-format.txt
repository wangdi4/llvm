# REQUIRES: intel_feature_isa_apx_f
## NOTE: This file needs to be updated after
## 1. the bug of XED is fixed
## 2. promoted instruction is supported
# RUN: llvm-mc -triple x86_64 -disassemble %s | FileCheck %s --check-prefix=ATT
# RUN: llvm-mc -triple x86_64 -disassemble -output-asm-variant=1 %s | FileCheck %s --check-prefix=INTEL

## MRMDestMem

# ATT:   vextractf32x4	$1, %zmm0, (%r16,%r17)
# INTEL: vextractf32x4	xmmword ptr [r16 + r17], zmm0, 1
0x62,0xfb,0x79,0x48,0x19,0x04,0x08,0x01

# ATT:   shldl	%cl, %r16d, 291(%r17,%r18,4), %r19d
# INTEL: shld	r19d, dword ptr [r17 + 4*r18 + 291], r16d, cl
0x62,0xec,0x60,0x10,0xa5,0x84,0x91,0x23,0x01,0x00,0x00

## MRMSrcMem

# ATT:   vbroadcasti32x4	(%r16,%r17), %zmm0
# INTEL: vbroadcasti32x4	zmm0, xmmword ptr [r16 + r17]
0x62,0xfa,0x79,0x48,0x5a,0x04,0x08

## MRM0m

# ATT:   vprorq	$0, (%r16,%r17), %zmm0
# INTEL: vprorq	zmm0, zmmword ptr [r16 + r17], 0
0x62,0xf9,0xf9,0x48,0x72,0x04,0x08,0x00

# ATT:   roll	%cl, 291(%r16,%r17,4), %r18d
# INTEL: rol	r18d, dword ptr [r16 + 4*r17 + 291], cl
0x62,0xfc,0x68,0x10,0xd3,0x84,0x88,0x23,0x01,0x00,0x00

## MRM1m

# ATT:   vprolq	$0, (%r16,%r17), %zmm0
# INTEL: vprolq	zmm0, zmmword ptr [r16 + r17], 0
0x62,0xf9,0xf9,0x48,0x72,0x0c,0x08,0x00

# ATT:   rorl	%cl, 291(%r16,%r17,4), %r18d
# INTEL: ror	r18d, dword ptr [r16 + 4*r17 + 291], cl
0x62,0xfc,0x68,0x10,0xd3,0x8c,0x88,0x23,0x01,0x00,0x00

## MRM2m

# ATT:   vpsrlq	$0, (%r16,%r17), %zmm0
# INTEL: vpsrlq	zmm0, zmmword ptr [r16 + r17], 0
0x62,0xf9,0xf9,0x48,0x73,0x14,0x08,0x00

# ATT:   rcll	%cl, 291(%r16,%r17,4), %r18d
# INTEL: rcl	r18d, dword ptr [r16 + 4*r17 + 291], cl
0x62,0xfc,0x68,0x10,0xd3,0x94,0x88,0x23,0x01,0x00,0x00

## MRM3m

# ATT:   vpsrldq	$0, (%r16,%r17), %zmm0
# INTEL: vpsrldq	zmm0, zmmword ptr [r16 + r17], 0
0x62,0xf9,0x79,0x48,0x73,0x1c,0x08,0x00

# ATT:   rcrl	%cl, 291(%r16,%r17,4), %r18d
# INTEL: rcr	r18d, dword ptr [r16 + 4*r17 + 291], cl
0x62,0xfc,0x68,0x10,0xd3,0x9c,0x88,0x23,0x01,0x00,0x00

## MRM4m

# ATT:   vpsraq	$0, (%r16,%r17), %zmm0
# INTEL: vpsraq	zmm0, zmmword ptr [r16 + r17], 0
0x62,0xf9,0xf9,0x48,0x72,0x24,0x08,0x00

# ATT:   shll	%cl, 291(%r16,%r17,4), %r18d
# INTEL: shl	r18d, dword ptr [r16 + 4*r17 + 291], cl
0x62,0xfc,0x68,0x10,0xd3,0xa4,0x88,0x23,0x01,0x00,0x00

## MRM5m

## xed bug
# ATT:   vscatterpf0dps	(%r16,%zmm0) {%k1}
# INTEL: vscatterpf0dps	{k1}, zmmword ptr [r16 + zmm0]
0x62,0xfa,0x7d,0x49,0xc6,0x2c,0x00

# ATT:   shrl	%cl, 291(%r16,%r17,4), %r18d
# INTEL: shr	r18d, dword ptr [r16 + 4*r17 + 291], cl
0x62,0xfc,0x68,0x10,0xd3,0xac,0x88,0x23,0x01,0x00,0x00

## MRM6m

# ATT:   vpsllq	$0, (%r16,%r17), %zmm0
# INTEL: vpsllq	zmm0, zmmword ptr [r16 + r17], 0
0x62,0xf9,0xf9,0x48,0x73,0x34,0x08,0x00

## MRM7m

# ATT:   vpslldq	$0, (%r16,%r17), %zmm0
# INTEL: vpslldq	zmm0, zmmword ptr [r16 + r17], 0
0x62,0xf9,0x79,0x48,0x73,0x3c,0x08,0x00

# ATT:   sarl	%cl, 291(%r16,%r17,4), %r18d
# INTEL: sar	r18d, dword ptr [r16 + 4*r17 + 291], cl
0x62,0xfc,0x68,0x10,0xd3,0xbc,0x88,0x23,0x01,0x00,0x00

## MRMDestReg

# ATT:   vextractps	$1, %xmm16, %r16d
# INTEL: vextractps	r16d, xmm16, 1
0x62,0xeb,0x7d,0x08,0x17,0xc0,0x01

# ATT:   shldq	%cl, %r16, %r17, %r18
# INTEL: shld	r18, r17, r16, cl
0x62,0xec,0xec,0x10,0xa5,0xc1

## MRM0r

# ATT:   rolq	%cl, %r16, %r17
# INTEL: rol	r17, r16, cl
0x62,0xfc,0xf4,0x10,0xd3,0xc0

## MRM1r

# ATT:   rorq	%cl, %r16, %r17
# INTEL: ror	r17, r16, cl
0x62,0xfc,0xf4,0x10,0xd3,0xc8

## MRM2r

# ATT:   rclq	%cl, %r16, %r17
# INTEL: rcl	r17, r16, cl
0x62,0xfc,0xf4,0x10,0xd3,0xd0

## MRM3r

# ATT:   rcrq	%cl, %r16, %r17
# INTEL: rcr	r17, r16, cl
0x62,0xfc,0xf4,0x10,0xd3,0xd8

## MRM4r

# ATT:   shll	%r16d, %r17d
# INTEL: shl	r17d, r16d
0x62,0xfc,0x74,0x10,0xd1,0xe0

## MRM5r

# ATT:   shrq	%cl, %r16, %r17
# INTEL: shr	r17, r16, cl
0x62,0xfc,0xf4,0x10,0xd3,0xe8

## MRM7r

# ATT:   sarq	%cl, %r16, %r17
# INTEL: sar	r17, r16, cl
0x62,0xfc,0xf4,0x10,0xd3,0xf8
