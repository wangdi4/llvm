# REQUIRES: intel_feature_isa_apx_f
# RUN: llvm-mc -triple x86_64 -disassemble %s | FileCheck %s --check-prefix=ATT
# RUN: llvm-mc -triple x86_64 -disassemble -output-asm-variant=1 %s | FileCheck %s --check-prefix=INTEL

## Condition flags

# ATT:   ccmpoq {}	%rax, %rbx
# INTEL: ccmpo {}	rbx, rax
0x62,0xf4,0x84,0x10,0x39,0xc3

# ATT:   ccmpoq {of}	%rax, %rbx
# INTEL: ccmpo {of}	rbx, rax
0x62,0xf4,0xc4,0x10,0x39,0xc3

# ATT:   ccmpoq {sf}	%rax, %rbx
# INTEL: ccmpo {sf}	rbx, rax
0x62,0xf4,0xa4,0x10,0x39,0xc3

# ATT:   ccmpoq {zf}	%rax, %rbx
# INTEL: ccmpo {zf}	rbx, rax
0x62,0xf4,0x94,0x10,0x39,0xc3

# ATT:   ccmpoq {cf}	%rax, %rbx
# INTEL: ccmpo {cf}	rbx, rax
0x62,0xf4,0x8c,0x10,0x39,0xc3

# ATT:   ccmpoq {of,sf}	%rax, %rbx
# INTEL: ccmpo {of,sf}	rbx, rax
0x62,0xf4,0xe4,0x10,0x39,0xc3

# ATT:   ccmpoq {of,sf,zf}	%rax, %rbx
# INTEL: ccmpo {of,sf,zf}	rbx, rax
0x62,0xf4,0xf4,0x10,0x39,0xc3

# ATT:   ccmpoq {of,sf,zf,cf}	%rax, %rbx
# INTEL: ccmpo {of,sf,zf,cf}	rbx, rax
0x62,0xf4,0xfc,0x10,0x39,0xc3

## Condition code

# ATT:   ccmpnoq {of}	%rax, %rbx
# INTEL: ccmpno {of}	rbx, rax
0x62,0xf4,0xc4,0x11,0x39,0xc3

# ATT:   ccmpbq {of}	%rax, %rbx
# INTEL: ccmpb {of}	rbx, rax
0x62,0xf4,0xc4,0x12,0x39,0xc3

# ATT:   ccmpaeq {of}	%rax, %rbx
# INTEL: ccmpae {of}	rbx, rax
0x62,0xf4,0xc4,0x13,0x39,0xc3

# ATT:   ccmpeq {of}	%rax, %rbx
# INTEL: ccmpe {of}	rbx, rax
0x62,0xf4,0xc4,0x14,0x39,0xc3

# ATT:   ccmpneq {of}	%rax, %rbx
# INTEL: ccmpne {of}	rbx, rax
0x62,0xf4,0xc4,0x15,0x39,0xc3

# ATT:   ccmpbeq {of}	%rax, %rbx
# INTEL: ccmpbe {of}	rbx, rax
0x62,0xf4,0xc4,0x16,0x39,0xc3

# ATT:   ccmpaq {of}	%rax, %rbx
# INTEL: ccmpa {of}	rbx, rax
0x62,0xf4,0xc4,0x17,0x39,0xc3

# ATT:   ccmpsq {of}	%rax, %rbx
# INTEL: ccmps {of}	rbx, rax
0x62,0xf4,0xc4,0x18,0x39,0xc3

# ATT:   ccmpnsq {of}	%rax, %rbx
# INTEL: ccmpns {of}	rbx, rax
0x62,0xf4,0xc4,0x19,0x39,0xc3

# ATT:   ccmppq {of}	%rax, %rbx
# INTEL: ccmpp {of}	rbx, rax
0x62,0xf4,0xc4,0x1a,0x39,0xc3

# ATT:   ccmpnpq {of}	%rax, %rbx
# INTEL: ccmpnp {of}	rbx, rax
0x62,0xf4,0xc4,0x1b,0x39,0xc3

# ATT:   ccmplq {of}	%rax, %rbx
# INTEL: ccmpl {of}	rbx, rax
0x62,0xf4,0xc4,0x1c,0x39,0xc3

# ATT:   ccmpgeq {of}	%rax, %rbx
# INTEL: ccmpge {of}	rbx, rax
0x62,0xf4,0xc4,0x1d,0x39,0xc3

# ATT:   ccmpleq {of}	%rax, %rbx
# INTEL: ccmple {of}	rbx, rax
0x62,0xf4,0xc4,0x1e,0x39,0xc3

# ATT:   ccmpgq {of}	%rax, %rbx
# INTEL: ccmpg {of}	rbx, rax
0x62,0xf4,0xc4,0x1f,0x39,0xc3

## 32/16/8-bit

# ATT:   ccmpbl {sf}	%eax, %ebx
# INTEL: ccmpb {sf}	ebx, eax
0x62,0xf4,0x24,0x12,0x39,0xc3
