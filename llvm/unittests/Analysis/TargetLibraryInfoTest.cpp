//===--- TargetLibraryInfoTest.cpp - TLI/LibFunc unit tests ---------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#include "llvm/Analysis/TargetLibraryInfo.h"
#include "llvm/AsmParser/Parser.h"
#include "llvm/IR/LLVMContext.h"
#include "llvm/IR/LegacyPassManager.h"
#include "llvm/IR/Module.h"
#include "llvm/Support/SourceMgr.h"
#include "gtest/gtest.h"

using namespace llvm;

namespace {

class TargetLibraryInfoTest : public testing::Test {
protected:
  LLVMContext Context;
  TargetLibraryInfoImpl TLII;
  TargetLibraryInfo TLI;

  std::unique_ptr<Module> M;

  TargetLibraryInfoTest() : TLI(TLII) {}

  void parseAssembly(const char *Assembly) {
    SMDiagnostic Error;
    M = parseAssemblyString(Assembly, Error, Context);

    std::string errMsg;
    raw_string_ostream os(errMsg);
    Error.print("", os);

    if (!M)
      report_fatal_error(Twine(os.str()));
  }

  ::testing::AssertionResult isLibFunc(const Function *FDecl,
                                       LibFunc ExpectedLF) {
    StringRef ExpectedLFName = TLI.getName(ExpectedLF);

    if (!FDecl)
      return ::testing::AssertionFailure() << ExpectedLFName << " not found";

    LibFunc F;
    if (!TLI.getLibFunc(*FDecl, F))
      return ::testing::AssertionFailure() << ExpectedLFName << " invalid";

    return ::testing::AssertionSuccess() << ExpectedLFName << " is LibFunc";
  }
};

} // end anonymous namespace

// Check that we don't accept egregiously incorrect prototypes.
TEST_F(TargetLibraryInfoTest, InvalidProto) {
  parseAssembly("%foo = type { %foo }\n");

  auto *StructTy = StructType::getTypeByName(Context, "foo");
  auto *InvalidFTy = FunctionType::get(StructTy, /*isVarArg=*/false);

  for (unsigned FI = 0; FI != LibFunc::NumLibFuncs; ++FI) {
    LibFunc LF = (LibFunc)FI;
    auto *F = cast<Function>(
        M->getOrInsertFunction(TLI.getName(LF), InvalidFTy).getCallee());
    EXPECT_FALSE(isLibFunc(F, LF));
  }
}

// Check that we do accept know-correct prototypes.
TEST_F(TargetLibraryInfoTest, ValidProto) {
  parseAssembly(
      // These functions use a 64-bit size_t; use the appropriate datalayout.
      "target datalayout = \"p:64:64:64\"\n"

      // Struct pointers are replaced with an opaque pointer.
      "%struct = type opaque\n"

      // These functions were extracted as-is from the OS X headers.
      "declare double @__cospi(double)\n"
      "declare float @__cospif(float)\n"
      "declare { double, double } @__sincospi_stret(double)\n"
      "declare <2 x float> @__sincospif_stret(float)\n"
      "declare double @__sinpi(double)\n"
      "declare float @__sinpif(float)\n"
      "declare i32 @abs(i32)\n"
      "declare i32 @access(i8*, i32)\n"
      "declare double @acos(double)\n"
      "declare float @acosf(float)\n"
      "declare double @acosh(double)\n"
      "declare float @acoshf(float)\n"
      "declare x86_fp80 @acoshl(x86_fp80)\n"
      "declare x86_fp80 @acosl(x86_fp80)\n"
      "declare i8* @aligned_alloc(i64, i64)\n"
      "declare double @asin(double)\n"
      "declare float @asinf(float)\n"
      "declare double @asinh(double)\n"
      "declare float @asinhf(float)\n"
      "declare x86_fp80 @asinhl(x86_fp80)\n"
      "declare x86_fp80 @asinl(x86_fp80)\n"
      "declare double @atan(double)\n"
      "declare double @atan2(double, double)\n"
      "declare float @atan2f(float, float)\n"
      "declare x86_fp80 @atan2l(x86_fp80, x86_fp80)\n"
      "declare float @atanf(float)\n"
      "declare double @atanh(double)\n"
      "declare float @atanhf(float)\n"
      "declare x86_fp80 @atanhl(x86_fp80)\n"
      "declare x86_fp80 @atanl(x86_fp80)\n"
#if INTEL_CUSTOMIZATION
      "declare i32 @atexit(i8 *)\n"
#endif // INTEL_CUSTOMIZATION
      "declare double @atof(i8*)\n"
      "declare i32 @atoi(i8*)\n"
      "declare i64 @atol(i8*)\n"
      "declare i64 @atoll(i8*)\n"
      "declare i32 @bcmp(i8*, i8*, i64)\n"
      "declare void @bcopy(i8*, i8*, i64)\n"
      "declare void @bzero(i8*, i64)\n"
      "declare i8* @calloc(i64, i64)\n"
      "declare double @cbrt(double)\n"
      "declare float @cbrtf(float)\n"
      "declare x86_fp80 @cbrtl(x86_fp80)\n"
      "declare double @ceil(double)\n"
      "declare float @ceilf(float)\n"
      "declare x86_fp80 @ceill(x86_fp80)\n"
      "declare i32 @chown(i8*, i32, i32)\n"
      "declare void @clearerr(%struct*)\n"
      "declare double @copysign(double, double)\n"
      "declare float @copysignf(float, float)\n"
      "declare x86_fp80 @copysignl(x86_fp80, x86_fp80)\n"
      "declare double @cabs([2 x double])\n"
      "declare float @cabsf([2 x float])\n"
      "declare x86_fp80 @cabsl([2 x x86_fp80])\n"
      "declare [2 x double] @cexp(double, double)\n"
      "declare double @cos(double)\n"
#if INTEL_CUSTOMIZATION
      "declare double @cosd(double)\n"
      "declare float @cosdf(float)\n"
#endif // INTEL_CUSTOMIZATION
      "declare float @cosf(float)\n"
      "declare double @cosh(double)\n"
      "declare float @coshf(float)\n"
      "declare x86_fp80 @coshl(x86_fp80)\n"
      "declare x86_fp80 @cosl(x86_fp80)\n"
#if INTEL_CUSTOMIZATION
      "declare double @cospi(double)\n"
      "declare float @cospif(float)\n"
      "declare { double, double } @cpow(double, double, double, double)\n"
      "declare <2 x float> @cpowf(<2 x float>, <2 x float>)\n"
      "declare { double, double } @csqrt(double, double)\n"
      "declare <2 x float> @csqrtf(<2 x float>)\n"
#endif // INTEL_CUSTOMIZATION
      "declare i8* @ctermid(i8*)\n"
      "declare double @exp(double)\n"
      "declare double @exp2(double)\n"
      "declare float @exp2f(float)\n"
      "declare x86_fp80 @exp2l(x86_fp80)\n"
      "declare float @expf(float)\n"
      "declare x86_fp80 @expl(x86_fp80)\n"
      "declare double @expm1(double)\n"
      "declare float @expm1f(float)\n"
      "declare x86_fp80 @expm1l(x86_fp80)\n"
      "declare double @fabs(double)\n"
      "declare float @fabsf(float)\n"
      "declare x86_fp80 @fabsl(x86_fp80)\n"
      "declare i32 @fclose(%struct*)\n"
      "declare i32 @feof(%struct*)\n"
      "declare i32 @ferror(%struct*)\n"
      "declare i32 @fflush(%struct*)\n"
      "declare i32 @ffs(i32)\n"
      "declare i32 @ffsl(i64)\n"
      "declare i32 @ffsll(i64)\n"
      "declare i32 @fgetc(%struct*)\n"
      "declare i32 @fgetc_unlocked(%struct*)\n"
      "declare i32 @fgetpos(%struct*, i64*)\n"
      "declare i8* @fgets(i8*, i32, %struct*)\n"
      "declare i8* @fgets_unlocked(i8*, i32, %struct*)\n"
      "declare i32 @fileno(%struct*)\n"
      "declare void @flockfile(%struct*)\n"
      "declare double @floor(double)\n"
      "declare float @floorf(float)\n"
      "declare x86_fp80 @floorl(x86_fp80)\n"
      "declare i32 @fls(i32)\n"
      "declare i32 @flsl(i64)\n"
      "declare i32 @flsll(i64)\n"
      "declare double @fmax(double, double)\n"
      "declare float @fmaxf(float, float)\n"
      "declare x86_fp80 @fmaxl(x86_fp80, x86_fp80)\n"
      "declare double @fmin(double, double)\n"
      "declare float @fminf(float, float)\n"
      "declare x86_fp80 @fminl(x86_fp80, x86_fp80)\n"
      "declare double @fmod(double, double)\n"
      "declare float @fmodf(float, float)\n"
      "declare x86_fp80 @fmodl(x86_fp80, x86_fp80)\n"
      "declare i32 @fprintf(%struct*, i8*, ...)\n"
      "declare i32 @fputc(i32, %struct*)\n"
      "declare i32 @fputc_unlocked(i32, %struct*)\n"
      "declare i64 @fread(i8*, i64, i64, %struct*)\n"
      "declare i64 @fread_unlocked(i8*, i64, i64, %struct*)\n"
      "declare void @free(i8*)\n"
      "declare double @frexp(double, i32*)\n"
      "declare float @frexpf(float, i32*)\n"
      "declare x86_fp80 @frexpl(x86_fp80, i32*)\n"
      "declare i32 @fscanf(%struct*, i8*, ...)\n"
      "declare i32 @fseek(%struct*, i64, i32)\n"
      "declare i32 @fseeko(%struct*, i64, i32)\n"
      "declare i32 @fsetpos(%struct*, i64*)\n"
      "declare i32 @fstatvfs(i32, %struct*)\n"
      "declare i64 @ftell(%struct*)\n"
      "declare i64 @ftello(%struct*)\n"
      "declare i32 @ftrylockfile(%struct*)\n"
      "declare void @funlockfile(%struct*)\n"
      "declare i32 @getc(%struct*)\n"
      "declare i32 @getc_unlocked(%struct*)\n"
      "declare i32 @getchar()\n"
      "declare i32 @getchar_unlocked()\n"
      "declare i8* @getenv(i8*)\n"
      "declare i32 @getitimer(i32, %struct*)\n"
      "declare i32 @getlogin_r(i8*, i64)\n"
      "declare %struct* @getpwnam(i8*)\n"
      "declare i8* @gets(i8*)\n"
      "declare i32 @gettimeofday(%struct*, i8*)\n"
      "declare i32 @_Z7isasciii(i32)\n"
      "declare i32 @_Z7isdigiti(i32)\n"
      "declare i64 @labs(i64)\n"
      "declare double @ldexp(double, i32)\n"
      "declare float @ldexpf(float, i32)\n"
      "declare x86_fp80 @ldexpl(x86_fp80, i32)\n"
      "declare i64 @llabs(i64)\n"
      "declare double @log(double)\n"
      "declare double @log10(double)\n"
      "declare float @log10f(float)\n"
      "declare x86_fp80 @log10l(x86_fp80)\n"
      "declare double @log1p(double)\n"
      "declare float @log1pf(float)\n"
      "declare x86_fp80 @log1pl(x86_fp80)\n"
      "declare double @log2(double)\n"
      "declare float @log2f(float)\n"
      "declare x86_fp80 @log2l(x86_fp80)\n"
      "declare double @logb(double)\n"
      "declare float @logbf(float)\n"
      "declare x86_fp80 @logbl(x86_fp80)\n"
      "declare float @logf(float)\n"
      "declare x86_fp80 @logl(x86_fp80)\n"
      "declare i8* @malloc(i64)\n"
      "declare i8* @memccpy(i8*, i8*, i32, i64)\n"
      "declare i8* @memchr(i8*, i32, i64)\n"
      "declare i32 @memcmp(i8*, i8*, i64)\n"
      "declare i8* @memcpy(i8*, i8*, i64)\n"
      "declare i8* @memmove(i8*, i8*, i64)\n"
      "declare i8* @memset(i8*, i32, i64)\n"
      "declare void @memset_pattern16(i8*, i8*, i64)\n"
      "declare void @memset_pattern4(i8*, i8*, i64)\n"
      "declare void @memset_pattern8(i8*, i8*, i64)\n"
      "declare i32 @mkdir(i8*, i16)\n"
      "declare double @modf(double, double*)\n"
      "declare float @modff(float, float*)\n"
      "declare x86_fp80 @modfl(x86_fp80, x86_fp80*)\n"
      "declare double @nearbyint(double)\n"
      "declare float @nearbyintf(float)\n"
      "declare x86_fp80 @nearbyintl(x86_fp80)\n"
      "declare i32 @pclose(%struct*)\n"
      "declare void @perror(i8*)\n"
      "declare i32 @posix_memalign(i8**, i64, i64)\n"
      "declare double @pow(double, double)\n"
      "declare float @powf(float, float)\n"
      "declare x86_fp80 @powl(x86_fp80, x86_fp80)\n"
      "declare i32 @printf(i8*, ...)\n"
      "declare i32 @putc(i32, %struct*)\n"
      "declare i32 @putc_unlocked(i32, %struct*)\n"
      "declare i32 @putchar(i32)\n"
      "declare i32 @putchar_unlocked(i32)\n"
      "declare i32 @puts(i8*)\n"
      "declare void @qsort(i8*, i64, i64, i32 (i8*, i8*)*)\n"
      "declare i64 @readlink(i8*, i8*, i64)\n"
      "declare i8* @realloc(i8*, i64)\n"
      "declare i8* @reallocf(i8*, i64)\n"
      "declare double @remainder(double, double)\n"
      "declare float @remainderf(float, float)\n"
      "declare x86_fp80 @remainderl(x86_fp80, x86_fp80)\n"
      "declare i32 @remove(i8*)\n"
      "declare i32 @rename(i8*, i8*)\n"
      "declare void @rewind(%struct*)\n"
      "declare double @rint(double)\n"
      "declare float @rintf(float)\n"
      "declare x86_fp80 @rintl(x86_fp80)\n"
      "declare i32 @rmdir(i8*)\n"
      "declare double @round(double)\n"
      "declare float @roundf(float)\n"
      "declare x86_fp80 @roundl(x86_fp80)\n"
      "declare double @roundeven(double)\n"
      "declare float @roundevenf(float)\n"
      "declare x86_fp80 @roundevenl(x86_fp80)\n"
      "declare i32 @scanf(i8*, ...)\n"
      "declare void @setbuf(%struct*, i8*)\n"
      "declare i32 @setitimer(i32, %struct*, %struct*)\n"
      "declare i32 @setvbuf(%struct*, i8*, i32, i64)\n"
      "declare double @sin(double)\n"
#if INTEL_CUSTOMIZATION
      "declare double @sind(double)\n"
      "declare float @sindf(float)\n"
#endif // INTEL_CUSTOMIZATION
      "declare float @sinf(float)\n"
      "declare double @sinh(double)\n"
      "declare float @sinhf(float)\n"
      "declare x86_fp80 @sinhl(x86_fp80)\n"
      "declare x86_fp80 @sinl(x86_fp80)\n"
#if INTEL_CUSTOMIZATION
      "declare double @sinpi(double)\n"
      "declare float @sinpif(float)\n"
#endif // INTEL_CUSTOMIZATION
      "declare i32 @snprintf(i8*, i64, i8*, ...)\n"
      "declare i32 @sprintf(i8*, i8*, ...)\n"
#if INTEL_CUSTOMIZATION
      "declare i32 @sprintf_s(i8*, i64, i8*, ...)\n"
#endif // INTEL_CUSTOMIZATION
      "declare double @sqrt(double)\n"
      "declare float @sqrtf(float)\n"
      "declare x86_fp80 @sqrtl(x86_fp80)\n"
      "declare i32 @sscanf(i8*, i8*, ...)\n"
      "declare i32 @statvfs(i8*, %struct*)\n"
      "declare i8* @stpcpy(i8*, i8*)\n"
      "declare i8* @stpncpy(i8*, i8*, i64)\n"
      "declare i32 @strcasecmp(i8*, i8*)\n"
      "declare i8* @strcat(i8*, i8*)\n"
      "declare i8* @strchr(i8*, i32)\n"
      "declare i32 @strcmp(i8*, i8*)\n"
      "declare i32 @strcoll(i8*, i8*)\n"
      "declare i8* @strcpy(i8*, i8*)\n"
      "declare i64 @strcspn(i8*, i8*)\n"
      "declare i8* @strdup(i8*)\n"
      "declare i64 @strlen(i8*)\n"
      "declare i32 @strncasecmp(i8*, i8*, i64)\n"
      "declare i8* @strncat(i8*, i8*, i64)\n"
      "declare i32 @strncmp(i8*, i8*, i64)\n"
      "declare i8* @strncpy(i8*, i8*, i64)\n"
      "declare i8* @strndup(i8*, i64)\n"
      "declare i64 @strnlen(i8*, i64)\n"
      "declare i8* @strpbrk(i8*, i8*)\n"
      "declare i8* @strrchr(i8*, i32)\n"
      "declare i64 @strspn(i8*, i8*)\n"
      "declare i8* @strstr(i8*, i8*)\n"
      "declare i8* @strtok(i8*, i8*)\n"
      "declare i8* @strtok_r(i8*, i8*, i8**)\n"
      "declare i64 @strtol(i8*, i8**, i32)\n"
      "declare i64 @strlcat(i8*, i8**, i64)\n"
      "declare i64 @strlcpy(i8*, i8**, i64)\n"
      "declare x86_fp80 @strtold(i8*, i8**)\n"
      "declare i64 @strtoll(i8*, i8**, i32)\n"
      "declare i64 @strtoul(i8*, i8**, i32)\n"
      "declare i64 @strtoull(i8*, i8**, i32)\n"
      "declare i64 @strxfrm(i8*, i8*, i64)\n"
      "declare double @tan(double)\n"
#if INTEL_CUSTOMIZATION
      "declare double @tand(double)\n"
      "declare float @tandf(float)\n"
#endif // INTEL_CUSTOMIZATION
      "declare float @tanf(float)\n"
      "declare double @tanh(double)\n"
      "declare float @tanhf(float)\n"
      "declare x86_fp80 @tanhl(x86_fp80)\n"
      "declare x86_fp80 @tanl(x86_fp80)\n"
      "declare i64 @times(%struct*)\n"
      "declare %struct* @tmpfile()\n"
      "declare i32 @_Z7toasciii(i32)\n"
      "declare double @trunc(double)\n"
      "declare float @truncf(float)\n"
      "declare x86_fp80 @truncl(x86_fp80)\n"
      "declare i32 @uname(%struct*)\n"
      "declare i32 @ungetc(i32, %struct*)\n"
      "declare i32 @unlink(i8*)\n"
      "declare i32 @utime(i8*, %struct*)\n"
      "declare i32 @utimes(i8*, %struct*)\n"
      "declare i8* @valloc(i64)\n"
      "declare i32 @vfprintf(%struct*, i8*, %struct*)\n"
      "declare i32 @vfscanf(%struct*, i8*, %struct*)\n"
      "declare i32 @vprintf(i8*, %struct*)\n"
      "declare i32 @vscanf(i8*, %struct*)\n"
      "declare i32 @vsnprintf(i8*, i64, i8*, %struct*)\n"
      "declare i32 @vsprintf(i8*, i8*, %struct*)\n"
      "declare i32 @vsscanf(i8*, i8*, %struct*)\n"
      "declare i64 @wcslen(i32*)\n"
      "declare i32 @fork()\n"
      "declare i32 @execl(i8*, i8*, ...)\n"
      "declare i32 @execle(i8*, i8*, ...)\n"
      "declare i32 @execlp(i8*, i8*, ...)\n"
      "declare i32 @execv(i8*, i8**)\n"
      "declare i32 @execvP(i8*, i8*, i8**)\n"
      "declare i32 @execve(i8*, i8**, i8**)\n"
      "declare i32 @execvp(i8*, i8**)\n"
      "declare i32 @execvpe(i8*, i8**, i8**)\n"

      // These functions were also extracted from the OS X headers, but they are
      // available with a special name on darwin.
      // This test uses the default TLI name instead.
      "declare i32 @chmod(i8*, i16)\n"
      "declare i32 @closedir(%struct*)\n"
      "declare %struct* @fdopen(i32, i8*)\n"
      "declare %struct* @fopen(i8*, i8*)\n"
      "declare i32 @fputs(i8*, %struct*)\n"
      "declare i32 @fputs_unlocked(i8*, %struct*)\n"
      "declare i32 @fstat(i32, %struct*)\n"
      "declare i64 @fwrite(i8*, i64, i64, %struct*)\n"
      "declare i64 @fwrite_unlocked(i8*, i64, i64, %struct*)\n"
      "declare i32 @lchown(i8*, i32, i32)\n"
      "declare i32 @lstat(i8*, %struct*)\n"
      "declare i64 @mktime(%struct*)\n"
      "declare i32 @open(i8*, i32, ...)\n"
      "declare %struct* @opendir(i8*)\n"
      "declare %struct* @popen(i8*, i8*)\n"
      "declare i64 @pread(i32, i8*, i64, i64)\n"
      "declare i64 @pwrite(i32, i8*, i64, i64)\n"
#if INTEL_CUSTOMIZATION
      "declare i32 @re_compile_fastmap(%struct*)\n"
      "declare i32 @re_search_2(%struct*, i8*, i32, i8*, i32, i32, i32, %struct*, i32)\n"
#ifdef _WIN32
      // NOTE: The libfunc read is an alias to _read in Windows (Libfunc_under_read)
      "declare i32 @read(i32, i8*, i32)\n"
#else
      "declare i64 @read(i32, i8*, i64)\n"
#endif // _WIN32
#endif // INTEL_CUSTOMIZATION
      "declare i8* @realpath(i8*, i8*)\n"
      "declare i32 @stat(i8*, %struct*)\n"
      "declare double @strtod(i8*, i8**)\n"
      "declare float @strtof(i8*, i8**)\n"
      "declare i32 @system(i8*)\n"
      "declare i32 @unsetenv(i8*)\n"
      "declare i64 @write(i32, i8*, i64)\n"

      // These functions are available on Linux but not Darwin; they only differ
      // from their non-64 counterparts in the struct type.
      // Use the same prototype as the non-64 variant.
      "declare %struct* @fopen64(i8*, i8*)\n"
      "declare i32 @fstat64(i32, %struct*)\n"
      "declare i32 @fstatvfs64(i32, %struct*)\n"
      "declare i32 @lstat64(i8*, %struct*)\n"
      "declare i32 @open64(i8*, i32, ...)\n"
      "declare i32 @stat64(i8*, %struct*)\n"
      "declare i32 @statvfs64(i8*, %struct*)\n"
      "declare %struct* @tmpfile64()\n"

      // These functions are also -64 variants, but do differ in the type of the
      // off_t (vs off64_t) parameter.  The non-64 variants declared above used
      // a 64-bit off_t, so, in practice, they are also equivalent.
      "declare i32 @fseeko64(%struct*, i64, i32)\n"
      "declare i64 @ftello64(%struct*)\n"

      "declare void @_ZdaPv(i8*)\n"
      "declare void @_ZdaPvRKSt9nothrow_t(i8*, %struct*)\n"
      "declare void @_ZdaPvSt11align_val_t(i8*, i64)\n"
      "declare void @_ZdaPvSt11align_val_tRKSt9nothrow_t(i8*, i64, %struct*)\n"
      "declare void @_ZdaPvj(i8*, i32)\n"
      "declare void @_ZdaPvjSt11align_val_t(i8*, i32, i32)\n"
      "declare void @_ZdaPvm(i8*, i64)\n"
      "declare void @_ZdaPvmSt11align_val_t(i8*, i64, i64)\n"
      "declare void @_ZdlPv(i8*)\n"
      "declare void @_ZdlPvRKSt9nothrow_t(i8*, %struct*)\n"
      "declare void @_ZdlPvSt11align_val_t(i8*, i64)\n"
      "declare void @_ZdlPvSt11align_val_tRKSt9nothrow_t(i8*, i64, %struct*)\n"
      "declare void @_ZdlPvj(i8*, i32)\n"
      "declare void @_ZdlPvjSt11align_val_t(i8*, i32, i32)\n"
      "declare void @_ZdlPvm(i8*, i64)\n"
      "declare void @_ZdlPvmSt11align_val_t(i8*, i64, i64)\n"
      "declare i8* @_Znaj(i32)\n"
      "declare i8* @_ZnajRKSt9nothrow_t(i32, %struct*)\n"
      "declare i8* @_ZnajSt11align_val_t(i32, i32)\n"
      "declare i8* @_ZnajSt11align_val_tRKSt9nothrow_t(i32, i32, %struct*)\n"
      "declare i8* @_Znam(i64)\n"
      "declare i8* @_ZnamRKSt9nothrow_t(i64, %struct*)\n"
      "declare i8* @_ZnamSt11align_val_t(i64, i64)\n"
      "declare i8* @_ZnamSt11align_val_tRKSt9nothrow_t(i64, i64, %struct*)\n"
      "declare i8* @_Znwj(i32)\n"
      "declare i8* @_ZnwjRKSt9nothrow_t(i32, %struct*)\n"
      "declare i8* @_ZnwjSt11align_val_t(i32, i32)\n"
      "declare i8* @_ZnwjSt11align_val_tRKSt9nothrow_t(i32, i32, %struct*)\n"
      "declare i8* @_Znwm(i64)\n"
      "declare i8* @_ZnwmRKSt9nothrow_t(i64, %struct*)\n"
      "declare i8* @_ZnwmSt11align_val_t(i64, i64)\n"
      "declare i8* @_ZnwmSt11align_val_tRKSt9nothrow_t(i64, i64, %struct*)\n"

      "declare void @\"??3@YAXPEAX@Z\"(i8*)\n"
      "declare void @\"??3@YAXPEAXAEBUnothrow_t@std@@@Z\"(i8*, %struct*)\n"
      "declare void @\"??3@YAXPEAX_K@Z\"(i8*, i64)\n"
      "declare void @\"??_V@YAXPEAX@Z\"(i8*)\n"
      "declare void @\"??_V@YAXPEAXAEBUnothrow_t@std@@@Z\"(i8*, %struct*)\n"
      "declare void @\"??_V@YAXPEAX_K@Z\"(i8*, i64)\n"
#if INTEL_CUSTOMIZATION
      "declare %struct* @\"??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@QEBD@Z\"(%struct*, i8*)\n"
      "declare %struct* @\"??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@D@Z\"(%struct*, i8)\n"
      "declare %struct* @\"??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z\"(%struct*)\n"
      "declare %struct* @\"??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z\"(%struct*)\n"
      "declare %struct* @\"??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z\"(%struct*)\n"
      "declare %struct* @\"??$use_facet@V?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z\"(%struct*)\n"
      "declare %struct* @\"??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z\"(%struct*)\n"
      "declare i32 @\"??$_Immortalize_impl@V_Iostream_error_category@std@@@std@@YAHPEAX0PEAPEAX@Z\"(i8*, i8*, i8*)\n"
      "declare i8* @\"??_G?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z\"(%struct*, i32)\n"
      "declare i8* @\"??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z\"(%struct*, i32)\n"
      "declare i8* @\"??_G?$numpunct@D@std@@MEAAPEAXI@Z\"(%struct*, i32)\n"
      "declare i8* @\"??_Gbad_alloc@std@@UEAAPEAXI@Z\"(%struct*, i32)\n"
      "declare i8* @\"??_Gexception@std@@UEAAPEAXI@Z\"(%struct*, i32)\n"
      "declare i8* @\"??_Gios_base@std@@UEAAPEAXI@Z\"(%struct*, i32)\n"
      "declare i8* @\"??_Gruntime_error@std@@UEAAPEAXI@Z\"(%struct*, i32)\n"
      "declare i1 @\"?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ\"(%struct*)\n"
      "declare i32 @\"?_Execute_once@std@@YAHAEAUonce_flag@1@P6AHPEAX1PEAPEAX@Z1@Z\"(%struct*, i8*, i8*)\n"
      "declare void @\"?_Facet_Register@std@@YAXPEAV_Facet_base@1@@Z\"(i8*)\n"
      "declare %struct* @\"?_Fiopen@std@@YAPEAU_iobuf@@PEBDHH@Z\"(i8*, i32, i32)\n"
      "declare i32 @\"?_Getffld@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAHPEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@1AEAVios_base@2@PEAH@Z\"(%struct*, i8*, %struct*, %struct*, %struct*, i32*)"
      "declare i8* @\"?_Getgloballocale@locale@std@@CAPEAV_Locimp@12@XZ\"()\n"
      "declare i32 @\"?_Getifld@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAHPEADAEAV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@1HAEBVlocale@2@@Z\"(%struct*, i8*, %struct*, %struct*, i32, %struct*)\n"
      "declare %struct* @\"??0_Locinfo@std@@QEAA@PEBD@Z\"(%struct*, i8*)\n"
      "declare i8* @\"??0_Lockit@std@@QEAA@H@Z\"(i8*, i32)\n"
      "declare %struct* @\"??0_System_error@std@@QEAA@AEBV01@@Z\"(%struct*, %struct*)\n"
      "declare %struct* @\"??0bad_alloc@std@@QEAA@AEBV01@@Z\"(%struct*, %struct*)\n"
      "declare %struct* @\"??0exception@std@@QEAA@AEBV01@@Z\"(%struct*, %struct*)\n"
      "declare %struct* @\"??0failure@ios_base@std@@QEAA@PEBDAEBVerror_code@2@@Z\"(%struct*, i8*, %struct*)\n"
      "declare %struct* @\"??0runtime_error@std@@QEAA@AEBV01@@Z\"(%struct*, %struct*)\n"
      "declare %struct* @\"??0runtime_error@std@@QEAA@PEBD@Z\"(%struct*, i8*)\n"
      "declare %struct* @\"??0failure@ios_base@std@@QEAA@AEBV012@@Z\"(%struct*, %struct*)\n"
      "declare %struct* @\"??0system_error@std@@QEAA@AEBV01@@Z\"(%struct*, %struct*)\n"
      "declare void @\"??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ\"(%struct*)\n"
      "declare void @\"??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ\"(%struct*)\n"
      "declare void @\"??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ\"(%struct*)\n"
      "declare void @\"??1?$_Yarn@D@std@@QEAA@XZ\"(i8*)\n"
      "declare void @\"??1?$_Yarn@_W@std@@QEAA@XZ\"(%struct*)\n"
      "declare void @\"??1_Locinfo@std@@QEAA@XZ\"(%struct*)\n"
      "declare void @\"??1_Lockit@std@@QEAA@XZ\"(i8*)\n"
      "declare void @\"??1exception@std@@UEAA@XZ\"(%struct*)\n"
      "declare void @\"?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z\"(%struct*, %struct*, %struct*, %struct*, i8, i8*, i64)\n"
      "declare void @\"?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z\"(%struct*, %struct*, %struct*, %struct*, i8, i8*, i64)\n"
      "declare void @\"?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ\"()\n"
      "declare i8* @\"??_E?$basic_istream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@EAAPEAXI@Z\"(%struct*, i32)\n"
      "declare i8* @\"??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@EAAPEAXI@Z\"(%struct*, i32)\n"
      "declare i8* @\"??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z\"(%struct*, i32)\n"
      "declare i8* @\"??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z\"(%struct*, i32)\n"
      "declare i8* @\"??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z\"(%struct*, i32)\n"
      "declare i8* @\"??_G?$codecvt@DDU_Mbstatet@@@std@@MEAAPEAXI@Z\"(%struct*, i32)\n"
      "declare i8* @\"??_G?$ctype@D@std@@MEAAPEAXI@Z\"(%struct*, i32)\n"
      "declare i8* @\"??_G_Iostream_error_category@std@@UEAAPEAXI@Z\"(%struct*, i32)\n"
      "declare i8* @\"??_G_System_error@std@@UEAAPEAXI@Z\"(%struct*, i32)\n"
      "declare i8* @\"??_Gfailure@ios_base@std@@UEAAPEAXI@Z\"(%struct*, i32)\n"
      "declare i8* @\"??_Gsystem_error@std@@UEAAPEAXI@Z\"(%struct*, i32)\n"
      "declare %struct* @\"?_Decref@facet@locale@std@@UEAAPEAV_Facet_base@3@XZ\"(%struct*)\n"
      "declare void @\"?_Incref@facet@locale@std@@UEAAXXZ\"(%struct*)\n"
      "declare void @\"?_Ios_base_dtor@ios_base@std@@CAXPEAV12@@Z\"(%struct*)\n"
      "declare %struct* @\"?_Init@locale@std@@CAPEAV_Locimp@12@_N@Z\"(i1)\n"
      "declare void @\"?_Xlength_error@std@@YAXPEBD@Z\"(i8*)\n"
      "declare i8* @\"?_Syserror_map@std@@YAPEBDH@Z\"(i32)\n"
      "declare void @\"?_Xbad_alloc@std@@YAXXZ\"()\n"
      "declare void @\"?_Xout_of_range@std@@YAXPEBD@Z\"(i8*)\n"
      "declare void @\"?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ\"()\n"
      "declare void @\"?_Locinfo_ctor@_Locinfo@std@@SAXPEAV12@PEBD@Z\"(i8*, i8*)\n"
      "declare void @\"?_Locinfo_dtor@_Locinfo@std@@SAXPEAV12@@Z\"(i8*)\n"
      "declare void @\"?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ\"(%struct*)\n"
      "declare void @\"?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAXXZ\"(%struct*)\n"
      "declare void @\"?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ\"(%struct*)\n"
      "declare void @\"?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAXXZ\"(%struct*)\n"
      "declare %struct* @\"?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z\"(%struct*, i8*, i64)\n"
      "declare %struct* @\"?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z\"(%struct*, i64, i8)\n"
      "declare %struct* @\"?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z\"(%struct*, i8*)\n"
      "declare %struct* @\"?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z\"(%struct*, i8*, i64)\n"
      "declare void @\"?default_error_condition@error_category@std@@UEBA?AVerror_condition@2@H@Z\"(%struct*, %struct*, i32)\n"
      "declare i1 @\"?do_always_noconv@?$codecvt@DDU_Mbstatet@@@std@@MEBA_NXZ\"(%struct*)\n"
      "declare i8 @\"?do_decimal_point@?$numpunct@D@std@@MEBADXZ\"(%struct*)\n"
      "declare i32 @\"?do_encoding@codecvt_base@std@@MEBAHXZ\"(%struct*)\n"
      "declare void @\"?do_falsename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ\"(%struct*, %struct*)\n"
      "declare void @\"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAG@Z\"(%struct*, %struct*, %struct*, %struct*, %struct*, i32*, i16*)\n"
      "declare void @\"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAI@Z\"(%struct*, %struct*, %struct*, %struct*, %struct*, i32*, i32*)\n"
      "declare void @\"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAJ@Z\"(%struct*, %struct*, %struct*, %struct*, %struct*, i32*, i32*)\n"
      "declare void @\"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAK@Z\"(%struct*, %struct*, %struct*, %struct*, %struct*, i32*, i32*)\n"
      "declare void @\"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAM@Z\"(%struct*, %struct*, %struct*, %struct*, %struct*, i32*, float*)\n"
      "declare void @\"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAN@Z\"(%struct*, %struct*, %struct*, %struct*, %struct*, i32*, double*)\n"
      "declare void @\"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAO@Z\"(%struct*, %struct*, %struct*, %struct*, %struct*, i32*, double*)\n"
      "declare void @\"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEAPEAX@Z\"(%struct*, %struct*, %struct*, %struct*, %struct*, i32*, i8*)\n"
      "declare void @\"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_J@Z\"(%struct*, %struct*, %struct*, %struct*, %struct*, i32*, i64*)\n"
      "declare void @\"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_K@Z\"(%struct*, %struct*, %struct*, %struct*, %struct*, i32*, i64*)\n"
      "declare void @\"?do_get@?$num_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$istreambuf_iterator@DU?$char_traits@D@std@@@2@V32@0AEAVios_base@2@AEAHAEA_N@Z\"(%struct*, %struct*, %struct*, %struct*, %struct*, i32*, i8*)\n"
      "declare void @\"?do_grouping@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ\"(%struct*, %struct*)\n"
      "declare i32 @\"?do_in@?$codecvt@DDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEAD3AEAPEAD@Z\"(%struct*, %struct*, i8*, i8*, i8*, i8*, i8*, i8*)\n"
      "declare i8 @\"?do_thousands_sep@?$numpunct@D@std@@MEBADXZ\"(%struct*)\n"
      "declare void @\"?do_truename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ\"(%struct*, %struct*)\n"
      "declare i32 @\"?do_length@?$codecvt@DDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1_K@Z\"(%struct*, %struct*, i8*, i8*, i64)\n"
      "declare i32 @\"?do_max_length@codecvt_base@std@@MEBAHXZ\"(%struct*)\n"
      "declare i8 @\"?do_narrow@?$ctype@D@std@@MEBADDD@Z\"(%struct*, i8, i8)\n"
      "declare i8* @\"?do_narrow@?$ctype@D@std@@MEBAPEBDPEBD0DPEAD@Z\"(%struct*, i8*, i8*, i8, i8*)\n"
      "declare i32 @\"?do_out@?$codecvt@DDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEAD3AEAPEAD@Z\"(%struct*, %struct*, i8*, i8*, i8*, i8*, i8*, i8*)\n"
      "declare void @\"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_J@Z\"(%struct*, %struct*, %struct*, %struct*, i8, i64)\n"
      "declare void @\"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_K@Z\"(%struct*, %struct*, %struct*, %struct*, i8, i64)\n"
      "declare void @\"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z\"(%struct*, %struct*, %struct*, %struct*, i8, i1)\n"
      "declare void @\"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DJ@Z\"(%struct*, %struct*, %struct*, %struct*, i8, i32)\n"
      "declare void @\"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DK@Z\"(%struct*, %struct*, %struct*, %struct*, i8, i32)\n"
      "declare void @\"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z\"(%struct*, %struct*, %struct*, %struct*, i8, double)\n"
      "declare void @\"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z\"(%struct*, %struct*, %struct*, %struct*, i8, double)\n"
      "declare void @\"?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBX@Z\"(%struct*, %struct*, %struct*, %struct*, i8, i8*)\n"
      "declare i8* @\"?do_tolower@?$ctype@D@std@@MEBADD@Z\"(%struct*, i8)\n"
      "declare i8* @\"?do_tolower@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z\"(%struct*, i8*, i8*)\n"
      "declare i8* @\"?do_toupper@?$ctype@D@std@@MEBADD@Z\"(%struct*, i8)\n"
      "declare i8* @\"?do_toupper@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z\"(%struct*, i8*, i8*)\n"
      "declare i32 @\"?do_unshift@?$codecvt@DDU_Mbstatet@@@std@@MEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z\"(%struct*, %struct*, i8*, i8*, i8*)\n"
      "declare i8 @\"?do_widen@?$ctype@D@std@@MEBADD@Z\"(%struct*, i8)\n"
      "declare i8* @\"?do_widen@?$ctype@D@std@@MEBAPEBDPEBD0PEAD@Z\"(%struct*, i8*, i8*, i8*)\n"
      "declare i1 @\"?equivalent@error_category@std@@UEBA_NHAEBVerror_condition@2@@Z\"(%struct*, i32, %struct*)\n"
      "declare i1 @\"?equivalent@error_category@std@@UEBA_NAEBVerror_code@2@H@Z\"(%struct*, %struct*, i32)\n"
      "declare void @\"?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z\"(%struct*, i32)\n"
      "declare void @\"?message@_Generic_error_category@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z\"(%struct*, %struct*, i32)\n"
      "declare void @\"?message@_Iostream_error_category@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z\"(%struct*, %struct*, i32)\n"
      "declare i8* @\"?name@_Iostream_error_category@std@@UEBAPEBDXZ\"(%struct*)\n"
      "declare void @\"?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z\"(%struct*, %struct*)\n"
      "declare void @\"?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z\"(%struct*, %struct*)\n"
      "declare %struct* @\"?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0D@Z\"(%struct*, i64, i64, i8)\n"
      "declare i32 @\"?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z\"(%struct*, i32)\n"
      "declare i32 @\"?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z\"(%struct*, i32)\n"
      "declare i32 @\"?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z\"(%struct*, i32)\n"
      "declare i32 @\"?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z\"(%struct*, i32)\n"
      "declare void @\"?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z\"(%struct*, i8)\n"
      "declare void @\"?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_KD@Z\"(%struct*, i64, i8)\n"
      "declare void @\"?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z\"(%struct*, %struct*, i64, i32, i32)\n"
      "declare void @\"?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z\"(%struct*, %struct*, i64, i32, i32)\n"
      "declare void @\"?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z\"(%struct*, %struct*, %struct*, i32)\n"
      "declare void @\"?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z\"(%struct*, %struct*, %struct*, i32)\n"
      "declare %struct* @\"?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PEAD_J@Z\"(%struct*, i8*, i64)\n"
      "declare %struct* @\"?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAPEAV12@PEAD_J@Z\"(%struct*, i8*, i64)\n"
      "declare i64 @\"?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JXZ\"(%struct*)\n"
      "declare i32 @\"?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ\"(%struct*)\n"
      "declare i32 @\"?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ\"(%struct*)\n"
      "declare i32 @\"?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ\"(%struct*)\n"
      "declare i32 @\"?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ\"(%struct*)\n"
      "declare i1 @\"?uncaught_exception@std@@YA_NXZ\"()\n"
      "declare i32 @\"?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ\"(%struct*)\n"
      "declare i32 @\"?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ\"(%struct*)\n"
      "declare i8* @\"?what@exception@std@@UEBAPEBDXZ\"(%struct*)\n"
      "declare i64 @\"?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z\"(%struct*, i8*, i64)\n"
      "declare i64 @\"?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z\"(%struct*, i8*, i64)\n"
      "declare i64 @\"?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z\"(%struct*, i8*, i64)\n"
      "declare i64 @\"?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z\"(%struct*, i8*, i64)\n"
#endif // INTEL_CUSTOMIZATION
      "declare i8* @\"??2@YAPAXI@Z\"(i32)\n"
      "declare i8* @\"??2@YAPAXIABUnothrow_t@std@@@Z\"(i32, %struct*)\n"
      "declare i8* @\"??2@YAPEAX_K@Z\"(i64)\n"
      "declare i8* @\"??2@YAPEAX_KAEBUnothrow_t@std@@@Z\"(i64, %struct*)\n"
      "declare i8* @\"??_U@YAPAXI@Z\"(i32)\n"
      "declare i8* @\"??_U@YAPAXIABUnothrow_t@std@@@Z\"(i32, %struct*)\n"
      "declare i8* @\"??_U@YAPEAX_K@Z\"(i64)\n"
      "declare i8* @\"??_U@YAPEAX_KAEBUnothrow_t@std@@@Z\"(i64, %struct*)\n"

      "declare void @\"??3@YAXPAX@Z\"(i8*)\n"
      "declare void @\"??3@YAXPAXABUnothrow_t@std@@@Z\"(i8*, %struct*)\n"
      "declare void @\"??3@YAXPAXI@Z\"(i8*, i32)\n"
      "declare void @\"??_V@YAXPAX@Z\"(i8*)\n"
      "declare void @\"??_V@YAXPAXABUnothrow_t@std@@@Z\"(i8*, %struct*)\n"
      "declare void @\"??_V@YAXPAXI@Z\"(i8*, i32)\n"

      // These other functions were derived from the .def C declaration.
      "declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*)\n"
      "declare void @__cxa_guard_abort(%struct*)\n"
      "declare i32 @__cxa_guard_acquire(%struct*)\n"
      "declare void @__cxa_guard_release(%struct*)\n"

#if INTEL_CUSTOMIZATION
      "declare i8* @__dynamic_cast(i8*, i8*, i8*, i64)\n"
#endif // INTEL_CUSTOMIZATION

      "declare i32 @__nvvm_reflect(i8*)\n"

      "declare i8* @__memcpy_chk(i8*, i8*, i64, i64)\n"
      "declare i8* @__memmove_chk(i8*, i8*, i64, i64)\n"
      "declare i8* @__memset_chk(i8*, i32, i64, i64)\n"
      "declare i8* @__stpcpy_chk(i8*, i8*, i64)\n"
      "declare i8* @__stpncpy_chk(i8*, i8*, i64, i64)\n"
      "declare i8* @__strcpy_chk(i8*, i8*, i64)\n"
      "declare i8* @__strncpy_chk(i8*, i8*, i64, i64)\n"
      "declare i8* @__memccpy_chk(i8*, i8*, i32, i64)\n"
      "declare i8* @__mempcpy_chk(i8*, i8*, i64, i64)\n"
      "declare i32 @__snprintf_chk(i8*, i64, i32, i64, i8*, ...)\n"
      "declare i32 @__sprintf_chk(i8*, i32, i64, i8*, ...)\n"
      "declare i8* @__strcat_chk(i8*, i8*, i64)\n"
      "declare i64 @__strlcat_chk(i8*, i8*, i64, i64)\n"
      "declare i64 @__strlen_chk(i8*, i64)\n"
      "declare i8* @__strncat_chk(i8*, i8*, i64, i64)\n"
      "declare i64 @__strlcpy_chk(i8*, i8*, i64, i64)\n"
      "declare i32 @__vsnprintf_chk(i8*, i64, i32, i64, i8*, %struct*)\n"
      "declare i32 @__vsprintf_chk(i8*, i32, i64, i8*, %struct*)\n"

      "declare i8* @memalign(i64, i64)\n"
      "declare i8* @mempcpy(i8*, i8*, i64)\n"
      "declare i8* @memrchr(i8*, i32, i64)\n"

      "declare void @__atomic_load(i64, i8*, i8*, i32)\n"
      "declare void @__atomic_store(i64, i8*, i8*, i32)\n"

      // These are similar to the FILE* fgetc/fputc.
      "declare i32 @_IO_getc(%struct*)\n"
      "declare i32 @_IO_putc(i32, %struct*)\n"

      "declare i32 @__isoc99_scanf(i8*, ...)\n"
      "declare i32 @__isoc99_sscanf(i8*, i8*, ...)\n"
      "declare i8* @__strdup(i8*)\n"
      "declare i8* @__strndup(i8*, i64)\n"
      "declare i8* @__strtok_r(i8*, i8*, i8**)\n"

      "declare double @__sqrt_finite(double)\n"
      "declare float @__sqrtf_finite(float)\n"
      "declare x86_fp80 @__sqrtl_finite(x86_fp80)\n"
      "declare double @exp10(double)\n"
      "declare float @exp10f(float)\n"
      "declare x86_fp80 @exp10l(x86_fp80)\n"

#if INTEL_CUSTOMIZATION
      "declare i32 @__isoc99_fscanf(%struct*, i8*, ... )\n"
      "declare i32 @__xstat(i32, i8*, %struct*)\n"
      "declare i32 @__xstat64(i32, i8*, %struct*)\n"
      "declare i32 @___mb_cur_max_func()\n"
      "declare i32 @__CxxFrameHandler3(...)\n"
      "declare i8* @__RTDynamicCast(i8*, i32, i8*, i8*, i32)\n"
      "declare i8* @__RTtypeid(i8*)\n"
      "declare void @_CxxThrowException(i8*, i8*)\n"
      "declare void @exit(i32)\n"
      "declare void @sincos(double, double*, double*)\n"
      "declare void @sincosf(float, float*, float*)\n"
#endif // INTEL_CUSTOMIZATION

      // These printf variants have the same prototype as the non-'i' versions.
      "declare i32 @fiprintf(%struct*, i8*, ...)\n"
      "declare i32 @iprintf(i8*, ...)\n"
      "declare i32 @siprintf(i8*, i8*, ...)\n"

      // __small_printf variants have the same prototype as the non-'i'
      // versions.
      "declare i32 @__small_fprintf(%struct*, i8*, ...)\n"
      "declare i32 @__small_printf(i8*, ...)\n"
      "declare i32 @__small_sprintf(i8*, i8*, ...)\n"

      "declare i32 @htonl(i32)\n"
      "declare i16 @htons(i16)\n"
      "declare i32 @ntohl(i32)\n"
      "declare i16 @ntohs(i16)\n"

      "declare i32 @isascii(i32)\n"
      "declare i32 @isdigit(i32)\n"
      "declare i32 @toascii(i32)\n"

      // These functions were extracted from math-finite.h which provides
      // functions similar to those in math.h, but optimized for handling
      // finite values only.
      "declare double @__acos_finite(double)\n"
      "declare float @__acosf_finite(float)\n"
      "declare x86_fp80 @__acosl_finite(x86_fp80)\n"
      "declare double @__acosh_finite(double)\n"
      "declare float @__acoshf_finite(float)\n"
      "declare x86_fp80 @__acoshl_finite(x86_fp80)\n"
      "declare double @__asin_finite(double)\n"
      "declare float @__asinf_finite(float)\n"
      "declare x86_fp80 @__asinl_finite(x86_fp80)\n"
      "declare double @__atan2_finite(double, double)\n"
      "declare float @__atan2f_finite(float, float)\n"
      "declare x86_fp80 @__atan2l_finite(x86_fp80, x86_fp80)\n"
      "declare double @__atanh_finite(double)\n"
      "declare float @__atanhf_finite(float)\n"
      "declare x86_fp80 @__atanhl_finite(x86_fp80)\n"
      "declare double @__cosh_finite(double)\n"
      "declare float @__coshf_finite(float)\n"
      "declare x86_fp80 @__coshl_finite(x86_fp80)\n"
      "declare double @__exp10_finite(double)\n"
      "declare float @__exp10f_finite(float)\n"
      "declare x86_fp80 @__exp10l_finite(x86_fp80)\n"
      "declare double @__exp2_finite(double)\n"
      "declare float @__exp2f_finite(float)\n"
      "declare x86_fp80 @__exp2l_finite(x86_fp80)\n"
      "declare double @__exp_finite(double)\n"
      "declare float @__expf_finite(float)\n"
      "declare x86_fp80 @__expl_finite(x86_fp80)\n"
      "declare double @__log10_finite(double)\n"
      "declare float @__log10f_finite(float)\n"
      "declare x86_fp80 @__log10l_finite(x86_fp80)\n"
      "declare double @__log2_finite(double)\n"
      "declare float @__log2f_finite(float)\n"
      "declare x86_fp80 @__log2l_finite(x86_fp80)\n"
      "declare double @__log_finite(double)\n"
      "declare float @__logf_finite(float)\n"
      "declare x86_fp80 @__logl_finite(x86_fp80)\n"
      "declare double @__pow_finite(double, double)\n"
#if INTEL_CUSTOMIZATION
      "declare i32 @__powi4i4(i32, i32)\n"
#endif // INTEL_CUSTOMIZATION
      "declare float @__powf_finite(float, float)\n"
      "declare x86_fp80 @__powl_finite(x86_fp80, x86_fp80)\n"
#if INTEL_CUSTOMIZATION
      "declare double @__powr8i8(double, i64)\n"
#endif // INTEL_CUSTOMIZATION
      "declare double @__sinh_finite(double)\n"
      "declare float @__sinhf_finite(float)\n"
      "declare x86_fp80 @__sinhl_finite(x86_fp80)\n"

      // These functions are aix vec allocation/free routines
      "declare i8* @vec_calloc(i64, i64)\n"
      "declare i8* @vec_malloc(i64)\n"
      "declare i8* @vec_realloc(i8*, i64)\n"
      "declare void @vec_free(i8*)\n"

      // These functions are OpenMP Offloading allocation / free routines
      "declare i8* @__kmpc_alloc_shared(i64)\n"
      "declare void @__kmpc_free_shared(i8*, i64)\n"
#if INTEL_CUSTOMIZATION
      "declare %struct* @__acrt_iob_func(i32)\n"
      "declare void @__assert_fail(i8*, i8*, i32, i8*)\n"
      "declare void @__clang_call_terminate(i8*)\n"
      "declare i16* @__ctype_b_loc()\n"
      "declare i32 @__ctype_get_mb_cur_max()\n"
      "declare i32** @__ctype_tolower_loc()\n"
      "declare i32** @__ctype_toupper_loc()\n"
      "declare i8* @__cxa_allocate_exception(i64)\n"
      "declare void @__cxa_bad_cast()\n"
      "declare void @__cxa_bad_typeid()\n"
      "declare i8* @__cxa_begin_catch(i8*)\n"
      "declare void @__cxa_call_unexpected(i8*)\n"
      "declare void @__cxa_end_catch()\n"
      "declare void @__cxa_free_exception(i8*)\n"
      "declare i8* @__cxa_get_exception_ptr(i8*)\n"
      "declare void @__cxa_pure_virtual()\n"
      "declare void @__cxa_rethrow()\n"
      "declare void @__cxa_throw(i8*, i8*, i8*)\n"
      "declare i32* @__errno_location()\n"
      "declare i32 @__fxstat(i32, i32, i8*)\n"
      "declare i32 @__fxstat64(i32, i32, i8*)\n"
      "declare i32 @__gxx_personality_v0(i32, i32, i64, %struct*, %struct*)\n"
      "declare i32 @__isinf(double)\n"
      "declare i32 @__isnan(double)\n"
      "declare i32 @__isnanf(float)\n"
#endif  // INTEL_CUSTOMIZATION
#if INTEL_COLLAB
      "declare i1 @__kmpc_atomic_compare_exchange(i64, i8*, i8*, i8*, i32, i32)\n"
      "declare void @__kmpc_atomic_fixed4_add(%struct*, i8, i32*, i32)\n"
      "declare void @__kmpc_atomic_float8_add(%struct*, i8, double*, double)\n"
      "declare void @__kmpc_atomic_load(i64, i8*, i8*, i32)\n"
      "declare void @__kmpc_atomic_store(i64, i8*, i8*, i32)\n"
      "declare void @__kmpc_barrier(i8*, i32)\n"
      "declare void @__kmpc_critical(i8*, i32, i8*)\n"
      "declare void @__kmpc_critical_with_hint(i8*, i32)\n"
      "declare void @__kmpc_dispatch_init_4(i8*, i32, i32, i32, i32, i32, i32)\n"
      "declare void @__kmpc_dispatch_init_4u(i8*, i32, i32, i32, i32, i32, i32)\n"
      "declare void @__kmpc_dispatch_init_8(i8*, i32, i32, i64, i64, i64, i64)\n"
      "declare void @__kmpc_dispatch_init_8u(i8*, i32, i32, i64, i64, i64, i64)\n"
      "declare i32 @__kmpc_dispatch_next_4(i8*, i32, i8*, i8*, i8*, i8*)\n"
      "declare i32 @__kmpc_dispatch_next_4u(i8*, i32, i8*, i8*, i8*, i8*)\n"
      "declare i32 @__kmpc_dispatch_next_8(i8*, i32, i8*, i8*, i8*, i8*)\n"
      "declare i32 @__kmpc_dispatch_next_8u(i8*, i32, i8*, i8*, i8*, i8*)\n"
      "declare void @__kmpc_end_critical(i8*, i32, i8*)\n"
      "declare void @__kmpc_end_reduce(i8*, i32, i8*)\n"
      "declare void @__kmpc_end_reduce_nowait(i8*, i32, i8*)\n"
      "declare void @__kmpc_end_serialized_parallel(i8*, i32)\n"
      "declare void @__kmpc_flush(i8*)\n"
      "declare void @__kmpc_for_static_fini(i8*, i32)\n"
      "declare void @__kmpc_for_static_init_4(%struct*, i32, i32, i32*, i32*, i32*, i32*, i32, i32)\n"
      "declare void @__kmpc_for_static_init_4u(%struct*, i32, i32, i32*, i32*, i32*, i32*, i32, i32)\n"
      "declare void @__kmpc_for_static_init_8(%struct*, i32, i32, i32*, i64*, i64*, i64*, i64, i64)\n"
      "declare void @__kmpc_for_static_init_8u(%struct*, i32, i32, i32*, i64*, i64*, i64*, i64, i64)\n"
      "declare void @__kmpc_fork_call(i8*, i32, i8*)\n"
      "declare i32 @__kmpc_global_thread_num(i8*)\n"
      "declare i32 @__kmpc_ok_to_fork(i8*)\n"
      "declare i32 @__kmpc_omp_task(i8*, i32, i8*)\n"
      "declare i8* @__kmpc_omp_task_alloc(i8*, i32, i32, i64, i64, i8*)\n"
      "declare void @__kmpc_omp_task_begin_if0(i8*, i32, i8*)\n"
      "declare void @__kmpc_omp_task_complete_if0(i8*, i32, i8*)\n"
      "declare i32 @__kmpc_omp_taskwait(i8*, i32)\n"
      "declare void @__kmpc_push_num_threads(i8*, i32, i32)\n"
      "declare i32 @__kmpc_reduce(i8*, i32, i32, i64, i8*, i8*, i8*)\n"
      "declare i32 @__kmpc_reduce_nowait(i8*, i32, i32, i32, i8*, i8*, i8*)\n"
      "declare void @__kmpc_serialized_parallel(i8*, i32)\n"
      "declare i32 @__kmpc_single(i8*, i32)\n"
      "declare void @__kmpc_end_single(i8*, i32)\n"
      "declare i32 @__kmpc_masked(i8*, i32, i32)\n"
      "declare void @__kmpc_end_masked(i8*, i32)\n"
      "declare i32 @__kmpc_master(i8*, i32)\n"
      "declare void @__kmpc_end_master(i8*, i32)\n"
      "declare i8* @__kmpc_threadprivate_cached(i8*, i32, i8*, i64, i8*)\n"
#endif  // INTEL_COLLAB
#if INTEL_CUSTOMIZATION
      "declare i64* @__local_stdio_printf_options()\n"
      "declare i64* @__local_stdio_scanf_options()\n"
      "declare i32 @__lxstat(i32, i8*, i8*)\n"
      "declare i32 @__lxstat64(i32, i8*, i8*)\n"
      "declare i32 @__pthread_key_create(i32*, i8*)\n"
      "declare i8* @__rawmemchr(i8*, i32)\n"
      "declare i32 @__signbit(double)\n"
      "declare i32 @__sigsetjmp(i8*, i32)\n"
      "declare void @__std_exception_copy(i8*, i8*)\n"
      "declare void @__std_exception_destroy(i8*)\n"
      "declare void @__std_reverse_trivially_swappable_8(i8*, i8*)\n"
      "declare void @__std_terminate()\n"
      "declare i32 @__std_type_info_compare(%struct*, %struct*)\n"
      "declare i8* @__std_type_info_name(%struct*, %struct*)\n"
      "declare i32 @__stdio_common_vfprintf(i64, %struct*, i8*, %struct*, i8*)\n"
      "declare i32 @__stdio_common_vfscanf(i64, %struct*, i8*, %struct*, i8*)\n"
      "declare i32 @__stdio_common_vsprintf(i64, i8*, i64, i8*, %struct*, i8*)\n"
      "declare i32 @__stdio_common_vsprintf_s(i64, i8*, i64, i8*, %struct*, i8*)\n"
      "declare i32 @__stdio_common_vsscanf(i64, i8*, i64, i8*, %struct*, i8*)\n"
      "declare i8* @__sysv_signal(i32, i8*)\n"
      "declare void @_Init_thread_footer(i32*)\n"
      "declare void @_Init_thread_header(i32*)\n"
      "declare void @_Getctype(%struct*)\n"
      "declare void @_Getcvt(%struct*)\n"
      "declare void @_Init_thread_abort(i32*)\n"
      "declare i64 @_Stollx(i8*, i8**, i32, i32*)\n"
      "declare i32 @_Stolx(i8*, i8**, i32, i32*)\n"
      "declare i64 @_Stoullx(i8*, i8**, i32, i32*)\n"
      "declare i32 @_Stoulx(i8*, i8**, i32, i32*)\n"
      "declare i32 @_Tolower(i32, %struct*)\n"
      "declare i32 @_Toupper(i32, %struct*)\n"
      "declare i32* @_errno()\n"
      "declare i32 @_fstat64(i32, %struct*)\n"
      "declare i32 @_fstat64i32(i32, %struct*)\n"
      "declare double @_difftime64(i64, i64)\n"
      "declare i32 @_chdir(i8*)\n"
      "declare i32 @_commit(i32)\n"
      "declare i32 @_close(i32)\n"
      "declare void @_exit(i32)\n"
      "declare %struct* @_fdopen(i32, i8*)\n"
      "declare i32 @_fileno(i8*)\n"
      "declare i32 @_findclose(i64)\n"
      "declare i64 @_findfirst64i32(i8*, %struct*)\n"
      "declare i32 @_findnext64i32(i64, %struct*)\n"
      "declare i32 @_fseeki64(%struct*, i64, i32)\n"
      "declare i64 @_ftelli64(%struct*)\n"
      "declare void @_ftime64(%struct*)\n"
      "declare i32 @_get_stream_buffer_pointers(%struct*, i8***, i8***, i32**)\n"
      "declare i8* @_getcwd(i8*, i32)\n"
      "declare i8* @_getdcwd(i32, i8*, i32)\n"
      "declare i32 @_getdrive()\n"
      "declare i32 @_getpid()\n"
      "declare %struct* @_gmtime64(i64*)\n"
      "declare void @_invalid_parameter_noinfo_noreturn()\n"
      "declare %struct* @_localtime64(i64*)\n"
      "declare void @_lock_file(%struct*)\n"
      "declare i64 @_lseeki64(i32, i64, i32)\n"
      "declare i32 @_mkdir(i8*)\n"
      "declare i32 @_obstack_begin(i8*, i32, i32, i8*, i8*)\n"
      "declare i32 @_obstack_memory_used(i8*)\n"
      "declare i32 @_obstack_newchunk(i8*, i32)\n"
      "declare void @_purecall()\n"
      "declare i32 @_read(i32, i8*, i32)\n"
      "declare i32 @_set_errno(i32)\n"
      "declare i32 @_setjmp(i8*)\n"
      "declare i32 @_setmode(i32, i32)\n"
      "declare void @_sleep(i32)\n"
      "declare i32 @_stat64(i8*, %struct*)\n"
      "declare i32 @_stat64i32(i8*, i8*)\n"
      "declare i32 @_stricmp(i8*, i8*)\n"
      "declare i32 @_strnicmp(i8*, i8*, i64)\n"
      "declare i64 @_strtoi64(i8*, i8**, i32)\n"
      "declare i64 @_time64(i64*)\n"
      "declare i32 @_unlink(i8*)\n"
      "declare void @_unlock_file(%struct*)\n"
      "declare i32 @_waccess(i16*, i32)\n"
      "declare void @_wassert(i16 *, i16*, i32)\n"
      "declare %struct* @_wfopen(i16*, i16*)\n"
      "declare i32 @_wopen(i16*, i32, ...)\n"
      "declare i32 @_wremove(i16*)\n"
      "declare i32 @_write(i32, i8*, i32)\n"
      "declare i32 @_wstat64(i16*, %struct*)\n"
      "declare i32 @_ZNKSs17find_first_not_ofEPKcmm(i8*, i8*, i32, i32)\n"
      "declare i32 @_ZNKSs4findEcm(i8*, i32, i32)\n"
      "declare i32 @_ZNKSs4findEPKcmm(i8*, i8*, i32, i32)\n"
      "declare i32 @_ZNKSs5rfindEcm(i8*, i8, i32)\n"
      "declare i32 @_ZNKSs5rfindEPKcmm(i8*, i8*, i32, i32)\n"
      "declare i32 @_ZNKSs7compareEPKc(i8*, i8*)\n"
      "declare i8* @_ZNKSt13runtime_error4whatEv(i8*)\n"
      "declare void @_ZNKSt5ctypeIcE13_M_widen_initEv(i8*)\n"
      "declare i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE17find_first_not_ofEPKcmm(%struct*, i8*, i64, i64)\n"
      "declare i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcmm(i8*, i8*, i32, i32)\n"
      "declare i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcm(%struct*, i8, i64)\n"
      "declare i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5rfindEPKcmm(i8*, i8*, i32, i32)\n"
      "declare i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5rfindEcm(i8*, i8, i32)\n"
      "declare i32 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc(i8*, i8*)\n"
      "declare void @_ZNKSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEE3strEv(i8*, i8*)\n"
      "declare i8* @_ZNKSt9bad_alloc4whatEv(i8*)\n"
      "declare i8 @_ZNKSt9basic_iosIcSt11char_traitsIcEE5widenEc(i8*, i8)\n"
      "declare i8* @_ZNKSt9exception4whatEv(i8*)\n"
      "declare i8* @_ZNSi10_M_extractIdEERSiRT_(i8*, double*)\n"
      "declare i8* @_ZNSi10_M_extractIfEERSiRT_(i8*, i8*)\n"
      "declare i8* @_ZNSi10_M_extractIlEERSiRT_(i8*, i8*)\n"
      "declare i8* @_ZNSi10_M_extractImEERSiRT_(i8*, i8*)\n"
      "declare i8* @_ZNSi4readEPci(i8*, i8*, i32)\n"
      "declare i8* @_ZNSi4readEPcl(i8*, i8*, i32)\n"
      "declare i32 @_ZNSi5tellgEv(i8*)\n"
      "declare i8* @_ZNSi5ungetEv(i8*)\n"
      "declare i8* @_ZNSirsERi(i8*, i32*)\n"
      "declare i8* @_ZNSo3putEc(i8*, i32)\n"
      "declare i8* @_ZNSo5flushEv(i8*)\n"
      "declare i8* @_ZNSo5writeEPKci(i8*, i8*, i32)\n"
      "declare i8* @_ZNSo5writeEPKcl(i8*, i8*, i64)\n"
      "declare i8* @_ZNSo9_M_insertIbEERSoT_(i8*, i32)\n"
      "declare i8* @_ZNSo9_M_insertIdEERSoT_(i8*, float)\n"
      "declare i8* @_ZNSo9_M_insertIlEERSoT_(i8*, i32)\n"
      "declare i8* @_ZNSo9_M_insertImEERSoT_(i8*, i32)\n"
      "declare i8* @_ZNSo9_M_insertIPKvEERSoT_(i8*, i8*)\n"
      "declare i8* @_ZNSolsEi(i8*, i32)\n"
      "declare void @_ZNSs12_M_leak_hardEv(i8*)\n"
      "declare void @_ZNSs4_Rep10_M_destroyERKSaIcE(i8*, i8*)\n"
      "declare i8* @_ZNSs4_Rep9_S_createEmmRKSaIcE(i64, i64, i8*)\n"
      "declare i8* @_ZNSs6appendEmc(i8*, i32, i32)\n"
      "declare i8* @_ZNSs6appendEPKcm(i8*, i8*, i32)\n"
      "declare i8* @_ZNSs6appendERKSs(i8*, i8*)\n"
      "declare i8* @_ZNSs6assignEPKcm(i8*, i8*, i32)\n"
      "declare i8* @_ZNSs6assignERKSs(i8*, i8*)\n"
      "declare i8* @_ZNSs6insertEmPKcm(i8*, i32, i8*, i32)\n"
      "declare void @_ZNSs6resizeEmc(i8*, i32, i32)\n"
      "declare i8* @_ZNSs7replaceEmmPKcm(i8*, i32, i32, i8*, i32)\n"
      "declare void @_ZNSs7reserveEm(i8*, i32)\n"
      "declare void @_ZNSs9_M_mutateEmmm(i8*, i32, i32, i32)\n"
      "declare void @_ZNSsC1EPKcmRKSaIcE(i8*, i8*, i32, i8*)\n"
      "declare void @_ZNSsC1EPKcRKSaIcE(i8*, i8*, i8*)\n"
      "declare void @_ZNSsC1ERKSs(i8*, i8*)\n"
      "declare void @_ZNSsC1ERKSsmm(i8*, i8*, i32, i32)\n"
      "declare void @_ZNSt12__basic_fileIcED1Ev(i8*)\n"
      "declare i8* @_ZNSt13basic_filebufIcSt11char_traitsIcEE4openEPKcSt13_Ios_Openmode(i8*, i8*, i32)\n"
      "declare i8* @_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv(i8*)\n"
      "declare void @_ZNSt13basic_filebufIcSt11char_traitsIcEEC1Ev(i8*)\n"
      "declare void @_ZNSt13basic_filebufIcSt11char_traitsIcEED2Ev(%struct*)\n"
      "declare void @_ZNSt13runtime_errorC1EPKc(i8*, i8*)\n"
      "declare void @_ZNSt13runtime_errorC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(i8*, i8*)\n"
      "declare void @_ZNSt13runtime_errorC1ERKSs(i8*, i8*)\n"
      "declare void @_ZNSt13runtime_errorC1ERKS_(i8*, i8*)\n"
      "declare void @_ZNSt13runtime_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(i8*, i8*)\n"
      "declare void @_ZNSt13runtime_errorC2EPKc(i8*, i8*)\n"
      "declare void @_ZNSt13runtime_errorC2ERKS_(i8*, i8*)\n"
      "declare void @_ZNSt13runtime_errorC2ERKSs(i8*, i8*)\n"
      "declare void @_ZNSt13runtime_errorD0Ev(i8*)\n"
      "declare void @_ZNSt13runtime_errorD1Ev(i8*)\n"
      "declare void @_ZNSt13runtime_errorD2Ev(i8*)\n"
      "declare void @_ZNSt14basic_ifstreamIcSt11char_traitsIcEEC1EPKcSt13_Ios_Openmode(i8*, i8*, i32)\n"
      "declare void @_ZNSt14basic_ifstreamIcSt11char_traitsIcEEC1Ev(%struct*)\n"
      "declare void @_ZNSt14basic_ifstreamIcSt11char_traitsIcEED1Ev(i8*)\n"
      "declare void @_ZNSt14basic_ifstreamIcSt11char_traitsIcEED2Ev(i8*, i8*)\n"
      "declare void @_ZNSt14basic_ofstreamIcSt11char_traitsIcEEC1EPKcSt13_Ios_Openmode(i8*, i8*, i32)\n"
      "declare void @_ZNSt14basic_ofstreamIcSt11char_traitsIcEED1Ev(%struct*)\n"
      "declare void @_ZNSt15basic_streambufIcSt11char_traitsIcEE5imbueERKSt6locale(i8*, i8*)\n"
      "declare i32 @_ZNSt15basic_streambufIcSt11char_traitsIcEE5uflowEv(i8*)\n"
      "declare i32 @_ZNSt15basic_streambufIcSt11char_traitsIcEE6xsgetnEPcl(i8*, i8*, i32)\n"
      "declare i32 @_ZNSt15basic_streambufIcSt11char_traitsIcEE6xsputnEPKcl(i8*, i8*, i32)\n"
      "declare void @_ZNSt15basic_streambufIcSt11char_traitsIcEED2Ev(i8*)\n"
      "declare void @_ZNSt15basic_stringbufIcSt11char_traitsIcESaIcEE7_M_syncEPcmm(i8*, i8*, i32, i32)\n"
      "declare i8* @_ZNSt15basic_stringbufIcSt11char_traitsIcESaIcEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode(i8*, i64, i32, i32)\n"
      "declare i8* @_ZNSt15basic_stringbufIcSt11char_traitsIcESaIcEE7seekposESt4fposI11__mbstate_tESt13_Ios_Openmode(i8*, i8*, i32)\n"
      "declare i32 @_ZNSt15basic_stringbufIcSt11char_traitsIcESaIcEE8overflowEi(i8*, i32)\n"
      "declare i32 @_ZNSt15basic_stringbufIcSt11char_traitsIcESaIcEE9pbackfailEi(i8*, i32)\n"
      "declare i32 @_ZNSt15basic_stringbufIcSt11char_traitsIcESaIcEE9underflowEv(i8*)\n"
      "declare void @_ZNSt15basic_stringbufIcSt11char_traitsIcESaIcEEC2ERKSsSt13_Ios_Openmode(i8*, i8*, i32)\n"
      "declare void @_ZNSt6localeC1Ev(i8*)\n"
      "declare void @_ZNSt6localeD1Ev(i8*)\n"
      "declare void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEmc(i8*, i32, i8)\n"
      "declare void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm(i8*, i32)\n"
      "declare void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEmm(i8*, i32, i32)\n"
      "declare i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(i8*, i8*, i32)\n"
      "declare void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_(i8*, i8*)\n"
      "declare i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(i8*, i8*, i32)\n"
      "declare void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm(i8*, i32, i32, i8*, i32)\n"
      "declare i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm(i8*, i32, i32, i8*, i32)\n"
      "declare i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEmmmc(i8*, i32, i32, i32, i8)\n"
      "declare void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_(i8*, i8*, i8*)\n"
      "declare void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_mm(i8*, i8*, i32, i32)\n"
      "declare void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev(i8*)\n"
      "declare i8* @_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEE6setbufEPcl(i8*, i8*, i64)\n"
      "declare void @_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEE7_M_syncEPcmm(i8*, i8*, i32, i32)\n"
      "declare i8* @_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEE7seekoffElSt12_Ios_SeekdirSt13_Ios_Openmode(i8*, i32, i32, i32)\n"
      "declare i8* @_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEE7seekposESt4fposI11__mbstate_tESt13_Ios_Openmode(i8*, i8*, i32)\n"
      "declare i32 @_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEE8overflowEi(i8*, i32)\n"
      "declare i32 @_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEE9pbackfailEi(i8*, i32)\n"
      "declare i64 @_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEE9showmanycEv(i8*)\n"
      "declare i32 @_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEE9underflowEv(i8*)\n"
      "declare void @_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEC2ERKNS_12basic_stringIcS2_S3_EESt13_Ios_Openmode(i8*, i8*, i32)\n"
      "declare void @_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED2Ev(i8*)\n"
      "declare void @_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEC1ERKNS_12basic_stringIcS2_S3_EESt13_Ios_Openmode(i8*, i8*, i32)\n"
      "declare void @_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEC1ESt13_Ios_Openmode(i8* ,i32)\n"
      "declare void @_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEC1Ev(%struct*)\n"
      "declare void @_ZNSt7__cxx1119basic_istringstreamIcSt11char_traitsIcESaIcEEC1ERKNS_12basic_stringIcS2_S3_EESt13_Ios_Openmode(i8*, i8*, i32)\n"
      "declare void @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEC1ESt13_Ios_Openmode(i8*, i32)\n"
      "declare void @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEC1Ev(%struct*)\n"
      "declare void @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev(%struct*)\n"
      "declare void @_ZNSt8__detail15_List_node_base11_M_transferEPS0_S1_(i8*, i8*, i8*)\n"
      "declare void @_ZNSt8__detail15_List_node_base7_M_hookEPS0_(i8*, i8*)\n"
      "declare void @_ZNSt8__detail15_List_node_base9_M_unhookEv(i8*)\n"
      "declare void @_ZNSt8ios_base4InitC1Ev(i8*)\n"
      "declare void @_ZNSt8ios_base4InitD1Ev(i8*)\n"
      "declare void @_ZNSt8ios_baseC2Ev(i8*)\n"
      "declare void @_ZNSt8ios_baseD2Ev(i8*)\n"
      "declare void @_ZNSt9bad_allocD0Ev(i8*)\n"
      "declare void @_ZNSt9bad_allocD1Ev(i8*)\n"
      "declare void @_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E(i8*, i8*)\n"
      "declare void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(i8*, i32)\n"
      "declare i8* @_ZNSt9basic_iosIcSt11char_traitsIcEE5rdbufEPSt15basic_streambufIcS1_E(i8*, i8*)\n"
      "declare void @_ZNSt9exceptionD0Ev(i8*)\n"
      "declare void @_ZNSt9exceptionD1Ev(i8*)\n"
      "declare void @_ZNSt9exceptionD2Ev(i8*)\n"
      "declare i8* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_i(i8*, i8*, i32)\n"
      "declare i8* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(i8*, i8*, i32)\n"
      "declare void @_ZSt16__throw_bad_castv()\n"
      "declare void @_ZSt17__throw_bad_allocv()\n"
      "declare i8* @_ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base(i8*)\n"
      "declare i8* @_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base(i8*)\n"
      "declare i8* @_ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_base(i8*)\n"
      "declare i8* @_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base(i8*)\n"
      "declare void @_ZSt19__throw_logic_errorPKc(i8*)\n"
      "declare void @_ZSt20__throw_length_errorPKc(i8*)\n"
      "declare void @_ZSt20__throw_out_of_rangePKc(i8*)\n"
      "declare void @_ZSt24__throw_out_of_range_fmtPKcz(i8*)\n"
      "declare i8* @_ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_(i8*, i8*)\n"
      "declare void @_ZSt28__throw_bad_array_new_lengthv()\n"
      "declare void @_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_(i32, i8*, i8*, i8*)\n"
      "declare %struct* @_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_(%struct*)\n"
      "declare %struct* @_ZSt5flushIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_(%struct*)\n"
      "declare i8* @_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RSbIS4_S5_T1_ES4_(i8*, i8*, i8*, i32)\n"
      "declare %struct* @_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_(%struct*, %struct*, i8)\n"
      "declare void @_ZSt9terminatev()\n"
      "declare i8* @_ZStrsIcSt11char_traitsIcEERSt13basic_istreamIT_T0_ES6_RS3_(i8*, i8*)\n"
      "declare void @abort()\n"
      "declare i32 @alphasort(i8*, i8*)\n"
      "declare i8* @asctime(i8*)\n"
      "declare i32 @asprintf(i8*, i8*)\n"
      "declare i32 @backtrace(i8*, i32)\n"
      "declare i8* @backtrace_symbols(i8*, i32)\n"
      "declare i8* @bsearch(i8*, i8*, i32, i32, i8*)\n"
      "declare i32 @chdir(i8*)\n"
      "declare i32 @clock()\n"
      "declare i32 @close(i32)\n"
      "declare i8* @ctime(i8*)\n"
      "declare i32 @CloseHandle(i8*)\n"
      "declare i8* @ConvertThreadToFiber(i8*)\n"
      "declare i8* @CreateFiber(i64, void (i8*)*, i8*)\n"
      "declare i8* @CreateFileA(i16*, i32, i32, %struct*, i32, i32, i8*)\n"
      "declare i8* @CreateFileW(i16*, i32, i32, %struct*, i32, i32, i8*)\n"
      "declare void @DeleteCriticalSection(%struct*)\n"
      "declare void @DeleteFiber(i8*)\n"
      "declare void @EnterCriticalSection(%struct*)\n"
      "declare double @difftime(i32, i32)\n"
      "declare %struct @div(i32, i32)\n"
      "declare i32 @dup(i32)\n"
      "declare i32 @dup2(i32, i32)\n"
      "declare float @erfc(double)\n"
      "declare void @error(i32, i32, i8*)\n"
      "declare i32 @fcntl(i32, i32)\n"
      "declare i32 @fcntl64(i32, i32)\n"
      "declare i32 @fnmatch(i8*, i8*, i32)\n"
      "declare void @for_adjustl(i8*, i64, i8*, i64)\n"
      "declare i32 @for_alloc_allocatable(i64, i8**, i32)\n"
      "declare i32 @for_alloc_allocatable_handle(i64, i8**, i32, i8*)\n"
      "declare i32 @for_allocate(i64, i8**, i32)\n"
      "declare i32 @for_allocate_handle(i64, i8**, i32, i8*)\n"
      "declare i8* @for_array_copy_in(i8*)\n"
      "declare void @for_array_copy_out(i8*, i8*)\n"
      "declare i32 @for_backspace(i8*, i32, i64, ...)\n"
      "declare i32 @for_check_mult_overflow64(i64*, i32, ...)\n"
      "declare i32 @for_close(i8*, i32, i64, i8*, i8*, ...)\n"
      "declare void @for_concat(i8*, i64, i8*, i64)\n"
      "declare i32 @for_contig_array(i8*)\n"
      "declare i64 @for_cpstr(i8*, i64, i8*, i64, i64)\n"
      "declare void @for_cpystr(i8*, i64, i8*, i64, i64)\n"
      "declare void @for_date_and_time(i8*, i32, i8*, i32, i8*, i32, i8*, i32)\n"
      "declare i32 @for_dealloc_allocatable(i8*, i32)\n"
      "declare i32 @for_dealloc_allocatable_handle(i8*, i32, i8*)\n"
      "declare i32 @for_deallocate(i8*, i32)\n"
      "declare i32 @for_endfile(i8*, i32, i64, ...)\n"
      "declare i32 @for_exponent8_v(double)\n"
      "declare i64 @for_f90_index(i8*, i32, i8*, i32, i32)\n"
      "declare i64 @for_f90_scan(i8*, i32, i8*, i32, i32)\n"
      "declare i64 @for_f90_verify(i8*, i32, i8*, i32, i32)\n"
      "declare double @for_fraction8_v(double)\n"
      "declare i32 @for_getcmd_arg_err(i32*, i8*, i32*, i32*, i64)\n"
      "declare i32 @for_iargc()\n"
      "declare i32 @for_inquire(i8*, i32, i64, i8*, i8*, ...)\n"
      "declare i64 @for_len_trim(i8*, i64)\n"
      "declare i32 @for_open(i8*, i32, i64, i8*, i8*, ...)\n"
      "declare i64 @for_random_number()\n"
      "declare i64 @for_random_seed_bit_size()\n"
      "declare i64 @for_random_seed_put(i32*)\n"
      "declare i32 @for_read_int_fmt(i8*, i64, i8*, i8*, i8*, ...)\n"
      "declare i32 @for_read_int_lis(i8*, i64, i8*, i8*, ...)\n"
      "declare i32 @for_read_int_lis_xmit(i8*, i8*, i8*)\n"
      "declare i32 @for_read_seq_fmt(i8*, i32, i64, i8*, i8*, i8*, ...)\n"
      "declare i32 @for_read_seq_lis(i8*, i32, i64, i8*, i8*, ...)\n"
      "declare i32 @for_read_seq_lis_xmit(i8*, i8*, i8*)\n"
      "declare i32 @for_read_seq_nml(i8*, i32, i64, i8*, i8*, ...)\n"
      "declare i32 @for_realloc_lhs(i8*, i8*, i32)\n"
      "declare i32 @for_rewind(i8*, i32, i64, ...)\n"
      "declare double @for_scale8_v(double, i32)\n"
      "declare i32 @for_set_reentrancy(i32*)\n"
      "declare double @for_setexp8_v(double, i32)\n"
      "declare i32 @for_stop_core_quiet(i8*, i32, i32, i64, i32, i32, ...)\n"
      "declare i64 @for_system_clock_count(i32)\n"
      "declare i64 @for_trim(i8*, i64, i8*, i64)\n"
      "declare i32 @for_write_int_fmt(i8*, i64, i8*, i8*, i8*, ...)\n"
      "declare i32 @for_write_int_fmt_xmit(i8*, i8*, i8*)\n"
      "declare i32 @for_write_int_lis(i8*, i64, i8*, i8*, ...)\n"
      "declare i32 @for_write_int_lis_xmit(i8*, i8*, i8*)\n"
      "declare i32 @for_write_seq(i8*, i32, i64, i8*, i8*, ...)\n"
      "declare i32 @for_write_seq_fmt(i8*, i32, i64, i8*, i8*, i8*, ...)\n"
      "declare i32 @for_write_seq_fmt_xmit(i8*, i8*, i8*)\n"
      "declare i32 @for_write_seq_lis(i8*, i32, i64, i8*, i8*, ...)\n"
      "declare i32 @for_write_seq_lis_xmit(i8*, i8*, i8*)\n"
      "declare i32 @for_write_seq_xmit(i8*, i8*, i8*)\n"
      "declare %struct* @freopen(i8*, i8*, %struct*)\n"
      "declare i8* @freopen64(i8*, i8*, i8*)\n"
      "declare i32 @fsync(i32)\n"
      "declare i32 @ftruncate64(i32, i32)\n"
      "declare i8* @getcwd(i8*, i32)\n"
      "declare i32 @getegid()\n"
      "declare i32 @geteuid()\n"
      "declare i32 @getgid()\n"
      "declare i32 @getopt_long(i32, i8*, i8*, i8*, i8*)\n"
      "declare i32 @getopt_long_only(i32, i8**, i8*, %struct*, i32*)\n"
      "declare i32 @getpid()\n"
      "declare i8* @getpwuid(i32)\n"
      "declare i32 @getrlimit(i32, i8*)\n"
      "declare i32 @getrlimit64(i32, i8*)\n"
      "declare i32 @FindClose(i8*)\n"
      "declare i8* @FindFirstFileA(i8*, %struct*)\n"
      "declare i8* @FindFirstFileW(i16*, %struct*)\n"
      "declare i32 @FindNextFileA(i8*, %struct*)\n"
      "declare i32 @FindNextFileW(i8*, %struct*)\n"
      "declare %struct* @FindResourceA(%struct*, i8*, i8*)\n"
      "declare i32 @FormatMessageA(i32, i8*, i32, i32, i8*, i32, i8**)\n"
      "declare i32 @FreeResource(i8*)\n"
      "declare i32 @GetCurrentDirectoryW(i32, i16*)\n"
      "declare i32 @GetCurrentDirectoryA(i32, i8*)\n"
      "declare i8* @GetCurrentProcess()\n"
      "declare i32 @GetCurrentThreadId()\n"
      "declare i32 @GetFullPathNameA(i8*, i32, i8*, i8**)\n"
      "declare i32 @GetFullPathNameW(i8*, i32, i8*, i8**)\n"
      "declare i32 @GetLastError()\n"
      "declare i32 @GetModuleFileNameA(%struct*, i8*, i32)\n"
      "declare %struct* @GetModuleHandleA(i8*)\n"
      "declare i64* @GetProcAddress(%struct*, i8*)\n"
      "declare i32 @GetProcessTimes(i8*, %struct*, %struct*, %struct*, %struct*)\n"
      "declare void @GetSystemTime(%struct*)\n"
      "declare i32 @GetShortPathNameW(i16*, i16*, i32)\n"
      "declare i32 @GetVersionExA(%struct*)\n"
      "declare void @GlobalMemoryStatus(%struct*)\n"
      "declare void @InitializeCriticalSection(%struct*)"
      "declare i32 @InitializeCriticalSectionAndSpinCount(%struct*, i32)\n"
      "declare void @LeaveCriticalSection(%struct*)\n"
      "declare %struct* @LoadLibraryA(i8*)\n"
      "declare i8* @LoadResource(%struct*, %struct*)\n"
      "declare i8* @LocalFree(i8*)\n"
      "declare i8* @LockResource(i8*)\n"
      "declare i32 @MultiByteToWideChar(i32, i32, i8*, i32, i16*, i32)\n"
      "declare i32 @QueryPerformanceCounter(%struct*)\n"
      "declare i32 @ReadFile(i8*, i8*, i32, i32*, %struct*)\n"
      "declare i32 @SetFilePointer(i8*, i32, i32*, i32)\n"
      "declare i32 @SizeofResource(%struct*, %struct*)\n"
      "declare void @Sleep(i32)\n"
      "declare void @SwitchToFiber(i8*)\n"
      "declare i32 @SystemTimeToFileTime(%struct*, %struct*)\n"
      "declare i32 @getrusage(i32, i8*)\n"
      "declare i32 @getuid()\n"
      "declare i32 @glob(i8*, i32, i8*, i8*)\n"
      "declare void @globfree(i8*)\n"
      "declare i8* @gmtime(i8*)\n"
      "declare i8* @gmtime_r(i8*, i8*)\n"
      "declare double @hypot(double, double)\n"
      "declare float @hypotf(float, float)\n"
      "declare i32 @ioctl(i32, i64)\n"
      "declare i32 @isalnum(i32)\n"
      "declare i32 @isalpha(i32)\n"
      "declare i32 @isatty(i32)\n"
      "declare i32 @iscntrl(i32)\n"
      "declare i32 @islower(i32)\n"
      "declare i32 @isprint(i32)\n"
      "declare i32 @isspace(i32)\n"
      "declare i32 @isupper(i32)\n"
      "declare i32 @iswspace(i32)\n"
      "declare i32 @isxdigit(i32)\n"
      "declare double @j0(double)\n"
      "declare double @j1(double)\n"
      "declare i32 @kill(i32, i32)\n"
      "declare void @kmp_set_blocktime(i32)\n"
      "declare i32 @link(i8*, i8*)\n"
      "declare i8* @localeconv()\n"
      "declare i8* @localtime(i8*)\n"
      "declare i8* @localtime_r(i8*, i8*)\n"
      "declare void @longjmp(%struct*, i32)\n"
      "declare i32 @lseek(i32, i32, i32)\n"
      "declare i64 @lseek64(i32, i32, i32)\n"
      "declare i32 @mallopt(i32, i32)\n"
      "declare i32 @mblen(i8*, i32)\n"
      "declare i32 @mbstowcs(i8*, i8*, i32)\n"
      "declare i8* @mkdtemp(i8*)\n"
      "declare i32 @mkstemps(i8*, i32)\n"
      "declare i8* @mmap(i8*, i32, i32, i32, i32, i32)\n"
      "declare i32 @munmap(i8*, i32)\n"
      "declare void @obstack_free(i8*, i8*)\n"
      "declare void @omp_destroy_lock(i8*)\n"
      "declare void @omp_destroy_nest_lock(i8*)\n"
      "declare i32 @omp_get_active_level()\n"
      "declare i32 @omp_get_ancestor_thread_num(i32)\n"
      "declare i32 @omp_get_cancellation()\n"
      "declare i32 @omp_get_default_device()\n"
      "declare i32 @omp_get_dynamic()\n"
      "declare i32 @omp_get_initial_device()\n"
      "declare i32 @omp_get_level()\n"
      "declare i32 @omp_get_max_active_levels()\n"
      "declare i32 @omp_get_max_task_priority()\n"
      "declare i32 @omp_get_max_threads()\n"
      "declare i32 @omp_get_nested()\n"
      "declare i32 @omp_get_num_devices()\n"
      "declare i32 @omp_get_num_procs()\n"
      "declare i32 @omp_get_num_teams()\n"
      "declare i32 @omp_get_num_threads()\n"
      "declare i32 @omp_get_proc_bind()\n"
      "declare void @omp_get_schedule(i32*, i32*)\n"
      "declare i32 @omp_get_team_num()\n"
      "declare i32 @omp_get_team_size(i32)\n"
      "declare i32 @omp_get_thread_limit()\n"
      "declare i32 @omp_get_thread_num()\n"
      "declare double @omp_get_wtick()\n"
      "declare double @omp_get_wtime()\n"
      "declare i32 @omp_in_final()\n"
      "declare i32 @omp_in_parallel()\n"
      "declare void @omp_init_lock(i8*)\n"
      "declare void @omp_init_lock_with_hint(i8*, i32)\n"
      "declare void @omp_init_nest_lock(i8*)\n"
      "declare void @omp_init_nest_lock_with_hint(i8*, i32)\n"
      "declare i32 @omp_is_initial_device()\n"
      "declare void @omp_set_default_device(i32)\n"
      "declare void @omp_set_dynamic(i32)\n"
      "declare void @omp_set_max_active_levels(i32)\n"
      "declare void @omp_set_lock(i8*)\n"
      "declare void @omp_unset_lock(i8*)\n"
      "declare i32 @omp_test_lock(i8*)\n"
      "declare void @omp_set_nest_lock(i8*)\n"
      "declare void @omp_unset_nest_lock(i8*)\n"
      "declare i32 @omp_test_nest_lock(i8*)\n"
      "declare void @omp_set_num_threads(i32)\n"
      "declare void @omp_set_nested(i32)\n"
      "declare void @omp_set_schedule(i32, i32)\n"
      "declare i32 @pipe(i8*)\n"
      "declare i32 @pthread_self()\n"
      "declare i32 @putenv(i8*)\n"
      "declare void @qsort_r(i8*, i32, i32, i8*, i8*)\n"
      "declare i32 @raise(i32)\n"
      "declare i32 @rand()\n"
      "declare i8* @readdir(i8*)\n"
      "declare i8* @readdir64(i8*)\n"
      "declare i32 @regcomp(%struct*, i8*, i32)\n"
      "declare i64 @regerror(i32, %struct*, i8*, i64)\n"
      "declare i32 @regexec(%struct*, i8*, i64, %struct*, i32)\n"
      "declare void @regfree(%struct*)\n"
      "declare i32 @scandir(i8*, i8*, i8*, i8*)\n"
      "declare i32 @select(i32, i8*, i8*, i8*, i8*)\n"
      "declare i32 @setgid(i32)\n"
      "declare i8* @setlocale(i32, i8*)\n"
      "declare i32 @setrlimit(i32, i8*)\n"
      "declare i32 @setuid(i32)\n"
      "declare void @siglongjmp(%struct*, i32)\n"
      "declare i8* @signal(i32, i8*)\n"
      "declare i32 @sleep(i32)\n"
      "declare void @srand(i32)\n"
      "declare i32 @strncpy_s(i8*, i64, i8*, i64)\n"
      "declare i8* @strerror(i32)\n"
      "declare i32 @strftime(i8*, i32, i8*, i8*)\n"
      "declare i8* @strsignal(i32)\n"
      "declare i32 @symlink(i8*, i8*)\n"
      "declare i64 @sysconf(i32)\n"
      "declare void @terminate()\n"
      "declare i32 @time(i8*)\n"
      "declare i32 @tolower(i32)\n"
      "declare i32 @toupper(i32)\n"
      "declare i32 @towlower(i32)\n"
      "declare i32 @towupper(i32)\n"
      "declare i32 @truncate64(i8*, i32)\n"
      "declare i32 @usleep(i32)\n"
      "declare i32 @vasprintf(i8*, i8*, %struct)\n"
      "declare i32 @waitpid(i32, i8*, i32)\n"
      "declare i16* @wcscpy(i16*, i16*)\n"
      "declare i16* @wcsncat(i16*, i16*, i64)\n"
      "declare i64 @wcstombs(i8*, i8*, i64)\n"
      "declare i32 @WideCharToMultiByte(i32, i32, i16*, i32, i8*, i32, i8*, i32*)\n"
      "declare i32 @WriteFile(i8*, i8*, i32, i32*, %struct*)\n"
#endif // INTEL_CUSTOMIZATION
      );

  for (unsigned FI = 0; FI != LibFunc::NumLibFuncs; ++FI) {
    LibFunc LF = (LibFunc)FI;
    // Make sure everything is available; we're not testing target defaults.
    TLII.setAvailable(LF);
    Function *F = M->getFunction(TLI.getName(LF));
    EXPECT_TRUE(isLibFunc(F, LF));
  }
}
