//===- X86EncodingOptimizationForImmediate.def.def ---------------*- C++ -*-==//
// INTEL_CUSTOMIZATION
//
// INTEL CONFIDENTIAL
//
// Modifications, Copyright (C) 2023 Intel Corporation
//
// This software and the related documents are Intel copyrighted materials, and
// your use of them is governed by the express license under which they were
// provided to you ("License"). Unless the License provides otherwise, you may not
// use, modify, copy, publish, distribute, disclose or transmit this software or
// the related documents without Intel's prior written permission.
//
// This software and the related documents are provided as is, with no express
// or implied warranties, other than those that are expressly stated in the
// License.
//
// end INTEL_CUSTOMIZATION
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
// \file
// This file defines all the entries of X86 instruction relaxation for immediate
//===----------------------------------------------------------------------===//

#ifndef ENTRY
#define ENTRY(LONG, SHORT)
#endif
ENTRY(ADC16mi, ADC16mi8)
ENTRY(ADC16ri, ADC16ri8)
ENTRY(ADC32mi, ADC32mi8)
ENTRY(ADC32ri, ADC32ri8)
ENTRY(ADC64mi32, ADC64mi8)
ENTRY(ADC64ri32, ADC64ri8)
ENTRY(SBB16mi, SBB16mi8)
ENTRY(SBB16ri, SBB16ri8)
ENTRY(SBB32mi, SBB32mi8)
ENTRY(SBB32ri, SBB32ri8)
ENTRY(SBB64mi32, SBB64mi8)
ENTRY(SBB64ri32, SBB64ri8)
ENTRY(ADD16mi, ADD16mi8)
ENTRY(ADD16ri, ADD16ri8)
ENTRY(ADD32mi, ADD32mi8)
ENTRY(ADD32ri, ADD32ri8)
ENTRY(ADD64mi32, ADD64mi8)
ENTRY(ADD64ri32, ADD64ri8)
ENTRY(AND16mi, AND16mi8)
ENTRY(AND16ri, AND16ri8)
ENTRY(AND32mi, AND32mi8)
ENTRY(AND32ri, AND32ri8)
ENTRY(AND64mi32, AND64mi8)
ENTRY(AND64ri32, AND64ri8)
ENTRY(OR16mi, OR16mi8)
ENTRY(OR16ri, OR16ri8)
ENTRY(OR32mi, OR32mi8)
ENTRY(OR32ri, OR32ri8)
ENTRY(OR64mi32, OR64mi8)
ENTRY(OR64ri32, OR64ri8)
ENTRY(SUB16mi, SUB16mi8)
ENTRY(SUB16ri, SUB16ri8)
ENTRY(SUB32mi, SUB32mi8)
ENTRY(SUB32ri, SUB32ri8)
ENTRY(SUB64mi32, SUB64mi8)
ENTRY(SUB64ri32, SUB64ri8)
ENTRY(XOR16mi, XOR16mi8)
ENTRY(XOR16ri, XOR16ri8)
ENTRY(XOR32mi, XOR32mi8)
ENTRY(XOR32ri, XOR32ri8)
ENTRY(XOR64mi32, XOR64mi8)
ENTRY(XOR64ri32, XOR64ri8)
ENTRY(CMP16mi, CMP16mi8)
ENTRY(CMP16ri, CMP16ri8)
ENTRY(CMP32mi, CMP32mi8)
ENTRY(CMP32ri, CMP32ri8)
ENTRY(CMP64mi32, CMP64mi8)
ENTRY(CMP64ri32, CMP64ri8)
ENTRY(IMUL16rmi, IMUL16rmi8)
ENTRY(IMUL16rri, IMUL16rri8)
ENTRY(IMUL32rmi, IMUL32rmi8)
ENTRY(IMUL32rri, IMUL32rri8)
ENTRY(IMUL64rmi32, IMUL64rmi8)
ENTRY(IMUL64rri32, IMUL64rri8)
ENTRY(PUSH16i, PUSH16i8)
ENTRY(PUSH32i, PUSH32i8)
ENTRY(PUSH64i32, PUSH64i8)
#if INTEL_CUSTOMIZATION
#if INTEL_FEATURE_ISA_APX_F
#define ENTRIES(LONG, SHORT)                                                   \
  ENTRY(LONG##_EVEX, SHORT##_EVEX)                                             \
  ENTRY(LONG##_NF, SHORT##_NF)                                                 \
  ENTRY(LONG##_ND, SHORT##_ND)                                                 \
  ENTRY(LONG##_ND_NF, SHORT##_ND_NF)
ENTRIES(ADD16mi, ADD16mi8)
ENTRIES(ADD16ri, ADD16ri8)
ENTRIES(ADD32mi, ADD32mi8)
ENTRIES(ADD32ri, ADD32ri8)
ENTRIES(ADD64mi32, ADD64mi8)
ENTRIES(ADD64ri32, ADD64ri8)
ENTRIES(AND16mi, AND16mi8)
ENTRIES(AND16ri, AND16ri8)
ENTRIES(AND32mi, AND32mi8)
ENTRIES(AND32ri, AND32ri8)
ENTRIES(AND64mi32, AND64mi8)
ENTRIES(AND64ri32, AND64ri8)
ENTRIES(OR16mi, OR16mi8)
ENTRIES(OR16ri, OR16ri8)
ENTRIES(OR32mi, OR32mi8)
ENTRIES(OR32ri, OR32ri8)
ENTRIES(OR64mi32, OR64mi8)
ENTRIES(OR64ri32, OR64ri8)
ENTRIES(SUB16mi, SUB16mi8)
ENTRIES(SUB16ri, SUB16ri8)
ENTRIES(SUB32mi, SUB32mi8)
ENTRIES(SUB32ri, SUB32ri8)
ENTRIES(SUB64mi32, SUB64mi8)
ENTRIES(SUB64ri32, SUB64ri8)
ENTRIES(XOR16mi, XOR16mi8)
ENTRIES(XOR16ri, XOR16ri8)
ENTRIES(XOR32mi, XOR32mi8)
ENTRIES(XOR32ri, XOR32ri8)
ENTRIES(XOR64mi32, XOR64mi8)
ENTRIES(XOR64ri32, XOR64ri8)
#undef ENTRIES
#define ENTRIES(LONG, SHORT)                                                   \
  ENTRY(LONG##_EVEX, SHORT##_EVEX)                                             \
  ENTRY(LONG##_ND, SHORT##_ND)
ENTRIES(ADC16mi, ADC16mi8)
ENTRIES(ADC16ri, ADC16ri8)
ENTRIES(ADC32mi, ADC32mi8)
ENTRIES(ADC32ri, ADC32ri8)
ENTRIES(ADC64mi32, ADC64mi8)
ENTRIES(ADC64ri32, ADC64ri8)
ENTRIES(SBB16mi, SBB16mi8)
ENTRIES(SBB16ri, SBB16ri8)
ENTRIES(SBB32mi, SBB32mi8)
ENTRIES(SBB32ri, SBB32ri8)
ENTRIES(SBB64mi32, SBB64mi8)
ENTRIES(SBB64ri32, SBB64ri8)
#undef ENTRIES
#define ENTRIES(LONG, SHORT)                                                   \
  ENTRY(LONG##_EVEX, SHORT##_EVEX)                                             \
  ENTRY(LONG##_NF, SHORT##_NF)
ENTRIES(IMUL16rmi, IMUL16rmi8)
ENTRIES(IMUL16rri, IMUL16rri8)
ENTRIES(IMUL32rmi, IMUL32rmi8)
ENTRIES(IMUL32rri, IMUL32rri8)
ENTRIES(IMUL64rmi32, IMUL64rmi8)
ENTRIES(IMUL64rri32, IMUL64rri8)
#undef ENTRIES
#endif // INTEL_FEATURE_ISA_APX_F
#endif // INTEL_CUSTOMIZATION
#undef ENTRY
