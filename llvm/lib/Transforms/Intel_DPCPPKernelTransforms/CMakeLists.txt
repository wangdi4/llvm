add_llvm_component_library(LLVMIntel_DPCPPKernelTransforms
  AddFastMath.cpp
  AddFunctionAttrs.cpp
  AddImplicitArgs.cpp
  AddNTAttr.cpp
  AddTLSGlobals.cpp
  AutorunReplicator.cpp
  BarrierInFunctionPass.cpp
  BarrierPass.cpp
  BuiltinCallToInst.cpp
  BuiltinImport.cpp
  BuiltinLibInfoAnalysis.cpp
  ChannelPipeTransformation.cpp
  CleanupWrappedKernel.cpp
  CoerceTypes.cpp
  CoerceWin64Types.cpp
  DataPerBarrierPass.cpp
  DataPerValuePass.cpp
  DeduceMaxWGDim.cpp
  DPCPPAliasAnalysis.cpp
  DPCPPEqualizer.cpp
  DPCPPKernelAnalysis.cpp
  DPCPPKernelCompilationUtils.cpp
  DPCPPKernelLoopUtils.cpp
  DPCPPKernelPostVec.cpp
  DPCPPKernelTransforms.cpp
  DPCPPKernelVecClone.cpp
  DPCPPKernelWGLoopCreator.cpp
  DPCPPPrepareKernelForVecClone.cpp
  DPCPPPreprocessSPIRVFriendlyIR.cpp
  DPCPPRewritePipes.cpp
  DuplicateCalledKernelsPass.cpp
  ExternalizeGlobalVariables.cpp
  GroupBuiltinPass.cpp
  HandleVPlanMask.cpp
  ImplicitArgsAnalysis.cpp
  ImplicitGID.cpp
  InferArgumentAlias.cpp
  InfiniteLoopCreator.cpp
  InstToFuncCall.cpp
  InternalizeGlobalVariables.cpp
  InternalizeNonKernelFunc.cpp
  KernelBarrierUtils.cpp
  LinearIdResolver.cpp
  LocalBufferAnalysis.cpp
  LocalBuffers.cpp
  LoopStridedCodeMotion.cpp
  LoopWIAnalysis.cpp
  OptimizeIDivAndIRem.cpp
  PatchCallbackArgs.cpp
  PhiCanonicalization.cpp
  PipeOrdering.cpp
  PrepareKernelArgs.cpp
  ProfilingInfo.cpp
  ReduceCrossBarrierValues.cpp
  RedundantPhiNodePass.cpp
  RelaxedMath.cpp
  RemoveAtexit.cpp
  RemoveDuplicatedBarrier.cpp
  ReplaceScalarWithMask.cpp
  ReqdSubGroupSize.cpp
  ResolveMatrixFill.cpp
  ResolveMatrixLayout.cpp
  ResolveMatrixWISlice.cpp
  ResolveSubGroupWICall.cpp
  ResolveVarTIDCall.cpp
  ResolveWICall.cpp
  SetVectorizationFactor.cpp
  SinCosFold.cpp
  SoaAllocaAnalysis.cpp
  SplitBBonBarrierPass.cpp
  SplitBBonBarrierPass.cpp
  SubgroupEmulation/SGBarrierPropagate.cpp
  SubgroupEmulation/SGBarrierSimplify.cpp
  SubgroupEmulation/SGBuiltin.cpp
  SubgroupEmulation/SGFunctionWiden.cpp
  SubgroupEmulation/SGHelper.cpp
  SubgroupEmulation/SGLoopConstruct.cpp
  SubgroupEmulation/SGSizeAnalysis.cpp
  SubgroupEmulation/SGValueWiden.cpp
  TaskSeqAsyncHandling.cpp
  Utils/CPUDetect.cpp
  Utils/DPCPPChannelPipeUtils.cpp
  Utils/DPCPPStatistic.cpp
  Utils/FunctionDescriptor.cpp
  Utils/ImplicitArgsUtils.cpp
  Utils/LoopPeeling.cpp
  Utils/NameMangleAPI.cpp
  Utils/ParameterType.cpp
  Utils/Predicator.cpp
  Utils/RuntimeService.cpp
  Utils/TypeAlignment.cpp
  Utils/VectorizerUtils.cpp
  Utils/WGBoundDecoder.cpp
  VectorizationDimensionAnalysis.cpp
  VectorKernelElimination.cpp
  VectorVariant/CreateSimdVariantPropagation.cpp
  VectorVariant/IndirectCallLowering.cpp
  VectorVariant/SGSizeCollector.cpp
  VectorVariant/SGSizeCollectorIndirect.cpp
  VectorVariant/UpdateCallAttrs.cpp
  VectorVariant/VectorVariantFillIn.cpp
  VectorVariant/VectorVariantLowering.cpp
  VFAnalysis.cpp
  WGLoopBoundaries.cpp
  WIRelatedValuePass.cpp
  WIRelatedValuePass.cpp
  WeightedInstCount.cpp
  WorkItemAnalysis.cpp

  ADDITIONAL_HEADER_DIRS
  ${LLVM_MAIN_INCLUDE_DIR}/llvm/Transforms/Intel_DPCPPKernelTransforms

  DEPENDS
  intrinsics_gen
  directives_gen

  LINK_COMPONENTS
  Analysis
  Core
  IRReader
  Linker
  Support
  TransformUtils
)

# FIXME: There is no corresponding argument in add_llvm_component_library with
# the same semantic as target_include_directories. It's not typical to include
# additional directories the way below. This require some redesign for headers
# layout. Community changes can break this.
target_include_directories(LLVMIntel_DPCPPKernelTransforms
  PRIVATE ${LLVM_MAIN_SRC_DIR}/lib/Transforms/Intel_DPCPPKernelTransforms/Utils)
