//
//     Copyright  (C) 2017-2019 Intel Corporation.
//      All rights reserved.
//
//        INTEL CORPORATION PROPRIETARY INFORMATION
//
// This software is supplied under the terms of a license
// agreement or nondisclosure agreement with Intel Corp.
// and may not be copied or disclosed except in accordance
// with the terms of that agreement.
//

//
// cvs_id[] = "$Id$"
//


///////////////////////////////////////////////////////////////////////////////
//
// proton/globals/glob_isa_list.h
//
// Remember, features IDs defined in the compiler
// (intel_glob_isa_list.h) and features defined in libirc
// (libdev/libirc/glob_isa_list.h) should be identical.
//
// Don't forget to update both places!
//
// This file, contains the framework for creating and tracking cpu features.
//
///////////////////////////////////////////////////////////////////////////////

//
// CPU_FEATURE_BEGIN(IntelLibFeatureId feature)
//     Marks the beginning of the feature(isa) definition.
//
// CPU_FEATURE_DOC(const char *string)
//     Any additional information or other strings associated
//     with the feature. Used for debugging and general info.
//
// CPU_FEATURE_ADD_FEATURE(IntelLibFeatureId feature_dep)
//     Tells that 'feature_dep' is enabled automatically as the given
//     'feature' is enabled.  Multiple dependencies are allowed.  Also
//     'feature_dep' may have dependencies as well which are added
//     recursively.
//
// CPU_FEATURE_BIT_POS(int n)
//     Tells feature bit position in features bit vector.  This bit vector
//     is used to communicate features set to libirc.  Also this is a user
//     visible interface: this bit mapping is used in may_i_use_cpu_feature().
//
//     Please note that order in which feature definitions follow maps
//     directly to position numbers assigned with CPU_FEATURE_BIT_POS().
//     This way we can use feature identifier as indication of its position
//     in the bit vector.
//
// CPU_FEATURE_ADD_ISA_NAME(const char *name)
//     Public feature name, e.g. used in -m<isa>
//     Multiple names can be specified: they are considered as aliases.
//
// CPU_FEATURE_ADD_MACRO_NAME(const char *macro)
//     Macro that should be defined during compilation when the feature is on.
//     Multiple macro names can be specified: they all are defined for
//     compilation.
//
// CPU_FEATURE_LIBIRC_NAME(const char *name)
//     The name that is used in LIBIRC diagnostics.
//
// CPU_FEATURE_AUTOGENERATED
//     Sets 'autogenerated' feature property.
//
// CPU_FEATURE_END
//     Marks the end of the feature definition.
//

    CPU_FEATURE_BEGIN(c_feature_generic_ia32)
        CPU_FEATURE_DOC("Generic ia32 instructions set.")
        CPU_FEATURE_LIBIRC_NAME("GENERIC_IA32")
        CPU_FEATURE_BIT_POS(0)
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_x87)
        CPU_FEATURE_DOC("x87 FPU instruction set.")
        CPU_FEATURE_ADD_FEATURE(c_feature_generic_ia32)
        CPU_FEATURE_ADD_ISA_NAME("x87")
        CPU_FEATURE_LIBIRC_NAME("X87")
        CPU_FEATURE_BIT_POS(1)
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_cmov)
        CPU_FEATURE_DOC("cmovcc instruction.")
        CPU_FEATURE_ADD_FEATURE(c_feature_generic_ia32)
        CPU_FEATURE_ADD_ISA_NAME("cmov")
        CPU_FEATURE_LIBIRC_NAME("CMOV")
        CPU_FEATURE_BIT_POS(2)
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_mmx)
        CPU_FEATURE_DOC("MMX instruction set.")
        CPU_FEATURE_ADD_FEATURE(c_feature_x87)
        CPU_FEATURE_BIT_POS(3)
        CPU_FEATURE_ADD_ISA_NAME("mmx")
        CPU_FEATURE_LIBIRC_NAME("MMX")
        CPU_FEATURE_ADD_MACRO_NAME("__MMX__")
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_fxsave)
        CPU_FEATURE_DOC("fxsave instruction.")
        CPU_FEATURE_ADD_FEATURE(c_feature_generic_ia32)
        CPU_FEATURE_ADD_ISA_NAME("fxsave")
        CPU_FEATURE_LIBIRC_NAME("FXSAVE")
        CPU_FEATURE_BIT_POS(4)
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_sse)
        CPU_FEATURE_DOC("SSE instruction set.")
        CPU_FEATURE_ADD_FEATURE(c_feature_generic_ia32)
        CPU_FEATURE_BIT_POS(5)
        CPU_FEATURE_ADD_ISA_NAME("sse")
        CPU_FEATURE_LIBIRC_NAME("SSE")
        CPU_FEATURE_ADD_MACRO_NAME("__SSE__")
        CPU_FEATURE_ADD_MACRO_NAME("__SSE_MATH__")
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_sse2)
        CPU_FEATURE_DOC("SSE2 instruction set.")
        CPU_FEATURE_ADD_FEATURE(c_feature_sse)
        CPU_FEATURE_BIT_POS(6)
        CPU_FEATURE_ADD_ISA_NAME("sse2")
        CPU_FEATURE_LIBIRC_NAME("SSE2")
        CPU_FEATURE_ADD_MACRO_NAME("__SSE2__")
        CPU_FEATURE_ADD_MACRO_NAME("__SSE2_MATH__")
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_sse3)
        CPU_FEATURE_DOC("SSE3 instruction set.")
        CPU_FEATURE_ADD_FEATURE(c_feature_sse2)
        CPU_FEATURE_BIT_POS(7)
        CPU_FEATURE_ADD_ISA_NAME("sse3")
        CPU_FEATURE_LIBIRC_NAME("SSE3")
        CPU_FEATURE_ADD_MACRO_NAME("__SSE3__")
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_ssse3)
        CPU_FEATURE_DOC("Supplemental SSE3 instruction set.")
        CPU_FEATURE_ADD_FEATURE(c_feature_sse3)
        CPU_FEATURE_BIT_POS(8)
        CPU_FEATURE_ADD_ISA_NAME("ssse3")
        CPU_FEATURE_LIBIRC_NAME("SSSE3")
        CPU_FEATURE_ADD_MACRO_NAME("__SSSE3__")
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_sse4_1)
        CPU_FEATURE_DOC("SSSE4_1 instruction set.")
        CPU_FEATURE_ADD_FEATURE(c_feature_ssse3)
        CPU_FEATURE_BIT_POS(9)
        CPU_FEATURE_ADD_ISA_NAME("sse4.1")
        CPU_FEATURE_LIBIRC_NAME("SSE4_1")
        CPU_FEATURE_ADD_MACRO_NAME("__SSE4_1__")
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_sse4_2)
        CPU_FEATURE_DOC("SSSE4_2 instruction set.")
        CPU_FEATURE_ADD_FEATURE(c_feature_sse4_1)
        CPU_FEATURE_BIT_POS(10)
        CPU_FEATURE_ADD_ISA_NAME("sse4.2")
        CPU_FEATURE_LIBIRC_NAME("SSE4_2")
        CPU_FEATURE_ADD_MACRO_NAME("__SSE4_2__")
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_movbe)
        CPU_FEATURE_DOC("MOVBE instruction.")
        CPU_FEATURE_ADD_FEATURE(c_feature_generic_ia32)
        CPU_FEATURE_BIT_POS(11)
        CPU_FEATURE_ADD_ISA_NAME("movbe")
        CPU_FEATURE_LIBIRC_NAME("MOVBE")
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_popcnt)
        CPU_FEATURE_DOC("POPCNT instruction.")
        CPU_FEATURE_ADD_FEATURE(c_feature_generic_ia32)
        CPU_FEATURE_BIT_POS(12)
        CPU_FEATURE_ADD_ISA_NAME("popcnt")
        CPU_FEATURE_LIBIRC_NAME("POPCNT")
        CPU_FEATURE_ADD_MACRO_NAME("__POPCNT__")
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_pclmulqdq)
        CPU_FEATURE_DOC("CLMUL instruction set.")
        CPU_FEATURE_ADD_FEATURE(c_feature_sse2)
        CPU_FEATURE_BIT_POS(13)
        CPU_FEATURE_ADD_ISA_NAME("pclmul")
        CPU_FEATURE_LIBIRC_NAME("PCLMULQDQ")
        CPU_FEATURE_ADD_MACRO_NAME("__PCLMUL__")
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_aes)
        CPU_FEATURE_DOC("EAS instruction set.")
        CPU_FEATURE_ADD_FEATURE(c_feature_sse2)
        CPU_FEATURE_BIT_POS(14)
        CPU_FEATURE_ADD_ISA_NAME("aes")
        CPU_FEATURE_LIBIRC_NAME("AES")
        CPU_FEATURE_ADD_MACRO_NAME("__AES__")
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_avx1)
        CPU_FEATURE_DOC("AVX instruction set.")
        CPU_FEATURE_ADD_FEATURE(c_feature_sse4_2)
        CPU_FEATURE_ADD_FEATURE(c_feature_fxsave)
        CPU_FEATURE_BIT_POS(16)
        CPU_FEATURE_ADD_ISA_NAME("avx")
        CPU_FEATURE_LIBIRC_NAME("AVX")
        CPU_FEATURE_ADD_MACRO_NAME("__AVX__")
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_f16c)
        CPU_FEATURE_DOC("F16C (half-precision) FP support.")
        CPU_FEATURE_ADD_FEATURE(c_feature_avx1)
        CPU_FEATURE_BIT_POS(15)
        CPU_FEATURE_ADD_ISA_NAME("f16c")
        CPU_FEATURE_LIBIRC_NAME("F16C")
        CPU_FEATURE_ADD_MACRO_NAME("__F16C__")
        // __AVX_I__ is Intel specific macro.
        CPU_FEATURE_ADD_MACRO_NAME("__AVX_I__")
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_rdrnd)
        CPU_FEATURE_DOC("RDRAND (on-chip random number generator) support.")
        CPU_FEATURE_ADD_FEATURE(c_feature_generic_ia32)
        CPU_FEATURE_BIT_POS(17)
        CPU_FEATURE_ADD_ISA_NAME("rdrnd")
        CPU_FEATURE_LIBIRC_NAME("RDRND")
        CPU_FEATURE_ADD_MACRO_NAME("__RDRND__")
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_fma)
        CPU_FEATURE_DOC("Fused multiply-add support.")
        CPU_FEATURE_ADD_FEATURE(c_feature_avx1)
        CPU_FEATURE_BIT_POS(18)
        CPU_FEATURE_ADD_ISA_NAME("fma")
        CPU_FEATURE_LIBIRC_NAME("FMA")
        CPU_FEATURE_ADD_MACRO_NAME("__FMA__")
        CPU_FEATURE_ADD_MACRO_NAME("__FP_FAST_FMA")
        CPU_FEATURE_ADD_MACRO_NAME("__FP_FAST_FMAF")
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_bmi)
        CPU_FEATURE_DOC("Bit Manipulation instruction sets.")
        CPU_FEATURE_ADD_FEATURE(c_feature_generic_ia32)
        CPU_FEATURE_BIT_POS(19)
        CPU_FEATURE_ADD_ISA_NAME("bmi")
        CPU_FEATURE_LIBIRC_NAME("BMI")
        CPU_FEATURE_ADD_MACRO_NAME("__BMI__")
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_lzcnt)
        CPU_FEATURE_DOC("LZCNT (leading zeroes count) support.")
        CPU_FEATURE_ADD_FEATURE(c_feature_generic_ia32)
        CPU_FEATURE_BIT_POS(20)
        CPU_FEATURE_ADD_ISA_NAME("lzcnt")
        CPU_FEATURE_LIBIRC_NAME("LZCNT")
        CPU_FEATURE_ADD_MACRO_NAME("__LZCNT__")
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_hle)
        CPU_FEATURE_DOC("HLE (hardware lock elision) support.")
        CPU_FEATURE_ADD_FEATURE(c_feature_generic_ia32)
        CPU_FEATURE_BIT_POS(21)
        CPU_FEATURE_ADD_ISA_NAME("hle")
        CPU_FEATURE_LIBIRC_NAME("HLE")
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_rtm)
        CPU_FEATURE_DOC("RTM (restricted transactional memory) support.")
        CPU_FEATURE_ADD_FEATURE(c_feature_generic_ia32)
        CPU_FEATURE_BIT_POS(22)
        CPU_FEATURE_ADD_ISA_NAME("rtm")
        CPU_FEATURE_LIBIRC_NAME("RTM")
        CPU_FEATURE_ADD_MACRO_NAME("__RTM__")
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_avx2)
        CPU_FEATURE_DOC("AVX2 instruction set.")
        CPU_FEATURE_ADD_FEATURE(c_feature_avx1)
        CPU_FEATURE_BIT_POS(23)
        CPU_FEATURE_ADD_ISA_NAME("avx2")
        CPU_FEATURE_LIBIRC_NAME("AVX2")
        CPU_FEATURE_ADD_MACRO_NAME("__AVX2__")
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_avx512f)
        CPU_FEATURE_DOC("AVX512 Foundation instruction set.")
        CPU_FEATURE_ADD_FEATURE(c_feature_avx2)
        CPU_FEATURE_BIT_POS(27)
        CPU_FEATURE_ADD_ISA_NAME("avx512f")
        CPU_FEATURE_LIBIRC_NAME("AVX512F")
        CPU_FEATURE_ADD_MACRO_NAME("__AVX512F__")
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_avx512dq)
        CPU_FEATURE_DOC("AVX512 dword/qword vector instruction set.")
        CPU_FEATURE_ADD_FEATURE(c_feature_avx512f)
        CPU_FEATURE_BIT_POS(24)
        CPU_FEATURE_ADD_ISA_NAME("avx512dq")
        CPU_FEATURE_LIBIRC_NAME("AVX512DQ")
        CPU_FEATURE_ADD_MACRO_NAME("__AVX512DQ__")
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_ptwrite)
        CPU_FEATURE_DOC("Write data to a processor trace packet.")
        CPU_FEATURE_ADD_FEATURE(c_feature_generic_ia32)
        CPU_FEATURE_BIT_POS(25)
        CPU_FEATURE_ADD_ISA_NAME("ptwrite")
        CPU_FEATURE_LIBIRC_NAME("PTWRITE")
        CPU_FEATURE_ADD_MACRO_NAME("__PTWRITE__")
    CPU_FEATURE_END

// xmain does not support kncni
//    CPU_FEATURE_BEGIN(c_feature_kncni)
//        CPU_FEATURE_DOC("KNC instruction set.")
//        CPU_FEATURE_ADD_FEATURE(c_feature_x87)
//        CPU_FEATURE_ADD_ISA_NAME("kncni")
//        CPU_FEATURE_LIBIRC_NAME("KNCNI")
//        CPU_FEATURE_BIT_POS(26)
//    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_adx)
        CPU_FEATURE_DOC("uint add with OF or CF flags (ADOX, ADCX) support.")
        CPU_FEATURE_ADD_FEATURE(c_feature_generic_ia32)
        CPU_FEATURE_BIT_POS(28)
        CPU_FEATURE_ADD_ISA_NAME("adx")
        CPU_FEATURE_LIBIRC_NAME("ADX")
        CPU_FEATURE_ADD_MACRO_NAME("__ADX__")
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_rdseed)
        CPU_FEATURE_DOC("Enhanced non-deterministic rand generator support.")
        CPU_FEATURE_ADD_FEATURE(c_feature_generic_ia32)
        CPU_FEATURE_BIT_POS(29)
        CPU_FEATURE_ADD_ISA_NAME("rdseed")
        CPU_FEATURE_LIBIRC_NAME("RDSEED")
        CPU_FEATURE_ADD_MACRO_NAME("__RDSEED__")
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_avx512ifma52)
        CPU_FEATURE_DOC("vpmadd52huq and vpmadd52luq support.")
        CPU_FEATURE_ADD_FEATURE(c_feature_avx512f)
        CPU_FEATURE_BIT_POS(30)
        CPU_FEATURE_ADD_ISA_NAME("avx512ifma")
        CPU_FEATURE_LIBIRC_NAME("AVX512IFMA52")
        CPU_FEATURE_ADD_MACRO_NAME("__AVX512IFMA__")
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_soft_feature_proc_full_inorder)
        CPU_FEATURE_DOC("Full inorder (like Silverthorne) processor. "
                        "It's 'soft' feature, which means that it doesn't "
                        "have mapping to CPUID bits.")
        CPU_FEATURE_BIT_POS(-1)
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_tvx_trans)
        CPU_FEATURE_DOC("AVX-512 exponential and reciprocal instructions.")
        CPU_FEATURE_ADD_FEATURE(c_feature_avx512f)
        CPU_FEATURE_BIT_POS(32)
        CPU_FEATURE_ADD_ISA_NAME("avx512er")
        CPU_FEATURE_LIBIRC_NAME("AVX512ER")
        CPU_FEATURE_ADD_MACRO_NAME("__AVX512ER__")
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_tvx_prefetch)
        CPU_FEATURE_DOC("AVX-512 prefetch instructions.")
        CPU_FEATURE_ADD_FEATURE(c_feature_avx512f)
        CPU_FEATURE_BIT_POS(33)
        CPU_FEATURE_ADD_ISA_NAME("avx512pf")
        CPU_FEATURE_LIBIRC_NAME("AVX512PF")
        CPU_FEATURE_ADD_MACRO_NAME("__AVX512PF__")
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_vconflict)
        CPU_FEATURE_DOC("AVX-512 conflict detection instructions.")
        CPU_FEATURE_ADD_FEATURE(c_feature_avx512f)
        CPU_FEATURE_BIT_POS(34)
        CPU_FEATURE_ADD_ISA_NAME("avx512cd")
        CPU_FEATURE_LIBIRC_NAME("AVX512CD")
        CPU_FEATURE_ADD_MACRO_NAME("__AVX512CD__")
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_sha)
        CPU_FEATURE_DOC("Secure Hash Algorithm instructions.")
        CPU_FEATURE_ADD_FEATURE(c_feature_sse2)
        CPU_FEATURE_BIT_POS(35)
        CPU_FEATURE_ADD_ISA_NAME("sha")
        CPU_FEATURE_LIBIRC_NAME("SHA")
        CPU_FEATURE_ADD_MACRO_NAME("__SHA__")
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_mpx)
        CPU_FEATURE_DOC(" Memory Protection Extensions.")
        CPU_FEATURE_ADD_FEATURE(c_feature_generic_ia32)
        CPU_FEATURE_BIT_POS(36)
        CPU_FEATURE_ADD_ISA_NAME("mpx")
        CPU_FEATURE_LIBIRC_NAME("MPX")
        CPU_FEATURE_ADD_MACRO_NAME("__MPX__")
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_avx512bw)
        CPU_FEATURE_DOC("AVX512 byte/word vector instruction set.")
        CPU_FEATURE_ADD_FEATURE(c_feature_avx512f)
        CPU_FEATURE_BIT_POS(37)
        CPU_FEATURE_ADD_ISA_NAME("avx512bw")
        CPU_FEATURE_LIBIRC_NAME("AVX512BW")
        CPU_FEATURE_ADD_MACRO_NAME("__AVX512BW__")
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_avx512vl)
        CPU_FEATURE_DOC("128/256-bit vector support of AVX512 instructions.")
        CPU_FEATURE_ADD_FEATURE(c_feature_avx512f)
        CPU_FEATURE_BIT_POS(38)
        CPU_FEATURE_ADD_ISA_NAME("avx512vl")
        CPU_FEATURE_LIBIRC_NAME("AVX512VL")
        CPU_FEATURE_ADD_MACRO_NAME("__AVX512VL__")
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_avx512vbmi)
        CPU_FEATURE_DOC("vpermb, vpermi2b, vpermt2b and vpmultishiftqb.")
        CPU_FEATURE_ADD_FEATURE(c_feature_avx512bw)
        CPU_FEATURE_BIT_POS(39)
        CPU_FEATURE_ADD_ISA_NAME("avx512vbmi")
        CPU_FEATURE_LIBIRC_NAME("AVX512VBMI")
        CPU_FEATURE_ADD_MACRO_NAME("__AVX512VBMI__")
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_avx512_4fmaps)
        CPU_FEATURE_DOC("Single Precision FMA for multivector(4 vector) "
                        "operand.")
        CPU_FEATURE_ADD_FEATURE(c_feature_avx512f)
        CPU_FEATURE_BIT_POS(40)
        CPU_FEATURE_ADD_ISA_NAME("avx5124fmaps")
        CPU_FEATURE_LIBIRC_NAME("AVX512_4FMAPS")
        CPU_FEATURE_ADD_MACRO_NAME("__AVX5124FMAPS__")
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_avx512_4vnniw)
        CPU_FEATURE_DOC("Vector Neural Network Instructions for multivector "
                        "(4 vector) operand with word elements.")
        CPU_FEATURE_ADD_FEATURE(c_feature_avx512f)
        CPU_FEATURE_BIT_POS(41)
        CPU_FEATURE_ADD_ISA_NAME("avx5124vnniw")
        CPU_FEATURE_LIBIRC_NAME("AVX512_4VNNIW")
        CPU_FEATURE_ADD_MACRO_NAME("__AVX5124VNNIW__")
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_avx512_vpopcntdq)
        CPU_FEATURE_DOC("512-bit vector POPCNT instruction.")
        CPU_FEATURE_ADD_FEATURE(c_feature_avx512f)
        CPU_FEATURE_BIT_POS(42)
        CPU_FEATURE_ADD_ISA_NAME("avx512vpopcntdq")
        CPU_FEATURE_LIBIRC_NAME("AVX512_VPOPCNTDQ")
        CPU_FEATURE_ADD_MACRO_NAME("__AVX512VPOPCNTDQ__")
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_avx512_bitalg)
        CPU_FEATURE_DOC("vector bit algebra in AVX512.")
        CPU_FEATURE_ADD_FEATURE(c_feature_avx512f)
        CPU_FEATURE_BIT_POS(43)
        CPU_FEATURE_ADD_ISA_NAME("avx512bitalg")
        CPU_FEATURE_LIBIRC_NAME("AVX512_BITALG")
        CPU_FEATURE_ADD_MACRO_NAME("__AVX512BITALG__")
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_avx512vbmi2)
        CPU_FEATURE_DOC("additional byte, word, dword and qword capabilities")
        CPU_FEATURE_ADD_FEATURE(c_feature_avx512bw)
        CPU_FEATURE_BIT_POS(44)
        CPU_FEATURE_ADD_ISA_NAME("avx512vbmi2")
        CPU_FEATURE_LIBIRC_NAME("AVX512_VBMI2")
        CPU_FEATURE_ADD_MACRO_NAME("__AVX512VBMI2__")
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_gfni)
        CPU_FEATURE_DOC("Galois Field New Instructions.")
        CPU_FEATURE_ADD_FEATURE(c_feature_sse2)
        CPU_FEATURE_BIT_POS(45)
        CPU_FEATURE_ADD_ISA_NAME("gfni")
        CPU_FEATURE_LIBIRC_NAME("GFNI")
        CPU_FEATURE_ADD_MACRO_NAME("__GFNI__")
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_vaes)
        CPU_FEATURE_DOC("vector AES instructions.")
        CPU_FEATURE_ADD_FEATURE(c_feature_sse2)
        CPU_FEATURE_BIT_POS(46)
        CPU_FEATURE_ADD_ISA_NAME("vaes")
        CPU_FEATURE_LIBIRC_NAME("VAES")
        CPU_FEATURE_ADD_MACRO_NAME("__VAES__")
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_vpclmulqdq)
        CPU_FEATURE_DOC("Vector CLMUL instruction set.")
        CPU_FEATURE_ADD_FEATURE(c_feature_sse2)
        CPU_FEATURE_BIT_POS(47)
        CPU_FEATURE_ADD_ISA_NAME("vpclmulqdq")
        CPU_FEATURE_LIBIRC_NAME("VPCLMULQDQ")
        CPU_FEATURE_ADD_MACRO_NAME("__VPCLMUL__")
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_avx512vnni)
        CPU_FEATURE_DOC("vector Neural Network Instructions.")
        CPU_FEATURE_ADD_FEATURE(c_feature_avx512f)
        CPU_FEATURE_BIT_POS(48)
        CPU_FEATURE_ADD_ISA_NAME("avx512vnni")
        CPU_FEATURE_LIBIRC_NAME("AVX512_VNNI")
        CPU_FEATURE_ADD_MACRO_NAME("__AVX512VNNI__")
        // xmain can autogenerate this
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_clwb)
        CPU_FEATURE_DOC("Cache Line Write Back.")
        CPU_FEATURE_ADD_FEATURE(c_feature_generic_ia32)
        CPU_FEATURE_BIT_POS(49)
        CPU_FEATURE_ADD_ISA_NAME("clwb")
        CPU_FEATURE_LIBIRC_NAME("CLWB")
        CPU_FEATURE_ADD_MACRO_NAME("__CLWB__")
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_rdpid)
        CPU_FEATURE_DOC("Read Processor ID.")
        CPU_FEATURE_ADD_FEATURE(c_feature_generic_ia32)
        CPU_FEATURE_BIT_POS(50)
        CPU_FEATURE_ADD_ISA_NAME("rdpid")
        CPU_FEATURE_LIBIRC_NAME("RDPID")
        CPU_FEATURE_ADD_MACRO_NAME("__RDPID__")
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_ibt)
        CPU_FEATURE_DOC("Indirect branch tracking.")
        CPU_FEATURE_ADD_FEATURE(c_feature_generic_ia32)
        CPU_FEATURE_BIT_POS(51)
        CPU_FEATURE_ADD_ISA_NAME("ibt")
        CPU_FEATURE_LIBIRC_NAME("IBT")
        CPU_FEATURE_ADD_MACRO_NAME("__IBT__")
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_shstk)
        CPU_FEATURE_DOC("Shadow stack.")
        CPU_FEATURE_ADD_FEATURE(c_feature_generic_ia32)
        CPU_FEATURE_BIT_POS(52)
        CPU_FEATURE_ADD_ISA_NAME("shstk")
        CPU_FEATURE_LIBIRC_NAME("SHSTK")
        CPU_FEATURE_ADD_MACRO_NAME("__SHSTK__")
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_sgx)
        CPU_FEATURE_DOC("Intel Software Guard Extensions.")
        CPU_FEATURE_BIT_POS(53)
        CPU_FEATURE_ADD_ISA_NAME("sgx")
        CPU_FEATURE_LIBIRC_NAME("SGX")
        CPU_FEATURE_ADD_MACRO_NAME("__SGX__")
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_wbnoinvd)
        CPU_FEATURE_DOC("Write back and do not invalidate cache.")
        CPU_FEATURE_BIT_POS(54)
        CPU_FEATURE_ADD_ISA_NAME("wbnoinvd")
        CPU_FEATURE_LIBIRC_NAME("WBNOINVD")
        CPU_FEATURE_ADD_MACRO_NAME("__WBNOINVD__")
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_pconfig)
        CPU_FEATURE_DOC("Platform configuration.")
        CPU_FEATURE_BIT_POS(55)
        CPU_FEATURE_ADD_ISA_NAME("pconfig")
        CPU_FEATURE_LIBIRC_NAME("PCONFIG")
        CPU_FEATURE_ADD_MACRO_NAME("__PCONFIG__")
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_avx512_vp2intersect)
        CPU_FEATURE_DOC("Compute intersection between vector elements"
                        " to pair of mask registers.")
        CPU_FEATURE_ADD_FEATURE(c_feature_avx512f)
        CPU_FEATURE_BIT_POS(56)
        CPU_FEATURE_ADD_ISA_NAME("avx512vp2intersect")
        CPU_FEATURE_LIBIRC_NAME("AVX512_VP2INTERSECT")
        CPU_FEATURE_ADD_MACRO_NAME("__AVX512VP2INTERSECT__")
    CPU_FEATURE_END

// NOTE: Features with bit_pos >= 64 are not supported in legacy
//       _may_i_use_cpu_feature() and _allow_cpu_features() interfaces.
//
    CPU_FEATURE_BEGIN(c_feature_cldemote)
        CPU_FEATURE_DOC("Cache Line Demote")
        CPU_FEATURE_BIT_POS(64)
        CPU_FEATURE_ADD_ISA_NAME("cldemote")
        CPU_FEATURE_LIBIRC_NAME("CLDEMOTE")
        CPU_FEATURE_ADD_MACRO_NAME("__CLDEMOTE__")
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_movdiri)
        CPU_FEATURE_DOC("Move Doubleword as Direct Store")
        CPU_FEATURE_BIT_POS(65)
        CPU_FEATURE_ADD_ISA_NAME("movdiri")
        CPU_FEATURE_LIBIRC_NAME("MOVDIRI")
        CPU_FEATURE_ADD_MACRO_NAME("__MOVDIRI__")
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_movdir64b)
        CPU_FEATURE_DOC("Move 64 Bytes as Direct Store")
        CPU_FEATURE_BIT_POS(66)
        CPU_FEATURE_ADD_ISA_NAME("movdir64b")
        CPU_FEATURE_LIBIRC_NAME("MOVDIR64B")
        CPU_FEATURE_ADD_MACRO_NAME("__MOVDIR64B__")
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_waitpkg)
        CPU_FEATURE_DOC("Wait and Pause Enhancements")
        CPU_FEATURE_BIT_POS(67)
        CPU_FEATURE_ADD_ISA_NAME("waitpkg")
        CPU_FEATURE_LIBIRC_NAME("WAITPKG")
        CPU_FEATURE_ADD_MACRO_NAME("__WAITPKG__")
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_avx512bf16)
        CPU_FEATURE_DOC("Vector Neural Network Instructions supporting "
                        "BFLOAT16 inputs and Conversion instructions from "
                        "IEEE single precision.")
        CPU_FEATURE_ADD_FEATURE(c_feature_avx512f)
        CPU_FEATURE_BIT_POS(68)
        CPU_FEATURE_ADD_ISA_NAME("avx512bf16")
        CPU_FEATURE_LIBIRC_NAME("AVX512_BF16")
        CPU_FEATURE_ADD_MACRO_NAME("__AVX512BF16__")
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_enqcmd)
        CPU_FEATURE_DOC("Enqueue stores.")
        CPU_FEATURE_BIT_POS(69)
        CPU_FEATURE_ADD_ISA_NAME("enqcmd")
        CPU_FEATURE_LIBIRC_NAME("ENQCMD")
        CPU_FEATURE_ADD_MACRO_NAME("__ENQCMD__")
    CPU_FEATURE_END

//
// NOTE: Everything above this note is public.
//       Please move things up as they are disclosed.
//       Simultaneously support for new ISA features should be
//       updated in libdev/include/immintrin.h
//

#if INTEL_FEATURE_ISA_FP16
    CPU_FEATURE_BEGIN(c_feature_avx512fp16)
        CPU_FEATURE_DOC("Half Precision Vector instruction set.")
        CPU_FEATURE_ADD_FEATURE(c_feature_avx512f)
        CPU_FEATURE_BIT_POS(60)
        CPU_FEATURE_ADD_ISA_NAME("avx512fp16")
        CPU_FEATURE_LIBIRC_NAME("AVX512_FP16")
        CPU_FEATURE_ADD_MACRO_NAME("__AVX512FP16__")
        CPU_FEATURE_AUTOGENERATED
    CPU_FEATURE_END

    CPU_FEATURE_BEGIN(c_feature_avx512_4fmaph)
        CPU_FEATURE_DOC("Half Precision FMA for multivector(4 vector) "
                        "operand.")
        CPU_FEATURE_ADD_FEATURE(c_feature_avx512fp16)
        CPU_FEATURE_BIT_POS(61)
        CPU_FEATURE_ADD_ISA_NAME("avx512_4fmaph")
        CPU_FEATURE_LIBIRC_NAME("AVX512_4FMAPH")
        CPU_FEATURE_ADD_MACRO_NAME("__AVX5124FMAPH__")
    CPU_FEATURE_END
#endif // INTEL_FEATURE_ISA_FP16

    CPU_FEATURE_BEGIN(c_feature_amx_tile)
        CPU_FEATURE_DOC("AMX tile support.")
        CPU_FEATURE_ADD_FEATURE(c_feature_avx1)
        CPU_FEATURE_BIT_POS(71)
        CPU_FEATURE_ADD_ISA_NAME("amx-tile")
        CPU_FEATURE_LIBIRC_NAME("AMX-TILE")
        CPU_FEATURE_ADD_MACRO_NAME("__AMXTILE__")
    CPU_FEATURE_END
    CPU_FEATURE_BEGIN(c_feature_amx_int8)
        CPU_FEATURE_DOC("AMX tile computational operations on int8 data.")
        CPU_FEATURE_ADD_FEATURE(c_feature_amx_tile)
        CPU_FEATURE_BIT_POS(72)
        CPU_FEATURE_ADD_ISA_NAME("amx-int8")
        CPU_FEATURE_LIBIRC_NAME("AMX-INT8")
        CPU_FEATURE_ADD_MACRO_NAME("__AMXINT8__")
    CPU_FEATURE_END
    CPU_FEATURE_BEGIN(c_feature_amx_bf16)
        CPU_FEATURE_DOC("AMX tile computational operations on bfloat16 data.")
        CPU_FEATURE_ADD_FEATURE(c_feature_amx_tile)
        CPU_FEATURE_BIT_POS(73)
        CPU_FEATURE_ADD_ISA_NAME("amx-bf16")
        CPU_FEATURE_LIBIRC_NAME("AMX-BF16")
        CPU_FEATURE_ADD_MACRO_NAME("__AMXBF16__")
    CPU_FEATURE_END
