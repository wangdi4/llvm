//===- PassRegistry.def - Registry of passes --------------------*- C++ -*-===//
// INTEL_CUSTOMIZATION
//
// INTEL CONFIDENTIAL
//
// Modifications, Copyright (C) 2021-2022 Intel Corporation
//
// This software and the related documents are Intel copyrighted materials, and
// your use of them is governed by the express license under which they were
// provided to you ("License"). Unless the License provides otherwise, you may not
// use, modify, copy, publish, distribute, disclose or transmit this software or
// the related documents without Intel's prior written permission.
//
// This software and the related documents are provided as is, with no express
// or implied warranties, other than those that are expressly stated in the
// License.
//
// end INTEL_CUSTOMIZATION
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file is used as the registry of passes that are part of the core LLVM
// libraries. This file describes both transformation passes and analyses
// Analyses are registered while transformation passes have names registered
// that can be used when providing a textual pass pipeline.
//
//===----------------------------------------------------------------------===//

// NOTE: NO INCLUDE GUARD DESIRED!

#ifndef MODULE_ANALYSIS
#define MODULE_ANALYSIS(NAME, CREATE_PASS)
#endif
MODULE_ANALYSIS("callgraph", CallGraphAnalysis())
#if INTEL_CUSTOMIZATION
#if INTEL_FEATURE_SW_DTRANS
MODULE_ANALYSIS("dtransanalysis", DTransAnalysis())
MODULE_ANALYSIS("dtrans-fieldmodref-analysis", DTransFieldModRefAnalysis())
MODULE_ANALYSIS("dtrans-fieldmodrefop-analysis", DTransFieldModRefOPAnalysis())
MODULE_ANALYSIS("dtrans-module-fieldmodref-result", DTransFieldModRefResult())
MODULE_ANALYSIS("dtrans-immutable-analysis", DTransImmutableAnalysis())
MODULE_ANALYSIS("dtrans-safetyanalyzer", dtransOP::DTransSafetyAnalyzer())
#if !defined(NDEBUG) || defined(LLVM_ENABLE_DUMP)
MODULE_ANALYSIS("soatoaos-approx", dtrans::SOAToAOSApproximationDebug())
MODULE_ANALYSIS("soatoaos-struct-methods",
                dtrans::SOAToAOSStructMethodsCheckDebug())
MODULE_ANALYSIS("soatoaosop-approx", dtransOP::SOAToAOSOPApproximationDebug())
MODULE_ANALYSIS("soatoaosop-array-methods",
                dtransOP::SOAToAOSOPArrayMethodsCheckDebug())
MODULE_ANALYSIS("soatoaosop-struct-methods",
                dtransOP::SOAToAOSOPStructMethodsCheckDebug())
#endif // !defined(NDEBUG) || defined(LLVM_ENABLE_DUMP)
#endif // INTEL_FEATURE_SW_DTRANS
#endif // INTEL_CUSTOMIZATION
MODULE_ANALYSIS("lcg", LazyCallGraphAnalysis())
MODULE_ANALYSIS("module-summary", ModuleSummaryIndexAnalysis())
MODULE_ANALYSIS("no-op-module", NoOpModuleAnalysis())
MODULE_ANALYSIS("profile-summary", ProfileSummaryAnalysis())
MODULE_ANALYSIS("stack-safety", StackSafetyGlobalAnalysis())
MODULE_ANALYSIS("wholeprogram", WholeProgramAnalysis(WPUtils))     // INTEL
MODULE_ANALYSIS("xm-module-opt-level", XmainOptLevelAnalysis()) // INTEL
MODULE_ANALYSIS("verify", VerifierAnalysis())
MODULE_ANALYSIS("pass-instrumentation", PassInstrumentationAnalysis(PIC))
#if INTEL_CUSTOMIZATION
MODULE_ANALYSIS("xm-optreport-options", OptReportOptionsAnalysis())
MODULE_ANALYSIS("dpcpp-kernel-builtin-info-analysis", BuiltinLibInfoAnalysis())
MODULE_ANALYSIS("dpcpp-kernel-implicit-args-analysis", ImplicitArgsAnalysis())
MODULE_ANALYSIS("dpcpp-kernel-local-buffer-analysis", LocalBufferAnalysis())
MODULE_ANALYSIS("dpcpp-kernel-data-per-value-analysis", DataPerValueAnalysis())
MODULE_ANALYSIS("dpcpp-kernel-data-per-barrier-analysis", DataPerBarrierAnalysis())
MODULE_ANALYSIS("dpcpp-kernel-barrier-wi-analysis", WIRelatedValueAnalysis())
MODULE_ANALYSIS("dpcpp-kernel-sg-size-analysis", SGSizeAnalysisPass())
MODULE_ANALYSIS("dpcpp-kernel-vf-analysis", VFAnalysis())
MODULE_ANALYSIS("dpcpp-kernel-vec-dim-analysis", VectorizationDimensionAnalysis())
MODULE_ANALYSIS("vpo-paropt-config-analysis", VPOParoptConfigAnalysis())
#endif // INTEL_CUSTOMIZATION
MODULE_ANALYSIS("inline-advisor", InlineAdvisorAnalysis())
MODULE_ANALYSIS("ir-similarity", IRSimilarityAnalysis())

#ifndef MODULE_ALIAS_ANALYSIS
#define MODULE_ALIAS_ANALYSIS(NAME, CREATE_PASS)                               \
  MODULE_ANALYSIS(NAME, CREATE_PASS)
#endif
MODULE_ALIAS_ANALYSIS("globals-aa", GlobalsAA())
MODULE_ALIAS_ANALYSIS("anders-aa", AndersensAA())    // INTEL
#undef MODULE_ALIAS_ANALYSIS
#undef MODULE_ANALYSIS

#ifndef MODULE_PASS
#define MODULE_PASS(NAME, CREATE_PASS)
#endif
#if INTEL_CUSTOMIZATION
MODULE_PASS("vec-clone",VecClonePass());
MODULE_PASS("vplan-pragma-omp-ordered-simd-extract", VPlanPragmaOmpOrderedSimdExtractPass());
MODULE_PASS("dpcpp-kernel-add-function-attrs", AddFunctionAttrsPass())
MODULE_PASS("dpcpp-kernel-builtin-import", BuiltinImportPass())
MODULE_PASS("dpcpp-kernel-coerce-win64-types", CoerceWin64TypesPass())
MODULE_PASS("dpcpp-kernel-deduce-max-dim", DeduceMaxWGDimPass())
MODULE_PASS("dpcpp-kernel-detect-recursion", DetectRecursionPass())
MODULE_PASS("dpcpp-kernel-equalizer", DPCPPEqualizerPass())
MODULE_PASS("dpcpp-kernel-analysis", DPCPPKernelAnalysisPass())
MODULE_PASS("dpcpp-kernel-wgloop-creator", DPCPPKernelWGLoopCreatorPass())
MODULE_PASS("dpcpp-kernel-preprocess-spv-ir", DPCPPPreprocessSPIRVFriendlyIRPass())
MODULE_PASS("dpcpp-kernel-rewrite-pipes", DPCPPRewritePipesPass())
MODULE_PASS("dpcpp-kernel-add-implicit-args", AddImplicitArgsPass())
MODULE_PASS("dpcpp-kernel-add-tls-globals", AddTLSGlobalsPass())
MODULE_PASS("dpcpp-kernel-internalize-global-variables", InternalizeGlobalVariablesPass())
MODULE_PASS("dpcpp-kernel-autorun-replicator", AutorunReplicatorPass())
MODULE_PASS("dpcpp-kernel-implicit-gid", ImplicitGIDPass())
MODULE_PASS("dpcpp-kernel-infer-argument-alias", InferArgumentAliasPass())
MODULE_PASS("dpcpp-kernel-infinite-loop-creator", InfiniteLoopCreatorPass())
MODULE_PASS("dpcpp-kernel-internalize-func", InternalizeNonKernelFuncPass())
MODULE_PASS("dpcpp-kernel-linear-id-resolver", LinearIdResolverPass())
MODULE_PASS("dpcpp-kernel-local-buffers", LocalBuffersPass())
MODULE_PASS("dpcpp-kernel-reduce-cross-barrier-values", ReduceCrossBarrierValuesPass())
MODULE_PASS("dpcpp-kernel-relaxed-math", RelaxedMathPass())
MODULE_PASS("dpcpp-kernel-resolve-matrix-fill", ResolveMatrixFillPass())
MODULE_PASS("dpcpp-kernel-resolve-matrix-layout", ResolveMatrixLayoutPass())
MODULE_PASS("dpcpp-kernel-resolve-matrix-wi-slice", ResolveMatrixWISlicePass())
MODULE_PASS("dpcpp-kernel-resolve-sub-group-wi-call", ResolveSubGroupWICallPass())
MODULE_PASS("dpcpp-kernel-resolve-var-tid-call", ResolveVarTIDCallPass())
MODULE_PASS("dpcpp-kernel-resolve-wi-call", ResolveWICallPass())
MODULE_PASS("dpcpp-kernel-patch-callback-args", PatchCallbackArgsPass())
MODULE_PASS("dpcpp-kernel-pipe-io-transform", PipeIOTransformationPass())
MODULE_PASS("dpcpp-kernel-pipe-ordering", PipeOrderingPass())
MODULE_PASS("dpcpp-kernel-pipe-support", PipeSupportPass())
MODULE_PASS("dpcpp-kernel-prepare-args", PrepareKernelArgsPass())
MODULE_PASS("dpcpp-kernel-profiling-info", ProfilingInfoPass())
MODULE_PASS("dpcpp-kernel-channel-pipe-transformation", ChannelPipeTransformationPass())
MODULE_PASS("dpcpp-kernel-cleanup-wrapped", CleanupWrappedKernelPass())
MODULE_PASS("dpcpp-kernel-coerce-types", CoerceTypesPass())
MODULE_PASS("dpcpp-kernel-duplicate-called-kernels", DuplicateCalledKernelsPass())
MODULE_PASS("dpcpp-kernel-externalize-global-variables", ExternalizeGlobalVariablesPass())
MODULE_PASS("dpcpp-kernel-group-builtin", GroupBuiltinPass())
MODULE_PASS("dpcpp-kernel-inst-to-func-call", InstToFuncCallPass())
MODULE_PASS("dpcpp-kernel-barrier", KernelBarrier())
MODULE_PASS("dpcpp-kernel-barrier-in-function", BarrierInFunction())
MODULE_PASS("dpcpp-kernel-remove-duplicated-barrier", RemoveDuplicatedBarrierPass())
MODULE_PASS("dpcpp-kernel-postvec", DPCPPKernelPostVecPass())
MODULE_PASS("dpcpp-kernel-split-on-barrier", SplitBBonBarrier())
MODULE_PASS("dpcpp-kernel-update-call-attrs", UpdateCallAttrs())
MODULE_PASS("dpcpp-kernel-vec-clone", DPCPPKernelVecClonePass())
MODULE_PASS("dpcpp-kernel-vec-kernel-elim", VectorKernelEliminationPass())
MODULE_PASS("dpcpp-kernel-vector-variant-fillin", VectorVariantFillIn())
MODULE_PASS("dpcpp-kernel-vector-variant-lowering", VectorVariantLowering())
MODULE_PASS("dpcpp-kernel-create-simd-variant-propagation", CreateSimdVariantPropagation())
MODULE_PASS("dpcpp-kernel-reqd-sub-group-size", ReqdSubGroupSizePass())
MODULE_PASS("dpcpp-kernel-replace-scalar-with-mask", ReplaceScalarWithMaskPass())
MODULE_PASS("dpcpp-kernel-set-vf", SetVectorizationFactorPass())
MODULE_PASS("dpcpp-kernel-sg-emu-barrier-propagate", SGBarrierPropagatePass())
MODULE_PASS("dpcpp-kernel-sg-emu-barrier-simplify", SGBarrierSimplifyPass())
MODULE_PASS("dpcpp-kernel-sg-emu-builtin", SGBuiltinPass())
MODULE_PASS("dpcpp-kernel-sg-emu-loop-construct", SGLoopConstructPass())
MODULE_PASS("dpcpp-kernel-sg-emu-value-widen", SGValueWidenPass())
MODULE_PASS("dpcpp-kernel-sg-remap-wi-call", SGRemapWICallPass())
MODULE_PASS("dpcpp-kernel-sg-size-collector", SGSizeCollectorPass())
MODULE_PASS("dpcpp-kernel-sg-size-collector-indirect", SGSizeCollectorIndirectPass())
MODULE_PASS("dpcpp-kernel-spec-constant", SpecializeConstantPass())
MODULE_PASS("dpcpp-kernel-handle-taskseq-async", TaskSeqAsyncHandling())
MODULE_PASS("dpcpp-kernel-indirect-call-lowering", IndirectCallLowering())
MODULE_PASS("dpcpp-kernel-convert-vplan-mask", HandleVPlanMask())
MODULE_PASS("dpcpp-kernel-wg-loop-bound", WGLoopBoundariesPass())
MODULE_PASS("dpcpp-kernel-remove-atexit", RemoveAtExitPass())
MODULE_PASS("dpcpp-kernel-set-prefer-vector-width", SetPreferVectorWidthPass())

MODULE_PASS("print<dpcpp-kernel-builtin-info-analysis>", BuiltinLibInfoAnalysisPrinter(dbgs()))
MODULE_PASS("print<dpcpp-kernel-data-per-barrier-analysis>", DataPerBarrierPrinter(dbgs()))
MODULE_PASS("print<dpcpp-kernel-data-per-value-analysis>", DataPerValuePrinter(dbgs()))
MODULE_PASS("print<dpcpp-kernel-barrier-wi-analysis>", WIRelatedValuePrinter(dbgs()))
MODULE_PASS("print<dpcpp-kernel-local-buffer-analysis>", LocalBufferAnalysisPrinter(dbgs()))
MODULE_PASS("print<dpcpp-kernel-sg-size-analysis>", SGSizeAnalysisPrinter(dbgs()))
MODULE_PASS("print<dpcpp-kernel-vf-analysis>", VFAnalysisPrinter(dbgs()))
MODULE_PASS("print<dpcpp-kernel-vec-dim-analysis>", VectorizationDimensionAnalysisPrinter(dbgs()))

#endif //INTEL_CUSTOMIZATION
MODULE_PASS("agginliner", AggInlinerPass()) // INTEL
MODULE_PASS("always-inline", AlwaysInlinerPass())
MODULE_PASS("arg-noalias-prop", ArgNoAliasPropPass()) // INTEL
MODULE_PASS("attributor", AttributorPass())
MODULE_PASS("annotation2metadata", Annotation2MetadataPass())
#if INTEL_CUSTOMIZATION
MODULE_PASS("auto-cpu-clone", AutoCPUClonePass())
#endif //INTEL_CUSTOMIZATION
MODULE_PASS("openmp-opt", OpenMPOptPass())
MODULE_PASS("called-value-propagation", CalledValuePropagationPass())
MODULE_PASS("canonicalize-aliases", CanonicalizeAliasesPass())
MODULE_PASS("cg-profile", CGProfilePass())
MODULE_PASS("check-debugify", NewPMCheckDebugifyPass())
MODULE_PASS("constmerge", ConstantMergePass())
MODULE_PASS("coro-early", CoroEarlyPass())
MODULE_PASS("coro-cleanup", CoroCleanupPass())
MODULE_PASS("cross-dso-cfi", CrossDSOCFIPass())
MODULE_PASS("deadargelim", DeadArgumentEliminationPass())
MODULE_PASS("debugify", NewPMDebugifyPass())
#if INTEL_FEATURE_SW_DTRANS
MODULE_PASS("dtrans-aostosoa", dtrans::AOSToSOAPass())           // INTEL
MODULE_PASS("dtrans-aostosoaop", dtransOP::AOSToSOAOPPass())     // INTEL
MODULE_PASS("dtrans-reusefield", dtrans::ReuseFieldPass())       // INTEL
MODULE_PASS("dtrans-reusefieldop", dtransOP::ReuseFieldOPPass()) // INTEL
MODULE_PASS("dtrans-deletefield", dtrans::DeleteFieldPass())     // INTEL
MODULE_PASS("dtrans-deletefieldop", dtransOP::DeleteFieldOPPass()) // INTEL
MODULE_PASS("dtrans-reorderfields", dtrans::ReorderFieldsPass()) // INTEL
MODULE_PASS("dtrans-reorderfieldsop", dtransOP::ReorderFieldsOPPass()) // INTEL
MODULE_PASS("dtrans-resolvetypes", dtrans::ResolveTypesPass())   // INTEL
MODULE_PASS("dtrans-dynclone", dtrans::DynClonePass())           // INTEL
MODULE_PASS("dtrans-dyncloneop", dtransOP::DynClonePass())       // INTEL
MODULE_PASS("dtrans-soatoaos-prepare", dtrans::SOAToAOSPreparePass()) // INTEL
MODULE_PASS("dtrans-soatoaosop-prepare", dtransOP::SOAToAOSOPPreparePass()) // INTEL
MODULE_PASS("dtrans-soatoaos", dtrans::SOAToAOSPass())           // INTEL
MODULE_PASS("dtrans-soatoaosop", dtransOP::SOAToAOSOPPass())     // INTEL
MODULE_PASS("dtrans-weakalign", dtrans::WeakAlignPass())         // INTEL
MODULE_PASS("dtrans-paddedmalloc", dtrans::PaddedMallocPass())       // INTEL
MODULE_PASS("dtrans-paddedmallocop", dtransOP::PaddedMallocOPPass()) // INTEL
MODULE_PASS("padded-pointer-prop", dtrans::PaddedPtrPropPass())        // INTEL
MODULE_PASS("padded-pointer-prop-op", dtransOP::PaddedPtrPropOPPass()) // INTEL
MODULE_PASS("dtrans-elim-ro-field-access",                       // INTEL
            dtrans::EliminateROFieldAccessPass())                // INTEL
MODULE_PASS("dtrans-elim-ro-field-access-op",                    // INTEL
            dtransOP::EliminateROFieldAccessPass())              // INTEL
MODULE_PASS("dtrans-meminittrimdown", dtrans::MemInitTrimDownPass()) // INTEL
MODULE_PASS("dtrans-meminittrimdownop", dtransOP::MemInitTrimDownOPPass()) // INTEL
MODULE_PASS("dtrans-memmanagetrans", dtrans::MemManageTransPass()) // INTEL
MODULE_PASS("dtrans-memmanagetransop", dtransOP::MemManageTransOPPass()) // INTEL
MODULE_PASS("dtrans-normalizeop", dtransOP::DTransNormalizeOPPass()) // INTEL
MODULE_PASS("dtrans-codealign", dtrans::CodeAlignPass())         // INTEL
MODULE_PASS("dtrans-codealignop", dtransOP::CodeAlignPass())   // INTEL
MODULE_PASS("dtrans-transpose", dtrans::TransposePass())         // INTEL
MODULE_PASS("dtrans-commutecond", dtrans::CommuteCondPass())     // INTEL
MODULE_PASS("dtrans-commutecondop", dtransOP::CommuteCondOPPass()) // INTEL
MODULE_PASS("dtrans-force-inline",           // INTEL
            dtrans::DTransForceInlinePass()) // INTEL
MODULE_PASS("dtrans-force-inline-op",            // INTEL
            dtransOP::DTransForceInlineOPPass()) // INTEL
MODULE_PASS("remove-all-dtranstypemetadata",              // INTEL
            dtransOP::RemoveAllDTransTypeMetadataPass()) // INTEL
MODULE_PASS("remove-dead-dtranstypemetadata",              // INTEL
            dtransOP::RemoveDeadDTransTypeMetadataPass()) // INTEL
#if !INTEL_PRODUCT_RELEASE
MODULE_PASS("dtransop-optbasetest", dtransOP::DTransOPOptBaseTestPass()) // INTEL
MODULE_PASS("dtrans-optbasetest", dtrans::OptBaseTestPass()) // INTEL
MODULE_PASS("dtrans-typemetadatareader",                         // INTEL
            dtransOP::DTransTypeMetadataReaderTestPass())          // INTEL
MODULE_PASS("dtrans-ptrtypeanalyzertest",                        // INTEL
            dtransOP::DTransPtrTypeAnalyzerTestPass())             // INTEL
#endif // !INTEL_PRODUCT_RELEASE
#if !defined(NDEBUG) || defined(LLVM_ENABLE_DUMP)
MODULE_PASS("soatoaos-arrays-methods-transform",                 // INTEL
            dtrans::SOAToAOSArrayMethodsTransformDebug())        // INTEL
MODULE_PASS("soatoaos-struct-methods-transform",                 // INTEL
            dtrans::SOAToAOSStructMethodsTransformDebug())       // INTEL
MODULE_PASS("soatoaosop-arrays-methods-transform",               // INTEL
            dtransOP::SOAToAOSArrayMethodsTransformDebug())      // INTEL
MODULE_PASS("soatoaosop-struct-methods-transform",               // INTEL
            dtransOP::SOAToAOSStructMethodsTransformDebug())     // INTEL
#endif // !defined(NDEBUG) || defined(LLVM_ENABLE_DUMP)
MODULE_PASS("dtrans-annotator-cleaner", dtrans::AnnotatorCleanerPass()) // INTEL
#endif // INTEL_FEATURE_SW_DTRANS
MODULE_PASS("dot-callgraph", CallGraphDOTPrinterPass())
MODULE_PASS("elim-avail-extern", EliminateAvailableExternallyPass())
MODULE_PASS("extract-blocks", BlockExtractorPass())
MODULE_PASS("forceattrs", ForceFunctionAttrsPass())
MODULE_PASS("function-import", FunctionImportPass())
MODULE_PASS("function-splitting", FunctionSplittingPass()) // INTEL
MODULE_PASS("function-specialization", FunctionSpecializationPass())
MODULE_PASS("globaldce", GlobalDCEPass())
MODULE_PASS("globalopt", GlobalOptPass())
MODULE_PASS("globalsplit", GlobalSplitPass())
MODULE_PASS("hotcoldsplit", HotColdSplittingPass())
#if INTEL_CUSTOMIZATION
#if INTEL_FEATURE_SW_DTRANS
MODULE_PASS("indirectcallconv", IndirectCallConvPass(/*UseAndersen=*/false,
                                                     /*UseDTrans=*/false))
#else  // INTEL_FEATURE_SW_DTRANS
MODULE_PASS("indirectcallconv", IndirectCallConvPass(/*UseAndersen=*/false))
#endif // INTEL_FEATURE_SW_DTRANS
#endif // INTEL_CUSTOMIZATION
MODULE_PASS("inferattrs", InferFunctionAttrsPass())
MODULE_PASS("inliner-wrapper", ModuleInlinerWrapperPass())
MODULE_PASS("inliner-ml-advisor-release", ModuleInlinerWrapperPass(getInlineParams(), true, {}, InliningAdvisorMode::Release, 0))
MODULE_PASS("print<inline-advisor>", InlineAdvisorAnalysisPrinterPass(dbgs()))
#if INTEL_CUSTOMIZATION
MODULE_PASS("print<inline-report>", InlineReportPass())
#endif // INTEL_CUSTOMIZATION
MODULE_PASS("inliner-wrapper-no-mandatory-first", ModuleInlinerWrapperPass(
  getInlineParams(),
  false))
MODULE_PASS("insert-gcov-profiling", GCOVProfilerPass())
MODULE_PASS("instrorderfile", InstrOrderFilePass())
MODULE_PASS("instrprof", InstrProfiling())
MODULE_PASS("internalize", InternalizePass())
MODULE_PASS("invalidate<all>", InvalidateAllAnalysesPass())
#if INTEL_CUSTOMIZATION
#if INTEL_FEATURE_SW_ADVANCED
MODULE_PASS("ip-cloning", IPCloningPass(/*AfterInl*/ false,
                                        /*IFSwitchHeuristic*/ false))
#endif // INTEL_FEATURE_SW_ADVANCED
MODULE_PASS("intel-argument-alignment", IntelArgumentAlignmentPass())
#if INTEL_FEATURE_SW_ADVANCED
MODULE_PASS("intel-partialinline", IntelPartialInlinePass())
#endif // INTEL_FEATURE_SW_ADVANCED
#if INTEL_FEATURE_SW_ADVANCED
MODULE_PASS("post-inline-ip-cloning", IPCloningPass(/*AfterInl*/ true,
                                        /*IFSwitchHeuristic*/ false))
#endif // INTEL_FEATURE_SW_ADVANCED
MODULE_PASS("call-tree-clone", CallTreeCloningPass())
#if INTEL_FEATURE_SW_ADVANCED
MODULE_PASS("deadarrayopselimination", DeadArrayOpsEliminationPass())
#endif // INTEL_FEATURE_SW_ADVANCED
MODULE_PASS("dopevectorconstprop", DopeVectorConstPropPass())
#if INTEL_FEATURE_SW_DTRANS
MODULE_PASS("intel-fold-wp-intrinsic", IntelFoldWPIntrinsicPass())
#endif // INTEL_FEATURE_SW_DTRANS
MODULE_PASS("intel-math-libraries-decl", IntelMathLibrariesDeclarationPass())
MODULE_PASS("intel-ipo-dead-arg-elimination", IntelIPODeadArgEliminationPass())
#endif // INTEL_CUSTOMIZATION
MODULE_PASS("ipsccp", IPSCCPPass())
MODULE_PASS("iroutliner", IROutlinerPass())
MODULE_PASS("print-ir-similarity", IRSimilarityAnalysisPrinterPass(dbgs()))
MODULE_PASS("lower-global-dtors", LowerGlobalDtorsPass())
MODULE_PASS("lowertypetests", LowerTypeTestsPass())
MODULE_PASS("metarenamer", MetaRenamerPass())
MODULE_PASS("mergefunc", MergeFunctionsPass())
MODULE_PASS("name-anon-globals", NameAnonGlobalPass())
MODULE_PASS("no-op-module", NoOpModulePass())
MODULE_PASS("optimize-dyn-casts", OptimizeDynamicCastsPass())
MODULE_PASS("objc-arc-apelim", ObjCARCAPElimPass())
MODULE_PASS("partial-inliner", PartialInlinerPass())
MODULE_PASS("pgo-icall-prom", PGOIndirectCallPromotion())
MODULE_PASS("pgo-instr-gen", PGOInstrumentationGen())
MODULE_PASS("pgo-instr-use", PGOInstrumentationUse())
MODULE_PASS("print-profile-summary", ProfileSummaryPrinterPass(dbgs()))
MODULE_PASS("print-callgraph", CallGraphPrinterPass(dbgs()))
MODULE_PASS("print-callgraph-sccs", CallGraphSCCsPrinterPass(dbgs()))
MODULE_PASS("print", PrintModulePass(dbgs()))
MODULE_PASS("print-lcg", LazyCallGraphPrinterPass(dbgs()))
MODULE_PASS("print-lcg-dot", LazyCallGraphDOTPrinterPass(dbgs()))
MODULE_PASS("print-must-be-executed-contexts", MustBeExecutedContextPrinterPass(dbgs()))
MODULE_PASS("print-stack-safety", StackSafetyGlobalPrinterPass(dbgs()))
MODULE_PASS("print<module-debuginfo>", ModuleDebugInfoPrinterPass(dbgs()))
MODULE_PASS("recompute-globalsaa", RecomputeGlobalsAAPass())
MODULE_PASS("rel-lookup-table-converter", RelLookupTableConverterPass())
#if INTEL_CUSTOMIZATION
#if INTEL_FEATURE_SW_ADVANCED
MODULE_PASS("qsortrecognizer", QsortRecognizerPass()) // INTEL
#endif // INTEL_FEATURE_SW_ADVANCED
#endif // INTEL_CUSTOMIZATION
MODULE_PASS("rewrite-statepoints-for-gc", RewriteStatepointsForGC())
MODULE_PASS("rewrite-symbols", RewriteSymbolPass())
MODULE_PASS("rpo-function-attrs", ReversePostOrderFunctionAttrsPass())
MODULE_PASS("sample-profile", SampleProfileLoaderPass())
MODULE_PASS("scc-oz-module-inliner",
  buildInlinerPipeline(OptimizationLevel::Oz, ThinOrFullLTOPhase::None))
MODULE_PASS("strip", StripSymbolsPass())
MODULE_PASS("strip-dead-debug-info", StripDeadDebugInfoPass())
MODULE_PASS("pseudo-probe", SampleProfileProbePass(TM))
MODULE_PASS("strip-dead-prototypes", StripDeadPrototypesPass())
MODULE_PASS("strip-debug-declare", StripDebugDeclarePass())
MODULE_PASS("strip-nondebug", StripNonDebugSymbolsPass())
MODULE_PASS("strip-nonlinetable-debuginfo", StripNonLineTableDebugInfoPass())
MODULE_PASS("synthetic-counts-propagation", SyntheticCountsPropagation())
#if INTEL_CUSTOMIZATION
#if INTEL_FEATURE_SW_ADVANCED
MODULE_PASS("tilemvinlmarker", TileMVInlMarkerPass())
#endif // INTEL_FEATURE_SW_ADVANCED
#endif // INTEL_CUSTOMIZATION
MODULE_PASS("trigger-crash", TriggerCrashPass())
MODULE_PASS("verify", VerifierPass())
MODULE_PASS("view-callgraph", CallGraphViewerPass())
MODULE_PASS("wholeprogramdevirt", WholeProgramDevirtPass())
MODULE_PASS("dfsan", DataFlowSanitizerPass())
MODULE_PASS("module-inline", ModuleInlinerPass())
MODULE_PASS("tsan-module", ModuleThreadSanitizerPass())
MODULE_PASS("sancov-module", SanitizerCoveragePass())
MODULE_PASS("sanmd-module", SanitizerBinaryMetadataPass())
MODULE_PASS("memprof-module", ModuleMemProfilerPass())
MODULE_PASS("poison-checking", PoisonCheckingPass())
MODULE_PASS("pseudo-probe-update", PseudoProbeUpdatePass())
MODULE_PASS("LowerESIMD", SYCLLowerESIMDPass())
MODULE_PASS("lower-kernel-props", SYCLLowerKernelPropsPass())
MODULE_PASS("ESIMDLowerVecArg", ESIMDLowerVecArgPass())
MODULE_PASS("esimd-opt-call-conv", ESIMDOptimizeVecArgCallConvPass())
MODULE_PASS("esimd-verifier", ESIMDVerifierPass())
MODULE_PASS("lower-invoke-simd", SYCLLowerInvokeSimdPass())
MODULE_PASS("SYCLMutatePrintfAddrspace", SYCLMutatePrintfAddrspacePass())
MODULE_PASS("SPIRITTAnnotations", SPIRITTAnnotationsPass())
MODULE_PASS("deadargelim-sycl", DeadArgumentEliminationSYCLPass())
MODULE_PASS("sycllowerwglocalmemory", SYCLLowerWGLocalMemoryPass())
MODULE_PASS("lower-esimd-kernel-attrs", SYCLFixupESIMDKernelWrapperMDPass())
MODULE_PASS("inlinelists", InlineListsPass()) // INTEL
MODULE_PASS("inlinereportsetup", InlineReportSetupPass()) // INTEL
MODULE_PASS("inlinereportemitter", InlineReportEmitterPass()) // INTEL
MODULE_PASS("intel-advancedfastcall", IntelAdvancedFastCallPass()) // INTEL
MODULE_PASS("iparraytranspose", IPArrayTransposePass()) // INTEL
MODULE_PASS("transform-fpga-reg", TransformFPGARegPass()) // INTEL
#if INTEL_CUSTOMIZATION
#if INTEL_FEATURE_SW_ADVANCED
MODULE_PASS("intel-ipoprefetch", IntelIPOPrefetchPass())
MODULE_PASS("ippredopt", IPPredOptPass())
#endif // INTEL_FEATURE_SW_ADVANCED
#endif // INTEL_CUSTOMIZATION
MODULE_PASS("vtable-fixup", IntelVTableFixupPass()) // INTEL
#if INTEL_COLLAB
MODULE_PASS("vpo-paropt", VPOParoptPass())
MODULE_PASS("vpo-paropt-tpv", VPOParoptTpvLegacyPass())
#endif // INTEL_COLLAB
MODULE_PASS("vpo-paropt-target-inline", VPOParoptTargetInlinePass()) // INTEL
MODULE_PASS("sycl-propagate-aspects-usage", SYCLPropagateAspectsUsagePass())
#undef MODULE_PASS

#ifndef MODULE_PASS_WITH_PARAMS
#define MODULE_PASS_WITH_PARAMS(NAME, CLASS, CREATE_PASS, PARSER, PARAMS)
#endif
MODULE_PASS_WITH_PARAMS("loop-extract",
                        "LoopExtractorPass",
                        [](bool Single) {
                          if (Single)
                            return LoopExtractorPass(1);
                          return LoopExtractorPass();
                        },
                        parseLoopExtractorPassOptions,
                        "single")
MODULE_PASS_WITH_PARAMS("hwasan",
                        "HWAddressSanitizerPass",
                        [](HWAddressSanitizerOptions Opts) {
                          return HWAddressSanitizerPass(Opts);
                        },
                        parseHWASanPassOptions,
                        "kernel;recover")
MODULE_PASS_WITH_PARAMS("asan",
                        "AddressSanitizerPass",
                        [](AddressSanitizerOptions Opts) {
                          return AddressSanitizerPass(Opts);
                        },
                        parseASanPassOptions,
                        "kernel")
MODULE_PASS_WITH_PARAMS("msan",
                        "MemorySanitizerPass",
                        [](MemorySanitizerOptions Opts) {
                          return MemorySanitizerPass(Opts);
                        },
                        parseMSanPassOptions,
                        "recover;kernel;eager-checks;track-origins=N")
#undef MODULE_PASS_WITH_PARAMS

#ifndef CGSCC_ANALYSIS
#define CGSCC_ANALYSIS(NAME, CREATE_PASS)
#endif
CGSCC_ANALYSIS("no-op-cgscc", NoOpCGSCCAnalysis())
CGSCC_ANALYSIS("fam-proxy", FunctionAnalysisManagerCGSCCProxy())
CGSCC_ANALYSIS("pass-instrumentation", PassInstrumentationAnalysis(PIC))
#undef CGSCC_ANALYSIS

#ifndef CGSCC_PASS
#define CGSCC_PASS(NAME, CREATE_PASS)
#endif
CGSCC_PASS("argpromotion", ArgumentPromotionPass())
CGSCC_PASS("invalidate<all>", InvalidateAllAnalysesPass())
CGSCC_PASS("function-attrs", PostOrderFunctionAttrsPass())
CGSCC_PASS("attributor-cgscc", AttributorCGSCCPass())
CGSCC_PASS("openmp-opt-cgscc", OpenMPOptCGSCCPass())
CGSCC_PASS("no-op-cgscc", NoOpCGSCCPass())
#undef CGSCC_PASS

#ifndef CGSCC_PASS_WITH_PARAMS
#define CGSCC_PASS_WITH_PARAMS(NAME, CLASS, CREATE_PASS, PARSER, PARAMS)
#endif
CGSCC_PASS_WITH_PARAMS("inline",
                       "InlinerPass",
                       [](bool OnlyMandatory) {
                         return InlinerPass(OnlyMandatory);
                       },
                       parseInlinerPassOptions,
                       "only-mandatory")
CGSCC_PASS_WITH_PARAMS("coro-split",
                       "CoroSplitPass",
                       [](bool OptimizeFrame) {
                         return CoroSplitPass(OptimizeFrame);
                       },
                       parseCoroSplitPassOptions,
                       "reuse-storage")
#undef CGSCC_PASS_WITH_PARAMS

#ifndef FUNCTION_ANALYSIS
#define FUNCTION_ANALYSIS(NAME, CREATE_PASS)
#endif
FUNCTION_ANALYSIS("aa", AAManager())
FUNCTION_ANALYSIS("assumptions", AssumptionAnalysis())
FUNCTION_ANALYSIS("block-freq", BlockFrequencyAnalysis())
FUNCTION_ANALYSIS("branch-prob", BranchProbabilityAnalysis())
FUNCTION_ANALYSIS("cycles", CycleAnalysis())
FUNCTION_ANALYSIS("domtree", DominatorTreeAnalysis())
FUNCTION_ANALYSIS("postdomtree", PostDominatorTreeAnalysis())
FUNCTION_ANALYSIS("demanded-bits", DemandedBitsAnalysis())
FUNCTION_ANALYSIS("domfrontier", DominanceFrontierAnalysis())
FUNCTION_ANALYSIS("func-properties", FunctionPropertiesAnalysis())
FUNCTION_ANALYSIS("loops", LoopAnalysis())
FUNCTION_ANALYSIS("access-info", LoopAccessAnalysis())
FUNCTION_ANALYSIS("lazy-value-info", LazyValueAnalysis())
FUNCTION_ANALYSIS("da", DependenceAnalysis())
FUNCTION_ANALYSIS("inliner-size-estimator", InlineSizeEstimatorAnalysis())
FUNCTION_ANALYSIS("memdep", MemoryDependenceAnalysis())
FUNCTION_ANALYSIS("memoryssa", MemorySSAAnalysis())
FUNCTION_ANALYSIS("phi-values", PhiValuesAnalysis())
FUNCTION_ANALYSIS("regions", RegionInfoAnalysis())
FUNCTION_ANALYSIS("no-op-function", NoOpFunctionAnalysis())
FUNCTION_ANALYSIS("opt-remark-emit", OptimizationRemarkEmitterAnalysis())
FUNCTION_ANALYSIS("scalar-evolution", ScalarEvolutionAnalysis())
FUNCTION_ANALYSIS("should-not-run-function-passes", ShouldNotRunFunctionPassesAnalysis())
FUNCTION_ANALYSIS("should-run-extra-vector-passes", ShouldRunExtraVectorPasses())
FUNCTION_ANALYSIS("stack-safety-local", StackSafetyAnalysis())
FUNCTION_ANALYSIS("targetlibinfo", TargetLibraryAnalysis())
FUNCTION_ANALYSIS("targetir",
                  TM ? TM->getTargetIRAnalysis() : TargetIRAnalysis())
FUNCTION_ANALYSIS("verify", VerifierAnalysis())
FUNCTION_ANALYSIS("pass-instrumentation", PassInstrumentationAnalysis(PIC))
FUNCTION_ANALYSIS("divergence", DivergenceAnalysis())

#if INTEL_CUSTOMIZATION
#if INTEL_FEATURE_SW_DTRANS
#if !defined(NDEBUG) || defined(LLVM_ENABLE_DUMP)
FUNCTION_ANALYSIS("soatoaos-array-methods", dtrans::SOAToAOSArrayMethodsCheckDebug())
#endif // !defined(NDEBUG) || defined(LLVM_ENABLE_DUMP)
#endif // INTEL_FEATURE_SW_DTRANS

FUNCTION_ANALYSIS("array-use", ArrayUseAnalysis())
FUNCTION_ANALYSIS("xm-opt-level", XmainOptLevelAnalysis())
FUNCTION_ANALYSIS("xm-optreport-options", OptReportOptionsAnalysis())
FUNCTION_ANALYSIS("hir-region-identification", loopopt::HIRRegionIdentificationAnalysis())
FUNCTION_ANALYSIS("hir-scc-formation", loopopt::HIRSCCFormationAnalysis())
FUNCTION_ANALYSIS("hir-framework", loopopt::HIRFrameworkAnalysis())
FUNCTION_ANALYSIS("hir-loop-statistics", loopopt::HIRLoopStatisticsAnalysis())
FUNCTION_ANALYSIS("hir-loop-resource", loopopt::HIRLoopResourceAnalysis())
FUNCTION_ANALYSIS("hir-locality-analysis", loopopt::HIRLoopLocalityAnalysis())
FUNCTION_ANALYSIS("hir-dd-analysis", loopopt::HIRDDAnalysisPass())
FUNCTION_ANALYSIS("hir-safe-reduction-analysis", loopopt::HIRSafeReductionAnalysisPass())
FUNCTION_ANALYSIS("hir-sparse-array-reduction-analysis", loopopt::HIRSparseArrayReductionAnalysisPass())
FUNCTION_ANALYSIS("hir-parvec-analysis", loopopt::HIRParVecAnalysisPass())
FUNCTION_ANALYSIS("hir-array-section-analysis", loopopt::HIRArraySectionAnalysisPass())

FUNCTION_ANALYSIS("dpcpp-kernel-soa-alloca-analysis", SoaAllocaAnalysis())
FUNCTION_ANALYSIS("dpcpp-kernel-weighted-inst-count-analysis", WeightedInstCountAnalysis())
FUNCTION_ANALYSIS("dpcpp-kernel-work-item-analysis", WorkItemAnalysis())
#endif // INTEL_CUSTOMIZATION
#if INTEL_COLLAB
FUNCTION_ANALYSIS("vpo-wrncollection", WRegionCollectionAnalysis())
FUNCTION_ANALYSIS("vpo-wrninfo", WRegionInfoAnalysis())
#endif // INTEL_COLLAB

#ifndef FUNCTION_ALIAS_ANALYSIS
#define FUNCTION_ALIAS_ANALYSIS(NAME, CREATE_PASS)                             \
  FUNCTION_ANALYSIS(NAME, CREATE_PASS)
#endif
FUNCTION_ALIAS_ANALYSIS("basic-aa", BasicAA())
FUNCTION_ALIAS_ANALYSIS("cfl-anders-aa", CFLAndersAA())
FUNCTION_ALIAS_ANALYSIS("cfl-steens-aa", CFLSteensAA())
FUNCTION_ALIAS_ANALYSIS("dpcpp-kernel-aa", DPCPPAliasAnalysis()) // INTEL
FUNCTION_ALIAS_ANALYSIS("objc-arc-aa", objcarc::ObjCARCAA())
FUNCTION_ALIAS_ANALYSIS("scev-aa", SCEVAA())
FUNCTION_ALIAS_ANALYSIS("scoped-noalias-aa", ScopedNoAliasAA())
FUNCTION_ALIAS_ANALYSIS("tbaa", TypeBasedAA())
FUNCTION_ALIAS_ANALYSIS("std-container-alias", StdContainerAA()) // INTEL
#undef FUNCTION_ALIAS_ANALYSIS
#undef FUNCTION_ANALYSIS

#ifndef FUNCTION_PASS
#define FUNCTION_PASS(NAME, CREATE_PASS)
#endif
FUNCTION_PASS("aa-eval", AAEvaluator())
FUNCTION_PASS("adce", ADCEPass())
FUNCTION_PASS("add-discriminators", AddDiscriminatorsPass())
FUNCTION_PASS("aggressive-instcombine", AggressiveInstCombinePass())
FUNCTION_PASS("assume-builder", AssumeBuilderPass())
FUNCTION_PASS("assume-simplify", AssumeSimplifyPass())
FUNCTION_PASS("alignment-from-assumptions", AlignmentFromAssumptionsPass())
FUNCTION_PASS("annotation-remarks", AnnotationRemarksPass())
FUNCTION_PASS("bdce", BDCEPass())
FUNCTION_PASS("bounds-checking", BoundsCheckingPass())
FUNCTION_PASS("break-crit-edges", BreakCriticalEdgesPass())
FUNCTION_PASS("callsite-splitting", CallSiteSplittingPass())
FUNCTION_PASS("tbaa-prop", TbaaMDPropagationPass())        // INTEL
FUNCTION_PASS("cleanup-fakeloads", CleanupFakeLoadsPass()) // INTEL
FUNCTION_PASS("consthoist", ConstantHoistingPass())
FUNCTION_PASS("constraint-elimination", ConstraintEliminationPass())
FUNCTION_PASS("chr", ControlHeightReductionPass())
FUNCTION_PASS("convert-to-subscript", ConvertGEPToSubscriptIntrinsicPass()) // INTEL
FUNCTION_PASS("coro-elide", CoroElidePass())
FUNCTION_PASS("correlated-propagation", CorrelatedValuePropagationPass())
FUNCTION_PASS("dce", DCEPass())
FUNCTION_PASS("dfa-jump-threading", DFAJumpThreadingPass())
FUNCTION_PASS("div-rem-pairs", DivRemPairsPass())
FUNCTION_PASS("dse", DSEPass())
FUNCTION_PASS("dopevectorhoist", DopeVectorHoistPass()) // INTEL
FUNCTION_PASS("dot-cfg", CFGPrinterPass())
FUNCTION_PASS("dot-cfg-only", CFGOnlyPrinterPass())
FUNCTION_PASS("dot-dom", DomPrinter())
FUNCTION_PASS("dot-dom-only", DomOnlyPrinter())
FUNCTION_PASS("dot-post-dom", PostDomPrinter())
FUNCTION_PASS("dot-post-dom-only", PostDomOnlyPrinter())
FUNCTION_PASS("view-dom", DomViewer())
FUNCTION_PASS("view-dom-only", DomOnlyViewer())
FUNCTION_PASS("view-post-dom", PostDomViewer())
FUNCTION_PASS("view-post-dom-only", PostDomOnlyViewer())
FUNCTION_PASS("fix-irreducible", FixIrreduciblePass())
FUNCTION_PASS("flattencfg", FlattenCFGPass())
FUNCTION_PASS("make-guards-explicit", MakeGuardsExplicitPass())
FUNCTION_PASS("fma-splitter", FMASplitterPass()) // INTEL
FUNCTION_PASS("gvn-hoist", GVNHoistPass())
#if INTEL_CUSTOMIZATION
#if INTEL_FEATURE_SW_ADVANCED
FUNCTION_PASS("functionrecognizer", FunctionRecognizerPass()) // INTEL
#endif // INTEL_FEATURE_SW_ADVANCED
#endif // INTEL_CUSTOMIZATION
FUNCTION_PASS("gvn-sink", GVNSinkPass())
FUNCTION_PASS("helloworld", HelloWorldPass())
FUNCTION_PASS("infer-address-spaces", InferAddressSpacesPass())
FUNCTION_PASS("instcombine", InstCombinePass())
FUNCTION_PASS("instcount", InstCountPass())
FUNCTION_PASS("instsimplify", InstSimplifyPass())
FUNCTION_PASS("intel-loop-attrs", IntelLoopAttrsPass())  // INTEL
FUNCTION_PASS("invalidate<all>", InvalidateAllAnalysesPass())
FUNCTION_PASS("irce", IRCEPass())
FUNCTION_PASS("float2int", Float2IntPass())
FUNCTION_PASS("no-op-function", NoOpFunctionPass())
FUNCTION_PASS("libcalls-shrinkwrap", LibCallsShrinkWrapPass())
FUNCTION_PASS("lint", LintPass())
FUNCTION_PASS("inject-tli-mappings", InjectTLIMappings())
FUNCTION_PASS("instnamer", InstructionNamerPass())
FUNCTION_PASS("localdvprop", DopeVectorConstPropPass()) // INTEL
FUNCTION_PASS("loweratomic", LowerAtomicPass())
FUNCTION_PASS("lower-expect", LowerExpectIntrinsicPass())
FUNCTION_PASS("lower-guard-intrinsic", LowerGuardIntrinsicPass())
FUNCTION_PASS("lower-constant-intrinsics", LowerConstantIntrinsicsPass())
FUNCTION_PASS("lower-widenable-condition", LowerWidenableConditionPass())
FUNCTION_PASS("lower-subscript", LowerSubscriptIntrinsicPass()) // INTEL
FUNCTION_PASS("guard-widening", GuardWideningPass())
FUNCTION_PASS("load-store-vectorizer", LoadStoreVectorizerPass())
FUNCTION_PASS("loop-simplify", LoopSimplifyPass())
#if INTEL_COLLAB
FUNCTION_PASS("loop-simplify-unskippable", LoopSimplifyUnskippablePass())
#endif // INTEL_COLLAB
FUNCTION_PASS("loop-sink", LoopSinkPass())
FUNCTION_PASS("lowerinvoke", LowerInvokePass())
FUNCTION_PASS("lowerswitch", LowerSwitchPass())
FUNCTION_PASS("mem2reg", PromotePass())
FUNCTION_PASS("memcpyopt", MemCpyOptPass())
FUNCTION_PASS("mergeicmps", MergeICmpsPass())
FUNCTION_PASS("multiversioning", MultiVersioningPass()) // INTEL
FUNCTION_PASS("mergereturn", UnifyFunctionExitNodesPass())
FUNCTION_PASS("nary-reassociate", NaryReassociatePass())
FUNCTION_PASS("newgvn", NewGVNPass())
FUNCTION_PASS("nonltoglobalopt", NonLTOGlobalOptPass()) // INTEL
FUNCTION_PASS("jump-threading", JumpThreadingPass())
FUNCTION_PASS("partially-inline-libcalls", PartiallyInlineLibCallsPass())
FUNCTION_PASS("kcfi", KCFIPass())
FUNCTION_PASS("lcssa", LCSSAPass())
FUNCTION_PASS("loop-data-prefetch", LoopDataPrefetchPass())
FUNCTION_PASS("loop-load-elim", LoopLoadEliminationPass())
FUNCTION_PASS("loop-fusion", LoopFusePass())
FUNCTION_PASS("loop-distribute", LoopDistributePass())
FUNCTION_PASS("loop-versioning", LoopVersioningPass())
FUNCTION_PASS("objc-arc", ObjCARCOptPass())
FUNCTION_PASS("objc-arc-contract", ObjCARCContractPass())
FUNCTION_PASS("objc-arc-expand", ObjCARCExpandPass())
FUNCTION_PASS("pa-eval", PAEvalPass())
FUNCTION_PASS("pgo-memop-opt", PGOMemOPSizeOpt())
FUNCTION_PASS("print", PrintFunctionPass(dbgs()))
FUNCTION_PASS("print<assumptions>", AssumptionPrinterPass(dbgs()))
FUNCTION_PASS("print<block-freq>", BlockFrequencyPrinterPass(dbgs()))
FUNCTION_PASS("print<branch-prob>", BranchProbabilityPrinterPass(dbgs()))
FUNCTION_PASS("print<cost-model>", CostModelPrinterPass(dbgs()))
FUNCTION_PASS("print<cycles>", CycleInfoPrinterPass(dbgs()))
FUNCTION_PASS("print<da>", DependenceAnalysisPrinterPass(dbgs()))
FUNCTION_PASS("print<divergence>", DivergenceAnalysisPrinterPass(dbgs()))
FUNCTION_PASS("print<domtree>", DominatorTreePrinterPass(dbgs()))
FUNCTION_PASS("print<postdomtree>", PostDominatorTreePrinterPass(dbgs()))
FUNCTION_PASS("print<delinearization>", DelinearizationPrinterPass(dbgs()))
FUNCTION_PASS("print<demanded-bits>", DemandedBitsPrinterPass(dbgs()))
FUNCTION_PASS("print<domfrontier>", DominanceFrontierPrinterPass(dbgs()))
FUNCTION_PASS("print<func-properties>", FunctionPropertiesPrinterPass(dbgs()))
FUNCTION_PASS("print<inline-cost>", InlineCostAnnotationPrinterPass(dbgs()))
FUNCTION_PASS("print<inliner-size-estimator>",
  InlineSizeEstimatorAnalysisPrinterPass(dbgs()))
FUNCTION_PASS("print<loops>", LoopPrinterPass(dbgs()))
FUNCTION_PASS("print<memoryssa>", MemorySSAPrinterPass(dbgs()))
FUNCTION_PASS("print<memoryssa-walker>", MemorySSAWalkerPrinterPass(dbgs()))
FUNCTION_PASS("print<num-sign-bits>", NumSignBitsPrinterPass(dbgs())) // INTEL
FUNCTION_PASS("print<phi-values>", PhiValuesPrinterPass(dbgs()))
FUNCTION_PASS("print<regions>", RegionInfoPrinterPass(dbgs()))
FUNCTION_PASS("print<scalar-evolution>", ScalarEvolutionPrinterPass(dbgs()))
FUNCTION_PASS("print<stack-safety-local>", StackSafetyPrinterPass(dbgs()))
FUNCTION_PASS("print<access-info>", LoopAccessInfoPrinterPass(dbgs()))
// TODO: rename to print<foo> after NPM switch
FUNCTION_PASS("print-alias-sets", AliasSetsPrinterPass(dbgs()))
FUNCTION_PASS("print-cfg-sccs", CFGSCCPrinterPass(dbgs()))
FUNCTION_PASS("print-predicateinfo", PredicateInfoPrinterPass(dbgs()))
FUNCTION_PASS("print-mustexecute", MustExecutePrinterPass(dbgs()))
FUNCTION_PASS("print-memderefs", MemDerefPrinterPass(dbgs()))
FUNCTION_PASS("reassociate", ReassociatePass())
FUNCTION_PASS("redundant-dbg-inst-elim", RedundantDbgInstEliminationPass())
FUNCTION_PASS("reg2mem", RegToMemPass())
FUNCTION_PASS("scalarize-masked-mem-intrin", ScalarizeMaskedMemIntrinPass())
FUNCTION_PASS("scalarizer", ScalarizerPass())
FUNCTION_PASS("separate-const-offset-from-gep", SeparateConstOffsetFromGEPPass())
FUNCTION_PASS("sccp", SCCPPass())
FUNCTION_PASS("sink", SinkingPass())
FUNCTION_PASS("slp-vectorizer", SLPVectorizerPass())
FUNCTION_PASS("slsr", StraightLineStrengthReducePass())
FUNCTION_PASS("speculative-execution", SpeculativeExecutionPass())
#if INTEL_CUSTOMIZATION
FUNCTION_PASS("std-container-opt", StdContainerOptPass())
#endif // INTEL_CUSTOMIZATION
FUNCTION_PASS("sroa", SROAPass())
FUNCTION_PASS("strip-gc-relocates", StripGCRelocates())
FUNCTION_PASS("structurizecfg", StructurizeCFGPass())
FUNCTION_PASS("tailcallelim", TailCallElimPass())
FUNCTION_PASS("unify-loop-exits", UnifyLoopExitsPass())
FUNCTION_PASS("vector-combine", VectorCombinePass())
FUNCTION_PASS("verify", VerifierPass())
FUNCTION_PASS("verify<domtree>", DominatorTreeVerifierPass())
FUNCTION_PASS("verify<loops>", LoopVerifierPass())
FUNCTION_PASS("verify<memoryssa>", MemorySSAVerifierPass())
FUNCTION_PASS("verify<regions>", RegionInfoVerifierPass())
FUNCTION_PASS("verify<safepoint-ir>", SafepointIRVerifierPass())
FUNCTION_PASS("verify<scalar-evolution>", ScalarEvolutionVerifierPass())
FUNCTION_PASS("view-cfg", CFGViewerPass())
FUNCTION_PASS("view-cfg-only", CFGOnlyViewerPass())
FUNCTION_PASS("tlshoist", TLSVariableHoistPass())
FUNCTION_PASS("transform-warning", WarnMissedTransformationsPass())

#if INTEL_CUSTOMIZATION
FUNCTION_PASS("forced-cmov-generation", ForcedCMOVGenerationPass())
FUNCTION_PASS("transform-sin-cos-calls", TransformSinAndCosCallsPass())
FUNCTION_PASS("load-coalescing", LoadCoalescingPass())
FUNCTION_PASS("replace-with-math-library-functions", MathLibraryFunctionsReplacementPass())
FUNCTION_PASS("hir-ssa-deconstruction", loopopt::HIRSSADeconstructionPass())
#if !defined(NDEBUG) || defined(LLVM_ENABLE_DUMP)
FUNCTION_PASS("print<array-use>", ArrayUsePrinterPass(dbgs()))
#endif
FUNCTION_PASS("print<hir-region-identification>", loopopt::HIRRegionIdentificationPrinterPass(dbgs()))
FUNCTION_PASS("print<hir-scc-formation>", loopopt::HIRSCCFormationPrinterPass(dbgs()))
FUNCTION_PASS("print<hir-framework>", loopopt::HIRFrameworkPrinterPass(dbgs(), true))
FUNCTION_PASS("verify<hir-framework>", loopopt::HIRFrameworkVerifierPass())
FUNCTION_PASS("print<hir>", loopopt::HIRFrameworkPrinterPass(dbgs(), false))
FUNCTION_PASS("verify<hir>", loopopt::HIRFrameworkVerifierPass())
FUNCTION_PASS("print<hir-loop-statistics>", loopopt::HIRAnalysisPrinterPass<loopopt::HIRLoopStatisticsAnalysis>(dbgs()))
FUNCTION_PASS("print<hir-loop-resource>", loopopt::HIRAnalysisPrinterPass<loopopt::HIRLoopResourceAnalysis>(dbgs()))
FUNCTION_PASS("print<hir-locality-analysis>", loopopt::HIRAnalysisPrinterPass<loopopt::HIRLoopLocalityAnalysis>(dbgs()))
FUNCTION_PASS("print<hir-dd-analysis>", loopopt::HIRAnalysisPrinterPass<loopopt::HIRDDAnalysisPass>(dbgs()))
FUNCTION_PASS("print<hir-safe-reduction-analysis>", loopopt::HIRAnalysisPrinterPass<loopopt::HIRSafeReductionAnalysisPass>(dbgs()))
FUNCTION_PASS("print<hir-sparse-array-reduction-analysis>", loopopt::HIRAnalysisPrinterPass<loopopt::HIRSparseArrayReductionAnalysisPass>(dbgs()))
FUNCTION_PASS("print<hir-array-section-analysis>", loopopt::HIRAnalysisPrinterPass<loopopt::HIRArraySectionAnalysisPass>(dbgs()))
FUNCTION_PASS("print<hir-parvec-analysis>", loopopt::HIRAnalysisPrinterPass<loopopt::HIRParVecAnalysisPass>(dbgs()))
FUNCTION_PASS("hir-recognize-par-loop", loopopt::HIRRecognizeParLoopPass())
FUNCTION_PASS("hir-dead-store-elimination", loopopt::HIRDeadStoreEliminationPass())
FUNCTION_PASS("hir-optreport-emitter", loopopt::HIROptReportEmitterPass())
FUNCTION_PASS("hir-cg", loopopt::HIRCodeGenPass())
FUNCTION_PASS("hir-temp-cleanup", loopopt::HIRTempCleanupPass())
FUNCTION_PASS("hir-normalize-casts", loopopt::HIRNormalizeCasts())
FUNCTION_PASS("hir-propagate-casted-iv", loopopt::HIRPropagateCastedIVPass())
FUNCTION_PASS("hir-array-transpose", loopopt::HIRArrayTransposePass())
FUNCTION_PASS("hir-aos-to-soa", loopopt::HIRAosToSoaPass())
FUNCTION_PASS("hir-general-unroll", loopopt::HIRGeneralUnrollPass())
FUNCTION_PASS("hir-idiom", loopopt::HIRIdiomRecognitionPass())
FUNCTION_PASS("hir-lmm", loopopt::HIRLMMPass())
FUNCTION_PASS("hir-last-value-computation", loopopt::HIRLastValueComputationPass())
FUNCTION_PASS("hir-loop-collapse", loopopt::HIRLoopCollapsePass())
FUNCTION_PASS("hir-loop-concatenation", loopopt::HIRLoopConcatenationPass())
FUNCTION_PASS("hir-loop-distribute-loopnest", loopopt::HIRLoopDistributionForLoopNestPass())
FUNCTION_PASS("hir-loop-distribute-memrec", loopopt::HIRLoopDistributionForMemRecPass())
FUNCTION_PASS("hir-loop-fusion", loopopt::HIRLoopFusionPass())
FUNCTION_PASS("hir-loop-interchange", loopopt::HIRLoopInterchangePass())
FUNCTION_PASS("hir-loop-rematerialize", loopopt::HIRLoopRematerializePass())
FUNCTION_PASS("hir-loop-reversal", loopopt::HIRLoopReversalPass())
FUNCTION_PASS("hir-if-reversal", loopopt::HIRIfReversalPass())
FUNCTION_PASS("hir-loop-reroll", loopopt::HIRLoopRerollPass())
FUNCTION_PASS("hir-mv-const-ub", loopopt::HIRMVForConstUBPass())
FUNCTION_PASS("hir-mv-variable-stride", loopopt::HIRMVForVariableStridePass())
FUNCTION_PASS("hir-nontemporal-marking", loopopt::HIRNontemporalMarkingPass())
FUNCTION_PASS("hir-opt-predicate", loopopt::HIROptPredicatePass())
FUNCTION_PASS("hir-opt-var-predicate", loopopt::HIROptVarPredicatePass())
FUNCTION_PASS("hir-post-vec-complete-unroll", loopopt::HIRPostVecCompleteUnrollPass())
FUNCTION_PASS("hir-pre-vec-complete-unroll", loopopt::HIRPreVecCompleteUnrollPass())
FUNCTION_PASS("hir-runtime-dd", loopopt::HIRRuntimeDDPass())
FUNCTION_PASS("hir-scalarrepl-array", loopopt::HIRScalarReplArrayPass())
FUNCTION_PASS("hir-pm-symbolic-tripcount-completeunroll", loopopt::HIRPMSymbolicTripCountCompleteUnrollPass())
FUNCTION_PASS("hir-unroll-and-jam", loopopt::HIRUnrollAndJamPass())
FUNCTION_PASS("hir-vec-dir-insert", loopopt::HIRVecDirInsertPass())
FUNCTION_PASS("hir-loop-blocking", loopopt::HIRLoopBlockingPass())
FUNCTION_PASS("hir-pragma-loop-blocking", loopopt::HIRPragmaLoopBlockingPass())
FUNCTION_PASS("hir-generate-mkl-call", loopopt::HIRGenerateMKLCallPass())
FUNCTION_PASS("intel-ir-optreport-emitter", OptReportEmitterPass())
FUNCTION_PASS("vplan-pragma-omp-simd-if", VPlanPragmaOmpSimdIfPass())
FUNCTION_PASS("vplan-vec", vpo::VPlanDriverPass());
FUNCTION_PASS("vplan-func-vec", vpo::VPlanFunctionVectorizerPass());
FUNCTION_PASS("vpo-directive-cleanup", VPODirectiveCleanupPass())
FUNCTION_PASS("map-intrin-to-iml",vpo::MapIntrinToImlPass())
FUNCTION_PASS("addsub-reassoc", AddSubReassociatePass())
FUNCTION_PASS("loop-carried-cse", LoopCarriedCSEPass())
FUNCTION_PASS("hir-multi-exit-loop-reroll", loopopt::HIRMultiExitLoopRerollPass())
FUNCTION_PASS("hir-minmax-recognition", loopopt::HIRMinMaxRecognitionPass())
FUNCTION_PASS("hir-identity-matrix-idiom-recognition", loopopt::HIRIdentityMatrixIdiomRecognitionPass())
FUNCTION_PASS("hir-prefetching", loopopt::HIRPrefetchingPass())
FUNCTION_PASS("iv-split", IVSplitPass())
FUNCTION_PASS("hir-sinking-for-perfect-loopnest", loopopt::HIRSinkingForPerfectLoopnestPass())
FUNCTION_PASS("hir-undo-sinking-for-perfect-loopnest", loopopt::HIRUndoSinkingForPerfectLoopnestPass())
FUNCTION_PASS("hir-conditional-temp-sinking", loopopt::HIRConditionalTempSinkingPass())
FUNCTION_PASS("hir-memory-reduction-sinking", loopopt::HIRMemoryReductionSinkingPass())
FUNCTION_PASS("hir-rowwise-mv", loopopt::HIRRowWiseMVPass())
FUNCTION_PASS("hir-cond-ldst-motion", loopopt::HIRConditionalLoadStoreMotionPass())
FUNCTION_PASS("hir-temp-array-transpose", loopopt::HIRTempArrayTransposePass())
FUNCTION_PASS("hir-min-max-blob-to-select", loopopt::HIRMinMaxBlobToSelectPass())
FUNCTION_PASS("hir-loop-peeling", loopopt::HIRLoopPeelingPass())
FUNCTION_PASS("hir-lower-small-memset-memcpy", loopopt::HIRLowerSmallMemsetMemcpyPass())
#if INTEL_FEATURE_SW_ADVANCED
FUNCTION_PASS("unaligned-nontemporal", NontemporalStorePass())
#endif // INTEL_FEATURE_SW_ADVANCED
FUNCTION_PASS("vpo-paropt-optimize-data-sharing", VPOParoptOptimizeDataSharingPass())
FUNCTION_PASS("hir-store-result-into-temp-array", loopopt::HIRStoreResultIntoTempArrayPass())
FUNCTION_PASS("hir-sum-window-reuse", loopopt::HIRSumWindowReusePass())
FUNCTION_PASS("hir-non-zero-sinking-for-perfect-loopnest", loopopt::HIRNonZeroSinkingForPerfectLoopnestPass())
FUNCTION_PASS("hir-identity-matrix-substitution", loopopt::HIRIdentityMatrixSubstitutionPass())
FUNCTION_PASS("hir-arrayscalarization-test-launcher", loopopt::HIRArrayScalarizationTestLauncherPass())
FUNCTION_PASS("vpo-paropt-shared-privatization", VPOParoptSharedPrivatizationPass())
FUNCTION_PASS("vpo-paropt-apply-config", VPOParoptApplyConfigPass())
#if INTEL_FEATURE_SW_ADVANCED
FUNCTION_PASS("hir-inter-loop-blocking", loopopt::HIRInterLoopBlockingPass())
FUNCTION_PASS("hir-cross-loop-array-contraction", loopopt::HIRCrossLoopArrayContractionPass())
#endif // INTEL_FEATURE_SW_ADVANCED
FUNCTION_PASS("handle-pragma-vector-aligned", HandlePragmaVectorAlignedPass())

FUNCTION_PASS("print<dpcpp-kernel-soa-alloca-analysis>", SoaAllocaAnalysisPrinter(dbgs()))
FUNCTION_PASS("print<dpcpp-kernel-work-item-analysis>", WorkItemAnalysisPrinter(dbgs()))

FUNCTION_PASS("dpcpp-kernel-add-fast-math", AddFastMathPass())
FUNCTION_PASS("dpcpp-kernel-builtin-call-to-inst", BuiltinCallToInstPass())
FUNCTION_PASS("dpcpp-kernel-optimize-idiv-and-irem", OptimizeIDivAndIRemPass())
FUNCTION_PASS("dpcpp-kernel-phi-canonicalization", PhiCanonicalization())
FUNCTION_PASS("dpcpp-kernel-prevent-div-crashes", PreventDivCrashesPass())
FUNCTION_PASS("dpcpp-kernel-redundant-phi-node", RedundantPhiNode())
FUNCTION_PASS("dpcpp-kernel-add-nt-attr", AddNTAttrPass())
FUNCTION_PASS("dpcpp-kernel-sin-cos-fold", SinCosFoldPass())
#if INTEL_FEATURE_SW_ADVANCED
FUNCTION_PASS("tight-loop-emitter", TightLoopEmitterPass())
#endif // INTEL_FEATURE_SW_ADVANCED
#endif // INTEL_CUSTOMIZATION
#if INTEL_COLLAB
FUNCTION_PASS("print<vpo-wrncollection>",
              WRegionCollectionAnalysisPrinterPass(dbgs()))
FUNCTION_PASS("vpo-cfg-restructuring", VPOCFGRestructuringPass())
FUNCTION_PASS("vpo-cfg-simplify", VPOCFGSimplifyPass())
FUNCTION_PASS("vpo-restore-operands", VPORestoreOperandsPass())
FUNCTION_PASS("vpo-rename-operands", VPORenameOperandsPass())
FUNCTION_PASS("vpo-paropt-guard-memory-motion", VPOParoptGuardMemoryMotionPass())
FUNCTION_PASS("vpo-paropt-loop-collapse", VPOParoptLoopCollapsePass())
FUNCTION_PASS("vpo-paropt-loop-transform", VPOParoptLoopTransformPass())
FUNCTION_PASS("vpo-paropt-prepare", VPOParoptPreparePass())
#endif // INTEL_COLLAB
FUNCTION_PASS("tsan", ThreadSanitizerPass())
FUNCTION_PASS("memprof", MemProfilerPass())
FUNCTION_PASS("LowerWGScope", SYCLLowerWGScopePass())
FUNCTION_PASS("ESIMDLowerLoadStore", ESIMDLowerLoadStorePass())
FUNCTION_PASS("declare-to-assign", llvm::AssignmentTrackingPass())
#undef FUNCTION_PASS

#ifndef FUNCTION_PASS_WITH_PARAMS
#define FUNCTION_PASS_WITH_PARAMS(NAME, CLASS, CREATE_PASS, PARSER, PARAMS)
#endif
#if INTEL_CUSTOMIZATION
FUNCTION_PASS_WITH_PARAMS("hir-vplan-vec", "vpo::VPlanDriverHIRPass",
                          [](bool LightWeightMode) {
                            return vpo::VPlanDriverHIRPass(LightWeightMode);
                          },
                          parseVPlanDriverHIROptions,
                          "true;false;Full;Light;LightWeight");
#endif // INTEL_CUSTOMIZATION
FUNCTION_PASS_WITH_PARAMS("early-cse",
                          "EarlyCSEPass",
                           [](bool UseMemorySSA) {
                             return EarlyCSEPass(UseMemorySSA);
                           },
                          parseEarlyCSEPassOptions,
                          "memssa")
FUNCTION_PASS_WITH_PARAMS("ee-instrument",
                          "EntryExitInstrumenterPass",
                           [](bool PostInlining) {
                             return EntryExitInstrumenterPass(PostInlining);
                           },
                          parseEntryExitInstrumenterPassOptions,
                          "post-inline")
FUNCTION_PASS_WITH_PARAMS("lower-matrix-intrinsics",
                          "LowerMatrixIntrinsicsPass",
                           [](bool Minimal) {
                             return LowerMatrixIntrinsicsPass(Minimal);
                           },
                          parseLowerMatrixIntrinsicsPassOptions,
                          "minimal")
FUNCTION_PASS_WITH_PARAMS("loop-unroll",
                          "LoopUnrollPass",
                           [](LoopUnrollOptions Opts) {
                             return LoopUnrollPass(Opts);
                           },
                          parseLoopUnrollOptions,
                          "O0;O1;O2;O3;full-unroll-max=N;"
                          "no-partial;partial;"
                          "no-peeling;peeling;"
                          "no-profile-peeling;profile-peeling;"
                          "no-runtime;runtime;"
                          "no-upperbound;upperbound")
FUNCTION_PASS_WITH_PARAMS("simplifycfg",
                          "SimplifyCFGPass",
                           [](SimplifyCFGOptions Opts) {
                             return SimplifyCFGPass(Opts);
                           },
                          parseSimplifyCFGOptions,
                          "no-forward-switch-cond;forward-switch-cond;"
                          "no-switch-range-to-icmp;switch-range-to-icmp;"
                          "no-switch-to-lookup;switch-to-lookup;"
                          "no-keep-loops;keep-loops;"
                          "no-hoist-common-insts;hoist-common-insts;"
                          "no-sink-common-insts;sink-common-insts;"
                          "bonus-inst-threshold=N"
                          )
FUNCTION_PASS_WITH_PARAMS("loop-vectorize",
                          "LoopVectorizePass",
                           [](LoopVectorizeOptions Opts) {
                             return LoopVectorizePass(Opts);
                           },
                          parseLoopVectorizeOptions,
                          "no-interleave-forced-only;interleave-forced-only;"
                          "no-vectorize-forced-only;vectorize-forced-only")
FUNCTION_PASS_WITH_PARAMS("mldst-motion",
                          "MergedLoadStoreMotionPass",
                           [](MergedLoadStoreMotionOptions Opts) {
                             return MergedLoadStoreMotionPass(Opts);
                           },
                          parseMergedLoadStoreMotionOptions,
                          "no-split-footer-bb;split-footer-bb")
FUNCTION_PASS_WITH_PARAMS("gvn",
                          "GVNPass",
                           [](GVNOptions Opts) {
                             return GVNPass(Opts);
                           },
                          parseGVNOptions,
                          "no-pre;pre;"
                          "no-load-pre;load-pre;"
                          "no-split-backedge-load-pre;split-backedge-load-pre;"
                          "no-memdep;memdep")
FUNCTION_PASS_WITH_PARAMS("print<stack-lifetime>",
                          "StackLifetimePrinterPass",
                           [](StackLifetime::LivenessType Type) {
                             return StackLifetimePrinterPass(dbgs(), Type);
                           },
                          parseStackLifetimeOptions,
                          "may;must")
FUNCTION_PASS_WITH_PARAMS("print<da>",
                          "DependenceAnalysisPrinterPass",
                           [](bool NormalizeResults) {
                             return DependenceAnalysisPrinterPass(dbgs(), NormalizeResults);
                           },
                          parseDependenceAnalysisPrinterOptions,
                          "normalized-results")
#undef FUNCTION_PASS_WITH_PARAMS

#ifndef LOOPNEST_PASS
#define LOOPNEST_PASS(NAME, CREATE_PASS)
#endif
LOOPNEST_PASS("loop-flatten", LoopFlattenPass())
LOOPNEST_PASS("loop-interchange", LoopInterchangePass())
LOOPNEST_PASS("loop-unroll-and-jam", LoopUnrollAndJamPass())
LOOPNEST_PASS("no-op-loopnest", NoOpLoopNestPass())
#undef LOOPNEST_PASS

#ifndef LOOP_ANALYSIS
#define LOOP_ANALYSIS(NAME, CREATE_PASS)
#endif
LOOP_ANALYSIS("no-op-loop", NoOpLoopAnalysis())
LOOP_ANALYSIS("ddg", DDGAnalysis())
LOOP_ANALYSIS("iv-users", IVUsersAnalysis())
LOOP_ANALYSIS("pass-instrumentation", PassInstrumentationAnalysis(PIC))
#if INTEL_CUSTOMIZATION
LOOP_ANALYSIS("dpcpp-kernel-loop-wi-analysis", LoopWIAnalysis())
#endif // INTEL_CUSTOMIZATION
#undef LOOP_ANALYSIS

#ifndef LOOP_PASS
#define LOOP_PASS(NAME, CREATE_PASS)
#endif
LOOP_PASS("canon-freeze", CanonicalizeFreezeInLoopsPass())
LOOP_PASS("dot-ddg", DDGDotPrinterPass())
LOOP_PASS("invalidate<all>", InvalidateAllAnalysesPass())
LOOP_PASS("loop-idiom", LoopIdiomRecognizePass())
LOOP_PASS("loop-instsimplify", LoopInstSimplifyPass())
LOOP_PASS("loop-rotate", LoopRotatePass())
LOOP_PASS("no-op-loop", NoOpLoopPass())
LOOP_PASS("print", PrintLoopPass(dbgs()))
LOOP_PASS("loop-deletion", LoopDeletionPass())
LOOP_PASS("loop-simplifycfg", LoopSimplifyCFGPass())
LOOP_PASS("loop-reduce", LoopStrengthReducePass())
LOOP_PASS("indvars", IndVarSimplifyPass())
LOOP_PASS("loop-unroll-full", LoopFullUnrollPass())
LOOP_PASS("print<ddg>", DDGAnalysisPrinterPass(dbgs()))
LOOP_PASS("print<iv-users>", IVUsersPrinterPass(dbgs()))
LOOP_PASS("print<loopnest>", LoopNestPrinterPass(dbgs()))
LOOP_PASS("print<loop-cache-cost>", LoopCachePrinterPass(dbgs()))
LOOP_PASS("loop-predication", LoopPredicationPass())
LOOP_PASS("guard-widening", GuardWideningPass())
LOOP_PASS("loop-bound-split", LoopBoundSplitPass())
LOOP_PASS("loop-reroll", LoopRerollPass())
LOOP_PASS("loop-versioning-licm", LoopVersioningLICMPass())
#if INTEL_CUSTOMIZATION
LOOP_PASS("dpcpp-kernel-builtin-licm", BuiltinLICMPass())
LOOP_PASS("dpcpp-kernel-loop-strided-code-motion", LoopStridedCodeMotionPass())
LOOP_PASS("print<dpcpp-kernel-loop-wi-analysis>", LoopWIAnalysisPrinter(dbgs()))
#endif // INTEL_CUSTOMIZATION
#undef LOOP_PASS

#ifndef LOOP_PASS_WITH_PARAMS
#define LOOP_PASS_WITH_PARAMS(NAME, CLASS, CREATE_PASS, PARSER, PARAMS)
#endif
LOOP_PASS_WITH_PARAMS("simple-loop-unswitch",
                      "SimpleLoopUnswitchPass",
                      [](std::pair<bool, bool> Params) {
                        return SimpleLoopUnswitchPass(Params.first, Params.second);
                      },
                      parseLoopUnswitchOptions,
                      "nontrivial;no-nontrivial;trivial;no-trivial")

LOOP_PASS_WITH_PARAMS("licm", "LICMPass",
                      [](LICMOptions Params) {
                        return LICMPass(Params);
                      },
                      parseLICMOptions,
                      "allowspeculation");

LOOP_PASS_WITH_PARAMS("lnicm", "LNICMPass",
                      [](LICMOptions Params) {
                        return LNICMPass(Params);
                      },
                      parseLICMOptions,
                      "allowspeculation");
#undef LOOP_PASS_WITH_PARAMS
