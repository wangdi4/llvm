; REQUIRES: asserts

target triple = "x86_64-unknown-linux-gnu"

; RUN: opt < %s -opaque-pointers -whole-program-assume -intel-libirc-allowed -passes='require<dtrans-safetyanalyzer>' -dtrans-print-types -disable-output 2>&1 | FileCheck %s

; Test callback function that forwards variadic parameters to the target
; function and generates a "Mismatched argument use" safety flag.

%struct.ident_t = type { i32, i32, i32, i32, ptr }
@.kmpc_loc.0.0.27 = private unnamed_addr global %struct.ident_t { i32 0, i32 838860802, i32 0, i32 0, ptr getelementptr inbounds ([22 x i8], ptr @.source.0.0.694, i32 0, i32 0) }
@.source.0.0.694 = private unnamed_addr constant [22 x i8] c";unknown;unknown;0;0;;"

; This is a case where types do not match the expected types, so should trigger
; a DTrans safety flag.
%struct.test01 = type { i32, i32, i32, i64, i32 }
%struct.test01alt = type { i64, i32, i64, i32 }
define void @test01(ptr "intel_dtrans_func_index"="1" %img, ptr "intel_dtrans_func_index"="2" %buf) !intel.dtrans.func.type !7 {
  tail call void (ptr, i32, ptr, ...) @broker(
    ptr @.kmpc_loc.0.0.27,
    i32 6,
    ptr @test01callee,
    i64 1,
    ptr %img,
    ptr %buf
  )
  ret void
}

; %in0 and %in1 are parameters generated by the broker function. %in2, %in3, and
; %in4 are parameters that are passed from the variadic parameters of the call
; to the broker function.
define void @test01callee(ptr "intel_dtrans_func_index"="1" %in0, ptr "intel_dtrans_func_index"="2" %in1, i64 %in2, ptr "intel_dtrans_func_index"="3" %in3, ptr "intel_dtrans_func_index"="4" %in4) !intel.dtrans.func.type !10 {
  %load0 = load i32, ptr %in0
  %load1 = load i32, ptr %in1
  %load3 = load i64, ptr %in4
  %use1 = getelementptr %struct.test01alt, ptr %in3, i64 0, i32 1
  ret void
}

declare !intel.dtrans.func.type !15 !callback !0 void @broker(ptr "intel_dtrans_func_index"="1" %0, i32 %1, ptr "intel_dtrans_func_index"="2" %2, ...)


; This structure should get marked "Address taken" because it is passed to the
; external broker function.

; CHECK: DTRANS_StructInfo:
; CHECK: LLVMType: %struct.ident_t
; CHECK: Safety data: Global instance | Has initializer list | Address taken
; CHECK: End LLVMType: %struct.ident_t

; This structure should be marked as "Mismatched argument use" because the type passed
; into the broker function does not match the type forwarded to the callback routine.

; CHECK: DTRANS_StructInfo:
; CHECK: LLVMType: %struct.test01
; CHECK: Safety data: Mismatched argument use
; CHECK: End LLVMType: %struct.test01

; This structure should be marked as "Mismatched argument use" because the type passed
; into the broker function does not match the type forwarded to the callback routine.

; CHECK: DTRANS_StructInfo:
; CHECK: LLVMType: %struct.test01alt
; CHECK: Safety data: Mismatched argument use
; CHECK: End LLVMType: %struct.test01alt

!0 = !{!1}
!1 = !{i64 2, i64 -1, i64 -1, i1 true}
!2 = !{i32 0, i32 0}  ; i32
!3 = !{i8 0, i32 1}  ; i8*
!4 = !{i64 0, i32 0}  ; i64
!5 = !{%struct.test01 zeroinitializer, i32 1}  ; %struct.test01*
!6 = !{i64 0, i32 1}  ; i64*
!7 = distinct !{!5, !6}
!8 = !{i32 0, i32 1}  ; i32*
!9 = !{%struct.test01alt zeroinitializer, i32 1}  ; %struct.test01alt*
!10 = distinct !{!8, !8, !9, !6}
!11 = !{%struct.ident_t zeroinitializer, i32 1}  ; %struct.ident_t*
!12 = !{!"F", i1 true, i32 2, !13, !8, !8}  ; void (i32*, i32*, ...)
!13 = !{!"void", i32 0}  ; void
!14 = !{!12, i32 1}  ; void (i32*, i32*, ...)*
!15 = distinct !{!11, !14}
!16 = !{!"S", %struct.ident_t zeroinitializer, i32 5, !2, !2, !2, !2, !3} ; { i32, i32, i32, i32, i8* }
!17 = !{!"S", %struct.test01 zeroinitializer, i32 5, !2, !2, !2, !4, !2} ; { i32, i32, i32, i64, i32 }
!18 = !{!"S", %struct.test01alt zeroinitializer, i32 4, !4, !2, !4, !2} ; { i64, i32, i64, i32 }

!intel.dtrans.types = !{!16, !17, !18}
