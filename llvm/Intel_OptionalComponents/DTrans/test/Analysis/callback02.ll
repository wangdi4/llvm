; REQUIRES: asserts
; RUN: opt  < %s -whole-program-assume -dtransanalysis -dtrans-print-types -disable-output 2>&1 | FileCheck %s
; RUN: opt  < %s -whole-program-assume -passes='require<dtransanalysis>' -dtrans-print-types -disable-output 2>&1 | FileCheck %s

; Test callback function that forwards variadic parameters to the target
; function.

%struct.ident_t = type { i32, i32, i32, i32, i8* }
@.kmpc_loc.0.0.27 = private unnamed_addr global %struct.ident_t { i32 0, i32 838860802, i32 0, i32 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.source.0.0.694, i32 0, i32 0) }
@.source.0.0.694 = private unnamed_addr constant [22 x i8] c";unknown;unknown;0;0;;"

; This is a case where types do not match the expected types, so should trigger
; a DTrans safety flag.
%struct.test01 = type { i32, i32, i32, i64, i32 }
%struct.test01alt = type { i64, i32, i64, i32 }
define void @test01(%struct.test01* %img, i64* %buf) {
  tail call void (%struct.ident_t*, i32, void (i32*, i32*, ...)*, ...) @broker(
    %struct.ident_t* @.kmpc_loc.0.0.27,
    i32 6,
    void (i32*, i32*, ...)* bitcast
      (void (i32*, i32*, i64, %struct.test01alt*, i64*)* @test01callee to void (i32*, i32*, ...)*),
    i64 1,
    %struct.test01* %img,
    i64* %buf
  )
  ret void
}

; %in0 and %in1 are parameters generated by the broker function. %in2, %in3, and
; %in4 are parameters that are passed from the variadic parameters of the call
; to the broker function.
define void @test01callee(i32* %in0, i32* %in1, i64 %in2, %struct.test01alt* %in3, i64* %in4) {
  %load0 = load i32, i32* %in0
  %load1 = load i32, i32* %in1
  %load3 = load i64, i64* %in4
  %use1 = getelementptr %struct.test01alt, %struct.test01alt* %in3, i64 0, i32 1
  ret void
}

declare !callback !0 void @broker(%struct.ident_t* %0, i32 %1, void (i32*, i32*, ...)* %2, ...)

!0 = !{!1}
!1 = !{i64 2, i64 -1, i64 -1, i1 true}

; This structure should get marked "Address taken" because it is passed to the
; external broker function.

; CHECK: DTRANS_StructInfo:
; CHECK: LLVMType: %struct.ident_t = type { i32, i32, i32, i32, i8* }
; CHECK: Safety data: Global instance | Has initializer list | Address taken

; This structure should be marked as "Mismatched argument use" because the type passed
; into the broker function does not match the type forwarded to the callback routine.

; CHECK: DTRANS_StructInfo:
; CHECK: LLVMType: %struct.test01 = type { i32, i32, i32, i64, i32 }
; CHECK: Safety data: Mismatched argument use

; This structure should be marked as "Mismatched argument use" because the type passed
; into the broker function does not match the type forwarded to the callback routine.

; CHECK: DTRANS_StructInfo:
; CHECK: LLVMType: %struct.test01alt = type { i64, i32, i64, i32 }
; CHECK: Safety data: Mismatched argument use
