; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; Test that identifies if the DTrans padded malloc optimization built the
; global counter and the interface correctly, and modified the malloc
; function successfully.

target triple = "x86_64-unknown-linux-gnu"

; UNSUPPORTED: enable-opaque-pointers
; RUN: opt < %s -whole-program-assume -intel-libirc-allowed -dtrans-paddedmalloc -dtrans-test-paddedmalloc -S 2>&1 | FileCheck %s
; RUN: opt < %s -whole-program-assume -intel-libirc-allowed -passes=dtrans-paddedmalloc -dtrans-test-paddedmalloc  -S 2>&1 | FileCheck %s
; RUN: opt < %s -whole-program-assume -intel-libirc-allowed -dtrans-paddedmalloc -padded-pointer-prop -S 2>&1 | FileCheck %s --check-prefix=CHECK-PROP
; RUN: opt < %s -whole-program-assume -intel-libirc-allowed -passes="dtrans-paddedmalloc,padded-pointer-prop" -S 2>&1 | FileCheck %s --check-prefix=CHECK-PROP

%struct.testStruct = type { i8* }

@globalstruct = internal global %struct.testStruct zeroinitializer, align 8
@arr1 = internal global [10 x i32] zeroinitializer, align 16
@arr2 = internal global [10 x i32] zeroinitializer, align 16

; Verify that the counter was set correctly
; CHECK: @__Intel_PaddedMallocCounter = internal global i32 0

; Verify that the padding was set correctly
; CHECK-PROP: [[PADD:@.*]] = private unnamed_addr constant [16 x i8] c"padded 32 bytes\00"

declare noalias i8* @malloc(i64) #0

declare void @free(i8* nocapture) #1

; Malloc function
define internal noalias i8* @mallocFunc(i64) {
; CHECK-LABEL: @mallocFunc(
; CHECK-NEXT:    [[TMP2:%.*]] = icmp ult i64 [[TMP0:%.*]], 4294967295
; CHECK-NEXT:    br i1 [[TMP2:%.*]], label [[TMP3:%.*]], label %MaxBB
; CHECK-LABEL: 3:
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, i32* @__Intel_PaddedMallocCounter
; CHECK-NEXT:    [[TMP5:%.*]] = icmp ult i32 [[TMP4]], 250
; CHECK-NEXT:    br i1 [[TMP5]], label [[BBIF:%.*]], label [[BBELSE:%.*]]
; CHECK-LABEL: MaxBB:
; CHECK-NEXT:    store i32 250, i32* @__Intel_PaddedMallocCounter
; CHECK-NEXT:    br label %BBelse
; CHECK-LABEL: BBif:
; CHECK-NEXT:    [[TMP6:%.*]] = add i64 [[TMP0:%.*]], 32
; CHECK-NEXT:    [[TMP7:%.*]] = tail call noalias i8* @malloc(i64 [[TMP6]])
; CHECK-NEXT:    [[TMP8:%.*]] = add i32 1, [[TMP4]]
; CHECK-NEXT:    store i32 [[TMP8]], i32* @__Intel_PaddedMallocCounter
; CHECK-NEXT:    br label [[TMP10:%.*]]
; CHECK-LABEL: BBelse:
; CHECK-NEXT:    [[TMP9:%.*]] = tail call noalias i8* @malloc(i64 [[TMP0]])
; CHECK-NEXT:    br label [[TMP10]]
; CHECK-LABEL: 10:
; CHECK-NEXT:    [[TMP11:%.*]] = phi i8* [ [[TMP7]], [[BBIF]] ], [ [[TMP9]], [[BBELSE]] ]
; CHECK-NEXT:    ret i8* [[TMP11]]

  %2 = tail call noalias i8* @malloc(i64 %0)
  ret i8* %2
}

; Search loop
define internal zeroext i1 @searchloop() #5 {
  br label %3

; <label>:1:                                      ; preds = %3
  %2 = icmp ult i64 %10, 10
  br i1 %2, label %3, label %11

; <label>:3:                                      ; preds = %1, %0
  %4 = phi i64 [ 0, %0 ], [ %10, %1 ]
  %5 = getelementptr inbounds [10 x i32], [10 x i32]* @arr1, i64 0, i64 %4
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds [10 x i32], [10 x i32]* @arr2, i64 0, i64 %4
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %6, %8
  %10 = add nuw nsw i64 %4, 1
  br i1 %9, label %11, label %1

; <label>:11:                                     ; preds = %3, %1
  %12 = phi i1 [ true, %3 ], [ false, %1 ]
  ret i1 %12
}

define i32 @main() {
; CHECK-LABEL: @main(
; CHECK-NEXT:    [[TMP1:%.*]] = tail call noalias i8* @mallocFunc(i64 100)
; CHECK-NEXT:    store i8* [[TMP1]], i8** getelementptr inbounds (%struct.testStruct, %struct.testStruct* @globalstruct, i64 0, i32 0), align 8
; CHECK-NEXT:    [[T:%.*]] = load i8*, i8** getelementptr inbounds (%struct.testStruct, %struct.testStruct* @globalstruct, i64 0, i32 0), align 8
; CHECK-NEXT:    tail call void @free(i8* [[TMP1]])
; CHECK-NEXT:    store i8* null, i8** getelementptr inbounds (%struct.testStruct, %struct.testStruct* @globalstruct, i64 0, i32 0), align 8
; CHECK-NEXT:    [[TMP2:%.*]] = call zeroext i1 @searchloop()
; CHECK-NEXT:    ret i32 0
;
; CHECK-PROP-LABEL: @main(
; CHECK-PROP-NEXT:    [[TMP1:%.*]] = tail call noalias i8* @mallocFunc(i64 100)
; CHECK-PROP-NEXT:    store i8* [[TMP1]], i8** getelementptr inbounds (%struct.testStruct, %struct.testStruct* @globalstruct, i64 0, i32 0), align 8
; CHECK-PROP-NEXT:    [[T:%.*]] = load i8*, i8** getelementptr inbounds (%struct.testStruct, %struct.testStruct* @globalstruct, i64 0, i32 0), align 8
; CHECK-PROP-NEXT:    [[T1:%.*]] = call i8* @llvm.ptr.annotation.p0i8(i8* [[T]], i8* getelementptr inbounds ([16 x i8], [16 x i8]* [[PADD]], i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @1, i32 0, i32 0), i32 0, i8* null)
; CHECK-PROP-NEXT:    tail call void @free(i8* [[TMP1]])
; CHECK-PROP-NEXT:    store i8* null, i8** getelementptr inbounds (%struct.testStruct, %struct.testStruct* @globalstruct, i64 0, i32 0), align 8
; CHECK-PROP-NEXT:    [[TMP2:%.*]] = call zeroext i1 @searchloop()
; CHECK-PROP-NEXT:    ret i32 0
;
  %1 = tail call noalias i8* @mallocFunc(i64 100)
  store i8* %1, i8** getelementptr inbounds (%struct.testStruct,
  %struct.testStruct* @globalstruct, i64 0, i32 0), align 8

  %t = load i8*, i8** getelementptr inbounds (%struct.testStruct,
  %struct.testStruct* @globalstruct, i64 0, i32 0), align 8

  tail call void @free(i8* %1)
  store i8* null, i8** getelementptr inbounds (%struct.testStruct,
  %struct.testStruct* @globalstruct, i64 0, i32 0), align 8
  call zeroext i1 @searchloop()
  ret i32 0
}

attributes #0 = { allockind("alloc,uninitialized") allocsize(0) "alloc-family"="malloc" }
attributes #1 = { allockind("free") "alloc-family"="malloc" }


; Verify that the interface was created correctly
; CHECK: define i1 @__Intel_PaddedMallocInterface() !dtrans.paddedmallocsize !0 {
; CHECK: entry:
; CHECK:   [[TMP0:%.*]] = load i32, i32* @__Intel_PaddedMallocCounter
; CHECK:   [[TMP1:%.*]] = icmp ult i32 [[TMP0:%.*]], 250
; CHECK:   ret i1 [[TMP1:%.*]]
; CHECK: }

; CHECK: !0 = !{i32 32}

