//===- FeatureDescV1.def - Features descriptions ----------------*- C++ -*-===//
//
// Copyright (C) 2023 Intel Corporation
//
// This software and the related documents are Intel copyrighted materials, and
// your use of them is governed by the express license under which they were
// provided to you ("License"). Unless the License provides otherwise, you may
// not use, modify, copy, publish, distribute, disclose or transmit this
// software or the related documents without Intel's prior written permission.
//
// This software and the related documents are provided as is, with no express
// or implied warranties, other than those that are expressly stated in the
// License.
//
//===----------------------------------------------------------------------===//

#ifdef BR_SRC_BB_FEATURE
BR_SRC_BB_FEATURE(unsigned, srcBranchPredicate)     // The Opcode of Branch Instruction
BR_SRC_BB_FEATURE(unsigned, srcBranchOperandOpcode) // The Opcode of the instruction that defines the register used in the branch instruction
BR_SRC_BB_FEATURE(unsigned, srcBranchOperandFunc)   // The function of the Branch Operand
BR_SRC_BB_FEATURE(unsigned, srcBranchOperandType)   // The operation data type
BR_SRC_BB_FEATURE(unsigned, srcRAOpCode)            // The Opcode of the instruction that defines register A
BR_SRC_BB_FEATURE(unsigned, srcRAFunc)              // Function of register A
BR_SRC_BB_FEATURE(unsigned, srcRAType)              // Data type of register A
BR_SRC_BB_FEATURE(unsigned, srcRBOpCode)            // The Opcode of the instruction that defines register B
BR_SRC_BB_FEATURE(unsigned, srcRBFunc)              // Function of register B
BR_SRC_BB_FEATURE(unsigned, srcRBType)              // Data type of register B
BR_SRC_BB_FEATURE(unsigned, srcLoopHeader)          // If the Basic Block is a loop header (LH, NLH)
BR_SRC_BB_FEATURE(unsigned, srcProcedureType)       // Type of the function including the Basic Block (Leaf, NonLeaf, CallSelf)
BR_SRC_BB_FEATURE(unsigned, srcLoopDepth)        // Depth of the most inner loop including the basic block
BR_SRC_BB_FEATURE(unsigned, srcLoopBlockSize)    // Block count of the most inner loop, including the basic block
BR_SRC_BB_FEATURE(unsigned, srcTotalSubLoopSize) // Number of sub loops in the current loop
BR_SRC_BB_FEATURE(unsigned, srcTotalSubLoopBlockSize) // Sum of the block counts of the sub loops in the current loop
BR_SRC_BB_FEATURE(unsigned, srcLoopExitingSize)       // Number of basic blocks in current block
BR_SRC_BB_FEATURE(unsigned, srcLoopExitSize)      // Number of the successors basic blocks of the current block
BR_SRC_BB_FEATURE(unsigned, srcLoopExitEdgesSize) // The number of pairs (inside/outside block)
BR_SRC_BB_FEATURE(unsigned, srcTriangle)          // Whether the current basic block and its successors form a triangle shape
BR_SRC_BB_FEATURE(unsigned, srcDiamond) // Whether the current basic block and its successors form a diamond shape
BR_SRC_BB_FEATURE(unsigned, srcFunctionStartWithRet)    // Whether function has an entry block or its successor blocks has a ret instruction
BR_SRC_BB_FEATURE(unsigned, srcFunctionInstructionSize) // Number of instructions in the function which contrains the basic block
BR_SRC_BB_FEATURE(unsigned, srcFunctionBlockSize)       // Number of blocks in the function which contains the basic block
BR_SRC_BB_FEATURE(unsigned, srcFunctionEdgesSize)       // The number of edges in the function which contains the basic block
BR_SRC_BB_FEATURE(unsigned, srcNumberOfSuccessors)      // The number of Successor Blocks
#endif // BR_SRC_BB_FEATURE

#ifdef BR_SUCC_BB_FEATURE
BR_SUCC_BB_FEATURE(unsigned, SuccessorsRank)           // The index of a specific successors block
BR_SUCC_BB_FEATURE(unsigned, SuccessorBranchDirection) // The direction of the edge (current block, successor block)
BR_SUCC_BB_FEATURE(unsigned, SuccessorLoopHeader)      // Whether Successor Block or its unconditional successor is a loop header
BR_SUCC_BB_FEATURE(unsigned, SuccesorLoopBack)  // If edge from Basic Block to Successor Block is a loop back edge
BR_SUCC_BB_FEATURE(unsigned, SuccessorExitEdge) // If edge from Basic Block to Successor Block is a loop exit edge
BR_SUCC_BB_FEATURE(unsigned, SuccessorsCall)    // The successor block or unconditionally branch to a block contain a procedure call
BR_SUCC_BB_FEATURE(unsigned, SuccessorsEnd)     // Type of end of Successor Block
BR_SUCC_BB_FEATURE(unsigned, SuccessorsUseDef)  // The successor has a use of register which was used to determine the destination of the current conditional branch
BR_SUCC_BB_FEATURE(unsigned, SuccessorBranchDominate) // If the Basic Block domaintes this Successor Block
BR_SUCC_BB_FEATURE(unsigned, SuccessorsBranchPostDominate) // If this Successor Block post-dominates the Basic Block
BR_SUCC_BB_FEATURE(unsigned, SuccessorUnlikely) // If the Successor Block is assumed to be unlikely by LLVM heuristic
BR_SUCC_BB_FEATURE(unsigned, SuccessorNumberOfSiblingExitSuccessors) // The number of the sibling exit successors
BR_SUCC_BB_FEATURE(unsigned, SuccessorEstimatedWeight) // The LLVM estimated weight of the Successor Block
BR_SUCC_BB_FEATURE(unsigned, SuccessorTotalWeight)     // The sum of LLVM estimated weight of all the successor blocks
BR_SUCC_BB_FEATURE(unsigned, SuccessorInstructionSize) // The numbero f instruction in the Successor Block
BR_SUCC_BB_FEATURE(unsigned, SuccessorStore) // If the Successor Block has a store instruction
BR_SUCC_BB_FEATURE(unsigned, SuccessorLLVMHeuristicProb) // Successor LLVM heuristic probability
#endif // BR_SUCC_BB_FEATURE
