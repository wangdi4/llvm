//===- X86TargetParser.def - X86 target parsing defines ---------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file provides defines to build up the X86 target parser's logic.
//
//===----------------------------------------------------------------------===//

// NOTE: NO INCLUDE GUARD DESIRED!

#ifndef X86_VENDOR
#define X86_VENDOR(ENUM, STR)
#endif
X86_VENDOR(VENDOR_INTEL, "intel")
X86_VENDOR(VENDOR_AMD,   "amd")
#undef X86_VENDOR

// This macro is used for cpu types present in compiler-rt/libgcc.
#ifndef X86_CPU_TYPE
#define X86_CPU_TYPE(ENUM, STR)
#endif

#ifndef X86_CPU_TYPE_ALIAS
#define X86_CPU_TYPE_ALIAS(ENUM, STR)
#endif

// This list must match what is implemented in libgcc and compilert-rt. Clang
// uses this to know how to implement __builtin_cpu_is.
X86_CPU_TYPE(INTEL_BONNELL,       "bonnell")
X86_CPU_TYPE(INTEL_CORE2,         "core2")
X86_CPU_TYPE(INTEL_COREI7,        "corei7")
X86_CPU_TYPE(AMDFAM10H,           "amdfam10h")
X86_CPU_TYPE(AMDFAM15H,           "amdfam15h")
X86_CPU_TYPE(INTEL_SILVERMONT,    "silvermont")
X86_CPU_TYPE(INTEL_KNL,           "knl")
X86_CPU_TYPE(AMD_BTVER1,          "btver1")
X86_CPU_TYPE(AMD_BTVER2,          "btver2")
X86_CPU_TYPE(AMDFAM17H,           "amdfam17h")
X86_CPU_TYPE(INTEL_KNM,           "knm")
X86_CPU_TYPE(INTEL_GOLDMONT,      "goldmont")
X86_CPU_TYPE(INTEL_GOLDMONT_PLUS, "goldmont-plus")
X86_CPU_TYPE(INTEL_TREMONT,       "tremont")
X86_CPU_TYPE(AMDFAM19H,           "amdfam19h")

// Alternate names supported by __builtin_cpu_is and target multiversioning.
X86_CPU_TYPE_ALIAS(INTEL_BONNELL,    "atom")
X86_CPU_TYPE_ALIAS(AMDFAM10H,        "amdfam10")
X86_CPU_TYPE_ALIAS(AMDFAM15H,        "amdfam15")
X86_CPU_TYPE_ALIAS(INTEL_SILVERMONT, "slm")

#undef X86_CPU_TYPE_ALIAS
#undef X86_CPU_TYPE

// This macro is used for cpu subtypes present in compiler-rt/libgcc.
#ifndef X86_CPU_SUBTYPE
#define X86_CPU_SUBTYPE(ENUM, STR)
#endif

// This list must match what is implemented in libgcc and compilert-rt. Clang
// uses this to know how to implement __builtin_cpu_is.
X86_CPU_SUBTYPE(INTEL_COREI7_NEHALEM,        "nehalem")
X86_CPU_SUBTYPE(INTEL_COREI7_WESTMERE,       "westmere")
X86_CPU_SUBTYPE(INTEL_COREI7_SANDYBRIDGE,    "sandybridge")
X86_CPU_SUBTYPE(AMDFAM10H_BARCELONA,         "barcelona")
X86_CPU_SUBTYPE(AMDFAM10H_SHANGHAI,          "shanghai")
X86_CPU_SUBTYPE(AMDFAM10H_ISTANBUL,          "istanbul")
X86_CPU_SUBTYPE(AMDFAM15H_BDVER1,            "bdver1")
X86_CPU_SUBTYPE(AMDFAM15H_BDVER2,            "bdver2")
X86_CPU_SUBTYPE(AMDFAM15H_BDVER3,            "bdver3")
X86_CPU_SUBTYPE(AMDFAM15H_BDVER4,            "bdver4")
X86_CPU_SUBTYPE(AMDFAM17H_ZNVER1,            "znver1")
X86_CPU_SUBTYPE(INTEL_COREI7_IVYBRIDGE,      "ivybridge")
X86_CPU_SUBTYPE(INTEL_COREI7_HASWELL,        "haswell")
X86_CPU_SUBTYPE(INTEL_COREI7_BROADWELL,      "broadwell")
X86_CPU_SUBTYPE(INTEL_COREI7_SKYLAKE,        "skylake")
X86_CPU_SUBTYPE(INTEL_COREI7_SKYLAKE_AVX512, "skylake-avx512")
X86_CPU_SUBTYPE(INTEL_COREI7_CANNONLAKE,     "cannonlake")
X86_CPU_SUBTYPE(INTEL_COREI7_ICELAKE_CLIENT, "icelake-client")
X86_CPU_SUBTYPE(INTEL_COREI7_ICELAKE_SERVER, "icelake-server")
X86_CPU_SUBTYPE(AMDFAM17H_ZNVER2,            "znver2")
X86_CPU_SUBTYPE(INTEL_COREI7_CASCADELAKE,    "cascadelake")
X86_CPU_SUBTYPE(INTEL_COREI7_TIGERLAKE,      "tigerlake")
X86_CPU_SUBTYPE(INTEL_COREI7_COOPERLAKE,     "cooperlake")
X86_CPU_SUBTYPE(INTEL_COREI7_SAPPHIRERAPIDS, "sapphirerapids")
X86_CPU_SUBTYPE(INTEL_COREI7_ALDERLAKE,      "alderlake")
X86_CPU_SUBTYPE(AMDFAM19H_ZNVER3,            "znver3")
#undef X86_CPU_SUBTYPE


// This macro is used for cpu types present in compiler-rt/libgcc.
#ifndef X86_FEATURE_COMPAT
#define X86_FEATURE_COMPAT(ENUM, STR) X86_FEATURE(ENUM, STR)
#endif

#ifndef X86_FEATURE
#define X86_FEATURE(ENUM, STR)
#endif

X86_FEATURE_COMPAT(CMOV,            "cmov")
X86_FEATURE_COMPAT(MMX,             "mmx")
X86_FEATURE_COMPAT(POPCNT,          "popcnt")
X86_FEATURE_COMPAT(SSE,             "sse")
X86_FEATURE_COMPAT(SSE2,            "sse2")
X86_FEATURE_COMPAT(SSE3,            "sse3")
X86_FEATURE_COMPAT(SSSE3,           "ssse3")
X86_FEATURE_COMPAT(SSE4_1,          "sse4.1")
X86_FEATURE_COMPAT(SSE4_2,          "sse4.2")
X86_FEATURE_COMPAT(AVX,             "avx")
X86_FEATURE_COMPAT(AVX2,            "avx2")
X86_FEATURE_COMPAT(SSE4_A,          "sse4a")
X86_FEATURE_COMPAT(FMA4,            "fma4")
X86_FEATURE_COMPAT(XOP,             "xop")
X86_FEATURE_COMPAT(FMA,             "fma")
X86_FEATURE_COMPAT(AVX512F,         "avx512f")
X86_FEATURE_COMPAT(BMI,             "bmi")
X86_FEATURE_COMPAT(BMI2,            "bmi2")
X86_FEATURE_COMPAT(AES,             "aes")
X86_FEATURE_COMPAT(PCLMUL,          "pclmul")
X86_FEATURE_COMPAT(AVX512VL,        "avx512vl")
X86_FEATURE_COMPAT(AVX512BW,        "avx512bw")
X86_FEATURE_COMPAT(AVX512DQ,        "avx512dq")
X86_FEATURE_COMPAT(AVX512CD,        "avx512cd")
X86_FEATURE_COMPAT(AVX512ER,        "avx512er")
X86_FEATURE_COMPAT(AVX512PF,        "avx512pf")
X86_FEATURE_COMPAT(AVX512VBMI,      "avx512vbmi")
X86_FEATURE_COMPAT(AVX512IFMA,      "avx512ifma")
X86_FEATURE_COMPAT(AVX5124VNNIW,    "avx5124vnniw")
X86_FEATURE_COMPAT(AVX5124FMAPS,    "avx5124fmaps")
X86_FEATURE_COMPAT(AVX512VPOPCNTDQ, "avx512vpopcntdq")
X86_FEATURE_COMPAT(AVX512VBMI2,     "avx512vbmi2")
X86_FEATURE_COMPAT(GFNI,            "gfni")
X86_FEATURE_COMPAT(VPCLMULQDQ,      "vpclmulqdq")
X86_FEATURE_COMPAT(AVX512VNNI,      "avx512vnni")
X86_FEATURE_COMPAT(AVX512BITALG,    "avx512bitalg")
X86_FEATURE_COMPAT(AVX512BF16,      "avx512bf16")
X86_FEATURE_COMPAT(AVX512VP2INTERSECT, "avx512vp2intersect")
// Features below here are not in libgcc/compiler-rt.
X86_FEATURE       (3DNOW,           "3dnow")
X86_FEATURE       (3DNOWA,          "3dnowa")
X86_FEATURE       (64BIT,           "64bit")
X86_FEATURE       (ADX,             "adx")
X86_FEATURE       (AMX_BF16,        "amx-bf16")
X86_FEATURE       (AMX_INT8,        "amx-int8")
X86_FEATURE       (AMX_TILE,        "amx-tile")
X86_FEATURE       (CLDEMOTE,        "cldemote")
X86_FEATURE       (CLFLUSHOPT,      "clflushopt")
X86_FEATURE       (CLWB,            "clwb")
X86_FEATURE       (CLZERO,          "clzero")
X86_FEATURE       (CMPXCHG16B,      "cx16")
X86_FEATURE       (CMPXCHG8B,       "cx8")
X86_FEATURE       (ENQCMD,          "enqcmd")
X86_FEATURE       (F16C,            "f16c")
X86_FEATURE       (FSGSBASE,        "fsgsbase")
X86_FEATURE       (FXSR,            "fxsr")
X86_FEATURE       (INVPCID,         "invpcid")
X86_FEATURE       (KL,              "kl")
X86_FEATURE       (WIDEKL,          "widekl")
X86_FEATURE       (LWP,             "lwp")
X86_FEATURE       (LZCNT,           "lzcnt")
X86_FEATURE       (MOVBE,           "movbe")
X86_FEATURE       (MOVDIR64B,       "movdir64b")
X86_FEATURE       (MOVDIRI,         "movdiri")
X86_FEATURE       (MWAITX,          "mwaitx")
X86_FEATURE       (PCONFIG,         "pconfig")
X86_FEATURE       (PKU,             "pku")
X86_FEATURE       (PREFETCHWT1,     "prefetchwt1")
X86_FEATURE       (PRFCHW,          "prfchw")
X86_FEATURE       (PTWRITE,         "ptwrite")
X86_FEATURE       (RDPID,           "rdpid")
X86_FEATURE       (RDRND,           "rdrnd")
X86_FEATURE       (RDSEED,          "rdseed")
X86_FEATURE       (RTM,             "rtm")
X86_FEATURE       (SAHF,            "sahf")
X86_FEATURE       (SERIALIZE,       "serialize")
X86_FEATURE       (SGX,             "sgx")
X86_FEATURE       (SHA,             "sha")
X86_FEATURE       (SHSTK,           "shstk")
X86_FEATURE       (TBM,             "tbm")
X86_FEATURE       (TSXLDTRK,        "tsxldtrk")
X86_FEATURE       (UINTR,           "uintr")
X86_FEATURE       (VAES,            "vaes")
X86_FEATURE       (VZEROUPPER,      "vzeroupper")
X86_FEATURE       (WAITPKG,         "waitpkg")
X86_FEATURE       (WBNOINVD,        "wbnoinvd")
X86_FEATURE       (X87,             "x87")
X86_FEATURE       (XSAVE,           "xsave")
X86_FEATURE       (XSAVEC,          "xsavec")
X86_FEATURE       (XSAVEOPT,        "xsaveopt")
X86_FEATURE       (XSAVES,          "xsaves")
X86_FEATURE       (HRESET,          "hreset")
#if INTEL_CUSTOMIZATION
#if INTEL_FEATURE_ISA_FP16
X86_FEATURE       (AVX512FP16,      "avx512fp16")
#endif // INTEL_FEATURE_ISA_FP16
#if INTEL_FEATURE_ISA_AVX_IFMA
X86_FEATURE       (AVXIFMA,         "avxifma")
#endif // INTEL_FEATURE_ISA_AVX_IFMA
#if INTEL_FEATURE_ISA_AVX_DOTPROD_INT8
X86_FEATURE       (AVXDOTPRODINT8,  "avxdotprodint8")
#endif // INTEL_FEATURE_ISA_AVX_DOTPROD_INT8
#if INTEL_FEATURE_ISA_AVX_DOTPROD_PHPS
X86_FEATURE       (AVXDOTPRODPHPS,  "avxdotprodphps")
#endif // INTEL_FEATURE_ISA_AVX_DOTPROD_PHPS
#if INTEL_FEATURE_ISA_AVX_CONVERT
X86_FEATURE       (AVXCONVERT,      "avxconvert")
#endif // INTEL_FEATURE_ISA_AVX_CONVERT
#if INTEL_FEATURE_ISA_AVX_BF16
X86_FEATURE       (AVXBF16,         "avxbf16")
#endif // INTEL_FEATURE_ISA_AVX_BF16
#if INTEL_FEATURE_ISA_AVX_COMPRESS
X86_FEATURE       (AVXCOMPRESS,     "avxcompress")
#endif // INTEL_FEATURE_ISA_AVX_COMPRESS
#if INTEL_FEATURE_ISA_AVX_MEMADVISE
X86_FEATURE       (AVXMEMADVISE,     "avxmemadvise")
X86_FEATURE       (AVX512MEMADVISE,  "avx512memadvise")
#endif // INTEL_FEATURE_ISA_AVX_MEMADVISE
#if INTEL_FEATURE_ISA_AVX_MPSADBW
X86_FEATURE       (AVX512MPSADBW,  "avx512mpsadbw")
#endif // INTEL_FEATURE_ISA_AVX_MPSADBW
#if INTEL_FEATURE_ISA_AVX512_DOTPROD_INT8
X86_FEATURE       (AVX512DOTPRODINT8, "avx512dotprodint8")
#endif // INTEL_FEATURE_ISA_AVX512_DOTPROD_INT8
#if INTEL_FEATURE_ISA_AVX512_DOTPROD_PHPS
X86_FEATURE       (AVX512DOTPRODPHPS, "avx512dotprodphps")
#endif // INTEL_FEATURE_ISA_AVX512_DOTPROD_PHPS
#if INTEL_FEATURE_ISA_AVX512_CONVERT
X86_FEATURE       (AVX512CONVERT,   "avx512convert")
#endif // INTEL_FEATURE_ISA_AVX512_CONVERT
#if INTEL_FEATURE_ISA_AMX_FP16
X86_FEATURE       (AMX_FP16,        "amx-fp16")
#endif // INTEL_FEATURE_ISA_AMX_FP16
#if INTEL_FEATURE_ISA_AMX_FUTURE
X86_FEATURE       (AMX_REDUCE,      "amx-reduce")
X86_FEATURE       (AMX_MEMORY,      "amx-memory")
X86_FEATURE       (AMX_FORMAT,      "amx-format")
X86_FEATURE       (AMX_ELEMENT,     "amx-element")
#endif // INTEL_FEATURE_ISA_AMX_FUTURE
#if INTEL_FEATURE_ISA_AMX_LNC
X86_FEATURE       (AMX_TRANSPOSE,   "amx-transpose")
X86_FEATURE       (AMX_AVX512,      "amx-avx512")
#endif // INTEL_FEATURE_ISA_AMX_LNC
#if INTEL_FEATURE_ISA_AMX_MEMORY2
X86_FEATURE       (AMX_MEMORY2,     "amx-memory2")
#endif // INTEL_FEATURE_ISA_AMX_MEMORY2
#if INTEL_FEATURE_ISA_AMX_BF16_EVEX
X86_FEATURE       (AMX_BF16_EVEX,   "amx-bf16-evex")
#endif // INTEL_FEATURE_ISA_AMX_BF16_EVEX
#if INTEL_FEATURE_ISA_AMX_ELEMENT_EVEX
X86_FEATURE       (AMX_ELEMENT_EVEX, "amx-element-evex")
#endif // INTEL_FEATURE_ISA_AMX_ELEMENT_EVEX
#if INTEL_FEATURE_ISA_AMX_INT8_EVEX
X86_FEATURE       (AMX_INT8_EVEX,    "amx-int8-evex")
#endif // INTEL_FEATURE_ISA_AMX_INT8_EVEX
#if INTEL_FEATURE_ISA_AMX_TILE_EVEX
X86_FEATURE       (AMX_TILE_EVEX,    "amx-tile-evex")
#endif // INTEL_FEATURE_ISA_AMX_TILE_EVEX
#if INTEL_FEATURE_ISA_AMX_TRANSPOSE2
X86_FEATURE       (AMX_TRANSPOSE2,   "amx-transpose2")
#endif // INTEL_FEATURE_ISA_AMX_TRANSPOSE2
#if INTEL_FEATURE_ISA_AMX_CONVERT
X86_FEATURE       (AMX_CONVERT,      "amx-convert")
#endif // INTEL_FEATURE_ISA_AMX_CONVERT
#if INTEL_FEATURE_ISA_AMX_TILE2
X86_FEATURE       (AMX_TILE2,        "amx-tile2")
#endif // INTEL_FEATURE_ISA_AMX_TILE2
#if INTEL_FEATURE_ISA_AMX_BF8
X86_FEATURE       (AMX_BF8,          "amx-bf8")
#endif // INTEL_FEATURE_ISA_AMX_BF8
#if INTEL_FEATURE_ISA_AMX_MEMADVISE
X86_FEATURE       (AMX_MEMADVISE,    "amx-memadvise")
#endif // INTEL_FEATURE_ISA_AMX_MEMADVISE
#if INTEL_FEATURE_ISA_AMX_MEMADVISE_EVEX
X86_FEATURE       (AMX_MEMADVISE_EVEX, "amx-memadvise-evex")
#endif // INTEL_FEATURE_ISA_AMX_MEMADVISE_EVEX
#if INTEL_FEATURE_ISA_AMX_COMPLEX
X86_FEATURE       (AMX_COMPLEX,      "amx-complex")
#endif // INTEL_FEATURE_ISA_AMX_COMPLEX
#if INTEL_FEATURE_ISA_AMX_COMPLEX_EVEX
X86_FEATURE       (AMX_COMPLEX_EVEX, "amx-complex-evex")
#endif // INTEL_FEATURE_ISA_AMX_COMPLEX_EVEX
#if INTEL_FEATURE_ISA_AMX_FP19
X86_FEATURE       (AMX_FP19,         "amx-fp19")
#endif // INTEL_FEATURE_ISA_AMX_FP19
#if INTEL_FEATURE_ISA_AVX_MOVGET
X86_FEATURE       (AVXMOVGET,      "avxmovget")
#endif // INTEL_FEATURE_ISA_AVX_MOVGET
#if INTEL_FEATURE_ISA_AVX512_MOVGET
X86_FEATURE       (AVX512MOVGET,  "avx512movget")
#endif // INTEL_FEATURE_ISA_AVX512_MOVGET
#if INTEL_FEATURE_ISA_GPR_MOVGET
X86_FEATURE       (GPRMOVGET,     "gprmovget")
#endif // INTEL_FEATURE_ISA_GPR_MOVGET
#if INTEL_FEATURE_ISA_MOVGET64B
X86_FEATURE       (MOVGET64B,     "movget64b")
#endif // INTEL_FEATURE_ISA_MOVGET64B
#if INTEL_FEATURE_ISA_RAO_INT
X86_FEATURE       (RAOINT,        "raoint")
#endif // INTEL_FEATURE_ISA_RAO_INT
#if INTEL_FEATURE_ISA_AVX_RAO_INT
X86_FEATURE       (AVXRAOINT,     "avxraoint")
#endif // INTEL_FEATURE_ISA_AVX_RAO_INT
#if INTEL_FEATURE_ISA_AVX_RAO_FP
// AUTO GENERATED BY TOOL
X86_FEATURE       (AVXRAOFP,      "avxraofp")
// end AUTO GENERATED BY TOOL
#endif // INTEL_FEATURE_ISA_AVX_RAO_FP
#if INTEL_FEATURE_ISA_AVX512_RAO_INT
// AUTO GENERATED BY TOOL
X86_FEATURE       (AVX512RAOINT,  "avx512raoint")
// end AUTO GENERATED BY TOOL
#endif // INTEL_FEATURE_ISA_AVX512_RAO_INT
#endif // INTEL_CUSTOMIZATION
X86_FEATURE       (AVXVNNI,         "avxvnni")
// These features aren't really CPU features, but the frontend can set them.
X86_FEATURE       (RETPOLINE_EXTERNAL_THUNK,    "retpoline-external-thunk")
X86_FEATURE       (RETPOLINE_INDIRECT_BRANCHES, "retpoline-indirect-branches")
X86_FEATURE       (RETPOLINE_INDIRECT_CALLS,    "retpoline-indirect-calls")
X86_FEATURE       (LVI_CFI,                     "lvi-cfi")
X86_FEATURE       (LVI_LOAD_HARDENING,          "lvi-load-hardening")
#undef X86_FEATURE_COMPAT
#undef X86_FEATURE
