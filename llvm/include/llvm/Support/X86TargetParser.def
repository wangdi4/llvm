//===- X86TargetParser.def - X86 target parsing defines ---------*- C++ -*-===//
// INTEL_CUSTOMIZATION
//
// INTEL CONFIDENTIAL
//
// Modifications, Copyright (C) 2021 Intel Corporation
//
// This software and the related documents are Intel copyrighted materials, and
// your use of them is governed by the express license under which they were
// provided to you ("License"). Unless the License provides otherwise, you may not
// use, modify, copy, publish, distribute, disclose or transmit this software or
// the related documents without Intel's prior written permission.
//
// This software and the related documents are provided as is, with no express
// or implied warranties, other than those that are expressly stated in the
// License.
//
// end INTEL_CUSTOMIZATION
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file provides defines to build up the X86 target parser's logic.
//
//===----------------------------------------------------------------------===//

// NOTE: NO INCLUDE GUARD DESIRED!

#ifndef X86_VENDOR
#define X86_VENDOR(ENUM, STR)
#endif
X86_VENDOR(VENDOR_INTEL, "intel")
X86_VENDOR(VENDOR_AMD,   "amd")
#undef X86_VENDOR

// This macro is used for cpu types present in compiler-rt/libgcc.
#ifndef X86_CPU_TYPE
#define X86_CPU_TYPE(ENUM, STR)
#endif

#ifndef X86_CPU_TYPE_ALIAS
#define X86_CPU_TYPE_ALIAS(ENUM, STR)
#endif

// This list must match what is implemented in libgcc and compilert-rt. Clang
// uses this to know how to implement __builtin_cpu_is.
X86_CPU_TYPE(INTEL_BONNELL,       "bonnell")
X86_CPU_TYPE(INTEL_CORE2,         "core2")
X86_CPU_TYPE(INTEL_COREI7,        "corei7")
X86_CPU_TYPE(AMDFAM10H,           "amdfam10h")
X86_CPU_TYPE(AMDFAM15H,           "amdfam15h")
X86_CPU_TYPE(INTEL_SILVERMONT,    "silvermont")
X86_CPU_TYPE(INTEL_KNL,           "knl")
X86_CPU_TYPE(AMD_BTVER1,          "btver1")
X86_CPU_TYPE(AMD_BTVER2,          "btver2")
X86_CPU_TYPE(AMDFAM17H,           "amdfam17h")
X86_CPU_TYPE(INTEL_KNM,           "knm")
X86_CPU_TYPE(INTEL_GOLDMONT,      "goldmont")
X86_CPU_TYPE(INTEL_GOLDMONT_PLUS, "goldmont-plus")
X86_CPU_TYPE(INTEL_TREMONT,       "tremont")
X86_CPU_TYPE(AMDFAM19H,           "amdfam19h")
#if INTEL_CUSTOMIZATION
X86_CPU_TYPE(INTEL_GRACEMONT,     "gracemont")
#if INTEL_FEATURE_CPU_RYL
X86_CPU_TYPE(INTEL_RYL,           "ryl")
#endif // INTEL_FEATURE_CPU_RYL
#endif // INTEL_CUSTOMIZATION
X86_CPU_TYPE(ZHAOXIN_FAM7H,       "zhaoxin_fam7h")
X86_CPU_TYPE(INTEL_SIERRAFOREST,  "sierraforest")
X86_CPU_TYPE(INTEL_GRANDRIDGE,    "grandridge")

// Alternate names supported by __builtin_cpu_is and target multiversioning.
X86_CPU_TYPE_ALIAS(INTEL_BONNELL,    "atom")
X86_CPU_TYPE_ALIAS(AMDFAM10H,        "amdfam10")
X86_CPU_TYPE_ALIAS(AMDFAM15H,        "amdfam15")
X86_CPU_TYPE_ALIAS(INTEL_SILVERMONT, "slm")

#undef X86_CPU_TYPE_ALIAS
#undef X86_CPU_TYPE

// This macro is used for cpu subtypes present in compiler-rt/libgcc.
#ifndef X86_CPU_SUBTYPE
#define X86_CPU_SUBTYPE(ENUM, STR)
#endif

#ifndef X86_CPU_SUBTYPE_ALIAS
#define X86_CPU_SUBTYPE_ALIAS(ENUM, STR)
#endif

// This list must match what is implemented in libgcc and compilert-rt. Clang
// uses this to know how to implement __builtin_cpu_is.
X86_CPU_SUBTYPE(INTEL_COREI7_NEHALEM,        "nehalem")
X86_CPU_SUBTYPE(INTEL_COREI7_WESTMERE,       "westmere")
X86_CPU_SUBTYPE(INTEL_COREI7_SANDYBRIDGE,    "sandybridge")
X86_CPU_SUBTYPE(AMDFAM10H_BARCELONA,         "barcelona")
X86_CPU_SUBTYPE(AMDFAM10H_SHANGHAI,          "shanghai")
X86_CPU_SUBTYPE(AMDFAM10H_ISTANBUL,          "istanbul")
X86_CPU_SUBTYPE(AMDFAM15H_BDVER1,            "bdver1")
X86_CPU_SUBTYPE(AMDFAM15H_BDVER2,            "bdver2")
X86_CPU_SUBTYPE(AMDFAM15H_BDVER3,            "bdver3")
X86_CPU_SUBTYPE(AMDFAM15H_BDVER4,            "bdver4")
X86_CPU_SUBTYPE(AMDFAM17H_ZNVER1,            "znver1")
X86_CPU_SUBTYPE(INTEL_COREI7_IVYBRIDGE,      "ivybridge")
X86_CPU_SUBTYPE(INTEL_COREI7_HASWELL,        "haswell")
X86_CPU_SUBTYPE(INTEL_COREI7_BROADWELL,      "broadwell")
X86_CPU_SUBTYPE(INTEL_COREI7_SKYLAKE,        "skylake")
X86_CPU_SUBTYPE(INTEL_COREI7_SKYLAKE_AVX512, "skylake-avx512")
X86_CPU_SUBTYPE(INTEL_COREI7_CANNONLAKE,     "cannonlake")
X86_CPU_SUBTYPE(INTEL_COREI7_ICELAKE_CLIENT, "icelake-client")
X86_CPU_SUBTYPE(INTEL_COREI7_ICELAKE_SERVER, "icelake-server")
X86_CPU_SUBTYPE(AMDFAM17H_ZNVER2,            "znver2")
X86_CPU_SUBTYPE(INTEL_COREI7_CASCADELAKE,    "cascadelake")
X86_CPU_SUBTYPE(INTEL_COREI7_TIGERLAKE,      "tigerlake")
X86_CPU_SUBTYPE(INTEL_COREI7_COOPERLAKE,     "cooperlake")
X86_CPU_SUBTYPE(INTEL_COREI7_SAPPHIRERAPIDS, "sapphirerapids")
X86_CPU_SUBTYPE(INTEL_COREI7_ALDERLAKE,      "alderlake")
X86_CPU_SUBTYPE(AMDFAM19H_ZNVER3,            "znver3")
X86_CPU_SUBTYPE(INTEL_COREI7_ROCKETLAKE,     "rocketlake")
X86_CPU_SUBTYPE(ZHAOXIN_FAM7H_LUJIAZUI,      "zhaoxin_fam7h_lujiazui")
X86_CPU_SUBTYPE(AMDFAM19H_ZNVER4,            "znver4")
X86_CPU_SUBTYPE(INTEL_COREI7_GRANITERAPIDS,  "graniterapids")
#if INTEL_CUSTOMIZATION
#if INTEL_FEATURE_CPU_DMR
X86_CPU_SUBTYPE(INTEL_COREI7_DIAMONDRAPIDS,  "diamondrapids")
#endif // INTEL_FEATURE_CPU_DMR
#if INTEL_FEATURE_CPU_EMR
X86_CPU_SUBTYPE(INTEL_COREI7_EMERALDRAPIDS,  "emeraldrapids")
#endif // INTEL_FEATURE_CPU_EMR
#if INTEL_FEATURE_CPU_RYL
X86_CPU_SUBTYPE(INTEL_RYL_ROYAL,             "royal")
#endif // INTEL_FEATURE_CPU_RYL
#endif // INTEL_CUSTOMIZATION

// Alternate names supported by __builtin_cpu_is and target multiversioning.
X86_CPU_SUBTYPE_ALIAS(INTEL_COREI7_ALDERLAKE, "raptorlake")
X86_CPU_SUBTYPE_ALIAS(INTEL_COREI7_ALDERLAKE, "meteorlake")

#undef X86_CPU_SUBTYPE_ALIAS
#undef X86_CPU_SUBTYPE

// This macro is used for cpu types present in compiler-rt/libgcc. The third
// parameter PRIORITY is as required by the attribute 'target' checking. Note
// that not all are supported/prioritized by GCC, so synchronization with GCC's
// implementation may require changing some existing values.
//
// We cannot just re-sort the list though because its order is dictated by the
// order of bits in CodeGenFunction::GetX86CpuSupportsMask.
#ifndef X86_FEATURE_COMPAT
#define X86_FEATURE_COMPAT(ENUM, STR, PRIORITY) X86_FEATURE(ENUM, STR)
#endif

#ifndef X86_FEATURE
#define X86_FEATURE(ENUM, STR)
#endif

X86_FEATURE_COMPAT(CMOV,            "cmov",                  0)
X86_FEATURE_COMPAT(MMX,             "mmx",                   1)
X86_FEATURE_COMPAT(POPCNT,          "popcnt",                9)
X86_FEATURE_COMPAT(SSE,             "sse",                   2)
X86_FEATURE_COMPAT(SSE2,            "sse2",                  3)
X86_FEATURE_COMPAT(SSE3,            "sse3",                  4)
X86_FEATURE_COMPAT(SSSE3,           "ssse3",                 5)
X86_FEATURE_COMPAT(SSE4_1,          "sse4.1",                7)
X86_FEATURE_COMPAT(SSE4_2,          "sse4.2",                8)
X86_FEATURE_COMPAT(AVX,             "avx",                   12)
X86_FEATURE_COMPAT(AVX2,            "avx2",                  18)
X86_FEATURE_COMPAT(SSE4_A,          "sse4a",                 6)
X86_FEATURE_COMPAT(FMA4,            "fma4",                  14)
X86_FEATURE_COMPAT(XOP,             "xop",                   15)
X86_FEATURE_COMPAT(FMA,             "fma",                   16)
X86_FEATURE_COMPAT(AVX512F,         "avx512f",               19)
X86_FEATURE_COMPAT(BMI,             "bmi",                   13)
X86_FEATURE_COMPAT(BMI2,            "bmi2",                  17)
X86_FEATURE_COMPAT(AES,             "aes",                   10)
X86_FEATURE_COMPAT(PCLMUL,          "pclmul",                11)
X86_FEATURE_COMPAT(AVX512VL,        "avx512vl",              20)
X86_FEATURE_COMPAT(AVX512BW,        "avx512bw",              21)
X86_FEATURE_COMPAT(AVX512DQ,        "avx512dq",              22)
X86_FEATURE_COMPAT(AVX512CD,        "avx512cd",              23)
X86_FEATURE_COMPAT(AVX512ER,        "avx512er",              24)
X86_FEATURE_COMPAT(AVX512PF,        "avx512pf",              25)
X86_FEATURE_COMPAT(AVX512VBMI,      "avx512vbmi",            26)
X86_FEATURE_COMPAT(AVX512IFMA,      "avx512ifma",            27)
X86_FEATURE_COMPAT(AVX5124VNNIW,    "avx5124vnniw",          28)
X86_FEATURE_COMPAT(AVX5124FMAPS,    "avx5124fmaps",          29)
X86_FEATURE_COMPAT(AVX512VPOPCNTDQ, "avx512vpopcntdq",       30)
X86_FEATURE_COMPAT(AVX512VBMI2,     "avx512vbmi2",           31)
X86_FEATURE_COMPAT(GFNI,            "gfni",                  32)
X86_FEATURE_COMPAT(VPCLMULQDQ,      "vpclmulqdq",            33)
X86_FEATURE_COMPAT(AVX512VNNI,      "avx512vnni",            34)
X86_FEATURE_COMPAT(AVX512BITALG,    "avx512bitalg",          35)
X86_FEATURE_COMPAT(AVX512BF16,      "avx512bf16",            36)
X86_FEATURE_COMPAT(AVX512VP2INTERSECT, "avx512vp2intersect", 37)
// Features below here are not in libgcc/compiler-rt.
X86_FEATURE       (3DNOW,           "3dnow")
X86_FEATURE       (3DNOWA,          "3dnowa")
X86_FEATURE       (64BIT,           "64bit")
X86_FEATURE       (ADX,             "adx")
X86_FEATURE       (AMX_BF16,        "amx-bf16")
X86_FEATURE       (AMX_INT8,        "amx-int8")
X86_FEATURE       (AMX_TILE,        "amx-tile")
X86_FEATURE       (CLDEMOTE,        "cldemote")
X86_FEATURE       (CLFLUSHOPT,      "clflushopt")
X86_FEATURE       (CLWB,            "clwb")
X86_FEATURE       (CLZERO,          "clzero")
X86_FEATURE       (CMPXCHG16B,      "cx16")
X86_FEATURE       (CMPXCHG8B,       "cx8")
X86_FEATURE       (CRC32,           "crc32")
X86_FEATURE       (ENQCMD,          "enqcmd")
X86_FEATURE       (F16C,            "f16c")
X86_FEATURE       (FSGSBASE,        "fsgsbase")
X86_FEATURE       (FXSR,            "fxsr")
X86_FEATURE       (INVPCID,         "invpcid")
X86_FEATURE       (KL,              "kl")
X86_FEATURE       (WIDEKL,          "widekl")
X86_FEATURE       (LWP,             "lwp")
X86_FEATURE       (LZCNT,           "lzcnt")
X86_FEATURE       (MOVBE,           "movbe")
X86_FEATURE       (MOVDIR64B,       "movdir64b")
X86_FEATURE       (MOVDIRI,         "movdiri")
X86_FEATURE       (MWAITX,          "mwaitx")
X86_FEATURE       (PCONFIG,         "pconfig")
X86_FEATURE       (PKU,             "pku")
X86_FEATURE       (PREFETCHI,       "prefetchi")
X86_FEATURE       (PREFETCHWT1,     "prefetchwt1")
X86_FEATURE       (PRFCHW,          "prfchw")
X86_FEATURE       (PTWRITE,         "ptwrite")
X86_FEATURE       (RDPID,           "rdpid")
X86_FEATURE       (RDPRU,           "rdpru")
X86_FEATURE       (RDRND,           "rdrnd")
X86_FEATURE       (RDSEED,          "rdseed")
X86_FEATURE       (RTM,             "rtm")
X86_FEATURE       (SAHF,            "sahf")
X86_FEATURE       (SERIALIZE,       "serialize")
X86_FEATURE       (SGX,             "sgx")
X86_FEATURE       (SHA,             "sha")
X86_FEATURE       (SHSTK,           "shstk")
X86_FEATURE       (TBM,             "tbm")
X86_FEATURE       (TSXLDTRK,        "tsxldtrk")
X86_FEATURE       (UINTR,           "uintr")
X86_FEATURE       (VAES,            "vaes")
X86_FEATURE       (VZEROUPPER,      "vzeroupper")
X86_FEATURE       (WAITPKG,         "waitpkg")
X86_FEATURE       (WBNOINVD,        "wbnoinvd")
X86_FEATURE       (X87,             "x87")
X86_FEATURE       (XSAVE,           "xsave")
X86_FEATURE       (XSAVEC,          "xsavec")
X86_FEATURE       (XSAVEOPT,        "xsaveopt")
X86_FEATURE       (XSAVES,          "xsaves")
X86_FEATURE       (HRESET,          "hreset")
X86_FEATURE       (RAOINT,          "raoint")
X86_FEATURE       (AVX512FP16,      "avx512fp16")
#if INTEL_CUSTOMIZATION
#if INTEL_FEATURE_ISA_AVX512_BF16_NE
X86_FEATURE       (AVX512BF16NE,    "avx512bf16ne")
#endif // INTEL_FEATURE_ISA_AVX512_BF16_NE
#if INTEL_FEATURE_ISA_AVX_DOTPROD_PHPS
X86_FEATURE       (AVXDOTPRODPHPS,  "avxdotprodphps")
#endif // INTEL_FEATURE_ISA_AVX_DOTPROD_PHPS
#if INTEL_FEATURE_ISA_AVX_CONVERT
X86_FEATURE       (AVXCONVERT,      "avxconvert")
#endif // INTEL_FEATURE_ISA_AVX_CONVERT
#if INTEL_FEATURE_ISA_AVX_BF16
X86_FEATURE       (AVXBF16,         "avxbf16")
#endif // INTEL_FEATURE_ISA_AVX_BF16
#if INTEL_FEATURE_ISA_AVX_COMPRESS
X86_FEATURE       (AVXCOMPRESS,     "avxcompress")
#endif // INTEL_FEATURE_ISA_AVX_COMPRESS
#if INTEL_FEATURE_ISA_AVX_MEMADVISE
X86_FEATURE       (AVXMEMADVISE,     "avxmemadvise")
X86_FEATURE       (AVX512MEMADVISE,  "avx512memadvise")
#endif // INTEL_FEATURE_ISA_AVX_MEMADVISE
#if INTEL_FEATURE_ISA_AVX512_MEDIAX
X86_FEATURE       (AVX512MEDIAX,  "avx512mediax")
#endif // INTEL_FEATURE_ISA_AVX512_MEDIAX
#if INTEL_FEATURE_ISA_AVX512_VNNI_INT8
X86_FEATURE       (AVX512VNNIINT8, "avx512vnniint8")
#endif // INTEL_FEATURE_ISA_AVX512_VNNI_INT8
#if INTEL_FEATURE_ISA_AVX512_VNNI_FP16
X86_FEATURE       (AVX512VNNIFP16, "avx512vnnifp16")
#endif // INTEL_FEATURE_ISA_AVX512_VNNI_FP16
#if INTEL_FEATURE_ISA_AVX512_CONVERT
X86_FEATURE       (AVX512CONVERT,   "avx512convert")
#endif // INTEL_FEATURE_ISA_AVX512_CONVERT
#if INTEL_FEATURE_ISA_AMX_FUTURE
X86_FEATURE       (AMX_REDUCE,      "amx-reduce")
X86_FEATURE       (AMX_MEMORY,      "amx-memory")
X86_FEATURE       (AMX_FORMAT,      "amx-format")
X86_FEATURE       (AMX_ELEMENT,     "amx-element")
#endif // INTEL_FEATURE_ISA_AMX_FUTURE
#if INTEL_FEATURE_ISA_AMX_LNC
X86_FEATURE       (AMX_TRANSPOSE,   "amx-transpose")
#endif // INTEL_FEATURE_ISA_AMX_LNC
#if INTEL_FEATURE_ISA_AMX_MEMORY2
X86_FEATURE       (AMX_MEMORY2,     "amx-memory2")
#endif // INTEL_FEATURE_ISA_AMX_MEMORY2
#if INTEL_FEATURE_ISA_AMX_BF16_EVEX
X86_FEATURE       (AMX_BF16_EVEX,   "amx-bf16-evex")
#endif // INTEL_FEATURE_ISA_AMX_BF16_EVEX
#if INTEL_FEATURE_ISA_AMX_ELEMENT_EVEX
X86_FEATURE       (AMX_ELEMENT_EVEX, "amx-element-evex")
#endif // INTEL_FEATURE_ISA_AMX_ELEMENT_EVEX
#if INTEL_FEATURE_ISA_AMX_INT8_EVEX
X86_FEATURE       (AMX_INT8_EVEX,    "amx-int8-evex")
#endif // INTEL_FEATURE_ISA_AMX_INT8_EVEX
#if INTEL_FEATURE_ISA_AMX_TILE_EVEX
X86_FEATURE       (AMX_TILE_EVEX,    "amx-tile-evex")
#endif // INTEL_FEATURE_ISA_AMX_TILE_EVEX
#if INTEL_FEATURE_ISA_AMX_TRANSPOSE2
X86_FEATURE       (AMX_TRANSPOSE2,   "amx-transpose2")
#endif // INTEL_FEATURE_ISA_AMX_TRANSPOSE2
#if INTEL_FEATURE_ISA_AMX_CONVERT
X86_FEATURE       (AMX_CONVERT,      "amx-convert")
#endif // INTEL_FEATURE_ISA_AMX_CONVERT
#if INTEL_FEATURE_ISA_AMX_TILE2
X86_FEATURE       (AMX_TILE2,        "amx-tile2")
#endif // INTEL_FEATURE_ISA_AMX_TILE2
#if INTEL_FEATURE_ISA_AMX_MEMADVISE
X86_FEATURE       (AMX_MEMADVISE,    "amx-memadvise")
#endif // INTEL_FEATURE_ISA_AMX_MEMADVISE
#if INTEL_FEATURE_ISA_AMX_MEMADVISE_EVEX
X86_FEATURE       (AMX_MEMADVISE_EVEX, "amx-memadvise-evex")
#endif // INTEL_FEATURE_ISA_AMX_MEMADVISE_EVEX
#if INTEL_FEATURE_ISA_AMX_COMPLEX
X86_FEATURE       (AMX_COMPLEX,      "amx-complex")
#endif // INTEL_FEATURE_ISA_AMX_COMPLEX
#if INTEL_FEATURE_ISA_AMX_TF32
X86_FEATURE       (AMX_TF32,         "amx-tf32")
#endif // INTEL_FEATURE_ISA_AMX_TF32
#if INTEL_FEATURE_ISA_AVX_MOVGET
X86_FEATURE       (AVXMOVGET,      "avxmovget")
#endif // INTEL_FEATURE_ISA_AVX_MOVGET
#if INTEL_FEATURE_ISA_AVX512_MOVGET
X86_FEATURE       (AVX512MOVGET,  "avx512movget")
#endif // INTEL_FEATURE_ISA_AVX512_MOVGET
#if INTEL_FEATURE_ISA_GPR_MOVGET
X86_FEATURE       (GPRMOVGET,     "gprmovget")
#endif // INTEL_FEATURE_ISA_GPR_MOVGET
#if INTEL_FEATURE_ISA_MOVGET64B
X86_FEATURE       (MOVGET64B,     "movget64b")
#endif // INTEL_FEATURE_ISA_MOVGET64B
#if INTEL_FEATURE_ISA_AVX_RAO_INT
X86_FEATURE       (AVXRAOINT,     "avxraoint")
#endif // INTEL_FEATURE_ISA_AVX_RAO_INT
#if INTEL_FEATURE_ISA_AVX_RAO_FP
// AUTO GENERATED BY TOOL
X86_FEATURE       (AVXRAOFP,      "avxraofp")
// end AUTO GENERATED BY TOOL
#endif // INTEL_FEATURE_ISA_AVX_RAO_FP
#if INTEL_FEATURE_ISA_AVX512_RAO_INT
// AUTO GENERATED BY TOOL
X86_FEATURE       (AVX512RAOINT,  "avx512raoint")
// end AUTO GENERATED BY TOOL
#endif // INTEL_FEATURE_ISA_AVX512_RAO_INT
#if INTEL_FEATURE_ISA_AVX512_RAO_FP
// AUTO GENERATED BY TOOL
X86_FEATURE       (AVX512RAOFP,   "avx512raofp")
// end AUTO GENERATED BY TOOL
#endif // INTEL_FEATURE_ISA_AVX512_RAO_FP
#if INTEL_FEATURE_ISA_AMX_AVX512
// AUTO GENERATED BY TOOL
X86_FEATURE       (AMX_AVX512, "amx-avx512")
// end AUTO GENERATED BY TOOL
#endif // INTEL_FEATURE_ISA_AMX_AVX512
#if INTEL_FEATURE_ISA_AMX_AVX512_TILE16MOV
X86_FEATURE       (AMX_AVX512_TILE16MOV, "amx-avx512-tile16mov")
#endif // INTEL_FEATURE_ISA_AMX_AVX512_TILE16MOV
#if INTEL_FEATURE_ISA_AVX512_NE_CONVERT
// AUTO GENERATED BY TOOL
X86_FEATURE       (AVX512NECONVERT,      "avx512neconvert")
// end AUTO GENERATED BY TOOL
#endif // INTEL_FEATURE_ISA_AVX512_NE_CONVERT
#if INTEL_FEATURE_ISA_SHA512
// AUTO GENERATED BY TOOL
X86_FEATURE       (SHA512,      "sha512")
// end AUTO GENERATED BY TOOL
#endif // INTEL_FEATURE_ISA_SHA512
#if INTEL_FEATURE_ISA_SM3
// AUTO GENERATED BY TOOL
X86_FEATURE       (SM3, "sm3")
// end AUTO GENERATED BY TOOL
#endif // INTEL_FEATURE_ISA_SM3
#if INTEL_FEATURE_ISA_SM4
// AUTO GENERATED BY TOOL
X86_FEATURE       (SM4, "sm4")
// end AUTO GENERATED BY TOOL
#endif // INTEL_FEATURE_ISA_SM4
#if INTEL_FEATURE_ISA_DSPV1
// AUTO GENERATED BY TOOL
X86_FEATURE       (DSPV1, "dspv1")
// end AUTO GENERATED BY TOOL
#endif // INTEL_FEATURE_ISA_DSPV1
#if INTEL_FEATURE_ISA_AVX_VNNI_INT16
// AUTO GENERATED BY TOOL
X86_FEATURE       (AVXVNNIINT16, "avxvnniint16")
// end AUTO GENERATED BY TOOL
#endif // INTEL_FEATURE_ISA_AVX_VNNI_INT16
#if INTEL_FEATURE_ISA_AVX512_VNNI_INT16
// AUTO GENERATED BY TOOL
X86_FEATURE       (AVX512VNNIINT16, "avx512vnniint16")
// end AUTO GENERATED BY TOOL
#endif // INTEL_FEATURE_ISA_AVX512_VNNI_INT16
#if INTEL_FEATURE_ISA_AMX_SPARSE
// AUTO GENERATED BY TOOL
X86_FEATURE       (AMX_SPARSE,      "amx-sparse")
// end AUTO GENERATED BY TOOL
#endif // INTEL_FEATURE_ISA_AMX_SPARSE
#if INTEL_FEATURE_ISA_AMX_V3
// AUTO GENERATED BY TOOL
X86_FEATURE       (AMX_V3,          "amx-v3")
// end AUTO GENERATED BY TOOL
#endif // INTEL_FEATURE_ISA_AMX_V3
#if INTEL_FEATURE_ISA_VPINSR_VPEXTR
X86_FEATURE       (VPINSR_VPEXTR,   "vpinsr-vpextr")
#endif // INTEL_FEATURE_ISA_VPINSR_VPEXTR
#if INTEL_FEATURE_ISA_PREFETCHST2
X86_FEATURE       (PREFETCHST2,     "prefetchst2")
#endif // INTEL_FEATURE_ISA_PREFETCHST2
#if INTEL_FEATURE_ISA_AVX512_SAT_CVT
// AUTO GENERATED BY TOOL
X86_FEATURE       (AVX512SATCVT,      "avx512satcvt")
// end AUTO GENERATED BY TOOL
#endif // INTEL_FEATURE_ISA_AVX512_SAT_CVT
#if INTEL_FEATURE_ISA_AVX512_MINMAX
X86_FEATURE       (AVX512MINMAX,      "avx512minmax")
#endif // INTEL_FEATURE_ISA_AVX512_MINMAX
#if INTEL_FEATURE_ISA_AVX512_COMPLEX
X86_FEATURE       (AVX512COMPLEX,     "avx512complex")
#endif // INTEL_FEATURE_ISA_AVX512_COMPLEX
#if INTEL_FEATURE_ISA_AVX512_REDUCTION
X86_FEATURE       (AVX512REDUCTION,   "avx512reduction")
#endif // INTEL_FEATURE_ISA_AVX512_REDUCTION
#if INTEL_FEATURE_ISA_AVX512_REDUCTION2
// AUTO GENERATED BY TOOL
X86_FEATURE       (AVX512REDUCTION2, "avx512reduction2")
// end AUTO GENERATED BY TOOL
#endif // INTEL_FEATURE_ISA_AVX512_REDUCTION2
#if INTEL_FEATURE_ISA_AVX256P
X86_FEATURE       (AVX256P, "avx256p")
#endif // INTEL_FEATURE_ISA_AVX256P
#if INTEL_FEATURE_ISA_AMX_FP8
// AUTO GENERATED BY TOOL
X86_FEATURE       (AMX_FP8, "amx-fp8")
// end AUTO GENERATED BY TOOL
#endif // INTEL_FEATURE_ISA_AMX_FP8
#if INTEL_FEATURE_ISA_AVX512_VNNI_FP8
// AUTO GENERATED BY TOOL
X86_FEATURE       (AVX512VNNIFP8,      "avx512vnnifp8")
// end AUTO GENERATED BY TOOL
#endif // INTEL_FEATURE_ISA_AVX512_VNNI_FP8
#if INTEL_FEATURE_ISA_AVX512_VPMM
X86_FEATURE       (AVX512VPMM,      "avx512vpmm")
#endif // INTEL_FEATURE_ISA_AVX512_VPMM
#endif // INTEL_CUSTOMIZATION
X86_FEATURE       (AMX_FP16,        "amx-fp16")
X86_FEATURE       (CMPCCXADD,       "cmpccxadd")
X86_FEATURE       (AVXNECONVERT,    "avxneconvert")
X86_FEATURE       (AVXVNNI,         "avxvnni")
X86_FEATURE       (AVXIFMA,         "avxifma")
X86_FEATURE       (AVXVNNIINT8,     "avxvnniint8")
// These features aren't really CPU features, but the frontend can set them.
X86_FEATURE       (RETPOLINE_EXTERNAL_THUNK,    "retpoline-external-thunk")
X86_FEATURE       (RETPOLINE_INDIRECT_BRANCHES, "retpoline-indirect-branches")
X86_FEATURE       (RETPOLINE_INDIRECT_CALLS,    "retpoline-indirect-calls")
X86_FEATURE       (LVI_CFI,                     "lvi-cfi")
X86_FEATURE       (LVI_LOAD_HARDENING,          "lvi-load-hardening")
#undef X86_FEATURE_COMPAT
#undef X86_FEATURE

#ifndef CPU_SPECIFIC
#define CPU_SPECIFIC(NAME, TUNE_NAME, MANGLING, FEATURES)
#endif

#ifndef CPU_SPECIFIC_ALIAS
#define CPU_SPECIFIC_ALIAS(NEW_NAME, TUNE_NAME, NAME)
#endif

#if INTEL_CUSTOMIZATION
// Used to define additional aliases used for possible values to "-ax".
#ifndef CPU_SPECIFIC_ALIAS_ADDITIONAL
#define CPU_SPECIFIC_ALIAS_ADDITIONAL(NEW_NAME, NAME)
#endif
#endif // INTEL_CUSTOMIZATION

CPU_SPECIFIC("generic", "generic", 'A', "")
CPU_SPECIFIC("pentium", "pentium", 'B', "")
CPU_SPECIFIC("pentium_pro", "pentiumpro", 'C', "+cmov")
CPU_SPECIFIC("pentium_mmx", "pentium-mmx", 'D', "+mmx")
CPU_SPECIFIC("pentium_ii", "pentium2", 'E', "+cmov,+mmx")
CPU_SPECIFIC("pentium_iii", "pentium3", 'H', "+cmov,+mmx,+sse")
CPU_SPECIFIC_ALIAS("pentium_iii_no_xmm_regs", "pentium3", "pentium_iii")
CPU_SPECIFIC("pentium_4", "pentium4", 'J', "+cmov,+mmx,+sse,+sse2")
CPU_SPECIFIC("pentium_m", "pentium-m", 'K', "+cmov,+mmx,+sse,+sse2")
CPU_SPECIFIC("pentium_4_sse3", "prescott", 'L', "+cmov,+mmx,+sse,+sse2,+sse3")
CPU_SPECIFIC("core_2_duo_ssse3", "core2", 'M', "+cmov,+mmx,+sse,+sse2,+sse3,+ssse3")
CPU_SPECIFIC("core_2_duo_sse4_1", "penryn", 'N', "+cmov,+mmx,+sse,+sse2,+sse3,+ssse3,+sse4.1")
CPU_SPECIFIC("atom", "atom", 'O', "+cmov,+mmx,+sse,+sse2,+sse3,+ssse3,+movbe")
CPU_SPECIFIC("atom_sse4_2", "silvermont", 'c', "+cmov,+mmx,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt")
CPU_SPECIFIC("core_i7_sse4_2", "nehalem", 'P', "+cmov,+mmx,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt")
CPU_SPECIFIC("core_aes_pclmulqdq", "westmere", 'Q', "+cmov,+mmx,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt")
CPU_SPECIFIC("atom_sse4_2_movbe", "silvermont", 'd', "+cmov,+mmx,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+movbe,+popcnt")
CPU_SPECIFIC("goldmont", "goldmont", 'i', "+cmov,+mmx,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+movbe,+popcnt")
CPU_SPECIFIC("sandybridge", "sandybridge", 'R', "+cmov,+mmx,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt,+avx")
CPU_SPECIFIC_ALIAS("core_2nd_gen_avx", "sandybridge", "sandybridge")
CPU_SPECIFIC("ivybridge", "ivybridge", 'S', "+cmov,+mmx,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt,+f16c,+avx")
CPU_SPECIFIC_ALIAS("core_3rd_gen_avx", "ivybridge", "ivybridge")
CPU_SPECIFIC("haswell", "haswell", 'V', "+cmov,+mmx,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+movbe,+popcnt,+f16c,+avx,+fma,+bmi,+lzcnt,+avx2")
CPU_SPECIFIC_ALIAS("core_4th_gen_avx", "haswell", "haswell")
CPU_SPECIFIC("core_4th_gen_avx_tsx", "haswell", 'W', "+cmov,+mmx,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+movbe,+popcnt,+f16c,+avx,+fma,+bmi,+lzcnt,+avx2")
CPU_SPECIFIC("broadwell", "broadwell", 'X', "+cmov,+mmx,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+movbe,+popcnt,+f16c,+avx,+fma,+bmi,+lzcnt,+avx2,+adx")
CPU_SPECIFIC_ALIAS("core_5th_gen_avx", "broadwell", "broadwell")
CPU_SPECIFIC("core_5th_gen_avx_tsx", "broadwell", 'Y', "+cmov,+mmx,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+movbe,+popcnt,+f16c,+avx,+fma,+bmi,+lzcnt,+avx2,+adx")
CPU_SPECIFIC("knl", "knl", 'Z', "+cmov,+mmx,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+movbe,+popcnt,+f16c,+avx,+fma,+bmi,+lzcnt,+avx2,+avx512f,+adx,+avx512er,+avx512pf,+avx512cd")
CPU_SPECIFIC_ALIAS("mic_avx512", "knl", "knl")
CPU_SPECIFIC("skylake", "skylake", 'b', "+cmov,+mmx,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+movbe,+popcnt,+f16c,+avx,+fma,+bmi,+lzcnt,+avx2,+adx,+mpx")
CPU_SPECIFIC( "skylake_avx512", "skylake-avx512", 'a', "+cmov,+mmx,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+movbe,+popcnt,+f16c,+avx,+fma,+bmi,+lzcnt,+avx2,+avx512dq,+avx512f,+adx,+avx512cd,+avx512bw,+avx512vl,+clwb")
CPU_SPECIFIC("cannonlake", "cannonlake", 'e', "+cmov,+mmx,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+movbe,+popcnt,+f16c,+avx,+fma,+bmi,+lzcnt,+avx2,+avx512dq,+avx512f,+adx,+avx512ifma,+avx512cd,+avx512bw,+avx512vl,+avx512vbmi")
CPU_SPECIFIC("knm", "knm", 'j', "+cmov,+mmx,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+movbe,+popcnt,+f16c,+avx,+fma,+bmi,+lzcnt,+avx2,+avx512f,+adx,+avx512er,+avx512pf,+avx512cd,+avx5124fmaps,+avx5124vnniw,+avx512vpopcntdq")

#if INTEL_CUSTOMIZATION
CPU_SPECIFIC_ALIAS("goldmont_plus", "goldmont-plus", "atom_sse4_2_movbe")
CPU_SPECIFIC_ALIAS("tremont", "tremont", "atom_sse4_2_movbe")
CPU_SPECIFIC("cascadelake", "cascadelake", 'o', "+cmov,+adx,+avx,+avx2,+avx512bw,+avx512cd,+avx512dq,+avx512f,+avx512vl,+avx512vnni,+bmi,+bmi2,+clwb,+f16c,+fma,+invpcid,+lzcnt,+mmx,+movbe,+pku,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3")
CPU_SPECIFIC_ALIAS("cooperlake", "cooperlake", "cascadelake")
CPU_SPECIFIC("icelake_client", "icelake-client", 'k', "+cmov,+adx,+avx,+avx2,+avx512bitalg,+avx512bw,+avx512cd,+avx512dq,+avx512f,+avx512ifma,+avx512vbmi,+avx512vbmi2,+avx512vl,+avx512vnni,+avx512vpopcntdq,+bmi,+bmi2,+f16c,+fma,+gfni,+invpcid,+lzcnt,+mmx,+movbe,+pku,+popcnt,+rdpid,+sha,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+vaes,+vpclmulqdq")
CPU_SPECIFIC("tigerlake", "tigerlake", 'l', "+cmov,+adx,+avx,+avx2,+avx512bitalg,+avx512bw,+avx512cd,+avx512dq,+avx512f,+avx512ifma,+avx512vbmi,+avx512vbmi2,+avx512vl,+avx512vnni,+avx512vp2intersect,+avx512vpopcntdq,+bmi,+bmi2,+clwb,+f16c,+fma,+gfni,+invpcid,+kl,+lzcnt,+mmx,+movbe,+movdir64b,+movdiri,+pku,+popcnt,+rdpid,+sha,+shstk,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+vaes,+vpclmulqdq,+widekl")
CPU_SPECIFIC_ALIAS("icelake_server", "icelake_client", "icelake_client")
CPU_SPECIFIC_ALIAS("rocketlake", "icelake_client", "icelake_client")
CPU_SPECIFIC("alderlake", "alderlake", 'p', "+cmov,+adx,+avx,+avx2,+avxvnni,+bmi,+bmi2,+cldemote,+clwb,+f16c,+fma,+gfni,+hreset,+invpcid,+kl,+lzcnt,+mmx,+movbe,+movdir64b,+movdiri,+pconfig,+pku,+popcnt,+ptwrite,+rdpid,+serialize,+sha,+shstk,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+vaes,+vpclmulqdq,+waitpkg,+widekl")
CPU_SPECIFIC("sapphirerapids", "sapphirerapids", 'n', "+cmov,+adx,+amx-bf16,+amx-int8,+amx-tile,+avx,+avx2,+avx512bf16,+avx512bitalg,+avx512bw,+avx512cd,+avx512dq,+avx512f,+avx512fp16,+avx512ifma,+avx512vbmi,+avx512vbmi2,+avx512vl,+avx512vnni,+avx512vpopcntdq,+avxvnni,+bmi,+bmi2,+cldemote,+clwb,+enqcmd,+f16c,+fma,+gfni,+invpcid,+lzcnt,+mmx,+movbe,+movdir64b,+movdiri,+pconfig,+pku,+popcnt,+ptwrite,+rdpid,+serialize,+sha,+shstk,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+tsxldtrk,+uintr,+vaes,+vpclmulqdq,+waitpkg,+wbnoinvd")
CPU_SPECIFIC_ALIAS("gracemont", "gracemont", "alderlake")
CPU_SPECIFIC_ALIAS("raptorlake", "raptorlake", "alderlake")
CPU_SPECIFIC_ALIAS("meteorlake", "meteorlake", "alderlake")
CPU_SPECIFIC_ALIAS("sierraforest", "sierraforest", "alderlake")
CPU_SPECIFIC_ALIAS("grandridge", "grandridge", "alderlake")
CPU_SPECIFIC_ALIAS("graniterapids", "graniterapids", "sapphirerapids")
#if INTEL_FEATURE_CPU_EMR
CPU_SPECIFIC_ALIAS("emeraldrapids", "emeraldrapids", "sapphirerapids")
#endif // INTEL_FEATURE_CPU_EMR
#if INTEL_FEATURE_CPU_DMR
CPU_SPECIFIC_ALIAS("diamondrapids", "diamondrapids", "sapphirerapids")
#endif // INTEL_FEATURE_CPU_DMR

CPU_SPECIFIC_ALIAS_ADDITIONAL("skylake-avx512", "skylake_avx512")
CPU_SPECIFIC_ALIAS_ADDITIONAL("corei7-avx", "sandybridge")
CPU_SPECIFIC_ALIAS_ADDITIONAL("corei7", "core_i7_sse4_2")
CPU_SPECIFIC_ALIAS_ADDITIONAL("penryn", "core_2_duo_sse4_1")
CPU_SPECIFIC_ALIAS_ADDITIONAL("core-avx2", "haswell")
CPU_SPECIFIC_ALIAS_ADDITIONAL("core-avx-i", "ivybridge")
CPU_SPECIFIC_ALIAS_ADDITIONAL("icelake-client", "icelake_client")
CPU_SPECIFIC_ALIAS_ADDITIONAL("icelake-server", "icelake_server")
CPU_SPECIFIC_ALIAS_ADDITIONAL("goldmont-plus", "goldmont_plus")

#undef CPU_SPECIFIC_ALIAS_ADDITIONAL
#endif // INTEL_CUSTOMIZATION

#undef CPU_SPECIFIC_ALIAS
#undef CPU_SPECIFIC
