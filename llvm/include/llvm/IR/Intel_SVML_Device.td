//===------ Intel_SVML.td - Defines all SVML variants -*- tablegen -*------===//
//
// Copyright (C) 2016 Intel Corporation. All rights reserved.
//
// The information and source code contained herein is the exclusive property
// of Intel Corporation and may not be disclosed, examined or reproduced in
// whole or in part without explicit written authorization from the company.
//
// ===--------------------------------------------------------------------=== //
///
/// \file
/// This file defines the classes used to represent the set of SVML variants.
/// The TableGen classes defined here provide enough flexibility to define
/// variants of single/double precision or both and whether or not a masked
/// variant is available.
///
/// Note: vector length is not encoded here because the loop vectorizer can
/// emit an svml call of any logical vector length. Therefore, vector lengths
/// of 2 .. 64 are automatically generated by the TableGen backend that
/// processes this file (llvm/utils/TableGen/Intel_SVMLEmitter.cpp). We rely
/// on legalization to rewrite the logical svml calls into target legal ones.
///
// ===--------------------------------------------------------------------=== //

class IntrinFormat<bit intrin> {
  bit hasIntrinsic = intrin;
}

// The incoming LLVM IR may be in the form of an intrinsic instead of
// a math library call. If so, allow TableGen to generate the intrinsic
// to SVML function mapping.
def NoIntrin : IntrinFormat<0>;
def Intrin   : IntrinFormat<1>;

class SvmlVariants<int N, IntrinFormat IF> {
  int Args = N;
  bit hasIntrinsic = IF.hasIntrinsic;
}

// TODO: add the other funcs
def cos        : SvmlVariants<1, Intrin>;
def exp        : SvmlVariants<1, Intrin>;
def exp2       : SvmlVariants<1, Intrin>;
def exp10      : SvmlVariants<1, NoIntrin>;
def log        : SvmlVariants<1, Intrin>;
def log1p      : SvmlVariants<1, NoIntrin>;
def log2       : SvmlVariants<1, Intrin>;
def log10      : SvmlVariants<1, Intrin>;
def logb       : SvmlVariants<1, NoIntrin>;
def pow        : SvmlVariants<2, Intrin>;
def sin        : SvmlVariants<1, Intrin>;
