//===- Version.cpp - Clang Version Number -----------------------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines several version-related utility functions for Clang.
//
//===----------------------------------------------------------------------===//

#include "clang/Basic/Version.h"
#include "clang/Basic/LLVM.h"
#include "clang/Config/config.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/Support/Path.h"          // INTEL
#include "llvm/Support/FileSystem.h"    // INTEL
#include "clang/Basic/intel/versparm.h" // INTEL
#include "llvm/Config/dpcpp.version.info.h" // INTEL
#include <cstdlib>
#include <cstring>

#include "VCSVersion.inc"

namespace clang {

std::string getClangRepositoryPath() {
#if defined(CLANG_REPOSITORY_STRING)
  return CLANG_REPOSITORY_STRING;
#else
#ifdef CLANG_REPOSITORY
  return CLANG_REPOSITORY;
#else
  return "";
#endif
#endif
}

std::string getLLVMRepositoryPath() {
#ifdef LLVM_REPOSITORY
  return LLVM_REPOSITORY;
#else
  return "";
#endif
}

std::string getClangRevision() {
#ifdef CLANG_REVISION
  return CLANG_REVISION;
#else
  return "";
#endif
}

std::string getLLVMRevision() {
#ifdef LLVM_REVISION
  return LLVM_REVISION;
#else
  return "";
#endif
}

std::string getClangFullRepositoryVersion() {
  std::string buf;
  llvm::raw_string_ostream OS(buf);
#if INTEL_CUSTOMIZATION
  // Use the SHA revisions for clang and llvm repos but do not include any
  // repo paths.  A unique string is needed to ensure loaded ASTs were
  // generated by the same compiler that created them.
  std::string Revision = getClangRevision();
  std::string LLVMRev = getLLVMRevision();
  OS << Revision << ':' << LLVMRev;
#endif // INTEL_CUSTOMIZATION
  return OS.str();
}

std::string getClangFullVersion() {
  return getClangToolFullVersion("clang");
}

std::string getClangToolFullVersion(StringRef ToolName) {
  std::string buf;
  llvm::raw_string_ostream OS(buf);
#if INTEL_CUSTOMIZATION
  OS.str().erase();
  OS << getDPCPPProductName() << " " << getDPCPPVersionString()
     << " (" << getICXVersionString() << ")";
#endif // INTEL_CUSTOMIZATION
  return OS.str();
}

std::string getClangFullCPPVersion() {
  // The version string we report in __VERSION__ is just a compacted version of
  // the one we report on the command line.
  std::string buf;
  llvm::raw_string_ostream OS(buf);
#ifdef CLANG_VENDOR
  OS << CLANG_VENDOR;
#endif
  OS << "Clang " CLANG_VERSION_STRING;

  std::string repo = getClangFullRepositoryVersion();
  if (!repo.empty()) {
    OS << " " << repo;
  }
  return OS.str();
}

#if INTEL_CUSTOMIZATION
std::string getICXVersionString() {
  // XMAIN_BUILD_DATE_STAMP_STR is expected to be 8 characters of YYYYMMDD.
  // Split the string for our usage in the version, which should resemble
  // YYYY.8.x.0.MMDD
  StringRef Date(XMAIN_BUILD_DATE_STAMP_STR);
  if (Date.size() == 8) {
    StringRef MMDD(Date.take_back(4));
    StringRef YYYY(Date.take_front(4));
    std::string buf;
    llvm::raw_string_ostream OS(buf);
    OS << YYYY << "." << XMAIN_VERSION_STRING << "." << MMDD;
    return OS.str();
  }
  return XMAIN_VERSION_STRING;
}

std::string getDPCPPProductName() {
  return DPCPP_PRODUCT_NAME;
}

std::string getICXVersionNumber() {
  return XMAIN_VERSION_NUMBER;
}
#endif // INTEL_CUSTOMIZATION

} // end namespace clang
