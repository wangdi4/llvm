// INTEL_COLLAB
// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --include-generated-funcs --prefix-filecheck-ir-name _
// RUN: %clang_cc1 -opaque-pointers -emit-llvm -o - -fopenmp -fopenmp-late-outline -fopenmp-typed-clauses \
// RUN:  -fopenmp-new-depend-ir -triple x86_64-unknown-linux-gnu %s \
// RUN:  -fopenmp-version=51 | FileCheck %s
// RUN: %clang_cc1 -opaque-pointers -emit-llvm -o - -fopenmp -fopenmp-late-outline -fopenmp-typed-clauses \
// RUN:  -fopenmp-new-depend-ir -triple x86_64-unknown-linux-gnu %s \
// RUN:  -fopenmp-version=51 -emit-pch -o %t
// RUN: %clang_cc1 -opaque-pointers -emit-llvm -o - -fopenmp -fopenmp-late-outline -fopenmp-typed-clauses \
// RUN:  -fopenmp-new-depend-ir -triple x86_64-unknown-linux-gnu %s \
// RUN:  -fopenmp-version=51 -include-pch %t | FileCheck %s

// Verify new IR generation for depend clause and depobj directive.
#ifndef HEADER
#define HEADER

typedef void *omp_depend_t;
void doSomething();
int xxx=0;

void foo1() {
  int aaa,bbb,ccc,ddd,eee,ppp,qqq;
  omp_depend_t obj1;
  omp_depend_t obj2;

  // depobj directive
  #pragma omp depobj(obj1) depend(in:ppp)
  #pragma omp depobj(obj2) depend(out:qqq)
  if (xxx==0) {
    #pragma omp depobj(obj1) update(inout)
    #pragma omp depobj(obj2) destroy
  } else {
    #pragma omp depobj(obj2) update(mutexinoutset)
    #pragma omp depobj(obj1) destroy
  }
#pragma omp parallel
  {
    // depobj dependency type.
    // FIXME: omp_all_memory not yet supported.
    #pragma omp task \
          depend(depobj:obj1) depend(in:aaa) depend(out:bbb) \
          depend(inout:ccc) depend(mutexinoutset:ddd) depend(inoutset:eee)
    {
      doSomething();
    }

    // Reuse dependencies from previous depobj.
    #pragma omp task depend(depobj:obj1)
    {
      doSomething();
    }

    // depend using an array slice.
    {
      short **b, ***c;
      c = &b;

      #pragma omp task depend(in:c[1000:4][100:3][10:2])
      {
        doSomething();
      }
    }
    #pragma omp taskwait depend(depobj: obj1) 
  }
  #pragma omp taskwait depend(depobj: obj2) nowait
}
#endif // HEADER
// CHECK-LABEL: @_Z4foo1v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[AAA:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[BBB:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[CCC:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[DDD:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[EEE:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[PPP:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[QQQ:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[OBJ1:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[OBJ2:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[DEPOBJ_SIZE_ADDR:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[SAVED_STACK:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[__VLA_EXPR0:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[DEP_COUNTER_ADDR:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[DEPOBJ_SIZE_ADDR7:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[SAVED_STACK8:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[__VLA_EXPR1:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[DEP_COUNTER_ADDR10:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[B:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[C:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[DOTDEP_ARR_ADDR11:%.*]] = alloca [1 x %struct.kmp_depend_info], align 8
// CHECK-NEXT:    [[DEP_COUNTER_ADDR17:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[DEPOBJ_SIZE_ADDR18:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[SAVED_STACK19:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[__VLA_EXPR2:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[DEP_COUNTER_ADDR21:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[DEPOBJ_SIZE_ADDR22:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[SAVED_STACK23:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[__VLA_EXPR3:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[DEP_COUNTER_ADDR25:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(ptr @[[GLOB1:[0-9]+]])
// CHECK-NEXT:    [[DOTDEP_ARR_ADDR:%.*]] = call ptr @__kmpc_alloc(i32 [[TMP0]], i64 48, ptr null)
// CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO:%.*]], ptr [[DOTDEP_ARR_ADDR]], i32 0, i32 0
// CHECK-NEXT:    store i64 1, ptr [[TMP1]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = ptrtoint ptr [[PPP]] to i64
// CHECK-NEXT:    [[TMP3:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], ptr [[DOTDEP_ARR_ADDR]], i64 1
// CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP3]], i32 0, i32 0
// CHECK-NEXT:    store i64 [[TMP2]], ptr [[TMP4]], align 8
// CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP3]], i32 0, i32 1
// CHECK-NEXT:    store i64 4, ptr [[TMP5]], align 8
// CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP3]], i32 0, i32 2
// CHECK-NEXT:    store i8 1, ptr [[TMP6]], align 8
// CHECK-NEXT:    [[TMP7:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], ptr [[DOTDEP_ARR_ADDR]], i64 1
// CHECK-NEXT:    store ptr [[TMP7]], ptr [[OBJ1]], align 8
// CHECK-NEXT:    [[DOTDEP_ARR_ADDR1:%.*]] = call ptr @__kmpc_alloc(i32 [[TMP0]], i64 48, ptr null)
// CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[DOTDEP_ARR_ADDR1]], i32 0, i32 0
// CHECK-NEXT:    store i64 1, ptr [[TMP8]], align 8
// CHECK-NEXT:    [[TMP9:%.*]] = ptrtoint ptr [[QQQ]] to i64
// CHECK-NEXT:    [[TMP10:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], ptr [[DOTDEP_ARR_ADDR1]], i64 1
// CHECK-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP10]], i32 0, i32 0
// CHECK-NEXT:    store i64 [[TMP9]], ptr [[TMP11]], align 8
// CHECK-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP10]], i32 0, i32 1
// CHECK-NEXT:    store i64 4, ptr [[TMP12]], align 8
// CHECK-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP10]], i32 0, i32 2
// CHECK-NEXT:    store i8 3, ptr [[TMP13]], align 8
// CHECK-NEXT:    [[TMP14:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], ptr [[DOTDEP_ARR_ADDR1]], i64 1
// CHECK-NEXT:    store ptr [[TMP14]], ptr [[OBJ2]], align 8
// CHECK-NEXT:    [[TMP15:%.*]] = load i32, ptr @xxx, align 4
// CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP15]], 0
// CHECK-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_ELSE:%.*]]
// CHECK:       if.then:
// CHECK-NEXT:    [[TMP16:%.*]] = load ptr, ptr [[OBJ1]], align 8
// CHECK-NEXT:    [[TMP17:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP16]], i64 -1
// CHECK-NEXT:    [[TMP18:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP17]], i32 0, i32 0
// CHECK-NEXT:    [[TMP19:%.*]] = load i64, ptr [[TMP18]], align 8
// CHECK-NEXT:    [[TMP20:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP16]], i64 [[TMP19]]
// CHECK-NEXT:    br label [[OMP_BODY:%.*]]
// CHECK:       omp.body:
// CHECK-NEXT:    [[OMP_ELEMENTPAST:%.*]] = phi ptr [ [[TMP16]], [[IF_THEN]] ], [ [[OMP_ELEMENTNEXT:%.*]], [[OMP_BODY]] ]
// CHECK-NEXT:    [[TMP21:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[OMP_ELEMENTPAST]], i32 0, i32 2
// CHECK-NEXT:    store i8 3, ptr [[TMP21]], align 8
// CHECK-NEXT:    [[OMP_ELEMENTNEXT]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], ptr [[OMP_ELEMENTPAST]], i64 1
// CHECK-NEXT:    [[OMP_ISEMPTY:%.*]] = icmp eq ptr [[OMP_ELEMENTNEXT]], [[TMP20]]
// CHECK-NEXT:    br i1 [[OMP_ISEMPTY]], label [[OMP_DONE:%.*]], label [[OMP_BODY]]
// CHECK:       omp.done:
// CHECK-NEXT:    [[TMP22:%.*]] = load ptr, ptr [[OBJ2]], align 8
// CHECK-NEXT:    [[TMP23:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP22]], i64 -1
// CHECK-NEXT:    call void @__kmpc_free(i32 [[TMP0]], ptr [[TMP23]], ptr null)
// CHECK-NEXT:    br label [[IF_END:%.*]]
// CHECK:       if.else:
// CHECK-NEXT:    [[TMP24:%.*]] = load ptr, ptr [[OBJ2]], align 8
// CHECK-NEXT:    [[TMP25:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP24]], i64 -1
// CHECK-NEXT:    [[TMP26:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP25]], i32 0, i32 0
// CHECK-NEXT:    [[TMP27:%.*]] = load i64, ptr [[TMP26]], align 8
// CHECK-NEXT:    [[TMP28:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP24]], i64 [[TMP27]]
// CHECK-NEXT:    br label [[OMP_BODY2:%.*]]
// CHECK:       omp.body2:
// CHECK-NEXT:    [[OMP_ELEMENTPAST3:%.*]] = phi ptr [ [[TMP24]], [[IF_ELSE]] ], [ [[OMP_ELEMENTNEXT4:%.*]], [[OMP_BODY2]] ]
// CHECK-NEXT:    [[TMP29:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[OMP_ELEMENTPAST3]], i32 0, i32 2
// CHECK-NEXT:    store i8 4, ptr [[TMP29]], align 8
// CHECK-NEXT:    [[OMP_ELEMENTNEXT4]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], ptr [[OMP_ELEMENTPAST3]], i64 1
// CHECK-NEXT:    [[OMP_ISEMPTY5:%.*]] = icmp eq ptr [[OMP_ELEMENTNEXT4]], [[TMP28]]
// CHECK-NEXT:    br i1 [[OMP_ISEMPTY5]], label [[OMP_DONE6:%.*]], label [[OMP_BODY2]]
// CHECK:       omp.done6:
// CHECK-NEXT:    [[TMP30:%.*]] = load ptr, ptr [[OBJ1]], align 8
// CHECK-NEXT:    [[TMP31:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP30]], i64 -1
// CHECK-NEXT:    call void @__kmpc_free(i32 [[TMP0]], ptr [[TMP31]], ptr null)
// CHECK-NEXT:    br label [[IF_END]]
// CHECK:       if.end:
// CHECK-NEXT:    [[TMP32:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.PARALLEL"(), "QUAL.OMP.SHARED:TYPED"(ptr [[AAA]], i32 0, i32 1), "QUAL.OMP.SHARED:TYPED"(ptr [[BBB]], i32 0, i32 1), "QUAL.OMP.SHARED:TYPED"(ptr [[CCC]], i32 0, i32 1), "QUAL.OMP.SHARED:TYPED"(ptr [[DDD]], i32 0, i32 1), "QUAL.OMP.SHARED:TYPED"(ptr [[EEE]], i32 0, i32 1), "QUAL.OMP.SHARED:TYPED"(ptr [[OBJ1]], ptr null, i32 1), "QUAL.OMP.PRIVATE:TYPED"(ptr [[B]], ptr null, i32 1), "QUAL.OMP.PRIVATE:TYPED"(ptr [[C]], ptr null, i32 1), "QUAL.OMP.PRIVATE:TYPED"(ptr [[DEPOBJ_SIZE_ADDR]], i64 0, i32 1), "QUAL.OMP.PRIVATE:TYPED"(ptr [[SAVED_STACK]], ptr null, i32 1), "QUAL.OMP.PRIVATE:TYPED"(ptr [[__VLA_EXPR0]], i64 0, i32 1), "QUAL.OMP.PRIVATE:TYPED"(ptr [[DEP_COUNTER_ADDR]], i64 0, i32 1), "QUAL.OMP.PRIVATE:TYPED"(ptr [[DEPOBJ_SIZE_ADDR7]], i64 0, i32 1), "QUAL.OMP.PRIVATE:TYPED"(ptr [[SAVED_STACK8]], ptr null, i32 1), "QUAL.OMP.PRIVATE:TYPED"(ptr [[__VLA_EXPR1]], i64 0, i32 1), "QUAL.OMP.PRIVATE:TYPED"(ptr [[DEP_COUNTER_ADDR10]], i64 0, i32 1), "QUAL.OMP.PRIVATE:TYPED"(ptr [[DOTDEP_ARR_ADDR11]], [1 x %struct.kmp_depend_info] zeroinitializer, i32 1), "QUAL.OMP.PRIVATE:TYPED"(ptr [[DEP_COUNTER_ADDR17]], i64 0, i32 1), "QUAL.OMP.PRIVATE:TYPED"(ptr [[DEPOBJ_SIZE_ADDR18]], i64 0, i32 1), "QUAL.OMP.PRIVATE:TYPED"(ptr [[SAVED_STACK19]], ptr null, i32 1), "QUAL.OMP.PRIVATE:TYPED"(ptr [[__VLA_EXPR2]], i64 0, i32 1), "QUAL.OMP.PRIVATE:TYPED"(ptr [[DEP_COUNTER_ADDR21]], i64 0, i32 1) ]
// CHECK-NEXT:    [[TMP33:%.*]] = load ptr, ptr [[OBJ1]], align 8
// CHECK-NEXT:    [[TMP34:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP33]], i64 -1
// CHECK-NEXT:    [[TMP35:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP34]], i32 0, i32 0
// CHECK-NEXT:    [[TMP36:%.*]] = load i64, ptr [[TMP35]], align 8
// CHECK-NEXT:    store i64 0, ptr [[DEPOBJ_SIZE_ADDR]], align 8
// CHECK-NEXT:    [[TMP37:%.*]] = load i64, ptr [[DEPOBJ_SIZE_ADDR]], align 8
// CHECK-NEXT:    [[TMP38:%.*]] = add nuw i64 [[TMP37]], [[TMP36]]
// CHECK-NEXT:    store i64 [[TMP38]], ptr [[DEPOBJ_SIZE_ADDR]], align 8
// CHECK-NEXT:    [[TMP39:%.*]] = load i64, ptr [[DEPOBJ_SIZE_ADDR]], align 8
// CHECK-NEXT:    [[TMP40:%.*]] = add nuw i64 0, [[TMP39]]
// CHECK-NEXT:    [[TMP41:%.*]] = add nuw i64 [[TMP40]], 5
// CHECK-NEXT:    [[TMP42:%.*]] = call ptr @llvm.stacksave.p0()
// CHECK-NEXT:    store ptr [[TMP42]], ptr [[SAVED_STACK]], align 8
// CHECK-NEXT:    [[VLA:%.*]] = alloca [[STRUCT_KMP_DEPEND_INFO]], i64 [[TMP41]], align 16
// CHECK-NEXT:    store i64 [[TMP41]], ptr [[__VLA_EXPR0]], align 8
// CHECK-NEXT:    [[TMP43:%.*]] = trunc i64 [[TMP41]] to i32
// CHECK-NEXT:    [[TMP44:%.*]] = ptrtoint ptr [[AAA]] to i64
// CHECK-NEXT:    [[TMP45:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], ptr [[VLA]], i64 0
// CHECK-NEXT:    [[TMP46:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP45]], i32 0, i32 0
// CHECK-NEXT:    store i64 [[TMP44]], ptr [[TMP46]], align 16
// CHECK-NEXT:    [[TMP47:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP45]], i32 0, i32 1
// CHECK-NEXT:    store i64 4, ptr [[TMP47]], align 8
// CHECK-NEXT:    [[TMP48:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP45]], i32 0, i32 2
// CHECK-NEXT:    store i8 1, ptr [[TMP48]], align 16
// CHECK-NEXT:    [[TMP49:%.*]] = ptrtoint ptr [[BBB]] to i64
// CHECK-NEXT:    [[TMP50:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], ptr [[VLA]], i64 1
// CHECK-NEXT:    [[TMP51:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP50]], i32 0, i32 0
// CHECK-NEXT:    store i64 [[TMP49]], ptr [[TMP51]], align 8
// CHECK-NEXT:    [[TMP52:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP50]], i32 0, i32 1
// CHECK-NEXT:    store i64 4, ptr [[TMP52]], align 8
// CHECK-NEXT:    [[TMP53:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP50]], i32 0, i32 2
// CHECK-NEXT:    store i8 3, ptr [[TMP53]], align 8
// CHECK-NEXT:    [[TMP54:%.*]] = ptrtoint ptr [[CCC]] to i64
// CHECK-NEXT:    [[TMP55:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], ptr [[VLA]], i64 2
// CHECK-NEXT:    [[TMP56:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP55]], i32 0, i32 0
// CHECK-NEXT:    store i64 [[TMP54]], ptr [[TMP56]], align 16
// CHECK-NEXT:    [[TMP57:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP55]], i32 0, i32 1
// CHECK-NEXT:    store i64 4, ptr [[TMP57]], align 8
// CHECK-NEXT:    [[TMP58:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP55]], i32 0, i32 2
// CHECK-NEXT:    store i8 3, ptr [[TMP58]], align 16
// CHECK-NEXT:    [[TMP59:%.*]] = ptrtoint ptr [[DDD]] to i64
// CHECK-NEXT:    [[TMP60:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], ptr [[VLA]], i64 3
// CHECK-NEXT:    [[TMP61:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP60]], i32 0, i32 0
// CHECK-NEXT:    store i64 [[TMP59]], ptr [[TMP61]], align 8
// CHECK-NEXT:    [[TMP62:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP60]], i32 0, i32 1
// CHECK-NEXT:    store i64 4, ptr [[TMP62]], align 8
// CHECK-NEXT:    [[TMP63:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP60]], i32 0, i32 2
// CHECK-NEXT:    store i8 4, ptr [[TMP63]], align 8
// CHECK-NEXT:    [[TMP64:%.*]] = ptrtoint ptr [[EEE]] to i64
// CHECK-NEXT:    [[TMP65:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], ptr [[VLA]], i64 4
// CHECK-NEXT:    [[TMP66:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP65]], i32 0, i32 0
// CHECK-NEXT:    store i64 [[TMP64]], ptr [[TMP66]], align 16
// CHECK-NEXT:    [[TMP67:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP65]], i32 0, i32 1
// CHECK-NEXT:    store i64 4, ptr [[TMP67]], align 8
// CHECK-NEXT:    [[TMP68:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP65]], i32 0, i32 2
// CHECK-NEXT:    store i8 8, ptr [[TMP68]], align 16
// CHECK-NEXT:    store i64 5, ptr [[DEP_COUNTER_ADDR]], align 8
// CHECK-NEXT:    [[TMP69:%.*]] = load ptr, ptr [[OBJ1]], align 8
// CHECK-NEXT:    [[TMP70:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP69]], i64 -1
// CHECK-NEXT:    [[TMP71:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP70]], i32 0, i32 0
// CHECK-NEXT:    [[TMP72:%.*]] = load i64, ptr [[TMP71]], align 8
// CHECK-NEXT:    [[TMP73:%.*]] = mul nuw i64 24, [[TMP72]]
// CHECK-NEXT:    [[TMP74:%.*]] = load i64, ptr [[DEP_COUNTER_ADDR]], align 8
// CHECK-NEXT:    [[TMP75:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], ptr [[VLA]], i64 [[TMP74]]
// CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 8 [[TMP75]], ptr align 8 [[TMP69]], i64 [[TMP73]], i1 false)
// CHECK-NEXT:    [[TMP76:%.*]] = add nuw i64 [[TMP74]], [[TMP72]]
// CHECK-NEXT:    store i64 [[TMP76]], ptr [[DEP_COUNTER_ADDR]], align 8
// CHECK-NEXT:    [[TMP77:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASK"(), "QUAL.OMP.DEPARRAY"(i32 [[TMP43]], ptr [[VLA]]) ]
// CHECK-NEXT:    call void @_Z11doSomethingv() #[[ATTR1:[0-9]+]]
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP77]]) [ "DIR.OMP.END.TASK"() ]
// CHECK-NEXT:    [[TMP78:%.*]] = load ptr, ptr [[SAVED_STACK]], align 8
// CHECK-NEXT:    call void @llvm.stackrestore.p0(ptr [[TMP78]])
// CHECK-NEXT:    [[TMP79:%.*]] = load ptr, ptr [[OBJ1]], align 8
// CHECK-NEXT:    [[TMP80:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP79]], i64 -1
// CHECK-NEXT:    [[TMP81:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP80]], i32 0, i32 0
// CHECK-NEXT:    [[TMP82:%.*]] = load i64, ptr [[TMP81]], align 8
// CHECK-NEXT:    store i64 0, ptr [[DEPOBJ_SIZE_ADDR7]], align 8
// CHECK-NEXT:    [[TMP83:%.*]] = load i64, ptr [[DEPOBJ_SIZE_ADDR7]], align 8
// CHECK-NEXT:    [[TMP84:%.*]] = add nuw i64 [[TMP83]], [[TMP82]]
// CHECK-NEXT:    store i64 [[TMP84]], ptr [[DEPOBJ_SIZE_ADDR7]], align 8
// CHECK-NEXT:    [[TMP85:%.*]] = load i64, ptr [[DEPOBJ_SIZE_ADDR7]], align 8
// CHECK-NEXT:    [[TMP86:%.*]] = add nuw i64 0, [[TMP85]]
// CHECK-NEXT:    [[TMP87:%.*]] = add nuw i64 [[TMP86]], 0
// CHECK-NEXT:    [[TMP88:%.*]] = call ptr @llvm.stacksave.p0()
// CHECK-NEXT:    store ptr [[TMP88]], ptr [[SAVED_STACK8]], align 8
// CHECK-NEXT:    [[VLA9:%.*]] = alloca [[STRUCT_KMP_DEPEND_INFO]], i64 [[TMP87]], align 16
// CHECK-NEXT:    store i64 [[TMP87]], ptr [[__VLA_EXPR1]], align 8
// CHECK-NEXT:    [[TMP89:%.*]] = trunc i64 [[TMP87]] to i32
// CHECK-NEXT:    store i64 0, ptr [[DEP_COUNTER_ADDR10]], align 8
// CHECK-NEXT:    [[TMP90:%.*]] = load ptr, ptr [[OBJ1]], align 8
// CHECK-NEXT:    [[TMP91:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP90]], i64 -1
// CHECK-NEXT:    [[TMP92:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP91]], i32 0, i32 0
// CHECK-NEXT:    [[TMP93:%.*]] = load i64, ptr [[TMP92]], align 8
// CHECK-NEXT:    [[TMP94:%.*]] = mul nuw i64 24, [[TMP93]]
// CHECK-NEXT:    [[TMP95:%.*]] = load i64, ptr [[DEP_COUNTER_ADDR10]], align 8
// CHECK-NEXT:    [[TMP96:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], ptr [[VLA9]], i64 [[TMP95]]
// CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 8 [[TMP96]], ptr align 8 [[TMP90]], i64 [[TMP94]], i1 false)
// CHECK-NEXT:    [[TMP97:%.*]] = add nuw i64 [[TMP95]], [[TMP93]]
// CHECK-NEXT:    store i64 [[TMP97]], ptr [[DEP_COUNTER_ADDR10]], align 8
// CHECK-NEXT:    [[TMP98:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASK"(), "QUAL.OMP.DEPARRAY"(i32 [[TMP89]], ptr [[VLA9]]) ]
// CHECK-NEXT:    call void @_Z11doSomethingv() #[[ATTR1]]
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP98]]) [ "DIR.OMP.END.TASK"() ]
// CHECK-NEXT:    [[TMP99:%.*]] = load ptr, ptr [[SAVED_STACK8]], align 8
// CHECK-NEXT:    call void @llvm.stackrestore.p0(ptr [[TMP99]])
// CHECK-NEXT:    store ptr [[B]], ptr [[C]], align 8
// CHECK-NEXT:    [[TMP100:%.*]] = getelementptr inbounds [1 x %struct.kmp_depend_info], ptr [[DOTDEP_ARR_ADDR11]], i64 0, i64 0
// CHECK-NEXT:    [[TMP101:%.*]] = load ptr, ptr [[C]], align 8
// CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds ptr, ptr [[TMP101]], i64 1000
// CHECK-NEXT:    [[TMP102:%.*]] = load ptr, ptr [[ARRAYIDX]], align 8
// CHECK-NEXT:    [[ARRAYIDX12:%.*]] = getelementptr inbounds ptr, ptr [[TMP102]], i64 100
// CHECK-NEXT:    [[TMP103:%.*]] = load ptr, ptr [[ARRAYIDX12]], align 8
// CHECK-NEXT:    [[ARRAYIDX13:%.*]] = getelementptr inbounds i16, ptr [[TMP103]], i64 10
// CHECK-NEXT:    [[TMP104:%.*]] = load ptr, ptr [[C]], align 8
// CHECK-NEXT:    [[ARRAYIDX14:%.*]] = getelementptr inbounds ptr, ptr [[TMP104]], i64 1003
// CHECK-NEXT:    [[TMP105:%.*]] = load ptr, ptr [[ARRAYIDX14]], align 8
// CHECK-NEXT:    [[ARRAYIDX15:%.*]] = getelementptr inbounds ptr, ptr [[TMP105]], i64 102
// CHECK-NEXT:    [[TMP106:%.*]] = load ptr, ptr [[ARRAYIDX15]], align 8
// CHECK-NEXT:    [[ARRAYIDX16:%.*]] = getelementptr inbounds i16, ptr [[TMP106]], i64 11
// CHECK-NEXT:    [[TMP107:%.*]] = getelementptr i16, ptr [[ARRAYIDX16]], i32 1
// CHECK-NEXT:    [[TMP108:%.*]] = ptrtoint ptr [[ARRAYIDX13]] to i64
// CHECK-NEXT:    [[TMP109:%.*]] = ptrtoint ptr [[TMP107]] to i64
// CHECK-NEXT:    [[TMP110:%.*]] = sub nuw i64 [[TMP109]], [[TMP108]]
// CHECK-NEXT:    [[TMP111:%.*]] = ptrtoint ptr [[ARRAYIDX13]] to i64
// CHECK-NEXT:    [[TMP112:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP100]], i64 0
// CHECK-NEXT:    [[TMP113:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP112]], i32 0, i32 0
// CHECK-NEXT:    store i64 [[TMP111]], ptr [[TMP113]], align 8
// CHECK-NEXT:    [[TMP114:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP112]], i32 0, i32 1
// CHECK-NEXT:    store i64 [[TMP110]], ptr [[TMP114]], align 8
// CHECK-NEXT:    [[TMP115:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP112]], i32 0, i32 2
// CHECK-NEXT:    store i8 1, ptr [[TMP115]], align 8
// CHECK-NEXT:    store i64 1, ptr [[DEP_COUNTER_ADDR17]], align 8
// CHECK-NEXT:    [[TMP116:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASK"(), "QUAL.OMP.DEPARRAY"(i32 1, ptr [[TMP100]]) ]
// CHECK-NEXT:    call void @_Z11doSomethingv() #[[ATTR1]]
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP116]]) [ "DIR.OMP.END.TASK"() ]

// CHECK-NEXT: [[TMP117:%.*]] = load ptr, ptr %obj1, align 8
// CHECK-NEXT: [[TMP118:%.*]] = getelementptr %struct.kmp_depend_info, ptr [[TMP117]], i64 -1
// CHECK-NEXT: [[TMP119:%.*]] = getelementptr inbounds %struct.kmp_depend_info, ptr [[TMP118]], i32 0, i32 0
// CHECK-NEXT: [[TMP120:%.*]] = load i64, ptr [[TMP119]], align 8
// CHECK-NEXT: store i64 0, ptr [[DEPOBJ_SIZE_ADDR18]], align 8
// CHECK-NEXT: [[TMP121:%.*]] = load i64, ptr [[DEPOBJ_SIZE_ADDR18]], align 8
// CHECK-NEXT: [[TMP122:%.*]] = add nuw i64 [[TMP121]], [[TMP120]]
// CHECK-NEXT: store i64 [[TMP122]], ptr [[DEPOBJ_SIZE_ADDR18]], align 8
// CHECK-NEXT: [[TMP123:%.*]] = load i64, ptr [[DEPOBJ_SIZE_ADDR18]], align 8
// CHECK-NEXT: [[TMP124:%.*]] = add nuw i64 0, [[TMP123]]
// CHECK-NEXT: [[TMP125:%.*]] = add nuw i64 [[TMP124]], 0
// CHECK-NEXT: [[TMP126:%.*]] = call ptr @llvm.stacksave.p0()
// CHECK-NEXT: store ptr [[TMP126]], ptr [[SAVED_STACK19]], align 8
// CHECK-NEXT: [[VLA20:%vla.*]] = alloca %struct.kmp_depend_info, i64 [[TMP125]], align 16
// CHECK-NEXT: store i64 [[TMP125]], ptr [[__VLA_EXPR2]], align 8
// CHECK-NEXT: [[TMP127:%.*]] = trunc i64 [[TMP125]] to i32
// CHECK-NEXT: store i64 0, ptr [[DEP_COUNTER_ADDR21]], align 8
// CHECK-NEXT: [[TMP128:%.*]] = load ptr, ptr [[OBJ1]], align 8
// CHECK-NEXT: [[TMP129:%.*]] = getelementptr %struct.kmp_depend_info, ptr [[TMP128]], i64 -1
// CHECK-NEXT: [[TMP130:%.*]] = getelementptr inbounds %struct.kmp_depend_info, ptr [[TMP129]], i32 0, i32 0
// CHECK-NEXT: [[TMP131:%.*]] = load i64, ptr [[TMP130]], align 8
// CHECK-NEXT: [[TMP132:%.*]] = mul nuw i64 24, [[TMP131]]
// CHECK-NEXT: [[TMP133:%.*]] = load i64, ptr [[DEP_COUNTER_ADDR21]], align 8
// CHECK-NEXT: [[TMP134:%.*]] = getelementptr %struct.kmp_depend_info, ptr [[VLA20]], i64 [[TMP133]]
// CHECK-NEXT: call void @llvm.memcpy.p0.p0.i64(ptr align 8 [[TMP134]], ptr align 8 [[TMP128]], i64 [[TMP132]], i1 false)
// CHECK-NEXT: [[TMP135:%.*]] = add nuw i64 [[TMP133]], [[TMP131]]
// CHECK-NEXT: store i64 [[TMP135]], ptr [[DEP_COUNTER_ADDR21]], align 8
// CHECK-NEXT:    [[TMP136:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASKWAIT"(), "QUAL.OMP.DEPARRAY"(i32 [[TMP127]], ptr [[VLA20]]) ]
// CHECK-NEXT: fence acq_rel
// CHECK-NEXT: call void @llvm.directive.region.exit(token [[TMP136]]) [ "DIR.OMP.END.TASKWAIT"() ]
// CHECK-NEXT: [[TMP137:%.*]] = load ptr, ptr [[SAVED_STACK19]], align 8
// CHECK-NEXT: call void @llvm.stackrestore.p0(ptr [[TMP137]])
// CHECK-NEXT: call void @llvm.directive.region.exit(token [[TMP32]]) [ "DIR.OMP.END.PARALLEL"() ]
// CHECK-NEXT: [[TMP138:%.*]] = load ptr, ptr [[OBJ2]], align 8
// CHECK-NEXT: [[TMP139:%.*]] = getelementptr %struct.kmp_depend_info, ptr [[TMP138]], i64 -1
// CHECK-NEXT: [[TMP140:%.*]] = getelementptr inbounds %struct.kmp_depend_info, ptr [[TMP139]], i32 0, i32 0
// CHECK-NEXT: [[TMP141:%.*]] = load i64, ptr [[TMP140]], align 8
// CHECK-NEXT: store i64 0, ptr [[DEPOBJ_SIZE_ADDR22]], align 8
// CHECK-NEXT: [[TMP142:%.*]] = load i64, ptr [[DEPOBJ_SIZE_ADDR22]], align 8
// CHECK-NEXT: [[TMP143:%.*]] = add nuw i64 [[TMP142]], [[TMP141]]
// CHECK-NEXT: store i64 [[TMP143]], ptr [[DEPOBJ_SIZE_ADDR22]], align 8
// CHECK-NEXT: [[TMP144:%.*]] = load i64, ptr [[DEPOBJ_SIZE_ADDR22]], align 8
// CHECK-NEXT: [[TMP145:%.*]] = add nuw i64 0, [[TMP144]]
// CHECK-NEXT: [[TMP146:%.*]] = add nuw i64 [[TMP145]], 0
// CHECK-NEXT: [[TMP147:%.*]] = call ptr @llvm.stacksave.p0()
// CHECK-NEXT: store ptr [[TMP147]], ptr [[SAVED_STACK23]], align 8
// CHECK-NEXT: [[VLA24:%vla.*]] = alloca %struct.kmp_depend_info, i64 [[TMP146]], align 16
// CHECK-NEXT: store i64 [[TMP146]], ptr [[__VLA_EXPR3]], align 8
// CHECK-NEXT: [[TMP148:%.*]] = trunc i64 [[TMP146]] to i32
// CHECK-NEXT: store i64 0, ptr [[DEP_COUNTER_ADDR25]], align 8
// CHECK-NEXT: [[TMP149:%.*]] = load ptr, ptr [[OBJ2]], align 8
// CHECK-NEXT: [[TMP150:%.*]] = getelementptr %struct.kmp_depend_info, ptr [[TMP149]], i64 -1
// CHECK-NEXT: [[TMP151:%.*]] = getelementptr inbounds %struct.kmp_depend_info, ptr [[TMP150]], i32 0, i32 0
// CHECK-NEXT: [[TMP152:%.*]] = load i64, ptr [[TMP151]], align 8
// CHECK-NEXT: [[TMP153:%.*]] = mul nuw i64 24, [[TMP152]]
// CHECK-NEXT: [[TMP154:%.*]] = load i64, ptr [[DEP_COUNTER_ADDR25]], align 8
// CHECK-NEXT: [[TMP155:%.*]] = getelementptr %struct.kmp_depend_info, ptr [[VLA24]], i64 [[TMP154]]
// CHECK-NEXT: call void @llvm.memcpy.p0.p0.i64(ptr align 8 [[TMP155]], ptr align 8 [[TMP149]], i64 [[TMP153]], i1 false)
// CHECK-NEXT: [[TMP156:%.*]] = add nuw i64 [[TMP154]], [[TMP152]]
// CHECK-NEXT: store i64 [[TMP156]], ptr [[DEP_COUNTER_ADDR25]], align 8
// CHECK-NEXT: [[TMP157:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASKWAIT"(), "QUAL.OMP.NOWAIT"(), "QUAL.OMP.DEPARRAY"(i32 [[TMP148]], ptr [[VLA24]]) ]
// CHECK-NEXT: fence acq_rel
// CHECK-NEXT: call void @llvm.directive.region.exit(token [[TMP157]]) [ "DIR.OMP.END.TASKWAIT"() ]
// CHECK-NEXT: [[TMP158:%.*]] = load ptr, ptr [[SAVED_STACK23]], align 8
// CHECK-NEXT: call void @llvm.stackrestore.p0(ptr [[TMP158]])
// CHECK-NEXT: ret void
// end INTEL_COLLAB
