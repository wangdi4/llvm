// INTEL_COLLAB
//
// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --include-generated-funcs --prefix-filecheck-ir-name _
// RUN: %clang_cc1 -emit-llvm -o - -fopenmp -fopenmp-late-outline \
// RUN:  -fopenmp-new-depend-ir -triple x86_64-unknown-linux-gnu %s \
// RUN:  | FileCheck %s
// RUN: %clang_cc1 -emit-llvm -o - -fopenmp -fopenmp-late-outline \
// RUN:  -fopenmp-new-depend-ir -triple x86_64-unknown-linux-gnu %s \
// RUN:  -emit-pch -o %t
// RUN: %clang_cc1 -emit-llvm -o - -fopenmp -fopenmp-late-outline \
// RUN:  -fopenmp-new-depend-ir -triple x86_64-unknown-linux-gnu %s \
// RUN:  -include-pch %t | FileCheck %s

// Verify new IR generation for depend clause and depobj directive.
#ifndef HEADER
#define HEADER

typedef void *omp_depend_t;
void doSomething();
int xxx=0;

void foo1() {
  int aaa,bbb,ccc,ddd,ppp,qqq;
  omp_depend_t obj1;
  omp_depend_t obj2;

  // depobj directive
  #pragma omp depobj(obj1) depend(in:ppp)
  #pragma omp depobj(obj2) depend(out:qqq)
  if (xxx==0) {
    #pragma omp depobj(obj1) update(inout)
    #pragma omp depobj(obj2) destroy
  } else {
    #pragma omp depobj(obj2) update(mutexinoutset)
    #pragma omp depobj(obj1) destroy
  }

  // depobj dependency type.
  // FIXME: inoutset and omp_all_memory not yet supported.
  #pragma omp task \
        depend(depobj:obj1) depend(in:aaa) depend(out:bbb) \
        depend(inout:ccc) depend(mutexinoutset:ddd)
  {
    doSomething();
  }

  // depend using an array slice.
  {
    short **b, ***c;
    c = &b;

    #pragma omp task depend(in:c[1000:4][100:3][10:2])
    {
      doSomething();
    }
  }
}
#endif // HEADER
// CHECK-LABEL: @_Z4foo1v(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[AAA:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[BBB:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[CCC:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[DDD:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[PPP:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[QQQ:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[OBJ1:%.*]] = alloca i8*, align 8
// CHECK-NEXT:    [[OBJ2:%.*]] = alloca i8*, align 8
// CHECK-NEXT:    [[DEPOBJ_SIZE_ADDR:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[SAVED_STACK:%.*]] = alloca i8*, align 8
// CHECK-NEXT:    [[__VLA_EXPR0:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[DEP_COUNTER_ADDR:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[B:%.*]] = alloca i16**, align 8
// CHECK-NEXT:    [[C:%.*]] = alloca i16***, align 8
// CHECK-NEXT:    [[DOTDEP_ARR_ADDR7:%.*]] = alloca [1 x %struct.kmp_depend_info], align 8
// CHECK-NEXT:    [[DEP_COUNTER_ADDR13:%.*]] = alloca i64, align 8
// CHECK-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(%struct.ident_t* @[[GLOB1:[0-9]+]])
// CHECK-NEXT:    [[DOTDEP_ARR_ADDR:%.*]] = call i8* @__kmpc_alloc(i32 [[TMP0]], i64 48, i8* null)
// CHECK-NEXT:    [[TMP1:%.*]] = bitcast i8* [[DOTDEP_ARR_ADDR]] to %struct.kmp_depend_info*
// CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO:%.*]], %struct.kmp_depend_info* [[TMP1]], i32 0, i32 0
// CHECK-NEXT:    store i64 1, i64* [[TMP2]], align 8
// CHECK-NEXT:    [[TMP3:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP1]], i64 1
// CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP3]], i32 0, i32 0
// CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint i32* [[PPP]] to i64
// CHECK-NEXT:    store i64 [[TMP5]], i64* [[TMP4]], align 8
// CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP3]], i32 0, i32 1
// CHECK-NEXT:    store i64 4, i64* [[TMP6]], align 8
// CHECK-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP3]], i32 0, i32 2
// CHECK-NEXT:    store i8 1, i8* [[TMP7]], align 8
// CHECK-NEXT:    [[TMP8:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP1]], i64 1
// CHECK-NEXT:    [[TMP9:%.*]] = bitcast %struct.kmp_depend_info* [[TMP8]] to i8*
// CHECK-NEXT:    store i8* [[TMP9]], i8** [[OBJ1]], align 8
// CHECK-NEXT:    [[DOTDEP_ARR_ADDR1:%.*]] = call i8* @__kmpc_alloc(i32 [[TMP0]], i64 48, i8* null)
// CHECK-NEXT:    [[TMP10:%.*]] = bitcast i8* [[DOTDEP_ARR_ADDR1]] to %struct.kmp_depend_info*
// CHECK-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP10]], i32 0, i32 0
// CHECK-NEXT:    store i64 1, i64* [[TMP11]], align 8
// CHECK-NEXT:    [[TMP12:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP10]], i64 1
// CHECK-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP12]], i32 0, i32 0
// CHECK-NEXT:    [[TMP14:%.*]] = ptrtoint i32* [[QQQ]] to i64
// CHECK-NEXT:    store i64 [[TMP14]], i64* [[TMP13]], align 8
// CHECK-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP12]], i32 0, i32 1
// CHECK-NEXT:    store i64 4, i64* [[TMP15]], align 8
// CHECK-NEXT:    [[TMP16:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP12]], i32 0, i32 2
// CHECK-NEXT:    store i8 3, i8* [[TMP16]], align 8
// CHECK-NEXT:    [[TMP17:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP10]], i64 1
// CHECK-NEXT:    [[TMP18:%.*]] = bitcast %struct.kmp_depend_info* [[TMP17]] to i8*
// CHECK-NEXT:    store i8* [[TMP18]], i8** [[OBJ2]], align 8
// CHECK-NEXT:    [[TMP19:%.*]] = load i32, i32* @xxx, align 4
// CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP19]], 0
// CHECK-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_ELSE:%.*]]
// CHECK:       if.then:
// CHECK-NEXT:    [[TMP20:%.*]] = load i8*, i8** [[OBJ1]], align 8
// CHECK-NEXT:    [[TMP21:%.*]] = bitcast i8* [[TMP20]] to %struct.kmp_depend_info*
// CHECK-NEXT:    [[TMP22:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP21]], i64 -1
// CHECK-NEXT:    [[TMP23:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP22]], i32 0, i32 0
// CHECK-NEXT:    [[TMP24:%.*]] = load i64, i64* [[TMP23]], align 8
// CHECK-NEXT:    [[TMP25:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP21]], i64 [[TMP24]]
// CHECK-NEXT:    br label [[OMP_BODY:%.*]]
// CHECK:       omp.body:
// CHECK-NEXT:    [[OMP_ELEMENTPAST:%.*]] = phi %struct.kmp_depend_info* [ [[TMP21]], [[IF_THEN]] ], [ [[OMP_ELEMENTNEXT:%.*]], [[OMP_BODY]] ]
// CHECK-NEXT:    [[TMP26:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[OMP_ELEMENTPAST]], i32 0, i32 2
// CHECK-NEXT:    store i8 3, i8* [[TMP26]], align 8
// CHECK-NEXT:    [[OMP_ELEMENTNEXT]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[OMP_ELEMENTPAST]], i64 1
// CHECK-NEXT:    [[OMP_ISEMPTY:%.*]] = icmp eq %struct.kmp_depend_info* [[OMP_ELEMENTNEXT]], [[TMP25]]
// CHECK-NEXT:    br i1 [[OMP_ISEMPTY]], label [[OMP_DONE:%.*]], label [[OMP_BODY]]
// CHECK:       omp.done:
// CHECK-NEXT:    [[TMP27:%.*]] = load i8*, i8** [[OBJ2]], align 8
// CHECK-NEXT:    [[TMP28:%.*]] = bitcast i8* [[TMP27]] to %struct.kmp_depend_info*
// CHECK-NEXT:    [[TMP29:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP28]], i64 -1
// CHECK-NEXT:    [[TMP30:%.*]] = bitcast %struct.kmp_depend_info* [[TMP29]] to i8*
// CHECK-NEXT:    call void @__kmpc_free(i32 [[TMP0]], i8* [[TMP30]], i8* null)
// CHECK-NEXT:    br label [[IF_END:%.*]]
// CHECK:       if.else:
// CHECK-NEXT:    [[TMP31:%.*]] = load i8*, i8** [[OBJ2]], align 8
// CHECK-NEXT:    [[TMP32:%.*]] = bitcast i8* [[TMP31]] to %struct.kmp_depend_info*
// CHECK-NEXT:    [[TMP33:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP32]], i64 -1
// CHECK-NEXT:    [[TMP34:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP33]], i32 0, i32 0
// CHECK-NEXT:    [[TMP35:%.*]] = load i64, i64* [[TMP34]], align 8
// CHECK-NEXT:    [[TMP36:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP32]], i64 [[TMP35]]
// CHECK-NEXT:    br label [[OMP_BODY2:%.*]]
// CHECK:       omp.body2:
// CHECK-NEXT:    [[OMP_ELEMENTPAST3:%.*]] = phi %struct.kmp_depend_info* [ [[TMP32]], [[IF_ELSE]] ], [ [[OMP_ELEMENTNEXT4:%.*]], [[OMP_BODY2]] ]
// CHECK-NEXT:    [[TMP37:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[OMP_ELEMENTPAST3]], i32 0, i32 2
// CHECK-NEXT:    store i8 4, i8* [[TMP37]], align 8
// CHECK-NEXT:    [[OMP_ELEMENTNEXT4]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[OMP_ELEMENTPAST3]], i64 1
// CHECK-NEXT:    [[OMP_ISEMPTY5:%.*]] = icmp eq %struct.kmp_depend_info* [[OMP_ELEMENTNEXT4]], [[TMP36]]
// CHECK-NEXT:    br i1 [[OMP_ISEMPTY5]], label [[OMP_DONE6:%.*]], label [[OMP_BODY2]]
// CHECK:       omp.done6:
// CHECK-NEXT:    [[TMP38:%.*]] = load i8*, i8** [[OBJ1]], align 8
// CHECK-NEXT:    [[TMP39:%.*]] = bitcast i8* [[TMP38]] to %struct.kmp_depend_info*
// CHECK-NEXT:    [[TMP40:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP39]], i64 -1
// CHECK-NEXT:    [[TMP41:%.*]] = bitcast %struct.kmp_depend_info* [[TMP40]] to i8*
// CHECK-NEXT:    call void @__kmpc_free(i32 [[TMP0]], i8* [[TMP41]], i8* null)
// CHECK-NEXT:    br label [[IF_END]]
// CHECK:       if.end:
// CHECK-NEXT:    [[TMP42:%.*]] = load i8*, i8** [[OBJ1]], align 8
// CHECK-NEXT:    [[TMP43:%.*]] = bitcast i8* [[TMP42]] to %struct.kmp_depend_info*
// CHECK-NEXT:    [[TMP44:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP43]], i64 -1
// CHECK-NEXT:    [[TMP45:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP44]], i32 0, i32 0
// CHECK-NEXT:    [[TMP46:%.*]] = load i64, i64* [[TMP45]], align 8
// CHECK-NEXT:    store i64 0, i64* [[DEPOBJ_SIZE_ADDR]], align 8
// CHECK-NEXT:    [[TMP47:%.*]] = load i64, i64* [[DEPOBJ_SIZE_ADDR]], align 8
// CHECK-NEXT:    [[TMP48:%.*]] = add nuw i64 [[TMP47]], [[TMP46]]
// CHECK-NEXT:    store i64 [[TMP48]], i64* [[DEPOBJ_SIZE_ADDR]], align 8
// CHECK-NEXT:    [[TMP49:%.*]] = load i64, i64* [[DEPOBJ_SIZE_ADDR]], align 8
// CHECK-NEXT:    [[TMP50:%.*]] = add nuw i64 0, [[TMP49]]
// CHECK-NEXT:    [[TMP51:%.*]] = add nuw i64 [[TMP50]], 4
// CHECK-NEXT:    [[TMP52:%.*]] = call i8* @llvm.stacksave()
// CHECK-NEXT:    store i8* [[TMP52]], i8** [[SAVED_STACK]], align 8
// CHECK-NEXT:    [[VLA:%.*]] = alloca [[STRUCT_KMP_DEPEND_INFO]], i64 [[TMP51]], align 16
// CHECK-NEXT:    store i64 [[TMP51]], i64* [[__VLA_EXPR0]], align 8
// CHECK-NEXT:    [[TMP53:%.*]] = trunc i64 [[TMP51]] to i32
// CHECK-NEXT:    [[TMP54:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[VLA]], i64 0
// CHECK-NEXT:    [[TMP55:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP54]], i32 0, i32 0
// CHECK-NEXT:    [[TMP56:%.*]] = ptrtoint i32* [[AAA]] to i64
// CHECK-NEXT:    store i64 [[TMP56]], i64* [[TMP55]], align 16
// CHECK-NEXT:    [[TMP57:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP54]], i32 0, i32 1
// CHECK-NEXT:    store i64 4, i64* [[TMP57]], align 8
// CHECK-NEXT:    [[TMP58:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP54]], i32 0, i32 2
// CHECK-NEXT:    store i8 1, i8* [[TMP58]], align 16
// CHECK-NEXT:    [[TMP59:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[VLA]], i64 1
// CHECK-NEXT:    [[TMP60:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP59]], i32 0, i32 0
// CHECK-NEXT:    [[TMP61:%.*]] = ptrtoint i32* [[BBB]] to i64
// CHECK-NEXT:    store i64 [[TMP61]], i64* [[TMP60]], align 8
// CHECK-NEXT:    [[TMP62:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP59]], i32 0, i32 1
// CHECK-NEXT:    store i64 4, i64* [[TMP62]], align 8
// CHECK-NEXT:    [[TMP63:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP59]], i32 0, i32 2
// CHECK-NEXT:    store i8 3, i8* [[TMP63]], align 8
// CHECK-NEXT:    [[TMP64:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[VLA]], i64 2
// CHECK-NEXT:    [[TMP65:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP64]], i32 0, i32 0
// CHECK-NEXT:    [[TMP66:%.*]] = ptrtoint i32* [[CCC]] to i64
// CHECK-NEXT:    store i64 [[TMP66]], i64* [[TMP65]], align 16
// CHECK-NEXT:    [[TMP67:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP64]], i32 0, i32 1
// CHECK-NEXT:    store i64 4, i64* [[TMP67]], align 8
// CHECK-NEXT:    [[TMP68:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP64]], i32 0, i32 2
// CHECK-NEXT:    store i8 3, i8* [[TMP68]], align 16
// CHECK-NEXT:    [[TMP69:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[VLA]], i64 3
// CHECK-NEXT:    [[TMP70:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP69]], i32 0, i32 0
// CHECK-NEXT:    [[TMP71:%.*]] = ptrtoint i32* [[DDD]] to i64
// CHECK-NEXT:    store i64 [[TMP71]], i64* [[TMP70]], align 8
// CHECK-NEXT:    [[TMP72:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP69]], i32 0, i32 1
// CHECK-NEXT:    store i64 4, i64* [[TMP72]], align 8
// CHECK-NEXT:    [[TMP73:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP69]], i32 0, i32 2
// CHECK-NEXT:    store i8 4, i8* [[TMP73]], align 8
// CHECK-NEXT:    store i64 4, i64* [[DEP_COUNTER_ADDR]], align 8
// CHECK-NEXT:    [[TMP74:%.*]] = load i8*, i8** [[OBJ1]], align 8
// CHECK-NEXT:    [[TMP75:%.*]] = bitcast i8* [[TMP74]] to %struct.kmp_depend_info*
// CHECK-NEXT:    [[TMP76:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP75]], i64 -1
// CHECK-NEXT:    [[TMP77:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP76]], i32 0, i32 0
// CHECK-NEXT:    [[TMP78:%.*]] = load i64, i64* [[TMP77]], align 8
// CHECK-NEXT:    [[TMP79:%.*]] = mul nuw i64 24, [[TMP78]]
// CHECK-NEXT:    [[TMP80:%.*]] = load i64, i64* [[DEP_COUNTER_ADDR]], align 8
// CHECK-NEXT:    [[TMP81:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[VLA]], i64 [[TMP80]]
// CHECK-NEXT:    [[TMP82:%.*]] = bitcast %struct.kmp_depend_info* [[TMP81]] to i8*
// CHECK-NEXT:    [[TMP83:%.*]] = bitcast %struct.kmp_depend_info* [[TMP75]] to i8*
// CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 [[TMP82]], i8* align 8 [[TMP83]], i64 [[TMP79]], i1 false)
// CHECK-NEXT:    [[TMP84:%.*]] = add nuw i64 [[TMP80]], [[TMP78]]
// CHECK-NEXT:    store i64 [[TMP84]], i64* [[DEP_COUNTER_ADDR]], align 8
// CHECK-NEXT:    [[TMP85:%.*]] = bitcast %struct.kmp_depend_info* [[VLA]] to i8*
// CHECK-NEXT:    [[TMP86:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASK"(), "QUAL.OMP.DEPARRAY"(i32 [[TMP53]], i8* [[TMP85]]) ]
// CHECK-NEXT:    call void @_Z11doSomethingv() #[[ATTR1:[0-9]+]]
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP86]]) [ "DIR.OMP.END.TASK"() ]
// CHECK-NEXT:    [[TMP87:%.*]] = load i8*, i8** [[SAVED_STACK]], align 8
// CHECK-NEXT:    call void @llvm.stackrestore(i8* [[TMP87]])
// CHECK-NEXT:    store i16*** [[B]], i16**** [[C]], align 8
// CHECK-NEXT:    [[TMP88:%.*]] = getelementptr inbounds [1 x %struct.kmp_depend_info], [1 x %struct.kmp_depend_info]* [[DOTDEP_ARR_ADDR7]], i64 0, i64 0
// CHECK-NEXT:    [[TMP89:%.*]] = load i16***, i16**** [[C]], align 8
// CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i16**, i16*** [[TMP89]], i64 1000
// CHECK-NEXT:    [[TMP90:%.*]] = load i16**, i16*** [[ARRAYIDX]], align 8
// CHECK-NEXT:    [[ARRAYIDX8:%.*]] = getelementptr inbounds i16*, i16** [[TMP90]], i64 100
// CHECK-NEXT:    [[TMP91:%.*]] = load i16*, i16** [[ARRAYIDX8]], align 8
// CHECK-NEXT:    [[ARRAYIDX9:%.*]] = getelementptr inbounds i16, i16* [[TMP91]], i64 10
// CHECK-NEXT:    [[TMP92:%.*]] = load i16***, i16**** [[C]], align 8
// CHECK-NEXT:    [[ARRAYIDX10:%.*]] = getelementptr inbounds i16**, i16*** [[TMP92]], i64 1003
// CHECK-NEXT:    [[TMP93:%.*]] = load i16**, i16*** [[ARRAYIDX10]], align 8
// CHECK-NEXT:    [[ARRAYIDX11:%.*]] = getelementptr inbounds i16*, i16** [[TMP93]], i64 102
// CHECK-NEXT:    [[TMP94:%.*]] = load i16*, i16** [[ARRAYIDX11]], align 8
// CHECK-NEXT:    [[ARRAYIDX12:%.*]] = getelementptr inbounds i16, i16* [[TMP94]], i64 11
// CHECK-NEXT:    [[TMP95:%.*]] = getelementptr i16, i16* [[ARRAYIDX12]], i32 1
// CHECK-NEXT:    [[TMP96:%.*]] = ptrtoint i16* [[ARRAYIDX9]] to i64
// CHECK-NEXT:    [[TMP97:%.*]] = ptrtoint i16* [[TMP95]] to i64
// CHECK-NEXT:    [[TMP98:%.*]] = sub nuw i64 [[TMP97]], [[TMP96]]
// CHECK-NEXT:    [[TMP99:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP88]], i64 0
// CHECK-NEXT:    [[TMP100:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP99]], i32 0, i32 0
// CHECK-NEXT:    [[TMP101:%.*]] = ptrtoint i16* [[ARRAYIDX9]] to i64
// CHECK-NEXT:    store i64 [[TMP101]], i64* [[TMP100]], align 8
// CHECK-NEXT:    [[TMP102:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP99]], i32 0, i32 1
// CHECK-NEXT:    store i64 [[TMP98]], i64* [[TMP102]], align 8
// CHECK-NEXT:    [[TMP103:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP99]], i32 0, i32 2
// CHECK-NEXT:    store i8 1, i8* [[TMP103]], align 8
// CHECK-NEXT:    store i64 1, i64* [[DEP_COUNTER_ADDR13]], align 8
// CHECK-NEXT:    [[TMP104:%.*]] = bitcast %struct.kmp_depend_info* [[TMP88]] to i8*
// CHECK-NEXT:    [[TMP105:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASK"(), "QUAL.OMP.DEPARRAY"(i32 1, i8* [[TMP104]]) ]
// CHECK-NEXT:    call void @_Z11doSomethingv() #[[ATTR1]]
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP105]]) [ "DIR.OMP.END.TASK"() ]
// CHECK-NEXT:    ret void
//
// end INTEL_COLLAB
