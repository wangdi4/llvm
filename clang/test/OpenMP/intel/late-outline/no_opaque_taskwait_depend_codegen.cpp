// INTEL_COLLAB
//
// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --prefix-filecheck-ir-name _
//
// RUN: %clang_cc1 -no-opaque-pointers -emit-llvm -o - -fopenmp -fopenmp-late-outline \
// RUN: -triple x86_64-unknown-linux-gnu -fopenmp-version=51 %s | \
// RUN: FileCheck --check-prefix=CHECK-NEW %s

// RUN: %clang_cc1 -no-opaque-pointers -emit-llvm -o - -fopenmp -fopenmp-late-outline \
// RUN: -triple x86_64-unknown-linux-gnu -fopenmp-version=51 %s \
// RUN: -fno-openmp-new-depend-ir | FileCheck %s

// RUN: %clang_cc1 -no-opaque-pointers -fopenmp -fopenmp-late-outline \
// RUN: -triple x86_64-unknown-linux-gnu -fopenmp-version=51 \
// RUN: -emit-pch %s -o %t

// RUN: %clang_cc1 -no-opaque-pointers -fopenmp -fopenmp-late-outline \
// RUN: -triple x86_64-unknown-linux-gnu -fopenmp-version=51 \
// RUN: -include-pch %t -emit-llvm %s -o - | \
// RUN: FileCheck --check-prefix=CHECK-NEW %s

// RUN: %clang_cc1 -no-opaque-pointers -fopenmp -fopenmp-late-outline \
// RUN: -triple x86_64-unknown-linux-gnu -fopenmp-version=51 \
// RUN: -fno-openmp-new-depend-ir -emit-pch %s -o %t

// RUN: %clang_cc1 -no-opaque-pointers -fopenmp -fopenmp-late-outline \
// RUN: -triple x86_64-unknown-linux-gnu -fopenmp-version=51 \
// RUN: -include-pch %t -fno-openmp-new-depend-ir -emit-llvm %s -o - | \
// RUN: FileCheck %s
// expected-no-diagnostics
//
#ifndef HEADER
#define HEADER
// CHECK-LABEL: @_Z3foov(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[VAR:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[ARR:%.*]] = alloca [100 x i32], align 16
// CHECK-NEXT:    store i32 1, i32* [[VAR]], align 4
// CHECK-NEXT:    [[TMP0:%.*]] = bitcast [100 x i32]* [[ARR]] to i8*
// CHECK-NEXT:    call void @llvm.memset.p0i8.i64(i8* align 16 [[TMP0]], i8 0, i64 400, i1 false)
// CHECK-NEXT:    [[TMP1:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASK"(), "QUAL.OMP.FIRSTPRIVATE"(i32* [[VAR]]), "QUAL.OMP.FIRSTPRIVATE"([100 x i32]* [[ARR]]) ]
// CHECK-NEXT:    [[TMP2:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASKWAIT"(), "QUAL.OMP.DEPEND.IN"(i32* [[VAR]]) ]
// CHECK-NEXT:    fence acq_rel
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP2]]) [ "DIR.OMP.END.TASKWAIT"() ]
// CHECK-NEXT:    [[TMP3:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASKWAIT"(), "QUAL.OMP.DEPEND.OUT"(i32* [[VAR]]) ]
// CHECK-NEXT:    fence acq_rel
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP3]]) [ "DIR.OMP.END.TASKWAIT"() ]
// CHECK-NEXT:    [[TMP4:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASKWAIT"(), "QUAL.OMP.DEPEND.INOUT"(i32* [[VAR]]) ]
// CHECK-NEXT:    fence acq_rel
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP4]]) [ "DIR.OMP.END.TASKWAIT"() ]
// CHECK-NEXT:    [[TMP5:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASKWAIT"(), "QUAL.OMP.NOWAIT"(), "QUAL.OMP.DEPEND.IN"([100 x i32]* [[ARR]]) ]
// CHECK-NEXT:    fence acq_rel
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP5]]) [ "DIR.OMP.END.TASKWAIT"() ]
// CHECK-NEXT:    [[TMP6:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASKWAIT"(), "QUAL.OMP.DEPEND.OUT:ARRSECT"([100 x i32]* [[ARR]], i64 1, i64 5, i64 10, i64 1) ]
// CHECK-NEXT:    fence acq_rel
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP6]]) [ "DIR.OMP.END.TASKWAIT"() ]
// CHECK-NEXT:    [[TMP7:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASKWAIT"(), "QUAL.OMP.DEPEND.IN"([100 x i32]* [[ARR]]), "QUAL.OMP.NOWAIT"() ]
// CHECK-NEXT:    fence acq_rel
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP7]]) [ "DIR.OMP.END.TASKWAIT"() ]
// CHECK-NEXT:    [[TMP8:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASKWAIT"(), "QUAL.OMP.DEPEND.INOUT"(i32* [[VAR]]), "QUAL.OMP.DEPEND.OUT"(i32* [[VAR]]), "QUAL.OMP.DEPEND.IN"(i32* [[VAR]]), "QUAL.OMP.NOWAIT"() ]
// CHECK-NEXT:    fence acq_rel
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP8]]) [ "DIR.OMP.END.TASKWAIT"() ]
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP1]]) [ "DIR.OMP.END.TASK"() ]
// CHECK-NEXT:    ret void
//
// CHECK-NEW-LABEL: @_Z3foov(
// CHECK-NEW-NEXT:  entry:
// CHECK-NEW-NEXT:    [[VAR:%.*]] = alloca i32, align 4
// CHECK-NEW-NEXT:    [[ARR:%.*]] = alloca [100 x i32], align 16
// CHECK-NEW-NEXT:    [[DOTDEP_ARR_ADDR:%.*]] = alloca [1 x %struct.kmp_depend_info], align 8
// CHECK-NEW-NEXT:    [[DEP_COUNTER_ADDR:%.*]] = alloca i64, align 8
// CHECK-NEW-NEXT:    [[DOTDEP_ARR_ADDR1:%.*]] = alloca [1 x %struct.kmp_depend_info], align 8
// CHECK-NEW-NEXT:    [[DEP_COUNTER_ADDR2:%.*]] = alloca i64, align 8
// CHECK-NEW-NEXT:    [[DOTDEP_ARR_ADDR3:%.*]] = alloca [1 x %struct.kmp_depend_info], align 8
// CHECK-NEW-NEXT:    [[DEP_COUNTER_ADDR4:%.*]] = alloca i64, align 8
// CHECK-NEW-NEXT:    [[DOTDEP_ARR_ADDR5:%.*]] = alloca [1 x %struct.kmp_depend_info], align 8
// CHECK-NEW-NEXT:    [[DEP_COUNTER_ADDR6:%.*]] = alloca i64, align 8
// CHECK-NEW-NEXT:    [[DOTDEP_ARR_ADDR7:%.*]] = alloca [1 x %struct.kmp_depend_info], align 8
// CHECK-NEW-NEXT:    [[DEP_COUNTER_ADDR9:%.*]] = alloca i64, align 8
// CHECK-NEW-NEXT:    [[DOTDEP_ARR_ADDR10:%.*]] = alloca [1 x %struct.kmp_depend_info], align 8
// CHECK-NEW-NEXT:    [[DEP_COUNTER_ADDR11:%.*]] = alloca i64, align 8
// CHECK-NEW-NEXT:    [[DOTDEP_ARR_ADDR12:%.*]] = alloca [3 x %struct.kmp_depend_info], align 8
// CHECK-NEW-NEXT:    [[DEP_COUNTER_ADDR13:%.*]] = alloca i64, align 8
// CHECK-NEW-NEXT:    store i32 1, i32* [[VAR]], align 4
// CHECK-NEW-NEXT:    [[TMP0:%.*]] = bitcast [100 x i32]* [[ARR]] to i8*
// CHECK-NEW-NEXT:    call void @llvm.memset.p0i8.i64(i8* align 16 [[TMP0]], i8 0, i64 400, i1 false)
// CHECK-NEW-NEXT:    [[TMP1:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASK"(), "QUAL.OMP.FIRSTPRIVATE"(i32* [[VAR]]), "QUAL.OMP.FIRSTPRIVATE"([100 x i32]* [[ARR]]), "QUAL.OMP.PRIVATE"([1 x %struct.kmp_depend_info]* [[DOTDEP_ARR_ADDR]]), "QUAL.OMP.PRIVATE"(i64* [[DEP_COUNTER_ADDR]]), "QUAL.OMP.PRIVATE"([1 x %struct.kmp_depend_info]* [[DOTDEP_ARR_ADDR1]]), "QUAL.OMP.PRIVATE"(i64* [[DEP_COUNTER_ADDR2]]), "QUAL.OMP.PRIVATE"([1 x %struct.kmp_depend_info]* [[DOTDEP_ARR_ADDR3]]), "QUAL.OMP.PRIVATE"(i64* [[DEP_COUNTER_ADDR4]]), "QUAL.OMP.PRIVATE"([1 x %struct.kmp_depend_info]* [[DOTDEP_ARR_ADDR5]]), "QUAL.OMP.PRIVATE"(i64* [[DEP_COUNTER_ADDR6]]), "QUAL.OMP.PRIVATE"([1 x %struct.kmp_depend_info]* [[DOTDEP_ARR_ADDR7]]), "QUAL.OMP.PRIVATE"(i64* [[DEP_COUNTER_ADDR9]]), "QUAL.OMP.PRIVATE"([1 x %struct.kmp_depend_info]* [[DOTDEP_ARR_ADDR10]]), "QUAL.OMP.PRIVATE"(i64* [[DEP_COUNTER_ADDR11]]), "QUAL.OMP.PRIVATE"([3 x %struct.kmp_depend_info]* [[DOTDEP_ARR_ADDR12]]), "QUAL.OMP.PRIVATE"(i64* [[DEP_COUNTER_ADDR13]]) ]
// CHECK-NEW-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [1 x %struct.kmp_depend_info], [1 x %struct.kmp_depend_info]* [[DOTDEP_ARR_ADDR]], i64 0, i64 0
// CHECK-NEW-NEXT:    [[TMP3:%.*]] = ptrtoint i32* [[VAR]] to i64
// CHECK-NEW-NEXT:    [[TMP4:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO:%.*]], %struct.kmp_depend_info* [[TMP2]], i64 0
// CHECK-NEW-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP4]], i32 0, i32 0
// CHECK-NEW-NEXT:    store i64 [[TMP3]], i64* [[TMP5]], align 8
// CHECK-NEW-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP4]], i32 0, i32 1
// CHECK-NEW-NEXT:    store i64 4, i64* [[TMP6]], align 8
// CHECK-NEW-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP4]], i32 0, i32 2
// CHECK-NEW-NEXT:    store i8 1, i8* [[TMP7]], align 8
// CHECK-NEW-NEXT:    store i64 1, i64* [[DEP_COUNTER_ADDR]], align 8
// CHECK-NEW-NEXT:    [[TMP8:%.*]] = bitcast %struct.kmp_depend_info* [[TMP2]] to i8*
// CHECK-NEW-NEXT:    [[TMP9:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASKWAIT"(), "QUAL.OMP.DEPARRAY"(i32 1, i8* [[TMP8]]) ]
// CHECK-NEW-NEXT:    fence acq_rel
// CHECK-NEW-NEXT:    call void @llvm.directive.region.exit(token [[TMP9]]) [ "DIR.OMP.END.TASKWAIT"() ]
// CHECK-NEW-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [1 x %struct.kmp_depend_info], [1 x %struct.kmp_depend_info]* [[DOTDEP_ARR_ADDR1]], i64 0, i64 0
// CHECK-NEW-NEXT:    [[TMP11:%.*]] = ptrtoint i32* [[VAR]] to i64
// CHECK-NEW-NEXT:    [[TMP12:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP10]], i64 0
// CHECK-NEW-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP12]], i32 0, i32 0
// CHECK-NEW-NEXT:    store i64 [[TMP11]], i64* [[TMP13]], align 8
// CHECK-NEW-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP12]], i32 0, i32 1
// CHECK-NEW-NEXT:    store i64 4, i64* [[TMP14]], align 8
// CHECK-NEW-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP12]], i32 0, i32 2
// CHECK-NEW-NEXT:    store i8 3, i8* [[TMP15]], align 8
// CHECK-NEW-NEXT:    store i64 1, i64* [[DEP_COUNTER_ADDR2]], align 8
// CHECK-NEW-NEXT:    [[TMP16:%.*]] = bitcast %struct.kmp_depend_info* [[TMP10]] to i8*
// CHECK-NEW-NEXT:    [[TMP17:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASKWAIT"(), "QUAL.OMP.DEPARRAY"(i32 1, i8* [[TMP16]]) ]
// CHECK-NEW-NEXT:    fence acq_rel
// CHECK-NEW-NEXT:    call void @llvm.directive.region.exit(token [[TMP17]]) [ "DIR.OMP.END.TASKWAIT"() ]
// CHECK-NEW-NEXT:    [[TMP18:%.*]] = getelementptr inbounds [1 x %struct.kmp_depend_info], [1 x %struct.kmp_depend_info]* [[DOTDEP_ARR_ADDR3]], i64 0, i64 0
// CHECK-NEW-NEXT:    [[TMP19:%.*]] = ptrtoint i32* [[VAR]] to i64
// CHECK-NEW-NEXT:    [[TMP20:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP18]], i64 0
// CHECK-NEW-NEXT:    [[TMP21:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP20]], i32 0, i32 0
// CHECK-NEW-NEXT:    store i64 [[TMP19]], i64* [[TMP21]], align 8
// CHECK-NEW-NEXT:    [[TMP22:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP20]], i32 0, i32 1
// CHECK-NEW-NEXT:    store i64 4, i64* [[TMP22]], align 8
// CHECK-NEW-NEXT:    [[TMP23:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP20]], i32 0, i32 2
// CHECK-NEW-NEXT:    store i8 3, i8* [[TMP23]], align 8
// CHECK-NEW-NEXT:    store i64 1, i64* [[DEP_COUNTER_ADDR4]], align 8
// CHECK-NEW-NEXT:    [[TMP24:%.*]] = bitcast %struct.kmp_depend_info* [[TMP18]] to i8*
// CHECK-NEW-NEXT:    [[TMP25:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASKWAIT"(), "QUAL.OMP.DEPARRAY"(i32 1, i8* [[TMP24]]) ]
// CHECK-NEW-NEXT:    fence acq_rel
// CHECK-NEW-NEXT:    call void @llvm.directive.region.exit(token [[TMP25]]) [ "DIR.OMP.END.TASKWAIT"() ]
// CHECK-NEW-NEXT:    [[TMP26:%.*]] = getelementptr inbounds [1 x %struct.kmp_depend_info], [1 x %struct.kmp_depend_info]* [[DOTDEP_ARR_ADDR5]], i64 0, i64 0
// CHECK-NEW-NEXT:    [[TMP27:%.*]] = ptrtoint [100 x i32]* [[ARR]] to i64
// CHECK-NEW-NEXT:    [[TMP28:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP26]], i64 0
// CHECK-NEW-NEXT:    [[TMP29:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP28]], i32 0, i32 0
// CHECK-NEW-NEXT:    store i64 [[TMP27]], i64* [[TMP29]], align 8
// CHECK-NEW-NEXT:    [[TMP30:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP28]], i32 0, i32 1
// CHECK-NEW-NEXT:    store i64 400, i64* [[TMP30]], align 8
// CHECK-NEW-NEXT:    [[TMP31:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP28]], i32 0, i32 2
// CHECK-NEW-NEXT:    store i8 1, i8* [[TMP31]], align 8
// CHECK-NEW-NEXT:    store i64 1, i64* [[DEP_COUNTER_ADDR6]], align 8
// CHECK-NEW-NEXT:    [[TMP32:%.*]] = bitcast %struct.kmp_depend_info* [[TMP26]] to i8*
// CHECK-NEW-NEXT:    [[TMP33:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASKWAIT"(), "QUAL.OMP.NOWAIT"(), "QUAL.OMP.DEPARRAY"(i32 1, i8* [[TMP32]]) ]
// CHECK-NEW-NEXT:    fence acq_rel
// CHECK-NEW-NEXT:    call void @llvm.directive.region.exit(token [[TMP33]]) [ "DIR.OMP.END.TASKWAIT"() ]
// CHECK-NEW-NEXT:    [[TMP34:%.*]] = getelementptr inbounds [1 x %struct.kmp_depend_info], [1 x %struct.kmp_depend_info]* [[DOTDEP_ARR_ADDR7]], i64 0, i64 0
// CHECK-NEW-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds [100 x i32], [100 x i32]* [[ARR]], i64 0, i64 5
// CHECK-NEW-NEXT:    [[ARRAYIDX8:%.*]] = getelementptr inbounds [100 x i32], [100 x i32]* [[ARR]], i64 0, i64 14
// CHECK-NEW-NEXT:    [[TMP35:%.*]] = getelementptr i32, i32* [[ARRAYIDX8]], i32 1
// CHECK-NEW-NEXT:    [[TMP36:%.*]] = ptrtoint i32* [[ARRAYIDX]] to i64
// CHECK-NEW-NEXT:    [[TMP37:%.*]] = ptrtoint i32* [[TMP35]] to i64
// CHECK-NEW-NEXT:    [[TMP38:%.*]] = sub nuw i64 [[TMP37]], [[TMP36]]
// CHECK-NEW-NEXT:    [[TMP39:%.*]] = ptrtoint i32* [[ARRAYIDX]] to i64
// CHECK-NEW-NEXT:    [[TMP40:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP34]], i64 0
// CHECK-NEW-NEXT:    [[TMP41:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP40]], i32 0, i32 0
// CHECK-NEW-NEXT:    store i64 [[TMP39]], i64* [[TMP41]], align 8
// CHECK-NEW-NEXT:    [[TMP42:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP40]], i32 0, i32 1
// CHECK-NEW-NEXT:    store i64 [[TMP38]], i64* [[TMP42]], align 8
// CHECK-NEW-NEXT:    [[TMP43:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP40]], i32 0, i32 2
// CHECK-NEW-NEXT:    store i8 3, i8* [[TMP43]], align 8
// CHECK-NEW-NEXT:    store i64 1, i64* [[DEP_COUNTER_ADDR9]], align 8
// CHECK-NEW-NEXT:    [[TMP44:%.*]] = bitcast %struct.kmp_depend_info* [[TMP34]] to i8*
// CHECK-NEW-NEXT:    [[TMP45:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASKWAIT"(), "QUAL.OMP.DEPARRAY"(i32 1, i8* [[TMP44]]) ]
// CHECK-NEW-NEXT:    fence acq_rel
// CHECK-NEW-NEXT:    call void @llvm.directive.region.exit(token [[TMP45]]) [ "DIR.OMP.END.TASKWAIT"() ]
// CHECK-NEW-NEXT:    [[TMP46:%.*]] = getelementptr inbounds [1 x %struct.kmp_depend_info], [1 x %struct.kmp_depend_info]* [[DOTDEP_ARR_ADDR10]], i64 0, i64 0
// CHECK-NEW-NEXT:    [[TMP47:%.*]] = ptrtoint [100 x i32]* [[ARR]] to i64
// CHECK-NEW-NEXT:    [[TMP48:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP46]], i64 0
// CHECK-NEW-NEXT:    [[TMP49:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP48]], i32 0, i32 0
// CHECK-NEW-NEXT:    store i64 [[TMP47]], i64* [[TMP49]], align 8
// CHECK-NEW-NEXT:    [[TMP50:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP48]], i32 0, i32 1
// CHECK-NEW-NEXT:    store i64 400, i64* [[TMP50]], align 8
// CHECK-NEW-NEXT:    [[TMP51:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP48]], i32 0, i32 2
// CHECK-NEW-NEXT:    store i8 1, i8* [[TMP51]], align 8
// CHECK-NEW-NEXT:    store i64 1, i64* [[DEP_COUNTER_ADDR11]], align 8
// CHECK-NEW-NEXT:    [[TMP52:%.*]] = bitcast %struct.kmp_depend_info* [[TMP46]] to i8*
// CHECK-NEW-NEXT:    [[TMP53:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASKWAIT"(), "QUAL.OMP.NOWAIT"(), "QUAL.OMP.DEPARRAY"(i32 1, i8* [[TMP52]]) ]
// CHECK-NEW-NEXT:    fence acq_rel
// CHECK-NEW-NEXT:    call void @llvm.directive.region.exit(token [[TMP53]]) [ "DIR.OMP.END.TASKWAIT"() ]
// CHECK-NEW-NEXT:    [[TMP54:%.*]] = getelementptr inbounds [3 x %struct.kmp_depend_info], [3 x %struct.kmp_depend_info]* [[DOTDEP_ARR_ADDR12]], i64 0, i64 0
// CHECK-NEW-NEXT:    [[TMP55:%.*]] = ptrtoint i32* [[VAR]] to i64
// CHECK-NEW-NEXT:    [[TMP56:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP54]], i64 0
// CHECK-NEW-NEXT:    [[TMP57:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP56]], i32 0, i32 0
// CHECK-NEW-NEXT:    store i64 [[TMP55]], i64* [[TMP57]], align 8
// CHECK-NEW-NEXT:    [[TMP58:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP56]], i32 0, i32 1
// CHECK-NEW-NEXT:    store i64 4, i64* [[TMP58]], align 8
// CHECK-NEW-NEXT:    [[TMP59:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP56]], i32 0, i32 2
// CHECK-NEW-NEXT:    store i8 3, i8* [[TMP59]], align 8
// CHECK-NEW-NEXT:    [[TMP60:%.*]] = ptrtoint i32* [[VAR]] to i64
// CHECK-NEW-NEXT:    [[TMP61:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP54]], i64 1
// CHECK-NEW-NEXT:    [[TMP62:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP61]], i32 0, i32 0
// CHECK-NEW-NEXT:    store i64 [[TMP60]], i64* [[TMP62]], align 8
// CHECK-NEW-NEXT:    [[TMP63:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP61]], i32 0, i32 1
// CHECK-NEW-NEXT:    store i64 4, i64* [[TMP63]], align 8
// CHECK-NEW-NEXT:    [[TMP64:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP61]], i32 0, i32 2
// CHECK-NEW-NEXT:    store i8 3, i8* [[TMP64]], align 8
// CHECK-NEW-NEXT:    [[TMP65:%.*]] = ptrtoint i32* [[VAR]] to i64
// CHECK-NEW-NEXT:    [[TMP66:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP54]], i64 2
// CHECK-NEW-NEXT:    [[TMP67:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP66]], i32 0, i32 0
// CHECK-NEW-NEXT:    store i64 [[TMP65]], i64* [[TMP67]], align 8
// CHECK-NEW-NEXT:    [[TMP68:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP66]], i32 0, i32 1
// CHECK-NEW-NEXT:    store i64 4, i64* [[TMP68]], align 8
// CHECK-NEW-NEXT:    [[TMP69:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], %struct.kmp_depend_info* [[TMP66]], i32 0, i32 2
// CHECK-NEW-NEXT:    store i8 1, i8* [[TMP69]], align 8
// CHECK-NEW-NEXT:    store i64 3, i64* [[DEP_COUNTER_ADDR13]], align 8
// CHECK-NEW-NEXT:    [[TMP70:%.*]] = bitcast %struct.kmp_depend_info* [[TMP54]] to i8*
// CHECK-NEW-NEXT:    [[TMP71:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASKWAIT"(), "QUAL.OMP.NOWAIT"(), "QUAL.OMP.DEPARRAY"(i32 3, i8* [[TMP70]]) ]
// CHECK-NEW-NEXT:    fence acq_rel
// CHECK-NEW-NEXT:    call void @llvm.directive.region.exit(token [[TMP71]]) [ "DIR.OMP.END.TASKWAIT"() ]
// CHECK-NEW-NEXT:    call void @llvm.directive.region.exit(token [[TMP1]]) [ "DIR.OMP.END.TASK"() ]
// CHECK-NEW-NEXT:    ret void
//
void foo()
{
  int var = 1;
  int arr[100] = {0};

  #pragma omp task
  {
    #pragma omp taskwait depend(in:var)
    #pragma omp taskwait depend(out:var)
    #pragma omp taskwait depend(inout:var)
    #pragma omp taskwait nowait depend(in:arr)
    #pragma omp taskwait depend(out:arr[5:10])
    #pragma omp taskwait depend(in:arr) nowait
    #pragma omp taskwait depend(inout:var) depend(out:var) depend(in:var) nowait
  }
}
#endif
// end INTEL_COLLAB
