// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --prefix-filecheck-ir-name a
// RUN: %clang_cc1 -verify -triple x86_64-unknown-linux-gnu -fopenmp -x c \
// RUN:  -fopenmp-late-outline -fopenmp-version=51 -emit-llvm %s -o - \
// RUN:  | FileCheck %s --check-prefix CHK-C

// RUN: %clang_cc1 -verify -triple x86_64-unknown-linux-gnu -fopenmp -x c \
// RUN: -fopenmp-late-outline -fopenmp-version=51 -emit-pch %s -o %t.pch

// RUN: %clang_cc1 -verify -triple x86_64-unknown-linux-gnu -fopenmp  -x c \
// RUN:  -fopenmp-late-outline -fopenmp-version=51 -emit-llvm %s -o - \
// RUN:  -include-pch %t.pch | FileCheck %s --check-prefix CHK-C
//
// RUN: %clang_cc1 -verify -triple x86_64-unknown-linux-gnu -fopenmp \
// RUN:  -fopenmp-late-outline -fopenmp-version=51 -emit-llvm %s -o - \
// RUN:  | FileCheck %s --check-prefix CHK-CXX
//
// RUN: %clang_cc1 -verify -triple x86_64-unknown-linux-gnu -fopenmp \
// RUN: -fopenmp-late-outline -fopenmp-version=51 -emit-pch %s -o %t.pch

// RUN: %clang_cc1 -verify -triple x86_64-unknown-linux-gnu -fopenmp \
// RUN:  -fopenmp-late-outline -fopenmp-version=51 -emit-llvm %s -o - \
// RUN:  -include-pch %t.pch | FileCheck %s --check-prefix CHK-CXX
//
// expected-no-diagnostics
#ifndef HEADER
#define HEADER

// CHK-C-LABEL: @test_int(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[X:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[TMP:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP3:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP6:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP11:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP14:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP19:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP22:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP27:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP30:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP35:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP38:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP43:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP46:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP51:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP54:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP59:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP62:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP67:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP70:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[TMP0:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD]], i32* [[TMP]], align 4
// CHK-C-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP1:%.*]] = phi i32 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP1]], i32* [[TMP]], align 4
// CHK-C-NEXT:    store i32 [[TMP0]], i32* [[ATOMIC_TEMP]], align 4
// CHK-C-NEXT:    [[TMP2:%.*]] = load i32, i32* [[ATOMIC_TEMP]], align 4
// CHK-C-NEXT:    [[TMP3:%.*]] = cmpxchg i32* [[X]], i32 [[TMP1]], i32 [[TMP2]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP4]] = extractvalue { i32, i1 } [[TMP3]], 0
// CHK-C-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i1 } [[TMP3]], 1
// CHK-C-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    [[CMP1:%.*]] = icmp sgt i32 [[TMP4]], [[TMP0]]
// CHK-C-NEXT:    br i1 [[CMP1]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP6:%.*]] = load i32, i32* [[TMP]], align 4
// CHK-C-NEXT:    [[TMP7:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD2:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD2]], i32* [[ATMP3]], align 4
// CHK-C-NEXT:    [[CMP4:%.*]] = icmp slt i32 [[ATOMIC_LOAD2]], [[TMP7]]
// CHK-C-NEXT:    br i1 [[CMP4]], label [[ATOMIC_CONT5:%.*]], label [[ATOMIC_EXIT9:%.*]]
// CHK-C:       atomic_cont5:
// CHK-C-NEXT:    [[TMP8:%.*]] = phi i32 [ [[ATOMIC_LOAD2]], [[ATOMIC_EXIT]] ], [ [[TMP11:%.*]], [[ATOMIC_CMP7:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP8]], i32* [[ATMP3]], align 4
// CHK-C-NEXT:    store i32 [[TMP7]], i32* [[ATOMIC_TEMP6]], align 4
// CHK-C-NEXT:    [[TMP9:%.*]] = load i32, i32* [[ATOMIC_TEMP6]], align 4
// CHK-C-NEXT:    [[TMP10:%.*]] = cmpxchg i32* [[X]], i32 [[TMP8]], i32 [[TMP9]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP11]] = extractvalue { i32, i1 } [[TMP10]], 0
// CHK-C-NEXT:    [[TMP12:%.*]] = extractvalue { i32, i1 } [[TMP10]], 1
// CHK-C-NEXT:    br i1 [[TMP12]], label [[ATOMIC_EXIT9]], label [[ATOMIC_CMP7]]
// CHK-C:       atomic_cmp7:
// CHK-C-NEXT:    [[CMP8:%.*]] = icmp slt i32 [[TMP11]], [[TMP7]]
// CHK-C-NEXT:    br i1 [[CMP8]], label [[ATOMIC_CONT5]], label [[ATOMIC_EXIT9]]
// CHK-C:       atomic_exit9:
// CHK-C-NEXT:    [[TMP13:%.*]] = load i32, i32* [[ATMP3]], align 4
// CHK-C-NEXT:    [[TMP14:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD10:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD10]], i32* [[ATMP11]], align 4
// CHK-C-NEXT:    [[CMP12:%.*]] = icmp slt i32 [[ATOMIC_LOAD10]], [[TMP14]]
// CHK-C-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT13:%.*]], label [[ATOMIC_EXIT17:%.*]]
// CHK-C:       atomic_cont13:
// CHK-C-NEXT:    [[TMP15:%.*]] = phi i32 [ [[ATOMIC_LOAD10]], [[ATOMIC_EXIT9]] ], [ [[TMP18:%.*]], [[ATOMIC_CMP15:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP15]], i32* [[ATMP11]], align 4
// CHK-C-NEXT:    store i32 [[TMP14]], i32* [[ATOMIC_TEMP14]], align 4
// CHK-C-NEXT:    [[TMP16:%.*]] = load i32, i32* [[ATOMIC_TEMP14]], align 4
// CHK-C-NEXT:    [[TMP17:%.*]] = cmpxchg i32* [[X]], i32 [[TMP15]], i32 [[TMP16]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP18]] = extractvalue { i32, i1 } [[TMP17]], 0
// CHK-C-NEXT:    [[TMP19:%.*]] = extractvalue { i32, i1 } [[TMP17]], 1
// CHK-C-NEXT:    br i1 [[TMP19]], label [[ATOMIC_EXIT17]], label [[ATOMIC_CMP15]]
// CHK-C:       atomic_cmp15:
// CHK-C-NEXT:    [[CMP16:%.*]] = icmp slt i32 [[TMP18]], [[TMP14]]
// CHK-C-NEXT:    br i1 [[CMP16]], label [[ATOMIC_CONT13]], label [[ATOMIC_EXIT17]]
// CHK-C:       atomic_exit17:
// CHK-C-NEXT:    [[TMP20:%.*]] = load i32, i32* [[ATMP11]], align 4
// CHK-C-NEXT:    [[TMP21:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD18:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD18]], i32* [[ATMP19]], align 4
// CHK-C-NEXT:    [[CMP20:%.*]] = icmp sgt i32 [[ATOMIC_LOAD18]], [[TMP21]]
// CHK-C-NEXT:    br i1 [[CMP20]], label [[ATOMIC_CONT21:%.*]], label [[ATOMIC_EXIT25:%.*]]
// CHK-C:       atomic_cont21:
// CHK-C-NEXT:    [[TMP22:%.*]] = phi i32 [ [[ATOMIC_LOAD18]], [[ATOMIC_EXIT17]] ], [ [[TMP25:%.*]], [[ATOMIC_CMP23:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP22]], i32* [[ATMP19]], align 4
// CHK-C-NEXT:    store i32 [[TMP21]], i32* [[ATOMIC_TEMP22]], align 4
// CHK-C-NEXT:    [[TMP23:%.*]] = load i32, i32* [[ATOMIC_TEMP22]], align 4
// CHK-C-NEXT:    [[TMP24:%.*]] = cmpxchg i32* [[X]], i32 [[TMP22]], i32 [[TMP23]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP25]] = extractvalue { i32, i1 } [[TMP24]], 0
// CHK-C-NEXT:    [[TMP26:%.*]] = extractvalue { i32, i1 } [[TMP24]], 1
// CHK-C-NEXT:    br i1 [[TMP26]], label [[ATOMIC_EXIT25]], label [[ATOMIC_CMP23]]
// CHK-C:       atomic_cmp23:
// CHK-C-NEXT:    [[CMP24:%.*]] = icmp sgt i32 [[TMP25]], [[TMP21]]
// CHK-C-NEXT:    br i1 [[CMP24]], label [[ATOMIC_CONT21]], label [[ATOMIC_EXIT25]]
// CHK-C:       atomic_exit25:
// CHK-C-NEXT:    [[TMP27:%.*]] = load i32, i32* [[ATMP19]], align 4
// CHK-C-NEXT:    [[TMP28:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP29:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD26:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD26]], i32* [[ATMP27]], align 4
// CHK-C-NEXT:    [[CMP28:%.*]] = icmp eq i32 [[ATOMIC_LOAD26]], [[TMP29]]
// CHK-C-NEXT:    br i1 [[CMP28]], label [[ATOMIC_CONT29:%.*]], label [[ATOMIC_EXIT33:%.*]]
// CHK-C:       atomic_cont29:
// CHK-C-NEXT:    [[TMP30:%.*]] = phi i32 [ [[ATOMIC_LOAD26]], [[ATOMIC_EXIT25]] ], [ [[TMP33:%.*]], [[ATOMIC_CMP31:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP30]], i32* [[ATMP27]], align 4
// CHK-C-NEXT:    store i32 [[TMP28]], i32* [[ATOMIC_TEMP30]], align 4
// CHK-C-NEXT:    [[TMP31:%.*]] = load i32, i32* [[ATOMIC_TEMP30]], align 4
// CHK-C-NEXT:    [[TMP32:%.*]] = cmpxchg i32* [[X]], i32 [[TMP30]], i32 [[TMP31]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP33]] = extractvalue { i32, i1 } [[TMP32]], 0
// CHK-C-NEXT:    [[TMP34:%.*]] = extractvalue { i32, i1 } [[TMP32]], 1
// CHK-C-NEXT:    br i1 [[TMP34]], label [[ATOMIC_EXIT33]], label [[ATOMIC_CMP31]]
// CHK-C:       atomic_cmp31:
// CHK-C-NEXT:    [[CMP32:%.*]] = icmp eq i32 [[TMP33]], [[TMP29]]
// CHK-C-NEXT:    br i1 [[CMP32]], label [[ATOMIC_CONT29]], label [[ATOMIC_EXIT33]]
// CHK-C:       atomic_exit33:
// CHK-C-NEXT:    [[TMP35:%.*]] = load i32, i32* [[ATMP27]], align 4
// CHK-C-NEXT:    [[TMP36:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD34:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD34]], i32* [[ATMP35]], align 4
// CHK-C-NEXT:    [[CMP36:%.*]] = icmp sgt i32 [[ATOMIC_LOAD34]], [[TMP36]]
// CHK-C-NEXT:    br i1 [[CMP36]], label [[ATOMIC_CONT37:%.*]], label [[ATOMIC_EXIT41:%.*]]
// CHK-C:       atomic_cont37:
// CHK-C-NEXT:    [[TMP37:%.*]] = phi i32 [ [[ATOMIC_LOAD34]], [[ATOMIC_EXIT33]] ], [ [[TMP40:%.*]], [[ATOMIC_CMP39:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP37]], i32* [[ATMP35]], align 4
// CHK-C-NEXT:    store i32 [[TMP36]], i32* [[ATOMIC_TEMP38]], align 4
// CHK-C-NEXT:    [[TMP38:%.*]] = load i32, i32* [[ATOMIC_TEMP38]], align 4
// CHK-C-NEXT:    [[TMP39:%.*]] = cmpxchg i32* [[X]], i32 [[TMP37]], i32 [[TMP38]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP40]] = extractvalue { i32, i1 } [[TMP39]], 0
// CHK-C-NEXT:    [[TMP41:%.*]] = extractvalue { i32, i1 } [[TMP39]], 1
// CHK-C-NEXT:    br i1 [[TMP41]], label [[ATOMIC_EXIT41]], label [[ATOMIC_CMP39]]
// CHK-C:       atomic_cmp39:
// CHK-C-NEXT:    [[CMP40:%.*]] = icmp sgt i32 [[TMP40]], [[TMP36]]
// CHK-C-NEXT:    br i1 [[CMP40]], label [[ATOMIC_CONT37]], label [[ATOMIC_EXIT41]]
// CHK-C:       atomic_exit41:
// CHK-C-NEXT:    [[TMP42:%.*]] = load i32, i32* [[ATMP35]], align 4
// CHK-C-NEXT:    [[TMP43:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD42:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD42]], i32* [[ATMP43]], align 4
// CHK-C-NEXT:    [[CMP44:%.*]] = icmp slt i32 [[ATOMIC_LOAD42]], [[TMP43]]
// CHK-C-NEXT:    br i1 [[CMP44]], label [[ATOMIC_CONT45:%.*]], label [[ATOMIC_EXIT49:%.*]]
// CHK-C:       atomic_cont45:
// CHK-C-NEXT:    [[TMP44:%.*]] = phi i32 [ [[ATOMIC_LOAD42]], [[ATOMIC_EXIT41]] ], [ [[TMP47:%.*]], [[ATOMIC_CMP47:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP44]], i32* [[ATMP43]], align 4
// CHK-C-NEXT:    store i32 [[TMP43]], i32* [[ATOMIC_TEMP46]], align 4
// CHK-C-NEXT:    [[TMP45:%.*]] = load i32, i32* [[ATOMIC_TEMP46]], align 4
// CHK-C-NEXT:    [[TMP46:%.*]] = cmpxchg i32* [[X]], i32 [[TMP44]], i32 [[TMP45]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP47]] = extractvalue { i32, i1 } [[TMP46]], 0
// CHK-C-NEXT:    [[TMP48:%.*]] = extractvalue { i32, i1 } [[TMP46]], 1
// CHK-C-NEXT:    br i1 [[TMP48]], label [[ATOMIC_EXIT49]], label [[ATOMIC_CMP47]]
// CHK-C:       atomic_cmp47:
// CHK-C-NEXT:    [[CMP48:%.*]] = icmp slt i32 [[TMP47]], [[TMP43]]
// CHK-C-NEXT:    br i1 [[CMP48]], label [[ATOMIC_CONT45]], label [[ATOMIC_EXIT49]]
// CHK-C:       atomic_exit49:
// CHK-C-NEXT:    [[TMP49:%.*]] = load i32, i32* [[ATMP43]], align 4
// CHK-C-NEXT:    [[TMP50:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD50:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD50]], i32* [[ATMP51]], align 4
// CHK-C-NEXT:    [[CMP52:%.*]] = icmp slt i32 [[ATOMIC_LOAD50]], [[TMP50]]
// CHK-C-NEXT:    br i1 [[CMP52]], label [[ATOMIC_CONT53:%.*]], label [[ATOMIC_EXIT57:%.*]]
// CHK-C:       atomic_cont53:
// CHK-C-NEXT:    [[TMP51:%.*]] = phi i32 [ [[ATOMIC_LOAD50]], [[ATOMIC_EXIT49]] ], [ [[TMP54:%.*]], [[ATOMIC_CMP55:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP51]], i32* [[ATMP51]], align 4
// CHK-C-NEXT:    store i32 [[TMP50]], i32* [[ATOMIC_TEMP54]], align 4
// CHK-C-NEXT:    [[TMP52:%.*]] = load i32, i32* [[ATOMIC_TEMP54]], align 4
// CHK-C-NEXT:    [[TMP53:%.*]] = cmpxchg i32* [[X]], i32 [[TMP51]], i32 [[TMP52]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP54]] = extractvalue { i32, i1 } [[TMP53]], 0
// CHK-C-NEXT:    [[TMP55:%.*]] = extractvalue { i32, i1 } [[TMP53]], 1
// CHK-C-NEXT:    br i1 [[TMP55]], label [[ATOMIC_EXIT57]], label [[ATOMIC_CMP55]]
// CHK-C:       atomic_cmp55:
// CHK-C-NEXT:    [[CMP56:%.*]] = icmp slt i32 [[TMP54]], [[TMP50]]
// CHK-C-NEXT:    br i1 [[CMP56]], label [[ATOMIC_CONT53]], label [[ATOMIC_EXIT57]]
// CHK-C:       atomic_exit57:
// CHK-C-NEXT:    [[TMP56:%.*]] = load i32, i32* [[ATMP51]], align 4
// CHK-C-NEXT:    [[TMP57:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD58:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD58]], i32* [[ATMP59]], align 4
// CHK-C-NEXT:    [[CMP60:%.*]] = icmp sgt i32 [[ATOMIC_LOAD58]], [[TMP57]]
// CHK-C-NEXT:    br i1 [[CMP60]], label [[ATOMIC_CONT61:%.*]], label [[ATOMIC_EXIT65:%.*]]
// CHK-C:       atomic_cont61:
// CHK-C-NEXT:    [[TMP58:%.*]] = phi i32 [ [[ATOMIC_LOAD58]], [[ATOMIC_EXIT57]] ], [ [[TMP61:%.*]], [[ATOMIC_CMP63:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP58]], i32* [[ATMP59]], align 4
// CHK-C-NEXT:    store i32 [[TMP57]], i32* [[ATOMIC_TEMP62]], align 4
// CHK-C-NEXT:    [[TMP59:%.*]] = load i32, i32* [[ATOMIC_TEMP62]], align 4
// CHK-C-NEXT:    [[TMP60:%.*]] = cmpxchg i32* [[X]], i32 [[TMP58]], i32 [[TMP59]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP61]] = extractvalue { i32, i1 } [[TMP60]], 0
// CHK-C-NEXT:    [[TMP62:%.*]] = extractvalue { i32, i1 } [[TMP60]], 1
// CHK-C-NEXT:    br i1 [[TMP62]], label [[ATOMIC_EXIT65]], label [[ATOMIC_CMP63]]
// CHK-C:       atomic_cmp63:
// CHK-C-NEXT:    [[CMP64:%.*]] = icmp sgt i32 [[TMP61]], [[TMP57]]
// CHK-C-NEXT:    br i1 [[CMP64]], label [[ATOMIC_CONT61]], label [[ATOMIC_EXIT65]]
// CHK-C:       atomic_exit65:
// CHK-C-NEXT:    [[TMP63:%.*]] = load i32, i32* [[ATMP59]], align 4
// CHK-C-NEXT:    [[TMP64:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP65:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD66:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD66]], i32* [[ATMP67]], align 4
// CHK-C-NEXT:    [[CMP68:%.*]] = icmp eq i32 [[ATOMIC_LOAD66]], [[TMP65]]
// CHK-C-NEXT:    br i1 [[CMP68]], label [[ATOMIC_CONT69:%.*]], label [[ATOMIC_EXIT73:%.*]]
// CHK-C:       atomic_cont69:
// CHK-C-NEXT:    [[TMP66:%.*]] = phi i32 [ [[ATOMIC_LOAD66]], [[ATOMIC_EXIT65]] ], [ [[TMP69:%.*]], [[ATOMIC_CMP71:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP66]], i32* [[ATMP67]], align 4
// CHK-C-NEXT:    store i32 [[TMP64]], i32* [[ATOMIC_TEMP70]], align 4
// CHK-C-NEXT:    [[TMP67:%.*]] = load i32, i32* [[ATOMIC_TEMP70]], align 4
// CHK-C-NEXT:    [[TMP68:%.*]] = cmpxchg i32* [[X]], i32 [[TMP66]], i32 [[TMP67]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP69]] = extractvalue { i32, i1 } [[TMP68]], 0
// CHK-C-NEXT:    [[TMP70:%.*]] = extractvalue { i32, i1 } [[TMP68]], 1
// CHK-C-NEXT:    br i1 [[TMP70]], label [[ATOMIC_EXIT73]], label [[ATOMIC_CMP71]]
// CHK-C:       atomic_cmp71:
// CHK-C-NEXT:    [[CMP72:%.*]] = icmp eq i32 [[TMP69]], [[TMP65]]
// CHK-C-NEXT:    br i1 [[CMP72]], label [[ATOMIC_CONT69]], label [[ATOMIC_EXIT73]]
// CHK-C:       atomic_exit73:
// CHK-C-NEXT:    [[TMP71:%.*]] = load i32, i32* [[ATMP67]], align 4
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z8test_intv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[X:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP3:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP6:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP11:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP14:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP19:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP22:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP27:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP30:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP35:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP38:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP43:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP46:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP51:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP54:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP59:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP62:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP67:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP70:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD]], i32* [[TMP]], align 4
// CHK-CXX-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP1:%.*]] = phi i32 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP1]], i32* [[TMP]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP0]], i32* [[ATOMIC_TEMP]], align 4
// CHK-CXX-NEXT:    [[TMP2:%.*]] = load i32, i32* [[ATOMIC_TEMP]], align 4
// CHK-CXX-NEXT:    [[TMP3:%.*]] = cmpxchg i32* [[X]], i32 [[TMP1]], i32 [[TMP2]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP4]] = extractvalue { i32, i1 } [[TMP3]], 0
// CHK-CXX-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i1 } [[TMP3]], 1
// CHK-CXX-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    [[CMP1:%.*]] = icmp sgt i32 [[TMP4]], [[TMP0]]
// CHK-CXX-NEXT:    br i1 [[CMP1]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP6:%.*]] = load i32, i32* [[TMP]], align 4
// CHK-CXX-NEXT:    [[TMP7:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD2:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD2]], i32* [[ATMP3]], align 4
// CHK-CXX-NEXT:    [[CMP4:%.*]] = icmp slt i32 [[ATOMIC_LOAD2]], [[TMP7]]
// CHK-CXX-NEXT:    br i1 [[CMP4]], label [[ATOMIC_CONT5:%.*]], label [[ATOMIC_EXIT9:%.*]]
// CHK-CXX:       atomic_cont5:
// CHK-CXX-NEXT:    [[TMP8:%.*]] = phi i32 [ [[ATOMIC_LOAD2]], [[ATOMIC_EXIT]] ], [ [[TMP11:%.*]], [[ATOMIC_CMP7:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP8]], i32* [[ATMP3]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP7]], i32* [[ATOMIC_TEMP6]], align 4
// CHK-CXX-NEXT:    [[TMP9:%.*]] = load i32, i32* [[ATOMIC_TEMP6]], align 4
// CHK-CXX-NEXT:    [[TMP10:%.*]] = cmpxchg i32* [[X]], i32 [[TMP8]], i32 [[TMP9]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP11]] = extractvalue { i32, i1 } [[TMP10]], 0
// CHK-CXX-NEXT:    [[TMP12:%.*]] = extractvalue { i32, i1 } [[TMP10]], 1
// CHK-CXX-NEXT:    br i1 [[TMP12]], label [[ATOMIC_EXIT9]], label [[ATOMIC_CMP7]]
// CHK-CXX:       atomic_cmp7:
// CHK-CXX-NEXT:    [[CMP8:%.*]] = icmp slt i32 [[TMP11]], [[TMP7]]
// CHK-CXX-NEXT:    br i1 [[CMP8]], label [[ATOMIC_CONT5]], label [[ATOMIC_EXIT9]]
// CHK-CXX:       atomic_exit9:
// CHK-CXX-NEXT:    [[TMP13:%.*]] = load i32, i32* [[ATMP3]], align 4
// CHK-CXX-NEXT:    [[TMP14:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD10:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD10]], i32* [[ATMP11]], align 4
// CHK-CXX-NEXT:    [[CMP12:%.*]] = icmp slt i32 [[ATOMIC_LOAD10]], [[TMP14]]
// CHK-CXX-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT13:%.*]], label [[ATOMIC_EXIT17:%.*]]
// CHK-CXX:       atomic_cont13:
// CHK-CXX-NEXT:    [[TMP15:%.*]] = phi i32 [ [[ATOMIC_LOAD10]], [[ATOMIC_EXIT9]] ], [ [[TMP18:%.*]], [[ATOMIC_CMP15:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP15]], i32* [[ATMP11]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP14]], i32* [[ATOMIC_TEMP14]], align 4
// CHK-CXX-NEXT:    [[TMP16:%.*]] = load i32, i32* [[ATOMIC_TEMP14]], align 4
// CHK-CXX-NEXT:    [[TMP17:%.*]] = cmpxchg i32* [[X]], i32 [[TMP15]], i32 [[TMP16]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP18]] = extractvalue { i32, i1 } [[TMP17]], 0
// CHK-CXX-NEXT:    [[TMP19:%.*]] = extractvalue { i32, i1 } [[TMP17]], 1
// CHK-CXX-NEXT:    br i1 [[TMP19]], label [[ATOMIC_EXIT17]], label [[ATOMIC_CMP15]]
// CHK-CXX:       atomic_cmp15:
// CHK-CXX-NEXT:    [[CMP16:%.*]] = icmp slt i32 [[TMP18]], [[TMP14]]
// CHK-CXX-NEXT:    br i1 [[CMP16]], label [[ATOMIC_CONT13]], label [[ATOMIC_EXIT17]]
// CHK-CXX:       atomic_exit17:
// CHK-CXX-NEXT:    [[TMP20:%.*]] = load i32, i32* [[ATMP11]], align 4
// CHK-CXX-NEXT:    [[TMP21:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD18:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD18]], i32* [[ATMP19]], align 4
// CHK-CXX-NEXT:    [[CMP20:%.*]] = icmp sgt i32 [[ATOMIC_LOAD18]], [[TMP21]]
// CHK-CXX-NEXT:    br i1 [[CMP20]], label [[ATOMIC_CONT21:%.*]], label [[ATOMIC_EXIT25:%.*]]
// CHK-CXX:       atomic_cont21:
// CHK-CXX-NEXT:    [[TMP22:%.*]] = phi i32 [ [[ATOMIC_LOAD18]], [[ATOMIC_EXIT17]] ], [ [[TMP25:%.*]], [[ATOMIC_CMP23:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP22]], i32* [[ATMP19]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP21]], i32* [[ATOMIC_TEMP22]], align 4
// CHK-CXX-NEXT:    [[TMP23:%.*]] = load i32, i32* [[ATOMIC_TEMP22]], align 4
// CHK-CXX-NEXT:    [[TMP24:%.*]] = cmpxchg i32* [[X]], i32 [[TMP22]], i32 [[TMP23]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP25]] = extractvalue { i32, i1 } [[TMP24]], 0
// CHK-CXX-NEXT:    [[TMP26:%.*]] = extractvalue { i32, i1 } [[TMP24]], 1
// CHK-CXX-NEXT:    br i1 [[TMP26]], label [[ATOMIC_EXIT25]], label [[ATOMIC_CMP23]]
// CHK-CXX:       atomic_cmp23:
// CHK-CXX-NEXT:    [[CMP24:%.*]] = icmp sgt i32 [[TMP25]], [[TMP21]]
// CHK-CXX-NEXT:    br i1 [[CMP24]], label [[ATOMIC_CONT21]], label [[ATOMIC_EXIT25]]
// CHK-CXX:       atomic_exit25:
// CHK-CXX-NEXT:    [[TMP27:%.*]] = load i32, i32* [[ATMP19]], align 4
// CHK-CXX-NEXT:    [[TMP28:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP29:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD26:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD26]], i32* [[ATMP27]], align 4
// CHK-CXX-NEXT:    [[CMP28:%.*]] = icmp eq i32 [[ATOMIC_LOAD26]], [[TMP29]]
// CHK-CXX-NEXT:    br i1 [[CMP28]], label [[ATOMIC_CONT29:%.*]], label [[ATOMIC_EXIT33:%.*]]
// CHK-CXX:       atomic_cont29:
// CHK-CXX-NEXT:    [[TMP30:%.*]] = phi i32 [ [[ATOMIC_LOAD26]], [[ATOMIC_EXIT25]] ], [ [[TMP33:%.*]], [[ATOMIC_CMP31:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP30]], i32* [[ATMP27]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP28]], i32* [[ATOMIC_TEMP30]], align 4
// CHK-CXX-NEXT:    [[TMP31:%.*]] = load i32, i32* [[ATOMIC_TEMP30]], align 4
// CHK-CXX-NEXT:    [[TMP32:%.*]] = cmpxchg i32* [[X]], i32 [[TMP30]], i32 [[TMP31]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP33]] = extractvalue { i32, i1 } [[TMP32]], 0
// CHK-CXX-NEXT:    [[TMP34:%.*]] = extractvalue { i32, i1 } [[TMP32]], 1
// CHK-CXX-NEXT:    br i1 [[TMP34]], label [[ATOMIC_EXIT33]], label [[ATOMIC_CMP31]]
// CHK-CXX:       atomic_cmp31:
// CHK-CXX-NEXT:    [[CMP32:%.*]] = icmp eq i32 [[TMP33]], [[TMP29]]
// CHK-CXX-NEXT:    br i1 [[CMP32]], label [[ATOMIC_CONT29]], label [[ATOMIC_EXIT33]]
// CHK-CXX:       atomic_exit33:
// CHK-CXX-NEXT:    [[TMP35:%.*]] = load i32, i32* [[ATMP27]], align 4
// CHK-CXX-NEXT:    [[TMP36:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD34:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD34]], i32* [[ATMP35]], align 4
// CHK-CXX-NEXT:    [[CMP36:%.*]] = icmp sgt i32 [[ATOMIC_LOAD34]], [[TMP36]]
// CHK-CXX-NEXT:    br i1 [[CMP36]], label [[ATOMIC_CONT37:%.*]], label [[ATOMIC_EXIT41:%.*]]
// CHK-CXX:       atomic_cont37:
// CHK-CXX-NEXT:    [[TMP37:%.*]] = phi i32 [ [[ATOMIC_LOAD34]], [[ATOMIC_EXIT33]] ], [ [[TMP40:%.*]], [[ATOMIC_CMP39:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP37]], i32* [[ATMP35]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP36]], i32* [[ATOMIC_TEMP38]], align 4
// CHK-CXX-NEXT:    [[TMP38:%.*]] = load i32, i32* [[ATOMIC_TEMP38]], align 4
// CHK-CXX-NEXT:    [[TMP39:%.*]] = cmpxchg i32* [[X]], i32 [[TMP37]], i32 [[TMP38]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP40]] = extractvalue { i32, i1 } [[TMP39]], 0
// CHK-CXX-NEXT:    [[TMP41:%.*]] = extractvalue { i32, i1 } [[TMP39]], 1
// CHK-CXX-NEXT:    br i1 [[TMP41]], label [[ATOMIC_EXIT41]], label [[ATOMIC_CMP39]]
// CHK-CXX:       atomic_cmp39:
// CHK-CXX-NEXT:    [[CMP40:%.*]] = icmp sgt i32 [[TMP40]], [[TMP36]]
// CHK-CXX-NEXT:    br i1 [[CMP40]], label [[ATOMIC_CONT37]], label [[ATOMIC_EXIT41]]
// CHK-CXX:       atomic_exit41:
// CHK-CXX-NEXT:    [[TMP42:%.*]] = load i32, i32* [[ATMP35]], align 4
// CHK-CXX-NEXT:    [[TMP43:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD42:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD42]], i32* [[ATMP43]], align 4
// CHK-CXX-NEXT:    [[CMP44:%.*]] = icmp slt i32 [[ATOMIC_LOAD42]], [[TMP43]]
// CHK-CXX-NEXT:    br i1 [[CMP44]], label [[ATOMIC_CONT45:%.*]], label [[ATOMIC_EXIT49:%.*]]
// CHK-CXX:       atomic_cont45:
// CHK-CXX-NEXT:    [[TMP44:%.*]] = phi i32 [ [[ATOMIC_LOAD42]], [[ATOMIC_EXIT41]] ], [ [[TMP47:%.*]], [[ATOMIC_CMP47:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP44]], i32* [[ATMP43]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP43]], i32* [[ATOMIC_TEMP46]], align 4
// CHK-CXX-NEXT:    [[TMP45:%.*]] = load i32, i32* [[ATOMIC_TEMP46]], align 4
// CHK-CXX-NEXT:    [[TMP46:%.*]] = cmpxchg i32* [[X]], i32 [[TMP44]], i32 [[TMP45]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP47]] = extractvalue { i32, i1 } [[TMP46]], 0
// CHK-CXX-NEXT:    [[TMP48:%.*]] = extractvalue { i32, i1 } [[TMP46]], 1
// CHK-CXX-NEXT:    br i1 [[TMP48]], label [[ATOMIC_EXIT49]], label [[ATOMIC_CMP47]]
// CHK-CXX:       atomic_cmp47:
// CHK-CXX-NEXT:    [[CMP48:%.*]] = icmp slt i32 [[TMP47]], [[TMP43]]
// CHK-CXX-NEXT:    br i1 [[CMP48]], label [[ATOMIC_CONT45]], label [[ATOMIC_EXIT49]]
// CHK-CXX:       atomic_exit49:
// CHK-CXX-NEXT:    [[TMP49:%.*]] = load i32, i32* [[ATMP43]], align 4
// CHK-CXX-NEXT:    [[TMP50:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD50:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD50]], i32* [[ATMP51]], align 4
// CHK-CXX-NEXT:    [[CMP52:%.*]] = icmp slt i32 [[ATOMIC_LOAD50]], [[TMP50]]
// CHK-CXX-NEXT:    br i1 [[CMP52]], label [[ATOMIC_CONT53:%.*]], label [[ATOMIC_EXIT57:%.*]]
// CHK-CXX:       atomic_cont53:
// CHK-CXX-NEXT:    [[TMP51:%.*]] = phi i32 [ [[ATOMIC_LOAD50]], [[ATOMIC_EXIT49]] ], [ [[TMP54:%.*]], [[ATOMIC_CMP55:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP51]], i32* [[ATMP51]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP50]], i32* [[ATOMIC_TEMP54]], align 4
// CHK-CXX-NEXT:    [[TMP52:%.*]] = load i32, i32* [[ATOMIC_TEMP54]], align 4
// CHK-CXX-NEXT:    [[TMP53:%.*]] = cmpxchg i32* [[X]], i32 [[TMP51]], i32 [[TMP52]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP54]] = extractvalue { i32, i1 } [[TMP53]], 0
// CHK-CXX-NEXT:    [[TMP55:%.*]] = extractvalue { i32, i1 } [[TMP53]], 1
// CHK-CXX-NEXT:    br i1 [[TMP55]], label [[ATOMIC_EXIT57]], label [[ATOMIC_CMP55]]
// CHK-CXX:       atomic_cmp55:
// CHK-CXX-NEXT:    [[CMP56:%.*]] = icmp slt i32 [[TMP54]], [[TMP50]]
// CHK-CXX-NEXT:    br i1 [[CMP56]], label [[ATOMIC_CONT53]], label [[ATOMIC_EXIT57]]
// CHK-CXX:       atomic_exit57:
// CHK-CXX-NEXT:    [[TMP56:%.*]] = load i32, i32* [[ATMP51]], align 4
// CHK-CXX-NEXT:    [[TMP57:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD58:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD58]], i32* [[ATMP59]], align 4
// CHK-CXX-NEXT:    [[CMP60:%.*]] = icmp sgt i32 [[ATOMIC_LOAD58]], [[TMP57]]
// CHK-CXX-NEXT:    br i1 [[CMP60]], label [[ATOMIC_CONT61:%.*]], label [[ATOMIC_EXIT65:%.*]]
// CHK-CXX:       atomic_cont61:
// CHK-CXX-NEXT:    [[TMP58:%.*]] = phi i32 [ [[ATOMIC_LOAD58]], [[ATOMIC_EXIT57]] ], [ [[TMP61:%.*]], [[ATOMIC_CMP63:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP58]], i32* [[ATMP59]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP57]], i32* [[ATOMIC_TEMP62]], align 4
// CHK-CXX-NEXT:    [[TMP59:%.*]] = load i32, i32* [[ATOMIC_TEMP62]], align 4
// CHK-CXX-NEXT:    [[TMP60:%.*]] = cmpxchg i32* [[X]], i32 [[TMP58]], i32 [[TMP59]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP61]] = extractvalue { i32, i1 } [[TMP60]], 0
// CHK-CXX-NEXT:    [[TMP62:%.*]] = extractvalue { i32, i1 } [[TMP60]], 1
// CHK-CXX-NEXT:    br i1 [[TMP62]], label [[ATOMIC_EXIT65]], label [[ATOMIC_CMP63]]
// CHK-CXX:       atomic_cmp63:
// CHK-CXX-NEXT:    [[CMP64:%.*]] = icmp sgt i32 [[TMP61]], [[TMP57]]
// CHK-CXX-NEXT:    br i1 [[CMP64]], label [[ATOMIC_CONT61]], label [[ATOMIC_EXIT65]]
// CHK-CXX:       atomic_exit65:
// CHK-CXX-NEXT:    [[TMP63:%.*]] = load i32, i32* [[ATMP59]], align 4
// CHK-CXX-NEXT:    [[TMP64:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP65:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD66:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD66]], i32* [[ATMP67]], align 4
// CHK-CXX-NEXT:    [[CMP68:%.*]] = icmp eq i32 [[ATOMIC_LOAD66]], [[TMP65]]
// CHK-CXX-NEXT:    br i1 [[CMP68]], label [[ATOMIC_CONT69:%.*]], label [[ATOMIC_EXIT73:%.*]]
// CHK-CXX:       atomic_cont69:
// CHK-CXX-NEXT:    [[TMP66:%.*]] = phi i32 [ [[ATOMIC_LOAD66]], [[ATOMIC_EXIT65]] ], [ [[TMP69:%.*]], [[ATOMIC_CMP71:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP66]], i32* [[ATMP67]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP64]], i32* [[ATOMIC_TEMP70]], align 4
// CHK-CXX-NEXT:    [[TMP67:%.*]] = load i32, i32* [[ATOMIC_TEMP70]], align 4
// CHK-CXX-NEXT:    [[TMP68:%.*]] = cmpxchg i32* [[X]], i32 [[TMP66]], i32 [[TMP67]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP69]] = extractvalue { i32, i1 } [[TMP68]], 0
// CHK-CXX-NEXT:    [[TMP70:%.*]] = extractvalue { i32, i1 } [[TMP68]], 1
// CHK-CXX-NEXT:    br i1 [[TMP70]], label [[ATOMIC_EXIT73]], label [[ATOMIC_CMP71]]
// CHK-CXX:       atomic_cmp71:
// CHK-CXX-NEXT:    [[CMP72:%.*]] = icmp eq i32 [[TMP69]], [[TMP65]]
// CHK-CXX-NEXT:    br i1 [[CMP72]], label [[ATOMIC_CONT69]], label [[ATOMIC_EXIT73]]
// CHK-CXX:       atomic_exit73:
// CHK-CXX-NEXT:    [[TMP71:%.*]] = load i32, i32* [[ATMP67]], align 4
// CHK-CXX-NEXT:    ret void
//
void test_int() {
  // One of each form with 'int'.
  int x, expr, d, e;

  #pragma omp atomic compare
  x = expr < x ? expr : x; // MIN

  #pragma omp atomic compare
  x = expr > x ? expr : x; // MAX

  #pragma omp atomic compare
  x = x < expr ? expr : x; // MAX

  #pragma omp atomic compare
  x = x > expr ? expr : x; // MIN

  #pragma omp atomic compare
  x = x == e ? d : x;

  #pragma omp atomic compare
  if (expr < x) {
    x = expr;
  } // MIN

  #pragma omp atomic compare
  if (expr > x) {
    x = expr;
  } // MAX

  #pragma omp atomic compare
  if (x < expr) {
    x = expr;
  } // MAX

  #pragma omp atomic compare
  if (x > expr) {
    x = expr;
  } // MIN

  #pragma omp atomic compare
  if (x == e) {
    x = d;
  }
}

// CHK-C-LABEL: @test_unsigned_short(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[X:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[D:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[E:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[TMP:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP3:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATOMIC_TEMP6:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP11:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATOMIC_TEMP14:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP19:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATOMIC_TEMP22:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP27:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATOMIC_TEMP30:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP35:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATOMIC_TEMP38:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP43:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATOMIC_TEMP46:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP51:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATOMIC_TEMP54:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP59:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATOMIC_TEMP62:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP67:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATOMIC_TEMP70:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[TMP0:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD]], i16* [[TMP]], align 2
// CHK-C-NEXT:    [[CMP:%.*]] = icmp ugt i16 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP1:%.*]] = phi i16 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP1]], i16* [[TMP]], align 2
// CHK-C-NEXT:    store i16 [[TMP0]], i16* [[ATOMIC_TEMP]], align 2
// CHK-C-NEXT:    [[TMP2:%.*]] = load i16, i16* [[ATOMIC_TEMP]], align 2
// CHK-C-NEXT:    [[TMP3:%.*]] = cmpxchg i16* [[X]], i16 [[TMP1]], i16 [[TMP2]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP4]] = extractvalue { i16, i1 } [[TMP3]], 0
// CHK-C-NEXT:    [[TMP5:%.*]] = extractvalue { i16, i1 } [[TMP3]], 1
// CHK-C-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    [[CMP1:%.*]] = icmp ugt i16 [[TMP4]], [[TMP0]]
// CHK-C-NEXT:    br i1 [[CMP1]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP6:%.*]] = load i16, i16* [[TMP]], align 2
// CHK-C-NEXT:    [[TMP7:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD2:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD2]], i16* [[ATMP3]], align 2
// CHK-C-NEXT:    [[CMP4:%.*]] = icmp ult i16 [[ATOMIC_LOAD2]], [[TMP7]]
// CHK-C-NEXT:    br i1 [[CMP4]], label [[ATOMIC_CONT5:%.*]], label [[ATOMIC_EXIT9:%.*]]
// CHK-C:       atomic_cont5:
// CHK-C-NEXT:    [[TMP8:%.*]] = phi i16 [ [[ATOMIC_LOAD2]], [[ATOMIC_EXIT]] ], [ [[TMP11:%.*]], [[ATOMIC_CMP7:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP8]], i16* [[ATMP3]], align 2
// CHK-C-NEXT:    store i16 [[TMP7]], i16* [[ATOMIC_TEMP6]], align 2
// CHK-C-NEXT:    [[TMP9:%.*]] = load i16, i16* [[ATOMIC_TEMP6]], align 2
// CHK-C-NEXT:    [[TMP10:%.*]] = cmpxchg i16* [[X]], i16 [[TMP8]], i16 [[TMP9]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP11]] = extractvalue { i16, i1 } [[TMP10]], 0
// CHK-C-NEXT:    [[TMP12:%.*]] = extractvalue { i16, i1 } [[TMP10]], 1
// CHK-C-NEXT:    br i1 [[TMP12]], label [[ATOMIC_EXIT9]], label [[ATOMIC_CMP7]]
// CHK-C:       atomic_cmp7:
// CHK-C-NEXT:    [[CMP8:%.*]] = icmp ult i16 [[TMP11]], [[TMP7]]
// CHK-C-NEXT:    br i1 [[CMP8]], label [[ATOMIC_CONT5]], label [[ATOMIC_EXIT9]]
// CHK-C:       atomic_exit9:
// CHK-C-NEXT:    [[TMP13:%.*]] = load i16, i16* [[ATMP3]], align 2
// CHK-C-NEXT:    [[TMP14:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD10:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD10]], i16* [[ATMP11]], align 2
// CHK-C-NEXT:    [[CMP12:%.*]] = icmp ult i16 [[ATOMIC_LOAD10]], [[TMP14]]
// CHK-C-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT13:%.*]], label [[ATOMIC_EXIT17:%.*]]
// CHK-C:       atomic_cont13:
// CHK-C-NEXT:    [[TMP15:%.*]] = phi i16 [ [[ATOMIC_LOAD10]], [[ATOMIC_EXIT9]] ], [ [[TMP18:%.*]], [[ATOMIC_CMP15:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP15]], i16* [[ATMP11]], align 2
// CHK-C-NEXT:    store i16 [[TMP14]], i16* [[ATOMIC_TEMP14]], align 2
// CHK-C-NEXT:    [[TMP16:%.*]] = load i16, i16* [[ATOMIC_TEMP14]], align 2
// CHK-C-NEXT:    [[TMP17:%.*]] = cmpxchg i16* [[X]], i16 [[TMP15]], i16 [[TMP16]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP18]] = extractvalue { i16, i1 } [[TMP17]], 0
// CHK-C-NEXT:    [[TMP19:%.*]] = extractvalue { i16, i1 } [[TMP17]], 1
// CHK-C-NEXT:    br i1 [[TMP19]], label [[ATOMIC_EXIT17]], label [[ATOMIC_CMP15]]
// CHK-C:       atomic_cmp15:
// CHK-C-NEXT:    [[CMP16:%.*]] = icmp ult i16 [[TMP18]], [[TMP14]]
// CHK-C-NEXT:    br i1 [[CMP16]], label [[ATOMIC_CONT13]], label [[ATOMIC_EXIT17]]
// CHK-C:       atomic_exit17:
// CHK-C-NEXT:    [[TMP20:%.*]] = load i16, i16* [[ATMP11]], align 2
// CHK-C-NEXT:    [[TMP21:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD18:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD18]], i16* [[ATMP19]], align 2
// CHK-C-NEXT:    [[CMP20:%.*]] = icmp ugt i16 [[ATOMIC_LOAD18]], [[TMP21]]
// CHK-C-NEXT:    br i1 [[CMP20]], label [[ATOMIC_CONT21:%.*]], label [[ATOMIC_EXIT25:%.*]]
// CHK-C:       atomic_cont21:
// CHK-C-NEXT:    [[TMP22:%.*]] = phi i16 [ [[ATOMIC_LOAD18]], [[ATOMIC_EXIT17]] ], [ [[TMP25:%.*]], [[ATOMIC_CMP23:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP22]], i16* [[ATMP19]], align 2
// CHK-C-NEXT:    store i16 [[TMP21]], i16* [[ATOMIC_TEMP22]], align 2
// CHK-C-NEXT:    [[TMP23:%.*]] = load i16, i16* [[ATOMIC_TEMP22]], align 2
// CHK-C-NEXT:    [[TMP24:%.*]] = cmpxchg i16* [[X]], i16 [[TMP22]], i16 [[TMP23]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP25]] = extractvalue { i16, i1 } [[TMP24]], 0
// CHK-C-NEXT:    [[TMP26:%.*]] = extractvalue { i16, i1 } [[TMP24]], 1
// CHK-C-NEXT:    br i1 [[TMP26]], label [[ATOMIC_EXIT25]], label [[ATOMIC_CMP23]]
// CHK-C:       atomic_cmp23:
// CHK-C-NEXT:    [[CMP24:%.*]] = icmp ugt i16 [[TMP25]], [[TMP21]]
// CHK-C-NEXT:    br i1 [[CMP24]], label [[ATOMIC_CONT21]], label [[ATOMIC_EXIT25]]
// CHK-C:       atomic_exit25:
// CHK-C-NEXT:    [[TMP27:%.*]] = load i16, i16* [[ATMP19]], align 2
// CHK-C-NEXT:    [[TMP28:%.*]] = load i16, i16* [[D]], align 2
// CHK-C-NEXT:    [[TMP29:%.*]] = load i16, i16* [[E]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD26:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD26]], i16* [[ATMP27]], align 2
// CHK-C-NEXT:    [[CMP28:%.*]] = icmp eq i16 [[ATOMIC_LOAD26]], [[TMP29]]
// CHK-C-NEXT:    br i1 [[CMP28]], label [[ATOMIC_CONT29:%.*]], label [[ATOMIC_EXIT33:%.*]]
// CHK-C:       atomic_cont29:
// CHK-C-NEXT:    [[TMP30:%.*]] = phi i16 [ [[ATOMIC_LOAD26]], [[ATOMIC_EXIT25]] ], [ [[TMP33:%.*]], [[ATOMIC_CMP31:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP30]], i16* [[ATMP27]], align 2
// CHK-C-NEXT:    store i16 [[TMP28]], i16* [[ATOMIC_TEMP30]], align 2
// CHK-C-NEXT:    [[TMP31:%.*]] = load i16, i16* [[ATOMIC_TEMP30]], align 2
// CHK-C-NEXT:    [[TMP32:%.*]] = cmpxchg i16* [[X]], i16 [[TMP30]], i16 [[TMP31]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP33]] = extractvalue { i16, i1 } [[TMP32]], 0
// CHK-C-NEXT:    [[TMP34:%.*]] = extractvalue { i16, i1 } [[TMP32]], 1
// CHK-C-NEXT:    br i1 [[TMP34]], label [[ATOMIC_EXIT33]], label [[ATOMIC_CMP31]]
// CHK-C:       atomic_cmp31:
// CHK-C-NEXT:    [[CMP32:%.*]] = icmp eq i16 [[TMP33]], [[TMP29]]
// CHK-C-NEXT:    br i1 [[CMP32]], label [[ATOMIC_CONT29]], label [[ATOMIC_EXIT33]]
// CHK-C:       atomic_exit33:
// CHK-C-NEXT:    [[TMP35:%.*]] = load i16, i16* [[ATMP27]], align 2
// CHK-C-NEXT:    [[TMP36:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD34:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD34]], i16* [[ATMP35]], align 2
// CHK-C-NEXT:    [[CMP36:%.*]] = icmp ugt i16 [[ATOMIC_LOAD34]], [[TMP36]]
// CHK-C-NEXT:    br i1 [[CMP36]], label [[ATOMIC_CONT37:%.*]], label [[ATOMIC_EXIT41:%.*]]
// CHK-C:       atomic_cont37:
// CHK-C-NEXT:    [[TMP37:%.*]] = phi i16 [ [[ATOMIC_LOAD34]], [[ATOMIC_EXIT33]] ], [ [[TMP40:%.*]], [[ATOMIC_CMP39:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP37]], i16* [[ATMP35]], align 2
// CHK-C-NEXT:    store i16 [[TMP36]], i16* [[ATOMIC_TEMP38]], align 2
// CHK-C-NEXT:    [[TMP38:%.*]] = load i16, i16* [[ATOMIC_TEMP38]], align 2
// CHK-C-NEXT:    [[TMP39:%.*]] = cmpxchg i16* [[X]], i16 [[TMP37]], i16 [[TMP38]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP40]] = extractvalue { i16, i1 } [[TMP39]], 0
// CHK-C-NEXT:    [[TMP41:%.*]] = extractvalue { i16, i1 } [[TMP39]], 1
// CHK-C-NEXT:    br i1 [[TMP41]], label [[ATOMIC_EXIT41]], label [[ATOMIC_CMP39]]
// CHK-C:       atomic_cmp39:
// CHK-C-NEXT:    [[CMP40:%.*]] = icmp ugt i16 [[TMP40]], [[TMP36]]
// CHK-C-NEXT:    br i1 [[CMP40]], label [[ATOMIC_CONT37]], label [[ATOMIC_EXIT41]]
// CHK-C:       atomic_exit41:
// CHK-C-NEXT:    [[TMP42:%.*]] = load i16, i16* [[ATMP35]], align 2
// CHK-C-NEXT:    [[TMP43:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD42:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD42]], i16* [[ATMP43]], align 2
// CHK-C-NEXT:    [[CMP44:%.*]] = icmp ult i16 [[ATOMIC_LOAD42]], [[TMP43]]
// CHK-C-NEXT:    br i1 [[CMP44]], label [[ATOMIC_CONT45:%.*]], label [[ATOMIC_EXIT49:%.*]]
// CHK-C:       atomic_cont45:
// CHK-C-NEXT:    [[TMP44:%.*]] = phi i16 [ [[ATOMIC_LOAD42]], [[ATOMIC_EXIT41]] ], [ [[TMP47:%.*]], [[ATOMIC_CMP47:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP44]], i16* [[ATMP43]], align 2
// CHK-C-NEXT:    store i16 [[TMP43]], i16* [[ATOMIC_TEMP46]], align 2
// CHK-C-NEXT:    [[TMP45:%.*]] = load i16, i16* [[ATOMIC_TEMP46]], align 2
// CHK-C-NEXT:    [[TMP46:%.*]] = cmpxchg i16* [[X]], i16 [[TMP44]], i16 [[TMP45]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP47]] = extractvalue { i16, i1 } [[TMP46]], 0
// CHK-C-NEXT:    [[TMP48:%.*]] = extractvalue { i16, i1 } [[TMP46]], 1
// CHK-C-NEXT:    br i1 [[TMP48]], label [[ATOMIC_EXIT49]], label [[ATOMIC_CMP47]]
// CHK-C:       atomic_cmp47:
// CHK-C-NEXT:    [[CMP48:%.*]] = icmp ult i16 [[TMP47]], [[TMP43]]
// CHK-C-NEXT:    br i1 [[CMP48]], label [[ATOMIC_CONT45]], label [[ATOMIC_EXIT49]]
// CHK-C:       atomic_exit49:
// CHK-C-NEXT:    [[TMP49:%.*]] = load i16, i16* [[ATMP43]], align 2
// CHK-C-NEXT:    [[TMP50:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD50:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD50]], i16* [[ATMP51]], align 2
// CHK-C-NEXT:    [[CMP52:%.*]] = icmp ult i16 [[ATOMIC_LOAD50]], [[TMP50]]
// CHK-C-NEXT:    br i1 [[CMP52]], label [[ATOMIC_CONT53:%.*]], label [[ATOMIC_EXIT57:%.*]]
// CHK-C:       atomic_cont53:
// CHK-C-NEXT:    [[TMP51:%.*]] = phi i16 [ [[ATOMIC_LOAD50]], [[ATOMIC_EXIT49]] ], [ [[TMP54:%.*]], [[ATOMIC_CMP55:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP51]], i16* [[ATMP51]], align 2
// CHK-C-NEXT:    store i16 [[TMP50]], i16* [[ATOMIC_TEMP54]], align 2
// CHK-C-NEXT:    [[TMP52:%.*]] = load i16, i16* [[ATOMIC_TEMP54]], align 2
// CHK-C-NEXT:    [[TMP53:%.*]] = cmpxchg i16* [[X]], i16 [[TMP51]], i16 [[TMP52]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP54]] = extractvalue { i16, i1 } [[TMP53]], 0
// CHK-C-NEXT:    [[TMP55:%.*]] = extractvalue { i16, i1 } [[TMP53]], 1
// CHK-C-NEXT:    br i1 [[TMP55]], label [[ATOMIC_EXIT57]], label [[ATOMIC_CMP55]]
// CHK-C:       atomic_cmp55:
// CHK-C-NEXT:    [[CMP56:%.*]] = icmp ult i16 [[TMP54]], [[TMP50]]
// CHK-C-NEXT:    br i1 [[CMP56]], label [[ATOMIC_CONT53]], label [[ATOMIC_EXIT57]]
// CHK-C:       atomic_exit57:
// CHK-C-NEXT:    [[TMP56:%.*]] = load i16, i16* [[ATMP51]], align 2
// CHK-C-NEXT:    [[TMP57:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD58:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD58]], i16* [[ATMP59]], align 2
// CHK-C-NEXT:    [[CMP60:%.*]] = icmp ugt i16 [[ATOMIC_LOAD58]], [[TMP57]]
// CHK-C-NEXT:    br i1 [[CMP60]], label [[ATOMIC_CONT61:%.*]], label [[ATOMIC_EXIT65:%.*]]
// CHK-C:       atomic_cont61:
// CHK-C-NEXT:    [[TMP58:%.*]] = phi i16 [ [[ATOMIC_LOAD58]], [[ATOMIC_EXIT57]] ], [ [[TMP61:%.*]], [[ATOMIC_CMP63:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP58]], i16* [[ATMP59]], align 2
// CHK-C-NEXT:    store i16 [[TMP57]], i16* [[ATOMIC_TEMP62]], align 2
// CHK-C-NEXT:    [[TMP59:%.*]] = load i16, i16* [[ATOMIC_TEMP62]], align 2
// CHK-C-NEXT:    [[TMP60:%.*]] = cmpxchg i16* [[X]], i16 [[TMP58]], i16 [[TMP59]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP61]] = extractvalue { i16, i1 } [[TMP60]], 0
// CHK-C-NEXT:    [[TMP62:%.*]] = extractvalue { i16, i1 } [[TMP60]], 1
// CHK-C-NEXT:    br i1 [[TMP62]], label [[ATOMIC_EXIT65]], label [[ATOMIC_CMP63]]
// CHK-C:       atomic_cmp63:
// CHK-C-NEXT:    [[CMP64:%.*]] = icmp ugt i16 [[TMP61]], [[TMP57]]
// CHK-C-NEXT:    br i1 [[CMP64]], label [[ATOMIC_CONT61]], label [[ATOMIC_EXIT65]]
// CHK-C:       atomic_exit65:
// CHK-C-NEXT:    [[TMP63:%.*]] = load i16, i16* [[ATMP59]], align 2
// CHK-C-NEXT:    [[TMP64:%.*]] = load i16, i16* [[D]], align 2
// CHK-C-NEXT:    [[TMP65:%.*]] = load i16, i16* [[E]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD66:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD66]], i16* [[ATMP67]], align 2
// CHK-C-NEXT:    [[CMP68:%.*]] = icmp eq i16 [[ATOMIC_LOAD66]], [[TMP65]]
// CHK-C-NEXT:    br i1 [[CMP68]], label [[ATOMIC_CONT69:%.*]], label [[ATOMIC_EXIT73:%.*]]
// CHK-C:       atomic_cont69:
// CHK-C-NEXT:    [[TMP66:%.*]] = phi i16 [ [[ATOMIC_LOAD66]], [[ATOMIC_EXIT65]] ], [ [[TMP69:%.*]], [[ATOMIC_CMP71:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP66]], i16* [[ATMP67]], align 2
// CHK-C-NEXT:    store i16 [[TMP64]], i16* [[ATOMIC_TEMP70]], align 2
// CHK-C-NEXT:    [[TMP67:%.*]] = load i16, i16* [[ATOMIC_TEMP70]], align 2
// CHK-C-NEXT:    [[TMP68:%.*]] = cmpxchg i16* [[X]], i16 [[TMP66]], i16 [[TMP67]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP69]] = extractvalue { i16, i1 } [[TMP68]], 0
// CHK-C-NEXT:    [[TMP70:%.*]] = extractvalue { i16, i1 } [[TMP68]], 1
// CHK-C-NEXT:    br i1 [[TMP70]], label [[ATOMIC_EXIT73]], label [[ATOMIC_CMP71]]
// CHK-C:       atomic_cmp71:
// CHK-C-NEXT:    [[CMP72:%.*]] = icmp eq i16 [[TMP69]], [[TMP65]]
// CHK-C-NEXT:    br i1 [[CMP72]], label [[ATOMIC_CONT69]], label [[ATOMIC_EXIT73]]
// CHK-C:       atomic_exit73:
// CHK-C-NEXT:    [[TMP71:%.*]] = load i16, i16* [[ATMP67]], align 2
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z19test_unsigned_shortv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[X:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP3:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATOMIC_TEMP6:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP11:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATOMIC_TEMP14:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP19:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATOMIC_TEMP22:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP27:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATOMIC_TEMP30:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP35:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATOMIC_TEMP38:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP43:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATOMIC_TEMP46:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP51:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATOMIC_TEMP54:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP59:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATOMIC_TEMP62:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP67:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATOMIC_TEMP70:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD]], i16* [[TMP]], align 2
// CHK-CXX-NEXT:    [[CMP:%.*]] = icmp ugt i16 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP1:%.*]] = phi i16 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP1]], i16* [[TMP]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP0]], i16* [[ATOMIC_TEMP]], align 2
// CHK-CXX-NEXT:    [[TMP2:%.*]] = load i16, i16* [[ATOMIC_TEMP]], align 2
// CHK-CXX-NEXT:    [[TMP3:%.*]] = cmpxchg i16* [[X]], i16 [[TMP1]], i16 [[TMP2]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP4]] = extractvalue { i16, i1 } [[TMP3]], 0
// CHK-CXX-NEXT:    [[TMP5:%.*]] = extractvalue { i16, i1 } [[TMP3]], 1
// CHK-CXX-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    [[CMP1:%.*]] = icmp ugt i16 [[TMP4]], [[TMP0]]
// CHK-CXX-NEXT:    br i1 [[CMP1]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP6:%.*]] = load i16, i16* [[TMP]], align 2
// CHK-CXX-NEXT:    [[TMP7:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD2:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD2]], i16* [[ATMP3]], align 2
// CHK-CXX-NEXT:    [[CMP4:%.*]] = icmp ult i16 [[ATOMIC_LOAD2]], [[TMP7]]
// CHK-CXX-NEXT:    br i1 [[CMP4]], label [[ATOMIC_CONT5:%.*]], label [[ATOMIC_EXIT9:%.*]]
// CHK-CXX:       atomic_cont5:
// CHK-CXX-NEXT:    [[TMP8:%.*]] = phi i16 [ [[ATOMIC_LOAD2]], [[ATOMIC_EXIT]] ], [ [[TMP11:%.*]], [[ATOMIC_CMP7:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP8]], i16* [[ATMP3]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP7]], i16* [[ATOMIC_TEMP6]], align 2
// CHK-CXX-NEXT:    [[TMP9:%.*]] = load i16, i16* [[ATOMIC_TEMP6]], align 2
// CHK-CXX-NEXT:    [[TMP10:%.*]] = cmpxchg i16* [[X]], i16 [[TMP8]], i16 [[TMP9]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP11]] = extractvalue { i16, i1 } [[TMP10]], 0
// CHK-CXX-NEXT:    [[TMP12:%.*]] = extractvalue { i16, i1 } [[TMP10]], 1
// CHK-CXX-NEXT:    br i1 [[TMP12]], label [[ATOMIC_EXIT9]], label [[ATOMIC_CMP7]]
// CHK-CXX:       atomic_cmp7:
// CHK-CXX-NEXT:    [[CMP8:%.*]] = icmp ult i16 [[TMP11]], [[TMP7]]
// CHK-CXX-NEXT:    br i1 [[CMP8]], label [[ATOMIC_CONT5]], label [[ATOMIC_EXIT9]]
// CHK-CXX:       atomic_exit9:
// CHK-CXX-NEXT:    [[TMP13:%.*]] = load i16, i16* [[ATMP3]], align 2
// CHK-CXX-NEXT:    [[TMP14:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD10:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD10]], i16* [[ATMP11]], align 2
// CHK-CXX-NEXT:    [[CMP12:%.*]] = icmp ult i16 [[ATOMIC_LOAD10]], [[TMP14]]
// CHK-CXX-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT13:%.*]], label [[ATOMIC_EXIT17:%.*]]
// CHK-CXX:       atomic_cont13:
// CHK-CXX-NEXT:    [[TMP15:%.*]] = phi i16 [ [[ATOMIC_LOAD10]], [[ATOMIC_EXIT9]] ], [ [[TMP18:%.*]], [[ATOMIC_CMP15:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP15]], i16* [[ATMP11]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP14]], i16* [[ATOMIC_TEMP14]], align 2
// CHK-CXX-NEXT:    [[TMP16:%.*]] = load i16, i16* [[ATOMIC_TEMP14]], align 2
// CHK-CXX-NEXT:    [[TMP17:%.*]] = cmpxchg i16* [[X]], i16 [[TMP15]], i16 [[TMP16]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP18]] = extractvalue { i16, i1 } [[TMP17]], 0
// CHK-CXX-NEXT:    [[TMP19:%.*]] = extractvalue { i16, i1 } [[TMP17]], 1
// CHK-CXX-NEXT:    br i1 [[TMP19]], label [[ATOMIC_EXIT17]], label [[ATOMIC_CMP15]]
// CHK-CXX:       atomic_cmp15:
// CHK-CXX-NEXT:    [[CMP16:%.*]] = icmp ult i16 [[TMP18]], [[TMP14]]
// CHK-CXX-NEXT:    br i1 [[CMP16]], label [[ATOMIC_CONT13]], label [[ATOMIC_EXIT17]]
// CHK-CXX:       atomic_exit17:
// CHK-CXX-NEXT:    [[TMP20:%.*]] = load i16, i16* [[ATMP11]], align 2
// CHK-CXX-NEXT:    [[TMP21:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD18:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD18]], i16* [[ATMP19]], align 2
// CHK-CXX-NEXT:    [[CMP20:%.*]] = icmp ugt i16 [[ATOMIC_LOAD18]], [[TMP21]]
// CHK-CXX-NEXT:    br i1 [[CMP20]], label [[ATOMIC_CONT21:%.*]], label [[ATOMIC_EXIT25:%.*]]
// CHK-CXX:       atomic_cont21:
// CHK-CXX-NEXT:    [[TMP22:%.*]] = phi i16 [ [[ATOMIC_LOAD18]], [[ATOMIC_EXIT17]] ], [ [[TMP25:%.*]], [[ATOMIC_CMP23:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP22]], i16* [[ATMP19]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP21]], i16* [[ATOMIC_TEMP22]], align 2
// CHK-CXX-NEXT:    [[TMP23:%.*]] = load i16, i16* [[ATOMIC_TEMP22]], align 2
// CHK-CXX-NEXT:    [[TMP24:%.*]] = cmpxchg i16* [[X]], i16 [[TMP22]], i16 [[TMP23]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP25]] = extractvalue { i16, i1 } [[TMP24]], 0
// CHK-CXX-NEXT:    [[TMP26:%.*]] = extractvalue { i16, i1 } [[TMP24]], 1
// CHK-CXX-NEXT:    br i1 [[TMP26]], label [[ATOMIC_EXIT25]], label [[ATOMIC_CMP23]]
// CHK-CXX:       atomic_cmp23:
// CHK-CXX-NEXT:    [[CMP24:%.*]] = icmp ugt i16 [[TMP25]], [[TMP21]]
// CHK-CXX-NEXT:    br i1 [[CMP24]], label [[ATOMIC_CONT21]], label [[ATOMIC_EXIT25]]
// CHK-CXX:       atomic_exit25:
// CHK-CXX-NEXT:    [[TMP27:%.*]] = load i16, i16* [[ATMP19]], align 2
// CHK-CXX-NEXT:    [[TMP28:%.*]] = load i16, i16* [[D]], align 2
// CHK-CXX-NEXT:    [[TMP29:%.*]] = load i16, i16* [[E]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD26:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD26]], i16* [[ATMP27]], align 2
// CHK-CXX-NEXT:    [[CMP28:%.*]] = icmp eq i16 [[ATOMIC_LOAD26]], [[TMP29]]
// CHK-CXX-NEXT:    br i1 [[CMP28]], label [[ATOMIC_CONT29:%.*]], label [[ATOMIC_EXIT33:%.*]]
// CHK-CXX:       atomic_cont29:
// CHK-CXX-NEXT:    [[TMP30:%.*]] = phi i16 [ [[ATOMIC_LOAD26]], [[ATOMIC_EXIT25]] ], [ [[TMP33:%.*]], [[ATOMIC_CMP31:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP30]], i16* [[ATMP27]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP28]], i16* [[ATOMIC_TEMP30]], align 2
// CHK-CXX-NEXT:    [[TMP31:%.*]] = load i16, i16* [[ATOMIC_TEMP30]], align 2
// CHK-CXX-NEXT:    [[TMP32:%.*]] = cmpxchg i16* [[X]], i16 [[TMP30]], i16 [[TMP31]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP33]] = extractvalue { i16, i1 } [[TMP32]], 0
// CHK-CXX-NEXT:    [[TMP34:%.*]] = extractvalue { i16, i1 } [[TMP32]], 1
// CHK-CXX-NEXT:    br i1 [[TMP34]], label [[ATOMIC_EXIT33]], label [[ATOMIC_CMP31]]
// CHK-CXX:       atomic_cmp31:
// CHK-CXX-NEXT:    [[CMP32:%.*]] = icmp eq i16 [[TMP33]], [[TMP29]]
// CHK-CXX-NEXT:    br i1 [[CMP32]], label [[ATOMIC_CONT29]], label [[ATOMIC_EXIT33]]
// CHK-CXX:       atomic_exit33:
// CHK-CXX-NEXT:    [[TMP35:%.*]] = load i16, i16* [[ATMP27]], align 2
// CHK-CXX-NEXT:    [[TMP36:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD34:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD34]], i16* [[ATMP35]], align 2
// CHK-CXX-NEXT:    [[CMP36:%.*]] = icmp ugt i16 [[ATOMIC_LOAD34]], [[TMP36]]
// CHK-CXX-NEXT:    br i1 [[CMP36]], label [[ATOMIC_CONT37:%.*]], label [[ATOMIC_EXIT41:%.*]]
// CHK-CXX:       atomic_cont37:
// CHK-CXX-NEXT:    [[TMP37:%.*]] = phi i16 [ [[ATOMIC_LOAD34]], [[ATOMIC_EXIT33]] ], [ [[TMP40:%.*]], [[ATOMIC_CMP39:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP37]], i16* [[ATMP35]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP36]], i16* [[ATOMIC_TEMP38]], align 2
// CHK-CXX-NEXT:    [[TMP38:%.*]] = load i16, i16* [[ATOMIC_TEMP38]], align 2
// CHK-CXX-NEXT:    [[TMP39:%.*]] = cmpxchg i16* [[X]], i16 [[TMP37]], i16 [[TMP38]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP40]] = extractvalue { i16, i1 } [[TMP39]], 0
// CHK-CXX-NEXT:    [[TMP41:%.*]] = extractvalue { i16, i1 } [[TMP39]], 1
// CHK-CXX-NEXT:    br i1 [[TMP41]], label [[ATOMIC_EXIT41]], label [[ATOMIC_CMP39]]
// CHK-CXX:       atomic_cmp39:
// CHK-CXX-NEXT:    [[CMP40:%.*]] = icmp ugt i16 [[TMP40]], [[TMP36]]
// CHK-CXX-NEXT:    br i1 [[CMP40]], label [[ATOMIC_CONT37]], label [[ATOMIC_EXIT41]]
// CHK-CXX:       atomic_exit41:
// CHK-CXX-NEXT:    [[TMP42:%.*]] = load i16, i16* [[ATMP35]], align 2
// CHK-CXX-NEXT:    [[TMP43:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD42:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD42]], i16* [[ATMP43]], align 2
// CHK-CXX-NEXT:    [[CMP44:%.*]] = icmp ult i16 [[ATOMIC_LOAD42]], [[TMP43]]
// CHK-CXX-NEXT:    br i1 [[CMP44]], label [[ATOMIC_CONT45:%.*]], label [[ATOMIC_EXIT49:%.*]]
// CHK-CXX:       atomic_cont45:
// CHK-CXX-NEXT:    [[TMP44:%.*]] = phi i16 [ [[ATOMIC_LOAD42]], [[ATOMIC_EXIT41]] ], [ [[TMP47:%.*]], [[ATOMIC_CMP47:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP44]], i16* [[ATMP43]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP43]], i16* [[ATOMIC_TEMP46]], align 2
// CHK-CXX-NEXT:    [[TMP45:%.*]] = load i16, i16* [[ATOMIC_TEMP46]], align 2
// CHK-CXX-NEXT:    [[TMP46:%.*]] = cmpxchg i16* [[X]], i16 [[TMP44]], i16 [[TMP45]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP47]] = extractvalue { i16, i1 } [[TMP46]], 0
// CHK-CXX-NEXT:    [[TMP48:%.*]] = extractvalue { i16, i1 } [[TMP46]], 1
// CHK-CXX-NEXT:    br i1 [[TMP48]], label [[ATOMIC_EXIT49]], label [[ATOMIC_CMP47]]
// CHK-CXX:       atomic_cmp47:
// CHK-CXX-NEXT:    [[CMP48:%.*]] = icmp ult i16 [[TMP47]], [[TMP43]]
// CHK-CXX-NEXT:    br i1 [[CMP48]], label [[ATOMIC_CONT45]], label [[ATOMIC_EXIT49]]
// CHK-CXX:       atomic_exit49:
// CHK-CXX-NEXT:    [[TMP49:%.*]] = load i16, i16* [[ATMP43]], align 2
// CHK-CXX-NEXT:    [[TMP50:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD50:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD50]], i16* [[ATMP51]], align 2
// CHK-CXX-NEXT:    [[CMP52:%.*]] = icmp ult i16 [[ATOMIC_LOAD50]], [[TMP50]]
// CHK-CXX-NEXT:    br i1 [[CMP52]], label [[ATOMIC_CONT53:%.*]], label [[ATOMIC_EXIT57:%.*]]
// CHK-CXX:       atomic_cont53:
// CHK-CXX-NEXT:    [[TMP51:%.*]] = phi i16 [ [[ATOMIC_LOAD50]], [[ATOMIC_EXIT49]] ], [ [[TMP54:%.*]], [[ATOMIC_CMP55:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP51]], i16* [[ATMP51]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP50]], i16* [[ATOMIC_TEMP54]], align 2
// CHK-CXX-NEXT:    [[TMP52:%.*]] = load i16, i16* [[ATOMIC_TEMP54]], align 2
// CHK-CXX-NEXT:    [[TMP53:%.*]] = cmpxchg i16* [[X]], i16 [[TMP51]], i16 [[TMP52]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP54]] = extractvalue { i16, i1 } [[TMP53]], 0
// CHK-CXX-NEXT:    [[TMP55:%.*]] = extractvalue { i16, i1 } [[TMP53]], 1
// CHK-CXX-NEXT:    br i1 [[TMP55]], label [[ATOMIC_EXIT57]], label [[ATOMIC_CMP55]]
// CHK-CXX:       atomic_cmp55:
// CHK-CXX-NEXT:    [[CMP56:%.*]] = icmp ult i16 [[TMP54]], [[TMP50]]
// CHK-CXX-NEXT:    br i1 [[CMP56]], label [[ATOMIC_CONT53]], label [[ATOMIC_EXIT57]]
// CHK-CXX:       atomic_exit57:
// CHK-CXX-NEXT:    [[TMP56:%.*]] = load i16, i16* [[ATMP51]], align 2
// CHK-CXX-NEXT:    [[TMP57:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD58:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD58]], i16* [[ATMP59]], align 2
// CHK-CXX-NEXT:    [[CMP60:%.*]] = icmp ugt i16 [[ATOMIC_LOAD58]], [[TMP57]]
// CHK-CXX-NEXT:    br i1 [[CMP60]], label [[ATOMIC_CONT61:%.*]], label [[ATOMIC_EXIT65:%.*]]
// CHK-CXX:       atomic_cont61:
// CHK-CXX-NEXT:    [[TMP58:%.*]] = phi i16 [ [[ATOMIC_LOAD58]], [[ATOMIC_EXIT57]] ], [ [[TMP61:%.*]], [[ATOMIC_CMP63:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP58]], i16* [[ATMP59]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP57]], i16* [[ATOMIC_TEMP62]], align 2
// CHK-CXX-NEXT:    [[TMP59:%.*]] = load i16, i16* [[ATOMIC_TEMP62]], align 2
// CHK-CXX-NEXT:    [[TMP60:%.*]] = cmpxchg i16* [[X]], i16 [[TMP58]], i16 [[TMP59]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP61]] = extractvalue { i16, i1 } [[TMP60]], 0
// CHK-CXX-NEXT:    [[TMP62:%.*]] = extractvalue { i16, i1 } [[TMP60]], 1
// CHK-CXX-NEXT:    br i1 [[TMP62]], label [[ATOMIC_EXIT65]], label [[ATOMIC_CMP63]]
// CHK-CXX:       atomic_cmp63:
// CHK-CXX-NEXT:    [[CMP64:%.*]] = icmp ugt i16 [[TMP61]], [[TMP57]]
// CHK-CXX-NEXT:    br i1 [[CMP64]], label [[ATOMIC_CONT61]], label [[ATOMIC_EXIT65]]
// CHK-CXX:       atomic_exit65:
// CHK-CXX-NEXT:    [[TMP63:%.*]] = load i16, i16* [[ATMP59]], align 2
// CHK-CXX-NEXT:    [[TMP64:%.*]] = load i16, i16* [[D]], align 2
// CHK-CXX-NEXT:    [[TMP65:%.*]] = load i16, i16* [[E]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD66:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD66]], i16* [[ATMP67]], align 2
// CHK-CXX-NEXT:    [[CMP68:%.*]] = icmp eq i16 [[ATOMIC_LOAD66]], [[TMP65]]
// CHK-CXX-NEXT:    br i1 [[CMP68]], label [[ATOMIC_CONT69:%.*]], label [[ATOMIC_EXIT73:%.*]]
// CHK-CXX:       atomic_cont69:
// CHK-CXX-NEXT:    [[TMP66:%.*]] = phi i16 [ [[ATOMIC_LOAD66]], [[ATOMIC_EXIT65]] ], [ [[TMP69:%.*]], [[ATOMIC_CMP71:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP66]], i16* [[ATMP67]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP64]], i16* [[ATOMIC_TEMP70]], align 2
// CHK-CXX-NEXT:    [[TMP67:%.*]] = load i16, i16* [[ATOMIC_TEMP70]], align 2
// CHK-CXX-NEXT:    [[TMP68:%.*]] = cmpxchg i16* [[X]], i16 [[TMP66]], i16 [[TMP67]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP69]] = extractvalue { i16, i1 } [[TMP68]], 0
// CHK-CXX-NEXT:    [[TMP70:%.*]] = extractvalue { i16, i1 } [[TMP68]], 1
// CHK-CXX-NEXT:    br i1 [[TMP70]], label [[ATOMIC_EXIT73]], label [[ATOMIC_CMP71]]
// CHK-CXX:       atomic_cmp71:
// CHK-CXX-NEXT:    [[CMP72:%.*]] = icmp eq i16 [[TMP69]], [[TMP65]]
// CHK-CXX-NEXT:    br i1 [[CMP72]], label [[ATOMIC_CONT69]], label [[ATOMIC_EXIT73]]
// CHK-CXX:       atomic_exit73:
// CHK-CXX-NEXT:    [[TMP71:%.*]] = load i16, i16* [[ATMP67]], align 2
// CHK-CXX-NEXT:    ret void
//
void test_unsigned_short() {
    // One of each form with 'unsigned short'.
    unsigned short x, expr, d, e;

    #pragma omp atomic compare
    x = expr < x ? expr : x; // MIN

    #pragma omp atomic compare
    x = expr > x ? expr : x; // MAX

    #pragma omp atomic compare
    x = x < expr ? expr : x; // MAX

    #pragma omp atomic compare
    x = x > expr ? expr : x; // MIN

    #pragma omp atomic compare
    x = x == e ? d : x;

    #pragma omp atomic compare
    if (expr < x) { x = expr; } // MIN

    #pragma omp atomic compare
    if (expr > x) { x = expr; } // MAX

    #pragma omp atomic compare
    if (x < expr) { x = expr; } // MAX

    #pragma omp atomic compare
    if (x > expr) { x = expr; } // MIN

    #pragma omp atomic compare
    if(x == e) { x = d; }
}

// CHK-C-LABEL: @test_double(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[X:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[D:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[E:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[TMP:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP3:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP6:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP11:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP14:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP19:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP22:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP27:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP30:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP35:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP38:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP43:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP46:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP51:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP54:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP59:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP62:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP67:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP70:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[TMP0:%.*]] = load double, double* [[EXPR]], align 8
// CHK-C-NEXT:    [[TMP1:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, i64* [[TMP1]] monotonic, align 8
// CHK-C-NEXT:    [[TMP2:%.*]] = bitcast i64 [[ATOMIC_LOAD]] to double
// CHK-C-NEXT:    store double [[TMP2]], double* [[TMP]], align 8
// CHK-C-NEXT:    [[CMP:%.*]] = fcmp ogt double [[TMP2]], [[TMP0]]
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP3:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP10:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    [[TMP4:%.*]] = bitcast i64 [[TMP3]] to double
// CHK-C-NEXT:    store double [[TMP4]], double* [[TMP]], align 8
// CHK-C-NEXT:    [[TMP5:%.*]] = bitcast double* [[ATOMIC_TEMP]] to i64*
// CHK-C-NEXT:    [[TMP6:%.*]] = bitcast double [[TMP0]] to i64
// CHK-C-NEXT:    store i64 [[TMP6]], i64* [[TMP5]], align 8
// CHK-C-NEXT:    [[TMP7:%.*]] = load i64, i64* [[TMP5]], align 8
// CHK-C-NEXT:    [[TMP8:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP9:%.*]] = cmpxchg i64* [[TMP8]], i64 [[TMP3]], i64 [[TMP7]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP10]] = extractvalue { i64, i1 } [[TMP9]], 0
// CHK-C-NEXT:    [[TMP11:%.*]] = extractvalue { i64, i1 } [[TMP9]], 1
// CHK-C-NEXT:    br i1 [[TMP11]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    [[TMP12:%.*]] = bitcast i64 [[TMP10]] to double
// CHK-C-NEXT:    [[CMP1:%.*]] = fcmp ogt double [[TMP12]], [[TMP0]]
// CHK-C-NEXT:    br i1 [[CMP1]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP13:%.*]] = load double, double* [[TMP]], align 8
// CHK-C-NEXT:    [[TMP14:%.*]] = load double, double* [[EXPR]], align 8
// CHK-C-NEXT:    [[TMP15:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD2:%.*]] = load atomic i64, i64* [[TMP15]] monotonic, align 8
// CHK-C-NEXT:    [[TMP16:%.*]] = bitcast i64 [[ATOMIC_LOAD2]] to double
// CHK-C-NEXT:    store double [[TMP16]], double* [[ATMP3]], align 8
// CHK-C-NEXT:    [[CMP4:%.*]] = fcmp olt double [[TMP16]], [[TMP14]]
// CHK-C-NEXT:    br i1 [[CMP4]], label [[ATOMIC_CONT5:%.*]], label [[ATOMIC_EXIT9:%.*]]
// CHK-C:       atomic_cont5:
// CHK-C-NEXT:    [[TMP17:%.*]] = phi i64 [ [[ATOMIC_LOAD2]], [[ATOMIC_EXIT]] ], [ [[TMP24:%.*]], [[ATOMIC_CMP7:%.*]] ]
// CHK-C-NEXT:    [[TMP18:%.*]] = bitcast i64 [[TMP17]] to double
// CHK-C-NEXT:    store double [[TMP18]], double* [[ATMP3]], align 8
// CHK-C-NEXT:    [[TMP19:%.*]] = bitcast double* [[ATOMIC_TEMP6]] to i64*
// CHK-C-NEXT:    [[TMP20:%.*]] = bitcast double [[TMP14]] to i64
// CHK-C-NEXT:    store i64 [[TMP20]], i64* [[TMP19]], align 8
// CHK-C-NEXT:    [[TMP21:%.*]] = load i64, i64* [[TMP19]], align 8
// CHK-C-NEXT:    [[TMP22:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP23:%.*]] = cmpxchg i64* [[TMP22]], i64 [[TMP17]], i64 [[TMP21]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP24]] = extractvalue { i64, i1 } [[TMP23]], 0
// CHK-C-NEXT:    [[TMP25:%.*]] = extractvalue { i64, i1 } [[TMP23]], 1
// CHK-C-NEXT:    br i1 [[TMP25]], label [[ATOMIC_EXIT9]], label [[ATOMIC_CMP7]]
// CHK-C:       atomic_cmp7:
// CHK-C-NEXT:    [[TMP26:%.*]] = bitcast i64 [[TMP24]] to double
// CHK-C-NEXT:    [[CMP8:%.*]] = fcmp olt double [[TMP26]], [[TMP14]]
// CHK-C-NEXT:    br i1 [[CMP8]], label [[ATOMIC_CONT5]], label [[ATOMIC_EXIT9]]
// CHK-C:       atomic_exit9:
// CHK-C-NEXT:    [[TMP27:%.*]] = load double, double* [[ATMP3]], align 8
// CHK-C-NEXT:    [[TMP28:%.*]] = load double, double* [[EXPR]], align 8
// CHK-C-NEXT:    [[TMP29:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD10:%.*]] = load atomic i64, i64* [[TMP29]] monotonic, align 8
// CHK-C-NEXT:    [[TMP30:%.*]] = bitcast i64 [[ATOMIC_LOAD10]] to double
// CHK-C-NEXT:    store double [[TMP30]], double* [[ATMP11]], align 8
// CHK-C-NEXT:    [[CMP12:%.*]] = fcmp olt double [[TMP30]], [[TMP28]]
// CHK-C-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT13:%.*]], label [[ATOMIC_EXIT17:%.*]]
// CHK-C:       atomic_cont13:
// CHK-C-NEXT:    [[TMP31:%.*]] = phi i64 [ [[ATOMIC_LOAD10]], [[ATOMIC_EXIT9]] ], [ [[TMP38:%.*]], [[ATOMIC_CMP15:%.*]] ]
// CHK-C-NEXT:    [[TMP32:%.*]] = bitcast i64 [[TMP31]] to double
// CHK-C-NEXT:    store double [[TMP32]], double* [[ATMP11]], align 8
// CHK-C-NEXT:    [[TMP33:%.*]] = bitcast double* [[ATOMIC_TEMP14]] to i64*
// CHK-C-NEXT:    [[TMP34:%.*]] = bitcast double [[TMP28]] to i64
// CHK-C-NEXT:    store i64 [[TMP34]], i64* [[TMP33]], align 8
// CHK-C-NEXT:    [[TMP35:%.*]] = load i64, i64* [[TMP33]], align 8
// CHK-C-NEXT:    [[TMP36:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP37:%.*]] = cmpxchg i64* [[TMP36]], i64 [[TMP31]], i64 [[TMP35]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP38]] = extractvalue { i64, i1 } [[TMP37]], 0
// CHK-C-NEXT:    [[TMP39:%.*]] = extractvalue { i64, i1 } [[TMP37]], 1
// CHK-C-NEXT:    br i1 [[TMP39]], label [[ATOMIC_EXIT17]], label [[ATOMIC_CMP15]]
// CHK-C:       atomic_cmp15:
// CHK-C-NEXT:    [[TMP40:%.*]] = bitcast i64 [[TMP38]] to double
// CHK-C-NEXT:    [[CMP16:%.*]] = fcmp olt double [[TMP40]], [[TMP28]]
// CHK-C-NEXT:    br i1 [[CMP16]], label [[ATOMIC_CONT13]], label [[ATOMIC_EXIT17]]
// CHK-C:       atomic_exit17:
// CHK-C-NEXT:    [[TMP41:%.*]] = load double, double* [[ATMP11]], align 8
// CHK-C-NEXT:    [[TMP42:%.*]] = load double, double* [[EXPR]], align 8
// CHK-C-NEXT:    [[TMP43:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD18:%.*]] = load atomic i64, i64* [[TMP43]] monotonic, align 8
// CHK-C-NEXT:    [[TMP44:%.*]] = bitcast i64 [[ATOMIC_LOAD18]] to double
// CHK-C-NEXT:    store double [[TMP44]], double* [[ATMP19]], align 8
// CHK-C-NEXT:    [[CMP20:%.*]] = fcmp ogt double [[TMP44]], [[TMP42]]
// CHK-C-NEXT:    br i1 [[CMP20]], label [[ATOMIC_CONT21:%.*]], label [[ATOMIC_EXIT25:%.*]]
// CHK-C:       atomic_cont21:
// CHK-C-NEXT:    [[TMP45:%.*]] = phi i64 [ [[ATOMIC_LOAD18]], [[ATOMIC_EXIT17]] ], [ [[TMP52:%.*]], [[ATOMIC_CMP23:%.*]] ]
// CHK-C-NEXT:    [[TMP46:%.*]] = bitcast i64 [[TMP45]] to double
// CHK-C-NEXT:    store double [[TMP46]], double* [[ATMP19]], align 8
// CHK-C-NEXT:    [[TMP47:%.*]] = bitcast double* [[ATOMIC_TEMP22]] to i64*
// CHK-C-NEXT:    [[TMP48:%.*]] = bitcast double [[TMP42]] to i64
// CHK-C-NEXT:    store i64 [[TMP48]], i64* [[TMP47]], align 8
// CHK-C-NEXT:    [[TMP49:%.*]] = load i64, i64* [[TMP47]], align 8
// CHK-C-NEXT:    [[TMP50:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP51:%.*]] = cmpxchg i64* [[TMP50]], i64 [[TMP45]], i64 [[TMP49]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP52]] = extractvalue { i64, i1 } [[TMP51]], 0
// CHK-C-NEXT:    [[TMP53:%.*]] = extractvalue { i64, i1 } [[TMP51]], 1
// CHK-C-NEXT:    br i1 [[TMP53]], label [[ATOMIC_EXIT25]], label [[ATOMIC_CMP23]]
// CHK-C:       atomic_cmp23:
// CHK-C-NEXT:    [[TMP54:%.*]] = bitcast i64 [[TMP52]] to double
// CHK-C-NEXT:    [[CMP24:%.*]] = fcmp ogt double [[TMP54]], [[TMP42]]
// CHK-C-NEXT:    br i1 [[CMP24]], label [[ATOMIC_CONT21]], label [[ATOMIC_EXIT25]]
// CHK-C:       atomic_exit25:
// CHK-C-NEXT:    [[TMP55:%.*]] = load double, double* [[ATMP19]], align 8
// CHK-C-NEXT:    [[TMP56:%.*]] = load double, double* [[D]], align 8
// CHK-C-NEXT:    [[TMP57:%.*]] = load double, double* [[E]], align 8
// CHK-C-NEXT:    [[TMP58:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD26:%.*]] = load atomic i64, i64* [[TMP58]] monotonic, align 8
// CHK-C-NEXT:    [[TMP59:%.*]] = bitcast i64 [[ATOMIC_LOAD26]] to double
// CHK-C-NEXT:    store double [[TMP59]], double* [[ATMP27]], align 8
// CHK-C-NEXT:    [[TMP60:%.*]] = bitcast double [[TMP59]] to i64
// CHK-C-NEXT:    [[TMP61:%.*]] = bitcast double [[TMP57]] to i64
// CHK-C-NEXT:    [[CMP28:%.*]] = icmp eq i64 [[TMP60]], [[TMP61]]
// CHK-C-NEXT:    br i1 [[CMP28]], label [[ATOMIC_CONT29:%.*]], label [[ATOMIC_EXIT33:%.*]]
// CHK-C:       atomic_cont29:
// CHK-C-NEXT:    [[TMP62:%.*]] = phi i64 [ [[ATOMIC_LOAD26]], [[ATOMIC_EXIT25]] ], [ [[TMP69:%.*]], [[ATOMIC_CMP31:%.*]] ]
// CHK-C-NEXT:    [[TMP63:%.*]] = bitcast i64 [[TMP62]] to double
// CHK-C-NEXT:    store double [[TMP63]], double* [[ATMP27]], align 8
// CHK-C-NEXT:    [[TMP64:%.*]] = bitcast double* [[ATOMIC_TEMP30]] to i64*
// CHK-C-NEXT:    [[TMP65:%.*]] = bitcast double [[TMP56]] to i64
// CHK-C-NEXT:    store i64 [[TMP65]], i64* [[TMP64]], align 8
// CHK-C-NEXT:    [[TMP66:%.*]] = load i64, i64* [[TMP64]], align 8
// CHK-C-NEXT:    [[TMP67:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP68:%.*]] = cmpxchg i64* [[TMP67]], i64 [[TMP62]], i64 [[TMP66]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP69]] = extractvalue { i64, i1 } [[TMP68]], 0
// CHK-C-NEXT:    [[TMP70:%.*]] = extractvalue { i64, i1 } [[TMP68]], 1
// CHK-C-NEXT:    br i1 [[TMP70]], label [[ATOMIC_EXIT33]], label [[ATOMIC_CMP31]]
// CHK-C:       atomic_cmp31:
// CHK-C-NEXT:    [[TMP71:%.*]] = bitcast i64 [[TMP69]] to double
// CHK-C-NEXT:    [[TMP72:%.*]] = bitcast double [[TMP71]] to i64
// CHK-C-NEXT:    [[TMP73:%.*]] = bitcast double [[TMP57]] to i64
// CHK-C-NEXT:    [[CMP32:%.*]] = icmp eq i64 [[TMP72]], [[TMP73]]
// CHK-C-NEXT:    br i1 [[CMP32]], label [[ATOMIC_CONT29]], label [[ATOMIC_EXIT33]]
// CHK-C:       atomic_exit33:
// CHK-C-NEXT:    [[TMP74:%.*]] = load double, double* [[ATMP27]], align 8
// CHK-C-NEXT:    [[TMP75:%.*]] = load double, double* [[EXPR]], align 8
// CHK-C-NEXT:    [[TMP76:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD34:%.*]] = load atomic i64, i64* [[TMP76]] monotonic, align 8
// CHK-C-NEXT:    [[TMP77:%.*]] = bitcast i64 [[ATOMIC_LOAD34]] to double
// CHK-C-NEXT:    store double [[TMP77]], double* [[ATMP35]], align 8
// CHK-C-NEXT:    [[CMP36:%.*]] = fcmp ogt double [[TMP77]], [[TMP75]]
// CHK-C-NEXT:    br i1 [[CMP36]], label [[ATOMIC_CONT37:%.*]], label [[ATOMIC_EXIT41:%.*]]
// CHK-C:       atomic_cont37:
// CHK-C-NEXT:    [[TMP78:%.*]] = phi i64 [ [[ATOMIC_LOAD34]], [[ATOMIC_EXIT33]] ], [ [[TMP85:%.*]], [[ATOMIC_CMP39:%.*]] ]
// CHK-C-NEXT:    [[TMP79:%.*]] = bitcast i64 [[TMP78]] to double
// CHK-C-NEXT:    store double [[TMP79]], double* [[ATMP35]], align 8
// CHK-C-NEXT:    [[TMP80:%.*]] = bitcast double* [[ATOMIC_TEMP38]] to i64*
// CHK-C-NEXT:    [[TMP81:%.*]] = bitcast double [[TMP75]] to i64
// CHK-C-NEXT:    store i64 [[TMP81]], i64* [[TMP80]], align 8
// CHK-C-NEXT:    [[TMP82:%.*]] = load i64, i64* [[TMP80]], align 8
// CHK-C-NEXT:    [[TMP83:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP84:%.*]] = cmpxchg i64* [[TMP83]], i64 [[TMP78]], i64 [[TMP82]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP85]] = extractvalue { i64, i1 } [[TMP84]], 0
// CHK-C-NEXT:    [[TMP86:%.*]] = extractvalue { i64, i1 } [[TMP84]], 1
// CHK-C-NEXT:    br i1 [[TMP86]], label [[ATOMIC_EXIT41]], label [[ATOMIC_CMP39]]
// CHK-C:       atomic_cmp39:
// CHK-C-NEXT:    [[TMP87:%.*]] = bitcast i64 [[TMP85]] to double
// CHK-C-NEXT:    [[CMP40:%.*]] = fcmp ogt double [[TMP87]], [[TMP75]]
// CHK-C-NEXT:    br i1 [[CMP40]], label [[ATOMIC_CONT37]], label [[ATOMIC_EXIT41]]
// CHK-C:       atomic_exit41:
// CHK-C-NEXT:    [[TMP88:%.*]] = load double, double* [[ATMP35]], align 8
// CHK-C-NEXT:    [[TMP89:%.*]] = load double, double* [[EXPR]], align 8
// CHK-C-NEXT:    [[TMP90:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD42:%.*]] = load atomic i64, i64* [[TMP90]] monotonic, align 8
// CHK-C-NEXT:    [[TMP91:%.*]] = bitcast i64 [[ATOMIC_LOAD42]] to double
// CHK-C-NEXT:    store double [[TMP91]], double* [[ATMP43]], align 8
// CHK-C-NEXT:    [[CMP44:%.*]] = fcmp olt double [[TMP91]], [[TMP89]]
// CHK-C-NEXT:    br i1 [[CMP44]], label [[ATOMIC_CONT45:%.*]], label [[ATOMIC_EXIT49:%.*]]
// CHK-C:       atomic_cont45:
// CHK-C-NEXT:    [[TMP92:%.*]] = phi i64 [ [[ATOMIC_LOAD42]], [[ATOMIC_EXIT41]] ], [ [[TMP99:%.*]], [[ATOMIC_CMP47:%.*]] ]
// CHK-C-NEXT:    [[TMP93:%.*]] = bitcast i64 [[TMP92]] to double
// CHK-C-NEXT:    store double [[TMP93]], double* [[ATMP43]], align 8
// CHK-C-NEXT:    [[TMP94:%.*]] = bitcast double* [[ATOMIC_TEMP46]] to i64*
// CHK-C-NEXT:    [[TMP95:%.*]] = bitcast double [[TMP89]] to i64
// CHK-C-NEXT:    store i64 [[TMP95]], i64* [[TMP94]], align 8
// CHK-C-NEXT:    [[TMP96:%.*]] = load i64, i64* [[TMP94]], align 8
// CHK-C-NEXT:    [[TMP97:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP98:%.*]] = cmpxchg i64* [[TMP97]], i64 [[TMP92]], i64 [[TMP96]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP99]] = extractvalue { i64, i1 } [[TMP98]], 0
// CHK-C-NEXT:    [[TMP100:%.*]] = extractvalue { i64, i1 } [[TMP98]], 1
// CHK-C-NEXT:    br i1 [[TMP100]], label [[ATOMIC_EXIT49]], label [[ATOMIC_CMP47]]
// CHK-C:       atomic_cmp47:
// CHK-C-NEXT:    [[TMP101:%.*]] = bitcast i64 [[TMP99]] to double
// CHK-C-NEXT:    [[CMP48:%.*]] = fcmp olt double [[TMP101]], [[TMP89]]
// CHK-C-NEXT:    br i1 [[CMP48]], label [[ATOMIC_CONT45]], label [[ATOMIC_EXIT49]]
// CHK-C:       atomic_exit49:
// CHK-C-NEXT:    [[TMP102:%.*]] = load double, double* [[ATMP43]], align 8
// CHK-C-NEXT:    [[TMP103:%.*]] = load double, double* [[EXPR]], align 8
// CHK-C-NEXT:    [[TMP104:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD50:%.*]] = load atomic i64, i64* [[TMP104]] monotonic, align 8
// CHK-C-NEXT:    [[TMP105:%.*]] = bitcast i64 [[ATOMIC_LOAD50]] to double
// CHK-C-NEXT:    store double [[TMP105]], double* [[ATMP51]], align 8
// CHK-C-NEXT:    [[CMP52:%.*]] = fcmp olt double [[TMP105]], [[TMP103]]
// CHK-C-NEXT:    br i1 [[CMP52]], label [[ATOMIC_CONT53:%.*]], label [[ATOMIC_EXIT57:%.*]]
// CHK-C:       atomic_cont53:
// CHK-C-NEXT:    [[TMP106:%.*]] = phi i64 [ [[ATOMIC_LOAD50]], [[ATOMIC_EXIT49]] ], [ [[TMP113:%.*]], [[ATOMIC_CMP55:%.*]] ]
// CHK-C-NEXT:    [[TMP107:%.*]] = bitcast i64 [[TMP106]] to double
// CHK-C-NEXT:    store double [[TMP107]], double* [[ATMP51]], align 8
// CHK-C-NEXT:    [[TMP108:%.*]] = bitcast double* [[ATOMIC_TEMP54]] to i64*
// CHK-C-NEXT:    [[TMP109:%.*]] = bitcast double [[TMP103]] to i64
// CHK-C-NEXT:    store i64 [[TMP109]], i64* [[TMP108]], align 8
// CHK-C-NEXT:    [[TMP110:%.*]] = load i64, i64* [[TMP108]], align 8
// CHK-C-NEXT:    [[TMP111:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP112:%.*]] = cmpxchg i64* [[TMP111]], i64 [[TMP106]], i64 [[TMP110]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP113]] = extractvalue { i64, i1 } [[TMP112]], 0
// CHK-C-NEXT:    [[TMP114:%.*]] = extractvalue { i64, i1 } [[TMP112]], 1
// CHK-C-NEXT:    br i1 [[TMP114]], label [[ATOMIC_EXIT57]], label [[ATOMIC_CMP55]]
// CHK-C:       atomic_cmp55:
// CHK-C-NEXT:    [[TMP115:%.*]] = bitcast i64 [[TMP113]] to double
// CHK-C-NEXT:    [[CMP56:%.*]] = fcmp olt double [[TMP115]], [[TMP103]]
// CHK-C-NEXT:    br i1 [[CMP56]], label [[ATOMIC_CONT53]], label [[ATOMIC_EXIT57]]
// CHK-C:       atomic_exit57:
// CHK-C-NEXT:    [[TMP116:%.*]] = load double, double* [[ATMP51]], align 8
// CHK-C-NEXT:    [[TMP117:%.*]] = load double, double* [[EXPR]], align 8
// CHK-C-NEXT:    [[TMP118:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD58:%.*]] = load atomic i64, i64* [[TMP118]] monotonic, align 8
// CHK-C-NEXT:    [[TMP119:%.*]] = bitcast i64 [[ATOMIC_LOAD58]] to double
// CHK-C-NEXT:    store double [[TMP119]], double* [[ATMP59]], align 8
// CHK-C-NEXT:    [[CMP60:%.*]] = fcmp ogt double [[TMP119]], [[TMP117]]
// CHK-C-NEXT:    br i1 [[CMP60]], label [[ATOMIC_CONT61:%.*]], label [[ATOMIC_EXIT65:%.*]]
// CHK-C:       atomic_cont61:
// CHK-C-NEXT:    [[TMP120:%.*]] = phi i64 [ [[ATOMIC_LOAD58]], [[ATOMIC_EXIT57]] ], [ [[TMP127:%.*]], [[ATOMIC_CMP63:%.*]] ]
// CHK-C-NEXT:    [[TMP121:%.*]] = bitcast i64 [[TMP120]] to double
// CHK-C-NEXT:    store double [[TMP121]], double* [[ATMP59]], align 8
// CHK-C-NEXT:    [[TMP122:%.*]] = bitcast double* [[ATOMIC_TEMP62]] to i64*
// CHK-C-NEXT:    [[TMP123:%.*]] = bitcast double [[TMP117]] to i64
// CHK-C-NEXT:    store i64 [[TMP123]], i64* [[TMP122]], align 8
// CHK-C-NEXT:    [[TMP124:%.*]] = load i64, i64* [[TMP122]], align 8
// CHK-C-NEXT:    [[TMP125:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP126:%.*]] = cmpxchg i64* [[TMP125]], i64 [[TMP120]], i64 [[TMP124]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP127]] = extractvalue { i64, i1 } [[TMP126]], 0
// CHK-C-NEXT:    [[TMP128:%.*]] = extractvalue { i64, i1 } [[TMP126]], 1
// CHK-C-NEXT:    br i1 [[TMP128]], label [[ATOMIC_EXIT65]], label [[ATOMIC_CMP63]]
// CHK-C:       atomic_cmp63:
// CHK-C-NEXT:    [[TMP129:%.*]] = bitcast i64 [[TMP127]] to double
// CHK-C-NEXT:    [[CMP64:%.*]] = fcmp ogt double [[TMP129]], [[TMP117]]
// CHK-C-NEXT:    br i1 [[CMP64]], label [[ATOMIC_CONT61]], label [[ATOMIC_EXIT65]]
// CHK-C:       atomic_exit65:
// CHK-C-NEXT:    [[TMP130:%.*]] = load double, double* [[ATMP59]], align 8
// CHK-C-NEXT:    [[TMP131:%.*]] = load double, double* [[D]], align 8
// CHK-C-NEXT:    [[TMP132:%.*]] = load double, double* [[E]], align 8
// CHK-C-NEXT:    [[TMP133:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD66:%.*]] = load atomic i64, i64* [[TMP133]] monotonic, align 8
// CHK-C-NEXT:    [[TMP134:%.*]] = bitcast i64 [[ATOMIC_LOAD66]] to double
// CHK-C-NEXT:    store double [[TMP134]], double* [[ATMP67]], align 8
// CHK-C-NEXT:    [[TMP135:%.*]] = bitcast double [[TMP134]] to i64
// CHK-C-NEXT:    [[TMP136:%.*]] = bitcast double [[TMP132]] to i64
// CHK-C-NEXT:    [[CMP68:%.*]] = icmp eq i64 [[TMP135]], [[TMP136]]
// CHK-C-NEXT:    br i1 [[CMP68]], label [[ATOMIC_CONT69:%.*]], label [[ATOMIC_EXIT73:%.*]]
// CHK-C:       atomic_cont69:
// CHK-C-NEXT:    [[TMP137:%.*]] = phi i64 [ [[ATOMIC_LOAD66]], [[ATOMIC_EXIT65]] ], [ [[TMP144:%.*]], [[ATOMIC_CMP71:%.*]] ]
// CHK-C-NEXT:    [[TMP138:%.*]] = bitcast i64 [[TMP137]] to double
// CHK-C-NEXT:    store double [[TMP138]], double* [[ATMP67]], align 8
// CHK-C-NEXT:    [[TMP139:%.*]] = bitcast double* [[ATOMIC_TEMP70]] to i64*
// CHK-C-NEXT:    [[TMP140:%.*]] = bitcast double [[TMP131]] to i64
// CHK-C-NEXT:    store i64 [[TMP140]], i64* [[TMP139]], align 8
// CHK-C-NEXT:    [[TMP141:%.*]] = load i64, i64* [[TMP139]], align 8
// CHK-C-NEXT:    [[TMP142:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP143:%.*]] = cmpxchg i64* [[TMP142]], i64 [[TMP137]], i64 [[TMP141]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP144]] = extractvalue { i64, i1 } [[TMP143]], 0
// CHK-C-NEXT:    [[TMP145:%.*]] = extractvalue { i64, i1 } [[TMP143]], 1
// CHK-C-NEXT:    br i1 [[TMP145]], label [[ATOMIC_EXIT73]], label [[ATOMIC_CMP71]]
// CHK-C:       atomic_cmp71:
// CHK-C-NEXT:    [[TMP146:%.*]] = bitcast i64 [[TMP144]] to double
// CHK-C-NEXT:    [[TMP147:%.*]] = bitcast double [[TMP146]] to i64
// CHK-C-NEXT:    [[TMP148:%.*]] = bitcast double [[TMP132]] to i64
// CHK-C-NEXT:    [[CMP72:%.*]] = icmp eq i64 [[TMP147]], [[TMP148]]
// CHK-C-NEXT:    br i1 [[CMP72]], label [[ATOMIC_CONT69]], label [[ATOMIC_EXIT73]]
// CHK-C:       atomic_exit73:
// CHK-C-NEXT:    [[TMP149:%.*]] = load double, double* [[ATMP67]], align 8
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z11test_doublev(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[X:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[D:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[E:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP3:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP6:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP11:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP14:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP19:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP22:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP27:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP30:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP35:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP38:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP43:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP46:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP51:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP54:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP59:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP62:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP67:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP70:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load double, double* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[TMP1:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, i64* [[TMP1]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP2:%.*]] = bitcast i64 [[ATOMIC_LOAD]] to double
// CHK-CXX-NEXT:    store double [[TMP2]], double* [[TMP]], align 8
// CHK-CXX-NEXT:    [[CMP:%.*]] = fcmp ogt double [[TMP2]], [[TMP0]]
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP3:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP10:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    [[TMP4:%.*]] = bitcast i64 [[TMP3]] to double
// CHK-CXX-NEXT:    store double [[TMP4]], double* [[TMP]], align 8
// CHK-CXX-NEXT:    [[TMP5:%.*]] = bitcast double* [[ATOMIC_TEMP]] to i64*
// CHK-CXX-NEXT:    [[TMP6:%.*]] = bitcast double [[TMP0]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP6]], i64* [[TMP5]], align 8
// CHK-CXX-NEXT:    [[TMP7:%.*]] = load i64, i64* [[TMP5]], align 8
// CHK-CXX-NEXT:    [[TMP8:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP9:%.*]] = cmpxchg i64* [[TMP8]], i64 [[TMP3]], i64 [[TMP7]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP10]] = extractvalue { i64, i1 } [[TMP9]], 0
// CHK-CXX-NEXT:    [[TMP11:%.*]] = extractvalue { i64, i1 } [[TMP9]], 1
// CHK-CXX-NEXT:    br i1 [[TMP11]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    [[TMP12:%.*]] = bitcast i64 [[TMP10]] to double
// CHK-CXX-NEXT:    [[CMP1:%.*]] = fcmp ogt double [[TMP12]], [[TMP0]]
// CHK-CXX-NEXT:    br i1 [[CMP1]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP13:%.*]] = load double, double* [[TMP]], align 8
// CHK-CXX-NEXT:    [[TMP14:%.*]] = load double, double* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[TMP15:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD2:%.*]] = load atomic i64, i64* [[TMP15]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP16:%.*]] = bitcast i64 [[ATOMIC_LOAD2]] to double
// CHK-CXX-NEXT:    store double [[TMP16]], double* [[ATMP3]], align 8
// CHK-CXX-NEXT:    [[CMP4:%.*]] = fcmp olt double [[TMP16]], [[TMP14]]
// CHK-CXX-NEXT:    br i1 [[CMP4]], label [[ATOMIC_CONT5:%.*]], label [[ATOMIC_EXIT9:%.*]]
// CHK-CXX:       atomic_cont5:
// CHK-CXX-NEXT:    [[TMP17:%.*]] = phi i64 [ [[ATOMIC_LOAD2]], [[ATOMIC_EXIT]] ], [ [[TMP24:%.*]], [[ATOMIC_CMP7:%.*]] ]
// CHK-CXX-NEXT:    [[TMP18:%.*]] = bitcast i64 [[TMP17]] to double
// CHK-CXX-NEXT:    store double [[TMP18]], double* [[ATMP3]], align 8
// CHK-CXX-NEXT:    [[TMP19:%.*]] = bitcast double* [[ATOMIC_TEMP6]] to i64*
// CHK-CXX-NEXT:    [[TMP20:%.*]] = bitcast double [[TMP14]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP20]], i64* [[TMP19]], align 8
// CHK-CXX-NEXT:    [[TMP21:%.*]] = load i64, i64* [[TMP19]], align 8
// CHK-CXX-NEXT:    [[TMP22:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP23:%.*]] = cmpxchg i64* [[TMP22]], i64 [[TMP17]], i64 [[TMP21]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP24]] = extractvalue { i64, i1 } [[TMP23]], 0
// CHK-CXX-NEXT:    [[TMP25:%.*]] = extractvalue { i64, i1 } [[TMP23]], 1
// CHK-CXX-NEXT:    br i1 [[TMP25]], label [[ATOMIC_EXIT9]], label [[ATOMIC_CMP7]]
// CHK-CXX:       atomic_cmp7:
// CHK-CXX-NEXT:    [[TMP26:%.*]] = bitcast i64 [[TMP24]] to double
// CHK-CXX-NEXT:    [[CMP8:%.*]] = fcmp olt double [[TMP26]], [[TMP14]]
// CHK-CXX-NEXT:    br i1 [[CMP8]], label [[ATOMIC_CONT5]], label [[ATOMIC_EXIT9]]
// CHK-CXX:       atomic_exit9:
// CHK-CXX-NEXT:    [[TMP27:%.*]] = load double, double* [[ATMP3]], align 8
// CHK-CXX-NEXT:    [[TMP28:%.*]] = load double, double* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[TMP29:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD10:%.*]] = load atomic i64, i64* [[TMP29]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP30:%.*]] = bitcast i64 [[ATOMIC_LOAD10]] to double
// CHK-CXX-NEXT:    store double [[TMP30]], double* [[ATMP11]], align 8
// CHK-CXX-NEXT:    [[CMP12:%.*]] = fcmp olt double [[TMP30]], [[TMP28]]
// CHK-CXX-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT13:%.*]], label [[ATOMIC_EXIT17:%.*]]
// CHK-CXX:       atomic_cont13:
// CHK-CXX-NEXT:    [[TMP31:%.*]] = phi i64 [ [[ATOMIC_LOAD10]], [[ATOMIC_EXIT9]] ], [ [[TMP38:%.*]], [[ATOMIC_CMP15:%.*]] ]
// CHK-CXX-NEXT:    [[TMP32:%.*]] = bitcast i64 [[TMP31]] to double
// CHK-CXX-NEXT:    store double [[TMP32]], double* [[ATMP11]], align 8
// CHK-CXX-NEXT:    [[TMP33:%.*]] = bitcast double* [[ATOMIC_TEMP14]] to i64*
// CHK-CXX-NEXT:    [[TMP34:%.*]] = bitcast double [[TMP28]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP34]], i64* [[TMP33]], align 8
// CHK-CXX-NEXT:    [[TMP35:%.*]] = load i64, i64* [[TMP33]], align 8
// CHK-CXX-NEXT:    [[TMP36:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP37:%.*]] = cmpxchg i64* [[TMP36]], i64 [[TMP31]], i64 [[TMP35]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP38]] = extractvalue { i64, i1 } [[TMP37]], 0
// CHK-CXX-NEXT:    [[TMP39:%.*]] = extractvalue { i64, i1 } [[TMP37]], 1
// CHK-CXX-NEXT:    br i1 [[TMP39]], label [[ATOMIC_EXIT17]], label [[ATOMIC_CMP15]]
// CHK-CXX:       atomic_cmp15:
// CHK-CXX-NEXT:    [[TMP40:%.*]] = bitcast i64 [[TMP38]] to double
// CHK-CXX-NEXT:    [[CMP16:%.*]] = fcmp olt double [[TMP40]], [[TMP28]]
// CHK-CXX-NEXT:    br i1 [[CMP16]], label [[ATOMIC_CONT13]], label [[ATOMIC_EXIT17]]
// CHK-CXX:       atomic_exit17:
// CHK-CXX-NEXT:    [[TMP41:%.*]] = load double, double* [[ATMP11]], align 8
// CHK-CXX-NEXT:    [[TMP42:%.*]] = load double, double* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[TMP43:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD18:%.*]] = load atomic i64, i64* [[TMP43]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP44:%.*]] = bitcast i64 [[ATOMIC_LOAD18]] to double
// CHK-CXX-NEXT:    store double [[TMP44]], double* [[ATMP19]], align 8
// CHK-CXX-NEXT:    [[CMP20:%.*]] = fcmp ogt double [[TMP44]], [[TMP42]]
// CHK-CXX-NEXT:    br i1 [[CMP20]], label [[ATOMIC_CONT21:%.*]], label [[ATOMIC_EXIT25:%.*]]
// CHK-CXX:       atomic_cont21:
// CHK-CXX-NEXT:    [[TMP45:%.*]] = phi i64 [ [[ATOMIC_LOAD18]], [[ATOMIC_EXIT17]] ], [ [[TMP52:%.*]], [[ATOMIC_CMP23:%.*]] ]
// CHK-CXX-NEXT:    [[TMP46:%.*]] = bitcast i64 [[TMP45]] to double
// CHK-CXX-NEXT:    store double [[TMP46]], double* [[ATMP19]], align 8
// CHK-CXX-NEXT:    [[TMP47:%.*]] = bitcast double* [[ATOMIC_TEMP22]] to i64*
// CHK-CXX-NEXT:    [[TMP48:%.*]] = bitcast double [[TMP42]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP48]], i64* [[TMP47]], align 8
// CHK-CXX-NEXT:    [[TMP49:%.*]] = load i64, i64* [[TMP47]], align 8
// CHK-CXX-NEXT:    [[TMP50:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP51:%.*]] = cmpxchg i64* [[TMP50]], i64 [[TMP45]], i64 [[TMP49]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP52]] = extractvalue { i64, i1 } [[TMP51]], 0
// CHK-CXX-NEXT:    [[TMP53:%.*]] = extractvalue { i64, i1 } [[TMP51]], 1
// CHK-CXX-NEXT:    br i1 [[TMP53]], label [[ATOMIC_EXIT25]], label [[ATOMIC_CMP23]]
// CHK-CXX:       atomic_cmp23:
// CHK-CXX-NEXT:    [[TMP54:%.*]] = bitcast i64 [[TMP52]] to double
// CHK-CXX-NEXT:    [[CMP24:%.*]] = fcmp ogt double [[TMP54]], [[TMP42]]
// CHK-CXX-NEXT:    br i1 [[CMP24]], label [[ATOMIC_CONT21]], label [[ATOMIC_EXIT25]]
// CHK-CXX:       atomic_exit25:
// CHK-CXX-NEXT:    [[TMP55:%.*]] = load double, double* [[ATMP19]], align 8
// CHK-CXX-NEXT:    [[TMP56:%.*]] = load double, double* [[D]], align 8
// CHK-CXX-NEXT:    [[TMP57:%.*]] = load double, double* [[E]], align 8
// CHK-CXX-NEXT:    [[TMP58:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD26:%.*]] = load atomic i64, i64* [[TMP58]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP59:%.*]] = bitcast i64 [[ATOMIC_LOAD26]] to double
// CHK-CXX-NEXT:    store double [[TMP59]], double* [[ATMP27]], align 8
// CHK-CXX-NEXT:    [[TMP60:%.*]] = bitcast double [[TMP59]] to i64
// CHK-CXX-NEXT:    [[TMP61:%.*]] = bitcast double [[TMP57]] to i64
// CHK-CXX-NEXT:    [[CMP28:%.*]] = icmp eq i64 [[TMP60]], [[TMP61]]
// CHK-CXX-NEXT:    br i1 [[CMP28]], label [[ATOMIC_CONT29:%.*]], label [[ATOMIC_EXIT33:%.*]]
// CHK-CXX:       atomic_cont29:
// CHK-CXX-NEXT:    [[TMP62:%.*]] = phi i64 [ [[ATOMIC_LOAD26]], [[ATOMIC_EXIT25]] ], [ [[TMP69:%.*]], [[ATOMIC_CMP31:%.*]] ]
// CHK-CXX-NEXT:    [[TMP63:%.*]] = bitcast i64 [[TMP62]] to double
// CHK-CXX-NEXT:    store double [[TMP63]], double* [[ATMP27]], align 8
// CHK-CXX-NEXT:    [[TMP64:%.*]] = bitcast double* [[ATOMIC_TEMP30]] to i64*
// CHK-CXX-NEXT:    [[TMP65:%.*]] = bitcast double [[TMP56]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP65]], i64* [[TMP64]], align 8
// CHK-CXX-NEXT:    [[TMP66:%.*]] = load i64, i64* [[TMP64]], align 8
// CHK-CXX-NEXT:    [[TMP67:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP68:%.*]] = cmpxchg i64* [[TMP67]], i64 [[TMP62]], i64 [[TMP66]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP69]] = extractvalue { i64, i1 } [[TMP68]], 0
// CHK-CXX-NEXT:    [[TMP70:%.*]] = extractvalue { i64, i1 } [[TMP68]], 1
// CHK-CXX-NEXT:    br i1 [[TMP70]], label [[ATOMIC_EXIT33]], label [[ATOMIC_CMP31]]
// CHK-CXX:       atomic_cmp31:
// CHK-CXX-NEXT:    [[TMP71:%.*]] = bitcast i64 [[TMP69]] to double
// CHK-CXX-NEXT:    [[TMP72:%.*]] = bitcast double [[TMP71]] to i64
// CHK-CXX-NEXT:    [[TMP73:%.*]] = bitcast double [[TMP57]] to i64
// CHK-CXX-NEXT:    [[CMP32:%.*]] = icmp eq i64 [[TMP72]], [[TMP73]]
// CHK-CXX-NEXT:    br i1 [[CMP32]], label [[ATOMIC_CONT29]], label [[ATOMIC_EXIT33]]
// CHK-CXX:       atomic_exit33:
// CHK-CXX-NEXT:    [[TMP74:%.*]] = load double, double* [[ATMP27]], align 8
// CHK-CXX-NEXT:    [[TMP75:%.*]] = load double, double* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[TMP76:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD34:%.*]] = load atomic i64, i64* [[TMP76]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP77:%.*]] = bitcast i64 [[ATOMIC_LOAD34]] to double
// CHK-CXX-NEXT:    store double [[TMP77]], double* [[ATMP35]], align 8
// CHK-CXX-NEXT:    [[CMP36:%.*]] = fcmp ogt double [[TMP77]], [[TMP75]]
// CHK-CXX-NEXT:    br i1 [[CMP36]], label [[ATOMIC_CONT37:%.*]], label [[ATOMIC_EXIT41:%.*]]
// CHK-CXX:       atomic_cont37:
// CHK-CXX-NEXT:    [[TMP78:%.*]] = phi i64 [ [[ATOMIC_LOAD34]], [[ATOMIC_EXIT33]] ], [ [[TMP85:%.*]], [[ATOMIC_CMP39:%.*]] ]
// CHK-CXX-NEXT:    [[TMP79:%.*]] = bitcast i64 [[TMP78]] to double
// CHK-CXX-NEXT:    store double [[TMP79]], double* [[ATMP35]], align 8
// CHK-CXX-NEXT:    [[TMP80:%.*]] = bitcast double* [[ATOMIC_TEMP38]] to i64*
// CHK-CXX-NEXT:    [[TMP81:%.*]] = bitcast double [[TMP75]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP81]], i64* [[TMP80]], align 8
// CHK-CXX-NEXT:    [[TMP82:%.*]] = load i64, i64* [[TMP80]], align 8
// CHK-CXX-NEXT:    [[TMP83:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP84:%.*]] = cmpxchg i64* [[TMP83]], i64 [[TMP78]], i64 [[TMP82]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP85]] = extractvalue { i64, i1 } [[TMP84]], 0
// CHK-CXX-NEXT:    [[TMP86:%.*]] = extractvalue { i64, i1 } [[TMP84]], 1
// CHK-CXX-NEXT:    br i1 [[TMP86]], label [[ATOMIC_EXIT41]], label [[ATOMIC_CMP39]]
// CHK-CXX:       atomic_cmp39:
// CHK-CXX-NEXT:    [[TMP87:%.*]] = bitcast i64 [[TMP85]] to double
// CHK-CXX-NEXT:    [[CMP40:%.*]] = fcmp ogt double [[TMP87]], [[TMP75]]
// CHK-CXX-NEXT:    br i1 [[CMP40]], label [[ATOMIC_CONT37]], label [[ATOMIC_EXIT41]]
// CHK-CXX:       atomic_exit41:
// CHK-CXX-NEXT:    [[TMP88:%.*]] = load double, double* [[ATMP35]], align 8
// CHK-CXX-NEXT:    [[TMP89:%.*]] = load double, double* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[TMP90:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD42:%.*]] = load atomic i64, i64* [[TMP90]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP91:%.*]] = bitcast i64 [[ATOMIC_LOAD42]] to double
// CHK-CXX-NEXT:    store double [[TMP91]], double* [[ATMP43]], align 8
// CHK-CXX-NEXT:    [[CMP44:%.*]] = fcmp olt double [[TMP91]], [[TMP89]]
// CHK-CXX-NEXT:    br i1 [[CMP44]], label [[ATOMIC_CONT45:%.*]], label [[ATOMIC_EXIT49:%.*]]
// CHK-CXX:       atomic_cont45:
// CHK-CXX-NEXT:    [[TMP92:%.*]] = phi i64 [ [[ATOMIC_LOAD42]], [[ATOMIC_EXIT41]] ], [ [[TMP99:%.*]], [[ATOMIC_CMP47:%.*]] ]
// CHK-CXX-NEXT:    [[TMP93:%.*]] = bitcast i64 [[TMP92]] to double
// CHK-CXX-NEXT:    store double [[TMP93]], double* [[ATMP43]], align 8
// CHK-CXX-NEXT:    [[TMP94:%.*]] = bitcast double* [[ATOMIC_TEMP46]] to i64*
// CHK-CXX-NEXT:    [[TMP95:%.*]] = bitcast double [[TMP89]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP95]], i64* [[TMP94]], align 8
// CHK-CXX-NEXT:    [[TMP96:%.*]] = load i64, i64* [[TMP94]], align 8
// CHK-CXX-NEXT:    [[TMP97:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP98:%.*]] = cmpxchg i64* [[TMP97]], i64 [[TMP92]], i64 [[TMP96]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP99]] = extractvalue { i64, i1 } [[TMP98]], 0
// CHK-CXX-NEXT:    [[TMP100:%.*]] = extractvalue { i64, i1 } [[TMP98]], 1
// CHK-CXX-NEXT:    br i1 [[TMP100]], label [[ATOMIC_EXIT49]], label [[ATOMIC_CMP47]]
// CHK-CXX:       atomic_cmp47:
// CHK-CXX-NEXT:    [[TMP101:%.*]] = bitcast i64 [[TMP99]] to double
// CHK-CXX-NEXT:    [[CMP48:%.*]] = fcmp olt double [[TMP101]], [[TMP89]]
// CHK-CXX-NEXT:    br i1 [[CMP48]], label [[ATOMIC_CONT45]], label [[ATOMIC_EXIT49]]
// CHK-CXX:       atomic_exit49:
// CHK-CXX-NEXT:    [[TMP102:%.*]] = load double, double* [[ATMP43]], align 8
// CHK-CXX-NEXT:    [[TMP103:%.*]] = load double, double* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[TMP104:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD50:%.*]] = load atomic i64, i64* [[TMP104]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP105:%.*]] = bitcast i64 [[ATOMIC_LOAD50]] to double
// CHK-CXX-NEXT:    store double [[TMP105]], double* [[ATMP51]], align 8
// CHK-CXX-NEXT:    [[CMP52:%.*]] = fcmp olt double [[TMP105]], [[TMP103]]
// CHK-CXX-NEXT:    br i1 [[CMP52]], label [[ATOMIC_CONT53:%.*]], label [[ATOMIC_EXIT57:%.*]]
// CHK-CXX:       atomic_cont53:
// CHK-CXX-NEXT:    [[TMP106:%.*]] = phi i64 [ [[ATOMIC_LOAD50]], [[ATOMIC_EXIT49]] ], [ [[TMP113:%.*]], [[ATOMIC_CMP55:%.*]] ]
// CHK-CXX-NEXT:    [[TMP107:%.*]] = bitcast i64 [[TMP106]] to double
// CHK-CXX-NEXT:    store double [[TMP107]], double* [[ATMP51]], align 8
// CHK-CXX-NEXT:    [[TMP108:%.*]] = bitcast double* [[ATOMIC_TEMP54]] to i64*
// CHK-CXX-NEXT:    [[TMP109:%.*]] = bitcast double [[TMP103]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP109]], i64* [[TMP108]], align 8
// CHK-CXX-NEXT:    [[TMP110:%.*]] = load i64, i64* [[TMP108]], align 8
// CHK-CXX-NEXT:    [[TMP111:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP112:%.*]] = cmpxchg i64* [[TMP111]], i64 [[TMP106]], i64 [[TMP110]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP113]] = extractvalue { i64, i1 } [[TMP112]], 0
// CHK-CXX-NEXT:    [[TMP114:%.*]] = extractvalue { i64, i1 } [[TMP112]], 1
// CHK-CXX-NEXT:    br i1 [[TMP114]], label [[ATOMIC_EXIT57]], label [[ATOMIC_CMP55]]
// CHK-CXX:       atomic_cmp55:
// CHK-CXX-NEXT:    [[TMP115:%.*]] = bitcast i64 [[TMP113]] to double
// CHK-CXX-NEXT:    [[CMP56:%.*]] = fcmp olt double [[TMP115]], [[TMP103]]
// CHK-CXX-NEXT:    br i1 [[CMP56]], label [[ATOMIC_CONT53]], label [[ATOMIC_EXIT57]]
// CHK-CXX:       atomic_exit57:
// CHK-CXX-NEXT:    [[TMP116:%.*]] = load double, double* [[ATMP51]], align 8
// CHK-CXX-NEXT:    [[TMP117:%.*]] = load double, double* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[TMP118:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD58:%.*]] = load atomic i64, i64* [[TMP118]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP119:%.*]] = bitcast i64 [[ATOMIC_LOAD58]] to double
// CHK-CXX-NEXT:    store double [[TMP119]], double* [[ATMP59]], align 8
// CHK-CXX-NEXT:    [[CMP60:%.*]] = fcmp ogt double [[TMP119]], [[TMP117]]
// CHK-CXX-NEXT:    br i1 [[CMP60]], label [[ATOMIC_CONT61:%.*]], label [[ATOMIC_EXIT65:%.*]]
// CHK-CXX:       atomic_cont61:
// CHK-CXX-NEXT:    [[TMP120:%.*]] = phi i64 [ [[ATOMIC_LOAD58]], [[ATOMIC_EXIT57]] ], [ [[TMP127:%.*]], [[ATOMIC_CMP63:%.*]] ]
// CHK-CXX-NEXT:    [[TMP121:%.*]] = bitcast i64 [[TMP120]] to double
// CHK-CXX-NEXT:    store double [[TMP121]], double* [[ATMP59]], align 8
// CHK-CXX-NEXT:    [[TMP122:%.*]] = bitcast double* [[ATOMIC_TEMP62]] to i64*
// CHK-CXX-NEXT:    [[TMP123:%.*]] = bitcast double [[TMP117]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP123]], i64* [[TMP122]], align 8
// CHK-CXX-NEXT:    [[TMP124:%.*]] = load i64, i64* [[TMP122]], align 8
// CHK-CXX-NEXT:    [[TMP125:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP126:%.*]] = cmpxchg i64* [[TMP125]], i64 [[TMP120]], i64 [[TMP124]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP127]] = extractvalue { i64, i1 } [[TMP126]], 0
// CHK-CXX-NEXT:    [[TMP128:%.*]] = extractvalue { i64, i1 } [[TMP126]], 1
// CHK-CXX-NEXT:    br i1 [[TMP128]], label [[ATOMIC_EXIT65]], label [[ATOMIC_CMP63]]
// CHK-CXX:       atomic_cmp63:
// CHK-CXX-NEXT:    [[TMP129:%.*]] = bitcast i64 [[TMP127]] to double
// CHK-CXX-NEXT:    [[CMP64:%.*]] = fcmp ogt double [[TMP129]], [[TMP117]]
// CHK-CXX-NEXT:    br i1 [[CMP64]], label [[ATOMIC_CONT61]], label [[ATOMIC_EXIT65]]
// CHK-CXX:       atomic_exit65:
// CHK-CXX-NEXT:    [[TMP130:%.*]] = load double, double* [[ATMP59]], align 8
// CHK-CXX-NEXT:    [[TMP131:%.*]] = load double, double* [[D]], align 8
// CHK-CXX-NEXT:    [[TMP132:%.*]] = load double, double* [[E]], align 8
// CHK-CXX-NEXT:    [[TMP133:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD66:%.*]] = load atomic i64, i64* [[TMP133]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP134:%.*]] = bitcast i64 [[ATOMIC_LOAD66]] to double
// CHK-CXX-NEXT:    store double [[TMP134]], double* [[ATMP67]], align 8
// CHK-CXX-NEXT:    [[TMP135:%.*]] = bitcast double [[TMP134]] to i64
// CHK-CXX-NEXT:    [[TMP136:%.*]] = bitcast double [[TMP132]] to i64
// CHK-CXX-NEXT:    [[CMP68:%.*]] = icmp eq i64 [[TMP135]], [[TMP136]]
// CHK-CXX-NEXT:    br i1 [[CMP68]], label [[ATOMIC_CONT69:%.*]], label [[ATOMIC_EXIT73:%.*]]
// CHK-CXX:       atomic_cont69:
// CHK-CXX-NEXT:    [[TMP137:%.*]] = phi i64 [ [[ATOMIC_LOAD66]], [[ATOMIC_EXIT65]] ], [ [[TMP144:%.*]], [[ATOMIC_CMP71:%.*]] ]
// CHK-CXX-NEXT:    [[TMP138:%.*]] = bitcast i64 [[TMP137]] to double
// CHK-CXX-NEXT:    store double [[TMP138]], double* [[ATMP67]], align 8
// CHK-CXX-NEXT:    [[TMP139:%.*]] = bitcast double* [[ATOMIC_TEMP70]] to i64*
// CHK-CXX-NEXT:    [[TMP140:%.*]] = bitcast double [[TMP131]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP140]], i64* [[TMP139]], align 8
// CHK-CXX-NEXT:    [[TMP141:%.*]] = load i64, i64* [[TMP139]], align 8
// CHK-CXX-NEXT:    [[TMP142:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP143:%.*]] = cmpxchg i64* [[TMP142]], i64 [[TMP137]], i64 [[TMP141]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP144]] = extractvalue { i64, i1 } [[TMP143]], 0
// CHK-CXX-NEXT:    [[TMP145:%.*]] = extractvalue { i64, i1 } [[TMP143]], 1
// CHK-CXX-NEXT:    br i1 [[TMP145]], label [[ATOMIC_EXIT73]], label [[ATOMIC_CMP71]]
// CHK-CXX:       atomic_cmp71:
// CHK-CXX-NEXT:    [[TMP146:%.*]] = bitcast i64 [[TMP144]] to double
// CHK-CXX-NEXT:    [[TMP147:%.*]] = bitcast double [[TMP146]] to i64
// CHK-CXX-NEXT:    [[TMP148:%.*]] = bitcast double [[TMP132]] to i64
// CHK-CXX-NEXT:    [[CMP72:%.*]] = icmp eq i64 [[TMP147]], [[TMP148]]
// CHK-CXX-NEXT:    br i1 [[CMP72]], label [[ATOMIC_CONT69]], label [[ATOMIC_EXIT73]]
// CHK-CXX:       atomic_exit73:
// CHK-CXX-NEXT:    [[TMP149:%.*]] = load double, double* [[ATMP67]], align 8
// CHK-CXX-NEXT:    ret void
//
void test_double() {
    // One of each form with 'double'.
    double x, expr, d, e;

    #pragma omp atomic compare
    x = expr < x ? expr : x; // MIN

    #pragma omp atomic compare
    x = expr > x ? expr : x; // MAX

    #pragma omp atomic compare
    x = x < expr ? expr : x; // MAX

    #pragma omp atomic compare
    x = x > expr ? expr : x; // MIN

    #pragma omp atomic compare
    x = x == e ? d : x;

    #pragma omp atomic compare
    if (expr < x) { x = expr; } // MIN

    #pragma omp atomic compare
    if (expr > x) { x = expr; } // MAX

    #pragma omp atomic compare
    if (x < expr) { x = expr; } // MAX

    #pragma omp atomic compare
    if (x > expr) { x = expr; } // MIN

    #pragma omp atomic compare
    if(x == e) { x = d; }
}

// CHK-C-LABEL: @test_bool(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[X:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[D:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[E:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[TMP:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATMP5:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP8:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATMP15:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP18:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[TMP0:%.*]] = load i8, i8* [[EXPR]], align 1
// CHK-C-NEXT:    [[TOBOOL:%.*]] = trunc i8 [[TMP0]] to i1
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i8, i8* [[X]] monotonic, align 1
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD]], i8* [[TMP]], align 1
// CHK-C-NEXT:    [[TMP1:%.*]] = trunc i8 [[ATOMIC_LOAD]] to i1
// CHK-C-NEXT:    [[CMP:%.*]] = icmp ugt i1 [[TMP1]], [[TOBOOL]]
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP2:%.*]] = phi i8 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP5:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    store i8 [[TMP2]], i8* [[TMP]], align 1
// CHK-C-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[TOBOOL]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL]], i8* [[ATOMIC_TEMP]], align 1
// CHK-C-NEXT:    [[TMP3:%.*]] = load i8, i8* [[ATOMIC_TEMP]], align 1
// CHK-C-NEXT:    [[TMP4:%.*]] = cmpxchg i8* [[X]], i8 [[TMP2]], i8 [[TMP3]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP5]] = extractvalue { i8, i1 } [[TMP4]], 0
// CHK-C-NEXT:    [[TMP6:%.*]] = extractvalue { i8, i1 } [[TMP4]], 1
// CHK-C-NEXT:    br i1 [[TMP6]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    [[TMP7:%.*]] = trunc i8 [[TMP5]] to i1
// CHK-C-NEXT:    [[CMP1:%.*]] = icmp ugt i1 [[TMP7]], [[TOBOOL]]
// CHK-C-NEXT:    br i1 [[CMP1]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP8:%.*]] = load i8, i8* [[TMP]], align 1
// CHK-C-NEXT:    [[TMP9:%.*]] = load i8, i8* [[D]], align 1
// CHK-C-NEXT:    [[TOBOOL2:%.*]] = trunc i8 [[TMP9]] to i1
// CHK-C-NEXT:    [[TMP10:%.*]] = load i8, i8* [[E]], align 1
// CHK-C-NEXT:    [[TOBOOL3:%.*]] = trunc i8 [[TMP10]] to i1
// CHK-C-NEXT:    [[ATOMIC_LOAD4:%.*]] = load atomic i8, i8* [[X]] monotonic, align 1
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD4]], i8* [[ATMP5]], align 1
// CHK-C-NEXT:    [[TMP11:%.*]] = trunc i8 [[ATOMIC_LOAD4]] to i1
// CHK-C-NEXT:    [[CMP6:%.*]] = icmp eq i1 [[TMP11]], [[TOBOOL3]]
// CHK-C-NEXT:    br i1 [[CMP6]], label [[ATOMIC_CONT7:%.*]], label [[ATOMIC_EXIT12:%.*]]
// CHK-C:       atomic_cont7:
// CHK-C-NEXT:    [[TMP12:%.*]] = phi i8 [ [[ATOMIC_LOAD4]], [[ATOMIC_EXIT]] ], [ [[TMP15:%.*]], [[ATOMIC_CMP10:%.*]] ]
// CHK-C-NEXT:    store i8 [[TMP12]], i8* [[ATMP5]], align 1
// CHK-C-NEXT:    [[FROMBOOL9:%.*]] = zext i1 [[TOBOOL2]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL9]], i8* [[ATOMIC_TEMP8]], align 1
// CHK-C-NEXT:    [[TMP13:%.*]] = load i8, i8* [[ATOMIC_TEMP8]], align 1
// CHK-C-NEXT:    [[TMP14:%.*]] = cmpxchg i8* [[X]], i8 [[TMP12]], i8 [[TMP13]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP15]] = extractvalue { i8, i1 } [[TMP14]], 0
// CHK-C-NEXT:    [[TMP16:%.*]] = extractvalue { i8, i1 } [[TMP14]], 1
// CHK-C-NEXT:    br i1 [[TMP16]], label [[ATOMIC_EXIT12]], label [[ATOMIC_CMP10]]
// CHK-C:       atomic_cmp10:
// CHK-C-NEXT:    [[TMP17:%.*]] = trunc i8 [[TMP15]] to i1
// CHK-C-NEXT:    [[CMP11:%.*]] = icmp eq i1 [[TMP17]], [[TOBOOL3]]
// CHK-C-NEXT:    br i1 [[CMP11]], label [[ATOMIC_CONT7]], label [[ATOMIC_EXIT12]]
// CHK-C:       atomic_exit12:
// CHK-C-NEXT:    [[TMP18:%.*]] = load i8, i8* [[ATMP5]], align 1
// CHK-C-NEXT:    [[TMP19:%.*]] = load i8, i8* [[EXPR]], align 1
// CHK-C-NEXT:    [[TOBOOL13:%.*]] = trunc i8 [[TMP19]] to i1
// CHK-C-NEXT:    [[ATOMIC_LOAD14:%.*]] = load atomic i8, i8* [[X]] monotonic, align 1
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD14]], i8* [[ATMP15]], align 1
// CHK-C-NEXT:    [[TMP20:%.*]] = trunc i8 [[ATOMIC_LOAD14]] to i1
// CHK-C-NEXT:    [[CMP16:%.*]] = icmp ult i1 [[TMP20]], [[TOBOOL13]]
// CHK-C-NEXT:    br i1 [[CMP16]], label [[ATOMIC_CONT17:%.*]], label [[ATOMIC_EXIT22:%.*]]
// CHK-C:       atomic_cont17:
// CHK-C-NEXT:    [[TMP21:%.*]] = phi i8 [ [[ATOMIC_LOAD14]], [[ATOMIC_EXIT12]] ], [ [[TMP24:%.*]], [[ATOMIC_CMP20:%.*]] ]
// CHK-C-NEXT:    store i8 [[TMP21]], i8* [[ATMP15]], align 1
// CHK-C-NEXT:    [[FROMBOOL19:%.*]] = zext i1 [[TOBOOL13]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL19]], i8* [[ATOMIC_TEMP18]], align 1
// CHK-C-NEXT:    [[TMP22:%.*]] = load i8, i8* [[ATOMIC_TEMP18]], align 1
// CHK-C-NEXT:    [[TMP23:%.*]] = cmpxchg i8* [[X]], i8 [[TMP21]], i8 [[TMP22]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP24]] = extractvalue { i8, i1 } [[TMP23]], 0
// CHK-C-NEXT:    [[TMP25:%.*]] = extractvalue { i8, i1 } [[TMP23]], 1
// CHK-C-NEXT:    br i1 [[TMP25]], label [[ATOMIC_EXIT22]], label [[ATOMIC_CMP20]]
// CHK-C:       atomic_cmp20:
// CHK-C-NEXT:    [[TMP26:%.*]] = trunc i8 [[TMP24]] to i1
// CHK-C-NEXT:    [[CMP21:%.*]] = icmp ult i1 [[TMP26]], [[TOBOOL13]]
// CHK-C-NEXT:    br i1 [[CMP21]], label [[ATOMIC_CONT17]], label [[ATOMIC_EXIT22]]
// CHK-C:       atomic_exit22:
// CHK-C-NEXT:    [[TMP27:%.*]] = load i8, i8* [[ATMP15]], align 1
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z9test_boolv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[X:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATMP5:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP8:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATMP15:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP18:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i8, i8* [[EXPR]], align 1
// CHK-CXX-NEXT:    [[TOBOOL:%.*]] = trunc i8 [[TMP0]] to i1
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i8, i8* [[X]] monotonic, align 1
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD]], i8* [[TMP]], align 1
// CHK-CXX-NEXT:    [[TMP1:%.*]] = trunc i8 [[ATOMIC_LOAD]] to i1
// CHK-CXX-NEXT:    [[CMP:%.*]] = icmp ugt i1 [[TMP1]], [[TOBOOL]]
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP2:%.*]] = phi i8 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP5:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    store i8 [[TMP2]], i8* [[TMP]], align 1
// CHK-CXX-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[TOBOOL]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL]], i8* [[ATOMIC_TEMP]], align 1
// CHK-CXX-NEXT:    [[TMP3:%.*]] = load i8, i8* [[ATOMIC_TEMP]], align 1
// CHK-CXX-NEXT:    [[TMP4:%.*]] = cmpxchg i8* [[X]], i8 [[TMP2]], i8 [[TMP3]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP5]] = extractvalue { i8, i1 } [[TMP4]], 0
// CHK-CXX-NEXT:    [[TMP6:%.*]] = extractvalue { i8, i1 } [[TMP4]], 1
// CHK-CXX-NEXT:    br i1 [[TMP6]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    [[TMP7:%.*]] = trunc i8 [[TMP5]] to i1
// CHK-CXX-NEXT:    [[CMP1:%.*]] = icmp ugt i1 [[TMP7]], [[TOBOOL]]
// CHK-CXX-NEXT:    br i1 [[CMP1]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP8:%.*]] = load i8, i8* [[TMP]], align 1
// CHK-CXX-NEXT:    [[TMP9:%.*]] = load i8, i8* [[D]], align 1
// CHK-CXX-NEXT:    [[TOBOOL2:%.*]] = trunc i8 [[TMP9]] to i1
// CHK-CXX-NEXT:    [[TMP10:%.*]] = load i8, i8* [[E]], align 1
// CHK-CXX-NEXT:    [[TOBOOL3:%.*]] = trunc i8 [[TMP10]] to i1
// CHK-CXX-NEXT:    [[ATOMIC_LOAD4:%.*]] = load atomic i8, i8* [[X]] monotonic, align 1
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD4]], i8* [[ATMP5]], align 1
// CHK-CXX-NEXT:    [[TMP11:%.*]] = trunc i8 [[ATOMIC_LOAD4]] to i1
// CHK-CXX-NEXT:    [[CMP6:%.*]] = icmp eq i1 [[TMP11]], [[TOBOOL3]]
// CHK-CXX-NEXT:    br i1 [[CMP6]], label [[ATOMIC_CONT7:%.*]], label [[ATOMIC_EXIT12:%.*]]
// CHK-CXX:       atomic_cont7:
// CHK-CXX-NEXT:    [[TMP12:%.*]] = phi i8 [ [[ATOMIC_LOAD4]], [[ATOMIC_EXIT]] ], [ [[TMP15:%.*]], [[ATOMIC_CMP10:%.*]] ]
// CHK-CXX-NEXT:    store i8 [[TMP12]], i8* [[ATMP5]], align 1
// CHK-CXX-NEXT:    [[FROMBOOL9:%.*]] = zext i1 [[TOBOOL2]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL9]], i8* [[ATOMIC_TEMP8]], align 1
// CHK-CXX-NEXT:    [[TMP13:%.*]] = load i8, i8* [[ATOMIC_TEMP8]], align 1
// CHK-CXX-NEXT:    [[TMP14:%.*]] = cmpxchg i8* [[X]], i8 [[TMP12]], i8 [[TMP13]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP15]] = extractvalue { i8, i1 } [[TMP14]], 0
// CHK-CXX-NEXT:    [[TMP16:%.*]] = extractvalue { i8, i1 } [[TMP14]], 1
// CHK-CXX-NEXT:    br i1 [[TMP16]], label [[ATOMIC_EXIT12]], label [[ATOMIC_CMP10]]
// CHK-CXX:       atomic_cmp10:
// CHK-CXX-NEXT:    [[TMP17:%.*]] = trunc i8 [[TMP15]] to i1
// CHK-CXX-NEXT:    [[CMP11:%.*]] = icmp eq i1 [[TMP17]], [[TOBOOL3]]
// CHK-CXX-NEXT:    br i1 [[CMP11]], label [[ATOMIC_CONT7]], label [[ATOMIC_EXIT12]]
// CHK-CXX:       atomic_exit12:
// CHK-CXX-NEXT:    [[TMP18:%.*]] = load i8, i8* [[ATMP5]], align 1
// CHK-CXX-NEXT:    [[TMP19:%.*]] = load i8, i8* [[EXPR]], align 1
// CHK-CXX-NEXT:    [[TOBOOL13:%.*]] = trunc i8 [[TMP19]] to i1
// CHK-CXX-NEXT:    [[ATOMIC_LOAD14:%.*]] = load atomic i8, i8* [[X]] monotonic, align 1
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD14]], i8* [[ATMP15]], align 1
// CHK-CXX-NEXT:    [[TMP20:%.*]] = trunc i8 [[ATOMIC_LOAD14]] to i1
// CHK-CXX-NEXT:    [[CMP16:%.*]] = icmp ult i1 [[TMP20]], [[TOBOOL13]]
// CHK-CXX-NEXT:    br i1 [[CMP16]], label [[ATOMIC_CONT17:%.*]], label [[ATOMIC_EXIT22:%.*]]
// CHK-CXX:       atomic_cont17:
// CHK-CXX-NEXT:    [[TMP21:%.*]] = phi i8 [ [[ATOMIC_LOAD14]], [[ATOMIC_EXIT12]] ], [ [[TMP24:%.*]], [[ATOMIC_CMP20:%.*]] ]
// CHK-CXX-NEXT:    store i8 [[TMP21]], i8* [[ATMP15]], align 1
// CHK-CXX-NEXT:    [[FROMBOOL19:%.*]] = zext i1 [[TOBOOL13]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL19]], i8* [[ATOMIC_TEMP18]], align 1
// CHK-CXX-NEXT:    [[TMP22:%.*]] = load i8, i8* [[ATOMIC_TEMP18]], align 1
// CHK-CXX-NEXT:    [[TMP23:%.*]] = cmpxchg i8* [[X]], i8 [[TMP21]], i8 [[TMP22]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP24]] = extractvalue { i8, i1 } [[TMP23]], 0
// CHK-CXX-NEXT:    [[TMP25:%.*]] = extractvalue { i8, i1 } [[TMP23]], 1
// CHK-CXX-NEXT:    br i1 [[TMP25]], label [[ATOMIC_EXIT22]], label [[ATOMIC_CMP20]]
// CHK-CXX:       atomic_cmp20:
// CHK-CXX-NEXT:    [[TMP26:%.*]] = trunc i8 [[TMP24]] to i1
// CHK-CXX-NEXT:    [[CMP21:%.*]] = icmp ult i1 [[TMP26]], [[TOBOOL13]]
// CHK-CXX-NEXT:    br i1 [[CMP21]], label [[ATOMIC_CONT17]], label [[ATOMIC_EXIT22]]
// CHK-CXX:       atomic_exit22:
// CHK-CXX-NEXT:    [[TMP27:%.*]] = load i8, i8* [[ATMP15]], align 1
// CHK-CXX-NEXT:    ret void
//
void test_bool() {
#ifdef __cplusplus
  bool x, expr, d, e;
#else
  _Bool x, expr, d, e;
#endif

  #pragma omp atomic compare
  x = expr < x ? expr : x; // MIN

  #pragma omp atomic compare
  x = x == e ? d : x;

  #pragma omp atomic compare
  if (x < expr) { x = expr; } // MAX
}

// CHK-C-LABEL: @test_long_long(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[X:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[D:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[E:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[TMP:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP3:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP6:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP11:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP14:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[TMP0:%.*]] = load i64, i64* [[EXPR]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, i64* [[X]] monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD]], i64* [[TMP]], align 8
// CHK-C-NEXT:    [[CMP:%.*]] = icmp sgt i64 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP1:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP1]], i64* [[TMP]], align 8
// CHK-C-NEXT:    store i64 [[TMP0]], i64* [[ATOMIC_TEMP]], align 8
// CHK-C-NEXT:    [[TMP2:%.*]] = load i64, i64* [[ATOMIC_TEMP]], align 8
// CHK-C-NEXT:    [[TMP3:%.*]] = cmpxchg i64* [[X]], i64 [[TMP1]], i64 [[TMP2]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP4]] = extractvalue { i64, i1 } [[TMP3]], 0
// CHK-C-NEXT:    [[TMP5:%.*]] = extractvalue { i64, i1 } [[TMP3]], 1
// CHK-C-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    [[CMP1:%.*]] = icmp sgt i64 [[TMP4]], [[TMP0]]
// CHK-C-NEXT:    br i1 [[CMP1]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP6:%.*]] = load i64, i64* [[TMP]], align 8
// CHK-C-NEXT:    [[TMP7:%.*]] = load i64, i64* [[D]], align 8
// CHK-C-NEXT:    [[TMP8:%.*]] = load i64, i64* [[E]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD2:%.*]] = load atomic i64, i64* [[X]] monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD2]], i64* [[ATMP3]], align 8
// CHK-C-NEXT:    [[CMP4:%.*]] = icmp eq i64 [[ATOMIC_LOAD2]], [[TMP8]]
// CHK-C-NEXT:    br i1 [[CMP4]], label [[ATOMIC_CONT5:%.*]], label [[ATOMIC_EXIT9:%.*]]
// CHK-C:       atomic_cont5:
// CHK-C-NEXT:    [[TMP9:%.*]] = phi i64 [ [[ATOMIC_LOAD2]], [[ATOMIC_EXIT]] ], [ [[TMP12:%.*]], [[ATOMIC_CMP7:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP9]], i64* [[ATMP3]], align 8
// CHK-C-NEXT:    store i64 [[TMP7]], i64* [[ATOMIC_TEMP6]], align 8
// CHK-C-NEXT:    [[TMP10:%.*]] = load i64, i64* [[ATOMIC_TEMP6]], align 8
// CHK-C-NEXT:    [[TMP11:%.*]] = cmpxchg i64* [[X]], i64 [[TMP9]], i64 [[TMP10]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP12]] = extractvalue { i64, i1 } [[TMP11]], 0
// CHK-C-NEXT:    [[TMP13:%.*]] = extractvalue { i64, i1 } [[TMP11]], 1
// CHK-C-NEXT:    br i1 [[TMP13]], label [[ATOMIC_EXIT9]], label [[ATOMIC_CMP7]]
// CHK-C:       atomic_cmp7:
// CHK-C-NEXT:    [[CMP8:%.*]] = icmp eq i64 [[TMP12]], [[TMP8]]
// CHK-C-NEXT:    br i1 [[CMP8]], label [[ATOMIC_CONT5]], label [[ATOMIC_EXIT9]]
// CHK-C:       atomic_exit9:
// CHK-C-NEXT:    [[TMP14:%.*]] = load i64, i64* [[ATMP3]], align 8
// CHK-C-NEXT:    [[TMP15:%.*]] = load i64, i64* [[EXPR]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD10:%.*]] = load atomic i64, i64* [[X]] monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD10]], i64* [[ATMP11]], align 8
// CHK-C-NEXT:    [[CMP12:%.*]] = icmp slt i64 [[ATOMIC_LOAD10]], [[TMP15]]
// CHK-C-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT13:%.*]], label [[ATOMIC_EXIT17:%.*]]
// CHK-C:       atomic_cont13:
// CHK-C-NEXT:    [[TMP16:%.*]] = phi i64 [ [[ATOMIC_LOAD10]], [[ATOMIC_EXIT9]] ], [ [[TMP19:%.*]], [[ATOMIC_CMP15:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP16]], i64* [[ATMP11]], align 8
// CHK-C-NEXT:    store i64 [[TMP15]], i64* [[ATOMIC_TEMP14]], align 8
// CHK-C-NEXT:    [[TMP17:%.*]] = load i64, i64* [[ATOMIC_TEMP14]], align 8
// CHK-C-NEXT:    [[TMP18:%.*]] = cmpxchg i64* [[X]], i64 [[TMP16]], i64 [[TMP17]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP19]] = extractvalue { i64, i1 } [[TMP18]], 0
// CHK-C-NEXT:    [[TMP20:%.*]] = extractvalue { i64, i1 } [[TMP18]], 1
// CHK-C-NEXT:    br i1 [[TMP20]], label [[ATOMIC_EXIT17]], label [[ATOMIC_CMP15]]
// CHK-C:       atomic_cmp15:
// CHK-C-NEXT:    [[CMP16:%.*]] = icmp slt i64 [[TMP19]], [[TMP15]]
// CHK-C-NEXT:    br i1 [[CMP16]], label [[ATOMIC_CONT13]], label [[ATOMIC_EXIT17]]
// CHK-C:       atomic_exit17:
// CHK-C-NEXT:    [[TMP21:%.*]] = load i64, i64* [[ATMP11]], align 8
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z14test_long_longv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[X:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP3:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP6:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP11:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP14:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i64, i64* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, i64* [[X]] monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD]], i64* [[TMP]], align 8
// CHK-CXX-NEXT:    [[CMP:%.*]] = icmp sgt i64 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP1:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP1]], i64* [[TMP]], align 8
// CHK-CXX-NEXT:    store i64 [[TMP0]], i64* [[ATOMIC_TEMP]], align 8
// CHK-CXX-NEXT:    [[TMP2:%.*]] = load i64, i64* [[ATOMIC_TEMP]], align 8
// CHK-CXX-NEXT:    [[TMP3:%.*]] = cmpxchg i64* [[X]], i64 [[TMP1]], i64 [[TMP2]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP4]] = extractvalue { i64, i1 } [[TMP3]], 0
// CHK-CXX-NEXT:    [[TMP5:%.*]] = extractvalue { i64, i1 } [[TMP3]], 1
// CHK-CXX-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    [[CMP1:%.*]] = icmp sgt i64 [[TMP4]], [[TMP0]]
// CHK-CXX-NEXT:    br i1 [[CMP1]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP6:%.*]] = load i64, i64* [[TMP]], align 8
// CHK-CXX-NEXT:    [[TMP7:%.*]] = load i64, i64* [[D]], align 8
// CHK-CXX-NEXT:    [[TMP8:%.*]] = load i64, i64* [[E]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD2:%.*]] = load atomic i64, i64* [[X]] monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD2]], i64* [[ATMP3]], align 8
// CHK-CXX-NEXT:    [[CMP4:%.*]] = icmp eq i64 [[ATOMIC_LOAD2]], [[TMP8]]
// CHK-CXX-NEXT:    br i1 [[CMP4]], label [[ATOMIC_CONT5:%.*]], label [[ATOMIC_EXIT9:%.*]]
// CHK-CXX:       atomic_cont5:
// CHK-CXX-NEXT:    [[TMP9:%.*]] = phi i64 [ [[ATOMIC_LOAD2]], [[ATOMIC_EXIT]] ], [ [[TMP12:%.*]], [[ATOMIC_CMP7:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP9]], i64* [[ATMP3]], align 8
// CHK-CXX-NEXT:    store i64 [[TMP7]], i64* [[ATOMIC_TEMP6]], align 8
// CHK-CXX-NEXT:    [[TMP10:%.*]] = load i64, i64* [[ATOMIC_TEMP6]], align 8
// CHK-CXX-NEXT:    [[TMP11:%.*]] = cmpxchg i64* [[X]], i64 [[TMP9]], i64 [[TMP10]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP12]] = extractvalue { i64, i1 } [[TMP11]], 0
// CHK-CXX-NEXT:    [[TMP13:%.*]] = extractvalue { i64, i1 } [[TMP11]], 1
// CHK-CXX-NEXT:    br i1 [[TMP13]], label [[ATOMIC_EXIT9]], label [[ATOMIC_CMP7]]
// CHK-CXX:       atomic_cmp7:
// CHK-CXX-NEXT:    [[CMP8:%.*]] = icmp eq i64 [[TMP12]], [[TMP8]]
// CHK-CXX-NEXT:    br i1 [[CMP8]], label [[ATOMIC_CONT5]], label [[ATOMIC_EXIT9]]
// CHK-CXX:       atomic_exit9:
// CHK-CXX-NEXT:    [[TMP14:%.*]] = load i64, i64* [[ATMP3]], align 8
// CHK-CXX-NEXT:    [[TMP15:%.*]] = load i64, i64* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD10:%.*]] = load atomic i64, i64* [[X]] monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD10]], i64* [[ATMP11]], align 8
// CHK-CXX-NEXT:    [[CMP12:%.*]] = icmp slt i64 [[ATOMIC_LOAD10]], [[TMP15]]
// CHK-CXX-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT13:%.*]], label [[ATOMIC_EXIT17:%.*]]
// CHK-CXX:       atomic_cont13:
// CHK-CXX-NEXT:    [[TMP16:%.*]] = phi i64 [ [[ATOMIC_LOAD10]], [[ATOMIC_EXIT9]] ], [ [[TMP19:%.*]], [[ATOMIC_CMP15:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP16]], i64* [[ATMP11]], align 8
// CHK-CXX-NEXT:    store i64 [[TMP15]], i64* [[ATOMIC_TEMP14]], align 8
// CHK-CXX-NEXT:    [[TMP17:%.*]] = load i64, i64* [[ATOMIC_TEMP14]], align 8
// CHK-CXX-NEXT:    [[TMP18:%.*]] = cmpxchg i64* [[X]], i64 [[TMP16]], i64 [[TMP17]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP19]] = extractvalue { i64, i1 } [[TMP18]], 0
// CHK-CXX-NEXT:    [[TMP20:%.*]] = extractvalue { i64, i1 } [[TMP18]], 1
// CHK-CXX-NEXT:    br i1 [[TMP20]], label [[ATOMIC_EXIT17]], label [[ATOMIC_CMP15]]
// CHK-CXX:       atomic_cmp15:
// CHK-CXX-NEXT:    [[CMP16:%.*]] = icmp slt i64 [[TMP19]], [[TMP15]]
// CHK-CXX-NEXT:    br i1 [[CMP16]], label [[ATOMIC_CONT13]], label [[ATOMIC_EXIT17]]
// CHK-CXX:       atomic_exit17:
// CHK-CXX-NEXT:    [[TMP21:%.*]] = load i64, i64* [[ATMP11]], align 8
// CHK-CXX-NEXT:    ret void
//
void test_long_long() {
  long long x, expr, d, e;

  #pragma omp atomic compare
  x = expr < x ? expr : x; // MIN

  #pragma omp atomic compare
  x = x == e ? d : x;

  #pragma omp atomic compare
  if (x < expr) { x = expr; } // MAX
}

#ifdef LIBCALLS
void test_Complex_float()
{
  _Complex float x, expr, d, e;

  #pragma omp atomic compare
  x = x == e ? d : x;
}

void test_long_double() {
  long double x, expr, d, e;

  #pragma omp atomic compare
  x = expr < x ? expr : x; // MIN

  #pragma omp atomic compare
  x = x == e ? d : x;

  #pragma omp atomic compare
  if (x < expr) { x = expr; } // MAX
}

void test_vec() {
  typedef int int4 __attribute__((__vector_size__(16)));
  int4 x;
  int expr, d, e;

  #pragma omp atomic compare
  x[1] = expr < x[1] ? expr : x[1]; // MIN

  #pragma omp atomic compare
  x[1] = x[1] == e ? d : x[1];

  #pragma omp atomic compare
  if (x[1] < expr) { x[1] = expr; } // MAX
}
#endif


struct BitFields {
  int : 32;
  int a : 31;
} bfx;

struct BitFields_packed {
  int : 32;
  int a : 31;
} __attribute__ ((__packed__)) bfx_packed;

struct BitFields2 {
  int : 31;
  int a : 1;
} bfx2;

struct BitFields2_packed {
  int : 31;
  int a : 1;
} __attribute__ ((__packed__)) bfx2_packed;

struct BitFields3 {
  int : 11;
  int a : 14;
} bfx3;

struct BitFields3_packed {
  int : 11;
  int a : 14;
} __attribute__ ((__packed__)) bfx3_packed;

struct BitFields4 {
  short : 16;
  int a: 1;
  long b : 7;
} bfx4;

struct BitFields4_packed {
  short : 16;
  int a: 1;
  long b : 7;
} __attribute__ ((__packed__)) bfx4_packed;

// CHK-C-LABEL: @test_bitfield(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[TMP:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP1:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP5:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP7:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP13:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP14:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP20:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP24:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP30:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP37:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP38:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP44:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP48:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP54:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP61:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP62:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP67:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP70:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP77:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP83:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP84:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP89:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP92:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP99:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP105:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP106:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP111:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP114:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP121:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP127:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP128:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP133:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP137:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP144:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP151:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP152:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP158:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP162:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP169:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP176:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP177:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP183:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP187:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP194:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP201:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP202:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP208:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP212:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP219:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP226:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP227:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP233:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP237:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP244:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP251:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP252:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP258:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP262:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP269:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP276:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP277:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP284:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP289:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP296:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP304:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP305:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP312:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP317:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP324:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP332:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP333:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP340:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP345:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP352:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP360:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP361:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP367:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP371:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP378:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP387:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP388:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP394:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP398:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP405:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP413:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP414:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP420:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP424:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP431:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP438:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP439:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP446:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP451:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP457:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP465:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP466:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP473:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP478:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP484:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP492:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP493:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP500:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP505:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP511:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[TMP0:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i32, i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD]], i32* [[ATOMIC_TEMP]], align 4
// CHK-C-NEXT:    [[BF_LOAD:%.*]] = load i32, i32* [[ATOMIC_TEMP]], align 4
// CHK-C-NEXT:    [[BF_SHL:%.*]] = shl i32 [[BF_LOAD]], 1
// CHK-C-NEXT:    [[BF_ASHR:%.*]] = ashr i32 [[BF_SHL]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR]], i32* [[TMP]], align 4
// CHK-C-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[BF_ASHR]], [[TMP0]]
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP1:%.*]] = phi i32 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP1]], i32* [[ATOMIC_TEMP1]], align 4
// CHK-C-NEXT:    [[BF_LOAD2:%.*]] = load i32, i32* [[ATOMIC_TEMP1]], align 4
// CHK-C-NEXT:    [[BF_SHL3:%.*]] = shl i32 [[BF_LOAD2]], 1
// CHK-C-NEXT:    [[BF_ASHR4:%.*]] = ashr i32 [[BF_SHL3]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR4]], i32* [[TMP]], align 4
// CHK-C-NEXT:    store i32 [[TMP1]], i32* [[ATOMIC_TEMP5]], align 4
// CHK-C-NEXT:    [[BF_LOAD6:%.*]] = load i32, i32* [[ATOMIC_TEMP5]], align 4
// CHK-C-NEXT:    [[BF_VALUE:%.*]] = and i32 [[TMP0]], 2147483647
// CHK-C-NEXT:    [[BF_CLEAR:%.*]] = and i32 [[BF_LOAD6]], -2147483648
// CHK-C-NEXT:    [[BF_SET:%.*]] = or i32 [[BF_CLEAR]], [[BF_VALUE]]
// CHK-C-NEXT:    store i32 [[BF_SET]], i32* [[ATOMIC_TEMP5]], align 4
// CHK-C-NEXT:    [[TMP2:%.*]] = load i32, i32* [[ATOMIC_TEMP5]], align 4
// CHK-C-NEXT:    [[TMP3:%.*]] = cmpxchg i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*), i32 [[TMP1]], i32 [[TMP2]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP4]] = extractvalue { i32, i1 } [[TMP3]], 0
// CHK-C-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i1 } [[TMP3]], 1
// CHK-C-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    store i32 [[TMP4]], i32* [[ATOMIC_TEMP7]], align 4
// CHK-C-NEXT:    [[BF_LOAD8:%.*]] = load i32, i32* [[ATOMIC_TEMP7]], align 4
// CHK-C-NEXT:    [[BF_SHL9:%.*]] = shl i32 [[BF_LOAD8]], 1
// CHK-C-NEXT:    [[BF_ASHR10:%.*]] = ashr i32 [[BF_SHL9]], 1
// CHK-C-NEXT:    [[CMP11:%.*]] = icmp sgt i32 [[BF_ASHR10]], [[TMP0]]
// CHK-C-NEXT:    br i1 [[CMP11]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP6:%.*]] = load i32, i32* [[TMP]], align 4
// CHK-C-NEXT:    [[TMP7:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP8:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD12:%.*]] = load atomic i32, i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD12]], i32* [[ATOMIC_TEMP14]], align 4
// CHK-C-NEXT:    [[BF_LOAD15:%.*]] = load i32, i32* [[ATOMIC_TEMP14]], align 4
// CHK-C-NEXT:    [[BF_SHL16:%.*]] = shl i32 [[BF_LOAD15]], 1
// CHK-C-NEXT:    [[BF_ASHR17:%.*]] = ashr i32 [[BF_SHL16]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR17]], i32* [[ATMP13]], align 4
// CHK-C-NEXT:    [[CMP18:%.*]] = icmp eq i32 [[BF_ASHR17]], [[TMP8]]
// CHK-C-NEXT:    br i1 [[CMP18]], label [[ATOMIC_CONT19:%.*]], label [[ATOMIC_EXIT35:%.*]]
// CHK-C:       atomic_cont19:
// CHK-C-NEXT:    [[TMP9:%.*]] = phi i32 [ [[ATOMIC_LOAD12]], [[ATOMIC_EXIT]] ], [ [[TMP12:%.*]], [[ATOMIC_CMP29:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP9]], i32* [[ATOMIC_TEMP20]], align 4
// CHK-C-NEXT:    [[BF_LOAD21:%.*]] = load i32, i32* [[ATOMIC_TEMP20]], align 4
// CHK-C-NEXT:    [[BF_SHL22:%.*]] = shl i32 [[BF_LOAD21]], 1
// CHK-C-NEXT:    [[BF_ASHR23:%.*]] = ashr i32 [[BF_SHL22]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR23]], i32* [[ATMP13]], align 4
// CHK-C-NEXT:    store i32 [[TMP9]], i32* [[ATOMIC_TEMP24]], align 4
// CHK-C-NEXT:    [[BF_LOAD25:%.*]] = load i32, i32* [[ATOMIC_TEMP24]], align 4
// CHK-C-NEXT:    [[BF_VALUE26:%.*]] = and i32 [[TMP7]], 2147483647
// CHK-C-NEXT:    [[BF_CLEAR27:%.*]] = and i32 [[BF_LOAD25]], -2147483648
// CHK-C-NEXT:    [[BF_SET28:%.*]] = or i32 [[BF_CLEAR27]], [[BF_VALUE26]]
// CHK-C-NEXT:    store i32 [[BF_SET28]], i32* [[ATOMIC_TEMP24]], align 4
// CHK-C-NEXT:    [[TMP10:%.*]] = load i32, i32* [[ATOMIC_TEMP24]], align 4
// CHK-C-NEXT:    [[TMP11:%.*]] = cmpxchg i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*), i32 [[TMP9]], i32 [[TMP10]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP12]] = extractvalue { i32, i1 } [[TMP11]], 0
// CHK-C-NEXT:    [[TMP13:%.*]] = extractvalue { i32, i1 } [[TMP11]], 1
// CHK-C-NEXT:    br i1 [[TMP13]], label [[ATOMIC_EXIT35]], label [[ATOMIC_CMP29]]
// CHK-C:       atomic_cmp29:
// CHK-C-NEXT:    store i32 [[TMP12]], i32* [[ATOMIC_TEMP30]], align 4
// CHK-C-NEXT:    [[BF_LOAD31:%.*]] = load i32, i32* [[ATOMIC_TEMP30]], align 4
// CHK-C-NEXT:    [[BF_SHL32:%.*]] = shl i32 [[BF_LOAD31]], 1
// CHK-C-NEXT:    [[BF_ASHR33:%.*]] = ashr i32 [[BF_SHL32]], 1
// CHK-C-NEXT:    [[CMP34:%.*]] = icmp eq i32 [[BF_ASHR33]], [[TMP8]]
// CHK-C-NEXT:    br i1 [[CMP34]], label [[ATOMIC_CONT19]], label [[ATOMIC_EXIT35]]
// CHK-C:       atomic_exit35:
// CHK-C-NEXT:    [[TMP14:%.*]] = load i32, i32* [[ATMP13]], align 4
// CHK-C-NEXT:    [[TMP15:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD36:%.*]] = load atomic i32, i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD36]], i32* [[ATOMIC_TEMP38]], align 4
// CHK-C-NEXT:    [[BF_LOAD39:%.*]] = load i32, i32* [[ATOMIC_TEMP38]], align 4
// CHK-C-NEXT:    [[BF_SHL40:%.*]] = shl i32 [[BF_LOAD39]], 1
// CHK-C-NEXT:    [[BF_ASHR41:%.*]] = ashr i32 [[BF_SHL40]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR41]], i32* [[ATMP37]], align 4
// CHK-C-NEXT:    [[CMP42:%.*]] = icmp slt i32 [[BF_ASHR41]], [[TMP15]]
// CHK-C-NEXT:    br i1 [[CMP42]], label [[ATOMIC_CONT43:%.*]], label [[ATOMIC_EXIT59:%.*]]
// CHK-C:       atomic_cont43:
// CHK-C-NEXT:    [[TMP16:%.*]] = phi i32 [ [[ATOMIC_LOAD36]], [[ATOMIC_EXIT35]] ], [ [[TMP19:%.*]], [[ATOMIC_CMP53:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP16]], i32* [[ATOMIC_TEMP44]], align 4
// CHK-C-NEXT:    [[BF_LOAD45:%.*]] = load i32, i32* [[ATOMIC_TEMP44]], align 4
// CHK-C-NEXT:    [[BF_SHL46:%.*]] = shl i32 [[BF_LOAD45]], 1
// CHK-C-NEXT:    [[BF_ASHR47:%.*]] = ashr i32 [[BF_SHL46]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR47]], i32* [[ATMP37]], align 4
// CHK-C-NEXT:    store i32 [[TMP16]], i32* [[ATOMIC_TEMP48]], align 4
// CHK-C-NEXT:    [[BF_LOAD49:%.*]] = load i32, i32* [[ATOMIC_TEMP48]], align 4
// CHK-C-NEXT:    [[BF_VALUE50:%.*]] = and i32 [[TMP15]], 2147483647
// CHK-C-NEXT:    [[BF_CLEAR51:%.*]] = and i32 [[BF_LOAD49]], -2147483648
// CHK-C-NEXT:    [[BF_SET52:%.*]] = or i32 [[BF_CLEAR51]], [[BF_VALUE50]]
// CHK-C-NEXT:    store i32 [[BF_SET52]], i32* [[ATOMIC_TEMP48]], align 4
// CHK-C-NEXT:    [[TMP17:%.*]] = load i32, i32* [[ATOMIC_TEMP48]], align 4
// CHK-C-NEXT:    [[TMP18:%.*]] = cmpxchg i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*), i32 [[TMP16]], i32 [[TMP17]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP19]] = extractvalue { i32, i1 } [[TMP18]], 0
// CHK-C-NEXT:    [[TMP20:%.*]] = extractvalue { i32, i1 } [[TMP18]], 1
// CHK-C-NEXT:    br i1 [[TMP20]], label [[ATOMIC_EXIT59]], label [[ATOMIC_CMP53]]
// CHK-C:       atomic_cmp53:
// CHK-C-NEXT:    store i32 [[TMP19]], i32* [[ATOMIC_TEMP54]], align 4
// CHK-C-NEXT:    [[BF_LOAD55:%.*]] = load i32, i32* [[ATOMIC_TEMP54]], align 4
// CHK-C-NEXT:    [[BF_SHL56:%.*]] = shl i32 [[BF_LOAD55]], 1
// CHK-C-NEXT:    [[BF_ASHR57:%.*]] = ashr i32 [[BF_SHL56]], 1
// CHK-C-NEXT:    [[CMP58:%.*]] = icmp slt i32 [[BF_ASHR57]], [[TMP15]]
// CHK-C-NEXT:    br i1 [[CMP58]], label [[ATOMIC_CONT43]], label [[ATOMIC_EXIT59]]
// CHK-C:       atomic_exit59:
// CHK-C-NEXT:    [[TMP21:%.*]] = load i32, i32* [[ATMP37]], align 4
// CHK-C-NEXT:    [[TMP22:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD60:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS2:%.*]], %struct.BitFields2* @bfx2, i32 0, i32 0) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD60]], i32* [[ATOMIC_TEMP62]], align 4
// CHK-C-NEXT:    [[BF_LOAD63:%.*]] = load i32, i32* [[ATOMIC_TEMP62]], align 4
// CHK-C-NEXT:    [[BF_ASHR64:%.*]] = ashr i32 [[BF_LOAD63]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR64]], i32* [[ATMP61]], align 4
// CHK-C-NEXT:    [[CMP65:%.*]] = icmp sgt i32 [[BF_ASHR64]], [[TMP22]]
// CHK-C-NEXT:    br i1 [[CMP65]], label [[ATOMIC_CONT66:%.*]], label [[ATOMIC_EXIT81:%.*]]
// CHK-C:       atomic_cont66:
// CHK-C-NEXT:    [[TMP23:%.*]] = phi i32 [ [[ATOMIC_LOAD60]], [[ATOMIC_EXIT59]] ], [ [[TMP26:%.*]], [[ATOMIC_CMP76:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP23]], i32* [[ATOMIC_TEMP67]], align 4
// CHK-C-NEXT:    [[BF_LOAD68:%.*]] = load i32, i32* [[ATOMIC_TEMP67]], align 4
// CHK-C-NEXT:    [[BF_ASHR69:%.*]] = ashr i32 [[BF_LOAD68]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR69]], i32* [[ATMP61]], align 4
// CHK-C-NEXT:    store i32 [[TMP23]], i32* [[ATOMIC_TEMP70]], align 4
// CHK-C-NEXT:    [[BF_LOAD71:%.*]] = load i32, i32* [[ATOMIC_TEMP70]], align 4
// CHK-C-NEXT:    [[BF_VALUE72:%.*]] = and i32 [[TMP22]], 1
// CHK-C-NEXT:    [[BF_SHL73:%.*]] = shl i32 [[BF_VALUE72]], 31
// CHK-C-NEXT:    [[BF_CLEAR74:%.*]] = and i32 [[BF_LOAD71]], 2147483647
// CHK-C-NEXT:    [[BF_SET75:%.*]] = or i32 [[BF_CLEAR74]], [[BF_SHL73]]
// CHK-C-NEXT:    store i32 [[BF_SET75]], i32* [[ATOMIC_TEMP70]], align 4
// CHK-C-NEXT:    [[TMP24:%.*]] = load i32, i32* [[ATOMIC_TEMP70]], align 4
// CHK-C-NEXT:    [[TMP25:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0), i32 [[TMP23]], i32 [[TMP24]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP26]] = extractvalue { i32, i1 } [[TMP25]], 0
// CHK-C-NEXT:    [[TMP27:%.*]] = extractvalue { i32, i1 } [[TMP25]], 1
// CHK-C-NEXT:    br i1 [[TMP27]], label [[ATOMIC_EXIT81]], label [[ATOMIC_CMP76]]
// CHK-C:       atomic_cmp76:
// CHK-C-NEXT:    store i32 [[TMP26]], i32* [[ATOMIC_TEMP77]], align 4
// CHK-C-NEXT:    [[BF_LOAD78:%.*]] = load i32, i32* [[ATOMIC_TEMP77]], align 4
// CHK-C-NEXT:    [[BF_ASHR79:%.*]] = ashr i32 [[BF_LOAD78]], 31
// CHK-C-NEXT:    [[CMP80:%.*]] = icmp sgt i32 [[BF_ASHR79]], [[TMP22]]
// CHK-C-NEXT:    br i1 [[CMP80]], label [[ATOMIC_CONT66]], label [[ATOMIC_EXIT81]]
// CHK-C:       atomic_exit81:
// CHK-C-NEXT:    [[TMP28:%.*]] = load i32, i32* [[ATMP61]], align 4
// CHK-C-NEXT:    [[TMP29:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP30:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD82:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD82]], i32* [[ATOMIC_TEMP84]], align 4
// CHK-C-NEXT:    [[BF_LOAD85:%.*]] = load i32, i32* [[ATOMIC_TEMP84]], align 4
// CHK-C-NEXT:    [[BF_ASHR86:%.*]] = ashr i32 [[BF_LOAD85]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR86]], i32* [[ATMP83]], align 4
// CHK-C-NEXT:    [[CMP87:%.*]] = icmp eq i32 [[BF_ASHR86]], [[TMP30]]
// CHK-C-NEXT:    br i1 [[CMP87]], label [[ATOMIC_CONT88:%.*]], label [[ATOMIC_EXIT103:%.*]]
// CHK-C:       atomic_cont88:
// CHK-C-NEXT:    [[TMP31:%.*]] = phi i32 [ [[ATOMIC_LOAD82]], [[ATOMIC_EXIT81]] ], [ [[TMP34:%.*]], [[ATOMIC_CMP98:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP31]], i32* [[ATOMIC_TEMP89]], align 4
// CHK-C-NEXT:    [[BF_LOAD90:%.*]] = load i32, i32* [[ATOMIC_TEMP89]], align 4
// CHK-C-NEXT:    [[BF_ASHR91:%.*]] = ashr i32 [[BF_LOAD90]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR91]], i32* [[ATMP83]], align 4
// CHK-C-NEXT:    store i32 [[TMP31]], i32* [[ATOMIC_TEMP92]], align 4
// CHK-C-NEXT:    [[BF_LOAD93:%.*]] = load i32, i32* [[ATOMIC_TEMP92]], align 4
// CHK-C-NEXT:    [[BF_VALUE94:%.*]] = and i32 [[TMP29]], 1
// CHK-C-NEXT:    [[BF_SHL95:%.*]] = shl i32 [[BF_VALUE94]], 31
// CHK-C-NEXT:    [[BF_CLEAR96:%.*]] = and i32 [[BF_LOAD93]], 2147483647
// CHK-C-NEXT:    [[BF_SET97:%.*]] = or i32 [[BF_CLEAR96]], [[BF_SHL95]]
// CHK-C-NEXT:    store i32 [[BF_SET97]], i32* [[ATOMIC_TEMP92]], align 4
// CHK-C-NEXT:    [[TMP32:%.*]] = load i32, i32* [[ATOMIC_TEMP92]], align 4
// CHK-C-NEXT:    [[TMP33:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0), i32 [[TMP31]], i32 [[TMP32]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP34]] = extractvalue { i32, i1 } [[TMP33]], 0
// CHK-C-NEXT:    [[TMP35:%.*]] = extractvalue { i32, i1 } [[TMP33]], 1
// CHK-C-NEXT:    br i1 [[TMP35]], label [[ATOMIC_EXIT103]], label [[ATOMIC_CMP98]]
// CHK-C:       atomic_cmp98:
// CHK-C-NEXT:    store i32 [[TMP34]], i32* [[ATOMIC_TEMP99]], align 4
// CHK-C-NEXT:    [[BF_LOAD100:%.*]] = load i32, i32* [[ATOMIC_TEMP99]], align 4
// CHK-C-NEXT:    [[BF_ASHR101:%.*]] = ashr i32 [[BF_LOAD100]], 31
// CHK-C-NEXT:    [[CMP102:%.*]] = icmp eq i32 [[BF_ASHR101]], [[TMP30]]
// CHK-C-NEXT:    br i1 [[CMP102]], label [[ATOMIC_CONT88]], label [[ATOMIC_EXIT103]]
// CHK-C:       atomic_exit103:
// CHK-C-NEXT:    [[TMP36:%.*]] = load i32, i32* [[ATMP83]], align 4
// CHK-C-NEXT:    [[TMP37:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD104:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD104]], i32* [[ATOMIC_TEMP106]], align 4
// CHK-C-NEXT:    [[BF_LOAD107:%.*]] = load i32, i32* [[ATOMIC_TEMP106]], align 4
// CHK-C-NEXT:    [[BF_ASHR108:%.*]] = ashr i32 [[BF_LOAD107]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR108]], i32* [[ATMP105]], align 4
// CHK-C-NEXT:    [[CMP109:%.*]] = icmp slt i32 [[BF_ASHR108]], [[TMP37]]
// CHK-C-NEXT:    br i1 [[CMP109]], label [[ATOMIC_CONT110:%.*]], label [[ATOMIC_EXIT125:%.*]]
// CHK-C:       atomic_cont110:
// CHK-C-NEXT:    [[TMP38:%.*]] = phi i32 [ [[ATOMIC_LOAD104]], [[ATOMIC_EXIT103]] ], [ [[TMP41:%.*]], [[ATOMIC_CMP120:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP38]], i32* [[ATOMIC_TEMP111]], align 4
// CHK-C-NEXT:    [[BF_LOAD112:%.*]] = load i32, i32* [[ATOMIC_TEMP111]], align 4
// CHK-C-NEXT:    [[BF_ASHR113:%.*]] = ashr i32 [[BF_LOAD112]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR113]], i32* [[ATMP105]], align 4
// CHK-C-NEXT:    store i32 [[TMP38]], i32* [[ATOMIC_TEMP114]], align 4
// CHK-C-NEXT:    [[BF_LOAD115:%.*]] = load i32, i32* [[ATOMIC_TEMP114]], align 4
// CHK-C-NEXT:    [[BF_VALUE116:%.*]] = and i32 [[TMP37]], 1
// CHK-C-NEXT:    [[BF_SHL117:%.*]] = shl i32 [[BF_VALUE116]], 31
// CHK-C-NEXT:    [[BF_CLEAR118:%.*]] = and i32 [[BF_LOAD115]], 2147483647
// CHK-C-NEXT:    [[BF_SET119:%.*]] = or i32 [[BF_CLEAR118]], [[BF_SHL117]]
// CHK-C-NEXT:    store i32 [[BF_SET119]], i32* [[ATOMIC_TEMP114]], align 4
// CHK-C-NEXT:    [[TMP39:%.*]] = load i32, i32* [[ATOMIC_TEMP114]], align 4
// CHK-C-NEXT:    [[TMP40:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0), i32 [[TMP38]], i32 [[TMP39]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP41]] = extractvalue { i32, i1 } [[TMP40]], 0
// CHK-C-NEXT:    [[TMP42:%.*]] = extractvalue { i32, i1 } [[TMP40]], 1
// CHK-C-NEXT:    br i1 [[TMP42]], label [[ATOMIC_EXIT125]], label [[ATOMIC_CMP120]]
// CHK-C:       atomic_cmp120:
// CHK-C-NEXT:    store i32 [[TMP41]], i32* [[ATOMIC_TEMP121]], align 4
// CHK-C-NEXT:    [[BF_LOAD122:%.*]] = load i32, i32* [[ATOMIC_TEMP121]], align 4
// CHK-C-NEXT:    [[BF_ASHR123:%.*]] = ashr i32 [[BF_LOAD122]], 31
// CHK-C-NEXT:    [[CMP124:%.*]] = icmp slt i32 [[BF_ASHR123]], [[TMP37]]
// CHK-C-NEXT:    br i1 [[CMP124]], label [[ATOMIC_CONT110]], label [[ATOMIC_EXIT125]]
// CHK-C:       atomic_exit125:
// CHK-C-NEXT:    [[TMP43:%.*]] = load i32, i32* [[ATMP105]], align 4
// CHK-C-NEXT:    [[TMP44:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD126:%.*]] = load atomic i8, i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3) monotonic, align 1
// CHK-C-NEXT:    [[TMP45:%.*]] = bitcast i32* [[ATOMIC_TEMP128]] to i8*
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD126]], i8* [[TMP45]], align 1
// CHK-C-NEXT:    [[BF_LOAD129:%.*]] = load i8, i8* [[TMP45]], align 1
// CHK-C-NEXT:    [[BF_ASHR130:%.*]] = ashr i8 [[BF_LOAD129]], 7
// CHK-C-NEXT:    [[BF_CAST:%.*]] = sext i8 [[BF_ASHR130]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST]], i32* [[ATMP127]], align 4
// CHK-C-NEXT:    [[CMP131:%.*]] = icmp sgt i32 [[BF_CAST]], [[TMP44]]
// CHK-C-NEXT:    br i1 [[CMP131]], label [[ATOMIC_CONT132:%.*]], label [[ATOMIC_EXIT149:%.*]]
// CHK-C:       atomic_cont132:
// CHK-C-NEXT:    [[TMP46:%.*]] = phi i8 [ [[ATOMIC_LOAD126]], [[ATOMIC_EXIT125]] ], [ [[TMP52:%.*]], [[ATOMIC_CMP143:%.*]] ]
// CHK-C-NEXT:    [[TMP47:%.*]] = bitcast i32* [[ATOMIC_TEMP133]] to i8*
// CHK-C-NEXT:    store i8 [[TMP46]], i8* [[TMP47]], align 1
// CHK-C-NEXT:    [[BF_LOAD134:%.*]] = load i8, i8* [[TMP47]], align 1
// CHK-C-NEXT:    [[BF_ASHR135:%.*]] = ashr i8 [[BF_LOAD134]], 7
// CHK-C-NEXT:    [[BF_CAST136:%.*]] = sext i8 [[BF_ASHR135]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST136]], i32* [[ATMP127]], align 4
// CHK-C-NEXT:    [[TMP48:%.*]] = bitcast i32* [[ATOMIC_TEMP137]] to i8*
// CHK-C-NEXT:    store i8 [[TMP46]], i8* [[TMP48]], align 1
// CHK-C-NEXT:    [[TMP49:%.*]] = trunc i32 [[TMP44]] to i8
// CHK-C-NEXT:    [[BF_LOAD138:%.*]] = load i8, i8* [[TMP48]], align 1
// CHK-C-NEXT:    [[BF_VALUE139:%.*]] = and i8 [[TMP49]], 1
// CHK-C-NEXT:    [[BF_SHL140:%.*]] = shl i8 [[BF_VALUE139]], 7
// CHK-C-NEXT:    [[BF_CLEAR141:%.*]] = and i8 [[BF_LOAD138]], 127
// CHK-C-NEXT:    [[BF_SET142:%.*]] = or i8 [[BF_CLEAR141]], [[BF_SHL140]]
// CHK-C-NEXT:    store i8 [[BF_SET142]], i8* [[TMP48]], align 1
// CHK-C-NEXT:    [[TMP50:%.*]] = load i8, i8* [[TMP48]], align 1
// CHK-C-NEXT:    [[TMP51:%.*]] = cmpxchg i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3), i8 [[TMP46]], i8 [[TMP50]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP52]] = extractvalue { i8, i1 } [[TMP51]], 0
// CHK-C-NEXT:    [[TMP53:%.*]] = extractvalue { i8, i1 } [[TMP51]], 1
// CHK-C-NEXT:    br i1 [[TMP53]], label [[ATOMIC_EXIT149]], label [[ATOMIC_CMP143]]
// CHK-C:       atomic_cmp143:
// CHK-C-NEXT:    [[TMP54:%.*]] = bitcast i32* [[ATOMIC_TEMP144]] to i8*
// CHK-C-NEXT:    store i8 [[TMP52]], i8* [[TMP54]], align 1
// CHK-C-NEXT:    [[BF_LOAD145:%.*]] = load i8, i8* [[TMP54]], align 1
// CHK-C-NEXT:    [[BF_ASHR146:%.*]] = ashr i8 [[BF_LOAD145]], 7
// CHK-C-NEXT:    [[BF_CAST147:%.*]] = sext i8 [[BF_ASHR146]] to i32
// CHK-C-NEXT:    [[CMP148:%.*]] = icmp sgt i32 [[BF_CAST147]], [[TMP44]]
// CHK-C-NEXT:    br i1 [[CMP148]], label [[ATOMIC_CONT132]], label [[ATOMIC_EXIT149]]
// CHK-C:       atomic_exit149:
// CHK-C-NEXT:    [[TMP55:%.*]] = load i32, i32* [[ATMP127]], align 4
// CHK-C-NEXT:    [[TMP56:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP57:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD150:%.*]] = load atomic i8, i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3) monotonic, align 1
// CHK-C-NEXT:    [[TMP58:%.*]] = bitcast i32* [[ATOMIC_TEMP152]] to i8*
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD150]], i8* [[TMP58]], align 1
// CHK-C-NEXT:    [[BF_LOAD153:%.*]] = load i8, i8* [[TMP58]], align 1
// CHK-C-NEXT:    [[BF_ASHR154:%.*]] = ashr i8 [[BF_LOAD153]], 7
// CHK-C-NEXT:    [[BF_CAST155:%.*]] = sext i8 [[BF_ASHR154]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST155]], i32* [[ATMP151]], align 4
// CHK-C-NEXT:    [[CMP156:%.*]] = icmp eq i32 [[BF_CAST155]], [[TMP57]]
// CHK-C-NEXT:    br i1 [[CMP156]], label [[ATOMIC_CONT157:%.*]], label [[ATOMIC_EXIT174:%.*]]
// CHK-C:       atomic_cont157:
// CHK-C-NEXT:    [[TMP59:%.*]] = phi i8 [ [[ATOMIC_LOAD150]], [[ATOMIC_EXIT149]] ], [ [[TMP65:%.*]], [[ATOMIC_CMP168:%.*]] ]
// CHK-C-NEXT:    [[TMP60:%.*]] = bitcast i32* [[ATOMIC_TEMP158]] to i8*
// CHK-C-NEXT:    store i8 [[TMP59]], i8* [[TMP60]], align 1
// CHK-C-NEXT:    [[BF_LOAD159:%.*]] = load i8, i8* [[TMP60]], align 1
// CHK-C-NEXT:    [[BF_ASHR160:%.*]] = ashr i8 [[BF_LOAD159]], 7
// CHK-C-NEXT:    [[BF_CAST161:%.*]] = sext i8 [[BF_ASHR160]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST161]], i32* [[ATMP151]], align 4
// CHK-C-NEXT:    [[TMP61:%.*]] = bitcast i32* [[ATOMIC_TEMP162]] to i8*
// CHK-C-NEXT:    store i8 [[TMP59]], i8* [[TMP61]], align 1
// CHK-C-NEXT:    [[TMP62:%.*]] = trunc i32 [[TMP56]] to i8
// CHK-C-NEXT:    [[BF_LOAD163:%.*]] = load i8, i8* [[TMP61]], align 1
// CHK-C-NEXT:    [[BF_VALUE164:%.*]] = and i8 [[TMP62]], 1
// CHK-C-NEXT:    [[BF_SHL165:%.*]] = shl i8 [[BF_VALUE164]], 7
// CHK-C-NEXT:    [[BF_CLEAR166:%.*]] = and i8 [[BF_LOAD163]], 127
// CHK-C-NEXT:    [[BF_SET167:%.*]] = or i8 [[BF_CLEAR166]], [[BF_SHL165]]
// CHK-C-NEXT:    store i8 [[BF_SET167]], i8* [[TMP61]], align 1
// CHK-C-NEXT:    [[TMP63:%.*]] = load i8, i8* [[TMP61]], align 1
// CHK-C-NEXT:    [[TMP64:%.*]] = cmpxchg i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3), i8 [[TMP59]], i8 [[TMP63]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP65]] = extractvalue { i8, i1 } [[TMP64]], 0
// CHK-C-NEXT:    [[TMP66:%.*]] = extractvalue { i8, i1 } [[TMP64]], 1
// CHK-C-NEXT:    br i1 [[TMP66]], label [[ATOMIC_EXIT174]], label [[ATOMIC_CMP168]]
// CHK-C:       atomic_cmp168:
// CHK-C-NEXT:    [[TMP67:%.*]] = bitcast i32* [[ATOMIC_TEMP169]] to i8*
// CHK-C-NEXT:    store i8 [[TMP65]], i8* [[TMP67]], align 1
// CHK-C-NEXT:    [[BF_LOAD170:%.*]] = load i8, i8* [[TMP67]], align 1
// CHK-C-NEXT:    [[BF_ASHR171:%.*]] = ashr i8 [[BF_LOAD170]], 7
// CHK-C-NEXT:    [[BF_CAST172:%.*]] = sext i8 [[BF_ASHR171]] to i32
// CHK-C-NEXT:    [[CMP173:%.*]] = icmp eq i32 [[BF_CAST172]], [[TMP57]]
// CHK-C-NEXT:    br i1 [[CMP173]], label [[ATOMIC_CONT157]], label [[ATOMIC_EXIT174]]
// CHK-C:       atomic_exit174:
// CHK-C-NEXT:    [[TMP68:%.*]] = load i32, i32* [[ATMP151]], align 4
// CHK-C-NEXT:    [[TMP69:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD175:%.*]] = load atomic i8, i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3) monotonic, align 1
// CHK-C-NEXT:    [[TMP70:%.*]] = bitcast i32* [[ATOMIC_TEMP177]] to i8*
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD175]], i8* [[TMP70]], align 1
// CHK-C-NEXT:    [[BF_LOAD178:%.*]] = load i8, i8* [[TMP70]], align 1
// CHK-C-NEXT:    [[BF_ASHR179:%.*]] = ashr i8 [[BF_LOAD178]], 7
// CHK-C-NEXT:    [[BF_CAST180:%.*]] = sext i8 [[BF_ASHR179]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST180]], i32* [[ATMP176]], align 4
// CHK-C-NEXT:    [[CMP181:%.*]] = icmp slt i32 [[BF_CAST180]], [[TMP69]]
// CHK-C-NEXT:    br i1 [[CMP181]], label [[ATOMIC_CONT182:%.*]], label [[ATOMIC_EXIT199:%.*]]
// CHK-C:       atomic_cont182:
// CHK-C-NEXT:    [[TMP71:%.*]] = phi i8 [ [[ATOMIC_LOAD175]], [[ATOMIC_EXIT174]] ], [ [[TMP77:%.*]], [[ATOMIC_CMP193:%.*]] ]
// CHK-C-NEXT:    [[TMP72:%.*]] = bitcast i32* [[ATOMIC_TEMP183]] to i8*
// CHK-C-NEXT:    store i8 [[TMP71]], i8* [[TMP72]], align 1
// CHK-C-NEXT:    [[BF_LOAD184:%.*]] = load i8, i8* [[TMP72]], align 1
// CHK-C-NEXT:    [[BF_ASHR185:%.*]] = ashr i8 [[BF_LOAD184]], 7
// CHK-C-NEXT:    [[BF_CAST186:%.*]] = sext i8 [[BF_ASHR185]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST186]], i32* [[ATMP176]], align 4
// CHK-C-NEXT:    [[TMP73:%.*]] = bitcast i32* [[ATOMIC_TEMP187]] to i8*
// CHK-C-NEXT:    store i8 [[TMP71]], i8* [[TMP73]], align 1
// CHK-C-NEXT:    [[TMP74:%.*]] = trunc i32 [[TMP69]] to i8
// CHK-C-NEXT:    [[BF_LOAD188:%.*]] = load i8, i8* [[TMP73]], align 1
// CHK-C-NEXT:    [[BF_VALUE189:%.*]] = and i8 [[TMP74]], 1
// CHK-C-NEXT:    [[BF_SHL190:%.*]] = shl i8 [[BF_VALUE189]], 7
// CHK-C-NEXT:    [[BF_CLEAR191:%.*]] = and i8 [[BF_LOAD188]], 127
// CHK-C-NEXT:    [[BF_SET192:%.*]] = or i8 [[BF_CLEAR191]], [[BF_SHL190]]
// CHK-C-NEXT:    store i8 [[BF_SET192]], i8* [[TMP73]], align 1
// CHK-C-NEXT:    [[TMP75:%.*]] = load i8, i8* [[TMP73]], align 1
// CHK-C-NEXT:    [[TMP76:%.*]] = cmpxchg i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3), i8 [[TMP71]], i8 [[TMP75]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP77]] = extractvalue { i8, i1 } [[TMP76]], 0
// CHK-C-NEXT:    [[TMP78:%.*]] = extractvalue { i8, i1 } [[TMP76]], 1
// CHK-C-NEXT:    br i1 [[TMP78]], label [[ATOMIC_EXIT199]], label [[ATOMIC_CMP193]]
// CHK-C:       atomic_cmp193:
// CHK-C-NEXT:    [[TMP79:%.*]] = bitcast i32* [[ATOMIC_TEMP194]] to i8*
// CHK-C-NEXT:    store i8 [[TMP77]], i8* [[TMP79]], align 1
// CHK-C-NEXT:    [[BF_LOAD195:%.*]] = load i8, i8* [[TMP79]], align 1
// CHK-C-NEXT:    [[BF_ASHR196:%.*]] = ashr i8 [[BF_LOAD195]], 7
// CHK-C-NEXT:    [[BF_CAST197:%.*]] = sext i8 [[BF_ASHR196]] to i32
// CHK-C-NEXT:    [[CMP198:%.*]] = icmp slt i32 [[BF_CAST197]], [[TMP69]]
// CHK-C-NEXT:    br i1 [[CMP198]], label [[ATOMIC_CONT182]], label [[ATOMIC_EXIT199]]
// CHK-C:       atomic_exit199:
// CHK-C-NEXT:    [[TMP80:%.*]] = load i32, i32* [[ATMP176]], align 4
// CHK-C-NEXT:    [[TMP81:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD200:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS3:%.*]], %struct.BitFields3* @bfx3, i32 0, i32 0) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD200]], i32* [[ATOMIC_TEMP202]], align 4
// CHK-C-NEXT:    [[BF_LOAD203:%.*]] = load i32, i32* [[ATOMIC_TEMP202]], align 4
// CHK-C-NEXT:    [[BF_SHL204:%.*]] = shl i32 [[BF_LOAD203]], 7
// CHK-C-NEXT:    [[BF_ASHR205:%.*]] = ashr i32 [[BF_SHL204]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR205]], i32* [[ATMP201]], align 4
// CHK-C-NEXT:    [[CMP206:%.*]] = icmp sgt i32 [[BF_ASHR205]], [[TMP81]]
// CHK-C-NEXT:    br i1 [[CMP206]], label [[ATOMIC_CONT207:%.*]], label [[ATOMIC_EXIT224:%.*]]
// CHK-C:       atomic_cont207:
// CHK-C-NEXT:    [[TMP82:%.*]] = phi i32 [ [[ATOMIC_LOAD200]], [[ATOMIC_EXIT199]] ], [ [[TMP85:%.*]], [[ATOMIC_CMP218:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP82]], i32* [[ATOMIC_TEMP208]], align 4
// CHK-C-NEXT:    [[BF_LOAD209:%.*]] = load i32, i32* [[ATOMIC_TEMP208]], align 4
// CHK-C-NEXT:    [[BF_SHL210:%.*]] = shl i32 [[BF_LOAD209]], 7
// CHK-C-NEXT:    [[BF_ASHR211:%.*]] = ashr i32 [[BF_SHL210]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR211]], i32* [[ATMP201]], align 4
// CHK-C-NEXT:    store i32 [[TMP82]], i32* [[ATOMIC_TEMP212]], align 4
// CHK-C-NEXT:    [[BF_LOAD213:%.*]] = load i32, i32* [[ATOMIC_TEMP212]], align 4
// CHK-C-NEXT:    [[BF_VALUE214:%.*]] = and i32 [[TMP81]], 16383
// CHK-C-NEXT:    [[BF_SHL215:%.*]] = shl i32 [[BF_VALUE214]], 11
// CHK-C-NEXT:    [[BF_CLEAR216:%.*]] = and i32 [[BF_LOAD213]], -33552385
// CHK-C-NEXT:    [[BF_SET217:%.*]] = or i32 [[BF_CLEAR216]], [[BF_SHL215]]
// CHK-C-NEXT:    store i32 [[BF_SET217]], i32* [[ATOMIC_TEMP212]], align 4
// CHK-C-NEXT:    [[TMP83:%.*]] = load i32, i32* [[ATOMIC_TEMP212]], align 4
// CHK-C-NEXT:    [[TMP84:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0), i32 [[TMP82]], i32 [[TMP83]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP85]] = extractvalue { i32, i1 } [[TMP84]], 0
// CHK-C-NEXT:    [[TMP86:%.*]] = extractvalue { i32, i1 } [[TMP84]], 1
// CHK-C-NEXT:    br i1 [[TMP86]], label [[ATOMIC_EXIT224]], label [[ATOMIC_CMP218]]
// CHK-C:       atomic_cmp218:
// CHK-C-NEXT:    store i32 [[TMP85]], i32* [[ATOMIC_TEMP219]], align 4
// CHK-C-NEXT:    [[BF_LOAD220:%.*]] = load i32, i32* [[ATOMIC_TEMP219]], align 4
// CHK-C-NEXT:    [[BF_SHL221:%.*]] = shl i32 [[BF_LOAD220]], 7
// CHK-C-NEXT:    [[BF_ASHR222:%.*]] = ashr i32 [[BF_SHL221]], 18
// CHK-C-NEXT:    [[CMP223:%.*]] = icmp sgt i32 [[BF_ASHR222]], [[TMP81]]
// CHK-C-NEXT:    br i1 [[CMP223]], label [[ATOMIC_CONT207]], label [[ATOMIC_EXIT224]]
// CHK-C:       atomic_exit224:
// CHK-C-NEXT:    [[TMP87:%.*]] = load i32, i32* [[ATMP201]], align 4
// CHK-C-NEXT:    [[TMP88:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP89:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD225:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD225]], i32* [[ATOMIC_TEMP227]], align 4
// CHK-C-NEXT:    [[BF_LOAD228:%.*]] = load i32, i32* [[ATOMIC_TEMP227]], align 4
// CHK-C-NEXT:    [[BF_SHL229:%.*]] = shl i32 [[BF_LOAD228]], 7
// CHK-C-NEXT:    [[BF_ASHR230:%.*]] = ashr i32 [[BF_SHL229]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR230]], i32* [[ATMP226]], align 4
// CHK-C-NEXT:    [[CMP231:%.*]] = icmp eq i32 [[BF_ASHR230]], [[TMP89]]
// CHK-C-NEXT:    br i1 [[CMP231]], label [[ATOMIC_CONT232:%.*]], label [[ATOMIC_EXIT249:%.*]]
// CHK-C:       atomic_cont232:
// CHK-C-NEXT:    [[TMP90:%.*]] = phi i32 [ [[ATOMIC_LOAD225]], [[ATOMIC_EXIT224]] ], [ [[TMP93:%.*]], [[ATOMIC_CMP243:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP90]], i32* [[ATOMIC_TEMP233]], align 4
// CHK-C-NEXT:    [[BF_LOAD234:%.*]] = load i32, i32* [[ATOMIC_TEMP233]], align 4
// CHK-C-NEXT:    [[BF_SHL235:%.*]] = shl i32 [[BF_LOAD234]], 7
// CHK-C-NEXT:    [[BF_ASHR236:%.*]] = ashr i32 [[BF_SHL235]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR236]], i32* [[ATMP226]], align 4
// CHK-C-NEXT:    store i32 [[TMP90]], i32* [[ATOMIC_TEMP237]], align 4
// CHK-C-NEXT:    [[BF_LOAD238:%.*]] = load i32, i32* [[ATOMIC_TEMP237]], align 4
// CHK-C-NEXT:    [[BF_VALUE239:%.*]] = and i32 [[TMP88]], 16383
// CHK-C-NEXT:    [[BF_SHL240:%.*]] = shl i32 [[BF_VALUE239]], 11
// CHK-C-NEXT:    [[BF_CLEAR241:%.*]] = and i32 [[BF_LOAD238]], -33552385
// CHK-C-NEXT:    [[BF_SET242:%.*]] = or i32 [[BF_CLEAR241]], [[BF_SHL240]]
// CHK-C-NEXT:    store i32 [[BF_SET242]], i32* [[ATOMIC_TEMP237]], align 4
// CHK-C-NEXT:    [[TMP91:%.*]] = load i32, i32* [[ATOMIC_TEMP237]], align 4
// CHK-C-NEXT:    [[TMP92:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0), i32 [[TMP90]], i32 [[TMP91]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP93]] = extractvalue { i32, i1 } [[TMP92]], 0
// CHK-C-NEXT:    [[TMP94:%.*]] = extractvalue { i32, i1 } [[TMP92]], 1
// CHK-C-NEXT:    br i1 [[TMP94]], label [[ATOMIC_EXIT249]], label [[ATOMIC_CMP243]]
// CHK-C:       atomic_cmp243:
// CHK-C-NEXT:    store i32 [[TMP93]], i32* [[ATOMIC_TEMP244]], align 4
// CHK-C-NEXT:    [[BF_LOAD245:%.*]] = load i32, i32* [[ATOMIC_TEMP244]], align 4
// CHK-C-NEXT:    [[BF_SHL246:%.*]] = shl i32 [[BF_LOAD245]], 7
// CHK-C-NEXT:    [[BF_ASHR247:%.*]] = ashr i32 [[BF_SHL246]], 18
// CHK-C-NEXT:    [[CMP248:%.*]] = icmp eq i32 [[BF_ASHR247]], [[TMP89]]
// CHK-C-NEXT:    br i1 [[CMP248]], label [[ATOMIC_CONT232]], label [[ATOMIC_EXIT249]]
// CHK-C:       atomic_exit249:
// CHK-C-NEXT:    [[TMP95:%.*]] = load i32, i32* [[ATMP226]], align 4
// CHK-C-NEXT:    [[TMP96:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD250:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD250]], i32* [[ATOMIC_TEMP252]], align 4
// CHK-C-NEXT:    [[BF_LOAD253:%.*]] = load i32, i32* [[ATOMIC_TEMP252]], align 4
// CHK-C-NEXT:    [[BF_SHL254:%.*]] = shl i32 [[BF_LOAD253]], 7
// CHK-C-NEXT:    [[BF_ASHR255:%.*]] = ashr i32 [[BF_SHL254]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR255]], i32* [[ATMP251]], align 4
// CHK-C-NEXT:    [[CMP256:%.*]] = icmp slt i32 [[BF_ASHR255]], [[TMP96]]
// CHK-C-NEXT:    br i1 [[CMP256]], label [[ATOMIC_CONT257:%.*]], label [[ATOMIC_EXIT274:%.*]]
// CHK-C:       atomic_cont257:
// CHK-C-NEXT:    [[TMP97:%.*]] = phi i32 [ [[ATOMIC_LOAD250]], [[ATOMIC_EXIT249]] ], [ [[TMP100:%.*]], [[ATOMIC_CMP268:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP97]], i32* [[ATOMIC_TEMP258]], align 4
// CHK-C-NEXT:    [[BF_LOAD259:%.*]] = load i32, i32* [[ATOMIC_TEMP258]], align 4
// CHK-C-NEXT:    [[BF_SHL260:%.*]] = shl i32 [[BF_LOAD259]], 7
// CHK-C-NEXT:    [[BF_ASHR261:%.*]] = ashr i32 [[BF_SHL260]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR261]], i32* [[ATMP251]], align 4
// CHK-C-NEXT:    store i32 [[TMP97]], i32* [[ATOMIC_TEMP262]], align 4
// CHK-C-NEXT:    [[BF_LOAD263:%.*]] = load i32, i32* [[ATOMIC_TEMP262]], align 4
// CHK-C-NEXT:    [[BF_VALUE264:%.*]] = and i32 [[TMP96]], 16383
// CHK-C-NEXT:    [[BF_SHL265:%.*]] = shl i32 [[BF_VALUE264]], 11
// CHK-C-NEXT:    [[BF_CLEAR266:%.*]] = and i32 [[BF_LOAD263]], -33552385
// CHK-C-NEXT:    [[BF_SET267:%.*]] = or i32 [[BF_CLEAR266]], [[BF_SHL265]]
// CHK-C-NEXT:    store i32 [[BF_SET267]], i32* [[ATOMIC_TEMP262]], align 4
// CHK-C-NEXT:    [[TMP98:%.*]] = load i32, i32* [[ATOMIC_TEMP262]], align 4
// CHK-C-NEXT:    [[TMP99:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0), i32 [[TMP97]], i32 [[TMP98]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP100]] = extractvalue { i32, i1 } [[TMP99]], 0
// CHK-C-NEXT:    [[TMP101:%.*]] = extractvalue { i32, i1 } [[TMP99]], 1
// CHK-C-NEXT:    br i1 [[TMP101]], label [[ATOMIC_EXIT274]], label [[ATOMIC_CMP268]]
// CHK-C:       atomic_cmp268:
// CHK-C-NEXT:    store i32 [[TMP100]], i32* [[ATOMIC_TEMP269]], align 4
// CHK-C-NEXT:    [[BF_LOAD270:%.*]] = load i32, i32* [[ATOMIC_TEMP269]], align 4
// CHK-C-NEXT:    [[BF_SHL271:%.*]] = shl i32 [[BF_LOAD270]], 7
// CHK-C-NEXT:    [[BF_ASHR272:%.*]] = ashr i32 [[BF_SHL271]], 18
// CHK-C-NEXT:    [[CMP273:%.*]] = icmp slt i32 [[BF_ASHR272]], [[TMP96]]
// CHK-C-NEXT:    br i1 [[CMP273]], label [[ATOMIC_CONT257]], label [[ATOMIC_EXIT274]]
// CHK-C:       atomic_exit274:
// CHK-C-NEXT:    [[TMP102:%.*]] = load i32, i32* [[ATMP251]], align 4
// CHK-C-NEXT:    [[TMP103:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD275:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD275]], i64* [[ATOMIC_TEMP277]], align 8
// CHK-C-NEXT:    [[BF_LOAD278:%.*]] = load i64, i64* [[ATOMIC_TEMP277]], align 8
// CHK-C-NEXT:    [[BF_SHL279:%.*]] = shl i64 [[BF_LOAD278]], 47
// CHK-C-NEXT:    [[BF_ASHR280:%.*]] = ashr i64 [[BF_SHL279]], 63
// CHK-C-NEXT:    [[BF_CAST281:%.*]] = trunc i64 [[BF_ASHR280]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST281]], i32* [[ATMP276]], align 4
// CHK-C-NEXT:    [[CMP282:%.*]] = icmp sgt i32 [[BF_CAST281]], [[TMP103]]
// CHK-C-NEXT:    br i1 [[CMP282]], label [[ATOMIC_CONT283:%.*]], label [[ATOMIC_EXIT302:%.*]]
// CHK-C:       atomic_cont283:
// CHK-C-NEXT:    [[TMP104:%.*]] = phi i64 [ [[ATOMIC_LOAD275]], [[ATOMIC_EXIT274]] ], [ [[TMP108:%.*]], [[ATOMIC_CMP295:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP104]], i64* [[ATOMIC_TEMP284]], align 8
// CHK-C-NEXT:    [[BF_LOAD285:%.*]] = load i64, i64* [[ATOMIC_TEMP284]], align 8
// CHK-C-NEXT:    [[BF_SHL286:%.*]] = shl i64 [[BF_LOAD285]], 47
// CHK-C-NEXT:    [[BF_ASHR287:%.*]] = ashr i64 [[BF_SHL286]], 63
// CHK-C-NEXT:    [[BF_CAST288:%.*]] = trunc i64 [[BF_ASHR287]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST288]], i32* [[ATMP276]], align 4
// CHK-C-NEXT:    store i64 [[TMP104]], i64* [[ATOMIC_TEMP289]], align 8
// CHK-C-NEXT:    [[TMP105:%.*]] = zext i32 [[TMP103]] to i64
// CHK-C-NEXT:    [[BF_LOAD290:%.*]] = load i64, i64* [[ATOMIC_TEMP289]], align 8
// CHK-C-NEXT:    [[BF_VALUE291:%.*]] = and i64 [[TMP105]], 1
// CHK-C-NEXT:    [[BF_SHL292:%.*]] = shl i64 [[BF_VALUE291]], 16
// CHK-C-NEXT:    [[BF_CLEAR293:%.*]] = and i64 [[BF_LOAD290]], -65537
// CHK-C-NEXT:    [[BF_SET294:%.*]] = or i64 [[BF_CLEAR293]], [[BF_SHL292]]
// CHK-C-NEXT:    store i64 [[BF_SET294]], i64* [[ATOMIC_TEMP289]], align 8
// CHK-C-NEXT:    [[TMP106:%.*]] = load i64, i64* [[ATOMIC_TEMP289]], align 8
// CHK-C-NEXT:    [[TMP107:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP104]], i64 [[TMP106]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP108]] = extractvalue { i64, i1 } [[TMP107]], 0
// CHK-C-NEXT:    [[TMP109:%.*]] = extractvalue { i64, i1 } [[TMP107]], 1
// CHK-C-NEXT:    br i1 [[TMP109]], label [[ATOMIC_EXIT302]], label [[ATOMIC_CMP295]]
// CHK-C:       atomic_cmp295:
// CHK-C-NEXT:    store i64 [[TMP108]], i64* [[ATOMIC_TEMP296]], align 8
// CHK-C-NEXT:    [[BF_LOAD297:%.*]] = load i64, i64* [[ATOMIC_TEMP296]], align 8
// CHK-C-NEXT:    [[BF_SHL298:%.*]] = shl i64 [[BF_LOAD297]], 47
// CHK-C-NEXT:    [[BF_ASHR299:%.*]] = ashr i64 [[BF_SHL298]], 63
// CHK-C-NEXT:    [[BF_CAST300:%.*]] = trunc i64 [[BF_ASHR299]] to i32
// CHK-C-NEXT:    [[CMP301:%.*]] = icmp sgt i32 [[BF_CAST300]], [[TMP103]]
// CHK-C-NEXT:    br i1 [[CMP301]], label [[ATOMIC_CONT283]], label [[ATOMIC_EXIT302]]
// CHK-C:       atomic_exit302:
// CHK-C-NEXT:    [[TMP110:%.*]] = load i32, i32* [[ATMP276]], align 4
// CHK-C-NEXT:    [[TMP111:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP112:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD303:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD303]], i64* [[ATOMIC_TEMP305]], align 8
// CHK-C-NEXT:    [[BF_LOAD306:%.*]] = load i64, i64* [[ATOMIC_TEMP305]], align 8
// CHK-C-NEXT:    [[BF_SHL307:%.*]] = shl i64 [[BF_LOAD306]], 47
// CHK-C-NEXT:    [[BF_ASHR308:%.*]] = ashr i64 [[BF_SHL307]], 63
// CHK-C-NEXT:    [[BF_CAST309:%.*]] = trunc i64 [[BF_ASHR308]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST309]], i32* [[ATMP304]], align 4
// CHK-C-NEXT:    [[CMP310:%.*]] = icmp eq i32 [[BF_CAST309]], [[TMP112]]
// CHK-C-NEXT:    br i1 [[CMP310]], label [[ATOMIC_CONT311:%.*]], label [[ATOMIC_EXIT330:%.*]]
// CHK-C:       atomic_cont311:
// CHK-C-NEXT:    [[TMP113:%.*]] = phi i64 [ [[ATOMIC_LOAD303]], [[ATOMIC_EXIT302]] ], [ [[TMP117:%.*]], [[ATOMIC_CMP323:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP113]], i64* [[ATOMIC_TEMP312]], align 8
// CHK-C-NEXT:    [[BF_LOAD313:%.*]] = load i64, i64* [[ATOMIC_TEMP312]], align 8
// CHK-C-NEXT:    [[BF_SHL314:%.*]] = shl i64 [[BF_LOAD313]], 47
// CHK-C-NEXT:    [[BF_ASHR315:%.*]] = ashr i64 [[BF_SHL314]], 63
// CHK-C-NEXT:    [[BF_CAST316:%.*]] = trunc i64 [[BF_ASHR315]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST316]], i32* [[ATMP304]], align 4
// CHK-C-NEXT:    store i64 [[TMP113]], i64* [[ATOMIC_TEMP317]], align 8
// CHK-C-NEXT:    [[TMP114:%.*]] = zext i32 [[TMP111]] to i64
// CHK-C-NEXT:    [[BF_LOAD318:%.*]] = load i64, i64* [[ATOMIC_TEMP317]], align 8
// CHK-C-NEXT:    [[BF_VALUE319:%.*]] = and i64 [[TMP114]], 1
// CHK-C-NEXT:    [[BF_SHL320:%.*]] = shl i64 [[BF_VALUE319]], 16
// CHK-C-NEXT:    [[BF_CLEAR321:%.*]] = and i64 [[BF_LOAD318]], -65537
// CHK-C-NEXT:    [[BF_SET322:%.*]] = or i64 [[BF_CLEAR321]], [[BF_SHL320]]
// CHK-C-NEXT:    store i64 [[BF_SET322]], i64* [[ATOMIC_TEMP317]], align 8
// CHK-C-NEXT:    [[TMP115:%.*]] = load i64, i64* [[ATOMIC_TEMP317]], align 8
// CHK-C-NEXT:    [[TMP116:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP113]], i64 [[TMP115]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP117]] = extractvalue { i64, i1 } [[TMP116]], 0
// CHK-C-NEXT:    [[TMP118:%.*]] = extractvalue { i64, i1 } [[TMP116]], 1
// CHK-C-NEXT:    br i1 [[TMP118]], label [[ATOMIC_EXIT330]], label [[ATOMIC_CMP323]]
// CHK-C:       atomic_cmp323:
// CHK-C-NEXT:    store i64 [[TMP117]], i64* [[ATOMIC_TEMP324]], align 8
// CHK-C-NEXT:    [[BF_LOAD325:%.*]] = load i64, i64* [[ATOMIC_TEMP324]], align 8
// CHK-C-NEXT:    [[BF_SHL326:%.*]] = shl i64 [[BF_LOAD325]], 47
// CHK-C-NEXT:    [[BF_ASHR327:%.*]] = ashr i64 [[BF_SHL326]], 63
// CHK-C-NEXT:    [[BF_CAST328:%.*]] = trunc i64 [[BF_ASHR327]] to i32
// CHK-C-NEXT:    [[CMP329:%.*]] = icmp eq i32 [[BF_CAST328]], [[TMP112]]
// CHK-C-NEXT:    br i1 [[CMP329]], label [[ATOMIC_CONT311]], label [[ATOMIC_EXIT330]]
// CHK-C:       atomic_exit330:
// CHK-C-NEXT:    [[TMP119:%.*]] = load i32, i32* [[ATMP304]], align 4
// CHK-C-NEXT:    [[TMP120:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD331:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD331]], i64* [[ATOMIC_TEMP333]], align 8
// CHK-C-NEXT:    [[BF_LOAD334:%.*]] = load i64, i64* [[ATOMIC_TEMP333]], align 8
// CHK-C-NEXT:    [[BF_SHL335:%.*]] = shl i64 [[BF_LOAD334]], 47
// CHK-C-NEXT:    [[BF_ASHR336:%.*]] = ashr i64 [[BF_SHL335]], 63
// CHK-C-NEXT:    [[BF_CAST337:%.*]] = trunc i64 [[BF_ASHR336]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST337]], i32* [[ATMP332]], align 4
// CHK-C-NEXT:    [[CMP338:%.*]] = icmp slt i32 [[BF_CAST337]], [[TMP120]]
// CHK-C-NEXT:    br i1 [[CMP338]], label [[ATOMIC_CONT339:%.*]], label [[ATOMIC_EXIT358:%.*]]
// CHK-C:       atomic_cont339:
// CHK-C-NEXT:    [[TMP121:%.*]] = phi i64 [ [[ATOMIC_LOAD331]], [[ATOMIC_EXIT330]] ], [ [[TMP125:%.*]], [[ATOMIC_CMP351:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP121]], i64* [[ATOMIC_TEMP340]], align 8
// CHK-C-NEXT:    [[BF_LOAD341:%.*]] = load i64, i64* [[ATOMIC_TEMP340]], align 8
// CHK-C-NEXT:    [[BF_SHL342:%.*]] = shl i64 [[BF_LOAD341]], 47
// CHK-C-NEXT:    [[BF_ASHR343:%.*]] = ashr i64 [[BF_SHL342]], 63
// CHK-C-NEXT:    [[BF_CAST344:%.*]] = trunc i64 [[BF_ASHR343]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST344]], i32* [[ATMP332]], align 4
// CHK-C-NEXT:    store i64 [[TMP121]], i64* [[ATOMIC_TEMP345]], align 8
// CHK-C-NEXT:    [[TMP122:%.*]] = zext i32 [[TMP120]] to i64
// CHK-C-NEXT:    [[BF_LOAD346:%.*]] = load i64, i64* [[ATOMIC_TEMP345]], align 8
// CHK-C-NEXT:    [[BF_VALUE347:%.*]] = and i64 [[TMP122]], 1
// CHK-C-NEXT:    [[BF_SHL348:%.*]] = shl i64 [[BF_VALUE347]], 16
// CHK-C-NEXT:    [[BF_CLEAR349:%.*]] = and i64 [[BF_LOAD346]], -65537
// CHK-C-NEXT:    [[BF_SET350:%.*]] = or i64 [[BF_CLEAR349]], [[BF_SHL348]]
// CHK-C-NEXT:    store i64 [[BF_SET350]], i64* [[ATOMIC_TEMP345]], align 8
// CHK-C-NEXT:    [[TMP123:%.*]] = load i64, i64* [[ATOMIC_TEMP345]], align 8
// CHK-C-NEXT:    [[TMP124:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP121]], i64 [[TMP123]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP125]] = extractvalue { i64, i1 } [[TMP124]], 0
// CHK-C-NEXT:    [[TMP126:%.*]] = extractvalue { i64, i1 } [[TMP124]], 1
// CHK-C-NEXT:    br i1 [[TMP126]], label [[ATOMIC_EXIT358]], label [[ATOMIC_CMP351]]
// CHK-C:       atomic_cmp351:
// CHK-C-NEXT:    store i64 [[TMP125]], i64* [[ATOMIC_TEMP352]], align 8
// CHK-C-NEXT:    [[BF_LOAD353:%.*]] = load i64, i64* [[ATOMIC_TEMP352]], align 8
// CHK-C-NEXT:    [[BF_SHL354:%.*]] = shl i64 [[BF_LOAD353]], 47
// CHK-C-NEXT:    [[BF_ASHR355:%.*]] = ashr i64 [[BF_SHL354]], 63
// CHK-C-NEXT:    [[BF_CAST356:%.*]] = trunc i64 [[BF_ASHR355]] to i32
// CHK-C-NEXT:    [[CMP357:%.*]] = icmp slt i32 [[BF_CAST356]], [[TMP120]]
// CHK-C-NEXT:    br i1 [[CMP357]], label [[ATOMIC_CONT339]], label [[ATOMIC_EXIT358]]
// CHK-C:       atomic_exit358:
// CHK-C-NEXT:    [[TMP127:%.*]] = load i32, i32* [[ATMP332]], align 4
// CHK-C-NEXT:    [[TMP128:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[CONV:%.*]] = sext i32 [[TMP128]] to i64
// CHK-C-NEXT:    [[ATOMIC_LOAD359:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD359]], i64* [[ATOMIC_TEMP361]], align 8
// CHK-C-NEXT:    [[BF_LOAD362:%.*]] = load i64, i64* [[ATOMIC_TEMP361]], align 8
// CHK-C-NEXT:    [[BF_SHL363:%.*]] = shl i64 [[BF_LOAD362]], 40
// CHK-C-NEXT:    [[BF_ASHR364:%.*]] = ashr i64 [[BF_SHL363]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR364]], i64* [[ATMP360]], align 8
// CHK-C-NEXT:    [[CMP365:%.*]] = icmp sgt i64 [[BF_ASHR364]], [[CONV]]
// CHK-C-NEXT:    br i1 [[CMP365]], label [[ATOMIC_CONT366:%.*]], label [[ATOMIC_EXIT383:%.*]]
// CHK-C:       atomic_cont366:
// CHK-C-NEXT:    [[TMP129:%.*]] = phi i64 [ [[ATOMIC_LOAD359]], [[ATOMIC_EXIT358]] ], [ [[TMP132:%.*]], [[ATOMIC_CMP377:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP129]], i64* [[ATOMIC_TEMP367]], align 8
// CHK-C-NEXT:    [[BF_LOAD368:%.*]] = load i64, i64* [[ATOMIC_TEMP367]], align 8
// CHK-C-NEXT:    [[BF_SHL369:%.*]] = shl i64 [[BF_LOAD368]], 40
// CHK-C-NEXT:    [[BF_ASHR370:%.*]] = ashr i64 [[BF_SHL369]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR370]], i64* [[ATMP360]], align 8
// CHK-C-NEXT:    store i64 [[TMP129]], i64* [[ATOMIC_TEMP371]], align 8
// CHK-C-NEXT:    [[BF_LOAD372:%.*]] = load i64, i64* [[ATOMIC_TEMP371]], align 8
// CHK-C-NEXT:    [[BF_VALUE373:%.*]] = and i64 [[CONV]], 127
// CHK-C-NEXT:    [[BF_SHL374:%.*]] = shl i64 [[BF_VALUE373]], 17
// CHK-C-NEXT:    [[BF_CLEAR375:%.*]] = and i64 [[BF_LOAD372]], -16646145
// CHK-C-NEXT:    [[BF_SET376:%.*]] = or i64 [[BF_CLEAR375]], [[BF_SHL374]]
// CHK-C-NEXT:    store i64 [[BF_SET376]], i64* [[ATOMIC_TEMP371]], align 8
// CHK-C-NEXT:    [[TMP130:%.*]] = load i64, i64* [[ATOMIC_TEMP371]], align 8
// CHK-C-NEXT:    [[TMP131:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP129]], i64 [[TMP130]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP132]] = extractvalue { i64, i1 } [[TMP131]], 0
// CHK-C-NEXT:    [[TMP133:%.*]] = extractvalue { i64, i1 } [[TMP131]], 1
// CHK-C-NEXT:    br i1 [[TMP133]], label [[ATOMIC_EXIT383]], label [[ATOMIC_CMP377]]
// CHK-C:       atomic_cmp377:
// CHK-C-NEXT:    store i64 [[TMP132]], i64* [[ATOMIC_TEMP378]], align 8
// CHK-C-NEXT:    [[BF_LOAD379:%.*]] = load i64, i64* [[ATOMIC_TEMP378]], align 8
// CHK-C-NEXT:    [[BF_SHL380:%.*]] = shl i64 [[BF_LOAD379]], 40
// CHK-C-NEXT:    [[BF_ASHR381:%.*]] = ashr i64 [[BF_SHL380]], 57
// CHK-C-NEXT:    [[CMP382:%.*]] = icmp sgt i64 [[BF_ASHR381]], [[CONV]]
// CHK-C-NEXT:    br i1 [[CMP382]], label [[ATOMIC_CONT366]], label [[ATOMIC_EXIT383]]
// CHK-C:       atomic_exit383:
// CHK-C-NEXT:    [[TMP134:%.*]] = load i64, i64* [[ATMP360]], align 8
// CHK-C-NEXT:    [[TMP135:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[CONV384:%.*]] = sext i32 [[TMP135]] to i64
// CHK-C-NEXT:    [[TMP136:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[CONV385:%.*]] = sext i32 [[TMP136]] to i64
// CHK-C-NEXT:    [[ATOMIC_LOAD386:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD386]], i64* [[ATOMIC_TEMP388]], align 8
// CHK-C-NEXT:    [[BF_LOAD389:%.*]] = load i64, i64* [[ATOMIC_TEMP388]], align 8
// CHK-C-NEXT:    [[BF_SHL390:%.*]] = shl i64 [[BF_LOAD389]], 40
// CHK-C-NEXT:    [[BF_ASHR391:%.*]] = ashr i64 [[BF_SHL390]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR391]], i64* [[ATMP387]], align 8
// CHK-C-NEXT:    [[CMP392:%.*]] = icmp eq i64 [[BF_ASHR391]], [[CONV385]]
// CHK-C-NEXT:    br i1 [[CMP392]], label [[ATOMIC_CONT393:%.*]], label [[ATOMIC_EXIT410:%.*]]
// CHK-C:       atomic_cont393:
// CHK-C-NEXT:    [[TMP137:%.*]] = phi i64 [ [[ATOMIC_LOAD386]], [[ATOMIC_EXIT383]] ], [ [[TMP140:%.*]], [[ATOMIC_CMP404:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP137]], i64* [[ATOMIC_TEMP394]], align 8
// CHK-C-NEXT:    [[BF_LOAD395:%.*]] = load i64, i64* [[ATOMIC_TEMP394]], align 8
// CHK-C-NEXT:    [[BF_SHL396:%.*]] = shl i64 [[BF_LOAD395]], 40
// CHK-C-NEXT:    [[BF_ASHR397:%.*]] = ashr i64 [[BF_SHL396]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR397]], i64* [[ATMP387]], align 8
// CHK-C-NEXT:    store i64 [[TMP137]], i64* [[ATOMIC_TEMP398]], align 8
// CHK-C-NEXT:    [[BF_LOAD399:%.*]] = load i64, i64* [[ATOMIC_TEMP398]], align 8
// CHK-C-NEXT:    [[BF_VALUE400:%.*]] = and i64 [[CONV384]], 127
// CHK-C-NEXT:    [[BF_SHL401:%.*]] = shl i64 [[BF_VALUE400]], 17
// CHK-C-NEXT:    [[BF_CLEAR402:%.*]] = and i64 [[BF_LOAD399]], -16646145
// CHK-C-NEXT:    [[BF_SET403:%.*]] = or i64 [[BF_CLEAR402]], [[BF_SHL401]]
// CHK-C-NEXT:    store i64 [[BF_SET403]], i64* [[ATOMIC_TEMP398]], align 8
// CHK-C-NEXT:    [[TMP138:%.*]] = load i64, i64* [[ATOMIC_TEMP398]], align 8
// CHK-C-NEXT:    [[TMP139:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP137]], i64 [[TMP138]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP140]] = extractvalue { i64, i1 } [[TMP139]], 0
// CHK-C-NEXT:    [[TMP141:%.*]] = extractvalue { i64, i1 } [[TMP139]], 1
// CHK-C-NEXT:    br i1 [[TMP141]], label [[ATOMIC_EXIT410]], label [[ATOMIC_CMP404]]
// CHK-C:       atomic_cmp404:
// CHK-C-NEXT:    store i64 [[TMP140]], i64* [[ATOMIC_TEMP405]], align 8
// CHK-C-NEXT:    [[BF_LOAD406:%.*]] = load i64, i64* [[ATOMIC_TEMP405]], align 8
// CHK-C-NEXT:    [[BF_SHL407:%.*]] = shl i64 [[BF_LOAD406]], 40
// CHK-C-NEXT:    [[BF_ASHR408:%.*]] = ashr i64 [[BF_SHL407]], 57
// CHK-C-NEXT:    [[CMP409:%.*]] = icmp eq i64 [[BF_ASHR408]], [[CONV385]]
// CHK-C-NEXT:    br i1 [[CMP409]], label [[ATOMIC_CONT393]], label [[ATOMIC_EXIT410]]
// CHK-C:       atomic_exit410:
// CHK-C-NEXT:    [[TMP142:%.*]] = load i64, i64* [[ATMP387]], align 8
// CHK-C-NEXT:    [[TMP143:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[CONV411:%.*]] = sext i32 [[TMP143]] to i64
// CHK-C-NEXT:    [[ATOMIC_LOAD412:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD412]], i64* [[ATOMIC_TEMP414]], align 8
// CHK-C-NEXT:    [[BF_LOAD415:%.*]] = load i64, i64* [[ATOMIC_TEMP414]], align 8
// CHK-C-NEXT:    [[BF_SHL416:%.*]] = shl i64 [[BF_LOAD415]], 40
// CHK-C-NEXT:    [[BF_ASHR417:%.*]] = ashr i64 [[BF_SHL416]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR417]], i64* [[ATMP413]], align 8
// CHK-C-NEXT:    [[CMP418:%.*]] = icmp slt i64 [[BF_ASHR417]], [[CONV411]]
// CHK-C-NEXT:    br i1 [[CMP418]], label [[ATOMIC_CONT419:%.*]], label [[ATOMIC_EXIT436:%.*]]
// CHK-C:       atomic_cont419:
// CHK-C-NEXT:    [[TMP144:%.*]] = phi i64 [ [[ATOMIC_LOAD412]], [[ATOMIC_EXIT410]] ], [ [[TMP147:%.*]], [[ATOMIC_CMP430:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP144]], i64* [[ATOMIC_TEMP420]], align 8
// CHK-C-NEXT:    [[BF_LOAD421:%.*]] = load i64, i64* [[ATOMIC_TEMP420]], align 8
// CHK-C-NEXT:    [[BF_SHL422:%.*]] = shl i64 [[BF_LOAD421]], 40
// CHK-C-NEXT:    [[BF_ASHR423:%.*]] = ashr i64 [[BF_SHL422]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR423]], i64* [[ATMP413]], align 8
// CHK-C-NEXT:    store i64 [[TMP144]], i64* [[ATOMIC_TEMP424]], align 8
// CHK-C-NEXT:    [[BF_LOAD425:%.*]] = load i64, i64* [[ATOMIC_TEMP424]], align 8
// CHK-C-NEXT:    [[BF_VALUE426:%.*]] = and i64 [[CONV411]], 127
// CHK-C-NEXT:    [[BF_SHL427:%.*]] = shl i64 [[BF_VALUE426]], 17
// CHK-C-NEXT:    [[BF_CLEAR428:%.*]] = and i64 [[BF_LOAD425]], -16646145
// CHK-C-NEXT:    [[BF_SET429:%.*]] = or i64 [[BF_CLEAR428]], [[BF_SHL427]]
// CHK-C-NEXT:    store i64 [[BF_SET429]], i64* [[ATOMIC_TEMP424]], align 8
// CHK-C-NEXT:    [[TMP145:%.*]] = load i64, i64* [[ATOMIC_TEMP424]], align 8
// CHK-C-NEXT:    [[TMP146:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP144]], i64 [[TMP145]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP147]] = extractvalue { i64, i1 } [[TMP146]], 0
// CHK-C-NEXT:    [[TMP148:%.*]] = extractvalue { i64, i1 } [[TMP146]], 1
// CHK-C-NEXT:    br i1 [[TMP148]], label [[ATOMIC_EXIT436]], label [[ATOMIC_CMP430]]
// CHK-C:       atomic_cmp430:
// CHK-C-NEXT:    store i64 [[TMP147]], i64* [[ATOMIC_TEMP431]], align 8
// CHK-C-NEXT:    [[BF_LOAD432:%.*]] = load i64, i64* [[ATOMIC_TEMP431]], align 8
// CHK-C-NEXT:    [[BF_SHL433:%.*]] = shl i64 [[BF_LOAD432]], 40
// CHK-C-NEXT:    [[BF_ASHR434:%.*]] = ashr i64 [[BF_SHL433]], 57
// CHK-C-NEXT:    [[CMP435:%.*]] = icmp slt i64 [[BF_ASHR434]], [[CONV411]]
// CHK-C-NEXT:    br i1 [[CMP435]], label [[ATOMIC_CONT419]], label [[ATOMIC_EXIT436]]
// CHK-C:       atomic_exit436:
// CHK-C-NEXT:    [[TMP149:%.*]] = load i64, i64* [[ATMP413]], align 8
// CHK-C-NEXT:    [[TMP150:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD437:%.*]] = load atomic i8, i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED:%.*]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2) monotonic, align 1
// CHK-C-NEXT:    [[TMP151:%.*]] = bitcast i32* [[ATOMIC_TEMP439]] to i8*
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD437]], i8* [[TMP151]], align 1
// CHK-C-NEXT:    [[BF_LOAD440:%.*]] = load i8, i8* [[TMP151]], align 1
// CHK-C-NEXT:    [[BF_SHL441:%.*]] = shl i8 [[BF_LOAD440]], 7
// CHK-C-NEXT:    [[BF_ASHR442:%.*]] = ashr i8 [[BF_SHL441]], 7
// CHK-C-NEXT:    [[BF_CAST443:%.*]] = sext i8 [[BF_ASHR442]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST443]], i32* [[ATMP438]], align 4
// CHK-C-NEXT:    [[CMP444:%.*]] = icmp sgt i32 [[BF_CAST443]], [[TMP150]]
// CHK-C-NEXT:    br i1 [[CMP444]], label [[ATOMIC_CONT445:%.*]], label [[ATOMIC_EXIT463:%.*]]
// CHK-C:       atomic_cont445:
// CHK-C-NEXT:    [[TMP152:%.*]] = phi i8 [ [[ATOMIC_LOAD437]], [[ATOMIC_EXIT436]] ], [ [[TMP158:%.*]], [[ATOMIC_CMP456:%.*]] ]
// CHK-C-NEXT:    [[TMP153:%.*]] = bitcast i32* [[ATOMIC_TEMP446]] to i8*
// CHK-C-NEXT:    store i8 [[TMP152]], i8* [[TMP153]], align 1
// CHK-C-NEXT:    [[BF_LOAD447:%.*]] = load i8, i8* [[TMP153]], align 1
// CHK-C-NEXT:    [[BF_SHL448:%.*]] = shl i8 [[BF_LOAD447]], 7
// CHK-C-NEXT:    [[BF_ASHR449:%.*]] = ashr i8 [[BF_SHL448]], 7
// CHK-C-NEXT:    [[BF_CAST450:%.*]] = sext i8 [[BF_ASHR449]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST450]], i32* [[ATMP438]], align 4
// CHK-C-NEXT:    [[TMP154:%.*]] = bitcast i32* [[ATOMIC_TEMP451]] to i8*
// CHK-C-NEXT:    store i8 [[TMP152]], i8* [[TMP154]], align 1
// CHK-C-NEXT:    [[TMP155:%.*]] = trunc i32 [[TMP150]] to i8
// CHK-C-NEXT:    [[BF_LOAD452:%.*]] = load i8, i8* [[TMP154]], align 1
// CHK-C-NEXT:    [[BF_VALUE453:%.*]] = and i8 [[TMP155]], 1
// CHK-C-NEXT:    [[BF_CLEAR454:%.*]] = and i8 [[BF_LOAD452]], -2
// CHK-C-NEXT:    [[BF_SET455:%.*]] = or i8 [[BF_CLEAR454]], [[BF_VALUE453]]
// CHK-C-NEXT:    store i8 [[BF_SET455]], i8* [[TMP154]], align 1
// CHK-C-NEXT:    [[TMP156:%.*]] = load i8, i8* [[TMP154]], align 1
// CHK-C-NEXT:    [[TMP157:%.*]] = cmpxchg i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2), i8 [[TMP152]], i8 [[TMP156]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP158]] = extractvalue { i8, i1 } [[TMP157]], 0
// CHK-C-NEXT:    [[TMP159:%.*]] = extractvalue { i8, i1 } [[TMP157]], 1
// CHK-C-NEXT:    br i1 [[TMP159]], label [[ATOMIC_EXIT463]], label [[ATOMIC_CMP456]]
// CHK-C:       atomic_cmp456:
// CHK-C-NEXT:    [[TMP160:%.*]] = bitcast i32* [[ATOMIC_TEMP457]] to i8*
// CHK-C-NEXT:    store i8 [[TMP158]], i8* [[TMP160]], align 1
// CHK-C-NEXT:    [[BF_LOAD458:%.*]] = load i8, i8* [[TMP160]], align 1
// CHK-C-NEXT:    [[BF_SHL459:%.*]] = shl i8 [[BF_LOAD458]], 7
// CHK-C-NEXT:    [[BF_ASHR460:%.*]] = ashr i8 [[BF_SHL459]], 7
// CHK-C-NEXT:    [[BF_CAST461:%.*]] = sext i8 [[BF_ASHR460]] to i32
// CHK-C-NEXT:    [[CMP462:%.*]] = icmp sgt i32 [[BF_CAST461]], [[TMP150]]
// CHK-C-NEXT:    br i1 [[CMP462]], label [[ATOMIC_CONT445]], label [[ATOMIC_EXIT463]]
// CHK-C:       atomic_exit463:
// CHK-C-NEXT:    [[TMP161:%.*]] = load i32, i32* [[ATMP438]], align 4
// CHK-C-NEXT:    [[TMP162:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP163:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD464:%.*]] = load atomic i8, i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2) monotonic, align 1
// CHK-C-NEXT:    [[TMP164:%.*]] = bitcast i32* [[ATOMIC_TEMP466]] to i8*
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD464]], i8* [[TMP164]], align 1
// CHK-C-NEXT:    [[BF_LOAD467:%.*]] = load i8, i8* [[TMP164]], align 1
// CHK-C-NEXT:    [[BF_SHL468:%.*]] = shl i8 [[BF_LOAD467]], 7
// CHK-C-NEXT:    [[BF_ASHR469:%.*]] = ashr i8 [[BF_SHL468]], 7
// CHK-C-NEXT:    [[BF_CAST470:%.*]] = sext i8 [[BF_ASHR469]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST470]], i32* [[ATMP465]], align 4
// CHK-C-NEXT:    [[CMP471:%.*]] = icmp eq i32 [[BF_CAST470]], [[TMP163]]
// CHK-C-NEXT:    br i1 [[CMP471]], label [[ATOMIC_CONT472:%.*]], label [[ATOMIC_EXIT490:%.*]]
// CHK-C:       atomic_cont472:
// CHK-C-NEXT:    [[TMP165:%.*]] = phi i8 [ [[ATOMIC_LOAD464]], [[ATOMIC_EXIT463]] ], [ [[TMP171:%.*]], [[ATOMIC_CMP483:%.*]] ]
// CHK-C-NEXT:    [[TMP166:%.*]] = bitcast i32* [[ATOMIC_TEMP473]] to i8*
// CHK-C-NEXT:    store i8 [[TMP165]], i8* [[TMP166]], align 1
// CHK-C-NEXT:    [[BF_LOAD474:%.*]] = load i8, i8* [[TMP166]], align 1
// CHK-C-NEXT:    [[BF_SHL475:%.*]] = shl i8 [[BF_LOAD474]], 7
// CHK-C-NEXT:    [[BF_ASHR476:%.*]] = ashr i8 [[BF_SHL475]], 7
// CHK-C-NEXT:    [[BF_CAST477:%.*]] = sext i8 [[BF_ASHR476]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST477]], i32* [[ATMP465]], align 4
// CHK-C-NEXT:    [[TMP167:%.*]] = bitcast i32* [[ATOMIC_TEMP478]] to i8*
// CHK-C-NEXT:    store i8 [[TMP165]], i8* [[TMP167]], align 1
// CHK-C-NEXT:    [[TMP168:%.*]] = trunc i32 [[TMP162]] to i8
// CHK-C-NEXT:    [[BF_LOAD479:%.*]] = load i8, i8* [[TMP167]], align 1
// CHK-C-NEXT:    [[BF_VALUE480:%.*]] = and i8 [[TMP168]], 1
// CHK-C-NEXT:    [[BF_CLEAR481:%.*]] = and i8 [[BF_LOAD479]], -2
// CHK-C-NEXT:    [[BF_SET482:%.*]] = or i8 [[BF_CLEAR481]], [[BF_VALUE480]]
// CHK-C-NEXT:    store i8 [[BF_SET482]], i8* [[TMP167]], align 1
// CHK-C-NEXT:    [[TMP169:%.*]] = load i8, i8* [[TMP167]], align 1
// CHK-C-NEXT:    [[TMP170:%.*]] = cmpxchg i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2), i8 [[TMP165]], i8 [[TMP169]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP171]] = extractvalue { i8, i1 } [[TMP170]], 0
// CHK-C-NEXT:    [[TMP172:%.*]] = extractvalue { i8, i1 } [[TMP170]], 1
// CHK-C-NEXT:    br i1 [[TMP172]], label [[ATOMIC_EXIT490]], label [[ATOMIC_CMP483]]
// CHK-C:       atomic_cmp483:
// CHK-C-NEXT:    [[TMP173:%.*]] = bitcast i32* [[ATOMIC_TEMP484]] to i8*
// CHK-C-NEXT:    store i8 [[TMP171]], i8* [[TMP173]], align 1
// CHK-C-NEXT:    [[BF_LOAD485:%.*]] = load i8, i8* [[TMP173]], align 1
// CHK-C-NEXT:    [[BF_SHL486:%.*]] = shl i8 [[BF_LOAD485]], 7
// CHK-C-NEXT:    [[BF_ASHR487:%.*]] = ashr i8 [[BF_SHL486]], 7
// CHK-C-NEXT:    [[BF_CAST488:%.*]] = sext i8 [[BF_ASHR487]] to i32
// CHK-C-NEXT:    [[CMP489:%.*]] = icmp eq i32 [[BF_CAST488]], [[TMP163]]
// CHK-C-NEXT:    br i1 [[CMP489]], label [[ATOMIC_CONT472]], label [[ATOMIC_EXIT490]]
// CHK-C:       atomic_exit490:
// CHK-C-NEXT:    [[TMP174:%.*]] = load i32, i32* [[ATMP465]], align 4
// CHK-C-NEXT:    [[TMP175:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD491:%.*]] = load atomic i8, i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2) monotonic, align 1
// CHK-C-NEXT:    [[TMP176:%.*]] = bitcast i32* [[ATOMIC_TEMP493]] to i8*
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD491]], i8* [[TMP176]], align 1
// CHK-C-NEXT:    [[BF_LOAD494:%.*]] = load i8, i8* [[TMP176]], align 1
// CHK-C-NEXT:    [[BF_SHL495:%.*]] = shl i8 [[BF_LOAD494]], 7
// CHK-C-NEXT:    [[BF_ASHR496:%.*]] = ashr i8 [[BF_SHL495]], 7
// CHK-C-NEXT:    [[BF_CAST497:%.*]] = sext i8 [[BF_ASHR496]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST497]], i32* [[ATMP492]], align 4
// CHK-C-NEXT:    [[CMP498:%.*]] = icmp slt i32 [[BF_CAST497]], [[TMP175]]
// CHK-C-NEXT:    br i1 [[CMP498]], label [[ATOMIC_CONT499:%.*]], label [[ATOMIC_EXIT517:%.*]]
// CHK-C:       atomic_cont499:
// CHK-C-NEXT:    [[TMP177:%.*]] = phi i8 [ [[ATOMIC_LOAD491]], [[ATOMIC_EXIT490]] ], [ [[TMP183:%.*]], [[ATOMIC_CMP510:%.*]] ]
// CHK-C-NEXT:    [[TMP178:%.*]] = bitcast i32* [[ATOMIC_TEMP500]] to i8*
// CHK-C-NEXT:    store i8 [[TMP177]], i8* [[TMP178]], align 1
// CHK-C-NEXT:    [[BF_LOAD501:%.*]] = load i8, i8* [[TMP178]], align 1
// CHK-C-NEXT:    [[BF_SHL502:%.*]] = shl i8 [[BF_LOAD501]], 7
// CHK-C-NEXT:    [[BF_ASHR503:%.*]] = ashr i8 [[BF_SHL502]], 7
// CHK-C-NEXT:    [[BF_CAST504:%.*]] = sext i8 [[BF_ASHR503]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST504]], i32* [[ATMP492]], align 4
// CHK-C-NEXT:    [[TMP179:%.*]] = bitcast i32* [[ATOMIC_TEMP505]] to i8*
// CHK-C-NEXT:    store i8 [[TMP177]], i8* [[TMP179]], align 1
// CHK-C-NEXT:    [[TMP180:%.*]] = trunc i32 [[TMP175]] to i8
// CHK-C-NEXT:    [[BF_LOAD506:%.*]] = load i8, i8* [[TMP179]], align 1
// CHK-C-NEXT:    [[BF_VALUE507:%.*]] = and i8 [[TMP180]], 1
// CHK-C-NEXT:    [[BF_CLEAR508:%.*]] = and i8 [[BF_LOAD506]], -2
// CHK-C-NEXT:    [[BF_SET509:%.*]] = or i8 [[BF_CLEAR508]], [[BF_VALUE507]]
// CHK-C-NEXT:    store i8 [[BF_SET509]], i8* [[TMP179]], align 1
// CHK-C-NEXT:    [[TMP181:%.*]] = load i8, i8* [[TMP179]], align 1
// CHK-C-NEXT:    [[TMP182:%.*]] = cmpxchg i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2), i8 [[TMP177]], i8 [[TMP181]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP183]] = extractvalue { i8, i1 } [[TMP182]], 0
// CHK-C-NEXT:    [[TMP184:%.*]] = extractvalue { i8, i1 } [[TMP182]], 1
// CHK-C-NEXT:    br i1 [[TMP184]], label [[ATOMIC_EXIT517]], label [[ATOMIC_CMP510]]
// CHK-C:       atomic_cmp510:
// CHK-C-NEXT:    [[TMP185:%.*]] = bitcast i32* [[ATOMIC_TEMP511]] to i8*
// CHK-C-NEXT:    store i8 [[TMP183]], i8* [[TMP185]], align 1
// CHK-C-NEXT:    [[BF_LOAD512:%.*]] = load i8, i8* [[TMP185]], align 1
// CHK-C-NEXT:    [[BF_SHL513:%.*]] = shl i8 [[BF_LOAD512]], 7
// CHK-C-NEXT:    [[BF_ASHR514:%.*]] = ashr i8 [[BF_SHL513]], 7
// CHK-C-NEXT:    [[BF_CAST515:%.*]] = sext i8 [[BF_ASHR514]] to i32
// CHK-C-NEXT:    [[CMP516:%.*]] = icmp slt i32 [[BF_CAST515]], [[TMP175]]
// CHK-C-NEXT:    br i1 [[CMP516]], label [[ATOMIC_CONT499]], label [[ATOMIC_EXIT517]]
// CHK-C:       atomic_exit517:
// CHK-C-NEXT:    [[TMP186:%.*]] = load i32, i32* [[ATMP492]], align 4
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z13test_bitfieldv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP1:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP5:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP7:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP13:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP14:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP20:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP24:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP30:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP37:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP38:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP44:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP48:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP54:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP61:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP62:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP67:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP70:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP77:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP83:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP84:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP89:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP92:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP99:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP105:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP106:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP111:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP114:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP121:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP127:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP128:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP133:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP137:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP144:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP151:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP152:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP158:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP162:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP169:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP176:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP177:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP183:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP187:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP194:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP201:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP202:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP208:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP212:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP219:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP226:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP227:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP233:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP237:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP244:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP251:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP252:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP258:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP262:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP269:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP276:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP277:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP284:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP289:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP296:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP304:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP305:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP312:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP317:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP324:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP332:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP333:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP340:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP345:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP352:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP360:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP361:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP367:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP371:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP378:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP387:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP388:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP394:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP398:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP405:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP413:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP414:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP420:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP424:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP431:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP438:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP439:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP446:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP451:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP457:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP465:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP466:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP473:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP478:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP484:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP492:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP493:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP500:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP505:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP511:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i32, i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD]], i32* [[ATOMIC_TEMP]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD:%.*]] = load i32, i32* [[ATOMIC_TEMP]], align 4
// CHK-CXX-NEXT:    [[BF_SHL:%.*]] = shl i32 [[BF_LOAD]], 1
// CHK-CXX-NEXT:    [[BF_ASHR:%.*]] = ashr i32 [[BF_SHL]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR]], i32* [[TMP]], align 4
// CHK-CXX-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[BF_ASHR]], [[TMP0]]
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP1:%.*]] = phi i32 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP1]], i32* [[ATOMIC_TEMP1]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD2:%.*]] = load i32, i32* [[ATOMIC_TEMP1]], align 4
// CHK-CXX-NEXT:    [[BF_SHL3:%.*]] = shl i32 [[BF_LOAD2]], 1
// CHK-CXX-NEXT:    [[BF_ASHR4:%.*]] = ashr i32 [[BF_SHL3]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR4]], i32* [[TMP]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP1]], i32* [[ATOMIC_TEMP5]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD6:%.*]] = load i32, i32* [[ATOMIC_TEMP5]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE:%.*]] = and i32 [[TMP0]], 2147483647
// CHK-CXX-NEXT:    [[BF_CLEAR:%.*]] = and i32 [[BF_LOAD6]], -2147483648
// CHK-CXX-NEXT:    [[BF_SET:%.*]] = or i32 [[BF_CLEAR]], [[BF_VALUE]]
// CHK-CXX-NEXT:    store i32 [[BF_SET]], i32* [[ATOMIC_TEMP5]], align 4
// CHK-CXX-NEXT:    [[TMP2:%.*]] = load i32, i32* [[ATOMIC_TEMP5]], align 4
// CHK-CXX-NEXT:    [[TMP3:%.*]] = cmpxchg i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*), i32 [[TMP1]], i32 [[TMP2]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP4]] = extractvalue { i32, i1 } [[TMP3]], 0
// CHK-CXX-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i1 } [[TMP3]], 1
// CHK-CXX-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    store i32 [[TMP4]], i32* [[ATOMIC_TEMP7]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD8:%.*]] = load i32, i32* [[ATOMIC_TEMP7]], align 4
// CHK-CXX-NEXT:    [[BF_SHL9:%.*]] = shl i32 [[BF_LOAD8]], 1
// CHK-CXX-NEXT:    [[BF_ASHR10:%.*]] = ashr i32 [[BF_SHL9]], 1
// CHK-CXX-NEXT:    [[CMP11:%.*]] = icmp sgt i32 [[BF_ASHR10]], [[TMP0]]
// CHK-CXX-NEXT:    br i1 [[CMP11]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP6:%.*]] = load i32, i32* [[TMP]], align 4
// CHK-CXX-NEXT:    [[TMP7:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP8:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD12:%.*]] = load atomic i32, i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD12]], i32* [[ATOMIC_TEMP14]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD15:%.*]] = load i32, i32* [[ATOMIC_TEMP14]], align 4
// CHK-CXX-NEXT:    [[BF_SHL16:%.*]] = shl i32 [[BF_LOAD15]], 1
// CHK-CXX-NEXT:    [[BF_ASHR17:%.*]] = ashr i32 [[BF_SHL16]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR17]], i32* [[ATMP13]], align 4
// CHK-CXX-NEXT:    [[CMP18:%.*]] = icmp eq i32 [[BF_ASHR17]], [[TMP8]]
// CHK-CXX-NEXT:    br i1 [[CMP18]], label [[ATOMIC_CONT19:%.*]], label [[ATOMIC_EXIT35:%.*]]
// CHK-CXX:       atomic_cont19:
// CHK-CXX-NEXT:    [[TMP9:%.*]] = phi i32 [ [[ATOMIC_LOAD12]], [[ATOMIC_EXIT]] ], [ [[TMP12:%.*]], [[ATOMIC_CMP29:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP9]], i32* [[ATOMIC_TEMP20]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD21:%.*]] = load i32, i32* [[ATOMIC_TEMP20]], align 4
// CHK-CXX-NEXT:    [[BF_SHL22:%.*]] = shl i32 [[BF_LOAD21]], 1
// CHK-CXX-NEXT:    [[BF_ASHR23:%.*]] = ashr i32 [[BF_SHL22]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR23]], i32* [[ATMP13]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP9]], i32* [[ATOMIC_TEMP24]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD25:%.*]] = load i32, i32* [[ATOMIC_TEMP24]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE26:%.*]] = and i32 [[TMP7]], 2147483647
// CHK-CXX-NEXT:    [[BF_CLEAR27:%.*]] = and i32 [[BF_LOAD25]], -2147483648
// CHK-CXX-NEXT:    [[BF_SET28:%.*]] = or i32 [[BF_CLEAR27]], [[BF_VALUE26]]
// CHK-CXX-NEXT:    store i32 [[BF_SET28]], i32* [[ATOMIC_TEMP24]], align 4
// CHK-CXX-NEXT:    [[TMP10:%.*]] = load i32, i32* [[ATOMIC_TEMP24]], align 4
// CHK-CXX-NEXT:    [[TMP11:%.*]] = cmpxchg i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*), i32 [[TMP9]], i32 [[TMP10]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP12]] = extractvalue { i32, i1 } [[TMP11]], 0
// CHK-CXX-NEXT:    [[TMP13:%.*]] = extractvalue { i32, i1 } [[TMP11]], 1
// CHK-CXX-NEXT:    br i1 [[TMP13]], label [[ATOMIC_EXIT35]], label [[ATOMIC_CMP29]]
// CHK-CXX:       atomic_cmp29:
// CHK-CXX-NEXT:    store i32 [[TMP12]], i32* [[ATOMIC_TEMP30]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD31:%.*]] = load i32, i32* [[ATOMIC_TEMP30]], align 4
// CHK-CXX-NEXT:    [[BF_SHL32:%.*]] = shl i32 [[BF_LOAD31]], 1
// CHK-CXX-NEXT:    [[BF_ASHR33:%.*]] = ashr i32 [[BF_SHL32]], 1
// CHK-CXX-NEXT:    [[CMP34:%.*]] = icmp eq i32 [[BF_ASHR33]], [[TMP8]]
// CHK-CXX-NEXT:    br i1 [[CMP34]], label [[ATOMIC_CONT19]], label [[ATOMIC_EXIT35]]
// CHK-CXX:       atomic_exit35:
// CHK-CXX-NEXT:    [[TMP14:%.*]] = load i32, i32* [[ATMP13]], align 4
// CHK-CXX-NEXT:    [[TMP15:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD36:%.*]] = load atomic i32, i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD36]], i32* [[ATOMIC_TEMP38]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD39:%.*]] = load i32, i32* [[ATOMIC_TEMP38]], align 4
// CHK-CXX-NEXT:    [[BF_SHL40:%.*]] = shl i32 [[BF_LOAD39]], 1
// CHK-CXX-NEXT:    [[BF_ASHR41:%.*]] = ashr i32 [[BF_SHL40]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR41]], i32* [[ATMP37]], align 4
// CHK-CXX-NEXT:    [[CMP42:%.*]] = icmp slt i32 [[BF_ASHR41]], [[TMP15]]
// CHK-CXX-NEXT:    br i1 [[CMP42]], label [[ATOMIC_CONT43:%.*]], label [[ATOMIC_EXIT59:%.*]]
// CHK-CXX:       atomic_cont43:
// CHK-CXX-NEXT:    [[TMP16:%.*]] = phi i32 [ [[ATOMIC_LOAD36]], [[ATOMIC_EXIT35]] ], [ [[TMP19:%.*]], [[ATOMIC_CMP53:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP16]], i32* [[ATOMIC_TEMP44]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD45:%.*]] = load i32, i32* [[ATOMIC_TEMP44]], align 4
// CHK-CXX-NEXT:    [[BF_SHL46:%.*]] = shl i32 [[BF_LOAD45]], 1
// CHK-CXX-NEXT:    [[BF_ASHR47:%.*]] = ashr i32 [[BF_SHL46]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR47]], i32* [[ATMP37]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP16]], i32* [[ATOMIC_TEMP48]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD49:%.*]] = load i32, i32* [[ATOMIC_TEMP48]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE50:%.*]] = and i32 [[TMP15]], 2147483647
// CHK-CXX-NEXT:    [[BF_CLEAR51:%.*]] = and i32 [[BF_LOAD49]], -2147483648
// CHK-CXX-NEXT:    [[BF_SET52:%.*]] = or i32 [[BF_CLEAR51]], [[BF_VALUE50]]
// CHK-CXX-NEXT:    store i32 [[BF_SET52]], i32* [[ATOMIC_TEMP48]], align 4
// CHK-CXX-NEXT:    [[TMP17:%.*]] = load i32, i32* [[ATOMIC_TEMP48]], align 4
// CHK-CXX-NEXT:    [[TMP18:%.*]] = cmpxchg i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*), i32 [[TMP16]], i32 [[TMP17]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP19]] = extractvalue { i32, i1 } [[TMP18]], 0
// CHK-CXX-NEXT:    [[TMP20:%.*]] = extractvalue { i32, i1 } [[TMP18]], 1
// CHK-CXX-NEXT:    br i1 [[TMP20]], label [[ATOMIC_EXIT59]], label [[ATOMIC_CMP53]]
// CHK-CXX:       atomic_cmp53:
// CHK-CXX-NEXT:    store i32 [[TMP19]], i32* [[ATOMIC_TEMP54]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD55:%.*]] = load i32, i32* [[ATOMIC_TEMP54]], align 4
// CHK-CXX-NEXT:    [[BF_SHL56:%.*]] = shl i32 [[BF_LOAD55]], 1
// CHK-CXX-NEXT:    [[BF_ASHR57:%.*]] = ashr i32 [[BF_SHL56]], 1
// CHK-CXX-NEXT:    [[CMP58:%.*]] = icmp slt i32 [[BF_ASHR57]], [[TMP15]]
// CHK-CXX-NEXT:    br i1 [[CMP58]], label [[ATOMIC_CONT43]], label [[ATOMIC_EXIT59]]
// CHK-CXX:       atomic_exit59:
// CHK-CXX-NEXT:    [[TMP21:%.*]] = load i32, i32* [[ATMP37]], align 4
// CHK-CXX-NEXT:    [[TMP22:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD60:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS2:%.*]], %struct.BitFields2* @bfx2, i32 0, i32 0) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD60]], i32* [[ATOMIC_TEMP62]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD63:%.*]] = load i32, i32* [[ATOMIC_TEMP62]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR64:%.*]] = ashr i32 [[BF_LOAD63]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR64]], i32* [[ATMP61]], align 4
// CHK-CXX-NEXT:    [[CMP65:%.*]] = icmp sgt i32 [[BF_ASHR64]], [[TMP22]]
// CHK-CXX-NEXT:    br i1 [[CMP65]], label [[ATOMIC_CONT66:%.*]], label [[ATOMIC_EXIT81:%.*]]
// CHK-CXX:       atomic_cont66:
// CHK-CXX-NEXT:    [[TMP23:%.*]] = phi i32 [ [[ATOMIC_LOAD60]], [[ATOMIC_EXIT59]] ], [ [[TMP26:%.*]], [[ATOMIC_CMP76:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP23]], i32* [[ATOMIC_TEMP67]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD68:%.*]] = load i32, i32* [[ATOMIC_TEMP67]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR69:%.*]] = ashr i32 [[BF_LOAD68]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR69]], i32* [[ATMP61]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP23]], i32* [[ATOMIC_TEMP70]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD71:%.*]] = load i32, i32* [[ATOMIC_TEMP70]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE72:%.*]] = and i32 [[TMP22]], 1
// CHK-CXX-NEXT:    [[BF_SHL73:%.*]] = shl i32 [[BF_VALUE72]], 31
// CHK-CXX-NEXT:    [[BF_CLEAR74:%.*]] = and i32 [[BF_LOAD71]], 2147483647
// CHK-CXX-NEXT:    [[BF_SET75:%.*]] = or i32 [[BF_CLEAR74]], [[BF_SHL73]]
// CHK-CXX-NEXT:    store i32 [[BF_SET75]], i32* [[ATOMIC_TEMP70]], align 4
// CHK-CXX-NEXT:    [[TMP24:%.*]] = load i32, i32* [[ATOMIC_TEMP70]], align 4
// CHK-CXX-NEXT:    [[TMP25:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0), i32 [[TMP23]], i32 [[TMP24]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP26]] = extractvalue { i32, i1 } [[TMP25]], 0
// CHK-CXX-NEXT:    [[TMP27:%.*]] = extractvalue { i32, i1 } [[TMP25]], 1
// CHK-CXX-NEXT:    br i1 [[TMP27]], label [[ATOMIC_EXIT81]], label [[ATOMIC_CMP76]]
// CHK-CXX:       atomic_cmp76:
// CHK-CXX-NEXT:    store i32 [[TMP26]], i32* [[ATOMIC_TEMP77]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD78:%.*]] = load i32, i32* [[ATOMIC_TEMP77]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR79:%.*]] = ashr i32 [[BF_LOAD78]], 31
// CHK-CXX-NEXT:    [[CMP80:%.*]] = icmp sgt i32 [[BF_ASHR79]], [[TMP22]]
// CHK-CXX-NEXT:    br i1 [[CMP80]], label [[ATOMIC_CONT66]], label [[ATOMIC_EXIT81]]
// CHK-CXX:       atomic_exit81:
// CHK-CXX-NEXT:    [[TMP28:%.*]] = load i32, i32* [[ATMP61]], align 4
// CHK-CXX-NEXT:    [[TMP29:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP30:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD82:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD82]], i32* [[ATOMIC_TEMP84]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD85:%.*]] = load i32, i32* [[ATOMIC_TEMP84]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR86:%.*]] = ashr i32 [[BF_LOAD85]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR86]], i32* [[ATMP83]], align 4
// CHK-CXX-NEXT:    [[CMP87:%.*]] = icmp eq i32 [[BF_ASHR86]], [[TMP30]]
// CHK-CXX-NEXT:    br i1 [[CMP87]], label [[ATOMIC_CONT88:%.*]], label [[ATOMIC_EXIT103:%.*]]
// CHK-CXX:       atomic_cont88:
// CHK-CXX-NEXT:    [[TMP31:%.*]] = phi i32 [ [[ATOMIC_LOAD82]], [[ATOMIC_EXIT81]] ], [ [[TMP34:%.*]], [[ATOMIC_CMP98:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP31]], i32* [[ATOMIC_TEMP89]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD90:%.*]] = load i32, i32* [[ATOMIC_TEMP89]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR91:%.*]] = ashr i32 [[BF_LOAD90]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR91]], i32* [[ATMP83]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP31]], i32* [[ATOMIC_TEMP92]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD93:%.*]] = load i32, i32* [[ATOMIC_TEMP92]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE94:%.*]] = and i32 [[TMP29]], 1
// CHK-CXX-NEXT:    [[BF_SHL95:%.*]] = shl i32 [[BF_VALUE94]], 31
// CHK-CXX-NEXT:    [[BF_CLEAR96:%.*]] = and i32 [[BF_LOAD93]], 2147483647
// CHK-CXX-NEXT:    [[BF_SET97:%.*]] = or i32 [[BF_CLEAR96]], [[BF_SHL95]]
// CHK-CXX-NEXT:    store i32 [[BF_SET97]], i32* [[ATOMIC_TEMP92]], align 4
// CHK-CXX-NEXT:    [[TMP32:%.*]] = load i32, i32* [[ATOMIC_TEMP92]], align 4
// CHK-CXX-NEXT:    [[TMP33:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0), i32 [[TMP31]], i32 [[TMP32]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP34]] = extractvalue { i32, i1 } [[TMP33]], 0
// CHK-CXX-NEXT:    [[TMP35:%.*]] = extractvalue { i32, i1 } [[TMP33]], 1
// CHK-CXX-NEXT:    br i1 [[TMP35]], label [[ATOMIC_EXIT103]], label [[ATOMIC_CMP98]]
// CHK-CXX:       atomic_cmp98:
// CHK-CXX-NEXT:    store i32 [[TMP34]], i32* [[ATOMIC_TEMP99]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD100:%.*]] = load i32, i32* [[ATOMIC_TEMP99]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR101:%.*]] = ashr i32 [[BF_LOAD100]], 31
// CHK-CXX-NEXT:    [[CMP102:%.*]] = icmp eq i32 [[BF_ASHR101]], [[TMP30]]
// CHK-CXX-NEXT:    br i1 [[CMP102]], label [[ATOMIC_CONT88]], label [[ATOMIC_EXIT103]]
// CHK-CXX:       atomic_exit103:
// CHK-CXX-NEXT:    [[TMP36:%.*]] = load i32, i32* [[ATMP83]], align 4
// CHK-CXX-NEXT:    [[TMP37:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD104:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD104]], i32* [[ATOMIC_TEMP106]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD107:%.*]] = load i32, i32* [[ATOMIC_TEMP106]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR108:%.*]] = ashr i32 [[BF_LOAD107]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR108]], i32* [[ATMP105]], align 4
// CHK-CXX-NEXT:    [[CMP109:%.*]] = icmp slt i32 [[BF_ASHR108]], [[TMP37]]
// CHK-CXX-NEXT:    br i1 [[CMP109]], label [[ATOMIC_CONT110:%.*]], label [[ATOMIC_EXIT125:%.*]]
// CHK-CXX:       atomic_cont110:
// CHK-CXX-NEXT:    [[TMP38:%.*]] = phi i32 [ [[ATOMIC_LOAD104]], [[ATOMIC_EXIT103]] ], [ [[TMP41:%.*]], [[ATOMIC_CMP120:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP38]], i32* [[ATOMIC_TEMP111]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD112:%.*]] = load i32, i32* [[ATOMIC_TEMP111]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR113:%.*]] = ashr i32 [[BF_LOAD112]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR113]], i32* [[ATMP105]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP38]], i32* [[ATOMIC_TEMP114]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD115:%.*]] = load i32, i32* [[ATOMIC_TEMP114]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE116:%.*]] = and i32 [[TMP37]], 1
// CHK-CXX-NEXT:    [[BF_SHL117:%.*]] = shl i32 [[BF_VALUE116]], 31
// CHK-CXX-NEXT:    [[BF_CLEAR118:%.*]] = and i32 [[BF_LOAD115]], 2147483647
// CHK-CXX-NEXT:    [[BF_SET119:%.*]] = or i32 [[BF_CLEAR118]], [[BF_SHL117]]
// CHK-CXX-NEXT:    store i32 [[BF_SET119]], i32* [[ATOMIC_TEMP114]], align 4
// CHK-CXX-NEXT:    [[TMP39:%.*]] = load i32, i32* [[ATOMIC_TEMP114]], align 4
// CHK-CXX-NEXT:    [[TMP40:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0), i32 [[TMP38]], i32 [[TMP39]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP41]] = extractvalue { i32, i1 } [[TMP40]], 0
// CHK-CXX-NEXT:    [[TMP42:%.*]] = extractvalue { i32, i1 } [[TMP40]], 1
// CHK-CXX-NEXT:    br i1 [[TMP42]], label [[ATOMIC_EXIT125]], label [[ATOMIC_CMP120]]
// CHK-CXX:       atomic_cmp120:
// CHK-CXX-NEXT:    store i32 [[TMP41]], i32* [[ATOMIC_TEMP121]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD122:%.*]] = load i32, i32* [[ATOMIC_TEMP121]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR123:%.*]] = ashr i32 [[BF_LOAD122]], 31
// CHK-CXX-NEXT:    [[CMP124:%.*]] = icmp slt i32 [[BF_ASHR123]], [[TMP37]]
// CHK-CXX-NEXT:    br i1 [[CMP124]], label [[ATOMIC_CONT110]], label [[ATOMIC_EXIT125]]
// CHK-CXX:       atomic_exit125:
// CHK-CXX-NEXT:    [[TMP43:%.*]] = load i32, i32* [[ATMP105]], align 4
// CHK-CXX-NEXT:    [[TMP44:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD126:%.*]] = load atomic i8, i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3) monotonic, align 1
// CHK-CXX-NEXT:    [[TMP45:%.*]] = bitcast i32* [[ATOMIC_TEMP128]] to i8*
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD126]], i8* [[TMP45]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD129:%.*]] = load i8, i8* [[TMP45]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR130:%.*]] = ashr i8 [[BF_LOAD129]], 7
// CHK-CXX-NEXT:    [[BF_CAST:%.*]] = sext i8 [[BF_ASHR130]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST]], i32* [[ATMP127]], align 4
// CHK-CXX-NEXT:    [[CMP131:%.*]] = icmp sgt i32 [[BF_CAST]], [[TMP44]]
// CHK-CXX-NEXT:    br i1 [[CMP131]], label [[ATOMIC_CONT132:%.*]], label [[ATOMIC_EXIT149:%.*]]
// CHK-CXX:       atomic_cont132:
// CHK-CXX-NEXT:    [[TMP46:%.*]] = phi i8 [ [[ATOMIC_LOAD126]], [[ATOMIC_EXIT125]] ], [ [[TMP52:%.*]], [[ATOMIC_CMP143:%.*]] ]
// CHK-CXX-NEXT:    [[TMP47:%.*]] = bitcast i32* [[ATOMIC_TEMP133]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP46]], i8* [[TMP47]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD134:%.*]] = load i8, i8* [[TMP47]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR135:%.*]] = ashr i8 [[BF_LOAD134]], 7
// CHK-CXX-NEXT:    [[BF_CAST136:%.*]] = sext i8 [[BF_ASHR135]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST136]], i32* [[ATMP127]], align 4
// CHK-CXX-NEXT:    [[TMP48:%.*]] = bitcast i32* [[ATOMIC_TEMP137]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP46]], i8* [[TMP48]], align 1
// CHK-CXX-NEXT:    [[TMP49:%.*]] = trunc i32 [[TMP44]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD138:%.*]] = load i8, i8* [[TMP48]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE139:%.*]] = and i8 [[TMP49]], 1
// CHK-CXX-NEXT:    [[BF_SHL140:%.*]] = shl i8 [[BF_VALUE139]], 7
// CHK-CXX-NEXT:    [[BF_CLEAR141:%.*]] = and i8 [[BF_LOAD138]], 127
// CHK-CXX-NEXT:    [[BF_SET142:%.*]] = or i8 [[BF_CLEAR141]], [[BF_SHL140]]
// CHK-CXX-NEXT:    store i8 [[BF_SET142]], i8* [[TMP48]], align 1
// CHK-CXX-NEXT:    [[TMP50:%.*]] = load i8, i8* [[TMP48]], align 1
// CHK-CXX-NEXT:    [[TMP51:%.*]] = cmpxchg i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3), i8 [[TMP46]], i8 [[TMP50]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP52]] = extractvalue { i8, i1 } [[TMP51]], 0
// CHK-CXX-NEXT:    [[TMP53:%.*]] = extractvalue { i8, i1 } [[TMP51]], 1
// CHK-CXX-NEXT:    br i1 [[TMP53]], label [[ATOMIC_EXIT149]], label [[ATOMIC_CMP143]]
// CHK-CXX:       atomic_cmp143:
// CHK-CXX-NEXT:    [[TMP54:%.*]] = bitcast i32* [[ATOMIC_TEMP144]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP52]], i8* [[TMP54]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD145:%.*]] = load i8, i8* [[TMP54]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR146:%.*]] = ashr i8 [[BF_LOAD145]], 7
// CHK-CXX-NEXT:    [[BF_CAST147:%.*]] = sext i8 [[BF_ASHR146]] to i32
// CHK-CXX-NEXT:    [[CMP148:%.*]] = icmp sgt i32 [[BF_CAST147]], [[TMP44]]
// CHK-CXX-NEXT:    br i1 [[CMP148]], label [[ATOMIC_CONT132]], label [[ATOMIC_EXIT149]]
// CHK-CXX:       atomic_exit149:
// CHK-CXX-NEXT:    [[TMP55:%.*]] = load i32, i32* [[ATMP127]], align 4
// CHK-CXX-NEXT:    [[TMP56:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP57:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD150:%.*]] = load atomic i8, i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3) monotonic, align 1
// CHK-CXX-NEXT:    [[TMP58:%.*]] = bitcast i32* [[ATOMIC_TEMP152]] to i8*
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD150]], i8* [[TMP58]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD153:%.*]] = load i8, i8* [[TMP58]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR154:%.*]] = ashr i8 [[BF_LOAD153]], 7
// CHK-CXX-NEXT:    [[BF_CAST155:%.*]] = sext i8 [[BF_ASHR154]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST155]], i32* [[ATMP151]], align 4
// CHK-CXX-NEXT:    [[CMP156:%.*]] = icmp eq i32 [[BF_CAST155]], [[TMP57]]
// CHK-CXX-NEXT:    br i1 [[CMP156]], label [[ATOMIC_CONT157:%.*]], label [[ATOMIC_EXIT174:%.*]]
// CHK-CXX:       atomic_cont157:
// CHK-CXX-NEXT:    [[TMP59:%.*]] = phi i8 [ [[ATOMIC_LOAD150]], [[ATOMIC_EXIT149]] ], [ [[TMP65:%.*]], [[ATOMIC_CMP168:%.*]] ]
// CHK-CXX-NEXT:    [[TMP60:%.*]] = bitcast i32* [[ATOMIC_TEMP158]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP59]], i8* [[TMP60]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD159:%.*]] = load i8, i8* [[TMP60]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR160:%.*]] = ashr i8 [[BF_LOAD159]], 7
// CHK-CXX-NEXT:    [[BF_CAST161:%.*]] = sext i8 [[BF_ASHR160]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST161]], i32* [[ATMP151]], align 4
// CHK-CXX-NEXT:    [[TMP61:%.*]] = bitcast i32* [[ATOMIC_TEMP162]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP59]], i8* [[TMP61]], align 1
// CHK-CXX-NEXT:    [[TMP62:%.*]] = trunc i32 [[TMP56]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD163:%.*]] = load i8, i8* [[TMP61]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE164:%.*]] = and i8 [[TMP62]], 1
// CHK-CXX-NEXT:    [[BF_SHL165:%.*]] = shl i8 [[BF_VALUE164]], 7
// CHK-CXX-NEXT:    [[BF_CLEAR166:%.*]] = and i8 [[BF_LOAD163]], 127
// CHK-CXX-NEXT:    [[BF_SET167:%.*]] = or i8 [[BF_CLEAR166]], [[BF_SHL165]]
// CHK-CXX-NEXT:    store i8 [[BF_SET167]], i8* [[TMP61]], align 1
// CHK-CXX-NEXT:    [[TMP63:%.*]] = load i8, i8* [[TMP61]], align 1
// CHK-CXX-NEXT:    [[TMP64:%.*]] = cmpxchg i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3), i8 [[TMP59]], i8 [[TMP63]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP65]] = extractvalue { i8, i1 } [[TMP64]], 0
// CHK-CXX-NEXT:    [[TMP66:%.*]] = extractvalue { i8, i1 } [[TMP64]], 1
// CHK-CXX-NEXT:    br i1 [[TMP66]], label [[ATOMIC_EXIT174]], label [[ATOMIC_CMP168]]
// CHK-CXX:       atomic_cmp168:
// CHK-CXX-NEXT:    [[TMP67:%.*]] = bitcast i32* [[ATOMIC_TEMP169]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP65]], i8* [[TMP67]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD170:%.*]] = load i8, i8* [[TMP67]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR171:%.*]] = ashr i8 [[BF_LOAD170]], 7
// CHK-CXX-NEXT:    [[BF_CAST172:%.*]] = sext i8 [[BF_ASHR171]] to i32
// CHK-CXX-NEXT:    [[CMP173:%.*]] = icmp eq i32 [[BF_CAST172]], [[TMP57]]
// CHK-CXX-NEXT:    br i1 [[CMP173]], label [[ATOMIC_CONT157]], label [[ATOMIC_EXIT174]]
// CHK-CXX:       atomic_exit174:
// CHK-CXX-NEXT:    [[TMP68:%.*]] = load i32, i32* [[ATMP151]], align 4
// CHK-CXX-NEXT:    [[TMP69:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD175:%.*]] = load atomic i8, i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3) monotonic, align 1
// CHK-CXX-NEXT:    [[TMP70:%.*]] = bitcast i32* [[ATOMIC_TEMP177]] to i8*
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD175]], i8* [[TMP70]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD178:%.*]] = load i8, i8* [[TMP70]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR179:%.*]] = ashr i8 [[BF_LOAD178]], 7
// CHK-CXX-NEXT:    [[BF_CAST180:%.*]] = sext i8 [[BF_ASHR179]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST180]], i32* [[ATMP176]], align 4
// CHK-CXX-NEXT:    [[CMP181:%.*]] = icmp slt i32 [[BF_CAST180]], [[TMP69]]
// CHK-CXX-NEXT:    br i1 [[CMP181]], label [[ATOMIC_CONT182:%.*]], label [[ATOMIC_EXIT199:%.*]]
// CHK-CXX:       atomic_cont182:
// CHK-CXX-NEXT:    [[TMP71:%.*]] = phi i8 [ [[ATOMIC_LOAD175]], [[ATOMIC_EXIT174]] ], [ [[TMP77:%.*]], [[ATOMIC_CMP193:%.*]] ]
// CHK-CXX-NEXT:    [[TMP72:%.*]] = bitcast i32* [[ATOMIC_TEMP183]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP71]], i8* [[TMP72]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD184:%.*]] = load i8, i8* [[TMP72]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR185:%.*]] = ashr i8 [[BF_LOAD184]], 7
// CHK-CXX-NEXT:    [[BF_CAST186:%.*]] = sext i8 [[BF_ASHR185]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST186]], i32* [[ATMP176]], align 4
// CHK-CXX-NEXT:    [[TMP73:%.*]] = bitcast i32* [[ATOMIC_TEMP187]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP71]], i8* [[TMP73]], align 1
// CHK-CXX-NEXT:    [[TMP74:%.*]] = trunc i32 [[TMP69]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD188:%.*]] = load i8, i8* [[TMP73]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE189:%.*]] = and i8 [[TMP74]], 1
// CHK-CXX-NEXT:    [[BF_SHL190:%.*]] = shl i8 [[BF_VALUE189]], 7
// CHK-CXX-NEXT:    [[BF_CLEAR191:%.*]] = and i8 [[BF_LOAD188]], 127
// CHK-CXX-NEXT:    [[BF_SET192:%.*]] = or i8 [[BF_CLEAR191]], [[BF_SHL190]]
// CHK-CXX-NEXT:    store i8 [[BF_SET192]], i8* [[TMP73]], align 1
// CHK-CXX-NEXT:    [[TMP75:%.*]] = load i8, i8* [[TMP73]], align 1
// CHK-CXX-NEXT:    [[TMP76:%.*]] = cmpxchg i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3), i8 [[TMP71]], i8 [[TMP75]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP77]] = extractvalue { i8, i1 } [[TMP76]], 0
// CHK-CXX-NEXT:    [[TMP78:%.*]] = extractvalue { i8, i1 } [[TMP76]], 1
// CHK-CXX-NEXT:    br i1 [[TMP78]], label [[ATOMIC_EXIT199]], label [[ATOMIC_CMP193]]
// CHK-CXX:       atomic_cmp193:
// CHK-CXX-NEXT:    [[TMP79:%.*]] = bitcast i32* [[ATOMIC_TEMP194]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP77]], i8* [[TMP79]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD195:%.*]] = load i8, i8* [[TMP79]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR196:%.*]] = ashr i8 [[BF_LOAD195]], 7
// CHK-CXX-NEXT:    [[BF_CAST197:%.*]] = sext i8 [[BF_ASHR196]] to i32
// CHK-CXX-NEXT:    [[CMP198:%.*]] = icmp slt i32 [[BF_CAST197]], [[TMP69]]
// CHK-CXX-NEXT:    br i1 [[CMP198]], label [[ATOMIC_CONT182]], label [[ATOMIC_EXIT199]]
// CHK-CXX:       atomic_exit199:
// CHK-CXX-NEXT:    [[TMP80:%.*]] = load i32, i32* [[ATMP176]], align 4
// CHK-CXX-NEXT:    [[TMP81:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD200:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS3:%.*]], %struct.BitFields3* @bfx3, i32 0, i32 0) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD200]], i32* [[ATOMIC_TEMP202]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD203:%.*]] = load i32, i32* [[ATOMIC_TEMP202]], align 4
// CHK-CXX-NEXT:    [[BF_SHL204:%.*]] = shl i32 [[BF_LOAD203]], 7
// CHK-CXX-NEXT:    [[BF_ASHR205:%.*]] = ashr i32 [[BF_SHL204]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR205]], i32* [[ATMP201]], align 4
// CHK-CXX-NEXT:    [[CMP206:%.*]] = icmp sgt i32 [[BF_ASHR205]], [[TMP81]]
// CHK-CXX-NEXT:    br i1 [[CMP206]], label [[ATOMIC_CONT207:%.*]], label [[ATOMIC_EXIT224:%.*]]
// CHK-CXX:       atomic_cont207:
// CHK-CXX-NEXT:    [[TMP82:%.*]] = phi i32 [ [[ATOMIC_LOAD200]], [[ATOMIC_EXIT199]] ], [ [[TMP85:%.*]], [[ATOMIC_CMP218:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP82]], i32* [[ATOMIC_TEMP208]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD209:%.*]] = load i32, i32* [[ATOMIC_TEMP208]], align 4
// CHK-CXX-NEXT:    [[BF_SHL210:%.*]] = shl i32 [[BF_LOAD209]], 7
// CHK-CXX-NEXT:    [[BF_ASHR211:%.*]] = ashr i32 [[BF_SHL210]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR211]], i32* [[ATMP201]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP82]], i32* [[ATOMIC_TEMP212]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD213:%.*]] = load i32, i32* [[ATOMIC_TEMP212]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE214:%.*]] = and i32 [[TMP81]], 16383
// CHK-CXX-NEXT:    [[BF_SHL215:%.*]] = shl i32 [[BF_VALUE214]], 11
// CHK-CXX-NEXT:    [[BF_CLEAR216:%.*]] = and i32 [[BF_LOAD213]], -33552385
// CHK-CXX-NEXT:    [[BF_SET217:%.*]] = or i32 [[BF_CLEAR216]], [[BF_SHL215]]
// CHK-CXX-NEXT:    store i32 [[BF_SET217]], i32* [[ATOMIC_TEMP212]], align 4
// CHK-CXX-NEXT:    [[TMP83:%.*]] = load i32, i32* [[ATOMIC_TEMP212]], align 4
// CHK-CXX-NEXT:    [[TMP84:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0), i32 [[TMP82]], i32 [[TMP83]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP85]] = extractvalue { i32, i1 } [[TMP84]], 0
// CHK-CXX-NEXT:    [[TMP86:%.*]] = extractvalue { i32, i1 } [[TMP84]], 1
// CHK-CXX-NEXT:    br i1 [[TMP86]], label [[ATOMIC_EXIT224]], label [[ATOMIC_CMP218]]
// CHK-CXX:       atomic_cmp218:
// CHK-CXX-NEXT:    store i32 [[TMP85]], i32* [[ATOMIC_TEMP219]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD220:%.*]] = load i32, i32* [[ATOMIC_TEMP219]], align 4
// CHK-CXX-NEXT:    [[BF_SHL221:%.*]] = shl i32 [[BF_LOAD220]], 7
// CHK-CXX-NEXT:    [[BF_ASHR222:%.*]] = ashr i32 [[BF_SHL221]], 18
// CHK-CXX-NEXT:    [[CMP223:%.*]] = icmp sgt i32 [[BF_ASHR222]], [[TMP81]]
// CHK-CXX-NEXT:    br i1 [[CMP223]], label [[ATOMIC_CONT207]], label [[ATOMIC_EXIT224]]
// CHK-CXX:       atomic_exit224:
// CHK-CXX-NEXT:    [[TMP87:%.*]] = load i32, i32* [[ATMP201]], align 4
// CHK-CXX-NEXT:    [[TMP88:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP89:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD225:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD225]], i32* [[ATOMIC_TEMP227]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD228:%.*]] = load i32, i32* [[ATOMIC_TEMP227]], align 4
// CHK-CXX-NEXT:    [[BF_SHL229:%.*]] = shl i32 [[BF_LOAD228]], 7
// CHK-CXX-NEXT:    [[BF_ASHR230:%.*]] = ashr i32 [[BF_SHL229]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR230]], i32* [[ATMP226]], align 4
// CHK-CXX-NEXT:    [[CMP231:%.*]] = icmp eq i32 [[BF_ASHR230]], [[TMP89]]
// CHK-CXX-NEXT:    br i1 [[CMP231]], label [[ATOMIC_CONT232:%.*]], label [[ATOMIC_EXIT249:%.*]]
// CHK-CXX:       atomic_cont232:
// CHK-CXX-NEXT:    [[TMP90:%.*]] = phi i32 [ [[ATOMIC_LOAD225]], [[ATOMIC_EXIT224]] ], [ [[TMP93:%.*]], [[ATOMIC_CMP243:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP90]], i32* [[ATOMIC_TEMP233]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD234:%.*]] = load i32, i32* [[ATOMIC_TEMP233]], align 4
// CHK-CXX-NEXT:    [[BF_SHL235:%.*]] = shl i32 [[BF_LOAD234]], 7
// CHK-CXX-NEXT:    [[BF_ASHR236:%.*]] = ashr i32 [[BF_SHL235]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR236]], i32* [[ATMP226]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP90]], i32* [[ATOMIC_TEMP237]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD238:%.*]] = load i32, i32* [[ATOMIC_TEMP237]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE239:%.*]] = and i32 [[TMP88]], 16383
// CHK-CXX-NEXT:    [[BF_SHL240:%.*]] = shl i32 [[BF_VALUE239]], 11
// CHK-CXX-NEXT:    [[BF_CLEAR241:%.*]] = and i32 [[BF_LOAD238]], -33552385
// CHK-CXX-NEXT:    [[BF_SET242:%.*]] = or i32 [[BF_CLEAR241]], [[BF_SHL240]]
// CHK-CXX-NEXT:    store i32 [[BF_SET242]], i32* [[ATOMIC_TEMP237]], align 4
// CHK-CXX-NEXT:    [[TMP91:%.*]] = load i32, i32* [[ATOMIC_TEMP237]], align 4
// CHK-CXX-NEXT:    [[TMP92:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0), i32 [[TMP90]], i32 [[TMP91]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP93]] = extractvalue { i32, i1 } [[TMP92]], 0
// CHK-CXX-NEXT:    [[TMP94:%.*]] = extractvalue { i32, i1 } [[TMP92]], 1
// CHK-CXX-NEXT:    br i1 [[TMP94]], label [[ATOMIC_EXIT249]], label [[ATOMIC_CMP243]]
// CHK-CXX:       atomic_cmp243:
// CHK-CXX-NEXT:    store i32 [[TMP93]], i32* [[ATOMIC_TEMP244]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD245:%.*]] = load i32, i32* [[ATOMIC_TEMP244]], align 4
// CHK-CXX-NEXT:    [[BF_SHL246:%.*]] = shl i32 [[BF_LOAD245]], 7
// CHK-CXX-NEXT:    [[BF_ASHR247:%.*]] = ashr i32 [[BF_SHL246]], 18
// CHK-CXX-NEXT:    [[CMP248:%.*]] = icmp eq i32 [[BF_ASHR247]], [[TMP89]]
// CHK-CXX-NEXT:    br i1 [[CMP248]], label [[ATOMIC_CONT232]], label [[ATOMIC_EXIT249]]
// CHK-CXX:       atomic_exit249:
// CHK-CXX-NEXT:    [[TMP95:%.*]] = load i32, i32* [[ATMP226]], align 4
// CHK-CXX-NEXT:    [[TMP96:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD250:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD250]], i32* [[ATOMIC_TEMP252]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD253:%.*]] = load i32, i32* [[ATOMIC_TEMP252]], align 4
// CHK-CXX-NEXT:    [[BF_SHL254:%.*]] = shl i32 [[BF_LOAD253]], 7
// CHK-CXX-NEXT:    [[BF_ASHR255:%.*]] = ashr i32 [[BF_SHL254]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR255]], i32* [[ATMP251]], align 4
// CHK-CXX-NEXT:    [[CMP256:%.*]] = icmp slt i32 [[BF_ASHR255]], [[TMP96]]
// CHK-CXX-NEXT:    br i1 [[CMP256]], label [[ATOMIC_CONT257:%.*]], label [[ATOMIC_EXIT274:%.*]]
// CHK-CXX:       atomic_cont257:
// CHK-CXX-NEXT:    [[TMP97:%.*]] = phi i32 [ [[ATOMIC_LOAD250]], [[ATOMIC_EXIT249]] ], [ [[TMP100:%.*]], [[ATOMIC_CMP268:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP97]], i32* [[ATOMIC_TEMP258]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD259:%.*]] = load i32, i32* [[ATOMIC_TEMP258]], align 4
// CHK-CXX-NEXT:    [[BF_SHL260:%.*]] = shl i32 [[BF_LOAD259]], 7
// CHK-CXX-NEXT:    [[BF_ASHR261:%.*]] = ashr i32 [[BF_SHL260]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR261]], i32* [[ATMP251]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP97]], i32* [[ATOMIC_TEMP262]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD263:%.*]] = load i32, i32* [[ATOMIC_TEMP262]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE264:%.*]] = and i32 [[TMP96]], 16383
// CHK-CXX-NEXT:    [[BF_SHL265:%.*]] = shl i32 [[BF_VALUE264]], 11
// CHK-CXX-NEXT:    [[BF_CLEAR266:%.*]] = and i32 [[BF_LOAD263]], -33552385
// CHK-CXX-NEXT:    [[BF_SET267:%.*]] = or i32 [[BF_CLEAR266]], [[BF_SHL265]]
// CHK-CXX-NEXT:    store i32 [[BF_SET267]], i32* [[ATOMIC_TEMP262]], align 4
// CHK-CXX-NEXT:    [[TMP98:%.*]] = load i32, i32* [[ATOMIC_TEMP262]], align 4
// CHK-CXX-NEXT:    [[TMP99:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0), i32 [[TMP97]], i32 [[TMP98]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP100]] = extractvalue { i32, i1 } [[TMP99]], 0
// CHK-CXX-NEXT:    [[TMP101:%.*]] = extractvalue { i32, i1 } [[TMP99]], 1
// CHK-CXX-NEXT:    br i1 [[TMP101]], label [[ATOMIC_EXIT274]], label [[ATOMIC_CMP268]]
// CHK-CXX:       atomic_cmp268:
// CHK-CXX-NEXT:    store i32 [[TMP100]], i32* [[ATOMIC_TEMP269]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD270:%.*]] = load i32, i32* [[ATOMIC_TEMP269]], align 4
// CHK-CXX-NEXT:    [[BF_SHL271:%.*]] = shl i32 [[BF_LOAD270]], 7
// CHK-CXX-NEXT:    [[BF_ASHR272:%.*]] = ashr i32 [[BF_SHL271]], 18
// CHK-CXX-NEXT:    [[CMP273:%.*]] = icmp slt i32 [[BF_ASHR272]], [[TMP96]]
// CHK-CXX-NEXT:    br i1 [[CMP273]], label [[ATOMIC_CONT257]], label [[ATOMIC_EXIT274]]
// CHK-CXX:       atomic_exit274:
// CHK-CXX-NEXT:    [[TMP102:%.*]] = load i32, i32* [[ATMP251]], align 4
// CHK-CXX-NEXT:    [[TMP103:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD275:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD275]], i64* [[ATOMIC_TEMP277]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD278:%.*]] = load i64, i64* [[ATOMIC_TEMP277]], align 8
// CHK-CXX-NEXT:    [[BF_SHL279:%.*]] = shl i64 [[BF_LOAD278]], 47
// CHK-CXX-NEXT:    [[BF_ASHR280:%.*]] = ashr i64 [[BF_SHL279]], 63
// CHK-CXX-NEXT:    [[BF_CAST281:%.*]] = trunc i64 [[BF_ASHR280]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST281]], i32* [[ATMP276]], align 4
// CHK-CXX-NEXT:    [[CMP282:%.*]] = icmp sgt i32 [[BF_CAST281]], [[TMP103]]
// CHK-CXX-NEXT:    br i1 [[CMP282]], label [[ATOMIC_CONT283:%.*]], label [[ATOMIC_EXIT302:%.*]]
// CHK-CXX:       atomic_cont283:
// CHK-CXX-NEXT:    [[TMP104:%.*]] = phi i64 [ [[ATOMIC_LOAD275]], [[ATOMIC_EXIT274]] ], [ [[TMP108:%.*]], [[ATOMIC_CMP295:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP104]], i64* [[ATOMIC_TEMP284]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD285:%.*]] = load i64, i64* [[ATOMIC_TEMP284]], align 8
// CHK-CXX-NEXT:    [[BF_SHL286:%.*]] = shl i64 [[BF_LOAD285]], 47
// CHK-CXX-NEXT:    [[BF_ASHR287:%.*]] = ashr i64 [[BF_SHL286]], 63
// CHK-CXX-NEXT:    [[BF_CAST288:%.*]] = trunc i64 [[BF_ASHR287]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST288]], i32* [[ATMP276]], align 4
// CHK-CXX-NEXT:    store i64 [[TMP104]], i64* [[ATOMIC_TEMP289]], align 8
// CHK-CXX-NEXT:    [[TMP105:%.*]] = zext i32 [[TMP103]] to i64
// CHK-CXX-NEXT:    [[BF_LOAD290:%.*]] = load i64, i64* [[ATOMIC_TEMP289]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE291:%.*]] = and i64 [[TMP105]], 1
// CHK-CXX-NEXT:    [[BF_SHL292:%.*]] = shl i64 [[BF_VALUE291]], 16
// CHK-CXX-NEXT:    [[BF_CLEAR293:%.*]] = and i64 [[BF_LOAD290]], -65537
// CHK-CXX-NEXT:    [[BF_SET294:%.*]] = or i64 [[BF_CLEAR293]], [[BF_SHL292]]
// CHK-CXX-NEXT:    store i64 [[BF_SET294]], i64* [[ATOMIC_TEMP289]], align 8
// CHK-CXX-NEXT:    [[TMP106:%.*]] = load i64, i64* [[ATOMIC_TEMP289]], align 8
// CHK-CXX-NEXT:    [[TMP107:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP104]], i64 [[TMP106]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP108]] = extractvalue { i64, i1 } [[TMP107]], 0
// CHK-CXX-NEXT:    [[TMP109:%.*]] = extractvalue { i64, i1 } [[TMP107]], 1
// CHK-CXX-NEXT:    br i1 [[TMP109]], label [[ATOMIC_EXIT302]], label [[ATOMIC_CMP295]]
// CHK-CXX:       atomic_cmp295:
// CHK-CXX-NEXT:    store i64 [[TMP108]], i64* [[ATOMIC_TEMP296]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD297:%.*]] = load i64, i64* [[ATOMIC_TEMP296]], align 8
// CHK-CXX-NEXT:    [[BF_SHL298:%.*]] = shl i64 [[BF_LOAD297]], 47
// CHK-CXX-NEXT:    [[BF_ASHR299:%.*]] = ashr i64 [[BF_SHL298]], 63
// CHK-CXX-NEXT:    [[BF_CAST300:%.*]] = trunc i64 [[BF_ASHR299]] to i32
// CHK-CXX-NEXT:    [[CMP301:%.*]] = icmp sgt i32 [[BF_CAST300]], [[TMP103]]
// CHK-CXX-NEXT:    br i1 [[CMP301]], label [[ATOMIC_CONT283]], label [[ATOMIC_EXIT302]]
// CHK-CXX:       atomic_exit302:
// CHK-CXX-NEXT:    [[TMP110:%.*]] = load i32, i32* [[ATMP276]], align 4
// CHK-CXX-NEXT:    [[TMP111:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP112:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD303:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD303]], i64* [[ATOMIC_TEMP305]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD306:%.*]] = load i64, i64* [[ATOMIC_TEMP305]], align 8
// CHK-CXX-NEXT:    [[BF_SHL307:%.*]] = shl i64 [[BF_LOAD306]], 47
// CHK-CXX-NEXT:    [[BF_ASHR308:%.*]] = ashr i64 [[BF_SHL307]], 63
// CHK-CXX-NEXT:    [[BF_CAST309:%.*]] = trunc i64 [[BF_ASHR308]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST309]], i32* [[ATMP304]], align 4
// CHK-CXX-NEXT:    [[CMP310:%.*]] = icmp eq i32 [[BF_CAST309]], [[TMP112]]
// CHK-CXX-NEXT:    br i1 [[CMP310]], label [[ATOMIC_CONT311:%.*]], label [[ATOMIC_EXIT330:%.*]]
// CHK-CXX:       atomic_cont311:
// CHK-CXX-NEXT:    [[TMP113:%.*]] = phi i64 [ [[ATOMIC_LOAD303]], [[ATOMIC_EXIT302]] ], [ [[TMP117:%.*]], [[ATOMIC_CMP323:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP113]], i64* [[ATOMIC_TEMP312]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD313:%.*]] = load i64, i64* [[ATOMIC_TEMP312]], align 8
// CHK-CXX-NEXT:    [[BF_SHL314:%.*]] = shl i64 [[BF_LOAD313]], 47
// CHK-CXX-NEXT:    [[BF_ASHR315:%.*]] = ashr i64 [[BF_SHL314]], 63
// CHK-CXX-NEXT:    [[BF_CAST316:%.*]] = trunc i64 [[BF_ASHR315]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST316]], i32* [[ATMP304]], align 4
// CHK-CXX-NEXT:    store i64 [[TMP113]], i64* [[ATOMIC_TEMP317]], align 8
// CHK-CXX-NEXT:    [[TMP114:%.*]] = zext i32 [[TMP111]] to i64
// CHK-CXX-NEXT:    [[BF_LOAD318:%.*]] = load i64, i64* [[ATOMIC_TEMP317]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE319:%.*]] = and i64 [[TMP114]], 1
// CHK-CXX-NEXT:    [[BF_SHL320:%.*]] = shl i64 [[BF_VALUE319]], 16
// CHK-CXX-NEXT:    [[BF_CLEAR321:%.*]] = and i64 [[BF_LOAD318]], -65537
// CHK-CXX-NEXT:    [[BF_SET322:%.*]] = or i64 [[BF_CLEAR321]], [[BF_SHL320]]
// CHK-CXX-NEXT:    store i64 [[BF_SET322]], i64* [[ATOMIC_TEMP317]], align 8
// CHK-CXX-NEXT:    [[TMP115:%.*]] = load i64, i64* [[ATOMIC_TEMP317]], align 8
// CHK-CXX-NEXT:    [[TMP116:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP113]], i64 [[TMP115]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP117]] = extractvalue { i64, i1 } [[TMP116]], 0
// CHK-CXX-NEXT:    [[TMP118:%.*]] = extractvalue { i64, i1 } [[TMP116]], 1
// CHK-CXX-NEXT:    br i1 [[TMP118]], label [[ATOMIC_EXIT330]], label [[ATOMIC_CMP323]]
// CHK-CXX:       atomic_cmp323:
// CHK-CXX-NEXT:    store i64 [[TMP117]], i64* [[ATOMIC_TEMP324]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD325:%.*]] = load i64, i64* [[ATOMIC_TEMP324]], align 8
// CHK-CXX-NEXT:    [[BF_SHL326:%.*]] = shl i64 [[BF_LOAD325]], 47
// CHK-CXX-NEXT:    [[BF_ASHR327:%.*]] = ashr i64 [[BF_SHL326]], 63
// CHK-CXX-NEXT:    [[BF_CAST328:%.*]] = trunc i64 [[BF_ASHR327]] to i32
// CHK-CXX-NEXT:    [[CMP329:%.*]] = icmp eq i32 [[BF_CAST328]], [[TMP112]]
// CHK-CXX-NEXT:    br i1 [[CMP329]], label [[ATOMIC_CONT311]], label [[ATOMIC_EXIT330]]
// CHK-CXX:       atomic_exit330:
// CHK-CXX-NEXT:    [[TMP119:%.*]] = load i32, i32* [[ATMP304]], align 4
// CHK-CXX-NEXT:    [[TMP120:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD331:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD331]], i64* [[ATOMIC_TEMP333]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD334:%.*]] = load i64, i64* [[ATOMIC_TEMP333]], align 8
// CHK-CXX-NEXT:    [[BF_SHL335:%.*]] = shl i64 [[BF_LOAD334]], 47
// CHK-CXX-NEXT:    [[BF_ASHR336:%.*]] = ashr i64 [[BF_SHL335]], 63
// CHK-CXX-NEXT:    [[BF_CAST337:%.*]] = trunc i64 [[BF_ASHR336]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST337]], i32* [[ATMP332]], align 4
// CHK-CXX-NEXT:    [[CMP338:%.*]] = icmp slt i32 [[BF_CAST337]], [[TMP120]]
// CHK-CXX-NEXT:    br i1 [[CMP338]], label [[ATOMIC_CONT339:%.*]], label [[ATOMIC_EXIT358:%.*]]
// CHK-CXX:       atomic_cont339:
// CHK-CXX-NEXT:    [[TMP121:%.*]] = phi i64 [ [[ATOMIC_LOAD331]], [[ATOMIC_EXIT330]] ], [ [[TMP125:%.*]], [[ATOMIC_CMP351:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP121]], i64* [[ATOMIC_TEMP340]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD341:%.*]] = load i64, i64* [[ATOMIC_TEMP340]], align 8
// CHK-CXX-NEXT:    [[BF_SHL342:%.*]] = shl i64 [[BF_LOAD341]], 47
// CHK-CXX-NEXT:    [[BF_ASHR343:%.*]] = ashr i64 [[BF_SHL342]], 63
// CHK-CXX-NEXT:    [[BF_CAST344:%.*]] = trunc i64 [[BF_ASHR343]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST344]], i32* [[ATMP332]], align 4
// CHK-CXX-NEXT:    store i64 [[TMP121]], i64* [[ATOMIC_TEMP345]], align 8
// CHK-CXX-NEXT:    [[TMP122:%.*]] = zext i32 [[TMP120]] to i64
// CHK-CXX-NEXT:    [[BF_LOAD346:%.*]] = load i64, i64* [[ATOMIC_TEMP345]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE347:%.*]] = and i64 [[TMP122]], 1
// CHK-CXX-NEXT:    [[BF_SHL348:%.*]] = shl i64 [[BF_VALUE347]], 16
// CHK-CXX-NEXT:    [[BF_CLEAR349:%.*]] = and i64 [[BF_LOAD346]], -65537
// CHK-CXX-NEXT:    [[BF_SET350:%.*]] = or i64 [[BF_CLEAR349]], [[BF_SHL348]]
// CHK-CXX-NEXT:    store i64 [[BF_SET350]], i64* [[ATOMIC_TEMP345]], align 8
// CHK-CXX-NEXT:    [[TMP123:%.*]] = load i64, i64* [[ATOMIC_TEMP345]], align 8
// CHK-CXX-NEXT:    [[TMP124:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP121]], i64 [[TMP123]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP125]] = extractvalue { i64, i1 } [[TMP124]], 0
// CHK-CXX-NEXT:    [[TMP126:%.*]] = extractvalue { i64, i1 } [[TMP124]], 1
// CHK-CXX-NEXT:    br i1 [[TMP126]], label [[ATOMIC_EXIT358]], label [[ATOMIC_CMP351]]
// CHK-CXX:       atomic_cmp351:
// CHK-CXX-NEXT:    store i64 [[TMP125]], i64* [[ATOMIC_TEMP352]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD353:%.*]] = load i64, i64* [[ATOMIC_TEMP352]], align 8
// CHK-CXX-NEXT:    [[BF_SHL354:%.*]] = shl i64 [[BF_LOAD353]], 47
// CHK-CXX-NEXT:    [[BF_ASHR355:%.*]] = ashr i64 [[BF_SHL354]], 63
// CHK-CXX-NEXT:    [[BF_CAST356:%.*]] = trunc i64 [[BF_ASHR355]] to i32
// CHK-CXX-NEXT:    [[CMP357:%.*]] = icmp slt i32 [[BF_CAST356]], [[TMP120]]
// CHK-CXX-NEXT:    br i1 [[CMP357]], label [[ATOMIC_CONT339]], label [[ATOMIC_EXIT358]]
// CHK-CXX:       atomic_exit358:
// CHK-CXX-NEXT:    [[TMP127:%.*]] = load i32, i32* [[ATMP332]], align 4
// CHK-CXX-NEXT:    [[TMP128:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[CONV:%.*]] = sext i32 [[TMP128]] to i64
// CHK-CXX-NEXT:    [[ATOMIC_LOAD359:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD359]], i64* [[ATOMIC_TEMP361]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD362:%.*]] = load i64, i64* [[ATOMIC_TEMP361]], align 8
// CHK-CXX-NEXT:    [[BF_SHL363:%.*]] = shl i64 [[BF_LOAD362]], 40
// CHK-CXX-NEXT:    [[BF_ASHR364:%.*]] = ashr i64 [[BF_SHL363]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR364]], i64* [[ATMP360]], align 8
// CHK-CXX-NEXT:    [[CMP365:%.*]] = icmp sgt i64 [[BF_ASHR364]], [[CONV]]
// CHK-CXX-NEXT:    br i1 [[CMP365]], label [[ATOMIC_CONT366:%.*]], label [[ATOMIC_EXIT383:%.*]]
// CHK-CXX:       atomic_cont366:
// CHK-CXX-NEXT:    [[TMP129:%.*]] = phi i64 [ [[ATOMIC_LOAD359]], [[ATOMIC_EXIT358]] ], [ [[TMP132:%.*]], [[ATOMIC_CMP377:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP129]], i64* [[ATOMIC_TEMP367]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD368:%.*]] = load i64, i64* [[ATOMIC_TEMP367]], align 8
// CHK-CXX-NEXT:    [[BF_SHL369:%.*]] = shl i64 [[BF_LOAD368]], 40
// CHK-CXX-NEXT:    [[BF_ASHR370:%.*]] = ashr i64 [[BF_SHL369]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR370]], i64* [[ATMP360]], align 8
// CHK-CXX-NEXT:    store i64 [[TMP129]], i64* [[ATOMIC_TEMP371]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD372:%.*]] = load i64, i64* [[ATOMIC_TEMP371]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE373:%.*]] = and i64 [[CONV]], 127
// CHK-CXX-NEXT:    [[BF_SHL374:%.*]] = shl i64 [[BF_VALUE373]], 17
// CHK-CXX-NEXT:    [[BF_CLEAR375:%.*]] = and i64 [[BF_LOAD372]], -16646145
// CHK-CXX-NEXT:    [[BF_SET376:%.*]] = or i64 [[BF_CLEAR375]], [[BF_SHL374]]
// CHK-CXX-NEXT:    store i64 [[BF_SET376]], i64* [[ATOMIC_TEMP371]], align 8
// CHK-CXX-NEXT:    [[TMP130:%.*]] = load i64, i64* [[ATOMIC_TEMP371]], align 8
// CHK-CXX-NEXT:    [[TMP131:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP129]], i64 [[TMP130]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP132]] = extractvalue { i64, i1 } [[TMP131]], 0
// CHK-CXX-NEXT:    [[TMP133:%.*]] = extractvalue { i64, i1 } [[TMP131]], 1
// CHK-CXX-NEXT:    br i1 [[TMP133]], label [[ATOMIC_EXIT383]], label [[ATOMIC_CMP377]]
// CHK-CXX:       atomic_cmp377:
// CHK-CXX-NEXT:    store i64 [[TMP132]], i64* [[ATOMIC_TEMP378]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD379:%.*]] = load i64, i64* [[ATOMIC_TEMP378]], align 8
// CHK-CXX-NEXT:    [[BF_SHL380:%.*]] = shl i64 [[BF_LOAD379]], 40
// CHK-CXX-NEXT:    [[BF_ASHR381:%.*]] = ashr i64 [[BF_SHL380]], 57
// CHK-CXX-NEXT:    [[CMP382:%.*]] = icmp sgt i64 [[BF_ASHR381]], [[CONV]]
// CHK-CXX-NEXT:    br i1 [[CMP382]], label [[ATOMIC_CONT366]], label [[ATOMIC_EXIT383]]
// CHK-CXX:       atomic_exit383:
// CHK-CXX-NEXT:    [[TMP134:%.*]] = load i64, i64* [[ATMP360]], align 8
// CHK-CXX-NEXT:    [[TMP135:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[CONV384:%.*]] = sext i32 [[TMP135]] to i64
// CHK-CXX-NEXT:    [[TMP136:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[CONV385:%.*]] = sext i32 [[TMP136]] to i64
// CHK-CXX-NEXT:    [[ATOMIC_LOAD386:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD386]], i64* [[ATOMIC_TEMP388]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD389:%.*]] = load i64, i64* [[ATOMIC_TEMP388]], align 8
// CHK-CXX-NEXT:    [[BF_SHL390:%.*]] = shl i64 [[BF_LOAD389]], 40
// CHK-CXX-NEXT:    [[BF_ASHR391:%.*]] = ashr i64 [[BF_SHL390]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR391]], i64* [[ATMP387]], align 8
// CHK-CXX-NEXT:    [[CMP392:%.*]] = icmp eq i64 [[BF_ASHR391]], [[CONV385]]
// CHK-CXX-NEXT:    br i1 [[CMP392]], label [[ATOMIC_CONT393:%.*]], label [[ATOMIC_EXIT410:%.*]]
// CHK-CXX:       atomic_cont393:
// CHK-CXX-NEXT:    [[TMP137:%.*]] = phi i64 [ [[ATOMIC_LOAD386]], [[ATOMIC_EXIT383]] ], [ [[TMP140:%.*]], [[ATOMIC_CMP404:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP137]], i64* [[ATOMIC_TEMP394]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD395:%.*]] = load i64, i64* [[ATOMIC_TEMP394]], align 8
// CHK-CXX-NEXT:    [[BF_SHL396:%.*]] = shl i64 [[BF_LOAD395]], 40
// CHK-CXX-NEXT:    [[BF_ASHR397:%.*]] = ashr i64 [[BF_SHL396]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR397]], i64* [[ATMP387]], align 8
// CHK-CXX-NEXT:    store i64 [[TMP137]], i64* [[ATOMIC_TEMP398]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD399:%.*]] = load i64, i64* [[ATOMIC_TEMP398]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE400:%.*]] = and i64 [[CONV384]], 127
// CHK-CXX-NEXT:    [[BF_SHL401:%.*]] = shl i64 [[BF_VALUE400]], 17
// CHK-CXX-NEXT:    [[BF_CLEAR402:%.*]] = and i64 [[BF_LOAD399]], -16646145
// CHK-CXX-NEXT:    [[BF_SET403:%.*]] = or i64 [[BF_CLEAR402]], [[BF_SHL401]]
// CHK-CXX-NEXT:    store i64 [[BF_SET403]], i64* [[ATOMIC_TEMP398]], align 8
// CHK-CXX-NEXT:    [[TMP138:%.*]] = load i64, i64* [[ATOMIC_TEMP398]], align 8
// CHK-CXX-NEXT:    [[TMP139:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP137]], i64 [[TMP138]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP140]] = extractvalue { i64, i1 } [[TMP139]], 0
// CHK-CXX-NEXT:    [[TMP141:%.*]] = extractvalue { i64, i1 } [[TMP139]], 1
// CHK-CXX-NEXT:    br i1 [[TMP141]], label [[ATOMIC_EXIT410]], label [[ATOMIC_CMP404]]
// CHK-CXX:       atomic_cmp404:
// CHK-CXX-NEXT:    store i64 [[TMP140]], i64* [[ATOMIC_TEMP405]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD406:%.*]] = load i64, i64* [[ATOMIC_TEMP405]], align 8
// CHK-CXX-NEXT:    [[BF_SHL407:%.*]] = shl i64 [[BF_LOAD406]], 40
// CHK-CXX-NEXT:    [[BF_ASHR408:%.*]] = ashr i64 [[BF_SHL407]], 57
// CHK-CXX-NEXT:    [[CMP409:%.*]] = icmp eq i64 [[BF_ASHR408]], [[CONV385]]
// CHK-CXX-NEXT:    br i1 [[CMP409]], label [[ATOMIC_CONT393]], label [[ATOMIC_EXIT410]]
// CHK-CXX:       atomic_exit410:
// CHK-CXX-NEXT:    [[TMP142:%.*]] = load i64, i64* [[ATMP387]], align 8
// CHK-CXX-NEXT:    [[TMP143:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[CONV411:%.*]] = sext i32 [[TMP143]] to i64
// CHK-CXX-NEXT:    [[ATOMIC_LOAD412:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD412]], i64* [[ATOMIC_TEMP414]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD415:%.*]] = load i64, i64* [[ATOMIC_TEMP414]], align 8
// CHK-CXX-NEXT:    [[BF_SHL416:%.*]] = shl i64 [[BF_LOAD415]], 40
// CHK-CXX-NEXT:    [[BF_ASHR417:%.*]] = ashr i64 [[BF_SHL416]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR417]], i64* [[ATMP413]], align 8
// CHK-CXX-NEXT:    [[CMP418:%.*]] = icmp slt i64 [[BF_ASHR417]], [[CONV411]]
// CHK-CXX-NEXT:    br i1 [[CMP418]], label [[ATOMIC_CONT419:%.*]], label [[ATOMIC_EXIT436:%.*]]
// CHK-CXX:       atomic_cont419:
// CHK-CXX-NEXT:    [[TMP144:%.*]] = phi i64 [ [[ATOMIC_LOAD412]], [[ATOMIC_EXIT410]] ], [ [[TMP147:%.*]], [[ATOMIC_CMP430:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP144]], i64* [[ATOMIC_TEMP420]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD421:%.*]] = load i64, i64* [[ATOMIC_TEMP420]], align 8
// CHK-CXX-NEXT:    [[BF_SHL422:%.*]] = shl i64 [[BF_LOAD421]], 40
// CHK-CXX-NEXT:    [[BF_ASHR423:%.*]] = ashr i64 [[BF_SHL422]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR423]], i64* [[ATMP413]], align 8
// CHK-CXX-NEXT:    store i64 [[TMP144]], i64* [[ATOMIC_TEMP424]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD425:%.*]] = load i64, i64* [[ATOMIC_TEMP424]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE426:%.*]] = and i64 [[CONV411]], 127
// CHK-CXX-NEXT:    [[BF_SHL427:%.*]] = shl i64 [[BF_VALUE426]], 17
// CHK-CXX-NEXT:    [[BF_CLEAR428:%.*]] = and i64 [[BF_LOAD425]], -16646145
// CHK-CXX-NEXT:    [[BF_SET429:%.*]] = or i64 [[BF_CLEAR428]], [[BF_SHL427]]
// CHK-CXX-NEXT:    store i64 [[BF_SET429]], i64* [[ATOMIC_TEMP424]], align 8
// CHK-CXX-NEXT:    [[TMP145:%.*]] = load i64, i64* [[ATOMIC_TEMP424]], align 8
// CHK-CXX-NEXT:    [[TMP146:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP144]], i64 [[TMP145]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP147]] = extractvalue { i64, i1 } [[TMP146]], 0
// CHK-CXX-NEXT:    [[TMP148:%.*]] = extractvalue { i64, i1 } [[TMP146]], 1
// CHK-CXX-NEXT:    br i1 [[TMP148]], label [[ATOMIC_EXIT436]], label [[ATOMIC_CMP430]]
// CHK-CXX:       atomic_cmp430:
// CHK-CXX-NEXT:    store i64 [[TMP147]], i64* [[ATOMIC_TEMP431]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD432:%.*]] = load i64, i64* [[ATOMIC_TEMP431]], align 8
// CHK-CXX-NEXT:    [[BF_SHL433:%.*]] = shl i64 [[BF_LOAD432]], 40
// CHK-CXX-NEXT:    [[BF_ASHR434:%.*]] = ashr i64 [[BF_SHL433]], 57
// CHK-CXX-NEXT:    [[CMP435:%.*]] = icmp slt i64 [[BF_ASHR434]], [[CONV411]]
// CHK-CXX-NEXT:    br i1 [[CMP435]], label [[ATOMIC_CONT419]], label [[ATOMIC_EXIT436]]
// CHK-CXX:       atomic_exit436:
// CHK-CXX-NEXT:    [[TMP149:%.*]] = load i64, i64* [[ATMP413]], align 8
// CHK-CXX-NEXT:    [[TMP150:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD437:%.*]] = load atomic i8, i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED:%.*]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2) monotonic, align 1
// CHK-CXX-NEXT:    [[TMP151:%.*]] = bitcast i32* [[ATOMIC_TEMP439]] to i8*
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD437]], i8* [[TMP151]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD440:%.*]] = load i8, i8* [[TMP151]], align 1
// CHK-CXX-NEXT:    [[BF_SHL441:%.*]] = shl i8 [[BF_LOAD440]], 7
// CHK-CXX-NEXT:    [[BF_ASHR442:%.*]] = ashr i8 [[BF_SHL441]], 7
// CHK-CXX-NEXT:    [[BF_CAST443:%.*]] = sext i8 [[BF_ASHR442]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST443]], i32* [[ATMP438]], align 4
// CHK-CXX-NEXT:    [[CMP444:%.*]] = icmp sgt i32 [[BF_CAST443]], [[TMP150]]
// CHK-CXX-NEXT:    br i1 [[CMP444]], label [[ATOMIC_CONT445:%.*]], label [[ATOMIC_EXIT463:%.*]]
// CHK-CXX:       atomic_cont445:
// CHK-CXX-NEXT:    [[TMP152:%.*]] = phi i8 [ [[ATOMIC_LOAD437]], [[ATOMIC_EXIT436]] ], [ [[TMP158:%.*]], [[ATOMIC_CMP456:%.*]] ]
// CHK-CXX-NEXT:    [[TMP153:%.*]] = bitcast i32* [[ATOMIC_TEMP446]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP152]], i8* [[TMP153]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD447:%.*]] = load i8, i8* [[TMP153]], align 1
// CHK-CXX-NEXT:    [[BF_SHL448:%.*]] = shl i8 [[BF_LOAD447]], 7
// CHK-CXX-NEXT:    [[BF_ASHR449:%.*]] = ashr i8 [[BF_SHL448]], 7
// CHK-CXX-NEXT:    [[BF_CAST450:%.*]] = sext i8 [[BF_ASHR449]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST450]], i32* [[ATMP438]], align 4
// CHK-CXX-NEXT:    [[TMP154:%.*]] = bitcast i32* [[ATOMIC_TEMP451]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP152]], i8* [[TMP154]], align 1
// CHK-CXX-NEXT:    [[TMP155:%.*]] = trunc i32 [[TMP150]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD452:%.*]] = load i8, i8* [[TMP154]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE453:%.*]] = and i8 [[TMP155]], 1
// CHK-CXX-NEXT:    [[BF_CLEAR454:%.*]] = and i8 [[BF_LOAD452]], -2
// CHK-CXX-NEXT:    [[BF_SET455:%.*]] = or i8 [[BF_CLEAR454]], [[BF_VALUE453]]
// CHK-CXX-NEXT:    store i8 [[BF_SET455]], i8* [[TMP154]], align 1
// CHK-CXX-NEXT:    [[TMP156:%.*]] = load i8, i8* [[TMP154]], align 1
// CHK-CXX-NEXT:    [[TMP157:%.*]] = cmpxchg i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2), i8 [[TMP152]], i8 [[TMP156]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP158]] = extractvalue { i8, i1 } [[TMP157]], 0
// CHK-CXX-NEXT:    [[TMP159:%.*]] = extractvalue { i8, i1 } [[TMP157]], 1
// CHK-CXX-NEXT:    br i1 [[TMP159]], label [[ATOMIC_EXIT463]], label [[ATOMIC_CMP456]]
// CHK-CXX:       atomic_cmp456:
// CHK-CXX-NEXT:    [[TMP160:%.*]] = bitcast i32* [[ATOMIC_TEMP457]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP158]], i8* [[TMP160]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD458:%.*]] = load i8, i8* [[TMP160]], align 1
// CHK-CXX-NEXT:    [[BF_SHL459:%.*]] = shl i8 [[BF_LOAD458]], 7
// CHK-CXX-NEXT:    [[BF_ASHR460:%.*]] = ashr i8 [[BF_SHL459]], 7
// CHK-CXX-NEXT:    [[BF_CAST461:%.*]] = sext i8 [[BF_ASHR460]] to i32
// CHK-CXX-NEXT:    [[CMP462:%.*]] = icmp sgt i32 [[BF_CAST461]], [[TMP150]]
// CHK-CXX-NEXT:    br i1 [[CMP462]], label [[ATOMIC_CONT445]], label [[ATOMIC_EXIT463]]
// CHK-CXX:       atomic_exit463:
// CHK-CXX-NEXT:    [[TMP161:%.*]] = load i32, i32* [[ATMP438]], align 4
// CHK-CXX-NEXT:    [[TMP162:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP163:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD464:%.*]] = load atomic i8, i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2) monotonic, align 1
// CHK-CXX-NEXT:    [[TMP164:%.*]] = bitcast i32* [[ATOMIC_TEMP466]] to i8*
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD464]], i8* [[TMP164]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD467:%.*]] = load i8, i8* [[TMP164]], align 1
// CHK-CXX-NEXT:    [[BF_SHL468:%.*]] = shl i8 [[BF_LOAD467]], 7
// CHK-CXX-NEXT:    [[BF_ASHR469:%.*]] = ashr i8 [[BF_SHL468]], 7
// CHK-CXX-NEXT:    [[BF_CAST470:%.*]] = sext i8 [[BF_ASHR469]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST470]], i32* [[ATMP465]], align 4
// CHK-CXX-NEXT:    [[CMP471:%.*]] = icmp eq i32 [[BF_CAST470]], [[TMP163]]
// CHK-CXX-NEXT:    br i1 [[CMP471]], label [[ATOMIC_CONT472:%.*]], label [[ATOMIC_EXIT490:%.*]]
// CHK-CXX:       atomic_cont472:
// CHK-CXX-NEXT:    [[TMP165:%.*]] = phi i8 [ [[ATOMIC_LOAD464]], [[ATOMIC_EXIT463]] ], [ [[TMP171:%.*]], [[ATOMIC_CMP483:%.*]] ]
// CHK-CXX-NEXT:    [[TMP166:%.*]] = bitcast i32* [[ATOMIC_TEMP473]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP165]], i8* [[TMP166]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD474:%.*]] = load i8, i8* [[TMP166]], align 1
// CHK-CXX-NEXT:    [[BF_SHL475:%.*]] = shl i8 [[BF_LOAD474]], 7
// CHK-CXX-NEXT:    [[BF_ASHR476:%.*]] = ashr i8 [[BF_SHL475]], 7
// CHK-CXX-NEXT:    [[BF_CAST477:%.*]] = sext i8 [[BF_ASHR476]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST477]], i32* [[ATMP465]], align 4
// CHK-CXX-NEXT:    [[TMP167:%.*]] = bitcast i32* [[ATOMIC_TEMP478]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP165]], i8* [[TMP167]], align 1
// CHK-CXX-NEXT:    [[TMP168:%.*]] = trunc i32 [[TMP162]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD479:%.*]] = load i8, i8* [[TMP167]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE480:%.*]] = and i8 [[TMP168]], 1
// CHK-CXX-NEXT:    [[BF_CLEAR481:%.*]] = and i8 [[BF_LOAD479]], -2
// CHK-CXX-NEXT:    [[BF_SET482:%.*]] = or i8 [[BF_CLEAR481]], [[BF_VALUE480]]
// CHK-CXX-NEXT:    store i8 [[BF_SET482]], i8* [[TMP167]], align 1
// CHK-CXX-NEXT:    [[TMP169:%.*]] = load i8, i8* [[TMP167]], align 1
// CHK-CXX-NEXT:    [[TMP170:%.*]] = cmpxchg i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2), i8 [[TMP165]], i8 [[TMP169]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP171]] = extractvalue { i8, i1 } [[TMP170]], 0
// CHK-CXX-NEXT:    [[TMP172:%.*]] = extractvalue { i8, i1 } [[TMP170]], 1
// CHK-CXX-NEXT:    br i1 [[TMP172]], label [[ATOMIC_EXIT490]], label [[ATOMIC_CMP483]]
// CHK-CXX:       atomic_cmp483:
// CHK-CXX-NEXT:    [[TMP173:%.*]] = bitcast i32* [[ATOMIC_TEMP484]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP171]], i8* [[TMP173]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD485:%.*]] = load i8, i8* [[TMP173]], align 1
// CHK-CXX-NEXT:    [[BF_SHL486:%.*]] = shl i8 [[BF_LOAD485]], 7
// CHK-CXX-NEXT:    [[BF_ASHR487:%.*]] = ashr i8 [[BF_SHL486]], 7
// CHK-CXX-NEXT:    [[BF_CAST488:%.*]] = sext i8 [[BF_ASHR487]] to i32
// CHK-CXX-NEXT:    [[CMP489:%.*]] = icmp eq i32 [[BF_CAST488]], [[TMP163]]
// CHK-CXX-NEXT:    br i1 [[CMP489]], label [[ATOMIC_CONT472]], label [[ATOMIC_EXIT490]]
// CHK-CXX:       atomic_exit490:
// CHK-CXX-NEXT:    [[TMP174:%.*]] = load i32, i32* [[ATMP465]], align 4
// CHK-CXX-NEXT:    [[TMP175:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD491:%.*]] = load atomic i8, i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2) monotonic, align 1
// CHK-CXX-NEXT:    [[TMP176:%.*]] = bitcast i32* [[ATOMIC_TEMP493]] to i8*
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD491]], i8* [[TMP176]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD494:%.*]] = load i8, i8* [[TMP176]], align 1
// CHK-CXX-NEXT:    [[BF_SHL495:%.*]] = shl i8 [[BF_LOAD494]], 7
// CHK-CXX-NEXT:    [[BF_ASHR496:%.*]] = ashr i8 [[BF_SHL495]], 7
// CHK-CXX-NEXT:    [[BF_CAST497:%.*]] = sext i8 [[BF_ASHR496]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST497]], i32* [[ATMP492]], align 4
// CHK-CXX-NEXT:    [[CMP498:%.*]] = icmp slt i32 [[BF_CAST497]], [[TMP175]]
// CHK-CXX-NEXT:    br i1 [[CMP498]], label [[ATOMIC_CONT499:%.*]], label [[ATOMIC_EXIT517:%.*]]
// CHK-CXX:       atomic_cont499:
// CHK-CXX-NEXT:    [[TMP177:%.*]] = phi i8 [ [[ATOMIC_LOAD491]], [[ATOMIC_EXIT490]] ], [ [[TMP183:%.*]], [[ATOMIC_CMP510:%.*]] ]
// CHK-CXX-NEXT:    [[TMP178:%.*]] = bitcast i32* [[ATOMIC_TEMP500]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP177]], i8* [[TMP178]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD501:%.*]] = load i8, i8* [[TMP178]], align 1
// CHK-CXX-NEXT:    [[BF_SHL502:%.*]] = shl i8 [[BF_LOAD501]], 7
// CHK-CXX-NEXT:    [[BF_ASHR503:%.*]] = ashr i8 [[BF_SHL502]], 7
// CHK-CXX-NEXT:    [[BF_CAST504:%.*]] = sext i8 [[BF_ASHR503]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST504]], i32* [[ATMP492]], align 4
// CHK-CXX-NEXT:    [[TMP179:%.*]] = bitcast i32* [[ATOMIC_TEMP505]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP177]], i8* [[TMP179]], align 1
// CHK-CXX-NEXT:    [[TMP180:%.*]] = trunc i32 [[TMP175]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD506:%.*]] = load i8, i8* [[TMP179]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE507:%.*]] = and i8 [[TMP180]], 1
// CHK-CXX-NEXT:    [[BF_CLEAR508:%.*]] = and i8 [[BF_LOAD506]], -2
// CHK-CXX-NEXT:    [[BF_SET509:%.*]] = or i8 [[BF_CLEAR508]], [[BF_VALUE507]]
// CHK-CXX-NEXT:    store i8 [[BF_SET509]], i8* [[TMP179]], align 1
// CHK-CXX-NEXT:    [[TMP181:%.*]] = load i8, i8* [[TMP179]], align 1
// CHK-CXX-NEXT:    [[TMP182:%.*]] = cmpxchg i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2), i8 [[TMP177]], i8 [[TMP181]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP183]] = extractvalue { i8, i1 } [[TMP182]], 0
// CHK-CXX-NEXT:    [[TMP184:%.*]] = extractvalue { i8, i1 } [[TMP182]], 1
// CHK-CXX-NEXT:    br i1 [[TMP184]], label [[ATOMIC_EXIT517]], label [[ATOMIC_CMP510]]
// CHK-CXX:       atomic_cmp510:
// CHK-CXX-NEXT:    [[TMP185:%.*]] = bitcast i32* [[ATOMIC_TEMP511]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP183]], i8* [[TMP185]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD512:%.*]] = load i8, i8* [[TMP185]], align 1
// CHK-CXX-NEXT:    [[BF_SHL513:%.*]] = shl i8 [[BF_LOAD512]], 7
// CHK-CXX-NEXT:    [[BF_ASHR514:%.*]] = ashr i8 [[BF_SHL513]], 7
// CHK-CXX-NEXT:    [[BF_CAST515:%.*]] = sext i8 [[BF_ASHR514]] to i32
// CHK-CXX-NEXT:    [[CMP516:%.*]] = icmp slt i32 [[BF_CAST515]], [[TMP175]]
// CHK-CXX-NEXT:    br i1 [[CMP516]], label [[ATOMIC_CONT499]], label [[ATOMIC_EXIT517]]
// CHK-CXX:       atomic_exit517:
// CHK-CXX-NEXT:    [[TMP186:%.*]] = load i32, i32* [[ATMP492]], align 4
// CHK-CXX-NEXT:    ret void
//
void test_bitfield()
{
  int expr, d, e;

  #pragma omp atomic compare
  bfx.a = expr < bfx.a ? expr : bfx.a; // MIN

  #pragma omp atomic compare
  bfx.a = bfx.a == e ? d : bfx.a;

  #pragma omp atomic compare
  if (bfx.a < expr) { bfx.a = expr; } // MAX

#ifdef LIBCALLS
  #pragma omp atomic compare
  bfx_packed.a = expr < bfx_packed.a ? expr : bfx_packed.a; // MIN

  #pragma omp atomic compare
  bfx_packed.a = bfx_packed.a == e ? d : bfx_packed.a;

  #pragma omp atomic compare
  if (bfx_packed.a < expr) { bfx_packed.a = expr; } // MAX
#endif

  #pragma omp atomic compare
  bfx2.a = expr < bfx2.a ? expr : bfx2.a; // MIN

  #pragma omp atomic compare
  bfx2.a = bfx2.a == e ? d : bfx2.a;

  #pragma omp atomic compare
  if (bfx2.a < expr) { bfx2.a = expr; } // MAX

  #pragma omp atomic compare
  bfx2_packed.a = expr < bfx2_packed.a ? expr : bfx2_packed.a; // MIN

  #pragma omp atomic compare
  bfx2_packed.a = bfx2_packed.a == e ? d : bfx2_packed.a;

  #pragma omp atomic compare
  if (bfx2_packed.a < expr) { bfx2_packed.a = expr; } // MAX

  #pragma omp atomic compare
  bfx3.a = expr < bfx3.a ? expr : bfx3.a; // MIN

  #pragma omp atomic compare
  bfx3.a = bfx3.a == e ? d : bfx3.a;

  #pragma omp atomic compare
  if (bfx3.a < expr) { bfx3.a = expr; } // MAX

#ifdef LIBCALLS
  #pragma omp atomic compare
  bfx3_packed.a = expr < bfx3_packed.a ? expr : bfx3_packed.a; // MIN

  #pragma omp atomic compare
  bfx3_packed.a = bfx3_packed.a == e ? d : bfx3_packed.a;

  #pragma omp atomic compare
  if (bfx3_packed.a < expr) { bfx3_packed.a = expr; } // MAX
#endif

  #pragma omp atomic compare
  bfx4.a = expr < bfx4.a ? expr : bfx4.a; // MIN

  #pragma omp atomic compare
  bfx4.a = bfx4.a == e ? d : bfx4.a;

  #pragma omp atomic compare
  if (bfx4.a < expr) { bfx4.a = expr; } // MAX

  #pragma omp atomic compare
  bfx4.b = expr < bfx4.b ? expr : bfx4.b; // MIN

  #pragma omp atomic compare
  bfx4.b = bfx4.b == e ? d : bfx4.b;

  #pragma omp atomic compare
  if (bfx4.b < expr) { bfx4.b = expr; } // MAX

  #pragma omp atomic compare
  bfx4_packed.a = expr < bfx4_packed.a ? expr : bfx4_packed.a; // MIN

  #pragma omp atomic compare
  bfx4_packed.a = bfx4_packed.a == e ? d : bfx4_packed.a;

  #pragma omp atomic compare
  if (bfx4_packed.a < expr) { bfx4_packed.a = expr; } // MAX
}

// CHK-C-LABEL: @test_ext_vector(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[FLOAT2X:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[TMP:%.*]] = alloca float, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP1:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP3:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP4:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATMP10:%.*]] = alloca float, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP11:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP13:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP15:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP19:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP21:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP23:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP25:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP27:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATMP33:%.*]] = alloca float, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP34:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP38:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP40:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP42:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[TMP0:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[CONV:%.*]] = sitofp i32 [[TMP0]] to float
// CHK-C-NEXT:    [[TMP1:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, i64* [[TMP1]] monotonic, align 8
// CHK-C-NEXT:    [[STORETMP:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP]] to i64*
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD]], i64* [[STORETMP]], align 8
// CHK-C-NEXT:    [[TMP2:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP]], align 8
// CHK-C-NEXT:    [[TMP3:%.*]] = extractelement <2 x float> [[TMP2]], i64 0
// CHK-C-NEXT:    store float [[TMP3]], float* [[TMP]], align 4
// CHK-C-NEXT:    [[CMP:%.*]] = fcmp ogt float [[TMP3]], [[CONV]]
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP4:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP13:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    [[STORETMP2:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP1]] to i64*
// CHK-C-NEXT:    store i64 [[TMP4]], i64* [[STORETMP2]], align 8
// CHK-C-NEXT:    [[TMP5:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP1]], align 8
// CHK-C-NEXT:    [[TMP6:%.*]] = extractelement <2 x float> [[TMP5]], i64 0
// CHK-C-NEXT:    store float [[TMP6]], float* [[TMP]], align 4
// CHK-C-NEXT:    [[TMP7:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP3]] to i64*
// CHK-C-NEXT:    store i64 [[TMP4]], i64* [[TMP7]], align 8
// CHK-C-NEXT:    [[TMP8:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP3]], align 8
// CHK-C-NEXT:    [[TMP9:%.*]] = insertelement <2 x float> [[TMP8]], float [[CONV]], i64 0
// CHK-C-NEXT:    store <2 x float> [[TMP9]], <2 x float>* [[ATOMIC_TEMP3]], align 8
// CHK-C-NEXT:    [[TMP10:%.*]] = load i64, i64* [[TMP7]], align 8
// CHK-C-NEXT:    [[TMP11:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-C-NEXT:    [[TMP12:%.*]] = cmpxchg i64* [[TMP11]], i64 [[TMP4]], i64 [[TMP10]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP13]] = extractvalue { i64, i1 } [[TMP12]], 0
// CHK-C-NEXT:    [[TMP14:%.*]] = extractvalue { i64, i1 } [[TMP12]], 1
// CHK-C-NEXT:    br i1 [[TMP14]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    [[STORETMP5:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP4]] to i64*
// CHK-C-NEXT:    store i64 [[TMP13]], i64* [[STORETMP5]], align 8
// CHK-C-NEXT:    [[TMP15:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP4]], align 8
// CHK-C-NEXT:    [[TMP16:%.*]] = extractelement <2 x float> [[TMP15]], i64 0
// CHK-C-NEXT:    [[CMP6:%.*]] = fcmp ogt float [[TMP16]], [[CONV]]
// CHK-C-NEXT:    br i1 [[CMP6]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP17:%.*]] = load float, float* [[TMP]], align 4
// CHK-C-NEXT:    [[TMP18:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[CONV7:%.*]] = sitofp i32 [[TMP18]] to float
// CHK-C-NEXT:    [[TMP19:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[CONV8:%.*]] = sitofp i32 [[TMP19]] to float
// CHK-C-NEXT:    [[TMP20:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD9:%.*]] = load atomic i64, i64* [[TMP20]] monotonic, align 8
// CHK-C-NEXT:    [[STORETMP12:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP11]] to i64*
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD9]], i64* [[STORETMP12]], align 8
// CHK-C-NEXT:    [[TMP21:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP11]], align 8
// CHK-C-NEXT:    [[TMP22:%.*]] = extractelement <2 x float> [[TMP21]], i64 0
// CHK-C-NEXT:    store float [[TMP22]], float* [[ATMP10]], align 4
// CHK-C-NEXT:    [[STORETMP14:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP13]] to float*
// CHK-C-NEXT:    store float [[TMP22]], float* [[STORETMP14]], align 8
// CHK-C-NEXT:    [[TMP23:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP13]] to i64*
// CHK-C-NEXT:    [[TMP24:%.*]] = load i64, i64* [[TMP23]], align 8
// CHK-C-NEXT:    [[STORETMP16:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP15]] to float*
// CHK-C-NEXT:    store float [[CONV8]], float* [[STORETMP16]], align 8
// CHK-C-NEXT:    [[TMP25:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP15]] to i64*
// CHK-C-NEXT:    [[TMP26:%.*]] = load i64, i64* [[TMP25]], align 8
// CHK-C-NEXT:    [[CMP17:%.*]] = icmp eq i64 [[TMP24]], [[TMP26]]
// CHK-C-NEXT:    br i1 [[CMP17]], label [[ATOMIC_CONT18:%.*]], label [[ATOMIC_EXIT30:%.*]]
// CHK-C:       atomic_cont18:
// CHK-C-NEXT:    [[TMP27:%.*]] = phi i64 [ [[ATOMIC_LOAD9]], [[ATOMIC_EXIT]] ], [ [[TMP36:%.*]], [[ATOMIC_CMP22:%.*]] ]
// CHK-C-NEXT:    [[STORETMP20:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP19]] to i64*
// CHK-C-NEXT:    store i64 [[TMP27]], i64* [[STORETMP20]], align 8
// CHK-C-NEXT:    [[TMP28:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP19]], align 8
// CHK-C-NEXT:    [[TMP29:%.*]] = extractelement <2 x float> [[TMP28]], i64 0
// CHK-C-NEXT:    store float [[TMP29]], float* [[ATMP10]], align 4
// CHK-C-NEXT:    [[TMP30:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP21]] to i64*
// CHK-C-NEXT:    store i64 [[TMP27]], i64* [[TMP30]], align 8
// CHK-C-NEXT:    [[TMP31:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP21]], align 8
// CHK-C-NEXT:    [[TMP32:%.*]] = insertelement <2 x float> [[TMP31]], float [[CONV7]], i64 0
// CHK-C-NEXT:    store <2 x float> [[TMP32]], <2 x float>* [[ATOMIC_TEMP21]], align 8
// CHK-C-NEXT:    [[TMP33:%.*]] = load i64, i64* [[TMP30]], align 8
// CHK-C-NEXT:    [[TMP34:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-C-NEXT:    [[TMP35:%.*]] = cmpxchg i64* [[TMP34]], i64 [[TMP27]], i64 [[TMP33]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP36]] = extractvalue { i64, i1 } [[TMP35]], 0
// CHK-C-NEXT:    [[TMP37:%.*]] = extractvalue { i64, i1 } [[TMP35]], 1
// CHK-C-NEXT:    br i1 [[TMP37]], label [[ATOMIC_EXIT30]], label [[ATOMIC_CMP22]]
// CHK-C:       atomic_cmp22:
// CHK-C-NEXT:    [[STORETMP24:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP23]] to i64*
// CHK-C-NEXT:    store i64 [[TMP36]], i64* [[STORETMP24]], align 8
// CHK-C-NEXT:    [[TMP38:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP23]], align 8
// CHK-C-NEXT:    [[TMP39:%.*]] = extractelement <2 x float> [[TMP38]], i64 0
// CHK-C-NEXT:    [[STORETMP26:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP25]] to float*
// CHK-C-NEXT:    store float [[TMP39]], float* [[STORETMP26]], align 8
// CHK-C-NEXT:    [[TMP40:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP25]] to i64*
// CHK-C-NEXT:    [[TMP41:%.*]] = load i64, i64* [[TMP40]], align 8
// CHK-C-NEXT:    [[STORETMP28:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP27]] to float*
// CHK-C-NEXT:    store float [[CONV8]], float* [[STORETMP28]], align 8
// CHK-C-NEXT:    [[TMP42:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP27]] to i64*
// CHK-C-NEXT:    [[TMP43:%.*]] = load i64, i64* [[TMP42]], align 8
// CHK-C-NEXT:    [[CMP29:%.*]] = icmp eq i64 [[TMP41]], [[TMP43]]
// CHK-C-NEXT:    br i1 [[CMP29]], label [[ATOMIC_CONT18]], label [[ATOMIC_EXIT30]]
// CHK-C:       atomic_exit30:
// CHK-C-NEXT:    [[TMP44:%.*]] = load float, float* [[ATMP10]], align 4
// CHK-C-NEXT:    [[TMP45:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[CONV31:%.*]] = sitofp i32 [[TMP45]] to float
// CHK-C-NEXT:    [[TMP46:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD32:%.*]] = load atomic i64, i64* [[TMP46]] monotonic, align 8
// CHK-C-NEXT:    [[STORETMP35:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP34]] to i64*
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD32]], i64* [[STORETMP35]], align 8
// CHK-C-NEXT:    [[TMP47:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP34]], align 8
// CHK-C-NEXT:    [[TMP48:%.*]] = extractelement <2 x float> [[TMP47]], i64 0
// CHK-C-NEXT:    store float [[TMP48]], float* [[ATMP33]], align 4
// CHK-C-NEXT:    [[CMP36:%.*]] = fcmp olt float [[TMP48]], [[CONV31]]
// CHK-C-NEXT:    br i1 [[CMP36]], label [[ATOMIC_CONT37:%.*]], label [[ATOMIC_EXIT45:%.*]]
// CHK-C:       atomic_cont37:
// CHK-C-NEXT:    [[TMP49:%.*]] = phi i64 [ [[ATOMIC_LOAD32]], [[ATOMIC_EXIT30]] ], [ [[TMP58:%.*]], [[ATOMIC_CMP41:%.*]] ]
// CHK-C-NEXT:    [[STORETMP39:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP38]] to i64*
// CHK-C-NEXT:    store i64 [[TMP49]], i64* [[STORETMP39]], align 8
// CHK-C-NEXT:    [[TMP50:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP38]], align 8
// CHK-C-NEXT:    [[TMP51:%.*]] = extractelement <2 x float> [[TMP50]], i64 0
// CHK-C-NEXT:    store float [[TMP51]], float* [[ATMP33]], align 4
// CHK-C-NEXT:    [[TMP52:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP40]] to i64*
// CHK-C-NEXT:    store i64 [[TMP49]], i64* [[TMP52]], align 8
// CHK-C-NEXT:    [[TMP53:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP40]], align 8
// CHK-C-NEXT:    [[TMP54:%.*]] = insertelement <2 x float> [[TMP53]], float [[CONV31]], i64 0
// CHK-C-NEXT:    store <2 x float> [[TMP54]], <2 x float>* [[ATOMIC_TEMP40]], align 8
// CHK-C-NEXT:    [[TMP55:%.*]] = load i64, i64* [[TMP52]], align 8
// CHK-C-NEXT:    [[TMP56:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-C-NEXT:    [[TMP57:%.*]] = cmpxchg i64* [[TMP56]], i64 [[TMP49]], i64 [[TMP55]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP58]] = extractvalue { i64, i1 } [[TMP57]], 0
// CHK-C-NEXT:    [[TMP59:%.*]] = extractvalue { i64, i1 } [[TMP57]], 1
// CHK-C-NEXT:    br i1 [[TMP59]], label [[ATOMIC_EXIT45]], label [[ATOMIC_CMP41]]
// CHK-C:       atomic_cmp41:
// CHK-C-NEXT:    [[STORETMP43:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP42]] to i64*
// CHK-C-NEXT:    store i64 [[TMP58]], i64* [[STORETMP43]], align 8
// CHK-C-NEXT:    [[TMP60:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP42]], align 8
// CHK-C-NEXT:    [[TMP61:%.*]] = extractelement <2 x float> [[TMP60]], i64 0
// CHK-C-NEXT:    [[CMP44:%.*]] = fcmp olt float [[TMP61]], [[CONV31]]
// CHK-C-NEXT:    br i1 [[CMP44]], label [[ATOMIC_CONT37]], label [[ATOMIC_EXIT45]]
// CHK-C:       atomic_exit45:
// CHK-C-NEXT:    [[TMP62:%.*]] = load float, float* [[ATMP33]], align 4
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z15test_ext_vectorv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[FLOAT2X:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca float, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP1:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP3:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP4:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATMP10:%.*]] = alloca float, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP11:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP13:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP15:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP19:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP21:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP23:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP25:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP27:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATMP33:%.*]] = alloca float, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP34:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP38:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP40:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP42:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[CONV:%.*]] = sitofp i32 [[TMP0]] to float
// CHK-CXX-NEXT:    [[TMP1:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, i64* [[TMP1]] monotonic, align 8
// CHK-CXX-NEXT:    [[STORETMP:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP]] to i64*
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD]], i64* [[STORETMP]], align 8
// CHK-CXX-NEXT:    [[TMP2:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP]], align 8
// CHK-CXX-NEXT:    [[TMP3:%.*]] = extractelement <2 x float> [[TMP2]], i64 0
// CHK-CXX-NEXT:    store float [[TMP3]], float* [[TMP]], align 4
// CHK-CXX-NEXT:    [[CMP:%.*]] = fcmp ogt float [[TMP3]], [[CONV]]
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP4:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP13:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    [[STORETMP2:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP1]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP4]], i64* [[STORETMP2]], align 8
// CHK-CXX-NEXT:    [[TMP5:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP1]], align 8
// CHK-CXX-NEXT:    [[TMP6:%.*]] = extractelement <2 x float> [[TMP5]], i64 0
// CHK-CXX-NEXT:    store float [[TMP6]], float* [[TMP]], align 4
// CHK-CXX-NEXT:    [[TMP7:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP3]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP4]], i64* [[TMP7]], align 8
// CHK-CXX-NEXT:    [[TMP8:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP3]], align 8
// CHK-CXX-NEXT:    [[TMP9:%.*]] = insertelement <2 x float> [[TMP8]], float [[CONV]], i64 0
// CHK-CXX-NEXT:    store <2 x float> [[TMP9]], <2 x float>* [[ATOMIC_TEMP3]], align 8
// CHK-CXX-NEXT:    [[TMP10:%.*]] = load i64, i64* [[TMP7]], align 8
// CHK-CXX-NEXT:    [[TMP11:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-CXX-NEXT:    [[TMP12:%.*]] = cmpxchg i64* [[TMP11]], i64 [[TMP4]], i64 [[TMP10]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP13]] = extractvalue { i64, i1 } [[TMP12]], 0
// CHK-CXX-NEXT:    [[TMP14:%.*]] = extractvalue { i64, i1 } [[TMP12]], 1
// CHK-CXX-NEXT:    br i1 [[TMP14]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    [[STORETMP5:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP4]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP13]], i64* [[STORETMP5]], align 8
// CHK-CXX-NEXT:    [[TMP15:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP4]], align 8
// CHK-CXX-NEXT:    [[TMP16:%.*]] = extractelement <2 x float> [[TMP15]], i64 0
// CHK-CXX-NEXT:    [[CMP6:%.*]] = fcmp ogt float [[TMP16]], [[CONV]]
// CHK-CXX-NEXT:    br i1 [[CMP6]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP17:%.*]] = load float, float* [[TMP]], align 4
// CHK-CXX-NEXT:    [[TMP18:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[CONV7:%.*]] = sitofp i32 [[TMP18]] to float
// CHK-CXX-NEXT:    [[TMP19:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[CONV8:%.*]] = sitofp i32 [[TMP19]] to float
// CHK-CXX-NEXT:    [[TMP20:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD9:%.*]] = load atomic i64, i64* [[TMP20]] monotonic, align 8
// CHK-CXX-NEXT:    [[STORETMP12:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP11]] to i64*
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD9]], i64* [[STORETMP12]], align 8
// CHK-CXX-NEXT:    [[TMP21:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP11]], align 8
// CHK-CXX-NEXT:    [[TMP22:%.*]] = extractelement <2 x float> [[TMP21]], i64 0
// CHK-CXX-NEXT:    store float [[TMP22]], float* [[ATMP10]], align 4
// CHK-CXX-NEXT:    [[STORETMP14:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP13]] to float*
// CHK-CXX-NEXT:    store float [[TMP22]], float* [[STORETMP14]], align 8
// CHK-CXX-NEXT:    [[TMP23:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP13]] to i64*
// CHK-CXX-NEXT:    [[TMP24:%.*]] = load i64, i64* [[TMP23]], align 8
// CHK-CXX-NEXT:    [[STORETMP16:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP15]] to float*
// CHK-CXX-NEXT:    store float [[CONV8]], float* [[STORETMP16]], align 8
// CHK-CXX-NEXT:    [[TMP25:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP15]] to i64*
// CHK-CXX-NEXT:    [[TMP26:%.*]] = load i64, i64* [[TMP25]], align 8
// CHK-CXX-NEXT:    [[CMP17:%.*]] = icmp eq i64 [[TMP24]], [[TMP26]]
// CHK-CXX-NEXT:    br i1 [[CMP17]], label [[ATOMIC_CONT18:%.*]], label [[ATOMIC_EXIT30:%.*]]
// CHK-CXX:       atomic_cont18:
// CHK-CXX-NEXT:    [[TMP27:%.*]] = phi i64 [ [[ATOMIC_LOAD9]], [[ATOMIC_EXIT]] ], [ [[TMP36:%.*]], [[ATOMIC_CMP22:%.*]] ]
// CHK-CXX-NEXT:    [[STORETMP20:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP19]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP27]], i64* [[STORETMP20]], align 8
// CHK-CXX-NEXT:    [[TMP28:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP19]], align 8
// CHK-CXX-NEXT:    [[TMP29:%.*]] = extractelement <2 x float> [[TMP28]], i64 0
// CHK-CXX-NEXT:    store float [[TMP29]], float* [[ATMP10]], align 4
// CHK-CXX-NEXT:    [[TMP30:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP21]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP27]], i64* [[TMP30]], align 8
// CHK-CXX-NEXT:    [[TMP31:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP21]], align 8
// CHK-CXX-NEXT:    [[TMP32:%.*]] = insertelement <2 x float> [[TMP31]], float [[CONV7]], i64 0
// CHK-CXX-NEXT:    store <2 x float> [[TMP32]], <2 x float>* [[ATOMIC_TEMP21]], align 8
// CHK-CXX-NEXT:    [[TMP33:%.*]] = load i64, i64* [[TMP30]], align 8
// CHK-CXX-NEXT:    [[TMP34:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-CXX-NEXT:    [[TMP35:%.*]] = cmpxchg i64* [[TMP34]], i64 [[TMP27]], i64 [[TMP33]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP36]] = extractvalue { i64, i1 } [[TMP35]], 0
// CHK-CXX-NEXT:    [[TMP37:%.*]] = extractvalue { i64, i1 } [[TMP35]], 1
// CHK-CXX-NEXT:    br i1 [[TMP37]], label [[ATOMIC_EXIT30]], label [[ATOMIC_CMP22]]
// CHK-CXX:       atomic_cmp22:
// CHK-CXX-NEXT:    [[STORETMP24:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP23]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP36]], i64* [[STORETMP24]], align 8
// CHK-CXX-NEXT:    [[TMP38:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP23]], align 8
// CHK-CXX-NEXT:    [[TMP39:%.*]] = extractelement <2 x float> [[TMP38]], i64 0
// CHK-CXX-NEXT:    [[STORETMP26:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP25]] to float*
// CHK-CXX-NEXT:    store float [[TMP39]], float* [[STORETMP26]], align 8
// CHK-CXX-NEXT:    [[TMP40:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP25]] to i64*
// CHK-CXX-NEXT:    [[TMP41:%.*]] = load i64, i64* [[TMP40]], align 8
// CHK-CXX-NEXT:    [[STORETMP28:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP27]] to float*
// CHK-CXX-NEXT:    store float [[CONV8]], float* [[STORETMP28]], align 8
// CHK-CXX-NEXT:    [[TMP42:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP27]] to i64*
// CHK-CXX-NEXT:    [[TMP43:%.*]] = load i64, i64* [[TMP42]], align 8
// CHK-CXX-NEXT:    [[CMP29:%.*]] = icmp eq i64 [[TMP41]], [[TMP43]]
// CHK-CXX-NEXT:    br i1 [[CMP29]], label [[ATOMIC_CONT18]], label [[ATOMIC_EXIT30]]
// CHK-CXX:       atomic_exit30:
// CHK-CXX-NEXT:    [[TMP44:%.*]] = load float, float* [[ATMP10]], align 4
// CHK-CXX-NEXT:    [[TMP45:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[CONV31:%.*]] = sitofp i32 [[TMP45]] to float
// CHK-CXX-NEXT:    [[TMP46:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD32:%.*]] = load atomic i64, i64* [[TMP46]] monotonic, align 8
// CHK-CXX-NEXT:    [[STORETMP35:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP34]] to i64*
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD32]], i64* [[STORETMP35]], align 8
// CHK-CXX-NEXT:    [[TMP47:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP34]], align 8
// CHK-CXX-NEXT:    [[TMP48:%.*]] = extractelement <2 x float> [[TMP47]], i64 0
// CHK-CXX-NEXT:    store float [[TMP48]], float* [[ATMP33]], align 4
// CHK-CXX-NEXT:    [[CMP36:%.*]] = fcmp olt float [[TMP48]], [[CONV31]]
// CHK-CXX-NEXT:    br i1 [[CMP36]], label [[ATOMIC_CONT37:%.*]], label [[ATOMIC_EXIT45:%.*]]
// CHK-CXX:       atomic_cont37:
// CHK-CXX-NEXT:    [[TMP49:%.*]] = phi i64 [ [[ATOMIC_LOAD32]], [[ATOMIC_EXIT30]] ], [ [[TMP58:%.*]], [[ATOMIC_CMP41:%.*]] ]
// CHK-CXX-NEXT:    [[STORETMP39:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP38]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP49]], i64* [[STORETMP39]], align 8
// CHK-CXX-NEXT:    [[TMP50:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP38]], align 8
// CHK-CXX-NEXT:    [[TMP51:%.*]] = extractelement <2 x float> [[TMP50]], i64 0
// CHK-CXX-NEXT:    store float [[TMP51]], float* [[ATMP33]], align 4
// CHK-CXX-NEXT:    [[TMP52:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP40]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP49]], i64* [[TMP52]], align 8
// CHK-CXX-NEXT:    [[TMP53:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP40]], align 8
// CHK-CXX-NEXT:    [[TMP54:%.*]] = insertelement <2 x float> [[TMP53]], float [[CONV31]], i64 0
// CHK-CXX-NEXT:    store <2 x float> [[TMP54]], <2 x float>* [[ATOMIC_TEMP40]], align 8
// CHK-CXX-NEXT:    [[TMP55:%.*]] = load i64, i64* [[TMP52]], align 8
// CHK-CXX-NEXT:    [[TMP56:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-CXX-NEXT:    [[TMP57:%.*]] = cmpxchg i64* [[TMP56]], i64 [[TMP49]], i64 [[TMP55]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP58]] = extractvalue { i64, i1 } [[TMP57]], 0
// CHK-CXX-NEXT:    [[TMP59:%.*]] = extractvalue { i64, i1 } [[TMP57]], 1
// CHK-CXX-NEXT:    br i1 [[TMP59]], label [[ATOMIC_EXIT45]], label [[ATOMIC_CMP41]]
// CHK-CXX:       atomic_cmp41:
// CHK-CXX-NEXT:    [[STORETMP43:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP42]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP58]], i64* [[STORETMP43]], align 8
// CHK-CXX-NEXT:    [[TMP60:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP42]], align 8
// CHK-CXX-NEXT:    [[TMP61:%.*]] = extractelement <2 x float> [[TMP60]], i64 0
// CHK-CXX-NEXT:    [[CMP44:%.*]] = fcmp olt float [[TMP61]], [[CONV31]]
// CHK-CXX-NEXT:    br i1 [[CMP44]], label [[ATOMIC_CONT37]], label [[ATOMIC_EXIT45]]
// CHK-CXX:       atomic_exit45:
// CHK-CXX-NEXT:    [[TMP62:%.*]] = load float, float* [[ATMP33]], align 4
// CHK-CXX-NEXT:    ret void
//
void test_ext_vector() {
  typedef float float2 __attribute__((ext_vector_type(2)));
  float2 float2x;

  int expr, d, e;

  #pragma omp atomic compare
  float2x.x = expr < float2x.x ? expr : float2x.x; // MIN

  #pragma omp atomic compare
  float2x.x = float2x.x == e ? d : float2x.x;

  #pragma omp atomic compare
  if (float2x.x < expr) { float2x.x = expr; } // MAX
}

#endif // HEADER
