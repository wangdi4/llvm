// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --prefix-filecheck-ir-name a
// INTEL_COLLAB
// RUN: %clang_cc1 -opaque-pointers -verify -triple x86_64-unknown-linux-gnu -fopenmp -x c \
// RUN:  -fopenmp-late-outline -fopenmp-version=51 -emit-llvm %s -o - \
// RUN:  | FileCheck %s --check-prefix CHK-C

// RUN: %clang_cc1 -opaque-pointers -verify -triple x86_64-unknown-linux-gnu -fopenmp -x c \
// RUN: -fopenmp-late-outline -fopenmp-version=51 -emit-pch %s -o %t.pch

// RUN: %clang_cc1 -opaque-pointers -verify -triple x86_64-unknown-linux-gnu -fopenmp  -x c \
// RUN:  -fopenmp-late-outline -fopenmp-version=51 -emit-llvm %s -o - \
// RUN:  -include-pch %t.pch | FileCheck %s --check-prefix CHK-C
//
// RUN: %clang_cc1 -opaque-pointers -verify -triple x86_64-unknown-linux-gnu -fopenmp \
// RUN:  -fopenmp-late-outline -fopenmp-version=51 -emit-llvm %s -o - \
// RUN:  | FileCheck %s --check-prefix CHK-CXX
//
// RUN: %clang_cc1 -opaque-pointers -verify -triple x86_64-unknown-linux-gnu -fopenmp \
// RUN: -fopenmp-late-outline -fopenmp-version=51 -emit-pch %s -o %t.pch

// RUN: %clang_cc1 -opaque-pointers -verify -triple x86_64-unknown-linux-gnu -fopenmp \
// RUN:  -fopenmp-late-outline -fopenmp-version=51 -emit-llvm %s -o - \
// RUN:  -include-pch %t.pch | FileCheck %s --check-prefix CHK-CXX
//
// expected-no-diagnostics
#ifndef HEADER
#define HEADER

// CHK-C-LABEL: @test_int(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[X:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[TMP:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP5:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP7:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP10:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP16:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP18:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP21:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP27:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP29:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP32:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP38:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP40:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP43:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP49:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP51:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP54:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP60:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP62:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP65:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP71:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP73:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP76:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP82:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP84:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP87:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP93:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP95:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP98:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[TMP0:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD]], ptr [[TMP]], align 4
// CHK-C-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-C-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL]], ptr [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP1:%.*]] = phi i32 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP1]], ptr [[TMP]], align 4
// CHK-C-NEXT:    store i32 [[TMP0]], ptr [[ATOMIC_TEMP]], align 4
// CHK-C-NEXT:    [[TMP2:%.*]] = load i32, ptr [[ATOMIC_TEMP]], align 4
// CHK-C-NEXT:    [[TMP3:%.*]] = cmpxchg ptr [[X]], i32 [[TMP1]], i32 [[TMP2]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP4]] = extractvalue { i32, i1 } [[TMP3]], 0
// CHK-C-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i1 } [[TMP3]], 1
// CHK-C-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    [[CMP2:%.*]] = icmp sgt i32 [[TMP4]], [[TMP0]]
// CHK-C-NEXT:    [[FROMBOOL3:%.*]] = zext i1 [[CMP2]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL3]], ptr [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP2]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP]], align 4
// CHK-C-NEXT:    [[TMP7:%.*]] = load i8, ptr [[ATMP1]], align 1
// CHK-C-NEXT:    [[TMP8:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD4:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD4]], ptr [[ATMP5]], align 4
// CHK-C-NEXT:    [[CMP6:%.*]] = icmp slt i32 [[ATOMIC_LOAD4]], [[TMP8]]
// CHK-C-NEXT:    [[FROMBOOL8:%.*]] = zext i1 [[CMP6]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL8]], ptr [[ATMP7]], align 1
// CHK-C-NEXT:    br i1 [[CMP6]], label [[ATOMIC_CONT9:%.*]], label [[ATOMIC_EXIT14:%.*]]
// CHK-C:       atomic_cont9:
// CHK-C-NEXT:    [[TMP9:%.*]] = phi i32 [ [[ATOMIC_LOAD4]], [[ATOMIC_EXIT]] ], [ [[TMP12:%.*]], [[ATOMIC_CMP11:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP9]], ptr [[ATMP5]], align 4
// CHK-C-NEXT:    store i32 [[TMP8]], ptr [[ATOMIC_TEMP10]], align 4
// CHK-C-NEXT:    [[TMP10:%.*]] = load i32, ptr [[ATOMIC_TEMP10]], align 4
// CHK-C-NEXT:    [[TMP11:%.*]] = cmpxchg ptr [[X]], i32 [[TMP9]], i32 [[TMP10]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP12]] = extractvalue { i32, i1 } [[TMP11]], 0
// CHK-C-NEXT:    [[TMP13:%.*]] = extractvalue { i32, i1 } [[TMP11]], 1
// CHK-C-NEXT:    br i1 [[TMP13]], label [[ATOMIC_EXIT14]], label [[ATOMIC_CMP11]]
// CHK-C:       atomic_cmp11:
// CHK-C-NEXT:    [[CMP12:%.*]] = icmp slt i32 [[TMP12]], [[TMP8]]
// CHK-C-NEXT:    [[FROMBOOL13:%.*]] = zext i1 [[CMP12]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL13]], ptr [[ATMP7]], align 1
// CHK-C-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT9]], label [[ATOMIC_EXIT14]]
// CHK-C:       atomic_exit14:
// CHK-C-NEXT:    [[TMP14:%.*]] = load i32, ptr [[ATMP5]], align 4
// CHK-C-NEXT:    [[TMP15:%.*]] = load i8, ptr [[ATMP7]], align 1
// CHK-C-NEXT:    [[TMP16:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD15:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD15]], ptr [[ATMP16]], align 4
// CHK-C-NEXT:    [[CMP17:%.*]] = icmp slt i32 [[ATOMIC_LOAD15]], [[TMP16]]
// CHK-C-NEXT:    [[FROMBOOL19:%.*]] = zext i1 [[CMP17]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL19]], ptr [[ATMP18]], align 1
// CHK-C-NEXT:    br i1 [[CMP17]], label [[ATOMIC_CONT20:%.*]], label [[ATOMIC_EXIT25:%.*]]
// CHK-C:       atomic_cont20:
// CHK-C-NEXT:    [[TMP17:%.*]] = phi i32 [ [[ATOMIC_LOAD15]], [[ATOMIC_EXIT14]] ], [ [[TMP20:%.*]], [[ATOMIC_CMP22:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP17]], ptr [[ATMP16]], align 4
// CHK-C-NEXT:    store i32 [[TMP16]], ptr [[ATOMIC_TEMP21]], align 4
// CHK-C-NEXT:    [[TMP18:%.*]] = load i32, ptr [[ATOMIC_TEMP21]], align 4
// CHK-C-NEXT:    [[TMP19:%.*]] = cmpxchg ptr [[X]], i32 [[TMP17]], i32 [[TMP18]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP20]] = extractvalue { i32, i1 } [[TMP19]], 0
// CHK-C-NEXT:    [[TMP21:%.*]] = extractvalue { i32, i1 } [[TMP19]], 1
// CHK-C-NEXT:    br i1 [[TMP21]], label [[ATOMIC_EXIT25]], label [[ATOMIC_CMP22]]
// CHK-C:       atomic_cmp22:
// CHK-C-NEXT:    [[CMP23:%.*]] = icmp slt i32 [[TMP20]], [[TMP16]]
// CHK-C-NEXT:    [[FROMBOOL24:%.*]] = zext i1 [[CMP23]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL24]], ptr [[ATMP18]], align 1
// CHK-C-NEXT:    br i1 [[CMP23]], label [[ATOMIC_CONT20]], label [[ATOMIC_EXIT25]]
// CHK-C:       atomic_exit25:
// CHK-C-NEXT:    [[TMP22:%.*]] = load i32, ptr [[ATMP16]], align 4
// CHK-C-NEXT:    [[TMP23:%.*]] = load i8, ptr [[ATMP18]], align 1
// CHK-C-NEXT:    [[TMP24:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD26:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD26]], ptr [[ATMP27]], align 4
// CHK-C-NEXT:    [[CMP28:%.*]] = icmp sgt i32 [[ATOMIC_LOAD26]], [[TMP24]]
// CHK-C-NEXT:    [[FROMBOOL30:%.*]] = zext i1 [[CMP28]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL30]], ptr [[ATMP29]], align 1
// CHK-C-NEXT:    br i1 [[CMP28]], label [[ATOMIC_CONT31:%.*]], label [[ATOMIC_EXIT36:%.*]]
// CHK-C:       atomic_cont31:
// CHK-C-NEXT:    [[TMP25:%.*]] = phi i32 [ [[ATOMIC_LOAD26]], [[ATOMIC_EXIT25]] ], [ [[TMP28:%.*]], [[ATOMIC_CMP33:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP25]], ptr [[ATMP27]], align 4
// CHK-C-NEXT:    store i32 [[TMP24]], ptr [[ATOMIC_TEMP32]], align 4
// CHK-C-NEXT:    [[TMP26:%.*]] = load i32, ptr [[ATOMIC_TEMP32]], align 4
// CHK-C-NEXT:    [[TMP27:%.*]] = cmpxchg ptr [[X]], i32 [[TMP25]], i32 [[TMP26]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP28]] = extractvalue { i32, i1 } [[TMP27]], 0
// CHK-C-NEXT:    [[TMP29:%.*]] = extractvalue { i32, i1 } [[TMP27]], 1
// CHK-C-NEXT:    br i1 [[TMP29]], label [[ATOMIC_EXIT36]], label [[ATOMIC_CMP33]]
// CHK-C:       atomic_cmp33:
// CHK-C-NEXT:    [[CMP34:%.*]] = icmp sgt i32 [[TMP28]], [[TMP24]]
// CHK-C-NEXT:    [[FROMBOOL35:%.*]] = zext i1 [[CMP34]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL35]], ptr [[ATMP29]], align 1
// CHK-C-NEXT:    br i1 [[CMP34]], label [[ATOMIC_CONT31]], label [[ATOMIC_EXIT36]]
// CHK-C:       atomic_exit36:
// CHK-C-NEXT:    [[TMP30:%.*]] = load i32, ptr [[ATMP27]], align 4
// CHK-C-NEXT:    [[TMP31:%.*]] = load i8, ptr [[ATMP29]], align 1
// CHK-C-NEXT:    [[TMP32:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[TMP33:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD37:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD37]], ptr [[ATMP38]], align 4
// CHK-C-NEXT:    [[CMP39:%.*]] = icmp eq i32 [[ATOMIC_LOAD37]], [[TMP33]]
// CHK-C-NEXT:    [[FROMBOOL41:%.*]] = zext i1 [[CMP39]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL41]], ptr [[ATMP40]], align 1
// CHK-C-NEXT:    br i1 [[CMP39]], label [[ATOMIC_CONT42:%.*]], label [[ATOMIC_EXIT47:%.*]]
// CHK-C:       atomic_cont42:
// CHK-C-NEXT:    [[TMP34:%.*]] = phi i32 [ [[ATOMIC_LOAD37]], [[ATOMIC_EXIT36]] ], [ [[TMP37:%.*]], [[ATOMIC_CMP44:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP34]], ptr [[ATMP38]], align 4
// CHK-C-NEXT:    store i32 [[TMP32]], ptr [[ATOMIC_TEMP43]], align 4
// CHK-C-NEXT:    [[TMP35:%.*]] = load i32, ptr [[ATOMIC_TEMP43]], align 4
// CHK-C-NEXT:    [[TMP36:%.*]] = cmpxchg ptr [[X]], i32 [[TMP34]], i32 [[TMP35]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP37]] = extractvalue { i32, i1 } [[TMP36]], 0
// CHK-C-NEXT:    [[TMP38:%.*]] = extractvalue { i32, i1 } [[TMP36]], 1
// CHK-C-NEXT:    br i1 [[TMP38]], label [[ATOMIC_EXIT47]], label [[ATOMIC_CMP44]]
// CHK-C:       atomic_cmp44:
// CHK-C-NEXT:    [[CMP45:%.*]] = icmp eq i32 [[TMP37]], [[TMP33]]
// CHK-C-NEXT:    [[FROMBOOL46:%.*]] = zext i1 [[CMP45]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL46]], ptr [[ATMP40]], align 1
// CHK-C-NEXT:    br i1 [[CMP45]], label [[ATOMIC_CONT42]], label [[ATOMIC_EXIT47]]
// CHK-C:       atomic_exit47:
// CHK-C-NEXT:    [[TMP39:%.*]] = load i32, ptr [[ATMP38]], align 4
// CHK-C-NEXT:    [[TMP40:%.*]] = load i8, ptr [[ATMP40]], align 1
// CHK-C-NEXT:    [[TMP41:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD48:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD48]], ptr [[ATMP49]], align 4
// CHK-C-NEXT:    [[CMP50:%.*]] = icmp sgt i32 [[ATOMIC_LOAD48]], [[TMP41]]
// CHK-C-NEXT:    [[FROMBOOL52:%.*]] = zext i1 [[CMP50]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL52]], ptr [[ATMP51]], align 1
// CHK-C-NEXT:    br i1 [[CMP50]], label [[ATOMIC_CONT53:%.*]], label [[ATOMIC_EXIT58:%.*]]
// CHK-C:       atomic_cont53:
// CHK-C-NEXT:    [[TMP42:%.*]] = phi i32 [ [[ATOMIC_LOAD48]], [[ATOMIC_EXIT47]] ], [ [[TMP45:%.*]], [[ATOMIC_CMP55:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP42]], ptr [[ATMP49]], align 4
// CHK-C-NEXT:    store i32 [[TMP41]], ptr [[ATOMIC_TEMP54]], align 4
// CHK-C-NEXT:    [[TMP43:%.*]] = load i32, ptr [[ATOMIC_TEMP54]], align 4
// CHK-C-NEXT:    [[TMP44:%.*]] = cmpxchg ptr [[X]], i32 [[TMP42]], i32 [[TMP43]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP45]] = extractvalue { i32, i1 } [[TMP44]], 0
// CHK-C-NEXT:    [[TMP46:%.*]] = extractvalue { i32, i1 } [[TMP44]], 1
// CHK-C-NEXT:    br i1 [[TMP46]], label [[ATOMIC_EXIT58]], label [[ATOMIC_CMP55]]
// CHK-C:       atomic_cmp55:
// CHK-C-NEXT:    [[CMP56:%.*]] = icmp sgt i32 [[TMP45]], [[TMP41]]
// CHK-C-NEXT:    [[FROMBOOL57:%.*]] = zext i1 [[CMP56]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL57]], ptr [[ATMP51]], align 1
// CHK-C-NEXT:    br i1 [[CMP56]], label [[ATOMIC_CONT53]], label [[ATOMIC_EXIT58]]
// CHK-C:       atomic_exit58:
// CHK-C-NEXT:    [[TMP47:%.*]] = load i32, ptr [[ATMP49]], align 4
// CHK-C-NEXT:    [[TMP48:%.*]] = load i8, ptr [[ATMP51]], align 1
// CHK-C-NEXT:    [[TMP49:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD59:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD59]], ptr [[ATMP60]], align 4
// CHK-C-NEXT:    [[CMP61:%.*]] = icmp slt i32 [[ATOMIC_LOAD59]], [[TMP49]]
// CHK-C-NEXT:    [[FROMBOOL63:%.*]] = zext i1 [[CMP61]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL63]], ptr [[ATMP62]], align 1
// CHK-C-NEXT:    br i1 [[CMP61]], label [[ATOMIC_CONT64:%.*]], label [[ATOMIC_EXIT69:%.*]]
// CHK-C:       atomic_cont64:
// CHK-C-NEXT:    [[TMP50:%.*]] = phi i32 [ [[ATOMIC_LOAD59]], [[ATOMIC_EXIT58]] ], [ [[TMP53:%.*]], [[ATOMIC_CMP66:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP50]], ptr [[ATMP60]], align 4
// CHK-C-NEXT:    store i32 [[TMP49]], ptr [[ATOMIC_TEMP65]], align 4
// CHK-C-NEXT:    [[TMP51:%.*]] = load i32, ptr [[ATOMIC_TEMP65]], align 4
// CHK-C-NEXT:    [[TMP52:%.*]] = cmpxchg ptr [[X]], i32 [[TMP50]], i32 [[TMP51]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP53]] = extractvalue { i32, i1 } [[TMP52]], 0
// CHK-C-NEXT:    [[TMP54:%.*]] = extractvalue { i32, i1 } [[TMP52]], 1
// CHK-C-NEXT:    br i1 [[TMP54]], label [[ATOMIC_EXIT69]], label [[ATOMIC_CMP66]]
// CHK-C:       atomic_cmp66:
// CHK-C-NEXT:    [[CMP67:%.*]] = icmp slt i32 [[TMP53]], [[TMP49]]
// CHK-C-NEXT:    [[FROMBOOL68:%.*]] = zext i1 [[CMP67]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL68]], ptr [[ATMP62]], align 1
// CHK-C-NEXT:    br i1 [[CMP67]], label [[ATOMIC_CONT64]], label [[ATOMIC_EXIT69]]
// CHK-C:       atomic_exit69:
// CHK-C-NEXT:    [[TMP55:%.*]] = load i32, ptr [[ATMP60]], align 4
// CHK-C-NEXT:    [[TMP56:%.*]] = load i8, ptr [[ATMP62]], align 1
// CHK-C-NEXT:    [[TMP57:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD70:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD70]], ptr [[ATMP71]], align 4
// CHK-C-NEXT:    [[CMP72:%.*]] = icmp slt i32 [[ATOMIC_LOAD70]], [[TMP57]]
// CHK-C-NEXT:    [[FROMBOOL74:%.*]] = zext i1 [[CMP72]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL74]], ptr [[ATMP73]], align 1
// CHK-C-NEXT:    br i1 [[CMP72]], label [[ATOMIC_CONT75:%.*]], label [[ATOMIC_EXIT80:%.*]]
// CHK-C:       atomic_cont75:
// CHK-C-NEXT:    [[TMP58:%.*]] = phi i32 [ [[ATOMIC_LOAD70]], [[ATOMIC_EXIT69]] ], [ [[TMP61:%.*]], [[ATOMIC_CMP77:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP58]], ptr [[ATMP71]], align 4
// CHK-C-NEXT:    store i32 [[TMP57]], ptr [[ATOMIC_TEMP76]], align 4
// CHK-C-NEXT:    [[TMP59:%.*]] = load i32, ptr [[ATOMIC_TEMP76]], align 4
// CHK-C-NEXT:    [[TMP60:%.*]] = cmpxchg ptr [[X]], i32 [[TMP58]], i32 [[TMP59]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP61]] = extractvalue { i32, i1 } [[TMP60]], 0
// CHK-C-NEXT:    [[TMP62:%.*]] = extractvalue { i32, i1 } [[TMP60]], 1
// CHK-C-NEXT:    br i1 [[TMP62]], label [[ATOMIC_EXIT80]], label [[ATOMIC_CMP77]]
// CHK-C:       atomic_cmp77:
// CHK-C-NEXT:    [[CMP78:%.*]] = icmp slt i32 [[TMP61]], [[TMP57]]
// CHK-C-NEXT:    [[FROMBOOL79:%.*]] = zext i1 [[CMP78]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL79]], ptr [[ATMP73]], align 1
// CHK-C-NEXT:    br i1 [[CMP78]], label [[ATOMIC_CONT75]], label [[ATOMIC_EXIT80]]
// CHK-C:       atomic_exit80:
// CHK-C-NEXT:    [[TMP63:%.*]] = load i32, ptr [[ATMP71]], align 4
// CHK-C-NEXT:    [[TMP64:%.*]] = load i8, ptr [[ATMP73]], align 1
// CHK-C-NEXT:    [[TMP65:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD81:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD81]], ptr [[ATMP82]], align 4
// CHK-C-NEXT:    [[CMP83:%.*]] = icmp sgt i32 [[ATOMIC_LOAD81]], [[TMP65]]
// CHK-C-NEXT:    [[FROMBOOL85:%.*]] = zext i1 [[CMP83]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL85]], ptr [[ATMP84]], align 1
// CHK-C-NEXT:    br i1 [[CMP83]], label [[ATOMIC_CONT86:%.*]], label [[ATOMIC_EXIT91:%.*]]
// CHK-C:       atomic_cont86:
// CHK-C-NEXT:    [[TMP66:%.*]] = phi i32 [ [[ATOMIC_LOAD81]], [[ATOMIC_EXIT80]] ], [ [[TMP69:%.*]], [[ATOMIC_CMP88:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP66]], ptr [[ATMP82]], align 4
// CHK-C-NEXT:    store i32 [[TMP65]], ptr [[ATOMIC_TEMP87]], align 4
// CHK-C-NEXT:    [[TMP67:%.*]] = load i32, ptr [[ATOMIC_TEMP87]], align 4
// CHK-C-NEXT:    [[TMP68:%.*]] = cmpxchg ptr [[X]], i32 [[TMP66]], i32 [[TMP67]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP69]] = extractvalue { i32, i1 } [[TMP68]], 0
// CHK-C-NEXT:    [[TMP70:%.*]] = extractvalue { i32, i1 } [[TMP68]], 1
// CHK-C-NEXT:    br i1 [[TMP70]], label [[ATOMIC_EXIT91]], label [[ATOMIC_CMP88]]
// CHK-C:       atomic_cmp88:
// CHK-C-NEXT:    [[CMP89:%.*]] = icmp sgt i32 [[TMP69]], [[TMP65]]
// CHK-C-NEXT:    [[FROMBOOL90:%.*]] = zext i1 [[CMP89]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL90]], ptr [[ATMP84]], align 1
// CHK-C-NEXT:    br i1 [[CMP89]], label [[ATOMIC_CONT86]], label [[ATOMIC_EXIT91]]
// CHK-C:       atomic_exit91:
// CHK-C-NEXT:    [[TMP71:%.*]] = load i32, ptr [[ATMP82]], align 4
// CHK-C-NEXT:    [[TMP72:%.*]] = load i8, ptr [[ATMP84]], align 1
// CHK-C-NEXT:    [[TMP73:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[TMP74:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD92:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD92]], ptr [[ATMP93]], align 4
// CHK-C-NEXT:    [[CMP94:%.*]] = icmp eq i32 [[ATOMIC_LOAD92]], [[TMP74]]
// CHK-C-NEXT:    [[FROMBOOL96:%.*]] = zext i1 [[CMP94]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL96]], ptr [[ATMP95]], align 1
// CHK-C-NEXT:    br i1 [[CMP94]], label [[ATOMIC_CONT97:%.*]], label [[ATOMIC_EXIT102:%.*]]
// CHK-C:       atomic_cont97:
// CHK-C-NEXT:    [[TMP75:%.*]] = phi i32 [ [[ATOMIC_LOAD92]], [[ATOMIC_EXIT91]] ], [ [[TMP78:%.*]], [[ATOMIC_CMP99:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP75]], ptr [[ATMP93]], align 4
// CHK-C-NEXT:    store i32 [[TMP73]], ptr [[ATOMIC_TEMP98]], align 4
// CHK-C-NEXT:    [[TMP76:%.*]] = load i32, ptr [[ATOMIC_TEMP98]], align 4
// CHK-C-NEXT:    [[TMP77:%.*]] = cmpxchg ptr [[X]], i32 [[TMP75]], i32 [[TMP76]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP78]] = extractvalue { i32, i1 } [[TMP77]], 0
// CHK-C-NEXT:    [[TMP79:%.*]] = extractvalue { i32, i1 } [[TMP77]], 1
// CHK-C-NEXT:    br i1 [[TMP79]], label [[ATOMIC_EXIT102]], label [[ATOMIC_CMP99]]
// CHK-C:       atomic_cmp99:
// CHK-C-NEXT:    [[CMP100:%.*]] = icmp eq i32 [[TMP78]], [[TMP74]]
// CHK-C-NEXT:    [[FROMBOOL101:%.*]] = zext i1 [[CMP100]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL101]], ptr [[ATMP95]], align 1
// CHK-C-NEXT:    br i1 [[CMP100]], label [[ATOMIC_CONT97]], label [[ATOMIC_EXIT102]]
// CHK-C:       atomic_exit102:
// CHK-C-NEXT:    [[TMP80:%.*]] = load i32, ptr [[ATMP93]], align 4
// CHK-C-NEXT:    [[TMP81:%.*]] = load i8, ptr [[ATMP95]], align 1
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z8test_intv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[X:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP5:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP7:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP10:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP16:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP18:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP21:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP27:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP29:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP32:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP38:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP40:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP43:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP49:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP51:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP54:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP60:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP62:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP65:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP71:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP73:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP76:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP82:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP84:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP87:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP93:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP95:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP98:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD]], ptr [[TMP]], align 4
// CHK-CXX-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-CXX-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL]], ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP1:%.*]] = phi i32 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP1]], ptr [[TMP]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP0]], ptr [[ATOMIC_TEMP]], align 4
// CHK-CXX-NEXT:    [[TMP2:%.*]] = load i32, ptr [[ATOMIC_TEMP]], align 4
// CHK-CXX-NEXT:    [[TMP3:%.*]] = cmpxchg ptr [[X]], i32 [[TMP1]], i32 [[TMP2]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP4]] = extractvalue { i32, i1 } [[TMP3]], 0
// CHK-CXX-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i1 } [[TMP3]], 1
// CHK-CXX-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    [[CMP2:%.*]] = icmp sgt i32 [[TMP4]], [[TMP0]]
// CHK-CXX-NEXT:    [[FROMBOOL3:%.*]] = zext i1 [[CMP2]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL3]], ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP2]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP]], align 4
// CHK-CXX-NEXT:    [[TMP7:%.*]] = load i8, ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    [[TMP8:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD4:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD4]], ptr [[ATMP5]], align 4
// CHK-CXX-NEXT:    [[CMP6:%.*]] = icmp slt i32 [[ATOMIC_LOAD4]], [[TMP8]]
// CHK-CXX-NEXT:    [[FROMBOOL8:%.*]] = zext i1 [[CMP6]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL8]], ptr [[ATMP7]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP6]], label [[ATOMIC_CONT9:%.*]], label [[ATOMIC_EXIT14:%.*]]
// CHK-CXX:       atomic_cont9:
// CHK-CXX-NEXT:    [[TMP9:%.*]] = phi i32 [ [[ATOMIC_LOAD4]], [[ATOMIC_EXIT]] ], [ [[TMP12:%.*]], [[ATOMIC_CMP11:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP9]], ptr [[ATMP5]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP8]], ptr [[ATOMIC_TEMP10]], align 4
// CHK-CXX-NEXT:    [[TMP10:%.*]] = load i32, ptr [[ATOMIC_TEMP10]], align 4
// CHK-CXX-NEXT:    [[TMP11:%.*]] = cmpxchg ptr [[X]], i32 [[TMP9]], i32 [[TMP10]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP12]] = extractvalue { i32, i1 } [[TMP11]], 0
// CHK-CXX-NEXT:    [[TMP13:%.*]] = extractvalue { i32, i1 } [[TMP11]], 1
// CHK-CXX-NEXT:    br i1 [[TMP13]], label [[ATOMIC_EXIT14]], label [[ATOMIC_CMP11]]
// CHK-CXX:       atomic_cmp11:
// CHK-CXX-NEXT:    [[CMP12:%.*]] = icmp slt i32 [[TMP12]], [[TMP8]]
// CHK-CXX-NEXT:    [[FROMBOOL13:%.*]] = zext i1 [[CMP12]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL13]], ptr [[ATMP7]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT9]], label [[ATOMIC_EXIT14]]
// CHK-CXX:       atomic_exit14:
// CHK-CXX-NEXT:    [[TMP14:%.*]] = load i32, ptr [[ATMP5]], align 4
// CHK-CXX-NEXT:    [[TMP15:%.*]] = load i8, ptr [[ATMP7]], align 1
// CHK-CXX-NEXT:    [[TMP16:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD15:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD15]], ptr [[ATMP16]], align 4
// CHK-CXX-NEXT:    [[CMP17:%.*]] = icmp slt i32 [[ATOMIC_LOAD15]], [[TMP16]]
// CHK-CXX-NEXT:    [[FROMBOOL19:%.*]] = zext i1 [[CMP17]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL19]], ptr [[ATMP18]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP17]], label [[ATOMIC_CONT20:%.*]], label [[ATOMIC_EXIT25:%.*]]
// CHK-CXX:       atomic_cont20:
// CHK-CXX-NEXT:    [[TMP17:%.*]] = phi i32 [ [[ATOMIC_LOAD15]], [[ATOMIC_EXIT14]] ], [ [[TMP20:%.*]], [[ATOMIC_CMP22:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP17]], ptr [[ATMP16]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP16]], ptr [[ATOMIC_TEMP21]], align 4
// CHK-CXX-NEXT:    [[TMP18:%.*]] = load i32, ptr [[ATOMIC_TEMP21]], align 4
// CHK-CXX-NEXT:    [[TMP19:%.*]] = cmpxchg ptr [[X]], i32 [[TMP17]], i32 [[TMP18]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP20]] = extractvalue { i32, i1 } [[TMP19]], 0
// CHK-CXX-NEXT:    [[TMP21:%.*]] = extractvalue { i32, i1 } [[TMP19]], 1
// CHK-CXX-NEXT:    br i1 [[TMP21]], label [[ATOMIC_EXIT25]], label [[ATOMIC_CMP22]]
// CHK-CXX:       atomic_cmp22:
// CHK-CXX-NEXT:    [[CMP23:%.*]] = icmp slt i32 [[TMP20]], [[TMP16]]
// CHK-CXX-NEXT:    [[FROMBOOL24:%.*]] = zext i1 [[CMP23]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL24]], ptr [[ATMP18]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP23]], label [[ATOMIC_CONT20]], label [[ATOMIC_EXIT25]]
// CHK-CXX:       atomic_exit25:
// CHK-CXX-NEXT:    [[TMP22:%.*]] = load i32, ptr [[ATMP16]], align 4
// CHK-CXX-NEXT:    [[TMP23:%.*]] = load i8, ptr [[ATMP18]], align 1
// CHK-CXX-NEXT:    [[TMP24:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD26:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD26]], ptr [[ATMP27]], align 4
// CHK-CXX-NEXT:    [[CMP28:%.*]] = icmp sgt i32 [[ATOMIC_LOAD26]], [[TMP24]]
// CHK-CXX-NEXT:    [[FROMBOOL30:%.*]] = zext i1 [[CMP28]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL30]], ptr [[ATMP29]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP28]], label [[ATOMIC_CONT31:%.*]], label [[ATOMIC_EXIT36:%.*]]
// CHK-CXX:       atomic_cont31:
// CHK-CXX-NEXT:    [[TMP25:%.*]] = phi i32 [ [[ATOMIC_LOAD26]], [[ATOMIC_EXIT25]] ], [ [[TMP28:%.*]], [[ATOMIC_CMP33:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP25]], ptr [[ATMP27]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP24]], ptr [[ATOMIC_TEMP32]], align 4
// CHK-CXX-NEXT:    [[TMP26:%.*]] = load i32, ptr [[ATOMIC_TEMP32]], align 4
// CHK-CXX-NEXT:    [[TMP27:%.*]] = cmpxchg ptr [[X]], i32 [[TMP25]], i32 [[TMP26]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP28]] = extractvalue { i32, i1 } [[TMP27]], 0
// CHK-CXX-NEXT:    [[TMP29:%.*]] = extractvalue { i32, i1 } [[TMP27]], 1
// CHK-CXX-NEXT:    br i1 [[TMP29]], label [[ATOMIC_EXIT36]], label [[ATOMIC_CMP33]]
// CHK-CXX:       atomic_cmp33:
// CHK-CXX-NEXT:    [[CMP34:%.*]] = icmp sgt i32 [[TMP28]], [[TMP24]]
// CHK-CXX-NEXT:    [[FROMBOOL35:%.*]] = zext i1 [[CMP34]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL35]], ptr [[ATMP29]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP34]], label [[ATOMIC_CONT31]], label [[ATOMIC_EXIT36]]
// CHK-CXX:       atomic_exit36:
// CHK-CXX-NEXT:    [[TMP30:%.*]] = load i32, ptr [[ATMP27]], align 4
// CHK-CXX-NEXT:    [[TMP31:%.*]] = load i8, ptr [[ATMP29]], align 1
// CHK-CXX-NEXT:    [[TMP32:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[TMP33:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD37:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD37]], ptr [[ATMP38]], align 4
// CHK-CXX-NEXT:    [[CMP39:%.*]] = icmp eq i32 [[ATOMIC_LOAD37]], [[TMP33]]
// CHK-CXX-NEXT:    [[FROMBOOL41:%.*]] = zext i1 [[CMP39]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL41]], ptr [[ATMP40]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP39]], label [[ATOMIC_CONT42:%.*]], label [[ATOMIC_EXIT47:%.*]]
// CHK-CXX:       atomic_cont42:
// CHK-CXX-NEXT:    [[TMP34:%.*]] = phi i32 [ [[ATOMIC_LOAD37]], [[ATOMIC_EXIT36]] ], [ [[TMP37:%.*]], [[ATOMIC_CMP44:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP34]], ptr [[ATMP38]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP32]], ptr [[ATOMIC_TEMP43]], align 4
// CHK-CXX-NEXT:    [[TMP35:%.*]] = load i32, ptr [[ATOMIC_TEMP43]], align 4
// CHK-CXX-NEXT:    [[TMP36:%.*]] = cmpxchg ptr [[X]], i32 [[TMP34]], i32 [[TMP35]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP37]] = extractvalue { i32, i1 } [[TMP36]], 0
// CHK-CXX-NEXT:    [[TMP38:%.*]] = extractvalue { i32, i1 } [[TMP36]], 1
// CHK-CXX-NEXT:    br i1 [[TMP38]], label [[ATOMIC_EXIT47]], label [[ATOMIC_CMP44]]
// CHK-CXX:       atomic_cmp44:
// CHK-CXX-NEXT:    [[CMP45:%.*]] = icmp eq i32 [[TMP37]], [[TMP33]]
// CHK-CXX-NEXT:    [[FROMBOOL46:%.*]] = zext i1 [[CMP45]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL46]], ptr [[ATMP40]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP45]], label [[ATOMIC_CONT42]], label [[ATOMIC_EXIT47]]
// CHK-CXX:       atomic_exit47:
// CHK-CXX-NEXT:    [[TMP39:%.*]] = load i32, ptr [[ATMP38]], align 4
// CHK-CXX-NEXT:    [[TMP40:%.*]] = load i8, ptr [[ATMP40]], align 1
// CHK-CXX-NEXT:    [[TMP41:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD48:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD48]], ptr [[ATMP49]], align 4
// CHK-CXX-NEXT:    [[CMP50:%.*]] = icmp sgt i32 [[ATOMIC_LOAD48]], [[TMP41]]
// CHK-CXX-NEXT:    [[FROMBOOL52:%.*]] = zext i1 [[CMP50]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL52]], ptr [[ATMP51]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP50]], label [[ATOMIC_CONT53:%.*]], label [[ATOMIC_EXIT58:%.*]]
// CHK-CXX:       atomic_cont53:
// CHK-CXX-NEXT:    [[TMP42:%.*]] = phi i32 [ [[ATOMIC_LOAD48]], [[ATOMIC_EXIT47]] ], [ [[TMP45:%.*]], [[ATOMIC_CMP55:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP42]], ptr [[ATMP49]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP41]], ptr [[ATOMIC_TEMP54]], align 4
// CHK-CXX-NEXT:    [[TMP43:%.*]] = load i32, ptr [[ATOMIC_TEMP54]], align 4
// CHK-CXX-NEXT:    [[TMP44:%.*]] = cmpxchg ptr [[X]], i32 [[TMP42]], i32 [[TMP43]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP45]] = extractvalue { i32, i1 } [[TMP44]], 0
// CHK-CXX-NEXT:    [[TMP46:%.*]] = extractvalue { i32, i1 } [[TMP44]], 1
// CHK-CXX-NEXT:    br i1 [[TMP46]], label [[ATOMIC_EXIT58]], label [[ATOMIC_CMP55]]
// CHK-CXX:       atomic_cmp55:
// CHK-CXX-NEXT:    [[CMP56:%.*]] = icmp sgt i32 [[TMP45]], [[TMP41]]
// CHK-CXX-NEXT:    [[FROMBOOL57:%.*]] = zext i1 [[CMP56]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL57]], ptr [[ATMP51]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP56]], label [[ATOMIC_CONT53]], label [[ATOMIC_EXIT58]]
// CHK-CXX:       atomic_exit58:
// CHK-CXX-NEXT:    [[TMP47:%.*]] = load i32, ptr [[ATMP49]], align 4
// CHK-CXX-NEXT:    [[TMP48:%.*]] = load i8, ptr [[ATMP51]], align 1
// CHK-CXX-NEXT:    [[TMP49:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD59:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD59]], ptr [[ATMP60]], align 4
// CHK-CXX-NEXT:    [[CMP61:%.*]] = icmp slt i32 [[ATOMIC_LOAD59]], [[TMP49]]
// CHK-CXX-NEXT:    [[FROMBOOL63:%.*]] = zext i1 [[CMP61]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL63]], ptr [[ATMP62]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP61]], label [[ATOMIC_CONT64:%.*]], label [[ATOMIC_EXIT69:%.*]]
// CHK-CXX:       atomic_cont64:
// CHK-CXX-NEXT:    [[TMP50:%.*]] = phi i32 [ [[ATOMIC_LOAD59]], [[ATOMIC_EXIT58]] ], [ [[TMP53:%.*]], [[ATOMIC_CMP66:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP50]], ptr [[ATMP60]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP49]], ptr [[ATOMIC_TEMP65]], align 4
// CHK-CXX-NEXT:    [[TMP51:%.*]] = load i32, ptr [[ATOMIC_TEMP65]], align 4
// CHK-CXX-NEXT:    [[TMP52:%.*]] = cmpxchg ptr [[X]], i32 [[TMP50]], i32 [[TMP51]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP53]] = extractvalue { i32, i1 } [[TMP52]], 0
// CHK-CXX-NEXT:    [[TMP54:%.*]] = extractvalue { i32, i1 } [[TMP52]], 1
// CHK-CXX-NEXT:    br i1 [[TMP54]], label [[ATOMIC_EXIT69]], label [[ATOMIC_CMP66]]
// CHK-CXX:       atomic_cmp66:
// CHK-CXX-NEXT:    [[CMP67:%.*]] = icmp slt i32 [[TMP53]], [[TMP49]]
// CHK-CXX-NEXT:    [[FROMBOOL68:%.*]] = zext i1 [[CMP67]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL68]], ptr [[ATMP62]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP67]], label [[ATOMIC_CONT64]], label [[ATOMIC_EXIT69]]
// CHK-CXX:       atomic_exit69:
// CHK-CXX-NEXT:    [[TMP55:%.*]] = load i32, ptr [[ATMP60]], align 4
// CHK-CXX-NEXT:    [[TMP56:%.*]] = load i8, ptr [[ATMP62]], align 1
// CHK-CXX-NEXT:    [[TMP57:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD70:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD70]], ptr [[ATMP71]], align 4
// CHK-CXX-NEXT:    [[CMP72:%.*]] = icmp slt i32 [[ATOMIC_LOAD70]], [[TMP57]]
// CHK-CXX-NEXT:    [[FROMBOOL74:%.*]] = zext i1 [[CMP72]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL74]], ptr [[ATMP73]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP72]], label [[ATOMIC_CONT75:%.*]], label [[ATOMIC_EXIT80:%.*]]
// CHK-CXX:       atomic_cont75:
// CHK-CXX-NEXT:    [[TMP58:%.*]] = phi i32 [ [[ATOMIC_LOAD70]], [[ATOMIC_EXIT69]] ], [ [[TMP61:%.*]], [[ATOMIC_CMP77:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP58]], ptr [[ATMP71]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP57]], ptr [[ATOMIC_TEMP76]], align 4
// CHK-CXX-NEXT:    [[TMP59:%.*]] = load i32, ptr [[ATOMIC_TEMP76]], align 4
// CHK-CXX-NEXT:    [[TMP60:%.*]] = cmpxchg ptr [[X]], i32 [[TMP58]], i32 [[TMP59]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP61]] = extractvalue { i32, i1 } [[TMP60]], 0
// CHK-CXX-NEXT:    [[TMP62:%.*]] = extractvalue { i32, i1 } [[TMP60]], 1
// CHK-CXX-NEXT:    br i1 [[TMP62]], label [[ATOMIC_EXIT80]], label [[ATOMIC_CMP77]]
// CHK-CXX:       atomic_cmp77:
// CHK-CXX-NEXT:    [[CMP78:%.*]] = icmp slt i32 [[TMP61]], [[TMP57]]
// CHK-CXX-NEXT:    [[FROMBOOL79:%.*]] = zext i1 [[CMP78]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL79]], ptr [[ATMP73]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP78]], label [[ATOMIC_CONT75]], label [[ATOMIC_EXIT80]]
// CHK-CXX:       atomic_exit80:
// CHK-CXX-NEXT:    [[TMP63:%.*]] = load i32, ptr [[ATMP71]], align 4
// CHK-CXX-NEXT:    [[TMP64:%.*]] = load i8, ptr [[ATMP73]], align 1
// CHK-CXX-NEXT:    [[TMP65:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD81:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD81]], ptr [[ATMP82]], align 4
// CHK-CXX-NEXT:    [[CMP83:%.*]] = icmp sgt i32 [[ATOMIC_LOAD81]], [[TMP65]]
// CHK-CXX-NEXT:    [[FROMBOOL85:%.*]] = zext i1 [[CMP83]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL85]], ptr [[ATMP84]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP83]], label [[ATOMIC_CONT86:%.*]], label [[ATOMIC_EXIT91:%.*]]
// CHK-CXX:       atomic_cont86:
// CHK-CXX-NEXT:    [[TMP66:%.*]] = phi i32 [ [[ATOMIC_LOAD81]], [[ATOMIC_EXIT80]] ], [ [[TMP69:%.*]], [[ATOMIC_CMP88:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP66]], ptr [[ATMP82]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP65]], ptr [[ATOMIC_TEMP87]], align 4
// CHK-CXX-NEXT:    [[TMP67:%.*]] = load i32, ptr [[ATOMIC_TEMP87]], align 4
// CHK-CXX-NEXT:    [[TMP68:%.*]] = cmpxchg ptr [[X]], i32 [[TMP66]], i32 [[TMP67]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP69]] = extractvalue { i32, i1 } [[TMP68]], 0
// CHK-CXX-NEXT:    [[TMP70:%.*]] = extractvalue { i32, i1 } [[TMP68]], 1
// CHK-CXX-NEXT:    br i1 [[TMP70]], label [[ATOMIC_EXIT91]], label [[ATOMIC_CMP88]]
// CHK-CXX:       atomic_cmp88:
// CHK-CXX-NEXT:    [[CMP89:%.*]] = icmp sgt i32 [[TMP69]], [[TMP65]]
// CHK-CXX-NEXT:    [[FROMBOOL90:%.*]] = zext i1 [[CMP89]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL90]], ptr [[ATMP84]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP89]], label [[ATOMIC_CONT86]], label [[ATOMIC_EXIT91]]
// CHK-CXX:       atomic_exit91:
// CHK-CXX-NEXT:    [[TMP71:%.*]] = load i32, ptr [[ATMP82]], align 4
// CHK-CXX-NEXT:    [[TMP72:%.*]] = load i8, ptr [[ATMP84]], align 1
// CHK-CXX-NEXT:    [[TMP73:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[TMP74:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD92:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD92]], ptr [[ATMP93]], align 4
// CHK-CXX-NEXT:    [[CMP94:%.*]] = icmp eq i32 [[ATOMIC_LOAD92]], [[TMP74]]
// CHK-CXX-NEXT:    [[FROMBOOL96:%.*]] = zext i1 [[CMP94]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL96]], ptr [[ATMP95]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP94]], label [[ATOMIC_CONT97:%.*]], label [[ATOMIC_EXIT102:%.*]]
// CHK-CXX:       atomic_cont97:
// CHK-CXX-NEXT:    [[TMP75:%.*]] = phi i32 [ [[ATOMIC_LOAD92]], [[ATOMIC_EXIT91]] ], [ [[TMP78:%.*]], [[ATOMIC_CMP99:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP75]], ptr [[ATMP93]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP73]], ptr [[ATOMIC_TEMP98]], align 4
// CHK-CXX-NEXT:    [[TMP76:%.*]] = load i32, ptr [[ATOMIC_TEMP98]], align 4
// CHK-CXX-NEXT:    [[TMP77:%.*]] = cmpxchg ptr [[X]], i32 [[TMP75]], i32 [[TMP76]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP78]] = extractvalue { i32, i1 } [[TMP77]], 0
// CHK-CXX-NEXT:    [[TMP79:%.*]] = extractvalue { i32, i1 } [[TMP77]], 1
// CHK-CXX-NEXT:    br i1 [[TMP79]], label [[ATOMIC_EXIT102]], label [[ATOMIC_CMP99]]
// CHK-CXX:       atomic_cmp99:
// CHK-CXX-NEXT:    [[CMP100:%.*]] = icmp eq i32 [[TMP78]], [[TMP74]]
// CHK-CXX-NEXT:    [[FROMBOOL101:%.*]] = zext i1 [[CMP100]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL101]], ptr [[ATMP95]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP100]], label [[ATOMIC_CONT97]], label [[ATOMIC_EXIT102]]
// CHK-CXX:       atomic_exit102:
// CHK-CXX-NEXT:    [[TMP80:%.*]] = load i32, ptr [[ATMP93]], align 4
// CHK-CXX-NEXT:    [[TMP81:%.*]] = load i8, ptr [[ATMP95]], align 1
// CHK-CXX-NEXT:    ret void
//
void test_int() {
  // One of each form with 'int'.
  int x, expr, d, e;

  #pragma omp atomic compare
  x = expr < x ? expr : x; // MIN

  #pragma omp atomic compare
  x = expr > x ? expr : x; // MAX

  #pragma omp atomic compare
  x = x < expr ? expr : x; // MAX

  #pragma omp atomic compare
  x = x > expr ? expr : x; // MIN

  #pragma omp atomic compare
  x = x == e ? d : x;

  #pragma omp atomic compare
  if (expr < x) {
    x = expr;
  } // MIN

  #pragma omp atomic compare
  if (expr > x) {
    x = expr;
  } // MAX

  #pragma omp atomic compare
  if (x < expr) {
    x = expr;
  } // MAX

  #pragma omp atomic compare
  if (x > expr) {
    x = expr;
  } // MIN

  #pragma omp atomic compare
  if (x == e) {
    x = d;
  }
}

// CHK-C-LABEL: @test_unsigned_short(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[X:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[D:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[E:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[TMP:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP5:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP7:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP10:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP16:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP18:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP21:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP27:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP29:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP32:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP38:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP40:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP43:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP49:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP51:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP54:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP60:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP62:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP65:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP71:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP73:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP76:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP82:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP84:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP87:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP93:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP95:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP98:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[TMP0:%.*]] = load i16, ptr [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD]], ptr [[TMP]], align 2
// CHK-C-NEXT:    [[CMP:%.*]] = icmp ugt i16 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-C-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL]], ptr [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP1:%.*]] = phi i16 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP1]], ptr [[TMP]], align 2
// CHK-C-NEXT:    store i16 [[TMP0]], ptr [[ATOMIC_TEMP]], align 2
// CHK-C-NEXT:    [[TMP2:%.*]] = load i16, ptr [[ATOMIC_TEMP]], align 2
// CHK-C-NEXT:    [[TMP3:%.*]] = cmpxchg ptr [[X]], i16 [[TMP1]], i16 [[TMP2]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP4]] = extractvalue { i16, i1 } [[TMP3]], 0
// CHK-C-NEXT:    [[TMP5:%.*]] = extractvalue { i16, i1 } [[TMP3]], 1
// CHK-C-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    [[CMP2:%.*]] = icmp ugt i16 [[TMP4]], [[TMP0]]
// CHK-C-NEXT:    [[FROMBOOL3:%.*]] = zext i1 [[CMP2]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL3]], ptr [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP2]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP6:%.*]] = load i16, ptr [[TMP]], align 2
// CHK-C-NEXT:    [[TMP7:%.*]] = load i8, ptr [[ATMP1]], align 1
// CHK-C-NEXT:    [[TMP8:%.*]] = load i16, ptr [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD4:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD4]], ptr [[ATMP5]], align 2
// CHK-C-NEXT:    [[CMP6:%.*]] = icmp ult i16 [[ATOMIC_LOAD4]], [[TMP8]]
// CHK-C-NEXT:    [[FROMBOOL8:%.*]] = zext i1 [[CMP6]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL8]], ptr [[ATMP7]], align 1
// CHK-C-NEXT:    br i1 [[CMP6]], label [[ATOMIC_CONT9:%.*]], label [[ATOMIC_EXIT14:%.*]]
// CHK-C:       atomic_cont9:
// CHK-C-NEXT:    [[TMP9:%.*]] = phi i16 [ [[ATOMIC_LOAD4]], [[ATOMIC_EXIT]] ], [ [[TMP12:%.*]], [[ATOMIC_CMP11:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP9]], ptr [[ATMP5]], align 2
// CHK-C-NEXT:    store i16 [[TMP8]], ptr [[ATOMIC_TEMP10]], align 2
// CHK-C-NEXT:    [[TMP10:%.*]] = load i16, ptr [[ATOMIC_TEMP10]], align 2
// CHK-C-NEXT:    [[TMP11:%.*]] = cmpxchg ptr [[X]], i16 [[TMP9]], i16 [[TMP10]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP12]] = extractvalue { i16, i1 } [[TMP11]], 0
// CHK-C-NEXT:    [[TMP13:%.*]] = extractvalue { i16, i1 } [[TMP11]], 1
// CHK-C-NEXT:    br i1 [[TMP13]], label [[ATOMIC_EXIT14]], label [[ATOMIC_CMP11]]
// CHK-C:       atomic_cmp11:
// CHK-C-NEXT:    [[CMP12:%.*]] = icmp ult i16 [[TMP12]], [[TMP8]]
// CHK-C-NEXT:    [[FROMBOOL13:%.*]] = zext i1 [[CMP12]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL13]], ptr [[ATMP7]], align 1
// CHK-C-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT9]], label [[ATOMIC_EXIT14]]
// CHK-C:       atomic_exit14:
// CHK-C-NEXT:    [[TMP14:%.*]] = load i16, ptr [[ATMP5]], align 2
// CHK-C-NEXT:    [[TMP15:%.*]] = load i8, ptr [[ATMP7]], align 1
// CHK-C-NEXT:    [[TMP16:%.*]] = load i16, ptr [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD15:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD15]], ptr [[ATMP16]], align 2
// CHK-C-NEXT:    [[CMP17:%.*]] = icmp ult i16 [[ATOMIC_LOAD15]], [[TMP16]]
// CHK-C-NEXT:    [[FROMBOOL19:%.*]] = zext i1 [[CMP17]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL19]], ptr [[ATMP18]], align 1
// CHK-C-NEXT:    br i1 [[CMP17]], label [[ATOMIC_CONT20:%.*]], label [[ATOMIC_EXIT25:%.*]]
// CHK-C:       atomic_cont20:
// CHK-C-NEXT:    [[TMP17:%.*]] = phi i16 [ [[ATOMIC_LOAD15]], [[ATOMIC_EXIT14]] ], [ [[TMP20:%.*]], [[ATOMIC_CMP22:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP17]], ptr [[ATMP16]], align 2
// CHK-C-NEXT:    store i16 [[TMP16]], ptr [[ATOMIC_TEMP21]], align 2
// CHK-C-NEXT:    [[TMP18:%.*]] = load i16, ptr [[ATOMIC_TEMP21]], align 2
// CHK-C-NEXT:    [[TMP19:%.*]] = cmpxchg ptr [[X]], i16 [[TMP17]], i16 [[TMP18]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP20]] = extractvalue { i16, i1 } [[TMP19]], 0
// CHK-C-NEXT:    [[TMP21:%.*]] = extractvalue { i16, i1 } [[TMP19]], 1
// CHK-C-NEXT:    br i1 [[TMP21]], label [[ATOMIC_EXIT25]], label [[ATOMIC_CMP22]]
// CHK-C:       atomic_cmp22:
// CHK-C-NEXT:    [[CMP23:%.*]] = icmp ult i16 [[TMP20]], [[TMP16]]
// CHK-C-NEXT:    [[FROMBOOL24:%.*]] = zext i1 [[CMP23]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL24]], ptr [[ATMP18]], align 1
// CHK-C-NEXT:    br i1 [[CMP23]], label [[ATOMIC_CONT20]], label [[ATOMIC_EXIT25]]
// CHK-C:       atomic_exit25:
// CHK-C-NEXT:    [[TMP22:%.*]] = load i16, ptr [[ATMP16]], align 2
// CHK-C-NEXT:    [[TMP23:%.*]] = load i8, ptr [[ATMP18]], align 1
// CHK-C-NEXT:    [[TMP24:%.*]] = load i16, ptr [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD26:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD26]], ptr [[ATMP27]], align 2
// CHK-C-NEXT:    [[CMP28:%.*]] = icmp ugt i16 [[ATOMIC_LOAD26]], [[TMP24]]
// CHK-C-NEXT:    [[FROMBOOL30:%.*]] = zext i1 [[CMP28]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL30]], ptr [[ATMP29]], align 1
// CHK-C-NEXT:    br i1 [[CMP28]], label [[ATOMIC_CONT31:%.*]], label [[ATOMIC_EXIT36:%.*]]
// CHK-C:       atomic_cont31:
// CHK-C-NEXT:    [[TMP25:%.*]] = phi i16 [ [[ATOMIC_LOAD26]], [[ATOMIC_EXIT25]] ], [ [[TMP28:%.*]], [[ATOMIC_CMP33:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP25]], ptr [[ATMP27]], align 2
// CHK-C-NEXT:    store i16 [[TMP24]], ptr [[ATOMIC_TEMP32]], align 2
// CHK-C-NEXT:    [[TMP26:%.*]] = load i16, ptr [[ATOMIC_TEMP32]], align 2
// CHK-C-NEXT:    [[TMP27:%.*]] = cmpxchg ptr [[X]], i16 [[TMP25]], i16 [[TMP26]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP28]] = extractvalue { i16, i1 } [[TMP27]], 0
// CHK-C-NEXT:    [[TMP29:%.*]] = extractvalue { i16, i1 } [[TMP27]], 1
// CHK-C-NEXT:    br i1 [[TMP29]], label [[ATOMIC_EXIT36]], label [[ATOMIC_CMP33]]
// CHK-C:       atomic_cmp33:
// CHK-C-NEXT:    [[CMP34:%.*]] = icmp ugt i16 [[TMP28]], [[TMP24]]
// CHK-C-NEXT:    [[FROMBOOL35:%.*]] = zext i1 [[CMP34]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL35]], ptr [[ATMP29]], align 1
// CHK-C-NEXT:    br i1 [[CMP34]], label [[ATOMIC_CONT31]], label [[ATOMIC_EXIT36]]
// CHK-C:       atomic_exit36:
// CHK-C-NEXT:    [[TMP30:%.*]] = load i16, ptr [[ATMP27]], align 2
// CHK-C-NEXT:    [[TMP31:%.*]] = load i8, ptr [[ATMP29]], align 1
// CHK-C-NEXT:    [[TMP32:%.*]] = load i16, ptr [[D]], align 2
// CHK-C-NEXT:    [[TMP33:%.*]] = load i16, ptr [[E]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD37:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD37]], ptr [[ATMP38]], align 2
// CHK-C-NEXT:    [[CMP39:%.*]] = icmp eq i16 [[ATOMIC_LOAD37]], [[TMP33]]
// CHK-C-NEXT:    [[FROMBOOL41:%.*]] = zext i1 [[CMP39]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL41]], ptr [[ATMP40]], align 1
// CHK-C-NEXT:    br i1 [[CMP39]], label [[ATOMIC_CONT42:%.*]], label [[ATOMIC_EXIT47:%.*]]
// CHK-C:       atomic_cont42:
// CHK-C-NEXT:    [[TMP34:%.*]] = phi i16 [ [[ATOMIC_LOAD37]], [[ATOMIC_EXIT36]] ], [ [[TMP37:%.*]], [[ATOMIC_CMP44:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP34]], ptr [[ATMP38]], align 2
// CHK-C-NEXT:    store i16 [[TMP32]], ptr [[ATOMIC_TEMP43]], align 2
// CHK-C-NEXT:    [[TMP35:%.*]] = load i16, ptr [[ATOMIC_TEMP43]], align 2
// CHK-C-NEXT:    [[TMP36:%.*]] = cmpxchg ptr [[X]], i16 [[TMP34]], i16 [[TMP35]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP37]] = extractvalue { i16, i1 } [[TMP36]], 0
// CHK-C-NEXT:    [[TMP38:%.*]] = extractvalue { i16, i1 } [[TMP36]], 1
// CHK-C-NEXT:    br i1 [[TMP38]], label [[ATOMIC_EXIT47]], label [[ATOMIC_CMP44]]
// CHK-C:       atomic_cmp44:
// CHK-C-NEXT:    [[CMP45:%.*]] = icmp eq i16 [[TMP37]], [[TMP33]]
// CHK-C-NEXT:    [[FROMBOOL46:%.*]] = zext i1 [[CMP45]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL46]], ptr [[ATMP40]], align 1
// CHK-C-NEXT:    br i1 [[CMP45]], label [[ATOMIC_CONT42]], label [[ATOMIC_EXIT47]]
// CHK-C:       atomic_exit47:
// CHK-C-NEXT:    [[TMP39:%.*]] = load i16, ptr [[ATMP38]], align 2
// CHK-C-NEXT:    [[TMP40:%.*]] = load i8, ptr [[ATMP40]], align 1
// CHK-C-NEXT:    [[TMP41:%.*]] = load i16, ptr [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD48:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD48]], ptr [[ATMP49]], align 2
// CHK-C-NEXT:    [[CMP50:%.*]] = icmp ugt i16 [[ATOMIC_LOAD48]], [[TMP41]]
// CHK-C-NEXT:    [[FROMBOOL52:%.*]] = zext i1 [[CMP50]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL52]], ptr [[ATMP51]], align 1
// CHK-C-NEXT:    br i1 [[CMP50]], label [[ATOMIC_CONT53:%.*]], label [[ATOMIC_EXIT58:%.*]]
// CHK-C:       atomic_cont53:
// CHK-C-NEXT:    [[TMP42:%.*]] = phi i16 [ [[ATOMIC_LOAD48]], [[ATOMIC_EXIT47]] ], [ [[TMP45:%.*]], [[ATOMIC_CMP55:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP42]], ptr [[ATMP49]], align 2
// CHK-C-NEXT:    store i16 [[TMP41]], ptr [[ATOMIC_TEMP54]], align 2
// CHK-C-NEXT:    [[TMP43:%.*]] = load i16, ptr [[ATOMIC_TEMP54]], align 2
// CHK-C-NEXT:    [[TMP44:%.*]] = cmpxchg ptr [[X]], i16 [[TMP42]], i16 [[TMP43]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP45]] = extractvalue { i16, i1 } [[TMP44]], 0
// CHK-C-NEXT:    [[TMP46:%.*]] = extractvalue { i16, i1 } [[TMP44]], 1
// CHK-C-NEXT:    br i1 [[TMP46]], label [[ATOMIC_EXIT58]], label [[ATOMIC_CMP55]]
// CHK-C:       atomic_cmp55:
// CHK-C-NEXT:    [[CMP56:%.*]] = icmp ugt i16 [[TMP45]], [[TMP41]]
// CHK-C-NEXT:    [[FROMBOOL57:%.*]] = zext i1 [[CMP56]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL57]], ptr [[ATMP51]], align 1
// CHK-C-NEXT:    br i1 [[CMP56]], label [[ATOMIC_CONT53]], label [[ATOMIC_EXIT58]]
// CHK-C:       atomic_exit58:
// CHK-C-NEXT:    [[TMP47:%.*]] = load i16, ptr [[ATMP49]], align 2
// CHK-C-NEXT:    [[TMP48:%.*]] = load i8, ptr [[ATMP51]], align 1
// CHK-C-NEXT:    [[TMP49:%.*]] = load i16, ptr [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD59:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD59]], ptr [[ATMP60]], align 2
// CHK-C-NEXT:    [[CMP61:%.*]] = icmp ult i16 [[ATOMIC_LOAD59]], [[TMP49]]
// CHK-C-NEXT:    [[FROMBOOL63:%.*]] = zext i1 [[CMP61]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL63]], ptr [[ATMP62]], align 1
// CHK-C-NEXT:    br i1 [[CMP61]], label [[ATOMIC_CONT64:%.*]], label [[ATOMIC_EXIT69:%.*]]
// CHK-C:       atomic_cont64:
// CHK-C-NEXT:    [[TMP50:%.*]] = phi i16 [ [[ATOMIC_LOAD59]], [[ATOMIC_EXIT58]] ], [ [[TMP53:%.*]], [[ATOMIC_CMP66:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP50]], ptr [[ATMP60]], align 2
// CHK-C-NEXT:    store i16 [[TMP49]], ptr [[ATOMIC_TEMP65]], align 2
// CHK-C-NEXT:    [[TMP51:%.*]] = load i16, ptr [[ATOMIC_TEMP65]], align 2
// CHK-C-NEXT:    [[TMP52:%.*]] = cmpxchg ptr [[X]], i16 [[TMP50]], i16 [[TMP51]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP53]] = extractvalue { i16, i1 } [[TMP52]], 0
// CHK-C-NEXT:    [[TMP54:%.*]] = extractvalue { i16, i1 } [[TMP52]], 1
// CHK-C-NEXT:    br i1 [[TMP54]], label [[ATOMIC_EXIT69]], label [[ATOMIC_CMP66]]
// CHK-C:       atomic_cmp66:
// CHK-C-NEXT:    [[CMP67:%.*]] = icmp ult i16 [[TMP53]], [[TMP49]]
// CHK-C-NEXT:    [[FROMBOOL68:%.*]] = zext i1 [[CMP67]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL68]], ptr [[ATMP62]], align 1
// CHK-C-NEXT:    br i1 [[CMP67]], label [[ATOMIC_CONT64]], label [[ATOMIC_EXIT69]]
// CHK-C:       atomic_exit69:
// CHK-C-NEXT:    [[TMP55:%.*]] = load i16, ptr [[ATMP60]], align 2
// CHK-C-NEXT:    [[TMP56:%.*]] = load i8, ptr [[ATMP62]], align 1
// CHK-C-NEXT:    [[TMP57:%.*]] = load i16, ptr [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD70:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD70]], ptr [[ATMP71]], align 2
// CHK-C-NEXT:    [[CMP72:%.*]] = icmp ult i16 [[ATOMIC_LOAD70]], [[TMP57]]
// CHK-C-NEXT:    [[FROMBOOL74:%.*]] = zext i1 [[CMP72]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL74]], ptr [[ATMP73]], align 1
// CHK-C-NEXT:    br i1 [[CMP72]], label [[ATOMIC_CONT75:%.*]], label [[ATOMIC_EXIT80:%.*]]
// CHK-C:       atomic_cont75:
// CHK-C-NEXT:    [[TMP58:%.*]] = phi i16 [ [[ATOMIC_LOAD70]], [[ATOMIC_EXIT69]] ], [ [[TMP61:%.*]], [[ATOMIC_CMP77:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP58]], ptr [[ATMP71]], align 2
// CHK-C-NEXT:    store i16 [[TMP57]], ptr [[ATOMIC_TEMP76]], align 2
// CHK-C-NEXT:    [[TMP59:%.*]] = load i16, ptr [[ATOMIC_TEMP76]], align 2
// CHK-C-NEXT:    [[TMP60:%.*]] = cmpxchg ptr [[X]], i16 [[TMP58]], i16 [[TMP59]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP61]] = extractvalue { i16, i1 } [[TMP60]], 0
// CHK-C-NEXT:    [[TMP62:%.*]] = extractvalue { i16, i1 } [[TMP60]], 1
// CHK-C-NEXT:    br i1 [[TMP62]], label [[ATOMIC_EXIT80]], label [[ATOMIC_CMP77]]
// CHK-C:       atomic_cmp77:
// CHK-C-NEXT:    [[CMP78:%.*]] = icmp ult i16 [[TMP61]], [[TMP57]]
// CHK-C-NEXT:    [[FROMBOOL79:%.*]] = zext i1 [[CMP78]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL79]], ptr [[ATMP73]], align 1
// CHK-C-NEXT:    br i1 [[CMP78]], label [[ATOMIC_CONT75]], label [[ATOMIC_EXIT80]]
// CHK-C:       atomic_exit80:
// CHK-C-NEXT:    [[TMP63:%.*]] = load i16, ptr [[ATMP71]], align 2
// CHK-C-NEXT:    [[TMP64:%.*]] = load i8, ptr [[ATMP73]], align 1
// CHK-C-NEXT:    [[TMP65:%.*]] = load i16, ptr [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD81:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD81]], ptr [[ATMP82]], align 2
// CHK-C-NEXT:    [[CMP83:%.*]] = icmp ugt i16 [[ATOMIC_LOAD81]], [[TMP65]]
// CHK-C-NEXT:    [[FROMBOOL85:%.*]] = zext i1 [[CMP83]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL85]], ptr [[ATMP84]], align 1
// CHK-C-NEXT:    br i1 [[CMP83]], label [[ATOMIC_CONT86:%.*]], label [[ATOMIC_EXIT91:%.*]]
// CHK-C:       atomic_cont86:
// CHK-C-NEXT:    [[TMP66:%.*]] = phi i16 [ [[ATOMIC_LOAD81]], [[ATOMIC_EXIT80]] ], [ [[TMP69:%.*]], [[ATOMIC_CMP88:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP66]], ptr [[ATMP82]], align 2
// CHK-C-NEXT:    store i16 [[TMP65]], ptr [[ATOMIC_TEMP87]], align 2
// CHK-C-NEXT:    [[TMP67:%.*]] = load i16, ptr [[ATOMIC_TEMP87]], align 2
// CHK-C-NEXT:    [[TMP68:%.*]] = cmpxchg ptr [[X]], i16 [[TMP66]], i16 [[TMP67]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP69]] = extractvalue { i16, i1 } [[TMP68]], 0
// CHK-C-NEXT:    [[TMP70:%.*]] = extractvalue { i16, i1 } [[TMP68]], 1
// CHK-C-NEXT:    br i1 [[TMP70]], label [[ATOMIC_EXIT91]], label [[ATOMIC_CMP88]]
// CHK-C:       atomic_cmp88:
// CHK-C-NEXT:    [[CMP89:%.*]] = icmp ugt i16 [[TMP69]], [[TMP65]]
// CHK-C-NEXT:    [[FROMBOOL90:%.*]] = zext i1 [[CMP89]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL90]], ptr [[ATMP84]], align 1
// CHK-C-NEXT:    br i1 [[CMP89]], label [[ATOMIC_CONT86]], label [[ATOMIC_EXIT91]]
// CHK-C:       atomic_exit91:
// CHK-C-NEXT:    [[TMP71:%.*]] = load i16, ptr [[ATMP82]], align 2
// CHK-C-NEXT:    [[TMP72:%.*]] = load i8, ptr [[ATMP84]], align 1
// CHK-C-NEXT:    [[TMP73:%.*]] = load i16, ptr [[D]], align 2
// CHK-C-NEXT:    [[TMP74:%.*]] = load i16, ptr [[E]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD92:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD92]], ptr [[ATMP93]], align 2
// CHK-C-NEXT:    [[CMP94:%.*]] = icmp eq i16 [[ATOMIC_LOAD92]], [[TMP74]]
// CHK-C-NEXT:    [[FROMBOOL96:%.*]] = zext i1 [[CMP94]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL96]], ptr [[ATMP95]], align 1
// CHK-C-NEXT:    br i1 [[CMP94]], label [[ATOMIC_CONT97:%.*]], label [[ATOMIC_EXIT102:%.*]]
// CHK-C:       atomic_cont97:
// CHK-C-NEXT:    [[TMP75:%.*]] = phi i16 [ [[ATOMIC_LOAD92]], [[ATOMIC_EXIT91]] ], [ [[TMP78:%.*]], [[ATOMIC_CMP99:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP75]], ptr [[ATMP93]], align 2
// CHK-C-NEXT:    store i16 [[TMP73]], ptr [[ATOMIC_TEMP98]], align 2
// CHK-C-NEXT:    [[TMP76:%.*]] = load i16, ptr [[ATOMIC_TEMP98]], align 2
// CHK-C-NEXT:    [[TMP77:%.*]] = cmpxchg ptr [[X]], i16 [[TMP75]], i16 [[TMP76]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP78]] = extractvalue { i16, i1 } [[TMP77]], 0
// CHK-C-NEXT:    [[TMP79:%.*]] = extractvalue { i16, i1 } [[TMP77]], 1
// CHK-C-NEXT:    br i1 [[TMP79]], label [[ATOMIC_EXIT102]], label [[ATOMIC_CMP99]]
// CHK-C:       atomic_cmp99:
// CHK-C-NEXT:    [[CMP100:%.*]] = icmp eq i16 [[TMP78]], [[TMP74]]
// CHK-C-NEXT:    [[FROMBOOL101:%.*]] = zext i1 [[CMP100]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL101]], ptr [[ATMP95]], align 1
// CHK-C-NEXT:    br i1 [[CMP100]], label [[ATOMIC_CONT97]], label [[ATOMIC_EXIT102]]
// CHK-C:       atomic_exit102:
// CHK-C-NEXT:    [[TMP80:%.*]] = load i16, ptr [[ATMP93]], align 2
// CHK-C-NEXT:    [[TMP81:%.*]] = load i8, ptr [[ATMP95]], align 1
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z19test_unsigned_shortv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[X:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP5:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP7:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP10:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP16:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP18:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP21:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP27:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP29:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP32:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP38:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP40:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP43:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP49:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP51:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP54:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP60:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP62:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP65:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP71:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP73:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP76:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP82:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP84:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP87:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP93:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP95:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP98:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i16, ptr [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD]], ptr [[TMP]], align 2
// CHK-CXX-NEXT:    [[CMP:%.*]] = icmp ugt i16 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-CXX-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL]], ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP1:%.*]] = phi i16 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP1]], ptr [[TMP]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP0]], ptr [[ATOMIC_TEMP]], align 2
// CHK-CXX-NEXT:    [[TMP2:%.*]] = load i16, ptr [[ATOMIC_TEMP]], align 2
// CHK-CXX-NEXT:    [[TMP3:%.*]] = cmpxchg ptr [[X]], i16 [[TMP1]], i16 [[TMP2]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP4]] = extractvalue { i16, i1 } [[TMP3]], 0
// CHK-CXX-NEXT:    [[TMP5:%.*]] = extractvalue { i16, i1 } [[TMP3]], 1
// CHK-CXX-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    [[CMP2:%.*]] = icmp ugt i16 [[TMP4]], [[TMP0]]
// CHK-CXX-NEXT:    [[FROMBOOL3:%.*]] = zext i1 [[CMP2]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL3]], ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP2]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP6:%.*]] = load i16, ptr [[TMP]], align 2
// CHK-CXX-NEXT:    [[TMP7:%.*]] = load i8, ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    [[TMP8:%.*]] = load i16, ptr [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD4:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD4]], ptr [[ATMP5]], align 2
// CHK-CXX-NEXT:    [[CMP6:%.*]] = icmp ult i16 [[ATOMIC_LOAD4]], [[TMP8]]
// CHK-CXX-NEXT:    [[FROMBOOL8:%.*]] = zext i1 [[CMP6]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL8]], ptr [[ATMP7]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP6]], label [[ATOMIC_CONT9:%.*]], label [[ATOMIC_EXIT14:%.*]]
// CHK-CXX:       atomic_cont9:
// CHK-CXX-NEXT:    [[TMP9:%.*]] = phi i16 [ [[ATOMIC_LOAD4]], [[ATOMIC_EXIT]] ], [ [[TMP12:%.*]], [[ATOMIC_CMP11:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP9]], ptr [[ATMP5]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP8]], ptr [[ATOMIC_TEMP10]], align 2
// CHK-CXX-NEXT:    [[TMP10:%.*]] = load i16, ptr [[ATOMIC_TEMP10]], align 2
// CHK-CXX-NEXT:    [[TMP11:%.*]] = cmpxchg ptr [[X]], i16 [[TMP9]], i16 [[TMP10]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP12]] = extractvalue { i16, i1 } [[TMP11]], 0
// CHK-CXX-NEXT:    [[TMP13:%.*]] = extractvalue { i16, i1 } [[TMP11]], 1
// CHK-CXX-NEXT:    br i1 [[TMP13]], label [[ATOMIC_EXIT14]], label [[ATOMIC_CMP11]]
// CHK-CXX:       atomic_cmp11:
// CHK-CXX-NEXT:    [[CMP12:%.*]] = icmp ult i16 [[TMP12]], [[TMP8]]
// CHK-CXX-NEXT:    [[FROMBOOL13:%.*]] = zext i1 [[CMP12]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL13]], ptr [[ATMP7]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT9]], label [[ATOMIC_EXIT14]]
// CHK-CXX:       atomic_exit14:
// CHK-CXX-NEXT:    [[TMP14:%.*]] = load i16, ptr [[ATMP5]], align 2
// CHK-CXX-NEXT:    [[TMP15:%.*]] = load i8, ptr [[ATMP7]], align 1
// CHK-CXX-NEXT:    [[TMP16:%.*]] = load i16, ptr [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD15:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD15]], ptr [[ATMP16]], align 2
// CHK-CXX-NEXT:    [[CMP17:%.*]] = icmp ult i16 [[ATOMIC_LOAD15]], [[TMP16]]
// CHK-CXX-NEXT:    [[FROMBOOL19:%.*]] = zext i1 [[CMP17]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL19]], ptr [[ATMP18]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP17]], label [[ATOMIC_CONT20:%.*]], label [[ATOMIC_EXIT25:%.*]]
// CHK-CXX:       atomic_cont20:
// CHK-CXX-NEXT:    [[TMP17:%.*]] = phi i16 [ [[ATOMIC_LOAD15]], [[ATOMIC_EXIT14]] ], [ [[TMP20:%.*]], [[ATOMIC_CMP22:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP17]], ptr [[ATMP16]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP16]], ptr [[ATOMIC_TEMP21]], align 2
// CHK-CXX-NEXT:    [[TMP18:%.*]] = load i16, ptr [[ATOMIC_TEMP21]], align 2
// CHK-CXX-NEXT:    [[TMP19:%.*]] = cmpxchg ptr [[X]], i16 [[TMP17]], i16 [[TMP18]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP20]] = extractvalue { i16, i1 } [[TMP19]], 0
// CHK-CXX-NEXT:    [[TMP21:%.*]] = extractvalue { i16, i1 } [[TMP19]], 1
// CHK-CXX-NEXT:    br i1 [[TMP21]], label [[ATOMIC_EXIT25]], label [[ATOMIC_CMP22]]
// CHK-CXX:       atomic_cmp22:
// CHK-CXX-NEXT:    [[CMP23:%.*]] = icmp ult i16 [[TMP20]], [[TMP16]]
// CHK-CXX-NEXT:    [[FROMBOOL24:%.*]] = zext i1 [[CMP23]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL24]], ptr [[ATMP18]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP23]], label [[ATOMIC_CONT20]], label [[ATOMIC_EXIT25]]
// CHK-CXX:       atomic_exit25:
// CHK-CXX-NEXT:    [[TMP22:%.*]] = load i16, ptr [[ATMP16]], align 2
// CHK-CXX-NEXT:    [[TMP23:%.*]] = load i8, ptr [[ATMP18]], align 1
// CHK-CXX-NEXT:    [[TMP24:%.*]] = load i16, ptr [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD26:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD26]], ptr [[ATMP27]], align 2
// CHK-CXX-NEXT:    [[CMP28:%.*]] = icmp ugt i16 [[ATOMIC_LOAD26]], [[TMP24]]
// CHK-CXX-NEXT:    [[FROMBOOL30:%.*]] = zext i1 [[CMP28]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL30]], ptr [[ATMP29]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP28]], label [[ATOMIC_CONT31:%.*]], label [[ATOMIC_EXIT36:%.*]]
// CHK-CXX:       atomic_cont31:
// CHK-CXX-NEXT:    [[TMP25:%.*]] = phi i16 [ [[ATOMIC_LOAD26]], [[ATOMIC_EXIT25]] ], [ [[TMP28:%.*]], [[ATOMIC_CMP33:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP25]], ptr [[ATMP27]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP24]], ptr [[ATOMIC_TEMP32]], align 2
// CHK-CXX-NEXT:    [[TMP26:%.*]] = load i16, ptr [[ATOMIC_TEMP32]], align 2
// CHK-CXX-NEXT:    [[TMP27:%.*]] = cmpxchg ptr [[X]], i16 [[TMP25]], i16 [[TMP26]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP28]] = extractvalue { i16, i1 } [[TMP27]], 0
// CHK-CXX-NEXT:    [[TMP29:%.*]] = extractvalue { i16, i1 } [[TMP27]], 1
// CHK-CXX-NEXT:    br i1 [[TMP29]], label [[ATOMIC_EXIT36]], label [[ATOMIC_CMP33]]
// CHK-CXX:       atomic_cmp33:
// CHK-CXX-NEXT:    [[CMP34:%.*]] = icmp ugt i16 [[TMP28]], [[TMP24]]
// CHK-CXX-NEXT:    [[FROMBOOL35:%.*]] = zext i1 [[CMP34]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL35]], ptr [[ATMP29]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP34]], label [[ATOMIC_CONT31]], label [[ATOMIC_EXIT36]]
// CHK-CXX:       atomic_exit36:
// CHK-CXX-NEXT:    [[TMP30:%.*]] = load i16, ptr [[ATMP27]], align 2
// CHK-CXX-NEXT:    [[TMP31:%.*]] = load i8, ptr [[ATMP29]], align 1
// CHK-CXX-NEXT:    [[TMP32:%.*]] = load i16, ptr [[D]], align 2
// CHK-CXX-NEXT:    [[TMP33:%.*]] = load i16, ptr [[E]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD37:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD37]], ptr [[ATMP38]], align 2
// CHK-CXX-NEXT:    [[CMP39:%.*]] = icmp eq i16 [[ATOMIC_LOAD37]], [[TMP33]]
// CHK-CXX-NEXT:    [[FROMBOOL41:%.*]] = zext i1 [[CMP39]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL41]], ptr [[ATMP40]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP39]], label [[ATOMIC_CONT42:%.*]], label [[ATOMIC_EXIT47:%.*]]
// CHK-CXX:       atomic_cont42:
// CHK-CXX-NEXT:    [[TMP34:%.*]] = phi i16 [ [[ATOMIC_LOAD37]], [[ATOMIC_EXIT36]] ], [ [[TMP37:%.*]], [[ATOMIC_CMP44:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP34]], ptr [[ATMP38]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP32]], ptr [[ATOMIC_TEMP43]], align 2
// CHK-CXX-NEXT:    [[TMP35:%.*]] = load i16, ptr [[ATOMIC_TEMP43]], align 2
// CHK-CXX-NEXT:    [[TMP36:%.*]] = cmpxchg ptr [[X]], i16 [[TMP34]], i16 [[TMP35]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP37]] = extractvalue { i16, i1 } [[TMP36]], 0
// CHK-CXX-NEXT:    [[TMP38:%.*]] = extractvalue { i16, i1 } [[TMP36]], 1
// CHK-CXX-NEXT:    br i1 [[TMP38]], label [[ATOMIC_EXIT47]], label [[ATOMIC_CMP44]]
// CHK-CXX:       atomic_cmp44:
// CHK-CXX-NEXT:    [[CMP45:%.*]] = icmp eq i16 [[TMP37]], [[TMP33]]
// CHK-CXX-NEXT:    [[FROMBOOL46:%.*]] = zext i1 [[CMP45]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL46]], ptr [[ATMP40]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP45]], label [[ATOMIC_CONT42]], label [[ATOMIC_EXIT47]]
// CHK-CXX:       atomic_exit47:
// CHK-CXX-NEXT:    [[TMP39:%.*]] = load i16, ptr [[ATMP38]], align 2
// CHK-CXX-NEXT:    [[TMP40:%.*]] = load i8, ptr [[ATMP40]], align 1
// CHK-CXX-NEXT:    [[TMP41:%.*]] = load i16, ptr [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD48:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD48]], ptr [[ATMP49]], align 2
// CHK-CXX-NEXT:    [[CMP50:%.*]] = icmp ugt i16 [[ATOMIC_LOAD48]], [[TMP41]]
// CHK-CXX-NEXT:    [[FROMBOOL52:%.*]] = zext i1 [[CMP50]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL52]], ptr [[ATMP51]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP50]], label [[ATOMIC_CONT53:%.*]], label [[ATOMIC_EXIT58:%.*]]
// CHK-CXX:       atomic_cont53:
// CHK-CXX-NEXT:    [[TMP42:%.*]] = phi i16 [ [[ATOMIC_LOAD48]], [[ATOMIC_EXIT47]] ], [ [[TMP45:%.*]], [[ATOMIC_CMP55:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP42]], ptr [[ATMP49]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP41]], ptr [[ATOMIC_TEMP54]], align 2
// CHK-CXX-NEXT:    [[TMP43:%.*]] = load i16, ptr [[ATOMIC_TEMP54]], align 2
// CHK-CXX-NEXT:    [[TMP44:%.*]] = cmpxchg ptr [[X]], i16 [[TMP42]], i16 [[TMP43]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP45]] = extractvalue { i16, i1 } [[TMP44]], 0
// CHK-CXX-NEXT:    [[TMP46:%.*]] = extractvalue { i16, i1 } [[TMP44]], 1
// CHK-CXX-NEXT:    br i1 [[TMP46]], label [[ATOMIC_EXIT58]], label [[ATOMIC_CMP55]]
// CHK-CXX:       atomic_cmp55:
// CHK-CXX-NEXT:    [[CMP56:%.*]] = icmp ugt i16 [[TMP45]], [[TMP41]]
// CHK-CXX-NEXT:    [[FROMBOOL57:%.*]] = zext i1 [[CMP56]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL57]], ptr [[ATMP51]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP56]], label [[ATOMIC_CONT53]], label [[ATOMIC_EXIT58]]
// CHK-CXX:       atomic_exit58:
// CHK-CXX-NEXT:    [[TMP47:%.*]] = load i16, ptr [[ATMP49]], align 2
// CHK-CXX-NEXT:    [[TMP48:%.*]] = load i8, ptr [[ATMP51]], align 1
// CHK-CXX-NEXT:    [[TMP49:%.*]] = load i16, ptr [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD59:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD59]], ptr [[ATMP60]], align 2
// CHK-CXX-NEXT:    [[CMP61:%.*]] = icmp ult i16 [[ATOMIC_LOAD59]], [[TMP49]]
// CHK-CXX-NEXT:    [[FROMBOOL63:%.*]] = zext i1 [[CMP61]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL63]], ptr [[ATMP62]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP61]], label [[ATOMIC_CONT64:%.*]], label [[ATOMIC_EXIT69:%.*]]
// CHK-CXX:       atomic_cont64:
// CHK-CXX-NEXT:    [[TMP50:%.*]] = phi i16 [ [[ATOMIC_LOAD59]], [[ATOMIC_EXIT58]] ], [ [[TMP53:%.*]], [[ATOMIC_CMP66:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP50]], ptr [[ATMP60]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP49]], ptr [[ATOMIC_TEMP65]], align 2
// CHK-CXX-NEXT:    [[TMP51:%.*]] = load i16, ptr [[ATOMIC_TEMP65]], align 2
// CHK-CXX-NEXT:    [[TMP52:%.*]] = cmpxchg ptr [[X]], i16 [[TMP50]], i16 [[TMP51]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP53]] = extractvalue { i16, i1 } [[TMP52]], 0
// CHK-CXX-NEXT:    [[TMP54:%.*]] = extractvalue { i16, i1 } [[TMP52]], 1
// CHK-CXX-NEXT:    br i1 [[TMP54]], label [[ATOMIC_EXIT69]], label [[ATOMIC_CMP66]]
// CHK-CXX:       atomic_cmp66:
// CHK-CXX-NEXT:    [[CMP67:%.*]] = icmp ult i16 [[TMP53]], [[TMP49]]
// CHK-CXX-NEXT:    [[FROMBOOL68:%.*]] = zext i1 [[CMP67]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL68]], ptr [[ATMP62]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP67]], label [[ATOMIC_CONT64]], label [[ATOMIC_EXIT69]]
// CHK-CXX:       atomic_exit69:
// CHK-CXX-NEXT:    [[TMP55:%.*]] = load i16, ptr [[ATMP60]], align 2
// CHK-CXX-NEXT:    [[TMP56:%.*]] = load i8, ptr [[ATMP62]], align 1
// CHK-CXX-NEXT:    [[TMP57:%.*]] = load i16, ptr [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD70:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD70]], ptr [[ATMP71]], align 2
// CHK-CXX-NEXT:    [[CMP72:%.*]] = icmp ult i16 [[ATOMIC_LOAD70]], [[TMP57]]
// CHK-CXX-NEXT:    [[FROMBOOL74:%.*]] = zext i1 [[CMP72]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL74]], ptr [[ATMP73]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP72]], label [[ATOMIC_CONT75:%.*]], label [[ATOMIC_EXIT80:%.*]]
// CHK-CXX:       atomic_cont75:
// CHK-CXX-NEXT:    [[TMP58:%.*]] = phi i16 [ [[ATOMIC_LOAD70]], [[ATOMIC_EXIT69]] ], [ [[TMP61:%.*]], [[ATOMIC_CMP77:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP58]], ptr [[ATMP71]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP57]], ptr [[ATOMIC_TEMP76]], align 2
// CHK-CXX-NEXT:    [[TMP59:%.*]] = load i16, ptr [[ATOMIC_TEMP76]], align 2
// CHK-CXX-NEXT:    [[TMP60:%.*]] = cmpxchg ptr [[X]], i16 [[TMP58]], i16 [[TMP59]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP61]] = extractvalue { i16, i1 } [[TMP60]], 0
// CHK-CXX-NEXT:    [[TMP62:%.*]] = extractvalue { i16, i1 } [[TMP60]], 1
// CHK-CXX-NEXT:    br i1 [[TMP62]], label [[ATOMIC_EXIT80]], label [[ATOMIC_CMP77]]
// CHK-CXX:       atomic_cmp77:
// CHK-CXX-NEXT:    [[CMP78:%.*]] = icmp ult i16 [[TMP61]], [[TMP57]]
// CHK-CXX-NEXT:    [[FROMBOOL79:%.*]] = zext i1 [[CMP78]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL79]], ptr [[ATMP73]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP78]], label [[ATOMIC_CONT75]], label [[ATOMIC_EXIT80]]
// CHK-CXX:       atomic_exit80:
// CHK-CXX-NEXT:    [[TMP63:%.*]] = load i16, ptr [[ATMP71]], align 2
// CHK-CXX-NEXT:    [[TMP64:%.*]] = load i8, ptr [[ATMP73]], align 1
// CHK-CXX-NEXT:    [[TMP65:%.*]] = load i16, ptr [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD81:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD81]], ptr [[ATMP82]], align 2
// CHK-CXX-NEXT:    [[CMP83:%.*]] = icmp ugt i16 [[ATOMIC_LOAD81]], [[TMP65]]
// CHK-CXX-NEXT:    [[FROMBOOL85:%.*]] = zext i1 [[CMP83]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL85]], ptr [[ATMP84]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP83]], label [[ATOMIC_CONT86:%.*]], label [[ATOMIC_EXIT91:%.*]]
// CHK-CXX:       atomic_cont86:
// CHK-CXX-NEXT:    [[TMP66:%.*]] = phi i16 [ [[ATOMIC_LOAD81]], [[ATOMIC_EXIT80]] ], [ [[TMP69:%.*]], [[ATOMIC_CMP88:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP66]], ptr [[ATMP82]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP65]], ptr [[ATOMIC_TEMP87]], align 2
// CHK-CXX-NEXT:    [[TMP67:%.*]] = load i16, ptr [[ATOMIC_TEMP87]], align 2
// CHK-CXX-NEXT:    [[TMP68:%.*]] = cmpxchg ptr [[X]], i16 [[TMP66]], i16 [[TMP67]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP69]] = extractvalue { i16, i1 } [[TMP68]], 0
// CHK-CXX-NEXT:    [[TMP70:%.*]] = extractvalue { i16, i1 } [[TMP68]], 1
// CHK-CXX-NEXT:    br i1 [[TMP70]], label [[ATOMIC_EXIT91]], label [[ATOMIC_CMP88]]
// CHK-CXX:       atomic_cmp88:
// CHK-CXX-NEXT:    [[CMP89:%.*]] = icmp ugt i16 [[TMP69]], [[TMP65]]
// CHK-CXX-NEXT:    [[FROMBOOL90:%.*]] = zext i1 [[CMP89]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL90]], ptr [[ATMP84]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP89]], label [[ATOMIC_CONT86]], label [[ATOMIC_EXIT91]]
// CHK-CXX:       atomic_exit91:
// CHK-CXX-NEXT:    [[TMP71:%.*]] = load i16, ptr [[ATMP82]], align 2
// CHK-CXX-NEXT:    [[TMP72:%.*]] = load i8, ptr [[ATMP84]], align 1
// CHK-CXX-NEXT:    [[TMP73:%.*]] = load i16, ptr [[D]], align 2
// CHK-CXX-NEXT:    [[TMP74:%.*]] = load i16, ptr [[E]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD92:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD92]], ptr [[ATMP93]], align 2
// CHK-CXX-NEXT:    [[CMP94:%.*]] = icmp eq i16 [[ATOMIC_LOAD92]], [[TMP74]]
// CHK-CXX-NEXT:    [[FROMBOOL96:%.*]] = zext i1 [[CMP94]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL96]], ptr [[ATMP95]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP94]], label [[ATOMIC_CONT97:%.*]], label [[ATOMIC_EXIT102:%.*]]
// CHK-CXX:       atomic_cont97:
// CHK-CXX-NEXT:    [[TMP75:%.*]] = phi i16 [ [[ATOMIC_LOAD92]], [[ATOMIC_EXIT91]] ], [ [[TMP78:%.*]], [[ATOMIC_CMP99:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP75]], ptr [[ATMP93]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP73]], ptr [[ATOMIC_TEMP98]], align 2
// CHK-CXX-NEXT:    [[TMP76:%.*]] = load i16, ptr [[ATOMIC_TEMP98]], align 2
// CHK-CXX-NEXT:    [[TMP77:%.*]] = cmpxchg ptr [[X]], i16 [[TMP75]], i16 [[TMP76]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP78]] = extractvalue { i16, i1 } [[TMP77]], 0
// CHK-CXX-NEXT:    [[TMP79:%.*]] = extractvalue { i16, i1 } [[TMP77]], 1
// CHK-CXX-NEXT:    br i1 [[TMP79]], label [[ATOMIC_EXIT102]], label [[ATOMIC_CMP99]]
// CHK-CXX:       atomic_cmp99:
// CHK-CXX-NEXT:    [[CMP100:%.*]] = icmp eq i16 [[TMP78]], [[TMP74]]
// CHK-CXX-NEXT:    [[FROMBOOL101:%.*]] = zext i1 [[CMP100]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL101]], ptr [[ATMP95]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP100]], label [[ATOMIC_CONT97]], label [[ATOMIC_EXIT102]]
// CHK-CXX:       atomic_exit102:
// CHK-CXX-NEXT:    [[TMP80:%.*]] = load i16, ptr [[ATMP93]], align 2
// CHK-CXX-NEXT:    [[TMP81:%.*]] = load i8, ptr [[ATMP95]], align 1
// CHK-CXX-NEXT:    ret void
//
void test_unsigned_short() {
    // One of each form with 'unsigned short'.
    unsigned short x, expr, d, e;

    #pragma omp atomic compare
    x = expr < x ? expr : x; // MIN

    #pragma omp atomic compare
    x = expr > x ? expr : x; // MAX

    #pragma omp atomic compare
    x = x < expr ? expr : x; // MAX

    #pragma omp atomic compare
    x = x > expr ? expr : x; // MIN

    #pragma omp atomic compare
    x = x == e ? d : x;

    #pragma omp atomic compare
    if (expr < x) { x = expr; } // MIN

    #pragma omp atomic compare
    if (expr > x) { x = expr; } // MAX

    #pragma omp atomic compare
    if (x < expr) { x = expr; } // MAX

    #pragma omp atomic compare
    if (x > expr) { x = expr; } // MIN

    #pragma omp atomic compare
    if(x == e) { x = d; }
}

// CHK-C-LABEL: @test_double(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[X:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[D:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[E:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[TMP:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP5:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP7:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP10:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP16:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP18:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP21:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP27:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP29:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP32:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP38:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP40:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP43:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP49:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP51:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP54:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP60:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP62:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP65:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP71:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP73:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP76:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP82:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP84:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP87:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP93:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP95:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP98:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[TMP0:%.*]] = load double, ptr [[EXPR]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-C-NEXT:    [[TMP1:%.*]] = bitcast i64 [[ATOMIC_LOAD]] to double
// CHK-C-NEXT:    store double [[TMP1]], ptr [[TMP]], align 8
// CHK-C-NEXT:    [[CMP:%.*]] = fcmp ogt double [[TMP1]], [[TMP0]]
// CHK-C-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL]], ptr [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP2:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP7:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    [[TMP3:%.*]] = bitcast i64 [[TMP2]] to double
// CHK-C-NEXT:    store double [[TMP3]], ptr [[TMP]], align 8
// CHK-C-NEXT:    [[TMP4:%.*]] = bitcast double [[TMP0]] to i64
// CHK-C-NEXT:    store i64 [[TMP4]], ptr [[ATOMIC_TEMP]], align 8
// CHK-C-NEXT:    [[TMP5:%.*]] = load i64, ptr [[ATOMIC_TEMP]], align 8
// CHK-C-NEXT:    [[TMP6:%.*]] = cmpxchg ptr [[X]], i64 [[TMP2]], i64 [[TMP5]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP7]] = extractvalue { i64, i1 } [[TMP6]], 0
// CHK-C-NEXT:    [[TMP8:%.*]] = extractvalue { i64, i1 } [[TMP6]], 1
// CHK-C-NEXT:    br i1 [[TMP8]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    [[TMP9:%.*]] = bitcast i64 [[TMP7]] to double
// CHK-C-NEXT:    [[CMP2:%.*]] = fcmp ogt double [[TMP9]], [[TMP0]]
// CHK-C-NEXT:    [[FROMBOOL3:%.*]] = zext i1 [[CMP2]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL3]], ptr [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP2]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP10:%.*]] = load double, ptr [[TMP]], align 8
// CHK-C-NEXT:    [[TMP11:%.*]] = load i8, ptr [[ATMP1]], align 1
// CHK-C-NEXT:    [[TMP12:%.*]] = load double, ptr [[EXPR]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD4:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-C-NEXT:    [[TMP13:%.*]] = bitcast i64 [[ATOMIC_LOAD4]] to double
// CHK-C-NEXT:    store double [[TMP13]], ptr [[ATMP5]], align 8
// CHK-C-NEXT:    [[CMP6:%.*]] = fcmp olt double [[TMP13]], [[TMP12]]
// CHK-C-NEXT:    [[FROMBOOL8:%.*]] = zext i1 [[CMP6]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL8]], ptr [[ATMP7]], align 1
// CHK-C-NEXT:    br i1 [[CMP6]], label [[ATOMIC_CONT9:%.*]], label [[ATOMIC_EXIT14:%.*]]
// CHK-C:       atomic_cont9:
// CHK-C-NEXT:    [[TMP14:%.*]] = phi i64 [ [[ATOMIC_LOAD4]], [[ATOMIC_EXIT]] ], [ [[TMP19:%.*]], [[ATOMIC_CMP11:%.*]] ]
// CHK-C-NEXT:    [[TMP15:%.*]] = bitcast i64 [[TMP14]] to double
// CHK-C-NEXT:    store double [[TMP15]], ptr [[ATMP5]], align 8
// CHK-C-NEXT:    [[TMP16:%.*]] = bitcast double [[TMP12]] to i64
// CHK-C-NEXT:    store i64 [[TMP16]], ptr [[ATOMIC_TEMP10]], align 8
// CHK-C-NEXT:    [[TMP17:%.*]] = load i64, ptr [[ATOMIC_TEMP10]], align 8
// CHK-C-NEXT:    [[TMP18:%.*]] = cmpxchg ptr [[X]], i64 [[TMP14]], i64 [[TMP17]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP19]] = extractvalue { i64, i1 } [[TMP18]], 0
// CHK-C-NEXT:    [[TMP20:%.*]] = extractvalue { i64, i1 } [[TMP18]], 1
// CHK-C-NEXT:    br i1 [[TMP20]], label [[ATOMIC_EXIT14]], label [[ATOMIC_CMP11]]
// CHK-C:       atomic_cmp11:
// CHK-C-NEXT:    [[TMP21:%.*]] = bitcast i64 [[TMP19]] to double
// CHK-C-NEXT:    [[CMP12:%.*]] = fcmp olt double [[TMP21]], [[TMP12]]
// CHK-C-NEXT:    [[FROMBOOL13:%.*]] = zext i1 [[CMP12]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL13]], ptr [[ATMP7]], align 1
// CHK-C-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT9]], label [[ATOMIC_EXIT14]]
// CHK-C:       atomic_exit14:
// CHK-C-NEXT:    [[TMP22:%.*]] = load double, ptr [[ATMP5]], align 8
// CHK-C-NEXT:    [[TMP23:%.*]] = load i8, ptr [[ATMP7]], align 1
// CHK-C-NEXT:    [[TMP24:%.*]] = load double, ptr [[EXPR]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD15:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-C-NEXT:    [[TMP25:%.*]] = bitcast i64 [[ATOMIC_LOAD15]] to double
// CHK-C-NEXT:    store double [[TMP25]], ptr [[ATMP16]], align 8
// CHK-C-NEXT:    [[CMP17:%.*]] = fcmp olt double [[TMP25]], [[TMP24]]
// CHK-C-NEXT:    [[FROMBOOL19:%.*]] = zext i1 [[CMP17]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL19]], ptr [[ATMP18]], align 1
// CHK-C-NEXT:    br i1 [[CMP17]], label [[ATOMIC_CONT20:%.*]], label [[ATOMIC_EXIT25:%.*]]
// CHK-C:       atomic_cont20:
// CHK-C-NEXT:    [[TMP26:%.*]] = phi i64 [ [[ATOMIC_LOAD15]], [[ATOMIC_EXIT14]] ], [ [[TMP31:%.*]], [[ATOMIC_CMP22:%.*]] ]
// CHK-C-NEXT:    [[TMP27:%.*]] = bitcast i64 [[TMP26]] to double
// CHK-C-NEXT:    store double [[TMP27]], ptr [[ATMP16]], align 8
// CHK-C-NEXT:    [[TMP28:%.*]] = bitcast double [[TMP24]] to i64
// CHK-C-NEXT:    store i64 [[TMP28]], ptr [[ATOMIC_TEMP21]], align 8
// CHK-C-NEXT:    [[TMP29:%.*]] = load i64, ptr [[ATOMIC_TEMP21]], align 8
// CHK-C-NEXT:    [[TMP30:%.*]] = cmpxchg ptr [[X]], i64 [[TMP26]], i64 [[TMP29]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP31]] = extractvalue { i64, i1 } [[TMP30]], 0
// CHK-C-NEXT:    [[TMP32:%.*]] = extractvalue { i64, i1 } [[TMP30]], 1
// CHK-C-NEXT:    br i1 [[TMP32]], label [[ATOMIC_EXIT25]], label [[ATOMIC_CMP22]]
// CHK-C:       atomic_cmp22:
// CHK-C-NEXT:    [[TMP33:%.*]] = bitcast i64 [[TMP31]] to double
// CHK-C-NEXT:    [[CMP23:%.*]] = fcmp olt double [[TMP33]], [[TMP24]]
// CHK-C-NEXT:    [[FROMBOOL24:%.*]] = zext i1 [[CMP23]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL24]], ptr [[ATMP18]], align 1
// CHK-C-NEXT:    br i1 [[CMP23]], label [[ATOMIC_CONT20]], label [[ATOMIC_EXIT25]]
// CHK-C:       atomic_exit25:
// CHK-C-NEXT:    [[TMP34:%.*]] = load double, ptr [[ATMP16]], align 8
// CHK-C-NEXT:    [[TMP35:%.*]] = load i8, ptr [[ATMP18]], align 1
// CHK-C-NEXT:    [[TMP36:%.*]] = load double, ptr [[EXPR]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD26:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-C-NEXT:    [[TMP37:%.*]] = bitcast i64 [[ATOMIC_LOAD26]] to double
// CHK-C-NEXT:    store double [[TMP37]], ptr [[ATMP27]], align 8
// CHK-C-NEXT:    [[CMP28:%.*]] = fcmp ogt double [[TMP37]], [[TMP36]]
// CHK-C-NEXT:    [[FROMBOOL30:%.*]] = zext i1 [[CMP28]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL30]], ptr [[ATMP29]], align 1
// CHK-C-NEXT:    br i1 [[CMP28]], label [[ATOMIC_CONT31:%.*]], label [[ATOMIC_EXIT36:%.*]]
// CHK-C:       atomic_cont31:
// CHK-C-NEXT:    [[TMP38:%.*]] = phi i64 [ [[ATOMIC_LOAD26]], [[ATOMIC_EXIT25]] ], [ [[TMP43:%.*]], [[ATOMIC_CMP33:%.*]] ]
// CHK-C-NEXT:    [[TMP39:%.*]] = bitcast i64 [[TMP38]] to double
// CHK-C-NEXT:    store double [[TMP39]], ptr [[ATMP27]], align 8
// CHK-C-NEXT:    [[TMP40:%.*]] = bitcast double [[TMP36]] to i64
// CHK-C-NEXT:    store i64 [[TMP40]], ptr [[ATOMIC_TEMP32]], align 8
// CHK-C-NEXT:    [[TMP41:%.*]] = load i64, ptr [[ATOMIC_TEMP32]], align 8
// CHK-C-NEXT:    [[TMP42:%.*]] = cmpxchg ptr [[X]], i64 [[TMP38]], i64 [[TMP41]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP43]] = extractvalue { i64, i1 } [[TMP42]], 0
// CHK-C-NEXT:    [[TMP44:%.*]] = extractvalue { i64, i1 } [[TMP42]], 1
// CHK-C-NEXT:    br i1 [[TMP44]], label [[ATOMIC_EXIT36]], label [[ATOMIC_CMP33]]
// CHK-C:       atomic_cmp33:
// CHK-C-NEXT:    [[TMP45:%.*]] = bitcast i64 [[TMP43]] to double
// CHK-C-NEXT:    [[CMP34:%.*]] = fcmp ogt double [[TMP45]], [[TMP36]]
// CHK-C-NEXT:    [[FROMBOOL35:%.*]] = zext i1 [[CMP34]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL35]], ptr [[ATMP29]], align 1
// CHK-C-NEXT:    br i1 [[CMP34]], label [[ATOMIC_CONT31]], label [[ATOMIC_EXIT36]]
// CHK-C:       atomic_exit36:
// CHK-C-NEXT:    [[TMP46:%.*]] = load double, ptr [[ATMP27]], align 8
// CHK-C-NEXT:    [[TMP47:%.*]] = load i8, ptr [[ATMP29]], align 1
// CHK-C-NEXT:    [[TMP48:%.*]] = load double, ptr [[D]], align 8
// CHK-C-NEXT:    [[TMP49:%.*]] = load double, ptr [[E]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD37:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-C-NEXT:    [[TMP50:%.*]] = bitcast i64 [[ATOMIC_LOAD37]] to double
// CHK-C-NEXT:    store double [[TMP50]], ptr [[ATMP38]], align 8
// CHK-C-NEXT:    [[TMP51:%.*]] = bitcast double [[TMP50]] to i64
// CHK-C-NEXT:    [[TMP52:%.*]] = bitcast double [[TMP49]] to i64
// CHK-C-NEXT:    [[CMP39:%.*]] = icmp eq i64 [[TMP51]], [[TMP52]]
// CHK-C-NEXT:    [[FROMBOOL41:%.*]] = zext i1 [[CMP39]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL41]], ptr [[ATMP40]], align 1
// CHK-C-NEXT:    br i1 [[CMP39]], label [[ATOMIC_CONT42:%.*]], label [[ATOMIC_EXIT47:%.*]]
// CHK-C:       atomic_cont42:
// CHK-C-NEXT:    [[TMP53:%.*]] = phi i64 [ [[ATOMIC_LOAD37]], [[ATOMIC_EXIT36]] ], [ [[TMP58:%.*]], [[ATOMIC_CMP44:%.*]] ]
// CHK-C-NEXT:    [[TMP54:%.*]] = bitcast i64 [[TMP53]] to double
// CHK-C-NEXT:    store double [[TMP54]], ptr [[ATMP38]], align 8
// CHK-C-NEXT:    [[TMP55:%.*]] = bitcast double [[TMP48]] to i64
// CHK-C-NEXT:    store i64 [[TMP55]], ptr [[ATOMIC_TEMP43]], align 8
// CHK-C-NEXT:    [[TMP56:%.*]] = load i64, ptr [[ATOMIC_TEMP43]], align 8
// CHK-C-NEXT:    [[TMP57:%.*]] = cmpxchg ptr [[X]], i64 [[TMP53]], i64 [[TMP56]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP58]] = extractvalue { i64, i1 } [[TMP57]], 0
// CHK-C-NEXT:    [[TMP59:%.*]] = extractvalue { i64, i1 } [[TMP57]], 1
// CHK-C-NEXT:    br i1 [[TMP59]], label [[ATOMIC_EXIT47]], label [[ATOMIC_CMP44]]
// CHK-C:       atomic_cmp44:
// CHK-C-NEXT:    [[TMP60:%.*]] = bitcast i64 [[TMP58]] to double
// CHK-C-NEXT:    [[TMP61:%.*]] = bitcast double [[TMP60]] to i64
// CHK-C-NEXT:    [[TMP62:%.*]] = bitcast double [[TMP49]] to i64
// CHK-C-NEXT:    [[CMP45:%.*]] = icmp eq i64 [[TMP61]], [[TMP62]]
// CHK-C-NEXT:    [[FROMBOOL46:%.*]] = zext i1 [[CMP45]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL46]], ptr [[ATMP40]], align 1
// CHK-C-NEXT:    br i1 [[CMP45]], label [[ATOMIC_CONT42]], label [[ATOMIC_EXIT47]]
// CHK-C:       atomic_exit47:
// CHK-C-NEXT:    [[TMP63:%.*]] = load double, ptr [[ATMP38]], align 8
// CHK-C-NEXT:    [[TMP64:%.*]] = load i8, ptr [[ATMP40]], align 1
// CHK-C-NEXT:    [[TMP65:%.*]] = load double, ptr [[EXPR]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD48:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-C-NEXT:    [[TMP66:%.*]] = bitcast i64 [[ATOMIC_LOAD48]] to double
// CHK-C-NEXT:    store double [[TMP66]], ptr [[ATMP49]], align 8
// CHK-C-NEXT:    [[CMP50:%.*]] = fcmp ogt double [[TMP66]], [[TMP65]]
// CHK-C-NEXT:    [[FROMBOOL52:%.*]] = zext i1 [[CMP50]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL52]], ptr [[ATMP51]], align 1
// CHK-C-NEXT:    br i1 [[CMP50]], label [[ATOMIC_CONT53:%.*]], label [[ATOMIC_EXIT58:%.*]]
// CHK-C:       atomic_cont53:
// CHK-C-NEXT:    [[TMP67:%.*]] = phi i64 [ [[ATOMIC_LOAD48]], [[ATOMIC_EXIT47]] ], [ [[TMP72:%.*]], [[ATOMIC_CMP55:%.*]] ]
// CHK-C-NEXT:    [[TMP68:%.*]] = bitcast i64 [[TMP67]] to double
// CHK-C-NEXT:    store double [[TMP68]], ptr [[ATMP49]], align 8
// CHK-C-NEXT:    [[TMP69:%.*]] = bitcast double [[TMP65]] to i64
// CHK-C-NEXT:    store i64 [[TMP69]], ptr [[ATOMIC_TEMP54]], align 8
// CHK-C-NEXT:    [[TMP70:%.*]] = load i64, ptr [[ATOMIC_TEMP54]], align 8
// CHK-C-NEXT:    [[TMP71:%.*]] = cmpxchg ptr [[X]], i64 [[TMP67]], i64 [[TMP70]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP72]] = extractvalue { i64, i1 } [[TMP71]], 0
// CHK-C-NEXT:    [[TMP73:%.*]] = extractvalue { i64, i1 } [[TMP71]], 1
// CHK-C-NEXT:    br i1 [[TMP73]], label [[ATOMIC_EXIT58]], label [[ATOMIC_CMP55]]
// CHK-C:       atomic_cmp55:
// CHK-C-NEXT:    [[TMP74:%.*]] = bitcast i64 [[TMP72]] to double
// CHK-C-NEXT:    [[CMP56:%.*]] = fcmp ogt double [[TMP74]], [[TMP65]]
// CHK-C-NEXT:    [[FROMBOOL57:%.*]] = zext i1 [[CMP56]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL57]], ptr [[ATMP51]], align 1
// CHK-C-NEXT:    br i1 [[CMP56]], label [[ATOMIC_CONT53]], label [[ATOMIC_EXIT58]]
// CHK-C:       atomic_exit58:
// CHK-C-NEXT:    [[TMP75:%.*]] = load double, ptr [[ATMP49]], align 8
// CHK-C-NEXT:    [[TMP76:%.*]] = load i8, ptr [[ATMP51]], align 1
// CHK-C-NEXT:    [[TMP77:%.*]] = load double, ptr [[EXPR]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD59:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-C-NEXT:    [[TMP78:%.*]] = bitcast i64 [[ATOMIC_LOAD59]] to double
// CHK-C-NEXT:    store double [[TMP78]], ptr [[ATMP60]], align 8
// CHK-C-NEXT:    [[CMP61:%.*]] = fcmp olt double [[TMP78]], [[TMP77]]
// CHK-C-NEXT:    [[FROMBOOL63:%.*]] = zext i1 [[CMP61]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL63]], ptr [[ATMP62]], align 1
// CHK-C-NEXT:    br i1 [[CMP61]], label [[ATOMIC_CONT64:%.*]], label [[ATOMIC_EXIT69:%.*]]
// CHK-C:       atomic_cont64:
// CHK-C-NEXT:    [[TMP79:%.*]] = phi i64 [ [[ATOMIC_LOAD59]], [[ATOMIC_EXIT58]] ], [ [[TMP84:%.*]], [[ATOMIC_CMP66:%.*]] ]
// CHK-C-NEXT:    [[TMP80:%.*]] = bitcast i64 [[TMP79]] to double
// CHK-C-NEXT:    store double [[TMP80]], ptr [[ATMP60]], align 8
// CHK-C-NEXT:    [[TMP81:%.*]] = bitcast double [[TMP77]] to i64
// CHK-C-NEXT:    store i64 [[TMP81]], ptr [[ATOMIC_TEMP65]], align 8
// CHK-C-NEXT:    [[TMP82:%.*]] = load i64, ptr [[ATOMIC_TEMP65]], align 8
// CHK-C-NEXT:    [[TMP83:%.*]] = cmpxchg ptr [[X]], i64 [[TMP79]], i64 [[TMP82]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP84]] = extractvalue { i64, i1 } [[TMP83]], 0
// CHK-C-NEXT:    [[TMP85:%.*]] = extractvalue { i64, i1 } [[TMP83]], 1
// CHK-C-NEXT:    br i1 [[TMP85]], label [[ATOMIC_EXIT69]], label [[ATOMIC_CMP66]]
// CHK-C:       atomic_cmp66:
// CHK-C-NEXT:    [[TMP86:%.*]] = bitcast i64 [[TMP84]] to double
// CHK-C-NEXT:    [[CMP67:%.*]] = fcmp olt double [[TMP86]], [[TMP77]]
// CHK-C-NEXT:    [[FROMBOOL68:%.*]] = zext i1 [[CMP67]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL68]], ptr [[ATMP62]], align 1
// CHK-C-NEXT:    br i1 [[CMP67]], label [[ATOMIC_CONT64]], label [[ATOMIC_EXIT69]]
// CHK-C:       atomic_exit69:
// CHK-C-NEXT:    [[TMP87:%.*]] = load double, ptr [[ATMP60]], align 8
// CHK-C-NEXT:    [[TMP88:%.*]] = load i8, ptr [[ATMP62]], align 1
// CHK-C-NEXT:    [[TMP89:%.*]] = load double, ptr [[EXPR]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD70:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-C-NEXT:    [[TMP90:%.*]] = bitcast i64 [[ATOMIC_LOAD70]] to double
// CHK-C-NEXT:    store double [[TMP90]], ptr [[ATMP71]], align 8
// CHK-C-NEXT:    [[CMP72:%.*]] = fcmp olt double [[TMP90]], [[TMP89]]
// CHK-C-NEXT:    [[FROMBOOL74:%.*]] = zext i1 [[CMP72]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL74]], ptr [[ATMP73]], align 1
// CHK-C-NEXT:    br i1 [[CMP72]], label [[ATOMIC_CONT75:%.*]], label [[ATOMIC_EXIT80:%.*]]
// CHK-C:       atomic_cont75:
// CHK-C-NEXT:    [[TMP91:%.*]] = phi i64 [ [[ATOMIC_LOAD70]], [[ATOMIC_EXIT69]] ], [ [[TMP96:%.*]], [[ATOMIC_CMP77:%.*]] ]
// CHK-C-NEXT:    [[TMP92:%.*]] = bitcast i64 [[TMP91]] to double
// CHK-C-NEXT:    store double [[TMP92]], ptr [[ATMP71]], align 8
// CHK-C-NEXT:    [[TMP93:%.*]] = bitcast double [[TMP89]] to i64
// CHK-C-NEXT:    store i64 [[TMP93]], ptr [[ATOMIC_TEMP76]], align 8
// CHK-C-NEXT:    [[TMP94:%.*]] = load i64, ptr [[ATOMIC_TEMP76]], align 8
// CHK-C-NEXT:    [[TMP95:%.*]] = cmpxchg ptr [[X]], i64 [[TMP91]], i64 [[TMP94]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP96]] = extractvalue { i64, i1 } [[TMP95]], 0
// CHK-C-NEXT:    [[TMP97:%.*]] = extractvalue { i64, i1 } [[TMP95]], 1
// CHK-C-NEXT:    br i1 [[TMP97]], label [[ATOMIC_EXIT80]], label [[ATOMIC_CMP77]]
// CHK-C:       atomic_cmp77:
// CHK-C-NEXT:    [[TMP98:%.*]] = bitcast i64 [[TMP96]] to double
// CHK-C-NEXT:    [[CMP78:%.*]] = fcmp olt double [[TMP98]], [[TMP89]]
// CHK-C-NEXT:    [[FROMBOOL79:%.*]] = zext i1 [[CMP78]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL79]], ptr [[ATMP73]], align 1
// CHK-C-NEXT:    br i1 [[CMP78]], label [[ATOMIC_CONT75]], label [[ATOMIC_EXIT80]]
// CHK-C:       atomic_exit80:
// CHK-C-NEXT:    [[TMP99:%.*]] = load double, ptr [[ATMP71]], align 8
// CHK-C-NEXT:    [[TMP100:%.*]] = load i8, ptr [[ATMP73]], align 1
// CHK-C-NEXT:    [[TMP101:%.*]] = load double, ptr [[EXPR]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD81:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-C-NEXT:    [[TMP102:%.*]] = bitcast i64 [[ATOMIC_LOAD81]] to double
// CHK-C-NEXT:    store double [[TMP102]], ptr [[ATMP82]], align 8
// CHK-C-NEXT:    [[CMP83:%.*]] = fcmp ogt double [[TMP102]], [[TMP101]]
// CHK-C-NEXT:    [[FROMBOOL85:%.*]] = zext i1 [[CMP83]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL85]], ptr [[ATMP84]], align 1
// CHK-C-NEXT:    br i1 [[CMP83]], label [[ATOMIC_CONT86:%.*]], label [[ATOMIC_EXIT91:%.*]]
// CHK-C:       atomic_cont86:
// CHK-C-NEXT:    [[TMP103:%.*]] = phi i64 [ [[ATOMIC_LOAD81]], [[ATOMIC_EXIT80]] ], [ [[TMP108:%.*]], [[ATOMIC_CMP88:%.*]] ]
// CHK-C-NEXT:    [[TMP104:%.*]] = bitcast i64 [[TMP103]] to double
// CHK-C-NEXT:    store double [[TMP104]], ptr [[ATMP82]], align 8
// CHK-C-NEXT:    [[TMP105:%.*]] = bitcast double [[TMP101]] to i64
// CHK-C-NEXT:    store i64 [[TMP105]], ptr [[ATOMIC_TEMP87]], align 8
// CHK-C-NEXT:    [[TMP106:%.*]] = load i64, ptr [[ATOMIC_TEMP87]], align 8
// CHK-C-NEXT:    [[TMP107:%.*]] = cmpxchg ptr [[X]], i64 [[TMP103]], i64 [[TMP106]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP108]] = extractvalue { i64, i1 } [[TMP107]], 0
// CHK-C-NEXT:    [[TMP109:%.*]] = extractvalue { i64, i1 } [[TMP107]], 1
// CHK-C-NEXT:    br i1 [[TMP109]], label [[ATOMIC_EXIT91]], label [[ATOMIC_CMP88]]
// CHK-C:       atomic_cmp88:
// CHK-C-NEXT:    [[TMP110:%.*]] = bitcast i64 [[TMP108]] to double
// CHK-C-NEXT:    [[CMP89:%.*]] = fcmp ogt double [[TMP110]], [[TMP101]]
// CHK-C-NEXT:    [[FROMBOOL90:%.*]] = zext i1 [[CMP89]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL90]], ptr [[ATMP84]], align 1
// CHK-C-NEXT:    br i1 [[CMP89]], label [[ATOMIC_CONT86]], label [[ATOMIC_EXIT91]]
// CHK-C:       atomic_exit91:
// CHK-C-NEXT:    [[TMP111:%.*]] = load double, ptr [[ATMP82]], align 8
// CHK-C-NEXT:    [[TMP112:%.*]] = load i8, ptr [[ATMP84]], align 1
// CHK-C-NEXT:    [[TMP113:%.*]] = load double, ptr [[D]], align 8
// CHK-C-NEXT:    [[TMP114:%.*]] = load double, ptr [[E]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD92:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-C-NEXT:    [[TMP115:%.*]] = bitcast i64 [[ATOMIC_LOAD92]] to double
// CHK-C-NEXT:    store double [[TMP115]], ptr [[ATMP93]], align 8
// CHK-C-NEXT:    [[TMP116:%.*]] = bitcast double [[TMP115]] to i64
// CHK-C-NEXT:    [[TMP117:%.*]] = bitcast double [[TMP114]] to i64
// CHK-C-NEXT:    [[CMP94:%.*]] = icmp eq i64 [[TMP116]], [[TMP117]]
// CHK-C-NEXT:    [[FROMBOOL96:%.*]] = zext i1 [[CMP94]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL96]], ptr [[ATMP95]], align 1
// CHK-C-NEXT:    br i1 [[CMP94]], label [[ATOMIC_CONT97:%.*]], label [[ATOMIC_EXIT102:%.*]]
// CHK-C:       atomic_cont97:
// CHK-C-NEXT:    [[TMP118:%.*]] = phi i64 [ [[ATOMIC_LOAD92]], [[ATOMIC_EXIT91]] ], [ [[TMP123:%.*]], [[ATOMIC_CMP99:%.*]] ]
// CHK-C-NEXT:    [[TMP119:%.*]] = bitcast i64 [[TMP118]] to double
// CHK-C-NEXT:    store double [[TMP119]], ptr [[ATMP93]], align 8
// CHK-C-NEXT:    [[TMP120:%.*]] = bitcast double [[TMP113]] to i64
// CHK-C-NEXT:    store i64 [[TMP120]], ptr [[ATOMIC_TEMP98]], align 8
// CHK-C-NEXT:    [[TMP121:%.*]] = load i64, ptr [[ATOMIC_TEMP98]], align 8
// CHK-C-NEXT:    [[TMP122:%.*]] = cmpxchg ptr [[X]], i64 [[TMP118]], i64 [[TMP121]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP123]] = extractvalue { i64, i1 } [[TMP122]], 0
// CHK-C-NEXT:    [[TMP124:%.*]] = extractvalue { i64, i1 } [[TMP122]], 1
// CHK-C-NEXT:    br i1 [[TMP124]], label [[ATOMIC_EXIT102]], label [[ATOMIC_CMP99]]
// CHK-C:       atomic_cmp99:
// CHK-C-NEXT:    [[TMP125:%.*]] = bitcast i64 [[TMP123]] to double
// CHK-C-NEXT:    [[TMP126:%.*]] = bitcast double [[TMP125]] to i64
// CHK-C-NEXT:    [[TMP127:%.*]] = bitcast double [[TMP114]] to i64
// CHK-C-NEXT:    [[CMP100:%.*]] = icmp eq i64 [[TMP126]], [[TMP127]]
// CHK-C-NEXT:    [[FROMBOOL101:%.*]] = zext i1 [[CMP100]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL101]], ptr [[ATMP95]], align 1
// CHK-C-NEXT:    br i1 [[CMP100]], label [[ATOMIC_CONT97]], label [[ATOMIC_EXIT102]]
// CHK-C:       atomic_exit102:
// CHK-C-NEXT:    [[TMP128:%.*]] = load double, ptr [[ATMP93]], align 8
// CHK-C-NEXT:    [[TMP129:%.*]] = load i8, ptr [[ATMP95]], align 1
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z11test_doublev(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[X:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[D:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[E:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP5:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP7:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP10:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP16:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP18:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP21:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP27:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP29:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP32:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP38:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP40:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP43:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP49:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP51:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP54:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP60:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP62:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP65:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP71:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP73:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP76:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP82:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP84:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP87:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP93:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP95:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP98:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load double, ptr [[EXPR]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP1:%.*]] = bitcast i64 [[ATOMIC_LOAD]] to double
// CHK-CXX-NEXT:    store double [[TMP1]], ptr [[TMP]], align 8
// CHK-CXX-NEXT:    [[CMP:%.*]] = fcmp ogt double [[TMP1]], [[TMP0]]
// CHK-CXX-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL]], ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP2:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP7:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    [[TMP3:%.*]] = bitcast i64 [[TMP2]] to double
// CHK-CXX-NEXT:    store double [[TMP3]], ptr [[TMP]], align 8
// CHK-CXX-NEXT:    [[TMP4:%.*]] = bitcast double [[TMP0]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP4]], ptr [[ATOMIC_TEMP]], align 8
// CHK-CXX-NEXT:    [[TMP5:%.*]] = load i64, ptr [[ATOMIC_TEMP]], align 8
// CHK-CXX-NEXT:    [[TMP6:%.*]] = cmpxchg ptr [[X]], i64 [[TMP2]], i64 [[TMP5]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP7]] = extractvalue { i64, i1 } [[TMP6]], 0
// CHK-CXX-NEXT:    [[TMP8:%.*]] = extractvalue { i64, i1 } [[TMP6]], 1
// CHK-CXX-NEXT:    br i1 [[TMP8]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    [[TMP9:%.*]] = bitcast i64 [[TMP7]] to double
// CHK-CXX-NEXT:    [[CMP2:%.*]] = fcmp ogt double [[TMP9]], [[TMP0]]
// CHK-CXX-NEXT:    [[FROMBOOL3:%.*]] = zext i1 [[CMP2]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL3]], ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP2]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP10:%.*]] = load double, ptr [[TMP]], align 8
// CHK-CXX-NEXT:    [[TMP11:%.*]] = load i8, ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    [[TMP12:%.*]] = load double, ptr [[EXPR]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD4:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP13:%.*]] = bitcast i64 [[ATOMIC_LOAD4]] to double
// CHK-CXX-NEXT:    store double [[TMP13]], ptr [[ATMP5]], align 8
// CHK-CXX-NEXT:    [[CMP6:%.*]] = fcmp olt double [[TMP13]], [[TMP12]]
// CHK-CXX-NEXT:    [[FROMBOOL8:%.*]] = zext i1 [[CMP6]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL8]], ptr [[ATMP7]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP6]], label [[ATOMIC_CONT9:%.*]], label [[ATOMIC_EXIT14:%.*]]
// CHK-CXX:       atomic_cont9:
// CHK-CXX-NEXT:    [[TMP14:%.*]] = phi i64 [ [[ATOMIC_LOAD4]], [[ATOMIC_EXIT]] ], [ [[TMP19:%.*]], [[ATOMIC_CMP11:%.*]] ]
// CHK-CXX-NEXT:    [[TMP15:%.*]] = bitcast i64 [[TMP14]] to double
// CHK-CXX-NEXT:    store double [[TMP15]], ptr [[ATMP5]], align 8
// CHK-CXX-NEXT:    [[TMP16:%.*]] = bitcast double [[TMP12]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP16]], ptr [[ATOMIC_TEMP10]], align 8
// CHK-CXX-NEXT:    [[TMP17:%.*]] = load i64, ptr [[ATOMIC_TEMP10]], align 8
// CHK-CXX-NEXT:    [[TMP18:%.*]] = cmpxchg ptr [[X]], i64 [[TMP14]], i64 [[TMP17]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP19]] = extractvalue { i64, i1 } [[TMP18]], 0
// CHK-CXX-NEXT:    [[TMP20:%.*]] = extractvalue { i64, i1 } [[TMP18]], 1
// CHK-CXX-NEXT:    br i1 [[TMP20]], label [[ATOMIC_EXIT14]], label [[ATOMIC_CMP11]]
// CHK-CXX:       atomic_cmp11:
// CHK-CXX-NEXT:    [[TMP21:%.*]] = bitcast i64 [[TMP19]] to double
// CHK-CXX-NEXT:    [[CMP12:%.*]] = fcmp olt double [[TMP21]], [[TMP12]]
// CHK-CXX-NEXT:    [[FROMBOOL13:%.*]] = zext i1 [[CMP12]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL13]], ptr [[ATMP7]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT9]], label [[ATOMIC_EXIT14]]
// CHK-CXX:       atomic_exit14:
// CHK-CXX-NEXT:    [[TMP22:%.*]] = load double, ptr [[ATMP5]], align 8
// CHK-CXX-NEXT:    [[TMP23:%.*]] = load i8, ptr [[ATMP7]], align 1
// CHK-CXX-NEXT:    [[TMP24:%.*]] = load double, ptr [[EXPR]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD15:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP25:%.*]] = bitcast i64 [[ATOMIC_LOAD15]] to double
// CHK-CXX-NEXT:    store double [[TMP25]], ptr [[ATMP16]], align 8
// CHK-CXX-NEXT:    [[CMP17:%.*]] = fcmp olt double [[TMP25]], [[TMP24]]
// CHK-CXX-NEXT:    [[FROMBOOL19:%.*]] = zext i1 [[CMP17]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL19]], ptr [[ATMP18]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP17]], label [[ATOMIC_CONT20:%.*]], label [[ATOMIC_EXIT25:%.*]]
// CHK-CXX:       atomic_cont20:
// CHK-CXX-NEXT:    [[TMP26:%.*]] = phi i64 [ [[ATOMIC_LOAD15]], [[ATOMIC_EXIT14]] ], [ [[TMP31:%.*]], [[ATOMIC_CMP22:%.*]] ]
// CHK-CXX-NEXT:    [[TMP27:%.*]] = bitcast i64 [[TMP26]] to double
// CHK-CXX-NEXT:    store double [[TMP27]], ptr [[ATMP16]], align 8
// CHK-CXX-NEXT:    [[TMP28:%.*]] = bitcast double [[TMP24]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP28]], ptr [[ATOMIC_TEMP21]], align 8
// CHK-CXX-NEXT:    [[TMP29:%.*]] = load i64, ptr [[ATOMIC_TEMP21]], align 8
// CHK-CXX-NEXT:    [[TMP30:%.*]] = cmpxchg ptr [[X]], i64 [[TMP26]], i64 [[TMP29]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP31]] = extractvalue { i64, i1 } [[TMP30]], 0
// CHK-CXX-NEXT:    [[TMP32:%.*]] = extractvalue { i64, i1 } [[TMP30]], 1
// CHK-CXX-NEXT:    br i1 [[TMP32]], label [[ATOMIC_EXIT25]], label [[ATOMIC_CMP22]]
// CHK-CXX:       atomic_cmp22:
// CHK-CXX-NEXT:    [[TMP33:%.*]] = bitcast i64 [[TMP31]] to double
// CHK-CXX-NEXT:    [[CMP23:%.*]] = fcmp olt double [[TMP33]], [[TMP24]]
// CHK-CXX-NEXT:    [[FROMBOOL24:%.*]] = zext i1 [[CMP23]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL24]], ptr [[ATMP18]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP23]], label [[ATOMIC_CONT20]], label [[ATOMIC_EXIT25]]
// CHK-CXX:       atomic_exit25:
// CHK-CXX-NEXT:    [[TMP34:%.*]] = load double, ptr [[ATMP16]], align 8
// CHK-CXX-NEXT:    [[TMP35:%.*]] = load i8, ptr [[ATMP18]], align 1
// CHK-CXX-NEXT:    [[TMP36:%.*]] = load double, ptr [[EXPR]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD26:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP37:%.*]] = bitcast i64 [[ATOMIC_LOAD26]] to double
// CHK-CXX-NEXT:    store double [[TMP37]], ptr [[ATMP27]], align 8
// CHK-CXX-NEXT:    [[CMP28:%.*]] = fcmp ogt double [[TMP37]], [[TMP36]]
// CHK-CXX-NEXT:    [[FROMBOOL30:%.*]] = zext i1 [[CMP28]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL30]], ptr [[ATMP29]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP28]], label [[ATOMIC_CONT31:%.*]], label [[ATOMIC_EXIT36:%.*]]
// CHK-CXX:       atomic_cont31:
// CHK-CXX-NEXT:    [[TMP38:%.*]] = phi i64 [ [[ATOMIC_LOAD26]], [[ATOMIC_EXIT25]] ], [ [[TMP43:%.*]], [[ATOMIC_CMP33:%.*]] ]
// CHK-CXX-NEXT:    [[TMP39:%.*]] = bitcast i64 [[TMP38]] to double
// CHK-CXX-NEXT:    store double [[TMP39]], ptr [[ATMP27]], align 8
// CHK-CXX-NEXT:    [[TMP40:%.*]] = bitcast double [[TMP36]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP40]], ptr [[ATOMIC_TEMP32]], align 8
// CHK-CXX-NEXT:    [[TMP41:%.*]] = load i64, ptr [[ATOMIC_TEMP32]], align 8
// CHK-CXX-NEXT:    [[TMP42:%.*]] = cmpxchg ptr [[X]], i64 [[TMP38]], i64 [[TMP41]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP43]] = extractvalue { i64, i1 } [[TMP42]], 0
// CHK-CXX-NEXT:    [[TMP44:%.*]] = extractvalue { i64, i1 } [[TMP42]], 1
// CHK-CXX-NEXT:    br i1 [[TMP44]], label [[ATOMIC_EXIT36]], label [[ATOMIC_CMP33]]
// CHK-CXX:       atomic_cmp33:
// CHK-CXX-NEXT:    [[TMP45:%.*]] = bitcast i64 [[TMP43]] to double
// CHK-CXX-NEXT:    [[CMP34:%.*]] = fcmp ogt double [[TMP45]], [[TMP36]]
// CHK-CXX-NEXT:    [[FROMBOOL35:%.*]] = zext i1 [[CMP34]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL35]], ptr [[ATMP29]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP34]], label [[ATOMIC_CONT31]], label [[ATOMIC_EXIT36]]
// CHK-CXX:       atomic_exit36:
// CHK-CXX-NEXT:    [[TMP46:%.*]] = load double, ptr [[ATMP27]], align 8
// CHK-CXX-NEXT:    [[TMP47:%.*]] = load i8, ptr [[ATMP29]], align 1
// CHK-CXX-NEXT:    [[TMP48:%.*]] = load double, ptr [[D]], align 8
// CHK-CXX-NEXT:    [[TMP49:%.*]] = load double, ptr [[E]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD37:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP50:%.*]] = bitcast i64 [[ATOMIC_LOAD37]] to double
// CHK-CXX-NEXT:    store double [[TMP50]], ptr [[ATMP38]], align 8
// CHK-CXX-NEXT:    [[TMP51:%.*]] = bitcast double [[TMP50]] to i64
// CHK-CXX-NEXT:    [[TMP52:%.*]] = bitcast double [[TMP49]] to i64
// CHK-CXX-NEXT:    [[CMP39:%.*]] = icmp eq i64 [[TMP51]], [[TMP52]]
// CHK-CXX-NEXT:    [[FROMBOOL41:%.*]] = zext i1 [[CMP39]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL41]], ptr [[ATMP40]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP39]], label [[ATOMIC_CONT42:%.*]], label [[ATOMIC_EXIT47:%.*]]
// CHK-CXX:       atomic_cont42:
// CHK-CXX-NEXT:    [[TMP53:%.*]] = phi i64 [ [[ATOMIC_LOAD37]], [[ATOMIC_EXIT36]] ], [ [[TMP58:%.*]], [[ATOMIC_CMP44:%.*]] ]
// CHK-CXX-NEXT:    [[TMP54:%.*]] = bitcast i64 [[TMP53]] to double
// CHK-CXX-NEXT:    store double [[TMP54]], ptr [[ATMP38]], align 8
// CHK-CXX-NEXT:    [[TMP55:%.*]] = bitcast double [[TMP48]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP55]], ptr [[ATOMIC_TEMP43]], align 8
// CHK-CXX-NEXT:    [[TMP56:%.*]] = load i64, ptr [[ATOMIC_TEMP43]], align 8
// CHK-CXX-NEXT:    [[TMP57:%.*]] = cmpxchg ptr [[X]], i64 [[TMP53]], i64 [[TMP56]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP58]] = extractvalue { i64, i1 } [[TMP57]], 0
// CHK-CXX-NEXT:    [[TMP59:%.*]] = extractvalue { i64, i1 } [[TMP57]], 1
// CHK-CXX-NEXT:    br i1 [[TMP59]], label [[ATOMIC_EXIT47]], label [[ATOMIC_CMP44]]
// CHK-CXX:       atomic_cmp44:
// CHK-CXX-NEXT:    [[TMP60:%.*]] = bitcast i64 [[TMP58]] to double
// CHK-CXX-NEXT:    [[TMP61:%.*]] = bitcast double [[TMP60]] to i64
// CHK-CXX-NEXT:    [[TMP62:%.*]] = bitcast double [[TMP49]] to i64
// CHK-CXX-NEXT:    [[CMP45:%.*]] = icmp eq i64 [[TMP61]], [[TMP62]]
// CHK-CXX-NEXT:    [[FROMBOOL46:%.*]] = zext i1 [[CMP45]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL46]], ptr [[ATMP40]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP45]], label [[ATOMIC_CONT42]], label [[ATOMIC_EXIT47]]
// CHK-CXX:       atomic_exit47:
// CHK-CXX-NEXT:    [[TMP63:%.*]] = load double, ptr [[ATMP38]], align 8
// CHK-CXX-NEXT:    [[TMP64:%.*]] = load i8, ptr [[ATMP40]], align 1
// CHK-CXX-NEXT:    [[TMP65:%.*]] = load double, ptr [[EXPR]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD48:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP66:%.*]] = bitcast i64 [[ATOMIC_LOAD48]] to double
// CHK-CXX-NEXT:    store double [[TMP66]], ptr [[ATMP49]], align 8
// CHK-CXX-NEXT:    [[CMP50:%.*]] = fcmp ogt double [[TMP66]], [[TMP65]]
// CHK-CXX-NEXT:    [[FROMBOOL52:%.*]] = zext i1 [[CMP50]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL52]], ptr [[ATMP51]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP50]], label [[ATOMIC_CONT53:%.*]], label [[ATOMIC_EXIT58:%.*]]
// CHK-CXX:       atomic_cont53:
// CHK-CXX-NEXT:    [[TMP67:%.*]] = phi i64 [ [[ATOMIC_LOAD48]], [[ATOMIC_EXIT47]] ], [ [[TMP72:%.*]], [[ATOMIC_CMP55:%.*]] ]
// CHK-CXX-NEXT:    [[TMP68:%.*]] = bitcast i64 [[TMP67]] to double
// CHK-CXX-NEXT:    store double [[TMP68]], ptr [[ATMP49]], align 8
// CHK-CXX-NEXT:    [[TMP69:%.*]] = bitcast double [[TMP65]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP69]], ptr [[ATOMIC_TEMP54]], align 8
// CHK-CXX-NEXT:    [[TMP70:%.*]] = load i64, ptr [[ATOMIC_TEMP54]], align 8
// CHK-CXX-NEXT:    [[TMP71:%.*]] = cmpxchg ptr [[X]], i64 [[TMP67]], i64 [[TMP70]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP72]] = extractvalue { i64, i1 } [[TMP71]], 0
// CHK-CXX-NEXT:    [[TMP73:%.*]] = extractvalue { i64, i1 } [[TMP71]], 1
// CHK-CXX-NEXT:    br i1 [[TMP73]], label [[ATOMIC_EXIT58]], label [[ATOMIC_CMP55]]
// CHK-CXX:       atomic_cmp55:
// CHK-CXX-NEXT:    [[TMP74:%.*]] = bitcast i64 [[TMP72]] to double
// CHK-CXX-NEXT:    [[CMP56:%.*]] = fcmp ogt double [[TMP74]], [[TMP65]]
// CHK-CXX-NEXT:    [[FROMBOOL57:%.*]] = zext i1 [[CMP56]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL57]], ptr [[ATMP51]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP56]], label [[ATOMIC_CONT53]], label [[ATOMIC_EXIT58]]
// CHK-CXX:       atomic_exit58:
// CHK-CXX-NEXT:    [[TMP75:%.*]] = load double, ptr [[ATMP49]], align 8
// CHK-CXX-NEXT:    [[TMP76:%.*]] = load i8, ptr [[ATMP51]], align 1
// CHK-CXX-NEXT:    [[TMP77:%.*]] = load double, ptr [[EXPR]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD59:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP78:%.*]] = bitcast i64 [[ATOMIC_LOAD59]] to double
// CHK-CXX-NEXT:    store double [[TMP78]], ptr [[ATMP60]], align 8
// CHK-CXX-NEXT:    [[CMP61:%.*]] = fcmp olt double [[TMP78]], [[TMP77]]
// CHK-CXX-NEXT:    [[FROMBOOL63:%.*]] = zext i1 [[CMP61]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL63]], ptr [[ATMP62]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP61]], label [[ATOMIC_CONT64:%.*]], label [[ATOMIC_EXIT69:%.*]]
// CHK-CXX:       atomic_cont64:
// CHK-CXX-NEXT:    [[TMP79:%.*]] = phi i64 [ [[ATOMIC_LOAD59]], [[ATOMIC_EXIT58]] ], [ [[TMP84:%.*]], [[ATOMIC_CMP66:%.*]] ]
// CHK-CXX-NEXT:    [[TMP80:%.*]] = bitcast i64 [[TMP79]] to double
// CHK-CXX-NEXT:    store double [[TMP80]], ptr [[ATMP60]], align 8
// CHK-CXX-NEXT:    [[TMP81:%.*]] = bitcast double [[TMP77]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP81]], ptr [[ATOMIC_TEMP65]], align 8
// CHK-CXX-NEXT:    [[TMP82:%.*]] = load i64, ptr [[ATOMIC_TEMP65]], align 8
// CHK-CXX-NEXT:    [[TMP83:%.*]] = cmpxchg ptr [[X]], i64 [[TMP79]], i64 [[TMP82]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP84]] = extractvalue { i64, i1 } [[TMP83]], 0
// CHK-CXX-NEXT:    [[TMP85:%.*]] = extractvalue { i64, i1 } [[TMP83]], 1
// CHK-CXX-NEXT:    br i1 [[TMP85]], label [[ATOMIC_EXIT69]], label [[ATOMIC_CMP66]]
// CHK-CXX:       atomic_cmp66:
// CHK-CXX-NEXT:    [[TMP86:%.*]] = bitcast i64 [[TMP84]] to double
// CHK-CXX-NEXT:    [[CMP67:%.*]] = fcmp olt double [[TMP86]], [[TMP77]]
// CHK-CXX-NEXT:    [[FROMBOOL68:%.*]] = zext i1 [[CMP67]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL68]], ptr [[ATMP62]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP67]], label [[ATOMIC_CONT64]], label [[ATOMIC_EXIT69]]
// CHK-CXX:       atomic_exit69:
// CHK-CXX-NEXT:    [[TMP87:%.*]] = load double, ptr [[ATMP60]], align 8
// CHK-CXX-NEXT:    [[TMP88:%.*]] = load i8, ptr [[ATMP62]], align 1
// CHK-CXX-NEXT:    [[TMP89:%.*]] = load double, ptr [[EXPR]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD70:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP90:%.*]] = bitcast i64 [[ATOMIC_LOAD70]] to double
// CHK-CXX-NEXT:    store double [[TMP90]], ptr [[ATMP71]], align 8
// CHK-CXX-NEXT:    [[CMP72:%.*]] = fcmp olt double [[TMP90]], [[TMP89]]
// CHK-CXX-NEXT:    [[FROMBOOL74:%.*]] = zext i1 [[CMP72]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL74]], ptr [[ATMP73]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP72]], label [[ATOMIC_CONT75:%.*]], label [[ATOMIC_EXIT80:%.*]]
// CHK-CXX:       atomic_cont75:
// CHK-CXX-NEXT:    [[TMP91:%.*]] = phi i64 [ [[ATOMIC_LOAD70]], [[ATOMIC_EXIT69]] ], [ [[TMP96:%.*]], [[ATOMIC_CMP77:%.*]] ]
// CHK-CXX-NEXT:    [[TMP92:%.*]] = bitcast i64 [[TMP91]] to double
// CHK-CXX-NEXT:    store double [[TMP92]], ptr [[ATMP71]], align 8
// CHK-CXX-NEXT:    [[TMP93:%.*]] = bitcast double [[TMP89]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP93]], ptr [[ATOMIC_TEMP76]], align 8
// CHK-CXX-NEXT:    [[TMP94:%.*]] = load i64, ptr [[ATOMIC_TEMP76]], align 8
// CHK-CXX-NEXT:    [[TMP95:%.*]] = cmpxchg ptr [[X]], i64 [[TMP91]], i64 [[TMP94]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP96]] = extractvalue { i64, i1 } [[TMP95]], 0
// CHK-CXX-NEXT:    [[TMP97:%.*]] = extractvalue { i64, i1 } [[TMP95]], 1
// CHK-CXX-NEXT:    br i1 [[TMP97]], label [[ATOMIC_EXIT80]], label [[ATOMIC_CMP77]]
// CHK-CXX:       atomic_cmp77:
// CHK-CXX-NEXT:    [[TMP98:%.*]] = bitcast i64 [[TMP96]] to double
// CHK-CXX-NEXT:    [[CMP78:%.*]] = fcmp olt double [[TMP98]], [[TMP89]]
// CHK-CXX-NEXT:    [[FROMBOOL79:%.*]] = zext i1 [[CMP78]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL79]], ptr [[ATMP73]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP78]], label [[ATOMIC_CONT75]], label [[ATOMIC_EXIT80]]
// CHK-CXX:       atomic_exit80:
// CHK-CXX-NEXT:    [[TMP99:%.*]] = load double, ptr [[ATMP71]], align 8
// CHK-CXX-NEXT:    [[TMP100:%.*]] = load i8, ptr [[ATMP73]], align 1
// CHK-CXX-NEXT:    [[TMP101:%.*]] = load double, ptr [[EXPR]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD81:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP102:%.*]] = bitcast i64 [[ATOMIC_LOAD81]] to double
// CHK-CXX-NEXT:    store double [[TMP102]], ptr [[ATMP82]], align 8
// CHK-CXX-NEXT:    [[CMP83:%.*]] = fcmp ogt double [[TMP102]], [[TMP101]]
// CHK-CXX-NEXT:    [[FROMBOOL85:%.*]] = zext i1 [[CMP83]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL85]], ptr [[ATMP84]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP83]], label [[ATOMIC_CONT86:%.*]], label [[ATOMIC_EXIT91:%.*]]
// CHK-CXX:       atomic_cont86:
// CHK-CXX-NEXT:    [[TMP103:%.*]] = phi i64 [ [[ATOMIC_LOAD81]], [[ATOMIC_EXIT80]] ], [ [[TMP108:%.*]], [[ATOMIC_CMP88:%.*]] ]
// CHK-CXX-NEXT:    [[TMP104:%.*]] = bitcast i64 [[TMP103]] to double
// CHK-CXX-NEXT:    store double [[TMP104]], ptr [[ATMP82]], align 8
// CHK-CXX-NEXT:    [[TMP105:%.*]] = bitcast double [[TMP101]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP105]], ptr [[ATOMIC_TEMP87]], align 8
// CHK-CXX-NEXT:    [[TMP106:%.*]] = load i64, ptr [[ATOMIC_TEMP87]], align 8
// CHK-CXX-NEXT:    [[TMP107:%.*]] = cmpxchg ptr [[X]], i64 [[TMP103]], i64 [[TMP106]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP108]] = extractvalue { i64, i1 } [[TMP107]], 0
// CHK-CXX-NEXT:    [[TMP109:%.*]] = extractvalue { i64, i1 } [[TMP107]], 1
// CHK-CXX-NEXT:    br i1 [[TMP109]], label [[ATOMIC_EXIT91]], label [[ATOMIC_CMP88]]
// CHK-CXX:       atomic_cmp88:
// CHK-CXX-NEXT:    [[TMP110:%.*]] = bitcast i64 [[TMP108]] to double
// CHK-CXX-NEXT:    [[CMP89:%.*]] = fcmp ogt double [[TMP110]], [[TMP101]]
// CHK-CXX-NEXT:    [[FROMBOOL90:%.*]] = zext i1 [[CMP89]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL90]], ptr [[ATMP84]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP89]], label [[ATOMIC_CONT86]], label [[ATOMIC_EXIT91]]
// CHK-CXX:       atomic_exit91:
// CHK-CXX-NEXT:    [[TMP111:%.*]] = load double, ptr [[ATMP82]], align 8
// CHK-CXX-NEXT:    [[TMP112:%.*]] = load i8, ptr [[ATMP84]], align 1
// CHK-CXX-NEXT:    [[TMP113:%.*]] = load double, ptr [[D]], align 8
// CHK-CXX-NEXT:    [[TMP114:%.*]] = load double, ptr [[E]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD92:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP115:%.*]] = bitcast i64 [[ATOMIC_LOAD92]] to double
// CHK-CXX-NEXT:    store double [[TMP115]], ptr [[ATMP93]], align 8
// CHK-CXX-NEXT:    [[TMP116:%.*]] = bitcast double [[TMP115]] to i64
// CHK-CXX-NEXT:    [[TMP117:%.*]] = bitcast double [[TMP114]] to i64
// CHK-CXX-NEXT:    [[CMP94:%.*]] = icmp eq i64 [[TMP116]], [[TMP117]]
// CHK-CXX-NEXT:    [[FROMBOOL96:%.*]] = zext i1 [[CMP94]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL96]], ptr [[ATMP95]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP94]], label [[ATOMIC_CONT97:%.*]], label [[ATOMIC_EXIT102:%.*]]
// CHK-CXX:       atomic_cont97:
// CHK-CXX-NEXT:    [[TMP118:%.*]] = phi i64 [ [[ATOMIC_LOAD92]], [[ATOMIC_EXIT91]] ], [ [[TMP123:%.*]], [[ATOMIC_CMP99:%.*]] ]
// CHK-CXX-NEXT:    [[TMP119:%.*]] = bitcast i64 [[TMP118]] to double
// CHK-CXX-NEXT:    store double [[TMP119]], ptr [[ATMP93]], align 8
// CHK-CXX-NEXT:    [[TMP120:%.*]] = bitcast double [[TMP113]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP120]], ptr [[ATOMIC_TEMP98]], align 8
// CHK-CXX-NEXT:    [[TMP121:%.*]] = load i64, ptr [[ATOMIC_TEMP98]], align 8
// CHK-CXX-NEXT:    [[TMP122:%.*]] = cmpxchg ptr [[X]], i64 [[TMP118]], i64 [[TMP121]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP123]] = extractvalue { i64, i1 } [[TMP122]], 0
// CHK-CXX-NEXT:    [[TMP124:%.*]] = extractvalue { i64, i1 } [[TMP122]], 1
// CHK-CXX-NEXT:    br i1 [[TMP124]], label [[ATOMIC_EXIT102]], label [[ATOMIC_CMP99]]
// CHK-CXX:       atomic_cmp99:
// CHK-CXX-NEXT:    [[TMP125:%.*]] = bitcast i64 [[TMP123]] to double
// CHK-CXX-NEXT:    [[TMP126:%.*]] = bitcast double [[TMP125]] to i64
// CHK-CXX-NEXT:    [[TMP127:%.*]] = bitcast double [[TMP114]] to i64
// CHK-CXX-NEXT:    [[CMP100:%.*]] = icmp eq i64 [[TMP126]], [[TMP127]]
// CHK-CXX-NEXT:    [[FROMBOOL101:%.*]] = zext i1 [[CMP100]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL101]], ptr [[ATMP95]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP100]], label [[ATOMIC_CONT97]], label [[ATOMIC_EXIT102]]
// CHK-CXX:       atomic_exit102:
// CHK-CXX-NEXT:    [[TMP128:%.*]] = load double, ptr [[ATMP93]], align 8
// CHK-CXX-NEXT:    [[TMP129:%.*]] = load i8, ptr [[ATMP95]], align 1
// CHK-CXX-NEXT:    ret void
//
void test_double() {
    // One of each form with 'double'.
    double x, expr, d, e;

    #pragma omp atomic compare
    x = expr < x ? expr : x; // MIN

    #pragma omp atomic compare
    x = expr > x ? expr : x; // MAX

    #pragma omp atomic compare
    x = x < expr ? expr : x; // MAX

    #pragma omp atomic compare
    x = x > expr ? expr : x; // MIN

    #pragma omp atomic compare
    x = x == e ? d : x;

    #pragma omp atomic compare
    if (expr < x) { x = expr; } // MIN

    #pragma omp atomic compare
    if (expr > x) { x = expr; } // MAX

    #pragma omp atomic compare
    if (x < expr) { x = expr; } // MAX

    #pragma omp atomic compare
    if (x > expr) { x = expr; } // MIN

    #pragma omp atomic compare
    if(x == e) { x = d; }
}

// CHK-C-LABEL: @test_bool(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[X:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[D:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[E:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[TMP:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATMP8:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATMP10:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP13:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATMP21:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATMP23:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP26:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[TMP0:%.*]] = load i8, ptr [[EXPR]], align 1
// CHK-C-NEXT:    [[TOBOOL:%.*]] = trunc i8 [[TMP0]] to i1
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i8, ptr [[X]] monotonic, align 1
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD]], ptr [[TMP]], align 1
// CHK-C-NEXT:    [[TMP1:%.*]] = trunc i8 [[ATOMIC_LOAD]] to i1
// CHK-C-NEXT:    [[CMP:%.*]] = icmp ugt i1 [[TMP1]], [[TOBOOL]]
// CHK-C-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL]], ptr [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP2:%.*]] = phi i8 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP5:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    store i8 [[TMP2]], ptr [[TMP]], align 1
// CHK-C-NEXT:    [[FROMBOOL2:%.*]] = zext i1 [[TOBOOL]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL2]], ptr [[ATOMIC_TEMP]], align 1
// CHK-C-NEXT:    [[TMP3:%.*]] = load i8, ptr [[ATOMIC_TEMP]], align 1
// CHK-C-NEXT:    [[TMP4:%.*]] = cmpxchg ptr [[X]], i8 [[TMP2]], i8 [[TMP3]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP5]] = extractvalue { i8, i1 } [[TMP4]], 0
// CHK-C-NEXT:    [[TMP6:%.*]] = extractvalue { i8, i1 } [[TMP4]], 1
// CHK-C-NEXT:    br i1 [[TMP6]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    [[TMP7:%.*]] = trunc i8 [[TMP5]] to i1
// CHK-C-NEXT:    [[CMP3:%.*]] = icmp ugt i1 [[TMP7]], [[TOBOOL]]
// CHK-C-NEXT:    [[FROMBOOL4:%.*]] = zext i1 [[CMP3]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL4]], ptr [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP3]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP8:%.*]] = load i8, ptr [[TMP]], align 1
// CHK-C-NEXT:    [[TMP9:%.*]] = load i8, ptr [[ATMP1]], align 1
// CHK-C-NEXT:    [[TMP10:%.*]] = load i8, ptr [[D]], align 1
// CHK-C-NEXT:    [[TOBOOL5:%.*]] = trunc i8 [[TMP10]] to i1
// CHK-C-NEXT:    [[TMP11:%.*]] = load i8, ptr [[E]], align 1
// CHK-C-NEXT:    [[TOBOOL6:%.*]] = trunc i8 [[TMP11]] to i1
// CHK-C-NEXT:    [[ATOMIC_LOAD7:%.*]] = load atomic i8, ptr [[X]] monotonic, align 1
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD7]], ptr [[ATMP8]], align 1
// CHK-C-NEXT:    [[TMP12:%.*]] = trunc i8 [[ATOMIC_LOAD7]] to i1
// CHK-C-NEXT:    [[CMP9:%.*]] = icmp eq i1 [[TMP12]], [[TOBOOL6]]
// CHK-C-NEXT:    [[FROMBOOL11:%.*]] = zext i1 [[CMP9]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL11]], ptr [[ATMP10]], align 1
// CHK-C-NEXT:    br i1 [[CMP9]], label [[ATOMIC_CONT12:%.*]], label [[ATOMIC_EXIT18:%.*]]
// CHK-C:       atomic_cont12:
// CHK-C-NEXT:    [[TMP13:%.*]] = phi i8 [ [[ATOMIC_LOAD7]], [[ATOMIC_EXIT]] ], [ [[TMP16:%.*]], [[ATOMIC_CMP15:%.*]] ]
// CHK-C-NEXT:    store i8 [[TMP13]], ptr [[ATMP8]], align 1
// CHK-C-NEXT:    [[FROMBOOL14:%.*]] = zext i1 [[TOBOOL5]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL14]], ptr [[ATOMIC_TEMP13]], align 1
// CHK-C-NEXT:    [[TMP14:%.*]] = load i8, ptr [[ATOMIC_TEMP13]], align 1
// CHK-C-NEXT:    [[TMP15:%.*]] = cmpxchg ptr [[X]], i8 [[TMP13]], i8 [[TMP14]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP16]] = extractvalue { i8, i1 } [[TMP15]], 0
// CHK-C-NEXT:    [[TMP17:%.*]] = extractvalue { i8, i1 } [[TMP15]], 1
// CHK-C-NEXT:    br i1 [[TMP17]], label [[ATOMIC_EXIT18]], label [[ATOMIC_CMP15]]
// CHK-C:       atomic_cmp15:
// CHK-C-NEXT:    [[TMP18:%.*]] = trunc i8 [[TMP16]] to i1
// CHK-C-NEXT:    [[CMP16:%.*]] = icmp eq i1 [[TMP18]], [[TOBOOL6]]
// CHK-C-NEXT:    [[FROMBOOL17:%.*]] = zext i1 [[CMP16]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL17]], ptr [[ATMP10]], align 1
// CHK-C-NEXT:    br i1 [[CMP16]], label [[ATOMIC_CONT12]], label [[ATOMIC_EXIT18]]
// CHK-C:       atomic_exit18:
// CHK-C-NEXT:    [[TMP19:%.*]] = load i8, ptr [[ATMP8]], align 1
// CHK-C-NEXT:    [[TMP20:%.*]] = load i8, ptr [[ATMP10]], align 1
// CHK-C-NEXT:    [[TMP21:%.*]] = load i8, ptr [[EXPR]], align 1
// CHK-C-NEXT:    [[TOBOOL19:%.*]] = trunc i8 [[TMP21]] to i1
// CHK-C-NEXT:    [[ATOMIC_LOAD20:%.*]] = load atomic i8, ptr [[X]] monotonic, align 1
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD20]], ptr [[ATMP21]], align 1
// CHK-C-NEXT:    [[TMP22:%.*]] = trunc i8 [[ATOMIC_LOAD20]] to i1
// CHK-C-NEXT:    [[CMP22:%.*]] = icmp ult i1 [[TMP22]], [[TOBOOL19]]
// CHK-C-NEXT:    [[FROMBOOL24:%.*]] = zext i1 [[CMP22]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL24]], ptr [[ATMP23]], align 1
// CHK-C-NEXT:    br i1 [[CMP22]], label [[ATOMIC_CONT25:%.*]], label [[ATOMIC_EXIT31:%.*]]
// CHK-C:       atomic_cont25:
// CHK-C-NEXT:    [[TMP23:%.*]] = phi i8 [ [[ATOMIC_LOAD20]], [[ATOMIC_EXIT18]] ], [ [[TMP26:%.*]], [[ATOMIC_CMP28:%.*]] ]
// CHK-C-NEXT:    store i8 [[TMP23]], ptr [[ATMP21]], align 1
// CHK-C-NEXT:    [[FROMBOOL27:%.*]] = zext i1 [[TOBOOL19]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL27]], ptr [[ATOMIC_TEMP26]], align 1
// CHK-C-NEXT:    [[TMP24:%.*]] = load i8, ptr [[ATOMIC_TEMP26]], align 1
// CHK-C-NEXT:    [[TMP25:%.*]] = cmpxchg ptr [[X]], i8 [[TMP23]], i8 [[TMP24]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP26]] = extractvalue { i8, i1 } [[TMP25]], 0
// CHK-C-NEXT:    [[TMP27:%.*]] = extractvalue { i8, i1 } [[TMP25]], 1
// CHK-C-NEXT:    br i1 [[TMP27]], label [[ATOMIC_EXIT31]], label [[ATOMIC_CMP28]]
// CHK-C:       atomic_cmp28:
// CHK-C-NEXT:    [[TMP28:%.*]] = trunc i8 [[TMP26]] to i1
// CHK-C-NEXT:    [[CMP29:%.*]] = icmp ult i1 [[TMP28]], [[TOBOOL19]]
// CHK-C-NEXT:    [[FROMBOOL30:%.*]] = zext i1 [[CMP29]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL30]], ptr [[ATMP23]], align 1
// CHK-C-NEXT:    br i1 [[CMP29]], label [[ATOMIC_CONT25]], label [[ATOMIC_EXIT31]]
// CHK-C:       atomic_exit31:
// CHK-C-NEXT:    [[TMP29:%.*]] = load i8, ptr [[ATMP21]], align 1
// CHK-C-NEXT:    [[TMP30:%.*]] = load i8, ptr [[ATMP23]], align 1
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z9test_boolv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[X:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATMP8:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATMP10:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP13:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATMP21:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATMP23:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP26:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i8, ptr [[EXPR]], align 1
// CHK-CXX-NEXT:    [[TOBOOL:%.*]] = trunc i8 [[TMP0]] to i1
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i8, ptr [[X]] monotonic, align 1
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD]], ptr [[TMP]], align 1
// CHK-CXX-NEXT:    [[TMP1:%.*]] = trunc i8 [[ATOMIC_LOAD]] to i1
// CHK-CXX-NEXT:    [[CMP:%.*]] = icmp ugt i1 [[TMP1]], [[TOBOOL]]
// CHK-CXX-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL]], ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP2:%.*]] = phi i8 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP5:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    store i8 [[TMP2]], ptr [[TMP]], align 1
// CHK-CXX-NEXT:    [[FROMBOOL2:%.*]] = zext i1 [[TOBOOL]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL2]], ptr [[ATOMIC_TEMP]], align 1
// CHK-CXX-NEXT:    [[TMP3:%.*]] = load i8, ptr [[ATOMIC_TEMP]], align 1
// CHK-CXX-NEXT:    [[TMP4:%.*]] = cmpxchg ptr [[X]], i8 [[TMP2]], i8 [[TMP3]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP5]] = extractvalue { i8, i1 } [[TMP4]], 0
// CHK-CXX-NEXT:    [[TMP6:%.*]] = extractvalue { i8, i1 } [[TMP4]], 1
// CHK-CXX-NEXT:    br i1 [[TMP6]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    [[TMP7:%.*]] = trunc i8 [[TMP5]] to i1
// CHK-CXX-NEXT:    [[CMP3:%.*]] = icmp ugt i1 [[TMP7]], [[TOBOOL]]
// CHK-CXX-NEXT:    [[FROMBOOL4:%.*]] = zext i1 [[CMP3]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL4]], ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP3]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP8:%.*]] = load i8, ptr [[TMP]], align 1
// CHK-CXX-NEXT:    [[TMP9:%.*]] = load i8, ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    [[TMP10:%.*]] = load i8, ptr [[D]], align 1
// CHK-CXX-NEXT:    [[TOBOOL5:%.*]] = trunc i8 [[TMP10]] to i1
// CHK-CXX-NEXT:    [[TMP11:%.*]] = load i8, ptr [[E]], align 1
// CHK-CXX-NEXT:    [[TOBOOL6:%.*]] = trunc i8 [[TMP11]] to i1
// CHK-CXX-NEXT:    [[ATOMIC_LOAD7:%.*]] = load atomic i8, ptr [[X]] monotonic, align 1
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD7]], ptr [[ATMP8]], align 1
// CHK-CXX-NEXT:    [[TMP12:%.*]] = trunc i8 [[ATOMIC_LOAD7]] to i1
// CHK-CXX-NEXT:    [[CMP9:%.*]] = icmp eq i1 [[TMP12]], [[TOBOOL6]]
// CHK-CXX-NEXT:    [[FROMBOOL11:%.*]] = zext i1 [[CMP9]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL11]], ptr [[ATMP10]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP9]], label [[ATOMIC_CONT12:%.*]], label [[ATOMIC_EXIT18:%.*]]
// CHK-CXX:       atomic_cont12:
// CHK-CXX-NEXT:    [[TMP13:%.*]] = phi i8 [ [[ATOMIC_LOAD7]], [[ATOMIC_EXIT]] ], [ [[TMP16:%.*]], [[ATOMIC_CMP15:%.*]] ]
// CHK-CXX-NEXT:    store i8 [[TMP13]], ptr [[ATMP8]], align 1
// CHK-CXX-NEXT:    [[FROMBOOL14:%.*]] = zext i1 [[TOBOOL5]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL14]], ptr [[ATOMIC_TEMP13]], align 1
// CHK-CXX-NEXT:    [[TMP14:%.*]] = load i8, ptr [[ATOMIC_TEMP13]], align 1
// CHK-CXX-NEXT:    [[TMP15:%.*]] = cmpxchg ptr [[X]], i8 [[TMP13]], i8 [[TMP14]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP16]] = extractvalue { i8, i1 } [[TMP15]], 0
// CHK-CXX-NEXT:    [[TMP17:%.*]] = extractvalue { i8, i1 } [[TMP15]], 1
// CHK-CXX-NEXT:    br i1 [[TMP17]], label [[ATOMIC_EXIT18]], label [[ATOMIC_CMP15]]
// CHK-CXX:       atomic_cmp15:
// CHK-CXX-NEXT:    [[TMP18:%.*]] = trunc i8 [[TMP16]] to i1
// CHK-CXX-NEXT:    [[CMP16:%.*]] = icmp eq i1 [[TMP18]], [[TOBOOL6]]
// CHK-CXX-NEXT:    [[FROMBOOL17:%.*]] = zext i1 [[CMP16]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL17]], ptr [[ATMP10]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP16]], label [[ATOMIC_CONT12]], label [[ATOMIC_EXIT18]]
// CHK-CXX:       atomic_exit18:
// CHK-CXX-NEXT:    [[TMP19:%.*]] = load i8, ptr [[ATMP8]], align 1
// CHK-CXX-NEXT:    [[TMP20:%.*]] = load i8, ptr [[ATMP10]], align 1
// CHK-CXX-NEXT:    [[TMP21:%.*]] = load i8, ptr [[EXPR]], align 1
// CHK-CXX-NEXT:    [[TOBOOL19:%.*]] = trunc i8 [[TMP21]] to i1
// CHK-CXX-NEXT:    [[ATOMIC_LOAD20:%.*]] = load atomic i8, ptr [[X]] monotonic, align 1
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD20]], ptr [[ATMP21]], align 1
// CHK-CXX-NEXT:    [[TMP22:%.*]] = trunc i8 [[ATOMIC_LOAD20]] to i1
// CHK-CXX-NEXT:    [[CMP22:%.*]] = icmp ult i1 [[TMP22]], [[TOBOOL19]]
// CHK-CXX-NEXT:    [[FROMBOOL24:%.*]] = zext i1 [[CMP22]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL24]], ptr [[ATMP23]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP22]], label [[ATOMIC_CONT25:%.*]], label [[ATOMIC_EXIT31:%.*]]
// CHK-CXX:       atomic_cont25:
// CHK-CXX-NEXT:    [[TMP23:%.*]] = phi i8 [ [[ATOMIC_LOAD20]], [[ATOMIC_EXIT18]] ], [ [[TMP26:%.*]], [[ATOMIC_CMP28:%.*]] ]
// CHK-CXX-NEXT:    store i8 [[TMP23]], ptr [[ATMP21]], align 1
// CHK-CXX-NEXT:    [[FROMBOOL27:%.*]] = zext i1 [[TOBOOL19]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL27]], ptr [[ATOMIC_TEMP26]], align 1
// CHK-CXX-NEXT:    [[TMP24:%.*]] = load i8, ptr [[ATOMIC_TEMP26]], align 1
// CHK-CXX-NEXT:    [[TMP25:%.*]] = cmpxchg ptr [[X]], i8 [[TMP23]], i8 [[TMP24]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP26]] = extractvalue { i8, i1 } [[TMP25]], 0
// CHK-CXX-NEXT:    [[TMP27:%.*]] = extractvalue { i8, i1 } [[TMP25]], 1
// CHK-CXX-NEXT:    br i1 [[TMP27]], label [[ATOMIC_EXIT31]], label [[ATOMIC_CMP28]]
// CHK-CXX:       atomic_cmp28:
// CHK-CXX-NEXT:    [[TMP28:%.*]] = trunc i8 [[TMP26]] to i1
// CHK-CXX-NEXT:    [[CMP29:%.*]] = icmp ult i1 [[TMP28]], [[TOBOOL19]]
// CHK-CXX-NEXT:    [[FROMBOOL30:%.*]] = zext i1 [[CMP29]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL30]], ptr [[ATMP23]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP29]], label [[ATOMIC_CONT25]], label [[ATOMIC_EXIT31]]
// CHK-CXX:       atomic_exit31:
// CHK-CXX-NEXT:    [[TMP29:%.*]] = load i8, ptr [[ATMP21]], align 1
// CHK-CXX-NEXT:    [[TMP30:%.*]] = load i8, ptr [[ATMP23]], align 1
// CHK-CXX-NEXT:    ret void
//
void test_bool() {
#ifdef __cplusplus
  bool x, expr, d, e;
#else
  _Bool x, expr, d, e;
#endif

  #pragma omp atomic compare
  x = expr < x ? expr : x; // MIN

  #pragma omp atomic compare
  x = x == e ? d : x;

  #pragma omp atomic compare
  if (x < expr) { x = expr; } // MAX
}

// CHK-C-LABEL: @test_long_long(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[X:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[D:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[E:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[TMP:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP5:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP7:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP10:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP16:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP18:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP21:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[TMP0:%.*]] = load i64, ptr [[EXPR]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD]], ptr [[TMP]], align 8
// CHK-C-NEXT:    [[CMP:%.*]] = icmp sgt i64 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-C-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL]], ptr [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP1:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP1]], ptr [[TMP]], align 8
// CHK-C-NEXT:    store i64 [[TMP0]], ptr [[ATOMIC_TEMP]], align 8
// CHK-C-NEXT:    [[TMP2:%.*]] = load i64, ptr [[ATOMIC_TEMP]], align 8
// CHK-C-NEXT:    [[TMP3:%.*]] = cmpxchg ptr [[X]], i64 [[TMP1]], i64 [[TMP2]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP4]] = extractvalue { i64, i1 } [[TMP3]], 0
// CHK-C-NEXT:    [[TMP5:%.*]] = extractvalue { i64, i1 } [[TMP3]], 1
// CHK-C-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    [[CMP2:%.*]] = icmp sgt i64 [[TMP4]], [[TMP0]]
// CHK-C-NEXT:    [[FROMBOOL3:%.*]] = zext i1 [[CMP2]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL3]], ptr [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP2]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP6:%.*]] = load i64, ptr [[TMP]], align 8
// CHK-C-NEXT:    [[TMP7:%.*]] = load i8, ptr [[ATMP1]], align 1
// CHK-C-NEXT:    [[TMP8:%.*]] = load i64, ptr [[D]], align 8
// CHK-C-NEXT:    [[TMP9:%.*]] = load i64, ptr [[E]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD4:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD4]], ptr [[ATMP5]], align 8
// CHK-C-NEXT:    [[CMP6:%.*]] = icmp eq i64 [[ATOMIC_LOAD4]], [[TMP9]]
// CHK-C-NEXT:    [[FROMBOOL8:%.*]] = zext i1 [[CMP6]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL8]], ptr [[ATMP7]], align 1
// CHK-C-NEXT:    br i1 [[CMP6]], label [[ATOMIC_CONT9:%.*]], label [[ATOMIC_EXIT14:%.*]]
// CHK-C:       atomic_cont9:
// CHK-C-NEXT:    [[TMP10:%.*]] = phi i64 [ [[ATOMIC_LOAD4]], [[ATOMIC_EXIT]] ], [ [[TMP13:%.*]], [[ATOMIC_CMP11:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP10]], ptr [[ATMP5]], align 8
// CHK-C-NEXT:    store i64 [[TMP8]], ptr [[ATOMIC_TEMP10]], align 8
// CHK-C-NEXT:    [[TMP11:%.*]] = load i64, ptr [[ATOMIC_TEMP10]], align 8
// CHK-C-NEXT:    [[TMP12:%.*]] = cmpxchg ptr [[X]], i64 [[TMP10]], i64 [[TMP11]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP13]] = extractvalue { i64, i1 } [[TMP12]], 0
// CHK-C-NEXT:    [[TMP14:%.*]] = extractvalue { i64, i1 } [[TMP12]], 1
// CHK-C-NEXT:    br i1 [[TMP14]], label [[ATOMIC_EXIT14]], label [[ATOMIC_CMP11]]
// CHK-C:       atomic_cmp11:
// CHK-C-NEXT:    [[CMP12:%.*]] = icmp eq i64 [[TMP13]], [[TMP9]]
// CHK-C-NEXT:    [[FROMBOOL13:%.*]] = zext i1 [[CMP12]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL13]], ptr [[ATMP7]], align 1
// CHK-C-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT9]], label [[ATOMIC_EXIT14]]
// CHK-C:       atomic_exit14:
// CHK-C-NEXT:    [[TMP15:%.*]] = load i64, ptr [[ATMP5]], align 8
// CHK-C-NEXT:    [[TMP16:%.*]] = load i8, ptr [[ATMP7]], align 1
// CHK-C-NEXT:    [[TMP17:%.*]] = load i64, ptr [[EXPR]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD15:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD15]], ptr [[ATMP16]], align 8
// CHK-C-NEXT:    [[CMP17:%.*]] = icmp slt i64 [[ATOMIC_LOAD15]], [[TMP17]]
// CHK-C-NEXT:    [[FROMBOOL19:%.*]] = zext i1 [[CMP17]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL19]], ptr [[ATMP18]], align 1
// CHK-C-NEXT:    br i1 [[CMP17]], label [[ATOMIC_CONT20:%.*]], label [[ATOMIC_EXIT25:%.*]]
// CHK-C:       atomic_cont20:
// CHK-C-NEXT:    [[TMP18:%.*]] = phi i64 [ [[ATOMIC_LOAD15]], [[ATOMIC_EXIT14]] ], [ [[TMP21:%.*]], [[ATOMIC_CMP22:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP18]], ptr [[ATMP16]], align 8
// CHK-C-NEXT:    store i64 [[TMP17]], ptr [[ATOMIC_TEMP21]], align 8
// CHK-C-NEXT:    [[TMP19:%.*]] = load i64, ptr [[ATOMIC_TEMP21]], align 8
// CHK-C-NEXT:    [[TMP20:%.*]] = cmpxchg ptr [[X]], i64 [[TMP18]], i64 [[TMP19]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP21]] = extractvalue { i64, i1 } [[TMP20]], 0
// CHK-C-NEXT:    [[TMP22:%.*]] = extractvalue { i64, i1 } [[TMP20]], 1
// CHK-C-NEXT:    br i1 [[TMP22]], label [[ATOMIC_EXIT25]], label [[ATOMIC_CMP22]]
// CHK-C:       atomic_cmp22:
// CHK-C-NEXT:    [[CMP23:%.*]] = icmp slt i64 [[TMP21]], [[TMP17]]
// CHK-C-NEXT:    [[FROMBOOL24:%.*]] = zext i1 [[CMP23]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL24]], ptr [[ATMP18]], align 1
// CHK-C-NEXT:    br i1 [[CMP23]], label [[ATOMIC_CONT20]], label [[ATOMIC_EXIT25]]
// CHK-C:       atomic_exit25:
// CHK-C-NEXT:    [[TMP23:%.*]] = load i64, ptr [[ATMP16]], align 8
// CHK-C-NEXT:    [[TMP24:%.*]] = load i8, ptr [[ATMP18]], align 1
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z14test_long_longv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[X:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP5:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP7:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP10:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP16:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP18:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP21:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i64, ptr [[EXPR]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD]], ptr [[TMP]], align 8
// CHK-CXX-NEXT:    [[CMP:%.*]] = icmp sgt i64 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-CXX-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL]], ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP1:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP1]], ptr [[TMP]], align 8
// CHK-CXX-NEXT:    store i64 [[TMP0]], ptr [[ATOMIC_TEMP]], align 8
// CHK-CXX-NEXT:    [[TMP2:%.*]] = load i64, ptr [[ATOMIC_TEMP]], align 8
// CHK-CXX-NEXT:    [[TMP3:%.*]] = cmpxchg ptr [[X]], i64 [[TMP1]], i64 [[TMP2]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP4]] = extractvalue { i64, i1 } [[TMP3]], 0
// CHK-CXX-NEXT:    [[TMP5:%.*]] = extractvalue { i64, i1 } [[TMP3]], 1
// CHK-CXX-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    [[CMP2:%.*]] = icmp sgt i64 [[TMP4]], [[TMP0]]
// CHK-CXX-NEXT:    [[FROMBOOL3:%.*]] = zext i1 [[CMP2]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL3]], ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP2]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP6:%.*]] = load i64, ptr [[TMP]], align 8
// CHK-CXX-NEXT:    [[TMP7:%.*]] = load i8, ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    [[TMP8:%.*]] = load i64, ptr [[D]], align 8
// CHK-CXX-NEXT:    [[TMP9:%.*]] = load i64, ptr [[E]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD4:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD4]], ptr [[ATMP5]], align 8
// CHK-CXX-NEXT:    [[CMP6:%.*]] = icmp eq i64 [[ATOMIC_LOAD4]], [[TMP9]]
// CHK-CXX-NEXT:    [[FROMBOOL8:%.*]] = zext i1 [[CMP6]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL8]], ptr [[ATMP7]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP6]], label [[ATOMIC_CONT9:%.*]], label [[ATOMIC_EXIT14:%.*]]
// CHK-CXX:       atomic_cont9:
// CHK-CXX-NEXT:    [[TMP10:%.*]] = phi i64 [ [[ATOMIC_LOAD4]], [[ATOMIC_EXIT]] ], [ [[TMP13:%.*]], [[ATOMIC_CMP11:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP10]], ptr [[ATMP5]], align 8
// CHK-CXX-NEXT:    store i64 [[TMP8]], ptr [[ATOMIC_TEMP10]], align 8
// CHK-CXX-NEXT:    [[TMP11:%.*]] = load i64, ptr [[ATOMIC_TEMP10]], align 8
// CHK-CXX-NEXT:    [[TMP12:%.*]] = cmpxchg ptr [[X]], i64 [[TMP10]], i64 [[TMP11]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP13]] = extractvalue { i64, i1 } [[TMP12]], 0
// CHK-CXX-NEXT:    [[TMP14:%.*]] = extractvalue { i64, i1 } [[TMP12]], 1
// CHK-CXX-NEXT:    br i1 [[TMP14]], label [[ATOMIC_EXIT14]], label [[ATOMIC_CMP11]]
// CHK-CXX:       atomic_cmp11:
// CHK-CXX-NEXT:    [[CMP12:%.*]] = icmp eq i64 [[TMP13]], [[TMP9]]
// CHK-CXX-NEXT:    [[FROMBOOL13:%.*]] = zext i1 [[CMP12]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL13]], ptr [[ATMP7]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT9]], label [[ATOMIC_EXIT14]]
// CHK-CXX:       atomic_exit14:
// CHK-CXX-NEXT:    [[TMP15:%.*]] = load i64, ptr [[ATMP5]], align 8
// CHK-CXX-NEXT:    [[TMP16:%.*]] = load i8, ptr [[ATMP7]], align 1
// CHK-CXX-NEXT:    [[TMP17:%.*]] = load i64, ptr [[EXPR]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD15:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD15]], ptr [[ATMP16]], align 8
// CHK-CXX-NEXT:    [[CMP17:%.*]] = icmp slt i64 [[ATOMIC_LOAD15]], [[TMP17]]
// CHK-CXX-NEXT:    [[FROMBOOL19:%.*]] = zext i1 [[CMP17]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL19]], ptr [[ATMP18]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP17]], label [[ATOMIC_CONT20:%.*]], label [[ATOMIC_EXIT25:%.*]]
// CHK-CXX:       atomic_cont20:
// CHK-CXX-NEXT:    [[TMP18:%.*]] = phi i64 [ [[ATOMIC_LOAD15]], [[ATOMIC_EXIT14]] ], [ [[TMP21:%.*]], [[ATOMIC_CMP22:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP18]], ptr [[ATMP16]], align 8
// CHK-CXX-NEXT:    store i64 [[TMP17]], ptr [[ATOMIC_TEMP21]], align 8
// CHK-CXX-NEXT:    [[TMP19:%.*]] = load i64, ptr [[ATOMIC_TEMP21]], align 8
// CHK-CXX-NEXT:    [[TMP20:%.*]] = cmpxchg ptr [[X]], i64 [[TMP18]], i64 [[TMP19]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP21]] = extractvalue { i64, i1 } [[TMP20]], 0
// CHK-CXX-NEXT:    [[TMP22:%.*]] = extractvalue { i64, i1 } [[TMP20]], 1
// CHK-CXX-NEXT:    br i1 [[TMP22]], label [[ATOMIC_EXIT25]], label [[ATOMIC_CMP22]]
// CHK-CXX:       atomic_cmp22:
// CHK-CXX-NEXT:    [[CMP23:%.*]] = icmp slt i64 [[TMP21]], [[TMP17]]
// CHK-CXX-NEXT:    [[FROMBOOL24:%.*]] = zext i1 [[CMP23]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL24]], ptr [[ATMP18]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP23]], label [[ATOMIC_CONT20]], label [[ATOMIC_EXIT25]]
// CHK-CXX:       atomic_exit25:
// CHK-CXX-NEXT:    [[TMP23:%.*]] = load i64, ptr [[ATMP16]], align 8
// CHK-CXX-NEXT:    [[TMP24:%.*]] = load i8, ptr [[ATMP18]], align 1
// CHK-CXX-NEXT:    ret void
//
void test_long_long() {
  long long x, expr, d, e;

  #pragma omp atomic compare
  x = expr < x ? expr : x; // MIN

  #pragma omp atomic compare
  x = x == e ? d : x;

  #pragma omp atomic compare
  if (x < expr) { x = expr; } // MAX
}

#ifdef LIBCALLS
void test_Complex_float()
{
  _Complex float x, expr, d, e;

  #pragma omp atomic compare
  x = x == e ? d : x;
}

void test_long_double() {
  long double x, expr, d, e;

  #pragma omp atomic compare
  x = expr < x ? expr : x; // MIN

  #pragma omp atomic compare
  x = x == e ? d : x;

  #pragma omp atomic compare
  if (x < expr) { x = expr; } // MAX
}

void test_vec() {
  typedef int int4 __attribute__((__vector_size__(16)));
  int4 x;
  int expr, d, e;

  #pragma omp atomic compare
  x[1] = expr < x[1] ? expr : x[1]; // MIN

  #pragma omp atomic compare
  x[1] = x[1] == e ? d : x[1];

  #pragma omp atomic compare
  if (x[1] < expr) { x[1] = expr; } // MAX
}
#endif


struct BitFields {
  int : 32;
  int a : 31;
} bfx;

struct BitFields_packed {
  int : 32;
  int a : 31;
} __attribute__ ((__packed__)) bfx_packed;

struct BitFields2 {
  int : 31;
  int a : 1;
} bfx2;

struct BitFields2_packed {
  int : 31;
  int a : 1;
} __attribute__ ((__packed__)) bfx2_packed;

struct BitFields3 {
  int : 11;
  int a : 14;
} bfx3;

struct BitFields3_packed {
  int : 11;
  int a : 14;
} __attribute__ ((__packed__)) bfx3_packed;

struct BitFields4 {
  short : 16;
  int a: 1;
  long b : 7;
} bfx4;

struct BitFields4_packed {
  short : 16;
  int a: 1;
  long b : 7;
} __attribute__ ((__packed__)) bfx4_packed;

// CHK-C-LABEL: @test_bitfield(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[TMP:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP2:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP6:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP8:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP15:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP16:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP21:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP24:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP28:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP34:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP42:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP43:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP48:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP51:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP55:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP61:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP69:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP70:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP74:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP77:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP80:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP87:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP94:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP95:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP99:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP102:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP105:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP112:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP119:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP120:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP124:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP127:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP130:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP137:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP144:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP145:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP149:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP152:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP156:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP163:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP171:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP172:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP177:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP180:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP184:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP191:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP199:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP200:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP205:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP208:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP212:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP219:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP227:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP228:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP233:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP236:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP240:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP247:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP255:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP256:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP261:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP264:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP268:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP275:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP283:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP284:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP289:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP292:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP296:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP303:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP311:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP312:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP318:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP321:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP326:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP333:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP342:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP343:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP349:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP352:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP357:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP364:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP373:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP374:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP380:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP383:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP388:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP395:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP404:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP405:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP410:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP413:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP417:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP424:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP434:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP435:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP440:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP443:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP447:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP454:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP463:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP464:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP469:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP472:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP476:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP483:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP491:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP492:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP498:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP501:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP506:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP512:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP521:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP522:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP528:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP531:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP536:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP542:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP551:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP552:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP558:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP561:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP566:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP572:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[TMP0:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i32, ptr getelementptr (i8, ptr @bfx, i64 4) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD]], ptr [[ATOMIC_TEMP]], align 4
// CHK-C-NEXT:    [[BF_LOAD:%.*]] = load i32, ptr [[ATOMIC_TEMP]], align 4
// CHK-C-NEXT:    [[BF_SHL:%.*]] = shl i32 [[BF_LOAD]], 1
// CHK-C-NEXT:    [[BF_ASHR:%.*]] = ashr i32 [[BF_SHL]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR]], ptr [[TMP]], align 4
// CHK-C-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[BF_ASHR]], [[TMP0]]
// CHK-C-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL]], ptr [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP1:%.*]] = phi i32 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP1]], ptr [[ATOMIC_TEMP2]], align 4
// CHK-C-NEXT:    [[BF_LOAD3:%.*]] = load i32, ptr [[ATOMIC_TEMP2]], align 4
// CHK-C-NEXT:    [[BF_SHL4:%.*]] = shl i32 [[BF_LOAD3]], 1
// CHK-C-NEXT:    [[BF_ASHR5:%.*]] = ashr i32 [[BF_SHL4]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR5]], ptr [[TMP]], align 4
// CHK-C-NEXT:    store i32 [[TMP1]], ptr [[ATOMIC_TEMP6]], align 4
// CHK-C-NEXT:    [[BF_LOAD7:%.*]] = load i32, ptr [[ATOMIC_TEMP6]], align 4
// CHK-C-NEXT:    [[BF_VALUE:%.*]] = and i32 [[TMP0]], 2147483647
// CHK-C-NEXT:    [[BF_CLEAR:%.*]] = and i32 [[BF_LOAD7]], -2147483648
// CHK-C-NEXT:    [[BF_SET:%.*]] = or i32 [[BF_CLEAR]], [[BF_VALUE]]
// CHK-C-NEXT:    store i32 [[BF_SET]], ptr [[ATOMIC_TEMP6]], align 4
// CHK-C-NEXT:    [[TMP2:%.*]] = load i32, ptr [[ATOMIC_TEMP6]], align 4
// CHK-C-NEXT:    [[TMP3:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx, i64 4), i32 [[TMP1]], i32 [[TMP2]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP4]] = extractvalue { i32, i1 } [[TMP3]], 0
// CHK-C-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i1 } [[TMP3]], 1
// CHK-C-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    store i32 [[TMP4]], ptr [[ATOMIC_TEMP8]], align 4
// CHK-C-NEXT:    [[BF_LOAD9:%.*]] = load i32, ptr [[ATOMIC_TEMP8]], align 4
// CHK-C-NEXT:    [[BF_SHL10:%.*]] = shl i32 [[BF_LOAD9]], 1
// CHK-C-NEXT:    [[BF_ASHR11:%.*]] = ashr i32 [[BF_SHL10]], 1
// CHK-C-NEXT:    [[CMP12:%.*]] = icmp sgt i32 [[BF_ASHR11]], [[TMP0]]
// CHK-C-NEXT:    [[FROMBOOL13:%.*]] = zext i1 [[CMP12]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL13]], ptr [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP]], align 4
// CHK-C-NEXT:    [[TMP7:%.*]] = load i8, ptr [[ATMP1]], align 1
// CHK-C-NEXT:    [[TMP8:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[TMP9:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD14:%.*]] = load atomic i32, ptr getelementptr (i8, ptr @bfx, i64 4) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD14]], ptr [[ATOMIC_TEMP16]], align 4
// CHK-C-NEXT:    [[BF_LOAD17:%.*]] = load i32, ptr [[ATOMIC_TEMP16]], align 4
// CHK-C-NEXT:    [[BF_SHL18:%.*]] = shl i32 [[BF_LOAD17]], 1
// CHK-C-NEXT:    [[BF_ASHR19:%.*]] = ashr i32 [[BF_SHL18]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR19]], ptr [[ATMP15]], align 4
// CHK-C-NEXT:    [[CMP20:%.*]] = icmp eq i32 [[BF_ASHR19]], [[TMP9]]
// CHK-C-NEXT:    [[FROMBOOL22:%.*]] = zext i1 [[CMP20]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL22]], ptr [[ATMP21]], align 1
// CHK-C-NEXT:    br i1 [[CMP20]], label [[ATOMIC_CONT23:%.*]], label [[ATOMIC_EXIT40:%.*]]
// CHK-C:       atomic_cont23:
// CHK-C-NEXT:    [[TMP10:%.*]] = phi i32 [ [[ATOMIC_LOAD14]], [[ATOMIC_EXIT]] ], [ [[TMP13:%.*]], [[ATOMIC_CMP33:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP10]], ptr [[ATOMIC_TEMP24]], align 4
// CHK-C-NEXT:    [[BF_LOAD25:%.*]] = load i32, ptr [[ATOMIC_TEMP24]], align 4
// CHK-C-NEXT:    [[BF_SHL26:%.*]] = shl i32 [[BF_LOAD25]], 1
// CHK-C-NEXT:    [[BF_ASHR27:%.*]] = ashr i32 [[BF_SHL26]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR27]], ptr [[ATMP15]], align 4
// CHK-C-NEXT:    store i32 [[TMP10]], ptr [[ATOMIC_TEMP28]], align 4
// CHK-C-NEXT:    [[BF_LOAD29:%.*]] = load i32, ptr [[ATOMIC_TEMP28]], align 4
// CHK-C-NEXT:    [[BF_VALUE30:%.*]] = and i32 [[TMP8]], 2147483647
// CHK-C-NEXT:    [[BF_CLEAR31:%.*]] = and i32 [[BF_LOAD29]], -2147483648
// CHK-C-NEXT:    [[BF_SET32:%.*]] = or i32 [[BF_CLEAR31]], [[BF_VALUE30]]
// CHK-C-NEXT:    store i32 [[BF_SET32]], ptr [[ATOMIC_TEMP28]], align 4
// CHK-C-NEXT:    [[TMP11:%.*]] = load i32, ptr [[ATOMIC_TEMP28]], align 4
// CHK-C-NEXT:    [[TMP12:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx, i64 4), i32 [[TMP10]], i32 [[TMP11]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP13]] = extractvalue { i32, i1 } [[TMP12]], 0
// CHK-C-NEXT:    [[TMP14:%.*]] = extractvalue { i32, i1 } [[TMP12]], 1
// CHK-C-NEXT:    br i1 [[TMP14]], label [[ATOMIC_EXIT40]], label [[ATOMIC_CMP33]]
// CHK-C:       atomic_cmp33:
// CHK-C-NEXT:    store i32 [[TMP13]], ptr [[ATOMIC_TEMP34]], align 4
// CHK-C-NEXT:    [[BF_LOAD35:%.*]] = load i32, ptr [[ATOMIC_TEMP34]], align 4
// CHK-C-NEXT:    [[BF_SHL36:%.*]] = shl i32 [[BF_LOAD35]], 1
// CHK-C-NEXT:    [[BF_ASHR37:%.*]] = ashr i32 [[BF_SHL36]], 1
// CHK-C-NEXT:    [[CMP38:%.*]] = icmp eq i32 [[BF_ASHR37]], [[TMP9]]
// CHK-C-NEXT:    [[FROMBOOL39:%.*]] = zext i1 [[CMP38]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL39]], ptr [[ATMP21]], align 1
// CHK-C-NEXT:    br i1 [[CMP38]], label [[ATOMIC_CONT23]], label [[ATOMIC_EXIT40]]
// CHK-C:       atomic_exit40:
// CHK-C-NEXT:    [[TMP15:%.*]] = load i32, ptr [[ATMP15]], align 4
// CHK-C-NEXT:    [[TMP16:%.*]] = load i8, ptr [[ATMP21]], align 1
// CHK-C-NEXT:    [[TMP17:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD41:%.*]] = load atomic i32, ptr getelementptr (i8, ptr @bfx, i64 4) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD41]], ptr [[ATOMIC_TEMP43]], align 4
// CHK-C-NEXT:    [[BF_LOAD44:%.*]] = load i32, ptr [[ATOMIC_TEMP43]], align 4
// CHK-C-NEXT:    [[BF_SHL45:%.*]] = shl i32 [[BF_LOAD44]], 1
// CHK-C-NEXT:    [[BF_ASHR46:%.*]] = ashr i32 [[BF_SHL45]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR46]], ptr [[ATMP42]], align 4
// CHK-C-NEXT:    [[CMP47:%.*]] = icmp slt i32 [[BF_ASHR46]], [[TMP17]]
// CHK-C-NEXT:    [[FROMBOOL49:%.*]] = zext i1 [[CMP47]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL49]], ptr [[ATMP48]], align 1
// CHK-C-NEXT:    br i1 [[CMP47]], label [[ATOMIC_CONT50:%.*]], label [[ATOMIC_EXIT67:%.*]]
// CHK-C:       atomic_cont50:
// CHK-C-NEXT:    [[TMP18:%.*]] = phi i32 [ [[ATOMIC_LOAD41]], [[ATOMIC_EXIT40]] ], [ [[TMP21:%.*]], [[ATOMIC_CMP60:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP18]], ptr [[ATOMIC_TEMP51]], align 4
// CHK-C-NEXT:    [[BF_LOAD52:%.*]] = load i32, ptr [[ATOMIC_TEMP51]], align 4
// CHK-C-NEXT:    [[BF_SHL53:%.*]] = shl i32 [[BF_LOAD52]], 1
// CHK-C-NEXT:    [[BF_ASHR54:%.*]] = ashr i32 [[BF_SHL53]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR54]], ptr [[ATMP42]], align 4
// CHK-C-NEXT:    store i32 [[TMP18]], ptr [[ATOMIC_TEMP55]], align 4
// CHK-C-NEXT:    [[BF_LOAD56:%.*]] = load i32, ptr [[ATOMIC_TEMP55]], align 4
// CHK-C-NEXT:    [[BF_VALUE57:%.*]] = and i32 [[TMP17]], 2147483647
// CHK-C-NEXT:    [[BF_CLEAR58:%.*]] = and i32 [[BF_LOAD56]], -2147483648
// CHK-C-NEXT:    [[BF_SET59:%.*]] = or i32 [[BF_CLEAR58]], [[BF_VALUE57]]
// CHK-C-NEXT:    store i32 [[BF_SET59]], ptr [[ATOMIC_TEMP55]], align 4
// CHK-C-NEXT:    [[TMP19:%.*]] = load i32, ptr [[ATOMIC_TEMP55]], align 4
// CHK-C-NEXT:    [[TMP20:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx, i64 4), i32 [[TMP18]], i32 [[TMP19]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP21]] = extractvalue { i32, i1 } [[TMP20]], 0
// CHK-C-NEXT:    [[TMP22:%.*]] = extractvalue { i32, i1 } [[TMP20]], 1
// CHK-C-NEXT:    br i1 [[TMP22]], label [[ATOMIC_EXIT67]], label [[ATOMIC_CMP60]]
// CHK-C:       atomic_cmp60:
// CHK-C-NEXT:    store i32 [[TMP21]], ptr [[ATOMIC_TEMP61]], align 4
// CHK-C-NEXT:    [[BF_LOAD62:%.*]] = load i32, ptr [[ATOMIC_TEMP61]], align 4
// CHK-C-NEXT:    [[BF_SHL63:%.*]] = shl i32 [[BF_LOAD62]], 1
// CHK-C-NEXT:    [[BF_ASHR64:%.*]] = ashr i32 [[BF_SHL63]], 1
// CHK-C-NEXT:    [[CMP65:%.*]] = icmp slt i32 [[BF_ASHR64]], [[TMP17]]
// CHK-C-NEXT:    [[FROMBOOL66:%.*]] = zext i1 [[CMP65]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL66]], ptr [[ATMP48]], align 1
// CHK-C-NEXT:    br i1 [[CMP65]], label [[ATOMIC_CONT50]], label [[ATOMIC_EXIT67]]
// CHK-C:       atomic_exit67:
// CHK-C-NEXT:    [[TMP23:%.*]] = load i32, ptr [[ATMP42]], align 4
// CHK-C-NEXT:    [[TMP24:%.*]] = load i8, ptr [[ATMP48]], align 1
// CHK-C-NEXT:    [[TMP25:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD68:%.*]] = load atomic i32, ptr @bfx2 monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD68]], ptr [[ATOMIC_TEMP70]], align 4
// CHK-C-NEXT:    [[BF_LOAD71:%.*]] = load i32, ptr [[ATOMIC_TEMP70]], align 4
// CHK-C-NEXT:    [[BF_ASHR72:%.*]] = ashr i32 [[BF_LOAD71]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR72]], ptr [[ATMP69]], align 4
// CHK-C-NEXT:    [[CMP73:%.*]] = icmp sgt i32 [[BF_ASHR72]], [[TMP25]]
// CHK-C-NEXT:    [[FROMBOOL75:%.*]] = zext i1 [[CMP73]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL75]], ptr [[ATMP74]], align 1
// CHK-C-NEXT:    br i1 [[CMP73]], label [[ATOMIC_CONT76:%.*]], label [[ATOMIC_EXIT92:%.*]]
// CHK-C:       atomic_cont76:
// CHK-C-NEXT:    [[TMP26:%.*]] = phi i32 [ [[ATOMIC_LOAD68]], [[ATOMIC_EXIT67]] ], [ [[TMP29:%.*]], [[ATOMIC_CMP86:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP26]], ptr [[ATOMIC_TEMP77]], align 4
// CHK-C-NEXT:    [[BF_LOAD78:%.*]] = load i32, ptr [[ATOMIC_TEMP77]], align 4
// CHK-C-NEXT:    [[BF_ASHR79:%.*]] = ashr i32 [[BF_LOAD78]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR79]], ptr [[ATMP69]], align 4
// CHK-C-NEXT:    store i32 [[TMP26]], ptr [[ATOMIC_TEMP80]], align 4
// CHK-C-NEXT:    [[BF_LOAD81:%.*]] = load i32, ptr [[ATOMIC_TEMP80]], align 4
// CHK-C-NEXT:    [[BF_VALUE82:%.*]] = and i32 [[TMP25]], 1
// CHK-C-NEXT:    [[BF_SHL83:%.*]] = shl i32 [[BF_VALUE82]], 31
// CHK-C-NEXT:    [[BF_CLEAR84:%.*]] = and i32 [[BF_LOAD81]], 2147483647
// CHK-C-NEXT:    [[BF_SET85:%.*]] = or i32 [[BF_CLEAR84]], [[BF_SHL83]]
// CHK-C-NEXT:    store i32 [[BF_SET85]], ptr [[ATOMIC_TEMP80]], align 4
// CHK-C-NEXT:    [[TMP27:%.*]] = load i32, ptr [[ATOMIC_TEMP80]], align 4
// CHK-C-NEXT:    [[TMP28:%.*]] = cmpxchg ptr @bfx2, i32 [[TMP26]], i32 [[TMP27]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP29]] = extractvalue { i32, i1 } [[TMP28]], 0
// CHK-C-NEXT:    [[TMP30:%.*]] = extractvalue { i32, i1 } [[TMP28]], 1
// CHK-C-NEXT:    br i1 [[TMP30]], label [[ATOMIC_EXIT92]], label [[ATOMIC_CMP86]]
// CHK-C:       atomic_cmp86:
// CHK-C-NEXT:    store i32 [[TMP29]], ptr [[ATOMIC_TEMP87]], align 4
// CHK-C-NEXT:    [[BF_LOAD88:%.*]] = load i32, ptr [[ATOMIC_TEMP87]], align 4
// CHK-C-NEXT:    [[BF_ASHR89:%.*]] = ashr i32 [[BF_LOAD88]], 31
// CHK-C-NEXT:    [[CMP90:%.*]] = icmp sgt i32 [[BF_ASHR89]], [[TMP25]]
// CHK-C-NEXT:    [[FROMBOOL91:%.*]] = zext i1 [[CMP90]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL91]], ptr [[ATMP74]], align 1
// CHK-C-NEXT:    br i1 [[CMP90]], label [[ATOMIC_CONT76]], label [[ATOMIC_EXIT92]]
// CHK-C:       atomic_exit92:
// CHK-C-NEXT:    [[TMP31:%.*]] = load i32, ptr [[ATMP69]], align 4
// CHK-C-NEXT:    [[TMP32:%.*]] = load i8, ptr [[ATMP74]], align 1
// CHK-C-NEXT:    [[TMP33:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[TMP34:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD93:%.*]] = load atomic i32, ptr @bfx2 monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD93]], ptr [[ATOMIC_TEMP95]], align 4
// CHK-C-NEXT:    [[BF_LOAD96:%.*]] = load i32, ptr [[ATOMIC_TEMP95]], align 4
// CHK-C-NEXT:    [[BF_ASHR97:%.*]] = ashr i32 [[BF_LOAD96]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR97]], ptr [[ATMP94]], align 4
// CHK-C-NEXT:    [[CMP98:%.*]] = icmp eq i32 [[BF_ASHR97]], [[TMP34]]
// CHK-C-NEXT:    [[FROMBOOL100:%.*]] = zext i1 [[CMP98]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL100]], ptr [[ATMP99]], align 1
// CHK-C-NEXT:    br i1 [[CMP98]], label [[ATOMIC_CONT101:%.*]], label [[ATOMIC_EXIT117:%.*]]
// CHK-C:       atomic_cont101:
// CHK-C-NEXT:    [[TMP35:%.*]] = phi i32 [ [[ATOMIC_LOAD93]], [[ATOMIC_EXIT92]] ], [ [[TMP38:%.*]], [[ATOMIC_CMP111:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP35]], ptr [[ATOMIC_TEMP102]], align 4
// CHK-C-NEXT:    [[BF_LOAD103:%.*]] = load i32, ptr [[ATOMIC_TEMP102]], align 4
// CHK-C-NEXT:    [[BF_ASHR104:%.*]] = ashr i32 [[BF_LOAD103]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR104]], ptr [[ATMP94]], align 4
// CHK-C-NEXT:    store i32 [[TMP35]], ptr [[ATOMIC_TEMP105]], align 4
// CHK-C-NEXT:    [[BF_LOAD106:%.*]] = load i32, ptr [[ATOMIC_TEMP105]], align 4
// CHK-C-NEXT:    [[BF_VALUE107:%.*]] = and i32 [[TMP33]], 1
// CHK-C-NEXT:    [[BF_SHL108:%.*]] = shl i32 [[BF_VALUE107]], 31
// CHK-C-NEXT:    [[BF_CLEAR109:%.*]] = and i32 [[BF_LOAD106]], 2147483647
// CHK-C-NEXT:    [[BF_SET110:%.*]] = or i32 [[BF_CLEAR109]], [[BF_SHL108]]
// CHK-C-NEXT:    store i32 [[BF_SET110]], ptr [[ATOMIC_TEMP105]], align 4
// CHK-C-NEXT:    [[TMP36:%.*]] = load i32, ptr [[ATOMIC_TEMP105]], align 4
// CHK-C-NEXT:    [[TMP37:%.*]] = cmpxchg ptr @bfx2, i32 [[TMP35]], i32 [[TMP36]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP38]] = extractvalue { i32, i1 } [[TMP37]], 0
// CHK-C-NEXT:    [[TMP39:%.*]] = extractvalue { i32, i1 } [[TMP37]], 1
// CHK-C-NEXT:    br i1 [[TMP39]], label [[ATOMIC_EXIT117]], label [[ATOMIC_CMP111]]
// CHK-C:       atomic_cmp111:
// CHK-C-NEXT:    store i32 [[TMP38]], ptr [[ATOMIC_TEMP112]], align 4
// CHK-C-NEXT:    [[BF_LOAD113:%.*]] = load i32, ptr [[ATOMIC_TEMP112]], align 4
// CHK-C-NEXT:    [[BF_ASHR114:%.*]] = ashr i32 [[BF_LOAD113]], 31
// CHK-C-NEXT:    [[CMP115:%.*]] = icmp eq i32 [[BF_ASHR114]], [[TMP34]]
// CHK-C-NEXT:    [[FROMBOOL116:%.*]] = zext i1 [[CMP115]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL116]], ptr [[ATMP99]], align 1
// CHK-C-NEXT:    br i1 [[CMP115]], label [[ATOMIC_CONT101]], label [[ATOMIC_EXIT117]]
// CHK-C:       atomic_exit117:
// CHK-C-NEXT:    [[TMP40:%.*]] = load i32, ptr [[ATMP94]], align 4
// CHK-C-NEXT:    [[TMP41:%.*]] = load i8, ptr [[ATMP99]], align 1
// CHK-C-NEXT:    [[TMP42:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD118:%.*]] = load atomic i32, ptr @bfx2 monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD118]], ptr [[ATOMIC_TEMP120]], align 4
// CHK-C-NEXT:    [[BF_LOAD121:%.*]] = load i32, ptr [[ATOMIC_TEMP120]], align 4
// CHK-C-NEXT:    [[BF_ASHR122:%.*]] = ashr i32 [[BF_LOAD121]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR122]], ptr [[ATMP119]], align 4
// CHK-C-NEXT:    [[CMP123:%.*]] = icmp slt i32 [[BF_ASHR122]], [[TMP42]]
// CHK-C-NEXT:    [[FROMBOOL125:%.*]] = zext i1 [[CMP123]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL125]], ptr [[ATMP124]], align 1
// CHK-C-NEXT:    br i1 [[CMP123]], label [[ATOMIC_CONT126:%.*]], label [[ATOMIC_EXIT142:%.*]]
// CHK-C:       atomic_cont126:
// CHK-C-NEXT:    [[TMP43:%.*]] = phi i32 [ [[ATOMIC_LOAD118]], [[ATOMIC_EXIT117]] ], [ [[TMP46:%.*]], [[ATOMIC_CMP136:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP43]], ptr [[ATOMIC_TEMP127]], align 4
// CHK-C-NEXT:    [[BF_LOAD128:%.*]] = load i32, ptr [[ATOMIC_TEMP127]], align 4
// CHK-C-NEXT:    [[BF_ASHR129:%.*]] = ashr i32 [[BF_LOAD128]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR129]], ptr [[ATMP119]], align 4
// CHK-C-NEXT:    store i32 [[TMP43]], ptr [[ATOMIC_TEMP130]], align 4
// CHK-C-NEXT:    [[BF_LOAD131:%.*]] = load i32, ptr [[ATOMIC_TEMP130]], align 4
// CHK-C-NEXT:    [[BF_VALUE132:%.*]] = and i32 [[TMP42]], 1
// CHK-C-NEXT:    [[BF_SHL133:%.*]] = shl i32 [[BF_VALUE132]], 31
// CHK-C-NEXT:    [[BF_CLEAR134:%.*]] = and i32 [[BF_LOAD131]], 2147483647
// CHK-C-NEXT:    [[BF_SET135:%.*]] = or i32 [[BF_CLEAR134]], [[BF_SHL133]]
// CHK-C-NEXT:    store i32 [[BF_SET135]], ptr [[ATOMIC_TEMP130]], align 4
// CHK-C-NEXT:    [[TMP44:%.*]] = load i32, ptr [[ATOMIC_TEMP130]], align 4
// CHK-C-NEXT:    [[TMP45:%.*]] = cmpxchg ptr @bfx2, i32 [[TMP43]], i32 [[TMP44]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP46]] = extractvalue { i32, i1 } [[TMP45]], 0
// CHK-C-NEXT:    [[TMP47:%.*]] = extractvalue { i32, i1 } [[TMP45]], 1
// CHK-C-NEXT:    br i1 [[TMP47]], label [[ATOMIC_EXIT142]], label [[ATOMIC_CMP136]]
// CHK-C:       atomic_cmp136:
// CHK-C-NEXT:    store i32 [[TMP46]], ptr [[ATOMIC_TEMP137]], align 4
// CHK-C-NEXT:    [[BF_LOAD138:%.*]] = load i32, ptr [[ATOMIC_TEMP137]], align 4
// CHK-C-NEXT:    [[BF_ASHR139:%.*]] = ashr i32 [[BF_LOAD138]], 31
// CHK-C-NEXT:    [[CMP140:%.*]] = icmp slt i32 [[BF_ASHR139]], [[TMP42]]
// CHK-C-NEXT:    [[FROMBOOL141:%.*]] = zext i1 [[CMP140]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL141]], ptr [[ATMP124]], align 1
// CHK-C-NEXT:    br i1 [[CMP140]], label [[ATOMIC_CONT126]], label [[ATOMIC_EXIT142]]
// CHK-C:       atomic_exit142:
// CHK-C-NEXT:    [[TMP48:%.*]] = load i32, ptr [[ATMP119]], align 4
// CHK-C-NEXT:    [[TMP49:%.*]] = load i8, ptr [[ATMP124]], align 1
// CHK-C-NEXT:    [[TMP50:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD143:%.*]] = load atomic i8, ptr getelementptr (i8, ptr @bfx2_packed, i64 3) monotonic, align 1
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD143]], ptr [[ATOMIC_TEMP145]], align 1
// CHK-C-NEXT:    [[BF_LOAD146:%.*]] = load i8, ptr [[ATOMIC_TEMP145]], align 1
// CHK-C-NEXT:    [[BF_ASHR147:%.*]] = ashr i8 [[BF_LOAD146]], 7
// CHK-C-NEXT:    [[BF_CAST:%.*]] = sext i8 [[BF_ASHR147]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST]], ptr [[ATMP144]], align 4
// CHK-C-NEXT:    [[CMP148:%.*]] = icmp sgt i32 [[BF_CAST]], [[TMP50]]
// CHK-C-NEXT:    [[FROMBOOL150:%.*]] = zext i1 [[CMP148]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL150]], ptr [[ATMP149]], align 1
// CHK-C-NEXT:    br i1 [[CMP148]], label [[ATOMIC_CONT151:%.*]], label [[ATOMIC_EXIT169:%.*]]
// CHK-C:       atomic_cont151:
// CHK-C-NEXT:    [[TMP51:%.*]] = phi i8 [ [[ATOMIC_LOAD143]], [[ATOMIC_EXIT142]] ], [ [[TMP55:%.*]], [[ATOMIC_CMP162:%.*]] ]
// CHK-C-NEXT:    store i8 [[TMP51]], ptr [[ATOMIC_TEMP152]], align 1
// CHK-C-NEXT:    [[BF_LOAD153:%.*]] = load i8, ptr [[ATOMIC_TEMP152]], align 1
// CHK-C-NEXT:    [[BF_ASHR154:%.*]] = ashr i8 [[BF_LOAD153]], 7
// CHK-C-NEXT:    [[BF_CAST155:%.*]] = sext i8 [[BF_ASHR154]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST155]], ptr [[ATMP144]], align 4
// CHK-C-NEXT:    store i8 [[TMP51]], ptr [[ATOMIC_TEMP156]], align 1
// CHK-C-NEXT:    [[TMP52:%.*]] = trunc i32 [[TMP50]] to i8
// CHK-C-NEXT:    [[BF_LOAD157:%.*]] = load i8, ptr [[ATOMIC_TEMP156]], align 1
// CHK-C-NEXT:    [[BF_VALUE158:%.*]] = and i8 [[TMP52]], 1
// CHK-C-NEXT:    [[BF_SHL159:%.*]] = shl i8 [[BF_VALUE158]], 7
// CHK-C-NEXT:    [[BF_CLEAR160:%.*]] = and i8 [[BF_LOAD157]], 127
// CHK-C-NEXT:    [[BF_SET161:%.*]] = or i8 [[BF_CLEAR160]], [[BF_SHL159]]
// CHK-C-NEXT:    store i8 [[BF_SET161]], ptr [[ATOMIC_TEMP156]], align 1
// CHK-C-NEXT:    [[TMP53:%.*]] = load i8, ptr [[ATOMIC_TEMP156]], align 1
// CHK-C-NEXT:    [[TMP54:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx2_packed, i64 3), i8 [[TMP51]], i8 [[TMP53]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP55]] = extractvalue { i8, i1 } [[TMP54]], 0
// CHK-C-NEXT:    [[TMP56:%.*]] = extractvalue { i8, i1 } [[TMP54]], 1
// CHK-C-NEXT:    br i1 [[TMP56]], label [[ATOMIC_EXIT169]], label [[ATOMIC_CMP162]]
// CHK-C:       atomic_cmp162:
// CHK-C-NEXT:    store i8 [[TMP55]], ptr [[ATOMIC_TEMP163]], align 1
// CHK-C-NEXT:    [[BF_LOAD164:%.*]] = load i8, ptr [[ATOMIC_TEMP163]], align 1
// CHK-C-NEXT:    [[BF_ASHR165:%.*]] = ashr i8 [[BF_LOAD164]], 7
// CHK-C-NEXT:    [[BF_CAST166:%.*]] = sext i8 [[BF_ASHR165]] to i32
// CHK-C-NEXT:    [[CMP167:%.*]] = icmp sgt i32 [[BF_CAST166]], [[TMP50]]
// CHK-C-NEXT:    [[FROMBOOL168:%.*]] = zext i1 [[CMP167]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL168]], ptr [[ATMP149]], align 1
// CHK-C-NEXT:    br i1 [[CMP167]], label [[ATOMIC_CONT151]], label [[ATOMIC_EXIT169]]
// CHK-C:       atomic_exit169:
// CHK-C-NEXT:    [[TMP57:%.*]] = load i32, ptr [[ATMP144]], align 4
// CHK-C-NEXT:    [[TMP58:%.*]] = load i8, ptr [[ATMP149]], align 1
// CHK-C-NEXT:    [[TMP59:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[TMP60:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD170:%.*]] = load atomic i8, ptr getelementptr (i8, ptr @bfx2_packed, i64 3) monotonic, align 1
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD170]], ptr [[ATOMIC_TEMP172]], align 1
// CHK-C-NEXT:    [[BF_LOAD173:%.*]] = load i8, ptr [[ATOMIC_TEMP172]], align 1
// CHK-C-NEXT:    [[BF_ASHR174:%.*]] = ashr i8 [[BF_LOAD173]], 7
// CHK-C-NEXT:    [[BF_CAST175:%.*]] = sext i8 [[BF_ASHR174]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST175]], ptr [[ATMP171]], align 4
// CHK-C-NEXT:    [[CMP176:%.*]] = icmp eq i32 [[BF_CAST175]], [[TMP60]]
// CHK-C-NEXT:    [[FROMBOOL178:%.*]] = zext i1 [[CMP176]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL178]], ptr [[ATMP177]], align 1
// CHK-C-NEXT:    br i1 [[CMP176]], label [[ATOMIC_CONT179:%.*]], label [[ATOMIC_EXIT197:%.*]]
// CHK-C:       atomic_cont179:
// CHK-C-NEXT:    [[TMP61:%.*]] = phi i8 [ [[ATOMIC_LOAD170]], [[ATOMIC_EXIT169]] ], [ [[TMP65:%.*]], [[ATOMIC_CMP190:%.*]] ]
// CHK-C-NEXT:    store i8 [[TMP61]], ptr [[ATOMIC_TEMP180]], align 1
// CHK-C-NEXT:    [[BF_LOAD181:%.*]] = load i8, ptr [[ATOMIC_TEMP180]], align 1
// CHK-C-NEXT:    [[BF_ASHR182:%.*]] = ashr i8 [[BF_LOAD181]], 7
// CHK-C-NEXT:    [[BF_CAST183:%.*]] = sext i8 [[BF_ASHR182]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST183]], ptr [[ATMP171]], align 4
// CHK-C-NEXT:    store i8 [[TMP61]], ptr [[ATOMIC_TEMP184]], align 1
// CHK-C-NEXT:    [[TMP62:%.*]] = trunc i32 [[TMP59]] to i8
// CHK-C-NEXT:    [[BF_LOAD185:%.*]] = load i8, ptr [[ATOMIC_TEMP184]], align 1
// CHK-C-NEXT:    [[BF_VALUE186:%.*]] = and i8 [[TMP62]], 1
// CHK-C-NEXT:    [[BF_SHL187:%.*]] = shl i8 [[BF_VALUE186]], 7
// CHK-C-NEXT:    [[BF_CLEAR188:%.*]] = and i8 [[BF_LOAD185]], 127
// CHK-C-NEXT:    [[BF_SET189:%.*]] = or i8 [[BF_CLEAR188]], [[BF_SHL187]]
// CHK-C-NEXT:    store i8 [[BF_SET189]], ptr [[ATOMIC_TEMP184]], align 1
// CHK-C-NEXT:    [[TMP63:%.*]] = load i8, ptr [[ATOMIC_TEMP184]], align 1
// CHK-C-NEXT:    [[TMP64:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx2_packed, i64 3), i8 [[TMP61]], i8 [[TMP63]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP65]] = extractvalue { i8, i1 } [[TMP64]], 0
// CHK-C-NEXT:    [[TMP66:%.*]] = extractvalue { i8, i1 } [[TMP64]], 1
// CHK-C-NEXT:    br i1 [[TMP66]], label [[ATOMIC_EXIT197]], label [[ATOMIC_CMP190]]
// CHK-C:       atomic_cmp190:
// CHK-C-NEXT:    store i8 [[TMP65]], ptr [[ATOMIC_TEMP191]], align 1
// CHK-C-NEXT:    [[BF_LOAD192:%.*]] = load i8, ptr [[ATOMIC_TEMP191]], align 1
// CHK-C-NEXT:    [[BF_ASHR193:%.*]] = ashr i8 [[BF_LOAD192]], 7
// CHK-C-NEXT:    [[BF_CAST194:%.*]] = sext i8 [[BF_ASHR193]] to i32
// CHK-C-NEXT:    [[CMP195:%.*]] = icmp eq i32 [[BF_CAST194]], [[TMP60]]
// CHK-C-NEXT:    [[FROMBOOL196:%.*]] = zext i1 [[CMP195]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL196]], ptr [[ATMP177]], align 1
// CHK-C-NEXT:    br i1 [[CMP195]], label [[ATOMIC_CONT179]], label [[ATOMIC_EXIT197]]
// CHK-C:       atomic_exit197:
// CHK-C-NEXT:    [[TMP67:%.*]] = load i32, ptr [[ATMP171]], align 4
// CHK-C-NEXT:    [[TMP68:%.*]] = load i8, ptr [[ATMP177]], align 1
// CHK-C-NEXT:    [[TMP69:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD198:%.*]] = load atomic i8, ptr getelementptr (i8, ptr @bfx2_packed, i64 3) monotonic, align 1
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD198]], ptr [[ATOMIC_TEMP200]], align 1
// CHK-C-NEXT:    [[BF_LOAD201:%.*]] = load i8, ptr [[ATOMIC_TEMP200]], align 1
// CHK-C-NEXT:    [[BF_ASHR202:%.*]] = ashr i8 [[BF_LOAD201]], 7
// CHK-C-NEXT:    [[BF_CAST203:%.*]] = sext i8 [[BF_ASHR202]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST203]], ptr [[ATMP199]], align 4
// CHK-C-NEXT:    [[CMP204:%.*]] = icmp slt i32 [[BF_CAST203]], [[TMP69]]
// CHK-C-NEXT:    [[FROMBOOL206:%.*]] = zext i1 [[CMP204]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL206]], ptr [[ATMP205]], align 1
// CHK-C-NEXT:    br i1 [[CMP204]], label [[ATOMIC_CONT207:%.*]], label [[ATOMIC_EXIT225:%.*]]
// CHK-C:       atomic_cont207:
// CHK-C-NEXT:    [[TMP70:%.*]] = phi i8 [ [[ATOMIC_LOAD198]], [[ATOMIC_EXIT197]] ], [ [[TMP74:%.*]], [[ATOMIC_CMP218:%.*]] ]
// CHK-C-NEXT:    store i8 [[TMP70]], ptr [[ATOMIC_TEMP208]], align 1
// CHK-C-NEXT:    [[BF_LOAD209:%.*]] = load i8, ptr [[ATOMIC_TEMP208]], align 1
// CHK-C-NEXT:    [[BF_ASHR210:%.*]] = ashr i8 [[BF_LOAD209]], 7
// CHK-C-NEXT:    [[BF_CAST211:%.*]] = sext i8 [[BF_ASHR210]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST211]], ptr [[ATMP199]], align 4
// CHK-C-NEXT:    store i8 [[TMP70]], ptr [[ATOMIC_TEMP212]], align 1
// CHK-C-NEXT:    [[TMP71:%.*]] = trunc i32 [[TMP69]] to i8
// CHK-C-NEXT:    [[BF_LOAD213:%.*]] = load i8, ptr [[ATOMIC_TEMP212]], align 1
// CHK-C-NEXT:    [[BF_VALUE214:%.*]] = and i8 [[TMP71]], 1
// CHK-C-NEXT:    [[BF_SHL215:%.*]] = shl i8 [[BF_VALUE214]], 7
// CHK-C-NEXT:    [[BF_CLEAR216:%.*]] = and i8 [[BF_LOAD213]], 127
// CHK-C-NEXT:    [[BF_SET217:%.*]] = or i8 [[BF_CLEAR216]], [[BF_SHL215]]
// CHK-C-NEXT:    store i8 [[BF_SET217]], ptr [[ATOMIC_TEMP212]], align 1
// CHK-C-NEXT:    [[TMP72:%.*]] = load i8, ptr [[ATOMIC_TEMP212]], align 1
// CHK-C-NEXT:    [[TMP73:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx2_packed, i64 3), i8 [[TMP70]], i8 [[TMP72]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP74]] = extractvalue { i8, i1 } [[TMP73]], 0
// CHK-C-NEXT:    [[TMP75:%.*]] = extractvalue { i8, i1 } [[TMP73]], 1
// CHK-C-NEXT:    br i1 [[TMP75]], label [[ATOMIC_EXIT225]], label [[ATOMIC_CMP218]]
// CHK-C:       atomic_cmp218:
// CHK-C-NEXT:    store i8 [[TMP74]], ptr [[ATOMIC_TEMP219]], align 1
// CHK-C-NEXT:    [[BF_LOAD220:%.*]] = load i8, ptr [[ATOMIC_TEMP219]], align 1
// CHK-C-NEXT:    [[BF_ASHR221:%.*]] = ashr i8 [[BF_LOAD220]], 7
// CHK-C-NEXT:    [[BF_CAST222:%.*]] = sext i8 [[BF_ASHR221]] to i32
// CHK-C-NEXT:    [[CMP223:%.*]] = icmp slt i32 [[BF_CAST222]], [[TMP69]]
// CHK-C-NEXT:    [[FROMBOOL224:%.*]] = zext i1 [[CMP223]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL224]], ptr [[ATMP205]], align 1
// CHK-C-NEXT:    br i1 [[CMP223]], label [[ATOMIC_CONT207]], label [[ATOMIC_EXIT225]]
// CHK-C:       atomic_exit225:
// CHK-C-NEXT:    [[TMP76:%.*]] = load i32, ptr [[ATMP199]], align 4
// CHK-C-NEXT:    [[TMP77:%.*]] = load i8, ptr [[ATMP205]], align 1
// CHK-C-NEXT:    [[TMP78:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD226:%.*]] = load atomic i32, ptr @bfx3 monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD226]], ptr [[ATOMIC_TEMP228]], align 4
// CHK-C-NEXT:    [[BF_LOAD229:%.*]] = load i32, ptr [[ATOMIC_TEMP228]], align 4
// CHK-C-NEXT:    [[BF_SHL230:%.*]] = shl i32 [[BF_LOAD229]], 7
// CHK-C-NEXT:    [[BF_ASHR231:%.*]] = ashr i32 [[BF_SHL230]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR231]], ptr [[ATMP227]], align 4
// CHK-C-NEXT:    [[CMP232:%.*]] = icmp sgt i32 [[BF_ASHR231]], [[TMP78]]
// CHK-C-NEXT:    [[FROMBOOL234:%.*]] = zext i1 [[CMP232]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL234]], ptr [[ATMP233]], align 1
// CHK-C-NEXT:    br i1 [[CMP232]], label [[ATOMIC_CONT235:%.*]], label [[ATOMIC_EXIT253:%.*]]
// CHK-C:       atomic_cont235:
// CHK-C-NEXT:    [[TMP79:%.*]] = phi i32 [ [[ATOMIC_LOAD226]], [[ATOMIC_EXIT225]] ], [ [[TMP82:%.*]], [[ATOMIC_CMP246:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP79]], ptr [[ATOMIC_TEMP236]], align 4
// CHK-C-NEXT:    [[BF_LOAD237:%.*]] = load i32, ptr [[ATOMIC_TEMP236]], align 4
// CHK-C-NEXT:    [[BF_SHL238:%.*]] = shl i32 [[BF_LOAD237]], 7
// CHK-C-NEXT:    [[BF_ASHR239:%.*]] = ashr i32 [[BF_SHL238]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR239]], ptr [[ATMP227]], align 4
// CHK-C-NEXT:    store i32 [[TMP79]], ptr [[ATOMIC_TEMP240]], align 4
// CHK-C-NEXT:    [[BF_LOAD241:%.*]] = load i32, ptr [[ATOMIC_TEMP240]], align 4
// CHK-C-NEXT:    [[BF_VALUE242:%.*]] = and i32 [[TMP78]], 16383
// CHK-C-NEXT:    [[BF_SHL243:%.*]] = shl i32 [[BF_VALUE242]], 11
// CHK-C-NEXT:    [[BF_CLEAR244:%.*]] = and i32 [[BF_LOAD241]], -33552385
// CHK-C-NEXT:    [[BF_SET245:%.*]] = or i32 [[BF_CLEAR244]], [[BF_SHL243]]
// CHK-C-NEXT:    store i32 [[BF_SET245]], ptr [[ATOMIC_TEMP240]], align 4
// CHK-C-NEXT:    [[TMP80:%.*]] = load i32, ptr [[ATOMIC_TEMP240]], align 4
// CHK-C-NEXT:    [[TMP81:%.*]] = cmpxchg ptr @bfx3, i32 [[TMP79]], i32 [[TMP80]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP82]] = extractvalue { i32, i1 } [[TMP81]], 0
// CHK-C-NEXT:    [[TMP83:%.*]] = extractvalue { i32, i1 } [[TMP81]], 1
// CHK-C-NEXT:    br i1 [[TMP83]], label [[ATOMIC_EXIT253]], label [[ATOMIC_CMP246]]
// CHK-C:       atomic_cmp246:
// CHK-C-NEXT:    store i32 [[TMP82]], ptr [[ATOMIC_TEMP247]], align 4
// CHK-C-NEXT:    [[BF_LOAD248:%.*]] = load i32, ptr [[ATOMIC_TEMP247]], align 4
// CHK-C-NEXT:    [[BF_SHL249:%.*]] = shl i32 [[BF_LOAD248]], 7
// CHK-C-NEXT:    [[BF_ASHR250:%.*]] = ashr i32 [[BF_SHL249]], 18
// CHK-C-NEXT:    [[CMP251:%.*]] = icmp sgt i32 [[BF_ASHR250]], [[TMP78]]
// CHK-C-NEXT:    [[FROMBOOL252:%.*]] = zext i1 [[CMP251]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL252]], ptr [[ATMP233]], align 1
// CHK-C-NEXT:    br i1 [[CMP251]], label [[ATOMIC_CONT235]], label [[ATOMIC_EXIT253]]
// CHK-C:       atomic_exit253:
// CHK-C-NEXT:    [[TMP84:%.*]] = load i32, ptr [[ATMP227]], align 4
// CHK-C-NEXT:    [[TMP85:%.*]] = load i8, ptr [[ATMP233]], align 1
// CHK-C-NEXT:    [[TMP86:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[TMP87:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD254:%.*]] = load atomic i32, ptr @bfx3 monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD254]], ptr [[ATOMIC_TEMP256]], align 4
// CHK-C-NEXT:    [[BF_LOAD257:%.*]] = load i32, ptr [[ATOMIC_TEMP256]], align 4
// CHK-C-NEXT:    [[BF_SHL258:%.*]] = shl i32 [[BF_LOAD257]], 7
// CHK-C-NEXT:    [[BF_ASHR259:%.*]] = ashr i32 [[BF_SHL258]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR259]], ptr [[ATMP255]], align 4
// CHK-C-NEXT:    [[CMP260:%.*]] = icmp eq i32 [[BF_ASHR259]], [[TMP87]]
// CHK-C-NEXT:    [[FROMBOOL262:%.*]] = zext i1 [[CMP260]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL262]], ptr [[ATMP261]], align 1
// CHK-C-NEXT:    br i1 [[CMP260]], label [[ATOMIC_CONT263:%.*]], label [[ATOMIC_EXIT281:%.*]]
// CHK-C:       atomic_cont263:
// CHK-C-NEXT:    [[TMP88:%.*]] = phi i32 [ [[ATOMIC_LOAD254]], [[ATOMIC_EXIT253]] ], [ [[TMP91:%.*]], [[ATOMIC_CMP274:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP88]], ptr [[ATOMIC_TEMP264]], align 4
// CHK-C-NEXT:    [[BF_LOAD265:%.*]] = load i32, ptr [[ATOMIC_TEMP264]], align 4
// CHK-C-NEXT:    [[BF_SHL266:%.*]] = shl i32 [[BF_LOAD265]], 7
// CHK-C-NEXT:    [[BF_ASHR267:%.*]] = ashr i32 [[BF_SHL266]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR267]], ptr [[ATMP255]], align 4
// CHK-C-NEXT:    store i32 [[TMP88]], ptr [[ATOMIC_TEMP268]], align 4
// CHK-C-NEXT:    [[BF_LOAD269:%.*]] = load i32, ptr [[ATOMIC_TEMP268]], align 4
// CHK-C-NEXT:    [[BF_VALUE270:%.*]] = and i32 [[TMP86]], 16383
// CHK-C-NEXT:    [[BF_SHL271:%.*]] = shl i32 [[BF_VALUE270]], 11
// CHK-C-NEXT:    [[BF_CLEAR272:%.*]] = and i32 [[BF_LOAD269]], -33552385
// CHK-C-NEXT:    [[BF_SET273:%.*]] = or i32 [[BF_CLEAR272]], [[BF_SHL271]]
// CHK-C-NEXT:    store i32 [[BF_SET273]], ptr [[ATOMIC_TEMP268]], align 4
// CHK-C-NEXT:    [[TMP89:%.*]] = load i32, ptr [[ATOMIC_TEMP268]], align 4
// CHK-C-NEXT:    [[TMP90:%.*]] = cmpxchg ptr @bfx3, i32 [[TMP88]], i32 [[TMP89]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP91]] = extractvalue { i32, i1 } [[TMP90]], 0
// CHK-C-NEXT:    [[TMP92:%.*]] = extractvalue { i32, i1 } [[TMP90]], 1
// CHK-C-NEXT:    br i1 [[TMP92]], label [[ATOMIC_EXIT281]], label [[ATOMIC_CMP274]]
// CHK-C:       atomic_cmp274:
// CHK-C-NEXT:    store i32 [[TMP91]], ptr [[ATOMIC_TEMP275]], align 4
// CHK-C-NEXT:    [[BF_LOAD276:%.*]] = load i32, ptr [[ATOMIC_TEMP275]], align 4
// CHK-C-NEXT:    [[BF_SHL277:%.*]] = shl i32 [[BF_LOAD276]], 7
// CHK-C-NEXT:    [[BF_ASHR278:%.*]] = ashr i32 [[BF_SHL277]], 18
// CHK-C-NEXT:    [[CMP279:%.*]] = icmp eq i32 [[BF_ASHR278]], [[TMP87]]
// CHK-C-NEXT:    [[FROMBOOL280:%.*]] = zext i1 [[CMP279]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL280]], ptr [[ATMP261]], align 1
// CHK-C-NEXT:    br i1 [[CMP279]], label [[ATOMIC_CONT263]], label [[ATOMIC_EXIT281]]
// CHK-C:       atomic_exit281:
// CHK-C-NEXT:    [[TMP93:%.*]] = load i32, ptr [[ATMP255]], align 4
// CHK-C-NEXT:    [[TMP94:%.*]] = load i8, ptr [[ATMP261]], align 1
// CHK-C-NEXT:    [[TMP95:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD282:%.*]] = load atomic i32, ptr @bfx3 monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD282]], ptr [[ATOMIC_TEMP284]], align 4
// CHK-C-NEXT:    [[BF_LOAD285:%.*]] = load i32, ptr [[ATOMIC_TEMP284]], align 4
// CHK-C-NEXT:    [[BF_SHL286:%.*]] = shl i32 [[BF_LOAD285]], 7
// CHK-C-NEXT:    [[BF_ASHR287:%.*]] = ashr i32 [[BF_SHL286]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR287]], ptr [[ATMP283]], align 4
// CHK-C-NEXT:    [[CMP288:%.*]] = icmp slt i32 [[BF_ASHR287]], [[TMP95]]
// CHK-C-NEXT:    [[FROMBOOL290:%.*]] = zext i1 [[CMP288]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL290]], ptr [[ATMP289]], align 1
// CHK-C-NEXT:    br i1 [[CMP288]], label [[ATOMIC_CONT291:%.*]], label [[ATOMIC_EXIT309:%.*]]
// CHK-C:       atomic_cont291:
// CHK-C-NEXT:    [[TMP96:%.*]] = phi i32 [ [[ATOMIC_LOAD282]], [[ATOMIC_EXIT281]] ], [ [[TMP99:%.*]], [[ATOMIC_CMP302:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP96]], ptr [[ATOMIC_TEMP292]], align 4
// CHK-C-NEXT:    [[BF_LOAD293:%.*]] = load i32, ptr [[ATOMIC_TEMP292]], align 4
// CHK-C-NEXT:    [[BF_SHL294:%.*]] = shl i32 [[BF_LOAD293]], 7
// CHK-C-NEXT:    [[BF_ASHR295:%.*]] = ashr i32 [[BF_SHL294]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR295]], ptr [[ATMP283]], align 4
// CHK-C-NEXT:    store i32 [[TMP96]], ptr [[ATOMIC_TEMP296]], align 4
// CHK-C-NEXT:    [[BF_LOAD297:%.*]] = load i32, ptr [[ATOMIC_TEMP296]], align 4
// CHK-C-NEXT:    [[BF_VALUE298:%.*]] = and i32 [[TMP95]], 16383
// CHK-C-NEXT:    [[BF_SHL299:%.*]] = shl i32 [[BF_VALUE298]], 11
// CHK-C-NEXT:    [[BF_CLEAR300:%.*]] = and i32 [[BF_LOAD297]], -33552385
// CHK-C-NEXT:    [[BF_SET301:%.*]] = or i32 [[BF_CLEAR300]], [[BF_SHL299]]
// CHK-C-NEXT:    store i32 [[BF_SET301]], ptr [[ATOMIC_TEMP296]], align 4
// CHK-C-NEXT:    [[TMP97:%.*]] = load i32, ptr [[ATOMIC_TEMP296]], align 4
// CHK-C-NEXT:    [[TMP98:%.*]] = cmpxchg ptr @bfx3, i32 [[TMP96]], i32 [[TMP97]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP99]] = extractvalue { i32, i1 } [[TMP98]], 0
// CHK-C-NEXT:    [[TMP100:%.*]] = extractvalue { i32, i1 } [[TMP98]], 1
// CHK-C-NEXT:    br i1 [[TMP100]], label [[ATOMIC_EXIT309]], label [[ATOMIC_CMP302]]
// CHK-C:       atomic_cmp302:
// CHK-C-NEXT:    store i32 [[TMP99]], ptr [[ATOMIC_TEMP303]], align 4
// CHK-C-NEXT:    [[BF_LOAD304:%.*]] = load i32, ptr [[ATOMIC_TEMP303]], align 4
// CHK-C-NEXT:    [[BF_SHL305:%.*]] = shl i32 [[BF_LOAD304]], 7
// CHK-C-NEXT:    [[BF_ASHR306:%.*]] = ashr i32 [[BF_SHL305]], 18
// CHK-C-NEXT:    [[CMP307:%.*]] = icmp slt i32 [[BF_ASHR306]], [[TMP95]]
// CHK-C-NEXT:    [[FROMBOOL308:%.*]] = zext i1 [[CMP307]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL308]], ptr [[ATMP289]], align 1
// CHK-C-NEXT:    br i1 [[CMP307]], label [[ATOMIC_CONT291]], label [[ATOMIC_EXIT309]]
// CHK-C:       atomic_exit309:
// CHK-C-NEXT:    [[TMP101:%.*]] = load i32, ptr [[ATMP283]], align 4
// CHK-C-NEXT:    [[TMP102:%.*]] = load i8, ptr [[ATMP289]], align 1
// CHK-C-NEXT:    [[TMP103:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD310:%.*]] = load atomic i64, ptr @bfx4 monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD310]], ptr [[ATOMIC_TEMP312]], align 8
// CHK-C-NEXT:    [[BF_LOAD313:%.*]] = load i64, ptr [[ATOMIC_TEMP312]], align 8
// CHK-C-NEXT:    [[BF_SHL314:%.*]] = shl i64 [[BF_LOAD313]], 47
// CHK-C-NEXT:    [[BF_ASHR315:%.*]] = ashr i64 [[BF_SHL314]], 63
// CHK-C-NEXT:    [[BF_CAST316:%.*]] = trunc i64 [[BF_ASHR315]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST316]], ptr [[ATMP311]], align 4
// CHK-C-NEXT:    [[CMP317:%.*]] = icmp sgt i32 [[BF_CAST316]], [[TMP103]]
// CHK-C-NEXT:    [[FROMBOOL319:%.*]] = zext i1 [[CMP317]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL319]], ptr [[ATMP318]], align 1
// CHK-C-NEXT:    br i1 [[CMP317]], label [[ATOMIC_CONT320:%.*]], label [[ATOMIC_EXIT340:%.*]]
// CHK-C:       atomic_cont320:
// CHK-C-NEXT:    [[TMP104:%.*]] = phi i64 [ [[ATOMIC_LOAD310]], [[ATOMIC_EXIT309]] ], [ [[TMP108:%.*]], [[ATOMIC_CMP332:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP104]], ptr [[ATOMIC_TEMP321]], align 8
// CHK-C-NEXT:    [[BF_LOAD322:%.*]] = load i64, ptr [[ATOMIC_TEMP321]], align 8
// CHK-C-NEXT:    [[BF_SHL323:%.*]] = shl i64 [[BF_LOAD322]], 47
// CHK-C-NEXT:    [[BF_ASHR324:%.*]] = ashr i64 [[BF_SHL323]], 63
// CHK-C-NEXT:    [[BF_CAST325:%.*]] = trunc i64 [[BF_ASHR324]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST325]], ptr [[ATMP311]], align 4
// CHK-C-NEXT:    store i64 [[TMP104]], ptr [[ATOMIC_TEMP326]], align 8
// CHK-C-NEXT:    [[TMP105:%.*]] = zext i32 [[TMP103]] to i64
// CHK-C-NEXT:    [[BF_LOAD327:%.*]] = load i64, ptr [[ATOMIC_TEMP326]], align 8
// CHK-C-NEXT:    [[BF_VALUE328:%.*]] = and i64 [[TMP105]], 1
// CHK-C-NEXT:    [[BF_SHL329:%.*]] = shl i64 [[BF_VALUE328]], 16
// CHK-C-NEXT:    [[BF_CLEAR330:%.*]] = and i64 [[BF_LOAD327]], -65537
// CHK-C-NEXT:    [[BF_SET331:%.*]] = or i64 [[BF_CLEAR330]], [[BF_SHL329]]
// CHK-C-NEXT:    store i64 [[BF_SET331]], ptr [[ATOMIC_TEMP326]], align 8
// CHK-C-NEXT:    [[TMP106:%.*]] = load i64, ptr [[ATOMIC_TEMP326]], align 8
// CHK-C-NEXT:    [[TMP107:%.*]] = cmpxchg ptr @bfx4, i64 [[TMP104]], i64 [[TMP106]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP108]] = extractvalue { i64, i1 } [[TMP107]], 0
// CHK-C-NEXT:    [[TMP109:%.*]] = extractvalue { i64, i1 } [[TMP107]], 1
// CHK-C-NEXT:    br i1 [[TMP109]], label [[ATOMIC_EXIT340]], label [[ATOMIC_CMP332]]
// CHK-C:       atomic_cmp332:
// CHK-C-NEXT:    store i64 [[TMP108]], ptr [[ATOMIC_TEMP333]], align 8
// CHK-C-NEXT:    [[BF_LOAD334:%.*]] = load i64, ptr [[ATOMIC_TEMP333]], align 8
// CHK-C-NEXT:    [[BF_SHL335:%.*]] = shl i64 [[BF_LOAD334]], 47
// CHK-C-NEXT:    [[BF_ASHR336:%.*]] = ashr i64 [[BF_SHL335]], 63
// CHK-C-NEXT:    [[BF_CAST337:%.*]] = trunc i64 [[BF_ASHR336]] to i32
// CHK-C-NEXT:    [[CMP338:%.*]] = icmp sgt i32 [[BF_CAST337]], [[TMP103]]
// CHK-C-NEXT:    [[FROMBOOL339:%.*]] = zext i1 [[CMP338]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL339]], ptr [[ATMP318]], align 1
// CHK-C-NEXT:    br i1 [[CMP338]], label [[ATOMIC_CONT320]], label [[ATOMIC_EXIT340]]
// CHK-C:       atomic_exit340:
// CHK-C-NEXT:    [[TMP110:%.*]] = load i32, ptr [[ATMP311]], align 4
// CHK-C-NEXT:    [[TMP111:%.*]] = load i8, ptr [[ATMP318]], align 1
// CHK-C-NEXT:    [[TMP112:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[TMP113:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD341:%.*]] = load atomic i64, ptr @bfx4 monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD341]], ptr [[ATOMIC_TEMP343]], align 8
// CHK-C-NEXT:    [[BF_LOAD344:%.*]] = load i64, ptr [[ATOMIC_TEMP343]], align 8
// CHK-C-NEXT:    [[BF_SHL345:%.*]] = shl i64 [[BF_LOAD344]], 47
// CHK-C-NEXT:    [[BF_ASHR346:%.*]] = ashr i64 [[BF_SHL345]], 63
// CHK-C-NEXT:    [[BF_CAST347:%.*]] = trunc i64 [[BF_ASHR346]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST347]], ptr [[ATMP342]], align 4
// CHK-C-NEXT:    [[CMP348:%.*]] = icmp eq i32 [[BF_CAST347]], [[TMP113]]
// CHK-C-NEXT:    [[FROMBOOL350:%.*]] = zext i1 [[CMP348]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL350]], ptr [[ATMP349]], align 1
// CHK-C-NEXT:    br i1 [[CMP348]], label [[ATOMIC_CONT351:%.*]], label [[ATOMIC_EXIT371:%.*]]
// CHK-C:       atomic_cont351:
// CHK-C-NEXT:    [[TMP114:%.*]] = phi i64 [ [[ATOMIC_LOAD341]], [[ATOMIC_EXIT340]] ], [ [[TMP118:%.*]], [[ATOMIC_CMP363:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP114]], ptr [[ATOMIC_TEMP352]], align 8
// CHK-C-NEXT:    [[BF_LOAD353:%.*]] = load i64, ptr [[ATOMIC_TEMP352]], align 8
// CHK-C-NEXT:    [[BF_SHL354:%.*]] = shl i64 [[BF_LOAD353]], 47
// CHK-C-NEXT:    [[BF_ASHR355:%.*]] = ashr i64 [[BF_SHL354]], 63
// CHK-C-NEXT:    [[BF_CAST356:%.*]] = trunc i64 [[BF_ASHR355]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST356]], ptr [[ATMP342]], align 4
// CHK-C-NEXT:    store i64 [[TMP114]], ptr [[ATOMIC_TEMP357]], align 8
// CHK-C-NEXT:    [[TMP115:%.*]] = zext i32 [[TMP112]] to i64
// CHK-C-NEXT:    [[BF_LOAD358:%.*]] = load i64, ptr [[ATOMIC_TEMP357]], align 8
// CHK-C-NEXT:    [[BF_VALUE359:%.*]] = and i64 [[TMP115]], 1
// CHK-C-NEXT:    [[BF_SHL360:%.*]] = shl i64 [[BF_VALUE359]], 16
// CHK-C-NEXT:    [[BF_CLEAR361:%.*]] = and i64 [[BF_LOAD358]], -65537
// CHK-C-NEXT:    [[BF_SET362:%.*]] = or i64 [[BF_CLEAR361]], [[BF_SHL360]]
// CHK-C-NEXT:    store i64 [[BF_SET362]], ptr [[ATOMIC_TEMP357]], align 8
// CHK-C-NEXT:    [[TMP116:%.*]] = load i64, ptr [[ATOMIC_TEMP357]], align 8
// CHK-C-NEXT:    [[TMP117:%.*]] = cmpxchg ptr @bfx4, i64 [[TMP114]], i64 [[TMP116]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP118]] = extractvalue { i64, i1 } [[TMP117]], 0
// CHK-C-NEXT:    [[TMP119:%.*]] = extractvalue { i64, i1 } [[TMP117]], 1
// CHK-C-NEXT:    br i1 [[TMP119]], label [[ATOMIC_EXIT371]], label [[ATOMIC_CMP363]]
// CHK-C:       atomic_cmp363:
// CHK-C-NEXT:    store i64 [[TMP118]], ptr [[ATOMIC_TEMP364]], align 8
// CHK-C-NEXT:    [[BF_LOAD365:%.*]] = load i64, ptr [[ATOMIC_TEMP364]], align 8
// CHK-C-NEXT:    [[BF_SHL366:%.*]] = shl i64 [[BF_LOAD365]], 47
// CHK-C-NEXT:    [[BF_ASHR367:%.*]] = ashr i64 [[BF_SHL366]], 63
// CHK-C-NEXT:    [[BF_CAST368:%.*]] = trunc i64 [[BF_ASHR367]] to i32
// CHK-C-NEXT:    [[CMP369:%.*]] = icmp eq i32 [[BF_CAST368]], [[TMP113]]
// CHK-C-NEXT:    [[FROMBOOL370:%.*]] = zext i1 [[CMP369]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL370]], ptr [[ATMP349]], align 1
// CHK-C-NEXT:    br i1 [[CMP369]], label [[ATOMIC_CONT351]], label [[ATOMIC_EXIT371]]
// CHK-C:       atomic_exit371:
// CHK-C-NEXT:    [[TMP120:%.*]] = load i32, ptr [[ATMP342]], align 4
// CHK-C-NEXT:    [[TMP121:%.*]] = load i8, ptr [[ATMP349]], align 1
// CHK-C-NEXT:    [[TMP122:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD372:%.*]] = load atomic i64, ptr @bfx4 monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD372]], ptr [[ATOMIC_TEMP374]], align 8
// CHK-C-NEXT:    [[BF_LOAD375:%.*]] = load i64, ptr [[ATOMIC_TEMP374]], align 8
// CHK-C-NEXT:    [[BF_SHL376:%.*]] = shl i64 [[BF_LOAD375]], 47
// CHK-C-NEXT:    [[BF_ASHR377:%.*]] = ashr i64 [[BF_SHL376]], 63
// CHK-C-NEXT:    [[BF_CAST378:%.*]] = trunc i64 [[BF_ASHR377]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST378]], ptr [[ATMP373]], align 4
// CHK-C-NEXT:    [[CMP379:%.*]] = icmp slt i32 [[BF_CAST378]], [[TMP122]]
// CHK-C-NEXT:    [[FROMBOOL381:%.*]] = zext i1 [[CMP379]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL381]], ptr [[ATMP380]], align 1
// CHK-C-NEXT:    br i1 [[CMP379]], label [[ATOMIC_CONT382:%.*]], label [[ATOMIC_EXIT402:%.*]]
// CHK-C:       atomic_cont382:
// CHK-C-NEXT:    [[TMP123:%.*]] = phi i64 [ [[ATOMIC_LOAD372]], [[ATOMIC_EXIT371]] ], [ [[TMP127:%.*]], [[ATOMIC_CMP394:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP123]], ptr [[ATOMIC_TEMP383]], align 8
// CHK-C-NEXT:    [[BF_LOAD384:%.*]] = load i64, ptr [[ATOMIC_TEMP383]], align 8
// CHK-C-NEXT:    [[BF_SHL385:%.*]] = shl i64 [[BF_LOAD384]], 47
// CHK-C-NEXT:    [[BF_ASHR386:%.*]] = ashr i64 [[BF_SHL385]], 63
// CHK-C-NEXT:    [[BF_CAST387:%.*]] = trunc i64 [[BF_ASHR386]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST387]], ptr [[ATMP373]], align 4
// CHK-C-NEXT:    store i64 [[TMP123]], ptr [[ATOMIC_TEMP388]], align 8
// CHK-C-NEXT:    [[TMP124:%.*]] = zext i32 [[TMP122]] to i64
// CHK-C-NEXT:    [[BF_LOAD389:%.*]] = load i64, ptr [[ATOMIC_TEMP388]], align 8
// CHK-C-NEXT:    [[BF_VALUE390:%.*]] = and i64 [[TMP124]], 1
// CHK-C-NEXT:    [[BF_SHL391:%.*]] = shl i64 [[BF_VALUE390]], 16
// CHK-C-NEXT:    [[BF_CLEAR392:%.*]] = and i64 [[BF_LOAD389]], -65537
// CHK-C-NEXT:    [[BF_SET393:%.*]] = or i64 [[BF_CLEAR392]], [[BF_SHL391]]
// CHK-C-NEXT:    store i64 [[BF_SET393]], ptr [[ATOMIC_TEMP388]], align 8
// CHK-C-NEXT:    [[TMP125:%.*]] = load i64, ptr [[ATOMIC_TEMP388]], align 8
// CHK-C-NEXT:    [[TMP126:%.*]] = cmpxchg ptr @bfx4, i64 [[TMP123]], i64 [[TMP125]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP127]] = extractvalue { i64, i1 } [[TMP126]], 0
// CHK-C-NEXT:    [[TMP128:%.*]] = extractvalue { i64, i1 } [[TMP126]], 1
// CHK-C-NEXT:    br i1 [[TMP128]], label [[ATOMIC_EXIT402]], label [[ATOMIC_CMP394]]
// CHK-C:       atomic_cmp394:
// CHK-C-NEXT:    store i64 [[TMP127]], ptr [[ATOMIC_TEMP395]], align 8
// CHK-C-NEXT:    [[BF_LOAD396:%.*]] = load i64, ptr [[ATOMIC_TEMP395]], align 8
// CHK-C-NEXT:    [[BF_SHL397:%.*]] = shl i64 [[BF_LOAD396]], 47
// CHK-C-NEXT:    [[BF_ASHR398:%.*]] = ashr i64 [[BF_SHL397]], 63
// CHK-C-NEXT:    [[BF_CAST399:%.*]] = trunc i64 [[BF_ASHR398]] to i32
// CHK-C-NEXT:    [[CMP400:%.*]] = icmp slt i32 [[BF_CAST399]], [[TMP122]]
// CHK-C-NEXT:    [[FROMBOOL401:%.*]] = zext i1 [[CMP400]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL401]], ptr [[ATMP380]], align 1
// CHK-C-NEXT:    br i1 [[CMP400]], label [[ATOMIC_CONT382]], label [[ATOMIC_EXIT402]]
// CHK-C:       atomic_exit402:
// CHK-C-NEXT:    [[TMP129:%.*]] = load i32, ptr [[ATMP373]], align 4
// CHK-C-NEXT:    [[TMP130:%.*]] = load i8, ptr [[ATMP380]], align 1
// CHK-C-NEXT:    [[TMP131:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[CONV:%.*]] = sext i32 [[TMP131]] to i64
// CHK-C-NEXT:    [[ATOMIC_LOAD403:%.*]] = load atomic i64, ptr @bfx4 monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD403]], ptr [[ATOMIC_TEMP405]], align 8
// CHK-C-NEXT:    [[BF_LOAD406:%.*]] = load i64, ptr [[ATOMIC_TEMP405]], align 8
// CHK-C-NEXT:    [[BF_SHL407:%.*]] = shl i64 [[BF_LOAD406]], 40
// CHK-C-NEXT:    [[BF_ASHR408:%.*]] = ashr i64 [[BF_SHL407]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR408]], ptr [[ATMP404]], align 8
// CHK-C-NEXT:    [[CMP409:%.*]] = icmp sgt i64 [[BF_ASHR408]], [[CONV]]
// CHK-C-NEXT:    [[FROMBOOL411:%.*]] = zext i1 [[CMP409]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL411]], ptr [[ATMP410]], align 1
// CHK-C-NEXT:    br i1 [[CMP409]], label [[ATOMIC_CONT412:%.*]], label [[ATOMIC_EXIT430:%.*]]
// CHK-C:       atomic_cont412:
// CHK-C-NEXT:    [[TMP132:%.*]] = phi i64 [ [[ATOMIC_LOAD403]], [[ATOMIC_EXIT402]] ], [ [[TMP135:%.*]], [[ATOMIC_CMP423:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP132]], ptr [[ATOMIC_TEMP413]], align 8
// CHK-C-NEXT:    [[BF_LOAD414:%.*]] = load i64, ptr [[ATOMIC_TEMP413]], align 8
// CHK-C-NEXT:    [[BF_SHL415:%.*]] = shl i64 [[BF_LOAD414]], 40
// CHK-C-NEXT:    [[BF_ASHR416:%.*]] = ashr i64 [[BF_SHL415]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR416]], ptr [[ATMP404]], align 8
// CHK-C-NEXT:    store i64 [[TMP132]], ptr [[ATOMIC_TEMP417]], align 8
// CHK-C-NEXT:    [[BF_LOAD418:%.*]] = load i64, ptr [[ATOMIC_TEMP417]], align 8
// CHK-C-NEXT:    [[BF_VALUE419:%.*]] = and i64 [[CONV]], 127
// CHK-C-NEXT:    [[BF_SHL420:%.*]] = shl i64 [[BF_VALUE419]], 17
// CHK-C-NEXT:    [[BF_CLEAR421:%.*]] = and i64 [[BF_LOAD418]], -16646145
// CHK-C-NEXT:    [[BF_SET422:%.*]] = or i64 [[BF_CLEAR421]], [[BF_SHL420]]
// CHK-C-NEXT:    store i64 [[BF_SET422]], ptr [[ATOMIC_TEMP417]], align 8
// CHK-C-NEXT:    [[TMP133:%.*]] = load i64, ptr [[ATOMIC_TEMP417]], align 8
// CHK-C-NEXT:    [[TMP134:%.*]] = cmpxchg ptr @bfx4, i64 [[TMP132]], i64 [[TMP133]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP135]] = extractvalue { i64, i1 } [[TMP134]], 0
// CHK-C-NEXT:    [[TMP136:%.*]] = extractvalue { i64, i1 } [[TMP134]], 1
// CHK-C-NEXT:    br i1 [[TMP136]], label [[ATOMIC_EXIT430]], label [[ATOMIC_CMP423]]
// CHK-C:       atomic_cmp423:
// CHK-C-NEXT:    store i64 [[TMP135]], ptr [[ATOMIC_TEMP424]], align 8
// CHK-C-NEXT:    [[BF_LOAD425:%.*]] = load i64, ptr [[ATOMIC_TEMP424]], align 8
// CHK-C-NEXT:    [[BF_SHL426:%.*]] = shl i64 [[BF_LOAD425]], 40
// CHK-C-NEXT:    [[BF_ASHR427:%.*]] = ashr i64 [[BF_SHL426]], 57
// CHK-C-NEXT:    [[CMP428:%.*]] = icmp sgt i64 [[BF_ASHR427]], [[CONV]]
// CHK-C-NEXT:    [[FROMBOOL429:%.*]] = zext i1 [[CMP428]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL429]], ptr [[ATMP410]], align 1
// CHK-C-NEXT:    br i1 [[CMP428]], label [[ATOMIC_CONT412]], label [[ATOMIC_EXIT430]]
// CHK-C:       atomic_exit430:
// CHK-C-NEXT:    [[TMP137:%.*]] = load i64, ptr [[ATMP404]], align 8
// CHK-C-NEXT:    [[TMP138:%.*]] = load i8, ptr [[ATMP410]], align 1
// CHK-C-NEXT:    [[TMP139:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[CONV431:%.*]] = sext i32 [[TMP139]] to i64
// CHK-C-NEXT:    [[TMP140:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[CONV432:%.*]] = sext i32 [[TMP140]] to i64
// CHK-C-NEXT:    [[ATOMIC_LOAD433:%.*]] = load atomic i64, ptr @bfx4 monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD433]], ptr [[ATOMIC_TEMP435]], align 8
// CHK-C-NEXT:    [[BF_LOAD436:%.*]] = load i64, ptr [[ATOMIC_TEMP435]], align 8
// CHK-C-NEXT:    [[BF_SHL437:%.*]] = shl i64 [[BF_LOAD436]], 40
// CHK-C-NEXT:    [[BF_ASHR438:%.*]] = ashr i64 [[BF_SHL437]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR438]], ptr [[ATMP434]], align 8
// CHK-C-NEXT:    [[CMP439:%.*]] = icmp eq i64 [[BF_ASHR438]], [[CONV432]]
// CHK-C-NEXT:    [[FROMBOOL441:%.*]] = zext i1 [[CMP439]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL441]], ptr [[ATMP440]], align 1
// CHK-C-NEXT:    br i1 [[CMP439]], label [[ATOMIC_CONT442:%.*]], label [[ATOMIC_EXIT460:%.*]]
// CHK-C:       atomic_cont442:
// CHK-C-NEXT:    [[TMP141:%.*]] = phi i64 [ [[ATOMIC_LOAD433]], [[ATOMIC_EXIT430]] ], [ [[TMP144:%.*]], [[ATOMIC_CMP453:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP141]], ptr [[ATOMIC_TEMP443]], align 8
// CHK-C-NEXT:    [[BF_LOAD444:%.*]] = load i64, ptr [[ATOMIC_TEMP443]], align 8
// CHK-C-NEXT:    [[BF_SHL445:%.*]] = shl i64 [[BF_LOAD444]], 40
// CHK-C-NEXT:    [[BF_ASHR446:%.*]] = ashr i64 [[BF_SHL445]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR446]], ptr [[ATMP434]], align 8
// CHK-C-NEXT:    store i64 [[TMP141]], ptr [[ATOMIC_TEMP447]], align 8
// CHK-C-NEXT:    [[BF_LOAD448:%.*]] = load i64, ptr [[ATOMIC_TEMP447]], align 8
// CHK-C-NEXT:    [[BF_VALUE449:%.*]] = and i64 [[CONV431]], 127
// CHK-C-NEXT:    [[BF_SHL450:%.*]] = shl i64 [[BF_VALUE449]], 17
// CHK-C-NEXT:    [[BF_CLEAR451:%.*]] = and i64 [[BF_LOAD448]], -16646145
// CHK-C-NEXT:    [[BF_SET452:%.*]] = or i64 [[BF_CLEAR451]], [[BF_SHL450]]
// CHK-C-NEXT:    store i64 [[BF_SET452]], ptr [[ATOMIC_TEMP447]], align 8
// CHK-C-NEXT:    [[TMP142:%.*]] = load i64, ptr [[ATOMIC_TEMP447]], align 8
// CHK-C-NEXT:    [[TMP143:%.*]] = cmpxchg ptr @bfx4, i64 [[TMP141]], i64 [[TMP142]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP144]] = extractvalue { i64, i1 } [[TMP143]], 0
// CHK-C-NEXT:    [[TMP145:%.*]] = extractvalue { i64, i1 } [[TMP143]], 1
// CHK-C-NEXT:    br i1 [[TMP145]], label [[ATOMIC_EXIT460]], label [[ATOMIC_CMP453]]
// CHK-C:       atomic_cmp453:
// CHK-C-NEXT:    store i64 [[TMP144]], ptr [[ATOMIC_TEMP454]], align 8
// CHK-C-NEXT:    [[BF_LOAD455:%.*]] = load i64, ptr [[ATOMIC_TEMP454]], align 8
// CHK-C-NEXT:    [[BF_SHL456:%.*]] = shl i64 [[BF_LOAD455]], 40
// CHK-C-NEXT:    [[BF_ASHR457:%.*]] = ashr i64 [[BF_SHL456]], 57
// CHK-C-NEXT:    [[CMP458:%.*]] = icmp eq i64 [[BF_ASHR457]], [[CONV432]]
// CHK-C-NEXT:    [[FROMBOOL459:%.*]] = zext i1 [[CMP458]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL459]], ptr [[ATMP440]], align 1
// CHK-C-NEXT:    br i1 [[CMP458]], label [[ATOMIC_CONT442]], label [[ATOMIC_EXIT460]]
// CHK-C:       atomic_exit460:
// CHK-C-NEXT:    [[TMP146:%.*]] = load i64, ptr [[ATMP434]], align 8
// CHK-C-NEXT:    [[TMP147:%.*]] = load i8, ptr [[ATMP440]], align 1
// CHK-C-NEXT:    [[TMP148:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[CONV461:%.*]] = sext i32 [[TMP148]] to i64
// CHK-C-NEXT:    [[ATOMIC_LOAD462:%.*]] = load atomic i64, ptr @bfx4 monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD462]], ptr [[ATOMIC_TEMP464]], align 8
// CHK-C-NEXT:    [[BF_LOAD465:%.*]] = load i64, ptr [[ATOMIC_TEMP464]], align 8
// CHK-C-NEXT:    [[BF_SHL466:%.*]] = shl i64 [[BF_LOAD465]], 40
// CHK-C-NEXT:    [[BF_ASHR467:%.*]] = ashr i64 [[BF_SHL466]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR467]], ptr [[ATMP463]], align 8
// CHK-C-NEXT:    [[CMP468:%.*]] = icmp slt i64 [[BF_ASHR467]], [[CONV461]]
// CHK-C-NEXT:    [[FROMBOOL470:%.*]] = zext i1 [[CMP468]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL470]], ptr [[ATMP469]], align 1
// CHK-C-NEXT:    br i1 [[CMP468]], label [[ATOMIC_CONT471:%.*]], label [[ATOMIC_EXIT489:%.*]]
// CHK-C:       atomic_cont471:
// CHK-C-NEXT:    [[TMP149:%.*]] = phi i64 [ [[ATOMIC_LOAD462]], [[ATOMIC_EXIT460]] ], [ [[TMP152:%.*]], [[ATOMIC_CMP482:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP149]], ptr [[ATOMIC_TEMP472]], align 8
// CHK-C-NEXT:    [[BF_LOAD473:%.*]] = load i64, ptr [[ATOMIC_TEMP472]], align 8
// CHK-C-NEXT:    [[BF_SHL474:%.*]] = shl i64 [[BF_LOAD473]], 40
// CHK-C-NEXT:    [[BF_ASHR475:%.*]] = ashr i64 [[BF_SHL474]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR475]], ptr [[ATMP463]], align 8
// CHK-C-NEXT:    store i64 [[TMP149]], ptr [[ATOMIC_TEMP476]], align 8
// CHK-C-NEXT:    [[BF_LOAD477:%.*]] = load i64, ptr [[ATOMIC_TEMP476]], align 8
// CHK-C-NEXT:    [[BF_VALUE478:%.*]] = and i64 [[CONV461]], 127
// CHK-C-NEXT:    [[BF_SHL479:%.*]] = shl i64 [[BF_VALUE478]], 17
// CHK-C-NEXT:    [[BF_CLEAR480:%.*]] = and i64 [[BF_LOAD477]], -16646145
// CHK-C-NEXT:    [[BF_SET481:%.*]] = or i64 [[BF_CLEAR480]], [[BF_SHL479]]
// CHK-C-NEXT:    store i64 [[BF_SET481]], ptr [[ATOMIC_TEMP476]], align 8
// CHK-C-NEXT:    [[TMP150:%.*]] = load i64, ptr [[ATOMIC_TEMP476]], align 8
// CHK-C-NEXT:    [[TMP151:%.*]] = cmpxchg ptr @bfx4, i64 [[TMP149]], i64 [[TMP150]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP152]] = extractvalue { i64, i1 } [[TMP151]], 0
// CHK-C-NEXT:    [[TMP153:%.*]] = extractvalue { i64, i1 } [[TMP151]], 1
// CHK-C-NEXT:    br i1 [[TMP153]], label [[ATOMIC_EXIT489]], label [[ATOMIC_CMP482]]
// CHK-C:       atomic_cmp482:
// CHK-C-NEXT:    store i64 [[TMP152]], ptr [[ATOMIC_TEMP483]], align 8
// CHK-C-NEXT:    [[BF_LOAD484:%.*]] = load i64, ptr [[ATOMIC_TEMP483]], align 8
// CHK-C-NEXT:    [[BF_SHL485:%.*]] = shl i64 [[BF_LOAD484]], 40
// CHK-C-NEXT:    [[BF_ASHR486:%.*]] = ashr i64 [[BF_SHL485]], 57
// CHK-C-NEXT:    [[CMP487:%.*]] = icmp slt i64 [[BF_ASHR486]], [[CONV461]]
// CHK-C-NEXT:    [[FROMBOOL488:%.*]] = zext i1 [[CMP487]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL488]], ptr [[ATMP469]], align 1
// CHK-C-NEXT:    br i1 [[CMP487]], label [[ATOMIC_CONT471]], label [[ATOMIC_EXIT489]]
// CHK-C:       atomic_exit489:
// CHK-C-NEXT:    [[TMP154:%.*]] = load i64, ptr [[ATMP463]], align 8
// CHK-C-NEXT:    [[TMP155:%.*]] = load i8, ptr [[ATMP469]], align 1
// CHK-C-NEXT:    [[TMP156:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD490:%.*]] = load atomic i8, ptr getelementptr (i8, ptr @bfx4_packed, i64 2) monotonic, align 1
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD490]], ptr [[ATOMIC_TEMP492]], align 1
// CHK-C-NEXT:    [[BF_LOAD493:%.*]] = load i8, ptr [[ATOMIC_TEMP492]], align 1
// CHK-C-NEXT:    [[BF_SHL494:%.*]] = shl i8 [[BF_LOAD493]], 7
// CHK-C-NEXT:    [[BF_ASHR495:%.*]] = ashr i8 [[BF_SHL494]], 7
// CHK-C-NEXT:    [[BF_CAST496:%.*]] = sext i8 [[BF_ASHR495]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST496]], ptr [[ATMP491]], align 4
// CHK-C-NEXT:    [[CMP497:%.*]] = icmp sgt i32 [[BF_CAST496]], [[TMP156]]
// CHK-C-NEXT:    [[FROMBOOL499:%.*]] = zext i1 [[CMP497]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL499]], ptr [[ATMP498]], align 1
// CHK-C-NEXT:    br i1 [[CMP497]], label [[ATOMIC_CONT500:%.*]], label [[ATOMIC_EXIT519:%.*]]
// CHK-C:       atomic_cont500:
// CHK-C-NEXT:    [[TMP157:%.*]] = phi i8 [ [[ATOMIC_LOAD490]], [[ATOMIC_EXIT489]] ], [ [[TMP161:%.*]], [[ATOMIC_CMP511:%.*]] ]
// CHK-C-NEXT:    store i8 [[TMP157]], ptr [[ATOMIC_TEMP501]], align 1
// CHK-C-NEXT:    [[BF_LOAD502:%.*]] = load i8, ptr [[ATOMIC_TEMP501]], align 1
// CHK-C-NEXT:    [[BF_SHL503:%.*]] = shl i8 [[BF_LOAD502]], 7
// CHK-C-NEXT:    [[BF_ASHR504:%.*]] = ashr i8 [[BF_SHL503]], 7
// CHK-C-NEXT:    [[BF_CAST505:%.*]] = sext i8 [[BF_ASHR504]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST505]], ptr [[ATMP491]], align 4
// CHK-C-NEXT:    store i8 [[TMP157]], ptr [[ATOMIC_TEMP506]], align 1
// CHK-C-NEXT:    [[TMP158:%.*]] = trunc i32 [[TMP156]] to i8
// CHK-C-NEXT:    [[BF_LOAD507:%.*]] = load i8, ptr [[ATOMIC_TEMP506]], align 1
// CHK-C-NEXT:    [[BF_VALUE508:%.*]] = and i8 [[TMP158]], 1
// CHK-C-NEXT:    [[BF_CLEAR509:%.*]] = and i8 [[BF_LOAD507]], -2
// CHK-C-NEXT:    [[BF_SET510:%.*]] = or i8 [[BF_CLEAR509]], [[BF_VALUE508]]
// CHK-C-NEXT:    store i8 [[BF_SET510]], ptr [[ATOMIC_TEMP506]], align 1
// CHK-C-NEXT:    [[TMP159:%.*]] = load i8, ptr [[ATOMIC_TEMP506]], align 1
// CHK-C-NEXT:    [[TMP160:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx4_packed, i64 2), i8 [[TMP157]], i8 [[TMP159]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP161]] = extractvalue { i8, i1 } [[TMP160]], 0
// CHK-C-NEXT:    [[TMP162:%.*]] = extractvalue { i8, i1 } [[TMP160]], 1
// CHK-C-NEXT:    br i1 [[TMP162]], label [[ATOMIC_EXIT519]], label [[ATOMIC_CMP511]]
// CHK-C:       atomic_cmp511:
// CHK-C-NEXT:    store i8 [[TMP161]], ptr [[ATOMIC_TEMP512]], align 1
// CHK-C-NEXT:    [[BF_LOAD513:%.*]] = load i8, ptr [[ATOMIC_TEMP512]], align 1
// CHK-C-NEXT:    [[BF_SHL514:%.*]] = shl i8 [[BF_LOAD513]], 7
// CHK-C-NEXT:    [[BF_ASHR515:%.*]] = ashr i8 [[BF_SHL514]], 7
// CHK-C-NEXT:    [[BF_CAST516:%.*]] = sext i8 [[BF_ASHR515]] to i32
// CHK-C-NEXT:    [[CMP517:%.*]] = icmp sgt i32 [[BF_CAST516]], [[TMP156]]
// CHK-C-NEXT:    [[FROMBOOL518:%.*]] = zext i1 [[CMP517]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL518]], ptr [[ATMP498]], align 1
// CHK-C-NEXT:    br i1 [[CMP517]], label [[ATOMIC_CONT500]], label [[ATOMIC_EXIT519]]
// CHK-C:       atomic_exit519:
// CHK-C-NEXT:    [[TMP163:%.*]] = load i32, ptr [[ATMP491]], align 4
// CHK-C-NEXT:    [[TMP164:%.*]] = load i8, ptr [[ATMP498]], align 1
// CHK-C-NEXT:    [[TMP165:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[TMP166:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD520:%.*]] = load atomic i8, ptr getelementptr (i8, ptr @bfx4_packed, i64 2) monotonic, align 1
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD520]], ptr [[ATOMIC_TEMP522]], align 1
// CHK-C-NEXT:    [[BF_LOAD523:%.*]] = load i8, ptr [[ATOMIC_TEMP522]], align 1
// CHK-C-NEXT:    [[BF_SHL524:%.*]] = shl i8 [[BF_LOAD523]], 7
// CHK-C-NEXT:    [[BF_ASHR525:%.*]] = ashr i8 [[BF_SHL524]], 7
// CHK-C-NEXT:    [[BF_CAST526:%.*]] = sext i8 [[BF_ASHR525]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST526]], ptr [[ATMP521]], align 4
// CHK-C-NEXT:    [[CMP527:%.*]] = icmp eq i32 [[BF_CAST526]], [[TMP166]]
// CHK-C-NEXT:    [[FROMBOOL529:%.*]] = zext i1 [[CMP527]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL529]], ptr [[ATMP528]], align 1
// CHK-C-NEXT:    br i1 [[CMP527]], label [[ATOMIC_CONT530:%.*]], label [[ATOMIC_EXIT549:%.*]]
// CHK-C:       atomic_cont530:
// CHK-C-NEXT:    [[TMP167:%.*]] = phi i8 [ [[ATOMIC_LOAD520]], [[ATOMIC_EXIT519]] ], [ [[TMP171:%.*]], [[ATOMIC_CMP541:%.*]] ]
// CHK-C-NEXT:    store i8 [[TMP167]], ptr [[ATOMIC_TEMP531]], align 1
// CHK-C-NEXT:    [[BF_LOAD532:%.*]] = load i8, ptr [[ATOMIC_TEMP531]], align 1
// CHK-C-NEXT:    [[BF_SHL533:%.*]] = shl i8 [[BF_LOAD532]], 7
// CHK-C-NEXT:    [[BF_ASHR534:%.*]] = ashr i8 [[BF_SHL533]], 7
// CHK-C-NEXT:    [[BF_CAST535:%.*]] = sext i8 [[BF_ASHR534]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST535]], ptr [[ATMP521]], align 4
// CHK-C-NEXT:    store i8 [[TMP167]], ptr [[ATOMIC_TEMP536]], align 1
// CHK-C-NEXT:    [[TMP168:%.*]] = trunc i32 [[TMP165]] to i8
// CHK-C-NEXT:    [[BF_LOAD537:%.*]] = load i8, ptr [[ATOMIC_TEMP536]], align 1
// CHK-C-NEXT:    [[BF_VALUE538:%.*]] = and i8 [[TMP168]], 1
// CHK-C-NEXT:    [[BF_CLEAR539:%.*]] = and i8 [[BF_LOAD537]], -2
// CHK-C-NEXT:    [[BF_SET540:%.*]] = or i8 [[BF_CLEAR539]], [[BF_VALUE538]]
// CHK-C-NEXT:    store i8 [[BF_SET540]], ptr [[ATOMIC_TEMP536]], align 1
// CHK-C-NEXT:    [[TMP169:%.*]] = load i8, ptr [[ATOMIC_TEMP536]], align 1
// CHK-C-NEXT:    [[TMP170:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx4_packed, i64 2), i8 [[TMP167]], i8 [[TMP169]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP171]] = extractvalue { i8, i1 } [[TMP170]], 0
// CHK-C-NEXT:    [[TMP172:%.*]] = extractvalue { i8, i1 } [[TMP170]], 1
// CHK-C-NEXT:    br i1 [[TMP172]], label [[ATOMIC_EXIT549]], label [[ATOMIC_CMP541]]
// CHK-C:       atomic_cmp541:
// CHK-C-NEXT:    store i8 [[TMP171]], ptr [[ATOMIC_TEMP542]], align 1
// CHK-C-NEXT:    [[BF_LOAD543:%.*]] = load i8, ptr [[ATOMIC_TEMP542]], align 1
// CHK-C-NEXT:    [[BF_SHL544:%.*]] = shl i8 [[BF_LOAD543]], 7
// CHK-C-NEXT:    [[BF_ASHR545:%.*]] = ashr i8 [[BF_SHL544]], 7
// CHK-C-NEXT:    [[BF_CAST546:%.*]] = sext i8 [[BF_ASHR545]] to i32
// CHK-C-NEXT:    [[CMP547:%.*]] = icmp eq i32 [[BF_CAST546]], [[TMP166]]
// CHK-C-NEXT:    [[FROMBOOL548:%.*]] = zext i1 [[CMP547]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL548]], ptr [[ATMP528]], align 1
// CHK-C-NEXT:    br i1 [[CMP547]], label [[ATOMIC_CONT530]], label [[ATOMIC_EXIT549]]
// CHK-C:       atomic_exit549:
// CHK-C-NEXT:    [[TMP173:%.*]] = load i32, ptr [[ATMP521]], align 4
// CHK-C-NEXT:    [[TMP174:%.*]] = load i8, ptr [[ATMP528]], align 1
// CHK-C-NEXT:    [[TMP175:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD550:%.*]] = load atomic i8, ptr getelementptr (i8, ptr @bfx4_packed, i64 2) monotonic, align 1
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD550]], ptr [[ATOMIC_TEMP552]], align 1
// CHK-C-NEXT:    [[BF_LOAD553:%.*]] = load i8, ptr [[ATOMIC_TEMP552]], align 1
// CHK-C-NEXT:    [[BF_SHL554:%.*]] = shl i8 [[BF_LOAD553]], 7
// CHK-C-NEXT:    [[BF_ASHR555:%.*]] = ashr i8 [[BF_SHL554]], 7
// CHK-C-NEXT:    [[BF_CAST556:%.*]] = sext i8 [[BF_ASHR555]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST556]], ptr [[ATMP551]], align 4
// CHK-C-NEXT:    [[CMP557:%.*]] = icmp slt i32 [[BF_CAST556]], [[TMP175]]
// CHK-C-NEXT:    [[FROMBOOL559:%.*]] = zext i1 [[CMP557]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL559]], ptr [[ATMP558]], align 1
// CHK-C-NEXT:    br i1 [[CMP557]], label [[ATOMIC_CONT560:%.*]], label [[ATOMIC_EXIT579:%.*]]
// CHK-C:       atomic_cont560:
// CHK-C-NEXT:    [[TMP176:%.*]] = phi i8 [ [[ATOMIC_LOAD550]], [[ATOMIC_EXIT549]] ], [ [[TMP180:%.*]], [[ATOMIC_CMP571:%.*]] ]
// CHK-C-NEXT:    store i8 [[TMP176]], ptr [[ATOMIC_TEMP561]], align 1
// CHK-C-NEXT:    [[BF_LOAD562:%.*]] = load i8, ptr [[ATOMIC_TEMP561]], align 1
// CHK-C-NEXT:    [[BF_SHL563:%.*]] = shl i8 [[BF_LOAD562]], 7
// CHK-C-NEXT:    [[BF_ASHR564:%.*]] = ashr i8 [[BF_SHL563]], 7
// CHK-C-NEXT:    [[BF_CAST565:%.*]] = sext i8 [[BF_ASHR564]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST565]], ptr [[ATMP551]], align 4
// CHK-C-NEXT:    store i8 [[TMP176]], ptr [[ATOMIC_TEMP566]], align 1
// CHK-C-NEXT:    [[TMP177:%.*]] = trunc i32 [[TMP175]] to i8
// CHK-C-NEXT:    [[BF_LOAD567:%.*]] = load i8, ptr [[ATOMIC_TEMP566]], align 1
// CHK-C-NEXT:    [[BF_VALUE568:%.*]] = and i8 [[TMP177]], 1
// CHK-C-NEXT:    [[BF_CLEAR569:%.*]] = and i8 [[BF_LOAD567]], -2
// CHK-C-NEXT:    [[BF_SET570:%.*]] = or i8 [[BF_CLEAR569]], [[BF_VALUE568]]
// CHK-C-NEXT:    store i8 [[BF_SET570]], ptr [[ATOMIC_TEMP566]], align 1
// CHK-C-NEXT:    [[TMP178:%.*]] = load i8, ptr [[ATOMIC_TEMP566]], align 1
// CHK-C-NEXT:    [[TMP179:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx4_packed, i64 2), i8 [[TMP176]], i8 [[TMP178]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP180]] = extractvalue { i8, i1 } [[TMP179]], 0
// CHK-C-NEXT:    [[TMP181:%.*]] = extractvalue { i8, i1 } [[TMP179]], 1
// CHK-C-NEXT:    br i1 [[TMP181]], label [[ATOMIC_EXIT579]], label [[ATOMIC_CMP571]]
// CHK-C:       atomic_cmp571:
// CHK-C-NEXT:    store i8 [[TMP180]], ptr [[ATOMIC_TEMP572]], align 1
// CHK-C-NEXT:    [[BF_LOAD573:%.*]] = load i8, ptr [[ATOMIC_TEMP572]], align 1
// CHK-C-NEXT:    [[BF_SHL574:%.*]] = shl i8 [[BF_LOAD573]], 7
// CHK-C-NEXT:    [[BF_ASHR575:%.*]] = ashr i8 [[BF_SHL574]], 7
// CHK-C-NEXT:    [[BF_CAST576:%.*]] = sext i8 [[BF_ASHR575]] to i32
// CHK-C-NEXT:    [[CMP577:%.*]] = icmp slt i32 [[BF_CAST576]], [[TMP175]]
// CHK-C-NEXT:    [[FROMBOOL578:%.*]] = zext i1 [[CMP577]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL578]], ptr [[ATMP558]], align 1
// CHK-C-NEXT:    br i1 [[CMP577]], label [[ATOMIC_CONT560]], label [[ATOMIC_EXIT579]]
// CHK-C:       atomic_exit579:
// CHK-C-NEXT:    [[TMP182:%.*]] = load i32, ptr [[ATMP551]], align 4
// CHK-C-NEXT:    [[TMP183:%.*]] = load i8, ptr [[ATMP558]], align 1
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z13test_bitfieldv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP2:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP6:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP8:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP15:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP16:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP21:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP24:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP28:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP34:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP42:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP43:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP48:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP51:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP55:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP61:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP69:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP70:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP74:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP77:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP80:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP87:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP94:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP95:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP99:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP102:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP105:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP112:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP119:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP120:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP124:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP127:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP130:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP137:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP144:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP145:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP149:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP152:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP156:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP163:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP171:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP172:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP177:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP180:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP184:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP191:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP199:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP200:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP205:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP208:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP212:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP219:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP227:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP228:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP233:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP236:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP240:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP247:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP255:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP256:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP261:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP264:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP268:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP275:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP283:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP284:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP289:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP292:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP296:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP303:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP311:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP312:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP318:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP321:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP326:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP333:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP342:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP343:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP349:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP352:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP357:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP364:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP373:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP374:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP380:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP383:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP388:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP395:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP404:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP405:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP410:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP413:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP417:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP424:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP434:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP435:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP440:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP443:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP447:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP454:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP463:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP464:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP469:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP472:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP476:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP483:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP491:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP492:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP498:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP501:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP506:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP512:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP521:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP522:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP528:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP531:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP536:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP542:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP551:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP552:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP558:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP561:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP566:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP572:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i32, ptr getelementptr (i8, ptr @bfx, i64 4) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD]], ptr [[ATOMIC_TEMP]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD:%.*]] = load i32, ptr [[ATOMIC_TEMP]], align 4
// CHK-CXX-NEXT:    [[BF_SHL:%.*]] = shl i32 [[BF_LOAD]], 1
// CHK-CXX-NEXT:    [[BF_ASHR:%.*]] = ashr i32 [[BF_SHL]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR]], ptr [[TMP]], align 4
// CHK-CXX-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[BF_ASHR]], [[TMP0]]
// CHK-CXX-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL]], ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP1:%.*]] = phi i32 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP1]], ptr [[ATOMIC_TEMP2]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD3:%.*]] = load i32, ptr [[ATOMIC_TEMP2]], align 4
// CHK-CXX-NEXT:    [[BF_SHL4:%.*]] = shl i32 [[BF_LOAD3]], 1
// CHK-CXX-NEXT:    [[BF_ASHR5:%.*]] = ashr i32 [[BF_SHL4]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR5]], ptr [[TMP]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP1]], ptr [[ATOMIC_TEMP6]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD7:%.*]] = load i32, ptr [[ATOMIC_TEMP6]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE:%.*]] = and i32 [[TMP0]], 2147483647
// CHK-CXX-NEXT:    [[BF_CLEAR:%.*]] = and i32 [[BF_LOAD7]], -2147483648
// CHK-CXX-NEXT:    [[BF_SET:%.*]] = or i32 [[BF_CLEAR]], [[BF_VALUE]]
// CHK-CXX-NEXT:    store i32 [[BF_SET]], ptr [[ATOMIC_TEMP6]], align 4
// CHK-CXX-NEXT:    [[TMP2:%.*]] = load i32, ptr [[ATOMIC_TEMP6]], align 4
// CHK-CXX-NEXT:    [[TMP3:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx, i64 4), i32 [[TMP1]], i32 [[TMP2]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP4]] = extractvalue { i32, i1 } [[TMP3]], 0
// CHK-CXX-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i1 } [[TMP3]], 1
// CHK-CXX-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    store i32 [[TMP4]], ptr [[ATOMIC_TEMP8]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD9:%.*]] = load i32, ptr [[ATOMIC_TEMP8]], align 4
// CHK-CXX-NEXT:    [[BF_SHL10:%.*]] = shl i32 [[BF_LOAD9]], 1
// CHK-CXX-NEXT:    [[BF_ASHR11:%.*]] = ashr i32 [[BF_SHL10]], 1
// CHK-CXX-NEXT:    [[CMP12:%.*]] = icmp sgt i32 [[BF_ASHR11]], [[TMP0]]
// CHK-CXX-NEXT:    [[FROMBOOL13:%.*]] = zext i1 [[CMP12]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL13]], ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP]], align 4
// CHK-CXX-NEXT:    [[TMP7:%.*]] = load i8, ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    [[TMP8:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[TMP9:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD14:%.*]] = load atomic i32, ptr getelementptr (i8, ptr @bfx, i64 4) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD14]], ptr [[ATOMIC_TEMP16]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD17:%.*]] = load i32, ptr [[ATOMIC_TEMP16]], align 4
// CHK-CXX-NEXT:    [[BF_SHL18:%.*]] = shl i32 [[BF_LOAD17]], 1
// CHK-CXX-NEXT:    [[BF_ASHR19:%.*]] = ashr i32 [[BF_SHL18]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR19]], ptr [[ATMP15]], align 4
// CHK-CXX-NEXT:    [[CMP20:%.*]] = icmp eq i32 [[BF_ASHR19]], [[TMP9]]
// CHK-CXX-NEXT:    [[FROMBOOL22:%.*]] = zext i1 [[CMP20]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL22]], ptr [[ATMP21]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP20]], label [[ATOMIC_CONT23:%.*]], label [[ATOMIC_EXIT40:%.*]]
// CHK-CXX:       atomic_cont23:
// CHK-CXX-NEXT:    [[TMP10:%.*]] = phi i32 [ [[ATOMIC_LOAD14]], [[ATOMIC_EXIT]] ], [ [[TMP13:%.*]], [[ATOMIC_CMP33:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP10]], ptr [[ATOMIC_TEMP24]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD25:%.*]] = load i32, ptr [[ATOMIC_TEMP24]], align 4
// CHK-CXX-NEXT:    [[BF_SHL26:%.*]] = shl i32 [[BF_LOAD25]], 1
// CHK-CXX-NEXT:    [[BF_ASHR27:%.*]] = ashr i32 [[BF_SHL26]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR27]], ptr [[ATMP15]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP10]], ptr [[ATOMIC_TEMP28]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD29:%.*]] = load i32, ptr [[ATOMIC_TEMP28]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE30:%.*]] = and i32 [[TMP8]], 2147483647
// CHK-CXX-NEXT:    [[BF_CLEAR31:%.*]] = and i32 [[BF_LOAD29]], -2147483648
// CHK-CXX-NEXT:    [[BF_SET32:%.*]] = or i32 [[BF_CLEAR31]], [[BF_VALUE30]]
// CHK-CXX-NEXT:    store i32 [[BF_SET32]], ptr [[ATOMIC_TEMP28]], align 4
// CHK-CXX-NEXT:    [[TMP11:%.*]] = load i32, ptr [[ATOMIC_TEMP28]], align 4
// CHK-CXX-NEXT:    [[TMP12:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx, i64 4), i32 [[TMP10]], i32 [[TMP11]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP13]] = extractvalue { i32, i1 } [[TMP12]], 0
// CHK-CXX-NEXT:    [[TMP14:%.*]] = extractvalue { i32, i1 } [[TMP12]], 1
// CHK-CXX-NEXT:    br i1 [[TMP14]], label [[ATOMIC_EXIT40]], label [[ATOMIC_CMP33]]
// CHK-CXX:       atomic_cmp33:
// CHK-CXX-NEXT:    store i32 [[TMP13]], ptr [[ATOMIC_TEMP34]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD35:%.*]] = load i32, ptr [[ATOMIC_TEMP34]], align 4
// CHK-CXX-NEXT:    [[BF_SHL36:%.*]] = shl i32 [[BF_LOAD35]], 1
// CHK-CXX-NEXT:    [[BF_ASHR37:%.*]] = ashr i32 [[BF_SHL36]], 1
// CHK-CXX-NEXT:    [[CMP38:%.*]] = icmp eq i32 [[BF_ASHR37]], [[TMP9]]
// CHK-CXX-NEXT:    [[FROMBOOL39:%.*]] = zext i1 [[CMP38]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL39]], ptr [[ATMP21]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP38]], label [[ATOMIC_CONT23]], label [[ATOMIC_EXIT40]]
// CHK-CXX:       atomic_exit40:
// CHK-CXX-NEXT:    [[TMP15:%.*]] = load i32, ptr [[ATMP15]], align 4
// CHK-CXX-NEXT:    [[TMP16:%.*]] = load i8, ptr [[ATMP21]], align 1
// CHK-CXX-NEXT:    [[TMP17:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD41:%.*]] = load atomic i32, ptr getelementptr (i8, ptr @bfx, i64 4) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD41]], ptr [[ATOMIC_TEMP43]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD44:%.*]] = load i32, ptr [[ATOMIC_TEMP43]], align 4
// CHK-CXX-NEXT:    [[BF_SHL45:%.*]] = shl i32 [[BF_LOAD44]], 1
// CHK-CXX-NEXT:    [[BF_ASHR46:%.*]] = ashr i32 [[BF_SHL45]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR46]], ptr [[ATMP42]], align 4
// CHK-CXX-NEXT:    [[CMP47:%.*]] = icmp slt i32 [[BF_ASHR46]], [[TMP17]]
// CHK-CXX-NEXT:    [[FROMBOOL49:%.*]] = zext i1 [[CMP47]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL49]], ptr [[ATMP48]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP47]], label [[ATOMIC_CONT50:%.*]], label [[ATOMIC_EXIT67:%.*]]
// CHK-CXX:       atomic_cont50:
// CHK-CXX-NEXT:    [[TMP18:%.*]] = phi i32 [ [[ATOMIC_LOAD41]], [[ATOMIC_EXIT40]] ], [ [[TMP21:%.*]], [[ATOMIC_CMP60:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP18]], ptr [[ATOMIC_TEMP51]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD52:%.*]] = load i32, ptr [[ATOMIC_TEMP51]], align 4
// CHK-CXX-NEXT:    [[BF_SHL53:%.*]] = shl i32 [[BF_LOAD52]], 1
// CHK-CXX-NEXT:    [[BF_ASHR54:%.*]] = ashr i32 [[BF_SHL53]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR54]], ptr [[ATMP42]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP18]], ptr [[ATOMIC_TEMP55]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD56:%.*]] = load i32, ptr [[ATOMIC_TEMP55]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE57:%.*]] = and i32 [[TMP17]], 2147483647
// CHK-CXX-NEXT:    [[BF_CLEAR58:%.*]] = and i32 [[BF_LOAD56]], -2147483648
// CHK-CXX-NEXT:    [[BF_SET59:%.*]] = or i32 [[BF_CLEAR58]], [[BF_VALUE57]]
// CHK-CXX-NEXT:    store i32 [[BF_SET59]], ptr [[ATOMIC_TEMP55]], align 4
// CHK-CXX-NEXT:    [[TMP19:%.*]] = load i32, ptr [[ATOMIC_TEMP55]], align 4
// CHK-CXX-NEXT:    [[TMP20:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx, i64 4), i32 [[TMP18]], i32 [[TMP19]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP21]] = extractvalue { i32, i1 } [[TMP20]], 0
// CHK-CXX-NEXT:    [[TMP22:%.*]] = extractvalue { i32, i1 } [[TMP20]], 1
// CHK-CXX-NEXT:    br i1 [[TMP22]], label [[ATOMIC_EXIT67]], label [[ATOMIC_CMP60]]
// CHK-CXX:       atomic_cmp60:
// CHK-CXX-NEXT:    store i32 [[TMP21]], ptr [[ATOMIC_TEMP61]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD62:%.*]] = load i32, ptr [[ATOMIC_TEMP61]], align 4
// CHK-CXX-NEXT:    [[BF_SHL63:%.*]] = shl i32 [[BF_LOAD62]], 1
// CHK-CXX-NEXT:    [[BF_ASHR64:%.*]] = ashr i32 [[BF_SHL63]], 1
// CHK-CXX-NEXT:    [[CMP65:%.*]] = icmp slt i32 [[BF_ASHR64]], [[TMP17]]
// CHK-CXX-NEXT:    [[FROMBOOL66:%.*]] = zext i1 [[CMP65]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL66]], ptr [[ATMP48]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP65]], label [[ATOMIC_CONT50]], label [[ATOMIC_EXIT67]]
// CHK-CXX:       atomic_exit67:
// CHK-CXX-NEXT:    [[TMP23:%.*]] = load i32, ptr [[ATMP42]], align 4
// CHK-CXX-NEXT:    [[TMP24:%.*]] = load i8, ptr [[ATMP48]], align 1
// CHK-CXX-NEXT:    [[TMP25:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD68:%.*]] = load atomic i32, ptr @bfx2 monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD68]], ptr [[ATOMIC_TEMP70]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD71:%.*]] = load i32, ptr [[ATOMIC_TEMP70]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR72:%.*]] = ashr i32 [[BF_LOAD71]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR72]], ptr [[ATMP69]], align 4
// CHK-CXX-NEXT:    [[CMP73:%.*]] = icmp sgt i32 [[BF_ASHR72]], [[TMP25]]
// CHK-CXX-NEXT:    [[FROMBOOL75:%.*]] = zext i1 [[CMP73]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL75]], ptr [[ATMP74]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP73]], label [[ATOMIC_CONT76:%.*]], label [[ATOMIC_EXIT92:%.*]]
// CHK-CXX:       atomic_cont76:
// CHK-CXX-NEXT:    [[TMP26:%.*]] = phi i32 [ [[ATOMIC_LOAD68]], [[ATOMIC_EXIT67]] ], [ [[TMP29:%.*]], [[ATOMIC_CMP86:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP26]], ptr [[ATOMIC_TEMP77]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD78:%.*]] = load i32, ptr [[ATOMIC_TEMP77]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR79:%.*]] = ashr i32 [[BF_LOAD78]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR79]], ptr [[ATMP69]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP26]], ptr [[ATOMIC_TEMP80]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD81:%.*]] = load i32, ptr [[ATOMIC_TEMP80]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE82:%.*]] = and i32 [[TMP25]], 1
// CHK-CXX-NEXT:    [[BF_SHL83:%.*]] = shl i32 [[BF_VALUE82]], 31
// CHK-CXX-NEXT:    [[BF_CLEAR84:%.*]] = and i32 [[BF_LOAD81]], 2147483647
// CHK-CXX-NEXT:    [[BF_SET85:%.*]] = or i32 [[BF_CLEAR84]], [[BF_SHL83]]
// CHK-CXX-NEXT:    store i32 [[BF_SET85]], ptr [[ATOMIC_TEMP80]], align 4
// CHK-CXX-NEXT:    [[TMP27:%.*]] = load i32, ptr [[ATOMIC_TEMP80]], align 4
// CHK-CXX-NEXT:    [[TMP28:%.*]] = cmpxchg ptr @bfx2, i32 [[TMP26]], i32 [[TMP27]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP29]] = extractvalue { i32, i1 } [[TMP28]], 0
// CHK-CXX-NEXT:    [[TMP30:%.*]] = extractvalue { i32, i1 } [[TMP28]], 1
// CHK-CXX-NEXT:    br i1 [[TMP30]], label [[ATOMIC_EXIT92]], label [[ATOMIC_CMP86]]
// CHK-CXX:       atomic_cmp86:
// CHK-CXX-NEXT:    store i32 [[TMP29]], ptr [[ATOMIC_TEMP87]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD88:%.*]] = load i32, ptr [[ATOMIC_TEMP87]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR89:%.*]] = ashr i32 [[BF_LOAD88]], 31
// CHK-CXX-NEXT:    [[CMP90:%.*]] = icmp sgt i32 [[BF_ASHR89]], [[TMP25]]
// CHK-CXX-NEXT:    [[FROMBOOL91:%.*]] = zext i1 [[CMP90]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL91]], ptr [[ATMP74]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP90]], label [[ATOMIC_CONT76]], label [[ATOMIC_EXIT92]]
// CHK-CXX:       atomic_exit92:
// CHK-CXX-NEXT:    [[TMP31:%.*]] = load i32, ptr [[ATMP69]], align 4
// CHK-CXX-NEXT:    [[TMP32:%.*]] = load i8, ptr [[ATMP74]], align 1
// CHK-CXX-NEXT:    [[TMP33:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[TMP34:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD93:%.*]] = load atomic i32, ptr @bfx2 monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD93]], ptr [[ATOMIC_TEMP95]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD96:%.*]] = load i32, ptr [[ATOMIC_TEMP95]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR97:%.*]] = ashr i32 [[BF_LOAD96]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR97]], ptr [[ATMP94]], align 4
// CHK-CXX-NEXT:    [[CMP98:%.*]] = icmp eq i32 [[BF_ASHR97]], [[TMP34]]
// CHK-CXX-NEXT:    [[FROMBOOL100:%.*]] = zext i1 [[CMP98]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL100]], ptr [[ATMP99]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP98]], label [[ATOMIC_CONT101:%.*]], label [[ATOMIC_EXIT117:%.*]]
// CHK-CXX:       atomic_cont101:
// CHK-CXX-NEXT:    [[TMP35:%.*]] = phi i32 [ [[ATOMIC_LOAD93]], [[ATOMIC_EXIT92]] ], [ [[TMP38:%.*]], [[ATOMIC_CMP111:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP35]], ptr [[ATOMIC_TEMP102]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD103:%.*]] = load i32, ptr [[ATOMIC_TEMP102]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR104:%.*]] = ashr i32 [[BF_LOAD103]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR104]], ptr [[ATMP94]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP35]], ptr [[ATOMIC_TEMP105]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD106:%.*]] = load i32, ptr [[ATOMIC_TEMP105]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE107:%.*]] = and i32 [[TMP33]], 1
// CHK-CXX-NEXT:    [[BF_SHL108:%.*]] = shl i32 [[BF_VALUE107]], 31
// CHK-CXX-NEXT:    [[BF_CLEAR109:%.*]] = and i32 [[BF_LOAD106]], 2147483647
// CHK-CXX-NEXT:    [[BF_SET110:%.*]] = or i32 [[BF_CLEAR109]], [[BF_SHL108]]
// CHK-CXX-NEXT:    store i32 [[BF_SET110]], ptr [[ATOMIC_TEMP105]], align 4
// CHK-CXX-NEXT:    [[TMP36:%.*]] = load i32, ptr [[ATOMIC_TEMP105]], align 4
// CHK-CXX-NEXT:    [[TMP37:%.*]] = cmpxchg ptr @bfx2, i32 [[TMP35]], i32 [[TMP36]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP38]] = extractvalue { i32, i1 } [[TMP37]], 0
// CHK-CXX-NEXT:    [[TMP39:%.*]] = extractvalue { i32, i1 } [[TMP37]], 1
// CHK-CXX-NEXT:    br i1 [[TMP39]], label [[ATOMIC_EXIT117]], label [[ATOMIC_CMP111]]
// CHK-CXX:       atomic_cmp111:
// CHK-CXX-NEXT:    store i32 [[TMP38]], ptr [[ATOMIC_TEMP112]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD113:%.*]] = load i32, ptr [[ATOMIC_TEMP112]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR114:%.*]] = ashr i32 [[BF_LOAD113]], 31
// CHK-CXX-NEXT:    [[CMP115:%.*]] = icmp eq i32 [[BF_ASHR114]], [[TMP34]]
// CHK-CXX-NEXT:    [[FROMBOOL116:%.*]] = zext i1 [[CMP115]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL116]], ptr [[ATMP99]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP115]], label [[ATOMIC_CONT101]], label [[ATOMIC_EXIT117]]
// CHK-CXX:       atomic_exit117:
// CHK-CXX-NEXT:    [[TMP40:%.*]] = load i32, ptr [[ATMP94]], align 4
// CHK-CXX-NEXT:    [[TMP41:%.*]] = load i8, ptr [[ATMP99]], align 1
// CHK-CXX-NEXT:    [[TMP42:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD118:%.*]] = load atomic i32, ptr @bfx2 monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD118]], ptr [[ATOMIC_TEMP120]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD121:%.*]] = load i32, ptr [[ATOMIC_TEMP120]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR122:%.*]] = ashr i32 [[BF_LOAD121]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR122]], ptr [[ATMP119]], align 4
// CHK-CXX-NEXT:    [[CMP123:%.*]] = icmp slt i32 [[BF_ASHR122]], [[TMP42]]
// CHK-CXX-NEXT:    [[FROMBOOL125:%.*]] = zext i1 [[CMP123]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL125]], ptr [[ATMP124]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP123]], label [[ATOMIC_CONT126:%.*]], label [[ATOMIC_EXIT142:%.*]]
// CHK-CXX:       atomic_cont126:
// CHK-CXX-NEXT:    [[TMP43:%.*]] = phi i32 [ [[ATOMIC_LOAD118]], [[ATOMIC_EXIT117]] ], [ [[TMP46:%.*]], [[ATOMIC_CMP136:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP43]], ptr [[ATOMIC_TEMP127]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD128:%.*]] = load i32, ptr [[ATOMIC_TEMP127]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR129:%.*]] = ashr i32 [[BF_LOAD128]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR129]], ptr [[ATMP119]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP43]], ptr [[ATOMIC_TEMP130]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD131:%.*]] = load i32, ptr [[ATOMIC_TEMP130]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE132:%.*]] = and i32 [[TMP42]], 1
// CHK-CXX-NEXT:    [[BF_SHL133:%.*]] = shl i32 [[BF_VALUE132]], 31
// CHK-CXX-NEXT:    [[BF_CLEAR134:%.*]] = and i32 [[BF_LOAD131]], 2147483647
// CHK-CXX-NEXT:    [[BF_SET135:%.*]] = or i32 [[BF_CLEAR134]], [[BF_SHL133]]
// CHK-CXX-NEXT:    store i32 [[BF_SET135]], ptr [[ATOMIC_TEMP130]], align 4
// CHK-CXX-NEXT:    [[TMP44:%.*]] = load i32, ptr [[ATOMIC_TEMP130]], align 4
// CHK-CXX-NEXT:    [[TMP45:%.*]] = cmpxchg ptr @bfx2, i32 [[TMP43]], i32 [[TMP44]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP46]] = extractvalue { i32, i1 } [[TMP45]], 0
// CHK-CXX-NEXT:    [[TMP47:%.*]] = extractvalue { i32, i1 } [[TMP45]], 1
// CHK-CXX-NEXT:    br i1 [[TMP47]], label [[ATOMIC_EXIT142]], label [[ATOMIC_CMP136]]
// CHK-CXX:       atomic_cmp136:
// CHK-CXX-NEXT:    store i32 [[TMP46]], ptr [[ATOMIC_TEMP137]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD138:%.*]] = load i32, ptr [[ATOMIC_TEMP137]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR139:%.*]] = ashr i32 [[BF_LOAD138]], 31
// CHK-CXX-NEXT:    [[CMP140:%.*]] = icmp slt i32 [[BF_ASHR139]], [[TMP42]]
// CHK-CXX-NEXT:    [[FROMBOOL141:%.*]] = zext i1 [[CMP140]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL141]], ptr [[ATMP124]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP140]], label [[ATOMIC_CONT126]], label [[ATOMIC_EXIT142]]
// CHK-CXX:       atomic_exit142:
// CHK-CXX-NEXT:    [[TMP48:%.*]] = load i32, ptr [[ATMP119]], align 4
// CHK-CXX-NEXT:    [[TMP49:%.*]] = load i8, ptr [[ATMP124]], align 1
// CHK-CXX-NEXT:    [[TMP50:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD143:%.*]] = load atomic i8, ptr getelementptr (i8, ptr @bfx2_packed, i64 3) monotonic, align 1
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD143]], ptr [[ATOMIC_TEMP145]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD146:%.*]] = load i8, ptr [[ATOMIC_TEMP145]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR147:%.*]] = ashr i8 [[BF_LOAD146]], 7
// CHK-CXX-NEXT:    [[BF_CAST:%.*]] = sext i8 [[BF_ASHR147]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST]], ptr [[ATMP144]], align 4
// CHK-CXX-NEXT:    [[CMP148:%.*]] = icmp sgt i32 [[BF_CAST]], [[TMP50]]
// CHK-CXX-NEXT:    [[FROMBOOL150:%.*]] = zext i1 [[CMP148]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL150]], ptr [[ATMP149]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP148]], label [[ATOMIC_CONT151:%.*]], label [[ATOMIC_EXIT169:%.*]]
// CHK-CXX:       atomic_cont151:
// CHK-CXX-NEXT:    [[TMP51:%.*]] = phi i8 [ [[ATOMIC_LOAD143]], [[ATOMIC_EXIT142]] ], [ [[TMP55:%.*]], [[ATOMIC_CMP162:%.*]] ]
// CHK-CXX-NEXT:    store i8 [[TMP51]], ptr [[ATOMIC_TEMP152]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD153:%.*]] = load i8, ptr [[ATOMIC_TEMP152]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR154:%.*]] = ashr i8 [[BF_LOAD153]], 7
// CHK-CXX-NEXT:    [[BF_CAST155:%.*]] = sext i8 [[BF_ASHR154]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST155]], ptr [[ATMP144]], align 4
// CHK-CXX-NEXT:    store i8 [[TMP51]], ptr [[ATOMIC_TEMP156]], align 1
// CHK-CXX-NEXT:    [[TMP52:%.*]] = trunc i32 [[TMP50]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD157:%.*]] = load i8, ptr [[ATOMIC_TEMP156]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE158:%.*]] = and i8 [[TMP52]], 1
// CHK-CXX-NEXT:    [[BF_SHL159:%.*]] = shl i8 [[BF_VALUE158]], 7
// CHK-CXX-NEXT:    [[BF_CLEAR160:%.*]] = and i8 [[BF_LOAD157]], 127
// CHK-CXX-NEXT:    [[BF_SET161:%.*]] = or i8 [[BF_CLEAR160]], [[BF_SHL159]]
// CHK-CXX-NEXT:    store i8 [[BF_SET161]], ptr [[ATOMIC_TEMP156]], align 1
// CHK-CXX-NEXT:    [[TMP53:%.*]] = load i8, ptr [[ATOMIC_TEMP156]], align 1
// CHK-CXX-NEXT:    [[TMP54:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx2_packed, i64 3), i8 [[TMP51]], i8 [[TMP53]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP55]] = extractvalue { i8, i1 } [[TMP54]], 0
// CHK-CXX-NEXT:    [[TMP56:%.*]] = extractvalue { i8, i1 } [[TMP54]], 1
// CHK-CXX-NEXT:    br i1 [[TMP56]], label [[ATOMIC_EXIT169]], label [[ATOMIC_CMP162]]
// CHK-CXX:       atomic_cmp162:
// CHK-CXX-NEXT:    store i8 [[TMP55]], ptr [[ATOMIC_TEMP163]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD164:%.*]] = load i8, ptr [[ATOMIC_TEMP163]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR165:%.*]] = ashr i8 [[BF_LOAD164]], 7
// CHK-CXX-NEXT:    [[BF_CAST166:%.*]] = sext i8 [[BF_ASHR165]] to i32
// CHK-CXX-NEXT:    [[CMP167:%.*]] = icmp sgt i32 [[BF_CAST166]], [[TMP50]]
// CHK-CXX-NEXT:    [[FROMBOOL168:%.*]] = zext i1 [[CMP167]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL168]], ptr [[ATMP149]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP167]], label [[ATOMIC_CONT151]], label [[ATOMIC_EXIT169]]
// CHK-CXX:       atomic_exit169:
// CHK-CXX-NEXT:    [[TMP57:%.*]] = load i32, ptr [[ATMP144]], align 4
// CHK-CXX-NEXT:    [[TMP58:%.*]] = load i8, ptr [[ATMP149]], align 1
// CHK-CXX-NEXT:    [[TMP59:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[TMP60:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD170:%.*]] = load atomic i8, ptr getelementptr (i8, ptr @bfx2_packed, i64 3) monotonic, align 1
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD170]], ptr [[ATOMIC_TEMP172]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD173:%.*]] = load i8, ptr [[ATOMIC_TEMP172]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR174:%.*]] = ashr i8 [[BF_LOAD173]], 7
// CHK-CXX-NEXT:    [[BF_CAST175:%.*]] = sext i8 [[BF_ASHR174]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST175]], ptr [[ATMP171]], align 4
// CHK-CXX-NEXT:    [[CMP176:%.*]] = icmp eq i32 [[BF_CAST175]], [[TMP60]]
// CHK-CXX-NEXT:    [[FROMBOOL178:%.*]] = zext i1 [[CMP176]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL178]], ptr [[ATMP177]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP176]], label [[ATOMIC_CONT179:%.*]], label [[ATOMIC_EXIT197:%.*]]
// CHK-CXX:       atomic_cont179:
// CHK-CXX-NEXT:    [[TMP61:%.*]] = phi i8 [ [[ATOMIC_LOAD170]], [[ATOMIC_EXIT169]] ], [ [[TMP65:%.*]], [[ATOMIC_CMP190:%.*]] ]
// CHK-CXX-NEXT:    store i8 [[TMP61]], ptr [[ATOMIC_TEMP180]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD181:%.*]] = load i8, ptr [[ATOMIC_TEMP180]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR182:%.*]] = ashr i8 [[BF_LOAD181]], 7
// CHK-CXX-NEXT:    [[BF_CAST183:%.*]] = sext i8 [[BF_ASHR182]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST183]], ptr [[ATMP171]], align 4
// CHK-CXX-NEXT:    store i8 [[TMP61]], ptr [[ATOMIC_TEMP184]], align 1
// CHK-CXX-NEXT:    [[TMP62:%.*]] = trunc i32 [[TMP59]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD185:%.*]] = load i8, ptr [[ATOMIC_TEMP184]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE186:%.*]] = and i8 [[TMP62]], 1
// CHK-CXX-NEXT:    [[BF_SHL187:%.*]] = shl i8 [[BF_VALUE186]], 7
// CHK-CXX-NEXT:    [[BF_CLEAR188:%.*]] = and i8 [[BF_LOAD185]], 127
// CHK-CXX-NEXT:    [[BF_SET189:%.*]] = or i8 [[BF_CLEAR188]], [[BF_SHL187]]
// CHK-CXX-NEXT:    store i8 [[BF_SET189]], ptr [[ATOMIC_TEMP184]], align 1
// CHK-CXX-NEXT:    [[TMP63:%.*]] = load i8, ptr [[ATOMIC_TEMP184]], align 1
// CHK-CXX-NEXT:    [[TMP64:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx2_packed, i64 3), i8 [[TMP61]], i8 [[TMP63]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP65]] = extractvalue { i8, i1 } [[TMP64]], 0
// CHK-CXX-NEXT:    [[TMP66:%.*]] = extractvalue { i8, i1 } [[TMP64]], 1
// CHK-CXX-NEXT:    br i1 [[TMP66]], label [[ATOMIC_EXIT197]], label [[ATOMIC_CMP190]]
// CHK-CXX:       atomic_cmp190:
// CHK-CXX-NEXT:    store i8 [[TMP65]], ptr [[ATOMIC_TEMP191]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD192:%.*]] = load i8, ptr [[ATOMIC_TEMP191]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR193:%.*]] = ashr i8 [[BF_LOAD192]], 7
// CHK-CXX-NEXT:    [[BF_CAST194:%.*]] = sext i8 [[BF_ASHR193]] to i32
// CHK-CXX-NEXT:    [[CMP195:%.*]] = icmp eq i32 [[BF_CAST194]], [[TMP60]]
// CHK-CXX-NEXT:    [[FROMBOOL196:%.*]] = zext i1 [[CMP195]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL196]], ptr [[ATMP177]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP195]], label [[ATOMIC_CONT179]], label [[ATOMIC_EXIT197]]
// CHK-CXX:       atomic_exit197:
// CHK-CXX-NEXT:    [[TMP67:%.*]] = load i32, ptr [[ATMP171]], align 4
// CHK-CXX-NEXT:    [[TMP68:%.*]] = load i8, ptr [[ATMP177]], align 1
// CHK-CXX-NEXT:    [[TMP69:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD198:%.*]] = load atomic i8, ptr getelementptr (i8, ptr @bfx2_packed, i64 3) monotonic, align 1
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD198]], ptr [[ATOMIC_TEMP200]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD201:%.*]] = load i8, ptr [[ATOMIC_TEMP200]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR202:%.*]] = ashr i8 [[BF_LOAD201]], 7
// CHK-CXX-NEXT:    [[BF_CAST203:%.*]] = sext i8 [[BF_ASHR202]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST203]], ptr [[ATMP199]], align 4
// CHK-CXX-NEXT:    [[CMP204:%.*]] = icmp slt i32 [[BF_CAST203]], [[TMP69]]
// CHK-CXX-NEXT:    [[FROMBOOL206:%.*]] = zext i1 [[CMP204]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL206]], ptr [[ATMP205]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP204]], label [[ATOMIC_CONT207:%.*]], label [[ATOMIC_EXIT225:%.*]]
// CHK-CXX:       atomic_cont207:
// CHK-CXX-NEXT:    [[TMP70:%.*]] = phi i8 [ [[ATOMIC_LOAD198]], [[ATOMIC_EXIT197]] ], [ [[TMP74:%.*]], [[ATOMIC_CMP218:%.*]] ]
// CHK-CXX-NEXT:    store i8 [[TMP70]], ptr [[ATOMIC_TEMP208]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD209:%.*]] = load i8, ptr [[ATOMIC_TEMP208]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR210:%.*]] = ashr i8 [[BF_LOAD209]], 7
// CHK-CXX-NEXT:    [[BF_CAST211:%.*]] = sext i8 [[BF_ASHR210]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST211]], ptr [[ATMP199]], align 4
// CHK-CXX-NEXT:    store i8 [[TMP70]], ptr [[ATOMIC_TEMP212]], align 1
// CHK-CXX-NEXT:    [[TMP71:%.*]] = trunc i32 [[TMP69]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD213:%.*]] = load i8, ptr [[ATOMIC_TEMP212]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE214:%.*]] = and i8 [[TMP71]], 1
// CHK-CXX-NEXT:    [[BF_SHL215:%.*]] = shl i8 [[BF_VALUE214]], 7
// CHK-CXX-NEXT:    [[BF_CLEAR216:%.*]] = and i8 [[BF_LOAD213]], 127
// CHK-CXX-NEXT:    [[BF_SET217:%.*]] = or i8 [[BF_CLEAR216]], [[BF_SHL215]]
// CHK-CXX-NEXT:    store i8 [[BF_SET217]], ptr [[ATOMIC_TEMP212]], align 1
// CHK-CXX-NEXT:    [[TMP72:%.*]] = load i8, ptr [[ATOMIC_TEMP212]], align 1
// CHK-CXX-NEXT:    [[TMP73:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx2_packed, i64 3), i8 [[TMP70]], i8 [[TMP72]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP74]] = extractvalue { i8, i1 } [[TMP73]], 0
// CHK-CXX-NEXT:    [[TMP75:%.*]] = extractvalue { i8, i1 } [[TMP73]], 1
// CHK-CXX-NEXT:    br i1 [[TMP75]], label [[ATOMIC_EXIT225]], label [[ATOMIC_CMP218]]
// CHK-CXX:       atomic_cmp218:
// CHK-CXX-NEXT:    store i8 [[TMP74]], ptr [[ATOMIC_TEMP219]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD220:%.*]] = load i8, ptr [[ATOMIC_TEMP219]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR221:%.*]] = ashr i8 [[BF_LOAD220]], 7
// CHK-CXX-NEXT:    [[BF_CAST222:%.*]] = sext i8 [[BF_ASHR221]] to i32
// CHK-CXX-NEXT:    [[CMP223:%.*]] = icmp slt i32 [[BF_CAST222]], [[TMP69]]
// CHK-CXX-NEXT:    [[FROMBOOL224:%.*]] = zext i1 [[CMP223]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL224]], ptr [[ATMP205]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP223]], label [[ATOMIC_CONT207]], label [[ATOMIC_EXIT225]]
// CHK-CXX:       atomic_exit225:
// CHK-CXX-NEXT:    [[TMP76:%.*]] = load i32, ptr [[ATMP199]], align 4
// CHK-CXX-NEXT:    [[TMP77:%.*]] = load i8, ptr [[ATMP205]], align 1
// CHK-CXX-NEXT:    [[TMP78:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD226:%.*]] = load atomic i32, ptr @bfx3 monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD226]], ptr [[ATOMIC_TEMP228]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD229:%.*]] = load i32, ptr [[ATOMIC_TEMP228]], align 4
// CHK-CXX-NEXT:    [[BF_SHL230:%.*]] = shl i32 [[BF_LOAD229]], 7
// CHK-CXX-NEXT:    [[BF_ASHR231:%.*]] = ashr i32 [[BF_SHL230]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR231]], ptr [[ATMP227]], align 4
// CHK-CXX-NEXT:    [[CMP232:%.*]] = icmp sgt i32 [[BF_ASHR231]], [[TMP78]]
// CHK-CXX-NEXT:    [[FROMBOOL234:%.*]] = zext i1 [[CMP232]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL234]], ptr [[ATMP233]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP232]], label [[ATOMIC_CONT235:%.*]], label [[ATOMIC_EXIT253:%.*]]
// CHK-CXX:       atomic_cont235:
// CHK-CXX-NEXT:    [[TMP79:%.*]] = phi i32 [ [[ATOMIC_LOAD226]], [[ATOMIC_EXIT225]] ], [ [[TMP82:%.*]], [[ATOMIC_CMP246:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP79]], ptr [[ATOMIC_TEMP236]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD237:%.*]] = load i32, ptr [[ATOMIC_TEMP236]], align 4
// CHK-CXX-NEXT:    [[BF_SHL238:%.*]] = shl i32 [[BF_LOAD237]], 7
// CHK-CXX-NEXT:    [[BF_ASHR239:%.*]] = ashr i32 [[BF_SHL238]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR239]], ptr [[ATMP227]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP79]], ptr [[ATOMIC_TEMP240]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD241:%.*]] = load i32, ptr [[ATOMIC_TEMP240]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE242:%.*]] = and i32 [[TMP78]], 16383
// CHK-CXX-NEXT:    [[BF_SHL243:%.*]] = shl i32 [[BF_VALUE242]], 11
// CHK-CXX-NEXT:    [[BF_CLEAR244:%.*]] = and i32 [[BF_LOAD241]], -33552385
// CHK-CXX-NEXT:    [[BF_SET245:%.*]] = or i32 [[BF_CLEAR244]], [[BF_SHL243]]
// CHK-CXX-NEXT:    store i32 [[BF_SET245]], ptr [[ATOMIC_TEMP240]], align 4
// CHK-CXX-NEXT:    [[TMP80:%.*]] = load i32, ptr [[ATOMIC_TEMP240]], align 4
// CHK-CXX-NEXT:    [[TMP81:%.*]] = cmpxchg ptr @bfx3, i32 [[TMP79]], i32 [[TMP80]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP82]] = extractvalue { i32, i1 } [[TMP81]], 0
// CHK-CXX-NEXT:    [[TMP83:%.*]] = extractvalue { i32, i1 } [[TMP81]], 1
// CHK-CXX-NEXT:    br i1 [[TMP83]], label [[ATOMIC_EXIT253]], label [[ATOMIC_CMP246]]
// CHK-CXX:       atomic_cmp246:
// CHK-CXX-NEXT:    store i32 [[TMP82]], ptr [[ATOMIC_TEMP247]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD248:%.*]] = load i32, ptr [[ATOMIC_TEMP247]], align 4
// CHK-CXX-NEXT:    [[BF_SHL249:%.*]] = shl i32 [[BF_LOAD248]], 7
// CHK-CXX-NEXT:    [[BF_ASHR250:%.*]] = ashr i32 [[BF_SHL249]], 18
// CHK-CXX-NEXT:    [[CMP251:%.*]] = icmp sgt i32 [[BF_ASHR250]], [[TMP78]]
// CHK-CXX-NEXT:    [[FROMBOOL252:%.*]] = zext i1 [[CMP251]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL252]], ptr [[ATMP233]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP251]], label [[ATOMIC_CONT235]], label [[ATOMIC_EXIT253]]
// CHK-CXX:       atomic_exit253:
// CHK-CXX-NEXT:    [[TMP84:%.*]] = load i32, ptr [[ATMP227]], align 4
// CHK-CXX-NEXT:    [[TMP85:%.*]] = load i8, ptr [[ATMP233]], align 1
// CHK-CXX-NEXT:    [[TMP86:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[TMP87:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD254:%.*]] = load atomic i32, ptr @bfx3 monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD254]], ptr [[ATOMIC_TEMP256]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD257:%.*]] = load i32, ptr [[ATOMIC_TEMP256]], align 4
// CHK-CXX-NEXT:    [[BF_SHL258:%.*]] = shl i32 [[BF_LOAD257]], 7
// CHK-CXX-NEXT:    [[BF_ASHR259:%.*]] = ashr i32 [[BF_SHL258]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR259]], ptr [[ATMP255]], align 4
// CHK-CXX-NEXT:    [[CMP260:%.*]] = icmp eq i32 [[BF_ASHR259]], [[TMP87]]
// CHK-CXX-NEXT:    [[FROMBOOL262:%.*]] = zext i1 [[CMP260]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL262]], ptr [[ATMP261]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP260]], label [[ATOMIC_CONT263:%.*]], label [[ATOMIC_EXIT281:%.*]]
// CHK-CXX:       atomic_cont263:
// CHK-CXX-NEXT:    [[TMP88:%.*]] = phi i32 [ [[ATOMIC_LOAD254]], [[ATOMIC_EXIT253]] ], [ [[TMP91:%.*]], [[ATOMIC_CMP274:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP88]], ptr [[ATOMIC_TEMP264]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD265:%.*]] = load i32, ptr [[ATOMIC_TEMP264]], align 4
// CHK-CXX-NEXT:    [[BF_SHL266:%.*]] = shl i32 [[BF_LOAD265]], 7
// CHK-CXX-NEXT:    [[BF_ASHR267:%.*]] = ashr i32 [[BF_SHL266]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR267]], ptr [[ATMP255]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP88]], ptr [[ATOMIC_TEMP268]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD269:%.*]] = load i32, ptr [[ATOMIC_TEMP268]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE270:%.*]] = and i32 [[TMP86]], 16383
// CHK-CXX-NEXT:    [[BF_SHL271:%.*]] = shl i32 [[BF_VALUE270]], 11
// CHK-CXX-NEXT:    [[BF_CLEAR272:%.*]] = and i32 [[BF_LOAD269]], -33552385
// CHK-CXX-NEXT:    [[BF_SET273:%.*]] = or i32 [[BF_CLEAR272]], [[BF_SHL271]]
// CHK-CXX-NEXT:    store i32 [[BF_SET273]], ptr [[ATOMIC_TEMP268]], align 4
// CHK-CXX-NEXT:    [[TMP89:%.*]] = load i32, ptr [[ATOMIC_TEMP268]], align 4
// CHK-CXX-NEXT:    [[TMP90:%.*]] = cmpxchg ptr @bfx3, i32 [[TMP88]], i32 [[TMP89]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP91]] = extractvalue { i32, i1 } [[TMP90]], 0
// CHK-CXX-NEXT:    [[TMP92:%.*]] = extractvalue { i32, i1 } [[TMP90]], 1
// CHK-CXX-NEXT:    br i1 [[TMP92]], label [[ATOMIC_EXIT281]], label [[ATOMIC_CMP274]]
// CHK-CXX:       atomic_cmp274:
// CHK-CXX-NEXT:    store i32 [[TMP91]], ptr [[ATOMIC_TEMP275]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD276:%.*]] = load i32, ptr [[ATOMIC_TEMP275]], align 4
// CHK-CXX-NEXT:    [[BF_SHL277:%.*]] = shl i32 [[BF_LOAD276]], 7
// CHK-CXX-NEXT:    [[BF_ASHR278:%.*]] = ashr i32 [[BF_SHL277]], 18
// CHK-CXX-NEXT:    [[CMP279:%.*]] = icmp eq i32 [[BF_ASHR278]], [[TMP87]]
// CHK-CXX-NEXT:    [[FROMBOOL280:%.*]] = zext i1 [[CMP279]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL280]], ptr [[ATMP261]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP279]], label [[ATOMIC_CONT263]], label [[ATOMIC_EXIT281]]
// CHK-CXX:       atomic_exit281:
// CHK-CXX-NEXT:    [[TMP93:%.*]] = load i32, ptr [[ATMP255]], align 4
// CHK-CXX-NEXT:    [[TMP94:%.*]] = load i8, ptr [[ATMP261]], align 1
// CHK-CXX-NEXT:    [[TMP95:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD282:%.*]] = load atomic i32, ptr @bfx3 monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD282]], ptr [[ATOMIC_TEMP284]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD285:%.*]] = load i32, ptr [[ATOMIC_TEMP284]], align 4
// CHK-CXX-NEXT:    [[BF_SHL286:%.*]] = shl i32 [[BF_LOAD285]], 7
// CHK-CXX-NEXT:    [[BF_ASHR287:%.*]] = ashr i32 [[BF_SHL286]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR287]], ptr [[ATMP283]], align 4
// CHK-CXX-NEXT:    [[CMP288:%.*]] = icmp slt i32 [[BF_ASHR287]], [[TMP95]]
// CHK-CXX-NEXT:    [[FROMBOOL290:%.*]] = zext i1 [[CMP288]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL290]], ptr [[ATMP289]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP288]], label [[ATOMIC_CONT291:%.*]], label [[ATOMIC_EXIT309:%.*]]
// CHK-CXX:       atomic_cont291:
// CHK-CXX-NEXT:    [[TMP96:%.*]] = phi i32 [ [[ATOMIC_LOAD282]], [[ATOMIC_EXIT281]] ], [ [[TMP99:%.*]], [[ATOMIC_CMP302:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP96]], ptr [[ATOMIC_TEMP292]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD293:%.*]] = load i32, ptr [[ATOMIC_TEMP292]], align 4
// CHK-CXX-NEXT:    [[BF_SHL294:%.*]] = shl i32 [[BF_LOAD293]], 7
// CHK-CXX-NEXT:    [[BF_ASHR295:%.*]] = ashr i32 [[BF_SHL294]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR295]], ptr [[ATMP283]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP96]], ptr [[ATOMIC_TEMP296]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD297:%.*]] = load i32, ptr [[ATOMIC_TEMP296]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE298:%.*]] = and i32 [[TMP95]], 16383
// CHK-CXX-NEXT:    [[BF_SHL299:%.*]] = shl i32 [[BF_VALUE298]], 11
// CHK-CXX-NEXT:    [[BF_CLEAR300:%.*]] = and i32 [[BF_LOAD297]], -33552385
// CHK-CXX-NEXT:    [[BF_SET301:%.*]] = or i32 [[BF_CLEAR300]], [[BF_SHL299]]
// CHK-CXX-NEXT:    store i32 [[BF_SET301]], ptr [[ATOMIC_TEMP296]], align 4
// CHK-CXX-NEXT:    [[TMP97:%.*]] = load i32, ptr [[ATOMIC_TEMP296]], align 4
// CHK-CXX-NEXT:    [[TMP98:%.*]] = cmpxchg ptr @bfx3, i32 [[TMP96]], i32 [[TMP97]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP99]] = extractvalue { i32, i1 } [[TMP98]], 0
// CHK-CXX-NEXT:    [[TMP100:%.*]] = extractvalue { i32, i1 } [[TMP98]], 1
// CHK-CXX-NEXT:    br i1 [[TMP100]], label [[ATOMIC_EXIT309]], label [[ATOMIC_CMP302]]
// CHK-CXX:       atomic_cmp302:
// CHK-CXX-NEXT:    store i32 [[TMP99]], ptr [[ATOMIC_TEMP303]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD304:%.*]] = load i32, ptr [[ATOMIC_TEMP303]], align 4
// CHK-CXX-NEXT:    [[BF_SHL305:%.*]] = shl i32 [[BF_LOAD304]], 7
// CHK-CXX-NEXT:    [[BF_ASHR306:%.*]] = ashr i32 [[BF_SHL305]], 18
// CHK-CXX-NEXT:    [[CMP307:%.*]] = icmp slt i32 [[BF_ASHR306]], [[TMP95]]
// CHK-CXX-NEXT:    [[FROMBOOL308:%.*]] = zext i1 [[CMP307]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL308]], ptr [[ATMP289]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP307]], label [[ATOMIC_CONT291]], label [[ATOMIC_EXIT309]]
// CHK-CXX:       atomic_exit309:
// CHK-CXX-NEXT:    [[TMP101:%.*]] = load i32, ptr [[ATMP283]], align 4
// CHK-CXX-NEXT:    [[TMP102:%.*]] = load i8, ptr [[ATMP289]], align 1
// CHK-CXX-NEXT:    [[TMP103:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD310:%.*]] = load atomic i64, ptr @bfx4 monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD310]], ptr [[ATOMIC_TEMP312]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD313:%.*]] = load i64, ptr [[ATOMIC_TEMP312]], align 8
// CHK-CXX-NEXT:    [[BF_SHL314:%.*]] = shl i64 [[BF_LOAD313]], 47
// CHK-CXX-NEXT:    [[BF_ASHR315:%.*]] = ashr i64 [[BF_SHL314]], 63
// CHK-CXX-NEXT:    [[BF_CAST316:%.*]] = trunc i64 [[BF_ASHR315]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST316]], ptr [[ATMP311]], align 4
// CHK-CXX-NEXT:    [[CMP317:%.*]] = icmp sgt i32 [[BF_CAST316]], [[TMP103]]
// CHK-CXX-NEXT:    [[FROMBOOL319:%.*]] = zext i1 [[CMP317]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL319]], ptr [[ATMP318]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP317]], label [[ATOMIC_CONT320:%.*]], label [[ATOMIC_EXIT340:%.*]]
// CHK-CXX:       atomic_cont320:
// CHK-CXX-NEXT:    [[TMP104:%.*]] = phi i64 [ [[ATOMIC_LOAD310]], [[ATOMIC_EXIT309]] ], [ [[TMP108:%.*]], [[ATOMIC_CMP332:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP104]], ptr [[ATOMIC_TEMP321]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD322:%.*]] = load i64, ptr [[ATOMIC_TEMP321]], align 8
// CHK-CXX-NEXT:    [[BF_SHL323:%.*]] = shl i64 [[BF_LOAD322]], 47
// CHK-CXX-NEXT:    [[BF_ASHR324:%.*]] = ashr i64 [[BF_SHL323]], 63
// CHK-CXX-NEXT:    [[BF_CAST325:%.*]] = trunc i64 [[BF_ASHR324]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST325]], ptr [[ATMP311]], align 4
// CHK-CXX-NEXT:    store i64 [[TMP104]], ptr [[ATOMIC_TEMP326]], align 8
// CHK-CXX-NEXT:    [[TMP105:%.*]] = zext i32 [[TMP103]] to i64
// CHK-CXX-NEXT:    [[BF_LOAD327:%.*]] = load i64, ptr [[ATOMIC_TEMP326]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE328:%.*]] = and i64 [[TMP105]], 1
// CHK-CXX-NEXT:    [[BF_SHL329:%.*]] = shl i64 [[BF_VALUE328]], 16
// CHK-CXX-NEXT:    [[BF_CLEAR330:%.*]] = and i64 [[BF_LOAD327]], -65537
// CHK-CXX-NEXT:    [[BF_SET331:%.*]] = or i64 [[BF_CLEAR330]], [[BF_SHL329]]
// CHK-CXX-NEXT:    store i64 [[BF_SET331]], ptr [[ATOMIC_TEMP326]], align 8
// CHK-CXX-NEXT:    [[TMP106:%.*]] = load i64, ptr [[ATOMIC_TEMP326]], align 8
// CHK-CXX-NEXT:    [[TMP107:%.*]] = cmpxchg ptr @bfx4, i64 [[TMP104]], i64 [[TMP106]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP108]] = extractvalue { i64, i1 } [[TMP107]], 0
// CHK-CXX-NEXT:    [[TMP109:%.*]] = extractvalue { i64, i1 } [[TMP107]], 1
// CHK-CXX-NEXT:    br i1 [[TMP109]], label [[ATOMIC_EXIT340]], label [[ATOMIC_CMP332]]
// CHK-CXX:       atomic_cmp332:
// CHK-CXX-NEXT:    store i64 [[TMP108]], ptr [[ATOMIC_TEMP333]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD334:%.*]] = load i64, ptr [[ATOMIC_TEMP333]], align 8
// CHK-CXX-NEXT:    [[BF_SHL335:%.*]] = shl i64 [[BF_LOAD334]], 47
// CHK-CXX-NEXT:    [[BF_ASHR336:%.*]] = ashr i64 [[BF_SHL335]], 63
// CHK-CXX-NEXT:    [[BF_CAST337:%.*]] = trunc i64 [[BF_ASHR336]] to i32
// CHK-CXX-NEXT:    [[CMP338:%.*]] = icmp sgt i32 [[BF_CAST337]], [[TMP103]]
// CHK-CXX-NEXT:    [[FROMBOOL339:%.*]] = zext i1 [[CMP338]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL339]], ptr [[ATMP318]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP338]], label [[ATOMIC_CONT320]], label [[ATOMIC_EXIT340]]
// CHK-CXX:       atomic_exit340:
// CHK-CXX-NEXT:    [[TMP110:%.*]] = load i32, ptr [[ATMP311]], align 4
// CHK-CXX-NEXT:    [[TMP111:%.*]] = load i8, ptr [[ATMP318]], align 1
// CHK-CXX-NEXT:    [[TMP112:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[TMP113:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD341:%.*]] = load atomic i64, ptr @bfx4 monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD341]], ptr [[ATOMIC_TEMP343]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD344:%.*]] = load i64, ptr [[ATOMIC_TEMP343]], align 8
// CHK-CXX-NEXT:    [[BF_SHL345:%.*]] = shl i64 [[BF_LOAD344]], 47
// CHK-CXX-NEXT:    [[BF_ASHR346:%.*]] = ashr i64 [[BF_SHL345]], 63
// CHK-CXX-NEXT:    [[BF_CAST347:%.*]] = trunc i64 [[BF_ASHR346]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST347]], ptr [[ATMP342]], align 4
// CHK-CXX-NEXT:    [[CMP348:%.*]] = icmp eq i32 [[BF_CAST347]], [[TMP113]]
// CHK-CXX-NEXT:    [[FROMBOOL350:%.*]] = zext i1 [[CMP348]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL350]], ptr [[ATMP349]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP348]], label [[ATOMIC_CONT351:%.*]], label [[ATOMIC_EXIT371:%.*]]
// CHK-CXX:       atomic_cont351:
// CHK-CXX-NEXT:    [[TMP114:%.*]] = phi i64 [ [[ATOMIC_LOAD341]], [[ATOMIC_EXIT340]] ], [ [[TMP118:%.*]], [[ATOMIC_CMP363:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP114]], ptr [[ATOMIC_TEMP352]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD353:%.*]] = load i64, ptr [[ATOMIC_TEMP352]], align 8
// CHK-CXX-NEXT:    [[BF_SHL354:%.*]] = shl i64 [[BF_LOAD353]], 47
// CHK-CXX-NEXT:    [[BF_ASHR355:%.*]] = ashr i64 [[BF_SHL354]], 63
// CHK-CXX-NEXT:    [[BF_CAST356:%.*]] = trunc i64 [[BF_ASHR355]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST356]], ptr [[ATMP342]], align 4
// CHK-CXX-NEXT:    store i64 [[TMP114]], ptr [[ATOMIC_TEMP357]], align 8
// CHK-CXX-NEXT:    [[TMP115:%.*]] = zext i32 [[TMP112]] to i64
// CHK-CXX-NEXT:    [[BF_LOAD358:%.*]] = load i64, ptr [[ATOMIC_TEMP357]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE359:%.*]] = and i64 [[TMP115]], 1
// CHK-CXX-NEXT:    [[BF_SHL360:%.*]] = shl i64 [[BF_VALUE359]], 16
// CHK-CXX-NEXT:    [[BF_CLEAR361:%.*]] = and i64 [[BF_LOAD358]], -65537
// CHK-CXX-NEXT:    [[BF_SET362:%.*]] = or i64 [[BF_CLEAR361]], [[BF_SHL360]]
// CHK-CXX-NEXT:    store i64 [[BF_SET362]], ptr [[ATOMIC_TEMP357]], align 8
// CHK-CXX-NEXT:    [[TMP116:%.*]] = load i64, ptr [[ATOMIC_TEMP357]], align 8
// CHK-CXX-NEXT:    [[TMP117:%.*]] = cmpxchg ptr @bfx4, i64 [[TMP114]], i64 [[TMP116]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP118]] = extractvalue { i64, i1 } [[TMP117]], 0
// CHK-CXX-NEXT:    [[TMP119:%.*]] = extractvalue { i64, i1 } [[TMP117]], 1
// CHK-CXX-NEXT:    br i1 [[TMP119]], label [[ATOMIC_EXIT371]], label [[ATOMIC_CMP363]]
// CHK-CXX:       atomic_cmp363:
// CHK-CXX-NEXT:    store i64 [[TMP118]], ptr [[ATOMIC_TEMP364]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD365:%.*]] = load i64, ptr [[ATOMIC_TEMP364]], align 8
// CHK-CXX-NEXT:    [[BF_SHL366:%.*]] = shl i64 [[BF_LOAD365]], 47
// CHK-CXX-NEXT:    [[BF_ASHR367:%.*]] = ashr i64 [[BF_SHL366]], 63
// CHK-CXX-NEXT:    [[BF_CAST368:%.*]] = trunc i64 [[BF_ASHR367]] to i32
// CHK-CXX-NEXT:    [[CMP369:%.*]] = icmp eq i32 [[BF_CAST368]], [[TMP113]]
// CHK-CXX-NEXT:    [[FROMBOOL370:%.*]] = zext i1 [[CMP369]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL370]], ptr [[ATMP349]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP369]], label [[ATOMIC_CONT351]], label [[ATOMIC_EXIT371]]
// CHK-CXX:       atomic_exit371:
// CHK-CXX-NEXT:    [[TMP120:%.*]] = load i32, ptr [[ATMP342]], align 4
// CHK-CXX-NEXT:    [[TMP121:%.*]] = load i8, ptr [[ATMP349]], align 1
// CHK-CXX-NEXT:    [[TMP122:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD372:%.*]] = load atomic i64, ptr @bfx4 monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD372]], ptr [[ATOMIC_TEMP374]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD375:%.*]] = load i64, ptr [[ATOMIC_TEMP374]], align 8
// CHK-CXX-NEXT:    [[BF_SHL376:%.*]] = shl i64 [[BF_LOAD375]], 47
// CHK-CXX-NEXT:    [[BF_ASHR377:%.*]] = ashr i64 [[BF_SHL376]], 63
// CHK-CXX-NEXT:    [[BF_CAST378:%.*]] = trunc i64 [[BF_ASHR377]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST378]], ptr [[ATMP373]], align 4
// CHK-CXX-NEXT:    [[CMP379:%.*]] = icmp slt i32 [[BF_CAST378]], [[TMP122]]
// CHK-CXX-NEXT:    [[FROMBOOL381:%.*]] = zext i1 [[CMP379]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL381]], ptr [[ATMP380]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP379]], label [[ATOMIC_CONT382:%.*]], label [[ATOMIC_EXIT402:%.*]]
// CHK-CXX:       atomic_cont382:
// CHK-CXX-NEXT:    [[TMP123:%.*]] = phi i64 [ [[ATOMIC_LOAD372]], [[ATOMIC_EXIT371]] ], [ [[TMP127:%.*]], [[ATOMIC_CMP394:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP123]], ptr [[ATOMIC_TEMP383]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD384:%.*]] = load i64, ptr [[ATOMIC_TEMP383]], align 8
// CHK-CXX-NEXT:    [[BF_SHL385:%.*]] = shl i64 [[BF_LOAD384]], 47
// CHK-CXX-NEXT:    [[BF_ASHR386:%.*]] = ashr i64 [[BF_SHL385]], 63
// CHK-CXX-NEXT:    [[BF_CAST387:%.*]] = trunc i64 [[BF_ASHR386]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST387]], ptr [[ATMP373]], align 4
// CHK-CXX-NEXT:    store i64 [[TMP123]], ptr [[ATOMIC_TEMP388]], align 8
// CHK-CXX-NEXT:    [[TMP124:%.*]] = zext i32 [[TMP122]] to i64
// CHK-CXX-NEXT:    [[BF_LOAD389:%.*]] = load i64, ptr [[ATOMIC_TEMP388]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE390:%.*]] = and i64 [[TMP124]], 1
// CHK-CXX-NEXT:    [[BF_SHL391:%.*]] = shl i64 [[BF_VALUE390]], 16
// CHK-CXX-NEXT:    [[BF_CLEAR392:%.*]] = and i64 [[BF_LOAD389]], -65537
// CHK-CXX-NEXT:    [[BF_SET393:%.*]] = or i64 [[BF_CLEAR392]], [[BF_SHL391]]
// CHK-CXX-NEXT:    store i64 [[BF_SET393]], ptr [[ATOMIC_TEMP388]], align 8
// CHK-CXX-NEXT:    [[TMP125:%.*]] = load i64, ptr [[ATOMIC_TEMP388]], align 8
// CHK-CXX-NEXT:    [[TMP126:%.*]] = cmpxchg ptr @bfx4, i64 [[TMP123]], i64 [[TMP125]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP127]] = extractvalue { i64, i1 } [[TMP126]], 0
// CHK-CXX-NEXT:    [[TMP128:%.*]] = extractvalue { i64, i1 } [[TMP126]], 1
// CHK-CXX-NEXT:    br i1 [[TMP128]], label [[ATOMIC_EXIT402]], label [[ATOMIC_CMP394]]
// CHK-CXX:       atomic_cmp394:
// CHK-CXX-NEXT:    store i64 [[TMP127]], ptr [[ATOMIC_TEMP395]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD396:%.*]] = load i64, ptr [[ATOMIC_TEMP395]], align 8
// CHK-CXX-NEXT:    [[BF_SHL397:%.*]] = shl i64 [[BF_LOAD396]], 47
// CHK-CXX-NEXT:    [[BF_ASHR398:%.*]] = ashr i64 [[BF_SHL397]], 63
// CHK-CXX-NEXT:    [[BF_CAST399:%.*]] = trunc i64 [[BF_ASHR398]] to i32
// CHK-CXX-NEXT:    [[CMP400:%.*]] = icmp slt i32 [[BF_CAST399]], [[TMP122]]
// CHK-CXX-NEXT:    [[FROMBOOL401:%.*]] = zext i1 [[CMP400]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL401]], ptr [[ATMP380]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP400]], label [[ATOMIC_CONT382]], label [[ATOMIC_EXIT402]]
// CHK-CXX:       atomic_exit402:
// CHK-CXX-NEXT:    [[TMP129:%.*]] = load i32, ptr [[ATMP373]], align 4
// CHK-CXX-NEXT:    [[TMP130:%.*]] = load i8, ptr [[ATMP380]], align 1
// CHK-CXX-NEXT:    [[TMP131:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[CONV:%.*]] = sext i32 [[TMP131]] to i64
// CHK-CXX-NEXT:    [[ATOMIC_LOAD403:%.*]] = load atomic i64, ptr @bfx4 monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD403]], ptr [[ATOMIC_TEMP405]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD406:%.*]] = load i64, ptr [[ATOMIC_TEMP405]], align 8
// CHK-CXX-NEXT:    [[BF_SHL407:%.*]] = shl i64 [[BF_LOAD406]], 40
// CHK-CXX-NEXT:    [[BF_ASHR408:%.*]] = ashr i64 [[BF_SHL407]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR408]], ptr [[ATMP404]], align 8
// CHK-CXX-NEXT:    [[CMP409:%.*]] = icmp sgt i64 [[BF_ASHR408]], [[CONV]]
// CHK-CXX-NEXT:    [[FROMBOOL411:%.*]] = zext i1 [[CMP409]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL411]], ptr [[ATMP410]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP409]], label [[ATOMIC_CONT412:%.*]], label [[ATOMIC_EXIT430:%.*]]
// CHK-CXX:       atomic_cont412:
// CHK-CXX-NEXT:    [[TMP132:%.*]] = phi i64 [ [[ATOMIC_LOAD403]], [[ATOMIC_EXIT402]] ], [ [[TMP135:%.*]], [[ATOMIC_CMP423:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP132]], ptr [[ATOMIC_TEMP413]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD414:%.*]] = load i64, ptr [[ATOMIC_TEMP413]], align 8
// CHK-CXX-NEXT:    [[BF_SHL415:%.*]] = shl i64 [[BF_LOAD414]], 40
// CHK-CXX-NEXT:    [[BF_ASHR416:%.*]] = ashr i64 [[BF_SHL415]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR416]], ptr [[ATMP404]], align 8
// CHK-CXX-NEXT:    store i64 [[TMP132]], ptr [[ATOMIC_TEMP417]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD418:%.*]] = load i64, ptr [[ATOMIC_TEMP417]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE419:%.*]] = and i64 [[CONV]], 127
// CHK-CXX-NEXT:    [[BF_SHL420:%.*]] = shl i64 [[BF_VALUE419]], 17
// CHK-CXX-NEXT:    [[BF_CLEAR421:%.*]] = and i64 [[BF_LOAD418]], -16646145
// CHK-CXX-NEXT:    [[BF_SET422:%.*]] = or i64 [[BF_CLEAR421]], [[BF_SHL420]]
// CHK-CXX-NEXT:    store i64 [[BF_SET422]], ptr [[ATOMIC_TEMP417]], align 8
// CHK-CXX-NEXT:    [[TMP133:%.*]] = load i64, ptr [[ATOMIC_TEMP417]], align 8
// CHK-CXX-NEXT:    [[TMP134:%.*]] = cmpxchg ptr @bfx4, i64 [[TMP132]], i64 [[TMP133]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP135]] = extractvalue { i64, i1 } [[TMP134]], 0
// CHK-CXX-NEXT:    [[TMP136:%.*]] = extractvalue { i64, i1 } [[TMP134]], 1
// CHK-CXX-NEXT:    br i1 [[TMP136]], label [[ATOMIC_EXIT430]], label [[ATOMIC_CMP423]]
// CHK-CXX:       atomic_cmp423:
// CHK-CXX-NEXT:    store i64 [[TMP135]], ptr [[ATOMIC_TEMP424]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD425:%.*]] = load i64, ptr [[ATOMIC_TEMP424]], align 8
// CHK-CXX-NEXT:    [[BF_SHL426:%.*]] = shl i64 [[BF_LOAD425]], 40
// CHK-CXX-NEXT:    [[BF_ASHR427:%.*]] = ashr i64 [[BF_SHL426]], 57
// CHK-CXX-NEXT:    [[CMP428:%.*]] = icmp sgt i64 [[BF_ASHR427]], [[CONV]]
// CHK-CXX-NEXT:    [[FROMBOOL429:%.*]] = zext i1 [[CMP428]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL429]], ptr [[ATMP410]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP428]], label [[ATOMIC_CONT412]], label [[ATOMIC_EXIT430]]
// CHK-CXX:       atomic_exit430:
// CHK-CXX-NEXT:    [[TMP137:%.*]] = load i64, ptr [[ATMP404]], align 8
// CHK-CXX-NEXT:    [[TMP138:%.*]] = load i8, ptr [[ATMP410]], align 1
// CHK-CXX-NEXT:    [[TMP139:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[CONV431:%.*]] = sext i32 [[TMP139]] to i64
// CHK-CXX-NEXT:    [[TMP140:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[CONV432:%.*]] = sext i32 [[TMP140]] to i64
// CHK-CXX-NEXT:    [[ATOMIC_LOAD433:%.*]] = load atomic i64, ptr @bfx4 monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD433]], ptr [[ATOMIC_TEMP435]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD436:%.*]] = load i64, ptr [[ATOMIC_TEMP435]], align 8
// CHK-CXX-NEXT:    [[BF_SHL437:%.*]] = shl i64 [[BF_LOAD436]], 40
// CHK-CXX-NEXT:    [[BF_ASHR438:%.*]] = ashr i64 [[BF_SHL437]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR438]], ptr [[ATMP434]], align 8
// CHK-CXX-NEXT:    [[CMP439:%.*]] = icmp eq i64 [[BF_ASHR438]], [[CONV432]]
// CHK-CXX-NEXT:    [[FROMBOOL441:%.*]] = zext i1 [[CMP439]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL441]], ptr [[ATMP440]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP439]], label [[ATOMIC_CONT442:%.*]], label [[ATOMIC_EXIT460:%.*]]
// CHK-CXX:       atomic_cont442:
// CHK-CXX-NEXT:    [[TMP141:%.*]] = phi i64 [ [[ATOMIC_LOAD433]], [[ATOMIC_EXIT430]] ], [ [[TMP144:%.*]], [[ATOMIC_CMP453:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP141]], ptr [[ATOMIC_TEMP443]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD444:%.*]] = load i64, ptr [[ATOMIC_TEMP443]], align 8
// CHK-CXX-NEXT:    [[BF_SHL445:%.*]] = shl i64 [[BF_LOAD444]], 40
// CHK-CXX-NEXT:    [[BF_ASHR446:%.*]] = ashr i64 [[BF_SHL445]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR446]], ptr [[ATMP434]], align 8
// CHK-CXX-NEXT:    store i64 [[TMP141]], ptr [[ATOMIC_TEMP447]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD448:%.*]] = load i64, ptr [[ATOMIC_TEMP447]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE449:%.*]] = and i64 [[CONV431]], 127
// CHK-CXX-NEXT:    [[BF_SHL450:%.*]] = shl i64 [[BF_VALUE449]], 17
// CHK-CXX-NEXT:    [[BF_CLEAR451:%.*]] = and i64 [[BF_LOAD448]], -16646145
// CHK-CXX-NEXT:    [[BF_SET452:%.*]] = or i64 [[BF_CLEAR451]], [[BF_SHL450]]
// CHK-CXX-NEXT:    store i64 [[BF_SET452]], ptr [[ATOMIC_TEMP447]], align 8
// CHK-CXX-NEXT:    [[TMP142:%.*]] = load i64, ptr [[ATOMIC_TEMP447]], align 8
// CHK-CXX-NEXT:    [[TMP143:%.*]] = cmpxchg ptr @bfx4, i64 [[TMP141]], i64 [[TMP142]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP144]] = extractvalue { i64, i1 } [[TMP143]], 0
// CHK-CXX-NEXT:    [[TMP145:%.*]] = extractvalue { i64, i1 } [[TMP143]], 1
// CHK-CXX-NEXT:    br i1 [[TMP145]], label [[ATOMIC_EXIT460]], label [[ATOMIC_CMP453]]
// CHK-CXX:       atomic_cmp453:
// CHK-CXX-NEXT:    store i64 [[TMP144]], ptr [[ATOMIC_TEMP454]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD455:%.*]] = load i64, ptr [[ATOMIC_TEMP454]], align 8
// CHK-CXX-NEXT:    [[BF_SHL456:%.*]] = shl i64 [[BF_LOAD455]], 40
// CHK-CXX-NEXT:    [[BF_ASHR457:%.*]] = ashr i64 [[BF_SHL456]], 57
// CHK-CXX-NEXT:    [[CMP458:%.*]] = icmp eq i64 [[BF_ASHR457]], [[CONV432]]
// CHK-CXX-NEXT:    [[FROMBOOL459:%.*]] = zext i1 [[CMP458]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL459]], ptr [[ATMP440]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP458]], label [[ATOMIC_CONT442]], label [[ATOMIC_EXIT460]]
// CHK-CXX:       atomic_exit460:
// CHK-CXX-NEXT:    [[TMP146:%.*]] = load i64, ptr [[ATMP434]], align 8
// CHK-CXX-NEXT:    [[TMP147:%.*]] = load i8, ptr [[ATMP440]], align 1
// CHK-CXX-NEXT:    [[TMP148:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[CONV461:%.*]] = sext i32 [[TMP148]] to i64
// CHK-CXX-NEXT:    [[ATOMIC_LOAD462:%.*]] = load atomic i64, ptr @bfx4 monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD462]], ptr [[ATOMIC_TEMP464]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD465:%.*]] = load i64, ptr [[ATOMIC_TEMP464]], align 8
// CHK-CXX-NEXT:    [[BF_SHL466:%.*]] = shl i64 [[BF_LOAD465]], 40
// CHK-CXX-NEXT:    [[BF_ASHR467:%.*]] = ashr i64 [[BF_SHL466]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR467]], ptr [[ATMP463]], align 8
// CHK-CXX-NEXT:    [[CMP468:%.*]] = icmp slt i64 [[BF_ASHR467]], [[CONV461]]
// CHK-CXX-NEXT:    [[FROMBOOL470:%.*]] = zext i1 [[CMP468]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL470]], ptr [[ATMP469]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP468]], label [[ATOMIC_CONT471:%.*]], label [[ATOMIC_EXIT489:%.*]]
// CHK-CXX:       atomic_cont471:
// CHK-CXX-NEXT:    [[TMP149:%.*]] = phi i64 [ [[ATOMIC_LOAD462]], [[ATOMIC_EXIT460]] ], [ [[TMP152:%.*]], [[ATOMIC_CMP482:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP149]], ptr [[ATOMIC_TEMP472]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD473:%.*]] = load i64, ptr [[ATOMIC_TEMP472]], align 8
// CHK-CXX-NEXT:    [[BF_SHL474:%.*]] = shl i64 [[BF_LOAD473]], 40
// CHK-CXX-NEXT:    [[BF_ASHR475:%.*]] = ashr i64 [[BF_SHL474]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR475]], ptr [[ATMP463]], align 8
// CHK-CXX-NEXT:    store i64 [[TMP149]], ptr [[ATOMIC_TEMP476]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD477:%.*]] = load i64, ptr [[ATOMIC_TEMP476]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE478:%.*]] = and i64 [[CONV461]], 127
// CHK-CXX-NEXT:    [[BF_SHL479:%.*]] = shl i64 [[BF_VALUE478]], 17
// CHK-CXX-NEXT:    [[BF_CLEAR480:%.*]] = and i64 [[BF_LOAD477]], -16646145
// CHK-CXX-NEXT:    [[BF_SET481:%.*]] = or i64 [[BF_CLEAR480]], [[BF_SHL479]]
// CHK-CXX-NEXT:    store i64 [[BF_SET481]], ptr [[ATOMIC_TEMP476]], align 8
// CHK-CXX-NEXT:    [[TMP150:%.*]] = load i64, ptr [[ATOMIC_TEMP476]], align 8
// CHK-CXX-NEXT:    [[TMP151:%.*]] = cmpxchg ptr @bfx4, i64 [[TMP149]], i64 [[TMP150]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP152]] = extractvalue { i64, i1 } [[TMP151]], 0
// CHK-CXX-NEXT:    [[TMP153:%.*]] = extractvalue { i64, i1 } [[TMP151]], 1
// CHK-CXX-NEXT:    br i1 [[TMP153]], label [[ATOMIC_EXIT489]], label [[ATOMIC_CMP482]]
// CHK-CXX:       atomic_cmp482:
// CHK-CXX-NEXT:    store i64 [[TMP152]], ptr [[ATOMIC_TEMP483]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD484:%.*]] = load i64, ptr [[ATOMIC_TEMP483]], align 8
// CHK-CXX-NEXT:    [[BF_SHL485:%.*]] = shl i64 [[BF_LOAD484]], 40
// CHK-CXX-NEXT:    [[BF_ASHR486:%.*]] = ashr i64 [[BF_SHL485]], 57
// CHK-CXX-NEXT:    [[CMP487:%.*]] = icmp slt i64 [[BF_ASHR486]], [[CONV461]]
// CHK-CXX-NEXT:    [[FROMBOOL488:%.*]] = zext i1 [[CMP487]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL488]], ptr [[ATMP469]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP487]], label [[ATOMIC_CONT471]], label [[ATOMIC_EXIT489]]
// CHK-CXX:       atomic_exit489:
// CHK-CXX-NEXT:    [[TMP154:%.*]] = load i64, ptr [[ATMP463]], align 8
// CHK-CXX-NEXT:    [[TMP155:%.*]] = load i8, ptr [[ATMP469]], align 1
// CHK-CXX-NEXT:    [[TMP156:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD490:%.*]] = load atomic i8, ptr getelementptr (i8, ptr @bfx4_packed, i64 2) monotonic, align 1
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD490]], ptr [[ATOMIC_TEMP492]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD493:%.*]] = load i8, ptr [[ATOMIC_TEMP492]], align 1
// CHK-CXX-NEXT:    [[BF_SHL494:%.*]] = shl i8 [[BF_LOAD493]], 7
// CHK-CXX-NEXT:    [[BF_ASHR495:%.*]] = ashr i8 [[BF_SHL494]], 7
// CHK-CXX-NEXT:    [[BF_CAST496:%.*]] = sext i8 [[BF_ASHR495]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST496]], ptr [[ATMP491]], align 4
// CHK-CXX-NEXT:    [[CMP497:%.*]] = icmp sgt i32 [[BF_CAST496]], [[TMP156]]
// CHK-CXX-NEXT:    [[FROMBOOL499:%.*]] = zext i1 [[CMP497]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL499]], ptr [[ATMP498]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP497]], label [[ATOMIC_CONT500:%.*]], label [[ATOMIC_EXIT519:%.*]]
// CHK-CXX:       atomic_cont500:
// CHK-CXX-NEXT:    [[TMP157:%.*]] = phi i8 [ [[ATOMIC_LOAD490]], [[ATOMIC_EXIT489]] ], [ [[TMP161:%.*]], [[ATOMIC_CMP511:%.*]] ]
// CHK-CXX-NEXT:    store i8 [[TMP157]], ptr [[ATOMIC_TEMP501]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD502:%.*]] = load i8, ptr [[ATOMIC_TEMP501]], align 1
// CHK-CXX-NEXT:    [[BF_SHL503:%.*]] = shl i8 [[BF_LOAD502]], 7
// CHK-CXX-NEXT:    [[BF_ASHR504:%.*]] = ashr i8 [[BF_SHL503]], 7
// CHK-CXX-NEXT:    [[BF_CAST505:%.*]] = sext i8 [[BF_ASHR504]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST505]], ptr [[ATMP491]], align 4
// CHK-CXX-NEXT:    store i8 [[TMP157]], ptr [[ATOMIC_TEMP506]], align 1
// CHK-CXX-NEXT:    [[TMP158:%.*]] = trunc i32 [[TMP156]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD507:%.*]] = load i8, ptr [[ATOMIC_TEMP506]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE508:%.*]] = and i8 [[TMP158]], 1
// CHK-CXX-NEXT:    [[BF_CLEAR509:%.*]] = and i8 [[BF_LOAD507]], -2
// CHK-CXX-NEXT:    [[BF_SET510:%.*]] = or i8 [[BF_CLEAR509]], [[BF_VALUE508]]
// CHK-CXX-NEXT:    store i8 [[BF_SET510]], ptr [[ATOMIC_TEMP506]], align 1
// CHK-CXX-NEXT:    [[TMP159:%.*]] = load i8, ptr [[ATOMIC_TEMP506]], align 1
// CHK-CXX-NEXT:    [[TMP160:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx4_packed, i64 2), i8 [[TMP157]], i8 [[TMP159]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP161]] = extractvalue { i8, i1 } [[TMP160]], 0
// CHK-CXX-NEXT:    [[TMP162:%.*]] = extractvalue { i8, i1 } [[TMP160]], 1
// CHK-CXX-NEXT:    br i1 [[TMP162]], label [[ATOMIC_EXIT519]], label [[ATOMIC_CMP511]]
// CHK-CXX:       atomic_cmp511:
// CHK-CXX-NEXT:    store i8 [[TMP161]], ptr [[ATOMIC_TEMP512]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD513:%.*]] = load i8, ptr [[ATOMIC_TEMP512]], align 1
// CHK-CXX-NEXT:    [[BF_SHL514:%.*]] = shl i8 [[BF_LOAD513]], 7
// CHK-CXX-NEXT:    [[BF_ASHR515:%.*]] = ashr i8 [[BF_SHL514]], 7
// CHK-CXX-NEXT:    [[BF_CAST516:%.*]] = sext i8 [[BF_ASHR515]] to i32
// CHK-CXX-NEXT:    [[CMP517:%.*]] = icmp sgt i32 [[BF_CAST516]], [[TMP156]]
// CHK-CXX-NEXT:    [[FROMBOOL518:%.*]] = zext i1 [[CMP517]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL518]], ptr [[ATMP498]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP517]], label [[ATOMIC_CONT500]], label [[ATOMIC_EXIT519]]
// CHK-CXX:       atomic_exit519:
// CHK-CXX-NEXT:    [[TMP163:%.*]] = load i32, ptr [[ATMP491]], align 4
// CHK-CXX-NEXT:    [[TMP164:%.*]] = load i8, ptr [[ATMP498]], align 1
// CHK-CXX-NEXT:    [[TMP165:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[TMP166:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD520:%.*]] = load atomic i8, ptr getelementptr (i8, ptr @bfx4_packed, i64 2) monotonic, align 1
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD520]], ptr [[ATOMIC_TEMP522]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD523:%.*]] = load i8, ptr [[ATOMIC_TEMP522]], align 1
// CHK-CXX-NEXT:    [[BF_SHL524:%.*]] = shl i8 [[BF_LOAD523]], 7
// CHK-CXX-NEXT:    [[BF_ASHR525:%.*]] = ashr i8 [[BF_SHL524]], 7
// CHK-CXX-NEXT:    [[BF_CAST526:%.*]] = sext i8 [[BF_ASHR525]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST526]], ptr [[ATMP521]], align 4
// CHK-CXX-NEXT:    [[CMP527:%.*]] = icmp eq i32 [[BF_CAST526]], [[TMP166]]
// CHK-CXX-NEXT:    [[FROMBOOL529:%.*]] = zext i1 [[CMP527]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL529]], ptr [[ATMP528]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP527]], label [[ATOMIC_CONT530:%.*]], label [[ATOMIC_EXIT549:%.*]]
// CHK-CXX:       atomic_cont530:
// CHK-CXX-NEXT:    [[TMP167:%.*]] = phi i8 [ [[ATOMIC_LOAD520]], [[ATOMIC_EXIT519]] ], [ [[TMP171:%.*]], [[ATOMIC_CMP541:%.*]] ]
// CHK-CXX-NEXT:    store i8 [[TMP167]], ptr [[ATOMIC_TEMP531]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD532:%.*]] = load i8, ptr [[ATOMIC_TEMP531]], align 1
// CHK-CXX-NEXT:    [[BF_SHL533:%.*]] = shl i8 [[BF_LOAD532]], 7
// CHK-CXX-NEXT:    [[BF_ASHR534:%.*]] = ashr i8 [[BF_SHL533]], 7
// CHK-CXX-NEXT:    [[BF_CAST535:%.*]] = sext i8 [[BF_ASHR534]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST535]], ptr [[ATMP521]], align 4
// CHK-CXX-NEXT:    store i8 [[TMP167]], ptr [[ATOMIC_TEMP536]], align 1
// CHK-CXX-NEXT:    [[TMP168:%.*]] = trunc i32 [[TMP165]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD537:%.*]] = load i8, ptr [[ATOMIC_TEMP536]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE538:%.*]] = and i8 [[TMP168]], 1
// CHK-CXX-NEXT:    [[BF_CLEAR539:%.*]] = and i8 [[BF_LOAD537]], -2
// CHK-CXX-NEXT:    [[BF_SET540:%.*]] = or i8 [[BF_CLEAR539]], [[BF_VALUE538]]
// CHK-CXX-NEXT:    store i8 [[BF_SET540]], ptr [[ATOMIC_TEMP536]], align 1
// CHK-CXX-NEXT:    [[TMP169:%.*]] = load i8, ptr [[ATOMIC_TEMP536]], align 1
// CHK-CXX-NEXT:    [[TMP170:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx4_packed, i64 2), i8 [[TMP167]], i8 [[TMP169]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP171]] = extractvalue { i8, i1 } [[TMP170]], 0
// CHK-CXX-NEXT:    [[TMP172:%.*]] = extractvalue { i8, i1 } [[TMP170]], 1
// CHK-CXX-NEXT:    br i1 [[TMP172]], label [[ATOMIC_EXIT549]], label [[ATOMIC_CMP541]]
// CHK-CXX:       atomic_cmp541:
// CHK-CXX-NEXT:    store i8 [[TMP171]], ptr [[ATOMIC_TEMP542]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD543:%.*]] = load i8, ptr [[ATOMIC_TEMP542]], align 1
// CHK-CXX-NEXT:    [[BF_SHL544:%.*]] = shl i8 [[BF_LOAD543]], 7
// CHK-CXX-NEXT:    [[BF_ASHR545:%.*]] = ashr i8 [[BF_SHL544]], 7
// CHK-CXX-NEXT:    [[BF_CAST546:%.*]] = sext i8 [[BF_ASHR545]] to i32
// CHK-CXX-NEXT:    [[CMP547:%.*]] = icmp eq i32 [[BF_CAST546]], [[TMP166]]
// CHK-CXX-NEXT:    [[FROMBOOL548:%.*]] = zext i1 [[CMP547]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL548]], ptr [[ATMP528]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP547]], label [[ATOMIC_CONT530]], label [[ATOMIC_EXIT549]]
// CHK-CXX:       atomic_exit549:
// CHK-CXX-NEXT:    [[TMP173:%.*]] = load i32, ptr [[ATMP521]], align 4
// CHK-CXX-NEXT:    [[TMP174:%.*]] = load i8, ptr [[ATMP528]], align 1
// CHK-CXX-NEXT:    [[TMP175:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD550:%.*]] = load atomic i8, ptr getelementptr (i8, ptr @bfx4_packed, i64 2) monotonic, align 1
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD550]], ptr [[ATOMIC_TEMP552]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD553:%.*]] = load i8, ptr [[ATOMIC_TEMP552]], align 1
// CHK-CXX-NEXT:    [[BF_SHL554:%.*]] = shl i8 [[BF_LOAD553]], 7
// CHK-CXX-NEXT:    [[BF_ASHR555:%.*]] = ashr i8 [[BF_SHL554]], 7
// CHK-CXX-NEXT:    [[BF_CAST556:%.*]] = sext i8 [[BF_ASHR555]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST556]], ptr [[ATMP551]], align 4
// CHK-CXX-NEXT:    [[CMP557:%.*]] = icmp slt i32 [[BF_CAST556]], [[TMP175]]
// CHK-CXX-NEXT:    [[FROMBOOL559:%.*]] = zext i1 [[CMP557]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL559]], ptr [[ATMP558]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP557]], label [[ATOMIC_CONT560:%.*]], label [[ATOMIC_EXIT579:%.*]]
// CHK-CXX:       atomic_cont560:
// CHK-CXX-NEXT:    [[TMP176:%.*]] = phi i8 [ [[ATOMIC_LOAD550]], [[ATOMIC_EXIT549]] ], [ [[TMP180:%.*]], [[ATOMIC_CMP571:%.*]] ]
// CHK-CXX-NEXT:    store i8 [[TMP176]], ptr [[ATOMIC_TEMP561]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD562:%.*]] = load i8, ptr [[ATOMIC_TEMP561]], align 1
// CHK-CXX-NEXT:    [[BF_SHL563:%.*]] = shl i8 [[BF_LOAD562]], 7
// CHK-CXX-NEXT:    [[BF_ASHR564:%.*]] = ashr i8 [[BF_SHL563]], 7
// CHK-CXX-NEXT:    [[BF_CAST565:%.*]] = sext i8 [[BF_ASHR564]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST565]], ptr [[ATMP551]], align 4
// CHK-CXX-NEXT:    store i8 [[TMP176]], ptr [[ATOMIC_TEMP566]], align 1
// CHK-CXX-NEXT:    [[TMP177:%.*]] = trunc i32 [[TMP175]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD567:%.*]] = load i8, ptr [[ATOMIC_TEMP566]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE568:%.*]] = and i8 [[TMP177]], 1
// CHK-CXX-NEXT:    [[BF_CLEAR569:%.*]] = and i8 [[BF_LOAD567]], -2
// CHK-CXX-NEXT:    [[BF_SET570:%.*]] = or i8 [[BF_CLEAR569]], [[BF_VALUE568]]
// CHK-CXX-NEXT:    store i8 [[BF_SET570]], ptr [[ATOMIC_TEMP566]], align 1
// CHK-CXX-NEXT:    [[TMP178:%.*]] = load i8, ptr [[ATOMIC_TEMP566]], align 1
// CHK-CXX-NEXT:    [[TMP179:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx4_packed, i64 2), i8 [[TMP176]], i8 [[TMP178]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP180]] = extractvalue { i8, i1 } [[TMP179]], 0
// CHK-CXX-NEXT:    [[TMP181:%.*]] = extractvalue { i8, i1 } [[TMP179]], 1
// CHK-CXX-NEXT:    br i1 [[TMP181]], label [[ATOMIC_EXIT579]], label [[ATOMIC_CMP571]]
// CHK-CXX:       atomic_cmp571:
// CHK-CXX-NEXT:    store i8 [[TMP180]], ptr [[ATOMIC_TEMP572]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD573:%.*]] = load i8, ptr [[ATOMIC_TEMP572]], align 1
// CHK-CXX-NEXT:    [[BF_SHL574:%.*]] = shl i8 [[BF_LOAD573]], 7
// CHK-CXX-NEXT:    [[BF_ASHR575:%.*]] = ashr i8 [[BF_SHL574]], 7
// CHK-CXX-NEXT:    [[BF_CAST576:%.*]] = sext i8 [[BF_ASHR575]] to i32
// CHK-CXX-NEXT:    [[CMP577:%.*]] = icmp slt i32 [[BF_CAST576]], [[TMP175]]
// CHK-CXX-NEXT:    [[FROMBOOL578:%.*]] = zext i1 [[CMP577]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL578]], ptr [[ATMP558]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP577]], label [[ATOMIC_CONT560]], label [[ATOMIC_EXIT579]]
// CHK-CXX:       atomic_exit579:
// CHK-CXX-NEXT:    [[TMP182:%.*]] = load i32, ptr [[ATMP551]], align 4
// CHK-CXX-NEXT:    [[TMP183:%.*]] = load i8, ptr [[ATMP558]], align 1
// CHK-CXX-NEXT:    ret void
//
void test_bitfield()
{
  int expr, d, e;

  #pragma omp atomic compare
  bfx.a = expr < bfx.a ? expr : bfx.a; // MIN

  #pragma omp atomic compare
  bfx.a = bfx.a == e ? d : bfx.a;

  #pragma omp atomic compare
  if (bfx.a < expr) { bfx.a = expr; } // MAX

#ifdef LIBCALLS
  #pragma omp atomic compare
  bfx_packed.a = expr < bfx_packed.a ? expr : bfx_packed.a; // MIN

  #pragma omp atomic compare
  bfx_packed.a = bfx_packed.a == e ? d : bfx_packed.a;

  #pragma omp atomic compare
  if (bfx_packed.a < expr) { bfx_packed.a = expr; } // MAX
#endif

  #pragma omp atomic compare
  bfx2.a = expr < bfx2.a ? expr : bfx2.a; // MIN

  #pragma omp atomic compare
  bfx2.a = bfx2.a == e ? d : bfx2.a;

  #pragma omp atomic compare
  if (bfx2.a < expr) { bfx2.a = expr; } // MAX

  #pragma omp atomic compare
  bfx2_packed.a = expr < bfx2_packed.a ? expr : bfx2_packed.a; // MIN

  #pragma omp atomic compare
  bfx2_packed.a = bfx2_packed.a == e ? d : bfx2_packed.a;

  #pragma omp atomic compare
  if (bfx2_packed.a < expr) { bfx2_packed.a = expr; } // MAX

  #pragma omp atomic compare
  bfx3.a = expr < bfx3.a ? expr : bfx3.a; // MIN

  #pragma omp atomic compare
  bfx3.a = bfx3.a == e ? d : bfx3.a;

  #pragma omp atomic compare
  if (bfx3.a < expr) { bfx3.a = expr; } // MAX

#ifdef LIBCALLS
  #pragma omp atomic compare
  bfx3_packed.a = expr < bfx3_packed.a ? expr : bfx3_packed.a; // MIN

  #pragma omp atomic compare
  bfx3_packed.a = bfx3_packed.a == e ? d : bfx3_packed.a;

  #pragma omp atomic compare
  if (bfx3_packed.a < expr) { bfx3_packed.a = expr; } // MAX
#endif

  #pragma omp atomic compare
  bfx4.a = expr < bfx4.a ? expr : bfx4.a; // MIN

  #pragma omp atomic compare
  bfx4.a = bfx4.a == e ? d : bfx4.a;

  #pragma omp atomic compare
  if (bfx4.a < expr) { bfx4.a = expr; } // MAX

  #pragma omp atomic compare
  bfx4.b = expr < bfx4.b ? expr : bfx4.b; // MIN

  #pragma omp atomic compare
  bfx4.b = bfx4.b == e ? d : bfx4.b;

  #pragma omp atomic compare
  if (bfx4.b < expr) { bfx4.b = expr; } // MAX

  #pragma omp atomic compare
  bfx4_packed.a = expr < bfx4_packed.a ? expr : bfx4_packed.a; // MIN

  #pragma omp atomic compare
  bfx4_packed.a = bfx4_packed.a == e ? d : bfx4_packed.a;

  #pragma omp atomic compare
  if (bfx4_packed.a < expr) { bfx4_packed.a = expr; } // MAX
}

// CHK-C-LABEL: @test_ext_vector(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[FLOAT2X:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[TMP:%.*]] = alloca float, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP2:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP3:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP4:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATMP10:%.*]] = alloca float, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP11:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP12:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP13:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATMP15:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP18:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP19:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP21:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP22:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP23:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATMP29:%.*]] = alloca float, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP30:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATMP32:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP35:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP36:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP38:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[TMP0:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[CONV:%.*]] = sitofp i32 [[TMP0]] to float
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, ptr [[FLOAT2X]] monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD]], ptr [[ATOMIC_TEMP]], align 8
// CHK-C-NEXT:    [[TMP1:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP]], align 8
// CHK-C-NEXT:    [[TMP2:%.*]] = extractelement <2 x float> [[TMP1]], i64 0
// CHK-C-NEXT:    store float [[TMP2]], ptr [[TMP]], align 4
// CHK-C-NEXT:    [[CMP:%.*]] = fcmp ogt float [[TMP2]], [[CONV]]
// CHK-C-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL]], ptr [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP3:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP10:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP3]], ptr [[ATOMIC_TEMP2]], align 8
// CHK-C-NEXT:    [[TMP4:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP2]], align 8
// CHK-C-NEXT:    [[TMP5:%.*]] = extractelement <2 x float> [[TMP4]], i64 0
// CHK-C-NEXT:    store float [[TMP5]], ptr [[TMP]], align 4
// CHK-C-NEXT:    store i64 [[TMP3]], ptr [[ATOMIC_TEMP3]], align 8
// CHK-C-NEXT:    [[TMP6:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP3]], align 8
// CHK-C-NEXT:    [[TMP7:%.*]] = insertelement <2 x float> [[TMP6]], float [[CONV]], i64 0
// CHK-C-NEXT:    store <2 x float> [[TMP7]], ptr [[ATOMIC_TEMP3]], align 8
// CHK-C-NEXT:    [[TMP8:%.*]] = load i64, ptr [[ATOMIC_TEMP3]], align 8
// CHK-C-NEXT:    [[TMP9:%.*]] = cmpxchg ptr [[FLOAT2X]], i64 [[TMP3]], i64 [[TMP8]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP10]] = extractvalue { i64, i1 } [[TMP9]], 0
// CHK-C-NEXT:    [[TMP11:%.*]] = extractvalue { i64, i1 } [[TMP9]], 1
// CHK-C-NEXT:    br i1 [[TMP11]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    store i64 [[TMP10]], ptr [[ATOMIC_TEMP4]], align 8
// CHK-C-NEXT:    [[TMP12:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP4]], align 8
// CHK-C-NEXT:    [[TMP13:%.*]] = extractelement <2 x float> [[TMP12]], i64 0
// CHK-C-NEXT:    [[CMP5:%.*]] = fcmp ogt float [[TMP13]], [[CONV]]
// CHK-C-NEXT:    [[FROMBOOL6:%.*]] = zext i1 [[CMP5]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL6]], ptr [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP5]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP14:%.*]] = load float, ptr [[TMP]], align 4
// CHK-C-NEXT:    [[TMP15:%.*]] = load i8, ptr [[ATMP1]], align 1
// CHK-C-NEXT:    [[TMP16:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[CONV7:%.*]] = sitofp i32 [[TMP16]] to float
// CHK-C-NEXT:    [[TMP17:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[CONV8:%.*]] = sitofp i32 [[TMP17]] to float
// CHK-C-NEXT:    [[ATOMIC_LOAD9:%.*]] = load atomic i64, ptr [[FLOAT2X]] monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD9]], ptr [[ATOMIC_TEMP11]], align 8
// CHK-C-NEXT:    [[TMP18:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP11]], align 8
// CHK-C-NEXT:    [[TMP19:%.*]] = extractelement <2 x float> [[TMP18]], i64 0
// CHK-C-NEXT:    store float [[TMP19]], ptr [[ATMP10]], align 4
// CHK-C-NEXT:    store float [[TMP19]], ptr [[ATOMIC_TEMP12]], align 8
// CHK-C-NEXT:    [[TMP20:%.*]] = load i64, ptr [[ATOMIC_TEMP12]], align 8
// CHK-C-NEXT:    store float [[CONV8]], ptr [[ATOMIC_TEMP13]], align 8
// CHK-C-NEXT:    [[TMP21:%.*]] = load i64, ptr [[ATOMIC_TEMP13]], align 8
// CHK-C-NEXT:    [[CMP14:%.*]] = icmp eq i64 [[TMP20]], [[TMP21]]
// CHK-C-NEXT:    [[FROMBOOL16:%.*]] = zext i1 [[CMP14]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL16]], ptr [[ATMP15]], align 1
// CHK-C-NEXT:    br i1 [[CMP14]], label [[ATOMIC_CONT17:%.*]], label [[ATOMIC_EXIT26:%.*]]
// CHK-C:       atomic_cont17:
// CHK-C-NEXT:    [[TMP22:%.*]] = phi i64 [ [[ATOMIC_LOAD9]], [[ATOMIC_EXIT]] ], [ [[TMP29:%.*]], [[ATOMIC_CMP20:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP22]], ptr [[ATOMIC_TEMP18]], align 8
// CHK-C-NEXT:    [[TMP23:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP18]], align 8
// CHK-C-NEXT:    [[TMP24:%.*]] = extractelement <2 x float> [[TMP23]], i64 0
// CHK-C-NEXT:    store float [[TMP24]], ptr [[ATMP10]], align 4
// CHK-C-NEXT:    store i64 [[TMP22]], ptr [[ATOMIC_TEMP19]], align 8
// CHK-C-NEXT:    [[TMP25:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP19]], align 8
// CHK-C-NEXT:    [[TMP26:%.*]] = insertelement <2 x float> [[TMP25]], float [[CONV7]], i64 0
// CHK-C-NEXT:    store <2 x float> [[TMP26]], ptr [[ATOMIC_TEMP19]], align 8
// CHK-C-NEXT:    [[TMP27:%.*]] = load i64, ptr [[ATOMIC_TEMP19]], align 8
// CHK-C-NEXT:    [[TMP28:%.*]] = cmpxchg ptr [[FLOAT2X]], i64 [[TMP22]], i64 [[TMP27]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP29]] = extractvalue { i64, i1 } [[TMP28]], 0
// CHK-C-NEXT:    [[TMP30:%.*]] = extractvalue { i64, i1 } [[TMP28]], 1
// CHK-C-NEXT:    br i1 [[TMP30]], label [[ATOMIC_EXIT26]], label [[ATOMIC_CMP20]]
// CHK-C:       atomic_cmp20:
// CHK-C-NEXT:    store i64 [[TMP29]], ptr [[ATOMIC_TEMP21]], align 8
// CHK-C-NEXT:    [[TMP31:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP21]], align 8
// CHK-C-NEXT:    [[TMP32:%.*]] = extractelement <2 x float> [[TMP31]], i64 0
// CHK-C-NEXT:    store float [[TMP32]], ptr [[ATOMIC_TEMP22]], align 8
// CHK-C-NEXT:    [[TMP33:%.*]] = load i64, ptr [[ATOMIC_TEMP22]], align 8
// CHK-C-NEXT:    store float [[CONV8]], ptr [[ATOMIC_TEMP23]], align 8
// CHK-C-NEXT:    [[TMP34:%.*]] = load i64, ptr [[ATOMIC_TEMP23]], align 8
// CHK-C-NEXT:    [[CMP24:%.*]] = icmp eq i64 [[TMP33]], [[TMP34]]
// CHK-C-NEXT:    [[FROMBOOL25:%.*]] = zext i1 [[CMP24]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL25]], ptr [[ATMP15]], align 1
// CHK-C-NEXT:    br i1 [[CMP24]], label [[ATOMIC_CONT17]], label [[ATOMIC_EXIT26]]
// CHK-C:       atomic_exit26:
// CHK-C-NEXT:    [[TMP35:%.*]] = load float, ptr [[ATMP10]], align 4
// CHK-C-NEXT:    [[TMP36:%.*]] = load i8, ptr [[ATMP15]], align 1
// CHK-C-NEXT:    [[TMP37:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[CONV27:%.*]] = sitofp i32 [[TMP37]] to float
// CHK-C-NEXT:    [[ATOMIC_LOAD28:%.*]] = load atomic i64, ptr [[FLOAT2X]] monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD28]], ptr [[ATOMIC_TEMP30]], align 8
// CHK-C-NEXT:    [[TMP38:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP30]], align 8
// CHK-C-NEXT:    [[TMP39:%.*]] = extractelement <2 x float> [[TMP38]], i64 0
// CHK-C-NEXT:    store float [[TMP39]], ptr [[ATMP29]], align 4
// CHK-C-NEXT:    [[CMP31:%.*]] = fcmp olt float [[TMP39]], [[CONV27]]
// CHK-C-NEXT:    [[FROMBOOL33:%.*]] = zext i1 [[CMP31]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL33]], ptr [[ATMP32]], align 1
// CHK-C-NEXT:    br i1 [[CMP31]], label [[ATOMIC_CONT34:%.*]], label [[ATOMIC_EXIT41:%.*]]
// CHK-C:       atomic_cont34:
// CHK-C-NEXT:    [[TMP40:%.*]] = phi i64 [ [[ATOMIC_LOAD28]], [[ATOMIC_EXIT26]] ], [ [[TMP47:%.*]], [[ATOMIC_CMP37:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP40]], ptr [[ATOMIC_TEMP35]], align 8
// CHK-C-NEXT:    [[TMP41:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP35]], align 8
// CHK-C-NEXT:    [[TMP42:%.*]] = extractelement <2 x float> [[TMP41]], i64 0
// CHK-C-NEXT:    store float [[TMP42]], ptr [[ATMP29]], align 4
// CHK-C-NEXT:    store i64 [[TMP40]], ptr [[ATOMIC_TEMP36]], align 8
// CHK-C-NEXT:    [[TMP43:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP36]], align 8
// CHK-C-NEXT:    [[TMP44:%.*]] = insertelement <2 x float> [[TMP43]], float [[CONV27]], i64 0
// CHK-C-NEXT:    store <2 x float> [[TMP44]], ptr [[ATOMIC_TEMP36]], align 8
// CHK-C-NEXT:    [[TMP45:%.*]] = load i64, ptr [[ATOMIC_TEMP36]], align 8
// CHK-C-NEXT:    [[TMP46:%.*]] = cmpxchg ptr [[FLOAT2X]], i64 [[TMP40]], i64 [[TMP45]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP47]] = extractvalue { i64, i1 } [[TMP46]], 0
// CHK-C-NEXT:    [[TMP48:%.*]] = extractvalue { i64, i1 } [[TMP46]], 1
// CHK-C-NEXT:    br i1 [[TMP48]], label [[ATOMIC_EXIT41]], label [[ATOMIC_CMP37]]
// CHK-C:       atomic_cmp37:
// CHK-C-NEXT:    store i64 [[TMP47]], ptr [[ATOMIC_TEMP38]], align 8
// CHK-C-NEXT:    [[TMP49:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP38]], align 8
// CHK-C-NEXT:    [[TMP50:%.*]] = extractelement <2 x float> [[TMP49]], i64 0
// CHK-C-NEXT:    [[CMP39:%.*]] = fcmp olt float [[TMP50]], [[CONV27]]
// CHK-C-NEXT:    [[FROMBOOL40:%.*]] = zext i1 [[CMP39]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL40]], ptr [[ATMP32]], align 1
// CHK-C-NEXT:    br i1 [[CMP39]], label [[ATOMIC_CONT34]], label [[ATOMIC_EXIT41]]
// CHK-C:       atomic_exit41:
// CHK-C-NEXT:    [[TMP51:%.*]] = load float, ptr [[ATMP29]], align 4
// CHK-C-NEXT:    [[TMP52:%.*]] = load i8, ptr [[ATMP32]], align 1
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z15test_ext_vectorv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[FLOAT2X:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca float, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP2:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP3:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP4:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATMP10:%.*]] = alloca float, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP11:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP12:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP13:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATMP15:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP18:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP19:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP21:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP22:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP23:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATMP29:%.*]] = alloca float, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP30:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATMP32:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP35:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP36:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP38:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[CONV:%.*]] = sitofp i32 [[TMP0]] to float
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, ptr [[FLOAT2X]] monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD]], ptr [[ATOMIC_TEMP]], align 8
// CHK-CXX-NEXT:    [[TMP1:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP]], align 8
// CHK-CXX-NEXT:    [[TMP2:%.*]] = extractelement <2 x float> [[TMP1]], i64 0
// CHK-CXX-NEXT:    store float [[TMP2]], ptr [[TMP]], align 4
// CHK-CXX-NEXT:    [[CMP:%.*]] = fcmp ogt float [[TMP2]], [[CONV]]
// CHK-CXX-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL]], ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP3:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP10:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP3]], ptr [[ATOMIC_TEMP2]], align 8
// CHK-CXX-NEXT:    [[TMP4:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP2]], align 8
// CHK-CXX-NEXT:    [[TMP5:%.*]] = extractelement <2 x float> [[TMP4]], i64 0
// CHK-CXX-NEXT:    store float [[TMP5]], ptr [[TMP]], align 4
// CHK-CXX-NEXT:    store i64 [[TMP3]], ptr [[ATOMIC_TEMP3]], align 8
// CHK-CXX-NEXT:    [[TMP6:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP3]], align 8
// CHK-CXX-NEXT:    [[TMP7:%.*]] = insertelement <2 x float> [[TMP6]], float [[CONV]], i64 0
// CHK-CXX-NEXT:    store <2 x float> [[TMP7]], ptr [[ATOMIC_TEMP3]], align 8
// CHK-CXX-NEXT:    [[TMP8:%.*]] = load i64, ptr [[ATOMIC_TEMP3]], align 8
// CHK-CXX-NEXT:    [[TMP9:%.*]] = cmpxchg ptr [[FLOAT2X]], i64 [[TMP3]], i64 [[TMP8]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP10]] = extractvalue { i64, i1 } [[TMP9]], 0
// CHK-CXX-NEXT:    [[TMP11:%.*]] = extractvalue { i64, i1 } [[TMP9]], 1
// CHK-CXX-NEXT:    br i1 [[TMP11]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    store i64 [[TMP10]], ptr [[ATOMIC_TEMP4]], align 8
// CHK-CXX-NEXT:    [[TMP12:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP4]], align 8
// CHK-CXX-NEXT:    [[TMP13:%.*]] = extractelement <2 x float> [[TMP12]], i64 0
// CHK-CXX-NEXT:    [[CMP5:%.*]] = fcmp ogt float [[TMP13]], [[CONV]]
// CHK-CXX-NEXT:    [[FROMBOOL6:%.*]] = zext i1 [[CMP5]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL6]], ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP5]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP14:%.*]] = load float, ptr [[TMP]], align 4
// CHK-CXX-NEXT:    [[TMP15:%.*]] = load i8, ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    [[TMP16:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[CONV7:%.*]] = sitofp i32 [[TMP16]] to float
// CHK-CXX-NEXT:    [[TMP17:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[CONV8:%.*]] = sitofp i32 [[TMP17]] to float
// CHK-CXX-NEXT:    [[ATOMIC_LOAD9:%.*]] = load atomic i64, ptr [[FLOAT2X]] monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD9]], ptr [[ATOMIC_TEMP11]], align 8
// CHK-CXX-NEXT:    [[TMP18:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP11]], align 8
// CHK-CXX-NEXT:    [[TMP19:%.*]] = extractelement <2 x float> [[TMP18]], i64 0
// CHK-CXX-NEXT:    store float [[TMP19]], ptr [[ATMP10]], align 4
// CHK-CXX-NEXT:    store float [[TMP19]], ptr [[ATOMIC_TEMP12]], align 8
// CHK-CXX-NEXT:    [[TMP20:%.*]] = load i64, ptr [[ATOMIC_TEMP12]], align 8
// CHK-CXX-NEXT:    store float [[CONV8]], ptr [[ATOMIC_TEMP13]], align 8
// CHK-CXX-NEXT:    [[TMP21:%.*]] = load i64, ptr [[ATOMIC_TEMP13]], align 8
// CHK-CXX-NEXT:    [[CMP14:%.*]] = icmp eq i64 [[TMP20]], [[TMP21]]
// CHK-CXX-NEXT:    [[FROMBOOL16:%.*]] = zext i1 [[CMP14]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL16]], ptr [[ATMP15]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP14]], label [[ATOMIC_CONT17:%.*]], label [[ATOMIC_EXIT26:%.*]]
// CHK-CXX:       atomic_cont17:
// CHK-CXX-NEXT:    [[TMP22:%.*]] = phi i64 [ [[ATOMIC_LOAD9]], [[ATOMIC_EXIT]] ], [ [[TMP29:%.*]], [[ATOMIC_CMP20:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP22]], ptr [[ATOMIC_TEMP18]], align 8
// CHK-CXX-NEXT:    [[TMP23:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP18]], align 8
// CHK-CXX-NEXT:    [[TMP24:%.*]] = extractelement <2 x float> [[TMP23]], i64 0
// CHK-CXX-NEXT:    store float [[TMP24]], ptr [[ATMP10]], align 4
// CHK-CXX-NEXT:    store i64 [[TMP22]], ptr [[ATOMIC_TEMP19]], align 8
// CHK-CXX-NEXT:    [[TMP25:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP19]], align 8
// CHK-CXX-NEXT:    [[TMP26:%.*]] = insertelement <2 x float> [[TMP25]], float [[CONV7]], i64 0
// CHK-CXX-NEXT:    store <2 x float> [[TMP26]], ptr [[ATOMIC_TEMP19]], align 8
// CHK-CXX-NEXT:    [[TMP27:%.*]] = load i64, ptr [[ATOMIC_TEMP19]], align 8
// CHK-CXX-NEXT:    [[TMP28:%.*]] = cmpxchg ptr [[FLOAT2X]], i64 [[TMP22]], i64 [[TMP27]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP29]] = extractvalue { i64, i1 } [[TMP28]], 0
// CHK-CXX-NEXT:    [[TMP30:%.*]] = extractvalue { i64, i1 } [[TMP28]], 1
// CHK-CXX-NEXT:    br i1 [[TMP30]], label [[ATOMIC_EXIT26]], label [[ATOMIC_CMP20]]
// CHK-CXX:       atomic_cmp20:
// CHK-CXX-NEXT:    store i64 [[TMP29]], ptr [[ATOMIC_TEMP21]], align 8
// CHK-CXX-NEXT:    [[TMP31:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP21]], align 8
// CHK-CXX-NEXT:    [[TMP32:%.*]] = extractelement <2 x float> [[TMP31]], i64 0
// CHK-CXX-NEXT:    store float [[TMP32]], ptr [[ATOMIC_TEMP22]], align 8
// CHK-CXX-NEXT:    [[TMP33:%.*]] = load i64, ptr [[ATOMIC_TEMP22]], align 8
// CHK-CXX-NEXT:    store float [[CONV8]], ptr [[ATOMIC_TEMP23]], align 8
// CHK-CXX-NEXT:    [[TMP34:%.*]] = load i64, ptr [[ATOMIC_TEMP23]], align 8
// CHK-CXX-NEXT:    [[CMP24:%.*]] = icmp eq i64 [[TMP33]], [[TMP34]]
// CHK-CXX-NEXT:    [[FROMBOOL25:%.*]] = zext i1 [[CMP24]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL25]], ptr [[ATMP15]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP24]], label [[ATOMIC_CONT17]], label [[ATOMIC_EXIT26]]
// CHK-CXX:       atomic_exit26:
// CHK-CXX-NEXT:    [[TMP35:%.*]] = load float, ptr [[ATMP10]], align 4
// CHK-CXX-NEXT:    [[TMP36:%.*]] = load i8, ptr [[ATMP15]], align 1
// CHK-CXX-NEXT:    [[TMP37:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[CONV27:%.*]] = sitofp i32 [[TMP37]] to float
// CHK-CXX-NEXT:    [[ATOMIC_LOAD28:%.*]] = load atomic i64, ptr [[FLOAT2X]] monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD28]], ptr [[ATOMIC_TEMP30]], align 8
// CHK-CXX-NEXT:    [[TMP38:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP30]], align 8
// CHK-CXX-NEXT:    [[TMP39:%.*]] = extractelement <2 x float> [[TMP38]], i64 0
// CHK-CXX-NEXT:    store float [[TMP39]], ptr [[ATMP29]], align 4
// CHK-CXX-NEXT:    [[CMP31:%.*]] = fcmp olt float [[TMP39]], [[CONV27]]
// CHK-CXX-NEXT:    [[FROMBOOL33:%.*]] = zext i1 [[CMP31]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL33]], ptr [[ATMP32]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP31]], label [[ATOMIC_CONT34:%.*]], label [[ATOMIC_EXIT41:%.*]]
// CHK-CXX:       atomic_cont34:
// CHK-CXX-NEXT:    [[TMP40:%.*]] = phi i64 [ [[ATOMIC_LOAD28]], [[ATOMIC_EXIT26]] ], [ [[TMP47:%.*]], [[ATOMIC_CMP37:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP40]], ptr [[ATOMIC_TEMP35]], align 8
// CHK-CXX-NEXT:    [[TMP41:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP35]], align 8
// CHK-CXX-NEXT:    [[TMP42:%.*]] = extractelement <2 x float> [[TMP41]], i64 0
// CHK-CXX-NEXT:    store float [[TMP42]], ptr [[ATMP29]], align 4
// CHK-CXX-NEXT:    store i64 [[TMP40]], ptr [[ATOMIC_TEMP36]], align 8
// CHK-CXX-NEXT:    [[TMP43:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP36]], align 8
// CHK-CXX-NEXT:    [[TMP44:%.*]] = insertelement <2 x float> [[TMP43]], float [[CONV27]], i64 0
// CHK-CXX-NEXT:    store <2 x float> [[TMP44]], ptr [[ATOMIC_TEMP36]], align 8
// CHK-CXX-NEXT:    [[TMP45:%.*]] = load i64, ptr [[ATOMIC_TEMP36]], align 8
// CHK-CXX-NEXT:    [[TMP46:%.*]] = cmpxchg ptr [[FLOAT2X]], i64 [[TMP40]], i64 [[TMP45]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP47]] = extractvalue { i64, i1 } [[TMP46]], 0
// CHK-CXX-NEXT:    [[TMP48:%.*]] = extractvalue { i64, i1 } [[TMP46]], 1
// CHK-CXX-NEXT:    br i1 [[TMP48]], label [[ATOMIC_EXIT41]], label [[ATOMIC_CMP37]]
// CHK-CXX:       atomic_cmp37:
// CHK-CXX-NEXT:    store i64 [[TMP47]], ptr [[ATOMIC_TEMP38]], align 8
// CHK-CXX-NEXT:    [[TMP49:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP38]], align 8
// CHK-CXX-NEXT:    [[TMP50:%.*]] = extractelement <2 x float> [[TMP49]], i64 0
// CHK-CXX-NEXT:    [[CMP39:%.*]] = fcmp olt float [[TMP50]], [[CONV27]]
// CHK-CXX-NEXT:    [[FROMBOOL40:%.*]] = zext i1 [[CMP39]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL40]], ptr [[ATMP32]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP39]], label [[ATOMIC_CONT34]], label [[ATOMIC_EXIT41]]
// CHK-CXX:       atomic_exit41:
// CHK-CXX-NEXT:    [[TMP51:%.*]] = load float, ptr [[ATMP29]], align 4
// CHK-CXX-NEXT:    [[TMP52:%.*]] = load i8, ptr [[ATMP32]], align 1
// CHK-CXX-NEXT:    ret void
//
void test_ext_vector() {
  typedef float float2 __attribute__((ext_vector_type(2)));
  float2 float2x;

  int expr, d, e;

  #pragma omp atomic compare
  float2x.x = expr < float2x.x ? expr : float2x.x; // MIN

  #pragma omp atomic compare
  float2x.x = float2x.x == e ? d : float2x.x;

  #pragma omp atomic compare
  if (float2x.x < expr) { float2x.x = expr; } // MAX
}

#endif // HEADER
// end INTEL_COLLAB
