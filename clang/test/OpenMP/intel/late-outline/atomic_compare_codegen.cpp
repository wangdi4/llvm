// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py
// RUN: %clang_cc1 -verify -triple x86_64-unknown-linux-gnu -fopenmp -x c \
// RUN:  -fopenmp-late-outline -fopenmp-version=51 -emit-llvm %s -o - \
// RUN:  | FileCheck %s --check-prefix CHK-C

// RUN: %clang_cc1 -verify -triple x86_64-unknown-linux-gnu -fopenmp -x c \
// RUN: -fopenmp-late-outline -fopenmp-version=51 -emit-pch %s -o %t.pch

// RUN: %clang_cc1 -verify -triple x86_64-unknown-linux-gnu -fopenmp  -x c \
// RUN:  -fopenmp-late-outline -fopenmp-version=51 -emit-llvm %s -o - \
// RUN:  -include-pch %t.pch | FileCheck %s --check-prefix CHK-C
//
// RUN: %clang_cc1 -verify -triple x86_64-unknown-linux-gnu -fopenmp \
// RUN:  -fopenmp-late-outline -fopenmp-version=51 -emit-llvm %s -o - \
// RUN:  | FileCheck %s --check-prefix CHK-CXX
//
// RUN: %clang_cc1 -verify -triple x86_64-unknown-linux-gnu -fopenmp \
// RUN: -fopenmp-late-outline -fopenmp-version=51 -emit-pch %s -o %t.pch

// RUN: %clang_cc1 -verify -triple x86_64-unknown-linux-gnu -fopenmp \
// RUN:  -fopenmp-late-outline -fopenmp-version=51 -emit-llvm %s -o - \
// RUN:  -include-pch %t.pch | FileCheck %s --check-prefix CHK-CXX
//
// expected-no-diagnostics
#ifndef HEADER
#define HEADER

// CHK-C-LABEL: @test_int(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[X:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP5:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP12:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP19:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP26:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP33:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP40:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP47:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP54:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP61:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[TMP0:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP1:%.*]] = phi i32 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP0]], i32* [[ATOMIC_TEMP]], align 4
// CHK-C-NEXT:    [[TMP2:%.*]] = load i32, i32* [[ATOMIC_TEMP]], align 4
// CHK-C-NEXT:    [[TMP3:%.*]] = cmpxchg i32* [[X]], i32 [[TMP1]], i32 [[TMP2]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP4]] = extractvalue { i32, i1 } [[TMP3]], 0
// CHK-C-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i1 } [[TMP3]], 1
// CHK-C-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    [[CMP1:%.*]] = icmp sgt i32 [[TMP4]], [[TMP0]]
// CHK-C-NEXT:    br i1 [[CMP1]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP6:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD2:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    [[CMP3:%.*]] = icmp slt i32 [[ATOMIC_LOAD2]], [[TMP6]]
// CHK-C-NEXT:    br i1 [[CMP3]], label [[ATOMIC_CONT4:%.*]], label [[ATOMIC_EXIT8:%.*]]
// CHK-C:       atomic_cont4:
// CHK-C-NEXT:    [[TMP7:%.*]] = phi i32 [ [[ATOMIC_LOAD2]], [[ATOMIC_EXIT]] ], [ [[TMP10:%.*]], [[ATOMIC_CMP6:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP6]], i32* [[ATOMIC_TEMP5]], align 4
// CHK-C-NEXT:    [[TMP8:%.*]] = load i32, i32* [[ATOMIC_TEMP5]], align 4
// CHK-C-NEXT:    [[TMP9:%.*]] = cmpxchg i32* [[X]], i32 [[TMP7]], i32 [[TMP8]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP10]] = extractvalue { i32, i1 } [[TMP9]], 0
// CHK-C-NEXT:    [[TMP11:%.*]] = extractvalue { i32, i1 } [[TMP9]], 1
// CHK-C-NEXT:    br i1 [[TMP11]], label [[ATOMIC_EXIT8]], label [[ATOMIC_CMP6]]
// CHK-C:       atomic_cmp6:
// CHK-C-NEXT:    [[CMP7:%.*]] = icmp slt i32 [[TMP10]], [[TMP6]]
// CHK-C-NEXT:    br i1 [[CMP7]], label [[ATOMIC_CONT4]], label [[ATOMIC_EXIT8]]
// CHK-C:       atomic_exit8:
// CHK-C-NEXT:    [[TMP12:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD9:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    [[CMP10:%.*]] = icmp slt i32 [[ATOMIC_LOAD9]], [[TMP12]]
// CHK-C-NEXT:    br i1 [[CMP10]], label [[ATOMIC_CONT11:%.*]], label [[ATOMIC_EXIT15:%.*]]
// CHK-C:       atomic_cont11:
// CHK-C-NEXT:    [[TMP13:%.*]] = phi i32 [ [[ATOMIC_LOAD9]], [[ATOMIC_EXIT8]] ], [ [[TMP16:%.*]], [[ATOMIC_CMP13:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP12]], i32* [[ATOMIC_TEMP12]], align 4
// CHK-C-NEXT:    [[TMP14:%.*]] = load i32, i32* [[ATOMIC_TEMP12]], align 4
// CHK-C-NEXT:    [[TMP15:%.*]] = cmpxchg i32* [[X]], i32 [[TMP13]], i32 [[TMP14]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP16]] = extractvalue { i32, i1 } [[TMP15]], 0
// CHK-C-NEXT:    [[TMP17:%.*]] = extractvalue { i32, i1 } [[TMP15]], 1
// CHK-C-NEXT:    br i1 [[TMP17]], label [[ATOMIC_EXIT15]], label [[ATOMIC_CMP13]]
// CHK-C:       atomic_cmp13:
// CHK-C-NEXT:    [[CMP14:%.*]] = icmp slt i32 [[TMP16]], [[TMP12]]
// CHK-C-NEXT:    br i1 [[CMP14]], label [[ATOMIC_CONT11]], label [[ATOMIC_EXIT15]]
// CHK-C:       atomic_exit15:
// CHK-C-NEXT:    [[TMP18:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD16:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    [[CMP17:%.*]] = icmp sgt i32 [[ATOMIC_LOAD16]], [[TMP18]]
// CHK-C-NEXT:    br i1 [[CMP17]], label [[ATOMIC_CONT18:%.*]], label [[ATOMIC_EXIT22:%.*]]
// CHK-C:       atomic_cont18:
// CHK-C-NEXT:    [[TMP19:%.*]] = phi i32 [ [[ATOMIC_LOAD16]], [[ATOMIC_EXIT15]] ], [ [[TMP22:%.*]], [[ATOMIC_CMP20:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP18]], i32* [[ATOMIC_TEMP19]], align 4
// CHK-C-NEXT:    [[TMP20:%.*]] = load i32, i32* [[ATOMIC_TEMP19]], align 4
// CHK-C-NEXT:    [[TMP21:%.*]] = cmpxchg i32* [[X]], i32 [[TMP19]], i32 [[TMP20]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP22]] = extractvalue { i32, i1 } [[TMP21]], 0
// CHK-C-NEXT:    [[TMP23:%.*]] = extractvalue { i32, i1 } [[TMP21]], 1
// CHK-C-NEXT:    br i1 [[TMP23]], label [[ATOMIC_EXIT22]], label [[ATOMIC_CMP20]]
// CHK-C:       atomic_cmp20:
// CHK-C-NEXT:    [[CMP21:%.*]] = icmp sgt i32 [[TMP22]], [[TMP18]]
// CHK-C-NEXT:    br i1 [[CMP21]], label [[ATOMIC_CONT18]], label [[ATOMIC_EXIT22]]
// CHK-C:       atomic_exit22:
// CHK-C-NEXT:    [[TMP24:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP25:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD23:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    [[CMP24:%.*]] = icmp eq i32 [[ATOMIC_LOAD23]], [[TMP25]]
// CHK-C-NEXT:    br i1 [[CMP24]], label [[ATOMIC_CONT25:%.*]], label [[ATOMIC_EXIT29:%.*]]
// CHK-C:       atomic_cont25:
// CHK-C-NEXT:    [[TMP26:%.*]] = phi i32 [ [[ATOMIC_LOAD23]], [[ATOMIC_EXIT22]] ], [ [[TMP29:%.*]], [[ATOMIC_CMP27:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP24]], i32* [[ATOMIC_TEMP26]], align 4
// CHK-C-NEXT:    [[TMP27:%.*]] = load i32, i32* [[ATOMIC_TEMP26]], align 4
// CHK-C-NEXT:    [[TMP28:%.*]] = cmpxchg i32* [[X]], i32 [[TMP26]], i32 [[TMP27]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP29]] = extractvalue { i32, i1 } [[TMP28]], 0
// CHK-C-NEXT:    [[TMP30:%.*]] = extractvalue { i32, i1 } [[TMP28]], 1
// CHK-C-NEXT:    br i1 [[TMP30]], label [[ATOMIC_EXIT29]], label [[ATOMIC_CMP27]]
// CHK-C:       atomic_cmp27:
// CHK-C-NEXT:    [[CMP28:%.*]] = icmp eq i32 [[TMP29]], [[TMP25]]
// CHK-C-NEXT:    br i1 [[CMP28]], label [[ATOMIC_CONT25]], label [[ATOMIC_EXIT29]]
// CHK-C:       atomic_exit29:
// CHK-C-NEXT:    [[TMP31:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD30:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    [[CMP31:%.*]] = icmp sgt i32 [[ATOMIC_LOAD30]], [[TMP31]]
// CHK-C-NEXT:    br i1 [[CMP31]], label [[ATOMIC_CONT32:%.*]], label [[ATOMIC_EXIT36:%.*]]
// CHK-C:       atomic_cont32:
// CHK-C-NEXT:    [[TMP32:%.*]] = phi i32 [ [[ATOMIC_LOAD30]], [[ATOMIC_EXIT29]] ], [ [[TMP35:%.*]], [[ATOMIC_CMP34:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP31]], i32* [[ATOMIC_TEMP33]], align 4
// CHK-C-NEXT:    [[TMP33:%.*]] = load i32, i32* [[ATOMIC_TEMP33]], align 4
// CHK-C-NEXT:    [[TMP34:%.*]] = cmpxchg i32* [[X]], i32 [[TMP32]], i32 [[TMP33]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP35]] = extractvalue { i32, i1 } [[TMP34]], 0
// CHK-C-NEXT:    [[TMP36:%.*]] = extractvalue { i32, i1 } [[TMP34]], 1
// CHK-C-NEXT:    br i1 [[TMP36]], label [[ATOMIC_EXIT36]], label [[ATOMIC_CMP34]]
// CHK-C:       atomic_cmp34:
// CHK-C-NEXT:    [[CMP35:%.*]] = icmp sgt i32 [[TMP35]], [[TMP31]]
// CHK-C-NEXT:    br i1 [[CMP35]], label [[ATOMIC_CONT32]], label [[ATOMIC_EXIT36]]
// CHK-C:       atomic_exit36:
// CHK-C-NEXT:    [[TMP37:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD37:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    [[CMP38:%.*]] = icmp slt i32 [[ATOMIC_LOAD37]], [[TMP37]]
// CHK-C-NEXT:    br i1 [[CMP38]], label [[ATOMIC_CONT39:%.*]], label [[ATOMIC_EXIT43:%.*]]
// CHK-C:       atomic_cont39:
// CHK-C-NEXT:    [[TMP38:%.*]] = phi i32 [ [[ATOMIC_LOAD37]], [[ATOMIC_EXIT36]] ], [ [[TMP41:%.*]], [[ATOMIC_CMP41:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP37]], i32* [[ATOMIC_TEMP40]], align 4
// CHK-C-NEXT:    [[TMP39:%.*]] = load i32, i32* [[ATOMIC_TEMP40]], align 4
// CHK-C-NEXT:    [[TMP40:%.*]] = cmpxchg i32* [[X]], i32 [[TMP38]], i32 [[TMP39]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP41]] = extractvalue { i32, i1 } [[TMP40]], 0
// CHK-C-NEXT:    [[TMP42:%.*]] = extractvalue { i32, i1 } [[TMP40]], 1
// CHK-C-NEXT:    br i1 [[TMP42]], label [[ATOMIC_EXIT43]], label [[ATOMIC_CMP41]]
// CHK-C:       atomic_cmp41:
// CHK-C-NEXT:    [[CMP42:%.*]] = icmp slt i32 [[TMP41]], [[TMP37]]
// CHK-C-NEXT:    br i1 [[CMP42]], label [[ATOMIC_CONT39]], label [[ATOMIC_EXIT43]]
// CHK-C:       atomic_exit43:
// CHK-C-NEXT:    [[TMP43:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD44:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    [[CMP45:%.*]] = icmp slt i32 [[ATOMIC_LOAD44]], [[TMP43]]
// CHK-C-NEXT:    br i1 [[CMP45]], label [[ATOMIC_CONT46:%.*]], label [[ATOMIC_EXIT50:%.*]]
// CHK-C:       atomic_cont46:
// CHK-C-NEXT:    [[TMP44:%.*]] = phi i32 [ [[ATOMIC_LOAD44]], [[ATOMIC_EXIT43]] ], [ [[TMP47:%.*]], [[ATOMIC_CMP48:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP43]], i32* [[ATOMIC_TEMP47]], align 4
// CHK-C-NEXT:    [[TMP45:%.*]] = load i32, i32* [[ATOMIC_TEMP47]], align 4
// CHK-C-NEXT:    [[TMP46:%.*]] = cmpxchg i32* [[X]], i32 [[TMP44]], i32 [[TMP45]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP47]] = extractvalue { i32, i1 } [[TMP46]], 0
// CHK-C-NEXT:    [[TMP48:%.*]] = extractvalue { i32, i1 } [[TMP46]], 1
// CHK-C-NEXT:    br i1 [[TMP48]], label [[ATOMIC_EXIT50]], label [[ATOMIC_CMP48]]
// CHK-C:       atomic_cmp48:
// CHK-C-NEXT:    [[CMP49:%.*]] = icmp slt i32 [[TMP47]], [[TMP43]]
// CHK-C-NEXT:    br i1 [[CMP49]], label [[ATOMIC_CONT46]], label [[ATOMIC_EXIT50]]
// CHK-C:       atomic_exit50:
// CHK-C-NEXT:    [[TMP49:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD51:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    [[CMP52:%.*]] = icmp sgt i32 [[ATOMIC_LOAD51]], [[TMP49]]
// CHK-C-NEXT:    br i1 [[CMP52]], label [[ATOMIC_CONT53:%.*]], label [[ATOMIC_EXIT57:%.*]]
// CHK-C:       atomic_cont53:
// CHK-C-NEXT:    [[TMP50:%.*]] = phi i32 [ [[ATOMIC_LOAD51]], [[ATOMIC_EXIT50]] ], [ [[TMP53:%.*]], [[ATOMIC_CMP55:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP49]], i32* [[ATOMIC_TEMP54]], align 4
// CHK-C-NEXT:    [[TMP51:%.*]] = load i32, i32* [[ATOMIC_TEMP54]], align 4
// CHK-C-NEXT:    [[TMP52:%.*]] = cmpxchg i32* [[X]], i32 [[TMP50]], i32 [[TMP51]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP53]] = extractvalue { i32, i1 } [[TMP52]], 0
// CHK-C-NEXT:    [[TMP54:%.*]] = extractvalue { i32, i1 } [[TMP52]], 1
// CHK-C-NEXT:    br i1 [[TMP54]], label [[ATOMIC_EXIT57]], label [[ATOMIC_CMP55]]
// CHK-C:       atomic_cmp55:
// CHK-C-NEXT:    [[CMP56:%.*]] = icmp sgt i32 [[TMP53]], [[TMP49]]
// CHK-C-NEXT:    br i1 [[CMP56]], label [[ATOMIC_CONT53]], label [[ATOMIC_EXIT57]]
// CHK-C:       atomic_exit57:
// CHK-C-NEXT:    [[TMP55:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP56:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD58:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    [[CMP59:%.*]] = icmp eq i32 [[ATOMIC_LOAD58]], [[TMP56]]
// CHK-C-NEXT:    br i1 [[CMP59]], label [[ATOMIC_CONT60:%.*]], label [[ATOMIC_EXIT64:%.*]]
// CHK-C:       atomic_cont60:
// CHK-C-NEXT:    [[TMP57:%.*]] = phi i32 [ [[ATOMIC_LOAD58]], [[ATOMIC_EXIT57]] ], [ [[TMP60:%.*]], [[ATOMIC_CMP62:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP55]], i32* [[ATOMIC_TEMP61]], align 4
// CHK-C-NEXT:    [[TMP58:%.*]] = load i32, i32* [[ATOMIC_TEMP61]], align 4
// CHK-C-NEXT:    [[TMP59:%.*]] = cmpxchg i32* [[X]], i32 [[TMP57]], i32 [[TMP58]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP60]] = extractvalue { i32, i1 } [[TMP59]], 0
// CHK-C-NEXT:    [[TMP61:%.*]] = extractvalue { i32, i1 } [[TMP59]], 1
// CHK-C-NEXT:    br i1 [[TMP61]], label [[ATOMIC_EXIT64]], label [[ATOMIC_CMP62]]
// CHK-C:       atomic_cmp62:
// CHK-C-NEXT:    [[CMP63:%.*]] = icmp eq i32 [[TMP60]], [[TMP56]]
// CHK-C-NEXT:    br i1 [[CMP63]], label [[ATOMIC_CONT60]], label [[ATOMIC_EXIT64]]
// CHK-C:       atomic_exit64:
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z8test_intv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[X:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP5:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP12:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP19:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP26:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP33:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP40:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP47:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP54:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP61:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP1:%.*]] = phi i32 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP0]], i32* [[ATOMIC_TEMP]], align 4
// CHK-CXX-NEXT:    [[TMP2:%.*]] = load i32, i32* [[ATOMIC_TEMP]], align 4
// CHK-CXX-NEXT:    [[TMP3:%.*]] = cmpxchg i32* [[X]], i32 [[TMP1]], i32 [[TMP2]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP4]] = extractvalue { i32, i1 } [[TMP3]], 0
// CHK-CXX-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i1 } [[TMP3]], 1
// CHK-CXX-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    [[CMP1:%.*]] = icmp sgt i32 [[TMP4]], [[TMP0]]
// CHK-CXX-NEXT:    br i1 [[CMP1]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP6:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD2:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    [[CMP3:%.*]] = icmp slt i32 [[ATOMIC_LOAD2]], [[TMP6]]
// CHK-CXX-NEXT:    br i1 [[CMP3]], label [[ATOMIC_CONT4:%.*]], label [[ATOMIC_EXIT8:%.*]]
// CHK-CXX:       atomic_cont4:
// CHK-CXX-NEXT:    [[TMP7:%.*]] = phi i32 [ [[ATOMIC_LOAD2]], [[ATOMIC_EXIT]] ], [ [[TMP10:%.*]], [[ATOMIC_CMP6:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP6]], i32* [[ATOMIC_TEMP5]], align 4
// CHK-CXX-NEXT:    [[TMP8:%.*]] = load i32, i32* [[ATOMIC_TEMP5]], align 4
// CHK-CXX-NEXT:    [[TMP9:%.*]] = cmpxchg i32* [[X]], i32 [[TMP7]], i32 [[TMP8]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP10]] = extractvalue { i32, i1 } [[TMP9]], 0
// CHK-CXX-NEXT:    [[TMP11:%.*]] = extractvalue { i32, i1 } [[TMP9]], 1
// CHK-CXX-NEXT:    br i1 [[TMP11]], label [[ATOMIC_EXIT8]], label [[ATOMIC_CMP6]]
// CHK-CXX:       atomic_cmp6:
// CHK-CXX-NEXT:    [[CMP7:%.*]] = icmp slt i32 [[TMP10]], [[TMP6]]
// CHK-CXX-NEXT:    br i1 [[CMP7]], label [[ATOMIC_CONT4]], label [[ATOMIC_EXIT8]]
// CHK-CXX:       atomic_exit8:
// CHK-CXX-NEXT:    [[TMP12:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD9:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    [[CMP10:%.*]] = icmp slt i32 [[ATOMIC_LOAD9]], [[TMP12]]
// CHK-CXX-NEXT:    br i1 [[CMP10]], label [[ATOMIC_CONT11:%.*]], label [[ATOMIC_EXIT15:%.*]]
// CHK-CXX:       atomic_cont11:
// CHK-CXX-NEXT:    [[TMP13:%.*]] = phi i32 [ [[ATOMIC_LOAD9]], [[ATOMIC_EXIT8]] ], [ [[TMP16:%.*]], [[ATOMIC_CMP13:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP12]], i32* [[ATOMIC_TEMP12]], align 4
// CHK-CXX-NEXT:    [[TMP14:%.*]] = load i32, i32* [[ATOMIC_TEMP12]], align 4
// CHK-CXX-NEXT:    [[TMP15:%.*]] = cmpxchg i32* [[X]], i32 [[TMP13]], i32 [[TMP14]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP16]] = extractvalue { i32, i1 } [[TMP15]], 0
// CHK-CXX-NEXT:    [[TMP17:%.*]] = extractvalue { i32, i1 } [[TMP15]], 1
// CHK-CXX-NEXT:    br i1 [[TMP17]], label [[ATOMIC_EXIT15]], label [[ATOMIC_CMP13]]
// CHK-CXX:       atomic_cmp13:
// CHK-CXX-NEXT:    [[CMP14:%.*]] = icmp slt i32 [[TMP16]], [[TMP12]]
// CHK-CXX-NEXT:    br i1 [[CMP14]], label [[ATOMIC_CONT11]], label [[ATOMIC_EXIT15]]
// CHK-CXX:       atomic_exit15:
// CHK-CXX-NEXT:    [[TMP18:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD16:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    [[CMP17:%.*]] = icmp sgt i32 [[ATOMIC_LOAD16]], [[TMP18]]
// CHK-CXX-NEXT:    br i1 [[CMP17]], label [[ATOMIC_CONT18:%.*]], label [[ATOMIC_EXIT22:%.*]]
// CHK-CXX:       atomic_cont18:
// CHK-CXX-NEXT:    [[TMP19:%.*]] = phi i32 [ [[ATOMIC_LOAD16]], [[ATOMIC_EXIT15]] ], [ [[TMP22:%.*]], [[ATOMIC_CMP20:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP18]], i32* [[ATOMIC_TEMP19]], align 4
// CHK-CXX-NEXT:    [[TMP20:%.*]] = load i32, i32* [[ATOMIC_TEMP19]], align 4
// CHK-CXX-NEXT:    [[TMP21:%.*]] = cmpxchg i32* [[X]], i32 [[TMP19]], i32 [[TMP20]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP22]] = extractvalue { i32, i1 } [[TMP21]], 0
// CHK-CXX-NEXT:    [[TMP23:%.*]] = extractvalue { i32, i1 } [[TMP21]], 1
// CHK-CXX-NEXT:    br i1 [[TMP23]], label [[ATOMIC_EXIT22]], label [[ATOMIC_CMP20]]
// CHK-CXX:       atomic_cmp20:
// CHK-CXX-NEXT:    [[CMP21:%.*]] = icmp sgt i32 [[TMP22]], [[TMP18]]
// CHK-CXX-NEXT:    br i1 [[CMP21]], label [[ATOMIC_CONT18]], label [[ATOMIC_EXIT22]]
// CHK-CXX:       atomic_exit22:
// CHK-CXX-NEXT:    [[TMP24:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP25:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD23:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    [[CMP24:%.*]] = icmp eq i32 [[ATOMIC_LOAD23]], [[TMP25]]
// CHK-CXX-NEXT:    br i1 [[CMP24]], label [[ATOMIC_CONT25:%.*]], label [[ATOMIC_EXIT29:%.*]]
// CHK-CXX:       atomic_cont25:
// CHK-CXX-NEXT:    [[TMP26:%.*]] = phi i32 [ [[ATOMIC_LOAD23]], [[ATOMIC_EXIT22]] ], [ [[TMP29:%.*]], [[ATOMIC_CMP27:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP24]], i32* [[ATOMIC_TEMP26]], align 4
// CHK-CXX-NEXT:    [[TMP27:%.*]] = load i32, i32* [[ATOMIC_TEMP26]], align 4
// CHK-CXX-NEXT:    [[TMP28:%.*]] = cmpxchg i32* [[X]], i32 [[TMP26]], i32 [[TMP27]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP29]] = extractvalue { i32, i1 } [[TMP28]], 0
// CHK-CXX-NEXT:    [[TMP30:%.*]] = extractvalue { i32, i1 } [[TMP28]], 1
// CHK-CXX-NEXT:    br i1 [[TMP30]], label [[ATOMIC_EXIT29]], label [[ATOMIC_CMP27]]
// CHK-CXX:       atomic_cmp27:
// CHK-CXX-NEXT:    [[CMP28:%.*]] = icmp eq i32 [[TMP29]], [[TMP25]]
// CHK-CXX-NEXT:    br i1 [[CMP28]], label [[ATOMIC_CONT25]], label [[ATOMIC_EXIT29]]
// CHK-CXX:       atomic_exit29:
// CHK-CXX-NEXT:    [[TMP31:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD30:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    [[CMP31:%.*]] = icmp sgt i32 [[ATOMIC_LOAD30]], [[TMP31]]
// CHK-CXX-NEXT:    br i1 [[CMP31]], label [[ATOMIC_CONT32:%.*]], label [[ATOMIC_EXIT36:%.*]]
// CHK-CXX:       atomic_cont32:
// CHK-CXX-NEXT:    [[TMP32:%.*]] = phi i32 [ [[ATOMIC_LOAD30]], [[ATOMIC_EXIT29]] ], [ [[TMP35:%.*]], [[ATOMIC_CMP34:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP31]], i32* [[ATOMIC_TEMP33]], align 4
// CHK-CXX-NEXT:    [[TMP33:%.*]] = load i32, i32* [[ATOMIC_TEMP33]], align 4
// CHK-CXX-NEXT:    [[TMP34:%.*]] = cmpxchg i32* [[X]], i32 [[TMP32]], i32 [[TMP33]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP35]] = extractvalue { i32, i1 } [[TMP34]], 0
// CHK-CXX-NEXT:    [[TMP36:%.*]] = extractvalue { i32, i1 } [[TMP34]], 1
// CHK-CXX-NEXT:    br i1 [[TMP36]], label [[ATOMIC_EXIT36]], label [[ATOMIC_CMP34]]
// CHK-CXX:       atomic_cmp34:
// CHK-CXX-NEXT:    [[CMP35:%.*]] = icmp sgt i32 [[TMP35]], [[TMP31]]
// CHK-CXX-NEXT:    br i1 [[CMP35]], label [[ATOMIC_CONT32]], label [[ATOMIC_EXIT36]]
// CHK-CXX:       atomic_exit36:
// CHK-CXX-NEXT:    [[TMP37:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD37:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    [[CMP38:%.*]] = icmp slt i32 [[ATOMIC_LOAD37]], [[TMP37]]
// CHK-CXX-NEXT:    br i1 [[CMP38]], label [[ATOMIC_CONT39:%.*]], label [[ATOMIC_EXIT43:%.*]]
// CHK-CXX:       atomic_cont39:
// CHK-CXX-NEXT:    [[TMP38:%.*]] = phi i32 [ [[ATOMIC_LOAD37]], [[ATOMIC_EXIT36]] ], [ [[TMP41:%.*]], [[ATOMIC_CMP41:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP37]], i32* [[ATOMIC_TEMP40]], align 4
// CHK-CXX-NEXT:    [[TMP39:%.*]] = load i32, i32* [[ATOMIC_TEMP40]], align 4
// CHK-CXX-NEXT:    [[TMP40:%.*]] = cmpxchg i32* [[X]], i32 [[TMP38]], i32 [[TMP39]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP41]] = extractvalue { i32, i1 } [[TMP40]], 0
// CHK-CXX-NEXT:    [[TMP42:%.*]] = extractvalue { i32, i1 } [[TMP40]], 1
// CHK-CXX-NEXT:    br i1 [[TMP42]], label [[ATOMIC_EXIT43]], label [[ATOMIC_CMP41]]
// CHK-CXX:       atomic_cmp41:
// CHK-CXX-NEXT:    [[CMP42:%.*]] = icmp slt i32 [[TMP41]], [[TMP37]]
// CHK-CXX-NEXT:    br i1 [[CMP42]], label [[ATOMIC_CONT39]], label [[ATOMIC_EXIT43]]
// CHK-CXX:       atomic_exit43:
// CHK-CXX-NEXT:    [[TMP43:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD44:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    [[CMP45:%.*]] = icmp slt i32 [[ATOMIC_LOAD44]], [[TMP43]]
// CHK-CXX-NEXT:    br i1 [[CMP45]], label [[ATOMIC_CONT46:%.*]], label [[ATOMIC_EXIT50:%.*]]
// CHK-CXX:       atomic_cont46:
// CHK-CXX-NEXT:    [[TMP44:%.*]] = phi i32 [ [[ATOMIC_LOAD44]], [[ATOMIC_EXIT43]] ], [ [[TMP47:%.*]], [[ATOMIC_CMP48:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP43]], i32* [[ATOMIC_TEMP47]], align 4
// CHK-CXX-NEXT:    [[TMP45:%.*]] = load i32, i32* [[ATOMIC_TEMP47]], align 4
// CHK-CXX-NEXT:    [[TMP46:%.*]] = cmpxchg i32* [[X]], i32 [[TMP44]], i32 [[TMP45]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP47]] = extractvalue { i32, i1 } [[TMP46]], 0
// CHK-CXX-NEXT:    [[TMP48:%.*]] = extractvalue { i32, i1 } [[TMP46]], 1
// CHK-CXX-NEXT:    br i1 [[TMP48]], label [[ATOMIC_EXIT50]], label [[ATOMIC_CMP48]]
// CHK-CXX:       atomic_cmp48:
// CHK-CXX-NEXT:    [[CMP49:%.*]] = icmp slt i32 [[TMP47]], [[TMP43]]
// CHK-CXX-NEXT:    br i1 [[CMP49]], label [[ATOMIC_CONT46]], label [[ATOMIC_EXIT50]]
// CHK-CXX:       atomic_exit50:
// CHK-CXX-NEXT:    [[TMP49:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD51:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    [[CMP52:%.*]] = icmp sgt i32 [[ATOMIC_LOAD51]], [[TMP49]]
// CHK-CXX-NEXT:    br i1 [[CMP52]], label [[ATOMIC_CONT53:%.*]], label [[ATOMIC_EXIT57:%.*]]
// CHK-CXX:       atomic_cont53:
// CHK-CXX-NEXT:    [[TMP50:%.*]] = phi i32 [ [[ATOMIC_LOAD51]], [[ATOMIC_EXIT50]] ], [ [[TMP53:%.*]], [[ATOMIC_CMP55:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP49]], i32* [[ATOMIC_TEMP54]], align 4
// CHK-CXX-NEXT:    [[TMP51:%.*]] = load i32, i32* [[ATOMIC_TEMP54]], align 4
// CHK-CXX-NEXT:    [[TMP52:%.*]] = cmpxchg i32* [[X]], i32 [[TMP50]], i32 [[TMP51]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP53]] = extractvalue { i32, i1 } [[TMP52]], 0
// CHK-CXX-NEXT:    [[TMP54:%.*]] = extractvalue { i32, i1 } [[TMP52]], 1
// CHK-CXX-NEXT:    br i1 [[TMP54]], label [[ATOMIC_EXIT57]], label [[ATOMIC_CMP55]]
// CHK-CXX:       atomic_cmp55:
// CHK-CXX-NEXT:    [[CMP56:%.*]] = icmp sgt i32 [[TMP53]], [[TMP49]]
// CHK-CXX-NEXT:    br i1 [[CMP56]], label [[ATOMIC_CONT53]], label [[ATOMIC_EXIT57]]
// CHK-CXX:       atomic_exit57:
// CHK-CXX-NEXT:    [[TMP55:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP56:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD58:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    [[CMP59:%.*]] = icmp eq i32 [[ATOMIC_LOAD58]], [[TMP56]]
// CHK-CXX-NEXT:    br i1 [[CMP59]], label [[ATOMIC_CONT60:%.*]], label [[ATOMIC_EXIT64:%.*]]
// CHK-CXX:       atomic_cont60:
// CHK-CXX-NEXT:    [[TMP57:%.*]] = phi i32 [ [[ATOMIC_LOAD58]], [[ATOMIC_EXIT57]] ], [ [[TMP60:%.*]], [[ATOMIC_CMP62:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP55]], i32* [[ATOMIC_TEMP61]], align 4
// CHK-CXX-NEXT:    [[TMP58:%.*]] = load i32, i32* [[ATOMIC_TEMP61]], align 4
// CHK-CXX-NEXT:    [[TMP59:%.*]] = cmpxchg i32* [[X]], i32 [[TMP57]], i32 [[TMP58]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP60]] = extractvalue { i32, i1 } [[TMP59]], 0
// CHK-CXX-NEXT:    [[TMP61:%.*]] = extractvalue { i32, i1 } [[TMP59]], 1
// CHK-CXX-NEXT:    br i1 [[TMP61]], label [[ATOMIC_EXIT64]], label [[ATOMIC_CMP62]]
// CHK-CXX:       atomic_cmp62:
// CHK-CXX-NEXT:    [[CMP63:%.*]] = icmp eq i32 [[TMP60]], [[TMP56]]
// CHK-CXX-NEXT:    br i1 [[CMP63]], label [[ATOMIC_CONT60]], label [[ATOMIC_EXIT64]]
// CHK-CXX:       atomic_exit64:
// CHK-CXX-NEXT:    ret void
//
void test_int() {
  // One of each form with 'int'.
  int x, expr, d, e;

  #pragma omp atomic compare
  x = expr < x ? expr : x; // MIN

  #pragma omp atomic compare
  x = expr > x ? expr : x; // MAX

  #pragma omp atomic compare
  x = x < expr ? expr : x; // MAX

  #pragma omp atomic compare
  x = x > expr ? expr : x; // MIN

  #pragma omp atomic compare
  x = x == e ? d : x;

  #pragma omp atomic compare
  if (expr < x) {
    x = expr;
  } // MIN

  #pragma omp atomic compare
  if (expr > x) {
    x = expr;
  } // MAX

  #pragma omp atomic compare
  if (x < expr) {
    x = expr;
  } // MAX

  #pragma omp atomic compare
  if (x > expr) {
    x = expr;
  } // MIN

  #pragma omp atomic compare
  if (x == e) {
    x = d;
  }
}

// CHK-C-LABEL: @test_unsigned_short(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[X:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[D:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[E:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATOMIC_TEMP5:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATOMIC_TEMP12:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATOMIC_TEMP19:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATOMIC_TEMP26:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATOMIC_TEMP33:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATOMIC_TEMP40:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATOMIC_TEMP47:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATOMIC_TEMP54:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATOMIC_TEMP61:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[TMP0:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    [[CMP:%.*]] = icmp ugt i16 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP1:%.*]] = phi i16 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP0]], i16* [[ATOMIC_TEMP]], align 2
// CHK-C-NEXT:    [[TMP2:%.*]] = load i16, i16* [[ATOMIC_TEMP]], align 2
// CHK-C-NEXT:    [[TMP3:%.*]] = cmpxchg i16* [[X]], i16 [[TMP1]], i16 [[TMP2]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP4]] = extractvalue { i16, i1 } [[TMP3]], 0
// CHK-C-NEXT:    [[TMP5:%.*]] = extractvalue { i16, i1 } [[TMP3]], 1
// CHK-C-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    [[CMP1:%.*]] = icmp ugt i16 [[TMP4]], [[TMP0]]
// CHK-C-NEXT:    br i1 [[CMP1]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP6:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD2:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    [[CMP3:%.*]] = icmp ult i16 [[ATOMIC_LOAD2]], [[TMP6]]
// CHK-C-NEXT:    br i1 [[CMP3]], label [[ATOMIC_CONT4:%.*]], label [[ATOMIC_EXIT8:%.*]]
// CHK-C:       atomic_cont4:
// CHK-C-NEXT:    [[TMP7:%.*]] = phi i16 [ [[ATOMIC_LOAD2]], [[ATOMIC_EXIT]] ], [ [[TMP10:%.*]], [[ATOMIC_CMP6:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP6]], i16* [[ATOMIC_TEMP5]], align 2
// CHK-C-NEXT:    [[TMP8:%.*]] = load i16, i16* [[ATOMIC_TEMP5]], align 2
// CHK-C-NEXT:    [[TMP9:%.*]] = cmpxchg i16* [[X]], i16 [[TMP7]], i16 [[TMP8]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP10]] = extractvalue { i16, i1 } [[TMP9]], 0
// CHK-C-NEXT:    [[TMP11:%.*]] = extractvalue { i16, i1 } [[TMP9]], 1
// CHK-C-NEXT:    br i1 [[TMP11]], label [[ATOMIC_EXIT8]], label [[ATOMIC_CMP6]]
// CHK-C:       atomic_cmp6:
// CHK-C-NEXT:    [[CMP7:%.*]] = icmp ult i16 [[TMP10]], [[TMP6]]
// CHK-C-NEXT:    br i1 [[CMP7]], label [[ATOMIC_CONT4]], label [[ATOMIC_EXIT8]]
// CHK-C:       atomic_exit8:
// CHK-C-NEXT:    [[TMP12:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD9:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    [[CMP10:%.*]] = icmp ult i16 [[ATOMIC_LOAD9]], [[TMP12]]
// CHK-C-NEXT:    br i1 [[CMP10]], label [[ATOMIC_CONT11:%.*]], label [[ATOMIC_EXIT15:%.*]]
// CHK-C:       atomic_cont11:
// CHK-C-NEXT:    [[TMP13:%.*]] = phi i16 [ [[ATOMIC_LOAD9]], [[ATOMIC_EXIT8]] ], [ [[TMP16:%.*]], [[ATOMIC_CMP13:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP12]], i16* [[ATOMIC_TEMP12]], align 2
// CHK-C-NEXT:    [[TMP14:%.*]] = load i16, i16* [[ATOMIC_TEMP12]], align 2
// CHK-C-NEXT:    [[TMP15:%.*]] = cmpxchg i16* [[X]], i16 [[TMP13]], i16 [[TMP14]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP16]] = extractvalue { i16, i1 } [[TMP15]], 0
// CHK-C-NEXT:    [[TMP17:%.*]] = extractvalue { i16, i1 } [[TMP15]], 1
// CHK-C-NEXT:    br i1 [[TMP17]], label [[ATOMIC_EXIT15]], label [[ATOMIC_CMP13]]
// CHK-C:       atomic_cmp13:
// CHK-C-NEXT:    [[CMP14:%.*]] = icmp ult i16 [[TMP16]], [[TMP12]]
// CHK-C-NEXT:    br i1 [[CMP14]], label [[ATOMIC_CONT11]], label [[ATOMIC_EXIT15]]
// CHK-C:       atomic_exit15:
// CHK-C-NEXT:    [[TMP18:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD16:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    [[CMP17:%.*]] = icmp ugt i16 [[ATOMIC_LOAD16]], [[TMP18]]
// CHK-C-NEXT:    br i1 [[CMP17]], label [[ATOMIC_CONT18:%.*]], label [[ATOMIC_EXIT22:%.*]]
// CHK-C:       atomic_cont18:
// CHK-C-NEXT:    [[TMP19:%.*]] = phi i16 [ [[ATOMIC_LOAD16]], [[ATOMIC_EXIT15]] ], [ [[TMP22:%.*]], [[ATOMIC_CMP20:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP18]], i16* [[ATOMIC_TEMP19]], align 2
// CHK-C-NEXT:    [[TMP20:%.*]] = load i16, i16* [[ATOMIC_TEMP19]], align 2
// CHK-C-NEXT:    [[TMP21:%.*]] = cmpxchg i16* [[X]], i16 [[TMP19]], i16 [[TMP20]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP22]] = extractvalue { i16, i1 } [[TMP21]], 0
// CHK-C-NEXT:    [[TMP23:%.*]] = extractvalue { i16, i1 } [[TMP21]], 1
// CHK-C-NEXT:    br i1 [[TMP23]], label [[ATOMIC_EXIT22]], label [[ATOMIC_CMP20]]
// CHK-C:       atomic_cmp20:
// CHK-C-NEXT:    [[CMP21:%.*]] = icmp ugt i16 [[TMP22]], [[TMP18]]
// CHK-C-NEXT:    br i1 [[CMP21]], label [[ATOMIC_CONT18]], label [[ATOMIC_EXIT22]]
// CHK-C:       atomic_exit22:
// CHK-C-NEXT:    [[TMP24:%.*]] = load i16, i16* [[D]], align 2
// CHK-C-NEXT:    [[TMP25:%.*]] = load i16, i16* [[E]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD23:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    [[CMP24:%.*]] = icmp eq i16 [[ATOMIC_LOAD23]], [[TMP25]]
// CHK-C-NEXT:    br i1 [[CMP24]], label [[ATOMIC_CONT25:%.*]], label [[ATOMIC_EXIT29:%.*]]
// CHK-C:       atomic_cont25:
// CHK-C-NEXT:    [[TMP26:%.*]] = phi i16 [ [[ATOMIC_LOAD23]], [[ATOMIC_EXIT22]] ], [ [[TMP29:%.*]], [[ATOMIC_CMP27:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP24]], i16* [[ATOMIC_TEMP26]], align 2
// CHK-C-NEXT:    [[TMP27:%.*]] = load i16, i16* [[ATOMIC_TEMP26]], align 2
// CHK-C-NEXT:    [[TMP28:%.*]] = cmpxchg i16* [[X]], i16 [[TMP26]], i16 [[TMP27]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP29]] = extractvalue { i16, i1 } [[TMP28]], 0
// CHK-C-NEXT:    [[TMP30:%.*]] = extractvalue { i16, i1 } [[TMP28]], 1
// CHK-C-NEXT:    br i1 [[TMP30]], label [[ATOMIC_EXIT29]], label [[ATOMIC_CMP27]]
// CHK-C:       atomic_cmp27:
// CHK-C-NEXT:    [[CMP28:%.*]] = icmp eq i16 [[TMP29]], [[TMP25]]
// CHK-C-NEXT:    br i1 [[CMP28]], label [[ATOMIC_CONT25]], label [[ATOMIC_EXIT29]]
// CHK-C:       atomic_exit29:
// CHK-C-NEXT:    [[TMP31:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD30:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    [[CMP31:%.*]] = icmp ugt i16 [[ATOMIC_LOAD30]], [[TMP31]]
// CHK-C-NEXT:    br i1 [[CMP31]], label [[ATOMIC_CONT32:%.*]], label [[ATOMIC_EXIT36:%.*]]
// CHK-C:       atomic_cont32:
// CHK-C-NEXT:    [[TMP32:%.*]] = phi i16 [ [[ATOMIC_LOAD30]], [[ATOMIC_EXIT29]] ], [ [[TMP35:%.*]], [[ATOMIC_CMP34:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP31]], i16* [[ATOMIC_TEMP33]], align 2
// CHK-C-NEXT:    [[TMP33:%.*]] = load i16, i16* [[ATOMIC_TEMP33]], align 2
// CHK-C-NEXT:    [[TMP34:%.*]] = cmpxchg i16* [[X]], i16 [[TMP32]], i16 [[TMP33]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP35]] = extractvalue { i16, i1 } [[TMP34]], 0
// CHK-C-NEXT:    [[TMP36:%.*]] = extractvalue { i16, i1 } [[TMP34]], 1
// CHK-C-NEXT:    br i1 [[TMP36]], label [[ATOMIC_EXIT36]], label [[ATOMIC_CMP34]]
// CHK-C:       atomic_cmp34:
// CHK-C-NEXT:    [[CMP35:%.*]] = icmp ugt i16 [[TMP35]], [[TMP31]]
// CHK-C-NEXT:    br i1 [[CMP35]], label [[ATOMIC_CONT32]], label [[ATOMIC_EXIT36]]
// CHK-C:       atomic_exit36:
// CHK-C-NEXT:    [[TMP37:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD37:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    [[CMP38:%.*]] = icmp ult i16 [[ATOMIC_LOAD37]], [[TMP37]]
// CHK-C-NEXT:    br i1 [[CMP38]], label [[ATOMIC_CONT39:%.*]], label [[ATOMIC_EXIT43:%.*]]
// CHK-C:       atomic_cont39:
// CHK-C-NEXT:    [[TMP38:%.*]] = phi i16 [ [[ATOMIC_LOAD37]], [[ATOMIC_EXIT36]] ], [ [[TMP41:%.*]], [[ATOMIC_CMP41:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP37]], i16* [[ATOMIC_TEMP40]], align 2
// CHK-C-NEXT:    [[TMP39:%.*]] = load i16, i16* [[ATOMIC_TEMP40]], align 2
// CHK-C-NEXT:    [[TMP40:%.*]] = cmpxchg i16* [[X]], i16 [[TMP38]], i16 [[TMP39]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP41]] = extractvalue { i16, i1 } [[TMP40]], 0
// CHK-C-NEXT:    [[TMP42:%.*]] = extractvalue { i16, i1 } [[TMP40]], 1
// CHK-C-NEXT:    br i1 [[TMP42]], label [[ATOMIC_EXIT43]], label [[ATOMIC_CMP41]]
// CHK-C:       atomic_cmp41:
// CHK-C-NEXT:    [[CMP42:%.*]] = icmp ult i16 [[TMP41]], [[TMP37]]
// CHK-C-NEXT:    br i1 [[CMP42]], label [[ATOMIC_CONT39]], label [[ATOMIC_EXIT43]]
// CHK-C:       atomic_exit43:
// CHK-C-NEXT:    [[TMP43:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD44:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    [[CMP45:%.*]] = icmp ult i16 [[ATOMIC_LOAD44]], [[TMP43]]
// CHK-C-NEXT:    br i1 [[CMP45]], label [[ATOMIC_CONT46:%.*]], label [[ATOMIC_EXIT50:%.*]]
// CHK-C:       atomic_cont46:
// CHK-C-NEXT:    [[TMP44:%.*]] = phi i16 [ [[ATOMIC_LOAD44]], [[ATOMIC_EXIT43]] ], [ [[TMP47:%.*]], [[ATOMIC_CMP48:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP43]], i16* [[ATOMIC_TEMP47]], align 2
// CHK-C-NEXT:    [[TMP45:%.*]] = load i16, i16* [[ATOMIC_TEMP47]], align 2
// CHK-C-NEXT:    [[TMP46:%.*]] = cmpxchg i16* [[X]], i16 [[TMP44]], i16 [[TMP45]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP47]] = extractvalue { i16, i1 } [[TMP46]], 0
// CHK-C-NEXT:    [[TMP48:%.*]] = extractvalue { i16, i1 } [[TMP46]], 1
// CHK-C-NEXT:    br i1 [[TMP48]], label [[ATOMIC_EXIT50]], label [[ATOMIC_CMP48]]
// CHK-C:       atomic_cmp48:
// CHK-C-NEXT:    [[CMP49:%.*]] = icmp ult i16 [[TMP47]], [[TMP43]]
// CHK-C-NEXT:    br i1 [[CMP49]], label [[ATOMIC_CONT46]], label [[ATOMIC_EXIT50]]
// CHK-C:       atomic_exit50:
// CHK-C-NEXT:    [[TMP49:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD51:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    [[CMP52:%.*]] = icmp ugt i16 [[ATOMIC_LOAD51]], [[TMP49]]
// CHK-C-NEXT:    br i1 [[CMP52]], label [[ATOMIC_CONT53:%.*]], label [[ATOMIC_EXIT57:%.*]]
// CHK-C:       atomic_cont53:
// CHK-C-NEXT:    [[TMP50:%.*]] = phi i16 [ [[ATOMIC_LOAD51]], [[ATOMIC_EXIT50]] ], [ [[TMP53:%.*]], [[ATOMIC_CMP55:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP49]], i16* [[ATOMIC_TEMP54]], align 2
// CHK-C-NEXT:    [[TMP51:%.*]] = load i16, i16* [[ATOMIC_TEMP54]], align 2
// CHK-C-NEXT:    [[TMP52:%.*]] = cmpxchg i16* [[X]], i16 [[TMP50]], i16 [[TMP51]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP53]] = extractvalue { i16, i1 } [[TMP52]], 0
// CHK-C-NEXT:    [[TMP54:%.*]] = extractvalue { i16, i1 } [[TMP52]], 1
// CHK-C-NEXT:    br i1 [[TMP54]], label [[ATOMIC_EXIT57]], label [[ATOMIC_CMP55]]
// CHK-C:       atomic_cmp55:
// CHK-C-NEXT:    [[CMP56:%.*]] = icmp ugt i16 [[TMP53]], [[TMP49]]
// CHK-C-NEXT:    br i1 [[CMP56]], label [[ATOMIC_CONT53]], label [[ATOMIC_EXIT57]]
// CHK-C:       atomic_exit57:
// CHK-C-NEXT:    [[TMP55:%.*]] = load i16, i16* [[D]], align 2
// CHK-C-NEXT:    [[TMP56:%.*]] = load i16, i16* [[E]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD58:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    [[CMP59:%.*]] = icmp eq i16 [[ATOMIC_LOAD58]], [[TMP56]]
// CHK-C-NEXT:    br i1 [[CMP59]], label [[ATOMIC_CONT60:%.*]], label [[ATOMIC_EXIT64:%.*]]
// CHK-C:       atomic_cont60:
// CHK-C-NEXT:    [[TMP57:%.*]] = phi i16 [ [[ATOMIC_LOAD58]], [[ATOMIC_EXIT57]] ], [ [[TMP60:%.*]], [[ATOMIC_CMP62:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP55]], i16* [[ATOMIC_TEMP61]], align 2
// CHK-C-NEXT:    [[TMP58:%.*]] = load i16, i16* [[ATOMIC_TEMP61]], align 2
// CHK-C-NEXT:    [[TMP59:%.*]] = cmpxchg i16* [[X]], i16 [[TMP57]], i16 [[TMP58]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP60]] = extractvalue { i16, i1 } [[TMP59]], 0
// CHK-C-NEXT:    [[TMP61:%.*]] = extractvalue { i16, i1 } [[TMP59]], 1
// CHK-C-NEXT:    br i1 [[TMP61]], label [[ATOMIC_EXIT64]], label [[ATOMIC_CMP62]]
// CHK-C:       atomic_cmp62:
// CHK-C-NEXT:    [[CMP63:%.*]] = icmp eq i16 [[TMP60]], [[TMP56]]
// CHK-C-NEXT:    br i1 [[CMP63]], label [[ATOMIC_CONT60]], label [[ATOMIC_EXIT64]]
// CHK-C:       atomic_exit64:
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z19test_unsigned_shortv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[X:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATOMIC_TEMP5:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATOMIC_TEMP12:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATOMIC_TEMP19:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATOMIC_TEMP26:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATOMIC_TEMP33:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATOMIC_TEMP40:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATOMIC_TEMP47:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATOMIC_TEMP54:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATOMIC_TEMP61:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    [[CMP:%.*]] = icmp ugt i16 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP1:%.*]] = phi i16 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP0]], i16* [[ATOMIC_TEMP]], align 2
// CHK-CXX-NEXT:    [[TMP2:%.*]] = load i16, i16* [[ATOMIC_TEMP]], align 2
// CHK-CXX-NEXT:    [[TMP3:%.*]] = cmpxchg i16* [[X]], i16 [[TMP1]], i16 [[TMP2]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP4]] = extractvalue { i16, i1 } [[TMP3]], 0
// CHK-CXX-NEXT:    [[TMP5:%.*]] = extractvalue { i16, i1 } [[TMP3]], 1
// CHK-CXX-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    [[CMP1:%.*]] = icmp ugt i16 [[TMP4]], [[TMP0]]
// CHK-CXX-NEXT:    br i1 [[CMP1]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP6:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD2:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    [[CMP3:%.*]] = icmp ult i16 [[ATOMIC_LOAD2]], [[TMP6]]
// CHK-CXX-NEXT:    br i1 [[CMP3]], label [[ATOMIC_CONT4:%.*]], label [[ATOMIC_EXIT8:%.*]]
// CHK-CXX:       atomic_cont4:
// CHK-CXX-NEXT:    [[TMP7:%.*]] = phi i16 [ [[ATOMIC_LOAD2]], [[ATOMIC_EXIT]] ], [ [[TMP10:%.*]], [[ATOMIC_CMP6:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP6]], i16* [[ATOMIC_TEMP5]], align 2
// CHK-CXX-NEXT:    [[TMP8:%.*]] = load i16, i16* [[ATOMIC_TEMP5]], align 2
// CHK-CXX-NEXT:    [[TMP9:%.*]] = cmpxchg i16* [[X]], i16 [[TMP7]], i16 [[TMP8]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP10]] = extractvalue { i16, i1 } [[TMP9]], 0
// CHK-CXX-NEXT:    [[TMP11:%.*]] = extractvalue { i16, i1 } [[TMP9]], 1
// CHK-CXX-NEXT:    br i1 [[TMP11]], label [[ATOMIC_EXIT8]], label [[ATOMIC_CMP6]]
// CHK-CXX:       atomic_cmp6:
// CHK-CXX-NEXT:    [[CMP7:%.*]] = icmp ult i16 [[TMP10]], [[TMP6]]
// CHK-CXX-NEXT:    br i1 [[CMP7]], label [[ATOMIC_CONT4]], label [[ATOMIC_EXIT8]]
// CHK-CXX:       atomic_exit8:
// CHK-CXX-NEXT:    [[TMP12:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD9:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    [[CMP10:%.*]] = icmp ult i16 [[ATOMIC_LOAD9]], [[TMP12]]
// CHK-CXX-NEXT:    br i1 [[CMP10]], label [[ATOMIC_CONT11:%.*]], label [[ATOMIC_EXIT15:%.*]]
// CHK-CXX:       atomic_cont11:
// CHK-CXX-NEXT:    [[TMP13:%.*]] = phi i16 [ [[ATOMIC_LOAD9]], [[ATOMIC_EXIT8]] ], [ [[TMP16:%.*]], [[ATOMIC_CMP13:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP12]], i16* [[ATOMIC_TEMP12]], align 2
// CHK-CXX-NEXT:    [[TMP14:%.*]] = load i16, i16* [[ATOMIC_TEMP12]], align 2
// CHK-CXX-NEXT:    [[TMP15:%.*]] = cmpxchg i16* [[X]], i16 [[TMP13]], i16 [[TMP14]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP16]] = extractvalue { i16, i1 } [[TMP15]], 0
// CHK-CXX-NEXT:    [[TMP17:%.*]] = extractvalue { i16, i1 } [[TMP15]], 1
// CHK-CXX-NEXT:    br i1 [[TMP17]], label [[ATOMIC_EXIT15]], label [[ATOMIC_CMP13]]
// CHK-CXX:       atomic_cmp13:
// CHK-CXX-NEXT:    [[CMP14:%.*]] = icmp ult i16 [[TMP16]], [[TMP12]]
// CHK-CXX-NEXT:    br i1 [[CMP14]], label [[ATOMIC_CONT11]], label [[ATOMIC_EXIT15]]
// CHK-CXX:       atomic_exit15:
// CHK-CXX-NEXT:    [[TMP18:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD16:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    [[CMP17:%.*]] = icmp ugt i16 [[ATOMIC_LOAD16]], [[TMP18]]
// CHK-CXX-NEXT:    br i1 [[CMP17]], label [[ATOMIC_CONT18:%.*]], label [[ATOMIC_EXIT22:%.*]]
// CHK-CXX:       atomic_cont18:
// CHK-CXX-NEXT:    [[TMP19:%.*]] = phi i16 [ [[ATOMIC_LOAD16]], [[ATOMIC_EXIT15]] ], [ [[TMP22:%.*]], [[ATOMIC_CMP20:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP18]], i16* [[ATOMIC_TEMP19]], align 2
// CHK-CXX-NEXT:    [[TMP20:%.*]] = load i16, i16* [[ATOMIC_TEMP19]], align 2
// CHK-CXX-NEXT:    [[TMP21:%.*]] = cmpxchg i16* [[X]], i16 [[TMP19]], i16 [[TMP20]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP22]] = extractvalue { i16, i1 } [[TMP21]], 0
// CHK-CXX-NEXT:    [[TMP23:%.*]] = extractvalue { i16, i1 } [[TMP21]], 1
// CHK-CXX-NEXT:    br i1 [[TMP23]], label [[ATOMIC_EXIT22]], label [[ATOMIC_CMP20]]
// CHK-CXX:       atomic_cmp20:
// CHK-CXX-NEXT:    [[CMP21:%.*]] = icmp ugt i16 [[TMP22]], [[TMP18]]
// CHK-CXX-NEXT:    br i1 [[CMP21]], label [[ATOMIC_CONT18]], label [[ATOMIC_EXIT22]]
// CHK-CXX:       atomic_exit22:
// CHK-CXX-NEXT:    [[TMP24:%.*]] = load i16, i16* [[D]], align 2
// CHK-CXX-NEXT:    [[TMP25:%.*]] = load i16, i16* [[E]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD23:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    [[CMP24:%.*]] = icmp eq i16 [[ATOMIC_LOAD23]], [[TMP25]]
// CHK-CXX-NEXT:    br i1 [[CMP24]], label [[ATOMIC_CONT25:%.*]], label [[ATOMIC_EXIT29:%.*]]
// CHK-CXX:       atomic_cont25:
// CHK-CXX-NEXT:    [[TMP26:%.*]] = phi i16 [ [[ATOMIC_LOAD23]], [[ATOMIC_EXIT22]] ], [ [[TMP29:%.*]], [[ATOMIC_CMP27:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP24]], i16* [[ATOMIC_TEMP26]], align 2
// CHK-CXX-NEXT:    [[TMP27:%.*]] = load i16, i16* [[ATOMIC_TEMP26]], align 2
// CHK-CXX-NEXT:    [[TMP28:%.*]] = cmpxchg i16* [[X]], i16 [[TMP26]], i16 [[TMP27]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP29]] = extractvalue { i16, i1 } [[TMP28]], 0
// CHK-CXX-NEXT:    [[TMP30:%.*]] = extractvalue { i16, i1 } [[TMP28]], 1
// CHK-CXX-NEXT:    br i1 [[TMP30]], label [[ATOMIC_EXIT29]], label [[ATOMIC_CMP27]]
// CHK-CXX:       atomic_cmp27:
// CHK-CXX-NEXT:    [[CMP28:%.*]] = icmp eq i16 [[TMP29]], [[TMP25]]
// CHK-CXX-NEXT:    br i1 [[CMP28]], label [[ATOMIC_CONT25]], label [[ATOMIC_EXIT29]]
// CHK-CXX:       atomic_exit29:
// CHK-CXX-NEXT:    [[TMP31:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD30:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    [[CMP31:%.*]] = icmp ugt i16 [[ATOMIC_LOAD30]], [[TMP31]]
// CHK-CXX-NEXT:    br i1 [[CMP31]], label [[ATOMIC_CONT32:%.*]], label [[ATOMIC_EXIT36:%.*]]
// CHK-CXX:       atomic_cont32:
// CHK-CXX-NEXT:    [[TMP32:%.*]] = phi i16 [ [[ATOMIC_LOAD30]], [[ATOMIC_EXIT29]] ], [ [[TMP35:%.*]], [[ATOMIC_CMP34:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP31]], i16* [[ATOMIC_TEMP33]], align 2
// CHK-CXX-NEXT:    [[TMP33:%.*]] = load i16, i16* [[ATOMIC_TEMP33]], align 2
// CHK-CXX-NEXT:    [[TMP34:%.*]] = cmpxchg i16* [[X]], i16 [[TMP32]], i16 [[TMP33]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP35]] = extractvalue { i16, i1 } [[TMP34]], 0
// CHK-CXX-NEXT:    [[TMP36:%.*]] = extractvalue { i16, i1 } [[TMP34]], 1
// CHK-CXX-NEXT:    br i1 [[TMP36]], label [[ATOMIC_EXIT36]], label [[ATOMIC_CMP34]]
// CHK-CXX:       atomic_cmp34:
// CHK-CXX-NEXT:    [[CMP35:%.*]] = icmp ugt i16 [[TMP35]], [[TMP31]]
// CHK-CXX-NEXT:    br i1 [[CMP35]], label [[ATOMIC_CONT32]], label [[ATOMIC_EXIT36]]
// CHK-CXX:       atomic_exit36:
// CHK-CXX-NEXT:    [[TMP37:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD37:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    [[CMP38:%.*]] = icmp ult i16 [[ATOMIC_LOAD37]], [[TMP37]]
// CHK-CXX-NEXT:    br i1 [[CMP38]], label [[ATOMIC_CONT39:%.*]], label [[ATOMIC_EXIT43:%.*]]
// CHK-CXX:       atomic_cont39:
// CHK-CXX-NEXT:    [[TMP38:%.*]] = phi i16 [ [[ATOMIC_LOAD37]], [[ATOMIC_EXIT36]] ], [ [[TMP41:%.*]], [[ATOMIC_CMP41:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP37]], i16* [[ATOMIC_TEMP40]], align 2
// CHK-CXX-NEXT:    [[TMP39:%.*]] = load i16, i16* [[ATOMIC_TEMP40]], align 2
// CHK-CXX-NEXT:    [[TMP40:%.*]] = cmpxchg i16* [[X]], i16 [[TMP38]], i16 [[TMP39]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP41]] = extractvalue { i16, i1 } [[TMP40]], 0
// CHK-CXX-NEXT:    [[TMP42:%.*]] = extractvalue { i16, i1 } [[TMP40]], 1
// CHK-CXX-NEXT:    br i1 [[TMP42]], label [[ATOMIC_EXIT43]], label [[ATOMIC_CMP41]]
// CHK-CXX:       atomic_cmp41:
// CHK-CXX-NEXT:    [[CMP42:%.*]] = icmp ult i16 [[TMP41]], [[TMP37]]
// CHK-CXX-NEXT:    br i1 [[CMP42]], label [[ATOMIC_CONT39]], label [[ATOMIC_EXIT43]]
// CHK-CXX:       atomic_exit43:
// CHK-CXX-NEXT:    [[TMP43:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD44:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    [[CMP45:%.*]] = icmp ult i16 [[ATOMIC_LOAD44]], [[TMP43]]
// CHK-CXX-NEXT:    br i1 [[CMP45]], label [[ATOMIC_CONT46:%.*]], label [[ATOMIC_EXIT50:%.*]]
// CHK-CXX:       atomic_cont46:
// CHK-CXX-NEXT:    [[TMP44:%.*]] = phi i16 [ [[ATOMIC_LOAD44]], [[ATOMIC_EXIT43]] ], [ [[TMP47:%.*]], [[ATOMIC_CMP48:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP43]], i16* [[ATOMIC_TEMP47]], align 2
// CHK-CXX-NEXT:    [[TMP45:%.*]] = load i16, i16* [[ATOMIC_TEMP47]], align 2
// CHK-CXX-NEXT:    [[TMP46:%.*]] = cmpxchg i16* [[X]], i16 [[TMP44]], i16 [[TMP45]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP47]] = extractvalue { i16, i1 } [[TMP46]], 0
// CHK-CXX-NEXT:    [[TMP48:%.*]] = extractvalue { i16, i1 } [[TMP46]], 1
// CHK-CXX-NEXT:    br i1 [[TMP48]], label [[ATOMIC_EXIT50]], label [[ATOMIC_CMP48]]
// CHK-CXX:       atomic_cmp48:
// CHK-CXX-NEXT:    [[CMP49:%.*]] = icmp ult i16 [[TMP47]], [[TMP43]]
// CHK-CXX-NEXT:    br i1 [[CMP49]], label [[ATOMIC_CONT46]], label [[ATOMIC_EXIT50]]
// CHK-CXX:       atomic_exit50:
// CHK-CXX-NEXT:    [[TMP49:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD51:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    [[CMP52:%.*]] = icmp ugt i16 [[ATOMIC_LOAD51]], [[TMP49]]
// CHK-CXX-NEXT:    br i1 [[CMP52]], label [[ATOMIC_CONT53:%.*]], label [[ATOMIC_EXIT57:%.*]]
// CHK-CXX:       atomic_cont53:
// CHK-CXX-NEXT:    [[TMP50:%.*]] = phi i16 [ [[ATOMIC_LOAD51]], [[ATOMIC_EXIT50]] ], [ [[TMP53:%.*]], [[ATOMIC_CMP55:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP49]], i16* [[ATOMIC_TEMP54]], align 2
// CHK-CXX-NEXT:    [[TMP51:%.*]] = load i16, i16* [[ATOMIC_TEMP54]], align 2
// CHK-CXX-NEXT:    [[TMP52:%.*]] = cmpxchg i16* [[X]], i16 [[TMP50]], i16 [[TMP51]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP53]] = extractvalue { i16, i1 } [[TMP52]], 0
// CHK-CXX-NEXT:    [[TMP54:%.*]] = extractvalue { i16, i1 } [[TMP52]], 1
// CHK-CXX-NEXT:    br i1 [[TMP54]], label [[ATOMIC_EXIT57]], label [[ATOMIC_CMP55]]
// CHK-CXX:       atomic_cmp55:
// CHK-CXX-NEXT:    [[CMP56:%.*]] = icmp ugt i16 [[TMP53]], [[TMP49]]
// CHK-CXX-NEXT:    br i1 [[CMP56]], label [[ATOMIC_CONT53]], label [[ATOMIC_EXIT57]]
// CHK-CXX:       atomic_exit57:
// CHK-CXX-NEXT:    [[TMP55:%.*]] = load i16, i16* [[D]], align 2
// CHK-CXX-NEXT:    [[TMP56:%.*]] = load i16, i16* [[E]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD58:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    [[CMP59:%.*]] = icmp eq i16 [[ATOMIC_LOAD58]], [[TMP56]]
// CHK-CXX-NEXT:    br i1 [[CMP59]], label [[ATOMIC_CONT60:%.*]], label [[ATOMIC_EXIT64:%.*]]
// CHK-CXX:       atomic_cont60:
// CHK-CXX-NEXT:    [[TMP57:%.*]] = phi i16 [ [[ATOMIC_LOAD58]], [[ATOMIC_EXIT57]] ], [ [[TMP60:%.*]], [[ATOMIC_CMP62:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP55]], i16* [[ATOMIC_TEMP61]], align 2
// CHK-CXX-NEXT:    [[TMP58:%.*]] = load i16, i16* [[ATOMIC_TEMP61]], align 2
// CHK-CXX-NEXT:    [[TMP59:%.*]] = cmpxchg i16* [[X]], i16 [[TMP57]], i16 [[TMP58]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP60]] = extractvalue { i16, i1 } [[TMP59]], 0
// CHK-CXX-NEXT:    [[TMP61:%.*]] = extractvalue { i16, i1 } [[TMP59]], 1
// CHK-CXX-NEXT:    br i1 [[TMP61]], label [[ATOMIC_EXIT64]], label [[ATOMIC_CMP62]]
// CHK-CXX:       atomic_cmp62:
// CHK-CXX-NEXT:    [[CMP63:%.*]] = icmp eq i16 [[TMP60]], [[TMP56]]
// CHK-CXX-NEXT:    br i1 [[CMP63]], label [[ATOMIC_CONT60]], label [[ATOMIC_EXIT64]]
// CHK-CXX:       atomic_exit64:
// CHK-CXX-NEXT:    ret void
//
void test_unsigned_short() {
    // One of each form with 'unsigned short'.
    unsigned short x, expr, d, e;

    #pragma omp atomic compare
    x = expr < x ? expr : x; // MIN

    #pragma omp atomic compare
    x = expr > x ? expr : x; // MAX

    #pragma omp atomic compare
    x = x < expr ? expr : x; // MAX

    #pragma omp atomic compare
    x = x > expr ? expr : x; // MIN

    #pragma omp atomic compare
    x = x == e ? d : x;

    #pragma omp atomic compare
    if (expr < x) { x = expr; } // MIN

    #pragma omp atomic compare
    if (expr > x) { x = expr; } // MAX

    #pragma omp atomic compare
    if (x < expr) { x = expr; } // MAX

    #pragma omp atomic compare
    if (x > expr) { x = expr; } // MIN

    #pragma omp atomic compare
    if(x == e) { x = d; }
}

// CHK-C-LABEL: @test_double(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[X:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[D:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[E:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP5:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP12:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP19:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP26:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP33:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP40:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP47:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP54:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP61:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[TMP0:%.*]] = load double, double* [[EXPR]], align 8
// CHK-C-NEXT:    [[TMP1:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, i64* [[TMP1]] monotonic, align 8
// CHK-C-NEXT:    [[TMP2:%.*]] = bitcast i64 [[ATOMIC_LOAD]] to double
// CHK-C-NEXT:    [[CMP:%.*]] = fcmp ogt double [[TMP2]], [[TMP0]]
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP3:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP9:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    [[TMP4:%.*]] = bitcast double* [[ATOMIC_TEMP]] to i64*
// CHK-C-NEXT:    [[TMP5:%.*]] = bitcast double [[TMP0]] to i64
// CHK-C-NEXT:    store i64 [[TMP5]], i64* [[TMP4]], align 8
// CHK-C-NEXT:    [[TMP6:%.*]] = load i64, i64* [[TMP4]], align 8
// CHK-C-NEXT:    [[TMP7:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP8:%.*]] = cmpxchg i64* [[TMP7]], i64 [[TMP3]], i64 [[TMP6]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP9]] = extractvalue { i64, i1 } [[TMP8]], 0
// CHK-C-NEXT:    [[TMP10:%.*]] = extractvalue { i64, i1 } [[TMP8]], 1
// CHK-C-NEXT:    br i1 [[TMP10]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    [[TMP11:%.*]] = bitcast i64 [[TMP9]] to double
// CHK-C-NEXT:    [[CMP1:%.*]] = fcmp ogt double [[TMP11]], [[TMP0]]
// CHK-C-NEXT:    br i1 [[CMP1]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP12:%.*]] = load double, double* [[EXPR]], align 8
// CHK-C-NEXT:    [[TMP13:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD2:%.*]] = load atomic i64, i64* [[TMP13]] monotonic, align 8
// CHK-C-NEXT:    [[TMP14:%.*]] = bitcast i64 [[ATOMIC_LOAD2]] to double
// CHK-C-NEXT:    [[CMP3:%.*]] = fcmp olt double [[TMP14]], [[TMP12]]
// CHK-C-NEXT:    br i1 [[CMP3]], label [[ATOMIC_CONT4:%.*]], label [[ATOMIC_EXIT8:%.*]]
// CHK-C:       atomic_cont4:
// CHK-C-NEXT:    [[TMP15:%.*]] = phi i64 [ [[ATOMIC_LOAD2]], [[ATOMIC_EXIT]] ], [ [[TMP21:%.*]], [[ATOMIC_CMP6:%.*]] ]
// CHK-C-NEXT:    [[TMP16:%.*]] = bitcast double* [[ATOMIC_TEMP5]] to i64*
// CHK-C-NEXT:    [[TMP17:%.*]] = bitcast double [[TMP12]] to i64
// CHK-C-NEXT:    store i64 [[TMP17]], i64* [[TMP16]], align 8
// CHK-C-NEXT:    [[TMP18:%.*]] = load i64, i64* [[TMP16]], align 8
// CHK-C-NEXT:    [[TMP19:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP20:%.*]] = cmpxchg i64* [[TMP19]], i64 [[TMP15]], i64 [[TMP18]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP21]] = extractvalue { i64, i1 } [[TMP20]], 0
// CHK-C-NEXT:    [[TMP22:%.*]] = extractvalue { i64, i1 } [[TMP20]], 1
// CHK-C-NEXT:    br i1 [[TMP22]], label [[ATOMIC_EXIT8]], label [[ATOMIC_CMP6]]
// CHK-C:       atomic_cmp6:
// CHK-C-NEXT:    [[TMP23:%.*]] = bitcast i64 [[TMP21]] to double
// CHK-C-NEXT:    [[CMP7:%.*]] = fcmp olt double [[TMP23]], [[TMP12]]
// CHK-C-NEXT:    br i1 [[CMP7]], label [[ATOMIC_CONT4]], label [[ATOMIC_EXIT8]]
// CHK-C:       atomic_exit8:
// CHK-C-NEXT:    [[TMP24:%.*]] = load double, double* [[EXPR]], align 8
// CHK-C-NEXT:    [[TMP25:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD9:%.*]] = load atomic i64, i64* [[TMP25]] monotonic, align 8
// CHK-C-NEXT:    [[TMP26:%.*]] = bitcast i64 [[ATOMIC_LOAD9]] to double
// CHK-C-NEXT:    [[CMP10:%.*]] = fcmp olt double [[TMP26]], [[TMP24]]
// CHK-C-NEXT:    br i1 [[CMP10]], label [[ATOMIC_CONT11:%.*]], label [[ATOMIC_EXIT15:%.*]]
// CHK-C:       atomic_cont11:
// CHK-C-NEXT:    [[TMP27:%.*]] = phi i64 [ [[ATOMIC_LOAD9]], [[ATOMIC_EXIT8]] ], [ [[TMP33:%.*]], [[ATOMIC_CMP13:%.*]] ]
// CHK-C-NEXT:    [[TMP28:%.*]] = bitcast double* [[ATOMIC_TEMP12]] to i64*
// CHK-C-NEXT:    [[TMP29:%.*]] = bitcast double [[TMP24]] to i64
// CHK-C-NEXT:    store i64 [[TMP29]], i64* [[TMP28]], align 8
// CHK-C-NEXT:    [[TMP30:%.*]] = load i64, i64* [[TMP28]], align 8
// CHK-C-NEXT:    [[TMP31:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP32:%.*]] = cmpxchg i64* [[TMP31]], i64 [[TMP27]], i64 [[TMP30]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP33]] = extractvalue { i64, i1 } [[TMP32]], 0
// CHK-C-NEXT:    [[TMP34:%.*]] = extractvalue { i64, i1 } [[TMP32]], 1
// CHK-C-NEXT:    br i1 [[TMP34]], label [[ATOMIC_EXIT15]], label [[ATOMIC_CMP13]]
// CHK-C:       atomic_cmp13:
// CHK-C-NEXT:    [[TMP35:%.*]] = bitcast i64 [[TMP33]] to double
// CHK-C-NEXT:    [[CMP14:%.*]] = fcmp olt double [[TMP35]], [[TMP24]]
// CHK-C-NEXT:    br i1 [[CMP14]], label [[ATOMIC_CONT11]], label [[ATOMIC_EXIT15]]
// CHK-C:       atomic_exit15:
// CHK-C-NEXT:    [[TMP36:%.*]] = load double, double* [[EXPR]], align 8
// CHK-C-NEXT:    [[TMP37:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD16:%.*]] = load atomic i64, i64* [[TMP37]] monotonic, align 8
// CHK-C-NEXT:    [[TMP38:%.*]] = bitcast i64 [[ATOMIC_LOAD16]] to double
// CHK-C-NEXT:    [[CMP17:%.*]] = fcmp ogt double [[TMP38]], [[TMP36]]
// CHK-C-NEXT:    br i1 [[CMP17]], label [[ATOMIC_CONT18:%.*]], label [[ATOMIC_EXIT22:%.*]]
// CHK-C:       atomic_cont18:
// CHK-C-NEXT:    [[TMP39:%.*]] = phi i64 [ [[ATOMIC_LOAD16]], [[ATOMIC_EXIT15]] ], [ [[TMP45:%.*]], [[ATOMIC_CMP20:%.*]] ]
// CHK-C-NEXT:    [[TMP40:%.*]] = bitcast double* [[ATOMIC_TEMP19]] to i64*
// CHK-C-NEXT:    [[TMP41:%.*]] = bitcast double [[TMP36]] to i64
// CHK-C-NEXT:    store i64 [[TMP41]], i64* [[TMP40]], align 8
// CHK-C-NEXT:    [[TMP42:%.*]] = load i64, i64* [[TMP40]], align 8
// CHK-C-NEXT:    [[TMP43:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP44:%.*]] = cmpxchg i64* [[TMP43]], i64 [[TMP39]], i64 [[TMP42]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP45]] = extractvalue { i64, i1 } [[TMP44]], 0
// CHK-C-NEXT:    [[TMP46:%.*]] = extractvalue { i64, i1 } [[TMP44]], 1
// CHK-C-NEXT:    br i1 [[TMP46]], label [[ATOMIC_EXIT22]], label [[ATOMIC_CMP20]]
// CHK-C:       atomic_cmp20:
// CHK-C-NEXT:    [[TMP47:%.*]] = bitcast i64 [[TMP45]] to double
// CHK-C-NEXT:    [[CMP21:%.*]] = fcmp ogt double [[TMP47]], [[TMP36]]
// CHK-C-NEXT:    br i1 [[CMP21]], label [[ATOMIC_CONT18]], label [[ATOMIC_EXIT22]]
// CHK-C:       atomic_exit22:
// CHK-C-NEXT:    [[TMP48:%.*]] = load double, double* [[D]], align 8
// CHK-C-NEXT:    [[TMP49:%.*]] = load double, double* [[E]], align 8
// CHK-C-NEXT:    [[TMP50:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD23:%.*]] = load atomic i64, i64* [[TMP50]] monotonic, align 8
// CHK-C-NEXT:    [[TMP51:%.*]] = bitcast double [[TMP49]] to i64
// CHK-C-NEXT:    [[CMP24:%.*]] = icmp eq i64 [[ATOMIC_LOAD23]], [[TMP51]]
// CHK-C-NEXT:    br i1 [[CMP24]], label [[ATOMIC_CONT25:%.*]], label [[ATOMIC_EXIT29:%.*]]
// CHK-C:       atomic_cont25:
// CHK-C-NEXT:    [[TMP52:%.*]] = phi i64 [ [[ATOMIC_LOAD23]], [[ATOMIC_EXIT22]] ], [ [[TMP58:%.*]], [[ATOMIC_CMP27:%.*]] ]
// CHK-C-NEXT:    [[TMP53:%.*]] = bitcast double* [[ATOMIC_TEMP26]] to i64*
// CHK-C-NEXT:    [[TMP54:%.*]] = bitcast double [[TMP48]] to i64
// CHK-C-NEXT:    store i64 [[TMP54]], i64* [[TMP53]], align 8
// CHK-C-NEXT:    [[TMP55:%.*]] = load i64, i64* [[TMP53]], align 8
// CHK-C-NEXT:    [[TMP56:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP57:%.*]] = cmpxchg i64* [[TMP56]], i64 [[TMP52]], i64 [[TMP55]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP58]] = extractvalue { i64, i1 } [[TMP57]], 0
// CHK-C-NEXT:    [[TMP59:%.*]] = extractvalue { i64, i1 } [[TMP57]], 1
// CHK-C-NEXT:    br i1 [[TMP59]], label [[ATOMIC_EXIT29]], label [[ATOMIC_CMP27]]
// CHK-C:       atomic_cmp27:
// CHK-C-NEXT:    [[TMP60:%.*]] = bitcast double [[TMP49]] to i64
// CHK-C-NEXT:    [[CMP28:%.*]] = icmp eq i64 [[TMP58]], [[TMP60]]
// CHK-C-NEXT:    br i1 [[CMP28]], label [[ATOMIC_CONT25]], label [[ATOMIC_EXIT29]]
// CHK-C:       atomic_exit29:
// CHK-C-NEXT:    [[TMP61:%.*]] = load double, double* [[EXPR]], align 8
// CHK-C-NEXT:    [[TMP62:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD30:%.*]] = load atomic i64, i64* [[TMP62]] monotonic, align 8
// CHK-C-NEXT:    [[TMP63:%.*]] = bitcast i64 [[ATOMIC_LOAD30]] to double
// CHK-C-NEXT:    [[CMP31:%.*]] = fcmp ogt double [[TMP63]], [[TMP61]]
// CHK-C-NEXT:    br i1 [[CMP31]], label [[ATOMIC_CONT32:%.*]], label [[ATOMIC_EXIT36:%.*]]
// CHK-C:       atomic_cont32:
// CHK-C-NEXT:    [[TMP64:%.*]] = phi i64 [ [[ATOMIC_LOAD30]], [[ATOMIC_EXIT29]] ], [ [[TMP70:%.*]], [[ATOMIC_CMP34:%.*]] ]
// CHK-C-NEXT:    [[TMP65:%.*]] = bitcast double* [[ATOMIC_TEMP33]] to i64*
// CHK-C-NEXT:    [[TMP66:%.*]] = bitcast double [[TMP61]] to i64
// CHK-C-NEXT:    store i64 [[TMP66]], i64* [[TMP65]], align 8
// CHK-C-NEXT:    [[TMP67:%.*]] = load i64, i64* [[TMP65]], align 8
// CHK-C-NEXT:    [[TMP68:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP69:%.*]] = cmpxchg i64* [[TMP68]], i64 [[TMP64]], i64 [[TMP67]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP70]] = extractvalue { i64, i1 } [[TMP69]], 0
// CHK-C-NEXT:    [[TMP71:%.*]] = extractvalue { i64, i1 } [[TMP69]], 1
// CHK-C-NEXT:    br i1 [[TMP71]], label [[ATOMIC_EXIT36]], label [[ATOMIC_CMP34]]
// CHK-C:       atomic_cmp34:
// CHK-C-NEXT:    [[TMP72:%.*]] = bitcast i64 [[TMP70]] to double
// CHK-C-NEXT:    [[CMP35:%.*]] = fcmp ogt double [[TMP72]], [[TMP61]]
// CHK-C-NEXT:    br i1 [[CMP35]], label [[ATOMIC_CONT32]], label [[ATOMIC_EXIT36]]
// CHK-C:       atomic_exit36:
// CHK-C-NEXT:    [[TMP73:%.*]] = load double, double* [[EXPR]], align 8
// CHK-C-NEXT:    [[TMP74:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD37:%.*]] = load atomic i64, i64* [[TMP74]] monotonic, align 8
// CHK-C-NEXT:    [[TMP75:%.*]] = bitcast i64 [[ATOMIC_LOAD37]] to double
// CHK-C-NEXT:    [[CMP38:%.*]] = fcmp olt double [[TMP75]], [[TMP73]]
// CHK-C-NEXT:    br i1 [[CMP38]], label [[ATOMIC_CONT39:%.*]], label [[ATOMIC_EXIT43:%.*]]
// CHK-C:       atomic_cont39:
// CHK-C-NEXT:    [[TMP76:%.*]] = phi i64 [ [[ATOMIC_LOAD37]], [[ATOMIC_EXIT36]] ], [ [[TMP82:%.*]], [[ATOMIC_CMP41:%.*]] ]
// CHK-C-NEXT:    [[TMP77:%.*]] = bitcast double* [[ATOMIC_TEMP40]] to i64*
// CHK-C-NEXT:    [[TMP78:%.*]] = bitcast double [[TMP73]] to i64
// CHK-C-NEXT:    store i64 [[TMP78]], i64* [[TMP77]], align 8
// CHK-C-NEXT:    [[TMP79:%.*]] = load i64, i64* [[TMP77]], align 8
// CHK-C-NEXT:    [[TMP80:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP81:%.*]] = cmpxchg i64* [[TMP80]], i64 [[TMP76]], i64 [[TMP79]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP82]] = extractvalue { i64, i1 } [[TMP81]], 0
// CHK-C-NEXT:    [[TMP83:%.*]] = extractvalue { i64, i1 } [[TMP81]], 1
// CHK-C-NEXT:    br i1 [[TMP83]], label [[ATOMIC_EXIT43]], label [[ATOMIC_CMP41]]
// CHK-C:       atomic_cmp41:
// CHK-C-NEXT:    [[TMP84:%.*]] = bitcast i64 [[TMP82]] to double
// CHK-C-NEXT:    [[CMP42:%.*]] = fcmp olt double [[TMP84]], [[TMP73]]
// CHK-C-NEXT:    br i1 [[CMP42]], label [[ATOMIC_CONT39]], label [[ATOMIC_EXIT43]]
// CHK-C:       atomic_exit43:
// CHK-C-NEXT:    [[TMP85:%.*]] = load double, double* [[EXPR]], align 8
// CHK-C-NEXT:    [[TMP86:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD44:%.*]] = load atomic i64, i64* [[TMP86]] monotonic, align 8
// CHK-C-NEXT:    [[TMP87:%.*]] = bitcast i64 [[ATOMIC_LOAD44]] to double
// CHK-C-NEXT:    [[CMP45:%.*]] = fcmp olt double [[TMP87]], [[TMP85]]
// CHK-C-NEXT:    br i1 [[CMP45]], label [[ATOMIC_CONT46:%.*]], label [[ATOMIC_EXIT50:%.*]]
// CHK-C:       atomic_cont46:
// CHK-C-NEXT:    [[TMP88:%.*]] = phi i64 [ [[ATOMIC_LOAD44]], [[ATOMIC_EXIT43]] ], [ [[TMP94:%.*]], [[ATOMIC_CMP48:%.*]] ]
// CHK-C-NEXT:    [[TMP89:%.*]] = bitcast double* [[ATOMIC_TEMP47]] to i64*
// CHK-C-NEXT:    [[TMP90:%.*]] = bitcast double [[TMP85]] to i64
// CHK-C-NEXT:    store i64 [[TMP90]], i64* [[TMP89]], align 8
// CHK-C-NEXT:    [[TMP91:%.*]] = load i64, i64* [[TMP89]], align 8
// CHK-C-NEXT:    [[TMP92:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP93:%.*]] = cmpxchg i64* [[TMP92]], i64 [[TMP88]], i64 [[TMP91]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP94]] = extractvalue { i64, i1 } [[TMP93]], 0
// CHK-C-NEXT:    [[TMP95:%.*]] = extractvalue { i64, i1 } [[TMP93]], 1
// CHK-C-NEXT:    br i1 [[TMP95]], label [[ATOMIC_EXIT50]], label [[ATOMIC_CMP48]]
// CHK-C:       atomic_cmp48:
// CHK-C-NEXT:    [[TMP96:%.*]] = bitcast i64 [[TMP94]] to double
// CHK-C-NEXT:    [[CMP49:%.*]] = fcmp olt double [[TMP96]], [[TMP85]]
// CHK-C-NEXT:    br i1 [[CMP49]], label [[ATOMIC_CONT46]], label [[ATOMIC_EXIT50]]
// CHK-C:       atomic_exit50:
// CHK-C-NEXT:    [[TMP97:%.*]] = load double, double* [[EXPR]], align 8
// CHK-C-NEXT:    [[TMP98:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD51:%.*]] = load atomic i64, i64* [[TMP98]] monotonic, align 8
// CHK-C-NEXT:    [[TMP99:%.*]] = bitcast i64 [[ATOMIC_LOAD51]] to double
// CHK-C-NEXT:    [[CMP52:%.*]] = fcmp ogt double [[TMP99]], [[TMP97]]
// CHK-C-NEXT:    br i1 [[CMP52]], label [[ATOMIC_CONT53:%.*]], label [[ATOMIC_EXIT57:%.*]]
// CHK-C:       atomic_cont53:
// CHK-C-NEXT:    [[TMP100:%.*]] = phi i64 [ [[ATOMIC_LOAD51]], [[ATOMIC_EXIT50]] ], [ [[TMP106:%.*]], [[ATOMIC_CMP55:%.*]] ]
// CHK-C-NEXT:    [[TMP101:%.*]] = bitcast double* [[ATOMIC_TEMP54]] to i64*
// CHK-C-NEXT:    [[TMP102:%.*]] = bitcast double [[TMP97]] to i64
// CHK-C-NEXT:    store i64 [[TMP102]], i64* [[TMP101]], align 8
// CHK-C-NEXT:    [[TMP103:%.*]] = load i64, i64* [[TMP101]], align 8
// CHK-C-NEXT:    [[TMP104:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP105:%.*]] = cmpxchg i64* [[TMP104]], i64 [[TMP100]], i64 [[TMP103]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP106]] = extractvalue { i64, i1 } [[TMP105]], 0
// CHK-C-NEXT:    [[TMP107:%.*]] = extractvalue { i64, i1 } [[TMP105]], 1
// CHK-C-NEXT:    br i1 [[TMP107]], label [[ATOMIC_EXIT57]], label [[ATOMIC_CMP55]]
// CHK-C:       atomic_cmp55:
// CHK-C-NEXT:    [[TMP108:%.*]] = bitcast i64 [[TMP106]] to double
// CHK-C-NEXT:    [[CMP56:%.*]] = fcmp ogt double [[TMP108]], [[TMP97]]
// CHK-C-NEXT:    br i1 [[CMP56]], label [[ATOMIC_CONT53]], label [[ATOMIC_EXIT57]]
// CHK-C:       atomic_exit57:
// CHK-C-NEXT:    [[TMP109:%.*]] = load double, double* [[D]], align 8
// CHK-C-NEXT:    [[TMP110:%.*]] = load double, double* [[E]], align 8
// CHK-C-NEXT:    [[TMP111:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD58:%.*]] = load atomic i64, i64* [[TMP111]] monotonic, align 8
// CHK-C-NEXT:    [[TMP112:%.*]] = bitcast double [[TMP110]] to i64
// CHK-C-NEXT:    [[CMP59:%.*]] = icmp eq i64 [[ATOMIC_LOAD58]], [[TMP112]]
// CHK-C-NEXT:    br i1 [[CMP59]], label [[ATOMIC_CONT60:%.*]], label [[ATOMIC_EXIT64:%.*]]
// CHK-C:       atomic_cont60:
// CHK-C-NEXT:    [[TMP113:%.*]] = phi i64 [ [[ATOMIC_LOAD58]], [[ATOMIC_EXIT57]] ], [ [[TMP119:%.*]], [[ATOMIC_CMP62:%.*]] ]
// CHK-C-NEXT:    [[TMP114:%.*]] = bitcast double* [[ATOMIC_TEMP61]] to i64*
// CHK-C-NEXT:    [[TMP115:%.*]] = bitcast double [[TMP109]] to i64
// CHK-C-NEXT:    store i64 [[TMP115]], i64* [[TMP114]], align 8
// CHK-C-NEXT:    [[TMP116:%.*]] = load i64, i64* [[TMP114]], align 8
// CHK-C-NEXT:    [[TMP117:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP118:%.*]] = cmpxchg i64* [[TMP117]], i64 [[TMP113]], i64 [[TMP116]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP119]] = extractvalue { i64, i1 } [[TMP118]], 0
// CHK-C-NEXT:    [[TMP120:%.*]] = extractvalue { i64, i1 } [[TMP118]], 1
// CHK-C-NEXT:    br i1 [[TMP120]], label [[ATOMIC_EXIT64]], label [[ATOMIC_CMP62]]
// CHK-C:       atomic_cmp62:
// CHK-C-NEXT:    [[TMP121:%.*]] = bitcast double [[TMP110]] to i64
// CHK-C-NEXT:    [[CMP63:%.*]] = icmp eq i64 [[TMP119]], [[TMP121]]
// CHK-C-NEXT:    br i1 [[CMP63]], label [[ATOMIC_CONT60]], label [[ATOMIC_EXIT64]]
// CHK-C:       atomic_exit64:
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z11test_doublev(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[X:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[D:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[E:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP5:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP12:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP19:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP26:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP33:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP40:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP47:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP54:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP61:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load double, double* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[TMP1:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, i64* [[TMP1]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP2:%.*]] = bitcast i64 [[ATOMIC_LOAD]] to double
// CHK-CXX-NEXT:    [[CMP:%.*]] = fcmp ogt double [[TMP2]], [[TMP0]]
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP3:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP9:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    [[TMP4:%.*]] = bitcast double* [[ATOMIC_TEMP]] to i64*
// CHK-CXX-NEXT:    [[TMP5:%.*]] = bitcast double [[TMP0]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP5]], i64* [[TMP4]], align 8
// CHK-CXX-NEXT:    [[TMP6:%.*]] = load i64, i64* [[TMP4]], align 8
// CHK-CXX-NEXT:    [[TMP7:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP8:%.*]] = cmpxchg i64* [[TMP7]], i64 [[TMP3]], i64 [[TMP6]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP9]] = extractvalue { i64, i1 } [[TMP8]], 0
// CHK-CXX-NEXT:    [[TMP10:%.*]] = extractvalue { i64, i1 } [[TMP8]], 1
// CHK-CXX-NEXT:    br i1 [[TMP10]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    [[TMP11:%.*]] = bitcast i64 [[TMP9]] to double
// CHK-CXX-NEXT:    [[CMP1:%.*]] = fcmp ogt double [[TMP11]], [[TMP0]]
// CHK-CXX-NEXT:    br i1 [[CMP1]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP12:%.*]] = load double, double* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[TMP13:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD2:%.*]] = load atomic i64, i64* [[TMP13]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP14:%.*]] = bitcast i64 [[ATOMIC_LOAD2]] to double
// CHK-CXX-NEXT:    [[CMP3:%.*]] = fcmp olt double [[TMP14]], [[TMP12]]
// CHK-CXX-NEXT:    br i1 [[CMP3]], label [[ATOMIC_CONT4:%.*]], label [[ATOMIC_EXIT8:%.*]]
// CHK-CXX:       atomic_cont4:
// CHK-CXX-NEXT:    [[TMP15:%.*]] = phi i64 [ [[ATOMIC_LOAD2]], [[ATOMIC_EXIT]] ], [ [[TMP21:%.*]], [[ATOMIC_CMP6:%.*]] ]
// CHK-CXX-NEXT:    [[TMP16:%.*]] = bitcast double* [[ATOMIC_TEMP5]] to i64*
// CHK-CXX-NEXT:    [[TMP17:%.*]] = bitcast double [[TMP12]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP17]], i64* [[TMP16]], align 8
// CHK-CXX-NEXT:    [[TMP18:%.*]] = load i64, i64* [[TMP16]], align 8
// CHK-CXX-NEXT:    [[TMP19:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP20:%.*]] = cmpxchg i64* [[TMP19]], i64 [[TMP15]], i64 [[TMP18]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP21]] = extractvalue { i64, i1 } [[TMP20]], 0
// CHK-CXX-NEXT:    [[TMP22:%.*]] = extractvalue { i64, i1 } [[TMP20]], 1
// CHK-CXX-NEXT:    br i1 [[TMP22]], label [[ATOMIC_EXIT8]], label [[ATOMIC_CMP6]]
// CHK-CXX:       atomic_cmp6:
// CHK-CXX-NEXT:    [[TMP23:%.*]] = bitcast i64 [[TMP21]] to double
// CHK-CXX-NEXT:    [[CMP7:%.*]] = fcmp olt double [[TMP23]], [[TMP12]]
// CHK-CXX-NEXT:    br i1 [[CMP7]], label [[ATOMIC_CONT4]], label [[ATOMIC_EXIT8]]
// CHK-CXX:       atomic_exit8:
// CHK-CXX-NEXT:    [[TMP24:%.*]] = load double, double* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[TMP25:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD9:%.*]] = load atomic i64, i64* [[TMP25]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP26:%.*]] = bitcast i64 [[ATOMIC_LOAD9]] to double
// CHK-CXX-NEXT:    [[CMP10:%.*]] = fcmp olt double [[TMP26]], [[TMP24]]
// CHK-CXX-NEXT:    br i1 [[CMP10]], label [[ATOMIC_CONT11:%.*]], label [[ATOMIC_EXIT15:%.*]]
// CHK-CXX:       atomic_cont11:
// CHK-CXX-NEXT:    [[TMP27:%.*]] = phi i64 [ [[ATOMIC_LOAD9]], [[ATOMIC_EXIT8]] ], [ [[TMP33:%.*]], [[ATOMIC_CMP13:%.*]] ]
// CHK-CXX-NEXT:    [[TMP28:%.*]] = bitcast double* [[ATOMIC_TEMP12]] to i64*
// CHK-CXX-NEXT:    [[TMP29:%.*]] = bitcast double [[TMP24]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP29]], i64* [[TMP28]], align 8
// CHK-CXX-NEXT:    [[TMP30:%.*]] = load i64, i64* [[TMP28]], align 8
// CHK-CXX-NEXT:    [[TMP31:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP32:%.*]] = cmpxchg i64* [[TMP31]], i64 [[TMP27]], i64 [[TMP30]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP33]] = extractvalue { i64, i1 } [[TMP32]], 0
// CHK-CXX-NEXT:    [[TMP34:%.*]] = extractvalue { i64, i1 } [[TMP32]], 1
// CHK-CXX-NEXT:    br i1 [[TMP34]], label [[ATOMIC_EXIT15]], label [[ATOMIC_CMP13]]
// CHK-CXX:       atomic_cmp13:
// CHK-CXX-NEXT:    [[TMP35:%.*]] = bitcast i64 [[TMP33]] to double
// CHK-CXX-NEXT:    [[CMP14:%.*]] = fcmp olt double [[TMP35]], [[TMP24]]
// CHK-CXX-NEXT:    br i1 [[CMP14]], label [[ATOMIC_CONT11]], label [[ATOMIC_EXIT15]]
// CHK-CXX:       atomic_exit15:
// CHK-CXX-NEXT:    [[TMP36:%.*]] = load double, double* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[TMP37:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD16:%.*]] = load atomic i64, i64* [[TMP37]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP38:%.*]] = bitcast i64 [[ATOMIC_LOAD16]] to double
// CHK-CXX-NEXT:    [[CMP17:%.*]] = fcmp ogt double [[TMP38]], [[TMP36]]
// CHK-CXX-NEXT:    br i1 [[CMP17]], label [[ATOMIC_CONT18:%.*]], label [[ATOMIC_EXIT22:%.*]]
// CHK-CXX:       atomic_cont18:
// CHK-CXX-NEXT:    [[TMP39:%.*]] = phi i64 [ [[ATOMIC_LOAD16]], [[ATOMIC_EXIT15]] ], [ [[TMP45:%.*]], [[ATOMIC_CMP20:%.*]] ]
// CHK-CXX-NEXT:    [[TMP40:%.*]] = bitcast double* [[ATOMIC_TEMP19]] to i64*
// CHK-CXX-NEXT:    [[TMP41:%.*]] = bitcast double [[TMP36]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP41]], i64* [[TMP40]], align 8
// CHK-CXX-NEXT:    [[TMP42:%.*]] = load i64, i64* [[TMP40]], align 8
// CHK-CXX-NEXT:    [[TMP43:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP44:%.*]] = cmpxchg i64* [[TMP43]], i64 [[TMP39]], i64 [[TMP42]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP45]] = extractvalue { i64, i1 } [[TMP44]], 0
// CHK-CXX-NEXT:    [[TMP46:%.*]] = extractvalue { i64, i1 } [[TMP44]], 1
// CHK-CXX-NEXT:    br i1 [[TMP46]], label [[ATOMIC_EXIT22]], label [[ATOMIC_CMP20]]
// CHK-CXX:       atomic_cmp20:
// CHK-CXX-NEXT:    [[TMP47:%.*]] = bitcast i64 [[TMP45]] to double
// CHK-CXX-NEXT:    [[CMP21:%.*]] = fcmp ogt double [[TMP47]], [[TMP36]]
// CHK-CXX-NEXT:    br i1 [[CMP21]], label [[ATOMIC_CONT18]], label [[ATOMIC_EXIT22]]
// CHK-CXX:       atomic_exit22:
// CHK-CXX-NEXT:    [[TMP48:%.*]] = load double, double* [[D]], align 8
// CHK-CXX-NEXT:    [[TMP49:%.*]] = load double, double* [[E]], align 8
// CHK-CXX-NEXT:    [[TMP50:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD23:%.*]] = load atomic i64, i64* [[TMP50]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP51:%.*]] = bitcast double [[TMP49]] to i64
// CHK-CXX-NEXT:    [[CMP24:%.*]] = icmp eq i64 [[ATOMIC_LOAD23]], [[TMP51]]
// CHK-CXX-NEXT:    br i1 [[CMP24]], label [[ATOMIC_CONT25:%.*]], label [[ATOMIC_EXIT29:%.*]]
// CHK-CXX:       atomic_cont25:
// CHK-CXX-NEXT:    [[TMP52:%.*]] = phi i64 [ [[ATOMIC_LOAD23]], [[ATOMIC_EXIT22]] ], [ [[TMP58:%.*]], [[ATOMIC_CMP27:%.*]] ]
// CHK-CXX-NEXT:    [[TMP53:%.*]] = bitcast double* [[ATOMIC_TEMP26]] to i64*
// CHK-CXX-NEXT:    [[TMP54:%.*]] = bitcast double [[TMP48]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP54]], i64* [[TMP53]], align 8
// CHK-CXX-NEXT:    [[TMP55:%.*]] = load i64, i64* [[TMP53]], align 8
// CHK-CXX-NEXT:    [[TMP56:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP57:%.*]] = cmpxchg i64* [[TMP56]], i64 [[TMP52]], i64 [[TMP55]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP58]] = extractvalue { i64, i1 } [[TMP57]], 0
// CHK-CXX-NEXT:    [[TMP59:%.*]] = extractvalue { i64, i1 } [[TMP57]], 1
// CHK-CXX-NEXT:    br i1 [[TMP59]], label [[ATOMIC_EXIT29]], label [[ATOMIC_CMP27]]
// CHK-CXX:       atomic_cmp27:
// CHK-CXX-NEXT:    [[TMP60:%.*]] = bitcast double [[TMP49]] to i64
// CHK-CXX-NEXT:    [[CMP28:%.*]] = icmp eq i64 [[TMP58]], [[TMP60]]
// CHK-CXX-NEXT:    br i1 [[CMP28]], label [[ATOMIC_CONT25]], label [[ATOMIC_EXIT29]]
// CHK-CXX:       atomic_exit29:
// CHK-CXX-NEXT:    [[TMP61:%.*]] = load double, double* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[TMP62:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD30:%.*]] = load atomic i64, i64* [[TMP62]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP63:%.*]] = bitcast i64 [[ATOMIC_LOAD30]] to double
// CHK-CXX-NEXT:    [[CMP31:%.*]] = fcmp ogt double [[TMP63]], [[TMP61]]
// CHK-CXX-NEXT:    br i1 [[CMP31]], label [[ATOMIC_CONT32:%.*]], label [[ATOMIC_EXIT36:%.*]]
// CHK-CXX:       atomic_cont32:
// CHK-CXX-NEXT:    [[TMP64:%.*]] = phi i64 [ [[ATOMIC_LOAD30]], [[ATOMIC_EXIT29]] ], [ [[TMP70:%.*]], [[ATOMIC_CMP34:%.*]] ]
// CHK-CXX-NEXT:    [[TMP65:%.*]] = bitcast double* [[ATOMIC_TEMP33]] to i64*
// CHK-CXX-NEXT:    [[TMP66:%.*]] = bitcast double [[TMP61]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP66]], i64* [[TMP65]], align 8
// CHK-CXX-NEXT:    [[TMP67:%.*]] = load i64, i64* [[TMP65]], align 8
// CHK-CXX-NEXT:    [[TMP68:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP69:%.*]] = cmpxchg i64* [[TMP68]], i64 [[TMP64]], i64 [[TMP67]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP70]] = extractvalue { i64, i1 } [[TMP69]], 0
// CHK-CXX-NEXT:    [[TMP71:%.*]] = extractvalue { i64, i1 } [[TMP69]], 1
// CHK-CXX-NEXT:    br i1 [[TMP71]], label [[ATOMIC_EXIT36]], label [[ATOMIC_CMP34]]
// CHK-CXX:       atomic_cmp34:
// CHK-CXX-NEXT:    [[TMP72:%.*]] = bitcast i64 [[TMP70]] to double
// CHK-CXX-NEXT:    [[CMP35:%.*]] = fcmp ogt double [[TMP72]], [[TMP61]]
// CHK-CXX-NEXT:    br i1 [[CMP35]], label [[ATOMIC_CONT32]], label [[ATOMIC_EXIT36]]
// CHK-CXX:       atomic_exit36:
// CHK-CXX-NEXT:    [[TMP73:%.*]] = load double, double* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[TMP74:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD37:%.*]] = load atomic i64, i64* [[TMP74]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP75:%.*]] = bitcast i64 [[ATOMIC_LOAD37]] to double
// CHK-CXX-NEXT:    [[CMP38:%.*]] = fcmp olt double [[TMP75]], [[TMP73]]
// CHK-CXX-NEXT:    br i1 [[CMP38]], label [[ATOMIC_CONT39:%.*]], label [[ATOMIC_EXIT43:%.*]]
// CHK-CXX:       atomic_cont39:
// CHK-CXX-NEXT:    [[TMP76:%.*]] = phi i64 [ [[ATOMIC_LOAD37]], [[ATOMIC_EXIT36]] ], [ [[TMP82:%.*]], [[ATOMIC_CMP41:%.*]] ]
// CHK-CXX-NEXT:    [[TMP77:%.*]] = bitcast double* [[ATOMIC_TEMP40]] to i64*
// CHK-CXX-NEXT:    [[TMP78:%.*]] = bitcast double [[TMP73]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP78]], i64* [[TMP77]], align 8
// CHK-CXX-NEXT:    [[TMP79:%.*]] = load i64, i64* [[TMP77]], align 8
// CHK-CXX-NEXT:    [[TMP80:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP81:%.*]] = cmpxchg i64* [[TMP80]], i64 [[TMP76]], i64 [[TMP79]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP82]] = extractvalue { i64, i1 } [[TMP81]], 0
// CHK-CXX-NEXT:    [[TMP83:%.*]] = extractvalue { i64, i1 } [[TMP81]], 1
// CHK-CXX-NEXT:    br i1 [[TMP83]], label [[ATOMIC_EXIT43]], label [[ATOMIC_CMP41]]
// CHK-CXX:       atomic_cmp41:
// CHK-CXX-NEXT:    [[TMP84:%.*]] = bitcast i64 [[TMP82]] to double
// CHK-CXX-NEXT:    [[CMP42:%.*]] = fcmp olt double [[TMP84]], [[TMP73]]
// CHK-CXX-NEXT:    br i1 [[CMP42]], label [[ATOMIC_CONT39]], label [[ATOMIC_EXIT43]]
// CHK-CXX:       atomic_exit43:
// CHK-CXX-NEXT:    [[TMP85:%.*]] = load double, double* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[TMP86:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD44:%.*]] = load atomic i64, i64* [[TMP86]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP87:%.*]] = bitcast i64 [[ATOMIC_LOAD44]] to double
// CHK-CXX-NEXT:    [[CMP45:%.*]] = fcmp olt double [[TMP87]], [[TMP85]]
// CHK-CXX-NEXT:    br i1 [[CMP45]], label [[ATOMIC_CONT46:%.*]], label [[ATOMIC_EXIT50:%.*]]
// CHK-CXX:       atomic_cont46:
// CHK-CXX-NEXT:    [[TMP88:%.*]] = phi i64 [ [[ATOMIC_LOAD44]], [[ATOMIC_EXIT43]] ], [ [[TMP94:%.*]], [[ATOMIC_CMP48:%.*]] ]
// CHK-CXX-NEXT:    [[TMP89:%.*]] = bitcast double* [[ATOMIC_TEMP47]] to i64*
// CHK-CXX-NEXT:    [[TMP90:%.*]] = bitcast double [[TMP85]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP90]], i64* [[TMP89]], align 8
// CHK-CXX-NEXT:    [[TMP91:%.*]] = load i64, i64* [[TMP89]], align 8
// CHK-CXX-NEXT:    [[TMP92:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP93:%.*]] = cmpxchg i64* [[TMP92]], i64 [[TMP88]], i64 [[TMP91]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP94]] = extractvalue { i64, i1 } [[TMP93]], 0
// CHK-CXX-NEXT:    [[TMP95:%.*]] = extractvalue { i64, i1 } [[TMP93]], 1
// CHK-CXX-NEXT:    br i1 [[TMP95]], label [[ATOMIC_EXIT50]], label [[ATOMIC_CMP48]]
// CHK-CXX:       atomic_cmp48:
// CHK-CXX-NEXT:    [[TMP96:%.*]] = bitcast i64 [[TMP94]] to double
// CHK-CXX-NEXT:    [[CMP49:%.*]] = fcmp olt double [[TMP96]], [[TMP85]]
// CHK-CXX-NEXT:    br i1 [[CMP49]], label [[ATOMIC_CONT46]], label [[ATOMIC_EXIT50]]
// CHK-CXX:       atomic_exit50:
// CHK-CXX-NEXT:    [[TMP97:%.*]] = load double, double* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[TMP98:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD51:%.*]] = load atomic i64, i64* [[TMP98]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP99:%.*]] = bitcast i64 [[ATOMIC_LOAD51]] to double
// CHK-CXX-NEXT:    [[CMP52:%.*]] = fcmp ogt double [[TMP99]], [[TMP97]]
// CHK-CXX-NEXT:    br i1 [[CMP52]], label [[ATOMIC_CONT53:%.*]], label [[ATOMIC_EXIT57:%.*]]
// CHK-CXX:       atomic_cont53:
// CHK-CXX-NEXT:    [[TMP100:%.*]] = phi i64 [ [[ATOMIC_LOAD51]], [[ATOMIC_EXIT50]] ], [ [[TMP106:%.*]], [[ATOMIC_CMP55:%.*]] ]
// CHK-CXX-NEXT:    [[TMP101:%.*]] = bitcast double* [[ATOMIC_TEMP54]] to i64*
// CHK-CXX-NEXT:    [[TMP102:%.*]] = bitcast double [[TMP97]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP102]], i64* [[TMP101]], align 8
// CHK-CXX-NEXT:    [[TMP103:%.*]] = load i64, i64* [[TMP101]], align 8
// CHK-CXX-NEXT:    [[TMP104:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP105:%.*]] = cmpxchg i64* [[TMP104]], i64 [[TMP100]], i64 [[TMP103]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP106]] = extractvalue { i64, i1 } [[TMP105]], 0
// CHK-CXX-NEXT:    [[TMP107:%.*]] = extractvalue { i64, i1 } [[TMP105]], 1
// CHK-CXX-NEXT:    br i1 [[TMP107]], label [[ATOMIC_EXIT57]], label [[ATOMIC_CMP55]]
// CHK-CXX:       atomic_cmp55:
// CHK-CXX-NEXT:    [[TMP108:%.*]] = bitcast i64 [[TMP106]] to double
// CHK-CXX-NEXT:    [[CMP56:%.*]] = fcmp ogt double [[TMP108]], [[TMP97]]
// CHK-CXX-NEXT:    br i1 [[CMP56]], label [[ATOMIC_CONT53]], label [[ATOMIC_EXIT57]]
// CHK-CXX:       atomic_exit57:
// CHK-CXX-NEXT:    [[TMP109:%.*]] = load double, double* [[D]], align 8
// CHK-CXX-NEXT:    [[TMP110:%.*]] = load double, double* [[E]], align 8
// CHK-CXX-NEXT:    [[TMP111:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD58:%.*]] = load atomic i64, i64* [[TMP111]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP112:%.*]] = bitcast double [[TMP110]] to i64
// CHK-CXX-NEXT:    [[CMP59:%.*]] = icmp eq i64 [[ATOMIC_LOAD58]], [[TMP112]]
// CHK-CXX-NEXT:    br i1 [[CMP59]], label [[ATOMIC_CONT60:%.*]], label [[ATOMIC_EXIT64:%.*]]
// CHK-CXX:       atomic_cont60:
// CHK-CXX-NEXT:    [[TMP113:%.*]] = phi i64 [ [[ATOMIC_LOAD58]], [[ATOMIC_EXIT57]] ], [ [[TMP119:%.*]], [[ATOMIC_CMP62:%.*]] ]
// CHK-CXX-NEXT:    [[TMP114:%.*]] = bitcast double* [[ATOMIC_TEMP61]] to i64*
// CHK-CXX-NEXT:    [[TMP115:%.*]] = bitcast double [[TMP109]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP115]], i64* [[TMP114]], align 8
// CHK-CXX-NEXT:    [[TMP116:%.*]] = load i64, i64* [[TMP114]], align 8
// CHK-CXX-NEXT:    [[TMP117:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP118:%.*]] = cmpxchg i64* [[TMP117]], i64 [[TMP113]], i64 [[TMP116]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP119]] = extractvalue { i64, i1 } [[TMP118]], 0
// CHK-CXX-NEXT:    [[TMP120:%.*]] = extractvalue { i64, i1 } [[TMP118]], 1
// CHK-CXX-NEXT:    br i1 [[TMP120]], label [[ATOMIC_EXIT64]], label [[ATOMIC_CMP62]]
// CHK-CXX:       atomic_cmp62:
// CHK-CXX-NEXT:    [[TMP121:%.*]] = bitcast double [[TMP110]] to i64
// CHK-CXX-NEXT:    [[CMP63:%.*]] = icmp eq i64 [[TMP119]], [[TMP121]]
// CHK-CXX-NEXT:    br i1 [[CMP63]], label [[ATOMIC_CONT60]], label [[ATOMIC_EXIT64]]
// CHK-CXX:       atomic_exit64:
// CHK-CXX-NEXT:    ret void
//
void test_double() {
    // One of each form with 'double'.
    double x, expr, d, e;

    #pragma omp atomic compare
    x = expr < x ? expr : x; // MIN

    #pragma omp atomic compare
    x = expr > x ? expr : x; // MAX

    #pragma omp atomic compare
    x = x < expr ? expr : x; // MAX

    #pragma omp atomic compare
    x = x > expr ? expr : x; // MIN

    #pragma omp atomic compare
    x = x == e ? d : x;

    #pragma omp atomic compare
    if (expr < x) { x = expr; } // MIN

    #pragma omp atomic compare
    if (expr > x) { x = expr; } // MAX

    #pragma omp atomic compare
    if (x < expr) { x = expr; } // MAX

    #pragma omp atomic compare
    if (x > expr) { x = expr; } // MIN

    #pragma omp atomic compare
    if(x == e) { x = d; }
}

// CHK-C-LABEL: @test_bool(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[X:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[D:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[E:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP7:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP16:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[TMP0:%.*]] = load i8, i8* [[EXPR]], align 1
// CHK-C-NEXT:    [[TOBOOL:%.*]] = trunc i8 [[TMP0]] to i1
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i8, i8* [[X]] monotonic, align 1
// CHK-C-NEXT:    [[TMP1:%.*]] = trunc i8 [[ATOMIC_LOAD]] to i1
// CHK-C-NEXT:    [[CMP:%.*]] = icmp ugt i1 [[TMP1]], [[TOBOOL]]
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP2:%.*]] = phi i8 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP5:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[TOBOOL]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL]], i8* [[ATOMIC_TEMP]], align 1
// CHK-C-NEXT:    [[TMP3:%.*]] = load i8, i8* [[ATOMIC_TEMP]], align 1
// CHK-C-NEXT:    [[TMP4:%.*]] = cmpxchg i8* [[X]], i8 [[TMP2]], i8 [[TMP3]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP5]] = extractvalue { i8, i1 } [[TMP4]], 0
// CHK-C-NEXT:    [[TMP6:%.*]] = extractvalue { i8, i1 } [[TMP4]], 1
// CHK-C-NEXT:    br i1 [[TMP6]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    [[TMP7:%.*]] = trunc i8 [[TMP5]] to i1
// CHK-C-NEXT:    [[CMP1:%.*]] = icmp ugt i1 [[TMP7]], [[TOBOOL]]
// CHK-C-NEXT:    br i1 [[CMP1]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP8:%.*]] = load i8, i8* [[D]], align 1
// CHK-C-NEXT:    [[TOBOOL2:%.*]] = trunc i8 [[TMP8]] to i1
// CHK-C-NEXT:    [[TMP9:%.*]] = load i8, i8* [[E]], align 1
// CHK-C-NEXT:    [[TOBOOL3:%.*]] = trunc i8 [[TMP9]] to i1
// CHK-C-NEXT:    [[ATOMIC_LOAD4:%.*]] = load atomic i8, i8* [[X]] monotonic, align 1
// CHK-C-NEXT:    [[TMP10:%.*]] = trunc i8 [[ATOMIC_LOAD4]] to i1
// CHK-C-NEXT:    [[CMP5:%.*]] = icmp eq i1 [[TMP10]], [[TOBOOL3]]
// CHK-C-NEXT:    br i1 [[CMP5]], label [[ATOMIC_CONT6:%.*]], label [[ATOMIC_EXIT11:%.*]]
// CHK-C:       atomic_cont6:
// CHK-C-NEXT:    [[TMP11:%.*]] = phi i8 [ [[ATOMIC_LOAD4]], [[ATOMIC_EXIT]] ], [ [[TMP14:%.*]], [[ATOMIC_CMP9:%.*]] ]
// CHK-C-NEXT:    [[FROMBOOL8:%.*]] = zext i1 [[TOBOOL2]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL8]], i8* [[ATOMIC_TEMP7]], align 1
// CHK-C-NEXT:    [[TMP12:%.*]] = load i8, i8* [[ATOMIC_TEMP7]], align 1
// CHK-C-NEXT:    [[TMP13:%.*]] = cmpxchg i8* [[X]], i8 [[TMP11]], i8 [[TMP12]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP14]] = extractvalue { i8, i1 } [[TMP13]], 0
// CHK-C-NEXT:    [[TMP15:%.*]] = extractvalue { i8, i1 } [[TMP13]], 1
// CHK-C-NEXT:    br i1 [[TMP15]], label [[ATOMIC_EXIT11]], label [[ATOMIC_CMP9]]
// CHK-C:       atomic_cmp9:
// CHK-C-NEXT:    [[TMP16:%.*]] = trunc i8 [[TMP14]] to i1
// CHK-C-NEXT:    [[CMP10:%.*]] = icmp eq i1 [[TMP16]], [[TOBOOL3]]
// CHK-C-NEXT:    br i1 [[CMP10]], label [[ATOMIC_CONT6]], label [[ATOMIC_EXIT11]]
// CHK-C:       atomic_exit11:
// CHK-C-NEXT:    [[TMP17:%.*]] = load i8, i8* [[EXPR]], align 1
// CHK-C-NEXT:    [[TOBOOL12:%.*]] = trunc i8 [[TMP17]] to i1
// CHK-C-NEXT:    [[ATOMIC_LOAD13:%.*]] = load atomic i8, i8* [[X]] monotonic, align 1
// CHK-C-NEXT:    [[TMP18:%.*]] = trunc i8 [[ATOMIC_LOAD13]] to i1
// CHK-C-NEXT:    [[CMP14:%.*]] = icmp ult i1 [[TMP18]], [[TOBOOL12]]
// CHK-C-NEXT:    br i1 [[CMP14]], label [[ATOMIC_CONT15:%.*]], label [[ATOMIC_EXIT20:%.*]]
// CHK-C:       atomic_cont15:
// CHK-C-NEXT:    [[TMP19:%.*]] = phi i8 [ [[ATOMIC_LOAD13]], [[ATOMIC_EXIT11]] ], [ [[TMP22:%.*]], [[ATOMIC_CMP18:%.*]] ]
// CHK-C-NEXT:    [[FROMBOOL17:%.*]] = zext i1 [[TOBOOL12]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL17]], i8* [[ATOMIC_TEMP16]], align 1
// CHK-C-NEXT:    [[TMP20:%.*]] = load i8, i8* [[ATOMIC_TEMP16]], align 1
// CHK-C-NEXT:    [[TMP21:%.*]] = cmpxchg i8* [[X]], i8 [[TMP19]], i8 [[TMP20]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP22]] = extractvalue { i8, i1 } [[TMP21]], 0
// CHK-C-NEXT:    [[TMP23:%.*]] = extractvalue { i8, i1 } [[TMP21]], 1
// CHK-C-NEXT:    br i1 [[TMP23]], label [[ATOMIC_EXIT20]], label [[ATOMIC_CMP18]]
// CHK-C:       atomic_cmp18:
// CHK-C-NEXT:    [[TMP24:%.*]] = trunc i8 [[TMP22]] to i1
// CHK-C-NEXT:    [[CMP19:%.*]] = icmp ult i1 [[TMP24]], [[TOBOOL12]]
// CHK-C-NEXT:    br i1 [[CMP19]], label [[ATOMIC_CONT15]], label [[ATOMIC_EXIT20]]
// CHK-C:       atomic_exit20:
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z9test_boolv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[X:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP7:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP16:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i8, i8* [[EXPR]], align 1
// CHK-CXX-NEXT:    [[TOBOOL:%.*]] = trunc i8 [[TMP0]] to i1
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i8, i8* [[X]] monotonic, align 1
// CHK-CXX-NEXT:    [[TMP1:%.*]] = trunc i8 [[ATOMIC_LOAD]] to i1
// CHK-CXX-NEXT:    [[CMP:%.*]] = icmp ugt i1 [[TMP1]], [[TOBOOL]]
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP2:%.*]] = phi i8 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP5:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[TOBOOL]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL]], i8* [[ATOMIC_TEMP]], align 1
// CHK-CXX-NEXT:    [[TMP3:%.*]] = load i8, i8* [[ATOMIC_TEMP]], align 1
// CHK-CXX-NEXT:    [[TMP4:%.*]] = cmpxchg i8* [[X]], i8 [[TMP2]], i8 [[TMP3]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP5]] = extractvalue { i8, i1 } [[TMP4]], 0
// CHK-CXX-NEXT:    [[TMP6:%.*]] = extractvalue { i8, i1 } [[TMP4]], 1
// CHK-CXX-NEXT:    br i1 [[TMP6]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    [[TMP7:%.*]] = trunc i8 [[TMP5]] to i1
// CHK-CXX-NEXT:    [[CMP1:%.*]] = icmp ugt i1 [[TMP7]], [[TOBOOL]]
// CHK-CXX-NEXT:    br i1 [[CMP1]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP8:%.*]] = load i8, i8* [[D]], align 1
// CHK-CXX-NEXT:    [[TOBOOL2:%.*]] = trunc i8 [[TMP8]] to i1
// CHK-CXX-NEXT:    [[TMP9:%.*]] = load i8, i8* [[E]], align 1
// CHK-CXX-NEXT:    [[TOBOOL3:%.*]] = trunc i8 [[TMP9]] to i1
// CHK-CXX-NEXT:    [[ATOMIC_LOAD4:%.*]] = load atomic i8, i8* [[X]] monotonic, align 1
// CHK-CXX-NEXT:    [[TMP10:%.*]] = trunc i8 [[ATOMIC_LOAD4]] to i1
// CHK-CXX-NEXT:    [[CMP5:%.*]] = icmp eq i1 [[TMP10]], [[TOBOOL3]]
// CHK-CXX-NEXT:    br i1 [[CMP5]], label [[ATOMIC_CONT6:%.*]], label [[ATOMIC_EXIT11:%.*]]
// CHK-CXX:       atomic_cont6:
// CHK-CXX-NEXT:    [[TMP11:%.*]] = phi i8 [ [[ATOMIC_LOAD4]], [[ATOMIC_EXIT]] ], [ [[TMP14:%.*]], [[ATOMIC_CMP9:%.*]] ]
// CHK-CXX-NEXT:    [[FROMBOOL8:%.*]] = zext i1 [[TOBOOL2]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL8]], i8* [[ATOMIC_TEMP7]], align 1
// CHK-CXX-NEXT:    [[TMP12:%.*]] = load i8, i8* [[ATOMIC_TEMP7]], align 1
// CHK-CXX-NEXT:    [[TMP13:%.*]] = cmpxchg i8* [[X]], i8 [[TMP11]], i8 [[TMP12]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP14]] = extractvalue { i8, i1 } [[TMP13]], 0
// CHK-CXX-NEXT:    [[TMP15:%.*]] = extractvalue { i8, i1 } [[TMP13]], 1
// CHK-CXX-NEXT:    br i1 [[TMP15]], label [[ATOMIC_EXIT11]], label [[ATOMIC_CMP9]]
// CHK-CXX:       atomic_cmp9:
// CHK-CXX-NEXT:    [[TMP16:%.*]] = trunc i8 [[TMP14]] to i1
// CHK-CXX-NEXT:    [[CMP10:%.*]] = icmp eq i1 [[TMP16]], [[TOBOOL3]]
// CHK-CXX-NEXT:    br i1 [[CMP10]], label [[ATOMIC_CONT6]], label [[ATOMIC_EXIT11]]
// CHK-CXX:       atomic_exit11:
// CHK-CXX-NEXT:    [[TMP17:%.*]] = load i8, i8* [[EXPR]], align 1
// CHK-CXX-NEXT:    [[TOBOOL12:%.*]] = trunc i8 [[TMP17]] to i1
// CHK-CXX-NEXT:    [[ATOMIC_LOAD13:%.*]] = load atomic i8, i8* [[X]] monotonic, align 1
// CHK-CXX-NEXT:    [[TMP18:%.*]] = trunc i8 [[ATOMIC_LOAD13]] to i1
// CHK-CXX-NEXT:    [[CMP14:%.*]] = icmp ult i1 [[TMP18]], [[TOBOOL12]]
// CHK-CXX-NEXT:    br i1 [[CMP14]], label [[ATOMIC_CONT15:%.*]], label [[ATOMIC_EXIT20:%.*]]
// CHK-CXX:       atomic_cont15:
// CHK-CXX-NEXT:    [[TMP19:%.*]] = phi i8 [ [[ATOMIC_LOAD13]], [[ATOMIC_EXIT11]] ], [ [[TMP22:%.*]], [[ATOMIC_CMP18:%.*]] ]
// CHK-CXX-NEXT:    [[FROMBOOL17:%.*]] = zext i1 [[TOBOOL12]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL17]], i8* [[ATOMIC_TEMP16]], align 1
// CHK-CXX-NEXT:    [[TMP20:%.*]] = load i8, i8* [[ATOMIC_TEMP16]], align 1
// CHK-CXX-NEXT:    [[TMP21:%.*]] = cmpxchg i8* [[X]], i8 [[TMP19]], i8 [[TMP20]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP22]] = extractvalue { i8, i1 } [[TMP21]], 0
// CHK-CXX-NEXT:    [[TMP23:%.*]] = extractvalue { i8, i1 } [[TMP21]], 1
// CHK-CXX-NEXT:    br i1 [[TMP23]], label [[ATOMIC_EXIT20]], label [[ATOMIC_CMP18]]
// CHK-CXX:       atomic_cmp18:
// CHK-CXX-NEXT:    [[TMP24:%.*]] = trunc i8 [[TMP22]] to i1
// CHK-CXX-NEXT:    [[CMP19:%.*]] = icmp ult i1 [[TMP24]], [[TOBOOL12]]
// CHK-CXX-NEXT:    br i1 [[CMP19]], label [[ATOMIC_CONT15]], label [[ATOMIC_EXIT20]]
// CHK-CXX:       atomic_exit20:
// CHK-CXX-NEXT:    ret void
//
void test_bool() {
#ifdef __cplusplus
  bool x, expr, d, e;
#else
  _Bool x, expr, d, e;
#endif

  #pragma omp atomic compare
  x = expr < x ? expr : x; // MIN

  #pragma omp atomic compare
  x = x == e ? d : x;

  #pragma omp atomic compare
  if (x < expr) { x = expr; } // MAX
}

// CHK-C-LABEL: @test_long_long(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[X:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[D:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[E:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP5:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP12:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[TMP0:%.*]] = load i64, i64* [[EXPR]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, i64* [[X]] monotonic, align 8
// CHK-C-NEXT:    [[CMP:%.*]] = icmp sgt i64 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP1:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP0]], i64* [[ATOMIC_TEMP]], align 8
// CHK-C-NEXT:    [[TMP2:%.*]] = load i64, i64* [[ATOMIC_TEMP]], align 8
// CHK-C-NEXT:    [[TMP3:%.*]] = cmpxchg i64* [[X]], i64 [[TMP1]], i64 [[TMP2]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP4]] = extractvalue { i64, i1 } [[TMP3]], 0
// CHK-C-NEXT:    [[TMP5:%.*]] = extractvalue { i64, i1 } [[TMP3]], 1
// CHK-C-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    [[CMP1:%.*]] = icmp sgt i64 [[TMP4]], [[TMP0]]
// CHK-C-NEXT:    br i1 [[CMP1]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP6:%.*]] = load i64, i64* [[D]], align 8
// CHK-C-NEXT:    [[TMP7:%.*]] = load i64, i64* [[E]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD2:%.*]] = load atomic i64, i64* [[X]] monotonic, align 8
// CHK-C-NEXT:    [[CMP3:%.*]] = icmp eq i64 [[ATOMIC_LOAD2]], [[TMP7]]
// CHK-C-NEXT:    br i1 [[CMP3]], label [[ATOMIC_CONT4:%.*]], label [[ATOMIC_EXIT8:%.*]]
// CHK-C:       atomic_cont4:
// CHK-C-NEXT:    [[TMP8:%.*]] = phi i64 [ [[ATOMIC_LOAD2]], [[ATOMIC_EXIT]] ], [ [[TMP11:%.*]], [[ATOMIC_CMP6:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP6]], i64* [[ATOMIC_TEMP5]], align 8
// CHK-C-NEXT:    [[TMP9:%.*]] = load i64, i64* [[ATOMIC_TEMP5]], align 8
// CHK-C-NEXT:    [[TMP10:%.*]] = cmpxchg i64* [[X]], i64 [[TMP8]], i64 [[TMP9]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP11]] = extractvalue { i64, i1 } [[TMP10]], 0
// CHK-C-NEXT:    [[TMP12:%.*]] = extractvalue { i64, i1 } [[TMP10]], 1
// CHK-C-NEXT:    br i1 [[TMP12]], label [[ATOMIC_EXIT8]], label [[ATOMIC_CMP6]]
// CHK-C:       atomic_cmp6:
// CHK-C-NEXT:    [[CMP7:%.*]] = icmp eq i64 [[TMP11]], [[TMP7]]
// CHK-C-NEXT:    br i1 [[CMP7]], label [[ATOMIC_CONT4]], label [[ATOMIC_EXIT8]]
// CHK-C:       atomic_exit8:
// CHK-C-NEXT:    [[TMP13:%.*]] = load i64, i64* [[EXPR]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD9:%.*]] = load atomic i64, i64* [[X]] monotonic, align 8
// CHK-C-NEXT:    [[CMP10:%.*]] = icmp slt i64 [[ATOMIC_LOAD9]], [[TMP13]]
// CHK-C-NEXT:    br i1 [[CMP10]], label [[ATOMIC_CONT11:%.*]], label [[ATOMIC_EXIT15:%.*]]
// CHK-C:       atomic_cont11:
// CHK-C-NEXT:    [[TMP14:%.*]] = phi i64 [ [[ATOMIC_LOAD9]], [[ATOMIC_EXIT8]] ], [ [[TMP17:%.*]], [[ATOMIC_CMP13:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP13]], i64* [[ATOMIC_TEMP12]], align 8
// CHK-C-NEXT:    [[TMP15:%.*]] = load i64, i64* [[ATOMIC_TEMP12]], align 8
// CHK-C-NEXT:    [[TMP16:%.*]] = cmpxchg i64* [[X]], i64 [[TMP14]], i64 [[TMP15]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP17]] = extractvalue { i64, i1 } [[TMP16]], 0
// CHK-C-NEXT:    [[TMP18:%.*]] = extractvalue { i64, i1 } [[TMP16]], 1
// CHK-C-NEXT:    br i1 [[TMP18]], label [[ATOMIC_EXIT15]], label [[ATOMIC_CMP13]]
// CHK-C:       atomic_cmp13:
// CHK-C-NEXT:    [[CMP14:%.*]] = icmp slt i64 [[TMP17]], [[TMP13]]
// CHK-C-NEXT:    br i1 [[CMP14]], label [[ATOMIC_CONT11]], label [[ATOMIC_EXIT15]]
// CHK-C:       atomic_exit15:
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z14test_long_longv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[X:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP5:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP12:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i64, i64* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, i64* [[X]] monotonic, align 8
// CHK-CXX-NEXT:    [[CMP:%.*]] = icmp sgt i64 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP1:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP0]], i64* [[ATOMIC_TEMP]], align 8
// CHK-CXX-NEXT:    [[TMP2:%.*]] = load i64, i64* [[ATOMIC_TEMP]], align 8
// CHK-CXX-NEXT:    [[TMP3:%.*]] = cmpxchg i64* [[X]], i64 [[TMP1]], i64 [[TMP2]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP4]] = extractvalue { i64, i1 } [[TMP3]], 0
// CHK-CXX-NEXT:    [[TMP5:%.*]] = extractvalue { i64, i1 } [[TMP3]], 1
// CHK-CXX-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    [[CMP1:%.*]] = icmp sgt i64 [[TMP4]], [[TMP0]]
// CHK-CXX-NEXT:    br i1 [[CMP1]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP6:%.*]] = load i64, i64* [[D]], align 8
// CHK-CXX-NEXT:    [[TMP7:%.*]] = load i64, i64* [[E]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD2:%.*]] = load atomic i64, i64* [[X]] monotonic, align 8
// CHK-CXX-NEXT:    [[CMP3:%.*]] = icmp eq i64 [[ATOMIC_LOAD2]], [[TMP7]]
// CHK-CXX-NEXT:    br i1 [[CMP3]], label [[ATOMIC_CONT4:%.*]], label [[ATOMIC_EXIT8:%.*]]
// CHK-CXX:       atomic_cont4:
// CHK-CXX-NEXT:    [[TMP8:%.*]] = phi i64 [ [[ATOMIC_LOAD2]], [[ATOMIC_EXIT]] ], [ [[TMP11:%.*]], [[ATOMIC_CMP6:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP6]], i64* [[ATOMIC_TEMP5]], align 8
// CHK-CXX-NEXT:    [[TMP9:%.*]] = load i64, i64* [[ATOMIC_TEMP5]], align 8
// CHK-CXX-NEXT:    [[TMP10:%.*]] = cmpxchg i64* [[X]], i64 [[TMP8]], i64 [[TMP9]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP11]] = extractvalue { i64, i1 } [[TMP10]], 0
// CHK-CXX-NEXT:    [[TMP12:%.*]] = extractvalue { i64, i1 } [[TMP10]], 1
// CHK-CXX-NEXT:    br i1 [[TMP12]], label [[ATOMIC_EXIT8]], label [[ATOMIC_CMP6]]
// CHK-CXX:       atomic_cmp6:
// CHK-CXX-NEXT:    [[CMP7:%.*]] = icmp eq i64 [[TMP11]], [[TMP7]]
// CHK-CXX-NEXT:    br i1 [[CMP7]], label [[ATOMIC_CONT4]], label [[ATOMIC_EXIT8]]
// CHK-CXX:       atomic_exit8:
// CHK-CXX-NEXT:    [[TMP13:%.*]] = load i64, i64* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD9:%.*]] = load atomic i64, i64* [[X]] monotonic, align 8
// CHK-CXX-NEXT:    [[CMP10:%.*]] = icmp slt i64 [[ATOMIC_LOAD9]], [[TMP13]]
// CHK-CXX-NEXT:    br i1 [[CMP10]], label [[ATOMIC_CONT11:%.*]], label [[ATOMIC_EXIT15:%.*]]
// CHK-CXX:       atomic_cont11:
// CHK-CXX-NEXT:    [[TMP14:%.*]] = phi i64 [ [[ATOMIC_LOAD9]], [[ATOMIC_EXIT8]] ], [ [[TMP17:%.*]], [[ATOMIC_CMP13:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP13]], i64* [[ATOMIC_TEMP12]], align 8
// CHK-CXX-NEXT:    [[TMP15:%.*]] = load i64, i64* [[ATOMIC_TEMP12]], align 8
// CHK-CXX-NEXT:    [[TMP16:%.*]] = cmpxchg i64* [[X]], i64 [[TMP14]], i64 [[TMP15]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP17]] = extractvalue { i64, i1 } [[TMP16]], 0
// CHK-CXX-NEXT:    [[TMP18:%.*]] = extractvalue { i64, i1 } [[TMP16]], 1
// CHK-CXX-NEXT:    br i1 [[TMP18]], label [[ATOMIC_EXIT15]], label [[ATOMIC_CMP13]]
// CHK-CXX:       atomic_cmp13:
// CHK-CXX-NEXT:    [[CMP14:%.*]] = icmp slt i64 [[TMP17]], [[TMP13]]
// CHK-CXX-NEXT:    br i1 [[CMP14]], label [[ATOMIC_CONT11]], label [[ATOMIC_EXIT15]]
// CHK-CXX:       atomic_exit15:
// CHK-CXX-NEXT:    ret void
//
void test_long_long() {
  long long x, expr, d, e;

  #pragma omp atomic compare
  x = expr < x ? expr : x; // MIN

  #pragma omp atomic compare
  x = x == e ? d : x;

  #pragma omp atomic compare
  if (x < expr) { x = expr; } // MAX
}

#ifdef LIBCALLS
void test_Complex_float()
{
  _Complex float x, expr, d, e;

  #pragma omp atomic compare
  x = x == e ? d : x;
}

void test_long_double() {
  long double x, expr, d, e;

  #pragma omp atomic compare
  x = expr < x ? expr : x; // MIN

  #pragma omp atomic compare
  x = x == e ? d : x;

  #pragma omp atomic compare
  if (x < expr) { x = expr; } // MAX
}

void test_vec() {
  typedef int int4 __attribute__((__vector_size__(16)));
  int4 x;
  int expr, d, e;

  #pragma omp atomic compare
  x[1] = expr < x[1] ? expr : x[1]; // MIN

  #pragma omp atomic compare
  x[1] = x[1] == e ? d : x[1];

  #pragma omp atomic compare
  if (x[1] < expr) { x[1] = expr; } // MAX
}
#endif


struct BitFields {
  int : 32;
  int a : 31;
} bfx;

struct BitFields_packed {
  int : 32;
  int a : 31;
} __attribute__ ((__packed__)) bfx_packed;

struct BitFields2 {
  int : 31;
  int a : 1;
} bfx2;

struct BitFields2_packed {
  int : 31;
  int a : 1;
} __attribute__ ((__packed__)) bfx2_packed;

struct BitFields3 {
  int : 11;
  int a : 14;
} bfx3;

struct BitFields3_packed {
  int : 11;
  int a : 14;
} __attribute__ ((__packed__)) bfx3_packed;

struct BitFields4 {
  short : 16;
  int a: 1;
  long b : 7;
} bfx4;

struct BitFields4_packed {
  short : 16;
  int a: 1;
  long b : 7;
} __attribute__ ((__packed__)) bfx4_packed;

// CHK-C-LABEL: @test_bitfield(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP1:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP3:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP9:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP15:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP21:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP28:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP34:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP40:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP47:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP52:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP59:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP65:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP70:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP77:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP83:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP88:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP95:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP101:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP106:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP113:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP120:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP126:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP133:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP140:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP146:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP153:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP160:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP166:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP173:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP180:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP186:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP193:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP200:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP206:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP213:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP220:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP227:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP234:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP242:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP249:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP256:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP264:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP271:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP278:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP286:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP292:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP299:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP308:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP314:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP321:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP329:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP335:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP342:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP349:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP356:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP362:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP370:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP377:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP383:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP391:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP398:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP404:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[TMP0:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i32, i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD]], i32* [[ATOMIC_TEMP]], align 4
// CHK-C-NEXT:    [[BF_LOAD:%.*]] = load i32, i32* [[ATOMIC_TEMP]], align 4
// CHK-C-NEXT:    [[BF_SHL:%.*]] = shl i32 [[BF_LOAD]], 1
// CHK-C-NEXT:    [[BF_ASHR:%.*]] = ashr i32 [[BF_SHL]], 1
// CHK-C-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[BF_ASHR]], [[TMP0]]
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP1:%.*]] = phi i32 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP1]], i32* [[ATOMIC_TEMP1]], align 4
// CHK-C-NEXT:    [[BF_LOAD2:%.*]] = load i32, i32* [[ATOMIC_TEMP1]], align 4
// CHK-C-NEXT:    [[BF_VALUE:%.*]] = and i32 [[TMP0]], 2147483647
// CHK-C-NEXT:    [[BF_CLEAR:%.*]] = and i32 [[BF_LOAD2]], -2147483648
// CHK-C-NEXT:    [[BF_SET:%.*]] = or i32 [[BF_CLEAR]], [[BF_VALUE]]
// CHK-C-NEXT:    store i32 [[BF_SET]], i32* [[ATOMIC_TEMP1]], align 4
// CHK-C-NEXT:    [[TMP2:%.*]] = load i32, i32* [[ATOMIC_TEMP1]], align 4
// CHK-C-NEXT:    [[TMP3:%.*]] = cmpxchg i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*), i32 [[TMP1]], i32 [[TMP2]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP4]] = extractvalue { i32, i1 } [[TMP3]], 0
// CHK-C-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i1 } [[TMP3]], 1
// CHK-C-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    store i32 [[TMP4]], i32* [[ATOMIC_TEMP3]], align 4
// CHK-C-NEXT:    [[BF_LOAD4:%.*]] = load i32, i32* [[ATOMIC_TEMP3]], align 4
// CHK-C-NEXT:    [[BF_SHL5:%.*]] = shl i32 [[BF_LOAD4]], 1
// CHK-C-NEXT:    [[BF_ASHR6:%.*]] = ashr i32 [[BF_SHL5]], 1
// CHK-C-NEXT:    [[CMP7:%.*]] = icmp sgt i32 [[BF_ASHR6]], [[TMP0]]
// CHK-C-NEXT:    br i1 [[CMP7]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP6:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP7:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD8:%.*]] = load atomic i32, i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD8]], i32* [[ATOMIC_TEMP9]], align 4
// CHK-C-NEXT:    [[BF_LOAD10:%.*]] = load i32, i32* [[ATOMIC_TEMP9]], align 4
// CHK-C-NEXT:    [[BF_SHL11:%.*]] = shl i32 [[BF_LOAD10]], 1
// CHK-C-NEXT:    [[BF_ASHR12:%.*]] = ashr i32 [[BF_SHL11]], 1
// CHK-C-NEXT:    [[CMP13:%.*]] = icmp eq i32 [[BF_ASHR12]], [[TMP7]]
// CHK-C-NEXT:    br i1 [[CMP13]], label [[ATOMIC_CONT14:%.*]], label [[ATOMIC_EXIT26:%.*]]
// CHK-C:       atomic_cont14:
// CHK-C-NEXT:    [[TMP8:%.*]] = phi i32 [ [[ATOMIC_LOAD8]], [[ATOMIC_EXIT]] ], [ [[TMP11:%.*]], [[ATOMIC_CMP20:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP8]], i32* [[ATOMIC_TEMP15]], align 4
// CHK-C-NEXT:    [[BF_LOAD16:%.*]] = load i32, i32* [[ATOMIC_TEMP15]], align 4
// CHK-C-NEXT:    [[BF_VALUE17:%.*]] = and i32 [[TMP6]], 2147483647
// CHK-C-NEXT:    [[BF_CLEAR18:%.*]] = and i32 [[BF_LOAD16]], -2147483648
// CHK-C-NEXT:    [[BF_SET19:%.*]] = or i32 [[BF_CLEAR18]], [[BF_VALUE17]]
// CHK-C-NEXT:    store i32 [[BF_SET19]], i32* [[ATOMIC_TEMP15]], align 4
// CHK-C-NEXT:    [[TMP9:%.*]] = load i32, i32* [[ATOMIC_TEMP15]], align 4
// CHK-C-NEXT:    [[TMP10:%.*]] = cmpxchg i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*), i32 [[TMP8]], i32 [[TMP9]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP11]] = extractvalue { i32, i1 } [[TMP10]], 0
// CHK-C-NEXT:    [[TMP12:%.*]] = extractvalue { i32, i1 } [[TMP10]], 1
// CHK-C-NEXT:    br i1 [[TMP12]], label [[ATOMIC_EXIT26]], label [[ATOMIC_CMP20]]
// CHK-C:       atomic_cmp20:
// CHK-C-NEXT:    store i32 [[TMP11]], i32* [[ATOMIC_TEMP21]], align 4
// CHK-C-NEXT:    [[BF_LOAD22:%.*]] = load i32, i32* [[ATOMIC_TEMP21]], align 4
// CHK-C-NEXT:    [[BF_SHL23:%.*]] = shl i32 [[BF_LOAD22]], 1
// CHK-C-NEXT:    [[BF_ASHR24:%.*]] = ashr i32 [[BF_SHL23]], 1
// CHK-C-NEXT:    [[CMP25:%.*]] = icmp eq i32 [[BF_ASHR24]], [[TMP7]]
// CHK-C-NEXT:    br i1 [[CMP25]], label [[ATOMIC_CONT14]], label [[ATOMIC_EXIT26]]
// CHK-C:       atomic_exit26:
// CHK-C-NEXT:    [[TMP13:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD27:%.*]] = load atomic i32, i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD27]], i32* [[ATOMIC_TEMP28]], align 4
// CHK-C-NEXT:    [[BF_LOAD29:%.*]] = load i32, i32* [[ATOMIC_TEMP28]], align 4
// CHK-C-NEXT:    [[BF_SHL30:%.*]] = shl i32 [[BF_LOAD29]], 1
// CHK-C-NEXT:    [[BF_ASHR31:%.*]] = ashr i32 [[BF_SHL30]], 1
// CHK-C-NEXT:    [[CMP32:%.*]] = icmp slt i32 [[BF_ASHR31]], [[TMP13]]
// CHK-C-NEXT:    br i1 [[CMP32]], label [[ATOMIC_CONT33:%.*]], label [[ATOMIC_EXIT45:%.*]]
// CHK-C:       atomic_cont33:
// CHK-C-NEXT:    [[TMP14:%.*]] = phi i32 [ [[ATOMIC_LOAD27]], [[ATOMIC_EXIT26]] ], [ [[TMP17:%.*]], [[ATOMIC_CMP39:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP14]], i32* [[ATOMIC_TEMP34]], align 4
// CHK-C-NEXT:    [[BF_LOAD35:%.*]] = load i32, i32* [[ATOMIC_TEMP34]], align 4
// CHK-C-NEXT:    [[BF_VALUE36:%.*]] = and i32 [[TMP13]], 2147483647
// CHK-C-NEXT:    [[BF_CLEAR37:%.*]] = and i32 [[BF_LOAD35]], -2147483648
// CHK-C-NEXT:    [[BF_SET38:%.*]] = or i32 [[BF_CLEAR37]], [[BF_VALUE36]]
// CHK-C-NEXT:    store i32 [[BF_SET38]], i32* [[ATOMIC_TEMP34]], align 4
// CHK-C-NEXT:    [[TMP15:%.*]] = load i32, i32* [[ATOMIC_TEMP34]], align 4
// CHK-C-NEXT:    [[TMP16:%.*]] = cmpxchg i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*), i32 [[TMP14]], i32 [[TMP15]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP17]] = extractvalue { i32, i1 } [[TMP16]], 0
// CHK-C-NEXT:    [[TMP18:%.*]] = extractvalue { i32, i1 } [[TMP16]], 1
// CHK-C-NEXT:    br i1 [[TMP18]], label [[ATOMIC_EXIT45]], label [[ATOMIC_CMP39]]
// CHK-C:       atomic_cmp39:
// CHK-C-NEXT:    store i32 [[TMP17]], i32* [[ATOMIC_TEMP40]], align 4
// CHK-C-NEXT:    [[BF_LOAD41:%.*]] = load i32, i32* [[ATOMIC_TEMP40]], align 4
// CHK-C-NEXT:    [[BF_SHL42:%.*]] = shl i32 [[BF_LOAD41]], 1
// CHK-C-NEXT:    [[BF_ASHR43:%.*]] = ashr i32 [[BF_SHL42]], 1
// CHK-C-NEXT:    [[CMP44:%.*]] = icmp slt i32 [[BF_ASHR43]], [[TMP13]]
// CHK-C-NEXT:    br i1 [[CMP44]], label [[ATOMIC_CONT33]], label [[ATOMIC_EXIT45]]
// CHK-C:       atomic_exit45:
// CHK-C-NEXT:    [[TMP19:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD46:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS2:%.*]], %struct.BitFields2* @bfx2, i32 0, i32 0) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD46]], i32* [[ATOMIC_TEMP47]], align 4
// CHK-C-NEXT:    [[BF_LOAD48:%.*]] = load i32, i32* [[ATOMIC_TEMP47]], align 4
// CHK-C-NEXT:    [[BF_ASHR49:%.*]] = ashr i32 [[BF_LOAD48]], 31
// CHK-C-NEXT:    [[CMP50:%.*]] = icmp sgt i32 [[BF_ASHR49]], [[TMP19]]
// CHK-C-NEXT:    br i1 [[CMP50]], label [[ATOMIC_CONT51:%.*]], label [[ATOMIC_EXIT63:%.*]]
// CHK-C:       atomic_cont51:
// CHK-C-NEXT:    [[TMP20:%.*]] = phi i32 [ [[ATOMIC_LOAD46]], [[ATOMIC_EXIT45]] ], [ [[TMP23:%.*]], [[ATOMIC_CMP58:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP20]], i32* [[ATOMIC_TEMP52]], align 4
// CHK-C-NEXT:    [[BF_LOAD53:%.*]] = load i32, i32* [[ATOMIC_TEMP52]], align 4
// CHK-C-NEXT:    [[BF_VALUE54:%.*]] = and i32 [[TMP19]], 1
// CHK-C-NEXT:    [[BF_SHL55:%.*]] = shl i32 [[BF_VALUE54]], 31
// CHK-C-NEXT:    [[BF_CLEAR56:%.*]] = and i32 [[BF_LOAD53]], 2147483647
// CHK-C-NEXT:    [[BF_SET57:%.*]] = or i32 [[BF_CLEAR56]], [[BF_SHL55]]
// CHK-C-NEXT:    store i32 [[BF_SET57]], i32* [[ATOMIC_TEMP52]], align 4
// CHK-C-NEXT:    [[TMP21:%.*]] = load i32, i32* [[ATOMIC_TEMP52]], align 4
// CHK-C-NEXT:    [[TMP22:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0), i32 [[TMP20]], i32 [[TMP21]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP23]] = extractvalue { i32, i1 } [[TMP22]], 0
// CHK-C-NEXT:    [[TMP24:%.*]] = extractvalue { i32, i1 } [[TMP22]], 1
// CHK-C-NEXT:    br i1 [[TMP24]], label [[ATOMIC_EXIT63]], label [[ATOMIC_CMP58]]
// CHK-C:       atomic_cmp58:
// CHK-C-NEXT:    store i32 [[TMP23]], i32* [[ATOMIC_TEMP59]], align 4
// CHK-C-NEXT:    [[BF_LOAD60:%.*]] = load i32, i32* [[ATOMIC_TEMP59]], align 4
// CHK-C-NEXT:    [[BF_ASHR61:%.*]] = ashr i32 [[BF_LOAD60]], 31
// CHK-C-NEXT:    [[CMP62:%.*]] = icmp sgt i32 [[BF_ASHR61]], [[TMP19]]
// CHK-C-NEXT:    br i1 [[CMP62]], label [[ATOMIC_CONT51]], label [[ATOMIC_EXIT63]]
// CHK-C:       atomic_exit63:
// CHK-C-NEXT:    [[TMP25:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP26:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD64:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD64]], i32* [[ATOMIC_TEMP65]], align 4
// CHK-C-NEXT:    [[BF_LOAD66:%.*]] = load i32, i32* [[ATOMIC_TEMP65]], align 4
// CHK-C-NEXT:    [[BF_ASHR67:%.*]] = ashr i32 [[BF_LOAD66]], 31
// CHK-C-NEXT:    [[CMP68:%.*]] = icmp eq i32 [[BF_ASHR67]], [[TMP26]]
// CHK-C-NEXT:    br i1 [[CMP68]], label [[ATOMIC_CONT69:%.*]], label [[ATOMIC_EXIT81:%.*]]
// CHK-C:       atomic_cont69:
// CHK-C-NEXT:    [[TMP27:%.*]] = phi i32 [ [[ATOMIC_LOAD64]], [[ATOMIC_EXIT63]] ], [ [[TMP30:%.*]], [[ATOMIC_CMP76:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP27]], i32* [[ATOMIC_TEMP70]], align 4
// CHK-C-NEXT:    [[BF_LOAD71:%.*]] = load i32, i32* [[ATOMIC_TEMP70]], align 4
// CHK-C-NEXT:    [[BF_VALUE72:%.*]] = and i32 [[TMP25]], 1
// CHK-C-NEXT:    [[BF_SHL73:%.*]] = shl i32 [[BF_VALUE72]], 31
// CHK-C-NEXT:    [[BF_CLEAR74:%.*]] = and i32 [[BF_LOAD71]], 2147483647
// CHK-C-NEXT:    [[BF_SET75:%.*]] = or i32 [[BF_CLEAR74]], [[BF_SHL73]]
// CHK-C-NEXT:    store i32 [[BF_SET75]], i32* [[ATOMIC_TEMP70]], align 4
// CHK-C-NEXT:    [[TMP28:%.*]] = load i32, i32* [[ATOMIC_TEMP70]], align 4
// CHK-C-NEXT:    [[TMP29:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0), i32 [[TMP27]], i32 [[TMP28]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP30]] = extractvalue { i32, i1 } [[TMP29]], 0
// CHK-C-NEXT:    [[TMP31:%.*]] = extractvalue { i32, i1 } [[TMP29]], 1
// CHK-C-NEXT:    br i1 [[TMP31]], label [[ATOMIC_EXIT81]], label [[ATOMIC_CMP76]]
// CHK-C:       atomic_cmp76:
// CHK-C-NEXT:    store i32 [[TMP30]], i32* [[ATOMIC_TEMP77]], align 4
// CHK-C-NEXT:    [[BF_LOAD78:%.*]] = load i32, i32* [[ATOMIC_TEMP77]], align 4
// CHK-C-NEXT:    [[BF_ASHR79:%.*]] = ashr i32 [[BF_LOAD78]], 31
// CHK-C-NEXT:    [[CMP80:%.*]] = icmp eq i32 [[BF_ASHR79]], [[TMP26]]
// CHK-C-NEXT:    br i1 [[CMP80]], label [[ATOMIC_CONT69]], label [[ATOMIC_EXIT81]]
// CHK-C:       atomic_exit81:
// CHK-C-NEXT:    [[TMP32:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD82:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD82]], i32* [[ATOMIC_TEMP83]], align 4
// CHK-C-NEXT:    [[BF_LOAD84:%.*]] = load i32, i32* [[ATOMIC_TEMP83]], align 4
// CHK-C-NEXT:    [[BF_ASHR85:%.*]] = ashr i32 [[BF_LOAD84]], 31
// CHK-C-NEXT:    [[CMP86:%.*]] = icmp slt i32 [[BF_ASHR85]], [[TMP32]]
// CHK-C-NEXT:    br i1 [[CMP86]], label [[ATOMIC_CONT87:%.*]], label [[ATOMIC_EXIT99:%.*]]
// CHK-C:       atomic_cont87:
// CHK-C-NEXT:    [[TMP33:%.*]] = phi i32 [ [[ATOMIC_LOAD82]], [[ATOMIC_EXIT81]] ], [ [[TMP36:%.*]], [[ATOMIC_CMP94:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP33]], i32* [[ATOMIC_TEMP88]], align 4
// CHK-C-NEXT:    [[BF_LOAD89:%.*]] = load i32, i32* [[ATOMIC_TEMP88]], align 4
// CHK-C-NEXT:    [[BF_VALUE90:%.*]] = and i32 [[TMP32]], 1
// CHK-C-NEXT:    [[BF_SHL91:%.*]] = shl i32 [[BF_VALUE90]], 31
// CHK-C-NEXT:    [[BF_CLEAR92:%.*]] = and i32 [[BF_LOAD89]], 2147483647
// CHK-C-NEXT:    [[BF_SET93:%.*]] = or i32 [[BF_CLEAR92]], [[BF_SHL91]]
// CHK-C-NEXT:    store i32 [[BF_SET93]], i32* [[ATOMIC_TEMP88]], align 4
// CHK-C-NEXT:    [[TMP34:%.*]] = load i32, i32* [[ATOMIC_TEMP88]], align 4
// CHK-C-NEXT:    [[TMP35:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0), i32 [[TMP33]], i32 [[TMP34]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP36]] = extractvalue { i32, i1 } [[TMP35]], 0
// CHK-C-NEXT:    [[TMP37:%.*]] = extractvalue { i32, i1 } [[TMP35]], 1
// CHK-C-NEXT:    br i1 [[TMP37]], label [[ATOMIC_EXIT99]], label [[ATOMIC_CMP94]]
// CHK-C:       atomic_cmp94:
// CHK-C-NEXT:    store i32 [[TMP36]], i32* [[ATOMIC_TEMP95]], align 4
// CHK-C-NEXT:    [[BF_LOAD96:%.*]] = load i32, i32* [[ATOMIC_TEMP95]], align 4
// CHK-C-NEXT:    [[BF_ASHR97:%.*]] = ashr i32 [[BF_LOAD96]], 31
// CHK-C-NEXT:    [[CMP98:%.*]] = icmp slt i32 [[BF_ASHR97]], [[TMP32]]
// CHK-C-NEXT:    br i1 [[CMP98]], label [[ATOMIC_CONT87]], label [[ATOMIC_EXIT99]]
// CHK-C:       atomic_exit99:
// CHK-C-NEXT:    [[TMP38:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD100:%.*]] = load atomic i8, i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3) monotonic, align 1
// CHK-C-NEXT:    [[TMP39:%.*]] = bitcast i32* [[ATOMIC_TEMP101]] to i8*
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD100]], i8* [[TMP39]], align 1
// CHK-C-NEXT:    [[BF_LOAD102:%.*]] = load i8, i8* [[TMP39]], align 1
// CHK-C-NEXT:    [[BF_ASHR103:%.*]] = ashr i8 [[BF_LOAD102]], 7
// CHK-C-NEXT:    [[BF_CAST:%.*]] = sext i8 [[BF_ASHR103]] to i32
// CHK-C-NEXT:    [[CMP104:%.*]] = icmp sgt i32 [[BF_CAST]], [[TMP38]]
// CHK-C-NEXT:    br i1 [[CMP104]], label [[ATOMIC_CONT105:%.*]], label [[ATOMIC_EXIT118:%.*]]
// CHK-C:       atomic_cont105:
// CHK-C-NEXT:    [[TMP40:%.*]] = phi i8 [ [[ATOMIC_LOAD100]], [[ATOMIC_EXIT99]] ], [ [[TMP45:%.*]], [[ATOMIC_CMP112:%.*]] ]
// CHK-C-NEXT:    [[TMP41:%.*]] = bitcast i32* [[ATOMIC_TEMP106]] to i8*
// CHK-C-NEXT:    store i8 [[TMP40]], i8* [[TMP41]], align 1
// CHK-C-NEXT:    [[TMP42:%.*]] = trunc i32 [[TMP38]] to i8
// CHK-C-NEXT:    [[BF_LOAD107:%.*]] = load i8, i8* [[TMP41]], align 1
// CHK-C-NEXT:    [[BF_VALUE108:%.*]] = and i8 [[TMP42]], 1
// CHK-C-NEXT:    [[BF_SHL109:%.*]] = shl i8 [[BF_VALUE108]], 7
// CHK-C-NEXT:    [[BF_CLEAR110:%.*]] = and i8 [[BF_LOAD107]], 127
// CHK-C-NEXT:    [[BF_SET111:%.*]] = or i8 [[BF_CLEAR110]], [[BF_SHL109]]
// CHK-C-NEXT:    store i8 [[BF_SET111]], i8* [[TMP41]], align 1
// CHK-C-NEXT:    [[TMP43:%.*]] = load i8, i8* [[TMP41]], align 1
// CHK-C-NEXT:    [[TMP44:%.*]] = cmpxchg i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3), i8 [[TMP40]], i8 [[TMP43]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP45]] = extractvalue { i8, i1 } [[TMP44]], 0
// CHK-C-NEXT:    [[TMP46:%.*]] = extractvalue { i8, i1 } [[TMP44]], 1
// CHK-C-NEXT:    br i1 [[TMP46]], label [[ATOMIC_EXIT118]], label [[ATOMIC_CMP112]]
// CHK-C:       atomic_cmp112:
// CHK-C-NEXT:    [[TMP47:%.*]] = bitcast i32* [[ATOMIC_TEMP113]] to i8*
// CHK-C-NEXT:    store i8 [[TMP45]], i8* [[TMP47]], align 1
// CHK-C-NEXT:    [[BF_LOAD114:%.*]] = load i8, i8* [[TMP47]], align 1
// CHK-C-NEXT:    [[BF_ASHR115:%.*]] = ashr i8 [[BF_LOAD114]], 7
// CHK-C-NEXT:    [[BF_CAST116:%.*]] = sext i8 [[BF_ASHR115]] to i32
// CHK-C-NEXT:    [[CMP117:%.*]] = icmp sgt i32 [[BF_CAST116]], [[TMP38]]
// CHK-C-NEXT:    br i1 [[CMP117]], label [[ATOMIC_CONT105]], label [[ATOMIC_EXIT118]]
// CHK-C:       atomic_exit118:
// CHK-C-NEXT:    [[TMP48:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP49:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD119:%.*]] = load atomic i8, i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3) monotonic, align 1
// CHK-C-NEXT:    [[TMP50:%.*]] = bitcast i32* [[ATOMIC_TEMP120]] to i8*
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD119]], i8* [[TMP50]], align 1
// CHK-C-NEXT:    [[BF_LOAD121:%.*]] = load i8, i8* [[TMP50]], align 1
// CHK-C-NEXT:    [[BF_ASHR122:%.*]] = ashr i8 [[BF_LOAD121]], 7
// CHK-C-NEXT:    [[BF_CAST123:%.*]] = sext i8 [[BF_ASHR122]] to i32
// CHK-C-NEXT:    [[CMP124:%.*]] = icmp eq i32 [[BF_CAST123]], [[TMP49]]
// CHK-C-NEXT:    br i1 [[CMP124]], label [[ATOMIC_CONT125:%.*]], label [[ATOMIC_EXIT138:%.*]]
// CHK-C:       atomic_cont125:
// CHK-C-NEXT:    [[TMP51:%.*]] = phi i8 [ [[ATOMIC_LOAD119]], [[ATOMIC_EXIT118]] ], [ [[TMP56:%.*]], [[ATOMIC_CMP132:%.*]] ]
// CHK-C-NEXT:    [[TMP52:%.*]] = bitcast i32* [[ATOMIC_TEMP126]] to i8*
// CHK-C-NEXT:    store i8 [[TMP51]], i8* [[TMP52]], align 1
// CHK-C-NEXT:    [[TMP53:%.*]] = trunc i32 [[TMP48]] to i8
// CHK-C-NEXT:    [[BF_LOAD127:%.*]] = load i8, i8* [[TMP52]], align 1
// CHK-C-NEXT:    [[BF_VALUE128:%.*]] = and i8 [[TMP53]], 1
// CHK-C-NEXT:    [[BF_SHL129:%.*]] = shl i8 [[BF_VALUE128]], 7
// CHK-C-NEXT:    [[BF_CLEAR130:%.*]] = and i8 [[BF_LOAD127]], 127
// CHK-C-NEXT:    [[BF_SET131:%.*]] = or i8 [[BF_CLEAR130]], [[BF_SHL129]]
// CHK-C-NEXT:    store i8 [[BF_SET131]], i8* [[TMP52]], align 1
// CHK-C-NEXT:    [[TMP54:%.*]] = load i8, i8* [[TMP52]], align 1
// CHK-C-NEXT:    [[TMP55:%.*]] = cmpxchg i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3), i8 [[TMP51]], i8 [[TMP54]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP56]] = extractvalue { i8, i1 } [[TMP55]], 0
// CHK-C-NEXT:    [[TMP57:%.*]] = extractvalue { i8, i1 } [[TMP55]], 1
// CHK-C-NEXT:    br i1 [[TMP57]], label [[ATOMIC_EXIT138]], label [[ATOMIC_CMP132]]
// CHK-C:       atomic_cmp132:
// CHK-C-NEXT:    [[TMP58:%.*]] = bitcast i32* [[ATOMIC_TEMP133]] to i8*
// CHK-C-NEXT:    store i8 [[TMP56]], i8* [[TMP58]], align 1
// CHK-C-NEXT:    [[BF_LOAD134:%.*]] = load i8, i8* [[TMP58]], align 1
// CHK-C-NEXT:    [[BF_ASHR135:%.*]] = ashr i8 [[BF_LOAD134]], 7
// CHK-C-NEXT:    [[BF_CAST136:%.*]] = sext i8 [[BF_ASHR135]] to i32
// CHK-C-NEXT:    [[CMP137:%.*]] = icmp eq i32 [[BF_CAST136]], [[TMP49]]
// CHK-C-NEXT:    br i1 [[CMP137]], label [[ATOMIC_CONT125]], label [[ATOMIC_EXIT138]]
// CHK-C:       atomic_exit138:
// CHK-C-NEXT:    [[TMP59:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD139:%.*]] = load atomic i8, i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3) monotonic, align 1
// CHK-C-NEXT:    [[TMP60:%.*]] = bitcast i32* [[ATOMIC_TEMP140]] to i8*
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD139]], i8* [[TMP60]], align 1
// CHK-C-NEXT:    [[BF_LOAD141:%.*]] = load i8, i8* [[TMP60]], align 1
// CHK-C-NEXT:    [[BF_ASHR142:%.*]] = ashr i8 [[BF_LOAD141]], 7
// CHK-C-NEXT:    [[BF_CAST143:%.*]] = sext i8 [[BF_ASHR142]] to i32
// CHK-C-NEXT:    [[CMP144:%.*]] = icmp slt i32 [[BF_CAST143]], [[TMP59]]
// CHK-C-NEXT:    br i1 [[CMP144]], label [[ATOMIC_CONT145:%.*]], label [[ATOMIC_EXIT158:%.*]]
// CHK-C:       atomic_cont145:
// CHK-C-NEXT:    [[TMP61:%.*]] = phi i8 [ [[ATOMIC_LOAD139]], [[ATOMIC_EXIT138]] ], [ [[TMP66:%.*]], [[ATOMIC_CMP152:%.*]] ]
// CHK-C-NEXT:    [[TMP62:%.*]] = bitcast i32* [[ATOMIC_TEMP146]] to i8*
// CHK-C-NEXT:    store i8 [[TMP61]], i8* [[TMP62]], align 1
// CHK-C-NEXT:    [[TMP63:%.*]] = trunc i32 [[TMP59]] to i8
// CHK-C-NEXT:    [[BF_LOAD147:%.*]] = load i8, i8* [[TMP62]], align 1
// CHK-C-NEXT:    [[BF_VALUE148:%.*]] = and i8 [[TMP63]], 1
// CHK-C-NEXT:    [[BF_SHL149:%.*]] = shl i8 [[BF_VALUE148]], 7
// CHK-C-NEXT:    [[BF_CLEAR150:%.*]] = and i8 [[BF_LOAD147]], 127
// CHK-C-NEXT:    [[BF_SET151:%.*]] = or i8 [[BF_CLEAR150]], [[BF_SHL149]]
// CHK-C-NEXT:    store i8 [[BF_SET151]], i8* [[TMP62]], align 1
// CHK-C-NEXT:    [[TMP64:%.*]] = load i8, i8* [[TMP62]], align 1
// CHK-C-NEXT:    [[TMP65:%.*]] = cmpxchg i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3), i8 [[TMP61]], i8 [[TMP64]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP66]] = extractvalue { i8, i1 } [[TMP65]], 0
// CHK-C-NEXT:    [[TMP67:%.*]] = extractvalue { i8, i1 } [[TMP65]], 1
// CHK-C-NEXT:    br i1 [[TMP67]], label [[ATOMIC_EXIT158]], label [[ATOMIC_CMP152]]
// CHK-C:       atomic_cmp152:
// CHK-C-NEXT:    [[TMP68:%.*]] = bitcast i32* [[ATOMIC_TEMP153]] to i8*
// CHK-C-NEXT:    store i8 [[TMP66]], i8* [[TMP68]], align 1
// CHK-C-NEXT:    [[BF_LOAD154:%.*]] = load i8, i8* [[TMP68]], align 1
// CHK-C-NEXT:    [[BF_ASHR155:%.*]] = ashr i8 [[BF_LOAD154]], 7
// CHK-C-NEXT:    [[BF_CAST156:%.*]] = sext i8 [[BF_ASHR155]] to i32
// CHK-C-NEXT:    [[CMP157:%.*]] = icmp slt i32 [[BF_CAST156]], [[TMP59]]
// CHK-C-NEXT:    br i1 [[CMP157]], label [[ATOMIC_CONT145]], label [[ATOMIC_EXIT158]]
// CHK-C:       atomic_exit158:
// CHK-C-NEXT:    [[TMP69:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD159:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS3:%.*]], %struct.BitFields3* @bfx3, i32 0, i32 0) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD159]], i32* [[ATOMIC_TEMP160]], align 4
// CHK-C-NEXT:    [[BF_LOAD161:%.*]] = load i32, i32* [[ATOMIC_TEMP160]], align 4
// CHK-C-NEXT:    [[BF_SHL162:%.*]] = shl i32 [[BF_LOAD161]], 7
// CHK-C-NEXT:    [[BF_ASHR163:%.*]] = ashr i32 [[BF_SHL162]], 18
// CHK-C-NEXT:    [[CMP164:%.*]] = icmp sgt i32 [[BF_ASHR163]], [[TMP69]]
// CHK-C-NEXT:    br i1 [[CMP164]], label [[ATOMIC_CONT165:%.*]], label [[ATOMIC_EXIT178:%.*]]
// CHK-C:       atomic_cont165:
// CHK-C-NEXT:    [[TMP70:%.*]] = phi i32 [ [[ATOMIC_LOAD159]], [[ATOMIC_EXIT158]] ], [ [[TMP73:%.*]], [[ATOMIC_CMP172:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP70]], i32* [[ATOMIC_TEMP166]], align 4
// CHK-C-NEXT:    [[BF_LOAD167:%.*]] = load i32, i32* [[ATOMIC_TEMP166]], align 4
// CHK-C-NEXT:    [[BF_VALUE168:%.*]] = and i32 [[TMP69]], 16383
// CHK-C-NEXT:    [[BF_SHL169:%.*]] = shl i32 [[BF_VALUE168]], 11
// CHK-C-NEXT:    [[BF_CLEAR170:%.*]] = and i32 [[BF_LOAD167]], -33552385
// CHK-C-NEXT:    [[BF_SET171:%.*]] = or i32 [[BF_CLEAR170]], [[BF_SHL169]]
// CHK-C-NEXT:    store i32 [[BF_SET171]], i32* [[ATOMIC_TEMP166]], align 4
// CHK-C-NEXT:    [[TMP71:%.*]] = load i32, i32* [[ATOMIC_TEMP166]], align 4
// CHK-C-NEXT:    [[TMP72:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0), i32 [[TMP70]], i32 [[TMP71]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP73]] = extractvalue { i32, i1 } [[TMP72]], 0
// CHK-C-NEXT:    [[TMP74:%.*]] = extractvalue { i32, i1 } [[TMP72]], 1
// CHK-C-NEXT:    br i1 [[TMP74]], label [[ATOMIC_EXIT178]], label [[ATOMIC_CMP172]]
// CHK-C:       atomic_cmp172:
// CHK-C-NEXT:    store i32 [[TMP73]], i32* [[ATOMIC_TEMP173]], align 4
// CHK-C-NEXT:    [[BF_LOAD174:%.*]] = load i32, i32* [[ATOMIC_TEMP173]], align 4
// CHK-C-NEXT:    [[BF_SHL175:%.*]] = shl i32 [[BF_LOAD174]], 7
// CHK-C-NEXT:    [[BF_ASHR176:%.*]] = ashr i32 [[BF_SHL175]], 18
// CHK-C-NEXT:    [[CMP177:%.*]] = icmp sgt i32 [[BF_ASHR176]], [[TMP69]]
// CHK-C-NEXT:    br i1 [[CMP177]], label [[ATOMIC_CONT165]], label [[ATOMIC_EXIT178]]
// CHK-C:       atomic_exit178:
// CHK-C-NEXT:    [[TMP75:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP76:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD179:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD179]], i32* [[ATOMIC_TEMP180]], align 4
// CHK-C-NEXT:    [[BF_LOAD181:%.*]] = load i32, i32* [[ATOMIC_TEMP180]], align 4
// CHK-C-NEXT:    [[BF_SHL182:%.*]] = shl i32 [[BF_LOAD181]], 7
// CHK-C-NEXT:    [[BF_ASHR183:%.*]] = ashr i32 [[BF_SHL182]], 18
// CHK-C-NEXT:    [[CMP184:%.*]] = icmp eq i32 [[BF_ASHR183]], [[TMP76]]
// CHK-C-NEXT:    br i1 [[CMP184]], label [[ATOMIC_CONT185:%.*]], label [[ATOMIC_EXIT198:%.*]]
// CHK-C:       atomic_cont185:
// CHK-C-NEXT:    [[TMP77:%.*]] = phi i32 [ [[ATOMIC_LOAD179]], [[ATOMIC_EXIT178]] ], [ [[TMP80:%.*]], [[ATOMIC_CMP192:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP77]], i32* [[ATOMIC_TEMP186]], align 4
// CHK-C-NEXT:    [[BF_LOAD187:%.*]] = load i32, i32* [[ATOMIC_TEMP186]], align 4
// CHK-C-NEXT:    [[BF_VALUE188:%.*]] = and i32 [[TMP75]], 16383
// CHK-C-NEXT:    [[BF_SHL189:%.*]] = shl i32 [[BF_VALUE188]], 11
// CHK-C-NEXT:    [[BF_CLEAR190:%.*]] = and i32 [[BF_LOAD187]], -33552385
// CHK-C-NEXT:    [[BF_SET191:%.*]] = or i32 [[BF_CLEAR190]], [[BF_SHL189]]
// CHK-C-NEXT:    store i32 [[BF_SET191]], i32* [[ATOMIC_TEMP186]], align 4
// CHK-C-NEXT:    [[TMP78:%.*]] = load i32, i32* [[ATOMIC_TEMP186]], align 4
// CHK-C-NEXT:    [[TMP79:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0), i32 [[TMP77]], i32 [[TMP78]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP80]] = extractvalue { i32, i1 } [[TMP79]], 0
// CHK-C-NEXT:    [[TMP81:%.*]] = extractvalue { i32, i1 } [[TMP79]], 1
// CHK-C-NEXT:    br i1 [[TMP81]], label [[ATOMIC_EXIT198]], label [[ATOMIC_CMP192]]
// CHK-C:       atomic_cmp192:
// CHK-C-NEXT:    store i32 [[TMP80]], i32* [[ATOMIC_TEMP193]], align 4
// CHK-C-NEXT:    [[BF_LOAD194:%.*]] = load i32, i32* [[ATOMIC_TEMP193]], align 4
// CHK-C-NEXT:    [[BF_SHL195:%.*]] = shl i32 [[BF_LOAD194]], 7
// CHK-C-NEXT:    [[BF_ASHR196:%.*]] = ashr i32 [[BF_SHL195]], 18
// CHK-C-NEXT:    [[CMP197:%.*]] = icmp eq i32 [[BF_ASHR196]], [[TMP76]]
// CHK-C-NEXT:    br i1 [[CMP197]], label [[ATOMIC_CONT185]], label [[ATOMIC_EXIT198]]
// CHK-C:       atomic_exit198:
// CHK-C-NEXT:    [[TMP82:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD199:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD199]], i32* [[ATOMIC_TEMP200]], align 4
// CHK-C-NEXT:    [[BF_LOAD201:%.*]] = load i32, i32* [[ATOMIC_TEMP200]], align 4
// CHK-C-NEXT:    [[BF_SHL202:%.*]] = shl i32 [[BF_LOAD201]], 7
// CHK-C-NEXT:    [[BF_ASHR203:%.*]] = ashr i32 [[BF_SHL202]], 18
// CHK-C-NEXT:    [[CMP204:%.*]] = icmp slt i32 [[BF_ASHR203]], [[TMP82]]
// CHK-C-NEXT:    br i1 [[CMP204]], label [[ATOMIC_CONT205:%.*]], label [[ATOMIC_EXIT218:%.*]]
// CHK-C:       atomic_cont205:
// CHK-C-NEXT:    [[TMP83:%.*]] = phi i32 [ [[ATOMIC_LOAD199]], [[ATOMIC_EXIT198]] ], [ [[TMP86:%.*]], [[ATOMIC_CMP212:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP83]], i32* [[ATOMIC_TEMP206]], align 4
// CHK-C-NEXT:    [[BF_LOAD207:%.*]] = load i32, i32* [[ATOMIC_TEMP206]], align 4
// CHK-C-NEXT:    [[BF_VALUE208:%.*]] = and i32 [[TMP82]], 16383
// CHK-C-NEXT:    [[BF_SHL209:%.*]] = shl i32 [[BF_VALUE208]], 11
// CHK-C-NEXT:    [[BF_CLEAR210:%.*]] = and i32 [[BF_LOAD207]], -33552385
// CHK-C-NEXT:    [[BF_SET211:%.*]] = or i32 [[BF_CLEAR210]], [[BF_SHL209]]
// CHK-C-NEXT:    store i32 [[BF_SET211]], i32* [[ATOMIC_TEMP206]], align 4
// CHK-C-NEXT:    [[TMP84:%.*]] = load i32, i32* [[ATOMIC_TEMP206]], align 4
// CHK-C-NEXT:    [[TMP85:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0), i32 [[TMP83]], i32 [[TMP84]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP86]] = extractvalue { i32, i1 } [[TMP85]], 0
// CHK-C-NEXT:    [[TMP87:%.*]] = extractvalue { i32, i1 } [[TMP85]], 1
// CHK-C-NEXT:    br i1 [[TMP87]], label [[ATOMIC_EXIT218]], label [[ATOMIC_CMP212]]
// CHK-C:       atomic_cmp212:
// CHK-C-NEXT:    store i32 [[TMP86]], i32* [[ATOMIC_TEMP213]], align 4
// CHK-C-NEXT:    [[BF_LOAD214:%.*]] = load i32, i32* [[ATOMIC_TEMP213]], align 4
// CHK-C-NEXT:    [[BF_SHL215:%.*]] = shl i32 [[BF_LOAD214]], 7
// CHK-C-NEXT:    [[BF_ASHR216:%.*]] = ashr i32 [[BF_SHL215]], 18
// CHK-C-NEXT:    [[CMP217:%.*]] = icmp slt i32 [[BF_ASHR216]], [[TMP82]]
// CHK-C-NEXT:    br i1 [[CMP217]], label [[ATOMIC_CONT205]], label [[ATOMIC_EXIT218]]
// CHK-C:       atomic_exit218:
// CHK-C-NEXT:    [[TMP88:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD219:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD219]], i64* [[ATOMIC_TEMP220]], align 8
// CHK-C-NEXT:    [[BF_LOAD221:%.*]] = load i64, i64* [[ATOMIC_TEMP220]], align 8
// CHK-C-NEXT:    [[BF_SHL222:%.*]] = shl i64 [[BF_LOAD221]], 47
// CHK-C-NEXT:    [[BF_ASHR223:%.*]] = ashr i64 [[BF_SHL222]], 63
// CHK-C-NEXT:    [[BF_CAST224:%.*]] = trunc i64 [[BF_ASHR223]] to i32
// CHK-C-NEXT:    [[CMP225:%.*]] = icmp sgt i32 [[BF_CAST224]], [[TMP88]]
// CHK-C-NEXT:    br i1 [[CMP225]], label [[ATOMIC_CONT226:%.*]], label [[ATOMIC_EXIT240:%.*]]
// CHK-C:       atomic_cont226:
// CHK-C-NEXT:    [[TMP89:%.*]] = phi i64 [ [[ATOMIC_LOAD219]], [[ATOMIC_EXIT218]] ], [ [[TMP93:%.*]], [[ATOMIC_CMP233:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP89]], i64* [[ATOMIC_TEMP227]], align 8
// CHK-C-NEXT:    [[TMP90:%.*]] = zext i32 [[TMP88]] to i64
// CHK-C-NEXT:    [[BF_LOAD228:%.*]] = load i64, i64* [[ATOMIC_TEMP227]], align 8
// CHK-C-NEXT:    [[BF_VALUE229:%.*]] = and i64 [[TMP90]], 1
// CHK-C-NEXT:    [[BF_SHL230:%.*]] = shl i64 [[BF_VALUE229]], 16
// CHK-C-NEXT:    [[BF_CLEAR231:%.*]] = and i64 [[BF_LOAD228]], -65537
// CHK-C-NEXT:    [[BF_SET232:%.*]] = or i64 [[BF_CLEAR231]], [[BF_SHL230]]
// CHK-C-NEXT:    store i64 [[BF_SET232]], i64* [[ATOMIC_TEMP227]], align 8
// CHK-C-NEXT:    [[TMP91:%.*]] = load i64, i64* [[ATOMIC_TEMP227]], align 8
// CHK-C-NEXT:    [[TMP92:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP89]], i64 [[TMP91]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP93]] = extractvalue { i64, i1 } [[TMP92]], 0
// CHK-C-NEXT:    [[TMP94:%.*]] = extractvalue { i64, i1 } [[TMP92]], 1
// CHK-C-NEXT:    br i1 [[TMP94]], label [[ATOMIC_EXIT240]], label [[ATOMIC_CMP233]]
// CHK-C:       atomic_cmp233:
// CHK-C-NEXT:    store i64 [[TMP93]], i64* [[ATOMIC_TEMP234]], align 8
// CHK-C-NEXT:    [[BF_LOAD235:%.*]] = load i64, i64* [[ATOMIC_TEMP234]], align 8
// CHK-C-NEXT:    [[BF_SHL236:%.*]] = shl i64 [[BF_LOAD235]], 47
// CHK-C-NEXT:    [[BF_ASHR237:%.*]] = ashr i64 [[BF_SHL236]], 63
// CHK-C-NEXT:    [[BF_CAST238:%.*]] = trunc i64 [[BF_ASHR237]] to i32
// CHK-C-NEXT:    [[CMP239:%.*]] = icmp sgt i32 [[BF_CAST238]], [[TMP88]]
// CHK-C-NEXT:    br i1 [[CMP239]], label [[ATOMIC_CONT226]], label [[ATOMIC_EXIT240]]
// CHK-C:       atomic_exit240:
// CHK-C-NEXT:    [[TMP95:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP96:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD241:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD241]], i64* [[ATOMIC_TEMP242]], align 8
// CHK-C-NEXT:    [[BF_LOAD243:%.*]] = load i64, i64* [[ATOMIC_TEMP242]], align 8
// CHK-C-NEXT:    [[BF_SHL244:%.*]] = shl i64 [[BF_LOAD243]], 47
// CHK-C-NEXT:    [[BF_ASHR245:%.*]] = ashr i64 [[BF_SHL244]], 63
// CHK-C-NEXT:    [[BF_CAST246:%.*]] = trunc i64 [[BF_ASHR245]] to i32
// CHK-C-NEXT:    [[CMP247:%.*]] = icmp eq i32 [[BF_CAST246]], [[TMP96]]
// CHK-C-NEXT:    br i1 [[CMP247]], label [[ATOMIC_CONT248:%.*]], label [[ATOMIC_EXIT262:%.*]]
// CHK-C:       atomic_cont248:
// CHK-C-NEXT:    [[TMP97:%.*]] = phi i64 [ [[ATOMIC_LOAD241]], [[ATOMIC_EXIT240]] ], [ [[TMP101:%.*]], [[ATOMIC_CMP255:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP97]], i64* [[ATOMIC_TEMP249]], align 8
// CHK-C-NEXT:    [[TMP98:%.*]] = zext i32 [[TMP95]] to i64
// CHK-C-NEXT:    [[BF_LOAD250:%.*]] = load i64, i64* [[ATOMIC_TEMP249]], align 8
// CHK-C-NEXT:    [[BF_VALUE251:%.*]] = and i64 [[TMP98]], 1
// CHK-C-NEXT:    [[BF_SHL252:%.*]] = shl i64 [[BF_VALUE251]], 16
// CHK-C-NEXT:    [[BF_CLEAR253:%.*]] = and i64 [[BF_LOAD250]], -65537
// CHK-C-NEXT:    [[BF_SET254:%.*]] = or i64 [[BF_CLEAR253]], [[BF_SHL252]]
// CHK-C-NEXT:    store i64 [[BF_SET254]], i64* [[ATOMIC_TEMP249]], align 8
// CHK-C-NEXT:    [[TMP99:%.*]] = load i64, i64* [[ATOMIC_TEMP249]], align 8
// CHK-C-NEXT:    [[TMP100:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP97]], i64 [[TMP99]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP101]] = extractvalue { i64, i1 } [[TMP100]], 0
// CHK-C-NEXT:    [[TMP102:%.*]] = extractvalue { i64, i1 } [[TMP100]], 1
// CHK-C-NEXT:    br i1 [[TMP102]], label [[ATOMIC_EXIT262]], label [[ATOMIC_CMP255]]
// CHK-C:       atomic_cmp255:
// CHK-C-NEXT:    store i64 [[TMP101]], i64* [[ATOMIC_TEMP256]], align 8
// CHK-C-NEXT:    [[BF_LOAD257:%.*]] = load i64, i64* [[ATOMIC_TEMP256]], align 8
// CHK-C-NEXT:    [[BF_SHL258:%.*]] = shl i64 [[BF_LOAD257]], 47
// CHK-C-NEXT:    [[BF_ASHR259:%.*]] = ashr i64 [[BF_SHL258]], 63
// CHK-C-NEXT:    [[BF_CAST260:%.*]] = trunc i64 [[BF_ASHR259]] to i32
// CHK-C-NEXT:    [[CMP261:%.*]] = icmp eq i32 [[BF_CAST260]], [[TMP96]]
// CHK-C-NEXT:    br i1 [[CMP261]], label [[ATOMIC_CONT248]], label [[ATOMIC_EXIT262]]
// CHK-C:       atomic_exit262:
// CHK-C-NEXT:    [[TMP103:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD263:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD263]], i64* [[ATOMIC_TEMP264]], align 8
// CHK-C-NEXT:    [[BF_LOAD265:%.*]] = load i64, i64* [[ATOMIC_TEMP264]], align 8
// CHK-C-NEXT:    [[BF_SHL266:%.*]] = shl i64 [[BF_LOAD265]], 47
// CHK-C-NEXT:    [[BF_ASHR267:%.*]] = ashr i64 [[BF_SHL266]], 63
// CHK-C-NEXT:    [[BF_CAST268:%.*]] = trunc i64 [[BF_ASHR267]] to i32
// CHK-C-NEXT:    [[CMP269:%.*]] = icmp slt i32 [[BF_CAST268]], [[TMP103]]
// CHK-C-NEXT:    br i1 [[CMP269]], label [[ATOMIC_CONT270:%.*]], label [[ATOMIC_EXIT284:%.*]]
// CHK-C:       atomic_cont270:
// CHK-C-NEXT:    [[TMP104:%.*]] = phi i64 [ [[ATOMIC_LOAD263]], [[ATOMIC_EXIT262]] ], [ [[TMP108:%.*]], [[ATOMIC_CMP277:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP104]], i64* [[ATOMIC_TEMP271]], align 8
// CHK-C-NEXT:    [[TMP105:%.*]] = zext i32 [[TMP103]] to i64
// CHK-C-NEXT:    [[BF_LOAD272:%.*]] = load i64, i64* [[ATOMIC_TEMP271]], align 8
// CHK-C-NEXT:    [[BF_VALUE273:%.*]] = and i64 [[TMP105]], 1
// CHK-C-NEXT:    [[BF_SHL274:%.*]] = shl i64 [[BF_VALUE273]], 16
// CHK-C-NEXT:    [[BF_CLEAR275:%.*]] = and i64 [[BF_LOAD272]], -65537
// CHK-C-NEXT:    [[BF_SET276:%.*]] = or i64 [[BF_CLEAR275]], [[BF_SHL274]]
// CHK-C-NEXT:    store i64 [[BF_SET276]], i64* [[ATOMIC_TEMP271]], align 8
// CHK-C-NEXT:    [[TMP106:%.*]] = load i64, i64* [[ATOMIC_TEMP271]], align 8
// CHK-C-NEXT:    [[TMP107:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP104]], i64 [[TMP106]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP108]] = extractvalue { i64, i1 } [[TMP107]], 0
// CHK-C-NEXT:    [[TMP109:%.*]] = extractvalue { i64, i1 } [[TMP107]], 1
// CHK-C-NEXT:    br i1 [[TMP109]], label [[ATOMIC_EXIT284]], label [[ATOMIC_CMP277]]
// CHK-C:       atomic_cmp277:
// CHK-C-NEXT:    store i64 [[TMP108]], i64* [[ATOMIC_TEMP278]], align 8
// CHK-C-NEXT:    [[BF_LOAD279:%.*]] = load i64, i64* [[ATOMIC_TEMP278]], align 8
// CHK-C-NEXT:    [[BF_SHL280:%.*]] = shl i64 [[BF_LOAD279]], 47
// CHK-C-NEXT:    [[BF_ASHR281:%.*]] = ashr i64 [[BF_SHL280]], 63
// CHK-C-NEXT:    [[BF_CAST282:%.*]] = trunc i64 [[BF_ASHR281]] to i32
// CHK-C-NEXT:    [[CMP283:%.*]] = icmp slt i32 [[BF_CAST282]], [[TMP103]]
// CHK-C-NEXT:    br i1 [[CMP283]], label [[ATOMIC_CONT270]], label [[ATOMIC_EXIT284]]
// CHK-C:       atomic_exit284:
// CHK-C-NEXT:    [[TMP110:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[CONV:%.*]] = sext i32 [[TMP110]] to i64
// CHK-C-NEXT:    [[ATOMIC_LOAD285:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD285]], i64* [[ATOMIC_TEMP286]], align 8
// CHK-C-NEXT:    [[BF_LOAD287:%.*]] = load i64, i64* [[ATOMIC_TEMP286]], align 8
// CHK-C-NEXT:    [[BF_SHL288:%.*]] = shl i64 [[BF_LOAD287]], 40
// CHK-C-NEXT:    [[BF_ASHR289:%.*]] = ashr i64 [[BF_SHL288]], 57
// CHK-C-NEXT:    [[CMP290:%.*]] = icmp sgt i64 [[BF_ASHR289]], [[CONV]]
// CHK-C-NEXT:    br i1 [[CMP290]], label [[ATOMIC_CONT291:%.*]], label [[ATOMIC_EXIT304:%.*]]
// CHK-C:       atomic_cont291:
// CHK-C-NEXT:    [[TMP111:%.*]] = phi i64 [ [[ATOMIC_LOAD285]], [[ATOMIC_EXIT284]] ], [ [[TMP114:%.*]], [[ATOMIC_CMP298:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP111]], i64* [[ATOMIC_TEMP292]], align 8
// CHK-C-NEXT:    [[BF_LOAD293:%.*]] = load i64, i64* [[ATOMIC_TEMP292]], align 8
// CHK-C-NEXT:    [[BF_VALUE294:%.*]] = and i64 [[CONV]], 127
// CHK-C-NEXT:    [[BF_SHL295:%.*]] = shl i64 [[BF_VALUE294]], 17
// CHK-C-NEXT:    [[BF_CLEAR296:%.*]] = and i64 [[BF_LOAD293]], -16646145
// CHK-C-NEXT:    [[BF_SET297:%.*]] = or i64 [[BF_CLEAR296]], [[BF_SHL295]]
// CHK-C-NEXT:    store i64 [[BF_SET297]], i64* [[ATOMIC_TEMP292]], align 8
// CHK-C-NEXT:    [[TMP112:%.*]] = load i64, i64* [[ATOMIC_TEMP292]], align 8
// CHK-C-NEXT:    [[TMP113:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP111]], i64 [[TMP112]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP114]] = extractvalue { i64, i1 } [[TMP113]], 0
// CHK-C-NEXT:    [[TMP115:%.*]] = extractvalue { i64, i1 } [[TMP113]], 1
// CHK-C-NEXT:    br i1 [[TMP115]], label [[ATOMIC_EXIT304]], label [[ATOMIC_CMP298]]
// CHK-C:       atomic_cmp298:
// CHK-C-NEXT:    store i64 [[TMP114]], i64* [[ATOMIC_TEMP299]], align 8
// CHK-C-NEXT:    [[BF_LOAD300:%.*]] = load i64, i64* [[ATOMIC_TEMP299]], align 8
// CHK-C-NEXT:    [[BF_SHL301:%.*]] = shl i64 [[BF_LOAD300]], 40
// CHK-C-NEXT:    [[BF_ASHR302:%.*]] = ashr i64 [[BF_SHL301]], 57
// CHK-C-NEXT:    [[CMP303:%.*]] = icmp sgt i64 [[BF_ASHR302]], [[CONV]]
// CHK-C-NEXT:    br i1 [[CMP303]], label [[ATOMIC_CONT291]], label [[ATOMIC_EXIT304]]
// CHK-C:       atomic_exit304:
// CHK-C-NEXT:    [[TMP116:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[CONV305:%.*]] = sext i32 [[TMP116]] to i64
// CHK-C-NEXT:    [[TMP117:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[CONV306:%.*]] = sext i32 [[TMP117]] to i64
// CHK-C-NEXT:    [[ATOMIC_LOAD307:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD307]], i64* [[ATOMIC_TEMP308]], align 8
// CHK-C-NEXT:    [[BF_LOAD309:%.*]] = load i64, i64* [[ATOMIC_TEMP308]], align 8
// CHK-C-NEXT:    [[BF_SHL310:%.*]] = shl i64 [[BF_LOAD309]], 40
// CHK-C-NEXT:    [[BF_ASHR311:%.*]] = ashr i64 [[BF_SHL310]], 57
// CHK-C-NEXT:    [[CMP312:%.*]] = icmp eq i64 [[BF_ASHR311]], [[CONV306]]
// CHK-C-NEXT:    br i1 [[CMP312]], label [[ATOMIC_CONT313:%.*]], label [[ATOMIC_EXIT326:%.*]]
// CHK-C:       atomic_cont313:
// CHK-C-NEXT:    [[TMP118:%.*]] = phi i64 [ [[ATOMIC_LOAD307]], [[ATOMIC_EXIT304]] ], [ [[TMP121:%.*]], [[ATOMIC_CMP320:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP118]], i64* [[ATOMIC_TEMP314]], align 8
// CHK-C-NEXT:    [[BF_LOAD315:%.*]] = load i64, i64* [[ATOMIC_TEMP314]], align 8
// CHK-C-NEXT:    [[BF_VALUE316:%.*]] = and i64 [[CONV305]], 127
// CHK-C-NEXT:    [[BF_SHL317:%.*]] = shl i64 [[BF_VALUE316]], 17
// CHK-C-NEXT:    [[BF_CLEAR318:%.*]] = and i64 [[BF_LOAD315]], -16646145
// CHK-C-NEXT:    [[BF_SET319:%.*]] = or i64 [[BF_CLEAR318]], [[BF_SHL317]]
// CHK-C-NEXT:    store i64 [[BF_SET319]], i64* [[ATOMIC_TEMP314]], align 8
// CHK-C-NEXT:    [[TMP119:%.*]] = load i64, i64* [[ATOMIC_TEMP314]], align 8
// CHK-C-NEXT:    [[TMP120:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP118]], i64 [[TMP119]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP121]] = extractvalue { i64, i1 } [[TMP120]], 0
// CHK-C-NEXT:    [[TMP122:%.*]] = extractvalue { i64, i1 } [[TMP120]], 1
// CHK-C-NEXT:    br i1 [[TMP122]], label [[ATOMIC_EXIT326]], label [[ATOMIC_CMP320]]
// CHK-C:       atomic_cmp320:
// CHK-C-NEXT:    store i64 [[TMP121]], i64* [[ATOMIC_TEMP321]], align 8
// CHK-C-NEXT:    [[BF_LOAD322:%.*]] = load i64, i64* [[ATOMIC_TEMP321]], align 8
// CHK-C-NEXT:    [[BF_SHL323:%.*]] = shl i64 [[BF_LOAD322]], 40
// CHK-C-NEXT:    [[BF_ASHR324:%.*]] = ashr i64 [[BF_SHL323]], 57
// CHK-C-NEXT:    [[CMP325:%.*]] = icmp eq i64 [[BF_ASHR324]], [[CONV306]]
// CHK-C-NEXT:    br i1 [[CMP325]], label [[ATOMIC_CONT313]], label [[ATOMIC_EXIT326]]
// CHK-C:       atomic_exit326:
// CHK-C-NEXT:    [[TMP123:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[CONV327:%.*]] = sext i32 [[TMP123]] to i64
// CHK-C-NEXT:    [[ATOMIC_LOAD328:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD328]], i64* [[ATOMIC_TEMP329]], align 8
// CHK-C-NEXT:    [[BF_LOAD330:%.*]] = load i64, i64* [[ATOMIC_TEMP329]], align 8
// CHK-C-NEXT:    [[BF_SHL331:%.*]] = shl i64 [[BF_LOAD330]], 40
// CHK-C-NEXT:    [[BF_ASHR332:%.*]] = ashr i64 [[BF_SHL331]], 57
// CHK-C-NEXT:    [[CMP333:%.*]] = icmp slt i64 [[BF_ASHR332]], [[CONV327]]
// CHK-C-NEXT:    br i1 [[CMP333]], label [[ATOMIC_CONT334:%.*]], label [[ATOMIC_EXIT347:%.*]]
// CHK-C:       atomic_cont334:
// CHK-C-NEXT:    [[TMP124:%.*]] = phi i64 [ [[ATOMIC_LOAD328]], [[ATOMIC_EXIT326]] ], [ [[TMP127:%.*]], [[ATOMIC_CMP341:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP124]], i64* [[ATOMIC_TEMP335]], align 8
// CHK-C-NEXT:    [[BF_LOAD336:%.*]] = load i64, i64* [[ATOMIC_TEMP335]], align 8
// CHK-C-NEXT:    [[BF_VALUE337:%.*]] = and i64 [[CONV327]], 127
// CHK-C-NEXT:    [[BF_SHL338:%.*]] = shl i64 [[BF_VALUE337]], 17
// CHK-C-NEXT:    [[BF_CLEAR339:%.*]] = and i64 [[BF_LOAD336]], -16646145
// CHK-C-NEXT:    [[BF_SET340:%.*]] = or i64 [[BF_CLEAR339]], [[BF_SHL338]]
// CHK-C-NEXT:    store i64 [[BF_SET340]], i64* [[ATOMIC_TEMP335]], align 8
// CHK-C-NEXT:    [[TMP125:%.*]] = load i64, i64* [[ATOMIC_TEMP335]], align 8
// CHK-C-NEXT:    [[TMP126:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP124]], i64 [[TMP125]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP127]] = extractvalue { i64, i1 } [[TMP126]], 0
// CHK-C-NEXT:    [[TMP128:%.*]] = extractvalue { i64, i1 } [[TMP126]], 1
// CHK-C-NEXT:    br i1 [[TMP128]], label [[ATOMIC_EXIT347]], label [[ATOMIC_CMP341]]
// CHK-C:       atomic_cmp341:
// CHK-C-NEXT:    store i64 [[TMP127]], i64* [[ATOMIC_TEMP342]], align 8
// CHK-C-NEXT:    [[BF_LOAD343:%.*]] = load i64, i64* [[ATOMIC_TEMP342]], align 8
// CHK-C-NEXT:    [[BF_SHL344:%.*]] = shl i64 [[BF_LOAD343]], 40
// CHK-C-NEXT:    [[BF_ASHR345:%.*]] = ashr i64 [[BF_SHL344]], 57
// CHK-C-NEXT:    [[CMP346:%.*]] = icmp slt i64 [[BF_ASHR345]], [[CONV327]]
// CHK-C-NEXT:    br i1 [[CMP346]], label [[ATOMIC_CONT334]], label [[ATOMIC_EXIT347]]
// CHK-C:       atomic_exit347:
// CHK-C-NEXT:    [[TMP129:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD348:%.*]] = load atomic i8, i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED:%.*]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2) monotonic, align 1
// CHK-C-NEXT:    [[TMP130:%.*]] = bitcast i32* [[ATOMIC_TEMP349]] to i8*
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD348]], i8* [[TMP130]], align 1
// CHK-C-NEXT:    [[BF_LOAD350:%.*]] = load i8, i8* [[TMP130]], align 1
// CHK-C-NEXT:    [[BF_SHL351:%.*]] = shl i8 [[BF_LOAD350]], 7
// CHK-C-NEXT:    [[BF_ASHR352:%.*]] = ashr i8 [[BF_SHL351]], 7
// CHK-C-NEXT:    [[BF_CAST353:%.*]] = sext i8 [[BF_ASHR352]] to i32
// CHK-C-NEXT:    [[CMP354:%.*]] = icmp sgt i32 [[BF_CAST353]], [[TMP129]]
// CHK-C-NEXT:    br i1 [[CMP354]], label [[ATOMIC_CONT355:%.*]], label [[ATOMIC_EXIT368:%.*]]
// CHK-C:       atomic_cont355:
// CHK-C-NEXT:    [[TMP131:%.*]] = phi i8 [ [[ATOMIC_LOAD348]], [[ATOMIC_EXIT347]] ], [ [[TMP136:%.*]], [[ATOMIC_CMP361:%.*]] ]
// CHK-C-NEXT:    [[TMP132:%.*]] = bitcast i32* [[ATOMIC_TEMP356]] to i8*
// CHK-C-NEXT:    store i8 [[TMP131]], i8* [[TMP132]], align 1
// CHK-C-NEXT:    [[TMP133:%.*]] = trunc i32 [[TMP129]] to i8
// CHK-C-NEXT:    [[BF_LOAD357:%.*]] = load i8, i8* [[TMP132]], align 1
// CHK-C-NEXT:    [[BF_VALUE358:%.*]] = and i8 [[TMP133]], 1
// CHK-C-NEXT:    [[BF_CLEAR359:%.*]] = and i8 [[BF_LOAD357]], -2
// CHK-C-NEXT:    [[BF_SET360:%.*]] = or i8 [[BF_CLEAR359]], [[BF_VALUE358]]
// CHK-C-NEXT:    store i8 [[BF_SET360]], i8* [[TMP132]], align 1
// CHK-C-NEXT:    [[TMP134:%.*]] = load i8, i8* [[TMP132]], align 1
// CHK-C-NEXT:    [[TMP135:%.*]] = cmpxchg i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2), i8 [[TMP131]], i8 [[TMP134]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP136]] = extractvalue { i8, i1 } [[TMP135]], 0
// CHK-C-NEXT:    [[TMP137:%.*]] = extractvalue { i8, i1 } [[TMP135]], 1
// CHK-C-NEXT:    br i1 [[TMP137]], label [[ATOMIC_EXIT368]], label [[ATOMIC_CMP361]]
// CHK-C:       atomic_cmp361:
// CHK-C-NEXT:    [[TMP138:%.*]] = bitcast i32* [[ATOMIC_TEMP362]] to i8*
// CHK-C-NEXT:    store i8 [[TMP136]], i8* [[TMP138]], align 1
// CHK-C-NEXT:    [[BF_LOAD363:%.*]] = load i8, i8* [[TMP138]], align 1
// CHK-C-NEXT:    [[BF_SHL364:%.*]] = shl i8 [[BF_LOAD363]], 7
// CHK-C-NEXT:    [[BF_ASHR365:%.*]] = ashr i8 [[BF_SHL364]], 7
// CHK-C-NEXT:    [[BF_CAST366:%.*]] = sext i8 [[BF_ASHR365]] to i32
// CHK-C-NEXT:    [[CMP367:%.*]] = icmp sgt i32 [[BF_CAST366]], [[TMP129]]
// CHK-C-NEXT:    br i1 [[CMP367]], label [[ATOMIC_CONT355]], label [[ATOMIC_EXIT368]]
// CHK-C:       atomic_exit368:
// CHK-C-NEXT:    [[TMP139:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP140:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD369:%.*]] = load atomic i8, i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2) monotonic, align 1
// CHK-C-NEXT:    [[TMP141:%.*]] = bitcast i32* [[ATOMIC_TEMP370]] to i8*
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD369]], i8* [[TMP141]], align 1
// CHK-C-NEXT:    [[BF_LOAD371:%.*]] = load i8, i8* [[TMP141]], align 1
// CHK-C-NEXT:    [[BF_SHL372:%.*]] = shl i8 [[BF_LOAD371]], 7
// CHK-C-NEXT:    [[BF_ASHR373:%.*]] = ashr i8 [[BF_SHL372]], 7
// CHK-C-NEXT:    [[BF_CAST374:%.*]] = sext i8 [[BF_ASHR373]] to i32
// CHK-C-NEXT:    [[CMP375:%.*]] = icmp eq i32 [[BF_CAST374]], [[TMP140]]
// CHK-C-NEXT:    br i1 [[CMP375]], label [[ATOMIC_CONT376:%.*]], label [[ATOMIC_EXIT389:%.*]]
// CHK-C:       atomic_cont376:
// CHK-C-NEXT:    [[TMP142:%.*]] = phi i8 [ [[ATOMIC_LOAD369]], [[ATOMIC_EXIT368]] ], [ [[TMP147:%.*]], [[ATOMIC_CMP382:%.*]] ]
// CHK-C-NEXT:    [[TMP143:%.*]] = bitcast i32* [[ATOMIC_TEMP377]] to i8*
// CHK-C-NEXT:    store i8 [[TMP142]], i8* [[TMP143]], align 1
// CHK-C-NEXT:    [[TMP144:%.*]] = trunc i32 [[TMP139]] to i8
// CHK-C-NEXT:    [[BF_LOAD378:%.*]] = load i8, i8* [[TMP143]], align 1
// CHK-C-NEXT:    [[BF_VALUE379:%.*]] = and i8 [[TMP144]], 1
// CHK-C-NEXT:    [[BF_CLEAR380:%.*]] = and i8 [[BF_LOAD378]], -2
// CHK-C-NEXT:    [[BF_SET381:%.*]] = or i8 [[BF_CLEAR380]], [[BF_VALUE379]]
// CHK-C-NEXT:    store i8 [[BF_SET381]], i8* [[TMP143]], align 1
// CHK-C-NEXT:    [[TMP145:%.*]] = load i8, i8* [[TMP143]], align 1
// CHK-C-NEXT:    [[TMP146:%.*]] = cmpxchg i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2), i8 [[TMP142]], i8 [[TMP145]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP147]] = extractvalue { i8, i1 } [[TMP146]], 0
// CHK-C-NEXT:    [[TMP148:%.*]] = extractvalue { i8, i1 } [[TMP146]], 1
// CHK-C-NEXT:    br i1 [[TMP148]], label [[ATOMIC_EXIT389]], label [[ATOMIC_CMP382]]
// CHK-C:       atomic_cmp382:
// CHK-C-NEXT:    [[TMP149:%.*]] = bitcast i32* [[ATOMIC_TEMP383]] to i8*
// CHK-C-NEXT:    store i8 [[TMP147]], i8* [[TMP149]], align 1
// CHK-C-NEXT:    [[BF_LOAD384:%.*]] = load i8, i8* [[TMP149]], align 1
// CHK-C-NEXT:    [[BF_SHL385:%.*]] = shl i8 [[BF_LOAD384]], 7
// CHK-C-NEXT:    [[BF_ASHR386:%.*]] = ashr i8 [[BF_SHL385]], 7
// CHK-C-NEXT:    [[BF_CAST387:%.*]] = sext i8 [[BF_ASHR386]] to i32
// CHK-C-NEXT:    [[CMP388:%.*]] = icmp eq i32 [[BF_CAST387]], [[TMP140]]
// CHK-C-NEXT:    br i1 [[CMP388]], label [[ATOMIC_CONT376]], label [[ATOMIC_EXIT389]]
// CHK-C:       atomic_exit389:
// CHK-C-NEXT:    [[TMP150:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD390:%.*]] = load atomic i8, i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2) monotonic, align 1
// CHK-C-NEXT:    [[TMP151:%.*]] = bitcast i32* [[ATOMIC_TEMP391]] to i8*
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD390]], i8* [[TMP151]], align 1
// CHK-C-NEXT:    [[BF_LOAD392:%.*]] = load i8, i8* [[TMP151]], align 1
// CHK-C-NEXT:    [[BF_SHL393:%.*]] = shl i8 [[BF_LOAD392]], 7
// CHK-C-NEXT:    [[BF_ASHR394:%.*]] = ashr i8 [[BF_SHL393]], 7
// CHK-C-NEXT:    [[BF_CAST395:%.*]] = sext i8 [[BF_ASHR394]] to i32
// CHK-C-NEXT:    [[CMP396:%.*]] = icmp slt i32 [[BF_CAST395]], [[TMP150]]
// CHK-C-NEXT:    br i1 [[CMP396]], label [[ATOMIC_CONT397:%.*]], label [[ATOMIC_EXIT410:%.*]]
// CHK-C:       atomic_cont397:
// CHK-C-NEXT:    [[TMP152:%.*]] = phi i8 [ [[ATOMIC_LOAD390]], [[ATOMIC_EXIT389]] ], [ [[TMP157:%.*]], [[ATOMIC_CMP403:%.*]] ]
// CHK-C-NEXT:    [[TMP153:%.*]] = bitcast i32* [[ATOMIC_TEMP398]] to i8*
// CHK-C-NEXT:    store i8 [[TMP152]], i8* [[TMP153]], align 1
// CHK-C-NEXT:    [[TMP154:%.*]] = trunc i32 [[TMP150]] to i8
// CHK-C-NEXT:    [[BF_LOAD399:%.*]] = load i8, i8* [[TMP153]], align 1
// CHK-C-NEXT:    [[BF_VALUE400:%.*]] = and i8 [[TMP154]], 1
// CHK-C-NEXT:    [[BF_CLEAR401:%.*]] = and i8 [[BF_LOAD399]], -2
// CHK-C-NEXT:    [[BF_SET402:%.*]] = or i8 [[BF_CLEAR401]], [[BF_VALUE400]]
// CHK-C-NEXT:    store i8 [[BF_SET402]], i8* [[TMP153]], align 1
// CHK-C-NEXT:    [[TMP155:%.*]] = load i8, i8* [[TMP153]], align 1
// CHK-C-NEXT:    [[TMP156:%.*]] = cmpxchg i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2), i8 [[TMP152]], i8 [[TMP155]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP157]] = extractvalue { i8, i1 } [[TMP156]], 0
// CHK-C-NEXT:    [[TMP158:%.*]] = extractvalue { i8, i1 } [[TMP156]], 1
// CHK-C-NEXT:    br i1 [[TMP158]], label [[ATOMIC_EXIT410]], label [[ATOMIC_CMP403]]
// CHK-C:       atomic_cmp403:
// CHK-C-NEXT:    [[TMP159:%.*]] = bitcast i32* [[ATOMIC_TEMP404]] to i8*
// CHK-C-NEXT:    store i8 [[TMP157]], i8* [[TMP159]], align 1
// CHK-C-NEXT:    [[BF_LOAD405:%.*]] = load i8, i8* [[TMP159]], align 1
// CHK-C-NEXT:    [[BF_SHL406:%.*]] = shl i8 [[BF_LOAD405]], 7
// CHK-C-NEXT:    [[BF_ASHR407:%.*]] = ashr i8 [[BF_SHL406]], 7
// CHK-C-NEXT:    [[BF_CAST408:%.*]] = sext i8 [[BF_ASHR407]] to i32
// CHK-C-NEXT:    [[CMP409:%.*]] = icmp slt i32 [[BF_CAST408]], [[TMP150]]
// CHK-C-NEXT:    br i1 [[CMP409]], label [[ATOMIC_CONT397]], label [[ATOMIC_EXIT410]]
// CHK-C:       atomic_exit410:
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z13test_bitfieldv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP1:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP3:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP9:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP15:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP21:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP28:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP34:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP40:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP47:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP52:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP59:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP65:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP70:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP77:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP83:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP88:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP95:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP101:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP106:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP113:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP120:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP126:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP133:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP140:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP146:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP153:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP160:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP166:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP173:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP180:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP186:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP193:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP200:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP206:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP213:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP220:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP227:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP234:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP242:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP249:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP256:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP264:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP271:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP278:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP286:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP292:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP299:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP308:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP314:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP321:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP329:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP335:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP342:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP349:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP356:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP362:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP370:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP377:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP383:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP391:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP398:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP404:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i32, i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD]], i32* [[ATOMIC_TEMP]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD:%.*]] = load i32, i32* [[ATOMIC_TEMP]], align 4
// CHK-CXX-NEXT:    [[BF_SHL:%.*]] = shl i32 [[BF_LOAD]], 1
// CHK-CXX-NEXT:    [[BF_ASHR:%.*]] = ashr i32 [[BF_SHL]], 1
// CHK-CXX-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[BF_ASHR]], [[TMP0]]
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP1:%.*]] = phi i32 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP1]], i32* [[ATOMIC_TEMP1]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD2:%.*]] = load i32, i32* [[ATOMIC_TEMP1]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE:%.*]] = and i32 [[TMP0]], 2147483647
// CHK-CXX-NEXT:    [[BF_CLEAR:%.*]] = and i32 [[BF_LOAD2]], -2147483648
// CHK-CXX-NEXT:    [[BF_SET:%.*]] = or i32 [[BF_CLEAR]], [[BF_VALUE]]
// CHK-CXX-NEXT:    store i32 [[BF_SET]], i32* [[ATOMIC_TEMP1]], align 4
// CHK-CXX-NEXT:    [[TMP2:%.*]] = load i32, i32* [[ATOMIC_TEMP1]], align 4
// CHK-CXX-NEXT:    [[TMP3:%.*]] = cmpxchg i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*), i32 [[TMP1]], i32 [[TMP2]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP4]] = extractvalue { i32, i1 } [[TMP3]], 0
// CHK-CXX-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i1 } [[TMP3]], 1
// CHK-CXX-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    store i32 [[TMP4]], i32* [[ATOMIC_TEMP3]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD4:%.*]] = load i32, i32* [[ATOMIC_TEMP3]], align 4
// CHK-CXX-NEXT:    [[BF_SHL5:%.*]] = shl i32 [[BF_LOAD4]], 1
// CHK-CXX-NEXT:    [[BF_ASHR6:%.*]] = ashr i32 [[BF_SHL5]], 1
// CHK-CXX-NEXT:    [[CMP7:%.*]] = icmp sgt i32 [[BF_ASHR6]], [[TMP0]]
// CHK-CXX-NEXT:    br i1 [[CMP7]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP6:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP7:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD8:%.*]] = load atomic i32, i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD8]], i32* [[ATOMIC_TEMP9]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD10:%.*]] = load i32, i32* [[ATOMIC_TEMP9]], align 4
// CHK-CXX-NEXT:    [[BF_SHL11:%.*]] = shl i32 [[BF_LOAD10]], 1
// CHK-CXX-NEXT:    [[BF_ASHR12:%.*]] = ashr i32 [[BF_SHL11]], 1
// CHK-CXX-NEXT:    [[CMP13:%.*]] = icmp eq i32 [[BF_ASHR12]], [[TMP7]]
// CHK-CXX-NEXT:    br i1 [[CMP13]], label [[ATOMIC_CONT14:%.*]], label [[ATOMIC_EXIT26:%.*]]
// CHK-CXX:       atomic_cont14:
// CHK-CXX-NEXT:    [[TMP8:%.*]] = phi i32 [ [[ATOMIC_LOAD8]], [[ATOMIC_EXIT]] ], [ [[TMP11:%.*]], [[ATOMIC_CMP20:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP8]], i32* [[ATOMIC_TEMP15]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD16:%.*]] = load i32, i32* [[ATOMIC_TEMP15]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE17:%.*]] = and i32 [[TMP6]], 2147483647
// CHK-CXX-NEXT:    [[BF_CLEAR18:%.*]] = and i32 [[BF_LOAD16]], -2147483648
// CHK-CXX-NEXT:    [[BF_SET19:%.*]] = or i32 [[BF_CLEAR18]], [[BF_VALUE17]]
// CHK-CXX-NEXT:    store i32 [[BF_SET19]], i32* [[ATOMIC_TEMP15]], align 4
// CHK-CXX-NEXT:    [[TMP9:%.*]] = load i32, i32* [[ATOMIC_TEMP15]], align 4
// CHK-CXX-NEXT:    [[TMP10:%.*]] = cmpxchg i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*), i32 [[TMP8]], i32 [[TMP9]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP11]] = extractvalue { i32, i1 } [[TMP10]], 0
// CHK-CXX-NEXT:    [[TMP12:%.*]] = extractvalue { i32, i1 } [[TMP10]], 1
// CHK-CXX-NEXT:    br i1 [[TMP12]], label [[ATOMIC_EXIT26]], label [[ATOMIC_CMP20]]
// CHK-CXX:       atomic_cmp20:
// CHK-CXX-NEXT:    store i32 [[TMP11]], i32* [[ATOMIC_TEMP21]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD22:%.*]] = load i32, i32* [[ATOMIC_TEMP21]], align 4
// CHK-CXX-NEXT:    [[BF_SHL23:%.*]] = shl i32 [[BF_LOAD22]], 1
// CHK-CXX-NEXT:    [[BF_ASHR24:%.*]] = ashr i32 [[BF_SHL23]], 1
// CHK-CXX-NEXT:    [[CMP25:%.*]] = icmp eq i32 [[BF_ASHR24]], [[TMP7]]
// CHK-CXX-NEXT:    br i1 [[CMP25]], label [[ATOMIC_CONT14]], label [[ATOMIC_EXIT26]]
// CHK-CXX:       atomic_exit26:
// CHK-CXX-NEXT:    [[TMP13:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD27:%.*]] = load atomic i32, i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD27]], i32* [[ATOMIC_TEMP28]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD29:%.*]] = load i32, i32* [[ATOMIC_TEMP28]], align 4
// CHK-CXX-NEXT:    [[BF_SHL30:%.*]] = shl i32 [[BF_LOAD29]], 1
// CHK-CXX-NEXT:    [[BF_ASHR31:%.*]] = ashr i32 [[BF_SHL30]], 1
// CHK-CXX-NEXT:    [[CMP32:%.*]] = icmp slt i32 [[BF_ASHR31]], [[TMP13]]
// CHK-CXX-NEXT:    br i1 [[CMP32]], label [[ATOMIC_CONT33:%.*]], label [[ATOMIC_EXIT45:%.*]]
// CHK-CXX:       atomic_cont33:
// CHK-CXX-NEXT:    [[TMP14:%.*]] = phi i32 [ [[ATOMIC_LOAD27]], [[ATOMIC_EXIT26]] ], [ [[TMP17:%.*]], [[ATOMIC_CMP39:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP14]], i32* [[ATOMIC_TEMP34]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD35:%.*]] = load i32, i32* [[ATOMIC_TEMP34]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE36:%.*]] = and i32 [[TMP13]], 2147483647
// CHK-CXX-NEXT:    [[BF_CLEAR37:%.*]] = and i32 [[BF_LOAD35]], -2147483648
// CHK-CXX-NEXT:    [[BF_SET38:%.*]] = or i32 [[BF_CLEAR37]], [[BF_VALUE36]]
// CHK-CXX-NEXT:    store i32 [[BF_SET38]], i32* [[ATOMIC_TEMP34]], align 4
// CHK-CXX-NEXT:    [[TMP15:%.*]] = load i32, i32* [[ATOMIC_TEMP34]], align 4
// CHK-CXX-NEXT:    [[TMP16:%.*]] = cmpxchg i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*), i32 [[TMP14]], i32 [[TMP15]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP17]] = extractvalue { i32, i1 } [[TMP16]], 0
// CHK-CXX-NEXT:    [[TMP18:%.*]] = extractvalue { i32, i1 } [[TMP16]], 1
// CHK-CXX-NEXT:    br i1 [[TMP18]], label [[ATOMIC_EXIT45]], label [[ATOMIC_CMP39]]
// CHK-CXX:       atomic_cmp39:
// CHK-CXX-NEXT:    store i32 [[TMP17]], i32* [[ATOMIC_TEMP40]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD41:%.*]] = load i32, i32* [[ATOMIC_TEMP40]], align 4
// CHK-CXX-NEXT:    [[BF_SHL42:%.*]] = shl i32 [[BF_LOAD41]], 1
// CHK-CXX-NEXT:    [[BF_ASHR43:%.*]] = ashr i32 [[BF_SHL42]], 1
// CHK-CXX-NEXT:    [[CMP44:%.*]] = icmp slt i32 [[BF_ASHR43]], [[TMP13]]
// CHK-CXX-NEXT:    br i1 [[CMP44]], label [[ATOMIC_CONT33]], label [[ATOMIC_EXIT45]]
// CHK-CXX:       atomic_exit45:
// CHK-CXX-NEXT:    [[TMP19:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD46:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS2:%.*]], %struct.BitFields2* @bfx2, i32 0, i32 0) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD46]], i32* [[ATOMIC_TEMP47]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD48:%.*]] = load i32, i32* [[ATOMIC_TEMP47]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR49:%.*]] = ashr i32 [[BF_LOAD48]], 31
// CHK-CXX-NEXT:    [[CMP50:%.*]] = icmp sgt i32 [[BF_ASHR49]], [[TMP19]]
// CHK-CXX-NEXT:    br i1 [[CMP50]], label [[ATOMIC_CONT51:%.*]], label [[ATOMIC_EXIT63:%.*]]
// CHK-CXX:       atomic_cont51:
// CHK-CXX-NEXT:    [[TMP20:%.*]] = phi i32 [ [[ATOMIC_LOAD46]], [[ATOMIC_EXIT45]] ], [ [[TMP23:%.*]], [[ATOMIC_CMP58:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP20]], i32* [[ATOMIC_TEMP52]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD53:%.*]] = load i32, i32* [[ATOMIC_TEMP52]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE54:%.*]] = and i32 [[TMP19]], 1
// CHK-CXX-NEXT:    [[BF_SHL55:%.*]] = shl i32 [[BF_VALUE54]], 31
// CHK-CXX-NEXT:    [[BF_CLEAR56:%.*]] = and i32 [[BF_LOAD53]], 2147483647
// CHK-CXX-NEXT:    [[BF_SET57:%.*]] = or i32 [[BF_CLEAR56]], [[BF_SHL55]]
// CHK-CXX-NEXT:    store i32 [[BF_SET57]], i32* [[ATOMIC_TEMP52]], align 4
// CHK-CXX-NEXT:    [[TMP21:%.*]] = load i32, i32* [[ATOMIC_TEMP52]], align 4
// CHK-CXX-NEXT:    [[TMP22:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0), i32 [[TMP20]], i32 [[TMP21]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP23]] = extractvalue { i32, i1 } [[TMP22]], 0
// CHK-CXX-NEXT:    [[TMP24:%.*]] = extractvalue { i32, i1 } [[TMP22]], 1
// CHK-CXX-NEXT:    br i1 [[TMP24]], label [[ATOMIC_EXIT63]], label [[ATOMIC_CMP58]]
// CHK-CXX:       atomic_cmp58:
// CHK-CXX-NEXT:    store i32 [[TMP23]], i32* [[ATOMIC_TEMP59]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD60:%.*]] = load i32, i32* [[ATOMIC_TEMP59]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR61:%.*]] = ashr i32 [[BF_LOAD60]], 31
// CHK-CXX-NEXT:    [[CMP62:%.*]] = icmp sgt i32 [[BF_ASHR61]], [[TMP19]]
// CHK-CXX-NEXT:    br i1 [[CMP62]], label [[ATOMIC_CONT51]], label [[ATOMIC_EXIT63]]
// CHK-CXX:       atomic_exit63:
// CHK-CXX-NEXT:    [[TMP25:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP26:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD64:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD64]], i32* [[ATOMIC_TEMP65]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD66:%.*]] = load i32, i32* [[ATOMIC_TEMP65]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR67:%.*]] = ashr i32 [[BF_LOAD66]], 31
// CHK-CXX-NEXT:    [[CMP68:%.*]] = icmp eq i32 [[BF_ASHR67]], [[TMP26]]
// CHK-CXX-NEXT:    br i1 [[CMP68]], label [[ATOMIC_CONT69:%.*]], label [[ATOMIC_EXIT81:%.*]]
// CHK-CXX:       atomic_cont69:
// CHK-CXX-NEXT:    [[TMP27:%.*]] = phi i32 [ [[ATOMIC_LOAD64]], [[ATOMIC_EXIT63]] ], [ [[TMP30:%.*]], [[ATOMIC_CMP76:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP27]], i32* [[ATOMIC_TEMP70]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD71:%.*]] = load i32, i32* [[ATOMIC_TEMP70]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE72:%.*]] = and i32 [[TMP25]], 1
// CHK-CXX-NEXT:    [[BF_SHL73:%.*]] = shl i32 [[BF_VALUE72]], 31
// CHK-CXX-NEXT:    [[BF_CLEAR74:%.*]] = and i32 [[BF_LOAD71]], 2147483647
// CHK-CXX-NEXT:    [[BF_SET75:%.*]] = or i32 [[BF_CLEAR74]], [[BF_SHL73]]
// CHK-CXX-NEXT:    store i32 [[BF_SET75]], i32* [[ATOMIC_TEMP70]], align 4
// CHK-CXX-NEXT:    [[TMP28:%.*]] = load i32, i32* [[ATOMIC_TEMP70]], align 4
// CHK-CXX-NEXT:    [[TMP29:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0), i32 [[TMP27]], i32 [[TMP28]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP30]] = extractvalue { i32, i1 } [[TMP29]], 0
// CHK-CXX-NEXT:    [[TMP31:%.*]] = extractvalue { i32, i1 } [[TMP29]], 1
// CHK-CXX-NEXT:    br i1 [[TMP31]], label [[ATOMIC_EXIT81]], label [[ATOMIC_CMP76]]
// CHK-CXX:       atomic_cmp76:
// CHK-CXX-NEXT:    store i32 [[TMP30]], i32* [[ATOMIC_TEMP77]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD78:%.*]] = load i32, i32* [[ATOMIC_TEMP77]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR79:%.*]] = ashr i32 [[BF_LOAD78]], 31
// CHK-CXX-NEXT:    [[CMP80:%.*]] = icmp eq i32 [[BF_ASHR79]], [[TMP26]]
// CHK-CXX-NEXT:    br i1 [[CMP80]], label [[ATOMIC_CONT69]], label [[ATOMIC_EXIT81]]
// CHK-CXX:       atomic_exit81:
// CHK-CXX-NEXT:    [[TMP32:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD82:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD82]], i32* [[ATOMIC_TEMP83]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD84:%.*]] = load i32, i32* [[ATOMIC_TEMP83]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR85:%.*]] = ashr i32 [[BF_LOAD84]], 31
// CHK-CXX-NEXT:    [[CMP86:%.*]] = icmp slt i32 [[BF_ASHR85]], [[TMP32]]
// CHK-CXX-NEXT:    br i1 [[CMP86]], label [[ATOMIC_CONT87:%.*]], label [[ATOMIC_EXIT99:%.*]]
// CHK-CXX:       atomic_cont87:
// CHK-CXX-NEXT:    [[TMP33:%.*]] = phi i32 [ [[ATOMIC_LOAD82]], [[ATOMIC_EXIT81]] ], [ [[TMP36:%.*]], [[ATOMIC_CMP94:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP33]], i32* [[ATOMIC_TEMP88]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD89:%.*]] = load i32, i32* [[ATOMIC_TEMP88]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE90:%.*]] = and i32 [[TMP32]], 1
// CHK-CXX-NEXT:    [[BF_SHL91:%.*]] = shl i32 [[BF_VALUE90]], 31
// CHK-CXX-NEXT:    [[BF_CLEAR92:%.*]] = and i32 [[BF_LOAD89]], 2147483647
// CHK-CXX-NEXT:    [[BF_SET93:%.*]] = or i32 [[BF_CLEAR92]], [[BF_SHL91]]
// CHK-CXX-NEXT:    store i32 [[BF_SET93]], i32* [[ATOMIC_TEMP88]], align 4
// CHK-CXX-NEXT:    [[TMP34:%.*]] = load i32, i32* [[ATOMIC_TEMP88]], align 4
// CHK-CXX-NEXT:    [[TMP35:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0), i32 [[TMP33]], i32 [[TMP34]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP36]] = extractvalue { i32, i1 } [[TMP35]], 0
// CHK-CXX-NEXT:    [[TMP37:%.*]] = extractvalue { i32, i1 } [[TMP35]], 1
// CHK-CXX-NEXT:    br i1 [[TMP37]], label [[ATOMIC_EXIT99]], label [[ATOMIC_CMP94]]
// CHK-CXX:       atomic_cmp94:
// CHK-CXX-NEXT:    store i32 [[TMP36]], i32* [[ATOMIC_TEMP95]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD96:%.*]] = load i32, i32* [[ATOMIC_TEMP95]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR97:%.*]] = ashr i32 [[BF_LOAD96]], 31
// CHK-CXX-NEXT:    [[CMP98:%.*]] = icmp slt i32 [[BF_ASHR97]], [[TMP32]]
// CHK-CXX-NEXT:    br i1 [[CMP98]], label [[ATOMIC_CONT87]], label [[ATOMIC_EXIT99]]
// CHK-CXX:       atomic_exit99:
// CHK-CXX-NEXT:    [[TMP38:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD100:%.*]] = load atomic i8, i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3) monotonic, align 1
// CHK-CXX-NEXT:    [[TMP39:%.*]] = bitcast i32* [[ATOMIC_TEMP101]] to i8*
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD100]], i8* [[TMP39]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD102:%.*]] = load i8, i8* [[TMP39]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR103:%.*]] = ashr i8 [[BF_LOAD102]], 7
// CHK-CXX-NEXT:    [[BF_CAST:%.*]] = sext i8 [[BF_ASHR103]] to i32
// CHK-CXX-NEXT:    [[CMP104:%.*]] = icmp sgt i32 [[BF_CAST]], [[TMP38]]
// CHK-CXX-NEXT:    br i1 [[CMP104]], label [[ATOMIC_CONT105:%.*]], label [[ATOMIC_EXIT118:%.*]]
// CHK-CXX:       atomic_cont105:
// CHK-CXX-NEXT:    [[TMP40:%.*]] = phi i8 [ [[ATOMIC_LOAD100]], [[ATOMIC_EXIT99]] ], [ [[TMP45:%.*]], [[ATOMIC_CMP112:%.*]] ]
// CHK-CXX-NEXT:    [[TMP41:%.*]] = bitcast i32* [[ATOMIC_TEMP106]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP40]], i8* [[TMP41]], align 1
// CHK-CXX-NEXT:    [[TMP42:%.*]] = trunc i32 [[TMP38]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD107:%.*]] = load i8, i8* [[TMP41]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE108:%.*]] = and i8 [[TMP42]], 1
// CHK-CXX-NEXT:    [[BF_SHL109:%.*]] = shl i8 [[BF_VALUE108]], 7
// CHK-CXX-NEXT:    [[BF_CLEAR110:%.*]] = and i8 [[BF_LOAD107]], 127
// CHK-CXX-NEXT:    [[BF_SET111:%.*]] = or i8 [[BF_CLEAR110]], [[BF_SHL109]]
// CHK-CXX-NEXT:    store i8 [[BF_SET111]], i8* [[TMP41]], align 1
// CHK-CXX-NEXT:    [[TMP43:%.*]] = load i8, i8* [[TMP41]], align 1
// CHK-CXX-NEXT:    [[TMP44:%.*]] = cmpxchg i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3), i8 [[TMP40]], i8 [[TMP43]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP45]] = extractvalue { i8, i1 } [[TMP44]], 0
// CHK-CXX-NEXT:    [[TMP46:%.*]] = extractvalue { i8, i1 } [[TMP44]], 1
// CHK-CXX-NEXT:    br i1 [[TMP46]], label [[ATOMIC_EXIT118]], label [[ATOMIC_CMP112]]
// CHK-CXX:       atomic_cmp112:
// CHK-CXX-NEXT:    [[TMP47:%.*]] = bitcast i32* [[ATOMIC_TEMP113]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP45]], i8* [[TMP47]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD114:%.*]] = load i8, i8* [[TMP47]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR115:%.*]] = ashr i8 [[BF_LOAD114]], 7
// CHK-CXX-NEXT:    [[BF_CAST116:%.*]] = sext i8 [[BF_ASHR115]] to i32
// CHK-CXX-NEXT:    [[CMP117:%.*]] = icmp sgt i32 [[BF_CAST116]], [[TMP38]]
// CHK-CXX-NEXT:    br i1 [[CMP117]], label [[ATOMIC_CONT105]], label [[ATOMIC_EXIT118]]
// CHK-CXX:       atomic_exit118:
// CHK-CXX-NEXT:    [[TMP48:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP49:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD119:%.*]] = load atomic i8, i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3) monotonic, align 1
// CHK-CXX-NEXT:    [[TMP50:%.*]] = bitcast i32* [[ATOMIC_TEMP120]] to i8*
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD119]], i8* [[TMP50]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD121:%.*]] = load i8, i8* [[TMP50]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR122:%.*]] = ashr i8 [[BF_LOAD121]], 7
// CHK-CXX-NEXT:    [[BF_CAST123:%.*]] = sext i8 [[BF_ASHR122]] to i32
// CHK-CXX-NEXT:    [[CMP124:%.*]] = icmp eq i32 [[BF_CAST123]], [[TMP49]]
// CHK-CXX-NEXT:    br i1 [[CMP124]], label [[ATOMIC_CONT125:%.*]], label [[ATOMIC_EXIT138:%.*]]
// CHK-CXX:       atomic_cont125:
// CHK-CXX-NEXT:    [[TMP51:%.*]] = phi i8 [ [[ATOMIC_LOAD119]], [[ATOMIC_EXIT118]] ], [ [[TMP56:%.*]], [[ATOMIC_CMP132:%.*]] ]
// CHK-CXX-NEXT:    [[TMP52:%.*]] = bitcast i32* [[ATOMIC_TEMP126]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP51]], i8* [[TMP52]], align 1
// CHK-CXX-NEXT:    [[TMP53:%.*]] = trunc i32 [[TMP48]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD127:%.*]] = load i8, i8* [[TMP52]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE128:%.*]] = and i8 [[TMP53]], 1
// CHK-CXX-NEXT:    [[BF_SHL129:%.*]] = shl i8 [[BF_VALUE128]], 7
// CHK-CXX-NEXT:    [[BF_CLEAR130:%.*]] = and i8 [[BF_LOAD127]], 127
// CHK-CXX-NEXT:    [[BF_SET131:%.*]] = or i8 [[BF_CLEAR130]], [[BF_SHL129]]
// CHK-CXX-NEXT:    store i8 [[BF_SET131]], i8* [[TMP52]], align 1
// CHK-CXX-NEXT:    [[TMP54:%.*]] = load i8, i8* [[TMP52]], align 1
// CHK-CXX-NEXT:    [[TMP55:%.*]] = cmpxchg i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3), i8 [[TMP51]], i8 [[TMP54]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP56]] = extractvalue { i8, i1 } [[TMP55]], 0
// CHK-CXX-NEXT:    [[TMP57:%.*]] = extractvalue { i8, i1 } [[TMP55]], 1
// CHK-CXX-NEXT:    br i1 [[TMP57]], label [[ATOMIC_EXIT138]], label [[ATOMIC_CMP132]]
// CHK-CXX:       atomic_cmp132:
// CHK-CXX-NEXT:    [[TMP58:%.*]] = bitcast i32* [[ATOMIC_TEMP133]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP56]], i8* [[TMP58]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD134:%.*]] = load i8, i8* [[TMP58]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR135:%.*]] = ashr i8 [[BF_LOAD134]], 7
// CHK-CXX-NEXT:    [[BF_CAST136:%.*]] = sext i8 [[BF_ASHR135]] to i32
// CHK-CXX-NEXT:    [[CMP137:%.*]] = icmp eq i32 [[BF_CAST136]], [[TMP49]]
// CHK-CXX-NEXT:    br i1 [[CMP137]], label [[ATOMIC_CONT125]], label [[ATOMIC_EXIT138]]
// CHK-CXX:       atomic_exit138:
// CHK-CXX-NEXT:    [[TMP59:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD139:%.*]] = load atomic i8, i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3) monotonic, align 1
// CHK-CXX-NEXT:    [[TMP60:%.*]] = bitcast i32* [[ATOMIC_TEMP140]] to i8*
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD139]], i8* [[TMP60]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD141:%.*]] = load i8, i8* [[TMP60]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR142:%.*]] = ashr i8 [[BF_LOAD141]], 7
// CHK-CXX-NEXT:    [[BF_CAST143:%.*]] = sext i8 [[BF_ASHR142]] to i32
// CHK-CXX-NEXT:    [[CMP144:%.*]] = icmp slt i32 [[BF_CAST143]], [[TMP59]]
// CHK-CXX-NEXT:    br i1 [[CMP144]], label [[ATOMIC_CONT145:%.*]], label [[ATOMIC_EXIT158:%.*]]
// CHK-CXX:       atomic_cont145:
// CHK-CXX-NEXT:    [[TMP61:%.*]] = phi i8 [ [[ATOMIC_LOAD139]], [[ATOMIC_EXIT138]] ], [ [[TMP66:%.*]], [[ATOMIC_CMP152:%.*]] ]
// CHK-CXX-NEXT:    [[TMP62:%.*]] = bitcast i32* [[ATOMIC_TEMP146]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP61]], i8* [[TMP62]], align 1
// CHK-CXX-NEXT:    [[TMP63:%.*]] = trunc i32 [[TMP59]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD147:%.*]] = load i8, i8* [[TMP62]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE148:%.*]] = and i8 [[TMP63]], 1
// CHK-CXX-NEXT:    [[BF_SHL149:%.*]] = shl i8 [[BF_VALUE148]], 7
// CHK-CXX-NEXT:    [[BF_CLEAR150:%.*]] = and i8 [[BF_LOAD147]], 127
// CHK-CXX-NEXT:    [[BF_SET151:%.*]] = or i8 [[BF_CLEAR150]], [[BF_SHL149]]
// CHK-CXX-NEXT:    store i8 [[BF_SET151]], i8* [[TMP62]], align 1
// CHK-CXX-NEXT:    [[TMP64:%.*]] = load i8, i8* [[TMP62]], align 1
// CHK-CXX-NEXT:    [[TMP65:%.*]] = cmpxchg i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3), i8 [[TMP61]], i8 [[TMP64]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP66]] = extractvalue { i8, i1 } [[TMP65]], 0
// CHK-CXX-NEXT:    [[TMP67:%.*]] = extractvalue { i8, i1 } [[TMP65]], 1
// CHK-CXX-NEXT:    br i1 [[TMP67]], label [[ATOMIC_EXIT158]], label [[ATOMIC_CMP152]]
// CHK-CXX:       atomic_cmp152:
// CHK-CXX-NEXT:    [[TMP68:%.*]] = bitcast i32* [[ATOMIC_TEMP153]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP66]], i8* [[TMP68]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD154:%.*]] = load i8, i8* [[TMP68]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR155:%.*]] = ashr i8 [[BF_LOAD154]], 7
// CHK-CXX-NEXT:    [[BF_CAST156:%.*]] = sext i8 [[BF_ASHR155]] to i32
// CHK-CXX-NEXT:    [[CMP157:%.*]] = icmp slt i32 [[BF_CAST156]], [[TMP59]]
// CHK-CXX-NEXT:    br i1 [[CMP157]], label [[ATOMIC_CONT145]], label [[ATOMIC_EXIT158]]
// CHK-CXX:       atomic_exit158:
// CHK-CXX-NEXT:    [[TMP69:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD159:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS3:%.*]], %struct.BitFields3* @bfx3, i32 0, i32 0) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD159]], i32* [[ATOMIC_TEMP160]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD161:%.*]] = load i32, i32* [[ATOMIC_TEMP160]], align 4
// CHK-CXX-NEXT:    [[BF_SHL162:%.*]] = shl i32 [[BF_LOAD161]], 7
// CHK-CXX-NEXT:    [[BF_ASHR163:%.*]] = ashr i32 [[BF_SHL162]], 18
// CHK-CXX-NEXT:    [[CMP164:%.*]] = icmp sgt i32 [[BF_ASHR163]], [[TMP69]]
// CHK-CXX-NEXT:    br i1 [[CMP164]], label [[ATOMIC_CONT165:%.*]], label [[ATOMIC_EXIT178:%.*]]
// CHK-CXX:       atomic_cont165:
// CHK-CXX-NEXT:    [[TMP70:%.*]] = phi i32 [ [[ATOMIC_LOAD159]], [[ATOMIC_EXIT158]] ], [ [[TMP73:%.*]], [[ATOMIC_CMP172:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP70]], i32* [[ATOMIC_TEMP166]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD167:%.*]] = load i32, i32* [[ATOMIC_TEMP166]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE168:%.*]] = and i32 [[TMP69]], 16383
// CHK-CXX-NEXT:    [[BF_SHL169:%.*]] = shl i32 [[BF_VALUE168]], 11
// CHK-CXX-NEXT:    [[BF_CLEAR170:%.*]] = and i32 [[BF_LOAD167]], -33552385
// CHK-CXX-NEXT:    [[BF_SET171:%.*]] = or i32 [[BF_CLEAR170]], [[BF_SHL169]]
// CHK-CXX-NEXT:    store i32 [[BF_SET171]], i32* [[ATOMIC_TEMP166]], align 4
// CHK-CXX-NEXT:    [[TMP71:%.*]] = load i32, i32* [[ATOMIC_TEMP166]], align 4
// CHK-CXX-NEXT:    [[TMP72:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0), i32 [[TMP70]], i32 [[TMP71]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP73]] = extractvalue { i32, i1 } [[TMP72]], 0
// CHK-CXX-NEXT:    [[TMP74:%.*]] = extractvalue { i32, i1 } [[TMP72]], 1
// CHK-CXX-NEXT:    br i1 [[TMP74]], label [[ATOMIC_EXIT178]], label [[ATOMIC_CMP172]]
// CHK-CXX:       atomic_cmp172:
// CHK-CXX-NEXT:    store i32 [[TMP73]], i32* [[ATOMIC_TEMP173]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD174:%.*]] = load i32, i32* [[ATOMIC_TEMP173]], align 4
// CHK-CXX-NEXT:    [[BF_SHL175:%.*]] = shl i32 [[BF_LOAD174]], 7
// CHK-CXX-NEXT:    [[BF_ASHR176:%.*]] = ashr i32 [[BF_SHL175]], 18
// CHK-CXX-NEXT:    [[CMP177:%.*]] = icmp sgt i32 [[BF_ASHR176]], [[TMP69]]
// CHK-CXX-NEXT:    br i1 [[CMP177]], label [[ATOMIC_CONT165]], label [[ATOMIC_EXIT178]]
// CHK-CXX:       atomic_exit178:
// CHK-CXX-NEXT:    [[TMP75:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP76:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD179:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD179]], i32* [[ATOMIC_TEMP180]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD181:%.*]] = load i32, i32* [[ATOMIC_TEMP180]], align 4
// CHK-CXX-NEXT:    [[BF_SHL182:%.*]] = shl i32 [[BF_LOAD181]], 7
// CHK-CXX-NEXT:    [[BF_ASHR183:%.*]] = ashr i32 [[BF_SHL182]], 18
// CHK-CXX-NEXT:    [[CMP184:%.*]] = icmp eq i32 [[BF_ASHR183]], [[TMP76]]
// CHK-CXX-NEXT:    br i1 [[CMP184]], label [[ATOMIC_CONT185:%.*]], label [[ATOMIC_EXIT198:%.*]]
// CHK-CXX:       atomic_cont185:
// CHK-CXX-NEXT:    [[TMP77:%.*]] = phi i32 [ [[ATOMIC_LOAD179]], [[ATOMIC_EXIT178]] ], [ [[TMP80:%.*]], [[ATOMIC_CMP192:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP77]], i32* [[ATOMIC_TEMP186]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD187:%.*]] = load i32, i32* [[ATOMIC_TEMP186]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE188:%.*]] = and i32 [[TMP75]], 16383
// CHK-CXX-NEXT:    [[BF_SHL189:%.*]] = shl i32 [[BF_VALUE188]], 11
// CHK-CXX-NEXT:    [[BF_CLEAR190:%.*]] = and i32 [[BF_LOAD187]], -33552385
// CHK-CXX-NEXT:    [[BF_SET191:%.*]] = or i32 [[BF_CLEAR190]], [[BF_SHL189]]
// CHK-CXX-NEXT:    store i32 [[BF_SET191]], i32* [[ATOMIC_TEMP186]], align 4
// CHK-CXX-NEXT:    [[TMP78:%.*]] = load i32, i32* [[ATOMIC_TEMP186]], align 4
// CHK-CXX-NEXT:    [[TMP79:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0), i32 [[TMP77]], i32 [[TMP78]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP80]] = extractvalue { i32, i1 } [[TMP79]], 0
// CHK-CXX-NEXT:    [[TMP81:%.*]] = extractvalue { i32, i1 } [[TMP79]], 1
// CHK-CXX-NEXT:    br i1 [[TMP81]], label [[ATOMIC_EXIT198]], label [[ATOMIC_CMP192]]
// CHK-CXX:       atomic_cmp192:
// CHK-CXX-NEXT:    store i32 [[TMP80]], i32* [[ATOMIC_TEMP193]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD194:%.*]] = load i32, i32* [[ATOMIC_TEMP193]], align 4
// CHK-CXX-NEXT:    [[BF_SHL195:%.*]] = shl i32 [[BF_LOAD194]], 7
// CHK-CXX-NEXT:    [[BF_ASHR196:%.*]] = ashr i32 [[BF_SHL195]], 18
// CHK-CXX-NEXT:    [[CMP197:%.*]] = icmp eq i32 [[BF_ASHR196]], [[TMP76]]
// CHK-CXX-NEXT:    br i1 [[CMP197]], label [[ATOMIC_CONT185]], label [[ATOMIC_EXIT198]]
// CHK-CXX:       atomic_exit198:
// CHK-CXX-NEXT:    [[TMP82:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD199:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD199]], i32* [[ATOMIC_TEMP200]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD201:%.*]] = load i32, i32* [[ATOMIC_TEMP200]], align 4
// CHK-CXX-NEXT:    [[BF_SHL202:%.*]] = shl i32 [[BF_LOAD201]], 7
// CHK-CXX-NEXT:    [[BF_ASHR203:%.*]] = ashr i32 [[BF_SHL202]], 18
// CHK-CXX-NEXT:    [[CMP204:%.*]] = icmp slt i32 [[BF_ASHR203]], [[TMP82]]
// CHK-CXX-NEXT:    br i1 [[CMP204]], label [[ATOMIC_CONT205:%.*]], label [[ATOMIC_EXIT218:%.*]]
// CHK-CXX:       atomic_cont205:
// CHK-CXX-NEXT:    [[TMP83:%.*]] = phi i32 [ [[ATOMIC_LOAD199]], [[ATOMIC_EXIT198]] ], [ [[TMP86:%.*]], [[ATOMIC_CMP212:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP83]], i32* [[ATOMIC_TEMP206]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD207:%.*]] = load i32, i32* [[ATOMIC_TEMP206]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE208:%.*]] = and i32 [[TMP82]], 16383
// CHK-CXX-NEXT:    [[BF_SHL209:%.*]] = shl i32 [[BF_VALUE208]], 11
// CHK-CXX-NEXT:    [[BF_CLEAR210:%.*]] = and i32 [[BF_LOAD207]], -33552385
// CHK-CXX-NEXT:    [[BF_SET211:%.*]] = or i32 [[BF_CLEAR210]], [[BF_SHL209]]
// CHK-CXX-NEXT:    store i32 [[BF_SET211]], i32* [[ATOMIC_TEMP206]], align 4
// CHK-CXX-NEXT:    [[TMP84:%.*]] = load i32, i32* [[ATOMIC_TEMP206]], align 4
// CHK-CXX-NEXT:    [[TMP85:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0), i32 [[TMP83]], i32 [[TMP84]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP86]] = extractvalue { i32, i1 } [[TMP85]], 0
// CHK-CXX-NEXT:    [[TMP87:%.*]] = extractvalue { i32, i1 } [[TMP85]], 1
// CHK-CXX-NEXT:    br i1 [[TMP87]], label [[ATOMIC_EXIT218]], label [[ATOMIC_CMP212]]
// CHK-CXX:       atomic_cmp212:
// CHK-CXX-NEXT:    store i32 [[TMP86]], i32* [[ATOMIC_TEMP213]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD214:%.*]] = load i32, i32* [[ATOMIC_TEMP213]], align 4
// CHK-CXX-NEXT:    [[BF_SHL215:%.*]] = shl i32 [[BF_LOAD214]], 7
// CHK-CXX-NEXT:    [[BF_ASHR216:%.*]] = ashr i32 [[BF_SHL215]], 18
// CHK-CXX-NEXT:    [[CMP217:%.*]] = icmp slt i32 [[BF_ASHR216]], [[TMP82]]
// CHK-CXX-NEXT:    br i1 [[CMP217]], label [[ATOMIC_CONT205]], label [[ATOMIC_EXIT218]]
// CHK-CXX:       atomic_exit218:
// CHK-CXX-NEXT:    [[TMP88:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD219:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD219]], i64* [[ATOMIC_TEMP220]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD221:%.*]] = load i64, i64* [[ATOMIC_TEMP220]], align 8
// CHK-CXX-NEXT:    [[BF_SHL222:%.*]] = shl i64 [[BF_LOAD221]], 47
// CHK-CXX-NEXT:    [[BF_ASHR223:%.*]] = ashr i64 [[BF_SHL222]], 63
// CHK-CXX-NEXT:    [[BF_CAST224:%.*]] = trunc i64 [[BF_ASHR223]] to i32
// CHK-CXX-NEXT:    [[CMP225:%.*]] = icmp sgt i32 [[BF_CAST224]], [[TMP88]]
// CHK-CXX-NEXT:    br i1 [[CMP225]], label [[ATOMIC_CONT226:%.*]], label [[ATOMIC_EXIT240:%.*]]
// CHK-CXX:       atomic_cont226:
// CHK-CXX-NEXT:    [[TMP89:%.*]] = phi i64 [ [[ATOMIC_LOAD219]], [[ATOMIC_EXIT218]] ], [ [[TMP93:%.*]], [[ATOMIC_CMP233:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP89]], i64* [[ATOMIC_TEMP227]], align 8
// CHK-CXX-NEXT:    [[TMP90:%.*]] = zext i32 [[TMP88]] to i64
// CHK-CXX-NEXT:    [[BF_LOAD228:%.*]] = load i64, i64* [[ATOMIC_TEMP227]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE229:%.*]] = and i64 [[TMP90]], 1
// CHK-CXX-NEXT:    [[BF_SHL230:%.*]] = shl i64 [[BF_VALUE229]], 16
// CHK-CXX-NEXT:    [[BF_CLEAR231:%.*]] = and i64 [[BF_LOAD228]], -65537
// CHK-CXX-NEXT:    [[BF_SET232:%.*]] = or i64 [[BF_CLEAR231]], [[BF_SHL230]]
// CHK-CXX-NEXT:    store i64 [[BF_SET232]], i64* [[ATOMIC_TEMP227]], align 8
// CHK-CXX-NEXT:    [[TMP91:%.*]] = load i64, i64* [[ATOMIC_TEMP227]], align 8
// CHK-CXX-NEXT:    [[TMP92:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP89]], i64 [[TMP91]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP93]] = extractvalue { i64, i1 } [[TMP92]], 0
// CHK-CXX-NEXT:    [[TMP94:%.*]] = extractvalue { i64, i1 } [[TMP92]], 1
// CHK-CXX-NEXT:    br i1 [[TMP94]], label [[ATOMIC_EXIT240]], label [[ATOMIC_CMP233]]
// CHK-CXX:       atomic_cmp233:
// CHK-CXX-NEXT:    store i64 [[TMP93]], i64* [[ATOMIC_TEMP234]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD235:%.*]] = load i64, i64* [[ATOMIC_TEMP234]], align 8
// CHK-CXX-NEXT:    [[BF_SHL236:%.*]] = shl i64 [[BF_LOAD235]], 47
// CHK-CXX-NEXT:    [[BF_ASHR237:%.*]] = ashr i64 [[BF_SHL236]], 63
// CHK-CXX-NEXT:    [[BF_CAST238:%.*]] = trunc i64 [[BF_ASHR237]] to i32
// CHK-CXX-NEXT:    [[CMP239:%.*]] = icmp sgt i32 [[BF_CAST238]], [[TMP88]]
// CHK-CXX-NEXT:    br i1 [[CMP239]], label [[ATOMIC_CONT226]], label [[ATOMIC_EXIT240]]
// CHK-CXX:       atomic_exit240:
// CHK-CXX-NEXT:    [[TMP95:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP96:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD241:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD241]], i64* [[ATOMIC_TEMP242]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD243:%.*]] = load i64, i64* [[ATOMIC_TEMP242]], align 8
// CHK-CXX-NEXT:    [[BF_SHL244:%.*]] = shl i64 [[BF_LOAD243]], 47
// CHK-CXX-NEXT:    [[BF_ASHR245:%.*]] = ashr i64 [[BF_SHL244]], 63
// CHK-CXX-NEXT:    [[BF_CAST246:%.*]] = trunc i64 [[BF_ASHR245]] to i32
// CHK-CXX-NEXT:    [[CMP247:%.*]] = icmp eq i32 [[BF_CAST246]], [[TMP96]]
// CHK-CXX-NEXT:    br i1 [[CMP247]], label [[ATOMIC_CONT248:%.*]], label [[ATOMIC_EXIT262:%.*]]
// CHK-CXX:       atomic_cont248:
// CHK-CXX-NEXT:    [[TMP97:%.*]] = phi i64 [ [[ATOMIC_LOAD241]], [[ATOMIC_EXIT240]] ], [ [[TMP101:%.*]], [[ATOMIC_CMP255:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP97]], i64* [[ATOMIC_TEMP249]], align 8
// CHK-CXX-NEXT:    [[TMP98:%.*]] = zext i32 [[TMP95]] to i64
// CHK-CXX-NEXT:    [[BF_LOAD250:%.*]] = load i64, i64* [[ATOMIC_TEMP249]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE251:%.*]] = and i64 [[TMP98]], 1
// CHK-CXX-NEXT:    [[BF_SHL252:%.*]] = shl i64 [[BF_VALUE251]], 16
// CHK-CXX-NEXT:    [[BF_CLEAR253:%.*]] = and i64 [[BF_LOAD250]], -65537
// CHK-CXX-NEXT:    [[BF_SET254:%.*]] = or i64 [[BF_CLEAR253]], [[BF_SHL252]]
// CHK-CXX-NEXT:    store i64 [[BF_SET254]], i64* [[ATOMIC_TEMP249]], align 8
// CHK-CXX-NEXT:    [[TMP99:%.*]] = load i64, i64* [[ATOMIC_TEMP249]], align 8
// CHK-CXX-NEXT:    [[TMP100:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP97]], i64 [[TMP99]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP101]] = extractvalue { i64, i1 } [[TMP100]], 0
// CHK-CXX-NEXT:    [[TMP102:%.*]] = extractvalue { i64, i1 } [[TMP100]], 1
// CHK-CXX-NEXT:    br i1 [[TMP102]], label [[ATOMIC_EXIT262]], label [[ATOMIC_CMP255]]
// CHK-CXX:       atomic_cmp255:
// CHK-CXX-NEXT:    store i64 [[TMP101]], i64* [[ATOMIC_TEMP256]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD257:%.*]] = load i64, i64* [[ATOMIC_TEMP256]], align 8
// CHK-CXX-NEXT:    [[BF_SHL258:%.*]] = shl i64 [[BF_LOAD257]], 47
// CHK-CXX-NEXT:    [[BF_ASHR259:%.*]] = ashr i64 [[BF_SHL258]], 63
// CHK-CXX-NEXT:    [[BF_CAST260:%.*]] = trunc i64 [[BF_ASHR259]] to i32
// CHK-CXX-NEXT:    [[CMP261:%.*]] = icmp eq i32 [[BF_CAST260]], [[TMP96]]
// CHK-CXX-NEXT:    br i1 [[CMP261]], label [[ATOMIC_CONT248]], label [[ATOMIC_EXIT262]]
// CHK-CXX:       atomic_exit262:
// CHK-CXX-NEXT:    [[TMP103:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD263:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD263]], i64* [[ATOMIC_TEMP264]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD265:%.*]] = load i64, i64* [[ATOMIC_TEMP264]], align 8
// CHK-CXX-NEXT:    [[BF_SHL266:%.*]] = shl i64 [[BF_LOAD265]], 47
// CHK-CXX-NEXT:    [[BF_ASHR267:%.*]] = ashr i64 [[BF_SHL266]], 63
// CHK-CXX-NEXT:    [[BF_CAST268:%.*]] = trunc i64 [[BF_ASHR267]] to i32
// CHK-CXX-NEXT:    [[CMP269:%.*]] = icmp slt i32 [[BF_CAST268]], [[TMP103]]
// CHK-CXX-NEXT:    br i1 [[CMP269]], label [[ATOMIC_CONT270:%.*]], label [[ATOMIC_EXIT284:%.*]]
// CHK-CXX:       atomic_cont270:
// CHK-CXX-NEXT:    [[TMP104:%.*]] = phi i64 [ [[ATOMIC_LOAD263]], [[ATOMIC_EXIT262]] ], [ [[TMP108:%.*]], [[ATOMIC_CMP277:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP104]], i64* [[ATOMIC_TEMP271]], align 8
// CHK-CXX-NEXT:    [[TMP105:%.*]] = zext i32 [[TMP103]] to i64
// CHK-CXX-NEXT:    [[BF_LOAD272:%.*]] = load i64, i64* [[ATOMIC_TEMP271]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE273:%.*]] = and i64 [[TMP105]], 1
// CHK-CXX-NEXT:    [[BF_SHL274:%.*]] = shl i64 [[BF_VALUE273]], 16
// CHK-CXX-NEXT:    [[BF_CLEAR275:%.*]] = and i64 [[BF_LOAD272]], -65537
// CHK-CXX-NEXT:    [[BF_SET276:%.*]] = or i64 [[BF_CLEAR275]], [[BF_SHL274]]
// CHK-CXX-NEXT:    store i64 [[BF_SET276]], i64* [[ATOMIC_TEMP271]], align 8
// CHK-CXX-NEXT:    [[TMP106:%.*]] = load i64, i64* [[ATOMIC_TEMP271]], align 8
// CHK-CXX-NEXT:    [[TMP107:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP104]], i64 [[TMP106]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP108]] = extractvalue { i64, i1 } [[TMP107]], 0
// CHK-CXX-NEXT:    [[TMP109:%.*]] = extractvalue { i64, i1 } [[TMP107]], 1
// CHK-CXX-NEXT:    br i1 [[TMP109]], label [[ATOMIC_EXIT284]], label [[ATOMIC_CMP277]]
// CHK-CXX:       atomic_cmp277:
// CHK-CXX-NEXT:    store i64 [[TMP108]], i64* [[ATOMIC_TEMP278]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD279:%.*]] = load i64, i64* [[ATOMIC_TEMP278]], align 8
// CHK-CXX-NEXT:    [[BF_SHL280:%.*]] = shl i64 [[BF_LOAD279]], 47
// CHK-CXX-NEXT:    [[BF_ASHR281:%.*]] = ashr i64 [[BF_SHL280]], 63
// CHK-CXX-NEXT:    [[BF_CAST282:%.*]] = trunc i64 [[BF_ASHR281]] to i32
// CHK-CXX-NEXT:    [[CMP283:%.*]] = icmp slt i32 [[BF_CAST282]], [[TMP103]]
// CHK-CXX-NEXT:    br i1 [[CMP283]], label [[ATOMIC_CONT270]], label [[ATOMIC_EXIT284]]
// CHK-CXX:       atomic_exit284:
// CHK-CXX-NEXT:    [[TMP110:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[CONV:%.*]] = sext i32 [[TMP110]] to i64
// CHK-CXX-NEXT:    [[ATOMIC_LOAD285:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD285]], i64* [[ATOMIC_TEMP286]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD287:%.*]] = load i64, i64* [[ATOMIC_TEMP286]], align 8
// CHK-CXX-NEXT:    [[BF_SHL288:%.*]] = shl i64 [[BF_LOAD287]], 40
// CHK-CXX-NEXT:    [[BF_ASHR289:%.*]] = ashr i64 [[BF_SHL288]], 57
// CHK-CXX-NEXT:    [[CMP290:%.*]] = icmp sgt i64 [[BF_ASHR289]], [[CONV]]
// CHK-CXX-NEXT:    br i1 [[CMP290]], label [[ATOMIC_CONT291:%.*]], label [[ATOMIC_EXIT304:%.*]]
// CHK-CXX:       atomic_cont291:
// CHK-CXX-NEXT:    [[TMP111:%.*]] = phi i64 [ [[ATOMIC_LOAD285]], [[ATOMIC_EXIT284]] ], [ [[TMP114:%.*]], [[ATOMIC_CMP298:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP111]], i64* [[ATOMIC_TEMP292]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD293:%.*]] = load i64, i64* [[ATOMIC_TEMP292]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE294:%.*]] = and i64 [[CONV]], 127
// CHK-CXX-NEXT:    [[BF_SHL295:%.*]] = shl i64 [[BF_VALUE294]], 17
// CHK-CXX-NEXT:    [[BF_CLEAR296:%.*]] = and i64 [[BF_LOAD293]], -16646145
// CHK-CXX-NEXT:    [[BF_SET297:%.*]] = or i64 [[BF_CLEAR296]], [[BF_SHL295]]
// CHK-CXX-NEXT:    store i64 [[BF_SET297]], i64* [[ATOMIC_TEMP292]], align 8
// CHK-CXX-NEXT:    [[TMP112:%.*]] = load i64, i64* [[ATOMIC_TEMP292]], align 8
// CHK-CXX-NEXT:    [[TMP113:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP111]], i64 [[TMP112]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP114]] = extractvalue { i64, i1 } [[TMP113]], 0
// CHK-CXX-NEXT:    [[TMP115:%.*]] = extractvalue { i64, i1 } [[TMP113]], 1
// CHK-CXX-NEXT:    br i1 [[TMP115]], label [[ATOMIC_EXIT304]], label [[ATOMIC_CMP298]]
// CHK-CXX:       atomic_cmp298:
// CHK-CXX-NEXT:    store i64 [[TMP114]], i64* [[ATOMIC_TEMP299]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD300:%.*]] = load i64, i64* [[ATOMIC_TEMP299]], align 8
// CHK-CXX-NEXT:    [[BF_SHL301:%.*]] = shl i64 [[BF_LOAD300]], 40
// CHK-CXX-NEXT:    [[BF_ASHR302:%.*]] = ashr i64 [[BF_SHL301]], 57
// CHK-CXX-NEXT:    [[CMP303:%.*]] = icmp sgt i64 [[BF_ASHR302]], [[CONV]]
// CHK-CXX-NEXT:    br i1 [[CMP303]], label [[ATOMIC_CONT291]], label [[ATOMIC_EXIT304]]
// CHK-CXX:       atomic_exit304:
// CHK-CXX-NEXT:    [[TMP116:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[CONV305:%.*]] = sext i32 [[TMP116]] to i64
// CHK-CXX-NEXT:    [[TMP117:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[CONV306:%.*]] = sext i32 [[TMP117]] to i64
// CHK-CXX-NEXT:    [[ATOMIC_LOAD307:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD307]], i64* [[ATOMIC_TEMP308]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD309:%.*]] = load i64, i64* [[ATOMIC_TEMP308]], align 8
// CHK-CXX-NEXT:    [[BF_SHL310:%.*]] = shl i64 [[BF_LOAD309]], 40
// CHK-CXX-NEXT:    [[BF_ASHR311:%.*]] = ashr i64 [[BF_SHL310]], 57
// CHK-CXX-NEXT:    [[CMP312:%.*]] = icmp eq i64 [[BF_ASHR311]], [[CONV306]]
// CHK-CXX-NEXT:    br i1 [[CMP312]], label [[ATOMIC_CONT313:%.*]], label [[ATOMIC_EXIT326:%.*]]
// CHK-CXX:       atomic_cont313:
// CHK-CXX-NEXT:    [[TMP118:%.*]] = phi i64 [ [[ATOMIC_LOAD307]], [[ATOMIC_EXIT304]] ], [ [[TMP121:%.*]], [[ATOMIC_CMP320:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP118]], i64* [[ATOMIC_TEMP314]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD315:%.*]] = load i64, i64* [[ATOMIC_TEMP314]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE316:%.*]] = and i64 [[CONV305]], 127
// CHK-CXX-NEXT:    [[BF_SHL317:%.*]] = shl i64 [[BF_VALUE316]], 17
// CHK-CXX-NEXT:    [[BF_CLEAR318:%.*]] = and i64 [[BF_LOAD315]], -16646145
// CHK-CXX-NEXT:    [[BF_SET319:%.*]] = or i64 [[BF_CLEAR318]], [[BF_SHL317]]
// CHK-CXX-NEXT:    store i64 [[BF_SET319]], i64* [[ATOMIC_TEMP314]], align 8
// CHK-CXX-NEXT:    [[TMP119:%.*]] = load i64, i64* [[ATOMIC_TEMP314]], align 8
// CHK-CXX-NEXT:    [[TMP120:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP118]], i64 [[TMP119]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP121]] = extractvalue { i64, i1 } [[TMP120]], 0
// CHK-CXX-NEXT:    [[TMP122:%.*]] = extractvalue { i64, i1 } [[TMP120]], 1
// CHK-CXX-NEXT:    br i1 [[TMP122]], label [[ATOMIC_EXIT326]], label [[ATOMIC_CMP320]]
// CHK-CXX:       atomic_cmp320:
// CHK-CXX-NEXT:    store i64 [[TMP121]], i64* [[ATOMIC_TEMP321]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD322:%.*]] = load i64, i64* [[ATOMIC_TEMP321]], align 8
// CHK-CXX-NEXT:    [[BF_SHL323:%.*]] = shl i64 [[BF_LOAD322]], 40
// CHK-CXX-NEXT:    [[BF_ASHR324:%.*]] = ashr i64 [[BF_SHL323]], 57
// CHK-CXX-NEXT:    [[CMP325:%.*]] = icmp eq i64 [[BF_ASHR324]], [[CONV306]]
// CHK-CXX-NEXT:    br i1 [[CMP325]], label [[ATOMIC_CONT313]], label [[ATOMIC_EXIT326]]
// CHK-CXX:       atomic_exit326:
// CHK-CXX-NEXT:    [[TMP123:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[CONV327:%.*]] = sext i32 [[TMP123]] to i64
// CHK-CXX-NEXT:    [[ATOMIC_LOAD328:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD328]], i64* [[ATOMIC_TEMP329]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD330:%.*]] = load i64, i64* [[ATOMIC_TEMP329]], align 8
// CHK-CXX-NEXT:    [[BF_SHL331:%.*]] = shl i64 [[BF_LOAD330]], 40
// CHK-CXX-NEXT:    [[BF_ASHR332:%.*]] = ashr i64 [[BF_SHL331]], 57
// CHK-CXX-NEXT:    [[CMP333:%.*]] = icmp slt i64 [[BF_ASHR332]], [[CONV327]]
// CHK-CXX-NEXT:    br i1 [[CMP333]], label [[ATOMIC_CONT334:%.*]], label [[ATOMIC_EXIT347:%.*]]
// CHK-CXX:       atomic_cont334:
// CHK-CXX-NEXT:    [[TMP124:%.*]] = phi i64 [ [[ATOMIC_LOAD328]], [[ATOMIC_EXIT326]] ], [ [[TMP127:%.*]], [[ATOMIC_CMP341:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP124]], i64* [[ATOMIC_TEMP335]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD336:%.*]] = load i64, i64* [[ATOMIC_TEMP335]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE337:%.*]] = and i64 [[CONV327]], 127
// CHK-CXX-NEXT:    [[BF_SHL338:%.*]] = shl i64 [[BF_VALUE337]], 17
// CHK-CXX-NEXT:    [[BF_CLEAR339:%.*]] = and i64 [[BF_LOAD336]], -16646145
// CHK-CXX-NEXT:    [[BF_SET340:%.*]] = or i64 [[BF_CLEAR339]], [[BF_SHL338]]
// CHK-CXX-NEXT:    store i64 [[BF_SET340]], i64* [[ATOMIC_TEMP335]], align 8
// CHK-CXX-NEXT:    [[TMP125:%.*]] = load i64, i64* [[ATOMIC_TEMP335]], align 8
// CHK-CXX-NEXT:    [[TMP126:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP124]], i64 [[TMP125]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP127]] = extractvalue { i64, i1 } [[TMP126]], 0
// CHK-CXX-NEXT:    [[TMP128:%.*]] = extractvalue { i64, i1 } [[TMP126]], 1
// CHK-CXX-NEXT:    br i1 [[TMP128]], label [[ATOMIC_EXIT347]], label [[ATOMIC_CMP341]]
// CHK-CXX:       atomic_cmp341:
// CHK-CXX-NEXT:    store i64 [[TMP127]], i64* [[ATOMIC_TEMP342]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD343:%.*]] = load i64, i64* [[ATOMIC_TEMP342]], align 8
// CHK-CXX-NEXT:    [[BF_SHL344:%.*]] = shl i64 [[BF_LOAD343]], 40
// CHK-CXX-NEXT:    [[BF_ASHR345:%.*]] = ashr i64 [[BF_SHL344]], 57
// CHK-CXX-NEXT:    [[CMP346:%.*]] = icmp slt i64 [[BF_ASHR345]], [[CONV327]]
// CHK-CXX-NEXT:    br i1 [[CMP346]], label [[ATOMIC_CONT334]], label [[ATOMIC_EXIT347]]
// CHK-CXX:       atomic_exit347:
// CHK-CXX-NEXT:    [[TMP129:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD348:%.*]] = load atomic i8, i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED:%.*]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2) monotonic, align 1
// CHK-CXX-NEXT:    [[TMP130:%.*]] = bitcast i32* [[ATOMIC_TEMP349]] to i8*
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD348]], i8* [[TMP130]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD350:%.*]] = load i8, i8* [[TMP130]], align 1
// CHK-CXX-NEXT:    [[BF_SHL351:%.*]] = shl i8 [[BF_LOAD350]], 7
// CHK-CXX-NEXT:    [[BF_ASHR352:%.*]] = ashr i8 [[BF_SHL351]], 7
// CHK-CXX-NEXT:    [[BF_CAST353:%.*]] = sext i8 [[BF_ASHR352]] to i32
// CHK-CXX-NEXT:    [[CMP354:%.*]] = icmp sgt i32 [[BF_CAST353]], [[TMP129]]
// CHK-CXX-NEXT:    br i1 [[CMP354]], label [[ATOMIC_CONT355:%.*]], label [[ATOMIC_EXIT368:%.*]]
// CHK-CXX:       atomic_cont355:
// CHK-CXX-NEXT:    [[TMP131:%.*]] = phi i8 [ [[ATOMIC_LOAD348]], [[ATOMIC_EXIT347]] ], [ [[TMP136:%.*]], [[ATOMIC_CMP361:%.*]] ]
// CHK-CXX-NEXT:    [[TMP132:%.*]] = bitcast i32* [[ATOMIC_TEMP356]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP131]], i8* [[TMP132]], align 1
// CHK-CXX-NEXT:    [[TMP133:%.*]] = trunc i32 [[TMP129]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD357:%.*]] = load i8, i8* [[TMP132]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE358:%.*]] = and i8 [[TMP133]], 1
// CHK-CXX-NEXT:    [[BF_CLEAR359:%.*]] = and i8 [[BF_LOAD357]], -2
// CHK-CXX-NEXT:    [[BF_SET360:%.*]] = or i8 [[BF_CLEAR359]], [[BF_VALUE358]]
// CHK-CXX-NEXT:    store i8 [[BF_SET360]], i8* [[TMP132]], align 1
// CHK-CXX-NEXT:    [[TMP134:%.*]] = load i8, i8* [[TMP132]], align 1
// CHK-CXX-NEXT:    [[TMP135:%.*]] = cmpxchg i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2), i8 [[TMP131]], i8 [[TMP134]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP136]] = extractvalue { i8, i1 } [[TMP135]], 0
// CHK-CXX-NEXT:    [[TMP137:%.*]] = extractvalue { i8, i1 } [[TMP135]], 1
// CHK-CXX-NEXT:    br i1 [[TMP137]], label [[ATOMIC_EXIT368]], label [[ATOMIC_CMP361]]
// CHK-CXX:       atomic_cmp361:
// CHK-CXX-NEXT:    [[TMP138:%.*]] = bitcast i32* [[ATOMIC_TEMP362]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP136]], i8* [[TMP138]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD363:%.*]] = load i8, i8* [[TMP138]], align 1
// CHK-CXX-NEXT:    [[BF_SHL364:%.*]] = shl i8 [[BF_LOAD363]], 7
// CHK-CXX-NEXT:    [[BF_ASHR365:%.*]] = ashr i8 [[BF_SHL364]], 7
// CHK-CXX-NEXT:    [[BF_CAST366:%.*]] = sext i8 [[BF_ASHR365]] to i32
// CHK-CXX-NEXT:    [[CMP367:%.*]] = icmp sgt i32 [[BF_CAST366]], [[TMP129]]
// CHK-CXX-NEXT:    br i1 [[CMP367]], label [[ATOMIC_CONT355]], label [[ATOMIC_EXIT368]]
// CHK-CXX:       atomic_exit368:
// CHK-CXX-NEXT:    [[TMP139:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP140:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD369:%.*]] = load atomic i8, i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2) monotonic, align 1
// CHK-CXX-NEXT:    [[TMP141:%.*]] = bitcast i32* [[ATOMIC_TEMP370]] to i8*
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD369]], i8* [[TMP141]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD371:%.*]] = load i8, i8* [[TMP141]], align 1
// CHK-CXX-NEXT:    [[BF_SHL372:%.*]] = shl i8 [[BF_LOAD371]], 7
// CHK-CXX-NEXT:    [[BF_ASHR373:%.*]] = ashr i8 [[BF_SHL372]], 7
// CHK-CXX-NEXT:    [[BF_CAST374:%.*]] = sext i8 [[BF_ASHR373]] to i32
// CHK-CXX-NEXT:    [[CMP375:%.*]] = icmp eq i32 [[BF_CAST374]], [[TMP140]]
// CHK-CXX-NEXT:    br i1 [[CMP375]], label [[ATOMIC_CONT376:%.*]], label [[ATOMIC_EXIT389:%.*]]
// CHK-CXX:       atomic_cont376:
// CHK-CXX-NEXT:    [[TMP142:%.*]] = phi i8 [ [[ATOMIC_LOAD369]], [[ATOMIC_EXIT368]] ], [ [[TMP147:%.*]], [[ATOMIC_CMP382:%.*]] ]
// CHK-CXX-NEXT:    [[TMP143:%.*]] = bitcast i32* [[ATOMIC_TEMP377]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP142]], i8* [[TMP143]], align 1
// CHK-CXX-NEXT:    [[TMP144:%.*]] = trunc i32 [[TMP139]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD378:%.*]] = load i8, i8* [[TMP143]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE379:%.*]] = and i8 [[TMP144]], 1
// CHK-CXX-NEXT:    [[BF_CLEAR380:%.*]] = and i8 [[BF_LOAD378]], -2
// CHK-CXX-NEXT:    [[BF_SET381:%.*]] = or i8 [[BF_CLEAR380]], [[BF_VALUE379]]
// CHK-CXX-NEXT:    store i8 [[BF_SET381]], i8* [[TMP143]], align 1
// CHK-CXX-NEXT:    [[TMP145:%.*]] = load i8, i8* [[TMP143]], align 1
// CHK-CXX-NEXT:    [[TMP146:%.*]] = cmpxchg i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2), i8 [[TMP142]], i8 [[TMP145]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP147]] = extractvalue { i8, i1 } [[TMP146]], 0
// CHK-CXX-NEXT:    [[TMP148:%.*]] = extractvalue { i8, i1 } [[TMP146]], 1
// CHK-CXX-NEXT:    br i1 [[TMP148]], label [[ATOMIC_EXIT389]], label [[ATOMIC_CMP382]]
// CHK-CXX:       atomic_cmp382:
// CHK-CXX-NEXT:    [[TMP149:%.*]] = bitcast i32* [[ATOMIC_TEMP383]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP147]], i8* [[TMP149]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD384:%.*]] = load i8, i8* [[TMP149]], align 1
// CHK-CXX-NEXT:    [[BF_SHL385:%.*]] = shl i8 [[BF_LOAD384]], 7
// CHK-CXX-NEXT:    [[BF_ASHR386:%.*]] = ashr i8 [[BF_SHL385]], 7
// CHK-CXX-NEXT:    [[BF_CAST387:%.*]] = sext i8 [[BF_ASHR386]] to i32
// CHK-CXX-NEXT:    [[CMP388:%.*]] = icmp eq i32 [[BF_CAST387]], [[TMP140]]
// CHK-CXX-NEXT:    br i1 [[CMP388]], label [[ATOMIC_CONT376]], label [[ATOMIC_EXIT389]]
// CHK-CXX:       atomic_exit389:
// CHK-CXX-NEXT:    [[TMP150:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD390:%.*]] = load atomic i8, i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2) monotonic, align 1
// CHK-CXX-NEXT:    [[TMP151:%.*]] = bitcast i32* [[ATOMIC_TEMP391]] to i8*
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD390]], i8* [[TMP151]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD392:%.*]] = load i8, i8* [[TMP151]], align 1
// CHK-CXX-NEXT:    [[BF_SHL393:%.*]] = shl i8 [[BF_LOAD392]], 7
// CHK-CXX-NEXT:    [[BF_ASHR394:%.*]] = ashr i8 [[BF_SHL393]], 7
// CHK-CXX-NEXT:    [[BF_CAST395:%.*]] = sext i8 [[BF_ASHR394]] to i32
// CHK-CXX-NEXT:    [[CMP396:%.*]] = icmp slt i32 [[BF_CAST395]], [[TMP150]]
// CHK-CXX-NEXT:    br i1 [[CMP396]], label [[ATOMIC_CONT397:%.*]], label [[ATOMIC_EXIT410:%.*]]
// CHK-CXX:       atomic_cont397:
// CHK-CXX-NEXT:    [[TMP152:%.*]] = phi i8 [ [[ATOMIC_LOAD390]], [[ATOMIC_EXIT389]] ], [ [[TMP157:%.*]], [[ATOMIC_CMP403:%.*]] ]
// CHK-CXX-NEXT:    [[TMP153:%.*]] = bitcast i32* [[ATOMIC_TEMP398]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP152]], i8* [[TMP153]], align 1
// CHK-CXX-NEXT:    [[TMP154:%.*]] = trunc i32 [[TMP150]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD399:%.*]] = load i8, i8* [[TMP153]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE400:%.*]] = and i8 [[TMP154]], 1
// CHK-CXX-NEXT:    [[BF_CLEAR401:%.*]] = and i8 [[BF_LOAD399]], -2
// CHK-CXX-NEXT:    [[BF_SET402:%.*]] = or i8 [[BF_CLEAR401]], [[BF_VALUE400]]
// CHK-CXX-NEXT:    store i8 [[BF_SET402]], i8* [[TMP153]], align 1
// CHK-CXX-NEXT:    [[TMP155:%.*]] = load i8, i8* [[TMP153]], align 1
// CHK-CXX-NEXT:    [[TMP156:%.*]] = cmpxchg i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2), i8 [[TMP152]], i8 [[TMP155]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP157]] = extractvalue { i8, i1 } [[TMP156]], 0
// CHK-CXX-NEXT:    [[TMP158:%.*]] = extractvalue { i8, i1 } [[TMP156]], 1
// CHK-CXX-NEXT:    br i1 [[TMP158]], label [[ATOMIC_EXIT410]], label [[ATOMIC_CMP403]]
// CHK-CXX:       atomic_cmp403:
// CHK-CXX-NEXT:    [[TMP159:%.*]] = bitcast i32* [[ATOMIC_TEMP404]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP157]], i8* [[TMP159]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD405:%.*]] = load i8, i8* [[TMP159]], align 1
// CHK-CXX-NEXT:    [[BF_SHL406:%.*]] = shl i8 [[BF_LOAD405]], 7
// CHK-CXX-NEXT:    [[BF_ASHR407:%.*]] = ashr i8 [[BF_SHL406]], 7
// CHK-CXX-NEXT:    [[BF_CAST408:%.*]] = sext i8 [[BF_ASHR407]] to i32
// CHK-CXX-NEXT:    [[CMP409:%.*]] = icmp slt i32 [[BF_CAST408]], [[TMP150]]
// CHK-CXX-NEXT:    br i1 [[CMP409]], label [[ATOMIC_CONT397]], label [[ATOMIC_EXIT410]]
// CHK-CXX:       atomic_exit410:
// CHK-CXX-NEXT:    ret void
//
void test_bitfield()
{
  int expr, d, e;

  #pragma omp atomic compare
  bfx.a = expr < bfx.a ? expr : bfx.a; // MIN

  #pragma omp atomic compare
  bfx.a = bfx.a == e ? d : bfx.a;

  #pragma omp atomic compare
  if (bfx.a < expr) { bfx.a = expr; } // MAX

#ifdef LIBCALLS
  #pragma omp atomic compare
  bfx_packed.a = expr < bfx_packed.a ? expr : bfx_packed.a; // MIN

  #pragma omp atomic compare
  bfx_packed.a = bfx_packed.a == e ? d : bfx_packed.a;

  #pragma omp atomic compare
  if (bfx_packed.a < expr) { bfx_packed.a = expr; } // MAX
#endif

  #pragma omp atomic compare
  bfx2.a = expr < bfx2.a ? expr : bfx2.a; // MIN

  #pragma omp atomic compare
  bfx2.a = bfx2.a == e ? d : bfx2.a;

  #pragma omp atomic compare
  if (bfx2.a < expr) { bfx2.a = expr; } // MAX

  #pragma omp atomic compare
  bfx2_packed.a = expr < bfx2_packed.a ? expr : bfx2_packed.a; // MIN

  #pragma omp atomic compare
  bfx2_packed.a = bfx2_packed.a == e ? d : bfx2_packed.a;

  #pragma omp atomic compare
  if (bfx2_packed.a < expr) { bfx2_packed.a = expr; } // MAX

  #pragma omp atomic compare
  bfx3.a = expr < bfx3.a ? expr : bfx3.a; // MIN

  #pragma omp atomic compare
  bfx3.a = bfx3.a == e ? d : bfx3.a;

  #pragma omp atomic compare
  if (bfx3.a < expr) { bfx3.a = expr; } // MAX

#ifdef LIBCALLS
  #pragma omp atomic compare
  bfx3_packed.a = expr < bfx3_packed.a ? expr : bfx3_packed.a; // MIN

  #pragma omp atomic compare
  bfx3_packed.a = bfx3_packed.a == e ? d : bfx3_packed.a;

  #pragma omp atomic compare
  if (bfx3_packed.a < expr) { bfx3_packed.a = expr; } // MAX
#endif

  #pragma omp atomic compare
  bfx4.a = expr < bfx4.a ? expr : bfx4.a; // MIN

  #pragma omp atomic compare
  bfx4.a = bfx4.a == e ? d : bfx4.a;

  #pragma omp atomic compare
  if (bfx4.a < expr) { bfx4.a = expr; } // MAX

  #pragma omp atomic compare
  bfx4.b = expr < bfx4.b ? expr : bfx4.b; // MIN

  #pragma omp atomic compare
  bfx4.b = bfx4.b == e ? d : bfx4.b;

  #pragma omp atomic compare
  if (bfx4.b < expr) { bfx4.b = expr; } // MAX

  #pragma omp atomic compare
  bfx4_packed.a = expr < bfx4_packed.a ? expr : bfx4_packed.a; // MIN

  #pragma omp atomic compare
  bfx4_packed.a = bfx4_packed.a == e ? d : bfx4_packed.a;

  #pragma omp atomic compare
  if (bfx4_packed.a < expr) { bfx4_packed.a = expr; } // MAX
}

// CHK-C-LABEL: @test_ext_vector(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[FLOAT2X:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP1:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP2:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP8:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP10:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP12:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP16:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP18:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP20:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP22:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP28:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP32:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP34:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[TMP0:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[CONV:%.*]] = sitofp i32 [[TMP0]] to float
// CHK-C-NEXT:    [[TMP1:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, i64* [[TMP1]] monotonic, align 8
// CHK-C-NEXT:    [[STORETMP:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP]] to i64*
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD]], i64* [[STORETMP]], align 8
// CHK-C-NEXT:    [[TMP2:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP]], align 8
// CHK-C-NEXT:    [[TMP3:%.*]] = extractelement <2 x float> [[TMP2]], i64 0
// CHK-C-NEXT:    [[CMP:%.*]] = fcmp ogt float [[TMP3]], [[CONV]]
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP4:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP11:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    [[TMP5:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP1]] to i64*
// CHK-C-NEXT:    store i64 [[TMP4]], i64* [[TMP5]], align 8
// CHK-C-NEXT:    [[TMP6:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP1]], align 8
// CHK-C-NEXT:    [[TMP7:%.*]] = insertelement <2 x float> [[TMP6]], float [[CONV]], i64 0
// CHK-C-NEXT:    store <2 x float> [[TMP7]], <2 x float>* [[ATOMIC_TEMP1]], align 8
// CHK-C-NEXT:    [[TMP8:%.*]] = load i64, i64* [[TMP5]], align 8
// CHK-C-NEXT:    [[TMP9:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-C-NEXT:    [[TMP10:%.*]] = cmpxchg i64* [[TMP9]], i64 [[TMP4]], i64 [[TMP8]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP11]] = extractvalue { i64, i1 } [[TMP10]], 0
// CHK-C-NEXT:    [[TMP12:%.*]] = extractvalue { i64, i1 } [[TMP10]], 1
// CHK-C-NEXT:    br i1 [[TMP12]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    [[STORETMP3:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP2]] to i64*
// CHK-C-NEXT:    store i64 [[TMP11]], i64* [[STORETMP3]], align 8
// CHK-C-NEXT:    [[TMP13:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP2]], align 8
// CHK-C-NEXT:    [[TMP14:%.*]] = extractelement <2 x float> [[TMP13]], i64 0
// CHK-C-NEXT:    [[CMP4:%.*]] = fcmp ogt float [[TMP14]], [[CONV]]
// CHK-C-NEXT:    br i1 [[CMP4]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP15:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[CONV5:%.*]] = sitofp i32 [[TMP15]] to float
// CHK-C-NEXT:    [[TMP16:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[CONV6:%.*]] = sitofp i32 [[TMP16]] to float
// CHK-C-NEXT:    [[TMP17:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD7:%.*]] = load atomic i64, i64* [[TMP17]] monotonic, align 8
// CHK-C-NEXT:    [[STORETMP9:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP8]] to i64*
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD7]], i64* [[STORETMP9]], align 8
// CHK-C-NEXT:    [[TMP18:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP8]], align 8
// CHK-C-NEXT:    [[TMP19:%.*]] = extractelement <2 x float> [[TMP18]], i64 0
// CHK-C-NEXT:    [[STORETMP11:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP10]] to float*
// CHK-C-NEXT:    store float [[TMP19]], float* [[STORETMP11]], align 8
// CHK-C-NEXT:    [[TMP20:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP10]] to i64*
// CHK-C-NEXT:    [[TMP21:%.*]] = load i64, i64* [[TMP20]], align 8
// CHK-C-NEXT:    [[STORETMP13:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP12]] to float*
// CHK-C-NEXT:    store float [[CONV6]], float* [[STORETMP13]], align 8
// CHK-C-NEXT:    [[TMP22:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP12]] to i64*
// CHK-C-NEXT:    [[TMP23:%.*]] = load i64, i64* [[TMP22]], align 8
// CHK-C-NEXT:    [[CMP14:%.*]] = icmp eq i64 [[TMP21]], [[TMP23]]
// CHK-C-NEXT:    br i1 [[CMP14]], label [[ATOMIC_CONT15:%.*]], label [[ATOMIC_EXIT25:%.*]]
// CHK-C:       atomic_cont15:
// CHK-C-NEXT:    [[TMP24:%.*]] = phi i64 [ [[ATOMIC_LOAD7]], [[ATOMIC_EXIT]] ], [ [[TMP31:%.*]], [[ATOMIC_CMP17:%.*]] ]
// CHK-C-NEXT:    [[TMP25:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP16]] to i64*
// CHK-C-NEXT:    store i64 [[TMP24]], i64* [[TMP25]], align 8
// CHK-C-NEXT:    [[TMP26:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP16]], align 8
// CHK-C-NEXT:    [[TMP27:%.*]] = insertelement <2 x float> [[TMP26]], float [[CONV5]], i64 0
// CHK-C-NEXT:    store <2 x float> [[TMP27]], <2 x float>* [[ATOMIC_TEMP16]], align 8
// CHK-C-NEXT:    [[TMP28:%.*]] = load i64, i64* [[TMP25]], align 8
// CHK-C-NEXT:    [[TMP29:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-C-NEXT:    [[TMP30:%.*]] = cmpxchg i64* [[TMP29]], i64 [[TMP24]], i64 [[TMP28]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP31]] = extractvalue { i64, i1 } [[TMP30]], 0
// CHK-C-NEXT:    [[TMP32:%.*]] = extractvalue { i64, i1 } [[TMP30]], 1
// CHK-C-NEXT:    br i1 [[TMP32]], label [[ATOMIC_EXIT25]], label [[ATOMIC_CMP17]]
// CHK-C:       atomic_cmp17:
// CHK-C-NEXT:    [[STORETMP19:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP18]] to i64*
// CHK-C-NEXT:    store i64 [[TMP31]], i64* [[STORETMP19]], align 8
// CHK-C-NEXT:    [[TMP33:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP18]], align 8
// CHK-C-NEXT:    [[TMP34:%.*]] = extractelement <2 x float> [[TMP33]], i64 0
// CHK-C-NEXT:    [[STORETMP21:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP20]] to float*
// CHK-C-NEXT:    store float [[TMP34]], float* [[STORETMP21]], align 8
// CHK-C-NEXT:    [[TMP35:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP20]] to i64*
// CHK-C-NEXT:    [[TMP36:%.*]] = load i64, i64* [[TMP35]], align 8
// CHK-C-NEXT:    [[STORETMP23:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP22]] to float*
// CHK-C-NEXT:    store float [[CONV6]], float* [[STORETMP23]], align 8
// CHK-C-NEXT:    [[TMP37:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP22]] to i64*
// CHK-C-NEXT:    [[TMP38:%.*]] = load i64, i64* [[TMP37]], align 8
// CHK-C-NEXT:    [[CMP24:%.*]] = icmp eq i64 [[TMP36]], [[TMP38]]
// CHK-C-NEXT:    br i1 [[CMP24]], label [[ATOMIC_CONT15]], label [[ATOMIC_EXIT25]]
// CHK-C:       atomic_exit25:
// CHK-C-NEXT:    [[TMP39:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[CONV26:%.*]] = sitofp i32 [[TMP39]] to float
// CHK-C-NEXT:    [[TMP40:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD27:%.*]] = load atomic i64, i64* [[TMP40]] monotonic, align 8
// CHK-C-NEXT:    [[STORETMP29:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP28]] to i64*
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD27]], i64* [[STORETMP29]], align 8
// CHK-C-NEXT:    [[TMP41:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP28]], align 8
// CHK-C-NEXT:    [[TMP42:%.*]] = extractelement <2 x float> [[TMP41]], i64 0
// CHK-C-NEXT:    [[CMP30:%.*]] = fcmp olt float [[TMP42]], [[CONV26]]
// CHK-C-NEXT:    br i1 [[CMP30]], label [[ATOMIC_CONT31:%.*]], label [[ATOMIC_EXIT37:%.*]]
// CHK-C:       atomic_cont31:
// CHK-C-NEXT:    [[TMP43:%.*]] = phi i64 [ [[ATOMIC_LOAD27]], [[ATOMIC_EXIT25]] ], [ [[TMP50:%.*]], [[ATOMIC_CMP33:%.*]] ]
// CHK-C-NEXT:    [[TMP44:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP32]] to i64*
// CHK-C-NEXT:    store i64 [[TMP43]], i64* [[TMP44]], align 8
// CHK-C-NEXT:    [[TMP45:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP32]], align 8
// CHK-C-NEXT:    [[TMP46:%.*]] = insertelement <2 x float> [[TMP45]], float [[CONV26]], i64 0
// CHK-C-NEXT:    store <2 x float> [[TMP46]], <2 x float>* [[ATOMIC_TEMP32]], align 8
// CHK-C-NEXT:    [[TMP47:%.*]] = load i64, i64* [[TMP44]], align 8
// CHK-C-NEXT:    [[TMP48:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-C-NEXT:    [[TMP49:%.*]] = cmpxchg i64* [[TMP48]], i64 [[TMP43]], i64 [[TMP47]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP50]] = extractvalue { i64, i1 } [[TMP49]], 0
// CHK-C-NEXT:    [[TMP51:%.*]] = extractvalue { i64, i1 } [[TMP49]], 1
// CHK-C-NEXT:    br i1 [[TMP51]], label [[ATOMIC_EXIT37]], label [[ATOMIC_CMP33]]
// CHK-C:       atomic_cmp33:
// CHK-C-NEXT:    [[STORETMP35:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP34]] to i64*
// CHK-C-NEXT:    store i64 [[TMP50]], i64* [[STORETMP35]], align 8
// CHK-C-NEXT:    [[TMP52:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP34]], align 8
// CHK-C-NEXT:    [[TMP53:%.*]] = extractelement <2 x float> [[TMP52]], i64 0
// CHK-C-NEXT:    [[CMP36:%.*]] = fcmp olt float [[TMP53]], [[CONV26]]
// CHK-C-NEXT:    br i1 [[CMP36]], label [[ATOMIC_CONT31]], label [[ATOMIC_EXIT37]]
// CHK-C:       atomic_exit37:
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z15test_ext_vectorv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[FLOAT2X:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP1:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP2:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP8:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP10:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP12:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP16:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP18:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP20:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP22:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP28:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP32:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP34:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[CONV:%.*]] = sitofp i32 [[TMP0]] to float
// CHK-CXX-NEXT:    [[TMP1:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, i64* [[TMP1]] monotonic, align 8
// CHK-CXX-NEXT:    [[STORETMP:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP]] to i64*
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD]], i64* [[STORETMP]], align 8
// CHK-CXX-NEXT:    [[TMP2:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP]], align 8
// CHK-CXX-NEXT:    [[TMP3:%.*]] = extractelement <2 x float> [[TMP2]], i64 0
// CHK-CXX-NEXT:    [[CMP:%.*]] = fcmp ogt float [[TMP3]], [[CONV]]
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP4:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP11:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    [[TMP5:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP1]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP4]], i64* [[TMP5]], align 8
// CHK-CXX-NEXT:    [[TMP6:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP1]], align 8
// CHK-CXX-NEXT:    [[TMP7:%.*]] = insertelement <2 x float> [[TMP6]], float [[CONV]], i64 0
// CHK-CXX-NEXT:    store <2 x float> [[TMP7]], <2 x float>* [[ATOMIC_TEMP1]], align 8
// CHK-CXX-NEXT:    [[TMP8:%.*]] = load i64, i64* [[TMP5]], align 8
// CHK-CXX-NEXT:    [[TMP9:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-CXX-NEXT:    [[TMP10:%.*]] = cmpxchg i64* [[TMP9]], i64 [[TMP4]], i64 [[TMP8]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP11]] = extractvalue { i64, i1 } [[TMP10]], 0
// CHK-CXX-NEXT:    [[TMP12:%.*]] = extractvalue { i64, i1 } [[TMP10]], 1
// CHK-CXX-NEXT:    br i1 [[TMP12]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    [[STORETMP3:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP2]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP11]], i64* [[STORETMP3]], align 8
// CHK-CXX-NEXT:    [[TMP13:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP2]], align 8
// CHK-CXX-NEXT:    [[TMP14:%.*]] = extractelement <2 x float> [[TMP13]], i64 0
// CHK-CXX-NEXT:    [[CMP4:%.*]] = fcmp ogt float [[TMP14]], [[CONV]]
// CHK-CXX-NEXT:    br i1 [[CMP4]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP15:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[CONV5:%.*]] = sitofp i32 [[TMP15]] to float
// CHK-CXX-NEXT:    [[TMP16:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[CONV6:%.*]] = sitofp i32 [[TMP16]] to float
// CHK-CXX-NEXT:    [[TMP17:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD7:%.*]] = load atomic i64, i64* [[TMP17]] monotonic, align 8
// CHK-CXX-NEXT:    [[STORETMP9:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP8]] to i64*
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD7]], i64* [[STORETMP9]], align 8
// CHK-CXX-NEXT:    [[TMP18:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP8]], align 8
// CHK-CXX-NEXT:    [[TMP19:%.*]] = extractelement <2 x float> [[TMP18]], i64 0
// CHK-CXX-NEXT:    [[STORETMP11:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP10]] to float*
// CHK-CXX-NEXT:    store float [[TMP19]], float* [[STORETMP11]], align 8
// CHK-CXX-NEXT:    [[TMP20:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP10]] to i64*
// CHK-CXX-NEXT:    [[TMP21:%.*]] = load i64, i64* [[TMP20]], align 8
// CHK-CXX-NEXT:    [[STORETMP13:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP12]] to float*
// CHK-CXX-NEXT:    store float [[CONV6]], float* [[STORETMP13]], align 8
// CHK-CXX-NEXT:    [[TMP22:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP12]] to i64*
// CHK-CXX-NEXT:    [[TMP23:%.*]] = load i64, i64* [[TMP22]], align 8
// CHK-CXX-NEXT:    [[CMP14:%.*]] = icmp eq i64 [[TMP21]], [[TMP23]]
// CHK-CXX-NEXT:    br i1 [[CMP14]], label [[ATOMIC_CONT15:%.*]], label [[ATOMIC_EXIT25:%.*]]
// CHK-CXX:       atomic_cont15:
// CHK-CXX-NEXT:    [[TMP24:%.*]] = phi i64 [ [[ATOMIC_LOAD7]], [[ATOMIC_EXIT]] ], [ [[TMP31:%.*]], [[ATOMIC_CMP17:%.*]] ]
// CHK-CXX-NEXT:    [[TMP25:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP16]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP24]], i64* [[TMP25]], align 8
// CHK-CXX-NEXT:    [[TMP26:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP16]], align 8
// CHK-CXX-NEXT:    [[TMP27:%.*]] = insertelement <2 x float> [[TMP26]], float [[CONV5]], i64 0
// CHK-CXX-NEXT:    store <2 x float> [[TMP27]], <2 x float>* [[ATOMIC_TEMP16]], align 8
// CHK-CXX-NEXT:    [[TMP28:%.*]] = load i64, i64* [[TMP25]], align 8
// CHK-CXX-NEXT:    [[TMP29:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-CXX-NEXT:    [[TMP30:%.*]] = cmpxchg i64* [[TMP29]], i64 [[TMP24]], i64 [[TMP28]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP31]] = extractvalue { i64, i1 } [[TMP30]], 0
// CHK-CXX-NEXT:    [[TMP32:%.*]] = extractvalue { i64, i1 } [[TMP30]], 1
// CHK-CXX-NEXT:    br i1 [[TMP32]], label [[ATOMIC_EXIT25]], label [[ATOMIC_CMP17]]
// CHK-CXX:       atomic_cmp17:
// CHK-CXX-NEXT:    [[STORETMP19:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP18]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP31]], i64* [[STORETMP19]], align 8
// CHK-CXX-NEXT:    [[TMP33:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP18]], align 8
// CHK-CXX-NEXT:    [[TMP34:%.*]] = extractelement <2 x float> [[TMP33]], i64 0
// CHK-CXX-NEXT:    [[STORETMP21:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP20]] to float*
// CHK-CXX-NEXT:    store float [[TMP34]], float* [[STORETMP21]], align 8
// CHK-CXX-NEXT:    [[TMP35:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP20]] to i64*
// CHK-CXX-NEXT:    [[TMP36:%.*]] = load i64, i64* [[TMP35]], align 8
// CHK-CXX-NEXT:    [[STORETMP23:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP22]] to float*
// CHK-CXX-NEXT:    store float [[CONV6]], float* [[STORETMP23]], align 8
// CHK-CXX-NEXT:    [[TMP37:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP22]] to i64*
// CHK-CXX-NEXT:    [[TMP38:%.*]] = load i64, i64* [[TMP37]], align 8
// CHK-CXX-NEXT:    [[CMP24:%.*]] = icmp eq i64 [[TMP36]], [[TMP38]]
// CHK-CXX-NEXT:    br i1 [[CMP24]], label [[ATOMIC_CONT15]], label [[ATOMIC_EXIT25]]
// CHK-CXX:       atomic_exit25:
// CHK-CXX-NEXT:    [[TMP39:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[CONV26:%.*]] = sitofp i32 [[TMP39]] to float
// CHK-CXX-NEXT:    [[TMP40:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD27:%.*]] = load atomic i64, i64* [[TMP40]] monotonic, align 8
// CHK-CXX-NEXT:    [[STORETMP29:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP28]] to i64*
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD27]], i64* [[STORETMP29]], align 8
// CHK-CXX-NEXT:    [[TMP41:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP28]], align 8
// CHK-CXX-NEXT:    [[TMP42:%.*]] = extractelement <2 x float> [[TMP41]], i64 0
// CHK-CXX-NEXT:    [[CMP30:%.*]] = fcmp olt float [[TMP42]], [[CONV26]]
// CHK-CXX-NEXT:    br i1 [[CMP30]], label [[ATOMIC_CONT31:%.*]], label [[ATOMIC_EXIT37:%.*]]
// CHK-CXX:       atomic_cont31:
// CHK-CXX-NEXT:    [[TMP43:%.*]] = phi i64 [ [[ATOMIC_LOAD27]], [[ATOMIC_EXIT25]] ], [ [[TMP50:%.*]], [[ATOMIC_CMP33:%.*]] ]
// CHK-CXX-NEXT:    [[TMP44:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP32]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP43]], i64* [[TMP44]], align 8
// CHK-CXX-NEXT:    [[TMP45:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP32]], align 8
// CHK-CXX-NEXT:    [[TMP46:%.*]] = insertelement <2 x float> [[TMP45]], float [[CONV26]], i64 0
// CHK-CXX-NEXT:    store <2 x float> [[TMP46]], <2 x float>* [[ATOMIC_TEMP32]], align 8
// CHK-CXX-NEXT:    [[TMP47:%.*]] = load i64, i64* [[TMP44]], align 8
// CHK-CXX-NEXT:    [[TMP48:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-CXX-NEXT:    [[TMP49:%.*]] = cmpxchg i64* [[TMP48]], i64 [[TMP43]], i64 [[TMP47]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP50]] = extractvalue { i64, i1 } [[TMP49]], 0
// CHK-CXX-NEXT:    [[TMP51:%.*]] = extractvalue { i64, i1 } [[TMP49]], 1
// CHK-CXX-NEXT:    br i1 [[TMP51]], label [[ATOMIC_EXIT37]], label [[ATOMIC_CMP33]]
// CHK-CXX:       atomic_cmp33:
// CHK-CXX-NEXT:    [[STORETMP35:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP34]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP50]], i64* [[STORETMP35]], align 8
// CHK-CXX-NEXT:    [[TMP52:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP34]], align 8
// CHK-CXX-NEXT:    [[TMP53:%.*]] = extractelement <2 x float> [[TMP52]], i64 0
// CHK-CXX-NEXT:    [[CMP36:%.*]] = fcmp olt float [[TMP53]], [[CONV26]]
// CHK-CXX-NEXT:    br i1 [[CMP36]], label [[ATOMIC_CONT31]], label [[ATOMIC_EXIT37]]
// CHK-CXX:       atomic_exit37:
// CHK-CXX-NEXT:    ret void
//
void test_ext_vector() {
  typedef float float2 __attribute__((ext_vector_type(2)));
  float2 float2x;

  int expr, d, e;

  #pragma omp atomic compare
  float2x.x = expr < float2x.x ? expr : float2x.x; // MIN

  #pragma omp atomic compare
  float2x.x = float2x.x == e ? d : float2x.x;

  #pragma omp atomic compare
  if (float2x.x < expr) { float2x.x = expr; } // MAX
}

#endif // HEADER
