// INTEL_COLLAB
// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --prefix-filecheck-ir-name _
//
// RUN: %clang_cc1 -opaque-pointers -emit-llvm -o - -fopenmp -fopenmp-late-outline -fopenmp-typed-clauses \
// RUN: -triple x86_64-unknown-linux-gnu -fopenmp-version=51 %s | \
// RUN: FileCheck --check-prefix=CHECK-NEW %s

// RUN: %clang_cc1 -opaque-pointers -emit-llvm -o - -fopenmp -fopenmp-late-outline -fopenmp-typed-clauses \
// RUN: -triple x86_64-unknown-linux-gnu -fopenmp-version=51 %s \
// RUN: -fno-openmp-new-depend-ir | FileCheck %s

// RUN: %clang_cc1 -opaque-pointers -fopenmp -fopenmp-late-outline -fopenmp-typed-clauses \
// RUN: -triple x86_64-unknown-linux-gnu -fopenmp-version=51 \
// RUN: -emit-pch %s -o %t

// RUN: %clang_cc1 -opaque-pointers -fopenmp -fopenmp-late-outline -fopenmp-typed-clauses \
// RUN: -triple x86_64-unknown-linux-gnu -fopenmp-version=51 \
// RUN: -include-pch %t -emit-llvm %s -o - | \
// RUN: FileCheck --check-prefix=CHECK-NEW %s

// RUN: %clang_cc1 -opaque-pointers -fopenmp -fopenmp-late-outline -fopenmp-typed-clauses \
// RUN: -triple x86_64-unknown-linux-gnu -fopenmp-version=51 \
// RUN: -fno-openmp-new-depend-ir -emit-pch %s -o %t

// RUN: %clang_cc1 -opaque-pointers -fopenmp -fopenmp-late-outline -fopenmp-typed-clauses \
// RUN: -triple x86_64-unknown-linux-gnu -fopenmp-version=51 \
// RUN: -include-pch %t -fno-openmp-new-depend-ir -emit-llvm %s -o - | \
// RUN: FileCheck %s
// expected-no-diagnostics
//
#ifndef HEADER
#define HEADER
// CHECK-NEW-LABEL: @_Z3foov(
// CHECK-NEW-NEXT:  entry:
// CHECK-NEW-NEXT:    [[VAR:%.*]] = alloca i32, align 4
// CHECK-NEW-NEXT:    [[ARR:%.*]] = alloca [100 x i32], align 16
// CHECK-NEW-NEXT:    [[DOTDEP_ARR_ADDR:%.*]] = alloca [1 x %struct.kmp_depend_info], align 8
// CHECK-NEW-NEXT:    [[DEP_COUNTER_ADDR:%.*]] = alloca i64, align 8
// CHECK-NEW-NEXT:    [[DOTDEP_ARR_ADDR1:%.*]] = alloca [1 x %struct.kmp_depend_info], align 8
// CHECK-NEW-NEXT:    [[DEP_COUNTER_ADDR2:%.*]] = alloca i64, align 8
// CHECK-NEW-NEXT:    [[DOTDEP_ARR_ADDR3:%.*]] = alloca [1 x %struct.kmp_depend_info], align 8
// CHECK-NEW-NEXT:    [[DEP_COUNTER_ADDR4:%.*]] = alloca i64, align 8
// CHECK-NEW-NEXT:    [[DOTDEP_ARR_ADDR5:%.*]] = alloca [1 x %struct.kmp_depend_info], align 8
// CHECK-NEW-NEXT:    [[DEP_COUNTER_ADDR6:%.*]] = alloca i64, align 8
// CHECK-NEW-NEXT:    [[DOTDEP_ARR_ADDR7:%.*]] = alloca [1 x %struct.kmp_depend_info], align 8
// CHECK-NEW-NEXT:    [[DEP_COUNTER_ADDR9:%.*]] = alloca i64, align 8
// CHECK-NEW-NEXT:    [[DOTDEP_ARR_ADDR10:%.*]] = alloca [1 x %struct.kmp_depend_info], align 8
// CHECK-NEW-NEXT:    [[DEP_COUNTER_ADDR11:%.*]] = alloca i64, align 8
// CHECK-NEW-NEXT:    [[DOTDEP_ARR_ADDR12:%.*]] = alloca [3 x %struct.kmp_depend_info], align 8
// CHECK-NEW-NEXT:    [[DEP_COUNTER_ADDR13:%.*]] = alloca i64, align 8
// CHECK-NEW-NEXT:    store i32 1, ptr [[VAR]], align 4
// CHECK-NEW-NEXT:    call void @llvm.memset.p0.i64(ptr align 16 [[ARR]], i8 0, i64 400, i1 false)
// CHECK-NEW-NEXT:    [[ARRAY_BEGIN:%.*]] = getelementptr inbounds [100 x i32], ptr [[ARR]], i32 0, i32 0
// CHECK-NEW-NEXT:    [[TMP0:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASK"(), "QUAL.OMP.FIRSTPRIVATE:TYPED"(ptr [[VAR]], i32 0, i32 1), "QUAL.OMP.FIRSTPRIVATE:TYPED"(ptr [[ARR]], i32 0, i64 100), "QUAL.OMP.PRIVATE:TYPED"(ptr [[DOTDEP_ARR_ADDR]], [1 x %struct.kmp_depend_info] zeroinitializer, i32 1), "QUAL.OMP.PRIVATE:TYPED"(ptr [[DEP_COUNTER_ADDR]], i64 0, i32 1), "QUAL.OMP.PRIVATE:TYPED"(ptr [[DOTDEP_ARR_ADDR1]], [1 x %struct.kmp_depend_info] zeroinitializer, i32 1), "QUAL.OMP.PRIVATE:TYPED"(ptr [[DEP_COUNTER_ADDR2]], i64 0, i32 1), "QUAL.OMP.PRIVATE:TYPED"(ptr [[DOTDEP_ARR_ADDR3]], [1 x %struct.kmp_depend_info] zeroinitializer, i32 1), "QUAL.OMP.PRIVATE:TYPED"(ptr [[DEP_COUNTER_ADDR4]], i64 0, i32 1), "QUAL.OMP.PRIVATE:TYPED"(ptr [[DOTDEP_ARR_ADDR5]], [1 x %struct.kmp_depend_info] zeroinitializer, i32 1), "QUAL.OMP.PRIVATE:TYPED"(ptr [[DEP_COUNTER_ADDR6]], i64 0, i32 1), "QUAL.OMP.PRIVATE:TYPED"(ptr [[DOTDEP_ARR_ADDR7]], [1 x %struct.kmp_depend_info] zeroinitializer, i32 1), "QUAL.OMP.PRIVATE:TYPED"(ptr [[DEP_COUNTER_ADDR9]], i64 0, i32 1), "QUAL.OMP.PRIVATE:TYPED"(ptr [[DOTDEP_ARR_ADDR10]], [1 x %struct.kmp_depend_info] zeroinitializer, i32 1), "QUAL.OMP.PRIVATE:TYPED"(ptr [[DEP_COUNTER_ADDR11]], i64 0, i32 1), "QUAL.OMP.PRIVATE:TYPED"(ptr [[DOTDEP_ARR_ADDR12]], [3 x %struct.kmp_depend_info] zeroinitializer, i32 1), "QUAL.OMP.PRIVATE:TYPED"(ptr [[DEP_COUNTER_ADDR13]], i64 0, i32 1) ]
// CHECK-NEW-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [1 x %struct.kmp_depend_info], ptr [[DOTDEP_ARR_ADDR]], i64 0, i64 0
// CHECK-NEW-NEXT:    [[TMP2:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO:%.*]], ptr [[TMP1]], i64 0
// CHECK-NEW-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP2]], i32 0, i32 0
// CHECK-NEW-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[VAR]] to i64
// CHECK-NEW-NEXT:    store i64 [[TMP4]], ptr [[TMP3]], align 8
// CHECK-NEW-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP2]], i32 0, i32 1
// CHECK-NEW-NEXT:    store i64 4, ptr [[TMP5]], align 8
// CHECK-NEW-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP2]], i32 0, i32 2
// CHECK-NEW-NEXT:    store i8 1, ptr [[TMP6]], align 8
// CHECK-NEW-NEXT:    store i64 1, ptr [[DEP_COUNTER_ADDR]], align 8
// CHECK-NEW-NEXT:    [[TMP7:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASKWAIT"(), "QUAL.OMP.DEPARRAY"(i32 1, ptr [[TMP1]]) ]
// CHECK-NEW-NEXT:    fence acq_rel
// CHECK-NEW-NEXT:    call void @llvm.directive.region.exit(token [[TMP7]]) [ "DIR.OMP.END.TASKWAIT"() ]
// CHECK-NEW-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [1 x %struct.kmp_depend_info], ptr [[DOTDEP_ARR_ADDR1]], i64 0, i64 0
// CHECK-NEW-NEXT:    [[TMP9:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP8]], i64 0
// CHECK-NEW-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP9]], i32 0, i32 0
// CHECK-NEW-NEXT:    [[TMP11:%.*]] = ptrtoint ptr [[VAR]] to i64
// CHECK-NEW-NEXT:    store i64 [[TMP11]], ptr [[TMP10]], align 8
// CHECK-NEW-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP9]], i32 0, i32 1
// CHECK-NEW-NEXT:    store i64 4, ptr [[TMP12]], align 8
// CHECK-NEW-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP9]], i32 0, i32 2
// CHECK-NEW-NEXT:    store i8 3, ptr [[TMP13]], align 8
// CHECK-NEW-NEXT:    store i64 1, ptr [[DEP_COUNTER_ADDR2]], align 8
// CHECK-NEW-NEXT:    [[TMP14:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASKWAIT"(), "QUAL.OMP.DEPARRAY"(i32 1, ptr [[TMP8]]) ]
// CHECK-NEW-NEXT:    fence acq_rel
// CHECK-NEW-NEXT:    call void @llvm.directive.region.exit(token [[TMP14]]) [ "DIR.OMP.END.TASKWAIT"() ]
// CHECK-NEW-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [1 x %struct.kmp_depend_info], ptr [[DOTDEP_ARR_ADDR3]], i64 0, i64 0
// CHECK-NEW-NEXT:    [[TMP16:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP15]], i64 0
// CHECK-NEW-NEXT:    [[TMP17:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP16]], i32 0, i32 0
// CHECK-NEW-NEXT:    [[TMP18:%.*]] = ptrtoint ptr [[VAR]] to i64
// CHECK-NEW-NEXT:    store i64 [[TMP18]], ptr [[TMP17]], align 8
// CHECK-NEW-NEXT:    [[TMP19:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP16]], i32 0, i32 1
// CHECK-NEW-NEXT:    store i64 4, ptr [[TMP19]], align 8
// CHECK-NEW-NEXT:    [[TMP20:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP16]], i32 0, i32 2
// CHECK-NEW-NEXT:    store i8 3, ptr [[TMP20]], align 8
// CHECK-NEW-NEXT:    store i64 1, ptr [[DEP_COUNTER_ADDR4]], align 8
// CHECK-NEW-NEXT:    [[TMP21:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASKWAIT"(), "QUAL.OMP.DEPARRAY"(i32 1, ptr [[TMP15]]) ]
// CHECK-NEW-NEXT:    fence acq_rel
// CHECK-NEW-NEXT:    call void @llvm.directive.region.exit(token [[TMP21]]) [ "DIR.OMP.END.TASKWAIT"() ]
// CHECK-NEW-NEXT:    [[TMP22:%.*]] = getelementptr inbounds [1 x %struct.kmp_depend_info], ptr [[DOTDEP_ARR_ADDR5]], i64 0, i64 0
// CHECK-NEW-NEXT:    [[TMP23:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP22]], i64 0
// CHECK-NEW-NEXT:    [[TMP24:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP23]], i32 0, i32 0
// CHECK-NEW-NEXT:    [[TMP25:%.*]] = ptrtoint ptr [[ARR]] to i64
// CHECK-NEW-NEXT:    store i64 [[TMP25]], ptr [[TMP24]], align 8
// CHECK-NEW-NEXT:    [[TMP26:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP23]], i32 0, i32 1
// CHECK-NEW-NEXT:    store i64 400, ptr [[TMP26]], align 8
// CHECK-NEW-NEXT:    [[TMP27:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP23]], i32 0, i32 2
// CHECK-NEW-NEXT:    store i8 1, ptr [[TMP27]], align 8
// CHECK-NEW-NEXT:    store i64 1, ptr [[DEP_COUNTER_ADDR6]], align 8
// CHECK-NEW-NEXT:    [[TMP28:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASKWAIT"(), "QUAL.OMP.NOWAIT"(), "QUAL.OMP.DEPARRAY"(i32 1, ptr [[TMP22]]) ]
// CHECK-NEW-NEXT:    fence acq_rel
// CHECK-NEW-NEXT:    call void @llvm.directive.region.exit(token [[TMP28]]) [ "DIR.OMP.END.TASKWAIT"() ]
// CHECK-NEW-NEXT:    [[TMP29:%.*]] = getelementptr inbounds [1 x %struct.kmp_depend_info], ptr [[DOTDEP_ARR_ADDR7]], i64 0, i64 0
// CHECK-NEW-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds [100 x i32], ptr [[ARR]], i64 0, i64 5
// CHECK-NEW-NEXT:    [[ARRAYIDX8:%.*]] = getelementptr inbounds [100 x i32], ptr [[ARR]], i64 0, i64 14
// CHECK-NEW-NEXT:    [[TMP30:%.*]] = getelementptr i32, ptr [[ARRAYIDX8]], i32 1
// CHECK-NEW-NEXT:    [[TMP31:%.*]] = ptrtoint ptr [[ARRAYIDX]] to i64
// CHECK-NEW-NEXT:    [[TMP32:%.*]] = ptrtoint ptr [[TMP30]] to i64
// CHECK-NEW-NEXT:    [[TMP33:%.*]] = sub nuw i64 [[TMP32]], [[TMP31]]
// CHECK-NEW-NEXT:    [[TMP34:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP29]], i64 0
// CHECK-NEW-NEXT:    [[TMP35:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP34]], i32 0, i32 0
// CHECK-NEW-NEXT:    [[TMP36:%.*]] = ptrtoint ptr [[ARRAYIDX]] to i64
// CHECK-NEW-NEXT:    store i64 [[TMP36]], ptr [[TMP35]], align 8
// CHECK-NEW-NEXT:    [[TMP37:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP34]], i32 0, i32 1
// CHECK-NEW-NEXT:    store i64 [[TMP33]], ptr [[TMP37]], align 8
// CHECK-NEW-NEXT:    [[TMP38:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP34]], i32 0, i32 2
// CHECK-NEW-NEXT:    store i8 3, ptr [[TMP38]], align 8
// CHECK-NEW-NEXT:    store i64 1, ptr [[DEP_COUNTER_ADDR9]], align 8
// CHECK-NEW-NEXT:    [[TMP39:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASKWAIT"(), "QUAL.OMP.DEPARRAY"(i32 1, ptr [[TMP29]]) ]
// CHECK-NEW-NEXT:    fence acq_rel
// CHECK-NEW-NEXT:    call void @llvm.directive.region.exit(token [[TMP39]]) [ "DIR.OMP.END.TASKWAIT"() ]
// CHECK-NEW-NEXT:    [[TMP40:%.*]] = getelementptr inbounds [1 x %struct.kmp_depend_info], ptr [[DOTDEP_ARR_ADDR10]], i64 0, i64 0
// CHECK-NEW-NEXT:    [[TMP41:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP40]], i64 0
// CHECK-NEW-NEXT:    [[TMP42:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP41]], i32 0, i32 0
// CHECK-NEW-NEXT:    [[TMP43:%.*]] = ptrtoint ptr [[ARR]] to i64
// CHECK-NEW-NEXT:    store i64 [[TMP43]], ptr [[TMP42]], align 8
// CHECK-NEW-NEXT:    [[TMP44:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP41]], i32 0, i32 1
// CHECK-NEW-NEXT:    store i64 400, ptr [[TMP44]], align 8
// CHECK-NEW-NEXT:    [[TMP45:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP41]], i32 0, i32 2
// CHECK-NEW-NEXT:    store i8 1, ptr [[TMP45]], align 8
// CHECK-NEW-NEXT:    store i64 1, ptr [[DEP_COUNTER_ADDR11]], align 8
// CHECK-NEW-NEXT:    [[TMP46:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASKWAIT"(), "QUAL.OMP.NOWAIT"(), "QUAL.OMP.DEPARRAY"(i32 1, ptr [[TMP40]]) ]
// CHECK-NEW-NEXT:    fence acq_rel
// CHECK-NEW-NEXT:    call void @llvm.directive.region.exit(token [[TMP46]]) [ "DIR.OMP.END.TASKWAIT"() ]
// CHECK-NEW-NEXT:    [[TMP47:%.*]] = getelementptr inbounds [3 x %struct.kmp_depend_info], ptr [[DOTDEP_ARR_ADDR12]], i64 0, i64 0
// CHECK-NEW-NEXT:    [[TMP48:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP47]], i64 0
// CHECK-NEW-NEXT:    [[TMP49:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP48]], i32 0, i32 0
// CHECK-NEW-NEXT:    [[TMP50:%.*]] = ptrtoint ptr [[VAR]] to i64
// CHECK-NEW-NEXT:    store i64 [[TMP50]], ptr [[TMP49]], align 8
// CHECK-NEW-NEXT:    [[TMP51:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP48]], i32 0, i32 1
// CHECK-NEW-NEXT:    store i64 4, ptr [[TMP51]], align 8
// CHECK-NEW-NEXT:    [[TMP52:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP48]], i32 0, i32 2
// CHECK-NEW-NEXT:    store i8 3, ptr [[TMP52]], align 8
// CHECK-NEW-NEXT:    [[TMP53:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP47]], i64 1
// CHECK-NEW-NEXT:    [[TMP54:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP53]], i32 0, i32 0
// CHECK-NEW-NEXT:    [[TMP55:%.*]] = ptrtoint ptr [[VAR]] to i64
// CHECK-NEW-NEXT:    store i64 [[TMP55]], ptr [[TMP54]], align 8
// CHECK-NEW-NEXT:    [[TMP56:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP53]], i32 0, i32 1
// CHECK-NEW-NEXT:    store i64 4, ptr [[TMP56]], align 8
// CHECK-NEW-NEXT:    [[TMP57:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP53]], i32 0, i32 2
// CHECK-NEW-NEXT:    store i8 3, ptr [[TMP57]], align 8
// CHECK-NEW-NEXT:    [[TMP58:%.*]] = getelementptr [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP47]], i64 2
// CHECK-NEW-NEXT:    [[TMP59:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP58]], i32 0, i32 0
// CHECK-NEW-NEXT:    [[TMP60:%.*]] = ptrtoint ptr [[VAR]] to i64
// CHECK-NEW-NEXT:    store i64 [[TMP60]], ptr [[TMP59]], align 8
// CHECK-NEW-NEXT:    [[TMP61:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP58]], i32 0, i32 1
// CHECK-NEW-NEXT:    store i64 4, ptr [[TMP61]], align 8
// CHECK-NEW-NEXT:    [[TMP62:%.*]] = getelementptr inbounds [[STRUCT_KMP_DEPEND_INFO]], ptr [[TMP58]], i32 0, i32 2
// CHECK-NEW-NEXT:    store i8 1, ptr [[TMP62]], align 8
// CHECK-NEW-NEXT:    store i64 3, ptr [[DEP_COUNTER_ADDR13]], align 8
// CHECK-NEW-NEXT:    [[TMP63:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASKWAIT"(), "QUAL.OMP.NOWAIT"(), "QUAL.OMP.DEPARRAY"(i32 3, ptr [[TMP47]]) ]
// CHECK-NEW-NEXT:    fence acq_rel
// CHECK-NEW-NEXT:    call void @llvm.directive.region.exit(token [[TMP63]]) [ "DIR.OMP.END.TASKWAIT"() ]
// CHECK-NEW-NEXT:    call void @llvm.directive.region.exit(token [[TMP0]]) [ "DIR.OMP.END.TASK"() ]
// CHECK-NEW-NEXT:    ret void
//
// CHECK-LABEL: @_Z3foov(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[VAR:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[ARR:%.*]] = alloca [100 x i32], align 16
// CHECK-NEXT:    store i32 1, ptr [[VAR]], align 4
// CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr align 16 [[ARR]], i8 0, i64 400, i1 false)
// CHECK-NEXT:    [[ARRAY_BEGIN:%.*]] = getelementptr inbounds [100 x i32], ptr [[ARR]], i32 0, i32 0
// CHECK-NEXT:    [[TMP0:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASK"(), "QUAL.OMP.FIRSTPRIVATE:TYPED"(ptr [[VAR]], i32 0, i32 1), "QUAL.OMP.FIRSTPRIVATE:TYPED"(ptr [[ARR]], i32 0, i64 100) ]
// CHECK-NEXT:    [[TMP1:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASKWAIT"(), "QUAL.OMP.DEPEND.IN"(ptr [[VAR]]) ]
// CHECK-NEXT:    fence acq_rel
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP1]]) [ "DIR.OMP.END.TASKWAIT"() ]
// CHECK-NEXT:    [[TMP2:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASKWAIT"(), "QUAL.OMP.DEPEND.OUT"(ptr [[VAR]]) ]
// CHECK-NEXT:    fence acq_rel
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP2]]) [ "DIR.OMP.END.TASKWAIT"() ]
// CHECK-NEXT:    [[TMP3:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASKWAIT"(), "QUAL.OMP.DEPEND.INOUT"(ptr [[VAR]]) ]
// CHECK-NEXT:    fence acq_rel
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP3]]) [ "DIR.OMP.END.TASKWAIT"() ]
// CHECK-NEXT:    [[TMP4:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASKWAIT"(), "QUAL.OMP.NOWAIT"(), "QUAL.OMP.DEPEND.IN"(ptr [[ARR]]) ]
// CHECK-NEXT:    fence acq_rel
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP4]]) [ "DIR.OMP.END.TASKWAIT"() ]
// CHECK-NEXT:    [[TMP5:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASKWAIT"(), "QUAL.OMP.DEPEND.OUT:ARRSECT"(ptr [[ARR]], i64 1, i64 5, i64 10, i64 1) ]
// CHECK-NEXT:    fence acq_rel
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP5]]) [ "DIR.OMP.END.TASKWAIT"() ]
// CHECK-NEXT:    [[TMP6:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASKWAIT"(), "QUAL.OMP.DEPEND.IN"(ptr [[ARR]]), "QUAL.OMP.NOWAIT"() ]
// CHECK-NEXT:    fence acq_rel
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP6]]) [ "DIR.OMP.END.TASKWAIT"() ]
// CHECK-NEXT:    [[TMP7:%.*]] = call token @llvm.directive.region.entry() [ "DIR.OMP.TASKWAIT"(), "QUAL.OMP.DEPEND.INOUT"(ptr [[VAR]]), "QUAL.OMP.DEPEND.OUT"(ptr [[VAR]]), "QUAL.OMP.DEPEND.IN"(ptr [[VAR]]), "QUAL.OMP.NOWAIT"() ]
// CHECK-NEXT:    fence acq_rel
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP7]]) [ "DIR.OMP.END.TASKWAIT"() ]
// CHECK-NEXT:    call void @llvm.directive.region.exit(token [[TMP0]]) [ "DIR.OMP.END.TASK"() ]
// CHECK-NEXT:    ret void
//
void foo()
{
  int var = 1;
  int arr[100] = {0};

  #pragma omp task
  {
    #pragma omp taskwait depend(in:var)
    #pragma omp taskwait depend(out:var)
    #pragma omp taskwait depend(inout:var)
    #pragma omp taskwait nowait depend(in:arr)
    #pragma omp taskwait depend(out:arr[5:10])
    #pragma omp taskwait depend(in:arr) nowait
    #pragma omp taskwait depend(inout:var) depend(out:var) depend(in:var) nowait
  }
}
#endif
// end INTEL_COLLAB
