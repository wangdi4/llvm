// INTEL_COLLAB
// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --prefix-filecheck-ir-name a
// RUN: %clang_cc1 -verify -triple x86_64-unknown-linux-gnu -fopenmp -x c \
// RUN:  -fopenmp-late-outline -fopenmp-version=51 -emit-llvm %s -o - \
// RUN:  | FileCheck %s --check-prefix CHK-C

// RUN: %clang_cc1 -verify -triple x86_64-unknown-linux-gnu -fopenmp -x c \
// RUN: -fopenmp-late-outline -fopenmp-version=51 -emit-pch %s -o %t.pch

// RUN: %clang_cc1 -verify -triple x86_64-unknown-linux-gnu -fopenmp  -x c \
// RUN:  -fopenmp-late-outline -fopenmp-version=51 -emit-llvm %s -o - \
// RUN:  -include-pch %t.pch | FileCheck %s --check-prefix CHK-C
//
// RUN: %clang_cc1 -verify -triple x86_64-unknown-linux-gnu -fopenmp \
// RUN:  -fopenmp-late-outline -fopenmp-version=51 -emit-llvm %s -o - \
// RUN:  | FileCheck %s --check-prefix CHK-CXX
//
// RUN: %clang_cc1 -verify -triple x86_64-unknown-linux-gnu -fopenmp \
// RUN: -fopenmp-late-outline -fopenmp-version=51 -emit-pch %s -o %t.pch

// RUN: %clang_cc1 -verify -triple x86_64-unknown-linux-gnu -fopenmp \
// RUN:  -fopenmp-late-outline -fopenmp-version=51 -emit-llvm %s -o - \
// RUN:  -include-pch %t.pch | FileCheck %s --check-prefix CHK-CXX
//
// expected-no-diagnostics
#ifndef HEADER
#define HEADER

// CHK-C-LABEL: @test_int(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[X:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[V:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[R:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[TMP:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP5:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP7:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP10:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP16:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP18:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP21:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP27:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP29:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP32:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP39:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP41:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP44:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP50:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP52:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP55:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP62:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP64:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP67:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP73:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP75:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP78:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP85:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP87:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP90:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP96:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP98:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP101:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP108:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP110:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP113:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP120:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP122:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP125:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP131:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP133:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP136:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[TMP0:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD]], i32* [[TMP]], align 4
// CHK-C-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-C-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL]], i8* [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP1:%.*]] = phi i32 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP1]], i32* [[TMP]], align 4
// CHK-C-NEXT:    store i32 [[TMP0]], i32* [[ATOMIC_TEMP]], align 4
// CHK-C-NEXT:    [[TMP2:%.*]] = load i32, i32* [[ATOMIC_TEMP]], align 4
// CHK-C-NEXT:    [[TMP3:%.*]] = cmpxchg i32* [[X]], i32 [[TMP1]], i32 [[TMP2]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP4]] = extractvalue { i32, i1 } [[TMP3]], 0
// CHK-C-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i1 } [[TMP3]], 1
// CHK-C-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    [[CMP2:%.*]] = icmp sgt i32 [[TMP4]], [[TMP0]]
// CHK-C-NEXT:    [[FROMBOOL3:%.*]] = zext i1 [[CMP2]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL3]], i8* [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP2]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP6:%.*]] = load i32, i32* [[TMP]], align 4
// CHK-C-NEXT:    [[TMP7:%.*]] = load i8, i8* [[ATMP1]], align 1
// CHK-C-NEXT:    store i32 [[TMP6]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP8:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD4:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD4]], i32* [[ATMP5]], align 4
// CHK-C-NEXT:    [[CMP6:%.*]] = icmp sgt i32 [[ATOMIC_LOAD4]], [[TMP8]]
// CHK-C-NEXT:    [[FROMBOOL8:%.*]] = zext i1 [[CMP6]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL8]], i8* [[ATMP7]], align 1
// CHK-C-NEXT:    br i1 [[CMP6]], label [[ATOMIC_CONT9:%.*]], label [[ATOMIC_EXIT14:%.*]]
// CHK-C:       atomic_cont9:
// CHK-C-NEXT:    [[TMP9:%.*]] = phi i32 [ [[ATOMIC_LOAD4]], [[ATOMIC_EXIT]] ], [ [[TMP12:%.*]], [[ATOMIC_CMP11:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP9]], i32* [[ATMP5]], align 4
// CHK-C-NEXT:    store i32 [[TMP8]], i32* [[ATOMIC_TEMP10]], align 4
// CHK-C-NEXT:    [[TMP10:%.*]] = load i32, i32* [[ATOMIC_TEMP10]], align 4
// CHK-C-NEXT:    [[TMP11:%.*]] = cmpxchg i32* [[X]], i32 [[TMP9]], i32 [[TMP10]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP12]] = extractvalue { i32, i1 } [[TMP11]], 0
// CHK-C-NEXT:    [[TMP13:%.*]] = extractvalue { i32, i1 } [[TMP11]], 1
// CHK-C-NEXT:    br i1 [[TMP13]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP11]]
// CHK-C:       atomic_upd_exit:
// CHK-C-NEXT:    store i32 [[TMP8]], i32* [[ATMP5]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT14]]
// CHK-C:       atomic_cmp11:
// CHK-C-NEXT:    [[CMP12:%.*]] = icmp sgt i32 [[TMP12]], [[TMP8]]
// CHK-C-NEXT:    [[FROMBOOL13:%.*]] = zext i1 [[CMP12]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL13]], i8* [[ATMP7]], align 1
// CHK-C-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT9]], label [[ATOMIC_EXIT14]]
// CHK-C:       atomic_exit14:
// CHK-C-NEXT:    [[TMP14:%.*]] = load i32, i32* [[ATMP5]], align 4
// CHK-C-NEXT:    [[TMP15:%.*]] = load i8, i8* [[ATMP7]], align 1
// CHK-C-NEXT:    store i32 [[TMP14]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP16:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD15:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD15]], i32* [[ATMP16]], align 4
// CHK-C-NEXT:    [[CMP17:%.*]] = icmp slt i32 [[ATOMIC_LOAD15]], [[TMP16]]
// CHK-C-NEXT:    [[FROMBOOL19:%.*]] = zext i1 [[CMP17]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL19]], i8* [[ATMP18]], align 1
// CHK-C-NEXT:    br i1 [[CMP17]], label [[ATOMIC_CONT20:%.*]], label [[ATOMIC_EXIT25:%.*]]
// CHK-C:       atomic_cont20:
// CHK-C-NEXT:    [[TMP17:%.*]] = phi i32 [ [[ATOMIC_LOAD15]], [[ATOMIC_EXIT14]] ], [ [[TMP20:%.*]], [[ATOMIC_CMP22:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP17]], i32* [[ATMP16]], align 4
// CHK-C-NEXT:    store i32 [[TMP16]], i32* [[ATOMIC_TEMP21]], align 4
// CHK-C-NEXT:    [[TMP18:%.*]] = load i32, i32* [[ATOMIC_TEMP21]], align 4
// CHK-C-NEXT:    [[TMP19:%.*]] = cmpxchg i32* [[X]], i32 [[TMP17]], i32 [[TMP18]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP20]] = extractvalue { i32, i1 } [[TMP19]], 0
// CHK-C-NEXT:    [[TMP21:%.*]] = extractvalue { i32, i1 } [[TMP19]], 1
// CHK-C-NEXT:    br i1 [[TMP21]], label [[ATOMIC_EXIT25]], label [[ATOMIC_CMP22]]
// CHK-C:       atomic_cmp22:
// CHK-C-NEXT:    [[CMP23:%.*]] = icmp slt i32 [[TMP20]], [[TMP16]]
// CHK-C-NEXT:    [[FROMBOOL24:%.*]] = zext i1 [[CMP23]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL24]], i8* [[ATMP18]], align 1
// CHK-C-NEXT:    br i1 [[CMP23]], label [[ATOMIC_CONT20]], label [[ATOMIC_EXIT25]]
// CHK-C:       atomic_exit25:
// CHK-C-NEXT:    [[TMP22:%.*]] = load i32, i32* [[ATMP16]], align 4
// CHK-C-NEXT:    [[TMP23:%.*]] = load i8, i8* [[ATMP18]], align 1
// CHK-C-NEXT:    store i32 [[TMP22]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP24:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD26:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD26]], i32* [[ATMP27]], align 4
// CHK-C-NEXT:    [[CMP28:%.*]] = icmp slt i32 [[ATOMIC_LOAD26]], [[TMP24]]
// CHK-C-NEXT:    [[FROMBOOL30:%.*]] = zext i1 [[CMP28]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL30]], i8* [[ATMP29]], align 1
// CHK-C-NEXT:    br i1 [[CMP28]], label [[ATOMIC_CONT31:%.*]], label [[ATOMIC_EXIT37:%.*]]
// CHK-C:       atomic_cont31:
// CHK-C-NEXT:    [[TMP25:%.*]] = phi i32 [ [[ATOMIC_LOAD26]], [[ATOMIC_EXIT25]] ], [ [[TMP28:%.*]], [[ATOMIC_CMP34:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP25]], i32* [[ATMP27]], align 4
// CHK-C-NEXT:    store i32 [[TMP24]], i32* [[ATOMIC_TEMP32]], align 4
// CHK-C-NEXT:    [[TMP26:%.*]] = load i32, i32* [[ATOMIC_TEMP32]], align 4
// CHK-C-NEXT:    [[TMP27:%.*]] = cmpxchg i32* [[X]], i32 [[TMP25]], i32 [[TMP26]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP28]] = extractvalue { i32, i1 } [[TMP27]], 0
// CHK-C-NEXT:    [[TMP29:%.*]] = extractvalue { i32, i1 } [[TMP27]], 1
// CHK-C-NEXT:    br i1 [[TMP29]], label [[ATOMIC_UPD_EXIT33:%.*]], label [[ATOMIC_CMP34]]
// CHK-C:       atomic_upd_exit33:
// CHK-C-NEXT:    store i32 [[TMP24]], i32* [[ATMP27]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT37]]
// CHK-C:       atomic_cmp34:
// CHK-C-NEXT:    [[CMP35:%.*]] = icmp slt i32 [[TMP28]], [[TMP24]]
// CHK-C-NEXT:    [[FROMBOOL36:%.*]] = zext i1 [[CMP35]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL36]], i8* [[ATMP29]], align 1
// CHK-C-NEXT:    br i1 [[CMP35]], label [[ATOMIC_CONT31]], label [[ATOMIC_EXIT37]]
// CHK-C:       atomic_exit37:
// CHK-C-NEXT:    [[TMP30:%.*]] = load i32, i32* [[ATMP27]], align 4
// CHK-C-NEXT:    [[TMP31:%.*]] = load i8, i8* [[ATMP29]], align 1
// CHK-C-NEXT:    store i32 [[TMP30]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP32:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD38:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD38]], i32* [[ATMP39]], align 4
// CHK-C-NEXT:    [[CMP40:%.*]] = icmp slt i32 [[ATOMIC_LOAD38]], [[TMP32]]
// CHK-C-NEXT:    [[FROMBOOL42:%.*]] = zext i1 [[CMP40]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL42]], i8* [[ATMP41]], align 1
// CHK-C-NEXT:    br i1 [[CMP40]], label [[ATOMIC_CONT43:%.*]], label [[ATOMIC_EXIT48:%.*]]
// CHK-C:       atomic_cont43:
// CHK-C-NEXT:    [[TMP33:%.*]] = phi i32 [ [[ATOMIC_LOAD38]], [[ATOMIC_EXIT37]] ], [ [[TMP36:%.*]], [[ATOMIC_CMP45:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP33]], i32* [[ATMP39]], align 4
// CHK-C-NEXT:    store i32 [[TMP32]], i32* [[ATOMIC_TEMP44]], align 4
// CHK-C-NEXT:    [[TMP34:%.*]] = load i32, i32* [[ATOMIC_TEMP44]], align 4
// CHK-C-NEXT:    [[TMP35:%.*]] = cmpxchg i32* [[X]], i32 [[TMP33]], i32 [[TMP34]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP36]] = extractvalue { i32, i1 } [[TMP35]], 0
// CHK-C-NEXT:    [[TMP37:%.*]] = extractvalue { i32, i1 } [[TMP35]], 1
// CHK-C-NEXT:    br i1 [[TMP37]], label [[ATOMIC_EXIT48]], label [[ATOMIC_CMP45]]
// CHK-C:       atomic_cmp45:
// CHK-C-NEXT:    [[CMP46:%.*]] = icmp slt i32 [[TMP36]], [[TMP32]]
// CHK-C-NEXT:    [[FROMBOOL47:%.*]] = zext i1 [[CMP46]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL47]], i8* [[ATMP41]], align 1
// CHK-C-NEXT:    br i1 [[CMP46]], label [[ATOMIC_CONT43]], label [[ATOMIC_EXIT48]]
// CHK-C:       atomic_exit48:
// CHK-C-NEXT:    [[TMP38:%.*]] = load i32, i32* [[ATMP39]], align 4
// CHK-C-NEXT:    [[TMP39:%.*]] = load i8, i8* [[ATMP41]], align 1
// CHK-C-NEXT:    store i32 [[TMP38]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP40:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD49:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD49]], i32* [[ATMP50]], align 4
// CHK-C-NEXT:    [[CMP51:%.*]] = icmp slt i32 [[ATOMIC_LOAD49]], [[TMP40]]
// CHK-C-NEXT:    [[FROMBOOL53:%.*]] = zext i1 [[CMP51]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL53]], i8* [[ATMP52]], align 1
// CHK-C-NEXT:    br i1 [[CMP51]], label [[ATOMIC_CONT54:%.*]], label [[ATOMIC_EXIT60:%.*]]
// CHK-C:       atomic_cont54:
// CHK-C-NEXT:    [[TMP41:%.*]] = phi i32 [ [[ATOMIC_LOAD49]], [[ATOMIC_EXIT48]] ], [ [[TMP44:%.*]], [[ATOMIC_CMP57:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP41]], i32* [[ATMP50]], align 4
// CHK-C-NEXT:    store i32 [[TMP40]], i32* [[ATOMIC_TEMP55]], align 4
// CHK-C-NEXT:    [[TMP42:%.*]] = load i32, i32* [[ATOMIC_TEMP55]], align 4
// CHK-C-NEXT:    [[TMP43:%.*]] = cmpxchg i32* [[X]], i32 [[TMP41]], i32 [[TMP42]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP44]] = extractvalue { i32, i1 } [[TMP43]], 0
// CHK-C-NEXT:    [[TMP45:%.*]] = extractvalue { i32, i1 } [[TMP43]], 1
// CHK-C-NEXT:    br i1 [[TMP45]], label [[ATOMIC_UPD_EXIT56:%.*]], label [[ATOMIC_CMP57]]
// CHK-C:       atomic_upd_exit56:
// CHK-C-NEXT:    store i32 [[TMP40]], i32* [[ATMP50]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT60]]
// CHK-C:       atomic_cmp57:
// CHK-C-NEXT:    [[CMP58:%.*]] = icmp slt i32 [[TMP44]], [[TMP40]]
// CHK-C-NEXT:    [[FROMBOOL59:%.*]] = zext i1 [[CMP58]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL59]], i8* [[ATMP52]], align 1
// CHK-C-NEXT:    br i1 [[CMP58]], label [[ATOMIC_CONT54]], label [[ATOMIC_EXIT60]]
// CHK-C:       atomic_exit60:
// CHK-C-NEXT:    [[TMP46:%.*]] = load i32, i32* [[ATMP50]], align 4
// CHK-C-NEXT:    [[TMP47:%.*]] = load i8, i8* [[ATMP52]], align 1
// CHK-C-NEXT:    store i32 [[TMP46]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP48:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD61:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD61]], i32* [[ATMP62]], align 4
// CHK-C-NEXT:    [[CMP63:%.*]] = icmp sgt i32 [[ATOMIC_LOAD61]], [[TMP48]]
// CHK-C-NEXT:    [[FROMBOOL65:%.*]] = zext i1 [[CMP63]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL65]], i8* [[ATMP64]], align 1
// CHK-C-NEXT:    br i1 [[CMP63]], label [[ATOMIC_CONT66:%.*]], label [[ATOMIC_EXIT71:%.*]]
// CHK-C:       atomic_cont66:
// CHK-C-NEXT:    [[TMP49:%.*]] = phi i32 [ [[ATOMIC_LOAD61]], [[ATOMIC_EXIT60]] ], [ [[TMP52:%.*]], [[ATOMIC_CMP68:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP49]], i32* [[ATMP62]], align 4
// CHK-C-NEXT:    store i32 [[TMP48]], i32* [[ATOMIC_TEMP67]], align 4
// CHK-C-NEXT:    [[TMP50:%.*]] = load i32, i32* [[ATOMIC_TEMP67]], align 4
// CHK-C-NEXT:    [[TMP51:%.*]] = cmpxchg i32* [[X]], i32 [[TMP49]], i32 [[TMP50]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP52]] = extractvalue { i32, i1 } [[TMP51]], 0
// CHK-C-NEXT:    [[TMP53:%.*]] = extractvalue { i32, i1 } [[TMP51]], 1
// CHK-C-NEXT:    br i1 [[TMP53]], label [[ATOMIC_EXIT71]], label [[ATOMIC_CMP68]]
// CHK-C:       atomic_cmp68:
// CHK-C-NEXT:    [[CMP69:%.*]] = icmp sgt i32 [[TMP52]], [[TMP48]]
// CHK-C-NEXT:    [[FROMBOOL70:%.*]] = zext i1 [[CMP69]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL70]], i8* [[ATMP64]], align 1
// CHK-C-NEXT:    br i1 [[CMP69]], label [[ATOMIC_CONT66]], label [[ATOMIC_EXIT71]]
// CHK-C:       atomic_exit71:
// CHK-C-NEXT:    [[TMP54:%.*]] = load i32, i32* [[ATMP62]], align 4
// CHK-C-NEXT:    [[TMP55:%.*]] = load i8, i8* [[ATMP64]], align 1
// CHK-C-NEXT:    store i32 [[TMP54]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP56:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD72:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD72]], i32* [[ATMP73]], align 4
// CHK-C-NEXT:    [[CMP74:%.*]] = icmp sgt i32 [[ATOMIC_LOAD72]], [[TMP56]]
// CHK-C-NEXT:    [[FROMBOOL76:%.*]] = zext i1 [[CMP74]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL76]], i8* [[ATMP75]], align 1
// CHK-C-NEXT:    br i1 [[CMP74]], label [[ATOMIC_CONT77:%.*]], label [[ATOMIC_EXIT83:%.*]]
// CHK-C:       atomic_cont77:
// CHK-C-NEXT:    [[TMP57:%.*]] = phi i32 [ [[ATOMIC_LOAD72]], [[ATOMIC_EXIT71]] ], [ [[TMP60:%.*]], [[ATOMIC_CMP80:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP57]], i32* [[ATMP73]], align 4
// CHK-C-NEXT:    store i32 [[TMP56]], i32* [[ATOMIC_TEMP78]], align 4
// CHK-C-NEXT:    [[TMP58:%.*]] = load i32, i32* [[ATOMIC_TEMP78]], align 4
// CHK-C-NEXT:    [[TMP59:%.*]] = cmpxchg i32* [[X]], i32 [[TMP57]], i32 [[TMP58]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP60]] = extractvalue { i32, i1 } [[TMP59]], 0
// CHK-C-NEXT:    [[TMP61:%.*]] = extractvalue { i32, i1 } [[TMP59]], 1
// CHK-C-NEXT:    br i1 [[TMP61]], label [[ATOMIC_UPD_EXIT79:%.*]], label [[ATOMIC_CMP80]]
// CHK-C:       atomic_upd_exit79:
// CHK-C-NEXT:    store i32 [[TMP56]], i32* [[ATMP73]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT83]]
// CHK-C:       atomic_cmp80:
// CHK-C-NEXT:    [[CMP81:%.*]] = icmp sgt i32 [[TMP60]], [[TMP56]]
// CHK-C-NEXT:    [[FROMBOOL82:%.*]] = zext i1 [[CMP81]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL82]], i8* [[ATMP75]], align 1
// CHK-C-NEXT:    br i1 [[CMP81]], label [[ATOMIC_CONT77]], label [[ATOMIC_EXIT83]]
// CHK-C:       atomic_exit83:
// CHK-C-NEXT:    [[TMP62:%.*]] = load i32, i32* [[ATMP73]], align 4
// CHK-C-NEXT:    [[TMP63:%.*]] = load i8, i8* [[ATMP75]], align 1
// CHK-C-NEXT:    store i32 [[TMP62]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP64:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP65:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD84:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD84]], i32* [[ATMP85]], align 4
// CHK-C-NEXT:    [[CMP86:%.*]] = icmp eq i32 [[ATOMIC_LOAD84]], [[TMP65]]
// CHK-C-NEXT:    [[FROMBOOL88:%.*]] = zext i1 [[CMP86]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL88]], i8* [[ATMP87]], align 1
// CHK-C-NEXT:    br i1 [[CMP86]], label [[ATOMIC_CONT89:%.*]], label [[ATOMIC_EXIT94:%.*]]
// CHK-C:       atomic_cont89:
// CHK-C-NEXT:    [[TMP66:%.*]] = phi i32 [ [[ATOMIC_LOAD84]], [[ATOMIC_EXIT83]] ], [ [[TMP69:%.*]], [[ATOMIC_CMP91:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP66]], i32* [[ATMP85]], align 4
// CHK-C-NEXT:    store i32 [[TMP64]], i32* [[ATOMIC_TEMP90]], align 4
// CHK-C-NEXT:    [[TMP67:%.*]] = load i32, i32* [[ATOMIC_TEMP90]], align 4
// CHK-C-NEXT:    [[TMP68:%.*]] = cmpxchg i32* [[X]], i32 [[TMP66]], i32 [[TMP67]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP69]] = extractvalue { i32, i1 } [[TMP68]], 0
// CHK-C-NEXT:    [[TMP70:%.*]] = extractvalue { i32, i1 } [[TMP68]], 1
// CHK-C-NEXT:    br i1 [[TMP70]], label [[ATOMIC_EXIT94]], label [[ATOMIC_CMP91]]
// CHK-C:       atomic_cmp91:
// CHK-C-NEXT:    [[CMP92:%.*]] = icmp eq i32 [[TMP69]], [[TMP65]]
// CHK-C-NEXT:    [[FROMBOOL93:%.*]] = zext i1 [[CMP92]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL93]], i8* [[ATMP87]], align 1
// CHK-C-NEXT:    br i1 [[CMP92]], label [[ATOMIC_CONT89]], label [[ATOMIC_EXIT94]]
// CHK-C:       atomic_exit94:
// CHK-C-NEXT:    [[TMP71:%.*]] = load i32, i32* [[ATMP85]], align 4
// CHK-C-NEXT:    [[TMP72:%.*]] = load i8, i8* [[ATMP87]], align 1
// CHK-C-NEXT:    store i32 [[TMP71]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP73:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP74:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD95:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD95]], i32* [[ATMP96]], align 4
// CHK-C-NEXT:    [[CMP97:%.*]] = icmp eq i32 [[ATOMIC_LOAD95]], [[TMP74]]
// CHK-C-NEXT:    [[FROMBOOL99:%.*]] = zext i1 [[CMP97]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL99]], i8* [[ATMP98]], align 1
// CHK-C-NEXT:    br i1 [[CMP97]], label [[ATOMIC_CONT100:%.*]], label [[ATOMIC_EXIT106:%.*]]
// CHK-C:       atomic_cont100:
// CHK-C-NEXT:    [[TMP75:%.*]] = phi i32 [ [[ATOMIC_LOAD95]], [[ATOMIC_EXIT94]] ], [ [[TMP78:%.*]], [[ATOMIC_CMP103:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP75]], i32* [[ATMP96]], align 4
// CHK-C-NEXT:    store i32 [[TMP73]], i32* [[ATOMIC_TEMP101]], align 4
// CHK-C-NEXT:    [[TMP76:%.*]] = load i32, i32* [[ATOMIC_TEMP101]], align 4
// CHK-C-NEXT:    [[TMP77:%.*]] = cmpxchg i32* [[X]], i32 [[TMP75]], i32 [[TMP76]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP78]] = extractvalue { i32, i1 } [[TMP77]], 0
// CHK-C-NEXT:    [[TMP79:%.*]] = extractvalue { i32, i1 } [[TMP77]], 1
// CHK-C-NEXT:    br i1 [[TMP79]], label [[ATOMIC_UPD_EXIT102:%.*]], label [[ATOMIC_CMP103]]
// CHK-C:       atomic_upd_exit102:
// CHK-C-NEXT:    store i32 [[TMP73]], i32* [[ATMP96]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT106]]
// CHK-C:       atomic_cmp103:
// CHK-C-NEXT:    [[CMP104:%.*]] = icmp eq i32 [[TMP78]], [[TMP74]]
// CHK-C-NEXT:    [[FROMBOOL105:%.*]] = zext i1 [[CMP104]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL105]], i8* [[ATMP98]], align 1
// CHK-C-NEXT:    br i1 [[CMP104]], label [[ATOMIC_CONT100]], label [[ATOMIC_EXIT106]]
// CHK-C:       atomic_exit106:
// CHK-C-NEXT:    [[TMP80:%.*]] = load i32, i32* [[ATMP96]], align 4
// CHK-C-NEXT:    [[TMP81:%.*]] = load i8, i8* [[ATMP98]], align 1
// CHK-C-NEXT:    store i32 [[TMP80]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP82:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP83:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD107:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD107]], i32* [[ATMP108]], align 4
// CHK-C-NEXT:    [[CMP109:%.*]] = icmp eq i32 [[ATOMIC_LOAD107]], [[TMP83]]
// CHK-C-NEXT:    [[FROMBOOL111:%.*]] = zext i1 [[CMP109]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL111]], i8* [[ATMP110]], align 1
// CHK-C-NEXT:    br i1 [[CMP109]], label [[ATOMIC_CONT112:%.*]], label [[ATOMIC_EXIT118:%.*]]
// CHK-C:       atomic_cont112:
// CHK-C-NEXT:    [[TMP84:%.*]] = phi i32 [ [[ATOMIC_LOAD107]], [[ATOMIC_EXIT106]] ], [ [[TMP87:%.*]], [[ATOMIC_CMP115:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP84]], i32* [[ATMP108]], align 4
// CHK-C-NEXT:    store i32 [[TMP82]], i32* [[ATOMIC_TEMP113]], align 4
// CHK-C-NEXT:    [[TMP85:%.*]] = load i32, i32* [[ATOMIC_TEMP113]], align 4
// CHK-C-NEXT:    [[TMP86:%.*]] = cmpxchg i32* [[X]], i32 [[TMP84]], i32 [[TMP85]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP87]] = extractvalue { i32, i1 } [[TMP86]], 0
// CHK-C-NEXT:    [[TMP88:%.*]] = extractvalue { i32, i1 } [[TMP86]], 1
// CHK-C-NEXT:    br i1 [[TMP88]], label [[ATOMIC_UPD_EXIT114:%.*]], label [[ATOMIC_CMP115]]
// CHK-C:       atomic_upd_exit114:
// CHK-C-NEXT:    store i32 [[TMP82]], i32* [[ATMP108]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT118]]
// CHK-C:       atomic_cmp115:
// CHK-C-NEXT:    [[CMP116:%.*]] = icmp eq i32 [[TMP87]], [[TMP83]]
// CHK-C-NEXT:    [[FROMBOOL117:%.*]] = zext i1 [[CMP116]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL117]], i8* [[ATMP110]], align 1
// CHK-C-NEXT:    br i1 [[CMP116]], label [[ATOMIC_CONT112]], label [[ATOMIC_EXIT118]]
// CHK-C:       atomic_exit118:
// CHK-C-NEXT:    [[TMP89:%.*]] = load i32, i32* [[ATMP108]], align 4
// CHK-C-NEXT:    [[TMP90:%.*]] = load i8, i8* [[ATMP110]], align 1
// CHK-C-NEXT:    [[TMP91:%.*]] = trunc i8 [[TMP90]] to i1
// CHK-C-NEXT:    br i1 [[TMP91]], label [[ATOMIC_CAPTURE_CONT:%.*]], label [[ATOMIC_CAPTURE:%.*]]
// CHK-C:       atomic_capture:
// CHK-C-NEXT:    store i32 [[TMP89]], i32* [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT]]
// CHK-C:       atomic_capture_cont:
// CHK-C-NEXT:    [[TMP92:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP93:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD119:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD119]], i32* [[ATMP120]], align 4
// CHK-C-NEXT:    [[CMP121:%.*]] = icmp eq i32 [[ATOMIC_LOAD119]], [[TMP93]]
// CHK-C-NEXT:    [[FROMBOOL123:%.*]] = zext i1 [[CMP121]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL123]], i8* [[ATMP122]], align 1
// CHK-C-NEXT:    br i1 [[CMP121]], label [[ATOMIC_CONT124:%.*]], label [[ATOMIC_EXIT129:%.*]]
// CHK-C:       atomic_cont124:
// CHK-C-NEXT:    [[TMP94:%.*]] = phi i32 [ [[ATOMIC_LOAD119]], [[ATOMIC_CAPTURE_CONT]] ], [ [[TMP97:%.*]], [[ATOMIC_CMP126:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP94]], i32* [[ATMP120]], align 4
// CHK-C-NEXT:    store i32 [[TMP92]], i32* [[ATOMIC_TEMP125]], align 4
// CHK-C-NEXT:    [[TMP95:%.*]] = load i32, i32* [[ATOMIC_TEMP125]], align 4
// CHK-C-NEXT:    [[TMP96:%.*]] = cmpxchg i32* [[X]], i32 [[TMP94]], i32 [[TMP95]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP97]] = extractvalue { i32, i1 } [[TMP96]], 0
// CHK-C-NEXT:    [[TMP98:%.*]] = extractvalue { i32, i1 } [[TMP96]], 1
// CHK-C-NEXT:    br i1 [[TMP98]], label [[ATOMIC_EXIT129]], label [[ATOMIC_CMP126]]
// CHK-C:       atomic_cmp126:
// CHK-C-NEXT:    [[CMP127:%.*]] = icmp eq i32 [[TMP97]], [[TMP93]]
// CHK-C-NEXT:    [[FROMBOOL128:%.*]] = zext i1 [[CMP127]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL128]], i8* [[ATMP122]], align 1
// CHK-C-NEXT:    br i1 [[CMP127]], label [[ATOMIC_CONT124]], label [[ATOMIC_EXIT129]]
// CHK-C:       atomic_exit129:
// CHK-C-NEXT:    [[TMP99:%.*]] = load i32, i32* [[ATMP120]], align 4
// CHK-C-NEXT:    [[TMP100:%.*]] = load i8, i8* [[ATMP122]], align 1
// CHK-C-NEXT:    store i8 [[TMP100]], i8* [[R]], align 1
// CHK-C-NEXT:    [[TMP101:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP102:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD130:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD130]], i32* [[ATMP131]], align 4
// CHK-C-NEXT:    [[CMP132:%.*]] = icmp eq i32 [[ATOMIC_LOAD130]], [[TMP102]]
// CHK-C-NEXT:    [[FROMBOOL134:%.*]] = zext i1 [[CMP132]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL134]], i8* [[ATMP133]], align 1
// CHK-C-NEXT:    br i1 [[CMP132]], label [[ATOMIC_CONT135:%.*]], label [[ATOMIC_EXIT140:%.*]]
// CHK-C:       atomic_cont135:
// CHK-C-NEXT:    [[TMP103:%.*]] = phi i32 [ [[ATOMIC_LOAD130]], [[ATOMIC_EXIT129]] ], [ [[TMP106:%.*]], [[ATOMIC_CMP137:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP103]], i32* [[ATMP131]], align 4
// CHK-C-NEXT:    store i32 [[TMP101]], i32* [[ATOMIC_TEMP136]], align 4
// CHK-C-NEXT:    [[TMP104:%.*]] = load i32, i32* [[ATOMIC_TEMP136]], align 4
// CHK-C-NEXT:    [[TMP105:%.*]] = cmpxchg i32* [[X]], i32 [[TMP103]], i32 [[TMP104]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP106]] = extractvalue { i32, i1 } [[TMP105]], 0
// CHK-C-NEXT:    [[TMP107:%.*]] = extractvalue { i32, i1 } [[TMP105]], 1
// CHK-C-NEXT:    br i1 [[TMP107]], label [[ATOMIC_EXIT140]], label [[ATOMIC_CMP137]]
// CHK-C:       atomic_cmp137:
// CHK-C-NEXT:    [[CMP138:%.*]] = icmp eq i32 [[TMP106]], [[TMP102]]
// CHK-C-NEXT:    [[FROMBOOL139:%.*]] = zext i1 [[CMP138]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL139]], i8* [[ATMP133]], align 1
// CHK-C-NEXT:    br i1 [[CMP138]], label [[ATOMIC_CONT135]], label [[ATOMIC_EXIT140]]
// CHK-C:       atomic_exit140:
// CHK-C-NEXT:    [[TMP108:%.*]] = load i32, i32* [[ATMP131]], align 4
// CHK-C-NEXT:    [[TMP109:%.*]] = load i8, i8* [[ATMP133]], align 1
// CHK-C-NEXT:    store i8 [[TMP109]], i8* [[R]], align 1
// CHK-C-NEXT:    [[TMP110:%.*]] = trunc i8 [[TMP109]] to i1
// CHK-C-NEXT:    br i1 [[TMP110]], label [[ATOMIC_CAPTURE_CONT142:%.*]], label [[ATOMIC_CAPTURE141:%.*]]
// CHK-C:       atomic_capture141:
// CHK-C-NEXT:    store i32 [[TMP108]], i32* [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT142]]
// CHK-C:       atomic_capture_cont142:
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z8test_intv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[X:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[V:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[R:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP5:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP7:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP10:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP16:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP18:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP21:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP27:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP29:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP32:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP39:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP41:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP44:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP50:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP52:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP55:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP62:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP64:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP67:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP73:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP75:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP78:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP85:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP87:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP90:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP96:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP98:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP101:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP108:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP110:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP113:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP120:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP122:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP125:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP131:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP133:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP136:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD]], i32* [[TMP]], align 4
// CHK-CXX-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-CXX-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL]], i8* [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP1:%.*]] = phi i32 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP1]], i32* [[TMP]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP0]], i32* [[ATOMIC_TEMP]], align 4
// CHK-CXX-NEXT:    [[TMP2:%.*]] = load i32, i32* [[ATOMIC_TEMP]], align 4
// CHK-CXX-NEXT:    [[TMP3:%.*]] = cmpxchg i32* [[X]], i32 [[TMP1]], i32 [[TMP2]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP4]] = extractvalue { i32, i1 } [[TMP3]], 0
// CHK-CXX-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i1 } [[TMP3]], 1
// CHK-CXX-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    [[CMP2:%.*]] = icmp sgt i32 [[TMP4]], [[TMP0]]
// CHK-CXX-NEXT:    [[FROMBOOL3:%.*]] = zext i1 [[CMP2]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL3]], i8* [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP2]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP6:%.*]] = load i32, i32* [[TMP]], align 4
// CHK-CXX-NEXT:    [[TMP7:%.*]] = load i8, i8* [[ATMP1]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP6]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP8:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD4:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD4]], i32* [[ATMP5]], align 4
// CHK-CXX-NEXT:    [[CMP6:%.*]] = icmp sgt i32 [[ATOMIC_LOAD4]], [[TMP8]]
// CHK-CXX-NEXT:    [[FROMBOOL8:%.*]] = zext i1 [[CMP6]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL8]], i8* [[ATMP7]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP6]], label [[ATOMIC_CONT9:%.*]], label [[ATOMIC_EXIT14:%.*]]
// CHK-CXX:       atomic_cont9:
// CHK-CXX-NEXT:    [[TMP9:%.*]] = phi i32 [ [[ATOMIC_LOAD4]], [[ATOMIC_EXIT]] ], [ [[TMP12:%.*]], [[ATOMIC_CMP11:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP9]], i32* [[ATMP5]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP8]], i32* [[ATOMIC_TEMP10]], align 4
// CHK-CXX-NEXT:    [[TMP10:%.*]] = load i32, i32* [[ATOMIC_TEMP10]], align 4
// CHK-CXX-NEXT:    [[TMP11:%.*]] = cmpxchg i32* [[X]], i32 [[TMP9]], i32 [[TMP10]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP12]] = extractvalue { i32, i1 } [[TMP11]], 0
// CHK-CXX-NEXT:    [[TMP13:%.*]] = extractvalue { i32, i1 } [[TMP11]], 1
// CHK-CXX-NEXT:    br i1 [[TMP13]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP11]]
// CHK-CXX:       atomic_upd_exit:
// CHK-CXX-NEXT:    store i32 [[TMP8]], i32* [[ATMP5]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT14]]
// CHK-CXX:       atomic_cmp11:
// CHK-CXX-NEXT:    [[CMP12:%.*]] = icmp sgt i32 [[TMP12]], [[TMP8]]
// CHK-CXX-NEXT:    [[FROMBOOL13:%.*]] = zext i1 [[CMP12]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL13]], i8* [[ATMP7]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT9]], label [[ATOMIC_EXIT14]]
// CHK-CXX:       atomic_exit14:
// CHK-CXX-NEXT:    [[TMP14:%.*]] = load i32, i32* [[ATMP5]], align 4
// CHK-CXX-NEXT:    [[TMP15:%.*]] = load i8, i8* [[ATMP7]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP14]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP16:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD15:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD15]], i32* [[ATMP16]], align 4
// CHK-CXX-NEXT:    [[CMP17:%.*]] = icmp slt i32 [[ATOMIC_LOAD15]], [[TMP16]]
// CHK-CXX-NEXT:    [[FROMBOOL19:%.*]] = zext i1 [[CMP17]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL19]], i8* [[ATMP18]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP17]], label [[ATOMIC_CONT20:%.*]], label [[ATOMIC_EXIT25:%.*]]
// CHK-CXX:       atomic_cont20:
// CHK-CXX-NEXT:    [[TMP17:%.*]] = phi i32 [ [[ATOMIC_LOAD15]], [[ATOMIC_EXIT14]] ], [ [[TMP20:%.*]], [[ATOMIC_CMP22:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP17]], i32* [[ATMP16]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP16]], i32* [[ATOMIC_TEMP21]], align 4
// CHK-CXX-NEXT:    [[TMP18:%.*]] = load i32, i32* [[ATOMIC_TEMP21]], align 4
// CHK-CXX-NEXT:    [[TMP19:%.*]] = cmpxchg i32* [[X]], i32 [[TMP17]], i32 [[TMP18]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP20]] = extractvalue { i32, i1 } [[TMP19]], 0
// CHK-CXX-NEXT:    [[TMP21:%.*]] = extractvalue { i32, i1 } [[TMP19]], 1
// CHK-CXX-NEXT:    br i1 [[TMP21]], label [[ATOMIC_EXIT25]], label [[ATOMIC_CMP22]]
// CHK-CXX:       atomic_cmp22:
// CHK-CXX-NEXT:    [[CMP23:%.*]] = icmp slt i32 [[TMP20]], [[TMP16]]
// CHK-CXX-NEXT:    [[FROMBOOL24:%.*]] = zext i1 [[CMP23]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL24]], i8* [[ATMP18]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP23]], label [[ATOMIC_CONT20]], label [[ATOMIC_EXIT25]]
// CHK-CXX:       atomic_exit25:
// CHK-CXX-NEXT:    [[TMP22:%.*]] = load i32, i32* [[ATMP16]], align 4
// CHK-CXX-NEXT:    [[TMP23:%.*]] = load i8, i8* [[ATMP18]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP22]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP24:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD26:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD26]], i32* [[ATMP27]], align 4
// CHK-CXX-NEXT:    [[CMP28:%.*]] = icmp slt i32 [[ATOMIC_LOAD26]], [[TMP24]]
// CHK-CXX-NEXT:    [[FROMBOOL30:%.*]] = zext i1 [[CMP28]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL30]], i8* [[ATMP29]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP28]], label [[ATOMIC_CONT31:%.*]], label [[ATOMIC_EXIT37:%.*]]
// CHK-CXX:       atomic_cont31:
// CHK-CXX-NEXT:    [[TMP25:%.*]] = phi i32 [ [[ATOMIC_LOAD26]], [[ATOMIC_EXIT25]] ], [ [[TMP28:%.*]], [[ATOMIC_CMP34:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP25]], i32* [[ATMP27]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP24]], i32* [[ATOMIC_TEMP32]], align 4
// CHK-CXX-NEXT:    [[TMP26:%.*]] = load i32, i32* [[ATOMIC_TEMP32]], align 4
// CHK-CXX-NEXT:    [[TMP27:%.*]] = cmpxchg i32* [[X]], i32 [[TMP25]], i32 [[TMP26]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP28]] = extractvalue { i32, i1 } [[TMP27]], 0
// CHK-CXX-NEXT:    [[TMP29:%.*]] = extractvalue { i32, i1 } [[TMP27]], 1
// CHK-CXX-NEXT:    br i1 [[TMP29]], label [[ATOMIC_UPD_EXIT33:%.*]], label [[ATOMIC_CMP34]]
// CHK-CXX:       atomic_upd_exit33:
// CHK-CXX-NEXT:    store i32 [[TMP24]], i32* [[ATMP27]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT37]]
// CHK-CXX:       atomic_cmp34:
// CHK-CXX-NEXT:    [[CMP35:%.*]] = icmp slt i32 [[TMP28]], [[TMP24]]
// CHK-CXX-NEXT:    [[FROMBOOL36:%.*]] = zext i1 [[CMP35]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL36]], i8* [[ATMP29]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP35]], label [[ATOMIC_CONT31]], label [[ATOMIC_EXIT37]]
// CHK-CXX:       atomic_exit37:
// CHK-CXX-NEXT:    [[TMP30:%.*]] = load i32, i32* [[ATMP27]], align 4
// CHK-CXX-NEXT:    [[TMP31:%.*]] = load i8, i8* [[ATMP29]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP30]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP32:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD38:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD38]], i32* [[ATMP39]], align 4
// CHK-CXX-NEXT:    [[CMP40:%.*]] = icmp slt i32 [[ATOMIC_LOAD38]], [[TMP32]]
// CHK-CXX-NEXT:    [[FROMBOOL42:%.*]] = zext i1 [[CMP40]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL42]], i8* [[ATMP41]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP40]], label [[ATOMIC_CONT43:%.*]], label [[ATOMIC_EXIT48:%.*]]
// CHK-CXX:       atomic_cont43:
// CHK-CXX-NEXT:    [[TMP33:%.*]] = phi i32 [ [[ATOMIC_LOAD38]], [[ATOMIC_EXIT37]] ], [ [[TMP36:%.*]], [[ATOMIC_CMP45:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP33]], i32* [[ATMP39]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP32]], i32* [[ATOMIC_TEMP44]], align 4
// CHK-CXX-NEXT:    [[TMP34:%.*]] = load i32, i32* [[ATOMIC_TEMP44]], align 4
// CHK-CXX-NEXT:    [[TMP35:%.*]] = cmpxchg i32* [[X]], i32 [[TMP33]], i32 [[TMP34]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP36]] = extractvalue { i32, i1 } [[TMP35]], 0
// CHK-CXX-NEXT:    [[TMP37:%.*]] = extractvalue { i32, i1 } [[TMP35]], 1
// CHK-CXX-NEXT:    br i1 [[TMP37]], label [[ATOMIC_EXIT48]], label [[ATOMIC_CMP45]]
// CHK-CXX:       atomic_cmp45:
// CHK-CXX-NEXT:    [[CMP46:%.*]] = icmp slt i32 [[TMP36]], [[TMP32]]
// CHK-CXX-NEXT:    [[FROMBOOL47:%.*]] = zext i1 [[CMP46]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL47]], i8* [[ATMP41]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP46]], label [[ATOMIC_CONT43]], label [[ATOMIC_EXIT48]]
// CHK-CXX:       atomic_exit48:
// CHK-CXX-NEXT:    [[TMP38:%.*]] = load i32, i32* [[ATMP39]], align 4
// CHK-CXX-NEXT:    [[TMP39:%.*]] = load i8, i8* [[ATMP41]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP38]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP40:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD49:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD49]], i32* [[ATMP50]], align 4
// CHK-CXX-NEXT:    [[CMP51:%.*]] = icmp slt i32 [[ATOMIC_LOAD49]], [[TMP40]]
// CHK-CXX-NEXT:    [[FROMBOOL53:%.*]] = zext i1 [[CMP51]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL53]], i8* [[ATMP52]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP51]], label [[ATOMIC_CONT54:%.*]], label [[ATOMIC_EXIT60:%.*]]
// CHK-CXX:       atomic_cont54:
// CHK-CXX-NEXT:    [[TMP41:%.*]] = phi i32 [ [[ATOMIC_LOAD49]], [[ATOMIC_EXIT48]] ], [ [[TMP44:%.*]], [[ATOMIC_CMP57:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP41]], i32* [[ATMP50]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP40]], i32* [[ATOMIC_TEMP55]], align 4
// CHK-CXX-NEXT:    [[TMP42:%.*]] = load i32, i32* [[ATOMIC_TEMP55]], align 4
// CHK-CXX-NEXT:    [[TMP43:%.*]] = cmpxchg i32* [[X]], i32 [[TMP41]], i32 [[TMP42]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP44]] = extractvalue { i32, i1 } [[TMP43]], 0
// CHK-CXX-NEXT:    [[TMP45:%.*]] = extractvalue { i32, i1 } [[TMP43]], 1
// CHK-CXX-NEXT:    br i1 [[TMP45]], label [[ATOMIC_UPD_EXIT56:%.*]], label [[ATOMIC_CMP57]]
// CHK-CXX:       atomic_upd_exit56:
// CHK-CXX-NEXT:    store i32 [[TMP40]], i32* [[ATMP50]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT60]]
// CHK-CXX:       atomic_cmp57:
// CHK-CXX-NEXT:    [[CMP58:%.*]] = icmp slt i32 [[TMP44]], [[TMP40]]
// CHK-CXX-NEXT:    [[FROMBOOL59:%.*]] = zext i1 [[CMP58]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL59]], i8* [[ATMP52]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP58]], label [[ATOMIC_CONT54]], label [[ATOMIC_EXIT60]]
// CHK-CXX:       atomic_exit60:
// CHK-CXX-NEXT:    [[TMP46:%.*]] = load i32, i32* [[ATMP50]], align 4
// CHK-CXX-NEXT:    [[TMP47:%.*]] = load i8, i8* [[ATMP52]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP46]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP48:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD61:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD61]], i32* [[ATMP62]], align 4
// CHK-CXX-NEXT:    [[CMP63:%.*]] = icmp sgt i32 [[ATOMIC_LOAD61]], [[TMP48]]
// CHK-CXX-NEXT:    [[FROMBOOL65:%.*]] = zext i1 [[CMP63]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL65]], i8* [[ATMP64]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP63]], label [[ATOMIC_CONT66:%.*]], label [[ATOMIC_EXIT71:%.*]]
// CHK-CXX:       atomic_cont66:
// CHK-CXX-NEXT:    [[TMP49:%.*]] = phi i32 [ [[ATOMIC_LOAD61]], [[ATOMIC_EXIT60]] ], [ [[TMP52:%.*]], [[ATOMIC_CMP68:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP49]], i32* [[ATMP62]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP48]], i32* [[ATOMIC_TEMP67]], align 4
// CHK-CXX-NEXT:    [[TMP50:%.*]] = load i32, i32* [[ATOMIC_TEMP67]], align 4
// CHK-CXX-NEXT:    [[TMP51:%.*]] = cmpxchg i32* [[X]], i32 [[TMP49]], i32 [[TMP50]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP52]] = extractvalue { i32, i1 } [[TMP51]], 0
// CHK-CXX-NEXT:    [[TMP53:%.*]] = extractvalue { i32, i1 } [[TMP51]], 1
// CHK-CXX-NEXT:    br i1 [[TMP53]], label [[ATOMIC_EXIT71]], label [[ATOMIC_CMP68]]
// CHK-CXX:       atomic_cmp68:
// CHK-CXX-NEXT:    [[CMP69:%.*]] = icmp sgt i32 [[TMP52]], [[TMP48]]
// CHK-CXX-NEXT:    [[FROMBOOL70:%.*]] = zext i1 [[CMP69]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL70]], i8* [[ATMP64]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP69]], label [[ATOMIC_CONT66]], label [[ATOMIC_EXIT71]]
// CHK-CXX:       atomic_exit71:
// CHK-CXX-NEXT:    [[TMP54:%.*]] = load i32, i32* [[ATMP62]], align 4
// CHK-CXX-NEXT:    [[TMP55:%.*]] = load i8, i8* [[ATMP64]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP54]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP56:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD72:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD72]], i32* [[ATMP73]], align 4
// CHK-CXX-NEXT:    [[CMP74:%.*]] = icmp sgt i32 [[ATOMIC_LOAD72]], [[TMP56]]
// CHK-CXX-NEXT:    [[FROMBOOL76:%.*]] = zext i1 [[CMP74]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL76]], i8* [[ATMP75]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP74]], label [[ATOMIC_CONT77:%.*]], label [[ATOMIC_EXIT83:%.*]]
// CHK-CXX:       atomic_cont77:
// CHK-CXX-NEXT:    [[TMP57:%.*]] = phi i32 [ [[ATOMIC_LOAD72]], [[ATOMIC_EXIT71]] ], [ [[TMP60:%.*]], [[ATOMIC_CMP80:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP57]], i32* [[ATMP73]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP56]], i32* [[ATOMIC_TEMP78]], align 4
// CHK-CXX-NEXT:    [[TMP58:%.*]] = load i32, i32* [[ATOMIC_TEMP78]], align 4
// CHK-CXX-NEXT:    [[TMP59:%.*]] = cmpxchg i32* [[X]], i32 [[TMP57]], i32 [[TMP58]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP60]] = extractvalue { i32, i1 } [[TMP59]], 0
// CHK-CXX-NEXT:    [[TMP61:%.*]] = extractvalue { i32, i1 } [[TMP59]], 1
// CHK-CXX-NEXT:    br i1 [[TMP61]], label [[ATOMIC_UPD_EXIT79:%.*]], label [[ATOMIC_CMP80]]
// CHK-CXX:       atomic_upd_exit79:
// CHK-CXX-NEXT:    store i32 [[TMP56]], i32* [[ATMP73]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT83]]
// CHK-CXX:       atomic_cmp80:
// CHK-CXX-NEXT:    [[CMP81:%.*]] = icmp sgt i32 [[TMP60]], [[TMP56]]
// CHK-CXX-NEXT:    [[FROMBOOL82:%.*]] = zext i1 [[CMP81]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL82]], i8* [[ATMP75]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP81]], label [[ATOMIC_CONT77]], label [[ATOMIC_EXIT83]]
// CHK-CXX:       atomic_exit83:
// CHK-CXX-NEXT:    [[TMP62:%.*]] = load i32, i32* [[ATMP73]], align 4
// CHK-CXX-NEXT:    [[TMP63:%.*]] = load i8, i8* [[ATMP75]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP62]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP64:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP65:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD84:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD84]], i32* [[ATMP85]], align 4
// CHK-CXX-NEXT:    [[CMP86:%.*]] = icmp eq i32 [[ATOMIC_LOAD84]], [[TMP65]]
// CHK-CXX-NEXT:    [[FROMBOOL88:%.*]] = zext i1 [[CMP86]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL88]], i8* [[ATMP87]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP86]], label [[ATOMIC_CONT89:%.*]], label [[ATOMIC_EXIT94:%.*]]
// CHK-CXX:       atomic_cont89:
// CHK-CXX-NEXT:    [[TMP66:%.*]] = phi i32 [ [[ATOMIC_LOAD84]], [[ATOMIC_EXIT83]] ], [ [[TMP69:%.*]], [[ATOMIC_CMP91:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP66]], i32* [[ATMP85]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP64]], i32* [[ATOMIC_TEMP90]], align 4
// CHK-CXX-NEXT:    [[TMP67:%.*]] = load i32, i32* [[ATOMIC_TEMP90]], align 4
// CHK-CXX-NEXT:    [[TMP68:%.*]] = cmpxchg i32* [[X]], i32 [[TMP66]], i32 [[TMP67]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP69]] = extractvalue { i32, i1 } [[TMP68]], 0
// CHK-CXX-NEXT:    [[TMP70:%.*]] = extractvalue { i32, i1 } [[TMP68]], 1
// CHK-CXX-NEXT:    br i1 [[TMP70]], label [[ATOMIC_EXIT94]], label [[ATOMIC_CMP91]]
// CHK-CXX:       atomic_cmp91:
// CHK-CXX-NEXT:    [[CMP92:%.*]] = icmp eq i32 [[TMP69]], [[TMP65]]
// CHK-CXX-NEXT:    [[FROMBOOL93:%.*]] = zext i1 [[CMP92]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL93]], i8* [[ATMP87]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP92]], label [[ATOMIC_CONT89]], label [[ATOMIC_EXIT94]]
// CHK-CXX:       atomic_exit94:
// CHK-CXX-NEXT:    [[TMP71:%.*]] = load i32, i32* [[ATMP85]], align 4
// CHK-CXX-NEXT:    [[TMP72:%.*]] = load i8, i8* [[ATMP87]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP71]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP73:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP74:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD95:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD95]], i32* [[ATMP96]], align 4
// CHK-CXX-NEXT:    [[CMP97:%.*]] = icmp eq i32 [[ATOMIC_LOAD95]], [[TMP74]]
// CHK-CXX-NEXT:    [[FROMBOOL99:%.*]] = zext i1 [[CMP97]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL99]], i8* [[ATMP98]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP97]], label [[ATOMIC_CONT100:%.*]], label [[ATOMIC_EXIT106:%.*]]
// CHK-CXX:       atomic_cont100:
// CHK-CXX-NEXT:    [[TMP75:%.*]] = phi i32 [ [[ATOMIC_LOAD95]], [[ATOMIC_EXIT94]] ], [ [[TMP78:%.*]], [[ATOMIC_CMP103:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP75]], i32* [[ATMP96]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP73]], i32* [[ATOMIC_TEMP101]], align 4
// CHK-CXX-NEXT:    [[TMP76:%.*]] = load i32, i32* [[ATOMIC_TEMP101]], align 4
// CHK-CXX-NEXT:    [[TMP77:%.*]] = cmpxchg i32* [[X]], i32 [[TMP75]], i32 [[TMP76]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP78]] = extractvalue { i32, i1 } [[TMP77]], 0
// CHK-CXX-NEXT:    [[TMP79:%.*]] = extractvalue { i32, i1 } [[TMP77]], 1
// CHK-CXX-NEXT:    br i1 [[TMP79]], label [[ATOMIC_UPD_EXIT102:%.*]], label [[ATOMIC_CMP103]]
// CHK-CXX:       atomic_upd_exit102:
// CHK-CXX-NEXT:    store i32 [[TMP73]], i32* [[ATMP96]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT106]]
// CHK-CXX:       atomic_cmp103:
// CHK-CXX-NEXT:    [[CMP104:%.*]] = icmp eq i32 [[TMP78]], [[TMP74]]
// CHK-CXX-NEXT:    [[FROMBOOL105:%.*]] = zext i1 [[CMP104]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL105]], i8* [[ATMP98]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP104]], label [[ATOMIC_CONT100]], label [[ATOMIC_EXIT106]]
// CHK-CXX:       atomic_exit106:
// CHK-CXX-NEXT:    [[TMP80:%.*]] = load i32, i32* [[ATMP96]], align 4
// CHK-CXX-NEXT:    [[TMP81:%.*]] = load i8, i8* [[ATMP98]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP80]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP82:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP83:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD107:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD107]], i32* [[ATMP108]], align 4
// CHK-CXX-NEXT:    [[CMP109:%.*]] = icmp eq i32 [[ATOMIC_LOAD107]], [[TMP83]]
// CHK-CXX-NEXT:    [[FROMBOOL111:%.*]] = zext i1 [[CMP109]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL111]], i8* [[ATMP110]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP109]], label [[ATOMIC_CONT112:%.*]], label [[ATOMIC_EXIT118:%.*]]
// CHK-CXX:       atomic_cont112:
// CHK-CXX-NEXT:    [[TMP84:%.*]] = phi i32 [ [[ATOMIC_LOAD107]], [[ATOMIC_EXIT106]] ], [ [[TMP87:%.*]], [[ATOMIC_CMP115:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP84]], i32* [[ATMP108]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP82]], i32* [[ATOMIC_TEMP113]], align 4
// CHK-CXX-NEXT:    [[TMP85:%.*]] = load i32, i32* [[ATOMIC_TEMP113]], align 4
// CHK-CXX-NEXT:    [[TMP86:%.*]] = cmpxchg i32* [[X]], i32 [[TMP84]], i32 [[TMP85]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP87]] = extractvalue { i32, i1 } [[TMP86]], 0
// CHK-CXX-NEXT:    [[TMP88:%.*]] = extractvalue { i32, i1 } [[TMP86]], 1
// CHK-CXX-NEXT:    br i1 [[TMP88]], label [[ATOMIC_UPD_EXIT114:%.*]], label [[ATOMIC_CMP115]]
// CHK-CXX:       atomic_upd_exit114:
// CHK-CXX-NEXT:    store i32 [[TMP82]], i32* [[ATMP108]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT118]]
// CHK-CXX:       atomic_cmp115:
// CHK-CXX-NEXT:    [[CMP116:%.*]] = icmp eq i32 [[TMP87]], [[TMP83]]
// CHK-CXX-NEXT:    [[FROMBOOL117:%.*]] = zext i1 [[CMP116]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL117]], i8* [[ATMP110]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP116]], label [[ATOMIC_CONT112]], label [[ATOMIC_EXIT118]]
// CHK-CXX:       atomic_exit118:
// CHK-CXX-NEXT:    [[TMP89:%.*]] = load i32, i32* [[ATMP108]], align 4
// CHK-CXX-NEXT:    [[TMP90:%.*]] = load i8, i8* [[ATMP110]], align 1
// CHK-CXX-NEXT:    [[TMP91:%.*]] = trunc i8 [[TMP90]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP91]], label [[ATOMIC_CAPTURE_CONT:%.*]], label [[ATOMIC_CAPTURE:%.*]]
// CHK-CXX:       atomic_capture:
// CHK-CXX-NEXT:    store i32 [[TMP89]], i32* [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT]]
// CHK-CXX:       atomic_capture_cont:
// CHK-CXX-NEXT:    [[TMP92:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP93:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD119:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD119]], i32* [[ATMP120]], align 4
// CHK-CXX-NEXT:    [[CMP121:%.*]] = icmp eq i32 [[ATOMIC_LOAD119]], [[TMP93]]
// CHK-CXX-NEXT:    [[FROMBOOL123:%.*]] = zext i1 [[CMP121]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL123]], i8* [[ATMP122]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP121]], label [[ATOMIC_CONT124:%.*]], label [[ATOMIC_EXIT129:%.*]]
// CHK-CXX:       atomic_cont124:
// CHK-CXX-NEXT:    [[TMP94:%.*]] = phi i32 [ [[ATOMIC_LOAD119]], [[ATOMIC_CAPTURE_CONT]] ], [ [[TMP97:%.*]], [[ATOMIC_CMP126:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP94]], i32* [[ATMP120]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP92]], i32* [[ATOMIC_TEMP125]], align 4
// CHK-CXX-NEXT:    [[TMP95:%.*]] = load i32, i32* [[ATOMIC_TEMP125]], align 4
// CHK-CXX-NEXT:    [[TMP96:%.*]] = cmpxchg i32* [[X]], i32 [[TMP94]], i32 [[TMP95]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP97]] = extractvalue { i32, i1 } [[TMP96]], 0
// CHK-CXX-NEXT:    [[TMP98:%.*]] = extractvalue { i32, i1 } [[TMP96]], 1
// CHK-CXX-NEXT:    br i1 [[TMP98]], label [[ATOMIC_EXIT129]], label [[ATOMIC_CMP126]]
// CHK-CXX:       atomic_cmp126:
// CHK-CXX-NEXT:    [[CMP127:%.*]] = icmp eq i32 [[TMP97]], [[TMP93]]
// CHK-CXX-NEXT:    [[FROMBOOL128:%.*]] = zext i1 [[CMP127]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL128]], i8* [[ATMP122]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP127]], label [[ATOMIC_CONT124]], label [[ATOMIC_EXIT129]]
// CHK-CXX:       atomic_exit129:
// CHK-CXX-NEXT:    [[TMP99:%.*]] = load i32, i32* [[ATMP120]], align 4
// CHK-CXX-NEXT:    [[TMP100:%.*]] = load i8, i8* [[ATMP122]], align 1
// CHK-CXX-NEXT:    store i8 [[TMP100]], i8* [[R]], align 1
// CHK-CXX-NEXT:    [[TMP101:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP102:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD130:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD130]], i32* [[ATMP131]], align 4
// CHK-CXX-NEXT:    [[CMP132:%.*]] = icmp eq i32 [[ATOMIC_LOAD130]], [[TMP102]]
// CHK-CXX-NEXT:    [[FROMBOOL134:%.*]] = zext i1 [[CMP132]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL134]], i8* [[ATMP133]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP132]], label [[ATOMIC_CONT135:%.*]], label [[ATOMIC_EXIT140:%.*]]
// CHK-CXX:       atomic_cont135:
// CHK-CXX-NEXT:    [[TMP103:%.*]] = phi i32 [ [[ATOMIC_LOAD130]], [[ATOMIC_EXIT129]] ], [ [[TMP106:%.*]], [[ATOMIC_CMP137:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP103]], i32* [[ATMP131]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP101]], i32* [[ATOMIC_TEMP136]], align 4
// CHK-CXX-NEXT:    [[TMP104:%.*]] = load i32, i32* [[ATOMIC_TEMP136]], align 4
// CHK-CXX-NEXT:    [[TMP105:%.*]] = cmpxchg i32* [[X]], i32 [[TMP103]], i32 [[TMP104]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP106]] = extractvalue { i32, i1 } [[TMP105]], 0
// CHK-CXX-NEXT:    [[TMP107:%.*]] = extractvalue { i32, i1 } [[TMP105]], 1
// CHK-CXX-NEXT:    br i1 [[TMP107]], label [[ATOMIC_EXIT140]], label [[ATOMIC_CMP137]]
// CHK-CXX:       atomic_cmp137:
// CHK-CXX-NEXT:    [[CMP138:%.*]] = icmp eq i32 [[TMP106]], [[TMP102]]
// CHK-CXX-NEXT:    [[FROMBOOL139:%.*]] = zext i1 [[CMP138]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL139]], i8* [[ATMP133]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP138]], label [[ATOMIC_CONT135]], label [[ATOMIC_EXIT140]]
// CHK-CXX:       atomic_exit140:
// CHK-CXX-NEXT:    [[TMP108:%.*]] = load i32, i32* [[ATMP131]], align 4
// CHK-CXX-NEXT:    [[TMP109:%.*]] = load i8, i8* [[ATMP133]], align 1
// CHK-CXX-NEXT:    store i8 [[TMP109]], i8* [[R]], align 1
// CHK-CXX-NEXT:    [[TMP110:%.*]] = trunc i8 [[TMP109]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP110]], label [[ATOMIC_CAPTURE_CONT142:%.*]], label [[ATOMIC_CAPTURE141:%.*]]
// CHK-CXX:       atomic_capture141:
// CHK-CXX-NEXT:    store i32 [[TMP108]], i32* [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT142]]
// CHK-CXX:       atomic_capture_cont142:
// CHK-CXX-NEXT:    ret void
//
void test_int() {
  // One of each form with 'int'.
  int x, expr, d, e, v;
#ifdef __cplusplus
  bool r;
#else
  _Bool r;
#endif

  #pragma omp atomic compare capture
  { v = x; if (expr < x) { x = expr; } } // MIN

  #pragma omp atomic compare capture
  { if (expr < x) { x = expr; } v = x; } // MIN

  #pragma omp atomic compare capture
  { v = x; if (expr > x) { x = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (expr > x) { x = expr; } v = x; } // MAX

  #pragma omp atomic compare capture
  { v = x; if (x < expr) { x = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (x < expr) { x = expr; } v = x; } // MAX

  #pragma omp atomic compare capture
  { v = x; if (x > expr) { x = expr; } } // MIN

  #pragma omp atomic compare capture
  { if (x > expr) { x = expr; } v = x; } // MIN

  #pragma omp atomic compare capture
  { v = x; if (x == e) { x = d; } }

  #pragma omp atomic compare capture
  { if (x == e) { x = d; } v = x; }

  #pragma omp atomic compare capture
  if (x == e) { x = d; } else { v = x; }

  #pragma omp atomic compare capture
  { r = x == e; if(r) { x = d; } }

  #pragma omp atomic compare capture
  { r = x == e; if(r) { x = d; } else { v = x; } }
}

// CHK-C-LABEL: @test_unsigned_short(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[X:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[D:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[E:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[V:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[R:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[TMP:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP5:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP7:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP10:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP16:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP18:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP21:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP27:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP29:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP32:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP39:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP41:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP44:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP50:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP52:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP55:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP62:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP64:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP67:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP73:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP75:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP78:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP85:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP87:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP90:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP96:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP98:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP101:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP108:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP110:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP113:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP120:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP122:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP125:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP131:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP133:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP136:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[TMP0:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD]], i16* [[TMP]], align 2
// CHK-C-NEXT:    [[CMP:%.*]] = icmp ugt i16 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-C-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL]], i8* [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP1:%.*]] = phi i16 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP1]], i16* [[TMP]], align 2
// CHK-C-NEXT:    store i16 [[TMP0]], i16* [[ATOMIC_TEMP]], align 2
// CHK-C-NEXT:    [[TMP2:%.*]] = load i16, i16* [[ATOMIC_TEMP]], align 2
// CHK-C-NEXT:    [[TMP3:%.*]] = cmpxchg i16* [[X]], i16 [[TMP1]], i16 [[TMP2]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP4]] = extractvalue { i16, i1 } [[TMP3]], 0
// CHK-C-NEXT:    [[TMP5:%.*]] = extractvalue { i16, i1 } [[TMP3]], 1
// CHK-C-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    [[CMP2:%.*]] = icmp ugt i16 [[TMP4]], [[TMP0]]
// CHK-C-NEXT:    [[FROMBOOL3:%.*]] = zext i1 [[CMP2]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL3]], i8* [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP2]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP6:%.*]] = load i16, i16* [[TMP]], align 2
// CHK-C-NEXT:    [[TMP7:%.*]] = load i8, i8* [[ATMP1]], align 1
// CHK-C-NEXT:    store i16 [[TMP6]], i16* [[V]], align 2
// CHK-C-NEXT:    [[TMP8:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD4:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD4]], i16* [[ATMP5]], align 2
// CHK-C-NEXT:    [[CMP6:%.*]] = icmp ugt i16 [[ATOMIC_LOAD4]], [[TMP8]]
// CHK-C-NEXT:    [[FROMBOOL8:%.*]] = zext i1 [[CMP6]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL8]], i8* [[ATMP7]], align 1
// CHK-C-NEXT:    br i1 [[CMP6]], label [[ATOMIC_CONT9:%.*]], label [[ATOMIC_EXIT14:%.*]]
// CHK-C:       atomic_cont9:
// CHK-C-NEXT:    [[TMP9:%.*]] = phi i16 [ [[ATOMIC_LOAD4]], [[ATOMIC_EXIT]] ], [ [[TMP12:%.*]], [[ATOMIC_CMP11:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP9]], i16* [[ATMP5]], align 2
// CHK-C-NEXT:    store i16 [[TMP8]], i16* [[ATOMIC_TEMP10]], align 2
// CHK-C-NEXT:    [[TMP10:%.*]] = load i16, i16* [[ATOMIC_TEMP10]], align 2
// CHK-C-NEXT:    [[TMP11:%.*]] = cmpxchg i16* [[X]], i16 [[TMP9]], i16 [[TMP10]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP12]] = extractvalue { i16, i1 } [[TMP11]], 0
// CHK-C-NEXT:    [[TMP13:%.*]] = extractvalue { i16, i1 } [[TMP11]], 1
// CHK-C-NEXT:    br i1 [[TMP13]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP11]]
// CHK-C:       atomic_upd_exit:
// CHK-C-NEXT:    store i16 [[TMP8]], i16* [[ATMP5]], align 2
// CHK-C-NEXT:    br label [[ATOMIC_EXIT14]]
// CHK-C:       atomic_cmp11:
// CHK-C-NEXT:    [[CMP12:%.*]] = icmp ugt i16 [[TMP12]], [[TMP8]]
// CHK-C-NEXT:    [[FROMBOOL13:%.*]] = zext i1 [[CMP12]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL13]], i8* [[ATMP7]], align 1
// CHK-C-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT9]], label [[ATOMIC_EXIT14]]
// CHK-C:       atomic_exit14:
// CHK-C-NEXT:    [[TMP14:%.*]] = load i16, i16* [[ATMP5]], align 2
// CHK-C-NEXT:    [[TMP15:%.*]] = load i8, i8* [[ATMP7]], align 1
// CHK-C-NEXT:    store i16 [[TMP14]], i16* [[V]], align 2
// CHK-C-NEXT:    [[TMP16:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD15:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD15]], i16* [[ATMP16]], align 2
// CHK-C-NEXT:    [[CMP17:%.*]] = icmp ult i16 [[ATOMIC_LOAD15]], [[TMP16]]
// CHK-C-NEXT:    [[FROMBOOL19:%.*]] = zext i1 [[CMP17]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL19]], i8* [[ATMP18]], align 1
// CHK-C-NEXT:    br i1 [[CMP17]], label [[ATOMIC_CONT20:%.*]], label [[ATOMIC_EXIT25:%.*]]
// CHK-C:       atomic_cont20:
// CHK-C-NEXT:    [[TMP17:%.*]] = phi i16 [ [[ATOMIC_LOAD15]], [[ATOMIC_EXIT14]] ], [ [[TMP20:%.*]], [[ATOMIC_CMP22:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP17]], i16* [[ATMP16]], align 2
// CHK-C-NEXT:    store i16 [[TMP16]], i16* [[ATOMIC_TEMP21]], align 2
// CHK-C-NEXT:    [[TMP18:%.*]] = load i16, i16* [[ATOMIC_TEMP21]], align 2
// CHK-C-NEXT:    [[TMP19:%.*]] = cmpxchg i16* [[X]], i16 [[TMP17]], i16 [[TMP18]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP20]] = extractvalue { i16, i1 } [[TMP19]], 0
// CHK-C-NEXT:    [[TMP21:%.*]] = extractvalue { i16, i1 } [[TMP19]], 1
// CHK-C-NEXT:    br i1 [[TMP21]], label [[ATOMIC_EXIT25]], label [[ATOMIC_CMP22]]
// CHK-C:       atomic_cmp22:
// CHK-C-NEXT:    [[CMP23:%.*]] = icmp ult i16 [[TMP20]], [[TMP16]]
// CHK-C-NEXT:    [[FROMBOOL24:%.*]] = zext i1 [[CMP23]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL24]], i8* [[ATMP18]], align 1
// CHK-C-NEXT:    br i1 [[CMP23]], label [[ATOMIC_CONT20]], label [[ATOMIC_EXIT25]]
// CHK-C:       atomic_exit25:
// CHK-C-NEXT:    [[TMP22:%.*]] = load i16, i16* [[ATMP16]], align 2
// CHK-C-NEXT:    [[TMP23:%.*]] = load i8, i8* [[ATMP18]], align 1
// CHK-C-NEXT:    store i16 [[TMP22]], i16* [[V]], align 2
// CHK-C-NEXT:    [[TMP24:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD26:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD26]], i16* [[ATMP27]], align 2
// CHK-C-NEXT:    [[CMP28:%.*]] = icmp ult i16 [[ATOMIC_LOAD26]], [[TMP24]]
// CHK-C-NEXT:    [[FROMBOOL30:%.*]] = zext i1 [[CMP28]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL30]], i8* [[ATMP29]], align 1
// CHK-C-NEXT:    br i1 [[CMP28]], label [[ATOMIC_CONT31:%.*]], label [[ATOMIC_EXIT37:%.*]]
// CHK-C:       atomic_cont31:
// CHK-C-NEXT:    [[TMP25:%.*]] = phi i16 [ [[ATOMIC_LOAD26]], [[ATOMIC_EXIT25]] ], [ [[TMP28:%.*]], [[ATOMIC_CMP34:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP25]], i16* [[ATMP27]], align 2
// CHK-C-NEXT:    store i16 [[TMP24]], i16* [[ATOMIC_TEMP32]], align 2
// CHK-C-NEXT:    [[TMP26:%.*]] = load i16, i16* [[ATOMIC_TEMP32]], align 2
// CHK-C-NEXT:    [[TMP27:%.*]] = cmpxchg i16* [[X]], i16 [[TMP25]], i16 [[TMP26]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP28]] = extractvalue { i16, i1 } [[TMP27]], 0
// CHK-C-NEXT:    [[TMP29:%.*]] = extractvalue { i16, i1 } [[TMP27]], 1
// CHK-C-NEXT:    br i1 [[TMP29]], label [[ATOMIC_UPD_EXIT33:%.*]], label [[ATOMIC_CMP34]]
// CHK-C:       atomic_upd_exit33:
// CHK-C-NEXT:    store i16 [[TMP24]], i16* [[ATMP27]], align 2
// CHK-C-NEXT:    br label [[ATOMIC_EXIT37]]
// CHK-C:       atomic_cmp34:
// CHK-C-NEXT:    [[CMP35:%.*]] = icmp ult i16 [[TMP28]], [[TMP24]]
// CHK-C-NEXT:    [[FROMBOOL36:%.*]] = zext i1 [[CMP35]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL36]], i8* [[ATMP29]], align 1
// CHK-C-NEXT:    br i1 [[CMP35]], label [[ATOMIC_CONT31]], label [[ATOMIC_EXIT37]]
// CHK-C:       atomic_exit37:
// CHK-C-NEXT:    [[TMP30:%.*]] = load i16, i16* [[ATMP27]], align 2
// CHK-C-NEXT:    [[TMP31:%.*]] = load i8, i8* [[ATMP29]], align 1
// CHK-C-NEXT:    store i16 [[TMP30]], i16* [[V]], align 2
// CHK-C-NEXT:    [[TMP32:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD38:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD38]], i16* [[ATMP39]], align 2
// CHK-C-NEXT:    [[CMP40:%.*]] = icmp ult i16 [[ATOMIC_LOAD38]], [[TMP32]]
// CHK-C-NEXT:    [[FROMBOOL42:%.*]] = zext i1 [[CMP40]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL42]], i8* [[ATMP41]], align 1
// CHK-C-NEXT:    br i1 [[CMP40]], label [[ATOMIC_CONT43:%.*]], label [[ATOMIC_EXIT48:%.*]]
// CHK-C:       atomic_cont43:
// CHK-C-NEXT:    [[TMP33:%.*]] = phi i16 [ [[ATOMIC_LOAD38]], [[ATOMIC_EXIT37]] ], [ [[TMP36:%.*]], [[ATOMIC_CMP45:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP33]], i16* [[ATMP39]], align 2
// CHK-C-NEXT:    store i16 [[TMP32]], i16* [[ATOMIC_TEMP44]], align 2
// CHK-C-NEXT:    [[TMP34:%.*]] = load i16, i16* [[ATOMIC_TEMP44]], align 2
// CHK-C-NEXT:    [[TMP35:%.*]] = cmpxchg i16* [[X]], i16 [[TMP33]], i16 [[TMP34]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP36]] = extractvalue { i16, i1 } [[TMP35]], 0
// CHK-C-NEXT:    [[TMP37:%.*]] = extractvalue { i16, i1 } [[TMP35]], 1
// CHK-C-NEXT:    br i1 [[TMP37]], label [[ATOMIC_EXIT48]], label [[ATOMIC_CMP45]]
// CHK-C:       atomic_cmp45:
// CHK-C-NEXT:    [[CMP46:%.*]] = icmp ult i16 [[TMP36]], [[TMP32]]
// CHK-C-NEXT:    [[FROMBOOL47:%.*]] = zext i1 [[CMP46]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL47]], i8* [[ATMP41]], align 1
// CHK-C-NEXT:    br i1 [[CMP46]], label [[ATOMIC_CONT43]], label [[ATOMIC_EXIT48]]
// CHK-C:       atomic_exit48:
// CHK-C-NEXT:    [[TMP38:%.*]] = load i16, i16* [[ATMP39]], align 2
// CHK-C-NEXT:    [[TMP39:%.*]] = load i8, i8* [[ATMP41]], align 1
// CHK-C-NEXT:    store i16 [[TMP38]], i16* [[V]], align 2
// CHK-C-NEXT:    [[TMP40:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD49:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD49]], i16* [[ATMP50]], align 2
// CHK-C-NEXT:    [[CMP51:%.*]] = icmp ult i16 [[ATOMIC_LOAD49]], [[TMP40]]
// CHK-C-NEXT:    [[FROMBOOL53:%.*]] = zext i1 [[CMP51]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL53]], i8* [[ATMP52]], align 1
// CHK-C-NEXT:    br i1 [[CMP51]], label [[ATOMIC_CONT54:%.*]], label [[ATOMIC_EXIT60:%.*]]
// CHK-C:       atomic_cont54:
// CHK-C-NEXT:    [[TMP41:%.*]] = phi i16 [ [[ATOMIC_LOAD49]], [[ATOMIC_EXIT48]] ], [ [[TMP44:%.*]], [[ATOMIC_CMP57:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP41]], i16* [[ATMP50]], align 2
// CHK-C-NEXT:    store i16 [[TMP40]], i16* [[ATOMIC_TEMP55]], align 2
// CHK-C-NEXT:    [[TMP42:%.*]] = load i16, i16* [[ATOMIC_TEMP55]], align 2
// CHK-C-NEXT:    [[TMP43:%.*]] = cmpxchg i16* [[X]], i16 [[TMP41]], i16 [[TMP42]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP44]] = extractvalue { i16, i1 } [[TMP43]], 0
// CHK-C-NEXT:    [[TMP45:%.*]] = extractvalue { i16, i1 } [[TMP43]], 1
// CHK-C-NEXT:    br i1 [[TMP45]], label [[ATOMIC_UPD_EXIT56:%.*]], label [[ATOMIC_CMP57]]
// CHK-C:       atomic_upd_exit56:
// CHK-C-NEXT:    store i16 [[TMP40]], i16* [[ATMP50]], align 2
// CHK-C-NEXT:    br label [[ATOMIC_EXIT60]]
// CHK-C:       atomic_cmp57:
// CHK-C-NEXT:    [[CMP58:%.*]] = icmp ult i16 [[TMP44]], [[TMP40]]
// CHK-C-NEXT:    [[FROMBOOL59:%.*]] = zext i1 [[CMP58]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL59]], i8* [[ATMP52]], align 1
// CHK-C-NEXT:    br i1 [[CMP58]], label [[ATOMIC_CONT54]], label [[ATOMIC_EXIT60]]
// CHK-C:       atomic_exit60:
// CHK-C-NEXT:    [[TMP46:%.*]] = load i16, i16* [[ATMP50]], align 2
// CHK-C-NEXT:    [[TMP47:%.*]] = load i8, i8* [[ATMP52]], align 1
// CHK-C-NEXT:    store i16 [[TMP46]], i16* [[V]], align 2
// CHK-C-NEXT:    [[TMP48:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD61:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD61]], i16* [[ATMP62]], align 2
// CHK-C-NEXT:    [[CMP63:%.*]] = icmp ugt i16 [[ATOMIC_LOAD61]], [[TMP48]]
// CHK-C-NEXT:    [[FROMBOOL65:%.*]] = zext i1 [[CMP63]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL65]], i8* [[ATMP64]], align 1
// CHK-C-NEXT:    br i1 [[CMP63]], label [[ATOMIC_CONT66:%.*]], label [[ATOMIC_EXIT71:%.*]]
// CHK-C:       atomic_cont66:
// CHK-C-NEXT:    [[TMP49:%.*]] = phi i16 [ [[ATOMIC_LOAD61]], [[ATOMIC_EXIT60]] ], [ [[TMP52:%.*]], [[ATOMIC_CMP68:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP49]], i16* [[ATMP62]], align 2
// CHK-C-NEXT:    store i16 [[TMP48]], i16* [[ATOMIC_TEMP67]], align 2
// CHK-C-NEXT:    [[TMP50:%.*]] = load i16, i16* [[ATOMIC_TEMP67]], align 2
// CHK-C-NEXT:    [[TMP51:%.*]] = cmpxchg i16* [[X]], i16 [[TMP49]], i16 [[TMP50]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP52]] = extractvalue { i16, i1 } [[TMP51]], 0
// CHK-C-NEXT:    [[TMP53:%.*]] = extractvalue { i16, i1 } [[TMP51]], 1
// CHK-C-NEXT:    br i1 [[TMP53]], label [[ATOMIC_EXIT71]], label [[ATOMIC_CMP68]]
// CHK-C:       atomic_cmp68:
// CHK-C-NEXT:    [[CMP69:%.*]] = icmp ugt i16 [[TMP52]], [[TMP48]]
// CHK-C-NEXT:    [[FROMBOOL70:%.*]] = zext i1 [[CMP69]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL70]], i8* [[ATMP64]], align 1
// CHK-C-NEXT:    br i1 [[CMP69]], label [[ATOMIC_CONT66]], label [[ATOMIC_EXIT71]]
// CHK-C:       atomic_exit71:
// CHK-C-NEXT:    [[TMP54:%.*]] = load i16, i16* [[ATMP62]], align 2
// CHK-C-NEXT:    [[TMP55:%.*]] = load i8, i8* [[ATMP64]], align 1
// CHK-C-NEXT:    store i16 [[TMP54]], i16* [[V]], align 2
// CHK-C-NEXT:    [[TMP56:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD72:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD72]], i16* [[ATMP73]], align 2
// CHK-C-NEXT:    [[CMP74:%.*]] = icmp ugt i16 [[ATOMIC_LOAD72]], [[TMP56]]
// CHK-C-NEXT:    [[FROMBOOL76:%.*]] = zext i1 [[CMP74]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL76]], i8* [[ATMP75]], align 1
// CHK-C-NEXT:    br i1 [[CMP74]], label [[ATOMIC_CONT77:%.*]], label [[ATOMIC_EXIT83:%.*]]
// CHK-C:       atomic_cont77:
// CHK-C-NEXT:    [[TMP57:%.*]] = phi i16 [ [[ATOMIC_LOAD72]], [[ATOMIC_EXIT71]] ], [ [[TMP60:%.*]], [[ATOMIC_CMP80:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP57]], i16* [[ATMP73]], align 2
// CHK-C-NEXT:    store i16 [[TMP56]], i16* [[ATOMIC_TEMP78]], align 2
// CHK-C-NEXT:    [[TMP58:%.*]] = load i16, i16* [[ATOMIC_TEMP78]], align 2
// CHK-C-NEXT:    [[TMP59:%.*]] = cmpxchg i16* [[X]], i16 [[TMP57]], i16 [[TMP58]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP60]] = extractvalue { i16, i1 } [[TMP59]], 0
// CHK-C-NEXT:    [[TMP61:%.*]] = extractvalue { i16, i1 } [[TMP59]], 1
// CHK-C-NEXT:    br i1 [[TMP61]], label [[ATOMIC_UPD_EXIT79:%.*]], label [[ATOMIC_CMP80]]
// CHK-C:       atomic_upd_exit79:
// CHK-C-NEXT:    store i16 [[TMP56]], i16* [[ATMP73]], align 2
// CHK-C-NEXT:    br label [[ATOMIC_EXIT83]]
// CHK-C:       atomic_cmp80:
// CHK-C-NEXT:    [[CMP81:%.*]] = icmp ugt i16 [[TMP60]], [[TMP56]]
// CHK-C-NEXT:    [[FROMBOOL82:%.*]] = zext i1 [[CMP81]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL82]], i8* [[ATMP75]], align 1
// CHK-C-NEXT:    br i1 [[CMP81]], label [[ATOMIC_CONT77]], label [[ATOMIC_EXIT83]]
// CHK-C:       atomic_exit83:
// CHK-C-NEXT:    [[TMP62:%.*]] = load i16, i16* [[ATMP73]], align 2
// CHK-C-NEXT:    [[TMP63:%.*]] = load i8, i8* [[ATMP75]], align 1
// CHK-C-NEXT:    store i16 [[TMP62]], i16* [[V]], align 2
// CHK-C-NEXT:    [[TMP64:%.*]] = load i16, i16* [[D]], align 2
// CHK-C-NEXT:    [[TMP65:%.*]] = load i16, i16* [[E]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD84:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD84]], i16* [[ATMP85]], align 2
// CHK-C-NEXT:    [[CMP86:%.*]] = icmp eq i16 [[ATOMIC_LOAD84]], [[TMP65]]
// CHK-C-NEXT:    [[FROMBOOL88:%.*]] = zext i1 [[CMP86]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL88]], i8* [[ATMP87]], align 1
// CHK-C-NEXT:    br i1 [[CMP86]], label [[ATOMIC_CONT89:%.*]], label [[ATOMIC_EXIT94:%.*]]
// CHK-C:       atomic_cont89:
// CHK-C-NEXT:    [[TMP66:%.*]] = phi i16 [ [[ATOMIC_LOAD84]], [[ATOMIC_EXIT83]] ], [ [[TMP69:%.*]], [[ATOMIC_CMP91:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP66]], i16* [[ATMP85]], align 2
// CHK-C-NEXT:    store i16 [[TMP64]], i16* [[ATOMIC_TEMP90]], align 2
// CHK-C-NEXT:    [[TMP67:%.*]] = load i16, i16* [[ATOMIC_TEMP90]], align 2
// CHK-C-NEXT:    [[TMP68:%.*]] = cmpxchg i16* [[X]], i16 [[TMP66]], i16 [[TMP67]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP69]] = extractvalue { i16, i1 } [[TMP68]], 0
// CHK-C-NEXT:    [[TMP70:%.*]] = extractvalue { i16, i1 } [[TMP68]], 1
// CHK-C-NEXT:    br i1 [[TMP70]], label [[ATOMIC_EXIT94]], label [[ATOMIC_CMP91]]
// CHK-C:       atomic_cmp91:
// CHK-C-NEXT:    [[CMP92:%.*]] = icmp eq i16 [[TMP69]], [[TMP65]]
// CHK-C-NEXT:    [[FROMBOOL93:%.*]] = zext i1 [[CMP92]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL93]], i8* [[ATMP87]], align 1
// CHK-C-NEXT:    br i1 [[CMP92]], label [[ATOMIC_CONT89]], label [[ATOMIC_EXIT94]]
// CHK-C:       atomic_exit94:
// CHK-C-NEXT:    [[TMP71:%.*]] = load i16, i16* [[ATMP85]], align 2
// CHK-C-NEXT:    [[TMP72:%.*]] = load i8, i8* [[ATMP87]], align 1
// CHK-C-NEXT:    store i16 [[TMP71]], i16* [[V]], align 2
// CHK-C-NEXT:    [[TMP73:%.*]] = load i16, i16* [[D]], align 2
// CHK-C-NEXT:    [[TMP74:%.*]] = load i16, i16* [[E]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD95:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD95]], i16* [[ATMP96]], align 2
// CHK-C-NEXT:    [[CMP97:%.*]] = icmp eq i16 [[ATOMIC_LOAD95]], [[TMP74]]
// CHK-C-NEXT:    [[FROMBOOL99:%.*]] = zext i1 [[CMP97]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL99]], i8* [[ATMP98]], align 1
// CHK-C-NEXT:    br i1 [[CMP97]], label [[ATOMIC_CONT100:%.*]], label [[ATOMIC_EXIT106:%.*]]
// CHK-C:       atomic_cont100:
// CHK-C-NEXT:    [[TMP75:%.*]] = phi i16 [ [[ATOMIC_LOAD95]], [[ATOMIC_EXIT94]] ], [ [[TMP78:%.*]], [[ATOMIC_CMP103:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP75]], i16* [[ATMP96]], align 2
// CHK-C-NEXT:    store i16 [[TMP73]], i16* [[ATOMIC_TEMP101]], align 2
// CHK-C-NEXT:    [[TMP76:%.*]] = load i16, i16* [[ATOMIC_TEMP101]], align 2
// CHK-C-NEXT:    [[TMP77:%.*]] = cmpxchg i16* [[X]], i16 [[TMP75]], i16 [[TMP76]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP78]] = extractvalue { i16, i1 } [[TMP77]], 0
// CHK-C-NEXT:    [[TMP79:%.*]] = extractvalue { i16, i1 } [[TMP77]], 1
// CHK-C-NEXT:    br i1 [[TMP79]], label [[ATOMIC_UPD_EXIT102:%.*]], label [[ATOMIC_CMP103]]
// CHK-C:       atomic_upd_exit102:
// CHK-C-NEXT:    store i16 [[TMP73]], i16* [[ATMP96]], align 2
// CHK-C-NEXT:    br label [[ATOMIC_EXIT106]]
// CHK-C:       atomic_cmp103:
// CHK-C-NEXT:    [[CMP104:%.*]] = icmp eq i16 [[TMP78]], [[TMP74]]
// CHK-C-NEXT:    [[FROMBOOL105:%.*]] = zext i1 [[CMP104]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL105]], i8* [[ATMP98]], align 1
// CHK-C-NEXT:    br i1 [[CMP104]], label [[ATOMIC_CONT100]], label [[ATOMIC_EXIT106]]
// CHK-C:       atomic_exit106:
// CHK-C-NEXT:    [[TMP80:%.*]] = load i16, i16* [[ATMP96]], align 2
// CHK-C-NEXT:    [[TMP81:%.*]] = load i8, i8* [[ATMP98]], align 1
// CHK-C-NEXT:    store i16 [[TMP80]], i16* [[V]], align 2
// CHK-C-NEXT:    [[TMP82:%.*]] = load i16, i16* [[D]], align 2
// CHK-C-NEXT:    [[TMP83:%.*]] = load i16, i16* [[E]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD107:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD107]], i16* [[ATMP108]], align 2
// CHK-C-NEXT:    [[CMP109:%.*]] = icmp eq i16 [[ATOMIC_LOAD107]], [[TMP83]]
// CHK-C-NEXT:    [[FROMBOOL111:%.*]] = zext i1 [[CMP109]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL111]], i8* [[ATMP110]], align 1
// CHK-C-NEXT:    br i1 [[CMP109]], label [[ATOMIC_CONT112:%.*]], label [[ATOMIC_EXIT118:%.*]]
// CHK-C:       atomic_cont112:
// CHK-C-NEXT:    [[TMP84:%.*]] = phi i16 [ [[ATOMIC_LOAD107]], [[ATOMIC_EXIT106]] ], [ [[TMP87:%.*]], [[ATOMIC_CMP115:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP84]], i16* [[ATMP108]], align 2
// CHK-C-NEXT:    store i16 [[TMP82]], i16* [[ATOMIC_TEMP113]], align 2
// CHK-C-NEXT:    [[TMP85:%.*]] = load i16, i16* [[ATOMIC_TEMP113]], align 2
// CHK-C-NEXT:    [[TMP86:%.*]] = cmpxchg i16* [[X]], i16 [[TMP84]], i16 [[TMP85]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP87]] = extractvalue { i16, i1 } [[TMP86]], 0
// CHK-C-NEXT:    [[TMP88:%.*]] = extractvalue { i16, i1 } [[TMP86]], 1
// CHK-C-NEXT:    br i1 [[TMP88]], label [[ATOMIC_UPD_EXIT114:%.*]], label [[ATOMIC_CMP115]]
// CHK-C:       atomic_upd_exit114:
// CHK-C-NEXT:    store i16 [[TMP82]], i16* [[ATMP108]], align 2
// CHK-C-NEXT:    br label [[ATOMIC_EXIT118]]
// CHK-C:       atomic_cmp115:
// CHK-C-NEXT:    [[CMP116:%.*]] = icmp eq i16 [[TMP87]], [[TMP83]]
// CHK-C-NEXT:    [[FROMBOOL117:%.*]] = zext i1 [[CMP116]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL117]], i8* [[ATMP110]], align 1
// CHK-C-NEXT:    br i1 [[CMP116]], label [[ATOMIC_CONT112]], label [[ATOMIC_EXIT118]]
// CHK-C:       atomic_exit118:
// CHK-C-NEXT:    [[TMP89:%.*]] = load i16, i16* [[ATMP108]], align 2
// CHK-C-NEXT:    [[TMP90:%.*]] = load i8, i8* [[ATMP110]], align 1
// CHK-C-NEXT:    [[TMP91:%.*]] = trunc i8 [[TMP90]] to i1
// CHK-C-NEXT:    br i1 [[TMP91]], label [[ATOMIC_CAPTURE_CONT:%.*]], label [[ATOMIC_CAPTURE:%.*]]
// CHK-C:       atomic_capture:
// CHK-C-NEXT:    store i16 [[TMP89]], i16* [[V]], align 2
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT]]
// CHK-C:       atomic_capture_cont:
// CHK-C-NEXT:    [[TMP92:%.*]] = load i16, i16* [[D]], align 2
// CHK-C-NEXT:    [[TMP93:%.*]] = load i16, i16* [[E]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD119:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD119]], i16* [[ATMP120]], align 2
// CHK-C-NEXT:    [[CMP121:%.*]] = icmp eq i16 [[ATOMIC_LOAD119]], [[TMP93]]
// CHK-C-NEXT:    [[FROMBOOL123:%.*]] = zext i1 [[CMP121]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL123]], i8* [[ATMP122]], align 1
// CHK-C-NEXT:    br i1 [[CMP121]], label [[ATOMIC_CONT124:%.*]], label [[ATOMIC_EXIT129:%.*]]
// CHK-C:       atomic_cont124:
// CHK-C-NEXT:    [[TMP94:%.*]] = phi i16 [ [[ATOMIC_LOAD119]], [[ATOMIC_CAPTURE_CONT]] ], [ [[TMP97:%.*]], [[ATOMIC_CMP126:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP94]], i16* [[ATMP120]], align 2
// CHK-C-NEXT:    store i16 [[TMP92]], i16* [[ATOMIC_TEMP125]], align 2
// CHK-C-NEXT:    [[TMP95:%.*]] = load i16, i16* [[ATOMIC_TEMP125]], align 2
// CHK-C-NEXT:    [[TMP96:%.*]] = cmpxchg i16* [[X]], i16 [[TMP94]], i16 [[TMP95]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP97]] = extractvalue { i16, i1 } [[TMP96]], 0
// CHK-C-NEXT:    [[TMP98:%.*]] = extractvalue { i16, i1 } [[TMP96]], 1
// CHK-C-NEXT:    br i1 [[TMP98]], label [[ATOMIC_EXIT129]], label [[ATOMIC_CMP126]]
// CHK-C:       atomic_cmp126:
// CHK-C-NEXT:    [[CMP127:%.*]] = icmp eq i16 [[TMP97]], [[TMP93]]
// CHK-C-NEXT:    [[FROMBOOL128:%.*]] = zext i1 [[CMP127]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL128]], i8* [[ATMP122]], align 1
// CHK-C-NEXT:    br i1 [[CMP127]], label [[ATOMIC_CONT124]], label [[ATOMIC_EXIT129]]
// CHK-C:       atomic_exit129:
// CHK-C-NEXT:    [[TMP99:%.*]] = load i16, i16* [[ATMP120]], align 2
// CHK-C-NEXT:    [[TMP100:%.*]] = load i8, i8* [[ATMP122]], align 1
// CHK-C-NEXT:    [[CONV:%.*]] = zext i8 [[TMP100]] to i32
// CHK-C-NEXT:    store i32 [[CONV]], i32* [[R]], align 4
// CHK-C-NEXT:    [[TMP101:%.*]] = load i16, i16* [[D]], align 2
// CHK-C-NEXT:    [[TMP102:%.*]] = load i16, i16* [[E]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD130:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD130]], i16* [[ATMP131]], align 2
// CHK-C-NEXT:    [[CMP132:%.*]] = icmp eq i16 [[ATOMIC_LOAD130]], [[TMP102]]
// CHK-C-NEXT:    [[FROMBOOL134:%.*]] = zext i1 [[CMP132]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL134]], i8* [[ATMP133]], align 1
// CHK-C-NEXT:    br i1 [[CMP132]], label [[ATOMIC_CONT135:%.*]], label [[ATOMIC_EXIT140:%.*]]
// CHK-C:       atomic_cont135:
// CHK-C-NEXT:    [[TMP103:%.*]] = phi i16 [ [[ATOMIC_LOAD130]], [[ATOMIC_EXIT129]] ], [ [[TMP106:%.*]], [[ATOMIC_CMP137:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP103]], i16* [[ATMP131]], align 2
// CHK-C-NEXT:    store i16 [[TMP101]], i16* [[ATOMIC_TEMP136]], align 2
// CHK-C-NEXT:    [[TMP104:%.*]] = load i16, i16* [[ATOMIC_TEMP136]], align 2
// CHK-C-NEXT:    [[TMP105:%.*]] = cmpxchg i16* [[X]], i16 [[TMP103]], i16 [[TMP104]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP106]] = extractvalue { i16, i1 } [[TMP105]], 0
// CHK-C-NEXT:    [[TMP107:%.*]] = extractvalue { i16, i1 } [[TMP105]], 1
// CHK-C-NEXT:    br i1 [[TMP107]], label [[ATOMIC_EXIT140]], label [[ATOMIC_CMP137]]
// CHK-C:       atomic_cmp137:
// CHK-C-NEXT:    [[CMP138:%.*]] = icmp eq i16 [[TMP106]], [[TMP102]]
// CHK-C-NEXT:    [[FROMBOOL139:%.*]] = zext i1 [[CMP138]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL139]], i8* [[ATMP133]], align 1
// CHK-C-NEXT:    br i1 [[CMP138]], label [[ATOMIC_CONT135]], label [[ATOMIC_EXIT140]]
// CHK-C:       atomic_exit140:
// CHK-C-NEXT:    [[TMP108:%.*]] = load i16, i16* [[ATMP131]], align 2
// CHK-C-NEXT:    [[TMP109:%.*]] = load i8, i8* [[ATMP133]], align 1
// CHK-C-NEXT:    [[CONV141:%.*]] = zext i8 [[TMP109]] to i32
// CHK-C-NEXT:    store i32 [[CONV141]], i32* [[R]], align 4
// CHK-C-NEXT:    [[TMP110:%.*]] = trunc i8 [[TMP109]] to i1
// CHK-C-NEXT:    br i1 [[TMP110]], label [[ATOMIC_CAPTURE_CONT143:%.*]], label [[ATOMIC_CAPTURE142:%.*]]
// CHK-C:       atomic_capture142:
// CHK-C-NEXT:    store i16 [[TMP108]], i16* [[V]], align 2
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT143]]
// CHK-C:       atomic_capture_cont143:
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z19test_unsigned_shortv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[X:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[V:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[R:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP5:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP7:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP10:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP16:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP18:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP21:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP27:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP29:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP32:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP39:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP41:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP44:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP50:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP52:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP55:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP62:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP64:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP67:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP73:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP75:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP78:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP85:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP87:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP90:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP96:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP98:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP101:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP108:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP110:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP113:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP120:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP122:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP125:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP131:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP133:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP136:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD]], i16* [[TMP]], align 2
// CHK-CXX-NEXT:    [[CMP:%.*]] = icmp ugt i16 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-CXX-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL]], i8* [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP1:%.*]] = phi i16 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP1]], i16* [[TMP]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP0]], i16* [[ATOMIC_TEMP]], align 2
// CHK-CXX-NEXT:    [[TMP2:%.*]] = load i16, i16* [[ATOMIC_TEMP]], align 2
// CHK-CXX-NEXT:    [[TMP3:%.*]] = cmpxchg i16* [[X]], i16 [[TMP1]], i16 [[TMP2]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP4]] = extractvalue { i16, i1 } [[TMP3]], 0
// CHK-CXX-NEXT:    [[TMP5:%.*]] = extractvalue { i16, i1 } [[TMP3]], 1
// CHK-CXX-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    [[CMP2:%.*]] = icmp ugt i16 [[TMP4]], [[TMP0]]
// CHK-CXX-NEXT:    [[FROMBOOL3:%.*]] = zext i1 [[CMP2]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL3]], i8* [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP2]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP6:%.*]] = load i16, i16* [[TMP]], align 2
// CHK-CXX-NEXT:    [[TMP7:%.*]] = load i8, i8* [[ATMP1]], align 1
// CHK-CXX-NEXT:    store i16 [[TMP6]], i16* [[V]], align 2
// CHK-CXX-NEXT:    [[TMP8:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD4:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD4]], i16* [[ATMP5]], align 2
// CHK-CXX-NEXT:    [[CMP6:%.*]] = icmp ugt i16 [[ATOMIC_LOAD4]], [[TMP8]]
// CHK-CXX-NEXT:    [[FROMBOOL8:%.*]] = zext i1 [[CMP6]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL8]], i8* [[ATMP7]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP6]], label [[ATOMIC_CONT9:%.*]], label [[ATOMIC_EXIT14:%.*]]
// CHK-CXX:       atomic_cont9:
// CHK-CXX-NEXT:    [[TMP9:%.*]] = phi i16 [ [[ATOMIC_LOAD4]], [[ATOMIC_EXIT]] ], [ [[TMP12:%.*]], [[ATOMIC_CMP11:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP9]], i16* [[ATMP5]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP8]], i16* [[ATOMIC_TEMP10]], align 2
// CHK-CXX-NEXT:    [[TMP10:%.*]] = load i16, i16* [[ATOMIC_TEMP10]], align 2
// CHK-CXX-NEXT:    [[TMP11:%.*]] = cmpxchg i16* [[X]], i16 [[TMP9]], i16 [[TMP10]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP12]] = extractvalue { i16, i1 } [[TMP11]], 0
// CHK-CXX-NEXT:    [[TMP13:%.*]] = extractvalue { i16, i1 } [[TMP11]], 1
// CHK-CXX-NEXT:    br i1 [[TMP13]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP11]]
// CHK-CXX:       atomic_upd_exit:
// CHK-CXX-NEXT:    store i16 [[TMP8]], i16* [[ATMP5]], align 2
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT14]]
// CHK-CXX:       atomic_cmp11:
// CHK-CXX-NEXT:    [[CMP12:%.*]] = icmp ugt i16 [[TMP12]], [[TMP8]]
// CHK-CXX-NEXT:    [[FROMBOOL13:%.*]] = zext i1 [[CMP12]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL13]], i8* [[ATMP7]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT9]], label [[ATOMIC_EXIT14]]
// CHK-CXX:       atomic_exit14:
// CHK-CXX-NEXT:    [[TMP14:%.*]] = load i16, i16* [[ATMP5]], align 2
// CHK-CXX-NEXT:    [[TMP15:%.*]] = load i8, i8* [[ATMP7]], align 1
// CHK-CXX-NEXT:    store i16 [[TMP14]], i16* [[V]], align 2
// CHK-CXX-NEXT:    [[TMP16:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD15:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD15]], i16* [[ATMP16]], align 2
// CHK-CXX-NEXT:    [[CMP17:%.*]] = icmp ult i16 [[ATOMIC_LOAD15]], [[TMP16]]
// CHK-CXX-NEXT:    [[FROMBOOL19:%.*]] = zext i1 [[CMP17]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL19]], i8* [[ATMP18]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP17]], label [[ATOMIC_CONT20:%.*]], label [[ATOMIC_EXIT25:%.*]]
// CHK-CXX:       atomic_cont20:
// CHK-CXX-NEXT:    [[TMP17:%.*]] = phi i16 [ [[ATOMIC_LOAD15]], [[ATOMIC_EXIT14]] ], [ [[TMP20:%.*]], [[ATOMIC_CMP22:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP17]], i16* [[ATMP16]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP16]], i16* [[ATOMIC_TEMP21]], align 2
// CHK-CXX-NEXT:    [[TMP18:%.*]] = load i16, i16* [[ATOMIC_TEMP21]], align 2
// CHK-CXX-NEXT:    [[TMP19:%.*]] = cmpxchg i16* [[X]], i16 [[TMP17]], i16 [[TMP18]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP20]] = extractvalue { i16, i1 } [[TMP19]], 0
// CHK-CXX-NEXT:    [[TMP21:%.*]] = extractvalue { i16, i1 } [[TMP19]], 1
// CHK-CXX-NEXT:    br i1 [[TMP21]], label [[ATOMIC_EXIT25]], label [[ATOMIC_CMP22]]
// CHK-CXX:       atomic_cmp22:
// CHK-CXX-NEXT:    [[CMP23:%.*]] = icmp ult i16 [[TMP20]], [[TMP16]]
// CHK-CXX-NEXT:    [[FROMBOOL24:%.*]] = zext i1 [[CMP23]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL24]], i8* [[ATMP18]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP23]], label [[ATOMIC_CONT20]], label [[ATOMIC_EXIT25]]
// CHK-CXX:       atomic_exit25:
// CHK-CXX-NEXT:    [[TMP22:%.*]] = load i16, i16* [[ATMP16]], align 2
// CHK-CXX-NEXT:    [[TMP23:%.*]] = load i8, i8* [[ATMP18]], align 1
// CHK-CXX-NEXT:    store i16 [[TMP22]], i16* [[V]], align 2
// CHK-CXX-NEXT:    [[TMP24:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD26:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD26]], i16* [[ATMP27]], align 2
// CHK-CXX-NEXT:    [[CMP28:%.*]] = icmp ult i16 [[ATOMIC_LOAD26]], [[TMP24]]
// CHK-CXX-NEXT:    [[FROMBOOL30:%.*]] = zext i1 [[CMP28]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL30]], i8* [[ATMP29]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP28]], label [[ATOMIC_CONT31:%.*]], label [[ATOMIC_EXIT37:%.*]]
// CHK-CXX:       atomic_cont31:
// CHK-CXX-NEXT:    [[TMP25:%.*]] = phi i16 [ [[ATOMIC_LOAD26]], [[ATOMIC_EXIT25]] ], [ [[TMP28:%.*]], [[ATOMIC_CMP34:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP25]], i16* [[ATMP27]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP24]], i16* [[ATOMIC_TEMP32]], align 2
// CHK-CXX-NEXT:    [[TMP26:%.*]] = load i16, i16* [[ATOMIC_TEMP32]], align 2
// CHK-CXX-NEXT:    [[TMP27:%.*]] = cmpxchg i16* [[X]], i16 [[TMP25]], i16 [[TMP26]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP28]] = extractvalue { i16, i1 } [[TMP27]], 0
// CHK-CXX-NEXT:    [[TMP29:%.*]] = extractvalue { i16, i1 } [[TMP27]], 1
// CHK-CXX-NEXT:    br i1 [[TMP29]], label [[ATOMIC_UPD_EXIT33:%.*]], label [[ATOMIC_CMP34]]
// CHK-CXX:       atomic_upd_exit33:
// CHK-CXX-NEXT:    store i16 [[TMP24]], i16* [[ATMP27]], align 2
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT37]]
// CHK-CXX:       atomic_cmp34:
// CHK-CXX-NEXT:    [[CMP35:%.*]] = icmp ult i16 [[TMP28]], [[TMP24]]
// CHK-CXX-NEXT:    [[FROMBOOL36:%.*]] = zext i1 [[CMP35]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL36]], i8* [[ATMP29]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP35]], label [[ATOMIC_CONT31]], label [[ATOMIC_EXIT37]]
// CHK-CXX:       atomic_exit37:
// CHK-CXX-NEXT:    [[TMP30:%.*]] = load i16, i16* [[ATMP27]], align 2
// CHK-CXX-NEXT:    [[TMP31:%.*]] = load i8, i8* [[ATMP29]], align 1
// CHK-CXX-NEXT:    store i16 [[TMP30]], i16* [[V]], align 2
// CHK-CXX-NEXT:    [[TMP32:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD38:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD38]], i16* [[ATMP39]], align 2
// CHK-CXX-NEXT:    [[CMP40:%.*]] = icmp ult i16 [[ATOMIC_LOAD38]], [[TMP32]]
// CHK-CXX-NEXT:    [[FROMBOOL42:%.*]] = zext i1 [[CMP40]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL42]], i8* [[ATMP41]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP40]], label [[ATOMIC_CONT43:%.*]], label [[ATOMIC_EXIT48:%.*]]
// CHK-CXX:       atomic_cont43:
// CHK-CXX-NEXT:    [[TMP33:%.*]] = phi i16 [ [[ATOMIC_LOAD38]], [[ATOMIC_EXIT37]] ], [ [[TMP36:%.*]], [[ATOMIC_CMP45:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP33]], i16* [[ATMP39]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP32]], i16* [[ATOMIC_TEMP44]], align 2
// CHK-CXX-NEXT:    [[TMP34:%.*]] = load i16, i16* [[ATOMIC_TEMP44]], align 2
// CHK-CXX-NEXT:    [[TMP35:%.*]] = cmpxchg i16* [[X]], i16 [[TMP33]], i16 [[TMP34]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP36]] = extractvalue { i16, i1 } [[TMP35]], 0
// CHK-CXX-NEXT:    [[TMP37:%.*]] = extractvalue { i16, i1 } [[TMP35]], 1
// CHK-CXX-NEXT:    br i1 [[TMP37]], label [[ATOMIC_EXIT48]], label [[ATOMIC_CMP45]]
// CHK-CXX:       atomic_cmp45:
// CHK-CXX-NEXT:    [[CMP46:%.*]] = icmp ult i16 [[TMP36]], [[TMP32]]
// CHK-CXX-NEXT:    [[FROMBOOL47:%.*]] = zext i1 [[CMP46]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL47]], i8* [[ATMP41]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP46]], label [[ATOMIC_CONT43]], label [[ATOMIC_EXIT48]]
// CHK-CXX:       atomic_exit48:
// CHK-CXX-NEXT:    [[TMP38:%.*]] = load i16, i16* [[ATMP39]], align 2
// CHK-CXX-NEXT:    [[TMP39:%.*]] = load i8, i8* [[ATMP41]], align 1
// CHK-CXX-NEXT:    store i16 [[TMP38]], i16* [[V]], align 2
// CHK-CXX-NEXT:    [[TMP40:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD49:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD49]], i16* [[ATMP50]], align 2
// CHK-CXX-NEXT:    [[CMP51:%.*]] = icmp ult i16 [[ATOMIC_LOAD49]], [[TMP40]]
// CHK-CXX-NEXT:    [[FROMBOOL53:%.*]] = zext i1 [[CMP51]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL53]], i8* [[ATMP52]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP51]], label [[ATOMIC_CONT54:%.*]], label [[ATOMIC_EXIT60:%.*]]
// CHK-CXX:       atomic_cont54:
// CHK-CXX-NEXT:    [[TMP41:%.*]] = phi i16 [ [[ATOMIC_LOAD49]], [[ATOMIC_EXIT48]] ], [ [[TMP44:%.*]], [[ATOMIC_CMP57:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP41]], i16* [[ATMP50]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP40]], i16* [[ATOMIC_TEMP55]], align 2
// CHK-CXX-NEXT:    [[TMP42:%.*]] = load i16, i16* [[ATOMIC_TEMP55]], align 2
// CHK-CXX-NEXT:    [[TMP43:%.*]] = cmpxchg i16* [[X]], i16 [[TMP41]], i16 [[TMP42]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP44]] = extractvalue { i16, i1 } [[TMP43]], 0
// CHK-CXX-NEXT:    [[TMP45:%.*]] = extractvalue { i16, i1 } [[TMP43]], 1
// CHK-CXX-NEXT:    br i1 [[TMP45]], label [[ATOMIC_UPD_EXIT56:%.*]], label [[ATOMIC_CMP57]]
// CHK-CXX:       atomic_upd_exit56:
// CHK-CXX-NEXT:    store i16 [[TMP40]], i16* [[ATMP50]], align 2
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT60]]
// CHK-CXX:       atomic_cmp57:
// CHK-CXX-NEXT:    [[CMP58:%.*]] = icmp ult i16 [[TMP44]], [[TMP40]]
// CHK-CXX-NEXT:    [[FROMBOOL59:%.*]] = zext i1 [[CMP58]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL59]], i8* [[ATMP52]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP58]], label [[ATOMIC_CONT54]], label [[ATOMIC_EXIT60]]
// CHK-CXX:       atomic_exit60:
// CHK-CXX-NEXT:    [[TMP46:%.*]] = load i16, i16* [[ATMP50]], align 2
// CHK-CXX-NEXT:    [[TMP47:%.*]] = load i8, i8* [[ATMP52]], align 1
// CHK-CXX-NEXT:    store i16 [[TMP46]], i16* [[V]], align 2
// CHK-CXX-NEXT:    [[TMP48:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD61:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD61]], i16* [[ATMP62]], align 2
// CHK-CXX-NEXT:    [[CMP63:%.*]] = icmp ugt i16 [[ATOMIC_LOAD61]], [[TMP48]]
// CHK-CXX-NEXT:    [[FROMBOOL65:%.*]] = zext i1 [[CMP63]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL65]], i8* [[ATMP64]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP63]], label [[ATOMIC_CONT66:%.*]], label [[ATOMIC_EXIT71:%.*]]
// CHK-CXX:       atomic_cont66:
// CHK-CXX-NEXT:    [[TMP49:%.*]] = phi i16 [ [[ATOMIC_LOAD61]], [[ATOMIC_EXIT60]] ], [ [[TMP52:%.*]], [[ATOMIC_CMP68:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP49]], i16* [[ATMP62]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP48]], i16* [[ATOMIC_TEMP67]], align 2
// CHK-CXX-NEXT:    [[TMP50:%.*]] = load i16, i16* [[ATOMIC_TEMP67]], align 2
// CHK-CXX-NEXT:    [[TMP51:%.*]] = cmpxchg i16* [[X]], i16 [[TMP49]], i16 [[TMP50]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP52]] = extractvalue { i16, i1 } [[TMP51]], 0
// CHK-CXX-NEXT:    [[TMP53:%.*]] = extractvalue { i16, i1 } [[TMP51]], 1
// CHK-CXX-NEXT:    br i1 [[TMP53]], label [[ATOMIC_EXIT71]], label [[ATOMIC_CMP68]]
// CHK-CXX:       atomic_cmp68:
// CHK-CXX-NEXT:    [[CMP69:%.*]] = icmp ugt i16 [[TMP52]], [[TMP48]]
// CHK-CXX-NEXT:    [[FROMBOOL70:%.*]] = zext i1 [[CMP69]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL70]], i8* [[ATMP64]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP69]], label [[ATOMIC_CONT66]], label [[ATOMIC_EXIT71]]
// CHK-CXX:       atomic_exit71:
// CHK-CXX-NEXT:    [[TMP54:%.*]] = load i16, i16* [[ATMP62]], align 2
// CHK-CXX-NEXT:    [[TMP55:%.*]] = load i8, i8* [[ATMP64]], align 1
// CHK-CXX-NEXT:    store i16 [[TMP54]], i16* [[V]], align 2
// CHK-CXX-NEXT:    [[TMP56:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD72:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD72]], i16* [[ATMP73]], align 2
// CHK-CXX-NEXT:    [[CMP74:%.*]] = icmp ugt i16 [[ATOMIC_LOAD72]], [[TMP56]]
// CHK-CXX-NEXT:    [[FROMBOOL76:%.*]] = zext i1 [[CMP74]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL76]], i8* [[ATMP75]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP74]], label [[ATOMIC_CONT77:%.*]], label [[ATOMIC_EXIT83:%.*]]
// CHK-CXX:       atomic_cont77:
// CHK-CXX-NEXT:    [[TMP57:%.*]] = phi i16 [ [[ATOMIC_LOAD72]], [[ATOMIC_EXIT71]] ], [ [[TMP60:%.*]], [[ATOMIC_CMP80:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP57]], i16* [[ATMP73]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP56]], i16* [[ATOMIC_TEMP78]], align 2
// CHK-CXX-NEXT:    [[TMP58:%.*]] = load i16, i16* [[ATOMIC_TEMP78]], align 2
// CHK-CXX-NEXT:    [[TMP59:%.*]] = cmpxchg i16* [[X]], i16 [[TMP57]], i16 [[TMP58]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP60]] = extractvalue { i16, i1 } [[TMP59]], 0
// CHK-CXX-NEXT:    [[TMP61:%.*]] = extractvalue { i16, i1 } [[TMP59]], 1
// CHK-CXX-NEXT:    br i1 [[TMP61]], label [[ATOMIC_UPD_EXIT79:%.*]], label [[ATOMIC_CMP80]]
// CHK-CXX:       atomic_upd_exit79:
// CHK-CXX-NEXT:    store i16 [[TMP56]], i16* [[ATMP73]], align 2
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT83]]
// CHK-CXX:       atomic_cmp80:
// CHK-CXX-NEXT:    [[CMP81:%.*]] = icmp ugt i16 [[TMP60]], [[TMP56]]
// CHK-CXX-NEXT:    [[FROMBOOL82:%.*]] = zext i1 [[CMP81]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL82]], i8* [[ATMP75]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP81]], label [[ATOMIC_CONT77]], label [[ATOMIC_EXIT83]]
// CHK-CXX:       atomic_exit83:
// CHK-CXX-NEXT:    [[TMP62:%.*]] = load i16, i16* [[ATMP73]], align 2
// CHK-CXX-NEXT:    [[TMP63:%.*]] = load i8, i8* [[ATMP75]], align 1
// CHK-CXX-NEXT:    store i16 [[TMP62]], i16* [[V]], align 2
// CHK-CXX-NEXT:    [[TMP64:%.*]] = load i16, i16* [[D]], align 2
// CHK-CXX-NEXT:    [[TMP65:%.*]] = load i16, i16* [[E]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD84:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD84]], i16* [[ATMP85]], align 2
// CHK-CXX-NEXT:    [[CMP86:%.*]] = icmp eq i16 [[ATOMIC_LOAD84]], [[TMP65]]
// CHK-CXX-NEXT:    [[FROMBOOL88:%.*]] = zext i1 [[CMP86]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL88]], i8* [[ATMP87]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP86]], label [[ATOMIC_CONT89:%.*]], label [[ATOMIC_EXIT94:%.*]]
// CHK-CXX:       atomic_cont89:
// CHK-CXX-NEXT:    [[TMP66:%.*]] = phi i16 [ [[ATOMIC_LOAD84]], [[ATOMIC_EXIT83]] ], [ [[TMP69:%.*]], [[ATOMIC_CMP91:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP66]], i16* [[ATMP85]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP64]], i16* [[ATOMIC_TEMP90]], align 2
// CHK-CXX-NEXT:    [[TMP67:%.*]] = load i16, i16* [[ATOMIC_TEMP90]], align 2
// CHK-CXX-NEXT:    [[TMP68:%.*]] = cmpxchg i16* [[X]], i16 [[TMP66]], i16 [[TMP67]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP69]] = extractvalue { i16, i1 } [[TMP68]], 0
// CHK-CXX-NEXT:    [[TMP70:%.*]] = extractvalue { i16, i1 } [[TMP68]], 1
// CHK-CXX-NEXT:    br i1 [[TMP70]], label [[ATOMIC_EXIT94]], label [[ATOMIC_CMP91]]
// CHK-CXX:       atomic_cmp91:
// CHK-CXX-NEXT:    [[CMP92:%.*]] = icmp eq i16 [[TMP69]], [[TMP65]]
// CHK-CXX-NEXT:    [[FROMBOOL93:%.*]] = zext i1 [[CMP92]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL93]], i8* [[ATMP87]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP92]], label [[ATOMIC_CONT89]], label [[ATOMIC_EXIT94]]
// CHK-CXX:       atomic_exit94:
// CHK-CXX-NEXT:    [[TMP71:%.*]] = load i16, i16* [[ATMP85]], align 2
// CHK-CXX-NEXT:    [[TMP72:%.*]] = load i8, i8* [[ATMP87]], align 1
// CHK-CXX-NEXT:    store i16 [[TMP71]], i16* [[V]], align 2
// CHK-CXX-NEXT:    [[TMP73:%.*]] = load i16, i16* [[D]], align 2
// CHK-CXX-NEXT:    [[TMP74:%.*]] = load i16, i16* [[E]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD95:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD95]], i16* [[ATMP96]], align 2
// CHK-CXX-NEXT:    [[CMP97:%.*]] = icmp eq i16 [[ATOMIC_LOAD95]], [[TMP74]]
// CHK-CXX-NEXT:    [[FROMBOOL99:%.*]] = zext i1 [[CMP97]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL99]], i8* [[ATMP98]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP97]], label [[ATOMIC_CONT100:%.*]], label [[ATOMIC_EXIT106:%.*]]
// CHK-CXX:       atomic_cont100:
// CHK-CXX-NEXT:    [[TMP75:%.*]] = phi i16 [ [[ATOMIC_LOAD95]], [[ATOMIC_EXIT94]] ], [ [[TMP78:%.*]], [[ATOMIC_CMP103:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP75]], i16* [[ATMP96]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP73]], i16* [[ATOMIC_TEMP101]], align 2
// CHK-CXX-NEXT:    [[TMP76:%.*]] = load i16, i16* [[ATOMIC_TEMP101]], align 2
// CHK-CXX-NEXT:    [[TMP77:%.*]] = cmpxchg i16* [[X]], i16 [[TMP75]], i16 [[TMP76]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP78]] = extractvalue { i16, i1 } [[TMP77]], 0
// CHK-CXX-NEXT:    [[TMP79:%.*]] = extractvalue { i16, i1 } [[TMP77]], 1
// CHK-CXX-NEXT:    br i1 [[TMP79]], label [[ATOMIC_UPD_EXIT102:%.*]], label [[ATOMIC_CMP103]]
// CHK-CXX:       atomic_upd_exit102:
// CHK-CXX-NEXT:    store i16 [[TMP73]], i16* [[ATMP96]], align 2
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT106]]
// CHK-CXX:       atomic_cmp103:
// CHK-CXX-NEXT:    [[CMP104:%.*]] = icmp eq i16 [[TMP78]], [[TMP74]]
// CHK-CXX-NEXT:    [[FROMBOOL105:%.*]] = zext i1 [[CMP104]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL105]], i8* [[ATMP98]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP104]], label [[ATOMIC_CONT100]], label [[ATOMIC_EXIT106]]
// CHK-CXX:       atomic_exit106:
// CHK-CXX-NEXT:    [[TMP80:%.*]] = load i16, i16* [[ATMP96]], align 2
// CHK-CXX-NEXT:    [[TMP81:%.*]] = load i8, i8* [[ATMP98]], align 1
// CHK-CXX-NEXT:    store i16 [[TMP80]], i16* [[V]], align 2
// CHK-CXX-NEXT:    [[TMP82:%.*]] = load i16, i16* [[D]], align 2
// CHK-CXX-NEXT:    [[TMP83:%.*]] = load i16, i16* [[E]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD107:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD107]], i16* [[ATMP108]], align 2
// CHK-CXX-NEXT:    [[CMP109:%.*]] = icmp eq i16 [[ATOMIC_LOAD107]], [[TMP83]]
// CHK-CXX-NEXT:    [[FROMBOOL111:%.*]] = zext i1 [[CMP109]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL111]], i8* [[ATMP110]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP109]], label [[ATOMIC_CONT112:%.*]], label [[ATOMIC_EXIT118:%.*]]
// CHK-CXX:       atomic_cont112:
// CHK-CXX-NEXT:    [[TMP84:%.*]] = phi i16 [ [[ATOMIC_LOAD107]], [[ATOMIC_EXIT106]] ], [ [[TMP87:%.*]], [[ATOMIC_CMP115:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP84]], i16* [[ATMP108]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP82]], i16* [[ATOMIC_TEMP113]], align 2
// CHK-CXX-NEXT:    [[TMP85:%.*]] = load i16, i16* [[ATOMIC_TEMP113]], align 2
// CHK-CXX-NEXT:    [[TMP86:%.*]] = cmpxchg i16* [[X]], i16 [[TMP84]], i16 [[TMP85]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP87]] = extractvalue { i16, i1 } [[TMP86]], 0
// CHK-CXX-NEXT:    [[TMP88:%.*]] = extractvalue { i16, i1 } [[TMP86]], 1
// CHK-CXX-NEXT:    br i1 [[TMP88]], label [[ATOMIC_UPD_EXIT114:%.*]], label [[ATOMIC_CMP115]]
// CHK-CXX:       atomic_upd_exit114:
// CHK-CXX-NEXT:    store i16 [[TMP82]], i16* [[ATMP108]], align 2
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT118]]
// CHK-CXX:       atomic_cmp115:
// CHK-CXX-NEXT:    [[CMP116:%.*]] = icmp eq i16 [[TMP87]], [[TMP83]]
// CHK-CXX-NEXT:    [[FROMBOOL117:%.*]] = zext i1 [[CMP116]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL117]], i8* [[ATMP110]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP116]], label [[ATOMIC_CONT112]], label [[ATOMIC_EXIT118]]
// CHK-CXX:       atomic_exit118:
// CHK-CXX-NEXT:    [[TMP89:%.*]] = load i16, i16* [[ATMP108]], align 2
// CHK-CXX-NEXT:    [[TMP90:%.*]] = load i8, i8* [[ATMP110]], align 1
// CHK-CXX-NEXT:    [[TMP91:%.*]] = trunc i8 [[TMP90]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP91]], label [[ATOMIC_CAPTURE_CONT:%.*]], label [[ATOMIC_CAPTURE:%.*]]
// CHK-CXX:       atomic_capture:
// CHK-CXX-NEXT:    store i16 [[TMP89]], i16* [[V]], align 2
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT]]
// CHK-CXX:       atomic_capture_cont:
// CHK-CXX-NEXT:    [[TMP92:%.*]] = load i16, i16* [[D]], align 2
// CHK-CXX-NEXT:    [[TMP93:%.*]] = load i16, i16* [[E]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD119:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD119]], i16* [[ATMP120]], align 2
// CHK-CXX-NEXT:    [[CMP121:%.*]] = icmp eq i16 [[ATOMIC_LOAD119]], [[TMP93]]
// CHK-CXX-NEXT:    [[FROMBOOL123:%.*]] = zext i1 [[CMP121]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL123]], i8* [[ATMP122]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP121]], label [[ATOMIC_CONT124:%.*]], label [[ATOMIC_EXIT129:%.*]]
// CHK-CXX:       atomic_cont124:
// CHK-CXX-NEXT:    [[TMP94:%.*]] = phi i16 [ [[ATOMIC_LOAD119]], [[ATOMIC_CAPTURE_CONT]] ], [ [[TMP97:%.*]], [[ATOMIC_CMP126:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP94]], i16* [[ATMP120]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP92]], i16* [[ATOMIC_TEMP125]], align 2
// CHK-CXX-NEXT:    [[TMP95:%.*]] = load i16, i16* [[ATOMIC_TEMP125]], align 2
// CHK-CXX-NEXT:    [[TMP96:%.*]] = cmpxchg i16* [[X]], i16 [[TMP94]], i16 [[TMP95]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP97]] = extractvalue { i16, i1 } [[TMP96]], 0
// CHK-CXX-NEXT:    [[TMP98:%.*]] = extractvalue { i16, i1 } [[TMP96]], 1
// CHK-CXX-NEXT:    br i1 [[TMP98]], label [[ATOMIC_EXIT129]], label [[ATOMIC_CMP126]]
// CHK-CXX:       atomic_cmp126:
// CHK-CXX-NEXT:    [[CMP127:%.*]] = icmp eq i16 [[TMP97]], [[TMP93]]
// CHK-CXX-NEXT:    [[FROMBOOL128:%.*]] = zext i1 [[CMP127]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL128]], i8* [[ATMP122]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP127]], label [[ATOMIC_CONT124]], label [[ATOMIC_EXIT129]]
// CHK-CXX:       atomic_exit129:
// CHK-CXX-NEXT:    [[TMP99:%.*]] = load i16, i16* [[ATMP120]], align 2
// CHK-CXX-NEXT:    [[TMP100:%.*]] = load i8, i8* [[ATMP122]], align 1
// CHK-CXX-NEXT:    [[CONV:%.*]] = zext i8 [[TMP100]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV]], i32* [[R]], align 4
// CHK-CXX-NEXT:    [[TMP101:%.*]] = load i16, i16* [[D]], align 2
// CHK-CXX-NEXT:    [[TMP102:%.*]] = load i16, i16* [[E]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD130:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD130]], i16* [[ATMP131]], align 2
// CHK-CXX-NEXT:    [[CMP132:%.*]] = icmp eq i16 [[ATOMIC_LOAD130]], [[TMP102]]
// CHK-CXX-NEXT:    [[FROMBOOL134:%.*]] = zext i1 [[CMP132]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL134]], i8* [[ATMP133]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP132]], label [[ATOMIC_CONT135:%.*]], label [[ATOMIC_EXIT140:%.*]]
// CHK-CXX:       atomic_cont135:
// CHK-CXX-NEXT:    [[TMP103:%.*]] = phi i16 [ [[ATOMIC_LOAD130]], [[ATOMIC_EXIT129]] ], [ [[TMP106:%.*]], [[ATOMIC_CMP137:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP103]], i16* [[ATMP131]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP101]], i16* [[ATOMIC_TEMP136]], align 2
// CHK-CXX-NEXT:    [[TMP104:%.*]] = load i16, i16* [[ATOMIC_TEMP136]], align 2
// CHK-CXX-NEXT:    [[TMP105:%.*]] = cmpxchg i16* [[X]], i16 [[TMP103]], i16 [[TMP104]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP106]] = extractvalue { i16, i1 } [[TMP105]], 0
// CHK-CXX-NEXT:    [[TMP107:%.*]] = extractvalue { i16, i1 } [[TMP105]], 1
// CHK-CXX-NEXT:    br i1 [[TMP107]], label [[ATOMIC_EXIT140]], label [[ATOMIC_CMP137]]
// CHK-CXX:       atomic_cmp137:
// CHK-CXX-NEXT:    [[CMP138:%.*]] = icmp eq i16 [[TMP106]], [[TMP102]]
// CHK-CXX-NEXT:    [[FROMBOOL139:%.*]] = zext i1 [[CMP138]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL139]], i8* [[ATMP133]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP138]], label [[ATOMIC_CONT135]], label [[ATOMIC_EXIT140]]
// CHK-CXX:       atomic_exit140:
// CHK-CXX-NEXT:    [[TMP108:%.*]] = load i16, i16* [[ATMP131]], align 2
// CHK-CXX-NEXT:    [[TMP109:%.*]] = load i8, i8* [[ATMP133]], align 1
// CHK-CXX-NEXT:    [[CONV141:%.*]] = zext i8 [[TMP109]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV141]], i32* [[R]], align 4
// CHK-CXX-NEXT:    [[TMP110:%.*]] = trunc i8 [[TMP109]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP110]], label [[ATOMIC_CAPTURE_CONT143:%.*]], label [[ATOMIC_CAPTURE142:%.*]]
// CHK-CXX:       atomic_capture142:
// CHK-CXX-NEXT:    store i16 [[TMP108]], i16* [[V]], align 2
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT143]]
// CHK-CXX:       atomic_capture_cont143:
// CHK-CXX-NEXT:    ret void
//
void test_unsigned_short() {
    // One of each form with 'unsigned short'.
    unsigned short x, expr, d, e, v;
    int r;

    #pragma omp atomic compare capture
    { v = x; if (expr < x) { x = expr; } } // MIN

    #pragma omp atomic compare capture
    { if (expr < x) { x = expr; } v = x; } // MIN

    #pragma omp atomic compare capture
    { v = x; if (expr > x) { x = expr; } } // MAX

    #pragma omp atomic compare capture
    { if (expr > x) { x = expr; } v = x; } // MAX

    #pragma omp atomic compare capture
    { v = x; if (x < expr) { x = expr; } } // MAX

    #pragma omp atomic compare capture
    { if (x < expr) { x = expr; } v = x; } // MAX

    #pragma omp atomic compare capture
    { v = x; if (x > expr) { x = expr; } } // MIN

    #pragma omp atomic compare capture
    { if (x > expr) { x = expr; } v = x; } // MIN

    #pragma omp atomic compare capture
    { v = x; if (x == e) { x = d; } }

    #pragma omp atomic compare capture
    { if (x == e) { x = d; } v = x; }

    #pragma omp atomic compare capture
    if (x == e) { x = d; } else { v = x; }

    #pragma omp atomic compare capture
    { r = x == e; if(r) { x = d; } }

    #pragma omp atomic compare capture
    { r = x == e; if(r) { x = d; } else { v = x; } }
}

// CHK-C-LABEL: @test_double(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[X:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[D:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[E:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[V:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[R:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[TMP:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP5:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP7:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP10:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP16:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP18:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP21:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP27:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP29:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP32:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP39:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP41:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP44:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP50:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP52:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP55:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP62:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP64:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP67:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP73:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP75:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP78:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP85:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP87:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP90:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP96:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP98:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP101:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP108:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP110:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP113:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP120:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP122:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP125:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP131:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP133:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP136:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[TMP0:%.*]] = load double, double* [[EXPR]], align 8
// CHK-C-NEXT:    [[TMP1:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, i64* [[TMP1]] monotonic, align 8
// CHK-C-NEXT:    [[TMP2:%.*]] = bitcast i64 [[ATOMIC_LOAD]] to double
// CHK-C-NEXT:    store double [[TMP2]], double* [[TMP]], align 8
// CHK-C-NEXT:    [[CMP:%.*]] = fcmp ogt double [[TMP2]], [[TMP0]]
// CHK-C-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL]], i8* [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP3:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP10:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    [[TMP4:%.*]] = bitcast i64 [[TMP3]] to double
// CHK-C-NEXT:    store double [[TMP4]], double* [[TMP]], align 8
// CHK-C-NEXT:    [[TMP5:%.*]] = bitcast double* [[ATOMIC_TEMP]] to i64*
// CHK-C-NEXT:    [[TMP6:%.*]] = bitcast double [[TMP0]] to i64
// CHK-C-NEXT:    store i64 [[TMP6]], i64* [[TMP5]], align 8
// CHK-C-NEXT:    [[TMP7:%.*]] = load i64, i64* [[TMP5]], align 8
// CHK-C-NEXT:    [[TMP8:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP9:%.*]] = cmpxchg i64* [[TMP8]], i64 [[TMP3]], i64 [[TMP7]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP10]] = extractvalue { i64, i1 } [[TMP9]], 0
// CHK-C-NEXT:    [[TMP11:%.*]] = extractvalue { i64, i1 } [[TMP9]], 1
// CHK-C-NEXT:    br i1 [[TMP11]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    [[TMP12:%.*]] = bitcast i64 [[TMP10]] to double
// CHK-C-NEXT:    [[CMP2:%.*]] = fcmp ogt double [[TMP12]], [[TMP0]]
// CHK-C-NEXT:    [[FROMBOOL3:%.*]] = zext i1 [[CMP2]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL3]], i8* [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP2]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP13:%.*]] = load double, double* [[TMP]], align 8
// CHK-C-NEXT:    [[TMP14:%.*]] = load i8, i8* [[ATMP1]], align 1
// CHK-C-NEXT:    store double [[TMP13]], double* [[V]], align 8
// CHK-C-NEXT:    [[TMP15:%.*]] = load double, double* [[EXPR]], align 8
// CHK-C-NEXT:    [[TMP16:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD4:%.*]] = load atomic i64, i64* [[TMP16]] monotonic, align 8
// CHK-C-NEXT:    [[TMP17:%.*]] = bitcast i64 [[ATOMIC_LOAD4]] to double
// CHK-C-NEXT:    store double [[TMP17]], double* [[ATMP5]], align 8
// CHK-C-NEXT:    [[CMP6:%.*]] = fcmp ogt double [[TMP17]], [[TMP15]]
// CHK-C-NEXT:    [[FROMBOOL8:%.*]] = zext i1 [[CMP6]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL8]], i8* [[ATMP7]], align 1
// CHK-C-NEXT:    br i1 [[CMP6]], label [[ATOMIC_CONT9:%.*]], label [[ATOMIC_EXIT14:%.*]]
// CHK-C:       atomic_cont9:
// CHK-C-NEXT:    [[TMP18:%.*]] = phi i64 [ [[ATOMIC_LOAD4]], [[ATOMIC_EXIT]] ], [ [[TMP25:%.*]], [[ATOMIC_CMP11:%.*]] ]
// CHK-C-NEXT:    [[TMP19:%.*]] = bitcast i64 [[TMP18]] to double
// CHK-C-NEXT:    store double [[TMP19]], double* [[ATMP5]], align 8
// CHK-C-NEXT:    [[TMP20:%.*]] = bitcast double* [[ATOMIC_TEMP10]] to i64*
// CHK-C-NEXT:    [[TMP21:%.*]] = bitcast double [[TMP15]] to i64
// CHK-C-NEXT:    store i64 [[TMP21]], i64* [[TMP20]], align 8
// CHK-C-NEXT:    [[TMP22:%.*]] = load i64, i64* [[TMP20]], align 8
// CHK-C-NEXT:    [[TMP23:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP24:%.*]] = cmpxchg i64* [[TMP23]], i64 [[TMP18]], i64 [[TMP22]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP25]] = extractvalue { i64, i1 } [[TMP24]], 0
// CHK-C-NEXT:    [[TMP26:%.*]] = extractvalue { i64, i1 } [[TMP24]], 1
// CHK-C-NEXT:    br i1 [[TMP26]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP11]]
// CHK-C:       atomic_upd_exit:
// CHK-C-NEXT:    store double [[TMP15]], double* [[ATMP5]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_EXIT14]]
// CHK-C:       atomic_cmp11:
// CHK-C-NEXT:    [[TMP27:%.*]] = bitcast i64 [[TMP25]] to double
// CHK-C-NEXT:    [[CMP12:%.*]] = fcmp ogt double [[TMP27]], [[TMP15]]
// CHK-C-NEXT:    [[FROMBOOL13:%.*]] = zext i1 [[CMP12]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL13]], i8* [[ATMP7]], align 1
// CHK-C-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT9]], label [[ATOMIC_EXIT14]]
// CHK-C:       atomic_exit14:
// CHK-C-NEXT:    [[TMP28:%.*]] = load double, double* [[ATMP5]], align 8
// CHK-C-NEXT:    [[TMP29:%.*]] = load i8, i8* [[ATMP7]], align 1
// CHK-C-NEXT:    store double [[TMP28]], double* [[V]], align 8
// CHK-C-NEXT:    [[TMP30:%.*]] = load double, double* [[EXPR]], align 8
// CHK-C-NEXT:    [[TMP31:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD15:%.*]] = load atomic i64, i64* [[TMP31]] monotonic, align 8
// CHK-C-NEXT:    [[TMP32:%.*]] = bitcast i64 [[ATOMIC_LOAD15]] to double
// CHK-C-NEXT:    store double [[TMP32]], double* [[ATMP16]], align 8
// CHK-C-NEXT:    [[CMP17:%.*]] = fcmp olt double [[TMP32]], [[TMP30]]
// CHK-C-NEXT:    [[FROMBOOL19:%.*]] = zext i1 [[CMP17]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL19]], i8* [[ATMP18]], align 1
// CHK-C-NEXT:    br i1 [[CMP17]], label [[ATOMIC_CONT20:%.*]], label [[ATOMIC_EXIT25:%.*]]
// CHK-C:       atomic_cont20:
// CHK-C-NEXT:    [[TMP33:%.*]] = phi i64 [ [[ATOMIC_LOAD15]], [[ATOMIC_EXIT14]] ], [ [[TMP40:%.*]], [[ATOMIC_CMP22:%.*]] ]
// CHK-C-NEXT:    [[TMP34:%.*]] = bitcast i64 [[TMP33]] to double
// CHK-C-NEXT:    store double [[TMP34]], double* [[ATMP16]], align 8
// CHK-C-NEXT:    [[TMP35:%.*]] = bitcast double* [[ATOMIC_TEMP21]] to i64*
// CHK-C-NEXT:    [[TMP36:%.*]] = bitcast double [[TMP30]] to i64
// CHK-C-NEXT:    store i64 [[TMP36]], i64* [[TMP35]], align 8
// CHK-C-NEXT:    [[TMP37:%.*]] = load i64, i64* [[TMP35]], align 8
// CHK-C-NEXT:    [[TMP38:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP39:%.*]] = cmpxchg i64* [[TMP38]], i64 [[TMP33]], i64 [[TMP37]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP40]] = extractvalue { i64, i1 } [[TMP39]], 0
// CHK-C-NEXT:    [[TMP41:%.*]] = extractvalue { i64, i1 } [[TMP39]], 1
// CHK-C-NEXT:    br i1 [[TMP41]], label [[ATOMIC_EXIT25]], label [[ATOMIC_CMP22]]
// CHK-C:       atomic_cmp22:
// CHK-C-NEXT:    [[TMP42:%.*]] = bitcast i64 [[TMP40]] to double
// CHK-C-NEXT:    [[CMP23:%.*]] = fcmp olt double [[TMP42]], [[TMP30]]
// CHK-C-NEXT:    [[FROMBOOL24:%.*]] = zext i1 [[CMP23]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL24]], i8* [[ATMP18]], align 1
// CHK-C-NEXT:    br i1 [[CMP23]], label [[ATOMIC_CONT20]], label [[ATOMIC_EXIT25]]
// CHK-C:       atomic_exit25:
// CHK-C-NEXT:    [[TMP43:%.*]] = load double, double* [[ATMP16]], align 8
// CHK-C-NEXT:    [[TMP44:%.*]] = load i8, i8* [[ATMP18]], align 1
// CHK-C-NEXT:    store double [[TMP43]], double* [[V]], align 8
// CHK-C-NEXT:    [[TMP45:%.*]] = load double, double* [[EXPR]], align 8
// CHK-C-NEXT:    [[TMP46:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD26:%.*]] = load atomic i64, i64* [[TMP46]] monotonic, align 8
// CHK-C-NEXT:    [[TMP47:%.*]] = bitcast i64 [[ATOMIC_LOAD26]] to double
// CHK-C-NEXT:    store double [[TMP47]], double* [[ATMP27]], align 8
// CHK-C-NEXT:    [[CMP28:%.*]] = fcmp olt double [[TMP47]], [[TMP45]]
// CHK-C-NEXT:    [[FROMBOOL30:%.*]] = zext i1 [[CMP28]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL30]], i8* [[ATMP29]], align 1
// CHK-C-NEXT:    br i1 [[CMP28]], label [[ATOMIC_CONT31:%.*]], label [[ATOMIC_EXIT37:%.*]]
// CHK-C:       atomic_cont31:
// CHK-C-NEXT:    [[TMP48:%.*]] = phi i64 [ [[ATOMIC_LOAD26]], [[ATOMIC_EXIT25]] ], [ [[TMP55:%.*]], [[ATOMIC_CMP34:%.*]] ]
// CHK-C-NEXT:    [[TMP49:%.*]] = bitcast i64 [[TMP48]] to double
// CHK-C-NEXT:    store double [[TMP49]], double* [[ATMP27]], align 8
// CHK-C-NEXT:    [[TMP50:%.*]] = bitcast double* [[ATOMIC_TEMP32]] to i64*
// CHK-C-NEXT:    [[TMP51:%.*]] = bitcast double [[TMP45]] to i64
// CHK-C-NEXT:    store i64 [[TMP51]], i64* [[TMP50]], align 8
// CHK-C-NEXT:    [[TMP52:%.*]] = load i64, i64* [[TMP50]], align 8
// CHK-C-NEXT:    [[TMP53:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP54:%.*]] = cmpxchg i64* [[TMP53]], i64 [[TMP48]], i64 [[TMP52]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP55]] = extractvalue { i64, i1 } [[TMP54]], 0
// CHK-C-NEXT:    [[TMP56:%.*]] = extractvalue { i64, i1 } [[TMP54]], 1
// CHK-C-NEXT:    br i1 [[TMP56]], label [[ATOMIC_UPD_EXIT33:%.*]], label [[ATOMIC_CMP34]]
// CHK-C:       atomic_upd_exit33:
// CHK-C-NEXT:    store double [[TMP45]], double* [[ATMP27]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_EXIT37]]
// CHK-C:       atomic_cmp34:
// CHK-C-NEXT:    [[TMP57:%.*]] = bitcast i64 [[TMP55]] to double
// CHK-C-NEXT:    [[CMP35:%.*]] = fcmp olt double [[TMP57]], [[TMP45]]
// CHK-C-NEXT:    [[FROMBOOL36:%.*]] = zext i1 [[CMP35]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL36]], i8* [[ATMP29]], align 1
// CHK-C-NEXT:    br i1 [[CMP35]], label [[ATOMIC_CONT31]], label [[ATOMIC_EXIT37]]
// CHK-C:       atomic_exit37:
// CHK-C-NEXT:    [[TMP58:%.*]] = load double, double* [[ATMP27]], align 8
// CHK-C-NEXT:    [[TMP59:%.*]] = load i8, i8* [[ATMP29]], align 1
// CHK-C-NEXT:    store double [[TMP58]], double* [[V]], align 8
// CHK-C-NEXT:    [[TMP60:%.*]] = load double, double* [[EXPR]], align 8
// CHK-C-NEXT:    [[TMP61:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD38:%.*]] = load atomic i64, i64* [[TMP61]] monotonic, align 8
// CHK-C-NEXT:    [[TMP62:%.*]] = bitcast i64 [[ATOMIC_LOAD38]] to double
// CHK-C-NEXT:    store double [[TMP62]], double* [[ATMP39]], align 8
// CHK-C-NEXT:    [[CMP40:%.*]] = fcmp olt double [[TMP62]], [[TMP60]]
// CHK-C-NEXT:    [[FROMBOOL42:%.*]] = zext i1 [[CMP40]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL42]], i8* [[ATMP41]], align 1
// CHK-C-NEXT:    br i1 [[CMP40]], label [[ATOMIC_CONT43:%.*]], label [[ATOMIC_EXIT48:%.*]]
// CHK-C:       atomic_cont43:
// CHK-C-NEXT:    [[TMP63:%.*]] = phi i64 [ [[ATOMIC_LOAD38]], [[ATOMIC_EXIT37]] ], [ [[TMP70:%.*]], [[ATOMIC_CMP45:%.*]] ]
// CHK-C-NEXT:    [[TMP64:%.*]] = bitcast i64 [[TMP63]] to double
// CHK-C-NEXT:    store double [[TMP64]], double* [[ATMP39]], align 8
// CHK-C-NEXT:    [[TMP65:%.*]] = bitcast double* [[ATOMIC_TEMP44]] to i64*
// CHK-C-NEXT:    [[TMP66:%.*]] = bitcast double [[TMP60]] to i64
// CHK-C-NEXT:    store i64 [[TMP66]], i64* [[TMP65]], align 8
// CHK-C-NEXT:    [[TMP67:%.*]] = load i64, i64* [[TMP65]], align 8
// CHK-C-NEXT:    [[TMP68:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP69:%.*]] = cmpxchg i64* [[TMP68]], i64 [[TMP63]], i64 [[TMP67]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP70]] = extractvalue { i64, i1 } [[TMP69]], 0
// CHK-C-NEXT:    [[TMP71:%.*]] = extractvalue { i64, i1 } [[TMP69]], 1
// CHK-C-NEXT:    br i1 [[TMP71]], label [[ATOMIC_EXIT48]], label [[ATOMIC_CMP45]]
// CHK-C:       atomic_cmp45:
// CHK-C-NEXT:    [[TMP72:%.*]] = bitcast i64 [[TMP70]] to double
// CHK-C-NEXT:    [[CMP46:%.*]] = fcmp olt double [[TMP72]], [[TMP60]]
// CHK-C-NEXT:    [[FROMBOOL47:%.*]] = zext i1 [[CMP46]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL47]], i8* [[ATMP41]], align 1
// CHK-C-NEXT:    br i1 [[CMP46]], label [[ATOMIC_CONT43]], label [[ATOMIC_EXIT48]]
// CHK-C:       atomic_exit48:
// CHK-C-NEXT:    [[TMP73:%.*]] = load double, double* [[ATMP39]], align 8
// CHK-C-NEXT:    [[TMP74:%.*]] = load i8, i8* [[ATMP41]], align 1
// CHK-C-NEXT:    store double [[TMP73]], double* [[V]], align 8
// CHK-C-NEXT:    [[TMP75:%.*]] = load double, double* [[EXPR]], align 8
// CHK-C-NEXT:    [[TMP76:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD49:%.*]] = load atomic i64, i64* [[TMP76]] monotonic, align 8
// CHK-C-NEXT:    [[TMP77:%.*]] = bitcast i64 [[ATOMIC_LOAD49]] to double
// CHK-C-NEXT:    store double [[TMP77]], double* [[ATMP50]], align 8
// CHK-C-NEXT:    [[CMP51:%.*]] = fcmp olt double [[TMP77]], [[TMP75]]
// CHK-C-NEXT:    [[FROMBOOL53:%.*]] = zext i1 [[CMP51]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL53]], i8* [[ATMP52]], align 1
// CHK-C-NEXT:    br i1 [[CMP51]], label [[ATOMIC_CONT54:%.*]], label [[ATOMIC_EXIT60:%.*]]
// CHK-C:       atomic_cont54:
// CHK-C-NEXT:    [[TMP78:%.*]] = phi i64 [ [[ATOMIC_LOAD49]], [[ATOMIC_EXIT48]] ], [ [[TMP85:%.*]], [[ATOMIC_CMP57:%.*]] ]
// CHK-C-NEXT:    [[TMP79:%.*]] = bitcast i64 [[TMP78]] to double
// CHK-C-NEXT:    store double [[TMP79]], double* [[ATMP50]], align 8
// CHK-C-NEXT:    [[TMP80:%.*]] = bitcast double* [[ATOMIC_TEMP55]] to i64*
// CHK-C-NEXT:    [[TMP81:%.*]] = bitcast double [[TMP75]] to i64
// CHK-C-NEXT:    store i64 [[TMP81]], i64* [[TMP80]], align 8
// CHK-C-NEXT:    [[TMP82:%.*]] = load i64, i64* [[TMP80]], align 8
// CHK-C-NEXT:    [[TMP83:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP84:%.*]] = cmpxchg i64* [[TMP83]], i64 [[TMP78]], i64 [[TMP82]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP85]] = extractvalue { i64, i1 } [[TMP84]], 0
// CHK-C-NEXT:    [[TMP86:%.*]] = extractvalue { i64, i1 } [[TMP84]], 1
// CHK-C-NEXT:    br i1 [[TMP86]], label [[ATOMIC_UPD_EXIT56:%.*]], label [[ATOMIC_CMP57]]
// CHK-C:       atomic_upd_exit56:
// CHK-C-NEXT:    store double [[TMP75]], double* [[ATMP50]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_EXIT60]]
// CHK-C:       atomic_cmp57:
// CHK-C-NEXT:    [[TMP87:%.*]] = bitcast i64 [[TMP85]] to double
// CHK-C-NEXT:    [[CMP58:%.*]] = fcmp olt double [[TMP87]], [[TMP75]]
// CHK-C-NEXT:    [[FROMBOOL59:%.*]] = zext i1 [[CMP58]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL59]], i8* [[ATMP52]], align 1
// CHK-C-NEXT:    br i1 [[CMP58]], label [[ATOMIC_CONT54]], label [[ATOMIC_EXIT60]]
// CHK-C:       atomic_exit60:
// CHK-C-NEXT:    [[TMP88:%.*]] = load double, double* [[ATMP50]], align 8
// CHK-C-NEXT:    [[TMP89:%.*]] = load i8, i8* [[ATMP52]], align 1
// CHK-C-NEXT:    store double [[TMP88]], double* [[V]], align 8
// CHK-C-NEXT:    [[TMP90:%.*]] = load double, double* [[EXPR]], align 8
// CHK-C-NEXT:    [[TMP91:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD61:%.*]] = load atomic i64, i64* [[TMP91]] monotonic, align 8
// CHK-C-NEXT:    [[TMP92:%.*]] = bitcast i64 [[ATOMIC_LOAD61]] to double
// CHK-C-NEXT:    store double [[TMP92]], double* [[ATMP62]], align 8
// CHK-C-NEXT:    [[CMP63:%.*]] = fcmp ogt double [[TMP92]], [[TMP90]]
// CHK-C-NEXT:    [[FROMBOOL65:%.*]] = zext i1 [[CMP63]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL65]], i8* [[ATMP64]], align 1
// CHK-C-NEXT:    br i1 [[CMP63]], label [[ATOMIC_CONT66:%.*]], label [[ATOMIC_EXIT71:%.*]]
// CHK-C:       atomic_cont66:
// CHK-C-NEXT:    [[TMP93:%.*]] = phi i64 [ [[ATOMIC_LOAD61]], [[ATOMIC_EXIT60]] ], [ [[TMP100:%.*]], [[ATOMIC_CMP68:%.*]] ]
// CHK-C-NEXT:    [[TMP94:%.*]] = bitcast i64 [[TMP93]] to double
// CHK-C-NEXT:    store double [[TMP94]], double* [[ATMP62]], align 8
// CHK-C-NEXT:    [[TMP95:%.*]] = bitcast double* [[ATOMIC_TEMP67]] to i64*
// CHK-C-NEXT:    [[TMP96:%.*]] = bitcast double [[TMP90]] to i64
// CHK-C-NEXT:    store i64 [[TMP96]], i64* [[TMP95]], align 8
// CHK-C-NEXT:    [[TMP97:%.*]] = load i64, i64* [[TMP95]], align 8
// CHK-C-NEXT:    [[TMP98:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP99:%.*]] = cmpxchg i64* [[TMP98]], i64 [[TMP93]], i64 [[TMP97]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP100]] = extractvalue { i64, i1 } [[TMP99]], 0
// CHK-C-NEXT:    [[TMP101:%.*]] = extractvalue { i64, i1 } [[TMP99]], 1
// CHK-C-NEXT:    br i1 [[TMP101]], label [[ATOMIC_EXIT71]], label [[ATOMIC_CMP68]]
// CHK-C:       atomic_cmp68:
// CHK-C-NEXT:    [[TMP102:%.*]] = bitcast i64 [[TMP100]] to double
// CHK-C-NEXT:    [[CMP69:%.*]] = fcmp ogt double [[TMP102]], [[TMP90]]
// CHK-C-NEXT:    [[FROMBOOL70:%.*]] = zext i1 [[CMP69]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL70]], i8* [[ATMP64]], align 1
// CHK-C-NEXT:    br i1 [[CMP69]], label [[ATOMIC_CONT66]], label [[ATOMIC_EXIT71]]
// CHK-C:       atomic_exit71:
// CHK-C-NEXT:    [[TMP103:%.*]] = load double, double* [[ATMP62]], align 8
// CHK-C-NEXT:    [[TMP104:%.*]] = load i8, i8* [[ATMP64]], align 1
// CHK-C-NEXT:    store double [[TMP103]], double* [[V]], align 8
// CHK-C-NEXT:    [[TMP105:%.*]] = load double, double* [[EXPR]], align 8
// CHK-C-NEXT:    [[TMP106:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD72:%.*]] = load atomic i64, i64* [[TMP106]] monotonic, align 8
// CHK-C-NEXT:    [[TMP107:%.*]] = bitcast i64 [[ATOMIC_LOAD72]] to double
// CHK-C-NEXT:    store double [[TMP107]], double* [[ATMP73]], align 8
// CHK-C-NEXT:    [[CMP74:%.*]] = fcmp ogt double [[TMP107]], [[TMP105]]
// CHK-C-NEXT:    [[FROMBOOL76:%.*]] = zext i1 [[CMP74]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL76]], i8* [[ATMP75]], align 1
// CHK-C-NEXT:    br i1 [[CMP74]], label [[ATOMIC_CONT77:%.*]], label [[ATOMIC_EXIT83:%.*]]
// CHK-C:       atomic_cont77:
// CHK-C-NEXT:    [[TMP108:%.*]] = phi i64 [ [[ATOMIC_LOAD72]], [[ATOMIC_EXIT71]] ], [ [[TMP115:%.*]], [[ATOMIC_CMP80:%.*]] ]
// CHK-C-NEXT:    [[TMP109:%.*]] = bitcast i64 [[TMP108]] to double
// CHK-C-NEXT:    store double [[TMP109]], double* [[ATMP73]], align 8
// CHK-C-NEXT:    [[TMP110:%.*]] = bitcast double* [[ATOMIC_TEMP78]] to i64*
// CHK-C-NEXT:    [[TMP111:%.*]] = bitcast double [[TMP105]] to i64
// CHK-C-NEXT:    store i64 [[TMP111]], i64* [[TMP110]], align 8
// CHK-C-NEXT:    [[TMP112:%.*]] = load i64, i64* [[TMP110]], align 8
// CHK-C-NEXT:    [[TMP113:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP114:%.*]] = cmpxchg i64* [[TMP113]], i64 [[TMP108]], i64 [[TMP112]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP115]] = extractvalue { i64, i1 } [[TMP114]], 0
// CHK-C-NEXT:    [[TMP116:%.*]] = extractvalue { i64, i1 } [[TMP114]], 1
// CHK-C-NEXT:    br i1 [[TMP116]], label [[ATOMIC_UPD_EXIT79:%.*]], label [[ATOMIC_CMP80]]
// CHK-C:       atomic_upd_exit79:
// CHK-C-NEXT:    store double [[TMP105]], double* [[ATMP73]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_EXIT83]]
// CHK-C:       atomic_cmp80:
// CHK-C-NEXT:    [[TMP117:%.*]] = bitcast i64 [[TMP115]] to double
// CHK-C-NEXT:    [[CMP81:%.*]] = fcmp ogt double [[TMP117]], [[TMP105]]
// CHK-C-NEXT:    [[FROMBOOL82:%.*]] = zext i1 [[CMP81]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL82]], i8* [[ATMP75]], align 1
// CHK-C-NEXT:    br i1 [[CMP81]], label [[ATOMIC_CONT77]], label [[ATOMIC_EXIT83]]
// CHK-C:       atomic_exit83:
// CHK-C-NEXT:    [[TMP118:%.*]] = load double, double* [[ATMP73]], align 8
// CHK-C-NEXT:    [[TMP119:%.*]] = load i8, i8* [[ATMP75]], align 1
// CHK-C-NEXT:    store double [[TMP118]], double* [[V]], align 8
// CHK-C-NEXT:    [[TMP120:%.*]] = load double, double* [[D]], align 8
// CHK-C-NEXT:    [[TMP121:%.*]] = load double, double* [[E]], align 8
// CHK-C-NEXT:    [[TMP122:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD84:%.*]] = load atomic i64, i64* [[TMP122]] monotonic, align 8
// CHK-C-NEXT:    [[TMP123:%.*]] = bitcast i64 [[ATOMIC_LOAD84]] to double
// CHK-C-NEXT:    store double [[TMP123]], double* [[ATMP85]], align 8
// CHK-C-NEXT:    [[TMP124:%.*]] = bitcast double [[TMP123]] to i64
// CHK-C-NEXT:    [[TMP125:%.*]] = bitcast double [[TMP121]] to i64
// CHK-C-NEXT:    [[CMP86:%.*]] = icmp eq i64 [[TMP124]], [[TMP125]]
// CHK-C-NEXT:    [[FROMBOOL88:%.*]] = zext i1 [[CMP86]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL88]], i8* [[ATMP87]], align 1
// CHK-C-NEXT:    br i1 [[CMP86]], label [[ATOMIC_CONT89:%.*]], label [[ATOMIC_EXIT94:%.*]]
// CHK-C:       atomic_cont89:
// CHK-C-NEXT:    [[TMP126:%.*]] = phi i64 [ [[ATOMIC_LOAD84]], [[ATOMIC_EXIT83]] ], [ [[TMP133:%.*]], [[ATOMIC_CMP91:%.*]] ]
// CHK-C-NEXT:    [[TMP127:%.*]] = bitcast i64 [[TMP126]] to double
// CHK-C-NEXT:    store double [[TMP127]], double* [[ATMP85]], align 8
// CHK-C-NEXT:    [[TMP128:%.*]] = bitcast double* [[ATOMIC_TEMP90]] to i64*
// CHK-C-NEXT:    [[TMP129:%.*]] = bitcast double [[TMP120]] to i64
// CHK-C-NEXT:    store i64 [[TMP129]], i64* [[TMP128]], align 8
// CHK-C-NEXT:    [[TMP130:%.*]] = load i64, i64* [[TMP128]], align 8
// CHK-C-NEXT:    [[TMP131:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP132:%.*]] = cmpxchg i64* [[TMP131]], i64 [[TMP126]], i64 [[TMP130]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP133]] = extractvalue { i64, i1 } [[TMP132]], 0
// CHK-C-NEXT:    [[TMP134:%.*]] = extractvalue { i64, i1 } [[TMP132]], 1
// CHK-C-NEXT:    br i1 [[TMP134]], label [[ATOMIC_EXIT94]], label [[ATOMIC_CMP91]]
// CHK-C:       atomic_cmp91:
// CHK-C-NEXT:    [[TMP135:%.*]] = bitcast i64 [[TMP133]] to double
// CHK-C-NEXT:    [[TMP136:%.*]] = bitcast double [[TMP135]] to i64
// CHK-C-NEXT:    [[TMP137:%.*]] = bitcast double [[TMP121]] to i64
// CHK-C-NEXT:    [[CMP92:%.*]] = icmp eq i64 [[TMP136]], [[TMP137]]
// CHK-C-NEXT:    [[FROMBOOL93:%.*]] = zext i1 [[CMP92]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL93]], i8* [[ATMP87]], align 1
// CHK-C-NEXT:    br i1 [[CMP92]], label [[ATOMIC_CONT89]], label [[ATOMIC_EXIT94]]
// CHK-C:       atomic_exit94:
// CHK-C-NEXT:    [[TMP138:%.*]] = load double, double* [[ATMP85]], align 8
// CHK-C-NEXT:    [[TMP139:%.*]] = load i8, i8* [[ATMP87]], align 1
// CHK-C-NEXT:    store double [[TMP138]], double* [[V]], align 8
// CHK-C-NEXT:    [[TMP140:%.*]] = load double, double* [[D]], align 8
// CHK-C-NEXT:    [[TMP141:%.*]] = load double, double* [[E]], align 8
// CHK-C-NEXT:    [[TMP142:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD95:%.*]] = load atomic i64, i64* [[TMP142]] monotonic, align 8
// CHK-C-NEXT:    [[TMP143:%.*]] = bitcast i64 [[ATOMIC_LOAD95]] to double
// CHK-C-NEXT:    store double [[TMP143]], double* [[ATMP96]], align 8
// CHK-C-NEXT:    [[TMP144:%.*]] = bitcast double [[TMP143]] to i64
// CHK-C-NEXT:    [[TMP145:%.*]] = bitcast double [[TMP141]] to i64
// CHK-C-NEXT:    [[CMP97:%.*]] = icmp eq i64 [[TMP144]], [[TMP145]]
// CHK-C-NEXT:    [[FROMBOOL99:%.*]] = zext i1 [[CMP97]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL99]], i8* [[ATMP98]], align 1
// CHK-C-NEXT:    br i1 [[CMP97]], label [[ATOMIC_CONT100:%.*]], label [[ATOMIC_EXIT106:%.*]]
// CHK-C:       atomic_cont100:
// CHK-C-NEXT:    [[TMP146:%.*]] = phi i64 [ [[ATOMIC_LOAD95]], [[ATOMIC_EXIT94]] ], [ [[TMP153:%.*]], [[ATOMIC_CMP103:%.*]] ]
// CHK-C-NEXT:    [[TMP147:%.*]] = bitcast i64 [[TMP146]] to double
// CHK-C-NEXT:    store double [[TMP147]], double* [[ATMP96]], align 8
// CHK-C-NEXT:    [[TMP148:%.*]] = bitcast double* [[ATOMIC_TEMP101]] to i64*
// CHK-C-NEXT:    [[TMP149:%.*]] = bitcast double [[TMP140]] to i64
// CHK-C-NEXT:    store i64 [[TMP149]], i64* [[TMP148]], align 8
// CHK-C-NEXT:    [[TMP150:%.*]] = load i64, i64* [[TMP148]], align 8
// CHK-C-NEXT:    [[TMP151:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP152:%.*]] = cmpxchg i64* [[TMP151]], i64 [[TMP146]], i64 [[TMP150]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP153]] = extractvalue { i64, i1 } [[TMP152]], 0
// CHK-C-NEXT:    [[TMP154:%.*]] = extractvalue { i64, i1 } [[TMP152]], 1
// CHK-C-NEXT:    br i1 [[TMP154]], label [[ATOMIC_UPD_EXIT102:%.*]], label [[ATOMIC_CMP103]]
// CHK-C:       atomic_upd_exit102:
// CHK-C-NEXT:    store double [[TMP140]], double* [[ATMP96]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_EXIT106]]
// CHK-C:       atomic_cmp103:
// CHK-C-NEXT:    [[TMP155:%.*]] = bitcast i64 [[TMP153]] to double
// CHK-C-NEXT:    [[TMP156:%.*]] = bitcast double [[TMP155]] to i64
// CHK-C-NEXT:    [[TMP157:%.*]] = bitcast double [[TMP141]] to i64
// CHK-C-NEXT:    [[CMP104:%.*]] = icmp eq i64 [[TMP156]], [[TMP157]]
// CHK-C-NEXT:    [[FROMBOOL105:%.*]] = zext i1 [[CMP104]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL105]], i8* [[ATMP98]], align 1
// CHK-C-NEXT:    br i1 [[CMP104]], label [[ATOMIC_CONT100]], label [[ATOMIC_EXIT106]]
// CHK-C:       atomic_exit106:
// CHK-C-NEXT:    [[TMP158:%.*]] = load double, double* [[ATMP96]], align 8
// CHK-C-NEXT:    [[TMP159:%.*]] = load i8, i8* [[ATMP98]], align 1
// CHK-C-NEXT:    store double [[TMP158]], double* [[V]], align 8
// CHK-C-NEXT:    [[TMP160:%.*]] = load double, double* [[D]], align 8
// CHK-C-NEXT:    [[TMP161:%.*]] = load double, double* [[E]], align 8
// CHK-C-NEXT:    [[TMP162:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD107:%.*]] = load atomic i64, i64* [[TMP162]] monotonic, align 8
// CHK-C-NEXT:    [[TMP163:%.*]] = bitcast i64 [[ATOMIC_LOAD107]] to double
// CHK-C-NEXT:    store double [[TMP163]], double* [[ATMP108]], align 8
// CHK-C-NEXT:    [[TMP164:%.*]] = bitcast double [[TMP163]] to i64
// CHK-C-NEXT:    [[TMP165:%.*]] = bitcast double [[TMP161]] to i64
// CHK-C-NEXT:    [[CMP109:%.*]] = icmp eq i64 [[TMP164]], [[TMP165]]
// CHK-C-NEXT:    [[FROMBOOL111:%.*]] = zext i1 [[CMP109]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL111]], i8* [[ATMP110]], align 1
// CHK-C-NEXT:    br i1 [[CMP109]], label [[ATOMIC_CONT112:%.*]], label [[ATOMIC_EXIT118:%.*]]
// CHK-C:       atomic_cont112:
// CHK-C-NEXT:    [[TMP166:%.*]] = phi i64 [ [[ATOMIC_LOAD107]], [[ATOMIC_EXIT106]] ], [ [[TMP173:%.*]], [[ATOMIC_CMP115:%.*]] ]
// CHK-C-NEXT:    [[TMP167:%.*]] = bitcast i64 [[TMP166]] to double
// CHK-C-NEXT:    store double [[TMP167]], double* [[ATMP108]], align 8
// CHK-C-NEXT:    [[TMP168:%.*]] = bitcast double* [[ATOMIC_TEMP113]] to i64*
// CHK-C-NEXT:    [[TMP169:%.*]] = bitcast double [[TMP160]] to i64
// CHK-C-NEXT:    store i64 [[TMP169]], i64* [[TMP168]], align 8
// CHK-C-NEXT:    [[TMP170:%.*]] = load i64, i64* [[TMP168]], align 8
// CHK-C-NEXT:    [[TMP171:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP172:%.*]] = cmpxchg i64* [[TMP171]], i64 [[TMP166]], i64 [[TMP170]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP173]] = extractvalue { i64, i1 } [[TMP172]], 0
// CHK-C-NEXT:    [[TMP174:%.*]] = extractvalue { i64, i1 } [[TMP172]], 1
// CHK-C-NEXT:    br i1 [[TMP174]], label [[ATOMIC_UPD_EXIT114:%.*]], label [[ATOMIC_CMP115]]
// CHK-C:       atomic_upd_exit114:
// CHK-C-NEXT:    store double [[TMP160]], double* [[ATMP108]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_EXIT118]]
// CHK-C:       atomic_cmp115:
// CHK-C-NEXT:    [[TMP175:%.*]] = bitcast i64 [[TMP173]] to double
// CHK-C-NEXT:    [[TMP176:%.*]] = bitcast double [[TMP175]] to i64
// CHK-C-NEXT:    [[TMP177:%.*]] = bitcast double [[TMP161]] to i64
// CHK-C-NEXT:    [[CMP116:%.*]] = icmp eq i64 [[TMP176]], [[TMP177]]
// CHK-C-NEXT:    [[FROMBOOL117:%.*]] = zext i1 [[CMP116]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL117]], i8* [[ATMP110]], align 1
// CHK-C-NEXT:    br i1 [[CMP116]], label [[ATOMIC_CONT112]], label [[ATOMIC_EXIT118]]
// CHK-C:       atomic_exit118:
// CHK-C-NEXT:    [[TMP178:%.*]] = load double, double* [[ATMP108]], align 8
// CHK-C-NEXT:    [[TMP179:%.*]] = load i8, i8* [[ATMP110]], align 1
// CHK-C-NEXT:    [[TMP180:%.*]] = trunc i8 [[TMP179]] to i1
// CHK-C-NEXT:    br i1 [[TMP180]], label [[ATOMIC_CAPTURE_CONT:%.*]], label [[ATOMIC_CAPTURE:%.*]]
// CHK-C:       atomic_capture:
// CHK-C-NEXT:    store double [[TMP178]], double* [[V]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT]]
// CHK-C:       atomic_capture_cont:
// CHK-C-NEXT:    [[TMP181:%.*]] = load double, double* [[D]], align 8
// CHK-C-NEXT:    [[TMP182:%.*]] = load double, double* [[E]], align 8
// CHK-C-NEXT:    [[TMP183:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD119:%.*]] = load atomic i64, i64* [[TMP183]] monotonic, align 8
// CHK-C-NEXT:    [[TMP184:%.*]] = bitcast i64 [[ATOMIC_LOAD119]] to double
// CHK-C-NEXT:    store double [[TMP184]], double* [[ATMP120]], align 8
// CHK-C-NEXT:    [[TMP185:%.*]] = bitcast double [[TMP184]] to i64
// CHK-C-NEXT:    [[TMP186:%.*]] = bitcast double [[TMP182]] to i64
// CHK-C-NEXT:    [[CMP121:%.*]] = icmp eq i64 [[TMP185]], [[TMP186]]
// CHK-C-NEXT:    [[FROMBOOL123:%.*]] = zext i1 [[CMP121]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL123]], i8* [[ATMP122]], align 1
// CHK-C-NEXT:    br i1 [[CMP121]], label [[ATOMIC_CONT124:%.*]], label [[ATOMIC_EXIT129:%.*]]
// CHK-C:       atomic_cont124:
// CHK-C-NEXT:    [[TMP187:%.*]] = phi i64 [ [[ATOMIC_LOAD119]], [[ATOMIC_CAPTURE_CONT]] ], [ [[TMP194:%.*]], [[ATOMIC_CMP126:%.*]] ]
// CHK-C-NEXT:    [[TMP188:%.*]] = bitcast i64 [[TMP187]] to double
// CHK-C-NEXT:    store double [[TMP188]], double* [[ATMP120]], align 8
// CHK-C-NEXT:    [[TMP189:%.*]] = bitcast double* [[ATOMIC_TEMP125]] to i64*
// CHK-C-NEXT:    [[TMP190:%.*]] = bitcast double [[TMP181]] to i64
// CHK-C-NEXT:    store i64 [[TMP190]], i64* [[TMP189]], align 8
// CHK-C-NEXT:    [[TMP191:%.*]] = load i64, i64* [[TMP189]], align 8
// CHK-C-NEXT:    [[TMP192:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP193:%.*]] = cmpxchg i64* [[TMP192]], i64 [[TMP187]], i64 [[TMP191]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP194]] = extractvalue { i64, i1 } [[TMP193]], 0
// CHK-C-NEXT:    [[TMP195:%.*]] = extractvalue { i64, i1 } [[TMP193]], 1
// CHK-C-NEXT:    br i1 [[TMP195]], label [[ATOMIC_EXIT129]], label [[ATOMIC_CMP126]]
// CHK-C:       atomic_cmp126:
// CHK-C-NEXT:    [[TMP196:%.*]] = bitcast i64 [[TMP194]] to double
// CHK-C-NEXT:    [[TMP197:%.*]] = bitcast double [[TMP196]] to i64
// CHK-C-NEXT:    [[TMP198:%.*]] = bitcast double [[TMP182]] to i64
// CHK-C-NEXT:    [[CMP127:%.*]] = icmp eq i64 [[TMP197]], [[TMP198]]
// CHK-C-NEXT:    [[FROMBOOL128:%.*]] = zext i1 [[CMP127]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL128]], i8* [[ATMP122]], align 1
// CHK-C-NEXT:    br i1 [[CMP127]], label [[ATOMIC_CONT124]], label [[ATOMIC_EXIT129]]
// CHK-C:       atomic_exit129:
// CHK-C-NEXT:    [[TMP199:%.*]] = load double, double* [[ATMP120]], align 8
// CHK-C-NEXT:    [[TMP200:%.*]] = load i8, i8* [[ATMP122]], align 1
// CHK-C-NEXT:    store i8 [[TMP200]], i8* [[R]], align 1
// CHK-C-NEXT:    [[TMP201:%.*]] = load double, double* [[D]], align 8
// CHK-C-NEXT:    [[TMP202:%.*]] = load double, double* [[E]], align 8
// CHK-C-NEXT:    [[TMP203:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD130:%.*]] = load atomic i64, i64* [[TMP203]] monotonic, align 8
// CHK-C-NEXT:    [[TMP204:%.*]] = bitcast i64 [[ATOMIC_LOAD130]] to double
// CHK-C-NEXT:    store double [[TMP204]], double* [[ATMP131]], align 8
// CHK-C-NEXT:    [[TMP205:%.*]] = bitcast double [[TMP204]] to i64
// CHK-C-NEXT:    [[TMP206:%.*]] = bitcast double [[TMP202]] to i64
// CHK-C-NEXT:    [[CMP132:%.*]] = icmp eq i64 [[TMP205]], [[TMP206]]
// CHK-C-NEXT:    [[FROMBOOL134:%.*]] = zext i1 [[CMP132]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL134]], i8* [[ATMP133]], align 1
// CHK-C-NEXT:    br i1 [[CMP132]], label [[ATOMIC_CONT135:%.*]], label [[ATOMIC_EXIT140:%.*]]
// CHK-C:       atomic_cont135:
// CHK-C-NEXT:    [[TMP207:%.*]] = phi i64 [ [[ATOMIC_LOAD130]], [[ATOMIC_EXIT129]] ], [ [[TMP214:%.*]], [[ATOMIC_CMP137:%.*]] ]
// CHK-C-NEXT:    [[TMP208:%.*]] = bitcast i64 [[TMP207]] to double
// CHK-C-NEXT:    store double [[TMP208]], double* [[ATMP131]], align 8
// CHK-C-NEXT:    [[TMP209:%.*]] = bitcast double* [[ATOMIC_TEMP136]] to i64*
// CHK-C-NEXT:    [[TMP210:%.*]] = bitcast double [[TMP201]] to i64
// CHK-C-NEXT:    store i64 [[TMP210]], i64* [[TMP209]], align 8
// CHK-C-NEXT:    [[TMP211:%.*]] = load i64, i64* [[TMP209]], align 8
// CHK-C-NEXT:    [[TMP212:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP213:%.*]] = cmpxchg i64* [[TMP212]], i64 [[TMP207]], i64 [[TMP211]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP214]] = extractvalue { i64, i1 } [[TMP213]], 0
// CHK-C-NEXT:    [[TMP215:%.*]] = extractvalue { i64, i1 } [[TMP213]], 1
// CHK-C-NEXT:    br i1 [[TMP215]], label [[ATOMIC_EXIT140]], label [[ATOMIC_CMP137]]
// CHK-C:       atomic_cmp137:
// CHK-C-NEXT:    [[TMP216:%.*]] = bitcast i64 [[TMP214]] to double
// CHK-C-NEXT:    [[TMP217:%.*]] = bitcast double [[TMP216]] to i64
// CHK-C-NEXT:    [[TMP218:%.*]] = bitcast double [[TMP202]] to i64
// CHK-C-NEXT:    [[CMP138:%.*]] = icmp eq i64 [[TMP217]], [[TMP218]]
// CHK-C-NEXT:    [[FROMBOOL139:%.*]] = zext i1 [[CMP138]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL139]], i8* [[ATMP133]], align 1
// CHK-C-NEXT:    br i1 [[CMP138]], label [[ATOMIC_CONT135]], label [[ATOMIC_EXIT140]]
// CHK-C:       atomic_exit140:
// CHK-C-NEXT:    [[TMP219:%.*]] = load double, double* [[ATMP131]], align 8
// CHK-C-NEXT:    [[TMP220:%.*]] = load i8, i8* [[ATMP133]], align 1
// CHK-C-NEXT:    store i8 [[TMP220]], i8* [[R]], align 1
// CHK-C-NEXT:    [[TMP221:%.*]] = trunc i8 [[TMP220]] to i1
// CHK-C-NEXT:    br i1 [[TMP221]], label [[ATOMIC_CAPTURE_CONT142:%.*]], label [[ATOMIC_CAPTURE141:%.*]]
// CHK-C:       atomic_capture141:
// CHK-C-NEXT:    store double [[TMP219]], double* [[V]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT142]]
// CHK-C:       atomic_capture_cont142:
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z11test_doublev(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[X:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[D:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[E:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[V:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[R:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP5:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP7:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP10:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP16:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP18:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP21:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP27:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP29:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP32:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP39:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP41:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP44:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP50:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP52:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP55:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP62:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP64:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP67:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP73:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP75:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP78:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP85:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP87:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP90:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP96:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP98:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP101:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP108:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP110:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP113:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP120:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP122:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP125:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP131:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP133:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP136:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load double, double* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[TMP1:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, i64* [[TMP1]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP2:%.*]] = bitcast i64 [[ATOMIC_LOAD]] to double
// CHK-CXX-NEXT:    store double [[TMP2]], double* [[TMP]], align 8
// CHK-CXX-NEXT:    [[CMP:%.*]] = fcmp ogt double [[TMP2]], [[TMP0]]
// CHK-CXX-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL]], i8* [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP3:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP10:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    [[TMP4:%.*]] = bitcast i64 [[TMP3]] to double
// CHK-CXX-NEXT:    store double [[TMP4]], double* [[TMP]], align 8
// CHK-CXX-NEXT:    [[TMP5:%.*]] = bitcast double* [[ATOMIC_TEMP]] to i64*
// CHK-CXX-NEXT:    [[TMP6:%.*]] = bitcast double [[TMP0]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP6]], i64* [[TMP5]], align 8
// CHK-CXX-NEXT:    [[TMP7:%.*]] = load i64, i64* [[TMP5]], align 8
// CHK-CXX-NEXT:    [[TMP8:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP9:%.*]] = cmpxchg i64* [[TMP8]], i64 [[TMP3]], i64 [[TMP7]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP10]] = extractvalue { i64, i1 } [[TMP9]], 0
// CHK-CXX-NEXT:    [[TMP11:%.*]] = extractvalue { i64, i1 } [[TMP9]], 1
// CHK-CXX-NEXT:    br i1 [[TMP11]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    [[TMP12:%.*]] = bitcast i64 [[TMP10]] to double
// CHK-CXX-NEXT:    [[CMP2:%.*]] = fcmp ogt double [[TMP12]], [[TMP0]]
// CHK-CXX-NEXT:    [[FROMBOOL3:%.*]] = zext i1 [[CMP2]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL3]], i8* [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP2]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP13:%.*]] = load double, double* [[TMP]], align 8
// CHK-CXX-NEXT:    [[TMP14:%.*]] = load i8, i8* [[ATMP1]], align 1
// CHK-CXX-NEXT:    store double [[TMP13]], double* [[V]], align 8
// CHK-CXX-NEXT:    [[TMP15:%.*]] = load double, double* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[TMP16:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD4:%.*]] = load atomic i64, i64* [[TMP16]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP17:%.*]] = bitcast i64 [[ATOMIC_LOAD4]] to double
// CHK-CXX-NEXT:    store double [[TMP17]], double* [[ATMP5]], align 8
// CHK-CXX-NEXT:    [[CMP6:%.*]] = fcmp ogt double [[TMP17]], [[TMP15]]
// CHK-CXX-NEXT:    [[FROMBOOL8:%.*]] = zext i1 [[CMP6]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL8]], i8* [[ATMP7]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP6]], label [[ATOMIC_CONT9:%.*]], label [[ATOMIC_EXIT14:%.*]]
// CHK-CXX:       atomic_cont9:
// CHK-CXX-NEXT:    [[TMP18:%.*]] = phi i64 [ [[ATOMIC_LOAD4]], [[ATOMIC_EXIT]] ], [ [[TMP25:%.*]], [[ATOMIC_CMP11:%.*]] ]
// CHK-CXX-NEXT:    [[TMP19:%.*]] = bitcast i64 [[TMP18]] to double
// CHK-CXX-NEXT:    store double [[TMP19]], double* [[ATMP5]], align 8
// CHK-CXX-NEXT:    [[TMP20:%.*]] = bitcast double* [[ATOMIC_TEMP10]] to i64*
// CHK-CXX-NEXT:    [[TMP21:%.*]] = bitcast double [[TMP15]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP21]], i64* [[TMP20]], align 8
// CHK-CXX-NEXT:    [[TMP22:%.*]] = load i64, i64* [[TMP20]], align 8
// CHK-CXX-NEXT:    [[TMP23:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP24:%.*]] = cmpxchg i64* [[TMP23]], i64 [[TMP18]], i64 [[TMP22]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP25]] = extractvalue { i64, i1 } [[TMP24]], 0
// CHK-CXX-NEXT:    [[TMP26:%.*]] = extractvalue { i64, i1 } [[TMP24]], 1
// CHK-CXX-NEXT:    br i1 [[TMP26]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP11]]
// CHK-CXX:       atomic_upd_exit:
// CHK-CXX-NEXT:    store double [[TMP15]], double* [[ATMP5]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT14]]
// CHK-CXX:       atomic_cmp11:
// CHK-CXX-NEXT:    [[TMP27:%.*]] = bitcast i64 [[TMP25]] to double
// CHK-CXX-NEXT:    [[CMP12:%.*]] = fcmp ogt double [[TMP27]], [[TMP15]]
// CHK-CXX-NEXT:    [[FROMBOOL13:%.*]] = zext i1 [[CMP12]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL13]], i8* [[ATMP7]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT9]], label [[ATOMIC_EXIT14]]
// CHK-CXX:       atomic_exit14:
// CHK-CXX-NEXT:    [[TMP28:%.*]] = load double, double* [[ATMP5]], align 8
// CHK-CXX-NEXT:    [[TMP29:%.*]] = load i8, i8* [[ATMP7]], align 1
// CHK-CXX-NEXT:    store double [[TMP28]], double* [[V]], align 8
// CHK-CXX-NEXT:    [[TMP30:%.*]] = load double, double* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[TMP31:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD15:%.*]] = load atomic i64, i64* [[TMP31]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP32:%.*]] = bitcast i64 [[ATOMIC_LOAD15]] to double
// CHK-CXX-NEXT:    store double [[TMP32]], double* [[ATMP16]], align 8
// CHK-CXX-NEXT:    [[CMP17:%.*]] = fcmp olt double [[TMP32]], [[TMP30]]
// CHK-CXX-NEXT:    [[FROMBOOL19:%.*]] = zext i1 [[CMP17]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL19]], i8* [[ATMP18]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP17]], label [[ATOMIC_CONT20:%.*]], label [[ATOMIC_EXIT25:%.*]]
// CHK-CXX:       atomic_cont20:
// CHK-CXX-NEXT:    [[TMP33:%.*]] = phi i64 [ [[ATOMIC_LOAD15]], [[ATOMIC_EXIT14]] ], [ [[TMP40:%.*]], [[ATOMIC_CMP22:%.*]] ]
// CHK-CXX-NEXT:    [[TMP34:%.*]] = bitcast i64 [[TMP33]] to double
// CHK-CXX-NEXT:    store double [[TMP34]], double* [[ATMP16]], align 8
// CHK-CXX-NEXT:    [[TMP35:%.*]] = bitcast double* [[ATOMIC_TEMP21]] to i64*
// CHK-CXX-NEXT:    [[TMP36:%.*]] = bitcast double [[TMP30]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP36]], i64* [[TMP35]], align 8
// CHK-CXX-NEXT:    [[TMP37:%.*]] = load i64, i64* [[TMP35]], align 8
// CHK-CXX-NEXT:    [[TMP38:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP39:%.*]] = cmpxchg i64* [[TMP38]], i64 [[TMP33]], i64 [[TMP37]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP40]] = extractvalue { i64, i1 } [[TMP39]], 0
// CHK-CXX-NEXT:    [[TMP41:%.*]] = extractvalue { i64, i1 } [[TMP39]], 1
// CHK-CXX-NEXT:    br i1 [[TMP41]], label [[ATOMIC_EXIT25]], label [[ATOMIC_CMP22]]
// CHK-CXX:       atomic_cmp22:
// CHK-CXX-NEXT:    [[TMP42:%.*]] = bitcast i64 [[TMP40]] to double
// CHK-CXX-NEXT:    [[CMP23:%.*]] = fcmp olt double [[TMP42]], [[TMP30]]
// CHK-CXX-NEXT:    [[FROMBOOL24:%.*]] = zext i1 [[CMP23]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL24]], i8* [[ATMP18]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP23]], label [[ATOMIC_CONT20]], label [[ATOMIC_EXIT25]]
// CHK-CXX:       atomic_exit25:
// CHK-CXX-NEXT:    [[TMP43:%.*]] = load double, double* [[ATMP16]], align 8
// CHK-CXX-NEXT:    [[TMP44:%.*]] = load i8, i8* [[ATMP18]], align 1
// CHK-CXX-NEXT:    store double [[TMP43]], double* [[V]], align 8
// CHK-CXX-NEXT:    [[TMP45:%.*]] = load double, double* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[TMP46:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD26:%.*]] = load atomic i64, i64* [[TMP46]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP47:%.*]] = bitcast i64 [[ATOMIC_LOAD26]] to double
// CHK-CXX-NEXT:    store double [[TMP47]], double* [[ATMP27]], align 8
// CHK-CXX-NEXT:    [[CMP28:%.*]] = fcmp olt double [[TMP47]], [[TMP45]]
// CHK-CXX-NEXT:    [[FROMBOOL30:%.*]] = zext i1 [[CMP28]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL30]], i8* [[ATMP29]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP28]], label [[ATOMIC_CONT31:%.*]], label [[ATOMIC_EXIT37:%.*]]
// CHK-CXX:       atomic_cont31:
// CHK-CXX-NEXT:    [[TMP48:%.*]] = phi i64 [ [[ATOMIC_LOAD26]], [[ATOMIC_EXIT25]] ], [ [[TMP55:%.*]], [[ATOMIC_CMP34:%.*]] ]
// CHK-CXX-NEXT:    [[TMP49:%.*]] = bitcast i64 [[TMP48]] to double
// CHK-CXX-NEXT:    store double [[TMP49]], double* [[ATMP27]], align 8
// CHK-CXX-NEXT:    [[TMP50:%.*]] = bitcast double* [[ATOMIC_TEMP32]] to i64*
// CHK-CXX-NEXT:    [[TMP51:%.*]] = bitcast double [[TMP45]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP51]], i64* [[TMP50]], align 8
// CHK-CXX-NEXT:    [[TMP52:%.*]] = load i64, i64* [[TMP50]], align 8
// CHK-CXX-NEXT:    [[TMP53:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP54:%.*]] = cmpxchg i64* [[TMP53]], i64 [[TMP48]], i64 [[TMP52]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP55]] = extractvalue { i64, i1 } [[TMP54]], 0
// CHK-CXX-NEXT:    [[TMP56:%.*]] = extractvalue { i64, i1 } [[TMP54]], 1
// CHK-CXX-NEXT:    br i1 [[TMP56]], label [[ATOMIC_UPD_EXIT33:%.*]], label [[ATOMIC_CMP34]]
// CHK-CXX:       atomic_upd_exit33:
// CHK-CXX-NEXT:    store double [[TMP45]], double* [[ATMP27]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT37]]
// CHK-CXX:       atomic_cmp34:
// CHK-CXX-NEXT:    [[TMP57:%.*]] = bitcast i64 [[TMP55]] to double
// CHK-CXX-NEXT:    [[CMP35:%.*]] = fcmp olt double [[TMP57]], [[TMP45]]
// CHK-CXX-NEXT:    [[FROMBOOL36:%.*]] = zext i1 [[CMP35]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL36]], i8* [[ATMP29]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP35]], label [[ATOMIC_CONT31]], label [[ATOMIC_EXIT37]]
// CHK-CXX:       atomic_exit37:
// CHK-CXX-NEXT:    [[TMP58:%.*]] = load double, double* [[ATMP27]], align 8
// CHK-CXX-NEXT:    [[TMP59:%.*]] = load i8, i8* [[ATMP29]], align 1
// CHK-CXX-NEXT:    store double [[TMP58]], double* [[V]], align 8
// CHK-CXX-NEXT:    [[TMP60:%.*]] = load double, double* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[TMP61:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD38:%.*]] = load atomic i64, i64* [[TMP61]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP62:%.*]] = bitcast i64 [[ATOMIC_LOAD38]] to double
// CHK-CXX-NEXT:    store double [[TMP62]], double* [[ATMP39]], align 8
// CHK-CXX-NEXT:    [[CMP40:%.*]] = fcmp olt double [[TMP62]], [[TMP60]]
// CHK-CXX-NEXT:    [[FROMBOOL42:%.*]] = zext i1 [[CMP40]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL42]], i8* [[ATMP41]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP40]], label [[ATOMIC_CONT43:%.*]], label [[ATOMIC_EXIT48:%.*]]
// CHK-CXX:       atomic_cont43:
// CHK-CXX-NEXT:    [[TMP63:%.*]] = phi i64 [ [[ATOMIC_LOAD38]], [[ATOMIC_EXIT37]] ], [ [[TMP70:%.*]], [[ATOMIC_CMP45:%.*]] ]
// CHK-CXX-NEXT:    [[TMP64:%.*]] = bitcast i64 [[TMP63]] to double
// CHK-CXX-NEXT:    store double [[TMP64]], double* [[ATMP39]], align 8
// CHK-CXX-NEXT:    [[TMP65:%.*]] = bitcast double* [[ATOMIC_TEMP44]] to i64*
// CHK-CXX-NEXT:    [[TMP66:%.*]] = bitcast double [[TMP60]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP66]], i64* [[TMP65]], align 8
// CHK-CXX-NEXT:    [[TMP67:%.*]] = load i64, i64* [[TMP65]], align 8
// CHK-CXX-NEXT:    [[TMP68:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP69:%.*]] = cmpxchg i64* [[TMP68]], i64 [[TMP63]], i64 [[TMP67]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP70]] = extractvalue { i64, i1 } [[TMP69]], 0
// CHK-CXX-NEXT:    [[TMP71:%.*]] = extractvalue { i64, i1 } [[TMP69]], 1
// CHK-CXX-NEXT:    br i1 [[TMP71]], label [[ATOMIC_EXIT48]], label [[ATOMIC_CMP45]]
// CHK-CXX:       atomic_cmp45:
// CHK-CXX-NEXT:    [[TMP72:%.*]] = bitcast i64 [[TMP70]] to double
// CHK-CXX-NEXT:    [[CMP46:%.*]] = fcmp olt double [[TMP72]], [[TMP60]]
// CHK-CXX-NEXT:    [[FROMBOOL47:%.*]] = zext i1 [[CMP46]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL47]], i8* [[ATMP41]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP46]], label [[ATOMIC_CONT43]], label [[ATOMIC_EXIT48]]
// CHK-CXX:       atomic_exit48:
// CHK-CXX-NEXT:    [[TMP73:%.*]] = load double, double* [[ATMP39]], align 8
// CHK-CXX-NEXT:    [[TMP74:%.*]] = load i8, i8* [[ATMP41]], align 1
// CHK-CXX-NEXT:    store double [[TMP73]], double* [[V]], align 8
// CHK-CXX-NEXT:    [[TMP75:%.*]] = load double, double* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[TMP76:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD49:%.*]] = load atomic i64, i64* [[TMP76]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP77:%.*]] = bitcast i64 [[ATOMIC_LOAD49]] to double
// CHK-CXX-NEXT:    store double [[TMP77]], double* [[ATMP50]], align 8
// CHK-CXX-NEXT:    [[CMP51:%.*]] = fcmp olt double [[TMP77]], [[TMP75]]
// CHK-CXX-NEXT:    [[FROMBOOL53:%.*]] = zext i1 [[CMP51]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL53]], i8* [[ATMP52]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP51]], label [[ATOMIC_CONT54:%.*]], label [[ATOMIC_EXIT60:%.*]]
// CHK-CXX:       atomic_cont54:
// CHK-CXX-NEXT:    [[TMP78:%.*]] = phi i64 [ [[ATOMIC_LOAD49]], [[ATOMIC_EXIT48]] ], [ [[TMP85:%.*]], [[ATOMIC_CMP57:%.*]] ]
// CHK-CXX-NEXT:    [[TMP79:%.*]] = bitcast i64 [[TMP78]] to double
// CHK-CXX-NEXT:    store double [[TMP79]], double* [[ATMP50]], align 8
// CHK-CXX-NEXT:    [[TMP80:%.*]] = bitcast double* [[ATOMIC_TEMP55]] to i64*
// CHK-CXX-NEXT:    [[TMP81:%.*]] = bitcast double [[TMP75]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP81]], i64* [[TMP80]], align 8
// CHK-CXX-NEXT:    [[TMP82:%.*]] = load i64, i64* [[TMP80]], align 8
// CHK-CXX-NEXT:    [[TMP83:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP84:%.*]] = cmpxchg i64* [[TMP83]], i64 [[TMP78]], i64 [[TMP82]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP85]] = extractvalue { i64, i1 } [[TMP84]], 0
// CHK-CXX-NEXT:    [[TMP86:%.*]] = extractvalue { i64, i1 } [[TMP84]], 1
// CHK-CXX-NEXT:    br i1 [[TMP86]], label [[ATOMIC_UPD_EXIT56:%.*]], label [[ATOMIC_CMP57]]
// CHK-CXX:       atomic_upd_exit56:
// CHK-CXX-NEXT:    store double [[TMP75]], double* [[ATMP50]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT60]]
// CHK-CXX:       atomic_cmp57:
// CHK-CXX-NEXT:    [[TMP87:%.*]] = bitcast i64 [[TMP85]] to double
// CHK-CXX-NEXT:    [[CMP58:%.*]] = fcmp olt double [[TMP87]], [[TMP75]]
// CHK-CXX-NEXT:    [[FROMBOOL59:%.*]] = zext i1 [[CMP58]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL59]], i8* [[ATMP52]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP58]], label [[ATOMIC_CONT54]], label [[ATOMIC_EXIT60]]
// CHK-CXX:       atomic_exit60:
// CHK-CXX-NEXT:    [[TMP88:%.*]] = load double, double* [[ATMP50]], align 8
// CHK-CXX-NEXT:    [[TMP89:%.*]] = load i8, i8* [[ATMP52]], align 1
// CHK-CXX-NEXT:    store double [[TMP88]], double* [[V]], align 8
// CHK-CXX-NEXT:    [[TMP90:%.*]] = load double, double* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[TMP91:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD61:%.*]] = load atomic i64, i64* [[TMP91]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP92:%.*]] = bitcast i64 [[ATOMIC_LOAD61]] to double
// CHK-CXX-NEXT:    store double [[TMP92]], double* [[ATMP62]], align 8
// CHK-CXX-NEXT:    [[CMP63:%.*]] = fcmp ogt double [[TMP92]], [[TMP90]]
// CHK-CXX-NEXT:    [[FROMBOOL65:%.*]] = zext i1 [[CMP63]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL65]], i8* [[ATMP64]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP63]], label [[ATOMIC_CONT66:%.*]], label [[ATOMIC_EXIT71:%.*]]
// CHK-CXX:       atomic_cont66:
// CHK-CXX-NEXT:    [[TMP93:%.*]] = phi i64 [ [[ATOMIC_LOAD61]], [[ATOMIC_EXIT60]] ], [ [[TMP100:%.*]], [[ATOMIC_CMP68:%.*]] ]
// CHK-CXX-NEXT:    [[TMP94:%.*]] = bitcast i64 [[TMP93]] to double
// CHK-CXX-NEXT:    store double [[TMP94]], double* [[ATMP62]], align 8
// CHK-CXX-NEXT:    [[TMP95:%.*]] = bitcast double* [[ATOMIC_TEMP67]] to i64*
// CHK-CXX-NEXT:    [[TMP96:%.*]] = bitcast double [[TMP90]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP96]], i64* [[TMP95]], align 8
// CHK-CXX-NEXT:    [[TMP97:%.*]] = load i64, i64* [[TMP95]], align 8
// CHK-CXX-NEXT:    [[TMP98:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP99:%.*]] = cmpxchg i64* [[TMP98]], i64 [[TMP93]], i64 [[TMP97]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP100]] = extractvalue { i64, i1 } [[TMP99]], 0
// CHK-CXX-NEXT:    [[TMP101:%.*]] = extractvalue { i64, i1 } [[TMP99]], 1
// CHK-CXX-NEXT:    br i1 [[TMP101]], label [[ATOMIC_EXIT71]], label [[ATOMIC_CMP68]]
// CHK-CXX:       atomic_cmp68:
// CHK-CXX-NEXT:    [[TMP102:%.*]] = bitcast i64 [[TMP100]] to double
// CHK-CXX-NEXT:    [[CMP69:%.*]] = fcmp ogt double [[TMP102]], [[TMP90]]
// CHK-CXX-NEXT:    [[FROMBOOL70:%.*]] = zext i1 [[CMP69]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL70]], i8* [[ATMP64]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP69]], label [[ATOMIC_CONT66]], label [[ATOMIC_EXIT71]]
// CHK-CXX:       atomic_exit71:
// CHK-CXX-NEXT:    [[TMP103:%.*]] = load double, double* [[ATMP62]], align 8
// CHK-CXX-NEXT:    [[TMP104:%.*]] = load i8, i8* [[ATMP64]], align 1
// CHK-CXX-NEXT:    store double [[TMP103]], double* [[V]], align 8
// CHK-CXX-NEXT:    [[TMP105:%.*]] = load double, double* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[TMP106:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD72:%.*]] = load atomic i64, i64* [[TMP106]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP107:%.*]] = bitcast i64 [[ATOMIC_LOAD72]] to double
// CHK-CXX-NEXT:    store double [[TMP107]], double* [[ATMP73]], align 8
// CHK-CXX-NEXT:    [[CMP74:%.*]] = fcmp ogt double [[TMP107]], [[TMP105]]
// CHK-CXX-NEXT:    [[FROMBOOL76:%.*]] = zext i1 [[CMP74]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL76]], i8* [[ATMP75]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP74]], label [[ATOMIC_CONT77:%.*]], label [[ATOMIC_EXIT83:%.*]]
// CHK-CXX:       atomic_cont77:
// CHK-CXX-NEXT:    [[TMP108:%.*]] = phi i64 [ [[ATOMIC_LOAD72]], [[ATOMIC_EXIT71]] ], [ [[TMP115:%.*]], [[ATOMIC_CMP80:%.*]] ]
// CHK-CXX-NEXT:    [[TMP109:%.*]] = bitcast i64 [[TMP108]] to double
// CHK-CXX-NEXT:    store double [[TMP109]], double* [[ATMP73]], align 8
// CHK-CXX-NEXT:    [[TMP110:%.*]] = bitcast double* [[ATOMIC_TEMP78]] to i64*
// CHK-CXX-NEXT:    [[TMP111:%.*]] = bitcast double [[TMP105]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP111]], i64* [[TMP110]], align 8
// CHK-CXX-NEXT:    [[TMP112:%.*]] = load i64, i64* [[TMP110]], align 8
// CHK-CXX-NEXT:    [[TMP113:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP114:%.*]] = cmpxchg i64* [[TMP113]], i64 [[TMP108]], i64 [[TMP112]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP115]] = extractvalue { i64, i1 } [[TMP114]], 0
// CHK-CXX-NEXT:    [[TMP116:%.*]] = extractvalue { i64, i1 } [[TMP114]], 1
// CHK-CXX-NEXT:    br i1 [[TMP116]], label [[ATOMIC_UPD_EXIT79:%.*]], label [[ATOMIC_CMP80]]
// CHK-CXX:       atomic_upd_exit79:
// CHK-CXX-NEXT:    store double [[TMP105]], double* [[ATMP73]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT83]]
// CHK-CXX:       atomic_cmp80:
// CHK-CXX-NEXT:    [[TMP117:%.*]] = bitcast i64 [[TMP115]] to double
// CHK-CXX-NEXT:    [[CMP81:%.*]] = fcmp ogt double [[TMP117]], [[TMP105]]
// CHK-CXX-NEXT:    [[FROMBOOL82:%.*]] = zext i1 [[CMP81]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL82]], i8* [[ATMP75]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP81]], label [[ATOMIC_CONT77]], label [[ATOMIC_EXIT83]]
// CHK-CXX:       atomic_exit83:
// CHK-CXX-NEXT:    [[TMP118:%.*]] = load double, double* [[ATMP73]], align 8
// CHK-CXX-NEXT:    [[TMP119:%.*]] = load i8, i8* [[ATMP75]], align 1
// CHK-CXX-NEXT:    store double [[TMP118]], double* [[V]], align 8
// CHK-CXX-NEXT:    [[TMP120:%.*]] = load double, double* [[D]], align 8
// CHK-CXX-NEXT:    [[TMP121:%.*]] = load double, double* [[E]], align 8
// CHK-CXX-NEXT:    [[TMP122:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD84:%.*]] = load atomic i64, i64* [[TMP122]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP123:%.*]] = bitcast i64 [[ATOMIC_LOAD84]] to double
// CHK-CXX-NEXT:    store double [[TMP123]], double* [[ATMP85]], align 8
// CHK-CXX-NEXT:    [[TMP124:%.*]] = bitcast double [[TMP123]] to i64
// CHK-CXX-NEXT:    [[TMP125:%.*]] = bitcast double [[TMP121]] to i64
// CHK-CXX-NEXT:    [[CMP86:%.*]] = icmp eq i64 [[TMP124]], [[TMP125]]
// CHK-CXX-NEXT:    [[FROMBOOL88:%.*]] = zext i1 [[CMP86]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL88]], i8* [[ATMP87]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP86]], label [[ATOMIC_CONT89:%.*]], label [[ATOMIC_EXIT94:%.*]]
// CHK-CXX:       atomic_cont89:
// CHK-CXX-NEXT:    [[TMP126:%.*]] = phi i64 [ [[ATOMIC_LOAD84]], [[ATOMIC_EXIT83]] ], [ [[TMP133:%.*]], [[ATOMIC_CMP91:%.*]] ]
// CHK-CXX-NEXT:    [[TMP127:%.*]] = bitcast i64 [[TMP126]] to double
// CHK-CXX-NEXT:    store double [[TMP127]], double* [[ATMP85]], align 8
// CHK-CXX-NEXT:    [[TMP128:%.*]] = bitcast double* [[ATOMIC_TEMP90]] to i64*
// CHK-CXX-NEXT:    [[TMP129:%.*]] = bitcast double [[TMP120]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP129]], i64* [[TMP128]], align 8
// CHK-CXX-NEXT:    [[TMP130:%.*]] = load i64, i64* [[TMP128]], align 8
// CHK-CXX-NEXT:    [[TMP131:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP132:%.*]] = cmpxchg i64* [[TMP131]], i64 [[TMP126]], i64 [[TMP130]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP133]] = extractvalue { i64, i1 } [[TMP132]], 0
// CHK-CXX-NEXT:    [[TMP134:%.*]] = extractvalue { i64, i1 } [[TMP132]], 1
// CHK-CXX-NEXT:    br i1 [[TMP134]], label [[ATOMIC_EXIT94]], label [[ATOMIC_CMP91]]
// CHK-CXX:       atomic_cmp91:
// CHK-CXX-NEXT:    [[TMP135:%.*]] = bitcast i64 [[TMP133]] to double
// CHK-CXX-NEXT:    [[TMP136:%.*]] = bitcast double [[TMP135]] to i64
// CHK-CXX-NEXT:    [[TMP137:%.*]] = bitcast double [[TMP121]] to i64
// CHK-CXX-NEXT:    [[CMP92:%.*]] = icmp eq i64 [[TMP136]], [[TMP137]]
// CHK-CXX-NEXT:    [[FROMBOOL93:%.*]] = zext i1 [[CMP92]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL93]], i8* [[ATMP87]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP92]], label [[ATOMIC_CONT89]], label [[ATOMIC_EXIT94]]
// CHK-CXX:       atomic_exit94:
// CHK-CXX-NEXT:    [[TMP138:%.*]] = load double, double* [[ATMP85]], align 8
// CHK-CXX-NEXT:    [[TMP139:%.*]] = load i8, i8* [[ATMP87]], align 1
// CHK-CXX-NEXT:    store double [[TMP138]], double* [[V]], align 8
// CHK-CXX-NEXT:    [[TMP140:%.*]] = load double, double* [[D]], align 8
// CHK-CXX-NEXT:    [[TMP141:%.*]] = load double, double* [[E]], align 8
// CHK-CXX-NEXT:    [[TMP142:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD95:%.*]] = load atomic i64, i64* [[TMP142]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP143:%.*]] = bitcast i64 [[ATOMIC_LOAD95]] to double
// CHK-CXX-NEXT:    store double [[TMP143]], double* [[ATMP96]], align 8
// CHK-CXX-NEXT:    [[TMP144:%.*]] = bitcast double [[TMP143]] to i64
// CHK-CXX-NEXT:    [[TMP145:%.*]] = bitcast double [[TMP141]] to i64
// CHK-CXX-NEXT:    [[CMP97:%.*]] = icmp eq i64 [[TMP144]], [[TMP145]]
// CHK-CXX-NEXT:    [[FROMBOOL99:%.*]] = zext i1 [[CMP97]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL99]], i8* [[ATMP98]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP97]], label [[ATOMIC_CONT100:%.*]], label [[ATOMIC_EXIT106:%.*]]
// CHK-CXX:       atomic_cont100:
// CHK-CXX-NEXT:    [[TMP146:%.*]] = phi i64 [ [[ATOMIC_LOAD95]], [[ATOMIC_EXIT94]] ], [ [[TMP153:%.*]], [[ATOMIC_CMP103:%.*]] ]
// CHK-CXX-NEXT:    [[TMP147:%.*]] = bitcast i64 [[TMP146]] to double
// CHK-CXX-NEXT:    store double [[TMP147]], double* [[ATMP96]], align 8
// CHK-CXX-NEXT:    [[TMP148:%.*]] = bitcast double* [[ATOMIC_TEMP101]] to i64*
// CHK-CXX-NEXT:    [[TMP149:%.*]] = bitcast double [[TMP140]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP149]], i64* [[TMP148]], align 8
// CHK-CXX-NEXT:    [[TMP150:%.*]] = load i64, i64* [[TMP148]], align 8
// CHK-CXX-NEXT:    [[TMP151:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP152:%.*]] = cmpxchg i64* [[TMP151]], i64 [[TMP146]], i64 [[TMP150]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP153]] = extractvalue { i64, i1 } [[TMP152]], 0
// CHK-CXX-NEXT:    [[TMP154:%.*]] = extractvalue { i64, i1 } [[TMP152]], 1
// CHK-CXX-NEXT:    br i1 [[TMP154]], label [[ATOMIC_UPD_EXIT102:%.*]], label [[ATOMIC_CMP103]]
// CHK-CXX:       atomic_upd_exit102:
// CHK-CXX-NEXT:    store double [[TMP140]], double* [[ATMP96]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT106]]
// CHK-CXX:       atomic_cmp103:
// CHK-CXX-NEXT:    [[TMP155:%.*]] = bitcast i64 [[TMP153]] to double
// CHK-CXX-NEXT:    [[TMP156:%.*]] = bitcast double [[TMP155]] to i64
// CHK-CXX-NEXT:    [[TMP157:%.*]] = bitcast double [[TMP141]] to i64
// CHK-CXX-NEXT:    [[CMP104:%.*]] = icmp eq i64 [[TMP156]], [[TMP157]]
// CHK-CXX-NEXT:    [[FROMBOOL105:%.*]] = zext i1 [[CMP104]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL105]], i8* [[ATMP98]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP104]], label [[ATOMIC_CONT100]], label [[ATOMIC_EXIT106]]
// CHK-CXX:       atomic_exit106:
// CHK-CXX-NEXT:    [[TMP158:%.*]] = load double, double* [[ATMP96]], align 8
// CHK-CXX-NEXT:    [[TMP159:%.*]] = load i8, i8* [[ATMP98]], align 1
// CHK-CXX-NEXT:    store double [[TMP158]], double* [[V]], align 8
// CHK-CXX-NEXT:    [[TMP160:%.*]] = load double, double* [[D]], align 8
// CHK-CXX-NEXT:    [[TMP161:%.*]] = load double, double* [[E]], align 8
// CHK-CXX-NEXT:    [[TMP162:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD107:%.*]] = load atomic i64, i64* [[TMP162]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP163:%.*]] = bitcast i64 [[ATOMIC_LOAD107]] to double
// CHK-CXX-NEXT:    store double [[TMP163]], double* [[ATMP108]], align 8
// CHK-CXX-NEXT:    [[TMP164:%.*]] = bitcast double [[TMP163]] to i64
// CHK-CXX-NEXT:    [[TMP165:%.*]] = bitcast double [[TMP161]] to i64
// CHK-CXX-NEXT:    [[CMP109:%.*]] = icmp eq i64 [[TMP164]], [[TMP165]]
// CHK-CXX-NEXT:    [[FROMBOOL111:%.*]] = zext i1 [[CMP109]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL111]], i8* [[ATMP110]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP109]], label [[ATOMIC_CONT112:%.*]], label [[ATOMIC_EXIT118:%.*]]
// CHK-CXX:       atomic_cont112:
// CHK-CXX-NEXT:    [[TMP166:%.*]] = phi i64 [ [[ATOMIC_LOAD107]], [[ATOMIC_EXIT106]] ], [ [[TMP173:%.*]], [[ATOMIC_CMP115:%.*]] ]
// CHK-CXX-NEXT:    [[TMP167:%.*]] = bitcast i64 [[TMP166]] to double
// CHK-CXX-NEXT:    store double [[TMP167]], double* [[ATMP108]], align 8
// CHK-CXX-NEXT:    [[TMP168:%.*]] = bitcast double* [[ATOMIC_TEMP113]] to i64*
// CHK-CXX-NEXT:    [[TMP169:%.*]] = bitcast double [[TMP160]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP169]], i64* [[TMP168]], align 8
// CHK-CXX-NEXT:    [[TMP170:%.*]] = load i64, i64* [[TMP168]], align 8
// CHK-CXX-NEXT:    [[TMP171:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP172:%.*]] = cmpxchg i64* [[TMP171]], i64 [[TMP166]], i64 [[TMP170]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP173]] = extractvalue { i64, i1 } [[TMP172]], 0
// CHK-CXX-NEXT:    [[TMP174:%.*]] = extractvalue { i64, i1 } [[TMP172]], 1
// CHK-CXX-NEXT:    br i1 [[TMP174]], label [[ATOMIC_UPD_EXIT114:%.*]], label [[ATOMIC_CMP115]]
// CHK-CXX:       atomic_upd_exit114:
// CHK-CXX-NEXT:    store double [[TMP160]], double* [[ATMP108]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT118]]
// CHK-CXX:       atomic_cmp115:
// CHK-CXX-NEXT:    [[TMP175:%.*]] = bitcast i64 [[TMP173]] to double
// CHK-CXX-NEXT:    [[TMP176:%.*]] = bitcast double [[TMP175]] to i64
// CHK-CXX-NEXT:    [[TMP177:%.*]] = bitcast double [[TMP161]] to i64
// CHK-CXX-NEXT:    [[CMP116:%.*]] = icmp eq i64 [[TMP176]], [[TMP177]]
// CHK-CXX-NEXT:    [[FROMBOOL117:%.*]] = zext i1 [[CMP116]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL117]], i8* [[ATMP110]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP116]], label [[ATOMIC_CONT112]], label [[ATOMIC_EXIT118]]
// CHK-CXX:       atomic_exit118:
// CHK-CXX-NEXT:    [[TMP178:%.*]] = load double, double* [[ATMP108]], align 8
// CHK-CXX-NEXT:    [[TMP179:%.*]] = load i8, i8* [[ATMP110]], align 1
// CHK-CXX-NEXT:    [[TMP180:%.*]] = trunc i8 [[TMP179]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP180]], label [[ATOMIC_CAPTURE_CONT:%.*]], label [[ATOMIC_CAPTURE:%.*]]
// CHK-CXX:       atomic_capture:
// CHK-CXX-NEXT:    store double [[TMP178]], double* [[V]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT]]
// CHK-CXX:       atomic_capture_cont:
// CHK-CXX-NEXT:    [[TMP181:%.*]] = load double, double* [[D]], align 8
// CHK-CXX-NEXT:    [[TMP182:%.*]] = load double, double* [[E]], align 8
// CHK-CXX-NEXT:    [[TMP183:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD119:%.*]] = load atomic i64, i64* [[TMP183]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP184:%.*]] = bitcast i64 [[ATOMIC_LOAD119]] to double
// CHK-CXX-NEXT:    store double [[TMP184]], double* [[ATMP120]], align 8
// CHK-CXX-NEXT:    [[TMP185:%.*]] = bitcast double [[TMP184]] to i64
// CHK-CXX-NEXT:    [[TMP186:%.*]] = bitcast double [[TMP182]] to i64
// CHK-CXX-NEXT:    [[CMP121:%.*]] = icmp eq i64 [[TMP185]], [[TMP186]]
// CHK-CXX-NEXT:    [[FROMBOOL123:%.*]] = zext i1 [[CMP121]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL123]], i8* [[ATMP122]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP121]], label [[ATOMIC_CONT124:%.*]], label [[ATOMIC_EXIT129:%.*]]
// CHK-CXX:       atomic_cont124:
// CHK-CXX-NEXT:    [[TMP187:%.*]] = phi i64 [ [[ATOMIC_LOAD119]], [[ATOMIC_CAPTURE_CONT]] ], [ [[TMP194:%.*]], [[ATOMIC_CMP126:%.*]] ]
// CHK-CXX-NEXT:    [[TMP188:%.*]] = bitcast i64 [[TMP187]] to double
// CHK-CXX-NEXT:    store double [[TMP188]], double* [[ATMP120]], align 8
// CHK-CXX-NEXT:    [[TMP189:%.*]] = bitcast double* [[ATOMIC_TEMP125]] to i64*
// CHK-CXX-NEXT:    [[TMP190:%.*]] = bitcast double [[TMP181]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP190]], i64* [[TMP189]], align 8
// CHK-CXX-NEXT:    [[TMP191:%.*]] = load i64, i64* [[TMP189]], align 8
// CHK-CXX-NEXT:    [[TMP192:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP193:%.*]] = cmpxchg i64* [[TMP192]], i64 [[TMP187]], i64 [[TMP191]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP194]] = extractvalue { i64, i1 } [[TMP193]], 0
// CHK-CXX-NEXT:    [[TMP195:%.*]] = extractvalue { i64, i1 } [[TMP193]], 1
// CHK-CXX-NEXT:    br i1 [[TMP195]], label [[ATOMIC_EXIT129]], label [[ATOMIC_CMP126]]
// CHK-CXX:       atomic_cmp126:
// CHK-CXX-NEXT:    [[TMP196:%.*]] = bitcast i64 [[TMP194]] to double
// CHK-CXX-NEXT:    [[TMP197:%.*]] = bitcast double [[TMP196]] to i64
// CHK-CXX-NEXT:    [[TMP198:%.*]] = bitcast double [[TMP182]] to i64
// CHK-CXX-NEXT:    [[CMP127:%.*]] = icmp eq i64 [[TMP197]], [[TMP198]]
// CHK-CXX-NEXT:    [[FROMBOOL128:%.*]] = zext i1 [[CMP127]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL128]], i8* [[ATMP122]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP127]], label [[ATOMIC_CONT124]], label [[ATOMIC_EXIT129]]
// CHK-CXX:       atomic_exit129:
// CHK-CXX-NEXT:    [[TMP199:%.*]] = load double, double* [[ATMP120]], align 8
// CHK-CXX-NEXT:    [[TMP200:%.*]] = load i8, i8* [[ATMP122]], align 1
// CHK-CXX-NEXT:    store i8 [[TMP200]], i8* [[R]], align 1
// CHK-CXX-NEXT:    [[TMP201:%.*]] = load double, double* [[D]], align 8
// CHK-CXX-NEXT:    [[TMP202:%.*]] = load double, double* [[E]], align 8
// CHK-CXX-NEXT:    [[TMP203:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD130:%.*]] = load atomic i64, i64* [[TMP203]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP204:%.*]] = bitcast i64 [[ATOMIC_LOAD130]] to double
// CHK-CXX-NEXT:    store double [[TMP204]], double* [[ATMP131]], align 8
// CHK-CXX-NEXT:    [[TMP205:%.*]] = bitcast double [[TMP204]] to i64
// CHK-CXX-NEXT:    [[TMP206:%.*]] = bitcast double [[TMP202]] to i64
// CHK-CXX-NEXT:    [[CMP132:%.*]] = icmp eq i64 [[TMP205]], [[TMP206]]
// CHK-CXX-NEXT:    [[FROMBOOL134:%.*]] = zext i1 [[CMP132]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL134]], i8* [[ATMP133]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP132]], label [[ATOMIC_CONT135:%.*]], label [[ATOMIC_EXIT140:%.*]]
// CHK-CXX:       atomic_cont135:
// CHK-CXX-NEXT:    [[TMP207:%.*]] = phi i64 [ [[ATOMIC_LOAD130]], [[ATOMIC_EXIT129]] ], [ [[TMP214:%.*]], [[ATOMIC_CMP137:%.*]] ]
// CHK-CXX-NEXT:    [[TMP208:%.*]] = bitcast i64 [[TMP207]] to double
// CHK-CXX-NEXT:    store double [[TMP208]], double* [[ATMP131]], align 8
// CHK-CXX-NEXT:    [[TMP209:%.*]] = bitcast double* [[ATOMIC_TEMP136]] to i64*
// CHK-CXX-NEXT:    [[TMP210:%.*]] = bitcast double [[TMP201]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP210]], i64* [[TMP209]], align 8
// CHK-CXX-NEXT:    [[TMP211:%.*]] = load i64, i64* [[TMP209]], align 8
// CHK-CXX-NEXT:    [[TMP212:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP213:%.*]] = cmpxchg i64* [[TMP212]], i64 [[TMP207]], i64 [[TMP211]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP214]] = extractvalue { i64, i1 } [[TMP213]], 0
// CHK-CXX-NEXT:    [[TMP215:%.*]] = extractvalue { i64, i1 } [[TMP213]], 1
// CHK-CXX-NEXT:    br i1 [[TMP215]], label [[ATOMIC_EXIT140]], label [[ATOMIC_CMP137]]
// CHK-CXX:       atomic_cmp137:
// CHK-CXX-NEXT:    [[TMP216:%.*]] = bitcast i64 [[TMP214]] to double
// CHK-CXX-NEXT:    [[TMP217:%.*]] = bitcast double [[TMP216]] to i64
// CHK-CXX-NEXT:    [[TMP218:%.*]] = bitcast double [[TMP202]] to i64
// CHK-CXX-NEXT:    [[CMP138:%.*]] = icmp eq i64 [[TMP217]], [[TMP218]]
// CHK-CXX-NEXT:    [[FROMBOOL139:%.*]] = zext i1 [[CMP138]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL139]], i8* [[ATMP133]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP138]], label [[ATOMIC_CONT135]], label [[ATOMIC_EXIT140]]
// CHK-CXX:       atomic_exit140:
// CHK-CXX-NEXT:    [[TMP219:%.*]] = load double, double* [[ATMP131]], align 8
// CHK-CXX-NEXT:    [[TMP220:%.*]] = load i8, i8* [[ATMP133]], align 1
// CHK-CXX-NEXT:    store i8 [[TMP220]], i8* [[R]], align 1
// CHK-CXX-NEXT:    [[TMP221:%.*]] = trunc i8 [[TMP220]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP221]], label [[ATOMIC_CAPTURE_CONT142:%.*]], label [[ATOMIC_CAPTURE141:%.*]]
// CHK-CXX:       atomic_capture141:
// CHK-CXX-NEXT:    store double [[TMP219]], double* [[V]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT142]]
// CHK-CXX:       atomic_capture_cont142:
// CHK-CXX-NEXT:    ret void
//
void test_double() {
    // One of each form with 'double'.
    double x, expr, d, e, v;
    char r;

    #pragma omp atomic compare capture
    { v = x; if (expr < x) { x = expr; } } // MIN

    #pragma omp atomic compare capture
    { if (expr < x) { x = expr; } v =x ;} // MIN

    #pragma omp atomic compare capture
    { v = x; if (expr > x) { x = expr; } } // MAX

    #pragma omp atomic compare capture
    { if (expr > x) { x = expr; } v = x; } // MAX

    #pragma omp atomic compare capture
    { v = x; if (x < expr) { x = expr; } } // MAX

    #pragma omp atomic compare capture
    { if (x < expr) { x = expr; } v = x; } // MAX

    #pragma omp atomic compare capture
    { v = x; if (x > expr) { x = expr; } } // MIN

    #pragma omp atomic compare capture
    { if (x > expr) { x = expr; } v = x; } // MIN

    #pragma omp atomic compare capture
    { v = x; if (x == e) { x = d; } }

    #pragma omp atomic compare capture
    { if (x == e) { x = d; } v = x; }

    #pragma omp atomic compare capture
    if (x == e) { x = d; } else { v = x; }

    #pragma omp atomic compare capture
    { r = x == e; if(r) { x = d; } }

    #pragma omp atomic compare capture
    { r = x == e; if(r) { x = d; } else { v = x; } }
}

// CHK-C-LABEL: @test_bool(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[X:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[D:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[E:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[V:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[R:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[TMP:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATMP7:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATMP9:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP12:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATMP21:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATMP23:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP26:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATMP36:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATMP38:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP41:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATMP50:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATMP52:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP55:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[TMP0:%.*]] = load i8, i8* [[EXPR]], align 1
// CHK-C-NEXT:    [[TOBOOL:%.*]] = trunc i8 [[TMP0]] to i1
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i8, i8* [[X]] monotonic, align 1
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD]], i8* [[TMP]], align 1
// CHK-C-NEXT:    [[TMP1:%.*]] = trunc i8 [[ATOMIC_LOAD]] to i1
// CHK-C-NEXT:    [[CMP:%.*]] = icmp ult i1 [[TMP1]], [[TOBOOL]]
// CHK-C-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL]], i8* [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP2:%.*]] = phi i8 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP5:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    store i8 [[TMP2]], i8* [[TMP]], align 1
// CHK-C-NEXT:    [[FROMBOOL2:%.*]] = zext i1 [[TOBOOL]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL2]], i8* [[ATOMIC_TEMP]], align 1
// CHK-C-NEXT:    [[TMP3:%.*]] = load i8, i8* [[ATOMIC_TEMP]], align 1
// CHK-C-NEXT:    [[TMP4:%.*]] = cmpxchg i8* [[X]], i8 [[TMP2]], i8 [[TMP3]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP5]] = extractvalue { i8, i1 } [[TMP4]], 0
// CHK-C-NEXT:    [[TMP6:%.*]] = extractvalue { i8, i1 } [[TMP4]], 1
// CHK-C-NEXT:    br i1 [[TMP6]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    [[TMP7:%.*]] = trunc i8 [[TMP5]] to i1
// CHK-C-NEXT:    [[CMP3:%.*]] = icmp ult i1 [[TMP7]], [[TOBOOL]]
// CHK-C-NEXT:    [[FROMBOOL4:%.*]] = zext i1 [[CMP3]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL4]], i8* [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP3]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP8:%.*]] = load i8, i8* [[TMP]], align 1
// CHK-C-NEXT:    [[TMP9:%.*]] = load i8, i8* [[ATMP1]], align 1
// CHK-C-NEXT:    store i8 [[TMP8]], i8* [[V]], align 1
// CHK-C-NEXT:    [[TMP10:%.*]] = load i8, i8* [[EXPR]], align 1
// CHK-C-NEXT:    [[TOBOOL5:%.*]] = trunc i8 [[TMP10]] to i1
// CHK-C-NEXT:    [[ATOMIC_LOAD6:%.*]] = load atomic i8, i8* [[X]] monotonic, align 1
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD6]], i8* [[ATMP7]], align 1
// CHK-C-NEXT:    [[TMP11:%.*]] = trunc i8 [[ATOMIC_LOAD6]] to i1
// CHK-C-NEXT:    [[CMP8:%.*]] = icmp ult i1 [[TMP11]], [[TOBOOL5]]
// CHK-C-NEXT:    [[FROMBOOL10:%.*]] = zext i1 [[CMP8]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL10]], i8* [[ATMP9]], align 1
// CHK-C-NEXT:    br i1 [[CMP8]], label [[ATOMIC_CONT11:%.*]], label [[ATOMIC_EXIT17:%.*]]
// CHK-C:       atomic_cont11:
// CHK-C-NEXT:    [[TMP12:%.*]] = phi i8 [ [[ATOMIC_LOAD6]], [[ATOMIC_EXIT]] ], [ [[TMP15:%.*]], [[ATOMIC_CMP14:%.*]] ]
// CHK-C-NEXT:    store i8 [[TMP12]], i8* [[ATMP7]], align 1
// CHK-C-NEXT:    [[FROMBOOL13:%.*]] = zext i1 [[TOBOOL5]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL13]], i8* [[ATOMIC_TEMP12]], align 1
// CHK-C-NEXT:    [[TMP13:%.*]] = load i8, i8* [[ATOMIC_TEMP12]], align 1
// CHK-C-NEXT:    [[TMP14:%.*]] = cmpxchg i8* [[X]], i8 [[TMP12]], i8 [[TMP13]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP15]] = extractvalue { i8, i1 } [[TMP14]], 0
// CHK-C-NEXT:    [[TMP16:%.*]] = extractvalue { i8, i1 } [[TMP14]], 1
// CHK-C-NEXT:    br i1 [[TMP16]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP14]]
// CHK-C:       atomic_upd_exit:
// CHK-C-NEXT:    [[TMP17:%.*]] = zext i1 [[TOBOOL5]] to i8
// CHK-C-NEXT:    store i8 [[TMP17]], i8* [[ATMP7]], align 1
// CHK-C-NEXT:    br label [[ATOMIC_EXIT17]]
// CHK-C:       atomic_cmp14:
// CHK-C-NEXT:    [[TMP18:%.*]] = trunc i8 [[TMP15]] to i1
// CHK-C-NEXT:    [[CMP15:%.*]] = icmp ult i1 [[TMP18]], [[TOBOOL5]]
// CHK-C-NEXT:    [[FROMBOOL16:%.*]] = zext i1 [[CMP15]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL16]], i8* [[ATMP9]], align 1
// CHK-C-NEXT:    br i1 [[CMP15]], label [[ATOMIC_CONT11]], label [[ATOMIC_EXIT17]]
// CHK-C:       atomic_exit17:
// CHK-C-NEXT:    [[TMP19:%.*]] = load i8, i8* [[ATMP7]], align 1
// CHK-C-NEXT:    [[TMP20:%.*]] = load i8, i8* [[ATMP9]], align 1
// CHK-C-NEXT:    store i8 [[TMP19]], i8* [[V]], align 1
// CHK-C-NEXT:    [[TMP21:%.*]] = load i8, i8* [[D]], align 1
// CHK-C-NEXT:    [[TOBOOL18:%.*]] = trunc i8 [[TMP21]] to i1
// CHK-C-NEXT:    [[TMP22:%.*]] = load i8, i8* [[E]], align 1
// CHK-C-NEXT:    [[TOBOOL19:%.*]] = trunc i8 [[TMP22]] to i1
// CHK-C-NEXT:    [[ATOMIC_LOAD20:%.*]] = load atomic i8, i8* [[X]] monotonic, align 1
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD20]], i8* [[ATMP21]], align 1
// CHK-C-NEXT:    [[TMP23:%.*]] = trunc i8 [[ATOMIC_LOAD20]] to i1
// CHK-C-NEXT:    [[CMP22:%.*]] = icmp eq i1 [[TMP23]], [[TOBOOL19]]
// CHK-C-NEXT:    [[FROMBOOL24:%.*]] = zext i1 [[CMP22]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL24]], i8* [[ATMP23]], align 1
// CHK-C-NEXT:    br i1 [[CMP22]], label [[ATOMIC_CONT25:%.*]], label [[ATOMIC_EXIT32:%.*]]
// CHK-C:       atomic_cont25:
// CHK-C-NEXT:    [[TMP24:%.*]] = phi i8 [ [[ATOMIC_LOAD20]], [[ATOMIC_EXIT17]] ], [ [[TMP27:%.*]], [[ATOMIC_CMP29:%.*]] ]
// CHK-C-NEXT:    store i8 [[TMP24]], i8* [[ATMP21]], align 1
// CHK-C-NEXT:    [[FROMBOOL27:%.*]] = zext i1 [[TOBOOL18]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL27]], i8* [[ATOMIC_TEMP26]], align 1
// CHK-C-NEXT:    [[TMP25:%.*]] = load i8, i8* [[ATOMIC_TEMP26]], align 1
// CHK-C-NEXT:    [[TMP26:%.*]] = cmpxchg i8* [[X]], i8 [[TMP24]], i8 [[TMP25]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP27]] = extractvalue { i8, i1 } [[TMP26]], 0
// CHK-C-NEXT:    [[TMP28:%.*]] = extractvalue { i8, i1 } [[TMP26]], 1
// CHK-C-NEXT:    br i1 [[TMP28]], label [[ATOMIC_UPD_EXIT28:%.*]], label [[ATOMIC_CMP29]]
// CHK-C:       atomic_upd_exit28:
// CHK-C-NEXT:    [[TMP29:%.*]] = zext i1 [[TOBOOL18]] to i8
// CHK-C-NEXT:    store i8 [[TMP29]], i8* [[ATMP21]], align 1
// CHK-C-NEXT:    br label [[ATOMIC_EXIT32]]
// CHK-C:       atomic_cmp29:
// CHK-C-NEXT:    [[TMP30:%.*]] = trunc i8 [[TMP27]] to i1
// CHK-C-NEXT:    [[CMP30:%.*]] = icmp eq i1 [[TMP30]], [[TOBOOL19]]
// CHK-C-NEXT:    [[FROMBOOL31:%.*]] = zext i1 [[CMP30]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL31]], i8* [[ATMP23]], align 1
// CHK-C-NEXT:    br i1 [[CMP30]], label [[ATOMIC_CONT25]], label [[ATOMIC_EXIT32]]
// CHK-C:       atomic_exit32:
// CHK-C-NEXT:    [[TMP31:%.*]] = load i8, i8* [[ATMP21]], align 1
// CHK-C-NEXT:    [[TMP32:%.*]] = load i8, i8* [[ATMP23]], align 1
// CHK-C-NEXT:    [[TMP33:%.*]] = trunc i8 [[TMP32]] to i1
// CHK-C-NEXT:    br i1 [[TMP33]], label [[ATOMIC_CAPTURE_CONT:%.*]], label [[ATOMIC_CAPTURE:%.*]]
// CHK-C:       atomic_capture:
// CHK-C-NEXT:    store i8 [[TMP31]], i8* [[V]], align 1
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT]]
// CHK-C:       atomic_capture_cont:
// CHK-C-NEXT:    [[TMP34:%.*]] = load i8, i8* [[D]], align 1
// CHK-C-NEXT:    [[TOBOOL33:%.*]] = trunc i8 [[TMP34]] to i1
// CHK-C-NEXT:    [[TMP35:%.*]] = load i8, i8* [[E]], align 1
// CHK-C-NEXT:    [[TOBOOL34:%.*]] = trunc i8 [[TMP35]] to i1
// CHK-C-NEXT:    [[ATOMIC_LOAD35:%.*]] = load atomic i8, i8* [[X]] monotonic, align 1
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD35]], i8* [[ATMP36]], align 1
// CHK-C-NEXT:    [[TMP36:%.*]] = trunc i8 [[ATOMIC_LOAD35]] to i1
// CHK-C-NEXT:    [[CMP37:%.*]] = icmp eq i1 [[TMP36]], [[TOBOOL34]]
// CHK-C-NEXT:    [[FROMBOOL39:%.*]] = zext i1 [[CMP37]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL39]], i8* [[ATMP38]], align 1
// CHK-C-NEXT:    br i1 [[CMP37]], label [[ATOMIC_CONT40:%.*]], label [[ATOMIC_EXIT46:%.*]]
// CHK-C:       atomic_cont40:
// CHK-C-NEXT:    [[TMP37:%.*]] = phi i8 [ [[ATOMIC_LOAD35]], [[ATOMIC_CAPTURE_CONT]] ], [ [[TMP40:%.*]], [[ATOMIC_CMP43:%.*]] ]
// CHK-C-NEXT:    store i8 [[TMP37]], i8* [[ATMP36]], align 1
// CHK-C-NEXT:    [[FROMBOOL42:%.*]] = zext i1 [[TOBOOL33]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL42]], i8* [[ATOMIC_TEMP41]], align 1
// CHK-C-NEXT:    [[TMP38:%.*]] = load i8, i8* [[ATOMIC_TEMP41]], align 1
// CHK-C-NEXT:    [[TMP39:%.*]] = cmpxchg i8* [[X]], i8 [[TMP37]], i8 [[TMP38]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP40]] = extractvalue { i8, i1 } [[TMP39]], 0
// CHK-C-NEXT:    [[TMP41:%.*]] = extractvalue { i8, i1 } [[TMP39]], 1
// CHK-C-NEXT:    br i1 [[TMP41]], label [[ATOMIC_EXIT46]], label [[ATOMIC_CMP43]]
// CHK-C:       atomic_cmp43:
// CHK-C-NEXT:    [[TMP42:%.*]] = trunc i8 [[TMP40]] to i1
// CHK-C-NEXT:    [[CMP44:%.*]] = icmp eq i1 [[TMP42]], [[TOBOOL34]]
// CHK-C-NEXT:    [[FROMBOOL45:%.*]] = zext i1 [[CMP44]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL45]], i8* [[ATMP38]], align 1
// CHK-C-NEXT:    br i1 [[CMP44]], label [[ATOMIC_CONT40]], label [[ATOMIC_EXIT46]]
// CHK-C:       atomic_exit46:
// CHK-C-NEXT:    [[TMP43:%.*]] = load i8, i8* [[ATMP36]], align 1
// CHK-C-NEXT:    [[TMP44:%.*]] = load i8, i8* [[ATMP38]], align 1
// CHK-C-NEXT:    store i8 [[TMP44]], i8* [[R]], align 1
// CHK-C-NEXT:    [[TMP45:%.*]] = load i8, i8* [[D]], align 1
// CHK-C-NEXT:    [[TOBOOL47:%.*]] = trunc i8 [[TMP45]] to i1
// CHK-C-NEXT:    [[TMP46:%.*]] = load i8, i8* [[E]], align 1
// CHK-C-NEXT:    [[TOBOOL48:%.*]] = trunc i8 [[TMP46]] to i1
// CHK-C-NEXT:    [[ATOMIC_LOAD49:%.*]] = load atomic i8, i8* [[X]] monotonic, align 1
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD49]], i8* [[ATMP50]], align 1
// CHK-C-NEXT:    [[TMP47:%.*]] = trunc i8 [[ATOMIC_LOAD49]] to i1
// CHK-C-NEXT:    [[CMP51:%.*]] = icmp eq i1 [[TMP47]], [[TOBOOL48]]
// CHK-C-NEXT:    [[FROMBOOL53:%.*]] = zext i1 [[CMP51]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL53]], i8* [[ATMP52]], align 1
// CHK-C-NEXT:    br i1 [[CMP51]], label [[ATOMIC_CONT54:%.*]], label [[ATOMIC_EXIT60:%.*]]
// CHK-C:       atomic_cont54:
// CHK-C-NEXT:    [[TMP48:%.*]] = phi i8 [ [[ATOMIC_LOAD49]], [[ATOMIC_EXIT46]] ], [ [[TMP51:%.*]], [[ATOMIC_CMP57:%.*]] ]
// CHK-C-NEXT:    store i8 [[TMP48]], i8* [[ATMP50]], align 1
// CHK-C-NEXT:    [[FROMBOOL56:%.*]] = zext i1 [[TOBOOL47]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL56]], i8* [[ATOMIC_TEMP55]], align 1
// CHK-C-NEXT:    [[TMP49:%.*]] = load i8, i8* [[ATOMIC_TEMP55]], align 1
// CHK-C-NEXT:    [[TMP50:%.*]] = cmpxchg i8* [[X]], i8 [[TMP48]], i8 [[TMP49]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP51]] = extractvalue { i8, i1 } [[TMP50]], 0
// CHK-C-NEXT:    [[TMP52:%.*]] = extractvalue { i8, i1 } [[TMP50]], 1
// CHK-C-NEXT:    br i1 [[TMP52]], label [[ATOMIC_EXIT60]], label [[ATOMIC_CMP57]]
// CHK-C:       atomic_cmp57:
// CHK-C-NEXT:    [[TMP53:%.*]] = trunc i8 [[TMP51]] to i1
// CHK-C-NEXT:    [[CMP58:%.*]] = icmp eq i1 [[TMP53]], [[TOBOOL48]]
// CHK-C-NEXT:    [[FROMBOOL59:%.*]] = zext i1 [[CMP58]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL59]], i8* [[ATMP52]], align 1
// CHK-C-NEXT:    br i1 [[CMP58]], label [[ATOMIC_CONT54]], label [[ATOMIC_EXIT60]]
// CHK-C:       atomic_exit60:
// CHK-C-NEXT:    [[TMP54:%.*]] = load i8, i8* [[ATMP50]], align 1
// CHK-C-NEXT:    [[TMP55:%.*]] = load i8, i8* [[ATMP52]], align 1
// CHK-C-NEXT:    store i8 [[TMP55]], i8* [[R]], align 1
// CHK-C-NEXT:    [[TMP56:%.*]] = trunc i8 [[TMP55]] to i1
// CHK-C-NEXT:    br i1 [[TMP56]], label [[ATOMIC_CAPTURE_CONT62:%.*]], label [[ATOMIC_CAPTURE61:%.*]]
// CHK-C:       atomic_capture61:
// CHK-C-NEXT:    store i8 [[TMP54]], i8* [[V]], align 1
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT62]]
// CHK-C:       atomic_capture_cont62:
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z9test_boolv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[X:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[V:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[R:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATMP7:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATMP9:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP12:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATMP21:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATMP23:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP26:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATMP36:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATMP38:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP41:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATMP50:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATMP52:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP55:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i8, i8* [[EXPR]], align 1
// CHK-CXX-NEXT:    [[TOBOOL:%.*]] = trunc i8 [[TMP0]] to i1
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i8, i8* [[X]] monotonic, align 1
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD]], i8* [[TMP]], align 1
// CHK-CXX-NEXT:    [[TMP1:%.*]] = trunc i8 [[ATOMIC_LOAD]] to i1
// CHK-CXX-NEXT:    [[CMP:%.*]] = icmp ult i1 [[TMP1]], [[TOBOOL]]
// CHK-CXX-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL]], i8* [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP2:%.*]] = phi i8 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP5:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    store i8 [[TMP2]], i8* [[TMP]], align 1
// CHK-CXX-NEXT:    [[FROMBOOL2:%.*]] = zext i1 [[TOBOOL]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL2]], i8* [[ATOMIC_TEMP]], align 1
// CHK-CXX-NEXT:    [[TMP3:%.*]] = load i8, i8* [[ATOMIC_TEMP]], align 1
// CHK-CXX-NEXT:    [[TMP4:%.*]] = cmpxchg i8* [[X]], i8 [[TMP2]], i8 [[TMP3]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP5]] = extractvalue { i8, i1 } [[TMP4]], 0
// CHK-CXX-NEXT:    [[TMP6:%.*]] = extractvalue { i8, i1 } [[TMP4]], 1
// CHK-CXX-NEXT:    br i1 [[TMP6]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    [[TMP7:%.*]] = trunc i8 [[TMP5]] to i1
// CHK-CXX-NEXT:    [[CMP3:%.*]] = icmp ult i1 [[TMP7]], [[TOBOOL]]
// CHK-CXX-NEXT:    [[FROMBOOL4:%.*]] = zext i1 [[CMP3]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL4]], i8* [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP3]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP8:%.*]] = load i8, i8* [[TMP]], align 1
// CHK-CXX-NEXT:    [[TMP9:%.*]] = load i8, i8* [[ATMP1]], align 1
// CHK-CXX-NEXT:    store i8 [[TMP8]], i8* [[V]], align 1
// CHK-CXX-NEXT:    [[TMP10:%.*]] = load i8, i8* [[EXPR]], align 1
// CHK-CXX-NEXT:    [[TOBOOL5:%.*]] = trunc i8 [[TMP10]] to i1
// CHK-CXX-NEXT:    [[ATOMIC_LOAD6:%.*]] = load atomic i8, i8* [[X]] monotonic, align 1
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD6]], i8* [[ATMP7]], align 1
// CHK-CXX-NEXT:    [[TMP11:%.*]] = trunc i8 [[ATOMIC_LOAD6]] to i1
// CHK-CXX-NEXT:    [[CMP8:%.*]] = icmp ult i1 [[TMP11]], [[TOBOOL5]]
// CHK-CXX-NEXT:    [[FROMBOOL10:%.*]] = zext i1 [[CMP8]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL10]], i8* [[ATMP9]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP8]], label [[ATOMIC_CONT11:%.*]], label [[ATOMIC_EXIT17:%.*]]
// CHK-CXX:       atomic_cont11:
// CHK-CXX-NEXT:    [[TMP12:%.*]] = phi i8 [ [[ATOMIC_LOAD6]], [[ATOMIC_EXIT]] ], [ [[TMP15:%.*]], [[ATOMIC_CMP14:%.*]] ]
// CHK-CXX-NEXT:    store i8 [[TMP12]], i8* [[ATMP7]], align 1
// CHK-CXX-NEXT:    [[FROMBOOL13:%.*]] = zext i1 [[TOBOOL5]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL13]], i8* [[ATOMIC_TEMP12]], align 1
// CHK-CXX-NEXT:    [[TMP13:%.*]] = load i8, i8* [[ATOMIC_TEMP12]], align 1
// CHK-CXX-NEXT:    [[TMP14:%.*]] = cmpxchg i8* [[X]], i8 [[TMP12]], i8 [[TMP13]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP15]] = extractvalue { i8, i1 } [[TMP14]], 0
// CHK-CXX-NEXT:    [[TMP16:%.*]] = extractvalue { i8, i1 } [[TMP14]], 1
// CHK-CXX-NEXT:    br i1 [[TMP16]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP14]]
// CHK-CXX:       atomic_upd_exit:
// CHK-CXX-NEXT:    [[TMP17:%.*]] = zext i1 [[TOBOOL5]] to i8
// CHK-CXX-NEXT:    store i8 [[TMP17]], i8* [[ATMP7]], align 1
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT17]]
// CHK-CXX:       atomic_cmp14:
// CHK-CXX-NEXT:    [[TMP18:%.*]] = trunc i8 [[TMP15]] to i1
// CHK-CXX-NEXT:    [[CMP15:%.*]] = icmp ult i1 [[TMP18]], [[TOBOOL5]]
// CHK-CXX-NEXT:    [[FROMBOOL16:%.*]] = zext i1 [[CMP15]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL16]], i8* [[ATMP9]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP15]], label [[ATOMIC_CONT11]], label [[ATOMIC_EXIT17]]
// CHK-CXX:       atomic_exit17:
// CHK-CXX-NEXT:    [[TMP19:%.*]] = load i8, i8* [[ATMP7]], align 1
// CHK-CXX-NEXT:    [[TMP20:%.*]] = load i8, i8* [[ATMP9]], align 1
// CHK-CXX-NEXT:    store i8 [[TMP19]], i8* [[V]], align 1
// CHK-CXX-NEXT:    [[TMP21:%.*]] = load i8, i8* [[D]], align 1
// CHK-CXX-NEXT:    [[TOBOOL18:%.*]] = trunc i8 [[TMP21]] to i1
// CHK-CXX-NEXT:    [[TMP22:%.*]] = load i8, i8* [[E]], align 1
// CHK-CXX-NEXT:    [[TOBOOL19:%.*]] = trunc i8 [[TMP22]] to i1
// CHK-CXX-NEXT:    [[ATOMIC_LOAD20:%.*]] = load atomic i8, i8* [[X]] monotonic, align 1
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD20]], i8* [[ATMP21]], align 1
// CHK-CXX-NEXT:    [[TMP23:%.*]] = trunc i8 [[ATOMIC_LOAD20]] to i1
// CHK-CXX-NEXT:    [[CMP22:%.*]] = icmp eq i1 [[TMP23]], [[TOBOOL19]]
// CHK-CXX-NEXT:    [[FROMBOOL24:%.*]] = zext i1 [[CMP22]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL24]], i8* [[ATMP23]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP22]], label [[ATOMIC_CONT25:%.*]], label [[ATOMIC_EXIT32:%.*]]
// CHK-CXX:       atomic_cont25:
// CHK-CXX-NEXT:    [[TMP24:%.*]] = phi i8 [ [[ATOMIC_LOAD20]], [[ATOMIC_EXIT17]] ], [ [[TMP27:%.*]], [[ATOMIC_CMP29:%.*]] ]
// CHK-CXX-NEXT:    store i8 [[TMP24]], i8* [[ATMP21]], align 1
// CHK-CXX-NEXT:    [[FROMBOOL27:%.*]] = zext i1 [[TOBOOL18]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL27]], i8* [[ATOMIC_TEMP26]], align 1
// CHK-CXX-NEXT:    [[TMP25:%.*]] = load i8, i8* [[ATOMIC_TEMP26]], align 1
// CHK-CXX-NEXT:    [[TMP26:%.*]] = cmpxchg i8* [[X]], i8 [[TMP24]], i8 [[TMP25]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP27]] = extractvalue { i8, i1 } [[TMP26]], 0
// CHK-CXX-NEXT:    [[TMP28:%.*]] = extractvalue { i8, i1 } [[TMP26]], 1
// CHK-CXX-NEXT:    br i1 [[TMP28]], label [[ATOMIC_UPD_EXIT28:%.*]], label [[ATOMIC_CMP29]]
// CHK-CXX:       atomic_upd_exit28:
// CHK-CXX-NEXT:    [[TMP29:%.*]] = zext i1 [[TOBOOL18]] to i8
// CHK-CXX-NEXT:    store i8 [[TMP29]], i8* [[ATMP21]], align 1
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT32]]
// CHK-CXX:       atomic_cmp29:
// CHK-CXX-NEXT:    [[TMP30:%.*]] = trunc i8 [[TMP27]] to i1
// CHK-CXX-NEXT:    [[CMP30:%.*]] = icmp eq i1 [[TMP30]], [[TOBOOL19]]
// CHK-CXX-NEXT:    [[FROMBOOL31:%.*]] = zext i1 [[CMP30]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL31]], i8* [[ATMP23]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP30]], label [[ATOMIC_CONT25]], label [[ATOMIC_EXIT32]]
// CHK-CXX:       atomic_exit32:
// CHK-CXX-NEXT:    [[TMP31:%.*]] = load i8, i8* [[ATMP21]], align 1
// CHK-CXX-NEXT:    [[TMP32:%.*]] = load i8, i8* [[ATMP23]], align 1
// CHK-CXX-NEXT:    [[TMP33:%.*]] = trunc i8 [[TMP32]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP33]], label [[ATOMIC_CAPTURE_CONT:%.*]], label [[ATOMIC_CAPTURE:%.*]]
// CHK-CXX:       atomic_capture:
// CHK-CXX-NEXT:    store i8 [[TMP31]], i8* [[V]], align 1
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT]]
// CHK-CXX:       atomic_capture_cont:
// CHK-CXX-NEXT:    [[TMP34:%.*]] = load i8, i8* [[D]], align 1
// CHK-CXX-NEXT:    [[TOBOOL33:%.*]] = trunc i8 [[TMP34]] to i1
// CHK-CXX-NEXT:    [[TMP35:%.*]] = load i8, i8* [[E]], align 1
// CHK-CXX-NEXT:    [[TOBOOL34:%.*]] = trunc i8 [[TMP35]] to i1
// CHK-CXX-NEXT:    [[ATOMIC_LOAD35:%.*]] = load atomic i8, i8* [[X]] monotonic, align 1
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD35]], i8* [[ATMP36]], align 1
// CHK-CXX-NEXT:    [[TMP36:%.*]] = trunc i8 [[ATOMIC_LOAD35]] to i1
// CHK-CXX-NEXT:    [[CMP37:%.*]] = icmp eq i1 [[TMP36]], [[TOBOOL34]]
// CHK-CXX-NEXT:    [[FROMBOOL39:%.*]] = zext i1 [[CMP37]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL39]], i8* [[ATMP38]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP37]], label [[ATOMIC_CONT40:%.*]], label [[ATOMIC_EXIT46:%.*]]
// CHK-CXX:       atomic_cont40:
// CHK-CXX-NEXT:    [[TMP37:%.*]] = phi i8 [ [[ATOMIC_LOAD35]], [[ATOMIC_CAPTURE_CONT]] ], [ [[TMP40:%.*]], [[ATOMIC_CMP43:%.*]] ]
// CHK-CXX-NEXT:    store i8 [[TMP37]], i8* [[ATMP36]], align 1
// CHK-CXX-NEXT:    [[FROMBOOL42:%.*]] = zext i1 [[TOBOOL33]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL42]], i8* [[ATOMIC_TEMP41]], align 1
// CHK-CXX-NEXT:    [[TMP38:%.*]] = load i8, i8* [[ATOMIC_TEMP41]], align 1
// CHK-CXX-NEXT:    [[TMP39:%.*]] = cmpxchg i8* [[X]], i8 [[TMP37]], i8 [[TMP38]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP40]] = extractvalue { i8, i1 } [[TMP39]], 0
// CHK-CXX-NEXT:    [[TMP41:%.*]] = extractvalue { i8, i1 } [[TMP39]], 1
// CHK-CXX-NEXT:    br i1 [[TMP41]], label [[ATOMIC_EXIT46]], label [[ATOMIC_CMP43]]
// CHK-CXX:       atomic_cmp43:
// CHK-CXX-NEXT:    [[TMP42:%.*]] = trunc i8 [[TMP40]] to i1
// CHK-CXX-NEXT:    [[CMP44:%.*]] = icmp eq i1 [[TMP42]], [[TOBOOL34]]
// CHK-CXX-NEXT:    [[FROMBOOL45:%.*]] = zext i1 [[CMP44]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL45]], i8* [[ATMP38]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP44]], label [[ATOMIC_CONT40]], label [[ATOMIC_EXIT46]]
// CHK-CXX:       atomic_exit46:
// CHK-CXX-NEXT:    [[TMP43:%.*]] = load i8, i8* [[ATMP36]], align 1
// CHK-CXX-NEXT:    [[TMP44:%.*]] = load i8, i8* [[ATMP38]], align 1
// CHK-CXX-NEXT:    store i8 [[TMP44]], i8* [[R]], align 1
// CHK-CXX-NEXT:    [[TMP45:%.*]] = load i8, i8* [[D]], align 1
// CHK-CXX-NEXT:    [[TOBOOL47:%.*]] = trunc i8 [[TMP45]] to i1
// CHK-CXX-NEXT:    [[TMP46:%.*]] = load i8, i8* [[E]], align 1
// CHK-CXX-NEXT:    [[TOBOOL48:%.*]] = trunc i8 [[TMP46]] to i1
// CHK-CXX-NEXT:    [[ATOMIC_LOAD49:%.*]] = load atomic i8, i8* [[X]] monotonic, align 1
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD49]], i8* [[ATMP50]], align 1
// CHK-CXX-NEXT:    [[TMP47:%.*]] = trunc i8 [[ATOMIC_LOAD49]] to i1
// CHK-CXX-NEXT:    [[CMP51:%.*]] = icmp eq i1 [[TMP47]], [[TOBOOL48]]
// CHK-CXX-NEXT:    [[FROMBOOL53:%.*]] = zext i1 [[CMP51]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL53]], i8* [[ATMP52]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP51]], label [[ATOMIC_CONT54:%.*]], label [[ATOMIC_EXIT60:%.*]]
// CHK-CXX:       atomic_cont54:
// CHK-CXX-NEXT:    [[TMP48:%.*]] = phi i8 [ [[ATOMIC_LOAD49]], [[ATOMIC_EXIT46]] ], [ [[TMP51:%.*]], [[ATOMIC_CMP57:%.*]] ]
// CHK-CXX-NEXT:    store i8 [[TMP48]], i8* [[ATMP50]], align 1
// CHK-CXX-NEXT:    [[FROMBOOL56:%.*]] = zext i1 [[TOBOOL47]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL56]], i8* [[ATOMIC_TEMP55]], align 1
// CHK-CXX-NEXT:    [[TMP49:%.*]] = load i8, i8* [[ATOMIC_TEMP55]], align 1
// CHK-CXX-NEXT:    [[TMP50:%.*]] = cmpxchg i8* [[X]], i8 [[TMP48]], i8 [[TMP49]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP51]] = extractvalue { i8, i1 } [[TMP50]], 0
// CHK-CXX-NEXT:    [[TMP52:%.*]] = extractvalue { i8, i1 } [[TMP50]], 1
// CHK-CXX-NEXT:    br i1 [[TMP52]], label [[ATOMIC_EXIT60]], label [[ATOMIC_CMP57]]
// CHK-CXX:       atomic_cmp57:
// CHK-CXX-NEXT:    [[TMP53:%.*]] = trunc i8 [[TMP51]] to i1
// CHK-CXX-NEXT:    [[CMP58:%.*]] = icmp eq i1 [[TMP53]], [[TOBOOL48]]
// CHK-CXX-NEXT:    [[FROMBOOL59:%.*]] = zext i1 [[CMP58]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL59]], i8* [[ATMP52]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP58]], label [[ATOMIC_CONT54]], label [[ATOMIC_EXIT60]]
// CHK-CXX:       atomic_exit60:
// CHK-CXX-NEXT:    [[TMP54:%.*]] = load i8, i8* [[ATMP50]], align 1
// CHK-CXX-NEXT:    [[TMP55:%.*]] = load i8, i8* [[ATMP52]], align 1
// CHK-CXX-NEXT:    store i8 [[TMP55]], i8* [[R]], align 1
// CHK-CXX-NEXT:    [[TMP56:%.*]] = trunc i8 [[TMP55]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP56]], label [[ATOMIC_CAPTURE_CONT62:%.*]], label [[ATOMIC_CAPTURE61:%.*]]
// CHK-CXX:       atomic_capture61:
// CHK-CXX-NEXT:    store i8 [[TMP54]], i8* [[V]], align 1
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT62]]
// CHK-CXX:       atomic_capture_cont62:
// CHK-CXX-NEXT:    ret void
//
void test_bool() {
#ifdef __cplusplus
  bool x, expr, d, e, v, r;
#else
  _Bool x, expr, d, e, v, r;
#endif

  #pragma omp atomic compare capture
  { v = x; if (x < expr) { x = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (x < expr) { x = expr; } v = x; } // MAX

  #pragma omp atomic compare capture
  if (x == e) { x = d; } else { v = x; }

  #pragma omp atomic compare capture
  { r = x == e; if(r) { x = d; } }

  #pragma omp atomic compare capture
  { r = x == e; if(r) { x = d; } else { v = x; } }
}

// CHK-C-LABEL: @test_long_long(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[X:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[D:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[E:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[V:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[R:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[TMP:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP5:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP7:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP10:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP16:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP18:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP21:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP28:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP30:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP33:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP39:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP41:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP44:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[TMP0:%.*]] = load i64, i64* [[EXPR]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, i64* [[X]] monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD]], i64* [[TMP]], align 8
// CHK-C-NEXT:    [[CMP:%.*]] = icmp slt i64 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-C-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL]], i8* [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP1:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP1]], i64* [[TMP]], align 8
// CHK-C-NEXT:    store i64 [[TMP0]], i64* [[ATOMIC_TEMP]], align 8
// CHK-C-NEXT:    [[TMP2:%.*]] = load i64, i64* [[ATOMIC_TEMP]], align 8
// CHK-C-NEXT:    [[TMP3:%.*]] = cmpxchg i64* [[X]], i64 [[TMP1]], i64 [[TMP2]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP4]] = extractvalue { i64, i1 } [[TMP3]], 0
// CHK-C-NEXT:    [[TMP5:%.*]] = extractvalue { i64, i1 } [[TMP3]], 1
// CHK-C-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    [[CMP2:%.*]] = icmp slt i64 [[TMP4]], [[TMP0]]
// CHK-C-NEXT:    [[FROMBOOL3:%.*]] = zext i1 [[CMP2]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL3]], i8* [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP2]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP6:%.*]] = load i64, i64* [[TMP]], align 8
// CHK-C-NEXT:    [[TMP7:%.*]] = load i8, i8* [[ATMP1]], align 1
// CHK-C-NEXT:    store i64 [[TMP6]], i64* [[V]], align 8
// CHK-C-NEXT:    [[TMP8:%.*]] = load i64, i64* [[EXPR]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD4:%.*]] = load atomic i64, i64* [[X]] monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD4]], i64* [[ATMP5]], align 8
// CHK-C-NEXT:    [[CMP6:%.*]] = icmp slt i64 [[ATOMIC_LOAD4]], [[TMP8]]
// CHK-C-NEXT:    [[FROMBOOL8:%.*]] = zext i1 [[CMP6]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL8]], i8* [[ATMP7]], align 1
// CHK-C-NEXT:    br i1 [[CMP6]], label [[ATOMIC_CONT9:%.*]], label [[ATOMIC_EXIT14:%.*]]
// CHK-C:       atomic_cont9:
// CHK-C-NEXT:    [[TMP9:%.*]] = phi i64 [ [[ATOMIC_LOAD4]], [[ATOMIC_EXIT]] ], [ [[TMP12:%.*]], [[ATOMIC_CMP11:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP9]], i64* [[ATMP5]], align 8
// CHK-C-NEXT:    store i64 [[TMP8]], i64* [[ATOMIC_TEMP10]], align 8
// CHK-C-NEXT:    [[TMP10:%.*]] = load i64, i64* [[ATOMIC_TEMP10]], align 8
// CHK-C-NEXT:    [[TMP11:%.*]] = cmpxchg i64* [[X]], i64 [[TMP9]], i64 [[TMP10]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP12]] = extractvalue { i64, i1 } [[TMP11]], 0
// CHK-C-NEXT:    [[TMP13:%.*]] = extractvalue { i64, i1 } [[TMP11]], 1
// CHK-C-NEXT:    br i1 [[TMP13]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP11]]
// CHK-C:       atomic_upd_exit:
// CHK-C-NEXT:    store i64 [[TMP8]], i64* [[ATMP5]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_EXIT14]]
// CHK-C:       atomic_cmp11:
// CHK-C-NEXT:    [[CMP12:%.*]] = icmp slt i64 [[TMP12]], [[TMP8]]
// CHK-C-NEXT:    [[FROMBOOL13:%.*]] = zext i1 [[CMP12]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL13]], i8* [[ATMP7]], align 1
// CHK-C-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT9]], label [[ATOMIC_EXIT14]]
// CHK-C:       atomic_exit14:
// CHK-C-NEXT:    [[TMP14:%.*]] = load i64, i64* [[ATMP5]], align 8
// CHK-C-NEXT:    [[TMP15:%.*]] = load i8, i8* [[ATMP7]], align 1
// CHK-C-NEXT:    store i64 [[TMP14]], i64* [[V]], align 8
// CHK-C-NEXT:    [[TMP16:%.*]] = load i64, i64* [[D]], align 8
// CHK-C-NEXT:    [[TMP17:%.*]] = load i64, i64* [[E]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD15:%.*]] = load atomic i64, i64* [[X]] monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD15]], i64* [[ATMP16]], align 8
// CHK-C-NEXT:    [[CMP17:%.*]] = icmp eq i64 [[ATOMIC_LOAD15]], [[TMP17]]
// CHK-C-NEXT:    [[FROMBOOL19:%.*]] = zext i1 [[CMP17]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL19]], i8* [[ATMP18]], align 1
// CHK-C-NEXT:    br i1 [[CMP17]], label [[ATOMIC_CONT20:%.*]], label [[ATOMIC_EXIT26:%.*]]
// CHK-C:       atomic_cont20:
// CHK-C-NEXT:    [[TMP18:%.*]] = phi i64 [ [[ATOMIC_LOAD15]], [[ATOMIC_EXIT14]] ], [ [[TMP21:%.*]], [[ATOMIC_CMP23:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP18]], i64* [[ATMP16]], align 8
// CHK-C-NEXT:    store i64 [[TMP16]], i64* [[ATOMIC_TEMP21]], align 8
// CHK-C-NEXT:    [[TMP19:%.*]] = load i64, i64* [[ATOMIC_TEMP21]], align 8
// CHK-C-NEXT:    [[TMP20:%.*]] = cmpxchg i64* [[X]], i64 [[TMP18]], i64 [[TMP19]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP21]] = extractvalue { i64, i1 } [[TMP20]], 0
// CHK-C-NEXT:    [[TMP22:%.*]] = extractvalue { i64, i1 } [[TMP20]], 1
// CHK-C-NEXT:    br i1 [[TMP22]], label [[ATOMIC_UPD_EXIT22:%.*]], label [[ATOMIC_CMP23]]
// CHK-C:       atomic_upd_exit22:
// CHK-C-NEXT:    store i64 [[TMP16]], i64* [[ATMP16]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_EXIT26]]
// CHK-C:       atomic_cmp23:
// CHK-C-NEXT:    [[CMP24:%.*]] = icmp eq i64 [[TMP21]], [[TMP17]]
// CHK-C-NEXT:    [[FROMBOOL25:%.*]] = zext i1 [[CMP24]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL25]], i8* [[ATMP18]], align 1
// CHK-C-NEXT:    br i1 [[CMP24]], label [[ATOMIC_CONT20]], label [[ATOMIC_EXIT26]]
// CHK-C:       atomic_exit26:
// CHK-C-NEXT:    [[TMP23:%.*]] = load i64, i64* [[ATMP16]], align 8
// CHK-C-NEXT:    [[TMP24:%.*]] = load i8, i8* [[ATMP18]], align 1
// CHK-C-NEXT:    [[TMP25:%.*]] = trunc i8 [[TMP24]] to i1
// CHK-C-NEXT:    br i1 [[TMP25]], label [[ATOMIC_CAPTURE_CONT:%.*]], label [[ATOMIC_CAPTURE:%.*]]
// CHK-C:       atomic_capture:
// CHK-C-NEXT:    store i64 [[TMP23]], i64* [[V]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT]]
// CHK-C:       atomic_capture_cont:
// CHK-C-NEXT:    [[TMP26:%.*]] = load i64, i64* [[D]], align 8
// CHK-C-NEXT:    [[TMP27:%.*]] = load i64, i64* [[E]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD27:%.*]] = load atomic i64, i64* [[X]] monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD27]], i64* [[ATMP28]], align 8
// CHK-C-NEXT:    [[CMP29:%.*]] = icmp eq i64 [[ATOMIC_LOAD27]], [[TMP27]]
// CHK-C-NEXT:    [[FROMBOOL31:%.*]] = zext i1 [[CMP29]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL31]], i8* [[ATMP30]], align 1
// CHK-C-NEXT:    br i1 [[CMP29]], label [[ATOMIC_CONT32:%.*]], label [[ATOMIC_EXIT37:%.*]]
// CHK-C:       atomic_cont32:
// CHK-C-NEXT:    [[TMP28:%.*]] = phi i64 [ [[ATOMIC_LOAD27]], [[ATOMIC_CAPTURE_CONT]] ], [ [[TMP31:%.*]], [[ATOMIC_CMP34:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP28]], i64* [[ATMP28]], align 8
// CHK-C-NEXT:    store i64 [[TMP26]], i64* [[ATOMIC_TEMP33]], align 8
// CHK-C-NEXT:    [[TMP29:%.*]] = load i64, i64* [[ATOMIC_TEMP33]], align 8
// CHK-C-NEXT:    [[TMP30:%.*]] = cmpxchg i64* [[X]], i64 [[TMP28]], i64 [[TMP29]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP31]] = extractvalue { i64, i1 } [[TMP30]], 0
// CHK-C-NEXT:    [[TMP32:%.*]] = extractvalue { i64, i1 } [[TMP30]], 1
// CHK-C-NEXT:    br i1 [[TMP32]], label [[ATOMIC_EXIT37]], label [[ATOMIC_CMP34]]
// CHK-C:       atomic_cmp34:
// CHK-C-NEXT:    [[CMP35:%.*]] = icmp eq i64 [[TMP31]], [[TMP27]]
// CHK-C-NEXT:    [[FROMBOOL36:%.*]] = zext i1 [[CMP35]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL36]], i8* [[ATMP30]], align 1
// CHK-C-NEXT:    br i1 [[CMP35]], label [[ATOMIC_CONT32]], label [[ATOMIC_EXIT37]]
// CHK-C:       atomic_exit37:
// CHK-C-NEXT:    [[TMP33:%.*]] = load i64, i64* [[ATMP28]], align 8
// CHK-C-NEXT:    [[TMP34:%.*]] = load i8, i8* [[ATMP30]], align 1
// CHK-C-NEXT:    [[CONV:%.*]] = zext i8 [[TMP34]] to i64
// CHK-C-NEXT:    store i64 [[CONV]], i64* [[R]], align 8
// CHK-C-NEXT:    [[TMP35:%.*]] = load i64, i64* [[D]], align 8
// CHK-C-NEXT:    [[TMP36:%.*]] = load i64, i64* [[E]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD38:%.*]] = load atomic i64, i64* [[X]] monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD38]], i64* [[ATMP39]], align 8
// CHK-C-NEXT:    [[CMP40:%.*]] = icmp eq i64 [[ATOMIC_LOAD38]], [[TMP36]]
// CHK-C-NEXT:    [[FROMBOOL42:%.*]] = zext i1 [[CMP40]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL42]], i8* [[ATMP41]], align 1
// CHK-C-NEXT:    br i1 [[CMP40]], label [[ATOMIC_CONT43:%.*]], label [[ATOMIC_EXIT48:%.*]]
// CHK-C:       atomic_cont43:
// CHK-C-NEXT:    [[TMP37:%.*]] = phi i64 [ [[ATOMIC_LOAD38]], [[ATOMIC_EXIT37]] ], [ [[TMP40:%.*]], [[ATOMIC_CMP45:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP37]], i64* [[ATMP39]], align 8
// CHK-C-NEXT:    store i64 [[TMP35]], i64* [[ATOMIC_TEMP44]], align 8
// CHK-C-NEXT:    [[TMP38:%.*]] = load i64, i64* [[ATOMIC_TEMP44]], align 8
// CHK-C-NEXT:    [[TMP39:%.*]] = cmpxchg i64* [[X]], i64 [[TMP37]], i64 [[TMP38]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP40]] = extractvalue { i64, i1 } [[TMP39]], 0
// CHK-C-NEXT:    [[TMP41:%.*]] = extractvalue { i64, i1 } [[TMP39]], 1
// CHK-C-NEXT:    br i1 [[TMP41]], label [[ATOMIC_EXIT48]], label [[ATOMIC_CMP45]]
// CHK-C:       atomic_cmp45:
// CHK-C-NEXT:    [[CMP46:%.*]] = icmp eq i64 [[TMP40]], [[TMP36]]
// CHK-C-NEXT:    [[FROMBOOL47:%.*]] = zext i1 [[CMP46]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL47]], i8* [[ATMP41]], align 1
// CHK-C-NEXT:    br i1 [[CMP46]], label [[ATOMIC_CONT43]], label [[ATOMIC_EXIT48]]
// CHK-C:       atomic_exit48:
// CHK-C-NEXT:    [[TMP42:%.*]] = load i64, i64* [[ATMP39]], align 8
// CHK-C-NEXT:    [[TMP43:%.*]] = load i8, i8* [[ATMP41]], align 1
// CHK-C-NEXT:    [[CONV49:%.*]] = zext i8 [[TMP43]] to i64
// CHK-C-NEXT:    store i64 [[CONV49]], i64* [[R]], align 8
// CHK-C-NEXT:    [[TMP44:%.*]] = trunc i8 [[TMP43]] to i1
// CHK-C-NEXT:    br i1 [[TMP44]], label [[ATOMIC_CAPTURE_CONT51:%.*]], label [[ATOMIC_CAPTURE50:%.*]]
// CHK-C:       atomic_capture50:
// CHK-C-NEXT:    store i64 [[TMP42]], i64* [[V]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT51]]
// CHK-C:       atomic_capture_cont51:
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z14test_long_longv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[X:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[V:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[R:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP5:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP7:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP10:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP16:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP18:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP21:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP28:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP30:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP33:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP39:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP41:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP44:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i64, i64* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, i64* [[X]] monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD]], i64* [[TMP]], align 8
// CHK-CXX-NEXT:    [[CMP:%.*]] = icmp slt i64 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-CXX-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL]], i8* [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP1:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP1]], i64* [[TMP]], align 8
// CHK-CXX-NEXT:    store i64 [[TMP0]], i64* [[ATOMIC_TEMP]], align 8
// CHK-CXX-NEXT:    [[TMP2:%.*]] = load i64, i64* [[ATOMIC_TEMP]], align 8
// CHK-CXX-NEXT:    [[TMP3:%.*]] = cmpxchg i64* [[X]], i64 [[TMP1]], i64 [[TMP2]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP4]] = extractvalue { i64, i1 } [[TMP3]], 0
// CHK-CXX-NEXT:    [[TMP5:%.*]] = extractvalue { i64, i1 } [[TMP3]], 1
// CHK-CXX-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    [[CMP2:%.*]] = icmp slt i64 [[TMP4]], [[TMP0]]
// CHK-CXX-NEXT:    [[FROMBOOL3:%.*]] = zext i1 [[CMP2]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL3]], i8* [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP2]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP6:%.*]] = load i64, i64* [[TMP]], align 8
// CHK-CXX-NEXT:    [[TMP7:%.*]] = load i8, i8* [[ATMP1]], align 1
// CHK-CXX-NEXT:    store i64 [[TMP6]], i64* [[V]], align 8
// CHK-CXX-NEXT:    [[TMP8:%.*]] = load i64, i64* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD4:%.*]] = load atomic i64, i64* [[X]] monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD4]], i64* [[ATMP5]], align 8
// CHK-CXX-NEXT:    [[CMP6:%.*]] = icmp slt i64 [[ATOMIC_LOAD4]], [[TMP8]]
// CHK-CXX-NEXT:    [[FROMBOOL8:%.*]] = zext i1 [[CMP6]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL8]], i8* [[ATMP7]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP6]], label [[ATOMIC_CONT9:%.*]], label [[ATOMIC_EXIT14:%.*]]
// CHK-CXX:       atomic_cont9:
// CHK-CXX-NEXT:    [[TMP9:%.*]] = phi i64 [ [[ATOMIC_LOAD4]], [[ATOMIC_EXIT]] ], [ [[TMP12:%.*]], [[ATOMIC_CMP11:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP9]], i64* [[ATMP5]], align 8
// CHK-CXX-NEXT:    store i64 [[TMP8]], i64* [[ATOMIC_TEMP10]], align 8
// CHK-CXX-NEXT:    [[TMP10:%.*]] = load i64, i64* [[ATOMIC_TEMP10]], align 8
// CHK-CXX-NEXT:    [[TMP11:%.*]] = cmpxchg i64* [[X]], i64 [[TMP9]], i64 [[TMP10]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP12]] = extractvalue { i64, i1 } [[TMP11]], 0
// CHK-CXX-NEXT:    [[TMP13:%.*]] = extractvalue { i64, i1 } [[TMP11]], 1
// CHK-CXX-NEXT:    br i1 [[TMP13]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP11]]
// CHK-CXX:       atomic_upd_exit:
// CHK-CXX-NEXT:    store i64 [[TMP8]], i64* [[ATMP5]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT14]]
// CHK-CXX:       atomic_cmp11:
// CHK-CXX-NEXT:    [[CMP12:%.*]] = icmp slt i64 [[TMP12]], [[TMP8]]
// CHK-CXX-NEXT:    [[FROMBOOL13:%.*]] = zext i1 [[CMP12]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL13]], i8* [[ATMP7]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT9]], label [[ATOMIC_EXIT14]]
// CHK-CXX:       atomic_exit14:
// CHK-CXX-NEXT:    [[TMP14:%.*]] = load i64, i64* [[ATMP5]], align 8
// CHK-CXX-NEXT:    [[TMP15:%.*]] = load i8, i8* [[ATMP7]], align 1
// CHK-CXX-NEXT:    store i64 [[TMP14]], i64* [[V]], align 8
// CHK-CXX-NEXT:    [[TMP16:%.*]] = load i64, i64* [[D]], align 8
// CHK-CXX-NEXT:    [[TMP17:%.*]] = load i64, i64* [[E]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD15:%.*]] = load atomic i64, i64* [[X]] monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD15]], i64* [[ATMP16]], align 8
// CHK-CXX-NEXT:    [[CMP17:%.*]] = icmp eq i64 [[ATOMIC_LOAD15]], [[TMP17]]
// CHK-CXX-NEXT:    [[FROMBOOL19:%.*]] = zext i1 [[CMP17]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL19]], i8* [[ATMP18]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP17]], label [[ATOMIC_CONT20:%.*]], label [[ATOMIC_EXIT26:%.*]]
// CHK-CXX:       atomic_cont20:
// CHK-CXX-NEXT:    [[TMP18:%.*]] = phi i64 [ [[ATOMIC_LOAD15]], [[ATOMIC_EXIT14]] ], [ [[TMP21:%.*]], [[ATOMIC_CMP23:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP18]], i64* [[ATMP16]], align 8
// CHK-CXX-NEXT:    store i64 [[TMP16]], i64* [[ATOMIC_TEMP21]], align 8
// CHK-CXX-NEXT:    [[TMP19:%.*]] = load i64, i64* [[ATOMIC_TEMP21]], align 8
// CHK-CXX-NEXT:    [[TMP20:%.*]] = cmpxchg i64* [[X]], i64 [[TMP18]], i64 [[TMP19]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP21]] = extractvalue { i64, i1 } [[TMP20]], 0
// CHK-CXX-NEXT:    [[TMP22:%.*]] = extractvalue { i64, i1 } [[TMP20]], 1
// CHK-CXX-NEXT:    br i1 [[TMP22]], label [[ATOMIC_UPD_EXIT22:%.*]], label [[ATOMIC_CMP23]]
// CHK-CXX:       atomic_upd_exit22:
// CHK-CXX-NEXT:    store i64 [[TMP16]], i64* [[ATMP16]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT26]]
// CHK-CXX:       atomic_cmp23:
// CHK-CXX-NEXT:    [[CMP24:%.*]] = icmp eq i64 [[TMP21]], [[TMP17]]
// CHK-CXX-NEXT:    [[FROMBOOL25:%.*]] = zext i1 [[CMP24]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL25]], i8* [[ATMP18]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP24]], label [[ATOMIC_CONT20]], label [[ATOMIC_EXIT26]]
// CHK-CXX:       atomic_exit26:
// CHK-CXX-NEXT:    [[TMP23:%.*]] = load i64, i64* [[ATMP16]], align 8
// CHK-CXX-NEXT:    [[TMP24:%.*]] = load i8, i8* [[ATMP18]], align 1
// CHK-CXX-NEXT:    [[TMP25:%.*]] = trunc i8 [[TMP24]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP25]], label [[ATOMIC_CAPTURE_CONT:%.*]], label [[ATOMIC_CAPTURE:%.*]]
// CHK-CXX:       atomic_capture:
// CHK-CXX-NEXT:    store i64 [[TMP23]], i64* [[V]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT]]
// CHK-CXX:       atomic_capture_cont:
// CHK-CXX-NEXT:    [[TMP26:%.*]] = load i64, i64* [[D]], align 8
// CHK-CXX-NEXT:    [[TMP27:%.*]] = load i64, i64* [[E]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD27:%.*]] = load atomic i64, i64* [[X]] monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD27]], i64* [[ATMP28]], align 8
// CHK-CXX-NEXT:    [[CMP29:%.*]] = icmp eq i64 [[ATOMIC_LOAD27]], [[TMP27]]
// CHK-CXX-NEXT:    [[FROMBOOL31:%.*]] = zext i1 [[CMP29]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL31]], i8* [[ATMP30]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP29]], label [[ATOMIC_CONT32:%.*]], label [[ATOMIC_EXIT37:%.*]]
// CHK-CXX:       atomic_cont32:
// CHK-CXX-NEXT:    [[TMP28:%.*]] = phi i64 [ [[ATOMIC_LOAD27]], [[ATOMIC_CAPTURE_CONT]] ], [ [[TMP31:%.*]], [[ATOMIC_CMP34:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP28]], i64* [[ATMP28]], align 8
// CHK-CXX-NEXT:    store i64 [[TMP26]], i64* [[ATOMIC_TEMP33]], align 8
// CHK-CXX-NEXT:    [[TMP29:%.*]] = load i64, i64* [[ATOMIC_TEMP33]], align 8
// CHK-CXX-NEXT:    [[TMP30:%.*]] = cmpxchg i64* [[X]], i64 [[TMP28]], i64 [[TMP29]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP31]] = extractvalue { i64, i1 } [[TMP30]], 0
// CHK-CXX-NEXT:    [[TMP32:%.*]] = extractvalue { i64, i1 } [[TMP30]], 1
// CHK-CXX-NEXT:    br i1 [[TMP32]], label [[ATOMIC_EXIT37]], label [[ATOMIC_CMP34]]
// CHK-CXX:       atomic_cmp34:
// CHK-CXX-NEXT:    [[CMP35:%.*]] = icmp eq i64 [[TMP31]], [[TMP27]]
// CHK-CXX-NEXT:    [[FROMBOOL36:%.*]] = zext i1 [[CMP35]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL36]], i8* [[ATMP30]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP35]], label [[ATOMIC_CONT32]], label [[ATOMIC_EXIT37]]
// CHK-CXX:       atomic_exit37:
// CHK-CXX-NEXT:    [[TMP33:%.*]] = load i64, i64* [[ATMP28]], align 8
// CHK-CXX-NEXT:    [[TMP34:%.*]] = load i8, i8* [[ATMP30]], align 1
// CHK-CXX-NEXT:    [[CONV:%.*]] = zext i8 [[TMP34]] to i64
// CHK-CXX-NEXT:    store i64 [[CONV]], i64* [[R]], align 8
// CHK-CXX-NEXT:    [[TMP35:%.*]] = load i64, i64* [[D]], align 8
// CHK-CXX-NEXT:    [[TMP36:%.*]] = load i64, i64* [[E]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD38:%.*]] = load atomic i64, i64* [[X]] monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD38]], i64* [[ATMP39]], align 8
// CHK-CXX-NEXT:    [[CMP40:%.*]] = icmp eq i64 [[ATOMIC_LOAD38]], [[TMP36]]
// CHK-CXX-NEXT:    [[FROMBOOL42:%.*]] = zext i1 [[CMP40]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL42]], i8* [[ATMP41]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP40]], label [[ATOMIC_CONT43:%.*]], label [[ATOMIC_EXIT48:%.*]]
// CHK-CXX:       atomic_cont43:
// CHK-CXX-NEXT:    [[TMP37:%.*]] = phi i64 [ [[ATOMIC_LOAD38]], [[ATOMIC_EXIT37]] ], [ [[TMP40:%.*]], [[ATOMIC_CMP45:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP37]], i64* [[ATMP39]], align 8
// CHK-CXX-NEXT:    store i64 [[TMP35]], i64* [[ATOMIC_TEMP44]], align 8
// CHK-CXX-NEXT:    [[TMP38:%.*]] = load i64, i64* [[ATOMIC_TEMP44]], align 8
// CHK-CXX-NEXT:    [[TMP39:%.*]] = cmpxchg i64* [[X]], i64 [[TMP37]], i64 [[TMP38]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP40]] = extractvalue { i64, i1 } [[TMP39]], 0
// CHK-CXX-NEXT:    [[TMP41:%.*]] = extractvalue { i64, i1 } [[TMP39]], 1
// CHK-CXX-NEXT:    br i1 [[TMP41]], label [[ATOMIC_EXIT48]], label [[ATOMIC_CMP45]]
// CHK-CXX:       atomic_cmp45:
// CHK-CXX-NEXT:    [[CMP46:%.*]] = icmp eq i64 [[TMP40]], [[TMP36]]
// CHK-CXX-NEXT:    [[FROMBOOL47:%.*]] = zext i1 [[CMP46]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL47]], i8* [[ATMP41]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP46]], label [[ATOMIC_CONT43]], label [[ATOMIC_EXIT48]]
// CHK-CXX:       atomic_exit48:
// CHK-CXX-NEXT:    [[TMP42:%.*]] = load i64, i64* [[ATMP39]], align 8
// CHK-CXX-NEXT:    [[TMP43:%.*]] = load i8, i8* [[ATMP41]], align 1
// CHK-CXX-NEXT:    [[CONV49:%.*]] = zext i8 [[TMP43]] to i64
// CHK-CXX-NEXT:    store i64 [[CONV49]], i64* [[R]], align 8
// CHK-CXX-NEXT:    [[TMP44:%.*]] = trunc i8 [[TMP43]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP44]], label [[ATOMIC_CAPTURE_CONT51:%.*]], label [[ATOMIC_CAPTURE50:%.*]]
// CHK-CXX:       atomic_capture50:
// CHK-CXX-NEXT:    store i64 [[TMP42]], i64* [[V]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT51]]
// CHK-CXX:       atomic_capture_cont51:
// CHK-CXX-NEXT:    ret void
//
void test_long_long() {
  long long x, expr, d, e, v, r;

  #pragma omp atomic compare capture
  { v = x; if (x < expr) { x = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (x < expr) { x = expr; } v = x; } // MAX

  #pragma omp atomic compare capture
  if (x == e) { x = d; } else { v = x; }

  #pragma omp atomic compare capture
  { r = x == e; if(r) { x = d; } }

  #pragma omp atomic compare capture
  { r = x == e; if(r) { x = d; } else { v = x; } }
}

#ifdef LIBCALLS
void test_Complex_float()
{
  _Complex float x, expr, d, e, v;
  int r;

  #pragma omp atomic compare capture
  { v = x; if (x == e) { x = d; } }

  #pragma omp atomic compare capture
  { if (x == e) { x = d; } v = x; }

  #pragma omp atomic compare capture
  if (x == e) { x = d; } else { v = x; }

  #pragma omp atomic compare capture
  { r = x == e; if(r) { x = d; } }

  #pragma omp atomic compare capture
  { r = x == e; if(r) { x = d; } else { v = x; } }
}

void test_long_double() {
  long double x, expr, d, e;
  short r;

  #pragma omp atomic compare capture
  { v = x; if (x < expr) { x = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (x < expr) { x = expr; } v = x; } // MAX

  #pragma omp atomic compare capture
  if (x == e) { x = d; } else { v = x; }

  #pragma omp atomic compare capture
  { r = x == e; if(r) { x = d; } }

  #pragma omp atomic compare capture
  { r = x == e; if(r) { x = d; } else { v = x; } }
}

void test_vec() {
  typedef int int4 __attribute__((__vector_size__(16)));
  int4 x;
  int expr, d, e, v;
  long r;

  #pragma omp atomic compare
  { v = x[1]; if (x[1] < expr) { x[1] = expr; } } // MAX

  #pragma omp atomic compare
  { if (x[1] < expr) { x[1] = expr; } v = x[1]; } // MAX

  #pragma omp atomic compare capture
  if (x == e) { x = d; } else { v = x; }

  #pragma omp atomic compare capture
  { r = x == e; if(r) { x = d; } }

  #pragma omp atomic compare capture
  { r = x == e; if(r) { x = d; } else { v = x; } }
}
#endif


struct BitFields {
  int : 32;
  int a : 31;
} bfx;

struct BitFields_packed {
  int : 32;
  int a : 31;
} __attribute__ ((__packed__)) bfx_packed;

struct BitFields2 {
  int : 31;
  int a : 1;
} bfx2;

struct BitFields2_packed {
  int : 31;
  int a : 1;
} __attribute__ ((__packed__)) bfx2_packed;

struct BitFields3 {
  int : 11;
  int a : 14;
} bfx3;

struct BitFields3_packed {
  int : 11;
  int a : 14;
} __attribute__ ((__packed__)) bfx3_packed;

struct BitFields4 {
  short : 16;
  int a: 1;
  long b : 7;
} bfx4;

struct BitFields4_packed {
  short : 16;
  int a: 1;
  long b : 7;
} __attribute__ ((__packed__)) bfx4_packed;

// CHK-C-LABEL: @test_bitfield(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[V:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[R:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[TMP:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP2:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP6:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP8:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP15:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP16:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP21:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP24:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP28:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP34:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP42:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP43:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP48:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP51:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP55:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP62:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP70:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP71:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP76:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP79:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP83:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP89:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP97:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP98:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP103:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP106:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP110:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP116:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP127:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP128:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP132:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP135:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP138:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP145:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP152:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP153:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP157:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP160:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP163:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP171:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP178:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP179:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP183:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP186:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP189:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP197:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP206:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP207:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP211:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP214:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP217:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP224:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP232:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP233:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP237:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP240:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP243:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP250:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP260:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP261:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP265:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP268:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP272:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP279:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP287:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP288:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP293:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP296:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP300:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP308:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP316:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP317:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP322:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP325:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP329:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP337:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP347:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP348:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP353:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP356:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP360:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP367:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP376:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP377:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP382:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP385:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP389:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP396:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP407:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP408:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP413:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP416:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP420:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP427:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP435:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP436:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP441:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP444:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP448:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP456:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP464:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP465:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP470:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP473:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP477:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP485:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP495:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP496:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP501:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP504:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP508:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP515:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP524:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP525:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP530:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP533:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP537:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP544:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP555:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP556:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP562:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP565:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP570:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP577:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP586:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP587:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP593:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP596:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP601:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP609:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP618:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP619:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP625:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP628:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP633:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP641:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP652:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP653:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP659:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP662:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP667:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP674:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP684:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP685:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP691:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP694:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP699:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP706:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP719:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP720:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP725:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP728:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP732:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP739:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP749:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP750:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP755:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP758:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP762:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP770:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP781:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP782:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP787:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP790:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP794:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP802:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP815:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP816:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP821:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP824:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP828:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP835:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP846:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP847:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP852:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP855:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP859:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP866:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP878:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP879:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP885:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP888:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP893:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP899:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP908:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP909:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP915:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP918:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP923:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP930:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP939:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP940:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP946:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP949:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP954:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP961:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP972:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP973:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP979:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP982:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP987:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP993:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP1003:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP1004:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP1010:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP1013:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP1018:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP1024:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[TMP0:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i32, i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD]], i32* [[ATOMIC_TEMP]], align 4
// CHK-C-NEXT:    [[BF_LOAD:%.*]] = load i32, i32* [[ATOMIC_TEMP]], align 4
// CHK-C-NEXT:    [[BF_SHL:%.*]] = shl i32 [[BF_LOAD]], 1
// CHK-C-NEXT:    [[BF_ASHR:%.*]] = ashr i32 [[BF_SHL]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR]], i32* [[TMP]], align 4
// CHK-C-NEXT:    [[CMP:%.*]] = icmp slt i32 [[BF_ASHR]], [[TMP0]]
// CHK-C-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL]], i8* [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP1:%.*]] = phi i32 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP1]], i32* [[ATOMIC_TEMP2]], align 4
// CHK-C-NEXT:    [[BF_LOAD3:%.*]] = load i32, i32* [[ATOMIC_TEMP2]], align 4
// CHK-C-NEXT:    [[BF_SHL4:%.*]] = shl i32 [[BF_LOAD3]], 1
// CHK-C-NEXT:    [[BF_ASHR5:%.*]] = ashr i32 [[BF_SHL4]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR5]], i32* [[TMP]], align 4
// CHK-C-NEXT:    store i32 [[TMP1]], i32* [[ATOMIC_TEMP6]], align 4
// CHK-C-NEXT:    [[BF_LOAD7:%.*]] = load i32, i32* [[ATOMIC_TEMP6]], align 4
// CHK-C-NEXT:    [[BF_VALUE:%.*]] = and i32 [[TMP0]], 2147483647
// CHK-C-NEXT:    [[BF_CLEAR:%.*]] = and i32 [[BF_LOAD7]], -2147483648
// CHK-C-NEXT:    [[BF_SET:%.*]] = or i32 [[BF_CLEAR]], [[BF_VALUE]]
// CHK-C-NEXT:    store i32 [[BF_SET]], i32* [[ATOMIC_TEMP6]], align 4
// CHK-C-NEXT:    [[TMP2:%.*]] = load i32, i32* [[ATOMIC_TEMP6]], align 4
// CHK-C-NEXT:    [[TMP3:%.*]] = cmpxchg i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*), i32 [[TMP1]], i32 [[TMP2]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP4]] = extractvalue { i32, i1 } [[TMP3]], 0
// CHK-C-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i1 } [[TMP3]], 1
// CHK-C-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    store i32 [[TMP4]], i32* [[ATOMIC_TEMP8]], align 4
// CHK-C-NEXT:    [[BF_LOAD9:%.*]] = load i32, i32* [[ATOMIC_TEMP8]], align 4
// CHK-C-NEXT:    [[BF_SHL10:%.*]] = shl i32 [[BF_LOAD9]], 1
// CHK-C-NEXT:    [[BF_ASHR11:%.*]] = ashr i32 [[BF_SHL10]], 1
// CHK-C-NEXT:    [[CMP12:%.*]] = icmp slt i32 [[BF_ASHR11]], [[TMP0]]
// CHK-C-NEXT:    [[FROMBOOL13:%.*]] = zext i1 [[CMP12]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL13]], i8* [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP6:%.*]] = load i32, i32* [[TMP]], align 4
// CHK-C-NEXT:    [[TMP7:%.*]] = load i8, i8* [[ATMP1]], align 1
// CHK-C-NEXT:    store i32 [[TMP6]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP8:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD14:%.*]] = load atomic i32, i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD14]], i32* [[ATOMIC_TEMP16]], align 4
// CHK-C-NEXT:    [[BF_LOAD17:%.*]] = load i32, i32* [[ATOMIC_TEMP16]], align 4
// CHK-C-NEXT:    [[BF_SHL18:%.*]] = shl i32 [[BF_LOAD17]], 1
// CHK-C-NEXT:    [[BF_ASHR19:%.*]] = ashr i32 [[BF_SHL18]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR19]], i32* [[ATMP15]], align 4
// CHK-C-NEXT:    [[CMP20:%.*]] = icmp slt i32 [[BF_ASHR19]], [[TMP8]]
// CHK-C-NEXT:    [[FROMBOOL22:%.*]] = zext i1 [[CMP20]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL22]], i8* [[ATMP21]], align 1
// CHK-C-NEXT:    br i1 [[CMP20]], label [[ATOMIC_CONT23:%.*]], label [[ATOMIC_EXIT40:%.*]]
// CHK-C:       atomic_cont23:
// CHK-C-NEXT:    [[TMP9:%.*]] = phi i32 [ [[ATOMIC_LOAD14]], [[ATOMIC_EXIT]] ], [ [[TMP12:%.*]], [[ATOMIC_CMP33:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP9]], i32* [[ATOMIC_TEMP24]], align 4
// CHK-C-NEXT:    [[BF_LOAD25:%.*]] = load i32, i32* [[ATOMIC_TEMP24]], align 4
// CHK-C-NEXT:    [[BF_SHL26:%.*]] = shl i32 [[BF_LOAD25]], 1
// CHK-C-NEXT:    [[BF_ASHR27:%.*]] = ashr i32 [[BF_SHL26]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR27]], i32* [[ATMP15]], align 4
// CHK-C-NEXT:    store i32 [[TMP9]], i32* [[ATOMIC_TEMP28]], align 4
// CHK-C-NEXT:    [[BF_LOAD29:%.*]] = load i32, i32* [[ATOMIC_TEMP28]], align 4
// CHK-C-NEXT:    [[BF_VALUE30:%.*]] = and i32 [[TMP8]], 2147483647
// CHK-C-NEXT:    [[BF_CLEAR31:%.*]] = and i32 [[BF_LOAD29]], -2147483648
// CHK-C-NEXT:    [[BF_SET32:%.*]] = or i32 [[BF_CLEAR31]], [[BF_VALUE30]]
// CHK-C-NEXT:    store i32 [[BF_SET32]], i32* [[ATOMIC_TEMP28]], align 4
// CHK-C-NEXT:    [[TMP10:%.*]] = load i32, i32* [[ATOMIC_TEMP28]], align 4
// CHK-C-NEXT:    [[TMP11:%.*]] = cmpxchg i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*), i32 [[TMP9]], i32 [[TMP10]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP12]] = extractvalue { i32, i1 } [[TMP11]], 0
// CHK-C-NEXT:    [[TMP13:%.*]] = extractvalue { i32, i1 } [[TMP11]], 1
// CHK-C-NEXT:    br i1 [[TMP13]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP33]]
// CHK-C:       atomic_upd_exit:
// CHK-C-NEXT:    store i32 [[TMP8]], i32* [[ATMP15]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT40]]
// CHK-C:       atomic_cmp33:
// CHK-C-NEXT:    store i32 [[TMP12]], i32* [[ATOMIC_TEMP34]], align 4
// CHK-C-NEXT:    [[BF_LOAD35:%.*]] = load i32, i32* [[ATOMIC_TEMP34]], align 4
// CHK-C-NEXT:    [[BF_SHL36:%.*]] = shl i32 [[BF_LOAD35]], 1
// CHK-C-NEXT:    [[BF_ASHR37:%.*]] = ashr i32 [[BF_SHL36]], 1
// CHK-C-NEXT:    [[CMP38:%.*]] = icmp slt i32 [[BF_ASHR37]], [[TMP8]]
// CHK-C-NEXT:    [[FROMBOOL39:%.*]] = zext i1 [[CMP38]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL39]], i8* [[ATMP21]], align 1
// CHK-C-NEXT:    br i1 [[CMP38]], label [[ATOMIC_CONT23]], label [[ATOMIC_EXIT40]]
// CHK-C:       atomic_exit40:
// CHK-C-NEXT:    [[TMP14:%.*]] = load i32, i32* [[ATMP15]], align 4
// CHK-C-NEXT:    [[TMP15:%.*]] = load i8, i8* [[ATMP21]], align 1
// CHK-C-NEXT:    store i32 [[TMP14]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP16:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP17:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD41:%.*]] = load atomic i32, i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD41]], i32* [[ATOMIC_TEMP43]], align 4
// CHK-C-NEXT:    [[BF_LOAD44:%.*]] = load i32, i32* [[ATOMIC_TEMP43]], align 4
// CHK-C-NEXT:    [[BF_SHL45:%.*]] = shl i32 [[BF_LOAD44]], 1
// CHK-C-NEXT:    [[BF_ASHR46:%.*]] = ashr i32 [[BF_SHL45]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR46]], i32* [[ATMP42]], align 4
// CHK-C-NEXT:    [[CMP47:%.*]] = icmp eq i32 [[BF_ASHR46]], [[TMP17]]
// CHK-C-NEXT:    [[FROMBOOL49:%.*]] = zext i1 [[CMP47]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL49]], i8* [[ATMP48]], align 1
// CHK-C-NEXT:    br i1 [[CMP47]], label [[ATOMIC_CONT50:%.*]], label [[ATOMIC_EXIT68:%.*]]
// CHK-C:       atomic_cont50:
// CHK-C-NEXT:    [[TMP18:%.*]] = phi i32 [ [[ATOMIC_LOAD41]], [[ATOMIC_EXIT40]] ], [ [[TMP21:%.*]], [[ATOMIC_CMP61:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP18]], i32* [[ATOMIC_TEMP51]], align 4
// CHK-C-NEXT:    [[BF_LOAD52:%.*]] = load i32, i32* [[ATOMIC_TEMP51]], align 4
// CHK-C-NEXT:    [[BF_SHL53:%.*]] = shl i32 [[BF_LOAD52]], 1
// CHK-C-NEXT:    [[BF_ASHR54:%.*]] = ashr i32 [[BF_SHL53]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR54]], i32* [[ATMP42]], align 4
// CHK-C-NEXT:    store i32 [[TMP18]], i32* [[ATOMIC_TEMP55]], align 4
// CHK-C-NEXT:    [[BF_LOAD56:%.*]] = load i32, i32* [[ATOMIC_TEMP55]], align 4
// CHK-C-NEXT:    [[BF_VALUE57:%.*]] = and i32 [[TMP16]], 2147483647
// CHK-C-NEXT:    [[BF_CLEAR58:%.*]] = and i32 [[BF_LOAD56]], -2147483648
// CHK-C-NEXT:    [[BF_SET59:%.*]] = or i32 [[BF_CLEAR58]], [[BF_VALUE57]]
// CHK-C-NEXT:    store i32 [[BF_SET59]], i32* [[ATOMIC_TEMP55]], align 4
// CHK-C-NEXT:    [[TMP19:%.*]] = load i32, i32* [[ATOMIC_TEMP55]], align 4
// CHK-C-NEXT:    [[TMP20:%.*]] = cmpxchg i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*), i32 [[TMP18]], i32 [[TMP19]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP21]] = extractvalue { i32, i1 } [[TMP20]], 0
// CHK-C-NEXT:    [[TMP22:%.*]] = extractvalue { i32, i1 } [[TMP20]], 1
// CHK-C-NEXT:    br i1 [[TMP22]], label [[ATOMIC_UPD_EXIT60:%.*]], label [[ATOMIC_CMP61]]
// CHK-C:       atomic_upd_exit60:
// CHK-C-NEXT:    store i32 [[TMP16]], i32* [[ATMP42]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT68]]
// CHK-C:       atomic_cmp61:
// CHK-C-NEXT:    store i32 [[TMP21]], i32* [[ATOMIC_TEMP62]], align 4
// CHK-C-NEXT:    [[BF_LOAD63:%.*]] = load i32, i32* [[ATOMIC_TEMP62]], align 4
// CHK-C-NEXT:    [[BF_SHL64:%.*]] = shl i32 [[BF_LOAD63]], 1
// CHK-C-NEXT:    [[BF_ASHR65:%.*]] = ashr i32 [[BF_SHL64]], 1
// CHK-C-NEXT:    [[CMP66:%.*]] = icmp eq i32 [[BF_ASHR65]], [[TMP17]]
// CHK-C-NEXT:    [[FROMBOOL67:%.*]] = zext i1 [[CMP66]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL67]], i8* [[ATMP48]], align 1
// CHK-C-NEXT:    br i1 [[CMP66]], label [[ATOMIC_CONT50]], label [[ATOMIC_EXIT68]]
// CHK-C:       atomic_exit68:
// CHK-C-NEXT:    [[TMP23:%.*]] = load i32, i32* [[ATMP42]], align 4
// CHK-C-NEXT:    [[TMP24:%.*]] = load i8, i8* [[ATMP48]], align 1
// CHK-C-NEXT:    [[TMP25:%.*]] = trunc i8 [[TMP24]] to i1
// CHK-C-NEXT:    br i1 [[TMP25]], label [[ATOMIC_CAPTURE_CONT:%.*]], label [[ATOMIC_CAPTURE:%.*]]
// CHK-C:       atomic_capture:
// CHK-C-NEXT:    store i32 [[TMP23]], i32* [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT]]
// CHK-C:       atomic_capture_cont:
// CHK-C-NEXT:    [[TMP26:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP27:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD69:%.*]] = load atomic i32, i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD69]], i32* [[ATOMIC_TEMP71]], align 4
// CHK-C-NEXT:    [[BF_LOAD72:%.*]] = load i32, i32* [[ATOMIC_TEMP71]], align 4
// CHK-C-NEXT:    [[BF_SHL73:%.*]] = shl i32 [[BF_LOAD72]], 1
// CHK-C-NEXT:    [[BF_ASHR74:%.*]] = ashr i32 [[BF_SHL73]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR74]], i32* [[ATMP70]], align 4
// CHK-C-NEXT:    [[CMP75:%.*]] = icmp eq i32 [[BF_ASHR74]], [[TMP27]]
// CHK-C-NEXT:    [[FROMBOOL77:%.*]] = zext i1 [[CMP75]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL77]], i8* [[ATMP76]], align 1
// CHK-C-NEXT:    br i1 [[CMP75]], label [[ATOMIC_CONT78:%.*]], label [[ATOMIC_EXIT95:%.*]]
// CHK-C:       atomic_cont78:
// CHK-C-NEXT:    [[TMP28:%.*]] = phi i32 [ [[ATOMIC_LOAD69]], [[ATOMIC_CAPTURE_CONT]] ], [ [[TMP31:%.*]], [[ATOMIC_CMP88:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP28]], i32* [[ATOMIC_TEMP79]], align 4
// CHK-C-NEXT:    [[BF_LOAD80:%.*]] = load i32, i32* [[ATOMIC_TEMP79]], align 4
// CHK-C-NEXT:    [[BF_SHL81:%.*]] = shl i32 [[BF_LOAD80]], 1
// CHK-C-NEXT:    [[BF_ASHR82:%.*]] = ashr i32 [[BF_SHL81]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR82]], i32* [[ATMP70]], align 4
// CHK-C-NEXT:    store i32 [[TMP28]], i32* [[ATOMIC_TEMP83]], align 4
// CHK-C-NEXT:    [[BF_LOAD84:%.*]] = load i32, i32* [[ATOMIC_TEMP83]], align 4
// CHK-C-NEXT:    [[BF_VALUE85:%.*]] = and i32 [[TMP26]], 2147483647
// CHK-C-NEXT:    [[BF_CLEAR86:%.*]] = and i32 [[BF_LOAD84]], -2147483648
// CHK-C-NEXT:    [[BF_SET87:%.*]] = or i32 [[BF_CLEAR86]], [[BF_VALUE85]]
// CHK-C-NEXT:    store i32 [[BF_SET87]], i32* [[ATOMIC_TEMP83]], align 4
// CHK-C-NEXT:    [[TMP29:%.*]] = load i32, i32* [[ATOMIC_TEMP83]], align 4
// CHK-C-NEXT:    [[TMP30:%.*]] = cmpxchg i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*), i32 [[TMP28]], i32 [[TMP29]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP31]] = extractvalue { i32, i1 } [[TMP30]], 0
// CHK-C-NEXT:    [[TMP32:%.*]] = extractvalue { i32, i1 } [[TMP30]], 1
// CHK-C-NEXT:    br i1 [[TMP32]], label [[ATOMIC_EXIT95]], label [[ATOMIC_CMP88]]
// CHK-C:       atomic_cmp88:
// CHK-C-NEXT:    store i32 [[TMP31]], i32* [[ATOMIC_TEMP89]], align 4
// CHK-C-NEXT:    [[BF_LOAD90:%.*]] = load i32, i32* [[ATOMIC_TEMP89]], align 4
// CHK-C-NEXT:    [[BF_SHL91:%.*]] = shl i32 [[BF_LOAD90]], 1
// CHK-C-NEXT:    [[BF_ASHR92:%.*]] = ashr i32 [[BF_SHL91]], 1
// CHK-C-NEXT:    [[CMP93:%.*]] = icmp eq i32 [[BF_ASHR92]], [[TMP27]]
// CHK-C-NEXT:    [[FROMBOOL94:%.*]] = zext i1 [[CMP93]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL94]], i8* [[ATMP76]], align 1
// CHK-C-NEXT:    br i1 [[CMP93]], label [[ATOMIC_CONT78]], label [[ATOMIC_EXIT95]]
// CHK-C:       atomic_exit95:
// CHK-C-NEXT:    [[TMP33:%.*]] = load i32, i32* [[ATMP70]], align 4
// CHK-C-NEXT:    [[TMP34:%.*]] = load i8, i8* [[ATMP76]], align 1
// CHK-C-NEXT:    [[CONV:%.*]] = zext i8 [[TMP34]] to i32
// CHK-C-NEXT:    store i32 [[CONV]], i32* [[R]], align 4
// CHK-C-NEXT:    [[TMP35:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP36:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD96:%.*]] = load atomic i32, i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD96]], i32* [[ATOMIC_TEMP98]], align 4
// CHK-C-NEXT:    [[BF_LOAD99:%.*]] = load i32, i32* [[ATOMIC_TEMP98]], align 4
// CHK-C-NEXT:    [[BF_SHL100:%.*]] = shl i32 [[BF_LOAD99]], 1
// CHK-C-NEXT:    [[BF_ASHR101:%.*]] = ashr i32 [[BF_SHL100]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR101]], i32* [[ATMP97]], align 4
// CHK-C-NEXT:    [[CMP102:%.*]] = icmp eq i32 [[BF_ASHR101]], [[TMP36]]
// CHK-C-NEXT:    [[FROMBOOL104:%.*]] = zext i1 [[CMP102]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL104]], i8* [[ATMP103]], align 1
// CHK-C-NEXT:    br i1 [[CMP102]], label [[ATOMIC_CONT105:%.*]], label [[ATOMIC_EXIT122:%.*]]
// CHK-C:       atomic_cont105:
// CHK-C-NEXT:    [[TMP37:%.*]] = phi i32 [ [[ATOMIC_LOAD96]], [[ATOMIC_EXIT95]] ], [ [[TMP40:%.*]], [[ATOMIC_CMP115:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP37]], i32* [[ATOMIC_TEMP106]], align 4
// CHK-C-NEXT:    [[BF_LOAD107:%.*]] = load i32, i32* [[ATOMIC_TEMP106]], align 4
// CHK-C-NEXT:    [[BF_SHL108:%.*]] = shl i32 [[BF_LOAD107]], 1
// CHK-C-NEXT:    [[BF_ASHR109:%.*]] = ashr i32 [[BF_SHL108]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR109]], i32* [[ATMP97]], align 4
// CHK-C-NEXT:    store i32 [[TMP37]], i32* [[ATOMIC_TEMP110]], align 4
// CHK-C-NEXT:    [[BF_LOAD111:%.*]] = load i32, i32* [[ATOMIC_TEMP110]], align 4
// CHK-C-NEXT:    [[BF_VALUE112:%.*]] = and i32 [[TMP35]], 2147483647
// CHK-C-NEXT:    [[BF_CLEAR113:%.*]] = and i32 [[BF_LOAD111]], -2147483648
// CHK-C-NEXT:    [[BF_SET114:%.*]] = or i32 [[BF_CLEAR113]], [[BF_VALUE112]]
// CHK-C-NEXT:    store i32 [[BF_SET114]], i32* [[ATOMIC_TEMP110]], align 4
// CHK-C-NEXT:    [[TMP38:%.*]] = load i32, i32* [[ATOMIC_TEMP110]], align 4
// CHK-C-NEXT:    [[TMP39:%.*]] = cmpxchg i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*), i32 [[TMP37]], i32 [[TMP38]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP40]] = extractvalue { i32, i1 } [[TMP39]], 0
// CHK-C-NEXT:    [[TMP41:%.*]] = extractvalue { i32, i1 } [[TMP39]], 1
// CHK-C-NEXT:    br i1 [[TMP41]], label [[ATOMIC_EXIT122]], label [[ATOMIC_CMP115]]
// CHK-C:       atomic_cmp115:
// CHK-C-NEXT:    store i32 [[TMP40]], i32* [[ATOMIC_TEMP116]], align 4
// CHK-C-NEXT:    [[BF_LOAD117:%.*]] = load i32, i32* [[ATOMIC_TEMP116]], align 4
// CHK-C-NEXT:    [[BF_SHL118:%.*]] = shl i32 [[BF_LOAD117]], 1
// CHK-C-NEXT:    [[BF_ASHR119:%.*]] = ashr i32 [[BF_SHL118]], 1
// CHK-C-NEXT:    [[CMP120:%.*]] = icmp eq i32 [[BF_ASHR119]], [[TMP36]]
// CHK-C-NEXT:    [[FROMBOOL121:%.*]] = zext i1 [[CMP120]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL121]], i8* [[ATMP103]], align 1
// CHK-C-NEXT:    br i1 [[CMP120]], label [[ATOMIC_CONT105]], label [[ATOMIC_EXIT122]]
// CHK-C:       atomic_exit122:
// CHK-C-NEXT:    [[TMP42:%.*]] = load i32, i32* [[ATMP97]], align 4
// CHK-C-NEXT:    [[TMP43:%.*]] = load i8, i8* [[ATMP103]], align 1
// CHK-C-NEXT:    [[CONV123:%.*]] = zext i8 [[TMP43]] to i32
// CHK-C-NEXT:    store i32 [[CONV123]], i32* [[R]], align 4
// CHK-C-NEXT:    [[TMP44:%.*]] = trunc i8 [[TMP43]] to i1
// CHK-C-NEXT:    br i1 [[TMP44]], label [[ATOMIC_CAPTURE_CONT125:%.*]], label [[ATOMIC_CAPTURE124:%.*]]
// CHK-C:       atomic_capture124:
// CHK-C-NEXT:    store i32 [[TMP42]], i32* [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT125]]
// CHK-C:       atomic_capture_cont125:
// CHK-C-NEXT:    [[TMP45:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD126:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS2:%.*]], %struct.BitFields2* @bfx2, i32 0, i32 0) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD126]], i32* [[ATOMIC_TEMP128]], align 4
// CHK-C-NEXT:    [[BF_LOAD129:%.*]] = load i32, i32* [[ATOMIC_TEMP128]], align 4
// CHK-C-NEXT:    [[BF_ASHR130:%.*]] = ashr i32 [[BF_LOAD129]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR130]], i32* [[ATMP127]], align 4
// CHK-C-NEXT:    [[CMP131:%.*]] = icmp slt i32 [[BF_ASHR130]], [[TMP45]]
// CHK-C-NEXT:    [[FROMBOOL133:%.*]] = zext i1 [[CMP131]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL133]], i8* [[ATMP132]], align 1
// CHK-C-NEXT:    br i1 [[CMP131]], label [[ATOMIC_CONT134:%.*]], label [[ATOMIC_EXIT150:%.*]]
// CHK-C:       atomic_cont134:
// CHK-C-NEXT:    [[TMP46:%.*]] = phi i32 [ [[ATOMIC_LOAD126]], [[ATOMIC_CAPTURE_CONT125]] ], [ [[TMP49:%.*]], [[ATOMIC_CMP144:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP46]], i32* [[ATOMIC_TEMP135]], align 4
// CHK-C-NEXT:    [[BF_LOAD136:%.*]] = load i32, i32* [[ATOMIC_TEMP135]], align 4
// CHK-C-NEXT:    [[BF_ASHR137:%.*]] = ashr i32 [[BF_LOAD136]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR137]], i32* [[ATMP127]], align 4
// CHK-C-NEXT:    store i32 [[TMP46]], i32* [[ATOMIC_TEMP138]], align 4
// CHK-C-NEXT:    [[BF_LOAD139:%.*]] = load i32, i32* [[ATOMIC_TEMP138]], align 4
// CHK-C-NEXT:    [[BF_VALUE140:%.*]] = and i32 [[TMP45]], 1
// CHK-C-NEXT:    [[BF_SHL141:%.*]] = shl i32 [[BF_VALUE140]], 31
// CHK-C-NEXT:    [[BF_CLEAR142:%.*]] = and i32 [[BF_LOAD139]], 2147483647
// CHK-C-NEXT:    [[BF_SET143:%.*]] = or i32 [[BF_CLEAR142]], [[BF_SHL141]]
// CHK-C-NEXT:    store i32 [[BF_SET143]], i32* [[ATOMIC_TEMP138]], align 4
// CHK-C-NEXT:    [[TMP47:%.*]] = load i32, i32* [[ATOMIC_TEMP138]], align 4
// CHK-C-NEXT:    [[TMP48:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0), i32 [[TMP46]], i32 [[TMP47]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP49]] = extractvalue { i32, i1 } [[TMP48]], 0
// CHK-C-NEXT:    [[TMP50:%.*]] = extractvalue { i32, i1 } [[TMP48]], 1
// CHK-C-NEXT:    br i1 [[TMP50]], label [[ATOMIC_EXIT150]], label [[ATOMIC_CMP144]]
// CHK-C:       atomic_cmp144:
// CHK-C-NEXT:    store i32 [[TMP49]], i32* [[ATOMIC_TEMP145]], align 4
// CHK-C-NEXT:    [[BF_LOAD146:%.*]] = load i32, i32* [[ATOMIC_TEMP145]], align 4
// CHK-C-NEXT:    [[BF_ASHR147:%.*]] = ashr i32 [[BF_LOAD146]], 31
// CHK-C-NEXT:    [[CMP148:%.*]] = icmp slt i32 [[BF_ASHR147]], [[TMP45]]
// CHK-C-NEXT:    [[FROMBOOL149:%.*]] = zext i1 [[CMP148]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL149]], i8* [[ATMP132]], align 1
// CHK-C-NEXT:    br i1 [[CMP148]], label [[ATOMIC_CONT134]], label [[ATOMIC_EXIT150]]
// CHK-C:       atomic_exit150:
// CHK-C-NEXT:    [[TMP51:%.*]] = load i32, i32* [[ATMP127]], align 4
// CHK-C-NEXT:    [[TMP52:%.*]] = load i8, i8* [[ATMP132]], align 1
// CHK-C-NEXT:    store i32 [[TMP51]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP53:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD151:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD151]], i32* [[ATOMIC_TEMP153]], align 4
// CHK-C-NEXT:    [[BF_LOAD154:%.*]] = load i32, i32* [[ATOMIC_TEMP153]], align 4
// CHK-C-NEXT:    [[BF_ASHR155:%.*]] = ashr i32 [[BF_LOAD154]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR155]], i32* [[ATMP152]], align 4
// CHK-C-NEXT:    [[CMP156:%.*]] = icmp slt i32 [[BF_ASHR155]], [[TMP53]]
// CHK-C-NEXT:    [[FROMBOOL158:%.*]] = zext i1 [[CMP156]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL158]], i8* [[ATMP157]], align 1
// CHK-C-NEXT:    br i1 [[CMP156]], label [[ATOMIC_CONT159:%.*]], label [[ATOMIC_EXIT176:%.*]]
// CHK-C:       atomic_cont159:
// CHK-C-NEXT:    [[TMP54:%.*]] = phi i32 [ [[ATOMIC_LOAD151]], [[ATOMIC_EXIT150]] ], [ [[TMP57:%.*]], [[ATOMIC_CMP170:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP54]], i32* [[ATOMIC_TEMP160]], align 4
// CHK-C-NEXT:    [[BF_LOAD161:%.*]] = load i32, i32* [[ATOMIC_TEMP160]], align 4
// CHK-C-NEXT:    [[BF_ASHR162:%.*]] = ashr i32 [[BF_LOAD161]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR162]], i32* [[ATMP152]], align 4
// CHK-C-NEXT:    store i32 [[TMP54]], i32* [[ATOMIC_TEMP163]], align 4
// CHK-C-NEXT:    [[BF_LOAD164:%.*]] = load i32, i32* [[ATOMIC_TEMP163]], align 4
// CHK-C-NEXT:    [[BF_VALUE165:%.*]] = and i32 [[TMP53]], 1
// CHK-C-NEXT:    [[BF_SHL166:%.*]] = shl i32 [[BF_VALUE165]], 31
// CHK-C-NEXT:    [[BF_CLEAR167:%.*]] = and i32 [[BF_LOAD164]], 2147483647
// CHK-C-NEXT:    [[BF_SET168:%.*]] = or i32 [[BF_CLEAR167]], [[BF_SHL166]]
// CHK-C-NEXT:    store i32 [[BF_SET168]], i32* [[ATOMIC_TEMP163]], align 4
// CHK-C-NEXT:    [[TMP55:%.*]] = load i32, i32* [[ATOMIC_TEMP163]], align 4
// CHK-C-NEXT:    [[TMP56:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0), i32 [[TMP54]], i32 [[TMP55]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP57]] = extractvalue { i32, i1 } [[TMP56]], 0
// CHK-C-NEXT:    [[TMP58:%.*]] = extractvalue { i32, i1 } [[TMP56]], 1
// CHK-C-NEXT:    br i1 [[TMP58]], label [[ATOMIC_UPD_EXIT169:%.*]], label [[ATOMIC_CMP170]]
// CHK-C:       atomic_upd_exit169:
// CHK-C-NEXT:    store i32 [[TMP53]], i32* [[ATMP152]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT176]]
// CHK-C:       atomic_cmp170:
// CHK-C-NEXT:    store i32 [[TMP57]], i32* [[ATOMIC_TEMP171]], align 4
// CHK-C-NEXT:    [[BF_LOAD172:%.*]] = load i32, i32* [[ATOMIC_TEMP171]], align 4
// CHK-C-NEXT:    [[BF_ASHR173:%.*]] = ashr i32 [[BF_LOAD172]], 31
// CHK-C-NEXT:    [[CMP174:%.*]] = icmp slt i32 [[BF_ASHR173]], [[TMP53]]
// CHK-C-NEXT:    [[FROMBOOL175:%.*]] = zext i1 [[CMP174]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL175]], i8* [[ATMP157]], align 1
// CHK-C-NEXT:    br i1 [[CMP174]], label [[ATOMIC_CONT159]], label [[ATOMIC_EXIT176]]
// CHK-C:       atomic_exit176:
// CHK-C-NEXT:    [[TMP59:%.*]] = load i32, i32* [[ATMP152]], align 4
// CHK-C-NEXT:    [[TMP60:%.*]] = load i8, i8* [[ATMP157]], align 1
// CHK-C-NEXT:    store i32 [[TMP59]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP61:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP62:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD177:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD177]], i32* [[ATOMIC_TEMP179]], align 4
// CHK-C-NEXT:    [[BF_LOAD180:%.*]] = load i32, i32* [[ATOMIC_TEMP179]], align 4
// CHK-C-NEXT:    [[BF_ASHR181:%.*]] = ashr i32 [[BF_LOAD180]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR181]], i32* [[ATMP178]], align 4
// CHK-C-NEXT:    [[CMP182:%.*]] = icmp eq i32 [[BF_ASHR181]], [[TMP62]]
// CHK-C-NEXT:    [[FROMBOOL184:%.*]] = zext i1 [[CMP182]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL184]], i8* [[ATMP183]], align 1
// CHK-C-NEXT:    br i1 [[CMP182]], label [[ATOMIC_CONT185:%.*]], label [[ATOMIC_EXIT202:%.*]]
// CHK-C:       atomic_cont185:
// CHK-C-NEXT:    [[TMP63:%.*]] = phi i32 [ [[ATOMIC_LOAD177]], [[ATOMIC_EXIT176]] ], [ [[TMP66:%.*]], [[ATOMIC_CMP196:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP63]], i32* [[ATOMIC_TEMP186]], align 4
// CHK-C-NEXT:    [[BF_LOAD187:%.*]] = load i32, i32* [[ATOMIC_TEMP186]], align 4
// CHK-C-NEXT:    [[BF_ASHR188:%.*]] = ashr i32 [[BF_LOAD187]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR188]], i32* [[ATMP178]], align 4
// CHK-C-NEXT:    store i32 [[TMP63]], i32* [[ATOMIC_TEMP189]], align 4
// CHK-C-NEXT:    [[BF_LOAD190:%.*]] = load i32, i32* [[ATOMIC_TEMP189]], align 4
// CHK-C-NEXT:    [[BF_VALUE191:%.*]] = and i32 [[TMP61]], 1
// CHK-C-NEXT:    [[BF_SHL192:%.*]] = shl i32 [[BF_VALUE191]], 31
// CHK-C-NEXT:    [[BF_CLEAR193:%.*]] = and i32 [[BF_LOAD190]], 2147483647
// CHK-C-NEXT:    [[BF_SET194:%.*]] = or i32 [[BF_CLEAR193]], [[BF_SHL192]]
// CHK-C-NEXT:    store i32 [[BF_SET194]], i32* [[ATOMIC_TEMP189]], align 4
// CHK-C-NEXT:    [[TMP64:%.*]] = load i32, i32* [[ATOMIC_TEMP189]], align 4
// CHK-C-NEXT:    [[TMP65:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0), i32 [[TMP63]], i32 [[TMP64]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP66]] = extractvalue { i32, i1 } [[TMP65]], 0
// CHK-C-NEXT:    [[TMP67:%.*]] = extractvalue { i32, i1 } [[TMP65]], 1
// CHK-C-NEXT:    br i1 [[TMP67]], label [[ATOMIC_UPD_EXIT195:%.*]], label [[ATOMIC_CMP196]]
// CHK-C:       atomic_upd_exit195:
// CHK-C-NEXT:    store i32 [[TMP61]], i32* [[ATMP178]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT202]]
// CHK-C:       atomic_cmp196:
// CHK-C-NEXT:    store i32 [[TMP66]], i32* [[ATOMIC_TEMP197]], align 4
// CHK-C-NEXT:    [[BF_LOAD198:%.*]] = load i32, i32* [[ATOMIC_TEMP197]], align 4
// CHK-C-NEXT:    [[BF_ASHR199:%.*]] = ashr i32 [[BF_LOAD198]], 31
// CHK-C-NEXT:    [[CMP200:%.*]] = icmp eq i32 [[BF_ASHR199]], [[TMP62]]
// CHK-C-NEXT:    [[FROMBOOL201:%.*]] = zext i1 [[CMP200]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL201]], i8* [[ATMP183]], align 1
// CHK-C-NEXT:    br i1 [[CMP200]], label [[ATOMIC_CONT185]], label [[ATOMIC_EXIT202]]
// CHK-C:       atomic_exit202:
// CHK-C-NEXT:    [[TMP68:%.*]] = load i32, i32* [[ATMP178]], align 4
// CHK-C-NEXT:    [[TMP69:%.*]] = load i8, i8* [[ATMP183]], align 1
// CHK-C-NEXT:    [[TMP70:%.*]] = trunc i8 [[TMP69]] to i1
// CHK-C-NEXT:    br i1 [[TMP70]], label [[ATOMIC_CAPTURE_CONT204:%.*]], label [[ATOMIC_CAPTURE203:%.*]]
// CHK-C:       atomic_capture203:
// CHK-C-NEXT:    store i32 [[TMP68]], i32* [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT204]]
// CHK-C:       atomic_capture_cont204:
// CHK-C-NEXT:    [[TMP71:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP72:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD205:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD205]], i32* [[ATOMIC_TEMP207]], align 4
// CHK-C-NEXT:    [[BF_LOAD208:%.*]] = load i32, i32* [[ATOMIC_TEMP207]], align 4
// CHK-C-NEXT:    [[BF_ASHR209:%.*]] = ashr i32 [[BF_LOAD208]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR209]], i32* [[ATMP206]], align 4
// CHK-C-NEXT:    [[CMP210:%.*]] = icmp eq i32 [[BF_ASHR209]], [[TMP72]]
// CHK-C-NEXT:    [[FROMBOOL212:%.*]] = zext i1 [[CMP210]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL212]], i8* [[ATMP211]], align 1
// CHK-C-NEXT:    br i1 [[CMP210]], label [[ATOMIC_CONT213:%.*]], label [[ATOMIC_EXIT229:%.*]]
// CHK-C:       atomic_cont213:
// CHK-C-NEXT:    [[TMP73:%.*]] = phi i32 [ [[ATOMIC_LOAD205]], [[ATOMIC_CAPTURE_CONT204]] ], [ [[TMP76:%.*]], [[ATOMIC_CMP223:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP73]], i32* [[ATOMIC_TEMP214]], align 4
// CHK-C-NEXT:    [[BF_LOAD215:%.*]] = load i32, i32* [[ATOMIC_TEMP214]], align 4
// CHK-C-NEXT:    [[BF_ASHR216:%.*]] = ashr i32 [[BF_LOAD215]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR216]], i32* [[ATMP206]], align 4
// CHK-C-NEXT:    store i32 [[TMP73]], i32* [[ATOMIC_TEMP217]], align 4
// CHK-C-NEXT:    [[BF_LOAD218:%.*]] = load i32, i32* [[ATOMIC_TEMP217]], align 4
// CHK-C-NEXT:    [[BF_VALUE219:%.*]] = and i32 [[TMP71]], 1
// CHK-C-NEXT:    [[BF_SHL220:%.*]] = shl i32 [[BF_VALUE219]], 31
// CHK-C-NEXT:    [[BF_CLEAR221:%.*]] = and i32 [[BF_LOAD218]], 2147483647
// CHK-C-NEXT:    [[BF_SET222:%.*]] = or i32 [[BF_CLEAR221]], [[BF_SHL220]]
// CHK-C-NEXT:    store i32 [[BF_SET222]], i32* [[ATOMIC_TEMP217]], align 4
// CHK-C-NEXT:    [[TMP74:%.*]] = load i32, i32* [[ATOMIC_TEMP217]], align 4
// CHK-C-NEXT:    [[TMP75:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0), i32 [[TMP73]], i32 [[TMP74]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP76]] = extractvalue { i32, i1 } [[TMP75]], 0
// CHK-C-NEXT:    [[TMP77:%.*]] = extractvalue { i32, i1 } [[TMP75]], 1
// CHK-C-NEXT:    br i1 [[TMP77]], label [[ATOMIC_EXIT229]], label [[ATOMIC_CMP223]]
// CHK-C:       atomic_cmp223:
// CHK-C-NEXT:    store i32 [[TMP76]], i32* [[ATOMIC_TEMP224]], align 4
// CHK-C-NEXT:    [[BF_LOAD225:%.*]] = load i32, i32* [[ATOMIC_TEMP224]], align 4
// CHK-C-NEXT:    [[BF_ASHR226:%.*]] = ashr i32 [[BF_LOAD225]], 31
// CHK-C-NEXT:    [[CMP227:%.*]] = icmp eq i32 [[BF_ASHR226]], [[TMP72]]
// CHK-C-NEXT:    [[FROMBOOL228:%.*]] = zext i1 [[CMP227]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL228]], i8* [[ATMP211]], align 1
// CHK-C-NEXT:    br i1 [[CMP227]], label [[ATOMIC_CONT213]], label [[ATOMIC_EXIT229]]
// CHK-C:       atomic_exit229:
// CHK-C-NEXT:    [[TMP78:%.*]] = load i32, i32* [[ATMP206]], align 4
// CHK-C-NEXT:    [[TMP79:%.*]] = load i8, i8* [[ATMP211]], align 1
// CHK-C-NEXT:    [[CONV230:%.*]] = zext i8 [[TMP79]] to i32
// CHK-C-NEXT:    store i32 [[CONV230]], i32* [[R]], align 4
// CHK-C-NEXT:    [[TMP80:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP81:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD231:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD231]], i32* [[ATOMIC_TEMP233]], align 4
// CHK-C-NEXT:    [[BF_LOAD234:%.*]] = load i32, i32* [[ATOMIC_TEMP233]], align 4
// CHK-C-NEXT:    [[BF_ASHR235:%.*]] = ashr i32 [[BF_LOAD234]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR235]], i32* [[ATMP232]], align 4
// CHK-C-NEXT:    [[CMP236:%.*]] = icmp eq i32 [[BF_ASHR235]], [[TMP81]]
// CHK-C-NEXT:    [[FROMBOOL238:%.*]] = zext i1 [[CMP236]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL238]], i8* [[ATMP237]], align 1
// CHK-C-NEXT:    br i1 [[CMP236]], label [[ATOMIC_CONT239:%.*]], label [[ATOMIC_EXIT255:%.*]]
// CHK-C:       atomic_cont239:
// CHK-C-NEXT:    [[TMP82:%.*]] = phi i32 [ [[ATOMIC_LOAD231]], [[ATOMIC_EXIT229]] ], [ [[TMP85:%.*]], [[ATOMIC_CMP249:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP82]], i32* [[ATOMIC_TEMP240]], align 4
// CHK-C-NEXT:    [[BF_LOAD241:%.*]] = load i32, i32* [[ATOMIC_TEMP240]], align 4
// CHK-C-NEXT:    [[BF_ASHR242:%.*]] = ashr i32 [[BF_LOAD241]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR242]], i32* [[ATMP232]], align 4
// CHK-C-NEXT:    store i32 [[TMP82]], i32* [[ATOMIC_TEMP243]], align 4
// CHK-C-NEXT:    [[BF_LOAD244:%.*]] = load i32, i32* [[ATOMIC_TEMP243]], align 4
// CHK-C-NEXT:    [[BF_VALUE245:%.*]] = and i32 [[TMP80]], 1
// CHK-C-NEXT:    [[BF_SHL246:%.*]] = shl i32 [[BF_VALUE245]], 31
// CHK-C-NEXT:    [[BF_CLEAR247:%.*]] = and i32 [[BF_LOAD244]], 2147483647
// CHK-C-NEXT:    [[BF_SET248:%.*]] = or i32 [[BF_CLEAR247]], [[BF_SHL246]]
// CHK-C-NEXT:    store i32 [[BF_SET248]], i32* [[ATOMIC_TEMP243]], align 4
// CHK-C-NEXT:    [[TMP83:%.*]] = load i32, i32* [[ATOMIC_TEMP243]], align 4
// CHK-C-NEXT:    [[TMP84:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0), i32 [[TMP82]], i32 [[TMP83]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP85]] = extractvalue { i32, i1 } [[TMP84]], 0
// CHK-C-NEXT:    [[TMP86:%.*]] = extractvalue { i32, i1 } [[TMP84]], 1
// CHK-C-NEXT:    br i1 [[TMP86]], label [[ATOMIC_EXIT255]], label [[ATOMIC_CMP249]]
// CHK-C:       atomic_cmp249:
// CHK-C-NEXT:    store i32 [[TMP85]], i32* [[ATOMIC_TEMP250]], align 4
// CHK-C-NEXT:    [[BF_LOAD251:%.*]] = load i32, i32* [[ATOMIC_TEMP250]], align 4
// CHK-C-NEXT:    [[BF_ASHR252:%.*]] = ashr i32 [[BF_LOAD251]], 31
// CHK-C-NEXT:    [[CMP253:%.*]] = icmp eq i32 [[BF_ASHR252]], [[TMP81]]
// CHK-C-NEXT:    [[FROMBOOL254:%.*]] = zext i1 [[CMP253]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL254]], i8* [[ATMP237]], align 1
// CHK-C-NEXT:    br i1 [[CMP253]], label [[ATOMIC_CONT239]], label [[ATOMIC_EXIT255]]
// CHK-C:       atomic_exit255:
// CHK-C-NEXT:    [[TMP87:%.*]] = load i32, i32* [[ATMP232]], align 4
// CHK-C-NEXT:    [[TMP88:%.*]] = load i8, i8* [[ATMP237]], align 1
// CHK-C-NEXT:    [[CONV256:%.*]] = zext i8 [[TMP88]] to i32
// CHK-C-NEXT:    store i32 [[CONV256]], i32* [[R]], align 4
// CHK-C-NEXT:    [[TMP89:%.*]] = trunc i8 [[TMP88]] to i1
// CHK-C-NEXT:    br i1 [[TMP89]], label [[ATOMIC_CAPTURE_CONT258:%.*]], label [[ATOMIC_CAPTURE257:%.*]]
// CHK-C:       atomic_capture257:
// CHK-C-NEXT:    store i32 [[TMP87]], i32* [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT258]]
// CHK-C:       atomic_capture_cont258:
// CHK-C-NEXT:    [[TMP90:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD259:%.*]] = load atomic i8, i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3) monotonic, align 1
// CHK-C-NEXT:    [[TMP91:%.*]] = bitcast i32* [[ATOMIC_TEMP261]] to i8*
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD259]], i8* [[TMP91]], align 1
// CHK-C-NEXT:    [[BF_LOAD262:%.*]] = load i8, i8* [[TMP91]], align 1
// CHK-C-NEXT:    [[BF_ASHR263:%.*]] = ashr i8 [[BF_LOAD262]], 7
// CHK-C-NEXT:    [[BF_CAST:%.*]] = sext i8 [[BF_ASHR263]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST]], i32* [[ATMP260]], align 4
// CHK-C-NEXT:    [[CMP264:%.*]] = icmp slt i32 [[BF_CAST]], [[TMP90]]
// CHK-C-NEXT:    [[FROMBOOL266:%.*]] = zext i1 [[CMP264]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL266]], i8* [[ATMP265]], align 1
// CHK-C-NEXT:    br i1 [[CMP264]], label [[ATOMIC_CONT267:%.*]], label [[ATOMIC_EXIT285:%.*]]
// CHK-C:       atomic_cont267:
// CHK-C-NEXT:    [[TMP92:%.*]] = phi i8 [ [[ATOMIC_LOAD259]], [[ATOMIC_CAPTURE_CONT258]] ], [ [[TMP98:%.*]], [[ATOMIC_CMP278:%.*]] ]
// CHK-C-NEXT:    [[TMP93:%.*]] = bitcast i32* [[ATOMIC_TEMP268]] to i8*
// CHK-C-NEXT:    store i8 [[TMP92]], i8* [[TMP93]], align 1
// CHK-C-NEXT:    [[BF_LOAD269:%.*]] = load i8, i8* [[TMP93]], align 1
// CHK-C-NEXT:    [[BF_ASHR270:%.*]] = ashr i8 [[BF_LOAD269]], 7
// CHK-C-NEXT:    [[BF_CAST271:%.*]] = sext i8 [[BF_ASHR270]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST271]], i32* [[ATMP260]], align 4
// CHK-C-NEXT:    [[TMP94:%.*]] = bitcast i32* [[ATOMIC_TEMP272]] to i8*
// CHK-C-NEXT:    store i8 [[TMP92]], i8* [[TMP94]], align 1
// CHK-C-NEXT:    [[TMP95:%.*]] = trunc i32 [[TMP90]] to i8
// CHK-C-NEXT:    [[BF_LOAD273:%.*]] = load i8, i8* [[TMP94]], align 1
// CHK-C-NEXT:    [[BF_VALUE274:%.*]] = and i8 [[TMP95]], 1
// CHK-C-NEXT:    [[BF_SHL275:%.*]] = shl i8 [[BF_VALUE274]], 7
// CHK-C-NEXT:    [[BF_CLEAR276:%.*]] = and i8 [[BF_LOAD273]], 127
// CHK-C-NEXT:    [[BF_SET277:%.*]] = or i8 [[BF_CLEAR276]], [[BF_SHL275]]
// CHK-C-NEXT:    store i8 [[BF_SET277]], i8* [[TMP94]], align 1
// CHK-C-NEXT:    [[TMP96:%.*]] = load i8, i8* [[TMP94]], align 1
// CHK-C-NEXT:    [[TMP97:%.*]] = cmpxchg i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3), i8 [[TMP92]], i8 [[TMP96]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP98]] = extractvalue { i8, i1 } [[TMP97]], 0
// CHK-C-NEXT:    [[TMP99:%.*]] = extractvalue { i8, i1 } [[TMP97]], 1
// CHK-C-NEXT:    br i1 [[TMP99]], label [[ATOMIC_EXIT285]], label [[ATOMIC_CMP278]]
// CHK-C:       atomic_cmp278:
// CHK-C-NEXT:    [[TMP100:%.*]] = bitcast i32* [[ATOMIC_TEMP279]] to i8*
// CHK-C-NEXT:    store i8 [[TMP98]], i8* [[TMP100]], align 1
// CHK-C-NEXT:    [[BF_LOAD280:%.*]] = load i8, i8* [[TMP100]], align 1
// CHK-C-NEXT:    [[BF_ASHR281:%.*]] = ashr i8 [[BF_LOAD280]], 7
// CHK-C-NEXT:    [[BF_CAST282:%.*]] = sext i8 [[BF_ASHR281]] to i32
// CHK-C-NEXT:    [[CMP283:%.*]] = icmp slt i32 [[BF_CAST282]], [[TMP90]]
// CHK-C-NEXT:    [[FROMBOOL284:%.*]] = zext i1 [[CMP283]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL284]], i8* [[ATMP265]], align 1
// CHK-C-NEXT:    br i1 [[CMP283]], label [[ATOMIC_CONT267]], label [[ATOMIC_EXIT285]]
// CHK-C:       atomic_exit285:
// CHK-C-NEXT:    [[TMP101:%.*]] = load i32, i32* [[ATMP260]], align 4
// CHK-C-NEXT:    [[TMP102:%.*]] = load i8, i8* [[ATMP265]], align 1
// CHK-C-NEXT:    store i32 [[TMP101]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP103:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD286:%.*]] = load atomic i8, i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3) monotonic, align 1
// CHK-C-NEXT:    [[TMP104:%.*]] = bitcast i32* [[ATOMIC_TEMP288]] to i8*
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD286]], i8* [[TMP104]], align 1
// CHK-C-NEXT:    [[BF_LOAD289:%.*]] = load i8, i8* [[TMP104]], align 1
// CHK-C-NEXT:    [[BF_ASHR290:%.*]] = ashr i8 [[BF_LOAD289]], 7
// CHK-C-NEXT:    [[BF_CAST291:%.*]] = sext i8 [[BF_ASHR290]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST291]], i32* [[ATMP287]], align 4
// CHK-C-NEXT:    [[CMP292:%.*]] = icmp slt i32 [[BF_CAST291]], [[TMP103]]
// CHK-C-NEXT:    [[FROMBOOL294:%.*]] = zext i1 [[CMP292]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL294]], i8* [[ATMP293]], align 1
// CHK-C-NEXT:    br i1 [[CMP292]], label [[ATOMIC_CONT295:%.*]], label [[ATOMIC_EXIT314:%.*]]
// CHK-C:       atomic_cont295:
// CHK-C-NEXT:    [[TMP105:%.*]] = phi i8 [ [[ATOMIC_LOAD286]], [[ATOMIC_EXIT285]] ], [ [[TMP111:%.*]], [[ATOMIC_CMP307:%.*]] ]
// CHK-C-NEXT:    [[TMP106:%.*]] = bitcast i32* [[ATOMIC_TEMP296]] to i8*
// CHK-C-NEXT:    store i8 [[TMP105]], i8* [[TMP106]], align 1
// CHK-C-NEXT:    [[BF_LOAD297:%.*]] = load i8, i8* [[TMP106]], align 1
// CHK-C-NEXT:    [[BF_ASHR298:%.*]] = ashr i8 [[BF_LOAD297]], 7
// CHK-C-NEXT:    [[BF_CAST299:%.*]] = sext i8 [[BF_ASHR298]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST299]], i32* [[ATMP287]], align 4
// CHK-C-NEXT:    [[TMP107:%.*]] = bitcast i32* [[ATOMIC_TEMP300]] to i8*
// CHK-C-NEXT:    store i8 [[TMP105]], i8* [[TMP107]], align 1
// CHK-C-NEXT:    [[TMP108:%.*]] = trunc i32 [[TMP103]] to i8
// CHK-C-NEXT:    [[BF_LOAD301:%.*]] = load i8, i8* [[TMP107]], align 1
// CHK-C-NEXT:    [[BF_VALUE302:%.*]] = and i8 [[TMP108]], 1
// CHK-C-NEXT:    [[BF_SHL303:%.*]] = shl i8 [[BF_VALUE302]], 7
// CHK-C-NEXT:    [[BF_CLEAR304:%.*]] = and i8 [[BF_LOAD301]], 127
// CHK-C-NEXT:    [[BF_SET305:%.*]] = or i8 [[BF_CLEAR304]], [[BF_SHL303]]
// CHK-C-NEXT:    store i8 [[BF_SET305]], i8* [[TMP107]], align 1
// CHK-C-NEXT:    [[TMP109:%.*]] = load i8, i8* [[TMP107]], align 1
// CHK-C-NEXT:    [[TMP110:%.*]] = cmpxchg i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3), i8 [[TMP105]], i8 [[TMP109]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP111]] = extractvalue { i8, i1 } [[TMP110]], 0
// CHK-C-NEXT:    [[TMP112:%.*]] = extractvalue { i8, i1 } [[TMP110]], 1
// CHK-C-NEXT:    br i1 [[TMP112]], label [[ATOMIC_UPD_EXIT306:%.*]], label [[ATOMIC_CMP307]]
// CHK-C:       atomic_upd_exit306:
// CHK-C-NEXT:    store i32 [[TMP103]], i32* [[ATMP287]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT314]]
// CHK-C:       atomic_cmp307:
// CHK-C-NEXT:    [[TMP113:%.*]] = bitcast i32* [[ATOMIC_TEMP308]] to i8*
// CHK-C-NEXT:    store i8 [[TMP111]], i8* [[TMP113]], align 1
// CHK-C-NEXT:    [[BF_LOAD309:%.*]] = load i8, i8* [[TMP113]], align 1
// CHK-C-NEXT:    [[BF_ASHR310:%.*]] = ashr i8 [[BF_LOAD309]], 7
// CHK-C-NEXT:    [[BF_CAST311:%.*]] = sext i8 [[BF_ASHR310]] to i32
// CHK-C-NEXT:    [[CMP312:%.*]] = icmp slt i32 [[BF_CAST311]], [[TMP103]]
// CHK-C-NEXT:    [[FROMBOOL313:%.*]] = zext i1 [[CMP312]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL313]], i8* [[ATMP293]], align 1
// CHK-C-NEXT:    br i1 [[CMP312]], label [[ATOMIC_CONT295]], label [[ATOMIC_EXIT314]]
// CHK-C:       atomic_exit314:
// CHK-C-NEXT:    [[TMP114:%.*]] = load i32, i32* [[ATMP287]], align 4
// CHK-C-NEXT:    [[TMP115:%.*]] = load i8, i8* [[ATMP293]], align 1
// CHK-C-NEXT:    store i32 [[TMP114]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP116:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP117:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD315:%.*]] = load atomic i8, i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3) monotonic, align 1
// CHK-C-NEXT:    [[TMP118:%.*]] = bitcast i32* [[ATOMIC_TEMP317]] to i8*
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD315]], i8* [[TMP118]], align 1
// CHK-C-NEXT:    [[BF_LOAD318:%.*]] = load i8, i8* [[TMP118]], align 1
// CHK-C-NEXT:    [[BF_ASHR319:%.*]] = ashr i8 [[BF_LOAD318]], 7
// CHK-C-NEXT:    [[BF_CAST320:%.*]] = sext i8 [[BF_ASHR319]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST320]], i32* [[ATMP316]], align 4
// CHK-C-NEXT:    [[CMP321:%.*]] = icmp eq i32 [[BF_CAST320]], [[TMP117]]
// CHK-C-NEXT:    [[FROMBOOL323:%.*]] = zext i1 [[CMP321]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL323]], i8* [[ATMP322]], align 1
// CHK-C-NEXT:    br i1 [[CMP321]], label [[ATOMIC_CONT324:%.*]], label [[ATOMIC_EXIT343:%.*]]
// CHK-C:       atomic_cont324:
// CHK-C-NEXT:    [[TMP119:%.*]] = phi i8 [ [[ATOMIC_LOAD315]], [[ATOMIC_EXIT314]] ], [ [[TMP125:%.*]], [[ATOMIC_CMP336:%.*]] ]
// CHK-C-NEXT:    [[TMP120:%.*]] = bitcast i32* [[ATOMIC_TEMP325]] to i8*
// CHK-C-NEXT:    store i8 [[TMP119]], i8* [[TMP120]], align 1
// CHK-C-NEXT:    [[BF_LOAD326:%.*]] = load i8, i8* [[TMP120]], align 1
// CHK-C-NEXT:    [[BF_ASHR327:%.*]] = ashr i8 [[BF_LOAD326]], 7
// CHK-C-NEXT:    [[BF_CAST328:%.*]] = sext i8 [[BF_ASHR327]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST328]], i32* [[ATMP316]], align 4
// CHK-C-NEXT:    [[TMP121:%.*]] = bitcast i32* [[ATOMIC_TEMP329]] to i8*
// CHK-C-NEXT:    store i8 [[TMP119]], i8* [[TMP121]], align 1
// CHK-C-NEXT:    [[TMP122:%.*]] = trunc i32 [[TMP116]] to i8
// CHK-C-NEXT:    [[BF_LOAD330:%.*]] = load i8, i8* [[TMP121]], align 1
// CHK-C-NEXT:    [[BF_VALUE331:%.*]] = and i8 [[TMP122]], 1
// CHK-C-NEXT:    [[BF_SHL332:%.*]] = shl i8 [[BF_VALUE331]], 7
// CHK-C-NEXT:    [[BF_CLEAR333:%.*]] = and i8 [[BF_LOAD330]], 127
// CHK-C-NEXT:    [[BF_SET334:%.*]] = or i8 [[BF_CLEAR333]], [[BF_SHL332]]
// CHK-C-NEXT:    store i8 [[BF_SET334]], i8* [[TMP121]], align 1
// CHK-C-NEXT:    [[TMP123:%.*]] = load i8, i8* [[TMP121]], align 1
// CHK-C-NEXT:    [[TMP124:%.*]] = cmpxchg i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3), i8 [[TMP119]], i8 [[TMP123]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP125]] = extractvalue { i8, i1 } [[TMP124]], 0
// CHK-C-NEXT:    [[TMP126:%.*]] = extractvalue { i8, i1 } [[TMP124]], 1
// CHK-C-NEXT:    br i1 [[TMP126]], label [[ATOMIC_UPD_EXIT335:%.*]], label [[ATOMIC_CMP336]]
// CHK-C:       atomic_upd_exit335:
// CHK-C-NEXT:    store i32 [[TMP116]], i32* [[ATMP316]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT343]]
// CHK-C:       atomic_cmp336:
// CHK-C-NEXT:    [[TMP127:%.*]] = bitcast i32* [[ATOMIC_TEMP337]] to i8*
// CHK-C-NEXT:    store i8 [[TMP125]], i8* [[TMP127]], align 1
// CHK-C-NEXT:    [[BF_LOAD338:%.*]] = load i8, i8* [[TMP127]], align 1
// CHK-C-NEXT:    [[BF_ASHR339:%.*]] = ashr i8 [[BF_LOAD338]], 7
// CHK-C-NEXT:    [[BF_CAST340:%.*]] = sext i8 [[BF_ASHR339]] to i32
// CHK-C-NEXT:    [[CMP341:%.*]] = icmp eq i32 [[BF_CAST340]], [[TMP117]]
// CHK-C-NEXT:    [[FROMBOOL342:%.*]] = zext i1 [[CMP341]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL342]], i8* [[ATMP322]], align 1
// CHK-C-NEXT:    br i1 [[CMP341]], label [[ATOMIC_CONT324]], label [[ATOMIC_EXIT343]]
// CHK-C:       atomic_exit343:
// CHK-C-NEXT:    [[TMP128:%.*]] = load i32, i32* [[ATMP316]], align 4
// CHK-C-NEXT:    [[TMP129:%.*]] = load i8, i8* [[ATMP322]], align 1
// CHK-C-NEXT:    [[TMP130:%.*]] = trunc i8 [[TMP129]] to i1
// CHK-C-NEXT:    br i1 [[TMP130]], label [[ATOMIC_CAPTURE_CONT345:%.*]], label [[ATOMIC_CAPTURE344:%.*]]
// CHK-C:       atomic_capture344:
// CHK-C-NEXT:    store i32 [[TMP128]], i32* [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT345]]
// CHK-C:       atomic_capture_cont345:
// CHK-C-NEXT:    [[TMP131:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP132:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD346:%.*]] = load atomic i8, i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3) monotonic, align 1
// CHK-C-NEXT:    [[TMP133:%.*]] = bitcast i32* [[ATOMIC_TEMP348]] to i8*
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD346]], i8* [[TMP133]], align 1
// CHK-C-NEXT:    [[BF_LOAD349:%.*]] = load i8, i8* [[TMP133]], align 1
// CHK-C-NEXT:    [[BF_ASHR350:%.*]] = ashr i8 [[BF_LOAD349]], 7
// CHK-C-NEXT:    [[BF_CAST351:%.*]] = sext i8 [[BF_ASHR350]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST351]], i32* [[ATMP347]], align 4
// CHK-C-NEXT:    [[CMP352:%.*]] = icmp eq i32 [[BF_CAST351]], [[TMP132]]
// CHK-C-NEXT:    [[FROMBOOL354:%.*]] = zext i1 [[CMP352]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL354]], i8* [[ATMP353]], align 1
// CHK-C-NEXT:    br i1 [[CMP352]], label [[ATOMIC_CONT355:%.*]], label [[ATOMIC_EXIT373:%.*]]
// CHK-C:       atomic_cont355:
// CHK-C-NEXT:    [[TMP134:%.*]] = phi i8 [ [[ATOMIC_LOAD346]], [[ATOMIC_CAPTURE_CONT345]] ], [ [[TMP140:%.*]], [[ATOMIC_CMP366:%.*]] ]
// CHK-C-NEXT:    [[TMP135:%.*]] = bitcast i32* [[ATOMIC_TEMP356]] to i8*
// CHK-C-NEXT:    store i8 [[TMP134]], i8* [[TMP135]], align 1
// CHK-C-NEXT:    [[BF_LOAD357:%.*]] = load i8, i8* [[TMP135]], align 1
// CHK-C-NEXT:    [[BF_ASHR358:%.*]] = ashr i8 [[BF_LOAD357]], 7
// CHK-C-NEXT:    [[BF_CAST359:%.*]] = sext i8 [[BF_ASHR358]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST359]], i32* [[ATMP347]], align 4
// CHK-C-NEXT:    [[TMP136:%.*]] = bitcast i32* [[ATOMIC_TEMP360]] to i8*
// CHK-C-NEXT:    store i8 [[TMP134]], i8* [[TMP136]], align 1
// CHK-C-NEXT:    [[TMP137:%.*]] = trunc i32 [[TMP131]] to i8
// CHK-C-NEXT:    [[BF_LOAD361:%.*]] = load i8, i8* [[TMP136]], align 1
// CHK-C-NEXT:    [[BF_VALUE362:%.*]] = and i8 [[TMP137]], 1
// CHK-C-NEXT:    [[BF_SHL363:%.*]] = shl i8 [[BF_VALUE362]], 7
// CHK-C-NEXT:    [[BF_CLEAR364:%.*]] = and i8 [[BF_LOAD361]], 127
// CHK-C-NEXT:    [[BF_SET365:%.*]] = or i8 [[BF_CLEAR364]], [[BF_SHL363]]
// CHK-C-NEXT:    store i8 [[BF_SET365]], i8* [[TMP136]], align 1
// CHK-C-NEXT:    [[TMP138:%.*]] = load i8, i8* [[TMP136]], align 1
// CHK-C-NEXT:    [[TMP139:%.*]] = cmpxchg i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3), i8 [[TMP134]], i8 [[TMP138]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP140]] = extractvalue { i8, i1 } [[TMP139]], 0
// CHK-C-NEXT:    [[TMP141:%.*]] = extractvalue { i8, i1 } [[TMP139]], 1
// CHK-C-NEXT:    br i1 [[TMP141]], label [[ATOMIC_EXIT373]], label [[ATOMIC_CMP366]]
// CHK-C:       atomic_cmp366:
// CHK-C-NEXT:    [[TMP142:%.*]] = bitcast i32* [[ATOMIC_TEMP367]] to i8*
// CHK-C-NEXT:    store i8 [[TMP140]], i8* [[TMP142]], align 1
// CHK-C-NEXT:    [[BF_LOAD368:%.*]] = load i8, i8* [[TMP142]], align 1
// CHK-C-NEXT:    [[BF_ASHR369:%.*]] = ashr i8 [[BF_LOAD368]], 7
// CHK-C-NEXT:    [[BF_CAST370:%.*]] = sext i8 [[BF_ASHR369]] to i32
// CHK-C-NEXT:    [[CMP371:%.*]] = icmp eq i32 [[BF_CAST370]], [[TMP132]]
// CHK-C-NEXT:    [[FROMBOOL372:%.*]] = zext i1 [[CMP371]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL372]], i8* [[ATMP353]], align 1
// CHK-C-NEXT:    br i1 [[CMP371]], label [[ATOMIC_CONT355]], label [[ATOMIC_EXIT373]]
// CHK-C:       atomic_exit373:
// CHK-C-NEXT:    [[TMP143:%.*]] = load i32, i32* [[ATMP347]], align 4
// CHK-C-NEXT:    [[TMP144:%.*]] = load i8, i8* [[ATMP353]], align 1
// CHK-C-NEXT:    [[CONV374:%.*]] = zext i8 [[TMP144]] to i32
// CHK-C-NEXT:    store i32 [[CONV374]], i32* [[R]], align 4
// CHK-C-NEXT:    [[TMP145:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP146:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD375:%.*]] = load atomic i8, i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3) monotonic, align 1
// CHK-C-NEXT:    [[TMP147:%.*]] = bitcast i32* [[ATOMIC_TEMP377]] to i8*
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD375]], i8* [[TMP147]], align 1
// CHK-C-NEXT:    [[BF_LOAD378:%.*]] = load i8, i8* [[TMP147]], align 1
// CHK-C-NEXT:    [[BF_ASHR379:%.*]] = ashr i8 [[BF_LOAD378]], 7
// CHK-C-NEXT:    [[BF_CAST380:%.*]] = sext i8 [[BF_ASHR379]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST380]], i32* [[ATMP376]], align 4
// CHK-C-NEXT:    [[CMP381:%.*]] = icmp eq i32 [[BF_CAST380]], [[TMP146]]
// CHK-C-NEXT:    [[FROMBOOL383:%.*]] = zext i1 [[CMP381]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL383]], i8* [[ATMP382]], align 1
// CHK-C-NEXT:    br i1 [[CMP381]], label [[ATOMIC_CONT384:%.*]], label [[ATOMIC_EXIT402:%.*]]
// CHK-C:       atomic_cont384:
// CHK-C-NEXT:    [[TMP148:%.*]] = phi i8 [ [[ATOMIC_LOAD375]], [[ATOMIC_EXIT373]] ], [ [[TMP154:%.*]], [[ATOMIC_CMP395:%.*]] ]
// CHK-C-NEXT:    [[TMP149:%.*]] = bitcast i32* [[ATOMIC_TEMP385]] to i8*
// CHK-C-NEXT:    store i8 [[TMP148]], i8* [[TMP149]], align 1
// CHK-C-NEXT:    [[BF_LOAD386:%.*]] = load i8, i8* [[TMP149]], align 1
// CHK-C-NEXT:    [[BF_ASHR387:%.*]] = ashr i8 [[BF_LOAD386]], 7
// CHK-C-NEXT:    [[BF_CAST388:%.*]] = sext i8 [[BF_ASHR387]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST388]], i32* [[ATMP376]], align 4
// CHK-C-NEXT:    [[TMP150:%.*]] = bitcast i32* [[ATOMIC_TEMP389]] to i8*
// CHK-C-NEXT:    store i8 [[TMP148]], i8* [[TMP150]], align 1
// CHK-C-NEXT:    [[TMP151:%.*]] = trunc i32 [[TMP145]] to i8
// CHK-C-NEXT:    [[BF_LOAD390:%.*]] = load i8, i8* [[TMP150]], align 1
// CHK-C-NEXT:    [[BF_VALUE391:%.*]] = and i8 [[TMP151]], 1
// CHK-C-NEXT:    [[BF_SHL392:%.*]] = shl i8 [[BF_VALUE391]], 7
// CHK-C-NEXT:    [[BF_CLEAR393:%.*]] = and i8 [[BF_LOAD390]], 127
// CHK-C-NEXT:    [[BF_SET394:%.*]] = or i8 [[BF_CLEAR393]], [[BF_SHL392]]
// CHK-C-NEXT:    store i8 [[BF_SET394]], i8* [[TMP150]], align 1
// CHK-C-NEXT:    [[TMP152:%.*]] = load i8, i8* [[TMP150]], align 1
// CHK-C-NEXT:    [[TMP153:%.*]] = cmpxchg i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3), i8 [[TMP148]], i8 [[TMP152]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP154]] = extractvalue { i8, i1 } [[TMP153]], 0
// CHK-C-NEXT:    [[TMP155:%.*]] = extractvalue { i8, i1 } [[TMP153]], 1
// CHK-C-NEXT:    br i1 [[TMP155]], label [[ATOMIC_EXIT402]], label [[ATOMIC_CMP395]]
// CHK-C:       atomic_cmp395:
// CHK-C-NEXT:    [[TMP156:%.*]] = bitcast i32* [[ATOMIC_TEMP396]] to i8*
// CHK-C-NEXT:    store i8 [[TMP154]], i8* [[TMP156]], align 1
// CHK-C-NEXT:    [[BF_LOAD397:%.*]] = load i8, i8* [[TMP156]], align 1
// CHK-C-NEXT:    [[BF_ASHR398:%.*]] = ashr i8 [[BF_LOAD397]], 7
// CHK-C-NEXT:    [[BF_CAST399:%.*]] = sext i8 [[BF_ASHR398]] to i32
// CHK-C-NEXT:    [[CMP400:%.*]] = icmp eq i32 [[BF_CAST399]], [[TMP146]]
// CHK-C-NEXT:    [[FROMBOOL401:%.*]] = zext i1 [[CMP400]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL401]], i8* [[ATMP382]], align 1
// CHK-C-NEXT:    br i1 [[CMP400]], label [[ATOMIC_CONT384]], label [[ATOMIC_EXIT402]]
// CHK-C:       atomic_exit402:
// CHK-C-NEXT:    [[TMP157:%.*]] = load i32, i32* [[ATMP376]], align 4
// CHK-C-NEXT:    [[TMP158:%.*]] = load i8, i8* [[ATMP382]], align 1
// CHK-C-NEXT:    [[CONV403:%.*]] = zext i8 [[TMP158]] to i32
// CHK-C-NEXT:    store i32 [[CONV403]], i32* [[R]], align 4
// CHK-C-NEXT:    [[TMP159:%.*]] = trunc i8 [[TMP158]] to i1
// CHK-C-NEXT:    br i1 [[TMP159]], label [[ATOMIC_CAPTURE_CONT405:%.*]], label [[ATOMIC_CAPTURE404:%.*]]
// CHK-C:       atomic_capture404:
// CHK-C-NEXT:    store i32 [[TMP157]], i32* [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT405]]
// CHK-C:       atomic_capture_cont405:
// CHK-C-NEXT:    [[TMP160:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD406:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS3:%.*]], %struct.BitFields3* @bfx3, i32 0, i32 0) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD406]], i32* [[ATOMIC_TEMP408]], align 4
// CHK-C-NEXT:    [[BF_LOAD409:%.*]] = load i32, i32* [[ATOMIC_TEMP408]], align 4
// CHK-C-NEXT:    [[BF_SHL410:%.*]] = shl i32 [[BF_LOAD409]], 7
// CHK-C-NEXT:    [[BF_ASHR411:%.*]] = ashr i32 [[BF_SHL410]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR411]], i32* [[ATMP407]], align 4
// CHK-C-NEXT:    [[CMP412:%.*]] = icmp slt i32 [[BF_ASHR411]], [[TMP160]]
// CHK-C-NEXT:    [[FROMBOOL414:%.*]] = zext i1 [[CMP412]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL414]], i8* [[ATMP413]], align 1
// CHK-C-NEXT:    br i1 [[CMP412]], label [[ATOMIC_CONT415:%.*]], label [[ATOMIC_EXIT433:%.*]]
// CHK-C:       atomic_cont415:
// CHK-C-NEXT:    [[TMP161:%.*]] = phi i32 [ [[ATOMIC_LOAD406]], [[ATOMIC_CAPTURE_CONT405]] ], [ [[TMP164:%.*]], [[ATOMIC_CMP426:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP161]], i32* [[ATOMIC_TEMP416]], align 4
// CHK-C-NEXT:    [[BF_LOAD417:%.*]] = load i32, i32* [[ATOMIC_TEMP416]], align 4
// CHK-C-NEXT:    [[BF_SHL418:%.*]] = shl i32 [[BF_LOAD417]], 7
// CHK-C-NEXT:    [[BF_ASHR419:%.*]] = ashr i32 [[BF_SHL418]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR419]], i32* [[ATMP407]], align 4
// CHK-C-NEXT:    store i32 [[TMP161]], i32* [[ATOMIC_TEMP420]], align 4
// CHK-C-NEXT:    [[BF_LOAD421:%.*]] = load i32, i32* [[ATOMIC_TEMP420]], align 4
// CHK-C-NEXT:    [[BF_VALUE422:%.*]] = and i32 [[TMP160]], 16383
// CHK-C-NEXT:    [[BF_SHL423:%.*]] = shl i32 [[BF_VALUE422]], 11
// CHK-C-NEXT:    [[BF_CLEAR424:%.*]] = and i32 [[BF_LOAD421]], -33552385
// CHK-C-NEXT:    [[BF_SET425:%.*]] = or i32 [[BF_CLEAR424]], [[BF_SHL423]]
// CHK-C-NEXT:    store i32 [[BF_SET425]], i32* [[ATOMIC_TEMP420]], align 4
// CHK-C-NEXT:    [[TMP162:%.*]] = load i32, i32* [[ATOMIC_TEMP420]], align 4
// CHK-C-NEXT:    [[TMP163:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0), i32 [[TMP161]], i32 [[TMP162]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP164]] = extractvalue { i32, i1 } [[TMP163]], 0
// CHK-C-NEXT:    [[TMP165:%.*]] = extractvalue { i32, i1 } [[TMP163]], 1
// CHK-C-NEXT:    br i1 [[TMP165]], label [[ATOMIC_EXIT433]], label [[ATOMIC_CMP426]]
// CHK-C:       atomic_cmp426:
// CHK-C-NEXT:    store i32 [[TMP164]], i32* [[ATOMIC_TEMP427]], align 4
// CHK-C-NEXT:    [[BF_LOAD428:%.*]] = load i32, i32* [[ATOMIC_TEMP427]], align 4
// CHK-C-NEXT:    [[BF_SHL429:%.*]] = shl i32 [[BF_LOAD428]], 7
// CHK-C-NEXT:    [[BF_ASHR430:%.*]] = ashr i32 [[BF_SHL429]], 18
// CHK-C-NEXT:    [[CMP431:%.*]] = icmp slt i32 [[BF_ASHR430]], [[TMP160]]
// CHK-C-NEXT:    [[FROMBOOL432:%.*]] = zext i1 [[CMP431]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL432]], i8* [[ATMP413]], align 1
// CHK-C-NEXT:    br i1 [[CMP431]], label [[ATOMIC_CONT415]], label [[ATOMIC_EXIT433]]
// CHK-C:       atomic_exit433:
// CHK-C-NEXT:    [[TMP166:%.*]] = load i32, i32* [[ATMP407]], align 4
// CHK-C-NEXT:    [[TMP167:%.*]] = load i8, i8* [[ATMP413]], align 1
// CHK-C-NEXT:    store i32 [[TMP166]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP168:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD434:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD434]], i32* [[ATOMIC_TEMP436]], align 4
// CHK-C-NEXT:    [[BF_LOAD437:%.*]] = load i32, i32* [[ATOMIC_TEMP436]], align 4
// CHK-C-NEXT:    [[BF_SHL438:%.*]] = shl i32 [[BF_LOAD437]], 7
// CHK-C-NEXT:    [[BF_ASHR439:%.*]] = ashr i32 [[BF_SHL438]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR439]], i32* [[ATMP435]], align 4
// CHK-C-NEXT:    [[CMP440:%.*]] = icmp slt i32 [[BF_ASHR439]], [[TMP168]]
// CHK-C-NEXT:    [[FROMBOOL442:%.*]] = zext i1 [[CMP440]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL442]], i8* [[ATMP441]], align 1
// CHK-C-NEXT:    br i1 [[CMP440]], label [[ATOMIC_CONT443:%.*]], label [[ATOMIC_EXIT462:%.*]]
// CHK-C:       atomic_cont443:
// CHK-C-NEXT:    [[TMP169:%.*]] = phi i32 [ [[ATOMIC_LOAD434]], [[ATOMIC_EXIT433]] ], [ [[TMP172:%.*]], [[ATOMIC_CMP455:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP169]], i32* [[ATOMIC_TEMP444]], align 4
// CHK-C-NEXT:    [[BF_LOAD445:%.*]] = load i32, i32* [[ATOMIC_TEMP444]], align 4
// CHK-C-NEXT:    [[BF_SHL446:%.*]] = shl i32 [[BF_LOAD445]], 7
// CHK-C-NEXT:    [[BF_ASHR447:%.*]] = ashr i32 [[BF_SHL446]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR447]], i32* [[ATMP435]], align 4
// CHK-C-NEXT:    store i32 [[TMP169]], i32* [[ATOMIC_TEMP448]], align 4
// CHK-C-NEXT:    [[BF_LOAD449:%.*]] = load i32, i32* [[ATOMIC_TEMP448]], align 4
// CHK-C-NEXT:    [[BF_VALUE450:%.*]] = and i32 [[TMP168]], 16383
// CHK-C-NEXT:    [[BF_SHL451:%.*]] = shl i32 [[BF_VALUE450]], 11
// CHK-C-NEXT:    [[BF_CLEAR452:%.*]] = and i32 [[BF_LOAD449]], -33552385
// CHK-C-NEXT:    [[BF_SET453:%.*]] = or i32 [[BF_CLEAR452]], [[BF_SHL451]]
// CHK-C-NEXT:    store i32 [[BF_SET453]], i32* [[ATOMIC_TEMP448]], align 4
// CHK-C-NEXT:    [[TMP170:%.*]] = load i32, i32* [[ATOMIC_TEMP448]], align 4
// CHK-C-NEXT:    [[TMP171:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0), i32 [[TMP169]], i32 [[TMP170]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP172]] = extractvalue { i32, i1 } [[TMP171]], 0
// CHK-C-NEXT:    [[TMP173:%.*]] = extractvalue { i32, i1 } [[TMP171]], 1
// CHK-C-NEXT:    br i1 [[TMP173]], label [[ATOMIC_UPD_EXIT454:%.*]], label [[ATOMIC_CMP455]]
// CHK-C:       atomic_upd_exit454:
// CHK-C-NEXT:    store i32 [[TMP168]], i32* [[ATMP435]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT462]]
// CHK-C:       atomic_cmp455:
// CHK-C-NEXT:    store i32 [[TMP172]], i32* [[ATOMIC_TEMP456]], align 4
// CHK-C-NEXT:    [[BF_LOAD457:%.*]] = load i32, i32* [[ATOMIC_TEMP456]], align 4
// CHK-C-NEXT:    [[BF_SHL458:%.*]] = shl i32 [[BF_LOAD457]], 7
// CHK-C-NEXT:    [[BF_ASHR459:%.*]] = ashr i32 [[BF_SHL458]], 18
// CHK-C-NEXT:    [[CMP460:%.*]] = icmp slt i32 [[BF_ASHR459]], [[TMP168]]
// CHK-C-NEXT:    [[FROMBOOL461:%.*]] = zext i1 [[CMP460]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL461]], i8* [[ATMP441]], align 1
// CHK-C-NEXT:    br i1 [[CMP460]], label [[ATOMIC_CONT443]], label [[ATOMIC_EXIT462]]
// CHK-C:       atomic_exit462:
// CHK-C-NEXT:    [[TMP174:%.*]] = load i32, i32* [[ATMP435]], align 4
// CHK-C-NEXT:    [[TMP175:%.*]] = load i8, i8* [[ATMP441]], align 1
// CHK-C-NEXT:    store i32 [[TMP174]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP176:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP177:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD463:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD463]], i32* [[ATOMIC_TEMP465]], align 4
// CHK-C-NEXT:    [[BF_LOAD466:%.*]] = load i32, i32* [[ATOMIC_TEMP465]], align 4
// CHK-C-NEXT:    [[BF_SHL467:%.*]] = shl i32 [[BF_LOAD466]], 7
// CHK-C-NEXT:    [[BF_ASHR468:%.*]] = ashr i32 [[BF_SHL467]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR468]], i32* [[ATMP464]], align 4
// CHK-C-NEXT:    [[CMP469:%.*]] = icmp eq i32 [[BF_ASHR468]], [[TMP177]]
// CHK-C-NEXT:    [[FROMBOOL471:%.*]] = zext i1 [[CMP469]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL471]], i8* [[ATMP470]], align 1
// CHK-C-NEXT:    br i1 [[CMP469]], label [[ATOMIC_CONT472:%.*]], label [[ATOMIC_EXIT491:%.*]]
// CHK-C:       atomic_cont472:
// CHK-C-NEXT:    [[TMP178:%.*]] = phi i32 [ [[ATOMIC_LOAD463]], [[ATOMIC_EXIT462]] ], [ [[TMP181:%.*]], [[ATOMIC_CMP484:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP178]], i32* [[ATOMIC_TEMP473]], align 4
// CHK-C-NEXT:    [[BF_LOAD474:%.*]] = load i32, i32* [[ATOMIC_TEMP473]], align 4
// CHK-C-NEXT:    [[BF_SHL475:%.*]] = shl i32 [[BF_LOAD474]], 7
// CHK-C-NEXT:    [[BF_ASHR476:%.*]] = ashr i32 [[BF_SHL475]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR476]], i32* [[ATMP464]], align 4
// CHK-C-NEXT:    store i32 [[TMP178]], i32* [[ATOMIC_TEMP477]], align 4
// CHK-C-NEXT:    [[BF_LOAD478:%.*]] = load i32, i32* [[ATOMIC_TEMP477]], align 4
// CHK-C-NEXT:    [[BF_VALUE479:%.*]] = and i32 [[TMP176]], 16383
// CHK-C-NEXT:    [[BF_SHL480:%.*]] = shl i32 [[BF_VALUE479]], 11
// CHK-C-NEXT:    [[BF_CLEAR481:%.*]] = and i32 [[BF_LOAD478]], -33552385
// CHK-C-NEXT:    [[BF_SET482:%.*]] = or i32 [[BF_CLEAR481]], [[BF_SHL480]]
// CHK-C-NEXT:    store i32 [[BF_SET482]], i32* [[ATOMIC_TEMP477]], align 4
// CHK-C-NEXT:    [[TMP179:%.*]] = load i32, i32* [[ATOMIC_TEMP477]], align 4
// CHK-C-NEXT:    [[TMP180:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0), i32 [[TMP178]], i32 [[TMP179]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP181]] = extractvalue { i32, i1 } [[TMP180]], 0
// CHK-C-NEXT:    [[TMP182:%.*]] = extractvalue { i32, i1 } [[TMP180]], 1
// CHK-C-NEXT:    br i1 [[TMP182]], label [[ATOMIC_UPD_EXIT483:%.*]], label [[ATOMIC_CMP484]]
// CHK-C:       atomic_upd_exit483:
// CHK-C-NEXT:    store i32 [[TMP176]], i32* [[ATMP464]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT491]]
// CHK-C:       atomic_cmp484:
// CHK-C-NEXT:    store i32 [[TMP181]], i32* [[ATOMIC_TEMP485]], align 4
// CHK-C-NEXT:    [[BF_LOAD486:%.*]] = load i32, i32* [[ATOMIC_TEMP485]], align 4
// CHK-C-NEXT:    [[BF_SHL487:%.*]] = shl i32 [[BF_LOAD486]], 7
// CHK-C-NEXT:    [[BF_ASHR488:%.*]] = ashr i32 [[BF_SHL487]], 18
// CHK-C-NEXT:    [[CMP489:%.*]] = icmp eq i32 [[BF_ASHR488]], [[TMP177]]
// CHK-C-NEXT:    [[FROMBOOL490:%.*]] = zext i1 [[CMP489]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL490]], i8* [[ATMP470]], align 1
// CHK-C-NEXT:    br i1 [[CMP489]], label [[ATOMIC_CONT472]], label [[ATOMIC_EXIT491]]
// CHK-C:       atomic_exit491:
// CHK-C-NEXT:    [[TMP183:%.*]] = load i32, i32* [[ATMP464]], align 4
// CHK-C-NEXT:    [[TMP184:%.*]] = load i8, i8* [[ATMP470]], align 1
// CHK-C-NEXT:    [[TMP185:%.*]] = trunc i8 [[TMP184]] to i1
// CHK-C-NEXT:    br i1 [[TMP185]], label [[ATOMIC_CAPTURE_CONT493:%.*]], label [[ATOMIC_CAPTURE492:%.*]]
// CHK-C:       atomic_capture492:
// CHK-C-NEXT:    store i32 [[TMP183]], i32* [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT493]]
// CHK-C:       atomic_capture_cont493:
// CHK-C-NEXT:    [[TMP186:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP187:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD494:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD494]], i32* [[ATOMIC_TEMP496]], align 4
// CHK-C-NEXT:    [[BF_LOAD497:%.*]] = load i32, i32* [[ATOMIC_TEMP496]], align 4
// CHK-C-NEXT:    [[BF_SHL498:%.*]] = shl i32 [[BF_LOAD497]], 7
// CHK-C-NEXT:    [[BF_ASHR499:%.*]] = ashr i32 [[BF_SHL498]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR499]], i32* [[ATMP495]], align 4
// CHK-C-NEXT:    [[CMP500:%.*]] = icmp eq i32 [[BF_ASHR499]], [[TMP187]]
// CHK-C-NEXT:    [[FROMBOOL502:%.*]] = zext i1 [[CMP500]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL502]], i8* [[ATMP501]], align 1
// CHK-C-NEXT:    br i1 [[CMP500]], label [[ATOMIC_CONT503:%.*]], label [[ATOMIC_EXIT521:%.*]]
// CHK-C:       atomic_cont503:
// CHK-C-NEXT:    [[TMP188:%.*]] = phi i32 [ [[ATOMIC_LOAD494]], [[ATOMIC_CAPTURE_CONT493]] ], [ [[TMP191:%.*]], [[ATOMIC_CMP514:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP188]], i32* [[ATOMIC_TEMP504]], align 4
// CHK-C-NEXT:    [[BF_LOAD505:%.*]] = load i32, i32* [[ATOMIC_TEMP504]], align 4
// CHK-C-NEXT:    [[BF_SHL506:%.*]] = shl i32 [[BF_LOAD505]], 7
// CHK-C-NEXT:    [[BF_ASHR507:%.*]] = ashr i32 [[BF_SHL506]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR507]], i32* [[ATMP495]], align 4
// CHK-C-NEXT:    store i32 [[TMP188]], i32* [[ATOMIC_TEMP508]], align 4
// CHK-C-NEXT:    [[BF_LOAD509:%.*]] = load i32, i32* [[ATOMIC_TEMP508]], align 4
// CHK-C-NEXT:    [[BF_VALUE510:%.*]] = and i32 [[TMP186]], 16383
// CHK-C-NEXT:    [[BF_SHL511:%.*]] = shl i32 [[BF_VALUE510]], 11
// CHK-C-NEXT:    [[BF_CLEAR512:%.*]] = and i32 [[BF_LOAD509]], -33552385
// CHK-C-NEXT:    [[BF_SET513:%.*]] = or i32 [[BF_CLEAR512]], [[BF_SHL511]]
// CHK-C-NEXT:    store i32 [[BF_SET513]], i32* [[ATOMIC_TEMP508]], align 4
// CHK-C-NEXT:    [[TMP189:%.*]] = load i32, i32* [[ATOMIC_TEMP508]], align 4
// CHK-C-NEXT:    [[TMP190:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0), i32 [[TMP188]], i32 [[TMP189]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP191]] = extractvalue { i32, i1 } [[TMP190]], 0
// CHK-C-NEXT:    [[TMP192:%.*]] = extractvalue { i32, i1 } [[TMP190]], 1
// CHK-C-NEXT:    br i1 [[TMP192]], label [[ATOMIC_EXIT521]], label [[ATOMIC_CMP514]]
// CHK-C:       atomic_cmp514:
// CHK-C-NEXT:    store i32 [[TMP191]], i32* [[ATOMIC_TEMP515]], align 4
// CHK-C-NEXT:    [[BF_LOAD516:%.*]] = load i32, i32* [[ATOMIC_TEMP515]], align 4
// CHK-C-NEXT:    [[BF_SHL517:%.*]] = shl i32 [[BF_LOAD516]], 7
// CHK-C-NEXT:    [[BF_ASHR518:%.*]] = ashr i32 [[BF_SHL517]], 18
// CHK-C-NEXT:    [[CMP519:%.*]] = icmp eq i32 [[BF_ASHR518]], [[TMP187]]
// CHK-C-NEXT:    [[FROMBOOL520:%.*]] = zext i1 [[CMP519]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL520]], i8* [[ATMP501]], align 1
// CHK-C-NEXT:    br i1 [[CMP519]], label [[ATOMIC_CONT503]], label [[ATOMIC_EXIT521]]
// CHK-C:       atomic_exit521:
// CHK-C-NEXT:    [[TMP193:%.*]] = load i32, i32* [[ATMP495]], align 4
// CHK-C-NEXT:    [[TMP194:%.*]] = load i8, i8* [[ATMP501]], align 1
// CHK-C-NEXT:    [[CONV522:%.*]] = zext i8 [[TMP194]] to i32
// CHK-C-NEXT:    store i32 [[CONV522]], i32* [[R]], align 4
// CHK-C-NEXT:    [[TMP195:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP196:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD523:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD523]], i32* [[ATOMIC_TEMP525]], align 4
// CHK-C-NEXT:    [[BF_LOAD526:%.*]] = load i32, i32* [[ATOMIC_TEMP525]], align 4
// CHK-C-NEXT:    [[BF_SHL527:%.*]] = shl i32 [[BF_LOAD526]], 7
// CHK-C-NEXT:    [[BF_ASHR528:%.*]] = ashr i32 [[BF_SHL527]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR528]], i32* [[ATMP524]], align 4
// CHK-C-NEXT:    [[CMP529:%.*]] = icmp eq i32 [[BF_ASHR528]], [[TMP196]]
// CHK-C-NEXT:    [[FROMBOOL531:%.*]] = zext i1 [[CMP529]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL531]], i8* [[ATMP530]], align 1
// CHK-C-NEXT:    br i1 [[CMP529]], label [[ATOMIC_CONT532:%.*]], label [[ATOMIC_EXIT550:%.*]]
// CHK-C:       atomic_cont532:
// CHK-C-NEXT:    [[TMP197:%.*]] = phi i32 [ [[ATOMIC_LOAD523]], [[ATOMIC_EXIT521]] ], [ [[TMP200:%.*]], [[ATOMIC_CMP543:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP197]], i32* [[ATOMIC_TEMP533]], align 4
// CHK-C-NEXT:    [[BF_LOAD534:%.*]] = load i32, i32* [[ATOMIC_TEMP533]], align 4
// CHK-C-NEXT:    [[BF_SHL535:%.*]] = shl i32 [[BF_LOAD534]], 7
// CHK-C-NEXT:    [[BF_ASHR536:%.*]] = ashr i32 [[BF_SHL535]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR536]], i32* [[ATMP524]], align 4
// CHK-C-NEXT:    store i32 [[TMP197]], i32* [[ATOMIC_TEMP537]], align 4
// CHK-C-NEXT:    [[BF_LOAD538:%.*]] = load i32, i32* [[ATOMIC_TEMP537]], align 4
// CHK-C-NEXT:    [[BF_VALUE539:%.*]] = and i32 [[TMP195]], 16383
// CHK-C-NEXT:    [[BF_SHL540:%.*]] = shl i32 [[BF_VALUE539]], 11
// CHK-C-NEXT:    [[BF_CLEAR541:%.*]] = and i32 [[BF_LOAD538]], -33552385
// CHK-C-NEXT:    [[BF_SET542:%.*]] = or i32 [[BF_CLEAR541]], [[BF_SHL540]]
// CHK-C-NEXT:    store i32 [[BF_SET542]], i32* [[ATOMIC_TEMP537]], align 4
// CHK-C-NEXT:    [[TMP198:%.*]] = load i32, i32* [[ATOMIC_TEMP537]], align 4
// CHK-C-NEXT:    [[TMP199:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0), i32 [[TMP197]], i32 [[TMP198]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP200]] = extractvalue { i32, i1 } [[TMP199]], 0
// CHK-C-NEXT:    [[TMP201:%.*]] = extractvalue { i32, i1 } [[TMP199]], 1
// CHK-C-NEXT:    br i1 [[TMP201]], label [[ATOMIC_EXIT550]], label [[ATOMIC_CMP543]]
// CHK-C:       atomic_cmp543:
// CHK-C-NEXT:    store i32 [[TMP200]], i32* [[ATOMIC_TEMP544]], align 4
// CHK-C-NEXT:    [[BF_LOAD545:%.*]] = load i32, i32* [[ATOMIC_TEMP544]], align 4
// CHK-C-NEXT:    [[BF_SHL546:%.*]] = shl i32 [[BF_LOAD545]], 7
// CHK-C-NEXT:    [[BF_ASHR547:%.*]] = ashr i32 [[BF_SHL546]], 18
// CHK-C-NEXT:    [[CMP548:%.*]] = icmp eq i32 [[BF_ASHR547]], [[TMP196]]
// CHK-C-NEXT:    [[FROMBOOL549:%.*]] = zext i1 [[CMP548]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL549]], i8* [[ATMP530]], align 1
// CHK-C-NEXT:    br i1 [[CMP548]], label [[ATOMIC_CONT532]], label [[ATOMIC_EXIT550]]
// CHK-C:       atomic_exit550:
// CHK-C-NEXT:    [[TMP202:%.*]] = load i32, i32* [[ATMP524]], align 4
// CHK-C-NEXT:    [[TMP203:%.*]] = load i8, i8* [[ATMP530]], align 1
// CHK-C-NEXT:    [[CONV551:%.*]] = zext i8 [[TMP203]] to i32
// CHK-C-NEXT:    store i32 [[CONV551]], i32* [[R]], align 4
// CHK-C-NEXT:    [[TMP204:%.*]] = trunc i8 [[TMP203]] to i1
// CHK-C-NEXT:    br i1 [[TMP204]], label [[ATOMIC_CAPTURE_CONT553:%.*]], label [[ATOMIC_CAPTURE552:%.*]]
// CHK-C:       atomic_capture552:
// CHK-C-NEXT:    store i32 [[TMP202]], i32* [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT553]]
// CHK-C:       atomic_capture_cont553:
// CHK-C-NEXT:    [[TMP205:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD554:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD554]], i64* [[ATOMIC_TEMP556]], align 8
// CHK-C-NEXT:    [[BF_LOAD557:%.*]] = load i64, i64* [[ATOMIC_TEMP556]], align 8
// CHK-C-NEXT:    [[BF_SHL558:%.*]] = shl i64 [[BF_LOAD557]], 47
// CHK-C-NEXT:    [[BF_ASHR559:%.*]] = ashr i64 [[BF_SHL558]], 63
// CHK-C-NEXT:    [[BF_CAST560:%.*]] = trunc i64 [[BF_ASHR559]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST560]], i32* [[ATMP555]], align 4
// CHK-C-NEXT:    [[CMP561:%.*]] = icmp slt i32 [[BF_CAST560]], [[TMP205]]
// CHK-C-NEXT:    [[FROMBOOL563:%.*]] = zext i1 [[CMP561]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL563]], i8* [[ATMP562]], align 1
// CHK-C-NEXT:    br i1 [[CMP561]], label [[ATOMIC_CONT564:%.*]], label [[ATOMIC_EXIT584:%.*]]
// CHK-C:       atomic_cont564:
// CHK-C-NEXT:    [[TMP206:%.*]] = phi i64 [ [[ATOMIC_LOAD554]], [[ATOMIC_CAPTURE_CONT553]] ], [ [[TMP210:%.*]], [[ATOMIC_CMP576:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP206]], i64* [[ATOMIC_TEMP565]], align 8
// CHK-C-NEXT:    [[BF_LOAD566:%.*]] = load i64, i64* [[ATOMIC_TEMP565]], align 8
// CHK-C-NEXT:    [[BF_SHL567:%.*]] = shl i64 [[BF_LOAD566]], 47
// CHK-C-NEXT:    [[BF_ASHR568:%.*]] = ashr i64 [[BF_SHL567]], 63
// CHK-C-NEXT:    [[BF_CAST569:%.*]] = trunc i64 [[BF_ASHR568]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST569]], i32* [[ATMP555]], align 4
// CHK-C-NEXT:    store i64 [[TMP206]], i64* [[ATOMIC_TEMP570]], align 8
// CHK-C-NEXT:    [[TMP207:%.*]] = zext i32 [[TMP205]] to i64
// CHK-C-NEXT:    [[BF_LOAD571:%.*]] = load i64, i64* [[ATOMIC_TEMP570]], align 8
// CHK-C-NEXT:    [[BF_VALUE572:%.*]] = and i64 [[TMP207]], 1
// CHK-C-NEXT:    [[BF_SHL573:%.*]] = shl i64 [[BF_VALUE572]], 16
// CHK-C-NEXT:    [[BF_CLEAR574:%.*]] = and i64 [[BF_LOAD571]], -65537
// CHK-C-NEXT:    [[BF_SET575:%.*]] = or i64 [[BF_CLEAR574]], [[BF_SHL573]]
// CHK-C-NEXT:    store i64 [[BF_SET575]], i64* [[ATOMIC_TEMP570]], align 8
// CHK-C-NEXT:    [[TMP208:%.*]] = load i64, i64* [[ATOMIC_TEMP570]], align 8
// CHK-C-NEXT:    [[TMP209:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP206]], i64 [[TMP208]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP210]] = extractvalue { i64, i1 } [[TMP209]], 0
// CHK-C-NEXT:    [[TMP211:%.*]] = extractvalue { i64, i1 } [[TMP209]], 1
// CHK-C-NEXT:    br i1 [[TMP211]], label [[ATOMIC_EXIT584]], label [[ATOMIC_CMP576]]
// CHK-C:       atomic_cmp576:
// CHK-C-NEXT:    store i64 [[TMP210]], i64* [[ATOMIC_TEMP577]], align 8
// CHK-C-NEXT:    [[BF_LOAD578:%.*]] = load i64, i64* [[ATOMIC_TEMP577]], align 8
// CHK-C-NEXT:    [[BF_SHL579:%.*]] = shl i64 [[BF_LOAD578]], 47
// CHK-C-NEXT:    [[BF_ASHR580:%.*]] = ashr i64 [[BF_SHL579]], 63
// CHK-C-NEXT:    [[BF_CAST581:%.*]] = trunc i64 [[BF_ASHR580]] to i32
// CHK-C-NEXT:    [[CMP582:%.*]] = icmp slt i32 [[BF_CAST581]], [[TMP205]]
// CHK-C-NEXT:    [[FROMBOOL583:%.*]] = zext i1 [[CMP582]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL583]], i8* [[ATMP562]], align 1
// CHK-C-NEXT:    br i1 [[CMP582]], label [[ATOMIC_CONT564]], label [[ATOMIC_EXIT584]]
// CHK-C:       atomic_exit584:
// CHK-C-NEXT:    [[TMP212:%.*]] = load i32, i32* [[ATMP555]], align 4
// CHK-C-NEXT:    [[TMP213:%.*]] = load i8, i8* [[ATMP562]], align 1
// CHK-C-NEXT:    store i32 [[TMP212]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP214:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD585:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD585]], i64* [[ATOMIC_TEMP587]], align 8
// CHK-C-NEXT:    [[BF_LOAD588:%.*]] = load i64, i64* [[ATOMIC_TEMP587]], align 8
// CHK-C-NEXT:    [[BF_SHL589:%.*]] = shl i64 [[BF_LOAD588]], 47
// CHK-C-NEXT:    [[BF_ASHR590:%.*]] = ashr i64 [[BF_SHL589]], 63
// CHK-C-NEXT:    [[BF_CAST591:%.*]] = trunc i64 [[BF_ASHR590]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST591]], i32* [[ATMP586]], align 4
// CHK-C-NEXT:    [[CMP592:%.*]] = icmp slt i32 [[BF_CAST591]], [[TMP214]]
// CHK-C-NEXT:    [[FROMBOOL594:%.*]] = zext i1 [[CMP592]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL594]], i8* [[ATMP593]], align 1
// CHK-C-NEXT:    br i1 [[CMP592]], label [[ATOMIC_CONT595:%.*]], label [[ATOMIC_EXIT616:%.*]]
// CHK-C:       atomic_cont595:
// CHK-C-NEXT:    [[TMP215:%.*]] = phi i64 [ [[ATOMIC_LOAD585]], [[ATOMIC_EXIT584]] ], [ [[TMP219:%.*]], [[ATOMIC_CMP608:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP215]], i64* [[ATOMIC_TEMP596]], align 8
// CHK-C-NEXT:    [[BF_LOAD597:%.*]] = load i64, i64* [[ATOMIC_TEMP596]], align 8
// CHK-C-NEXT:    [[BF_SHL598:%.*]] = shl i64 [[BF_LOAD597]], 47
// CHK-C-NEXT:    [[BF_ASHR599:%.*]] = ashr i64 [[BF_SHL598]], 63
// CHK-C-NEXT:    [[BF_CAST600:%.*]] = trunc i64 [[BF_ASHR599]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST600]], i32* [[ATMP586]], align 4
// CHK-C-NEXT:    store i64 [[TMP215]], i64* [[ATOMIC_TEMP601]], align 8
// CHK-C-NEXT:    [[TMP216:%.*]] = zext i32 [[TMP214]] to i64
// CHK-C-NEXT:    [[BF_LOAD602:%.*]] = load i64, i64* [[ATOMIC_TEMP601]], align 8
// CHK-C-NEXT:    [[BF_VALUE603:%.*]] = and i64 [[TMP216]], 1
// CHK-C-NEXT:    [[BF_SHL604:%.*]] = shl i64 [[BF_VALUE603]], 16
// CHK-C-NEXT:    [[BF_CLEAR605:%.*]] = and i64 [[BF_LOAD602]], -65537
// CHK-C-NEXT:    [[BF_SET606:%.*]] = or i64 [[BF_CLEAR605]], [[BF_SHL604]]
// CHK-C-NEXT:    store i64 [[BF_SET606]], i64* [[ATOMIC_TEMP601]], align 8
// CHK-C-NEXT:    [[TMP217:%.*]] = load i64, i64* [[ATOMIC_TEMP601]], align 8
// CHK-C-NEXT:    [[TMP218:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP215]], i64 [[TMP217]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP219]] = extractvalue { i64, i1 } [[TMP218]], 0
// CHK-C-NEXT:    [[TMP220:%.*]] = extractvalue { i64, i1 } [[TMP218]], 1
// CHK-C-NEXT:    br i1 [[TMP220]], label [[ATOMIC_UPD_EXIT607:%.*]], label [[ATOMIC_CMP608]]
// CHK-C:       atomic_upd_exit607:
// CHK-C-NEXT:    store i32 [[TMP214]], i32* [[ATMP586]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT616]]
// CHK-C:       atomic_cmp608:
// CHK-C-NEXT:    store i64 [[TMP219]], i64* [[ATOMIC_TEMP609]], align 8
// CHK-C-NEXT:    [[BF_LOAD610:%.*]] = load i64, i64* [[ATOMIC_TEMP609]], align 8
// CHK-C-NEXT:    [[BF_SHL611:%.*]] = shl i64 [[BF_LOAD610]], 47
// CHK-C-NEXT:    [[BF_ASHR612:%.*]] = ashr i64 [[BF_SHL611]], 63
// CHK-C-NEXT:    [[BF_CAST613:%.*]] = trunc i64 [[BF_ASHR612]] to i32
// CHK-C-NEXT:    [[CMP614:%.*]] = icmp slt i32 [[BF_CAST613]], [[TMP214]]
// CHK-C-NEXT:    [[FROMBOOL615:%.*]] = zext i1 [[CMP614]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL615]], i8* [[ATMP593]], align 1
// CHK-C-NEXT:    br i1 [[CMP614]], label [[ATOMIC_CONT595]], label [[ATOMIC_EXIT616]]
// CHK-C:       atomic_exit616:
// CHK-C-NEXT:    [[TMP221:%.*]] = load i32, i32* [[ATMP586]], align 4
// CHK-C-NEXT:    [[TMP222:%.*]] = load i8, i8* [[ATMP593]], align 1
// CHK-C-NEXT:    store i32 [[TMP221]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP223:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP224:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD617:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD617]], i64* [[ATOMIC_TEMP619]], align 8
// CHK-C-NEXT:    [[BF_LOAD620:%.*]] = load i64, i64* [[ATOMIC_TEMP619]], align 8
// CHK-C-NEXT:    [[BF_SHL621:%.*]] = shl i64 [[BF_LOAD620]], 47
// CHK-C-NEXT:    [[BF_ASHR622:%.*]] = ashr i64 [[BF_SHL621]], 63
// CHK-C-NEXT:    [[BF_CAST623:%.*]] = trunc i64 [[BF_ASHR622]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST623]], i32* [[ATMP618]], align 4
// CHK-C-NEXT:    [[CMP624:%.*]] = icmp eq i32 [[BF_CAST623]], [[TMP224]]
// CHK-C-NEXT:    [[FROMBOOL626:%.*]] = zext i1 [[CMP624]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL626]], i8* [[ATMP625]], align 1
// CHK-C-NEXT:    br i1 [[CMP624]], label [[ATOMIC_CONT627:%.*]], label [[ATOMIC_EXIT648:%.*]]
// CHK-C:       atomic_cont627:
// CHK-C-NEXT:    [[TMP225:%.*]] = phi i64 [ [[ATOMIC_LOAD617]], [[ATOMIC_EXIT616]] ], [ [[TMP229:%.*]], [[ATOMIC_CMP640:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP225]], i64* [[ATOMIC_TEMP628]], align 8
// CHK-C-NEXT:    [[BF_LOAD629:%.*]] = load i64, i64* [[ATOMIC_TEMP628]], align 8
// CHK-C-NEXT:    [[BF_SHL630:%.*]] = shl i64 [[BF_LOAD629]], 47
// CHK-C-NEXT:    [[BF_ASHR631:%.*]] = ashr i64 [[BF_SHL630]], 63
// CHK-C-NEXT:    [[BF_CAST632:%.*]] = trunc i64 [[BF_ASHR631]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST632]], i32* [[ATMP618]], align 4
// CHK-C-NEXT:    store i64 [[TMP225]], i64* [[ATOMIC_TEMP633]], align 8
// CHK-C-NEXT:    [[TMP226:%.*]] = zext i32 [[TMP223]] to i64
// CHK-C-NEXT:    [[BF_LOAD634:%.*]] = load i64, i64* [[ATOMIC_TEMP633]], align 8
// CHK-C-NEXT:    [[BF_VALUE635:%.*]] = and i64 [[TMP226]], 1
// CHK-C-NEXT:    [[BF_SHL636:%.*]] = shl i64 [[BF_VALUE635]], 16
// CHK-C-NEXT:    [[BF_CLEAR637:%.*]] = and i64 [[BF_LOAD634]], -65537
// CHK-C-NEXT:    [[BF_SET638:%.*]] = or i64 [[BF_CLEAR637]], [[BF_SHL636]]
// CHK-C-NEXT:    store i64 [[BF_SET638]], i64* [[ATOMIC_TEMP633]], align 8
// CHK-C-NEXT:    [[TMP227:%.*]] = load i64, i64* [[ATOMIC_TEMP633]], align 8
// CHK-C-NEXT:    [[TMP228:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP225]], i64 [[TMP227]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP229]] = extractvalue { i64, i1 } [[TMP228]], 0
// CHK-C-NEXT:    [[TMP230:%.*]] = extractvalue { i64, i1 } [[TMP228]], 1
// CHK-C-NEXT:    br i1 [[TMP230]], label [[ATOMIC_UPD_EXIT639:%.*]], label [[ATOMIC_CMP640]]
// CHK-C:       atomic_upd_exit639:
// CHK-C-NEXT:    store i32 [[TMP223]], i32* [[ATMP618]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT648]]
// CHK-C:       atomic_cmp640:
// CHK-C-NEXT:    store i64 [[TMP229]], i64* [[ATOMIC_TEMP641]], align 8
// CHK-C-NEXT:    [[BF_LOAD642:%.*]] = load i64, i64* [[ATOMIC_TEMP641]], align 8
// CHK-C-NEXT:    [[BF_SHL643:%.*]] = shl i64 [[BF_LOAD642]], 47
// CHK-C-NEXT:    [[BF_ASHR644:%.*]] = ashr i64 [[BF_SHL643]], 63
// CHK-C-NEXT:    [[BF_CAST645:%.*]] = trunc i64 [[BF_ASHR644]] to i32
// CHK-C-NEXT:    [[CMP646:%.*]] = icmp eq i32 [[BF_CAST645]], [[TMP224]]
// CHK-C-NEXT:    [[FROMBOOL647:%.*]] = zext i1 [[CMP646]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL647]], i8* [[ATMP625]], align 1
// CHK-C-NEXT:    br i1 [[CMP646]], label [[ATOMIC_CONT627]], label [[ATOMIC_EXIT648]]
// CHK-C:       atomic_exit648:
// CHK-C-NEXT:    [[TMP231:%.*]] = load i32, i32* [[ATMP618]], align 4
// CHK-C-NEXT:    [[TMP232:%.*]] = load i8, i8* [[ATMP625]], align 1
// CHK-C-NEXT:    [[TMP233:%.*]] = trunc i8 [[TMP232]] to i1
// CHK-C-NEXT:    br i1 [[TMP233]], label [[ATOMIC_CAPTURE_CONT650:%.*]], label [[ATOMIC_CAPTURE649:%.*]]
// CHK-C:       atomic_capture649:
// CHK-C-NEXT:    store i32 [[TMP231]], i32* [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT650]]
// CHK-C:       atomic_capture_cont650:
// CHK-C-NEXT:    [[TMP234:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP235:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD651:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD651]], i64* [[ATOMIC_TEMP653]], align 8
// CHK-C-NEXT:    [[BF_LOAD654:%.*]] = load i64, i64* [[ATOMIC_TEMP653]], align 8
// CHK-C-NEXT:    [[BF_SHL655:%.*]] = shl i64 [[BF_LOAD654]], 47
// CHK-C-NEXT:    [[BF_ASHR656:%.*]] = ashr i64 [[BF_SHL655]], 63
// CHK-C-NEXT:    [[BF_CAST657:%.*]] = trunc i64 [[BF_ASHR656]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST657]], i32* [[ATMP652]], align 4
// CHK-C-NEXT:    [[CMP658:%.*]] = icmp eq i32 [[BF_CAST657]], [[TMP235]]
// CHK-C-NEXT:    [[FROMBOOL660:%.*]] = zext i1 [[CMP658]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL660]], i8* [[ATMP659]], align 1
// CHK-C-NEXT:    br i1 [[CMP658]], label [[ATOMIC_CONT661:%.*]], label [[ATOMIC_EXIT681:%.*]]
// CHK-C:       atomic_cont661:
// CHK-C-NEXT:    [[TMP236:%.*]] = phi i64 [ [[ATOMIC_LOAD651]], [[ATOMIC_CAPTURE_CONT650]] ], [ [[TMP240:%.*]], [[ATOMIC_CMP673:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP236]], i64* [[ATOMIC_TEMP662]], align 8
// CHK-C-NEXT:    [[BF_LOAD663:%.*]] = load i64, i64* [[ATOMIC_TEMP662]], align 8
// CHK-C-NEXT:    [[BF_SHL664:%.*]] = shl i64 [[BF_LOAD663]], 47
// CHK-C-NEXT:    [[BF_ASHR665:%.*]] = ashr i64 [[BF_SHL664]], 63
// CHK-C-NEXT:    [[BF_CAST666:%.*]] = trunc i64 [[BF_ASHR665]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST666]], i32* [[ATMP652]], align 4
// CHK-C-NEXT:    store i64 [[TMP236]], i64* [[ATOMIC_TEMP667]], align 8
// CHK-C-NEXT:    [[TMP237:%.*]] = zext i32 [[TMP234]] to i64
// CHK-C-NEXT:    [[BF_LOAD668:%.*]] = load i64, i64* [[ATOMIC_TEMP667]], align 8
// CHK-C-NEXT:    [[BF_VALUE669:%.*]] = and i64 [[TMP237]], 1
// CHK-C-NEXT:    [[BF_SHL670:%.*]] = shl i64 [[BF_VALUE669]], 16
// CHK-C-NEXT:    [[BF_CLEAR671:%.*]] = and i64 [[BF_LOAD668]], -65537
// CHK-C-NEXT:    [[BF_SET672:%.*]] = or i64 [[BF_CLEAR671]], [[BF_SHL670]]
// CHK-C-NEXT:    store i64 [[BF_SET672]], i64* [[ATOMIC_TEMP667]], align 8
// CHK-C-NEXT:    [[TMP238:%.*]] = load i64, i64* [[ATOMIC_TEMP667]], align 8
// CHK-C-NEXT:    [[TMP239:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP236]], i64 [[TMP238]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP240]] = extractvalue { i64, i1 } [[TMP239]], 0
// CHK-C-NEXT:    [[TMP241:%.*]] = extractvalue { i64, i1 } [[TMP239]], 1
// CHK-C-NEXT:    br i1 [[TMP241]], label [[ATOMIC_EXIT681]], label [[ATOMIC_CMP673]]
// CHK-C:       atomic_cmp673:
// CHK-C-NEXT:    store i64 [[TMP240]], i64* [[ATOMIC_TEMP674]], align 8
// CHK-C-NEXT:    [[BF_LOAD675:%.*]] = load i64, i64* [[ATOMIC_TEMP674]], align 8
// CHK-C-NEXT:    [[BF_SHL676:%.*]] = shl i64 [[BF_LOAD675]], 47
// CHK-C-NEXT:    [[BF_ASHR677:%.*]] = ashr i64 [[BF_SHL676]], 63
// CHK-C-NEXT:    [[BF_CAST678:%.*]] = trunc i64 [[BF_ASHR677]] to i32
// CHK-C-NEXT:    [[CMP679:%.*]] = icmp eq i32 [[BF_CAST678]], [[TMP235]]
// CHK-C-NEXT:    [[FROMBOOL680:%.*]] = zext i1 [[CMP679]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL680]], i8* [[ATMP659]], align 1
// CHK-C-NEXT:    br i1 [[CMP679]], label [[ATOMIC_CONT661]], label [[ATOMIC_EXIT681]]
// CHK-C:       atomic_exit681:
// CHK-C-NEXT:    [[TMP242:%.*]] = load i32, i32* [[ATMP652]], align 4
// CHK-C-NEXT:    [[TMP243:%.*]] = load i8, i8* [[ATMP659]], align 1
// CHK-C-NEXT:    [[CONV682:%.*]] = zext i8 [[TMP243]] to i32
// CHK-C-NEXT:    store i32 [[CONV682]], i32* [[R]], align 4
// CHK-C-NEXT:    [[TMP244:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP245:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD683:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD683]], i64* [[ATOMIC_TEMP685]], align 8
// CHK-C-NEXT:    [[BF_LOAD686:%.*]] = load i64, i64* [[ATOMIC_TEMP685]], align 8
// CHK-C-NEXT:    [[BF_SHL687:%.*]] = shl i64 [[BF_LOAD686]], 47
// CHK-C-NEXT:    [[BF_ASHR688:%.*]] = ashr i64 [[BF_SHL687]], 63
// CHK-C-NEXT:    [[BF_CAST689:%.*]] = trunc i64 [[BF_ASHR688]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST689]], i32* [[ATMP684]], align 4
// CHK-C-NEXT:    [[CMP690:%.*]] = icmp eq i32 [[BF_CAST689]], [[TMP245]]
// CHK-C-NEXT:    [[FROMBOOL692:%.*]] = zext i1 [[CMP690]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL692]], i8* [[ATMP691]], align 1
// CHK-C-NEXT:    br i1 [[CMP690]], label [[ATOMIC_CONT693:%.*]], label [[ATOMIC_EXIT713:%.*]]
// CHK-C:       atomic_cont693:
// CHK-C-NEXT:    [[TMP246:%.*]] = phi i64 [ [[ATOMIC_LOAD683]], [[ATOMIC_EXIT681]] ], [ [[TMP250:%.*]], [[ATOMIC_CMP705:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP246]], i64* [[ATOMIC_TEMP694]], align 8
// CHK-C-NEXT:    [[BF_LOAD695:%.*]] = load i64, i64* [[ATOMIC_TEMP694]], align 8
// CHK-C-NEXT:    [[BF_SHL696:%.*]] = shl i64 [[BF_LOAD695]], 47
// CHK-C-NEXT:    [[BF_ASHR697:%.*]] = ashr i64 [[BF_SHL696]], 63
// CHK-C-NEXT:    [[BF_CAST698:%.*]] = trunc i64 [[BF_ASHR697]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST698]], i32* [[ATMP684]], align 4
// CHK-C-NEXT:    store i64 [[TMP246]], i64* [[ATOMIC_TEMP699]], align 8
// CHK-C-NEXT:    [[TMP247:%.*]] = zext i32 [[TMP244]] to i64
// CHK-C-NEXT:    [[BF_LOAD700:%.*]] = load i64, i64* [[ATOMIC_TEMP699]], align 8
// CHK-C-NEXT:    [[BF_VALUE701:%.*]] = and i64 [[TMP247]], 1
// CHK-C-NEXT:    [[BF_SHL702:%.*]] = shl i64 [[BF_VALUE701]], 16
// CHK-C-NEXT:    [[BF_CLEAR703:%.*]] = and i64 [[BF_LOAD700]], -65537
// CHK-C-NEXT:    [[BF_SET704:%.*]] = or i64 [[BF_CLEAR703]], [[BF_SHL702]]
// CHK-C-NEXT:    store i64 [[BF_SET704]], i64* [[ATOMIC_TEMP699]], align 8
// CHK-C-NEXT:    [[TMP248:%.*]] = load i64, i64* [[ATOMIC_TEMP699]], align 8
// CHK-C-NEXT:    [[TMP249:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP246]], i64 [[TMP248]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP250]] = extractvalue { i64, i1 } [[TMP249]], 0
// CHK-C-NEXT:    [[TMP251:%.*]] = extractvalue { i64, i1 } [[TMP249]], 1
// CHK-C-NEXT:    br i1 [[TMP251]], label [[ATOMIC_EXIT713]], label [[ATOMIC_CMP705]]
// CHK-C:       atomic_cmp705:
// CHK-C-NEXT:    store i64 [[TMP250]], i64* [[ATOMIC_TEMP706]], align 8
// CHK-C-NEXT:    [[BF_LOAD707:%.*]] = load i64, i64* [[ATOMIC_TEMP706]], align 8
// CHK-C-NEXT:    [[BF_SHL708:%.*]] = shl i64 [[BF_LOAD707]], 47
// CHK-C-NEXT:    [[BF_ASHR709:%.*]] = ashr i64 [[BF_SHL708]], 63
// CHK-C-NEXT:    [[BF_CAST710:%.*]] = trunc i64 [[BF_ASHR709]] to i32
// CHK-C-NEXT:    [[CMP711:%.*]] = icmp eq i32 [[BF_CAST710]], [[TMP245]]
// CHK-C-NEXT:    [[FROMBOOL712:%.*]] = zext i1 [[CMP711]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL712]], i8* [[ATMP691]], align 1
// CHK-C-NEXT:    br i1 [[CMP711]], label [[ATOMIC_CONT693]], label [[ATOMIC_EXIT713]]
// CHK-C:       atomic_exit713:
// CHK-C-NEXT:    [[TMP252:%.*]] = load i32, i32* [[ATMP684]], align 4
// CHK-C-NEXT:    [[TMP253:%.*]] = load i8, i8* [[ATMP691]], align 1
// CHK-C-NEXT:    [[CONV714:%.*]] = zext i8 [[TMP253]] to i32
// CHK-C-NEXT:    store i32 [[CONV714]], i32* [[R]], align 4
// CHK-C-NEXT:    [[TMP254:%.*]] = trunc i8 [[TMP253]] to i1
// CHK-C-NEXT:    br i1 [[TMP254]], label [[ATOMIC_CAPTURE_CONT716:%.*]], label [[ATOMIC_CAPTURE715:%.*]]
// CHK-C:       atomic_capture715:
// CHK-C-NEXT:    store i32 [[TMP252]], i32* [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT716]]
// CHK-C:       atomic_capture_cont716:
// CHK-C-NEXT:    [[TMP255:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[CONV717:%.*]] = sext i32 [[TMP255]] to i64
// CHK-C-NEXT:    [[ATOMIC_LOAD718:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD718]], i64* [[ATOMIC_TEMP720]], align 8
// CHK-C-NEXT:    [[BF_LOAD721:%.*]] = load i64, i64* [[ATOMIC_TEMP720]], align 8
// CHK-C-NEXT:    [[BF_SHL722:%.*]] = shl i64 [[BF_LOAD721]], 40
// CHK-C-NEXT:    [[BF_ASHR723:%.*]] = ashr i64 [[BF_SHL722]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR723]], i64* [[ATMP719]], align 8
// CHK-C-NEXT:    [[CMP724:%.*]] = icmp slt i64 [[BF_ASHR723]], [[CONV717]]
// CHK-C-NEXT:    [[FROMBOOL726:%.*]] = zext i1 [[CMP724]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL726]], i8* [[ATMP725]], align 1
// CHK-C-NEXT:    br i1 [[CMP724]], label [[ATOMIC_CONT727:%.*]], label [[ATOMIC_EXIT745:%.*]]
// CHK-C:       atomic_cont727:
// CHK-C-NEXT:    [[TMP256:%.*]] = phi i64 [ [[ATOMIC_LOAD718]], [[ATOMIC_CAPTURE_CONT716]] ], [ [[TMP259:%.*]], [[ATOMIC_CMP738:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP256]], i64* [[ATOMIC_TEMP728]], align 8
// CHK-C-NEXT:    [[BF_LOAD729:%.*]] = load i64, i64* [[ATOMIC_TEMP728]], align 8
// CHK-C-NEXT:    [[BF_SHL730:%.*]] = shl i64 [[BF_LOAD729]], 40
// CHK-C-NEXT:    [[BF_ASHR731:%.*]] = ashr i64 [[BF_SHL730]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR731]], i64* [[ATMP719]], align 8
// CHK-C-NEXT:    store i64 [[TMP256]], i64* [[ATOMIC_TEMP732]], align 8
// CHK-C-NEXT:    [[BF_LOAD733:%.*]] = load i64, i64* [[ATOMIC_TEMP732]], align 8
// CHK-C-NEXT:    [[BF_VALUE734:%.*]] = and i64 [[CONV717]], 127
// CHK-C-NEXT:    [[BF_SHL735:%.*]] = shl i64 [[BF_VALUE734]], 17
// CHK-C-NEXT:    [[BF_CLEAR736:%.*]] = and i64 [[BF_LOAD733]], -16646145
// CHK-C-NEXT:    [[BF_SET737:%.*]] = or i64 [[BF_CLEAR736]], [[BF_SHL735]]
// CHK-C-NEXT:    store i64 [[BF_SET737]], i64* [[ATOMIC_TEMP732]], align 8
// CHK-C-NEXT:    [[TMP257:%.*]] = load i64, i64* [[ATOMIC_TEMP732]], align 8
// CHK-C-NEXT:    [[TMP258:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP256]], i64 [[TMP257]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP259]] = extractvalue { i64, i1 } [[TMP258]], 0
// CHK-C-NEXT:    [[TMP260:%.*]] = extractvalue { i64, i1 } [[TMP258]], 1
// CHK-C-NEXT:    br i1 [[TMP260]], label [[ATOMIC_EXIT745]], label [[ATOMIC_CMP738]]
// CHK-C:       atomic_cmp738:
// CHK-C-NEXT:    store i64 [[TMP259]], i64* [[ATOMIC_TEMP739]], align 8
// CHK-C-NEXT:    [[BF_LOAD740:%.*]] = load i64, i64* [[ATOMIC_TEMP739]], align 8
// CHK-C-NEXT:    [[BF_SHL741:%.*]] = shl i64 [[BF_LOAD740]], 40
// CHK-C-NEXT:    [[BF_ASHR742:%.*]] = ashr i64 [[BF_SHL741]], 57
// CHK-C-NEXT:    [[CMP743:%.*]] = icmp slt i64 [[BF_ASHR742]], [[CONV717]]
// CHK-C-NEXT:    [[FROMBOOL744:%.*]] = zext i1 [[CMP743]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL744]], i8* [[ATMP725]], align 1
// CHK-C-NEXT:    br i1 [[CMP743]], label [[ATOMIC_CONT727]], label [[ATOMIC_EXIT745]]
// CHK-C:       atomic_exit745:
// CHK-C-NEXT:    [[TMP261:%.*]] = load i64, i64* [[ATMP719]], align 8
// CHK-C-NEXT:    [[TMP262:%.*]] = load i8, i8* [[ATMP725]], align 1
// CHK-C-NEXT:    [[CONV746:%.*]] = trunc i64 [[TMP261]] to i32
// CHK-C-NEXT:    store i32 [[CONV746]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP263:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[CONV747:%.*]] = sext i32 [[TMP263]] to i64
// CHK-C-NEXT:    [[ATOMIC_LOAD748:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD748]], i64* [[ATOMIC_TEMP750]], align 8
// CHK-C-NEXT:    [[BF_LOAD751:%.*]] = load i64, i64* [[ATOMIC_TEMP750]], align 8
// CHK-C-NEXT:    [[BF_SHL752:%.*]] = shl i64 [[BF_LOAD751]], 40
// CHK-C-NEXT:    [[BF_ASHR753:%.*]] = ashr i64 [[BF_SHL752]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR753]], i64* [[ATMP749]], align 8
// CHK-C-NEXT:    [[CMP754:%.*]] = icmp slt i64 [[BF_ASHR753]], [[CONV747]]
// CHK-C-NEXT:    [[FROMBOOL756:%.*]] = zext i1 [[CMP754]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL756]], i8* [[ATMP755]], align 1
// CHK-C-NEXT:    br i1 [[CMP754]], label [[ATOMIC_CONT757:%.*]], label [[ATOMIC_EXIT776:%.*]]
// CHK-C:       atomic_cont757:
// CHK-C-NEXT:    [[TMP264:%.*]] = phi i64 [ [[ATOMIC_LOAD748]], [[ATOMIC_EXIT745]] ], [ [[TMP267:%.*]], [[ATOMIC_CMP769:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP264]], i64* [[ATOMIC_TEMP758]], align 8
// CHK-C-NEXT:    [[BF_LOAD759:%.*]] = load i64, i64* [[ATOMIC_TEMP758]], align 8
// CHK-C-NEXT:    [[BF_SHL760:%.*]] = shl i64 [[BF_LOAD759]], 40
// CHK-C-NEXT:    [[BF_ASHR761:%.*]] = ashr i64 [[BF_SHL760]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR761]], i64* [[ATMP749]], align 8
// CHK-C-NEXT:    store i64 [[TMP264]], i64* [[ATOMIC_TEMP762]], align 8
// CHK-C-NEXT:    [[BF_LOAD763:%.*]] = load i64, i64* [[ATOMIC_TEMP762]], align 8
// CHK-C-NEXT:    [[BF_VALUE764:%.*]] = and i64 [[CONV747]], 127
// CHK-C-NEXT:    [[BF_SHL765:%.*]] = shl i64 [[BF_VALUE764]], 17
// CHK-C-NEXT:    [[BF_CLEAR766:%.*]] = and i64 [[BF_LOAD763]], -16646145
// CHK-C-NEXT:    [[BF_SET767:%.*]] = or i64 [[BF_CLEAR766]], [[BF_SHL765]]
// CHK-C-NEXT:    store i64 [[BF_SET767]], i64* [[ATOMIC_TEMP762]], align 8
// CHK-C-NEXT:    [[TMP265:%.*]] = load i64, i64* [[ATOMIC_TEMP762]], align 8
// CHK-C-NEXT:    [[TMP266:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP264]], i64 [[TMP265]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP267]] = extractvalue { i64, i1 } [[TMP266]], 0
// CHK-C-NEXT:    [[TMP268:%.*]] = extractvalue { i64, i1 } [[TMP266]], 1
// CHK-C-NEXT:    br i1 [[TMP268]], label [[ATOMIC_UPD_EXIT768:%.*]], label [[ATOMIC_CMP769]]
// CHK-C:       atomic_upd_exit768:
// CHK-C-NEXT:    store i64 [[CONV747]], i64* [[ATMP749]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_EXIT776]]
// CHK-C:       atomic_cmp769:
// CHK-C-NEXT:    store i64 [[TMP267]], i64* [[ATOMIC_TEMP770]], align 8
// CHK-C-NEXT:    [[BF_LOAD771:%.*]] = load i64, i64* [[ATOMIC_TEMP770]], align 8
// CHK-C-NEXT:    [[BF_SHL772:%.*]] = shl i64 [[BF_LOAD771]], 40
// CHK-C-NEXT:    [[BF_ASHR773:%.*]] = ashr i64 [[BF_SHL772]], 57
// CHK-C-NEXT:    [[CMP774:%.*]] = icmp slt i64 [[BF_ASHR773]], [[CONV747]]
// CHK-C-NEXT:    [[FROMBOOL775:%.*]] = zext i1 [[CMP774]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL775]], i8* [[ATMP755]], align 1
// CHK-C-NEXT:    br i1 [[CMP774]], label [[ATOMIC_CONT757]], label [[ATOMIC_EXIT776]]
// CHK-C:       atomic_exit776:
// CHK-C-NEXT:    [[TMP269:%.*]] = load i64, i64* [[ATMP749]], align 8
// CHK-C-NEXT:    [[TMP270:%.*]] = load i8, i8* [[ATMP755]], align 1
// CHK-C-NEXT:    [[CONV777:%.*]] = trunc i64 [[TMP269]] to i32
// CHK-C-NEXT:    store i32 [[CONV777]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP271:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[CONV778:%.*]] = sext i32 [[TMP271]] to i64
// CHK-C-NEXT:    [[TMP272:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[CONV779:%.*]] = sext i32 [[TMP272]] to i64
// CHK-C-NEXT:    [[ATOMIC_LOAD780:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD780]], i64* [[ATOMIC_TEMP782]], align 8
// CHK-C-NEXT:    [[BF_LOAD783:%.*]] = load i64, i64* [[ATOMIC_TEMP782]], align 8
// CHK-C-NEXT:    [[BF_SHL784:%.*]] = shl i64 [[BF_LOAD783]], 40
// CHK-C-NEXT:    [[BF_ASHR785:%.*]] = ashr i64 [[BF_SHL784]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR785]], i64* [[ATMP781]], align 8
// CHK-C-NEXT:    [[CMP786:%.*]] = icmp eq i64 [[BF_ASHR785]], [[CONV779]]
// CHK-C-NEXT:    [[FROMBOOL788:%.*]] = zext i1 [[CMP786]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL788]], i8* [[ATMP787]], align 1
// CHK-C-NEXT:    br i1 [[CMP786]], label [[ATOMIC_CONT789:%.*]], label [[ATOMIC_EXIT808:%.*]]
// CHK-C:       atomic_cont789:
// CHK-C-NEXT:    [[TMP273:%.*]] = phi i64 [ [[ATOMIC_LOAD780]], [[ATOMIC_EXIT776]] ], [ [[TMP276:%.*]], [[ATOMIC_CMP801:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP273]], i64* [[ATOMIC_TEMP790]], align 8
// CHK-C-NEXT:    [[BF_LOAD791:%.*]] = load i64, i64* [[ATOMIC_TEMP790]], align 8
// CHK-C-NEXT:    [[BF_SHL792:%.*]] = shl i64 [[BF_LOAD791]], 40
// CHK-C-NEXT:    [[BF_ASHR793:%.*]] = ashr i64 [[BF_SHL792]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR793]], i64* [[ATMP781]], align 8
// CHK-C-NEXT:    store i64 [[TMP273]], i64* [[ATOMIC_TEMP794]], align 8
// CHK-C-NEXT:    [[BF_LOAD795:%.*]] = load i64, i64* [[ATOMIC_TEMP794]], align 8
// CHK-C-NEXT:    [[BF_VALUE796:%.*]] = and i64 [[CONV778]], 127
// CHK-C-NEXT:    [[BF_SHL797:%.*]] = shl i64 [[BF_VALUE796]], 17
// CHK-C-NEXT:    [[BF_CLEAR798:%.*]] = and i64 [[BF_LOAD795]], -16646145
// CHK-C-NEXT:    [[BF_SET799:%.*]] = or i64 [[BF_CLEAR798]], [[BF_SHL797]]
// CHK-C-NEXT:    store i64 [[BF_SET799]], i64* [[ATOMIC_TEMP794]], align 8
// CHK-C-NEXT:    [[TMP274:%.*]] = load i64, i64* [[ATOMIC_TEMP794]], align 8
// CHK-C-NEXT:    [[TMP275:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP273]], i64 [[TMP274]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP276]] = extractvalue { i64, i1 } [[TMP275]], 0
// CHK-C-NEXT:    [[TMP277:%.*]] = extractvalue { i64, i1 } [[TMP275]], 1
// CHK-C-NEXT:    br i1 [[TMP277]], label [[ATOMIC_UPD_EXIT800:%.*]], label [[ATOMIC_CMP801]]
// CHK-C:       atomic_upd_exit800:
// CHK-C-NEXT:    store i64 [[CONV778]], i64* [[ATMP781]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_EXIT808]]
// CHK-C:       atomic_cmp801:
// CHK-C-NEXT:    store i64 [[TMP276]], i64* [[ATOMIC_TEMP802]], align 8
// CHK-C-NEXT:    [[BF_LOAD803:%.*]] = load i64, i64* [[ATOMIC_TEMP802]], align 8
// CHK-C-NEXT:    [[BF_SHL804:%.*]] = shl i64 [[BF_LOAD803]], 40
// CHK-C-NEXT:    [[BF_ASHR805:%.*]] = ashr i64 [[BF_SHL804]], 57
// CHK-C-NEXT:    [[CMP806:%.*]] = icmp eq i64 [[BF_ASHR805]], [[CONV779]]
// CHK-C-NEXT:    [[FROMBOOL807:%.*]] = zext i1 [[CMP806]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL807]], i8* [[ATMP787]], align 1
// CHK-C-NEXT:    br i1 [[CMP806]], label [[ATOMIC_CONT789]], label [[ATOMIC_EXIT808]]
// CHK-C:       atomic_exit808:
// CHK-C-NEXT:    [[TMP278:%.*]] = load i64, i64* [[ATMP781]], align 8
// CHK-C-NEXT:    [[TMP279:%.*]] = load i8, i8* [[ATMP787]], align 1
// CHK-C-NEXT:    [[TMP280:%.*]] = trunc i8 [[TMP279]] to i1
// CHK-C-NEXT:    br i1 [[TMP280]], label [[ATOMIC_CAPTURE_CONT811:%.*]], label [[ATOMIC_CAPTURE809:%.*]]
// CHK-C:       atomic_capture809:
// CHK-C-NEXT:    [[CONV810:%.*]] = trunc i64 [[TMP278]] to i32
// CHK-C-NEXT:    store i32 [[CONV810]], i32* [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT811]]
// CHK-C:       atomic_capture_cont811:
// CHK-C-NEXT:    [[TMP281:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[CONV812:%.*]] = sext i32 [[TMP281]] to i64
// CHK-C-NEXT:    [[TMP282:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[CONV813:%.*]] = sext i32 [[TMP282]] to i64
// CHK-C-NEXT:    [[ATOMIC_LOAD814:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD814]], i64* [[ATOMIC_TEMP816]], align 8
// CHK-C-NEXT:    [[BF_LOAD817:%.*]] = load i64, i64* [[ATOMIC_TEMP816]], align 8
// CHK-C-NEXT:    [[BF_SHL818:%.*]] = shl i64 [[BF_LOAD817]], 40
// CHK-C-NEXT:    [[BF_ASHR819:%.*]] = ashr i64 [[BF_SHL818]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR819]], i64* [[ATMP815]], align 8
// CHK-C-NEXT:    [[CMP820:%.*]] = icmp eq i64 [[BF_ASHR819]], [[CONV813]]
// CHK-C-NEXT:    [[FROMBOOL822:%.*]] = zext i1 [[CMP820]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL822]], i8* [[ATMP821]], align 1
// CHK-C-NEXT:    br i1 [[CMP820]], label [[ATOMIC_CONT823:%.*]], label [[ATOMIC_EXIT841:%.*]]
// CHK-C:       atomic_cont823:
// CHK-C-NEXT:    [[TMP283:%.*]] = phi i64 [ [[ATOMIC_LOAD814]], [[ATOMIC_CAPTURE_CONT811]] ], [ [[TMP286:%.*]], [[ATOMIC_CMP834:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP283]], i64* [[ATOMIC_TEMP824]], align 8
// CHK-C-NEXT:    [[BF_LOAD825:%.*]] = load i64, i64* [[ATOMIC_TEMP824]], align 8
// CHK-C-NEXT:    [[BF_SHL826:%.*]] = shl i64 [[BF_LOAD825]], 40
// CHK-C-NEXT:    [[BF_ASHR827:%.*]] = ashr i64 [[BF_SHL826]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR827]], i64* [[ATMP815]], align 8
// CHK-C-NEXT:    store i64 [[TMP283]], i64* [[ATOMIC_TEMP828]], align 8
// CHK-C-NEXT:    [[BF_LOAD829:%.*]] = load i64, i64* [[ATOMIC_TEMP828]], align 8
// CHK-C-NEXT:    [[BF_VALUE830:%.*]] = and i64 [[CONV812]], 127
// CHK-C-NEXT:    [[BF_SHL831:%.*]] = shl i64 [[BF_VALUE830]], 17
// CHK-C-NEXT:    [[BF_CLEAR832:%.*]] = and i64 [[BF_LOAD829]], -16646145
// CHK-C-NEXT:    [[BF_SET833:%.*]] = or i64 [[BF_CLEAR832]], [[BF_SHL831]]
// CHK-C-NEXT:    store i64 [[BF_SET833]], i64* [[ATOMIC_TEMP828]], align 8
// CHK-C-NEXT:    [[TMP284:%.*]] = load i64, i64* [[ATOMIC_TEMP828]], align 8
// CHK-C-NEXT:    [[TMP285:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP283]], i64 [[TMP284]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP286]] = extractvalue { i64, i1 } [[TMP285]], 0
// CHK-C-NEXT:    [[TMP287:%.*]] = extractvalue { i64, i1 } [[TMP285]], 1
// CHK-C-NEXT:    br i1 [[TMP287]], label [[ATOMIC_EXIT841]], label [[ATOMIC_CMP834]]
// CHK-C:       atomic_cmp834:
// CHK-C-NEXT:    store i64 [[TMP286]], i64* [[ATOMIC_TEMP835]], align 8
// CHK-C-NEXT:    [[BF_LOAD836:%.*]] = load i64, i64* [[ATOMIC_TEMP835]], align 8
// CHK-C-NEXT:    [[BF_SHL837:%.*]] = shl i64 [[BF_LOAD836]], 40
// CHK-C-NEXT:    [[BF_ASHR838:%.*]] = ashr i64 [[BF_SHL837]], 57
// CHK-C-NEXT:    [[CMP839:%.*]] = icmp eq i64 [[BF_ASHR838]], [[CONV813]]
// CHK-C-NEXT:    [[FROMBOOL840:%.*]] = zext i1 [[CMP839]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL840]], i8* [[ATMP821]], align 1
// CHK-C-NEXT:    br i1 [[CMP839]], label [[ATOMIC_CONT823]], label [[ATOMIC_EXIT841]]
// CHK-C:       atomic_exit841:
// CHK-C-NEXT:    [[TMP288:%.*]] = load i64, i64* [[ATMP815]], align 8
// CHK-C-NEXT:    [[TMP289:%.*]] = load i8, i8* [[ATMP821]], align 1
// CHK-C-NEXT:    [[CONV842:%.*]] = zext i8 [[TMP289]] to i32
// CHK-C-NEXT:    store i32 [[CONV842]], i32* [[R]], align 4
// CHK-C-NEXT:    [[TMP290:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[CONV843:%.*]] = sext i32 [[TMP290]] to i64
// CHK-C-NEXT:    [[TMP291:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[CONV844:%.*]] = sext i32 [[TMP291]] to i64
// CHK-C-NEXT:    [[ATOMIC_LOAD845:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD845]], i64* [[ATOMIC_TEMP847]], align 8
// CHK-C-NEXT:    [[BF_LOAD848:%.*]] = load i64, i64* [[ATOMIC_TEMP847]], align 8
// CHK-C-NEXT:    [[BF_SHL849:%.*]] = shl i64 [[BF_LOAD848]], 40
// CHK-C-NEXT:    [[BF_ASHR850:%.*]] = ashr i64 [[BF_SHL849]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR850]], i64* [[ATMP846]], align 8
// CHK-C-NEXT:    [[CMP851:%.*]] = icmp eq i64 [[BF_ASHR850]], [[CONV844]]
// CHK-C-NEXT:    [[FROMBOOL853:%.*]] = zext i1 [[CMP851]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL853]], i8* [[ATMP852]], align 1
// CHK-C-NEXT:    br i1 [[CMP851]], label [[ATOMIC_CONT854:%.*]], label [[ATOMIC_EXIT872:%.*]]
// CHK-C:       atomic_cont854:
// CHK-C-NEXT:    [[TMP292:%.*]] = phi i64 [ [[ATOMIC_LOAD845]], [[ATOMIC_EXIT841]] ], [ [[TMP295:%.*]], [[ATOMIC_CMP865:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP292]], i64* [[ATOMIC_TEMP855]], align 8
// CHK-C-NEXT:    [[BF_LOAD856:%.*]] = load i64, i64* [[ATOMIC_TEMP855]], align 8
// CHK-C-NEXT:    [[BF_SHL857:%.*]] = shl i64 [[BF_LOAD856]], 40
// CHK-C-NEXT:    [[BF_ASHR858:%.*]] = ashr i64 [[BF_SHL857]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR858]], i64* [[ATMP846]], align 8
// CHK-C-NEXT:    store i64 [[TMP292]], i64* [[ATOMIC_TEMP859]], align 8
// CHK-C-NEXT:    [[BF_LOAD860:%.*]] = load i64, i64* [[ATOMIC_TEMP859]], align 8
// CHK-C-NEXT:    [[BF_VALUE861:%.*]] = and i64 [[CONV843]], 127
// CHK-C-NEXT:    [[BF_SHL862:%.*]] = shl i64 [[BF_VALUE861]], 17
// CHK-C-NEXT:    [[BF_CLEAR863:%.*]] = and i64 [[BF_LOAD860]], -16646145
// CHK-C-NEXT:    [[BF_SET864:%.*]] = or i64 [[BF_CLEAR863]], [[BF_SHL862]]
// CHK-C-NEXT:    store i64 [[BF_SET864]], i64* [[ATOMIC_TEMP859]], align 8
// CHK-C-NEXT:    [[TMP293:%.*]] = load i64, i64* [[ATOMIC_TEMP859]], align 8
// CHK-C-NEXT:    [[TMP294:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP292]], i64 [[TMP293]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP295]] = extractvalue { i64, i1 } [[TMP294]], 0
// CHK-C-NEXT:    [[TMP296:%.*]] = extractvalue { i64, i1 } [[TMP294]], 1
// CHK-C-NEXT:    br i1 [[TMP296]], label [[ATOMIC_EXIT872]], label [[ATOMIC_CMP865]]
// CHK-C:       atomic_cmp865:
// CHK-C-NEXT:    store i64 [[TMP295]], i64* [[ATOMIC_TEMP866]], align 8
// CHK-C-NEXT:    [[BF_LOAD867:%.*]] = load i64, i64* [[ATOMIC_TEMP866]], align 8
// CHK-C-NEXT:    [[BF_SHL868:%.*]] = shl i64 [[BF_LOAD867]], 40
// CHK-C-NEXT:    [[BF_ASHR869:%.*]] = ashr i64 [[BF_SHL868]], 57
// CHK-C-NEXT:    [[CMP870:%.*]] = icmp eq i64 [[BF_ASHR869]], [[CONV844]]
// CHK-C-NEXT:    [[FROMBOOL871:%.*]] = zext i1 [[CMP870]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL871]], i8* [[ATMP852]], align 1
// CHK-C-NEXT:    br i1 [[CMP870]], label [[ATOMIC_CONT854]], label [[ATOMIC_EXIT872]]
// CHK-C:       atomic_exit872:
// CHK-C-NEXT:    [[TMP297:%.*]] = load i64, i64* [[ATMP846]], align 8
// CHK-C-NEXT:    [[TMP298:%.*]] = load i8, i8* [[ATMP852]], align 1
// CHK-C-NEXT:    [[CONV873:%.*]] = zext i8 [[TMP298]] to i32
// CHK-C-NEXT:    store i32 [[CONV873]], i32* [[R]], align 4
// CHK-C-NEXT:    [[TMP299:%.*]] = trunc i8 [[TMP298]] to i1
// CHK-C-NEXT:    br i1 [[TMP299]], label [[ATOMIC_CAPTURE_CONT876:%.*]], label [[ATOMIC_CAPTURE874:%.*]]
// CHK-C:       atomic_capture874:
// CHK-C-NEXT:    [[CONV875:%.*]] = trunc i64 [[TMP297]] to i32
// CHK-C-NEXT:    store i32 [[CONV875]], i32* [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT876]]
// CHK-C:       atomic_capture_cont876:
// CHK-C-NEXT:    [[TMP300:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD877:%.*]] = load atomic i8, i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED:%.*]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2) monotonic, align 1
// CHK-C-NEXT:    [[TMP301:%.*]] = bitcast i32* [[ATOMIC_TEMP879]] to i8*
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD877]], i8* [[TMP301]], align 1
// CHK-C-NEXT:    [[BF_LOAD880:%.*]] = load i8, i8* [[TMP301]], align 1
// CHK-C-NEXT:    [[BF_SHL881:%.*]] = shl i8 [[BF_LOAD880]], 7
// CHK-C-NEXT:    [[BF_ASHR882:%.*]] = ashr i8 [[BF_SHL881]], 7
// CHK-C-NEXT:    [[BF_CAST883:%.*]] = sext i8 [[BF_ASHR882]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST883]], i32* [[ATMP878]], align 4
// CHK-C-NEXT:    [[CMP884:%.*]] = icmp slt i32 [[BF_CAST883]], [[TMP300]]
// CHK-C-NEXT:    [[FROMBOOL886:%.*]] = zext i1 [[CMP884]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL886]], i8* [[ATMP885]], align 1
// CHK-C-NEXT:    br i1 [[CMP884]], label [[ATOMIC_CONT887:%.*]], label [[ATOMIC_EXIT906:%.*]]
// CHK-C:       atomic_cont887:
// CHK-C-NEXT:    [[TMP302:%.*]] = phi i8 [ [[ATOMIC_LOAD877]], [[ATOMIC_CAPTURE_CONT876]] ], [ [[TMP308:%.*]], [[ATOMIC_CMP898:%.*]] ]
// CHK-C-NEXT:    [[TMP303:%.*]] = bitcast i32* [[ATOMIC_TEMP888]] to i8*
// CHK-C-NEXT:    store i8 [[TMP302]], i8* [[TMP303]], align 1
// CHK-C-NEXT:    [[BF_LOAD889:%.*]] = load i8, i8* [[TMP303]], align 1
// CHK-C-NEXT:    [[BF_SHL890:%.*]] = shl i8 [[BF_LOAD889]], 7
// CHK-C-NEXT:    [[BF_ASHR891:%.*]] = ashr i8 [[BF_SHL890]], 7
// CHK-C-NEXT:    [[BF_CAST892:%.*]] = sext i8 [[BF_ASHR891]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST892]], i32* [[ATMP878]], align 4
// CHK-C-NEXT:    [[TMP304:%.*]] = bitcast i32* [[ATOMIC_TEMP893]] to i8*
// CHK-C-NEXT:    store i8 [[TMP302]], i8* [[TMP304]], align 1
// CHK-C-NEXT:    [[TMP305:%.*]] = trunc i32 [[TMP300]] to i8
// CHK-C-NEXT:    [[BF_LOAD894:%.*]] = load i8, i8* [[TMP304]], align 1
// CHK-C-NEXT:    [[BF_VALUE895:%.*]] = and i8 [[TMP305]], 1
// CHK-C-NEXT:    [[BF_CLEAR896:%.*]] = and i8 [[BF_LOAD894]], -2
// CHK-C-NEXT:    [[BF_SET897:%.*]] = or i8 [[BF_CLEAR896]], [[BF_VALUE895]]
// CHK-C-NEXT:    store i8 [[BF_SET897]], i8* [[TMP304]], align 1
// CHK-C-NEXT:    [[TMP306:%.*]] = load i8, i8* [[TMP304]], align 1
// CHK-C-NEXT:    [[TMP307:%.*]] = cmpxchg i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2), i8 [[TMP302]], i8 [[TMP306]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP308]] = extractvalue { i8, i1 } [[TMP307]], 0
// CHK-C-NEXT:    [[TMP309:%.*]] = extractvalue { i8, i1 } [[TMP307]], 1
// CHK-C-NEXT:    br i1 [[TMP309]], label [[ATOMIC_EXIT906]], label [[ATOMIC_CMP898]]
// CHK-C:       atomic_cmp898:
// CHK-C-NEXT:    [[TMP310:%.*]] = bitcast i32* [[ATOMIC_TEMP899]] to i8*
// CHK-C-NEXT:    store i8 [[TMP308]], i8* [[TMP310]], align 1
// CHK-C-NEXT:    [[BF_LOAD900:%.*]] = load i8, i8* [[TMP310]], align 1
// CHK-C-NEXT:    [[BF_SHL901:%.*]] = shl i8 [[BF_LOAD900]], 7
// CHK-C-NEXT:    [[BF_ASHR902:%.*]] = ashr i8 [[BF_SHL901]], 7
// CHK-C-NEXT:    [[BF_CAST903:%.*]] = sext i8 [[BF_ASHR902]] to i32
// CHK-C-NEXT:    [[CMP904:%.*]] = icmp slt i32 [[BF_CAST903]], [[TMP300]]
// CHK-C-NEXT:    [[FROMBOOL905:%.*]] = zext i1 [[CMP904]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL905]], i8* [[ATMP885]], align 1
// CHK-C-NEXT:    br i1 [[CMP904]], label [[ATOMIC_CONT887]], label [[ATOMIC_EXIT906]]
// CHK-C:       atomic_exit906:
// CHK-C-NEXT:    [[TMP311:%.*]] = load i32, i32* [[ATMP878]], align 4
// CHK-C-NEXT:    [[TMP312:%.*]] = load i8, i8* [[ATMP885]], align 1
// CHK-C-NEXT:    store i32 [[TMP311]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP313:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD907:%.*]] = load atomic i8, i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2) monotonic, align 1
// CHK-C-NEXT:    [[TMP314:%.*]] = bitcast i32* [[ATOMIC_TEMP909]] to i8*
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD907]], i8* [[TMP314]], align 1
// CHK-C-NEXT:    [[BF_LOAD910:%.*]] = load i8, i8* [[TMP314]], align 1
// CHK-C-NEXT:    [[BF_SHL911:%.*]] = shl i8 [[BF_LOAD910]], 7
// CHK-C-NEXT:    [[BF_ASHR912:%.*]] = ashr i8 [[BF_SHL911]], 7
// CHK-C-NEXT:    [[BF_CAST913:%.*]] = sext i8 [[BF_ASHR912]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST913]], i32* [[ATMP908]], align 4
// CHK-C-NEXT:    [[CMP914:%.*]] = icmp slt i32 [[BF_CAST913]], [[TMP313]]
// CHK-C-NEXT:    [[FROMBOOL916:%.*]] = zext i1 [[CMP914]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL916]], i8* [[ATMP915]], align 1
// CHK-C-NEXT:    br i1 [[CMP914]], label [[ATOMIC_CONT917:%.*]], label [[ATOMIC_EXIT937:%.*]]
// CHK-C:       atomic_cont917:
// CHK-C-NEXT:    [[TMP315:%.*]] = phi i8 [ [[ATOMIC_LOAD907]], [[ATOMIC_EXIT906]] ], [ [[TMP321:%.*]], [[ATOMIC_CMP929:%.*]] ]
// CHK-C-NEXT:    [[TMP316:%.*]] = bitcast i32* [[ATOMIC_TEMP918]] to i8*
// CHK-C-NEXT:    store i8 [[TMP315]], i8* [[TMP316]], align 1
// CHK-C-NEXT:    [[BF_LOAD919:%.*]] = load i8, i8* [[TMP316]], align 1
// CHK-C-NEXT:    [[BF_SHL920:%.*]] = shl i8 [[BF_LOAD919]], 7
// CHK-C-NEXT:    [[BF_ASHR921:%.*]] = ashr i8 [[BF_SHL920]], 7
// CHK-C-NEXT:    [[BF_CAST922:%.*]] = sext i8 [[BF_ASHR921]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST922]], i32* [[ATMP908]], align 4
// CHK-C-NEXT:    [[TMP317:%.*]] = bitcast i32* [[ATOMIC_TEMP923]] to i8*
// CHK-C-NEXT:    store i8 [[TMP315]], i8* [[TMP317]], align 1
// CHK-C-NEXT:    [[TMP318:%.*]] = trunc i32 [[TMP313]] to i8
// CHK-C-NEXT:    [[BF_LOAD924:%.*]] = load i8, i8* [[TMP317]], align 1
// CHK-C-NEXT:    [[BF_VALUE925:%.*]] = and i8 [[TMP318]], 1
// CHK-C-NEXT:    [[BF_CLEAR926:%.*]] = and i8 [[BF_LOAD924]], -2
// CHK-C-NEXT:    [[BF_SET927:%.*]] = or i8 [[BF_CLEAR926]], [[BF_VALUE925]]
// CHK-C-NEXT:    store i8 [[BF_SET927]], i8* [[TMP317]], align 1
// CHK-C-NEXT:    [[TMP319:%.*]] = load i8, i8* [[TMP317]], align 1
// CHK-C-NEXT:    [[TMP320:%.*]] = cmpxchg i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2), i8 [[TMP315]], i8 [[TMP319]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP321]] = extractvalue { i8, i1 } [[TMP320]], 0
// CHK-C-NEXT:    [[TMP322:%.*]] = extractvalue { i8, i1 } [[TMP320]], 1
// CHK-C-NEXT:    br i1 [[TMP322]], label [[ATOMIC_UPD_EXIT928:%.*]], label [[ATOMIC_CMP929]]
// CHK-C:       atomic_upd_exit928:
// CHK-C-NEXT:    store i32 [[TMP313]], i32* [[ATMP908]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT937]]
// CHK-C:       atomic_cmp929:
// CHK-C-NEXT:    [[TMP323:%.*]] = bitcast i32* [[ATOMIC_TEMP930]] to i8*
// CHK-C-NEXT:    store i8 [[TMP321]], i8* [[TMP323]], align 1
// CHK-C-NEXT:    [[BF_LOAD931:%.*]] = load i8, i8* [[TMP323]], align 1
// CHK-C-NEXT:    [[BF_SHL932:%.*]] = shl i8 [[BF_LOAD931]], 7
// CHK-C-NEXT:    [[BF_ASHR933:%.*]] = ashr i8 [[BF_SHL932]], 7
// CHK-C-NEXT:    [[BF_CAST934:%.*]] = sext i8 [[BF_ASHR933]] to i32
// CHK-C-NEXT:    [[CMP935:%.*]] = icmp slt i32 [[BF_CAST934]], [[TMP313]]
// CHK-C-NEXT:    [[FROMBOOL936:%.*]] = zext i1 [[CMP935]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL936]], i8* [[ATMP915]], align 1
// CHK-C-NEXT:    br i1 [[CMP935]], label [[ATOMIC_CONT917]], label [[ATOMIC_EXIT937]]
// CHK-C:       atomic_exit937:
// CHK-C-NEXT:    [[TMP324:%.*]] = load i32, i32* [[ATMP908]], align 4
// CHK-C-NEXT:    [[TMP325:%.*]] = load i8, i8* [[ATMP915]], align 1
// CHK-C-NEXT:    store i32 [[TMP324]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP326:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP327:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD938:%.*]] = load atomic i8, i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2) monotonic, align 1
// CHK-C-NEXT:    [[TMP328:%.*]] = bitcast i32* [[ATOMIC_TEMP940]] to i8*
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD938]], i8* [[TMP328]], align 1
// CHK-C-NEXT:    [[BF_LOAD941:%.*]] = load i8, i8* [[TMP328]], align 1
// CHK-C-NEXT:    [[BF_SHL942:%.*]] = shl i8 [[BF_LOAD941]], 7
// CHK-C-NEXT:    [[BF_ASHR943:%.*]] = ashr i8 [[BF_SHL942]], 7
// CHK-C-NEXT:    [[BF_CAST944:%.*]] = sext i8 [[BF_ASHR943]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST944]], i32* [[ATMP939]], align 4
// CHK-C-NEXT:    [[CMP945:%.*]] = icmp eq i32 [[BF_CAST944]], [[TMP327]]
// CHK-C-NEXT:    [[FROMBOOL947:%.*]] = zext i1 [[CMP945]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL947]], i8* [[ATMP946]], align 1
// CHK-C-NEXT:    br i1 [[CMP945]], label [[ATOMIC_CONT948:%.*]], label [[ATOMIC_EXIT968:%.*]]
// CHK-C:       atomic_cont948:
// CHK-C-NEXT:    [[TMP329:%.*]] = phi i8 [ [[ATOMIC_LOAD938]], [[ATOMIC_EXIT937]] ], [ [[TMP335:%.*]], [[ATOMIC_CMP960:%.*]] ]
// CHK-C-NEXT:    [[TMP330:%.*]] = bitcast i32* [[ATOMIC_TEMP949]] to i8*
// CHK-C-NEXT:    store i8 [[TMP329]], i8* [[TMP330]], align 1
// CHK-C-NEXT:    [[BF_LOAD950:%.*]] = load i8, i8* [[TMP330]], align 1
// CHK-C-NEXT:    [[BF_SHL951:%.*]] = shl i8 [[BF_LOAD950]], 7
// CHK-C-NEXT:    [[BF_ASHR952:%.*]] = ashr i8 [[BF_SHL951]], 7
// CHK-C-NEXT:    [[BF_CAST953:%.*]] = sext i8 [[BF_ASHR952]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST953]], i32* [[ATMP939]], align 4
// CHK-C-NEXT:    [[TMP331:%.*]] = bitcast i32* [[ATOMIC_TEMP954]] to i8*
// CHK-C-NEXT:    store i8 [[TMP329]], i8* [[TMP331]], align 1
// CHK-C-NEXT:    [[TMP332:%.*]] = trunc i32 [[TMP326]] to i8
// CHK-C-NEXT:    [[BF_LOAD955:%.*]] = load i8, i8* [[TMP331]], align 1
// CHK-C-NEXT:    [[BF_VALUE956:%.*]] = and i8 [[TMP332]], 1
// CHK-C-NEXT:    [[BF_CLEAR957:%.*]] = and i8 [[BF_LOAD955]], -2
// CHK-C-NEXT:    [[BF_SET958:%.*]] = or i8 [[BF_CLEAR957]], [[BF_VALUE956]]
// CHK-C-NEXT:    store i8 [[BF_SET958]], i8* [[TMP331]], align 1
// CHK-C-NEXT:    [[TMP333:%.*]] = load i8, i8* [[TMP331]], align 1
// CHK-C-NEXT:    [[TMP334:%.*]] = cmpxchg i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2), i8 [[TMP329]], i8 [[TMP333]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP335]] = extractvalue { i8, i1 } [[TMP334]], 0
// CHK-C-NEXT:    [[TMP336:%.*]] = extractvalue { i8, i1 } [[TMP334]], 1
// CHK-C-NEXT:    br i1 [[TMP336]], label [[ATOMIC_UPD_EXIT959:%.*]], label [[ATOMIC_CMP960]]
// CHK-C:       atomic_upd_exit959:
// CHK-C-NEXT:    store i32 [[TMP326]], i32* [[ATMP939]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT968]]
// CHK-C:       atomic_cmp960:
// CHK-C-NEXT:    [[TMP337:%.*]] = bitcast i32* [[ATOMIC_TEMP961]] to i8*
// CHK-C-NEXT:    store i8 [[TMP335]], i8* [[TMP337]], align 1
// CHK-C-NEXT:    [[BF_LOAD962:%.*]] = load i8, i8* [[TMP337]], align 1
// CHK-C-NEXT:    [[BF_SHL963:%.*]] = shl i8 [[BF_LOAD962]], 7
// CHK-C-NEXT:    [[BF_ASHR964:%.*]] = ashr i8 [[BF_SHL963]], 7
// CHK-C-NEXT:    [[BF_CAST965:%.*]] = sext i8 [[BF_ASHR964]] to i32
// CHK-C-NEXT:    [[CMP966:%.*]] = icmp eq i32 [[BF_CAST965]], [[TMP327]]
// CHK-C-NEXT:    [[FROMBOOL967:%.*]] = zext i1 [[CMP966]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL967]], i8* [[ATMP946]], align 1
// CHK-C-NEXT:    br i1 [[CMP966]], label [[ATOMIC_CONT948]], label [[ATOMIC_EXIT968]]
// CHK-C:       atomic_exit968:
// CHK-C-NEXT:    [[TMP338:%.*]] = load i32, i32* [[ATMP939]], align 4
// CHK-C-NEXT:    [[TMP339:%.*]] = load i8, i8* [[ATMP946]], align 1
// CHK-C-NEXT:    [[TMP340:%.*]] = trunc i8 [[TMP339]] to i1
// CHK-C-NEXT:    br i1 [[TMP340]], label [[ATOMIC_CAPTURE_CONT970:%.*]], label [[ATOMIC_CAPTURE969:%.*]]
// CHK-C:       atomic_capture969:
// CHK-C-NEXT:    store i32 [[TMP338]], i32* [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT970]]
// CHK-C:       atomic_capture_cont970:
// CHK-C-NEXT:    [[TMP341:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP342:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD971:%.*]] = load atomic i8, i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2) monotonic, align 1
// CHK-C-NEXT:    [[TMP343:%.*]] = bitcast i32* [[ATOMIC_TEMP973]] to i8*
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD971]], i8* [[TMP343]], align 1
// CHK-C-NEXT:    [[BF_LOAD974:%.*]] = load i8, i8* [[TMP343]], align 1
// CHK-C-NEXT:    [[BF_SHL975:%.*]] = shl i8 [[BF_LOAD974]], 7
// CHK-C-NEXT:    [[BF_ASHR976:%.*]] = ashr i8 [[BF_SHL975]], 7
// CHK-C-NEXT:    [[BF_CAST977:%.*]] = sext i8 [[BF_ASHR976]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST977]], i32* [[ATMP972]], align 4
// CHK-C-NEXT:    [[CMP978:%.*]] = icmp eq i32 [[BF_CAST977]], [[TMP342]]
// CHK-C-NEXT:    [[FROMBOOL980:%.*]] = zext i1 [[CMP978]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL980]], i8* [[ATMP979]], align 1
// CHK-C-NEXT:    br i1 [[CMP978]], label [[ATOMIC_CONT981:%.*]], label [[ATOMIC_EXIT1000:%.*]]
// CHK-C:       atomic_cont981:
// CHK-C-NEXT:    [[TMP344:%.*]] = phi i8 [ [[ATOMIC_LOAD971]], [[ATOMIC_CAPTURE_CONT970]] ], [ [[TMP350:%.*]], [[ATOMIC_CMP992:%.*]] ]
// CHK-C-NEXT:    [[TMP345:%.*]] = bitcast i32* [[ATOMIC_TEMP982]] to i8*
// CHK-C-NEXT:    store i8 [[TMP344]], i8* [[TMP345]], align 1
// CHK-C-NEXT:    [[BF_LOAD983:%.*]] = load i8, i8* [[TMP345]], align 1
// CHK-C-NEXT:    [[BF_SHL984:%.*]] = shl i8 [[BF_LOAD983]], 7
// CHK-C-NEXT:    [[BF_ASHR985:%.*]] = ashr i8 [[BF_SHL984]], 7
// CHK-C-NEXT:    [[BF_CAST986:%.*]] = sext i8 [[BF_ASHR985]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST986]], i32* [[ATMP972]], align 4
// CHK-C-NEXT:    [[TMP346:%.*]] = bitcast i32* [[ATOMIC_TEMP987]] to i8*
// CHK-C-NEXT:    store i8 [[TMP344]], i8* [[TMP346]], align 1
// CHK-C-NEXT:    [[TMP347:%.*]] = trunc i32 [[TMP341]] to i8
// CHK-C-NEXT:    [[BF_LOAD988:%.*]] = load i8, i8* [[TMP346]], align 1
// CHK-C-NEXT:    [[BF_VALUE989:%.*]] = and i8 [[TMP347]], 1
// CHK-C-NEXT:    [[BF_CLEAR990:%.*]] = and i8 [[BF_LOAD988]], -2
// CHK-C-NEXT:    [[BF_SET991:%.*]] = or i8 [[BF_CLEAR990]], [[BF_VALUE989]]
// CHK-C-NEXT:    store i8 [[BF_SET991]], i8* [[TMP346]], align 1
// CHK-C-NEXT:    [[TMP348:%.*]] = load i8, i8* [[TMP346]], align 1
// CHK-C-NEXT:    [[TMP349:%.*]] = cmpxchg i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2), i8 [[TMP344]], i8 [[TMP348]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP350]] = extractvalue { i8, i1 } [[TMP349]], 0
// CHK-C-NEXT:    [[TMP351:%.*]] = extractvalue { i8, i1 } [[TMP349]], 1
// CHK-C-NEXT:    br i1 [[TMP351]], label [[ATOMIC_EXIT1000]], label [[ATOMIC_CMP992]]
// CHK-C:       atomic_cmp992:
// CHK-C-NEXT:    [[TMP352:%.*]] = bitcast i32* [[ATOMIC_TEMP993]] to i8*
// CHK-C-NEXT:    store i8 [[TMP350]], i8* [[TMP352]], align 1
// CHK-C-NEXT:    [[BF_LOAD994:%.*]] = load i8, i8* [[TMP352]], align 1
// CHK-C-NEXT:    [[BF_SHL995:%.*]] = shl i8 [[BF_LOAD994]], 7
// CHK-C-NEXT:    [[BF_ASHR996:%.*]] = ashr i8 [[BF_SHL995]], 7
// CHK-C-NEXT:    [[BF_CAST997:%.*]] = sext i8 [[BF_ASHR996]] to i32
// CHK-C-NEXT:    [[CMP998:%.*]] = icmp eq i32 [[BF_CAST997]], [[TMP342]]
// CHK-C-NEXT:    [[FROMBOOL999:%.*]] = zext i1 [[CMP998]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL999]], i8* [[ATMP979]], align 1
// CHK-C-NEXT:    br i1 [[CMP998]], label [[ATOMIC_CONT981]], label [[ATOMIC_EXIT1000]]
// CHK-C:       atomic_exit1000:
// CHK-C-NEXT:    [[TMP353:%.*]] = load i32, i32* [[ATMP972]], align 4
// CHK-C-NEXT:    [[TMP354:%.*]] = load i8, i8* [[ATMP979]], align 1
// CHK-C-NEXT:    [[CONV1001:%.*]] = zext i8 [[TMP354]] to i32
// CHK-C-NEXT:    store i32 [[CONV1001]], i32* [[R]], align 4
// CHK-C-NEXT:    [[TMP355:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP356:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD1002:%.*]] = load atomic i8, i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2) monotonic, align 1
// CHK-C-NEXT:    [[TMP357:%.*]] = bitcast i32* [[ATOMIC_TEMP1004]] to i8*
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD1002]], i8* [[TMP357]], align 1
// CHK-C-NEXT:    [[BF_LOAD1005:%.*]] = load i8, i8* [[TMP357]], align 1
// CHK-C-NEXT:    [[BF_SHL1006:%.*]] = shl i8 [[BF_LOAD1005]], 7
// CHK-C-NEXT:    [[BF_ASHR1007:%.*]] = ashr i8 [[BF_SHL1006]], 7
// CHK-C-NEXT:    [[BF_CAST1008:%.*]] = sext i8 [[BF_ASHR1007]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST1008]], i32* [[ATMP1003]], align 4
// CHK-C-NEXT:    [[CMP1009:%.*]] = icmp eq i32 [[BF_CAST1008]], [[TMP356]]
// CHK-C-NEXT:    [[FROMBOOL1011:%.*]] = zext i1 [[CMP1009]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL1011]], i8* [[ATMP1010]], align 1
// CHK-C-NEXT:    br i1 [[CMP1009]], label [[ATOMIC_CONT1012:%.*]], label [[ATOMIC_EXIT1031:%.*]]
// CHK-C:       atomic_cont1012:
// CHK-C-NEXT:    [[TMP358:%.*]] = phi i8 [ [[ATOMIC_LOAD1002]], [[ATOMIC_EXIT1000]] ], [ [[TMP364:%.*]], [[ATOMIC_CMP1023:%.*]] ]
// CHK-C-NEXT:    [[TMP359:%.*]] = bitcast i32* [[ATOMIC_TEMP1013]] to i8*
// CHK-C-NEXT:    store i8 [[TMP358]], i8* [[TMP359]], align 1
// CHK-C-NEXT:    [[BF_LOAD1014:%.*]] = load i8, i8* [[TMP359]], align 1
// CHK-C-NEXT:    [[BF_SHL1015:%.*]] = shl i8 [[BF_LOAD1014]], 7
// CHK-C-NEXT:    [[BF_ASHR1016:%.*]] = ashr i8 [[BF_SHL1015]], 7
// CHK-C-NEXT:    [[BF_CAST1017:%.*]] = sext i8 [[BF_ASHR1016]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST1017]], i32* [[ATMP1003]], align 4
// CHK-C-NEXT:    [[TMP360:%.*]] = bitcast i32* [[ATOMIC_TEMP1018]] to i8*
// CHK-C-NEXT:    store i8 [[TMP358]], i8* [[TMP360]], align 1
// CHK-C-NEXT:    [[TMP361:%.*]] = trunc i32 [[TMP355]] to i8
// CHK-C-NEXT:    [[BF_LOAD1019:%.*]] = load i8, i8* [[TMP360]], align 1
// CHK-C-NEXT:    [[BF_VALUE1020:%.*]] = and i8 [[TMP361]], 1
// CHK-C-NEXT:    [[BF_CLEAR1021:%.*]] = and i8 [[BF_LOAD1019]], -2
// CHK-C-NEXT:    [[BF_SET1022:%.*]] = or i8 [[BF_CLEAR1021]], [[BF_VALUE1020]]
// CHK-C-NEXT:    store i8 [[BF_SET1022]], i8* [[TMP360]], align 1
// CHK-C-NEXT:    [[TMP362:%.*]] = load i8, i8* [[TMP360]], align 1
// CHK-C-NEXT:    [[TMP363:%.*]] = cmpxchg i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2), i8 [[TMP358]], i8 [[TMP362]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP364]] = extractvalue { i8, i1 } [[TMP363]], 0
// CHK-C-NEXT:    [[TMP365:%.*]] = extractvalue { i8, i1 } [[TMP363]], 1
// CHK-C-NEXT:    br i1 [[TMP365]], label [[ATOMIC_EXIT1031]], label [[ATOMIC_CMP1023]]
// CHK-C:       atomic_cmp1023:
// CHK-C-NEXT:    [[TMP366:%.*]] = bitcast i32* [[ATOMIC_TEMP1024]] to i8*
// CHK-C-NEXT:    store i8 [[TMP364]], i8* [[TMP366]], align 1
// CHK-C-NEXT:    [[BF_LOAD1025:%.*]] = load i8, i8* [[TMP366]], align 1
// CHK-C-NEXT:    [[BF_SHL1026:%.*]] = shl i8 [[BF_LOAD1025]], 7
// CHK-C-NEXT:    [[BF_ASHR1027:%.*]] = ashr i8 [[BF_SHL1026]], 7
// CHK-C-NEXT:    [[BF_CAST1028:%.*]] = sext i8 [[BF_ASHR1027]] to i32
// CHK-C-NEXT:    [[CMP1029:%.*]] = icmp eq i32 [[BF_CAST1028]], [[TMP356]]
// CHK-C-NEXT:    [[FROMBOOL1030:%.*]] = zext i1 [[CMP1029]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL1030]], i8* [[ATMP1010]], align 1
// CHK-C-NEXT:    br i1 [[CMP1029]], label [[ATOMIC_CONT1012]], label [[ATOMIC_EXIT1031]]
// CHK-C:       atomic_exit1031:
// CHK-C-NEXT:    [[TMP367:%.*]] = load i32, i32* [[ATMP1003]], align 4
// CHK-C-NEXT:    [[TMP368:%.*]] = load i8, i8* [[ATMP1010]], align 1
// CHK-C-NEXT:    [[CONV1032:%.*]] = zext i8 [[TMP368]] to i32
// CHK-C-NEXT:    store i32 [[CONV1032]], i32* [[R]], align 4
// CHK-C-NEXT:    [[TMP369:%.*]] = trunc i8 [[TMP368]] to i1
// CHK-C-NEXT:    br i1 [[TMP369]], label [[ATOMIC_CAPTURE_CONT1034:%.*]], label [[ATOMIC_CAPTURE1033:%.*]]
// CHK-C:       atomic_capture1033:
// CHK-C-NEXT:    store i32 [[TMP367]], i32* [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT1034]]
// CHK-C:       atomic_capture_cont1034:
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z13test_bitfieldv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[V:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[R:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP2:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP6:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP8:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP15:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP16:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP21:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP24:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP28:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP34:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP42:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP43:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP48:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP51:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP55:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP62:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP70:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP71:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP76:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP79:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP83:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP89:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP97:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP98:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP103:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP106:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP110:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP116:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP127:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP128:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP132:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP135:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP138:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP145:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP152:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP153:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP157:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP160:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP163:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP171:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP178:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP179:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP183:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP186:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP189:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP197:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP206:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP207:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP211:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP214:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP217:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP224:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP232:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP233:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP237:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP240:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP243:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP250:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP260:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP261:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP265:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP268:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP272:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP279:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP287:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP288:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP293:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP296:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP300:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP308:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP316:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP317:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP322:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP325:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP329:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP337:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP347:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP348:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP353:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP356:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP360:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP367:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP376:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP377:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP382:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP385:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP389:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP396:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP407:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP408:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP413:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP416:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP420:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP427:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP435:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP436:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP441:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP444:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP448:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP456:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP464:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP465:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP470:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP473:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP477:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP485:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP495:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP496:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP501:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP504:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP508:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP515:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP524:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP525:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP530:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP533:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP537:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP544:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP555:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP556:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP562:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP565:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP570:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP577:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP586:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP587:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP593:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP596:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP601:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP609:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP618:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP619:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP625:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP628:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP633:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP641:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP652:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP653:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP659:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP662:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP667:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP674:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP684:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP685:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP691:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP694:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP699:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP706:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP719:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP720:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP725:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP728:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP732:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP739:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP749:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP750:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP755:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP758:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP762:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP770:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP781:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP782:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP787:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP790:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP794:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP802:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP815:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP816:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP821:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP824:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP828:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP835:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP846:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP847:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP852:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP855:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP859:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP866:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP878:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP879:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP885:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP888:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP893:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP899:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP908:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP909:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP915:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP918:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP923:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP930:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP939:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP940:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP946:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP949:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP954:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP961:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP972:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP973:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP979:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP982:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP987:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP993:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP1003:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP1004:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP1010:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP1013:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP1018:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP1024:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i32, i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD]], i32* [[ATOMIC_TEMP]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD:%.*]] = load i32, i32* [[ATOMIC_TEMP]], align 4
// CHK-CXX-NEXT:    [[BF_SHL:%.*]] = shl i32 [[BF_LOAD]], 1
// CHK-CXX-NEXT:    [[BF_ASHR:%.*]] = ashr i32 [[BF_SHL]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR]], i32* [[TMP]], align 4
// CHK-CXX-NEXT:    [[CMP:%.*]] = icmp slt i32 [[BF_ASHR]], [[TMP0]]
// CHK-CXX-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL]], i8* [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP1:%.*]] = phi i32 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP1]], i32* [[ATOMIC_TEMP2]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD3:%.*]] = load i32, i32* [[ATOMIC_TEMP2]], align 4
// CHK-CXX-NEXT:    [[BF_SHL4:%.*]] = shl i32 [[BF_LOAD3]], 1
// CHK-CXX-NEXT:    [[BF_ASHR5:%.*]] = ashr i32 [[BF_SHL4]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR5]], i32* [[TMP]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP1]], i32* [[ATOMIC_TEMP6]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD7:%.*]] = load i32, i32* [[ATOMIC_TEMP6]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE:%.*]] = and i32 [[TMP0]], 2147483647
// CHK-CXX-NEXT:    [[BF_CLEAR:%.*]] = and i32 [[BF_LOAD7]], -2147483648
// CHK-CXX-NEXT:    [[BF_SET:%.*]] = or i32 [[BF_CLEAR]], [[BF_VALUE]]
// CHK-CXX-NEXT:    store i32 [[BF_SET]], i32* [[ATOMIC_TEMP6]], align 4
// CHK-CXX-NEXT:    [[TMP2:%.*]] = load i32, i32* [[ATOMIC_TEMP6]], align 4
// CHK-CXX-NEXT:    [[TMP3:%.*]] = cmpxchg i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*), i32 [[TMP1]], i32 [[TMP2]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP4]] = extractvalue { i32, i1 } [[TMP3]], 0
// CHK-CXX-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i1 } [[TMP3]], 1
// CHK-CXX-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    store i32 [[TMP4]], i32* [[ATOMIC_TEMP8]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD9:%.*]] = load i32, i32* [[ATOMIC_TEMP8]], align 4
// CHK-CXX-NEXT:    [[BF_SHL10:%.*]] = shl i32 [[BF_LOAD9]], 1
// CHK-CXX-NEXT:    [[BF_ASHR11:%.*]] = ashr i32 [[BF_SHL10]], 1
// CHK-CXX-NEXT:    [[CMP12:%.*]] = icmp slt i32 [[BF_ASHR11]], [[TMP0]]
// CHK-CXX-NEXT:    [[FROMBOOL13:%.*]] = zext i1 [[CMP12]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL13]], i8* [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP6:%.*]] = load i32, i32* [[TMP]], align 4
// CHK-CXX-NEXT:    [[TMP7:%.*]] = load i8, i8* [[ATMP1]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP6]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP8:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD14:%.*]] = load atomic i32, i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD14]], i32* [[ATOMIC_TEMP16]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD17:%.*]] = load i32, i32* [[ATOMIC_TEMP16]], align 4
// CHK-CXX-NEXT:    [[BF_SHL18:%.*]] = shl i32 [[BF_LOAD17]], 1
// CHK-CXX-NEXT:    [[BF_ASHR19:%.*]] = ashr i32 [[BF_SHL18]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR19]], i32* [[ATMP15]], align 4
// CHK-CXX-NEXT:    [[CMP20:%.*]] = icmp slt i32 [[BF_ASHR19]], [[TMP8]]
// CHK-CXX-NEXT:    [[FROMBOOL22:%.*]] = zext i1 [[CMP20]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL22]], i8* [[ATMP21]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP20]], label [[ATOMIC_CONT23:%.*]], label [[ATOMIC_EXIT40:%.*]]
// CHK-CXX:       atomic_cont23:
// CHK-CXX-NEXT:    [[TMP9:%.*]] = phi i32 [ [[ATOMIC_LOAD14]], [[ATOMIC_EXIT]] ], [ [[TMP12:%.*]], [[ATOMIC_CMP33:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP9]], i32* [[ATOMIC_TEMP24]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD25:%.*]] = load i32, i32* [[ATOMIC_TEMP24]], align 4
// CHK-CXX-NEXT:    [[BF_SHL26:%.*]] = shl i32 [[BF_LOAD25]], 1
// CHK-CXX-NEXT:    [[BF_ASHR27:%.*]] = ashr i32 [[BF_SHL26]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR27]], i32* [[ATMP15]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP9]], i32* [[ATOMIC_TEMP28]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD29:%.*]] = load i32, i32* [[ATOMIC_TEMP28]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE30:%.*]] = and i32 [[TMP8]], 2147483647
// CHK-CXX-NEXT:    [[BF_CLEAR31:%.*]] = and i32 [[BF_LOAD29]], -2147483648
// CHK-CXX-NEXT:    [[BF_SET32:%.*]] = or i32 [[BF_CLEAR31]], [[BF_VALUE30]]
// CHK-CXX-NEXT:    store i32 [[BF_SET32]], i32* [[ATOMIC_TEMP28]], align 4
// CHK-CXX-NEXT:    [[TMP10:%.*]] = load i32, i32* [[ATOMIC_TEMP28]], align 4
// CHK-CXX-NEXT:    [[TMP11:%.*]] = cmpxchg i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*), i32 [[TMP9]], i32 [[TMP10]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP12]] = extractvalue { i32, i1 } [[TMP11]], 0
// CHK-CXX-NEXT:    [[TMP13:%.*]] = extractvalue { i32, i1 } [[TMP11]], 1
// CHK-CXX-NEXT:    br i1 [[TMP13]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP33]]
// CHK-CXX:       atomic_upd_exit:
// CHK-CXX-NEXT:    store i32 [[TMP8]], i32* [[ATMP15]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT40]]
// CHK-CXX:       atomic_cmp33:
// CHK-CXX-NEXT:    store i32 [[TMP12]], i32* [[ATOMIC_TEMP34]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD35:%.*]] = load i32, i32* [[ATOMIC_TEMP34]], align 4
// CHK-CXX-NEXT:    [[BF_SHL36:%.*]] = shl i32 [[BF_LOAD35]], 1
// CHK-CXX-NEXT:    [[BF_ASHR37:%.*]] = ashr i32 [[BF_SHL36]], 1
// CHK-CXX-NEXT:    [[CMP38:%.*]] = icmp slt i32 [[BF_ASHR37]], [[TMP8]]
// CHK-CXX-NEXT:    [[FROMBOOL39:%.*]] = zext i1 [[CMP38]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL39]], i8* [[ATMP21]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP38]], label [[ATOMIC_CONT23]], label [[ATOMIC_EXIT40]]
// CHK-CXX:       atomic_exit40:
// CHK-CXX-NEXT:    [[TMP14:%.*]] = load i32, i32* [[ATMP15]], align 4
// CHK-CXX-NEXT:    [[TMP15:%.*]] = load i8, i8* [[ATMP21]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP14]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP16:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP17:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD41:%.*]] = load atomic i32, i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD41]], i32* [[ATOMIC_TEMP43]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD44:%.*]] = load i32, i32* [[ATOMIC_TEMP43]], align 4
// CHK-CXX-NEXT:    [[BF_SHL45:%.*]] = shl i32 [[BF_LOAD44]], 1
// CHK-CXX-NEXT:    [[BF_ASHR46:%.*]] = ashr i32 [[BF_SHL45]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR46]], i32* [[ATMP42]], align 4
// CHK-CXX-NEXT:    [[CMP47:%.*]] = icmp eq i32 [[BF_ASHR46]], [[TMP17]]
// CHK-CXX-NEXT:    [[FROMBOOL49:%.*]] = zext i1 [[CMP47]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL49]], i8* [[ATMP48]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP47]], label [[ATOMIC_CONT50:%.*]], label [[ATOMIC_EXIT68:%.*]]
// CHK-CXX:       atomic_cont50:
// CHK-CXX-NEXT:    [[TMP18:%.*]] = phi i32 [ [[ATOMIC_LOAD41]], [[ATOMIC_EXIT40]] ], [ [[TMP21:%.*]], [[ATOMIC_CMP61:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP18]], i32* [[ATOMIC_TEMP51]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD52:%.*]] = load i32, i32* [[ATOMIC_TEMP51]], align 4
// CHK-CXX-NEXT:    [[BF_SHL53:%.*]] = shl i32 [[BF_LOAD52]], 1
// CHK-CXX-NEXT:    [[BF_ASHR54:%.*]] = ashr i32 [[BF_SHL53]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR54]], i32* [[ATMP42]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP18]], i32* [[ATOMIC_TEMP55]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD56:%.*]] = load i32, i32* [[ATOMIC_TEMP55]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE57:%.*]] = and i32 [[TMP16]], 2147483647
// CHK-CXX-NEXT:    [[BF_CLEAR58:%.*]] = and i32 [[BF_LOAD56]], -2147483648
// CHK-CXX-NEXT:    [[BF_SET59:%.*]] = or i32 [[BF_CLEAR58]], [[BF_VALUE57]]
// CHK-CXX-NEXT:    store i32 [[BF_SET59]], i32* [[ATOMIC_TEMP55]], align 4
// CHK-CXX-NEXT:    [[TMP19:%.*]] = load i32, i32* [[ATOMIC_TEMP55]], align 4
// CHK-CXX-NEXT:    [[TMP20:%.*]] = cmpxchg i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*), i32 [[TMP18]], i32 [[TMP19]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP21]] = extractvalue { i32, i1 } [[TMP20]], 0
// CHK-CXX-NEXT:    [[TMP22:%.*]] = extractvalue { i32, i1 } [[TMP20]], 1
// CHK-CXX-NEXT:    br i1 [[TMP22]], label [[ATOMIC_UPD_EXIT60:%.*]], label [[ATOMIC_CMP61]]
// CHK-CXX:       atomic_upd_exit60:
// CHK-CXX-NEXT:    store i32 [[TMP16]], i32* [[ATMP42]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT68]]
// CHK-CXX:       atomic_cmp61:
// CHK-CXX-NEXT:    store i32 [[TMP21]], i32* [[ATOMIC_TEMP62]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD63:%.*]] = load i32, i32* [[ATOMIC_TEMP62]], align 4
// CHK-CXX-NEXT:    [[BF_SHL64:%.*]] = shl i32 [[BF_LOAD63]], 1
// CHK-CXX-NEXT:    [[BF_ASHR65:%.*]] = ashr i32 [[BF_SHL64]], 1
// CHK-CXX-NEXT:    [[CMP66:%.*]] = icmp eq i32 [[BF_ASHR65]], [[TMP17]]
// CHK-CXX-NEXT:    [[FROMBOOL67:%.*]] = zext i1 [[CMP66]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL67]], i8* [[ATMP48]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP66]], label [[ATOMIC_CONT50]], label [[ATOMIC_EXIT68]]
// CHK-CXX:       atomic_exit68:
// CHK-CXX-NEXT:    [[TMP23:%.*]] = load i32, i32* [[ATMP42]], align 4
// CHK-CXX-NEXT:    [[TMP24:%.*]] = load i8, i8* [[ATMP48]], align 1
// CHK-CXX-NEXT:    [[TMP25:%.*]] = trunc i8 [[TMP24]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP25]], label [[ATOMIC_CAPTURE_CONT:%.*]], label [[ATOMIC_CAPTURE:%.*]]
// CHK-CXX:       atomic_capture:
// CHK-CXX-NEXT:    store i32 [[TMP23]], i32* [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT]]
// CHK-CXX:       atomic_capture_cont:
// CHK-CXX-NEXT:    [[TMP26:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP27:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD69:%.*]] = load atomic i32, i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD69]], i32* [[ATOMIC_TEMP71]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD72:%.*]] = load i32, i32* [[ATOMIC_TEMP71]], align 4
// CHK-CXX-NEXT:    [[BF_SHL73:%.*]] = shl i32 [[BF_LOAD72]], 1
// CHK-CXX-NEXT:    [[BF_ASHR74:%.*]] = ashr i32 [[BF_SHL73]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR74]], i32* [[ATMP70]], align 4
// CHK-CXX-NEXT:    [[CMP75:%.*]] = icmp eq i32 [[BF_ASHR74]], [[TMP27]]
// CHK-CXX-NEXT:    [[FROMBOOL77:%.*]] = zext i1 [[CMP75]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL77]], i8* [[ATMP76]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP75]], label [[ATOMIC_CONT78:%.*]], label [[ATOMIC_EXIT95:%.*]]
// CHK-CXX:       atomic_cont78:
// CHK-CXX-NEXT:    [[TMP28:%.*]] = phi i32 [ [[ATOMIC_LOAD69]], [[ATOMIC_CAPTURE_CONT]] ], [ [[TMP31:%.*]], [[ATOMIC_CMP88:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP28]], i32* [[ATOMIC_TEMP79]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD80:%.*]] = load i32, i32* [[ATOMIC_TEMP79]], align 4
// CHK-CXX-NEXT:    [[BF_SHL81:%.*]] = shl i32 [[BF_LOAD80]], 1
// CHK-CXX-NEXT:    [[BF_ASHR82:%.*]] = ashr i32 [[BF_SHL81]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR82]], i32* [[ATMP70]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP28]], i32* [[ATOMIC_TEMP83]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD84:%.*]] = load i32, i32* [[ATOMIC_TEMP83]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE85:%.*]] = and i32 [[TMP26]], 2147483647
// CHK-CXX-NEXT:    [[BF_CLEAR86:%.*]] = and i32 [[BF_LOAD84]], -2147483648
// CHK-CXX-NEXT:    [[BF_SET87:%.*]] = or i32 [[BF_CLEAR86]], [[BF_VALUE85]]
// CHK-CXX-NEXT:    store i32 [[BF_SET87]], i32* [[ATOMIC_TEMP83]], align 4
// CHK-CXX-NEXT:    [[TMP29:%.*]] = load i32, i32* [[ATOMIC_TEMP83]], align 4
// CHK-CXX-NEXT:    [[TMP30:%.*]] = cmpxchg i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*), i32 [[TMP28]], i32 [[TMP29]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP31]] = extractvalue { i32, i1 } [[TMP30]], 0
// CHK-CXX-NEXT:    [[TMP32:%.*]] = extractvalue { i32, i1 } [[TMP30]], 1
// CHK-CXX-NEXT:    br i1 [[TMP32]], label [[ATOMIC_EXIT95]], label [[ATOMIC_CMP88]]
// CHK-CXX:       atomic_cmp88:
// CHK-CXX-NEXT:    store i32 [[TMP31]], i32* [[ATOMIC_TEMP89]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD90:%.*]] = load i32, i32* [[ATOMIC_TEMP89]], align 4
// CHK-CXX-NEXT:    [[BF_SHL91:%.*]] = shl i32 [[BF_LOAD90]], 1
// CHK-CXX-NEXT:    [[BF_ASHR92:%.*]] = ashr i32 [[BF_SHL91]], 1
// CHK-CXX-NEXT:    [[CMP93:%.*]] = icmp eq i32 [[BF_ASHR92]], [[TMP27]]
// CHK-CXX-NEXT:    [[FROMBOOL94:%.*]] = zext i1 [[CMP93]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL94]], i8* [[ATMP76]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP93]], label [[ATOMIC_CONT78]], label [[ATOMIC_EXIT95]]
// CHK-CXX:       atomic_exit95:
// CHK-CXX-NEXT:    [[TMP33:%.*]] = load i32, i32* [[ATMP70]], align 4
// CHK-CXX-NEXT:    [[TMP34:%.*]] = load i8, i8* [[ATMP76]], align 1
// CHK-CXX-NEXT:    [[CONV:%.*]] = zext i8 [[TMP34]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV]], i32* [[R]], align 4
// CHK-CXX-NEXT:    [[TMP35:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP36:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD96:%.*]] = load atomic i32, i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD96]], i32* [[ATOMIC_TEMP98]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD99:%.*]] = load i32, i32* [[ATOMIC_TEMP98]], align 4
// CHK-CXX-NEXT:    [[BF_SHL100:%.*]] = shl i32 [[BF_LOAD99]], 1
// CHK-CXX-NEXT:    [[BF_ASHR101:%.*]] = ashr i32 [[BF_SHL100]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR101]], i32* [[ATMP97]], align 4
// CHK-CXX-NEXT:    [[CMP102:%.*]] = icmp eq i32 [[BF_ASHR101]], [[TMP36]]
// CHK-CXX-NEXT:    [[FROMBOOL104:%.*]] = zext i1 [[CMP102]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL104]], i8* [[ATMP103]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP102]], label [[ATOMIC_CONT105:%.*]], label [[ATOMIC_EXIT122:%.*]]
// CHK-CXX:       atomic_cont105:
// CHK-CXX-NEXT:    [[TMP37:%.*]] = phi i32 [ [[ATOMIC_LOAD96]], [[ATOMIC_EXIT95]] ], [ [[TMP40:%.*]], [[ATOMIC_CMP115:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP37]], i32* [[ATOMIC_TEMP106]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD107:%.*]] = load i32, i32* [[ATOMIC_TEMP106]], align 4
// CHK-CXX-NEXT:    [[BF_SHL108:%.*]] = shl i32 [[BF_LOAD107]], 1
// CHK-CXX-NEXT:    [[BF_ASHR109:%.*]] = ashr i32 [[BF_SHL108]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR109]], i32* [[ATMP97]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP37]], i32* [[ATOMIC_TEMP110]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD111:%.*]] = load i32, i32* [[ATOMIC_TEMP110]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE112:%.*]] = and i32 [[TMP35]], 2147483647
// CHK-CXX-NEXT:    [[BF_CLEAR113:%.*]] = and i32 [[BF_LOAD111]], -2147483648
// CHK-CXX-NEXT:    [[BF_SET114:%.*]] = or i32 [[BF_CLEAR113]], [[BF_VALUE112]]
// CHK-CXX-NEXT:    store i32 [[BF_SET114]], i32* [[ATOMIC_TEMP110]], align 4
// CHK-CXX-NEXT:    [[TMP38:%.*]] = load i32, i32* [[ATOMIC_TEMP110]], align 4
// CHK-CXX-NEXT:    [[TMP39:%.*]] = cmpxchg i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*), i32 [[TMP37]], i32 [[TMP38]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP40]] = extractvalue { i32, i1 } [[TMP39]], 0
// CHK-CXX-NEXT:    [[TMP41:%.*]] = extractvalue { i32, i1 } [[TMP39]], 1
// CHK-CXX-NEXT:    br i1 [[TMP41]], label [[ATOMIC_EXIT122]], label [[ATOMIC_CMP115]]
// CHK-CXX:       atomic_cmp115:
// CHK-CXX-NEXT:    store i32 [[TMP40]], i32* [[ATOMIC_TEMP116]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD117:%.*]] = load i32, i32* [[ATOMIC_TEMP116]], align 4
// CHK-CXX-NEXT:    [[BF_SHL118:%.*]] = shl i32 [[BF_LOAD117]], 1
// CHK-CXX-NEXT:    [[BF_ASHR119:%.*]] = ashr i32 [[BF_SHL118]], 1
// CHK-CXX-NEXT:    [[CMP120:%.*]] = icmp eq i32 [[BF_ASHR119]], [[TMP36]]
// CHK-CXX-NEXT:    [[FROMBOOL121:%.*]] = zext i1 [[CMP120]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL121]], i8* [[ATMP103]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP120]], label [[ATOMIC_CONT105]], label [[ATOMIC_EXIT122]]
// CHK-CXX:       atomic_exit122:
// CHK-CXX-NEXT:    [[TMP42:%.*]] = load i32, i32* [[ATMP97]], align 4
// CHK-CXX-NEXT:    [[TMP43:%.*]] = load i8, i8* [[ATMP103]], align 1
// CHK-CXX-NEXT:    [[CONV123:%.*]] = zext i8 [[TMP43]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV123]], i32* [[R]], align 4
// CHK-CXX-NEXT:    [[TMP44:%.*]] = trunc i8 [[TMP43]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP44]], label [[ATOMIC_CAPTURE_CONT125:%.*]], label [[ATOMIC_CAPTURE124:%.*]]
// CHK-CXX:       atomic_capture124:
// CHK-CXX-NEXT:    store i32 [[TMP42]], i32* [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT125]]
// CHK-CXX:       atomic_capture_cont125:
// CHK-CXX-NEXT:    [[TMP45:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD126:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS2:%.*]], %struct.BitFields2* @bfx2, i32 0, i32 0) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD126]], i32* [[ATOMIC_TEMP128]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD129:%.*]] = load i32, i32* [[ATOMIC_TEMP128]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR130:%.*]] = ashr i32 [[BF_LOAD129]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR130]], i32* [[ATMP127]], align 4
// CHK-CXX-NEXT:    [[CMP131:%.*]] = icmp slt i32 [[BF_ASHR130]], [[TMP45]]
// CHK-CXX-NEXT:    [[FROMBOOL133:%.*]] = zext i1 [[CMP131]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL133]], i8* [[ATMP132]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP131]], label [[ATOMIC_CONT134:%.*]], label [[ATOMIC_EXIT150:%.*]]
// CHK-CXX:       atomic_cont134:
// CHK-CXX-NEXT:    [[TMP46:%.*]] = phi i32 [ [[ATOMIC_LOAD126]], [[ATOMIC_CAPTURE_CONT125]] ], [ [[TMP49:%.*]], [[ATOMIC_CMP144:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP46]], i32* [[ATOMIC_TEMP135]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD136:%.*]] = load i32, i32* [[ATOMIC_TEMP135]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR137:%.*]] = ashr i32 [[BF_LOAD136]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR137]], i32* [[ATMP127]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP46]], i32* [[ATOMIC_TEMP138]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD139:%.*]] = load i32, i32* [[ATOMIC_TEMP138]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE140:%.*]] = and i32 [[TMP45]], 1
// CHK-CXX-NEXT:    [[BF_SHL141:%.*]] = shl i32 [[BF_VALUE140]], 31
// CHK-CXX-NEXT:    [[BF_CLEAR142:%.*]] = and i32 [[BF_LOAD139]], 2147483647
// CHK-CXX-NEXT:    [[BF_SET143:%.*]] = or i32 [[BF_CLEAR142]], [[BF_SHL141]]
// CHK-CXX-NEXT:    store i32 [[BF_SET143]], i32* [[ATOMIC_TEMP138]], align 4
// CHK-CXX-NEXT:    [[TMP47:%.*]] = load i32, i32* [[ATOMIC_TEMP138]], align 4
// CHK-CXX-NEXT:    [[TMP48:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0), i32 [[TMP46]], i32 [[TMP47]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP49]] = extractvalue { i32, i1 } [[TMP48]], 0
// CHK-CXX-NEXT:    [[TMP50:%.*]] = extractvalue { i32, i1 } [[TMP48]], 1
// CHK-CXX-NEXT:    br i1 [[TMP50]], label [[ATOMIC_EXIT150]], label [[ATOMIC_CMP144]]
// CHK-CXX:       atomic_cmp144:
// CHK-CXX-NEXT:    store i32 [[TMP49]], i32* [[ATOMIC_TEMP145]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD146:%.*]] = load i32, i32* [[ATOMIC_TEMP145]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR147:%.*]] = ashr i32 [[BF_LOAD146]], 31
// CHK-CXX-NEXT:    [[CMP148:%.*]] = icmp slt i32 [[BF_ASHR147]], [[TMP45]]
// CHK-CXX-NEXT:    [[FROMBOOL149:%.*]] = zext i1 [[CMP148]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL149]], i8* [[ATMP132]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP148]], label [[ATOMIC_CONT134]], label [[ATOMIC_EXIT150]]
// CHK-CXX:       atomic_exit150:
// CHK-CXX-NEXT:    [[TMP51:%.*]] = load i32, i32* [[ATMP127]], align 4
// CHK-CXX-NEXT:    [[TMP52:%.*]] = load i8, i8* [[ATMP132]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP51]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP53:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD151:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD151]], i32* [[ATOMIC_TEMP153]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD154:%.*]] = load i32, i32* [[ATOMIC_TEMP153]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR155:%.*]] = ashr i32 [[BF_LOAD154]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR155]], i32* [[ATMP152]], align 4
// CHK-CXX-NEXT:    [[CMP156:%.*]] = icmp slt i32 [[BF_ASHR155]], [[TMP53]]
// CHK-CXX-NEXT:    [[FROMBOOL158:%.*]] = zext i1 [[CMP156]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL158]], i8* [[ATMP157]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP156]], label [[ATOMIC_CONT159:%.*]], label [[ATOMIC_EXIT176:%.*]]
// CHK-CXX:       atomic_cont159:
// CHK-CXX-NEXT:    [[TMP54:%.*]] = phi i32 [ [[ATOMIC_LOAD151]], [[ATOMIC_EXIT150]] ], [ [[TMP57:%.*]], [[ATOMIC_CMP170:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP54]], i32* [[ATOMIC_TEMP160]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD161:%.*]] = load i32, i32* [[ATOMIC_TEMP160]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR162:%.*]] = ashr i32 [[BF_LOAD161]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR162]], i32* [[ATMP152]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP54]], i32* [[ATOMIC_TEMP163]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD164:%.*]] = load i32, i32* [[ATOMIC_TEMP163]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE165:%.*]] = and i32 [[TMP53]], 1
// CHK-CXX-NEXT:    [[BF_SHL166:%.*]] = shl i32 [[BF_VALUE165]], 31
// CHK-CXX-NEXT:    [[BF_CLEAR167:%.*]] = and i32 [[BF_LOAD164]], 2147483647
// CHK-CXX-NEXT:    [[BF_SET168:%.*]] = or i32 [[BF_CLEAR167]], [[BF_SHL166]]
// CHK-CXX-NEXT:    store i32 [[BF_SET168]], i32* [[ATOMIC_TEMP163]], align 4
// CHK-CXX-NEXT:    [[TMP55:%.*]] = load i32, i32* [[ATOMIC_TEMP163]], align 4
// CHK-CXX-NEXT:    [[TMP56:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0), i32 [[TMP54]], i32 [[TMP55]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP57]] = extractvalue { i32, i1 } [[TMP56]], 0
// CHK-CXX-NEXT:    [[TMP58:%.*]] = extractvalue { i32, i1 } [[TMP56]], 1
// CHK-CXX-NEXT:    br i1 [[TMP58]], label [[ATOMIC_UPD_EXIT169:%.*]], label [[ATOMIC_CMP170]]
// CHK-CXX:       atomic_upd_exit169:
// CHK-CXX-NEXT:    store i32 [[TMP53]], i32* [[ATMP152]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT176]]
// CHK-CXX:       atomic_cmp170:
// CHK-CXX-NEXT:    store i32 [[TMP57]], i32* [[ATOMIC_TEMP171]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD172:%.*]] = load i32, i32* [[ATOMIC_TEMP171]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR173:%.*]] = ashr i32 [[BF_LOAD172]], 31
// CHK-CXX-NEXT:    [[CMP174:%.*]] = icmp slt i32 [[BF_ASHR173]], [[TMP53]]
// CHK-CXX-NEXT:    [[FROMBOOL175:%.*]] = zext i1 [[CMP174]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL175]], i8* [[ATMP157]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP174]], label [[ATOMIC_CONT159]], label [[ATOMIC_EXIT176]]
// CHK-CXX:       atomic_exit176:
// CHK-CXX-NEXT:    [[TMP59:%.*]] = load i32, i32* [[ATMP152]], align 4
// CHK-CXX-NEXT:    [[TMP60:%.*]] = load i8, i8* [[ATMP157]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP59]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP61:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP62:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD177:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD177]], i32* [[ATOMIC_TEMP179]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD180:%.*]] = load i32, i32* [[ATOMIC_TEMP179]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR181:%.*]] = ashr i32 [[BF_LOAD180]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR181]], i32* [[ATMP178]], align 4
// CHK-CXX-NEXT:    [[CMP182:%.*]] = icmp eq i32 [[BF_ASHR181]], [[TMP62]]
// CHK-CXX-NEXT:    [[FROMBOOL184:%.*]] = zext i1 [[CMP182]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL184]], i8* [[ATMP183]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP182]], label [[ATOMIC_CONT185:%.*]], label [[ATOMIC_EXIT202:%.*]]
// CHK-CXX:       atomic_cont185:
// CHK-CXX-NEXT:    [[TMP63:%.*]] = phi i32 [ [[ATOMIC_LOAD177]], [[ATOMIC_EXIT176]] ], [ [[TMP66:%.*]], [[ATOMIC_CMP196:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP63]], i32* [[ATOMIC_TEMP186]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD187:%.*]] = load i32, i32* [[ATOMIC_TEMP186]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR188:%.*]] = ashr i32 [[BF_LOAD187]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR188]], i32* [[ATMP178]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP63]], i32* [[ATOMIC_TEMP189]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD190:%.*]] = load i32, i32* [[ATOMIC_TEMP189]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE191:%.*]] = and i32 [[TMP61]], 1
// CHK-CXX-NEXT:    [[BF_SHL192:%.*]] = shl i32 [[BF_VALUE191]], 31
// CHK-CXX-NEXT:    [[BF_CLEAR193:%.*]] = and i32 [[BF_LOAD190]], 2147483647
// CHK-CXX-NEXT:    [[BF_SET194:%.*]] = or i32 [[BF_CLEAR193]], [[BF_SHL192]]
// CHK-CXX-NEXT:    store i32 [[BF_SET194]], i32* [[ATOMIC_TEMP189]], align 4
// CHK-CXX-NEXT:    [[TMP64:%.*]] = load i32, i32* [[ATOMIC_TEMP189]], align 4
// CHK-CXX-NEXT:    [[TMP65:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0), i32 [[TMP63]], i32 [[TMP64]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP66]] = extractvalue { i32, i1 } [[TMP65]], 0
// CHK-CXX-NEXT:    [[TMP67:%.*]] = extractvalue { i32, i1 } [[TMP65]], 1
// CHK-CXX-NEXT:    br i1 [[TMP67]], label [[ATOMIC_UPD_EXIT195:%.*]], label [[ATOMIC_CMP196]]
// CHK-CXX:       atomic_upd_exit195:
// CHK-CXX-NEXT:    store i32 [[TMP61]], i32* [[ATMP178]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT202]]
// CHK-CXX:       atomic_cmp196:
// CHK-CXX-NEXT:    store i32 [[TMP66]], i32* [[ATOMIC_TEMP197]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD198:%.*]] = load i32, i32* [[ATOMIC_TEMP197]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR199:%.*]] = ashr i32 [[BF_LOAD198]], 31
// CHK-CXX-NEXT:    [[CMP200:%.*]] = icmp eq i32 [[BF_ASHR199]], [[TMP62]]
// CHK-CXX-NEXT:    [[FROMBOOL201:%.*]] = zext i1 [[CMP200]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL201]], i8* [[ATMP183]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP200]], label [[ATOMIC_CONT185]], label [[ATOMIC_EXIT202]]
// CHK-CXX:       atomic_exit202:
// CHK-CXX-NEXT:    [[TMP68:%.*]] = load i32, i32* [[ATMP178]], align 4
// CHK-CXX-NEXT:    [[TMP69:%.*]] = load i8, i8* [[ATMP183]], align 1
// CHK-CXX-NEXT:    [[TMP70:%.*]] = trunc i8 [[TMP69]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP70]], label [[ATOMIC_CAPTURE_CONT204:%.*]], label [[ATOMIC_CAPTURE203:%.*]]
// CHK-CXX:       atomic_capture203:
// CHK-CXX-NEXT:    store i32 [[TMP68]], i32* [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT204]]
// CHK-CXX:       atomic_capture_cont204:
// CHK-CXX-NEXT:    [[TMP71:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP72:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD205:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD205]], i32* [[ATOMIC_TEMP207]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD208:%.*]] = load i32, i32* [[ATOMIC_TEMP207]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR209:%.*]] = ashr i32 [[BF_LOAD208]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR209]], i32* [[ATMP206]], align 4
// CHK-CXX-NEXT:    [[CMP210:%.*]] = icmp eq i32 [[BF_ASHR209]], [[TMP72]]
// CHK-CXX-NEXT:    [[FROMBOOL212:%.*]] = zext i1 [[CMP210]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL212]], i8* [[ATMP211]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP210]], label [[ATOMIC_CONT213:%.*]], label [[ATOMIC_EXIT229:%.*]]
// CHK-CXX:       atomic_cont213:
// CHK-CXX-NEXT:    [[TMP73:%.*]] = phi i32 [ [[ATOMIC_LOAD205]], [[ATOMIC_CAPTURE_CONT204]] ], [ [[TMP76:%.*]], [[ATOMIC_CMP223:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP73]], i32* [[ATOMIC_TEMP214]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD215:%.*]] = load i32, i32* [[ATOMIC_TEMP214]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR216:%.*]] = ashr i32 [[BF_LOAD215]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR216]], i32* [[ATMP206]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP73]], i32* [[ATOMIC_TEMP217]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD218:%.*]] = load i32, i32* [[ATOMIC_TEMP217]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE219:%.*]] = and i32 [[TMP71]], 1
// CHK-CXX-NEXT:    [[BF_SHL220:%.*]] = shl i32 [[BF_VALUE219]], 31
// CHK-CXX-NEXT:    [[BF_CLEAR221:%.*]] = and i32 [[BF_LOAD218]], 2147483647
// CHK-CXX-NEXT:    [[BF_SET222:%.*]] = or i32 [[BF_CLEAR221]], [[BF_SHL220]]
// CHK-CXX-NEXT:    store i32 [[BF_SET222]], i32* [[ATOMIC_TEMP217]], align 4
// CHK-CXX-NEXT:    [[TMP74:%.*]] = load i32, i32* [[ATOMIC_TEMP217]], align 4
// CHK-CXX-NEXT:    [[TMP75:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0), i32 [[TMP73]], i32 [[TMP74]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP76]] = extractvalue { i32, i1 } [[TMP75]], 0
// CHK-CXX-NEXT:    [[TMP77:%.*]] = extractvalue { i32, i1 } [[TMP75]], 1
// CHK-CXX-NEXT:    br i1 [[TMP77]], label [[ATOMIC_EXIT229]], label [[ATOMIC_CMP223]]
// CHK-CXX:       atomic_cmp223:
// CHK-CXX-NEXT:    store i32 [[TMP76]], i32* [[ATOMIC_TEMP224]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD225:%.*]] = load i32, i32* [[ATOMIC_TEMP224]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR226:%.*]] = ashr i32 [[BF_LOAD225]], 31
// CHK-CXX-NEXT:    [[CMP227:%.*]] = icmp eq i32 [[BF_ASHR226]], [[TMP72]]
// CHK-CXX-NEXT:    [[FROMBOOL228:%.*]] = zext i1 [[CMP227]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL228]], i8* [[ATMP211]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP227]], label [[ATOMIC_CONT213]], label [[ATOMIC_EXIT229]]
// CHK-CXX:       atomic_exit229:
// CHK-CXX-NEXT:    [[TMP78:%.*]] = load i32, i32* [[ATMP206]], align 4
// CHK-CXX-NEXT:    [[TMP79:%.*]] = load i8, i8* [[ATMP211]], align 1
// CHK-CXX-NEXT:    [[CONV230:%.*]] = zext i8 [[TMP79]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV230]], i32* [[R]], align 4
// CHK-CXX-NEXT:    [[TMP80:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP81:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD231:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD231]], i32* [[ATOMIC_TEMP233]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD234:%.*]] = load i32, i32* [[ATOMIC_TEMP233]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR235:%.*]] = ashr i32 [[BF_LOAD234]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR235]], i32* [[ATMP232]], align 4
// CHK-CXX-NEXT:    [[CMP236:%.*]] = icmp eq i32 [[BF_ASHR235]], [[TMP81]]
// CHK-CXX-NEXT:    [[FROMBOOL238:%.*]] = zext i1 [[CMP236]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL238]], i8* [[ATMP237]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP236]], label [[ATOMIC_CONT239:%.*]], label [[ATOMIC_EXIT255:%.*]]
// CHK-CXX:       atomic_cont239:
// CHK-CXX-NEXT:    [[TMP82:%.*]] = phi i32 [ [[ATOMIC_LOAD231]], [[ATOMIC_EXIT229]] ], [ [[TMP85:%.*]], [[ATOMIC_CMP249:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP82]], i32* [[ATOMIC_TEMP240]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD241:%.*]] = load i32, i32* [[ATOMIC_TEMP240]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR242:%.*]] = ashr i32 [[BF_LOAD241]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR242]], i32* [[ATMP232]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP82]], i32* [[ATOMIC_TEMP243]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD244:%.*]] = load i32, i32* [[ATOMIC_TEMP243]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE245:%.*]] = and i32 [[TMP80]], 1
// CHK-CXX-NEXT:    [[BF_SHL246:%.*]] = shl i32 [[BF_VALUE245]], 31
// CHK-CXX-NEXT:    [[BF_CLEAR247:%.*]] = and i32 [[BF_LOAD244]], 2147483647
// CHK-CXX-NEXT:    [[BF_SET248:%.*]] = or i32 [[BF_CLEAR247]], [[BF_SHL246]]
// CHK-CXX-NEXT:    store i32 [[BF_SET248]], i32* [[ATOMIC_TEMP243]], align 4
// CHK-CXX-NEXT:    [[TMP83:%.*]] = load i32, i32* [[ATOMIC_TEMP243]], align 4
// CHK-CXX-NEXT:    [[TMP84:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0), i32 [[TMP82]], i32 [[TMP83]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP85]] = extractvalue { i32, i1 } [[TMP84]], 0
// CHK-CXX-NEXT:    [[TMP86:%.*]] = extractvalue { i32, i1 } [[TMP84]], 1
// CHK-CXX-NEXT:    br i1 [[TMP86]], label [[ATOMIC_EXIT255]], label [[ATOMIC_CMP249]]
// CHK-CXX:       atomic_cmp249:
// CHK-CXX-NEXT:    store i32 [[TMP85]], i32* [[ATOMIC_TEMP250]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD251:%.*]] = load i32, i32* [[ATOMIC_TEMP250]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR252:%.*]] = ashr i32 [[BF_LOAD251]], 31
// CHK-CXX-NEXT:    [[CMP253:%.*]] = icmp eq i32 [[BF_ASHR252]], [[TMP81]]
// CHK-CXX-NEXT:    [[FROMBOOL254:%.*]] = zext i1 [[CMP253]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL254]], i8* [[ATMP237]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP253]], label [[ATOMIC_CONT239]], label [[ATOMIC_EXIT255]]
// CHK-CXX:       atomic_exit255:
// CHK-CXX-NEXT:    [[TMP87:%.*]] = load i32, i32* [[ATMP232]], align 4
// CHK-CXX-NEXT:    [[TMP88:%.*]] = load i8, i8* [[ATMP237]], align 1
// CHK-CXX-NEXT:    [[CONV256:%.*]] = zext i8 [[TMP88]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV256]], i32* [[R]], align 4
// CHK-CXX-NEXT:    [[TMP89:%.*]] = trunc i8 [[TMP88]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP89]], label [[ATOMIC_CAPTURE_CONT258:%.*]], label [[ATOMIC_CAPTURE257:%.*]]
// CHK-CXX:       atomic_capture257:
// CHK-CXX-NEXT:    store i32 [[TMP87]], i32* [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT258]]
// CHK-CXX:       atomic_capture_cont258:
// CHK-CXX-NEXT:    [[TMP90:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD259:%.*]] = load atomic i8, i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3) monotonic, align 1
// CHK-CXX-NEXT:    [[TMP91:%.*]] = bitcast i32* [[ATOMIC_TEMP261]] to i8*
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD259]], i8* [[TMP91]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD262:%.*]] = load i8, i8* [[TMP91]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR263:%.*]] = ashr i8 [[BF_LOAD262]], 7
// CHK-CXX-NEXT:    [[BF_CAST:%.*]] = sext i8 [[BF_ASHR263]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST]], i32* [[ATMP260]], align 4
// CHK-CXX-NEXT:    [[CMP264:%.*]] = icmp slt i32 [[BF_CAST]], [[TMP90]]
// CHK-CXX-NEXT:    [[FROMBOOL266:%.*]] = zext i1 [[CMP264]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL266]], i8* [[ATMP265]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP264]], label [[ATOMIC_CONT267:%.*]], label [[ATOMIC_EXIT285:%.*]]
// CHK-CXX:       atomic_cont267:
// CHK-CXX-NEXT:    [[TMP92:%.*]] = phi i8 [ [[ATOMIC_LOAD259]], [[ATOMIC_CAPTURE_CONT258]] ], [ [[TMP98:%.*]], [[ATOMIC_CMP278:%.*]] ]
// CHK-CXX-NEXT:    [[TMP93:%.*]] = bitcast i32* [[ATOMIC_TEMP268]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP92]], i8* [[TMP93]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD269:%.*]] = load i8, i8* [[TMP93]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR270:%.*]] = ashr i8 [[BF_LOAD269]], 7
// CHK-CXX-NEXT:    [[BF_CAST271:%.*]] = sext i8 [[BF_ASHR270]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST271]], i32* [[ATMP260]], align 4
// CHK-CXX-NEXT:    [[TMP94:%.*]] = bitcast i32* [[ATOMIC_TEMP272]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP92]], i8* [[TMP94]], align 1
// CHK-CXX-NEXT:    [[TMP95:%.*]] = trunc i32 [[TMP90]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD273:%.*]] = load i8, i8* [[TMP94]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE274:%.*]] = and i8 [[TMP95]], 1
// CHK-CXX-NEXT:    [[BF_SHL275:%.*]] = shl i8 [[BF_VALUE274]], 7
// CHK-CXX-NEXT:    [[BF_CLEAR276:%.*]] = and i8 [[BF_LOAD273]], 127
// CHK-CXX-NEXT:    [[BF_SET277:%.*]] = or i8 [[BF_CLEAR276]], [[BF_SHL275]]
// CHK-CXX-NEXT:    store i8 [[BF_SET277]], i8* [[TMP94]], align 1
// CHK-CXX-NEXT:    [[TMP96:%.*]] = load i8, i8* [[TMP94]], align 1
// CHK-CXX-NEXT:    [[TMP97:%.*]] = cmpxchg i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3), i8 [[TMP92]], i8 [[TMP96]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP98]] = extractvalue { i8, i1 } [[TMP97]], 0
// CHK-CXX-NEXT:    [[TMP99:%.*]] = extractvalue { i8, i1 } [[TMP97]], 1
// CHK-CXX-NEXT:    br i1 [[TMP99]], label [[ATOMIC_EXIT285]], label [[ATOMIC_CMP278]]
// CHK-CXX:       atomic_cmp278:
// CHK-CXX-NEXT:    [[TMP100:%.*]] = bitcast i32* [[ATOMIC_TEMP279]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP98]], i8* [[TMP100]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD280:%.*]] = load i8, i8* [[TMP100]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR281:%.*]] = ashr i8 [[BF_LOAD280]], 7
// CHK-CXX-NEXT:    [[BF_CAST282:%.*]] = sext i8 [[BF_ASHR281]] to i32
// CHK-CXX-NEXT:    [[CMP283:%.*]] = icmp slt i32 [[BF_CAST282]], [[TMP90]]
// CHK-CXX-NEXT:    [[FROMBOOL284:%.*]] = zext i1 [[CMP283]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL284]], i8* [[ATMP265]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP283]], label [[ATOMIC_CONT267]], label [[ATOMIC_EXIT285]]
// CHK-CXX:       atomic_exit285:
// CHK-CXX-NEXT:    [[TMP101:%.*]] = load i32, i32* [[ATMP260]], align 4
// CHK-CXX-NEXT:    [[TMP102:%.*]] = load i8, i8* [[ATMP265]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP101]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP103:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD286:%.*]] = load atomic i8, i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3) monotonic, align 1
// CHK-CXX-NEXT:    [[TMP104:%.*]] = bitcast i32* [[ATOMIC_TEMP288]] to i8*
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD286]], i8* [[TMP104]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD289:%.*]] = load i8, i8* [[TMP104]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR290:%.*]] = ashr i8 [[BF_LOAD289]], 7
// CHK-CXX-NEXT:    [[BF_CAST291:%.*]] = sext i8 [[BF_ASHR290]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST291]], i32* [[ATMP287]], align 4
// CHK-CXX-NEXT:    [[CMP292:%.*]] = icmp slt i32 [[BF_CAST291]], [[TMP103]]
// CHK-CXX-NEXT:    [[FROMBOOL294:%.*]] = zext i1 [[CMP292]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL294]], i8* [[ATMP293]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP292]], label [[ATOMIC_CONT295:%.*]], label [[ATOMIC_EXIT314:%.*]]
// CHK-CXX:       atomic_cont295:
// CHK-CXX-NEXT:    [[TMP105:%.*]] = phi i8 [ [[ATOMIC_LOAD286]], [[ATOMIC_EXIT285]] ], [ [[TMP111:%.*]], [[ATOMIC_CMP307:%.*]] ]
// CHK-CXX-NEXT:    [[TMP106:%.*]] = bitcast i32* [[ATOMIC_TEMP296]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP105]], i8* [[TMP106]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD297:%.*]] = load i8, i8* [[TMP106]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR298:%.*]] = ashr i8 [[BF_LOAD297]], 7
// CHK-CXX-NEXT:    [[BF_CAST299:%.*]] = sext i8 [[BF_ASHR298]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST299]], i32* [[ATMP287]], align 4
// CHK-CXX-NEXT:    [[TMP107:%.*]] = bitcast i32* [[ATOMIC_TEMP300]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP105]], i8* [[TMP107]], align 1
// CHK-CXX-NEXT:    [[TMP108:%.*]] = trunc i32 [[TMP103]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD301:%.*]] = load i8, i8* [[TMP107]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE302:%.*]] = and i8 [[TMP108]], 1
// CHK-CXX-NEXT:    [[BF_SHL303:%.*]] = shl i8 [[BF_VALUE302]], 7
// CHK-CXX-NEXT:    [[BF_CLEAR304:%.*]] = and i8 [[BF_LOAD301]], 127
// CHK-CXX-NEXT:    [[BF_SET305:%.*]] = or i8 [[BF_CLEAR304]], [[BF_SHL303]]
// CHK-CXX-NEXT:    store i8 [[BF_SET305]], i8* [[TMP107]], align 1
// CHK-CXX-NEXT:    [[TMP109:%.*]] = load i8, i8* [[TMP107]], align 1
// CHK-CXX-NEXT:    [[TMP110:%.*]] = cmpxchg i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3), i8 [[TMP105]], i8 [[TMP109]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP111]] = extractvalue { i8, i1 } [[TMP110]], 0
// CHK-CXX-NEXT:    [[TMP112:%.*]] = extractvalue { i8, i1 } [[TMP110]], 1
// CHK-CXX-NEXT:    br i1 [[TMP112]], label [[ATOMIC_UPD_EXIT306:%.*]], label [[ATOMIC_CMP307]]
// CHK-CXX:       atomic_upd_exit306:
// CHK-CXX-NEXT:    store i32 [[TMP103]], i32* [[ATMP287]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT314]]
// CHK-CXX:       atomic_cmp307:
// CHK-CXX-NEXT:    [[TMP113:%.*]] = bitcast i32* [[ATOMIC_TEMP308]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP111]], i8* [[TMP113]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD309:%.*]] = load i8, i8* [[TMP113]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR310:%.*]] = ashr i8 [[BF_LOAD309]], 7
// CHK-CXX-NEXT:    [[BF_CAST311:%.*]] = sext i8 [[BF_ASHR310]] to i32
// CHK-CXX-NEXT:    [[CMP312:%.*]] = icmp slt i32 [[BF_CAST311]], [[TMP103]]
// CHK-CXX-NEXT:    [[FROMBOOL313:%.*]] = zext i1 [[CMP312]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL313]], i8* [[ATMP293]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP312]], label [[ATOMIC_CONT295]], label [[ATOMIC_EXIT314]]
// CHK-CXX:       atomic_exit314:
// CHK-CXX-NEXT:    [[TMP114:%.*]] = load i32, i32* [[ATMP287]], align 4
// CHK-CXX-NEXT:    [[TMP115:%.*]] = load i8, i8* [[ATMP293]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP114]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP116:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP117:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD315:%.*]] = load atomic i8, i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3) monotonic, align 1
// CHK-CXX-NEXT:    [[TMP118:%.*]] = bitcast i32* [[ATOMIC_TEMP317]] to i8*
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD315]], i8* [[TMP118]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD318:%.*]] = load i8, i8* [[TMP118]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR319:%.*]] = ashr i8 [[BF_LOAD318]], 7
// CHK-CXX-NEXT:    [[BF_CAST320:%.*]] = sext i8 [[BF_ASHR319]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST320]], i32* [[ATMP316]], align 4
// CHK-CXX-NEXT:    [[CMP321:%.*]] = icmp eq i32 [[BF_CAST320]], [[TMP117]]
// CHK-CXX-NEXT:    [[FROMBOOL323:%.*]] = zext i1 [[CMP321]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL323]], i8* [[ATMP322]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP321]], label [[ATOMIC_CONT324:%.*]], label [[ATOMIC_EXIT343:%.*]]
// CHK-CXX:       atomic_cont324:
// CHK-CXX-NEXT:    [[TMP119:%.*]] = phi i8 [ [[ATOMIC_LOAD315]], [[ATOMIC_EXIT314]] ], [ [[TMP125:%.*]], [[ATOMIC_CMP336:%.*]] ]
// CHK-CXX-NEXT:    [[TMP120:%.*]] = bitcast i32* [[ATOMIC_TEMP325]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP119]], i8* [[TMP120]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD326:%.*]] = load i8, i8* [[TMP120]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR327:%.*]] = ashr i8 [[BF_LOAD326]], 7
// CHK-CXX-NEXT:    [[BF_CAST328:%.*]] = sext i8 [[BF_ASHR327]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST328]], i32* [[ATMP316]], align 4
// CHK-CXX-NEXT:    [[TMP121:%.*]] = bitcast i32* [[ATOMIC_TEMP329]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP119]], i8* [[TMP121]], align 1
// CHK-CXX-NEXT:    [[TMP122:%.*]] = trunc i32 [[TMP116]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD330:%.*]] = load i8, i8* [[TMP121]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE331:%.*]] = and i8 [[TMP122]], 1
// CHK-CXX-NEXT:    [[BF_SHL332:%.*]] = shl i8 [[BF_VALUE331]], 7
// CHK-CXX-NEXT:    [[BF_CLEAR333:%.*]] = and i8 [[BF_LOAD330]], 127
// CHK-CXX-NEXT:    [[BF_SET334:%.*]] = or i8 [[BF_CLEAR333]], [[BF_SHL332]]
// CHK-CXX-NEXT:    store i8 [[BF_SET334]], i8* [[TMP121]], align 1
// CHK-CXX-NEXT:    [[TMP123:%.*]] = load i8, i8* [[TMP121]], align 1
// CHK-CXX-NEXT:    [[TMP124:%.*]] = cmpxchg i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3), i8 [[TMP119]], i8 [[TMP123]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP125]] = extractvalue { i8, i1 } [[TMP124]], 0
// CHK-CXX-NEXT:    [[TMP126:%.*]] = extractvalue { i8, i1 } [[TMP124]], 1
// CHK-CXX-NEXT:    br i1 [[TMP126]], label [[ATOMIC_UPD_EXIT335:%.*]], label [[ATOMIC_CMP336]]
// CHK-CXX:       atomic_upd_exit335:
// CHK-CXX-NEXT:    store i32 [[TMP116]], i32* [[ATMP316]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT343]]
// CHK-CXX:       atomic_cmp336:
// CHK-CXX-NEXT:    [[TMP127:%.*]] = bitcast i32* [[ATOMIC_TEMP337]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP125]], i8* [[TMP127]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD338:%.*]] = load i8, i8* [[TMP127]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR339:%.*]] = ashr i8 [[BF_LOAD338]], 7
// CHK-CXX-NEXT:    [[BF_CAST340:%.*]] = sext i8 [[BF_ASHR339]] to i32
// CHK-CXX-NEXT:    [[CMP341:%.*]] = icmp eq i32 [[BF_CAST340]], [[TMP117]]
// CHK-CXX-NEXT:    [[FROMBOOL342:%.*]] = zext i1 [[CMP341]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL342]], i8* [[ATMP322]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP341]], label [[ATOMIC_CONT324]], label [[ATOMIC_EXIT343]]
// CHK-CXX:       atomic_exit343:
// CHK-CXX-NEXT:    [[TMP128:%.*]] = load i32, i32* [[ATMP316]], align 4
// CHK-CXX-NEXT:    [[TMP129:%.*]] = load i8, i8* [[ATMP322]], align 1
// CHK-CXX-NEXT:    [[TMP130:%.*]] = trunc i8 [[TMP129]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP130]], label [[ATOMIC_CAPTURE_CONT345:%.*]], label [[ATOMIC_CAPTURE344:%.*]]
// CHK-CXX:       atomic_capture344:
// CHK-CXX-NEXT:    store i32 [[TMP128]], i32* [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT345]]
// CHK-CXX:       atomic_capture_cont345:
// CHK-CXX-NEXT:    [[TMP131:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP132:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD346:%.*]] = load atomic i8, i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3) monotonic, align 1
// CHK-CXX-NEXT:    [[TMP133:%.*]] = bitcast i32* [[ATOMIC_TEMP348]] to i8*
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD346]], i8* [[TMP133]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD349:%.*]] = load i8, i8* [[TMP133]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR350:%.*]] = ashr i8 [[BF_LOAD349]], 7
// CHK-CXX-NEXT:    [[BF_CAST351:%.*]] = sext i8 [[BF_ASHR350]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST351]], i32* [[ATMP347]], align 4
// CHK-CXX-NEXT:    [[CMP352:%.*]] = icmp eq i32 [[BF_CAST351]], [[TMP132]]
// CHK-CXX-NEXT:    [[FROMBOOL354:%.*]] = zext i1 [[CMP352]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL354]], i8* [[ATMP353]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP352]], label [[ATOMIC_CONT355:%.*]], label [[ATOMIC_EXIT373:%.*]]
// CHK-CXX:       atomic_cont355:
// CHK-CXX-NEXT:    [[TMP134:%.*]] = phi i8 [ [[ATOMIC_LOAD346]], [[ATOMIC_CAPTURE_CONT345]] ], [ [[TMP140:%.*]], [[ATOMIC_CMP366:%.*]] ]
// CHK-CXX-NEXT:    [[TMP135:%.*]] = bitcast i32* [[ATOMIC_TEMP356]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP134]], i8* [[TMP135]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD357:%.*]] = load i8, i8* [[TMP135]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR358:%.*]] = ashr i8 [[BF_LOAD357]], 7
// CHK-CXX-NEXT:    [[BF_CAST359:%.*]] = sext i8 [[BF_ASHR358]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST359]], i32* [[ATMP347]], align 4
// CHK-CXX-NEXT:    [[TMP136:%.*]] = bitcast i32* [[ATOMIC_TEMP360]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP134]], i8* [[TMP136]], align 1
// CHK-CXX-NEXT:    [[TMP137:%.*]] = trunc i32 [[TMP131]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD361:%.*]] = load i8, i8* [[TMP136]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE362:%.*]] = and i8 [[TMP137]], 1
// CHK-CXX-NEXT:    [[BF_SHL363:%.*]] = shl i8 [[BF_VALUE362]], 7
// CHK-CXX-NEXT:    [[BF_CLEAR364:%.*]] = and i8 [[BF_LOAD361]], 127
// CHK-CXX-NEXT:    [[BF_SET365:%.*]] = or i8 [[BF_CLEAR364]], [[BF_SHL363]]
// CHK-CXX-NEXT:    store i8 [[BF_SET365]], i8* [[TMP136]], align 1
// CHK-CXX-NEXT:    [[TMP138:%.*]] = load i8, i8* [[TMP136]], align 1
// CHK-CXX-NEXT:    [[TMP139:%.*]] = cmpxchg i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3), i8 [[TMP134]], i8 [[TMP138]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP140]] = extractvalue { i8, i1 } [[TMP139]], 0
// CHK-CXX-NEXT:    [[TMP141:%.*]] = extractvalue { i8, i1 } [[TMP139]], 1
// CHK-CXX-NEXT:    br i1 [[TMP141]], label [[ATOMIC_EXIT373]], label [[ATOMIC_CMP366]]
// CHK-CXX:       atomic_cmp366:
// CHK-CXX-NEXT:    [[TMP142:%.*]] = bitcast i32* [[ATOMIC_TEMP367]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP140]], i8* [[TMP142]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD368:%.*]] = load i8, i8* [[TMP142]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR369:%.*]] = ashr i8 [[BF_LOAD368]], 7
// CHK-CXX-NEXT:    [[BF_CAST370:%.*]] = sext i8 [[BF_ASHR369]] to i32
// CHK-CXX-NEXT:    [[CMP371:%.*]] = icmp eq i32 [[BF_CAST370]], [[TMP132]]
// CHK-CXX-NEXT:    [[FROMBOOL372:%.*]] = zext i1 [[CMP371]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL372]], i8* [[ATMP353]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP371]], label [[ATOMIC_CONT355]], label [[ATOMIC_EXIT373]]
// CHK-CXX:       atomic_exit373:
// CHK-CXX-NEXT:    [[TMP143:%.*]] = load i32, i32* [[ATMP347]], align 4
// CHK-CXX-NEXT:    [[TMP144:%.*]] = load i8, i8* [[ATMP353]], align 1
// CHK-CXX-NEXT:    [[CONV374:%.*]] = zext i8 [[TMP144]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV374]], i32* [[R]], align 4
// CHK-CXX-NEXT:    [[TMP145:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP146:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD375:%.*]] = load atomic i8, i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3) monotonic, align 1
// CHK-CXX-NEXT:    [[TMP147:%.*]] = bitcast i32* [[ATOMIC_TEMP377]] to i8*
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD375]], i8* [[TMP147]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD378:%.*]] = load i8, i8* [[TMP147]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR379:%.*]] = ashr i8 [[BF_LOAD378]], 7
// CHK-CXX-NEXT:    [[BF_CAST380:%.*]] = sext i8 [[BF_ASHR379]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST380]], i32* [[ATMP376]], align 4
// CHK-CXX-NEXT:    [[CMP381:%.*]] = icmp eq i32 [[BF_CAST380]], [[TMP146]]
// CHK-CXX-NEXT:    [[FROMBOOL383:%.*]] = zext i1 [[CMP381]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL383]], i8* [[ATMP382]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP381]], label [[ATOMIC_CONT384:%.*]], label [[ATOMIC_EXIT402:%.*]]
// CHK-CXX:       atomic_cont384:
// CHK-CXX-NEXT:    [[TMP148:%.*]] = phi i8 [ [[ATOMIC_LOAD375]], [[ATOMIC_EXIT373]] ], [ [[TMP154:%.*]], [[ATOMIC_CMP395:%.*]] ]
// CHK-CXX-NEXT:    [[TMP149:%.*]] = bitcast i32* [[ATOMIC_TEMP385]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP148]], i8* [[TMP149]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD386:%.*]] = load i8, i8* [[TMP149]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR387:%.*]] = ashr i8 [[BF_LOAD386]], 7
// CHK-CXX-NEXT:    [[BF_CAST388:%.*]] = sext i8 [[BF_ASHR387]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST388]], i32* [[ATMP376]], align 4
// CHK-CXX-NEXT:    [[TMP150:%.*]] = bitcast i32* [[ATOMIC_TEMP389]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP148]], i8* [[TMP150]], align 1
// CHK-CXX-NEXT:    [[TMP151:%.*]] = trunc i32 [[TMP145]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD390:%.*]] = load i8, i8* [[TMP150]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE391:%.*]] = and i8 [[TMP151]], 1
// CHK-CXX-NEXT:    [[BF_SHL392:%.*]] = shl i8 [[BF_VALUE391]], 7
// CHK-CXX-NEXT:    [[BF_CLEAR393:%.*]] = and i8 [[BF_LOAD390]], 127
// CHK-CXX-NEXT:    [[BF_SET394:%.*]] = or i8 [[BF_CLEAR393]], [[BF_SHL392]]
// CHK-CXX-NEXT:    store i8 [[BF_SET394]], i8* [[TMP150]], align 1
// CHK-CXX-NEXT:    [[TMP152:%.*]] = load i8, i8* [[TMP150]], align 1
// CHK-CXX-NEXT:    [[TMP153:%.*]] = cmpxchg i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3), i8 [[TMP148]], i8 [[TMP152]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP154]] = extractvalue { i8, i1 } [[TMP153]], 0
// CHK-CXX-NEXT:    [[TMP155:%.*]] = extractvalue { i8, i1 } [[TMP153]], 1
// CHK-CXX-NEXT:    br i1 [[TMP155]], label [[ATOMIC_EXIT402]], label [[ATOMIC_CMP395]]
// CHK-CXX:       atomic_cmp395:
// CHK-CXX-NEXT:    [[TMP156:%.*]] = bitcast i32* [[ATOMIC_TEMP396]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP154]], i8* [[TMP156]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD397:%.*]] = load i8, i8* [[TMP156]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR398:%.*]] = ashr i8 [[BF_LOAD397]], 7
// CHK-CXX-NEXT:    [[BF_CAST399:%.*]] = sext i8 [[BF_ASHR398]] to i32
// CHK-CXX-NEXT:    [[CMP400:%.*]] = icmp eq i32 [[BF_CAST399]], [[TMP146]]
// CHK-CXX-NEXT:    [[FROMBOOL401:%.*]] = zext i1 [[CMP400]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL401]], i8* [[ATMP382]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP400]], label [[ATOMIC_CONT384]], label [[ATOMIC_EXIT402]]
// CHK-CXX:       atomic_exit402:
// CHK-CXX-NEXT:    [[TMP157:%.*]] = load i32, i32* [[ATMP376]], align 4
// CHK-CXX-NEXT:    [[TMP158:%.*]] = load i8, i8* [[ATMP382]], align 1
// CHK-CXX-NEXT:    [[CONV403:%.*]] = zext i8 [[TMP158]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV403]], i32* [[R]], align 4
// CHK-CXX-NEXT:    [[TMP159:%.*]] = trunc i8 [[TMP158]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP159]], label [[ATOMIC_CAPTURE_CONT405:%.*]], label [[ATOMIC_CAPTURE404:%.*]]
// CHK-CXX:       atomic_capture404:
// CHK-CXX-NEXT:    store i32 [[TMP157]], i32* [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT405]]
// CHK-CXX:       atomic_capture_cont405:
// CHK-CXX-NEXT:    [[TMP160:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD406:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS3:%.*]], %struct.BitFields3* @bfx3, i32 0, i32 0) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD406]], i32* [[ATOMIC_TEMP408]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD409:%.*]] = load i32, i32* [[ATOMIC_TEMP408]], align 4
// CHK-CXX-NEXT:    [[BF_SHL410:%.*]] = shl i32 [[BF_LOAD409]], 7
// CHK-CXX-NEXT:    [[BF_ASHR411:%.*]] = ashr i32 [[BF_SHL410]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR411]], i32* [[ATMP407]], align 4
// CHK-CXX-NEXT:    [[CMP412:%.*]] = icmp slt i32 [[BF_ASHR411]], [[TMP160]]
// CHK-CXX-NEXT:    [[FROMBOOL414:%.*]] = zext i1 [[CMP412]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL414]], i8* [[ATMP413]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP412]], label [[ATOMIC_CONT415:%.*]], label [[ATOMIC_EXIT433:%.*]]
// CHK-CXX:       atomic_cont415:
// CHK-CXX-NEXT:    [[TMP161:%.*]] = phi i32 [ [[ATOMIC_LOAD406]], [[ATOMIC_CAPTURE_CONT405]] ], [ [[TMP164:%.*]], [[ATOMIC_CMP426:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP161]], i32* [[ATOMIC_TEMP416]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD417:%.*]] = load i32, i32* [[ATOMIC_TEMP416]], align 4
// CHK-CXX-NEXT:    [[BF_SHL418:%.*]] = shl i32 [[BF_LOAD417]], 7
// CHK-CXX-NEXT:    [[BF_ASHR419:%.*]] = ashr i32 [[BF_SHL418]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR419]], i32* [[ATMP407]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP161]], i32* [[ATOMIC_TEMP420]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD421:%.*]] = load i32, i32* [[ATOMIC_TEMP420]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE422:%.*]] = and i32 [[TMP160]], 16383
// CHK-CXX-NEXT:    [[BF_SHL423:%.*]] = shl i32 [[BF_VALUE422]], 11
// CHK-CXX-NEXT:    [[BF_CLEAR424:%.*]] = and i32 [[BF_LOAD421]], -33552385
// CHK-CXX-NEXT:    [[BF_SET425:%.*]] = or i32 [[BF_CLEAR424]], [[BF_SHL423]]
// CHK-CXX-NEXT:    store i32 [[BF_SET425]], i32* [[ATOMIC_TEMP420]], align 4
// CHK-CXX-NEXT:    [[TMP162:%.*]] = load i32, i32* [[ATOMIC_TEMP420]], align 4
// CHK-CXX-NEXT:    [[TMP163:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0), i32 [[TMP161]], i32 [[TMP162]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP164]] = extractvalue { i32, i1 } [[TMP163]], 0
// CHK-CXX-NEXT:    [[TMP165:%.*]] = extractvalue { i32, i1 } [[TMP163]], 1
// CHK-CXX-NEXT:    br i1 [[TMP165]], label [[ATOMIC_EXIT433]], label [[ATOMIC_CMP426]]
// CHK-CXX:       atomic_cmp426:
// CHK-CXX-NEXT:    store i32 [[TMP164]], i32* [[ATOMIC_TEMP427]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD428:%.*]] = load i32, i32* [[ATOMIC_TEMP427]], align 4
// CHK-CXX-NEXT:    [[BF_SHL429:%.*]] = shl i32 [[BF_LOAD428]], 7
// CHK-CXX-NEXT:    [[BF_ASHR430:%.*]] = ashr i32 [[BF_SHL429]], 18
// CHK-CXX-NEXT:    [[CMP431:%.*]] = icmp slt i32 [[BF_ASHR430]], [[TMP160]]
// CHK-CXX-NEXT:    [[FROMBOOL432:%.*]] = zext i1 [[CMP431]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL432]], i8* [[ATMP413]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP431]], label [[ATOMIC_CONT415]], label [[ATOMIC_EXIT433]]
// CHK-CXX:       atomic_exit433:
// CHK-CXX-NEXT:    [[TMP166:%.*]] = load i32, i32* [[ATMP407]], align 4
// CHK-CXX-NEXT:    [[TMP167:%.*]] = load i8, i8* [[ATMP413]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP166]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP168:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD434:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD434]], i32* [[ATOMIC_TEMP436]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD437:%.*]] = load i32, i32* [[ATOMIC_TEMP436]], align 4
// CHK-CXX-NEXT:    [[BF_SHL438:%.*]] = shl i32 [[BF_LOAD437]], 7
// CHK-CXX-NEXT:    [[BF_ASHR439:%.*]] = ashr i32 [[BF_SHL438]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR439]], i32* [[ATMP435]], align 4
// CHK-CXX-NEXT:    [[CMP440:%.*]] = icmp slt i32 [[BF_ASHR439]], [[TMP168]]
// CHK-CXX-NEXT:    [[FROMBOOL442:%.*]] = zext i1 [[CMP440]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL442]], i8* [[ATMP441]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP440]], label [[ATOMIC_CONT443:%.*]], label [[ATOMIC_EXIT462:%.*]]
// CHK-CXX:       atomic_cont443:
// CHK-CXX-NEXT:    [[TMP169:%.*]] = phi i32 [ [[ATOMIC_LOAD434]], [[ATOMIC_EXIT433]] ], [ [[TMP172:%.*]], [[ATOMIC_CMP455:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP169]], i32* [[ATOMIC_TEMP444]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD445:%.*]] = load i32, i32* [[ATOMIC_TEMP444]], align 4
// CHK-CXX-NEXT:    [[BF_SHL446:%.*]] = shl i32 [[BF_LOAD445]], 7
// CHK-CXX-NEXT:    [[BF_ASHR447:%.*]] = ashr i32 [[BF_SHL446]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR447]], i32* [[ATMP435]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP169]], i32* [[ATOMIC_TEMP448]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD449:%.*]] = load i32, i32* [[ATOMIC_TEMP448]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE450:%.*]] = and i32 [[TMP168]], 16383
// CHK-CXX-NEXT:    [[BF_SHL451:%.*]] = shl i32 [[BF_VALUE450]], 11
// CHK-CXX-NEXT:    [[BF_CLEAR452:%.*]] = and i32 [[BF_LOAD449]], -33552385
// CHK-CXX-NEXT:    [[BF_SET453:%.*]] = or i32 [[BF_CLEAR452]], [[BF_SHL451]]
// CHK-CXX-NEXT:    store i32 [[BF_SET453]], i32* [[ATOMIC_TEMP448]], align 4
// CHK-CXX-NEXT:    [[TMP170:%.*]] = load i32, i32* [[ATOMIC_TEMP448]], align 4
// CHK-CXX-NEXT:    [[TMP171:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0), i32 [[TMP169]], i32 [[TMP170]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP172]] = extractvalue { i32, i1 } [[TMP171]], 0
// CHK-CXX-NEXT:    [[TMP173:%.*]] = extractvalue { i32, i1 } [[TMP171]], 1
// CHK-CXX-NEXT:    br i1 [[TMP173]], label [[ATOMIC_UPD_EXIT454:%.*]], label [[ATOMIC_CMP455]]
// CHK-CXX:       atomic_upd_exit454:
// CHK-CXX-NEXT:    store i32 [[TMP168]], i32* [[ATMP435]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT462]]
// CHK-CXX:       atomic_cmp455:
// CHK-CXX-NEXT:    store i32 [[TMP172]], i32* [[ATOMIC_TEMP456]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD457:%.*]] = load i32, i32* [[ATOMIC_TEMP456]], align 4
// CHK-CXX-NEXT:    [[BF_SHL458:%.*]] = shl i32 [[BF_LOAD457]], 7
// CHK-CXX-NEXT:    [[BF_ASHR459:%.*]] = ashr i32 [[BF_SHL458]], 18
// CHK-CXX-NEXT:    [[CMP460:%.*]] = icmp slt i32 [[BF_ASHR459]], [[TMP168]]
// CHK-CXX-NEXT:    [[FROMBOOL461:%.*]] = zext i1 [[CMP460]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL461]], i8* [[ATMP441]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP460]], label [[ATOMIC_CONT443]], label [[ATOMIC_EXIT462]]
// CHK-CXX:       atomic_exit462:
// CHK-CXX-NEXT:    [[TMP174:%.*]] = load i32, i32* [[ATMP435]], align 4
// CHK-CXX-NEXT:    [[TMP175:%.*]] = load i8, i8* [[ATMP441]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP174]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP176:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP177:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD463:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD463]], i32* [[ATOMIC_TEMP465]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD466:%.*]] = load i32, i32* [[ATOMIC_TEMP465]], align 4
// CHK-CXX-NEXT:    [[BF_SHL467:%.*]] = shl i32 [[BF_LOAD466]], 7
// CHK-CXX-NEXT:    [[BF_ASHR468:%.*]] = ashr i32 [[BF_SHL467]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR468]], i32* [[ATMP464]], align 4
// CHK-CXX-NEXT:    [[CMP469:%.*]] = icmp eq i32 [[BF_ASHR468]], [[TMP177]]
// CHK-CXX-NEXT:    [[FROMBOOL471:%.*]] = zext i1 [[CMP469]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL471]], i8* [[ATMP470]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP469]], label [[ATOMIC_CONT472:%.*]], label [[ATOMIC_EXIT491:%.*]]
// CHK-CXX:       atomic_cont472:
// CHK-CXX-NEXT:    [[TMP178:%.*]] = phi i32 [ [[ATOMIC_LOAD463]], [[ATOMIC_EXIT462]] ], [ [[TMP181:%.*]], [[ATOMIC_CMP484:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP178]], i32* [[ATOMIC_TEMP473]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD474:%.*]] = load i32, i32* [[ATOMIC_TEMP473]], align 4
// CHK-CXX-NEXT:    [[BF_SHL475:%.*]] = shl i32 [[BF_LOAD474]], 7
// CHK-CXX-NEXT:    [[BF_ASHR476:%.*]] = ashr i32 [[BF_SHL475]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR476]], i32* [[ATMP464]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP178]], i32* [[ATOMIC_TEMP477]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD478:%.*]] = load i32, i32* [[ATOMIC_TEMP477]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE479:%.*]] = and i32 [[TMP176]], 16383
// CHK-CXX-NEXT:    [[BF_SHL480:%.*]] = shl i32 [[BF_VALUE479]], 11
// CHK-CXX-NEXT:    [[BF_CLEAR481:%.*]] = and i32 [[BF_LOAD478]], -33552385
// CHK-CXX-NEXT:    [[BF_SET482:%.*]] = or i32 [[BF_CLEAR481]], [[BF_SHL480]]
// CHK-CXX-NEXT:    store i32 [[BF_SET482]], i32* [[ATOMIC_TEMP477]], align 4
// CHK-CXX-NEXT:    [[TMP179:%.*]] = load i32, i32* [[ATOMIC_TEMP477]], align 4
// CHK-CXX-NEXT:    [[TMP180:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0), i32 [[TMP178]], i32 [[TMP179]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP181]] = extractvalue { i32, i1 } [[TMP180]], 0
// CHK-CXX-NEXT:    [[TMP182:%.*]] = extractvalue { i32, i1 } [[TMP180]], 1
// CHK-CXX-NEXT:    br i1 [[TMP182]], label [[ATOMIC_UPD_EXIT483:%.*]], label [[ATOMIC_CMP484]]
// CHK-CXX:       atomic_upd_exit483:
// CHK-CXX-NEXT:    store i32 [[TMP176]], i32* [[ATMP464]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT491]]
// CHK-CXX:       atomic_cmp484:
// CHK-CXX-NEXT:    store i32 [[TMP181]], i32* [[ATOMIC_TEMP485]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD486:%.*]] = load i32, i32* [[ATOMIC_TEMP485]], align 4
// CHK-CXX-NEXT:    [[BF_SHL487:%.*]] = shl i32 [[BF_LOAD486]], 7
// CHK-CXX-NEXT:    [[BF_ASHR488:%.*]] = ashr i32 [[BF_SHL487]], 18
// CHK-CXX-NEXT:    [[CMP489:%.*]] = icmp eq i32 [[BF_ASHR488]], [[TMP177]]
// CHK-CXX-NEXT:    [[FROMBOOL490:%.*]] = zext i1 [[CMP489]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL490]], i8* [[ATMP470]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP489]], label [[ATOMIC_CONT472]], label [[ATOMIC_EXIT491]]
// CHK-CXX:       atomic_exit491:
// CHK-CXX-NEXT:    [[TMP183:%.*]] = load i32, i32* [[ATMP464]], align 4
// CHK-CXX-NEXT:    [[TMP184:%.*]] = load i8, i8* [[ATMP470]], align 1
// CHK-CXX-NEXT:    [[TMP185:%.*]] = trunc i8 [[TMP184]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP185]], label [[ATOMIC_CAPTURE_CONT493:%.*]], label [[ATOMIC_CAPTURE492:%.*]]
// CHK-CXX:       atomic_capture492:
// CHK-CXX-NEXT:    store i32 [[TMP183]], i32* [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT493]]
// CHK-CXX:       atomic_capture_cont493:
// CHK-CXX-NEXT:    [[TMP186:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP187:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD494:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD494]], i32* [[ATOMIC_TEMP496]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD497:%.*]] = load i32, i32* [[ATOMIC_TEMP496]], align 4
// CHK-CXX-NEXT:    [[BF_SHL498:%.*]] = shl i32 [[BF_LOAD497]], 7
// CHK-CXX-NEXT:    [[BF_ASHR499:%.*]] = ashr i32 [[BF_SHL498]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR499]], i32* [[ATMP495]], align 4
// CHK-CXX-NEXT:    [[CMP500:%.*]] = icmp eq i32 [[BF_ASHR499]], [[TMP187]]
// CHK-CXX-NEXT:    [[FROMBOOL502:%.*]] = zext i1 [[CMP500]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL502]], i8* [[ATMP501]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP500]], label [[ATOMIC_CONT503:%.*]], label [[ATOMIC_EXIT521:%.*]]
// CHK-CXX:       atomic_cont503:
// CHK-CXX-NEXT:    [[TMP188:%.*]] = phi i32 [ [[ATOMIC_LOAD494]], [[ATOMIC_CAPTURE_CONT493]] ], [ [[TMP191:%.*]], [[ATOMIC_CMP514:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP188]], i32* [[ATOMIC_TEMP504]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD505:%.*]] = load i32, i32* [[ATOMIC_TEMP504]], align 4
// CHK-CXX-NEXT:    [[BF_SHL506:%.*]] = shl i32 [[BF_LOAD505]], 7
// CHK-CXX-NEXT:    [[BF_ASHR507:%.*]] = ashr i32 [[BF_SHL506]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR507]], i32* [[ATMP495]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP188]], i32* [[ATOMIC_TEMP508]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD509:%.*]] = load i32, i32* [[ATOMIC_TEMP508]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE510:%.*]] = and i32 [[TMP186]], 16383
// CHK-CXX-NEXT:    [[BF_SHL511:%.*]] = shl i32 [[BF_VALUE510]], 11
// CHK-CXX-NEXT:    [[BF_CLEAR512:%.*]] = and i32 [[BF_LOAD509]], -33552385
// CHK-CXX-NEXT:    [[BF_SET513:%.*]] = or i32 [[BF_CLEAR512]], [[BF_SHL511]]
// CHK-CXX-NEXT:    store i32 [[BF_SET513]], i32* [[ATOMIC_TEMP508]], align 4
// CHK-CXX-NEXT:    [[TMP189:%.*]] = load i32, i32* [[ATOMIC_TEMP508]], align 4
// CHK-CXX-NEXT:    [[TMP190:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0), i32 [[TMP188]], i32 [[TMP189]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP191]] = extractvalue { i32, i1 } [[TMP190]], 0
// CHK-CXX-NEXT:    [[TMP192:%.*]] = extractvalue { i32, i1 } [[TMP190]], 1
// CHK-CXX-NEXT:    br i1 [[TMP192]], label [[ATOMIC_EXIT521]], label [[ATOMIC_CMP514]]
// CHK-CXX:       atomic_cmp514:
// CHK-CXX-NEXT:    store i32 [[TMP191]], i32* [[ATOMIC_TEMP515]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD516:%.*]] = load i32, i32* [[ATOMIC_TEMP515]], align 4
// CHK-CXX-NEXT:    [[BF_SHL517:%.*]] = shl i32 [[BF_LOAD516]], 7
// CHK-CXX-NEXT:    [[BF_ASHR518:%.*]] = ashr i32 [[BF_SHL517]], 18
// CHK-CXX-NEXT:    [[CMP519:%.*]] = icmp eq i32 [[BF_ASHR518]], [[TMP187]]
// CHK-CXX-NEXT:    [[FROMBOOL520:%.*]] = zext i1 [[CMP519]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL520]], i8* [[ATMP501]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP519]], label [[ATOMIC_CONT503]], label [[ATOMIC_EXIT521]]
// CHK-CXX:       atomic_exit521:
// CHK-CXX-NEXT:    [[TMP193:%.*]] = load i32, i32* [[ATMP495]], align 4
// CHK-CXX-NEXT:    [[TMP194:%.*]] = load i8, i8* [[ATMP501]], align 1
// CHK-CXX-NEXT:    [[CONV522:%.*]] = zext i8 [[TMP194]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV522]], i32* [[R]], align 4
// CHK-CXX-NEXT:    [[TMP195:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP196:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD523:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD523]], i32* [[ATOMIC_TEMP525]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD526:%.*]] = load i32, i32* [[ATOMIC_TEMP525]], align 4
// CHK-CXX-NEXT:    [[BF_SHL527:%.*]] = shl i32 [[BF_LOAD526]], 7
// CHK-CXX-NEXT:    [[BF_ASHR528:%.*]] = ashr i32 [[BF_SHL527]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR528]], i32* [[ATMP524]], align 4
// CHK-CXX-NEXT:    [[CMP529:%.*]] = icmp eq i32 [[BF_ASHR528]], [[TMP196]]
// CHK-CXX-NEXT:    [[FROMBOOL531:%.*]] = zext i1 [[CMP529]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL531]], i8* [[ATMP530]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP529]], label [[ATOMIC_CONT532:%.*]], label [[ATOMIC_EXIT550:%.*]]
// CHK-CXX:       atomic_cont532:
// CHK-CXX-NEXT:    [[TMP197:%.*]] = phi i32 [ [[ATOMIC_LOAD523]], [[ATOMIC_EXIT521]] ], [ [[TMP200:%.*]], [[ATOMIC_CMP543:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP197]], i32* [[ATOMIC_TEMP533]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD534:%.*]] = load i32, i32* [[ATOMIC_TEMP533]], align 4
// CHK-CXX-NEXT:    [[BF_SHL535:%.*]] = shl i32 [[BF_LOAD534]], 7
// CHK-CXX-NEXT:    [[BF_ASHR536:%.*]] = ashr i32 [[BF_SHL535]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR536]], i32* [[ATMP524]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP197]], i32* [[ATOMIC_TEMP537]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD538:%.*]] = load i32, i32* [[ATOMIC_TEMP537]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE539:%.*]] = and i32 [[TMP195]], 16383
// CHK-CXX-NEXT:    [[BF_SHL540:%.*]] = shl i32 [[BF_VALUE539]], 11
// CHK-CXX-NEXT:    [[BF_CLEAR541:%.*]] = and i32 [[BF_LOAD538]], -33552385
// CHK-CXX-NEXT:    [[BF_SET542:%.*]] = or i32 [[BF_CLEAR541]], [[BF_SHL540]]
// CHK-CXX-NEXT:    store i32 [[BF_SET542]], i32* [[ATOMIC_TEMP537]], align 4
// CHK-CXX-NEXT:    [[TMP198:%.*]] = load i32, i32* [[ATOMIC_TEMP537]], align 4
// CHK-CXX-NEXT:    [[TMP199:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0), i32 [[TMP197]], i32 [[TMP198]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP200]] = extractvalue { i32, i1 } [[TMP199]], 0
// CHK-CXX-NEXT:    [[TMP201:%.*]] = extractvalue { i32, i1 } [[TMP199]], 1
// CHK-CXX-NEXT:    br i1 [[TMP201]], label [[ATOMIC_EXIT550]], label [[ATOMIC_CMP543]]
// CHK-CXX:       atomic_cmp543:
// CHK-CXX-NEXT:    store i32 [[TMP200]], i32* [[ATOMIC_TEMP544]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD545:%.*]] = load i32, i32* [[ATOMIC_TEMP544]], align 4
// CHK-CXX-NEXT:    [[BF_SHL546:%.*]] = shl i32 [[BF_LOAD545]], 7
// CHK-CXX-NEXT:    [[BF_ASHR547:%.*]] = ashr i32 [[BF_SHL546]], 18
// CHK-CXX-NEXT:    [[CMP548:%.*]] = icmp eq i32 [[BF_ASHR547]], [[TMP196]]
// CHK-CXX-NEXT:    [[FROMBOOL549:%.*]] = zext i1 [[CMP548]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL549]], i8* [[ATMP530]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP548]], label [[ATOMIC_CONT532]], label [[ATOMIC_EXIT550]]
// CHK-CXX:       atomic_exit550:
// CHK-CXX-NEXT:    [[TMP202:%.*]] = load i32, i32* [[ATMP524]], align 4
// CHK-CXX-NEXT:    [[TMP203:%.*]] = load i8, i8* [[ATMP530]], align 1
// CHK-CXX-NEXT:    [[CONV551:%.*]] = zext i8 [[TMP203]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV551]], i32* [[R]], align 4
// CHK-CXX-NEXT:    [[TMP204:%.*]] = trunc i8 [[TMP203]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP204]], label [[ATOMIC_CAPTURE_CONT553:%.*]], label [[ATOMIC_CAPTURE552:%.*]]
// CHK-CXX:       atomic_capture552:
// CHK-CXX-NEXT:    store i32 [[TMP202]], i32* [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT553]]
// CHK-CXX:       atomic_capture_cont553:
// CHK-CXX-NEXT:    [[TMP205:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD554:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD554]], i64* [[ATOMIC_TEMP556]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD557:%.*]] = load i64, i64* [[ATOMIC_TEMP556]], align 8
// CHK-CXX-NEXT:    [[BF_SHL558:%.*]] = shl i64 [[BF_LOAD557]], 47
// CHK-CXX-NEXT:    [[BF_ASHR559:%.*]] = ashr i64 [[BF_SHL558]], 63
// CHK-CXX-NEXT:    [[BF_CAST560:%.*]] = trunc i64 [[BF_ASHR559]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST560]], i32* [[ATMP555]], align 4
// CHK-CXX-NEXT:    [[CMP561:%.*]] = icmp slt i32 [[BF_CAST560]], [[TMP205]]
// CHK-CXX-NEXT:    [[FROMBOOL563:%.*]] = zext i1 [[CMP561]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL563]], i8* [[ATMP562]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP561]], label [[ATOMIC_CONT564:%.*]], label [[ATOMIC_EXIT584:%.*]]
// CHK-CXX:       atomic_cont564:
// CHK-CXX-NEXT:    [[TMP206:%.*]] = phi i64 [ [[ATOMIC_LOAD554]], [[ATOMIC_CAPTURE_CONT553]] ], [ [[TMP210:%.*]], [[ATOMIC_CMP576:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP206]], i64* [[ATOMIC_TEMP565]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD566:%.*]] = load i64, i64* [[ATOMIC_TEMP565]], align 8
// CHK-CXX-NEXT:    [[BF_SHL567:%.*]] = shl i64 [[BF_LOAD566]], 47
// CHK-CXX-NEXT:    [[BF_ASHR568:%.*]] = ashr i64 [[BF_SHL567]], 63
// CHK-CXX-NEXT:    [[BF_CAST569:%.*]] = trunc i64 [[BF_ASHR568]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST569]], i32* [[ATMP555]], align 4
// CHK-CXX-NEXT:    store i64 [[TMP206]], i64* [[ATOMIC_TEMP570]], align 8
// CHK-CXX-NEXT:    [[TMP207:%.*]] = zext i32 [[TMP205]] to i64
// CHK-CXX-NEXT:    [[BF_LOAD571:%.*]] = load i64, i64* [[ATOMIC_TEMP570]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE572:%.*]] = and i64 [[TMP207]], 1
// CHK-CXX-NEXT:    [[BF_SHL573:%.*]] = shl i64 [[BF_VALUE572]], 16
// CHK-CXX-NEXT:    [[BF_CLEAR574:%.*]] = and i64 [[BF_LOAD571]], -65537
// CHK-CXX-NEXT:    [[BF_SET575:%.*]] = or i64 [[BF_CLEAR574]], [[BF_SHL573]]
// CHK-CXX-NEXT:    store i64 [[BF_SET575]], i64* [[ATOMIC_TEMP570]], align 8
// CHK-CXX-NEXT:    [[TMP208:%.*]] = load i64, i64* [[ATOMIC_TEMP570]], align 8
// CHK-CXX-NEXT:    [[TMP209:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP206]], i64 [[TMP208]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP210]] = extractvalue { i64, i1 } [[TMP209]], 0
// CHK-CXX-NEXT:    [[TMP211:%.*]] = extractvalue { i64, i1 } [[TMP209]], 1
// CHK-CXX-NEXT:    br i1 [[TMP211]], label [[ATOMIC_EXIT584]], label [[ATOMIC_CMP576]]
// CHK-CXX:       atomic_cmp576:
// CHK-CXX-NEXT:    store i64 [[TMP210]], i64* [[ATOMIC_TEMP577]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD578:%.*]] = load i64, i64* [[ATOMIC_TEMP577]], align 8
// CHK-CXX-NEXT:    [[BF_SHL579:%.*]] = shl i64 [[BF_LOAD578]], 47
// CHK-CXX-NEXT:    [[BF_ASHR580:%.*]] = ashr i64 [[BF_SHL579]], 63
// CHK-CXX-NEXT:    [[BF_CAST581:%.*]] = trunc i64 [[BF_ASHR580]] to i32
// CHK-CXX-NEXT:    [[CMP582:%.*]] = icmp slt i32 [[BF_CAST581]], [[TMP205]]
// CHK-CXX-NEXT:    [[FROMBOOL583:%.*]] = zext i1 [[CMP582]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL583]], i8* [[ATMP562]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP582]], label [[ATOMIC_CONT564]], label [[ATOMIC_EXIT584]]
// CHK-CXX:       atomic_exit584:
// CHK-CXX-NEXT:    [[TMP212:%.*]] = load i32, i32* [[ATMP555]], align 4
// CHK-CXX-NEXT:    [[TMP213:%.*]] = load i8, i8* [[ATMP562]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP212]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP214:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD585:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD585]], i64* [[ATOMIC_TEMP587]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD588:%.*]] = load i64, i64* [[ATOMIC_TEMP587]], align 8
// CHK-CXX-NEXT:    [[BF_SHL589:%.*]] = shl i64 [[BF_LOAD588]], 47
// CHK-CXX-NEXT:    [[BF_ASHR590:%.*]] = ashr i64 [[BF_SHL589]], 63
// CHK-CXX-NEXT:    [[BF_CAST591:%.*]] = trunc i64 [[BF_ASHR590]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST591]], i32* [[ATMP586]], align 4
// CHK-CXX-NEXT:    [[CMP592:%.*]] = icmp slt i32 [[BF_CAST591]], [[TMP214]]
// CHK-CXX-NEXT:    [[FROMBOOL594:%.*]] = zext i1 [[CMP592]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL594]], i8* [[ATMP593]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP592]], label [[ATOMIC_CONT595:%.*]], label [[ATOMIC_EXIT616:%.*]]
// CHK-CXX:       atomic_cont595:
// CHK-CXX-NEXT:    [[TMP215:%.*]] = phi i64 [ [[ATOMIC_LOAD585]], [[ATOMIC_EXIT584]] ], [ [[TMP219:%.*]], [[ATOMIC_CMP608:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP215]], i64* [[ATOMIC_TEMP596]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD597:%.*]] = load i64, i64* [[ATOMIC_TEMP596]], align 8
// CHK-CXX-NEXT:    [[BF_SHL598:%.*]] = shl i64 [[BF_LOAD597]], 47
// CHK-CXX-NEXT:    [[BF_ASHR599:%.*]] = ashr i64 [[BF_SHL598]], 63
// CHK-CXX-NEXT:    [[BF_CAST600:%.*]] = trunc i64 [[BF_ASHR599]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST600]], i32* [[ATMP586]], align 4
// CHK-CXX-NEXT:    store i64 [[TMP215]], i64* [[ATOMIC_TEMP601]], align 8
// CHK-CXX-NEXT:    [[TMP216:%.*]] = zext i32 [[TMP214]] to i64
// CHK-CXX-NEXT:    [[BF_LOAD602:%.*]] = load i64, i64* [[ATOMIC_TEMP601]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE603:%.*]] = and i64 [[TMP216]], 1
// CHK-CXX-NEXT:    [[BF_SHL604:%.*]] = shl i64 [[BF_VALUE603]], 16
// CHK-CXX-NEXT:    [[BF_CLEAR605:%.*]] = and i64 [[BF_LOAD602]], -65537
// CHK-CXX-NEXT:    [[BF_SET606:%.*]] = or i64 [[BF_CLEAR605]], [[BF_SHL604]]
// CHK-CXX-NEXT:    store i64 [[BF_SET606]], i64* [[ATOMIC_TEMP601]], align 8
// CHK-CXX-NEXT:    [[TMP217:%.*]] = load i64, i64* [[ATOMIC_TEMP601]], align 8
// CHK-CXX-NEXT:    [[TMP218:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP215]], i64 [[TMP217]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP219]] = extractvalue { i64, i1 } [[TMP218]], 0
// CHK-CXX-NEXT:    [[TMP220:%.*]] = extractvalue { i64, i1 } [[TMP218]], 1
// CHK-CXX-NEXT:    br i1 [[TMP220]], label [[ATOMIC_UPD_EXIT607:%.*]], label [[ATOMIC_CMP608]]
// CHK-CXX:       atomic_upd_exit607:
// CHK-CXX-NEXT:    store i32 [[TMP214]], i32* [[ATMP586]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT616]]
// CHK-CXX:       atomic_cmp608:
// CHK-CXX-NEXT:    store i64 [[TMP219]], i64* [[ATOMIC_TEMP609]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD610:%.*]] = load i64, i64* [[ATOMIC_TEMP609]], align 8
// CHK-CXX-NEXT:    [[BF_SHL611:%.*]] = shl i64 [[BF_LOAD610]], 47
// CHK-CXX-NEXT:    [[BF_ASHR612:%.*]] = ashr i64 [[BF_SHL611]], 63
// CHK-CXX-NEXT:    [[BF_CAST613:%.*]] = trunc i64 [[BF_ASHR612]] to i32
// CHK-CXX-NEXT:    [[CMP614:%.*]] = icmp slt i32 [[BF_CAST613]], [[TMP214]]
// CHK-CXX-NEXT:    [[FROMBOOL615:%.*]] = zext i1 [[CMP614]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL615]], i8* [[ATMP593]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP614]], label [[ATOMIC_CONT595]], label [[ATOMIC_EXIT616]]
// CHK-CXX:       atomic_exit616:
// CHK-CXX-NEXT:    [[TMP221:%.*]] = load i32, i32* [[ATMP586]], align 4
// CHK-CXX-NEXT:    [[TMP222:%.*]] = load i8, i8* [[ATMP593]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP221]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP223:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP224:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD617:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD617]], i64* [[ATOMIC_TEMP619]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD620:%.*]] = load i64, i64* [[ATOMIC_TEMP619]], align 8
// CHK-CXX-NEXT:    [[BF_SHL621:%.*]] = shl i64 [[BF_LOAD620]], 47
// CHK-CXX-NEXT:    [[BF_ASHR622:%.*]] = ashr i64 [[BF_SHL621]], 63
// CHK-CXX-NEXT:    [[BF_CAST623:%.*]] = trunc i64 [[BF_ASHR622]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST623]], i32* [[ATMP618]], align 4
// CHK-CXX-NEXT:    [[CMP624:%.*]] = icmp eq i32 [[BF_CAST623]], [[TMP224]]
// CHK-CXX-NEXT:    [[FROMBOOL626:%.*]] = zext i1 [[CMP624]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL626]], i8* [[ATMP625]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP624]], label [[ATOMIC_CONT627:%.*]], label [[ATOMIC_EXIT648:%.*]]
// CHK-CXX:       atomic_cont627:
// CHK-CXX-NEXT:    [[TMP225:%.*]] = phi i64 [ [[ATOMIC_LOAD617]], [[ATOMIC_EXIT616]] ], [ [[TMP229:%.*]], [[ATOMIC_CMP640:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP225]], i64* [[ATOMIC_TEMP628]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD629:%.*]] = load i64, i64* [[ATOMIC_TEMP628]], align 8
// CHK-CXX-NEXT:    [[BF_SHL630:%.*]] = shl i64 [[BF_LOAD629]], 47
// CHK-CXX-NEXT:    [[BF_ASHR631:%.*]] = ashr i64 [[BF_SHL630]], 63
// CHK-CXX-NEXT:    [[BF_CAST632:%.*]] = trunc i64 [[BF_ASHR631]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST632]], i32* [[ATMP618]], align 4
// CHK-CXX-NEXT:    store i64 [[TMP225]], i64* [[ATOMIC_TEMP633]], align 8
// CHK-CXX-NEXT:    [[TMP226:%.*]] = zext i32 [[TMP223]] to i64
// CHK-CXX-NEXT:    [[BF_LOAD634:%.*]] = load i64, i64* [[ATOMIC_TEMP633]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE635:%.*]] = and i64 [[TMP226]], 1
// CHK-CXX-NEXT:    [[BF_SHL636:%.*]] = shl i64 [[BF_VALUE635]], 16
// CHK-CXX-NEXT:    [[BF_CLEAR637:%.*]] = and i64 [[BF_LOAD634]], -65537
// CHK-CXX-NEXT:    [[BF_SET638:%.*]] = or i64 [[BF_CLEAR637]], [[BF_SHL636]]
// CHK-CXX-NEXT:    store i64 [[BF_SET638]], i64* [[ATOMIC_TEMP633]], align 8
// CHK-CXX-NEXT:    [[TMP227:%.*]] = load i64, i64* [[ATOMIC_TEMP633]], align 8
// CHK-CXX-NEXT:    [[TMP228:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP225]], i64 [[TMP227]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP229]] = extractvalue { i64, i1 } [[TMP228]], 0
// CHK-CXX-NEXT:    [[TMP230:%.*]] = extractvalue { i64, i1 } [[TMP228]], 1
// CHK-CXX-NEXT:    br i1 [[TMP230]], label [[ATOMIC_UPD_EXIT639:%.*]], label [[ATOMIC_CMP640]]
// CHK-CXX:       atomic_upd_exit639:
// CHK-CXX-NEXT:    store i32 [[TMP223]], i32* [[ATMP618]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT648]]
// CHK-CXX:       atomic_cmp640:
// CHK-CXX-NEXT:    store i64 [[TMP229]], i64* [[ATOMIC_TEMP641]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD642:%.*]] = load i64, i64* [[ATOMIC_TEMP641]], align 8
// CHK-CXX-NEXT:    [[BF_SHL643:%.*]] = shl i64 [[BF_LOAD642]], 47
// CHK-CXX-NEXT:    [[BF_ASHR644:%.*]] = ashr i64 [[BF_SHL643]], 63
// CHK-CXX-NEXT:    [[BF_CAST645:%.*]] = trunc i64 [[BF_ASHR644]] to i32
// CHK-CXX-NEXT:    [[CMP646:%.*]] = icmp eq i32 [[BF_CAST645]], [[TMP224]]
// CHK-CXX-NEXT:    [[FROMBOOL647:%.*]] = zext i1 [[CMP646]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL647]], i8* [[ATMP625]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP646]], label [[ATOMIC_CONT627]], label [[ATOMIC_EXIT648]]
// CHK-CXX:       atomic_exit648:
// CHK-CXX-NEXT:    [[TMP231:%.*]] = load i32, i32* [[ATMP618]], align 4
// CHK-CXX-NEXT:    [[TMP232:%.*]] = load i8, i8* [[ATMP625]], align 1
// CHK-CXX-NEXT:    [[TMP233:%.*]] = trunc i8 [[TMP232]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP233]], label [[ATOMIC_CAPTURE_CONT650:%.*]], label [[ATOMIC_CAPTURE649:%.*]]
// CHK-CXX:       atomic_capture649:
// CHK-CXX-NEXT:    store i32 [[TMP231]], i32* [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT650]]
// CHK-CXX:       atomic_capture_cont650:
// CHK-CXX-NEXT:    [[TMP234:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP235:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD651:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD651]], i64* [[ATOMIC_TEMP653]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD654:%.*]] = load i64, i64* [[ATOMIC_TEMP653]], align 8
// CHK-CXX-NEXT:    [[BF_SHL655:%.*]] = shl i64 [[BF_LOAD654]], 47
// CHK-CXX-NEXT:    [[BF_ASHR656:%.*]] = ashr i64 [[BF_SHL655]], 63
// CHK-CXX-NEXT:    [[BF_CAST657:%.*]] = trunc i64 [[BF_ASHR656]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST657]], i32* [[ATMP652]], align 4
// CHK-CXX-NEXT:    [[CMP658:%.*]] = icmp eq i32 [[BF_CAST657]], [[TMP235]]
// CHK-CXX-NEXT:    [[FROMBOOL660:%.*]] = zext i1 [[CMP658]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL660]], i8* [[ATMP659]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP658]], label [[ATOMIC_CONT661:%.*]], label [[ATOMIC_EXIT681:%.*]]
// CHK-CXX:       atomic_cont661:
// CHK-CXX-NEXT:    [[TMP236:%.*]] = phi i64 [ [[ATOMIC_LOAD651]], [[ATOMIC_CAPTURE_CONT650]] ], [ [[TMP240:%.*]], [[ATOMIC_CMP673:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP236]], i64* [[ATOMIC_TEMP662]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD663:%.*]] = load i64, i64* [[ATOMIC_TEMP662]], align 8
// CHK-CXX-NEXT:    [[BF_SHL664:%.*]] = shl i64 [[BF_LOAD663]], 47
// CHK-CXX-NEXT:    [[BF_ASHR665:%.*]] = ashr i64 [[BF_SHL664]], 63
// CHK-CXX-NEXT:    [[BF_CAST666:%.*]] = trunc i64 [[BF_ASHR665]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST666]], i32* [[ATMP652]], align 4
// CHK-CXX-NEXT:    store i64 [[TMP236]], i64* [[ATOMIC_TEMP667]], align 8
// CHK-CXX-NEXT:    [[TMP237:%.*]] = zext i32 [[TMP234]] to i64
// CHK-CXX-NEXT:    [[BF_LOAD668:%.*]] = load i64, i64* [[ATOMIC_TEMP667]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE669:%.*]] = and i64 [[TMP237]], 1
// CHK-CXX-NEXT:    [[BF_SHL670:%.*]] = shl i64 [[BF_VALUE669]], 16
// CHK-CXX-NEXT:    [[BF_CLEAR671:%.*]] = and i64 [[BF_LOAD668]], -65537
// CHK-CXX-NEXT:    [[BF_SET672:%.*]] = or i64 [[BF_CLEAR671]], [[BF_SHL670]]
// CHK-CXX-NEXT:    store i64 [[BF_SET672]], i64* [[ATOMIC_TEMP667]], align 8
// CHK-CXX-NEXT:    [[TMP238:%.*]] = load i64, i64* [[ATOMIC_TEMP667]], align 8
// CHK-CXX-NEXT:    [[TMP239:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP236]], i64 [[TMP238]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP240]] = extractvalue { i64, i1 } [[TMP239]], 0
// CHK-CXX-NEXT:    [[TMP241:%.*]] = extractvalue { i64, i1 } [[TMP239]], 1
// CHK-CXX-NEXT:    br i1 [[TMP241]], label [[ATOMIC_EXIT681]], label [[ATOMIC_CMP673]]
// CHK-CXX:       atomic_cmp673:
// CHK-CXX-NEXT:    store i64 [[TMP240]], i64* [[ATOMIC_TEMP674]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD675:%.*]] = load i64, i64* [[ATOMIC_TEMP674]], align 8
// CHK-CXX-NEXT:    [[BF_SHL676:%.*]] = shl i64 [[BF_LOAD675]], 47
// CHK-CXX-NEXT:    [[BF_ASHR677:%.*]] = ashr i64 [[BF_SHL676]], 63
// CHK-CXX-NEXT:    [[BF_CAST678:%.*]] = trunc i64 [[BF_ASHR677]] to i32
// CHK-CXX-NEXT:    [[CMP679:%.*]] = icmp eq i32 [[BF_CAST678]], [[TMP235]]
// CHK-CXX-NEXT:    [[FROMBOOL680:%.*]] = zext i1 [[CMP679]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL680]], i8* [[ATMP659]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP679]], label [[ATOMIC_CONT661]], label [[ATOMIC_EXIT681]]
// CHK-CXX:       atomic_exit681:
// CHK-CXX-NEXT:    [[TMP242:%.*]] = load i32, i32* [[ATMP652]], align 4
// CHK-CXX-NEXT:    [[TMP243:%.*]] = load i8, i8* [[ATMP659]], align 1
// CHK-CXX-NEXT:    [[CONV682:%.*]] = zext i8 [[TMP243]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV682]], i32* [[R]], align 4
// CHK-CXX-NEXT:    [[TMP244:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP245:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD683:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD683]], i64* [[ATOMIC_TEMP685]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD686:%.*]] = load i64, i64* [[ATOMIC_TEMP685]], align 8
// CHK-CXX-NEXT:    [[BF_SHL687:%.*]] = shl i64 [[BF_LOAD686]], 47
// CHK-CXX-NEXT:    [[BF_ASHR688:%.*]] = ashr i64 [[BF_SHL687]], 63
// CHK-CXX-NEXT:    [[BF_CAST689:%.*]] = trunc i64 [[BF_ASHR688]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST689]], i32* [[ATMP684]], align 4
// CHK-CXX-NEXT:    [[CMP690:%.*]] = icmp eq i32 [[BF_CAST689]], [[TMP245]]
// CHK-CXX-NEXT:    [[FROMBOOL692:%.*]] = zext i1 [[CMP690]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL692]], i8* [[ATMP691]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP690]], label [[ATOMIC_CONT693:%.*]], label [[ATOMIC_EXIT713:%.*]]
// CHK-CXX:       atomic_cont693:
// CHK-CXX-NEXT:    [[TMP246:%.*]] = phi i64 [ [[ATOMIC_LOAD683]], [[ATOMIC_EXIT681]] ], [ [[TMP250:%.*]], [[ATOMIC_CMP705:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP246]], i64* [[ATOMIC_TEMP694]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD695:%.*]] = load i64, i64* [[ATOMIC_TEMP694]], align 8
// CHK-CXX-NEXT:    [[BF_SHL696:%.*]] = shl i64 [[BF_LOAD695]], 47
// CHK-CXX-NEXT:    [[BF_ASHR697:%.*]] = ashr i64 [[BF_SHL696]], 63
// CHK-CXX-NEXT:    [[BF_CAST698:%.*]] = trunc i64 [[BF_ASHR697]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST698]], i32* [[ATMP684]], align 4
// CHK-CXX-NEXT:    store i64 [[TMP246]], i64* [[ATOMIC_TEMP699]], align 8
// CHK-CXX-NEXT:    [[TMP247:%.*]] = zext i32 [[TMP244]] to i64
// CHK-CXX-NEXT:    [[BF_LOAD700:%.*]] = load i64, i64* [[ATOMIC_TEMP699]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE701:%.*]] = and i64 [[TMP247]], 1
// CHK-CXX-NEXT:    [[BF_SHL702:%.*]] = shl i64 [[BF_VALUE701]], 16
// CHK-CXX-NEXT:    [[BF_CLEAR703:%.*]] = and i64 [[BF_LOAD700]], -65537
// CHK-CXX-NEXT:    [[BF_SET704:%.*]] = or i64 [[BF_CLEAR703]], [[BF_SHL702]]
// CHK-CXX-NEXT:    store i64 [[BF_SET704]], i64* [[ATOMIC_TEMP699]], align 8
// CHK-CXX-NEXT:    [[TMP248:%.*]] = load i64, i64* [[ATOMIC_TEMP699]], align 8
// CHK-CXX-NEXT:    [[TMP249:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP246]], i64 [[TMP248]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP250]] = extractvalue { i64, i1 } [[TMP249]], 0
// CHK-CXX-NEXT:    [[TMP251:%.*]] = extractvalue { i64, i1 } [[TMP249]], 1
// CHK-CXX-NEXT:    br i1 [[TMP251]], label [[ATOMIC_EXIT713]], label [[ATOMIC_CMP705]]
// CHK-CXX:       atomic_cmp705:
// CHK-CXX-NEXT:    store i64 [[TMP250]], i64* [[ATOMIC_TEMP706]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD707:%.*]] = load i64, i64* [[ATOMIC_TEMP706]], align 8
// CHK-CXX-NEXT:    [[BF_SHL708:%.*]] = shl i64 [[BF_LOAD707]], 47
// CHK-CXX-NEXT:    [[BF_ASHR709:%.*]] = ashr i64 [[BF_SHL708]], 63
// CHK-CXX-NEXT:    [[BF_CAST710:%.*]] = trunc i64 [[BF_ASHR709]] to i32
// CHK-CXX-NEXT:    [[CMP711:%.*]] = icmp eq i32 [[BF_CAST710]], [[TMP245]]
// CHK-CXX-NEXT:    [[FROMBOOL712:%.*]] = zext i1 [[CMP711]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL712]], i8* [[ATMP691]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP711]], label [[ATOMIC_CONT693]], label [[ATOMIC_EXIT713]]
// CHK-CXX:       atomic_exit713:
// CHK-CXX-NEXT:    [[TMP252:%.*]] = load i32, i32* [[ATMP684]], align 4
// CHK-CXX-NEXT:    [[TMP253:%.*]] = load i8, i8* [[ATMP691]], align 1
// CHK-CXX-NEXT:    [[CONV714:%.*]] = zext i8 [[TMP253]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV714]], i32* [[R]], align 4
// CHK-CXX-NEXT:    [[TMP254:%.*]] = trunc i8 [[TMP253]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP254]], label [[ATOMIC_CAPTURE_CONT716:%.*]], label [[ATOMIC_CAPTURE715:%.*]]
// CHK-CXX:       atomic_capture715:
// CHK-CXX-NEXT:    store i32 [[TMP252]], i32* [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT716]]
// CHK-CXX:       atomic_capture_cont716:
// CHK-CXX-NEXT:    [[TMP255:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[CONV717:%.*]] = sext i32 [[TMP255]] to i64
// CHK-CXX-NEXT:    [[ATOMIC_LOAD718:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD718]], i64* [[ATOMIC_TEMP720]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD721:%.*]] = load i64, i64* [[ATOMIC_TEMP720]], align 8
// CHK-CXX-NEXT:    [[BF_SHL722:%.*]] = shl i64 [[BF_LOAD721]], 40
// CHK-CXX-NEXT:    [[BF_ASHR723:%.*]] = ashr i64 [[BF_SHL722]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR723]], i64* [[ATMP719]], align 8
// CHK-CXX-NEXT:    [[CMP724:%.*]] = icmp slt i64 [[BF_ASHR723]], [[CONV717]]
// CHK-CXX-NEXT:    [[FROMBOOL726:%.*]] = zext i1 [[CMP724]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL726]], i8* [[ATMP725]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP724]], label [[ATOMIC_CONT727:%.*]], label [[ATOMIC_EXIT745:%.*]]
// CHK-CXX:       atomic_cont727:
// CHK-CXX-NEXT:    [[TMP256:%.*]] = phi i64 [ [[ATOMIC_LOAD718]], [[ATOMIC_CAPTURE_CONT716]] ], [ [[TMP259:%.*]], [[ATOMIC_CMP738:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP256]], i64* [[ATOMIC_TEMP728]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD729:%.*]] = load i64, i64* [[ATOMIC_TEMP728]], align 8
// CHK-CXX-NEXT:    [[BF_SHL730:%.*]] = shl i64 [[BF_LOAD729]], 40
// CHK-CXX-NEXT:    [[BF_ASHR731:%.*]] = ashr i64 [[BF_SHL730]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR731]], i64* [[ATMP719]], align 8
// CHK-CXX-NEXT:    store i64 [[TMP256]], i64* [[ATOMIC_TEMP732]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD733:%.*]] = load i64, i64* [[ATOMIC_TEMP732]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE734:%.*]] = and i64 [[CONV717]], 127
// CHK-CXX-NEXT:    [[BF_SHL735:%.*]] = shl i64 [[BF_VALUE734]], 17
// CHK-CXX-NEXT:    [[BF_CLEAR736:%.*]] = and i64 [[BF_LOAD733]], -16646145
// CHK-CXX-NEXT:    [[BF_SET737:%.*]] = or i64 [[BF_CLEAR736]], [[BF_SHL735]]
// CHK-CXX-NEXT:    store i64 [[BF_SET737]], i64* [[ATOMIC_TEMP732]], align 8
// CHK-CXX-NEXT:    [[TMP257:%.*]] = load i64, i64* [[ATOMIC_TEMP732]], align 8
// CHK-CXX-NEXT:    [[TMP258:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP256]], i64 [[TMP257]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP259]] = extractvalue { i64, i1 } [[TMP258]], 0
// CHK-CXX-NEXT:    [[TMP260:%.*]] = extractvalue { i64, i1 } [[TMP258]], 1
// CHK-CXX-NEXT:    br i1 [[TMP260]], label [[ATOMIC_EXIT745]], label [[ATOMIC_CMP738]]
// CHK-CXX:       atomic_cmp738:
// CHK-CXX-NEXT:    store i64 [[TMP259]], i64* [[ATOMIC_TEMP739]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD740:%.*]] = load i64, i64* [[ATOMIC_TEMP739]], align 8
// CHK-CXX-NEXT:    [[BF_SHL741:%.*]] = shl i64 [[BF_LOAD740]], 40
// CHK-CXX-NEXT:    [[BF_ASHR742:%.*]] = ashr i64 [[BF_SHL741]], 57
// CHK-CXX-NEXT:    [[CMP743:%.*]] = icmp slt i64 [[BF_ASHR742]], [[CONV717]]
// CHK-CXX-NEXT:    [[FROMBOOL744:%.*]] = zext i1 [[CMP743]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL744]], i8* [[ATMP725]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP743]], label [[ATOMIC_CONT727]], label [[ATOMIC_EXIT745]]
// CHK-CXX:       atomic_exit745:
// CHK-CXX-NEXT:    [[TMP261:%.*]] = load i64, i64* [[ATMP719]], align 8
// CHK-CXX-NEXT:    [[TMP262:%.*]] = load i8, i8* [[ATMP725]], align 1
// CHK-CXX-NEXT:    [[CONV746:%.*]] = trunc i64 [[TMP261]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV746]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP263:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[CONV747:%.*]] = sext i32 [[TMP263]] to i64
// CHK-CXX-NEXT:    [[ATOMIC_LOAD748:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD748]], i64* [[ATOMIC_TEMP750]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD751:%.*]] = load i64, i64* [[ATOMIC_TEMP750]], align 8
// CHK-CXX-NEXT:    [[BF_SHL752:%.*]] = shl i64 [[BF_LOAD751]], 40
// CHK-CXX-NEXT:    [[BF_ASHR753:%.*]] = ashr i64 [[BF_SHL752]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR753]], i64* [[ATMP749]], align 8
// CHK-CXX-NEXT:    [[CMP754:%.*]] = icmp slt i64 [[BF_ASHR753]], [[CONV747]]
// CHK-CXX-NEXT:    [[FROMBOOL756:%.*]] = zext i1 [[CMP754]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL756]], i8* [[ATMP755]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP754]], label [[ATOMIC_CONT757:%.*]], label [[ATOMIC_EXIT776:%.*]]
// CHK-CXX:       atomic_cont757:
// CHK-CXX-NEXT:    [[TMP264:%.*]] = phi i64 [ [[ATOMIC_LOAD748]], [[ATOMIC_EXIT745]] ], [ [[TMP267:%.*]], [[ATOMIC_CMP769:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP264]], i64* [[ATOMIC_TEMP758]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD759:%.*]] = load i64, i64* [[ATOMIC_TEMP758]], align 8
// CHK-CXX-NEXT:    [[BF_SHL760:%.*]] = shl i64 [[BF_LOAD759]], 40
// CHK-CXX-NEXT:    [[BF_ASHR761:%.*]] = ashr i64 [[BF_SHL760]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR761]], i64* [[ATMP749]], align 8
// CHK-CXX-NEXT:    store i64 [[TMP264]], i64* [[ATOMIC_TEMP762]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD763:%.*]] = load i64, i64* [[ATOMIC_TEMP762]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE764:%.*]] = and i64 [[CONV747]], 127
// CHK-CXX-NEXT:    [[BF_SHL765:%.*]] = shl i64 [[BF_VALUE764]], 17
// CHK-CXX-NEXT:    [[BF_CLEAR766:%.*]] = and i64 [[BF_LOAD763]], -16646145
// CHK-CXX-NEXT:    [[BF_SET767:%.*]] = or i64 [[BF_CLEAR766]], [[BF_SHL765]]
// CHK-CXX-NEXT:    store i64 [[BF_SET767]], i64* [[ATOMIC_TEMP762]], align 8
// CHK-CXX-NEXT:    [[TMP265:%.*]] = load i64, i64* [[ATOMIC_TEMP762]], align 8
// CHK-CXX-NEXT:    [[TMP266:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP264]], i64 [[TMP265]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP267]] = extractvalue { i64, i1 } [[TMP266]], 0
// CHK-CXX-NEXT:    [[TMP268:%.*]] = extractvalue { i64, i1 } [[TMP266]], 1
// CHK-CXX-NEXT:    br i1 [[TMP268]], label [[ATOMIC_UPD_EXIT768:%.*]], label [[ATOMIC_CMP769]]
// CHK-CXX:       atomic_upd_exit768:
// CHK-CXX-NEXT:    store i64 [[CONV747]], i64* [[ATMP749]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT776]]
// CHK-CXX:       atomic_cmp769:
// CHK-CXX-NEXT:    store i64 [[TMP267]], i64* [[ATOMIC_TEMP770]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD771:%.*]] = load i64, i64* [[ATOMIC_TEMP770]], align 8
// CHK-CXX-NEXT:    [[BF_SHL772:%.*]] = shl i64 [[BF_LOAD771]], 40
// CHK-CXX-NEXT:    [[BF_ASHR773:%.*]] = ashr i64 [[BF_SHL772]], 57
// CHK-CXX-NEXT:    [[CMP774:%.*]] = icmp slt i64 [[BF_ASHR773]], [[CONV747]]
// CHK-CXX-NEXT:    [[FROMBOOL775:%.*]] = zext i1 [[CMP774]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL775]], i8* [[ATMP755]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP774]], label [[ATOMIC_CONT757]], label [[ATOMIC_EXIT776]]
// CHK-CXX:       atomic_exit776:
// CHK-CXX-NEXT:    [[TMP269:%.*]] = load i64, i64* [[ATMP749]], align 8
// CHK-CXX-NEXT:    [[TMP270:%.*]] = load i8, i8* [[ATMP755]], align 1
// CHK-CXX-NEXT:    [[CONV777:%.*]] = trunc i64 [[TMP269]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV777]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP271:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[CONV778:%.*]] = sext i32 [[TMP271]] to i64
// CHK-CXX-NEXT:    [[TMP272:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[CONV779:%.*]] = sext i32 [[TMP272]] to i64
// CHK-CXX-NEXT:    [[ATOMIC_LOAD780:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD780]], i64* [[ATOMIC_TEMP782]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD783:%.*]] = load i64, i64* [[ATOMIC_TEMP782]], align 8
// CHK-CXX-NEXT:    [[BF_SHL784:%.*]] = shl i64 [[BF_LOAD783]], 40
// CHK-CXX-NEXT:    [[BF_ASHR785:%.*]] = ashr i64 [[BF_SHL784]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR785]], i64* [[ATMP781]], align 8
// CHK-CXX-NEXT:    [[CMP786:%.*]] = icmp eq i64 [[BF_ASHR785]], [[CONV779]]
// CHK-CXX-NEXT:    [[FROMBOOL788:%.*]] = zext i1 [[CMP786]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL788]], i8* [[ATMP787]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP786]], label [[ATOMIC_CONT789:%.*]], label [[ATOMIC_EXIT808:%.*]]
// CHK-CXX:       atomic_cont789:
// CHK-CXX-NEXT:    [[TMP273:%.*]] = phi i64 [ [[ATOMIC_LOAD780]], [[ATOMIC_EXIT776]] ], [ [[TMP276:%.*]], [[ATOMIC_CMP801:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP273]], i64* [[ATOMIC_TEMP790]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD791:%.*]] = load i64, i64* [[ATOMIC_TEMP790]], align 8
// CHK-CXX-NEXT:    [[BF_SHL792:%.*]] = shl i64 [[BF_LOAD791]], 40
// CHK-CXX-NEXT:    [[BF_ASHR793:%.*]] = ashr i64 [[BF_SHL792]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR793]], i64* [[ATMP781]], align 8
// CHK-CXX-NEXT:    store i64 [[TMP273]], i64* [[ATOMIC_TEMP794]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD795:%.*]] = load i64, i64* [[ATOMIC_TEMP794]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE796:%.*]] = and i64 [[CONV778]], 127
// CHK-CXX-NEXT:    [[BF_SHL797:%.*]] = shl i64 [[BF_VALUE796]], 17
// CHK-CXX-NEXT:    [[BF_CLEAR798:%.*]] = and i64 [[BF_LOAD795]], -16646145
// CHK-CXX-NEXT:    [[BF_SET799:%.*]] = or i64 [[BF_CLEAR798]], [[BF_SHL797]]
// CHK-CXX-NEXT:    store i64 [[BF_SET799]], i64* [[ATOMIC_TEMP794]], align 8
// CHK-CXX-NEXT:    [[TMP274:%.*]] = load i64, i64* [[ATOMIC_TEMP794]], align 8
// CHK-CXX-NEXT:    [[TMP275:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP273]], i64 [[TMP274]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP276]] = extractvalue { i64, i1 } [[TMP275]], 0
// CHK-CXX-NEXT:    [[TMP277:%.*]] = extractvalue { i64, i1 } [[TMP275]], 1
// CHK-CXX-NEXT:    br i1 [[TMP277]], label [[ATOMIC_UPD_EXIT800:%.*]], label [[ATOMIC_CMP801]]
// CHK-CXX:       atomic_upd_exit800:
// CHK-CXX-NEXT:    store i64 [[CONV778]], i64* [[ATMP781]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT808]]
// CHK-CXX:       atomic_cmp801:
// CHK-CXX-NEXT:    store i64 [[TMP276]], i64* [[ATOMIC_TEMP802]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD803:%.*]] = load i64, i64* [[ATOMIC_TEMP802]], align 8
// CHK-CXX-NEXT:    [[BF_SHL804:%.*]] = shl i64 [[BF_LOAD803]], 40
// CHK-CXX-NEXT:    [[BF_ASHR805:%.*]] = ashr i64 [[BF_SHL804]], 57
// CHK-CXX-NEXT:    [[CMP806:%.*]] = icmp eq i64 [[BF_ASHR805]], [[CONV779]]
// CHK-CXX-NEXT:    [[FROMBOOL807:%.*]] = zext i1 [[CMP806]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL807]], i8* [[ATMP787]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP806]], label [[ATOMIC_CONT789]], label [[ATOMIC_EXIT808]]
// CHK-CXX:       atomic_exit808:
// CHK-CXX-NEXT:    [[TMP278:%.*]] = load i64, i64* [[ATMP781]], align 8
// CHK-CXX-NEXT:    [[TMP279:%.*]] = load i8, i8* [[ATMP787]], align 1
// CHK-CXX-NEXT:    [[TMP280:%.*]] = trunc i8 [[TMP279]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP280]], label [[ATOMIC_CAPTURE_CONT811:%.*]], label [[ATOMIC_CAPTURE809:%.*]]
// CHK-CXX:       atomic_capture809:
// CHK-CXX-NEXT:    [[CONV810:%.*]] = trunc i64 [[TMP278]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV810]], i32* [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT811]]
// CHK-CXX:       atomic_capture_cont811:
// CHK-CXX-NEXT:    [[TMP281:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[CONV812:%.*]] = sext i32 [[TMP281]] to i64
// CHK-CXX-NEXT:    [[TMP282:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[CONV813:%.*]] = sext i32 [[TMP282]] to i64
// CHK-CXX-NEXT:    [[ATOMIC_LOAD814:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD814]], i64* [[ATOMIC_TEMP816]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD817:%.*]] = load i64, i64* [[ATOMIC_TEMP816]], align 8
// CHK-CXX-NEXT:    [[BF_SHL818:%.*]] = shl i64 [[BF_LOAD817]], 40
// CHK-CXX-NEXT:    [[BF_ASHR819:%.*]] = ashr i64 [[BF_SHL818]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR819]], i64* [[ATMP815]], align 8
// CHK-CXX-NEXT:    [[CMP820:%.*]] = icmp eq i64 [[BF_ASHR819]], [[CONV813]]
// CHK-CXX-NEXT:    [[FROMBOOL822:%.*]] = zext i1 [[CMP820]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL822]], i8* [[ATMP821]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP820]], label [[ATOMIC_CONT823:%.*]], label [[ATOMIC_EXIT841:%.*]]
// CHK-CXX:       atomic_cont823:
// CHK-CXX-NEXT:    [[TMP283:%.*]] = phi i64 [ [[ATOMIC_LOAD814]], [[ATOMIC_CAPTURE_CONT811]] ], [ [[TMP286:%.*]], [[ATOMIC_CMP834:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP283]], i64* [[ATOMIC_TEMP824]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD825:%.*]] = load i64, i64* [[ATOMIC_TEMP824]], align 8
// CHK-CXX-NEXT:    [[BF_SHL826:%.*]] = shl i64 [[BF_LOAD825]], 40
// CHK-CXX-NEXT:    [[BF_ASHR827:%.*]] = ashr i64 [[BF_SHL826]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR827]], i64* [[ATMP815]], align 8
// CHK-CXX-NEXT:    store i64 [[TMP283]], i64* [[ATOMIC_TEMP828]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD829:%.*]] = load i64, i64* [[ATOMIC_TEMP828]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE830:%.*]] = and i64 [[CONV812]], 127
// CHK-CXX-NEXT:    [[BF_SHL831:%.*]] = shl i64 [[BF_VALUE830]], 17
// CHK-CXX-NEXT:    [[BF_CLEAR832:%.*]] = and i64 [[BF_LOAD829]], -16646145
// CHK-CXX-NEXT:    [[BF_SET833:%.*]] = or i64 [[BF_CLEAR832]], [[BF_SHL831]]
// CHK-CXX-NEXT:    store i64 [[BF_SET833]], i64* [[ATOMIC_TEMP828]], align 8
// CHK-CXX-NEXT:    [[TMP284:%.*]] = load i64, i64* [[ATOMIC_TEMP828]], align 8
// CHK-CXX-NEXT:    [[TMP285:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP283]], i64 [[TMP284]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP286]] = extractvalue { i64, i1 } [[TMP285]], 0
// CHK-CXX-NEXT:    [[TMP287:%.*]] = extractvalue { i64, i1 } [[TMP285]], 1
// CHK-CXX-NEXT:    br i1 [[TMP287]], label [[ATOMIC_EXIT841]], label [[ATOMIC_CMP834]]
// CHK-CXX:       atomic_cmp834:
// CHK-CXX-NEXT:    store i64 [[TMP286]], i64* [[ATOMIC_TEMP835]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD836:%.*]] = load i64, i64* [[ATOMIC_TEMP835]], align 8
// CHK-CXX-NEXT:    [[BF_SHL837:%.*]] = shl i64 [[BF_LOAD836]], 40
// CHK-CXX-NEXT:    [[BF_ASHR838:%.*]] = ashr i64 [[BF_SHL837]], 57
// CHK-CXX-NEXT:    [[CMP839:%.*]] = icmp eq i64 [[BF_ASHR838]], [[CONV813]]
// CHK-CXX-NEXT:    [[FROMBOOL840:%.*]] = zext i1 [[CMP839]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL840]], i8* [[ATMP821]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP839]], label [[ATOMIC_CONT823]], label [[ATOMIC_EXIT841]]
// CHK-CXX:       atomic_exit841:
// CHK-CXX-NEXT:    [[TMP288:%.*]] = load i64, i64* [[ATMP815]], align 8
// CHK-CXX-NEXT:    [[TMP289:%.*]] = load i8, i8* [[ATMP821]], align 1
// CHK-CXX-NEXT:    [[CONV842:%.*]] = zext i8 [[TMP289]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV842]], i32* [[R]], align 4
// CHK-CXX-NEXT:    [[TMP290:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[CONV843:%.*]] = sext i32 [[TMP290]] to i64
// CHK-CXX-NEXT:    [[TMP291:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[CONV844:%.*]] = sext i32 [[TMP291]] to i64
// CHK-CXX-NEXT:    [[ATOMIC_LOAD845:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD845]], i64* [[ATOMIC_TEMP847]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD848:%.*]] = load i64, i64* [[ATOMIC_TEMP847]], align 8
// CHK-CXX-NEXT:    [[BF_SHL849:%.*]] = shl i64 [[BF_LOAD848]], 40
// CHK-CXX-NEXT:    [[BF_ASHR850:%.*]] = ashr i64 [[BF_SHL849]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR850]], i64* [[ATMP846]], align 8
// CHK-CXX-NEXT:    [[CMP851:%.*]] = icmp eq i64 [[BF_ASHR850]], [[CONV844]]
// CHK-CXX-NEXT:    [[FROMBOOL853:%.*]] = zext i1 [[CMP851]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL853]], i8* [[ATMP852]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP851]], label [[ATOMIC_CONT854:%.*]], label [[ATOMIC_EXIT872:%.*]]
// CHK-CXX:       atomic_cont854:
// CHK-CXX-NEXT:    [[TMP292:%.*]] = phi i64 [ [[ATOMIC_LOAD845]], [[ATOMIC_EXIT841]] ], [ [[TMP295:%.*]], [[ATOMIC_CMP865:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP292]], i64* [[ATOMIC_TEMP855]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD856:%.*]] = load i64, i64* [[ATOMIC_TEMP855]], align 8
// CHK-CXX-NEXT:    [[BF_SHL857:%.*]] = shl i64 [[BF_LOAD856]], 40
// CHK-CXX-NEXT:    [[BF_ASHR858:%.*]] = ashr i64 [[BF_SHL857]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR858]], i64* [[ATMP846]], align 8
// CHK-CXX-NEXT:    store i64 [[TMP292]], i64* [[ATOMIC_TEMP859]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD860:%.*]] = load i64, i64* [[ATOMIC_TEMP859]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE861:%.*]] = and i64 [[CONV843]], 127
// CHK-CXX-NEXT:    [[BF_SHL862:%.*]] = shl i64 [[BF_VALUE861]], 17
// CHK-CXX-NEXT:    [[BF_CLEAR863:%.*]] = and i64 [[BF_LOAD860]], -16646145
// CHK-CXX-NEXT:    [[BF_SET864:%.*]] = or i64 [[BF_CLEAR863]], [[BF_SHL862]]
// CHK-CXX-NEXT:    store i64 [[BF_SET864]], i64* [[ATOMIC_TEMP859]], align 8
// CHK-CXX-NEXT:    [[TMP293:%.*]] = load i64, i64* [[ATOMIC_TEMP859]], align 8
// CHK-CXX-NEXT:    [[TMP294:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP292]], i64 [[TMP293]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP295]] = extractvalue { i64, i1 } [[TMP294]], 0
// CHK-CXX-NEXT:    [[TMP296:%.*]] = extractvalue { i64, i1 } [[TMP294]], 1
// CHK-CXX-NEXT:    br i1 [[TMP296]], label [[ATOMIC_EXIT872]], label [[ATOMIC_CMP865]]
// CHK-CXX:       atomic_cmp865:
// CHK-CXX-NEXT:    store i64 [[TMP295]], i64* [[ATOMIC_TEMP866]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD867:%.*]] = load i64, i64* [[ATOMIC_TEMP866]], align 8
// CHK-CXX-NEXT:    [[BF_SHL868:%.*]] = shl i64 [[BF_LOAD867]], 40
// CHK-CXX-NEXT:    [[BF_ASHR869:%.*]] = ashr i64 [[BF_SHL868]], 57
// CHK-CXX-NEXT:    [[CMP870:%.*]] = icmp eq i64 [[BF_ASHR869]], [[CONV844]]
// CHK-CXX-NEXT:    [[FROMBOOL871:%.*]] = zext i1 [[CMP870]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL871]], i8* [[ATMP852]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP870]], label [[ATOMIC_CONT854]], label [[ATOMIC_EXIT872]]
// CHK-CXX:       atomic_exit872:
// CHK-CXX-NEXT:    [[TMP297:%.*]] = load i64, i64* [[ATMP846]], align 8
// CHK-CXX-NEXT:    [[TMP298:%.*]] = load i8, i8* [[ATMP852]], align 1
// CHK-CXX-NEXT:    [[CONV873:%.*]] = zext i8 [[TMP298]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV873]], i32* [[R]], align 4
// CHK-CXX-NEXT:    [[TMP299:%.*]] = trunc i8 [[TMP298]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP299]], label [[ATOMIC_CAPTURE_CONT876:%.*]], label [[ATOMIC_CAPTURE874:%.*]]
// CHK-CXX:       atomic_capture874:
// CHK-CXX-NEXT:    [[CONV875:%.*]] = trunc i64 [[TMP297]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV875]], i32* [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT876]]
// CHK-CXX:       atomic_capture_cont876:
// CHK-CXX-NEXT:    [[TMP300:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD877:%.*]] = load atomic i8, i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED:%.*]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2) monotonic, align 1
// CHK-CXX-NEXT:    [[TMP301:%.*]] = bitcast i32* [[ATOMIC_TEMP879]] to i8*
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD877]], i8* [[TMP301]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD880:%.*]] = load i8, i8* [[TMP301]], align 1
// CHK-CXX-NEXT:    [[BF_SHL881:%.*]] = shl i8 [[BF_LOAD880]], 7
// CHK-CXX-NEXT:    [[BF_ASHR882:%.*]] = ashr i8 [[BF_SHL881]], 7
// CHK-CXX-NEXT:    [[BF_CAST883:%.*]] = sext i8 [[BF_ASHR882]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST883]], i32* [[ATMP878]], align 4
// CHK-CXX-NEXT:    [[CMP884:%.*]] = icmp slt i32 [[BF_CAST883]], [[TMP300]]
// CHK-CXX-NEXT:    [[FROMBOOL886:%.*]] = zext i1 [[CMP884]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL886]], i8* [[ATMP885]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP884]], label [[ATOMIC_CONT887:%.*]], label [[ATOMIC_EXIT906:%.*]]
// CHK-CXX:       atomic_cont887:
// CHK-CXX-NEXT:    [[TMP302:%.*]] = phi i8 [ [[ATOMIC_LOAD877]], [[ATOMIC_CAPTURE_CONT876]] ], [ [[TMP308:%.*]], [[ATOMIC_CMP898:%.*]] ]
// CHK-CXX-NEXT:    [[TMP303:%.*]] = bitcast i32* [[ATOMIC_TEMP888]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP302]], i8* [[TMP303]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD889:%.*]] = load i8, i8* [[TMP303]], align 1
// CHK-CXX-NEXT:    [[BF_SHL890:%.*]] = shl i8 [[BF_LOAD889]], 7
// CHK-CXX-NEXT:    [[BF_ASHR891:%.*]] = ashr i8 [[BF_SHL890]], 7
// CHK-CXX-NEXT:    [[BF_CAST892:%.*]] = sext i8 [[BF_ASHR891]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST892]], i32* [[ATMP878]], align 4
// CHK-CXX-NEXT:    [[TMP304:%.*]] = bitcast i32* [[ATOMIC_TEMP893]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP302]], i8* [[TMP304]], align 1
// CHK-CXX-NEXT:    [[TMP305:%.*]] = trunc i32 [[TMP300]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD894:%.*]] = load i8, i8* [[TMP304]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE895:%.*]] = and i8 [[TMP305]], 1
// CHK-CXX-NEXT:    [[BF_CLEAR896:%.*]] = and i8 [[BF_LOAD894]], -2
// CHK-CXX-NEXT:    [[BF_SET897:%.*]] = or i8 [[BF_CLEAR896]], [[BF_VALUE895]]
// CHK-CXX-NEXT:    store i8 [[BF_SET897]], i8* [[TMP304]], align 1
// CHK-CXX-NEXT:    [[TMP306:%.*]] = load i8, i8* [[TMP304]], align 1
// CHK-CXX-NEXT:    [[TMP307:%.*]] = cmpxchg i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2), i8 [[TMP302]], i8 [[TMP306]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP308]] = extractvalue { i8, i1 } [[TMP307]], 0
// CHK-CXX-NEXT:    [[TMP309:%.*]] = extractvalue { i8, i1 } [[TMP307]], 1
// CHK-CXX-NEXT:    br i1 [[TMP309]], label [[ATOMIC_EXIT906]], label [[ATOMIC_CMP898]]
// CHK-CXX:       atomic_cmp898:
// CHK-CXX-NEXT:    [[TMP310:%.*]] = bitcast i32* [[ATOMIC_TEMP899]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP308]], i8* [[TMP310]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD900:%.*]] = load i8, i8* [[TMP310]], align 1
// CHK-CXX-NEXT:    [[BF_SHL901:%.*]] = shl i8 [[BF_LOAD900]], 7
// CHK-CXX-NEXT:    [[BF_ASHR902:%.*]] = ashr i8 [[BF_SHL901]], 7
// CHK-CXX-NEXT:    [[BF_CAST903:%.*]] = sext i8 [[BF_ASHR902]] to i32
// CHK-CXX-NEXT:    [[CMP904:%.*]] = icmp slt i32 [[BF_CAST903]], [[TMP300]]
// CHK-CXX-NEXT:    [[FROMBOOL905:%.*]] = zext i1 [[CMP904]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL905]], i8* [[ATMP885]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP904]], label [[ATOMIC_CONT887]], label [[ATOMIC_EXIT906]]
// CHK-CXX:       atomic_exit906:
// CHK-CXX-NEXT:    [[TMP311:%.*]] = load i32, i32* [[ATMP878]], align 4
// CHK-CXX-NEXT:    [[TMP312:%.*]] = load i8, i8* [[ATMP885]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP311]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP313:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD907:%.*]] = load atomic i8, i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2) monotonic, align 1
// CHK-CXX-NEXT:    [[TMP314:%.*]] = bitcast i32* [[ATOMIC_TEMP909]] to i8*
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD907]], i8* [[TMP314]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD910:%.*]] = load i8, i8* [[TMP314]], align 1
// CHK-CXX-NEXT:    [[BF_SHL911:%.*]] = shl i8 [[BF_LOAD910]], 7
// CHK-CXX-NEXT:    [[BF_ASHR912:%.*]] = ashr i8 [[BF_SHL911]], 7
// CHK-CXX-NEXT:    [[BF_CAST913:%.*]] = sext i8 [[BF_ASHR912]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST913]], i32* [[ATMP908]], align 4
// CHK-CXX-NEXT:    [[CMP914:%.*]] = icmp slt i32 [[BF_CAST913]], [[TMP313]]
// CHK-CXX-NEXT:    [[FROMBOOL916:%.*]] = zext i1 [[CMP914]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL916]], i8* [[ATMP915]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP914]], label [[ATOMIC_CONT917:%.*]], label [[ATOMIC_EXIT937:%.*]]
// CHK-CXX:       atomic_cont917:
// CHK-CXX-NEXT:    [[TMP315:%.*]] = phi i8 [ [[ATOMIC_LOAD907]], [[ATOMIC_EXIT906]] ], [ [[TMP321:%.*]], [[ATOMIC_CMP929:%.*]] ]
// CHK-CXX-NEXT:    [[TMP316:%.*]] = bitcast i32* [[ATOMIC_TEMP918]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP315]], i8* [[TMP316]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD919:%.*]] = load i8, i8* [[TMP316]], align 1
// CHK-CXX-NEXT:    [[BF_SHL920:%.*]] = shl i8 [[BF_LOAD919]], 7
// CHK-CXX-NEXT:    [[BF_ASHR921:%.*]] = ashr i8 [[BF_SHL920]], 7
// CHK-CXX-NEXT:    [[BF_CAST922:%.*]] = sext i8 [[BF_ASHR921]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST922]], i32* [[ATMP908]], align 4
// CHK-CXX-NEXT:    [[TMP317:%.*]] = bitcast i32* [[ATOMIC_TEMP923]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP315]], i8* [[TMP317]], align 1
// CHK-CXX-NEXT:    [[TMP318:%.*]] = trunc i32 [[TMP313]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD924:%.*]] = load i8, i8* [[TMP317]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE925:%.*]] = and i8 [[TMP318]], 1
// CHK-CXX-NEXT:    [[BF_CLEAR926:%.*]] = and i8 [[BF_LOAD924]], -2
// CHK-CXX-NEXT:    [[BF_SET927:%.*]] = or i8 [[BF_CLEAR926]], [[BF_VALUE925]]
// CHK-CXX-NEXT:    store i8 [[BF_SET927]], i8* [[TMP317]], align 1
// CHK-CXX-NEXT:    [[TMP319:%.*]] = load i8, i8* [[TMP317]], align 1
// CHK-CXX-NEXT:    [[TMP320:%.*]] = cmpxchg i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2), i8 [[TMP315]], i8 [[TMP319]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP321]] = extractvalue { i8, i1 } [[TMP320]], 0
// CHK-CXX-NEXT:    [[TMP322:%.*]] = extractvalue { i8, i1 } [[TMP320]], 1
// CHK-CXX-NEXT:    br i1 [[TMP322]], label [[ATOMIC_UPD_EXIT928:%.*]], label [[ATOMIC_CMP929]]
// CHK-CXX:       atomic_upd_exit928:
// CHK-CXX-NEXT:    store i32 [[TMP313]], i32* [[ATMP908]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT937]]
// CHK-CXX:       atomic_cmp929:
// CHK-CXX-NEXT:    [[TMP323:%.*]] = bitcast i32* [[ATOMIC_TEMP930]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP321]], i8* [[TMP323]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD931:%.*]] = load i8, i8* [[TMP323]], align 1
// CHK-CXX-NEXT:    [[BF_SHL932:%.*]] = shl i8 [[BF_LOAD931]], 7
// CHK-CXX-NEXT:    [[BF_ASHR933:%.*]] = ashr i8 [[BF_SHL932]], 7
// CHK-CXX-NEXT:    [[BF_CAST934:%.*]] = sext i8 [[BF_ASHR933]] to i32
// CHK-CXX-NEXT:    [[CMP935:%.*]] = icmp slt i32 [[BF_CAST934]], [[TMP313]]
// CHK-CXX-NEXT:    [[FROMBOOL936:%.*]] = zext i1 [[CMP935]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL936]], i8* [[ATMP915]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP935]], label [[ATOMIC_CONT917]], label [[ATOMIC_EXIT937]]
// CHK-CXX:       atomic_exit937:
// CHK-CXX-NEXT:    [[TMP324:%.*]] = load i32, i32* [[ATMP908]], align 4
// CHK-CXX-NEXT:    [[TMP325:%.*]] = load i8, i8* [[ATMP915]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP324]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP326:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP327:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD938:%.*]] = load atomic i8, i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2) monotonic, align 1
// CHK-CXX-NEXT:    [[TMP328:%.*]] = bitcast i32* [[ATOMIC_TEMP940]] to i8*
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD938]], i8* [[TMP328]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD941:%.*]] = load i8, i8* [[TMP328]], align 1
// CHK-CXX-NEXT:    [[BF_SHL942:%.*]] = shl i8 [[BF_LOAD941]], 7
// CHK-CXX-NEXT:    [[BF_ASHR943:%.*]] = ashr i8 [[BF_SHL942]], 7
// CHK-CXX-NEXT:    [[BF_CAST944:%.*]] = sext i8 [[BF_ASHR943]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST944]], i32* [[ATMP939]], align 4
// CHK-CXX-NEXT:    [[CMP945:%.*]] = icmp eq i32 [[BF_CAST944]], [[TMP327]]
// CHK-CXX-NEXT:    [[FROMBOOL947:%.*]] = zext i1 [[CMP945]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL947]], i8* [[ATMP946]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP945]], label [[ATOMIC_CONT948:%.*]], label [[ATOMIC_EXIT968:%.*]]
// CHK-CXX:       atomic_cont948:
// CHK-CXX-NEXT:    [[TMP329:%.*]] = phi i8 [ [[ATOMIC_LOAD938]], [[ATOMIC_EXIT937]] ], [ [[TMP335:%.*]], [[ATOMIC_CMP960:%.*]] ]
// CHK-CXX-NEXT:    [[TMP330:%.*]] = bitcast i32* [[ATOMIC_TEMP949]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP329]], i8* [[TMP330]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD950:%.*]] = load i8, i8* [[TMP330]], align 1
// CHK-CXX-NEXT:    [[BF_SHL951:%.*]] = shl i8 [[BF_LOAD950]], 7
// CHK-CXX-NEXT:    [[BF_ASHR952:%.*]] = ashr i8 [[BF_SHL951]], 7
// CHK-CXX-NEXT:    [[BF_CAST953:%.*]] = sext i8 [[BF_ASHR952]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST953]], i32* [[ATMP939]], align 4
// CHK-CXX-NEXT:    [[TMP331:%.*]] = bitcast i32* [[ATOMIC_TEMP954]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP329]], i8* [[TMP331]], align 1
// CHK-CXX-NEXT:    [[TMP332:%.*]] = trunc i32 [[TMP326]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD955:%.*]] = load i8, i8* [[TMP331]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE956:%.*]] = and i8 [[TMP332]], 1
// CHK-CXX-NEXT:    [[BF_CLEAR957:%.*]] = and i8 [[BF_LOAD955]], -2
// CHK-CXX-NEXT:    [[BF_SET958:%.*]] = or i8 [[BF_CLEAR957]], [[BF_VALUE956]]
// CHK-CXX-NEXT:    store i8 [[BF_SET958]], i8* [[TMP331]], align 1
// CHK-CXX-NEXT:    [[TMP333:%.*]] = load i8, i8* [[TMP331]], align 1
// CHK-CXX-NEXT:    [[TMP334:%.*]] = cmpxchg i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2), i8 [[TMP329]], i8 [[TMP333]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP335]] = extractvalue { i8, i1 } [[TMP334]], 0
// CHK-CXX-NEXT:    [[TMP336:%.*]] = extractvalue { i8, i1 } [[TMP334]], 1
// CHK-CXX-NEXT:    br i1 [[TMP336]], label [[ATOMIC_UPD_EXIT959:%.*]], label [[ATOMIC_CMP960]]
// CHK-CXX:       atomic_upd_exit959:
// CHK-CXX-NEXT:    store i32 [[TMP326]], i32* [[ATMP939]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT968]]
// CHK-CXX:       atomic_cmp960:
// CHK-CXX-NEXT:    [[TMP337:%.*]] = bitcast i32* [[ATOMIC_TEMP961]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP335]], i8* [[TMP337]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD962:%.*]] = load i8, i8* [[TMP337]], align 1
// CHK-CXX-NEXT:    [[BF_SHL963:%.*]] = shl i8 [[BF_LOAD962]], 7
// CHK-CXX-NEXT:    [[BF_ASHR964:%.*]] = ashr i8 [[BF_SHL963]], 7
// CHK-CXX-NEXT:    [[BF_CAST965:%.*]] = sext i8 [[BF_ASHR964]] to i32
// CHK-CXX-NEXT:    [[CMP966:%.*]] = icmp eq i32 [[BF_CAST965]], [[TMP327]]
// CHK-CXX-NEXT:    [[FROMBOOL967:%.*]] = zext i1 [[CMP966]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL967]], i8* [[ATMP946]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP966]], label [[ATOMIC_CONT948]], label [[ATOMIC_EXIT968]]
// CHK-CXX:       atomic_exit968:
// CHK-CXX-NEXT:    [[TMP338:%.*]] = load i32, i32* [[ATMP939]], align 4
// CHK-CXX-NEXT:    [[TMP339:%.*]] = load i8, i8* [[ATMP946]], align 1
// CHK-CXX-NEXT:    [[TMP340:%.*]] = trunc i8 [[TMP339]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP340]], label [[ATOMIC_CAPTURE_CONT970:%.*]], label [[ATOMIC_CAPTURE969:%.*]]
// CHK-CXX:       atomic_capture969:
// CHK-CXX-NEXT:    store i32 [[TMP338]], i32* [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT970]]
// CHK-CXX:       atomic_capture_cont970:
// CHK-CXX-NEXT:    [[TMP341:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP342:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD971:%.*]] = load atomic i8, i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2) monotonic, align 1
// CHK-CXX-NEXT:    [[TMP343:%.*]] = bitcast i32* [[ATOMIC_TEMP973]] to i8*
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD971]], i8* [[TMP343]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD974:%.*]] = load i8, i8* [[TMP343]], align 1
// CHK-CXX-NEXT:    [[BF_SHL975:%.*]] = shl i8 [[BF_LOAD974]], 7
// CHK-CXX-NEXT:    [[BF_ASHR976:%.*]] = ashr i8 [[BF_SHL975]], 7
// CHK-CXX-NEXT:    [[BF_CAST977:%.*]] = sext i8 [[BF_ASHR976]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST977]], i32* [[ATMP972]], align 4
// CHK-CXX-NEXT:    [[CMP978:%.*]] = icmp eq i32 [[BF_CAST977]], [[TMP342]]
// CHK-CXX-NEXT:    [[FROMBOOL980:%.*]] = zext i1 [[CMP978]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL980]], i8* [[ATMP979]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP978]], label [[ATOMIC_CONT981:%.*]], label [[ATOMIC_EXIT1000:%.*]]
// CHK-CXX:       atomic_cont981:
// CHK-CXX-NEXT:    [[TMP344:%.*]] = phi i8 [ [[ATOMIC_LOAD971]], [[ATOMIC_CAPTURE_CONT970]] ], [ [[TMP350:%.*]], [[ATOMIC_CMP992:%.*]] ]
// CHK-CXX-NEXT:    [[TMP345:%.*]] = bitcast i32* [[ATOMIC_TEMP982]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP344]], i8* [[TMP345]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD983:%.*]] = load i8, i8* [[TMP345]], align 1
// CHK-CXX-NEXT:    [[BF_SHL984:%.*]] = shl i8 [[BF_LOAD983]], 7
// CHK-CXX-NEXT:    [[BF_ASHR985:%.*]] = ashr i8 [[BF_SHL984]], 7
// CHK-CXX-NEXT:    [[BF_CAST986:%.*]] = sext i8 [[BF_ASHR985]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST986]], i32* [[ATMP972]], align 4
// CHK-CXX-NEXT:    [[TMP346:%.*]] = bitcast i32* [[ATOMIC_TEMP987]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP344]], i8* [[TMP346]], align 1
// CHK-CXX-NEXT:    [[TMP347:%.*]] = trunc i32 [[TMP341]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD988:%.*]] = load i8, i8* [[TMP346]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE989:%.*]] = and i8 [[TMP347]], 1
// CHK-CXX-NEXT:    [[BF_CLEAR990:%.*]] = and i8 [[BF_LOAD988]], -2
// CHK-CXX-NEXT:    [[BF_SET991:%.*]] = or i8 [[BF_CLEAR990]], [[BF_VALUE989]]
// CHK-CXX-NEXT:    store i8 [[BF_SET991]], i8* [[TMP346]], align 1
// CHK-CXX-NEXT:    [[TMP348:%.*]] = load i8, i8* [[TMP346]], align 1
// CHK-CXX-NEXT:    [[TMP349:%.*]] = cmpxchg i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2), i8 [[TMP344]], i8 [[TMP348]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP350]] = extractvalue { i8, i1 } [[TMP349]], 0
// CHK-CXX-NEXT:    [[TMP351:%.*]] = extractvalue { i8, i1 } [[TMP349]], 1
// CHK-CXX-NEXT:    br i1 [[TMP351]], label [[ATOMIC_EXIT1000]], label [[ATOMIC_CMP992]]
// CHK-CXX:       atomic_cmp992:
// CHK-CXX-NEXT:    [[TMP352:%.*]] = bitcast i32* [[ATOMIC_TEMP993]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP350]], i8* [[TMP352]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD994:%.*]] = load i8, i8* [[TMP352]], align 1
// CHK-CXX-NEXT:    [[BF_SHL995:%.*]] = shl i8 [[BF_LOAD994]], 7
// CHK-CXX-NEXT:    [[BF_ASHR996:%.*]] = ashr i8 [[BF_SHL995]], 7
// CHK-CXX-NEXT:    [[BF_CAST997:%.*]] = sext i8 [[BF_ASHR996]] to i32
// CHK-CXX-NEXT:    [[CMP998:%.*]] = icmp eq i32 [[BF_CAST997]], [[TMP342]]
// CHK-CXX-NEXT:    [[FROMBOOL999:%.*]] = zext i1 [[CMP998]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL999]], i8* [[ATMP979]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP998]], label [[ATOMIC_CONT981]], label [[ATOMIC_EXIT1000]]
// CHK-CXX:       atomic_exit1000:
// CHK-CXX-NEXT:    [[TMP353:%.*]] = load i32, i32* [[ATMP972]], align 4
// CHK-CXX-NEXT:    [[TMP354:%.*]] = load i8, i8* [[ATMP979]], align 1
// CHK-CXX-NEXT:    [[CONV1001:%.*]] = zext i8 [[TMP354]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV1001]], i32* [[R]], align 4
// CHK-CXX-NEXT:    [[TMP355:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP356:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD1002:%.*]] = load atomic i8, i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2) monotonic, align 1
// CHK-CXX-NEXT:    [[TMP357:%.*]] = bitcast i32* [[ATOMIC_TEMP1004]] to i8*
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD1002]], i8* [[TMP357]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD1005:%.*]] = load i8, i8* [[TMP357]], align 1
// CHK-CXX-NEXT:    [[BF_SHL1006:%.*]] = shl i8 [[BF_LOAD1005]], 7
// CHK-CXX-NEXT:    [[BF_ASHR1007:%.*]] = ashr i8 [[BF_SHL1006]], 7
// CHK-CXX-NEXT:    [[BF_CAST1008:%.*]] = sext i8 [[BF_ASHR1007]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST1008]], i32* [[ATMP1003]], align 4
// CHK-CXX-NEXT:    [[CMP1009:%.*]] = icmp eq i32 [[BF_CAST1008]], [[TMP356]]
// CHK-CXX-NEXT:    [[FROMBOOL1011:%.*]] = zext i1 [[CMP1009]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL1011]], i8* [[ATMP1010]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP1009]], label [[ATOMIC_CONT1012:%.*]], label [[ATOMIC_EXIT1031:%.*]]
// CHK-CXX:       atomic_cont1012:
// CHK-CXX-NEXT:    [[TMP358:%.*]] = phi i8 [ [[ATOMIC_LOAD1002]], [[ATOMIC_EXIT1000]] ], [ [[TMP364:%.*]], [[ATOMIC_CMP1023:%.*]] ]
// CHK-CXX-NEXT:    [[TMP359:%.*]] = bitcast i32* [[ATOMIC_TEMP1013]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP358]], i8* [[TMP359]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD1014:%.*]] = load i8, i8* [[TMP359]], align 1
// CHK-CXX-NEXT:    [[BF_SHL1015:%.*]] = shl i8 [[BF_LOAD1014]], 7
// CHK-CXX-NEXT:    [[BF_ASHR1016:%.*]] = ashr i8 [[BF_SHL1015]], 7
// CHK-CXX-NEXT:    [[BF_CAST1017:%.*]] = sext i8 [[BF_ASHR1016]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST1017]], i32* [[ATMP1003]], align 4
// CHK-CXX-NEXT:    [[TMP360:%.*]] = bitcast i32* [[ATOMIC_TEMP1018]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP358]], i8* [[TMP360]], align 1
// CHK-CXX-NEXT:    [[TMP361:%.*]] = trunc i32 [[TMP355]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD1019:%.*]] = load i8, i8* [[TMP360]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE1020:%.*]] = and i8 [[TMP361]], 1
// CHK-CXX-NEXT:    [[BF_CLEAR1021:%.*]] = and i8 [[BF_LOAD1019]], -2
// CHK-CXX-NEXT:    [[BF_SET1022:%.*]] = or i8 [[BF_CLEAR1021]], [[BF_VALUE1020]]
// CHK-CXX-NEXT:    store i8 [[BF_SET1022]], i8* [[TMP360]], align 1
// CHK-CXX-NEXT:    [[TMP362:%.*]] = load i8, i8* [[TMP360]], align 1
// CHK-CXX-NEXT:    [[TMP363:%.*]] = cmpxchg i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2), i8 [[TMP358]], i8 [[TMP362]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP364]] = extractvalue { i8, i1 } [[TMP363]], 0
// CHK-CXX-NEXT:    [[TMP365:%.*]] = extractvalue { i8, i1 } [[TMP363]], 1
// CHK-CXX-NEXT:    br i1 [[TMP365]], label [[ATOMIC_EXIT1031]], label [[ATOMIC_CMP1023]]
// CHK-CXX:       atomic_cmp1023:
// CHK-CXX-NEXT:    [[TMP366:%.*]] = bitcast i32* [[ATOMIC_TEMP1024]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP364]], i8* [[TMP366]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD1025:%.*]] = load i8, i8* [[TMP366]], align 1
// CHK-CXX-NEXT:    [[BF_SHL1026:%.*]] = shl i8 [[BF_LOAD1025]], 7
// CHK-CXX-NEXT:    [[BF_ASHR1027:%.*]] = ashr i8 [[BF_SHL1026]], 7
// CHK-CXX-NEXT:    [[BF_CAST1028:%.*]] = sext i8 [[BF_ASHR1027]] to i32
// CHK-CXX-NEXT:    [[CMP1029:%.*]] = icmp eq i32 [[BF_CAST1028]], [[TMP356]]
// CHK-CXX-NEXT:    [[FROMBOOL1030:%.*]] = zext i1 [[CMP1029]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL1030]], i8* [[ATMP1010]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP1029]], label [[ATOMIC_CONT1012]], label [[ATOMIC_EXIT1031]]
// CHK-CXX:       atomic_exit1031:
// CHK-CXX-NEXT:    [[TMP367:%.*]] = load i32, i32* [[ATMP1003]], align 4
// CHK-CXX-NEXT:    [[TMP368:%.*]] = load i8, i8* [[ATMP1010]], align 1
// CHK-CXX-NEXT:    [[CONV1032:%.*]] = zext i8 [[TMP368]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV1032]], i32* [[R]], align 4
// CHK-CXX-NEXT:    [[TMP369:%.*]] = trunc i8 [[TMP368]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP369]], label [[ATOMIC_CAPTURE_CONT1034:%.*]], label [[ATOMIC_CAPTURE1033:%.*]]
// CHK-CXX:       atomic_capture1033:
// CHK-CXX-NEXT:    store i32 [[TMP367]], i32* [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT1034]]
// CHK-CXX:       atomic_capture_cont1034:
// CHK-CXX-NEXT:    ret void
//
void test_bitfield()
{
  int expr, d, e, v, r;

  #pragma omp atomic compare capture
  { v = bfx.a; if (bfx.a < expr) { bfx.a = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (bfx.a < expr) { bfx.a = expr; } v = bfx.a; } // MAX

  #pragma omp atomic compare capture
  if (bfx.a == e) { bfx.a = d; } else { v = bfx.a; }

  #pragma omp atomic compare capture
  { r =  bfx.a == e; if(r) {  bfx.a = d; } }

  #pragma omp atomic compare capture
  { r =  bfx.a == e; if(r) {  bfx.a = d; } else { v =  bfx.a; } }

#ifdef LIBCALLS
  #pragma omp atomic compare capture
  { v = bfx_packed.a; if (bfx_packed.a < expr) { bfx_packed.a = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (bfx_packed.a < expr) { bfx_packed.a = expr; } v = bfx_packed.a; } // MAX

  #pragma omp atomic compare capture
  if (bfx_packed.a == e) { bfx_packed.a = d; } else { v = bfx_packed.a; }

  #pragma omp atomic compare capture
  { r = bfx_packed.a == e; if(r) { bfx_packed.a = d; } }

  #pragma omp atomic compare capture
  { r = bfx_packed.a == e; if(r) { bfx_packed.a = d; } else { v = bfx_packed.a; } }
#endif

  #pragma omp atomic compare capture
  { v = bfx2.a; if (bfx2.a < expr) { bfx2.a = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (bfx2.a < expr) { bfx2.a = expr; } v = bfx2.a; } // MAX

  #pragma omp atomic compare capture
  if (bfx2.a == e) { bfx2.a = d; } else { v = bfx2.a; }

  #pragma omp atomic compare capture
  { r = bfx2.a == e; if(r) { bfx2.a = d; } }

  #pragma omp atomic compare capture
  { r = bfx2.a == e; if(r) { bfx2.a = d; } else { v = bfx2.a; } }

  #pragma omp atomic compare capture
  { v = bfx2_packed.a;
    if (bfx2_packed.a < expr) { bfx2_packed.a = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (bfx2_packed.a < expr) { bfx2_packed.a = expr; }
    v =  bfx2_packed.a; } // MAX

  #pragma omp atomic compare capture
  if (bfx2_packed.a == e) { bfx2_packed.a = d; } else { v = bfx2_packed.a; }

  #pragma omp atomic compare capture
  { r = bfx2_packed.a == e; if(r) { bfx2_packed.a = d; } }

  #pragma omp atomic compare capture
  { r = bfx2_packed.a == e;
    if(r) { bfx2_packed.a = d; } else { v = bfx2_packed.a; } }

  #pragma omp atomic compare capture
  { v = bfx3.a; if (bfx3.a < expr) { bfx3.a = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (bfx3.a < expr) { bfx3.a = expr; } v = bfx3.a; } // MAX

  #pragma omp atomic compare capture
  if (bfx3.a == e) { bfx3.a = d; } else { v = bfx3.a; }

  #pragma omp atomic compare capture
  { r = bfx3.a == e; if(r) { bfx3.a = d; } }

  #pragma omp atomic compare capture
  { r = bfx3.a == e; if(r) { bfx3.a = d; } else { v = bfx3.a; } }

#ifdef LIBCALLS
  #pragma omp atomic compare capture
  { v = bfx3_packed.a;
    if (bfx3_packed.a < expr) { bfx3_packed.a = expr; } }// MAX
  #pragma omp atomic compare capture
  { if (bfx3_packed.a < expr) { bfx3_packed.a = expr; }
    v = bfx3_packed.a; }// MAX

  #pragma omp atomic compare capture
  if (bfx3_packed.a == e) { bfx3_packed.a = d; } else { v = bfx3_packed.a; }

  #pragma omp atomic compare capture
  { r = bfx3_packed.a == e; if(r) { bfx3_packed.a = d; } }

  #pragma omp atomic compare capture
  { r = bfx3_packed.a == e;
    if(r) { bfx3_packed.a = d; } else { v = bfx3_packed.a; } }
#endif

  #pragma omp atomic compare capture
  { v = bfx4.a; if (bfx4.a < expr) { bfx4.a = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (bfx4.a < expr) { bfx4.a = expr; } v = bfx4.a; } // MAX

  #pragma omp atomic compare capture
  if (bfx4.a == e) { bfx4.a = d; } else { v = bfx4.a; }

  #pragma omp atomic compare capture
  { r = bfx4.a == e; if(r) { bfx4.a = d; } }

  #pragma omp atomic compare capture
  { r = bfx4.a == e; if(r) { bfx4.a = d; } else { v = bfx4.a; } }

  #pragma omp atomic compare capture
  { v = bfx4.b; if (bfx4.b < expr) { bfx4.b = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (bfx4.b < expr) { bfx4.b = expr; }  v = bfx4.b; } // MAX

  #pragma omp atomic compare capture
  if (bfx4.b == e) { bfx4.b = d; } else { v = bfx4.b; }

  #pragma omp atomic compare capture
  { r = bfx4.b == e; if(r) { bfx4.b = d; } }

  #pragma omp atomic compare capture
  { r = bfx4.b == e; if(r) { bfx4.b = d; } else { v = bfx4.b; } }

  #pragma omp atomic compare capture
  { v = bfx4_packed.a;
    if (bfx4_packed.a < expr) { bfx4_packed.a = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (bfx4_packed.a < expr) { bfx4_packed.a = expr; }
    v = bfx4_packed.a; } // MAX

  #pragma omp atomic compare capture
  if (bfx4_packed.a == e) { bfx4_packed.a = d; } else { v = bfx4_packed.a; }

  #pragma omp atomic compare capture
  { r = bfx4_packed.a == e; if(r) { bfx4_packed.a = d; } }

  #pragma omp atomic compare capture
  { r = bfx4_packed.a == e;
    if(r) { bfx4_packed.a = d; } else { v = bfx4_packed.a; } }
}

// CHK-C-LABEL: @test_ext_vector(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[FLOAT2X:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[V:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[R:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[TMP:%.*]] = alloca float, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP2:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP4:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP5:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATMP12:%.*]] = alloca float, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP13:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATMP16:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP19:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP21:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP23:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATMP32:%.*]] = alloca float, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP33:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP35:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP37:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATMP40:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP43:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP45:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP48:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP50:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP52:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATMP61:%.*]] = alloca float, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP62:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP64:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP66:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATMP69:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP72:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP74:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP76:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP78:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP80:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATMP89:%.*]] = alloca float, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP90:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP92:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP94:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATMP97:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP100:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP102:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP104:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP106:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP108:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[TMP0:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[CONV:%.*]] = sitofp i32 [[TMP0]] to float
// CHK-C-NEXT:    [[TMP1:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, i64* [[TMP1]] monotonic, align 8
// CHK-C-NEXT:    [[STORETMP:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP]] to i64*
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD]], i64* [[STORETMP]], align 8
// CHK-C-NEXT:    [[TMP2:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP]], align 8
// CHK-C-NEXT:    [[TMP3:%.*]] = extractelement <2 x float> [[TMP2]], i64 0
// CHK-C-NEXT:    store float [[TMP3]], float* [[TMP]], align 4
// CHK-C-NEXT:    [[CMP:%.*]] = fcmp olt float [[TMP3]], [[CONV]]
// CHK-C-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL]], i8* [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP4:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP13:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    [[STORETMP3:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP2]] to i64*
// CHK-C-NEXT:    store i64 [[TMP4]], i64* [[STORETMP3]], align 8
// CHK-C-NEXT:    [[TMP5:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP2]], align 8
// CHK-C-NEXT:    [[TMP6:%.*]] = extractelement <2 x float> [[TMP5]], i64 0
// CHK-C-NEXT:    store float [[TMP6]], float* [[TMP]], align 4
// CHK-C-NEXT:    [[TMP7:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP4]] to i64*
// CHK-C-NEXT:    store i64 [[TMP4]], i64* [[TMP7]], align 8
// CHK-C-NEXT:    [[TMP8:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP4]], align 8
// CHK-C-NEXT:    [[TMP9:%.*]] = insertelement <2 x float> [[TMP8]], float [[CONV]], i64 0
// CHK-C-NEXT:    store <2 x float> [[TMP9]], <2 x float>* [[ATOMIC_TEMP4]], align 8
// CHK-C-NEXT:    [[TMP10:%.*]] = load i64, i64* [[TMP7]], align 8
// CHK-C-NEXT:    [[TMP11:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-C-NEXT:    [[TMP12:%.*]] = cmpxchg i64* [[TMP11]], i64 [[TMP4]], i64 [[TMP10]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP13]] = extractvalue { i64, i1 } [[TMP12]], 0
// CHK-C-NEXT:    [[TMP14:%.*]] = extractvalue { i64, i1 } [[TMP12]], 1
// CHK-C-NEXT:    br i1 [[TMP14]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    [[STORETMP6:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP5]] to i64*
// CHK-C-NEXT:    store i64 [[TMP13]], i64* [[STORETMP6]], align 8
// CHK-C-NEXT:    [[TMP15:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP5]], align 8
// CHK-C-NEXT:    [[TMP16:%.*]] = extractelement <2 x float> [[TMP15]], i64 0
// CHK-C-NEXT:    [[CMP7:%.*]] = fcmp olt float [[TMP16]], [[CONV]]
// CHK-C-NEXT:    [[FROMBOOL8:%.*]] = zext i1 [[CMP7]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL8]], i8* [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP7]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP17:%.*]] = load float, float* [[TMP]], align 4
// CHK-C-NEXT:    [[TMP18:%.*]] = load i8, i8* [[ATMP1]], align 1
// CHK-C-NEXT:    [[CONV9:%.*]] = fptosi float [[TMP17]] to i32
// CHK-C-NEXT:    store i32 [[CONV9]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP19:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[CONV10:%.*]] = sitofp i32 [[TMP19]] to float
// CHK-C-NEXT:    [[TMP20:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD11:%.*]] = load atomic i64, i64* [[TMP20]] monotonic, align 8
// CHK-C-NEXT:    [[STORETMP14:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP13]] to i64*
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD11]], i64* [[STORETMP14]], align 8
// CHK-C-NEXT:    [[TMP21:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP13]], align 8
// CHK-C-NEXT:    [[TMP22:%.*]] = extractelement <2 x float> [[TMP21]], i64 0
// CHK-C-NEXT:    store float [[TMP22]], float* [[ATMP12]], align 4
// CHK-C-NEXT:    [[CMP15:%.*]] = fcmp olt float [[TMP22]], [[CONV10]]
// CHK-C-NEXT:    [[FROMBOOL17:%.*]] = zext i1 [[CMP15]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL17]], i8* [[ATMP16]], align 1
// CHK-C-NEXT:    br i1 [[CMP15]], label [[ATOMIC_CONT18:%.*]], label [[ATOMIC_EXIT27:%.*]]
// CHK-C:       atomic_cont18:
// CHK-C-NEXT:    [[TMP23:%.*]] = phi i64 [ [[ATOMIC_LOAD11]], [[ATOMIC_EXIT]] ], [ [[TMP32:%.*]], [[ATOMIC_CMP22:%.*]] ]
// CHK-C-NEXT:    [[STORETMP20:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP19]] to i64*
// CHK-C-NEXT:    store i64 [[TMP23]], i64* [[STORETMP20]], align 8
// CHK-C-NEXT:    [[TMP24:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP19]], align 8
// CHK-C-NEXT:    [[TMP25:%.*]] = extractelement <2 x float> [[TMP24]], i64 0
// CHK-C-NEXT:    store float [[TMP25]], float* [[ATMP12]], align 4
// CHK-C-NEXT:    [[TMP26:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP21]] to i64*
// CHK-C-NEXT:    store i64 [[TMP23]], i64* [[TMP26]], align 8
// CHK-C-NEXT:    [[TMP27:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP21]], align 8
// CHK-C-NEXT:    [[TMP28:%.*]] = insertelement <2 x float> [[TMP27]], float [[CONV10]], i64 0
// CHK-C-NEXT:    store <2 x float> [[TMP28]], <2 x float>* [[ATOMIC_TEMP21]], align 8
// CHK-C-NEXT:    [[TMP29:%.*]] = load i64, i64* [[TMP26]], align 8
// CHK-C-NEXT:    [[TMP30:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-C-NEXT:    [[TMP31:%.*]] = cmpxchg i64* [[TMP30]], i64 [[TMP23]], i64 [[TMP29]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP32]] = extractvalue { i64, i1 } [[TMP31]], 0
// CHK-C-NEXT:    [[TMP33:%.*]] = extractvalue { i64, i1 } [[TMP31]], 1
// CHK-C-NEXT:    br i1 [[TMP33]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP22]]
// CHK-C:       atomic_upd_exit:
// CHK-C-NEXT:    store float [[CONV10]], float* [[ATMP12]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT27]]
// CHK-C:       atomic_cmp22:
// CHK-C-NEXT:    [[STORETMP24:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP23]] to i64*
// CHK-C-NEXT:    store i64 [[TMP32]], i64* [[STORETMP24]], align 8
// CHK-C-NEXT:    [[TMP34:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP23]], align 8
// CHK-C-NEXT:    [[TMP35:%.*]] = extractelement <2 x float> [[TMP34]], i64 0
// CHK-C-NEXT:    [[CMP25:%.*]] = fcmp olt float [[TMP35]], [[CONV10]]
// CHK-C-NEXT:    [[FROMBOOL26:%.*]] = zext i1 [[CMP25]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL26]], i8* [[ATMP16]], align 1
// CHK-C-NEXT:    br i1 [[CMP25]], label [[ATOMIC_CONT18]], label [[ATOMIC_EXIT27]]
// CHK-C:       atomic_exit27:
// CHK-C-NEXT:    [[TMP36:%.*]] = load float, float* [[ATMP12]], align 4
// CHK-C-NEXT:    [[TMP37:%.*]] = load i8, i8* [[ATMP16]], align 1
// CHK-C-NEXT:    [[CONV28:%.*]] = fptosi float [[TMP36]] to i32
// CHK-C-NEXT:    store i32 [[CONV28]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP38:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[CONV29:%.*]] = sitofp i32 [[TMP38]] to float
// CHK-C-NEXT:    [[TMP39:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[CONV30:%.*]] = sitofp i32 [[TMP39]] to float
// CHK-C-NEXT:    [[TMP40:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD31:%.*]] = load atomic i64, i64* [[TMP40]] monotonic, align 8
// CHK-C-NEXT:    [[STORETMP34:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP33]] to i64*
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD31]], i64* [[STORETMP34]], align 8
// CHK-C-NEXT:    [[TMP41:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP33]], align 8
// CHK-C-NEXT:    [[TMP42:%.*]] = extractelement <2 x float> [[TMP41]], i64 0
// CHK-C-NEXT:    store float [[TMP42]], float* [[ATMP32]], align 4
// CHK-C-NEXT:    [[STORETMP36:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP35]] to float*
// CHK-C-NEXT:    store float [[TMP42]], float* [[STORETMP36]], align 8
// CHK-C-NEXT:    [[TMP43:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP35]] to i64*
// CHK-C-NEXT:    [[TMP44:%.*]] = load i64, i64* [[TMP43]], align 8
// CHK-C-NEXT:    [[STORETMP38:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP37]] to float*
// CHK-C-NEXT:    store float [[CONV30]], float* [[STORETMP38]], align 8
// CHK-C-NEXT:    [[TMP45:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP37]] to i64*
// CHK-C-NEXT:    [[TMP46:%.*]] = load i64, i64* [[TMP45]], align 8
// CHK-C-NEXT:    [[CMP39:%.*]] = icmp eq i64 [[TMP44]], [[TMP46]]
// CHK-C-NEXT:    [[FROMBOOL41:%.*]] = zext i1 [[CMP39]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL41]], i8* [[ATMP40]], align 1
// CHK-C-NEXT:    br i1 [[CMP39]], label [[ATOMIC_CONT42:%.*]], label [[ATOMIC_EXIT56:%.*]]
// CHK-C:       atomic_cont42:
// CHK-C-NEXT:    [[TMP47:%.*]] = phi i64 [ [[ATOMIC_LOAD31]], [[ATOMIC_EXIT27]] ], [ [[TMP56:%.*]], [[ATOMIC_CMP47:%.*]] ]
// CHK-C-NEXT:    [[STORETMP44:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP43]] to i64*
// CHK-C-NEXT:    store i64 [[TMP47]], i64* [[STORETMP44]], align 8
// CHK-C-NEXT:    [[TMP48:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP43]], align 8
// CHK-C-NEXT:    [[TMP49:%.*]] = extractelement <2 x float> [[TMP48]], i64 0
// CHK-C-NEXT:    store float [[TMP49]], float* [[ATMP32]], align 4
// CHK-C-NEXT:    [[TMP50:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP45]] to i64*
// CHK-C-NEXT:    store i64 [[TMP47]], i64* [[TMP50]], align 8
// CHK-C-NEXT:    [[TMP51:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP45]], align 8
// CHK-C-NEXT:    [[TMP52:%.*]] = insertelement <2 x float> [[TMP51]], float [[CONV29]], i64 0
// CHK-C-NEXT:    store <2 x float> [[TMP52]], <2 x float>* [[ATOMIC_TEMP45]], align 8
// CHK-C-NEXT:    [[TMP53:%.*]] = load i64, i64* [[TMP50]], align 8
// CHK-C-NEXT:    [[TMP54:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-C-NEXT:    [[TMP55:%.*]] = cmpxchg i64* [[TMP54]], i64 [[TMP47]], i64 [[TMP53]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP56]] = extractvalue { i64, i1 } [[TMP55]], 0
// CHK-C-NEXT:    [[TMP57:%.*]] = extractvalue { i64, i1 } [[TMP55]], 1
// CHK-C-NEXT:    br i1 [[TMP57]], label [[ATOMIC_UPD_EXIT46:%.*]], label [[ATOMIC_CMP47]]
// CHK-C:       atomic_upd_exit46:
// CHK-C-NEXT:    store float [[CONV29]], float* [[ATMP32]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT56]]
// CHK-C:       atomic_cmp47:
// CHK-C-NEXT:    [[STORETMP49:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP48]] to i64*
// CHK-C-NEXT:    store i64 [[TMP56]], i64* [[STORETMP49]], align 8
// CHK-C-NEXT:    [[TMP58:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP48]], align 8
// CHK-C-NEXT:    [[TMP59:%.*]] = extractelement <2 x float> [[TMP58]], i64 0
// CHK-C-NEXT:    [[STORETMP51:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP50]] to float*
// CHK-C-NEXT:    store float [[TMP59]], float* [[STORETMP51]], align 8
// CHK-C-NEXT:    [[TMP60:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP50]] to i64*
// CHK-C-NEXT:    [[TMP61:%.*]] = load i64, i64* [[TMP60]], align 8
// CHK-C-NEXT:    [[STORETMP53:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP52]] to float*
// CHK-C-NEXT:    store float [[CONV30]], float* [[STORETMP53]], align 8
// CHK-C-NEXT:    [[TMP62:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP52]] to i64*
// CHK-C-NEXT:    [[TMP63:%.*]] = load i64, i64* [[TMP62]], align 8
// CHK-C-NEXT:    [[CMP54:%.*]] = icmp eq i64 [[TMP61]], [[TMP63]]
// CHK-C-NEXT:    [[FROMBOOL55:%.*]] = zext i1 [[CMP54]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL55]], i8* [[ATMP40]], align 1
// CHK-C-NEXT:    br i1 [[CMP54]], label [[ATOMIC_CONT42]], label [[ATOMIC_EXIT56]]
// CHK-C:       atomic_exit56:
// CHK-C-NEXT:    [[TMP64:%.*]] = load float, float* [[ATMP32]], align 4
// CHK-C-NEXT:    [[TMP65:%.*]] = load i8, i8* [[ATMP40]], align 1
// CHK-C-NEXT:    [[TMP66:%.*]] = trunc i8 [[TMP65]] to i1
// CHK-C-NEXT:    br i1 [[TMP66]], label [[ATOMIC_CAPTURE_CONT:%.*]], label [[ATOMIC_CAPTURE:%.*]]
// CHK-C:       atomic_capture:
// CHK-C-NEXT:    [[CONV57:%.*]] = fptosi float [[TMP64]] to i32
// CHK-C-NEXT:    store i32 [[CONV57]], i32* [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT]]
// CHK-C:       atomic_capture_cont:
// CHK-C-NEXT:    [[TMP67:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[CONV58:%.*]] = sitofp i32 [[TMP67]] to float
// CHK-C-NEXT:    [[TMP68:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[CONV59:%.*]] = sitofp i32 [[TMP68]] to float
// CHK-C-NEXT:    [[TMP69:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD60:%.*]] = load atomic i64, i64* [[TMP69]] monotonic, align 8
// CHK-C-NEXT:    [[STORETMP63:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP62]] to i64*
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD60]], i64* [[STORETMP63]], align 8
// CHK-C-NEXT:    [[TMP70:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP62]], align 8
// CHK-C-NEXT:    [[TMP71:%.*]] = extractelement <2 x float> [[TMP70]], i64 0
// CHK-C-NEXT:    store float [[TMP71]], float* [[ATMP61]], align 4
// CHK-C-NEXT:    [[STORETMP65:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP64]] to float*
// CHK-C-NEXT:    store float [[TMP71]], float* [[STORETMP65]], align 8
// CHK-C-NEXT:    [[TMP72:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP64]] to i64*
// CHK-C-NEXT:    [[TMP73:%.*]] = load i64, i64* [[TMP72]], align 8
// CHK-C-NEXT:    [[STORETMP67:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP66]] to float*
// CHK-C-NEXT:    store float [[CONV59]], float* [[STORETMP67]], align 8
// CHK-C-NEXT:    [[TMP74:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP66]] to i64*
// CHK-C-NEXT:    [[TMP75:%.*]] = load i64, i64* [[TMP74]], align 8
// CHK-C-NEXT:    [[CMP68:%.*]] = icmp eq i64 [[TMP73]], [[TMP75]]
// CHK-C-NEXT:    [[FROMBOOL70:%.*]] = zext i1 [[CMP68]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL70]], i8* [[ATMP69]], align 1
// CHK-C-NEXT:    br i1 [[CMP68]], label [[ATOMIC_CONT71:%.*]], label [[ATOMIC_EXIT84:%.*]]
// CHK-C:       atomic_cont71:
// CHK-C-NEXT:    [[TMP76:%.*]] = phi i64 [ [[ATOMIC_LOAD60]], [[ATOMIC_CAPTURE_CONT]] ], [ [[TMP85:%.*]], [[ATOMIC_CMP75:%.*]] ]
// CHK-C-NEXT:    [[STORETMP73:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP72]] to i64*
// CHK-C-NEXT:    store i64 [[TMP76]], i64* [[STORETMP73]], align 8
// CHK-C-NEXT:    [[TMP77:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP72]], align 8
// CHK-C-NEXT:    [[TMP78:%.*]] = extractelement <2 x float> [[TMP77]], i64 0
// CHK-C-NEXT:    store float [[TMP78]], float* [[ATMP61]], align 4
// CHK-C-NEXT:    [[TMP79:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP74]] to i64*
// CHK-C-NEXT:    store i64 [[TMP76]], i64* [[TMP79]], align 8
// CHK-C-NEXT:    [[TMP80:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP74]], align 8
// CHK-C-NEXT:    [[TMP81:%.*]] = insertelement <2 x float> [[TMP80]], float [[CONV58]], i64 0
// CHK-C-NEXT:    store <2 x float> [[TMP81]], <2 x float>* [[ATOMIC_TEMP74]], align 8
// CHK-C-NEXT:    [[TMP82:%.*]] = load i64, i64* [[TMP79]], align 8
// CHK-C-NEXT:    [[TMP83:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-C-NEXT:    [[TMP84:%.*]] = cmpxchg i64* [[TMP83]], i64 [[TMP76]], i64 [[TMP82]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP85]] = extractvalue { i64, i1 } [[TMP84]], 0
// CHK-C-NEXT:    [[TMP86:%.*]] = extractvalue { i64, i1 } [[TMP84]], 1
// CHK-C-NEXT:    br i1 [[TMP86]], label [[ATOMIC_EXIT84]], label [[ATOMIC_CMP75]]
// CHK-C:       atomic_cmp75:
// CHK-C-NEXT:    [[STORETMP77:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP76]] to i64*
// CHK-C-NEXT:    store i64 [[TMP85]], i64* [[STORETMP77]], align 8
// CHK-C-NEXT:    [[TMP87:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP76]], align 8
// CHK-C-NEXT:    [[TMP88:%.*]] = extractelement <2 x float> [[TMP87]], i64 0
// CHK-C-NEXT:    [[STORETMP79:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP78]] to float*
// CHK-C-NEXT:    store float [[TMP88]], float* [[STORETMP79]], align 8
// CHK-C-NEXT:    [[TMP89:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP78]] to i64*
// CHK-C-NEXT:    [[TMP90:%.*]] = load i64, i64* [[TMP89]], align 8
// CHK-C-NEXT:    [[STORETMP81:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP80]] to float*
// CHK-C-NEXT:    store float [[CONV59]], float* [[STORETMP81]], align 8
// CHK-C-NEXT:    [[TMP91:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP80]] to i64*
// CHK-C-NEXT:    [[TMP92:%.*]] = load i64, i64* [[TMP91]], align 8
// CHK-C-NEXT:    [[CMP82:%.*]] = icmp eq i64 [[TMP90]], [[TMP92]]
// CHK-C-NEXT:    [[FROMBOOL83:%.*]] = zext i1 [[CMP82]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL83]], i8* [[ATMP69]], align 1
// CHK-C-NEXT:    br i1 [[CMP82]], label [[ATOMIC_CONT71]], label [[ATOMIC_EXIT84]]
// CHK-C:       atomic_exit84:
// CHK-C-NEXT:    [[TMP93:%.*]] = load float, float* [[ATMP61]], align 4
// CHK-C-NEXT:    [[TMP94:%.*]] = load i8, i8* [[ATMP69]], align 1
// CHK-C-NEXT:    [[CONV85:%.*]] = zext i8 [[TMP94]] to i16
// CHK-C-NEXT:    store i16 [[CONV85]], i16* [[R]], align 2
// CHK-C-NEXT:    [[TMP95:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[CONV86:%.*]] = sitofp i32 [[TMP95]] to float
// CHK-C-NEXT:    [[TMP96:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[CONV87:%.*]] = sitofp i32 [[TMP96]] to float
// CHK-C-NEXT:    [[TMP97:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD88:%.*]] = load atomic i64, i64* [[TMP97]] monotonic, align 8
// CHK-C-NEXT:    [[STORETMP91:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP90]] to i64*
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD88]], i64* [[STORETMP91]], align 8
// CHK-C-NEXT:    [[TMP98:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP90]], align 8
// CHK-C-NEXT:    [[TMP99:%.*]] = extractelement <2 x float> [[TMP98]], i64 0
// CHK-C-NEXT:    store float [[TMP99]], float* [[ATMP89]], align 4
// CHK-C-NEXT:    [[STORETMP93:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP92]] to float*
// CHK-C-NEXT:    store float [[TMP99]], float* [[STORETMP93]], align 8
// CHK-C-NEXT:    [[TMP100:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP92]] to i64*
// CHK-C-NEXT:    [[TMP101:%.*]] = load i64, i64* [[TMP100]], align 8
// CHK-C-NEXT:    [[STORETMP95:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP94]] to float*
// CHK-C-NEXT:    store float [[CONV87]], float* [[STORETMP95]], align 8
// CHK-C-NEXT:    [[TMP102:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP94]] to i64*
// CHK-C-NEXT:    [[TMP103:%.*]] = load i64, i64* [[TMP102]], align 8
// CHK-C-NEXT:    [[CMP96:%.*]] = icmp eq i64 [[TMP101]], [[TMP103]]
// CHK-C-NEXT:    [[FROMBOOL98:%.*]] = zext i1 [[CMP96]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL98]], i8* [[ATMP97]], align 1
// CHK-C-NEXT:    br i1 [[CMP96]], label [[ATOMIC_CONT99:%.*]], label [[ATOMIC_EXIT112:%.*]]
// CHK-C:       atomic_cont99:
// CHK-C-NEXT:    [[TMP104:%.*]] = phi i64 [ [[ATOMIC_LOAD88]], [[ATOMIC_EXIT84]] ], [ [[TMP113:%.*]], [[ATOMIC_CMP103:%.*]] ]
// CHK-C-NEXT:    [[STORETMP101:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP100]] to i64*
// CHK-C-NEXT:    store i64 [[TMP104]], i64* [[STORETMP101]], align 8
// CHK-C-NEXT:    [[TMP105:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP100]], align 8
// CHK-C-NEXT:    [[TMP106:%.*]] = extractelement <2 x float> [[TMP105]], i64 0
// CHK-C-NEXT:    store float [[TMP106]], float* [[ATMP89]], align 4
// CHK-C-NEXT:    [[TMP107:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP102]] to i64*
// CHK-C-NEXT:    store i64 [[TMP104]], i64* [[TMP107]], align 8
// CHK-C-NEXT:    [[TMP108:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP102]], align 8
// CHK-C-NEXT:    [[TMP109:%.*]] = insertelement <2 x float> [[TMP108]], float [[CONV86]], i64 0
// CHK-C-NEXT:    store <2 x float> [[TMP109]], <2 x float>* [[ATOMIC_TEMP102]], align 8
// CHK-C-NEXT:    [[TMP110:%.*]] = load i64, i64* [[TMP107]], align 8
// CHK-C-NEXT:    [[TMP111:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-C-NEXT:    [[TMP112:%.*]] = cmpxchg i64* [[TMP111]], i64 [[TMP104]], i64 [[TMP110]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP113]] = extractvalue { i64, i1 } [[TMP112]], 0
// CHK-C-NEXT:    [[TMP114:%.*]] = extractvalue { i64, i1 } [[TMP112]], 1
// CHK-C-NEXT:    br i1 [[TMP114]], label [[ATOMIC_EXIT112]], label [[ATOMIC_CMP103]]
// CHK-C:       atomic_cmp103:
// CHK-C-NEXT:    [[STORETMP105:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP104]] to i64*
// CHK-C-NEXT:    store i64 [[TMP113]], i64* [[STORETMP105]], align 8
// CHK-C-NEXT:    [[TMP115:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP104]], align 8
// CHK-C-NEXT:    [[TMP116:%.*]] = extractelement <2 x float> [[TMP115]], i64 0
// CHK-C-NEXT:    [[STORETMP107:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP106]] to float*
// CHK-C-NEXT:    store float [[TMP116]], float* [[STORETMP107]], align 8
// CHK-C-NEXT:    [[TMP117:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP106]] to i64*
// CHK-C-NEXT:    [[TMP118:%.*]] = load i64, i64* [[TMP117]], align 8
// CHK-C-NEXT:    [[STORETMP109:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP108]] to float*
// CHK-C-NEXT:    store float [[CONV87]], float* [[STORETMP109]], align 8
// CHK-C-NEXT:    [[TMP119:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP108]] to i64*
// CHK-C-NEXT:    [[TMP120:%.*]] = load i64, i64* [[TMP119]], align 8
// CHK-C-NEXT:    [[CMP110:%.*]] = icmp eq i64 [[TMP118]], [[TMP120]]
// CHK-C-NEXT:    [[FROMBOOL111:%.*]] = zext i1 [[CMP110]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL111]], i8* [[ATMP97]], align 1
// CHK-C-NEXT:    br i1 [[CMP110]], label [[ATOMIC_CONT99]], label [[ATOMIC_EXIT112]]
// CHK-C:       atomic_exit112:
// CHK-C-NEXT:    [[TMP121:%.*]] = load float, float* [[ATMP89]], align 4
// CHK-C-NEXT:    [[TMP122:%.*]] = load i8, i8* [[ATMP97]], align 1
// CHK-C-NEXT:    [[CONV113:%.*]] = zext i8 [[TMP122]] to i16
// CHK-C-NEXT:    store i16 [[CONV113]], i16* [[R]], align 2
// CHK-C-NEXT:    [[TMP123:%.*]] = trunc i8 [[TMP122]] to i1
// CHK-C-NEXT:    br i1 [[TMP123]], label [[ATOMIC_CAPTURE_CONT116:%.*]], label [[ATOMIC_CAPTURE114:%.*]]
// CHK-C:       atomic_capture114:
// CHK-C-NEXT:    [[CONV115:%.*]] = fptosi float [[TMP121]] to i32
// CHK-C-NEXT:    store i32 [[CONV115]], i32* [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT116]]
// CHK-C:       atomic_capture_cont116:
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z15test_ext_vectorv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[FLOAT2X:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[V:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[R:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca float, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP2:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP4:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP5:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATMP12:%.*]] = alloca float, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP13:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATMP16:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP19:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP21:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP23:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATMP32:%.*]] = alloca float, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP33:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP35:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP37:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATMP40:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP43:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP45:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP48:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP50:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP52:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATMP61:%.*]] = alloca float, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP62:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP64:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP66:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATMP69:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP72:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP74:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP76:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP78:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP80:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATMP89:%.*]] = alloca float, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP90:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP92:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP94:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATMP97:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP100:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP102:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP104:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP106:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP108:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[CONV:%.*]] = sitofp i32 [[TMP0]] to float
// CHK-CXX-NEXT:    [[TMP1:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, i64* [[TMP1]] monotonic, align 8
// CHK-CXX-NEXT:    [[STORETMP:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP]] to i64*
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD]], i64* [[STORETMP]], align 8
// CHK-CXX-NEXT:    [[TMP2:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP]], align 8
// CHK-CXX-NEXT:    [[TMP3:%.*]] = extractelement <2 x float> [[TMP2]], i64 0
// CHK-CXX-NEXT:    store float [[TMP3]], float* [[TMP]], align 4
// CHK-CXX-NEXT:    [[CMP:%.*]] = fcmp olt float [[TMP3]], [[CONV]]
// CHK-CXX-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL]], i8* [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP4:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP13:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    [[STORETMP3:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP2]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP4]], i64* [[STORETMP3]], align 8
// CHK-CXX-NEXT:    [[TMP5:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP2]], align 8
// CHK-CXX-NEXT:    [[TMP6:%.*]] = extractelement <2 x float> [[TMP5]], i64 0
// CHK-CXX-NEXT:    store float [[TMP6]], float* [[TMP]], align 4
// CHK-CXX-NEXT:    [[TMP7:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP4]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP4]], i64* [[TMP7]], align 8
// CHK-CXX-NEXT:    [[TMP8:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP4]], align 8
// CHK-CXX-NEXT:    [[TMP9:%.*]] = insertelement <2 x float> [[TMP8]], float [[CONV]], i64 0
// CHK-CXX-NEXT:    store <2 x float> [[TMP9]], <2 x float>* [[ATOMIC_TEMP4]], align 8
// CHK-CXX-NEXT:    [[TMP10:%.*]] = load i64, i64* [[TMP7]], align 8
// CHK-CXX-NEXT:    [[TMP11:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-CXX-NEXT:    [[TMP12:%.*]] = cmpxchg i64* [[TMP11]], i64 [[TMP4]], i64 [[TMP10]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP13]] = extractvalue { i64, i1 } [[TMP12]], 0
// CHK-CXX-NEXT:    [[TMP14:%.*]] = extractvalue { i64, i1 } [[TMP12]], 1
// CHK-CXX-NEXT:    br i1 [[TMP14]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    [[STORETMP6:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP5]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP13]], i64* [[STORETMP6]], align 8
// CHK-CXX-NEXT:    [[TMP15:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP5]], align 8
// CHK-CXX-NEXT:    [[TMP16:%.*]] = extractelement <2 x float> [[TMP15]], i64 0
// CHK-CXX-NEXT:    [[CMP7:%.*]] = fcmp olt float [[TMP16]], [[CONV]]
// CHK-CXX-NEXT:    [[FROMBOOL8:%.*]] = zext i1 [[CMP7]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL8]], i8* [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP7]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP17:%.*]] = load float, float* [[TMP]], align 4
// CHK-CXX-NEXT:    [[TMP18:%.*]] = load i8, i8* [[ATMP1]], align 1
// CHK-CXX-NEXT:    [[CONV9:%.*]] = fptosi float [[TMP17]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV9]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP19:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[CONV10:%.*]] = sitofp i32 [[TMP19]] to float
// CHK-CXX-NEXT:    [[TMP20:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD11:%.*]] = load atomic i64, i64* [[TMP20]] monotonic, align 8
// CHK-CXX-NEXT:    [[STORETMP14:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP13]] to i64*
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD11]], i64* [[STORETMP14]], align 8
// CHK-CXX-NEXT:    [[TMP21:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP13]], align 8
// CHK-CXX-NEXT:    [[TMP22:%.*]] = extractelement <2 x float> [[TMP21]], i64 0
// CHK-CXX-NEXT:    store float [[TMP22]], float* [[ATMP12]], align 4
// CHK-CXX-NEXT:    [[CMP15:%.*]] = fcmp olt float [[TMP22]], [[CONV10]]
// CHK-CXX-NEXT:    [[FROMBOOL17:%.*]] = zext i1 [[CMP15]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL17]], i8* [[ATMP16]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP15]], label [[ATOMIC_CONT18:%.*]], label [[ATOMIC_EXIT27:%.*]]
// CHK-CXX:       atomic_cont18:
// CHK-CXX-NEXT:    [[TMP23:%.*]] = phi i64 [ [[ATOMIC_LOAD11]], [[ATOMIC_EXIT]] ], [ [[TMP32:%.*]], [[ATOMIC_CMP22:%.*]] ]
// CHK-CXX-NEXT:    [[STORETMP20:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP19]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP23]], i64* [[STORETMP20]], align 8
// CHK-CXX-NEXT:    [[TMP24:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP19]], align 8
// CHK-CXX-NEXT:    [[TMP25:%.*]] = extractelement <2 x float> [[TMP24]], i64 0
// CHK-CXX-NEXT:    store float [[TMP25]], float* [[ATMP12]], align 4
// CHK-CXX-NEXT:    [[TMP26:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP21]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP23]], i64* [[TMP26]], align 8
// CHK-CXX-NEXT:    [[TMP27:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP21]], align 8
// CHK-CXX-NEXT:    [[TMP28:%.*]] = insertelement <2 x float> [[TMP27]], float [[CONV10]], i64 0
// CHK-CXX-NEXT:    store <2 x float> [[TMP28]], <2 x float>* [[ATOMIC_TEMP21]], align 8
// CHK-CXX-NEXT:    [[TMP29:%.*]] = load i64, i64* [[TMP26]], align 8
// CHK-CXX-NEXT:    [[TMP30:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-CXX-NEXT:    [[TMP31:%.*]] = cmpxchg i64* [[TMP30]], i64 [[TMP23]], i64 [[TMP29]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP32]] = extractvalue { i64, i1 } [[TMP31]], 0
// CHK-CXX-NEXT:    [[TMP33:%.*]] = extractvalue { i64, i1 } [[TMP31]], 1
// CHK-CXX-NEXT:    br i1 [[TMP33]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP22]]
// CHK-CXX:       atomic_upd_exit:
// CHK-CXX-NEXT:    store float [[CONV10]], float* [[ATMP12]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT27]]
// CHK-CXX:       atomic_cmp22:
// CHK-CXX-NEXT:    [[STORETMP24:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP23]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP32]], i64* [[STORETMP24]], align 8
// CHK-CXX-NEXT:    [[TMP34:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP23]], align 8
// CHK-CXX-NEXT:    [[TMP35:%.*]] = extractelement <2 x float> [[TMP34]], i64 0
// CHK-CXX-NEXT:    [[CMP25:%.*]] = fcmp olt float [[TMP35]], [[CONV10]]
// CHK-CXX-NEXT:    [[FROMBOOL26:%.*]] = zext i1 [[CMP25]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL26]], i8* [[ATMP16]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP25]], label [[ATOMIC_CONT18]], label [[ATOMIC_EXIT27]]
// CHK-CXX:       atomic_exit27:
// CHK-CXX-NEXT:    [[TMP36:%.*]] = load float, float* [[ATMP12]], align 4
// CHK-CXX-NEXT:    [[TMP37:%.*]] = load i8, i8* [[ATMP16]], align 1
// CHK-CXX-NEXT:    [[CONV28:%.*]] = fptosi float [[TMP36]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV28]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP38:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[CONV29:%.*]] = sitofp i32 [[TMP38]] to float
// CHK-CXX-NEXT:    [[TMP39:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[CONV30:%.*]] = sitofp i32 [[TMP39]] to float
// CHK-CXX-NEXT:    [[TMP40:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD31:%.*]] = load atomic i64, i64* [[TMP40]] monotonic, align 8
// CHK-CXX-NEXT:    [[STORETMP34:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP33]] to i64*
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD31]], i64* [[STORETMP34]], align 8
// CHK-CXX-NEXT:    [[TMP41:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP33]], align 8
// CHK-CXX-NEXT:    [[TMP42:%.*]] = extractelement <2 x float> [[TMP41]], i64 0
// CHK-CXX-NEXT:    store float [[TMP42]], float* [[ATMP32]], align 4
// CHK-CXX-NEXT:    [[STORETMP36:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP35]] to float*
// CHK-CXX-NEXT:    store float [[TMP42]], float* [[STORETMP36]], align 8
// CHK-CXX-NEXT:    [[TMP43:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP35]] to i64*
// CHK-CXX-NEXT:    [[TMP44:%.*]] = load i64, i64* [[TMP43]], align 8
// CHK-CXX-NEXT:    [[STORETMP38:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP37]] to float*
// CHK-CXX-NEXT:    store float [[CONV30]], float* [[STORETMP38]], align 8
// CHK-CXX-NEXT:    [[TMP45:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP37]] to i64*
// CHK-CXX-NEXT:    [[TMP46:%.*]] = load i64, i64* [[TMP45]], align 8
// CHK-CXX-NEXT:    [[CMP39:%.*]] = icmp eq i64 [[TMP44]], [[TMP46]]
// CHK-CXX-NEXT:    [[FROMBOOL41:%.*]] = zext i1 [[CMP39]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL41]], i8* [[ATMP40]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP39]], label [[ATOMIC_CONT42:%.*]], label [[ATOMIC_EXIT56:%.*]]
// CHK-CXX:       atomic_cont42:
// CHK-CXX-NEXT:    [[TMP47:%.*]] = phi i64 [ [[ATOMIC_LOAD31]], [[ATOMIC_EXIT27]] ], [ [[TMP56:%.*]], [[ATOMIC_CMP47:%.*]] ]
// CHK-CXX-NEXT:    [[STORETMP44:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP43]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP47]], i64* [[STORETMP44]], align 8
// CHK-CXX-NEXT:    [[TMP48:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP43]], align 8
// CHK-CXX-NEXT:    [[TMP49:%.*]] = extractelement <2 x float> [[TMP48]], i64 0
// CHK-CXX-NEXT:    store float [[TMP49]], float* [[ATMP32]], align 4
// CHK-CXX-NEXT:    [[TMP50:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP45]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP47]], i64* [[TMP50]], align 8
// CHK-CXX-NEXT:    [[TMP51:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP45]], align 8
// CHK-CXX-NEXT:    [[TMP52:%.*]] = insertelement <2 x float> [[TMP51]], float [[CONV29]], i64 0
// CHK-CXX-NEXT:    store <2 x float> [[TMP52]], <2 x float>* [[ATOMIC_TEMP45]], align 8
// CHK-CXX-NEXT:    [[TMP53:%.*]] = load i64, i64* [[TMP50]], align 8
// CHK-CXX-NEXT:    [[TMP54:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-CXX-NEXT:    [[TMP55:%.*]] = cmpxchg i64* [[TMP54]], i64 [[TMP47]], i64 [[TMP53]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP56]] = extractvalue { i64, i1 } [[TMP55]], 0
// CHK-CXX-NEXT:    [[TMP57:%.*]] = extractvalue { i64, i1 } [[TMP55]], 1
// CHK-CXX-NEXT:    br i1 [[TMP57]], label [[ATOMIC_UPD_EXIT46:%.*]], label [[ATOMIC_CMP47]]
// CHK-CXX:       atomic_upd_exit46:
// CHK-CXX-NEXT:    store float [[CONV29]], float* [[ATMP32]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT56]]
// CHK-CXX:       atomic_cmp47:
// CHK-CXX-NEXT:    [[STORETMP49:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP48]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP56]], i64* [[STORETMP49]], align 8
// CHK-CXX-NEXT:    [[TMP58:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP48]], align 8
// CHK-CXX-NEXT:    [[TMP59:%.*]] = extractelement <2 x float> [[TMP58]], i64 0
// CHK-CXX-NEXT:    [[STORETMP51:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP50]] to float*
// CHK-CXX-NEXT:    store float [[TMP59]], float* [[STORETMP51]], align 8
// CHK-CXX-NEXT:    [[TMP60:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP50]] to i64*
// CHK-CXX-NEXT:    [[TMP61:%.*]] = load i64, i64* [[TMP60]], align 8
// CHK-CXX-NEXT:    [[STORETMP53:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP52]] to float*
// CHK-CXX-NEXT:    store float [[CONV30]], float* [[STORETMP53]], align 8
// CHK-CXX-NEXT:    [[TMP62:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP52]] to i64*
// CHK-CXX-NEXT:    [[TMP63:%.*]] = load i64, i64* [[TMP62]], align 8
// CHK-CXX-NEXT:    [[CMP54:%.*]] = icmp eq i64 [[TMP61]], [[TMP63]]
// CHK-CXX-NEXT:    [[FROMBOOL55:%.*]] = zext i1 [[CMP54]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL55]], i8* [[ATMP40]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP54]], label [[ATOMIC_CONT42]], label [[ATOMIC_EXIT56]]
// CHK-CXX:       atomic_exit56:
// CHK-CXX-NEXT:    [[TMP64:%.*]] = load float, float* [[ATMP32]], align 4
// CHK-CXX-NEXT:    [[TMP65:%.*]] = load i8, i8* [[ATMP40]], align 1
// CHK-CXX-NEXT:    [[TMP66:%.*]] = trunc i8 [[TMP65]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP66]], label [[ATOMIC_CAPTURE_CONT:%.*]], label [[ATOMIC_CAPTURE:%.*]]
// CHK-CXX:       atomic_capture:
// CHK-CXX-NEXT:    [[CONV57:%.*]] = fptosi float [[TMP64]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV57]], i32* [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT]]
// CHK-CXX:       atomic_capture_cont:
// CHK-CXX-NEXT:    [[TMP67:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[CONV58:%.*]] = sitofp i32 [[TMP67]] to float
// CHK-CXX-NEXT:    [[TMP68:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[CONV59:%.*]] = sitofp i32 [[TMP68]] to float
// CHK-CXX-NEXT:    [[TMP69:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD60:%.*]] = load atomic i64, i64* [[TMP69]] monotonic, align 8
// CHK-CXX-NEXT:    [[STORETMP63:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP62]] to i64*
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD60]], i64* [[STORETMP63]], align 8
// CHK-CXX-NEXT:    [[TMP70:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP62]], align 8
// CHK-CXX-NEXT:    [[TMP71:%.*]] = extractelement <2 x float> [[TMP70]], i64 0
// CHK-CXX-NEXT:    store float [[TMP71]], float* [[ATMP61]], align 4
// CHK-CXX-NEXT:    [[STORETMP65:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP64]] to float*
// CHK-CXX-NEXT:    store float [[TMP71]], float* [[STORETMP65]], align 8
// CHK-CXX-NEXT:    [[TMP72:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP64]] to i64*
// CHK-CXX-NEXT:    [[TMP73:%.*]] = load i64, i64* [[TMP72]], align 8
// CHK-CXX-NEXT:    [[STORETMP67:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP66]] to float*
// CHK-CXX-NEXT:    store float [[CONV59]], float* [[STORETMP67]], align 8
// CHK-CXX-NEXT:    [[TMP74:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP66]] to i64*
// CHK-CXX-NEXT:    [[TMP75:%.*]] = load i64, i64* [[TMP74]], align 8
// CHK-CXX-NEXT:    [[CMP68:%.*]] = icmp eq i64 [[TMP73]], [[TMP75]]
// CHK-CXX-NEXT:    [[FROMBOOL70:%.*]] = zext i1 [[CMP68]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL70]], i8* [[ATMP69]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP68]], label [[ATOMIC_CONT71:%.*]], label [[ATOMIC_EXIT84:%.*]]
// CHK-CXX:       atomic_cont71:
// CHK-CXX-NEXT:    [[TMP76:%.*]] = phi i64 [ [[ATOMIC_LOAD60]], [[ATOMIC_CAPTURE_CONT]] ], [ [[TMP85:%.*]], [[ATOMIC_CMP75:%.*]] ]
// CHK-CXX-NEXT:    [[STORETMP73:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP72]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP76]], i64* [[STORETMP73]], align 8
// CHK-CXX-NEXT:    [[TMP77:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP72]], align 8
// CHK-CXX-NEXT:    [[TMP78:%.*]] = extractelement <2 x float> [[TMP77]], i64 0
// CHK-CXX-NEXT:    store float [[TMP78]], float* [[ATMP61]], align 4
// CHK-CXX-NEXT:    [[TMP79:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP74]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP76]], i64* [[TMP79]], align 8
// CHK-CXX-NEXT:    [[TMP80:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP74]], align 8
// CHK-CXX-NEXT:    [[TMP81:%.*]] = insertelement <2 x float> [[TMP80]], float [[CONV58]], i64 0
// CHK-CXX-NEXT:    store <2 x float> [[TMP81]], <2 x float>* [[ATOMIC_TEMP74]], align 8
// CHK-CXX-NEXT:    [[TMP82:%.*]] = load i64, i64* [[TMP79]], align 8
// CHK-CXX-NEXT:    [[TMP83:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-CXX-NEXT:    [[TMP84:%.*]] = cmpxchg i64* [[TMP83]], i64 [[TMP76]], i64 [[TMP82]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP85]] = extractvalue { i64, i1 } [[TMP84]], 0
// CHK-CXX-NEXT:    [[TMP86:%.*]] = extractvalue { i64, i1 } [[TMP84]], 1
// CHK-CXX-NEXT:    br i1 [[TMP86]], label [[ATOMIC_EXIT84]], label [[ATOMIC_CMP75]]
// CHK-CXX:       atomic_cmp75:
// CHK-CXX-NEXT:    [[STORETMP77:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP76]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP85]], i64* [[STORETMP77]], align 8
// CHK-CXX-NEXT:    [[TMP87:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP76]], align 8
// CHK-CXX-NEXT:    [[TMP88:%.*]] = extractelement <2 x float> [[TMP87]], i64 0
// CHK-CXX-NEXT:    [[STORETMP79:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP78]] to float*
// CHK-CXX-NEXT:    store float [[TMP88]], float* [[STORETMP79]], align 8
// CHK-CXX-NEXT:    [[TMP89:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP78]] to i64*
// CHK-CXX-NEXT:    [[TMP90:%.*]] = load i64, i64* [[TMP89]], align 8
// CHK-CXX-NEXT:    [[STORETMP81:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP80]] to float*
// CHK-CXX-NEXT:    store float [[CONV59]], float* [[STORETMP81]], align 8
// CHK-CXX-NEXT:    [[TMP91:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP80]] to i64*
// CHK-CXX-NEXT:    [[TMP92:%.*]] = load i64, i64* [[TMP91]], align 8
// CHK-CXX-NEXT:    [[CMP82:%.*]] = icmp eq i64 [[TMP90]], [[TMP92]]
// CHK-CXX-NEXT:    [[FROMBOOL83:%.*]] = zext i1 [[CMP82]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL83]], i8* [[ATMP69]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP82]], label [[ATOMIC_CONT71]], label [[ATOMIC_EXIT84]]
// CHK-CXX:       atomic_exit84:
// CHK-CXX-NEXT:    [[TMP93:%.*]] = load float, float* [[ATMP61]], align 4
// CHK-CXX-NEXT:    [[TMP94:%.*]] = load i8, i8* [[ATMP69]], align 1
// CHK-CXX-NEXT:    [[CONV85:%.*]] = zext i8 [[TMP94]] to i16
// CHK-CXX-NEXT:    store i16 [[CONV85]], i16* [[R]], align 2
// CHK-CXX-NEXT:    [[TMP95:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[CONV86:%.*]] = sitofp i32 [[TMP95]] to float
// CHK-CXX-NEXT:    [[TMP96:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[CONV87:%.*]] = sitofp i32 [[TMP96]] to float
// CHK-CXX-NEXT:    [[TMP97:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD88:%.*]] = load atomic i64, i64* [[TMP97]] monotonic, align 8
// CHK-CXX-NEXT:    [[STORETMP91:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP90]] to i64*
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD88]], i64* [[STORETMP91]], align 8
// CHK-CXX-NEXT:    [[TMP98:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP90]], align 8
// CHK-CXX-NEXT:    [[TMP99:%.*]] = extractelement <2 x float> [[TMP98]], i64 0
// CHK-CXX-NEXT:    store float [[TMP99]], float* [[ATMP89]], align 4
// CHK-CXX-NEXT:    [[STORETMP93:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP92]] to float*
// CHK-CXX-NEXT:    store float [[TMP99]], float* [[STORETMP93]], align 8
// CHK-CXX-NEXT:    [[TMP100:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP92]] to i64*
// CHK-CXX-NEXT:    [[TMP101:%.*]] = load i64, i64* [[TMP100]], align 8
// CHK-CXX-NEXT:    [[STORETMP95:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP94]] to float*
// CHK-CXX-NEXT:    store float [[CONV87]], float* [[STORETMP95]], align 8
// CHK-CXX-NEXT:    [[TMP102:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP94]] to i64*
// CHK-CXX-NEXT:    [[TMP103:%.*]] = load i64, i64* [[TMP102]], align 8
// CHK-CXX-NEXT:    [[CMP96:%.*]] = icmp eq i64 [[TMP101]], [[TMP103]]
// CHK-CXX-NEXT:    [[FROMBOOL98:%.*]] = zext i1 [[CMP96]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL98]], i8* [[ATMP97]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP96]], label [[ATOMIC_CONT99:%.*]], label [[ATOMIC_EXIT112:%.*]]
// CHK-CXX:       atomic_cont99:
// CHK-CXX-NEXT:    [[TMP104:%.*]] = phi i64 [ [[ATOMIC_LOAD88]], [[ATOMIC_EXIT84]] ], [ [[TMP113:%.*]], [[ATOMIC_CMP103:%.*]] ]
// CHK-CXX-NEXT:    [[STORETMP101:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP100]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP104]], i64* [[STORETMP101]], align 8
// CHK-CXX-NEXT:    [[TMP105:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP100]], align 8
// CHK-CXX-NEXT:    [[TMP106:%.*]] = extractelement <2 x float> [[TMP105]], i64 0
// CHK-CXX-NEXT:    store float [[TMP106]], float* [[ATMP89]], align 4
// CHK-CXX-NEXT:    [[TMP107:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP102]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP104]], i64* [[TMP107]], align 8
// CHK-CXX-NEXT:    [[TMP108:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP102]], align 8
// CHK-CXX-NEXT:    [[TMP109:%.*]] = insertelement <2 x float> [[TMP108]], float [[CONV86]], i64 0
// CHK-CXX-NEXT:    store <2 x float> [[TMP109]], <2 x float>* [[ATOMIC_TEMP102]], align 8
// CHK-CXX-NEXT:    [[TMP110:%.*]] = load i64, i64* [[TMP107]], align 8
// CHK-CXX-NEXT:    [[TMP111:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-CXX-NEXT:    [[TMP112:%.*]] = cmpxchg i64* [[TMP111]], i64 [[TMP104]], i64 [[TMP110]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP113]] = extractvalue { i64, i1 } [[TMP112]], 0
// CHK-CXX-NEXT:    [[TMP114:%.*]] = extractvalue { i64, i1 } [[TMP112]], 1
// CHK-CXX-NEXT:    br i1 [[TMP114]], label [[ATOMIC_EXIT112]], label [[ATOMIC_CMP103]]
// CHK-CXX:       atomic_cmp103:
// CHK-CXX-NEXT:    [[STORETMP105:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP104]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP113]], i64* [[STORETMP105]], align 8
// CHK-CXX-NEXT:    [[TMP115:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP104]], align 8
// CHK-CXX-NEXT:    [[TMP116:%.*]] = extractelement <2 x float> [[TMP115]], i64 0
// CHK-CXX-NEXT:    [[STORETMP107:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP106]] to float*
// CHK-CXX-NEXT:    store float [[TMP116]], float* [[STORETMP107]], align 8
// CHK-CXX-NEXT:    [[TMP117:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP106]] to i64*
// CHK-CXX-NEXT:    [[TMP118:%.*]] = load i64, i64* [[TMP117]], align 8
// CHK-CXX-NEXT:    [[STORETMP109:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP108]] to float*
// CHK-CXX-NEXT:    store float [[CONV87]], float* [[STORETMP109]], align 8
// CHK-CXX-NEXT:    [[TMP119:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP108]] to i64*
// CHK-CXX-NEXT:    [[TMP120:%.*]] = load i64, i64* [[TMP119]], align 8
// CHK-CXX-NEXT:    [[CMP110:%.*]] = icmp eq i64 [[TMP118]], [[TMP120]]
// CHK-CXX-NEXT:    [[FROMBOOL111:%.*]] = zext i1 [[CMP110]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL111]], i8* [[ATMP97]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP110]], label [[ATOMIC_CONT99]], label [[ATOMIC_EXIT112]]
// CHK-CXX:       atomic_exit112:
// CHK-CXX-NEXT:    [[TMP121:%.*]] = load float, float* [[ATMP89]], align 4
// CHK-CXX-NEXT:    [[TMP122:%.*]] = load i8, i8* [[ATMP97]], align 1
// CHK-CXX-NEXT:    [[CONV113:%.*]] = zext i8 [[TMP122]] to i16
// CHK-CXX-NEXT:    store i16 [[CONV113]], i16* [[R]], align 2
// CHK-CXX-NEXT:    [[TMP123:%.*]] = trunc i8 [[TMP122]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP123]], label [[ATOMIC_CAPTURE_CONT116:%.*]], label [[ATOMIC_CAPTURE114:%.*]]
// CHK-CXX:       atomic_capture114:
// CHK-CXX-NEXT:    [[CONV115:%.*]] = fptosi float [[TMP121]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV115]], i32* [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT116]]
// CHK-CXX:       atomic_capture_cont116:
// CHK-CXX-NEXT:    ret void
//
void test_ext_vector() {
  typedef float float2 __attribute__((ext_vector_type(2)));
  float2 float2x;

  int expr, d, e, v;
  short r;

  #pragma omp atomic compare capture
  { v = float2x.x; if (float2x.x < expr) { float2x.x = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (float2x.x < expr) { float2x.x = expr; } v = float2x.x; } // MAX

  #pragma omp atomic compare capture
  if (float2x.x == e) { float2x.x = d; } else { v = float2x.x; }

  #pragma omp atomic compare capture
  { r = float2x.x == e; if(r) { float2x.x = d; } }

  #pragma omp atomic compare capture
  { r = float2x.x == e; if(r) { float2x.x = d; } else { v = float2x.x; } }
}

#endif // HEADER
// end INTEL_COLLAB
