// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --prefix-filecheck-ir-name a
// RUN: %clang_cc1 -verify -triple x86_64-unknown-linux-gnu -fopenmp -x c \
// RUN:  -fopenmp-late-outline -fopenmp-version=51 -emit-llvm %s -o - \
// RUN:  | FileCheck %s --check-prefix CHK-C

// RUN: %clang_cc1 -verify -triple x86_64-unknown-linux-gnu -fopenmp -x c \
// RUN: -fopenmp-late-outline -fopenmp-version=51 -emit-pch %s -o %t.pch

// RUN: %clang_cc1 -verify -triple x86_64-unknown-linux-gnu -fopenmp  -x c \
// RUN:  -fopenmp-late-outline -fopenmp-version=51 -emit-llvm %s -o - \
// RUN:  -include-pch %t.pch | FileCheck %s --check-prefix CHK-C
//
// RUN: %clang_cc1 -verify -triple x86_64-unknown-linux-gnu -fopenmp \
// RUN:  -fopenmp-late-outline -fopenmp-version=51 -emit-llvm %s -o - \
// RUN:  | FileCheck %s --check-prefix CHK-CXX
//
// RUN: %clang_cc1 -verify -triple x86_64-unknown-linux-gnu -fopenmp \
// RUN: -fopenmp-late-outline -fopenmp-version=51 -emit-pch %s -o %t.pch

// RUN: %clang_cc1 -verify -triple x86_64-unknown-linux-gnu -fopenmp \
// RUN:  -fopenmp-late-outline -fopenmp-version=51 -emit-llvm %s -o - \
// RUN:  -include-pch %t.pch | FileCheck %s --check-prefix CHK-CXX
//
// expected-no-diagnostics
#ifndef HEADER
#define HEADER

// CHK-C-LABEL: @test_int(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[X:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[V:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[TMP:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP3:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP6:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP11:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP14:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP19:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP22:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP28:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP31:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP36:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP39:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP45:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP48:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP53:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP56:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP62:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP65:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP70:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP73:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[TMP0:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD]], i32* [[TMP]], align 4
// CHK-C-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP1:%.*]] = phi i32 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP1]], i32* [[TMP]], align 4
// CHK-C-NEXT:    store i32 [[TMP0]], i32* [[ATOMIC_TEMP]], align 4
// CHK-C-NEXT:    [[TMP2:%.*]] = load i32, i32* [[ATOMIC_TEMP]], align 4
// CHK-C-NEXT:    [[TMP3:%.*]] = cmpxchg i32* [[X]], i32 [[TMP1]], i32 [[TMP2]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP4]] = extractvalue { i32, i1 } [[TMP3]], 0
// CHK-C-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i1 } [[TMP3]], 1
// CHK-C-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    [[CMP1:%.*]] = icmp sgt i32 [[TMP4]], [[TMP0]]
// CHK-C-NEXT:    br i1 [[CMP1]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP6:%.*]] = load i32, i32* [[TMP]], align 4
// CHK-C-NEXT:    store i32 [[TMP6]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP7:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD2:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD2]], i32* [[ATMP3]], align 4
// CHK-C-NEXT:    [[CMP4:%.*]] = icmp sgt i32 [[ATOMIC_LOAD2]], [[TMP7]]
// CHK-C-NEXT:    br i1 [[CMP4]], label [[ATOMIC_CONT5:%.*]], label [[ATOMIC_EXIT9:%.*]]
// CHK-C:       atomic_cont5:
// CHK-C-NEXT:    [[TMP8:%.*]] = phi i32 [ [[ATOMIC_LOAD2]], [[ATOMIC_EXIT]] ], [ [[TMP11:%.*]], [[ATOMIC_CMP7:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP8]], i32* [[ATMP3]], align 4
// CHK-C-NEXT:    store i32 [[TMP7]], i32* [[ATOMIC_TEMP6]], align 4
// CHK-C-NEXT:    [[TMP9:%.*]] = load i32, i32* [[ATOMIC_TEMP6]], align 4
// CHK-C-NEXT:    [[TMP10:%.*]] = cmpxchg i32* [[X]], i32 [[TMP8]], i32 [[TMP9]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP11]] = extractvalue { i32, i1 } [[TMP10]], 0
// CHK-C-NEXT:    [[TMP12:%.*]] = extractvalue { i32, i1 } [[TMP10]], 1
// CHK-C-NEXT:    br i1 [[TMP12]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP7]]
// CHK-C:       atomic_upd_exit:
// CHK-C-NEXT:    store i32 [[TMP7]], i32* [[ATMP3]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT9]]
// CHK-C:       atomic_cmp7:
// CHK-C-NEXT:    [[CMP8:%.*]] = icmp sgt i32 [[TMP11]], [[TMP7]]
// CHK-C-NEXT:    br i1 [[CMP8]], label [[ATOMIC_CONT5]], label [[ATOMIC_EXIT9]]
// CHK-C:       atomic_exit9:
// CHK-C-NEXT:    [[TMP13:%.*]] = load i32, i32* [[ATMP3]], align 4
// CHK-C-NEXT:    store i32 [[TMP13]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP14:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD10:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD10]], i32* [[ATMP11]], align 4
// CHK-C-NEXT:    [[CMP12:%.*]] = icmp slt i32 [[ATOMIC_LOAD10]], [[TMP14]]
// CHK-C-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT13:%.*]], label [[ATOMIC_EXIT17:%.*]]
// CHK-C:       atomic_cont13:
// CHK-C-NEXT:    [[TMP15:%.*]] = phi i32 [ [[ATOMIC_LOAD10]], [[ATOMIC_EXIT9]] ], [ [[TMP18:%.*]], [[ATOMIC_CMP15:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP15]], i32* [[ATMP11]], align 4
// CHK-C-NEXT:    store i32 [[TMP14]], i32* [[ATOMIC_TEMP14]], align 4
// CHK-C-NEXT:    [[TMP16:%.*]] = load i32, i32* [[ATOMIC_TEMP14]], align 4
// CHK-C-NEXT:    [[TMP17:%.*]] = cmpxchg i32* [[X]], i32 [[TMP15]], i32 [[TMP16]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP18]] = extractvalue { i32, i1 } [[TMP17]], 0
// CHK-C-NEXT:    [[TMP19:%.*]] = extractvalue { i32, i1 } [[TMP17]], 1
// CHK-C-NEXT:    br i1 [[TMP19]], label [[ATOMIC_EXIT17]], label [[ATOMIC_CMP15]]
// CHK-C:       atomic_cmp15:
// CHK-C-NEXT:    [[CMP16:%.*]] = icmp slt i32 [[TMP18]], [[TMP14]]
// CHK-C-NEXT:    br i1 [[CMP16]], label [[ATOMIC_CONT13]], label [[ATOMIC_EXIT17]]
// CHK-C:       atomic_exit17:
// CHK-C-NEXT:    [[TMP20:%.*]] = load i32, i32* [[ATMP11]], align 4
// CHK-C-NEXT:    store i32 [[TMP20]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP21:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD18:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD18]], i32* [[ATMP19]], align 4
// CHK-C-NEXT:    [[CMP20:%.*]] = icmp slt i32 [[ATOMIC_LOAD18]], [[TMP21]]
// CHK-C-NEXT:    br i1 [[CMP20]], label [[ATOMIC_CONT21:%.*]], label [[ATOMIC_EXIT26:%.*]]
// CHK-C:       atomic_cont21:
// CHK-C-NEXT:    [[TMP22:%.*]] = phi i32 [ [[ATOMIC_LOAD18]], [[ATOMIC_EXIT17]] ], [ [[TMP25:%.*]], [[ATOMIC_CMP24:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP22]], i32* [[ATMP19]], align 4
// CHK-C-NEXT:    store i32 [[TMP21]], i32* [[ATOMIC_TEMP22]], align 4
// CHK-C-NEXT:    [[TMP23:%.*]] = load i32, i32* [[ATOMIC_TEMP22]], align 4
// CHK-C-NEXT:    [[TMP24:%.*]] = cmpxchg i32* [[X]], i32 [[TMP22]], i32 [[TMP23]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP25]] = extractvalue { i32, i1 } [[TMP24]], 0
// CHK-C-NEXT:    [[TMP26:%.*]] = extractvalue { i32, i1 } [[TMP24]], 1
// CHK-C-NEXT:    br i1 [[TMP26]], label [[ATOMIC_UPD_EXIT23:%.*]], label [[ATOMIC_CMP24]]
// CHK-C:       atomic_upd_exit23:
// CHK-C-NEXT:    store i32 [[TMP21]], i32* [[ATMP19]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT26]]
// CHK-C:       atomic_cmp24:
// CHK-C-NEXT:    [[CMP25:%.*]] = icmp slt i32 [[TMP25]], [[TMP21]]
// CHK-C-NEXT:    br i1 [[CMP25]], label [[ATOMIC_CONT21]], label [[ATOMIC_EXIT26]]
// CHK-C:       atomic_exit26:
// CHK-C-NEXT:    [[TMP27:%.*]] = load i32, i32* [[ATMP19]], align 4
// CHK-C-NEXT:    store i32 [[TMP27]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP28:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD27:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD27]], i32* [[ATMP28]], align 4
// CHK-C-NEXT:    [[CMP29:%.*]] = icmp slt i32 [[ATOMIC_LOAD27]], [[TMP28]]
// CHK-C-NEXT:    br i1 [[CMP29]], label [[ATOMIC_CONT30:%.*]], label [[ATOMIC_EXIT34:%.*]]
// CHK-C:       atomic_cont30:
// CHK-C-NEXT:    [[TMP29:%.*]] = phi i32 [ [[ATOMIC_LOAD27]], [[ATOMIC_EXIT26]] ], [ [[TMP32:%.*]], [[ATOMIC_CMP32:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP29]], i32* [[ATMP28]], align 4
// CHK-C-NEXT:    store i32 [[TMP28]], i32* [[ATOMIC_TEMP31]], align 4
// CHK-C-NEXT:    [[TMP30:%.*]] = load i32, i32* [[ATOMIC_TEMP31]], align 4
// CHK-C-NEXT:    [[TMP31:%.*]] = cmpxchg i32* [[X]], i32 [[TMP29]], i32 [[TMP30]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP32]] = extractvalue { i32, i1 } [[TMP31]], 0
// CHK-C-NEXT:    [[TMP33:%.*]] = extractvalue { i32, i1 } [[TMP31]], 1
// CHK-C-NEXT:    br i1 [[TMP33]], label [[ATOMIC_EXIT34]], label [[ATOMIC_CMP32]]
// CHK-C:       atomic_cmp32:
// CHK-C-NEXT:    [[CMP33:%.*]] = icmp slt i32 [[TMP32]], [[TMP28]]
// CHK-C-NEXT:    br i1 [[CMP33]], label [[ATOMIC_CONT30]], label [[ATOMIC_EXIT34]]
// CHK-C:       atomic_exit34:
// CHK-C-NEXT:    [[TMP34:%.*]] = load i32, i32* [[ATMP28]], align 4
// CHK-C-NEXT:    store i32 [[TMP34]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP35:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD35:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD35]], i32* [[ATMP36]], align 4
// CHK-C-NEXT:    [[CMP37:%.*]] = icmp slt i32 [[ATOMIC_LOAD35]], [[TMP35]]
// CHK-C-NEXT:    br i1 [[CMP37]], label [[ATOMIC_CONT38:%.*]], label [[ATOMIC_EXIT43:%.*]]
// CHK-C:       atomic_cont38:
// CHK-C-NEXT:    [[TMP36:%.*]] = phi i32 [ [[ATOMIC_LOAD35]], [[ATOMIC_EXIT34]] ], [ [[TMP39:%.*]], [[ATOMIC_CMP41:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP36]], i32* [[ATMP36]], align 4
// CHK-C-NEXT:    store i32 [[TMP35]], i32* [[ATOMIC_TEMP39]], align 4
// CHK-C-NEXT:    [[TMP37:%.*]] = load i32, i32* [[ATOMIC_TEMP39]], align 4
// CHK-C-NEXT:    [[TMP38:%.*]] = cmpxchg i32* [[X]], i32 [[TMP36]], i32 [[TMP37]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP39]] = extractvalue { i32, i1 } [[TMP38]], 0
// CHK-C-NEXT:    [[TMP40:%.*]] = extractvalue { i32, i1 } [[TMP38]], 1
// CHK-C-NEXT:    br i1 [[TMP40]], label [[ATOMIC_UPD_EXIT40:%.*]], label [[ATOMIC_CMP41]]
// CHK-C:       atomic_upd_exit40:
// CHK-C-NEXT:    store i32 [[TMP35]], i32* [[ATMP36]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT43]]
// CHK-C:       atomic_cmp41:
// CHK-C-NEXT:    [[CMP42:%.*]] = icmp slt i32 [[TMP39]], [[TMP35]]
// CHK-C-NEXT:    br i1 [[CMP42]], label [[ATOMIC_CONT38]], label [[ATOMIC_EXIT43]]
// CHK-C:       atomic_exit43:
// CHK-C-NEXT:    [[TMP41:%.*]] = load i32, i32* [[ATMP36]], align 4
// CHK-C-NEXT:    store i32 [[TMP41]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP42:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD44:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD44]], i32* [[ATMP45]], align 4
// CHK-C-NEXT:    [[CMP46:%.*]] = icmp sgt i32 [[ATOMIC_LOAD44]], [[TMP42]]
// CHK-C-NEXT:    br i1 [[CMP46]], label [[ATOMIC_CONT47:%.*]], label [[ATOMIC_EXIT51:%.*]]
// CHK-C:       atomic_cont47:
// CHK-C-NEXT:    [[TMP43:%.*]] = phi i32 [ [[ATOMIC_LOAD44]], [[ATOMIC_EXIT43]] ], [ [[TMP46:%.*]], [[ATOMIC_CMP49:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP43]], i32* [[ATMP45]], align 4
// CHK-C-NEXT:    store i32 [[TMP42]], i32* [[ATOMIC_TEMP48]], align 4
// CHK-C-NEXT:    [[TMP44:%.*]] = load i32, i32* [[ATOMIC_TEMP48]], align 4
// CHK-C-NEXT:    [[TMP45:%.*]] = cmpxchg i32* [[X]], i32 [[TMP43]], i32 [[TMP44]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP46]] = extractvalue { i32, i1 } [[TMP45]], 0
// CHK-C-NEXT:    [[TMP47:%.*]] = extractvalue { i32, i1 } [[TMP45]], 1
// CHK-C-NEXT:    br i1 [[TMP47]], label [[ATOMIC_EXIT51]], label [[ATOMIC_CMP49]]
// CHK-C:       atomic_cmp49:
// CHK-C-NEXT:    [[CMP50:%.*]] = icmp sgt i32 [[TMP46]], [[TMP42]]
// CHK-C-NEXT:    br i1 [[CMP50]], label [[ATOMIC_CONT47]], label [[ATOMIC_EXIT51]]
// CHK-C:       atomic_exit51:
// CHK-C-NEXT:    [[TMP48:%.*]] = load i32, i32* [[ATMP45]], align 4
// CHK-C-NEXT:    store i32 [[TMP48]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP49:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD52:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD52]], i32* [[ATMP53]], align 4
// CHK-C-NEXT:    [[CMP54:%.*]] = icmp sgt i32 [[ATOMIC_LOAD52]], [[TMP49]]
// CHK-C-NEXT:    br i1 [[CMP54]], label [[ATOMIC_CONT55:%.*]], label [[ATOMIC_EXIT60:%.*]]
// CHK-C:       atomic_cont55:
// CHK-C-NEXT:    [[TMP50:%.*]] = phi i32 [ [[ATOMIC_LOAD52]], [[ATOMIC_EXIT51]] ], [ [[TMP53:%.*]], [[ATOMIC_CMP58:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP50]], i32* [[ATMP53]], align 4
// CHK-C-NEXT:    store i32 [[TMP49]], i32* [[ATOMIC_TEMP56]], align 4
// CHK-C-NEXT:    [[TMP51:%.*]] = load i32, i32* [[ATOMIC_TEMP56]], align 4
// CHK-C-NEXT:    [[TMP52:%.*]] = cmpxchg i32* [[X]], i32 [[TMP50]], i32 [[TMP51]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP53]] = extractvalue { i32, i1 } [[TMP52]], 0
// CHK-C-NEXT:    [[TMP54:%.*]] = extractvalue { i32, i1 } [[TMP52]], 1
// CHK-C-NEXT:    br i1 [[TMP54]], label [[ATOMIC_UPD_EXIT57:%.*]], label [[ATOMIC_CMP58]]
// CHK-C:       atomic_upd_exit57:
// CHK-C-NEXT:    store i32 [[TMP49]], i32* [[ATMP53]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT60]]
// CHK-C:       atomic_cmp58:
// CHK-C-NEXT:    [[CMP59:%.*]] = icmp sgt i32 [[TMP53]], [[TMP49]]
// CHK-C-NEXT:    br i1 [[CMP59]], label [[ATOMIC_CONT55]], label [[ATOMIC_EXIT60]]
// CHK-C:       atomic_exit60:
// CHK-C-NEXT:    [[TMP55:%.*]] = load i32, i32* [[ATMP53]], align 4
// CHK-C-NEXT:    store i32 [[TMP55]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP56:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP57:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD61:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD61]], i32* [[ATMP62]], align 4
// CHK-C-NEXT:    [[CMP63:%.*]] = icmp eq i32 [[ATOMIC_LOAD61]], [[TMP57]]
// CHK-C-NEXT:    br i1 [[CMP63]], label [[ATOMIC_CONT64:%.*]], label [[ATOMIC_EXIT68:%.*]]
// CHK-C:       atomic_cont64:
// CHK-C-NEXT:    [[TMP58:%.*]] = phi i32 [ [[ATOMIC_LOAD61]], [[ATOMIC_EXIT60]] ], [ [[TMP61:%.*]], [[ATOMIC_CMP66:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP58]], i32* [[ATMP62]], align 4
// CHK-C-NEXT:    store i32 [[TMP56]], i32* [[ATOMIC_TEMP65]], align 4
// CHK-C-NEXT:    [[TMP59:%.*]] = load i32, i32* [[ATOMIC_TEMP65]], align 4
// CHK-C-NEXT:    [[TMP60:%.*]] = cmpxchg i32* [[X]], i32 [[TMP58]], i32 [[TMP59]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP61]] = extractvalue { i32, i1 } [[TMP60]], 0
// CHK-C-NEXT:    [[TMP62:%.*]] = extractvalue { i32, i1 } [[TMP60]], 1
// CHK-C-NEXT:    br i1 [[TMP62]], label [[ATOMIC_EXIT68]], label [[ATOMIC_CMP66]]
// CHK-C:       atomic_cmp66:
// CHK-C-NEXT:    [[CMP67:%.*]] = icmp eq i32 [[TMP61]], [[TMP57]]
// CHK-C-NEXT:    br i1 [[CMP67]], label [[ATOMIC_CONT64]], label [[ATOMIC_EXIT68]]
// CHK-C:       atomic_exit68:
// CHK-C-NEXT:    [[TMP63:%.*]] = load i32, i32* [[ATMP62]], align 4
// CHK-C-NEXT:    store i32 [[TMP63]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP64:%.*]] = load i32, i32* [[D]], align 4
// CHK-C-NEXT:    [[TMP65:%.*]] = load i32, i32* [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD69:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD69]], i32* [[ATMP70]], align 4
// CHK-C-NEXT:    [[CMP71:%.*]] = icmp eq i32 [[ATOMIC_LOAD69]], [[TMP65]]
// CHK-C-NEXT:    br i1 [[CMP71]], label [[ATOMIC_CONT72:%.*]], label [[ATOMIC_EXIT77:%.*]]
// CHK-C:       atomic_cont72:
// CHK-C-NEXT:    [[TMP66:%.*]] = phi i32 [ [[ATOMIC_LOAD69]], [[ATOMIC_EXIT68]] ], [ [[TMP69:%.*]], [[ATOMIC_CMP75:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP66]], i32* [[ATMP70]], align 4
// CHK-C-NEXT:    store i32 [[TMP64]], i32* [[ATOMIC_TEMP73]], align 4
// CHK-C-NEXT:    [[TMP67:%.*]] = load i32, i32* [[ATOMIC_TEMP73]], align 4
// CHK-C-NEXT:    [[TMP68:%.*]] = cmpxchg i32* [[X]], i32 [[TMP66]], i32 [[TMP67]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP69]] = extractvalue { i32, i1 } [[TMP68]], 0
// CHK-C-NEXT:    [[TMP70:%.*]] = extractvalue { i32, i1 } [[TMP68]], 1
// CHK-C-NEXT:    br i1 [[TMP70]], label [[ATOMIC_UPD_EXIT74:%.*]], label [[ATOMIC_CMP75]]
// CHK-C:       atomic_upd_exit74:
// CHK-C-NEXT:    store i32 [[TMP64]], i32* [[ATMP70]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT77]]
// CHK-C:       atomic_cmp75:
// CHK-C-NEXT:    [[CMP76:%.*]] = icmp eq i32 [[TMP69]], [[TMP65]]
// CHK-C-NEXT:    br i1 [[CMP76]], label [[ATOMIC_CONT72]], label [[ATOMIC_EXIT77]]
// CHK-C:       atomic_exit77:
// CHK-C-NEXT:    [[TMP71:%.*]] = load i32, i32* [[ATMP70]], align 4
// CHK-C-NEXT:    store i32 [[TMP71]], i32* [[V]], align 4
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z8test_intv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[X:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[V:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP3:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP6:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP11:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP14:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP19:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP22:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP28:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP31:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP36:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP39:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP45:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP48:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP53:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP56:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP62:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP65:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP70:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP73:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD]], i32* [[TMP]], align 4
// CHK-CXX-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP1:%.*]] = phi i32 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP1]], i32* [[TMP]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP0]], i32* [[ATOMIC_TEMP]], align 4
// CHK-CXX-NEXT:    [[TMP2:%.*]] = load i32, i32* [[ATOMIC_TEMP]], align 4
// CHK-CXX-NEXT:    [[TMP3:%.*]] = cmpxchg i32* [[X]], i32 [[TMP1]], i32 [[TMP2]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP4]] = extractvalue { i32, i1 } [[TMP3]], 0
// CHK-CXX-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i1 } [[TMP3]], 1
// CHK-CXX-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    [[CMP1:%.*]] = icmp sgt i32 [[TMP4]], [[TMP0]]
// CHK-CXX-NEXT:    br i1 [[CMP1]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP6:%.*]] = load i32, i32* [[TMP]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP6]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP7:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD2:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD2]], i32* [[ATMP3]], align 4
// CHK-CXX-NEXT:    [[CMP4:%.*]] = icmp sgt i32 [[ATOMIC_LOAD2]], [[TMP7]]
// CHK-CXX-NEXT:    br i1 [[CMP4]], label [[ATOMIC_CONT5:%.*]], label [[ATOMIC_EXIT9:%.*]]
// CHK-CXX:       atomic_cont5:
// CHK-CXX-NEXT:    [[TMP8:%.*]] = phi i32 [ [[ATOMIC_LOAD2]], [[ATOMIC_EXIT]] ], [ [[TMP11:%.*]], [[ATOMIC_CMP7:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP8]], i32* [[ATMP3]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP7]], i32* [[ATOMIC_TEMP6]], align 4
// CHK-CXX-NEXT:    [[TMP9:%.*]] = load i32, i32* [[ATOMIC_TEMP6]], align 4
// CHK-CXX-NEXT:    [[TMP10:%.*]] = cmpxchg i32* [[X]], i32 [[TMP8]], i32 [[TMP9]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP11]] = extractvalue { i32, i1 } [[TMP10]], 0
// CHK-CXX-NEXT:    [[TMP12:%.*]] = extractvalue { i32, i1 } [[TMP10]], 1
// CHK-CXX-NEXT:    br i1 [[TMP12]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP7]]
// CHK-CXX:       atomic_upd_exit:
// CHK-CXX-NEXT:    store i32 [[TMP7]], i32* [[ATMP3]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT9]]
// CHK-CXX:       atomic_cmp7:
// CHK-CXX-NEXT:    [[CMP8:%.*]] = icmp sgt i32 [[TMP11]], [[TMP7]]
// CHK-CXX-NEXT:    br i1 [[CMP8]], label [[ATOMIC_CONT5]], label [[ATOMIC_EXIT9]]
// CHK-CXX:       atomic_exit9:
// CHK-CXX-NEXT:    [[TMP13:%.*]] = load i32, i32* [[ATMP3]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP13]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP14:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD10:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD10]], i32* [[ATMP11]], align 4
// CHK-CXX-NEXT:    [[CMP12:%.*]] = icmp slt i32 [[ATOMIC_LOAD10]], [[TMP14]]
// CHK-CXX-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT13:%.*]], label [[ATOMIC_EXIT17:%.*]]
// CHK-CXX:       atomic_cont13:
// CHK-CXX-NEXT:    [[TMP15:%.*]] = phi i32 [ [[ATOMIC_LOAD10]], [[ATOMIC_EXIT9]] ], [ [[TMP18:%.*]], [[ATOMIC_CMP15:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP15]], i32* [[ATMP11]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP14]], i32* [[ATOMIC_TEMP14]], align 4
// CHK-CXX-NEXT:    [[TMP16:%.*]] = load i32, i32* [[ATOMIC_TEMP14]], align 4
// CHK-CXX-NEXT:    [[TMP17:%.*]] = cmpxchg i32* [[X]], i32 [[TMP15]], i32 [[TMP16]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP18]] = extractvalue { i32, i1 } [[TMP17]], 0
// CHK-CXX-NEXT:    [[TMP19:%.*]] = extractvalue { i32, i1 } [[TMP17]], 1
// CHK-CXX-NEXT:    br i1 [[TMP19]], label [[ATOMIC_EXIT17]], label [[ATOMIC_CMP15]]
// CHK-CXX:       atomic_cmp15:
// CHK-CXX-NEXT:    [[CMP16:%.*]] = icmp slt i32 [[TMP18]], [[TMP14]]
// CHK-CXX-NEXT:    br i1 [[CMP16]], label [[ATOMIC_CONT13]], label [[ATOMIC_EXIT17]]
// CHK-CXX:       atomic_exit17:
// CHK-CXX-NEXT:    [[TMP20:%.*]] = load i32, i32* [[ATMP11]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP20]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP21:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD18:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD18]], i32* [[ATMP19]], align 4
// CHK-CXX-NEXT:    [[CMP20:%.*]] = icmp slt i32 [[ATOMIC_LOAD18]], [[TMP21]]
// CHK-CXX-NEXT:    br i1 [[CMP20]], label [[ATOMIC_CONT21:%.*]], label [[ATOMIC_EXIT26:%.*]]
// CHK-CXX:       atomic_cont21:
// CHK-CXX-NEXT:    [[TMP22:%.*]] = phi i32 [ [[ATOMIC_LOAD18]], [[ATOMIC_EXIT17]] ], [ [[TMP25:%.*]], [[ATOMIC_CMP24:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP22]], i32* [[ATMP19]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP21]], i32* [[ATOMIC_TEMP22]], align 4
// CHK-CXX-NEXT:    [[TMP23:%.*]] = load i32, i32* [[ATOMIC_TEMP22]], align 4
// CHK-CXX-NEXT:    [[TMP24:%.*]] = cmpxchg i32* [[X]], i32 [[TMP22]], i32 [[TMP23]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP25]] = extractvalue { i32, i1 } [[TMP24]], 0
// CHK-CXX-NEXT:    [[TMP26:%.*]] = extractvalue { i32, i1 } [[TMP24]], 1
// CHK-CXX-NEXT:    br i1 [[TMP26]], label [[ATOMIC_UPD_EXIT23:%.*]], label [[ATOMIC_CMP24]]
// CHK-CXX:       atomic_upd_exit23:
// CHK-CXX-NEXT:    store i32 [[TMP21]], i32* [[ATMP19]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT26]]
// CHK-CXX:       atomic_cmp24:
// CHK-CXX-NEXT:    [[CMP25:%.*]] = icmp slt i32 [[TMP25]], [[TMP21]]
// CHK-CXX-NEXT:    br i1 [[CMP25]], label [[ATOMIC_CONT21]], label [[ATOMIC_EXIT26]]
// CHK-CXX:       atomic_exit26:
// CHK-CXX-NEXT:    [[TMP27:%.*]] = load i32, i32* [[ATMP19]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP27]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP28:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD27:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD27]], i32* [[ATMP28]], align 4
// CHK-CXX-NEXT:    [[CMP29:%.*]] = icmp slt i32 [[ATOMIC_LOAD27]], [[TMP28]]
// CHK-CXX-NEXT:    br i1 [[CMP29]], label [[ATOMIC_CONT30:%.*]], label [[ATOMIC_EXIT34:%.*]]
// CHK-CXX:       atomic_cont30:
// CHK-CXX-NEXT:    [[TMP29:%.*]] = phi i32 [ [[ATOMIC_LOAD27]], [[ATOMIC_EXIT26]] ], [ [[TMP32:%.*]], [[ATOMIC_CMP32:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP29]], i32* [[ATMP28]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP28]], i32* [[ATOMIC_TEMP31]], align 4
// CHK-CXX-NEXT:    [[TMP30:%.*]] = load i32, i32* [[ATOMIC_TEMP31]], align 4
// CHK-CXX-NEXT:    [[TMP31:%.*]] = cmpxchg i32* [[X]], i32 [[TMP29]], i32 [[TMP30]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP32]] = extractvalue { i32, i1 } [[TMP31]], 0
// CHK-CXX-NEXT:    [[TMP33:%.*]] = extractvalue { i32, i1 } [[TMP31]], 1
// CHK-CXX-NEXT:    br i1 [[TMP33]], label [[ATOMIC_EXIT34]], label [[ATOMIC_CMP32]]
// CHK-CXX:       atomic_cmp32:
// CHK-CXX-NEXT:    [[CMP33:%.*]] = icmp slt i32 [[TMP32]], [[TMP28]]
// CHK-CXX-NEXT:    br i1 [[CMP33]], label [[ATOMIC_CONT30]], label [[ATOMIC_EXIT34]]
// CHK-CXX:       atomic_exit34:
// CHK-CXX-NEXT:    [[TMP34:%.*]] = load i32, i32* [[ATMP28]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP34]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP35:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD35:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD35]], i32* [[ATMP36]], align 4
// CHK-CXX-NEXT:    [[CMP37:%.*]] = icmp slt i32 [[ATOMIC_LOAD35]], [[TMP35]]
// CHK-CXX-NEXT:    br i1 [[CMP37]], label [[ATOMIC_CONT38:%.*]], label [[ATOMIC_EXIT43:%.*]]
// CHK-CXX:       atomic_cont38:
// CHK-CXX-NEXT:    [[TMP36:%.*]] = phi i32 [ [[ATOMIC_LOAD35]], [[ATOMIC_EXIT34]] ], [ [[TMP39:%.*]], [[ATOMIC_CMP41:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP36]], i32* [[ATMP36]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP35]], i32* [[ATOMIC_TEMP39]], align 4
// CHK-CXX-NEXT:    [[TMP37:%.*]] = load i32, i32* [[ATOMIC_TEMP39]], align 4
// CHK-CXX-NEXT:    [[TMP38:%.*]] = cmpxchg i32* [[X]], i32 [[TMP36]], i32 [[TMP37]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP39]] = extractvalue { i32, i1 } [[TMP38]], 0
// CHK-CXX-NEXT:    [[TMP40:%.*]] = extractvalue { i32, i1 } [[TMP38]], 1
// CHK-CXX-NEXT:    br i1 [[TMP40]], label [[ATOMIC_UPD_EXIT40:%.*]], label [[ATOMIC_CMP41]]
// CHK-CXX:       atomic_upd_exit40:
// CHK-CXX-NEXT:    store i32 [[TMP35]], i32* [[ATMP36]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT43]]
// CHK-CXX:       atomic_cmp41:
// CHK-CXX-NEXT:    [[CMP42:%.*]] = icmp slt i32 [[TMP39]], [[TMP35]]
// CHK-CXX-NEXT:    br i1 [[CMP42]], label [[ATOMIC_CONT38]], label [[ATOMIC_EXIT43]]
// CHK-CXX:       atomic_exit43:
// CHK-CXX-NEXT:    [[TMP41:%.*]] = load i32, i32* [[ATMP36]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP41]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP42:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD44:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD44]], i32* [[ATMP45]], align 4
// CHK-CXX-NEXT:    [[CMP46:%.*]] = icmp sgt i32 [[ATOMIC_LOAD44]], [[TMP42]]
// CHK-CXX-NEXT:    br i1 [[CMP46]], label [[ATOMIC_CONT47:%.*]], label [[ATOMIC_EXIT51:%.*]]
// CHK-CXX:       atomic_cont47:
// CHK-CXX-NEXT:    [[TMP43:%.*]] = phi i32 [ [[ATOMIC_LOAD44]], [[ATOMIC_EXIT43]] ], [ [[TMP46:%.*]], [[ATOMIC_CMP49:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP43]], i32* [[ATMP45]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP42]], i32* [[ATOMIC_TEMP48]], align 4
// CHK-CXX-NEXT:    [[TMP44:%.*]] = load i32, i32* [[ATOMIC_TEMP48]], align 4
// CHK-CXX-NEXT:    [[TMP45:%.*]] = cmpxchg i32* [[X]], i32 [[TMP43]], i32 [[TMP44]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP46]] = extractvalue { i32, i1 } [[TMP45]], 0
// CHK-CXX-NEXT:    [[TMP47:%.*]] = extractvalue { i32, i1 } [[TMP45]], 1
// CHK-CXX-NEXT:    br i1 [[TMP47]], label [[ATOMIC_EXIT51]], label [[ATOMIC_CMP49]]
// CHK-CXX:       atomic_cmp49:
// CHK-CXX-NEXT:    [[CMP50:%.*]] = icmp sgt i32 [[TMP46]], [[TMP42]]
// CHK-CXX-NEXT:    br i1 [[CMP50]], label [[ATOMIC_CONT47]], label [[ATOMIC_EXIT51]]
// CHK-CXX:       atomic_exit51:
// CHK-CXX-NEXT:    [[TMP48:%.*]] = load i32, i32* [[ATMP45]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP48]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP49:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD52:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD52]], i32* [[ATMP53]], align 4
// CHK-CXX-NEXT:    [[CMP54:%.*]] = icmp sgt i32 [[ATOMIC_LOAD52]], [[TMP49]]
// CHK-CXX-NEXT:    br i1 [[CMP54]], label [[ATOMIC_CONT55:%.*]], label [[ATOMIC_EXIT60:%.*]]
// CHK-CXX:       atomic_cont55:
// CHK-CXX-NEXT:    [[TMP50:%.*]] = phi i32 [ [[ATOMIC_LOAD52]], [[ATOMIC_EXIT51]] ], [ [[TMP53:%.*]], [[ATOMIC_CMP58:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP50]], i32* [[ATMP53]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP49]], i32* [[ATOMIC_TEMP56]], align 4
// CHK-CXX-NEXT:    [[TMP51:%.*]] = load i32, i32* [[ATOMIC_TEMP56]], align 4
// CHK-CXX-NEXT:    [[TMP52:%.*]] = cmpxchg i32* [[X]], i32 [[TMP50]], i32 [[TMP51]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP53]] = extractvalue { i32, i1 } [[TMP52]], 0
// CHK-CXX-NEXT:    [[TMP54:%.*]] = extractvalue { i32, i1 } [[TMP52]], 1
// CHK-CXX-NEXT:    br i1 [[TMP54]], label [[ATOMIC_UPD_EXIT57:%.*]], label [[ATOMIC_CMP58]]
// CHK-CXX:       atomic_upd_exit57:
// CHK-CXX-NEXT:    store i32 [[TMP49]], i32* [[ATMP53]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT60]]
// CHK-CXX:       atomic_cmp58:
// CHK-CXX-NEXT:    [[CMP59:%.*]] = icmp sgt i32 [[TMP53]], [[TMP49]]
// CHK-CXX-NEXT:    br i1 [[CMP59]], label [[ATOMIC_CONT55]], label [[ATOMIC_EXIT60]]
// CHK-CXX:       atomic_exit60:
// CHK-CXX-NEXT:    [[TMP55:%.*]] = load i32, i32* [[ATMP53]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP55]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP56:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP57:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD61:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD61]], i32* [[ATMP62]], align 4
// CHK-CXX-NEXT:    [[CMP63:%.*]] = icmp eq i32 [[ATOMIC_LOAD61]], [[TMP57]]
// CHK-CXX-NEXT:    br i1 [[CMP63]], label [[ATOMIC_CONT64:%.*]], label [[ATOMIC_EXIT68:%.*]]
// CHK-CXX:       atomic_cont64:
// CHK-CXX-NEXT:    [[TMP58:%.*]] = phi i32 [ [[ATOMIC_LOAD61]], [[ATOMIC_EXIT60]] ], [ [[TMP61:%.*]], [[ATOMIC_CMP66:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP58]], i32* [[ATMP62]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP56]], i32* [[ATOMIC_TEMP65]], align 4
// CHK-CXX-NEXT:    [[TMP59:%.*]] = load i32, i32* [[ATOMIC_TEMP65]], align 4
// CHK-CXX-NEXT:    [[TMP60:%.*]] = cmpxchg i32* [[X]], i32 [[TMP58]], i32 [[TMP59]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP61]] = extractvalue { i32, i1 } [[TMP60]], 0
// CHK-CXX-NEXT:    [[TMP62:%.*]] = extractvalue { i32, i1 } [[TMP60]], 1
// CHK-CXX-NEXT:    br i1 [[TMP62]], label [[ATOMIC_EXIT68]], label [[ATOMIC_CMP66]]
// CHK-CXX:       atomic_cmp66:
// CHK-CXX-NEXT:    [[CMP67:%.*]] = icmp eq i32 [[TMP61]], [[TMP57]]
// CHK-CXX-NEXT:    br i1 [[CMP67]], label [[ATOMIC_CONT64]], label [[ATOMIC_EXIT68]]
// CHK-CXX:       atomic_exit68:
// CHK-CXX-NEXT:    [[TMP63:%.*]] = load i32, i32* [[ATMP62]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP63]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP64:%.*]] = load i32, i32* [[D]], align 4
// CHK-CXX-NEXT:    [[TMP65:%.*]] = load i32, i32* [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD69:%.*]] = load atomic i32, i32* [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD69]], i32* [[ATMP70]], align 4
// CHK-CXX-NEXT:    [[CMP71:%.*]] = icmp eq i32 [[ATOMIC_LOAD69]], [[TMP65]]
// CHK-CXX-NEXT:    br i1 [[CMP71]], label [[ATOMIC_CONT72:%.*]], label [[ATOMIC_EXIT77:%.*]]
// CHK-CXX:       atomic_cont72:
// CHK-CXX-NEXT:    [[TMP66:%.*]] = phi i32 [ [[ATOMIC_LOAD69]], [[ATOMIC_EXIT68]] ], [ [[TMP69:%.*]], [[ATOMIC_CMP75:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP66]], i32* [[ATMP70]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP64]], i32* [[ATOMIC_TEMP73]], align 4
// CHK-CXX-NEXT:    [[TMP67:%.*]] = load i32, i32* [[ATOMIC_TEMP73]], align 4
// CHK-CXX-NEXT:    [[TMP68:%.*]] = cmpxchg i32* [[X]], i32 [[TMP66]], i32 [[TMP67]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP69]] = extractvalue { i32, i1 } [[TMP68]], 0
// CHK-CXX-NEXT:    [[TMP70:%.*]] = extractvalue { i32, i1 } [[TMP68]], 1
// CHK-CXX-NEXT:    br i1 [[TMP70]], label [[ATOMIC_UPD_EXIT74:%.*]], label [[ATOMIC_CMP75]]
// CHK-CXX:       atomic_upd_exit74:
// CHK-CXX-NEXT:    store i32 [[TMP64]], i32* [[ATMP70]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT77]]
// CHK-CXX:       atomic_cmp75:
// CHK-CXX-NEXT:    [[CMP76:%.*]] = icmp eq i32 [[TMP69]], [[TMP65]]
// CHK-CXX-NEXT:    br i1 [[CMP76]], label [[ATOMIC_CONT72]], label [[ATOMIC_EXIT77]]
// CHK-CXX:       atomic_exit77:
// CHK-CXX-NEXT:    [[TMP71:%.*]] = load i32, i32* [[ATMP70]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP71]], i32* [[V]], align 4
// CHK-CXX-NEXT:    ret void
//
void test_int() {
  // One of each form with 'int'.
  int x, expr, d, e, v;

  #pragma omp atomic compare capture
  { v = x; if (expr < x) { x = expr; } } // MIN

  #pragma omp atomic compare capture
  { if (expr < x) { x = expr; } v = x; } // MIN

  #pragma omp atomic compare capture
  { v = x; if (expr > x) { x = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (expr > x) { x = expr; } v = x; } // MAX

  #pragma omp atomic compare capture
  { v = x; if (x < expr) { x = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (x < expr) { x = expr; } v = x; } // MAX

  #pragma omp atomic compare capture
  { v = x; if (x > expr) { x = expr; } } // MIN

  #pragma omp atomic compare capture
  { if (x > expr) { x = expr; } v = x; } // MIN

  #pragma omp atomic compare capture
  { v = x; if (x == e) { x = d; } }

  #pragma omp atomic compare capture
  { if (x == e) { x = d; } v = x; }
}

// CHK-C-LABEL: @test_unsigned_short(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[X:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[D:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[E:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[V:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[TMP:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP3:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATOMIC_TEMP6:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP11:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATOMIC_TEMP14:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP19:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATOMIC_TEMP22:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP28:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATOMIC_TEMP31:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP36:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATOMIC_TEMP39:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP45:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATOMIC_TEMP48:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP53:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATOMIC_TEMP56:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP62:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATOMIC_TEMP65:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP70:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATOMIC_TEMP73:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[TMP0:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD]], i16* [[TMP]], align 2
// CHK-C-NEXT:    [[CMP:%.*]] = icmp ugt i16 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP1:%.*]] = phi i16 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP1]], i16* [[TMP]], align 2
// CHK-C-NEXT:    store i16 [[TMP0]], i16* [[ATOMIC_TEMP]], align 2
// CHK-C-NEXT:    [[TMP2:%.*]] = load i16, i16* [[ATOMIC_TEMP]], align 2
// CHK-C-NEXT:    [[TMP3:%.*]] = cmpxchg i16* [[X]], i16 [[TMP1]], i16 [[TMP2]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP4]] = extractvalue { i16, i1 } [[TMP3]], 0
// CHK-C-NEXT:    [[TMP5:%.*]] = extractvalue { i16, i1 } [[TMP3]], 1
// CHK-C-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    [[CMP1:%.*]] = icmp ugt i16 [[TMP4]], [[TMP0]]
// CHK-C-NEXT:    br i1 [[CMP1]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP6:%.*]] = load i16, i16* [[TMP]], align 2
// CHK-C-NEXT:    store i16 [[TMP6]], i16* [[V]], align 2
// CHK-C-NEXT:    [[TMP7:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD2:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD2]], i16* [[ATMP3]], align 2
// CHK-C-NEXT:    [[CMP4:%.*]] = icmp ugt i16 [[ATOMIC_LOAD2]], [[TMP7]]
// CHK-C-NEXT:    br i1 [[CMP4]], label [[ATOMIC_CONT5:%.*]], label [[ATOMIC_EXIT9:%.*]]
// CHK-C:       atomic_cont5:
// CHK-C-NEXT:    [[TMP8:%.*]] = phi i16 [ [[ATOMIC_LOAD2]], [[ATOMIC_EXIT]] ], [ [[TMP11:%.*]], [[ATOMIC_CMP7:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP8]], i16* [[ATMP3]], align 2
// CHK-C-NEXT:    store i16 [[TMP7]], i16* [[ATOMIC_TEMP6]], align 2
// CHK-C-NEXT:    [[TMP9:%.*]] = load i16, i16* [[ATOMIC_TEMP6]], align 2
// CHK-C-NEXT:    [[TMP10:%.*]] = cmpxchg i16* [[X]], i16 [[TMP8]], i16 [[TMP9]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP11]] = extractvalue { i16, i1 } [[TMP10]], 0
// CHK-C-NEXT:    [[TMP12:%.*]] = extractvalue { i16, i1 } [[TMP10]], 1
// CHK-C-NEXT:    br i1 [[TMP12]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP7]]
// CHK-C:       atomic_upd_exit:
// CHK-C-NEXT:    store i16 [[TMP7]], i16* [[ATMP3]], align 2
// CHK-C-NEXT:    br label [[ATOMIC_EXIT9]]
// CHK-C:       atomic_cmp7:
// CHK-C-NEXT:    [[CMP8:%.*]] = icmp ugt i16 [[TMP11]], [[TMP7]]
// CHK-C-NEXT:    br i1 [[CMP8]], label [[ATOMIC_CONT5]], label [[ATOMIC_EXIT9]]
// CHK-C:       atomic_exit9:
// CHK-C-NEXT:    [[TMP13:%.*]] = load i16, i16* [[ATMP3]], align 2
// CHK-C-NEXT:    store i16 [[TMP13]], i16* [[V]], align 2
// CHK-C-NEXT:    [[TMP14:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD10:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD10]], i16* [[ATMP11]], align 2
// CHK-C-NEXT:    [[CMP12:%.*]] = icmp ult i16 [[ATOMIC_LOAD10]], [[TMP14]]
// CHK-C-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT13:%.*]], label [[ATOMIC_EXIT17:%.*]]
// CHK-C:       atomic_cont13:
// CHK-C-NEXT:    [[TMP15:%.*]] = phi i16 [ [[ATOMIC_LOAD10]], [[ATOMIC_EXIT9]] ], [ [[TMP18:%.*]], [[ATOMIC_CMP15:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP15]], i16* [[ATMP11]], align 2
// CHK-C-NEXT:    store i16 [[TMP14]], i16* [[ATOMIC_TEMP14]], align 2
// CHK-C-NEXT:    [[TMP16:%.*]] = load i16, i16* [[ATOMIC_TEMP14]], align 2
// CHK-C-NEXT:    [[TMP17:%.*]] = cmpxchg i16* [[X]], i16 [[TMP15]], i16 [[TMP16]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP18]] = extractvalue { i16, i1 } [[TMP17]], 0
// CHK-C-NEXT:    [[TMP19:%.*]] = extractvalue { i16, i1 } [[TMP17]], 1
// CHK-C-NEXT:    br i1 [[TMP19]], label [[ATOMIC_EXIT17]], label [[ATOMIC_CMP15]]
// CHK-C:       atomic_cmp15:
// CHK-C-NEXT:    [[CMP16:%.*]] = icmp ult i16 [[TMP18]], [[TMP14]]
// CHK-C-NEXT:    br i1 [[CMP16]], label [[ATOMIC_CONT13]], label [[ATOMIC_EXIT17]]
// CHK-C:       atomic_exit17:
// CHK-C-NEXT:    [[TMP20:%.*]] = load i16, i16* [[ATMP11]], align 2
// CHK-C-NEXT:    store i16 [[TMP20]], i16* [[V]], align 2
// CHK-C-NEXT:    [[TMP21:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD18:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD18]], i16* [[ATMP19]], align 2
// CHK-C-NEXT:    [[CMP20:%.*]] = icmp ult i16 [[ATOMIC_LOAD18]], [[TMP21]]
// CHK-C-NEXT:    br i1 [[CMP20]], label [[ATOMIC_CONT21:%.*]], label [[ATOMIC_EXIT26:%.*]]
// CHK-C:       atomic_cont21:
// CHK-C-NEXT:    [[TMP22:%.*]] = phi i16 [ [[ATOMIC_LOAD18]], [[ATOMIC_EXIT17]] ], [ [[TMP25:%.*]], [[ATOMIC_CMP24:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP22]], i16* [[ATMP19]], align 2
// CHK-C-NEXT:    store i16 [[TMP21]], i16* [[ATOMIC_TEMP22]], align 2
// CHK-C-NEXT:    [[TMP23:%.*]] = load i16, i16* [[ATOMIC_TEMP22]], align 2
// CHK-C-NEXT:    [[TMP24:%.*]] = cmpxchg i16* [[X]], i16 [[TMP22]], i16 [[TMP23]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP25]] = extractvalue { i16, i1 } [[TMP24]], 0
// CHK-C-NEXT:    [[TMP26:%.*]] = extractvalue { i16, i1 } [[TMP24]], 1
// CHK-C-NEXT:    br i1 [[TMP26]], label [[ATOMIC_UPD_EXIT23:%.*]], label [[ATOMIC_CMP24]]
// CHK-C:       atomic_upd_exit23:
// CHK-C-NEXT:    store i16 [[TMP21]], i16* [[ATMP19]], align 2
// CHK-C-NEXT:    br label [[ATOMIC_EXIT26]]
// CHK-C:       atomic_cmp24:
// CHK-C-NEXT:    [[CMP25:%.*]] = icmp ult i16 [[TMP25]], [[TMP21]]
// CHK-C-NEXT:    br i1 [[CMP25]], label [[ATOMIC_CONT21]], label [[ATOMIC_EXIT26]]
// CHK-C:       atomic_exit26:
// CHK-C-NEXT:    [[TMP27:%.*]] = load i16, i16* [[ATMP19]], align 2
// CHK-C-NEXT:    store i16 [[TMP27]], i16* [[V]], align 2
// CHK-C-NEXT:    [[TMP28:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD27:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD27]], i16* [[ATMP28]], align 2
// CHK-C-NEXT:    [[CMP29:%.*]] = icmp ult i16 [[ATOMIC_LOAD27]], [[TMP28]]
// CHK-C-NEXT:    br i1 [[CMP29]], label [[ATOMIC_CONT30:%.*]], label [[ATOMIC_EXIT34:%.*]]
// CHK-C:       atomic_cont30:
// CHK-C-NEXT:    [[TMP29:%.*]] = phi i16 [ [[ATOMIC_LOAD27]], [[ATOMIC_EXIT26]] ], [ [[TMP32:%.*]], [[ATOMIC_CMP32:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP29]], i16* [[ATMP28]], align 2
// CHK-C-NEXT:    store i16 [[TMP28]], i16* [[ATOMIC_TEMP31]], align 2
// CHK-C-NEXT:    [[TMP30:%.*]] = load i16, i16* [[ATOMIC_TEMP31]], align 2
// CHK-C-NEXT:    [[TMP31:%.*]] = cmpxchg i16* [[X]], i16 [[TMP29]], i16 [[TMP30]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP32]] = extractvalue { i16, i1 } [[TMP31]], 0
// CHK-C-NEXT:    [[TMP33:%.*]] = extractvalue { i16, i1 } [[TMP31]], 1
// CHK-C-NEXT:    br i1 [[TMP33]], label [[ATOMIC_EXIT34]], label [[ATOMIC_CMP32]]
// CHK-C:       atomic_cmp32:
// CHK-C-NEXT:    [[CMP33:%.*]] = icmp ult i16 [[TMP32]], [[TMP28]]
// CHK-C-NEXT:    br i1 [[CMP33]], label [[ATOMIC_CONT30]], label [[ATOMIC_EXIT34]]
// CHK-C:       atomic_exit34:
// CHK-C-NEXT:    [[TMP34:%.*]] = load i16, i16* [[ATMP28]], align 2
// CHK-C-NEXT:    store i16 [[TMP34]], i16* [[V]], align 2
// CHK-C-NEXT:    [[TMP35:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD35:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD35]], i16* [[ATMP36]], align 2
// CHK-C-NEXT:    [[CMP37:%.*]] = icmp ult i16 [[ATOMIC_LOAD35]], [[TMP35]]
// CHK-C-NEXT:    br i1 [[CMP37]], label [[ATOMIC_CONT38:%.*]], label [[ATOMIC_EXIT43:%.*]]
// CHK-C:       atomic_cont38:
// CHK-C-NEXT:    [[TMP36:%.*]] = phi i16 [ [[ATOMIC_LOAD35]], [[ATOMIC_EXIT34]] ], [ [[TMP39:%.*]], [[ATOMIC_CMP41:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP36]], i16* [[ATMP36]], align 2
// CHK-C-NEXT:    store i16 [[TMP35]], i16* [[ATOMIC_TEMP39]], align 2
// CHK-C-NEXT:    [[TMP37:%.*]] = load i16, i16* [[ATOMIC_TEMP39]], align 2
// CHK-C-NEXT:    [[TMP38:%.*]] = cmpxchg i16* [[X]], i16 [[TMP36]], i16 [[TMP37]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP39]] = extractvalue { i16, i1 } [[TMP38]], 0
// CHK-C-NEXT:    [[TMP40:%.*]] = extractvalue { i16, i1 } [[TMP38]], 1
// CHK-C-NEXT:    br i1 [[TMP40]], label [[ATOMIC_UPD_EXIT40:%.*]], label [[ATOMIC_CMP41]]
// CHK-C:       atomic_upd_exit40:
// CHK-C-NEXT:    store i16 [[TMP35]], i16* [[ATMP36]], align 2
// CHK-C-NEXT:    br label [[ATOMIC_EXIT43]]
// CHK-C:       atomic_cmp41:
// CHK-C-NEXT:    [[CMP42:%.*]] = icmp ult i16 [[TMP39]], [[TMP35]]
// CHK-C-NEXT:    br i1 [[CMP42]], label [[ATOMIC_CONT38]], label [[ATOMIC_EXIT43]]
// CHK-C:       atomic_exit43:
// CHK-C-NEXT:    [[TMP41:%.*]] = load i16, i16* [[ATMP36]], align 2
// CHK-C-NEXT:    store i16 [[TMP41]], i16* [[V]], align 2
// CHK-C-NEXT:    [[TMP42:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD44:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD44]], i16* [[ATMP45]], align 2
// CHK-C-NEXT:    [[CMP46:%.*]] = icmp ugt i16 [[ATOMIC_LOAD44]], [[TMP42]]
// CHK-C-NEXT:    br i1 [[CMP46]], label [[ATOMIC_CONT47:%.*]], label [[ATOMIC_EXIT51:%.*]]
// CHK-C:       atomic_cont47:
// CHK-C-NEXT:    [[TMP43:%.*]] = phi i16 [ [[ATOMIC_LOAD44]], [[ATOMIC_EXIT43]] ], [ [[TMP46:%.*]], [[ATOMIC_CMP49:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP43]], i16* [[ATMP45]], align 2
// CHK-C-NEXT:    store i16 [[TMP42]], i16* [[ATOMIC_TEMP48]], align 2
// CHK-C-NEXT:    [[TMP44:%.*]] = load i16, i16* [[ATOMIC_TEMP48]], align 2
// CHK-C-NEXT:    [[TMP45:%.*]] = cmpxchg i16* [[X]], i16 [[TMP43]], i16 [[TMP44]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP46]] = extractvalue { i16, i1 } [[TMP45]], 0
// CHK-C-NEXT:    [[TMP47:%.*]] = extractvalue { i16, i1 } [[TMP45]], 1
// CHK-C-NEXT:    br i1 [[TMP47]], label [[ATOMIC_EXIT51]], label [[ATOMIC_CMP49]]
// CHK-C:       atomic_cmp49:
// CHK-C-NEXT:    [[CMP50:%.*]] = icmp ugt i16 [[TMP46]], [[TMP42]]
// CHK-C-NEXT:    br i1 [[CMP50]], label [[ATOMIC_CONT47]], label [[ATOMIC_EXIT51]]
// CHK-C:       atomic_exit51:
// CHK-C-NEXT:    [[TMP48:%.*]] = load i16, i16* [[ATMP45]], align 2
// CHK-C-NEXT:    store i16 [[TMP48]], i16* [[V]], align 2
// CHK-C-NEXT:    [[TMP49:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD52:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD52]], i16* [[ATMP53]], align 2
// CHK-C-NEXT:    [[CMP54:%.*]] = icmp ugt i16 [[ATOMIC_LOAD52]], [[TMP49]]
// CHK-C-NEXT:    br i1 [[CMP54]], label [[ATOMIC_CONT55:%.*]], label [[ATOMIC_EXIT60:%.*]]
// CHK-C:       atomic_cont55:
// CHK-C-NEXT:    [[TMP50:%.*]] = phi i16 [ [[ATOMIC_LOAD52]], [[ATOMIC_EXIT51]] ], [ [[TMP53:%.*]], [[ATOMIC_CMP58:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP50]], i16* [[ATMP53]], align 2
// CHK-C-NEXT:    store i16 [[TMP49]], i16* [[ATOMIC_TEMP56]], align 2
// CHK-C-NEXT:    [[TMP51:%.*]] = load i16, i16* [[ATOMIC_TEMP56]], align 2
// CHK-C-NEXT:    [[TMP52:%.*]] = cmpxchg i16* [[X]], i16 [[TMP50]], i16 [[TMP51]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP53]] = extractvalue { i16, i1 } [[TMP52]], 0
// CHK-C-NEXT:    [[TMP54:%.*]] = extractvalue { i16, i1 } [[TMP52]], 1
// CHK-C-NEXT:    br i1 [[TMP54]], label [[ATOMIC_UPD_EXIT57:%.*]], label [[ATOMIC_CMP58]]
// CHK-C:       atomic_upd_exit57:
// CHK-C-NEXT:    store i16 [[TMP49]], i16* [[ATMP53]], align 2
// CHK-C-NEXT:    br label [[ATOMIC_EXIT60]]
// CHK-C:       atomic_cmp58:
// CHK-C-NEXT:    [[CMP59:%.*]] = icmp ugt i16 [[TMP53]], [[TMP49]]
// CHK-C-NEXT:    br i1 [[CMP59]], label [[ATOMIC_CONT55]], label [[ATOMIC_EXIT60]]
// CHK-C:       atomic_exit60:
// CHK-C-NEXT:    [[TMP55:%.*]] = load i16, i16* [[ATMP53]], align 2
// CHK-C-NEXT:    store i16 [[TMP55]], i16* [[V]], align 2
// CHK-C-NEXT:    [[TMP56:%.*]] = load i16, i16* [[D]], align 2
// CHK-C-NEXT:    [[TMP57:%.*]] = load i16, i16* [[E]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD61:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD61]], i16* [[ATMP62]], align 2
// CHK-C-NEXT:    [[CMP63:%.*]] = icmp eq i16 [[ATOMIC_LOAD61]], [[TMP57]]
// CHK-C-NEXT:    br i1 [[CMP63]], label [[ATOMIC_CONT64:%.*]], label [[ATOMIC_EXIT68:%.*]]
// CHK-C:       atomic_cont64:
// CHK-C-NEXT:    [[TMP58:%.*]] = phi i16 [ [[ATOMIC_LOAD61]], [[ATOMIC_EXIT60]] ], [ [[TMP61:%.*]], [[ATOMIC_CMP66:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP58]], i16* [[ATMP62]], align 2
// CHK-C-NEXT:    store i16 [[TMP56]], i16* [[ATOMIC_TEMP65]], align 2
// CHK-C-NEXT:    [[TMP59:%.*]] = load i16, i16* [[ATOMIC_TEMP65]], align 2
// CHK-C-NEXT:    [[TMP60:%.*]] = cmpxchg i16* [[X]], i16 [[TMP58]], i16 [[TMP59]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP61]] = extractvalue { i16, i1 } [[TMP60]], 0
// CHK-C-NEXT:    [[TMP62:%.*]] = extractvalue { i16, i1 } [[TMP60]], 1
// CHK-C-NEXT:    br i1 [[TMP62]], label [[ATOMIC_EXIT68]], label [[ATOMIC_CMP66]]
// CHK-C:       atomic_cmp66:
// CHK-C-NEXT:    [[CMP67:%.*]] = icmp eq i16 [[TMP61]], [[TMP57]]
// CHK-C-NEXT:    br i1 [[CMP67]], label [[ATOMIC_CONT64]], label [[ATOMIC_EXIT68]]
// CHK-C:       atomic_exit68:
// CHK-C-NEXT:    [[TMP63:%.*]] = load i16, i16* [[ATMP62]], align 2
// CHK-C-NEXT:    store i16 [[TMP63]], i16* [[V]], align 2
// CHK-C-NEXT:    [[TMP64:%.*]] = load i16, i16* [[D]], align 2
// CHK-C-NEXT:    [[TMP65:%.*]] = load i16, i16* [[E]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD69:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD69]], i16* [[ATMP70]], align 2
// CHK-C-NEXT:    [[CMP71:%.*]] = icmp eq i16 [[ATOMIC_LOAD69]], [[TMP65]]
// CHK-C-NEXT:    br i1 [[CMP71]], label [[ATOMIC_CONT72:%.*]], label [[ATOMIC_EXIT77:%.*]]
// CHK-C:       atomic_cont72:
// CHK-C-NEXT:    [[TMP66:%.*]] = phi i16 [ [[ATOMIC_LOAD69]], [[ATOMIC_EXIT68]] ], [ [[TMP69:%.*]], [[ATOMIC_CMP75:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP66]], i16* [[ATMP70]], align 2
// CHK-C-NEXT:    store i16 [[TMP64]], i16* [[ATOMIC_TEMP73]], align 2
// CHK-C-NEXT:    [[TMP67:%.*]] = load i16, i16* [[ATOMIC_TEMP73]], align 2
// CHK-C-NEXT:    [[TMP68:%.*]] = cmpxchg i16* [[X]], i16 [[TMP66]], i16 [[TMP67]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP69]] = extractvalue { i16, i1 } [[TMP68]], 0
// CHK-C-NEXT:    [[TMP70:%.*]] = extractvalue { i16, i1 } [[TMP68]], 1
// CHK-C-NEXT:    br i1 [[TMP70]], label [[ATOMIC_UPD_EXIT74:%.*]], label [[ATOMIC_CMP75]]
// CHK-C:       atomic_upd_exit74:
// CHK-C-NEXT:    store i16 [[TMP64]], i16* [[ATMP70]], align 2
// CHK-C-NEXT:    br label [[ATOMIC_EXIT77]]
// CHK-C:       atomic_cmp75:
// CHK-C-NEXT:    [[CMP76:%.*]] = icmp eq i16 [[TMP69]], [[TMP65]]
// CHK-C-NEXT:    br i1 [[CMP76]], label [[ATOMIC_CONT72]], label [[ATOMIC_EXIT77]]
// CHK-C:       atomic_exit77:
// CHK-C-NEXT:    [[TMP71:%.*]] = load i16, i16* [[ATMP70]], align 2
// CHK-C-NEXT:    store i16 [[TMP71]], i16* [[V]], align 2
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z19test_unsigned_shortv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[X:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[V:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP3:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATOMIC_TEMP6:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP11:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATOMIC_TEMP14:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP19:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATOMIC_TEMP22:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP28:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATOMIC_TEMP31:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP36:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATOMIC_TEMP39:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP45:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATOMIC_TEMP48:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP53:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATOMIC_TEMP56:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP62:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATOMIC_TEMP65:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP70:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATOMIC_TEMP73:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD]], i16* [[TMP]], align 2
// CHK-CXX-NEXT:    [[CMP:%.*]] = icmp ugt i16 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP1:%.*]] = phi i16 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP1]], i16* [[TMP]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP0]], i16* [[ATOMIC_TEMP]], align 2
// CHK-CXX-NEXT:    [[TMP2:%.*]] = load i16, i16* [[ATOMIC_TEMP]], align 2
// CHK-CXX-NEXT:    [[TMP3:%.*]] = cmpxchg i16* [[X]], i16 [[TMP1]], i16 [[TMP2]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP4]] = extractvalue { i16, i1 } [[TMP3]], 0
// CHK-CXX-NEXT:    [[TMP5:%.*]] = extractvalue { i16, i1 } [[TMP3]], 1
// CHK-CXX-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    [[CMP1:%.*]] = icmp ugt i16 [[TMP4]], [[TMP0]]
// CHK-CXX-NEXT:    br i1 [[CMP1]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP6:%.*]] = load i16, i16* [[TMP]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP6]], i16* [[V]], align 2
// CHK-CXX-NEXT:    [[TMP7:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD2:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD2]], i16* [[ATMP3]], align 2
// CHK-CXX-NEXT:    [[CMP4:%.*]] = icmp ugt i16 [[ATOMIC_LOAD2]], [[TMP7]]
// CHK-CXX-NEXT:    br i1 [[CMP4]], label [[ATOMIC_CONT5:%.*]], label [[ATOMIC_EXIT9:%.*]]
// CHK-CXX:       atomic_cont5:
// CHK-CXX-NEXT:    [[TMP8:%.*]] = phi i16 [ [[ATOMIC_LOAD2]], [[ATOMIC_EXIT]] ], [ [[TMP11:%.*]], [[ATOMIC_CMP7:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP8]], i16* [[ATMP3]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP7]], i16* [[ATOMIC_TEMP6]], align 2
// CHK-CXX-NEXT:    [[TMP9:%.*]] = load i16, i16* [[ATOMIC_TEMP6]], align 2
// CHK-CXX-NEXT:    [[TMP10:%.*]] = cmpxchg i16* [[X]], i16 [[TMP8]], i16 [[TMP9]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP11]] = extractvalue { i16, i1 } [[TMP10]], 0
// CHK-CXX-NEXT:    [[TMP12:%.*]] = extractvalue { i16, i1 } [[TMP10]], 1
// CHK-CXX-NEXT:    br i1 [[TMP12]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP7]]
// CHK-CXX:       atomic_upd_exit:
// CHK-CXX-NEXT:    store i16 [[TMP7]], i16* [[ATMP3]], align 2
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT9]]
// CHK-CXX:       atomic_cmp7:
// CHK-CXX-NEXT:    [[CMP8:%.*]] = icmp ugt i16 [[TMP11]], [[TMP7]]
// CHK-CXX-NEXT:    br i1 [[CMP8]], label [[ATOMIC_CONT5]], label [[ATOMIC_EXIT9]]
// CHK-CXX:       atomic_exit9:
// CHK-CXX-NEXT:    [[TMP13:%.*]] = load i16, i16* [[ATMP3]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP13]], i16* [[V]], align 2
// CHK-CXX-NEXT:    [[TMP14:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD10:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD10]], i16* [[ATMP11]], align 2
// CHK-CXX-NEXT:    [[CMP12:%.*]] = icmp ult i16 [[ATOMIC_LOAD10]], [[TMP14]]
// CHK-CXX-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT13:%.*]], label [[ATOMIC_EXIT17:%.*]]
// CHK-CXX:       atomic_cont13:
// CHK-CXX-NEXT:    [[TMP15:%.*]] = phi i16 [ [[ATOMIC_LOAD10]], [[ATOMIC_EXIT9]] ], [ [[TMP18:%.*]], [[ATOMIC_CMP15:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP15]], i16* [[ATMP11]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP14]], i16* [[ATOMIC_TEMP14]], align 2
// CHK-CXX-NEXT:    [[TMP16:%.*]] = load i16, i16* [[ATOMIC_TEMP14]], align 2
// CHK-CXX-NEXT:    [[TMP17:%.*]] = cmpxchg i16* [[X]], i16 [[TMP15]], i16 [[TMP16]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP18]] = extractvalue { i16, i1 } [[TMP17]], 0
// CHK-CXX-NEXT:    [[TMP19:%.*]] = extractvalue { i16, i1 } [[TMP17]], 1
// CHK-CXX-NEXT:    br i1 [[TMP19]], label [[ATOMIC_EXIT17]], label [[ATOMIC_CMP15]]
// CHK-CXX:       atomic_cmp15:
// CHK-CXX-NEXT:    [[CMP16:%.*]] = icmp ult i16 [[TMP18]], [[TMP14]]
// CHK-CXX-NEXT:    br i1 [[CMP16]], label [[ATOMIC_CONT13]], label [[ATOMIC_EXIT17]]
// CHK-CXX:       atomic_exit17:
// CHK-CXX-NEXT:    [[TMP20:%.*]] = load i16, i16* [[ATMP11]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP20]], i16* [[V]], align 2
// CHK-CXX-NEXT:    [[TMP21:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD18:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD18]], i16* [[ATMP19]], align 2
// CHK-CXX-NEXT:    [[CMP20:%.*]] = icmp ult i16 [[ATOMIC_LOAD18]], [[TMP21]]
// CHK-CXX-NEXT:    br i1 [[CMP20]], label [[ATOMIC_CONT21:%.*]], label [[ATOMIC_EXIT26:%.*]]
// CHK-CXX:       atomic_cont21:
// CHK-CXX-NEXT:    [[TMP22:%.*]] = phi i16 [ [[ATOMIC_LOAD18]], [[ATOMIC_EXIT17]] ], [ [[TMP25:%.*]], [[ATOMIC_CMP24:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP22]], i16* [[ATMP19]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP21]], i16* [[ATOMIC_TEMP22]], align 2
// CHK-CXX-NEXT:    [[TMP23:%.*]] = load i16, i16* [[ATOMIC_TEMP22]], align 2
// CHK-CXX-NEXT:    [[TMP24:%.*]] = cmpxchg i16* [[X]], i16 [[TMP22]], i16 [[TMP23]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP25]] = extractvalue { i16, i1 } [[TMP24]], 0
// CHK-CXX-NEXT:    [[TMP26:%.*]] = extractvalue { i16, i1 } [[TMP24]], 1
// CHK-CXX-NEXT:    br i1 [[TMP26]], label [[ATOMIC_UPD_EXIT23:%.*]], label [[ATOMIC_CMP24]]
// CHK-CXX:       atomic_upd_exit23:
// CHK-CXX-NEXT:    store i16 [[TMP21]], i16* [[ATMP19]], align 2
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT26]]
// CHK-CXX:       atomic_cmp24:
// CHK-CXX-NEXT:    [[CMP25:%.*]] = icmp ult i16 [[TMP25]], [[TMP21]]
// CHK-CXX-NEXT:    br i1 [[CMP25]], label [[ATOMIC_CONT21]], label [[ATOMIC_EXIT26]]
// CHK-CXX:       atomic_exit26:
// CHK-CXX-NEXT:    [[TMP27:%.*]] = load i16, i16* [[ATMP19]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP27]], i16* [[V]], align 2
// CHK-CXX-NEXT:    [[TMP28:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD27:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD27]], i16* [[ATMP28]], align 2
// CHK-CXX-NEXT:    [[CMP29:%.*]] = icmp ult i16 [[ATOMIC_LOAD27]], [[TMP28]]
// CHK-CXX-NEXT:    br i1 [[CMP29]], label [[ATOMIC_CONT30:%.*]], label [[ATOMIC_EXIT34:%.*]]
// CHK-CXX:       atomic_cont30:
// CHK-CXX-NEXT:    [[TMP29:%.*]] = phi i16 [ [[ATOMIC_LOAD27]], [[ATOMIC_EXIT26]] ], [ [[TMP32:%.*]], [[ATOMIC_CMP32:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP29]], i16* [[ATMP28]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP28]], i16* [[ATOMIC_TEMP31]], align 2
// CHK-CXX-NEXT:    [[TMP30:%.*]] = load i16, i16* [[ATOMIC_TEMP31]], align 2
// CHK-CXX-NEXT:    [[TMP31:%.*]] = cmpxchg i16* [[X]], i16 [[TMP29]], i16 [[TMP30]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP32]] = extractvalue { i16, i1 } [[TMP31]], 0
// CHK-CXX-NEXT:    [[TMP33:%.*]] = extractvalue { i16, i1 } [[TMP31]], 1
// CHK-CXX-NEXT:    br i1 [[TMP33]], label [[ATOMIC_EXIT34]], label [[ATOMIC_CMP32]]
// CHK-CXX:       atomic_cmp32:
// CHK-CXX-NEXT:    [[CMP33:%.*]] = icmp ult i16 [[TMP32]], [[TMP28]]
// CHK-CXX-NEXT:    br i1 [[CMP33]], label [[ATOMIC_CONT30]], label [[ATOMIC_EXIT34]]
// CHK-CXX:       atomic_exit34:
// CHK-CXX-NEXT:    [[TMP34:%.*]] = load i16, i16* [[ATMP28]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP34]], i16* [[V]], align 2
// CHK-CXX-NEXT:    [[TMP35:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD35:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD35]], i16* [[ATMP36]], align 2
// CHK-CXX-NEXT:    [[CMP37:%.*]] = icmp ult i16 [[ATOMIC_LOAD35]], [[TMP35]]
// CHK-CXX-NEXT:    br i1 [[CMP37]], label [[ATOMIC_CONT38:%.*]], label [[ATOMIC_EXIT43:%.*]]
// CHK-CXX:       atomic_cont38:
// CHK-CXX-NEXT:    [[TMP36:%.*]] = phi i16 [ [[ATOMIC_LOAD35]], [[ATOMIC_EXIT34]] ], [ [[TMP39:%.*]], [[ATOMIC_CMP41:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP36]], i16* [[ATMP36]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP35]], i16* [[ATOMIC_TEMP39]], align 2
// CHK-CXX-NEXT:    [[TMP37:%.*]] = load i16, i16* [[ATOMIC_TEMP39]], align 2
// CHK-CXX-NEXT:    [[TMP38:%.*]] = cmpxchg i16* [[X]], i16 [[TMP36]], i16 [[TMP37]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP39]] = extractvalue { i16, i1 } [[TMP38]], 0
// CHK-CXX-NEXT:    [[TMP40:%.*]] = extractvalue { i16, i1 } [[TMP38]], 1
// CHK-CXX-NEXT:    br i1 [[TMP40]], label [[ATOMIC_UPD_EXIT40:%.*]], label [[ATOMIC_CMP41]]
// CHK-CXX:       atomic_upd_exit40:
// CHK-CXX-NEXT:    store i16 [[TMP35]], i16* [[ATMP36]], align 2
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT43]]
// CHK-CXX:       atomic_cmp41:
// CHK-CXX-NEXT:    [[CMP42:%.*]] = icmp ult i16 [[TMP39]], [[TMP35]]
// CHK-CXX-NEXT:    br i1 [[CMP42]], label [[ATOMIC_CONT38]], label [[ATOMIC_EXIT43]]
// CHK-CXX:       atomic_exit43:
// CHK-CXX-NEXT:    [[TMP41:%.*]] = load i16, i16* [[ATMP36]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP41]], i16* [[V]], align 2
// CHK-CXX-NEXT:    [[TMP42:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD44:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD44]], i16* [[ATMP45]], align 2
// CHK-CXX-NEXT:    [[CMP46:%.*]] = icmp ugt i16 [[ATOMIC_LOAD44]], [[TMP42]]
// CHK-CXX-NEXT:    br i1 [[CMP46]], label [[ATOMIC_CONT47:%.*]], label [[ATOMIC_EXIT51:%.*]]
// CHK-CXX:       atomic_cont47:
// CHK-CXX-NEXT:    [[TMP43:%.*]] = phi i16 [ [[ATOMIC_LOAD44]], [[ATOMIC_EXIT43]] ], [ [[TMP46:%.*]], [[ATOMIC_CMP49:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP43]], i16* [[ATMP45]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP42]], i16* [[ATOMIC_TEMP48]], align 2
// CHK-CXX-NEXT:    [[TMP44:%.*]] = load i16, i16* [[ATOMIC_TEMP48]], align 2
// CHK-CXX-NEXT:    [[TMP45:%.*]] = cmpxchg i16* [[X]], i16 [[TMP43]], i16 [[TMP44]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP46]] = extractvalue { i16, i1 } [[TMP45]], 0
// CHK-CXX-NEXT:    [[TMP47:%.*]] = extractvalue { i16, i1 } [[TMP45]], 1
// CHK-CXX-NEXT:    br i1 [[TMP47]], label [[ATOMIC_EXIT51]], label [[ATOMIC_CMP49]]
// CHK-CXX:       atomic_cmp49:
// CHK-CXX-NEXT:    [[CMP50:%.*]] = icmp ugt i16 [[TMP46]], [[TMP42]]
// CHK-CXX-NEXT:    br i1 [[CMP50]], label [[ATOMIC_CONT47]], label [[ATOMIC_EXIT51]]
// CHK-CXX:       atomic_exit51:
// CHK-CXX-NEXT:    [[TMP48:%.*]] = load i16, i16* [[ATMP45]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP48]], i16* [[V]], align 2
// CHK-CXX-NEXT:    [[TMP49:%.*]] = load i16, i16* [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD52:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD52]], i16* [[ATMP53]], align 2
// CHK-CXX-NEXT:    [[CMP54:%.*]] = icmp ugt i16 [[ATOMIC_LOAD52]], [[TMP49]]
// CHK-CXX-NEXT:    br i1 [[CMP54]], label [[ATOMIC_CONT55:%.*]], label [[ATOMIC_EXIT60:%.*]]
// CHK-CXX:       atomic_cont55:
// CHK-CXX-NEXT:    [[TMP50:%.*]] = phi i16 [ [[ATOMIC_LOAD52]], [[ATOMIC_EXIT51]] ], [ [[TMP53:%.*]], [[ATOMIC_CMP58:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP50]], i16* [[ATMP53]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP49]], i16* [[ATOMIC_TEMP56]], align 2
// CHK-CXX-NEXT:    [[TMP51:%.*]] = load i16, i16* [[ATOMIC_TEMP56]], align 2
// CHK-CXX-NEXT:    [[TMP52:%.*]] = cmpxchg i16* [[X]], i16 [[TMP50]], i16 [[TMP51]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP53]] = extractvalue { i16, i1 } [[TMP52]], 0
// CHK-CXX-NEXT:    [[TMP54:%.*]] = extractvalue { i16, i1 } [[TMP52]], 1
// CHK-CXX-NEXT:    br i1 [[TMP54]], label [[ATOMIC_UPD_EXIT57:%.*]], label [[ATOMIC_CMP58]]
// CHK-CXX:       atomic_upd_exit57:
// CHK-CXX-NEXT:    store i16 [[TMP49]], i16* [[ATMP53]], align 2
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT60]]
// CHK-CXX:       atomic_cmp58:
// CHK-CXX-NEXT:    [[CMP59:%.*]] = icmp ugt i16 [[TMP53]], [[TMP49]]
// CHK-CXX-NEXT:    br i1 [[CMP59]], label [[ATOMIC_CONT55]], label [[ATOMIC_EXIT60]]
// CHK-CXX:       atomic_exit60:
// CHK-CXX-NEXT:    [[TMP55:%.*]] = load i16, i16* [[ATMP53]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP55]], i16* [[V]], align 2
// CHK-CXX-NEXT:    [[TMP56:%.*]] = load i16, i16* [[D]], align 2
// CHK-CXX-NEXT:    [[TMP57:%.*]] = load i16, i16* [[E]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD61:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD61]], i16* [[ATMP62]], align 2
// CHK-CXX-NEXT:    [[CMP63:%.*]] = icmp eq i16 [[ATOMIC_LOAD61]], [[TMP57]]
// CHK-CXX-NEXT:    br i1 [[CMP63]], label [[ATOMIC_CONT64:%.*]], label [[ATOMIC_EXIT68:%.*]]
// CHK-CXX:       atomic_cont64:
// CHK-CXX-NEXT:    [[TMP58:%.*]] = phi i16 [ [[ATOMIC_LOAD61]], [[ATOMIC_EXIT60]] ], [ [[TMP61:%.*]], [[ATOMIC_CMP66:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP58]], i16* [[ATMP62]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP56]], i16* [[ATOMIC_TEMP65]], align 2
// CHK-CXX-NEXT:    [[TMP59:%.*]] = load i16, i16* [[ATOMIC_TEMP65]], align 2
// CHK-CXX-NEXT:    [[TMP60:%.*]] = cmpxchg i16* [[X]], i16 [[TMP58]], i16 [[TMP59]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP61]] = extractvalue { i16, i1 } [[TMP60]], 0
// CHK-CXX-NEXT:    [[TMP62:%.*]] = extractvalue { i16, i1 } [[TMP60]], 1
// CHK-CXX-NEXT:    br i1 [[TMP62]], label [[ATOMIC_EXIT68]], label [[ATOMIC_CMP66]]
// CHK-CXX:       atomic_cmp66:
// CHK-CXX-NEXT:    [[CMP67:%.*]] = icmp eq i16 [[TMP61]], [[TMP57]]
// CHK-CXX-NEXT:    br i1 [[CMP67]], label [[ATOMIC_CONT64]], label [[ATOMIC_EXIT68]]
// CHK-CXX:       atomic_exit68:
// CHK-CXX-NEXT:    [[TMP63:%.*]] = load i16, i16* [[ATMP62]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP63]], i16* [[V]], align 2
// CHK-CXX-NEXT:    [[TMP64:%.*]] = load i16, i16* [[D]], align 2
// CHK-CXX-NEXT:    [[TMP65:%.*]] = load i16, i16* [[E]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD69:%.*]] = load atomic i16, i16* [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD69]], i16* [[ATMP70]], align 2
// CHK-CXX-NEXT:    [[CMP71:%.*]] = icmp eq i16 [[ATOMIC_LOAD69]], [[TMP65]]
// CHK-CXX-NEXT:    br i1 [[CMP71]], label [[ATOMIC_CONT72:%.*]], label [[ATOMIC_EXIT77:%.*]]
// CHK-CXX:       atomic_cont72:
// CHK-CXX-NEXT:    [[TMP66:%.*]] = phi i16 [ [[ATOMIC_LOAD69]], [[ATOMIC_EXIT68]] ], [ [[TMP69:%.*]], [[ATOMIC_CMP75:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP66]], i16* [[ATMP70]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP64]], i16* [[ATOMIC_TEMP73]], align 2
// CHK-CXX-NEXT:    [[TMP67:%.*]] = load i16, i16* [[ATOMIC_TEMP73]], align 2
// CHK-CXX-NEXT:    [[TMP68:%.*]] = cmpxchg i16* [[X]], i16 [[TMP66]], i16 [[TMP67]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP69]] = extractvalue { i16, i1 } [[TMP68]], 0
// CHK-CXX-NEXT:    [[TMP70:%.*]] = extractvalue { i16, i1 } [[TMP68]], 1
// CHK-CXX-NEXT:    br i1 [[TMP70]], label [[ATOMIC_UPD_EXIT74:%.*]], label [[ATOMIC_CMP75]]
// CHK-CXX:       atomic_upd_exit74:
// CHK-CXX-NEXT:    store i16 [[TMP64]], i16* [[ATMP70]], align 2
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT77]]
// CHK-CXX:       atomic_cmp75:
// CHK-CXX-NEXT:    [[CMP76:%.*]] = icmp eq i16 [[TMP69]], [[TMP65]]
// CHK-CXX-NEXT:    br i1 [[CMP76]], label [[ATOMIC_CONT72]], label [[ATOMIC_EXIT77]]
// CHK-CXX:       atomic_exit77:
// CHK-CXX-NEXT:    [[TMP71:%.*]] = load i16, i16* [[ATMP70]], align 2
// CHK-CXX-NEXT:    store i16 [[TMP71]], i16* [[V]], align 2
// CHK-CXX-NEXT:    ret void
//
void test_unsigned_short() {
    // One of each form with 'unsigned short'.
    unsigned short x, expr, d, e, v;

    #pragma omp atomic compare capture
    { v = x; if (expr < x) { x = expr; } } // MIN

    #pragma omp atomic compare capture
    { if (expr < x) { x = expr; } v = x; } // MIN

    #pragma omp atomic compare capture
    { v = x; if (expr > x) { x = expr; } } // MAX

    #pragma omp atomic compare capture
    { if (expr > x) { x = expr; } v = x; } // MAX

    #pragma omp atomic compare capture
    { v = x; if (x < expr) { x = expr; } } // MAX

    #pragma omp atomic compare capture
    { if (x < expr) { x = expr; } v = x; } // MAX

    #pragma omp atomic compare capture
    { v = x; if (x > expr) { x = expr; } } // MIN

    #pragma omp atomic compare capture
    { if (x > expr) { x = expr; } v = x; } // MIN

    #pragma omp atomic compare capture
    { v = x; if (x == e) { x = d; } }

    #pragma omp atomic compare capture
    { if (x == e) { x = d; } v = x; }
}

// CHK-C-LABEL: @test_double(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[X:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[D:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[E:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[V:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[TMP:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP3:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP6:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP11:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP14:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP19:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP22:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP28:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP31:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP36:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP39:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP45:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP48:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP53:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP56:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP62:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP65:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP70:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP73:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[TMP0:%.*]] = load double, double* [[EXPR]], align 8
// CHK-C-NEXT:    [[TMP1:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, i64* [[TMP1]] monotonic, align 8
// CHK-C-NEXT:    [[TMP2:%.*]] = bitcast i64 [[ATOMIC_LOAD]] to double
// CHK-C-NEXT:    store double [[TMP2]], double* [[TMP]], align 8
// CHK-C-NEXT:    [[CMP:%.*]] = fcmp ogt double [[TMP2]], [[TMP0]]
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP3:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP10:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    [[TMP4:%.*]] = bitcast i64 [[TMP3]] to double
// CHK-C-NEXT:    store double [[TMP4]], double* [[TMP]], align 8
// CHK-C-NEXT:    [[TMP5:%.*]] = bitcast double* [[ATOMIC_TEMP]] to i64*
// CHK-C-NEXT:    [[TMP6:%.*]] = bitcast double [[TMP0]] to i64
// CHK-C-NEXT:    store i64 [[TMP6]], i64* [[TMP5]], align 8
// CHK-C-NEXT:    [[TMP7:%.*]] = load i64, i64* [[TMP5]], align 8
// CHK-C-NEXT:    [[TMP8:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP9:%.*]] = cmpxchg i64* [[TMP8]], i64 [[TMP3]], i64 [[TMP7]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP10]] = extractvalue { i64, i1 } [[TMP9]], 0
// CHK-C-NEXT:    [[TMP11:%.*]] = extractvalue { i64, i1 } [[TMP9]], 1
// CHK-C-NEXT:    br i1 [[TMP11]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    [[TMP12:%.*]] = bitcast i64 [[TMP10]] to double
// CHK-C-NEXT:    [[CMP1:%.*]] = fcmp ogt double [[TMP12]], [[TMP0]]
// CHK-C-NEXT:    br i1 [[CMP1]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP13:%.*]] = load double, double* [[TMP]], align 8
// CHK-C-NEXT:    store double [[TMP13]], double* [[V]], align 8
// CHK-C-NEXT:    [[TMP14:%.*]] = load double, double* [[EXPR]], align 8
// CHK-C-NEXT:    [[TMP15:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD2:%.*]] = load atomic i64, i64* [[TMP15]] monotonic, align 8
// CHK-C-NEXT:    [[TMP16:%.*]] = bitcast i64 [[ATOMIC_LOAD2]] to double
// CHK-C-NEXT:    store double [[TMP16]], double* [[ATMP3]], align 8
// CHK-C-NEXT:    [[CMP4:%.*]] = fcmp ogt double [[TMP16]], [[TMP14]]
// CHK-C-NEXT:    br i1 [[CMP4]], label [[ATOMIC_CONT5:%.*]], label [[ATOMIC_EXIT9:%.*]]
// CHK-C:       atomic_cont5:
// CHK-C-NEXT:    [[TMP17:%.*]] = phi i64 [ [[ATOMIC_LOAD2]], [[ATOMIC_EXIT]] ], [ [[TMP24:%.*]], [[ATOMIC_CMP7:%.*]] ]
// CHK-C-NEXT:    [[TMP18:%.*]] = bitcast i64 [[TMP17]] to double
// CHK-C-NEXT:    store double [[TMP18]], double* [[ATMP3]], align 8
// CHK-C-NEXT:    [[TMP19:%.*]] = bitcast double* [[ATOMIC_TEMP6]] to i64*
// CHK-C-NEXT:    [[TMP20:%.*]] = bitcast double [[TMP14]] to i64
// CHK-C-NEXT:    store i64 [[TMP20]], i64* [[TMP19]], align 8
// CHK-C-NEXT:    [[TMP21:%.*]] = load i64, i64* [[TMP19]], align 8
// CHK-C-NEXT:    [[TMP22:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP23:%.*]] = cmpxchg i64* [[TMP22]], i64 [[TMP17]], i64 [[TMP21]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP24]] = extractvalue { i64, i1 } [[TMP23]], 0
// CHK-C-NEXT:    [[TMP25:%.*]] = extractvalue { i64, i1 } [[TMP23]], 1
// CHK-C-NEXT:    br i1 [[TMP25]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP7]]
// CHK-C:       atomic_upd_exit:
// CHK-C-NEXT:    store double [[TMP14]], double* [[ATMP3]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_EXIT9]]
// CHK-C:       atomic_cmp7:
// CHK-C-NEXT:    [[TMP26:%.*]] = bitcast i64 [[TMP24]] to double
// CHK-C-NEXT:    [[CMP8:%.*]] = fcmp ogt double [[TMP26]], [[TMP14]]
// CHK-C-NEXT:    br i1 [[CMP8]], label [[ATOMIC_CONT5]], label [[ATOMIC_EXIT9]]
// CHK-C:       atomic_exit9:
// CHK-C-NEXT:    [[TMP27:%.*]] = load double, double* [[ATMP3]], align 8
// CHK-C-NEXT:    store double [[TMP27]], double* [[V]], align 8
// CHK-C-NEXT:    [[TMP28:%.*]] = load double, double* [[EXPR]], align 8
// CHK-C-NEXT:    [[TMP29:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD10:%.*]] = load atomic i64, i64* [[TMP29]] monotonic, align 8
// CHK-C-NEXT:    [[TMP30:%.*]] = bitcast i64 [[ATOMIC_LOAD10]] to double
// CHK-C-NEXT:    store double [[TMP30]], double* [[ATMP11]], align 8
// CHK-C-NEXT:    [[CMP12:%.*]] = fcmp olt double [[TMP30]], [[TMP28]]
// CHK-C-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT13:%.*]], label [[ATOMIC_EXIT17:%.*]]
// CHK-C:       atomic_cont13:
// CHK-C-NEXT:    [[TMP31:%.*]] = phi i64 [ [[ATOMIC_LOAD10]], [[ATOMIC_EXIT9]] ], [ [[TMP38:%.*]], [[ATOMIC_CMP15:%.*]] ]
// CHK-C-NEXT:    [[TMP32:%.*]] = bitcast i64 [[TMP31]] to double
// CHK-C-NEXT:    store double [[TMP32]], double* [[ATMP11]], align 8
// CHK-C-NEXT:    [[TMP33:%.*]] = bitcast double* [[ATOMIC_TEMP14]] to i64*
// CHK-C-NEXT:    [[TMP34:%.*]] = bitcast double [[TMP28]] to i64
// CHK-C-NEXT:    store i64 [[TMP34]], i64* [[TMP33]], align 8
// CHK-C-NEXT:    [[TMP35:%.*]] = load i64, i64* [[TMP33]], align 8
// CHK-C-NEXT:    [[TMP36:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP37:%.*]] = cmpxchg i64* [[TMP36]], i64 [[TMP31]], i64 [[TMP35]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP38]] = extractvalue { i64, i1 } [[TMP37]], 0
// CHK-C-NEXT:    [[TMP39:%.*]] = extractvalue { i64, i1 } [[TMP37]], 1
// CHK-C-NEXT:    br i1 [[TMP39]], label [[ATOMIC_EXIT17]], label [[ATOMIC_CMP15]]
// CHK-C:       atomic_cmp15:
// CHK-C-NEXT:    [[TMP40:%.*]] = bitcast i64 [[TMP38]] to double
// CHK-C-NEXT:    [[CMP16:%.*]] = fcmp olt double [[TMP40]], [[TMP28]]
// CHK-C-NEXT:    br i1 [[CMP16]], label [[ATOMIC_CONT13]], label [[ATOMIC_EXIT17]]
// CHK-C:       atomic_exit17:
// CHK-C-NEXT:    [[TMP41:%.*]] = load double, double* [[ATMP11]], align 8
// CHK-C-NEXT:    store double [[TMP41]], double* [[V]], align 8
// CHK-C-NEXT:    [[TMP42:%.*]] = load double, double* [[EXPR]], align 8
// CHK-C-NEXT:    [[TMP43:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD18:%.*]] = load atomic i64, i64* [[TMP43]] monotonic, align 8
// CHK-C-NEXT:    [[TMP44:%.*]] = bitcast i64 [[ATOMIC_LOAD18]] to double
// CHK-C-NEXT:    store double [[TMP44]], double* [[ATMP19]], align 8
// CHK-C-NEXT:    [[CMP20:%.*]] = fcmp olt double [[TMP44]], [[TMP42]]
// CHK-C-NEXT:    br i1 [[CMP20]], label [[ATOMIC_CONT21:%.*]], label [[ATOMIC_EXIT26:%.*]]
// CHK-C:       atomic_cont21:
// CHK-C-NEXT:    [[TMP45:%.*]] = phi i64 [ [[ATOMIC_LOAD18]], [[ATOMIC_EXIT17]] ], [ [[TMP52:%.*]], [[ATOMIC_CMP24:%.*]] ]
// CHK-C-NEXT:    [[TMP46:%.*]] = bitcast i64 [[TMP45]] to double
// CHK-C-NEXT:    store double [[TMP46]], double* [[ATMP19]], align 8
// CHK-C-NEXT:    [[TMP47:%.*]] = bitcast double* [[ATOMIC_TEMP22]] to i64*
// CHK-C-NEXT:    [[TMP48:%.*]] = bitcast double [[TMP42]] to i64
// CHK-C-NEXT:    store i64 [[TMP48]], i64* [[TMP47]], align 8
// CHK-C-NEXT:    [[TMP49:%.*]] = load i64, i64* [[TMP47]], align 8
// CHK-C-NEXT:    [[TMP50:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP51:%.*]] = cmpxchg i64* [[TMP50]], i64 [[TMP45]], i64 [[TMP49]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP52]] = extractvalue { i64, i1 } [[TMP51]], 0
// CHK-C-NEXT:    [[TMP53:%.*]] = extractvalue { i64, i1 } [[TMP51]], 1
// CHK-C-NEXT:    br i1 [[TMP53]], label [[ATOMIC_UPD_EXIT23:%.*]], label [[ATOMIC_CMP24]]
// CHK-C:       atomic_upd_exit23:
// CHK-C-NEXT:    store double [[TMP42]], double* [[ATMP19]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_EXIT26]]
// CHK-C:       atomic_cmp24:
// CHK-C-NEXT:    [[TMP54:%.*]] = bitcast i64 [[TMP52]] to double
// CHK-C-NEXT:    [[CMP25:%.*]] = fcmp olt double [[TMP54]], [[TMP42]]
// CHK-C-NEXT:    br i1 [[CMP25]], label [[ATOMIC_CONT21]], label [[ATOMIC_EXIT26]]
// CHK-C:       atomic_exit26:
// CHK-C-NEXT:    [[TMP55:%.*]] = load double, double* [[ATMP19]], align 8
// CHK-C-NEXT:    store double [[TMP55]], double* [[V]], align 8
// CHK-C-NEXT:    [[TMP56:%.*]] = load double, double* [[EXPR]], align 8
// CHK-C-NEXT:    [[TMP57:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD27:%.*]] = load atomic i64, i64* [[TMP57]] monotonic, align 8
// CHK-C-NEXT:    [[TMP58:%.*]] = bitcast i64 [[ATOMIC_LOAD27]] to double
// CHK-C-NEXT:    store double [[TMP58]], double* [[ATMP28]], align 8
// CHK-C-NEXT:    [[CMP29:%.*]] = fcmp olt double [[TMP58]], [[TMP56]]
// CHK-C-NEXT:    br i1 [[CMP29]], label [[ATOMIC_CONT30:%.*]], label [[ATOMIC_EXIT34:%.*]]
// CHK-C:       atomic_cont30:
// CHK-C-NEXT:    [[TMP59:%.*]] = phi i64 [ [[ATOMIC_LOAD27]], [[ATOMIC_EXIT26]] ], [ [[TMP66:%.*]], [[ATOMIC_CMP32:%.*]] ]
// CHK-C-NEXT:    [[TMP60:%.*]] = bitcast i64 [[TMP59]] to double
// CHK-C-NEXT:    store double [[TMP60]], double* [[ATMP28]], align 8
// CHK-C-NEXT:    [[TMP61:%.*]] = bitcast double* [[ATOMIC_TEMP31]] to i64*
// CHK-C-NEXT:    [[TMP62:%.*]] = bitcast double [[TMP56]] to i64
// CHK-C-NEXT:    store i64 [[TMP62]], i64* [[TMP61]], align 8
// CHK-C-NEXT:    [[TMP63:%.*]] = load i64, i64* [[TMP61]], align 8
// CHK-C-NEXT:    [[TMP64:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP65:%.*]] = cmpxchg i64* [[TMP64]], i64 [[TMP59]], i64 [[TMP63]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP66]] = extractvalue { i64, i1 } [[TMP65]], 0
// CHK-C-NEXT:    [[TMP67:%.*]] = extractvalue { i64, i1 } [[TMP65]], 1
// CHK-C-NEXT:    br i1 [[TMP67]], label [[ATOMIC_EXIT34]], label [[ATOMIC_CMP32]]
// CHK-C:       atomic_cmp32:
// CHK-C-NEXT:    [[TMP68:%.*]] = bitcast i64 [[TMP66]] to double
// CHK-C-NEXT:    [[CMP33:%.*]] = fcmp olt double [[TMP68]], [[TMP56]]
// CHK-C-NEXT:    br i1 [[CMP33]], label [[ATOMIC_CONT30]], label [[ATOMIC_EXIT34]]
// CHK-C:       atomic_exit34:
// CHK-C-NEXT:    [[TMP69:%.*]] = load double, double* [[ATMP28]], align 8
// CHK-C-NEXT:    store double [[TMP69]], double* [[V]], align 8
// CHK-C-NEXT:    [[TMP70:%.*]] = load double, double* [[EXPR]], align 8
// CHK-C-NEXT:    [[TMP71:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD35:%.*]] = load atomic i64, i64* [[TMP71]] monotonic, align 8
// CHK-C-NEXT:    [[TMP72:%.*]] = bitcast i64 [[ATOMIC_LOAD35]] to double
// CHK-C-NEXT:    store double [[TMP72]], double* [[ATMP36]], align 8
// CHK-C-NEXT:    [[CMP37:%.*]] = fcmp olt double [[TMP72]], [[TMP70]]
// CHK-C-NEXT:    br i1 [[CMP37]], label [[ATOMIC_CONT38:%.*]], label [[ATOMIC_EXIT43:%.*]]
// CHK-C:       atomic_cont38:
// CHK-C-NEXT:    [[TMP73:%.*]] = phi i64 [ [[ATOMIC_LOAD35]], [[ATOMIC_EXIT34]] ], [ [[TMP80:%.*]], [[ATOMIC_CMP41:%.*]] ]
// CHK-C-NEXT:    [[TMP74:%.*]] = bitcast i64 [[TMP73]] to double
// CHK-C-NEXT:    store double [[TMP74]], double* [[ATMP36]], align 8
// CHK-C-NEXT:    [[TMP75:%.*]] = bitcast double* [[ATOMIC_TEMP39]] to i64*
// CHK-C-NEXT:    [[TMP76:%.*]] = bitcast double [[TMP70]] to i64
// CHK-C-NEXT:    store i64 [[TMP76]], i64* [[TMP75]], align 8
// CHK-C-NEXT:    [[TMP77:%.*]] = load i64, i64* [[TMP75]], align 8
// CHK-C-NEXT:    [[TMP78:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP79:%.*]] = cmpxchg i64* [[TMP78]], i64 [[TMP73]], i64 [[TMP77]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP80]] = extractvalue { i64, i1 } [[TMP79]], 0
// CHK-C-NEXT:    [[TMP81:%.*]] = extractvalue { i64, i1 } [[TMP79]], 1
// CHK-C-NEXT:    br i1 [[TMP81]], label [[ATOMIC_UPD_EXIT40:%.*]], label [[ATOMIC_CMP41]]
// CHK-C:       atomic_upd_exit40:
// CHK-C-NEXT:    store double [[TMP70]], double* [[ATMP36]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_EXIT43]]
// CHK-C:       atomic_cmp41:
// CHK-C-NEXT:    [[TMP82:%.*]] = bitcast i64 [[TMP80]] to double
// CHK-C-NEXT:    [[CMP42:%.*]] = fcmp olt double [[TMP82]], [[TMP70]]
// CHK-C-NEXT:    br i1 [[CMP42]], label [[ATOMIC_CONT38]], label [[ATOMIC_EXIT43]]
// CHK-C:       atomic_exit43:
// CHK-C-NEXT:    [[TMP83:%.*]] = load double, double* [[ATMP36]], align 8
// CHK-C-NEXT:    store double [[TMP83]], double* [[V]], align 8
// CHK-C-NEXT:    [[TMP84:%.*]] = load double, double* [[EXPR]], align 8
// CHK-C-NEXT:    [[TMP85:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD44:%.*]] = load atomic i64, i64* [[TMP85]] monotonic, align 8
// CHK-C-NEXT:    [[TMP86:%.*]] = bitcast i64 [[ATOMIC_LOAD44]] to double
// CHK-C-NEXT:    store double [[TMP86]], double* [[ATMP45]], align 8
// CHK-C-NEXT:    [[CMP46:%.*]] = fcmp ogt double [[TMP86]], [[TMP84]]
// CHK-C-NEXT:    br i1 [[CMP46]], label [[ATOMIC_CONT47:%.*]], label [[ATOMIC_EXIT51:%.*]]
// CHK-C:       atomic_cont47:
// CHK-C-NEXT:    [[TMP87:%.*]] = phi i64 [ [[ATOMIC_LOAD44]], [[ATOMIC_EXIT43]] ], [ [[TMP94:%.*]], [[ATOMIC_CMP49:%.*]] ]
// CHK-C-NEXT:    [[TMP88:%.*]] = bitcast i64 [[TMP87]] to double
// CHK-C-NEXT:    store double [[TMP88]], double* [[ATMP45]], align 8
// CHK-C-NEXT:    [[TMP89:%.*]] = bitcast double* [[ATOMIC_TEMP48]] to i64*
// CHK-C-NEXT:    [[TMP90:%.*]] = bitcast double [[TMP84]] to i64
// CHK-C-NEXT:    store i64 [[TMP90]], i64* [[TMP89]], align 8
// CHK-C-NEXT:    [[TMP91:%.*]] = load i64, i64* [[TMP89]], align 8
// CHK-C-NEXT:    [[TMP92:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP93:%.*]] = cmpxchg i64* [[TMP92]], i64 [[TMP87]], i64 [[TMP91]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP94]] = extractvalue { i64, i1 } [[TMP93]], 0
// CHK-C-NEXT:    [[TMP95:%.*]] = extractvalue { i64, i1 } [[TMP93]], 1
// CHK-C-NEXT:    br i1 [[TMP95]], label [[ATOMIC_EXIT51]], label [[ATOMIC_CMP49]]
// CHK-C:       atomic_cmp49:
// CHK-C-NEXT:    [[TMP96:%.*]] = bitcast i64 [[TMP94]] to double
// CHK-C-NEXT:    [[CMP50:%.*]] = fcmp ogt double [[TMP96]], [[TMP84]]
// CHK-C-NEXT:    br i1 [[CMP50]], label [[ATOMIC_CONT47]], label [[ATOMIC_EXIT51]]
// CHK-C:       atomic_exit51:
// CHK-C-NEXT:    [[TMP97:%.*]] = load double, double* [[ATMP45]], align 8
// CHK-C-NEXT:    store double [[TMP97]], double* [[V]], align 8
// CHK-C-NEXT:    [[TMP98:%.*]] = load double, double* [[EXPR]], align 8
// CHK-C-NEXT:    [[TMP99:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD52:%.*]] = load atomic i64, i64* [[TMP99]] monotonic, align 8
// CHK-C-NEXT:    [[TMP100:%.*]] = bitcast i64 [[ATOMIC_LOAD52]] to double
// CHK-C-NEXT:    store double [[TMP100]], double* [[ATMP53]], align 8
// CHK-C-NEXT:    [[CMP54:%.*]] = fcmp ogt double [[TMP100]], [[TMP98]]
// CHK-C-NEXT:    br i1 [[CMP54]], label [[ATOMIC_CONT55:%.*]], label [[ATOMIC_EXIT60:%.*]]
// CHK-C:       atomic_cont55:
// CHK-C-NEXT:    [[TMP101:%.*]] = phi i64 [ [[ATOMIC_LOAD52]], [[ATOMIC_EXIT51]] ], [ [[TMP108:%.*]], [[ATOMIC_CMP58:%.*]] ]
// CHK-C-NEXT:    [[TMP102:%.*]] = bitcast i64 [[TMP101]] to double
// CHK-C-NEXT:    store double [[TMP102]], double* [[ATMP53]], align 8
// CHK-C-NEXT:    [[TMP103:%.*]] = bitcast double* [[ATOMIC_TEMP56]] to i64*
// CHK-C-NEXT:    [[TMP104:%.*]] = bitcast double [[TMP98]] to i64
// CHK-C-NEXT:    store i64 [[TMP104]], i64* [[TMP103]], align 8
// CHK-C-NEXT:    [[TMP105:%.*]] = load i64, i64* [[TMP103]], align 8
// CHK-C-NEXT:    [[TMP106:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP107:%.*]] = cmpxchg i64* [[TMP106]], i64 [[TMP101]], i64 [[TMP105]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP108]] = extractvalue { i64, i1 } [[TMP107]], 0
// CHK-C-NEXT:    [[TMP109:%.*]] = extractvalue { i64, i1 } [[TMP107]], 1
// CHK-C-NEXT:    br i1 [[TMP109]], label [[ATOMIC_UPD_EXIT57:%.*]], label [[ATOMIC_CMP58]]
// CHK-C:       atomic_upd_exit57:
// CHK-C-NEXT:    store double [[TMP98]], double* [[ATMP53]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_EXIT60]]
// CHK-C:       atomic_cmp58:
// CHK-C-NEXT:    [[TMP110:%.*]] = bitcast i64 [[TMP108]] to double
// CHK-C-NEXT:    [[CMP59:%.*]] = fcmp ogt double [[TMP110]], [[TMP98]]
// CHK-C-NEXT:    br i1 [[CMP59]], label [[ATOMIC_CONT55]], label [[ATOMIC_EXIT60]]
// CHK-C:       atomic_exit60:
// CHK-C-NEXT:    [[TMP111:%.*]] = load double, double* [[ATMP53]], align 8
// CHK-C-NEXT:    store double [[TMP111]], double* [[V]], align 8
// CHK-C-NEXT:    [[TMP112:%.*]] = load double, double* [[D]], align 8
// CHK-C-NEXT:    [[TMP113:%.*]] = load double, double* [[E]], align 8
// CHK-C-NEXT:    [[TMP114:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD61:%.*]] = load atomic i64, i64* [[TMP114]] monotonic, align 8
// CHK-C-NEXT:    [[TMP115:%.*]] = bitcast i64 [[ATOMIC_LOAD61]] to double
// CHK-C-NEXT:    store double [[TMP115]], double* [[ATMP62]], align 8
// CHK-C-NEXT:    [[TMP116:%.*]] = bitcast double [[TMP115]] to i64
// CHK-C-NEXT:    [[TMP117:%.*]] = bitcast double [[TMP113]] to i64
// CHK-C-NEXT:    [[CMP63:%.*]] = icmp eq i64 [[TMP116]], [[TMP117]]
// CHK-C-NEXT:    br i1 [[CMP63]], label [[ATOMIC_CONT64:%.*]], label [[ATOMIC_EXIT68:%.*]]
// CHK-C:       atomic_cont64:
// CHK-C-NEXT:    [[TMP118:%.*]] = phi i64 [ [[ATOMIC_LOAD61]], [[ATOMIC_EXIT60]] ], [ [[TMP125:%.*]], [[ATOMIC_CMP66:%.*]] ]
// CHK-C-NEXT:    [[TMP119:%.*]] = bitcast i64 [[TMP118]] to double
// CHK-C-NEXT:    store double [[TMP119]], double* [[ATMP62]], align 8
// CHK-C-NEXT:    [[TMP120:%.*]] = bitcast double* [[ATOMIC_TEMP65]] to i64*
// CHK-C-NEXT:    [[TMP121:%.*]] = bitcast double [[TMP112]] to i64
// CHK-C-NEXT:    store i64 [[TMP121]], i64* [[TMP120]], align 8
// CHK-C-NEXT:    [[TMP122:%.*]] = load i64, i64* [[TMP120]], align 8
// CHK-C-NEXT:    [[TMP123:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP124:%.*]] = cmpxchg i64* [[TMP123]], i64 [[TMP118]], i64 [[TMP122]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP125]] = extractvalue { i64, i1 } [[TMP124]], 0
// CHK-C-NEXT:    [[TMP126:%.*]] = extractvalue { i64, i1 } [[TMP124]], 1
// CHK-C-NEXT:    br i1 [[TMP126]], label [[ATOMIC_EXIT68]], label [[ATOMIC_CMP66]]
// CHK-C:       atomic_cmp66:
// CHK-C-NEXT:    [[TMP127:%.*]] = bitcast i64 [[TMP125]] to double
// CHK-C-NEXT:    [[TMP128:%.*]] = bitcast double [[TMP127]] to i64
// CHK-C-NEXT:    [[TMP129:%.*]] = bitcast double [[TMP113]] to i64
// CHK-C-NEXT:    [[CMP67:%.*]] = icmp eq i64 [[TMP128]], [[TMP129]]
// CHK-C-NEXT:    br i1 [[CMP67]], label [[ATOMIC_CONT64]], label [[ATOMIC_EXIT68]]
// CHK-C:       atomic_exit68:
// CHK-C-NEXT:    [[TMP130:%.*]] = load double, double* [[ATMP62]], align 8
// CHK-C-NEXT:    store double [[TMP130]], double* [[V]], align 8
// CHK-C-NEXT:    [[TMP131:%.*]] = load double, double* [[D]], align 8
// CHK-C-NEXT:    [[TMP132:%.*]] = load double, double* [[E]], align 8
// CHK-C-NEXT:    [[TMP133:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD69:%.*]] = load atomic i64, i64* [[TMP133]] monotonic, align 8
// CHK-C-NEXT:    [[TMP134:%.*]] = bitcast i64 [[ATOMIC_LOAD69]] to double
// CHK-C-NEXT:    store double [[TMP134]], double* [[ATMP70]], align 8
// CHK-C-NEXT:    [[TMP135:%.*]] = bitcast double [[TMP134]] to i64
// CHK-C-NEXT:    [[TMP136:%.*]] = bitcast double [[TMP132]] to i64
// CHK-C-NEXT:    [[CMP71:%.*]] = icmp eq i64 [[TMP135]], [[TMP136]]
// CHK-C-NEXT:    br i1 [[CMP71]], label [[ATOMIC_CONT72:%.*]], label [[ATOMIC_EXIT77:%.*]]
// CHK-C:       atomic_cont72:
// CHK-C-NEXT:    [[TMP137:%.*]] = phi i64 [ [[ATOMIC_LOAD69]], [[ATOMIC_EXIT68]] ], [ [[TMP144:%.*]], [[ATOMIC_CMP75:%.*]] ]
// CHK-C-NEXT:    [[TMP138:%.*]] = bitcast i64 [[TMP137]] to double
// CHK-C-NEXT:    store double [[TMP138]], double* [[ATMP70]], align 8
// CHK-C-NEXT:    [[TMP139:%.*]] = bitcast double* [[ATOMIC_TEMP73]] to i64*
// CHK-C-NEXT:    [[TMP140:%.*]] = bitcast double [[TMP131]] to i64
// CHK-C-NEXT:    store i64 [[TMP140]], i64* [[TMP139]], align 8
// CHK-C-NEXT:    [[TMP141:%.*]] = load i64, i64* [[TMP139]], align 8
// CHK-C-NEXT:    [[TMP142:%.*]] = bitcast double* [[X]] to i64*
// CHK-C-NEXT:    [[TMP143:%.*]] = cmpxchg i64* [[TMP142]], i64 [[TMP137]], i64 [[TMP141]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP144]] = extractvalue { i64, i1 } [[TMP143]], 0
// CHK-C-NEXT:    [[TMP145:%.*]] = extractvalue { i64, i1 } [[TMP143]], 1
// CHK-C-NEXT:    br i1 [[TMP145]], label [[ATOMIC_UPD_EXIT74:%.*]], label [[ATOMIC_CMP75]]
// CHK-C:       atomic_upd_exit74:
// CHK-C-NEXT:    store double [[TMP131]], double* [[ATMP70]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_EXIT77]]
// CHK-C:       atomic_cmp75:
// CHK-C-NEXT:    [[TMP146:%.*]] = bitcast i64 [[TMP144]] to double
// CHK-C-NEXT:    [[TMP147:%.*]] = bitcast double [[TMP146]] to i64
// CHK-C-NEXT:    [[TMP148:%.*]] = bitcast double [[TMP132]] to i64
// CHK-C-NEXT:    [[CMP76:%.*]] = icmp eq i64 [[TMP147]], [[TMP148]]
// CHK-C-NEXT:    br i1 [[CMP76]], label [[ATOMIC_CONT72]], label [[ATOMIC_EXIT77]]
// CHK-C:       atomic_exit77:
// CHK-C-NEXT:    [[TMP149:%.*]] = load double, double* [[ATMP70]], align 8
// CHK-C-NEXT:    store double [[TMP149]], double* [[V]], align 8
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z11test_doublev(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[X:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[D:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[E:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[V:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP3:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP6:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP11:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP14:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP19:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP22:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP28:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP31:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP36:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP39:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP45:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP48:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP53:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP56:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP62:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP65:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP70:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP73:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load double, double* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[TMP1:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, i64* [[TMP1]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP2:%.*]] = bitcast i64 [[ATOMIC_LOAD]] to double
// CHK-CXX-NEXT:    store double [[TMP2]], double* [[TMP]], align 8
// CHK-CXX-NEXT:    [[CMP:%.*]] = fcmp ogt double [[TMP2]], [[TMP0]]
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP3:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP10:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    [[TMP4:%.*]] = bitcast i64 [[TMP3]] to double
// CHK-CXX-NEXT:    store double [[TMP4]], double* [[TMP]], align 8
// CHK-CXX-NEXT:    [[TMP5:%.*]] = bitcast double* [[ATOMIC_TEMP]] to i64*
// CHK-CXX-NEXT:    [[TMP6:%.*]] = bitcast double [[TMP0]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP6]], i64* [[TMP5]], align 8
// CHK-CXX-NEXT:    [[TMP7:%.*]] = load i64, i64* [[TMP5]], align 8
// CHK-CXX-NEXT:    [[TMP8:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP9:%.*]] = cmpxchg i64* [[TMP8]], i64 [[TMP3]], i64 [[TMP7]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP10]] = extractvalue { i64, i1 } [[TMP9]], 0
// CHK-CXX-NEXT:    [[TMP11:%.*]] = extractvalue { i64, i1 } [[TMP9]], 1
// CHK-CXX-NEXT:    br i1 [[TMP11]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    [[TMP12:%.*]] = bitcast i64 [[TMP10]] to double
// CHK-CXX-NEXT:    [[CMP1:%.*]] = fcmp ogt double [[TMP12]], [[TMP0]]
// CHK-CXX-NEXT:    br i1 [[CMP1]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP13:%.*]] = load double, double* [[TMP]], align 8
// CHK-CXX-NEXT:    store double [[TMP13]], double* [[V]], align 8
// CHK-CXX-NEXT:    [[TMP14:%.*]] = load double, double* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[TMP15:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD2:%.*]] = load atomic i64, i64* [[TMP15]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP16:%.*]] = bitcast i64 [[ATOMIC_LOAD2]] to double
// CHK-CXX-NEXT:    store double [[TMP16]], double* [[ATMP3]], align 8
// CHK-CXX-NEXT:    [[CMP4:%.*]] = fcmp ogt double [[TMP16]], [[TMP14]]
// CHK-CXX-NEXT:    br i1 [[CMP4]], label [[ATOMIC_CONT5:%.*]], label [[ATOMIC_EXIT9:%.*]]
// CHK-CXX:       atomic_cont5:
// CHK-CXX-NEXT:    [[TMP17:%.*]] = phi i64 [ [[ATOMIC_LOAD2]], [[ATOMIC_EXIT]] ], [ [[TMP24:%.*]], [[ATOMIC_CMP7:%.*]] ]
// CHK-CXX-NEXT:    [[TMP18:%.*]] = bitcast i64 [[TMP17]] to double
// CHK-CXX-NEXT:    store double [[TMP18]], double* [[ATMP3]], align 8
// CHK-CXX-NEXT:    [[TMP19:%.*]] = bitcast double* [[ATOMIC_TEMP6]] to i64*
// CHK-CXX-NEXT:    [[TMP20:%.*]] = bitcast double [[TMP14]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP20]], i64* [[TMP19]], align 8
// CHK-CXX-NEXT:    [[TMP21:%.*]] = load i64, i64* [[TMP19]], align 8
// CHK-CXX-NEXT:    [[TMP22:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP23:%.*]] = cmpxchg i64* [[TMP22]], i64 [[TMP17]], i64 [[TMP21]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP24]] = extractvalue { i64, i1 } [[TMP23]], 0
// CHK-CXX-NEXT:    [[TMP25:%.*]] = extractvalue { i64, i1 } [[TMP23]], 1
// CHK-CXX-NEXT:    br i1 [[TMP25]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP7]]
// CHK-CXX:       atomic_upd_exit:
// CHK-CXX-NEXT:    store double [[TMP14]], double* [[ATMP3]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT9]]
// CHK-CXX:       atomic_cmp7:
// CHK-CXX-NEXT:    [[TMP26:%.*]] = bitcast i64 [[TMP24]] to double
// CHK-CXX-NEXT:    [[CMP8:%.*]] = fcmp ogt double [[TMP26]], [[TMP14]]
// CHK-CXX-NEXT:    br i1 [[CMP8]], label [[ATOMIC_CONT5]], label [[ATOMIC_EXIT9]]
// CHK-CXX:       atomic_exit9:
// CHK-CXX-NEXT:    [[TMP27:%.*]] = load double, double* [[ATMP3]], align 8
// CHK-CXX-NEXT:    store double [[TMP27]], double* [[V]], align 8
// CHK-CXX-NEXT:    [[TMP28:%.*]] = load double, double* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[TMP29:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD10:%.*]] = load atomic i64, i64* [[TMP29]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP30:%.*]] = bitcast i64 [[ATOMIC_LOAD10]] to double
// CHK-CXX-NEXT:    store double [[TMP30]], double* [[ATMP11]], align 8
// CHK-CXX-NEXT:    [[CMP12:%.*]] = fcmp olt double [[TMP30]], [[TMP28]]
// CHK-CXX-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT13:%.*]], label [[ATOMIC_EXIT17:%.*]]
// CHK-CXX:       atomic_cont13:
// CHK-CXX-NEXT:    [[TMP31:%.*]] = phi i64 [ [[ATOMIC_LOAD10]], [[ATOMIC_EXIT9]] ], [ [[TMP38:%.*]], [[ATOMIC_CMP15:%.*]] ]
// CHK-CXX-NEXT:    [[TMP32:%.*]] = bitcast i64 [[TMP31]] to double
// CHK-CXX-NEXT:    store double [[TMP32]], double* [[ATMP11]], align 8
// CHK-CXX-NEXT:    [[TMP33:%.*]] = bitcast double* [[ATOMIC_TEMP14]] to i64*
// CHK-CXX-NEXT:    [[TMP34:%.*]] = bitcast double [[TMP28]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP34]], i64* [[TMP33]], align 8
// CHK-CXX-NEXT:    [[TMP35:%.*]] = load i64, i64* [[TMP33]], align 8
// CHK-CXX-NEXT:    [[TMP36:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP37:%.*]] = cmpxchg i64* [[TMP36]], i64 [[TMP31]], i64 [[TMP35]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP38]] = extractvalue { i64, i1 } [[TMP37]], 0
// CHK-CXX-NEXT:    [[TMP39:%.*]] = extractvalue { i64, i1 } [[TMP37]], 1
// CHK-CXX-NEXT:    br i1 [[TMP39]], label [[ATOMIC_EXIT17]], label [[ATOMIC_CMP15]]
// CHK-CXX:       atomic_cmp15:
// CHK-CXX-NEXT:    [[TMP40:%.*]] = bitcast i64 [[TMP38]] to double
// CHK-CXX-NEXT:    [[CMP16:%.*]] = fcmp olt double [[TMP40]], [[TMP28]]
// CHK-CXX-NEXT:    br i1 [[CMP16]], label [[ATOMIC_CONT13]], label [[ATOMIC_EXIT17]]
// CHK-CXX:       atomic_exit17:
// CHK-CXX-NEXT:    [[TMP41:%.*]] = load double, double* [[ATMP11]], align 8
// CHK-CXX-NEXT:    store double [[TMP41]], double* [[V]], align 8
// CHK-CXX-NEXT:    [[TMP42:%.*]] = load double, double* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[TMP43:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD18:%.*]] = load atomic i64, i64* [[TMP43]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP44:%.*]] = bitcast i64 [[ATOMIC_LOAD18]] to double
// CHK-CXX-NEXT:    store double [[TMP44]], double* [[ATMP19]], align 8
// CHK-CXX-NEXT:    [[CMP20:%.*]] = fcmp olt double [[TMP44]], [[TMP42]]
// CHK-CXX-NEXT:    br i1 [[CMP20]], label [[ATOMIC_CONT21:%.*]], label [[ATOMIC_EXIT26:%.*]]
// CHK-CXX:       atomic_cont21:
// CHK-CXX-NEXT:    [[TMP45:%.*]] = phi i64 [ [[ATOMIC_LOAD18]], [[ATOMIC_EXIT17]] ], [ [[TMP52:%.*]], [[ATOMIC_CMP24:%.*]] ]
// CHK-CXX-NEXT:    [[TMP46:%.*]] = bitcast i64 [[TMP45]] to double
// CHK-CXX-NEXT:    store double [[TMP46]], double* [[ATMP19]], align 8
// CHK-CXX-NEXT:    [[TMP47:%.*]] = bitcast double* [[ATOMIC_TEMP22]] to i64*
// CHK-CXX-NEXT:    [[TMP48:%.*]] = bitcast double [[TMP42]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP48]], i64* [[TMP47]], align 8
// CHK-CXX-NEXT:    [[TMP49:%.*]] = load i64, i64* [[TMP47]], align 8
// CHK-CXX-NEXT:    [[TMP50:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP51:%.*]] = cmpxchg i64* [[TMP50]], i64 [[TMP45]], i64 [[TMP49]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP52]] = extractvalue { i64, i1 } [[TMP51]], 0
// CHK-CXX-NEXT:    [[TMP53:%.*]] = extractvalue { i64, i1 } [[TMP51]], 1
// CHK-CXX-NEXT:    br i1 [[TMP53]], label [[ATOMIC_UPD_EXIT23:%.*]], label [[ATOMIC_CMP24]]
// CHK-CXX:       atomic_upd_exit23:
// CHK-CXX-NEXT:    store double [[TMP42]], double* [[ATMP19]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT26]]
// CHK-CXX:       atomic_cmp24:
// CHK-CXX-NEXT:    [[TMP54:%.*]] = bitcast i64 [[TMP52]] to double
// CHK-CXX-NEXT:    [[CMP25:%.*]] = fcmp olt double [[TMP54]], [[TMP42]]
// CHK-CXX-NEXT:    br i1 [[CMP25]], label [[ATOMIC_CONT21]], label [[ATOMIC_EXIT26]]
// CHK-CXX:       atomic_exit26:
// CHK-CXX-NEXT:    [[TMP55:%.*]] = load double, double* [[ATMP19]], align 8
// CHK-CXX-NEXT:    store double [[TMP55]], double* [[V]], align 8
// CHK-CXX-NEXT:    [[TMP56:%.*]] = load double, double* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[TMP57:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD27:%.*]] = load atomic i64, i64* [[TMP57]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP58:%.*]] = bitcast i64 [[ATOMIC_LOAD27]] to double
// CHK-CXX-NEXT:    store double [[TMP58]], double* [[ATMP28]], align 8
// CHK-CXX-NEXT:    [[CMP29:%.*]] = fcmp olt double [[TMP58]], [[TMP56]]
// CHK-CXX-NEXT:    br i1 [[CMP29]], label [[ATOMIC_CONT30:%.*]], label [[ATOMIC_EXIT34:%.*]]
// CHK-CXX:       atomic_cont30:
// CHK-CXX-NEXT:    [[TMP59:%.*]] = phi i64 [ [[ATOMIC_LOAD27]], [[ATOMIC_EXIT26]] ], [ [[TMP66:%.*]], [[ATOMIC_CMP32:%.*]] ]
// CHK-CXX-NEXT:    [[TMP60:%.*]] = bitcast i64 [[TMP59]] to double
// CHK-CXX-NEXT:    store double [[TMP60]], double* [[ATMP28]], align 8
// CHK-CXX-NEXT:    [[TMP61:%.*]] = bitcast double* [[ATOMIC_TEMP31]] to i64*
// CHK-CXX-NEXT:    [[TMP62:%.*]] = bitcast double [[TMP56]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP62]], i64* [[TMP61]], align 8
// CHK-CXX-NEXT:    [[TMP63:%.*]] = load i64, i64* [[TMP61]], align 8
// CHK-CXX-NEXT:    [[TMP64:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP65:%.*]] = cmpxchg i64* [[TMP64]], i64 [[TMP59]], i64 [[TMP63]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP66]] = extractvalue { i64, i1 } [[TMP65]], 0
// CHK-CXX-NEXT:    [[TMP67:%.*]] = extractvalue { i64, i1 } [[TMP65]], 1
// CHK-CXX-NEXT:    br i1 [[TMP67]], label [[ATOMIC_EXIT34]], label [[ATOMIC_CMP32]]
// CHK-CXX:       atomic_cmp32:
// CHK-CXX-NEXT:    [[TMP68:%.*]] = bitcast i64 [[TMP66]] to double
// CHK-CXX-NEXT:    [[CMP33:%.*]] = fcmp olt double [[TMP68]], [[TMP56]]
// CHK-CXX-NEXT:    br i1 [[CMP33]], label [[ATOMIC_CONT30]], label [[ATOMIC_EXIT34]]
// CHK-CXX:       atomic_exit34:
// CHK-CXX-NEXT:    [[TMP69:%.*]] = load double, double* [[ATMP28]], align 8
// CHK-CXX-NEXT:    store double [[TMP69]], double* [[V]], align 8
// CHK-CXX-NEXT:    [[TMP70:%.*]] = load double, double* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[TMP71:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD35:%.*]] = load atomic i64, i64* [[TMP71]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP72:%.*]] = bitcast i64 [[ATOMIC_LOAD35]] to double
// CHK-CXX-NEXT:    store double [[TMP72]], double* [[ATMP36]], align 8
// CHK-CXX-NEXT:    [[CMP37:%.*]] = fcmp olt double [[TMP72]], [[TMP70]]
// CHK-CXX-NEXT:    br i1 [[CMP37]], label [[ATOMIC_CONT38:%.*]], label [[ATOMIC_EXIT43:%.*]]
// CHK-CXX:       atomic_cont38:
// CHK-CXX-NEXT:    [[TMP73:%.*]] = phi i64 [ [[ATOMIC_LOAD35]], [[ATOMIC_EXIT34]] ], [ [[TMP80:%.*]], [[ATOMIC_CMP41:%.*]] ]
// CHK-CXX-NEXT:    [[TMP74:%.*]] = bitcast i64 [[TMP73]] to double
// CHK-CXX-NEXT:    store double [[TMP74]], double* [[ATMP36]], align 8
// CHK-CXX-NEXT:    [[TMP75:%.*]] = bitcast double* [[ATOMIC_TEMP39]] to i64*
// CHK-CXX-NEXT:    [[TMP76:%.*]] = bitcast double [[TMP70]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP76]], i64* [[TMP75]], align 8
// CHK-CXX-NEXT:    [[TMP77:%.*]] = load i64, i64* [[TMP75]], align 8
// CHK-CXX-NEXT:    [[TMP78:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP79:%.*]] = cmpxchg i64* [[TMP78]], i64 [[TMP73]], i64 [[TMP77]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP80]] = extractvalue { i64, i1 } [[TMP79]], 0
// CHK-CXX-NEXT:    [[TMP81:%.*]] = extractvalue { i64, i1 } [[TMP79]], 1
// CHK-CXX-NEXT:    br i1 [[TMP81]], label [[ATOMIC_UPD_EXIT40:%.*]], label [[ATOMIC_CMP41]]
// CHK-CXX:       atomic_upd_exit40:
// CHK-CXX-NEXT:    store double [[TMP70]], double* [[ATMP36]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT43]]
// CHK-CXX:       atomic_cmp41:
// CHK-CXX-NEXT:    [[TMP82:%.*]] = bitcast i64 [[TMP80]] to double
// CHK-CXX-NEXT:    [[CMP42:%.*]] = fcmp olt double [[TMP82]], [[TMP70]]
// CHK-CXX-NEXT:    br i1 [[CMP42]], label [[ATOMIC_CONT38]], label [[ATOMIC_EXIT43]]
// CHK-CXX:       atomic_exit43:
// CHK-CXX-NEXT:    [[TMP83:%.*]] = load double, double* [[ATMP36]], align 8
// CHK-CXX-NEXT:    store double [[TMP83]], double* [[V]], align 8
// CHK-CXX-NEXT:    [[TMP84:%.*]] = load double, double* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[TMP85:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD44:%.*]] = load atomic i64, i64* [[TMP85]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP86:%.*]] = bitcast i64 [[ATOMIC_LOAD44]] to double
// CHK-CXX-NEXT:    store double [[TMP86]], double* [[ATMP45]], align 8
// CHK-CXX-NEXT:    [[CMP46:%.*]] = fcmp ogt double [[TMP86]], [[TMP84]]
// CHK-CXX-NEXT:    br i1 [[CMP46]], label [[ATOMIC_CONT47:%.*]], label [[ATOMIC_EXIT51:%.*]]
// CHK-CXX:       atomic_cont47:
// CHK-CXX-NEXT:    [[TMP87:%.*]] = phi i64 [ [[ATOMIC_LOAD44]], [[ATOMIC_EXIT43]] ], [ [[TMP94:%.*]], [[ATOMIC_CMP49:%.*]] ]
// CHK-CXX-NEXT:    [[TMP88:%.*]] = bitcast i64 [[TMP87]] to double
// CHK-CXX-NEXT:    store double [[TMP88]], double* [[ATMP45]], align 8
// CHK-CXX-NEXT:    [[TMP89:%.*]] = bitcast double* [[ATOMIC_TEMP48]] to i64*
// CHK-CXX-NEXT:    [[TMP90:%.*]] = bitcast double [[TMP84]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP90]], i64* [[TMP89]], align 8
// CHK-CXX-NEXT:    [[TMP91:%.*]] = load i64, i64* [[TMP89]], align 8
// CHK-CXX-NEXT:    [[TMP92:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP93:%.*]] = cmpxchg i64* [[TMP92]], i64 [[TMP87]], i64 [[TMP91]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP94]] = extractvalue { i64, i1 } [[TMP93]], 0
// CHK-CXX-NEXT:    [[TMP95:%.*]] = extractvalue { i64, i1 } [[TMP93]], 1
// CHK-CXX-NEXT:    br i1 [[TMP95]], label [[ATOMIC_EXIT51]], label [[ATOMIC_CMP49]]
// CHK-CXX:       atomic_cmp49:
// CHK-CXX-NEXT:    [[TMP96:%.*]] = bitcast i64 [[TMP94]] to double
// CHK-CXX-NEXT:    [[CMP50:%.*]] = fcmp ogt double [[TMP96]], [[TMP84]]
// CHK-CXX-NEXT:    br i1 [[CMP50]], label [[ATOMIC_CONT47]], label [[ATOMIC_EXIT51]]
// CHK-CXX:       atomic_exit51:
// CHK-CXX-NEXT:    [[TMP97:%.*]] = load double, double* [[ATMP45]], align 8
// CHK-CXX-NEXT:    store double [[TMP97]], double* [[V]], align 8
// CHK-CXX-NEXT:    [[TMP98:%.*]] = load double, double* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[TMP99:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD52:%.*]] = load atomic i64, i64* [[TMP99]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP100:%.*]] = bitcast i64 [[ATOMIC_LOAD52]] to double
// CHK-CXX-NEXT:    store double [[TMP100]], double* [[ATMP53]], align 8
// CHK-CXX-NEXT:    [[CMP54:%.*]] = fcmp ogt double [[TMP100]], [[TMP98]]
// CHK-CXX-NEXT:    br i1 [[CMP54]], label [[ATOMIC_CONT55:%.*]], label [[ATOMIC_EXIT60:%.*]]
// CHK-CXX:       atomic_cont55:
// CHK-CXX-NEXT:    [[TMP101:%.*]] = phi i64 [ [[ATOMIC_LOAD52]], [[ATOMIC_EXIT51]] ], [ [[TMP108:%.*]], [[ATOMIC_CMP58:%.*]] ]
// CHK-CXX-NEXT:    [[TMP102:%.*]] = bitcast i64 [[TMP101]] to double
// CHK-CXX-NEXT:    store double [[TMP102]], double* [[ATMP53]], align 8
// CHK-CXX-NEXT:    [[TMP103:%.*]] = bitcast double* [[ATOMIC_TEMP56]] to i64*
// CHK-CXX-NEXT:    [[TMP104:%.*]] = bitcast double [[TMP98]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP104]], i64* [[TMP103]], align 8
// CHK-CXX-NEXT:    [[TMP105:%.*]] = load i64, i64* [[TMP103]], align 8
// CHK-CXX-NEXT:    [[TMP106:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP107:%.*]] = cmpxchg i64* [[TMP106]], i64 [[TMP101]], i64 [[TMP105]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP108]] = extractvalue { i64, i1 } [[TMP107]], 0
// CHK-CXX-NEXT:    [[TMP109:%.*]] = extractvalue { i64, i1 } [[TMP107]], 1
// CHK-CXX-NEXT:    br i1 [[TMP109]], label [[ATOMIC_UPD_EXIT57:%.*]], label [[ATOMIC_CMP58]]
// CHK-CXX:       atomic_upd_exit57:
// CHK-CXX-NEXT:    store double [[TMP98]], double* [[ATMP53]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT60]]
// CHK-CXX:       atomic_cmp58:
// CHK-CXX-NEXT:    [[TMP110:%.*]] = bitcast i64 [[TMP108]] to double
// CHK-CXX-NEXT:    [[CMP59:%.*]] = fcmp ogt double [[TMP110]], [[TMP98]]
// CHK-CXX-NEXT:    br i1 [[CMP59]], label [[ATOMIC_CONT55]], label [[ATOMIC_EXIT60]]
// CHK-CXX:       atomic_exit60:
// CHK-CXX-NEXT:    [[TMP111:%.*]] = load double, double* [[ATMP53]], align 8
// CHK-CXX-NEXT:    store double [[TMP111]], double* [[V]], align 8
// CHK-CXX-NEXT:    [[TMP112:%.*]] = load double, double* [[D]], align 8
// CHK-CXX-NEXT:    [[TMP113:%.*]] = load double, double* [[E]], align 8
// CHK-CXX-NEXT:    [[TMP114:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD61:%.*]] = load atomic i64, i64* [[TMP114]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP115:%.*]] = bitcast i64 [[ATOMIC_LOAD61]] to double
// CHK-CXX-NEXT:    store double [[TMP115]], double* [[ATMP62]], align 8
// CHK-CXX-NEXT:    [[TMP116:%.*]] = bitcast double [[TMP115]] to i64
// CHK-CXX-NEXT:    [[TMP117:%.*]] = bitcast double [[TMP113]] to i64
// CHK-CXX-NEXT:    [[CMP63:%.*]] = icmp eq i64 [[TMP116]], [[TMP117]]
// CHK-CXX-NEXT:    br i1 [[CMP63]], label [[ATOMIC_CONT64:%.*]], label [[ATOMIC_EXIT68:%.*]]
// CHK-CXX:       atomic_cont64:
// CHK-CXX-NEXT:    [[TMP118:%.*]] = phi i64 [ [[ATOMIC_LOAD61]], [[ATOMIC_EXIT60]] ], [ [[TMP125:%.*]], [[ATOMIC_CMP66:%.*]] ]
// CHK-CXX-NEXT:    [[TMP119:%.*]] = bitcast i64 [[TMP118]] to double
// CHK-CXX-NEXT:    store double [[TMP119]], double* [[ATMP62]], align 8
// CHK-CXX-NEXT:    [[TMP120:%.*]] = bitcast double* [[ATOMIC_TEMP65]] to i64*
// CHK-CXX-NEXT:    [[TMP121:%.*]] = bitcast double [[TMP112]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP121]], i64* [[TMP120]], align 8
// CHK-CXX-NEXT:    [[TMP122:%.*]] = load i64, i64* [[TMP120]], align 8
// CHK-CXX-NEXT:    [[TMP123:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP124:%.*]] = cmpxchg i64* [[TMP123]], i64 [[TMP118]], i64 [[TMP122]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP125]] = extractvalue { i64, i1 } [[TMP124]], 0
// CHK-CXX-NEXT:    [[TMP126:%.*]] = extractvalue { i64, i1 } [[TMP124]], 1
// CHK-CXX-NEXT:    br i1 [[TMP126]], label [[ATOMIC_EXIT68]], label [[ATOMIC_CMP66]]
// CHK-CXX:       atomic_cmp66:
// CHK-CXX-NEXT:    [[TMP127:%.*]] = bitcast i64 [[TMP125]] to double
// CHK-CXX-NEXT:    [[TMP128:%.*]] = bitcast double [[TMP127]] to i64
// CHK-CXX-NEXT:    [[TMP129:%.*]] = bitcast double [[TMP113]] to i64
// CHK-CXX-NEXT:    [[CMP67:%.*]] = icmp eq i64 [[TMP128]], [[TMP129]]
// CHK-CXX-NEXT:    br i1 [[CMP67]], label [[ATOMIC_CONT64]], label [[ATOMIC_EXIT68]]
// CHK-CXX:       atomic_exit68:
// CHK-CXX-NEXT:    [[TMP130:%.*]] = load double, double* [[ATMP62]], align 8
// CHK-CXX-NEXT:    store double [[TMP130]], double* [[V]], align 8
// CHK-CXX-NEXT:    [[TMP131:%.*]] = load double, double* [[D]], align 8
// CHK-CXX-NEXT:    [[TMP132:%.*]] = load double, double* [[E]], align 8
// CHK-CXX-NEXT:    [[TMP133:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD69:%.*]] = load atomic i64, i64* [[TMP133]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP134:%.*]] = bitcast i64 [[ATOMIC_LOAD69]] to double
// CHK-CXX-NEXT:    store double [[TMP134]], double* [[ATMP70]], align 8
// CHK-CXX-NEXT:    [[TMP135:%.*]] = bitcast double [[TMP134]] to i64
// CHK-CXX-NEXT:    [[TMP136:%.*]] = bitcast double [[TMP132]] to i64
// CHK-CXX-NEXT:    [[CMP71:%.*]] = icmp eq i64 [[TMP135]], [[TMP136]]
// CHK-CXX-NEXT:    br i1 [[CMP71]], label [[ATOMIC_CONT72:%.*]], label [[ATOMIC_EXIT77:%.*]]
// CHK-CXX:       atomic_cont72:
// CHK-CXX-NEXT:    [[TMP137:%.*]] = phi i64 [ [[ATOMIC_LOAD69]], [[ATOMIC_EXIT68]] ], [ [[TMP144:%.*]], [[ATOMIC_CMP75:%.*]] ]
// CHK-CXX-NEXT:    [[TMP138:%.*]] = bitcast i64 [[TMP137]] to double
// CHK-CXX-NEXT:    store double [[TMP138]], double* [[ATMP70]], align 8
// CHK-CXX-NEXT:    [[TMP139:%.*]] = bitcast double* [[ATOMIC_TEMP73]] to i64*
// CHK-CXX-NEXT:    [[TMP140:%.*]] = bitcast double [[TMP131]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP140]], i64* [[TMP139]], align 8
// CHK-CXX-NEXT:    [[TMP141:%.*]] = load i64, i64* [[TMP139]], align 8
// CHK-CXX-NEXT:    [[TMP142:%.*]] = bitcast double* [[X]] to i64*
// CHK-CXX-NEXT:    [[TMP143:%.*]] = cmpxchg i64* [[TMP142]], i64 [[TMP137]], i64 [[TMP141]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP144]] = extractvalue { i64, i1 } [[TMP143]], 0
// CHK-CXX-NEXT:    [[TMP145:%.*]] = extractvalue { i64, i1 } [[TMP143]], 1
// CHK-CXX-NEXT:    br i1 [[TMP145]], label [[ATOMIC_UPD_EXIT74:%.*]], label [[ATOMIC_CMP75]]
// CHK-CXX:       atomic_upd_exit74:
// CHK-CXX-NEXT:    store double [[TMP131]], double* [[ATMP70]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT77]]
// CHK-CXX:       atomic_cmp75:
// CHK-CXX-NEXT:    [[TMP146:%.*]] = bitcast i64 [[TMP144]] to double
// CHK-CXX-NEXT:    [[TMP147:%.*]] = bitcast double [[TMP146]] to i64
// CHK-CXX-NEXT:    [[TMP148:%.*]] = bitcast double [[TMP132]] to i64
// CHK-CXX-NEXT:    [[CMP76:%.*]] = icmp eq i64 [[TMP147]], [[TMP148]]
// CHK-CXX-NEXT:    br i1 [[CMP76]], label [[ATOMIC_CONT72]], label [[ATOMIC_EXIT77]]
// CHK-CXX:       atomic_exit77:
// CHK-CXX-NEXT:    [[TMP149:%.*]] = load double, double* [[ATMP70]], align 8
// CHK-CXX-NEXT:    store double [[TMP149]], double* [[V]], align 8
// CHK-CXX-NEXT:    ret void
//
void test_double() {
    // One of each form with 'double'.
    double x, expr, d, e, v;

    #pragma omp atomic compare capture
    { v = x; if (expr < x) { x = expr; } } // MIN

    #pragma omp atomic compare capture
    { if (expr < x) { x = expr; } v =x ;} // MIN

    #pragma omp atomic compare capture
    { v = x; if (expr > x) { x = expr; } } // MAX

    #pragma omp atomic compare capture
    { if (expr > x) { x = expr; } v = x; } // MAX

    #pragma omp atomic compare capture
    { v = x; if (x < expr) { x = expr; } } // MAX

    #pragma omp atomic compare capture
    { if (x < expr) { x = expr; } v = x; } // MAX

    #pragma omp atomic compare capture
    { v = x; if (x > expr) { x = expr; } } // MIN

    #pragma omp atomic compare capture
    { if (x > expr) { x = expr; } v = x; } // MIN

    #pragma omp atomic compare capture
    { v = x; if (x == e) { x = d; } }

    #pragma omp atomic compare capture
    { if (x == e) { x = d; } v = x; }
}

// CHK-C-LABEL: @test_bool(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[X:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[D:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[E:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[V:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[TMP:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATMP4:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP7:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[TMP0:%.*]] = load i8, i8* [[EXPR]], align 1
// CHK-C-NEXT:    [[TOBOOL:%.*]] = trunc i8 [[TMP0]] to i1
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i8, i8* [[X]] monotonic, align 1
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD]], i8* [[TMP]], align 1
// CHK-C-NEXT:    [[TMP1:%.*]] = trunc i8 [[ATOMIC_LOAD]] to i1
// CHK-C-NEXT:    [[CMP:%.*]] = icmp ult i1 [[TMP1]], [[TOBOOL]]
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP2:%.*]] = phi i8 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP5:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    store i8 [[TMP2]], i8* [[TMP]], align 1
// CHK-C-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[TOBOOL]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL]], i8* [[ATOMIC_TEMP]], align 1
// CHK-C-NEXT:    [[TMP3:%.*]] = load i8, i8* [[ATOMIC_TEMP]], align 1
// CHK-C-NEXT:    [[TMP4:%.*]] = cmpxchg i8* [[X]], i8 [[TMP2]], i8 [[TMP3]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP5]] = extractvalue { i8, i1 } [[TMP4]], 0
// CHK-C-NEXT:    [[TMP6:%.*]] = extractvalue { i8, i1 } [[TMP4]], 1
// CHK-C-NEXT:    br i1 [[TMP6]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    [[TMP7:%.*]] = trunc i8 [[TMP5]] to i1
// CHK-C-NEXT:    [[CMP1:%.*]] = icmp ult i1 [[TMP7]], [[TOBOOL]]
// CHK-C-NEXT:    br i1 [[CMP1]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP8:%.*]] = load i8, i8* [[TMP]], align 1
// CHK-C-NEXT:    store i8 [[TMP8]], i8* [[V]], align 1
// CHK-C-NEXT:    [[TMP9:%.*]] = load i8, i8* [[EXPR]], align 1
// CHK-C-NEXT:    [[TOBOOL2:%.*]] = trunc i8 [[TMP9]] to i1
// CHK-C-NEXT:    [[ATOMIC_LOAD3:%.*]] = load atomic i8, i8* [[X]] monotonic, align 1
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD3]], i8* [[ATMP4]], align 1
// CHK-C-NEXT:    [[TMP10:%.*]] = trunc i8 [[ATOMIC_LOAD3]] to i1
// CHK-C-NEXT:    [[CMP5:%.*]] = icmp ult i1 [[TMP10]], [[TOBOOL2]]
// CHK-C-NEXT:    br i1 [[CMP5]], label [[ATOMIC_CONT6:%.*]], label [[ATOMIC_EXIT11:%.*]]
// CHK-C:       atomic_cont6:
// CHK-C-NEXT:    [[TMP11:%.*]] = phi i8 [ [[ATOMIC_LOAD3]], [[ATOMIC_EXIT]] ], [ [[TMP14:%.*]], [[ATOMIC_CMP9:%.*]] ]
// CHK-C-NEXT:    store i8 [[TMP11]], i8* [[ATMP4]], align 1
// CHK-C-NEXT:    [[FROMBOOL8:%.*]] = zext i1 [[TOBOOL2]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL8]], i8* [[ATOMIC_TEMP7]], align 1
// CHK-C-NEXT:    [[TMP12:%.*]] = load i8, i8* [[ATOMIC_TEMP7]], align 1
// CHK-C-NEXT:    [[TMP13:%.*]] = cmpxchg i8* [[X]], i8 [[TMP11]], i8 [[TMP12]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP14]] = extractvalue { i8, i1 } [[TMP13]], 0
// CHK-C-NEXT:    [[TMP15:%.*]] = extractvalue { i8, i1 } [[TMP13]], 1
// CHK-C-NEXT:    br i1 [[TMP15]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP9]]
// CHK-C:       atomic_upd_exit:
// CHK-C-NEXT:    [[TMP16:%.*]] = zext i1 [[TOBOOL2]] to i8
// CHK-C-NEXT:    store i8 [[TMP16]], i8* [[ATMP4]], align 1
// CHK-C-NEXT:    br label [[ATOMIC_EXIT11]]
// CHK-C:       atomic_cmp9:
// CHK-C-NEXT:    [[TMP17:%.*]] = trunc i8 [[TMP14]] to i1
// CHK-C-NEXT:    [[CMP10:%.*]] = icmp ult i1 [[TMP17]], [[TOBOOL2]]
// CHK-C-NEXT:    br i1 [[CMP10]], label [[ATOMIC_CONT6]], label [[ATOMIC_EXIT11]]
// CHK-C:       atomic_exit11:
// CHK-C-NEXT:    [[TMP18:%.*]] = load i8, i8* [[ATMP4]], align 1
// CHK-C-NEXT:    store i8 [[TMP18]], i8* [[V]], align 1
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z9test_boolv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[X:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[V:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATMP4:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP7:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i8, i8* [[EXPR]], align 1
// CHK-CXX-NEXT:    [[TOBOOL:%.*]] = trunc i8 [[TMP0]] to i1
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i8, i8* [[X]] monotonic, align 1
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD]], i8* [[TMP]], align 1
// CHK-CXX-NEXT:    [[TMP1:%.*]] = trunc i8 [[ATOMIC_LOAD]] to i1
// CHK-CXX-NEXT:    [[CMP:%.*]] = icmp ult i1 [[TMP1]], [[TOBOOL]]
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP2:%.*]] = phi i8 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP5:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    store i8 [[TMP2]], i8* [[TMP]], align 1
// CHK-CXX-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[TOBOOL]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL]], i8* [[ATOMIC_TEMP]], align 1
// CHK-CXX-NEXT:    [[TMP3:%.*]] = load i8, i8* [[ATOMIC_TEMP]], align 1
// CHK-CXX-NEXT:    [[TMP4:%.*]] = cmpxchg i8* [[X]], i8 [[TMP2]], i8 [[TMP3]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP5]] = extractvalue { i8, i1 } [[TMP4]], 0
// CHK-CXX-NEXT:    [[TMP6:%.*]] = extractvalue { i8, i1 } [[TMP4]], 1
// CHK-CXX-NEXT:    br i1 [[TMP6]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    [[TMP7:%.*]] = trunc i8 [[TMP5]] to i1
// CHK-CXX-NEXT:    [[CMP1:%.*]] = icmp ult i1 [[TMP7]], [[TOBOOL]]
// CHK-CXX-NEXT:    br i1 [[CMP1]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP8:%.*]] = load i8, i8* [[TMP]], align 1
// CHK-CXX-NEXT:    store i8 [[TMP8]], i8* [[V]], align 1
// CHK-CXX-NEXT:    [[TMP9:%.*]] = load i8, i8* [[EXPR]], align 1
// CHK-CXX-NEXT:    [[TOBOOL2:%.*]] = trunc i8 [[TMP9]] to i1
// CHK-CXX-NEXT:    [[ATOMIC_LOAD3:%.*]] = load atomic i8, i8* [[X]] monotonic, align 1
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD3]], i8* [[ATMP4]], align 1
// CHK-CXX-NEXT:    [[TMP10:%.*]] = trunc i8 [[ATOMIC_LOAD3]] to i1
// CHK-CXX-NEXT:    [[CMP5:%.*]] = icmp ult i1 [[TMP10]], [[TOBOOL2]]
// CHK-CXX-NEXT:    br i1 [[CMP5]], label [[ATOMIC_CONT6:%.*]], label [[ATOMIC_EXIT11:%.*]]
// CHK-CXX:       atomic_cont6:
// CHK-CXX-NEXT:    [[TMP11:%.*]] = phi i8 [ [[ATOMIC_LOAD3]], [[ATOMIC_EXIT]] ], [ [[TMP14:%.*]], [[ATOMIC_CMP9:%.*]] ]
// CHK-CXX-NEXT:    store i8 [[TMP11]], i8* [[ATMP4]], align 1
// CHK-CXX-NEXT:    [[FROMBOOL8:%.*]] = zext i1 [[TOBOOL2]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL8]], i8* [[ATOMIC_TEMP7]], align 1
// CHK-CXX-NEXT:    [[TMP12:%.*]] = load i8, i8* [[ATOMIC_TEMP7]], align 1
// CHK-CXX-NEXT:    [[TMP13:%.*]] = cmpxchg i8* [[X]], i8 [[TMP11]], i8 [[TMP12]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP14]] = extractvalue { i8, i1 } [[TMP13]], 0
// CHK-CXX-NEXT:    [[TMP15:%.*]] = extractvalue { i8, i1 } [[TMP13]], 1
// CHK-CXX-NEXT:    br i1 [[TMP15]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP9]]
// CHK-CXX:       atomic_upd_exit:
// CHK-CXX-NEXT:    [[TMP16:%.*]] = zext i1 [[TOBOOL2]] to i8
// CHK-CXX-NEXT:    store i8 [[TMP16]], i8* [[ATMP4]], align 1
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT11]]
// CHK-CXX:       atomic_cmp9:
// CHK-CXX-NEXT:    [[TMP17:%.*]] = trunc i8 [[TMP14]] to i1
// CHK-CXX-NEXT:    [[CMP10:%.*]] = icmp ult i1 [[TMP17]], [[TOBOOL2]]
// CHK-CXX-NEXT:    br i1 [[CMP10]], label [[ATOMIC_CONT6]], label [[ATOMIC_EXIT11]]
// CHK-CXX:       atomic_exit11:
// CHK-CXX-NEXT:    [[TMP18:%.*]] = load i8, i8* [[ATMP4]], align 1
// CHK-CXX-NEXT:    store i8 [[TMP18]], i8* [[V]], align 1
// CHK-CXX-NEXT:    ret void
//
void test_bool() {
#ifdef __cplusplus
  bool x, expr, d, e, v;
#else
  _Bool x, expr, d, e, v;
#endif

  #pragma omp atomic compare capture
  { v = x; if (x < expr) { x = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (x < expr) { x = expr; } v = x; } // MAX
}

// CHK-C-LABEL: @test_long_long(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[X:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[D:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[E:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[V:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[TMP:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP3:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP6:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[TMP0:%.*]] = load i64, i64* [[EXPR]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, i64* [[X]] monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD]], i64* [[TMP]], align 8
// CHK-C-NEXT:    [[CMP:%.*]] = icmp slt i64 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP1:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP1]], i64* [[TMP]], align 8
// CHK-C-NEXT:    store i64 [[TMP0]], i64* [[ATOMIC_TEMP]], align 8
// CHK-C-NEXT:    [[TMP2:%.*]] = load i64, i64* [[ATOMIC_TEMP]], align 8
// CHK-C-NEXT:    [[TMP3:%.*]] = cmpxchg i64* [[X]], i64 [[TMP1]], i64 [[TMP2]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP4]] = extractvalue { i64, i1 } [[TMP3]], 0
// CHK-C-NEXT:    [[TMP5:%.*]] = extractvalue { i64, i1 } [[TMP3]], 1
// CHK-C-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    [[CMP1:%.*]] = icmp slt i64 [[TMP4]], [[TMP0]]
// CHK-C-NEXT:    br i1 [[CMP1]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP6:%.*]] = load i64, i64* [[TMP]], align 8
// CHK-C-NEXT:    store i64 [[TMP6]], i64* [[V]], align 8
// CHK-C-NEXT:    [[TMP7:%.*]] = load i64, i64* [[EXPR]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD2:%.*]] = load atomic i64, i64* [[X]] monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD2]], i64* [[ATMP3]], align 8
// CHK-C-NEXT:    [[CMP4:%.*]] = icmp slt i64 [[ATOMIC_LOAD2]], [[TMP7]]
// CHK-C-NEXT:    br i1 [[CMP4]], label [[ATOMIC_CONT5:%.*]], label [[ATOMIC_EXIT9:%.*]]
// CHK-C:       atomic_cont5:
// CHK-C-NEXT:    [[TMP8:%.*]] = phi i64 [ [[ATOMIC_LOAD2]], [[ATOMIC_EXIT]] ], [ [[TMP11:%.*]], [[ATOMIC_CMP7:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP8]], i64* [[ATMP3]], align 8
// CHK-C-NEXT:    store i64 [[TMP7]], i64* [[ATOMIC_TEMP6]], align 8
// CHK-C-NEXT:    [[TMP9:%.*]] = load i64, i64* [[ATOMIC_TEMP6]], align 8
// CHK-C-NEXT:    [[TMP10:%.*]] = cmpxchg i64* [[X]], i64 [[TMP8]], i64 [[TMP9]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP11]] = extractvalue { i64, i1 } [[TMP10]], 0
// CHK-C-NEXT:    [[TMP12:%.*]] = extractvalue { i64, i1 } [[TMP10]], 1
// CHK-C-NEXT:    br i1 [[TMP12]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP7]]
// CHK-C:       atomic_upd_exit:
// CHK-C-NEXT:    store i64 [[TMP7]], i64* [[ATMP3]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_EXIT9]]
// CHK-C:       atomic_cmp7:
// CHK-C-NEXT:    [[CMP8:%.*]] = icmp slt i64 [[TMP11]], [[TMP7]]
// CHK-C-NEXT:    br i1 [[CMP8]], label [[ATOMIC_CONT5]], label [[ATOMIC_EXIT9]]
// CHK-C:       atomic_exit9:
// CHK-C-NEXT:    [[TMP13:%.*]] = load i64, i64* [[ATMP3]], align 8
// CHK-C-NEXT:    store i64 [[TMP13]], i64* [[V]], align 8
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z14test_long_longv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[X:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[V:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP3:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP6:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i64, i64* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, i64* [[X]] monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD]], i64* [[TMP]], align 8
// CHK-CXX-NEXT:    [[CMP:%.*]] = icmp slt i64 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP1:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP1]], i64* [[TMP]], align 8
// CHK-CXX-NEXT:    store i64 [[TMP0]], i64* [[ATOMIC_TEMP]], align 8
// CHK-CXX-NEXT:    [[TMP2:%.*]] = load i64, i64* [[ATOMIC_TEMP]], align 8
// CHK-CXX-NEXT:    [[TMP3:%.*]] = cmpxchg i64* [[X]], i64 [[TMP1]], i64 [[TMP2]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP4]] = extractvalue { i64, i1 } [[TMP3]], 0
// CHK-CXX-NEXT:    [[TMP5:%.*]] = extractvalue { i64, i1 } [[TMP3]], 1
// CHK-CXX-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    [[CMP1:%.*]] = icmp slt i64 [[TMP4]], [[TMP0]]
// CHK-CXX-NEXT:    br i1 [[CMP1]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP6:%.*]] = load i64, i64* [[TMP]], align 8
// CHK-CXX-NEXT:    store i64 [[TMP6]], i64* [[V]], align 8
// CHK-CXX-NEXT:    [[TMP7:%.*]] = load i64, i64* [[EXPR]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD2:%.*]] = load atomic i64, i64* [[X]] monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD2]], i64* [[ATMP3]], align 8
// CHK-CXX-NEXT:    [[CMP4:%.*]] = icmp slt i64 [[ATOMIC_LOAD2]], [[TMP7]]
// CHK-CXX-NEXT:    br i1 [[CMP4]], label [[ATOMIC_CONT5:%.*]], label [[ATOMIC_EXIT9:%.*]]
// CHK-CXX:       atomic_cont5:
// CHK-CXX-NEXT:    [[TMP8:%.*]] = phi i64 [ [[ATOMIC_LOAD2]], [[ATOMIC_EXIT]] ], [ [[TMP11:%.*]], [[ATOMIC_CMP7:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP8]], i64* [[ATMP3]], align 8
// CHK-CXX-NEXT:    store i64 [[TMP7]], i64* [[ATOMIC_TEMP6]], align 8
// CHK-CXX-NEXT:    [[TMP9:%.*]] = load i64, i64* [[ATOMIC_TEMP6]], align 8
// CHK-CXX-NEXT:    [[TMP10:%.*]] = cmpxchg i64* [[X]], i64 [[TMP8]], i64 [[TMP9]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP11]] = extractvalue { i64, i1 } [[TMP10]], 0
// CHK-CXX-NEXT:    [[TMP12:%.*]] = extractvalue { i64, i1 } [[TMP10]], 1
// CHK-CXX-NEXT:    br i1 [[TMP12]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP7]]
// CHK-CXX:       atomic_upd_exit:
// CHK-CXX-NEXT:    store i64 [[TMP7]], i64* [[ATMP3]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT9]]
// CHK-CXX:       atomic_cmp7:
// CHK-CXX-NEXT:    [[CMP8:%.*]] = icmp slt i64 [[TMP11]], [[TMP7]]
// CHK-CXX-NEXT:    br i1 [[CMP8]], label [[ATOMIC_CONT5]], label [[ATOMIC_EXIT9]]
// CHK-CXX:       atomic_exit9:
// CHK-CXX-NEXT:    [[TMP13:%.*]] = load i64, i64* [[ATMP3]], align 8
// CHK-CXX-NEXT:    store i64 [[TMP13]], i64* [[V]], align 8
// CHK-CXX-NEXT:    ret void
//
void test_long_long() {
  long long x, expr, d, e, v;

  #pragma omp atomic compare capture
  { v = x; if (x < expr) { x = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (x < expr) { x = expr; } v = x; } // MAX
}

#ifdef LIBCALLS
void test_Complex_float()
{
  _Complex float x, expr, d, e, v;

  #pragma omp atomic compare capture
  { v = x; if (x == e) { x = d; } }

  #pragma omp atomic compare capture
  { if (x == e) { x = d; } v = x; }
}

void test_long_double() {
  long double x, expr, d, e;

  #pragma omp atomic compare capture
  { v = x; if (x < expr) { x = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (x < expr) { x = expr; } v = x; } // MAX
}

void test_vec() {
  typedef int int4 __attribute__((__vector_size__(16)));
  int4 x;
  int expr, d, e, v;

  #pragma omp atomic compare
  { v = x[1]; if (x[1] < expr) { x[1] = expr; } } // MAX

  #pragma omp atomic compare
  { if (x[1] < expr) { x[1] = expr; } v = x[1]; } // MAX
}
#endif


struct BitFields {
  int : 32;
  int a : 31;
} bfx;

struct BitFields_packed {
  int : 32;
  int a : 31;
} __attribute__ ((__packed__)) bfx_packed;

struct BitFields2 {
  int : 31;
  int a : 1;
} bfx2;

struct BitFields2_packed {
  int : 31;
  int a : 1;
} __attribute__ ((__packed__)) bfx2_packed;

struct BitFields3 {
  int : 11;
  int a : 14;
} bfx3;

struct BitFields3_packed {
  int : 11;
  int a : 14;
} __attribute__ ((__packed__)) bfx3_packed;

struct BitFields4 {
  short : 16;
  int a: 1;
  long b : 7;
} bfx4;

struct BitFields4_packed {
  short : 16;
  int a: 1;
  long b : 7;
} __attribute__ ((__packed__)) bfx4_packed;

// CHK-C-LABEL: @test_bitfield(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[V:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[TMP:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP1:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP5:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP7:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP13:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP14:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP20:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP24:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP30:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP37:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP38:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP43:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP46:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP53:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP59:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP60:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP65:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP68:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP76:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP82:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP83:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP88:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP92:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP99:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP106:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP107:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP113:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP117:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP125:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP132:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP133:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP139:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP143:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP150:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP157:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP158:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP164:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP168:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP176:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP183:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP184:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP191:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP196:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP203:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP211:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP212:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP219:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP224:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP232:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP240:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP241:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP247:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP251:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP258:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP267:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP268:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP274:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP278:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP286:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP294:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP295:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP302:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP307:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP313:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP321:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP322:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP329:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP334:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP341:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[TMP0:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i32, i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD]], i32* [[ATOMIC_TEMP]], align 4
// CHK-C-NEXT:    [[BF_LOAD:%.*]] = load i32, i32* [[ATOMIC_TEMP]], align 4
// CHK-C-NEXT:    [[BF_SHL:%.*]] = shl i32 [[BF_LOAD]], 1
// CHK-C-NEXT:    [[BF_ASHR:%.*]] = ashr i32 [[BF_SHL]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR]], i32* [[TMP]], align 4
// CHK-C-NEXT:    [[CMP:%.*]] = icmp slt i32 [[BF_ASHR]], [[TMP0]]
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP1:%.*]] = phi i32 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP1]], i32* [[ATOMIC_TEMP1]], align 4
// CHK-C-NEXT:    [[BF_LOAD2:%.*]] = load i32, i32* [[ATOMIC_TEMP1]], align 4
// CHK-C-NEXT:    [[BF_SHL3:%.*]] = shl i32 [[BF_LOAD2]], 1
// CHK-C-NEXT:    [[BF_ASHR4:%.*]] = ashr i32 [[BF_SHL3]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR4]], i32* [[TMP]], align 4
// CHK-C-NEXT:    store i32 [[TMP1]], i32* [[ATOMIC_TEMP5]], align 4
// CHK-C-NEXT:    [[BF_LOAD6:%.*]] = load i32, i32* [[ATOMIC_TEMP5]], align 4
// CHK-C-NEXT:    [[BF_VALUE:%.*]] = and i32 [[TMP0]], 2147483647
// CHK-C-NEXT:    [[BF_CLEAR:%.*]] = and i32 [[BF_LOAD6]], -2147483648
// CHK-C-NEXT:    [[BF_SET:%.*]] = or i32 [[BF_CLEAR]], [[BF_VALUE]]
// CHK-C-NEXT:    store i32 [[BF_SET]], i32* [[ATOMIC_TEMP5]], align 4
// CHK-C-NEXT:    [[TMP2:%.*]] = load i32, i32* [[ATOMIC_TEMP5]], align 4
// CHK-C-NEXT:    [[TMP3:%.*]] = cmpxchg i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*), i32 [[TMP1]], i32 [[TMP2]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP4]] = extractvalue { i32, i1 } [[TMP3]], 0
// CHK-C-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i1 } [[TMP3]], 1
// CHK-C-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    store i32 [[TMP4]], i32* [[ATOMIC_TEMP7]], align 4
// CHK-C-NEXT:    [[BF_LOAD8:%.*]] = load i32, i32* [[ATOMIC_TEMP7]], align 4
// CHK-C-NEXT:    [[BF_SHL9:%.*]] = shl i32 [[BF_LOAD8]], 1
// CHK-C-NEXT:    [[BF_ASHR10:%.*]] = ashr i32 [[BF_SHL9]], 1
// CHK-C-NEXT:    [[CMP11:%.*]] = icmp slt i32 [[BF_ASHR10]], [[TMP0]]
// CHK-C-NEXT:    br i1 [[CMP11]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP6:%.*]] = load i32, i32* [[TMP]], align 4
// CHK-C-NEXT:    store i32 [[TMP6]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP7:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD12:%.*]] = load atomic i32, i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD12]], i32* [[ATOMIC_TEMP14]], align 4
// CHK-C-NEXT:    [[BF_LOAD15:%.*]] = load i32, i32* [[ATOMIC_TEMP14]], align 4
// CHK-C-NEXT:    [[BF_SHL16:%.*]] = shl i32 [[BF_LOAD15]], 1
// CHK-C-NEXT:    [[BF_ASHR17:%.*]] = ashr i32 [[BF_SHL16]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR17]], i32* [[ATMP13]], align 4
// CHK-C-NEXT:    [[CMP18:%.*]] = icmp slt i32 [[BF_ASHR17]], [[TMP7]]
// CHK-C-NEXT:    br i1 [[CMP18]], label [[ATOMIC_CONT19:%.*]], label [[ATOMIC_EXIT35:%.*]]
// CHK-C:       atomic_cont19:
// CHK-C-NEXT:    [[TMP8:%.*]] = phi i32 [ [[ATOMIC_LOAD12]], [[ATOMIC_EXIT]] ], [ [[TMP11:%.*]], [[ATOMIC_CMP29:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP8]], i32* [[ATOMIC_TEMP20]], align 4
// CHK-C-NEXT:    [[BF_LOAD21:%.*]] = load i32, i32* [[ATOMIC_TEMP20]], align 4
// CHK-C-NEXT:    [[BF_SHL22:%.*]] = shl i32 [[BF_LOAD21]], 1
// CHK-C-NEXT:    [[BF_ASHR23:%.*]] = ashr i32 [[BF_SHL22]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR23]], i32* [[ATMP13]], align 4
// CHK-C-NEXT:    store i32 [[TMP8]], i32* [[ATOMIC_TEMP24]], align 4
// CHK-C-NEXT:    [[BF_LOAD25:%.*]] = load i32, i32* [[ATOMIC_TEMP24]], align 4
// CHK-C-NEXT:    [[BF_VALUE26:%.*]] = and i32 [[TMP7]], 2147483647
// CHK-C-NEXT:    [[BF_CLEAR27:%.*]] = and i32 [[BF_LOAD25]], -2147483648
// CHK-C-NEXT:    [[BF_SET28:%.*]] = or i32 [[BF_CLEAR27]], [[BF_VALUE26]]
// CHK-C-NEXT:    store i32 [[BF_SET28]], i32* [[ATOMIC_TEMP24]], align 4
// CHK-C-NEXT:    [[TMP9:%.*]] = load i32, i32* [[ATOMIC_TEMP24]], align 4
// CHK-C-NEXT:    [[TMP10:%.*]] = cmpxchg i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*), i32 [[TMP8]], i32 [[TMP9]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP11]] = extractvalue { i32, i1 } [[TMP10]], 0
// CHK-C-NEXT:    [[TMP12:%.*]] = extractvalue { i32, i1 } [[TMP10]], 1
// CHK-C-NEXT:    br i1 [[TMP12]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP29]]
// CHK-C:       atomic_upd_exit:
// CHK-C-NEXT:    store i32 [[TMP7]], i32* [[ATMP13]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT35]]
// CHK-C:       atomic_cmp29:
// CHK-C-NEXT:    store i32 [[TMP11]], i32* [[ATOMIC_TEMP30]], align 4
// CHK-C-NEXT:    [[BF_LOAD31:%.*]] = load i32, i32* [[ATOMIC_TEMP30]], align 4
// CHK-C-NEXT:    [[BF_SHL32:%.*]] = shl i32 [[BF_LOAD31]], 1
// CHK-C-NEXT:    [[BF_ASHR33:%.*]] = ashr i32 [[BF_SHL32]], 1
// CHK-C-NEXT:    [[CMP34:%.*]] = icmp slt i32 [[BF_ASHR33]], [[TMP7]]
// CHK-C-NEXT:    br i1 [[CMP34]], label [[ATOMIC_CONT19]], label [[ATOMIC_EXIT35]]
// CHK-C:       atomic_exit35:
// CHK-C-NEXT:    [[TMP13:%.*]] = load i32, i32* [[ATMP13]], align 4
// CHK-C-NEXT:    store i32 [[TMP13]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP14:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD36:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS2:%.*]], %struct.BitFields2* @bfx2, i32 0, i32 0) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD36]], i32* [[ATOMIC_TEMP38]], align 4
// CHK-C-NEXT:    [[BF_LOAD39:%.*]] = load i32, i32* [[ATOMIC_TEMP38]], align 4
// CHK-C-NEXT:    [[BF_ASHR40:%.*]] = ashr i32 [[BF_LOAD39]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR40]], i32* [[ATMP37]], align 4
// CHK-C-NEXT:    [[CMP41:%.*]] = icmp slt i32 [[BF_ASHR40]], [[TMP14]]
// CHK-C-NEXT:    br i1 [[CMP41]], label [[ATOMIC_CONT42:%.*]], label [[ATOMIC_EXIT57:%.*]]
// CHK-C:       atomic_cont42:
// CHK-C-NEXT:    [[TMP15:%.*]] = phi i32 [ [[ATOMIC_LOAD36]], [[ATOMIC_EXIT35]] ], [ [[TMP18:%.*]], [[ATOMIC_CMP52:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP15]], i32* [[ATOMIC_TEMP43]], align 4
// CHK-C-NEXT:    [[BF_LOAD44:%.*]] = load i32, i32* [[ATOMIC_TEMP43]], align 4
// CHK-C-NEXT:    [[BF_ASHR45:%.*]] = ashr i32 [[BF_LOAD44]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR45]], i32* [[ATMP37]], align 4
// CHK-C-NEXT:    store i32 [[TMP15]], i32* [[ATOMIC_TEMP46]], align 4
// CHK-C-NEXT:    [[BF_LOAD47:%.*]] = load i32, i32* [[ATOMIC_TEMP46]], align 4
// CHK-C-NEXT:    [[BF_VALUE48:%.*]] = and i32 [[TMP14]], 1
// CHK-C-NEXT:    [[BF_SHL49:%.*]] = shl i32 [[BF_VALUE48]], 31
// CHK-C-NEXT:    [[BF_CLEAR50:%.*]] = and i32 [[BF_LOAD47]], 2147483647
// CHK-C-NEXT:    [[BF_SET51:%.*]] = or i32 [[BF_CLEAR50]], [[BF_SHL49]]
// CHK-C-NEXT:    store i32 [[BF_SET51]], i32* [[ATOMIC_TEMP46]], align 4
// CHK-C-NEXT:    [[TMP16:%.*]] = load i32, i32* [[ATOMIC_TEMP46]], align 4
// CHK-C-NEXT:    [[TMP17:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0), i32 [[TMP15]], i32 [[TMP16]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP18]] = extractvalue { i32, i1 } [[TMP17]], 0
// CHK-C-NEXT:    [[TMP19:%.*]] = extractvalue { i32, i1 } [[TMP17]], 1
// CHK-C-NEXT:    br i1 [[TMP19]], label [[ATOMIC_EXIT57]], label [[ATOMIC_CMP52]]
// CHK-C:       atomic_cmp52:
// CHK-C-NEXT:    store i32 [[TMP18]], i32* [[ATOMIC_TEMP53]], align 4
// CHK-C-NEXT:    [[BF_LOAD54:%.*]] = load i32, i32* [[ATOMIC_TEMP53]], align 4
// CHK-C-NEXT:    [[BF_ASHR55:%.*]] = ashr i32 [[BF_LOAD54]], 31
// CHK-C-NEXT:    [[CMP56:%.*]] = icmp slt i32 [[BF_ASHR55]], [[TMP14]]
// CHK-C-NEXT:    br i1 [[CMP56]], label [[ATOMIC_CONT42]], label [[ATOMIC_EXIT57]]
// CHK-C:       atomic_exit57:
// CHK-C-NEXT:    [[TMP20:%.*]] = load i32, i32* [[ATMP37]], align 4
// CHK-C-NEXT:    store i32 [[TMP20]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP21:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD58:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD58]], i32* [[ATOMIC_TEMP60]], align 4
// CHK-C-NEXT:    [[BF_LOAD61:%.*]] = load i32, i32* [[ATOMIC_TEMP60]], align 4
// CHK-C-NEXT:    [[BF_ASHR62:%.*]] = ashr i32 [[BF_LOAD61]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR62]], i32* [[ATMP59]], align 4
// CHK-C-NEXT:    [[CMP63:%.*]] = icmp slt i32 [[BF_ASHR62]], [[TMP21]]
// CHK-C-NEXT:    br i1 [[CMP63]], label [[ATOMIC_CONT64:%.*]], label [[ATOMIC_EXIT80:%.*]]
// CHK-C:       atomic_cont64:
// CHK-C-NEXT:    [[TMP22:%.*]] = phi i32 [ [[ATOMIC_LOAD58]], [[ATOMIC_EXIT57]] ], [ [[TMP25:%.*]], [[ATOMIC_CMP75:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP22]], i32* [[ATOMIC_TEMP65]], align 4
// CHK-C-NEXT:    [[BF_LOAD66:%.*]] = load i32, i32* [[ATOMIC_TEMP65]], align 4
// CHK-C-NEXT:    [[BF_ASHR67:%.*]] = ashr i32 [[BF_LOAD66]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR67]], i32* [[ATMP59]], align 4
// CHK-C-NEXT:    store i32 [[TMP22]], i32* [[ATOMIC_TEMP68]], align 4
// CHK-C-NEXT:    [[BF_LOAD69:%.*]] = load i32, i32* [[ATOMIC_TEMP68]], align 4
// CHK-C-NEXT:    [[BF_VALUE70:%.*]] = and i32 [[TMP21]], 1
// CHK-C-NEXT:    [[BF_SHL71:%.*]] = shl i32 [[BF_VALUE70]], 31
// CHK-C-NEXT:    [[BF_CLEAR72:%.*]] = and i32 [[BF_LOAD69]], 2147483647
// CHK-C-NEXT:    [[BF_SET73:%.*]] = or i32 [[BF_CLEAR72]], [[BF_SHL71]]
// CHK-C-NEXT:    store i32 [[BF_SET73]], i32* [[ATOMIC_TEMP68]], align 4
// CHK-C-NEXT:    [[TMP23:%.*]] = load i32, i32* [[ATOMIC_TEMP68]], align 4
// CHK-C-NEXT:    [[TMP24:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0), i32 [[TMP22]], i32 [[TMP23]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP25]] = extractvalue { i32, i1 } [[TMP24]], 0
// CHK-C-NEXT:    [[TMP26:%.*]] = extractvalue { i32, i1 } [[TMP24]], 1
// CHK-C-NEXT:    br i1 [[TMP26]], label [[ATOMIC_UPD_EXIT74:%.*]], label [[ATOMIC_CMP75]]
// CHK-C:       atomic_upd_exit74:
// CHK-C-NEXT:    store i32 [[TMP21]], i32* [[ATMP59]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT80]]
// CHK-C:       atomic_cmp75:
// CHK-C-NEXT:    store i32 [[TMP25]], i32* [[ATOMIC_TEMP76]], align 4
// CHK-C-NEXT:    [[BF_LOAD77:%.*]] = load i32, i32* [[ATOMIC_TEMP76]], align 4
// CHK-C-NEXT:    [[BF_ASHR78:%.*]] = ashr i32 [[BF_LOAD77]], 31
// CHK-C-NEXT:    [[CMP79:%.*]] = icmp slt i32 [[BF_ASHR78]], [[TMP21]]
// CHK-C-NEXT:    br i1 [[CMP79]], label [[ATOMIC_CONT64]], label [[ATOMIC_EXIT80]]
// CHK-C:       atomic_exit80:
// CHK-C-NEXT:    [[TMP27:%.*]] = load i32, i32* [[ATMP59]], align 4
// CHK-C-NEXT:    store i32 [[TMP27]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP28:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD81:%.*]] = load atomic i8, i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3) monotonic, align 1
// CHK-C-NEXT:    [[TMP29:%.*]] = bitcast i32* [[ATOMIC_TEMP83]] to i8*
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD81]], i8* [[TMP29]], align 1
// CHK-C-NEXT:    [[BF_LOAD84:%.*]] = load i8, i8* [[TMP29]], align 1
// CHK-C-NEXT:    [[BF_ASHR85:%.*]] = ashr i8 [[BF_LOAD84]], 7
// CHK-C-NEXT:    [[BF_CAST:%.*]] = sext i8 [[BF_ASHR85]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST]], i32* [[ATMP82]], align 4
// CHK-C-NEXT:    [[CMP86:%.*]] = icmp slt i32 [[BF_CAST]], [[TMP28]]
// CHK-C-NEXT:    br i1 [[CMP86]], label [[ATOMIC_CONT87:%.*]], label [[ATOMIC_EXIT104:%.*]]
// CHK-C:       atomic_cont87:
// CHK-C-NEXT:    [[TMP30:%.*]] = phi i8 [ [[ATOMIC_LOAD81]], [[ATOMIC_EXIT80]] ], [ [[TMP36:%.*]], [[ATOMIC_CMP98:%.*]] ]
// CHK-C-NEXT:    [[TMP31:%.*]] = bitcast i32* [[ATOMIC_TEMP88]] to i8*
// CHK-C-NEXT:    store i8 [[TMP30]], i8* [[TMP31]], align 1
// CHK-C-NEXT:    [[BF_LOAD89:%.*]] = load i8, i8* [[TMP31]], align 1
// CHK-C-NEXT:    [[BF_ASHR90:%.*]] = ashr i8 [[BF_LOAD89]], 7
// CHK-C-NEXT:    [[BF_CAST91:%.*]] = sext i8 [[BF_ASHR90]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST91]], i32* [[ATMP82]], align 4
// CHK-C-NEXT:    [[TMP32:%.*]] = bitcast i32* [[ATOMIC_TEMP92]] to i8*
// CHK-C-NEXT:    store i8 [[TMP30]], i8* [[TMP32]], align 1
// CHK-C-NEXT:    [[TMP33:%.*]] = trunc i32 [[TMP28]] to i8
// CHK-C-NEXT:    [[BF_LOAD93:%.*]] = load i8, i8* [[TMP32]], align 1
// CHK-C-NEXT:    [[BF_VALUE94:%.*]] = and i8 [[TMP33]], 1
// CHK-C-NEXT:    [[BF_SHL95:%.*]] = shl i8 [[BF_VALUE94]], 7
// CHK-C-NEXT:    [[BF_CLEAR96:%.*]] = and i8 [[BF_LOAD93]], 127
// CHK-C-NEXT:    [[BF_SET97:%.*]] = or i8 [[BF_CLEAR96]], [[BF_SHL95]]
// CHK-C-NEXT:    store i8 [[BF_SET97]], i8* [[TMP32]], align 1
// CHK-C-NEXT:    [[TMP34:%.*]] = load i8, i8* [[TMP32]], align 1
// CHK-C-NEXT:    [[TMP35:%.*]] = cmpxchg i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3), i8 [[TMP30]], i8 [[TMP34]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP36]] = extractvalue { i8, i1 } [[TMP35]], 0
// CHK-C-NEXT:    [[TMP37:%.*]] = extractvalue { i8, i1 } [[TMP35]], 1
// CHK-C-NEXT:    br i1 [[TMP37]], label [[ATOMIC_EXIT104]], label [[ATOMIC_CMP98]]
// CHK-C:       atomic_cmp98:
// CHK-C-NEXT:    [[TMP38:%.*]] = bitcast i32* [[ATOMIC_TEMP99]] to i8*
// CHK-C-NEXT:    store i8 [[TMP36]], i8* [[TMP38]], align 1
// CHK-C-NEXT:    [[BF_LOAD100:%.*]] = load i8, i8* [[TMP38]], align 1
// CHK-C-NEXT:    [[BF_ASHR101:%.*]] = ashr i8 [[BF_LOAD100]], 7
// CHK-C-NEXT:    [[BF_CAST102:%.*]] = sext i8 [[BF_ASHR101]] to i32
// CHK-C-NEXT:    [[CMP103:%.*]] = icmp slt i32 [[BF_CAST102]], [[TMP28]]
// CHK-C-NEXT:    br i1 [[CMP103]], label [[ATOMIC_CONT87]], label [[ATOMIC_EXIT104]]
// CHK-C:       atomic_exit104:
// CHK-C-NEXT:    [[TMP39:%.*]] = load i32, i32* [[ATMP82]], align 4
// CHK-C-NEXT:    store i32 [[TMP39]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP40:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD105:%.*]] = load atomic i8, i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3) monotonic, align 1
// CHK-C-NEXT:    [[TMP41:%.*]] = bitcast i32* [[ATOMIC_TEMP107]] to i8*
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD105]], i8* [[TMP41]], align 1
// CHK-C-NEXT:    [[BF_LOAD108:%.*]] = load i8, i8* [[TMP41]], align 1
// CHK-C-NEXT:    [[BF_ASHR109:%.*]] = ashr i8 [[BF_LOAD108]], 7
// CHK-C-NEXT:    [[BF_CAST110:%.*]] = sext i8 [[BF_ASHR109]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST110]], i32* [[ATMP106]], align 4
// CHK-C-NEXT:    [[CMP111:%.*]] = icmp slt i32 [[BF_CAST110]], [[TMP40]]
// CHK-C-NEXT:    br i1 [[CMP111]], label [[ATOMIC_CONT112:%.*]], label [[ATOMIC_EXIT130:%.*]]
// CHK-C:       atomic_cont112:
// CHK-C-NEXT:    [[TMP42:%.*]] = phi i8 [ [[ATOMIC_LOAD105]], [[ATOMIC_EXIT104]] ], [ [[TMP48:%.*]], [[ATOMIC_CMP124:%.*]] ]
// CHK-C-NEXT:    [[TMP43:%.*]] = bitcast i32* [[ATOMIC_TEMP113]] to i8*
// CHK-C-NEXT:    store i8 [[TMP42]], i8* [[TMP43]], align 1
// CHK-C-NEXT:    [[BF_LOAD114:%.*]] = load i8, i8* [[TMP43]], align 1
// CHK-C-NEXT:    [[BF_ASHR115:%.*]] = ashr i8 [[BF_LOAD114]], 7
// CHK-C-NEXT:    [[BF_CAST116:%.*]] = sext i8 [[BF_ASHR115]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST116]], i32* [[ATMP106]], align 4
// CHK-C-NEXT:    [[TMP44:%.*]] = bitcast i32* [[ATOMIC_TEMP117]] to i8*
// CHK-C-NEXT:    store i8 [[TMP42]], i8* [[TMP44]], align 1
// CHK-C-NEXT:    [[TMP45:%.*]] = trunc i32 [[TMP40]] to i8
// CHK-C-NEXT:    [[BF_LOAD118:%.*]] = load i8, i8* [[TMP44]], align 1
// CHK-C-NEXT:    [[BF_VALUE119:%.*]] = and i8 [[TMP45]], 1
// CHK-C-NEXT:    [[BF_SHL120:%.*]] = shl i8 [[BF_VALUE119]], 7
// CHK-C-NEXT:    [[BF_CLEAR121:%.*]] = and i8 [[BF_LOAD118]], 127
// CHK-C-NEXT:    [[BF_SET122:%.*]] = or i8 [[BF_CLEAR121]], [[BF_SHL120]]
// CHK-C-NEXT:    store i8 [[BF_SET122]], i8* [[TMP44]], align 1
// CHK-C-NEXT:    [[TMP46:%.*]] = load i8, i8* [[TMP44]], align 1
// CHK-C-NEXT:    [[TMP47:%.*]] = cmpxchg i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3), i8 [[TMP42]], i8 [[TMP46]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP48]] = extractvalue { i8, i1 } [[TMP47]], 0
// CHK-C-NEXT:    [[TMP49:%.*]] = extractvalue { i8, i1 } [[TMP47]], 1
// CHK-C-NEXT:    br i1 [[TMP49]], label [[ATOMIC_UPD_EXIT123:%.*]], label [[ATOMIC_CMP124]]
// CHK-C:       atomic_upd_exit123:
// CHK-C-NEXT:    store i32 [[TMP40]], i32* [[ATMP106]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT130]]
// CHK-C:       atomic_cmp124:
// CHK-C-NEXT:    [[TMP50:%.*]] = bitcast i32* [[ATOMIC_TEMP125]] to i8*
// CHK-C-NEXT:    store i8 [[TMP48]], i8* [[TMP50]], align 1
// CHK-C-NEXT:    [[BF_LOAD126:%.*]] = load i8, i8* [[TMP50]], align 1
// CHK-C-NEXT:    [[BF_ASHR127:%.*]] = ashr i8 [[BF_LOAD126]], 7
// CHK-C-NEXT:    [[BF_CAST128:%.*]] = sext i8 [[BF_ASHR127]] to i32
// CHK-C-NEXT:    [[CMP129:%.*]] = icmp slt i32 [[BF_CAST128]], [[TMP40]]
// CHK-C-NEXT:    br i1 [[CMP129]], label [[ATOMIC_CONT112]], label [[ATOMIC_EXIT130]]
// CHK-C:       atomic_exit130:
// CHK-C-NEXT:    [[TMP51:%.*]] = load i32, i32* [[ATMP106]], align 4
// CHK-C-NEXT:    store i32 [[TMP51]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP52:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD131:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS3:%.*]], %struct.BitFields3* @bfx3, i32 0, i32 0) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD131]], i32* [[ATOMIC_TEMP133]], align 4
// CHK-C-NEXT:    [[BF_LOAD134:%.*]] = load i32, i32* [[ATOMIC_TEMP133]], align 4
// CHK-C-NEXT:    [[BF_SHL135:%.*]] = shl i32 [[BF_LOAD134]], 7
// CHK-C-NEXT:    [[BF_ASHR136:%.*]] = ashr i32 [[BF_SHL135]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR136]], i32* [[ATMP132]], align 4
// CHK-C-NEXT:    [[CMP137:%.*]] = icmp slt i32 [[BF_ASHR136]], [[TMP52]]
// CHK-C-NEXT:    br i1 [[CMP137]], label [[ATOMIC_CONT138:%.*]], label [[ATOMIC_EXIT155:%.*]]
// CHK-C:       atomic_cont138:
// CHK-C-NEXT:    [[TMP53:%.*]] = phi i32 [ [[ATOMIC_LOAD131]], [[ATOMIC_EXIT130]] ], [ [[TMP56:%.*]], [[ATOMIC_CMP149:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP53]], i32* [[ATOMIC_TEMP139]], align 4
// CHK-C-NEXT:    [[BF_LOAD140:%.*]] = load i32, i32* [[ATOMIC_TEMP139]], align 4
// CHK-C-NEXT:    [[BF_SHL141:%.*]] = shl i32 [[BF_LOAD140]], 7
// CHK-C-NEXT:    [[BF_ASHR142:%.*]] = ashr i32 [[BF_SHL141]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR142]], i32* [[ATMP132]], align 4
// CHK-C-NEXT:    store i32 [[TMP53]], i32* [[ATOMIC_TEMP143]], align 4
// CHK-C-NEXT:    [[BF_LOAD144:%.*]] = load i32, i32* [[ATOMIC_TEMP143]], align 4
// CHK-C-NEXT:    [[BF_VALUE145:%.*]] = and i32 [[TMP52]], 16383
// CHK-C-NEXT:    [[BF_SHL146:%.*]] = shl i32 [[BF_VALUE145]], 11
// CHK-C-NEXT:    [[BF_CLEAR147:%.*]] = and i32 [[BF_LOAD144]], -33552385
// CHK-C-NEXT:    [[BF_SET148:%.*]] = or i32 [[BF_CLEAR147]], [[BF_SHL146]]
// CHK-C-NEXT:    store i32 [[BF_SET148]], i32* [[ATOMIC_TEMP143]], align 4
// CHK-C-NEXT:    [[TMP54:%.*]] = load i32, i32* [[ATOMIC_TEMP143]], align 4
// CHK-C-NEXT:    [[TMP55:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0), i32 [[TMP53]], i32 [[TMP54]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP56]] = extractvalue { i32, i1 } [[TMP55]], 0
// CHK-C-NEXT:    [[TMP57:%.*]] = extractvalue { i32, i1 } [[TMP55]], 1
// CHK-C-NEXT:    br i1 [[TMP57]], label [[ATOMIC_EXIT155]], label [[ATOMIC_CMP149]]
// CHK-C:       atomic_cmp149:
// CHK-C-NEXT:    store i32 [[TMP56]], i32* [[ATOMIC_TEMP150]], align 4
// CHK-C-NEXT:    [[BF_LOAD151:%.*]] = load i32, i32* [[ATOMIC_TEMP150]], align 4
// CHK-C-NEXT:    [[BF_SHL152:%.*]] = shl i32 [[BF_LOAD151]], 7
// CHK-C-NEXT:    [[BF_ASHR153:%.*]] = ashr i32 [[BF_SHL152]], 18
// CHK-C-NEXT:    [[CMP154:%.*]] = icmp slt i32 [[BF_ASHR153]], [[TMP52]]
// CHK-C-NEXT:    br i1 [[CMP154]], label [[ATOMIC_CONT138]], label [[ATOMIC_EXIT155]]
// CHK-C:       atomic_exit155:
// CHK-C-NEXT:    [[TMP58:%.*]] = load i32, i32* [[ATMP132]], align 4
// CHK-C-NEXT:    store i32 [[TMP58]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP59:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD156:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD156]], i32* [[ATOMIC_TEMP158]], align 4
// CHK-C-NEXT:    [[BF_LOAD159:%.*]] = load i32, i32* [[ATOMIC_TEMP158]], align 4
// CHK-C-NEXT:    [[BF_SHL160:%.*]] = shl i32 [[BF_LOAD159]], 7
// CHK-C-NEXT:    [[BF_ASHR161:%.*]] = ashr i32 [[BF_SHL160]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR161]], i32* [[ATMP157]], align 4
// CHK-C-NEXT:    [[CMP162:%.*]] = icmp slt i32 [[BF_ASHR161]], [[TMP59]]
// CHK-C-NEXT:    br i1 [[CMP162]], label [[ATOMIC_CONT163:%.*]], label [[ATOMIC_EXIT181:%.*]]
// CHK-C:       atomic_cont163:
// CHK-C-NEXT:    [[TMP60:%.*]] = phi i32 [ [[ATOMIC_LOAD156]], [[ATOMIC_EXIT155]] ], [ [[TMP63:%.*]], [[ATOMIC_CMP175:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP60]], i32* [[ATOMIC_TEMP164]], align 4
// CHK-C-NEXT:    [[BF_LOAD165:%.*]] = load i32, i32* [[ATOMIC_TEMP164]], align 4
// CHK-C-NEXT:    [[BF_SHL166:%.*]] = shl i32 [[BF_LOAD165]], 7
// CHK-C-NEXT:    [[BF_ASHR167:%.*]] = ashr i32 [[BF_SHL166]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR167]], i32* [[ATMP157]], align 4
// CHK-C-NEXT:    store i32 [[TMP60]], i32* [[ATOMIC_TEMP168]], align 4
// CHK-C-NEXT:    [[BF_LOAD169:%.*]] = load i32, i32* [[ATOMIC_TEMP168]], align 4
// CHK-C-NEXT:    [[BF_VALUE170:%.*]] = and i32 [[TMP59]], 16383
// CHK-C-NEXT:    [[BF_SHL171:%.*]] = shl i32 [[BF_VALUE170]], 11
// CHK-C-NEXT:    [[BF_CLEAR172:%.*]] = and i32 [[BF_LOAD169]], -33552385
// CHK-C-NEXT:    [[BF_SET173:%.*]] = or i32 [[BF_CLEAR172]], [[BF_SHL171]]
// CHK-C-NEXT:    store i32 [[BF_SET173]], i32* [[ATOMIC_TEMP168]], align 4
// CHK-C-NEXT:    [[TMP61:%.*]] = load i32, i32* [[ATOMIC_TEMP168]], align 4
// CHK-C-NEXT:    [[TMP62:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0), i32 [[TMP60]], i32 [[TMP61]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP63]] = extractvalue { i32, i1 } [[TMP62]], 0
// CHK-C-NEXT:    [[TMP64:%.*]] = extractvalue { i32, i1 } [[TMP62]], 1
// CHK-C-NEXT:    br i1 [[TMP64]], label [[ATOMIC_UPD_EXIT174:%.*]], label [[ATOMIC_CMP175]]
// CHK-C:       atomic_upd_exit174:
// CHK-C-NEXT:    store i32 [[TMP59]], i32* [[ATMP157]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT181]]
// CHK-C:       atomic_cmp175:
// CHK-C-NEXT:    store i32 [[TMP63]], i32* [[ATOMIC_TEMP176]], align 4
// CHK-C-NEXT:    [[BF_LOAD177:%.*]] = load i32, i32* [[ATOMIC_TEMP176]], align 4
// CHK-C-NEXT:    [[BF_SHL178:%.*]] = shl i32 [[BF_LOAD177]], 7
// CHK-C-NEXT:    [[BF_ASHR179:%.*]] = ashr i32 [[BF_SHL178]], 18
// CHK-C-NEXT:    [[CMP180:%.*]] = icmp slt i32 [[BF_ASHR179]], [[TMP59]]
// CHK-C-NEXT:    br i1 [[CMP180]], label [[ATOMIC_CONT163]], label [[ATOMIC_EXIT181]]
// CHK-C:       atomic_exit181:
// CHK-C-NEXT:    [[TMP65:%.*]] = load i32, i32* [[ATMP157]], align 4
// CHK-C-NEXT:    store i32 [[TMP65]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP66:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD182:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD182]], i64* [[ATOMIC_TEMP184]], align 8
// CHK-C-NEXT:    [[BF_LOAD185:%.*]] = load i64, i64* [[ATOMIC_TEMP184]], align 8
// CHK-C-NEXT:    [[BF_SHL186:%.*]] = shl i64 [[BF_LOAD185]], 47
// CHK-C-NEXT:    [[BF_ASHR187:%.*]] = ashr i64 [[BF_SHL186]], 63
// CHK-C-NEXT:    [[BF_CAST188:%.*]] = trunc i64 [[BF_ASHR187]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST188]], i32* [[ATMP183]], align 4
// CHK-C-NEXT:    [[CMP189:%.*]] = icmp slt i32 [[BF_CAST188]], [[TMP66]]
// CHK-C-NEXT:    br i1 [[CMP189]], label [[ATOMIC_CONT190:%.*]], label [[ATOMIC_EXIT209:%.*]]
// CHK-C:       atomic_cont190:
// CHK-C-NEXT:    [[TMP67:%.*]] = phi i64 [ [[ATOMIC_LOAD182]], [[ATOMIC_EXIT181]] ], [ [[TMP71:%.*]], [[ATOMIC_CMP202:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP67]], i64* [[ATOMIC_TEMP191]], align 8
// CHK-C-NEXT:    [[BF_LOAD192:%.*]] = load i64, i64* [[ATOMIC_TEMP191]], align 8
// CHK-C-NEXT:    [[BF_SHL193:%.*]] = shl i64 [[BF_LOAD192]], 47
// CHK-C-NEXT:    [[BF_ASHR194:%.*]] = ashr i64 [[BF_SHL193]], 63
// CHK-C-NEXT:    [[BF_CAST195:%.*]] = trunc i64 [[BF_ASHR194]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST195]], i32* [[ATMP183]], align 4
// CHK-C-NEXT:    store i64 [[TMP67]], i64* [[ATOMIC_TEMP196]], align 8
// CHK-C-NEXT:    [[TMP68:%.*]] = zext i32 [[TMP66]] to i64
// CHK-C-NEXT:    [[BF_LOAD197:%.*]] = load i64, i64* [[ATOMIC_TEMP196]], align 8
// CHK-C-NEXT:    [[BF_VALUE198:%.*]] = and i64 [[TMP68]], 1
// CHK-C-NEXT:    [[BF_SHL199:%.*]] = shl i64 [[BF_VALUE198]], 16
// CHK-C-NEXT:    [[BF_CLEAR200:%.*]] = and i64 [[BF_LOAD197]], -65537
// CHK-C-NEXT:    [[BF_SET201:%.*]] = or i64 [[BF_CLEAR200]], [[BF_SHL199]]
// CHK-C-NEXT:    store i64 [[BF_SET201]], i64* [[ATOMIC_TEMP196]], align 8
// CHK-C-NEXT:    [[TMP69:%.*]] = load i64, i64* [[ATOMIC_TEMP196]], align 8
// CHK-C-NEXT:    [[TMP70:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP67]], i64 [[TMP69]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP71]] = extractvalue { i64, i1 } [[TMP70]], 0
// CHK-C-NEXT:    [[TMP72:%.*]] = extractvalue { i64, i1 } [[TMP70]], 1
// CHK-C-NEXT:    br i1 [[TMP72]], label [[ATOMIC_EXIT209]], label [[ATOMIC_CMP202]]
// CHK-C:       atomic_cmp202:
// CHK-C-NEXT:    store i64 [[TMP71]], i64* [[ATOMIC_TEMP203]], align 8
// CHK-C-NEXT:    [[BF_LOAD204:%.*]] = load i64, i64* [[ATOMIC_TEMP203]], align 8
// CHK-C-NEXT:    [[BF_SHL205:%.*]] = shl i64 [[BF_LOAD204]], 47
// CHK-C-NEXT:    [[BF_ASHR206:%.*]] = ashr i64 [[BF_SHL205]], 63
// CHK-C-NEXT:    [[BF_CAST207:%.*]] = trunc i64 [[BF_ASHR206]] to i32
// CHK-C-NEXT:    [[CMP208:%.*]] = icmp slt i32 [[BF_CAST207]], [[TMP66]]
// CHK-C-NEXT:    br i1 [[CMP208]], label [[ATOMIC_CONT190]], label [[ATOMIC_EXIT209]]
// CHK-C:       atomic_exit209:
// CHK-C-NEXT:    [[TMP73:%.*]] = load i32, i32* [[ATMP183]], align 4
// CHK-C-NEXT:    store i32 [[TMP73]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP74:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD210:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD210]], i64* [[ATOMIC_TEMP212]], align 8
// CHK-C-NEXT:    [[BF_LOAD213:%.*]] = load i64, i64* [[ATOMIC_TEMP212]], align 8
// CHK-C-NEXT:    [[BF_SHL214:%.*]] = shl i64 [[BF_LOAD213]], 47
// CHK-C-NEXT:    [[BF_ASHR215:%.*]] = ashr i64 [[BF_SHL214]], 63
// CHK-C-NEXT:    [[BF_CAST216:%.*]] = trunc i64 [[BF_ASHR215]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST216]], i32* [[ATMP211]], align 4
// CHK-C-NEXT:    [[CMP217:%.*]] = icmp slt i32 [[BF_CAST216]], [[TMP74]]
// CHK-C-NEXT:    br i1 [[CMP217]], label [[ATOMIC_CONT218:%.*]], label [[ATOMIC_EXIT238:%.*]]
// CHK-C:       atomic_cont218:
// CHK-C-NEXT:    [[TMP75:%.*]] = phi i64 [ [[ATOMIC_LOAD210]], [[ATOMIC_EXIT209]] ], [ [[TMP79:%.*]], [[ATOMIC_CMP231:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP75]], i64* [[ATOMIC_TEMP219]], align 8
// CHK-C-NEXT:    [[BF_LOAD220:%.*]] = load i64, i64* [[ATOMIC_TEMP219]], align 8
// CHK-C-NEXT:    [[BF_SHL221:%.*]] = shl i64 [[BF_LOAD220]], 47
// CHK-C-NEXT:    [[BF_ASHR222:%.*]] = ashr i64 [[BF_SHL221]], 63
// CHK-C-NEXT:    [[BF_CAST223:%.*]] = trunc i64 [[BF_ASHR222]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST223]], i32* [[ATMP211]], align 4
// CHK-C-NEXT:    store i64 [[TMP75]], i64* [[ATOMIC_TEMP224]], align 8
// CHK-C-NEXT:    [[TMP76:%.*]] = zext i32 [[TMP74]] to i64
// CHK-C-NEXT:    [[BF_LOAD225:%.*]] = load i64, i64* [[ATOMIC_TEMP224]], align 8
// CHK-C-NEXT:    [[BF_VALUE226:%.*]] = and i64 [[TMP76]], 1
// CHK-C-NEXT:    [[BF_SHL227:%.*]] = shl i64 [[BF_VALUE226]], 16
// CHK-C-NEXT:    [[BF_CLEAR228:%.*]] = and i64 [[BF_LOAD225]], -65537
// CHK-C-NEXT:    [[BF_SET229:%.*]] = or i64 [[BF_CLEAR228]], [[BF_SHL227]]
// CHK-C-NEXT:    store i64 [[BF_SET229]], i64* [[ATOMIC_TEMP224]], align 8
// CHK-C-NEXT:    [[TMP77:%.*]] = load i64, i64* [[ATOMIC_TEMP224]], align 8
// CHK-C-NEXT:    [[TMP78:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP75]], i64 [[TMP77]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP79]] = extractvalue { i64, i1 } [[TMP78]], 0
// CHK-C-NEXT:    [[TMP80:%.*]] = extractvalue { i64, i1 } [[TMP78]], 1
// CHK-C-NEXT:    br i1 [[TMP80]], label [[ATOMIC_UPD_EXIT230:%.*]], label [[ATOMIC_CMP231]]
// CHK-C:       atomic_upd_exit230:
// CHK-C-NEXT:    store i32 [[TMP74]], i32* [[ATMP211]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT238]]
// CHK-C:       atomic_cmp231:
// CHK-C-NEXT:    store i64 [[TMP79]], i64* [[ATOMIC_TEMP232]], align 8
// CHK-C-NEXT:    [[BF_LOAD233:%.*]] = load i64, i64* [[ATOMIC_TEMP232]], align 8
// CHK-C-NEXT:    [[BF_SHL234:%.*]] = shl i64 [[BF_LOAD233]], 47
// CHK-C-NEXT:    [[BF_ASHR235:%.*]] = ashr i64 [[BF_SHL234]], 63
// CHK-C-NEXT:    [[BF_CAST236:%.*]] = trunc i64 [[BF_ASHR235]] to i32
// CHK-C-NEXT:    [[CMP237:%.*]] = icmp slt i32 [[BF_CAST236]], [[TMP74]]
// CHK-C-NEXT:    br i1 [[CMP237]], label [[ATOMIC_CONT218]], label [[ATOMIC_EXIT238]]
// CHK-C:       atomic_exit238:
// CHK-C-NEXT:    [[TMP81:%.*]] = load i32, i32* [[ATMP211]], align 4
// CHK-C-NEXT:    store i32 [[TMP81]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP82:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[CONV:%.*]] = sext i32 [[TMP82]] to i64
// CHK-C-NEXT:    [[ATOMIC_LOAD239:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD239]], i64* [[ATOMIC_TEMP241]], align 8
// CHK-C-NEXT:    [[BF_LOAD242:%.*]] = load i64, i64* [[ATOMIC_TEMP241]], align 8
// CHK-C-NEXT:    [[BF_SHL243:%.*]] = shl i64 [[BF_LOAD242]], 40
// CHK-C-NEXT:    [[BF_ASHR244:%.*]] = ashr i64 [[BF_SHL243]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR244]], i64* [[ATMP240]], align 8
// CHK-C-NEXT:    [[CMP245:%.*]] = icmp slt i64 [[BF_ASHR244]], [[CONV]]
// CHK-C-NEXT:    br i1 [[CMP245]], label [[ATOMIC_CONT246:%.*]], label [[ATOMIC_EXIT263:%.*]]
// CHK-C:       atomic_cont246:
// CHK-C-NEXT:    [[TMP83:%.*]] = phi i64 [ [[ATOMIC_LOAD239]], [[ATOMIC_EXIT238]] ], [ [[TMP86:%.*]], [[ATOMIC_CMP257:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP83]], i64* [[ATOMIC_TEMP247]], align 8
// CHK-C-NEXT:    [[BF_LOAD248:%.*]] = load i64, i64* [[ATOMIC_TEMP247]], align 8
// CHK-C-NEXT:    [[BF_SHL249:%.*]] = shl i64 [[BF_LOAD248]], 40
// CHK-C-NEXT:    [[BF_ASHR250:%.*]] = ashr i64 [[BF_SHL249]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR250]], i64* [[ATMP240]], align 8
// CHK-C-NEXT:    store i64 [[TMP83]], i64* [[ATOMIC_TEMP251]], align 8
// CHK-C-NEXT:    [[BF_LOAD252:%.*]] = load i64, i64* [[ATOMIC_TEMP251]], align 8
// CHK-C-NEXT:    [[BF_VALUE253:%.*]] = and i64 [[CONV]], 127
// CHK-C-NEXT:    [[BF_SHL254:%.*]] = shl i64 [[BF_VALUE253]], 17
// CHK-C-NEXT:    [[BF_CLEAR255:%.*]] = and i64 [[BF_LOAD252]], -16646145
// CHK-C-NEXT:    [[BF_SET256:%.*]] = or i64 [[BF_CLEAR255]], [[BF_SHL254]]
// CHK-C-NEXT:    store i64 [[BF_SET256]], i64* [[ATOMIC_TEMP251]], align 8
// CHK-C-NEXT:    [[TMP84:%.*]] = load i64, i64* [[ATOMIC_TEMP251]], align 8
// CHK-C-NEXT:    [[TMP85:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP83]], i64 [[TMP84]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP86]] = extractvalue { i64, i1 } [[TMP85]], 0
// CHK-C-NEXT:    [[TMP87:%.*]] = extractvalue { i64, i1 } [[TMP85]], 1
// CHK-C-NEXT:    br i1 [[TMP87]], label [[ATOMIC_EXIT263]], label [[ATOMIC_CMP257]]
// CHK-C:       atomic_cmp257:
// CHK-C-NEXT:    store i64 [[TMP86]], i64* [[ATOMIC_TEMP258]], align 8
// CHK-C-NEXT:    [[BF_LOAD259:%.*]] = load i64, i64* [[ATOMIC_TEMP258]], align 8
// CHK-C-NEXT:    [[BF_SHL260:%.*]] = shl i64 [[BF_LOAD259]], 40
// CHK-C-NEXT:    [[BF_ASHR261:%.*]] = ashr i64 [[BF_SHL260]], 57
// CHK-C-NEXT:    [[CMP262:%.*]] = icmp slt i64 [[BF_ASHR261]], [[CONV]]
// CHK-C-NEXT:    br i1 [[CMP262]], label [[ATOMIC_CONT246]], label [[ATOMIC_EXIT263]]
// CHK-C:       atomic_exit263:
// CHK-C-NEXT:    [[TMP88:%.*]] = load i64, i64* [[ATMP240]], align 8
// CHK-C-NEXT:    [[CONV264:%.*]] = trunc i64 [[TMP88]] to i32
// CHK-C-NEXT:    store i32 [[CONV264]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP89:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[CONV265:%.*]] = sext i32 [[TMP89]] to i64
// CHK-C-NEXT:    [[ATOMIC_LOAD266:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD266]], i64* [[ATOMIC_TEMP268]], align 8
// CHK-C-NEXT:    [[BF_LOAD269:%.*]] = load i64, i64* [[ATOMIC_TEMP268]], align 8
// CHK-C-NEXT:    [[BF_SHL270:%.*]] = shl i64 [[BF_LOAD269]], 40
// CHK-C-NEXT:    [[BF_ASHR271:%.*]] = ashr i64 [[BF_SHL270]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR271]], i64* [[ATMP267]], align 8
// CHK-C-NEXT:    [[CMP272:%.*]] = icmp slt i64 [[BF_ASHR271]], [[CONV265]]
// CHK-C-NEXT:    br i1 [[CMP272]], label [[ATOMIC_CONT273:%.*]], label [[ATOMIC_EXIT291:%.*]]
// CHK-C:       atomic_cont273:
// CHK-C-NEXT:    [[TMP90:%.*]] = phi i64 [ [[ATOMIC_LOAD266]], [[ATOMIC_EXIT263]] ], [ [[TMP93:%.*]], [[ATOMIC_CMP285:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP90]], i64* [[ATOMIC_TEMP274]], align 8
// CHK-C-NEXT:    [[BF_LOAD275:%.*]] = load i64, i64* [[ATOMIC_TEMP274]], align 8
// CHK-C-NEXT:    [[BF_SHL276:%.*]] = shl i64 [[BF_LOAD275]], 40
// CHK-C-NEXT:    [[BF_ASHR277:%.*]] = ashr i64 [[BF_SHL276]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR277]], i64* [[ATMP267]], align 8
// CHK-C-NEXT:    store i64 [[TMP90]], i64* [[ATOMIC_TEMP278]], align 8
// CHK-C-NEXT:    [[BF_LOAD279:%.*]] = load i64, i64* [[ATOMIC_TEMP278]], align 8
// CHK-C-NEXT:    [[BF_VALUE280:%.*]] = and i64 [[CONV265]], 127
// CHK-C-NEXT:    [[BF_SHL281:%.*]] = shl i64 [[BF_VALUE280]], 17
// CHK-C-NEXT:    [[BF_CLEAR282:%.*]] = and i64 [[BF_LOAD279]], -16646145
// CHK-C-NEXT:    [[BF_SET283:%.*]] = or i64 [[BF_CLEAR282]], [[BF_SHL281]]
// CHK-C-NEXT:    store i64 [[BF_SET283]], i64* [[ATOMIC_TEMP278]], align 8
// CHK-C-NEXT:    [[TMP91:%.*]] = load i64, i64* [[ATOMIC_TEMP278]], align 8
// CHK-C-NEXT:    [[TMP92:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP90]], i64 [[TMP91]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP93]] = extractvalue { i64, i1 } [[TMP92]], 0
// CHK-C-NEXT:    [[TMP94:%.*]] = extractvalue { i64, i1 } [[TMP92]], 1
// CHK-C-NEXT:    br i1 [[TMP94]], label [[ATOMIC_UPD_EXIT284:%.*]], label [[ATOMIC_CMP285]]
// CHK-C:       atomic_upd_exit284:
// CHK-C-NEXT:    store i64 [[CONV265]], i64* [[ATMP267]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_EXIT291]]
// CHK-C:       atomic_cmp285:
// CHK-C-NEXT:    store i64 [[TMP93]], i64* [[ATOMIC_TEMP286]], align 8
// CHK-C-NEXT:    [[BF_LOAD287:%.*]] = load i64, i64* [[ATOMIC_TEMP286]], align 8
// CHK-C-NEXT:    [[BF_SHL288:%.*]] = shl i64 [[BF_LOAD287]], 40
// CHK-C-NEXT:    [[BF_ASHR289:%.*]] = ashr i64 [[BF_SHL288]], 57
// CHK-C-NEXT:    [[CMP290:%.*]] = icmp slt i64 [[BF_ASHR289]], [[CONV265]]
// CHK-C-NEXT:    br i1 [[CMP290]], label [[ATOMIC_CONT273]], label [[ATOMIC_EXIT291]]
// CHK-C:       atomic_exit291:
// CHK-C-NEXT:    [[TMP95:%.*]] = load i64, i64* [[ATMP267]], align 8
// CHK-C-NEXT:    [[CONV292:%.*]] = trunc i64 [[TMP95]] to i32
// CHK-C-NEXT:    store i32 [[CONV292]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP96:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD293:%.*]] = load atomic i8, i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED:%.*]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2) monotonic, align 1
// CHK-C-NEXT:    [[TMP97:%.*]] = bitcast i32* [[ATOMIC_TEMP295]] to i8*
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD293]], i8* [[TMP97]], align 1
// CHK-C-NEXT:    [[BF_LOAD296:%.*]] = load i8, i8* [[TMP97]], align 1
// CHK-C-NEXT:    [[BF_SHL297:%.*]] = shl i8 [[BF_LOAD296]], 7
// CHK-C-NEXT:    [[BF_ASHR298:%.*]] = ashr i8 [[BF_SHL297]], 7
// CHK-C-NEXT:    [[BF_CAST299:%.*]] = sext i8 [[BF_ASHR298]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST299]], i32* [[ATMP294]], align 4
// CHK-C-NEXT:    [[CMP300:%.*]] = icmp slt i32 [[BF_CAST299]], [[TMP96]]
// CHK-C-NEXT:    br i1 [[CMP300]], label [[ATOMIC_CONT301:%.*]], label [[ATOMIC_EXIT319:%.*]]
// CHK-C:       atomic_cont301:
// CHK-C-NEXT:    [[TMP98:%.*]] = phi i8 [ [[ATOMIC_LOAD293]], [[ATOMIC_EXIT291]] ], [ [[TMP104:%.*]], [[ATOMIC_CMP312:%.*]] ]
// CHK-C-NEXT:    [[TMP99:%.*]] = bitcast i32* [[ATOMIC_TEMP302]] to i8*
// CHK-C-NEXT:    store i8 [[TMP98]], i8* [[TMP99]], align 1
// CHK-C-NEXT:    [[BF_LOAD303:%.*]] = load i8, i8* [[TMP99]], align 1
// CHK-C-NEXT:    [[BF_SHL304:%.*]] = shl i8 [[BF_LOAD303]], 7
// CHK-C-NEXT:    [[BF_ASHR305:%.*]] = ashr i8 [[BF_SHL304]], 7
// CHK-C-NEXT:    [[BF_CAST306:%.*]] = sext i8 [[BF_ASHR305]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST306]], i32* [[ATMP294]], align 4
// CHK-C-NEXT:    [[TMP100:%.*]] = bitcast i32* [[ATOMIC_TEMP307]] to i8*
// CHK-C-NEXT:    store i8 [[TMP98]], i8* [[TMP100]], align 1
// CHK-C-NEXT:    [[TMP101:%.*]] = trunc i32 [[TMP96]] to i8
// CHK-C-NEXT:    [[BF_LOAD308:%.*]] = load i8, i8* [[TMP100]], align 1
// CHK-C-NEXT:    [[BF_VALUE309:%.*]] = and i8 [[TMP101]], 1
// CHK-C-NEXT:    [[BF_CLEAR310:%.*]] = and i8 [[BF_LOAD308]], -2
// CHK-C-NEXT:    [[BF_SET311:%.*]] = or i8 [[BF_CLEAR310]], [[BF_VALUE309]]
// CHK-C-NEXT:    store i8 [[BF_SET311]], i8* [[TMP100]], align 1
// CHK-C-NEXT:    [[TMP102:%.*]] = load i8, i8* [[TMP100]], align 1
// CHK-C-NEXT:    [[TMP103:%.*]] = cmpxchg i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2), i8 [[TMP98]], i8 [[TMP102]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP104]] = extractvalue { i8, i1 } [[TMP103]], 0
// CHK-C-NEXT:    [[TMP105:%.*]] = extractvalue { i8, i1 } [[TMP103]], 1
// CHK-C-NEXT:    br i1 [[TMP105]], label [[ATOMIC_EXIT319]], label [[ATOMIC_CMP312]]
// CHK-C:       atomic_cmp312:
// CHK-C-NEXT:    [[TMP106:%.*]] = bitcast i32* [[ATOMIC_TEMP313]] to i8*
// CHK-C-NEXT:    store i8 [[TMP104]], i8* [[TMP106]], align 1
// CHK-C-NEXT:    [[BF_LOAD314:%.*]] = load i8, i8* [[TMP106]], align 1
// CHK-C-NEXT:    [[BF_SHL315:%.*]] = shl i8 [[BF_LOAD314]], 7
// CHK-C-NEXT:    [[BF_ASHR316:%.*]] = ashr i8 [[BF_SHL315]], 7
// CHK-C-NEXT:    [[BF_CAST317:%.*]] = sext i8 [[BF_ASHR316]] to i32
// CHK-C-NEXT:    [[CMP318:%.*]] = icmp slt i32 [[BF_CAST317]], [[TMP96]]
// CHK-C-NEXT:    br i1 [[CMP318]], label [[ATOMIC_CONT301]], label [[ATOMIC_EXIT319]]
// CHK-C:       atomic_exit319:
// CHK-C-NEXT:    [[TMP107:%.*]] = load i32, i32* [[ATMP294]], align 4
// CHK-C-NEXT:    store i32 [[TMP107]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP108:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD320:%.*]] = load atomic i8, i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2) monotonic, align 1
// CHK-C-NEXT:    [[TMP109:%.*]] = bitcast i32* [[ATOMIC_TEMP322]] to i8*
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD320]], i8* [[TMP109]], align 1
// CHK-C-NEXT:    [[BF_LOAD323:%.*]] = load i8, i8* [[TMP109]], align 1
// CHK-C-NEXT:    [[BF_SHL324:%.*]] = shl i8 [[BF_LOAD323]], 7
// CHK-C-NEXT:    [[BF_ASHR325:%.*]] = ashr i8 [[BF_SHL324]], 7
// CHK-C-NEXT:    [[BF_CAST326:%.*]] = sext i8 [[BF_ASHR325]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST326]], i32* [[ATMP321]], align 4
// CHK-C-NEXT:    [[CMP327:%.*]] = icmp slt i32 [[BF_CAST326]], [[TMP108]]
// CHK-C-NEXT:    br i1 [[CMP327]], label [[ATOMIC_CONT328:%.*]], label [[ATOMIC_EXIT347:%.*]]
// CHK-C:       atomic_cont328:
// CHK-C-NEXT:    [[TMP110:%.*]] = phi i8 [ [[ATOMIC_LOAD320]], [[ATOMIC_EXIT319]] ], [ [[TMP116:%.*]], [[ATOMIC_CMP340:%.*]] ]
// CHK-C-NEXT:    [[TMP111:%.*]] = bitcast i32* [[ATOMIC_TEMP329]] to i8*
// CHK-C-NEXT:    store i8 [[TMP110]], i8* [[TMP111]], align 1
// CHK-C-NEXT:    [[BF_LOAD330:%.*]] = load i8, i8* [[TMP111]], align 1
// CHK-C-NEXT:    [[BF_SHL331:%.*]] = shl i8 [[BF_LOAD330]], 7
// CHK-C-NEXT:    [[BF_ASHR332:%.*]] = ashr i8 [[BF_SHL331]], 7
// CHK-C-NEXT:    [[BF_CAST333:%.*]] = sext i8 [[BF_ASHR332]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST333]], i32* [[ATMP321]], align 4
// CHK-C-NEXT:    [[TMP112:%.*]] = bitcast i32* [[ATOMIC_TEMP334]] to i8*
// CHK-C-NEXT:    store i8 [[TMP110]], i8* [[TMP112]], align 1
// CHK-C-NEXT:    [[TMP113:%.*]] = trunc i32 [[TMP108]] to i8
// CHK-C-NEXT:    [[BF_LOAD335:%.*]] = load i8, i8* [[TMP112]], align 1
// CHK-C-NEXT:    [[BF_VALUE336:%.*]] = and i8 [[TMP113]], 1
// CHK-C-NEXT:    [[BF_CLEAR337:%.*]] = and i8 [[BF_LOAD335]], -2
// CHK-C-NEXT:    [[BF_SET338:%.*]] = or i8 [[BF_CLEAR337]], [[BF_VALUE336]]
// CHK-C-NEXT:    store i8 [[BF_SET338]], i8* [[TMP112]], align 1
// CHK-C-NEXT:    [[TMP114:%.*]] = load i8, i8* [[TMP112]], align 1
// CHK-C-NEXT:    [[TMP115:%.*]] = cmpxchg i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2), i8 [[TMP110]], i8 [[TMP114]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP116]] = extractvalue { i8, i1 } [[TMP115]], 0
// CHK-C-NEXT:    [[TMP117:%.*]] = extractvalue { i8, i1 } [[TMP115]], 1
// CHK-C-NEXT:    br i1 [[TMP117]], label [[ATOMIC_UPD_EXIT339:%.*]], label [[ATOMIC_CMP340]]
// CHK-C:       atomic_upd_exit339:
// CHK-C-NEXT:    store i32 [[TMP108]], i32* [[ATMP321]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT347]]
// CHK-C:       atomic_cmp340:
// CHK-C-NEXT:    [[TMP118:%.*]] = bitcast i32* [[ATOMIC_TEMP341]] to i8*
// CHK-C-NEXT:    store i8 [[TMP116]], i8* [[TMP118]], align 1
// CHK-C-NEXT:    [[BF_LOAD342:%.*]] = load i8, i8* [[TMP118]], align 1
// CHK-C-NEXT:    [[BF_SHL343:%.*]] = shl i8 [[BF_LOAD342]], 7
// CHK-C-NEXT:    [[BF_ASHR344:%.*]] = ashr i8 [[BF_SHL343]], 7
// CHK-C-NEXT:    [[BF_CAST345:%.*]] = sext i8 [[BF_ASHR344]] to i32
// CHK-C-NEXT:    [[CMP346:%.*]] = icmp slt i32 [[BF_CAST345]], [[TMP108]]
// CHK-C-NEXT:    br i1 [[CMP346]], label [[ATOMIC_CONT328]], label [[ATOMIC_EXIT347]]
// CHK-C:       atomic_exit347:
// CHK-C-NEXT:    [[TMP119:%.*]] = load i32, i32* [[ATMP321]], align 4
// CHK-C-NEXT:    store i32 [[TMP119]], i32* [[V]], align 4
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z13test_bitfieldv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[V:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP1:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP5:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP7:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP13:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP14:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP20:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP24:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP30:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP37:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP38:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP43:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP46:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP53:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP59:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP60:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP65:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP68:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP76:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP82:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP83:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP88:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP92:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP99:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP106:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP107:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP113:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP117:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP125:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP132:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP133:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP139:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP143:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP150:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP157:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP158:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP164:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP168:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP176:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP183:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP184:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP191:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP196:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP203:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP211:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP212:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP219:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP224:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP232:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP240:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP241:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP247:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP251:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP258:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP267:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP268:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP274:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP278:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP286:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP294:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP295:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP302:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP307:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP313:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP321:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP322:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP329:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP334:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP341:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i32, i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD]], i32* [[ATOMIC_TEMP]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD:%.*]] = load i32, i32* [[ATOMIC_TEMP]], align 4
// CHK-CXX-NEXT:    [[BF_SHL:%.*]] = shl i32 [[BF_LOAD]], 1
// CHK-CXX-NEXT:    [[BF_ASHR:%.*]] = ashr i32 [[BF_SHL]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR]], i32* [[TMP]], align 4
// CHK-CXX-NEXT:    [[CMP:%.*]] = icmp slt i32 [[BF_ASHR]], [[TMP0]]
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP1:%.*]] = phi i32 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP1]], i32* [[ATOMIC_TEMP1]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD2:%.*]] = load i32, i32* [[ATOMIC_TEMP1]], align 4
// CHK-CXX-NEXT:    [[BF_SHL3:%.*]] = shl i32 [[BF_LOAD2]], 1
// CHK-CXX-NEXT:    [[BF_ASHR4:%.*]] = ashr i32 [[BF_SHL3]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR4]], i32* [[TMP]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP1]], i32* [[ATOMIC_TEMP5]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD6:%.*]] = load i32, i32* [[ATOMIC_TEMP5]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE:%.*]] = and i32 [[TMP0]], 2147483647
// CHK-CXX-NEXT:    [[BF_CLEAR:%.*]] = and i32 [[BF_LOAD6]], -2147483648
// CHK-CXX-NEXT:    [[BF_SET:%.*]] = or i32 [[BF_CLEAR]], [[BF_VALUE]]
// CHK-CXX-NEXT:    store i32 [[BF_SET]], i32* [[ATOMIC_TEMP5]], align 4
// CHK-CXX-NEXT:    [[TMP2:%.*]] = load i32, i32* [[ATOMIC_TEMP5]], align 4
// CHK-CXX-NEXT:    [[TMP3:%.*]] = cmpxchg i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*), i32 [[TMP1]], i32 [[TMP2]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP4]] = extractvalue { i32, i1 } [[TMP3]], 0
// CHK-CXX-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i1 } [[TMP3]], 1
// CHK-CXX-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    store i32 [[TMP4]], i32* [[ATOMIC_TEMP7]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD8:%.*]] = load i32, i32* [[ATOMIC_TEMP7]], align 4
// CHK-CXX-NEXT:    [[BF_SHL9:%.*]] = shl i32 [[BF_LOAD8]], 1
// CHK-CXX-NEXT:    [[BF_ASHR10:%.*]] = ashr i32 [[BF_SHL9]], 1
// CHK-CXX-NEXT:    [[CMP11:%.*]] = icmp slt i32 [[BF_ASHR10]], [[TMP0]]
// CHK-CXX-NEXT:    br i1 [[CMP11]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP6:%.*]] = load i32, i32* [[TMP]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP6]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP7:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD12:%.*]] = load atomic i32, i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD12]], i32* [[ATOMIC_TEMP14]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD15:%.*]] = load i32, i32* [[ATOMIC_TEMP14]], align 4
// CHK-CXX-NEXT:    [[BF_SHL16:%.*]] = shl i32 [[BF_LOAD15]], 1
// CHK-CXX-NEXT:    [[BF_ASHR17:%.*]] = ashr i32 [[BF_SHL16]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR17]], i32* [[ATMP13]], align 4
// CHK-CXX-NEXT:    [[CMP18:%.*]] = icmp slt i32 [[BF_ASHR17]], [[TMP7]]
// CHK-CXX-NEXT:    br i1 [[CMP18]], label [[ATOMIC_CONT19:%.*]], label [[ATOMIC_EXIT35:%.*]]
// CHK-CXX:       atomic_cont19:
// CHK-CXX-NEXT:    [[TMP8:%.*]] = phi i32 [ [[ATOMIC_LOAD12]], [[ATOMIC_EXIT]] ], [ [[TMP11:%.*]], [[ATOMIC_CMP29:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP8]], i32* [[ATOMIC_TEMP20]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD21:%.*]] = load i32, i32* [[ATOMIC_TEMP20]], align 4
// CHK-CXX-NEXT:    [[BF_SHL22:%.*]] = shl i32 [[BF_LOAD21]], 1
// CHK-CXX-NEXT:    [[BF_ASHR23:%.*]] = ashr i32 [[BF_SHL22]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR23]], i32* [[ATMP13]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP8]], i32* [[ATOMIC_TEMP24]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD25:%.*]] = load i32, i32* [[ATOMIC_TEMP24]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE26:%.*]] = and i32 [[TMP7]], 2147483647
// CHK-CXX-NEXT:    [[BF_CLEAR27:%.*]] = and i32 [[BF_LOAD25]], -2147483648
// CHK-CXX-NEXT:    [[BF_SET28:%.*]] = or i32 [[BF_CLEAR27]], [[BF_VALUE26]]
// CHK-CXX-NEXT:    store i32 [[BF_SET28]], i32* [[ATOMIC_TEMP24]], align 4
// CHK-CXX-NEXT:    [[TMP9:%.*]] = load i32, i32* [[ATOMIC_TEMP24]], align 4
// CHK-CXX-NEXT:    [[TMP10:%.*]] = cmpxchg i32* bitcast (i8* getelementptr (i8, i8* bitcast (%struct.BitFields* @bfx to i8*), i64 4) to i32*), i32 [[TMP8]], i32 [[TMP9]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP11]] = extractvalue { i32, i1 } [[TMP10]], 0
// CHK-CXX-NEXT:    [[TMP12:%.*]] = extractvalue { i32, i1 } [[TMP10]], 1
// CHK-CXX-NEXT:    br i1 [[TMP12]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP29]]
// CHK-CXX:       atomic_upd_exit:
// CHK-CXX-NEXT:    store i32 [[TMP7]], i32* [[ATMP13]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT35]]
// CHK-CXX:       atomic_cmp29:
// CHK-CXX-NEXT:    store i32 [[TMP11]], i32* [[ATOMIC_TEMP30]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD31:%.*]] = load i32, i32* [[ATOMIC_TEMP30]], align 4
// CHK-CXX-NEXT:    [[BF_SHL32:%.*]] = shl i32 [[BF_LOAD31]], 1
// CHK-CXX-NEXT:    [[BF_ASHR33:%.*]] = ashr i32 [[BF_SHL32]], 1
// CHK-CXX-NEXT:    [[CMP34:%.*]] = icmp slt i32 [[BF_ASHR33]], [[TMP7]]
// CHK-CXX-NEXT:    br i1 [[CMP34]], label [[ATOMIC_CONT19]], label [[ATOMIC_EXIT35]]
// CHK-CXX:       atomic_exit35:
// CHK-CXX-NEXT:    [[TMP13:%.*]] = load i32, i32* [[ATMP13]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP13]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP14:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD36:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS2:%.*]], %struct.BitFields2* @bfx2, i32 0, i32 0) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD36]], i32* [[ATOMIC_TEMP38]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD39:%.*]] = load i32, i32* [[ATOMIC_TEMP38]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR40:%.*]] = ashr i32 [[BF_LOAD39]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR40]], i32* [[ATMP37]], align 4
// CHK-CXX-NEXT:    [[CMP41:%.*]] = icmp slt i32 [[BF_ASHR40]], [[TMP14]]
// CHK-CXX-NEXT:    br i1 [[CMP41]], label [[ATOMIC_CONT42:%.*]], label [[ATOMIC_EXIT57:%.*]]
// CHK-CXX:       atomic_cont42:
// CHK-CXX-NEXT:    [[TMP15:%.*]] = phi i32 [ [[ATOMIC_LOAD36]], [[ATOMIC_EXIT35]] ], [ [[TMP18:%.*]], [[ATOMIC_CMP52:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP15]], i32* [[ATOMIC_TEMP43]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD44:%.*]] = load i32, i32* [[ATOMIC_TEMP43]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR45:%.*]] = ashr i32 [[BF_LOAD44]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR45]], i32* [[ATMP37]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP15]], i32* [[ATOMIC_TEMP46]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD47:%.*]] = load i32, i32* [[ATOMIC_TEMP46]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE48:%.*]] = and i32 [[TMP14]], 1
// CHK-CXX-NEXT:    [[BF_SHL49:%.*]] = shl i32 [[BF_VALUE48]], 31
// CHK-CXX-NEXT:    [[BF_CLEAR50:%.*]] = and i32 [[BF_LOAD47]], 2147483647
// CHK-CXX-NEXT:    [[BF_SET51:%.*]] = or i32 [[BF_CLEAR50]], [[BF_SHL49]]
// CHK-CXX-NEXT:    store i32 [[BF_SET51]], i32* [[ATOMIC_TEMP46]], align 4
// CHK-CXX-NEXT:    [[TMP16:%.*]] = load i32, i32* [[ATOMIC_TEMP46]], align 4
// CHK-CXX-NEXT:    [[TMP17:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0), i32 [[TMP15]], i32 [[TMP16]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP18]] = extractvalue { i32, i1 } [[TMP17]], 0
// CHK-CXX-NEXT:    [[TMP19:%.*]] = extractvalue { i32, i1 } [[TMP17]], 1
// CHK-CXX-NEXT:    br i1 [[TMP19]], label [[ATOMIC_EXIT57]], label [[ATOMIC_CMP52]]
// CHK-CXX:       atomic_cmp52:
// CHK-CXX-NEXT:    store i32 [[TMP18]], i32* [[ATOMIC_TEMP53]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD54:%.*]] = load i32, i32* [[ATOMIC_TEMP53]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR55:%.*]] = ashr i32 [[BF_LOAD54]], 31
// CHK-CXX-NEXT:    [[CMP56:%.*]] = icmp slt i32 [[BF_ASHR55]], [[TMP14]]
// CHK-CXX-NEXT:    br i1 [[CMP56]], label [[ATOMIC_CONT42]], label [[ATOMIC_EXIT57]]
// CHK-CXX:       atomic_exit57:
// CHK-CXX-NEXT:    [[TMP20:%.*]] = load i32, i32* [[ATMP37]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP20]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP21:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD58:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD58]], i32* [[ATOMIC_TEMP60]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD61:%.*]] = load i32, i32* [[ATOMIC_TEMP60]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR62:%.*]] = ashr i32 [[BF_LOAD61]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR62]], i32* [[ATMP59]], align 4
// CHK-CXX-NEXT:    [[CMP63:%.*]] = icmp slt i32 [[BF_ASHR62]], [[TMP21]]
// CHK-CXX-NEXT:    br i1 [[CMP63]], label [[ATOMIC_CONT64:%.*]], label [[ATOMIC_EXIT80:%.*]]
// CHK-CXX:       atomic_cont64:
// CHK-CXX-NEXT:    [[TMP22:%.*]] = phi i32 [ [[ATOMIC_LOAD58]], [[ATOMIC_EXIT57]] ], [ [[TMP25:%.*]], [[ATOMIC_CMP75:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP22]], i32* [[ATOMIC_TEMP65]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD66:%.*]] = load i32, i32* [[ATOMIC_TEMP65]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR67:%.*]] = ashr i32 [[BF_LOAD66]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR67]], i32* [[ATMP59]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP22]], i32* [[ATOMIC_TEMP68]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD69:%.*]] = load i32, i32* [[ATOMIC_TEMP68]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE70:%.*]] = and i32 [[TMP21]], 1
// CHK-CXX-NEXT:    [[BF_SHL71:%.*]] = shl i32 [[BF_VALUE70]], 31
// CHK-CXX-NEXT:    [[BF_CLEAR72:%.*]] = and i32 [[BF_LOAD69]], 2147483647
// CHK-CXX-NEXT:    [[BF_SET73:%.*]] = or i32 [[BF_CLEAR72]], [[BF_SHL71]]
// CHK-CXX-NEXT:    store i32 [[BF_SET73]], i32* [[ATOMIC_TEMP68]], align 4
// CHK-CXX-NEXT:    [[TMP23:%.*]] = load i32, i32* [[ATOMIC_TEMP68]], align 4
// CHK-CXX-NEXT:    [[TMP24:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS2]], %struct.BitFields2* @bfx2, i32 0, i32 0), i32 [[TMP22]], i32 [[TMP23]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP25]] = extractvalue { i32, i1 } [[TMP24]], 0
// CHK-CXX-NEXT:    [[TMP26:%.*]] = extractvalue { i32, i1 } [[TMP24]], 1
// CHK-CXX-NEXT:    br i1 [[TMP26]], label [[ATOMIC_UPD_EXIT74:%.*]], label [[ATOMIC_CMP75]]
// CHK-CXX:       atomic_upd_exit74:
// CHK-CXX-NEXT:    store i32 [[TMP21]], i32* [[ATMP59]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT80]]
// CHK-CXX:       atomic_cmp75:
// CHK-CXX-NEXT:    store i32 [[TMP25]], i32* [[ATOMIC_TEMP76]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD77:%.*]] = load i32, i32* [[ATOMIC_TEMP76]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR78:%.*]] = ashr i32 [[BF_LOAD77]], 31
// CHK-CXX-NEXT:    [[CMP79:%.*]] = icmp slt i32 [[BF_ASHR78]], [[TMP21]]
// CHK-CXX-NEXT:    br i1 [[CMP79]], label [[ATOMIC_CONT64]], label [[ATOMIC_EXIT80]]
// CHK-CXX:       atomic_exit80:
// CHK-CXX-NEXT:    [[TMP27:%.*]] = load i32, i32* [[ATMP59]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP27]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP28:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD81:%.*]] = load atomic i8, i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3) monotonic, align 1
// CHK-CXX-NEXT:    [[TMP29:%.*]] = bitcast i32* [[ATOMIC_TEMP83]] to i8*
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD81]], i8* [[TMP29]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD84:%.*]] = load i8, i8* [[TMP29]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR85:%.*]] = ashr i8 [[BF_LOAD84]], 7
// CHK-CXX-NEXT:    [[BF_CAST:%.*]] = sext i8 [[BF_ASHR85]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST]], i32* [[ATMP82]], align 4
// CHK-CXX-NEXT:    [[CMP86:%.*]] = icmp slt i32 [[BF_CAST]], [[TMP28]]
// CHK-CXX-NEXT:    br i1 [[CMP86]], label [[ATOMIC_CONT87:%.*]], label [[ATOMIC_EXIT104:%.*]]
// CHK-CXX:       atomic_cont87:
// CHK-CXX-NEXT:    [[TMP30:%.*]] = phi i8 [ [[ATOMIC_LOAD81]], [[ATOMIC_EXIT80]] ], [ [[TMP36:%.*]], [[ATOMIC_CMP98:%.*]] ]
// CHK-CXX-NEXT:    [[TMP31:%.*]] = bitcast i32* [[ATOMIC_TEMP88]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP30]], i8* [[TMP31]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD89:%.*]] = load i8, i8* [[TMP31]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR90:%.*]] = ashr i8 [[BF_LOAD89]], 7
// CHK-CXX-NEXT:    [[BF_CAST91:%.*]] = sext i8 [[BF_ASHR90]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST91]], i32* [[ATMP82]], align 4
// CHK-CXX-NEXT:    [[TMP32:%.*]] = bitcast i32* [[ATOMIC_TEMP92]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP30]], i8* [[TMP32]], align 1
// CHK-CXX-NEXT:    [[TMP33:%.*]] = trunc i32 [[TMP28]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD93:%.*]] = load i8, i8* [[TMP32]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE94:%.*]] = and i8 [[TMP33]], 1
// CHK-CXX-NEXT:    [[BF_SHL95:%.*]] = shl i8 [[BF_VALUE94]], 7
// CHK-CXX-NEXT:    [[BF_CLEAR96:%.*]] = and i8 [[BF_LOAD93]], 127
// CHK-CXX-NEXT:    [[BF_SET97:%.*]] = or i8 [[BF_CLEAR96]], [[BF_SHL95]]
// CHK-CXX-NEXT:    store i8 [[BF_SET97]], i8* [[TMP32]], align 1
// CHK-CXX-NEXT:    [[TMP34:%.*]] = load i8, i8* [[TMP32]], align 1
// CHK-CXX-NEXT:    [[TMP35:%.*]] = cmpxchg i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3), i8 [[TMP30]], i8 [[TMP34]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP36]] = extractvalue { i8, i1 } [[TMP35]], 0
// CHK-CXX-NEXT:    [[TMP37:%.*]] = extractvalue { i8, i1 } [[TMP35]], 1
// CHK-CXX-NEXT:    br i1 [[TMP37]], label [[ATOMIC_EXIT104]], label [[ATOMIC_CMP98]]
// CHK-CXX:       atomic_cmp98:
// CHK-CXX-NEXT:    [[TMP38:%.*]] = bitcast i32* [[ATOMIC_TEMP99]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP36]], i8* [[TMP38]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD100:%.*]] = load i8, i8* [[TMP38]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR101:%.*]] = ashr i8 [[BF_LOAD100]], 7
// CHK-CXX-NEXT:    [[BF_CAST102:%.*]] = sext i8 [[BF_ASHR101]] to i32
// CHK-CXX-NEXT:    [[CMP103:%.*]] = icmp slt i32 [[BF_CAST102]], [[TMP28]]
// CHK-CXX-NEXT:    br i1 [[CMP103]], label [[ATOMIC_CONT87]], label [[ATOMIC_EXIT104]]
// CHK-CXX:       atomic_exit104:
// CHK-CXX-NEXT:    [[TMP39:%.*]] = load i32, i32* [[ATMP82]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP39]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP40:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD105:%.*]] = load atomic i8, i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3) monotonic, align 1
// CHK-CXX-NEXT:    [[TMP41:%.*]] = bitcast i32* [[ATOMIC_TEMP107]] to i8*
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD105]], i8* [[TMP41]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD108:%.*]] = load i8, i8* [[TMP41]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR109:%.*]] = ashr i8 [[BF_LOAD108]], 7
// CHK-CXX-NEXT:    [[BF_CAST110:%.*]] = sext i8 [[BF_ASHR109]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST110]], i32* [[ATMP106]], align 4
// CHK-CXX-NEXT:    [[CMP111:%.*]] = icmp slt i32 [[BF_CAST110]], [[TMP40]]
// CHK-CXX-NEXT:    br i1 [[CMP111]], label [[ATOMIC_CONT112:%.*]], label [[ATOMIC_EXIT130:%.*]]
// CHK-CXX:       atomic_cont112:
// CHK-CXX-NEXT:    [[TMP42:%.*]] = phi i8 [ [[ATOMIC_LOAD105]], [[ATOMIC_EXIT104]] ], [ [[TMP48:%.*]], [[ATOMIC_CMP124:%.*]] ]
// CHK-CXX-NEXT:    [[TMP43:%.*]] = bitcast i32* [[ATOMIC_TEMP113]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP42]], i8* [[TMP43]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD114:%.*]] = load i8, i8* [[TMP43]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR115:%.*]] = ashr i8 [[BF_LOAD114]], 7
// CHK-CXX-NEXT:    [[BF_CAST116:%.*]] = sext i8 [[BF_ASHR115]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST116]], i32* [[ATMP106]], align 4
// CHK-CXX-NEXT:    [[TMP44:%.*]] = bitcast i32* [[ATOMIC_TEMP117]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP42]], i8* [[TMP44]], align 1
// CHK-CXX-NEXT:    [[TMP45:%.*]] = trunc i32 [[TMP40]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD118:%.*]] = load i8, i8* [[TMP44]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE119:%.*]] = and i8 [[TMP45]], 1
// CHK-CXX-NEXT:    [[BF_SHL120:%.*]] = shl i8 [[BF_VALUE119]], 7
// CHK-CXX-NEXT:    [[BF_CLEAR121:%.*]] = and i8 [[BF_LOAD118]], 127
// CHK-CXX-NEXT:    [[BF_SET122:%.*]] = or i8 [[BF_CLEAR121]], [[BF_SHL120]]
// CHK-CXX-NEXT:    store i8 [[BF_SET122]], i8* [[TMP44]], align 1
// CHK-CXX-NEXT:    [[TMP46:%.*]] = load i8, i8* [[TMP44]], align 1
// CHK-CXX-NEXT:    [[TMP47:%.*]] = cmpxchg i8* getelementptr (i8, i8* bitcast (%struct.BitFields2_packed* @bfx2_packed to i8*), i64 3), i8 [[TMP42]], i8 [[TMP46]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP48]] = extractvalue { i8, i1 } [[TMP47]], 0
// CHK-CXX-NEXT:    [[TMP49:%.*]] = extractvalue { i8, i1 } [[TMP47]], 1
// CHK-CXX-NEXT:    br i1 [[TMP49]], label [[ATOMIC_UPD_EXIT123:%.*]], label [[ATOMIC_CMP124]]
// CHK-CXX:       atomic_upd_exit123:
// CHK-CXX-NEXT:    store i32 [[TMP40]], i32* [[ATMP106]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT130]]
// CHK-CXX:       atomic_cmp124:
// CHK-CXX-NEXT:    [[TMP50:%.*]] = bitcast i32* [[ATOMIC_TEMP125]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP48]], i8* [[TMP50]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD126:%.*]] = load i8, i8* [[TMP50]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR127:%.*]] = ashr i8 [[BF_LOAD126]], 7
// CHK-CXX-NEXT:    [[BF_CAST128:%.*]] = sext i8 [[BF_ASHR127]] to i32
// CHK-CXX-NEXT:    [[CMP129:%.*]] = icmp slt i32 [[BF_CAST128]], [[TMP40]]
// CHK-CXX-NEXT:    br i1 [[CMP129]], label [[ATOMIC_CONT112]], label [[ATOMIC_EXIT130]]
// CHK-CXX:       atomic_exit130:
// CHK-CXX-NEXT:    [[TMP51:%.*]] = load i32, i32* [[ATMP106]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP51]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP52:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD131:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS3:%.*]], %struct.BitFields3* @bfx3, i32 0, i32 0) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD131]], i32* [[ATOMIC_TEMP133]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD134:%.*]] = load i32, i32* [[ATOMIC_TEMP133]], align 4
// CHK-CXX-NEXT:    [[BF_SHL135:%.*]] = shl i32 [[BF_LOAD134]], 7
// CHK-CXX-NEXT:    [[BF_ASHR136:%.*]] = ashr i32 [[BF_SHL135]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR136]], i32* [[ATMP132]], align 4
// CHK-CXX-NEXT:    [[CMP137:%.*]] = icmp slt i32 [[BF_ASHR136]], [[TMP52]]
// CHK-CXX-NEXT:    br i1 [[CMP137]], label [[ATOMIC_CONT138:%.*]], label [[ATOMIC_EXIT155:%.*]]
// CHK-CXX:       atomic_cont138:
// CHK-CXX-NEXT:    [[TMP53:%.*]] = phi i32 [ [[ATOMIC_LOAD131]], [[ATOMIC_EXIT130]] ], [ [[TMP56:%.*]], [[ATOMIC_CMP149:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP53]], i32* [[ATOMIC_TEMP139]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD140:%.*]] = load i32, i32* [[ATOMIC_TEMP139]], align 4
// CHK-CXX-NEXT:    [[BF_SHL141:%.*]] = shl i32 [[BF_LOAD140]], 7
// CHK-CXX-NEXT:    [[BF_ASHR142:%.*]] = ashr i32 [[BF_SHL141]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR142]], i32* [[ATMP132]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP53]], i32* [[ATOMIC_TEMP143]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD144:%.*]] = load i32, i32* [[ATOMIC_TEMP143]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE145:%.*]] = and i32 [[TMP52]], 16383
// CHK-CXX-NEXT:    [[BF_SHL146:%.*]] = shl i32 [[BF_VALUE145]], 11
// CHK-CXX-NEXT:    [[BF_CLEAR147:%.*]] = and i32 [[BF_LOAD144]], -33552385
// CHK-CXX-NEXT:    [[BF_SET148:%.*]] = or i32 [[BF_CLEAR147]], [[BF_SHL146]]
// CHK-CXX-NEXT:    store i32 [[BF_SET148]], i32* [[ATOMIC_TEMP143]], align 4
// CHK-CXX-NEXT:    [[TMP54:%.*]] = load i32, i32* [[ATOMIC_TEMP143]], align 4
// CHK-CXX-NEXT:    [[TMP55:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0), i32 [[TMP53]], i32 [[TMP54]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP56]] = extractvalue { i32, i1 } [[TMP55]], 0
// CHK-CXX-NEXT:    [[TMP57:%.*]] = extractvalue { i32, i1 } [[TMP55]], 1
// CHK-CXX-NEXT:    br i1 [[TMP57]], label [[ATOMIC_EXIT155]], label [[ATOMIC_CMP149]]
// CHK-CXX:       atomic_cmp149:
// CHK-CXX-NEXT:    store i32 [[TMP56]], i32* [[ATOMIC_TEMP150]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD151:%.*]] = load i32, i32* [[ATOMIC_TEMP150]], align 4
// CHK-CXX-NEXT:    [[BF_SHL152:%.*]] = shl i32 [[BF_LOAD151]], 7
// CHK-CXX-NEXT:    [[BF_ASHR153:%.*]] = ashr i32 [[BF_SHL152]], 18
// CHK-CXX-NEXT:    [[CMP154:%.*]] = icmp slt i32 [[BF_ASHR153]], [[TMP52]]
// CHK-CXX-NEXT:    br i1 [[CMP154]], label [[ATOMIC_CONT138]], label [[ATOMIC_EXIT155]]
// CHK-CXX:       atomic_exit155:
// CHK-CXX-NEXT:    [[TMP58:%.*]] = load i32, i32* [[ATMP132]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP58]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP59:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD156:%.*]] = load atomic i32, i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD156]], i32* [[ATOMIC_TEMP158]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD159:%.*]] = load i32, i32* [[ATOMIC_TEMP158]], align 4
// CHK-CXX-NEXT:    [[BF_SHL160:%.*]] = shl i32 [[BF_LOAD159]], 7
// CHK-CXX-NEXT:    [[BF_ASHR161:%.*]] = ashr i32 [[BF_SHL160]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR161]], i32* [[ATMP157]], align 4
// CHK-CXX-NEXT:    [[CMP162:%.*]] = icmp slt i32 [[BF_ASHR161]], [[TMP59]]
// CHK-CXX-NEXT:    br i1 [[CMP162]], label [[ATOMIC_CONT163:%.*]], label [[ATOMIC_EXIT181:%.*]]
// CHK-CXX:       atomic_cont163:
// CHK-CXX-NEXT:    [[TMP60:%.*]] = phi i32 [ [[ATOMIC_LOAD156]], [[ATOMIC_EXIT155]] ], [ [[TMP63:%.*]], [[ATOMIC_CMP175:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP60]], i32* [[ATOMIC_TEMP164]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD165:%.*]] = load i32, i32* [[ATOMIC_TEMP164]], align 4
// CHK-CXX-NEXT:    [[BF_SHL166:%.*]] = shl i32 [[BF_LOAD165]], 7
// CHK-CXX-NEXT:    [[BF_ASHR167:%.*]] = ashr i32 [[BF_SHL166]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR167]], i32* [[ATMP157]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP60]], i32* [[ATOMIC_TEMP168]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD169:%.*]] = load i32, i32* [[ATOMIC_TEMP168]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE170:%.*]] = and i32 [[TMP59]], 16383
// CHK-CXX-NEXT:    [[BF_SHL171:%.*]] = shl i32 [[BF_VALUE170]], 11
// CHK-CXX-NEXT:    [[BF_CLEAR172:%.*]] = and i32 [[BF_LOAD169]], -33552385
// CHK-CXX-NEXT:    [[BF_SET173:%.*]] = or i32 [[BF_CLEAR172]], [[BF_SHL171]]
// CHK-CXX-NEXT:    store i32 [[BF_SET173]], i32* [[ATOMIC_TEMP168]], align 4
// CHK-CXX-NEXT:    [[TMP61:%.*]] = load i32, i32* [[ATOMIC_TEMP168]], align 4
// CHK-CXX-NEXT:    [[TMP62:%.*]] = cmpxchg i32* getelementptr inbounds ([[STRUCT_BITFIELDS3]], %struct.BitFields3* @bfx3, i32 0, i32 0), i32 [[TMP60]], i32 [[TMP61]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP63]] = extractvalue { i32, i1 } [[TMP62]], 0
// CHK-CXX-NEXT:    [[TMP64:%.*]] = extractvalue { i32, i1 } [[TMP62]], 1
// CHK-CXX-NEXT:    br i1 [[TMP64]], label [[ATOMIC_UPD_EXIT174:%.*]], label [[ATOMIC_CMP175]]
// CHK-CXX:       atomic_upd_exit174:
// CHK-CXX-NEXT:    store i32 [[TMP59]], i32* [[ATMP157]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT181]]
// CHK-CXX:       atomic_cmp175:
// CHK-CXX-NEXT:    store i32 [[TMP63]], i32* [[ATOMIC_TEMP176]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD177:%.*]] = load i32, i32* [[ATOMIC_TEMP176]], align 4
// CHK-CXX-NEXT:    [[BF_SHL178:%.*]] = shl i32 [[BF_LOAD177]], 7
// CHK-CXX-NEXT:    [[BF_ASHR179:%.*]] = ashr i32 [[BF_SHL178]], 18
// CHK-CXX-NEXT:    [[CMP180:%.*]] = icmp slt i32 [[BF_ASHR179]], [[TMP59]]
// CHK-CXX-NEXT:    br i1 [[CMP180]], label [[ATOMIC_CONT163]], label [[ATOMIC_EXIT181]]
// CHK-CXX:       atomic_exit181:
// CHK-CXX-NEXT:    [[TMP65:%.*]] = load i32, i32* [[ATMP157]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP65]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP66:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD182:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD182]], i64* [[ATOMIC_TEMP184]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD185:%.*]] = load i64, i64* [[ATOMIC_TEMP184]], align 8
// CHK-CXX-NEXT:    [[BF_SHL186:%.*]] = shl i64 [[BF_LOAD185]], 47
// CHK-CXX-NEXT:    [[BF_ASHR187:%.*]] = ashr i64 [[BF_SHL186]], 63
// CHK-CXX-NEXT:    [[BF_CAST188:%.*]] = trunc i64 [[BF_ASHR187]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST188]], i32* [[ATMP183]], align 4
// CHK-CXX-NEXT:    [[CMP189:%.*]] = icmp slt i32 [[BF_CAST188]], [[TMP66]]
// CHK-CXX-NEXT:    br i1 [[CMP189]], label [[ATOMIC_CONT190:%.*]], label [[ATOMIC_EXIT209:%.*]]
// CHK-CXX:       atomic_cont190:
// CHK-CXX-NEXT:    [[TMP67:%.*]] = phi i64 [ [[ATOMIC_LOAD182]], [[ATOMIC_EXIT181]] ], [ [[TMP71:%.*]], [[ATOMIC_CMP202:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP67]], i64* [[ATOMIC_TEMP191]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD192:%.*]] = load i64, i64* [[ATOMIC_TEMP191]], align 8
// CHK-CXX-NEXT:    [[BF_SHL193:%.*]] = shl i64 [[BF_LOAD192]], 47
// CHK-CXX-NEXT:    [[BF_ASHR194:%.*]] = ashr i64 [[BF_SHL193]], 63
// CHK-CXX-NEXT:    [[BF_CAST195:%.*]] = trunc i64 [[BF_ASHR194]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST195]], i32* [[ATMP183]], align 4
// CHK-CXX-NEXT:    store i64 [[TMP67]], i64* [[ATOMIC_TEMP196]], align 8
// CHK-CXX-NEXT:    [[TMP68:%.*]] = zext i32 [[TMP66]] to i64
// CHK-CXX-NEXT:    [[BF_LOAD197:%.*]] = load i64, i64* [[ATOMIC_TEMP196]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE198:%.*]] = and i64 [[TMP68]], 1
// CHK-CXX-NEXT:    [[BF_SHL199:%.*]] = shl i64 [[BF_VALUE198]], 16
// CHK-CXX-NEXT:    [[BF_CLEAR200:%.*]] = and i64 [[BF_LOAD197]], -65537
// CHK-CXX-NEXT:    [[BF_SET201:%.*]] = or i64 [[BF_CLEAR200]], [[BF_SHL199]]
// CHK-CXX-NEXT:    store i64 [[BF_SET201]], i64* [[ATOMIC_TEMP196]], align 8
// CHK-CXX-NEXT:    [[TMP69:%.*]] = load i64, i64* [[ATOMIC_TEMP196]], align 8
// CHK-CXX-NEXT:    [[TMP70:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP67]], i64 [[TMP69]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP71]] = extractvalue { i64, i1 } [[TMP70]], 0
// CHK-CXX-NEXT:    [[TMP72:%.*]] = extractvalue { i64, i1 } [[TMP70]], 1
// CHK-CXX-NEXT:    br i1 [[TMP72]], label [[ATOMIC_EXIT209]], label [[ATOMIC_CMP202]]
// CHK-CXX:       atomic_cmp202:
// CHK-CXX-NEXT:    store i64 [[TMP71]], i64* [[ATOMIC_TEMP203]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD204:%.*]] = load i64, i64* [[ATOMIC_TEMP203]], align 8
// CHK-CXX-NEXT:    [[BF_SHL205:%.*]] = shl i64 [[BF_LOAD204]], 47
// CHK-CXX-NEXT:    [[BF_ASHR206:%.*]] = ashr i64 [[BF_SHL205]], 63
// CHK-CXX-NEXT:    [[BF_CAST207:%.*]] = trunc i64 [[BF_ASHR206]] to i32
// CHK-CXX-NEXT:    [[CMP208:%.*]] = icmp slt i32 [[BF_CAST207]], [[TMP66]]
// CHK-CXX-NEXT:    br i1 [[CMP208]], label [[ATOMIC_CONT190]], label [[ATOMIC_EXIT209]]
// CHK-CXX:       atomic_exit209:
// CHK-CXX-NEXT:    [[TMP73:%.*]] = load i32, i32* [[ATMP183]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP73]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP74:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD210:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD210]], i64* [[ATOMIC_TEMP212]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD213:%.*]] = load i64, i64* [[ATOMIC_TEMP212]], align 8
// CHK-CXX-NEXT:    [[BF_SHL214:%.*]] = shl i64 [[BF_LOAD213]], 47
// CHK-CXX-NEXT:    [[BF_ASHR215:%.*]] = ashr i64 [[BF_SHL214]], 63
// CHK-CXX-NEXT:    [[BF_CAST216:%.*]] = trunc i64 [[BF_ASHR215]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST216]], i32* [[ATMP211]], align 4
// CHK-CXX-NEXT:    [[CMP217:%.*]] = icmp slt i32 [[BF_CAST216]], [[TMP74]]
// CHK-CXX-NEXT:    br i1 [[CMP217]], label [[ATOMIC_CONT218:%.*]], label [[ATOMIC_EXIT238:%.*]]
// CHK-CXX:       atomic_cont218:
// CHK-CXX-NEXT:    [[TMP75:%.*]] = phi i64 [ [[ATOMIC_LOAD210]], [[ATOMIC_EXIT209]] ], [ [[TMP79:%.*]], [[ATOMIC_CMP231:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP75]], i64* [[ATOMIC_TEMP219]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD220:%.*]] = load i64, i64* [[ATOMIC_TEMP219]], align 8
// CHK-CXX-NEXT:    [[BF_SHL221:%.*]] = shl i64 [[BF_LOAD220]], 47
// CHK-CXX-NEXT:    [[BF_ASHR222:%.*]] = ashr i64 [[BF_SHL221]], 63
// CHK-CXX-NEXT:    [[BF_CAST223:%.*]] = trunc i64 [[BF_ASHR222]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST223]], i32* [[ATMP211]], align 4
// CHK-CXX-NEXT:    store i64 [[TMP75]], i64* [[ATOMIC_TEMP224]], align 8
// CHK-CXX-NEXT:    [[TMP76:%.*]] = zext i32 [[TMP74]] to i64
// CHK-CXX-NEXT:    [[BF_LOAD225:%.*]] = load i64, i64* [[ATOMIC_TEMP224]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE226:%.*]] = and i64 [[TMP76]], 1
// CHK-CXX-NEXT:    [[BF_SHL227:%.*]] = shl i64 [[BF_VALUE226]], 16
// CHK-CXX-NEXT:    [[BF_CLEAR228:%.*]] = and i64 [[BF_LOAD225]], -65537
// CHK-CXX-NEXT:    [[BF_SET229:%.*]] = or i64 [[BF_CLEAR228]], [[BF_SHL227]]
// CHK-CXX-NEXT:    store i64 [[BF_SET229]], i64* [[ATOMIC_TEMP224]], align 8
// CHK-CXX-NEXT:    [[TMP77:%.*]] = load i64, i64* [[ATOMIC_TEMP224]], align 8
// CHK-CXX-NEXT:    [[TMP78:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP75]], i64 [[TMP77]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP79]] = extractvalue { i64, i1 } [[TMP78]], 0
// CHK-CXX-NEXT:    [[TMP80:%.*]] = extractvalue { i64, i1 } [[TMP78]], 1
// CHK-CXX-NEXT:    br i1 [[TMP80]], label [[ATOMIC_UPD_EXIT230:%.*]], label [[ATOMIC_CMP231]]
// CHK-CXX:       atomic_upd_exit230:
// CHK-CXX-NEXT:    store i32 [[TMP74]], i32* [[ATMP211]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT238]]
// CHK-CXX:       atomic_cmp231:
// CHK-CXX-NEXT:    store i64 [[TMP79]], i64* [[ATOMIC_TEMP232]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD233:%.*]] = load i64, i64* [[ATOMIC_TEMP232]], align 8
// CHK-CXX-NEXT:    [[BF_SHL234:%.*]] = shl i64 [[BF_LOAD233]], 47
// CHK-CXX-NEXT:    [[BF_ASHR235:%.*]] = ashr i64 [[BF_SHL234]], 63
// CHK-CXX-NEXT:    [[BF_CAST236:%.*]] = trunc i64 [[BF_ASHR235]] to i32
// CHK-CXX-NEXT:    [[CMP237:%.*]] = icmp slt i32 [[BF_CAST236]], [[TMP74]]
// CHK-CXX-NEXT:    br i1 [[CMP237]], label [[ATOMIC_CONT218]], label [[ATOMIC_EXIT238]]
// CHK-CXX:       atomic_exit238:
// CHK-CXX-NEXT:    [[TMP81:%.*]] = load i32, i32* [[ATMP211]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP81]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP82:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[CONV:%.*]] = sext i32 [[TMP82]] to i64
// CHK-CXX-NEXT:    [[ATOMIC_LOAD239:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD239]], i64* [[ATOMIC_TEMP241]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD242:%.*]] = load i64, i64* [[ATOMIC_TEMP241]], align 8
// CHK-CXX-NEXT:    [[BF_SHL243:%.*]] = shl i64 [[BF_LOAD242]], 40
// CHK-CXX-NEXT:    [[BF_ASHR244:%.*]] = ashr i64 [[BF_SHL243]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR244]], i64* [[ATMP240]], align 8
// CHK-CXX-NEXT:    [[CMP245:%.*]] = icmp slt i64 [[BF_ASHR244]], [[CONV]]
// CHK-CXX-NEXT:    br i1 [[CMP245]], label [[ATOMIC_CONT246:%.*]], label [[ATOMIC_EXIT263:%.*]]
// CHK-CXX:       atomic_cont246:
// CHK-CXX-NEXT:    [[TMP83:%.*]] = phi i64 [ [[ATOMIC_LOAD239]], [[ATOMIC_EXIT238]] ], [ [[TMP86:%.*]], [[ATOMIC_CMP257:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP83]], i64* [[ATOMIC_TEMP247]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD248:%.*]] = load i64, i64* [[ATOMIC_TEMP247]], align 8
// CHK-CXX-NEXT:    [[BF_SHL249:%.*]] = shl i64 [[BF_LOAD248]], 40
// CHK-CXX-NEXT:    [[BF_ASHR250:%.*]] = ashr i64 [[BF_SHL249]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR250]], i64* [[ATMP240]], align 8
// CHK-CXX-NEXT:    store i64 [[TMP83]], i64* [[ATOMIC_TEMP251]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD252:%.*]] = load i64, i64* [[ATOMIC_TEMP251]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE253:%.*]] = and i64 [[CONV]], 127
// CHK-CXX-NEXT:    [[BF_SHL254:%.*]] = shl i64 [[BF_VALUE253]], 17
// CHK-CXX-NEXT:    [[BF_CLEAR255:%.*]] = and i64 [[BF_LOAD252]], -16646145
// CHK-CXX-NEXT:    [[BF_SET256:%.*]] = or i64 [[BF_CLEAR255]], [[BF_SHL254]]
// CHK-CXX-NEXT:    store i64 [[BF_SET256]], i64* [[ATOMIC_TEMP251]], align 8
// CHK-CXX-NEXT:    [[TMP84:%.*]] = load i64, i64* [[ATOMIC_TEMP251]], align 8
// CHK-CXX-NEXT:    [[TMP85:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP83]], i64 [[TMP84]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP86]] = extractvalue { i64, i1 } [[TMP85]], 0
// CHK-CXX-NEXT:    [[TMP87:%.*]] = extractvalue { i64, i1 } [[TMP85]], 1
// CHK-CXX-NEXT:    br i1 [[TMP87]], label [[ATOMIC_EXIT263]], label [[ATOMIC_CMP257]]
// CHK-CXX:       atomic_cmp257:
// CHK-CXX-NEXT:    store i64 [[TMP86]], i64* [[ATOMIC_TEMP258]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD259:%.*]] = load i64, i64* [[ATOMIC_TEMP258]], align 8
// CHK-CXX-NEXT:    [[BF_SHL260:%.*]] = shl i64 [[BF_LOAD259]], 40
// CHK-CXX-NEXT:    [[BF_ASHR261:%.*]] = ashr i64 [[BF_SHL260]], 57
// CHK-CXX-NEXT:    [[CMP262:%.*]] = icmp slt i64 [[BF_ASHR261]], [[CONV]]
// CHK-CXX-NEXT:    br i1 [[CMP262]], label [[ATOMIC_CONT246]], label [[ATOMIC_EXIT263]]
// CHK-CXX:       atomic_exit263:
// CHK-CXX-NEXT:    [[TMP88:%.*]] = load i64, i64* [[ATMP240]], align 8
// CHK-CXX-NEXT:    [[CONV264:%.*]] = trunc i64 [[TMP88]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV264]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP89:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[CONV265:%.*]] = sext i32 [[TMP89]] to i64
// CHK-CXX-NEXT:    [[ATOMIC_LOAD266:%.*]] = load atomic i64, i64* bitcast (%struct.BitFields4* @bfx4 to i64*) monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD266]], i64* [[ATOMIC_TEMP268]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD269:%.*]] = load i64, i64* [[ATOMIC_TEMP268]], align 8
// CHK-CXX-NEXT:    [[BF_SHL270:%.*]] = shl i64 [[BF_LOAD269]], 40
// CHK-CXX-NEXT:    [[BF_ASHR271:%.*]] = ashr i64 [[BF_SHL270]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR271]], i64* [[ATMP267]], align 8
// CHK-CXX-NEXT:    [[CMP272:%.*]] = icmp slt i64 [[BF_ASHR271]], [[CONV265]]
// CHK-CXX-NEXT:    br i1 [[CMP272]], label [[ATOMIC_CONT273:%.*]], label [[ATOMIC_EXIT291:%.*]]
// CHK-CXX:       atomic_cont273:
// CHK-CXX-NEXT:    [[TMP90:%.*]] = phi i64 [ [[ATOMIC_LOAD266]], [[ATOMIC_EXIT263]] ], [ [[TMP93:%.*]], [[ATOMIC_CMP285:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP90]], i64* [[ATOMIC_TEMP274]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD275:%.*]] = load i64, i64* [[ATOMIC_TEMP274]], align 8
// CHK-CXX-NEXT:    [[BF_SHL276:%.*]] = shl i64 [[BF_LOAD275]], 40
// CHK-CXX-NEXT:    [[BF_ASHR277:%.*]] = ashr i64 [[BF_SHL276]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR277]], i64* [[ATMP267]], align 8
// CHK-CXX-NEXT:    store i64 [[TMP90]], i64* [[ATOMIC_TEMP278]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD279:%.*]] = load i64, i64* [[ATOMIC_TEMP278]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE280:%.*]] = and i64 [[CONV265]], 127
// CHK-CXX-NEXT:    [[BF_SHL281:%.*]] = shl i64 [[BF_VALUE280]], 17
// CHK-CXX-NEXT:    [[BF_CLEAR282:%.*]] = and i64 [[BF_LOAD279]], -16646145
// CHK-CXX-NEXT:    [[BF_SET283:%.*]] = or i64 [[BF_CLEAR282]], [[BF_SHL281]]
// CHK-CXX-NEXT:    store i64 [[BF_SET283]], i64* [[ATOMIC_TEMP278]], align 8
// CHK-CXX-NEXT:    [[TMP91:%.*]] = load i64, i64* [[ATOMIC_TEMP278]], align 8
// CHK-CXX-NEXT:    [[TMP92:%.*]] = cmpxchg i64* bitcast (%struct.BitFields4* @bfx4 to i64*), i64 [[TMP90]], i64 [[TMP91]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP93]] = extractvalue { i64, i1 } [[TMP92]], 0
// CHK-CXX-NEXT:    [[TMP94:%.*]] = extractvalue { i64, i1 } [[TMP92]], 1
// CHK-CXX-NEXT:    br i1 [[TMP94]], label [[ATOMIC_UPD_EXIT284:%.*]], label [[ATOMIC_CMP285]]
// CHK-CXX:       atomic_upd_exit284:
// CHK-CXX-NEXT:    store i64 [[CONV265]], i64* [[ATMP267]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT291]]
// CHK-CXX:       atomic_cmp285:
// CHK-CXX-NEXT:    store i64 [[TMP93]], i64* [[ATOMIC_TEMP286]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD287:%.*]] = load i64, i64* [[ATOMIC_TEMP286]], align 8
// CHK-CXX-NEXT:    [[BF_SHL288:%.*]] = shl i64 [[BF_LOAD287]], 40
// CHK-CXX-NEXT:    [[BF_ASHR289:%.*]] = ashr i64 [[BF_SHL288]], 57
// CHK-CXX-NEXT:    [[CMP290:%.*]] = icmp slt i64 [[BF_ASHR289]], [[CONV265]]
// CHK-CXX-NEXT:    br i1 [[CMP290]], label [[ATOMIC_CONT273]], label [[ATOMIC_EXIT291]]
// CHK-CXX:       atomic_exit291:
// CHK-CXX-NEXT:    [[TMP95:%.*]] = load i64, i64* [[ATMP267]], align 8
// CHK-CXX-NEXT:    [[CONV292:%.*]] = trunc i64 [[TMP95]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV292]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP96:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD293:%.*]] = load atomic i8, i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED:%.*]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2) monotonic, align 1
// CHK-CXX-NEXT:    [[TMP97:%.*]] = bitcast i32* [[ATOMIC_TEMP295]] to i8*
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD293]], i8* [[TMP97]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD296:%.*]] = load i8, i8* [[TMP97]], align 1
// CHK-CXX-NEXT:    [[BF_SHL297:%.*]] = shl i8 [[BF_LOAD296]], 7
// CHK-CXX-NEXT:    [[BF_ASHR298:%.*]] = ashr i8 [[BF_SHL297]], 7
// CHK-CXX-NEXT:    [[BF_CAST299:%.*]] = sext i8 [[BF_ASHR298]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST299]], i32* [[ATMP294]], align 4
// CHK-CXX-NEXT:    [[CMP300:%.*]] = icmp slt i32 [[BF_CAST299]], [[TMP96]]
// CHK-CXX-NEXT:    br i1 [[CMP300]], label [[ATOMIC_CONT301:%.*]], label [[ATOMIC_EXIT319:%.*]]
// CHK-CXX:       atomic_cont301:
// CHK-CXX-NEXT:    [[TMP98:%.*]] = phi i8 [ [[ATOMIC_LOAD293]], [[ATOMIC_EXIT291]] ], [ [[TMP104:%.*]], [[ATOMIC_CMP312:%.*]] ]
// CHK-CXX-NEXT:    [[TMP99:%.*]] = bitcast i32* [[ATOMIC_TEMP302]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP98]], i8* [[TMP99]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD303:%.*]] = load i8, i8* [[TMP99]], align 1
// CHK-CXX-NEXT:    [[BF_SHL304:%.*]] = shl i8 [[BF_LOAD303]], 7
// CHK-CXX-NEXT:    [[BF_ASHR305:%.*]] = ashr i8 [[BF_SHL304]], 7
// CHK-CXX-NEXT:    [[BF_CAST306:%.*]] = sext i8 [[BF_ASHR305]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST306]], i32* [[ATMP294]], align 4
// CHK-CXX-NEXT:    [[TMP100:%.*]] = bitcast i32* [[ATOMIC_TEMP307]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP98]], i8* [[TMP100]], align 1
// CHK-CXX-NEXT:    [[TMP101:%.*]] = trunc i32 [[TMP96]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD308:%.*]] = load i8, i8* [[TMP100]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE309:%.*]] = and i8 [[TMP101]], 1
// CHK-CXX-NEXT:    [[BF_CLEAR310:%.*]] = and i8 [[BF_LOAD308]], -2
// CHK-CXX-NEXT:    [[BF_SET311:%.*]] = or i8 [[BF_CLEAR310]], [[BF_VALUE309]]
// CHK-CXX-NEXT:    store i8 [[BF_SET311]], i8* [[TMP100]], align 1
// CHK-CXX-NEXT:    [[TMP102:%.*]] = load i8, i8* [[TMP100]], align 1
// CHK-CXX-NEXT:    [[TMP103:%.*]] = cmpxchg i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2), i8 [[TMP98]], i8 [[TMP102]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP104]] = extractvalue { i8, i1 } [[TMP103]], 0
// CHK-CXX-NEXT:    [[TMP105:%.*]] = extractvalue { i8, i1 } [[TMP103]], 1
// CHK-CXX-NEXT:    br i1 [[TMP105]], label [[ATOMIC_EXIT319]], label [[ATOMIC_CMP312]]
// CHK-CXX:       atomic_cmp312:
// CHK-CXX-NEXT:    [[TMP106:%.*]] = bitcast i32* [[ATOMIC_TEMP313]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP104]], i8* [[TMP106]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD314:%.*]] = load i8, i8* [[TMP106]], align 1
// CHK-CXX-NEXT:    [[BF_SHL315:%.*]] = shl i8 [[BF_LOAD314]], 7
// CHK-CXX-NEXT:    [[BF_ASHR316:%.*]] = ashr i8 [[BF_SHL315]], 7
// CHK-CXX-NEXT:    [[BF_CAST317:%.*]] = sext i8 [[BF_ASHR316]] to i32
// CHK-CXX-NEXT:    [[CMP318:%.*]] = icmp slt i32 [[BF_CAST317]], [[TMP96]]
// CHK-CXX-NEXT:    br i1 [[CMP318]], label [[ATOMIC_CONT301]], label [[ATOMIC_EXIT319]]
// CHK-CXX:       atomic_exit319:
// CHK-CXX-NEXT:    [[TMP107:%.*]] = load i32, i32* [[ATMP294]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP107]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP108:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD320:%.*]] = load atomic i8, i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2) monotonic, align 1
// CHK-CXX-NEXT:    [[TMP109:%.*]] = bitcast i32* [[ATOMIC_TEMP322]] to i8*
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD320]], i8* [[TMP109]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD323:%.*]] = load i8, i8* [[TMP109]], align 1
// CHK-CXX-NEXT:    [[BF_SHL324:%.*]] = shl i8 [[BF_LOAD323]], 7
// CHK-CXX-NEXT:    [[BF_ASHR325:%.*]] = ashr i8 [[BF_SHL324]], 7
// CHK-CXX-NEXT:    [[BF_CAST326:%.*]] = sext i8 [[BF_ASHR325]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST326]], i32* [[ATMP321]], align 4
// CHK-CXX-NEXT:    [[CMP327:%.*]] = icmp slt i32 [[BF_CAST326]], [[TMP108]]
// CHK-CXX-NEXT:    br i1 [[CMP327]], label [[ATOMIC_CONT328:%.*]], label [[ATOMIC_EXIT347:%.*]]
// CHK-CXX:       atomic_cont328:
// CHK-CXX-NEXT:    [[TMP110:%.*]] = phi i8 [ [[ATOMIC_LOAD320]], [[ATOMIC_EXIT319]] ], [ [[TMP116:%.*]], [[ATOMIC_CMP340:%.*]] ]
// CHK-CXX-NEXT:    [[TMP111:%.*]] = bitcast i32* [[ATOMIC_TEMP329]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP110]], i8* [[TMP111]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD330:%.*]] = load i8, i8* [[TMP111]], align 1
// CHK-CXX-NEXT:    [[BF_SHL331:%.*]] = shl i8 [[BF_LOAD330]], 7
// CHK-CXX-NEXT:    [[BF_ASHR332:%.*]] = ashr i8 [[BF_SHL331]], 7
// CHK-CXX-NEXT:    [[BF_CAST333:%.*]] = sext i8 [[BF_ASHR332]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST333]], i32* [[ATMP321]], align 4
// CHK-CXX-NEXT:    [[TMP112:%.*]] = bitcast i32* [[ATOMIC_TEMP334]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP110]], i8* [[TMP112]], align 1
// CHK-CXX-NEXT:    [[TMP113:%.*]] = trunc i32 [[TMP108]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD335:%.*]] = load i8, i8* [[TMP112]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE336:%.*]] = and i8 [[TMP113]], 1
// CHK-CXX-NEXT:    [[BF_CLEAR337:%.*]] = and i8 [[BF_LOAD335]], -2
// CHK-CXX-NEXT:    [[BF_SET338:%.*]] = or i8 [[BF_CLEAR337]], [[BF_VALUE336]]
// CHK-CXX-NEXT:    store i8 [[BF_SET338]], i8* [[TMP112]], align 1
// CHK-CXX-NEXT:    [[TMP114:%.*]] = load i8, i8* [[TMP112]], align 1
// CHK-CXX-NEXT:    [[TMP115:%.*]] = cmpxchg i8* getelementptr inbounds ([[STRUCT_BITFIELDS4_PACKED]], %struct.BitFields4_packed* @bfx4_packed, i32 0, i32 0, i64 2), i8 [[TMP110]], i8 [[TMP114]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP116]] = extractvalue { i8, i1 } [[TMP115]], 0
// CHK-CXX-NEXT:    [[TMP117:%.*]] = extractvalue { i8, i1 } [[TMP115]], 1
// CHK-CXX-NEXT:    br i1 [[TMP117]], label [[ATOMIC_UPD_EXIT339:%.*]], label [[ATOMIC_CMP340]]
// CHK-CXX:       atomic_upd_exit339:
// CHK-CXX-NEXT:    store i32 [[TMP108]], i32* [[ATMP321]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT347]]
// CHK-CXX:       atomic_cmp340:
// CHK-CXX-NEXT:    [[TMP118:%.*]] = bitcast i32* [[ATOMIC_TEMP341]] to i8*
// CHK-CXX-NEXT:    store i8 [[TMP116]], i8* [[TMP118]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD342:%.*]] = load i8, i8* [[TMP118]], align 1
// CHK-CXX-NEXT:    [[BF_SHL343:%.*]] = shl i8 [[BF_LOAD342]], 7
// CHK-CXX-NEXT:    [[BF_ASHR344:%.*]] = ashr i8 [[BF_SHL343]], 7
// CHK-CXX-NEXT:    [[BF_CAST345:%.*]] = sext i8 [[BF_ASHR344]] to i32
// CHK-CXX-NEXT:    [[CMP346:%.*]] = icmp slt i32 [[BF_CAST345]], [[TMP108]]
// CHK-CXX-NEXT:    br i1 [[CMP346]], label [[ATOMIC_CONT328]], label [[ATOMIC_EXIT347]]
// CHK-CXX:       atomic_exit347:
// CHK-CXX-NEXT:    [[TMP119:%.*]] = load i32, i32* [[ATMP321]], align 4
// CHK-CXX-NEXT:    store i32 [[TMP119]], i32* [[V]], align 4
// CHK-CXX-NEXT:    ret void
//
void test_bitfield()
{
  int expr, d, e, v;

  #pragma omp atomic compare capture
  { v = bfx.a; if (bfx.a < expr) { bfx.a = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (bfx.a < expr) { bfx.a = expr; } v = bfx.a; } // MAX

#ifdef LIBCALLS
  #pragma omp atomic compare capture
  { v = bfx_packed.a; if (bfx_packed.a < expr) { bfx_packed.a = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (bfx_packed.a < expr) { bfx_packed.a = expr; } v = bfx_packed.a; } // MAX
#endif

  #pragma omp atomic compare capture
  { v = bfx2.a; if (bfx2.a < expr) { bfx2.a = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (bfx2.a < expr) { bfx2.a = expr; } v = bfx2.a; } // MAX

  #pragma omp atomic compare capture
  { v = bfx2_packed.a;
    if (bfx2_packed.a < expr) { bfx2_packed.a = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (bfx2_packed.a < expr) { bfx2_packed.a = expr; }
    v =  bfx2_packed.a; } // MAX

  #pragma omp atomic compare capture
  { v = bfx3.a; if (bfx3.a < expr) { bfx3.a = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (bfx3.a < expr) { bfx3.a = expr; } v = bfx3.a; } // MAX

#ifdef LIBCALLS
  #pragma omp atomic compare capture
  { v = bfx3_packed.a;
    if (bfx3_packed.a < expr) { bfx3_packed.a = expr; } }// MAX
  #pragma omp atomic compare capture
  { if (bfx3_packed.a < expr) { bfx3_packed.a = expr; }
    v = bfx3_packed.a; }// MAX
#endif

  #pragma omp atomic compare capture
  { v = bfx4.a; if (bfx4.a < expr) { bfx4.a = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (bfx4.a < expr) { bfx4.a = expr; } v = bfx4.a; } // MAX

  #pragma omp atomic compare capture
  { v = bfx4.b; if (bfx4.b < expr) { bfx4.b = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (bfx4.b < expr) { bfx4.b = expr; }  v = bfx4.b; } // MAX

  #pragma omp atomic compare capture
  { v = bfx4_packed.a;
    if (bfx4_packed.a < expr) { bfx4_packed.a = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (bfx4_packed.a < expr) { bfx4_packed.a = expr; }
    v = bfx4_packed.a; } // MAX
}

// CHK-C-LABEL: @test_ext_vector(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[FLOAT2X:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[V:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[TMP:%.*]] = alloca float, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP1:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP3:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP4:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATMP10:%.*]] = alloca float, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP11:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP15:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP17:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP19:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[TMP0:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[CONV:%.*]] = sitofp i32 [[TMP0]] to float
// CHK-C-NEXT:    [[TMP1:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, i64* [[TMP1]] monotonic, align 8
// CHK-C-NEXT:    [[STORETMP:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP]] to i64*
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD]], i64* [[STORETMP]], align 8
// CHK-C-NEXT:    [[TMP2:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP]], align 8
// CHK-C-NEXT:    [[TMP3:%.*]] = extractelement <2 x float> [[TMP2]], i64 0
// CHK-C-NEXT:    store float [[TMP3]], float* [[TMP]], align 4
// CHK-C-NEXT:    [[CMP:%.*]] = fcmp olt float [[TMP3]], [[CONV]]
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP4:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP13:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    [[STORETMP2:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP1]] to i64*
// CHK-C-NEXT:    store i64 [[TMP4]], i64* [[STORETMP2]], align 8
// CHK-C-NEXT:    [[TMP5:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP1]], align 8
// CHK-C-NEXT:    [[TMP6:%.*]] = extractelement <2 x float> [[TMP5]], i64 0
// CHK-C-NEXT:    store float [[TMP6]], float* [[TMP]], align 4
// CHK-C-NEXT:    [[TMP7:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP3]] to i64*
// CHK-C-NEXT:    store i64 [[TMP4]], i64* [[TMP7]], align 8
// CHK-C-NEXT:    [[TMP8:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP3]], align 8
// CHK-C-NEXT:    [[TMP9:%.*]] = insertelement <2 x float> [[TMP8]], float [[CONV]], i64 0
// CHK-C-NEXT:    store <2 x float> [[TMP9]], <2 x float>* [[ATOMIC_TEMP3]], align 8
// CHK-C-NEXT:    [[TMP10:%.*]] = load i64, i64* [[TMP7]], align 8
// CHK-C-NEXT:    [[TMP11:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-C-NEXT:    [[TMP12:%.*]] = cmpxchg i64* [[TMP11]], i64 [[TMP4]], i64 [[TMP10]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP13]] = extractvalue { i64, i1 } [[TMP12]], 0
// CHK-C-NEXT:    [[TMP14:%.*]] = extractvalue { i64, i1 } [[TMP12]], 1
// CHK-C-NEXT:    br i1 [[TMP14]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    [[STORETMP5:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP4]] to i64*
// CHK-C-NEXT:    store i64 [[TMP13]], i64* [[STORETMP5]], align 8
// CHK-C-NEXT:    [[TMP15:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP4]], align 8
// CHK-C-NEXT:    [[TMP16:%.*]] = extractelement <2 x float> [[TMP15]], i64 0
// CHK-C-NEXT:    [[CMP6:%.*]] = fcmp olt float [[TMP16]], [[CONV]]
// CHK-C-NEXT:    br i1 [[CMP6]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP17:%.*]] = load float, float* [[TMP]], align 4
// CHK-C-NEXT:    [[CONV7:%.*]] = fptosi float [[TMP17]] to i32
// CHK-C-NEXT:    store i32 [[CONV7]], i32* [[V]], align 4
// CHK-C-NEXT:    [[TMP18:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-C-NEXT:    [[CONV8:%.*]] = sitofp i32 [[TMP18]] to float
// CHK-C-NEXT:    [[TMP19:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-C-NEXT:    [[ATOMIC_LOAD9:%.*]] = load atomic i64, i64* [[TMP19]] monotonic, align 8
// CHK-C-NEXT:    [[STORETMP12:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP11]] to i64*
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD9]], i64* [[STORETMP12]], align 8
// CHK-C-NEXT:    [[TMP20:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP11]], align 8
// CHK-C-NEXT:    [[TMP21:%.*]] = extractelement <2 x float> [[TMP20]], i64 0
// CHK-C-NEXT:    store float [[TMP21]], float* [[ATMP10]], align 4
// CHK-C-NEXT:    [[CMP13:%.*]] = fcmp olt float [[TMP21]], [[CONV8]]
// CHK-C-NEXT:    br i1 [[CMP13]], label [[ATOMIC_CONT14:%.*]], label [[ATOMIC_EXIT22:%.*]]
// CHK-C:       atomic_cont14:
// CHK-C-NEXT:    [[TMP22:%.*]] = phi i64 [ [[ATOMIC_LOAD9]], [[ATOMIC_EXIT]] ], [ [[TMP31:%.*]], [[ATOMIC_CMP18:%.*]] ]
// CHK-C-NEXT:    [[STORETMP16:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP15]] to i64*
// CHK-C-NEXT:    store i64 [[TMP22]], i64* [[STORETMP16]], align 8
// CHK-C-NEXT:    [[TMP23:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP15]], align 8
// CHK-C-NEXT:    [[TMP24:%.*]] = extractelement <2 x float> [[TMP23]], i64 0
// CHK-C-NEXT:    store float [[TMP24]], float* [[ATMP10]], align 4
// CHK-C-NEXT:    [[TMP25:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP17]] to i64*
// CHK-C-NEXT:    store i64 [[TMP22]], i64* [[TMP25]], align 8
// CHK-C-NEXT:    [[TMP26:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP17]], align 8
// CHK-C-NEXT:    [[TMP27:%.*]] = insertelement <2 x float> [[TMP26]], float [[CONV8]], i64 0
// CHK-C-NEXT:    store <2 x float> [[TMP27]], <2 x float>* [[ATOMIC_TEMP17]], align 8
// CHK-C-NEXT:    [[TMP28:%.*]] = load i64, i64* [[TMP25]], align 8
// CHK-C-NEXT:    [[TMP29:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-C-NEXT:    [[TMP30:%.*]] = cmpxchg i64* [[TMP29]], i64 [[TMP22]], i64 [[TMP28]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP31]] = extractvalue { i64, i1 } [[TMP30]], 0
// CHK-C-NEXT:    [[TMP32:%.*]] = extractvalue { i64, i1 } [[TMP30]], 1
// CHK-C-NEXT:    br i1 [[TMP32]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP18]]
// CHK-C:       atomic_upd_exit:
// CHK-C-NEXT:    store float [[CONV8]], float* [[ATMP10]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT22]]
// CHK-C:       atomic_cmp18:
// CHK-C-NEXT:    [[STORETMP20:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP19]] to i64*
// CHK-C-NEXT:    store i64 [[TMP31]], i64* [[STORETMP20]], align 8
// CHK-C-NEXT:    [[TMP33:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP19]], align 8
// CHK-C-NEXT:    [[TMP34:%.*]] = extractelement <2 x float> [[TMP33]], i64 0
// CHK-C-NEXT:    [[CMP21:%.*]] = fcmp olt float [[TMP34]], [[CONV8]]
// CHK-C-NEXT:    br i1 [[CMP21]], label [[ATOMIC_CONT14]], label [[ATOMIC_EXIT22]]
// CHK-C:       atomic_exit22:
// CHK-C-NEXT:    [[TMP35:%.*]] = load float, float* [[ATMP10]], align 4
// CHK-C-NEXT:    [[CONV23:%.*]] = fptosi float [[TMP35]] to i32
// CHK-C-NEXT:    store i32 [[CONV23]], i32* [[V]], align 4
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z15test_ext_vectorv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[FLOAT2X:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[V:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca float, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP1:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP3:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP4:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATMP10:%.*]] = alloca float, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP11:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP15:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP17:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP19:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[CONV:%.*]] = sitofp i32 [[TMP0]] to float
// CHK-CXX-NEXT:    [[TMP1:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, i64* [[TMP1]] monotonic, align 8
// CHK-CXX-NEXT:    [[STORETMP:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP]] to i64*
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD]], i64* [[STORETMP]], align 8
// CHK-CXX-NEXT:    [[TMP2:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP]], align 8
// CHK-CXX-NEXT:    [[TMP3:%.*]] = extractelement <2 x float> [[TMP2]], i64 0
// CHK-CXX-NEXT:    store float [[TMP3]], float* [[TMP]], align 4
// CHK-CXX-NEXT:    [[CMP:%.*]] = fcmp olt float [[TMP3]], [[CONV]]
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP4:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP13:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    [[STORETMP2:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP1]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP4]], i64* [[STORETMP2]], align 8
// CHK-CXX-NEXT:    [[TMP5:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP1]], align 8
// CHK-CXX-NEXT:    [[TMP6:%.*]] = extractelement <2 x float> [[TMP5]], i64 0
// CHK-CXX-NEXT:    store float [[TMP6]], float* [[TMP]], align 4
// CHK-CXX-NEXT:    [[TMP7:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP3]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP4]], i64* [[TMP7]], align 8
// CHK-CXX-NEXT:    [[TMP8:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP3]], align 8
// CHK-CXX-NEXT:    [[TMP9:%.*]] = insertelement <2 x float> [[TMP8]], float [[CONV]], i64 0
// CHK-CXX-NEXT:    store <2 x float> [[TMP9]], <2 x float>* [[ATOMIC_TEMP3]], align 8
// CHK-CXX-NEXT:    [[TMP10:%.*]] = load i64, i64* [[TMP7]], align 8
// CHK-CXX-NEXT:    [[TMP11:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-CXX-NEXT:    [[TMP12:%.*]] = cmpxchg i64* [[TMP11]], i64 [[TMP4]], i64 [[TMP10]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP13]] = extractvalue { i64, i1 } [[TMP12]], 0
// CHK-CXX-NEXT:    [[TMP14:%.*]] = extractvalue { i64, i1 } [[TMP12]], 1
// CHK-CXX-NEXT:    br i1 [[TMP14]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    [[STORETMP5:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP4]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP13]], i64* [[STORETMP5]], align 8
// CHK-CXX-NEXT:    [[TMP15:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP4]], align 8
// CHK-CXX-NEXT:    [[TMP16:%.*]] = extractelement <2 x float> [[TMP15]], i64 0
// CHK-CXX-NEXT:    [[CMP6:%.*]] = fcmp olt float [[TMP16]], [[CONV]]
// CHK-CXX-NEXT:    br i1 [[CMP6]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP17:%.*]] = load float, float* [[TMP]], align 4
// CHK-CXX-NEXT:    [[CONV7:%.*]] = fptosi float [[TMP17]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV7]], i32* [[V]], align 4
// CHK-CXX-NEXT:    [[TMP18:%.*]] = load i32, i32* [[EXPR]], align 4
// CHK-CXX-NEXT:    [[CONV8:%.*]] = sitofp i32 [[TMP18]] to float
// CHK-CXX-NEXT:    [[TMP19:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-CXX-NEXT:    [[ATOMIC_LOAD9:%.*]] = load atomic i64, i64* [[TMP19]] monotonic, align 8
// CHK-CXX-NEXT:    [[STORETMP12:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP11]] to i64*
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD9]], i64* [[STORETMP12]], align 8
// CHK-CXX-NEXT:    [[TMP20:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP11]], align 8
// CHK-CXX-NEXT:    [[TMP21:%.*]] = extractelement <2 x float> [[TMP20]], i64 0
// CHK-CXX-NEXT:    store float [[TMP21]], float* [[ATMP10]], align 4
// CHK-CXX-NEXT:    [[CMP13:%.*]] = fcmp olt float [[TMP21]], [[CONV8]]
// CHK-CXX-NEXT:    br i1 [[CMP13]], label [[ATOMIC_CONT14:%.*]], label [[ATOMIC_EXIT22:%.*]]
// CHK-CXX:       atomic_cont14:
// CHK-CXX-NEXT:    [[TMP22:%.*]] = phi i64 [ [[ATOMIC_LOAD9]], [[ATOMIC_EXIT]] ], [ [[TMP31:%.*]], [[ATOMIC_CMP18:%.*]] ]
// CHK-CXX-NEXT:    [[STORETMP16:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP15]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP22]], i64* [[STORETMP16]], align 8
// CHK-CXX-NEXT:    [[TMP23:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP15]], align 8
// CHK-CXX-NEXT:    [[TMP24:%.*]] = extractelement <2 x float> [[TMP23]], i64 0
// CHK-CXX-NEXT:    store float [[TMP24]], float* [[ATMP10]], align 4
// CHK-CXX-NEXT:    [[TMP25:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP17]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP22]], i64* [[TMP25]], align 8
// CHK-CXX-NEXT:    [[TMP26:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP17]], align 8
// CHK-CXX-NEXT:    [[TMP27:%.*]] = insertelement <2 x float> [[TMP26]], float [[CONV8]], i64 0
// CHK-CXX-NEXT:    store <2 x float> [[TMP27]], <2 x float>* [[ATOMIC_TEMP17]], align 8
// CHK-CXX-NEXT:    [[TMP28:%.*]] = load i64, i64* [[TMP25]], align 8
// CHK-CXX-NEXT:    [[TMP29:%.*]] = bitcast <2 x float>* [[FLOAT2X]] to i64*
// CHK-CXX-NEXT:    [[TMP30:%.*]] = cmpxchg i64* [[TMP29]], i64 [[TMP22]], i64 [[TMP28]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP31]] = extractvalue { i64, i1 } [[TMP30]], 0
// CHK-CXX-NEXT:    [[TMP32:%.*]] = extractvalue { i64, i1 } [[TMP30]], 1
// CHK-CXX-NEXT:    br i1 [[TMP32]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP18]]
// CHK-CXX:       atomic_upd_exit:
// CHK-CXX-NEXT:    store float [[CONV8]], float* [[ATMP10]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT22]]
// CHK-CXX:       atomic_cmp18:
// CHK-CXX-NEXT:    [[STORETMP20:%.*]] = bitcast <2 x float>* [[ATOMIC_TEMP19]] to i64*
// CHK-CXX-NEXT:    store i64 [[TMP31]], i64* [[STORETMP20]], align 8
// CHK-CXX-NEXT:    [[TMP33:%.*]] = load <2 x float>, <2 x float>* [[ATOMIC_TEMP19]], align 8
// CHK-CXX-NEXT:    [[TMP34:%.*]] = extractelement <2 x float> [[TMP33]], i64 0
// CHK-CXX-NEXT:    [[CMP21:%.*]] = fcmp olt float [[TMP34]], [[CONV8]]
// CHK-CXX-NEXT:    br i1 [[CMP21]], label [[ATOMIC_CONT14]], label [[ATOMIC_EXIT22]]
// CHK-CXX:       atomic_exit22:
// CHK-CXX-NEXT:    [[TMP35:%.*]] = load float, float* [[ATMP10]], align 4
// CHK-CXX-NEXT:    [[CONV23:%.*]] = fptosi float [[TMP35]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV23]], i32* [[V]], align 4
// CHK-CXX-NEXT:    ret void
//
void test_ext_vector() {
  typedef float float2 __attribute__((ext_vector_type(2)));
  float2 float2x;

  int expr, d, e, v;

  #pragma omp atomic compare capture
  { v = float2x.x; if (float2x.x < expr) { float2x.x = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (float2x.x < expr) { float2x.x = expr; } v = float2x.x; } // MAX
}

#endif // HEADER
