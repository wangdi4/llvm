// INTEL_COLLAB
// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --prefix-filecheck-ir-name a
// RUN: %clang_cc1 -opaque-pointers -verify -triple x86_64-unknown-linux-gnu -fopenmp -x c \
// RUN:  -fopenmp-late-outline -fopenmp-version=51 -emit-llvm %s -o - \
// RUN:  | FileCheck %s --check-prefix CHK-C

// RUN: %clang_cc1 -opaque-pointers -verify -triple x86_64-unknown-linux-gnu -fopenmp -x c \
// RUN: -fopenmp-late-outline -fopenmp-version=51 -emit-pch %s -o %t.pch

// RUN: %clang_cc1 -opaque-pointers -verify -triple x86_64-unknown-linux-gnu -fopenmp  -x c \
// RUN:  -fopenmp-late-outline -fopenmp-version=51 -emit-llvm %s -o - \
// RUN:  -include-pch %t.pch | FileCheck %s --check-prefix CHK-C
//
// RUN: %clang_cc1 -opaque-pointers -verify -triple x86_64-unknown-linux-gnu -fopenmp \
// RUN:  -fopenmp-late-outline -fopenmp-version=51 -emit-llvm %s -o - \
// RUN:  | FileCheck %s --check-prefix CHK-CXX
//
// RUN: %clang_cc1 -opaque-pointers -verify -triple x86_64-unknown-linux-gnu -fopenmp \
// RUN: -fopenmp-late-outline -fopenmp-version=51 -emit-pch %s -o %t.pch

// RUN: %clang_cc1 -opaque-pointers -verify -triple x86_64-unknown-linux-gnu -fopenmp \
// RUN:  -fopenmp-late-outline -fopenmp-version=51 -emit-llvm %s -o - \
// RUN:  -include-pch %t.pch | FileCheck %s --check-prefix CHK-CXX
//
// expected-no-diagnostics
#ifndef HEADER
#define HEADER

// CHK-C-LABEL: @test_int(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[X:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[V:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[R:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[TMP:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP5:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP7:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP10:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP16:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP18:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP21:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP27:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP29:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP32:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP39:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP41:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP44:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP50:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP52:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP55:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP62:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP64:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP67:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP73:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP75:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP78:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP85:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP87:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP90:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP96:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP98:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP101:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP108:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP110:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP113:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP120:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP122:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP125:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP131:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP133:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP136:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[TMP0:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD]], ptr [[TMP]], align 4
// CHK-C-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-C-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL]], ptr [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP1:%.*]] = phi i32 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP0]], ptr [[ATOMIC_TEMP]], align 4
// CHK-C-NEXT:    [[TMP2:%.*]] = load i32, ptr [[ATOMIC_TEMP]], align 4
// CHK-C-NEXT:    [[TMP3:%.*]] = cmpxchg ptr [[X]], i32 [[TMP1]], i32 [[TMP2]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP4]] = extractvalue { i32, i1 } [[TMP3]], 0
// CHK-C-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i1 } [[TMP3]], 1
// CHK-C-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    store i32 [[TMP4]], ptr [[TMP]], align 4
// CHK-C-NEXT:    [[CMP2:%.*]] = icmp sgt i32 [[TMP4]], [[TMP0]]
// CHK-C-NEXT:    [[FROMBOOL3:%.*]] = zext i1 [[CMP2]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL3]], ptr [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP2]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP]], align 4
// CHK-C-NEXT:    [[TMP7:%.*]] = load i8, ptr [[ATMP1]], align 1
// CHK-C-NEXT:    store i32 [[TMP6]], ptr [[V]], align 4
// CHK-C-NEXT:    [[TMP8:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD4:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD4]], ptr [[ATMP5]], align 4
// CHK-C-NEXT:    [[CMP6:%.*]] = icmp sgt i32 [[ATOMIC_LOAD4]], [[TMP8]]
// CHK-C-NEXT:    [[FROMBOOL8:%.*]] = zext i1 [[CMP6]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL8]], ptr [[ATMP7]], align 1
// CHK-C-NEXT:    br i1 [[CMP6]], label [[ATOMIC_CONT9:%.*]], label [[ATOMIC_EXIT14:%.*]]
// CHK-C:       atomic_cont9:
// CHK-C-NEXT:    [[TMP9:%.*]] = phi i32 [ [[ATOMIC_LOAD4]], [[ATOMIC_EXIT]] ], [ [[TMP12:%.*]], [[ATOMIC_CMP11:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP8]], ptr [[ATOMIC_TEMP10]], align 4
// CHK-C-NEXT:    [[TMP10:%.*]] = load i32, ptr [[ATOMIC_TEMP10]], align 4
// CHK-C-NEXT:    [[TMP11:%.*]] = cmpxchg ptr [[X]], i32 [[TMP9]], i32 [[TMP10]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP12]] = extractvalue { i32, i1 } [[TMP11]], 0
// CHK-C-NEXT:    [[TMP13:%.*]] = extractvalue { i32, i1 } [[TMP11]], 1
// CHK-C-NEXT:    br i1 [[TMP13]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP11]]
// CHK-C:       atomic_upd_exit:
// CHK-C-NEXT:    store i32 [[TMP8]], ptr [[ATMP5]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT14]]
// CHK-C:       atomic_cmp11:
// CHK-C-NEXT:    store i32 [[TMP12]], ptr [[ATMP5]], align 4
// CHK-C-NEXT:    [[CMP12:%.*]] = icmp sgt i32 [[TMP12]], [[TMP8]]
// CHK-C-NEXT:    [[FROMBOOL13:%.*]] = zext i1 [[CMP12]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL13]], ptr [[ATMP7]], align 1
// CHK-C-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT9]], label [[ATOMIC_EXIT14]]
// CHK-C:       atomic_exit14:
// CHK-C-NEXT:    [[TMP14:%.*]] = load i32, ptr [[ATMP5]], align 4
// CHK-C-NEXT:    [[TMP15:%.*]] = load i8, ptr [[ATMP7]], align 1
// CHK-C-NEXT:    store i32 [[TMP14]], ptr [[V]], align 4
// CHK-C-NEXT:    [[TMP16:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD15:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD15]], ptr [[ATMP16]], align 4
// CHK-C-NEXT:    [[CMP17:%.*]] = icmp slt i32 [[ATOMIC_LOAD15]], [[TMP16]]
// CHK-C-NEXT:    [[FROMBOOL19:%.*]] = zext i1 [[CMP17]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL19]], ptr [[ATMP18]], align 1
// CHK-C-NEXT:    br i1 [[CMP17]], label [[ATOMIC_CONT20:%.*]], label [[ATOMIC_EXIT25:%.*]]
// CHK-C:       atomic_cont20:
// CHK-C-NEXT:    [[TMP17:%.*]] = phi i32 [ [[ATOMIC_LOAD15]], [[ATOMIC_EXIT14]] ], [ [[TMP20:%.*]], [[ATOMIC_CMP22:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP16]], ptr [[ATOMIC_TEMP21]], align 4
// CHK-C-NEXT:    [[TMP18:%.*]] = load i32, ptr [[ATOMIC_TEMP21]], align 4
// CHK-C-NEXT:    [[TMP19:%.*]] = cmpxchg ptr [[X]], i32 [[TMP17]], i32 [[TMP18]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP20]] = extractvalue { i32, i1 } [[TMP19]], 0
// CHK-C-NEXT:    [[TMP21:%.*]] = extractvalue { i32, i1 } [[TMP19]], 1
// CHK-C-NEXT:    br i1 [[TMP21]], label [[ATOMIC_EXIT25]], label [[ATOMIC_CMP22]]
// CHK-C:       atomic_cmp22:
// CHK-C-NEXT:    store i32 [[TMP20]], ptr [[ATMP16]], align 4
// CHK-C-NEXT:    [[CMP23:%.*]] = icmp slt i32 [[TMP20]], [[TMP16]]
// CHK-C-NEXT:    [[FROMBOOL24:%.*]] = zext i1 [[CMP23]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL24]], ptr [[ATMP18]], align 1
// CHK-C-NEXT:    br i1 [[CMP23]], label [[ATOMIC_CONT20]], label [[ATOMIC_EXIT25]]
// CHK-C:       atomic_exit25:
// CHK-C-NEXT:    [[TMP22:%.*]] = load i32, ptr [[ATMP16]], align 4
// CHK-C-NEXT:    [[TMP23:%.*]] = load i8, ptr [[ATMP18]], align 1
// CHK-C-NEXT:    store i32 [[TMP22]], ptr [[V]], align 4
// CHK-C-NEXT:    [[TMP24:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD26:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD26]], ptr [[ATMP27]], align 4
// CHK-C-NEXT:    [[CMP28:%.*]] = icmp slt i32 [[ATOMIC_LOAD26]], [[TMP24]]
// CHK-C-NEXT:    [[FROMBOOL30:%.*]] = zext i1 [[CMP28]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL30]], ptr [[ATMP29]], align 1
// CHK-C-NEXT:    br i1 [[CMP28]], label [[ATOMIC_CONT31:%.*]], label [[ATOMIC_EXIT37:%.*]]
// CHK-C:       atomic_cont31:
// CHK-C-NEXT:    [[TMP25:%.*]] = phi i32 [ [[ATOMIC_LOAD26]], [[ATOMIC_EXIT25]] ], [ [[TMP28:%.*]], [[ATOMIC_CMP34:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP24]], ptr [[ATOMIC_TEMP32]], align 4
// CHK-C-NEXT:    [[TMP26:%.*]] = load i32, ptr [[ATOMIC_TEMP32]], align 4
// CHK-C-NEXT:    [[TMP27:%.*]] = cmpxchg ptr [[X]], i32 [[TMP25]], i32 [[TMP26]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP28]] = extractvalue { i32, i1 } [[TMP27]], 0
// CHK-C-NEXT:    [[TMP29:%.*]] = extractvalue { i32, i1 } [[TMP27]], 1
// CHK-C-NEXT:    br i1 [[TMP29]], label [[ATOMIC_UPD_EXIT33:%.*]], label [[ATOMIC_CMP34]]
// CHK-C:       atomic_upd_exit33:
// CHK-C-NEXT:    store i32 [[TMP24]], ptr [[ATMP27]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT37]]
// CHK-C:       atomic_cmp34:
// CHK-C-NEXT:    store i32 [[TMP28]], ptr [[ATMP27]], align 4
// CHK-C-NEXT:    [[CMP35:%.*]] = icmp slt i32 [[TMP28]], [[TMP24]]
// CHK-C-NEXT:    [[FROMBOOL36:%.*]] = zext i1 [[CMP35]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL36]], ptr [[ATMP29]], align 1
// CHK-C-NEXT:    br i1 [[CMP35]], label [[ATOMIC_CONT31]], label [[ATOMIC_EXIT37]]
// CHK-C:       atomic_exit37:
// CHK-C-NEXT:    [[TMP30:%.*]] = load i32, ptr [[ATMP27]], align 4
// CHK-C-NEXT:    [[TMP31:%.*]] = load i8, ptr [[ATMP29]], align 1
// CHK-C-NEXT:    store i32 [[TMP30]], ptr [[V]], align 4
// CHK-C-NEXT:    [[TMP32:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD38:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD38]], ptr [[ATMP39]], align 4
// CHK-C-NEXT:    [[CMP40:%.*]] = icmp slt i32 [[ATOMIC_LOAD38]], [[TMP32]]
// CHK-C-NEXT:    [[FROMBOOL42:%.*]] = zext i1 [[CMP40]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL42]], ptr [[ATMP41]], align 1
// CHK-C-NEXT:    br i1 [[CMP40]], label [[ATOMIC_CONT43:%.*]], label [[ATOMIC_EXIT48:%.*]]
// CHK-C:       atomic_cont43:
// CHK-C-NEXT:    [[TMP33:%.*]] = phi i32 [ [[ATOMIC_LOAD38]], [[ATOMIC_EXIT37]] ], [ [[TMP36:%.*]], [[ATOMIC_CMP45:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP32]], ptr [[ATOMIC_TEMP44]], align 4
// CHK-C-NEXT:    [[TMP34:%.*]] = load i32, ptr [[ATOMIC_TEMP44]], align 4
// CHK-C-NEXT:    [[TMP35:%.*]] = cmpxchg ptr [[X]], i32 [[TMP33]], i32 [[TMP34]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP36]] = extractvalue { i32, i1 } [[TMP35]], 0
// CHK-C-NEXT:    [[TMP37:%.*]] = extractvalue { i32, i1 } [[TMP35]], 1
// CHK-C-NEXT:    br i1 [[TMP37]], label [[ATOMIC_EXIT48]], label [[ATOMIC_CMP45]]
// CHK-C:       atomic_cmp45:
// CHK-C-NEXT:    store i32 [[TMP36]], ptr [[ATMP39]], align 4
// CHK-C-NEXT:    [[CMP46:%.*]] = icmp slt i32 [[TMP36]], [[TMP32]]
// CHK-C-NEXT:    [[FROMBOOL47:%.*]] = zext i1 [[CMP46]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL47]], ptr [[ATMP41]], align 1
// CHK-C-NEXT:    br i1 [[CMP46]], label [[ATOMIC_CONT43]], label [[ATOMIC_EXIT48]]
// CHK-C:       atomic_exit48:
// CHK-C-NEXT:    [[TMP38:%.*]] = load i32, ptr [[ATMP39]], align 4
// CHK-C-NEXT:    [[TMP39:%.*]] = load i8, ptr [[ATMP41]], align 1
// CHK-C-NEXT:    store i32 [[TMP38]], ptr [[V]], align 4
// CHK-C-NEXT:    [[TMP40:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD49:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD49]], ptr [[ATMP50]], align 4
// CHK-C-NEXT:    [[CMP51:%.*]] = icmp slt i32 [[ATOMIC_LOAD49]], [[TMP40]]
// CHK-C-NEXT:    [[FROMBOOL53:%.*]] = zext i1 [[CMP51]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL53]], ptr [[ATMP52]], align 1
// CHK-C-NEXT:    br i1 [[CMP51]], label [[ATOMIC_CONT54:%.*]], label [[ATOMIC_EXIT60:%.*]]
// CHK-C:       atomic_cont54:
// CHK-C-NEXT:    [[TMP41:%.*]] = phi i32 [ [[ATOMIC_LOAD49]], [[ATOMIC_EXIT48]] ], [ [[TMP44:%.*]], [[ATOMIC_CMP57:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP40]], ptr [[ATOMIC_TEMP55]], align 4
// CHK-C-NEXT:    [[TMP42:%.*]] = load i32, ptr [[ATOMIC_TEMP55]], align 4
// CHK-C-NEXT:    [[TMP43:%.*]] = cmpxchg ptr [[X]], i32 [[TMP41]], i32 [[TMP42]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP44]] = extractvalue { i32, i1 } [[TMP43]], 0
// CHK-C-NEXT:    [[TMP45:%.*]] = extractvalue { i32, i1 } [[TMP43]], 1
// CHK-C-NEXT:    br i1 [[TMP45]], label [[ATOMIC_UPD_EXIT56:%.*]], label [[ATOMIC_CMP57]]
// CHK-C:       atomic_upd_exit56:
// CHK-C-NEXT:    store i32 [[TMP40]], ptr [[ATMP50]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT60]]
// CHK-C:       atomic_cmp57:
// CHK-C-NEXT:    store i32 [[TMP44]], ptr [[ATMP50]], align 4
// CHK-C-NEXT:    [[CMP58:%.*]] = icmp slt i32 [[TMP44]], [[TMP40]]
// CHK-C-NEXT:    [[FROMBOOL59:%.*]] = zext i1 [[CMP58]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL59]], ptr [[ATMP52]], align 1
// CHK-C-NEXT:    br i1 [[CMP58]], label [[ATOMIC_CONT54]], label [[ATOMIC_EXIT60]]
// CHK-C:       atomic_exit60:
// CHK-C-NEXT:    [[TMP46:%.*]] = load i32, ptr [[ATMP50]], align 4
// CHK-C-NEXT:    [[TMP47:%.*]] = load i8, ptr [[ATMP52]], align 1
// CHK-C-NEXT:    store i32 [[TMP46]], ptr [[V]], align 4
// CHK-C-NEXT:    [[TMP48:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD61:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD61]], ptr [[ATMP62]], align 4
// CHK-C-NEXT:    [[CMP63:%.*]] = icmp sgt i32 [[ATOMIC_LOAD61]], [[TMP48]]
// CHK-C-NEXT:    [[FROMBOOL65:%.*]] = zext i1 [[CMP63]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL65]], ptr [[ATMP64]], align 1
// CHK-C-NEXT:    br i1 [[CMP63]], label [[ATOMIC_CONT66:%.*]], label [[ATOMIC_EXIT71:%.*]]
// CHK-C:       atomic_cont66:
// CHK-C-NEXT:    [[TMP49:%.*]] = phi i32 [ [[ATOMIC_LOAD61]], [[ATOMIC_EXIT60]] ], [ [[TMP52:%.*]], [[ATOMIC_CMP68:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP48]], ptr [[ATOMIC_TEMP67]], align 4
// CHK-C-NEXT:    [[TMP50:%.*]] = load i32, ptr [[ATOMIC_TEMP67]], align 4
// CHK-C-NEXT:    [[TMP51:%.*]] = cmpxchg ptr [[X]], i32 [[TMP49]], i32 [[TMP50]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP52]] = extractvalue { i32, i1 } [[TMP51]], 0
// CHK-C-NEXT:    [[TMP53:%.*]] = extractvalue { i32, i1 } [[TMP51]], 1
// CHK-C-NEXT:    br i1 [[TMP53]], label [[ATOMIC_EXIT71]], label [[ATOMIC_CMP68]]
// CHK-C:       atomic_cmp68:
// CHK-C-NEXT:    store i32 [[TMP52]], ptr [[ATMP62]], align 4
// CHK-C-NEXT:    [[CMP69:%.*]] = icmp sgt i32 [[TMP52]], [[TMP48]]
// CHK-C-NEXT:    [[FROMBOOL70:%.*]] = zext i1 [[CMP69]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL70]], ptr [[ATMP64]], align 1
// CHK-C-NEXT:    br i1 [[CMP69]], label [[ATOMIC_CONT66]], label [[ATOMIC_EXIT71]]
// CHK-C:       atomic_exit71:
// CHK-C-NEXT:    [[TMP54:%.*]] = load i32, ptr [[ATMP62]], align 4
// CHK-C-NEXT:    [[TMP55:%.*]] = load i8, ptr [[ATMP64]], align 1
// CHK-C-NEXT:    store i32 [[TMP54]], ptr [[V]], align 4
// CHK-C-NEXT:    [[TMP56:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD72:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD72]], ptr [[ATMP73]], align 4
// CHK-C-NEXT:    [[CMP74:%.*]] = icmp sgt i32 [[ATOMIC_LOAD72]], [[TMP56]]
// CHK-C-NEXT:    [[FROMBOOL76:%.*]] = zext i1 [[CMP74]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL76]], ptr [[ATMP75]], align 1
// CHK-C-NEXT:    br i1 [[CMP74]], label [[ATOMIC_CONT77:%.*]], label [[ATOMIC_EXIT83:%.*]]
// CHK-C:       atomic_cont77:
// CHK-C-NEXT:    [[TMP57:%.*]] = phi i32 [ [[ATOMIC_LOAD72]], [[ATOMIC_EXIT71]] ], [ [[TMP60:%.*]], [[ATOMIC_CMP80:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP56]], ptr [[ATOMIC_TEMP78]], align 4
// CHK-C-NEXT:    [[TMP58:%.*]] = load i32, ptr [[ATOMIC_TEMP78]], align 4
// CHK-C-NEXT:    [[TMP59:%.*]] = cmpxchg ptr [[X]], i32 [[TMP57]], i32 [[TMP58]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP60]] = extractvalue { i32, i1 } [[TMP59]], 0
// CHK-C-NEXT:    [[TMP61:%.*]] = extractvalue { i32, i1 } [[TMP59]], 1
// CHK-C-NEXT:    br i1 [[TMP61]], label [[ATOMIC_UPD_EXIT79:%.*]], label [[ATOMIC_CMP80]]
// CHK-C:       atomic_upd_exit79:
// CHK-C-NEXT:    store i32 [[TMP56]], ptr [[ATMP73]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT83]]
// CHK-C:       atomic_cmp80:
// CHK-C-NEXT:    store i32 [[TMP60]], ptr [[ATMP73]], align 4
// CHK-C-NEXT:    [[CMP81:%.*]] = icmp sgt i32 [[TMP60]], [[TMP56]]
// CHK-C-NEXT:    [[FROMBOOL82:%.*]] = zext i1 [[CMP81]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL82]], ptr [[ATMP75]], align 1
// CHK-C-NEXT:    br i1 [[CMP81]], label [[ATOMIC_CONT77]], label [[ATOMIC_EXIT83]]
// CHK-C:       atomic_exit83:
// CHK-C-NEXT:    [[TMP62:%.*]] = load i32, ptr [[ATMP73]], align 4
// CHK-C-NEXT:    [[TMP63:%.*]] = load i8, ptr [[ATMP75]], align 1
// CHK-C-NEXT:    store i32 [[TMP62]], ptr [[V]], align 4
// CHK-C-NEXT:    [[TMP64:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[TMP65:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD84:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD84]], ptr [[ATMP85]], align 4
// CHK-C-NEXT:    [[CMP86:%.*]] = icmp eq i32 [[ATOMIC_LOAD84]], [[TMP65]]
// CHK-C-NEXT:    [[FROMBOOL88:%.*]] = zext i1 [[CMP86]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL88]], ptr [[ATMP87]], align 1
// CHK-C-NEXT:    br i1 [[CMP86]], label [[ATOMIC_CONT89:%.*]], label [[ATOMIC_EXIT94:%.*]]
// CHK-C:       atomic_cont89:
// CHK-C-NEXT:    [[TMP66:%.*]] = phi i32 [ [[ATOMIC_LOAD84]], [[ATOMIC_EXIT83]] ], [ [[TMP69:%.*]], [[ATOMIC_CMP91:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP64]], ptr [[ATOMIC_TEMP90]], align 4
// CHK-C-NEXT:    [[TMP67:%.*]] = load i32, ptr [[ATOMIC_TEMP90]], align 4
// CHK-C-NEXT:    [[TMP68:%.*]] = cmpxchg ptr [[X]], i32 [[TMP66]], i32 [[TMP67]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP69]] = extractvalue { i32, i1 } [[TMP68]], 0
// CHK-C-NEXT:    [[TMP70:%.*]] = extractvalue { i32, i1 } [[TMP68]], 1
// CHK-C-NEXT:    br i1 [[TMP70]], label [[ATOMIC_EXIT94]], label [[ATOMIC_CMP91]]
// CHK-C:       atomic_cmp91:
// CHK-C-NEXT:    store i32 [[TMP69]], ptr [[ATMP85]], align 4
// CHK-C-NEXT:    [[CMP92:%.*]] = icmp eq i32 [[TMP69]], [[TMP65]]
// CHK-C-NEXT:    [[FROMBOOL93:%.*]] = zext i1 [[CMP92]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL93]], ptr [[ATMP87]], align 1
// CHK-C-NEXT:    br i1 [[CMP92]], label [[ATOMIC_CONT89]], label [[ATOMIC_EXIT94]]
// CHK-C:       atomic_exit94:
// CHK-C-NEXT:    [[TMP71:%.*]] = load i32, ptr [[ATMP85]], align 4
// CHK-C-NEXT:    [[TMP72:%.*]] = load i8, ptr [[ATMP87]], align 1
// CHK-C-NEXT:    store i32 [[TMP71]], ptr [[V]], align 4
// CHK-C-NEXT:    [[TMP73:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[TMP74:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD95:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD95]], ptr [[ATMP96]], align 4
// CHK-C-NEXT:    [[CMP97:%.*]] = icmp eq i32 [[ATOMIC_LOAD95]], [[TMP74]]
// CHK-C-NEXT:    [[FROMBOOL99:%.*]] = zext i1 [[CMP97]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL99]], ptr [[ATMP98]], align 1
// CHK-C-NEXT:    br i1 [[CMP97]], label [[ATOMIC_CONT100:%.*]], label [[ATOMIC_EXIT106:%.*]]
// CHK-C:       atomic_cont100:
// CHK-C-NEXT:    [[TMP75:%.*]] = phi i32 [ [[ATOMIC_LOAD95]], [[ATOMIC_EXIT94]] ], [ [[TMP78:%.*]], [[ATOMIC_CMP103:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP73]], ptr [[ATOMIC_TEMP101]], align 4
// CHK-C-NEXT:    [[TMP76:%.*]] = load i32, ptr [[ATOMIC_TEMP101]], align 4
// CHK-C-NEXT:    [[TMP77:%.*]] = cmpxchg ptr [[X]], i32 [[TMP75]], i32 [[TMP76]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP78]] = extractvalue { i32, i1 } [[TMP77]], 0
// CHK-C-NEXT:    [[TMP79:%.*]] = extractvalue { i32, i1 } [[TMP77]], 1
// CHK-C-NEXT:    br i1 [[TMP79]], label [[ATOMIC_UPD_EXIT102:%.*]], label [[ATOMIC_CMP103]]
// CHK-C:       atomic_upd_exit102:
// CHK-C-NEXT:    store i32 [[TMP73]], ptr [[ATMP96]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT106]]
// CHK-C:       atomic_cmp103:
// CHK-C-NEXT:    store i32 [[TMP78]], ptr [[ATMP96]], align 4
// CHK-C-NEXT:    [[CMP104:%.*]] = icmp eq i32 [[TMP78]], [[TMP74]]
// CHK-C-NEXT:    [[FROMBOOL105:%.*]] = zext i1 [[CMP104]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL105]], ptr [[ATMP98]], align 1
// CHK-C-NEXT:    br i1 [[CMP104]], label [[ATOMIC_CONT100]], label [[ATOMIC_EXIT106]]
// CHK-C:       atomic_exit106:
// CHK-C-NEXT:    [[TMP80:%.*]] = load i32, ptr [[ATMP96]], align 4
// CHK-C-NEXT:    [[TMP81:%.*]] = load i8, ptr [[ATMP98]], align 1
// CHK-C-NEXT:    store i32 [[TMP80]], ptr [[V]], align 4
// CHK-C-NEXT:    [[TMP82:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[TMP83:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD107:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD107]], ptr [[ATMP108]], align 4
// CHK-C-NEXT:    [[CMP109:%.*]] = icmp eq i32 [[ATOMIC_LOAD107]], [[TMP83]]
// CHK-C-NEXT:    [[FROMBOOL111:%.*]] = zext i1 [[CMP109]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL111]], ptr [[ATMP110]], align 1
// CHK-C-NEXT:    br i1 [[CMP109]], label [[ATOMIC_CONT112:%.*]], label [[ATOMIC_EXIT118:%.*]]
// CHK-C:       atomic_cont112:
// CHK-C-NEXT:    [[TMP84:%.*]] = phi i32 [ [[ATOMIC_LOAD107]], [[ATOMIC_EXIT106]] ], [ [[TMP87:%.*]], [[ATOMIC_CMP115:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP82]], ptr [[ATOMIC_TEMP113]], align 4
// CHK-C-NEXT:    [[TMP85:%.*]] = load i32, ptr [[ATOMIC_TEMP113]], align 4
// CHK-C-NEXT:    [[TMP86:%.*]] = cmpxchg ptr [[X]], i32 [[TMP84]], i32 [[TMP85]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP87]] = extractvalue { i32, i1 } [[TMP86]], 0
// CHK-C-NEXT:    [[TMP88:%.*]] = extractvalue { i32, i1 } [[TMP86]], 1
// CHK-C-NEXT:    br i1 [[TMP88]], label [[ATOMIC_UPD_EXIT114:%.*]], label [[ATOMIC_CMP115]]
// CHK-C:       atomic_upd_exit114:
// CHK-C-NEXT:    store i32 [[TMP82]], ptr [[ATMP108]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT118]]
// CHK-C:       atomic_cmp115:
// CHK-C-NEXT:    store i32 [[TMP87]], ptr [[ATMP108]], align 4
// CHK-C-NEXT:    [[CMP116:%.*]] = icmp eq i32 [[TMP87]], [[TMP83]]
// CHK-C-NEXT:    [[FROMBOOL117:%.*]] = zext i1 [[CMP116]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL117]], ptr [[ATMP110]], align 1
// CHK-C-NEXT:    br i1 [[CMP116]], label [[ATOMIC_CONT112]], label [[ATOMIC_EXIT118]]
// CHK-C:       atomic_exit118:
// CHK-C-NEXT:    [[TMP89:%.*]] = load i32, ptr [[ATMP108]], align 4
// CHK-C-NEXT:    [[TMP90:%.*]] = load i8, ptr [[ATMP110]], align 1
// CHK-C-NEXT:    [[TMP91:%.*]] = trunc i8 [[TMP90]] to i1
// CHK-C-NEXT:    br i1 [[TMP91]], label [[ATOMIC_CAPTURE_CONT:%.*]], label [[ATOMIC_CAPTURE:%.*]]
// CHK-C:       atomic_capture:
// CHK-C-NEXT:    store i32 [[TMP89]], ptr [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT]]
// CHK-C:       atomic_capture_cont:
// CHK-C-NEXT:    [[TMP92:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[TMP93:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD119:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD119]], ptr [[ATMP120]], align 4
// CHK-C-NEXT:    [[CMP121:%.*]] = icmp eq i32 [[ATOMIC_LOAD119]], [[TMP93]]
// CHK-C-NEXT:    [[FROMBOOL123:%.*]] = zext i1 [[CMP121]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL123]], ptr [[ATMP122]], align 1
// CHK-C-NEXT:    br i1 [[CMP121]], label [[ATOMIC_CONT124:%.*]], label [[ATOMIC_EXIT129:%.*]]
// CHK-C:       atomic_cont124:
// CHK-C-NEXT:    [[TMP94:%.*]] = phi i32 [ [[ATOMIC_LOAD119]], [[ATOMIC_CAPTURE_CONT]] ], [ [[TMP97:%.*]], [[ATOMIC_CMP126:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP92]], ptr [[ATOMIC_TEMP125]], align 4
// CHK-C-NEXT:    [[TMP95:%.*]] = load i32, ptr [[ATOMIC_TEMP125]], align 4
// CHK-C-NEXT:    [[TMP96:%.*]] = cmpxchg ptr [[X]], i32 [[TMP94]], i32 [[TMP95]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP97]] = extractvalue { i32, i1 } [[TMP96]], 0
// CHK-C-NEXT:    [[TMP98:%.*]] = extractvalue { i32, i1 } [[TMP96]], 1
// CHK-C-NEXT:    br i1 [[TMP98]], label [[ATOMIC_EXIT129]], label [[ATOMIC_CMP126]]
// CHK-C:       atomic_cmp126:
// CHK-C-NEXT:    store i32 [[TMP97]], ptr [[ATMP120]], align 4
// CHK-C-NEXT:    [[CMP127:%.*]] = icmp eq i32 [[TMP97]], [[TMP93]]
// CHK-C-NEXT:    [[FROMBOOL128:%.*]] = zext i1 [[CMP127]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL128]], ptr [[ATMP122]], align 1
// CHK-C-NEXT:    br i1 [[CMP127]], label [[ATOMIC_CONT124]], label [[ATOMIC_EXIT129]]
// CHK-C:       atomic_exit129:
// CHK-C-NEXT:    [[TMP99:%.*]] = load i32, ptr [[ATMP120]], align 4
// CHK-C-NEXT:    [[TMP100:%.*]] = load i8, ptr [[ATMP122]], align 1
// CHK-C-NEXT:    store i8 [[TMP100]], ptr [[R]], align 1
// CHK-C-NEXT:    [[TMP101:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[TMP102:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD130:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD130]], ptr [[ATMP131]], align 4
// CHK-C-NEXT:    [[CMP132:%.*]] = icmp eq i32 [[ATOMIC_LOAD130]], [[TMP102]]
// CHK-C-NEXT:    [[FROMBOOL134:%.*]] = zext i1 [[CMP132]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL134]], ptr [[ATMP133]], align 1
// CHK-C-NEXT:    br i1 [[CMP132]], label [[ATOMIC_CONT135:%.*]], label [[ATOMIC_EXIT140:%.*]]
// CHK-C:       atomic_cont135:
// CHK-C-NEXT:    [[TMP103:%.*]] = phi i32 [ [[ATOMIC_LOAD130]], [[ATOMIC_EXIT129]] ], [ [[TMP106:%.*]], [[ATOMIC_CMP137:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP101]], ptr [[ATOMIC_TEMP136]], align 4
// CHK-C-NEXT:    [[TMP104:%.*]] = load i32, ptr [[ATOMIC_TEMP136]], align 4
// CHK-C-NEXT:    [[TMP105:%.*]] = cmpxchg ptr [[X]], i32 [[TMP103]], i32 [[TMP104]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP106]] = extractvalue { i32, i1 } [[TMP105]], 0
// CHK-C-NEXT:    [[TMP107:%.*]] = extractvalue { i32, i1 } [[TMP105]], 1
// CHK-C-NEXT:    br i1 [[TMP107]], label [[ATOMIC_EXIT140]], label [[ATOMIC_CMP137]]
// CHK-C:       atomic_cmp137:
// CHK-C-NEXT:    store i32 [[TMP106]], ptr [[ATMP131]], align 4
// CHK-C-NEXT:    [[CMP138:%.*]] = icmp eq i32 [[TMP106]], [[TMP102]]
// CHK-C-NEXT:    [[FROMBOOL139:%.*]] = zext i1 [[CMP138]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL139]], ptr [[ATMP133]], align 1
// CHK-C-NEXT:    br i1 [[CMP138]], label [[ATOMIC_CONT135]], label [[ATOMIC_EXIT140]]
// CHK-C:       atomic_exit140:
// CHK-C-NEXT:    [[TMP108:%.*]] = load i32, ptr [[ATMP131]], align 4
// CHK-C-NEXT:    [[TMP109:%.*]] = load i8, ptr [[ATMP133]], align 1
// CHK-C-NEXT:    store i8 [[TMP109]], ptr [[R]], align 1
// CHK-C-NEXT:    [[TMP110:%.*]] = trunc i8 [[TMP109]] to i1
// CHK-C-NEXT:    br i1 [[TMP110]], label [[ATOMIC_CAPTURE_CONT142:%.*]], label [[ATOMIC_CAPTURE141:%.*]]
// CHK-C:       atomic_capture141:
// CHK-C-NEXT:    store i32 [[TMP108]], ptr [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT142]]
// CHK-C:       atomic_capture_cont142:
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z8test_intv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[X:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[V:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[R:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP5:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP7:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP10:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP16:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP18:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP21:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP27:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP29:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP32:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP39:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP41:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP44:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP50:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP52:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP55:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP62:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP64:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP67:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP73:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP75:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP78:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP85:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP87:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP90:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP96:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP98:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP101:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP108:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP110:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP113:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP120:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP122:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP125:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP131:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP133:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP136:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD]], ptr [[TMP]], align 4
// CHK-CXX-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-CXX-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL]], ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP1:%.*]] = phi i32 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP0]], ptr [[ATOMIC_TEMP]], align 4
// CHK-CXX-NEXT:    [[TMP2:%.*]] = load i32, ptr [[ATOMIC_TEMP]], align 4
// CHK-CXX-NEXT:    [[TMP3:%.*]] = cmpxchg ptr [[X]], i32 [[TMP1]], i32 [[TMP2]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP4]] = extractvalue { i32, i1 } [[TMP3]], 0
// CHK-CXX-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i1 } [[TMP3]], 1
// CHK-CXX-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    store i32 [[TMP4]], ptr [[TMP]], align 4
// CHK-CXX-NEXT:    [[CMP2:%.*]] = icmp sgt i32 [[TMP4]], [[TMP0]]
// CHK-CXX-NEXT:    [[FROMBOOL3:%.*]] = zext i1 [[CMP2]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL3]], ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP2]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP]], align 4
// CHK-CXX-NEXT:    [[TMP7:%.*]] = load i8, ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP6]], ptr [[V]], align 4
// CHK-CXX-NEXT:    [[TMP8:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD4:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD4]], ptr [[ATMP5]], align 4
// CHK-CXX-NEXT:    [[CMP6:%.*]] = icmp sgt i32 [[ATOMIC_LOAD4]], [[TMP8]]
// CHK-CXX-NEXT:    [[FROMBOOL8:%.*]] = zext i1 [[CMP6]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL8]], ptr [[ATMP7]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP6]], label [[ATOMIC_CONT9:%.*]], label [[ATOMIC_EXIT14:%.*]]
// CHK-CXX:       atomic_cont9:
// CHK-CXX-NEXT:    [[TMP9:%.*]] = phi i32 [ [[ATOMIC_LOAD4]], [[ATOMIC_EXIT]] ], [ [[TMP12:%.*]], [[ATOMIC_CMP11:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP8]], ptr [[ATOMIC_TEMP10]], align 4
// CHK-CXX-NEXT:    [[TMP10:%.*]] = load i32, ptr [[ATOMIC_TEMP10]], align 4
// CHK-CXX-NEXT:    [[TMP11:%.*]] = cmpxchg ptr [[X]], i32 [[TMP9]], i32 [[TMP10]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP12]] = extractvalue { i32, i1 } [[TMP11]], 0
// CHK-CXX-NEXT:    [[TMP13:%.*]] = extractvalue { i32, i1 } [[TMP11]], 1
// CHK-CXX-NEXT:    br i1 [[TMP13]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP11]]
// CHK-CXX:       atomic_upd_exit:
// CHK-CXX-NEXT:    store i32 [[TMP8]], ptr [[ATMP5]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT14]]
// CHK-CXX:       atomic_cmp11:
// CHK-CXX-NEXT:    store i32 [[TMP12]], ptr [[ATMP5]], align 4
// CHK-CXX-NEXT:    [[CMP12:%.*]] = icmp sgt i32 [[TMP12]], [[TMP8]]
// CHK-CXX-NEXT:    [[FROMBOOL13:%.*]] = zext i1 [[CMP12]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL13]], ptr [[ATMP7]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT9]], label [[ATOMIC_EXIT14]]
// CHK-CXX:       atomic_exit14:
// CHK-CXX-NEXT:    [[TMP14:%.*]] = load i32, ptr [[ATMP5]], align 4
// CHK-CXX-NEXT:    [[TMP15:%.*]] = load i8, ptr [[ATMP7]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP14]], ptr [[V]], align 4
// CHK-CXX-NEXT:    [[TMP16:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD15:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD15]], ptr [[ATMP16]], align 4
// CHK-CXX-NEXT:    [[CMP17:%.*]] = icmp slt i32 [[ATOMIC_LOAD15]], [[TMP16]]
// CHK-CXX-NEXT:    [[FROMBOOL19:%.*]] = zext i1 [[CMP17]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL19]], ptr [[ATMP18]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP17]], label [[ATOMIC_CONT20:%.*]], label [[ATOMIC_EXIT25:%.*]]
// CHK-CXX:       atomic_cont20:
// CHK-CXX-NEXT:    [[TMP17:%.*]] = phi i32 [ [[ATOMIC_LOAD15]], [[ATOMIC_EXIT14]] ], [ [[TMP20:%.*]], [[ATOMIC_CMP22:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP16]], ptr [[ATOMIC_TEMP21]], align 4
// CHK-CXX-NEXT:    [[TMP18:%.*]] = load i32, ptr [[ATOMIC_TEMP21]], align 4
// CHK-CXX-NEXT:    [[TMP19:%.*]] = cmpxchg ptr [[X]], i32 [[TMP17]], i32 [[TMP18]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP20]] = extractvalue { i32, i1 } [[TMP19]], 0
// CHK-CXX-NEXT:    [[TMP21:%.*]] = extractvalue { i32, i1 } [[TMP19]], 1
// CHK-CXX-NEXT:    br i1 [[TMP21]], label [[ATOMIC_EXIT25]], label [[ATOMIC_CMP22]]
// CHK-CXX:       atomic_cmp22:
// CHK-CXX-NEXT:    store i32 [[TMP20]], ptr [[ATMP16]], align 4
// CHK-CXX-NEXT:    [[CMP23:%.*]] = icmp slt i32 [[TMP20]], [[TMP16]]
// CHK-CXX-NEXT:    [[FROMBOOL24:%.*]] = zext i1 [[CMP23]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL24]], ptr [[ATMP18]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP23]], label [[ATOMIC_CONT20]], label [[ATOMIC_EXIT25]]
// CHK-CXX:       atomic_exit25:
// CHK-CXX-NEXT:    [[TMP22:%.*]] = load i32, ptr [[ATMP16]], align 4
// CHK-CXX-NEXT:    [[TMP23:%.*]] = load i8, ptr [[ATMP18]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP22]], ptr [[V]], align 4
// CHK-CXX-NEXT:    [[TMP24:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD26:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD26]], ptr [[ATMP27]], align 4
// CHK-CXX-NEXT:    [[CMP28:%.*]] = icmp slt i32 [[ATOMIC_LOAD26]], [[TMP24]]
// CHK-CXX-NEXT:    [[FROMBOOL30:%.*]] = zext i1 [[CMP28]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL30]], ptr [[ATMP29]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP28]], label [[ATOMIC_CONT31:%.*]], label [[ATOMIC_EXIT37:%.*]]
// CHK-CXX:       atomic_cont31:
// CHK-CXX-NEXT:    [[TMP25:%.*]] = phi i32 [ [[ATOMIC_LOAD26]], [[ATOMIC_EXIT25]] ], [ [[TMP28:%.*]], [[ATOMIC_CMP34:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP24]], ptr [[ATOMIC_TEMP32]], align 4
// CHK-CXX-NEXT:    [[TMP26:%.*]] = load i32, ptr [[ATOMIC_TEMP32]], align 4
// CHK-CXX-NEXT:    [[TMP27:%.*]] = cmpxchg ptr [[X]], i32 [[TMP25]], i32 [[TMP26]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP28]] = extractvalue { i32, i1 } [[TMP27]], 0
// CHK-CXX-NEXT:    [[TMP29:%.*]] = extractvalue { i32, i1 } [[TMP27]], 1
// CHK-CXX-NEXT:    br i1 [[TMP29]], label [[ATOMIC_UPD_EXIT33:%.*]], label [[ATOMIC_CMP34]]
// CHK-CXX:       atomic_upd_exit33:
// CHK-CXX-NEXT:    store i32 [[TMP24]], ptr [[ATMP27]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT37]]
// CHK-CXX:       atomic_cmp34:
// CHK-CXX-NEXT:    store i32 [[TMP28]], ptr [[ATMP27]], align 4
// CHK-CXX-NEXT:    [[CMP35:%.*]] = icmp slt i32 [[TMP28]], [[TMP24]]
// CHK-CXX-NEXT:    [[FROMBOOL36:%.*]] = zext i1 [[CMP35]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL36]], ptr [[ATMP29]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP35]], label [[ATOMIC_CONT31]], label [[ATOMIC_EXIT37]]
// CHK-CXX:       atomic_exit37:
// CHK-CXX-NEXT:    [[TMP30:%.*]] = load i32, ptr [[ATMP27]], align 4
// CHK-CXX-NEXT:    [[TMP31:%.*]] = load i8, ptr [[ATMP29]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP30]], ptr [[V]], align 4
// CHK-CXX-NEXT:    [[TMP32:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD38:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD38]], ptr [[ATMP39]], align 4
// CHK-CXX-NEXT:    [[CMP40:%.*]] = icmp slt i32 [[ATOMIC_LOAD38]], [[TMP32]]
// CHK-CXX-NEXT:    [[FROMBOOL42:%.*]] = zext i1 [[CMP40]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL42]], ptr [[ATMP41]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP40]], label [[ATOMIC_CONT43:%.*]], label [[ATOMIC_EXIT48:%.*]]
// CHK-CXX:       atomic_cont43:
// CHK-CXX-NEXT:    [[TMP33:%.*]] = phi i32 [ [[ATOMIC_LOAD38]], [[ATOMIC_EXIT37]] ], [ [[TMP36:%.*]], [[ATOMIC_CMP45:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP32]], ptr [[ATOMIC_TEMP44]], align 4
// CHK-CXX-NEXT:    [[TMP34:%.*]] = load i32, ptr [[ATOMIC_TEMP44]], align 4
// CHK-CXX-NEXT:    [[TMP35:%.*]] = cmpxchg ptr [[X]], i32 [[TMP33]], i32 [[TMP34]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP36]] = extractvalue { i32, i1 } [[TMP35]], 0
// CHK-CXX-NEXT:    [[TMP37:%.*]] = extractvalue { i32, i1 } [[TMP35]], 1
// CHK-CXX-NEXT:    br i1 [[TMP37]], label [[ATOMIC_EXIT48]], label [[ATOMIC_CMP45]]
// CHK-CXX:       atomic_cmp45:
// CHK-CXX-NEXT:    store i32 [[TMP36]], ptr [[ATMP39]], align 4
// CHK-CXX-NEXT:    [[CMP46:%.*]] = icmp slt i32 [[TMP36]], [[TMP32]]
// CHK-CXX-NEXT:    [[FROMBOOL47:%.*]] = zext i1 [[CMP46]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL47]], ptr [[ATMP41]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP46]], label [[ATOMIC_CONT43]], label [[ATOMIC_EXIT48]]
// CHK-CXX:       atomic_exit48:
// CHK-CXX-NEXT:    [[TMP38:%.*]] = load i32, ptr [[ATMP39]], align 4
// CHK-CXX-NEXT:    [[TMP39:%.*]] = load i8, ptr [[ATMP41]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP38]], ptr [[V]], align 4
// CHK-CXX-NEXT:    [[TMP40:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD49:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD49]], ptr [[ATMP50]], align 4
// CHK-CXX-NEXT:    [[CMP51:%.*]] = icmp slt i32 [[ATOMIC_LOAD49]], [[TMP40]]
// CHK-CXX-NEXT:    [[FROMBOOL53:%.*]] = zext i1 [[CMP51]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL53]], ptr [[ATMP52]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP51]], label [[ATOMIC_CONT54:%.*]], label [[ATOMIC_EXIT60:%.*]]
// CHK-CXX:       atomic_cont54:
// CHK-CXX-NEXT:    [[TMP41:%.*]] = phi i32 [ [[ATOMIC_LOAD49]], [[ATOMIC_EXIT48]] ], [ [[TMP44:%.*]], [[ATOMIC_CMP57:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP40]], ptr [[ATOMIC_TEMP55]], align 4
// CHK-CXX-NEXT:    [[TMP42:%.*]] = load i32, ptr [[ATOMIC_TEMP55]], align 4
// CHK-CXX-NEXT:    [[TMP43:%.*]] = cmpxchg ptr [[X]], i32 [[TMP41]], i32 [[TMP42]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP44]] = extractvalue { i32, i1 } [[TMP43]], 0
// CHK-CXX-NEXT:    [[TMP45:%.*]] = extractvalue { i32, i1 } [[TMP43]], 1
// CHK-CXX-NEXT:    br i1 [[TMP45]], label [[ATOMIC_UPD_EXIT56:%.*]], label [[ATOMIC_CMP57]]
// CHK-CXX:       atomic_upd_exit56:
// CHK-CXX-NEXT:    store i32 [[TMP40]], ptr [[ATMP50]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT60]]
// CHK-CXX:       atomic_cmp57:
// CHK-CXX-NEXT:    store i32 [[TMP44]], ptr [[ATMP50]], align 4
// CHK-CXX-NEXT:    [[CMP58:%.*]] = icmp slt i32 [[TMP44]], [[TMP40]]
// CHK-CXX-NEXT:    [[FROMBOOL59:%.*]] = zext i1 [[CMP58]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL59]], ptr [[ATMP52]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP58]], label [[ATOMIC_CONT54]], label [[ATOMIC_EXIT60]]
// CHK-CXX:       atomic_exit60:
// CHK-CXX-NEXT:    [[TMP46:%.*]] = load i32, ptr [[ATMP50]], align 4
// CHK-CXX-NEXT:    [[TMP47:%.*]] = load i8, ptr [[ATMP52]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP46]], ptr [[V]], align 4
// CHK-CXX-NEXT:    [[TMP48:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD61:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD61]], ptr [[ATMP62]], align 4
// CHK-CXX-NEXT:    [[CMP63:%.*]] = icmp sgt i32 [[ATOMIC_LOAD61]], [[TMP48]]
// CHK-CXX-NEXT:    [[FROMBOOL65:%.*]] = zext i1 [[CMP63]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL65]], ptr [[ATMP64]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP63]], label [[ATOMIC_CONT66:%.*]], label [[ATOMIC_EXIT71:%.*]]
// CHK-CXX:       atomic_cont66:
// CHK-CXX-NEXT:    [[TMP49:%.*]] = phi i32 [ [[ATOMIC_LOAD61]], [[ATOMIC_EXIT60]] ], [ [[TMP52:%.*]], [[ATOMIC_CMP68:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP48]], ptr [[ATOMIC_TEMP67]], align 4
// CHK-CXX-NEXT:    [[TMP50:%.*]] = load i32, ptr [[ATOMIC_TEMP67]], align 4
// CHK-CXX-NEXT:    [[TMP51:%.*]] = cmpxchg ptr [[X]], i32 [[TMP49]], i32 [[TMP50]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP52]] = extractvalue { i32, i1 } [[TMP51]], 0
// CHK-CXX-NEXT:    [[TMP53:%.*]] = extractvalue { i32, i1 } [[TMP51]], 1
// CHK-CXX-NEXT:    br i1 [[TMP53]], label [[ATOMIC_EXIT71]], label [[ATOMIC_CMP68]]
// CHK-CXX:       atomic_cmp68:
// CHK-CXX-NEXT:    store i32 [[TMP52]], ptr [[ATMP62]], align 4
// CHK-CXX-NEXT:    [[CMP69:%.*]] = icmp sgt i32 [[TMP52]], [[TMP48]]
// CHK-CXX-NEXT:    [[FROMBOOL70:%.*]] = zext i1 [[CMP69]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL70]], ptr [[ATMP64]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP69]], label [[ATOMIC_CONT66]], label [[ATOMIC_EXIT71]]
// CHK-CXX:       atomic_exit71:
// CHK-CXX-NEXT:    [[TMP54:%.*]] = load i32, ptr [[ATMP62]], align 4
// CHK-CXX-NEXT:    [[TMP55:%.*]] = load i8, ptr [[ATMP64]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP54]], ptr [[V]], align 4
// CHK-CXX-NEXT:    [[TMP56:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD72:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD72]], ptr [[ATMP73]], align 4
// CHK-CXX-NEXT:    [[CMP74:%.*]] = icmp sgt i32 [[ATOMIC_LOAD72]], [[TMP56]]
// CHK-CXX-NEXT:    [[FROMBOOL76:%.*]] = zext i1 [[CMP74]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL76]], ptr [[ATMP75]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP74]], label [[ATOMIC_CONT77:%.*]], label [[ATOMIC_EXIT83:%.*]]
// CHK-CXX:       atomic_cont77:
// CHK-CXX-NEXT:    [[TMP57:%.*]] = phi i32 [ [[ATOMIC_LOAD72]], [[ATOMIC_EXIT71]] ], [ [[TMP60:%.*]], [[ATOMIC_CMP80:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP56]], ptr [[ATOMIC_TEMP78]], align 4
// CHK-CXX-NEXT:    [[TMP58:%.*]] = load i32, ptr [[ATOMIC_TEMP78]], align 4
// CHK-CXX-NEXT:    [[TMP59:%.*]] = cmpxchg ptr [[X]], i32 [[TMP57]], i32 [[TMP58]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP60]] = extractvalue { i32, i1 } [[TMP59]], 0
// CHK-CXX-NEXT:    [[TMP61:%.*]] = extractvalue { i32, i1 } [[TMP59]], 1
// CHK-CXX-NEXT:    br i1 [[TMP61]], label [[ATOMIC_UPD_EXIT79:%.*]], label [[ATOMIC_CMP80]]
// CHK-CXX:       atomic_upd_exit79:
// CHK-CXX-NEXT:    store i32 [[TMP56]], ptr [[ATMP73]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT83]]
// CHK-CXX:       atomic_cmp80:
// CHK-CXX-NEXT:    store i32 [[TMP60]], ptr [[ATMP73]], align 4
// CHK-CXX-NEXT:    [[CMP81:%.*]] = icmp sgt i32 [[TMP60]], [[TMP56]]
// CHK-CXX-NEXT:    [[FROMBOOL82:%.*]] = zext i1 [[CMP81]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL82]], ptr [[ATMP75]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP81]], label [[ATOMIC_CONT77]], label [[ATOMIC_EXIT83]]
// CHK-CXX:       atomic_exit83:
// CHK-CXX-NEXT:    [[TMP62:%.*]] = load i32, ptr [[ATMP73]], align 4
// CHK-CXX-NEXT:    [[TMP63:%.*]] = load i8, ptr [[ATMP75]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP62]], ptr [[V]], align 4
// CHK-CXX-NEXT:    [[TMP64:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[TMP65:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD84:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD84]], ptr [[ATMP85]], align 4
// CHK-CXX-NEXT:    [[CMP86:%.*]] = icmp eq i32 [[ATOMIC_LOAD84]], [[TMP65]]
// CHK-CXX-NEXT:    [[FROMBOOL88:%.*]] = zext i1 [[CMP86]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL88]], ptr [[ATMP87]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP86]], label [[ATOMIC_CONT89:%.*]], label [[ATOMIC_EXIT94:%.*]]
// CHK-CXX:       atomic_cont89:
// CHK-CXX-NEXT:    [[TMP66:%.*]] = phi i32 [ [[ATOMIC_LOAD84]], [[ATOMIC_EXIT83]] ], [ [[TMP69:%.*]], [[ATOMIC_CMP91:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP64]], ptr [[ATOMIC_TEMP90]], align 4
// CHK-CXX-NEXT:    [[TMP67:%.*]] = load i32, ptr [[ATOMIC_TEMP90]], align 4
// CHK-CXX-NEXT:    [[TMP68:%.*]] = cmpxchg ptr [[X]], i32 [[TMP66]], i32 [[TMP67]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP69]] = extractvalue { i32, i1 } [[TMP68]], 0
// CHK-CXX-NEXT:    [[TMP70:%.*]] = extractvalue { i32, i1 } [[TMP68]], 1
// CHK-CXX-NEXT:    br i1 [[TMP70]], label [[ATOMIC_EXIT94]], label [[ATOMIC_CMP91]]
// CHK-CXX:       atomic_cmp91:
// CHK-CXX-NEXT:    store i32 [[TMP69]], ptr [[ATMP85]], align 4
// CHK-CXX-NEXT:    [[CMP92:%.*]] = icmp eq i32 [[TMP69]], [[TMP65]]
// CHK-CXX-NEXT:    [[FROMBOOL93:%.*]] = zext i1 [[CMP92]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL93]], ptr [[ATMP87]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP92]], label [[ATOMIC_CONT89]], label [[ATOMIC_EXIT94]]
// CHK-CXX:       atomic_exit94:
// CHK-CXX-NEXT:    [[TMP71:%.*]] = load i32, ptr [[ATMP85]], align 4
// CHK-CXX-NEXT:    [[TMP72:%.*]] = load i8, ptr [[ATMP87]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP71]], ptr [[V]], align 4
// CHK-CXX-NEXT:    [[TMP73:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[TMP74:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD95:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD95]], ptr [[ATMP96]], align 4
// CHK-CXX-NEXT:    [[CMP97:%.*]] = icmp eq i32 [[ATOMIC_LOAD95]], [[TMP74]]
// CHK-CXX-NEXT:    [[FROMBOOL99:%.*]] = zext i1 [[CMP97]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL99]], ptr [[ATMP98]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP97]], label [[ATOMIC_CONT100:%.*]], label [[ATOMIC_EXIT106:%.*]]
// CHK-CXX:       atomic_cont100:
// CHK-CXX-NEXT:    [[TMP75:%.*]] = phi i32 [ [[ATOMIC_LOAD95]], [[ATOMIC_EXIT94]] ], [ [[TMP78:%.*]], [[ATOMIC_CMP103:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP73]], ptr [[ATOMIC_TEMP101]], align 4
// CHK-CXX-NEXT:    [[TMP76:%.*]] = load i32, ptr [[ATOMIC_TEMP101]], align 4
// CHK-CXX-NEXT:    [[TMP77:%.*]] = cmpxchg ptr [[X]], i32 [[TMP75]], i32 [[TMP76]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP78]] = extractvalue { i32, i1 } [[TMP77]], 0
// CHK-CXX-NEXT:    [[TMP79:%.*]] = extractvalue { i32, i1 } [[TMP77]], 1
// CHK-CXX-NEXT:    br i1 [[TMP79]], label [[ATOMIC_UPD_EXIT102:%.*]], label [[ATOMIC_CMP103]]
// CHK-CXX:       atomic_upd_exit102:
// CHK-CXX-NEXT:    store i32 [[TMP73]], ptr [[ATMP96]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT106]]
// CHK-CXX:       atomic_cmp103:
// CHK-CXX-NEXT:    store i32 [[TMP78]], ptr [[ATMP96]], align 4
// CHK-CXX-NEXT:    [[CMP104:%.*]] = icmp eq i32 [[TMP78]], [[TMP74]]
// CHK-CXX-NEXT:    [[FROMBOOL105:%.*]] = zext i1 [[CMP104]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL105]], ptr [[ATMP98]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP104]], label [[ATOMIC_CONT100]], label [[ATOMIC_EXIT106]]
// CHK-CXX:       atomic_exit106:
// CHK-CXX-NEXT:    [[TMP80:%.*]] = load i32, ptr [[ATMP96]], align 4
// CHK-CXX-NEXT:    [[TMP81:%.*]] = load i8, ptr [[ATMP98]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP80]], ptr [[V]], align 4
// CHK-CXX-NEXT:    [[TMP82:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[TMP83:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD107:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD107]], ptr [[ATMP108]], align 4
// CHK-CXX-NEXT:    [[CMP109:%.*]] = icmp eq i32 [[ATOMIC_LOAD107]], [[TMP83]]
// CHK-CXX-NEXT:    [[FROMBOOL111:%.*]] = zext i1 [[CMP109]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL111]], ptr [[ATMP110]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP109]], label [[ATOMIC_CONT112:%.*]], label [[ATOMIC_EXIT118:%.*]]
// CHK-CXX:       atomic_cont112:
// CHK-CXX-NEXT:    [[TMP84:%.*]] = phi i32 [ [[ATOMIC_LOAD107]], [[ATOMIC_EXIT106]] ], [ [[TMP87:%.*]], [[ATOMIC_CMP115:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP82]], ptr [[ATOMIC_TEMP113]], align 4
// CHK-CXX-NEXT:    [[TMP85:%.*]] = load i32, ptr [[ATOMIC_TEMP113]], align 4
// CHK-CXX-NEXT:    [[TMP86:%.*]] = cmpxchg ptr [[X]], i32 [[TMP84]], i32 [[TMP85]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP87]] = extractvalue { i32, i1 } [[TMP86]], 0
// CHK-CXX-NEXT:    [[TMP88:%.*]] = extractvalue { i32, i1 } [[TMP86]], 1
// CHK-CXX-NEXT:    br i1 [[TMP88]], label [[ATOMIC_UPD_EXIT114:%.*]], label [[ATOMIC_CMP115]]
// CHK-CXX:       atomic_upd_exit114:
// CHK-CXX-NEXT:    store i32 [[TMP82]], ptr [[ATMP108]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT118]]
// CHK-CXX:       atomic_cmp115:
// CHK-CXX-NEXT:    store i32 [[TMP87]], ptr [[ATMP108]], align 4
// CHK-CXX-NEXT:    [[CMP116:%.*]] = icmp eq i32 [[TMP87]], [[TMP83]]
// CHK-CXX-NEXT:    [[FROMBOOL117:%.*]] = zext i1 [[CMP116]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL117]], ptr [[ATMP110]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP116]], label [[ATOMIC_CONT112]], label [[ATOMIC_EXIT118]]
// CHK-CXX:       atomic_exit118:
// CHK-CXX-NEXT:    [[TMP89:%.*]] = load i32, ptr [[ATMP108]], align 4
// CHK-CXX-NEXT:    [[TMP90:%.*]] = load i8, ptr [[ATMP110]], align 1
// CHK-CXX-NEXT:    [[TMP91:%.*]] = trunc i8 [[TMP90]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP91]], label [[ATOMIC_CAPTURE_CONT:%.*]], label [[ATOMIC_CAPTURE:%.*]]
// CHK-CXX:       atomic_capture:
// CHK-CXX-NEXT:    store i32 [[TMP89]], ptr [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT]]
// CHK-CXX:       atomic_capture_cont:
// CHK-CXX-NEXT:    [[TMP92:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[TMP93:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD119:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD119]], ptr [[ATMP120]], align 4
// CHK-CXX-NEXT:    [[CMP121:%.*]] = icmp eq i32 [[ATOMIC_LOAD119]], [[TMP93]]
// CHK-CXX-NEXT:    [[FROMBOOL123:%.*]] = zext i1 [[CMP121]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL123]], ptr [[ATMP122]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP121]], label [[ATOMIC_CONT124:%.*]], label [[ATOMIC_EXIT129:%.*]]
// CHK-CXX:       atomic_cont124:
// CHK-CXX-NEXT:    [[TMP94:%.*]] = phi i32 [ [[ATOMIC_LOAD119]], [[ATOMIC_CAPTURE_CONT]] ], [ [[TMP97:%.*]], [[ATOMIC_CMP126:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP92]], ptr [[ATOMIC_TEMP125]], align 4
// CHK-CXX-NEXT:    [[TMP95:%.*]] = load i32, ptr [[ATOMIC_TEMP125]], align 4
// CHK-CXX-NEXT:    [[TMP96:%.*]] = cmpxchg ptr [[X]], i32 [[TMP94]], i32 [[TMP95]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP97]] = extractvalue { i32, i1 } [[TMP96]], 0
// CHK-CXX-NEXT:    [[TMP98:%.*]] = extractvalue { i32, i1 } [[TMP96]], 1
// CHK-CXX-NEXT:    br i1 [[TMP98]], label [[ATOMIC_EXIT129]], label [[ATOMIC_CMP126]]
// CHK-CXX:       atomic_cmp126:
// CHK-CXX-NEXT:    store i32 [[TMP97]], ptr [[ATMP120]], align 4
// CHK-CXX-NEXT:    [[CMP127:%.*]] = icmp eq i32 [[TMP97]], [[TMP93]]
// CHK-CXX-NEXT:    [[FROMBOOL128:%.*]] = zext i1 [[CMP127]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL128]], ptr [[ATMP122]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP127]], label [[ATOMIC_CONT124]], label [[ATOMIC_EXIT129]]
// CHK-CXX:       atomic_exit129:
// CHK-CXX-NEXT:    [[TMP99:%.*]] = load i32, ptr [[ATMP120]], align 4
// CHK-CXX-NEXT:    [[TMP100:%.*]] = load i8, ptr [[ATMP122]], align 1
// CHK-CXX-NEXT:    store i8 [[TMP100]], ptr [[R]], align 1
// CHK-CXX-NEXT:    [[TMP101:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[TMP102:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD130:%.*]] = load atomic i32, ptr [[X]] monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD130]], ptr [[ATMP131]], align 4
// CHK-CXX-NEXT:    [[CMP132:%.*]] = icmp eq i32 [[ATOMIC_LOAD130]], [[TMP102]]
// CHK-CXX-NEXT:    [[FROMBOOL134:%.*]] = zext i1 [[CMP132]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL134]], ptr [[ATMP133]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP132]], label [[ATOMIC_CONT135:%.*]], label [[ATOMIC_EXIT140:%.*]]
// CHK-CXX:       atomic_cont135:
// CHK-CXX-NEXT:    [[TMP103:%.*]] = phi i32 [ [[ATOMIC_LOAD130]], [[ATOMIC_EXIT129]] ], [ [[TMP106:%.*]], [[ATOMIC_CMP137:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP101]], ptr [[ATOMIC_TEMP136]], align 4
// CHK-CXX-NEXT:    [[TMP104:%.*]] = load i32, ptr [[ATOMIC_TEMP136]], align 4
// CHK-CXX-NEXT:    [[TMP105:%.*]] = cmpxchg ptr [[X]], i32 [[TMP103]], i32 [[TMP104]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP106]] = extractvalue { i32, i1 } [[TMP105]], 0
// CHK-CXX-NEXT:    [[TMP107:%.*]] = extractvalue { i32, i1 } [[TMP105]], 1
// CHK-CXX-NEXT:    br i1 [[TMP107]], label [[ATOMIC_EXIT140]], label [[ATOMIC_CMP137]]
// CHK-CXX:       atomic_cmp137:
// CHK-CXX-NEXT:    store i32 [[TMP106]], ptr [[ATMP131]], align 4
// CHK-CXX-NEXT:    [[CMP138:%.*]] = icmp eq i32 [[TMP106]], [[TMP102]]
// CHK-CXX-NEXT:    [[FROMBOOL139:%.*]] = zext i1 [[CMP138]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL139]], ptr [[ATMP133]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP138]], label [[ATOMIC_CONT135]], label [[ATOMIC_EXIT140]]
// CHK-CXX:       atomic_exit140:
// CHK-CXX-NEXT:    [[TMP108:%.*]] = load i32, ptr [[ATMP131]], align 4
// CHK-CXX-NEXT:    [[TMP109:%.*]] = load i8, ptr [[ATMP133]], align 1
// CHK-CXX-NEXT:    store i8 [[TMP109]], ptr [[R]], align 1
// CHK-CXX-NEXT:    [[TMP110:%.*]] = trunc i8 [[TMP109]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP110]], label [[ATOMIC_CAPTURE_CONT142:%.*]], label [[ATOMIC_CAPTURE141:%.*]]
// CHK-CXX:       atomic_capture141:
// CHK-CXX-NEXT:    store i32 [[TMP108]], ptr [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT142]]
// CHK-CXX:       atomic_capture_cont142:
// CHK-CXX-NEXT:    ret void
//
void test_int() {
  // One of each form with 'int'.
  int x, expr, d, e, v;
#ifdef __cplusplus
  bool r;
#else
  _Bool r;
#endif

  #pragma omp atomic compare capture
  { v = x; if (expr < x) { x = expr; } } // MIN

  #pragma omp atomic compare capture
  { if (expr < x) { x = expr; } v = x; } // MIN

  #pragma omp atomic compare capture
  { v = x; if (expr > x) { x = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (expr > x) { x = expr; } v = x; } // MAX

  #pragma omp atomic compare capture
  { v = x; if (x < expr) { x = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (x < expr) { x = expr; } v = x; } // MAX

  #pragma omp atomic compare capture
  { v = x; if (x > expr) { x = expr; } } // MIN

  #pragma omp atomic compare capture
  { if (x > expr) { x = expr; } v = x; } // MIN

  #pragma omp atomic compare capture
  { v = x; if (x == e) { x = d; } }

  #pragma omp atomic compare capture
  { if (x == e) { x = d; } v = x; }

  #pragma omp atomic compare capture
  if (x == e) { x = d; } else { v = x; }

  #pragma omp atomic compare capture
  { r = x == e; if(r) { x = d; } }

  #pragma omp atomic compare capture
  { r = x == e; if(r) { x = d; } else { v = x; } }
}

// CHK-C-LABEL: @test_unsigned_short(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[X:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[D:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[E:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[V:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[R:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[TMP:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP5:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP7:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP10:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP16:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP18:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP21:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP27:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP29:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP32:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP39:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP41:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP44:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP50:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP52:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP55:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP62:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP64:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP67:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP73:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP75:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP78:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP85:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP87:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP90:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP96:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP98:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP101:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP108:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP110:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP113:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP120:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP122:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP125:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP131:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[ATMP133:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP136:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[TMP0:%.*]] = load i16, ptr [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD]], ptr [[TMP]], align 2
// CHK-C-NEXT:    [[CMP:%.*]] = icmp ugt i16 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-C-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL]], ptr [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP1:%.*]] = phi i16 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP0]], ptr [[ATOMIC_TEMP]], align 2
// CHK-C-NEXT:    [[TMP2:%.*]] = load i16, ptr [[ATOMIC_TEMP]], align 2
// CHK-C-NEXT:    [[TMP3:%.*]] = cmpxchg ptr [[X]], i16 [[TMP1]], i16 [[TMP2]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP4]] = extractvalue { i16, i1 } [[TMP3]], 0
// CHK-C-NEXT:    [[TMP5:%.*]] = extractvalue { i16, i1 } [[TMP3]], 1
// CHK-C-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    store i16 [[TMP4]], ptr [[TMP]], align 2
// CHK-C-NEXT:    [[CMP2:%.*]] = icmp ugt i16 [[TMP4]], [[TMP0]]
// CHK-C-NEXT:    [[FROMBOOL3:%.*]] = zext i1 [[CMP2]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL3]], ptr [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP2]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP6:%.*]] = load i16, ptr [[TMP]], align 2
// CHK-C-NEXT:    [[TMP7:%.*]] = load i8, ptr [[ATMP1]], align 1
// CHK-C-NEXT:    store i16 [[TMP6]], ptr [[V]], align 2
// CHK-C-NEXT:    [[TMP8:%.*]] = load i16, ptr [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD4:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD4]], ptr [[ATMP5]], align 2
// CHK-C-NEXT:    [[CMP6:%.*]] = icmp ugt i16 [[ATOMIC_LOAD4]], [[TMP8]]
// CHK-C-NEXT:    [[FROMBOOL8:%.*]] = zext i1 [[CMP6]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL8]], ptr [[ATMP7]], align 1
// CHK-C-NEXT:    br i1 [[CMP6]], label [[ATOMIC_CONT9:%.*]], label [[ATOMIC_EXIT14:%.*]]
// CHK-C:       atomic_cont9:
// CHK-C-NEXT:    [[TMP9:%.*]] = phi i16 [ [[ATOMIC_LOAD4]], [[ATOMIC_EXIT]] ], [ [[TMP12:%.*]], [[ATOMIC_CMP11:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP8]], ptr [[ATOMIC_TEMP10]], align 2
// CHK-C-NEXT:    [[TMP10:%.*]] = load i16, ptr [[ATOMIC_TEMP10]], align 2
// CHK-C-NEXT:    [[TMP11:%.*]] = cmpxchg ptr [[X]], i16 [[TMP9]], i16 [[TMP10]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP12]] = extractvalue { i16, i1 } [[TMP11]], 0
// CHK-C-NEXT:    [[TMP13:%.*]] = extractvalue { i16, i1 } [[TMP11]], 1
// CHK-C-NEXT:    br i1 [[TMP13]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP11]]
// CHK-C:       atomic_upd_exit:
// CHK-C-NEXT:    store i16 [[TMP8]], ptr [[ATMP5]], align 2
// CHK-C-NEXT:    br label [[ATOMIC_EXIT14]]
// CHK-C:       atomic_cmp11:
// CHK-C-NEXT:    store i16 [[TMP12]], ptr [[ATMP5]], align 2
// CHK-C-NEXT:    [[CMP12:%.*]] = icmp ugt i16 [[TMP12]], [[TMP8]]
// CHK-C-NEXT:    [[FROMBOOL13:%.*]] = zext i1 [[CMP12]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL13]], ptr [[ATMP7]], align 1
// CHK-C-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT9]], label [[ATOMIC_EXIT14]]
// CHK-C:       atomic_exit14:
// CHK-C-NEXT:    [[TMP14:%.*]] = load i16, ptr [[ATMP5]], align 2
// CHK-C-NEXT:    [[TMP15:%.*]] = load i8, ptr [[ATMP7]], align 1
// CHK-C-NEXT:    store i16 [[TMP14]], ptr [[V]], align 2
// CHK-C-NEXT:    [[TMP16:%.*]] = load i16, ptr [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD15:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD15]], ptr [[ATMP16]], align 2
// CHK-C-NEXT:    [[CMP17:%.*]] = icmp ult i16 [[ATOMIC_LOAD15]], [[TMP16]]
// CHK-C-NEXT:    [[FROMBOOL19:%.*]] = zext i1 [[CMP17]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL19]], ptr [[ATMP18]], align 1
// CHK-C-NEXT:    br i1 [[CMP17]], label [[ATOMIC_CONT20:%.*]], label [[ATOMIC_EXIT25:%.*]]
// CHK-C:       atomic_cont20:
// CHK-C-NEXT:    [[TMP17:%.*]] = phi i16 [ [[ATOMIC_LOAD15]], [[ATOMIC_EXIT14]] ], [ [[TMP20:%.*]], [[ATOMIC_CMP22:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP16]], ptr [[ATOMIC_TEMP21]], align 2
// CHK-C-NEXT:    [[TMP18:%.*]] = load i16, ptr [[ATOMIC_TEMP21]], align 2
// CHK-C-NEXT:    [[TMP19:%.*]] = cmpxchg ptr [[X]], i16 [[TMP17]], i16 [[TMP18]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP20]] = extractvalue { i16, i1 } [[TMP19]], 0
// CHK-C-NEXT:    [[TMP21:%.*]] = extractvalue { i16, i1 } [[TMP19]], 1
// CHK-C-NEXT:    br i1 [[TMP21]], label [[ATOMIC_EXIT25]], label [[ATOMIC_CMP22]]
// CHK-C:       atomic_cmp22:
// CHK-C-NEXT:    store i16 [[TMP20]], ptr [[ATMP16]], align 2
// CHK-C-NEXT:    [[CMP23:%.*]] = icmp ult i16 [[TMP20]], [[TMP16]]
// CHK-C-NEXT:    [[FROMBOOL24:%.*]] = zext i1 [[CMP23]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL24]], ptr [[ATMP18]], align 1
// CHK-C-NEXT:    br i1 [[CMP23]], label [[ATOMIC_CONT20]], label [[ATOMIC_EXIT25]]
// CHK-C:       atomic_exit25:
// CHK-C-NEXT:    [[TMP22:%.*]] = load i16, ptr [[ATMP16]], align 2
// CHK-C-NEXT:    [[TMP23:%.*]] = load i8, ptr [[ATMP18]], align 1
// CHK-C-NEXT:    store i16 [[TMP22]], ptr [[V]], align 2
// CHK-C-NEXT:    [[TMP24:%.*]] = load i16, ptr [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD26:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD26]], ptr [[ATMP27]], align 2
// CHK-C-NEXT:    [[CMP28:%.*]] = icmp ult i16 [[ATOMIC_LOAD26]], [[TMP24]]
// CHK-C-NEXT:    [[FROMBOOL30:%.*]] = zext i1 [[CMP28]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL30]], ptr [[ATMP29]], align 1
// CHK-C-NEXT:    br i1 [[CMP28]], label [[ATOMIC_CONT31:%.*]], label [[ATOMIC_EXIT37:%.*]]
// CHK-C:       atomic_cont31:
// CHK-C-NEXT:    [[TMP25:%.*]] = phi i16 [ [[ATOMIC_LOAD26]], [[ATOMIC_EXIT25]] ], [ [[TMP28:%.*]], [[ATOMIC_CMP34:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP24]], ptr [[ATOMIC_TEMP32]], align 2
// CHK-C-NEXT:    [[TMP26:%.*]] = load i16, ptr [[ATOMIC_TEMP32]], align 2
// CHK-C-NEXT:    [[TMP27:%.*]] = cmpxchg ptr [[X]], i16 [[TMP25]], i16 [[TMP26]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP28]] = extractvalue { i16, i1 } [[TMP27]], 0
// CHK-C-NEXT:    [[TMP29:%.*]] = extractvalue { i16, i1 } [[TMP27]], 1
// CHK-C-NEXT:    br i1 [[TMP29]], label [[ATOMIC_UPD_EXIT33:%.*]], label [[ATOMIC_CMP34]]
// CHK-C:       atomic_upd_exit33:
// CHK-C-NEXT:    store i16 [[TMP24]], ptr [[ATMP27]], align 2
// CHK-C-NEXT:    br label [[ATOMIC_EXIT37]]
// CHK-C:       atomic_cmp34:
// CHK-C-NEXT:    store i16 [[TMP28]], ptr [[ATMP27]], align 2
// CHK-C-NEXT:    [[CMP35:%.*]] = icmp ult i16 [[TMP28]], [[TMP24]]
// CHK-C-NEXT:    [[FROMBOOL36:%.*]] = zext i1 [[CMP35]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL36]], ptr [[ATMP29]], align 1
// CHK-C-NEXT:    br i1 [[CMP35]], label [[ATOMIC_CONT31]], label [[ATOMIC_EXIT37]]
// CHK-C:       atomic_exit37:
// CHK-C-NEXT:    [[TMP30:%.*]] = load i16, ptr [[ATMP27]], align 2
// CHK-C-NEXT:    [[TMP31:%.*]] = load i8, ptr [[ATMP29]], align 1
// CHK-C-NEXT:    store i16 [[TMP30]], ptr [[V]], align 2
// CHK-C-NEXT:    [[TMP32:%.*]] = load i16, ptr [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD38:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD38]], ptr [[ATMP39]], align 2
// CHK-C-NEXT:    [[CMP40:%.*]] = icmp ult i16 [[ATOMIC_LOAD38]], [[TMP32]]
// CHK-C-NEXT:    [[FROMBOOL42:%.*]] = zext i1 [[CMP40]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL42]], ptr [[ATMP41]], align 1
// CHK-C-NEXT:    br i1 [[CMP40]], label [[ATOMIC_CONT43:%.*]], label [[ATOMIC_EXIT48:%.*]]
// CHK-C:       atomic_cont43:
// CHK-C-NEXT:    [[TMP33:%.*]] = phi i16 [ [[ATOMIC_LOAD38]], [[ATOMIC_EXIT37]] ], [ [[TMP36:%.*]], [[ATOMIC_CMP45:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP32]], ptr [[ATOMIC_TEMP44]], align 2
// CHK-C-NEXT:    [[TMP34:%.*]] = load i16, ptr [[ATOMIC_TEMP44]], align 2
// CHK-C-NEXT:    [[TMP35:%.*]] = cmpxchg ptr [[X]], i16 [[TMP33]], i16 [[TMP34]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP36]] = extractvalue { i16, i1 } [[TMP35]], 0
// CHK-C-NEXT:    [[TMP37:%.*]] = extractvalue { i16, i1 } [[TMP35]], 1
// CHK-C-NEXT:    br i1 [[TMP37]], label [[ATOMIC_EXIT48]], label [[ATOMIC_CMP45]]
// CHK-C:       atomic_cmp45:
// CHK-C-NEXT:    store i16 [[TMP36]], ptr [[ATMP39]], align 2
// CHK-C-NEXT:    [[CMP46:%.*]] = icmp ult i16 [[TMP36]], [[TMP32]]
// CHK-C-NEXT:    [[FROMBOOL47:%.*]] = zext i1 [[CMP46]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL47]], ptr [[ATMP41]], align 1
// CHK-C-NEXT:    br i1 [[CMP46]], label [[ATOMIC_CONT43]], label [[ATOMIC_EXIT48]]
// CHK-C:       atomic_exit48:
// CHK-C-NEXT:    [[TMP38:%.*]] = load i16, ptr [[ATMP39]], align 2
// CHK-C-NEXT:    [[TMP39:%.*]] = load i8, ptr [[ATMP41]], align 1
// CHK-C-NEXT:    store i16 [[TMP38]], ptr [[V]], align 2
// CHK-C-NEXT:    [[TMP40:%.*]] = load i16, ptr [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD49:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD49]], ptr [[ATMP50]], align 2
// CHK-C-NEXT:    [[CMP51:%.*]] = icmp ult i16 [[ATOMIC_LOAD49]], [[TMP40]]
// CHK-C-NEXT:    [[FROMBOOL53:%.*]] = zext i1 [[CMP51]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL53]], ptr [[ATMP52]], align 1
// CHK-C-NEXT:    br i1 [[CMP51]], label [[ATOMIC_CONT54:%.*]], label [[ATOMIC_EXIT60:%.*]]
// CHK-C:       atomic_cont54:
// CHK-C-NEXT:    [[TMP41:%.*]] = phi i16 [ [[ATOMIC_LOAD49]], [[ATOMIC_EXIT48]] ], [ [[TMP44:%.*]], [[ATOMIC_CMP57:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP40]], ptr [[ATOMIC_TEMP55]], align 2
// CHK-C-NEXT:    [[TMP42:%.*]] = load i16, ptr [[ATOMIC_TEMP55]], align 2
// CHK-C-NEXT:    [[TMP43:%.*]] = cmpxchg ptr [[X]], i16 [[TMP41]], i16 [[TMP42]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP44]] = extractvalue { i16, i1 } [[TMP43]], 0
// CHK-C-NEXT:    [[TMP45:%.*]] = extractvalue { i16, i1 } [[TMP43]], 1
// CHK-C-NEXT:    br i1 [[TMP45]], label [[ATOMIC_UPD_EXIT56:%.*]], label [[ATOMIC_CMP57]]
// CHK-C:       atomic_upd_exit56:
// CHK-C-NEXT:    store i16 [[TMP40]], ptr [[ATMP50]], align 2
// CHK-C-NEXT:    br label [[ATOMIC_EXIT60]]
// CHK-C:       atomic_cmp57:
// CHK-C-NEXT:    store i16 [[TMP44]], ptr [[ATMP50]], align 2
// CHK-C-NEXT:    [[CMP58:%.*]] = icmp ult i16 [[TMP44]], [[TMP40]]
// CHK-C-NEXT:    [[FROMBOOL59:%.*]] = zext i1 [[CMP58]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL59]], ptr [[ATMP52]], align 1
// CHK-C-NEXT:    br i1 [[CMP58]], label [[ATOMIC_CONT54]], label [[ATOMIC_EXIT60]]
// CHK-C:       atomic_exit60:
// CHK-C-NEXT:    [[TMP46:%.*]] = load i16, ptr [[ATMP50]], align 2
// CHK-C-NEXT:    [[TMP47:%.*]] = load i8, ptr [[ATMP52]], align 1
// CHK-C-NEXT:    store i16 [[TMP46]], ptr [[V]], align 2
// CHK-C-NEXT:    [[TMP48:%.*]] = load i16, ptr [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD61:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD61]], ptr [[ATMP62]], align 2
// CHK-C-NEXT:    [[CMP63:%.*]] = icmp ugt i16 [[ATOMIC_LOAD61]], [[TMP48]]
// CHK-C-NEXT:    [[FROMBOOL65:%.*]] = zext i1 [[CMP63]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL65]], ptr [[ATMP64]], align 1
// CHK-C-NEXT:    br i1 [[CMP63]], label [[ATOMIC_CONT66:%.*]], label [[ATOMIC_EXIT71:%.*]]
// CHK-C:       atomic_cont66:
// CHK-C-NEXT:    [[TMP49:%.*]] = phi i16 [ [[ATOMIC_LOAD61]], [[ATOMIC_EXIT60]] ], [ [[TMP52:%.*]], [[ATOMIC_CMP68:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP48]], ptr [[ATOMIC_TEMP67]], align 2
// CHK-C-NEXT:    [[TMP50:%.*]] = load i16, ptr [[ATOMIC_TEMP67]], align 2
// CHK-C-NEXT:    [[TMP51:%.*]] = cmpxchg ptr [[X]], i16 [[TMP49]], i16 [[TMP50]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP52]] = extractvalue { i16, i1 } [[TMP51]], 0
// CHK-C-NEXT:    [[TMP53:%.*]] = extractvalue { i16, i1 } [[TMP51]], 1
// CHK-C-NEXT:    br i1 [[TMP53]], label [[ATOMIC_EXIT71]], label [[ATOMIC_CMP68]]
// CHK-C:       atomic_cmp68:
// CHK-C-NEXT:    store i16 [[TMP52]], ptr [[ATMP62]], align 2
// CHK-C-NEXT:    [[CMP69:%.*]] = icmp ugt i16 [[TMP52]], [[TMP48]]
// CHK-C-NEXT:    [[FROMBOOL70:%.*]] = zext i1 [[CMP69]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL70]], ptr [[ATMP64]], align 1
// CHK-C-NEXT:    br i1 [[CMP69]], label [[ATOMIC_CONT66]], label [[ATOMIC_EXIT71]]
// CHK-C:       atomic_exit71:
// CHK-C-NEXT:    [[TMP54:%.*]] = load i16, ptr [[ATMP62]], align 2
// CHK-C-NEXT:    [[TMP55:%.*]] = load i8, ptr [[ATMP64]], align 1
// CHK-C-NEXT:    store i16 [[TMP54]], ptr [[V]], align 2
// CHK-C-NEXT:    [[TMP56:%.*]] = load i16, ptr [[EXPR]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD72:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD72]], ptr [[ATMP73]], align 2
// CHK-C-NEXT:    [[CMP74:%.*]] = icmp ugt i16 [[ATOMIC_LOAD72]], [[TMP56]]
// CHK-C-NEXT:    [[FROMBOOL76:%.*]] = zext i1 [[CMP74]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL76]], ptr [[ATMP75]], align 1
// CHK-C-NEXT:    br i1 [[CMP74]], label [[ATOMIC_CONT77:%.*]], label [[ATOMIC_EXIT83:%.*]]
// CHK-C:       atomic_cont77:
// CHK-C-NEXT:    [[TMP57:%.*]] = phi i16 [ [[ATOMIC_LOAD72]], [[ATOMIC_EXIT71]] ], [ [[TMP60:%.*]], [[ATOMIC_CMP80:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP56]], ptr [[ATOMIC_TEMP78]], align 2
// CHK-C-NEXT:    [[TMP58:%.*]] = load i16, ptr [[ATOMIC_TEMP78]], align 2
// CHK-C-NEXT:    [[TMP59:%.*]] = cmpxchg ptr [[X]], i16 [[TMP57]], i16 [[TMP58]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP60]] = extractvalue { i16, i1 } [[TMP59]], 0
// CHK-C-NEXT:    [[TMP61:%.*]] = extractvalue { i16, i1 } [[TMP59]], 1
// CHK-C-NEXT:    br i1 [[TMP61]], label [[ATOMIC_UPD_EXIT79:%.*]], label [[ATOMIC_CMP80]]
// CHK-C:       atomic_upd_exit79:
// CHK-C-NEXT:    store i16 [[TMP56]], ptr [[ATMP73]], align 2
// CHK-C-NEXT:    br label [[ATOMIC_EXIT83]]
// CHK-C:       atomic_cmp80:
// CHK-C-NEXT:    store i16 [[TMP60]], ptr [[ATMP73]], align 2
// CHK-C-NEXT:    [[CMP81:%.*]] = icmp ugt i16 [[TMP60]], [[TMP56]]
// CHK-C-NEXT:    [[FROMBOOL82:%.*]] = zext i1 [[CMP81]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL82]], ptr [[ATMP75]], align 1
// CHK-C-NEXT:    br i1 [[CMP81]], label [[ATOMIC_CONT77]], label [[ATOMIC_EXIT83]]
// CHK-C:       atomic_exit83:
// CHK-C-NEXT:    [[TMP62:%.*]] = load i16, ptr [[ATMP73]], align 2
// CHK-C-NEXT:    [[TMP63:%.*]] = load i8, ptr [[ATMP75]], align 1
// CHK-C-NEXT:    store i16 [[TMP62]], ptr [[V]], align 2
// CHK-C-NEXT:    [[TMP64:%.*]] = load i16, ptr [[D]], align 2
// CHK-C-NEXT:    [[TMP65:%.*]] = load i16, ptr [[E]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD84:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD84]], ptr [[ATMP85]], align 2
// CHK-C-NEXT:    [[CMP86:%.*]] = icmp eq i16 [[ATOMIC_LOAD84]], [[TMP65]]
// CHK-C-NEXT:    [[FROMBOOL88:%.*]] = zext i1 [[CMP86]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL88]], ptr [[ATMP87]], align 1
// CHK-C-NEXT:    br i1 [[CMP86]], label [[ATOMIC_CONT89:%.*]], label [[ATOMIC_EXIT94:%.*]]
// CHK-C:       atomic_cont89:
// CHK-C-NEXT:    [[TMP66:%.*]] = phi i16 [ [[ATOMIC_LOAD84]], [[ATOMIC_EXIT83]] ], [ [[TMP69:%.*]], [[ATOMIC_CMP91:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP64]], ptr [[ATOMIC_TEMP90]], align 2
// CHK-C-NEXT:    [[TMP67:%.*]] = load i16, ptr [[ATOMIC_TEMP90]], align 2
// CHK-C-NEXT:    [[TMP68:%.*]] = cmpxchg ptr [[X]], i16 [[TMP66]], i16 [[TMP67]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP69]] = extractvalue { i16, i1 } [[TMP68]], 0
// CHK-C-NEXT:    [[TMP70:%.*]] = extractvalue { i16, i1 } [[TMP68]], 1
// CHK-C-NEXT:    br i1 [[TMP70]], label [[ATOMIC_EXIT94]], label [[ATOMIC_CMP91]]
// CHK-C:       atomic_cmp91:
// CHK-C-NEXT:    store i16 [[TMP69]], ptr [[ATMP85]], align 2
// CHK-C-NEXT:    [[CMP92:%.*]] = icmp eq i16 [[TMP69]], [[TMP65]]
// CHK-C-NEXT:    [[FROMBOOL93:%.*]] = zext i1 [[CMP92]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL93]], ptr [[ATMP87]], align 1
// CHK-C-NEXT:    br i1 [[CMP92]], label [[ATOMIC_CONT89]], label [[ATOMIC_EXIT94]]
// CHK-C:       atomic_exit94:
// CHK-C-NEXT:    [[TMP71:%.*]] = load i16, ptr [[ATMP85]], align 2
// CHK-C-NEXT:    [[TMP72:%.*]] = load i8, ptr [[ATMP87]], align 1
// CHK-C-NEXT:    store i16 [[TMP71]], ptr [[V]], align 2
// CHK-C-NEXT:    [[TMP73:%.*]] = load i16, ptr [[D]], align 2
// CHK-C-NEXT:    [[TMP74:%.*]] = load i16, ptr [[E]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD95:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD95]], ptr [[ATMP96]], align 2
// CHK-C-NEXT:    [[CMP97:%.*]] = icmp eq i16 [[ATOMIC_LOAD95]], [[TMP74]]
// CHK-C-NEXT:    [[FROMBOOL99:%.*]] = zext i1 [[CMP97]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL99]], ptr [[ATMP98]], align 1
// CHK-C-NEXT:    br i1 [[CMP97]], label [[ATOMIC_CONT100:%.*]], label [[ATOMIC_EXIT106:%.*]]
// CHK-C:       atomic_cont100:
// CHK-C-NEXT:    [[TMP75:%.*]] = phi i16 [ [[ATOMIC_LOAD95]], [[ATOMIC_EXIT94]] ], [ [[TMP78:%.*]], [[ATOMIC_CMP103:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP73]], ptr [[ATOMIC_TEMP101]], align 2
// CHK-C-NEXT:    [[TMP76:%.*]] = load i16, ptr [[ATOMIC_TEMP101]], align 2
// CHK-C-NEXT:    [[TMP77:%.*]] = cmpxchg ptr [[X]], i16 [[TMP75]], i16 [[TMP76]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP78]] = extractvalue { i16, i1 } [[TMP77]], 0
// CHK-C-NEXT:    [[TMP79:%.*]] = extractvalue { i16, i1 } [[TMP77]], 1
// CHK-C-NEXT:    br i1 [[TMP79]], label [[ATOMIC_UPD_EXIT102:%.*]], label [[ATOMIC_CMP103]]
// CHK-C:       atomic_upd_exit102:
// CHK-C-NEXT:    store i16 [[TMP73]], ptr [[ATMP96]], align 2
// CHK-C-NEXT:    br label [[ATOMIC_EXIT106]]
// CHK-C:       atomic_cmp103:
// CHK-C-NEXT:    store i16 [[TMP78]], ptr [[ATMP96]], align 2
// CHK-C-NEXT:    [[CMP104:%.*]] = icmp eq i16 [[TMP78]], [[TMP74]]
// CHK-C-NEXT:    [[FROMBOOL105:%.*]] = zext i1 [[CMP104]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL105]], ptr [[ATMP98]], align 1
// CHK-C-NEXT:    br i1 [[CMP104]], label [[ATOMIC_CONT100]], label [[ATOMIC_EXIT106]]
// CHK-C:       atomic_exit106:
// CHK-C-NEXT:    [[TMP80:%.*]] = load i16, ptr [[ATMP96]], align 2
// CHK-C-NEXT:    [[TMP81:%.*]] = load i8, ptr [[ATMP98]], align 1
// CHK-C-NEXT:    store i16 [[TMP80]], ptr [[V]], align 2
// CHK-C-NEXT:    [[TMP82:%.*]] = load i16, ptr [[D]], align 2
// CHK-C-NEXT:    [[TMP83:%.*]] = load i16, ptr [[E]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD107:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD107]], ptr [[ATMP108]], align 2
// CHK-C-NEXT:    [[CMP109:%.*]] = icmp eq i16 [[ATOMIC_LOAD107]], [[TMP83]]
// CHK-C-NEXT:    [[FROMBOOL111:%.*]] = zext i1 [[CMP109]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL111]], ptr [[ATMP110]], align 1
// CHK-C-NEXT:    br i1 [[CMP109]], label [[ATOMIC_CONT112:%.*]], label [[ATOMIC_EXIT118:%.*]]
// CHK-C:       atomic_cont112:
// CHK-C-NEXT:    [[TMP84:%.*]] = phi i16 [ [[ATOMIC_LOAD107]], [[ATOMIC_EXIT106]] ], [ [[TMP87:%.*]], [[ATOMIC_CMP115:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP82]], ptr [[ATOMIC_TEMP113]], align 2
// CHK-C-NEXT:    [[TMP85:%.*]] = load i16, ptr [[ATOMIC_TEMP113]], align 2
// CHK-C-NEXT:    [[TMP86:%.*]] = cmpxchg ptr [[X]], i16 [[TMP84]], i16 [[TMP85]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP87]] = extractvalue { i16, i1 } [[TMP86]], 0
// CHK-C-NEXT:    [[TMP88:%.*]] = extractvalue { i16, i1 } [[TMP86]], 1
// CHK-C-NEXT:    br i1 [[TMP88]], label [[ATOMIC_UPD_EXIT114:%.*]], label [[ATOMIC_CMP115]]
// CHK-C:       atomic_upd_exit114:
// CHK-C-NEXT:    store i16 [[TMP82]], ptr [[ATMP108]], align 2
// CHK-C-NEXT:    br label [[ATOMIC_EXIT118]]
// CHK-C:       atomic_cmp115:
// CHK-C-NEXT:    store i16 [[TMP87]], ptr [[ATMP108]], align 2
// CHK-C-NEXT:    [[CMP116:%.*]] = icmp eq i16 [[TMP87]], [[TMP83]]
// CHK-C-NEXT:    [[FROMBOOL117:%.*]] = zext i1 [[CMP116]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL117]], ptr [[ATMP110]], align 1
// CHK-C-NEXT:    br i1 [[CMP116]], label [[ATOMIC_CONT112]], label [[ATOMIC_EXIT118]]
// CHK-C:       atomic_exit118:
// CHK-C-NEXT:    [[TMP89:%.*]] = load i16, ptr [[ATMP108]], align 2
// CHK-C-NEXT:    [[TMP90:%.*]] = load i8, ptr [[ATMP110]], align 1
// CHK-C-NEXT:    [[TMP91:%.*]] = trunc i8 [[TMP90]] to i1
// CHK-C-NEXT:    br i1 [[TMP91]], label [[ATOMIC_CAPTURE_CONT:%.*]], label [[ATOMIC_CAPTURE:%.*]]
// CHK-C:       atomic_capture:
// CHK-C-NEXT:    store i16 [[TMP89]], ptr [[V]], align 2
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT]]
// CHK-C:       atomic_capture_cont:
// CHK-C-NEXT:    [[TMP92:%.*]] = load i16, ptr [[D]], align 2
// CHK-C-NEXT:    [[TMP93:%.*]] = load i16, ptr [[E]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD119:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD119]], ptr [[ATMP120]], align 2
// CHK-C-NEXT:    [[CMP121:%.*]] = icmp eq i16 [[ATOMIC_LOAD119]], [[TMP93]]
// CHK-C-NEXT:    [[FROMBOOL123:%.*]] = zext i1 [[CMP121]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL123]], ptr [[ATMP122]], align 1
// CHK-C-NEXT:    br i1 [[CMP121]], label [[ATOMIC_CONT124:%.*]], label [[ATOMIC_EXIT129:%.*]]
// CHK-C:       atomic_cont124:
// CHK-C-NEXT:    [[TMP94:%.*]] = phi i16 [ [[ATOMIC_LOAD119]], [[ATOMIC_CAPTURE_CONT]] ], [ [[TMP97:%.*]], [[ATOMIC_CMP126:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP92]], ptr [[ATOMIC_TEMP125]], align 2
// CHK-C-NEXT:    [[TMP95:%.*]] = load i16, ptr [[ATOMIC_TEMP125]], align 2
// CHK-C-NEXT:    [[TMP96:%.*]] = cmpxchg ptr [[X]], i16 [[TMP94]], i16 [[TMP95]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP97]] = extractvalue { i16, i1 } [[TMP96]], 0
// CHK-C-NEXT:    [[TMP98:%.*]] = extractvalue { i16, i1 } [[TMP96]], 1
// CHK-C-NEXT:    br i1 [[TMP98]], label [[ATOMIC_EXIT129]], label [[ATOMIC_CMP126]]
// CHK-C:       atomic_cmp126:
// CHK-C-NEXT:    store i16 [[TMP97]], ptr [[ATMP120]], align 2
// CHK-C-NEXT:    [[CMP127:%.*]] = icmp eq i16 [[TMP97]], [[TMP93]]
// CHK-C-NEXT:    [[FROMBOOL128:%.*]] = zext i1 [[CMP127]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL128]], ptr [[ATMP122]], align 1
// CHK-C-NEXT:    br i1 [[CMP127]], label [[ATOMIC_CONT124]], label [[ATOMIC_EXIT129]]
// CHK-C:       atomic_exit129:
// CHK-C-NEXT:    [[TMP99:%.*]] = load i16, ptr [[ATMP120]], align 2
// CHK-C-NEXT:    [[TMP100:%.*]] = load i8, ptr [[ATMP122]], align 1
// CHK-C-NEXT:    [[CONV:%.*]] = zext i8 [[TMP100]] to i32
// CHK-C-NEXT:    store i32 [[CONV]], ptr [[R]], align 4
// CHK-C-NEXT:    [[TMP101:%.*]] = load i16, ptr [[D]], align 2
// CHK-C-NEXT:    [[TMP102:%.*]] = load i16, ptr [[E]], align 2
// CHK-C-NEXT:    [[ATOMIC_LOAD130:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-C-NEXT:    store i16 [[ATOMIC_LOAD130]], ptr [[ATMP131]], align 2
// CHK-C-NEXT:    [[CMP132:%.*]] = icmp eq i16 [[ATOMIC_LOAD130]], [[TMP102]]
// CHK-C-NEXT:    [[FROMBOOL134:%.*]] = zext i1 [[CMP132]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL134]], ptr [[ATMP133]], align 1
// CHK-C-NEXT:    br i1 [[CMP132]], label [[ATOMIC_CONT135:%.*]], label [[ATOMIC_EXIT140:%.*]]
// CHK-C:       atomic_cont135:
// CHK-C-NEXT:    [[TMP103:%.*]] = phi i16 [ [[ATOMIC_LOAD130]], [[ATOMIC_EXIT129]] ], [ [[TMP106:%.*]], [[ATOMIC_CMP137:%.*]] ]
// CHK-C-NEXT:    store i16 [[TMP101]], ptr [[ATOMIC_TEMP136]], align 2
// CHK-C-NEXT:    [[TMP104:%.*]] = load i16, ptr [[ATOMIC_TEMP136]], align 2
// CHK-C-NEXT:    [[TMP105:%.*]] = cmpxchg ptr [[X]], i16 [[TMP103]], i16 [[TMP104]] monotonic monotonic, align 2
// CHK-C-NEXT:    [[TMP106]] = extractvalue { i16, i1 } [[TMP105]], 0
// CHK-C-NEXT:    [[TMP107:%.*]] = extractvalue { i16, i1 } [[TMP105]], 1
// CHK-C-NEXT:    br i1 [[TMP107]], label [[ATOMIC_EXIT140]], label [[ATOMIC_CMP137]]
// CHK-C:       atomic_cmp137:
// CHK-C-NEXT:    store i16 [[TMP106]], ptr [[ATMP131]], align 2
// CHK-C-NEXT:    [[CMP138:%.*]] = icmp eq i16 [[TMP106]], [[TMP102]]
// CHK-C-NEXT:    [[FROMBOOL139:%.*]] = zext i1 [[CMP138]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL139]], ptr [[ATMP133]], align 1
// CHK-C-NEXT:    br i1 [[CMP138]], label [[ATOMIC_CONT135]], label [[ATOMIC_EXIT140]]
// CHK-C:       atomic_exit140:
// CHK-C-NEXT:    [[TMP108:%.*]] = load i16, ptr [[ATMP131]], align 2
// CHK-C-NEXT:    [[TMP109:%.*]] = load i8, ptr [[ATMP133]], align 1
// CHK-C-NEXT:    [[CONV141:%.*]] = zext i8 [[TMP109]] to i32
// CHK-C-NEXT:    store i32 [[CONV141]], ptr [[R]], align 4
// CHK-C-NEXT:    [[TMP110:%.*]] = trunc i8 [[TMP109]] to i1
// CHK-C-NEXT:    br i1 [[TMP110]], label [[ATOMIC_CAPTURE_CONT143:%.*]], label [[ATOMIC_CAPTURE142:%.*]]
// CHK-C:       atomic_capture142:
// CHK-C-NEXT:    store i16 [[TMP108]], ptr [[V]], align 2
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT143]]
// CHK-C:       atomic_capture_cont143:
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z19test_unsigned_shortv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[X:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[V:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[R:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP5:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP7:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP10:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP16:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP18:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP21:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP27:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP29:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP32:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP39:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP41:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP44:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP50:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP52:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP55:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP62:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP64:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP67:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP73:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP75:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP78:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP85:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP87:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP90:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP96:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP98:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP101:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP108:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP110:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP113:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP120:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP122:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP125:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP131:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[ATMP133:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP136:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i16, ptr [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD]], ptr [[TMP]], align 2
// CHK-CXX-NEXT:    [[CMP:%.*]] = icmp ugt i16 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-CXX-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL]], ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP1:%.*]] = phi i16 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP0]], ptr [[ATOMIC_TEMP]], align 2
// CHK-CXX-NEXT:    [[TMP2:%.*]] = load i16, ptr [[ATOMIC_TEMP]], align 2
// CHK-CXX-NEXT:    [[TMP3:%.*]] = cmpxchg ptr [[X]], i16 [[TMP1]], i16 [[TMP2]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP4]] = extractvalue { i16, i1 } [[TMP3]], 0
// CHK-CXX-NEXT:    [[TMP5:%.*]] = extractvalue { i16, i1 } [[TMP3]], 1
// CHK-CXX-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    store i16 [[TMP4]], ptr [[TMP]], align 2
// CHK-CXX-NEXT:    [[CMP2:%.*]] = icmp ugt i16 [[TMP4]], [[TMP0]]
// CHK-CXX-NEXT:    [[FROMBOOL3:%.*]] = zext i1 [[CMP2]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL3]], ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP2]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP6:%.*]] = load i16, ptr [[TMP]], align 2
// CHK-CXX-NEXT:    [[TMP7:%.*]] = load i8, ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    store i16 [[TMP6]], ptr [[V]], align 2
// CHK-CXX-NEXT:    [[TMP8:%.*]] = load i16, ptr [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD4:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD4]], ptr [[ATMP5]], align 2
// CHK-CXX-NEXT:    [[CMP6:%.*]] = icmp ugt i16 [[ATOMIC_LOAD4]], [[TMP8]]
// CHK-CXX-NEXT:    [[FROMBOOL8:%.*]] = zext i1 [[CMP6]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL8]], ptr [[ATMP7]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP6]], label [[ATOMIC_CONT9:%.*]], label [[ATOMIC_EXIT14:%.*]]
// CHK-CXX:       atomic_cont9:
// CHK-CXX-NEXT:    [[TMP9:%.*]] = phi i16 [ [[ATOMIC_LOAD4]], [[ATOMIC_EXIT]] ], [ [[TMP12:%.*]], [[ATOMIC_CMP11:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP8]], ptr [[ATOMIC_TEMP10]], align 2
// CHK-CXX-NEXT:    [[TMP10:%.*]] = load i16, ptr [[ATOMIC_TEMP10]], align 2
// CHK-CXX-NEXT:    [[TMP11:%.*]] = cmpxchg ptr [[X]], i16 [[TMP9]], i16 [[TMP10]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP12]] = extractvalue { i16, i1 } [[TMP11]], 0
// CHK-CXX-NEXT:    [[TMP13:%.*]] = extractvalue { i16, i1 } [[TMP11]], 1
// CHK-CXX-NEXT:    br i1 [[TMP13]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP11]]
// CHK-CXX:       atomic_upd_exit:
// CHK-CXX-NEXT:    store i16 [[TMP8]], ptr [[ATMP5]], align 2
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT14]]
// CHK-CXX:       atomic_cmp11:
// CHK-CXX-NEXT:    store i16 [[TMP12]], ptr [[ATMP5]], align 2
// CHK-CXX-NEXT:    [[CMP12:%.*]] = icmp ugt i16 [[TMP12]], [[TMP8]]
// CHK-CXX-NEXT:    [[FROMBOOL13:%.*]] = zext i1 [[CMP12]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL13]], ptr [[ATMP7]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT9]], label [[ATOMIC_EXIT14]]
// CHK-CXX:       atomic_exit14:
// CHK-CXX-NEXT:    [[TMP14:%.*]] = load i16, ptr [[ATMP5]], align 2
// CHK-CXX-NEXT:    [[TMP15:%.*]] = load i8, ptr [[ATMP7]], align 1
// CHK-CXX-NEXT:    store i16 [[TMP14]], ptr [[V]], align 2
// CHK-CXX-NEXT:    [[TMP16:%.*]] = load i16, ptr [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD15:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD15]], ptr [[ATMP16]], align 2
// CHK-CXX-NEXT:    [[CMP17:%.*]] = icmp ult i16 [[ATOMIC_LOAD15]], [[TMP16]]
// CHK-CXX-NEXT:    [[FROMBOOL19:%.*]] = zext i1 [[CMP17]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL19]], ptr [[ATMP18]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP17]], label [[ATOMIC_CONT20:%.*]], label [[ATOMIC_EXIT25:%.*]]
// CHK-CXX:       atomic_cont20:
// CHK-CXX-NEXT:    [[TMP17:%.*]] = phi i16 [ [[ATOMIC_LOAD15]], [[ATOMIC_EXIT14]] ], [ [[TMP20:%.*]], [[ATOMIC_CMP22:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP16]], ptr [[ATOMIC_TEMP21]], align 2
// CHK-CXX-NEXT:    [[TMP18:%.*]] = load i16, ptr [[ATOMIC_TEMP21]], align 2
// CHK-CXX-NEXT:    [[TMP19:%.*]] = cmpxchg ptr [[X]], i16 [[TMP17]], i16 [[TMP18]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP20]] = extractvalue { i16, i1 } [[TMP19]], 0
// CHK-CXX-NEXT:    [[TMP21:%.*]] = extractvalue { i16, i1 } [[TMP19]], 1
// CHK-CXX-NEXT:    br i1 [[TMP21]], label [[ATOMIC_EXIT25]], label [[ATOMIC_CMP22]]
// CHK-CXX:       atomic_cmp22:
// CHK-CXX-NEXT:    store i16 [[TMP20]], ptr [[ATMP16]], align 2
// CHK-CXX-NEXT:    [[CMP23:%.*]] = icmp ult i16 [[TMP20]], [[TMP16]]
// CHK-CXX-NEXT:    [[FROMBOOL24:%.*]] = zext i1 [[CMP23]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL24]], ptr [[ATMP18]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP23]], label [[ATOMIC_CONT20]], label [[ATOMIC_EXIT25]]
// CHK-CXX:       atomic_exit25:
// CHK-CXX-NEXT:    [[TMP22:%.*]] = load i16, ptr [[ATMP16]], align 2
// CHK-CXX-NEXT:    [[TMP23:%.*]] = load i8, ptr [[ATMP18]], align 1
// CHK-CXX-NEXT:    store i16 [[TMP22]], ptr [[V]], align 2
// CHK-CXX-NEXT:    [[TMP24:%.*]] = load i16, ptr [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD26:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD26]], ptr [[ATMP27]], align 2
// CHK-CXX-NEXT:    [[CMP28:%.*]] = icmp ult i16 [[ATOMIC_LOAD26]], [[TMP24]]
// CHK-CXX-NEXT:    [[FROMBOOL30:%.*]] = zext i1 [[CMP28]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL30]], ptr [[ATMP29]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP28]], label [[ATOMIC_CONT31:%.*]], label [[ATOMIC_EXIT37:%.*]]
// CHK-CXX:       atomic_cont31:
// CHK-CXX-NEXT:    [[TMP25:%.*]] = phi i16 [ [[ATOMIC_LOAD26]], [[ATOMIC_EXIT25]] ], [ [[TMP28:%.*]], [[ATOMIC_CMP34:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP24]], ptr [[ATOMIC_TEMP32]], align 2
// CHK-CXX-NEXT:    [[TMP26:%.*]] = load i16, ptr [[ATOMIC_TEMP32]], align 2
// CHK-CXX-NEXT:    [[TMP27:%.*]] = cmpxchg ptr [[X]], i16 [[TMP25]], i16 [[TMP26]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP28]] = extractvalue { i16, i1 } [[TMP27]], 0
// CHK-CXX-NEXT:    [[TMP29:%.*]] = extractvalue { i16, i1 } [[TMP27]], 1
// CHK-CXX-NEXT:    br i1 [[TMP29]], label [[ATOMIC_UPD_EXIT33:%.*]], label [[ATOMIC_CMP34]]
// CHK-CXX:       atomic_upd_exit33:
// CHK-CXX-NEXT:    store i16 [[TMP24]], ptr [[ATMP27]], align 2
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT37]]
// CHK-CXX:       atomic_cmp34:
// CHK-CXX-NEXT:    store i16 [[TMP28]], ptr [[ATMP27]], align 2
// CHK-CXX-NEXT:    [[CMP35:%.*]] = icmp ult i16 [[TMP28]], [[TMP24]]
// CHK-CXX-NEXT:    [[FROMBOOL36:%.*]] = zext i1 [[CMP35]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL36]], ptr [[ATMP29]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP35]], label [[ATOMIC_CONT31]], label [[ATOMIC_EXIT37]]
// CHK-CXX:       atomic_exit37:
// CHK-CXX-NEXT:    [[TMP30:%.*]] = load i16, ptr [[ATMP27]], align 2
// CHK-CXX-NEXT:    [[TMP31:%.*]] = load i8, ptr [[ATMP29]], align 1
// CHK-CXX-NEXT:    store i16 [[TMP30]], ptr [[V]], align 2
// CHK-CXX-NEXT:    [[TMP32:%.*]] = load i16, ptr [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD38:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD38]], ptr [[ATMP39]], align 2
// CHK-CXX-NEXT:    [[CMP40:%.*]] = icmp ult i16 [[ATOMIC_LOAD38]], [[TMP32]]
// CHK-CXX-NEXT:    [[FROMBOOL42:%.*]] = zext i1 [[CMP40]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL42]], ptr [[ATMP41]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP40]], label [[ATOMIC_CONT43:%.*]], label [[ATOMIC_EXIT48:%.*]]
// CHK-CXX:       atomic_cont43:
// CHK-CXX-NEXT:    [[TMP33:%.*]] = phi i16 [ [[ATOMIC_LOAD38]], [[ATOMIC_EXIT37]] ], [ [[TMP36:%.*]], [[ATOMIC_CMP45:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP32]], ptr [[ATOMIC_TEMP44]], align 2
// CHK-CXX-NEXT:    [[TMP34:%.*]] = load i16, ptr [[ATOMIC_TEMP44]], align 2
// CHK-CXX-NEXT:    [[TMP35:%.*]] = cmpxchg ptr [[X]], i16 [[TMP33]], i16 [[TMP34]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP36]] = extractvalue { i16, i1 } [[TMP35]], 0
// CHK-CXX-NEXT:    [[TMP37:%.*]] = extractvalue { i16, i1 } [[TMP35]], 1
// CHK-CXX-NEXT:    br i1 [[TMP37]], label [[ATOMIC_EXIT48]], label [[ATOMIC_CMP45]]
// CHK-CXX:       atomic_cmp45:
// CHK-CXX-NEXT:    store i16 [[TMP36]], ptr [[ATMP39]], align 2
// CHK-CXX-NEXT:    [[CMP46:%.*]] = icmp ult i16 [[TMP36]], [[TMP32]]
// CHK-CXX-NEXT:    [[FROMBOOL47:%.*]] = zext i1 [[CMP46]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL47]], ptr [[ATMP41]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP46]], label [[ATOMIC_CONT43]], label [[ATOMIC_EXIT48]]
// CHK-CXX:       atomic_exit48:
// CHK-CXX-NEXT:    [[TMP38:%.*]] = load i16, ptr [[ATMP39]], align 2
// CHK-CXX-NEXT:    [[TMP39:%.*]] = load i8, ptr [[ATMP41]], align 1
// CHK-CXX-NEXT:    store i16 [[TMP38]], ptr [[V]], align 2
// CHK-CXX-NEXT:    [[TMP40:%.*]] = load i16, ptr [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD49:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD49]], ptr [[ATMP50]], align 2
// CHK-CXX-NEXT:    [[CMP51:%.*]] = icmp ult i16 [[ATOMIC_LOAD49]], [[TMP40]]
// CHK-CXX-NEXT:    [[FROMBOOL53:%.*]] = zext i1 [[CMP51]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL53]], ptr [[ATMP52]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP51]], label [[ATOMIC_CONT54:%.*]], label [[ATOMIC_EXIT60:%.*]]
// CHK-CXX:       atomic_cont54:
// CHK-CXX-NEXT:    [[TMP41:%.*]] = phi i16 [ [[ATOMIC_LOAD49]], [[ATOMIC_EXIT48]] ], [ [[TMP44:%.*]], [[ATOMIC_CMP57:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP40]], ptr [[ATOMIC_TEMP55]], align 2
// CHK-CXX-NEXT:    [[TMP42:%.*]] = load i16, ptr [[ATOMIC_TEMP55]], align 2
// CHK-CXX-NEXT:    [[TMP43:%.*]] = cmpxchg ptr [[X]], i16 [[TMP41]], i16 [[TMP42]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP44]] = extractvalue { i16, i1 } [[TMP43]], 0
// CHK-CXX-NEXT:    [[TMP45:%.*]] = extractvalue { i16, i1 } [[TMP43]], 1
// CHK-CXX-NEXT:    br i1 [[TMP45]], label [[ATOMIC_UPD_EXIT56:%.*]], label [[ATOMIC_CMP57]]
// CHK-CXX:       atomic_upd_exit56:
// CHK-CXX-NEXT:    store i16 [[TMP40]], ptr [[ATMP50]], align 2
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT60]]
// CHK-CXX:       atomic_cmp57:
// CHK-CXX-NEXT:    store i16 [[TMP44]], ptr [[ATMP50]], align 2
// CHK-CXX-NEXT:    [[CMP58:%.*]] = icmp ult i16 [[TMP44]], [[TMP40]]
// CHK-CXX-NEXT:    [[FROMBOOL59:%.*]] = zext i1 [[CMP58]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL59]], ptr [[ATMP52]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP58]], label [[ATOMIC_CONT54]], label [[ATOMIC_EXIT60]]
// CHK-CXX:       atomic_exit60:
// CHK-CXX-NEXT:    [[TMP46:%.*]] = load i16, ptr [[ATMP50]], align 2
// CHK-CXX-NEXT:    [[TMP47:%.*]] = load i8, ptr [[ATMP52]], align 1
// CHK-CXX-NEXT:    store i16 [[TMP46]], ptr [[V]], align 2
// CHK-CXX-NEXT:    [[TMP48:%.*]] = load i16, ptr [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD61:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD61]], ptr [[ATMP62]], align 2
// CHK-CXX-NEXT:    [[CMP63:%.*]] = icmp ugt i16 [[ATOMIC_LOAD61]], [[TMP48]]
// CHK-CXX-NEXT:    [[FROMBOOL65:%.*]] = zext i1 [[CMP63]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL65]], ptr [[ATMP64]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP63]], label [[ATOMIC_CONT66:%.*]], label [[ATOMIC_EXIT71:%.*]]
// CHK-CXX:       atomic_cont66:
// CHK-CXX-NEXT:    [[TMP49:%.*]] = phi i16 [ [[ATOMIC_LOAD61]], [[ATOMIC_EXIT60]] ], [ [[TMP52:%.*]], [[ATOMIC_CMP68:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP48]], ptr [[ATOMIC_TEMP67]], align 2
// CHK-CXX-NEXT:    [[TMP50:%.*]] = load i16, ptr [[ATOMIC_TEMP67]], align 2
// CHK-CXX-NEXT:    [[TMP51:%.*]] = cmpxchg ptr [[X]], i16 [[TMP49]], i16 [[TMP50]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP52]] = extractvalue { i16, i1 } [[TMP51]], 0
// CHK-CXX-NEXT:    [[TMP53:%.*]] = extractvalue { i16, i1 } [[TMP51]], 1
// CHK-CXX-NEXT:    br i1 [[TMP53]], label [[ATOMIC_EXIT71]], label [[ATOMIC_CMP68]]
// CHK-CXX:       atomic_cmp68:
// CHK-CXX-NEXT:    store i16 [[TMP52]], ptr [[ATMP62]], align 2
// CHK-CXX-NEXT:    [[CMP69:%.*]] = icmp ugt i16 [[TMP52]], [[TMP48]]
// CHK-CXX-NEXT:    [[FROMBOOL70:%.*]] = zext i1 [[CMP69]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL70]], ptr [[ATMP64]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP69]], label [[ATOMIC_CONT66]], label [[ATOMIC_EXIT71]]
// CHK-CXX:       atomic_exit71:
// CHK-CXX-NEXT:    [[TMP54:%.*]] = load i16, ptr [[ATMP62]], align 2
// CHK-CXX-NEXT:    [[TMP55:%.*]] = load i8, ptr [[ATMP64]], align 1
// CHK-CXX-NEXT:    store i16 [[TMP54]], ptr [[V]], align 2
// CHK-CXX-NEXT:    [[TMP56:%.*]] = load i16, ptr [[EXPR]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD72:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD72]], ptr [[ATMP73]], align 2
// CHK-CXX-NEXT:    [[CMP74:%.*]] = icmp ugt i16 [[ATOMIC_LOAD72]], [[TMP56]]
// CHK-CXX-NEXT:    [[FROMBOOL76:%.*]] = zext i1 [[CMP74]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL76]], ptr [[ATMP75]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP74]], label [[ATOMIC_CONT77:%.*]], label [[ATOMIC_EXIT83:%.*]]
// CHK-CXX:       atomic_cont77:
// CHK-CXX-NEXT:    [[TMP57:%.*]] = phi i16 [ [[ATOMIC_LOAD72]], [[ATOMIC_EXIT71]] ], [ [[TMP60:%.*]], [[ATOMIC_CMP80:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP56]], ptr [[ATOMIC_TEMP78]], align 2
// CHK-CXX-NEXT:    [[TMP58:%.*]] = load i16, ptr [[ATOMIC_TEMP78]], align 2
// CHK-CXX-NEXT:    [[TMP59:%.*]] = cmpxchg ptr [[X]], i16 [[TMP57]], i16 [[TMP58]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP60]] = extractvalue { i16, i1 } [[TMP59]], 0
// CHK-CXX-NEXT:    [[TMP61:%.*]] = extractvalue { i16, i1 } [[TMP59]], 1
// CHK-CXX-NEXT:    br i1 [[TMP61]], label [[ATOMIC_UPD_EXIT79:%.*]], label [[ATOMIC_CMP80]]
// CHK-CXX:       atomic_upd_exit79:
// CHK-CXX-NEXT:    store i16 [[TMP56]], ptr [[ATMP73]], align 2
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT83]]
// CHK-CXX:       atomic_cmp80:
// CHK-CXX-NEXT:    store i16 [[TMP60]], ptr [[ATMP73]], align 2
// CHK-CXX-NEXT:    [[CMP81:%.*]] = icmp ugt i16 [[TMP60]], [[TMP56]]
// CHK-CXX-NEXT:    [[FROMBOOL82:%.*]] = zext i1 [[CMP81]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL82]], ptr [[ATMP75]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP81]], label [[ATOMIC_CONT77]], label [[ATOMIC_EXIT83]]
// CHK-CXX:       atomic_exit83:
// CHK-CXX-NEXT:    [[TMP62:%.*]] = load i16, ptr [[ATMP73]], align 2
// CHK-CXX-NEXT:    [[TMP63:%.*]] = load i8, ptr [[ATMP75]], align 1
// CHK-CXX-NEXT:    store i16 [[TMP62]], ptr [[V]], align 2
// CHK-CXX-NEXT:    [[TMP64:%.*]] = load i16, ptr [[D]], align 2
// CHK-CXX-NEXT:    [[TMP65:%.*]] = load i16, ptr [[E]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD84:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD84]], ptr [[ATMP85]], align 2
// CHK-CXX-NEXT:    [[CMP86:%.*]] = icmp eq i16 [[ATOMIC_LOAD84]], [[TMP65]]
// CHK-CXX-NEXT:    [[FROMBOOL88:%.*]] = zext i1 [[CMP86]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL88]], ptr [[ATMP87]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP86]], label [[ATOMIC_CONT89:%.*]], label [[ATOMIC_EXIT94:%.*]]
// CHK-CXX:       atomic_cont89:
// CHK-CXX-NEXT:    [[TMP66:%.*]] = phi i16 [ [[ATOMIC_LOAD84]], [[ATOMIC_EXIT83]] ], [ [[TMP69:%.*]], [[ATOMIC_CMP91:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP64]], ptr [[ATOMIC_TEMP90]], align 2
// CHK-CXX-NEXT:    [[TMP67:%.*]] = load i16, ptr [[ATOMIC_TEMP90]], align 2
// CHK-CXX-NEXT:    [[TMP68:%.*]] = cmpxchg ptr [[X]], i16 [[TMP66]], i16 [[TMP67]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP69]] = extractvalue { i16, i1 } [[TMP68]], 0
// CHK-CXX-NEXT:    [[TMP70:%.*]] = extractvalue { i16, i1 } [[TMP68]], 1
// CHK-CXX-NEXT:    br i1 [[TMP70]], label [[ATOMIC_EXIT94]], label [[ATOMIC_CMP91]]
// CHK-CXX:       atomic_cmp91:
// CHK-CXX-NEXT:    store i16 [[TMP69]], ptr [[ATMP85]], align 2
// CHK-CXX-NEXT:    [[CMP92:%.*]] = icmp eq i16 [[TMP69]], [[TMP65]]
// CHK-CXX-NEXT:    [[FROMBOOL93:%.*]] = zext i1 [[CMP92]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL93]], ptr [[ATMP87]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP92]], label [[ATOMIC_CONT89]], label [[ATOMIC_EXIT94]]
// CHK-CXX:       atomic_exit94:
// CHK-CXX-NEXT:    [[TMP71:%.*]] = load i16, ptr [[ATMP85]], align 2
// CHK-CXX-NEXT:    [[TMP72:%.*]] = load i8, ptr [[ATMP87]], align 1
// CHK-CXX-NEXT:    store i16 [[TMP71]], ptr [[V]], align 2
// CHK-CXX-NEXT:    [[TMP73:%.*]] = load i16, ptr [[D]], align 2
// CHK-CXX-NEXT:    [[TMP74:%.*]] = load i16, ptr [[E]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD95:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD95]], ptr [[ATMP96]], align 2
// CHK-CXX-NEXT:    [[CMP97:%.*]] = icmp eq i16 [[ATOMIC_LOAD95]], [[TMP74]]
// CHK-CXX-NEXT:    [[FROMBOOL99:%.*]] = zext i1 [[CMP97]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL99]], ptr [[ATMP98]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP97]], label [[ATOMIC_CONT100:%.*]], label [[ATOMIC_EXIT106:%.*]]
// CHK-CXX:       atomic_cont100:
// CHK-CXX-NEXT:    [[TMP75:%.*]] = phi i16 [ [[ATOMIC_LOAD95]], [[ATOMIC_EXIT94]] ], [ [[TMP78:%.*]], [[ATOMIC_CMP103:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP73]], ptr [[ATOMIC_TEMP101]], align 2
// CHK-CXX-NEXT:    [[TMP76:%.*]] = load i16, ptr [[ATOMIC_TEMP101]], align 2
// CHK-CXX-NEXT:    [[TMP77:%.*]] = cmpxchg ptr [[X]], i16 [[TMP75]], i16 [[TMP76]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP78]] = extractvalue { i16, i1 } [[TMP77]], 0
// CHK-CXX-NEXT:    [[TMP79:%.*]] = extractvalue { i16, i1 } [[TMP77]], 1
// CHK-CXX-NEXT:    br i1 [[TMP79]], label [[ATOMIC_UPD_EXIT102:%.*]], label [[ATOMIC_CMP103]]
// CHK-CXX:       atomic_upd_exit102:
// CHK-CXX-NEXT:    store i16 [[TMP73]], ptr [[ATMP96]], align 2
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT106]]
// CHK-CXX:       atomic_cmp103:
// CHK-CXX-NEXT:    store i16 [[TMP78]], ptr [[ATMP96]], align 2
// CHK-CXX-NEXT:    [[CMP104:%.*]] = icmp eq i16 [[TMP78]], [[TMP74]]
// CHK-CXX-NEXT:    [[FROMBOOL105:%.*]] = zext i1 [[CMP104]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL105]], ptr [[ATMP98]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP104]], label [[ATOMIC_CONT100]], label [[ATOMIC_EXIT106]]
// CHK-CXX:       atomic_exit106:
// CHK-CXX-NEXT:    [[TMP80:%.*]] = load i16, ptr [[ATMP96]], align 2
// CHK-CXX-NEXT:    [[TMP81:%.*]] = load i8, ptr [[ATMP98]], align 1
// CHK-CXX-NEXT:    store i16 [[TMP80]], ptr [[V]], align 2
// CHK-CXX-NEXT:    [[TMP82:%.*]] = load i16, ptr [[D]], align 2
// CHK-CXX-NEXT:    [[TMP83:%.*]] = load i16, ptr [[E]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD107:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD107]], ptr [[ATMP108]], align 2
// CHK-CXX-NEXT:    [[CMP109:%.*]] = icmp eq i16 [[ATOMIC_LOAD107]], [[TMP83]]
// CHK-CXX-NEXT:    [[FROMBOOL111:%.*]] = zext i1 [[CMP109]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL111]], ptr [[ATMP110]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP109]], label [[ATOMIC_CONT112:%.*]], label [[ATOMIC_EXIT118:%.*]]
// CHK-CXX:       atomic_cont112:
// CHK-CXX-NEXT:    [[TMP84:%.*]] = phi i16 [ [[ATOMIC_LOAD107]], [[ATOMIC_EXIT106]] ], [ [[TMP87:%.*]], [[ATOMIC_CMP115:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP82]], ptr [[ATOMIC_TEMP113]], align 2
// CHK-CXX-NEXT:    [[TMP85:%.*]] = load i16, ptr [[ATOMIC_TEMP113]], align 2
// CHK-CXX-NEXT:    [[TMP86:%.*]] = cmpxchg ptr [[X]], i16 [[TMP84]], i16 [[TMP85]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP87]] = extractvalue { i16, i1 } [[TMP86]], 0
// CHK-CXX-NEXT:    [[TMP88:%.*]] = extractvalue { i16, i1 } [[TMP86]], 1
// CHK-CXX-NEXT:    br i1 [[TMP88]], label [[ATOMIC_UPD_EXIT114:%.*]], label [[ATOMIC_CMP115]]
// CHK-CXX:       atomic_upd_exit114:
// CHK-CXX-NEXT:    store i16 [[TMP82]], ptr [[ATMP108]], align 2
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT118]]
// CHK-CXX:       atomic_cmp115:
// CHK-CXX-NEXT:    store i16 [[TMP87]], ptr [[ATMP108]], align 2
// CHK-CXX-NEXT:    [[CMP116:%.*]] = icmp eq i16 [[TMP87]], [[TMP83]]
// CHK-CXX-NEXT:    [[FROMBOOL117:%.*]] = zext i1 [[CMP116]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL117]], ptr [[ATMP110]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP116]], label [[ATOMIC_CONT112]], label [[ATOMIC_EXIT118]]
// CHK-CXX:       atomic_exit118:
// CHK-CXX-NEXT:    [[TMP89:%.*]] = load i16, ptr [[ATMP108]], align 2
// CHK-CXX-NEXT:    [[TMP90:%.*]] = load i8, ptr [[ATMP110]], align 1
// CHK-CXX-NEXT:    [[TMP91:%.*]] = trunc i8 [[TMP90]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP91]], label [[ATOMIC_CAPTURE_CONT:%.*]], label [[ATOMIC_CAPTURE:%.*]]
// CHK-CXX:       atomic_capture:
// CHK-CXX-NEXT:    store i16 [[TMP89]], ptr [[V]], align 2
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT]]
// CHK-CXX:       atomic_capture_cont:
// CHK-CXX-NEXT:    [[TMP92:%.*]] = load i16, ptr [[D]], align 2
// CHK-CXX-NEXT:    [[TMP93:%.*]] = load i16, ptr [[E]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD119:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD119]], ptr [[ATMP120]], align 2
// CHK-CXX-NEXT:    [[CMP121:%.*]] = icmp eq i16 [[ATOMIC_LOAD119]], [[TMP93]]
// CHK-CXX-NEXT:    [[FROMBOOL123:%.*]] = zext i1 [[CMP121]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL123]], ptr [[ATMP122]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP121]], label [[ATOMIC_CONT124:%.*]], label [[ATOMIC_EXIT129:%.*]]
// CHK-CXX:       atomic_cont124:
// CHK-CXX-NEXT:    [[TMP94:%.*]] = phi i16 [ [[ATOMIC_LOAD119]], [[ATOMIC_CAPTURE_CONT]] ], [ [[TMP97:%.*]], [[ATOMIC_CMP126:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP92]], ptr [[ATOMIC_TEMP125]], align 2
// CHK-CXX-NEXT:    [[TMP95:%.*]] = load i16, ptr [[ATOMIC_TEMP125]], align 2
// CHK-CXX-NEXT:    [[TMP96:%.*]] = cmpxchg ptr [[X]], i16 [[TMP94]], i16 [[TMP95]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP97]] = extractvalue { i16, i1 } [[TMP96]], 0
// CHK-CXX-NEXT:    [[TMP98:%.*]] = extractvalue { i16, i1 } [[TMP96]], 1
// CHK-CXX-NEXT:    br i1 [[TMP98]], label [[ATOMIC_EXIT129]], label [[ATOMIC_CMP126]]
// CHK-CXX:       atomic_cmp126:
// CHK-CXX-NEXT:    store i16 [[TMP97]], ptr [[ATMP120]], align 2
// CHK-CXX-NEXT:    [[CMP127:%.*]] = icmp eq i16 [[TMP97]], [[TMP93]]
// CHK-CXX-NEXT:    [[FROMBOOL128:%.*]] = zext i1 [[CMP127]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL128]], ptr [[ATMP122]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP127]], label [[ATOMIC_CONT124]], label [[ATOMIC_EXIT129]]
// CHK-CXX:       atomic_exit129:
// CHK-CXX-NEXT:    [[TMP99:%.*]] = load i16, ptr [[ATMP120]], align 2
// CHK-CXX-NEXT:    [[TMP100:%.*]] = load i8, ptr [[ATMP122]], align 1
// CHK-CXX-NEXT:    [[CONV:%.*]] = zext i8 [[TMP100]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV]], ptr [[R]], align 4
// CHK-CXX-NEXT:    [[TMP101:%.*]] = load i16, ptr [[D]], align 2
// CHK-CXX-NEXT:    [[TMP102:%.*]] = load i16, ptr [[E]], align 2
// CHK-CXX-NEXT:    [[ATOMIC_LOAD130:%.*]] = load atomic i16, ptr [[X]] monotonic, align 2
// CHK-CXX-NEXT:    store i16 [[ATOMIC_LOAD130]], ptr [[ATMP131]], align 2
// CHK-CXX-NEXT:    [[CMP132:%.*]] = icmp eq i16 [[ATOMIC_LOAD130]], [[TMP102]]
// CHK-CXX-NEXT:    [[FROMBOOL134:%.*]] = zext i1 [[CMP132]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL134]], ptr [[ATMP133]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP132]], label [[ATOMIC_CONT135:%.*]], label [[ATOMIC_EXIT140:%.*]]
// CHK-CXX:       atomic_cont135:
// CHK-CXX-NEXT:    [[TMP103:%.*]] = phi i16 [ [[ATOMIC_LOAD130]], [[ATOMIC_EXIT129]] ], [ [[TMP106:%.*]], [[ATOMIC_CMP137:%.*]] ]
// CHK-CXX-NEXT:    store i16 [[TMP101]], ptr [[ATOMIC_TEMP136]], align 2
// CHK-CXX-NEXT:    [[TMP104:%.*]] = load i16, ptr [[ATOMIC_TEMP136]], align 2
// CHK-CXX-NEXT:    [[TMP105:%.*]] = cmpxchg ptr [[X]], i16 [[TMP103]], i16 [[TMP104]] monotonic monotonic, align 2
// CHK-CXX-NEXT:    [[TMP106]] = extractvalue { i16, i1 } [[TMP105]], 0
// CHK-CXX-NEXT:    [[TMP107:%.*]] = extractvalue { i16, i1 } [[TMP105]], 1
// CHK-CXX-NEXT:    br i1 [[TMP107]], label [[ATOMIC_EXIT140]], label [[ATOMIC_CMP137]]
// CHK-CXX:       atomic_cmp137:
// CHK-CXX-NEXT:    store i16 [[TMP106]], ptr [[ATMP131]], align 2
// CHK-CXX-NEXT:    [[CMP138:%.*]] = icmp eq i16 [[TMP106]], [[TMP102]]
// CHK-CXX-NEXT:    [[FROMBOOL139:%.*]] = zext i1 [[CMP138]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL139]], ptr [[ATMP133]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP138]], label [[ATOMIC_CONT135]], label [[ATOMIC_EXIT140]]
// CHK-CXX:       atomic_exit140:
// CHK-CXX-NEXT:    [[TMP108:%.*]] = load i16, ptr [[ATMP131]], align 2
// CHK-CXX-NEXT:    [[TMP109:%.*]] = load i8, ptr [[ATMP133]], align 1
// CHK-CXX-NEXT:    [[CONV141:%.*]] = zext i8 [[TMP109]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV141]], ptr [[R]], align 4
// CHK-CXX-NEXT:    [[TMP110:%.*]] = trunc i8 [[TMP109]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP110]], label [[ATOMIC_CAPTURE_CONT143:%.*]], label [[ATOMIC_CAPTURE142:%.*]]
// CHK-CXX:       atomic_capture142:
// CHK-CXX-NEXT:    store i16 [[TMP108]], ptr [[V]], align 2
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT143]]
// CHK-CXX:       atomic_capture_cont143:
// CHK-CXX-NEXT:    ret void
//
void test_unsigned_short() {
    // One of each form with 'unsigned short'.
    unsigned short x, expr, d, e, v;
    int r;

    #pragma omp atomic compare capture
    { v = x; if (expr < x) { x = expr; } } // MIN

    #pragma omp atomic compare capture
    { if (expr < x) { x = expr; } v = x; } // MIN

    #pragma omp atomic compare capture
    { v = x; if (expr > x) { x = expr; } } // MAX

    #pragma omp atomic compare capture
    { if (expr > x) { x = expr; } v = x; } // MAX

    #pragma omp atomic compare capture
    { v = x; if (x < expr) { x = expr; } } // MAX

    #pragma omp atomic compare capture
    { if (x < expr) { x = expr; } v = x; } // MAX

    #pragma omp atomic compare capture
    { v = x; if (x > expr) { x = expr; } } // MIN

    #pragma omp atomic compare capture
    { if (x > expr) { x = expr; } v = x; } // MIN

    #pragma omp atomic compare capture
    { v = x; if (x == e) { x = d; } }

    #pragma omp atomic compare capture
    { if (x == e) { x = d; } v = x; }

    #pragma omp atomic compare capture
    if (x == e) { x = d; } else { v = x; }

    #pragma omp atomic compare capture
    { r = x == e; if(r) { x = d; } }

    #pragma omp atomic compare capture
    { r = x == e; if(r) { x = d; } else { v = x; } }
}

// CHK-C-LABEL: @test_double(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[X:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[D:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[E:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[V:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[R:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[TMP:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP5:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP7:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP10:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP16:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP18:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP21:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP27:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP29:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP32:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP39:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP41:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP44:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP50:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP52:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP55:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP62:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP64:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP67:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP73:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP75:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP78:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP85:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP87:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP90:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP96:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP98:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP101:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP108:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP110:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP113:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP120:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP122:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP125:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP131:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[ATMP133:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP136:%.*]] = alloca double, align 8
// CHK-C-NEXT:    [[TMP0:%.*]] = load double, ptr [[EXPR]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-C-NEXT:    [[TMP1:%.*]] = bitcast i64 [[ATOMIC_LOAD]] to double
// CHK-C-NEXT:    store double [[TMP1]], ptr [[TMP]], align 8
// CHK-C-NEXT:    [[CMP:%.*]] = fcmp ogt double [[TMP1]], [[TMP0]]
// CHK-C-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL]], ptr [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP2:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP6:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    [[TMP3:%.*]] = bitcast double [[TMP0]] to i64
// CHK-C-NEXT:    store i64 [[TMP3]], ptr [[ATOMIC_TEMP]], align 8
// CHK-C-NEXT:    [[TMP4:%.*]] = load i64, ptr [[ATOMIC_TEMP]], align 8
// CHK-C-NEXT:    [[TMP5:%.*]] = cmpxchg ptr [[X]], i64 [[TMP2]], i64 [[TMP4]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP6]] = extractvalue { i64, i1 } [[TMP5]], 0
// CHK-C-NEXT:    [[TMP7:%.*]] = extractvalue { i64, i1 } [[TMP5]], 1
// CHK-C-NEXT:    br i1 [[TMP7]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    [[TMP8:%.*]] = bitcast i64 [[TMP6]] to double
// CHK-C-NEXT:    store double [[TMP8]], ptr [[TMP]], align 8
// CHK-C-NEXT:    [[CMP2:%.*]] = fcmp ogt double [[TMP8]], [[TMP0]]
// CHK-C-NEXT:    [[FROMBOOL3:%.*]] = zext i1 [[CMP2]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL3]], ptr [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP2]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP9:%.*]] = load double, ptr [[TMP]], align 8
// CHK-C-NEXT:    [[TMP10:%.*]] = load i8, ptr [[ATMP1]], align 1
// CHK-C-NEXT:    store double [[TMP9]], ptr [[V]], align 8
// CHK-C-NEXT:    [[TMP11:%.*]] = load double, ptr [[EXPR]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD4:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-C-NEXT:    [[TMP12:%.*]] = bitcast i64 [[ATOMIC_LOAD4]] to double
// CHK-C-NEXT:    store double [[TMP12]], ptr [[ATMP5]], align 8
// CHK-C-NEXT:    [[CMP6:%.*]] = fcmp ogt double [[TMP12]], [[TMP11]]
// CHK-C-NEXT:    [[FROMBOOL8:%.*]] = zext i1 [[CMP6]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL8]], ptr [[ATMP7]], align 1
// CHK-C-NEXT:    br i1 [[CMP6]], label [[ATOMIC_CONT9:%.*]], label [[ATOMIC_EXIT14:%.*]]
// CHK-C:       atomic_cont9:
// CHK-C-NEXT:    [[TMP13:%.*]] = phi i64 [ [[ATOMIC_LOAD4]], [[ATOMIC_EXIT]] ], [ [[TMP17:%.*]], [[ATOMIC_CMP11:%.*]] ]
// CHK-C-NEXT:    [[TMP14:%.*]] = bitcast double [[TMP11]] to i64
// CHK-C-NEXT:    store i64 [[TMP14]], ptr [[ATOMIC_TEMP10]], align 8
// CHK-C-NEXT:    [[TMP15:%.*]] = load i64, ptr [[ATOMIC_TEMP10]], align 8
// CHK-C-NEXT:    [[TMP16:%.*]] = cmpxchg ptr [[X]], i64 [[TMP13]], i64 [[TMP15]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP17]] = extractvalue { i64, i1 } [[TMP16]], 0
// CHK-C-NEXT:    [[TMP18:%.*]] = extractvalue { i64, i1 } [[TMP16]], 1
// CHK-C-NEXT:    br i1 [[TMP18]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP11]]
// CHK-C:       atomic_upd_exit:
// CHK-C-NEXT:    store double [[TMP11]], ptr [[ATMP5]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_EXIT14]]
// CHK-C:       atomic_cmp11:
// CHK-C-NEXT:    [[TMP19:%.*]] = bitcast i64 [[TMP17]] to double
// CHK-C-NEXT:    store double [[TMP19]], ptr [[ATMP5]], align 8
// CHK-C-NEXT:    [[CMP12:%.*]] = fcmp ogt double [[TMP19]], [[TMP11]]
// CHK-C-NEXT:    [[FROMBOOL13:%.*]] = zext i1 [[CMP12]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL13]], ptr [[ATMP7]], align 1
// CHK-C-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT9]], label [[ATOMIC_EXIT14]]
// CHK-C:       atomic_exit14:
// CHK-C-NEXT:    [[TMP20:%.*]] = load double, ptr [[ATMP5]], align 8
// CHK-C-NEXT:    [[TMP21:%.*]] = load i8, ptr [[ATMP7]], align 1
// CHK-C-NEXT:    store double [[TMP20]], ptr [[V]], align 8
// CHK-C-NEXT:    [[TMP22:%.*]] = load double, ptr [[EXPR]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD15:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-C-NEXT:    [[TMP23:%.*]] = bitcast i64 [[ATOMIC_LOAD15]] to double
// CHK-C-NEXT:    store double [[TMP23]], ptr [[ATMP16]], align 8
// CHK-C-NEXT:    [[CMP17:%.*]] = fcmp olt double [[TMP23]], [[TMP22]]
// CHK-C-NEXT:    [[FROMBOOL19:%.*]] = zext i1 [[CMP17]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL19]], ptr [[ATMP18]], align 1
// CHK-C-NEXT:    br i1 [[CMP17]], label [[ATOMIC_CONT20:%.*]], label [[ATOMIC_EXIT25:%.*]]
// CHK-C:       atomic_cont20:
// CHK-C-NEXT:    [[TMP24:%.*]] = phi i64 [ [[ATOMIC_LOAD15]], [[ATOMIC_EXIT14]] ], [ [[TMP28:%.*]], [[ATOMIC_CMP22:%.*]] ]
// CHK-C-NEXT:    [[TMP25:%.*]] = bitcast double [[TMP22]] to i64
// CHK-C-NEXT:    store i64 [[TMP25]], ptr [[ATOMIC_TEMP21]], align 8
// CHK-C-NEXT:    [[TMP26:%.*]] = load i64, ptr [[ATOMIC_TEMP21]], align 8
// CHK-C-NEXT:    [[TMP27:%.*]] = cmpxchg ptr [[X]], i64 [[TMP24]], i64 [[TMP26]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP28]] = extractvalue { i64, i1 } [[TMP27]], 0
// CHK-C-NEXT:    [[TMP29:%.*]] = extractvalue { i64, i1 } [[TMP27]], 1
// CHK-C-NEXT:    br i1 [[TMP29]], label [[ATOMIC_EXIT25]], label [[ATOMIC_CMP22]]
// CHK-C:       atomic_cmp22:
// CHK-C-NEXT:    [[TMP30:%.*]] = bitcast i64 [[TMP28]] to double
// CHK-C-NEXT:    store double [[TMP30]], ptr [[ATMP16]], align 8
// CHK-C-NEXT:    [[CMP23:%.*]] = fcmp olt double [[TMP30]], [[TMP22]]
// CHK-C-NEXT:    [[FROMBOOL24:%.*]] = zext i1 [[CMP23]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL24]], ptr [[ATMP18]], align 1
// CHK-C-NEXT:    br i1 [[CMP23]], label [[ATOMIC_CONT20]], label [[ATOMIC_EXIT25]]
// CHK-C:       atomic_exit25:
// CHK-C-NEXT:    [[TMP31:%.*]] = load double, ptr [[ATMP16]], align 8
// CHK-C-NEXT:    [[TMP32:%.*]] = load i8, ptr [[ATMP18]], align 1
// CHK-C-NEXT:    store double [[TMP31]], ptr [[V]], align 8
// CHK-C-NEXT:    [[TMP33:%.*]] = load double, ptr [[EXPR]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD26:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-C-NEXT:    [[TMP34:%.*]] = bitcast i64 [[ATOMIC_LOAD26]] to double
// CHK-C-NEXT:    store double [[TMP34]], ptr [[ATMP27]], align 8
// CHK-C-NEXT:    [[CMP28:%.*]] = fcmp olt double [[TMP34]], [[TMP33]]
// CHK-C-NEXT:    [[FROMBOOL30:%.*]] = zext i1 [[CMP28]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL30]], ptr [[ATMP29]], align 1
// CHK-C-NEXT:    br i1 [[CMP28]], label [[ATOMIC_CONT31:%.*]], label [[ATOMIC_EXIT37:%.*]]
// CHK-C:       atomic_cont31:
// CHK-C-NEXT:    [[TMP35:%.*]] = phi i64 [ [[ATOMIC_LOAD26]], [[ATOMIC_EXIT25]] ], [ [[TMP39:%.*]], [[ATOMIC_CMP34:%.*]] ]
// CHK-C-NEXT:    [[TMP36:%.*]] = bitcast double [[TMP33]] to i64
// CHK-C-NEXT:    store i64 [[TMP36]], ptr [[ATOMIC_TEMP32]], align 8
// CHK-C-NEXT:    [[TMP37:%.*]] = load i64, ptr [[ATOMIC_TEMP32]], align 8
// CHK-C-NEXT:    [[TMP38:%.*]] = cmpxchg ptr [[X]], i64 [[TMP35]], i64 [[TMP37]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP39]] = extractvalue { i64, i1 } [[TMP38]], 0
// CHK-C-NEXT:    [[TMP40:%.*]] = extractvalue { i64, i1 } [[TMP38]], 1
// CHK-C-NEXT:    br i1 [[TMP40]], label [[ATOMIC_UPD_EXIT33:%.*]], label [[ATOMIC_CMP34]]
// CHK-C:       atomic_upd_exit33:
// CHK-C-NEXT:    store double [[TMP33]], ptr [[ATMP27]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_EXIT37]]
// CHK-C:       atomic_cmp34:
// CHK-C-NEXT:    [[TMP41:%.*]] = bitcast i64 [[TMP39]] to double
// CHK-C-NEXT:    store double [[TMP41]], ptr [[ATMP27]], align 8
// CHK-C-NEXT:    [[CMP35:%.*]] = fcmp olt double [[TMP41]], [[TMP33]]
// CHK-C-NEXT:    [[FROMBOOL36:%.*]] = zext i1 [[CMP35]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL36]], ptr [[ATMP29]], align 1
// CHK-C-NEXT:    br i1 [[CMP35]], label [[ATOMIC_CONT31]], label [[ATOMIC_EXIT37]]
// CHK-C:       atomic_exit37:
// CHK-C-NEXT:    [[TMP42:%.*]] = load double, ptr [[ATMP27]], align 8
// CHK-C-NEXT:    [[TMP43:%.*]] = load i8, ptr [[ATMP29]], align 1
// CHK-C-NEXT:    store double [[TMP42]], ptr [[V]], align 8
// CHK-C-NEXT:    [[TMP44:%.*]] = load double, ptr [[EXPR]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD38:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-C-NEXT:    [[TMP45:%.*]] = bitcast i64 [[ATOMIC_LOAD38]] to double
// CHK-C-NEXT:    store double [[TMP45]], ptr [[ATMP39]], align 8
// CHK-C-NEXT:    [[CMP40:%.*]] = fcmp olt double [[TMP45]], [[TMP44]]
// CHK-C-NEXT:    [[FROMBOOL42:%.*]] = zext i1 [[CMP40]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL42]], ptr [[ATMP41]], align 1
// CHK-C-NEXT:    br i1 [[CMP40]], label [[ATOMIC_CONT43:%.*]], label [[ATOMIC_EXIT48:%.*]]
// CHK-C:       atomic_cont43:
// CHK-C-NEXT:    [[TMP46:%.*]] = phi i64 [ [[ATOMIC_LOAD38]], [[ATOMIC_EXIT37]] ], [ [[TMP50:%.*]], [[ATOMIC_CMP45:%.*]] ]
// CHK-C-NEXT:    [[TMP47:%.*]] = bitcast double [[TMP44]] to i64
// CHK-C-NEXT:    store i64 [[TMP47]], ptr [[ATOMIC_TEMP44]], align 8
// CHK-C-NEXT:    [[TMP48:%.*]] = load i64, ptr [[ATOMIC_TEMP44]], align 8
// CHK-C-NEXT:    [[TMP49:%.*]] = cmpxchg ptr [[X]], i64 [[TMP46]], i64 [[TMP48]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP50]] = extractvalue { i64, i1 } [[TMP49]], 0
// CHK-C-NEXT:    [[TMP51:%.*]] = extractvalue { i64, i1 } [[TMP49]], 1
// CHK-C-NEXT:    br i1 [[TMP51]], label [[ATOMIC_EXIT48]], label [[ATOMIC_CMP45]]
// CHK-C:       atomic_cmp45:
// CHK-C-NEXT:    [[TMP52:%.*]] = bitcast i64 [[TMP50]] to double
// CHK-C-NEXT:    store double [[TMP52]], ptr [[ATMP39]], align 8
// CHK-C-NEXT:    [[CMP46:%.*]] = fcmp olt double [[TMP52]], [[TMP44]]
// CHK-C-NEXT:    [[FROMBOOL47:%.*]] = zext i1 [[CMP46]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL47]], ptr [[ATMP41]], align 1
// CHK-C-NEXT:    br i1 [[CMP46]], label [[ATOMIC_CONT43]], label [[ATOMIC_EXIT48]]
// CHK-C:       atomic_exit48:
// CHK-C-NEXT:    [[TMP53:%.*]] = load double, ptr [[ATMP39]], align 8
// CHK-C-NEXT:    [[TMP54:%.*]] = load i8, ptr [[ATMP41]], align 1
// CHK-C-NEXT:    store double [[TMP53]], ptr [[V]], align 8
// CHK-C-NEXT:    [[TMP55:%.*]] = load double, ptr [[EXPR]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD49:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-C-NEXT:    [[TMP56:%.*]] = bitcast i64 [[ATOMIC_LOAD49]] to double
// CHK-C-NEXT:    store double [[TMP56]], ptr [[ATMP50]], align 8
// CHK-C-NEXT:    [[CMP51:%.*]] = fcmp olt double [[TMP56]], [[TMP55]]
// CHK-C-NEXT:    [[FROMBOOL53:%.*]] = zext i1 [[CMP51]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL53]], ptr [[ATMP52]], align 1
// CHK-C-NEXT:    br i1 [[CMP51]], label [[ATOMIC_CONT54:%.*]], label [[ATOMIC_EXIT60:%.*]]
// CHK-C:       atomic_cont54:
// CHK-C-NEXT:    [[TMP57:%.*]] = phi i64 [ [[ATOMIC_LOAD49]], [[ATOMIC_EXIT48]] ], [ [[TMP61:%.*]], [[ATOMIC_CMP57:%.*]] ]
// CHK-C-NEXT:    [[TMP58:%.*]] = bitcast double [[TMP55]] to i64
// CHK-C-NEXT:    store i64 [[TMP58]], ptr [[ATOMIC_TEMP55]], align 8
// CHK-C-NEXT:    [[TMP59:%.*]] = load i64, ptr [[ATOMIC_TEMP55]], align 8
// CHK-C-NEXT:    [[TMP60:%.*]] = cmpxchg ptr [[X]], i64 [[TMP57]], i64 [[TMP59]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP61]] = extractvalue { i64, i1 } [[TMP60]], 0
// CHK-C-NEXT:    [[TMP62:%.*]] = extractvalue { i64, i1 } [[TMP60]], 1
// CHK-C-NEXT:    br i1 [[TMP62]], label [[ATOMIC_UPD_EXIT56:%.*]], label [[ATOMIC_CMP57]]
// CHK-C:       atomic_upd_exit56:
// CHK-C-NEXT:    store double [[TMP55]], ptr [[ATMP50]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_EXIT60]]
// CHK-C:       atomic_cmp57:
// CHK-C-NEXT:    [[TMP63:%.*]] = bitcast i64 [[TMP61]] to double
// CHK-C-NEXT:    store double [[TMP63]], ptr [[ATMP50]], align 8
// CHK-C-NEXT:    [[CMP58:%.*]] = fcmp olt double [[TMP63]], [[TMP55]]
// CHK-C-NEXT:    [[FROMBOOL59:%.*]] = zext i1 [[CMP58]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL59]], ptr [[ATMP52]], align 1
// CHK-C-NEXT:    br i1 [[CMP58]], label [[ATOMIC_CONT54]], label [[ATOMIC_EXIT60]]
// CHK-C:       atomic_exit60:
// CHK-C-NEXT:    [[TMP64:%.*]] = load double, ptr [[ATMP50]], align 8
// CHK-C-NEXT:    [[TMP65:%.*]] = load i8, ptr [[ATMP52]], align 1
// CHK-C-NEXT:    store double [[TMP64]], ptr [[V]], align 8
// CHK-C-NEXT:    [[TMP66:%.*]] = load double, ptr [[EXPR]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD61:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-C-NEXT:    [[TMP67:%.*]] = bitcast i64 [[ATOMIC_LOAD61]] to double
// CHK-C-NEXT:    store double [[TMP67]], ptr [[ATMP62]], align 8
// CHK-C-NEXT:    [[CMP63:%.*]] = fcmp ogt double [[TMP67]], [[TMP66]]
// CHK-C-NEXT:    [[FROMBOOL65:%.*]] = zext i1 [[CMP63]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL65]], ptr [[ATMP64]], align 1
// CHK-C-NEXT:    br i1 [[CMP63]], label [[ATOMIC_CONT66:%.*]], label [[ATOMIC_EXIT71:%.*]]
// CHK-C:       atomic_cont66:
// CHK-C-NEXT:    [[TMP68:%.*]] = phi i64 [ [[ATOMIC_LOAD61]], [[ATOMIC_EXIT60]] ], [ [[TMP72:%.*]], [[ATOMIC_CMP68:%.*]] ]
// CHK-C-NEXT:    [[TMP69:%.*]] = bitcast double [[TMP66]] to i64
// CHK-C-NEXT:    store i64 [[TMP69]], ptr [[ATOMIC_TEMP67]], align 8
// CHK-C-NEXT:    [[TMP70:%.*]] = load i64, ptr [[ATOMIC_TEMP67]], align 8
// CHK-C-NEXT:    [[TMP71:%.*]] = cmpxchg ptr [[X]], i64 [[TMP68]], i64 [[TMP70]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP72]] = extractvalue { i64, i1 } [[TMP71]], 0
// CHK-C-NEXT:    [[TMP73:%.*]] = extractvalue { i64, i1 } [[TMP71]], 1
// CHK-C-NEXT:    br i1 [[TMP73]], label [[ATOMIC_EXIT71]], label [[ATOMIC_CMP68]]
// CHK-C:       atomic_cmp68:
// CHK-C-NEXT:    [[TMP74:%.*]] = bitcast i64 [[TMP72]] to double
// CHK-C-NEXT:    store double [[TMP74]], ptr [[ATMP62]], align 8
// CHK-C-NEXT:    [[CMP69:%.*]] = fcmp ogt double [[TMP74]], [[TMP66]]
// CHK-C-NEXT:    [[FROMBOOL70:%.*]] = zext i1 [[CMP69]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL70]], ptr [[ATMP64]], align 1
// CHK-C-NEXT:    br i1 [[CMP69]], label [[ATOMIC_CONT66]], label [[ATOMIC_EXIT71]]
// CHK-C:       atomic_exit71:
// CHK-C-NEXT:    [[TMP75:%.*]] = load double, ptr [[ATMP62]], align 8
// CHK-C-NEXT:    [[TMP76:%.*]] = load i8, ptr [[ATMP64]], align 1
// CHK-C-NEXT:    store double [[TMP75]], ptr [[V]], align 8
// CHK-C-NEXT:    [[TMP77:%.*]] = load double, ptr [[EXPR]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD72:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-C-NEXT:    [[TMP78:%.*]] = bitcast i64 [[ATOMIC_LOAD72]] to double
// CHK-C-NEXT:    store double [[TMP78]], ptr [[ATMP73]], align 8
// CHK-C-NEXT:    [[CMP74:%.*]] = fcmp ogt double [[TMP78]], [[TMP77]]
// CHK-C-NEXT:    [[FROMBOOL76:%.*]] = zext i1 [[CMP74]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL76]], ptr [[ATMP75]], align 1
// CHK-C-NEXT:    br i1 [[CMP74]], label [[ATOMIC_CONT77:%.*]], label [[ATOMIC_EXIT83:%.*]]
// CHK-C:       atomic_cont77:
// CHK-C-NEXT:    [[TMP79:%.*]] = phi i64 [ [[ATOMIC_LOAD72]], [[ATOMIC_EXIT71]] ], [ [[TMP83:%.*]], [[ATOMIC_CMP80:%.*]] ]
// CHK-C-NEXT:    [[TMP80:%.*]] = bitcast double [[TMP77]] to i64
// CHK-C-NEXT:    store i64 [[TMP80]], ptr [[ATOMIC_TEMP78]], align 8
// CHK-C-NEXT:    [[TMP81:%.*]] = load i64, ptr [[ATOMIC_TEMP78]], align 8
// CHK-C-NEXT:    [[TMP82:%.*]] = cmpxchg ptr [[X]], i64 [[TMP79]], i64 [[TMP81]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP83]] = extractvalue { i64, i1 } [[TMP82]], 0
// CHK-C-NEXT:    [[TMP84:%.*]] = extractvalue { i64, i1 } [[TMP82]], 1
// CHK-C-NEXT:    br i1 [[TMP84]], label [[ATOMIC_UPD_EXIT79:%.*]], label [[ATOMIC_CMP80]]
// CHK-C:       atomic_upd_exit79:
// CHK-C-NEXT:    store double [[TMP77]], ptr [[ATMP73]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_EXIT83]]
// CHK-C:       atomic_cmp80:
// CHK-C-NEXT:    [[TMP85:%.*]] = bitcast i64 [[TMP83]] to double
// CHK-C-NEXT:    store double [[TMP85]], ptr [[ATMP73]], align 8
// CHK-C-NEXT:    [[CMP81:%.*]] = fcmp ogt double [[TMP85]], [[TMP77]]
// CHK-C-NEXT:    [[FROMBOOL82:%.*]] = zext i1 [[CMP81]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL82]], ptr [[ATMP75]], align 1
// CHK-C-NEXT:    br i1 [[CMP81]], label [[ATOMIC_CONT77]], label [[ATOMIC_EXIT83]]
// CHK-C:       atomic_exit83:
// CHK-C-NEXT:    [[TMP86:%.*]] = load double, ptr [[ATMP73]], align 8
// CHK-C-NEXT:    [[TMP87:%.*]] = load i8, ptr [[ATMP75]], align 1
// CHK-C-NEXT:    store double [[TMP86]], ptr [[V]], align 8
// CHK-C-NEXT:    [[TMP88:%.*]] = load double, ptr [[D]], align 8
// CHK-C-NEXT:    [[TMP89:%.*]] = load double, ptr [[E]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD84:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-C-NEXT:    [[TMP90:%.*]] = bitcast i64 [[ATOMIC_LOAD84]] to double
// CHK-C-NEXT:    store double [[TMP90]], ptr [[ATMP85]], align 8
// CHK-C-NEXT:    [[TMP91:%.*]] = bitcast double [[TMP90]] to i64
// CHK-C-NEXT:    [[TMP92:%.*]] = bitcast double [[TMP89]] to i64
// CHK-C-NEXT:    [[CMP86:%.*]] = icmp eq i64 [[TMP91]], [[TMP92]]
// CHK-C-NEXT:    [[FROMBOOL88:%.*]] = zext i1 [[CMP86]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL88]], ptr [[ATMP87]], align 1
// CHK-C-NEXT:    br i1 [[CMP86]], label [[ATOMIC_CONT89:%.*]], label [[ATOMIC_EXIT94:%.*]]
// CHK-C:       atomic_cont89:
// CHK-C-NEXT:    [[TMP93:%.*]] = phi i64 [ [[ATOMIC_LOAD84]], [[ATOMIC_EXIT83]] ], [ [[TMP97:%.*]], [[ATOMIC_CMP91:%.*]] ]
// CHK-C-NEXT:    [[TMP94:%.*]] = bitcast double [[TMP88]] to i64
// CHK-C-NEXT:    store i64 [[TMP94]], ptr [[ATOMIC_TEMP90]], align 8
// CHK-C-NEXT:    [[TMP95:%.*]] = load i64, ptr [[ATOMIC_TEMP90]], align 8
// CHK-C-NEXT:    [[TMP96:%.*]] = cmpxchg ptr [[X]], i64 [[TMP93]], i64 [[TMP95]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP97]] = extractvalue { i64, i1 } [[TMP96]], 0
// CHK-C-NEXT:    [[TMP98:%.*]] = extractvalue { i64, i1 } [[TMP96]], 1
// CHK-C-NEXT:    br i1 [[TMP98]], label [[ATOMIC_EXIT94]], label [[ATOMIC_CMP91]]
// CHK-C:       atomic_cmp91:
// CHK-C-NEXT:    [[TMP99:%.*]] = bitcast i64 [[TMP97]] to double
// CHK-C-NEXT:    store double [[TMP99]], ptr [[ATMP85]], align 8
// CHK-C-NEXT:    [[TMP100:%.*]] = bitcast double [[TMP99]] to i64
// CHK-C-NEXT:    [[TMP101:%.*]] = bitcast double [[TMP89]] to i64
// CHK-C-NEXT:    [[CMP92:%.*]] = icmp eq i64 [[TMP100]], [[TMP101]]
// CHK-C-NEXT:    [[FROMBOOL93:%.*]] = zext i1 [[CMP92]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL93]], ptr [[ATMP87]], align 1
// CHK-C-NEXT:    br i1 [[CMP92]], label [[ATOMIC_CONT89]], label [[ATOMIC_EXIT94]]
// CHK-C:       atomic_exit94:
// CHK-C-NEXT:    [[TMP102:%.*]] = load double, ptr [[ATMP85]], align 8
// CHK-C-NEXT:    [[TMP103:%.*]] = load i8, ptr [[ATMP87]], align 1
// CHK-C-NEXT:    store double [[TMP102]], ptr [[V]], align 8
// CHK-C-NEXT:    [[TMP104:%.*]] = load double, ptr [[D]], align 8
// CHK-C-NEXT:    [[TMP105:%.*]] = load double, ptr [[E]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD95:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-C-NEXT:    [[TMP106:%.*]] = bitcast i64 [[ATOMIC_LOAD95]] to double
// CHK-C-NEXT:    store double [[TMP106]], ptr [[ATMP96]], align 8
// CHK-C-NEXT:    [[TMP107:%.*]] = bitcast double [[TMP106]] to i64
// CHK-C-NEXT:    [[TMP108:%.*]] = bitcast double [[TMP105]] to i64
// CHK-C-NEXT:    [[CMP97:%.*]] = icmp eq i64 [[TMP107]], [[TMP108]]
// CHK-C-NEXT:    [[FROMBOOL99:%.*]] = zext i1 [[CMP97]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL99]], ptr [[ATMP98]], align 1
// CHK-C-NEXT:    br i1 [[CMP97]], label [[ATOMIC_CONT100:%.*]], label [[ATOMIC_EXIT106:%.*]]
// CHK-C:       atomic_cont100:
// CHK-C-NEXT:    [[TMP109:%.*]] = phi i64 [ [[ATOMIC_LOAD95]], [[ATOMIC_EXIT94]] ], [ [[TMP113:%.*]], [[ATOMIC_CMP103:%.*]] ]
// CHK-C-NEXT:    [[TMP110:%.*]] = bitcast double [[TMP104]] to i64
// CHK-C-NEXT:    store i64 [[TMP110]], ptr [[ATOMIC_TEMP101]], align 8
// CHK-C-NEXT:    [[TMP111:%.*]] = load i64, ptr [[ATOMIC_TEMP101]], align 8
// CHK-C-NEXT:    [[TMP112:%.*]] = cmpxchg ptr [[X]], i64 [[TMP109]], i64 [[TMP111]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP113]] = extractvalue { i64, i1 } [[TMP112]], 0
// CHK-C-NEXT:    [[TMP114:%.*]] = extractvalue { i64, i1 } [[TMP112]], 1
// CHK-C-NEXT:    br i1 [[TMP114]], label [[ATOMIC_UPD_EXIT102:%.*]], label [[ATOMIC_CMP103]]
// CHK-C:       atomic_upd_exit102:
// CHK-C-NEXT:    store double [[TMP104]], ptr [[ATMP96]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_EXIT106]]
// CHK-C:       atomic_cmp103:
// CHK-C-NEXT:    [[TMP115:%.*]] = bitcast i64 [[TMP113]] to double
// CHK-C-NEXT:    store double [[TMP115]], ptr [[ATMP96]], align 8
// CHK-C-NEXT:    [[TMP116:%.*]] = bitcast double [[TMP115]] to i64
// CHK-C-NEXT:    [[TMP117:%.*]] = bitcast double [[TMP105]] to i64
// CHK-C-NEXT:    [[CMP104:%.*]] = icmp eq i64 [[TMP116]], [[TMP117]]
// CHK-C-NEXT:    [[FROMBOOL105:%.*]] = zext i1 [[CMP104]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL105]], ptr [[ATMP98]], align 1
// CHK-C-NEXT:    br i1 [[CMP104]], label [[ATOMIC_CONT100]], label [[ATOMIC_EXIT106]]
// CHK-C:       atomic_exit106:
// CHK-C-NEXT:    [[TMP118:%.*]] = load double, ptr [[ATMP96]], align 8
// CHK-C-NEXT:    [[TMP119:%.*]] = load i8, ptr [[ATMP98]], align 1
// CHK-C-NEXT:    store double [[TMP118]], ptr [[V]], align 8
// CHK-C-NEXT:    [[TMP120:%.*]] = load double, ptr [[D]], align 8
// CHK-C-NEXT:    [[TMP121:%.*]] = load double, ptr [[E]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD107:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-C-NEXT:    [[TMP122:%.*]] = bitcast i64 [[ATOMIC_LOAD107]] to double
// CHK-C-NEXT:    store double [[TMP122]], ptr [[ATMP108]], align 8
// CHK-C-NEXT:    [[TMP123:%.*]] = bitcast double [[TMP122]] to i64
// CHK-C-NEXT:    [[TMP124:%.*]] = bitcast double [[TMP121]] to i64
// CHK-C-NEXT:    [[CMP109:%.*]] = icmp eq i64 [[TMP123]], [[TMP124]]
// CHK-C-NEXT:    [[FROMBOOL111:%.*]] = zext i1 [[CMP109]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL111]], ptr [[ATMP110]], align 1
// CHK-C-NEXT:    br i1 [[CMP109]], label [[ATOMIC_CONT112:%.*]], label [[ATOMIC_EXIT118:%.*]]
// CHK-C:       atomic_cont112:
// CHK-C-NEXT:    [[TMP125:%.*]] = phi i64 [ [[ATOMIC_LOAD107]], [[ATOMIC_EXIT106]] ], [ [[TMP129:%.*]], [[ATOMIC_CMP115:%.*]] ]
// CHK-C-NEXT:    [[TMP126:%.*]] = bitcast double [[TMP120]] to i64
// CHK-C-NEXT:    store i64 [[TMP126]], ptr [[ATOMIC_TEMP113]], align 8
// CHK-C-NEXT:    [[TMP127:%.*]] = load i64, ptr [[ATOMIC_TEMP113]], align 8
// CHK-C-NEXT:    [[TMP128:%.*]] = cmpxchg ptr [[X]], i64 [[TMP125]], i64 [[TMP127]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP129]] = extractvalue { i64, i1 } [[TMP128]], 0
// CHK-C-NEXT:    [[TMP130:%.*]] = extractvalue { i64, i1 } [[TMP128]], 1
// CHK-C-NEXT:    br i1 [[TMP130]], label [[ATOMIC_UPD_EXIT114:%.*]], label [[ATOMIC_CMP115]]
// CHK-C:       atomic_upd_exit114:
// CHK-C-NEXT:    store double [[TMP120]], ptr [[ATMP108]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_EXIT118]]
// CHK-C:       atomic_cmp115:
// CHK-C-NEXT:    [[TMP131:%.*]] = bitcast i64 [[TMP129]] to double
// CHK-C-NEXT:    store double [[TMP131]], ptr [[ATMP108]], align 8
// CHK-C-NEXT:    [[TMP132:%.*]] = bitcast double [[TMP131]] to i64
// CHK-C-NEXT:    [[TMP133:%.*]] = bitcast double [[TMP121]] to i64
// CHK-C-NEXT:    [[CMP116:%.*]] = icmp eq i64 [[TMP132]], [[TMP133]]
// CHK-C-NEXT:    [[FROMBOOL117:%.*]] = zext i1 [[CMP116]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL117]], ptr [[ATMP110]], align 1
// CHK-C-NEXT:    br i1 [[CMP116]], label [[ATOMIC_CONT112]], label [[ATOMIC_EXIT118]]
// CHK-C:       atomic_exit118:
// CHK-C-NEXT:    [[TMP134:%.*]] = load double, ptr [[ATMP108]], align 8
// CHK-C-NEXT:    [[TMP135:%.*]] = load i8, ptr [[ATMP110]], align 1
// CHK-C-NEXT:    [[TMP136:%.*]] = trunc i8 [[TMP135]] to i1
// CHK-C-NEXT:    br i1 [[TMP136]], label [[ATOMIC_CAPTURE_CONT:%.*]], label [[ATOMIC_CAPTURE:%.*]]
// CHK-C:       atomic_capture:
// CHK-C-NEXT:    store double [[TMP134]], ptr [[V]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT]]
// CHK-C:       atomic_capture_cont:
// CHK-C-NEXT:    [[TMP137:%.*]] = load double, ptr [[D]], align 8
// CHK-C-NEXT:    [[TMP138:%.*]] = load double, ptr [[E]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD119:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-C-NEXT:    [[TMP139:%.*]] = bitcast i64 [[ATOMIC_LOAD119]] to double
// CHK-C-NEXT:    store double [[TMP139]], ptr [[ATMP120]], align 8
// CHK-C-NEXT:    [[TMP140:%.*]] = bitcast double [[TMP139]] to i64
// CHK-C-NEXT:    [[TMP141:%.*]] = bitcast double [[TMP138]] to i64
// CHK-C-NEXT:    [[CMP121:%.*]] = icmp eq i64 [[TMP140]], [[TMP141]]
// CHK-C-NEXT:    [[FROMBOOL123:%.*]] = zext i1 [[CMP121]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL123]], ptr [[ATMP122]], align 1
// CHK-C-NEXT:    br i1 [[CMP121]], label [[ATOMIC_CONT124:%.*]], label [[ATOMIC_EXIT129:%.*]]
// CHK-C:       atomic_cont124:
// CHK-C-NEXT:    [[TMP142:%.*]] = phi i64 [ [[ATOMIC_LOAD119]], [[ATOMIC_CAPTURE_CONT]] ], [ [[TMP146:%.*]], [[ATOMIC_CMP126:%.*]] ]
// CHK-C-NEXT:    [[TMP143:%.*]] = bitcast double [[TMP137]] to i64
// CHK-C-NEXT:    store i64 [[TMP143]], ptr [[ATOMIC_TEMP125]], align 8
// CHK-C-NEXT:    [[TMP144:%.*]] = load i64, ptr [[ATOMIC_TEMP125]], align 8
// CHK-C-NEXT:    [[TMP145:%.*]] = cmpxchg ptr [[X]], i64 [[TMP142]], i64 [[TMP144]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP146]] = extractvalue { i64, i1 } [[TMP145]], 0
// CHK-C-NEXT:    [[TMP147:%.*]] = extractvalue { i64, i1 } [[TMP145]], 1
// CHK-C-NEXT:    br i1 [[TMP147]], label [[ATOMIC_EXIT129]], label [[ATOMIC_CMP126]]
// CHK-C:       atomic_cmp126:
// CHK-C-NEXT:    [[TMP148:%.*]] = bitcast i64 [[TMP146]] to double
// CHK-C-NEXT:    store double [[TMP148]], ptr [[ATMP120]], align 8
// CHK-C-NEXT:    [[TMP149:%.*]] = bitcast double [[TMP148]] to i64
// CHK-C-NEXT:    [[TMP150:%.*]] = bitcast double [[TMP138]] to i64
// CHK-C-NEXT:    [[CMP127:%.*]] = icmp eq i64 [[TMP149]], [[TMP150]]
// CHK-C-NEXT:    [[FROMBOOL128:%.*]] = zext i1 [[CMP127]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL128]], ptr [[ATMP122]], align 1
// CHK-C-NEXT:    br i1 [[CMP127]], label [[ATOMIC_CONT124]], label [[ATOMIC_EXIT129]]
// CHK-C:       atomic_exit129:
// CHK-C-NEXT:    [[TMP151:%.*]] = load double, ptr [[ATMP120]], align 8
// CHK-C-NEXT:    [[TMP152:%.*]] = load i8, ptr [[ATMP122]], align 1
// CHK-C-NEXT:    store i8 [[TMP152]], ptr [[R]], align 1
// CHK-C-NEXT:    [[TMP153:%.*]] = load double, ptr [[D]], align 8
// CHK-C-NEXT:    [[TMP154:%.*]] = load double, ptr [[E]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD130:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-C-NEXT:    [[TMP155:%.*]] = bitcast i64 [[ATOMIC_LOAD130]] to double
// CHK-C-NEXT:    store double [[TMP155]], ptr [[ATMP131]], align 8
// CHK-C-NEXT:    [[TMP156:%.*]] = bitcast double [[TMP155]] to i64
// CHK-C-NEXT:    [[TMP157:%.*]] = bitcast double [[TMP154]] to i64
// CHK-C-NEXT:    [[CMP132:%.*]] = icmp eq i64 [[TMP156]], [[TMP157]]
// CHK-C-NEXT:    [[FROMBOOL134:%.*]] = zext i1 [[CMP132]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL134]], ptr [[ATMP133]], align 1
// CHK-C-NEXT:    br i1 [[CMP132]], label [[ATOMIC_CONT135:%.*]], label [[ATOMIC_EXIT140:%.*]]
// CHK-C:       atomic_cont135:
// CHK-C-NEXT:    [[TMP158:%.*]] = phi i64 [ [[ATOMIC_LOAD130]], [[ATOMIC_EXIT129]] ], [ [[TMP162:%.*]], [[ATOMIC_CMP137:%.*]] ]
// CHK-C-NEXT:    [[TMP159:%.*]] = bitcast double [[TMP153]] to i64
// CHK-C-NEXT:    store i64 [[TMP159]], ptr [[ATOMIC_TEMP136]], align 8
// CHK-C-NEXT:    [[TMP160:%.*]] = load i64, ptr [[ATOMIC_TEMP136]], align 8
// CHK-C-NEXT:    [[TMP161:%.*]] = cmpxchg ptr [[X]], i64 [[TMP158]], i64 [[TMP160]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP162]] = extractvalue { i64, i1 } [[TMP161]], 0
// CHK-C-NEXT:    [[TMP163:%.*]] = extractvalue { i64, i1 } [[TMP161]], 1
// CHK-C-NEXT:    br i1 [[TMP163]], label [[ATOMIC_EXIT140]], label [[ATOMIC_CMP137]]
// CHK-C:       atomic_cmp137:
// CHK-C-NEXT:    [[TMP164:%.*]] = bitcast i64 [[TMP162]] to double
// CHK-C-NEXT:    store double [[TMP164]], ptr [[ATMP131]], align 8
// CHK-C-NEXT:    [[TMP165:%.*]] = bitcast double [[TMP164]] to i64
// CHK-C-NEXT:    [[TMP166:%.*]] = bitcast double [[TMP154]] to i64
// CHK-C-NEXT:    [[CMP138:%.*]] = icmp eq i64 [[TMP165]], [[TMP166]]
// CHK-C-NEXT:    [[FROMBOOL139:%.*]] = zext i1 [[CMP138]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL139]], ptr [[ATMP133]], align 1
// CHK-C-NEXT:    br i1 [[CMP138]], label [[ATOMIC_CONT135]], label [[ATOMIC_EXIT140]]
// CHK-C:       atomic_exit140:
// CHK-C-NEXT:    [[TMP167:%.*]] = load double, ptr [[ATMP131]], align 8
// CHK-C-NEXT:    [[TMP168:%.*]] = load i8, ptr [[ATMP133]], align 1
// CHK-C-NEXT:    store i8 [[TMP168]], ptr [[R]], align 1
// CHK-C-NEXT:    [[TMP169:%.*]] = trunc i8 [[TMP168]] to i1
// CHK-C-NEXT:    br i1 [[TMP169]], label [[ATOMIC_CAPTURE_CONT142:%.*]], label [[ATOMIC_CAPTURE141:%.*]]
// CHK-C:       atomic_capture141:
// CHK-C-NEXT:    store double [[TMP167]], ptr [[V]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT142]]
// CHK-C:       atomic_capture_cont142:
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z11test_doublev(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[X:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[D:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[E:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[V:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[R:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP5:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP7:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP10:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP16:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP18:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP21:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP27:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP29:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP32:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP39:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP41:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP44:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP50:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP52:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP55:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP62:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP64:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP67:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP73:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP75:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP78:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP85:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP87:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP90:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP96:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP98:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP101:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP108:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP110:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP113:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP120:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP122:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP125:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP131:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[ATMP133:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP136:%.*]] = alloca double, align 8
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load double, ptr [[EXPR]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP1:%.*]] = bitcast i64 [[ATOMIC_LOAD]] to double
// CHK-CXX-NEXT:    store double [[TMP1]], ptr [[TMP]], align 8
// CHK-CXX-NEXT:    [[CMP:%.*]] = fcmp ogt double [[TMP1]], [[TMP0]]
// CHK-CXX-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL]], ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP2:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP6:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    [[TMP3:%.*]] = bitcast double [[TMP0]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP3]], ptr [[ATOMIC_TEMP]], align 8
// CHK-CXX-NEXT:    [[TMP4:%.*]] = load i64, ptr [[ATOMIC_TEMP]], align 8
// CHK-CXX-NEXT:    [[TMP5:%.*]] = cmpxchg ptr [[X]], i64 [[TMP2]], i64 [[TMP4]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP6]] = extractvalue { i64, i1 } [[TMP5]], 0
// CHK-CXX-NEXT:    [[TMP7:%.*]] = extractvalue { i64, i1 } [[TMP5]], 1
// CHK-CXX-NEXT:    br i1 [[TMP7]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    [[TMP8:%.*]] = bitcast i64 [[TMP6]] to double
// CHK-CXX-NEXT:    store double [[TMP8]], ptr [[TMP]], align 8
// CHK-CXX-NEXT:    [[CMP2:%.*]] = fcmp ogt double [[TMP8]], [[TMP0]]
// CHK-CXX-NEXT:    [[FROMBOOL3:%.*]] = zext i1 [[CMP2]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL3]], ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP2]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP9:%.*]] = load double, ptr [[TMP]], align 8
// CHK-CXX-NEXT:    [[TMP10:%.*]] = load i8, ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    store double [[TMP9]], ptr [[V]], align 8
// CHK-CXX-NEXT:    [[TMP11:%.*]] = load double, ptr [[EXPR]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD4:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP12:%.*]] = bitcast i64 [[ATOMIC_LOAD4]] to double
// CHK-CXX-NEXT:    store double [[TMP12]], ptr [[ATMP5]], align 8
// CHK-CXX-NEXT:    [[CMP6:%.*]] = fcmp ogt double [[TMP12]], [[TMP11]]
// CHK-CXX-NEXT:    [[FROMBOOL8:%.*]] = zext i1 [[CMP6]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL8]], ptr [[ATMP7]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP6]], label [[ATOMIC_CONT9:%.*]], label [[ATOMIC_EXIT14:%.*]]
// CHK-CXX:       atomic_cont9:
// CHK-CXX-NEXT:    [[TMP13:%.*]] = phi i64 [ [[ATOMIC_LOAD4]], [[ATOMIC_EXIT]] ], [ [[TMP17:%.*]], [[ATOMIC_CMP11:%.*]] ]
// CHK-CXX-NEXT:    [[TMP14:%.*]] = bitcast double [[TMP11]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP14]], ptr [[ATOMIC_TEMP10]], align 8
// CHK-CXX-NEXT:    [[TMP15:%.*]] = load i64, ptr [[ATOMIC_TEMP10]], align 8
// CHK-CXX-NEXT:    [[TMP16:%.*]] = cmpxchg ptr [[X]], i64 [[TMP13]], i64 [[TMP15]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP17]] = extractvalue { i64, i1 } [[TMP16]], 0
// CHK-CXX-NEXT:    [[TMP18:%.*]] = extractvalue { i64, i1 } [[TMP16]], 1
// CHK-CXX-NEXT:    br i1 [[TMP18]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP11]]
// CHK-CXX:       atomic_upd_exit:
// CHK-CXX-NEXT:    store double [[TMP11]], ptr [[ATMP5]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT14]]
// CHK-CXX:       atomic_cmp11:
// CHK-CXX-NEXT:    [[TMP19:%.*]] = bitcast i64 [[TMP17]] to double
// CHK-CXX-NEXT:    store double [[TMP19]], ptr [[ATMP5]], align 8
// CHK-CXX-NEXT:    [[CMP12:%.*]] = fcmp ogt double [[TMP19]], [[TMP11]]
// CHK-CXX-NEXT:    [[FROMBOOL13:%.*]] = zext i1 [[CMP12]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL13]], ptr [[ATMP7]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT9]], label [[ATOMIC_EXIT14]]
// CHK-CXX:       atomic_exit14:
// CHK-CXX-NEXT:    [[TMP20:%.*]] = load double, ptr [[ATMP5]], align 8
// CHK-CXX-NEXT:    [[TMP21:%.*]] = load i8, ptr [[ATMP7]], align 1
// CHK-CXX-NEXT:    store double [[TMP20]], ptr [[V]], align 8
// CHK-CXX-NEXT:    [[TMP22:%.*]] = load double, ptr [[EXPR]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD15:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP23:%.*]] = bitcast i64 [[ATOMIC_LOAD15]] to double
// CHK-CXX-NEXT:    store double [[TMP23]], ptr [[ATMP16]], align 8
// CHK-CXX-NEXT:    [[CMP17:%.*]] = fcmp olt double [[TMP23]], [[TMP22]]
// CHK-CXX-NEXT:    [[FROMBOOL19:%.*]] = zext i1 [[CMP17]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL19]], ptr [[ATMP18]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP17]], label [[ATOMIC_CONT20:%.*]], label [[ATOMIC_EXIT25:%.*]]
// CHK-CXX:       atomic_cont20:
// CHK-CXX-NEXT:    [[TMP24:%.*]] = phi i64 [ [[ATOMIC_LOAD15]], [[ATOMIC_EXIT14]] ], [ [[TMP28:%.*]], [[ATOMIC_CMP22:%.*]] ]
// CHK-CXX-NEXT:    [[TMP25:%.*]] = bitcast double [[TMP22]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP25]], ptr [[ATOMIC_TEMP21]], align 8
// CHK-CXX-NEXT:    [[TMP26:%.*]] = load i64, ptr [[ATOMIC_TEMP21]], align 8
// CHK-CXX-NEXT:    [[TMP27:%.*]] = cmpxchg ptr [[X]], i64 [[TMP24]], i64 [[TMP26]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP28]] = extractvalue { i64, i1 } [[TMP27]], 0
// CHK-CXX-NEXT:    [[TMP29:%.*]] = extractvalue { i64, i1 } [[TMP27]], 1
// CHK-CXX-NEXT:    br i1 [[TMP29]], label [[ATOMIC_EXIT25]], label [[ATOMIC_CMP22]]
// CHK-CXX:       atomic_cmp22:
// CHK-CXX-NEXT:    [[TMP30:%.*]] = bitcast i64 [[TMP28]] to double
// CHK-CXX-NEXT:    store double [[TMP30]], ptr [[ATMP16]], align 8
// CHK-CXX-NEXT:    [[CMP23:%.*]] = fcmp olt double [[TMP30]], [[TMP22]]
// CHK-CXX-NEXT:    [[FROMBOOL24:%.*]] = zext i1 [[CMP23]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL24]], ptr [[ATMP18]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP23]], label [[ATOMIC_CONT20]], label [[ATOMIC_EXIT25]]
// CHK-CXX:       atomic_exit25:
// CHK-CXX-NEXT:    [[TMP31:%.*]] = load double, ptr [[ATMP16]], align 8
// CHK-CXX-NEXT:    [[TMP32:%.*]] = load i8, ptr [[ATMP18]], align 1
// CHK-CXX-NEXT:    store double [[TMP31]], ptr [[V]], align 8
// CHK-CXX-NEXT:    [[TMP33:%.*]] = load double, ptr [[EXPR]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD26:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP34:%.*]] = bitcast i64 [[ATOMIC_LOAD26]] to double
// CHK-CXX-NEXT:    store double [[TMP34]], ptr [[ATMP27]], align 8
// CHK-CXX-NEXT:    [[CMP28:%.*]] = fcmp olt double [[TMP34]], [[TMP33]]
// CHK-CXX-NEXT:    [[FROMBOOL30:%.*]] = zext i1 [[CMP28]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL30]], ptr [[ATMP29]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP28]], label [[ATOMIC_CONT31:%.*]], label [[ATOMIC_EXIT37:%.*]]
// CHK-CXX:       atomic_cont31:
// CHK-CXX-NEXT:    [[TMP35:%.*]] = phi i64 [ [[ATOMIC_LOAD26]], [[ATOMIC_EXIT25]] ], [ [[TMP39:%.*]], [[ATOMIC_CMP34:%.*]] ]
// CHK-CXX-NEXT:    [[TMP36:%.*]] = bitcast double [[TMP33]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP36]], ptr [[ATOMIC_TEMP32]], align 8
// CHK-CXX-NEXT:    [[TMP37:%.*]] = load i64, ptr [[ATOMIC_TEMP32]], align 8
// CHK-CXX-NEXT:    [[TMP38:%.*]] = cmpxchg ptr [[X]], i64 [[TMP35]], i64 [[TMP37]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP39]] = extractvalue { i64, i1 } [[TMP38]], 0
// CHK-CXX-NEXT:    [[TMP40:%.*]] = extractvalue { i64, i1 } [[TMP38]], 1
// CHK-CXX-NEXT:    br i1 [[TMP40]], label [[ATOMIC_UPD_EXIT33:%.*]], label [[ATOMIC_CMP34]]
// CHK-CXX:       atomic_upd_exit33:
// CHK-CXX-NEXT:    store double [[TMP33]], ptr [[ATMP27]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT37]]
// CHK-CXX:       atomic_cmp34:
// CHK-CXX-NEXT:    [[TMP41:%.*]] = bitcast i64 [[TMP39]] to double
// CHK-CXX-NEXT:    store double [[TMP41]], ptr [[ATMP27]], align 8
// CHK-CXX-NEXT:    [[CMP35:%.*]] = fcmp olt double [[TMP41]], [[TMP33]]
// CHK-CXX-NEXT:    [[FROMBOOL36:%.*]] = zext i1 [[CMP35]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL36]], ptr [[ATMP29]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP35]], label [[ATOMIC_CONT31]], label [[ATOMIC_EXIT37]]
// CHK-CXX:       atomic_exit37:
// CHK-CXX-NEXT:    [[TMP42:%.*]] = load double, ptr [[ATMP27]], align 8
// CHK-CXX-NEXT:    [[TMP43:%.*]] = load i8, ptr [[ATMP29]], align 1
// CHK-CXX-NEXT:    store double [[TMP42]], ptr [[V]], align 8
// CHK-CXX-NEXT:    [[TMP44:%.*]] = load double, ptr [[EXPR]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD38:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP45:%.*]] = bitcast i64 [[ATOMIC_LOAD38]] to double
// CHK-CXX-NEXT:    store double [[TMP45]], ptr [[ATMP39]], align 8
// CHK-CXX-NEXT:    [[CMP40:%.*]] = fcmp olt double [[TMP45]], [[TMP44]]
// CHK-CXX-NEXT:    [[FROMBOOL42:%.*]] = zext i1 [[CMP40]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL42]], ptr [[ATMP41]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP40]], label [[ATOMIC_CONT43:%.*]], label [[ATOMIC_EXIT48:%.*]]
// CHK-CXX:       atomic_cont43:
// CHK-CXX-NEXT:    [[TMP46:%.*]] = phi i64 [ [[ATOMIC_LOAD38]], [[ATOMIC_EXIT37]] ], [ [[TMP50:%.*]], [[ATOMIC_CMP45:%.*]] ]
// CHK-CXX-NEXT:    [[TMP47:%.*]] = bitcast double [[TMP44]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP47]], ptr [[ATOMIC_TEMP44]], align 8
// CHK-CXX-NEXT:    [[TMP48:%.*]] = load i64, ptr [[ATOMIC_TEMP44]], align 8
// CHK-CXX-NEXT:    [[TMP49:%.*]] = cmpxchg ptr [[X]], i64 [[TMP46]], i64 [[TMP48]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP50]] = extractvalue { i64, i1 } [[TMP49]], 0
// CHK-CXX-NEXT:    [[TMP51:%.*]] = extractvalue { i64, i1 } [[TMP49]], 1
// CHK-CXX-NEXT:    br i1 [[TMP51]], label [[ATOMIC_EXIT48]], label [[ATOMIC_CMP45]]
// CHK-CXX:       atomic_cmp45:
// CHK-CXX-NEXT:    [[TMP52:%.*]] = bitcast i64 [[TMP50]] to double
// CHK-CXX-NEXT:    store double [[TMP52]], ptr [[ATMP39]], align 8
// CHK-CXX-NEXT:    [[CMP46:%.*]] = fcmp olt double [[TMP52]], [[TMP44]]
// CHK-CXX-NEXT:    [[FROMBOOL47:%.*]] = zext i1 [[CMP46]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL47]], ptr [[ATMP41]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP46]], label [[ATOMIC_CONT43]], label [[ATOMIC_EXIT48]]
// CHK-CXX:       atomic_exit48:
// CHK-CXX-NEXT:    [[TMP53:%.*]] = load double, ptr [[ATMP39]], align 8
// CHK-CXX-NEXT:    [[TMP54:%.*]] = load i8, ptr [[ATMP41]], align 1
// CHK-CXX-NEXT:    store double [[TMP53]], ptr [[V]], align 8
// CHK-CXX-NEXT:    [[TMP55:%.*]] = load double, ptr [[EXPR]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD49:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP56:%.*]] = bitcast i64 [[ATOMIC_LOAD49]] to double
// CHK-CXX-NEXT:    store double [[TMP56]], ptr [[ATMP50]], align 8
// CHK-CXX-NEXT:    [[CMP51:%.*]] = fcmp olt double [[TMP56]], [[TMP55]]
// CHK-CXX-NEXT:    [[FROMBOOL53:%.*]] = zext i1 [[CMP51]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL53]], ptr [[ATMP52]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP51]], label [[ATOMIC_CONT54:%.*]], label [[ATOMIC_EXIT60:%.*]]
// CHK-CXX:       atomic_cont54:
// CHK-CXX-NEXT:    [[TMP57:%.*]] = phi i64 [ [[ATOMIC_LOAD49]], [[ATOMIC_EXIT48]] ], [ [[TMP61:%.*]], [[ATOMIC_CMP57:%.*]] ]
// CHK-CXX-NEXT:    [[TMP58:%.*]] = bitcast double [[TMP55]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP58]], ptr [[ATOMIC_TEMP55]], align 8
// CHK-CXX-NEXT:    [[TMP59:%.*]] = load i64, ptr [[ATOMIC_TEMP55]], align 8
// CHK-CXX-NEXT:    [[TMP60:%.*]] = cmpxchg ptr [[X]], i64 [[TMP57]], i64 [[TMP59]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP61]] = extractvalue { i64, i1 } [[TMP60]], 0
// CHK-CXX-NEXT:    [[TMP62:%.*]] = extractvalue { i64, i1 } [[TMP60]], 1
// CHK-CXX-NEXT:    br i1 [[TMP62]], label [[ATOMIC_UPD_EXIT56:%.*]], label [[ATOMIC_CMP57]]
// CHK-CXX:       atomic_upd_exit56:
// CHK-CXX-NEXT:    store double [[TMP55]], ptr [[ATMP50]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT60]]
// CHK-CXX:       atomic_cmp57:
// CHK-CXX-NEXT:    [[TMP63:%.*]] = bitcast i64 [[TMP61]] to double
// CHK-CXX-NEXT:    store double [[TMP63]], ptr [[ATMP50]], align 8
// CHK-CXX-NEXT:    [[CMP58:%.*]] = fcmp olt double [[TMP63]], [[TMP55]]
// CHK-CXX-NEXT:    [[FROMBOOL59:%.*]] = zext i1 [[CMP58]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL59]], ptr [[ATMP52]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP58]], label [[ATOMIC_CONT54]], label [[ATOMIC_EXIT60]]
// CHK-CXX:       atomic_exit60:
// CHK-CXX-NEXT:    [[TMP64:%.*]] = load double, ptr [[ATMP50]], align 8
// CHK-CXX-NEXT:    [[TMP65:%.*]] = load i8, ptr [[ATMP52]], align 1
// CHK-CXX-NEXT:    store double [[TMP64]], ptr [[V]], align 8
// CHK-CXX-NEXT:    [[TMP66:%.*]] = load double, ptr [[EXPR]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD61:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP67:%.*]] = bitcast i64 [[ATOMIC_LOAD61]] to double
// CHK-CXX-NEXT:    store double [[TMP67]], ptr [[ATMP62]], align 8
// CHK-CXX-NEXT:    [[CMP63:%.*]] = fcmp ogt double [[TMP67]], [[TMP66]]
// CHK-CXX-NEXT:    [[FROMBOOL65:%.*]] = zext i1 [[CMP63]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL65]], ptr [[ATMP64]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP63]], label [[ATOMIC_CONT66:%.*]], label [[ATOMIC_EXIT71:%.*]]
// CHK-CXX:       atomic_cont66:
// CHK-CXX-NEXT:    [[TMP68:%.*]] = phi i64 [ [[ATOMIC_LOAD61]], [[ATOMIC_EXIT60]] ], [ [[TMP72:%.*]], [[ATOMIC_CMP68:%.*]] ]
// CHK-CXX-NEXT:    [[TMP69:%.*]] = bitcast double [[TMP66]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP69]], ptr [[ATOMIC_TEMP67]], align 8
// CHK-CXX-NEXT:    [[TMP70:%.*]] = load i64, ptr [[ATOMIC_TEMP67]], align 8
// CHK-CXX-NEXT:    [[TMP71:%.*]] = cmpxchg ptr [[X]], i64 [[TMP68]], i64 [[TMP70]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP72]] = extractvalue { i64, i1 } [[TMP71]], 0
// CHK-CXX-NEXT:    [[TMP73:%.*]] = extractvalue { i64, i1 } [[TMP71]], 1
// CHK-CXX-NEXT:    br i1 [[TMP73]], label [[ATOMIC_EXIT71]], label [[ATOMIC_CMP68]]
// CHK-CXX:       atomic_cmp68:
// CHK-CXX-NEXT:    [[TMP74:%.*]] = bitcast i64 [[TMP72]] to double
// CHK-CXX-NEXT:    store double [[TMP74]], ptr [[ATMP62]], align 8
// CHK-CXX-NEXT:    [[CMP69:%.*]] = fcmp ogt double [[TMP74]], [[TMP66]]
// CHK-CXX-NEXT:    [[FROMBOOL70:%.*]] = zext i1 [[CMP69]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL70]], ptr [[ATMP64]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP69]], label [[ATOMIC_CONT66]], label [[ATOMIC_EXIT71]]
// CHK-CXX:       atomic_exit71:
// CHK-CXX-NEXT:    [[TMP75:%.*]] = load double, ptr [[ATMP62]], align 8
// CHK-CXX-NEXT:    [[TMP76:%.*]] = load i8, ptr [[ATMP64]], align 1
// CHK-CXX-NEXT:    store double [[TMP75]], ptr [[V]], align 8
// CHK-CXX-NEXT:    [[TMP77:%.*]] = load double, ptr [[EXPR]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD72:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP78:%.*]] = bitcast i64 [[ATOMIC_LOAD72]] to double
// CHK-CXX-NEXT:    store double [[TMP78]], ptr [[ATMP73]], align 8
// CHK-CXX-NEXT:    [[CMP74:%.*]] = fcmp ogt double [[TMP78]], [[TMP77]]
// CHK-CXX-NEXT:    [[FROMBOOL76:%.*]] = zext i1 [[CMP74]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL76]], ptr [[ATMP75]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP74]], label [[ATOMIC_CONT77:%.*]], label [[ATOMIC_EXIT83:%.*]]
// CHK-CXX:       atomic_cont77:
// CHK-CXX-NEXT:    [[TMP79:%.*]] = phi i64 [ [[ATOMIC_LOAD72]], [[ATOMIC_EXIT71]] ], [ [[TMP83:%.*]], [[ATOMIC_CMP80:%.*]] ]
// CHK-CXX-NEXT:    [[TMP80:%.*]] = bitcast double [[TMP77]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP80]], ptr [[ATOMIC_TEMP78]], align 8
// CHK-CXX-NEXT:    [[TMP81:%.*]] = load i64, ptr [[ATOMIC_TEMP78]], align 8
// CHK-CXX-NEXT:    [[TMP82:%.*]] = cmpxchg ptr [[X]], i64 [[TMP79]], i64 [[TMP81]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP83]] = extractvalue { i64, i1 } [[TMP82]], 0
// CHK-CXX-NEXT:    [[TMP84:%.*]] = extractvalue { i64, i1 } [[TMP82]], 1
// CHK-CXX-NEXT:    br i1 [[TMP84]], label [[ATOMIC_UPD_EXIT79:%.*]], label [[ATOMIC_CMP80]]
// CHK-CXX:       atomic_upd_exit79:
// CHK-CXX-NEXT:    store double [[TMP77]], ptr [[ATMP73]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT83]]
// CHK-CXX:       atomic_cmp80:
// CHK-CXX-NEXT:    [[TMP85:%.*]] = bitcast i64 [[TMP83]] to double
// CHK-CXX-NEXT:    store double [[TMP85]], ptr [[ATMP73]], align 8
// CHK-CXX-NEXT:    [[CMP81:%.*]] = fcmp ogt double [[TMP85]], [[TMP77]]
// CHK-CXX-NEXT:    [[FROMBOOL82:%.*]] = zext i1 [[CMP81]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL82]], ptr [[ATMP75]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP81]], label [[ATOMIC_CONT77]], label [[ATOMIC_EXIT83]]
// CHK-CXX:       atomic_exit83:
// CHK-CXX-NEXT:    [[TMP86:%.*]] = load double, ptr [[ATMP73]], align 8
// CHK-CXX-NEXT:    [[TMP87:%.*]] = load i8, ptr [[ATMP75]], align 1
// CHK-CXX-NEXT:    store double [[TMP86]], ptr [[V]], align 8
// CHK-CXX-NEXT:    [[TMP88:%.*]] = load double, ptr [[D]], align 8
// CHK-CXX-NEXT:    [[TMP89:%.*]] = load double, ptr [[E]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD84:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP90:%.*]] = bitcast i64 [[ATOMIC_LOAD84]] to double
// CHK-CXX-NEXT:    store double [[TMP90]], ptr [[ATMP85]], align 8
// CHK-CXX-NEXT:    [[TMP91:%.*]] = bitcast double [[TMP90]] to i64
// CHK-CXX-NEXT:    [[TMP92:%.*]] = bitcast double [[TMP89]] to i64
// CHK-CXX-NEXT:    [[CMP86:%.*]] = icmp eq i64 [[TMP91]], [[TMP92]]
// CHK-CXX-NEXT:    [[FROMBOOL88:%.*]] = zext i1 [[CMP86]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL88]], ptr [[ATMP87]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP86]], label [[ATOMIC_CONT89:%.*]], label [[ATOMIC_EXIT94:%.*]]
// CHK-CXX:       atomic_cont89:
// CHK-CXX-NEXT:    [[TMP93:%.*]] = phi i64 [ [[ATOMIC_LOAD84]], [[ATOMIC_EXIT83]] ], [ [[TMP97:%.*]], [[ATOMIC_CMP91:%.*]] ]
// CHK-CXX-NEXT:    [[TMP94:%.*]] = bitcast double [[TMP88]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP94]], ptr [[ATOMIC_TEMP90]], align 8
// CHK-CXX-NEXT:    [[TMP95:%.*]] = load i64, ptr [[ATOMIC_TEMP90]], align 8
// CHK-CXX-NEXT:    [[TMP96:%.*]] = cmpxchg ptr [[X]], i64 [[TMP93]], i64 [[TMP95]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP97]] = extractvalue { i64, i1 } [[TMP96]], 0
// CHK-CXX-NEXT:    [[TMP98:%.*]] = extractvalue { i64, i1 } [[TMP96]], 1
// CHK-CXX-NEXT:    br i1 [[TMP98]], label [[ATOMIC_EXIT94]], label [[ATOMIC_CMP91]]
// CHK-CXX:       atomic_cmp91:
// CHK-CXX-NEXT:    [[TMP99:%.*]] = bitcast i64 [[TMP97]] to double
// CHK-CXX-NEXT:    store double [[TMP99]], ptr [[ATMP85]], align 8
// CHK-CXX-NEXT:    [[TMP100:%.*]] = bitcast double [[TMP99]] to i64
// CHK-CXX-NEXT:    [[TMP101:%.*]] = bitcast double [[TMP89]] to i64
// CHK-CXX-NEXT:    [[CMP92:%.*]] = icmp eq i64 [[TMP100]], [[TMP101]]
// CHK-CXX-NEXT:    [[FROMBOOL93:%.*]] = zext i1 [[CMP92]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL93]], ptr [[ATMP87]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP92]], label [[ATOMIC_CONT89]], label [[ATOMIC_EXIT94]]
// CHK-CXX:       atomic_exit94:
// CHK-CXX-NEXT:    [[TMP102:%.*]] = load double, ptr [[ATMP85]], align 8
// CHK-CXX-NEXT:    [[TMP103:%.*]] = load i8, ptr [[ATMP87]], align 1
// CHK-CXX-NEXT:    store double [[TMP102]], ptr [[V]], align 8
// CHK-CXX-NEXT:    [[TMP104:%.*]] = load double, ptr [[D]], align 8
// CHK-CXX-NEXT:    [[TMP105:%.*]] = load double, ptr [[E]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD95:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP106:%.*]] = bitcast i64 [[ATOMIC_LOAD95]] to double
// CHK-CXX-NEXT:    store double [[TMP106]], ptr [[ATMP96]], align 8
// CHK-CXX-NEXT:    [[TMP107:%.*]] = bitcast double [[TMP106]] to i64
// CHK-CXX-NEXT:    [[TMP108:%.*]] = bitcast double [[TMP105]] to i64
// CHK-CXX-NEXT:    [[CMP97:%.*]] = icmp eq i64 [[TMP107]], [[TMP108]]
// CHK-CXX-NEXT:    [[FROMBOOL99:%.*]] = zext i1 [[CMP97]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL99]], ptr [[ATMP98]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP97]], label [[ATOMIC_CONT100:%.*]], label [[ATOMIC_EXIT106:%.*]]
// CHK-CXX:       atomic_cont100:
// CHK-CXX-NEXT:    [[TMP109:%.*]] = phi i64 [ [[ATOMIC_LOAD95]], [[ATOMIC_EXIT94]] ], [ [[TMP113:%.*]], [[ATOMIC_CMP103:%.*]] ]
// CHK-CXX-NEXT:    [[TMP110:%.*]] = bitcast double [[TMP104]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP110]], ptr [[ATOMIC_TEMP101]], align 8
// CHK-CXX-NEXT:    [[TMP111:%.*]] = load i64, ptr [[ATOMIC_TEMP101]], align 8
// CHK-CXX-NEXT:    [[TMP112:%.*]] = cmpxchg ptr [[X]], i64 [[TMP109]], i64 [[TMP111]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP113]] = extractvalue { i64, i1 } [[TMP112]], 0
// CHK-CXX-NEXT:    [[TMP114:%.*]] = extractvalue { i64, i1 } [[TMP112]], 1
// CHK-CXX-NEXT:    br i1 [[TMP114]], label [[ATOMIC_UPD_EXIT102:%.*]], label [[ATOMIC_CMP103]]
// CHK-CXX:       atomic_upd_exit102:
// CHK-CXX-NEXT:    store double [[TMP104]], ptr [[ATMP96]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT106]]
// CHK-CXX:       atomic_cmp103:
// CHK-CXX-NEXT:    [[TMP115:%.*]] = bitcast i64 [[TMP113]] to double
// CHK-CXX-NEXT:    store double [[TMP115]], ptr [[ATMP96]], align 8
// CHK-CXX-NEXT:    [[TMP116:%.*]] = bitcast double [[TMP115]] to i64
// CHK-CXX-NEXT:    [[TMP117:%.*]] = bitcast double [[TMP105]] to i64
// CHK-CXX-NEXT:    [[CMP104:%.*]] = icmp eq i64 [[TMP116]], [[TMP117]]
// CHK-CXX-NEXT:    [[FROMBOOL105:%.*]] = zext i1 [[CMP104]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL105]], ptr [[ATMP98]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP104]], label [[ATOMIC_CONT100]], label [[ATOMIC_EXIT106]]
// CHK-CXX:       atomic_exit106:
// CHK-CXX-NEXT:    [[TMP118:%.*]] = load double, ptr [[ATMP96]], align 8
// CHK-CXX-NEXT:    [[TMP119:%.*]] = load i8, ptr [[ATMP98]], align 1
// CHK-CXX-NEXT:    store double [[TMP118]], ptr [[V]], align 8
// CHK-CXX-NEXT:    [[TMP120:%.*]] = load double, ptr [[D]], align 8
// CHK-CXX-NEXT:    [[TMP121:%.*]] = load double, ptr [[E]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD107:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP122:%.*]] = bitcast i64 [[ATOMIC_LOAD107]] to double
// CHK-CXX-NEXT:    store double [[TMP122]], ptr [[ATMP108]], align 8
// CHK-CXX-NEXT:    [[TMP123:%.*]] = bitcast double [[TMP122]] to i64
// CHK-CXX-NEXT:    [[TMP124:%.*]] = bitcast double [[TMP121]] to i64
// CHK-CXX-NEXT:    [[CMP109:%.*]] = icmp eq i64 [[TMP123]], [[TMP124]]
// CHK-CXX-NEXT:    [[FROMBOOL111:%.*]] = zext i1 [[CMP109]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL111]], ptr [[ATMP110]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP109]], label [[ATOMIC_CONT112:%.*]], label [[ATOMIC_EXIT118:%.*]]
// CHK-CXX:       atomic_cont112:
// CHK-CXX-NEXT:    [[TMP125:%.*]] = phi i64 [ [[ATOMIC_LOAD107]], [[ATOMIC_EXIT106]] ], [ [[TMP129:%.*]], [[ATOMIC_CMP115:%.*]] ]
// CHK-CXX-NEXT:    [[TMP126:%.*]] = bitcast double [[TMP120]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP126]], ptr [[ATOMIC_TEMP113]], align 8
// CHK-CXX-NEXT:    [[TMP127:%.*]] = load i64, ptr [[ATOMIC_TEMP113]], align 8
// CHK-CXX-NEXT:    [[TMP128:%.*]] = cmpxchg ptr [[X]], i64 [[TMP125]], i64 [[TMP127]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP129]] = extractvalue { i64, i1 } [[TMP128]], 0
// CHK-CXX-NEXT:    [[TMP130:%.*]] = extractvalue { i64, i1 } [[TMP128]], 1
// CHK-CXX-NEXT:    br i1 [[TMP130]], label [[ATOMIC_UPD_EXIT114:%.*]], label [[ATOMIC_CMP115]]
// CHK-CXX:       atomic_upd_exit114:
// CHK-CXX-NEXT:    store double [[TMP120]], ptr [[ATMP108]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT118]]
// CHK-CXX:       atomic_cmp115:
// CHK-CXX-NEXT:    [[TMP131:%.*]] = bitcast i64 [[TMP129]] to double
// CHK-CXX-NEXT:    store double [[TMP131]], ptr [[ATMP108]], align 8
// CHK-CXX-NEXT:    [[TMP132:%.*]] = bitcast double [[TMP131]] to i64
// CHK-CXX-NEXT:    [[TMP133:%.*]] = bitcast double [[TMP121]] to i64
// CHK-CXX-NEXT:    [[CMP116:%.*]] = icmp eq i64 [[TMP132]], [[TMP133]]
// CHK-CXX-NEXT:    [[FROMBOOL117:%.*]] = zext i1 [[CMP116]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL117]], ptr [[ATMP110]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP116]], label [[ATOMIC_CONT112]], label [[ATOMIC_EXIT118]]
// CHK-CXX:       atomic_exit118:
// CHK-CXX-NEXT:    [[TMP134:%.*]] = load double, ptr [[ATMP108]], align 8
// CHK-CXX-NEXT:    [[TMP135:%.*]] = load i8, ptr [[ATMP110]], align 1
// CHK-CXX-NEXT:    [[TMP136:%.*]] = trunc i8 [[TMP135]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP136]], label [[ATOMIC_CAPTURE_CONT:%.*]], label [[ATOMIC_CAPTURE:%.*]]
// CHK-CXX:       atomic_capture:
// CHK-CXX-NEXT:    store double [[TMP134]], ptr [[V]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT]]
// CHK-CXX:       atomic_capture_cont:
// CHK-CXX-NEXT:    [[TMP137:%.*]] = load double, ptr [[D]], align 8
// CHK-CXX-NEXT:    [[TMP138:%.*]] = load double, ptr [[E]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD119:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP139:%.*]] = bitcast i64 [[ATOMIC_LOAD119]] to double
// CHK-CXX-NEXT:    store double [[TMP139]], ptr [[ATMP120]], align 8
// CHK-CXX-NEXT:    [[TMP140:%.*]] = bitcast double [[TMP139]] to i64
// CHK-CXX-NEXT:    [[TMP141:%.*]] = bitcast double [[TMP138]] to i64
// CHK-CXX-NEXT:    [[CMP121:%.*]] = icmp eq i64 [[TMP140]], [[TMP141]]
// CHK-CXX-NEXT:    [[FROMBOOL123:%.*]] = zext i1 [[CMP121]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL123]], ptr [[ATMP122]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP121]], label [[ATOMIC_CONT124:%.*]], label [[ATOMIC_EXIT129:%.*]]
// CHK-CXX:       atomic_cont124:
// CHK-CXX-NEXT:    [[TMP142:%.*]] = phi i64 [ [[ATOMIC_LOAD119]], [[ATOMIC_CAPTURE_CONT]] ], [ [[TMP146:%.*]], [[ATOMIC_CMP126:%.*]] ]
// CHK-CXX-NEXT:    [[TMP143:%.*]] = bitcast double [[TMP137]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP143]], ptr [[ATOMIC_TEMP125]], align 8
// CHK-CXX-NEXT:    [[TMP144:%.*]] = load i64, ptr [[ATOMIC_TEMP125]], align 8
// CHK-CXX-NEXT:    [[TMP145:%.*]] = cmpxchg ptr [[X]], i64 [[TMP142]], i64 [[TMP144]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP146]] = extractvalue { i64, i1 } [[TMP145]], 0
// CHK-CXX-NEXT:    [[TMP147:%.*]] = extractvalue { i64, i1 } [[TMP145]], 1
// CHK-CXX-NEXT:    br i1 [[TMP147]], label [[ATOMIC_EXIT129]], label [[ATOMIC_CMP126]]
// CHK-CXX:       atomic_cmp126:
// CHK-CXX-NEXT:    [[TMP148:%.*]] = bitcast i64 [[TMP146]] to double
// CHK-CXX-NEXT:    store double [[TMP148]], ptr [[ATMP120]], align 8
// CHK-CXX-NEXT:    [[TMP149:%.*]] = bitcast double [[TMP148]] to i64
// CHK-CXX-NEXT:    [[TMP150:%.*]] = bitcast double [[TMP138]] to i64
// CHK-CXX-NEXT:    [[CMP127:%.*]] = icmp eq i64 [[TMP149]], [[TMP150]]
// CHK-CXX-NEXT:    [[FROMBOOL128:%.*]] = zext i1 [[CMP127]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL128]], ptr [[ATMP122]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP127]], label [[ATOMIC_CONT124]], label [[ATOMIC_EXIT129]]
// CHK-CXX:       atomic_exit129:
// CHK-CXX-NEXT:    [[TMP151:%.*]] = load double, ptr [[ATMP120]], align 8
// CHK-CXX-NEXT:    [[TMP152:%.*]] = load i8, ptr [[ATMP122]], align 1
// CHK-CXX-NEXT:    store i8 [[TMP152]], ptr [[R]], align 1
// CHK-CXX-NEXT:    [[TMP153:%.*]] = load double, ptr [[D]], align 8
// CHK-CXX-NEXT:    [[TMP154:%.*]] = load double, ptr [[E]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD130:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-CXX-NEXT:    [[TMP155:%.*]] = bitcast i64 [[ATOMIC_LOAD130]] to double
// CHK-CXX-NEXT:    store double [[TMP155]], ptr [[ATMP131]], align 8
// CHK-CXX-NEXT:    [[TMP156:%.*]] = bitcast double [[TMP155]] to i64
// CHK-CXX-NEXT:    [[TMP157:%.*]] = bitcast double [[TMP154]] to i64
// CHK-CXX-NEXT:    [[CMP132:%.*]] = icmp eq i64 [[TMP156]], [[TMP157]]
// CHK-CXX-NEXT:    [[FROMBOOL134:%.*]] = zext i1 [[CMP132]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL134]], ptr [[ATMP133]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP132]], label [[ATOMIC_CONT135:%.*]], label [[ATOMIC_EXIT140:%.*]]
// CHK-CXX:       atomic_cont135:
// CHK-CXX-NEXT:    [[TMP158:%.*]] = phi i64 [ [[ATOMIC_LOAD130]], [[ATOMIC_EXIT129]] ], [ [[TMP162:%.*]], [[ATOMIC_CMP137:%.*]] ]
// CHK-CXX-NEXT:    [[TMP159:%.*]] = bitcast double [[TMP153]] to i64
// CHK-CXX-NEXT:    store i64 [[TMP159]], ptr [[ATOMIC_TEMP136]], align 8
// CHK-CXX-NEXT:    [[TMP160:%.*]] = load i64, ptr [[ATOMIC_TEMP136]], align 8
// CHK-CXX-NEXT:    [[TMP161:%.*]] = cmpxchg ptr [[X]], i64 [[TMP158]], i64 [[TMP160]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP162]] = extractvalue { i64, i1 } [[TMP161]], 0
// CHK-CXX-NEXT:    [[TMP163:%.*]] = extractvalue { i64, i1 } [[TMP161]], 1
// CHK-CXX-NEXT:    br i1 [[TMP163]], label [[ATOMIC_EXIT140]], label [[ATOMIC_CMP137]]
// CHK-CXX:       atomic_cmp137:
// CHK-CXX-NEXT:    [[TMP164:%.*]] = bitcast i64 [[TMP162]] to double
// CHK-CXX-NEXT:    store double [[TMP164]], ptr [[ATMP131]], align 8
// CHK-CXX-NEXT:    [[TMP165:%.*]] = bitcast double [[TMP164]] to i64
// CHK-CXX-NEXT:    [[TMP166:%.*]] = bitcast double [[TMP154]] to i64
// CHK-CXX-NEXT:    [[CMP138:%.*]] = icmp eq i64 [[TMP165]], [[TMP166]]
// CHK-CXX-NEXT:    [[FROMBOOL139:%.*]] = zext i1 [[CMP138]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL139]], ptr [[ATMP133]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP138]], label [[ATOMIC_CONT135]], label [[ATOMIC_EXIT140]]
// CHK-CXX:       atomic_exit140:
// CHK-CXX-NEXT:    [[TMP167:%.*]] = load double, ptr [[ATMP131]], align 8
// CHK-CXX-NEXT:    [[TMP168:%.*]] = load i8, ptr [[ATMP133]], align 1
// CHK-CXX-NEXT:    store i8 [[TMP168]], ptr [[R]], align 1
// CHK-CXX-NEXT:    [[TMP169:%.*]] = trunc i8 [[TMP168]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP169]], label [[ATOMIC_CAPTURE_CONT142:%.*]], label [[ATOMIC_CAPTURE141:%.*]]
// CHK-CXX:       atomic_capture141:
// CHK-CXX-NEXT:    store double [[TMP167]], ptr [[V]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT142]]
// CHK-CXX:       atomic_capture_cont142:
// CHK-CXX-NEXT:    ret void
//
void test_double() {
    // One of each form with 'double'.
    double x, expr, d, e, v;
    char r;

    #pragma omp atomic compare capture
    { v = x; if (expr < x) { x = expr; } } // MIN

    #pragma omp atomic compare capture
    { if (expr < x) { x = expr; } v =x ;} // MIN

    #pragma omp atomic compare capture
    { v = x; if (expr > x) { x = expr; } } // MAX

    #pragma omp atomic compare capture
    { if (expr > x) { x = expr; } v = x; } // MAX

    #pragma omp atomic compare capture
    { v = x; if (x < expr) { x = expr; } } // MAX

    #pragma omp atomic compare capture
    { if (x < expr) { x = expr; } v = x; } // MAX

    #pragma omp atomic compare capture
    { v = x; if (x > expr) { x = expr; } } // MIN

    #pragma omp atomic compare capture
    { if (x > expr) { x = expr; } v = x; } // MIN

    #pragma omp atomic compare capture
    { v = x; if (x == e) { x = d; } }

    #pragma omp atomic compare capture
    { if (x == e) { x = d; } v = x; }

    #pragma omp atomic compare capture
    if (x == e) { x = d; } else { v = x; }

    #pragma omp atomic compare capture
    { r = x == e; if(r) { x = d; } }

    #pragma omp atomic compare capture
    { r = x == e; if(r) { x = d; } else { v = x; } }
}

// CHK-C-LABEL: @test_bool(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[X:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[D:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[E:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[V:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[R:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[TMP:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATMP7:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATMP9:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP12:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATMP21:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATMP23:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP26:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATMP36:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATMP38:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP41:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATMP50:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATMP52:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP55:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[TMP0:%.*]] = load i8, ptr [[EXPR]], align 1
// CHK-C-NEXT:    [[TOBOOL:%.*]] = trunc i8 [[TMP0]] to i1
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i8, ptr [[X]] monotonic, align 1
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD]], ptr [[TMP]], align 1
// CHK-C-NEXT:    [[TMP1:%.*]] = trunc i8 [[ATOMIC_LOAD]] to i1
// CHK-C-NEXT:    [[CMP:%.*]] = icmp ult i1 [[TMP1]], [[TOBOOL]]
// CHK-C-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL]], ptr [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP2:%.*]] = phi i8 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP5:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    [[FROMBOOL2:%.*]] = zext i1 [[TOBOOL]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL2]], ptr [[ATOMIC_TEMP]], align 1
// CHK-C-NEXT:    [[TMP3:%.*]] = load i8, ptr [[ATOMIC_TEMP]], align 1
// CHK-C-NEXT:    [[TMP4:%.*]] = cmpxchg ptr [[X]], i8 [[TMP2]], i8 [[TMP3]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP5]] = extractvalue { i8, i1 } [[TMP4]], 0
// CHK-C-NEXT:    [[TMP6:%.*]] = extractvalue { i8, i1 } [[TMP4]], 1
// CHK-C-NEXT:    br i1 [[TMP6]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    store i8 [[TMP5]], ptr [[TMP]], align 1
// CHK-C-NEXT:    [[TMP7:%.*]] = trunc i8 [[TMP5]] to i1
// CHK-C-NEXT:    [[CMP3:%.*]] = icmp ult i1 [[TMP7]], [[TOBOOL]]
// CHK-C-NEXT:    [[FROMBOOL4:%.*]] = zext i1 [[CMP3]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL4]], ptr [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP3]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP8:%.*]] = load i8, ptr [[TMP]], align 1
// CHK-C-NEXT:    [[TMP9:%.*]] = load i8, ptr [[ATMP1]], align 1
// CHK-C-NEXT:    store i8 [[TMP8]], ptr [[V]], align 1
// CHK-C-NEXT:    [[TMP10:%.*]] = load i8, ptr [[EXPR]], align 1
// CHK-C-NEXT:    [[TOBOOL5:%.*]] = trunc i8 [[TMP10]] to i1
// CHK-C-NEXT:    [[ATOMIC_LOAD6:%.*]] = load atomic i8, ptr [[X]] monotonic, align 1
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD6]], ptr [[ATMP7]], align 1
// CHK-C-NEXT:    [[TMP11:%.*]] = trunc i8 [[ATOMIC_LOAD6]] to i1
// CHK-C-NEXT:    [[CMP8:%.*]] = icmp ult i1 [[TMP11]], [[TOBOOL5]]
// CHK-C-NEXT:    [[FROMBOOL10:%.*]] = zext i1 [[CMP8]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL10]], ptr [[ATMP9]], align 1
// CHK-C-NEXT:    br i1 [[CMP8]], label [[ATOMIC_CONT11:%.*]], label [[ATOMIC_EXIT17:%.*]]
// CHK-C:       atomic_cont11:
// CHK-C-NEXT:    [[TMP12:%.*]] = phi i8 [ [[ATOMIC_LOAD6]], [[ATOMIC_EXIT]] ], [ [[TMP15:%.*]], [[ATOMIC_CMP14:%.*]] ]
// CHK-C-NEXT:    [[FROMBOOL13:%.*]] = zext i1 [[TOBOOL5]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL13]], ptr [[ATOMIC_TEMP12]], align 1
// CHK-C-NEXT:    [[TMP13:%.*]] = load i8, ptr [[ATOMIC_TEMP12]], align 1
// CHK-C-NEXT:    [[TMP14:%.*]] = cmpxchg ptr [[X]], i8 [[TMP12]], i8 [[TMP13]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP15]] = extractvalue { i8, i1 } [[TMP14]], 0
// CHK-C-NEXT:    [[TMP16:%.*]] = extractvalue { i8, i1 } [[TMP14]], 1
// CHK-C-NEXT:    br i1 [[TMP16]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP14]]
// CHK-C:       atomic_upd_exit:
// CHK-C-NEXT:    [[TMP17:%.*]] = zext i1 [[TOBOOL5]] to i8
// CHK-C-NEXT:    store i8 [[TMP17]], ptr [[ATMP7]], align 1
// CHK-C-NEXT:    br label [[ATOMIC_EXIT17]]
// CHK-C:       atomic_cmp14:
// CHK-C-NEXT:    store i8 [[TMP15]], ptr [[ATMP7]], align 1
// CHK-C-NEXT:    [[TMP18:%.*]] = trunc i8 [[TMP15]] to i1
// CHK-C-NEXT:    [[CMP15:%.*]] = icmp ult i1 [[TMP18]], [[TOBOOL5]]
// CHK-C-NEXT:    [[FROMBOOL16:%.*]] = zext i1 [[CMP15]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL16]], ptr [[ATMP9]], align 1
// CHK-C-NEXT:    br i1 [[CMP15]], label [[ATOMIC_CONT11]], label [[ATOMIC_EXIT17]]
// CHK-C:       atomic_exit17:
// CHK-C-NEXT:    [[TMP19:%.*]] = load i8, ptr [[ATMP7]], align 1
// CHK-C-NEXT:    [[TMP20:%.*]] = load i8, ptr [[ATMP9]], align 1
// CHK-C-NEXT:    store i8 [[TMP19]], ptr [[V]], align 1
// CHK-C-NEXT:    [[TMP21:%.*]] = load i8, ptr [[D]], align 1
// CHK-C-NEXT:    [[TOBOOL18:%.*]] = trunc i8 [[TMP21]] to i1
// CHK-C-NEXT:    [[TMP22:%.*]] = load i8, ptr [[E]], align 1
// CHK-C-NEXT:    [[TOBOOL19:%.*]] = trunc i8 [[TMP22]] to i1
// CHK-C-NEXT:    [[ATOMIC_LOAD20:%.*]] = load atomic i8, ptr [[X]] monotonic, align 1
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD20]], ptr [[ATMP21]], align 1
// CHK-C-NEXT:    [[TMP23:%.*]] = trunc i8 [[ATOMIC_LOAD20]] to i1
// CHK-C-NEXT:    [[CMP22:%.*]] = icmp eq i1 [[TMP23]], [[TOBOOL19]]
// CHK-C-NEXT:    [[FROMBOOL24:%.*]] = zext i1 [[CMP22]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL24]], ptr [[ATMP23]], align 1
// CHK-C-NEXT:    br i1 [[CMP22]], label [[ATOMIC_CONT25:%.*]], label [[ATOMIC_EXIT32:%.*]]
// CHK-C:       atomic_cont25:
// CHK-C-NEXT:    [[TMP24:%.*]] = phi i8 [ [[ATOMIC_LOAD20]], [[ATOMIC_EXIT17]] ], [ [[TMP27:%.*]], [[ATOMIC_CMP29:%.*]] ]
// CHK-C-NEXT:    [[FROMBOOL27:%.*]] = zext i1 [[TOBOOL18]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL27]], ptr [[ATOMIC_TEMP26]], align 1
// CHK-C-NEXT:    [[TMP25:%.*]] = load i8, ptr [[ATOMIC_TEMP26]], align 1
// CHK-C-NEXT:    [[TMP26:%.*]] = cmpxchg ptr [[X]], i8 [[TMP24]], i8 [[TMP25]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP27]] = extractvalue { i8, i1 } [[TMP26]], 0
// CHK-C-NEXT:    [[TMP28:%.*]] = extractvalue { i8, i1 } [[TMP26]], 1
// CHK-C-NEXT:    br i1 [[TMP28]], label [[ATOMIC_UPD_EXIT28:%.*]], label [[ATOMIC_CMP29]]
// CHK-C:       atomic_upd_exit28:
// CHK-C-NEXT:    [[TMP29:%.*]] = zext i1 [[TOBOOL18]] to i8
// CHK-C-NEXT:    store i8 [[TMP29]], ptr [[ATMP21]], align 1
// CHK-C-NEXT:    br label [[ATOMIC_EXIT32]]
// CHK-C:       atomic_cmp29:
// CHK-C-NEXT:    store i8 [[TMP27]], ptr [[ATMP21]], align 1
// CHK-C-NEXT:    [[TMP30:%.*]] = trunc i8 [[TMP27]] to i1
// CHK-C-NEXT:    [[CMP30:%.*]] = icmp eq i1 [[TMP30]], [[TOBOOL19]]
// CHK-C-NEXT:    [[FROMBOOL31:%.*]] = zext i1 [[CMP30]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL31]], ptr [[ATMP23]], align 1
// CHK-C-NEXT:    br i1 [[CMP30]], label [[ATOMIC_CONT25]], label [[ATOMIC_EXIT32]]
// CHK-C:       atomic_exit32:
// CHK-C-NEXT:    [[TMP31:%.*]] = load i8, ptr [[ATMP21]], align 1
// CHK-C-NEXT:    [[TMP32:%.*]] = load i8, ptr [[ATMP23]], align 1
// CHK-C-NEXT:    [[TMP33:%.*]] = trunc i8 [[TMP32]] to i1
// CHK-C-NEXT:    br i1 [[TMP33]], label [[ATOMIC_CAPTURE_CONT:%.*]], label [[ATOMIC_CAPTURE:%.*]]
// CHK-C:       atomic_capture:
// CHK-C-NEXT:    store i8 [[TMP31]], ptr [[V]], align 1
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT]]
// CHK-C:       atomic_capture_cont:
// CHK-C-NEXT:    [[TMP34:%.*]] = load i8, ptr [[D]], align 1
// CHK-C-NEXT:    [[TOBOOL33:%.*]] = trunc i8 [[TMP34]] to i1
// CHK-C-NEXT:    [[TMP35:%.*]] = load i8, ptr [[E]], align 1
// CHK-C-NEXT:    [[TOBOOL34:%.*]] = trunc i8 [[TMP35]] to i1
// CHK-C-NEXT:    [[ATOMIC_LOAD35:%.*]] = load atomic i8, ptr [[X]] monotonic, align 1
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD35]], ptr [[ATMP36]], align 1
// CHK-C-NEXT:    [[TMP36:%.*]] = trunc i8 [[ATOMIC_LOAD35]] to i1
// CHK-C-NEXT:    [[CMP37:%.*]] = icmp eq i1 [[TMP36]], [[TOBOOL34]]
// CHK-C-NEXT:    [[FROMBOOL39:%.*]] = zext i1 [[CMP37]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL39]], ptr [[ATMP38]], align 1
// CHK-C-NEXT:    br i1 [[CMP37]], label [[ATOMIC_CONT40:%.*]], label [[ATOMIC_EXIT46:%.*]]
// CHK-C:       atomic_cont40:
// CHK-C-NEXT:    [[TMP37:%.*]] = phi i8 [ [[ATOMIC_LOAD35]], [[ATOMIC_CAPTURE_CONT]] ], [ [[TMP40:%.*]], [[ATOMIC_CMP43:%.*]] ]
// CHK-C-NEXT:    [[FROMBOOL42:%.*]] = zext i1 [[TOBOOL33]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL42]], ptr [[ATOMIC_TEMP41]], align 1
// CHK-C-NEXT:    [[TMP38:%.*]] = load i8, ptr [[ATOMIC_TEMP41]], align 1
// CHK-C-NEXT:    [[TMP39:%.*]] = cmpxchg ptr [[X]], i8 [[TMP37]], i8 [[TMP38]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP40]] = extractvalue { i8, i1 } [[TMP39]], 0
// CHK-C-NEXT:    [[TMP41:%.*]] = extractvalue { i8, i1 } [[TMP39]], 1
// CHK-C-NEXT:    br i1 [[TMP41]], label [[ATOMIC_EXIT46]], label [[ATOMIC_CMP43]]
// CHK-C:       atomic_cmp43:
// CHK-C-NEXT:    store i8 [[TMP40]], ptr [[ATMP36]], align 1
// CHK-C-NEXT:    [[TMP42:%.*]] = trunc i8 [[TMP40]] to i1
// CHK-C-NEXT:    [[CMP44:%.*]] = icmp eq i1 [[TMP42]], [[TOBOOL34]]
// CHK-C-NEXT:    [[FROMBOOL45:%.*]] = zext i1 [[CMP44]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL45]], ptr [[ATMP38]], align 1
// CHK-C-NEXT:    br i1 [[CMP44]], label [[ATOMIC_CONT40]], label [[ATOMIC_EXIT46]]
// CHK-C:       atomic_exit46:
// CHK-C-NEXT:    [[TMP43:%.*]] = load i8, ptr [[ATMP36]], align 1
// CHK-C-NEXT:    [[TMP44:%.*]] = load i8, ptr [[ATMP38]], align 1
// CHK-C-NEXT:    store i8 [[TMP44]], ptr [[R]], align 1
// CHK-C-NEXT:    [[TMP45:%.*]] = load i8, ptr [[D]], align 1
// CHK-C-NEXT:    [[TOBOOL47:%.*]] = trunc i8 [[TMP45]] to i1
// CHK-C-NEXT:    [[TMP46:%.*]] = load i8, ptr [[E]], align 1
// CHK-C-NEXT:    [[TOBOOL48:%.*]] = trunc i8 [[TMP46]] to i1
// CHK-C-NEXT:    [[ATOMIC_LOAD49:%.*]] = load atomic i8, ptr [[X]] monotonic, align 1
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD49]], ptr [[ATMP50]], align 1
// CHK-C-NEXT:    [[TMP47:%.*]] = trunc i8 [[ATOMIC_LOAD49]] to i1
// CHK-C-NEXT:    [[CMP51:%.*]] = icmp eq i1 [[TMP47]], [[TOBOOL48]]
// CHK-C-NEXT:    [[FROMBOOL53:%.*]] = zext i1 [[CMP51]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL53]], ptr [[ATMP52]], align 1
// CHK-C-NEXT:    br i1 [[CMP51]], label [[ATOMIC_CONT54:%.*]], label [[ATOMIC_EXIT60:%.*]]
// CHK-C:       atomic_cont54:
// CHK-C-NEXT:    [[TMP48:%.*]] = phi i8 [ [[ATOMIC_LOAD49]], [[ATOMIC_EXIT46]] ], [ [[TMP51:%.*]], [[ATOMIC_CMP57:%.*]] ]
// CHK-C-NEXT:    [[FROMBOOL56:%.*]] = zext i1 [[TOBOOL47]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL56]], ptr [[ATOMIC_TEMP55]], align 1
// CHK-C-NEXT:    [[TMP49:%.*]] = load i8, ptr [[ATOMIC_TEMP55]], align 1
// CHK-C-NEXT:    [[TMP50:%.*]] = cmpxchg ptr [[X]], i8 [[TMP48]], i8 [[TMP49]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP51]] = extractvalue { i8, i1 } [[TMP50]], 0
// CHK-C-NEXT:    [[TMP52:%.*]] = extractvalue { i8, i1 } [[TMP50]], 1
// CHK-C-NEXT:    br i1 [[TMP52]], label [[ATOMIC_EXIT60]], label [[ATOMIC_CMP57]]
// CHK-C:       atomic_cmp57:
// CHK-C-NEXT:    store i8 [[TMP51]], ptr [[ATMP50]], align 1
// CHK-C-NEXT:    [[TMP53:%.*]] = trunc i8 [[TMP51]] to i1
// CHK-C-NEXT:    [[CMP58:%.*]] = icmp eq i1 [[TMP53]], [[TOBOOL48]]
// CHK-C-NEXT:    [[FROMBOOL59:%.*]] = zext i1 [[CMP58]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL59]], ptr [[ATMP52]], align 1
// CHK-C-NEXT:    br i1 [[CMP58]], label [[ATOMIC_CONT54]], label [[ATOMIC_EXIT60]]
// CHK-C:       atomic_exit60:
// CHK-C-NEXT:    [[TMP54:%.*]] = load i8, ptr [[ATMP50]], align 1
// CHK-C-NEXT:    [[TMP55:%.*]] = load i8, ptr [[ATMP52]], align 1
// CHK-C-NEXT:    store i8 [[TMP55]], ptr [[R]], align 1
// CHK-C-NEXT:    [[TMP56:%.*]] = trunc i8 [[TMP55]] to i1
// CHK-C-NEXT:    br i1 [[TMP56]], label [[ATOMIC_CAPTURE_CONT62:%.*]], label [[ATOMIC_CAPTURE61:%.*]]
// CHK-C:       atomic_capture61:
// CHK-C-NEXT:    store i8 [[TMP54]], ptr [[V]], align 1
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT62]]
// CHK-C:       atomic_capture_cont62:
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z9test_boolv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[X:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[V:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[R:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATMP7:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATMP9:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP12:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATMP21:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATMP23:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP26:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATMP36:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATMP38:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP41:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATMP50:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATMP52:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP55:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i8, ptr [[EXPR]], align 1
// CHK-CXX-NEXT:    [[TOBOOL:%.*]] = trunc i8 [[TMP0]] to i1
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i8, ptr [[X]] monotonic, align 1
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD]], ptr [[TMP]], align 1
// CHK-CXX-NEXT:    [[TMP1:%.*]] = trunc i8 [[ATOMIC_LOAD]] to i1
// CHK-CXX-NEXT:    [[CMP:%.*]] = icmp ult i1 [[TMP1]], [[TOBOOL]]
// CHK-CXX-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL]], ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP2:%.*]] = phi i8 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP5:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    [[FROMBOOL2:%.*]] = zext i1 [[TOBOOL]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL2]], ptr [[ATOMIC_TEMP]], align 1
// CHK-CXX-NEXT:    [[TMP3:%.*]] = load i8, ptr [[ATOMIC_TEMP]], align 1
// CHK-CXX-NEXT:    [[TMP4:%.*]] = cmpxchg ptr [[X]], i8 [[TMP2]], i8 [[TMP3]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP5]] = extractvalue { i8, i1 } [[TMP4]], 0
// CHK-CXX-NEXT:    [[TMP6:%.*]] = extractvalue { i8, i1 } [[TMP4]], 1
// CHK-CXX-NEXT:    br i1 [[TMP6]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    store i8 [[TMP5]], ptr [[TMP]], align 1
// CHK-CXX-NEXT:    [[TMP7:%.*]] = trunc i8 [[TMP5]] to i1
// CHK-CXX-NEXT:    [[CMP3:%.*]] = icmp ult i1 [[TMP7]], [[TOBOOL]]
// CHK-CXX-NEXT:    [[FROMBOOL4:%.*]] = zext i1 [[CMP3]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL4]], ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP3]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP8:%.*]] = load i8, ptr [[TMP]], align 1
// CHK-CXX-NEXT:    [[TMP9:%.*]] = load i8, ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    store i8 [[TMP8]], ptr [[V]], align 1
// CHK-CXX-NEXT:    [[TMP10:%.*]] = load i8, ptr [[EXPR]], align 1
// CHK-CXX-NEXT:    [[TOBOOL5:%.*]] = trunc i8 [[TMP10]] to i1
// CHK-CXX-NEXT:    [[ATOMIC_LOAD6:%.*]] = load atomic i8, ptr [[X]] monotonic, align 1
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD6]], ptr [[ATMP7]], align 1
// CHK-CXX-NEXT:    [[TMP11:%.*]] = trunc i8 [[ATOMIC_LOAD6]] to i1
// CHK-CXX-NEXT:    [[CMP8:%.*]] = icmp ult i1 [[TMP11]], [[TOBOOL5]]
// CHK-CXX-NEXT:    [[FROMBOOL10:%.*]] = zext i1 [[CMP8]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL10]], ptr [[ATMP9]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP8]], label [[ATOMIC_CONT11:%.*]], label [[ATOMIC_EXIT17:%.*]]
// CHK-CXX:       atomic_cont11:
// CHK-CXX-NEXT:    [[TMP12:%.*]] = phi i8 [ [[ATOMIC_LOAD6]], [[ATOMIC_EXIT]] ], [ [[TMP15:%.*]], [[ATOMIC_CMP14:%.*]] ]
// CHK-CXX-NEXT:    [[FROMBOOL13:%.*]] = zext i1 [[TOBOOL5]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL13]], ptr [[ATOMIC_TEMP12]], align 1
// CHK-CXX-NEXT:    [[TMP13:%.*]] = load i8, ptr [[ATOMIC_TEMP12]], align 1
// CHK-CXX-NEXT:    [[TMP14:%.*]] = cmpxchg ptr [[X]], i8 [[TMP12]], i8 [[TMP13]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP15]] = extractvalue { i8, i1 } [[TMP14]], 0
// CHK-CXX-NEXT:    [[TMP16:%.*]] = extractvalue { i8, i1 } [[TMP14]], 1
// CHK-CXX-NEXT:    br i1 [[TMP16]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP14]]
// CHK-CXX:       atomic_upd_exit:
// CHK-CXX-NEXT:    [[TMP17:%.*]] = zext i1 [[TOBOOL5]] to i8
// CHK-CXX-NEXT:    store i8 [[TMP17]], ptr [[ATMP7]], align 1
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT17]]
// CHK-CXX:       atomic_cmp14:
// CHK-CXX-NEXT:    store i8 [[TMP15]], ptr [[ATMP7]], align 1
// CHK-CXX-NEXT:    [[TMP18:%.*]] = trunc i8 [[TMP15]] to i1
// CHK-CXX-NEXT:    [[CMP15:%.*]] = icmp ult i1 [[TMP18]], [[TOBOOL5]]
// CHK-CXX-NEXT:    [[FROMBOOL16:%.*]] = zext i1 [[CMP15]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL16]], ptr [[ATMP9]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP15]], label [[ATOMIC_CONT11]], label [[ATOMIC_EXIT17]]
// CHK-CXX:       atomic_exit17:
// CHK-CXX-NEXT:    [[TMP19:%.*]] = load i8, ptr [[ATMP7]], align 1
// CHK-CXX-NEXT:    [[TMP20:%.*]] = load i8, ptr [[ATMP9]], align 1
// CHK-CXX-NEXT:    store i8 [[TMP19]], ptr [[V]], align 1
// CHK-CXX-NEXT:    [[TMP21:%.*]] = load i8, ptr [[D]], align 1
// CHK-CXX-NEXT:    [[TOBOOL18:%.*]] = trunc i8 [[TMP21]] to i1
// CHK-CXX-NEXT:    [[TMP22:%.*]] = load i8, ptr [[E]], align 1
// CHK-CXX-NEXT:    [[TOBOOL19:%.*]] = trunc i8 [[TMP22]] to i1
// CHK-CXX-NEXT:    [[ATOMIC_LOAD20:%.*]] = load atomic i8, ptr [[X]] monotonic, align 1
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD20]], ptr [[ATMP21]], align 1
// CHK-CXX-NEXT:    [[TMP23:%.*]] = trunc i8 [[ATOMIC_LOAD20]] to i1
// CHK-CXX-NEXT:    [[CMP22:%.*]] = icmp eq i1 [[TMP23]], [[TOBOOL19]]
// CHK-CXX-NEXT:    [[FROMBOOL24:%.*]] = zext i1 [[CMP22]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL24]], ptr [[ATMP23]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP22]], label [[ATOMIC_CONT25:%.*]], label [[ATOMIC_EXIT32:%.*]]
// CHK-CXX:       atomic_cont25:
// CHK-CXX-NEXT:    [[TMP24:%.*]] = phi i8 [ [[ATOMIC_LOAD20]], [[ATOMIC_EXIT17]] ], [ [[TMP27:%.*]], [[ATOMIC_CMP29:%.*]] ]
// CHK-CXX-NEXT:    [[FROMBOOL27:%.*]] = zext i1 [[TOBOOL18]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL27]], ptr [[ATOMIC_TEMP26]], align 1
// CHK-CXX-NEXT:    [[TMP25:%.*]] = load i8, ptr [[ATOMIC_TEMP26]], align 1
// CHK-CXX-NEXT:    [[TMP26:%.*]] = cmpxchg ptr [[X]], i8 [[TMP24]], i8 [[TMP25]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP27]] = extractvalue { i8, i1 } [[TMP26]], 0
// CHK-CXX-NEXT:    [[TMP28:%.*]] = extractvalue { i8, i1 } [[TMP26]], 1
// CHK-CXX-NEXT:    br i1 [[TMP28]], label [[ATOMIC_UPD_EXIT28:%.*]], label [[ATOMIC_CMP29]]
// CHK-CXX:       atomic_upd_exit28:
// CHK-CXX-NEXT:    [[TMP29:%.*]] = zext i1 [[TOBOOL18]] to i8
// CHK-CXX-NEXT:    store i8 [[TMP29]], ptr [[ATMP21]], align 1
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT32]]
// CHK-CXX:       atomic_cmp29:
// CHK-CXX-NEXT:    store i8 [[TMP27]], ptr [[ATMP21]], align 1
// CHK-CXX-NEXT:    [[TMP30:%.*]] = trunc i8 [[TMP27]] to i1
// CHK-CXX-NEXT:    [[CMP30:%.*]] = icmp eq i1 [[TMP30]], [[TOBOOL19]]
// CHK-CXX-NEXT:    [[FROMBOOL31:%.*]] = zext i1 [[CMP30]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL31]], ptr [[ATMP23]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP30]], label [[ATOMIC_CONT25]], label [[ATOMIC_EXIT32]]
// CHK-CXX:       atomic_exit32:
// CHK-CXX-NEXT:    [[TMP31:%.*]] = load i8, ptr [[ATMP21]], align 1
// CHK-CXX-NEXT:    [[TMP32:%.*]] = load i8, ptr [[ATMP23]], align 1
// CHK-CXX-NEXT:    [[TMP33:%.*]] = trunc i8 [[TMP32]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP33]], label [[ATOMIC_CAPTURE_CONT:%.*]], label [[ATOMIC_CAPTURE:%.*]]
// CHK-CXX:       atomic_capture:
// CHK-CXX-NEXT:    store i8 [[TMP31]], ptr [[V]], align 1
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT]]
// CHK-CXX:       atomic_capture_cont:
// CHK-CXX-NEXT:    [[TMP34:%.*]] = load i8, ptr [[D]], align 1
// CHK-CXX-NEXT:    [[TOBOOL33:%.*]] = trunc i8 [[TMP34]] to i1
// CHK-CXX-NEXT:    [[TMP35:%.*]] = load i8, ptr [[E]], align 1
// CHK-CXX-NEXT:    [[TOBOOL34:%.*]] = trunc i8 [[TMP35]] to i1
// CHK-CXX-NEXT:    [[ATOMIC_LOAD35:%.*]] = load atomic i8, ptr [[X]] monotonic, align 1
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD35]], ptr [[ATMP36]], align 1
// CHK-CXX-NEXT:    [[TMP36:%.*]] = trunc i8 [[ATOMIC_LOAD35]] to i1
// CHK-CXX-NEXT:    [[CMP37:%.*]] = icmp eq i1 [[TMP36]], [[TOBOOL34]]
// CHK-CXX-NEXT:    [[FROMBOOL39:%.*]] = zext i1 [[CMP37]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL39]], ptr [[ATMP38]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP37]], label [[ATOMIC_CONT40:%.*]], label [[ATOMIC_EXIT46:%.*]]
// CHK-CXX:       atomic_cont40:
// CHK-CXX-NEXT:    [[TMP37:%.*]] = phi i8 [ [[ATOMIC_LOAD35]], [[ATOMIC_CAPTURE_CONT]] ], [ [[TMP40:%.*]], [[ATOMIC_CMP43:%.*]] ]
// CHK-CXX-NEXT:    [[FROMBOOL42:%.*]] = zext i1 [[TOBOOL33]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL42]], ptr [[ATOMIC_TEMP41]], align 1
// CHK-CXX-NEXT:    [[TMP38:%.*]] = load i8, ptr [[ATOMIC_TEMP41]], align 1
// CHK-CXX-NEXT:    [[TMP39:%.*]] = cmpxchg ptr [[X]], i8 [[TMP37]], i8 [[TMP38]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP40]] = extractvalue { i8, i1 } [[TMP39]], 0
// CHK-CXX-NEXT:    [[TMP41:%.*]] = extractvalue { i8, i1 } [[TMP39]], 1
// CHK-CXX-NEXT:    br i1 [[TMP41]], label [[ATOMIC_EXIT46]], label [[ATOMIC_CMP43]]
// CHK-CXX:       atomic_cmp43:
// CHK-CXX-NEXT:    store i8 [[TMP40]], ptr [[ATMP36]], align 1
// CHK-CXX-NEXT:    [[TMP42:%.*]] = trunc i8 [[TMP40]] to i1
// CHK-CXX-NEXT:    [[CMP44:%.*]] = icmp eq i1 [[TMP42]], [[TOBOOL34]]
// CHK-CXX-NEXT:    [[FROMBOOL45:%.*]] = zext i1 [[CMP44]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL45]], ptr [[ATMP38]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP44]], label [[ATOMIC_CONT40]], label [[ATOMIC_EXIT46]]
// CHK-CXX:       atomic_exit46:
// CHK-CXX-NEXT:    [[TMP43:%.*]] = load i8, ptr [[ATMP36]], align 1
// CHK-CXX-NEXT:    [[TMP44:%.*]] = load i8, ptr [[ATMP38]], align 1
// CHK-CXX-NEXT:    store i8 [[TMP44]], ptr [[R]], align 1
// CHK-CXX-NEXT:    [[TMP45:%.*]] = load i8, ptr [[D]], align 1
// CHK-CXX-NEXT:    [[TOBOOL47:%.*]] = trunc i8 [[TMP45]] to i1
// CHK-CXX-NEXT:    [[TMP46:%.*]] = load i8, ptr [[E]], align 1
// CHK-CXX-NEXT:    [[TOBOOL48:%.*]] = trunc i8 [[TMP46]] to i1
// CHK-CXX-NEXT:    [[ATOMIC_LOAD49:%.*]] = load atomic i8, ptr [[X]] monotonic, align 1
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD49]], ptr [[ATMP50]], align 1
// CHK-CXX-NEXT:    [[TMP47:%.*]] = trunc i8 [[ATOMIC_LOAD49]] to i1
// CHK-CXX-NEXT:    [[CMP51:%.*]] = icmp eq i1 [[TMP47]], [[TOBOOL48]]
// CHK-CXX-NEXT:    [[FROMBOOL53:%.*]] = zext i1 [[CMP51]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL53]], ptr [[ATMP52]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP51]], label [[ATOMIC_CONT54:%.*]], label [[ATOMIC_EXIT60:%.*]]
// CHK-CXX:       atomic_cont54:
// CHK-CXX-NEXT:    [[TMP48:%.*]] = phi i8 [ [[ATOMIC_LOAD49]], [[ATOMIC_EXIT46]] ], [ [[TMP51:%.*]], [[ATOMIC_CMP57:%.*]] ]
// CHK-CXX-NEXT:    [[FROMBOOL56:%.*]] = zext i1 [[TOBOOL47]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL56]], ptr [[ATOMIC_TEMP55]], align 1
// CHK-CXX-NEXT:    [[TMP49:%.*]] = load i8, ptr [[ATOMIC_TEMP55]], align 1
// CHK-CXX-NEXT:    [[TMP50:%.*]] = cmpxchg ptr [[X]], i8 [[TMP48]], i8 [[TMP49]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP51]] = extractvalue { i8, i1 } [[TMP50]], 0
// CHK-CXX-NEXT:    [[TMP52:%.*]] = extractvalue { i8, i1 } [[TMP50]], 1
// CHK-CXX-NEXT:    br i1 [[TMP52]], label [[ATOMIC_EXIT60]], label [[ATOMIC_CMP57]]
// CHK-CXX:       atomic_cmp57:
// CHK-CXX-NEXT:    store i8 [[TMP51]], ptr [[ATMP50]], align 1
// CHK-CXX-NEXT:    [[TMP53:%.*]] = trunc i8 [[TMP51]] to i1
// CHK-CXX-NEXT:    [[CMP58:%.*]] = icmp eq i1 [[TMP53]], [[TOBOOL48]]
// CHK-CXX-NEXT:    [[FROMBOOL59:%.*]] = zext i1 [[CMP58]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL59]], ptr [[ATMP52]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP58]], label [[ATOMIC_CONT54]], label [[ATOMIC_EXIT60]]
// CHK-CXX:       atomic_exit60:
// CHK-CXX-NEXT:    [[TMP54:%.*]] = load i8, ptr [[ATMP50]], align 1
// CHK-CXX-NEXT:    [[TMP55:%.*]] = load i8, ptr [[ATMP52]], align 1
// CHK-CXX-NEXT:    store i8 [[TMP55]], ptr [[R]], align 1
// CHK-CXX-NEXT:    [[TMP56:%.*]] = trunc i8 [[TMP55]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP56]], label [[ATOMIC_CAPTURE_CONT62:%.*]], label [[ATOMIC_CAPTURE61:%.*]]
// CHK-CXX:       atomic_capture61:
// CHK-CXX-NEXT:    store i8 [[TMP54]], ptr [[V]], align 1
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT62]]
// CHK-CXX:       atomic_capture_cont62:
// CHK-CXX-NEXT:    ret void
//
void test_bool() {
#ifdef __cplusplus
  bool x, expr, d, e, v, r;
#else
  _Bool x, expr, d, e, v, r;
#endif

  #pragma omp atomic compare capture
  { v = x; if (x < expr) { x = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (x < expr) { x = expr; } v = x; } // MAX

  #pragma omp atomic compare capture
  if (x == e) { x = d; } else { v = x; }

  #pragma omp atomic compare capture
  { r = x == e; if(r) { x = d; } }

  #pragma omp atomic compare capture
  { r = x == e; if(r) { x = d; } else { v = x; } }
}

// CHK-C-LABEL: @test_long_long(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[X:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[D:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[E:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[V:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[R:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[TMP:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP5:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP7:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP10:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP16:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP18:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP21:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP28:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP30:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP33:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP39:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP41:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP44:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[TMP0:%.*]] = load i64, ptr [[EXPR]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD]], ptr [[TMP]], align 8
// CHK-C-NEXT:    [[CMP:%.*]] = icmp slt i64 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-C-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL]], ptr [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP1:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP0]], ptr [[ATOMIC_TEMP]], align 8
// CHK-C-NEXT:    [[TMP2:%.*]] = load i64, ptr [[ATOMIC_TEMP]], align 8
// CHK-C-NEXT:    [[TMP3:%.*]] = cmpxchg ptr [[X]], i64 [[TMP1]], i64 [[TMP2]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP4]] = extractvalue { i64, i1 } [[TMP3]], 0
// CHK-C-NEXT:    [[TMP5:%.*]] = extractvalue { i64, i1 } [[TMP3]], 1
// CHK-C-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    store i64 [[TMP4]], ptr [[TMP]], align 8
// CHK-C-NEXT:    [[CMP2:%.*]] = icmp slt i64 [[TMP4]], [[TMP0]]
// CHK-C-NEXT:    [[FROMBOOL3:%.*]] = zext i1 [[CMP2]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL3]], ptr [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP2]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP6:%.*]] = load i64, ptr [[TMP]], align 8
// CHK-C-NEXT:    [[TMP7:%.*]] = load i8, ptr [[ATMP1]], align 1
// CHK-C-NEXT:    store i64 [[TMP6]], ptr [[V]], align 8
// CHK-C-NEXT:    [[TMP8:%.*]] = load i64, ptr [[EXPR]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD4:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD4]], ptr [[ATMP5]], align 8
// CHK-C-NEXT:    [[CMP6:%.*]] = icmp slt i64 [[ATOMIC_LOAD4]], [[TMP8]]
// CHK-C-NEXT:    [[FROMBOOL8:%.*]] = zext i1 [[CMP6]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL8]], ptr [[ATMP7]], align 1
// CHK-C-NEXT:    br i1 [[CMP6]], label [[ATOMIC_CONT9:%.*]], label [[ATOMIC_EXIT14:%.*]]
// CHK-C:       atomic_cont9:
// CHK-C-NEXT:    [[TMP9:%.*]] = phi i64 [ [[ATOMIC_LOAD4]], [[ATOMIC_EXIT]] ], [ [[TMP12:%.*]], [[ATOMIC_CMP11:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP8]], ptr [[ATOMIC_TEMP10]], align 8
// CHK-C-NEXT:    [[TMP10:%.*]] = load i64, ptr [[ATOMIC_TEMP10]], align 8
// CHK-C-NEXT:    [[TMP11:%.*]] = cmpxchg ptr [[X]], i64 [[TMP9]], i64 [[TMP10]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP12]] = extractvalue { i64, i1 } [[TMP11]], 0
// CHK-C-NEXT:    [[TMP13:%.*]] = extractvalue { i64, i1 } [[TMP11]], 1
// CHK-C-NEXT:    br i1 [[TMP13]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP11]]
// CHK-C:       atomic_upd_exit:
// CHK-C-NEXT:    store i64 [[TMP8]], ptr [[ATMP5]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_EXIT14]]
// CHK-C:       atomic_cmp11:
// CHK-C-NEXT:    store i64 [[TMP12]], ptr [[ATMP5]], align 8
// CHK-C-NEXT:    [[CMP12:%.*]] = icmp slt i64 [[TMP12]], [[TMP8]]
// CHK-C-NEXT:    [[FROMBOOL13:%.*]] = zext i1 [[CMP12]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL13]], ptr [[ATMP7]], align 1
// CHK-C-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT9]], label [[ATOMIC_EXIT14]]
// CHK-C:       atomic_exit14:
// CHK-C-NEXT:    [[TMP14:%.*]] = load i64, ptr [[ATMP5]], align 8
// CHK-C-NEXT:    [[TMP15:%.*]] = load i8, ptr [[ATMP7]], align 1
// CHK-C-NEXT:    store i64 [[TMP14]], ptr [[V]], align 8
// CHK-C-NEXT:    [[TMP16:%.*]] = load i64, ptr [[D]], align 8
// CHK-C-NEXT:    [[TMP17:%.*]] = load i64, ptr [[E]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD15:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD15]], ptr [[ATMP16]], align 8
// CHK-C-NEXT:    [[CMP17:%.*]] = icmp eq i64 [[ATOMIC_LOAD15]], [[TMP17]]
// CHK-C-NEXT:    [[FROMBOOL19:%.*]] = zext i1 [[CMP17]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL19]], ptr [[ATMP18]], align 1
// CHK-C-NEXT:    br i1 [[CMP17]], label [[ATOMIC_CONT20:%.*]], label [[ATOMIC_EXIT26:%.*]]
// CHK-C:       atomic_cont20:
// CHK-C-NEXT:    [[TMP18:%.*]] = phi i64 [ [[ATOMIC_LOAD15]], [[ATOMIC_EXIT14]] ], [ [[TMP21:%.*]], [[ATOMIC_CMP23:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP16]], ptr [[ATOMIC_TEMP21]], align 8
// CHK-C-NEXT:    [[TMP19:%.*]] = load i64, ptr [[ATOMIC_TEMP21]], align 8
// CHK-C-NEXT:    [[TMP20:%.*]] = cmpxchg ptr [[X]], i64 [[TMP18]], i64 [[TMP19]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP21]] = extractvalue { i64, i1 } [[TMP20]], 0
// CHK-C-NEXT:    [[TMP22:%.*]] = extractvalue { i64, i1 } [[TMP20]], 1
// CHK-C-NEXT:    br i1 [[TMP22]], label [[ATOMIC_UPD_EXIT22:%.*]], label [[ATOMIC_CMP23]]
// CHK-C:       atomic_upd_exit22:
// CHK-C-NEXT:    store i64 [[TMP16]], ptr [[ATMP16]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_EXIT26]]
// CHK-C:       atomic_cmp23:
// CHK-C-NEXT:    store i64 [[TMP21]], ptr [[ATMP16]], align 8
// CHK-C-NEXT:    [[CMP24:%.*]] = icmp eq i64 [[TMP21]], [[TMP17]]
// CHK-C-NEXT:    [[FROMBOOL25:%.*]] = zext i1 [[CMP24]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL25]], ptr [[ATMP18]], align 1
// CHK-C-NEXT:    br i1 [[CMP24]], label [[ATOMIC_CONT20]], label [[ATOMIC_EXIT26]]
// CHK-C:       atomic_exit26:
// CHK-C-NEXT:    [[TMP23:%.*]] = load i64, ptr [[ATMP16]], align 8
// CHK-C-NEXT:    [[TMP24:%.*]] = load i8, ptr [[ATMP18]], align 1
// CHK-C-NEXT:    [[TMP25:%.*]] = trunc i8 [[TMP24]] to i1
// CHK-C-NEXT:    br i1 [[TMP25]], label [[ATOMIC_CAPTURE_CONT:%.*]], label [[ATOMIC_CAPTURE:%.*]]
// CHK-C:       atomic_capture:
// CHK-C-NEXT:    store i64 [[TMP23]], ptr [[V]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT]]
// CHK-C:       atomic_capture_cont:
// CHK-C-NEXT:    [[TMP26:%.*]] = load i64, ptr [[D]], align 8
// CHK-C-NEXT:    [[TMP27:%.*]] = load i64, ptr [[E]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD27:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD27]], ptr [[ATMP28]], align 8
// CHK-C-NEXT:    [[CMP29:%.*]] = icmp eq i64 [[ATOMIC_LOAD27]], [[TMP27]]
// CHK-C-NEXT:    [[FROMBOOL31:%.*]] = zext i1 [[CMP29]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL31]], ptr [[ATMP30]], align 1
// CHK-C-NEXT:    br i1 [[CMP29]], label [[ATOMIC_CONT32:%.*]], label [[ATOMIC_EXIT37:%.*]]
// CHK-C:       atomic_cont32:
// CHK-C-NEXT:    [[TMP28:%.*]] = phi i64 [ [[ATOMIC_LOAD27]], [[ATOMIC_CAPTURE_CONT]] ], [ [[TMP31:%.*]], [[ATOMIC_CMP34:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP26]], ptr [[ATOMIC_TEMP33]], align 8
// CHK-C-NEXT:    [[TMP29:%.*]] = load i64, ptr [[ATOMIC_TEMP33]], align 8
// CHK-C-NEXT:    [[TMP30:%.*]] = cmpxchg ptr [[X]], i64 [[TMP28]], i64 [[TMP29]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP31]] = extractvalue { i64, i1 } [[TMP30]], 0
// CHK-C-NEXT:    [[TMP32:%.*]] = extractvalue { i64, i1 } [[TMP30]], 1
// CHK-C-NEXT:    br i1 [[TMP32]], label [[ATOMIC_EXIT37]], label [[ATOMIC_CMP34]]
// CHK-C:       atomic_cmp34:
// CHK-C-NEXT:    store i64 [[TMP31]], ptr [[ATMP28]], align 8
// CHK-C-NEXT:    [[CMP35:%.*]] = icmp eq i64 [[TMP31]], [[TMP27]]
// CHK-C-NEXT:    [[FROMBOOL36:%.*]] = zext i1 [[CMP35]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL36]], ptr [[ATMP30]], align 1
// CHK-C-NEXT:    br i1 [[CMP35]], label [[ATOMIC_CONT32]], label [[ATOMIC_EXIT37]]
// CHK-C:       atomic_exit37:
// CHK-C-NEXT:    [[TMP33:%.*]] = load i64, ptr [[ATMP28]], align 8
// CHK-C-NEXT:    [[TMP34:%.*]] = load i8, ptr [[ATMP30]], align 1
// CHK-C-NEXT:    [[CONV:%.*]] = zext i8 [[TMP34]] to i64
// CHK-C-NEXT:    store i64 [[CONV]], ptr [[R]], align 8
// CHK-C-NEXT:    [[TMP35:%.*]] = load i64, ptr [[D]], align 8
// CHK-C-NEXT:    [[TMP36:%.*]] = load i64, ptr [[E]], align 8
// CHK-C-NEXT:    [[ATOMIC_LOAD38:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD38]], ptr [[ATMP39]], align 8
// CHK-C-NEXT:    [[CMP40:%.*]] = icmp eq i64 [[ATOMIC_LOAD38]], [[TMP36]]
// CHK-C-NEXT:    [[FROMBOOL42:%.*]] = zext i1 [[CMP40]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL42]], ptr [[ATMP41]], align 1
// CHK-C-NEXT:    br i1 [[CMP40]], label [[ATOMIC_CONT43:%.*]], label [[ATOMIC_EXIT48:%.*]]
// CHK-C:       atomic_cont43:
// CHK-C-NEXT:    [[TMP37:%.*]] = phi i64 [ [[ATOMIC_LOAD38]], [[ATOMIC_EXIT37]] ], [ [[TMP40:%.*]], [[ATOMIC_CMP45:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP35]], ptr [[ATOMIC_TEMP44]], align 8
// CHK-C-NEXT:    [[TMP38:%.*]] = load i64, ptr [[ATOMIC_TEMP44]], align 8
// CHK-C-NEXT:    [[TMP39:%.*]] = cmpxchg ptr [[X]], i64 [[TMP37]], i64 [[TMP38]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP40]] = extractvalue { i64, i1 } [[TMP39]], 0
// CHK-C-NEXT:    [[TMP41:%.*]] = extractvalue { i64, i1 } [[TMP39]], 1
// CHK-C-NEXT:    br i1 [[TMP41]], label [[ATOMIC_EXIT48]], label [[ATOMIC_CMP45]]
// CHK-C:       atomic_cmp45:
// CHK-C-NEXT:    store i64 [[TMP40]], ptr [[ATMP39]], align 8
// CHK-C-NEXT:    [[CMP46:%.*]] = icmp eq i64 [[TMP40]], [[TMP36]]
// CHK-C-NEXT:    [[FROMBOOL47:%.*]] = zext i1 [[CMP46]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL47]], ptr [[ATMP41]], align 1
// CHK-C-NEXT:    br i1 [[CMP46]], label [[ATOMIC_CONT43]], label [[ATOMIC_EXIT48]]
// CHK-C:       atomic_exit48:
// CHK-C-NEXT:    [[TMP42:%.*]] = load i64, ptr [[ATMP39]], align 8
// CHK-C-NEXT:    [[TMP43:%.*]] = load i8, ptr [[ATMP41]], align 1
// CHK-C-NEXT:    [[CONV49:%.*]] = zext i8 [[TMP43]] to i64
// CHK-C-NEXT:    store i64 [[CONV49]], ptr [[R]], align 8
// CHK-C-NEXT:    [[TMP44:%.*]] = trunc i8 [[TMP43]] to i1
// CHK-C-NEXT:    br i1 [[TMP44]], label [[ATOMIC_CAPTURE_CONT51:%.*]], label [[ATOMIC_CAPTURE50:%.*]]
// CHK-C:       atomic_capture50:
// CHK-C-NEXT:    store i64 [[TMP42]], ptr [[V]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT51]]
// CHK-C:       atomic_capture_cont51:
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z14test_long_longv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[X:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[V:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[R:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP5:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP7:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP10:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP16:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP18:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP21:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP28:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP30:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP33:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP39:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP41:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP44:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i64, ptr [[EXPR]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD]], ptr [[TMP]], align 8
// CHK-CXX-NEXT:    [[CMP:%.*]] = icmp slt i64 [[ATOMIC_LOAD]], [[TMP0]]
// CHK-CXX-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL]], ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP1:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP0]], ptr [[ATOMIC_TEMP]], align 8
// CHK-CXX-NEXT:    [[TMP2:%.*]] = load i64, ptr [[ATOMIC_TEMP]], align 8
// CHK-CXX-NEXT:    [[TMP3:%.*]] = cmpxchg ptr [[X]], i64 [[TMP1]], i64 [[TMP2]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP4]] = extractvalue { i64, i1 } [[TMP3]], 0
// CHK-CXX-NEXT:    [[TMP5:%.*]] = extractvalue { i64, i1 } [[TMP3]], 1
// CHK-CXX-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    store i64 [[TMP4]], ptr [[TMP]], align 8
// CHK-CXX-NEXT:    [[CMP2:%.*]] = icmp slt i64 [[TMP4]], [[TMP0]]
// CHK-CXX-NEXT:    [[FROMBOOL3:%.*]] = zext i1 [[CMP2]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL3]], ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP2]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP6:%.*]] = load i64, ptr [[TMP]], align 8
// CHK-CXX-NEXT:    [[TMP7:%.*]] = load i8, ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    store i64 [[TMP6]], ptr [[V]], align 8
// CHK-CXX-NEXT:    [[TMP8:%.*]] = load i64, ptr [[EXPR]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD4:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD4]], ptr [[ATMP5]], align 8
// CHK-CXX-NEXT:    [[CMP6:%.*]] = icmp slt i64 [[ATOMIC_LOAD4]], [[TMP8]]
// CHK-CXX-NEXT:    [[FROMBOOL8:%.*]] = zext i1 [[CMP6]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL8]], ptr [[ATMP7]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP6]], label [[ATOMIC_CONT9:%.*]], label [[ATOMIC_EXIT14:%.*]]
// CHK-CXX:       atomic_cont9:
// CHK-CXX-NEXT:    [[TMP9:%.*]] = phi i64 [ [[ATOMIC_LOAD4]], [[ATOMIC_EXIT]] ], [ [[TMP12:%.*]], [[ATOMIC_CMP11:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP8]], ptr [[ATOMIC_TEMP10]], align 8
// CHK-CXX-NEXT:    [[TMP10:%.*]] = load i64, ptr [[ATOMIC_TEMP10]], align 8
// CHK-CXX-NEXT:    [[TMP11:%.*]] = cmpxchg ptr [[X]], i64 [[TMP9]], i64 [[TMP10]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP12]] = extractvalue { i64, i1 } [[TMP11]], 0
// CHK-CXX-NEXT:    [[TMP13:%.*]] = extractvalue { i64, i1 } [[TMP11]], 1
// CHK-CXX-NEXT:    br i1 [[TMP13]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP11]]
// CHK-CXX:       atomic_upd_exit:
// CHK-CXX-NEXT:    store i64 [[TMP8]], ptr [[ATMP5]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT14]]
// CHK-CXX:       atomic_cmp11:
// CHK-CXX-NEXT:    store i64 [[TMP12]], ptr [[ATMP5]], align 8
// CHK-CXX-NEXT:    [[CMP12:%.*]] = icmp slt i64 [[TMP12]], [[TMP8]]
// CHK-CXX-NEXT:    [[FROMBOOL13:%.*]] = zext i1 [[CMP12]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL13]], ptr [[ATMP7]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP12]], label [[ATOMIC_CONT9]], label [[ATOMIC_EXIT14]]
// CHK-CXX:       atomic_exit14:
// CHK-CXX-NEXT:    [[TMP14:%.*]] = load i64, ptr [[ATMP5]], align 8
// CHK-CXX-NEXT:    [[TMP15:%.*]] = load i8, ptr [[ATMP7]], align 1
// CHK-CXX-NEXT:    store i64 [[TMP14]], ptr [[V]], align 8
// CHK-CXX-NEXT:    [[TMP16:%.*]] = load i64, ptr [[D]], align 8
// CHK-CXX-NEXT:    [[TMP17:%.*]] = load i64, ptr [[E]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD15:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD15]], ptr [[ATMP16]], align 8
// CHK-CXX-NEXT:    [[CMP17:%.*]] = icmp eq i64 [[ATOMIC_LOAD15]], [[TMP17]]
// CHK-CXX-NEXT:    [[FROMBOOL19:%.*]] = zext i1 [[CMP17]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL19]], ptr [[ATMP18]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP17]], label [[ATOMIC_CONT20:%.*]], label [[ATOMIC_EXIT26:%.*]]
// CHK-CXX:       atomic_cont20:
// CHK-CXX-NEXT:    [[TMP18:%.*]] = phi i64 [ [[ATOMIC_LOAD15]], [[ATOMIC_EXIT14]] ], [ [[TMP21:%.*]], [[ATOMIC_CMP23:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP16]], ptr [[ATOMIC_TEMP21]], align 8
// CHK-CXX-NEXT:    [[TMP19:%.*]] = load i64, ptr [[ATOMIC_TEMP21]], align 8
// CHK-CXX-NEXT:    [[TMP20:%.*]] = cmpxchg ptr [[X]], i64 [[TMP18]], i64 [[TMP19]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP21]] = extractvalue { i64, i1 } [[TMP20]], 0
// CHK-CXX-NEXT:    [[TMP22:%.*]] = extractvalue { i64, i1 } [[TMP20]], 1
// CHK-CXX-NEXT:    br i1 [[TMP22]], label [[ATOMIC_UPD_EXIT22:%.*]], label [[ATOMIC_CMP23]]
// CHK-CXX:       atomic_upd_exit22:
// CHK-CXX-NEXT:    store i64 [[TMP16]], ptr [[ATMP16]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT26]]
// CHK-CXX:       atomic_cmp23:
// CHK-CXX-NEXT:    store i64 [[TMP21]], ptr [[ATMP16]], align 8
// CHK-CXX-NEXT:    [[CMP24:%.*]] = icmp eq i64 [[TMP21]], [[TMP17]]
// CHK-CXX-NEXT:    [[FROMBOOL25:%.*]] = zext i1 [[CMP24]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL25]], ptr [[ATMP18]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP24]], label [[ATOMIC_CONT20]], label [[ATOMIC_EXIT26]]
// CHK-CXX:       atomic_exit26:
// CHK-CXX-NEXT:    [[TMP23:%.*]] = load i64, ptr [[ATMP16]], align 8
// CHK-CXX-NEXT:    [[TMP24:%.*]] = load i8, ptr [[ATMP18]], align 1
// CHK-CXX-NEXT:    [[TMP25:%.*]] = trunc i8 [[TMP24]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP25]], label [[ATOMIC_CAPTURE_CONT:%.*]], label [[ATOMIC_CAPTURE:%.*]]
// CHK-CXX:       atomic_capture:
// CHK-CXX-NEXT:    store i64 [[TMP23]], ptr [[V]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT]]
// CHK-CXX:       atomic_capture_cont:
// CHK-CXX-NEXT:    [[TMP26:%.*]] = load i64, ptr [[D]], align 8
// CHK-CXX-NEXT:    [[TMP27:%.*]] = load i64, ptr [[E]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD27:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD27]], ptr [[ATMP28]], align 8
// CHK-CXX-NEXT:    [[CMP29:%.*]] = icmp eq i64 [[ATOMIC_LOAD27]], [[TMP27]]
// CHK-CXX-NEXT:    [[FROMBOOL31:%.*]] = zext i1 [[CMP29]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL31]], ptr [[ATMP30]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP29]], label [[ATOMIC_CONT32:%.*]], label [[ATOMIC_EXIT37:%.*]]
// CHK-CXX:       atomic_cont32:
// CHK-CXX-NEXT:    [[TMP28:%.*]] = phi i64 [ [[ATOMIC_LOAD27]], [[ATOMIC_CAPTURE_CONT]] ], [ [[TMP31:%.*]], [[ATOMIC_CMP34:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP26]], ptr [[ATOMIC_TEMP33]], align 8
// CHK-CXX-NEXT:    [[TMP29:%.*]] = load i64, ptr [[ATOMIC_TEMP33]], align 8
// CHK-CXX-NEXT:    [[TMP30:%.*]] = cmpxchg ptr [[X]], i64 [[TMP28]], i64 [[TMP29]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP31]] = extractvalue { i64, i1 } [[TMP30]], 0
// CHK-CXX-NEXT:    [[TMP32:%.*]] = extractvalue { i64, i1 } [[TMP30]], 1
// CHK-CXX-NEXT:    br i1 [[TMP32]], label [[ATOMIC_EXIT37]], label [[ATOMIC_CMP34]]
// CHK-CXX:       atomic_cmp34:
// CHK-CXX-NEXT:    store i64 [[TMP31]], ptr [[ATMP28]], align 8
// CHK-CXX-NEXT:    [[CMP35:%.*]] = icmp eq i64 [[TMP31]], [[TMP27]]
// CHK-CXX-NEXT:    [[FROMBOOL36:%.*]] = zext i1 [[CMP35]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL36]], ptr [[ATMP30]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP35]], label [[ATOMIC_CONT32]], label [[ATOMIC_EXIT37]]
// CHK-CXX:       atomic_exit37:
// CHK-CXX-NEXT:    [[TMP33:%.*]] = load i64, ptr [[ATMP28]], align 8
// CHK-CXX-NEXT:    [[TMP34:%.*]] = load i8, ptr [[ATMP30]], align 1
// CHK-CXX-NEXT:    [[CONV:%.*]] = zext i8 [[TMP34]] to i64
// CHK-CXX-NEXT:    store i64 [[CONV]], ptr [[R]], align 8
// CHK-CXX-NEXT:    [[TMP35:%.*]] = load i64, ptr [[D]], align 8
// CHK-CXX-NEXT:    [[TMP36:%.*]] = load i64, ptr [[E]], align 8
// CHK-CXX-NEXT:    [[ATOMIC_LOAD38:%.*]] = load atomic i64, ptr [[X]] monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD38]], ptr [[ATMP39]], align 8
// CHK-CXX-NEXT:    [[CMP40:%.*]] = icmp eq i64 [[ATOMIC_LOAD38]], [[TMP36]]
// CHK-CXX-NEXT:    [[FROMBOOL42:%.*]] = zext i1 [[CMP40]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL42]], ptr [[ATMP41]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP40]], label [[ATOMIC_CONT43:%.*]], label [[ATOMIC_EXIT48:%.*]]
// CHK-CXX:       atomic_cont43:
// CHK-CXX-NEXT:    [[TMP37:%.*]] = phi i64 [ [[ATOMIC_LOAD38]], [[ATOMIC_EXIT37]] ], [ [[TMP40:%.*]], [[ATOMIC_CMP45:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP35]], ptr [[ATOMIC_TEMP44]], align 8
// CHK-CXX-NEXT:    [[TMP38:%.*]] = load i64, ptr [[ATOMIC_TEMP44]], align 8
// CHK-CXX-NEXT:    [[TMP39:%.*]] = cmpxchg ptr [[X]], i64 [[TMP37]], i64 [[TMP38]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP40]] = extractvalue { i64, i1 } [[TMP39]], 0
// CHK-CXX-NEXT:    [[TMP41:%.*]] = extractvalue { i64, i1 } [[TMP39]], 1
// CHK-CXX-NEXT:    br i1 [[TMP41]], label [[ATOMIC_EXIT48]], label [[ATOMIC_CMP45]]
// CHK-CXX:       atomic_cmp45:
// CHK-CXX-NEXT:    store i64 [[TMP40]], ptr [[ATMP39]], align 8
// CHK-CXX-NEXT:    [[CMP46:%.*]] = icmp eq i64 [[TMP40]], [[TMP36]]
// CHK-CXX-NEXT:    [[FROMBOOL47:%.*]] = zext i1 [[CMP46]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL47]], ptr [[ATMP41]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP46]], label [[ATOMIC_CONT43]], label [[ATOMIC_EXIT48]]
// CHK-CXX:       atomic_exit48:
// CHK-CXX-NEXT:    [[TMP42:%.*]] = load i64, ptr [[ATMP39]], align 8
// CHK-CXX-NEXT:    [[TMP43:%.*]] = load i8, ptr [[ATMP41]], align 1
// CHK-CXX-NEXT:    [[CONV49:%.*]] = zext i8 [[TMP43]] to i64
// CHK-CXX-NEXT:    store i64 [[CONV49]], ptr [[R]], align 8
// CHK-CXX-NEXT:    [[TMP44:%.*]] = trunc i8 [[TMP43]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP44]], label [[ATOMIC_CAPTURE_CONT51:%.*]], label [[ATOMIC_CAPTURE50:%.*]]
// CHK-CXX:       atomic_capture50:
// CHK-CXX-NEXT:    store i64 [[TMP42]], ptr [[V]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT51]]
// CHK-CXX:       atomic_capture_cont51:
// CHK-CXX-NEXT:    ret void
//
void test_long_long() {
  long long x, expr, d, e, v, r;

  #pragma omp atomic compare capture
  { v = x; if (x < expr) { x = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (x < expr) { x = expr; } v = x; } // MAX

  #pragma omp atomic compare capture
  if (x == e) { x = d; } else { v = x; }

  #pragma omp atomic compare capture
  { r = x == e; if(r) { x = d; } }

  #pragma omp atomic compare capture
  { r = x == e; if(r) { x = d; } else { v = x; } }
}

#ifdef LIBCALLS
void test_Complex_float()
{
  _Complex float x, expr, d, e, v;
  int r;

  #pragma omp atomic compare capture
  { v = x; if (x == e) { x = d; } }

  #pragma omp atomic compare capture
  { if (x == e) { x = d; } v = x; }

  #pragma omp atomic compare capture
  if (x == e) { x = d; } else { v = x; }

  #pragma omp atomic compare capture
  { r = x == e; if(r) { x = d; } }

  #pragma omp atomic compare capture
  { r = x == e; if(r) { x = d; } else { v = x; } }
}

void test_long_double() {
  long double x, expr, d, e;
  short r;

  #pragma omp atomic compare capture
  { v = x; if (x < expr) { x = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (x < expr) { x = expr; } v = x; } // MAX

  #pragma omp atomic compare capture
  if (x == e) { x = d; } else { v = x; }

  #pragma omp atomic compare capture
  { r = x == e; if(r) { x = d; } }

  #pragma omp atomic compare capture
  { r = x == e; if(r) { x = d; } else { v = x; } }
}

void test_vec() {
  typedef int int4 __attribute__((__vector_size__(16)));
  int4 x;
  int expr, d, e, v;
  long r;

  #pragma omp atomic compare
  { v = x[1]; if (x[1] < expr) { x[1] = expr; } } // MAX

  #pragma omp atomic compare
  { if (x[1] < expr) { x[1] = expr; } v = x[1]; } // MAX

  #pragma omp atomic compare capture
  if (x == e) { x = d; } else { v = x; }

  #pragma omp atomic compare capture
  { r = x == e; if(r) { x = d; } }

  #pragma omp atomic compare capture
  { r = x == e; if(r) { x = d; } else { v = x; } }
}
#endif


struct BitFields {
  int : 32;
  int a : 31;
} bfx;

struct BitFields_packed {
  int : 32;
  int a : 31;
} __attribute__ ((__packed__)) bfx_packed;

struct BitFields2 {
  int : 31;
  int a : 1;
} bfx2;

struct BitFields2_packed {
  int : 31;
  int a : 1;
} __attribute__ ((__packed__)) bfx2_packed;

struct BitFields3 {
  int : 11;
  int a : 14;
} bfx3;

struct BitFields3_packed {
  int : 11;
  int a : 14;
} __attribute__ ((__packed__)) bfx3_packed;

struct BitFields4 {
  short : 16;
  int a: 1;
  long b : 7;
} bfx4;

struct BitFields4_packed {
  short : 16;
  int a: 1;
  long b : 7;
} __attribute__ ((__packed__)) bfx4_packed;

// CHK-C-LABEL: @test_bitfield(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[V:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[R:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[TMP:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP2:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP4:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP11:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP12:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP17:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP20:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP26:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP34:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP35:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP40:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP43:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP50:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP58:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP59:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP64:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP67:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP73:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP81:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP82:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP87:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP90:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP96:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP107:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP108:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP112:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP115:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP122:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP129:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP130:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP134:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP137:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP145:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP152:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP153:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP157:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP160:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP168:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP177:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP178:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP182:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP185:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP192:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP200:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP201:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP205:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP208:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP215:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP225:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP226:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP230:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP233:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP240:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP248:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP249:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP254:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP257:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP265:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP273:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP274:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP279:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP282:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP290:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP300:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP301:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP306:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP309:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP316:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP325:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP326:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP331:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP334:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP341:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP352:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP353:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP358:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP361:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP368:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP376:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP377:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP382:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP385:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP393:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP401:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP402:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP407:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP410:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP418:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP428:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP429:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP434:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP437:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP444:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP453:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP454:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP459:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP462:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP469:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATMP480:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP481:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP487:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP490:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP497:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP506:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP507:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP513:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP516:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP524:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP533:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP534:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP540:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP543:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP551:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP562:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP563:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP569:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP572:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP579:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP589:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP590:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP596:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP599:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP606:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP619:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP620:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP625:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP628:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP635:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP645:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP646:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP651:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP654:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP662:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP673:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP674:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP679:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP682:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP690:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP703:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP704:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP709:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP712:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP719:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP730:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP731:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP736:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP739:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP746:%.*]] = alloca i64, align 8
// CHK-C-NEXT:    [[ATMP758:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP759:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP765:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP768:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP774:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP783:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP784:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP790:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP793:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP800:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP809:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP810:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP816:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP819:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP826:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP837:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP838:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP844:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP847:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP853:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP863:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP864:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATMP870:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP873:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP879:%.*]] = alloca i32, align 1
// CHK-C-NEXT:    [[TMP0:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i32, ptr getelementptr (i8, ptr @bfx, i64 4) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD]], ptr [[ATOMIC_TEMP]], align 4
// CHK-C-NEXT:    [[BF_LOAD:%.*]] = load i32, ptr [[ATOMIC_TEMP]], align 4
// CHK-C-NEXT:    [[BF_SHL:%.*]] = shl i32 [[BF_LOAD]], 1
// CHK-C-NEXT:    [[BF_ASHR:%.*]] = ashr i32 [[BF_SHL]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR]], ptr [[TMP]], align 4
// CHK-C-NEXT:    [[CMP:%.*]] = icmp slt i32 [[BF_ASHR]], [[TMP0]]
// CHK-C-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL]], ptr [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP1:%.*]] = phi i32 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP1]], ptr [[ATOMIC_TEMP2]], align 4
// CHK-C-NEXT:    [[BF_LOAD3:%.*]] = load i32, ptr [[ATOMIC_TEMP2]], align 4
// CHK-C-NEXT:    [[BF_VALUE:%.*]] = and i32 [[TMP0]], 2147483647
// CHK-C-NEXT:    [[BF_CLEAR:%.*]] = and i32 [[BF_LOAD3]], -2147483648
// CHK-C-NEXT:    [[BF_SET:%.*]] = or i32 [[BF_CLEAR]], [[BF_VALUE]]
// CHK-C-NEXT:    store i32 [[BF_SET]], ptr [[ATOMIC_TEMP2]], align 4
// CHK-C-NEXT:    [[TMP2:%.*]] = load i32, ptr [[ATOMIC_TEMP2]], align 4
// CHK-C-NEXT:    [[TMP3:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx, i64 4), i32 [[TMP1]], i32 [[TMP2]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP4]] = extractvalue { i32, i1 } [[TMP3]], 0
// CHK-C-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i1 } [[TMP3]], 1
// CHK-C-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    store i32 [[TMP4]], ptr [[ATOMIC_TEMP4]], align 4
// CHK-C-NEXT:    [[BF_LOAD5:%.*]] = load i32, ptr [[ATOMIC_TEMP4]], align 4
// CHK-C-NEXT:    [[BF_SHL6:%.*]] = shl i32 [[BF_LOAD5]], 1
// CHK-C-NEXT:    [[BF_ASHR7:%.*]] = ashr i32 [[BF_SHL6]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR7]], ptr [[TMP]], align 4
// CHK-C-NEXT:    [[CMP8:%.*]] = icmp slt i32 [[BF_ASHR7]], [[TMP0]]
// CHK-C-NEXT:    [[FROMBOOL9:%.*]] = zext i1 [[CMP8]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL9]], ptr [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP8]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP]], align 4
// CHK-C-NEXT:    [[TMP7:%.*]] = load i8, ptr [[ATMP1]], align 1
// CHK-C-NEXT:    store i32 [[TMP6]], ptr [[V]], align 4
// CHK-C-NEXT:    [[TMP8:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD10:%.*]] = load atomic i32, ptr getelementptr (i8, ptr @bfx, i64 4) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD10]], ptr [[ATOMIC_TEMP12]], align 4
// CHK-C-NEXT:    [[BF_LOAD13:%.*]] = load i32, ptr [[ATOMIC_TEMP12]], align 4
// CHK-C-NEXT:    [[BF_SHL14:%.*]] = shl i32 [[BF_LOAD13]], 1
// CHK-C-NEXT:    [[BF_ASHR15:%.*]] = ashr i32 [[BF_SHL14]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR15]], ptr [[ATMP11]], align 4
// CHK-C-NEXT:    [[CMP16:%.*]] = icmp slt i32 [[BF_ASHR15]], [[TMP8]]
// CHK-C-NEXT:    [[FROMBOOL18:%.*]] = zext i1 [[CMP16]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL18]], ptr [[ATMP17]], align 1
// CHK-C-NEXT:    br i1 [[CMP16]], label [[ATOMIC_CONT19:%.*]], label [[ATOMIC_EXIT32:%.*]]
// CHK-C:       atomic_cont19:
// CHK-C-NEXT:    [[TMP9:%.*]] = phi i32 [ [[ATOMIC_LOAD10]], [[ATOMIC_EXIT]] ], [ [[TMP12:%.*]], [[ATOMIC_CMP25:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP9]], ptr [[ATOMIC_TEMP20]], align 4
// CHK-C-NEXT:    [[BF_LOAD21:%.*]] = load i32, ptr [[ATOMIC_TEMP20]], align 4
// CHK-C-NEXT:    [[BF_VALUE22:%.*]] = and i32 [[TMP8]], 2147483647
// CHK-C-NEXT:    [[BF_CLEAR23:%.*]] = and i32 [[BF_LOAD21]], -2147483648
// CHK-C-NEXT:    [[BF_SET24:%.*]] = or i32 [[BF_CLEAR23]], [[BF_VALUE22]]
// CHK-C-NEXT:    store i32 [[BF_SET24]], ptr [[ATOMIC_TEMP20]], align 4
// CHK-C-NEXT:    [[TMP10:%.*]] = load i32, ptr [[ATOMIC_TEMP20]], align 4
// CHK-C-NEXT:    [[TMP11:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx, i64 4), i32 [[TMP9]], i32 [[TMP10]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP12]] = extractvalue { i32, i1 } [[TMP11]], 0
// CHK-C-NEXT:    [[TMP13:%.*]] = extractvalue { i32, i1 } [[TMP11]], 1
// CHK-C-NEXT:    br i1 [[TMP13]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP25]]
// CHK-C:       atomic_upd_exit:
// CHK-C-NEXT:    store i32 [[TMP8]], ptr [[ATMP11]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT32]]
// CHK-C:       atomic_cmp25:
// CHK-C-NEXT:    store i32 [[TMP12]], ptr [[ATOMIC_TEMP26]], align 4
// CHK-C-NEXT:    [[BF_LOAD27:%.*]] = load i32, ptr [[ATOMIC_TEMP26]], align 4
// CHK-C-NEXT:    [[BF_SHL28:%.*]] = shl i32 [[BF_LOAD27]], 1
// CHK-C-NEXT:    [[BF_ASHR29:%.*]] = ashr i32 [[BF_SHL28]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR29]], ptr [[ATMP11]], align 4
// CHK-C-NEXT:    [[CMP30:%.*]] = icmp slt i32 [[BF_ASHR29]], [[TMP8]]
// CHK-C-NEXT:    [[FROMBOOL31:%.*]] = zext i1 [[CMP30]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL31]], ptr [[ATMP17]], align 1
// CHK-C-NEXT:    br i1 [[CMP30]], label [[ATOMIC_CONT19]], label [[ATOMIC_EXIT32]]
// CHK-C:       atomic_exit32:
// CHK-C-NEXT:    [[TMP14:%.*]] = load i32, ptr [[ATMP11]], align 4
// CHK-C-NEXT:    [[TMP15:%.*]] = load i8, ptr [[ATMP17]], align 1
// CHK-C-NEXT:    store i32 [[TMP14]], ptr [[V]], align 4
// CHK-C-NEXT:    [[TMP16:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[TMP17:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD33:%.*]] = load atomic i32, ptr getelementptr (i8, ptr @bfx, i64 4) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD33]], ptr [[ATOMIC_TEMP35]], align 4
// CHK-C-NEXT:    [[BF_LOAD36:%.*]] = load i32, ptr [[ATOMIC_TEMP35]], align 4
// CHK-C-NEXT:    [[BF_SHL37:%.*]] = shl i32 [[BF_LOAD36]], 1
// CHK-C-NEXT:    [[BF_ASHR38:%.*]] = ashr i32 [[BF_SHL37]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR38]], ptr [[ATMP34]], align 4
// CHK-C-NEXT:    [[CMP39:%.*]] = icmp eq i32 [[BF_ASHR38]], [[TMP17]]
// CHK-C-NEXT:    [[FROMBOOL41:%.*]] = zext i1 [[CMP39]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL41]], ptr [[ATMP40]], align 1
// CHK-C-NEXT:    br i1 [[CMP39]], label [[ATOMIC_CONT42:%.*]], label [[ATOMIC_EXIT56:%.*]]
// CHK-C:       atomic_cont42:
// CHK-C-NEXT:    [[TMP18:%.*]] = phi i32 [ [[ATOMIC_LOAD33]], [[ATOMIC_EXIT32]] ], [ [[TMP21:%.*]], [[ATOMIC_CMP49:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP18]], ptr [[ATOMIC_TEMP43]], align 4
// CHK-C-NEXT:    [[BF_LOAD44:%.*]] = load i32, ptr [[ATOMIC_TEMP43]], align 4
// CHK-C-NEXT:    [[BF_VALUE45:%.*]] = and i32 [[TMP16]], 2147483647
// CHK-C-NEXT:    [[BF_CLEAR46:%.*]] = and i32 [[BF_LOAD44]], -2147483648
// CHK-C-NEXT:    [[BF_SET47:%.*]] = or i32 [[BF_CLEAR46]], [[BF_VALUE45]]
// CHK-C-NEXT:    store i32 [[BF_SET47]], ptr [[ATOMIC_TEMP43]], align 4
// CHK-C-NEXT:    [[TMP19:%.*]] = load i32, ptr [[ATOMIC_TEMP43]], align 4
// CHK-C-NEXT:    [[TMP20:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx, i64 4), i32 [[TMP18]], i32 [[TMP19]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP21]] = extractvalue { i32, i1 } [[TMP20]], 0
// CHK-C-NEXT:    [[TMP22:%.*]] = extractvalue { i32, i1 } [[TMP20]], 1
// CHK-C-NEXT:    br i1 [[TMP22]], label [[ATOMIC_UPD_EXIT48:%.*]], label [[ATOMIC_CMP49]]
// CHK-C:       atomic_upd_exit48:
// CHK-C-NEXT:    store i32 [[TMP16]], ptr [[ATMP34]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT56]]
// CHK-C:       atomic_cmp49:
// CHK-C-NEXT:    store i32 [[TMP21]], ptr [[ATOMIC_TEMP50]], align 4
// CHK-C-NEXT:    [[BF_LOAD51:%.*]] = load i32, ptr [[ATOMIC_TEMP50]], align 4
// CHK-C-NEXT:    [[BF_SHL52:%.*]] = shl i32 [[BF_LOAD51]], 1
// CHK-C-NEXT:    [[BF_ASHR53:%.*]] = ashr i32 [[BF_SHL52]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR53]], ptr [[ATMP34]], align 4
// CHK-C-NEXT:    [[CMP54:%.*]] = icmp eq i32 [[BF_ASHR53]], [[TMP17]]
// CHK-C-NEXT:    [[FROMBOOL55:%.*]] = zext i1 [[CMP54]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL55]], ptr [[ATMP40]], align 1
// CHK-C-NEXT:    br i1 [[CMP54]], label [[ATOMIC_CONT42]], label [[ATOMIC_EXIT56]]
// CHK-C:       atomic_exit56:
// CHK-C-NEXT:    [[TMP23:%.*]] = load i32, ptr [[ATMP34]], align 4
// CHK-C-NEXT:    [[TMP24:%.*]] = load i8, ptr [[ATMP40]], align 1
// CHK-C-NEXT:    [[TMP25:%.*]] = trunc i8 [[TMP24]] to i1
// CHK-C-NEXT:    br i1 [[TMP25]], label [[ATOMIC_CAPTURE_CONT:%.*]], label [[ATOMIC_CAPTURE:%.*]]
// CHK-C:       atomic_capture:
// CHK-C-NEXT:    store i32 [[TMP23]], ptr [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT]]
// CHK-C:       atomic_capture_cont:
// CHK-C-NEXT:    [[TMP26:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[TMP27:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD57:%.*]] = load atomic i32, ptr getelementptr (i8, ptr @bfx, i64 4) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD57]], ptr [[ATOMIC_TEMP59]], align 4
// CHK-C-NEXT:    [[BF_LOAD60:%.*]] = load i32, ptr [[ATOMIC_TEMP59]], align 4
// CHK-C-NEXT:    [[BF_SHL61:%.*]] = shl i32 [[BF_LOAD60]], 1
// CHK-C-NEXT:    [[BF_ASHR62:%.*]] = ashr i32 [[BF_SHL61]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR62]], ptr [[ATMP58]], align 4
// CHK-C-NEXT:    [[CMP63:%.*]] = icmp eq i32 [[BF_ASHR62]], [[TMP27]]
// CHK-C-NEXT:    [[FROMBOOL65:%.*]] = zext i1 [[CMP63]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL65]], ptr [[ATMP64]], align 1
// CHK-C-NEXT:    br i1 [[CMP63]], label [[ATOMIC_CONT66:%.*]], label [[ATOMIC_EXIT79:%.*]]
// CHK-C:       atomic_cont66:
// CHK-C-NEXT:    [[TMP28:%.*]] = phi i32 [ [[ATOMIC_LOAD57]], [[ATOMIC_CAPTURE_CONT]] ], [ [[TMP31:%.*]], [[ATOMIC_CMP72:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP28]], ptr [[ATOMIC_TEMP67]], align 4
// CHK-C-NEXT:    [[BF_LOAD68:%.*]] = load i32, ptr [[ATOMIC_TEMP67]], align 4
// CHK-C-NEXT:    [[BF_VALUE69:%.*]] = and i32 [[TMP26]], 2147483647
// CHK-C-NEXT:    [[BF_CLEAR70:%.*]] = and i32 [[BF_LOAD68]], -2147483648
// CHK-C-NEXT:    [[BF_SET71:%.*]] = or i32 [[BF_CLEAR70]], [[BF_VALUE69]]
// CHK-C-NEXT:    store i32 [[BF_SET71]], ptr [[ATOMIC_TEMP67]], align 4
// CHK-C-NEXT:    [[TMP29:%.*]] = load i32, ptr [[ATOMIC_TEMP67]], align 4
// CHK-C-NEXT:    [[TMP30:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx, i64 4), i32 [[TMP28]], i32 [[TMP29]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP31]] = extractvalue { i32, i1 } [[TMP30]], 0
// CHK-C-NEXT:    [[TMP32:%.*]] = extractvalue { i32, i1 } [[TMP30]], 1
// CHK-C-NEXT:    br i1 [[TMP32]], label [[ATOMIC_EXIT79]], label [[ATOMIC_CMP72]]
// CHK-C:       atomic_cmp72:
// CHK-C-NEXT:    store i32 [[TMP31]], ptr [[ATOMIC_TEMP73]], align 4
// CHK-C-NEXT:    [[BF_LOAD74:%.*]] = load i32, ptr [[ATOMIC_TEMP73]], align 4
// CHK-C-NEXT:    [[BF_SHL75:%.*]] = shl i32 [[BF_LOAD74]], 1
// CHK-C-NEXT:    [[BF_ASHR76:%.*]] = ashr i32 [[BF_SHL75]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR76]], ptr [[ATMP58]], align 4
// CHK-C-NEXT:    [[CMP77:%.*]] = icmp eq i32 [[BF_ASHR76]], [[TMP27]]
// CHK-C-NEXT:    [[FROMBOOL78:%.*]] = zext i1 [[CMP77]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL78]], ptr [[ATMP64]], align 1
// CHK-C-NEXT:    br i1 [[CMP77]], label [[ATOMIC_CONT66]], label [[ATOMIC_EXIT79]]
// CHK-C:       atomic_exit79:
// CHK-C-NEXT:    [[TMP33:%.*]] = load i32, ptr [[ATMP58]], align 4
// CHK-C-NEXT:    [[TMP34:%.*]] = load i8, ptr [[ATMP64]], align 1
// CHK-C-NEXT:    [[CONV:%.*]] = zext i8 [[TMP34]] to i32
// CHK-C-NEXT:    store i32 [[CONV]], ptr [[R]], align 4
// CHK-C-NEXT:    [[TMP35:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[TMP36:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD80:%.*]] = load atomic i32, ptr getelementptr (i8, ptr @bfx, i64 4) monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD80]], ptr [[ATOMIC_TEMP82]], align 4
// CHK-C-NEXT:    [[BF_LOAD83:%.*]] = load i32, ptr [[ATOMIC_TEMP82]], align 4
// CHK-C-NEXT:    [[BF_SHL84:%.*]] = shl i32 [[BF_LOAD83]], 1
// CHK-C-NEXT:    [[BF_ASHR85:%.*]] = ashr i32 [[BF_SHL84]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR85]], ptr [[ATMP81]], align 4
// CHK-C-NEXT:    [[CMP86:%.*]] = icmp eq i32 [[BF_ASHR85]], [[TMP36]]
// CHK-C-NEXT:    [[FROMBOOL88:%.*]] = zext i1 [[CMP86]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL88]], ptr [[ATMP87]], align 1
// CHK-C-NEXT:    br i1 [[CMP86]], label [[ATOMIC_CONT89:%.*]], label [[ATOMIC_EXIT102:%.*]]
// CHK-C:       atomic_cont89:
// CHK-C-NEXT:    [[TMP37:%.*]] = phi i32 [ [[ATOMIC_LOAD80]], [[ATOMIC_EXIT79]] ], [ [[TMP40:%.*]], [[ATOMIC_CMP95:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP37]], ptr [[ATOMIC_TEMP90]], align 4
// CHK-C-NEXT:    [[BF_LOAD91:%.*]] = load i32, ptr [[ATOMIC_TEMP90]], align 4
// CHK-C-NEXT:    [[BF_VALUE92:%.*]] = and i32 [[TMP35]], 2147483647
// CHK-C-NEXT:    [[BF_CLEAR93:%.*]] = and i32 [[BF_LOAD91]], -2147483648
// CHK-C-NEXT:    [[BF_SET94:%.*]] = or i32 [[BF_CLEAR93]], [[BF_VALUE92]]
// CHK-C-NEXT:    store i32 [[BF_SET94]], ptr [[ATOMIC_TEMP90]], align 4
// CHK-C-NEXT:    [[TMP38:%.*]] = load i32, ptr [[ATOMIC_TEMP90]], align 4
// CHK-C-NEXT:    [[TMP39:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx, i64 4), i32 [[TMP37]], i32 [[TMP38]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP40]] = extractvalue { i32, i1 } [[TMP39]], 0
// CHK-C-NEXT:    [[TMP41:%.*]] = extractvalue { i32, i1 } [[TMP39]], 1
// CHK-C-NEXT:    br i1 [[TMP41]], label [[ATOMIC_EXIT102]], label [[ATOMIC_CMP95]]
// CHK-C:       atomic_cmp95:
// CHK-C-NEXT:    store i32 [[TMP40]], ptr [[ATOMIC_TEMP96]], align 4
// CHK-C-NEXT:    [[BF_LOAD97:%.*]] = load i32, ptr [[ATOMIC_TEMP96]], align 4
// CHK-C-NEXT:    [[BF_SHL98:%.*]] = shl i32 [[BF_LOAD97]], 1
// CHK-C-NEXT:    [[BF_ASHR99:%.*]] = ashr i32 [[BF_SHL98]], 1
// CHK-C-NEXT:    store i32 [[BF_ASHR99]], ptr [[ATMP81]], align 4
// CHK-C-NEXT:    [[CMP100:%.*]] = icmp eq i32 [[BF_ASHR99]], [[TMP36]]
// CHK-C-NEXT:    [[FROMBOOL101:%.*]] = zext i1 [[CMP100]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL101]], ptr [[ATMP87]], align 1
// CHK-C-NEXT:    br i1 [[CMP100]], label [[ATOMIC_CONT89]], label [[ATOMIC_EXIT102]]
// CHK-C:       atomic_exit102:
// CHK-C-NEXT:    [[TMP42:%.*]] = load i32, ptr [[ATMP81]], align 4
// CHK-C-NEXT:    [[TMP43:%.*]] = load i8, ptr [[ATMP87]], align 1
// CHK-C-NEXT:    [[CONV103:%.*]] = zext i8 [[TMP43]] to i32
// CHK-C-NEXT:    store i32 [[CONV103]], ptr [[R]], align 4
// CHK-C-NEXT:    [[TMP44:%.*]] = trunc i8 [[TMP43]] to i1
// CHK-C-NEXT:    br i1 [[TMP44]], label [[ATOMIC_CAPTURE_CONT105:%.*]], label [[ATOMIC_CAPTURE104:%.*]]
// CHK-C:       atomic_capture104:
// CHK-C-NEXT:    store i32 [[TMP42]], ptr [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT105]]
// CHK-C:       atomic_capture_cont105:
// CHK-C-NEXT:    [[TMP45:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD106:%.*]] = load atomic i32, ptr @bfx2 monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD106]], ptr [[ATOMIC_TEMP108]], align 4
// CHK-C-NEXT:    [[BF_LOAD109:%.*]] = load i32, ptr [[ATOMIC_TEMP108]], align 4
// CHK-C-NEXT:    [[BF_ASHR110:%.*]] = ashr i32 [[BF_LOAD109]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR110]], ptr [[ATMP107]], align 4
// CHK-C-NEXT:    [[CMP111:%.*]] = icmp slt i32 [[BF_ASHR110]], [[TMP45]]
// CHK-C-NEXT:    [[FROMBOOL113:%.*]] = zext i1 [[CMP111]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL113]], ptr [[ATMP112]], align 1
// CHK-C-NEXT:    br i1 [[CMP111]], label [[ATOMIC_CONT114:%.*]], label [[ATOMIC_EXIT127:%.*]]
// CHK-C:       atomic_cont114:
// CHK-C-NEXT:    [[TMP46:%.*]] = phi i32 [ [[ATOMIC_LOAD106]], [[ATOMIC_CAPTURE_CONT105]] ], [ [[TMP49:%.*]], [[ATOMIC_CMP121:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP46]], ptr [[ATOMIC_TEMP115]], align 4
// CHK-C-NEXT:    [[BF_LOAD116:%.*]] = load i32, ptr [[ATOMIC_TEMP115]], align 4
// CHK-C-NEXT:    [[BF_VALUE117:%.*]] = and i32 [[TMP45]], 1
// CHK-C-NEXT:    [[BF_SHL118:%.*]] = shl i32 [[BF_VALUE117]], 31
// CHK-C-NEXT:    [[BF_CLEAR119:%.*]] = and i32 [[BF_LOAD116]], 2147483647
// CHK-C-NEXT:    [[BF_SET120:%.*]] = or i32 [[BF_CLEAR119]], [[BF_SHL118]]
// CHK-C-NEXT:    store i32 [[BF_SET120]], ptr [[ATOMIC_TEMP115]], align 4
// CHK-C-NEXT:    [[TMP47:%.*]] = load i32, ptr [[ATOMIC_TEMP115]], align 4
// CHK-C-NEXT:    [[TMP48:%.*]] = cmpxchg ptr @bfx2, i32 [[TMP46]], i32 [[TMP47]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP49]] = extractvalue { i32, i1 } [[TMP48]], 0
// CHK-C-NEXT:    [[TMP50:%.*]] = extractvalue { i32, i1 } [[TMP48]], 1
// CHK-C-NEXT:    br i1 [[TMP50]], label [[ATOMIC_EXIT127]], label [[ATOMIC_CMP121]]
// CHK-C:       atomic_cmp121:
// CHK-C-NEXT:    store i32 [[TMP49]], ptr [[ATOMIC_TEMP122]], align 4
// CHK-C-NEXT:    [[BF_LOAD123:%.*]] = load i32, ptr [[ATOMIC_TEMP122]], align 4
// CHK-C-NEXT:    [[BF_ASHR124:%.*]] = ashr i32 [[BF_LOAD123]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR124]], ptr [[ATMP107]], align 4
// CHK-C-NEXT:    [[CMP125:%.*]] = icmp slt i32 [[BF_ASHR124]], [[TMP45]]
// CHK-C-NEXT:    [[FROMBOOL126:%.*]] = zext i1 [[CMP125]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL126]], ptr [[ATMP112]], align 1
// CHK-C-NEXT:    br i1 [[CMP125]], label [[ATOMIC_CONT114]], label [[ATOMIC_EXIT127]]
// CHK-C:       atomic_exit127:
// CHK-C-NEXT:    [[TMP51:%.*]] = load i32, ptr [[ATMP107]], align 4
// CHK-C-NEXT:    [[TMP52:%.*]] = load i8, ptr [[ATMP112]], align 1
// CHK-C-NEXT:    store i32 [[TMP51]], ptr [[V]], align 4
// CHK-C-NEXT:    [[TMP53:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD128:%.*]] = load atomic i32, ptr @bfx2 monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD128]], ptr [[ATOMIC_TEMP130]], align 4
// CHK-C-NEXT:    [[BF_LOAD131:%.*]] = load i32, ptr [[ATOMIC_TEMP130]], align 4
// CHK-C-NEXT:    [[BF_ASHR132:%.*]] = ashr i32 [[BF_LOAD131]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR132]], ptr [[ATMP129]], align 4
// CHK-C-NEXT:    [[CMP133:%.*]] = icmp slt i32 [[BF_ASHR132]], [[TMP53]]
// CHK-C-NEXT:    [[FROMBOOL135:%.*]] = zext i1 [[CMP133]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL135]], ptr [[ATMP134]], align 1
// CHK-C-NEXT:    br i1 [[CMP133]], label [[ATOMIC_CONT136:%.*]], label [[ATOMIC_EXIT150:%.*]]
// CHK-C:       atomic_cont136:
// CHK-C-NEXT:    [[TMP54:%.*]] = phi i32 [ [[ATOMIC_LOAD128]], [[ATOMIC_EXIT127]] ], [ [[TMP57:%.*]], [[ATOMIC_CMP144:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP54]], ptr [[ATOMIC_TEMP137]], align 4
// CHK-C-NEXT:    [[BF_LOAD138:%.*]] = load i32, ptr [[ATOMIC_TEMP137]], align 4
// CHK-C-NEXT:    [[BF_VALUE139:%.*]] = and i32 [[TMP53]], 1
// CHK-C-NEXT:    [[BF_SHL140:%.*]] = shl i32 [[BF_VALUE139]], 31
// CHK-C-NEXT:    [[BF_CLEAR141:%.*]] = and i32 [[BF_LOAD138]], 2147483647
// CHK-C-NEXT:    [[BF_SET142:%.*]] = or i32 [[BF_CLEAR141]], [[BF_SHL140]]
// CHK-C-NEXT:    store i32 [[BF_SET142]], ptr [[ATOMIC_TEMP137]], align 4
// CHK-C-NEXT:    [[TMP55:%.*]] = load i32, ptr [[ATOMIC_TEMP137]], align 4
// CHK-C-NEXT:    [[TMP56:%.*]] = cmpxchg ptr @bfx2, i32 [[TMP54]], i32 [[TMP55]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP57]] = extractvalue { i32, i1 } [[TMP56]], 0
// CHK-C-NEXT:    [[TMP58:%.*]] = extractvalue { i32, i1 } [[TMP56]], 1
// CHK-C-NEXT:    br i1 [[TMP58]], label [[ATOMIC_UPD_EXIT143:%.*]], label [[ATOMIC_CMP144]]
// CHK-C:       atomic_upd_exit143:
// CHK-C-NEXT:    store i32 [[TMP53]], ptr [[ATMP129]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT150]]
// CHK-C:       atomic_cmp144:
// CHK-C-NEXT:    store i32 [[TMP57]], ptr [[ATOMIC_TEMP145]], align 4
// CHK-C-NEXT:    [[BF_LOAD146:%.*]] = load i32, ptr [[ATOMIC_TEMP145]], align 4
// CHK-C-NEXT:    [[BF_ASHR147:%.*]] = ashr i32 [[BF_LOAD146]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR147]], ptr [[ATMP129]], align 4
// CHK-C-NEXT:    [[CMP148:%.*]] = icmp slt i32 [[BF_ASHR147]], [[TMP53]]
// CHK-C-NEXT:    [[FROMBOOL149:%.*]] = zext i1 [[CMP148]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL149]], ptr [[ATMP134]], align 1
// CHK-C-NEXT:    br i1 [[CMP148]], label [[ATOMIC_CONT136]], label [[ATOMIC_EXIT150]]
// CHK-C:       atomic_exit150:
// CHK-C-NEXT:    [[TMP59:%.*]] = load i32, ptr [[ATMP129]], align 4
// CHK-C-NEXT:    [[TMP60:%.*]] = load i8, ptr [[ATMP134]], align 1
// CHK-C-NEXT:    store i32 [[TMP59]], ptr [[V]], align 4
// CHK-C-NEXT:    [[TMP61:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[TMP62:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD151:%.*]] = load atomic i32, ptr @bfx2 monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD151]], ptr [[ATOMIC_TEMP153]], align 4
// CHK-C-NEXT:    [[BF_LOAD154:%.*]] = load i32, ptr [[ATOMIC_TEMP153]], align 4
// CHK-C-NEXT:    [[BF_ASHR155:%.*]] = ashr i32 [[BF_LOAD154]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR155]], ptr [[ATMP152]], align 4
// CHK-C-NEXT:    [[CMP156:%.*]] = icmp eq i32 [[BF_ASHR155]], [[TMP62]]
// CHK-C-NEXT:    [[FROMBOOL158:%.*]] = zext i1 [[CMP156]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL158]], ptr [[ATMP157]], align 1
// CHK-C-NEXT:    br i1 [[CMP156]], label [[ATOMIC_CONT159:%.*]], label [[ATOMIC_EXIT173:%.*]]
// CHK-C:       atomic_cont159:
// CHK-C-NEXT:    [[TMP63:%.*]] = phi i32 [ [[ATOMIC_LOAD151]], [[ATOMIC_EXIT150]] ], [ [[TMP66:%.*]], [[ATOMIC_CMP167:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP63]], ptr [[ATOMIC_TEMP160]], align 4
// CHK-C-NEXT:    [[BF_LOAD161:%.*]] = load i32, ptr [[ATOMIC_TEMP160]], align 4
// CHK-C-NEXT:    [[BF_VALUE162:%.*]] = and i32 [[TMP61]], 1
// CHK-C-NEXT:    [[BF_SHL163:%.*]] = shl i32 [[BF_VALUE162]], 31
// CHK-C-NEXT:    [[BF_CLEAR164:%.*]] = and i32 [[BF_LOAD161]], 2147483647
// CHK-C-NEXT:    [[BF_SET165:%.*]] = or i32 [[BF_CLEAR164]], [[BF_SHL163]]
// CHK-C-NEXT:    store i32 [[BF_SET165]], ptr [[ATOMIC_TEMP160]], align 4
// CHK-C-NEXT:    [[TMP64:%.*]] = load i32, ptr [[ATOMIC_TEMP160]], align 4
// CHK-C-NEXT:    [[TMP65:%.*]] = cmpxchg ptr @bfx2, i32 [[TMP63]], i32 [[TMP64]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP66]] = extractvalue { i32, i1 } [[TMP65]], 0
// CHK-C-NEXT:    [[TMP67:%.*]] = extractvalue { i32, i1 } [[TMP65]], 1
// CHK-C-NEXT:    br i1 [[TMP67]], label [[ATOMIC_UPD_EXIT166:%.*]], label [[ATOMIC_CMP167]]
// CHK-C:       atomic_upd_exit166:
// CHK-C-NEXT:    store i32 [[TMP61]], ptr [[ATMP152]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT173]]
// CHK-C:       atomic_cmp167:
// CHK-C-NEXT:    store i32 [[TMP66]], ptr [[ATOMIC_TEMP168]], align 4
// CHK-C-NEXT:    [[BF_LOAD169:%.*]] = load i32, ptr [[ATOMIC_TEMP168]], align 4
// CHK-C-NEXT:    [[BF_ASHR170:%.*]] = ashr i32 [[BF_LOAD169]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR170]], ptr [[ATMP152]], align 4
// CHK-C-NEXT:    [[CMP171:%.*]] = icmp eq i32 [[BF_ASHR170]], [[TMP62]]
// CHK-C-NEXT:    [[FROMBOOL172:%.*]] = zext i1 [[CMP171]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL172]], ptr [[ATMP157]], align 1
// CHK-C-NEXT:    br i1 [[CMP171]], label [[ATOMIC_CONT159]], label [[ATOMIC_EXIT173]]
// CHK-C:       atomic_exit173:
// CHK-C-NEXT:    [[TMP68:%.*]] = load i32, ptr [[ATMP152]], align 4
// CHK-C-NEXT:    [[TMP69:%.*]] = load i8, ptr [[ATMP157]], align 1
// CHK-C-NEXT:    [[TMP70:%.*]] = trunc i8 [[TMP69]] to i1
// CHK-C-NEXT:    br i1 [[TMP70]], label [[ATOMIC_CAPTURE_CONT175:%.*]], label [[ATOMIC_CAPTURE174:%.*]]
// CHK-C:       atomic_capture174:
// CHK-C-NEXT:    store i32 [[TMP68]], ptr [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT175]]
// CHK-C:       atomic_capture_cont175:
// CHK-C-NEXT:    [[TMP71:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[TMP72:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD176:%.*]] = load atomic i32, ptr @bfx2 monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD176]], ptr [[ATOMIC_TEMP178]], align 4
// CHK-C-NEXT:    [[BF_LOAD179:%.*]] = load i32, ptr [[ATOMIC_TEMP178]], align 4
// CHK-C-NEXT:    [[BF_ASHR180:%.*]] = ashr i32 [[BF_LOAD179]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR180]], ptr [[ATMP177]], align 4
// CHK-C-NEXT:    [[CMP181:%.*]] = icmp eq i32 [[BF_ASHR180]], [[TMP72]]
// CHK-C-NEXT:    [[FROMBOOL183:%.*]] = zext i1 [[CMP181]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL183]], ptr [[ATMP182]], align 1
// CHK-C-NEXT:    br i1 [[CMP181]], label [[ATOMIC_CONT184:%.*]], label [[ATOMIC_EXIT197:%.*]]
// CHK-C:       atomic_cont184:
// CHK-C-NEXT:    [[TMP73:%.*]] = phi i32 [ [[ATOMIC_LOAD176]], [[ATOMIC_CAPTURE_CONT175]] ], [ [[TMP76:%.*]], [[ATOMIC_CMP191:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP73]], ptr [[ATOMIC_TEMP185]], align 4
// CHK-C-NEXT:    [[BF_LOAD186:%.*]] = load i32, ptr [[ATOMIC_TEMP185]], align 4
// CHK-C-NEXT:    [[BF_VALUE187:%.*]] = and i32 [[TMP71]], 1
// CHK-C-NEXT:    [[BF_SHL188:%.*]] = shl i32 [[BF_VALUE187]], 31
// CHK-C-NEXT:    [[BF_CLEAR189:%.*]] = and i32 [[BF_LOAD186]], 2147483647
// CHK-C-NEXT:    [[BF_SET190:%.*]] = or i32 [[BF_CLEAR189]], [[BF_SHL188]]
// CHK-C-NEXT:    store i32 [[BF_SET190]], ptr [[ATOMIC_TEMP185]], align 4
// CHK-C-NEXT:    [[TMP74:%.*]] = load i32, ptr [[ATOMIC_TEMP185]], align 4
// CHK-C-NEXT:    [[TMP75:%.*]] = cmpxchg ptr @bfx2, i32 [[TMP73]], i32 [[TMP74]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP76]] = extractvalue { i32, i1 } [[TMP75]], 0
// CHK-C-NEXT:    [[TMP77:%.*]] = extractvalue { i32, i1 } [[TMP75]], 1
// CHK-C-NEXT:    br i1 [[TMP77]], label [[ATOMIC_EXIT197]], label [[ATOMIC_CMP191]]
// CHK-C:       atomic_cmp191:
// CHK-C-NEXT:    store i32 [[TMP76]], ptr [[ATOMIC_TEMP192]], align 4
// CHK-C-NEXT:    [[BF_LOAD193:%.*]] = load i32, ptr [[ATOMIC_TEMP192]], align 4
// CHK-C-NEXT:    [[BF_ASHR194:%.*]] = ashr i32 [[BF_LOAD193]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR194]], ptr [[ATMP177]], align 4
// CHK-C-NEXT:    [[CMP195:%.*]] = icmp eq i32 [[BF_ASHR194]], [[TMP72]]
// CHK-C-NEXT:    [[FROMBOOL196:%.*]] = zext i1 [[CMP195]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL196]], ptr [[ATMP182]], align 1
// CHK-C-NEXT:    br i1 [[CMP195]], label [[ATOMIC_CONT184]], label [[ATOMIC_EXIT197]]
// CHK-C:       atomic_exit197:
// CHK-C-NEXT:    [[TMP78:%.*]] = load i32, ptr [[ATMP177]], align 4
// CHK-C-NEXT:    [[TMP79:%.*]] = load i8, ptr [[ATMP182]], align 1
// CHK-C-NEXT:    [[CONV198:%.*]] = zext i8 [[TMP79]] to i32
// CHK-C-NEXT:    store i32 [[CONV198]], ptr [[R]], align 4
// CHK-C-NEXT:    [[TMP80:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[TMP81:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD199:%.*]] = load atomic i32, ptr @bfx2 monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD199]], ptr [[ATOMIC_TEMP201]], align 4
// CHK-C-NEXT:    [[BF_LOAD202:%.*]] = load i32, ptr [[ATOMIC_TEMP201]], align 4
// CHK-C-NEXT:    [[BF_ASHR203:%.*]] = ashr i32 [[BF_LOAD202]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR203]], ptr [[ATMP200]], align 4
// CHK-C-NEXT:    [[CMP204:%.*]] = icmp eq i32 [[BF_ASHR203]], [[TMP81]]
// CHK-C-NEXT:    [[FROMBOOL206:%.*]] = zext i1 [[CMP204]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL206]], ptr [[ATMP205]], align 1
// CHK-C-NEXT:    br i1 [[CMP204]], label [[ATOMIC_CONT207:%.*]], label [[ATOMIC_EXIT220:%.*]]
// CHK-C:       atomic_cont207:
// CHK-C-NEXT:    [[TMP82:%.*]] = phi i32 [ [[ATOMIC_LOAD199]], [[ATOMIC_EXIT197]] ], [ [[TMP85:%.*]], [[ATOMIC_CMP214:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP82]], ptr [[ATOMIC_TEMP208]], align 4
// CHK-C-NEXT:    [[BF_LOAD209:%.*]] = load i32, ptr [[ATOMIC_TEMP208]], align 4
// CHK-C-NEXT:    [[BF_VALUE210:%.*]] = and i32 [[TMP80]], 1
// CHK-C-NEXT:    [[BF_SHL211:%.*]] = shl i32 [[BF_VALUE210]], 31
// CHK-C-NEXT:    [[BF_CLEAR212:%.*]] = and i32 [[BF_LOAD209]], 2147483647
// CHK-C-NEXT:    [[BF_SET213:%.*]] = or i32 [[BF_CLEAR212]], [[BF_SHL211]]
// CHK-C-NEXT:    store i32 [[BF_SET213]], ptr [[ATOMIC_TEMP208]], align 4
// CHK-C-NEXT:    [[TMP83:%.*]] = load i32, ptr [[ATOMIC_TEMP208]], align 4
// CHK-C-NEXT:    [[TMP84:%.*]] = cmpxchg ptr @bfx2, i32 [[TMP82]], i32 [[TMP83]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP85]] = extractvalue { i32, i1 } [[TMP84]], 0
// CHK-C-NEXT:    [[TMP86:%.*]] = extractvalue { i32, i1 } [[TMP84]], 1
// CHK-C-NEXT:    br i1 [[TMP86]], label [[ATOMIC_EXIT220]], label [[ATOMIC_CMP214]]
// CHK-C:       atomic_cmp214:
// CHK-C-NEXT:    store i32 [[TMP85]], ptr [[ATOMIC_TEMP215]], align 4
// CHK-C-NEXT:    [[BF_LOAD216:%.*]] = load i32, ptr [[ATOMIC_TEMP215]], align 4
// CHK-C-NEXT:    [[BF_ASHR217:%.*]] = ashr i32 [[BF_LOAD216]], 31
// CHK-C-NEXT:    store i32 [[BF_ASHR217]], ptr [[ATMP200]], align 4
// CHK-C-NEXT:    [[CMP218:%.*]] = icmp eq i32 [[BF_ASHR217]], [[TMP81]]
// CHK-C-NEXT:    [[FROMBOOL219:%.*]] = zext i1 [[CMP218]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL219]], ptr [[ATMP205]], align 1
// CHK-C-NEXT:    br i1 [[CMP218]], label [[ATOMIC_CONT207]], label [[ATOMIC_EXIT220]]
// CHK-C:       atomic_exit220:
// CHK-C-NEXT:    [[TMP87:%.*]] = load i32, ptr [[ATMP200]], align 4
// CHK-C-NEXT:    [[TMP88:%.*]] = load i8, ptr [[ATMP205]], align 1
// CHK-C-NEXT:    [[CONV221:%.*]] = zext i8 [[TMP88]] to i32
// CHK-C-NEXT:    store i32 [[CONV221]], ptr [[R]], align 4
// CHK-C-NEXT:    [[TMP89:%.*]] = trunc i8 [[TMP88]] to i1
// CHK-C-NEXT:    br i1 [[TMP89]], label [[ATOMIC_CAPTURE_CONT223:%.*]], label [[ATOMIC_CAPTURE222:%.*]]
// CHK-C:       atomic_capture222:
// CHK-C-NEXT:    store i32 [[TMP87]], ptr [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT223]]
// CHK-C:       atomic_capture_cont223:
// CHK-C-NEXT:    [[TMP90:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD224:%.*]] = load atomic i8, ptr getelementptr (i8, ptr @bfx2_packed, i64 3) monotonic, align 1
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD224]], ptr [[ATOMIC_TEMP226]], align 1
// CHK-C-NEXT:    [[BF_LOAD227:%.*]] = load i8, ptr [[ATOMIC_TEMP226]], align 1
// CHK-C-NEXT:    [[BF_ASHR228:%.*]] = ashr i8 [[BF_LOAD227]], 7
// CHK-C-NEXT:    [[BF_CAST:%.*]] = sext i8 [[BF_ASHR228]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST]], ptr [[ATMP225]], align 4
// CHK-C-NEXT:    [[CMP229:%.*]] = icmp slt i32 [[BF_CAST]], [[TMP90]]
// CHK-C-NEXT:    [[FROMBOOL231:%.*]] = zext i1 [[CMP229]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL231]], ptr [[ATMP230]], align 1
// CHK-C-NEXT:    br i1 [[CMP229]], label [[ATOMIC_CONT232:%.*]], label [[ATOMIC_EXIT246:%.*]]
// CHK-C:       atomic_cont232:
// CHK-C-NEXT:    [[TMP91:%.*]] = phi i8 [ [[ATOMIC_LOAD224]], [[ATOMIC_CAPTURE_CONT223]] ], [ [[TMP95:%.*]], [[ATOMIC_CMP239:%.*]] ]
// CHK-C-NEXT:    store i8 [[TMP91]], ptr [[ATOMIC_TEMP233]], align 1
// CHK-C-NEXT:    [[TMP92:%.*]] = trunc i32 [[TMP90]] to i8
// CHK-C-NEXT:    [[BF_LOAD234:%.*]] = load i8, ptr [[ATOMIC_TEMP233]], align 1
// CHK-C-NEXT:    [[BF_VALUE235:%.*]] = and i8 [[TMP92]], 1
// CHK-C-NEXT:    [[BF_SHL236:%.*]] = shl i8 [[BF_VALUE235]], 7
// CHK-C-NEXT:    [[BF_CLEAR237:%.*]] = and i8 [[BF_LOAD234]], 127
// CHK-C-NEXT:    [[BF_SET238:%.*]] = or i8 [[BF_CLEAR237]], [[BF_SHL236]]
// CHK-C-NEXT:    store i8 [[BF_SET238]], ptr [[ATOMIC_TEMP233]], align 1
// CHK-C-NEXT:    [[TMP93:%.*]] = load i8, ptr [[ATOMIC_TEMP233]], align 1
// CHK-C-NEXT:    [[TMP94:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx2_packed, i64 3), i8 [[TMP91]], i8 [[TMP93]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP95]] = extractvalue { i8, i1 } [[TMP94]], 0
// CHK-C-NEXT:    [[TMP96:%.*]] = extractvalue { i8, i1 } [[TMP94]], 1
// CHK-C-NEXT:    br i1 [[TMP96]], label [[ATOMIC_EXIT246]], label [[ATOMIC_CMP239]]
// CHK-C:       atomic_cmp239:
// CHK-C-NEXT:    store i8 [[TMP95]], ptr [[ATOMIC_TEMP240]], align 1
// CHK-C-NEXT:    [[BF_LOAD241:%.*]] = load i8, ptr [[ATOMIC_TEMP240]], align 1
// CHK-C-NEXT:    [[BF_ASHR242:%.*]] = ashr i8 [[BF_LOAD241]], 7
// CHK-C-NEXT:    [[BF_CAST243:%.*]] = sext i8 [[BF_ASHR242]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST243]], ptr [[ATMP225]], align 4
// CHK-C-NEXT:    [[CMP244:%.*]] = icmp slt i32 [[BF_CAST243]], [[TMP90]]
// CHK-C-NEXT:    [[FROMBOOL245:%.*]] = zext i1 [[CMP244]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL245]], ptr [[ATMP230]], align 1
// CHK-C-NEXT:    br i1 [[CMP244]], label [[ATOMIC_CONT232]], label [[ATOMIC_EXIT246]]
// CHK-C:       atomic_exit246:
// CHK-C-NEXT:    [[TMP97:%.*]] = load i32, ptr [[ATMP225]], align 4
// CHK-C-NEXT:    [[TMP98:%.*]] = load i8, ptr [[ATMP230]], align 1
// CHK-C-NEXT:    store i32 [[TMP97]], ptr [[V]], align 4
// CHK-C-NEXT:    [[TMP99:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD247:%.*]] = load atomic i8, ptr getelementptr (i8, ptr @bfx2_packed, i64 3) monotonic, align 1
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD247]], ptr [[ATOMIC_TEMP249]], align 1
// CHK-C-NEXT:    [[BF_LOAD250:%.*]] = load i8, ptr [[ATOMIC_TEMP249]], align 1
// CHK-C-NEXT:    [[BF_ASHR251:%.*]] = ashr i8 [[BF_LOAD250]], 7
// CHK-C-NEXT:    [[BF_CAST252:%.*]] = sext i8 [[BF_ASHR251]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST252]], ptr [[ATMP248]], align 4
// CHK-C-NEXT:    [[CMP253:%.*]] = icmp slt i32 [[BF_CAST252]], [[TMP99]]
// CHK-C-NEXT:    [[FROMBOOL255:%.*]] = zext i1 [[CMP253]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL255]], ptr [[ATMP254]], align 1
// CHK-C-NEXT:    br i1 [[CMP253]], label [[ATOMIC_CONT256:%.*]], label [[ATOMIC_EXIT271:%.*]]
// CHK-C:       atomic_cont256:
// CHK-C-NEXT:    [[TMP100:%.*]] = phi i8 [ [[ATOMIC_LOAD247]], [[ATOMIC_EXIT246]] ], [ [[TMP104:%.*]], [[ATOMIC_CMP264:%.*]] ]
// CHK-C-NEXT:    store i8 [[TMP100]], ptr [[ATOMIC_TEMP257]], align 1
// CHK-C-NEXT:    [[TMP101:%.*]] = trunc i32 [[TMP99]] to i8
// CHK-C-NEXT:    [[BF_LOAD258:%.*]] = load i8, ptr [[ATOMIC_TEMP257]], align 1
// CHK-C-NEXT:    [[BF_VALUE259:%.*]] = and i8 [[TMP101]], 1
// CHK-C-NEXT:    [[BF_SHL260:%.*]] = shl i8 [[BF_VALUE259]], 7
// CHK-C-NEXT:    [[BF_CLEAR261:%.*]] = and i8 [[BF_LOAD258]], 127
// CHK-C-NEXT:    [[BF_SET262:%.*]] = or i8 [[BF_CLEAR261]], [[BF_SHL260]]
// CHK-C-NEXT:    store i8 [[BF_SET262]], ptr [[ATOMIC_TEMP257]], align 1
// CHK-C-NEXT:    [[TMP102:%.*]] = load i8, ptr [[ATOMIC_TEMP257]], align 1
// CHK-C-NEXT:    [[TMP103:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx2_packed, i64 3), i8 [[TMP100]], i8 [[TMP102]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP104]] = extractvalue { i8, i1 } [[TMP103]], 0
// CHK-C-NEXT:    [[TMP105:%.*]] = extractvalue { i8, i1 } [[TMP103]], 1
// CHK-C-NEXT:    br i1 [[TMP105]], label [[ATOMIC_UPD_EXIT263:%.*]], label [[ATOMIC_CMP264]]
// CHK-C:       atomic_upd_exit263:
// CHK-C-NEXT:    store i32 [[TMP99]], ptr [[ATMP248]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT271]]
// CHK-C:       atomic_cmp264:
// CHK-C-NEXT:    store i8 [[TMP104]], ptr [[ATOMIC_TEMP265]], align 1
// CHK-C-NEXT:    [[BF_LOAD266:%.*]] = load i8, ptr [[ATOMIC_TEMP265]], align 1
// CHK-C-NEXT:    [[BF_ASHR267:%.*]] = ashr i8 [[BF_LOAD266]], 7
// CHK-C-NEXT:    [[BF_CAST268:%.*]] = sext i8 [[BF_ASHR267]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST268]], ptr [[ATMP248]], align 4
// CHK-C-NEXT:    [[CMP269:%.*]] = icmp slt i32 [[BF_CAST268]], [[TMP99]]
// CHK-C-NEXT:    [[FROMBOOL270:%.*]] = zext i1 [[CMP269]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL270]], ptr [[ATMP254]], align 1
// CHK-C-NEXT:    br i1 [[CMP269]], label [[ATOMIC_CONT256]], label [[ATOMIC_EXIT271]]
// CHK-C:       atomic_exit271:
// CHK-C-NEXT:    [[TMP106:%.*]] = load i32, ptr [[ATMP248]], align 4
// CHK-C-NEXT:    [[TMP107:%.*]] = load i8, ptr [[ATMP254]], align 1
// CHK-C-NEXT:    store i32 [[TMP106]], ptr [[V]], align 4
// CHK-C-NEXT:    [[TMP108:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[TMP109:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD272:%.*]] = load atomic i8, ptr getelementptr (i8, ptr @bfx2_packed, i64 3) monotonic, align 1
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD272]], ptr [[ATOMIC_TEMP274]], align 1
// CHK-C-NEXT:    [[BF_LOAD275:%.*]] = load i8, ptr [[ATOMIC_TEMP274]], align 1
// CHK-C-NEXT:    [[BF_ASHR276:%.*]] = ashr i8 [[BF_LOAD275]], 7
// CHK-C-NEXT:    [[BF_CAST277:%.*]] = sext i8 [[BF_ASHR276]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST277]], ptr [[ATMP273]], align 4
// CHK-C-NEXT:    [[CMP278:%.*]] = icmp eq i32 [[BF_CAST277]], [[TMP109]]
// CHK-C-NEXT:    [[FROMBOOL280:%.*]] = zext i1 [[CMP278]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL280]], ptr [[ATMP279]], align 1
// CHK-C-NEXT:    br i1 [[CMP278]], label [[ATOMIC_CONT281:%.*]], label [[ATOMIC_EXIT296:%.*]]
// CHK-C:       atomic_cont281:
// CHK-C-NEXT:    [[TMP110:%.*]] = phi i8 [ [[ATOMIC_LOAD272]], [[ATOMIC_EXIT271]] ], [ [[TMP114:%.*]], [[ATOMIC_CMP289:%.*]] ]
// CHK-C-NEXT:    store i8 [[TMP110]], ptr [[ATOMIC_TEMP282]], align 1
// CHK-C-NEXT:    [[TMP111:%.*]] = trunc i32 [[TMP108]] to i8
// CHK-C-NEXT:    [[BF_LOAD283:%.*]] = load i8, ptr [[ATOMIC_TEMP282]], align 1
// CHK-C-NEXT:    [[BF_VALUE284:%.*]] = and i8 [[TMP111]], 1
// CHK-C-NEXT:    [[BF_SHL285:%.*]] = shl i8 [[BF_VALUE284]], 7
// CHK-C-NEXT:    [[BF_CLEAR286:%.*]] = and i8 [[BF_LOAD283]], 127
// CHK-C-NEXT:    [[BF_SET287:%.*]] = or i8 [[BF_CLEAR286]], [[BF_SHL285]]
// CHK-C-NEXT:    store i8 [[BF_SET287]], ptr [[ATOMIC_TEMP282]], align 1
// CHK-C-NEXT:    [[TMP112:%.*]] = load i8, ptr [[ATOMIC_TEMP282]], align 1
// CHK-C-NEXT:    [[TMP113:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx2_packed, i64 3), i8 [[TMP110]], i8 [[TMP112]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP114]] = extractvalue { i8, i1 } [[TMP113]], 0
// CHK-C-NEXT:    [[TMP115:%.*]] = extractvalue { i8, i1 } [[TMP113]], 1
// CHK-C-NEXT:    br i1 [[TMP115]], label [[ATOMIC_UPD_EXIT288:%.*]], label [[ATOMIC_CMP289]]
// CHK-C:       atomic_upd_exit288:
// CHK-C-NEXT:    store i32 [[TMP108]], ptr [[ATMP273]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT296]]
// CHK-C:       atomic_cmp289:
// CHK-C-NEXT:    store i8 [[TMP114]], ptr [[ATOMIC_TEMP290]], align 1
// CHK-C-NEXT:    [[BF_LOAD291:%.*]] = load i8, ptr [[ATOMIC_TEMP290]], align 1
// CHK-C-NEXT:    [[BF_ASHR292:%.*]] = ashr i8 [[BF_LOAD291]], 7
// CHK-C-NEXT:    [[BF_CAST293:%.*]] = sext i8 [[BF_ASHR292]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST293]], ptr [[ATMP273]], align 4
// CHK-C-NEXT:    [[CMP294:%.*]] = icmp eq i32 [[BF_CAST293]], [[TMP109]]
// CHK-C-NEXT:    [[FROMBOOL295:%.*]] = zext i1 [[CMP294]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL295]], ptr [[ATMP279]], align 1
// CHK-C-NEXT:    br i1 [[CMP294]], label [[ATOMIC_CONT281]], label [[ATOMIC_EXIT296]]
// CHK-C:       atomic_exit296:
// CHK-C-NEXT:    [[TMP116:%.*]] = load i32, ptr [[ATMP273]], align 4
// CHK-C-NEXT:    [[TMP117:%.*]] = load i8, ptr [[ATMP279]], align 1
// CHK-C-NEXT:    [[TMP118:%.*]] = trunc i8 [[TMP117]] to i1
// CHK-C-NEXT:    br i1 [[TMP118]], label [[ATOMIC_CAPTURE_CONT298:%.*]], label [[ATOMIC_CAPTURE297:%.*]]
// CHK-C:       atomic_capture297:
// CHK-C-NEXT:    store i32 [[TMP116]], ptr [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT298]]
// CHK-C:       atomic_capture_cont298:
// CHK-C-NEXT:    [[TMP119:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[TMP120:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD299:%.*]] = load atomic i8, ptr getelementptr (i8, ptr @bfx2_packed, i64 3) monotonic, align 1
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD299]], ptr [[ATOMIC_TEMP301]], align 1
// CHK-C-NEXT:    [[BF_LOAD302:%.*]] = load i8, ptr [[ATOMIC_TEMP301]], align 1
// CHK-C-NEXT:    [[BF_ASHR303:%.*]] = ashr i8 [[BF_LOAD302]], 7
// CHK-C-NEXT:    [[BF_CAST304:%.*]] = sext i8 [[BF_ASHR303]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST304]], ptr [[ATMP300]], align 4
// CHK-C-NEXT:    [[CMP305:%.*]] = icmp eq i32 [[BF_CAST304]], [[TMP120]]
// CHK-C-NEXT:    [[FROMBOOL307:%.*]] = zext i1 [[CMP305]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL307]], ptr [[ATMP306]], align 1
// CHK-C-NEXT:    br i1 [[CMP305]], label [[ATOMIC_CONT308:%.*]], label [[ATOMIC_EXIT322:%.*]]
// CHK-C:       atomic_cont308:
// CHK-C-NEXT:    [[TMP121:%.*]] = phi i8 [ [[ATOMIC_LOAD299]], [[ATOMIC_CAPTURE_CONT298]] ], [ [[TMP125:%.*]], [[ATOMIC_CMP315:%.*]] ]
// CHK-C-NEXT:    store i8 [[TMP121]], ptr [[ATOMIC_TEMP309]], align 1
// CHK-C-NEXT:    [[TMP122:%.*]] = trunc i32 [[TMP119]] to i8
// CHK-C-NEXT:    [[BF_LOAD310:%.*]] = load i8, ptr [[ATOMIC_TEMP309]], align 1
// CHK-C-NEXT:    [[BF_VALUE311:%.*]] = and i8 [[TMP122]], 1
// CHK-C-NEXT:    [[BF_SHL312:%.*]] = shl i8 [[BF_VALUE311]], 7
// CHK-C-NEXT:    [[BF_CLEAR313:%.*]] = and i8 [[BF_LOAD310]], 127
// CHK-C-NEXT:    [[BF_SET314:%.*]] = or i8 [[BF_CLEAR313]], [[BF_SHL312]]
// CHK-C-NEXT:    store i8 [[BF_SET314]], ptr [[ATOMIC_TEMP309]], align 1
// CHK-C-NEXT:    [[TMP123:%.*]] = load i8, ptr [[ATOMIC_TEMP309]], align 1
// CHK-C-NEXT:    [[TMP124:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx2_packed, i64 3), i8 [[TMP121]], i8 [[TMP123]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP125]] = extractvalue { i8, i1 } [[TMP124]], 0
// CHK-C-NEXT:    [[TMP126:%.*]] = extractvalue { i8, i1 } [[TMP124]], 1
// CHK-C-NEXT:    br i1 [[TMP126]], label [[ATOMIC_EXIT322]], label [[ATOMIC_CMP315]]
// CHK-C:       atomic_cmp315:
// CHK-C-NEXT:    store i8 [[TMP125]], ptr [[ATOMIC_TEMP316]], align 1
// CHK-C-NEXT:    [[BF_LOAD317:%.*]] = load i8, ptr [[ATOMIC_TEMP316]], align 1
// CHK-C-NEXT:    [[BF_ASHR318:%.*]] = ashr i8 [[BF_LOAD317]], 7
// CHK-C-NEXT:    [[BF_CAST319:%.*]] = sext i8 [[BF_ASHR318]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST319]], ptr [[ATMP300]], align 4
// CHK-C-NEXT:    [[CMP320:%.*]] = icmp eq i32 [[BF_CAST319]], [[TMP120]]
// CHK-C-NEXT:    [[FROMBOOL321:%.*]] = zext i1 [[CMP320]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL321]], ptr [[ATMP306]], align 1
// CHK-C-NEXT:    br i1 [[CMP320]], label [[ATOMIC_CONT308]], label [[ATOMIC_EXIT322]]
// CHK-C:       atomic_exit322:
// CHK-C-NEXT:    [[TMP127:%.*]] = load i32, ptr [[ATMP300]], align 4
// CHK-C-NEXT:    [[TMP128:%.*]] = load i8, ptr [[ATMP306]], align 1
// CHK-C-NEXT:    [[CONV323:%.*]] = zext i8 [[TMP128]] to i32
// CHK-C-NEXT:    store i32 [[CONV323]], ptr [[R]], align 4
// CHK-C-NEXT:    [[TMP129:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[TMP130:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD324:%.*]] = load atomic i8, ptr getelementptr (i8, ptr @bfx2_packed, i64 3) monotonic, align 1
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD324]], ptr [[ATOMIC_TEMP326]], align 1
// CHK-C-NEXT:    [[BF_LOAD327:%.*]] = load i8, ptr [[ATOMIC_TEMP326]], align 1
// CHK-C-NEXT:    [[BF_ASHR328:%.*]] = ashr i8 [[BF_LOAD327]], 7
// CHK-C-NEXT:    [[BF_CAST329:%.*]] = sext i8 [[BF_ASHR328]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST329]], ptr [[ATMP325]], align 4
// CHK-C-NEXT:    [[CMP330:%.*]] = icmp eq i32 [[BF_CAST329]], [[TMP130]]
// CHK-C-NEXT:    [[FROMBOOL332:%.*]] = zext i1 [[CMP330]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL332]], ptr [[ATMP331]], align 1
// CHK-C-NEXT:    br i1 [[CMP330]], label [[ATOMIC_CONT333:%.*]], label [[ATOMIC_EXIT347:%.*]]
// CHK-C:       atomic_cont333:
// CHK-C-NEXT:    [[TMP131:%.*]] = phi i8 [ [[ATOMIC_LOAD324]], [[ATOMIC_EXIT322]] ], [ [[TMP135:%.*]], [[ATOMIC_CMP340:%.*]] ]
// CHK-C-NEXT:    store i8 [[TMP131]], ptr [[ATOMIC_TEMP334]], align 1
// CHK-C-NEXT:    [[TMP132:%.*]] = trunc i32 [[TMP129]] to i8
// CHK-C-NEXT:    [[BF_LOAD335:%.*]] = load i8, ptr [[ATOMIC_TEMP334]], align 1
// CHK-C-NEXT:    [[BF_VALUE336:%.*]] = and i8 [[TMP132]], 1
// CHK-C-NEXT:    [[BF_SHL337:%.*]] = shl i8 [[BF_VALUE336]], 7
// CHK-C-NEXT:    [[BF_CLEAR338:%.*]] = and i8 [[BF_LOAD335]], 127
// CHK-C-NEXT:    [[BF_SET339:%.*]] = or i8 [[BF_CLEAR338]], [[BF_SHL337]]
// CHK-C-NEXT:    store i8 [[BF_SET339]], ptr [[ATOMIC_TEMP334]], align 1
// CHK-C-NEXT:    [[TMP133:%.*]] = load i8, ptr [[ATOMIC_TEMP334]], align 1
// CHK-C-NEXT:    [[TMP134:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx2_packed, i64 3), i8 [[TMP131]], i8 [[TMP133]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP135]] = extractvalue { i8, i1 } [[TMP134]], 0
// CHK-C-NEXT:    [[TMP136:%.*]] = extractvalue { i8, i1 } [[TMP134]], 1
// CHK-C-NEXT:    br i1 [[TMP136]], label [[ATOMIC_EXIT347]], label [[ATOMIC_CMP340]]
// CHK-C:       atomic_cmp340:
// CHK-C-NEXT:    store i8 [[TMP135]], ptr [[ATOMIC_TEMP341]], align 1
// CHK-C-NEXT:    [[BF_LOAD342:%.*]] = load i8, ptr [[ATOMIC_TEMP341]], align 1
// CHK-C-NEXT:    [[BF_ASHR343:%.*]] = ashr i8 [[BF_LOAD342]], 7
// CHK-C-NEXT:    [[BF_CAST344:%.*]] = sext i8 [[BF_ASHR343]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST344]], ptr [[ATMP325]], align 4
// CHK-C-NEXT:    [[CMP345:%.*]] = icmp eq i32 [[BF_CAST344]], [[TMP130]]
// CHK-C-NEXT:    [[FROMBOOL346:%.*]] = zext i1 [[CMP345]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL346]], ptr [[ATMP331]], align 1
// CHK-C-NEXT:    br i1 [[CMP345]], label [[ATOMIC_CONT333]], label [[ATOMIC_EXIT347]]
// CHK-C:       atomic_exit347:
// CHK-C-NEXT:    [[TMP137:%.*]] = load i32, ptr [[ATMP325]], align 4
// CHK-C-NEXT:    [[TMP138:%.*]] = load i8, ptr [[ATMP331]], align 1
// CHK-C-NEXT:    [[CONV348:%.*]] = zext i8 [[TMP138]] to i32
// CHK-C-NEXT:    store i32 [[CONV348]], ptr [[R]], align 4
// CHK-C-NEXT:    [[TMP139:%.*]] = trunc i8 [[TMP138]] to i1
// CHK-C-NEXT:    br i1 [[TMP139]], label [[ATOMIC_CAPTURE_CONT350:%.*]], label [[ATOMIC_CAPTURE349:%.*]]
// CHK-C:       atomic_capture349:
// CHK-C-NEXT:    store i32 [[TMP137]], ptr [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT350]]
// CHK-C:       atomic_capture_cont350:
// CHK-C-NEXT:    [[TMP140:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD351:%.*]] = load atomic i32, ptr @bfx3 monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD351]], ptr [[ATOMIC_TEMP353]], align 4
// CHK-C-NEXT:    [[BF_LOAD354:%.*]] = load i32, ptr [[ATOMIC_TEMP353]], align 4
// CHK-C-NEXT:    [[BF_SHL355:%.*]] = shl i32 [[BF_LOAD354]], 7
// CHK-C-NEXT:    [[BF_ASHR356:%.*]] = ashr i32 [[BF_SHL355]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR356]], ptr [[ATMP352]], align 4
// CHK-C-NEXT:    [[CMP357:%.*]] = icmp slt i32 [[BF_ASHR356]], [[TMP140]]
// CHK-C-NEXT:    [[FROMBOOL359:%.*]] = zext i1 [[CMP357]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL359]], ptr [[ATMP358]], align 1
// CHK-C-NEXT:    br i1 [[CMP357]], label [[ATOMIC_CONT360:%.*]], label [[ATOMIC_EXIT374:%.*]]
// CHK-C:       atomic_cont360:
// CHK-C-NEXT:    [[TMP141:%.*]] = phi i32 [ [[ATOMIC_LOAD351]], [[ATOMIC_CAPTURE_CONT350]] ], [ [[TMP144:%.*]], [[ATOMIC_CMP367:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP141]], ptr [[ATOMIC_TEMP361]], align 4
// CHK-C-NEXT:    [[BF_LOAD362:%.*]] = load i32, ptr [[ATOMIC_TEMP361]], align 4
// CHK-C-NEXT:    [[BF_VALUE363:%.*]] = and i32 [[TMP140]], 16383
// CHK-C-NEXT:    [[BF_SHL364:%.*]] = shl i32 [[BF_VALUE363]], 11
// CHK-C-NEXT:    [[BF_CLEAR365:%.*]] = and i32 [[BF_LOAD362]], -33552385
// CHK-C-NEXT:    [[BF_SET366:%.*]] = or i32 [[BF_CLEAR365]], [[BF_SHL364]]
// CHK-C-NEXT:    store i32 [[BF_SET366]], ptr [[ATOMIC_TEMP361]], align 4
// CHK-C-NEXT:    [[TMP142:%.*]] = load i32, ptr [[ATOMIC_TEMP361]], align 4
// CHK-C-NEXT:    [[TMP143:%.*]] = cmpxchg ptr @bfx3, i32 [[TMP141]], i32 [[TMP142]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP144]] = extractvalue { i32, i1 } [[TMP143]], 0
// CHK-C-NEXT:    [[TMP145:%.*]] = extractvalue { i32, i1 } [[TMP143]], 1
// CHK-C-NEXT:    br i1 [[TMP145]], label [[ATOMIC_EXIT374]], label [[ATOMIC_CMP367]]
// CHK-C:       atomic_cmp367:
// CHK-C-NEXT:    store i32 [[TMP144]], ptr [[ATOMIC_TEMP368]], align 4
// CHK-C-NEXT:    [[BF_LOAD369:%.*]] = load i32, ptr [[ATOMIC_TEMP368]], align 4
// CHK-C-NEXT:    [[BF_SHL370:%.*]] = shl i32 [[BF_LOAD369]], 7
// CHK-C-NEXT:    [[BF_ASHR371:%.*]] = ashr i32 [[BF_SHL370]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR371]], ptr [[ATMP352]], align 4
// CHK-C-NEXT:    [[CMP372:%.*]] = icmp slt i32 [[BF_ASHR371]], [[TMP140]]
// CHK-C-NEXT:    [[FROMBOOL373:%.*]] = zext i1 [[CMP372]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL373]], ptr [[ATMP358]], align 1
// CHK-C-NEXT:    br i1 [[CMP372]], label [[ATOMIC_CONT360]], label [[ATOMIC_EXIT374]]
// CHK-C:       atomic_exit374:
// CHK-C-NEXT:    [[TMP146:%.*]] = load i32, ptr [[ATMP352]], align 4
// CHK-C-NEXT:    [[TMP147:%.*]] = load i8, ptr [[ATMP358]], align 1
// CHK-C-NEXT:    store i32 [[TMP146]], ptr [[V]], align 4
// CHK-C-NEXT:    [[TMP148:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD375:%.*]] = load atomic i32, ptr @bfx3 monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD375]], ptr [[ATOMIC_TEMP377]], align 4
// CHK-C-NEXT:    [[BF_LOAD378:%.*]] = load i32, ptr [[ATOMIC_TEMP377]], align 4
// CHK-C-NEXT:    [[BF_SHL379:%.*]] = shl i32 [[BF_LOAD378]], 7
// CHK-C-NEXT:    [[BF_ASHR380:%.*]] = ashr i32 [[BF_SHL379]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR380]], ptr [[ATMP376]], align 4
// CHK-C-NEXT:    [[CMP381:%.*]] = icmp slt i32 [[BF_ASHR380]], [[TMP148]]
// CHK-C-NEXT:    [[FROMBOOL383:%.*]] = zext i1 [[CMP381]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL383]], ptr [[ATMP382]], align 1
// CHK-C-NEXT:    br i1 [[CMP381]], label [[ATOMIC_CONT384:%.*]], label [[ATOMIC_EXIT399:%.*]]
// CHK-C:       atomic_cont384:
// CHK-C-NEXT:    [[TMP149:%.*]] = phi i32 [ [[ATOMIC_LOAD375]], [[ATOMIC_EXIT374]] ], [ [[TMP152:%.*]], [[ATOMIC_CMP392:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP149]], ptr [[ATOMIC_TEMP385]], align 4
// CHK-C-NEXT:    [[BF_LOAD386:%.*]] = load i32, ptr [[ATOMIC_TEMP385]], align 4
// CHK-C-NEXT:    [[BF_VALUE387:%.*]] = and i32 [[TMP148]], 16383
// CHK-C-NEXT:    [[BF_SHL388:%.*]] = shl i32 [[BF_VALUE387]], 11
// CHK-C-NEXT:    [[BF_CLEAR389:%.*]] = and i32 [[BF_LOAD386]], -33552385
// CHK-C-NEXT:    [[BF_SET390:%.*]] = or i32 [[BF_CLEAR389]], [[BF_SHL388]]
// CHK-C-NEXT:    store i32 [[BF_SET390]], ptr [[ATOMIC_TEMP385]], align 4
// CHK-C-NEXT:    [[TMP150:%.*]] = load i32, ptr [[ATOMIC_TEMP385]], align 4
// CHK-C-NEXT:    [[TMP151:%.*]] = cmpxchg ptr @bfx3, i32 [[TMP149]], i32 [[TMP150]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP152]] = extractvalue { i32, i1 } [[TMP151]], 0
// CHK-C-NEXT:    [[TMP153:%.*]] = extractvalue { i32, i1 } [[TMP151]], 1
// CHK-C-NEXT:    br i1 [[TMP153]], label [[ATOMIC_UPD_EXIT391:%.*]], label [[ATOMIC_CMP392]]
// CHK-C:       atomic_upd_exit391:
// CHK-C-NEXT:    store i32 [[TMP148]], ptr [[ATMP376]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT399]]
// CHK-C:       atomic_cmp392:
// CHK-C-NEXT:    store i32 [[TMP152]], ptr [[ATOMIC_TEMP393]], align 4
// CHK-C-NEXT:    [[BF_LOAD394:%.*]] = load i32, ptr [[ATOMIC_TEMP393]], align 4
// CHK-C-NEXT:    [[BF_SHL395:%.*]] = shl i32 [[BF_LOAD394]], 7
// CHK-C-NEXT:    [[BF_ASHR396:%.*]] = ashr i32 [[BF_SHL395]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR396]], ptr [[ATMP376]], align 4
// CHK-C-NEXT:    [[CMP397:%.*]] = icmp slt i32 [[BF_ASHR396]], [[TMP148]]
// CHK-C-NEXT:    [[FROMBOOL398:%.*]] = zext i1 [[CMP397]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL398]], ptr [[ATMP382]], align 1
// CHK-C-NEXT:    br i1 [[CMP397]], label [[ATOMIC_CONT384]], label [[ATOMIC_EXIT399]]
// CHK-C:       atomic_exit399:
// CHK-C-NEXT:    [[TMP154:%.*]] = load i32, ptr [[ATMP376]], align 4
// CHK-C-NEXT:    [[TMP155:%.*]] = load i8, ptr [[ATMP382]], align 1
// CHK-C-NEXT:    store i32 [[TMP154]], ptr [[V]], align 4
// CHK-C-NEXT:    [[TMP156:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[TMP157:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD400:%.*]] = load atomic i32, ptr @bfx3 monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD400]], ptr [[ATOMIC_TEMP402]], align 4
// CHK-C-NEXT:    [[BF_LOAD403:%.*]] = load i32, ptr [[ATOMIC_TEMP402]], align 4
// CHK-C-NEXT:    [[BF_SHL404:%.*]] = shl i32 [[BF_LOAD403]], 7
// CHK-C-NEXT:    [[BF_ASHR405:%.*]] = ashr i32 [[BF_SHL404]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR405]], ptr [[ATMP401]], align 4
// CHK-C-NEXT:    [[CMP406:%.*]] = icmp eq i32 [[BF_ASHR405]], [[TMP157]]
// CHK-C-NEXT:    [[FROMBOOL408:%.*]] = zext i1 [[CMP406]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL408]], ptr [[ATMP407]], align 1
// CHK-C-NEXT:    br i1 [[CMP406]], label [[ATOMIC_CONT409:%.*]], label [[ATOMIC_EXIT424:%.*]]
// CHK-C:       atomic_cont409:
// CHK-C-NEXT:    [[TMP158:%.*]] = phi i32 [ [[ATOMIC_LOAD400]], [[ATOMIC_EXIT399]] ], [ [[TMP161:%.*]], [[ATOMIC_CMP417:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP158]], ptr [[ATOMIC_TEMP410]], align 4
// CHK-C-NEXT:    [[BF_LOAD411:%.*]] = load i32, ptr [[ATOMIC_TEMP410]], align 4
// CHK-C-NEXT:    [[BF_VALUE412:%.*]] = and i32 [[TMP156]], 16383
// CHK-C-NEXT:    [[BF_SHL413:%.*]] = shl i32 [[BF_VALUE412]], 11
// CHK-C-NEXT:    [[BF_CLEAR414:%.*]] = and i32 [[BF_LOAD411]], -33552385
// CHK-C-NEXT:    [[BF_SET415:%.*]] = or i32 [[BF_CLEAR414]], [[BF_SHL413]]
// CHK-C-NEXT:    store i32 [[BF_SET415]], ptr [[ATOMIC_TEMP410]], align 4
// CHK-C-NEXT:    [[TMP159:%.*]] = load i32, ptr [[ATOMIC_TEMP410]], align 4
// CHK-C-NEXT:    [[TMP160:%.*]] = cmpxchg ptr @bfx3, i32 [[TMP158]], i32 [[TMP159]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP161]] = extractvalue { i32, i1 } [[TMP160]], 0
// CHK-C-NEXT:    [[TMP162:%.*]] = extractvalue { i32, i1 } [[TMP160]], 1
// CHK-C-NEXT:    br i1 [[TMP162]], label [[ATOMIC_UPD_EXIT416:%.*]], label [[ATOMIC_CMP417]]
// CHK-C:       atomic_upd_exit416:
// CHK-C-NEXT:    store i32 [[TMP156]], ptr [[ATMP401]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT424]]
// CHK-C:       atomic_cmp417:
// CHK-C-NEXT:    store i32 [[TMP161]], ptr [[ATOMIC_TEMP418]], align 4
// CHK-C-NEXT:    [[BF_LOAD419:%.*]] = load i32, ptr [[ATOMIC_TEMP418]], align 4
// CHK-C-NEXT:    [[BF_SHL420:%.*]] = shl i32 [[BF_LOAD419]], 7
// CHK-C-NEXT:    [[BF_ASHR421:%.*]] = ashr i32 [[BF_SHL420]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR421]], ptr [[ATMP401]], align 4
// CHK-C-NEXT:    [[CMP422:%.*]] = icmp eq i32 [[BF_ASHR421]], [[TMP157]]
// CHK-C-NEXT:    [[FROMBOOL423:%.*]] = zext i1 [[CMP422]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL423]], ptr [[ATMP407]], align 1
// CHK-C-NEXT:    br i1 [[CMP422]], label [[ATOMIC_CONT409]], label [[ATOMIC_EXIT424]]
// CHK-C:       atomic_exit424:
// CHK-C-NEXT:    [[TMP163:%.*]] = load i32, ptr [[ATMP401]], align 4
// CHK-C-NEXT:    [[TMP164:%.*]] = load i8, ptr [[ATMP407]], align 1
// CHK-C-NEXT:    [[TMP165:%.*]] = trunc i8 [[TMP164]] to i1
// CHK-C-NEXT:    br i1 [[TMP165]], label [[ATOMIC_CAPTURE_CONT426:%.*]], label [[ATOMIC_CAPTURE425:%.*]]
// CHK-C:       atomic_capture425:
// CHK-C-NEXT:    store i32 [[TMP163]], ptr [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT426]]
// CHK-C:       atomic_capture_cont426:
// CHK-C-NEXT:    [[TMP166:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[TMP167:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD427:%.*]] = load atomic i32, ptr @bfx3 monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD427]], ptr [[ATOMIC_TEMP429]], align 4
// CHK-C-NEXT:    [[BF_LOAD430:%.*]] = load i32, ptr [[ATOMIC_TEMP429]], align 4
// CHK-C-NEXT:    [[BF_SHL431:%.*]] = shl i32 [[BF_LOAD430]], 7
// CHK-C-NEXT:    [[BF_ASHR432:%.*]] = ashr i32 [[BF_SHL431]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR432]], ptr [[ATMP428]], align 4
// CHK-C-NEXT:    [[CMP433:%.*]] = icmp eq i32 [[BF_ASHR432]], [[TMP167]]
// CHK-C-NEXT:    [[FROMBOOL435:%.*]] = zext i1 [[CMP433]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL435]], ptr [[ATMP434]], align 1
// CHK-C-NEXT:    br i1 [[CMP433]], label [[ATOMIC_CONT436:%.*]], label [[ATOMIC_EXIT450:%.*]]
// CHK-C:       atomic_cont436:
// CHK-C-NEXT:    [[TMP168:%.*]] = phi i32 [ [[ATOMIC_LOAD427]], [[ATOMIC_CAPTURE_CONT426]] ], [ [[TMP171:%.*]], [[ATOMIC_CMP443:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP168]], ptr [[ATOMIC_TEMP437]], align 4
// CHK-C-NEXT:    [[BF_LOAD438:%.*]] = load i32, ptr [[ATOMIC_TEMP437]], align 4
// CHK-C-NEXT:    [[BF_VALUE439:%.*]] = and i32 [[TMP166]], 16383
// CHK-C-NEXT:    [[BF_SHL440:%.*]] = shl i32 [[BF_VALUE439]], 11
// CHK-C-NEXT:    [[BF_CLEAR441:%.*]] = and i32 [[BF_LOAD438]], -33552385
// CHK-C-NEXT:    [[BF_SET442:%.*]] = or i32 [[BF_CLEAR441]], [[BF_SHL440]]
// CHK-C-NEXT:    store i32 [[BF_SET442]], ptr [[ATOMIC_TEMP437]], align 4
// CHK-C-NEXT:    [[TMP169:%.*]] = load i32, ptr [[ATOMIC_TEMP437]], align 4
// CHK-C-NEXT:    [[TMP170:%.*]] = cmpxchg ptr @bfx3, i32 [[TMP168]], i32 [[TMP169]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP171]] = extractvalue { i32, i1 } [[TMP170]], 0
// CHK-C-NEXT:    [[TMP172:%.*]] = extractvalue { i32, i1 } [[TMP170]], 1
// CHK-C-NEXT:    br i1 [[TMP172]], label [[ATOMIC_EXIT450]], label [[ATOMIC_CMP443]]
// CHK-C:       atomic_cmp443:
// CHK-C-NEXT:    store i32 [[TMP171]], ptr [[ATOMIC_TEMP444]], align 4
// CHK-C-NEXT:    [[BF_LOAD445:%.*]] = load i32, ptr [[ATOMIC_TEMP444]], align 4
// CHK-C-NEXT:    [[BF_SHL446:%.*]] = shl i32 [[BF_LOAD445]], 7
// CHK-C-NEXT:    [[BF_ASHR447:%.*]] = ashr i32 [[BF_SHL446]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR447]], ptr [[ATMP428]], align 4
// CHK-C-NEXT:    [[CMP448:%.*]] = icmp eq i32 [[BF_ASHR447]], [[TMP167]]
// CHK-C-NEXT:    [[FROMBOOL449:%.*]] = zext i1 [[CMP448]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL449]], ptr [[ATMP434]], align 1
// CHK-C-NEXT:    br i1 [[CMP448]], label [[ATOMIC_CONT436]], label [[ATOMIC_EXIT450]]
// CHK-C:       atomic_exit450:
// CHK-C-NEXT:    [[TMP173:%.*]] = load i32, ptr [[ATMP428]], align 4
// CHK-C-NEXT:    [[TMP174:%.*]] = load i8, ptr [[ATMP434]], align 1
// CHK-C-NEXT:    [[CONV451:%.*]] = zext i8 [[TMP174]] to i32
// CHK-C-NEXT:    store i32 [[CONV451]], ptr [[R]], align 4
// CHK-C-NEXT:    [[TMP175:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[TMP176:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD452:%.*]] = load atomic i32, ptr @bfx3 monotonic, align 4
// CHK-C-NEXT:    store i32 [[ATOMIC_LOAD452]], ptr [[ATOMIC_TEMP454]], align 4
// CHK-C-NEXT:    [[BF_LOAD455:%.*]] = load i32, ptr [[ATOMIC_TEMP454]], align 4
// CHK-C-NEXT:    [[BF_SHL456:%.*]] = shl i32 [[BF_LOAD455]], 7
// CHK-C-NEXT:    [[BF_ASHR457:%.*]] = ashr i32 [[BF_SHL456]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR457]], ptr [[ATMP453]], align 4
// CHK-C-NEXT:    [[CMP458:%.*]] = icmp eq i32 [[BF_ASHR457]], [[TMP176]]
// CHK-C-NEXT:    [[FROMBOOL460:%.*]] = zext i1 [[CMP458]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL460]], ptr [[ATMP459]], align 1
// CHK-C-NEXT:    br i1 [[CMP458]], label [[ATOMIC_CONT461:%.*]], label [[ATOMIC_EXIT475:%.*]]
// CHK-C:       atomic_cont461:
// CHK-C-NEXT:    [[TMP177:%.*]] = phi i32 [ [[ATOMIC_LOAD452]], [[ATOMIC_EXIT450]] ], [ [[TMP180:%.*]], [[ATOMIC_CMP468:%.*]] ]
// CHK-C-NEXT:    store i32 [[TMP177]], ptr [[ATOMIC_TEMP462]], align 4
// CHK-C-NEXT:    [[BF_LOAD463:%.*]] = load i32, ptr [[ATOMIC_TEMP462]], align 4
// CHK-C-NEXT:    [[BF_VALUE464:%.*]] = and i32 [[TMP175]], 16383
// CHK-C-NEXT:    [[BF_SHL465:%.*]] = shl i32 [[BF_VALUE464]], 11
// CHK-C-NEXT:    [[BF_CLEAR466:%.*]] = and i32 [[BF_LOAD463]], -33552385
// CHK-C-NEXT:    [[BF_SET467:%.*]] = or i32 [[BF_CLEAR466]], [[BF_SHL465]]
// CHK-C-NEXT:    store i32 [[BF_SET467]], ptr [[ATOMIC_TEMP462]], align 4
// CHK-C-NEXT:    [[TMP178:%.*]] = load i32, ptr [[ATOMIC_TEMP462]], align 4
// CHK-C-NEXT:    [[TMP179:%.*]] = cmpxchg ptr @bfx3, i32 [[TMP177]], i32 [[TMP178]] monotonic monotonic, align 4
// CHK-C-NEXT:    [[TMP180]] = extractvalue { i32, i1 } [[TMP179]], 0
// CHK-C-NEXT:    [[TMP181:%.*]] = extractvalue { i32, i1 } [[TMP179]], 1
// CHK-C-NEXT:    br i1 [[TMP181]], label [[ATOMIC_EXIT475]], label [[ATOMIC_CMP468]]
// CHK-C:       atomic_cmp468:
// CHK-C-NEXT:    store i32 [[TMP180]], ptr [[ATOMIC_TEMP469]], align 4
// CHK-C-NEXT:    [[BF_LOAD470:%.*]] = load i32, ptr [[ATOMIC_TEMP469]], align 4
// CHK-C-NEXT:    [[BF_SHL471:%.*]] = shl i32 [[BF_LOAD470]], 7
// CHK-C-NEXT:    [[BF_ASHR472:%.*]] = ashr i32 [[BF_SHL471]], 18
// CHK-C-NEXT:    store i32 [[BF_ASHR472]], ptr [[ATMP453]], align 4
// CHK-C-NEXT:    [[CMP473:%.*]] = icmp eq i32 [[BF_ASHR472]], [[TMP176]]
// CHK-C-NEXT:    [[FROMBOOL474:%.*]] = zext i1 [[CMP473]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL474]], ptr [[ATMP459]], align 1
// CHK-C-NEXT:    br i1 [[CMP473]], label [[ATOMIC_CONT461]], label [[ATOMIC_EXIT475]]
// CHK-C:       atomic_exit475:
// CHK-C-NEXT:    [[TMP182:%.*]] = load i32, ptr [[ATMP453]], align 4
// CHK-C-NEXT:    [[TMP183:%.*]] = load i8, ptr [[ATMP459]], align 1
// CHK-C-NEXT:    [[CONV476:%.*]] = zext i8 [[TMP183]] to i32
// CHK-C-NEXT:    store i32 [[CONV476]], ptr [[R]], align 4
// CHK-C-NEXT:    [[TMP184:%.*]] = trunc i8 [[TMP183]] to i1
// CHK-C-NEXT:    br i1 [[TMP184]], label [[ATOMIC_CAPTURE_CONT478:%.*]], label [[ATOMIC_CAPTURE477:%.*]]
// CHK-C:       atomic_capture477:
// CHK-C-NEXT:    store i32 [[TMP182]], ptr [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT478]]
// CHK-C:       atomic_capture_cont478:
// CHK-C-NEXT:    [[TMP185:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD479:%.*]] = load atomic i64, ptr @bfx4 monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD479]], ptr [[ATOMIC_TEMP481]], align 8
// CHK-C-NEXT:    [[BF_LOAD482:%.*]] = load i64, ptr [[ATOMIC_TEMP481]], align 8
// CHK-C-NEXT:    [[BF_SHL483:%.*]] = shl i64 [[BF_LOAD482]], 47
// CHK-C-NEXT:    [[BF_ASHR484:%.*]] = ashr i64 [[BF_SHL483]], 63
// CHK-C-NEXT:    [[BF_CAST485:%.*]] = trunc i64 [[BF_ASHR484]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST485]], ptr [[ATMP480]], align 4
// CHK-C-NEXT:    [[CMP486:%.*]] = icmp slt i32 [[BF_CAST485]], [[TMP185]]
// CHK-C-NEXT:    [[FROMBOOL488:%.*]] = zext i1 [[CMP486]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL488]], ptr [[ATMP487]], align 1
// CHK-C-NEXT:    br i1 [[CMP486]], label [[ATOMIC_CONT489:%.*]], label [[ATOMIC_EXIT504:%.*]]
// CHK-C:       atomic_cont489:
// CHK-C-NEXT:    [[TMP186:%.*]] = phi i64 [ [[ATOMIC_LOAD479]], [[ATOMIC_CAPTURE_CONT478]] ], [ [[TMP190:%.*]], [[ATOMIC_CMP496:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP186]], ptr [[ATOMIC_TEMP490]], align 8
// CHK-C-NEXT:    [[TMP187:%.*]] = zext i32 [[TMP185]] to i64
// CHK-C-NEXT:    [[BF_LOAD491:%.*]] = load i64, ptr [[ATOMIC_TEMP490]], align 8
// CHK-C-NEXT:    [[BF_VALUE492:%.*]] = and i64 [[TMP187]], 1
// CHK-C-NEXT:    [[BF_SHL493:%.*]] = shl i64 [[BF_VALUE492]], 16
// CHK-C-NEXT:    [[BF_CLEAR494:%.*]] = and i64 [[BF_LOAD491]], -65537
// CHK-C-NEXT:    [[BF_SET495:%.*]] = or i64 [[BF_CLEAR494]], [[BF_SHL493]]
// CHK-C-NEXT:    store i64 [[BF_SET495]], ptr [[ATOMIC_TEMP490]], align 8
// CHK-C-NEXT:    [[TMP188:%.*]] = load i64, ptr [[ATOMIC_TEMP490]], align 8
// CHK-C-NEXT:    [[TMP189:%.*]] = cmpxchg ptr @bfx4, i64 [[TMP186]], i64 [[TMP188]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP190]] = extractvalue { i64, i1 } [[TMP189]], 0
// CHK-C-NEXT:    [[TMP191:%.*]] = extractvalue { i64, i1 } [[TMP189]], 1
// CHK-C-NEXT:    br i1 [[TMP191]], label [[ATOMIC_EXIT504]], label [[ATOMIC_CMP496]]
// CHK-C:       atomic_cmp496:
// CHK-C-NEXT:    store i64 [[TMP190]], ptr [[ATOMIC_TEMP497]], align 8
// CHK-C-NEXT:    [[BF_LOAD498:%.*]] = load i64, ptr [[ATOMIC_TEMP497]], align 8
// CHK-C-NEXT:    [[BF_SHL499:%.*]] = shl i64 [[BF_LOAD498]], 47
// CHK-C-NEXT:    [[BF_ASHR500:%.*]] = ashr i64 [[BF_SHL499]], 63
// CHK-C-NEXT:    [[BF_CAST501:%.*]] = trunc i64 [[BF_ASHR500]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST501]], ptr [[ATMP480]], align 4
// CHK-C-NEXT:    [[CMP502:%.*]] = icmp slt i32 [[BF_CAST501]], [[TMP185]]
// CHK-C-NEXT:    [[FROMBOOL503:%.*]] = zext i1 [[CMP502]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL503]], ptr [[ATMP487]], align 1
// CHK-C-NEXT:    br i1 [[CMP502]], label [[ATOMIC_CONT489]], label [[ATOMIC_EXIT504]]
// CHK-C:       atomic_exit504:
// CHK-C-NEXT:    [[TMP192:%.*]] = load i32, ptr [[ATMP480]], align 4
// CHK-C-NEXT:    [[TMP193:%.*]] = load i8, ptr [[ATMP487]], align 1
// CHK-C-NEXT:    store i32 [[TMP192]], ptr [[V]], align 4
// CHK-C-NEXT:    [[TMP194:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD505:%.*]] = load atomic i64, ptr @bfx4 monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD505]], ptr [[ATOMIC_TEMP507]], align 8
// CHK-C-NEXT:    [[BF_LOAD508:%.*]] = load i64, ptr [[ATOMIC_TEMP507]], align 8
// CHK-C-NEXT:    [[BF_SHL509:%.*]] = shl i64 [[BF_LOAD508]], 47
// CHK-C-NEXT:    [[BF_ASHR510:%.*]] = ashr i64 [[BF_SHL509]], 63
// CHK-C-NEXT:    [[BF_CAST511:%.*]] = trunc i64 [[BF_ASHR510]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST511]], ptr [[ATMP506]], align 4
// CHK-C-NEXT:    [[CMP512:%.*]] = icmp slt i32 [[BF_CAST511]], [[TMP194]]
// CHK-C-NEXT:    [[FROMBOOL514:%.*]] = zext i1 [[CMP512]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL514]], ptr [[ATMP513]], align 1
// CHK-C-NEXT:    br i1 [[CMP512]], label [[ATOMIC_CONT515:%.*]], label [[ATOMIC_EXIT531:%.*]]
// CHK-C:       atomic_cont515:
// CHK-C-NEXT:    [[TMP195:%.*]] = phi i64 [ [[ATOMIC_LOAD505]], [[ATOMIC_EXIT504]] ], [ [[TMP199:%.*]], [[ATOMIC_CMP523:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP195]], ptr [[ATOMIC_TEMP516]], align 8
// CHK-C-NEXT:    [[TMP196:%.*]] = zext i32 [[TMP194]] to i64
// CHK-C-NEXT:    [[BF_LOAD517:%.*]] = load i64, ptr [[ATOMIC_TEMP516]], align 8
// CHK-C-NEXT:    [[BF_VALUE518:%.*]] = and i64 [[TMP196]], 1
// CHK-C-NEXT:    [[BF_SHL519:%.*]] = shl i64 [[BF_VALUE518]], 16
// CHK-C-NEXT:    [[BF_CLEAR520:%.*]] = and i64 [[BF_LOAD517]], -65537
// CHK-C-NEXT:    [[BF_SET521:%.*]] = or i64 [[BF_CLEAR520]], [[BF_SHL519]]
// CHK-C-NEXT:    store i64 [[BF_SET521]], ptr [[ATOMIC_TEMP516]], align 8
// CHK-C-NEXT:    [[TMP197:%.*]] = load i64, ptr [[ATOMIC_TEMP516]], align 8
// CHK-C-NEXT:    [[TMP198:%.*]] = cmpxchg ptr @bfx4, i64 [[TMP195]], i64 [[TMP197]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP199]] = extractvalue { i64, i1 } [[TMP198]], 0
// CHK-C-NEXT:    [[TMP200:%.*]] = extractvalue { i64, i1 } [[TMP198]], 1
// CHK-C-NEXT:    br i1 [[TMP200]], label [[ATOMIC_UPD_EXIT522:%.*]], label [[ATOMIC_CMP523]]
// CHK-C:       atomic_upd_exit522:
// CHK-C-NEXT:    store i32 [[TMP194]], ptr [[ATMP506]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT531]]
// CHK-C:       atomic_cmp523:
// CHK-C-NEXT:    store i64 [[TMP199]], ptr [[ATOMIC_TEMP524]], align 8
// CHK-C-NEXT:    [[BF_LOAD525:%.*]] = load i64, ptr [[ATOMIC_TEMP524]], align 8
// CHK-C-NEXT:    [[BF_SHL526:%.*]] = shl i64 [[BF_LOAD525]], 47
// CHK-C-NEXT:    [[BF_ASHR527:%.*]] = ashr i64 [[BF_SHL526]], 63
// CHK-C-NEXT:    [[BF_CAST528:%.*]] = trunc i64 [[BF_ASHR527]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST528]], ptr [[ATMP506]], align 4
// CHK-C-NEXT:    [[CMP529:%.*]] = icmp slt i32 [[BF_CAST528]], [[TMP194]]
// CHK-C-NEXT:    [[FROMBOOL530:%.*]] = zext i1 [[CMP529]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL530]], ptr [[ATMP513]], align 1
// CHK-C-NEXT:    br i1 [[CMP529]], label [[ATOMIC_CONT515]], label [[ATOMIC_EXIT531]]
// CHK-C:       atomic_exit531:
// CHK-C-NEXT:    [[TMP201:%.*]] = load i32, ptr [[ATMP506]], align 4
// CHK-C-NEXT:    [[TMP202:%.*]] = load i8, ptr [[ATMP513]], align 1
// CHK-C-NEXT:    store i32 [[TMP201]], ptr [[V]], align 4
// CHK-C-NEXT:    [[TMP203:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[TMP204:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD532:%.*]] = load atomic i64, ptr @bfx4 monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD532]], ptr [[ATOMIC_TEMP534]], align 8
// CHK-C-NEXT:    [[BF_LOAD535:%.*]] = load i64, ptr [[ATOMIC_TEMP534]], align 8
// CHK-C-NEXT:    [[BF_SHL536:%.*]] = shl i64 [[BF_LOAD535]], 47
// CHK-C-NEXT:    [[BF_ASHR537:%.*]] = ashr i64 [[BF_SHL536]], 63
// CHK-C-NEXT:    [[BF_CAST538:%.*]] = trunc i64 [[BF_ASHR537]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST538]], ptr [[ATMP533]], align 4
// CHK-C-NEXT:    [[CMP539:%.*]] = icmp eq i32 [[BF_CAST538]], [[TMP204]]
// CHK-C-NEXT:    [[FROMBOOL541:%.*]] = zext i1 [[CMP539]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL541]], ptr [[ATMP540]], align 1
// CHK-C-NEXT:    br i1 [[CMP539]], label [[ATOMIC_CONT542:%.*]], label [[ATOMIC_EXIT558:%.*]]
// CHK-C:       atomic_cont542:
// CHK-C-NEXT:    [[TMP205:%.*]] = phi i64 [ [[ATOMIC_LOAD532]], [[ATOMIC_EXIT531]] ], [ [[TMP209:%.*]], [[ATOMIC_CMP550:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP205]], ptr [[ATOMIC_TEMP543]], align 8
// CHK-C-NEXT:    [[TMP206:%.*]] = zext i32 [[TMP203]] to i64
// CHK-C-NEXT:    [[BF_LOAD544:%.*]] = load i64, ptr [[ATOMIC_TEMP543]], align 8
// CHK-C-NEXT:    [[BF_VALUE545:%.*]] = and i64 [[TMP206]], 1
// CHK-C-NEXT:    [[BF_SHL546:%.*]] = shl i64 [[BF_VALUE545]], 16
// CHK-C-NEXT:    [[BF_CLEAR547:%.*]] = and i64 [[BF_LOAD544]], -65537
// CHK-C-NEXT:    [[BF_SET548:%.*]] = or i64 [[BF_CLEAR547]], [[BF_SHL546]]
// CHK-C-NEXT:    store i64 [[BF_SET548]], ptr [[ATOMIC_TEMP543]], align 8
// CHK-C-NEXT:    [[TMP207:%.*]] = load i64, ptr [[ATOMIC_TEMP543]], align 8
// CHK-C-NEXT:    [[TMP208:%.*]] = cmpxchg ptr @bfx4, i64 [[TMP205]], i64 [[TMP207]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP209]] = extractvalue { i64, i1 } [[TMP208]], 0
// CHK-C-NEXT:    [[TMP210:%.*]] = extractvalue { i64, i1 } [[TMP208]], 1
// CHK-C-NEXT:    br i1 [[TMP210]], label [[ATOMIC_UPD_EXIT549:%.*]], label [[ATOMIC_CMP550]]
// CHK-C:       atomic_upd_exit549:
// CHK-C-NEXT:    store i32 [[TMP203]], ptr [[ATMP533]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT558]]
// CHK-C:       atomic_cmp550:
// CHK-C-NEXT:    store i64 [[TMP209]], ptr [[ATOMIC_TEMP551]], align 8
// CHK-C-NEXT:    [[BF_LOAD552:%.*]] = load i64, ptr [[ATOMIC_TEMP551]], align 8
// CHK-C-NEXT:    [[BF_SHL553:%.*]] = shl i64 [[BF_LOAD552]], 47
// CHK-C-NEXT:    [[BF_ASHR554:%.*]] = ashr i64 [[BF_SHL553]], 63
// CHK-C-NEXT:    [[BF_CAST555:%.*]] = trunc i64 [[BF_ASHR554]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST555]], ptr [[ATMP533]], align 4
// CHK-C-NEXT:    [[CMP556:%.*]] = icmp eq i32 [[BF_CAST555]], [[TMP204]]
// CHK-C-NEXT:    [[FROMBOOL557:%.*]] = zext i1 [[CMP556]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL557]], ptr [[ATMP540]], align 1
// CHK-C-NEXT:    br i1 [[CMP556]], label [[ATOMIC_CONT542]], label [[ATOMIC_EXIT558]]
// CHK-C:       atomic_exit558:
// CHK-C-NEXT:    [[TMP211:%.*]] = load i32, ptr [[ATMP533]], align 4
// CHK-C-NEXT:    [[TMP212:%.*]] = load i8, ptr [[ATMP540]], align 1
// CHK-C-NEXT:    [[TMP213:%.*]] = trunc i8 [[TMP212]] to i1
// CHK-C-NEXT:    br i1 [[TMP213]], label [[ATOMIC_CAPTURE_CONT560:%.*]], label [[ATOMIC_CAPTURE559:%.*]]
// CHK-C:       atomic_capture559:
// CHK-C-NEXT:    store i32 [[TMP211]], ptr [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT560]]
// CHK-C:       atomic_capture_cont560:
// CHK-C-NEXT:    [[TMP214:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[TMP215:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD561:%.*]] = load atomic i64, ptr @bfx4 monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD561]], ptr [[ATOMIC_TEMP563]], align 8
// CHK-C-NEXT:    [[BF_LOAD564:%.*]] = load i64, ptr [[ATOMIC_TEMP563]], align 8
// CHK-C-NEXT:    [[BF_SHL565:%.*]] = shl i64 [[BF_LOAD564]], 47
// CHK-C-NEXT:    [[BF_ASHR566:%.*]] = ashr i64 [[BF_SHL565]], 63
// CHK-C-NEXT:    [[BF_CAST567:%.*]] = trunc i64 [[BF_ASHR566]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST567]], ptr [[ATMP562]], align 4
// CHK-C-NEXT:    [[CMP568:%.*]] = icmp eq i32 [[BF_CAST567]], [[TMP215]]
// CHK-C-NEXT:    [[FROMBOOL570:%.*]] = zext i1 [[CMP568]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL570]], ptr [[ATMP569]], align 1
// CHK-C-NEXT:    br i1 [[CMP568]], label [[ATOMIC_CONT571:%.*]], label [[ATOMIC_EXIT586:%.*]]
// CHK-C:       atomic_cont571:
// CHK-C-NEXT:    [[TMP216:%.*]] = phi i64 [ [[ATOMIC_LOAD561]], [[ATOMIC_CAPTURE_CONT560]] ], [ [[TMP220:%.*]], [[ATOMIC_CMP578:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP216]], ptr [[ATOMIC_TEMP572]], align 8
// CHK-C-NEXT:    [[TMP217:%.*]] = zext i32 [[TMP214]] to i64
// CHK-C-NEXT:    [[BF_LOAD573:%.*]] = load i64, ptr [[ATOMIC_TEMP572]], align 8
// CHK-C-NEXT:    [[BF_VALUE574:%.*]] = and i64 [[TMP217]], 1
// CHK-C-NEXT:    [[BF_SHL575:%.*]] = shl i64 [[BF_VALUE574]], 16
// CHK-C-NEXT:    [[BF_CLEAR576:%.*]] = and i64 [[BF_LOAD573]], -65537
// CHK-C-NEXT:    [[BF_SET577:%.*]] = or i64 [[BF_CLEAR576]], [[BF_SHL575]]
// CHK-C-NEXT:    store i64 [[BF_SET577]], ptr [[ATOMIC_TEMP572]], align 8
// CHK-C-NEXT:    [[TMP218:%.*]] = load i64, ptr [[ATOMIC_TEMP572]], align 8
// CHK-C-NEXT:    [[TMP219:%.*]] = cmpxchg ptr @bfx4, i64 [[TMP216]], i64 [[TMP218]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP220]] = extractvalue { i64, i1 } [[TMP219]], 0
// CHK-C-NEXT:    [[TMP221:%.*]] = extractvalue { i64, i1 } [[TMP219]], 1
// CHK-C-NEXT:    br i1 [[TMP221]], label [[ATOMIC_EXIT586]], label [[ATOMIC_CMP578]]
// CHK-C:       atomic_cmp578:
// CHK-C-NEXT:    store i64 [[TMP220]], ptr [[ATOMIC_TEMP579]], align 8
// CHK-C-NEXT:    [[BF_LOAD580:%.*]] = load i64, ptr [[ATOMIC_TEMP579]], align 8
// CHK-C-NEXT:    [[BF_SHL581:%.*]] = shl i64 [[BF_LOAD580]], 47
// CHK-C-NEXT:    [[BF_ASHR582:%.*]] = ashr i64 [[BF_SHL581]], 63
// CHK-C-NEXT:    [[BF_CAST583:%.*]] = trunc i64 [[BF_ASHR582]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST583]], ptr [[ATMP562]], align 4
// CHK-C-NEXT:    [[CMP584:%.*]] = icmp eq i32 [[BF_CAST583]], [[TMP215]]
// CHK-C-NEXT:    [[FROMBOOL585:%.*]] = zext i1 [[CMP584]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL585]], ptr [[ATMP569]], align 1
// CHK-C-NEXT:    br i1 [[CMP584]], label [[ATOMIC_CONT571]], label [[ATOMIC_EXIT586]]
// CHK-C:       atomic_exit586:
// CHK-C-NEXT:    [[TMP222:%.*]] = load i32, ptr [[ATMP562]], align 4
// CHK-C-NEXT:    [[TMP223:%.*]] = load i8, ptr [[ATMP569]], align 1
// CHK-C-NEXT:    [[CONV587:%.*]] = zext i8 [[TMP223]] to i32
// CHK-C-NEXT:    store i32 [[CONV587]], ptr [[R]], align 4
// CHK-C-NEXT:    [[TMP224:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[TMP225:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD588:%.*]] = load atomic i64, ptr @bfx4 monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD588]], ptr [[ATOMIC_TEMP590]], align 8
// CHK-C-NEXT:    [[BF_LOAD591:%.*]] = load i64, ptr [[ATOMIC_TEMP590]], align 8
// CHK-C-NEXT:    [[BF_SHL592:%.*]] = shl i64 [[BF_LOAD591]], 47
// CHK-C-NEXT:    [[BF_ASHR593:%.*]] = ashr i64 [[BF_SHL592]], 63
// CHK-C-NEXT:    [[BF_CAST594:%.*]] = trunc i64 [[BF_ASHR593]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST594]], ptr [[ATMP589]], align 4
// CHK-C-NEXT:    [[CMP595:%.*]] = icmp eq i32 [[BF_CAST594]], [[TMP225]]
// CHK-C-NEXT:    [[FROMBOOL597:%.*]] = zext i1 [[CMP595]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL597]], ptr [[ATMP596]], align 1
// CHK-C-NEXT:    br i1 [[CMP595]], label [[ATOMIC_CONT598:%.*]], label [[ATOMIC_EXIT613:%.*]]
// CHK-C:       atomic_cont598:
// CHK-C-NEXT:    [[TMP226:%.*]] = phi i64 [ [[ATOMIC_LOAD588]], [[ATOMIC_EXIT586]] ], [ [[TMP230:%.*]], [[ATOMIC_CMP605:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP226]], ptr [[ATOMIC_TEMP599]], align 8
// CHK-C-NEXT:    [[TMP227:%.*]] = zext i32 [[TMP224]] to i64
// CHK-C-NEXT:    [[BF_LOAD600:%.*]] = load i64, ptr [[ATOMIC_TEMP599]], align 8
// CHK-C-NEXT:    [[BF_VALUE601:%.*]] = and i64 [[TMP227]], 1
// CHK-C-NEXT:    [[BF_SHL602:%.*]] = shl i64 [[BF_VALUE601]], 16
// CHK-C-NEXT:    [[BF_CLEAR603:%.*]] = and i64 [[BF_LOAD600]], -65537
// CHK-C-NEXT:    [[BF_SET604:%.*]] = or i64 [[BF_CLEAR603]], [[BF_SHL602]]
// CHK-C-NEXT:    store i64 [[BF_SET604]], ptr [[ATOMIC_TEMP599]], align 8
// CHK-C-NEXT:    [[TMP228:%.*]] = load i64, ptr [[ATOMIC_TEMP599]], align 8
// CHK-C-NEXT:    [[TMP229:%.*]] = cmpxchg ptr @bfx4, i64 [[TMP226]], i64 [[TMP228]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP230]] = extractvalue { i64, i1 } [[TMP229]], 0
// CHK-C-NEXT:    [[TMP231:%.*]] = extractvalue { i64, i1 } [[TMP229]], 1
// CHK-C-NEXT:    br i1 [[TMP231]], label [[ATOMIC_EXIT613]], label [[ATOMIC_CMP605]]
// CHK-C:       atomic_cmp605:
// CHK-C-NEXT:    store i64 [[TMP230]], ptr [[ATOMIC_TEMP606]], align 8
// CHK-C-NEXT:    [[BF_LOAD607:%.*]] = load i64, ptr [[ATOMIC_TEMP606]], align 8
// CHK-C-NEXT:    [[BF_SHL608:%.*]] = shl i64 [[BF_LOAD607]], 47
// CHK-C-NEXT:    [[BF_ASHR609:%.*]] = ashr i64 [[BF_SHL608]], 63
// CHK-C-NEXT:    [[BF_CAST610:%.*]] = trunc i64 [[BF_ASHR609]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST610]], ptr [[ATMP589]], align 4
// CHK-C-NEXT:    [[CMP611:%.*]] = icmp eq i32 [[BF_CAST610]], [[TMP225]]
// CHK-C-NEXT:    [[FROMBOOL612:%.*]] = zext i1 [[CMP611]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL612]], ptr [[ATMP596]], align 1
// CHK-C-NEXT:    br i1 [[CMP611]], label [[ATOMIC_CONT598]], label [[ATOMIC_EXIT613]]
// CHK-C:       atomic_exit613:
// CHK-C-NEXT:    [[TMP232:%.*]] = load i32, ptr [[ATMP589]], align 4
// CHK-C-NEXT:    [[TMP233:%.*]] = load i8, ptr [[ATMP596]], align 1
// CHK-C-NEXT:    [[CONV614:%.*]] = zext i8 [[TMP233]] to i32
// CHK-C-NEXT:    store i32 [[CONV614]], ptr [[R]], align 4
// CHK-C-NEXT:    [[TMP234:%.*]] = trunc i8 [[TMP233]] to i1
// CHK-C-NEXT:    br i1 [[TMP234]], label [[ATOMIC_CAPTURE_CONT616:%.*]], label [[ATOMIC_CAPTURE615:%.*]]
// CHK-C:       atomic_capture615:
// CHK-C-NEXT:    store i32 [[TMP232]], ptr [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT616]]
// CHK-C:       atomic_capture_cont616:
// CHK-C-NEXT:    [[TMP235:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[CONV617:%.*]] = sext i32 [[TMP235]] to i64
// CHK-C-NEXT:    [[ATOMIC_LOAD618:%.*]] = load atomic i64, ptr @bfx4 monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD618]], ptr [[ATOMIC_TEMP620]], align 8
// CHK-C-NEXT:    [[BF_LOAD621:%.*]] = load i64, ptr [[ATOMIC_TEMP620]], align 8
// CHK-C-NEXT:    [[BF_SHL622:%.*]] = shl i64 [[BF_LOAD621]], 40
// CHK-C-NEXT:    [[BF_ASHR623:%.*]] = ashr i64 [[BF_SHL622]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR623]], ptr [[ATMP619]], align 8
// CHK-C-NEXT:    [[CMP624:%.*]] = icmp slt i64 [[BF_ASHR623]], [[CONV617]]
// CHK-C-NEXT:    [[FROMBOOL626:%.*]] = zext i1 [[CMP624]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL626]], ptr [[ATMP625]], align 1
// CHK-C-NEXT:    br i1 [[CMP624]], label [[ATOMIC_CONT627:%.*]], label [[ATOMIC_EXIT641:%.*]]
// CHK-C:       atomic_cont627:
// CHK-C-NEXT:    [[TMP236:%.*]] = phi i64 [ [[ATOMIC_LOAD618]], [[ATOMIC_CAPTURE_CONT616]] ], [ [[TMP239:%.*]], [[ATOMIC_CMP634:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP236]], ptr [[ATOMIC_TEMP628]], align 8
// CHK-C-NEXT:    [[BF_LOAD629:%.*]] = load i64, ptr [[ATOMIC_TEMP628]], align 8
// CHK-C-NEXT:    [[BF_VALUE630:%.*]] = and i64 [[CONV617]], 127
// CHK-C-NEXT:    [[BF_SHL631:%.*]] = shl i64 [[BF_VALUE630]], 17
// CHK-C-NEXT:    [[BF_CLEAR632:%.*]] = and i64 [[BF_LOAD629]], -16646145
// CHK-C-NEXT:    [[BF_SET633:%.*]] = or i64 [[BF_CLEAR632]], [[BF_SHL631]]
// CHK-C-NEXT:    store i64 [[BF_SET633]], ptr [[ATOMIC_TEMP628]], align 8
// CHK-C-NEXT:    [[TMP237:%.*]] = load i64, ptr [[ATOMIC_TEMP628]], align 8
// CHK-C-NEXT:    [[TMP238:%.*]] = cmpxchg ptr @bfx4, i64 [[TMP236]], i64 [[TMP237]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP239]] = extractvalue { i64, i1 } [[TMP238]], 0
// CHK-C-NEXT:    [[TMP240:%.*]] = extractvalue { i64, i1 } [[TMP238]], 1
// CHK-C-NEXT:    br i1 [[TMP240]], label [[ATOMIC_EXIT641]], label [[ATOMIC_CMP634]]
// CHK-C:       atomic_cmp634:
// CHK-C-NEXT:    store i64 [[TMP239]], ptr [[ATOMIC_TEMP635]], align 8
// CHK-C-NEXT:    [[BF_LOAD636:%.*]] = load i64, ptr [[ATOMIC_TEMP635]], align 8
// CHK-C-NEXT:    [[BF_SHL637:%.*]] = shl i64 [[BF_LOAD636]], 40
// CHK-C-NEXT:    [[BF_ASHR638:%.*]] = ashr i64 [[BF_SHL637]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR638]], ptr [[ATMP619]], align 8
// CHK-C-NEXT:    [[CMP639:%.*]] = icmp slt i64 [[BF_ASHR638]], [[CONV617]]
// CHK-C-NEXT:    [[FROMBOOL640:%.*]] = zext i1 [[CMP639]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL640]], ptr [[ATMP625]], align 1
// CHK-C-NEXT:    br i1 [[CMP639]], label [[ATOMIC_CONT627]], label [[ATOMIC_EXIT641]]
// CHK-C:       atomic_exit641:
// CHK-C-NEXT:    [[TMP241:%.*]] = load i64, ptr [[ATMP619]], align 8
// CHK-C-NEXT:    [[TMP242:%.*]] = load i8, ptr [[ATMP625]], align 1
// CHK-C-NEXT:    [[CONV642:%.*]] = trunc i64 [[TMP241]] to i32
// CHK-C-NEXT:    store i32 [[CONV642]], ptr [[V]], align 4
// CHK-C-NEXT:    [[TMP243:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[CONV643:%.*]] = sext i32 [[TMP243]] to i64
// CHK-C-NEXT:    [[ATOMIC_LOAD644:%.*]] = load atomic i64, ptr @bfx4 monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD644]], ptr [[ATOMIC_TEMP646]], align 8
// CHK-C-NEXT:    [[BF_LOAD647:%.*]] = load i64, ptr [[ATOMIC_TEMP646]], align 8
// CHK-C-NEXT:    [[BF_SHL648:%.*]] = shl i64 [[BF_LOAD647]], 40
// CHK-C-NEXT:    [[BF_ASHR649:%.*]] = ashr i64 [[BF_SHL648]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR649]], ptr [[ATMP645]], align 8
// CHK-C-NEXT:    [[CMP650:%.*]] = icmp slt i64 [[BF_ASHR649]], [[CONV643]]
// CHK-C-NEXT:    [[FROMBOOL652:%.*]] = zext i1 [[CMP650]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL652]], ptr [[ATMP651]], align 1
// CHK-C-NEXT:    br i1 [[CMP650]], label [[ATOMIC_CONT653:%.*]], label [[ATOMIC_EXIT668:%.*]]
// CHK-C:       atomic_cont653:
// CHK-C-NEXT:    [[TMP244:%.*]] = phi i64 [ [[ATOMIC_LOAD644]], [[ATOMIC_EXIT641]] ], [ [[TMP247:%.*]], [[ATOMIC_CMP661:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP244]], ptr [[ATOMIC_TEMP654]], align 8
// CHK-C-NEXT:    [[BF_LOAD655:%.*]] = load i64, ptr [[ATOMIC_TEMP654]], align 8
// CHK-C-NEXT:    [[BF_VALUE656:%.*]] = and i64 [[CONV643]], 127
// CHK-C-NEXT:    [[BF_SHL657:%.*]] = shl i64 [[BF_VALUE656]], 17
// CHK-C-NEXT:    [[BF_CLEAR658:%.*]] = and i64 [[BF_LOAD655]], -16646145
// CHK-C-NEXT:    [[BF_SET659:%.*]] = or i64 [[BF_CLEAR658]], [[BF_SHL657]]
// CHK-C-NEXT:    store i64 [[BF_SET659]], ptr [[ATOMIC_TEMP654]], align 8
// CHK-C-NEXT:    [[TMP245:%.*]] = load i64, ptr [[ATOMIC_TEMP654]], align 8
// CHK-C-NEXT:    [[TMP246:%.*]] = cmpxchg ptr @bfx4, i64 [[TMP244]], i64 [[TMP245]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP247]] = extractvalue { i64, i1 } [[TMP246]], 0
// CHK-C-NEXT:    [[TMP248:%.*]] = extractvalue { i64, i1 } [[TMP246]], 1
// CHK-C-NEXT:    br i1 [[TMP248]], label [[ATOMIC_UPD_EXIT660:%.*]], label [[ATOMIC_CMP661]]
// CHK-C:       atomic_upd_exit660:
// CHK-C-NEXT:    store i64 [[CONV643]], ptr [[ATMP645]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_EXIT668]]
// CHK-C:       atomic_cmp661:
// CHK-C-NEXT:    store i64 [[TMP247]], ptr [[ATOMIC_TEMP662]], align 8
// CHK-C-NEXT:    [[BF_LOAD663:%.*]] = load i64, ptr [[ATOMIC_TEMP662]], align 8
// CHK-C-NEXT:    [[BF_SHL664:%.*]] = shl i64 [[BF_LOAD663]], 40
// CHK-C-NEXT:    [[BF_ASHR665:%.*]] = ashr i64 [[BF_SHL664]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR665]], ptr [[ATMP645]], align 8
// CHK-C-NEXT:    [[CMP666:%.*]] = icmp slt i64 [[BF_ASHR665]], [[CONV643]]
// CHK-C-NEXT:    [[FROMBOOL667:%.*]] = zext i1 [[CMP666]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL667]], ptr [[ATMP651]], align 1
// CHK-C-NEXT:    br i1 [[CMP666]], label [[ATOMIC_CONT653]], label [[ATOMIC_EXIT668]]
// CHK-C:       atomic_exit668:
// CHK-C-NEXT:    [[TMP249:%.*]] = load i64, ptr [[ATMP645]], align 8
// CHK-C-NEXT:    [[TMP250:%.*]] = load i8, ptr [[ATMP651]], align 1
// CHK-C-NEXT:    [[CONV669:%.*]] = trunc i64 [[TMP249]] to i32
// CHK-C-NEXT:    store i32 [[CONV669]], ptr [[V]], align 4
// CHK-C-NEXT:    [[TMP251:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[CONV670:%.*]] = sext i32 [[TMP251]] to i64
// CHK-C-NEXT:    [[TMP252:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[CONV671:%.*]] = sext i32 [[TMP252]] to i64
// CHK-C-NEXT:    [[ATOMIC_LOAD672:%.*]] = load atomic i64, ptr @bfx4 monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD672]], ptr [[ATOMIC_TEMP674]], align 8
// CHK-C-NEXT:    [[BF_LOAD675:%.*]] = load i64, ptr [[ATOMIC_TEMP674]], align 8
// CHK-C-NEXT:    [[BF_SHL676:%.*]] = shl i64 [[BF_LOAD675]], 40
// CHK-C-NEXT:    [[BF_ASHR677:%.*]] = ashr i64 [[BF_SHL676]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR677]], ptr [[ATMP673]], align 8
// CHK-C-NEXT:    [[CMP678:%.*]] = icmp eq i64 [[BF_ASHR677]], [[CONV671]]
// CHK-C-NEXT:    [[FROMBOOL680:%.*]] = zext i1 [[CMP678]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL680]], ptr [[ATMP679]], align 1
// CHK-C-NEXT:    br i1 [[CMP678]], label [[ATOMIC_CONT681:%.*]], label [[ATOMIC_EXIT696:%.*]]
// CHK-C:       atomic_cont681:
// CHK-C-NEXT:    [[TMP253:%.*]] = phi i64 [ [[ATOMIC_LOAD672]], [[ATOMIC_EXIT668]] ], [ [[TMP256:%.*]], [[ATOMIC_CMP689:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP253]], ptr [[ATOMIC_TEMP682]], align 8
// CHK-C-NEXT:    [[BF_LOAD683:%.*]] = load i64, ptr [[ATOMIC_TEMP682]], align 8
// CHK-C-NEXT:    [[BF_VALUE684:%.*]] = and i64 [[CONV670]], 127
// CHK-C-NEXT:    [[BF_SHL685:%.*]] = shl i64 [[BF_VALUE684]], 17
// CHK-C-NEXT:    [[BF_CLEAR686:%.*]] = and i64 [[BF_LOAD683]], -16646145
// CHK-C-NEXT:    [[BF_SET687:%.*]] = or i64 [[BF_CLEAR686]], [[BF_SHL685]]
// CHK-C-NEXT:    store i64 [[BF_SET687]], ptr [[ATOMIC_TEMP682]], align 8
// CHK-C-NEXT:    [[TMP254:%.*]] = load i64, ptr [[ATOMIC_TEMP682]], align 8
// CHK-C-NEXT:    [[TMP255:%.*]] = cmpxchg ptr @bfx4, i64 [[TMP253]], i64 [[TMP254]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP256]] = extractvalue { i64, i1 } [[TMP255]], 0
// CHK-C-NEXT:    [[TMP257:%.*]] = extractvalue { i64, i1 } [[TMP255]], 1
// CHK-C-NEXT:    br i1 [[TMP257]], label [[ATOMIC_UPD_EXIT688:%.*]], label [[ATOMIC_CMP689]]
// CHK-C:       atomic_upd_exit688:
// CHK-C-NEXT:    store i64 [[CONV670]], ptr [[ATMP673]], align 8
// CHK-C-NEXT:    br label [[ATOMIC_EXIT696]]
// CHK-C:       atomic_cmp689:
// CHK-C-NEXT:    store i64 [[TMP256]], ptr [[ATOMIC_TEMP690]], align 8
// CHK-C-NEXT:    [[BF_LOAD691:%.*]] = load i64, ptr [[ATOMIC_TEMP690]], align 8
// CHK-C-NEXT:    [[BF_SHL692:%.*]] = shl i64 [[BF_LOAD691]], 40
// CHK-C-NEXT:    [[BF_ASHR693:%.*]] = ashr i64 [[BF_SHL692]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR693]], ptr [[ATMP673]], align 8
// CHK-C-NEXT:    [[CMP694:%.*]] = icmp eq i64 [[BF_ASHR693]], [[CONV671]]
// CHK-C-NEXT:    [[FROMBOOL695:%.*]] = zext i1 [[CMP694]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL695]], ptr [[ATMP679]], align 1
// CHK-C-NEXT:    br i1 [[CMP694]], label [[ATOMIC_CONT681]], label [[ATOMIC_EXIT696]]
// CHK-C:       atomic_exit696:
// CHK-C-NEXT:    [[TMP258:%.*]] = load i64, ptr [[ATMP673]], align 8
// CHK-C-NEXT:    [[TMP259:%.*]] = load i8, ptr [[ATMP679]], align 1
// CHK-C-NEXT:    [[TMP260:%.*]] = trunc i8 [[TMP259]] to i1
// CHK-C-NEXT:    br i1 [[TMP260]], label [[ATOMIC_CAPTURE_CONT699:%.*]], label [[ATOMIC_CAPTURE697:%.*]]
// CHK-C:       atomic_capture697:
// CHK-C-NEXT:    [[CONV698:%.*]] = trunc i64 [[TMP258]] to i32
// CHK-C-NEXT:    store i32 [[CONV698]], ptr [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT699]]
// CHK-C:       atomic_capture_cont699:
// CHK-C-NEXT:    [[TMP261:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[CONV700:%.*]] = sext i32 [[TMP261]] to i64
// CHK-C-NEXT:    [[TMP262:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[CONV701:%.*]] = sext i32 [[TMP262]] to i64
// CHK-C-NEXT:    [[ATOMIC_LOAD702:%.*]] = load atomic i64, ptr @bfx4 monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD702]], ptr [[ATOMIC_TEMP704]], align 8
// CHK-C-NEXT:    [[BF_LOAD705:%.*]] = load i64, ptr [[ATOMIC_TEMP704]], align 8
// CHK-C-NEXT:    [[BF_SHL706:%.*]] = shl i64 [[BF_LOAD705]], 40
// CHK-C-NEXT:    [[BF_ASHR707:%.*]] = ashr i64 [[BF_SHL706]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR707]], ptr [[ATMP703]], align 8
// CHK-C-NEXT:    [[CMP708:%.*]] = icmp eq i64 [[BF_ASHR707]], [[CONV701]]
// CHK-C-NEXT:    [[FROMBOOL710:%.*]] = zext i1 [[CMP708]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL710]], ptr [[ATMP709]], align 1
// CHK-C-NEXT:    br i1 [[CMP708]], label [[ATOMIC_CONT711:%.*]], label [[ATOMIC_EXIT725:%.*]]
// CHK-C:       atomic_cont711:
// CHK-C-NEXT:    [[TMP263:%.*]] = phi i64 [ [[ATOMIC_LOAD702]], [[ATOMIC_CAPTURE_CONT699]] ], [ [[TMP266:%.*]], [[ATOMIC_CMP718:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP263]], ptr [[ATOMIC_TEMP712]], align 8
// CHK-C-NEXT:    [[BF_LOAD713:%.*]] = load i64, ptr [[ATOMIC_TEMP712]], align 8
// CHK-C-NEXT:    [[BF_VALUE714:%.*]] = and i64 [[CONV700]], 127
// CHK-C-NEXT:    [[BF_SHL715:%.*]] = shl i64 [[BF_VALUE714]], 17
// CHK-C-NEXT:    [[BF_CLEAR716:%.*]] = and i64 [[BF_LOAD713]], -16646145
// CHK-C-NEXT:    [[BF_SET717:%.*]] = or i64 [[BF_CLEAR716]], [[BF_SHL715]]
// CHK-C-NEXT:    store i64 [[BF_SET717]], ptr [[ATOMIC_TEMP712]], align 8
// CHK-C-NEXT:    [[TMP264:%.*]] = load i64, ptr [[ATOMIC_TEMP712]], align 8
// CHK-C-NEXT:    [[TMP265:%.*]] = cmpxchg ptr @bfx4, i64 [[TMP263]], i64 [[TMP264]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP266]] = extractvalue { i64, i1 } [[TMP265]], 0
// CHK-C-NEXT:    [[TMP267:%.*]] = extractvalue { i64, i1 } [[TMP265]], 1
// CHK-C-NEXT:    br i1 [[TMP267]], label [[ATOMIC_EXIT725]], label [[ATOMIC_CMP718]]
// CHK-C:       atomic_cmp718:
// CHK-C-NEXT:    store i64 [[TMP266]], ptr [[ATOMIC_TEMP719]], align 8
// CHK-C-NEXT:    [[BF_LOAD720:%.*]] = load i64, ptr [[ATOMIC_TEMP719]], align 8
// CHK-C-NEXT:    [[BF_SHL721:%.*]] = shl i64 [[BF_LOAD720]], 40
// CHK-C-NEXT:    [[BF_ASHR722:%.*]] = ashr i64 [[BF_SHL721]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR722]], ptr [[ATMP703]], align 8
// CHK-C-NEXT:    [[CMP723:%.*]] = icmp eq i64 [[BF_ASHR722]], [[CONV701]]
// CHK-C-NEXT:    [[FROMBOOL724:%.*]] = zext i1 [[CMP723]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL724]], ptr [[ATMP709]], align 1
// CHK-C-NEXT:    br i1 [[CMP723]], label [[ATOMIC_CONT711]], label [[ATOMIC_EXIT725]]
// CHK-C:       atomic_exit725:
// CHK-C-NEXT:    [[TMP268:%.*]] = load i64, ptr [[ATMP703]], align 8
// CHK-C-NEXT:    [[TMP269:%.*]] = load i8, ptr [[ATMP709]], align 1
// CHK-C-NEXT:    [[CONV726:%.*]] = zext i8 [[TMP269]] to i32
// CHK-C-NEXT:    store i32 [[CONV726]], ptr [[R]], align 4
// CHK-C-NEXT:    [[TMP270:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[CONV727:%.*]] = sext i32 [[TMP270]] to i64
// CHK-C-NEXT:    [[TMP271:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[CONV728:%.*]] = sext i32 [[TMP271]] to i64
// CHK-C-NEXT:    [[ATOMIC_LOAD729:%.*]] = load atomic i64, ptr @bfx4 monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD729]], ptr [[ATOMIC_TEMP731]], align 8
// CHK-C-NEXT:    [[BF_LOAD732:%.*]] = load i64, ptr [[ATOMIC_TEMP731]], align 8
// CHK-C-NEXT:    [[BF_SHL733:%.*]] = shl i64 [[BF_LOAD732]], 40
// CHK-C-NEXT:    [[BF_ASHR734:%.*]] = ashr i64 [[BF_SHL733]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR734]], ptr [[ATMP730]], align 8
// CHK-C-NEXT:    [[CMP735:%.*]] = icmp eq i64 [[BF_ASHR734]], [[CONV728]]
// CHK-C-NEXT:    [[FROMBOOL737:%.*]] = zext i1 [[CMP735]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL737]], ptr [[ATMP736]], align 1
// CHK-C-NEXT:    br i1 [[CMP735]], label [[ATOMIC_CONT738:%.*]], label [[ATOMIC_EXIT752:%.*]]
// CHK-C:       atomic_cont738:
// CHK-C-NEXT:    [[TMP272:%.*]] = phi i64 [ [[ATOMIC_LOAD729]], [[ATOMIC_EXIT725]] ], [ [[TMP275:%.*]], [[ATOMIC_CMP745:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP272]], ptr [[ATOMIC_TEMP739]], align 8
// CHK-C-NEXT:    [[BF_LOAD740:%.*]] = load i64, ptr [[ATOMIC_TEMP739]], align 8
// CHK-C-NEXT:    [[BF_VALUE741:%.*]] = and i64 [[CONV727]], 127
// CHK-C-NEXT:    [[BF_SHL742:%.*]] = shl i64 [[BF_VALUE741]], 17
// CHK-C-NEXT:    [[BF_CLEAR743:%.*]] = and i64 [[BF_LOAD740]], -16646145
// CHK-C-NEXT:    [[BF_SET744:%.*]] = or i64 [[BF_CLEAR743]], [[BF_SHL742]]
// CHK-C-NEXT:    store i64 [[BF_SET744]], ptr [[ATOMIC_TEMP739]], align 8
// CHK-C-NEXT:    [[TMP273:%.*]] = load i64, ptr [[ATOMIC_TEMP739]], align 8
// CHK-C-NEXT:    [[TMP274:%.*]] = cmpxchg ptr @bfx4, i64 [[TMP272]], i64 [[TMP273]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP275]] = extractvalue { i64, i1 } [[TMP274]], 0
// CHK-C-NEXT:    [[TMP276:%.*]] = extractvalue { i64, i1 } [[TMP274]], 1
// CHK-C-NEXT:    br i1 [[TMP276]], label [[ATOMIC_EXIT752]], label [[ATOMIC_CMP745]]
// CHK-C:       atomic_cmp745:
// CHK-C-NEXT:    store i64 [[TMP275]], ptr [[ATOMIC_TEMP746]], align 8
// CHK-C-NEXT:    [[BF_LOAD747:%.*]] = load i64, ptr [[ATOMIC_TEMP746]], align 8
// CHK-C-NEXT:    [[BF_SHL748:%.*]] = shl i64 [[BF_LOAD747]], 40
// CHK-C-NEXT:    [[BF_ASHR749:%.*]] = ashr i64 [[BF_SHL748]], 57
// CHK-C-NEXT:    store i64 [[BF_ASHR749]], ptr [[ATMP730]], align 8
// CHK-C-NEXT:    [[CMP750:%.*]] = icmp eq i64 [[BF_ASHR749]], [[CONV728]]
// CHK-C-NEXT:    [[FROMBOOL751:%.*]] = zext i1 [[CMP750]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL751]], ptr [[ATMP736]], align 1
// CHK-C-NEXT:    br i1 [[CMP750]], label [[ATOMIC_CONT738]], label [[ATOMIC_EXIT752]]
// CHK-C:       atomic_exit752:
// CHK-C-NEXT:    [[TMP277:%.*]] = load i64, ptr [[ATMP730]], align 8
// CHK-C-NEXT:    [[TMP278:%.*]] = load i8, ptr [[ATMP736]], align 1
// CHK-C-NEXT:    [[CONV753:%.*]] = zext i8 [[TMP278]] to i32
// CHK-C-NEXT:    store i32 [[CONV753]], ptr [[R]], align 4
// CHK-C-NEXT:    [[TMP279:%.*]] = trunc i8 [[TMP278]] to i1
// CHK-C-NEXT:    br i1 [[TMP279]], label [[ATOMIC_CAPTURE_CONT756:%.*]], label [[ATOMIC_CAPTURE754:%.*]]
// CHK-C:       atomic_capture754:
// CHK-C-NEXT:    [[CONV755:%.*]] = trunc i64 [[TMP277]] to i32
// CHK-C-NEXT:    store i32 [[CONV755]], ptr [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT756]]
// CHK-C:       atomic_capture_cont756:
// CHK-C-NEXT:    [[TMP280:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD757:%.*]] = load atomic i8, ptr getelementptr (i8, ptr @bfx4_packed, i64 2) monotonic, align 1
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD757]], ptr [[ATOMIC_TEMP759]], align 1
// CHK-C-NEXT:    [[BF_LOAD760:%.*]] = load i8, ptr [[ATOMIC_TEMP759]], align 1
// CHK-C-NEXT:    [[BF_SHL761:%.*]] = shl i8 [[BF_LOAD760]], 7
// CHK-C-NEXT:    [[BF_ASHR762:%.*]] = ashr i8 [[BF_SHL761]], 7
// CHK-C-NEXT:    [[BF_CAST763:%.*]] = sext i8 [[BF_ASHR762]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST763]], ptr [[ATMP758]], align 4
// CHK-C-NEXT:    [[CMP764:%.*]] = icmp slt i32 [[BF_CAST763]], [[TMP280]]
// CHK-C-NEXT:    [[FROMBOOL766:%.*]] = zext i1 [[CMP764]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL766]], ptr [[ATMP765]], align 1
// CHK-C-NEXT:    br i1 [[CMP764]], label [[ATOMIC_CONT767:%.*]], label [[ATOMIC_EXIT781:%.*]]
// CHK-C:       atomic_cont767:
// CHK-C-NEXT:    [[TMP281:%.*]] = phi i8 [ [[ATOMIC_LOAD757]], [[ATOMIC_CAPTURE_CONT756]] ], [ [[TMP285:%.*]], [[ATOMIC_CMP773:%.*]] ]
// CHK-C-NEXT:    store i8 [[TMP281]], ptr [[ATOMIC_TEMP768]], align 1
// CHK-C-NEXT:    [[TMP282:%.*]] = trunc i32 [[TMP280]] to i8
// CHK-C-NEXT:    [[BF_LOAD769:%.*]] = load i8, ptr [[ATOMIC_TEMP768]], align 1
// CHK-C-NEXT:    [[BF_VALUE770:%.*]] = and i8 [[TMP282]], 1
// CHK-C-NEXT:    [[BF_CLEAR771:%.*]] = and i8 [[BF_LOAD769]], -2
// CHK-C-NEXT:    [[BF_SET772:%.*]] = or i8 [[BF_CLEAR771]], [[BF_VALUE770]]
// CHK-C-NEXT:    store i8 [[BF_SET772]], ptr [[ATOMIC_TEMP768]], align 1
// CHK-C-NEXT:    [[TMP283:%.*]] = load i8, ptr [[ATOMIC_TEMP768]], align 1
// CHK-C-NEXT:    [[TMP284:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx4_packed, i64 2), i8 [[TMP281]], i8 [[TMP283]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP285]] = extractvalue { i8, i1 } [[TMP284]], 0
// CHK-C-NEXT:    [[TMP286:%.*]] = extractvalue { i8, i1 } [[TMP284]], 1
// CHK-C-NEXT:    br i1 [[TMP286]], label [[ATOMIC_EXIT781]], label [[ATOMIC_CMP773]]
// CHK-C:       atomic_cmp773:
// CHK-C-NEXT:    store i8 [[TMP285]], ptr [[ATOMIC_TEMP774]], align 1
// CHK-C-NEXT:    [[BF_LOAD775:%.*]] = load i8, ptr [[ATOMIC_TEMP774]], align 1
// CHK-C-NEXT:    [[BF_SHL776:%.*]] = shl i8 [[BF_LOAD775]], 7
// CHK-C-NEXT:    [[BF_ASHR777:%.*]] = ashr i8 [[BF_SHL776]], 7
// CHK-C-NEXT:    [[BF_CAST778:%.*]] = sext i8 [[BF_ASHR777]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST778]], ptr [[ATMP758]], align 4
// CHK-C-NEXT:    [[CMP779:%.*]] = icmp slt i32 [[BF_CAST778]], [[TMP280]]
// CHK-C-NEXT:    [[FROMBOOL780:%.*]] = zext i1 [[CMP779]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL780]], ptr [[ATMP765]], align 1
// CHK-C-NEXT:    br i1 [[CMP779]], label [[ATOMIC_CONT767]], label [[ATOMIC_EXIT781]]
// CHK-C:       atomic_exit781:
// CHK-C-NEXT:    [[TMP287:%.*]] = load i32, ptr [[ATMP758]], align 4
// CHK-C-NEXT:    [[TMP288:%.*]] = load i8, ptr [[ATMP765]], align 1
// CHK-C-NEXT:    store i32 [[TMP287]], ptr [[V]], align 4
// CHK-C-NEXT:    [[TMP289:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD782:%.*]] = load atomic i8, ptr getelementptr (i8, ptr @bfx4_packed, i64 2) monotonic, align 1
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD782]], ptr [[ATOMIC_TEMP784]], align 1
// CHK-C-NEXT:    [[BF_LOAD785:%.*]] = load i8, ptr [[ATOMIC_TEMP784]], align 1
// CHK-C-NEXT:    [[BF_SHL786:%.*]] = shl i8 [[BF_LOAD785]], 7
// CHK-C-NEXT:    [[BF_ASHR787:%.*]] = ashr i8 [[BF_SHL786]], 7
// CHK-C-NEXT:    [[BF_CAST788:%.*]] = sext i8 [[BF_ASHR787]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST788]], ptr [[ATMP783]], align 4
// CHK-C-NEXT:    [[CMP789:%.*]] = icmp slt i32 [[BF_CAST788]], [[TMP289]]
// CHK-C-NEXT:    [[FROMBOOL791:%.*]] = zext i1 [[CMP789]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL791]], ptr [[ATMP790]], align 1
// CHK-C-NEXT:    br i1 [[CMP789]], label [[ATOMIC_CONT792:%.*]], label [[ATOMIC_EXIT807:%.*]]
// CHK-C:       atomic_cont792:
// CHK-C-NEXT:    [[TMP290:%.*]] = phi i8 [ [[ATOMIC_LOAD782]], [[ATOMIC_EXIT781]] ], [ [[TMP294:%.*]], [[ATOMIC_CMP799:%.*]] ]
// CHK-C-NEXT:    store i8 [[TMP290]], ptr [[ATOMIC_TEMP793]], align 1
// CHK-C-NEXT:    [[TMP291:%.*]] = trunc i32 [[TMP289]] to i8
// CHK-C-NEXT:    [[BF_LOAD794:%.*]] = load i8, ptr [[ATOMIC_TEMP793]], align 1
// CHK-C-NEXT:    [[BF_VALUE795:%.*]] = and i8 [[TMP291]], 1
// CHK-C-NEXT:    [[BF_CLEAR796:%.*]] = and i8 [[BF_LOAD794]], -2
// CHK-C-NEXT:    [[BF_SET797:%.*]] = or i8 [[BF_CLEAR796]], [[BF_VALUE795]]
// CHK-C-NEXT:    store i8 [[BF_SET797]], ptr [[ATOMIC_TEMP793]], align 1
// CHK-C-NEXT:    [[TMP292:%.*]] = load i8, ptr [[ATOMIC_TEMP793]], align 1
// CHK-C-NEXT:    [[TMP293:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx4_packed, i64 2), i8 [[TMP290]], i8 [[TMP292]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP294]] = extractvalue { i8, i1 } [[TMP293]], 0
// CHK-C-NEXT:    [[TMP295:%.*]] = extractvalue { i8, i1 } [[TMP293]], 1
// CHK-C-NEXT:    br i1 [[TMP295]], label [[ATOMIC_UPD_EXIT798:%.*]], label [[ATOMIC_CMP799]]
// CHK-C:       atomic_upd_exit798:
// CHK-C-NEXT:    store i32 [[TMP289]], ptr [[ATMP783]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT807]]
// CHK-C:       atomic_cmp799:
// CHK-C-NEXT:    store i8 [[TMP294]], ptr [[ATOMIC_TEMP800]], align 1
// CHK-C-NEXT:    [[BF_LOAD801:%.*]] = load i8, ptr [[ATOMIC_TEMP800]], align 1
// CHK-C-NEXT:    [[BF_SHL802:%.*]] = shl i8 [[BF_LOAD801]], 7
// CHK-C-NEXT:    [[BF_ASHR803:%.*]] = ashr i8 [[BF_SHL802]], 7
// CHK-C-NEXT:    [[BF_CAST804:%.*]] = sext i8 [[BF_ASHR803]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST804]], ptr [[ATMP783]], align 4
// CHK-C-NEXT:    [[CMP805:%.*]] = icmp slt i32 [[BF_CAST804]], [[TMP289]]
// CHK-C-NEXT:    [[FROMBOOL806:%.*]] = zext i1 [[CMP805]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL806]], ptr [[ATMP790]], align 1
// CHK-C-NEXT:    br i1 [[CMP805]], label [[ATOMIC_CONT792]], label [[ATOMIC_EXIT807]]
// CHK-C:       atomic_exit807:
// CHK-C-NEXT:    [[TMP296:%.*]] = load i32, ptr [[ATMP783]], align 4
// CHK-C-NEXT:    [[TMP297:%.*]] = load i8, ptr [[ATMP790]], align 1
// CHK-C-NEXT:    store i32 [[TMP296]], ptr [[V]], align 4
// CHK-C-NEXT:    [[TMP298:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[TMP299:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD808:%.*]] = load atomic i8, ptr getelementptr (i8, ptr @bfx4_packed, i64 2) monotonic, align 1
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD808]], ptr [[ATOMIC_TEMP810]], align 1
// CHK-C-NEXT:    [[BF_LOAD811:%.*]] = load i8, ptr [[ATOMIC_TEMP810]], align 1
// CHK-C-NEXT:    [[BF_SHL812:%.*]] = shl i8 [[BF_LOAD811]], 7
// CHK-C-NEXT:    [[BF_ASHR813:%.*]] = ashr i8 [[BF_SHL812]], 7
// CHK-C-NEXT:    [[BF_CAST814:%.*]] = sext i8 [[BF_ASHR813]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST814]], ptr [[ATMP809]], align 4
// CHK-C-NEXT:    [[CMP815:%.*]] = icmp eq i32 [[BF_CAST814]], [[TMP299]]
// CHK-C-NEXT:    [[FROMBOOL817:%.*]] = zext i1 [[CMP815]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL817]], ptr [[ATMP816]], align 1
// CHK-C-NEXT:    br i1 [[CMP815]], label [[ATOMIC_CONT818:%.*]], label [[ATOMIC_EXIT833:%.*]]
// CHK-C:       atomic_cont818:
// CHK-C-NEXT:    [[TMP300:%.*]] = phi i8 [ [[ATOMIC_LOAD808]], [[ATOMIC_EXIT807]] ], [ [[TMP304:%.*]], [[ATOMIC_CMP825:%.*]] ]
// CHK-C-NEXT:    store i8 [[TMP300]], ptr [[ATOMIC_TEMP819]], align 1
// CHK-C-NEXT:    [[TMP301:%.*]] = trunc i32 [[TMP298]] to i8
// CHK-C-NEXT:    [[BF_LOAD820:%.*]] = load i8, ptr [[ATOMIC_TEMP819]], align 1
// CHK-C-NEXT:    [[BF_VALUE821:%.*]] = and i8 [[TMP301]], 1
// CHK-C-NEXT:    [[BF_CLEAR822:%.*]] = and i8 [[BF_LOAD820]], -2
// CHK-C-NEXT:    [[BF_SET823:%.*]] = or i8 [[BF_CLEAR822]], [[BF_VALUE821]]
// CHK-C-NEXT:    store i8 [[BF_SET823]], ptr [[ATOMIC_TEMP819]], align 1
// CHK-C-NEXT:    [[TMP302:%.*]] = load i8, ptr [[ATOMIC_TEMP819]], align 1
// CHK-C-NEXT:    [[TMP303:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx4_packed, i64 2), i8 [[TMP300]], i8 [[TMP302]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP304]] = extractvalue { i8, i1 } [[TMP303]], 0
// CHK-C-NEXT:    [[TMP305:%.*]] = extractvalue { i8, i1 } [[TMP303]], 1
// CHK-C-NEXT:    br i1 [[TMP305]], label [[ATOMIC_UPD_EXIT824:%.*]], label [[ATOMIC_CMP825]]
// CHK-C:       atomic_upd_exit824:
// CHK-C-NEXT:    store i32 [[TMP298]], ptr [[ATMP809]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT833]]
// CHK-C:       atomic_cmp825:
// CHK-C-NEXT:    store i8 [[TMP304]], ptr [[ATOMIC_TEMP826]], align 1
// CHK-C-NEXT:    [[BF_LOAD827:%.*]] = load i8, ptr [[ATOMIC_TEMP826]], align 1
// CHK-C-NEXT:    [[BF_SHL828:%.*]] = shl i8 [[BF_LOAD827]], 7
// CHK-C-NEXT:    [[BF_ASHR829:%.*]] = ashr i8 [[BF_SHL828]], 7
// CHK-C-NEXT:    [[BF_CAST830:%.*]] = sext i8 [[BF_ASHR829]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST830]], ptr [[ATMP809]], align 4
// CHK-C-NEXT:    [[CMP831:%.*]] = icmp eq i32 [[BF_CAST830]], [[TMP299]]
// CHK-C-NEXT:    [[FROMBOOL832:%.*]] = zext i1 [[CMP831]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL832]], ptr [[ATMP816]], align 1
// CHK-C-NEXT:    br i1 [[CMP831]], label [[ATOMIC_CONT818]], label [[ATOMIC_EXIT833]]
// CHK-C:       atomic_exit833:
// CHK-C-NEXT:    [[TMP306:%.*]] = load i32, ptr [[ATMP809]], align 4
// CHK-C-NEXT:    [[TMP307:%.*]] = load i8, ptr [[ATMP816]], align 1
// CHK-C-NEXT:    [[TMP308:%.*]] = trunc i8 [[TMP307]] to i1
// CHK-C-NEXT:    br i1 [[TMP308]], label [[ATOMIC_CAPTURE_CONT835:%.*]], label [[ATOMIC_CAPTURE834:%.*]]
// CHK-C:       atomic_capture834:
// CHK-C-NEXT:    store i32 [[TMP306]], ptr [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT835]]
// CHK-C:       atomic_capture_cont835:
// CHK-C-NEXT:    [[TMP309:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[TMP310:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD836:%.*]] = load atomic i8, ptr getelementptr (i8, ptr @bfx4_packed, i64 2) monotonic, align 1
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD836]], ptr [[ATOMIC_TEMP838]], align 1
// CHK-C-NEXT:    [[BF_LOAD839:%.*]] = load i8, ptr [[ATOMIC_TEMP838]], align 1
// CHK-C-NEXT:    [[BF_SHL840:%.*]] = shl i8 [[BF_LOAD839]], 7
// CHK-C-NEXT:    [[BF_ASHR841:%.*]] = ashr i8 [[BF_SHL840]], 7
// CHK-C-NEXT:    [[BF_CAST842:%.*]] = sext i8 [[BF_ASHR841]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST842]], ptr [[ATMP837]], align 4
// CHK-C-NEXT:    [[CMP843:%.*]] = icmp eq i32 [[BF_CAST842]], [[TMP310]]
// CHK-C-NEXT:    [[FROMBOOL845:%.*]] = zext i1 [[CMP843]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL845]], ptr [[ATMP844]], align 1
// CHK-C-NEXT:    br i1 [[CMP843]], label [[ATOMIC_CONT846:%.*]], label [[ATOMIC_EXIT860:%.*]]
// CHK-C:       atomic_cont846:
// CHK-C-NEXT:    [[TMP311:%.*]] = phi i8 [ [[ATOMIC_LOAD836]], [[ATOMIC_CAPTURE_CONT835]] ], [ [[TMP315:%.*]], [[ATOMIC_CMP852:%.*]] ]
// CHK-C-NEXT:    store i8 [[TMP311]], ptr [[ATOMIC_TEMP847]], align 1
// CHK-C-NEXT:    [[TMP312:%.*]] = trunc i32 [[TMP309]] to i8
// CHK-C-NEXT:    [[BF_LOAD848:%.*]] = load i8, ptr [[ATOMIC_TEMP847]], align 1
// CHK-C-NEXT:    [[BF_VALUE849:%.*]] = and i8 [[TMP312]], 1
// CHK-C-NEXT:    [[BF_CLEAR850:%.*]] = and i8 [[BF_LOAD848]], -2
// CHK-C-NEXT:    [[BF_SET851:%.*]] = or i8 [[BF_CLEAR850]], [[BF_VALUE849]]
// CHK-C-NEXT:    store i8 [[BF_SET851]], ptr [[ATOMIC_TEMP847]], align 1
// CHK-C-NEXT:    [[TMP313:%.*]] = load i8, ptr [[ATOMIC_TEMP847]], align 1
// CHK-C-NEXT:    [[TMP314:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx4_packed, i64 2), i8 [[TMP311]], i8 [[TMP313]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP315]] = extractvalue { i8, i1 } [[TMP314]], 0
// CHK-C-NEXT:    [[TMP316:%.*]] = extractvalue { i8, i1 } [[TMP314]], 1
// CHK-C-NEXT:    br i1 [[TMP316]], label [[ATOMIC_EXIT860]], label [[ATOMIC_CMP852]]
// CHK-C:       atomic_cmp852:
// CHK-C-NEXT:    store i8 [[TMP315]], ptr [[ATOMIC_TEMP853]], align 1
// CHK-C-NEXT:    [[BF_LOAD854:%.*]] = load i8, ptr [[ATOMIC_TEMP853]], align 1
// CHK-C-NEXT:    [[BF_SHL855:%.*]] = shl i8 [[BF_LOAD854]], 7
// CHK-C-NEXT:    [[BF_ASHR856:%.*]] = ashr i8 [[BF_SHL855]], 7
// CHK-C-NEXT:    [[BF_CAST857:%.*]] = sext i8 [[BF_ASHR856]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST857]], ptr [[ATMP837]], align 4
// CHK-C-NEXT:    [[CMP858:%.*]] = icmp eq i32 [[BF_CAST857]], [[TMP310]]
// CHK-C-NEXT:    [[FROMBOOL859:%.*]] = zext i1 [[CMP858]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL859]], ptr [[ATMP844]], align 1
// CHK-C-NEXT:    br i1 [[CMP858]], label [[ATOMIC_CONT846]], label [[ATOMIC_EXIT860]]
// CHK-C:       atomic_exit860:
// CHK-C-NEXT:    [[TMP317:%.*]] = load i32, ptr [[ATMP837]], align 4
// CHK-C-NEXT:    [[TMP318:%.*]] = load i8, ptr [[ATMP844]], align 1
// CHK-C-NEXT:    [[CONV861:%.*]] = zext i8 [[TMP318]] to i32
// CHK-C-NEXT:    store i32 [[CONV861]], ptr [[R]], align 4
// CHK-C-NEXT:    [[TMP319:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[TMP320:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[ATOMIC_LOAD862:%.*]] = load atomic i8, ptr getelementptr (i8, ptr @bfx4_packed, i64 2) monotonic, align 1
// CHK-C-NEXT:    store i8 [[ATOMIC_LOAD862]], ptr [[ATOMIC_TEMP864]], align 1
// CHK-C-NEXT:    [[BF_LOAD865:%.*]] = load i8, ptr [[ATOMIC_TEMP864]], align 1
// CHK-C-NEXT:    [[BF_SHL866:%.*]] = shl i8 [[BF_LOAD865]], 7
// CHK-C-NEXT:    [[BF_ASHR867:%.*]] = ashr i8 [[BF_SHL866]], 7
// CHK-C-NEXT:    [[BF_CAST868:%.*]] = sext i8 [[BF_ASHR867]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST868]], ptr [[ATMP863]], align 4
// CHK-C-NEXT:    [[CMP869:%.*]] = icmp eq i32 [[BF_CAST868]], [[TMP320]]
// CHK-C-NEXT:    [[FROMBOOL871:%.*]] = zext i1 [[CMP869]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL871]], ptr [[ATMP870]], align 1
// CHK-C-NEXT:    br i1 [[CMP869]], label [[ATOMIC_CONT872:%.*]], label [[ATOMIC_EXIT886:%.*]]
// CHK-C:       atomic_cont872:
// CHK-C-NEXT:    [[TMP321:%.*]] = phi i8 [ [[ATOMIC_LOAD862]], [[ATOMIC_EXIT860]] ], [ [[TMP325:%.*]], [[ATOMIC_CMP878:%.*]] ]
// CHK-C-NEXT:    store i8 [[TMP321]], ptr [[ATOMIC_TEMP873]], align 1
// CHK-C-NEXT:    [[TMP322:%.*]] = trunc i32 [[TMP319]] to i8
// CHK-C-NEXT:    [[BF_LOAD874:%.*]] = load i8, ptr [[ATOMIC_TEMP873]], align 1
// CHK-C-NEXT:    [[BF_VALUE875:%.*]] = and i8 [[TMP322]], 1
// CHK-C-NEXT:    [[BF_CLEAR876:%.*]] = and i8 [[BF_LOAD874]], -2
// CHK-C-NEXT:    [[BF_SET877:%.*]] = or i8 [[BF_CLEAR876]], [[BF_VALUE875]]
// CHK-C-NEXT:    store i8 [[BF_SET877]], ptr [[ATOMIC_TEMP873]], align 1
// CHK-C-NEXT:    [[TMP323:%.*]] = load i8, ptr [[ATOMIC_TEMP873]], align 1
// CHK-C-NEXT:    [[TMP324:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx4_packed, i64 2), i8 [[TMP321]], i8 [[TMP323]] monotonic monotonic, align 1
// CHK-C-NEXT:    [[TMP325]] = extractvalue { i8, i1 } [[TMP324]], 0
// CHK-C-NEXT:    [[TMP326:%.*]] = extractvalue { i8, i1 } [[TMP324]], 1
// CHK-C-NEXT:    br i1 [[TMP326]], label [[ATOMIC_EXIT886]], label [[ATOMIC_CMP878]]
// CHK-C:       atomic_cmp878:
// CHK-C-NEXT:    store i8 [[TMP325]], ptr [[ATOMIC_TEMP879]], align 1
// CHK-C-NEXT:    [[BF_LOAD880:%.*]] = load i8, ptr [[ATOMIC_TEMP879]], align 1
// CHK-C-NEXT:    [[BF_SHL881:%.*]] = shl i8 [[BF_LOAD880]], 7
// CHK-C-NEXT:    [[BF_ASHR882:%.*]] = ashr i8 [[BF_SHL881]], 7
// CHK-C-NEXT:    [[BF_CAST883:%.*]] = sext i8 [[BF_ASHR882]] to i32
// CHK-C-NEXT:    store i32 [[BF_CAST883]], ptr [[ATMP863]], align 4
// CHK-C-NEXT:    [[CMP884:%.*]] = icmp eq i32 [[BF_CAST883]], [[TMP320]]
// CHK-C-NEXT:    [[FROMBOOL885:%.*]] = zext i1 [[CMP884]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL885]], ptr [[ATMP870]], align 1
// CHK-C-NEXT:    br i1 [[CMP884]], label [[ATOMIC_CONT872]], label [[ATOMIC_EXIT886]]
// CHK-C:       atomic_exit886:
// CHK-C-NEXT:    [[TMP327:%.*]] = load i32, ptr [[ATMP863]], align 4
// CHK-C-NEXT:    [[TMP328:%.*]] = load i8, ptr [[ATMP870]], align 1
// CHK-C-NEXT:    [[CONV887:%.*]] = zext i8 [[TMP328]] to i32
// CHK-C-NEXT:    store i32 [[CONV887]], ptr [[R]], align 4
// CHK-C-NEXT:    [[TMP329:%.*]] = trunc i8 [[TMP328]] to i1
// CHK-C-NEXT:    br i1 [[TMP329]], label [[ATOMIC_CAPTURE_CONT889:%.*]], label [[ATOMIC_CAPTURE888:%.*]]
// CHK-C:       atomic_capture888:
// CHK-C-NEXT:    store i32 [[TMP327]], ptr [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT889]]
// CHK-C:       atomic_capture_cont889:
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z13test_bitfieldv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[V:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[R:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP2:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP4:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP11:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP12:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP17:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP20:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP26:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP34:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP35:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP40:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP43:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP50:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP58:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP59:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP64:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP67:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP73:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP81:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP82:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP87:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP90:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP96:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP107:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP108:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP112:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP115:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP122:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP129:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP130:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP134:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP137:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP145:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP152:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP153:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP157:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP160:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP168:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP177:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP178:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP182:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP185:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP192:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP200:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP201:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP205:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP208:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP215:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP225:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP226:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP230:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP233:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP240:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP248:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP249:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP254:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP257:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP265:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP273:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP274:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP279:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP282:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP290:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP300:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP301:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP306:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP309:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP316:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP325:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP326:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP331:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP334:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP341:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP352:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP353:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP358:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP361:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP368:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP376:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP377:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP382:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP385:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP393:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP401:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP402:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP407:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP410:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP418:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP428:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP429:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP434:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP437:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP444:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP453:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP454:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP459:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP462:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP469:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATMP480:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP481:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP487:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP490:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP497:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP506:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP507:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP513:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP516:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP524:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP533:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP534:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP540:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP543:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP551:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP562:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP563:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP569:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP572:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP579:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP589:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP590:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP596:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP599:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP606:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP619:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP620:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP625:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP628:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP635:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP645:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP646:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP651:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP654:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP662:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP673:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP674:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP679:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP682:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP690:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP703:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP704:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP709:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP712:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP719:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP730:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP731:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP736:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP739:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP746:%.*]] = alloca i64, align 8
// CHK-CXX-NEXT:    [[ATMP758:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP759:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP765:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP768:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP774:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP783:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP784:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP790:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP793:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP800:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP809:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP810:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP816:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP819:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP826:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP837:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP838:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP844:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP847:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP853:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP863:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP864:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATMP870:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP873:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP879:%.*]] = alloca i32, align 1
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i32, ptr getelementptr (i8, ptr @bfx, i64 4) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD]], ptr [[ATOMIC_TEMP]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD:%.*]] = load i32, ptr [[ATOMIC_TEMP]], align 4
// CHK-CXX-NEXT:    [[BF_SHL:%.*]] = shl i32 [[BF_LOAD]], 1
// CHK-CXX-NEXT:    [[BF_ASHR:%.*]] = ashr i32 [[BF_SHL]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR]], ptr [[TMP]], align 4
// CHK-CXX-NEXT:    [[CMP:%.*]] = icmp slt i32 [[BF_ASHR]], [[TMP0]]
// CHK-CXX-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL]], ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP1:%.*]] = phi i32 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP4:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP1]], ptr [[ATOMIC_TEMP2]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD3:%.*]] = load i32, ptr [[ATOMIC_TEMP2]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE:%.*]] = and i32 [[TMP0]], 2147483647
// CHK-CXX-NEXT:    [[BF_CLEAR:%.*]] = and i32 [[BF_LOAD3]], -2147483648
// CHK-CXX-NEXT:    [[BF_SET:%.*]] = or i32 [[BF_CLEAR]], [[BF_VALUE]]
// CHK-CXX-NEXT:    store i32 [[BF_SET]], ptr [[ATOMIC_TEMP2]], align 4
// CHK-CXX-NEXT:    [[TMP2:%.*]] = load i32, ptr [[ATOMIC_TEMP2]], align 4
// CHK-CXX-NEXT:    [[TMP3:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx, i64 4), i32 [[TMP1]], i32 [[TMP2]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP4]] = extractvalue { i32, i1 } [[TMP3]], 0
// CHK-CXX-NEXT:    [[TMP5:%.*]] = extractvalue { i32, i1 } [[TMP3]], 1
// CHK-CXX-NEXT:    br i1 [[TMP5]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    store i32 [[TMP4]], ptr [[ATOMIC_TEMP4]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD5:%.*]] = load i32, ptr [[ATOMIC_TEMP4]], align 4
// CHK-CXX-NEXT:    [[BF_SHL6:%.*]] = shl i32 [[BF_LOAD5]], 1
// CHK-CXX-NEXT:    [[BF_ASHR7:%.*]] = ashr i32 [[BF_SHL6]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR7]], ptr [[TMP]], align 4
// CHK-CXX-NEXT:    [[CMP8:%.*]] = icmp slt i32 [[BF_ASHR7]], [[TMP0]]
// CHK-CXX-NEXT:    [[FROMBOOL9:%.*]] = zext i1 [[CMP8]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL9]], ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP8]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP]], align 4
// CHK-CXX-NEXT:    [[TMP7:%.*]] = load i8, ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP6]], ptr [[V]], align 4
// CHK-CXX-NEXT:    [[TMP8:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD10:%.*]] = load atomic i32, ptr getelementptr (i8, ptr @bfx, i64 4) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD10]], ptr [[ATOMIC_TEMP12]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD13:%.*]] = load i32, ptr [[ATOMIC_TEMP12]], align 4
// CHK-CXX-NEXT:    [[BF_SHL14:%.*]] = shl i32 [[BF_LOAD13]], 1
// CHK-CXX-NEXT:    [[BF_ASHR15:%.*]] = ashr i32 [[BF_SHL14]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR15]], ptr [[ATMP11]], align 4
// CHK-CXX-NEXT:    [[CMP16:%.*]] = icmp slt i32 [[BF_ASHR15]], [[TMP8]]
// CHK-CXX-NEXT:    [[FROMBOOL18:%.*]] = zext i1 [[CMP16]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL18]], ptr [[ATMP17]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP16]], label [[ATOMIC_CONT19:%.*]], label [[ATOMIC_EXIT32:%.*]]
// CHK-CXX:       atomic_cont19:
// CHK-CXX-NEXT:    [[TMP9:%.*]] = phi i32 [ [[ATOMIC_LOAD10]], [[ATOMIC_EXIT]] ], [ [[TMP12:%.*]], [[ATOMIC_CMP25:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP9]], ptr [[ATOMIC_TEMP20]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD21:%.*]] = load i32, ptr [[ATOMIC_TEMP20]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE22:%.*]] = and i32 [[TMP8]], 2147483647
// CHK-CXX-NEXT:    [[BF_CLEAR23:%.*]] = and i32 [[BF_LOAD21]], -2147483648
// CHK-CXX-NEXT:    [[BF_SET24:%.*]] = or i32 [[BF_CLEAR23]], [[BF_VALUE22]]
// CHK-CXX-NEXT:    store i32 [[BF_SET24]], ptr [[ATOMIC_TEMP20]], align 4
// CHK-CXX-NEXT:    [[TMP10:%.*]] = load i32, ptr [[ATOMIC_TEMP20]], align 4
// CHK-CXX-NEXT:    [[TMP11:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx, i64 4), i32 [[TMP9]], i32 [[TMP10]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP12]] = extractvalue { i32, i1 } [[TMP11]], 0
// CHK-CXX-NEXT:    [[TMP13:%.*]] = extractvalue { i32, i1 } [[TMP11]], 1
// CHK-CXX-NEXT:    br i1 [[TMP13]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP25]]
// CHK-CXX:       atomic_upd_exit:
// CHK-CXX-NEXT:    store i32 [[TMP8]], ptr [[ATMP11]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT32]]
// CHK-CXX:       atomic_cmp25:
// CHK-CXX-NEXT:    store i32 [[TMP12]], ptr [[ATOMIC_TEMP26]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD27:%.*]] = load i32, ptr [[ATOMIC_TEMP26]], align 4
// CHK-CXX-NEXT:    [[BF_SHL28:%.*]] = shl i32 [[BF_LOAD27]], 1
// CHK-CXX-NEXT:    [[BF_ASHR29:%.*]] = ashr i32 [[BF_SHL28]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR29]], ptr [[ATMP11]], align 4
// CHK-CXX-NEXT:    [[CMP30:%.*]] = icmp slt i32 [[BF_ASHR29]], [[TMP8]]
// CHK-CXX-NEXT:    [[FROMBOOL31:%.*]] = zext i1 [[CMP30]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL31]], ptr [[ATMP17]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP30]], label [[ATOMIC_CONT19]], label [[ATOMIC_EXIT32]]
// CHK-CXX:       atomic_exit32:
// CHK-CXX-NEXT:    [[TMP14:%.*]] = load i32, ptr [[ATMP11]], align 4
// CHK-CXX-NEXT:    [[TMP15:%.*]] = load i8, ptr [[ATMP17]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP14]], ptr [[V]], align 4
// CHK-CXX-NEXT:    [[TMP16:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[TMP17:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD33:%.*]] = load atomic i32, ptr getelementptr (i8, ptr @bfx, i64 4) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD33]], ptr [[ATOMIC_TEMP35]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD36:%.*]] = load i32, ptr [[ATOMIC_TEMP35]], align 4
// CHK-CXX-NEXT:    [[BF_SHL37:%.*]] = shl i32 [[BF_LOAD36]], 1
// CHK-CXX-NEXT:    [[BF_ASHR38:%.*]] = ashr i32 [[BF_SHL37]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR38]], ptr [[ATMP34]], align 4
// CHK-CXX-NEXT:    [[CMP39:%.*]] = icmp eq i32 [[BF_ASHR38]], [[TMP17]]
// CHK-CXX-NEXT:    [[FROMBOOL41:%.*]] = zext i1 [[CMP39]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL41]], ptr [[ATMP40]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP39]], label [[ATOMIC_CONT42:%.*]], label [[ATOMIC_EXIT56:%.*]]
// CHK-CXX:       atomic_cont42:
// CHK-CXX-NEXT:    [[TMP18:%.*]] = phi i32 [ [[ATOMIC_LOAD33]], [[ATOMIC_EXIT32]] ], [ [[TMP21:%.*]], [[ATOMIC_CMP49:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP18]], ptr [[ATOMIC_TEMP43]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD44:%.*]] = load i32, ptr [[ATOMIC_TEMP43]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE45:%.*]] = and i32 [[TMP16]], 2147483647
// CHK-CXX-NEXT:    [[BF_CLEAR46:%.*]] = and i32 [[BF_LOAD44]], -2147483648
// CHK-CXX-NEXT:    [[BF_SET47:%.*]] = or i32 [[BF_CLEAR46]], [[BF_VALUE45]]
// CHK-CXX-NEXT:    store i32 [[BF_SET47]], ptr [[ATOMIC_TEMP43]], align 4
// CHK-CXX-NEXT:    [[TMP19:%.*]] = load i32, ptr [[ATOMIC_TEMP43]], align 4
// CHK-CXX-NEXT:    [[TMP20:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx, i64 4), i32 [[TMP18]], i32 [[TMP19]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP21]] = extractvalue { i32, i1 } [[TMP20]], 0
// CHK-CXX-NEXT:    [[TMP22:%.*]] = extractvalue { i32, i1 } [[TMP20]], 1
// CHK-CXX-NEXT:    br i1 [[TMP22]], label [[ATOMIC_UPD_EXIT48:%.*]], label [[ATOMIC_CMP49]]
// CHK-CXX:       atomic_upd_exit48:
// CHK-CXX-NEXT:    store i32 [[TMP16]], ptr [[ATMP34]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT56]]
// CHK-CXX:       atomic_cmp49:
// CHK-CXX-NEXT:    store i32 [[TMP21]], ptr [[ATOMIC_TEMP50]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD51:%.*]] = load i32, ptr [[ATOMIC_TEMP50]], align 4
// CHK-CXX-NEXT:    [[BF_SHL52:%.*]] = shl i32 [[BF_LOAD51]], 1
// CHK-CXX-NEXT:    [[BF_ASHR53:%.*]] = ashr i32 [[BF_SHL52]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR53]], ptr [[ATMP34]], align 4
// CHK-CXX-NEXT:    [[CMP54:%.*]] = icmp eq i32 [[BF_ASHR53]], [[TMP17]]
// CHK-CXX-NEXT:    [[FROMBOOL55:%.*]] = zext i1 [[CMP54]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL55]], ptr [[ATMP40]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP54]], label [[ATOMIC_CONT42]], label [[ATOMIC_EXIT56]]
// CHK-CXX:       atomic_exit56:
// CHK-CXX-NEXT:    [[TMP23:%.*]] = load i32, ptr [[ATMP34]], align 4
// CHK-CXX-NEXT:    [[TMP24:%.*]] = load i8, ptr [[ATMP40]], align 1
// CHK-CXX-NEXT:    [[TMP25:%.*]] = trunc i8 [[TMP24]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP25]], label [[ATOMIC_CAPTURE_CONT:%.*]], label [[ATOMIC_CAPTURE:%.*]]
// CHK-CXX:       atomic_capture:
// CHK-CXX-NEXT:    store i32 [[TMP23]], ptr [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT]]
// CHK-CXX:       atomic_capture_cont:
// CHK-CXX-NEXT:    [[TMP26:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[TMP27:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD57:%.*]] = load atomic i32, ptr getelementptr (i8, ptr @bfx, i64 4) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD57]], ptr [[ATOMIC_TEMP59]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD60:%.*]] = load i32, ptr [[ATOMIC_TEMP59]], align 4
// CHK-CXX-NEXT:    [[BF_SHL61:%.*]] = shl i32 [[BF_LOAD60]], 1
// CHK-CXX-NEXT:    [[BF_ASHR62:%.*]] = ashr i32 [[BF_SHL61]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR62]], ptr [[ATMP58]], align 4
// CHK-CXX-NEXT:    [[CMP63:%.*]] = icmp eq i32 [[BF_ASHR62]], [[TMP27]]
// CHK-CXX-NEXT:    [[FROMBOOL65:%.*]] = zext i1 [[CMP63]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL65]], ptr [[ATMP64]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP63]], label [[ATOMIC_CONT66:%.*]], label [[ATOMIC_EXIT79:%.*]]
// CHK-CXX:       atomic_cont66:
// CHK-CXX-NEXT:    [[TMP28:%.*]] = phi i32 [ [[ATOMIC_LOAD57]], [[ATOMIC_CAPTURE_CONT]] ], [ [[TMP31:%.*]], [[ATOMIC_CMP72:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP28]], ptr [[ATOMIC_TEMP67]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD68:%.*]] = load i32, ptr [[ATOMIC_TEMP67]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE69:%.*]] = and i32 [[TMP26]], 2147483647
// CHK-CXX-NEXT:    [[BF_CLEAR70:%.*]] = and i32 [[BF_LOAD68]], -2147483648
// CHK-CXX-NEXT:    [[BF_SET71:%.*]] = or i32 [[BF_CLEAR70]], [[BF_VALUE69]]
// CHK-CXX-NEXT:    store i32 [[BF_SET71]], ptr [[ATOMIC_TEMP67]], align 4
// CHK-CXX-NEXT:    [[TMP29:%.*]] = load i32, ptr [[ATOMIC_TEMP67]], align 4
// CHK-CXX-NEXT:    [[TMP30:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx, i64 4), i32 [[TMP28]], i32 [[TMP29]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP31]] = extractvalue { i32, i1 } [[TMP30]], 0
// CHK-CXX-NEXT:    [[TMP32:%.*]] = extractvalue { i32, i1 } [[TMP30]], 1
// CHK-CXX-NEXT:    br i1 [[TMP32]], label [[ATOMIC_EXIT79]], label [[ATOMIC_CMP72]]
// CHK-CXX:       atomic_cmp72:
// CHK-CXX-NEXT:    store i32 [[TMP31]], ptr [[ATOMIC_TEMP73]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD74:%.*]] = load i32, ptr [[ATOMIC_TEMP73]], align 4
// CHK-CXX-NEXT:    [[BF_SHL75:%.*]] = shl i32 [[BF_LOAD74]], 1
// CHK-CXX-NEXT:    [[BF_ASHR76:%.*]] = ashr i32 [[BF_SHL75]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR76]], ptr [[ATMP58]], align 4
// CHK-CXX-NEXT:    [[CMP77:%.*]] = icmp eq i32 [[BF_ASHR76]], [[TMP27]]
// CHK-CXX-NEXT:    [[FROMBOOL78:%.*]] = zext i1 [[CMP77]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL78]], ptr [[ATMP64]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP77]], label [[ATOMIC_CONT66]], label [[ATOMIC_EXIT79]]
// CHK-CXX:       atomic_exit79:
// CHK-CXX-NEXT:    [[TMP33:%.*]] = load i32, ptr [[ATMP58]], align 4
// CHK-CXX-NEXT:    [[TMP34:%.*]] = load i8, ptr [[ATMP64]], align 1
// CHK-CXX-NEXT:    [[CONV:%.*]] = zext i8 [[TMP34]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV]], ptr [[R]], align 4
// CHK-CXX-NEXT:    [[TMP35:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[TMP36:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD80:%.*]] = load atomic i32, ptr getelementptr (i8, ptr @bfx, i64 4) monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD80]], ptr [[ATOMIC_TEMP82]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD83:%.*]] = load i32, ptr [[ATOMIC_TEMP82]], align 4
// CHK-CXX-NEXT:    [[BF_SHL84:%.*]] = shl i32 [[BF_LOAD83]], 1
// CHK-CXX-NEXT:    [[BF_ASHR85:%.*]] = ashr i32 [[BF_SHL84]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR85]], ptr [[ATMP81]], align 4
// CHK-CXX-NEXT:    [[CMP86:%.*]] = icmp eq i32 [[BF_ASHR85]], [[TMP36]]
// CHK-CXX-NEXT:    [[FROMBOOL88:%.*]] = zext i1 [[CMP86]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL88]], ptr [[ATMP87]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP86]], label [[ATOMIC_CONT89:%.*]], label [[ATOMIC_EXIT102:%.*]]
// CHK-CXX:       atomic_cont89:
// CHK-CXX-NEXT:    [[TMP37:%.*]] = phi i32 [ [[ATOMIC_LOAD80]], [[ATOMIC_EXIT79]] ], [ [[TMP40:%.*]], [[ATOMIC_CMP95:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP37]], ptr [[ATOMIC_TEMP90]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD91:%.*]] = load i32, ptr [[ATOMIC_TEMP90]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE92:%.*]] = and i32 [[TMP35]], 2147483647
// CHK-CXX-NEXT:    [[BF_CLEAR93:%.*]] = and i32 [[BF_LOAD91]], -2147483648
// CHK-CXX-NEXT:    [[BF_SET94:%.*]] = or i32 [[BF_CLEAR93]], [[BF_VALUE92]]
// CHK-CXX-NEXT:    store i32 [[BF_SET94]], ptr [[ATOMIC_TEMP90]], align 4
// CHK-CXX-NEXT:    [[TMP38:%.*]] = load i32, ptr [[ATOMIC_TEMP90]], align 4
// CHK-CXX-NEXT:    [[TMP39:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx, i64 4), i32 [[TMP37]], i32 [[TMP38]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP40]] = extractvalue { i32, i1 } [[TMP39]], 0
// CHK-CXX-NEXT:    [[TMP41:%.*]] = extractvalue { i32, i1 } [[TMP39]], 1
// CHK-CXX-NEXT:    br i1 [[TMP41]], label [[ATOMIC_EXIT102]], label [[ATOMIC_CMP95]]
// CHK-CXX:       atomic_cmp95:
// CHK-CXX-NEXT:    store i32 [[TMP40]], ptr [[ATOMIC_TEMP96]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD97:%.*]] = load i32, ptr [[ATOMIC_TEMP96]], align 4
// CHK-CXX-NEXT:    [[BF_SHL98:%.*]] = shl i32 [[BF_LOAD97]], 1
// CHK-CXX-NEXT:    [[BF_ASHR99:%.*]] = ashr i32 [[BF_SHL98]], 1
// CHK-CXX-NEXT:    store i32 [[BF_ASHR99]], ptr [[ATMP81]], align 4
// CHK-CXX-NEXT:    [[CMP100:%.*]] = icmp eq i32 [[BF_ASHR99]], [[TMP36]]
// CHK-CXX-NEXT:    [[FROMBOOL101:%.*]] = zext i1 [[CMP100]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL101]], ptr [[ATMP87]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP100]], label [[ATOMIC_CONT89]], label [[ATOMIC_EXIT102]]
// CHK-CXX:       atomic_exit102:
// CHK-CXX-NEXT:    [[TMP42:%.*]] = load i32, ptr [[ATMP81]], align 4
// CHK-CXX-NEXT:    [[TMP43:%.*]] = load i8, ptr [[ATMP87]], align 1
// CHK-CXX-NEXT:    [[CONV103:%.*]] = zext i8 [[TMP43]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV103]], ptr [[R]], align 4
// CHK-CXX-NEXT:    [[TMP44:%.*]] = trunc i8 [[TMP43]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP44]], label [[ATOMIC_CAPTURE_CONT105:%.*]], label [[ATOMIC_CAPTURE104:%.*]]
// CHK-CXX:       atomic_capture104:
// CHK-CXX-NEXT:    store i32 [[TMP42]], ptr [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT105]]
// CHK-CXX:       atomic_capture_cont105:
// CHK-CXX-NEXT:    [[TMP45:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD106:%.*]] = load atomic i32, ptr @bfx2 monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD106]], ptr [[ATOMIC_TEMP108]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD109:%.*]] = load i32, ptr [[ATOMIC_TEMP108]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR110:%.*]] = ashr i32 [[BF_LOAD109]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR110]], ptr [[ATMP107]], align 4
// CHK-CXX-NEXT:    [[CMP111:%.*]] = icmp slt i32 [[BF_ASHR110]], [[TMP45]]
// CHK-CXX-NEXT:    [[FROMBOOL113:%.*]] = zext i1 [[CMP111]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL113]], ptr [[ATMP112]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP111]], label [[ATOMIC_CONT114:%.*]], label [[ATOMIC_EXIT127:%.*]]
// CHK-CXX:       atomic_cont114:
// CHK-CXX-NEXT:    [[TMP46:%.*]] = phi i32 [ [[ATOMIC_LOAD106]], [[ATOMIC_CAPTURE_CONT105]] ], [ [[TMP49:%.*]], [[ATOMIC_CMP121:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP46]], ptr [[ATOMIC_TEMP115]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD116:%.*]] = load i32, ptr [[ATOMIC_TEMP115]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE117:%.*]] = and i32 [[TMP45]], 1
// CHK-CXX-NEXT:    [[BF_SHL118:%.*]] = shl i32 [[BF_VALUE117]], 31
// CHK-CXX-NEXT:    [[BF_CLEAR119:%.*]] = and i32 [[BF_LOAD116]], 2147483647
// CHK-CXX-NEXT:    [[BF_SET120:%.*]] = or i32 [[BF_CLEAR119]], [[BF_SHL118]]
// CHK-CXX-NEXT:    store i32 [[BF_SET120]], ptr [[ATOMIC_TEMP115]], align 4
// CHK-CXX-NEXT:    [[TMP47:%.*]] = load i32, ptr [[ATOMIC_TEMP115]], align 4
// CHK-CXX-NEXT:    [[TMP48:%.*]] = cmpxchg ptr @bfx2, i32 [[TMP46]], i32 [[TMP47]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP49]] = extractvalue { i32, i1 } [[TMP48]], 0
// CHK-CXX-NEXT:    [[TMP50:%.*]] = extractvalue { i32, i1 } [[TMP48]], 1
// CHK-CXX-NEXT:    br i1 [[TMP50]], label [[ATOMIC_EXIT127]], label [[ATOMIC_CMP121]]
// CHK-CXX:       atomic_cmp121:
// CHK-CXX-NEXT:    store i32 [[TMP49]], ptr [[ATOMIC_TEMP122]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD123:%.*]] = load i32, ptr [[ATOMIC_TEMP122]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR124:%.*]] = ashr i32 [[BF_LOAD123]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR124]], ptr [[ATMP107]], align 4
// CHK-CXX-NEXT:    [[CMP125:%.*]] = icmp slt i32 [[BF_ASHR124]], [[TMP45]]
// CHK-CXX-NEXT:    [[FROMBOOL126:%.*]] = zext i1 [[CMP125]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL126]], ptr [[ATMP112]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP125]], label [[ATOMIC_CONT114]], label [[ATOMIC_EXIT127]]
// CHK-CXX:       atomic_exit127:
// CHK-CXX-NEXT:    [[TMP51:%.*]] = load i32, ptr [[ATMP107]], align 4
// CHK-CXX-NEXT:    [[TMP52:%.*]] = load i8, ptr [[ATMP112]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP51]], ptr [[V]], align 4
// CHK-CXX-NEXT:    [[TMP53:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD128:%.*]] = load atomic i32, ptr @bfx2 monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD128]], ptr [[ATOMIC_TEMP130]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD131:%.*]] = load i32, ptr [[ATOMIC_TEMP130]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR132:%.*]] = ashr i32 [[BF_LOAD131]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR132]], ptr [[ATMP129]], align 4
// CHK-CXX-NEXT:    [[CMP133:%.*]] = icmp slt i32 [[BF_ASHR132]], [[TMP53]]
// CHK-CXX-NEXT:    [[FROMBOOL135:%.*]] = zext i1 [[CMP133]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL135]], ptr [[ATMP134]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP133]], label [[ATOMIC_CONT136:%.*]], label [[ATOMIC_EXIT150:%.*]]
// CHK-CXX:       atomic_cont136:
// CHK-CXX-NEXT:    [[TMP54:%.*]] = phi i32 [ [[ATOMIC_LOAD128]], [[ATOMIC_EXIT127]] ], [ [[TMP57:%.*]], [[ATOMIC_CMP144:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP54]], ptr [[ATOMIC_TEMP137]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD138:%.*]] = load i32, ptr [[ATOMIC_TEMP137]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE139:%.*]] = and i32 [[TMP53]], 1
// CHK-CXX-NEXT:    [[BF_SHL140:%.*]] = shl i32 [[BF_VALUE139]], 31
// CHK-CXX-NEXT:    [[BF_CLEAR141:%.*]] = and i32 [[BF_LOAD138]], 2147483647
// CHK-CXX-NEXT:    [[BF_SET142:%.*]] = or i32 [[BF_CLEAR141]], [[BF_SHL140]]
// CHK-CXX-NEXT:    store i32 [[BF_SET142]], ptr [[ATOMIC_TEMP137]], align 4
// CHK-CXX-NEXT:    [[TMP55:%.*]] = load i32, ptr [[ATOMIC_TEMP137]], align 4
// CHK-CXX-NEXT:    [[TMP56:%.*]] = cmpxchg ptr @bfx2, i32 [[TMP54]], i32 [[TMP55]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP57]] = extractvalue { i32, i1 } [[TMP56]], 0
// CHK-CXX-NEXT:    [[TMP58:%.*]] = extractvalue { i32, i1 } [[TMP56]], 1
// CHK-CXX-NEXT:    br i1 [[TMP58]], label [[ATOMIC_UPD_EXIT143:%.*]], label [[ATOMIC_CMP144]]
// CHK-CXX:       atomic_upd_exit143:
// CHK-CXX-NEXT:    store i32 [[TMP53]], ptr [[ATMP129]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT150]]
// CHK-CXX:       atomic_cmp144:
// CHK-CXX-NEXT:    store i32 [[TMP57]], ptr [[ATOMIC_TEMP145]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD146:%.*]] = load i32, ptr [[ATOMIC_TEMP145]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR147:%.*]] = ashr i32 [[BF_LOAD146]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR147]], ptr [[ATMP129]], align 4
// CHK-CXX-NEXT:    [[CMP148:%.*]] = icmp slt i32 [[BF_ASHR147]], [[TMP53]]
// CHK-CXX-NEXT:    [[FROMBOOL149:%.*]] = zext i1 [[CMP148]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL149]], ptr [[ATMP134]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP148]], label [[ATOMIC_CONT136]], label [[ATOMIC_EXIT150]]
// CHK-CXX:       atomic_exit150:
// CHK-CXX-NEXT:    [[TMP59:%.*]] = load i32, ptr [[ATMP129]], align 4
// CHK-CXX-NEXT:    [[TMP60:%.*]] = load i8, ptr [[ATMP134]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP59]], ptr [[V]], align 4
// CHK-CXX-NEXT:    [[TMP61:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[TMP62:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD151:%.*]] = load atomic i32, ptr @bfx2 monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD151]], ptr [[ATOMIC_TEMP153]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD154:%.*]] = load i32, ptr [[ATOMIC_TEMP153]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR155:%.*]] = ashr i32 [[BF_LOAD154]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR155]], ptr [[ATMP152]], align 4
// CHK-CXX-NEXT:    [[CMP156:%.*]] = icmp eq i32 [[BF_ASHR155]], [[TMP62]]
// CHK-CXX-NEXT:    [[FROMBOOL158:%.*]] = zext i1 [[CMP156]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL158]], ptr [[ATMP157]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP156]], label [[ATOMIC_CONT159:%.*]], label [[ATOMIC_EXIT173:%.*]]
// CHK-CXX:       atomic_cont159:
// CHK-CXX-NEXT:    [[TMP63:%.*]] = phi i32 [ [[ATOMIC_LOAD151]], [[ATOMIC_EXIT150]] ], [ [[TMP66:%.*]], [[ATOMIC_CMP167:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP63]], ptr [[ATOMIC_TEMP160]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD161:%.*]] = load i32, ptr [[ATOMIC_TEMP160]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE162:%.*]] = and i32 [[TMP61]], 1
// CHK-CXX-NEXT:    [[BF_SHL163:%.*]] = shl i32 [[BF_VALUE162]], 31
// CHK-CXX-NEXT:    [[BF_CLEAR164:%.*]] = and i32 [[BF_LOAD161]], 2147483647
// CHK-CXX-NEXT:    [[BF_SET165:%.*]] = or i32 [[BF_CLEAR164]], [[BF_SHL163]]
// CHK-CXX-NEXT:    store i32 [[BF_SET165]], ptr [[ATOMIC_TEMP160]], align 4
// CHK-CXX-NEXT:    [[TMP64:%.*]] = load i32, ptr [[ATOMIC_TEMP160]], align 4
// CHK-CXX-NEXT:    [[TMP65:%.*]] = cmpxchg ptr @bfx2, i32 [[TMP63]], i32 [[TMP64]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP66]] = extractvalue { i32, i1 } [[TMP65]], 0
// CHK-CXX-NEXT:    [[TMP67:%.*]] = extractvalue { i32, i1 } [[TMP65]], 1
// CHK-CXX-NEXT:    br i1 [[TMP67]], label [[ATOMIC_UPD_EXIT166:%.*]], label [[ATOMIC_CMP167]]
// CHK-CXX:       atomic_upd_exit166:
// CHK-CXX-NEXT:    store i32 [[TMP61]], ptr [[ATMP152]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT173]]
// CHK-CXX:       atomic_cmp167:
// CHK-CXX-NEXT:    store i32 [[TMP66]], ptr [[ATOMIC_TEMP168]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD169:%.*]] = load i32, ptr [[ATOMIC_TEMP168]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR170:%.*]] = ashr i32 [[BF_LOAD169]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR170]], ptr [[ATMP152]], align 4
// CHK-CXX-NEXT:    [[CMP171:%.*]] = icmp eq i32 [[BF_ASHR170]], [[TMP62]]
// CHK-CXX-NEXT:    [[FROMBOOL172:%.*]] = zext i1 [[CMP171]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL172]], ptr [[ATMP157]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP171]], label [[ATOMIC_CONT159]], label [[ATOMIC_EXIT173]]
// CHK-CXX:       atomic_exit173:
// CHK-CXX-NEXT:    [[TMP68:%.*]] = load i32, ptr [[ATMP152]], align 4
// CHK-CXX-NEXT:    [[TMP69:%.*]] = load i8, ptr [[ATMP157]], align 1
// CHK-CXX-NEXT:    [[TMP70:%.*]] = trunc i8 [[TMP69]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP70]], label [[ATOMIC_CAPTURE_CONT175:%.*]], label [[ATOMIC_CAPTURE174:%.*]]
// CHK-CXX:       atomic_capture174:
// CHK-CXX-NEXT:    store i32 [[TMP68]], ptr [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT175]]
// CHK-CXX:       atomic_capture_cont175:
// CHK-CXX-NEXT:    [[TMP71:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[TMP72:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD176:%.*]] = load atomic i32, ptr @bfx2 monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD176]], ptr [[ATOMIC_TEMP178]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD179:%.*]] = load i32, ptr [[ATOMIC_TEMP178]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR180:%.*]] = ashr i32 [[BF_LOAD179]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR180]], ptr [[ATMP177]], align 4
// CHK-CXX-NEXT:    [[CMP181:%.*]] = icmp eq i32 [[BF_ASHR180]], [[TMP72]]
// CHK-CXX-NEXT:    [[FROMBOOL183:%.*]] = zext i1 [[CMP181]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL183]], ptr [[ATMP182]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP181]], label [[ATOMIC_CONT184:%.*]], label [[ATOMIC_EXIT197:%.*]]
// CHK-CXX:       atomic_cont184:
// CHK-CXX-NEXT:    [[TMP73:%.*]] = phi i32 [ [[ATOMIC_LOAD176]], [[ATOMIC_CAPTURE_CONT175]] ], [ [[TMP76:%.*]], [[ATOMIC_CMP191:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP73]], ptr [[ATOMIC_TEMP185]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD186:%.*]] = load i32, ptr [[ATOMIC_TEMP185]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE187:%.*]] = and i32 [[TMP71]], 1
// CHK-CXX-NEXT:    [[BF_SHL188:%.*]] = shl i32 [[BF_VALUE187]], 31
// CHK-CXX-NEXT:    [[BF_CLEAR189:%.*]] = and i32 [[BF_LOAD186]], 2147483647
// CHK-CXX-NEXT:    [[BF_SET190:%.*]] = or i32 [[BF_CLEAR189]], [[BF_SHL188]]
// CHK-CXX-NEXT:    store i32 [[BF_SET190]], ptr [[ATOMIC_TEMP185]], align 4
// CHK-CXX-NEXT:    [[TMP74:%.*]] = load i32, ptr [[ATOMIC_TEMP185]], align 4
// CHK-CXX-NEXT:    [[TMP75:%.*]] = cmpxchg ptr @bfx2, i32 [[TMP73]], i32 [[TMP74]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP76]] = extractvalue { i32, i1 } [[TMP75]], 0
// CHK-CXX-NEXT:    [[TMP77:%.*]] = extractvalue { i32, i1 } [[TMP75]], 1
// CHK-CXX-NEXT:    br i1 [[TMP77]], label [[ATOMIC_EXIT197]], label [[ATOMIC_CMP191]]
// CHK-CXX:       atomic_cmp191:
// CHK-CXX-NEXT:    store i32 [[TMP76]], ptr [[ATOMIC_TEMP192]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD193:%.*]] = load i32, ptr [[ATOMIC_TEMP192]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR194:%.*]] = ashr i32 [[BF_LOAD193]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR194]], ptr [[ATMP177]], align 4
// CHK-CXX-NEXT:    [[CMP195:%.*]] = icmp eq i32 [[BF_ASHR194]], [[TMP72]]
// CHK-CXX-NEXT:    [[FROMBOOL196:%.*]] = zext i1 [[CMP195]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL196]], ptr [[ATMP182]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP195]], label [[ATOMIC_CONT184]], label [[ATOMIC_EXIT197]]
// CHK-CXX:       atomic_exit197:
// CHK-CXX-NEXT:    [[TMP78:%.*]] = load i32, ptr [[ATMP177]], align 4
// CHK-CXX-NEXT:    [[TMP79:%.*]] = load i8, ptr [[ATMP182]], align 1
// CHK-CXX-NEXT:    [[CONV198:%.*]] = zext i8 [[TMP79]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV198]], ptr [[R]], align 4
// CHK-CXX-NEXT:    [[TMP80:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[TMP81:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD199:%.*]] = load atomic i32, ptr @bfx2 monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD199]], ptr [[ATOMIC_TEMP201]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD202:%.*]] = load i32, ptr [[ATOMIC_TEMP201]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR203:%.*]] = ashr i32 [[BF_LOAD202]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR203]], ptr [[ATMP200]], align 4
// CHK-CXX-NEXT:    [[CMP204:%.*]] = icmp eq i32 [[BF_ASHR203]], [[TMP81]]
// CHK-CXX-NEXT:    [[FROMBOOL206:%.*]] = zext i1 [[CMP204]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL206]], ptr [[ATMP205]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP204]], label [[ATOMIC_CONT207:%.*]], label [[ATOMIC_EXIT220:%.*]]
// CHK-CXX:       atomic_cont207:
// CHK-CXX-NEXT:    [[TMP82:%.*]] = phi i32 [ [[ATOMIC_LOAD199]], [[ATOMIC_EXIT197]] ], [ [[TMP85:%.*]], [[ATOMIC_CMP214:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP82]], ptr [[ATOMIC_TEMP208]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD209:%.*]] = load i32, ptr [[ATOMIC_TEMP208]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE210:%.*]] = and i32 [[TMP80]], 1
// CHK-CXX-NEXT:    [[BF_SHL211:%.*]] = shl i32 [[BF_VALUE210]], 31
// CHK-CXX-NEXT:    [[BF_CLEAR212:%.*]] = and i32 [[BF_LOAD209]], 2147483647
// CHK-CXX-NEXT:    [[BF_SET213:%.*]] = or i32 [[BF_CLEAR212]], [[BF_SHL211]]
// CHK-CXX-NEXT:    store i32 [[BF_SET213]], ptr [[ATOMIC_TEMP208]], align 4
// CHK-CXX-NEXT:    [[TMP83:%.*]] = load i32, ptr [[ATOMIC_TEMP208]], align 4
// CHK-CXX-NEXT:    [[TMP84:%.*]] = cmpxchg ptr @bfx2, i32 [[TMP82]], i32 [[TMP83]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP85]] = extractvalue { i32, i1 } [[TMP84]], 0
// CHK-CXX-NEXT:    [[TMP86:%.*]] = extractvalue { i32, i1 } [[TMP84]], 1
// CHK-CXX-NEXT:    br i1 [[TMP86]], label [[ATOMIC_EXIT220]], label [[ATOMIC_CMP214]]
// CHK-CXX:       atomic_cmp214:
// CHK-CXX-NEXT:    store i32 [[TMP85]], ptr [[ATOMIC_TEMP215]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD216:%.*]] = load i32, ptr [[ATOMIC_TEMP215]], align 4
// CHK-CXX-NEXT:    [[BF_ASHR217:%.*]] = ashr i32 [[BF_LOAD216]], 31
// CHK-CXX-NEXT:    store i32 [[BF_ASHR217]], ptr [[ATMP200]], align 4
// CHK-CXX-NEXT:    [[CMP218:%.*]] = icmp eq i32 [[BF_ASHR217]], [[TMP81]]
// CHK-CXX-NEXT:    [[FROMBOOL219:%.*]] = zext i1 [[CMP218]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL219]], ptr [[ATMP205]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP218]], label [[ATOMIC_CONT207]], label [[ATOMIC_EXIT220]]
// CHK-CXX:       atomic_exit220:
// CHK-CXX-NEXT:    [[TMP87:%.*]] = load i32, ptr [[ATMP200]], align 4
// CHK-CXX-NEXT:    [[TMP88:%.*]] = load i8, ptr [[ATMP205]], align 1
// CHK-CXX-NEXT:    [[CONV221:%.*]] = zext i8 [[TMP88]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV221]], ptr [[R]], align 4
// CHK-CXX-NEXT:    [[TMP89:%.*]] = trunc i8 [[TMP88]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP89]], label [[ATOMIC_CAPTURE_CONT223:%.*]], label [[ATOMIC_CAPTURE222:%.*]]
// CHK-CXX:       atomic_capture222:
// CHK-CXX-NEXT:    store i32 [[TMP87]], ptr [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT223]]
// CHK-CXX:       atomic_capture_cont223:
// CHK-CXX-NEXT:    [[TMP90:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD224:%.*]] = load atomic i8, ptr getelementptr (i8, ptr @bfx2_packed, i64 3) monotonic, align 1
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD224]], ptr [[ATOMIC_TEMP226]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD227:%.*]] = load i8, ptr [[ATOMIC_TEMP226]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR228:%.*]] = ashr i8 [[BF_LOAD227]], 7
// CHK-CXX-NEXT:    [[BF_CAST:%.*]] = sext i8 [[BF_ASHR228]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST]], ptr [[ATMP225]], align 4
// CHK-CXX-NEXT:    [[CMP229:%.*]] = icmp slt i32 [[BF_CAST]], [[TMP90]]
// CHK-CXX-NEXT:    [[FROMBOOL231:%.*]] = zext i1 [[CMP229]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL231]], ptr [[ATMP230]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP229]], label [[ATOMIC_CONT232:%.*]], label [[ATOMIC_EXIT246:%.*]]
// CHK-CXX:       atomic_cont232:
// CHK-CXX-NEXT:    [[TMP91:%.*]] = phi i8 [ [[ATOMIC_LOAD224]], [[ATOMIC_CAPTURE_CONT223]] ], [ [[TMP95:%.*]], [[ATOMIC_CMP239:%.*]] ]
// CHK-CXX-NEXT:    store i8 [[TMP91]], ptr [[ATOMIC_TEMP233]], align 1
// CHK-CXX-NEXT:    [[TMP92:%.*]] = trunc i32 [[TMP90]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD234:%.*]] = load i8, ptr [[ATOMIC_TEMP233]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE235:%.*]] = and i8 [[TMP92]], 1
// CHK-CXX-NEXT:    [[BF_SHL236:%.*]] = shl i8 [[BF_VALUE235]], 7
// CHK-CXX-NEXT:    [[BF_CLEAR237:%.*]] = and i8 [[BF_LOAD234]], 127
// CHK-CXX-NEXT:    [[BF_SET238:%.*]] = or i8 [[BF_CLEAR237]], [[BF_SHL236]]
// CHK-CXX-NEXT:    store i8 [[BF_SET238]], ptr [[ATOMIC_TEMP233]], align 1
// CHK-CXX-NEXT:    [[TMP93:%.*]] = load i8, ptr [[ATOMIC_TEMP233]], align 1
// CHK-CXX-NEXT:    [[TMP94:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx2_packed, i64 3), i8 [[TMP91]], i8 [[TMP93]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP95]] = extractvalue { i8, i1 } [[TMP94]], 0
// CHK-CXX-NEXT:    [[TMP96:%.*]] = extractvalue { i8, i1 } [[TMP94]], 1
// CHK-CXX-NEXT:    br i1 [[TMP96]], label [[ATOMIC_EXIT246]], label [[ATOMIC_CMP239]]
// CHK-CXX:       atomic_cmp239:
// CHK-CXX-NEXT:    store i8 [[TMP95]], ptr [[ATOMIC_TEMP240]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD241:%.*]] = load i8, ptr [[ATOMIC_TEMP240]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR242:%.*]] = ashr i8 [[BF_LOAD241]], 7
// CHK-CXX-NEXT:    [[BF_CAST243:%.*]] = sext i8 [[BF_ASHR242]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST243]], ptr [[ATMP225]], align 4
// CHK-CXX-NEXT:    [[CMP244:%.*]] = icmp slt i32 [[BF_CAST243]], [[TMP90]]
// CHK-CXX-NEXT:    [[FROMBOOL245:%.*]] = zext i1 [[CMP244]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL245]], ptr [[ATMP230]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP244]], label [[ATOMIC_CONT232]], label [[ATOMIC_EXIT246]]
// CHK-CXX:       atomic_exit246:
// CHK-CXX-NEXT:    [[TMP97:%.*]] = load i32, ptr [[ATMP225]], align 4
// CHK-CXX-NEXT:    [[TMP98:%.*]] = load i8, ptr [[ATMP230]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP97]], ptr [[V]], align 4
// CHK-CXX-NEXT:    [[TMP99:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD247:%.*]] = load atomic i8, ptr getelementptr (i8, ptr @bfx2_packed, i64 3) monotonic, align 1
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD247]], ptr [[ATOMIC_TEMP249]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD250:%.*]] = load i8, ptr [[ATOMIC_TEMP249]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR251:%.*]] = ashr i8 [[BF_LOAD250]], 7
// CHK-CXX-NEXT:    [[BF_CAST252:%.*]] = sext i8 [[BF_ASHR251]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST252]], ptr [[ATMP248]], align 4
// CHK-CXX-NEXT:    [[CMP253:%.*]] = icmp slt i32 [[BF_CAST252]], [[TMP99]]
// CHK-CXX-NEXT:    [[FROMBOOL255:%.*]] = zext i1 [[CMP253]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL255]], ptr [[ATMP254]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP253]], label [[ATOMIC_CONT256:%.*]], label [[ATOMIC_EXIT271:%.*]]
// CHK-CXX:       atomic_cont256:
// CHK-CXX-NEXT:    [[TMP100:%.*]] = phi i8 [ [[ATOMIC_LOAD247]], [[ATOMIC_EXIT246]] ], [ [[TMP104:%.*]], [[ATOMIC_CMP264:%.*]] ]
// CHK-CXX-NEXT:    store i8 [[TMP100]], ptr [[ATOMIC_TEMP257]], align 1
// CHK-CXX-NEXT:    [[TMP101:%.*]] = trunc i32 [[TMP99]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD258:%.*]] = load i8, ptr [[ATOMIC_TEMP257]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE259:%.*]] = and i8 [[TMP101]], 1
// CHK-CXX-NEXT:    [[BF_SHL260:%.*]] = shl i8 [[BF_VALUE259]], 7
// CHK-CXX-NEXT:    [[BF_CLEAR261:%.*]] = and i8 [[BF_LOAD258]], 127
// CHK-CXX-NEXT:    [[BF_SET262:%.*]] = or i8 [[BF_CLEAR261]], [[BF_SHL260]]
// CHK-CXX-NEXT:    store i8 [[BF_SET262]], ptr [[ATOMIC_TEMP257]], align 1
// CHK-CXX-NEXT:    [[TMP102:%.*]] = load i8, ptr [[ATOMIC_TEMP257]], align 1
// CHK-CXX-NEXT:    [[TMP103:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx2_packed, i64 3), i8 [[TMP100]], i8 [[TMP102]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP104]] = extractvalue { i8, i1 } [[TMP103]], 0
// CHK-CXX-NEXT:    [[TMP105:%.*]] = extractvalue { i8, i1 } [[TMP103]], 1
// CHK-CXX-NEXT:    br i1 [[TMP105]], label [[ATOMIC_UPD_EXIT263:%.*]], label [[ATOMIC_CMP264]]
// CHK-CXX:       atomic_upd_exit263:
// CHK-CXX-NEXT:    store i32 [[TMP99]], ptr [[ATMP248]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT271]]
// CHK-CXX:       atomic_cmp264:
// CHK-CXX-NEXT:    store i8 [[TMP104]], ptr [[ATOMIC_TEMP265]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD266:%.*]] = load i8, ptr [[ATOMIC_TEMP265]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR267:%.*]] = ashr i8 [[BF_LOAD266]], 7
// CHK-CXX-NEXT:    [[BF_CAST268:%.*]] = sext i8 [[BF_ASHR267]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST268]], ptr [[ATMP248]], align 4
// CHK-CXX-NEXT:    [[CMP269:%.*]] = icmp slt i32 [[BF_CAST268]], [[TMP99]]
// CHK-CXX-NEXT:    [[FROMBOOL270:%.*]] = zext i1 [[CMP269]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL270]], ptr [[ATMP254]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP269]], label [[ATOMIC_CONT256]], label [[ATOMIC_EXIT271]]
// CHK-CXX:       atomic_exit271:
// CHK-CXX-NEXT:    [[TMP106:%.*]] = load i32, ptr [[ATMP248]], align 4
// CHK-CXX-NEXT:    [[TMP107:%.*]] = load i8, ptr [[ATMP254]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP106]], ptr [[V]], align 4
// CHK-CXX-NEXT:    [[TMP108:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[TMP109:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD272:%.*]] = load atomic i8, ptr getelementptr (i8, ptr @bfx2_packed, i64 3) monotonic, align 1
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD272]], ptr [[ATOMIC_TEMP274]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD275:%.*]] = load i8, ptr [[ATOMIC_TEMP274]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR276:%.*]] = ashr i8 [[BF_LOAD275]], 7
// CHK-CXX-NEXT:    [[BF_CAST277:%.*]] = sext i8 [[BF_ASHR276]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST277]], ptr [[ATMP273]], align 4
// CHK-CXX-NEXT:    [[CMP278:%.*]] = icmp eq i32 [[BF_CAST277]], [[TMP109]]
// CHK-CXX-NEXT:    [[FROMBOOL280:%.*]] = zext i1 [[CMP278]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL280]], ptr [[ATMP279]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP278]], label [[ATOMIC_CONT281:%.*]], label [[ATOMIC_EXIT296:%.*]]
// CHK-CXX:       atomic_cont281:
// CHK-CXX-NEXT:    [[TMP110:%.*]] = phi i8 [ [[ATOMIC_LOAD272]], [[ATOMIC_EXIT271]] ], [ [[TMP114:%.*]], [[ATOMIC_CMP289:%.*]] ]
// CHK-CXX-NEXT:    store i8 [[TMP110]], ptr [[ATOMIC_TEMP282]], align 1
// CHK-CXX-NEXT:    [[TMP111:%.*]] = trunc i32 [[TMP108]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD283:%.*]] = load i8, ptr [[ATOMIC_TEMP282]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE284:%.*]] = and i8 [[TMP111]], 1
// CHK-CXX-NEXT:    [[BF_SHL285:%.*]] = shl i8 [[BF_VALUE284]], 7
// CHK-CXX-NEXT:    [[BF_CLEAR286:%.*]] = and i8 [[BF_LOAD283]], 127
// CHK-CXX-NEXT:    [[BF_SET287:%.*]] = or i8 [[BF_CLEAR286]], [[BF_SHL285]]
// CHK-CXX-NEXT:    store i8 [[BF_SET287]], ptr [[ATOMIC_TEMP282]], align 1
// CHK-CXX-NEXT:    [[TMP112:%.*]] = load i8, ptr [[ATOMIC_TEMP282]], align 1
// CHK-CXX-NEXT:    [[TMP113:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx2_packed, i64 3), i8 [[TMP110]], i8 [[TMP112]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP114]] = extractvalue { i8, i1 } [[TMP113]], 0
// CHK-CXX-NEXT:    [[TMP115:%.*]] = extractvalue { i8, i1 } [[TMP113]], 1
// CHK-CXX-NEXT:    br i1 [[TMP115]], label [[ATOMIC_UPD_EXIT288:%.*]], label [[ATOMIC_CMP289]]
// CHK-CXX:       atomic_upd_exit288:
// CHK-CXX-NEXT:    store i32 [[TMP108]], ptr [[ATMP273]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT296]]
// CHK-CXX:       atomic_cmp289:
// CHK-CXX-NEXT:    store i8 [[TMP114]], ptr [[ATOMIC_TEMP290]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD291:%.*]] = load i8, ptr [[ATOMIC_TEMP290]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR292:%.*]] = ashr i8 [[BF_LOAD291]], 7
// CHK-CXX-NEXT:    [[BF_CAST293:%.*]] = sext i8 [[BF_ASHR292]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST293]], ptr [[ATMP273]], align 4
// CHK-CXX-NEXT:    [[CMP294:%.*]] = icmp eq i32 [[BF_CAST293]], [[TMP109]]
// CHK-CXX-NEXT:    [[FROMBOOL295:%.*]] = zext i1 [[CMP294]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL295]], ptr [[ATMP279]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP294]], label [[ATOMIC_CONT281]], label [[ATOMIC_EXIT296]]
// CHK-CXX:       atomic_exit296:
// CHK-CXX-NEXT:    [[TMP116:%.*]] = load i32, ptr [[ATMP273]], align 4
// CHK-CXX-NEXT:    [[TMP117:%.*]] = load i8, ptr [[ATMP279]], align 1
// CHK-CXX-NEXT:    [[TMP118:%.*]] = trunc i8 [[TMP117]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP118]], label [[ATOMIC_CAPTURE_CONT298:%.*]], label [[ATOMIC_CAPTURE297:%.*]]
// CHK-CXX:       atomic_capture297:
// CHK-CXX-NEXT:    store i32 [[TMP116]], ptr [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT298]]
// CHK-CXX:       atomic_capture_cont298:
// CHK-CXX-NEXT:    [[TMP119:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[TMP120:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD299:%.*]] = load atomic i8, ptr getelementptr (i8, ptr @bfx2_packed, i64 3) monotonic, align 1
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD299]], ptr [[ATOMIC_TEMP301]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD302:%.*]] = load i8, ptr [[ATOMIC_TEMP301]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR303:%.*]] = ashr i8 [[BF_LOAD302]], 7
// CHK-CXX-NEXT:    [[BF_CAST304:%.*]] = sext i8 [[BF_ASHR303]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST304]], ptr [[ATMP300]], align 4
// CHK-CXX-NEXT:    [[CMP305:%.*]] = icmp eq i32 [[BF_CAST304]], [[TMP120]]
// CHK-CXX-NEXT:    [[FROMBOOL307:%.*]] = zext i1 [[CMP305]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL307]], ptr [[ATMP306]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP305]], label [[ATOMIC_CONT308:%.*]], label [[ATOMIC_EXIT322:%.*]]
// CHK-CXX:       atomic_cont308:
// CHK-CXX-NEXT:    [[TMP121:%.*]] = phi i8 [ [[ATOMIC_LOAD299]], [[ATOMIC_CAPTURE_CONT298]] ], [ [[TMP125:%.*]], [[ATOMIC_CMP315:%.*]] ]
// CHK-CXX-NEXT:    store i8 [[TMP121]], ptr [[ATOMIC_TEMP309]], align 1
// CHK-CXX-NEXT:    [[TMP122:%.*]] = trunc i32 [[TMP119]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD310:%.*]] = load i8, ptr [[ATOMIC_TEMP309]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE311:%.*]] = and i8 [[TMP122]], 1
// CHK-CXX-NEXT:    [[BF_SHL312:%.*]] = shl i8 [[BF_VALUE311]], 7
// CHK-CXX-NEXT:    [[BF_CLEAR313:%.*]] = and i8 [[BF_LOAD310]], 127
// CHK-CXX-NEXT:    [[BF_SET314:%.*]] = or i8 [[BF_CLEAR313]], [[BF_SHL312]]
// CHK-CXX-NEXT:    store i8 [[BF_SET314]], ptr [[ATOMIC_TEMP309]], align 1
// CHK-CXX-NEXT:    [[TMP123:%.*]] = load i8, ptr [[ATOMIC_TEMP309]], align 1
// CHK-CXX-NEXT:    [[TMP124:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx2_packed, i64 3), i8 [[TMP121]], i8 [[TMP123]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP125]] = extractvalue { i8, i1 } [[TMP124]], 0
// CHK-CXX-NEXT:    [[TMP126:%.*]] = extractvalue { i8, i1 } [[TMP124]], 1
// CHK-CXX-NEXT:    br i1 [[TMP126]], label [[ATOMIC_EXIT322]], label [[ATOMIC_CMP315]]
// CHK-CXX:       atomic_cmp315:
// CHK-CXX-NEXT:    store i8 [[TMP125]], ptr [[ATOMIC_TEMP316]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD317:%.*]] = load i8, ptr [[ATOMIC_TEMP316]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR318:%.*]] = ashr i8 [[BF_LOAD317]], 7
// CHK-CXX-NEXT:    [[BF_CAST319:%.*]] = sext i8 [[BF_ASHR318]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST319]], ptr [[ATMP300]], align 4
// CHK-CXX-NEXT:    [[CMP320:%.*]] = icmp eq i32 [[BF_CAST319]], [[TMP120]]
// CHK-CXX-NEXT:    [[FROMBOOL321:%.*]] = zext i1 [[CMP320]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL321]], ptr [[ATMP306]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP320]], label [[ATOMIC_CONT308]], label [[ATOMIC_EXIT322]]
// CHK-CXX:       atomic_exit322:
// CHK-CXX-NEXT:    [[TMP127:%.*]] = load i32, ptr [[ATMP300]], align 4
// CHK-CXX-NEXT:    [[TMP128:%.*]] = load i8, ptr [[ATMP306]], align 1
// CHK-CXX-NEXT:    [[CONV323:%.*]] = zext i8 [[TMP128]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV323]], ptr [[R]], align 4
// CHK-CXX-NEXT:    [[TMP129:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[TMP130:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD324:%.*]] = load atomic i8, ptr getelementptr (i8, ptr @bfx2_packed, i64 3) monotonic, align 1
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD324]], ptr [[ATOMIC_TEMP326]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD327:%.*]] = load i8, ptr [[ATOMIC_TEMP326]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR328:%.*]] = ashr i8 [[BF_LOAD327]], 7
// CHK-CXX-NEXT:    [[BF_CAST329:%.*]] = sext i8 [[BF_ASHR328]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST329]], ptr [[ATMP325]], align 4
// CHK-CXX-NEXT:    [[CMP330:%.*]] = icmp eq i32 [[BF_CAST329]], [[TMP130]]
// CHK-CXX-NEXT:    [[FROMBOOL332:%.*]] = zext i1 [[CMP330]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL332]], ptr [[ATMP331]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP330]], label [[ATOMIC_CONT333:%.*]], label [[ATOMIC_EXIT347:%.*]]
// CHK-CXX:       atomic_cont333:
// CHK-CXX-NEXT:    [[TMP131:%.*]] = phi i8 [ [[ATOMIC_LOAD324]], [[ATOMIC_EXIT322]] ], [ [[TMP135:%.*]], [[ATOMIC_CMP340:%.*]] ]
// CHK-CXX-NEXT:    store i8 [[TMP131]], ptr [[ATOMIC_TEMP334]], align 1
// CHK-CXX-NEXT:    [[TMP132:%.*]] = trunc i32 [[TMP129]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD335:%.*]] = load i8, ptr [[ATOMIC_TEMP334]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE336:%.*]] = and i8 [[TMP132]], 1
// CHK-CXX-NEXT:    [[BF_SHL337:%.*]] = shl i8 [[BF_VALUE336]], 7
// CHK-CXX-NEXT:    [[BF_CLEAR338:%.*]] = and i8 [[BF_LOAD335]], 127
// CHK-CXX-NEXT:    [[BF_SET339:%.*]] = or i8 [[BF_CLEAR338]], [[BF_SHL337]]
// CHK-CXX-NEXT:    store i8 [[BF_SET339]], ptr [[ATOMIC_TEMP334]], align 1
// CHK-CXX-NEXT:    [[TMP133:%.*]] = load i8, ptr [[ATOMIC_TEMP334]], align 1
// CHK-CXX-NEXT:    [[TMP134:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx2_packed, i64 3), i8 [[TMP131]], i8 [[TMP133]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP135]] = extractvalue { i8, i1 } [[TMP134]], 0
// CHK-CXX-NEXT:    [[TMP136:%.*]] = extractvalue { i8, i1 } [[TMP134]], 1
// CHK-CXX-NEXT:    br i1 [[TMP136]], label [[ATOMIC_EXIT347]], label [[ATOMIC_CMP340]]
// CHK-CXX:       atomic_cmp340:
// CHK-CXX-NEXT:    store i8 [[TMP135]], ptr [[ATOMIC_TEMP341]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD342:%.*]] = load i8, ptr [[ATOMIC_TEMP341]], align 1
// CHK-CXX-NEXT:    [[BF_ASHR343:%.*]] = ashr i8 [[BF_LOAD342]], 7
// CHK-CXX-NEXT:    [[BF_CAST344:%.*]] = sext i8 [[BF_ASHR343]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST344]], ptr [[ATMP325]], align 4
// CHK-CXX-NEXT:    [[CMP345:%.*]] = icmp eq i32 [[BF_CAST344]], [[TMP130]]
// CHK-CXX-NEXT:    [[FROMBOOL346:%.*]] = zext i1 [[CMP345]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL346]], ptr [[ATMP331]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP345]], label [[ATOMIC_CONT333]], label [[ATOMIC_EXIT347]]
// CHK-CXX:       atomic_exit347:
// CHK-CXX-NEXT:    [[TMP137:%.*]] = load i32, ptr [[ATMP325]], align 4
// CHK-CXX-NEXT:    [[TMP138:%.*]] = load i8, ptr [[ATMP331]], align 1
// CHK-CXX-NEXT:    [[CONV348:%.*]] = zext i8 [[TMP138]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV348]], ptr [[R]], align 4
// CHK-CXX-NEXT:    [[TMP139:%.*]] = trunc i8 [[TMP138]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP139]], label [[ATOMIC_CAPTURE_CONT350:%.*]], label [[ATOMIC_CAPTURE349:%.*]]
// CHK-CXX:       atomic_capture349:
// CHK-CXX-NEXT:    store i32 [[TMP137]], ptr [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT350]]
// CHK-CXX:       atomic_capture_cont350:
// CHK-CXX-NEXT:    [[TMP140:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD351:%.*]] = load atomic i32, ptr @bfx3 monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD351]], ptr [[ATOMIC_TEMP353]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD354:%.*]] = load i32, ptr [[ATOMIC_TEMP353]], align 4
// CHK-CXX-NEXT:    [[BF_SHL355:%.*]] = shl i32 [[BF_LOAD354]], 7
// CHK-CXX-NEXT:    [[BF_ASHR356:%.*]] = ashr i32 [[BF_SHL355]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR356]], ptr [[ATMP352]], align 4
// CHK-CXX-NEXT:    [[CMP357:%.*]] = icmp slt i32 [[BF_ASHR356]], [[TMP140]]
// CHK-CXX-NEXT:    [[FROMBOOL359:%.*]] = zext i1 [[CMP357]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL359]], ptr [[ATMP358]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP357]], label [[ATOMIC_CONT360:%.*]], label [[ATOMIC_EXIT374:%.*]]
// CHK-CXX:       atomic_cont360:
// CHK-CXX-NEXT:    [[TMP141:%.*]] = phi i32 [ [[ATOMIC_LOAD351]], [[ATOMIC_CAPTURE_CONT350]] ], [ [[TMP144:%.*]], [[ATOMIC_CMP367:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP141]], ptr [[ATOMIC_TEMP361]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD362:%.*]] = load i32, ptr [[ATOMIC_TEMP361]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE363:%.*]] = and i32 [[TMP140]], 16383
// CHK-CXX-NEXT:    [[BF_SHL364:%.*]] = shl i32 [[BF_VALUE363]], 11
// CHK-CXX-NEXT:    [[BF_CLEAR365:%.*]] = and i32 [[BF_LOAD362]], -33552385
// CHK-CXX-NEXT:    [[BF_SET366:%.*]] = or i32 [[BF_CLEAR365]], [[BF_SHL364]]
// CHK-CXX-NEXT:    store i32 [[BF_SET366]], ptr [[ATOMIC_TEMP361]], align 4
// CHK-CXX-NEXT:    [[TMP142:%.*]] = load i32, ptr [[ATOMIC_TEMP361]], align 4
// CHK-CXX-NEXT:    [[TMP143:%.*]] = cmpxchg ptr @bfx3, i32 [[TMP141]], i32 [[TMP142]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP144]] = extractvalue { i32, i1 } [[TMP143]], 0
// CHK-CXX-NEXT:    [[TMP145:%.*]] = extractvalue { i32, i1 } [[TMP143]], 1
// CHK-CXX-NEXT:    br i1 [[TMP145]], label [[ATOMIC_EXIT374]], label [[ATOMIC_CMP367]]
// CHK-CXX:       atomic_cmp367:
// CHK-CXX-NEXT:    store i32 [[TMP144]], ptr [[ATOMIC_TEMP368]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD369:%.*]] = load i32, ptr [[ATOMIC_TEMP368]], align 4
// CHK-CXX-NEXT:    [[BF_SHL370:%.*]] = shl i32 [[BF_LOAD369]], 7
// CHK-CXX-NEXT:    [[BF_ASHR371:%.*]] = ashr i32 [[BF_SHL370]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR371]], ptr [[ATMP352]], align 4
// CHK-CXX-NEXT:    [[CMP372:%.*]] = icmp slt i32 [[BF_ASHR371]], [[TMP140]]
// CHK-CXX-NEXT:    [[FROMBOOL373:%.*]] = zext i1 [[CMP372]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL373]], ptr [[ATMP358]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP372]], label [[ATOMIC_CONT360]], label [[ATOMIC_EXIT374]]
// CHK-CXX:       atomic_exit374:
// CHK-CXX-NEXT:    [[TMP146:%.*]] = load i32, ptr [[ATMP352]], align 4
// CHK-CXX-NEXT:    [[TMP147:%.*]] = load i8, ptr [[ATMP358]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP146]], ptr [[V]], align 4
// CHK-CXX-NEXT:    [[TMP148:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD375:%.*]] = load atomic i32, ptr @bfx3 monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD375]], ptr [[ATOMIC_TEMP377]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD378:%.*]] = load i32, ptr [[ATOMIC_TEMP377]], align 4
// CHK-CXX-NEXT:    [[BF_SHL379:%.*]] = shl i32 [[BF_LOAD378]], 7
// CHK-CXX-NEXT:    [[BF_ASHR380:%.*]] = ashr i32 [[BF_SHL379]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR380]], ptr [[ATMP376]], align 4
// CHK-CXX-NEXT:    [[CMP381:%.*]] = icmp slt i32 [[BF_ASHR380]], [[TMP148]]
// CHK-CXX-NEXT:    [[FROMBOOL383:%.*]] = zext i1 [[CMP381]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL383]], ptr [[ATMP382]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP381]], label [[ATOMIC_CONT384:%.*]], label [[ATOMIC_EXIT399:%.*]]
// CHK-CXX:       atomic_cont384:
// CHK-CXX-NEXT:    [[TMP149:%.*]] = phi i32 [ [[ATOMIC_LOAD375]], [[ATOMIC_EXIT374]] ], [ [[TMP152:%.*]], [[ATOMIC_CMP392:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP149]], ptr [[ATOMIC_TEMP385]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD386:%.*]] = load i32, ptr [[ATOMIC_TEMP385]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE387:%.*]] = and i32 [[TMP148]], 16383
// CHK-CXX-NEXT:    [[BF_SHL388:%.*]] = shl i32 [[BF_VALUE387]], 11
// CHK-CXX-NEXT:    [[BF_CLEAR389:%.*]] = and i32 [[BF_LOAD386]], -33552385
// CHK-CXX-NEXT:    [[BF_SET390:%.*]] = or i32 [[BF_CLEAR389]], [[BF_SHL388]]
// CHK-CXX-NEXT:    store i32 [[BF_SET390]], ptr [[ATOMIC_TEMP385]], align 4
// CHK-CXX-NEXT:    [[TMP150:%.*]] = load i32, ptr [[ATOMIC_TEMP385]], align 4
// CHK-CXX-NEXT:    [[TMP151:%.*]] = cmpxchg ptr @bfx3, i32 [[TMP149]], i32 [[TMP150]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP152]] = extractvalue { i32, i1 } [[TMP151]], 0
// CHK-CXX-NEXT:    [[TMP153:%.*]] = extractvalue { i32, i1 } [[TMP151]], 1
// CHK-CXX-NEXT:    br i1 [[TMP153]], label [[ATOMIC_UPD_EXIT391:%.*]], label [[ATOMIC_CMP392]]
// CHK-CXX:       atomic_upd_exit391:
// CHK-CXX-NEXT:    store i32 [[TMP148]], ptr [[ATMP376]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT399]]
// CHK-CXX:       atomic_cmp392:
// CHK-CXX-NEXT:    store i32 [[TMP152]], ptr [[ATOMIC_TEMP393]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD394:%.*]] = load i32, ptr [[ATOMIC_TEMP393]], align 4
// CHK-CXX-NEXT:    [[BF_SHL395:%.*]] = shl i32 [[BF_LOAD394]], 7
// CHK-CXX-NEXT:    [[BF_ASHR396:%.*]] = ashr i32 [[BF_SHL395]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR396]], ptr [[ATMP376]], align 4
// CHK-CXX-NEXT:    [[CMP397:%.*]] = icmp slt i32 [[BF_ASHR396]], [[TMP148]]
// CHK-CXX-NEXT:    [[FROMBOOL398:%.*]] = zext i1 [[CMP397]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL398]], ptr [[ATMP382]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP397]], label [[ATOMIC_CONT384]], label [[ATOMIC_EXIT399]]
// CHK-CXX:       atomic_exit399:
// CHK-CXX-NEXT:    [[TMP154:%.*]] = load i32, ptr [[ATMP376]], align 4
// CHK-CXX-NEXT:    [[TMP155:%.*]] = load i8, ptr [[ATMP382]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP154]], ptr [[V]], align 4
// CHK-CXX-NEXT:    [[TMP156:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[TMP157:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD400:%.*]] = load atomic i32, ptr @bfx3 monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD400]], ptr [[ATOMIC_TEMP402]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD403:%.*]] = load i32, ptr [[ATOMIC_TEMP402]], align 4
// CHK-CXX-NEXT:    [[BF_SHL404:%.*]] = shl i32 [[BF_LOAD403]], 7
// CHK-CXX-NEXT:    [[BF_ASHR405:%.*]] = ashr i32 [[BF_SHL404]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR405]], ptr [[ATMP401]], align 4
// CHK-CXX-NEXT:    [[CMP406:%.*]] = icmp eq i32 [[BF_ASHR405]], [[TMP157]]
// CHK-CXX-NEXT:    [[FROMBOOL408:%.*]] = zext i1 [[CMP406]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL408]], ptr [[ATMP407]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP406]], label [[ATOMIC_CONT409:%.*]], label [[ATOMIC_EXIT424:%.*]]
// CHK-CXX:       atomic_cont409:
// CHK-CXX-NEXT:    [[TMP158:%.*]] = phi i32 [ [[ATOMIC_LOAD400]], [[ATOMIC_EXIT399]] ], [ [[TMP161:%.*]], [[ATOMIC_CMP417:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP158]], ptr [[ATOMIC_TEMP410]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD411:%.*]] = load i32, ptr [[ATOMIC_TEMP410]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE412:%.*]] = and i32 [[TMP156]], 16383
// CHK-CXX-NEXT:    [[BF_SHL413:%.*]] = shl i32 [[BF_VALUE412]], 11
// CHK-CXX-NEXT:    [[BF_CLEAR414:%.*]] = and i32 [[BF_LOAD411]], -33552385
// CHK-CXX-NEXT:    [[BF_SET415:%.*]] = or i32 [[BF_CLEAR414]], [[BF_SHL413]]
// CHK-CXX-NEXT:    store i32 [[BF_SET415]], ptr [[ATOMIC_TEMP410]], align 4
// CHK-CXX-NEXT:    [[TMP159:%.*]] = load i32, ptr [[ATOMIC_TEMP410]], align 4
// CHK-CXX-NEXT:    [[TMP160:%.*]] = cmpxchg ptr @bfx3, i32 [[TMP158]], i32 [[TMP159]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP161]] = extractvalue { i32, i1 } [[TMP160]], 0
// CHK-CXX-NEXT:    [[TMP162:%.*]] = extractvalue { i32, i1 } [[TMP160]], 1
// CHK-CXX-NEXT:    br i1 [[TMP162]], label [[ATOMIC_UPD_EXIT416:%.*]], label [[ATOMIC_CMP417]]
// CHK-CXX:       atomic_upd_exit416:
// CHK-CXX-NEXT:    store i32 [[TMP156]], ptr [[ATMP401]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT424]]
// CHK-CXX:       atomic_cmp417:
// CHK-CXX-NEXT:    store i32 [[TMP161]], ptr [[ATOMIC_TEMP418]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD419:%.*]] = load i32, ptr [[ATOMIC_TEMP418]], align 4
// CHK-CXX-NEXT:    [[BF_SHL420:%.*]] = shl i32 [[BF_LOAD419]], 7
// CHK-CXX-NEXT:    [[BF_ASHR421:%.*]] = ashr i32 [[BF_SHL420]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR421]], ptr [[ATMP401]], align 4
// CHK-CXX-NEXT:    [[CMP422:%.*]] = icmp eq i32 [[BF_ASHR421]], [[TMP157]]
// CHK-CXX-NEXT:    [[FROMBOOL423:%.*]] = zext i1 [[CMP422]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL423]], ptr [[ATMP407]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP422]], label [[ATOMIC_CONT409]], label [[ATOMIC_EXIT424]]
// CHK-CXX:       atomic_exit424:
// CHK-CXX-NEXT:    [[TMP163:%.*]] = load i32, ptr [[ATMP401]], align 4
// CHK-CXX-NEXT:    [[TMP164:%.*]] = load i8, ptr [[ATMP407]], align 1
// CHK-CXX-NEXT:    [[TMP165:%.*]] = trunc i8 [[TMP164]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP165]], label [[ATOMIC_CAPTURE_CONT426:%.*]], label [[ATOMIC_CAPTURE425:%.*]]
// CHK-CXX:       atomic_capture425:
// CHK-CXX-NEXT:    store i32 [[TMP163]], ptr [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT426]]
// CHK-CXX:       atomic_capture_cont426:
// CHK-CXX-NEXT:    [[TMP166:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[TMP167:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD427:%.*]] = load atomic i32, ptr @bfx3 monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD427]], ptr [[ATOMIC_TEMP429]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD430:%.*]] = load i32, ptr [[ATOMIC_TEMP429]], align 4
// CHK-CXX-NEXT:    [[BF_SHL431:%.*]] = shl i32 [[BF_LOAD430]], 7
// CHK-CXX-NEXT:    [[BF_ASHR432:%.*]] = ashr i32 [[BF_SHL431]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR432]], ptr [[ATMP428]], align 4
// CHK-CXX-NEXT:    [[CMP433:%.*]] = icmp eq i32 [[BF_ASHR432]], [[TMP167]]
// CHK-CXX-NEXT:    [[FROMBOOL435:%.*]] = zext i1 [[CMP433]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL435]], ptr [[ATMP434]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP433]], label [[ATOMIC_CONT436:%.*]], label [[ATOMIC_EXIT450:%.*]]
// CHK-CXX:       atomic_cont436:
// CHK-CXX-NEXT:    [[TMP168:%.*]] = phi i32 [ [[ATOMIC_LOAD427]], [[ATOMIC_CAPTURE_CONT426]] ], [ [[TMP171:%.*]], [[ATOMIC_CMP443:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP168]], ptr [[ATOMIC_TEMP437]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD438:%.*]] = load i32, ptr [[ATOMIC_TEMP437]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE439:%.*]] = and i32 [[TMP166]], 16383
// CHK-CXX-NEXT:    [[BF_SHL440:%.*]] = shl i32 [[BF_VALUE439]], 11
// CHK-CXX-NEXT:    [[BF_CLEAR441:%.*]] = and i32 [[BF_LOAD438]], -33552385
// CHK-CXX-NEXT:    [[BF_SET442:%.*]] = or i32 [[BF_CLEAR441]], [[BF_SHL440]]
// CHK-CXX-NEXT:    store i32 [[BF_SET442]], ptr [[ATOMIC_TEMP437]], align 4
// CHK-CXX-NEXT:    [[TMP169:%.*]] = load i32, ptr [[ATOMIC_TEMP437]], align 4
// CHK-CXX-NEXT:    [[TMP170:%.*]] = cmpxchg ptr @bfx3, i32 [[TMP168]], i32 [[TMP169]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP171]] = extractvalue { i32, i1 } [[TMP170]], 0
// CHK-CXX-NEXT:    [[TMP172:%.*]] = extractvalue { i32, i1 } [[TMP170]], 1
// CHK-CXX-NEXT:    br i1 [[TMP172]], label [[ATOMIC_EXIT450]], label [[ATOMIC_CMP443]]
// CHK-CXX:       atomic_cmp443:
// CHK-CXX-NEXT:    store i32 [[TMP171]], ptr [[ATOMIC_TEMP444]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD445:%.*]] = load i32, ptr [[ATOMIC_TEMP444]], align 4
// CHK-CXX-NEXT:    [[BF_SHL446:%.*]] = shl i32 [[BF_LOAD445]], 7
// CHK-CXX-NEXT:    [[BF_ASHR447:%.*]] = ashr i32 [[BF_SHL446]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR447]], ptr [[ATMP428]], align 4
// CHK-CXX-NEXT:    [[CMP448:%.*]] = icmp eq i32 [[BF_ASHR447]], [[TMP167]]
// CHK-CXX-NEXT:    [[FROMBOOL449:%.*]] = zext i1 [[CMP448]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL449]], ptr [[ATMP434]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP448]], label [[ATOMIC_CONT436]], label [[ATOMIC_EXIT450]]
// CHK-CXX:       atomic_exit450:
// CHK-CXX-NEXT:    [[TMP173:%.*]] = load i32, ptr [[ATMP428]], align 4
// CHK-CXX-NEXT:    [[TMP174:%.*]] = load i8, ptr [[ATMP434]], align 1
// CHK-CXX-NEXT:    [[CONV451:%.*]] = zext i8 [[TMP174]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV451]], ptr [[R]], align 4
// CHK-CXX-NEXT:    [[TMP175:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[TMP176:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD452:%.*]] = load atomic i32, ptr @bfx3 monotonic, align 4
// CHK-CXX-NEXT:    store i32 [[ATOMIC_LOAD452]], ptr [[ATOMIC_TEMP454]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD455:%.*]] = load i32, ptr [[ATOMIC_TEMP454]], align 4
// CHK-CXX-NEXT:    [[BF_SHL456:%.*]] = shl i32 [[BF_LOAD455]], 7
// CHK-CXX-NEXT:    [[BF_ASHR457:%.*]] = ashr i32 [[BF_SHL456]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR457]], ptr [[ATMP453]], align 4
// CHK-CXX-NEXT:    [[CMP458:%.*]] = icmp eq i32 [[BF_ASHR457]], [[TMP176]]
// CHK-CXX-NEXT:    [[FROMBOOL460:%.*]] = zext i1 [[CMP458]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL460]], ptr [[ATMP459]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP458]], label [[ATOMIC_CONT461:%.*]], label [[ATOMIC_EXIT475:%.*]]
// CHK-CXX:       atomic_cont461:
// CHK-CXX-NEXT:    [[TMP177:%.*]] = phi i32 [ [[ATOMIC_LOAD452]], [[ATOMIC_EXIT450]] ], [ [[TMP180:%.*]], [[ATOMIC_CMP468:%.*]] ]
// CHK-CXX-NEXT:    store i32 [[TMP177]], ptr [[ATOMIC_TEMP462]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD463:%.*]] = load i32, ptr [[ATOMIC_TEMP462]], align 4
// CHK-CXX-NEXT:    [[BF_VALUE464:%.*]] = and i32 [[TMP175]], 16383
// CHK-CXX-NEXT:    [[BF_SHL465:%.*]] = shl i32 [[BF_VALUE464]], 11
// CHK-CXX-NEXT:    [[BF_CLEAR466:%.*]] = and i32 [[BF_LOAD463]], -33552385
// CHK-CXX-NEXT:    [[BF_SET467:%.*]] = or i32 [[BF_CLEAR466]], [[BF_SHL465]]
// CHK-CXX-NEXT:    store i32 [[BF_SET467]], ptr [[ATOMIC_TEMP462]], align 4
// CHK-CXX-NEXT:    [[TMP178:%.*]] = load i32, ptr [[ATOMIC_TEMP462]], align 4
// CHK-CXX-NEXT:    [[TMP179:%.*]] = cmpxchg ptr @bfx3, i32 [[TMP177]], i32 [[TMP178]] monotonic monotonic, align 4
// CHK-CXX-NEXT:    [[TMP180]] = extractvalue { i32, i1 } [[TMP179]], 0
// CHK-CXX-NEXT:    [[TMP181:%.*]] = extractvalue { i32, i1 } [[TMP179]], 1
// CHK-CXX-NEXT:    br i1 [[TMP181]], label [[ATOMIC_EXIT475]], label [[ATOMIC_CMP468]]
// CHK-CXX:       atomic_cmp468:
// CHK-CXX-NEXT:    store i32 [[TMP180]], ptr [[ATOMIC_TEMP469]], align 4
// CHK-CXX-NEXT:    [[BF_LOAD470:%.*]] = load i32, ptr [[ATOMIC_TEMP469]], align 4
// CHK-CXX-NEXT:    [[BF_SHL471:%.*]] = shl i32 [[BF_LOAD470]], 7
// CHK-CXX-NEXT:    [[BF_ASHR472:%.*]] = ashr i32 [[BF_SHL471]], 18
// CHK-CXX-NEXT:    store i32 [[BF_ASHR472]], ptr [[ATMP453]], align 4
// CHK-CXX-NEXT:    [[CMP473:%.*]] = icmp eq i32 [[BF_ASHR472]], [[TMP176]]
// CHK-CXX-NEXT:    [[FROMBOOL474:%.*]] = zext i1 [[CMP473]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL474]], ptr [[ATMP459]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP473]], label [[ATOMIC_CONT461]], label [[ATOMIC_EXIT475]]
// CHK-CXX:       atomic_exit475:
// CHK-CXX-NEXT:    [[TMP182:%.*]] = load i32, ptr [[ATMP453]], align 4
// CHK-CXX-NEXT:    [[TMP183:%.*]] = load i8, ptr [[ATMP459]], align 1
// CHK-CXX-NEXT:    [[CONV476:%.*]] = zext i8 [[TMP183]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV476]], ptr [[R]], align 4
// CHK-CXX-NEXT:    [[TMP184:%.*]] = trunc i8 [[TMP183]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP184]], label [[ATOMIC_CAPTURE_CONT478:%.*]], label [[ATOMIC_CAPTURE477:%.*]]
// CHK-CXX:       atomic_capture477:
// CHK-CXX-NEXT:    store i32 [[TMP182]], ptr [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT478]]
// CHK-CXX:       atomic_capture_cont478:
// CHK-CXX-NEXT:    [[TMP185:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD479:%.*]] = load atomic i64, ptr @bfx4 monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD479]], ptr [[ATOMIC_TEMP481]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD482:%.*]] = load i64, ptr [[ATOMIC_TEMP481]], align 8
// CHK-CXX-NEXT:    [[BF_SHL483:%.*]] = shl i64 [[BF_LOAD482]], 47
// CHK-CXX-NEXT:    [[BF_ASHR484:%.*]] = ashr i64 [[BF_SHL483]], 63
// CHK-CXX-NEXT:    [[BF_CAST485:%.*]] = trunc i64 [[BF_ASHR484]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST485]], ptr [[ATMP480]], align 4
// CHK-CXX-NEXT:    [[CMP486:%.*]] = icmp slt i32 [[BF_CAST485]], [[TMP185]]
// CHK-CXX-NEXT:    [[FROMBOOL488:%.*]] = zext i1 [[CMP486]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL488]], ptr [[ATMP487]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP486]], label [[ATOMIC_CONT489:%.*]], label [[ATOMIC_EXIT504:%.*]]
// CHK-CXX:       atomic_cont489:
// CHK-CXX-NEXT:    [[TMP186:%.*]] = phi i64 [ [[ATOMIC_LOAD479]], [[ATOMIC_CAPTURE_CONT478]] ], [ [[TMP190:%.*]], [[ATOMIC_CMP496:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP186]], ptr [[ATOMIC_TEMP490]], align 8
// CHK-CXX-NEXT:    [[TMP187:%.*]] = zext i32 [[TMP185]] to i64
// CHK-CXX-NEXT:    [[BF_LOAD491:%.*]] = load i64, ptr [[ATOMIC_TEMP490]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE492:%.*]] = and i64 [[TMP187]], 1
// CHK-CXX-NEXT:    [[BF_SHL493:%.*]] = shl i64 [[BF_VALUE492]], 16
// CHK-CXX-NEXT:    [[BF_CLEAR494:%.*]] = and i64 [[BF_LOAD491]], -65537
// CHK-CXX-NEXT:    [[BF_SET495:%.*]] = or i64 [[BF_CLEAR494]], [[BF_SHL493]]
// CHK-CXX-NEXT:    store i64 [[BF_SET495]], ptr [[ATOMIC_TEMP490]], align 8
// CHK-CXX-NEXT:    [[TMP188:%.*]] = load i64, ptr [[ATOMIC_TEMP490]], align 8
// CHK-CXX-NEXT:    [[TMP189:%.*]] = cmpxchg ptr @bfx4, i64 [[TMP186]], i64 [[TMP188]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP190]] = extractvalue { i64, i1 } [[TMP189]], 0
// CHK-CXX-NEXT:    [[TMP191:%.*]] = extractvalue { i64, i1 } [[TMP189]], 1
// CHK-CXX-NEXT:    br i1 [[TMP191]], label [[ATOMIC_EXIT504]], label [[ATOMIC_CMP496]]
// CHK-CXX:       atomic_cmp496:
// CHK-CXX-NEXT:    store i64 [[TMP190]], ptr [[ATOMIC_TEMP497]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD498:%.*]] = load i64, ptr [[ATOMIC_TEMP497]], align 8
// CHK-CXX-NEXT:    [[BF_SHL499:%.*]] = shl i64 [[BF_LOAD498]], 47
// CHK-CXX-NEXT:    [[BF_ASHR500:%.*]] = ashr i64 [[BF_SHL499]], 63
// CHK-CXX-NEXT:    [[BF_CAST501:%.*]] = trunc i64 [[BF_ASHR500]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST501]], ptr [[ATMP480]], align 4
// CHK-CXX-NEXT:    [[CMP502:%.*]] = icmp slt i32 [[BF_CAST501]], [[TMP185]]
// CHK-CXX-NEXT:    [[FROMBOOL503:%.*]] = zext i1 [[CMP502]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL503]], ptr [[ATMP487]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP502]], label [[ATOMIC_CONT489]], label [[ATOMIC_EXIT504]]
// CHK-CXX:       atomic_exit504:
// CHK-CXX-NEXT:    [[TMP192:%.*]] = load i32, ptr [[ATMP480]], align 4
// CHK-CXX-NEXT:    [[TMP193:%.*]] = load i8, ptr [[ATMP487]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP192]], ptr [[V]], align 4
// CHK-CXX-NEXT:    [[TMP194:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD505:%.*]] = load atomic i64, ptr @bfx4 monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD505]], ptr [[ATOMIC_TEMP507]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD508:%.*]] = load i64, ptr [[ATOMIC_TEMP507]], align 8
// CHK-CXX-NEXT:    [[BF_SHL509:%.*]] = shl i64 [[BF_LOAD508]], 47
// CHK-CXX-NEXT:    [[BF_ASHR510:%.*]] = ashr i64 [[BF_SHL509]], 63
// CHK-CXX-NEXT:    [[BF_CAST511:%.*]] = trunc i64 [[BF_ASHR510]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST511]], ptr [[ATMP506]], align 4
// CHK-CXX-NEXT:    [[CMP512:%.*]] = icmp slt i32 [[BF_CAST511]], [[TMP194]]
// CHK-CXX-NEXT:    [[FROMBOOL514:%.*]] = zext i1 [[CMP512]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL514]], ptr [[ATMP513]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP512]], label [[ATOMIC_CONT515:%.*]], label [[ATOMIC_EXIT531:%.*]]
// CHK-CXX:       atomic_cont515:
// CHK-CXX-NEXT:    [[TMP195:%.*]] = phi i64 [ [[ATOMIC_LOAD505]], [[ATOMIC_EXIT504]] ], [ [[TMP199:%.*]], [[ATOMIC_CMP523:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP195]], ptr [[ATOMIC_TEMP516]], align 8
// CHK-CXX-NEXT:    [[TMP196:%.*]] = zext i32 [[TMP194]] to i64
// CHK-CXX-NEXT:    [[BF_LOAD517:%.*]] = load i64, ptr [[ATOMIC_TEMP516]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE518:%.*]] = and i64 [[TMP196]], 1
// CHK-CXX-NEXT:    [[BF_SHL519:%.*]] = shl i64 [[BF_VALUE518]], 16
// CHK-CXX-NEXT:    [[BF_CLEAR520:%.*]] = and i64 [[BF_LOAD517]], -65537
// CHK-CXX-NEXT:    [[BF_SET521:%.*]] = or i64 [[BF_CLEAR520]], [[BF_SHL519]]
// CHK-CXX-NEXT:    store i64 [[BF_SET521]], ptr [[ATOMIC_TEMP516]], align 8
// CHK-CXX-NEXT:    [[TMP197:%.*]] = load i64, ptr [[ATOMIC_TEMP516]], align 8
// CHK-CXX-NEXT:    [[TMP198:%.*]] = cmpxchg ptr @bfx4, i64 [[TMP195]], i64 [[TMP197]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP199]] = extractvalue { i64, i1 } [[TMP198]], 0
// CHK-CXX-NEXT:    [[TMP200:%.*]] = extractvalue { i64, i1 } [[TMP198]], 1
// CHK-CXX-NEXT:    br i1 [[TMP200]], label [[ATOMIC_UPD_EXIT522:%.*]], label [[ATOMIC_CMP523]]
// CHK-CXX:       atomic_upd_exit522:
// CHK-CXX-NEXT:    store i32 [[TMP194]], ptr [[ATMP506]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT531]]
// CHK-CXX:       atomic_cmp523:
// CHK-CXX-NEXT:    store i64 [[TMP199]], ptr [[ATOMIC_TEMP524]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD525:%.*]] = load i64, ptr [[ATOMIC_TEMP524]], align 8
// CHK-CXX-NEXT:    [[BF_SHL526:%.*]] = shl i64 [[BF_LOAD525]], 47
// CHK-CXX-NEXT:    [[BF_ASHR527:%.*]] = ashr i64 [[BF_SHL526]], 63
// CHK-CXX-NEXT:    [[BF_CAST528:%.*]] = trunc i64 [[BF_ASHR527]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST528]], ptr [[ATMP506]], align 4
// CHK-CXX-NEXT:    [[CMP529:%.*]] = icmp slt i32 [[BF_CAST528]], [[TMP194]]
// CHK-CXX-NEXT:    [[FROMBOOL530:%.*]] = zext i1 [[CMP529]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL530]], ptr [[ATMP513]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP529]], label [[ATOMIC_CONT515]], label [[ATOMIC_EXIT531]]
// CHK-CXX:       atomic_exit531:
// CHK-CXX-NEXT:    [[TMP201:%.*]] = load i32, ptr [[ATMP506]], align 4
// CHK-CXX-NEXT:    [[TMP202:%.*]] = load i8, ptr [[ATMP513]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP201]], ptr [[V]], align 4
// CHK-CXX-NEXT:    [[TMP203:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[TMP204:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD532:%.*]] = load atomic i64, ptr @bfx4 monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD532]], ptr [[ATOMIC_TEMP534]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD535:%.*]] = load i64, ptr [[ATOMIC_TEMP534]], align 8
// CHK-CXX-NEXT:    [[BF_SHL536:%.*]] = shl i64 [[BF_LOAD535]], 47
// CHK-CXX-NEXT:    [[BF_ASHR537:%.*]] = ashr i64 [[BF_SHL536]], 63
// CHK-CXX-NEXT:    [[BF_CAST538:%.*]] = trunc i64 [[BF_ASHR537]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST538]], ptr [[ATMP533]], align 4
// CHK-CXX-NEXT:    [[CMP539:%.*]] = icmp eq i32 [[BF_CAST538]], [[TMP204]]
// CHK-CXX-NEXT:    [[FROMBOOL541:%.*]] = zext i1 [[CMP539]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL541]], ptr [[ATMP540]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP539]], label [[ATOMIC_CONT542:%.*]], label [[ATOMIC_EXIT558:%.*]]
// CHK-CXX:       atomic_cont542:
// CHK-CXX-NEXT:    [[TMP205:%.*]] = phi i64 [ [[ATOMIC_LOAD532]], [[ATOMIC_EXIT531]] ], [ [[TMP209:%.*]], [[ATOMIC_CMP550:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP205]], ptr [[ATOMIC_TEMP543]], align 8
// CHK-CXX-NEXT:    [[TMP206:%.*]] = zext i32 [[TMP203]] to i64
// CHK-CXX-NEXT:    [[BF_LOAD544:%.*]] = load i64, ptr [[ATOMIC_TEMP543]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE545:%.*]] = and i64 [[TMP206]], 1
// CHK-CXX-NEXT:    [[BF_SHL546:%.*]] = shl i64 [[BF_VALUE545]], 16
// CHK-CXX-NEXT:    [[BF_CLEAR547:%.*]] = and i64 [[BF_LOAD544]], -65537
// CHK-CXX-NEXT:    [[BF_SET548:%.*]] = or i64 [[BF_CLEAR547]], [[BF_SHL546]]
// CHK-CXX-NEXT:    store i64 [[BF_SET548]], ptr [[ATOMIC_TEMP543]], align 8
// CHK-CXX-NEXT:    [[TMP207:%.*]] = load i64, ptr [[ATOMIC_TEMP543]], align 8
// CHK-CXX-NEXT:    [[TMP208:%.*]] = cmpxchg ptr @bfx4, i64 [[TMP205]], i64 [[TMP207]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP209]] = extractvalue { i64, i1 } [[TMP208]], 0
// CHK-CXX-NEXT:    [[TMP210:%.*]] = extractvalue { i64, i1 } [[TMP208]], 1
// CHK-CXX-NEXT:    br i1 [[TMP210]], label [[ATOMIC_UPD_EXIT549:%.*]], label [[ATOMIC_CMP550]]
// CHK-CXX:       atomic_upd_exit549:
// CHK-CXX-NEXT:    store i32 [[TMP203]], ptr [[ATMP533]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT558]]
// CHK-CXX:       atomic_cmp550:
// CHK-CXX-NEXT:    store i64 [[TMP209]], ptr [[ATOMIC_TEMP551]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD552:%.*]] = load i64, ptr [[ATOMIC_TEMP551]], align 8
// CHK-CXX-NEXT:    [[BF_SHL553:%.*]] = shl i64 [[BF_LOAD552]], 47
// CHK-CXX-NEXT:    [[BF_ASHR554:%.*]] = ashr i64 [[BF_SHL553]], 63
// CHK-CXX-NEXT:    [[BF_CAST555:%.*]] = trunc i64 [[BF_ASHR554]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST555]], ptr [[ATMP533]], align 4
// CHK-CXX-NEXT:    [[CMP556:%.*]] = icmp eq i32 [[BF_CAST555]], [[TMP204]]
// CHK-CXX-NEXT:    [[FROMBOOL557:%.*]] = zext i1 [[CMP556]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL557]], ptr [[ATMP540]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP556]], label [[ATOMIC_CONT542]], label [[ATOMIC_EXIT558]]
// CHK-CXX:       atomic_exit558:
// CHK-CXX-NEXT:    [[TMP211:%.*]] = load i32, ptr [[ATMP533]], align 4
// CHK-CXX-NEXT:    [[TMP212:%.*]] = load i8, ptr [[ATMP540]], align 1
// CHK-CXX-NEXT:    [[TMP213:%.*]] = trunc i8 [[TMP212]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP213]], label [[ATOMIC_CAPTURE_CONT560:%.*]], label [[ATOMIC_CAPTURE559:%.*]]
// CHK-CXX:       atomic_capture559:
// CHK-CXX-NEXT:    store i32 [[TMP211]], ptr [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT560]]
// CHK-CXX:       atomic_capture_cont560:
// CHK-CXX-NEXT:    [[TMP214:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[TMP215:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD561:%.*]] = load atomic i64, ptr @bfx4 monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD561]], ptr [[ATOMIC_TEMP563]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD564:%.*]] = load i64, ptr [[ATOMIC_TEMP563]], align 8
// CHK-CXX-NEXT:    [[BF_SHL565:%.*]] = shl i64 [[BF_LOAD564]], 47
// CHK-CXX-NEXT:    [[BF_ASHR566:%.*]] = ashr i64 [[BF_SHL565]], 63
// CHK-CXX-NEXT:    [[BF_CAST567:%.*]] = trunc i64 [[BF_ASHR566]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST567]], ptr [[ATMP562]], align 4
// CHK-CXX-NEXT:    [[CMP568:%.*]] = icmp eq i32 [[BF_CAST567]], [[TMP215]]
// CHK-CXX-NEXT:    [[FROMBOOL570:%.*]] = zext i1 [[CMP568]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL570]], ptr [[ATMP569]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP568]], label [[ATOMIC_CONT571:%.*]], label [[ATOMIC_EXIT586:%.*]]
// CHK-CXX:       atomic_cont571:
// CHK-CXX-NEXT:    [[TMP216:%.*]] = phi i64 [ [[ATOMIC_LOAD561]], [[ATOMIC_CAPTURE_CONT560]] ], [ [[TMP220:%.*]], [[ATOMIC_CMP578:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP216]], ptr [[ATOMIC_TEMP572]], align 8
// CHK-CXX-NEXT:    [[TMP217:%.*]] = zext i32 [[TMP214]] to i64
// CHK-CXX-NEXT:    [[BF_LOAD573:%.*]] = load i64, ptr [[ATOMIC_TEMP572]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE574:%.*]] = and i64 [[TMP217]], 1
// CHK-CXX-NEXT:    [[BF_SHL575:%.*]] = shl i64 [[BF_VALUE574]], 16
// CHK-CXX-NEXT:    [[BF_CLEAR576:%.*]] = and i64 [[BF_LOAD573]], -65537
// CHK-CXX-NEXT:    [[BF_SET577:%.*]] = or i64 [[BF_CLEAR576]], [[BF_SHL575]]
// CHK-CXX-NEXT:    store i64 [[BF_SET577]], ptr [[ATOMIC_TEMP572]], align 8
// CHK-CXX-NEXT:    [[TMP218:%.*]] = load i64, ptr [[ATOMIC_TEMP572]], align 8
// CHK-CXX-NEXT:    [[TMP219:%.*]] = cmpxchg ptr @bfx4, i64 [[TMP216]], i64 [[TMP218]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP220]] = extractvalue { i64, i1 } [[TMP219]], 0
// CHK-CXX-NEXT:    [[TMP221:%.*]] = extractvalue { i64, i1 } [[TMP219]], 1
// CHK-CXX-NEXT:    br i1 [[TMP221]], label [[ATOMIC_EXIT586]], label [[ATOMIC_CMP578]]
// CHK-CXX:       atomic_cmp578:
// CHK-CXX-NEXT:    store i64 [[TMP220]], ptr [[ATOMIC_TEMP579]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD580:%.*]] = load i64, ptr [[ATOMIC_TEMP579]], align 8
// CHK-CXX-NEXT:    [[BF_SHL581:%.*]] = shl i64 [[BF_LOAD580]], 47
// CHK-CXX-NEXT:    [[BF_ASHR582:%.*]] = ashr i64 [[BF_SHL581]], 63
// CHK-CXX-NEXT:    [[BF_CAST583:%.*]] = trunc i64 [[BF_ASHR582]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST583]], ptr [[ATMP562]], align 4
// CHK-CXX-NEXT:    [[CMP584:%.*]] = icmp eq i32 [[BF_CAST583]], [[TMP215]]
// CHK-CXX-NEXT:    [[FROMBOOL585:%.*]] = zext i1 [[CMP584]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL585]], ptr [[ATMP569]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP584]], label [[ATOMIC_CONT571]], label [[ATOMIC_EXIT586]]
// CHK-CXX:       atomic_exit586:
// CHK-CXX-NEXT:    [[TMP222:%.*]] = load i32, ptr [[ATMP562]], align 4
// CHK-CXX-NEXT:    [[TMP223:%.*]] = load i8, ptr [[ATMP569]], align 1
// CHK-CXX-NEXT:    [[CONV587:%.*]] = zext i8 [[TMP223]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV587]], ptr [[R]], align 4
// CHK-CXX-NEXT:    [[TMP224:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[TMP225:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD588:%.*]] = load atomic i64, ptr @bfx4 monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD588]], ptr [[ATOMIC_TEMP590]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD591:%.*]] = load i64, ptr [[ATOMIC_TEMP590]], align 8
// CHK-CXX-NEXT:    [[BF_SHL592:%.*]] = shl i64 [[BF_LOAD591]], 47
// CHK-CXX-NEXT:    [[BF_ASHR593:%.*]] = ashr i64 [[BF_SHL592]], 63
// CHK-CXX-NEXT:    [[BF_CAST594:%.*]] = trunc i64 [[BF_ASHR593]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST594]], ptr [[ATMP589]], align 4
// CHK-CXX-NEXT:    [[CMP595:%.*]] = icmp eq i32 [[BF_CAST594]], [[TMP225]]
// CHK-CXX-NEXT:    [[FROMBOOL597:%.*]] = zext i1 [[CMP595]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL597]], ptr [[ATMP596]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP595]], label [[ATOMIC_CONT598:%.*]], label [[ATOMIC_EXIT613:%.*]]
// CHK-CXX:       atomic_cont598:
// CHK-CXX-NEXT:    [[TMP226:%.*]] = phi i64 [ [[ATOMIC_LOAD588]], [[ATOMIC_EXIT586]] ], [ [[TMP230:%.*]], [[ATOMIC_CMP605:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP226]], ptr [[ATOMIC_TEMP599]], align 8
// CHK-CXX-NEXT:    [[TMP227:%.*]] = zext i32 [[TMP224]] to i64
// CHK-CXX-NEXT:    [[BF_LOAD600:%.*]] = load i64, ptr [[ATOMIC_TEMP599]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE601:%.*]] = and i64 [[TMP227]], 1
// CHK-CXX-NEXT:    [[BF_SHL602:%.*]] = shl i64 [[BF_VALUE601]], 16
// CHK-CXX-NEXT:    [[BF_CLEAR603:%.*]] = and i64 [[BF_LOAD600]], -65537
// CHK-CXX-NEXT:    [[BF_SET604:%.*]] = or i64 [[BF_CLEAR603]], [[BF_SHL602]]
// CHK-CXX-NEXT:    store i64 [[BF_SET604]], ptr [[ATOMIC_TEMP599]], align 8
// CHK-CXX-NEXT:    [[TMP228:%.*]] = load i64, ptr [[ATOMIC_TEMP599]], align 8
// CHK-CXX-NEXT:    [[TMP229:%.*]] = cmpxchg ptr @bfx4, i64 [[TMP226]], i64 [[TMP228]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP230]] = extractvalue { i64, i1 } [[TMP229]], 0
// CHK-CXX-NEXT:    [[TMP231:%.*]] = extractvalue { i64, i1 } [[TMP229]], 1
// CHK-CXX-NEXT:    br i1 [[TMP231]], label [[ATOMIC_EXIT613]], label [[ATOMIC_CMP605]]
// CHK-CXX:       atomic_cmp605:
// CHK-CXX-NEXT:    store i64 [[TMP230]], ptr [[ATOMIC_TEMP606]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD607:%.*]] = load i64, ptr [[ATOMIC_TEMP606]], align 8
// CHK-CXX-NEXT:    [[BF_SHL608:%.*]] = shl i64 [[BF_LOAD607]], 47
// CHK-CXX-NEXT:    [[BF_ASHR609:%.*]] = ashr i64 [[BF_SHL608]], 63
// CHK-CXX-NEXT:    [[BF_CAST610:%.*]] = trunc i64 [[BF_ASHR609]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST610]], ptr [[ATMP589]], align 4
// CHK-CXX-NEXT:    [[CMP611:%.*]] = icmp eq i32 [[BF_CAST610]], [[TMP225]]
// CHK-CXX-NEXT:    [[FROMBOOL612:%.*]] = zext i1 [[CMP611]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL612]], ptr [[ATMP596]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP611]], label [[ATOMIC_CONT598]], label [[ATOMIC_EXIT613]]
// CHK-CXX:       atomic_exit613:
// CHK-CXX-NEXT:    [[TMP232:%.*]] = load i32, ptr [[ATMP589]], align 4
// CHK-CXX-NEXT:    [[TMP233:%.*]] = load i8, ptr [[ATMP596]], align 1
// CHK-CXX-NEXT:    [[CONV614:%.*]] = zext i8 [[TMP233]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV614]], ptr [[R]], align 4
// CHK-CXX-NEXT:    [[TMP234:%.*]] = trunc i8 [[TMP233]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP234]], label [[ATOMIC_CAPTURE_CONT616:%.*]], label [[ATOMIC_CAPTURE615:%.*]]
// CHK-CXX:       atomic_capture615:
// CHK-CXX-NEXT:    store i32 [[TMP232]], ptr [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT616]]
// CHK-CXX:       atomic_capture_cont616:
// CHK-CXX-NEXT:    [[TMP235:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[CONV617:%.*]] = sext i32 [[TMP235]] to i64
// CHK-CXX-NEXT:    [[ATOMIC_LOAD618:%.*]] = load atomic i64, ptr @bfx4 monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD618]], ptr [[ATOMIC_TEMP620]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD621:%.*]] = load i64, ptr [[ATOMIC_TEMP620]], align 8
// CHK-CXX-NEXT:    [[BF_SHL622:%.*]] = shl i64 [[BF_LOAD621]], 40
// CHK-CXX-NEXT:    [[BF_ASHR623:%.*]] = ashr i64 [[BF_SHL622]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR623]], ptr [[ATMP619]], align 8
// CHK-CXX-NEXT:    [[CMP624:%.*]] = icmp slt i64 [[BF_ASHR623]], [[CONV617]]
// CHK-CXX-NEXT:    [[FROMBOOL626:%.*]] = zext i1 [[CMP624]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL626]], ptr [[ATMP625]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP624]], label [[ATOMIC_CONT627:%.*]], label [[ATOMIC_EXIT641:%.*]]
// CHK-CXX:       atomic_cont627:
// CHK-CXX-NEXT:    [[TMP236:%.*]] = phi i64 [ [[ATOMIC_LOAD618]], [[ATOMIC_CAPTURE_CONT616]] ], [ [[TMP239:%.*]], [[ATOMIC_CMP634:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP236]], ptr [[ATOMIC_TEMP628]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD629:%.*]] = load i64, ptr [[ATOMIC_TEMP628]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE630:%.*]] = and i64 [[CONV617]], 127
// CHK-CXX-NEXT:    [[BF_SHL631:%.*]] = shl i64 [[BF_VALUE630]], 17
// CHK-CXX-NEXT:    [[BF_CLEAR632:%.*]] = and i64 [[BF_LOAD629]], -16646145
// CHK-CXX-NEXT:    [[BF_SET633:%.*]] = or i64 [[BF_CLEAR632]], [[BF_SHL631]]
// CHK-CXX-NEXT:    store i64 [[BF_SET633]], ptr [[ATOMIC_TEMP628]], align 8
// CHK-CXX-NEXT:    [[TMP237:%.*]] = load i64, ptr [[ATOMIC_TEMP628]], align 8
// CHK-CXX-NEXT:    [[TMP238:%.*]] = cmpxchg ptr @bfx4, i64 [[TMP236]], i64 [[TMP237]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP239]] = extractvalue { i64, i1 } [[TMP238]], 0
// CHK-CXX-NEXT:    [[TMP240:%.*]] = extractvalue { i64, i1 } [[TMP238]], 1
// CHK-CXX-NEXT:    br i1 [[TMP240]], label [[ATOMIC_EXIT641]], label [[ATOMIC_CMP634]]
// CHK-CXX:       atomic_cmp634:
// CHK-CXX-NEXT:    store i64 [[TMP239]], ptr [[ATOMIC_TEMP635]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD636:%.*]] = load i64, ptr [[ATOMIC_TEMP635]], align 8
// CHK-CXX-NEXT:    [[BF_SHL637:%.*]] = shl i64 [[BF_LOAD636]], 40
// CHK-CXX-NEXT:    [[BF_ASHR638:%.*]] = ashr i64 [[BF_SHL637]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR638]], ptr [[ATMP619]], align 8
// CHK-CXX-NEXT:    [[CMP639:%.*]] = icmp slt i64 [[BF_ASHR638]], [[CONV617]]
// CHK-CXX-NEXT:    [[FROMBOOL640:%.*]] = zext i1 [[CMP639]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL640]], ptr [[ATMP625]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP639]], label [[ATOMIC_CONT627]], label [[ATOMIC_EXIT641]]
// CHK-CXX:       atomic_exit641:
// CHK-CXX-NEXT:    [[TMP241:%.*]] = load i64, ptr [[ATMP619]], align 8
// CHK-CXX-NEXT:    [[TMP242:%.*]] = load i8, ptr [[ATMP625]], align 1
// CHK-CXX-NEXT:    [[CONV642:%.*]] = trunc i64 [[TMP241]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV642]], ptr [[V]], align 4
// CHK-CXX-NEXT:    [[TMP243:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[CONV643:%.*]] = sext i32 [[TMP243]] to i64
// CHK-CXX-NEXT:    [[ATOMIC_LOAD644:%.*]] = load atomic i64, ptr @bfx4 monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD644]], ptr [[ATOMIC_TEMP646]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD647:%.*]] = load i64, ptr [[ATOMIC_TEMP646]], align 8
// CHK-CXX-NEXT:    [[BF_SHL648:%.*]] = shl i64 [[BF_LOAD647]], 40
// CHK-CXX-NEXT:    [[BF_ASHR649:%.*]] = ashr i64 [[BF_SHL648]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR649]], ptr [[ATMP645]], align 8
// CHK-CXX-NEXT:    [[CMP650:%.*]] = icmp slt i64 [[BF_ASHR649]], [[CONV643]]
// CHK-CXX-NEXT:    [[FROMBOOL652:%.*]] = zext i1 [[CMP650]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL652]], ptr [[ATMP651]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP650]], label [[ATOMIC_CONT653:%.*]], label [[ATOMIC_EXIT668:%.*]]
// CHK-CXX:       atomic_cont653:
// CHK-CXX-NEXT:    [[TMP244:%.*]] = phi i64 [ [[ATOMIC_LOAD644]], [[ATOMIC_EXIT641]] ], [ [[TMP247:%.*]], [[ATOMIC_CMP661:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP244]], ptr [[ATOMIC_TEMP654]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD655:%.*]] = load i64, ptr [[ATOMIC_TEMP654]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE656:%.*]] = and i64 [[CONV643]], 127
// CHK-CXX-NEXT:    [[BF_SHL657:%.*]] = shl i64 [[BF_VALUE656]], 17
// CHK-CXX-NEXT:    [[BF_CLEAR658:%.*]] = and i64 [[BF_LOAD655]], -16646145
// CHK-CXX-NEXT:    [[BF_SET659:%.*]] = or i64 [[BF_CLEAR658]], [[BF_SHL657]]
// CHK-CXX-NEXT:    store i64 [[BF_SET659]], ptr [[ATOMIC_TEMP654]], align 8
// CHK-CXX-NEXT:    [[TMP245:%.*]] = load i64, ptr [[ATOMIC_TEMP654]], align 8
// CHK-CXX-NEXT:    [[TMP246:%.*]] = cmpxchg ptr @bfx4, i64 [[TMP244]], i64 [[TMP245]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP247]] = extractvalue { i64, i1 } [[TMP246]], 0
// CHK-CXX-NEXT:    [[TMP248:%.*]] = extractvalue { i64, i1 } [[TMP246]], 1
// CHK-CXX-NEXT:    br i1 [[TMP248]], label [[ATOMIC_UPD_EXIT660:%.*]], label [[ATOMIC_CMP661]]
// CHK-CXX:       atomic_upd_exit660:
// CHK-CXX-NEXT:    store i64 [[CONV643]], ptr [[ATMP645]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT668]]
// CHK-CXX:       atomic_cmp661:
// CHK-CXX-NEXT:    store i64 [[TMP247]], ptr [[ATOMIC_TEMP662]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD663:%.*]] = load i64, ptr [[ATOMIC_TEMP662]], align 8
// CHK-CXX-NEXT:    [[BF_SHL664:%.*]] = shl i64 [[BF_LOAD663]], 40
// CHK-CXX-NEXT:    [[BF_ASHR665:%.*]] = ashr i64 [[BF_SHL664]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR665]], ptr [[ATMP645]], align 8
// CHK-CXX-NEXT:    [[CMP666:%.*]] = icmp slt i64 [[BF_ASHR665]], [[CONV643]]
// CHK-CXX-NEXT:    [[FROMBOOL667:%.*]] = zext i1 [[CMP666]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL667]], ptr [[ATMP651]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP666]], label [[ATOMIC_CONT653]], label [[ATOMIC_EXIT668]]
// CHK-CXX:       atomic_exit668:
// CHK-CXX-NEXT:    [[TMP249:%.*]] = load i64, ptr [[ATMP645]], align 8
// CHK-CXX-NEXT:    [[TMP250:%.*]] = load i8, ptr [[ATMP651]], align 1
// CHK-CXX-NEXT:    [[CONV669:%.*]] = trunc i64 [[TMP249]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV669]], ptr [[V]], align 4
// CHK-CXX-NEXT:    [[TMP251:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[CONV670:%.*]] = sext i32 [[TMP251]] to i64
// CHK-CXX-NEXT:    [[TMP252:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[CONV671:%.*]] = sext i32 [[TMP252]] to i64
// CHK-CXX-NEXT:    [[ATOMIC_LOAD672:%.*]] = load atomic i64, ptr @bfx4 monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD672]], ptr [[ATOMIC_TEMP674]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD675:%.*]] = load i64, ptr [[ATOMIC_TEMP674]], align 8
// CHK-CXX-NEXT:    [[BF_SHL676:%.*]] = shl i64 [[BF_LOAD675]], 40
// CHK-CXX-NEXT:    [[BF_ASHR677:%.*]] = ashr i64 [[BF_SHL676]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR677]], ptr [[ATMP673]], align 8
// CHK-CXX-NEXT:    [[CMP678:%.*]] = icmp eq i64 [[BF_ASHR677]], [[CONV671]]
// CHK-CXX-NEXT:    [[FROMBOOL680:%.*]] = zext i1 [[CMP678]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL680]], ptr [[ATMP679]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP678]], label [[ATOMIC_CONT681:%.*]], label [[ATOMIC_EXIT696:%.*]]
// CHK-CXX:       atomic_cont681:
// CHK-CXX-NEXT:    [[TMP253:%.*]] = phi i64 [ [[ATOMIC_LOAD672]], [[ATOMIC_EXIT668]] ], [ [[TMP256:%.*]], [[ATOMIC_CMP689:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP253]], ptr [[ATOMIC_TEMP682]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD683:%.*]] = load i64, ptr [[ATOMIC_TEMP682]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE684:%.*]] = and i64 [[CONV670]], 127
// CHK-CXX-NEXT:    [[BF_SHL685:%.*]] = shl i64 [[BF_VALUE684]], 17
// CHK-CXX-NEXT:    [[BF_CLEAR686:%.*]] = and i64 [[BF_LOAD683]], -16646145
// CHK-CXX-NEXT:    [[BF_SET687:%.*]] = or i64 [[BF_CLEAR686]], [[BF_SHL685]]
// CHK-CXX-NEXT:    store i64 [[BF_SET687]], ptr [[ATOMIC_TEMP682]], align 8
// CHK-CXX-NEXT:    [[TMP254:%.*]] = load i64, ptr [[ATOMIC_TEMP682]], align 8
// CHK-CXX-NEXT:    [[TMP255:%.*]] = cmpxchg ptr @bfx4, i64 [[TMP253]], i64 [[TMP254]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP256]] = extractvalue { i64, i1 } [[TMP255]], 0
// CHK-CXX-NEXT:    [[TMP257:%.*]] = extractvalue { i64, i1 } [[TMP255]], 1
// CHK-CXX-NEXT:    br i1 [[TMP257]], label [[ATOMIC_UPD_EXIT688:%.*]], label [[ATOMIC_CMP689]]
// CHK-CXX:       atomic_upd_exit688:
// CHK-CXX-NEXT:    store i64 [[CONV670]], ptr [[ATMP673]], align 8
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT696]]
// CHK-CXX:       atomic_cmp689:
// CHK-CXX-NEXT:    store i64 [[TMP256]], ptr [[ATOMIC_TEMP690]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD691:%.*]] = load i64, ptr [[ATOMIC_TEMP690]], align 8
// CHK-CXX-NEXT:    [[BF_SHL692:%.*]] = shl i64 [[BF_LOAD691]], 40
// CHK-CXX-NEXT:    [[BF_ASHR693:%.*]] = ashr i64 [[BF_SHL692]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR693]], ptr [[ATMP673]], align 8
// CHK-CXX-NEXT:    [[CMP694:%.*]] = icmp eq i64 [[BF_ASHR693]], [[CONV671]]
// CHK-CXX-NEXT:    [[FROMBOOL695:%.*]] = zext i1 [[CMP694]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL695]], ptr [[ATMP679]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP694]], label [[ATOMIC_CONT681]], label [[ATOMIC_EXIT696]]
// CHK-CXX:       atomic_exit696:
// CHK-CXX-NEXT:    [[TMP258:%.*]] = load i64, ptr [[ATMP673]], align 8
// CHK-CXX-NEXT:    [[TMP259:%.*]] = load i8, ptr [[ATMP679]], align 1
// CHK-CXX-NEXT:    [[TMP260:%.*]] = trunc i8 [[TMP259]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP260]], label [[ATOMIC_CAPTURE_CONT699:%.*]], label [[ATOMIC_CAPTURE697:%.*]]
// CHK-CXX:       atomic_capture697:
// CHK-CXX-NEXT:    [[CONV698:%.*]] = trunc i64 [[TMP258]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV698]], ptr [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT699]]
// CHK-CXX:       atomic_capture_cont699:
// CHK-CXX-NEXT:    [[TMP261:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[CONV700:%.*]] = sext i32 [[TMP261]] to i64
// CHK-CXX-NEXT:    [[TMP262:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[CONV701:%.*]] = sext i32 [[TMP262]] to i64
// CHK-CXX-NEXT:    [[ATOMIC_LOAD702:%.*]] = load atomic i64, ptr @bfx4 monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD702]], ptr [[ATOMIC_TEMP704]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD705:%.*]] = load i64, ptr [[ATOMIC_TEMP704]], align 8
// CHK-CXX-NEXT:    [[BF_SHL706:%.*]] = shl i64 [[BF_LOAD705]], 40
// CHK-CXX-NEXT:    [[BF_ASHR707:%.*]] = ashr i64 [[BF_SHL706]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR707]], ptr [[ATMP703]], align 8
// CHK-CXX-NEXT:    [[CMP708:%.*]] = icmp eq i64 [[BF_ASHR707]], [[CONV701]]
// CHK-CXX-NEXT:    [[FROMBOOL710:%.*]] = zext i1 [[CMP708]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL710]], ptr [[ATMP709]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP708]], label [[ATOMIC_CONT711:%.*]], label [[ATOMIC_EXIT725:%.*]]
// CHK-CXX:       atomic_cont711:
// CHK-CXX-NEXT:    [[TMP263:%.*]] = phi i64 [ [[ATOMIC_LOAD702]], [[ATOMIC_CAPTURE_CONT699]] ], [ [[TMP266:%.*]], [[ATOMIC_CMP718:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP263]], ptr [[ATOMIC_TEMP712]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD713:%.*]] = load i64, ptr [[ATOMIC_TEMP712]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE714:%.*]] = and i64 [[CONV700]], 127
// CHK-CXX-NEXT:    [[BF_SHL715:%.*]] = shl i64 [[BF_VALUE714]], 17
// CHK-CXX-NEXT:    [[BF_CLEAR716:%.*]] = and i64 [[BF_LOAD713]], -16646145
// CHK-CXX-NEXT:    [[BF_SET717:%.*]] = or i64 [[BF_CLEAR716]], [[BF_SHL715]]
// CHK-CXX-NEXT:    store i64 [[BF_SET717]], ptr [[ATOMIC_TEMP712]], align 8
// CHK-CXX-NEXT:    [[TMP264:%.*]] = load i64, ptr [[ATOMIC_TEMP712]], align 8
// CHK-CXX-NEXT:    [[TMP265:%.*]] = cmpxchg ptr @bfx4, i64 [[TMP263]], i64 [[TMP264]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP266]] = extractvalue { i64, i1 } [[TMP265]], 0
// CHK-CXX-NEXT:    [[TMP267:%.*]] = extractvalue { i64, i1 } [[TMP265]], 1
// CHK-CXX-NEXT:    br i1 [[TMP267]], label [[ATOMIC_EXIT725]], label [[ATOMIC_CMP718]]
// CHK-CXX:       atomic_cmp718:
// CHK-CXX-NEXT:    store i64 [[TMP266]], ptr [[ATOMIC_TEMP719]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD720:%.*]] = load i64, ptr [[ATOMIC_TEMP719]], align 8
// CHK-CXX-NEXT:    [[BF_SHL721:%.*]] = shl i64 [[BF_LOAD720]], 40
// CHK-CXX-NEXT:    [[BF_ASHR722:%.*]] = ashr i64 [[BF_SHL721]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR722]], ptr [[ATMP703]], align 8
// CHK-CXX-NEXT:    [[CMP723:%.*]] = icmp eq i64 [[BF_ASHR722]], [[CONV701]]
// CHK-CXX-NEXT:    [[FROMBOOL724:%.*]] = zext i1 [[CMP723]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL724]], ptr [[ATMP709]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP723]], label [[ATOMIC_CONT711]], label [[ATOMIC_EXIT725]]
// CHK-CXX:       atomic_exit725:
// CHK-CXX-NEXT:    [[TMP268:%.*]] = load i64, ptr [[ATMP703]], align 8
// CHK-CXX-NEXT:    [[TMP269:%.*]] = load i8, ptr [[ATMP709]], align 1
// CHK-CXX-NEXT:    [[CONV726:%.*]] = zext i8 [[TMP269]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV726]], ptr [[R]], align 4
// CHK-CXX-NEXT:    [[TMP270:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[CONV727:%.*]] = sext i32 [[TMP270]] to i64
// CHK-CXX-NEXT:    [[TMP271:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[CONV728:%.*]] = sext i32 [[TMP271]] to i64
// CHK-CXX-NEXT:    [[ATOMIC_LOAD729:%.*]] = load atomic i64, ptr @bfx4 monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD729]], ptr [[ATOMIC_TEMP731]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD732:%.*]] = load i64, ptr [[ATOMIC_TEMP731]], align 8
// CHK-CXX-NEXT:    [[BF_SHL733:%.*]] = shl i64 [[BF_LOAD732]], 40
// CHK-CXX-NEXT:    [[BF_ASHR734:%.*]] = ashr i64 [[BF_SHL733]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR734]], ptr [[ATMP730]], align 8
// CHK-CXX-NEXT:    [[CMP735:%.*]] = icmp eq i64 [[BF_ASHR734]], [[CONV728]]
// CHK-CXX-NEXT:    [[FROMBOOL737:%.*]] = zext i1 [[CMP735]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL737]], ptr [[ATMP736]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP735]], label [[ATOMIC_CONT738:%.*]], label [[ATOMIC_EXIT752:%.*]]
// CHK-CXX:       atomic_cont738:
// CHK-CXX-NEXT:    [[TMP272:%.*]] = phi i64 [ [[ATOMIC_LOAD729]], [[ATOMIC_EXIT725]] ], [ [[TMP275:%.*]], [[ATOMIC_CMP745:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP272]], ptr [[ATOMIC_TEMP739]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD740:%.*]] = load i64, ptr [[ATOMIC_TEMP739]], align 8
// CHK-CXX-NEXT:    [[BF_VALUE741:%.*]] = and i64 [[CONV727]], 127
// CHK-CXX-NEXT:    [[BF_SHL742:%.*]] = shl i64 [[BF_VALUE741]], 17
// CHK-CXX-NEXT:    [[BF_CLEAR743:%.*]] = and i64 [[BF_LOAD740]], -16646145
// CHK-CXX-NEXT:    [[BF_SET744:%.*]] = or i64 [[BF_CLEAR743]], [[BF_SHL742]]
// CHK-CXX-NEXT:    store i64 [[BF_SET744]], ptr [[ATOMIC_TEMP739]], align 8
// CHK-CXX-NEXT:    [[TMP273:%.*]] = load i64, ptr [[ATOMIC_TEMP739]], align 8
// CHK-CXX-NEXT:    [[TMP274:%.*]] = cmpxchg ptr @bfx4, i64 [[TMP272]], i64 [[TMP273]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP275]] = extractvalue { i64, i1 } [[TMP274]], 0
// CHK-CXX-NEXT:    [[TMP276:%.*]] = extractvalue { i64, i1 } [[TMP274]], 1
// CHK-CXX-NEXT:    br i1 [[TMP276]], label [[ATOMIC_EXIT752]], label [[ATOMIC_CMP745]]
// CHK-CXX:       atomic_cmp745:
// CHK-CXX-NEXT:    store i64 [[TMP275]], ptr [[ATOMIC_TEMP746]], align 8
// CHK-CXX-NEXT:    [[BF_LOAD747:%.*]] = load i64, ptr [[ATOMIC_TEMP746]], align 8
// CHK-CXX-NEXT:    [[BF_SHL748:%.*]] = shl i64 [[BF_LOAD747]], 40
// CHK-CXX-NEXT:    [[BF_ASHR749:%.*]] = ashr i64 [[BF_SHL748]], 57
// CHK-CXX-NEXT:    store i64 [[BF_ASHR749]], ptr [[ATMP730]], align 8
// CHK-CXX-NEXT:    [[CMP750:%.*]] = icmp eq i64 [[BF_ASHR749]], [[CONV728]]
// CHK-CXX-NEXT:    [[FROMBOOL751:%.*]] = zext i1 [[CMP750]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL751]], ptr [[ATMP736]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP750]], label [[ATOMIC_CONT738]], label [[ATOMIC_EXIT752]]
// CHK-CXX:       atomic_exit752:
// CHK-CXX-NEXT:    [[TMP277:%.*]] = load i64, ptr [[ATMP730]], align 8
// CHK-CXX-NEXT:    [[TMP278:%.*]] = load i8, ptr [[ATMP736]], align 1
// CHK-CXX-NEXT:    [[CONV753:%.*]] = zext i8 [[TMP278]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV753]], ptr [[R]], align 4
// CHK-CXX-NEXT:    [[TMP279:%.*]] = trunc i8 [[TMP278]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP279]], label [[ATOMIC_CAPTURE_CONT756:%.*]], label [[ATOMIC_CAPTURE754:%.*]]
// CHK-CXX:       atomic_capture754:
// CHK-CXX-NEXT:    [[CONV755:%.*]] = trunc i64 [[TMP277]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV755]], ptr [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT756]]
// CHK-CXX:       atomic_capture_cont756:
// CHK-CXX-NEXT:    [[TMP280:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD757:%.*]] = load atomic i8, ptr getelementptr (i8, ptr @bfx4_packed, i64 2) monotonic, align 1
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD757]], ptr [[ATOMIC_TEMP759]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD760:%.*]] = load i8, ptr [[ATOMIC_TEMP759]], align 1
// CHK-CXX-NEXT:    [[BF_SHL761:%.*]] = shl i8 [[BF_LOAD760]], 7
// CHK-CXX-NEXT:    [[BF_ASHR762:%.*]] = ashr i8 [[BF_SHL761]], 7
// CHK-CXX-NEXT:    [[BF_CAST763:%.*]] = sext i8 [[BF_ASHR762]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST763]], ptr [[ATMP758]], align 4
// CHK-CXX-NEXT:    [[CMP764:%.*]] = icmp slt i32 [[BF_CAST763]], [[TMP280]]
// CHK-CXX-NEXT:    [[FROMBOOL766:%.*]] = zext i1 [[CMP764]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL766]], ptr [[ATMP765]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP764]], label [[ATOMIC_CONT767:%.*]], label [[ATOMIC_EXIT781:%.*]]
// CHK-CXX:       atomic_cont767:
// CHK-CXX-NEXT:    [[TMP281:%.*]] = phi i8 [ [[ATOMIC_LOAD757]], [[ATOMIC_CAPTURE_CONT756]] ], [ [[TMP285:%.*]], [[ATOMIC_CMP773:%.*]] ]
// CHK-CXX-NEXT:    store i8 [[TMP281]], ptr [[ATOMIC_TEMP768]], align 1
// CHK-CXX-NEXT:    [[TMP282:%.*]] = trunc i32 [[TMP280]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD769:%.*]] = load i8, ptr [[ATOMIC_TEMP768]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE770:%.*]] = and i8 [[TMP282]], 1
// CHK-CXX-NEXT:    [[BF_CLEAR771:%.*]] = and i8 [[BF_LOAD769]], -2
// CHK-CXX-NEXT:    [[BF_SET772:%.*]] = or i8 [[BF_CLEAR771]], [[BF_VALUE770]]
// CHK-CXX-NEXT:    store i8 [[BF_SET772]], ptr [[ATOMIC_TEMP768]], align 1
// CHK-CXX-NEXT:    [[TMP283:%.*]] = load i8, ptr [[ATOMIC_TEMP768]], align 1
// CHK-CXX-NEXT:    [[TMP284:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx4_packed, i64 2), i8 [[TMP281]], i8 [[TMP283]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP285]] = extractvalue { i8, i1 } [[TMP284]], 0
// CHK-CXX-NEXT:    [[TMP286:%.*]] = extractvalue { i8, i1 } [[TMP284]], 1
// CHK-CXX-NEXT:    br i1 [[TMP286]], label [[ATOMIC_EXIT781]], label [[ATOMIC_CMP773]]
// CHK-CXX:       atomic_cmp773:
// CHK-CXX-NEXT:    store i8 [[TMP285]], ptr [[ATOMIC_TEMP774]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD775:%.*]] = load i8, ptr [[ATOMIC_TEMP774]], align 1
// CHK-CXX-NEXT:    [[BF_SHL776:%.*]] = shl i8 [[BF_LOAD775]], 7
// CHK-CXX-NEXT:    [[BF_ASHR777:%.*]] = ashr i8 [[BF_SHL776]], 7
// CHK-CXX-NEXT:    [[BF_CAST778:%.*]] = sext i8 [[BF_ASHR777]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST778]], ptr [[ATMP758]], align 4
// CHK-CXX-NEXT:    [[CMP779:%.*]] = icmp slt i32 [[BF_CAST778]], [[TMP280]]
// CHK-CXX-NEXT:    [[FROMBOOL780:%.*]] = zext i1 [[CMP779]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL780]], ptr [[ATMP765]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP779]], label [[ATOMIC_CONT767]], label [[ATOMIC_EXIT781]]
// CHK-CXX:       atomic_exit781:
// CHK-CXX-NEXT:    [[TMP287:%.*]] = load i32, ptr [[ATMP758]], align 4
// CHK-CXX-NEXT:    [[TMP288:%.*]] = load i8, ptr [[ATMP765]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP287]], ptr [[V]], align 4
// CHK-CXX-NEXT:    [[TMP289:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD782:%.*]] = load atomic i8, ptr getelementptr (i8, ptr @bfx4_packed, i64 2) monotonic, align 1
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD782]], ptr [[ATOMIC_TEMP784]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD785:%.*]] = load i8, ptr [[ATOMIC_TEMP784]], align 1
// CHK-CXX-NEXT:    [[BF_SHL786:%.*]] = shl i8 [[BF_LOAD785]], 7
// CHK-CXX-NEXT:    [[BF_ASHR787:%.*]] = ashr i8 [[BF_SHL786]], 7
// CHK-CXX-NEXT:    [[BF_CAST788:%.*]] = sext i8 [[BF_ASHR787]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST788]], ptr [[ATMP783]], align 4
// CHK-CXX-NEXT:    [[CMP789:%.*]] = icmp slt i32 [[BF_CAST788]], [[TMP289]]
// CHK-CXX-NEXT:    [[FROMBOOL791:%.*]] = zext i1 [[CMP789]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL791]], ptr [[ATMP790]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP789]], label [[ATOMIC_CONT792:%.*]], label [[ATOMIC_EXIT807:%.*]]
// CHK-CXX:       atomic_cont792:
// CHK-CXX-NEXT:    [[TMP290:%.*]] = phi i8 [ [[ATOMIC_LOAD782]], [[ATOMIC_EXIT781]] ], [ [[TMP294:%.*]], [[ATOMIC_CMP799:%.*]] ]
// CHK-CXX-NEXT:    store i8 [[TMP290]], ptr [[ATOMIC_TEMP793]], align 1
// CHK-CXX-NEXT:    [[TMP291:%.*]] = trunc i32 [[TMP289]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD794:%.*]] = load i8, ptr [[ATOMIC_TEMP793]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE795:%.*]] = and i8 [[TMP291]], 1
// CHK-CXX-NEXT:    [[BF_CLEAR796:%.*]] = and i8 [[BF_LOAD794]], -2
// CHK-CXX-NEXT:    [[BF_SET797:%.*]] = or i8 [[BF_CLEAR796]], [[BF_VALUE795]]
// CHK-CXX-NEXT:    store i8 [[BF_SET797]], ptr [[ATOMIC_TEMP793]], align 1
// CHK-CXX-NEXT:    [[TMP292:%.*]] = load i8, ptr [[ATOMIC_TEMP793]], align 1
// CHK-CXX-NEXT:    [[TMP293:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx4_packed, i64 2), i8 [[TMP290]], i8 [[TMP292]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP294]] = extractvalue { i8, i1 } [[TMP293]], 0
// CHK-CXX-NEXT:    [[TMP295:%.*]] = extractvalue { i8, i1 } [[TMP293]], 1
// CHK-CXX-NEXT:    br i1 [[TMP295]], label [[ATOMIC_UPD_EXIT798:%.*]], label [[ATOMIC_CMP799]]
// CHK-CXX:       atomic_upd_exit798:
// CHK-CXX-NEXT:    store i32 [[TMP289]], ptr [[ATMP783]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT807]]
// CHK-CXX:       atomic_cmp799:
// CHK-CXX-NEXT:    store i8 [[TMP294]], ptr [[ATOMIC_TEMP800]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD801:%.*]] = load i8, ptr [[ATOMIC_TEMP800]], align 1
// CHK-CXX-NEXT:    [[BF_SHL802:%.*]] = shl i8 [[BF_LOAD801]], 7
// CHK-CXX-NEXT:    [[BF_ASHR803:%.*]] = ashr i8 [[BF_SHL802]], 7
// CHK-CXX-NEXT:    [[BF_CAST804:%.*]] = sext i8 [[BF_ASHR803]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST804]], ptr [[ATMP783]], align 4
// CHK-CXX-NEXT:    [[CMP805:%.*]] = icmp slt i32 [[BF_CAST804]], [[TMP289]]
// CHK-CXX-NEXT:    [[FROMBOOL806:%.*]] = zext i1 [[CMP805]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL806]], ptr [[ATMP790]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP805]], label [[ATOMIC_CONT792]], label [[ATOMIC_EXIT807]]
// CHK-CXX:       atomic_exit807:
// CHK-CXX-NEXT:    [[TMP296:%.*]] = load i32, ptr [[ATMP783]], align 4
// CHK-CXX-NEXT:    [[TMP297:%.*]] = load i8, ptr [[ATMP790]], align 1
// CHK-CXX-NEXT:    store i32 [[TMP296]], ptr [[V]], align 4
// CHK-CXX-NEXT:    [[TMP298:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[TMP299:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD808:%.*]] = load atomic i8, ptr getelementptr (i8, ptr @bfx4_packed, i64 2) monotonic, align 1
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD808]], ptr [[ATOMIC_TEMP810]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD811:%.*]] = load i8, ptr [[ATOMIC_TEMP810]], align 1
// CHK-CXX-NEXT:    [[BF_SHL812:%.*]] = shl i8 [[BF_LOAD811]], 7
// CHK-CXX-NEXT:    [[BF_ASHR813:%.*]] = ashr i8 [[BF_SHL812]], 7
// CHK-CXX-NEXT:    [[BF_CAST814:%.*]] = sext i8 [[BF_ASHR813]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST814]], ptr [[ATMP809]], align 4
// CHK-CXX-NEXT:    [[CMP815:%.*]] = icmp eq i32 [[BF_CAST814]], [[TMP299]]
// CHK-CXX-NEXT:    [[FROMBOOL817:%.*]] = zext i1 [[CMP815]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL817]], ptr [[ATMP816]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP815]], label [[ATOMIC_CONT818:%.*]], label [[ATOMIC_EXIT833:%.*]]
// CHK-CXX:       atomic_cont818:
// CHK-CXX-NEXT:    [[TMP300:%.*]] = phi i8 [ [[ATOMIC_LOAD808]], [[ATOMIC_EXIT807]] ], [ [[TMP304:%.*]], [[ATOMIC_CMP825:%.*]] ]
// CHK-CXX-NEXT:    store i8 [[TMP300]], ptr [[ATOMIC_TEMP819]], align 1
// CHK-CXX-NEXT:    [[TMP301:%.*]] = trunc i32 [[TMP298]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD820:%.*]] = load i8, ptr [[ATOMIC_TEMP819]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE821:%.*]] = and i8 [[TMP301]], 1
// CHK-CXX-NEXT:    [[BF_CLEAR822:%.*]] = and i8 [[BF_LOAD820]], -2
// CHK-CXX-NEXT:    [[BF_SET823:%.*]] = or i8 [[BF_CLEAR822]], [[BF_VALUE821]]
// CHK-CXX-NEXT:    store i8 [[BF_SET823]], ptr [[ATOMIC_TEMP819]], align 1
// CHK-CXX-NEXT:    [[TMP302:%.*]] = load i8, ptr [[ATOMIC_TEMP819]], align 1
// CHK-CXX-NEXT:    [[TMP303:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx4_packed, i64 2), i8 [[TMP300]], i8 [[TMP302]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP304]] = extractvalue { i8, i1 } [[TMP303]], 0
// CHK-CXX-NEXT:    [[TMP305:%.*]] = extractvalue { i8, i1 } [[TMP303]], 1
// CHK-CXX-NEXT:    br i1 [[TMP305]], label [[ATOMIC_UPD_EXIT824:%.*]], label [[ATOMIC_CMP825]]
// CHK-CXX:       atomic_upd_exit824:
// CHK-CXX-NEXT:    store i32 [[TMP298]], ptr [[ATMP809]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT833]]
// CHK-CXX:       atomic_cmp825:
// CHK-CXX-NEXT:    store i8 [[TMP304]], ptr [[ATOMIC_TEMP826]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD827:%.*]] = load i8, ptr [[ATOMIC_TEMP826]], align 1
// CHK-CXX-NEXT:    [[BF_SHL828:%.*]] = shl i8 [[BF_LOAD827]], 7
// CHK-CXX-NEXT:    [[BF_ASHR829:%.*]] = ashr i8 [[BF_SHL828]], 7
// CHK-CXX-NEXT:    [[BF_CAST830:%.*]] = sext i8 [[BF_ASHR829]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST830]], ptr [[ATMP809]], align 4
// CHK-CXX-NEXT:    [[CMP831:%.*]] = icmp eq i32 [[BF_CAST830]], [[TMP299]]
// CHK-CXX-NEXT:    [[FROMBOOL832:%.*]] = zext i1 [[CMP831]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL832]], ptr [[ATMP816]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP831]], label [[ATOMIC_CONT818]], label [[ATOMIC_EXIT833]]
// CHK-CXX:       atomic_exit833:
// CHK-CXX-NEXT:    [[TMP306:%.*]] = load i32, ptr [[ATMP809]], align 4
// CHK-CXX-NEXT:    [[TMP307:%.*]] = load i8, ptr [[ATMP816]], align 1
// CHK-CXX-NEXT:    [[TMP308:%.*]] = trunc i8 [[TMP307]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP308]], label [[ATOMIC_CAPTURE_CONT835:%.*]], label [[ATOMIC_CAPTURE834:%.*]]
// CHK-CXX:       atomic_capture834:
// CHK-CXX-NEXT:    store i32 [[TMP306]], ptr [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT835]]
// CHK-CXX:       atomic_capture_cont835:
// CHK-CXX-NEXT:    [[TMP309:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[TMP310:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD836:%.*]] = load atomic i8, ptr getelementptr (i8, ptr @bfx4_packed, i64 2) monotonic, align 1
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD836]], ptr [[ATOMIC_TEMP838]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD839:%.*]] = load i8, ptr [[ATOMIC_TEMP838]], align 1
// CHK-CXX-NEXT:    [[BF_SHL840:%.*]] = shl i8 [[BF_LOAD839]], 7
// CHK-CXX-NEXT:    [[BF_ASHR841:%.*]] = ashr i8 [[BF_SHL840]], 7
// CHK-CXX-NEXT:    [[BF_CAST842:%.*]] = sext i8 [[BF_ASHR841]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST842]], ptr [[ATMP837]], align 4
// CHK-CXX-NEXT:    [[CMP843:%.*]] = icmp eq i32 [[BF_CAST842]], [[TMP310]]
// CHK-CXX-NEXT:    [[FROMBOOL845:%.*]] = zext i1 [[CMP843]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL845]], ptr [[ATMP844]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP843]], label [[ATOMIC_CONT846:%.*]], label [[ATOMIC_EXIT860:%.*]]
// CHK-CXX:       atomic_cont846:
// CHK-CXX-NEXT:    [[TMP311:%.*]] = phi i8 [ [[ATOMIC_LOAD836]], [[ATOMIC_CAPTURE_CONT835]] ], [ [[TMP315:%.*]], [[ATOMIC_CMP852:%.*]] ]
// CHK-CXX-NEXT:    store i8 [[TMP311]], ptr [[ATOMIC_TEMP847]], align 1
// CHK-CXX-NEXT:    [[TMP312:%.*]] = trunc i32 [[TMP309]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD848:%.*]] = load i8, ptr [[ATOMIC_TEMP847]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE849:%.*]] = and i8 [[TMP312]], 1
// CHK-CXX-NEXT:    [[BF_CLEAR850:%.*]] = and i8 [[BF_LOAD848]], -2
// CHK-CXX-NEXT:    [[BF_SET851:%.*]] = or i8 [[BF_CLEAR850]], [[BF_VALUE849]]
// CHK-CXX-NEXT:    store i8 [[BF_SET851]], ptr [[ATOMIC_TEMP847]], align 1
// CHK-CXX-NEXT:    [[TMP313:%.*]] = load i8, ptr [[ATOMIC_TEMP847]], align 1
// CHK-CXX-NEXT:    [[TMP314:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx4_packed, i64 2), i8 [[TMP311]], i8 [[TMP313]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP315]] = extractvalue { i8, i1 } [[TMP314]], 0
// CHK-CXX-NEXT:    [[TMP316:%.*]] = extractvalue { i8, i1 } [[TMP314]], 1
// CHK-CXX-NEXT:    br i1 [[TMP316]], label [[ATOMIC_EXIT860]], label [[ATOMIC_CMP852]]
// CHK-CXX:       atomic_cmp852:
// CHK-CXX-NEXT:    store i8 [[TMP315]], ptr [[ATOMIC_TEMP853]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD854:%.*]] = load i8, ptr [[ATOMIC_TEMP853]], align 1
// CHK-CXX-NEXT:    [[BF_SHL855:%.*]] = shl i8 [[BF_LOAD854]], 7
// CHK-CXX-NEXT:    [[BF_ASHR856:%.*]] = ashr i8 [[BF_SHL855]], 7
// CHK-CXX-NEXT:    [[BF_CAST857:%.*]] = sext i8 [[BF_ASHR856]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST857]], ptr [[ATMP837]], align 4
// CHK-CXX-NEXT:    [[CMP858:%.*]] = icmp eq i32 [[BF_CAST857]], [[TMP310]]
// CHK-CXX-NEXT:    [[FROMBOOL859:%.*]] = zext i1 [[CMP858]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL859]], ptr [[ATMP844]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP858]], label [[ATOMIC_CONT846]], label [[ATOMIC_EXIT860]]
// CHK-CXX:       atomic_exit860:
// CHK-CXX-NEXT:    [[TMP317:%.*]] = load i32, ptr [[ATMP837]], align 4
// CHK-CXX-NEXT:    [[TMP318:%.*]] = load i8, ptr [[ATMP844]], align 1
// CHK-CXX-NEXT:    [[CONV861:%.*]] = zext i8 [[TMP318]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV861]], ptr [[R]], align 4
// CHK-CXX-NEXT:    [[TMP319:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[TMP320:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[ATOMIC_LOAD862:%.*]] = load atomic i8, ptr getelementptr (i8, ptr @bfx4_packed, i64 2) monotonic, align 1
// CHK-CXX-NEXT:    store i8 [[ATOMIC_LOAD862]], ptr [[ATOMIC_TEMP864]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD865:%.*]] = load i8, ptr [[ATOMIC_TEMP864]], align 1
// CHK-CXX-NEXT:    [[BF_SHL866:%.*]] = shl i8 [[BF_LOAD865]], 7
// CHK-CXX-NEXT:    [[BF_ASHR867:%.*]] = ashr i8 [[BF_SHL866]], 7
// CHK-CXX-NEXT:    [[BF_CAST868:%.*]] = sext i8 [[BF_ASHR867]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST868]], ptr [[ATMP863]], align 4
// CHK-CXX-NEXT:    [[CMP869:%.*]] = icmp eq i32 [[BF_CAST868]], [[TMP320]]
// CHK-CXX-NEXT:    [[FROMBOOL871:%.*]] = zext i1 [[CMP869]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL871]], ptr [[ATMP870]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP869]], label [[ATOMIC_CONT872:%.*]], label [[ATOMIC_EXIT886:%.*]]
// CHK-CXX:       atomic_cont872:
// CHK-CXX-NEXT:    [[TMP321:%.*]] = phi i8 [ [[ATOMIC_LOAD862]], [[ATOMIC_EXIT860]] ], [ [[TMP325:%.*]], [[ATOMIC_CMP878:%.*]] ]
// CHK-CXX-NEXT:    store i8 [[TMP321]], ptr [[ATOMIC_TEMP873]], align 1
// CHK-CXX-NEXT:    [[TMP322:%.*]] = trunc i32 [[TMP319]] to i8
// CHK-CXX-NEXT:    [[BF_LOAD874:%.*]] = load i8, ptr [[ATOMIC_TEMP873]], align 1
// CHK-CXX-NEXT:    [[BF_VALUE875:%.*]] = and i8 [[TMP322]], 1
// CHK-CXX-NEXT:    [[BF_CLEAR876:%.*]] = and i8 [[BF_LOAD874]], -2
// CHK-CXX-NEXT:    [[BF_SET877:%.*]] = or i8 [[BF_CLEAR876]], [[BF_VALUE875]]
// CHK-CXX-NEXT:    store i8 [[BF_SET877]], ptr [[ATOMIC_TEMP873]], align 1
// CHK-CXX-NEXT:    [[TMP323:%.*]] = load i8, ptr [[ATOMIC_TEMP873]], align 1
// CHK-CXX-NEXT:    [[TMP324:%.*]] = cmpxchg ptr getelementptr (i8, ptr @bfx4_packed, i64 2), i8 [[TMP321]], i8 [[TMP323]] monotonic monotonic, align 1
// CHK-CXX-NEXT:    [[TMP325]] = extractvalue { i8, i1 } [[TMP324]], 0
// CHK-CXX-NEXT:    [[TMP326:%.*]] = extractvalue { i8, i1 } [[TMP324]], 1
// CHK-CXX-NEXT:    br i1 [[TMP326]], label [[ATOMIC_EXIT886]], label [[ATOMIC_CMP878]]
// CHK-CXX:       atomic_cmp878:
// CHK-CXX-NEXT:    store i8 [[TMP325]], ptr [[ATOMIC_TEMP879]], align 1
// CHK-CXX-NEXT:    [[BF_LOAD880:%.*]] = load i8, ptr [[ATOMIC_TEMP879]], align 1
// CHK-CXX-NEXT:    [[BF_SHL881:%.*]] = shl i8 [[BF_LOAD880]], 7
// CHK-CXX-NEXT:    [[BF_ASHR882:%.*]] = ashr i8 [[BF_SHL881]], 7
// CHK-CXX-NEXT:    [[BF_CAST883:%.*]] = sext i8 [[BF_ASHR882]] to i32
// CHK-CXX-NEXT:    store i32 [[BF_CAST883]], ptr [[ATMP863]], align 4
// CHK-CXX-NEXT:    [[CMP884:%.*]] = icmp eq i32 [[BF_CAST883]], [[TMP320]]
// CHK-CXX-NEXT:    [[FROMBOOL885:%.*]] = zext i1 [[CMP884]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL885]], ptr [[ATMP870]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP884]], label [[ATOMIC_CONT872]], label [[ATOMIC_EXIT886]]
// CHK-CXX:       atomic_exit886:
// CHK-CXX-NEXT:    [[TMP327:%.*]] = load i32, ptr [[ATMP863]], align 4
// CHK-CXX-NEXT:    [[TMP328:%.*]] = load i8, ptr [[ATMP870]], align 1
// CHK-CXX-NEXT:    [[CONV887:%.*]] = zext i8 [[TMP328]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV887]], ptr [[R]], align 4
// CHK-CXX-NEXT:    [[TMP329:%.*]] = trunc i8 [[TMP328]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP329]], label [[ATOMIC_CAPTURE_CONT889:%.*]], label [[ATOMIC_CAPTURE888:%.*]]
// CHK-CXX:       atomic_capture888:
// CHK-CXX-NEXT:    store i32 [[TMP327]], ptr [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT889]]
// CHK-CXX:       atomic_capture_cont889:
// CHK-CXX-NEXT:    ret void
//
void test_bitfield()
{
  int expr, d, e, v, r;

  #pragma omp atomic compare capture
  { v = bfx.a; if (bfx.a < expr) { bfx.a = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (bfx.a < expr) { bfx.a = expr; } v = bfx.a; } // MAX

  #pragma omp atomic compare capture
  if (bfx.a == e) { bfx.a = d; } else { v = bfx.a; }

  #pragma omp atomic compare capture
  { r =  bfx.a == e; if(r) {  bfx.a = d; } }

  #pragma omp atomic compare capture
  { r =  bfx.a == e; if(r) {  bfx.a = d; } else { v =  bfx.a; } }

#ifdef LIBCALLS
  #pragma omp atomic compare capture
  { v = bfx_packed.a; if (bfx_packed.a < expr) { bfx_packed.a = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (bfx_packed.a < expr) { bfx_packed.a = expr; } v = bfx_packed.a; } // MAX

  #pragma omp atomic compare capture
  if (bfx_packed.a == e) { bfx_packed.a = d; } else { v = bfx_packed.a; }

  #pragma omp atomic compare capture
  { r = bfx_packed.a == e; if(r) { bfx_packed.a = d; } }

  #pragma omp atomic compare capture
  { r = bfx_packed.a == e; if(r) { bfx_packed.a = d; } else { v = bfx_packed.a; } }
#endif

  #pragma omp atomic compare capture
  { v = bfx2.a; if (bfx2.a < expr) { bfx2.a = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (bfx2.a < expr) { bfx2.a = expr; } v = bfx2.a; } // MAX

  #pragma omp atomic compare capture
  if (bfx2.a == e) { bfx2.a = d; } else { v = bfx2.a; }

  #pragma omp atomic compare capture
  { r = bfx2.a == e; if(r) { bfx2.a = d; } }

  #pragma omp atomic compare capture
  { r = bfx2.a == e; if(r) { bfx2.a = d; } else { v = bfx2.a; } }

  #pragma omp atomic compare capture
  { v = bfx2_packed.a;
    if (bfx2_packed.a < expr) { bfx2_packed.a = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (bfx2_packed.a < expr) { bfx2_packed.a = expr; }
    v =  bfx2_packed.a; } // MAX

  #pragma omp atomic compare capture
  if (bfx2_packed.a == e) { bfx2_packed.a = d; } else { v = bfx2_packed.a; }

  #pragma omp atomic compare capture
  { r = bfx2_packed.a == e; if(r) { bfx2_packed.a = d; } }

  #pragma omp atomic compare capture
  { r = bfx2_packed.a == e;
    if(r) { bfx2_packed.a = d; } else { v = bfx2_packed.a; } }

  #pragma omp atomic compare capture
  { v = bfx3.a; if (bfx3.a < expr) { bfx3.a = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (bfx3.a < expr) { bfx3.a = expr; } v = bfx3.a; } // MAX

  #pragma omp atomic compare capture
  if (bfx3.a == e) { bfx3.a = d; } else { v = bfx3.a; }

  #pragma omp atomic compare capture
  { r = bfx3.a == e; if(r) { bfx3.a = d; } }

  #pragma omp atomic compare capture
  { r = bfx3.a == e; if(r) { bfx3.a = d; } else { v = bfx3.a; } }

#ifdef LIBCALLS
  #pragma omp atomic compare capture
  { v = bfx3_packed.a;
    if (bfx3_packed.a < expr) { bfx3_packed.a = expr; } }// MAX
  #pragma omp atomic compare capture
  { if (bfx3_packed.a < expr) { bfx3_packed.a = expr; }
    v = bfx3_packed.a; }// MAX

  #pragma omp atomic compare capture
  if (bfx3_packed.a == e) { bfx3_packed.a = d; } else { v = bfx3_packed.a; }

  #pragma omp atomic compare capture
  { r = bfx3_packed.a == e; if(r) { bfx3_packed.a = d; } }

  #pragma omp atomic compare capture
  { r = bfx3_packed.a == e;
    if(r) { bfx3_packed.a = d; } else { v = bfx3_packed.a; } }
#endif

  #pragma omp atomic compare capture
  { v = bfx4.a; if (bfx4.a < expr) { bfx4.a = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (bfx4.a < expr) { bfx4.a = expr; } v = bfx4.a; } // MAX

  #pragma omp atomic compare capture
  if (bfx4.a == e) { bfx4.a = d; } else { v = bfx4.a; }

  #pragma omp atomic compare capture
  { r = bfx4.a == e; if(r) { bfx4.a = d; } }

  #pragma omp atomic compare capture
  { r = bfx4.a == e; if(r) { bfx4.a = d; } else { v = bfx4.a; } }

  #pragma omp atomic compare capture
  { v = bfx4.b; if (bfx4.b < expr) { bfx4.b = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (bfx4.b < expr) { bfx4.b = expr; }  v = bfx4.b; } // MAX

  #pragma omp atomic compare capture
  if (bfx4.b == e) { bfx4.b = d; } else { v = bfx4.b; }

  #pragma omp atomic compare capture
  { r = bfx4.b == e; if(r) { bfx4.b = d; } }

  #pragma omp atomic compare capture
  { r = bfx4.b == e; if(r) { bfx4.b = d; } else { v = bfx4.b; } }

  #pragma omp atomic compare capture
  { v = bfx4_packed.a;
    if (bfx4_packed.a < expr) { bfx4_packed.a = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (bfx4_packed.a < expr) { bfx4_packed.a = expr; }
    v = bfx4_packed.a; } // MAX

  #pragma omp atomic compare capture
  if (bfx4_packed.a == e) { bfx4_packed.a = d; } else { v = bfx4_packed.a; }

  #pragma omp atomic compare capture
  { r = bfx4_packed.a == e; if(r) { bfx4_packed.a = d; } }

  #pragma omp atomic compare capture
  { r = bfx4_packed.a == e;
    if(r) { bfx4_packed.a = d; } else { v = bfx4_packed.a; } }
}

// CHK-C-LABEL: @test_ext_vector(
// CHK-C-NEXT:  entry:
// CHK-C-NEXT:    [[FLOAT2X:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[V:%.*]] = alloca i32, align 4
// CHK-C-NEXT:    [[R:%.*]] = alloca i16, align 2
// CHK-C-NEXT:    [[TMP:%.*]] = alloca float, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP2:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP3:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATMP9:%.*]] = alloca float, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP10:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATMP12:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP15:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP17:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATMP25:%.*]] = alloca float, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP26:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP27:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP28:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATMP30:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP33:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP36:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP37:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP38:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATMP46:%.*]] = alloca float, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP47:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP48:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP49:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATMP51:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP54:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP56:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP57:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP58:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATMP66:%.*]] = alloca float, align 4
// CHK-C-NEXT:    [[ATOMIC_TEMP67:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP68:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP69:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATMP71:%.*]] = alloca i8, align 1
// CHK-C-NEXT:    [[ATOMIC_TEMP74:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP76:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP77:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[ATOMIC_TEMP78:%.*]] = alloca <2 x float>, align 8
// CHK-C-NEXT:    [[TMP0:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[CONV:%.*]] = sitofp i32 [[TMP0]] to float
// CHK-C-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, ptr [[FLOAT2X]] monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD]], ptr [[ATOMIC_TEMP]], align 8
// CHK-C-NEXT:    [[TMP1:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP]], align 8
// CHK-C-NEXT:    [[TMP2:%.*]] = extractelement <2 x float> [[TMP1]], i64 0
// CHK-C-NEXT:    store float [[TMP2]], ptr [[TMP]], align 4
// CHK-C-NEXT:    [[CMP:%.*]] = fcmp olt float [[TMP2]], [[CONV]]
// CHK-C-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL]], ptr [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-C:       atomic_cont:
// CHK-C-NEXT:    [[TMP3:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP8:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP3]], ptr [[ATOMIC_TEMP2]], align 8
// CHK-C-NEXT:    [[TMP4:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP2]], align 8
// CHK-C-NEXT:    [[TMP5:%.*]] = insertelement <2 x float> [[TMP4]], float [[CONV]], i64 0
// CHK-C-NEXT:    store <2 x float> [[TMP5]], ptr [[ATOMIC_TEMP2]], align 8
// CHK-C-NEXT:    [[TMP6:%.*]] = load i64, ptr [[ATOMIC_TEMP2]], align 8
// CHK-C-NEXT:    [[TMP7:%.*]] = cmpxchg ptr [[FLOAT2X]], i64 [[TMP3]], i64 [[TMP6]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP8]] = extractvalue { i64, i1 } [[TMP7]], 0
// CHK-C-NEXT:    [[TMP9:%.*]] = extractvalue { i64, i1 } [[TMP7]], 1
// CHK-C-NEXT:    br i1 [[TMP9]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-C:       atomic_cmp:
// CHK-C-NEXT:    store i64 [[TMP8]], ptr [[ATOMIC_TEMP3]], align 8
// CHK-C-NEXT:    [[TMP10:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP3]], align 8
// CHK-C-NEXT:    [[TMP11:%.*]] = extractelement <2 x float> [[TMP10]], i64 0
// CHK-C-NEXT:    store float [[TMP11]], ptr [[TMP]], align 4
// CHK-C-NEXT:    [[CMP4:%.*]] = fcmp olt float [[TMP11]], [[CONV]]
// CHK-C-NEXT:    [[FROMBOOL5:%.*]] = zext i1 [[CMP4]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL5]], ptr [[ATMP1]], align 1
// CHK-C-NEXT:    br i1 [[CMP4]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-C:       atomic_exit:
// CHK-C-NEXT:    [[TMP12:%.*]] = load float, ptr [[TMP]], align 4
// CHK-C-NEXT:    [[TMP13:%.*]] = load i8, ptr [[ATMP1]], align 1
// CHK-C-NEXT:    [[CONV6:%.*]] = fptosi float [[TMP12]] to i32
// CHK-C-NEXT:    store i32 [[CONV6]], ptr [[V]], align 4
// CHK-C-NEXT:    [[TMP14:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-C-NEXT:    [[CONV7:%.*]] = sitofp i32 [[TMP14]] to float
// CHK-C-NEXT:    [[ATOMIC_LOAD8:%.*]] = load atomic i64, ptr [[FLOAT2X]] monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD8]], ptr [[ATOMIC_TEMP10]], align 8
// CHK-C-NEXT:    [[TMP15:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP10]], align 8
// CHK-C-NEXT:    [[TMP16:%.*]] = extractelement <2 x float> [[TMP15]], i64 0
// CHK-C-NEXT:    store float [[TMP16]], ptr [[ATMP9]], align 4
// CHK-C-NEXT:    [[CMP11:%.*]] = fcmp olt float [[TMP16]], [[CONV7]]
// CHK-C-NEXT:    [[FROMBOOL13:%.*]] = zext i1 [[CMP11]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL13]], ptr [[ATMP12]], align 1
// CHK-C-NEXT:    br i1 [[CMP11]], label [[ATOMIC_CONT14:%.*]], label [[ATOMIC_EXIT20:%.*]]
// CHK-C:       atomic_cont14:
// CHK-C-NEXT:    [[TMP17:%.*]] = phi i64 [ [[ATOMIC_LOAD8]], [[ATOMIC_EXIT]] ], [ [[TMP22:%.*]], [[ATOMIC_CMP16:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP17]], ptr [[ATOMIC_TEMP15]], align 8
// CHK-C-NEXT:    [[TMP18:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP15]], align 8
// CHK-C-NEXT:    [[TMP19:%.*]] = insertelement <2 x float> [[TMP18]], float [[CONV7]], i64 0
// CHK-C-NEXT:    store <2 x float> [[TMP19]], ptr [[ATOMIC_TEMP15]], align 8
// CHK-C-NEXT:    [[TMP20:%.*]] = load i64, ptr [[ATOMIC_TEMP15]], align 8
// CHK-C-NEXT:    [[TMP21:%.*]] = cmpxchg ptr [[FLOAT2X]], i64 [[TMP17]], i64 [[TMP20]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP22]] = extractvalue { i64, i1 } [[TMP21]], 0
// CHK-C-NEXT:    [[TMP23:%.*]] = extractvalue { i64, i1 } [[TMP21]], 1
// CHK-C-NEXT:    br i1 [[TMP23]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP16]]
// CHK-C:       atomic_upd_exit:
// CHK-C-NEXT:    store float [[CONV7]], ptr [[ATMP9]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT20]]
// CHK-C:       atomic_cmp16:
// CHK-C-NEXT:    store i64 [[TMP22]], ptr [[ATOMIC_TEMP17]], align 8
// CHK-C-NEXT:    [[TMP24:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP17]], align 8
// CHK-C-NEXT:    [[TMP25:%.*]] = extractelement <2 x float> [[TMP24]], i64 0
// CHK-C-NEXT:    store float [[TMP25]], ptr [[ATMP9]], align 4
// CHK-C-NEXT:    [[CMP18:%.*]] = fcmp olt float [[TMP25]], [[CONV7]]
// CHK-C-NEXT:    [[FROMBOOL19:%.*]] = zext i1 [[CMP18]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL19]], ptr [[ATMP12]], align 1
// CHK-C-NEXT:    br i1 [[CMP18]], label [[ATOMIC_CONT14]], label [[ATOMIC_EXIT20]]
// CHK-C:       atomic_exit20:
// CHK-C-NEXT:    [[TMP26:%.*]] = load float, ptr [[ATMP9]], align 4
// CHK-C-NEXT:    [[TMP27:%.*]] = load i8, ptr [[ATMP12]], align 1
// CHK-C-NEXT:    [[CONV21:%.*]] = fptosi float [[TMP26]] to i32
// CHK-C-NEXT:    store i32 [[CONV21]], ptr [[V]], align 4
// CHK-C-NEXT:    [[TMP28:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[CONV22:%.*]] = sitofp i32 [[TMP28]] to float
// CHK-C-NEXT:    [[TMP29:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[CONV23:%.*]] = sitofp i32 [[TMP29]] to float
// CHK-C-NEXT:    [[ATOMIC_LOAD24:%.*]] = load atomic i64, ptr [[FLOAT2X]] monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD24]], ptr [[ATOMIC_TEMP26]], align 8
// CHK-C-NEXT:    [[TMP30:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP26]], align 8
// CHK-C-NEXT:    [[TMP31:%.*]] = extractelement <2 x float> [[TMP30]], i64 0
// CHK-C-NEXT:    store float [[TMP31]], ptr [[ATMP25]], align 4
// CHK-C-NEXT:    store float [[TMP31]], ptr [[ATOMIC_TEMP27]], align 8
// CHK-C-NEXT:    [[TMP32:%.*]] = load i64, ptr [[ATOMIC_TEMP27]], align 8
// CHK-C-NEXT:    store float [[CONV23]], ptr [[ATOMIC_TEMP28]], align 8
// CHK-C-NEXT:    [[TMP33:%.*]] = load i64, ptr [[ATOMIC_TEMP28]], align 8
// CHK-C-NEXT:    [[CMP29:%.*]] = icmp eq i64 [[TMP32]], [[TMP33]]
// CHK-C-NEXT:    [[FROMBOOL31:%.*]] = zext i1 [[CMP29]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL31]], ptr [[ATMP30]], align 1
// CHK-C-NEXT:    br i1 [[CMP29]], label [[ATOMIC_CONT32:%.*]], label [[ATOMIC_EXIT41:%.*]]
// CHK-C:       atomic_cont32:
// CHK-C-NEXT:    [[TMP34:%.*]] = phi i64 [ [[ATOMIC_LOAD24]], [[ATOMIC_EXIT20]] ], [ [[TMP39:%.*]], [[ATOMIC_CMP35:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP34]], ptr [[ATOMIC_TEMP33]], align 8
// CHK-C-NEXT:    [[TMP35:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP33]], align 8
// CHK-C-NEXT:    [[TMP36:%.*]] = insertelement <2 x float> [[TMP35]], float [[CONV22]], i64 0
// CHK-C-NEXT:    store <2 x float> [[TMP36]], ptr [[ATOMIC_TEMP33]], align 8
// CHK-C-NEXT:    [[TMP37:%.*]] = load i64, ptr [[ATOMIC_TEMP33]], align 8
// CHK-C-NEXT:    [[TMP38:%.*]] = cmpxchg ptr [[FLOAT2X]], i64 [[TMP34]], i64 [[TMP37]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP39]] = extractvalue { i64, i1 } [[TMP38]], 0
// CHK-C-NEXT:    [[TMP40:%.*]] = extractvalue { i64, i1 } [[TMP38]], 1
// CHK-C-NEXT:    br i1 [[TMP40]], label [[ATOMIC_UPD_EXIT34:%.*]], label [[ATOMIC_CMP35]]
// CHK-C:       atomic_upd_exit34:
// CHK-C-NEXT:    store float [[CONV22]], ptr [[ATMP25]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_EXIT41]]
// CHK-C:       atomic_cmp35:
// CHK-C-NEXT:    store i64 [[TMP39]], ptr [[ATOMIC_TEMP36]], align 8
// CHK-C-NEXT:    [[TMP41:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP36]], align 8
// CHK-C-NEXT:    [[TMP42:%.*]] = extractelement <2 x float> [[TMP41]], i64 0
// CHK-C-NEXT:    store float [[TMP42]], ptr [[ATMP25]], align 4
// CHK-C-NEXT:    store float [[TMP42]], ptr [[ATOMIC_TEMP37]], align 8
// CHK-C-NEXT:    [[TMP43:%.*]] = load i64, ptr [[ATOMIC_TEMP37]], align 8
// CHK-C-NEXT:    store float [[CONV23]], ptr [[ATOMIC_TEMP38]], align 8
// CHK-C-NEXT:    [[TMP44:%.*]] = load i64, ptr [[ATOMIC_TEMP38]], align 8
// CHK-C-NEXT:    [[CMP39:%.*]] = icmp eq i64 [[TMP43]], [[TMP44]]
// CHK-C-NEXT:    [[FROMBOOL40:%.*]] = zext i1 [[CMP39]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL40]], ptr [[ATMP30]], align 1
// CHK-C-NEXT:    br i1 [[CMP39]], label [[ATOMIC_CONT32]], label [[ATOMIC_EXIT41]]
// CHK-C:       atomic_exit41:
// CHK-C-NEXT:    [[TMP45:%.*]] = load float, ptr [[ATMP25]], align 4
// CHK-C-NEXT:    [[TMP46:%.*]] = load i8, ptr [[ATMP30]], align 1
// CHK-C-NEXT:    [[TMP47:%.*]] = trunc i8 [[TMP46]] to i1
// CHK-C-NEXT:    br i1 [[TMP47]], label [[ATOMIC_CAPTURE_CONT:%.*]], label [[ATOMIC_CAPTURE:%.*]]
// CHK-C:       atomic_capture:
// CHK-C-NEXT:    [[CONV42:%.*]] = fptosi float [[TMP45]] to i32
// CHK-C-NEXT:    store i32 [[CONV42]], ptr [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT]]
// CHK-C:       atomic_capture_cont:
// CHK-C-NEXT:    [[TMP48:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[CONV43:%.*]] = sitofp i32 [[TMP48]] to float
// CHK-C-NEXT:    [[TMP49:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[CONV44:%.*]] = sitofp i32 [[TMP49]] to float
// CHK-C-NEXT:    [[ATOMIC_LOAD45:%.*]] = load atomic i64, ptr [[FLOAT2X]] monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD45]], ptr [[ATOMIC_TEMP47]], align 8
// CHK-C-NEXT:    [[TMP50:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP47]], align 8
// CHK-C-NEXT:    [[TMP51:%.*]] = extractelement <2 x float> [[TMP50]], i64 0
// CHK-C-NEXT:    store float [[TMP51]], ptr [[ATMP46]], align 4
// CHK-C-NEXT:    store float [[TMP51]], ptr [[ATOMIC_TEMP48]], align 8
// CHK-C-NEXT:    [[TMP52:%.*]] = load i64, ptr [[ATOMIC_TEMP48]], align 8
// CHK-C-NEXT:    store float [[CONV44]], ptr [[ATOMIC_TEMP49]], align 8
// CHK-C-NEXT:    [[TMP53:%.*]] = load i64, ptr [[ATOMIC_TEMP49]], align 8
// CHK-C-NEXT:    [[CMP50:%.*]] = icmp eq i64 [[TMP52]], [[TMP53]]
// CHK-C-NEXT:    [[FROMBOOL52:%.*]] = zext i1 [[CMP50]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL52]], ptr [[ATMP51]], align 1
// CHK-C-NEXT:    br i1 [[CMP50]], label [[ATOMIC_CONT53:%.*]], label [[ATOMIC_EXIT61:%.*]]
// CHK-C:       atomic_cont53:
// CHK-C-NEXT:    [[TMP54:%.*]] = phi i64 [ [[ATOMIC_LOAD45]], [[ATOMIC_CAPTURE_CONT]] ], [ [[TMP59:%.*]], [[ATOMIC_CMP55:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP54]], ptr [[ATOMIC_TEMP54]], align 8
// CHK-C-NEXT:    [[TMP55:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP54]], align 8
// CHK-C-NEXT:    [[TMP56:%.*]] = insertelement <2 x float> [[TMP55]], float [[CONV43]], i64 0
// CHK-C-NEXT:    store <2 x float> [[TMP56]], ptr [[ATOMIC_TEMP54]], align 8
// CHK-C-NEXT:    [[TMP57:%.*]] = load i64, ptr [[ATOMIC_TEMP54]], align 8
// CHK-C-NEXT:    [[TMP58:%.*]] = cmpxchg ptr [[FLOAT2X]], i64 [[TMP54]], i64 [[TMP57]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP59]] = extractvalue { i64, i1 } [[TMP58]], 0
// CHK-C-NEXT:    [[TMP60:%.*]] = extractvalue { i64, i1 } [[TMP58]], 1
// CHK-C-NEXT:    br i1 [[TMP60]], label [[ATOMIC_EXIT61]], label [[ATOMIC_CMP55]]
// CHK-C:       atomic_cmp55:
// CHK-C-NEXT:    store i64 [[TMP59]], ptr [[ATOMIC_TEMP56]], align 8
// CHK-C-NEXT:    [[TMP61:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP56]], align 8
// CHK-C-NEXT:    [[TMP62:%.*]] = extractelement <2 x float> [[TMP61]], i64 0
// CHK-C-NEXT:    store float [[TMP62]], ptr [[ATMP46]], align 4
// CHK-C-NEXT:    store float [[TMP62]], ptr [[ATOMIC_TEMP57]], align 8
// CHK-C-NEXT:    [[TMP63:%.*]] = load i64, ptr [[ATOMIC_TEMP57]], align 8
// CHK-C-NEXT:    store float [[CONV44]], ptr [[ATOMIC_TEMP58]], align 8
// CHK-C-NEXT:    [[TMP64:%.*]] = load i64, ptr [[ATOMIC_TEMP58]], align 8
// CHK-C-NEXT:    [[CMP59:%.*]] = icmp eq i64 [[TMP63]], [[TMP64]]
// CHK-C-NEXT:    [[FROMBOOL60:%.*]] = zext i1 [[CMP59]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL60]], ptr [[ATMP51]], align 1
// CHK-C-NEXT:    br i1 [[CMP59]], label [[ATOMIC_CONT53]], label [[ATOMIC_EXIT61]]
// CHK-C:       atomic_exit61:
// CHK-C-NEXT:    [[TMP65:%.*]] = load float, ptr [[ATMP46]], align 4
// CHK-C-NEXT:    [[TMP66:%.*]] = load i8, ptr [[ATMP51]], align 1
// CHK-C-NEXT:    [[CONV62:%.*]] = zext i8 [[TMP66]] to i16
// CHK-C-NEXT:    store i16 [[CONV62]], ptr [[R]], align 2
// CHK-C-NEXT:    [[TMP67:%.*]] = load i32, ptr [[D]], align 4
// CHK-C-NEXT:    [[CONV63:%.*]] = sitofp i32 [[TMP67]] to float
// CHK-C-NEXT:    [[TMP68:%.*]] = load i32, ptr [[E]], align 4
// CHK-C-NEXT:    [[CONV64:%.*]] = sitofp i32 [[TMP68]] to float
// CHK-C-NEXT:    [[ATOMIC_LOAD65:%.*]] = load atomic i64, ptr [[FLOAT2X]] monotonic, align 8
// CHK-C-NEXT:    store i64 [[ATOMIC_LOAD65]], ptr [[ATOMIC_TEMP67]], align 8
// CHK-C-NEXT:    [[TMP69:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP67]], align 8
// CHK-C-NEXT:    [[TMP70:%.*]] = extractelement <2 x float> [[TMP69]], i64 0
// CHK-C-NEXT:    store float [[TMP70]], ptr [[ATMP66]], align 4
// CHK-C-NEXT:    store float [[TMP70]], ptr [[ATOMIC_TEMP68]], align 8
// CHK-C-NEXT:    [[TMP71:%.*]] = load i64, ptr [[ATOMIC_TEMP68]], align 8
// CHK-C-NEXT:    store float [[CONV64]], ptr [[ATOMIC_TEMP69]], align 8
// CHK-C-NEXT:    [[TMP72:%.*]] = load i64, ptr [[ATOMIC_TEMP69]], align 8
// CHK-C-NEXT:    [[CMP70:%.*]] = icmp eq i64 [[TMP71]], [[TMP72]]
// CHK-C-NEXT:    [[FROMBOOL72:%.*]] = zext i1 [[CMP70]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL72]], ptr [[ATMP71]], align 1
// CHK-C-NEXT:    br i1 [[CMP70]], label [[ATOMIC_CONT73:%.*]], label [[ATOMIC_EXIT81:%.*]]
// CHK-C:       atomic_cont73:
// CHK-C-NEXT:    [[TMP73:%.*]] = phi i64 [ [[ATOMIC_LOAD65]], [[ATOMIC_EXIT61]] ], [ [[TMP78:%.*]], [[ATOMIC_CMP75:%.*]] ]
// CHK-C-NEXT:    store i64 [[TMP73]], ptr [[ATOMIC_TEMP74]], align 8
// CHK-C-NEXT:    [[TMP74:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP74]], align 8
// CHK-C-NEXT:    [[TMP75:%.*]] = insertelement <2 x float> [[TMP74]], float [[CONV63]], i64 0
// CHK-C-NEXT:    store <2 x float> [[TMP75]], ptr [[ATOMIC_TEMP74]], align 8
// CHK-C-NEXT:    [[TMP76:%.*]] = load i64, ptr [[ATOMIC_TEMP74]], align 8
// CHK-C-NEXT:    [[TMP77:%.*]] = cmpxchg ptr [[FLOAT2X]], i64 [[TMP73]], i64 [[TMP76]] monotonic monotonic, align 8
// CHK-C-NEXT:    [[TMP78]] = extractvalue { i64, i1 } [[TMP77]], 0
// CHK-C-NEXT:    [[TMP79:%.*]] = extractvalue { i64, i1 } [[TMP77]], 1
// CHK-C-NEXT:    br i1 [[TMP79]], label [[ATOMIC_EXIT81]], label [[ATOMIC_CMP75]]
// CHK-C:       atomic_cmp75:
// CHK-C-NEXT:    store i64 [[TMP78]], ptr [[ATOMIC_TEMP76]], align 8
// CHK-C-NEXT:    [[TMP80:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP76]], align 8
// CHK-C-NEXT:    [[TMP81:%.*]] = extractelement <2 x float> [[TMP80]], i64 0
// CHK-C-NEXT:    store float [[TMP81]], ptr [[ATMP66]], align 4
// CHK-C-NEXT:    store float [[TMP81]], ptr [[ATOMIC_TEMP77]], align 8
// CHK-C-NEXT:    [[TMP82:%.*]] = load i64, ptr [[ATOMIC_TEMP77]], align 8
// CHK-C-NEXT:    store float [[CONV64]], ptr [[ATOMIC_TEMP78]], align 8
// CHK-C-NEXT:    [[TMP83:%.*]] = load i64, ptr [[ATOMIC_TEMP78]], align 8
// CHK-C-NEXT:    [[CMP79:%.*]] = icmp eq i64 [[TMP82]], [[TMP83]]
// CHK-C-NEXT:    [[FROMBOOL80:%.*]] = zext i1 [[CMP79]] to i8
// CHK-C-NEXT:    store i8 [[FROMBOOL80]], ptr [[ATMP71]], align 1
// CHK-C-NEXT:    br i1 [[CMP79]], label [[ATOMIC_CONT73]], label [[ATOMIC_EXIT81]]
// CHK-C:       atomic_exit81:
// CHK-C-NEXT:    [[TMP84:%.*]] = load float, ptr [[ATMP66]], align 4
// CHK-C-NEXT:    [[TMP85:%.*]] = load i8, ptr [[ATMP71]], align 1
// CHK-C-NEXT:    [[CONV82:%.*]] = zext i8 [[TMP85]] to i16
// CHK-C-NEXT:    store i16 [[CONV82]], ptr [[R]], align 2
// CHK-C-NEXT:    [[TMP86:%.*]] = trunc i8 [[TMP85]] to i1
// CHK-C-NEXT:    br i1 [[TMP86]], label [[ATOMIC_CAPTURE_CONT85:%.*]], label [[ATOMIC_CAPTURE83:%.*]]
// CHK-C:       atomic_capture83:
// CHK-C-NEXT:    [[CONV84:%.*]] = fptosi float [[TMP84]] to i32
// CHK-C-NEXT:    store i32 [[CONV84]], ptr [[V]], align 4
// CHK-C-NEXT:    br label [[ATOMIC_CAPTURE_CONT85]]
// CHK-C:       atomic_capture_cont85:
// CHK-C-NEXT:    ret void
//
// CHK-CXX-LABEL: @_Z15test_ext_vectorv(
// CHK-CXX-NEXT:  entry:
// CHK-CXX-NEXT:    [[FLOAT2X:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[EXPR:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[D:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[E:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[V:%.*]] = alloca i32, align 4
// CHK-CXX-NEXT:    [[R:%.*]] = alloca i16, align 2
// CHK-CXX-NEXT:    [[TMP:%.*]] = alloca float, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATMP1:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP2:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP3:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATMP9:%.*]] = alloca float, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP10:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATMP12:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP15:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP17:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATMP25:%.*]] = alloca float, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP26:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP27:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP28:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATMP30:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP33:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP36:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP37:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP38:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATMP46:%.*]] = alloca float, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP47:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP48:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP49:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATMP51:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP54:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP56:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP57:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP58:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATMP66:%.*]] = alloca float, align 4
// CHK-CXX-NEXT:    [[ATOMIC_TEMP67:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP68:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP69:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATMP71:%.*]] = alloca i8, align 1
// CHK-CXX-NEXT:    [[ATOMIC_TEMP74:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP76:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP77:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[ATOMIC_TEMP78:%.*]] = alloca <2 x float>, align 8
// CHK-CXX-NEXT:    [[TMP0:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[CONV:%.*]] = sitofp i32 [[TMP0]] to float
// CHK-CXX-NEXT:    [[ATOMIC_LOAD:%.*]] = load atomic i64, ptr [[FLOAT2X]] monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD]], ptr [[ATOMIC_TEMP]], align 8
// CHK-CXX-NEXT:    [[TMP1:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP]], align 8
// CHK-CXX-NEXT:    [[TMP2:%.*]] = extractelement <2 x float> [[TMP1]], i64 0
// CHK-CXX-NEXT:    store float [[TMP2]], ptr [[TMP]], align 4
// CHK-CXX-NEXT:    [[CMP:%.*]] = fcmp olt float [[TMP2]], [[CONV]]
// CHK-CXX-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[CMP]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL]], ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP]], label [[ATOMIC_CONT:%.*]], label [[ATOMIC_EXIT:%.*]]
// CHK-CXX:       atomic_cont:
// CHK-CXX-NEXT:    [[TMP3:%.*]] = phi i64 [ [[ATOMIC_LOAD]], [[ENTRY:%.*]] ], [ [[TMP8:%.*]], [[ATOMIC_CMP:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP3]], ptr [[ATOMIC_TEMP2]], align 8
// CHK-CXX-NEXT:    [[TMP4:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP2]], align 8
// CHK-CXX-NEXT:    [[TMP5:%.*]] = insertelement <2 x float> [[TMP4]], float [[CONV]], i64 0
// CHK-CXX-NEXT:    store <2 x float> [[TMP5]], ptr [[ATOMIC_TEMP2]], align 8
// CHK-CXX-NEXT:    [[TMP6:%.*]] = load i64, ptr [[ATOMIC_TEMP2]], align 8
// CHK-CXX-NEXT:    [[TMP7:%.*]] = cmpxchg ptr [[FLOAT2X]], i64 [[TMP3]], i64 [[TMP6]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP8]] = extractvalue { i64, i1 } [[TMP7]], 0
// CHK-CXX-NEXT:    [[TMP9:%.*]] = extractvalue { i64, i1 } [[TMP7]], 1
// CHK-CXX-NEXT:    br i1 [[TMP9]], label [[ATOMIC_EXIT]], label [[ATOMIC_CMP]]
// CHK-CXX:       atomic_cmp:
// CHK-CXX-NEXT:    store i64 [[TMP8]], ptr [[ATOMIC_TEMP3]], align 8
// CHK-CXX-NEXT:    [[TMP10:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP3]], align 8
// CHK-CXX-NEXT:    [[TMP11:%.*]] = extractelement <2 x float> [[TMP10]], i64 0
// CHK-CXX-NEXT:    store float [[TMP11]], ptr [[TMP]], align 4
// CHK-CXX-NEXT:    [[CMP4:%.*]] = fcmp olt float [[TMP11]], [[CONV]]
// CHK-CXX-NEXT:    [[FROMBOOL5:%.*]] = zext i1 [[CMP4]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL5]], ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP4]], label [[ATOMIC_CONT]], label [[ATOMIC_EXIT]]
// CHK-CXX:       atomic_exit:
// CHK-CXX-NEXT:    [[TMP12:%.*]] = load float, ptr [[TMP]], align 4
// CHK-CXX-NEXT:    [[TMP13:%.*]] = load i8, ptr [[ATMP1]], align 1
// CHK-CXX-NEXT:    [[CONV6:%.*]] = fptosi float [[TMP12]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV6]], ptr [[V]], align 4
// CHK-CXX-NEXT:    [[TMP14:%.*]] = load i32, ptr [[EXPR]], align 4
// CHK-CXX-NEXT:    [[CONV7:%.*]] = sitofp i32 [[TMP14]] to float
// CHK-CXX-NEXT:    [[ATOMIC_LOAD8:%.*]] = load atomic i64, ptr [[FLOAT2X]] monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD8]], ptr [[ATOMIC_TEMP10]], align 8
// CHK-CXX-NEXT:    [[TMP15:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP10]], align 8
// CHK-CXX-NEXT:    [[TMP16:%.*]] = extractelement <2 x float> [[TMP15]], i64 0
// CHK-CXX-NEXT:    store float [[TMP16]], ptr [[ATMP9]], align 4
// CHK-CXX-NEXT:    [[CMP11:%.*]] = fcmp olt float [[TMP16]], [[CONV7]]
// CHK-CXX-NEXT:    [[FROMBOOL13:%.*]] = zext i1 [[CMP11]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL13]], ptr [[ATMP12]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP11]], label [[ATOMIC_CONT14:%.*]], label [[ATOMIC_EXIT20:%.*]]
// CHK-CXX:       atomic_cont14:
// CHK-CXX-NEXT:    [[TMP17:%.*]] = phi i64 [ [[ATOMIC_LOAD8]], [[ATOMIC_EXIT]] ], [ [[TMP22:%.*]], [[ATOMIC_CMP16:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP17]], ptr [[ATOMIC_TEMP15]], align 8
// CHK-CXX-NEXT:    [[TMP18:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP15]], align 8
// CHK-CXX-NEXT:    [[TMP19:%.*]] = insertelement <2 x float> [[TMP18]], float [[CONV7]], i64 0
// CHK-CXX-NEXT:    store <2 x float> [[TMP19]], ptr [[ATOMIC_TEMP15]], align 8
// CHK-CXX-NEXT:    [[TMP20:%.*]] = load i64, ptr [[ATOMIC_TEMP15]], align 8
// CHK-CXX-NEXT:    [[TMP21:%.*]] = cmpxchg ptr [[FLOAT2X]], i64 [[TMP17]], i64 [[TMP20]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP22]] = extractvalue { i64, i1 } [[TMP21]], 0
// CHK-CXX-NEXT:    [[TMP23:%.*]] = extractvalue { i64, i1 } [[TMP21]], 1
// CHK-CXX-NEXT:    br i1 [[TMP23]], label [[ATOMIC_UPD_EXIT:%.*]], label [[ATOMIC_CMP16]]
// CHK-CXX:       atomic_upd_exit:
// CHK-CXX-NEXT:    store float [[CONV7]], ptr [[ATMP9]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT20]]
// CHK-CXX:       atomic_cmp16:
// CHK-CXX-NEXT:    store i64 [[TMP22]], ptr [[ATOMIC_TEMP17]], align 8
// CHK-CXX-NEXT:    [[TMP24:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP17]], align 8
// CHK-CXX-NEXT:    [[TMP25:%.*]] = extractelement <2 x float> [[TMP24]], i64 0
// CHK-CXX-NEXT:    store float [[TMP25]], ptr [[ATMP9]], align 4
// CHK-CXX-NEXT:    [[CMP18:%.*]] = fcmp olt float [[TMP25]], [[CONV7]]
// CHK-CXX-NEXT:    [[FROMBOOL19:%.*]] = zext i1 [[CMP18]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL19]], ptr [[ATMP12]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP18]], label [[ATOMIC_CONT14]], label [[ATOMIC_EXIT20]]
// CHK-CXX:       atomic_exit20:
// CHK-CXX-NEXT:    [[TMP26:%.*]] = load float, ptr [[ATMP9]], align 4
// CHK-CXX-NEXT:    [[TMP27:%.*]] = load i8, ptr [[ATMP12]], align 1
// CHK-CXX-NEXT:    [[CONV21:%.*]] = fptosi float [[TMP26]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV21]], ptr [[V]], align 4
// CHK-CXX-NEXT:    [[TMP28:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[CONV22:%.*]] = sitofp i32 [[TMP28]] to float
// CHK-CXX-NEXT:    [[TMP29:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[CONV23:%.*]] = sitofp i32 [[TMP29]] to float
// CHK-CXX-NEXT:    [[ATOMIC_LOAD24:%.*]] = load atomic i64, ptr [[FLOAT2X]] monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD24]], ptr [[ATOMIC_TEMP26]], align 8
// CHK-CXX-NEXT:    [[TMP30:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP26]], align 8
// CHK-CXX-NEXT:    [[TMP31:%.*]] = extractelement <2 x float> [[TMP30]], i64 0
// CHK-CXX-NEXT:    store float [[TMP31]], ptr [[ATMP25]], align 4
// CHK-CXX-NEXT:    store float [[TMP31]], ptr [[ATOMIC_TEMP27]], align 8
// CHK-CXX-NEXT:    [[TMP32:%.*]] = load i64, ptr [[ATOMIC_TEMP27]], align 8
// CHK-CXX-NEXT:    store float [[CONV23]], ptr [[ATOMIC_TEMP28]], align 8
// CHK-CXX-NEXT:    [[TMP33:%.*]] = load i64, ptr [[ATOMIC_TEMP28]], align 8
// CHK-CXX-NEXT:    [[CMP29:%.*]] = icmp eq i64 [[TMP32]], [[TMP33]]
// CHK-CXX-NEXT:    [[FROMBOOL31:%.*]] = zext i1 [[CMP29]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL31]], ptr [[ATMP30]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP29]], label [[ATOMIC_CONT32:%.*]], label [[ATOMIC_EXIT41:%.*]]
// CHK-CXX:       atomic_cont32:
// CHK-CXX-NEXT:    [[TMP34:%.*]] = phi i64 [ [[ATOMIC_LOAD24]], [[ATOMIC_EXIT20]] ], [ [[TMP39:%.*]], [[ATOMIC_CMP35:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP34]], ptr [[ATOMIC_TEMP33]], align 8
// CHK-CXX-NEXT:    [[TMP35:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP33]], align 8
// CHK-CXX-NEXT:    [[TMP36:%.*]] = insertelement <2 x float> [[TMP35]], float [[CONV22]], i64 0
// CHK-CXX-NEXT:    store <2 x float> [[TMP36]], ptr [[ATOMIC_TEMP33]], align 8
// CHK-CXX-NEXT:    [[TMP37:%.*]] = load i64, ptr [[ATOMIC_TEMP33]], align 8
// CHK-CXX-NEXT:    [[TMP38:%.*]] = cmpxchg ptr [[FLOAT2X]], i64 [[TMP34]], i64 [[TMP37]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP39]] = extractvalue { i64, i1 } [[TMP38]], 0
// CHK-CXX-NEXT:    [[TMP40:%.*]] = extractvalue { i64, i1 } [[TMP38]], 1
// CHK-CXX-NEXT:    br i1 [[TMP40]], label [[ATOMIC_UPD_EXIT34:%.*]], label [[ATOMIC_CMP35]]
// CHK-CXX:       atomic_upd_exit34:
// CHK-CXX-NEXT:    store float [[CONV22]], ptr [[ATMP25]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_EXIT41]]
// CHK-CXX:       atomic_cmp35:
// CHK-CXX-NEXT:    store i64 [[TMP39]], ptr [[ATOMIC_TEMP36]], align 8
// CHK-CXX-NEXT:    [[TMP41:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP36]], align 8
// CHK-CXX-NEXT:    [[TMP42:%.*]] = extractelement <2 x float> [[TMP41]], i64 0
// CHK-CXX-NEXT:    store float [[TMP42]], ptr [[ATMP25]], align 4
// CHK-CXX-NEXT:    store float [[TMP42]], ptr [[ATOMIC_TEMP37]], align 8
// CHK-CXX-NEXT:    [[TMP43:%.*]] = load i64, ptr [[ATOMIC_TEMP37]], align 8
// CHK-CXX-NEXT:    store float [[CONV23]], ptr [[ATOMIC_TEMP38]], align 8
// CHK-CXX-NEXT:    [[TMP44:%.*]] = load i64, ptr [[ATOMIC_TEMP38]], align 8
// CHK-CXX-NEXT:    [[CMP39:%.*]] = icmp eq i64 [[TMP43]], [[TMP44]]
// CHK-CXX-NEXT:    [[FROMBOOL40:%.*]] = zext i1 [[CMP39]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL40]], ptr [[ATMP30]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP39]], label [[ATOMIC_CONT32]], label [[ATOMIC_EXIT41]]
// CHK-CXX:       atomic_exit41:
// CHK-CXX-NEXT:    [[TMP45:%.*]] = load float, ptr [[ATMP25]], align 4
// CHK-CXX-NEXT:    [[TMP46:%.*]] = load i8, ptr [[ATMP30]], align 1
// CHK-CXX-NEXT:    [[TMP47:%.*]] = trunc i8 [[TMP46]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP47]], label [[ATOMIC_CAPTURE_CONT:%.*]], label [[ATOMIC_CAPTURE:%.*]]
// CHK-CXX:       atomic_capture:
// CHK-CXX-NEXT:    [[CONV42:%.*]] = fptosi float [[TMP45]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV42]], ptr [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT]]
// CHK-CXX:       atomic_capture_cont:
// CHK-CXX-NEXT:    [[TMP48:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[CONV43:%.*]] = sitofp i32 [[TMP48]] to float
// CHK-CXX-NEXT:    [[TMP49:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[CONV44:%.*]] = sitofp i32 [[TMP49]] to float
// CHK-CXX-NEXT:    [[ATOMIC_LOAD45:%.*]] = load atomic i64, ptr [[FLOAT2X]] monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD45]], ptr [[ATOMIC_TEMP47]], align 8
// CHK-CXX-NEXT:    [[TMP50:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP47]], align 8
// CHK-CXX-NEXT:    [[TMP51:%.*]] = extractelement <2 x float> [[TMP50]], i64 0
// CHK-CXX-NEXT:    store float [[TMP51]], ptr [[ATMP46]], align 4
// CHK-CXX-NEXT:    store float [[TMP51]], ptr [[ATOMIC_TEMP48]], align 8
// CHK-CXX-NEXT:    [[TMP52:%.*]] = load i64, ptr [[ATOMIC_TEMP48]], align 8
// CHK-CXX-NEXT:    store float [[CONV44]], ptr [[ATOMIC_TEMP49]], align 8
// CHK-CXX-NEXT:    [[TMP53:%.*]] = load i64, ptr [[ATOMIC_TEMP49]], align 8
// CHK-CXX-NEXT:    [[CMP50:%.*]] = icmp eq i64 [[TMP52]], [[TMP53]]
// CHK-CXX-NEXT:    [[FROMBOOL52:%.*]] = zext i1 [[CMP50]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL52]], ptr [[ATMP51]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP50]], label [[ATOMIC_CONT53:%.*]], label [[ATOMIC_EXIT61:%.*]]
// CHK-CXX:       atomic_cont53:
// CHK-CXX-NEXT:    [[TMP54:%.*]] = phi i64 [ [[ATOMIC_LOAD45]], [[ATOMIC_CAPTURE_CONT]] ], [ [[TMP59:%.*]], [[ATOMIC_CMP55:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP54]], ptr [[ATOMIC_TEMP54]], align 8
// CHK-CXX-NEXT:    [[TMP55:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP54]], align 8
// CHK-CXX-NEXT:    [[TMP56:%.*]] = insertelement <2 x float> [[TMP55]], float [[CONV43]], i64 0
// CHK-CXX-NEXT:    store <2 x float> [[TMP56]], ptr [[ATOMIC_TEMP54]], align 8
// CHK-CXX-NEXT:    [[TMP57:%.*]] = load i64, ptr [[ATOMIC_TEMP54]], align 8
// CHK-CXX-NEXT:    [[TMP58:%.*]] = cmpxchg ptr [[FLOAT2X]], i64 [[TMP54]], i64 [[TMP57]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP59]] = extractvalue { i64, i1 } [[TMP58]], 0
// CHK-CXX-NEXT:    [[TMP60:%.*]] = extractvalue { i64, i1 } [[TMP58]], 1
// CHK-CXX-NEXT:    br i1 [[TMP60]], label [[ATOMIC_EXIT61]], label [[ATOMIC_CMP55]]
// CHK-CXX:       atomic_cmp55:
// CHK-CXX-NEXT:    store i64 [[TMP59]], ptr [[ATOMIC_TEMP56]], align 8
// CHK-CXX-NEXT:    [[TMP61:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP56]], align 8
// CHK-CXX-NEXT:    [[TMP62:%.*]] = extractelement <2 x float> [[TMP61]], i64 0
// CHK-CXX-NEXT:    store float [[TMP62]], ptr [[ATMP46]], align 4
// CHK-CXX-NEXT:    store float [[TMP62]], ptr [[ATOMIC_TEMP57]], align 8
// CHK-CXX-NEXT:    [[TMP63:%.*]] = load i64, ptr [[ATOMIC_TEMP57]], align 8
// CHK-CXX-NEXT:    store float [[CONV44]], ptr [[ATOMIC_TEMP58]], align 8
// CHK-CXX-NEXT:    [[TMP64:%.*]] = load i64, ptr [[ATOMIC_TEMP58]], align 8
// CHK-CXX-NEXT:    [[CMP59:%.*]] = icmp eq i64 [[TMP63]], [[TMP64]]
// CHK-CXX-NEXT:    [[FROMBOOL60:%.*]] = zext i1 [[CMP59]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL60]], ptr [[ATMP51]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP59]], label [[ATOMIC_CONT53]], label [[ATOMIC_EXIT61]]
// CHK-CXX:       atomic_exit61:
// CHK-CXX-NEXT:    [[TMP65:%.*]] = load float, ptr [[ATMP46]], align 4
// CHK-CXX-NEXT:    [[TMP66:%.*]] = load i8, ptr [[ATMP51]], align 1
// CHK-CXX-NEXT:    [[CONV62:%.*]] = zext i8 [[TMP66]] to i16
// CHK-CXX-NEXT:    store i16 [[CONV62]], ptr [[R]], align 2
// CHK-CXX-NEXT:    [[TMP67:%.*]] = load i32, ptr [[D]], align 4
// CHK-CXX-NEXT:    [[CONV63:%.*]] = sitofp i32 [[TMP67]] to float
// CHK-CXX-NEXT:    [[TMP68:%.*]] = load i32, ptr [[E]], align 4
// CHK-CXX-NEXT:    [[CONV64:%.*]] = sitofp i32 [[TMP68]] to float
// CHK-CXX-NEXT:    [[ATOMIC_LOAD65:%.*]] = load atomic i64, ptr [[FLOAT2X]] monotonic, align 8
// CHK-CXX-NEXT:    store i64 [[ATOMIC_LOAD65]], ptr [[ATOMIC_TEMP67]], align 8
// CHK-CXX-NEXT:    [[TMP69:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP67]], align 8
// CHK-CXX-NEXT:    [[TMP70:%.*]] = extractelement <2 x float> [[TMP69]], i64 0
// CHK-CXX-NEXT:    store float [[TMP70]], ptr [[ATMP66]], align 4
// CHK-CXX-NEXT:    store float [[TMP70]], ptr [[ATOMIC_TEMP68]], align 8
// CHK-CXX-NEXT:    [[TMP71:%.*]] = load i64, ptr [[ATOMIC_TEMP68]], align 8
// CHK-CXX-NEXT:    store float [[CONV64]], ptr [[ATOMIC_TEMP69]], align 8
// CHK-CXX-NEXT:    [[TMP72:%.*]] = load i64, ptr [[ATOMIC_TEMP69]], align 8
// CHK-CXX-NEXT:    [[CMP70:%.*]] = icmp eq i64 [[TMP71]], [[TMP72]]
// CHK-CXX-NEXT:    [[FROMBOOL72:%.*]] = zext i1 [[CMP70]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL72]], ptr [[ATMP71]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP70]], label [[ATOMIC_CONT73:%.*]], label [[ATOMIC_EXIT81:%.*]]
// CHK-CXX:       atomic_cont73:
// CHK-CXX-NEXT:    [[TMP73:%.*]] = phi i64 [ [[ATOMIC_LOAD65]], [[ATOMIC_EXIT61]] ], [ [[TMP78:%.*]], [[ATOMIC_CMP75:%.*]] ]
// CHK-CXX-NEXT:    store i64 [[TMP73]], ptr [[ATOMIC_TEMP74]], align 8
// CHK-CXX-NEXT:    [[TMP74:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP74]], align 8
// CHK-CXX-NEXT:    [[TMP75:%.*]] = insertelement <2 x float> [[TMP74]], float [[CONV63]], i64 0
// CHK-CXX-NEXT:    store <2 x float> [[TMP75]], ptr [[ATOMIC_TEMP74]], align 8
// CHK-CXX-NEXT:    [[TMP76:%.*]] = load i64, ptr [[ATOMIC_TEMP74]], align 8
// CHK-CXX-NEXT:    [[TMP77:%.*]] = cmpxchg ptr [[FLOAT2X]], i64 [[TMP73]], i64 [[TMP76]] monotonic monotonic, align 8
// CHK-CXX-NEXT:    [[TMP78]] = extractvalue { i64, i1 } [[TMP77]], 0
// CHK-CXX-NEXT:    [[TMP79:%.*]] = extractvalue { i64, i1 } [[TMP77]], 1
// CHK-CXX-NEXT:    br i1 [[TMP79]], label [[ATOMIC_EXIT81]], label [[ATOMIC_CMP75]]
// CHK-CXX:       atomic_cmp75:
// CHK-CXX-NEXT:    store i64 [[TMP78]], ptr [[ATOMIC_TEMP76]], align 8
// CHK-CXX-NEXT:    [[TMP80:%.*]] = load <2 x float>, ptr [[ATOMIC_TEMP76]], align 8
// CHK-CXX-NEXT:    [[TMP81:%.*]] = extractelement <2 x float> [[TMP80]], i64 0
// CHK-CXX-NEXT:    store float [[TMP81]], ptr [[ATMP66]], align 4
// CHK-CXX-NEXT:    store float [[TMP81]], ptr [[ATOMIC_TEMP77]], align 8
// CHK-CXX-NEXT:    [[TMP82:%.*]] = load i64, ptr [[ATOMIC_TEMP77]], align 8
// CHK-CXX-NEXT:    store float [[CONV64]], ptr [[ATOMIC_TEMP78]], align 8
// CHK-CXX-NEXT:    [[TMP83:%.*]] = load i64, ptr [[ATOMIC_TEMP78]], align 8
// CHK-CXX-NEXT:    [[CMP79:%.*]] = icmp eq i64 [[TMP82]], [[TMP83]]
// CHK-CXX-NEXT:    [[FROMBOOL80:%.*]] = zext i1 [[CMP79]] to i8
// CHK-CXX-NEXT:    store i8 [[FROMBOOL80]], ptr [[ATMP71]], align 1
// CHK-CXX-NEXT:    br i1 [[CMP79]], label [[ATOMIC_CONT73]], label [[ATOMIC_EXIT81]]
// CHK-CXX:       atomic_exit81:
// CHK-CXX-NEXT:    [[TMP84:%.*]] = load float, ptr [[ATMP66]], align 4
// CHK-CXX-NEXT:    [[TMP85:%.*]] = load i8, ptr [[ATMP71]], align 1
// CHK-CXX-NEXT:    [[CONV82:%.*]] = zext i8 [[TMP85]] to i16
// CHK-CXX-NEXT:    store i16 [[CONV82]], ptr [[R]], align 2
// CHK-CXX-NEXT:    [[TMP86:%.*]] = trunc i8 [[TMP85]] to i1
// CHK-CXX-NEXT:    br i1 [[TMP86]], label [[ATOMIC_CAPTURE_CONT85:%.*]], label [[ATOMIC_CAPTURE83:%.*]]
// CHK-CXX:       atomic_capture83:
// CHK-CXX-NEXT:    [[CONV84:%.*]] = fptosi float [[TMP84]] to i32
// CHK-CXX-NEXT:    store i32 [[CONV84]], ptr [[V]], align 4
// CHK-CXX-NEXT:    br label [[ATOMIC_CAPTURE_CONT85]]
// CHK-CXX:       atomic_capture_cont85:
// CHK-CXX-NEXT:    ret void
//
void test_ext_vector() {
  typedef float float2 __attribute__((ext_vector_type(2)));
  float2 float2x;

  int expr, d, e, v;
  short r;

  #pragma omp atomic compare capture
  { v = float2x.x; if (float2x.x < expr) { float2x.x = expr; } } // MAX

  #pragma omp atomic compare capture
  { if (float2x.x < expr) { float2x.x = expr; } v = float2x.x; } // MAX

  #pragma omp atomic compare capture
  if (float2x.x == e) { float2x.x = d; } else { v = float2x.x; }

  #pragma omp atomic compare capture
  { r = float2x.x == e; if(r) { float2x.x = d; } }

  #pragma omp atomic compare capture
  { r = float2x.x == e; if(r) { float2x.x = d; } else { v = float2x.x; } }
}

#endif // HEADER
// end INTEL_COLLAB
