// INTEL_CUSTOMIZATION
//
// INTEL CONFIDENTIAL
//
// Modifications, Copyright (C) 2021 Intel Corporation
//
// This software and the related documents are Intel copyrighted materials, and
// your use of them is governed by the express license under which they were
// provided to you ("License"). Unless the License provides otherwise, you may not
// use, modify, copy, publish, distribute, disclose or transmit this software or
// the related documents without Intel's prior written permission.
//
// This software and the related documents are provided as is, with no express
// or implied warranties, other than those that are expressly stated in the
// License.
//
// end INTEL_CUSTOMIZATION
#pragma once

#include "llvm/Support/CommandLine.h"

using namespace llvm;

enum class EnumClass2 { val0, val1 };
#define EnumVal2(opt0, opt1)                                                   \
  cl::values(clEnumValN(EnumClass2::val0, opt0, ""),                           \
             clEnumValN(EnumClass2::val1, opt1, ""))
enum class EnumClass3 { val0, val1, val2 };
#define EnumVal3(opt0, opt1, opt2)                                             \
  cl::values(clEnumValN(EnumClass3::val0, opt0, ""),                           \
             clEnumValN(EnumClass3::val1, opt1, ""),                           \
             clEnumValN(EnumClass3::val2, opt2, ""))

OPTION_VALUE(OptXsAutoPipeline, "auto-pipeline", bool);
OPTION_VALUE(OptXsBoard, "board", std::string);
OPTION_VALUE(OptXsBspFlow, "bsp-flow", std::string);
OPTION_VALUE(OptXsClock, "clock", std::string);
OPTION_VALUE(OptXsConstCacheBytes, "const-cache-bytes", unsigned);
OPTION_VALUE(OptXsDaz, "daz", bool);
OPTION_VALUE(OptXsDisableAutoLoopFusion, "disable-auto-loop-fusion", bool);
OPTION_ENUM(OptXsDspMode, "dsp-mode", 3, "default", "prefer-dsp", "prefer-softlogic");
OPTION_VALUE(OptXsEmulator, "emulator", bool);
OPTION_VALUE(OptXsEnableUnequalTcFusion, "enable-unequal-tc-fusion", bool);
OPTION_VALUE(OptXsFast, "fast", bool);
OPTION_VALUE(OptXsFastCompile, "fast-compile", bool);
OPTION_VALUE(OptXsForceSingleStoreRing, "force-single-store-ring", bool);
OPTION_VALUE(OptXsFpRelaxed, "fp-relaxed", bool);
OPTION_VALUE(OptXsFpc, "fpc", bool);
OPTION_VALUE(OptXsGlobalRing, "global-ring", bool);
OPTION_VALUE(OptXsHighEffort, "high-effort", bool);
OPTION_ENUM(OptXsHyperOptimizedHandshaking, "hyper-optimized-handshaking", 3, "auto", "off", "on");
OPTION_VALUE(OptXsNoAccessorAliasing, "no-accessor-aliasing", bool);
OPTION_VALUE(OptXsNoHardwareKernelInvocationQueue, "no-hardware-kernel-invocation-queue", bool);
OPTION_VALUE(OptXsNoInterleaving, "no-interleaving", std::string);
OPTION_VALUE(OptXsNumReorder, "num-reorder", unsigned);
OPTION_VALUE(OptXsParallel, "parallel", unsigned);
OPTION_VALUE(OptXsProfile, "profile", bool);
OPTION_VALUE(OptXsProfileSharedCounters, "profile-shared-counters", bool);
OPTION_VALUE(OptXsQ, "q", bool);
OPTION_VALUE(OptXsReadOnlyCacheSize, "read-only-cache-size", unsigned);
OPTION_VALUE(OptXsReport, "report", bool);
OPTION_VALUE(OptXsReuseExe, "reuse-exe", std::string);
OPTION_VALUE(OptXsRingRootArbBalancedRw, "ring-root-arb-balanced-rw", bool);
OPTION_ENUM(OptXsRounding, "rounding", 2, "ieee", "faithful");
OPTION_VALUE(OptXsSeed, "seed", int);
OPTION_VALUE(OptXsTarget, "target", std::string);
OPTION_VALUE_OPTIONAL(OptXsGhdl, "ghdl", std::string);
OPTION_ENUM(OptXsOptimize, "optimize", 2, "latency", "throughput");
